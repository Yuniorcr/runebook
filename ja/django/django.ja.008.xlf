<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="048ec96d38efe8c12dfb083658d8404651c7e75b" translate="yes" xml:space="preserve">
          <source>If not set, the return value of &lt;code&gt;django.core.wsgi.get_wsgi_application()&lt;/code&gt; will be used. In this case, the behavior of &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; will be identical to previous Django versions.</source>
          <target state="translated">設定されていない場合、 &lt;code&gt;django.core.wsgi.get_wsgi_application()&lt;/code&gt; の戻り値が使用されます。この場合、&lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;の動作は以前のDjangoバージョンと同じです。</target>
        </trans-unit>
        <trans-unit id="0bcd2319885f70c975b7765a16711af57eab9baa" translate="yes" xml:space="preserve">
          <source>If one of the existing model fields cannot be used to fit your purposes, or if you wish to take advantage of some less common database column types, you can create your own field class. Full coverage of creating your own fields is provided in &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;Writing custom model fields&lt;/a&gt;.</source>
          <target state="translated">既存のモデルフィールドの1つを使用して目的に合わせることができない場合、またはあまり一般的でないデータベース列タイプを利用したい場合は、独自のフィールドクラスを作成できます。独自のフィールドを作成する方法の詳細については、&lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;カスタムモデルフィールド&lt;/a&gt;の作成をご覧ください。</target>
        </trans-unit>
        <trans-unit id="ec78108394b7b984ffd4c8ac9c00c3ab09c32865" translate="yes" xml:space="preserve">
          <source>If one of the instances is current - say, if we were rendering the detail page in the instance &lt;code&gt;'author-polls'&lt;/code&gt; - &lt;code&gt;'polls:index'&lt;/code&gt; will resolve to the index page of the &lt;code&gt;'author-polls'&lt;/code&gt; instance; i.e. both of the following will result in &lt;code&gt;&quot;/author-polls/&quot;&lt;/code&gt;.</source>
          <target state="translated">インスタンスの1つが最新の場合-たとえば、 &lt;code&gt;'author-polls'&lt;/code&gt; インスタンスで詳細ページをレンダリングしていた場合- &lt;code&gt;'polls:index'&lt;/code&gt; は &lt;code&gt;'author-polls'&lt;/code&gt; インスタンスのインデックスページに解決されます。つまり、次の両方が &lt;code&gt;&quot;/author-polls/&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="6a7628010548cc467431f476a0dd2aede2b28e62" translate="yes" xml:space="preserve">
          <source>If one of the layers decides to short-circuit and return a response without ever calling its &lt;code&gt;get_response&lt;/code&gt;, none of the layers of the onion inside that layer (including the view) will see the request or the response. The response will only return through the same layers that the request passed in through.</source>
          <target state="translated">レイヤーの1 &lt;code&gt;get_response&lt;/code&gt; 呼び出さずに短絡して応答を返すことを決定した場合、そのレイヤー（ビューを含む）内のタマネギのどのレイヤーも要求または応答を認識しません。応答は、リクエストが通過したのと同じレイヤーを介してのみ返されます。</target>
        </trans-unit>
        <trans-unit id="5f7fc56d57619fe006603eedffe2bc29e42343d8" translate="yes" xml:space="preserve">
          <source>If one of your views receives an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object with &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;POST parameters&lt;/code&gt;&lt;/a&gt; susceptible to contain sensitive information, you may prevent the values of those parameters from being included in the error reports using the &lt;code&gt;sensitive_post_parameters&lt;/code&gt; decorator:</source>
          <target state="translated">ビューの1つが、機密情報を含む可能性のある&lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;POST parameters&lt;/code&gt; &lt;/a&gt;を持つ&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;オブジェクトを受け取った場合、 &lt;code&gt;sensitive_post_parameters&lt;/code&gt; デコレーターを使用して、これらのパラメーターの値がエラーレポートに含まれないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="fcff0878219423167c0e066e172d3008301e3e9b" translate="yes" xml:space="preserve">
          <source>If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is, of course, the same behavior as if you&amp;rsquo;d executed the functions sequentially yourself without &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定のトランザクション内の1つのオンコミット関数でキャッチされない例外が発生した場合、その同じトランザクションで後で登録された関数は実行されません。もちろん、これは&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt;なしで関数を自分で順番に実行した場合と同じ動作です。</target>
        </trans-unit>
        <trans-unit id="9c159979e36f022ea0dfa4ec34adbe09e0fd50d6" translate="yes" xml:space="preserve">
          <source>If only one key or index is used, the SQL operator &lt;code&gt;-&amp;gt;&lt;/code&gt; is used. If multiple operators are used then the &lt;code&gt;#&amp;gt;&lt;/code&gt; operator is used.</source>
          <target state="translated">キーまたはインデックスを1つだけ使用する場合、SQL演算子 &lt;code&gt;-&amp;gt;&lt;/code&gt; が使用されます。複数の演算子を使用する場合は、 &lt;code&gt;#&amp;gt;&lt;/code&gt; 演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="099c20d00ec2098bbaf3e804c844660386fd2250" translate="yes" xml:space="preserve">
          <source>If only the &lt;code&gt;expected_exception&lt;/code&gt; and &lt;code&gt;expected_message&lt;/code&gt; parameters are given, returns a context manager so that the code being tested can be written inline rather than as a function:</source>
          <target state="translated">&lt;code&gt;expected_exception&lt;/code&gt; および &lt;code&gt;expected_message&lt;/code&gt; パラメータのみが指定されている場合、テストされるコードを関数としてではなくインラインで記述できるように、コンテキストマネージャを返します。</target>
        </trans-unit>
        <trans-unit id="35d8f324adb880bcc55735740ccdb17428c2eda0" translate="yes" xml:space="preserve">
          <source>If only the project name is given, both the project directory and project package will be named &lt;code&gt;&amp;lt;projectname&amp;gt;&lt;/code&gt; and the project directory will be created in the current working directory.</source>
          <target state="translated">プロジェクト名のみを指定した場合、プロジェクトディレクトリとプロジェクトパッケージの両方に &lt;code&gt;&amp;lt;projectname&amp;gt;&lt;/code&gt; という名前が付けられ、プロジェクトディレクトリが現在の作業ディレクトリに作成されます。</target>
        </trans-unit>
        <trans-unit id="9a92c12dfd56bfbe7079f0230ba9f2be3d91cfd1" translate="yes" xml:space="preserve">
          <source>If passed, the array will have a maximum size as specified. This will be passed to the database, although PostgreSQL at present does not enforce the restriction.</source>
          <target state="translated">渡された場合、配列は指定された最大サイズを持ちます。これはデータベースに渡されますが、現在のところPostgreSQLはこの制限を強制していません。</target>
        </trans-unit>
        <trans-unit id="bbbac6dbe1f627e4d81d10293f0c6b4eac1b8f3e" translate="yes" xml:space="preserve">
          <source>If present for the field subclass, &lt;code&gt;from_db_value()&lt;/code&gt; will be called in all circumstances when the data is loaded from the database, including in aggregates and &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; calls.</source>
          <target state="translated">フィールドサブクラスに存在する場合は、データがデータベースからロードされるときに、集約および&lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;呼び出しを含むすべての状況で &lt;code&gt;from_db_value()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5d46fb88e8ed76c60d72db1c27bf5a8f7b838cfa" translate="yes" xml:space="preserve">
          <source>If provided, these arguments ensure that the string is at most or at least the given length.</source>
          <target state="translated">与えられた場合、これらの引数は、文字列が最大でも、少なくとも指定された長さであることを保証します。</target>
        </trans-unit>
        <trans-unit id="d4ce7026faaa634fc0b96ac52163aab44216566a" translate="yes" xml:space="preserve">
          <source>If requested by &lt;a href=&quot;#django.views.generic.base.RedirectView.query_string&quot;&gt;&lt;code&gt;query_string&lt;/code&gt;&lt;/a&gt;, it will also append the query string to the generated URL. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.base.RedirectView.query_string&quot;&gt; &lt;code&gt;query_string&lt;/code&gt; &lt;/a&gt;によって要求された場合、生成されたURLにクエリ文字列も追加します。メソッドがリダイレクト可能なURL文字列を返す限り、サブクラスは希望する動作を実装できます。</target>
        </trans-unit>
        <trans-unit id="faf19452a1ebae56ddadfb9b942ecd374ffb45ac" translate="yes" xml:space="preserve">
          <source>If resolving one of the block arguments fails, &lt;code&gt;blocktrans&lt;/code&gt; will fall back to the default language by deactivating the currently active language temporarily with the &lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt;&lt;code&gt;deactivate_all()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">ブロック引数の1つを解決できない場合、 &lt;code&gt;blocktrans&lt;/code&gt; は、&lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt; &lt;code&gt;deactivate_all()&lt;/code&gt; &lt;/a&gt;関数を使用して現在アクティブな言語を一時的に非アクティブにすることにより、デフォルトの言語にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="e3b2b458927a860df9d6045447f0d0faf0b56f59" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, Django&amp;rsquo;s exception handling of view functions (&lt;a href=&quot;urls#django.conf.urls.handler500&quot;&gt;&lt;code&gt;handler500&lt;/code&gt;&lt;/a&gt;, or the debug view if &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;) and logging of 500 responses (&lt;a href=&quot;../topics/logging#django-request-logger&quot;&gt;django.request&lt;/a&gt;) is skipped and exceptions propagate upwards.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; に設定すると、Djangoのビュー関数の例外処理（&lt;a href=&quot;urls#django.conf.urls.handler500&quot;&gt; &lt;code&gt;handler500&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合はデバッグビュー）と500応答のロギング（&lt;a href=&quot;../topics/logging#django-request-logger&quot;&gt;django.request&lt;/a&gt;）がスキップされ、例外が上方に伝播します。</target>
        </trans-unit>
        <trans-unit id="1e3988cd635b524ad4c3e4bb0d792a1a3fb38586" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, Oracle Managed Files (OMF) tablespaces will be used. &lt;a href=&quot;#std:setting-DATAFILE&quot;&gt;&lt;code&gt;DATAFILE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-DATAFILE_TMP&quot;&gt;&lt;code&gt;DATAFILE_TMP&lt;/code&gt;&lt;/a&gt; will be ignored.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; に設定すると、Oracle Managed Files（OMF）テーブルスペースが使用されます。&lt;a href=&quot;#std:setting-DATAFILE&quot;&gt; &lt;code&gt;DATAFILE&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#std:setting-DATAFILE_TMP&quot;&gt; &lt;code&gt;DATAFILE_TMP&lt;/code&gt; &lt;/a&gt;は無視されます。</target>
        </trans-unit>
        <trans-unit id="0701521850d9a195a77571e1f1a78268d2492816" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, the path data will be implemented in terms of relative moves. Defaults to &lt;code&gt;False&lt;/code&gt;, meaning that absolute moves are used instead.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; に設定されている場合、パスデータは相対移動に関して実装されます。デフォルトは &lt;code&gt;False&lt;/code&gt; で、絶対移動が代わりに使用されることを意味します。</target>
        </trans-unit>
        <trans-unit id="b3b374206c1d9d7963bc92da925a698f9a26de10" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, this option will create a database column of type geography, rather than geometry. Please refer to the &lt;a href=&quot;#geography-type&quot;&gt;geography type&lt;/a&gt; section below for more details.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; に設定すると、このオプションは、ジオメトリではなく、geographyタイプのデータベース列を作成します。詳細については、以下の&lt;a href=&quot;#geography-type&quot;&gt;地理タイプの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="27d12549976cfe6d3d621899eab318195533bf4e" translate="yes" xml:space="preserve">
          <source>If set to a non-zero integer value, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">ゼロ以外の整数値に設定した場合、&lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt;ヘッダーをまだ持っていないすべての応答に設定します。</target>
        </trans-unit>
        <trans-unit id="a50b195fbd06b17894ee9502ef4702bb971ad749" translate="yes" xml:space="preserve">
          <source>If set with an integer, transactions will occur at every step interval. For example, if &lt;code&gt;step=1000&lt;/code&gt;, a commit would occur after the 1,000th feature, the 2,000th feature etc.</source>
          <target state="translated">整数を設定すると、ステップ間隔ごとにトランザクションが発生します。たとえば、 &lt;code&gt;step=1000&lt;/code&gt; の場合、1,000番目のフィーチャー、2,000番目のフィーチャーなどの後にコミットが発生します。</target>
        </trans-unit>
        <trans-unit id="d8380b522d46fe516758e3f692cac2c3f0d5ddf0" translate="yes" xml:space="preserve">
          <source>If set, information will be printed subsequent to each model save executed on the database.</source>
          <target state="translated">設定されている場合、データベース上で実行される各モデル保存の後に情報が印刷されます。</target>
        </trans-unit>
        <trans-unit id="c30cf6e77ab684eba085d96ac7acc4917b027312" translate="yes" xml:space="preserve">
          <source>If that command doesn&amp;rsquo;t raise any errors, the installation worked.</source>
          <target state="translated">そのコマンドでエラーが発生しなければ、インストールは成功しています。</target>
        </trans-unit>
        <trans-unit id="f98d28bcb8810cfb8ae43b4092760e1122f40b81" translate="yes" xml:space="preserve">
          <source>If that hypothetical database write is instead rolled back (typically when an unhandled exception is raised in an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block), your function will be discarded and never called.</source>
          <target state="translated">その架空のデータベース書き込みが代わりにロールバックされた場合（通常、未処理の例外が&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;ブロックで発生した場合）、関数は破棄され、呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="e85862c30325f5a99e9a50173133105b8ad0fe04" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt; has no spatial reference information associated with it, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt; &lt;code&gt;Layer&lt;/code&gt; &lt;/a&gt;関連付けられた空間参照情報がない場合、 &lt;code&gt;None&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b51b9193a32e07b19adea10866b60d16f80af212" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt; has already been rendered, the callback will be invoked immediately.</source>
          <target state="translated">&lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt; &lt;code&gt;SimpleTemplateResponse&lt;/code&gt; &lt;/a&gt;が既にレンダリングされている場合、コールバックはすぐに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="10740bab3147ec45ec0f050fa0c6500025482a05" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute is given, that model class will be used.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt;属性が指定されている場合、そのモデルクラスが使用されます。</target>
        </trans-unit>
        <trans-unit id="8f5c4ba24e8b583b133b407fb7b8a2c07d70e77c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; contrib app is enabled (as in the default project template), the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command will collect static files into this directory. See the how-to on &lt;a href=&quot;../howto/static-files/index&quot;&gt;managing static files&lt;/a&gt; for more details about usage.</source>
          <target state="translated">場合&lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt;のcontribアプリは（デフォルトのプロジェクトテンプレートのように）有効になっている、&lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;管理コマンドは、このディレクトリに静的なファイルを収集します。使用方法の詳細については、&lt;a href=&quot;../howto/static-files/index&quot;&gt;静的ファイルの管理&lt;/a&gt;方法をご覧ください。</target>
        </trans-unit>
        <trans-unit id="934af602cfac6348740d242482f234edb0625730" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; contrib app is enabled (default in new projects) the &lt;a href=&quot;#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command will be overridden with its own &lt;a href=&quot;contrib/staticfiles#staticfiles-runserver&quot;&gt;runserver&lt;/a&gt; command.</source>
          <target state="translated">場合&lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt;（新規プロジェクトのデフォルト）が有効になっているのcontribアプリ&lt;a href=&quot;#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;コマンドは、独自で上書きされる&lt;a href=&quot;contrib/staticfiles#staticfiles-runserver&quot;&gt;のrunserver&lt;/a&gt;コマンド。</target>
        </trans-unit>
        <trans-unit id="8afc9a7ac5ef4d7727722e324647e67d5a1458d6" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; is not required, &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt;&lt;code&gt;SelectDateWidget&lt;/code&gt;&lt;/a&gt; will have an empty choice at the top of the list (which is &lt;code&gt;---&lt;/code&gt; by default). You can change the text of this label with the &lt;code&gt;empty_label&lt;/code&gt; attribute. &lt;code&gt;empty_label&lt;/code&gt; can be a &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;tuple&lt;/code&gt;. When a string is used, all select boxes will each have an empty choice with this label. If &lt;code&gt;empty_label&lt;/code&gt; is a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of 3 string elements, the select boxes will have their own custom label. The labels should be in this order &lt;code&gt;('year_label', 'month_label', 'day_label')&lt;/code&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;必要とされていない、&lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt; &lt;code&gt;SelectDateWidget&lt;/code&gt; は&lt;/a&gt;（あるリストのトップに空の選択肢を持つことになります &lt;code&gt;---&lt;/code&gt; デフォルトでは）。 &lt;code&gt;empty_label&lt;/code&gt; 属性を使用して、このラベルのテキストを変更できます。 &lt;code&gt;empty_label&lt;/code&gt; には、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;list&lt;/code&gt; 、または &lt;code&gt;tuple&lt;/code&gt; ます。文字列が使用されている場合、すべての選択ボックスにはそれぞれこのラベルが付いた空の選択肢があります。場合 &lt;code&gt;empty_label&lt;/code&gt; がある &lt;code&gt;list&lt;/code&gt; や &lt;code&gt;tuple&lt;/code&gt; 3つの文字列要素の、選択ボックスは、独自のカスタムラベルを持つことになります。ラベルは次の順序である必要があります &lt;code&gt;('year_label', 'month_label', 'day_label')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa835231e8a9a83481dbf82598e20e9d33a8a3a3" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt; setting is set, the referer is compared against it. This setting supports subdomains. For example, &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; will allow POST requests from &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;api.example.com&lt;/code&gt;. If the setting is not set, then the referer must match the HTTP &lt;code&gt;Host&lt;/code&gt; header.</source>
          <target state="translated">場合&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt; &lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt; の&lt;/a&gt;設定が設定されている、リファラがそれに対して比較されます。この設定はサブドメインをサポートします。たとえば、 &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; は、 &lt;code&gt;www.example.com&lt;/code&gt; および &lt;code&gt;api.example.com&lt;/code&gt; からのPOSTリクエストを許可します。設定が設定されていない場合、リファラーはHTTP &lt;code&gt;Host&lt;/code&gt; ヘッダーと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="d84c6d34373dc24879682691c703f3d7f2efc49b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-SECURE_SSL_HOST&quot;&gt;&lt;code&gt;SECURE_SSL_HOST&lt;/code&gt;&lt;/a&gt; setting has a value, all redirects will be sent to that host instead of the originally-requested host.</source>
          <target state="translated">場合&lt;a href=&quot;settings#std:setting-SECURE_SSL_HOST&quot;&gt; &lt;code&gt;SECURE_SSL_HOST&lt;/code&gt; の&lt;/a&gt;設定が値を持っている、すべてのリダイレクトではなく、元々 、要求されたホストのホストに送信されます。</target>
        </trans-unit>
        <trans-unit id="5615de50081621591758a391687a80e665e2ccbd" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag is used by a template (or the &lt;code&gt;get_token&lt;/code&gt; function is called some other way), &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; will add a cookie and a &lt;code&gt;Vary: Cookie&lt;/code&gt; header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (&lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; goes before all other middleware).</source>
          <target state="translated">テンプレートで&lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt;テンプレートタグが使用されている場合（または &lt;code&gt;get_token&lt;/code&gt; 関数が別の方法で呼び出されている場合）、 &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; は応答に &lt;code&gt;Vary: Cookie&lt;/code&gt; とVary：Cookieヘッダーを追加します。つまり、ミドルウェアは、指示 &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; 使用された場合、キャッシュミドルウェアとうまく連携します（UpdateCacheMiddlewareは、他のすべてのミドルウェアよりも前に移動します）。</target>
        </trans-unit>
        <trans-unit id="26bd8d1320630840541b8d7d651b43b729598b95" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Content-Type&lt;/code&gt; header is not &lt;code&gt;&quot;application/json&quot;&lt;/code&gt;, then a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised when trying to parse the response.</source>
          <target state="translated">場合 &lt;code&gt;Content-Type&lt;/code&gt; ヘッダがない &lt;code&gt;&quot;application/json&quot;&lt;/code&gt; 、そして&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; をは&lt;/a&gt;応答を解析しようとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="2acff23ea5a5ddc3c288d900245bf1fb2834f32f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Host&lt;/code&gt; header (or &lt;code&gt;X-Forwarded-Host&lt;/code&gt; if &lt;a href=&quot;#std:setting-USE_X_FORWARDED_HOST&quot;&gt;&lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt;&lt;/a&gt; is enabled) does not match any value in this list, the &lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt;&lt;/a&gt; method will raise &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">もし &lt;code&gt;Host&lt;/code&gt; （またはヘッダ &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 場合&lt;a href=&quot;#std:setting-USE_X_FORWARDED_HOST&quot;&gt; &lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt; が&lt;/a&gt;有効になっている）、このリスト内の任意の値と一致しない、&lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt; &lt;/a&gt;メソッドが発生します&lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3c585a191597195f24d023a685c724097e584557" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ManyToManyField&lt;/code&gt; points from and to the same model, the following fields are generated:</source>
          <target state="translated">&lt;code&gt;ManyToManyField&lt;/code&gt; が同じモデルとの間を指している場合、次のフィールドが生成されます。</target>
        </trans-unit>
        <trans-unit id="7111fc374211946c06667dfde5bc62beeaef76cf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ModelForm&lt;/code&gt; is only going to be used for the admin, the easiest solution is to omit the &lt;code&gt;Meta.model&lt;/code&gt; attribute, since &lt;code&gt;ModelAdmin&lt;/code&gt; will provide the correct model to use. Alternatively, you can set &lt;code&gt;fields = []&lt;/code&gt; in the &lt;code&gt;Meta&lt;/code&gt; class to satisfy the validation on the &lt;code&gt;ModelForm&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;ModelForm&lt;/code&gt; 唯一の管理のために使用されようとしている、最も簡単な解決策は省略してある &lt;code&gt;Meta.model&lt;/code&gt; のため、属性を &lt;code&gt;ModelAdmin&lt;/code&gt; のは、使用する正しいモデルを提供します。また、あなたが設定することができます &lt;code&gt;fields = []&lt;/code&gt; に &lt;code&gt;Meta&lt;/code&gt; の検証満たすためにクラス &lt;code&gt;ModelForm&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94e7c57e585e52b8e93039b8fb19e79e14bdd3e1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;RunPython&lt;/code&gt; operation is part of a &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;non-atomic migration&lt;/a&gt;, the operation will only be executed in a transaction if &lt;code&gt;atomic=True&lt;/code&gt; is passed to the &lt;code&gt;RunPython&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;RunPython&lt;/code&gt; 操作が&lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;非アトミックマイグレーションの&lt;/a&gt;一部である場合、操作は、 &lt;code&gt;atomic=True&lt;/code&gt; が &lt;code&gt;RunPython&lt;/code&gt; 操作に渡された場合にのみトランザクションで実行されます。</target>
        </trans-unit>
        <trans-unit id="31d01216ada1a5804e326038cd6eae0f674c8905" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;approximate&lt;/code&gt; argument is set to &lt;code&gt;True&lt;/code&gt;, the statistics may be computed based on overviews or a subset of image tiles.</source>
          <target state="translated">場合は &lt;code&gt;approximate&lt;/code&gt; 引数に設定されて &lt;code&gt;True&lt;/code&gt; 、統計情報は概要やイメージタイルのサブセットに基づいて計算することができます。</target>
        </trans-unit>
        <trans-unit id="92d7232ff3bb4953caa004d3cafc9ee9c491c11a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;clear()&lt;/code&gt; method is available, any pre-existing objects will be removed from the &lt;code&gt;entry_set&lt;/code&gt; before all objects in the iterable (in this case, a list) are added to the set. If the &lt;code&gt;clear()&lt;/code&gt; method is &lt;em&gt;not&lt;/em&gt; available, all objects in the iterable will be added without removing any existing elements.</source>
          <target state="translated">場合に &lt;code&gt;clear()&lt;/code&gt; メソッドが利用可能である、任意の既存のオブジェクトから削除されます &lt;code&gt;entry_set&lt;/code&gt; 反復可能ですべてのオブジェクトの前に（この場合、リストは）セットに追加されます。場合に &lt;code&gt;clear()&lt;/code&gt; メソッドが&lt;em&gt;ない&lt;/em&gt;利用可能な、反復可能のすべてのオブジェクトは、任意の既存の要素を削除せずに追加されます。</target>
        </trans-unit>
        <trans-unit id="2297ffae582b0075c91fa434df47e635fa35db94" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;count&lt;/code&gt; integer argument is specified, then additionally the number of &lt;code&gt;needle&lt;/code&gt; occurrences will be strictly verified.</source>
          <target state="translated">場合は &lt;code&gt;count&lt;/code&gt; 引数の整数が指定され、その後、さらに多数の &lt;code&gt;needle&lt;/code&gt; 発生は厳密に検証されます。</target>
        </trans-unit>
        <trans-unit id="a2e468dac67b430f87f8897eb4897a2b9f527f58" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;disable_existing_loggers&lt;/code&gt; key in the &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; dictConfig is set to &lt;code&gt;True&lt;/code&gt; (which is the &lt;code&gt;dictConfig&lt;/code&gt; default if the key is missing) then all loggers from the default configuration will be disabled. Disabled loggers are not the same as removed; the logger will still exist, but will silently discard anything logged to it, not even propagating entries to a parent logger. Thus you should be very careful using &lt;code&gt;'disable_existing_loggers': True&lt;/code&gt;; it&amp;rsquo;s probably not what you want. Instead, you can set &lt;code&gt;disable_existing_loggers&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; and redefine some or all of the default loggers; or you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt; and &lt;a href=&quot;#disabling-logging-configuration&quot;&gt;handle logging config yourself&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt; &lt;code&gt;LOGGING&lt;/code&gt; &lt;/a&gt; dictConfig の &lt;code&gt;disable_existing_loggers&lt;/code&gt; キーが &lt;code&gt;True&lt;/code&gt; （キーがない場合の &lt;code&gt;dictConfig&lt;/code&gt; のデフォルト）に設定されている場合、デフォルト構成のすべてのロガーが無効になります。無効化されたロガーは削除されたものと同じではありません。ロガーは引き続き存在しますが、ログに記録されたものは何も表示せずに破棄し、エントリを親ロガーに伝播することもしません。したがって、 &lt;code&gt;'disable_existing_loggers': True&lt;/code&gt; を使用する場合は十分に注意する必要があります。True ;それはおそらくあなたが望むものではありません。代わりに、 &lt;code&gt;disable_existing_loggers&lt;/code&gt; を &lt;code&gt;False&lt;/code&gt; に設定して、デフォルトロガーの一部またはすべてを再定義できます。または、&lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;None&lt;/code&gt; に設定できますそして&lt;a href=&quot;#disabling-logging-configuration&quot;&gt;ハンドルロギングは自分をconfigコン&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="05b08f75ebf13d1d83b41dad6945c5f27a8d81f7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;keepdb&lt;/code&gt; argument is &lt;code&gt;True&lt;/code&gt;, then the connection to the database will be closed, but the database will not be destroyed.</source>
          <target state="translated">&lt;code&gt;keepdb&lt;/code&gt; 引数が &lt;code&gt;True&lt;/code&gt; の場合、データベースへの接続は閉じられますが、データベースは破棄されません。</target>
        </trans-unit>
        <trans-unit id="08a666c5a8da8f429a409a1267d3838029509ea0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;noop&lt;/code&gt; option is present, variable lookup still takes place but the translation is skipped. This is useful when &amp;ldquo;stubbing out&amp;rdquo; content that will require translation in the future:</source>
          <target state="translated">&lt;code&gt;noop&lt;/code&gt; オプションが存在する場合、変数のルックアップは引き続き行われますが、変換はスキップされます。これは、将来翻訳が必要になるコンテンツを「スタブアウト」するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="2ee97327ba18c15399455629ba03a6de34dcb1f6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;pk&lt;/code&gt; attribute in the serialized data doesn&amp;rsquo;t exist or is null, a new instance will be saved to the database.</source>
          <target state="translated">シリアル化されたデータの &lt;code&gt;pk&lt;/code&gt; 属性が存在しないかnullの場合、新しいインスタンスがデータベースに保存されます。</target>
        </trans-unit>
        <trans-unit id="b2735b2310885870e75d0ff6691c6be8a18b8799" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;raise_exception&lt;/code&gt; parameter is given, the decorator will raise &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;, prompting &lt;a href=&quot;../../ref/views#http-forbidden-view&quot;&gt;the 403 (HTTP Forbidden) view&lt;/a&gt; instead of redirecting to the login page.</source>
          <target state="translated">場合 &lt;code&gt;raise_exception&lt;/code&gt; パラメータが与えられ、デコレータが発生します&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; を&lt;/a&gt;促し、&lt;a href=&quot;../../ref/views#http-forbidden-view&quot;&gt;403（HTTP禁止）ビュー&lt;/a&gt;の代わりにログインページにリダイレクトするのを。</target>
        </trans-unit>
        <trans-unit id="8394c12ff09c1a5f8f90c7ba9e59af4e1bad9b1d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;refresh&lt;/code&gt; argument is set to &lt;code&gt;True&lt;/code&gt;, the statistics will be computed from the data directly, and the cache will be updated with the result.</source>
          <target state="translated">場合は &lt;code&gt;refresh&lt;/code&gt; 引数に設定されて &lt;code&gt;True&lt;/code&gt; 、統計は、直接データから計算され、キャッシュが結果で更新されます。</target>
        </trans-unit>
        <trans-unit id="33693d4d2aaa6f581909a8eddc7f106b165a2f88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;render()&lt;/code&gt; method of your template tag stores the result in a context variable (rather than returning the result in a string), it should take care to call &lt;code&gt;mark_safe()&lt;/code&gt; if appropriate. When the variable is ultimately rendered, it will be affected by the auto-escape setting in effect at the time, so content that should be safe from further escaping needs to be marked as such.</source>
          <target state="translated">テンプレートタグの &lt;code&gt;render()&lt;/code&gt; メソッドが結果を（文字列で結果を返すのではなく）コンテキスト変数に格納する場合は、必要に応じて &lt;code&gt;mark_safe()&lt;/code&gt; を呼び出すように注意する必要があります。変数が最終的にレンダリングされると、その時点で有効な自動エスケープ設定の影響を受けるため、それ以上エスケープされないようにする必要があるコンテンツは、そのようにマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="c2101e6671e6072ad4bba4baf10eea4a340d6815" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;source&lt;/code&gt; command is not available, you can try using a dot instead:</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; コマンドを使用できない場合は、代わりにドットを使用してみてください。</target>
        </trans-unit>
        <trans-unit id="6fe133ba83ae0e8070bb7d71584bd37302738487" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;values()&lt;/code&gt; clause precedes the &lt;code&gt;annotate()&lt;/code&gt; clause, any annotations will be automatically added to the result set. However, if the &lt;code&gt;values()&lt;/code&gt; clause is applied after the &lt;code&gt;annotate()&lt;/code&gt; clause, you need to explicitly include the aggregate column.</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; 句が &lt;code&gt;annotate()&lt;/code&gt; （）句の前にある場合、注釈は自動的に結果セットに追加されます。ただし、 &lt;code&gt;values()&lt;/code&gt; 句が &lt;code&gt;annotate()&lt;/code&gt; 句の後に適用される場合は、集計列を明示的に含める必要があります。</target>
        </trans-unit>
        <trans-unit id="5040996a29b439b21cdb418aa42738cf3b6d145f" translate="yes" xml:space="preserve">
          <source>If the URL accepts arguments, you may pass them in &lt;code&gt;args&lt;/code&gt;. For example:</source>
          <target state="translated">URLが引数を受け入れる場合、それらを &lt;code&gt;args&lt;/code&gt; で渡すことができます。例えば：</target>
        </trans-unit>
        <trans-unit id="7e0c98ab05f016b5dde972280549bc4e7e4e4ca7" translate="yes" xml:space="preserve">
          <source>If the URL does not resolve, the function raises a &lt;a href=&quot;exceptions#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception (a subclass of &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;) .</source>
          <target state="translated">URLが解決されない場合、関数は&lt;a href=&quot;exceptions#django.urls.Resolver404&quot;&gt; &lt;code&gt;Resolver404&lt;/code&gt; &lt;/a&gt;例外（&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; の&lt;/a&gt;サブクラス）を発生させます。</target>
        </trans-unit>
        <trans-unit id="a05f5f3d9b9ee23fb6009484d0a452e7752eff69" translate="yes" xml:space="preserve">
          <source>If the URL you request with a POST contains encoded parameters, these parameters will be made available in the request.GET data. For example, if you were to make the request:</source>
          <target state="translated">POSTでリクエストしたURLにエンコードされたパラメータが含まれている場合、これらのパラメータはrequest.GETデータで利用可能になります。例えば、request.GETでリクエストしたとします。</target>
        </trans-unit>
        <trans-unit id="7bfe6092e2dbc4af99eae5987a2b05f2af49e616" translate="yes" xml:space="preserve">
          <source>If the argument passed to &lt;code&gt;floatformat&lt;/code&gt; is negative, it will round a number to that many decimal places &amp;ndash; but only if there&amp;rsquo;s a decimal part to be displayed. For example:</source>
          <target state="translated">&lt;code&gt;floatformat&lt;/code&gt; に渡された引数が負の場合、小数点以下の桁数に丸められます。ただし、表示される小数部がある場合のみです。例えば：</target>
        </trans-unit>
        <trans-unit id="37eef821508b28230557eff0648d464c18e05688" translate="yes" xml:space="preserve">
          <source>If the argument was a template variable, our function is passed the current value of the variable, not the variable itself.</source>
          <target state="translated">引数がテンプレート変数であった場合、関数は変数自体ではなく変数の現在の値を渡します。</target>
        </trans-unit>
        <trans-unit id="0cd46f87317e9cbe83ccd768d1ca1f980a06f428" translate="yes" xml:space="preserve">
          <source>If the built-in &lt;code&gt;Field&lt;/code&gt; classes don&amp;rsquo;t meet your needs, you can create custom &lt;code&gt;Field&lt;/code&gt; classes. To do this, create a subclass of &lt;code&gt;django.forms.Field&lt;/code&gt;. Its only requirements are that it implement a &lt;code&gt;clean()&lt;/code&gt; method and that its &lt;code&gt;__init__()&lt;/code&gt; method accept the core arguments mentioned above (&lt;code&gt;required&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt;, &lt;code&gt;widget&lt;/code&gt;, &lt;code&gt;help_text&lt;/code&gt;).</source>
          <target state="translated">組み込みの &lt;code&gt;Field&lt;/code&gt; クラスがニーズを満たさない場合は、カスタム &lt;code&gt;Field&lt;/code&gt; クラスを作成できます。これを行うには、 &lt;code&gt;django.forms.Field&lt;/code&gt; のサブクラスを作成します。その唯一の要件は、 &lt;code&gt;clean()&lt;/code&gt; メソッドを実装し、その &lt;code&gt;__init__()&lt;/code&gt; メソッドが上記のコア引数（ &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;label&lt;/code&gt; 、 &lt;code&gt;initial&lt;/code&gt; 、 &lt;code&gt;widget&lt;/code&gt; 、 &lt;code&gt;help_text&lt;/code&gt; ）を受け入れることです。</target>
        </trans-unit>
        <trans-unit id="0881e54800250d1cf05f08cf67b32a0f19ebd6b4" translate="yes" xml:space="preserve">
          <source>If the built-in fields don&amp;rsquo;t do the trick, you can try &lt;a href=&quot;https://github.com/django/django-localflavor&quot;&gt;django-localflavor&lt;/a&gt; (&lt;a href=&quot;https://django-localflavor.readthedocs.io/&quot;&gt;documentation&lt;/a&gt;), which contains assorted pieces of code that are useful for particular countries and cultures.</source>
          <target state="translated">組み込みフィールドでうまくいかない場合は、&lt;a href=&quot;https://github.com/django/django-localflavor&quot;&gt;django-localflavor&lt;/a&gt;（&lt;a href=&quot;https://django-localflavor.readthedocs.io/&quot;&gt;documentation&lt;/a&gt;）を試すことができます。これには、特定の国や文化に役立つさまざまなコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="f55edd29f245a56eb902d9c4815f789400cb13c8" translate="yes" xml:space="preserve">
          <source>If the callback returns a value that is not &lt;code&gt;None&lt;/code&gt;, this will be used as the response instead of the original response object (and will be passed to the next post rendering callback etc.)</source>
          <target state="translated">コールバックが &lt;code&gt;None&lt;/code&gt; 以外の値を返す場合、元の応答オブジェクトの代わりにこれが応答として使用されます（次のポストレンダリングコールバックなどに渡されます）。</target>
        </trans-unit>
        <trans-unit id="68cb408f8b62b8a0532f41e57994c10be485c369" translate="yes" xml:space="preserve">
          <source>If the computation time for using this method is too expensive, consider using &lt;a href=&quot;#django.contrib.gis.db.models.Collect&quot;&gt;&lt;code&gt;Collect&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この方法を使用するための計算時間が高すぎる場合は、代わりに&lt;a href=&quot;#django.contrib.gis.db.models.Collect&quot;&gt; &lt;code&gt;Collect&lt;/code&gt; &lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="47b5d1532c2916d14a586f84ef6f39d88cc4cdda" translate="yes" xml:space="preserve">
          <source>If the concept of a &lt;code&gt;default&lt;/code&gt; database doesn&amp;rsquo;t make sense in the context of your project, you need to be careful to always specify the database that you want to use. Django requires that a &lt;code&gt;default&lt;/code&gt; database entry be defined, but the parameters dictionary can be left blank if it will not be used. To do this, you must set up &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; for all of your apps&amp;rsquo; models, including those in any contrib and third-party apps you&amp;rsquo;re using, so that no queries are routed to the default database. The following is an example &lt;code&gt;settings.py&lt;/code&gt; snippet defining two non-default databases, with the &lt;code&gt;default&lt;/code&gt; entry intentionally left empty:</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; データベースの概念がプロジェクトのコンテキストで意味をなさない場合は、常に使用するデータベースを指定するように注意する必要があります。 Djangoでは、 &lt;code&gt;default&lt;/code&gt; データベースエントリを定義する必要がありますが、使用しない場合は、パラメータディクショナリを空白のままにすることができます。これを行うには、使用しているcontribおよびサードパーティのアプリのモデルを含め、すべてのアプリのモデルに&lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt;を設定して、クエリがデフォルトのデータベースにルーティングされないようにする必要があります。以下は、デフォルト以外の2つのデータベースを定義する &lt;code&gt;settings.py&lt;/code&gt; スニペットの例 &lt;code&gt;default&lt;/code&gt; エントリは意図的に空のままにしています。</target>
        </trans-unit>
        <trans-unit id="eeb6db1ade98b249e264e62c08a05f0b6e4af339" translate="yes" xml:space="preserve">
          <source>If the content to be serialized contains control characters that are not accepted in the XML 1.0 standard, the serialization will fail with a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; exception. Read also the W3C&amp;rsquo;s explanation of &lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;HTML, XHTML, XML and Control Codes&lt;/a&gt;.</source>
          <target state="translated">シリアル化するコンテンツに、XML 1.0標準で受け入れられない制御文字が含まれている&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;、シリアル化はValueError例外で失敗します。W3Cによる&lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;HTML、XHTML、XML、制御コード&lt;/a&gt;の説明もご覧ください。</target>
        </trans-unit>
        <trans-unit id="4525ae9d6cf2854a6fcb0608be8b93a3f3c30647" translate="yes" xml:space="preserve">
          <source>If the current time zone raises an exception for datetimes that don&amp;rsquo;t exist or are ambiguous because they fall in a DST transition (the timezones provided by &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; do this), such datetimes will be reported as invalid values.</source>
          <target state="translated">現在のタイムゾーンで、存在しないか、DST遷移に該当するためにあいまいな日時の例外が発生した場合（&lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt;によって提供されるタイムゾーンがこれを行う）、そのような日時は無効な値として報告されます。</target>
        </trans-unit>
        <trans-unit id="f4e60e6c3027fafd4a1a2f98a5fa17785a3288ae" translate="yes" xml:space="preserve">
          <source>If the custom through table defined by the intermediate model does not enforce uniqueness on the &lt;code&gt;(model1, model2)&lt;/code&gt; pair, allowing multiple values, the &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; call will remove all intermediate model instances:</source>
          <target state="translated">中間モデルによって定義されたカスタムスルーテーブルが &lt;code&gt;(model1, model2)&lt;/code&gt; ペアに一意性を適用せず、複数の値を許可する場合、&lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt;呼び出しはすべての中間モデルインスタンスを削除します。</target>
        </trans-unit>
        <trans-unit id="24e26eeaf3ed6a6240170bc7969a0916fee521c8" translate="yes" xml:space="preserve">
          <source>If the database column name is a Python reserved word (such as &lt;code&gt;'pass'&lt;/code&gt;, &lt;code&gt;'class'&lt;/code&gt; or &lt;code&gt;'for'&lt;/code&gt;), &lt;code&gt;inspectdb&lt;/code&gt; will append &lt;code&gt;'_field'&lt;/code&gt; to the attribute name. For example, if a table has a column &lt;code&gt;'for'&lt;/code&gt;, the generated model will have a field &lt;code&gt;'for_field'&lt;/code&gt;, with the &lt;code&gt;db_column&lt;/code&gt; attribute set to &lt;code&gt;'for'&lt;/code&gt;. &lt;code&gt;inspectdb&lt;/code&gt; will insert the Python comment &lt;code&gt;'Field renamed because it was a Python reserved word.'&lt;/code&gt; next to the field.</source>
          <target state="translated">データベースの列名がPythonの予約語（ &lt;code&gt;'pass'&lt;/code&gt; 、 &lt;code&gt;'class'&lt;/code&gt; 、 &lt;code&gt;'for'&lt;/code&gt; など）の場合、 &lt;code&gt;inspectdb&lt;/code&gt; は属性名に &lt;code&gt;'_field'&lt;/code&gt; を追加します。たとえば、テーブルに列 &lt;code&gt;'for'&lt;/code&gt; がある場合、生成されたモデルにはフィールド &lt;code&gt;'for_field'&lt;/code&gt; があり、 &lt;code&gt;db_column&lt;/code&gt; 属性が &lt;code&gt;'for'&lt;/code&gt; に設定されます。 &lt;code&gt;inspectdb&lt;/code&gt; は、Pythonのコメント &lt;code&gt;'Field renamed because it was a Python reserved word.'&lt;/code&gt; を挿入します。フィールドの隣。</target>
        </trans-unit>
        <trans-unit id="b433adee0cff9f7e77689b285a176f694c2dfe64" translate="yes" xml:space="preserve">
          <source>If the database has the &lt;code&gt;supports_combined_alters&lt;/code&gt;, Django will try and do as many of these in a single database call as possible; otherwise, it will issue a separate ALTER statement for each change, but will not issue ALTERs where no change is required (as South often did).</source>
          <target state="translated">データベースに &lt;code&gt;supports_combined_alters&lt;/code&gt; がある場合、Djangoはこれらを可能な限り1回のデータベース呼び出しで実行しようとします。それ以外の場合は、変更ごとに個別のALTERステートメントを発行しますが、（Southが頻繁に行っていたように）変更が不要な場所ではALTERを発行しません。</target>
        </trans-unit>
        <trans-unit id="2b6214efcbb5905b7ba74c2ae487377c68437bf4" translate="yes" xml:space="preserve">
          <source>If the database is responsible for updating the field, the process is more robust: it will only ever update the field based on the value of the field in the database when the &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;update()&lt;/code&gt; is executed, rather than based on its value when the instance was retrieved.</source>
          <target state="translated">データベースがフィールドの更新を担当している場合、プロセスはより堅牢になります&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;update()&lt;/code&gt; が実行されるときに、データベースのフィールドの値に基づいてではなく、データベースのフィールドの値に基づいてのみフィールドを更新しますインスタンスが取得されたときの値。</target>
        </trans-unit>
        <trans-unit id="75e620c38af1daa6c954718d3fb54518ed7eaca8" translate="yes" xml:space="preserve">
          <source>If the database supports it, you can specify the start and end points based on values of an expression in the partition. If the &lt;code&gt;released&lt;/code&gt; field of the &lt;code&gt;Movie&lt;/code&gt; model stores the release month of each movies, this &lt;code&gt;ValueRange&lt;/code&gt; example annotates each movie with the average rating of a movie&amp;rsquo;s peers released between twelve months before and twelve months after the each movie.</source>
          <target state="translated">データベースでサポートされている場合は、パーティション内の式の値に基づいて開始点と終了点を指定できます。 &lt;code&gt;Movie&lt;/code&gt; モデルの &lt;code&gt;released&lt;/code&gt; フィールドに各映画のリリース月が格納されている場合、この &lt;code&gt;ValueRange&lt;/code&gt; の例は、各映画に、各映画の12か月前から12か月前にリリースされた映画のピアの平均評価で注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="de682c7bb318e9e4b8081e3ba95e6e42e73b0668" translate="yes" xml:space="preserve">
          <source>If the default value (&lt;code&gt;None&lt;/code&gt;) is used with the SQLite database engine, the tests will use a memory resident database. For all other database engines the test database will use the name &lt;code&gt;'test_' + DATABASE_NAME&lt;/code&gt;.</source>
          <target state="translated">SQLiteデータベースエンジンでデフォルト値（ &lt;code&gt;None&lt;/code&gt; ）が使用されている場合、テストはメモリ常駐データベースを使用します。他のすべてのデータベースエンジンでは、テストデータベースは &lt;code&gt;'test_' + DATABASE_NAME&lt;/code&gt; という名前を使用します。</target>
        </trans-unit>
        <trans-unit id="31d7e870cfce92781ed62069a8d06aed8bd6f166" translate="yes" xml:space="preserve">
          <source>If the email address provided does not exist in the system, the user is inactive, or has an unusable password, the user will still be redirected to this view but no email will be sent.</source>
          <target state="translated">提供された電子メールアドレスがシステムに存在しない場合、ユーザーがアクティブでない場合、または使用不可能なパスワードを使用している場合、ユーザーはこのビューにリダイレクトされますが、電子メールは送信されません。</target>
        </trans-unit>
        <trans-unit id="db3ee4ff45ccc9f4fcd4236a06eb867d73a8a85f" translate="yes" xml:space="preserve">
          <source>If the email address provided does not exist in the system, this view won&amp;rsquo;t send an email, but the user won&amp;rsquo;t receive any error message either. This prevents information leaking to potential attackers. If you want to provide an error message in this case, you can subclass &lt;a href=&quot;#django.contrib.auth.forms.PasswordResetForm&quot;&gt;&lt;code&gt;PasswordResetForm&lt;/code&gt;&lt;/a&gt; and use the &lt;code&gt;form_class&lt;/code&gt; attribute.</source>
          <target state="translated">提供された電子メールアドレスがシステムに存在しない場合、このビューは電子メールを送信しませんが、ユーザーはエラーメッセージを受け取りません。これにより、潜在的な攻撃者への情報漏えいを防ぎます。この場合にエラーメッセージを提供する場合は、&lt;a href=&quot;#django.contrib.auth.forms.PasswordResetForm&quot;&gt; &lt;code&gt;PasswordResetForm&lt;/code&gt; &lt;/a&gt;をサブクラス化して &lt;code&gt;form_class&lt;/code&gt; 属性を使用できます。</target>
        </trans-unit>
        <trans-unit id="c99e2655adb8e99185dcdfcf065a8bd817fd52d8" translate="yes" xml:space="preserve">
          <source>If the feed format is totally custom, you&amp;rsquo;ll want to subclass &lt;code&gt;SyndicationFeed&lt;/code&gt; and completely replace the &lt;code&gt;write()&lt;/code&gt; and &lt;code&gt;writeString()&lt;/code&gt; methods.</source>
          <target state="translated">フィードの形式が完全にカスタムの場合は、 &lt;code&gt;SyndicationFeed&lt;/code&gt; をサブクラス化して、 &lt;code&gt;write()&lt;/code&gt; &lt;code&gt;writeString()&lt;/code&gt; メソッドとwriteString（）メソッドを完全に置き換えます。</target>
        </trans-unit>
        <trans-unit id="e7368b6434626ac779365385ae08f94dbbeb6a28" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;BooleanField&lt;/code&gt;, Django will display a pretty &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo; icon instead of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">フィールドが &lt;code&gt;BooleanField&lt;/code&gt; の場合、Djangoは &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; ではなく、かなり「オン」または「オフ」のアイコンを表示します。</target>
        </trans-unit>
        <trans-unit id="93a5e61f0fff2318c8177651d57e9f9df8232f8d" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ForeignKey&lt;/code&gt;, Django will display the &lt;code&gt;__str__()&lt;/code&gt; of the related object.</source>
          <target state="translated">フィールドが &lt;code&gt;ForeignKey&lt;/code&gt; の場合、Djangoは関連オブジェクトの &lt;code&gt;__str__()&lt;/code&gt; を表示します。</target>
        </trans-unit>
        <trans-unit id="187bb90cacedf45099edc0ce8a570d93fd2dd2d0" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ForeignKey&lt;/code&gt;, this will also add the foreign key constraint to the column.</source>
          <target state="translated">フィールドが &lt;code&gt;ForeignKey&lt;/code&gt; の場合、これにより、列に外部キー制約も追加されます。</target>
        </trans-unit>
        <trans-unit id="7fc4678d8fbbd49c904395e0d20c16a282bf2e32" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ManyToManyField&lt;/code&gt; without a value for &lt;code&gt;through&lt;/code&gt;, instead of creating a column, it will make a table to represent the relationship. If &lt;code&gt;through&lt;/code&gt; is provided, it is a no-op.</source>
          <target state="translated">フィールドがある場合 &lt;code&gt;ManyToManyField&lt;/code&gt; の値なし &lt;code&gt;through&lt;/code&gt; 代わりに列を作成するのではなく、それは関係を表すためにテーブルを作成します。 &lt;code&gt;through&lt;/code&gt; が指定されている場合、何も行われません。</target>
        </trans-unit>
        <trans-unit id="c3e41a9270c1726202619f246ad8066eeba76c80" translate="yes" xml:space="preserve">
          <source>If the field is a ManyToManyField without a value for &lt;code&gt;through&lt;/code&gt;, it will remove the table created to track the relationship. If &lt;code&gt;through&lt;/code&gt; is provided, it is a no-op.</source>
          <target state="translated">フィールドには値なしのManyToManyFieldであれば &lt;code&gt;through&lt;/code&gt; 、それは関係を追跡するために作成されたテーブルを削除します。 &lt;code&gt;through&lt;/code&gt; が指定されている場合、何も行われません。</target>
        </trans-unit>
        <trans-unit id="2eb25c25d3d9375ffc539e7ad5b8fd3b1ac65ecc" translate="yes" xml:space="preserve">
          <source>If the fields that you&amp;rsquo;re combining are of different types you&amp;rsquo;ll need to tell Django what kind of field will be returned. Since &lt;code&gt;F()&lt;/code&gt; does not directly support &lt;code&gt;output_field&lt;/code&gt; you will need to wrap the expression with &lt;a href=&quot;#django.db.models.ExpressionWrapper&quot;&gt;&lt;code&gt;ExpressionWrapper&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">組み合わせるフィールドのタイプが異なる場合は、返されるフィールドの種類をDjangoに通知する必要があります。以来 &lt;code&gt;F()&lt;/code&gt; を直接サポートしていない &lt;code&gt;output_field&lt;/code&gt; あなたが表現をラップする必要があります&lt;a href=&quot;#django.db.models.ExpressionWrapper&quot;&gt; &lt;code&gt;ExpressionWrapper&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="920dc62d10b6075521a8826f302508a777dbe1bd" translate="yes" xml:space="preserve">
          <source>If the flatpage has a custom template, it loads that template. Otherwise, it loads the template &lt;code&gt;flatpages/default.html&lt;/code&gt;.</source>
          <target state="translated">フラットページにカスタムテンプレートがある場合は、そのテンプレートを読み込みます。それ以外の場合は、テンプレート &lt;code&gt;flatpages/default.html&lt;/code&gt; をロードします。</target>
        </trans-unit>
        <trans-unit id="14fdac3e377218b7cc6f1824107094f6dfcc7132" translate="yes" xml:space="preserve">
          <source>If the form is bound to data, the HTML output will include that data appropriately. For example, if a field is represented by an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, the data will be in the &lt;code&gt;value&lt;/code&gt; attribute. If a field is represented by an &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;, then that HTML will include &lt;code&gt;checked&lt;/code&gt; if appropriate:</source>
          <target state="translated">フォームがデータにバインドされている場合、HTML出力にはそのデータが適切に含まれます。たとえば、フィールドが &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; で表されている場合、データは &lt;code&gt;value&lt;/code&gt; 属性に含まれます。フィールドが &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; で表されている場合、該当する場合、そのHTMLには &lt;code&gt;checked&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="2347bbb524d905c24374a2f0eed006de697e76e6" translate="yes" xml:space="preserve">
          <source>If the form is submitted using a &lt;code&gt;POST&lt;/code&gt; request, the view will once again create a form instance and populate it with data from the request: &lt;code&gt;form =
NameForm(request.POST)&lt;/code&gt; This is called &amp;ldquo;binding data to the form&amp;rdquo; (it is now a &lt;em&gt;bound&lt;/em&gt; form).</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; リクエストを使用してフォームが送信されると、ビューはもう一度フォームインスタンスを作成し、リクエストからのデータを入力します &lt;code&gt;form = NameForm(request.POST)&lt;/code&gt; これは「フォームへのデータのバインド」と呼ばれます（現在は&lt;em&gt;バウンド&lt;/em&gt;形式）。</target>
        </trans-unit>
        <trans-unit id="a9757191fc0fc873cf4bf622fc86ad210c659471" translate="yes" xml:space="preserve">
          <source>If the form object passed to a template has a different name within the context, you can alias it using the &lt;code&gt;with&lt;/code&gt; argument of the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag:</source>
          <target state="translated">テンプレートに渡されたフォームオブジェクトの名前がコンテキスト内で異なる場合は、&lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt;タグの &lt;code&gt;with&lt;/code&gt; 引数を使用してエイリアスを作成できます。</target>
        </trans-unit>
        <trans-unit id="d04738f31fd24193f9e0dc204f8a74807516e46f" translate="yes" xml:space="preserve">
          <source>If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest &lt;code&gt;published&lt;/code&gt; date for every entry associated with that blog. One way to do this would be:</source>
          <target state="translated">最新のブログエントリを表示しているフロントページが新しいブログエントリを追加したときにのみ変更される場合、最終変更時刻を非常にすばやく計算できます。そのブログに関連付けられているすべてのエントリの最新の &lt;code&gt;published&lt;/code&gt; 日が必要です。これを行う1つの方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a34161a59a4f0d30905cb9967f322b4a368ff736" translate="yes" xml:space="preserve">
          <source>If the given URL is &lt;code&gt;None&lt;/code&gt;, Django will return an &lt;code&gt;HttpResponseGone&lt;/code&gt; (410).</source>
          <target state="translated">指定されたURLが &lt;code&gt;None&lt;/code&gt; の場合、Djangoは &lt;code&gt;HttpResponseGone&lt;/code&gt; （410）を返します。</target>
        </trans-unit>
        <trans-unit id="1a04dcff64887ebdbc5f16a342619a164a3cd7da" translate="yes" xml:space="preserve">
          <source>If the given URL is not found, accessing this attribute will raise a &lt;a href=&quot;../../ref/exceptions#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">指定されたURLが見つからない場合、この属性にアクセスすると&lt;a href=&quot;../../ref/exceptions#django.urls.Resolver404&quot;&gt; &lt;code&gt;Resolver404&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="f77d4aed574a50b3060efbb746c1d73ca1c67d9a" translate="yes" xml:space="preserve">
          <source>If the input is a file path, the raster is opened from there. If the input is raw data in a dictionary, the parameters &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;srid&lt;/code&gt; are required. If the input is a bytes object, it will be opened using a GDAL virtual filesystem.</source>
          <target state="translated">入力がファイルパスの場合、ラスターはそこから開かれます。入力がディクショナリ内の生データの場合、パラメーター &lt;code&gt;width&lt;/code&gt; 、 &lt;code&gt;height&lt;/code&gt; 、および &lt;code&gt;srid&lt;/code&gt; が必要です。入力がバイトオブジェクトの場合、GDAL仮想ファイルシステムを使用して開かれます。</target>
        </trans-unit>
        <trans-unit id="00448ece8c00dea5fb14fcecd674a9b61b65198b" translate="yes" xml:space="preserve">
          <source>If the key is an integer, it will be interpreted as an index lookup in an array:</source>
          <target state="translated">キーが整数の場合は、配列のインデックス検索として解釈されます。</target>
        </trans-unit>
        <trans-unit id="ac79a02ca9d1e219d3a805f08c37df80bb98035e" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, use the &lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt;&lt;code&gt;jsonfield.contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">別のルックアップの名前と衝突するクエリのキーが必要な場合は、代わりに&lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt; &lt;code&gt;jsonfield.contains&lt;/code&gt; &lt;/a&gt;ルックアップを使用してください。</target>
        </trans-unit>
        <trans-unit id="407cc2b75a43efab538c3808b42253f8c6a41dce" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, you need to use the &lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt;&lt;code&gt;hstorefield.contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">別のルックアップの名前と衝突するクエリのキーが必要な場合は、代わりに&lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt; &lt;code&gt;hstorefield.contains&lt;/code&gt; &lt;/a&gt;ルックアップを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ebd9152465f3666cabb8bf46cfee56114d51e1f" translate="yes" xml:space="preserve">
          <source>If the locale middleware is active, it provides a fallback language in case the user&amp;rsquo;s preferred language can&amp;rsquo;t be determined or is not supported by the website. It also provides the fallback translation when a translation for a given literal doesn&amp;rsquo;t exist for the user&amp;rsquo;s preferred language.</source>
          <target state="translated">ロケールミドルウェアがアクティブな場合、ユーザーの優先言語を決定できない場合や、Webサイトでサポートされていない場合に備えて、フォールバック言語が提供されます。また、特定のリテラルの翻訳がユーザーの優先言語に存在しない場合のフォールバック翻訳も提供します。</target>
        </trans-unit>
        <trans-unit id="b655b28cf85b0e9ab6424f2bae76d62937214d02" translate="yes" xml:space="preserve">
          <source>If the locale middleware isn&amp;rsquo;t in use, it decides which translation is served to all users.</source>
          <target state="translated">ロケールミドルウェアが使用されていない場合は、すべてのユーザーに提供する翻訳を決定します。</target>
        </trans-unit>
        <trans-unit id="8c593d7145885e16ebab0576dd01ea5edc8eb619" translate="yes" xml:space="preserve">
          <source>If the location is already an absolute URI, it will not be altered. Otherwise the absolute URI is built using the server variables available in this request. For example:</source>
          <target state="translated">ロケーションがすでに絶対URIである場合、それは変更されない。そうでなければ、絶対 URI はこのリクエストで利用可能なサーバ変数を使用して構築される。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d3264db38633da128d75c5eb268e476d4a3b951a" translate="yes" xml:space="preserve">
          <source>If the log record contains a &lt;code&gt;request&lt;/code&gt; attribute, the full details of the request will be included in the email. The email subject will include the phrase &amp;ldquo;internal IP&amp;rdquo; if the client&amp;rsquo;s IP address is in the &lt;a href=&quot;../ref/settings#std:setting-INTERNAL_IPS&quot;&gt;&lt;code&gt;INTERNAL_IPS&lt;/code&gt;&lt;/a&gt; setting; if not, it will include &amp;ldquo;EXTERNAL IP&amp;rdquo;.</source>
          <target state="translated">ログレコードに &lt;code&gt;request&lt;/code&gt; 属性が含まれている場合、リクエストの完全な詳細が電子メールに含まれます。クライアントのIPアドレスが&lt;a href=&quot;../ref/settings#std:setting-INTERNAL_IPS&quot;&gt; &lt;code&gt;INTERNAL_IPS&lt;/code&gt; &lt;/a&gt;設定にある場合、電子メールの件名には「内部IP」というフレーズが含まれます。含まれていない場合は、「外部IP」が含まれます。</target>
        </trans-unit>
        <trans-unit id="558c854eeaec5a7ab6be858905f8f23539e7a64a" translate="yes" xml:space="preserve">
          <source>If the log record contains stack trace information, that stack trace will be included in the email.</source>
          <target state="translated">ログレコードにスタックトレース情報が含まれている場合、そのスタックトレースはメールに含まれます。</target>
        </trans-unit>
        <trans-unit id="8d11f19d1f78b5ab369ba0f054bb8ddefd7d18dc" translate="yes" xml:space="preserve">
          <source>If the matched URL pattern contained no named groups, then the matches from the regular expression are provided as positional arguments.</source>
          <target state="translated">マッチしたURLパターンに名前付きグループが含まれていない場合、正規表現からのマッチは位置引数として提供されます。</target>
        </trans-unit>
        <trans-unit id="f27bc33c579e0ba1b671f20cb2b969680090aa80" translate="yes" xml:space="preserve">
          <source>If the middleware is enabled, the language can be set by creating a cookie with a name of &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; and a value of the language code:</source>
          <target state="translated">ミドルウェアが有効になっている場合は、&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;という名前と言語コードの値でCookieを作成することにより、言語を設定できます。</target>
        </trans-unit>
        <trans-unit id="f8b3db4161aa1f1d9ef7d96ed438167b2a06057a" translate="yes" xml:space="preserve">
          <source>If the middleware isn&amp;rsquo;t enabled, the active language may be set using &lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt;&lt;code&gt;translation.override()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ミドルウェアが有効になっていない場合、アクティブな言語は&lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt; &lt;code&gt;translation.override()&lt;/code&gt; &lt;/a&gt;を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="77e0e8d1467be7a2d6e9f0484b05652c14f7c823" translate="yes" xml:space="preserve">
          <source>If the model field has &lt;code&gt;blank=True&lt;/code&gt;, then &lt;code&gt;required&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt; on the form field. Otherwise, &lt;code&gt;required=True&lt;/code&gt;.</source>
          <target state="translated">モデルフィールドがある場合は &lt;code&gt;blank=True&lt;/code&gt; 場合、 &lt;code&gt;required&lt;/code&gt; に設定されている &lt;code&gt;False&lt;/code&gt; フォームフィールドに。それ以外の場合は、 &lt;code&gt;required=True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b6ce905c045e003d848e1a4bfebb8367398b55a5" translate="yes" xml:space="preserve">
          <source>If the model field has &lt;code&gt;choices&lt;/code&gt; set, then the form field&amp;rsquo;s &lt;code&gt;widget&lt;/code&gt; will be set to &lt;code&gt;Select&lt;/code&gt;, with choices coming from the model field&amp;rsquo;s &lt;code&gt;choices&lt;/code&gt;. The choices will normally include the blank choice which is selected by default. If the field is required, this forces the user to make a selection. The blank choice will not be included if the model field has &lt;code&gt;blank=False&lt;/code&gt; and an explicit &lt;code&gt;default&lt;/code&gt; value (the &lt;code&gt;default&lt;/code&gt; value will be initially selected instead).</source>
          <target state="translated">モデルフィールドに &lt;code&gt;choices&lt;/code&gt; 設定されている場合、フォームフィールドの &lt;code&gt;widget&lt;/code&gt; は &lt;code&gt;Select&lt;/code&gt; に設定され、選択肢はモデルフィールドの &lt;code&gt;choices&lt;/code&gt; から取得されます。選択肢には通常、デフォルトで選択されている空白の選択肢が含まれます。フィールドが必要な場合、ユーザーはこれを選択する必要があります。モデルフィールドに &lt;code&gt;blank=False&lt;/code&gt; と明示的な &lt;code&gt;default&lt;/code&gt; 値がある場合、空白の選択肢は含まれません（代わりに &lt;code&gt;default&lt;/code&gt; 値が最初に選択されます）。</target>
        </trans-unit>
        <trans-unit id="f96a82c6715c5a715a0e01211ac8adf4e12046a4" translate="yes" xml:space="preserve">
          <source>If the model&amp;rsquo;s primary key is an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; it does not retrieve and set the primary key attribute, as &lt;code&gt;save()&lt;/code&gt; does, unless the database backend supports it (currently PostgreSQL).</source>
          <target state="translated">モデルの主キーが&lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;である場合、データベースバックエンドがそれをサポートしていない限り（現在のPostgreSQL）、 &lt;code&gt;save()&lt;/code&gt; のように主キー属性を取得および設定しません。</target>
        </trans-unit>
        <trans-unit id="b759c75b1b279d612802ffa84e3c983524d1b418" translate="yes" xml:space="preserve">
          <source>If the named fixture has a file extension, only fixtures of that type will be loaded. For example:</source>
          <target state="translated">名前のついたフィクスチャがファイル拡張子を持っている場合、そのタイプのフィクスチャのみがロードされます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="362d07b2752f99df71674036aec9a530c5efa750" translate="yes" xml:space="preserve">
          <source>If the named key does not exist, &lt;code&gt;InvalidCacheBackendError&lt;/code&gt; will be raised.</source>
          <target state="translated">名前付きキーが存在しない場合、 &lt;code&gt;InvalidCacheBackendError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="a668f34f8121048f3d4b44ccf50ee64fbbfdbd16" translate="yes" xml:space="preserve">
          <source>If the normal base manager class (&lt;a href=&quot;#django.db.models.Manager&quot;&gt;&lt;code&gt;django.db.models.Manager&lt;/code&gt;&lt;/a&gt;) isn&amp;rsquo;t appropriate for your circumstances, you can tell Django which class to use by setting &lt;a href=&quot;../../ref/models/options#django.db.models.Options.base_manager_name&quot;&gt;&lt;code&gt;Meta.base_manager_name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常のベースマネージャークラス（&lt;a href=&quot;#django.db.models.Manager&quot;&gt; &lt;code&gt;django.db.models.Manager&lt;/code&gt; &lt;/a&gt;）が状況に&lt;a href=&quot;../../ref/models/options#django.db.models.Options.base_manager_name&quot;&gt; &lt;code&gt;Meta.base_manager_name&lt;/code&gt; &lt;/a&gt;ない場合は、Meta.base_manager_nameを設定することで、使用するクラスをDjangoに指示できます。</target>
        </trans-unit>
        <trans-unit id="826ea8b39c2adb284a994b3ac295d22a4f3c7746" translate="yes" xml:space="preserve">
          <source>If the number of items in the initial data exceeds &lt;code&gt;max_num&lt;/code&gt;, all initial data forms will be displayed regardless of the value of &lt;code&gt;max_num&lt;/code&gt; and no extra forms will be displayed. For example, if &lt;code&gt;extra=3&lt;/code&gt; and &lt;code&gt;max_num=1&lt;/code&gt; and the formset is initialized with two initial items, two forms with the initial data will be displayed.</source>
          <target state="translated">初期データの項目数を超えた場合は &lt;code&gt;max_num&lt;/code&gt; 、すべての初期データの形式は、の値に関係なく表示されます &lt;code&gt;max_num&lt;/code&gt; と余分なフォームは表示されません。たとえば、 &lt;code&gt;extra=3&lt;/code&gt; および &lt;code&gt;max_num=1&lt;/code&gt; で、フォームセットが2つの初期アイテムで初期化されている場合、初期データを持つ2つのフォームが表示されます。</target>
        </trans-unit>
        <trans-unit id="9a54427017bdff00314afd5156803ed55090ab15" translate="yes" xml:space="preserve">
          <source>If the number of items in the input is different from the target pixel block, the &lt;code&gt;shape&lt;/code&gt; parameter must be specified. The shape is a tuple that specifies the width and height of the input data in pixels. The data is then replicated to update the pixel values of the selected block. This is useful to fill an entire band with a single value, for instance.</source>
          <target state="translated">入力の項目数がターゲットピクセルブロックと異なる場合は、 &lt;code&gt;shape&lt;/code&gt; パラメーターを指定する必要があります。形状は、入力データの幅と高さをピクセル単位で指定するタプルです。次に、データが複製され、選択されたブロックのピクセル値が更新されます。これは、たとえば、バンド全体を単一の値で埋めるために役立ちます。</target>
        </trans-unit>
        <trans-unit id="a6a6749b0e99cb6050db9cf3716874b3e4ced2ec" translate="yes" xml:space="preserve">
          <source>If the object doesn&amp;rsquo;t exist in the cache, &lt;code&gt;cache.get()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">オブジェクトがキャッシュに存在しない場合、 &lt;code&gt;cache.get()&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="646d736dabdd25c732e89d37d9d4201115c381b3" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute defines a &lt;a href=&quot;fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; then Django executes an &lt;code&gt;UPDATE&lt;/code&gt; if it is an existing model instance and primary key is set to a value that exists in the database. Otherwise, Django executes an &lt;code&gt;INSERT&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの主キー属性が&lt;a href=&quot;fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;定義している場合、それが既存のモデルインスタンスであり、主キーがデータベースに存在する値に設定されている場合、Djangoは &lt;code&gt;UPDATE&lt;/code&gt; を実行します。それ以外の場合、Djangoは &lt;code&gt;INSERT&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="c671ef226635a52b529ee6c4d9e1022741a8176d" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute is &lt;em&gt;not&lt;/em&gt; set or if the &lt;code&gt;UPDATE&lt;/code&gt; didn&amp;rsquo;t update anything (e.g. if primary key is set to a value that doesn&amp;rsquo;t exist in the database), Django executes an &lt;code&gt;INSERT&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの主キー属性がされている場合&lt;em&gt;ではない&lt;/em&gt;設定または場合 &lt;code&gt;UPDATE&lt;/code&gt; が（主キーがデータベースに存在しない値に設定されている場合など）何も更新されませんでした、Djangoは実行 &lt;code&gt;INSERT&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="6e28fb5ae884b5520d6c8a7cdb6b70dbd48ca7eb" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute is set to a value that evaluates to &lt;code&gt;True&lt;/code&gt; (i.e., a value other than &lt;code&gt;None&lt;/code&gt; or the empty string), Django executes an &lt;code&gt;UPDATE&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの主キー属性が &lt;code&gt;True&lt;/code&gt; と評価される値（つまり、 &lt;code&gt;None&lt;/code&gt; または空の文字列以外の値）に設定されている場合、Djangoは &lt;code&gt;UPDATE&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="34a7e5104e15b8b6de4d5070431c0318f28a763a" translate="yes" xml:space="preserve">
          <source>If the old &lt;code&gt;number_sold&lt;/code&gt; value retrieved from the database was 10, then the value of 11 will be written back to the database.</source>
          <target state="translated">データベースから取得された古い &lt;code&gt;number_sold&lt;/code&gt; 値が10の場合、値11がデータベースに書き戻されます。</target>
        </trans-unit>
        <trans-unit id="aca412a3a96d6dc532c6fed74ff3abb6bb8b6222" translate="yes" xml:space="preserve">
          <source>If the optional destination is provided, Django will use that existing directory as the project directory, and create &lt;code&gt;manage.py&lt;/code&gt; and the project package within it. Use &amp;lsquo;.&amp;rsquo; to denote the current working directory.</source>
          <target state="translated">オプションの宛先が指定されている場合、Djangoはその既存のディレクトリをプロジェクトディレクトリとして使用し、その中に &lt;code&gt;manage.py&lt;/code&gt; とプロジェクトパッケージを作成します。使用する '。' 現在の作業ディレクトリを示します。</target>
        </trans-unit>
        <trans-unit id="96bd866396bdc1707e3fb218d60c9174cbfa1187" translate="yes" xml:space="preserve">
          <source>If the optional destination is provided, Django will use that existing directory rather than creating a new one. You can use &amp;lsquo;.&amp;rsquo; to denote the current working directory.</source>
          <target state="translated">オプションの宛先が指定されている場合、Djangoは新しいディレクトリを作成するのではなく、既存のディレクトリを使用します。「。」を使用できます。現在の作業ディレクトリを示します。</target>
        </trans-unit>
        <trans-unit id="d65b4b8040f37069c8c493e01d172fe82c59186d" translate="yes" xml:space="preserve">
          <source>If the page is cacheable, but you still want the permission check to be performed, you can pass a &lt;code&gt;cacheable=True&lt;/code&gt; argument to &lt;code&gt;AdminSite.admin_view()&lt;/code&gt;:</source>
          <target state="translated">ページがキャッシュ可能であるにもかかわらず、権限チェックを実行したい場合は、 &lt;code&gt;AdminSite.admin_view()&lt;/code&gt; &lt;code&gt;cacheable=True&lt;/code&gt; 引数をAdminSite.admin_view（）に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2d63af43bcd959831a177ff5a58c265ebe73ad08" translate="yes" xml:space="preserve">
          <source>If the page isn&amp;rsquo;t a number, it returns the first page. If the page number is negative or greater than the number of pages, it returns the last page.</source>
          <target state="translated">ページが数値でない場合は、最初のページを返します。ページ番号が負の場合、またはページ数より大きい場合は、最後のページを返します。</target>
        </trans-unit>
        <trans-unit id="449c71074274cb7cb8ca111a6688e519d349913f" translate="yes" xml:space="preserve">
          <source>If the parent has an ordering and you don&amp;rsquo;t want the child to have any natural ordering, you can explicitly disable it:</source>
          <target state="translated">親に順序があり、子に自然な順序を持たせたくない場合は、明示的に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="7e8326d7c2e2af22b7076e60b8fae585d509c641" translate="yes" xml:space="preserve">
          <source>If the paths and converters syntax isn&amp;rsquo;t sufficient for defining your URL patterns, you can also use regular expressions. To do so, use &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;re_path()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パスとコンバーターの構文がURLパターンを定義するのに十分でない場合は、正規表現を使用することもできます。これを行うには、使用&lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;re_path()&lt;/code&gt; &lt;/a&gt;の代わりに、&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ba3b655a98f41927c3df59507ec695765575a46" translate="yes" xml:space="preserve">
          <source>If the provided namespace doesn&amp;rsquo;t match an &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; in step 1, Django will attempt a direct lookup of the namespace as an &lt;a href=&quot;#term-instance-namespace&quot;&gt;instance namespace&lt;/a&gt;.</source>
          <target state="translated">提供された名前&lt;a href=&quot;#term-application-namespace&quot;&gt;空間&lt;/a&gt;がステップ1でアプリケーションの名前空間と一致しない場合、Djangoは&lt;a href=&quot;#term-instance-namespace&quot;&gt;インスタンスの名前&lt;/a&gt;空間として名前空間を直接検索します。</target>
        </trans-unit>
        <trans-unit id="e61e6192fb272635702649e3754a886729bd48dc" translate="yes" xml:space="preserve">
          <source>If the related object is deleted, the &lt;code&gt;content_type&lt;/code&gt; and &lt;code&gt;object_id&lt;/code&gt; fields remain set to their original values and the &lt;code&gt;GenericForeignKey&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">関連オブジェクトが削除された場合、 &lt;code&gt;content_type&lt;/code&gt; および &lt;code&gt;object_id&lt;/code&gt; フィールドは元の値に設定されたままで、 &lt;code&gt;GenericForeignKey&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ffcc219aa1c4e4ac018419462ed9e9a642409200" translate="yes" xml:space="preserve">
          <source>If the rendered page used multiple templates, then &lt;code&gt;context&lt;/code&gt; will be a list of &lt;code&gt;Context&lt;/code&gt; objects, in the order in which they were rendered.</source>
          <target state="translated">レンダリングされたページは、複数のテンプレートを使用した場合、 &lt;code&gt;context&lt;/code&gt; のリストになります &lt;code&gt;Context&lt;/code&gt; それらがレンダリングされた順序で、オブジェクト。</target>
        </trans-unit>
        <trans-unit id="453aeb3c1ca5c2eb5a8bb6d078fe6dcf9b73c42d" translate="yes" xml:space="preserve">
          <source>If the response has an &lt;code&gt;ETag&lt;/code&gt; header, the ETag is made weak to comply with &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232#section-2.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">応答に &lt;code&gt;ETag&lt;/code&gt; ヘッダーがある場合、ETagは&lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232＃section-2.1&lt;/strong&gt;&lt;/a&gt;に準拠するように弱くされます。</target>
        </trans-unit>
        <trans-unit id="704a6e7c4c31475b433de2a9afeccf1e10be5b91" translate="yes" xml:space="preserve">
          <source>If the resulting value is callable, it is called with no arguments. The result of the call becomes the template value.</source>
          <target state="translated">結果の値が呼び出し可能な場合は、引数なしで呼び出されます。呼び出しの結果がテンプレート値になります。</target>
        </trans-unit>
        <trans-unit id="89fff7515bba7259d533e340af1d28df5122f23c" translate="yes" xml:space="preserve">
          <source>If the server is not running start it like so:</source>
          <target state="translated">サーバーが起動していない場合は、このように起動します。</target>
        </trans-unit>
        <trans-unit id="d395fb88fed3efa1c3c52eced6fa03546c8e9385" translate="yes" xml:space="preserve">
          <source>If the signature or value have been altered in any way, a &lt;code&gt;django.core.signing.BadSignature&lt;/code&gt; exception will be raised:</source>
          <target state="translated">署名または値が何らかの方法で変更されている場合、 &lt;code&gt;django.core.signing.BadSignature&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="68d86086636afed31f5e8b83119b391c11676938" translate="yes" xml:space="preserve">
          <source>If the source and target models differ, the following fields are generated:</source>
          <target state="translated">ソースモデルとターゲットモデルが異なる場合、以下のフィールドが生成されます。</target>
        </trans-unit>
        <trans-unit id="633ef4f9d4e293110218b0b09a566215a2bdf55e" translate="yes" xml:space="preserve">
          <source>If the string contains exactly one unnamed placeholder, you can interpolate directly with the &lt;code&gt;number&lt;/code&gt; argument:</source>
          <target state="translated">文字列に名前のないプレースホルダーが1つだけ含まれている場合は、 &lt;code&gt;number&lt;/code&gt; 引数を使用して直接補間できます。</target>
        </trans-unit>
        <trans-unit id="77f538b0c255912dbe9364dbf7280961b4996b22" translate="yes" xml:space="preserve">
          <source>If the string given is a method of the model, &lt;code&gt;ModelAdmin&lt;/code&gt; or a callable that returns True or False Django will display a pretty &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo; icon if you give the method a &lt;code&gt;boolean&lt;/code&gt; attribute whose value is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">指定された文字列がモデルのメソッドである場合、TrueまたはFalseを返す &lt;code&gt;ModelAdmin&lt;/code&gt; またはcallableは、メソッドに値が &lt;code&gt;True&lt;/code&gt; の &lt;code&gt;boolean&lt;/code&gt; 属性を与えると、かなり「オン」または「オフ」のアイコンを表示します。</target>
        </trans-unit>
        <trans-unit id="d24a764d1bded8d74681dd2025af0d5bc9819ce3" translate="yes" xml:space="preserve">
          <source>If the string given is a method of the model, &lt;code&gt;ModelAdmin&lt;/code&gt; or a callable, Django will HTML-escape the output by default. To escape user input and allow your own unescaped tags, use &lt;a href=&quot;../../utils#django.utils.html.format_html&quot;&gt;&lt;code&gt;format_html()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定された文字列がモデルのメソッド、 &lt;code&gt;ModelAdmin&lt;/code&gt; 、または呼び出し可能である場合、Djangoはデフォルトで出力をHTMLエスケープします。ユーザー入力をエスケープし、エスケープされていない独自のタグを許可するには、&lt;a href=&quot;../../utils#django.utils.html.format_html&quot;&gt; &lt;code&gt;format_html()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="105660f9c8d885576c4d75b90c9c72dcdf558e17" translate="yes" xml:space="preserve">
          <source>If the table is very large and your queries mostly target a subset of rows, it may be useful to restrict an index to that subset. Specify a condition as a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;condition=Q(pages__gt=400)&lt;/code&gt; indexes records with more than 400 pages.</source>
          <target state="translated">テーブルが非常に大きく、クエリのほとんどが行のサブセットを対象としている場合は、インデックスをそのサブセットに制限すると便利です。条件を&lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q&lt;/code&gt; &lt;/a&gt;として指定します。たとえば、 &lt;code&gt;condition=Q(pages__gt=400)&lt;/code&gt; は、400ページを超えるレコードにインデックスを付けます。</target>
        </trans-unit>
        <trans-unit id="daab90a7c3bc9cf977eae52e7797b86c2df0f84b" translate="yes" xml:space="preserve">
          <source>If the template has already been rendered, the callback will be invoked immediately.</source>
          <target state="translated">テンプレートが既にレンダリングされている場合は、コールバックが直ちに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="335267b2f6f5eff3146781e1f8c7c684e000fea5" translate="yes" xml:space="preserve">
          <source>If the template is instantiated directly rather than through a template loader, this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">テンプレートがテンプレートローダーではなく直接インスタンス化される場合、これは &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="390b626866eea7efc24acb7e8d97d6da5d385595" translate="yes" xml:space="preserve">
          <source>If the template is instantiated directly rather than through a template loader, this is a string value of &lt;code&gt;&amp;lt;unknown_source&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレートがテンプレートローダーではなく直接インスタンス化される場合、これは &lt;code&gt;&amp;lt;unknown_source&amp;gt;&lt;/code&gt; の文字列値です。</target>
        </trans-unit>
        <trans-unit id="f97ee8abfbc218db701614dc037ecbee79227cd2" translate="yes" xml:space="preserve">
          <source>If the tests ran correctly, you should see one failure corresponding to the test method we added, with this error:</source>
          <target state="translated">テストが正しく実行された場合、追加したテストメソッドに対応する1つの失敗が、このエラーとともに表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="7c48045bec5e6654cb74a0ee34255333da0859d4" translate="yes" xml:space="preserve">
          <source>If the user is logged in, execute the view normally. The view code is free to assume the user is logged in.</source>
          <target state="translated">ユーザーがログインしている場合は、ビューを正常に実行します。ビューのコードは、ユーザーがログインしていると仮定して自由に実行できます。</target>
        </trans-unit>
        <trans-unit id="d79847842ff72b1b58e1003ad0d867e4b7832fce" translate="yes" xml:space="preserve">
          <source>If the user is logged in, is a staff member (&lt;code&gt;User.is_staff=True&lt;/code&gt;), and is active (&lt;code&gt;User.is_active=True&lt;/code&gt;), execute the view normally.</source>
          <target state="translated">ユーザーがログインしていて、スタッフであり（ &lt;code&gt;User.is_staff=True&lt;/code&gt; ）、アクティブである（ &lt;code&gt;User.is_active=True&lt;/code&gt; ）場合、ビューを通常どおり実行します。</target>
        </trans-unit>
        <trans-unit id="a84a442ecadb3f93afb7b132ac6a3edff540cf78" translate="yes" xml:space="preserve">
          <source>If the user isn&amp;rsquo;t logged in, redirect to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt;, passing the current absolute path in the query string. Example: &lt;code&gt;/accounts/login/?next=/polls/3/&lt;/code&gt;.</source>
          <target state="translated">ユーザーがログインしていない場合は、&lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; &lt;/a&gt;にリダイレクトし、クエリ文字列で現在の絶対パスを渡します。例： &lt;code&gt;/accounts/login/?next=/polls/3/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1dae3ed09b6ca9b76e7ec5b0d3c3054584ffd95a" translate="yes" xml:space="preserve">
          <source>If the value of &amp;ldquo;Date published&amp;rdquo; doesn&amp;rsquo;t match the time when you created the question in &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt;, it probably means you forgot to set the correct value for the &lt;a href=&quot;../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting. Change it, reload the page and check that the correct value appears.</source>
          <target state="translated">「公開日」の値が、&lt;a href=&quot;tutorial01&quot;&gt;チュートリアル1&lt;/a&gt;で質問を作成した時間と一致しない場合は、おそらく&lt;a href=&quot;../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt;設定に正しい値を設定し忘れていることを意味します。それを変更し、ページをリロードして、正しい値が表示されることを確認してください。</target>
        </trans-unit>
        <trans-unit id="6ec7d3427ae03d948878d8a5e1e5725c95509eed" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;max_num&lt;/code&gt; is greater than the number of existing items in the initial data, up to &lt;code&gt;extra&lt;/code&gt; additional blank forms will be added to the formset, so long as the total number of forms does not exceed &lt;code&gt;max_num&lt;/code&gt;. For example, if &lt;code&gt;extra=2&lt;/code&gt; and &lt;code&gt;max_num=2&lt;/code&gt; and the formset is initialized with one &lt;code&gt;initial&lt;/code&gt; item, a form for the initial item and one blank form will be displayed.</source>
          <target state="translated">値場合 &lt;code&gt;max_num&lt;/code&gt; 初期データ内の既存の項目の数よりも大きい、最大 &lt;code&gt;extra&lt;/code&gt; 追加のブランクフォームがあればフォームの合計数を超えないように、フォームセットに追加される &lt;code&gt;max_num&lt;/code&gt; 。たとえば、 &lt;code&gt;extra=2&lt;/code&gt; および &lt;code&gt;max_num=2&lt;/code&gt; でformsetが1つの &lt;code&gt;initial&lt;/code&gt; アイテムで初期化される場合、初期アイテムのフォームと1つの空白のフォームが表示されます。</target>
        </trans-unit>
        <trans-unit id="1e45aed9df9aac2846d0bcfef80483bef9bd6ac8" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;max_num&lt;/code&gt; is greater than the number of existing related objects, up to &lt;code&gt;extra&lt;/code&gt; additional blank forms will be added to the formset, so long as the total number of forms does not exceed &lt;code&gt;max_num&lt;/code&gt;:</source>
          <target state="translated">値場合 &lt;code&gt;max_num&lt;/code&gt; 最大既存の関連するオブジェクトの数よりも大きい場合 &lt;code&gt;extra&lt;/code&gt; 追加のブランクフォーム、フォームセットに追加されるので、長い形の総数を超えないように &lt;code&gt;max_num&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dda283897bebb404083b05a40ab1c2c6cb7b8001" translate="yes" xml:space="preserve">
          <source>If the value of a field is &lt;code&gt;None&lt;/code&gt;, an empty string, or an iterable without elements, Django will display &lt;code&gt;-&lt;/code&gt; (a dash). You can override this with &lt;a href=&quot;#django.contrib.admin.AdminSite.empty_value_display&quot;&gt;&lt;code&gt;AdminSite.empty_value_display&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">フィールドの値が &lt;code&gt;None&lt;/code&gt; 、空の文字列、または要素なしのイテラブルである場合、Djangoは &lt;code&gt;-&lt;/code&gt; （ダッシュ）を表示します。これは&lt;a href=&quot;#django.contrib.admin.AdminSite.empty_value_display&quot;&gt; &lt;code&gt;AdminSite.empty_value_display&lt;/code&gt; で&lt;/a&gt;上書きできます：</target>
        </trans-unit>
        <trans-unit id="2a6040be557d2f8f3ea8136a3c4eb78cc78f35eb" translate="yes" xml:space="preserve">
          <source>If the value of a parameter is &lt;code&gt;True&lt;/code&gt; (exactly &lt;code&gt;True&lt;/code&gt;, not just a true value), only the parameter name is added to the header.</source>
          <target state="translated">パラメータの値が &lt;code&gt;True&lt;/code&gt; （真の値だけでなく、正確に &lt;code&gt;True&lt;/code&gt; ）の場合、パラメータ名のみがヘッダーに追加されます。</target>
        </trans-unit>
        <trans-unit id="5382b4646a0aea7fd71c163665e2667aa6200bdb" translate="yes" xml:space="preserve">
          <source>If the variable raises an exception when called, the exception will be propagated, unless the exception has an attribute &lt;code&gt;silent_variable_failure&lt;/code&gt; whose value is &lt;code&gt;True&lt;/code&gt;. If the exception &lt;em&gt;does&lt;/em&gt; have a &lt;code&gt;silent_variable_failure&lt;/code&gt; attribute whose value is &lt;code&gt;True&lt;/code&gt;, the variable will render as the value of the engine&amp;rsquo;s &lt;code&gt;string_if_invalid&lt;/code&gt; configuration option (an empty string, by default). Example:</source>
          <target state="translated">変数が呼び出されたときに例外が発生した場合、例外に値が &lt;code&gt;True&lt;/code&gt; の属性 &lt;code&gt;silent_variable_failure&lt;/code&gt; がない限り、例外は伝播されます。例外がいる場合&lt;em&gt;し&lt;/em&gt;てい &lt;code&gt;silent_variable_failure&lt;/code&gt; の値がある属性 &lt;code&gt;True&lt;/code&gt; 、変数には、エンジンのの値としてレンダリングされます &lt;code&gt;string_if_invalid&lt;/code&gt; 設定オプション（デフォルトでは空の文字列）。例：</target>
        </trans-unit>
        <trans-unit id="1312957734ba11c680e8012938eacebc58dee1ff" translate="yes" xml:space="preserve">
          <source>If the variable you want to hide is also a function argument (e.g. &amp;lsquo;&lt;code&gt;user&lt;/code&gt;&amp;rsquo; in the following example), and if the decorated function has multiple decorators, then make sure to place &lt;code&gt;@sensitive_variables&lt;/code&gt; at the top of the decorator chain. This way it will also hide the function argument as it gets passed through the other decorators:</source>
          <target state="translated">非表示にする変数が関数の引数でもある場合（たとえば、次の例では' &lt;code&gt;user&lt;/code&gt; '）、デコレートされた関数に複数のデコレーターがある場合は、 &lt;code&gt;@sensitive_variables&lt;/code&gt; をデコレーターチェーンの最上部に配置してください。このように、他のデコレータを通過するときに関数の引数も非表示にします。</target>
        </trans-unit>
        <trans-unit id="d4cc6c88236085ea8a9c1a17ca851862c50d53fd" translate="yes" xml:space="preserve">
          <source>If the view is accessed from a &lt;code&gt;GET&lt;/code&gt; request, an object list is returned in the response (using the &lt;code&gt;book_list.html&lt;/code&gt; template). But if the client issues a &lt;code&gt;HEAD&lt;/code&gt; request, the response has an empty body and the &lt;code&gt;Last-Modified&lt;/code&gt; header indicates when the most recent book was published. Based on this information, the client may or may not download the full object list.</source>
          <target state="translated">ビューが &lt;code&gt;GET&lt;/code&gt; リクエストからアクセスされた場合、オブジェクトリストがレスポンスで返されます（ &lt;code&gt;book_list.html&lt;/code&gt; テンプレートを使用）。ただし、クライアントが &lt;code&gt;HEAD&lt;/code&gt; リクエストを発行すると、レスポンスの本文は空になり、 &lt;code&gt;Last-Modified&lt;/code&gt; ヘッダーは最新の書籍がいつ発行されたかを示します。この情報に基づいて、クライアントはオブジェクトリスト全体をダウンロードする場合としない場合があります。</target>
        </trans-unit>
        <trans-unit id="525749ea81e916d0079819f9669b95d8583c62ff" translate="yes" xml:space="preserve">
          <source>If the view was called with a HTTP method it doesn&amp;rsquo;t support, this method is called instead.</source>
          <target state="translated">サポートされていないHTTPメソッドでビューが呼び出された場合は、代わりにこのメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fe60eb379813b7555e5b0588046322369833bdf6" translate="yes" xml:space="preserve">
          <source>If there are a few pages on your site that should be available over HTTP, and not redirected to HTTPS, you can list regular expressions to match those URLs in the &lt;a href=&quot;settings#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt;&lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">サイト上にHTTP経由で利用可能で、HTTPSにリダイレクトされないページがいくつかある場合は、&lt;a href=&quot;settings#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt; &lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt; &lt;/a&gt;設定でそれらのURLと一致する正規表現をリストできます。</target>
        </trans-unit>
        <trans-unit id="a06f663d9a920b6dd71a5fd7a5b30d2f53179a52" translate="yes" xml:space="preserve">
          <source>If there are a large number of pizzas, this queryset performs better than:</source>
          <target state="translated">ピザの数が多い場合は、このクエリセットの方がパフォーマンスが良いです。</target>
        </trans-unit>
        <trans-unit id="58361dc72d9b28ac6f97a44739dee9fe240ef3e8" translate="yes" xml:space="preserve">
          <source>If there are any circular dependencies in the &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt;&lt;code&gt;DEPENDENCIES&lt;/code&gt;&lt;/a&gt; definition, an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt; &lt;code&gt;DEPENDENCIES&lt;/code&gt; &lt;/a&gt;定義に循環依存がある場合、&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="c15c84390ee375a9adefe2ee02e23a4311d73646" translate="yes" xml:space="preserve">
          <source>If there are any rings within this geometry that have not been closed, this routine will do so by adding the starting point to the end:</source>
          <target state="translated">このジオメトリ内に閉じられていないリングがある場合、このルーチンは始点を終点に追加して閉じます。</target>
        </trans-unit>
        <trans-unit id="036865303d893103f1a82fb50cc8915eb290e5a5" translate="yes" xml:space="preserve">
          <source>If there are foreseeable error conditions that may occur while running your action, you should gracefully inform the user of the problem. This means handling exceptions and using &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.message_user&quot;&gt;&lt;code&gt;django.contrib.admin.ModelAdmin.message_user()&lt;/code&gt;&lt;/a&gt; to display a user friendly description of the problem in the response.</source>
          <target state="translated">アクションの実行中に発生する可能性のある予測可能なエラー条件がある場合は、問題をユーザーに適切に通知する必要があります。これは、例外を処理し、&lt;a href=&quot;index#django.contrib.admin.ModelAdmin.message_user&quot;&gt; &lt;code&gt;django.contrib.admin.ModelAdmin.message_user()&lt;/code&gt; &lt;/a&gt;を使用して、応答に問題のわかりやすい説明を表示することを意味します。</target>
        </trans-unit>
        <trans-unit id="951293bc34387f5cb268cf92d7536a2c32d0ad81" translate="yes" xml:space="preserve">
          <source>If there are nested namespaces, these steps are repeated for each part of the namespace until only the view name is unresolved. The view name will then be resolved into a URL in the namespace that has been found.</source>
          <target state="translated">ネストした名前空間がある場合は、ビュー名だけが解決されなくなるまで、これらの手順を名前空間の各部分に対して繰り返します。ビュー名は、見つかったネームスペースの URL に解決されます。</target>
        </trans-unit>
        <trans-unit id="018686731469965487e7387f2655be540539d013" translate="yes" xml:space="preserve">
          <source>If there are test failures, however, you&amp;rsquo;ll see full details about which tests failed:</source>
          <target state="translated">ただし、テストに失敗した場合は、失敗したテストの詳細が表示されます。</target>
        </trans-unit>
        <trans-unit id="33090b22c578cdbfc10a5466d23820158dc57c7e" translate="yes" xml:space="preserve">
          <source>If there is a current application defined, Django finds and returns the URL resolver for that instance. The current application can be specified with the &lt;code&gt;current_app&lt;/code&gt; argument to the &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">現在のアプリケーションが定義されている場合、DjangoはそのインスタンスのURLリゾルバーを見つけて返します。現在のアプリケーションは、&lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;関数の &lt;code&gt;current_app&lt;/code&gt; 引数で指定できます。</target>
        </trans-unit>
        <trans-unit id="cad92f90be1997903d0e603c48aaadf781898139" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;default_app_config&lt;/code&gt;, Django uses the base &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;default_app_config&lt;/code&gt; がない場合、Djangoは基本の&lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;クラスを使用します。</target>
        </trans-unit>
        <trans-unit id="b29aa4916d0907d63149e49df881a7730b345911" translate="yes" xml:space="preserve">
          <source>If there is no current application, Django looks for a default application instance. The default application instance is the instance that has an &lt;a href=&quot;#term-instance-namespace&quot;&gt;instance namespace&lt;/a&gt; matching the &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; (in this example, an instance of &lt;code&gt;polls&lt;/code&gt; called &lt;code&gt;'polls'&lt;/code&gt;).</source>
          <target state="translated">現在のアプリケーションがない場合、Djangoはデフォルトのアプリケーションインスタンスを探します。デフォルトのアプリケーションインスタンスは、&lt;a href=&quot;#term-application-namespace&quot;&gt;アプリケーションの名前&lt;/a&gt;&lt;a href=&quot;#term-instance-namespace&quot;&gt;空間に&lt;/a&gt;一致するインスタンス名前空間を持つインスタンスです（この例では、 &lt;code&gt;'polls'&lt;/code&gt; と呼ばれる &lt;code&gt;polls&lt;/code&gt; インスタンス）。</target>
        </trans-unit>
        <trans-unit id="3196de7f2aa2fe23e2168314d2dfd5664d611802" translate="yes" xml:space="preserve">
          <source>If there is no current instance - say, if we were rendering a page somewhere else on the site - &lt;code&gt;'polls:index'&lt;/code&gt; will resolve to the last registered instance of &lt;code&gt;polls&lt;/code&gt;. Since there is no default instance (instance namespace of &lt;code&gt;'polls'&lt;/code&gt;), the last instance of &lt;code&gt;polls&lt;/code&gt; that is registered will be used. This would be &lt;code&gt;'publisher-polls'&lt;/code&gt; since it&amp;rsquo;s declared last in the &lt;code&gt;urlpatterns&lt;/code&gt;.</source>
          <target state="translated">現在のインスタンスがない場合、たとえば、サイトの他の場所にページをレンダリングしていた場合、 &lt;code&gt;'polls:index'&lt;/code&gt; は最後に登録された &lt;code&gt;polls&lt;/code&gt; インスタンスに解決されます。デフォルトのインスタンス（ &lt;code&gt;'polls'&lt;/code&gt; のインスタンス名前空間）がないため、登録されている最後の &lt;code&gt;polls&lt;/code&gt; インスタンスが使用されます。これは &lt;code&gt;urlpatterns&lt;/code&gt; で最後に宣言されているため、 &lt;code&gt;'publisher-polls'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="756f0b4c6a33908e3c22386f366fc70b18420a5b" translate="yes" xml:space="preserve">
          <source>If there is no default application instance, Django will pick the last deployed instance of the application, whatever its instance name may be.</source>
          <target state="translated">デフォルトのアプリケーションインスタンスがない場合、Django はそのインスタンス名が何であれ、最後にデプロイされたアプリケーションのインスタンスを選択します。</target>
        </trans-unit>
        <trans-unit id="a6bc41190ec33fed228db9ca9e2271ec22fd151d" translate="yes" xml:space="preserve">
          <source>If there is no headerlist stored, the page needs to be rebuilt, so this function returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">headerlistが保存されていない場合、ページを再構築する必要があるため、この関数は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b205d7e5d58e03b8f42ec69b13b892b65de8d30c" translate="yes" xml:space="preserve">
          <source>If there were also a default instance - i.e., an instance named &lt;code&gt;'polls'&lt;/code&gt; - the only change from above would be in the case where there is no current instance (the second item in the list above). In this case &lt;code&gt;'polls:index'&lt;/code&gt; would resolve to the index page of the default instance instead of the instance declared last in &lt;code&gt;urlpatterns&lt;/code&gt;.</source>
          <target state="translated">デフォルトのインスタンス（つまり、 &lt;code&gt;'polls'&lt;/code&gt; という名前のインスタンス）もある場合、上からの唯一の変更は、現在のインスタンスがない場合（上記のリストの2番目の項目）です。この場合、 &lt;code&gt;'polls:index'&lt;/code&gt; は、 &lt;code&gt;urlpatterns&lt;/code&gt; で最後に宣言されたインスタンスではなく、デフォルトインスタンスのインデックスページに解決されます。</target>
        </trans-unit>
        <trans-unit id="1bc101bd73deeb1cf516281ef037ef748d979a37" translate="yes" xml:space="preserve">
          <source>If these aren&amp;rsquo;t enough to generate the SQL you need:</source>
          <target state="translated">これらが必要なSQLを生成するのに十分でない場合：</target>
        </trans-unit>
        <trans-unit id="5e71fd6c24627701d76d95f4ee851ac2352deca4" translate="yes" xml:space="preserve">
          <source>If these parameters already have the correct values, Django won&amp;rsquo;t set them for every new connection, which improves performance slightly. You can configure them directly in &lt;code&gt;postgresql.conf&lt;/code&gt; or more conveniently per database user with &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-alterrole.html&quot;&gt;ALTER ROLE&lt;/a&gt;.</source>
          <target state="translated">これらのパラメータがすでに正しい値を持っている場合、Djangoはすべての新しい接続に対してそれらを設定しないため、パフォーマンスがわずかに向上します。それらを &lt;code&gt;postgresql.conf&lt;/code&gt; で直接設定するか、&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-alterrole.html&quot;&gt;ALTER ROLEを&lt;/a&gt;使用してデータベースユーザーごとにさらに便利に設定できます。</target>
        </trans-unit>
        <trans-unit id="8d05d3185d1dac94d8dadaa8fa6fec4ba26f14ae" translate="yes" xml:space="preserve">
          <source>If this app&amp;rsquo;s URLconf is included into the project&amp;rsquo;s URLconf under a path such as this:</source>
          <target state="translated">このアプリのURLconfが次のようなパスでプロジェクトのURLconfに含まれている場合：</target>
        </trans-unit>
        <trans-unit id="db3b489bf675bc83e9e833fb2c11bf0ec0e3584a" translate="yes" xml:space="preserve">
          <source>If this approach becomes too slow, you can add a &lt;code&gt;SearchVectorField&lt;/code&gt; to your model. You&amp;rsquo;ll need to keep it populated with triggers, for example, as described in the &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS&quot;&gt;PostgreSQL documentation&lt;/a&gt;. You can then query the field as if it were an annotated &lt;code&gt;SearchVector&lt;/code&gt;:</source>
          <target state="translated">このアプローチが遅くなりすぎた場合は、モデルに &lt;code&gt;SearchVectorField&lt;/code&gt; を追加できます。たとえば、&lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS&quot;&gt;PostgreSQLのドキュメントで&lt;/a&gt;説明されているように、トリガーを設定しておく必要があります。次に、注釈付きの &lt;code&gt;SearchVector&lt;/code&gt; であるかのようにフィールドをクエリできます。</target>
        </trans-unit>
        <trans-unit id="a0a2e48175c412228e4e7ff2cbf177425c036e1a" translate="yes" xml:space="preserve">
          <source>If this attribute is set to &lt;code&gt;True&lt;/code&gt;, a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception is raised when the conditions are not met. When &lt;code&gt;False&lt;/code&gt; (the default), anonymous users are redirected to the login page.</source>
          <target state="translated">この属性が &lt;code&gt;True&lt;/code&gt; に設定されている場合、条件が満たされないときに&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;例外が発生します。とき &lt;code&gt;False&lt;/code&gt; （デフォルト）、匿名ユーザーは、ログインページにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="ea6a57da3a6226d105def8abb17cde5efd3edbc8" translate="yes" xml:space="preserve">
          <source>If this behavior is problematic (such as when using signals to send an email whenever a model is saved), pass a unique identifier as the &lt;code&gt;dispatch_uid&lt;/code&gt; argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique &lt;code&gt;dispatch_uid&lt;/code&gt; value:</source>
          <target state="translated">この動作に問題がある場合（信号を使用してモデルが保存されるたびにEメールを送信する場合など）は、 &lt;code&gt;dispatch_uid&lt;/code&gt; _uid引数として一意の識別子を渡して、レシーバー関数を識別します。この識別子は通常は文字列ですが、ハッシュ可能なオブジェクトであれば十分です。その結果、レシーバー関数は、一意の &lt;code&gt;dispatch_uid&lt;/code&gt; 値ごとに1回だけシグナルにバインドされます。</target>
        </trans-unit>
        <trans-unit id="168754e6d80f99f11f4410d20c99b6a0e1c4fca4" translate="yes" xml:space="preserve">
          <source>If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command.</source>
          <target state="translated">コマンドラインコンソールから管理コマンドを実行中にこの例外が発生した場合、この例外は捕捉され、適切な出力ストリーム (すなわち stderr)にきれいに印刷されたエラーメッセージに変換されます。</target>
        </trans-unit>
        <trans-unit id="5121ccc468599203cdf2f41680528f512f5238b0" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;False&lt;/code&gt;, accessing a related object that doesn&amp;rsquo;t exist will raise its &lt;code&gt;DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">これが &lt;code&gt;False&lt;/code&gt; に設定されている場合、存在しない関連オブジェクトにアクセスすると、 &lt;code&gt;DoesNotExist&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="2d8f6dac00928c49d28b754a31e0c9229145c79e" translate="yes" xml:space="preserve">
          <source>If this is your first time using Django, you&amp;rsquo;ll have to take care of some initial setup. Namely, you&amp;rsquo;ll need to auto-generate some code that establishes a Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-project&quot;&gt;project&lt;/a&gt; &amp;ndash; a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings.</source>
          <target state="translated">Djangoを初めて使用する場合は、いくつかの初期設定を行う必要があります。つまり、Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-project&quot;&gt;プロジェクト（&lt;/a&gt;データベース構成、Django固有のオプション、アプリケーション固有の設定など、Djangoのインスタンスの設定のコレクション）を確立するコードを自動生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="be1b7e4acd8d0cb9dde67da29afd40808b1e50d6" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given or is &lt;code&gt;None&lt;/code&gt;, you&amp;rsquo;ll get operating-system dependent behavior. On most platforms, temporary files will have a mode of &lt;code&gt;0o600&lt;/code&gt;, and files saved from memory will be saved using the system&amp;rsquo;s standard umask.</source>
          <target state="translated">これが指定されていないか &lt;code&gt;None&lt;/code&gt; の場合、オペレーティングシステムに依存する動作が発生します。ほとんどのプラットフォームでは、一時ファイルのモードは &lt;code&gt;0o600&lt;/code&gt; で、メモリから保存されたファイルはシステムの標準のumaskを使用して保存されます。</target>
        </trans-unit>
        <trans-unit id="f463269eb88c1b3ee3a234d7c03dfce4134a153f" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given, Django will use &lt;a href=&quot;#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; + &lt;code&gt;&quot;s&quot;&lt;/code&gt;.</source>
          <target state="translated">これを指定しない場合、Djangoは&lt;a href=&quot;#django.db.models.Options.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt; + &lt;code&gt;&quot;s&quot;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="73b98905cd565580c0b7cdd5b5b3c194b7edc1e0" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given, Django will use a munged version of the class name: &lt;code&gt;CamelCase&lt;/code&gt; becomes &lt;code&gt;camel case&lt;/code&gt;.</source>
          <target state="translated">これを指定しない場合、Djangoはクラス名のマングドバージョンを使用します： &lt;code&gt;CamelCase&lt;/code&gt; なった &lt;code&gt;camel case&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee5e3c28a977fe38b4bf893b8d5bd1cfcc581da9" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t provided, the Django admin will use the model&amp;rsquo;s default ordering.</source>
          <target state="translated">これが提供されない場合、Django管理者はモデルのデフォルトの順序を使用します。</target>
        </trans-unit>
        <trans-unit id="204cd62fbe95eddcc429e1cf499ecc20b6269794" translate="yes" xml:space="preserve">
          <source>If this last CSS definition were to be rendered, it would become the following HTML:</source>
          <target state="translated">この最後のCSS定義をレンダリングすると、以下のようなHTMLになります。</target>
        </trans-unit>
        <trans-unit id="03956128530b9f0fcadffe8423761387cbfdf376" translate="yes" xml:space="preserve">
          <source>If this looks correct, run &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; to create this table in the database:</source>
          <target state="translated">これが正しいと思われる場合は、&lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;を実行して、データベースにこのテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="214efc0b3c62bb58b19ca86ac2cf1be69388e8d4" translate="yes" xml:space="preserve">
          <source>If this method is defined on a storage, it&amp;rsquo;s called by the &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command after each run and gets passed the local storages and paths of found files as a dictionary, as well as the command line options. It yields tuples of three values: &lt;code&gt;original_path, processed_path, processed&lt;/code&gt;. The path values are strings and &lt;code&gt;processed&lt;/code&gt; is a boolean indicating whether or not the value was post-processed, or an exception if post-processing failed.</source>
          <target state="translated">このメソッドがストレージで定義されている場合、各実行後に&lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;管理コマンドによって呼び出され、ローカルストレージと検出されたファイルのパス、およびコマンドラインオプションが渡されます。これは &lt;code&gt;original_path, processed_path, processed&lt;/code&gt; の3つの値のタプルを生成します。パスの値は文字列で、 &lt;code&gt;processed&lt;/code&gt; は値が後処理されたかどうかを示すブール値、または後処理が失敗した場合の例外です。</target>
        </trans-unit>
        <trans-unit id="78f9e31a35c14f187c486666943c82fca263c677" translate="yes" xml:space="preserve">
          <source>If this option is provided, models are also created for database views.</source>
          <target state="translated">このオプションを指定すると、データベースビューのモデルも作成されます。</target>
        </trans-unit>
        <trans-unit id="d949b49e534243e5950667398078494f92cad676" translate="yes" xml:space="preserve">
          <source>If this option is provided, models are also created for partitions.</source>
          <target state="translated">このオプションを指定すると、パーティション用のモデルも作成されます。</target>
        </trans-unit>
        <trans-unit id="cf5933056c3c4a4bab36f59eaaa0e7ba423fd575" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;MEDIA_URL&lt;/code&gt;, providing the value of the &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">このプロセッサが有効になっている場合は、すべての &lt;code&gt;RequestContext&lt;/code&gt; には変数が含まれます &lt;code&gt;MEDIA_URL&lt;/code&gt; をの価値提供、&lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; の&lt;/a&gt;設定を。</target>
        </trans-unit>
        <trans-unit id="c3f669b44318076a8ac745b45b0e2b57ced4c0dd" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;STATIC_URL&lt;/code&gt;, providing the value of the &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">このプロセッサが有効になっている場合は、すべての &lt;code&gt;RequestContext&lt;/code&gt; には変数が含まれます &lt;code&gt;STATIC_URL&lt;/code&gt; をの価値提供、&lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; の&lt;/a&gt;設定を。</target>
        </trans-unit>
        <trans-unit id="b3627ab80c4912ed55e04ec73d8095f9410c0c92" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;TIME_ZONE&lt;/code&gt;, providing the name of the currently active time zone.</source>
          <target state="translated">このプロセッサが有効な場合、すべての &lt;code&gt;RequestContext&lt;/code&gt; には変数 &lt;code&gt;TIME_ZONE&lt;/code&gt; が含まれ、現在アクティブなタイムゾーンの名前が提供されます。</target>
        </trans-unit>
        <trans-unit id="e14c9efdfe0e83e3c1193bc7da7c91988d833298" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;request&lt;/code&gt;, which is the current &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプロセッサが有効になっている場合は、すべての &lt;code&gt;RequestContext&lt;/code&gt; には変数が含まれます &lt;code&gt;request&lt;/code&gt; 電流であり、&lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; のを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dfffb710a2c53706e240b5d6768b0976050feb4c" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these two variables &amp;ndash; but only if your &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is set to &lt;code&gt;True&lt;/code&gt; and the request&amp;rsquo;s IP address (&lt;code&gt;request.META['REMOTE_ADDR']&lt;/code&gt;) is in the &lt;a href=&quot;../settings#std:setting-INTERNAL_IPS&quot;&gt;&lt;code&gt;INTERNAL_IPS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">このプロセッサが有効になっている場合、すべての &lt;code&gt;RequestContext&lt;/code&gt; にこれらの2つの変数が含まれます。ただし、&lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;設定が &lt;code&gt;True&lt;/code&gt; に設定され、リクエストのIPアドレス（ &lt;code&gt;request.META['REMOTE_ADDR']&lt;/code&gt; ）が&lt;a href=&quot;../settings#std:setting-INTERNAL_IPS&quot;&gt; &lt;code&gt;INTERNAL_IPS&lt;/code&gt; &lt;/a&gt;設定にある場合のみ：</target>
        </trans-unit>
        <trans-unit id="5f1b3b594560029b6edef85f4752d5ee49a66bb6" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these two variables:</source>
          <target state="translated">このプロセッサが有効になっている場合、すべての &lt;code&gt;RequestContext&lt;/code&gt; には次の2つの変数が含まれます。</target>
        </trans-unit>
        <trans-unit id="6c99cf696c7be10586d5d490d5e348ad6994d715" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these variables:</source>
          <target state="translated">このプロセッサが有効になっている場合、すべての &lt;code&gt;RequestContext&lt;/code&gt; に次の変数が含まれます。</target>
        </trans-unit>
        <trans-unit id="74bf18d2eb713de82935d180fe41cd27d0c61d5c" translate="yes" xml:space="preserve">
          <source>If this still isn&amp;rsquo;t a good match, you can manually set the name of the context variable. The &lt;code&gt;context_object_name&lt;/code&gt; attribute on a generic view specifies the context variable to use:</source>
          <target state="translated">これでもうまく一致しない場合は、コンテキスト変数の名前を手動で設定できます。汎用ビューの &lt;code&gt;context_object_name&lt;/code&gt; 属性は、使用するコンテキスト変数を指定します。</target>
        </trans-unit>
        <trans-unit id="111885105b9365941fb05a9bc35108884dfcc593" translate="yes" xml:space="preserve">
          <source>If this value starts with a forward slash (&lt;code&gt;'/'&lt;/code&gt;) and you&amp;rsquo;re using MySQL, MySQL will connect via a Unix socket to the specified socket. For example:</source>
          <target state="translated">この値がスラッシュ（ &lt;code&gt;'/'&lt;/code&gt; ）で始まり、MySQLを使用している場合、MySQLはUnixソケットを介して指定されたソケットに接続します。例えば：</target>
        </trans-unit>
        <trans-unit id="687f9e38edf81cd2d25145c7b1294f723a108558" translate="yes" xml:space="preserve">
          <source>If this variable isn&amp;rsquo;t set, the default &lt;code&gt;asgi.py&lt;/code&gt; sets it to &lt;code&gt;mysite.settings&lt;/code&gt;, where &lt;code&gt;mysite&lt;/code&gt; is the name of your project.</source>
          <target state="translated">この変数が設定されていない場合、デフォルトの &lt;code&gt;asgi.py&lt;/code&gt; はそれを設定し &lt;code&gt;mysite.settings&lt;/code&gt; 、 &lt;code&gt;mysite&lt;/code&gt; 、プロジェクトの名前です。</target>
        </trans-unit>
        <trans-unit id="7763646c9a13213d2e42106763a322d405a3bd97" translate="yes" xml:space="preserve">
          <source>If this variable isn&amp;rsquo;t set, the default &lt;code&gt;wsgi.py&lt;/code&gt; sets it to &lt;code&gt;mysite.settings&lt;/code&gt;, where &lt;code&gt;mysite&lt;/code&gt; is the name of your project. That&amp;rsquo;s how &lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; discovers the default settings file by default.</source>
          <target state="translated">この変数が設定されていない場合、デフォルトの &lt;code&gt;wsgi.py&lt;/code&gt; はそれを設定し &lt;code&gt;mysite.settings&lt;/code&gt; 、 &lt;code&gt;mysite&lt;/code&gt; 、プロジェクトの名前です。これが、&lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;がデフォルトでデフォルト設定ファイルを検出する方法です。</target>
        </trans-unit>
        <trans-unit id="f5989aedec02f4ad2eba63dbf7a594f3d1537d24" translate="yes" xml:space="preserve">
          <source>If those conditions are met, Django will email the users listed in the &lt;a href=&quot;../ref/settings#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt; setting whenever your code raises a 404 and the request has a referer. It doesn&amp;rsquo;t bother to email for 404s that don&amp;rsquo;t have a referer &amp;ndash; those are usually people typing in broken URLs or broken Web bots. It also ignores 404s when the referer is equal to the requested URL, since this behavior is from broken Web bots too.</source>
          <target state="translated">これらの条件が満たされている場合、Djangoは、コードで404が発生し、リクエストにリファラーがある場合は常に、&lt;a href=&quot;../ref/settings#std:setting-MANAGERS&quot;&gt; &lt;code&gt;MANAGERS&lt;/code&gt; &lt;/a&gt;設定にリストされているユーザーにメールを送信します。リファラーのない404をメールで送信する必要はありません。これらは通常、壊れたURLまたは壊れたWebボットを入力する人々です。また、リファラーが要求されたURLと等しい場合、この動作は壊れたWebボットからのものであるため、404も無視します。</target>
        </trans-unit>
        <trans-unit id="a73c5cb2486718bdc78ebe8a3caef6b14a81e74a" translate="yes" xml:space="preserve">
          <source>If turning this to &lt;code&gt;True&lt;/code&gt; causes infinite redirects, it probably means your site is running behind a proxy and can&amp;rsquo;t tell which requests are secure and which are not. Your proxy likely sets a header to indicate secure requests; you can correct the problem by finding out what that header is and configuring the &lt;a href=&quot;#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting accordingly.</source>
          <target state="translated">これを &lt;code&gt;True&lt;/code&gt; にすると無限リダイレクトが発生する場合は、サイトがプロキシの背後で実行されており、安全なリクエストと安全でないリクエストを区別できないことを意味します。プロキシは、ヘッダーを設定して安全なリクエストを示す可能性があります。そのヘッダーが何であるかを見つけ、それに応じて&lt;a href=&quot;#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt;設定を構成することで、問題を修正できます。</target>
        </trans-unit>
        <trans-unit id="6481e6950ed002a13f7a54255de0e49329f79ddf" translate="yes" xml:space="preserve">
          <source>If two Python threads execute the code in the first example above, one thread could retrieve, increment, and save a field&amp;rsquo;s value after the other has retrieved it from the database. The value that the second thread saves will be based on the original value; the work of the first thread will be lost.</source>
          <target state="translated">2つのPythonスレッドが上記の最初の例のコードを実行する場合、一方のスレッドがデータベースからフィールドの値を取得した後、一方のスレッドがフィールドの値を取得、増分、および保存できます。2番目のスレッドが保存する値は、元の値に基づいています。最初のスレッドの作業は失われます。</target>
        </trans-unit>
        <trans-unit id="5e64204f76516c2278e4b64d558fec189d6cf43f" translate="yes" xml:space="preserve">
          <source>If unspecified, the default &lt;code&gt;timeout&lt;/code&gt; will be the one provided by &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout&quot;&gt;&lt;code&gt;socket.getdefaulttimeout()&lt;/code&gt;&lt;/a&gt;, which defaults to &lt;code&gt;None&lt;/code&gt; (no timeout).</source>
          <target state="translated">指定しない場合、デフォルトの &lt;code&gt;timeout&lt;/code&gt; は&lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout&quot;&gt; &lt;code&gt;socket.getdefaulttimeout()&lt;/code&gt; &lt;/a&gt;によって提供されるものになります。デフォルトは &lt;code&gt;None&lt;/code&gt; （タイムアウトなし）です。</target>
        </trans-unit>
        <trans-unit id="60e13a5dc7aa8445a725b41528f2e1f91c6d315c" translate="yes" xml:space="preserve">
          <source>If updating a large number of columns in a large number of rows, the SQL generated can be very large. Avoid this by specifying a suitable &lt;code&gt;batch_size&lt;/code&gt;.</source>
          <target state="translated">多数の行で多数の列を更新する場合、生成されるSQLは非常に大きくなる可能性があります。適切な &lt;code&gt;batch_size&lt;/code&gt; を指定してこれを回避してください。</target>
        </trans-unit>
        <trans-unit id="9de1d7c145e3bfbd1da3b57f9e69810dee560a48" translate="yes" xml:space="preserve">
          <source>If used with &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;, the &lt;code&gt;__call__()&lt;/code&gt; method will never be used; Django calls &lt;code&gt;process_request()&lt;/code&gt; and &lt;code&gt;process_response()&lt;/code&gt; directly.</source>
          <target state="translated">&lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; と併用した場合、 &lt;code&gt;__call__()&lt;/code&gt; メソッドは使用されません。Djangoは &lt;code&gt;process_request()&lt;/code&gt; と &lt;code&gt;process_response()&lt;/code&gt; を直接呼び出します。</target>
        </trans-unit>
        <trans-unit id="e3318f562b136e880f0fe72349d17ab0bbe42fba" translate="yes" xml:space="preserve">
          <source>If used with a numeric integer argument, &lt;code&gt;floatformat&lt;/code&gt; rounds a number to that many decimal places. For example:</source>
          <target state="translated">数値整数引数とともに使用すると、 &lt;code&gt;floatformat&lt;/code&gt; は数値をその小数点以下の桁数に丸めます。例えば：</target>
        </trans-unit>
        <trans-unit id="b36b4a6b3834f5db697a34dce30549b123363b8c" translate="yes" xml:space="preserve">
          <source>If using a binary package of GEOS (e.g., on Ubuntu), you may need to &lt;a href=&quot;index#binutils&quot;&gt;Install binutils&lt;/a&gt;.</source>
          <target state="translated">GEOSのバイナリパッケージを使用している場合（Ubuntuなど）、&lt;a href=&quot;index#binutils&quot;&gt;binutils&lt;/a&gt;をインストールする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="77e5c9f7d7653d5f758d827f9f9d8be93ef993b1" translate="yes" xml:space="preserve">
          <source>If using an SQLite in-memory database with SQLite, &lt;a href=&quot;https://www.sqlite.org/sharedcache.html&quot;&gt;shared cache&lt;/a&gt; is enabled, so you can write tests with ability to share the database between threads.</source>
          <target state="translated">SQLiteでSQLiteインメモリデータベースを使用する場合、&lt;a href=&quot;https://www.sqlite.org/sharedcache.html&quot;&gt;共有キャッシュ&lt;/a&gt;が有効になるため、スレッド間でデータベースを共有する機能を備えたテストを作成できます。</target>
        </trans-unit>
        <trans-unit id="71eff97e42ab86eb5151370fe1181333a128682b" translate="yes" xml:space="preserve">
          <source>If value evaluates to &lt;code&gt;False&lt;/code&gt;, uses the given default. Otherwise, uses the value.</source>
          <target state="translated">値が &lt;code&gt;False&lt;/code&gt; に評価される場合、指定されたデフォルトを使用します。それ以外の場合は、値を使用します。</target>
        </trans-unit>
        <trans-unit id="f611765f2d320e927111295d6c9695093483fb31" translate="yes" xml:space="preserve">
          <source>If we arrive at this view with a &lt;code&gt;GET&lt;/code&gt; request, it will create an empty form instance and place it in the template context to be rendered. This is what we can expect to happen the first time we visit the URL.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; リクエストでこのビューに到達すると、空のフォームインスタンスが作成され、レンダリングされるテンプレートコンテキストに配置されます。これは、URLに初めてアクセスしたときに発生することが予想されることです。</target>
        </trans-unit>
        <trans-unit id="0a8a851d0367ffe29323b90c503c215f8aa8f5d9" translate="yes" xml:space="preserve">
          <source>If we connected a handler like this:</source>
          <target state="translated">こんな感じでハンドラを繋げたら</target>
        </trans-unit>
        <trans-unit id="406383748435b9b983e4fe62090c8c234445f370" translate="yes" xml:space="preserve">
          <source>If we delete a &lt;code&gt;Publication&lt;/code&gt;, its &lt;code&gt;Articles&lt;/code&gt; won&amp;rsquo;t be able to access it:</source>
          <target state="translated">&lt;code&gt;Publication&lt;/code&gt; を削除すると、その &lt;code&gt;Articles&lt;/code&gt; はそれにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="3d341e594a575849b6069ae86fb05e49f3983a60" translate="yes" xml:space="preserve">
          <source>If we delete an &lt;code&gt;Article&lt;/code&gt;, its &lt;code&gt;Publications&lt;/code&gt; won&amp;rsquo;t be able to access it:</source>
          <target state="translated">&lt;code&gt;Article&lt;/code&gt; を削除すると、その &lt;code&gt;Publications&lt;/code&gt; はそれにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="c2e7f5f3fb7b52337975a488b9c8164eab92ebfb" translate="yes" xml:space="preserve">
          <source>If we had neglected to pass in the current &lt;code&gt;context.autoescape&lt;/code&gt; value to our new &lt;code&gt;Context&lt;/code&gt; in this example, the results would have &lt;em&gt;always&lt;/em&gt; been automatically escaped, which may not be the desired behavior if the template tag is used inside a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-autoescape&quot;&gt;&lt;code&gt;{% autoescape off %}&lt;/code&gt;&lt;/a&gt; block.</source>
          <target state="translated">この例で、現在の &lt;code&gt;context.autoescape&lt;/code&gt; 値を新しい &lt;code&gt;Context&lt;/code&gt; に渡すことを怠っていた場合、結果は&lt;em&gt;常に&lt;/em&gt;自動的にエスケープされます。テンプレートタグが&lt;a href=&quot;../ref/templates/builtins#std:templatetag-autoescape&quot;&gt; &lt;code&gt;{% autoescape off %}&lt;/code&gt; &lt;/a&gt;内で使用されている場合、これは望ましい動作ではない可能性があります。}ブロック。</target>
        </trans-unit>
        <trans-unit id="ffb90e72c570b70af963c6da1122122d334c0352" translate="yes" xml:space="preserve">
          <source>If we want to write a class-based view that responds only to &lt;code&gt;POST&lt;/code&gt;, we&amp;rsquo;ll subclass &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and write a &lt;code&gt;post()&lt;/code&gt; method in the subclass. However if we want our processing to work on a particular object, identified from the URL, we&amp;rsquo;ll want the functionality provided by &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; のみに応答するクラスベースのビューを記述したい場合は、&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;をサブクラス化し、サブクラスに &lt;code&gt;post()&lt;/code&gt; メソッドを記述します。ただし、URLから識別される特定のオブジェクトで処理を実行する場合は、&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;によって提供される機能が必要になります。</target>
        </trans-unit>
        <trans-unit id="f9670d8eca365c2fbb8bf2e17c3f35929328311b" translate="yes" xml:space="preserve">
          <source>If we wanted to add a tool to the change list view for only a specific model named &amp;lsquo;Page&amp;rsquo;, we would copy that same file to the &lt;code&gt;templates/admin/my_app/page&lt;/code&gt; directory of our project.</source>
          <target state="translated">「ページ」という名前の特定のモデルのみの変更リストビューにツールを追加する場合は、同じファイルをプロジェクトの &lt;code&gt;templates/admin/my_app/page&lt;/code&gt; ディレクトリにコピーします。</target>
        </trans-unit>
        <trans-unit id="6bd7027efcdd2746450164bec58ed7a7c2bb113c" translate="yes" xml:space="preserve">
          <source>If we wanted to change our previous query to get the discount based on how long the &lt;code&gt;Client&lt;/code&gt; has been with us, we could do so using lookups:</source>
          <target state="translated">以前のクエリを変更して、 &lt;code&gt;Client&lt;/code&gt; 時間に基づいて割引を取得したい場合は、ルックアップを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="424f525a9d69de5a035589bbd0105ee23eb2ed5c" translate="yes" xml:space="preserve">
          <source>If you &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; a &lt;code&gt;QuerySet&lt;/code&gt;, this will force all the results to be loaded into memory prior to pickling. Pickling is usually used as a precursor to caching and when the cached queryset is reloaded, you want the results to already be present and ready for use (reading from the database can take some time, defeating the purpose of caching). This means that when you unpickle a &lt;code&gt;QuerySet&lt;/code&gt;, it contains the results at the moment it was pickled, rather than the results that are currently in the database.</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; を&lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;する場合、ピクルする前にすべての結果をメモリに強制的にロードします。ピクリングは通常、キャッシングの前段階として使用され、キャッシュされたクエリセットがリロードされたときに、結果がすでに存在し、使用できる状態にしておく必要があります（データベースからの読み取りには時間がかかり、キャッシングの目的が無効になる場合があります）。あなたがunpickle化するとき、この手段 &lt;code&gt;QuerySet&lt;/code&gt; 、それが現時点での結果が含まれていますが、それはむしろ、データベースに現在ある結果より、漬けました。</target>
        </trans-unit>
        <trans-unit id="c976c50b35c8e39b12378828f30c9e059d209f63" translate="yes" xml:space="preserve">
          <source>If you activate &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt;, you must include the CSRF token in your HTML and read the token from the DOM with JavaScript:</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt;をアクティブにする場合、HTMLにCSRFトークンを含め、JavaScriptを使用してDOMからトークンを読み取る必要があります。</target>
        </trans-unit>
        <trans-unit id="ab46e0097159c03d8a60d09a7d1250eee53c6b4a" translate="yes" xml:space="preserve">
          <source>If you add a new keyword argument, you need to write code in &lt;code&gt;deconstruct()&lt;/code&gt; that puts its value into &lt;code&gt;kwargs&lt;/code&gt; yourself. You should also omit the value from &lt;code&gt;kwargs&lt;/code&gt; when it isn&amp;rsquo;t necessary to reconstruct the state of the field, such as when the default value is being used:</source>
          <target state="translated">新しいキーワード引数を追加する場合は、その値を自分で &lt;code&gt;kwargs&lt;/code&gt; に入れるコードを &lt;code&gt;deconstruct()&lt;/code&gt; で記述する必要があります。また、デフォルト値が使用されている場合など、フィールドの状態を再構築する必要がない場合は、 &lt;code&gt;kwargs&lt;/code&gt; から値を省略する必要があります。</target>
        </trans-unit>
        <trans-unit id="9290e813a0bf97db9d008f3c672105ad13a270f2" translate="yes" xml:space="preserve">
          <source>If you add or modify flatpages via your own code, you will likely want to check for duplicate flatpage URLs within the same site. The flatpage form used in the admin performs this validation check, and can be imported from &lt;code&gt;django.contrib.flatpages.forms.FlatpageForm&lt;/code&gt; and used in your own views.</source>
          <target state="translated">独自のコードを使用してフラットページを追加または変更する場合は、同じサイト内でフラットページのURLが重複していないか確認する必要があります。管理に使用されるフラットページのフォームは、この検証チェックを行い、そしてからインポートすることができ &lt;code&gt;django.contrib.flatpages.forms.FlatpageForm&lt;/code&gt; と独自のビューで使用されます。</target>
        </trans-unit>
        <trans-unit id="19279f2745faa7fa825b809dfd65333ca02e57b9" translate="yes" xml:space="preserve">
          <source>If you add the name of a callable to &lt;code&gt;fields&lt;/code&gt;, the same rule applies as with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; option: the callable must be listed in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;readonly_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">callableの名前を &lt;code&gt;fields&lt;/code&gt; に追加する場合、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt;オプションの場合と同じルールが適用されます：callableは&lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;readonly_fields&lt;/code&gt; &lt;/a&gt;にリストされる必要があります。</target>
        </trans-unit>
        <trans-unit id="4828b14d37ca4d41be7823693b8a8c011f2c2552" translate="yes" xml:space="preserve">
          <source>If you aim to build a database-agnostic application, you should account for differences in database column types. For example, the date/time column type in PostgreSQL is called &lt;code&gt;timestamp&lt;/code&gt;, while the same column in MySQL is called &lt;code&gt;datetime&lt;/code&gt;. You can handle this in a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method by checking the &lt;code&gt;connection.settings_dict['ENGINE']&lt;/code&gt; attribute.</source>
          <target state="translated">データベースにとらわれないアプリケーションの構築を目的とする場合は、データベースの列タイプの違いを考慮する必要があります。たとえば、PostgreSQLの日付/時刻型の列は &lt;code&gt;timestamp&lt;/code&gt; と呼ばれ、MySQLの同じ列は &lt;code&gt;datetime&lt;/code&gt; と呼ばれます。 &lt;code&gt;connection.settings_dict['ENGINE']&lt;/code&gt; 属性を確認することで、&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt;メソッドでこれを処理できます。</target>
        </trans-unit>
        <trans-unit id="d866003e34d19497e6a39513c19080fca9667425" translate="yes" xml:space="preserve">
          <source>If you allow for blank values, you have to allow for null values since blank values are stored as null.</source>
          <target state="translated">空白値を許容する場合は、空の値がnullとして格納されるので、null値を許容する必要があります。</target>
        </trans-unit>
        <trans-unit id="5dfbcb1590644f47fc6c2a97a5c0c0679f9f8edd" translate="yes" xml:space="preserve">
          <source>If you already have the GET arguments in URL-encoded form, you can use that encoding instead of using the data argument. For example, the previous GET request could also be posed as:</source>
          <target state="translated">すでにURLエンコードされた形でGET引数を持っている場合は、データ引数を使用する代わりにそのエンコードを使用することができます。例えば、前のGETリクエストは次のようなポーズをとることもできます。</target>
        </trans-unit>
        <trans-unit id="9f8f087d060b362f136ee6b97e34ff5646abcd8a" translate="yes" xml:space="preserve">
          <source>If you already know a few other languages and want to get up to speed with Python quickly, we recommend &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt;. If that&amp;rsquo;s not quite your style, there are many other &lt;a href=&quot;https://wiki.python.org/moin/PythonBooks&quot;&gt;books about Python&lt;/a&gt;.</source>
          <target state="translated">他のいくつかの言語を既に知っていて、Pythonをすぐに使い始めたい場合は、&lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt;をお勧めします。それがあなたのスタイルではないなら、&lt;a href=&quot;https://wiki.python.org/moin/PythonBooks&quot;&gt;Pythonに関する&lt;/a&gt;他の多くの本があります。</target>
        </trans-unit>
        <trans-unit id="037b16c87c42ef82ec961a3ac3d843c26b02994c" translate="yes" xml:space="preserve">
          <source>If you are &lt;em&gt;absolutely&lt;/em&gt; in dire need to run this code from an asynchronous context - for example, it is being forced on you by an external environment, and you are sure there is no chance of it being run concurrently (e.g. you are in a &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt; notebook), then you can disable the warning with the &lt;code&gt;DJANGO_ALLOW_ASYNC_UNSAFE&lt;/code&gt; environment variable.</source>
          <target state="translated">あなたがいる場合は&lt;em&gt;、絶対に&lt;/em&gt;非同期コンテキストからこのコードを実行するために緊急に必要に-例えば、それは外部環境によってあなたに強制されている、とあなたがあることを確認し、それが同時に実行されているの見込みはありません（例えば、あなたがしている&lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;ノートブック）、 &lt;code&gt;DJANGO_ALLOW_ASYNC_UNSAFE&lt;/code&gt; 環境変数を使用して警告を無効にできます。</target>
        </trans-unit>
        <trans-unit id="cabfbe868e7cb75abcebb7e76b56c06e811c5257" translate="yes" xml:space="preserve">
          <source>If you are chaining filters, a filter applied after &lt;code&gt;safe&lt;/code&gt; can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:</source>
          <target state="translated">フィルターをチェーンしている場合、 &lt;code&gt;safe&lt;/code&gt; 後にフィルターを適用すると、内容が再び安全でなくなる可能性があります。たとえば、次のコードは変数をそのままエスケープせずに出力します。</target>
        </trans-unit>
        <trans-unit id="2655962c0a4f53510466dd490c637f462974c542" translate="yes" xml:space="preserve">
          <source>If you are connecting to the internet behind a proxy, there might be problems in running the command &lt;code&gt;py -m pip install Django&lt;/code&gt;. Set the environment variables for proxy configuration in the command prompt as follows:</source>
          <target state="translated">プロキシの背後でインターネットに接続している場合、コマンド &lt;code&gt;py -m pip install Django&lt;/code&gt; を実行すると問題が発生する可能性があります。次のように、コマンドプロンプトでプロキシ構成の環境変数を設定します。</target>
        </trans-unit>
        <trans-unit id="3f2135c10c9c1fcecec78e1b0692c6109124ccab" translate="yes" xml:space="preserve">
          <source>If you are constructing an object manually, you can assign the file object from &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; to the file field in the model:</source>
          <target state="translated">オブジェクトを手動で作成する場合は、&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt;のファイルオブジェクトをモデルのファイルフィールドに割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="92ab820f72ae9c99d7def5b0452724d8bd608be6" translate="yes" xml:space="preserve">
          <source>If you are creating a reusable application, it is recommended to use only the built-in &lt;a href=&quot;#message-levels&quot;&gt;message levels&lt;/a&gt; and not rely on any custom levels.</source>
          <target state="translated">再利用可能なアプリケーションを作成する場合は、組み込みの&lt;a href=&quot;#message-levels&quot;&gt;メッセージレベル&lt;/a&gt;のみを使用し、カスタムレベルに依存しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ffa521388bfefc73cf3b041673a0e7a8595c90d3" translate="yes" xml:space="preserve">
          <source>If you are deployed behind a load-balancer or reverse-proxy server and Django can&amp;rsquo;t seem to tell when a request actually is already secure, you may need to set the &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">ロードバランサーまたはリバースプロキシサーバーの背後にデプロイされていて、Djangoがリクエストが実際に安全かどうかを判断できない場合は、&lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt;設定を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="41e9a421371bfb5a50b98c32edd7081296c13f7c" translate="yes" xml:space="preserve">
          <source>If you are deployed behind a load-balancer or reverse-proxy server, and the &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header is not being added to your responses, it may be because Django doesn&amp;rsquo;t realize that it&amp;rsquo;s on a secure connection; you may need to set the &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">ロードバランサーまたはリバースプロキシサーバーの背後にデプロイされていて、 &lt;code&gt;Strict-Transport-Security&lt;/code&gt; ヘッダーが応答に追加されていない場合は、Djangoが安全な接続上にあることを認識していない可能性があります。&lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt;設定を設定する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="2c691ad6ca02fef297ccdbc9e5c26db8508ebcf4" translate="yes" xml:space="preserve">
          <source>If you are developing a small project or something you don&amp;rsquo;t plan to deploy in a production environment, SQLite is generally the best option as it doesn&amp;rsquo;t require running a separate server. However, SQLite has many differences from other databases, so if you are working on something substantial, it&amp;rsquo;s recommended to develop with the same database that you plan on using in production.</source>
          <target state="translated">小規模なプロジェクトや、運用環境に展開する予定のないプロジェクトを開発している場合は、個別のサーバーを実行する必要がないため、SQLiteが一般的に最良のオプションです。ただし、SQLiteは他のデータベースと多くの違いがあるため、重要な作業をしている場合は、本番環境で使用する予定の同じデータベースを使用して開発することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="426463c8a09b71f7c823f03996117348698ae262" translate="yes" xml:space="preserve">
          <source>If you are familiar with Python packaging and interested in learning how to turn polls into a &amp;ldquo;reusable app&amp;rdquo;, check out &lt;a href=&quot;reusable-apps&quot;&gt;Advanced tutorial: How to write reusable apps&lt;/a&gt;.</source>
          <target state="translated">Pythonのパッケージングに精通していて、投票を「再利用可能なアプリ」にする方法に興味がある場合は、&lt;a href=&quot;reusable-apps&quot;&gt;高度なチュートリアル：再利用可能なアプリの作成方法をご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6df1a07d3d4b877dffccc3304d0749b9a9a63bcf" translate="yes" xml:space="preserve">
          <source>If you are filtering across multiple relationships and one of the intermediate models doesn&amp;rsquo;t have a value that meets the filter condition, Django will treat it as if there is an empty (all values are &lt;code&gt;NULL&lt;/code&gt;), but valid, object there. All this means is that no error will be raised. For example, in this filter:</source>
          <target state="translated">複数の関係をフィルタリングしていて、中間モデルの1つにフィルター条件を満たす値がない場合、Djangoはそれを空（すべての値が &lt;code&gt;NULL&lt;/code&gt; ）であるが有効なオブジェクトがあるかのように扱います。つまり、エラーが発生することはありません。たとえば、次のフィルターでは：</target>
        </trans-unit>
        <trans-unit id="54d3dc0d5d9a07f09c0b925c9b0c98d70db0dd97" translate="yes" xml:space="preserve">
          <source>If you are going to need other data from the QuerySet, evaluate it immediately.</source>
          <target state="translated">QuerySetから他のデータが必要になる場合は、すぐに評価してください。</target>
        </trans-unit>
        <trans-unit id="0a6f484ecf97ba11c41c19b92638b2e691e251cf" translate="yes" xml:space="preserve">
          <source>If you are just starting with Django and using Windows, you may find &lt;a href=&quot;../howto/windows&quot;&gt;How to install Django on Windows&lt;/a&gt; useful.</source>
          <target state="translated">Djangoから始めてWindowsを使用している場合は&lt;a href=&quot;../howto/windows&quot;&gt;、WindowsにDjangoをインストールする方法が&lt;/a&gt;便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="f8022aedc2f24dbfc32c1645a06e23557556b40d" translate="yes" xml:space="preserve">
          <source>If you are looking for a more robust solution, take a look at the &lt;a href=&quot;https://pypi.org/project/bleach/&quot;&gt;bleach&lt;/a&gt; Python library.</source>
          <target state="translated">より堅牢なソリューションを探している場合は、&lt;a href=&quot;https://pypi.org/project/bleach/&quot;&gt;漂白&lt;/a&gt; Pythonライブラリをご覧ください。</target>
        </trans-unit>
        <trans-unit id="5679be2b89b6ad12b1cb13d77be5c899c643d272" translate="yes" xml:space="preserve">
          <source>If you are looking for a reference on how to submit patches, see the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;Submitting patches&lt;/a&gt; documentation.</source>
          <target state="translated">パッチの提出方法に関するリファレンスを探している場合は、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;パッチ&lt;/a&gt;の提出に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b51f6b7ffd84766e0e10e46ee09ef3d2cd522fad" translate="yes" xml:space="preserve">
          <source>If you are migrating from the Django&amp;rsquo;s built-in &lt;code&gt;cached_db&lt;/code&gt; session store to a custom one based on &lt;code&gt;cached_db&lt;/code&gt;, you should override the cache key prefix in order to prevent a namespace clash:</source>
          <target state="translated">Djangoの組み込みの &lt;code&gt;cached_db&lt;/code&gt; セッションストアから &lt;code&gt;cached_db&lt;/code&gt; に基づくカスタムストアに移行する場合は、名前空間の衝突を防ぐために、キャッシュキーのプレフィックスをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="3f20d2e0ed1b7dfe99fe7b1b15afc7ea12f08c4e" translate="yes" xml:space="preserve">
          <source>If you are mirroring an existing model or database table and don&amp;rsquo;t want all the original database table columns, use &lt;code&gt;Meta.managed=False&lt;/code&gt;. That option is normally useful for modeling database views and tables not under the control of Django.</source>
          <target state="translated">既存のモデルまたはデータベーステーブルをミラーリングしていて、元のデータベーステーブルの列をすべて必要としない場合は、 &lt;code&gt;Meta.managed=False&lt;/code&gt; を使用します。このオプションは通常、Djangoの制御下にないデータベースビューとテーブルのモデリングに役立ちます。</target>
        </trans-unit>
        <trans-unit id="2c77013a5d33bed9ff8aeb9b8d8bccb978ee3d8e" translate="yes" xml:space="preserve">
          <source>If you are not using SQLite as your database, additional settings such as &lt;a href=&quot;../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/settings#std:setting-PASSWORD&quot;&gt;&lt;code&gt;PASSWORD&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../ref/settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; must be added. For more details, see the reference documentation for &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データベースとしてSQLiteを使用していない場合は、&lt;a href=&quot;../ref/settings#std:setting-USER&quot;&gt; &lt;code&gt;USER&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/settings#std:setting-PASSWORD&quot;&gt; &lt;code&gt;PASSWORD&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/settings#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt;などの追加設定を追加する必要があります。詳細については、&lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;のリファレンスドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2dff9fa6f2943dcffcb71466072c87506f22903b" translate="yes" xml:space="preserve">
          <source>If you are performing queries on MySQL, note that MySQL&amp;rsquo;s silent type coercion may cause unexpected results when mixing types. If you query on a string type column, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. For example, if your table contains the values &lt;code&gt;'abc'&lt;/code&gt;, &lt;code&gt;'def'&lt;/code&gt; and you query for &lt;code&gt;WHERE mycolumn=0&lt;/code&gt;, both rows will match. To prevent this, perform the correct typecasting before using the value in a query.</source>
          <target state="translated">MySQLでクエリを実行している場合は、MySQLのサイレント型強制が型の混合時に予期しない結果を引き起こす可能性があることに注意してください。文字列型の列でクエリを実行したが整数値を使用する場合、MySQLは比較を実行する前にテーブル内のすべての値の型を整数に強制変換します。たとえば、テーブルに値 &lt;code&gt;'abc'&lt;/code&gt; 、 &lt;code&gt;'def'&lt;/code&gt; が含まれていて、 &lt;code&gt;WHERE mycolumn=0&lt;/code&gt; でクエリを実行すると、両方の行が一致します。これを防ぐには、クエリで値を使用する前に正しい型キャストを実行します。</target>
        </trans-unit>
        <trans-unit id="a947d6cabd99493fc7e983c79f42f4923da04a9e" translate="yes" xml:space="preserve">
          <source>If you are serving your own static files, be sure that handlers like Apache&amp;rsquo;s &lt;code&gt;mod_php&lt;/code&gt;, which would execute static files as code, are disabled. You don&amp;rsquo;t want users to be able to execute arbitrary code by uploading and requesting a specially crafted file.</source>
          <target state="translated">独自の静的ファイルを提供する場合は、静的ファイルをコードとして実行するApacheの &lt;code&gt;mod_php&lt;/code&gt; などのハンドラーが無効になっていることを確認してください。ユーザーが特別に細工されたファイルをアップロードしてリクエストすることにより、ユーザーが任意のコードを実行できるようにしたくない。</target>
        </trans-unit>
        <trans-unit id="3e266d9fb9806995f7ae92d1d0321cc13f004066" translate="yes" xml:space="preserve">
          <source>If you are sharing a cache instance between servers, or between your production and development environments, it&amp;rsquo;s possible for data cached by one server to be used by another server. If the format of cached data is different between servers, this can lead to some very hard to diagnose problems.</source>
          <target state="translated">サーバー間、または本番環境と開発環境の間でキャッシュインスタンスを共有している場合、あるサーバーでキャッシュされたデータが別のサーバーで使用される可能性があります。キャッシュされたデータのフォーマットがサーバー間で異なる場合、問題の診断が非常に困難になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="5df3afa0c3b43eec8bd8d9f748fb63ae435ac643" translate="yes" xml:space="preserve">
          <source>If you are the maintainer of a third-party app with models, you may need to ship migrations that support multiple Django versions. In this case, you should always run &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;with the lowest Django version you wish to support&lt;/strong&gt;.</source>
          <target state="translated">モデルを使用するサードパーティアプリのメンテナーである場合は、複数のDjangoバージョンをサポートする移行を出荷する必要がある場合があります。この場合、常に&lt;strong&gt;サポートしたい最低のDjangoバージョンで&lt;/strong&gt;&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;&lt;strong&gt;を&lt;/strong&gt;実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="c58efff062a8aaaaa34e19e97693ce558ec61bc5" translate="yes" xml:space="preserve">
          <source>If you are trying to call code that is synchronous-only from an asynchronous thread, then create a synchronous thread and call it in that. You can accomplish this is with &lt;code&gt;asgiref.sync.sync_to_async&lt;/code&gt;.</source>
          <target state="translated">非同期スレッドから同期のみのコードを呼び出そうとしている場合は、同期スレッドを作成し、その中で呼び出します。これは &lt;code&gt;asgiref.sync.sync_to_async&lt;/code&gt; で実現できます。</target>
        </trans-unit>
        <trans-unit id="e8e0bd3010ac7dd8cec899905c900e89f1f7d84a" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt; on a &lt;code&gt;ForeignKey&lt;/code&gt; or &lt;code&gt;ManyToManyField&lt;/code&gt;, you must always specify a &lt;em&gt;unique&lt;/em&gt; reverse name and query name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt;) each time.</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt;上 &lt;code&gt;ForeignKey&lt;/code&gt; や &lt;code&gt;ManyToManyField&lt;/code&gt; 、あなたは常に指定する必要があります&lt;em&gt;ユニークな&lt;/em&gt;フィールドの逆名とクエリ名を。このクラスのフィールドは各子クラスに含まれ、そのたびに属性（&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt;を含む）の値がまったく同じになるため、これは通常、抽象基本クラスで問題を引き起こします。</target>
        </trans-unit>
        <trans-unit id="13ff923ff59501ab414c4be102a84827b6e517bb" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; to generate serialized data, use the &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt;&lt;code&gt;dumpdata --natural-foreign&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-primary&quot;&gt;&lt;code&gt;dumpdata --natural-primary&lt;/code&gt;&lt;/a&gt; command line flags to generate natural keys.</source>
          <target state="translated">使用している場合は&lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; のを&lt;/a&gt;直列化データを生成するために、使用&lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt; &lt;code&gt;dumpdata --natural-foreign&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-primary&quot;&gt; &lt;code&gt;dumpdata --natural-primary&lt;/code&gt; &lt;/a&gt;自然キーを生成するには、コマンドラインフラグを。</target>
        </trans-unit>
        <trans-unit id="59359e0377bcc9039f07ed70ee0fda67ef2ccade" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;multi-db&quot;&gt;more than one database&lt;/a&gt;, you can use &lt;code&gt;django.db.connections&lt;/code&gt; to obtain the connection (and cursor) for a specific database. &lt;code&gt;django.db.connections&lt;/code&gt; is a dictionary-like object that allows you to retrieve a specific connection using its alias:</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;multi-db&quot;&gt;、複数のデータベースを&lt;/a&gt;、あなたが使用することができます &lt;code&gt;django.db.connections&lt;/code&gt; を、特定のデータベースへの接続（カーソル）を得ました。 &lt;code&gt;django.db.connections&lt;/code&gt; は辞書のようなオブジェクトで、エイリアスを使用して特定の接続を取得できます。</target>
        </trans-unit>
        <trans-unit id="f9a935f64b3c7b8ef812c793ab72169e068de5c7" translate="yes" xml:space="preserve">
          <source>If you are using MySQL, see the &lt;a href=&quot;../../ref/databases#mysql-time-zone-definitions&quot;&gt;Time zone definitions&lt;/a&gt; section of the MySQL notes for instructions on loading time zone definitions.</source>
          <target state="translated">MySQLを使用している場合、&lt;a href=&quot;../../ref/databases#mysql-time-zone-definitions&quot;&gt;タイムゾーン定義の&lt;/a&gt;ロード手順については、MySQLのメモの「タイムゾーン定義」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="20d3a84d61e53af28e187e5423ab3c6daba100cb" translate="yes" xml:space="preserve">
          <source>If you are using a &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet&quot;&gt;&lt;code&gt;ModelFormSet&lt;/code&gt;&lt;/a&gt;, model instances for deleted forms will be deleted when you call &lt;code&gt;formset.save()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet&quot;&gt; &lt;code&gt;ModelFormSet&lt;/code&gt; &lt;/a&gt;を使用している場合、 &lt;code&gt;formset.save()&lt;/code&gt; を呼び出すと、削除されたフォームのモデルインスタンスが削除されます。</target>
        </trans-unit>
        <trans-unit id="4a32235de5fa9b7f6d1fb4ceb0c0a90fb7c8b7a7" translate="yes" xml:space="preserve">
          <source>If you are using a custom &lt;code&gt;AdminSite&lt;/code&gt;, it is common to import all of the &lt;code&gt;ModelAdmin&lt;/code&gt; subclasses into your code and register them to the custom &lt;code&gt;AdminSite&lt;/code&gt;. In that case, in order to disable auto-discovery, you should put &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; instead of &lt;code&gt;'django.contrib.admin'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">カスタム &lt;code&gt;AdminSite&lt;/code&gt; を使用している場合、すべての &lt;code&gt;ModelAdmin&lt;/code&gt; サブクラスをコードにインポートして、それらをカスタム &lt;code&gt;AdminSite&lt;/code&gt; に登録するのが一般的です。その場合、自動検出を無効にするには、&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; 代わりに &lt;code&gt;'django.contrib.admin'&lt;/code&gt; を配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="3e5ad72d051f2c508d3660b55413bfd83991c9d5" translate="yes" xml:space="preserve">
          <source>If you are using a custom &lt;code&gt;ModelAdmin&lt;/code&gt; which is a subclass of &lt;code&gt;django.contrib.auth.admin.UserAdmin&lt;/code&gt;, then you need to add your custom fields to &lt;code&gt;fieldsets&lt;/code&gt; (for fields to be used in editing users) and to &lt;code&gt;add_fieldsets&lt;/code&gt; (for fields to be used when creating a user). For example:</source>
          <target state="translated">カスタム使用している場合は &lt;code&gt;ModelAdmin&lt;/code&gt; のサブクラスである &lt;code&gt;django.contrib.auth.admin.UserAdmin&lt;/code&gt; を、あなたはあなたにカスタムフィールドを追加する必要があり &lt;code&gt;fieldsets&lt;/code&gt; （ユーザーの編集に使用するフィールドの場合）とに &lt;code&gt;add_fieldsets&lt;/code&gt; フィールドがあるために（ユーザーの作成時に使用されます）。例えば：</target>
        </trans-unit>
        <trans-unit id="55299cb11d5a4d1a27e95db83e96e73588d11d45" translate="yes" xml:space="preserve">
          <source>If you are using a legacy database that contains &lt;code&gt;TIMESTAMP&lt;/code&gt; columns, you must set &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = False&lt;/code&gt;&lt;/a&gt; to avoid data corruption. &lt;a href=&quot;django-admin#django-admin-inspectdb&quot;&gt;&lt;code&gt;inspectdb&lt;/code&gt;&lt;/a&gt; maps these columns to &lt;a href=&quot;models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; and if you enable timezone support, both MySQL and Django will attempt to convert the values from UTC to local time.</source>
          <target state="translated">&lt;code&gt;TIMESTAMP&lt;/code&gt; 列を含むレガシーデータベースを使用している場合は、&lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = False&lt;/code&gt; &lt;/a&gt;を設定して、データの破損を回避する必要があります。&lt;a href=&quot;django-admin#django-admin-inspectdb&quot;&gt; &lt;code&gt;inspectdb&lt;/code&gt; &lt;/a&gt;はこれらの列を&lt;a href=&quot;models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; に&lt;/a&gt;マップし、タイムゾーンサポートを有効にすると、MySQLとDjangoの両方が値をUTCから現地時間に変換しようとします。</target>
        </trans-unit>
        <trans-unit id="9b9eb482ea04b91f418d3f207e5896276fab27cb" translate="yes" xml:space="preserve">
          <source>If you are using a production backend that can accept a wider range of keys (a custom backend, or one of the non-memcached built-in backends), and want to use this wider range without warnings, you can silence &lt;code&gt;CacheKeyWarning&lt;/code&gt; with this code in the &lt;code&gt;management&lt;/code&gt; module of one of your &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">幅広いキー（カスタムバックエンド、または非memcachedの組み込みバックエンドの1つ）を受け入れることができるプロダクションバックエンドを使用していて、警告なしにこの広い範囲を使用したい場合は、このコードで &lt;code&gt;CacheKeyWarning&lt;/code&gt; をサイレントにできます。いずれかの&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;management&lt;/code&gt; モジュールで：</target>
        </trans-unit>
        <trans-unit id="400ddbb0cf2f8ce72e355d92bebfc1e26ffa4aab" translate="yes" xml:space="preserve">
          <source>If you are using a version of Apache older than 2.4, replace &lt;code&gt;Require all granted&lt;/code&gt; with &lt;code&gt;Allow from all&lt;/code&gt; and also add the line &lt;code&gt;Order deny,allow&lt;/code&gt; above it.</source>
          <target state="translated">あなたが2.4よりも古いバージョンのApacheを使用している場合は、交換してください &lt;code&gt;Require all granted&lt;/code&gt; に &lt;code&gt;Allow from all&lt;/code&gt; の行を追加します。またと &lt;code&gt;Order deny,allow&lt;/code&gt; 、それを超えます。</target>
        </trans-unit>
        <trans-unit id="e9b1ff813f22a4d98b3e0ec7f8d1a70dfb440c12" translate="yes" xml:space="preserve">
          <source>If you are using caching provided by Django, you should consider clearing your cache after upgrading. Otherwise you may run into problems, for example, if you are caching pickled objects as these objects are not guaranteed to be pickle-compatible across Django versions. A past instance of incompatibility was caching pickled &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects, either directly or indirectly via the &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt;&lt;code&gt;cache_page()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="translated">Djangoが提供するキャッシュを使用している場合は、アップグレード後にキャッシュをクリアすることを検討してください。そうしないと、ピクルされたオブジェクトがDjangoのバージョン間でピクル互換であることが保証されないため、ピクルされたオブジェクトをキャッシュしている場合など、問題が発生する可能性があります。非互換性の過去のインスタンスは、&lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt; &lt;code&gt;cache_page()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを直接またはcache_page（）デコレータを介して間接的にキャッシュしていました。</target>
        </trans-unit>
        <trans-unit id="31c81067457a54fed13944b98da35401d7bcbd26" translate="yes" xml:space="preserve">
          <source>If you are using class-based views, you can refer to &lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;Decorating class-based views&lt;/a&gt;.</source>
          <target state="translated">クラスベースのビューを使用している場合は、「&lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;クラスベースのビューの装飾&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="74bc5b3d8a5fb005230ddd51971a6b250b4753ac" translate="yes" xml:space="preserve">
          <source>If you are using more than one database you can use &lt;code&gt;django.db.connections&lt;/code&gt; to obtain the connection (and cursor) for a specific database. &lt;code&gt;django.db.connections&lt;/code&gt; is a dictionary-like object that allows you to retrieve a specific connection using its alias:</source>
          <target state="translated">複数のデータベースを使用している場合は、 &lt;code&gt;django.db.connections&lt;/code&gt; を使用して、特定のデータベースの接続（およびカーソル）を取得できます。 &lt;code&gt;django.db.connections&lt;/code&gt; は辞書のようなオブジェクトで、エイリアスを使用して特定の接続を取得できます。</target>
        </trans-unit>
        <trans-unit id="0ecf06722ffb34ee4a0fedfb0511c983d4a713e0" translate="yes" xml:space="preserve">
          <source>If you are using multiple database caches, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; creates one table for each cache.</source>
          <target state="translated">複数のデータベースキャッシュを使用している場合、&lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; &lt;/a&gt;はキャッシュごとに1つのテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="c1f1afe7956d536875c96cebe4354cfc56b04593" translate="yes" xml:space="preserve">
          <source>If you are using multiple databases, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; observes the &lt;code&gt;allow_migrate()&lt;/code&gt; method of your database routers (see below).</source>
          <target state="translated">複数のデータベースを使用している場合、&lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; &lt;/a&gt;はデータベースルーターの &lt;code&gt;allow_migrate()&lt;/code&gt; メソッドを監視します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="d8e86b0dcae3d153f97ecddffbaca181d07969ec" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend, this probably isn&amp;rsquo;t the documentation you&amp;rsquo;re looking for. An instance of the &lt;code&gt;Engine&lt;/code&gt; class described below is accessible using the &lt;code&gt;engine&lt;/code&gt; attribute of that backend and any attribute defaults mentioned below are overridden by what&amp;rsquo;s passed by &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;バックエンドを使用している場合、これはおそらく探しているドキュメントではありません。以下で説明する &lt;code&gt;Engine&lt;/code&gt; クラスのインスタンスには、そのバックエンドの &lt;code&gt;engine&lt;/code&gt; 属性を使用してアクセスできます。以下で説明する属性のデフォルトは、&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;によって渡されるものによってオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="98aa047d8bc9dd103405d4da35377acc8117f24d" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;db/managers#django.db.models.from_queryset&quot;&gt;&lt;code&gt;from_queryset()&lt;/code&gt;&lt;/a&gt; function to dynamically generate a manager class, you need to inherit from the generated class to make it importable:</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;db/managers#django.db.models.from_queryset&quot;&gt; &lt;code&gt;from_queryset()&lt;/code&gt; &lt;/a&gt;動的マネージャクラスを生成する機能を、あなたはそれがインポート可能にするために生成されたクラスから継承する必要があります。</target>
        </trans-unit>
        <trans-unit id="b152ab1851b4b76c1b0fadc99e24633039333bc3" translate="yes" xml:space="preserve">
          <source>If you are using the default &lt;a href=&quot;../files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;FileSystemStorage&lt;/code&gt;&lt;/a&gt;, the string value will be appended to your &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; path to form the location on the local filesystem where uploaded files will be stored. If you are using a different storage, check that storage&amp;rsquo;s documentation to see how it handles &lt;code&gt;upload_to&lt;/code&gt;.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;../files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;FileSystemStorage&lt;/code&gt; &lt;/a&gt;を使用している場合、文字列値が&lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;パスに追加され、アップロードされたファイルが保存されるローカルファイルシステム上の場所が形成されます。別のストレージを使用している場合は、そのストレージのドキュメントをチェックして、 &lt;code&gt;upload_to&lt;/code&gt; がどのように処理されるかを確認してください。</target>
        </trans-unit>
        <trans-unit id="9d24da33ace038770df53fb75680d36c64adccce" translate="yes" xml:space="preserve">
          <source>If you are using the default test runner, you can control this with the the &lt;a href=&quot;../../ref/settings#std:setting-TEST_SERIALIZE&quot;&gt;&lt;code&gt;SERIALIZE&lt;/code&gt;&lt;/a&gt; entry in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary.</source>
          <target state="translated">デフォルトのテストランナーを使用している場合は、&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt;辞書の&lt;a href=&quot;../../ref/settings#std:setting-TEST_SERIALIZE&quot;&gt; &lt;code&gt;SERIALIZE&lt;/code&gt; &lt;/a&gt;エントリでこれを制御できます。</target>
        </trans-unit>
        <trans-unit id="3b67e56408c732a18c6ba1adae555cdf257848ab" translate="yes" xml:space="preserve">
          <source>If you are wanting to change the Python-only behavior of a model, but keep all the same fields as in the original, use &lt;code&gt;Meta.proxy=True&lt;/code&gt;. This sets things up so that the proxy model is an exact copy of the storage structure of the original model when data is saved.</source>
          <target state="translated">モデルのPythonのみの動作を変更したいが、元と同じフィールドをすべて保持したい場合は、 &lt;code&gt;Meta.proxy=True&lt;/code&gt; を使用してください。これにより、データが保存されるときにプロキシモデルが元のモデルのストレージ構造の正確なコピーになるように設定されます。</target>
        </trans-unit>
        <trans-unit id="f2bd0fdb6a5a5ac5aa3b6f2e67b4ab2cda67e9ec" translate="yes" xml:space="preserve">
          <source>If you are writing a &lt;a href=&quot;../../intro/reusable-apps&quot;&gt;reusable application&lt;/a&gt; you may want to use the Django test runner to run your own test suite and thus benefit from the Django testing infrastructure.</source>
          <target state="translated">あなたが書いている場合は&lt;a href=&quot;../../intro/reusable-apps&quot;&gt;、再利用可能なアプリケーションを&lt;/a&gt;独自のテストスイートを実行するため、Djangoのテストインフラストラクチャの恩恵を受けるためにDjangoのテストランナーを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="63f4345566a629d77c36a5b719a36c80b1781cf7" translate="yes" xml:space="preserve">
          <source>If you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on &lt;code&gt;max_length&lt;/code&gt; for some backends. Refer to the &lt;a href=&quot;../databases&quot;&gt;database backend notes&lt;/a&gt; for details.</source>
          <target state="translated">複数のデータベースバックエンドに移植可能でなければならないアプリケーションを作成している場合は、一部のバックエンドの &lt;code&gt;max_length&lt;/code&gt; に制限があることに注意してください。詳細については、&lt;a href=&quot;../databases&quot;&gt;データベースのバックエンドノート&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3ec3b03a16835f16337bac3782d93796fddb90be" translate="yes" xml:space="preserve">
          <source>If you are writing custom views for Django&amp;rsquo;s admin (or need the same authorization check that the built-in views use), you may find the &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required&quot;&gt;&lt;code&gt;django.contrib.admin.views.decorators.staff_member_required()&lt;/code&gt;&lt;/a&gt; decorator a useful alternative to &lt;code&gt;login_required()&lt;/code&gt;.</source>
          <target state="translated">Djangoの管理者向けにカスタムビューを作成している場合（または組み込みのビューで使用するのと同じ承認チェックが必要な場合）、&lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required&quot;&gt; &lt;code&gt;django.contrib.admin.views.decorators.staff_member_required()&lt;/code&gt; &lt;/a&gt;デコレータが &lt;code&gt;login_required()&lt;/code&gt; の便利な代替手段であることがわかります。</target>
        </trans-unit>
        <trans-unit id="9260861ea3c89683f0065f3584c6348bda3c70e8" translate="yes" xml:space="preserve">
          <source>If you are writing or maintaining a third-party database backend for Django, you will need to provide a &lt;code&gt;SchemaEditor&lt;/code&gt; implementation in order to work with 1.7&amp;rsquo;s migration functionality - however, as long as your database is relatively standard in its use of SQL and relational design, you should be able to subclass one of the built-in Django &lt;code&gt;SchemaEditor&lt;/code&gt; classes and tweak the syntax a little. Also note that there are a few new database features that migrations will look for: &lt;code&gt;can_rollback_ddl&lt;/code&gt; and &lt;code&gt;supports_combined_alters&lt;/code&gt; are the most important.</source>
          <target state="translated">Djangoのサードパーティデータベースバックエンドを作成または維持している場合、1.7の移行機能を使用するには、 &lt;code&gt;SchemaEditor&lt;/code&gt; 実装を提供する必要があります。ただし、データベースのSQLの使用が比較的標準的であり、リレーショナルデザインでは、組み込みのDjango &lt;code&gt;SchemaEditor&lt;/code&gt; クラスの1つをサブクラス化し、構文を少し調整できるはずです。また、マイグレーションが探す新しいデータベース機能がいくつかあることに注意してください &lt;code&gt;can_rollback_ddl&lt;/code&gt; と &lt;code&gt;supports_combined_alters&lt;/code&gt; が最も重要です。</target>
        </trans-unit>
        <trans-unit id="6e12212c9814a4d33e32e4d9464358cf6356b217" translate="yes" xml:space="preserve">
          <source>If you assign a value of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; to an attribute, it will be rendered as an HTML5 boolean attribute:</source>
          <target state="translated">属性に &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; の値を割り当てると、HTML5ブール属性としてレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="32c8444bd1418d1e80bc0e62c5a90e8f82286fbe" translate="yes" xml:space="preserve">
          <source>If you assign auto-primary-key values manually, make sure not to use an already-existing primary-key value! If you create a new object with an explicit primary-key value that already exists in the database, Django will assume you&amp;rsquo;re changing the existing record rather than creating a new one.</source>
          <target state="translated">自動主キー値を手動で割り当てる場合は、既存の主キー値を使用しないようにしてください。データベースにすでに存在する明示的な主キー値を使用して新しいオブジェクトを作成すると、Djangoは、新しいレコードを作成するのではなく、既存のレコードを変更すると想定します。</target>
        </trans-unit>
        <trans-unit id="49a2f3768ca62045d71dd6c07b469ec6cd3d26bc" translate="yes" xml:space="preserve">
          <source>If you attempt to access a database that you haven&amp;rsquo;t defined in your &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting, Django will raise a &lt;code&gt;django.db.utils.ConnectionDoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;設定で定義していないデータベースにアクセスしようとすると、Djangoは &lt;code&gt;django.db.utils.ConnectionDoesNotExist&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="094a5a53db7e5fc234781db19fdb93e284cd8498" translate="yes" xml:space="preserve">
          <source>If you attempt to insert a new row that conflicts with an existing row, an &lt;a href=&quot;../../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; is raised. Similarly, when update conflicts with an existing row.</source>
          <target state="translated">既存の行と競合する新しい行を挿入しようとすると、&lt;a href=&quot;../../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt;が発生します。同様に、更新が既存の行と競合する場合。</target>
        </trans-unit>
        <trans-unit id="b554a2162422140f6059440c8b501ad2c5a78b5b" translate="yes" xml:space="preserve">
          <source>If you attempt to use &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; and pass a field name that doesn&amp;rsquo;t exist, Django will raise a &lt;code&gt;ValueError&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;を使用して、存在しないフィールド名を渡そうとすると、Djangoは &lt;code&gt;ValueError&lt;/code&gt; を送出します。</target>
        </trans-unit>
        <trans-unit id="4e5abf4e7be3fc5b817d5e64f617996405c68b1a" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;formset.save(commit=False)&lt;/code&gt;, objects will not be deleted automatically. You&amp;rsquo;ll need to call &lt;code&gt;delete()&lt;/code&gt; on each of the &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet.deleted_objects&quot;&gt;&lt;code&gt;formset.deleted_objects&lt;/code&gt;&lt;/a&gt; to actually delete them:</source>
          <target state="translated">&lt;code&gt;formset.save(commit=False)&lt;/code&gt; を呼び出しても、オブジェクトは自動的には削除されません。それらを実際に削除するには、各&lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet.deleted_objects&quot;&gt; &lt;code&gt;formset.deleted_objects&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;delete()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="77f2d3ee05bddf46e62d79be0db43fed60754a7d" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;get_template('story_detail.html')&lt;/code&gt;, here are the files Django will look for, in order:</source>
          <target state="translated">&lt;code&gt;get_template('story_detail.html')&lt;/code&gt; を呼び出すと、Djangoが探すファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="81d2651eaffa16d0fff33c40f11a5412ce1b24bb" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;on_commit()&lt;/code&gt; while there isn&amp;rsquo;t an active transaction, the callback will be executed immediately.</source>
          <target state="translated">アクティブなトランザクションがないときに &lt;code&gt;on_commit()&lt;/code&gt; を呼び出すと、コールバックがすぐに実行されます。</target>
        </trans-unit>
        <trans-unit id="fd4a96e10fe18bc75c5654babe72785efc64e7dd" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;select_template(['story_253_detail.html', 'story_detail.html'])&lt;/code&gt;, here&amp;rsquo;s what Django will look for:</source>
          <target state="translated">&lt;code&gt;select_template(['story_253_detail.html', 'story_detail.html'])&lt;/code&gt; を呼び出すと、Djangoは次のように検索します。</target>
        </trans-unit>
        <trans-unit id="b2232cc0a9efa6073693abc788397e1cd49fb07c" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t find the solution to your problem here then participate in the community! You can:</source>
          <target state="translated">ここで問題の解決策が見つからない場合は、コミュニティに参加してください！あなたはできる：</target>
        </trans-unit>
        <trans-unit id="f9c5827d1b1d34ede00df19d4fc1cff6b7b1859a" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t use mod_wsgi for some reason, fear not: Django supports many other deployment options. One is &lt;a href=&quot;../howto/deployment/wsgi/uwsgi&quot;&gt;uWSGI&lt;/a&gt;; it works very well with &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt;. Additionally, Django follows the WSGI spec (&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;), which allows it to run on a variety of server platforms.</source>
          <target state="translated">何らかの理由でmod_wsgiを使用できない場合は、恐れる必要はありません。Djangoは他の多くのデプロイメントオプションをサポートしています。1つは&lt;a href=&quot;../howto/deployment/wsgi/uwsgi&quot;&gt;uWSGI&lt;/a&gt;です。&lt;a href=&quot;https://nginx.org/&quot;&gt;nginxで&lt;/a&gt;非常にうまく機能します。さらに、DjangoはWSGI仕様（&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;）に&lt;strong&gt;準拠し&lt;/strong&gt;ているため、さまざまなサーバープラットフォームで実行できます。</target>
        </trans-unit>
        <trans-unit id="714e0fc374856568ae969db6c05be8f214cc209c" translate="yes" xml:space="preserve">
          <source>If you catch exceptions raised by raw SQL queries, Django&amp;rsquo;s behavior is unspecified and database-dependent.</source>
          <target state="translated">生のSQLクエリによって発生した例外をキャッチする場合、Djangoの動作は特定されておらず、データベースに依存しています。</target>
        </trans-unit>
        <trans-unit id="94e38667622f6c2c7156cdc76fe9c7801210a45e" translate="yes" xml:space="preserve">
          <source>If you customized the Python or OSGeo4W installation directories, then you will need to modify the &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; and/or &lt;code&gt;PYTHON_ROOT&lt;/code&gt; variables accordingly.</source>
          <target state="translated">PythonまたはOSGeo4Wのインストールディレクトリをカスタマイズした場合は、それに応じて &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; および/または &lt;code&gt;PYTHON_ROOT&lt;/code&gt; 変数を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="daa850f3332eec5c502db816abab6725f3877956" translate="yes" xml:space="preserve">
          <source>If you decide not to loop over the radio buttons &amp;ndash; e.g., if your template includes &lt;code&gt;{{ myform.beatles }}&lt;/code&gt; &amp;ndash; they&amp;rsquo;ll be output in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags, as above.</source>
          <target state="translated">テンプレートに &lt;code&gt;{{ myform.beatles }}&lt;/code&gt; 含まれている場合など、ラジオボタンをループしない場合は、上記のように、 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; に &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; タグを付けて出力されます。</target>
        </trans-unit>
        <trans-unit id="6e464f5ba0eea9891fc2679642fe2eb1b677c058" translate="yes" xml:space="preserve">
          <source>If you decide to use the latest development version of Django, you&amp;rsquo;ll want to pay close attention to &lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;the development timeline&lt;/a&gt;, and you&amp;rsquo;ll want to keep an eye on the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/#development-release-notes&quot;&gt;release notes for the upcoming release&lt;/a&gt;. This will help you stay on top of any new features you might want to use, as well as any changes you&amp;rsquo;ll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)</source>
          <target state="translated">Djangoの最新の開発バージョンを使用する場合は&lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;、開発のタイムラインに&lt;/a&gt;細心の注意を払い&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/#development-release-notes&quot;&gt;、次のリリースのリリースノートに注意&lt;/a&gt;する必要があります。これは、Djangoのコピーを更新するときにコードに加える必要のある変更だけでなく、使用したいすべての新機能を常に把握するのに役立ちます。（安定版リリースの場合、必要な変更はリリースノートに記載されています。）</target>
        </trans-unit>
        <trans-unit id="ad704302a2e0f4e5bbd68ed3a827973dea658d2e" translate="yes" xml:space="preserve">
          <source>If you define a custom &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, you can mark the language names as translation strings using the &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">カスタムの&lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt;設定を定義する場合、&lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt;関数を使用して言語名を翻訳文字列としてマークできます。</target>
        </trans-unit>
        <trans-unit id="b08ee922d63ba491bb2cdb4cdfbeae244906b41e" translate="yes" xml:space="preserve">
          <source>If you define a custom &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, as explained in the previous bullet, you can mark the language names as translation strings &amp;ndash; but use &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; to avoid a circular import.</source>
          <target state="translated">前の箇条書きで説明したように、カスタム&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt;設定を定義すると、言語名を翻訳文字列としてマークできます。&lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt;、循環インポートを回避するために、&lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt;ではなくgettext_lazy（）を使用してください。</target>
        </trans-unit>
        <trans-unit id="fcb6c3e1edc1b97b11ed2b6af3ff6371f63271e0" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;Meta.model&lt;/code&gt; attribute on a &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you must also define the &lt;code&gt;Meta.fields&lt;/code&gt; attribute (or the &lt;code&gt;Meta.exclude&lt;/code&gt; attribute). However, &lt;code&gt;ModelAdmin&lt;/code&gt; ignores this value, overriding it with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_editable&quot;&gt;&lt;code&gt;ModelAdmin.list_editable&lt;/code&gt;&lt;/a&gt; attribute. The easiest solution is to omit the &lt;code&gt;Meta.model&lt;/code&gt; attribute, since &lt;code&gt;ModelAdmin&lt;/code&gt; will provide the correct model to use.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;Meta.model&lt;/code&gt; 属性を定義する場合は、 &lt;code&gt;Meta.fields&lt;/code&gt; 属性（または &lt;code&gt;Meta.exclude&lt;/code&gt; 属性）も定義する必要があります。ただし、 &lt;code&gt;ModelAdmin&lt;/code&gt; はこの値を無視し、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_editable&quot;&gt; &lt;code&gt;ModelAdmin.list_editable&lt;/code&gt; &lt;/a&gt;属性で上書きします。 &lt;code&gt;ModelAdmin&lt;/code&gt; が使用する正しいモデルを提供するため、最も簡単な解決策は &lt;code&gt;Meta.model&lt;/code&gt; 属性を省略することです。</target>
        </trans-unit>
        <trans-unit id="485fe478429ed2c9c1a4f227e8e46539022690b8" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;Meta.model&lt;/code&gt; attribute on a &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you must also define the &lt;code&gt;Meta.fields&lt;/code&gt; attribute (or the &lt;code&gt;Meta.exclude&lt;/code&gt; attribute). However, since the admin has its own way of defining fields, the &lt;code&gt;Meta.fields&lt;/code&gt; attribute will be ignored.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;Meta.model&lt;/code&gt; 属性を定義する場合は、 &lt;code&gt;Meta.fields&lt;/code&gt; 属性（または &lt;code&gt;Meta.exclude&lt;/code&gt; 属性）も定義する必要があります。ただし、管理者には独自のフィールド定義方法があるため、 &lt;code&gt;Meta.fields&lt;/code&gt; 属性は無視されます。</target>
        </trans-unit>
        <trans-unit id="45386bfd1f22aa5a94eb25eb7ab85058786a5cc9" translate="yes" xml:space="preserve">
          <source>If you define your own test runner class and point &lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt;&lt;code&gt;TEST_RUNNER&lt;/code&gt;&lt;/a&gt; at that class, Django will execute your test runner whenever you run &lt;code&gt;./manage.py test&lt;/code&gt;. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have.</source>
          <target state="translated">独自のテストランナークラスを定義し、そのクラスで&lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt; &lt;code&gt;TEST_RUNNER&lt;/code&gt; &lt;/a&gt;をポイントすると、Djangoは &lt;code&gt;./manage.py test&lt;/code&gt; を実行するたびにテストランナーを実行します。このように、Pythonコードから実行できるテストフレームワークを使用したり、Djangoテスト実行プロセスを変更して、必要なテスト要件を満たすことができます。</target>
        </trans-unit>
        <trans-unit id="ea90d73bc6981a1948260ffdf5034a68bee6dab3" translate="yes" xml:space="preserve">
          <source>If you delete a field from a model instance, accessing it again reloads the value from the database:</source>
          <target state="translated">モデル・インスタンスからフィールドを削除すると、そのフィールドに再度アクセスすると、データベースから値がリロードされます。</target>
        </trans-unit>
        <trans-unit id="cff220c390a9ab95545f838c9087be24651f1351" translate="yes" xml:space="preserve">
          <source>If you delete a reporter, his articles will be deleted (assuming that the ForeignKey was defined with &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;CASCADE&lt;/code&gt;, which is the default):</source>
          <target state="translated">レポーターを削除すると、彼の記事が削除されます（ForeignKeyが、&lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt; &lt;/a&gt;がデフォルトの &lt;code&gt;CASCADE&lt;/code&gt; に設定されて定義されていると想定しています）。</target>
        </trans-unit>
        <trans-unit id="d6c2e53ecc92c0f84dc913ba54c33563aaf304cc" translate="yes" xml:space="preserve">
          <source>If you detect errors in multiple fields during &lt;code&gt;Model.clean()&lt;/code&gt;, you can also pass a dictionary mapping field names to errors:</source>
          <target state="translated">&lt;code&gt;Model.clean()&lt;/code&gt; の実行中に複数のフィールドでエラーを検出した場合は、ディクショナリマッピングフィールド名をエラーに渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="48e44cf0802dee16054df73fe1871ad99f86e145" translate="yes" xml:space="preserve">
          <source>If you detect multiple errors during a cleaning method and wish to signal all of them to the form submitter, it is possible to pass a list of errors to the &lt;code&gt;ValidationError&lt;/code&gt; constructor.</source>
          <target state="translated">クリーニングメソッド中に複数のエラーを検出し、それらすべてをフォームサブミッターに通知する場合は、エラーのリストを &lt;code&gt;ValidationError&lt;/code&gt; コンストラクターに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="4cb2bdf9479ffe7ea003c7007bb350d20e0ee892" translate="yes" xml:space="preserve">
          <source>If you disabled it, which is not recommended, you can use &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;csrf_protect()&lt;/code&gt;&lt;/a&gt; on particular views you want to protect (see below).</source>
          <target state="translated">無効にした場合&lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;csrf_protect()&lt;/code&gt; &lt;/a&gt;推奨されません）、保護したい特定のビューでcsrf_protect（）を使用できます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="2479d1d20a26faec2996d634b0774780be84066c" translate="yes" xml:space="preserve">
          <source>If you do either of the first two steps, keep an eye out for parts of the documentation marked &lt;strong&gt;new in development version&lt;/strong&gt;. That phrase flags features that are only available in development versions of Django, and they likely won&amp;rsquo;t work with an official release.</source>
          <target state="translated">最初の2つのステップのいずれかを実行する場合は、&lt;strong&gt;開発バージョンで新規と&lt;/strong&gt;マークされたドキュメントの部分に注意してください。このフレーズは、Djangoの開発バージョンでのみ利用可能な機能にフラグを立てており、公式リリースでは機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="2aaa0c487bb4c6a6eabbf43dd80c991c63a022d7" translate="yes" xml:space="preserve">
          <source>If you do not specify any app, all apps will be checked.</source>
          <target state="translated">アプリを指定しない場合は、すべてのアプリにチェックが入ります。</target>
        </trans-unit>
        <trans-unit id="4141223977e7c136210c586bc61b2fd0accffd3c" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; argument for the &lt;code&gt;OneToOneField&lt;/code&gt;, Django will use the lowercase name of the current model as default value.</source>
          <target state="translated">&lt;code&gt;OneToOneField&lt;/code&gt; の&lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;引数を指定しない場合、Djangoは現在のモデルの小文字の名前をデフォルト値として使用します。</target>
        </trans-unit>
        <trans-unit id="d8109cdfe40c6ccae39110a25cad8a7f109000c4" translate="yes" xml:space="preserve">
          <source>If you do not want symmetry in many-to-many relationships with &lt;code&gt;self&lt;/code&gt;, set &lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt;&lt;code&gt;symmetrical&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;. This will force Django to add the descriptor for the reverse relationship, allowing &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; relationships to be non-symmetrical.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; との多対多の関係で対称性を必要としない場合は、&lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt; &lt;code&gt;symmetrical&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;False&lt;/code&gt; に設定します。これにより、Djangoは逆の関係の記述子を強制的に追加し、&lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; の&lt;/a&gt;関係を非対称にすることができます。</target>
        </trans-unit>
        <trans-unit id="d7c82087cc8221fab70b35945b3651dea07d149a" translate="yes" xml:space="preserve">
          <source>If you do not want to wait for the currently running test to finish, you can press &lt;code&gt;Ctrl-C&lt;/code&gt; a second time and the test run will halt immediately, but not gracefully. No details of the tests run before the interruption will be reported, and any test databases created by the run will not be destroyed.</source>
          <target state="translated">現在実行中のテストが完了するのを待たない場合は、 &lt;code&gt;Ctrl-C&lt;/code&gt; と、テストの実行がすぐに停止しますが、正常に停止しません。中断前に実行されたテストの詳細は報告されず、実行によって作成されたテストデータベースは破棄されません。</target>
        </trans-unit>
        <trans-unit id="18efad3241b2dca59f5e6839d85c3fd25968e685" translate="yes" xml:space="preserve">
          <source>If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional &lt;code&gt;salt&lt;/code&gt; argument to the &lt;code&gt;Signer&lt;/code&gt; class. Using a salt will seed the signing hash function with both the salt and your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">特定の文字列のすべての出現に同じ署名ハッシュを持たせたくない場合は、 &lt;code&gt;Signer&lt;/code&gt; クラスにオプションの &lt;code&gt;salt&lt;/code&gt; 引数を使用できます。ソルトを使用すると、ソルトと&lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; の&lt;/a&gt;両方が署名ハッシュ関数にシードされます。</target>
        </trans-unit>
        <trans-unit id="0bfd8f75b46ff74579ca2af7a7939f691c4a818d" translate="yes" xml:space="preserve">
          <source>If you do override this method, you must return the value of the attribute at the end. You should also update the model&amp;rsquo;s attribute if you make any changes to the value so that code holding references to the model will always see the correct value.</source>
          <target state="translated">このメソッドをオーバーライドする場合は、最後に属性の値を返す必要があります。また、値を変更する場合はモデルの属性を更新して、モデルへの参照を保持するコードが常に正しい値を参照できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="3bc531fc3e6fe0dda101c4233233899fb5df0175" translate="yes" xml:space="preserve">
          <source>If you do want to allow Django to manage the table&amp;rsquo;s lifecycle, you&amp;rsquo;ll need to change the &lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed&lt;/code&gt;&lt;/a&gt; option above to &lt;code&gt;True&lt;/code&gt; (or remove it because &lt;code&gt;True&lt;/code&gt; is its default value).</source>
          <target state="translated">Djangoがテーブルのライフサイクルを管理することを許可する場合は、上記の&lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed&lt;/code&gt; &lt;/a&gt;オプションを &lt;code&gt;True&lt;/code&gt; に変更する必要があります（または、 &lt;code&gt;True&lt;/code&gt; がデフォルト値なので削除します）。</target>
        </trans-unit>
        <trans-unit id="94bbf9a3b61ed7ba431cfe4c7c55a2f5b58d406a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have &lt;code&gt;pip&lt;/code&gt;, follow the &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;installation instructions&lt;/a&gt; to install it.</source>
          <target state="translated">&lt;code&gt;pip&lt;/code&gt; がない場合は、&lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;インストール手順に従って&lt;/a&gt;インストールしてください。</target>
        </trans-unit>
        <trans-unit id="83b4541d75cf80e630fb9cb0eae0f6dcce396113" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have access to the request object, you can use the &lt;code&gt;get_current()&lt;/code&gt; method of the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; model&amp;rsquo;s manager. You should then ensure that your settings file does contain the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting. This example is equivalent to the previous one:</source>
          <target state="translated">リクエストオブジェクトにアクセスできない場合は、&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;モデルのマネージャーの &lt;code&gt;get_current()&lt;/code&gt; メソッドを使用できます。次に、設定ファイルに&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;設定が含まれていることを確認する必要があります。この例は、前の例と同等です。</target>
        </trans-unit>
        <trans-unit id="6e6f1ebd340eb9d605be9c4db45ebb236fd2e050" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have the &lt;code&gt;gettext&lt;/code&gt; utilities installed, &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; will create empty files. If that&amp;rsquo;s the case, either install the &lt;code&gt;gettext&lt;/code&gt; utilities or copy the English message file (&lt;code&gt;locale/en/LC_MESSAGES/django.po&lt;/code&gt;) if available and use it as a starting point, which is an empty translation file.</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; ユーティリティがインストールされていない場合、&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt;は空のファイルを作成します。その場合は、 &lt;code&gt;gettext&lt;/code&gt; ユーティリティをインストールするか、利用可能な場合は英語のメッセージファイル（ &lt;code&gt;locale/en/LC_MESSAGES/django.po&lt;/code&gt; ）をコピーして、空の翻訳ファイルである開始点として使用してください。</target>
        </trans-unit>
        <trans-unit id="4f1d2a7a739cbcb4a30351e90054953707bb1564" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t include the &lt;a href=&quot;#django.contrib.auth.models.PermissionsMixin&quot;&gt;&lt;code&gt;PermissionsMixin&lt;/code&gt;&lt;/a&gt;, you must ensure you don&amp;rsquo;t invoke the permissions methods on &lt;code&gt;ModelBackend&lt;/code&gt;. &lt;code&gt;ModelBackend&lt;/code&gt; assumes that certain fields are available on your user model. If your user model doesn&amp;rsquo;t provide those fields, you&amp;rsquo;ll receive database errors when you check permissions.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.PermissionsMixin&quot;&gt; &lt;code&gt;PermissionsMixin&lt;/code&gt; を&lt;/a&gt;含めない場合は、 &lt;code&gt;ModelBackend&lt;/code&gt; で権限メソッドを呼び出さないようにする必要があります。 &lt;code&gt;ModelBackend&lt;/code&gt; は、特定のフィールドがユーザーモデルで利用可能であることを前提としています。ユーザーモデルでこれらのフィールドが提供されていない場合、権限を確認するとデータベースエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="35899ce1414f3555035a9788cf172f76ca6773ef" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t like the long &lt;code&gt;gettext_lazy&lt;/code&gt; name, you can alias it as &lt;code&gt;_&lt;/code&gt; (underscore), like so:</source>
          <target state="translated">&lt;code&gt;gettext_lazy&lt;/code&gt; の長い名前が気に入らない場合は、次のように &lt;code&gt;_&lt;/code&gt; （アンダースコア）としてエイリアスできます。</target>
        </trans-unit>
        <trans-unit id="e7c2f2ae002997f7ed67a2217c27f8708bf96ef6" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t need to have the human-readable names translated, you can have them inferred from the member name (replacing underscores with spaces and using title-case):</source>
          <target state="translated">人間が読める形式の名前を翻訳する必要がない場合は、メンバー名から推測させることができます（アンダースコアをスペースに置き換え、タイトルケースを使用）：</target>
        </trans-unit>
        <trans-unit id="8611658ee88ea0ad3dcc2ed7a1a97af6dae4a361" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t pass any values to &lt;code&gt;values_list()&lt;/code&gt;, it will return all the fields in the model, in the order they were declared.</source>
          <target state="translated">&lt;code&gt;values_list()&lt;/code&gt; に値を渡さない場合、モデル内のすべてのフィールドが宣言された順序で返されます。</target>
        </trans-unit>
        <trans-unit id="857e12793ad461caf04fff1ba581da785c3a5bcb" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t provide a lookup type &amp;ndash; that is, if your keyword argument doesn&amp;rsquo;t contain a double underscore &amp;ndash; the lookup type is assumed to be &lt;code&gt;exact&lt;/code&gt;.</source>
          <target state="translated">ルックアップタイプを指定しない場合、つまりキーワード引数に二重下線が含まれていない場合、ルックアップタイプは &lt;code&gt;exact&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="b49754202789d5dcf7dd5093a036116cfc0b7e7b" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t provide a value for &lt;code&gt;content_type&lt;/code&gt;, the values in &lt;code&gt;data&lt;/code&gt; will be transmitted with a content type of &lt;em&gt;multipart/form-data&lt;/em&gt;. In this case, the key-value pairs in &lt;code&gt;data&lt;/code&gt; will be encoded as a multipart message and used to create the POST data payload.</source>
          <target state="translated">&lt;code&gt;content_type&lt;/code&gt; に値を指定しない場合、 &lt;code&gt;data&lt;/code&gt; 内の値は&lt;em&gt;multipart / form-dataの&lt;/em&gt;コンテンツタイプで送信され&lt;em&gt;ます&lt;/em&gt;。この場合、 &lt;code&gt;data&lt;/code&gt; キーと値のペアはマルチパートメッセージとしてエンコードされ、POSTデータペイロードの作成に使用されます。</target>
        </trans-unit>
        <trans-unit id="dd179816ea4797c0c27e26002186e53c76cd44e3" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; and don&amp;rsquo;t call &lt;code&gt;configure()&lt;/code&gt;, Django will raise an &lt;code&gt;ImportError&lt;/code&gt; exception the first time a setting is accessed.</source>
          <target state="translated">&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; を設定せず、 &lt;code&gt;configure()&lt;/code&gt; を呼び出さない場合、Djangoは設定に初めてアクセスしたときに &lt;code&gt;ImportError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="6d28696ece852d234602878e925455bc5844a029" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;code&gt;list_display&lt;/code&gt;, the admin site will display a single column that displays the &lt;code&gt;__str__()&lt;/code&gt; representation of each object.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; を設定しない場合、管理サイトは各オブジェクトの &lt;code&gt;__str__()&lt;/code&gt; 表現を表示する単一の列を表示します。</target>
        </trans-unit>
        <trans-unit id="a163d2bcd9e6db7c5ea4d04d3672fd598949d73a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; for any fields in your model, Django will automatically add an &lt;a href=&quot;../../ref/models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; to hold the primary key, so you don&amp;rsquo;t need to set &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; on any of your fields unless you want to override the default primary-key behavior. For more, see &lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">モデルのフィールドに&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt;を指定しない場合、Djangoは自動的に&lt;a href=&quot;../../ref/models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt;を追加して主キーを保持します。そのため、オーバーライドする必要がない限り、フィールドに&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt;を設定する必要はありません。デフォルトの主キー動作。詳しくは、&lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;自動主キーフィールドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="590c6fe5a79ddb6a0fb543209eff8fe3de9cd579" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;code&gt;primary_key=True&lt;/code&gt; for any field in your model, Django will automatically add an &lt;a href=&quot;#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; to hold the primary key, so you don&amp;rsquo;t need to set &lt;code&gt;primary_key=True&lt;/code&gt; on any of your fields unless you want to override the default primary-key behavior. For more, see &lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">モデルのフィールドに &lt;code&gt;primary_key=True&lt;/code&gt; を指定しない場合、Djangoは自動的に&lt;a href=&quot;#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;を追加して主キーを保持します。そのため、オーバーライドする必要がない限り、フィールドに &lt;code&gt;primary_key=True&lt;/code&gt; を設定する必要はありません。デフォルトの主キー動作。詳しくは、&lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;自動主キーフィールドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="04c0cebe040a5a95be05e16a67b332d448a4cdf2" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;code&gt;using&lt;/code&gt;, the &lt;code&gt;save()&lt;/code&gt; method will save into the default database allocated by the routers.</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt; を指定しない場合、 &lt;code&gt;save()&lt;/code&gt; メソッドはルーターによって割り当てられたデフォルトのデータベースに保存します。</target>
        </trans-unit>
        <trans-unit id="538f16b988998147ff60490597be28bc48eafdda" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by &lt;code&gt;'_set'&lt;/code&gt;, just as it normally would be if you&amp;rsquo;d declared the field directly on the child class. For example, in the above code, if the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute was omitted, the reverse name for the &lt;code&gt;m2m&lt;/code&gt; field would be &lt;code&gt;childa_set&lt;/code&gt; in the &lt;code&gt;ChildA&lt;/code&gt; case and &lt;code&gt;childb_set&lt;/code&gt; for the &lt;code&gt;ChildB&lt;/code&gt; field.</source>
          <target state="translated">抽象基本クラスのフィールドに&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;属性を指定しない場合、フィールドを直接宣言した場合と同様に、デフォルトの逆の名前は、子クラスの名前の後に &lt;code&gt;'_set'&lt;/code&gt; が続きます。子クラスで。たとえば、上記のコードでは、&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; の&lt;/a&gt;属性を省略した、逆流名 &lt;code&gt;m2m&lt;/code&gt; フィールドは次のようになり &lt;code&gt;childa_set&lt;/code&gt; で &lt;code&gt;ChildA&lt;/code&gt; の場合と &lt;code&gt;childb_set&lt;/code&gt; ため &lt;code&gt;ChildB&lt;/code&gt; のフィールド。</target>
        </trans-unit>
        <trans-unit id="d339100c909e90a9e5e2bd7aa909352403fa7c4f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify an explicit &lt;code&gt;through&lt;/code&gt; model, there is still an implicit &lt;code&gt;through&lt;/code&gt; model class you can use to directly access the table created to hold the association. It has three fields to link the models.</source>
          <target state="translated">明示的な &lt;code&gt;through&lt;/code&gt; モデルを指定しない場合でも、関連付けを保持するために作成されたテーブルに直接アクセスするために使用できる暗黙の &lt;code&gt;through&lt;/code&gt; モデルクラスがあります。モデルをリンクする3つのフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="666775cf1efa55d8c53fada8a23701a9987dd988" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available.</source>
          <target state="translated">プロキシモデルでモデルマネージャを指定しない場合、モデルの親からマネージャを継承します。プロキシモデルでマネージャを定義すると、それがデフォルトになりますが、親クラスで定義されたマネージャは引き続き使用できます。</target>
        </trans-unit>
        <trans-unit id="2831dc2c926cb081c9cc4a7a2bc6243fa61db6a9" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify routing directions for the database cache model, the cache backend will use the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">データベースキャッシュモデルのルーティング方向を指定しない場合、キャッシュバックエンドは &lt;code&gt;default&lt;/code&gt; データベースを使用します。</target>
        </trans-unit>
        <trans-unit id="fd4f5afea03a0462ac45abaffd1965ddce74ce84" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want any ordering to be applied to a query, not even the default ordering, call &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; with no parameters.</source>
          <target state="translated">クエリに順序付けを適用したくない場合、デフォルトの順序付けも&lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt;ない場合は、パラメーターなしでorder_by（）を呼び出します。</target>
        </trans-unit>
        <trans-unit id="02f361b8fc537e98dc07890f9bf542dd0f12b07f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want data to be auto-escaped, on a per-site, per-template level or per-variable level, you can turn it off in several ways.</source>
          <target state="translated">サイトごと、テンプレートごと、または変数ごとのレベルでデータを自動エスケープさせたくない場合は、いくつかの方法でオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="10b519cb1d07a83a7e8a3c4a687450cc5ea4bc3e" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want every application to be synchronized onto a particular database, you can define a &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;database router&lt;/a&gt; that implements a policy constraining the availability of particular models.</source>
          <target state="translated">すべてのアプリケーションを特定のデータベースに同期させたくない場合は、特定のモデルの可用性を制限するポリシーを実装する&lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;データベースルーター&lt;/a&gt;を定義できます。</target>
        </trans-unit>
        <trans-unit id="35c4fdb0cd2c686ba39701ab3494c7c292bcb631" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to configure logging at all (or you want to manually configure logging using your own approach), you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;. This will disable the configuration process for &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django&amp;rsquo;s default logging&lt;/a&gt;. Here&amp;rsquo;s an example that disables Django&amp;rsquo;s logging configuration and then manually configures logging:</source>
          <target state="translated">ロギングをまったく構成しない場合（または独自のアプローチを使用して手動でロギングを構成する場合）、&lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;None&lt;/code&gt; に設定できます。これにより、&lt;a href=&quot;#default-logging-configuration&quot;&gt;Djangoのデフォルトのロギングの&lt;/a&gt;設定プロセスが無効になります。Djangoのログ設定を無効にしてから、手動でログを設定する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="77c86f64e5416c16d57ada9152596773e6ea1cc7" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use &lt;code&gt;icontains&lt;/code&gt; as the lookup, you can use any lookup by appending it the field. For example, you could use &lt;a href=&quot;../../models/querysets#std:fieldlookup-exact&quot;&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/a&gt; by setting &lt;code&gt;search_fields&lt;/code&gt; to &lt;code&gt;['first_name__exact']&lt;/code&gt;.</source>
          <target state="translated">ルックアップとして &lt;code&gt;icontains&lt;/code&gt; を使用したくない場合は、フィールドを追加することで任意のルックアップを使用できます。たとえば、 &lt;code&gt;search_fields&lt;/code&gt; を &lt;code&gt;['first_name__exact']&lt;/code&gt; に設定することにより、&lt;a href=&quot;../../models/querysets#std:fieldlookup-exact&quot;&gt; &lt;code&gt;exact&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="31395295db9a85690ee46840f48259811129865d" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use Python&amp;rsquo;s dictConfig format to configure your logger, you can specify your own configuration scheme.</source>
          <target state="translated">PythonのdictConfig形式を使用してロガーを構成したくない場合は、独自の構成スキームを指定できます。</target>
        </trans-unit>
        <trans-unit id="515cdb51845c22c1192ff3cb9088b0aae43b5f38" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use messages, you can remove &lt;code&gt;'django.contrib.messages'&lt;/code&gt; from your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;MessageMiddleware&lt;/code&gt; line from &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;messages&lt;/code&gt; context processor from &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メッセージを使用したくない場合は、 &lt;code&gt;'django.contrib.messages'&lt;/code&gt; &lt;code&gt;MessageMiddleware&lt;/code&gt; 」を&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;から削除し、MessageMiddleware行を&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;から削除し、 &lt;code&gt;messages&lt;/code&gt; コンテキストプロセッサを&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;から削除できます。</target>
        </trans-unit>
        <trans-unit id="9f7e47131b63bc56e18f6396512e77f9352c9650" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use sessions, you might as well remove the &lt;code&gt;SessionMiddleware&lt;/code&gt; line from &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; from your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;ll save you a small bit of overhead.</source>
          <target state="translated">あなたがセッションを使用したくない場合は、同様に除去することがあります &lt;code&gt;SessionMiddleware&lt;/code&gt; ののからのラインを&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; あなたから&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;。それはあなたに少しのオーバーヘッドを節約します。</target>
        </trans-unit>
        <trans-unit id="9b1a1786e7b1cf25c6aacb2f5b78f4da284e5c48" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use the built-in views, but want the convenience of not having to write forms for this functionality, the authentication system provides several built-in forms located in &lt;a href=&quot;#module-django.contrib.auth.forms&quot;&gt;&lt;code&gt;django.contrib.auth.forms&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">組み込みビューを使用したくないが、この機能のフォームを作成する必要がないという利便性が必要な場合、認証システムは&lt;a href=&quot;#module-django.contrib.auth.forms&quot;&gt; &lt;code&gt;django.contrib.auth.forms&lt;/code&gt; に&lt;/a&gt;あるいくつかの組み込みフォームを提供します。</target>
        </trans-unit>
        <trans-unit id="5c568e3de4c1c7c6a2712e65c1fa4112cf06d36a" translate="yes" xml:space="preserve">
          <source>If you downloaded the &lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt; data earlier in the tutorial, then you can determine its path using Python&amp;rsquo;s built-in &lt;code&gt;os&lt;/code&gt; module:</source>
          <target state="translated">チュートリアルの前半で&lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt;データをダウンロードした場合、Pythonの組み込み &lt;code&gt;os&lt;/code&gt; モジュールを使用してそのパスを決定できます。</target>
        </trans-unit>
        <trans-unit id="455d07668f86b3453aef324fdb20b370ef36fb11" translate="yes" xml:space="preserve">
          <source>If you enable &lt;code&gt;redirect_authenticated_user&lt;/code&gt;, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this &amp;ldquo;&lt;a href=&quot;https://robinlinus.github.io/socialmedia-leak/&quot;&gt;social media fingerprinting&lt;/a&gt;&amp;rdquo; information leakage, host all images and your favicon on a separate domain.</source>
          <target state="translated">&lt;code&gt;redirect_authenticated_user&lt;/code&gt; を有効にすると、他のWebサイトは、Webサイト上の画像ファイルへのリダイレクトURLを要求することにより、訪問者がサイトで認証されているかどうかを判断できます。この「&lt;a href=&quot;https://robinlinus.github.io/socialmedia-leak/&quot;&gt;ソーシャルメディアのフィンガープリント&lt;/a&gt;」情報漏えいを回避するには、すべての画像とファビコンを別のドメインでホストします。</target>
        </trans-unit>
        <trans-unit id="6de81e981c118fcef157137194f59e4a18089f15" translate="yes" xml:space="preserve">
          <source>If you enable the &lt;a href=&quot;../../ref/templates/api#django.template.context_processors.i18n&quot;&gt;&lt;code&gt;django.template.context_processors.i18n&lt;/code&gt;&lt;/a&gt; context processor, then each &lt;code&gt;RequestContext&lt;/code&gt; will have access to &lt;code&gt;LANGUAGES&lt;/code&gt;, &lt;code&gt;LANGUAGE_CODE&lt;/code&gt;, and &lt;code&gt;LANGUAGE_BIDI&lt;/code&gt; as defined above.</source>
          <target state="translated">&lt;a href=&quot;../../ref/templates/api#django.template.context_processors.i18n&quot;&gt; &lt;code&gt;django.template.context_processors.i18n&lt;/code&gt; &lt;/a&gt;コンテキストプロセッサを有効にすると、各 &lt;code&gt;RequestContext&lt;/code&gt; は、上で定義した &lt;code&gt;LANGUAGES&lt;/code&gt; 、 &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; 、および &lt;code&gt;LANGUAGE_BIDI&lt;/code&gt; にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="729e00760630570ad607e0e6587465fb4412384e" translate="yes" xml:space="preserve">
          <source>If you enable this and need to send the value of the CSRF token with an AJAX request, your JavaScript must pull the value &lt;a href=&quot;csrf#acquiring-csrf-token-from-html&quot;&gt;from a hidden CSRF token form input&lt;/a&gt; instead of &lt;a href=&quot;csrf#acquiring-csrf-token-from-cookie&quot;&gt;from the cookie&lt;/a&gt;.</source>
          <target state="translated">これを有効にし、AJAXリクエストでCSRFトークンの値を送信する必要がある場合、JavaScript &lt;a href=&quot;csrf#acquiring-csrf-token-from-cookie&quot;&gt;はCookieからでは&lt;/a&gt;なく&lt;a href=&quot;csrf#acquiring-csrf-token-from-html&quot;&gt;、非表示のCSRFトークンフォーム入力から&lt;/a&gt;値をプルする必要があります。</target>
        </trans-unit>
        <trans-unit id="eecda653f4341e8484e3844f08cb3debaa15b75a" translate="yes" xml:space="preserve">
          <source>If you enable this option and there is concurrent access to the async-unsafe parts of Django, you may suffer data loss or corruption. Be very careful and do not use this in production environments.</source>
          <target state="translated">このオプションを有効にして、Django の非同期で安全でない部分への同時アクセスがある場合、データの損失や破損が発生する可能性があります。十分に注意して、本番環境では使用しないでください。</target>
        </trans-unit>
        <trans-unit id="690f4bcf8a157bd61ea9244f015553c0c9c48320" translate="yes" xml:space="preserve">
          <source>If you encounter an error during the installation, your system might be missing a dependency for one or more of the Python packages. Consult the failing package&amp;rsquo;s documentation or search the Web with the error message that you encounter.</source>
          <target state="translated">インストール中にエラーが発生した場合、システムに1つ以上のPythonパッケージの依存関係がない可能性があります。失敗したパッケージのドキュメントを参照するか、発生したエラーメッセージでWebを検索してください。</target>
        </trans-unit>
        <trans-unit id="a6da4243a036aa29469a63cceb377bd8e3d4c0cc" translate="yes" xml:space="preserve">
          <source>If you encounter the following error when using &lt;code&gt;LayerMapping&lt;/code&gt; and MySQL:</source>
          <target state="translated">&lt;code&gt;LayerMapping&lt;/code&gt; とMySQL を使用しているときに次のエラーが発生した場合：</target>
        </trans-unit>
        <trans-unit id="388118dd7f5efca0821c54391ac838c186b2e0db" translate="yes" xml:space="preserve">
          <source>If you encounter this error, most likely your code is comparing these two things:</source>
          <target state="translated">このエラーが発生した場合、ほとんどの場合、あなたのコードがこれらの2つを比較している可能性があります。</target>
        </trans-unit>
        <trans-unit id="9980a2e684bd447360258377b3fadc41c30bff5f" translate="yes" xml:space="preserve">
          <source>If you encounter this error, you should fix your code to not call the offending code from an async context; instead, write your code that talks to async-unsafe in its own, synchronous function, and call that using &lt;code&gt;asgiref.sync.async_to_sync&lt;/code&gt;, or any other preferred way of running synchronous code in its own thread.</source>
          <target state="translated">このエラーが発生した場合は、非同期コンテキストから問題のコードを呼び出さないようにコードを修正する必要があります。代わりに、独自の同期関数でasync-unsafeと &lt;code&gt;asgiref.sync.async_to_sync&lt;/code&gt; コードを記述し、asgiref.sync.async_to_syncまたは独自のスレッドで同期コードを実行するその他の推奨される方法を使用して呼び出します。</target>
        </trans-unit>
        <trans-unit id="c318da5e64838ab0635a2445fb6173a140f25b28" translate="yes" xml:space="preserve">
          <source>If you expect a queryset to return one row, you can use &lt;code&gt;get()&lt;/code&gt; without any arguments to return the object for that row:</source>
          <target state="translated">クエリセットが1つの行を返すことが予想される場合は、引数なしで &lt;code&gt;get()&lt;/code&gt; を使用して、その行のオブジェクトを返すことができます。</target>
        </trans-unit>
        <trans-unit id="b49a74a0b115f2bc1bddecbe1ff4268a349bfe46" translate="yes" xml:space="preserve">
          <source>If you find yourself doing this often, you might consider creating a custom &lt;a href=&quot;../../howto/custom-template-tags#howto-custom-template-tags-inclusion-tags&quot;&gt;inclusion tag&lt;/a&gt;.</source>
          <target state="translated">これを頻繁に行う場合は、カスタム&lt;a href=&quot;../../howto/custom-template-tags#howto-custom-template-tags-inclusion-tags&quot;&gt;インクルージョンタグを&lt;/a&gt;作成することを検討してください。</target>
        </trans-unit>
        <trans-unit id="08b548542180a05ddc30c78ed125af341d51e6c9" translate="yes" xml:space="preserve">
          <source>If you find yourself duplicating content in a number of templates, it probably means you should move that content to a &lt;code&gt;{% block %}&lt;/code&gt; in a parent template.</source>
          <target state="translated">複数のテンプレートでコンテンツを複製している場合は、そのコンテンツを親テンプレートの &lt;code&gt;{% block %}&lt;/code&gt; に移動する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="ed5f5b63170617e447bc7e02390a27114c2912d5" translate="yes" xml:space="preserve">
          <source>If you find yourself needing a response class that Django doesn&amp;rsquo;t provide, you can create it with the help of &lt;a href=&quot;https://docs.python.org/3/library/http.html#http.HTTPStatus&quot;&gt;&lt;code&gt;http.HTTPStatus&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">Djangoが提供していない応答クラスが必要な場合は、&lt;a href=&quot;https://docs.python.org/3/library/http.html#http.HTTPStatus&quot;&gt; &lt;code&gt;http.HTTPStatus&lt;/code&gt; を&lt;/a&gt;使用して作成できます。例えば：</target>
        </trans-unit>
        <trans-unit id="a6acad9064fdbc3ea2b22b0bcfca87cc4ffc3ec7" translate="yes" xml:space="preserve">
          <source>If you find yourself needing to write an SQL query that is too complex for Django&amp;rsquo;s database-mapper to handle, you can fall back on writing SQL by hand. Django has a couple of options for writing raw SQL queries; see &lt;a href=&quot;sql&quot;&gt;Performing raw SQL queries&lt;/a&gt;.</source>
          <target state="translated">Djangoのデータベースマッパーで処理するには複雑すぎるSQLクエリを作成する必要がある場合は、手動でSQLを作成する必要があります。Djangoには生のSQLクエリを書くためのオプションがいくつかあります。&lt;a href=&quot;sql&quot;&gt;Raw SQLクエリの実行を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2ad1e5c64873a39591bff334fe500d215c29ad49" translate="yes" xml:space="preserve">
          <source>If you get a 404 when requesting &lt;code&gt;/books/acme/&lt;/code&gt;, check to ensure you actually have a Publisher with the name &amp;lsquo;ACME Publishing&amp;rsquo;. Generic views have an &lt;code&gt;allow_empty&lt;/code&gt; parameter for this case. See the &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based-views reference&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;/books/acme/&lt;/code&gt; をリクエストするときに404を取得する場合は、「ACME Publishing」という名前のパブリッシャーが実際にあることを確認してください。この場合、汎用ビューには &lt;code&gt;allow_empty&lt;/code&gt; パラメータがあります。詳細については、&lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;クラスベースビューのリファレンス&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7f7742ad36754cc74a4903fa526fb289e4d0d2b4" translate="yes" xml:space="preserve">
          <source>If you get a &lt;code&gt;UnicodeEncodeError&lt;/code&gt; when uploading files with file names that contain non-ASCII characters, make sure Apache is configured to accept non-ASCII file names:</source>
          <target state="translated">あなたが取得する場合 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; を非ASCII文字を含むファイル名を持つとき、アップロードファイルを、Apacheが非ASCIIファイル名を受け入れるように構成されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="7616ac6b8d7c3639812f35a6bc31e6c215afa7ae" translate="yes" xml:space="preserve">
          <source>If you get a &lt;code&gt;UnicodeEncodeError&lt;/code&gt; when uploading files with file names that contain non-ASCII characters, make sure uWSGI is configured to accept non-ASCII file names by adding this to your &lt;code&gt;uwsgi.ini&lt;/code&gt;:</source>
          <target state="translated">あなたが取得する場合 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; を非ASCII文字を含むファイル名を持つとき、アップロードファイルを、uWSGIはあなたにこれを追加することにより、非ASCIIファイル名を受け入れるように構成されていることを確認し &lt;code&gt;uwsgi.ini&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b3df4479a6ed3992aa239152c3ea200360f998d8" translate="yes" xml:space="preserve">
          <source>If you get an error page here, check that you&amp;rsquo;re going to &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http://localhost:8000/polls/&lt;/a&gt; and not &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;.</source>
          <target state="translated">ここでエラーページが表示される場合は、&lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http：// localhost：8000 /&lt;/a&gt;ではなく&lt;a href=&quot;http://localhost:8000/&quot;&gt;http：// localhost：8000 / &lt;/a&gt;polls /にアクセスすることを確認してください。</target>
        </trans-unit>
        <trans-unit id="069b129e53ef4f85715fcc43dda8a29afa775b23" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s a callable such as &lt;code&gt;dict&lt;/code&gt; (for an empty default) or a callable that returns a dict (such as a function). Incorrectly using &lt;code&gt;default={}&lt;/code&gt; creates a mutable default that is shared between all instances of &lt;code&gt;JSONField&lt;/code&gt;.</source>
          <target state="translated">フィールドに&lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; を指定&lt;/a&gt;する場合、それが &lt;code&gt;dict&lt;/code&gt; （空のデフォルトの場合）などの呼び出し可能オブジェクト、またはdict（関数など）を返す呼び出し可能オブジェクトであることを確認してください。 &lt;code&gt;default={}&lt;/code&gt; を誤って使用すると、 &lt;code&gt;JSONField&lt;/code&gt; のすべてのインスタンス間で共有される変更可能なデフォルトが作成されます。</target>
        </trans-unit>
        <trans-unit id="27410732e928525d8c647604e8926b8d0498bdf6" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s a callable such as &lt;code&gt;list&lt;/code&gt; (for an empty default) or a callable that returns a list (such as a function). Incorrectly using &lt;code&gt;default=[]&lt;/code&gt; creates a mutable default that is shared between all instances of &lt;code&gt;ArrayField&lt;/code&gt;.</source>
          <target state="translated">フィールドに&lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; を指定&lt;/a&gt;する場合は、それが &lt;code&gt;list&lt;/code&gt; などの呼び出し可能オブジェクト（空のデフォルトの場合）またはリストを返す呼び出し可能オブジェクト（関数など）であることを確認してください。 &lt;code&gt;default=[]&lt;/code&gt; を誤って使用すると、 &lt;code&gt;ArrayField&lt;/code&gt; のすべてのインスタンス間で共有される変更可能なデフォルトが作成されます。</target>
        </trans-unit>
        <trans-unit id="e341d486c0a6527afd40afba3bbf387252d13451" translate="yes" xml:space="preserve">
          <source>If you had a URL &lt;code&gt;/redirect_me/&lt;/code&gt; that redirected to &lt;code&gt;/next/&lt;/code&gt;, that redirected to &lt;code&gt;/final/&lt;/code&gt;, this is what you&amp;rsquo;d see:</source>
          <target state="translated">あなたが持っていた場合は、URL &lt;code&gt;/redirect_me/&lt;/code&gt; そのリダイレクトへ &lt;code&gt;/next/&lt;/code&gt; にリダイレクトすることを &lt;code&gt;/final/&lt;/code&gt; 、これはあなたが見たいものです。</target>
        </trans-unit>
        <trans-unit id="e18323392212f10a65b2daa3a1a10c84409a9d06" translate="yes" xml:space="preserve">
          <source>If you have a &amp;ldquo;rich&amp;rdquo; shell installed but want to force use of the &amp;ldquo;plain&amp;rdquo; Python interpreter, use &lt;code&gt;python&lt;/code&gt; as the interface name, like so:</source>
          <target state="translated">「リッチ」シェルがインストールされているが、「プレーン」なPythonインタープリターを強制的に使用したい場合は、次のようにインターフェース名として &lt;code&gt;python&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5d8adf9ea9a8d83fd0e8e6616d3cb139fe7ee8e2" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;GPSCoordinatesField&lt;/code&gt;, for example, and want to be able to access additional information about the coordinates in a template, this could be implemented as follows:</source>
          <target state="translated">あなたが持っている場合は &lt;code&gt;GPSCoordinatesField&lt;/code&gt; を、例えば、テンプレートの座標に関する追加情報にアクセスできるようにしたい、次のように、これを実施することができます。</target>
        </trans-unit>
        <trans-unit id="d61d684a756350ad6251ad220974916e91d79976" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;Place&lt;/code&gt; that is also a &lt;code&gt;Restaurant&lt;/code&gt;, you can get from the &lt;code&gt;Place&lt;/code&gt; object to the &lt;code&gt;Restaurant&lt;/code&gt; object by using the lowercase version of the model name:</source>
          <target state="translated">あなたが持っている場合は &lt;code&gt;Place&lt;/code&gt; もある &lt;code&gt;Restaurant&lt;/code&gt; 、あなたから得ることができる &lt;code&gt;Place&lt;/code&gt; にオブジェクト &lt;code&gt;Restaurant&lt;/code&gt; モデル名の小文字バージョンを使用して、オブジェクト：</target>
        </trans-unit>
        <trans-unit id="e101b1692181a5bd9c21e9a4901c5f705625b68f" translate="yes" xml:space="preserve">
          <source>If you have a background in programming, or if you&amp;rsquo;re used to languages which mix programming code directly into HTML, you&amp;rsquo;ll want to bear in mind that the Django template system is not simply Python embedded into HTML. This is by design: the template system is meant to express presentation, not program logic.</source>
          <target state="translated">プログラミングのバックグラウンドがある場合、またはプログラミングコードを直接HTMLに混在させる言語に慣れている場合は、Djangoテンプレートシステムが単にHTMLに埋め込まれたPythonではないことに注意してください。これは仕様によるものです。テンプレートシステムは、プレゼンテーションを表現するためのものであり、プログラムロジックではありません。</target>
        </trans-unit>
        <trans-unit id="59e1b17500d931bbf50d9ce94988d17d56a10749" translate="yes" xml:space="preserve">
          <source>If you have a bound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance and want to change the data somehow, or if you want to bind an unbound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance to some data, create another &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance. There is no way to change data in a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance. Once a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance has been created, you should consider its data immutable, whether it has data or not.</source>
          <target state="translated">バインドされた&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスがあり、何らかの方法でデータを変更する場合、またはバインドされていない&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスをデータにバインドする場合は、別の&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスを作成します。&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスのデータを変更する方法はありません。一度&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスが作成されている、あなたはそれがデータを持っているかどうかにかかわらず、そのデータの不変を検討すべきです。</target>
        </trans-unit>
        <trans-unit id="978ffd4b507205bec211ecb6fb44da5a6411e504" translate="yes" xml:space="preserve">
          <source>If you have a complex application, you may want to run tests automatically with every commit for the purposes of &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;continuous integration&lt;/a&gt;, so that quality control is itself - at least partially - automated.</source>
          <target state="translated">複雑なアプリケーションがある場合は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;継続的インテグレーション&lt;/a&gt;の目的で、コミットごとにテストを自動的に実行して、品質管理自体を（少なくとも部分的に）自動化することができます。</target>
        </trans-unit>
        <trans-unit id="e8cd69861c19aec280ff4c3da106598eae268983" translate="yes" xml:space="preserve">
          <source>If you have a different database and aren&amp;rsquo;t sure if it supports DDL transactions, check the &lt;code&gt;django.db.connection.features.can_rollback_ddl&lt;/code&gt; attribute.</source>
          <target state="translated">別のデータベースがあり、DDLトランザクションをサポートしているかどうかが不明な場合は、 &lt;code&gt;django.db.connection.features.can_rollback_ddl&lt;/code&gt; 属性を確認してください。</target>
        </trans-unit>
        <trans-unit id="5b7fdb666d2c7387f8e88756c3572339b99b1480" translate="yes" xml:space="preserve">
          <source>If you have a field called &lt;code&gt;foo&lt;/code&gt; that is a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, the default &lt;code&gt;values()&lt;/code&gt; call will return a dictionary key called &lt;code&gt;foo_id&lt;/code&gt;, since this is the name of the hidden model attribute that stores the actual value (the &lt;code&gt;foo&lt;/code&gt; attribute refers to the related model). When you are calling &lt;code&gt;values()&lt;/code&gt; and passing in field names, you can pass in either &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;foo_id&lt;/code&gt; and you will get back the same thing (the dictionary key will match the field name you passed in).</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;である &lt;code&gt;foo&lt;/code&gt; と呼ばれるフィールドがある場合、これは実際の値を格納する非表示モデル属性の名前であるため、デフォルトの &lt;code&gt;values()&lt;/code&gt; 呼び出しは &lt;code&gt;foo_id&lt;/code&gt; と呼ばれるディクショナリキーを返します（ &lt;code&gt;foo&lt;/code&gt; 属性は関連モデルを参照します） ）。 &lt;code&gt;values()&lt;/code&gt; を呼び出してフィールド名を渡す場合、 &lt;code&gt;foo&lt;/code&gt; または &lt;code&gt;foo_id&lt;/code&gt; のいずれかを渡すと、同じものが返されます（辞書キーは、渡したフィールド名と一致します）。</target>
        </trans-unit>
        <trans-unit id="16711bcb9d7d51d98a29ea22696d824133aa4a4b" translate="yes" xml:space="preserve">
          <source>If you have a field named &lt;code&gt;defaults&lt;/code&gt; and want to use it as an exact lookup in &lt;code&gt;get_or_create()&lt;/code&gt;, use &lt;code&gt;'defaults__exact'&lt;/code&gt;, like so:</source>
          <target state="translated">&lt;code&gt;defaults&lt;/code&gt; という名前のフィールドがあり、 &lt;code&gt;get_or_create()&lt;/code&gt; での正確なルックアップとして使用したい &lt;code&gt;'defaults__exact'&lt;/code&gt; 、次のように'defaults__exact'を使用します。</target>
        </trans-unit>
        <trans-unit id="d37c7ca73612e3f18e551c6e6e5ec5e6e3aab068" translate="yes" xml:space="preserve">
          <source>If you have a function that returns text and you want to be able to take lazy arguments while delaying their evaluation, you can use this decorator:</source>
          <target state="translated">テキストを返す関数があって、その評価を遅らせながら遅延引数を取れるようにしたい場合は、このデコレータを使うことができます。</target>
        </trans-unit>
        <trans-unit id="e0d31ad051cee43c03199fe35d1cfc46041814b9" translate="yes" xml:space="preserve">
          <source>If you have a model that is defined using an &lt;a href=&quot;db/models#abstract-base-classes&quot;&gt;abstract base class&lt;/a&gt;, you don&amp;rsquo;t have to do anything special to serialize that model. Call the serializer on the object (or objects) that you want to serialize, and the output will be a complete representation of the serialized object.</source>
          <target state="translated">&lt;a href=&quot;db/models#abstract-base-classes&quot;&gt;抽象基本クラス&lt;/a&gt;を使用して定義されたモデルがある場合、そのモデルをシリアル化するために特別なことを行う必要はありません。シリアル化するオブジェクト（1つまたは複数）でシリアライザを呼び出すと、出力はシリアル化されたオブジェクトの完全な表現になります。</target>
        </trans-unit>
        <trans-unit id="e6770af4d44284b72b625f55e0971a26874c906c" translate="yes" xml:space="preserve">
          <source>If you have a set of common decorators used in several places, you can define a list or tuple of decorators and use this instead of invoking &lt;code&gt;method_decorator()&lt;/code&gt; multiple times. These two classes are equivalent:</source>
          <target state="translated">複数の場所で使用される共通のデコレーターのセットがある場合は、デコレーターのリストまたはタプルを定義し、 &lt;code&gt;method_decorator()&lt;/code&gt; を複数回呼び出す代わりにこれを使用できます。これら2つのクラスは同等です。</target>
        </trans-unit>
        <trans-unit id="79b825e9cb0e34e49d16acfbe8a24478320f86a0" translate="yes" xml:space="preserve">
          <source>If you have an authenticated user you want to attach to the current session - this is done with a &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">現在のセッションにアタッチしたい認証済みユーザーがいる場合、これは&lt;a href=&quot;#django.contrib.auth.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt;関数で行われます。</target>
        </trans-unit>
        <trans-unit id="026d9fcdfc9b1f7521fa03bbe9b4114c2b909148" translate="yes" xml:space="preserve">
          <source>If you have an existing database with an older, weak hash such as MD5 or SHA1, you might want to upgrade those hashes yourself instead of waiting for the upgrade to happen when a user logs in (which may never happen if a user doesn&amp;rsquo;t return to your site). In this case, you can use a &amp;ldquo;wrapped&amp;rdquo; password hasher.</source>
          <target state="translated">MD5やSHA1などの古い、弱いハッシュを持つ既存のデータベースがある場合は、ユーザーがログインしたときにアップグレードが行われるのを待つのではなく、自分でそれらのハッシュをアップグレードすることをお勧めします（ユーザーがログインしない場合は起こり得ない）サイトに戻ります）。この場合、「ラップされた」パスワードハッシャーを使用できます。</target>
        </trans-unit>
        <trans-unit id="b86b91ddb2f98a42f4900d8c7c7782b7b091a39b" translate="yes" xml:space="preserve">
          <source>If you have an idea for functionality to include in &lt;code&gt;contrib&lt;/code&gt;, let us know! Code it up, and post it to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; mailing list.</source>
          <target state="translated">&lt;code&gt;contrib&lt;/code&gt; に含める機能のアイデアがある場合は、お知らせください！コーディングして、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt;メーリングリストに投稿してください。</target>
        </trans-unit>
        <trans-unit id="19c3b5495362847755cae62d7b220043549d25b3" translate="yes" xml:space="preserve">
          <source>If you have an iterable of model instances, you can prefetch related attributes on those instances using the &lt;a href=&quot;#django.db.models.prefetch_related_objects&quot;&gt;&lt;code&gt;prefetch_related_objects()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">モデルインスタンスの反復可能オブジェクトがある場合は、&lt;a href=&quot;#django.db.models.prefetch_related_objects&quot;&gt; &lt;code&gt;prefetch_related_objects()&lt;/code&gt; &lt;/a&gt;関数を使用して、それらのインスタンスの関連属性をプリフェッチできます。</target>
        </trans-unit>
        <trans-unit id="37904d083a93c2edd3d70d07fdce8e8357fcda8e" translate="yes" xml:space="preserve">
          <source>If you have any problems, please see the troubleshooting section below for suggestions and solutions.</source>
          <target state="translated">何か問題がある場合は、以下のトラブルシューティングのセクションを参照して、提案と解決策を確認してください。</target>
        </trans-unit>
        <trans-unit id="ec0d4ee5c753dc222b01df5bf0c69c8624af1347" translate="yes" xml:space="preserve">
          <source>If you have app and project templates directories that both contain overrides, the default Django template loader will try to load the template from the project-level directory first. In other words, &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; is searched before &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アプリテンプレートとプロジェクトテンプレートディレクトリの両方にオーバーライドが含まれている場合、デフォルトのDjangoテンプレートローダーは、最初にプロジェクトレベルのディレクトリからテンプレートをロードしようとします。つまり、&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; の&lt;/a&gt;前に検索されます。</target>
        </trans-unit>
        <trans-unit id="08d9347c3a2e9dd49fb8cc1c6728cc1b9165b3fb" translate="yes" xml:space="preserve">
          <source>If you have created a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method, you don&amp;rsquo;t need to worry about &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt;&lt;code&gt;get_internal_type()&lt;/code&gt;&lt;/a&gt; &amp;ndash; it won&amp;rsquo;t be used much. Sometimes, though, your database storage is similar in type to some other field, so you can use that other field&amp;rsquo;s logic to create the right column.</source>
          <target state="translated">あなたが作成している場合&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt;メソッドを、あなたが心配する必要はありません&lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt; &lt;code&gt;get_internal_type()&lt;/code&gt; &lt;/a&gt; -それはあまり使用されません。ただし、データベースストレージのタイプが他のフィールドと似ている場合があるので、他のフィールドのロジックを使用して正しい列を作成できます。</target>
        </trans-unit>
        <trans-unit id="b5976cd51ea3df04ddca3661787303e1989a9bdd" translate="yes" xml:space="preserve">
          <source>If you have customized authentication (see &lt;a href=&quot;customizing&quot;&gt;Customizing Authentication&lt;/a&gt;) you can use a custom authentication form by setting the &lt;code&gt;authentication_form&lt;/code&gt; attribute. This form must accept a &lt;code&gt;request&lt;/code&gt; keyword argument in its &lt;code&gt;__init__()&lt;/code&gt; method and provide a &lt;code&gt;get_user()&lt;/code&gt; method which returns the authenticated user object (this method is only ever called after successful form validation).</source>
          <target state="translated">認証をカスタマイズした場合（「&lt;a href=&quot;customizing&quot;&gt;認証のカスタマイズ&lt;/a&gt;」を参照）、 &lt;code&gt;authentication_form&lt;/code&gt; 属性を設定することにより、カスタム認証フォームを使用できます。このフォームは、 &lt;code&gt;__init__()&lt;/code&gt; &lt;code&gt;get_user()&lt;/code&gt; __（）メソッドで &lt;code&gt;request&lt;/code&gt; キーワード引数を受け入れ、認証されたユーザーオブジェクトを返すget_user（）メソッドを提供する必要があります（このメソッドは、フォームの検証が成功した後にのみ呼び出されます）。</target>
        </trans-unit>
        <trans-unit id="e49e350f7aca08322a1d5e22652de39cfc978ac8" translate="yes" xml:space="preserve">
          <source>If you have difficulty finding where the Django source files are located on your system, run the following command:</source>
          <target state="translated">Django のソースファイルがシステム上のどこにあるかわからない場合は、以下のコマンドを実行してください。</target>
        </trans-unit>
        <trans-unit id="2ed6656727786d8c5a9c10718cdb288f20ac8eaf" translate="yes" xml:space="preserve">
          <source>If you have installed a &lt;a href=&quot;../../../topics/auth/customizing#auth-custom-user&quot;&gt;custom user model&lt;/a&gt; and want to use this default auth handler, it must support an &lt;code&gt;is_active&lt;/code&gt; attribute. If you want to use group based authorization, your custom user must have a relation named &amp;lsquo;groups&amp;rsquo;, referring to a related object that has a &amp;lsquo;name&amp;rsquo; field. You can also specify your own custom mod_wsgi auth handler if your custom cannot conform to these requirements.</source>
          <target state="translated">あなたがインストールしている場合は&lt;a href=&quot;../../../topics/auth/customizing#auth-custom-user&quot;&gt;、カスタム・ユーザー・モデルを&lt;/a&gt;して、このデフォルト認証ハンドラを使用したい、それがサポートしている必要があります &lt;code&gt;is_active&lt;/code&gt; 属性を。グループベースの承認を使用する場合、カスタムユーザーには、「names」フィールドを持つ関連オブジェクトを参照する「groups」という名前の関係が必要です。カスタムがこれらの要件に準拠できない場合は、独自のカスタムmod_wsgi認証ハンドラーを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="2f1712a605e1df12222b17db97359a92359d57b3" translate="yes" xml:space="preserve">
          <source>If you have multiple &lt;code&gt;Form&lt;/code&gt; classes that share fields, you can use subclassing to remove redundancy.</source>
          <target state="translated">フィールドを共有する複数の &lt;code&gt;Form&lt;/code&gt; クラスがある場合、サブクラス化を使用して冗長性を削除できます。</target>
        </trans-unit>
        <trans-unit id="c6aa2d211b2f44d42c468cde0eb6bc8be637e6dd" translate="yes" xml:space="preserve">
          <source>If you have multiple caches defined in &lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt;, Django will use the default cache. To use another cache, set &lt;a href=&quot;../../ref/settings#std:setting-SESSION_CACHE_ALIAS&quot;&gt;&lt;code&gt;SESSION_CACHE_ALIAS&lt;/code&gt;&lt;/a&gt; to the name of that cache.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;で複数のキャッシュが定義されている場合、Djangoはデフォルトのキャッシュを使用します。別のキャッシュを使用するには、&lt;a href=&quot;../../ref/settings#std:setting-SESSION_CACHE_ALIAS&quot;&gt; &lt;code&gt;SESSION_CACHE_ALIAS&lt;/code&gt; &lt;/a&gt;をそのキャッシュの名前に設定します。</target>
        </trans-unit>
        <trans-unit id="0daeb88e4409e7fba4cbaee7d1c51bff9fbbe585" translate="yes" xml:space="preserve">
          <source>If you have test classes that cannot be run in parallel (e.g. because they share a common resource), you can use &lt;code&gt;django.test.testcases.SerializeMixin&lt;/code&gt; to run them sequentially. This mixin uses a filesystem &lt;code&gt;lockfile&lt;/code&gt;.</source>
          <target state="translated">並行して実行できないテストクラスがある場合（たとえば、共通のリソースを共有しているため）、 &lt;code&gt;django.test.testcases.SerializeMixin&lt;/code&gt; を使用して、それらを順次実行できます。このミックスインはファイルシステムの &lt;code&gt;lockfile&lt;/code&gt; ファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="69e118594fe6d021ccddfba860e486fc346e2e24" translate="yes" xml:space="preserve">
          <source>If you have test classes that cannot be run in parallel, you can use &lt;code&gt;SerializeMixin&lt;/code&gt; to run them sequentially. See &lt;a href=&quot;../topics/testing/advanced#topics-testing-enforce-run-sequentially&quot;&gt;Enforce running test classes sequentially&lt;/a&gt;.</source>
          <target state="translated">並行して実行できないテストクラスがある場合は、 &lt;code&gt;SerializeMixin&lt;/code&gt; を使用してそれらを順次実行できます。&lt;a href=&quot;../topics/testing/advanced#topics-testing-enforce-run-sequentially&quot;&gt;テストクラスを順次実行するを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="db6b634100bf984485aba1e1d164f951a1225a84" translate="yes" xml:space="preserve">
          <source>If you have the Django admin installed, you can also &lt;a href=&quot;#auth-admin&quot;&gt;create users interactively&lt;/a&gt;.</source>
          <target state="translated">Django管理者がインストールされている場合は、&lt;a href=&quot;#auth-admin&quot;&gt;ユーザーをインタラクティブに作成&lt;/a&gt;することもできます。</target>
        </trans-unit>
        <trans-unit id="2000ff382760e480cb9b499a00548bfca0c2d7fe" translate="yes" xml:space="preserve">
          <source>If you have the Django admin installed, you can also change user&amp;rsquo;s passwords on the &lt;a href=&quot;#auth-admin&quot;&gt;authentication system&amp;rsquo;s admin pages&lt;/a&gt;.</source>
          <target state="translated">Django管理者がインストールされている場合は、&lt;a href=&quot;#auth-admin&quot;&gt;認証システムの管理者ページで&lt;/a&gt;ユーザーのパスワードを変更することもできます。</target>
        </trans-unit>
        <trans-unit id="59e6b390f0fb4a292f006284bfad36ce56a1c450" translate="yes" xml:space="preserve">
          <source>If you have tried function based generic views in the past and found them lacking, you should not think of class-based generic views as a class-based equivalent, but rather as a fresh approach to solving the original problems that generic views were meant to solve.</source>
          <target state="translated">過去に関数ベースのジェネリック・ビューを試してみて、それが不足していることに気づいた場合、クラスベースのジェネリック・ビューをクラスベースの等価物と考えるのではなく、ジェネリック・ビューが解決しようとしていた本来の問題を解決するための新鮮なアプローチとして考えるべきです。</target>
        </trans-unit>
        <trans-unit id="efd9aa9b8fc35677ff19eb12feae61a2f1dd1243" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t added any extra options on top of the field you inherited from, then there&amp;rsquo;s no need to write a new &lt;code&gt;deconstruct()&lt;/code&gt; method. If, however, you&amp;rsquo;re changing the arguments passed in &lt;code&gt;__init__()&lt;/code&gt; (like we are in &lt;code&gt;HandField&lt;/code&gt;), you&amp;rsquo;ll need to supplement the values being passed.</source>
          <target state="translated">継承元のフィールドの上に追加のオプションを追加していない場合は、新しい &lt;code&gt;deconstruct()&lt;/code&gt; メソッドを作成する必要はありません。ただし、 &lt;code&gt;__init__()&lt;/code&gt; &lt;code&gt;HandField&lt;/code&gt; __（）で渡される引数を変更する場合（HandFieldの場合と同様）、渡される値を補足する必要があります。</target>
        </trans-unit>
        <trans-unit id="4ea2ba3519701ee1ea3735aa6135ecb00e08b0a0" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t recently completed Tutorials 1&amp;ndash;7, we encourage you to review these so that your example project matches the one described below.</source>
          <target state="translated">チュートリアル1〜7を最近完了していない場合は、これらを確認して、サンプルプロジェクトが下記のプロジェクトと一致するようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b16b0bccf0c08600a1fbaec81d987234f8ac3c71" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t set up backups for your database, do it right now!</source>
          <target state="translated">データベースのバックアップを設定していない場合は、今すぐ設定してください！</target>
        </trans-unit>
        <trans-unit id="3abc3fddfa394c8f2c33c40961d7aa2e45568252" translate="yes" xml:space="preserve">
          <source>If you implement &lt;code&gt;__init__&lt;/code&gt; in your subclass of &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;, you must call &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;__init__&lt;/code&gt;:</source>
          <target state="translated">あなたが実装する場合 &lt;code&gt;__init__&lt;/code&gt; のサブクラスで&lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt;、あなたが呼び出す必要があり&lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;__init__&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="a3b78e197955bcb146a1c23c5d00f08fdb545c8d" translate="yes" xml:space="preserve">
          <source>If you implement custom model fields that inherit from &lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; directly, are overriding &lt;a href=&quot;models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt;, or use &lt;a href=&quot;models/expressions#django.db.models.expressions.RawSQL&quot;&gt;&lt;code&gt;RawSQL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../topics/db/sql#django.db.models.Manager.raw&quot;&gt;&lt;code&gt;raw()&lt;/code&gt;&lt;/a&gt;, you should ensure that you perform appropriate typecasting.</source>
          <target state="translated">&lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;から直接継承するカスタムモデルフィールドを実装する場合、&lt;a href=&quot;models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; を&lt;/a&gt;オーバーライドする場合、または&lt;a href=&quot;models/expressions#django.db.models.expressions.RawSQL&quot;&gt; &lt;code&gt;RawSQL&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../topics/db/sql#django.db.models.Manager.raw&quot;&gt; &lt;code&gt;raw()&lt;/code&gt; &lt;/a&gt;を使用する場合は、適切な型キャストを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="4d14c28506b4a41e79a0a531c1100009cf8a5877" translate="yes" xml:space="preserve">
          <source>If you import models directly rather than using the historical models, your migrations &lt;em&gt;may work initially&lt;/em&gt; but will fail in the future when you try to re-run old migrations (commonly, when you set up a new installation and run through all the migrations to set up the database).</source>
          <target state="translated">履歴モデルを使用せずにモデルを直接インポートする場合、移行&lt;em&gt;は最初&lt;/em&gt;は機能する&lt;em&gt;可能性&lt;/em&gt;がありますが、古い移行を再実行しようとすると、通常は失敗します（通常、新しいインストールをセットアップし、すべての移行を実行して設定しますデータベースをアップします）。</target>
        </trans-unit>
        <trans-unit id="44070fbe89941700ca164927fd2839d802124e64" translate="yes" xml:space="preserve">
          <source>If you install your project&amp;rsquo;s Python dependencies inside a &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;, add the path to the virtualenv using &lt;code&gt;WSGIPythonHome&lt;/code&gt;. See the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtualenv guide&lt;/a&gt; for more details.</source>
          <target state="translated">あなたが内部のプロジェクトのPythonの依存関係をインストールした場合&lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenvを&lt;/a&gt;使用して、virtualenvののパスを追加し &lt;code&gt;WSGIPythonHome&lt;/code&gt; を。詳細については、&lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtualenvガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a74cb3689863414b53e2cc2ad45826c27f81e941" translate="yes" xml:space="preserve">
          <source>If you installed Django with &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;, you can use the &lt;code&gt;--upgrade&lt;/code&gt; or &lt;code&gt;-U&lt;/code&gt; flag:</source>
          <target state="translated">Djangoを&lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;でインストールした場合は、-- &lt;code&gt;--upgrade&lt;/code&gt; または &lt;code&gt;-U&lt;/code&gt; フラグを使用できます。</target>
        </trans-unit>
        <trans-unit id="0e1355dc1d54e62ec3be4d96bc279fa717ea1aa3" translate="yes" xml:space="preserve">
          <source>If you intend to allow users to upload files, you must ensure that the environment used to run Django is configured to work with non-ASCII file names. If your environment isn&amp;rsquo;t configured correctly, you&amp;rsquo;ll encounter &lt;code&gt;UnicodeEncodeError&lt;/code&gt; exceptions when saving files with file names that contain non-ASCII characters.</source>
          <target state="translated">ユーザーにファイルのアップロードを許可する場合は、Djangoの実行に使用される環境が非ASCIIファイル名で機能するように構成されていることを確認する必要があります。環境が正しく構成されていない場合、非ASCII文字を含むファイル名でファイルを保存すると、 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="4acb8b00d983476c1c0fae9d2bcb2eb3c71e63d5" translate="yes" xml:space="preserve">
          <source>If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight web server you can use for testing, so you won&amp;rsquo;t need to set up Apache until you&amp;rsquo;re ready to deploy Django in production.</source>
          <target state="translated">Djangoを試してみたいだけの場合は、次のセクションに進んでください。Djangoには、テストに使用できる軽量のWebサーバーが含まれているため、Djangoを本番環境にデプロイする準備ができるまで、Apacheを設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="3568f1bdadbf483dacd6fb9b4be3a20a4b3cc65b" translate="yes" xml:space="preserve">
          <source>If you just want to get some data from your tables into a serialized form, you could use the &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; management command.</source>
          <target state="translated">テーブルからシリアル化された形式にデータを取得するだけの場合は、&lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt;管理コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="4e09fa0bd8a3a147ea439259f86c751ca2fbfc03" translate="yes" xml:space="preserve">
          <source>If you just want to get started already (and nobody would blame you!), try taking a look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need patches&lt;/a&gt; and the &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that have patches which need improvement&lt;/a&gt;. If you&amp;rsquo;re familiar with writing tests, you can also look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need tests&lt;/a&gt;. Remember to follow the guidelines about claiming tickets that were mentioned in the link to Django&amp;rsquo;s documentation on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;claiming tickets and submitting patches&lt;/a&gt;.</source>
          <target state="translated">すでに始めたいだけの場合（そして誰もあなたを責めることはないでしょう！）、&lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;パッチが必要なイージーチケット&lt;/a&gt;と、改善が&lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;必要なパッチ&lt;/a&gt;があるイージーチケットのリストを見てみてください。テストの記述に慣れている場合は、&lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;テストが必要な簡単なチケット&lt;/a&gt;のリストも確認できます。チケットの&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;請求とパッチの提出&lt;/a&gt;に関するDjangoのドキュメントへのリンクに記載されているチケットの請求に関するガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="c50512e5b7b4d2917fd0ded7753af940b02ac0a6" translate="yes" xml:space="preserve">
          <source>If you know there is only one object that matches your query, you can use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; which returns the object directly:</source>
          <target state="translated">クエリに一致するオブジェクトが1つしかないことがわかっている場合は、&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、オブジェクトを直接返します。</target>
        </trans-unit>
        <trans-unit id="a4d46c64f50d662db0e36989441c746c4eb15547" translate="yes" xml:space="preserve">
          <source>If you know which models you&amp;rsquo;ll be using most often, you can also add a &amp;ldquo;reverse&amp;rdquo; generic relationship to enable an additional API. For example:</source>
          <target state="translated">最も頻繁に使用するモデルがわかっている場合は、「リバース」の一般的な関係を追加して、追加のAPIを有効にすることもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="c191fd40bd25e99c36f57ceff24ea08151258536" translate="yes" xml:space="preserve">
          <source>If you leave off the &lt;code&gt;name&lt;/code&gt; argument, as in the second example above, Django will use the function&amp;rsquo;s name as the filter name.</source>
          <target state="translated">上記の2番目の例のように &lt;code&gt;name&lt;/code&gt; 引数を省略した場合、Djangoは関数名をフィルター名として使用します。</target>
        </trans-unit>
        <trans-unit id="e8bf004d14c563eb22c00ca8e5526f83bb38a104" translate="yes" xml:space="preserve">
          <source>If you leave off the &lt;code&gt;name&lt;/code&gt; argument, as in the second example above, Django will use the function&amp;rsquo;s name as the tag name.</source>
          <target state="translated">あなたがオフのままにしておくと &lt;code&gt;name&lt;/code&gt; 引数を、上述の第2の例のように、Djangoは、タグ名として関数名を使用します。</target>
        </trans-unit>
        <trans-unit id="950469d51b06aaa88a367dde3845db6577c50567" translate="yes" xml:space="preserve">
          <source>If you like the widgets that the Django Admin application uses, feel free to use them in your own application! They&amp;rsquo;re all stored in &lt;code&gt;django.contrib.admin.widgets&lt;/code&gt;.</source>
          <target state="translated">Django管理アプリケーションが使用するウィジェットが気に入ったら、自分のアプリケーションで自由に使用してください！それらはすべて &lt;code&gt;django.contrib.admin.widgets&lt;/code&gt; に保存されています。</target>
        </trans-unit>
        <trans-unit id="338ebae0cd2defb4e2b46e3293b08157abaa3c2b" translate="yes" xml:space="preserve">
          <source>If you look at any change list in the admin, you&amp;rsquo;ll see this feature in action; Django ships with a &amp;ldquo;delete selected objects&amp;rdquo; action available to all models. For example, here&amp;rsquo;s the user module from Django&amp;rsquo;s built-in &lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; app:</source>
          <target state="translated">管理者の変更リストを見ると、この機能が動作していることがわかります。Djangoには、すべてのモデルで利用可能な「選択したオブジェクトの削除」アクションが付属しています。たとえば、次はDjangoの組み込み&lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt;アプリのユーザーモジュールです。</target>
        </trans-unit>
        <trans-unit id="563d1c2d9d163e085568958c9f2b6d9c96629a36" translate="yes" xml:space="preserve">
          <source>If you look carefully, you can see that the portion that was generated by &lt;code&gt;quote()&lt;/code&gt; in the second example was not double-quoted when passed to &lt;code&gt;iri_to_uri()&lt;/code&gt;. This is a very important and useful feature. It means that you can construct your IRI without worrying about whether it contains non-ASCII characters and then, right at the end, call &lt;code&gt;iri_to_uri()&lt;/code&gt; on the result.</source>
          <target state="translated">注意深く見ると、2番目の例で &lt;code&gt;quote()&lt;/code&gt; によって生成された部分が &lt;code&gt;iri_to_uri()&lt;/code&gt; に渡されたときに二重引用符で囲まれていないことがわかります。これは非常に重要で便利な機能です。つまり、ASCII以外の文字が含まれているかどうかを気にすることなくIRIを構築し、最後に、結果 &lt;code&gt;iri_to_uri()&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="fae37143701969595b56a1de835f003e68a717b5" translate="yes" xml:space="preserve">
          <source>If you manually render fields in the template, you can render &lt;code&gt;can_delete&lt;/code&gt; parameter with &lt;code&gt;{{ form.DELETE }}&lt;/code&gt;:</source>
          <target state="translated">テンプレートのフィールドを手動でレンダリングする場合、 &lt;code&gt;{{ form.DELETE }}&lt;/code&gt; を使用して &lt;code&gt;can_delete&lt;/code&gt; パラメータをレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="f75b2bb9e0e1faedcbcaf93a8d2cb2f193a634dc" translate="yes" xml:space="preserve">
          <source>If you meet this requirement, then substitute the &lt;code&gt;OSMGeoAdmin&lt;/code&gt; option class in your &lt;code&gt;admin.py&lt;/code&gt; file:</source>
          <target state="translated">この要件を満たしている場合は、 &lt;code&gt;admin.py&lt;/code&gt; ファイルの &lt;code&gt;OSMGeoAdmin&lt;/code&gt; オプションクラスを置き換えます。</target>
        </trans-unit>
        <trans-unit id="225bae64392f765fd429b21ea8ac02f57f4afb72" translate="yes" xml:space="preserve">
          <source>If you need an empty migration file to write your own &lt;code&gt;Operation&lt;/code&gt; objects into, use &lt;code&gt;python manage.py makemigrations --empty yourappname&lt;/code&gt;, but be aware that manually adding schema-altering operations can confuse the migration autodetector and make resulting runs of &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; output incorrect code.</source>
          <target state="translated">独自の &lt;code&gt;Operation&lt;/code&gt; オブジェクトを書き込むために空の移行ファイルが必要な場合は、 &lt;code&gt;python manage.py makemigrations --empty yourappname&lt;/code&gt; を使用してください。ただし、スキーマ変更操作を手動で追加すると、移行の自動検出機能が混乱し、&lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; の&lt;/a&gt;実行結果が誤ったコードになることがあります。 。</target>
        </trans-unit>
        <trans-unit id="c26240f024c2f3e478948f8f7fec8bbb42d821c0" translate="yes" xml:space="preserve">
          <source>If you need custom template loading or custom context object instantiation, create a &lt;code&gt;TemplateResponse&lt;/code&gt; subclass and assign it to &lt;code&gt;response_class&lt;/code&gt;.</source>
          <target state="translated">カスタムテンプレートの読み込みまたはカスタムコンテキストオブジェクトのインスタンス化が必要な場合は、 &lt;code&gt;TemplateResponse&lt;/code&gt; サブクラスを作成し、それを &lt;code&gt;response_class&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="d33ecf64697d7de63f58f86dbfaa4f84e060248a" translate="yes" xml:space="preserve">
          <source>If you need different precedence, you will need to use nested &lt;a href=&quot;#std:templatetag-if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules.</source>
          <target state="translated">別の優先順位が必要な場合は、ネストされた&lt;a href=&quot;#std:templatetag-if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;タグを使用する必要があります。優先順位のルールを知らない人のために、それはとにかく明確にするために時々それはより良いです。</target>
        </trans-unit>
        <trans-unit id="94aa71aa505c6a16108b61bb062ab6ada6bf5751" translate="yes" xml:space="preserve">
          <source>If you need more control, you can create your own authentication backend that inherits from &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; and override one or more of its attributes and methods.</source>
          <target state="translated">さらに制御が必要な場合は、&lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt;から継承する独自の認証バックエンドを作成し、その1つ以上の属性とメソッドをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="758aabbe668d354fb6f337c8ed3f754bf52e0550" translate="yes" xml:space="preserve">
          <source>If you need more control, you can create your own authentication backend that inherits from this class and override these attributes or methods:</source>
          <target state="translated">より多くの制御が必要な場合は、このクラスを継承した独自の認証バックエンドを作成し、これらの属性やメソッドをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="0e28d0fde6b118d6feed4accf2b47a636af43e24" translate="yes" xml:space="preserve">
          <source>If you need more fine-grained control, use a tuple (or list) as value for &lt;code&gt;list_select_related&lt;/code&gt;. Empty tuple will prevent Django from calling &lt;code&gt;select_related&lt;/code&gt; at all. Any other tuple will be passed directly to &lt;code&gt;select_related&lt;/code&gt; as parameters. For example:</source>
          <target state="translated">さらに細かい制御が必要な場合は、 &lt;code&gt;list_select_related&lt;/code&gt; の値としてタプル（またはリスト）を使用します。空のタプルは、Djangoが &lt;code&gt;select_related&lt;/code&gt; を呼び出せないようにします。その他のタプルは、 &lt;code&gt;select_related&lt;/code&gt; にパラメーターとして直接渡されます。例えば：</target>
        </trans-unit>
        <trans-unit id="d8cb56dde557370f78a7f18c4a395b3fd0b21ee4" translate="yes" xml:space="preserve">
          <source>If you need more flexibility, you could also add a new argument to your custom &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">さらに柔軟性が必要な場合は、カスタム&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt;コマンドに新しい引数を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="aff7c703e8b54ba634b913901864d3aa00cffcf1" translate="yes" xml:space="preserve">
          <source>If you need the response to be streamed from the iterator to the client, you must use the &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; class instead.</source>
          <target state="translated">イテレータからクライアントにストリーミングする応答が必要な場合は、代わりに&lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt; &lt;code&gt;StreamingHttpResponse&lt;/code&gt; &lt;/a&gt;クラスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9cf5c4ff845a5d20e57ce99fe95fc4dfe26d3a0d" translate="yes" xml:space="preserve">
          <source>If you need to access a membership&amp;rsquo;s information you may do so by directly querying the &lt;code&gt;Membership&lt;/code&gt; model:</source>
          <target state="translated">メンバーシップの情報にアクセスする必要がある場合は、 &lt;code&gt;Membership&lt;/code&gt; モデルを直接クエリすることでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="29d093239d80818b0b1e33570e4407bb058ea195" translate="yes" xml:space="preserve">
          <source>If you need to access some additional information about a form field in a template and using a subclass of &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t sufficient, consider also customizing &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートのフォームフィールドに関する追加情報にアクセスする必要があり、&lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; の&lt;/a&gt;サブクラスを使用するだけでは不十分な場合は、&lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; の&lt;/a&gt;カスタマイズも検討してください。</target>
        </trans-unit>
        <trans-unit id="ecb3aea88ed07bec970c7d28d05fa46d621b0e09" translate="yes" xml:space="preserve">
          <source>If you need to add a PostgreSQL extension (like &lt;code&gt;hstore&lt;/code&gt;, &lt;code&gt;postgis&lt;/code&gt;, etc.) using a migration, use the &lt;a href=&quot;contrib/postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt;&lt;code&gt;CreateExtension&lt;/code&gt;&lt;/a&gt; operation.</source>
          <target state="translated">あなたは（のようなPostgreSQLの拡張を追加する必要がある場合 &lt;code&gt;hstore&lt;/code&gt; の、 &lt;code&gt;postgis&lt;/code&gt; 移行を使用してなど、）、使用&lt;a href=&quot;contrib/postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt; &lt;code&gt;CreateExtension&lt;/code&gt; の&lt;/a&gt;操作を。</target>
        </trans-unit>
        <trans-unit id="e450e893ae7afe1bc2e22ffb0c5a0a76816766d3" translate="yes" xml:space="preserve">
          <source>If you need to add additional fields to the formset this can be easily accomplished. The formset base class provides an &lt;code&gt;add_fields&lt;/code&gt; method. You can override this method to add your own fields or even redefine the default fields/attributes of the order and deletion fields:</source>
          <target state="translated">formsetにフィールドを追加する必要がある場合、これは簡単に実行できます。formset基本クラスは &lt;code&gt;add_fields&lt;/code&gt; メソッドを提供します。このメソッドをオーバーライドして、独自のフィールドを追加したり、注文および削除フィールドのデフォルトのフィールド/属性を再定義したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="a49d29d22712c0f8cc4a9ef3a3f1dc48cf130bea" translate="yes" xml:space="preserve">
          <source>If you need to change how emails are sent you can write your own email backend. The &lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt;&lt;code&gt;EMAIL_BACKEND&lt;/code&gt;&lt;/a&gt; setting in your settings file is then the Python import path for your backend class.</source>
          <target state="translated">メールの送信方法を変更する必要がある場合は、独自のメールバックエンドを作成できます。設定ファイルの&lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt; &lt;code&gt;EMAIL_BACKEND&lt;/code&gt; &lt;/a&gt;設定は、バックエンドクラスのPythonインポートパスになります。</target>
        </trans-unit>
        <trans-unit id="e5fa605cf3f76c4428e51ca9506d8d5da266d92c" translate="yes" xml:space="preserve">
          <source>If you need to change this default behavior, create the intermediary table as an explicit model (with &lt;code&gt;managed&lt;/code&gt; set as needed) and use the &lt;a href=&quot;fields#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;ManyToManyField.through&lt;/code&gt;&lt;/a&gt; attribute to make the relation use your custom model.</source>
          <target state="translated">このデフォルトの動作を変更する必要がある場合は、中間テーブルを明示的なモデルとして作成し（必要に応じて &lt;code&gt;managed&lt;/code&gt; セットを使用）、&lt;a href=&quot;fields#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;ManyToManyField.through&lt;/code&gt; &lt;/a&gt;属性を使用してリレーションでカスタムモデルを使用します。</target>
        </trans-unit>
        <trans-unit id="417131b19902519fe0b468a60926a5bf16770559" translate="yes" xml:space="preserve">
          <source>If you need to clear the list of related fields added by past calls of &lt;code&gt;select_related&lt;/code&gt; on a &lt;code&gt;QuerySet&lt;/code&gt;, you can pass &lt;code&gt;None&lt;/code&gt; as a parameter:</source>
          <target state="translated">あなたは過去の呼び出しによって追加の関連分野の一覧クリアする必要がある場合は &lt;code&gt;select_related&lt;/code&gt; に &lt;code&gt;QuerySet&lt;/code&gt; 、あなたが渡すことはできません &lt;code&gt;None&lt;/code&gt; パラメータとしては：</target>
        </trans-unit>
        <trans-unit id="16b5139d25521e92cae75d82c00fd807f514ef86" translate="yes" xml:space="preserve">
          <source>If you need to construct a &lt;code&gt;File&lt;/code&gt; yourself, the easiest way is to create one using a Python built-in &lt;code&gt;file&lt;/code&gt; object:</source>
          <target state="translated">自分で &lt;code&gt;File&lt;/code&gt; を作成する必要がある場合、最も簡単な方法は、Pythonの組み込み &lt;code&gt;file&lt;/code&gt; オブジェクトを使用してファイルを作成することです。</target>
        </trans-unit>
        <trans-unit id="3c6d8d98e29f39567c45f015a91e483e346b4e97" translate="yes" xml:space="preserve">
          <source>If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself:</source>
          <target state="translated">まだ定義されていないモデルにリレーションシップを作成する必要がある場合は、モデルオブジェクト自体ではなくモデルの名前を使用することができます。</target>
        </trans-unit>
        <trans-unit id="65d871b7088c66feacdac17c59f3a01772b1f023" translate="yes" xml:space="preserve">
          <source>If you need to create a user to login with, use the &lt;a href=&quot;../../django-admin#django-admin-createsuperuser&quot;&gt;&lt;code&gt;createsuperuser&lt;/code&gt;&lt;/a&gt; command. By default, logging in to the admin requires that the user has the &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_superuser&quot;&gt;&lt;code&gt;is_superuser&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt;&lt;code&gt;is_staff&lt;/code&gt;&lt;/a&gt; attribute set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">ログインに使用するユーザーを作成する必要がある場合は、&lt;a href=&quot;../../django-admin#django-admin-createsuperuser&quot;&gt; &lt;code&gt;createsuperuser&lt;/code&gt; &lt;/a&gt;コマンドを使用します。デフォルトでは、管理者にログインするには、ユーザーが&lt;a href=&quot;../auth#django.contrib.auth.models.User.is_superuser&quot;&gt; &lt;code&gt;is_superuser&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt; &lt;code&gt;is_staff&lt;/code&gt; &lt;/a&gt;属性を &lt;code&gt;True&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d65af76fc2fae362276614f23f186268a8063338" translate="yes" xml:space="preserve">
          <source>If you need to customize search you can use &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt;&lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt;&lt;/a&gt; to provide additional or alternate search behavior.</source>
          <target state="translated">検索をカスタマイズする必要がある場合は、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt; &lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt; &lt;/a&gt;を使用して、追加または代替の検索動作を提供できます。</target>
        </trans-unit>
        <trans-unit id="268d1539953ae22ff11a5330553a90257431d684" translate="yes" xml:space="preserve">
          <source>If you need to customize the SQL mode, you can set the &lt;code&gt;sql_mode&lt;/code&gt; variable like other MySQL options: either in a config file or with the entry &lt;code&gt;'init_command': &quot;SET sql_mode='STRICT_TRANS_TABLES'&quot;&lt;/code&gt; in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたがSQLモードをカスタマイズする必要がある場合は、設定することができ &lt;code&gt;sql_mode&lt;/code&gt; 設定ファイル内またはエントリで、次のいずれか他のMySQLオプションのような変数 &lt;code&gt;'init_command': &quot;SET sql_mode='STRICT_TRANS_TABLES'&quot;&lt;/code&gt; 中に&lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; の&lt;/a&gt;中にデータベース構成の一部&lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5590b9cc3e5a4f06eb74e308901af7ab377968ea" translate="yes" xml:space="preserve">
          <source>If you need to disable a &lt;a href=&quot;#adminsite-actions&quot;&gt;site-wide action&lt;/a&gt; you can call &lt;a href=&quot;#django.contrib.admin.AdminSite.disable_action&quot;&gt;&lt;code&gt;AdminSite.disable_action()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#adminsite-actions&quot;&gt;サイト全体のアクション&lt;/a&gt;を無効にする必要がある場合は、&lt;a href=&quot;#django.contrib.admin.AdminSite.disable_action&quot;&gt; &lt;code&gt;AdminSite.disable_action()&lt;/code&gt; を&lt;/a&gt;呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="3188dcbcf55e21ddcef8ee90b69dccce7ee89480" translate="yes" xml:space="preserve">
          <source>If you need to distinguish between bound and unbound form instances at runtime, check the value of the form&amp;rsquo;s &lt;a href=&quot;#django.forms.Form.is_bound&quot;&gt;&lt;code&gt;is_bound&lt;/code&gt;&lt;/a&gt; attribute:</source>
          <target state="translated">実行時にバインドされたフォームインスタンスとバインドされていないフォームインスタンスを区別する必要がある場合は、フォームの&lt;a href=&quot;#django.forms.Form.is_bound&quot;&gt; &lt;code&gt;is_bound&lt;/code&gt; &lt;/a&gt;属性の値を確認します。</target>
        </trans-unit>
        <trans-unit id="271b48b10c2eaee15e6c01af5201ecab45c59f1b" translate="yes" xml:space="preserve">
          <source>If you need to do this from within Python, do that with &lt;code&gt;os.environ&lt;/code&gt;:</source>
          <target state="translated">Python内からこれを行う必要がある場合は、 &lt;code&gt;os.environ&lt;/code&gt; を使用して行います。</target>
        </trans-unit>
        <trans-unit id="05047b6375db39f11bb955e3562cff830f8ce275" translate="yes" xml:space="preserve">
          <source>If you need to execute more complex queries (for example, queries with &lt;code&gt;OR&lt;/code&gt; statements), you can use &lt;a href=&quot;#django.db.models.Q&quot;&gt;&lt;code&gt;Q objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">より複雑なクエリ（たとえば、 &lt;code&gt;OR&lt;/code&gt; ステートメントを含むクエリ）を実行する必要がある場合は、&lt;a href=&quot;#django.db.models.Q&quot;&gt; &lt;code&gt;Q objects&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="382397a2d5889617644e1747a1ec56a1cb186983" translate="yes" xml:space="preserve">
          <source>If you need to get the content of the block from the parent template, the &lt;code&gt;{{ block.super }}&lt;/code&gt; variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using &lt;code&gt;{{ block.super }}&lt;/code&gt; will not be automatically escaped (see the &lt;a href=&quot;#automatic-html-escaping&quot;&gt;next section&lt;/a&gt;), since it was already escaped, if necessary, in the parent template.</source>
          <target state="translated">親テンプレートからブロックのコンテンツを取得する必要がある場合は、 &lt;code&gt;{{ block.super }}&lt;/code&gt; 変数が役立ちます。これは、完全にオーバーライドするのではなく、親ブロックのコンテンツに追加する場合に便利です。 &lt;code&gt;{{ block.super }}&lt;/code&gt; を使用して挿入されたデータは、必要に応じて親テンプレートで既にエスケープされているため、自動的にエスケープされません（&lt;a href=&quot;#automatic-html-escaping&quot;&gt;次のセクションを参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7ebc26c78fa9c356f90a7f72742c57e3cd52c72f" translate="yes" xml:space="preserve">
          <source>If you need to identify the custom levels in your HTML or CSS, you need to provide a mapping via the &lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt;&lt;code&gt;MESSAGE_TAGS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">HTMLまたはCSSでカスタムレベルを識別する必要がある場合は、&lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt; &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; &lt;/a&gt;設定を介してマッピングを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="43d0b36b5694d463b889f6b0ba10b3bc8033471f" translate="yes" xml:space="preserve">
          <source>If you need to know whether &lt;code&gt;add()&lt;/code&gt; stored a value in the cache, you can check the return value. It will return &lt;code&gt;True&lt;/code&gt; if the value was stored, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; がキャッシュに値を格納したかどうかを知る必要がある場合は、戻り値を確認できます。値が保存されている場合は &lt;code&gt;True&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;False&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d830c73c6c6c1f7e7b98469dce63d2206baf4296" translate="yes" xml:space="preserve">
          <source>If you need to loop over a list of lists, you can unpack the values in each sublist into individual variables. For example, if your context contains a list of (x,y) coordinates called &lt;code&gt;points&lt;/code&gt;, you could use the following to output the list of points:</source>
          <target state="translated">リストのリストをループする必要がある場合は、各サブリストの値を個別の変数にアンパックできます。たとえば、コンテキストに &lt;code&gt;points&lt;/code&gt; と呼ばれる（x、y）座標のリストが含まれている場合、次を使用してポイントのリストを出力できます。</target>
        </trans-unit>
        <trans-unit id="e4875586a1526cd06344d2126b39a51bf67bf624" translate="yes" xml:space="preserve">
          <source>If you need to order the resulting queryset using some of the new fields or tables you have included via &lt;code&gt;extra()&lt;/code&gt; use the &lt;code&gt;order_by&lt;/code&gt; parameter to &lt;code&gt;extra()&lt;/code&gt; and pass in a sequence of strings. These strings should either be model fields (as in the normal &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; method on querysets), of the form &lt;code&gt;table_name.column_name&lt;/code&gt; or an alias for a column that you specified in the &lt;code&gt;select&lt;/code&gt; parameter to &lt;code&gt;extra()&lt;/code&gt;.</source>
          <target state="translated">あなたは新しいフィールドやテーブルの一部を使用したクエリセットを注文する必要がある場合は、経由含まれています &lt;code&gt;extra()&lt;/code&gt; を使用 &lt;code&gt;order_by&lt;/code&gt; にパラメータを &lt;code&gt;extra()&lt;/code&gt; と一連の文字列を渡します。これらの文字列は、 &lt;code&gt;table_name.column_name&lt;/code&gt; の形式のモデルフィールド（&lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt;の通常のorder_by（）メソッドの場合）か、 &lt;code&gt;extra()&lt;/code&gt; の &lt;code&gt;select&lt;/code&gt; パラメーターで指定した列のエイリアスである必要があります。</target>
        </trans-unit>
        <trans-unit id="29512c055a4bbedadcf50ac81bc12aa696fefce6" translate="yes" xml:space="preserve">
          <source>If you need to perform parameterized queries, you can use the &lt;code&gt;params&lt;/code&gt; argument to &lt;code&gt;raw()&lt;/code&gt;:</source>
          <target state="translated">パラメータ化されたクエリを実行する必要がある場合は、 &lt;code&gt;params&lt;/code&gt; 引数を &lt;code&gt;raw()&lt;/code&gt; に使用できます。</target>
        </trans-unit>
        <trans-unit id="85d94e84caa03cb9aa1eba7c8a2edd2887aceacb" translate="yes" xml:space="preserve">
          <source>If you need to perform some more sophisticated manipulation of asset requirements, you can define the &lt;code&gt;media&lt;/code&gt; property directly. This is done by defining a widget property that returns an instance of &lt;code&gt;forms.Media&lt;/code&gt;. The constructor for &lt;code&gt;forms.Media&lt;/code&gt; accepts &lt;code&gt;css&lt;/code&gt; and &lt;code&gt;js&lt;/code&gt; keyword arguments in the same format as that used in a static media definition.</source>
          <target state="translated">アセット要件のより高度な操作を実行する必要がある場合は、 &lt;code&gt;media&lt;/code&gt; プロパティを直接定義できます。これは、 &lt;code&gt;forms.Media&lt;/code&gt; のインスタンスを返すウィジェットプロパティを定義することによって行われます。 &lt;code&gt;forms.Media&lt;/code&gt; のコンストラクターは、静的メディア定義で使用されるのと同じ形式の &lt;code&gt;css&lt;/code&gt; および &lt;code&gt;js&lt;/code&gt; キーワード引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="03077957c82f83770cda4245c00130142e0728ea" translate="yes" xml:space="preserve">
          <source>If you need to produce a custom feed format, you&amp;rsquo;ve got a couple of options.</source>
          <target state="translated">カスタムフィード形式を作成する必要がある場合は、いくつかのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="dce169f28d5a3a0a8217378654a731a6091f2895" translate="yes" xml:space="preserve">
          <source>If you need to provide custom file storage &amp;ndash; a common example is storing files on some remote system &amp;ndash; you can do so by defining a custom storage class. You&amp;rsquo;ll need to follow these steps:</source>
          <target state="translated">カスタムファイルストレージを提供する必要がある場合（一般的な例は、一部のリモートシステムでのファイルの保存です）、カスタムストレージクラスを定義することでそれを行うことができます。次の手順を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="21318dce302488db7fe1be9c8f91e7d9398db2d0" translate="yes" xml:space="preserve">
          <source>If you need to reload a model&amp;rsquo;s values from the database, you can use the &lt;code&gt;refresh_from_db()&lt;/code&gt; method. When this method is called without arguments the following is done:</source>
          <target state="translated">データベースからモデルの値を再 &lt;code&gt;refresh_from_db()&lt;/code&gt; する必要がある場合は、refresh_from_db（）メソッドを使用できます。このメソッドが引数なしで呼び出されると、次のことが行われます。</target>
        </trans-unit>
        <trans-unit id="9f60d676b2ff26e717c98cf757ee77b4169d2c79" translate="yes" xml:space="preserve">
          <source>If you need to rename your tag, you can provide a custom name for it:</source>
          <target state="translated">タグの名前を変更する必要がある場合は、カスタム名を指定することができます。</target>
        </trans-unit>
        <trans-unit id="70ce7ed4a5fd90c845431eb06c0ba9bf7b77d4be" translate="yes" xml:space="preserve">
          <source>If you need to specify a dynamic order (for example depending on user or language) you can implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt;&lt;code&gt;get_ordering()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">動的な順序を指定する必要がある場合（ユーザーや言語に応じて）、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt; &lt;code&gt;get_ordering()&lt;/code&gt; &lt;/a&gt;メソッドを実装できます。</target>
        </trans-unit>
        <trans-unit id="54934551f16cb178c17684aaa62b9b0ce737160b" translate="yes" xml:space="preserve">
          <source>If you need to specify a dynamic value based on the request, you can implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_select_related&quot;&gt;&lt;code&gt;get_list_select_related()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">リクエストに基づいて動的な値を指定する必要がある場合は、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_select_related&quot;&gt; &lt;code&gt;get_list_select_related()&lt;/code&gt; &lt;/a&gt;メソッドを実装できます。</target>
        </trans-unit>
        <trans-unit id="d7afe7febaba1ec3c478e01c27fcfae0fcae482f" translate="yes" xml:space="preserve">
          <source>If you need to specify such values, reset the sequence afterwards to avoid reusing a value that&amp;rsquo;s already in the table. The &lt;a href=&quot;django-admin#django-admin-sqlsequencereset&quot;&gt;&lt;code&gt;sqlsequencereset&lt;/code&gt;&lt;/a&gt; management command generates the SQL statements to do that.</source>
          <target state="translated">そのような値を指定する必要がある場合は、シーケンスを後でリセットして、すでにテーブルにある値を再利用しないようにします。&lt;a href=&quot;django-admin#django-admin-sqlsequencereset&quot;&gt; &lt;code&gt;sqlsequencereset&lt;/code&gt; の&lt;/a&gt;管理コマンドは、それを行うためにSQL文を生成します。</target>
        </trans-unit>
        <trans-unit id="42afbcfd63e453f7b679ed0c58b5d3f86138dbfa" translate="yes" xml:space="preserve">
          <source>If you need to specify this list dynamically, implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_sortable_by&quot;&gt;&lt;code&gt;get_sortable_by()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">このリストを動的に指定する必要がある場合は、代わりに&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_sortable_by&quot;&gt; &lt;code&gt;get_sortable_by()&lt;/code&gt; &lt;/a&gt;メソッドを実装してください。</target>
        </trans-unit>
        <trans-unit id="385e9bf858c9d8171227212211f5666543e0edbb" translate="yes" xml:space="preserve">
          <source>If you need to use a different JSON encoder class you can pass the &lt;code&gt;encoder&lt;/code&gt; parameter to the constructor method:</source>
          <target state="translated">別のJSONエンコーダークラスを使用する必要がある場合は、 &lt;code&gt;encoder&lt;/code&gt; パラメーターをコンストラクターメソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="52403383dcd3d11592773e83b934a1caeec7695e" translate="yes" xml:space="preserve">
          <source>If you need to use a literal &lt;code&gt;%s&lt;/code&gt; inside your select string, use the sequence &lt;code&gt;%%s&lt;/code&gt;.</source>
          <target state="translated">選択文字列内でリテラル &lt;code&gt;%s&lt;/code&gt; を使用する必要がある場合は、シーケンス &lt;code&gt;%%s&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="e62765ab69b86199c0c670e1b19ddf6f4572d8af" translate="yes" xml:space="preserve">
          <source>If you need to use a spatial lookup or aggregate that doesn&amp;rsquo;t support the geography type as input, you can use the &lt;a href=&quot;../../models/database-functions#django.db.models.functions.Cast&quot;&gt;&lt;code&gt;Cast&lt;/code&gt;&lt;/a&gt; database function to convert the geography column to a geometry type in the query:</source>
          <target state="translated">入力として地理タイプをサポートしない空間ルックアップまたは集約を使用する必要がある場合は、&lt;a href=&quot;../../models/database-functions#django.db.models.functions.Cast&quot;&gt; &lt;code&gt;Cast&lt;/code&gt; &lt;/a&gt;データベース関数を使用して、クエリで地理列をジオメトリタイプに変換できます。</target>
        </trans-unit>
        <trans-unit id="7261e018cbf8f2bbdd8cb56b7d0debc25633a8f3" translate="yes" xml:space="preserve">
          <source>If you need to use something similar to the &lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag in your code, Django provides the following function:</source>
          <target state="translated">コードで&lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;テンプレートタグに似たものを使用する必要がある場合、Djangoは次の関数を提供します。</target>
        </trans-unit>
        <trans-unit id="65a8bbb933c1c4d11d662bcf552b38b0767fd8e4" translate="yes" xml:space="preserve">
          <source>If you need to use strings with these sequences, store them in template variables or use a custom template tag or filter to workaround the limitation.</source>
          <target state="translated">これらのシーケンスで文字列を使用する必要がある場合は、テンプレート変数に格納するか、カスタムテンプレートタグやフィルタを使用して制限を回避します。</target>
        </trans-unit>
        <trans-unit id="fcc7733e03c7800262e0a10bde85e2867cb41401" translate="yes" xml:space="preserve">
          <source>If you need two annotations with two separate filters you can use the &lt;code&gt;filter&lt;/code&gt; argument with any aggregate. For example, to generate a list of authors with a count of highly rated books:</source>
          <target state="translated">2つの別個のフィルターを持つ2つのアノテーションが必要な場合は、任意の集約で &lt;code&gt;filter&lt;/code&gt; 引数を使用できます。たとえば、評価の高い本の数を含む著者のリストを生成するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="c897784a3f3666e7ffa637c1500a855cd1d427d9" translate="yes" xml:space="preserve">
          <source>If you obtain an error, you will have to recompile SQLite from source. Otherwise, skip this section.</source>
          <target state="translated">エラーが発生した場合は、ソースからSQLiteを再コンパイルする必要があります。それ以外の場合は、このセクションをスキップしてください。</target>
        </trans-unit>
        <trans-unit id="741f58ec7bbe2e730412e151c54ddb2163fa4a4f" translate="yes" xml:space="preserve">
          <source>If you often use this pattern:</source>
          <target state="translated">このパターンをよく使う方は</target>
        </trans-unit>
        <trans-unit id="2f212d93748c23a6b8f8df2fb8bdf19695fec4c9" translate="yes" xml:space="preserve">
          <source>If you omit the extensions, Django will search all available fixture types for a matching fixture. For example:</source>
          <target state="translated">拡張子を省略した場合、Django は利用可能なすべてのフィクスチャタイプを検索して一致するフィクスチャを探します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b7281fcbaa809c600b8793d4f53e33c8473eac8d" translate="yes" xml:space="preserve">
          <source>If you only need a foreign key value, use the foreign key value that is already on the object you&amp;rsquo;ve got, rather than getting the whole related object and taking its primary key. i.e. do:</source>
          <target state="translated">外部キー値のみが必要な場合は、関連するオブジェクト全体を取得して主キーを取得するのではなく、取得したオブジェクトに既に存在する外部キー値を使用します。つまり、</target>
        </trans-unit>
        <trans-unit id="800fadfa713dccf394aba70d45e9d4112ae330ee" translate="yes" xml:space="preserve">
          <source>If you only pass in a single field, you can also pass in the &lt;code&gt;flat&lt;/code&gt; parameter. If &lt;code&gt;True&lt;/code&gt;, this will mean the returned results are single values, rather than one-tuples. An example should make the difference clearer:</source>
          <target state="translated">1つのフィールドのみを渡す場合は、 &lt;code&gt;flat&lt;/code&gt; パラメータも渡すことができます。 &lt;code&gt;True&lt;/code&gt; の場合、これは、返される結果が1つのタプルではなく単一の値であることを意味します。例では、違いをより明確にする必要があります。</target>
        </trans-unit>
        <trans-unit id="21a02b2eee96e24a49f04e13b9eb6b72eba93d67" translate="yes" xml:space="preserve">
          <source>If you only serialize the Restaurant model:</source>
          <target state="translated">レストランのモデルを連載するだけなら</target>
        </trans-unit>
        <trans-unit id="09d4a126b134831de63cd4bb62765a50804cd5f0" translate="yes" xml:space="preserve">
          <source>If you only want a subset of fields to be serialized, you can specify a &lt;code&gt;fields&lt;/code&gt; argument to the serializer:</source>
          <target state="translated">フィールドのサブセットのみをシリアル化する場合は、シリアライザに &lt;code&gt;fields&lt;/code&gt; 引数を指定できます。</target>
        </trans-unit>
        <trans-unit id="4364377f218dbdb6f693a8ac230e516ce29b7d3f" translate="yes" xml:space="preserve">
          <source>If you only want files of a particular type, you can use the subscript operator to filter out a medium of interest. For example:</source>
          <target state="translated">特定のタイプのファイルのみが必要な場合は、添え字演算子を使用して、関心のある媒体をフィルタリングできます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b7761bd9d1203f2151ef4f8ccf146d8e1530f6c1" translate="yes" xml:space="preserve">
          <source>If you only want to pickle the necessary information to recreate the &lt;code&gt;QuerySet&lt;/code&gt; from the database at a later time, pickle the &lt;code&gt;query&lt;/code&gt; attribute of the &lt;code&gt;QuerySet&lt;/code&gt;. You can then recreate the original &lt;code&gt;QuerySet&lt;/code&gt; (without any results loaded) using some code like this:</source>
          <target state="translated">後でデータベースから &lt;code&gt;QuerySet&lt;/code&gt; を再作成するために必要な情報のみをピクルする場合は、 &lt;code&gt;QuerySet&lt;/code&gt; の &lt;code&gt;query&lt;/code&gt; 属性をピクルします。その後、次のようなコードを使用して、（結果をロードせずに）元の &lt;code&gt;QuerySet&lt;/code&gt; を再作成できます。</target>
        </trans-unit>
        <trans-unit id="57e21af0c1526d4117f7cb3d0a6e6b7c87ae870c" translate="yes" xml:space="preserve">
          <source>If you opt to use this third method and you don&amp;rsquo;t iterate over the fields with a &lt;code&gt;{% for %}&lt;/code&gt; loop, you&amp;rsquo;ll need to render the primary key field. For example, if you were rendering the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; fields of a model:</source>
          <target state="translated">この3番目の方法を使用することを選択し、 &lt;code&gt;{% for %}&lt;/code&gt; ループでフィールドを反復処理しない場合は、主キーフィールドをレンダリングする必要があります。たとえば、モデルの &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;age&lt;/code&gt; フィールドをレンダリングしている場合：</target>
        </trans-unit>
        <trans-unit id="f4b5a3ee8156aeb994b28c82b8a75b4aeb508550" translate="yes" xml:space="preserve">
          <source>If you override &lt;code&gt;MESSAGE_LEVEL&lt;/code&gt; in your settings file and rely on any of the built-in constants, you must import the constants module directly to avoid the potential for circular imports, e.g.:</source>
          <target state="translated">設定ファイルの &lt;code&gt;MESSAGE_LEVEL&lt;/code&gt; をオーバーライドし、組み込み定数のいずれかに依存している場合、循環インポートの可能性を回避するために、定数モジュールを直接インポートする必要があります。例：</target>
        </trans-unit>
        <trans-unit id="7a02510672f31144e2b0955819bddaf9315a3389" translate="yes" xml:space="preserve">
          <source>If you override &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; in your settings file and rely on any of the built-in constants, you must import the &lt;code&gt;constants&lt;/code&gt; module directly to avoid the potential for circular imports, e.g.:</source>
          <target state="translated">設定ファイルの &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; をオーバーライドし、組み込み定数のいずれかに依存している場合、循環インポートの可能性を回避するために、 &lt;code&gt;constants&lt;/code&gt; モジュールを直接インポートする必要があります。例：</target>
        </trans-unit>
        <trans-unit id="8b48af8079716221e4c0051117d47bfd44a4b260" translate="yes" xml:space="preserve">
          <source>If you override any of these methods, be sure to call the superclass methods since they add the required elements for each feed format.</source>
          <target state="translated">これらのメソッドをオーバーライドする場合は、各フィードフォーマットに必要な要素を追加するので、必ずスーパークラスのメソッドを呼び出すようにしてください。</target>
        </trans-unit>
        <trans-unit id="bdf1c5dfe752c4d781780083470ca6f0e40af894" translate="yes" xml:space="preserve">
          <source>If you override the &lt;code&gt;get_queryset()&lt;/code&gt; method and filter out any rows, Django will return incorrect results. Don&amp;rsquo;t do that. A manager that filters results in &lt;code&gt;get_queryset()&lt;/code&gt; is not appropriate for use as a base manager.</source>
          <target state="translated">&lt;code&gt;get_queryset()&lt;/code&gt; メソッドをオーバーライドして行を除外すると、Djangoは誤った結果を返します。それをしないでください。 &lt;code&gt;get_queryset()&lt;/code&gt; で結果をフィルタリングするマネージャーは、基本マネージャーとしての使用には適していません。</target>
        </trans-unit>
        <trans-unit id="efa7906aab8c824e5c384fdd3e0c6fb2aa3af44d" translate="yes" xml:space="preserve">
          <source>If you override these methods on your model, you must call the parent class&amp;rsquo; methods for these signals to be sent.</source>
          <target state="translated">モデルでこれらのメソッドをオーバーライドする場合は、これらの信号を送信するために親クラスのメソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="139f65047f08d0c31df99bf777b749aac8b06810" translate="yes" xml:space="preserve">
          <source>If you override this method, make sure that the returned inlines are instances of the classes defined in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt;&lt;code&gt;inlines&lt;/code&gt;&lt;/a&gt; or you might encounter a &amp;ldquo;Bad Request&amp;rdquo; error when adding related objects.</source>
          <target state="translated">このメソッドをオーバーライドする場合は、返されるインラインが&lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt; &lt;code&gt;inlines&lt;/code&gt; &lt;/a&gt;定義されたクラスのインスタンスであることを確認してください。そうしないと、関連オブジェクトを追加するときに「Bad Request」エラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="cd49ed7d9ce6425ca491d84c25250c4b7a60d8ad" translate="yes" xml:space="preserve">
          <source>If you pass &lt;code&gt;in_bulk()&lt;/code&gt; an empty list, you&amp;rsquo;ll get an empty dictionary.</source>
          <target state="translated">&lt;code&gt;in_bulk()&lt;/code&gt; に空のリストを渡すと、空の辞書が取得されます。</target>
        </trans-unit>
        <trans-unit id="01b4c8798ac8d3c2ee64f1b7afb638cce29f856f" translate="yes" xml:space="preserve">
          <source>If you pass a string to Django that has been encoded in some other format, things will go wrong in interesting ways. Usually, Django will raise a &lt;code&gt;UnicodeDecodeError&lt;/code&gt; at some point.</source>
          <target state="translated">他の形式でエンコードされた文字列をDjangoに渡すと、興味深い方法で問題が発生します。通常、Djangoはある時点で &lt;code&gt;UnicodeDecodeError&lt;/code&gt; を送出します。</target>
        </trans-unit>
        <trans-unit id="f875b90b3600dbb8929f4dd6aae0773f46d238bd" translate="yes" xml:space="preserve">
          <source>If you pass an invalid keyword argument, a lookup function will raise &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">無効なキーワード引数を渡した場合、検索関数は &lt;code&gt;TypeError&lt;/code&gt; を送出します。</target>
        </trans-unit>
        <trans-unit id="2a3d957dd878c573465d3ad6cc8518f32e53e656" translate="yes" xml:space="preserve">
          <source>If you pass in a &lt;code&gt;QuerySet&lt;/code&gt; resulting from &lt;code&gt;values()&lt;/code&gt; or &lt;code&gt;values_list()&lt;/code&gt; as the value to an &lt;code&gt;__in&lt;/code&gt; lookup, you need to ensure you are only extracting one field in the result. For example, this will work (filtering on the blog names):</source>
          <target state="translated">あなたが渡すと &lt;code&gt;QuerySet&lt;/code&gt; から生じた &lt;code&gt;values()&lt;/code&gt; または &lt;code&gt;values_list()&lt;/code&gt; の値として &lt;code&gt;__in&lt;/code&gt; 引き、あなたは結果だけで一つのフィールドを抽出していることを確認する必要があります。たとえば、これは機能します（ブログ名でフィルタリング）：</target>
        </trans-unit>
        <trans-unit id="55a3e9f28be7d4fb14de4ec185385e4a1a973d4f" translate="yes" xml:space="preserve">
          <source>If you pass the &lt;a href=&quot;../ref/django-admin#cmdoption-no-color&quot;&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; option when running your command, all &lt;code&gt;self.style()&lt;/code&gt; calls will return the original string uncolored.</source>
          <target state="translated">コマンドの実行時に&lt;a href=&quot;../ref/django-admin#cmdoption-no-color&quot;&gt; &lt;code&gt;--no-color&lt;/code&gt; &lt;/a&gt;オプションを渡すと、すべての &lt;code&gt;self.style()&lt;/code&gt; 呼び出しは、色付けされていない元の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="b79b1f32de698ec64ae613eae6bcf15970d7b876" translate="yes" xml:space="preserve">
          <source>If you plan on using Django&amp;rsquo;s &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;timezone support&lt;/a&gt;, use &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt; to load time zone tables into the MySQL database. This needs to be done just once for your MySQL server, not per database.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../topics/i18n/timezones&quot;&gt;タイムゾーンサポートの&lt;/a&gt;使用を計画している場合は、&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt;を使用してタイムゾーンテーブルをMySQLデータベースにロードします。これは、データベースごとではなく、MySQLサーバーに対して1回だけ実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d07ba410dfae393dcd5dd3868653a7b65add33c" translate="yes" xml:space="preserve">
          <source>If you plan to remove the old app later, you&amp;rsquo;ll need to set the &lt;code&gt;dependencies&lt;/code&gt; property based on whether or not the old app is installed. Otherwise, you&amp;rsquo;ll have missing dependencies once you uninstall the old app. Similarly, you&amp;rsquo;ll need to catch &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;apps.get_model()&lt;/code&gt; call that retrieves models from the old app. This approach allows you to deploy your project anywhere without first installing and then uninstalling the old app.</source>
          <target state="translated">後で古いアプリを削除する予定の場合は、古いアプリがインストールされているかどうかに基づいて &lt;code&gt;dependencies&lt;/code&gt; プロパティを設定する必要があります。そうしないと、古いアプリをアンインストールすると、依存関係が失われます。同様に、古いアプリからモデルを取得する &lt;code&gt;apps.get_model()&lt;/code&gt; 呼び出しで&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt; &lt;code&gt;LookupError&lt;/code&gt; &lt;/a&gt;をキャッチする必要があります。このアプローチでは、最初に古いアプリをインストールしてからアンインストールすることなく、プロジェクトをどこにでもデプロイできます。</target>
        </trans-unit>
        <trans-unit id="9073c8632746695fe881c718b8ef04b35fa192e4" translate="yes" xml:space="preserve">
          <source>If you plan to run Django in a multithreaded environment (e.g. Apache using the default MPM module on any modern operating system), then you &lt;strong&gt;must&lt;/strong&gt; set the &lt;code&gt;threaded&lt;/code&gt; option of your Oracle database configuration to &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">あなたは（たとえばApacheは任意の最新のオペレーティングシステムのデフォルトのMPMモジュールを使用して）マルチスレッド環境ではDjangoを実行する予定の場合は、&lt;strong&gt;しなければならない&lt;/strong&gt;設定 &lt;code&gt;threaded&lt;/code&gt; にOracleデータベース構成のオプション &lt;code&gt;True&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8d225f0abfbc3c7de48d5bc9786ca2d1091b6fe9" translate="yes" xml:space="preserve">
          <source>If you plan to use Django&amp;rsquo;s &lt;code&gt;manage.py migrate&lt;/code&gt; command to automatically create database tables for your models (after first installing Django and creating a project), you&amp;rsquo;ll need to ensure that Django has permission to create and alter tables in the database you&amp;rsquo;re using; if you plan to manually create the tables, you can grant Django &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; permissions. After creating a database user with these permissions, you&amp;rsquo;ll specify the details in your project&amp;rsquo;s settings file, see &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">Djangoの &lt;code&gt;manage.py migrate&lt;/code&gt; コマンドを使用してモデルのデータベーステーブルを自動的に作成する場合（最初にDjangoをインストールしてプロジェクトを作成した後）、データベースにテーブルを作成および変更する権限がDjangoにあることを確認する必要があります。再使用;テーブルを手動で作成する場合は、Djangoの &lt;code&gt;SELECT&lt;/code&gt; 、 &lt;code&gt;INSERT&lt;/code&gt; 、 &lt;code&gt;UPDATE&lt;/code&gt; 、および &lt;code&gt;DELETE&lt;/code&gt; 権限を付与できます。これらの権限を持つデータベースユーザーを作成した後、あなたが見る、あなたのプロジェクトの設定ファイルに詳細を指定します&lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;詳細については、を。</target>
        </trans-unit>
        <trans-unit id="1cf8ce09ee94ba97497f8c75ae9497949e7ca9e6" translate="yes" xml:space="preserve">
          <source>If you plan to use Django&amp;rsquo;s database API functionality, you&amp;rsquo;ll need to make sure a database server is running. Django supports many different database servers and is officially supported with &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt;, &lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt; and &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;.</source>
          <target state="translated">DjangoのデータベースAPI機能を使用する場合は、データベースサーバーが実行されていることを確認する必要があります。Djangoは多くの異なるデータベースサーバーをサポートしており、&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;、&lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt;、&lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;、&lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt;、&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLiteで&lt;/a&gt;正式にサポートされています。</target>
        </trans-unit>
        <trans-unit id="2d29104b9899b9d86e33356f84568767e51c25b0" translate="yes" xml:space="preserve">
          <source>If you point the test client at a view that raises an exception and &lt;code&gt;Client.raise_request_exception&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, that exception will be visible in the test case. You can then use a standard &lt;code&gt;try ... except&lt;/code&gt; block or &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises&quot;&gt;&lt;code&gt;assertRaises()&lt;/code&gt;&lt;/a&gt; to test for exceptions.</source>
          <target state="translated">例外を発生させるビューにテストクライアントを向け、 &lt;code&gt;Client.raise_request_exception&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、その例外はテストケースに表示されます。次に、標準の &lt;code&gt;try ... except&lt;/code&gt; blockまたは&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises&quot;&gt; &lt;code&gt;assertRaises()&lt;/code&gt; &lt;/a&gt;を使用して、例外をテストできます。</target>
        </trans-unit>
        <trans-unit id="9a1ee774d1d6b71e65f51c9761d622d272f3e630" translate="yes" xml:space="preserve">
          <source>If you press &lt;code&gt;Ctrl-C&lt;/code&gt; while the tests are running, the test runner will wait for the currently running test to complete and then exit gracefully. During a graceful exit the test runner will output details of any test failures, report on how many tests were run and how many errors and failures were encountered, and destroy any test databases as usual. Thus pressing &lt;code&gt;Ctrl-C&lt;/code&gt; can be very useful if you forget to pass the &lt;a href=&quot;../../ref/django-admin#cmdoption-test-failfast&quot;&gt;&lt;code&gt;--failfast&lt;/code&gt;&lt;/a&gt; option, notice that some tests are unexpectedly failing and want to get details on the failures without waiting for the full test run to complete.</source>
          <target state="translated">あなたが押した場合 &lt;code&gt;Ctrl-C&lt;/code&gt; 、テストの実行中に、テストランナーは完全に現在実行中のテストを待ってから、正常に終了します。正常な終了時に、テストランナーはテストの失敗の詳細を出力し、実行されたテストの数と発生したエラーと失敗の数をレポートし、通常どおりテストデータベースを破棄します。したがって、-- &lt;a href=&quot;../../ref/django-admin#cmdoption-test-failfast&quot;&gt; &lt;code&gt;--failfast&lt;/code&gt; &lt;/a&gt;オプションを渡すのを忘れた場合、 &lt;code&gt;Ctrl-C&lt;/code&gt; を押すと非常に便利です。一部のテストが予期せず失敗し、完全なテストの実行が完了するのを待たずに失敗の詳細を取得したい場合があります。</target>
        </trans-unit>
        <trans-unit id="9fd3c524d495f19aa19c27cdbbee5399534aacb6" translate="yes" xml:space="preserve">
          <source>If you provide &lt;code&gt;content_type&lt;/code&gt; as &lt;em&gt;application/json&lt;/em&gt;, the &lt;code&gt;data&lt;/code&gt; is serialized using &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.dumps&quot;&gt;&lt;code&gt;json.dumps()&lt;/code&gt;&lt;/a&gt; if it&amp;rsquo;s a dict, list, or tuple. Serialization is performed with &lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; by default, and can be overridden by providing a &lt;code&gt;json_encoder&lt;/code&gt; argument to &lt;a href=&quot;#django.test.Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt;. This serialization also happens for &lt;a href=&quot;#django.test.Client.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.test.Client.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.test.Client.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; requests.</source>
          <target state="translated">&lt;code&gt;content_type&lt;/code&gt; を&lt;em&gt;application / json&lt;/em&gt;として指定した場合、 &lt;code&gt;data&lt;/code&gt; がdict、リスト、またはタプルの場合、データは&lt;a href=&quot;https://docs.python.org/3/library/json.html#json.dumps&quot;&gt; &lt;code&gt;json.dumps()&lt;/code&gt; &lt;/a&gt;を使用してシリアル化されます。&lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; &lt;/a&gt;化はデフォルトでDjangoJSONEncoderで実行され、 &lt;code&gt;json_encoder&lt;/code&gt; 引数を&lt;a href=&quot;#django.test.Client&quot;&gt; &lt;code&gt;Client&lt;/code&gt; に&lt;/a&gt;提供することでオーバーライドできます。このシリアル化は、&lt;a href=&quot;#django.test.Client.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.test.Client.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#django.test.Client.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;リクエストでも発生します。</target>
        </trans-unit>
        <trans-unit id="d70400506fc271afc5226a9156b79bd7b0a3892e" translate="yes" xml:space="preserve">
          <source>If you provide a &lt;code&gt;description&lt;/code&gt; in your &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class, Django will &lt;em&gt;not&lt;/em&gt; automatically put that into the &lt;code&gt;subtitle&lt;/code&gt; element, because a subtitle and description are not necessarily the same thing. Instead, you should define a &lt;code&gt;subtitle&lt;/code&gt; attribute.</source>
          <target state="translated">あなたが提供した場合 &lt;code&gt;description&lt;/code&gt; 、あなたの中に&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;クラス、Djangoはなり&lt;em&gt;ません&lt;/em&gt;自動的にそれを置く &lt;code&gt;subtitle&lt;/code&gt; 字幕と説明が必ずしも同じものではありませんので、要素。代わりに、 &lt;code&gt;subtitle&lt;/code&gt; 属性を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="aa823e0a0041a6947816c68759b373adb5e9f2ff" translate="yes" xml:space="preserve">
          <source>If you provide a URL with both an encoded GET data and a data argument, the data argument will take precedence.</source>
          <target state="translated">URLにエンコードされたGETデータとデータ引数の両方を指定した場合、データ引数が優先されます。</target>
        </trans-unit>
        <trans-unit id="10f0311a7904a5e576592cc2026a0cba559e4f85" translate="yes" xml:space="preserve">
          <source>If you provide an &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance as the sender argument, please ensure that the signal is registered in &lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;AppConfig&lt;/code&gt;s are recreated for tests that run with a modified set of &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; (such as when settings are overridden) and such signals should be connected for each new &lt;code&gt;AppConfig&lt;/code&gt; instance.</source>
          <target state="translated">送信者の引数として&lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;インスタンスを提供する場合は、シグナルが&lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; に&lt;/a&gt;登録されていることを確認してください。 &lt;code&gt;AppConfig&lt;/code&gt; は、&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; の&lt;/a&gt;変更されたセットで実行されるテスト用に再作成され（設定がオーバーライドされる場合など）、そのような信号は新しい &lt;code&gt;AppConfig&lt;/code&gt; インスタンスごとに接続する必要があります。</target>
        </trans-unit>
        <trans-unit id="b4f73da389b543957cd3a9484131a18f37edca2b" translate="yes" xml:space="preserve">
          <source>If you provide an anonymous user, &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt;&lt;code&gt;get_flatpages&lt;/code&gt;&lt;/a&gt; will behave the same as if you hadn&amp;rsquo;t provided a user &amp;ndash; i.e., it will only show you public flatpages.</source>
          <target state="translated">匿名ユーザーを&lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt; &lt;code&gt;get_flatpages&lt;/code&gt; &lt;/a&gt;すると、get_flatpagesはユーザーを指定しなかった場合と同じように動作します。つまり、公開フラットページのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="9045948db59d0563c0a89ef13a497ad48bb714a4" translate="yes" xml:space="preserve">
          <source>If you provide any other &lt;code&gt;content_type&lt;/code&gt; (e.g. &lt;em&gt;text/xml&lt;/em&gt; for an XML payload), the contents of &lt;code&gt;data&lt;/code&gt; are sent as-is in the POST request, using &lt;code&gt;content_type&lt;/code&gt; in the HTTP &lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="translated">他の &lt;code&gt;content_type&lt;/code&gt; （XMLペイロードの&lt;em&gt;text / xmlなど&lt;/em&gt;）を指定した場合、 &lt;code&gt;data&lt;/code&gt; &lt;code&gt;Content-Type&lt;/code&gt; は、HTTP Content-Typeヘッダーの &lt;code&gt;content_type&lt;/code&gt; を使用して、POSTリクエストでそのまま送信されます。</target>
        </trans-unit>
        <trans-unit id="910309a8687236b4eef1cb1fc342a8ae2c903a62" translate="yes" xml:space="preserve">
          <source>If you provide the &lt;code&gt;app_label&lt;/code&gt; argument, &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; will automatically create the package if it doesn&amp;rsquo;t already exist.</source>
          <target state="translated">あなたが提供する場合は &lt;code&gt;app_label&lt;/code&gt; 引数を、&lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; は、&lt;/a&gt;それがまだ存在しない場合、自動的にパッケージを作成します。</target>
        </trans-unit>
        <trans-unit id="6a321433ae0fb44c3dba2485b43003a37dcff291" translate="yes" xml:space="preserve">
          <source>If you raise a &lt;code&gt;StopUpload&lt;/code&gt; or a &lt;code&gt;SkipFile&lt;/code&gt; exception, the upload will abort or the file will be completely skipped.</source>
          <target state="translated">あなたが提起した場合 &lt;code&gt;StopUpload&lt;/code&gt; または &lt;code&gt;SkipFile&lt;/code&gt; 例外を、アップロードが中止されたり、ファイルが完全にスキップされます。</target>
        </trans-unit>
        <trans-unit id="f5c930b9d9ff449d37bc58a058280baf8e9d25ba" translate="yes" xml:space="preserve">
          <source>If you really need to do the conversion yourself, you must ensure the datetime is converted to the appropriate time zone first. Usually, this will be the current timezone:</source>
          <target state="translated">もし自分で変換する必要がある場合は、まず日付を適切なタイムゾーンに変換する必要があります。通常、これは現在のタイムゾーンになります。</target>
        </trans-unit>
        <trans-unit id="aba032f0055b3ba362cd40902bc9f74174f0f582" translate="yes" xml:space="preserve">
          <source>If you reference &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; directly (for example, by referring to it in a foreign key), your code will not work in projects where the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting has been changed to a different user model.</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; を&lt;/a&gt;直接参照する場合（たとえば、外部キーで参照する場合）、コードは、&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;設定が別のユーザーモデルに変更されているプロジェクトでは機能しません。</target>
        </trans-unit>
        <trans-unit id="0e1ecb9bcfed717dbcef9591ae9c8802ed73bd90" translate="yes" xml:space="preserve">
          <source>If you render a bound &lt;code&gt;Form&lt;/code&gt; object, the act of rendering will automatically run the form&amp;rsquo;s validation if it hasn&amp;rsquo;t already happened, and the HTML output will include the validation errors as a &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; near the field. The particular positioning of the error messages depends on the output method you&amp;rsquo;re using:</source>
          <target state="translated">バインドされた &lt;code&gt;Form&lt;/code&gt; オブジェクトをレンダリングする場合、フォームの検証がまだ行われていない場合はレンダリングの動作によって自動的に検証が実行され、HTML出力にはフィールドの近くに &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; として検証エラーが含まれます。エラーメッセージの特定の位置は、使用している出力方法によって異なります。</target>
        </trans-unit>
        <trans-unit id="07459c1428179836772ae027ec5297d2da1c0fb6" translate="yes" xml:space="preserve">
          <source>If you require even more control over inheritance, define your assets using a &lt;a href=&quot;#dynamic-property&quot;&gt;dynamic property&lt;/a&gt;. Dynamic properties give you complete control over which files are inherited, and which are not.</source>
          <target state="translated">継承をさらに制御する必要がある場合は、&lt;a href=&quot;#dynamic-property&quot;&gt;動的プロパティ&lt;/a&gt;を使用してアセットを定義します。動的プロパティを使用すると、継承するファイルと継承しないファイルを完全に制御できます。</target>
        </trans-unit>
        <trans-unit id="6b05712d776517317396db80b42d65e9ba95c552" translate="yes" xml:space="preserve">
          <source>If you require support for a concrete data type other than &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;str&lt;/code&gt;, you can subclass &lt;code&gt;Choices&lt;/code&gt; and the required concrete data type, e.g. &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; for use with &lt;a href=&quot;#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; または &lt;code&gt;str&lt;/code&gt; 以外の具象データ型のサポートが必要な場合は、 &lt;code&gt;Choices&lt;/code&gt; と必要な具象データ型をサブクラス化できます。たとえば、&lt;a href=&quot;#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;で使用する&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="db9d39b35fe6f2b0b25e26ce3e859ec9c161c377" translate="yes" xml:space="preserve">
          <source>If you rotate your secret key, all of the above will be invalidated. Secret keys are not used for passwords of users and key rotation will not affect them.</source>
          <target state="translated">秘密鍵を回転させると、上記の全てが無効になります。秘密鍵は利用者のパスワードには使用されませんので、キーローテーションを行っても影響はありません。</target>
        </trans-unit>
        <trans-unit id="ce316f0b6ed1ed42439817ae8b4f2b1e4a6893ce" translate="yes" xml:space="preserve">
          <source>If you run this script as a user with normal privileges (recommended), you might not have access to start a port on a low port number. Low port numbers are reserved for the superuser (root).</source>
          <target state="translated">このスクリプトを通常の権限を持つユーザとして実行した場合 (推奨)、低いポート番号のポートを起動するためのアクセス権がない場合があります。低いポート番号はスーパーユーザ (root)のために予約されています。</target>
        </trans-unit>
        <trans-unit id="581d2693ba51ca9c6d74a9c3aec8c1d2ed991658" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;, the logging configuration process will be skipped.</source>
          <target state="translated">あなたが設定した場合&lt;a href=&quot;#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; を&lt;/a&gt;する &lt;code&gt;None&lt;/code&gt; 、ロギング構成プロセスはスキップされます。</target>
        </trans-unit>
        <trans-unit id="6c3c4b3192dde41e8664985f2f99b630a848a1da" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;, you also need to properly set the &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">あなたが設定した場合は&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; を&lt;/a&gt;する &lt;code&gt;False&lt;/code&gt; 、あなたも適切に設定する必要が&lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; を&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="912981cf3b9022683052e38d66b9a92981f3bcd3" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;, you must remove the slash in the catchall pattern or flatpages without a trailing slash will not be matched.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;False&lt;/code&gt; に設定した場合、キャッチオールパターンのスラッシュを削除する必要があります。そうしないと、末尾のスラッシュが一致しないフラットページが一致しなくなります。</target>
        </trans-unit>
        <trans-unit id="395ad5010523ffc1e4b670f7488f023e63a22e17" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;, access settings values somehow, &lt;em&gt;then&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt;, Django will raise a &lt;code&gt;RuntimeError&lt;/code&gt; indicating that settings have already been configured. There is a property for this purpose:</source>
          <target state="translated">あなたが設定されている場合 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 何とか、アクセス設定値を、&lt;em&gt;その後、&lt;/em&gt;呼び出し &lt;code&gt;configure()&lt;/code&gt; 、Djangoは引き上げる &lt;code&gt;RuntimeError&lt;/code&gt; 設定がすでに設定されていることを示しています。この目的のためのプロパティがあります：</target>
        </trans-unit>
        <trans-unit id="fe70b07e6ecfbabb2180c75d50c0a38a0f922032" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;follow&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; the client will follow any redirects and a &lt;code&gt;redirect_chain&lt;/code&gt; attribute will be set in the response object containing tuples of the intermediate urls and status codes.</source>
          <target state="translated">&lt;code&gt;follow&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定すると、クライアントはすべてのリダイレクトに従い、 &lt;code&gt;redirect_chain&lt;/code&gt; 属性は、中間URLとステータスコードのタプルを含む応答オブジェクトに設定されます。</target>
        </trans-unit>
        <trans-unit id="3b6d0e5b836e0ffb759b558f1953cb5c40ecbc36" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;secure&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; the client will emulate an HTTPS request.</source>
          <target state="translated">&lt;code&gt;secure&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定すると、クライアントはHTTPSリクエストをエミュレートします。</target>
        </trans-unit>
        <trans-unit id="ed87f4fbcb2623f91b4272494cedf3618bd43220" translate="yes" xml:space="preserve">
          <source>If you set the &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; setting to True, &lt;code&gt;SecurityMiddleware&lt;/code&gt; will permanently (HTTP 301) redirect all HTTP connections to HTTPS.</source>
          <target state="translated">あなたが設定した場合&lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; の&lt;/a&gt; Trueに設定し、 &lt;code&gt;SecurityMiddleware&lt;/code&gt; は永久に（HTTP 301）HTTPSへのすべてのHTTP接続をリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="804dd8b3f2f0998b19444a70dea6c4f275857e45" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;max_length&lt;/code&gt; attribute, it will be reflected in the &lt;a href=&quot;../forms/widgets#django.forms.Textarea&quot;&gt;&lt;code&gt;Textarea&lt;/code&gt;&lt;/a&gt; widget of the auto-generated form field. However it is not enforced at the model or database level. Use a &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for that.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; 属性を指定すると、自動生成されたフォームフィールドの&lt;a href=&quot;../forms/widgets#django.forms.Textarea&quot;&gt; &lt;code&gt;Textarea&lt;/code&gt; &lt;/a&gt;ウィジェットに反映されます。ただし、モデルまたはデータベースレベルでは適用されません。そのために&lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="9247f5ac3aa9a42d00715df98ff9b7c3141c9780" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;mimetype&lt;/code&gt; of &lt;code&gt;message/rfc822&lt;/code&gt;, it will also accept &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたが指定した場合は &lt;code&gt;mimetype&lt;/code&gt; の &lt;code&gt;message/rfc822&lt;/code&gt; 、それも受け入れます&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt; &lt;code&gt;email.message.Message&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="305c89bb0d6f74a15dce564b912bcda21f76247e" translate="yes" xml:space="preserve">
          <source>If you specify a string value or a &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;, it may contain &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; formatting, which will be replaced by the date/time of the file upload (so that uploaded files don&amp;rsquo;t fill up the given directory). For example:</source>
          <target state="translated">文字列値または&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;を指定する場合、それは&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt;フォーマットを含む可能性があり、これはファイルアップロードの日付/時刻に置き換えられます（そのため、アップロードされたファイルが指定のディレクトリをいっぱいにしないようにします）。例えば：</target>
        </trans-unit>
        <trans-unit id="614fc3b6599f9800b8c0df59893296044168cf2c" translate="yes" xml:space="preserve">
          <source>If you specify both the &lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; attributes, an &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt;属性と&lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt;属性の両方を指定すると、&lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="58aa7a9ed4ab489b04c05563f7b555c7cbfda0ee" translate="yes" xml:space="preserve">
          <source>If you specify both the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; attributes, an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt;属性と&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt;属性の両方を指定すると、&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="e42f6fe4a1eafc9cbe0fe1ed0eb44c26cf3abac5" translate="yes" xml:space="preserve">
          <source>If you try to compile message files with incorrectly flagged strings, you&amp;rsquo;ll get an error message like &lt;code&gt;number of format specifications in 'msgid' and
'msgstr' does not match&lt;/code&gt; or &lt;code&gt;'msgstr' is not a valid Python format string,
unlike 'msgid'&lt;/code&gt;.</source>
          <target state="translated">誤ってフラグが設定された文字列でメッセージファイルをコンパイルしようとすると &lt;code&gt;number of format specifications in 'msgid' and 'msgstr' does not match&lt;/code&gt; または &lt;code&gt;'msgstr' is not a valid Python format string, unlike 'msgid'&lt;/code&gt; などのエラーメッセージが表示されます。'。</target>
        </trans-unit>
        <trans-unit id="f5f573bc4c6fc46c2deb1fdead6cdb73bb482a8e" translate="yes" xml:space="preserve">
          <source>If you try to order by a field that is a relation to another model, Django will use the default ordering on the related model, or order by the related model&amp;rsquo;s primary key if there is no &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;Meta.ordering&lt;/code&gt;&lt;/a&gt; specified. For example, since the &lt;code&gt;Blog&lt;/code&gt; model has no default ordering specified:</source>
          <target state="translated">別のモデルとの関係であるフィールドで&lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;Meta.ordering&lt;/code&gt; &lt;/a&gt;うとすると、Djangoは関連モデルのデフォルトの順序を使用するか、Meta.orderingが指定されていない場合は関連モデルの主キーで並べ替えます。たとえば、 &lt;code&gt;Blog&lt;/code&gt; モデルにはデフォルトの順序が指定されていないため、次のようになります。</target>
        </trans-unit>
        <trans-unit id="2949a48f95fe7e8506fdc6f5701b10f53659defb" translate="yes" xml:space="preserve">
          <source>If you try to run any of these parts from a thread where there is a &lt;em&gt;running event loop&lt;/em&gt;, you will get a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt;&lt;code&gt;SynchronousOnlyOperation&lt;/code&gt;&lt;/a&gt; error. Note that you don&amp;rsquo;t have to be inside an async function directly to have this error occur. If you have called a synchronous function directly from an asynchronous function without going through something like &lt;code&gt;sync_to_async&lt;/code&gt; or a threadpool, then it can also occur, as your code is still running in an asynchronous context.</source>
          <target state="translated">&lt;em&gt;実行中のイベントループ&lt;/em&gt;があるスレッドからこれらのパーツのいずれかを実行しようとすると、&lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt; &lt;code&gt;SynchronousOnlyOperation&lt;/code&gt; &lt;/a&gt;エラーが発生します。このエラーを発生させるために、非同期関数内に直接いる必要はないことに注意してください。 &lt;code&gt;sync_to_async&lt;/code&gt; やスレッドプールなどを経由せずに同期関数を非同期関数から直接呼び出した場合、コードが非同期コンテキストで実行されているため、同期関数が発生する可能性もあります。</target>
        </trans-unit>
        <trans-unit id="c6693a4c5d595d8b5d83b35a6ac98c4c846239c9" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; as explained above, &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; will do this automatically when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;. If you don&amp;rsquo;t have &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, you can still manually serve static files using the &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt;&lt;code&gt;django.views.static.serve()&lt;/code&gt;&lt;/a&gt; view.</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; を&lt;/a&gt;上記で説明したように、&lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;ときに自動的にこれを行います&lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; が&lt;/a&gt;に設定されている &lt;code&gt;True&lt;/code&gt; 。あなたが持っていない場合は &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; で&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; を&lt;/a&gt;、あなたはまだ手動で使用して静的ファイルを提供することができます&lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt; &lt;code&gt;django.views.static.serve()&lt;/code&gt; &lt;/a&gt;ビューを。</target>
        </trans-unit>
        <trans-unit id="8418102b1538f4a4f474193f2874d5390e66e014" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt;&lt;code&gt;{% extends %}&lt;/code&gt;&lt;/a&gt; in a template, it must be the first template tag in that template. Template inheritance won&amp;rsquo;t work, otherwise.</source>
          <target state="translated">テンプレートで&lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt; &lt;code&gt;{% extends %}&lt;/code&gt; &lt;/a&gt;を使用する場合、それはそのテンプレートの最初のテンプレートタグである必要があります。それ以外の場合、テンプレートの継承は機能しません。</target>
        </trans-unit>
        <trans-unit id="3afccef5fe1cf8e14fa9070553ef6dbbc3b09b80" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;set()&lt;/code&gt; methods clear the prefetched cache.</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt; &lt;code&gt;prefetch_related()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;add()&lt;/code&gt; 、 &lt;code&gt;remove()&lt;/code&gt; 、 &lt;code&gt;clear()&lt;/code&gt; 、および &lt;code&gt;set()&lt;/code&gt; メソッドは、プリフェッチされたキャッシュをクリア。</target>
        </trans-unit>
        <trans-unit id="f71c7943193c59ecd27d1e4581a08197f0907309" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;CacheMiddleware&lt;/code&gt;, put &lt;code&gt;LocaleMiddleware&lt;/code&gt; after it.</source>
          <target state="translated">&lt;code&gt;CacheMiddleware&lt;/code&gt; を使用する場合は、 &lt;code&gt;LocaleMiddleware&lt;/code&gt; を後に置きます。</target>
        </trans-unit>
        <trans-unit id="fc8b56cb887dca8be941443856060957b865139d" translate="yes" xml:space="preserve">
          <source>If you use a &lt;code&gt;values()&lt;/code&gt; clause after an &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; call, any fields defined by a &lt;code&gt;select&lt;/code&gt; argument in the &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; must be explicitly included in the &lt;code&gt;values()&lt;/code&gt; call. Any &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; call made after a &lt;code&gt;values()&lt;/code&gt; call will have its extra selected fields ignored.</source>
          <target state="translated">あなたが使用している場合は &lt;code&gt;values()&lt;/code&gt; 句の後&lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt;の呼び出しによって定義されたすべてのフィールド &lt;code&gt;select&lt;/code&gt; における引数&lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt;を明示的に含める必要があります &lt;code&gt;values()&lt;/code&gt; 呼び出し。任意の&lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt;の後に作られたコール &lt;code&gt;values()&lt;/code&gt; の呼び出しは、その余分選択したフィールドは無視されます。</target>
        </trans-unit>
        <trans-unit id="5138658165170713fe8921c287483c369dd879d1" translate="yes" xml:space="preserve">
          <source>If you use a variable that doesn&amp;rsquo;t exist, the template system will insert the value of the &lt;code&gt;string_if_invalid&lt;/code&gt; option, which is set to &lt;code&gt;''&lt;/code&gt; (the empty string) by default.</source>
          <target state="translated">存在しない変数を使用すると、テンプレートシステムは &lt;code&gt;string_if_invalid&lt;/code&gt; オプションの値を挿入します。これは、デフォルトで &lt;code&gt;''&lt;/code&gt; （空の文字列）に設定されています。</target>
        </trans-unit>
        <trans-unit id="d3110291b387e92d09039d47bcce85bc592e4fda" translate="yes" xml:space="preserve">
          <source>If you use an &lt;code&gt;initial&lt;/code&gt; for displaying a formset, you should pass the same &lt;code&gt;initial&lt;/code&gt; when processing that formset&amp;rsquo;s submission so that the formset can detect which forms were changed by the user. For example, you might have something like: &lt;code&gt;ArticleFormSet(request.POST, initial=[...])&lt;/code&gt;.</source>
          <target state="translated">フォームセットを表示するために &lt;code&gt;initial&lt;/code&gt; を使用する場合、フォームセットがユーザーによって変更されたフォームを検出できるように、フォームセットの送信を処理するときに同じ &lt;code&gt;initial&lt;/code&gt; を渡す必要があります。たとえば、 &lt;code&gt;ArticleFormSet(request.POST, initial=[...])&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="7ab4496b070493e1cbd88967385539fa01b3ea78" translate="yes" xml:space="preserve">
          <source>If you use any of Django&amp;rsquo;s custom &lt;code&gt;TestCase&lt;/code&gt; classes, the test runner will clear the contents of the test email outbox at the start of each test case.</source>
          <target state="translated">Djangoのカスタム &lt;code&gt;TestCase&lt;/code&gt; クラスのいずれかを使用する場合、テストランナーは、各テストケースの開始時にテストメール送信ボックスの内容をクリアします。</target>
        </trans-unit>
        <trans-unit id="af63582f03bb6e4c9e15c7b92a57d1ba5b4b0680" translate="yes" xml:space="preserve">
          <source>If you use caching middleware, it&amp;rsquo;s important to put each half in the right place within the &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting. That&amp;rsquo;s because the cache middleware needs to know which headers by which to vary the cache storage. Middleware always adds something to the &lt;code&gt;Vary&lt;/code&gt; response header when it can.</source>
          <target state="translated">キャッシュミドルウェアを使用する場合は、各半分を&lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;設定内の適切な場所に配置することが重要です。これは、キャッシュミドルウェアが、キャッシュストレージを変更するヘッダーを認識する必要があるためです。ミドルウェアは、可能な場合は常に &lt;code&gt;Vary&lt;/code&gt; 応答ヘッダーに何かを追加します。</target>
        </trans-unit>
        <trans-unit id="eb3ba9d9638be9dba67498258cd53f1f8d8c441d" translate="yes" xml:space="preserve">
          <source>If you use cookie-based sessions, pay extra care that your secret key is always kept completely secret, for any system which might be remotely accessible.</source>
          <target state="translated">クッキーベースのセッションを使用している場合は、リモートからアクセスできる可能性のあるシステムのために、秘密鍵が常に完全に秘密にされていることに特に注意してください。</target>
        </trans-unit>
        <trans-unit id="ac9946ee9d075e84bfbeea0cd48def7c04248d87" translate="yes" xml:space="preserve">
          <source>If you use custom &lt;code&gt;Manager&lt;/code&gt; objects, take note that the first &lt;code&gt;Manager&lt;/code&gt; Django encounters (in the order in which they&amp;rsquo;re defined in the model) has a special status. Django interprets the first &lt;code&gt;Manager&lt;/code&gt; defined in a class as the &amp;ldquo;default&amp;rdquo; &lt;code&gt;Manager&lt;/code&gt;, and several parts of Django (including &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt;) will use that &lt;code&gt;Manager&lt;/code&gt; exclusively for that model. As a result, it&amp;rsquo;s a good idea to be careful in your choice of default manager in order to avoid a situation where overriding &lt;code&gt;get_queryset()&lt;/code&gt; results in an inability to retrieve objects you&amp;rsquo;d like to work with.</source>
          <target state="translated">カスタム使用している場合は &lt;code&gt;Manager&lt;/code&gt; オブジェクトを、最初にそのノートを取る &lt;code&gt;Manager&lt;/code&gt; （これらはモデルで定義されていた順序で）Djangoの出会いは特別な地位を持っています。 Django はクラスで定義された最初の &lt;code&gt;Manager&lt;/code&gt; を「デフォルト」の &lt;code&gt;Manager&lt;/code&gt; として解釈し、Djangoのいくつかの部分（&lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt;を含む）はその &lt;code&gt;Manager&lt;/code&gt; をそのモデル専用に使用します。結果として、 &lt;code&gt;get_queryset()&lt;/code&gt; をオーバーライドすると、操作したいオブジェクトを取得できなくなる状況を回避するために、デフォルトマネージャーの選択には注意することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3354dc763efee5cbb2a050e1c410a3261d6d6efb" translate="yes" xml:space="preserve">
          <source>If you use database caching with multiple databases, you&amp;rsquo;ll also need to set up routing instructions for your database cache table. For the purposes of routing, the database cache table appears as a model named &lt;code&gt;CacheEntry&lt;/code&gt;, in an application named &lt;code&gt;django_cache&lt;/code&gt;. This model won&amp;rsquo;t appear in the models cache, but the model details can be used for routing purposes.</source>
          <target state="translated">複数のデータベースでデータベースキャッシュを使用する場合は、データベースキャッシュテーブルのルーティング手順も設定する必要があります。ルーティングの目的のために、データベースキャッシュテーブルは、名前のモデルとして表示されます &lt;code&gt;CacheEntry&lt;/code&gt; というアプリケーションで、 &lt;code&gt;django_cache&lt;/code&gt; 。このモデルはモデルキャッシュに表示されませんが、モデルの詳細はルーティングの目的で使用できます。</target>
        </trans-unit>
        <trans-unit id="17cfa5ced8dcbb7e597664d335ed9ae258277518" translate="yes" xml:space="preserve">
          <source>If you use more than one &lt;code&gt;JavaScriptCatalog&lt;/code&gt; view on a site and some of them define the same strings, the strings in the catalog that was loaded last take precedence.</source>
          <target state="translated">サイトで複数の &lt;code&gt;JavaScriptCatalog&lt;/code&gt; ビューを使用し、それらのいくつかが同じ文字列を定義している場合、最後に読み込まれたカタログ内の文字列が優先されます。</target>
        </trans-unit>
        <trans-unit id="e46850bb8ec958f8fdf1580dc6739aff53945b19" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;cached_db&lt;/code&gt; session backend, you also need to follow the configuration instructions for the &lt;a href=&quot;#using-database-backed-sessions&quot;&gt;using database-backed sessions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cached_db&lt;/code&gt; セッションバックエンドを使用する場合は、データベースを使用するセッションを使用するための構成手順にも従う必要があり&lt;a href=&quot;#using-database-backed-sessions&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6cf187a7f4b8a72e3eca21b8c45ef8b3ee2725a2" translate="yes" xml:space="preserve">
          <source>If you use the Bash shell, consider installing the Django bash completion script, which lives in &lt;code&gt;extras/django_bash_completion&lt;/code&gt; in the Django source distribution. It enables tab-completion of &lt;code&gt;django-admin&lt;/code&gt; and &lt;code&gt;manage.py&lt;/code&gt; commands, so you can, for instance&amp;hellip;</source>
          <target state="translated">Bashシェルを使用する場合は、Djangoソース配布の &lt;code&gt;extras/django_bash_completion&lt;/code&gt; にあるDjango bash完了スクリプトのインストールを検討してください。 &lt;code&gt;django-admin&lt;/code&gt; と &lt;code&gt;manage.py&lt;/code&gt; コマンドのタブ補完を可能にするので、例えば&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="544a332c4cb22ae2768b4c0f6f7c943861e6344b" translate="yes" xml:space="preserve">
          <source>If you use the MyISAM storage engine please be aware of the fact that you will receive database-generated errors if you try to use the &lt;a href=&quot;../topics/db/transactions#topics-db-transactions-savepoints&quot;&gt;savepoint-related methods of the transactions API&lt;/a&gt;. The reason for this is that detecting the storage engine of a MySQL database/table is an expensive operation so it was decided it isn&amp;rsquo;t worth to dynamically convert these methods in no-op&amp;rsquo;s based in the results of such detection.</source>
          <target state="translated">MyISAMストレージエンジンを使用している場合&lt;a href=&quot;../topics/db/transactions#topics-db-transactions-savepoints&quot;&gt;、トランザクションAPIのセーブポイント関連のメソッド&lt;/a&gt;を使用しようとすると、データベースで生成されたエラーが発生することに注意してください。この理由は、MySQLデータベース/テーブルのストレージエンジンの検出はコストのかかる操作であるため、そのような検出の結果に基づいてこれらのメソッドを何もしないで動的に変換することは価値がないと判断されたためです。</target>
        </trans-unit>
        <trans-unit id="612e62c7aaac6d3ed93e17cc5eb89853c3216591" translate="yes" xml:space="preserve">
          <source>If you use the default authentication backend, then your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute. A non-unique username field is allowed if you use a custom authentication backend that can support it.</source>
          <target state="translated">デフォルトの認証バックエンドを使用している場合、モデルには識別目的で使用できる単一の一意のフィールドが必要です。これには、ユーザ名、電子メールアドレス、またはその他のユニークな属性を使用することができます。一意ではないユーザ名フィールドは、それをサポートできるカスタム認証バックエンドを使用している場合に許可されます。</target>
        </trans-unit>
        <trans-unit id="632cae7f626396f49915f6528bfd124915502643" translate="yes" xml:space="preserve">
          <source>If you use this directly in a subclass, &lt;code&gt;objects&lt;/code&gt; will be the default manager if you declare no managers in the base class:</source>
          <target state="translated">これをサブクラスで直接使用する場合、基本クラスでマネージャーを宣言しないと、 &lt;code&gt;objects&lt;/code&gt; がデフォルトのマネージャーになります。</target>
        </trans-unit>
        <trans-unit id="0be2ddd3771f7e5301d04d44291e1551fbddd667" translate="yes" xml:space="preserve">
          <source>If you use this example, be sure to change the &lt;code&gt;'filename'&lt;/code&gt; path to a location that&amp;rsquo;s writable by the user that&amp;rsquo;s running the Django application.</source>
          <target state="translated">この例を使用する場合は、 &lt;code&gt;'filename'&lt;/code&gt; パスを、Djangoアプリケーションを実行しているユーザーが書き込み可能な場所に変更してください。</target>
        </trans-unit>
        <trans-unit id="5390e72ce357a7eabd5449a3955b90282d9e0e6d" translate="yes" xml:space="preserve">
          <source>If you want &lt;em&gt;no&lt;/em&gt; bulk actions available for a given &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;, set &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.actions&quot;&gt;&lt;code&gt;ModelAdmin.actions&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">必要に応じて&lt;em&gt;いない&lt;/em&gt;特定のためのバルクアクションが利用可能&lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; の&lt;/a&gt;、セット&lt;a href=&quot;index#django.contrib.admin.ModelAdmin.actions&quot;&gt; &lt;code&gt;ModelAdmin.actions&lt;/code&gt; &lt;/a&gt;に &lt;code&gt;None&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3aec3757f7c2abfc3d404eaea0295a8443022fe5" translate="yes" xml:space="preserve">
          <source>If you want a form for the &lt;code&gt;Author&lt;/code&gt; model that includes only the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; fields, you would specify &lt;code&gt;fields&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; フィールドと &lt;code&gt;title&lt;/code&gt; フィールドのみを含む &lt;code&gt;Author&lt;/code&gt; モデルのフォームが必要な場合は、 &lt;code&gt;fields&lt;/code&gt; を指定するか &lt;code&gt;exclude&lt;/code&gt; ように除外します。</target>
        </trans-unit>
        <trans-unit id="dac386a15e0c8bb88ff7bb297d68523406916892" translate="yes" xml:space="preserve">
          <source>If you want context data to take priority over context processors, use the following pattern:</source>
          <target state="translated">コンテキストデータをコンテキストプロセッサよりも優先させたい場合は、以下のパターンを使用します。</target>
        </trans-unit>
        <trans-unit id="7e20d9f91dd7be41dd2b75340fb5ad46d7aff9dd" translate="yes" xml:space="preserve">
          <source>If you want customized deletion behavior, you can override the &lt;code&gt;delete()&lt;/code&gt; method. See &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;Overriding predefined model methods&lt;/a&gt; for more details.</source>
          <target state="translated">カスタマイズされた削除動作が必要な場合は、 &lt;code&gt;delete()&lt;/code&gt; メソッドをオーバーライドできます。詳細については、&lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;事前定義されたモデルメソッドのオーバーライドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="93acdd6e4c8eae4615be0fc45ec00696af259471" translate="yes" xml:space="preserve">
          <source>If you want customized saving behavior, you can override this &lt;code&gt;save()&lt;/code&gt; method. See &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;Overriding predefined model methods&lt;/a&gt; for more details.</source>
          <target state="translated">保存動作をカスタマイズしたい場合は、この &lt;code&gt;save()&lt;/code&gt; メソッドをオーバーライドできます。詳細については、&lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;事前定義されたモデルメソッドのオーバーライドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be8f02ec9aac915643a3af8cb57319e744527c0c" translate="yes" xml:space="preserve">
          <source>If you want more control over your URLs, you can reference a specific view in your URLconf:</source>
          <target state="translated">URL をよりコントロールしたい場合は、URLconf で特定のビューを参照することができます。</target>
        </trans-unit>
        <trans-unit id="f457998a8d8d75ab48817a88d807beddf2f50846" translate="yes" xml:space="preserve">
          <source>If you want the protection that HTTPS provides, and have enabled it on your server, there are some additional steps you may need:</source>
          <target state="translated">HTTPS が提供する保護を希望し、サーバ上で HTTPS を有効にしている場合は、いくつかの追加の手順が必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a14d621828e626147519d733f8c184b1c0c37ab4" translate="yes" xml:space="preserve">
          <source>If you want to add a check to a model class, the approach is &lt;em&gt;almost&lt;/em&gt; the same: the only difference is that the check is a classmethod, not an instance method:</source>
          <target state="translated">チェックをモデルクラスに追加する場合のアプローチは&lt;em&gt;ほとんど&lt;/em&gt;同じです。唯一の違いは、チェックがインスタンスメソッドではなくクラスメソッドであることです。</target>
        </trans-unit>
        <trans-unit id="56b33aa10e58145097aa338a7bdcf35a9f1eab1d" translate="yes" xml:space="preserve">
          <source>If you want to allow Unicode characters, pass &lt;code&gt;allow_unicode=True&lt;/code&gt;. For example:</source>
          <target state="translated">Unicode文字を許可する場合は、 &lt;code&gt;allow_unicode=True&lt;/code&gt; を渡します。例えば：</target>
        </trans-unit>
        <trans-unit id="89e6786d70f17235ea0a07bab1827e495e61aad1" translate="yes" xml:space="preserve">
          <source>If you want to allow editing and creating an &lt;code&gt;Image&lt;/code&gt; instance on the &lt;code&gt;Product&lt;/code&gt;, add/change views you can use &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt;&lt;code&gt;GenericTabularInline&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt;&lt;code&gt;GenericStackedInline&lt;/code&gt;&lt;/a&gt; (both subclasses of &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt;) provided by &lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes.admin&quot;&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/a&gt;. They implement tabular and stacked visual layouts for the forms representing the inline objects, respectively, just like their non-generic counterparts. They behave just like any other inline. In your &lt;code&gt;admin.py&lt;/code&gt; for this example app:</source>
          <target state="translated">&lt;code&gt;Product&lt;/code&gt; で &lt;code&gt;Image&lt;/code&gt; インスタンスの編集と作成を許可する場合は、&lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes.admin&quot;&gt; &lt;code&gt;admin&lt;/code&gt; &lt;/a&gt;によって提供される&lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt; &lt;code&gt;GenericTabularInline&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt; &lt;code&gt;GenericStackedInline&lt;/code&gt; &lt;/a&gt;（どちらも&lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; の&lt;/a&gt;サブクラス）を使用してビューを追加/変更できます。それらは、非ジェネリック版と同様に、インラインオブジェクトを表すフォームの表形式およびスタック形式のビジュアルレイアウトをそれぞれ実装します。他のインラインと同じように動作します。あなたに &lt;code&gt;admin.py&lt;/code&gt; この例のアプリのために：</target>
        </trans-unit>
        <trans-unit id="dc86f9ac38476957adf53db6078bb6b2f39a0899" translate="yes" xml:space="preserve">
          <source>If you want to associate additional assets with a form &amp;ndash; for example, CSS for form layout &amp;ndash; add a &lt;code&gt;Media&lt;/code&gt; declaration to the form:</source>
          <target state="translated">追加のアセットをフォーム（フォームレイアウトのCSSなど）に関連付ける場合は、フォームに &lt;code&gt;Media&lt;/code&gt; 宣言を追加します。</target>
        </trans-unit>
        <trans-unit id="ca5663445451e733c438680c0b1cdbdb78de064c" translate="yes" xml:space="preserve">
          <source>If you want to automatically load initial data for an app, create a &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;data migration&lt;/a&gt;. Migrations are run when setting up the test database, so the data will be available there, subject to &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;some limitations&lt;/a&gt;.</source>
          <target state="translated">アプリの初期データを自動的に読み込む場合は、&lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;データ移行を&lt;/a&gt;作成します。移行はテストデータベースの設定時に実行されるため、データはそこで利用できますが、&lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;いくつかの制限があり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7f619ca80296d2ab8fb9d0ccf4cddacae4955198" translate="yes" xml:space="preserve">
          <source>If you want to be really adventurous, you could even mix a &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; subclass that is able to return &lt;em&gt;both&lt;/em&gt; HTML and JSON content, depending on some property of the HTTP request, such as a query argument or a HTTP header. Mix in both the &lt;code&gt;JSONResponseMixin&lt;/code&gt; and a &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt;, and override the implementation of &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; to defer to the appropriate rendering method depending on the type of response that the user requested:</source>
          <target state="translated">冒険したい場合は、クエリ引数やHTTPヘッダーなどのHTTPリクエストのプロパティに応じて、HTMLコンテンツとJSONコンテンツの&lt;em&gt;両方&lt;/em&gt;を返すことができる&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;サブクラスを混在させることもできます。 &lt;code&gt;JSONResponseMixin&lt;/code&gt; とSingleObjectTemplateResponseMixinの両方を混合し、&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; の&lt;/a&gt;実装をオーバーライドして、ユーザーが要求した応答のタイプに応じて適切なレンダリングメソッドに&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt;にします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b286b7423a58f0cdbf8dc79961083cfa7e97f673" translate="yes" xml:space="preserve">
          <source>If you want to call the group something else, you can set &lt;code&gt;pk_url_kwarg&lt;/code&gt; on the view. More details can be found in the reference for &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">グループに別の &lt;code&gt;pk_url_kwarg&lt;/code&gt; 付けたい場合は、ビューにpk_url_kwargを設定できます。詳細については、&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;のリファレンスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="73609264d7cce96ce235888ee071c9ba08110d63" translate="yes" xml:space="preserve">
          <source>If you want to change an unmanaged model (&lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed=False&lt;/code&gt;&lt;/a&gt;) to managed, you must remove &lt;code&gt;managed=False&lt;/code&gt; and generate a migration before making other schema-related changes to the model, since schema changes that appear in the migration that contains the operation to change &lt;code&gt;Meta.managed&lt;/code&gt; may not be applied.</source>
          <target state="translated">非管理対象モデル（&lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed=False&lt;/code&gt; &lt;/a&gt;）をmanaged に変更する場合は、 &lt;code&gt;managed=False&lt;/code&gt; を削除して、モデルに他のスキーマ関連の変更を加える前に移行を生成する必要があります。変更 &lt;code&gt;Meta.managed&lt;/code&gt; は適用されない場合があります。</target>
        </trans-unit>
        <trans-unit id="5a36c203fa50ee87df5fef8091b5a765a085602e" translate="yes" xml:space="preserve">
          <source>If you want to change the URL of the polls detail view to something else, perhaps to something like &lt;code&gt;polls/specifics/12/&lt;/code&gt; instead of doing it in the template (or templates) you would change it in &lt;code&gt;polls/urls.py&lt;/code&gt;:</source>
          <target state="translated">polls詳細ビューのURLをテンプレート（またはテンプレート）ではなく、 &lt;code&gt;polls/specifics/12/&lt;/code&gt; に変更する場合は、 &lt;code&gt;polls/urls.py&lt;/code&gt; で変更します。</target>
        </trans-unit>
        <trans-unit id="cd1a5725d6fa059579a40d41f2adb758f0ec7936" translate="yes" xml:space="preserve">
          <source>If you want to change the server&amp;rsquo;s IP, pass it along with the port. For example, to listen on all available public IPs (which is useful if you are running Vagrant or want to show off your work on other computers on the network), use:</source>
          <target state="translated">サーバーのIPを変更する場合は、ポートと一緒に渡します。たとえば、使用可能なすべてのパブリックIPをリッスンするには（これは、Vagrantを実行している場合、またはネットワーク上の他のコンピューターでの作業を自慢したい場合に便利です）、次を使用します。</target>
        </trans-unit>
        <trans-unit id="7ac7bf138057c02102b254cb4eb4bc5c8cedeaa4" translate="yes" xml:space="preserve">
          <source>If you want to change the server&amp;rsquo;s port, pass it as a command-line argument. For instance, this command starts the server on port 8080:</source>
          <target state="translated">サーバーのポートを変更する場合は、コマンドライン引数として渡します。たとえば、次のコマンドはポート8080でサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="5a92e0eac7cf91c4cf108e75a7e4cb1c79be68f3" translate="yes" xml:space="preserve">
          <source>If you want to clear a bunch of keys at once, &lt;code&gt;delete_many()&lt;/code&gt; can take a list of keys to be cleared:</source>
          <target state="translated">&lt;code&gt;delete_many()&lt;/code&gt; キーを一度にクリアしたい場合、delete_many（）はクリアするキーのリストを取得できます。</target>
        </trans-unit>
        <trans-unit id="1a4bfa95187de8542d04a8bb8ab8cdef55f56bbf" translate="yes" xml:space="preserve">
          <source>If you want to clear the set of deferred fields, pass &lt;code&gt;None&lt;/code&gt; as a parameter to &lt;code&gt;defer()&lt;/code&gt;:</source>
          <target state="translated">遅延フィールドのセットをクリアしたい場合は、パラメーターとして &lt;code&gt;None&lt;/code&gt; を &lt;code&gt;defer()&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="b6383cfa56650e6cabffa9d626bc1f48a0ac3ae1" translate="yes" xml:space="preserve">
          <source>If you want to combine the parts in different ways, or apply other processing to the final key (e.g., taking a hash digest of the key parts), you can provide a custom key function.</source>
          <target state="translated">異なる方法でパーツを組み合わせたり、最終的なキーに他の処理を適用したりしたい場合(キーパーツのハッシュダイジェストを取るなど)、カスタムキー機能を提供することができます。</target>
        </trans-unit>
        <trans-unit id="b365d93078a708fa2af27d965ccfe68bed9e884a" translate="yes" xml:space="preserve">
          <source>If you want to create &lt;a href=&quot;#proxy-models-permissions-topic&quot;&gt;permissions for a proxy model&lt;/a&gt;, pass &lt;code&gt;for_concrete_model=False&lt;/code&gt; to &lt;a href=&quot;../../ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;ContentTypeManager.get_for_model()&lt;/code&gt;&lt;/a&gt; to get the appropriate &lt;code&gt;ContentType&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#proxy-models-permissions-topic&quot;&gt;プロキシモデルの権限&lt;/a&gt;を作成する場合は、 &lt;code&gt;for_concrete_model=False&lt;/code&gt; を&lt;a href=&quot;../../ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;ContentTypeManager.get_for_model()&lt;/code&gt; &lt;/a&gt;に渡して、適切な &lt;code&gt;ContentType&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="baafb11630a741f29de95c236634c1933ad61e35" translate="yes" xml:space="preserve">
          <source>If you want to create a formset that allows you to edit books belonging to a particular author, you could do this:</source>
          <target state="translated">特定の著者に属する本を編集できるようなフォームセットを作成したい場合は、このようにするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="d22c7f47483da249cee231a92c3ccfc41e9f41cc" translate="yes" xml:space="preserve">
          <source>If you want to customize the default admin site, you can &lt;a href=&quot;#overriding-default-admin-site&quot;&gt;override it&lt;/a&gt;.</source>
          <target state="translated">デフォルトの管理サイトをカスタマイズしたい場合は、それを&lt;a href=&quot;#overriding-default-admin-site&quot;&gt;上書き&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="c29543c5a12e486f79959dd0c7c612e7d05d854c" translate="yes" xml:space="preserve">
          <source>If you want to disable sorting for some columns, set &lt;code&gt;sortable_by&lt;/code&gt; to a collection (e.g. &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, or &lt;code&gt;set&lt;/code&gt;) of the subset of &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt; that you want to be sortable. An empty collection disables sorting for all columns.</source>
          <target state="translated">あなたは無効に設定され、いくつかの列、ソートのためにしたい場合は &lt;code&gt;sortable_by&lt;/code&gt; コレクションに（例えば &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;tuple&lt;/code&gt; 、または &lt;code&gt;set&lt;/code&gt; のサブセットの）&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;list_display&lt;/code&gt; &lt;/a&gt;あなたはソート可能になりたいということ。空のコレクションは、すべての列の並べ替えを無効にします。</target>
        </trans-unit>
        <trans-unit id="819a05f247100e1405566f18b1980253c4ad662e" translate="yes" xml:space="preserve">
          <source>If you want to display many-to-many relations using an inline, you can do so by defining an &lt;code&gt;InlineModelAdmin&lt;/code&gt; object for the relationship:</source>
          <target state="translated">インラインを使用して多対多のリレーションを表示する場合は、リレーションの &lt;code&gt;InlineModelAdmin&lt;/code&gt; オブジェクトを定義することで表示できます。</target>
        </trans-unit>
        <trans-unit id="4f2c2b260acd4e58d5f685e485d85b0eafeeb6b4" translate="yes" xml:space="preserve">
          <source>If you want to do any special formatting for either the title or description, &lt;a href=&quot;../templates/language&quot;&gt;Django templates&lt;/a&gt; can be used instead. Their paths can be specified with the &lt;code&gt;title_template&lt;/code&gt; and &lt;code&gt;description_template&lt;/code&gt; attributes on the &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class. The templates are rendered for each item and are passed two template context variables:</source>
          <target state="translated">タイトルまたは説明のいずれかに特別な書式を設定する場合は、代わりに&lt;a href=&quot;../templates/language&quot;&gt;Djangoテンプレート&lt;/a&gt;を使用できます。それらのパスは、&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;クラスの &lt;code&gt;title_template&lt;/code&gt; 属性と &lt;code&gt;description_template&lt;/code&gt; 属性で指定できます。テンプレートはアイテムごとにレンダリングされ、2つのテンプレートコンテキスト変数が渡されます。</target>
        </trans-unit>
        <trans-unit id="9a2a9d97c3bcdcc33735186ed18274e012b287d6" translate="yes" xml:space="preserve">
          <source>If you want to exclude multiple applications, pass &lt;code&gt;--exclude&lt;/code&gt; more than once:</source>
          <target state="translated">複数のアプリケーションを除外する場合は、 &lt;code&gt;--exclude&lt;/code&gt; を2回以上渡します。</target>
        </trans-unit>
        <trans-unit id="47dc3f16d887ad06159fa3d81469f66328dc09f5" translate="yes" xml:space="preserve">
          <source>If you want to find a URL in a specific admin instance, provide the name of that instance as a &lt;code&gt;current_app&lt;/code&gt; hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named &lt;code&gt;custom&lt;/code&gt;, you would need to call:</source>
          <target state="translated">特定の管理インスタンスでURLを検索する場合は、そのインスタンスの名前を &lt;code&gt;current_app&lt;/code&gt; ヒントとしてリバースコールに提供します。たとえば、 &lt;code&gt;custom&lt;/code&gt; という名前の管理インスタンスからの管理ビューが特に必要な場合は、次を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="bdd8542fd2cea7b2e24bbfa472ae38020dc7bf81" translate="yes" xml:space="preserve">
          <source>If you want to generate more than one aggregate, you add another argument to the &lt;code&gt;aggregate()&lt;/code&gt; clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query:</source>
          <target state="translated">複数の集計を生成する場合は、 &lt;code&gt;aggregate()&lt;/code&gt; 句に別の引数を追加します。したがって、すべての書籍の最大価格と最小価格も知りたい場合は、次のクエリを発行します。</target>
        </trans-unit>
        <trans-unit id="e5ea26ccc56d69b0c9654b4277fee5e12990d99b" translate="yes" xml:space="preserve">
          <source>If you want to get a key&amp;rsquo;s value or set a value if the key isn&amp;rsquo;t in the cache, there is the &lt;code&gt;get_or_set()&lt;/code&gt; method. It takes the same parameters as &lt;code&gt;get()&lt;/code&gt; but the default is set as the new cache value for that key, rather than returned:</source>
          <target state="translated">キーの値を取得する場合、またはキーがキャッシュにない場合に値を設定する場合は、 &lt;code&gt;get_or_set()&lt;/code&gt; メソッドがあります。 &lt;code&gt;get()&lt;/code&gt; と同じパラメーターを使用しますが、デフォルトでは、返されるのではなく、そのキーの新しいキャッシュ値として設定されます。</target>
        </trans-unit>
        <trans-unit id="e511661d588f548844ad43177d187a8b8e72782e" translate="yes" xml:space="preserve">
          <source>If you want to give the migration(s) a meaningful name instead of a generated one, you can use the &lt;a href=&quot;../ref/django-admin#cmdoption-makemigrations-name&quot;&gt;&lt;code&gt;makemigrations --name&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">マイグレーションに、生成された名前ではなく、意味のある名前を付けたい場合は、&lt;a href=&quot;../ref/django-admin#cmdoption-makemigrations-name&quot;&gt; &lt;code&gt;makemigrations --name&lt;/code&gt; &lt;/a&gt;オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="bb3d67e91b95e1098c276074de20f2c056d12673" translate="yes" xml:space="preserve">
          <source>If you want to include literal percent signs in the query, you have to double them if you are passing parameters.</source>
          <target state="translated">クエリにリテラルのパーセント記号を入れたい場合は、パラメータを渡す場合は2倍にしなければなりません。</target>
        </trans-unit>
        <trans-unit id="9211860caf6395f0b137a8be9dc6cdd28adf359b" translate="yes" xml:space="preserve">
          <source>If you want to inherit from &lt;code&gt;AbstractBase&lt;/code&gt;, but provide a different default manager, you can provide the default manager on the child class:</source>
          <target state="translated">&lt;code&gt;AbstractBase&lt;/code&gt; から継承したいが、別のデフォルトマネージャーを提供する場合は、子クラスにデフォルトマネージャーを提供できます。</target>
        </trans-unit>
        <trans-unit id="3a2a9c4986e8f5e6654175d1d77008d474dcec7c" translate="yes" xml:space="preserve">
          <source>If you want to instead provide custom key validation logic for one of the built-in backends, you can subclass it, override just the &lt;code&gt;validate_key&lt;/code&gt; method, and follow the instructions for &lt;a href=&quot;#using-a-custom-cache-backend&quot;&gt;using a custom cache backend&lt;/a&gt;. For instance, to do this for the &lt;code&gt;locmem&lt;/code&gt; backend, put this code in a module:</source>
          <target state="translated">代わりに、組み込みバックエンドの1つにカスタムキー検証ロジックを提供する場合は、それをサブクラス化して、 &lt;code&gt;validate_key&lt;/code&gt; メソッドのみをオーバーライド&lt;a href=&quot;#using-a-custom-cache-backend&quot;&gt;し、カスタムキャッシュバックエンド&lt;/a&gt;を使用するための手順に従います。たとえば、 &lt;code&gt;locmem&lt;/code&gt; バックエンドに対してこれを行うには、次のコードをモジュールに配置します。</target>
        </trans-unit>
        <trans-unit id="6c92f47c8dd63980980d8036fb8b746fc5307c13" translate="yes" xml:space="preserve">
          <source>If you want to let each individual user specify which language they prefer, then you also need to use the &lt;code&gt;LocaleMiddleware&lt;/code&gt;. &lt;code&gt;LocaleMiddleware&lt;/code&gt; enables language selection based on data from the request. It customizes content for each user.</source>
          <target state="translated">個々のユーザーが希望する言語を指定できるようにする場合は、 &lt;code&gt;LocaleMiddleware&lt;/code&gt; も使用する必要があります。 &lt;code&gt;LocaleMiddleware&lt;/code&gt; は、リクエストからのデータに基づいて言語を選択できるようにします。ユーザーごとにコンテンツをカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="187ea719ed80062b93104d8f62e4ca6ba48d9ded" translate="yes" xml:space="preserve">
          <source>If you want to lock parents models when using &lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt;, you must specify parent link fields (by default &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt;) in the &lt;code&gt;of&lt;/code&gt; argument. For example:</source>
          <target state="translated">&lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;複数テーブルの継承&lt;/a&gt;を使用するときに親モデルをロックする場合は、 &lt;code&gt;of&lt;/code&gt; 引数で親リンクフィールド（デフォルトでは &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt; ）を指定する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="1bc0322e1dee230846f920ac1858bed59fef0294" translate="yes" xml:space="preserve">
          <source>If you want to make one widget instance look different from another, you will need to specify additional attributes at the time when the widget object is instantiated and assigned to a form field (and perhaps add some rules to your CSS files).</source>
          <target state="translated">1つのウィジェットインスタンスを別のウィジェットインスタンスと異なる外観にしたい場合、ウィジェットオブジェクトがインスタンス化され、フォームフィールドに割り当てられる際に、追加の属性を指定する必要があります (そして、おそらくCSSファイルにいくつかのルールを追加する必要があります)。</target>
        </trans-unit>
        <trans-unit id="358714f5af82b779858f9cc401582af9b516624f" translate="yes" xml:space="preserve">
          <source>If you want to obtain the cache key used for a cached fragment, you can use &lt;code&gt;make_template_fragment_key&lt;/code&gt;. &lt;code&gt;fragment_name&lt;/code&gt; is the same as second argument to the &lt;code&gt;cache&lt;/code&gt; template tag; &lt;code&gt;vary_on&lt;/code&gt; is a list of all additional arguments passed to the tag. This function can be useful for invalidating or overwriting a cached item, for example:</source>
          <target state="translated">キャッシュされたフラグメントに使用されるキャッシュキーを取得する場合は、 &lt;code&gt;make_template_fragment_key&lt;/code&gt; を使用できます。 &lt;code&gt;fragment_name&lt;/code&gt; は、 &lt;code&gt;cache&lt;/code&gt; テンプレートタグの2番目の引数と同じです。 &lt;code&gt;vary_on&lt;/code&gt; は、タグに渡されるすべての追加の引数のリストです。この関数は、キャッシュされたアイテムを無効化または上書きする場合に役立ちます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="ba4ffba3fdbb584b8cac1266ddb0e4fc416423c1" translate="yes" xml:space="preserve">
          <source>If you want to override certain options of the cache backend the storage uses, specify a custom entry in the &lt;a href=&quot;../settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting named &lt;code&gt;'staticfiles'&lt;/code&gt;. It falls back to using the &lt;code&gt;'default'&lt;/code&gt; cache backend.</source>
          <target state="translated">あなたがキャッシュバックエンドストレージ用途の特定のオプションを無効にしたい場合は、カスタム項目を指定&lt;a href=&quot;../settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;という名前の設定を &lt;code&gt;'staticfiles'&lt;/code&gt; 。 &lt;code&gt;'default'&lt;/code&gt; キャッシュバックエンドの使用にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="08bf32a6e2fd3850e1313d6ddcddcbe5d0693024" translate="yes" xml:space="preserve">
          <source>If you want to pass additional parameters to &lt;code&gt;xgettext&lt;/code&gt;, you need to create a custom &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; command and override its &lt;code&gt;xgettext_options&lt;/code&gt; attribute:</source>
          <target state="translated">追加のパラメーターを &lt;code&gt;xgettext&lt;/code&gt; に渡したい場合は、カスタムの&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt;コマンドを作成し、その &lt;code&gt;xgettext_options&lt;/code&gt; 属性をオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="0fcbbd1a64b93e2ce60b3ae36a4546b17d7404e5" translate="yes" xml:space="preserve">
          <source>If you want to preprocess the value just before saving, you can use &lt;a href=&quot;../ref/models/fields#django.db.models.Field.pre_save&quot;&gt;&lt;code&gt;pre_save()&lt;/code&gt;&lt;/a&gt;. For example, Django&amp;rsquo;s &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; uses this method to set the attribute correctly in the case of &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now_add&quot;&gt;&lt;code&gt;auto_now_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">保存する直前に値を前処理する場合は、&lt;a href=&quot;../ref/models/fields#django.db.models.Field.pre_save&quot;&gt; &lt;code&gt;pre_save()&lt;/code&gt; を&lt;/a&gt;使用できます。たとえば、Djangoの&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;はこのメソッドを使用して、&lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;auto_now&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now_add&quot;&gt; &lt;code&gt;auto_now_add&lt;/code&gt; の&lt;/a&gt;場合に属性を正しく設定します。</target>
        </trans-unit>
        <trans-unit id="82aeed39d2f4a0fb067ad666d1bfbc02c9469e46" translate="yes" xml:space="preserve">
          <source>If you want to provide some additional classes in addition to the error and required classes that may be required, you can provide those classes as an argument:</source>
          <target state="translated">エラークラスや必須クラスに加えて、いくつかの追加クラスを提供したい場合は、それらのクラスを引数として提供することができます。</target>
        </trans-unit>
        <trans-unit id="d347d884e0e4a232836473d57e45545a254b5f95" translate="yes" xml:space="preserve">
          <source>If you want to put the template overrides in an app called &lt;code&gt;myapp&lt;/code&gt; and the templates to override are named &lt;code&gt;blog/list.html&lt;/code&gt; and &lt;code&gt;blog/post.html&lt;/code&gt;, then your directory structure will look like:</source>
          <target state="translated">テンプレートオーバーライドを &lt;code&gt;myapp&lt;/code&gt; というアプリに配置し、オーバーライドするテンプレートの名前が &lt;code&gt;blog/list.html&lt;/code&gt; および &lt;code&gt;blog/post.html&lt;/code&gt; である場合、ディレクトリ構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="8675cd01d369192cb8585e183346b84ac04d8fa3" translate="yes" xml:space="preserve">
          <source>If you want to render templates with customizations from your &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting, such as context processors for example, use the &lt;a href=&quot;#django.forms.renderers.TemplatesSetting&quot;&gt;&lt;code&gt;TemplatesSetting&lt;/code&gt;&lt;/a&gt; renderer.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;設定からのカスタマイズを使用して&lt;a href=&quot;#django.forms.renderers.TemplatesSetting&quot;&gt; &lt;code&gt;TemplatesSetting&lt;/code&gt; &lt;/a&gt;例えば、コンテキストプロセッサなど）をレンダリングする場合は、TemplatesSettingレンダラーを使用します。</target>
        </trans-unit>
        <trans-unit id="a54cf1350fd260fcc8471b214783924c0962b9d7" translate="yes" xml:space="preserve">
          <source>If you want to render the context only with the variables provided (or even no variables at all), use the &lt;code&gt;only&lt;/code&gt; option. No other variables are available to the included template:</source>
          <target state="translated">提供された変数のみを使用して（または変数をまったく使用し &lt;code&gt;only&lt;/code&gt; ）コンテキストをレンダリングする場合は、onlyオプションを使用します。含まれているテンプレートで使用できる他の変数はありません。</target>
        </trans-unit>
        <trans-unit id="1299f323e280c4314aecc4bf363b73686a188120" translate="yes" xml:space="preserve">
          <source>If you want to replace the upload handlers completely, you can assign a new list:</source>
          <target state="translated">アップロードハンドラを完全に置き換えたい場合は、新しいリストを割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="3b1eb52947855dd8e6837d854ad3dbc97c8dfac6" translate="yes" xml:space="preserve">
          <source>If you want to represent a model with the format &lt;code&gt;app_label.object_name&lt;/code&gt; or &lt;code&gt;app_label.model_name&lt;/code&gt; you can use &lt;code&gt;model._meta.label&lt;/code&gt; or &lt;code&gt;model._meta.label_lower&lt;/code&gt; respectively.</source>
          <target state="translated">&lt;code&gt;app_label.object_name&lt;/code&gt; または &lt;code&gt;app_label.model_name&lt;/code&gt; の形式でモデルを表現する場合は、それぞれ &lt;code&gt;model._meta.label&lt;/code&gt; または &lt;code&gt;model._meta.label_lower&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="d9363c35de0c24ed2e535f99e48aad5e18fa6e74" translate="yes" xml:space="preserve">
          <source>If you want to restrict the search to a particular template engine, pass the engine&amp;rsquo;s &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;using&lt;/code&gt; argument.</source>
          <target state="translated">検索を特定のテンプレートエンジンに制限する場合は、 &lt;code&gt;using&lt;/code&gt; 引数でエンジンの&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; を&lt;/a&gt;渡します。</target>
        </trans-unit>
        <trans-unit id="1a073b38a0044d193c0986f27e9a3dc2f7954430" translate="yes" xml:space="preserve">
          <source>If you want to return a formset that doesn&amp;rsquo;t include &lt;em&gt;any&lt;/em&gt; pre-existing instances of the model, you can specify an empty QuerySet:</source>
          <target state="translated">あなたが含まれていないフォームセット戻したい場合は&lt;em&gt;任意の&lt;/em&gt;モデルの既存のインスタンスを、あなたは空のクエリセットを指定することができます。</target>
        </trans-unit>
        <trans-unit id="ae90359159ce2a046afee5fe8740de7f9eb423ea" translate="yes" xml:space="preserve">
          <source>If you want to revert all migrations applied for an app, use the name &lt;code&gt;zero&lt;/code&gt;:</source>
          <target state="translated">アプリに適用されたすべての移行を元に戻す場合は、名前に &lt;code&gt;zero&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="458328755ac20bf1935dfcb1e46e0973d7fa75b0" translate="yes" xml:space="preserve">
          <source>If you want to select a language within a template, you can use the &lt;code&gt;language&lt;/code&gt; template tag:</source>
          <target state="translated">テンプレート内の言語を選択する場合は、 &lt;code&gt;language&lt;/code&gt; テンプレートタグを使用できます。</target>
        </trans-unit>
        <trans-unit id="ea255638cee3103be21ce078c6c8eb0e0a82aafb" translate="yes" xml:space="preserve">
          <source>If you want to serve your project in a subdirectory (&lt;code&gt;https://example.com/mysite&lt;/code&gt; in this example), you can add &lt;code&gt;WSGIScriptAlias&lt;/code&gt; to the configuration above:</source>
          <target state="translated">プロジェクトをサブディレクトリ（この例では &lt;code&gt;https://example.com/mysite&lt;/code&gt; ）で提供する場合は、上記の構成に &lt;code&gt;WSGIScriptAlias&lt;/code&gt; を追加できます。</target>
        </trans-unit>
        <trans-unit id="470d59534ec7120ebb7f43a0559ad898e0a6a691" translate="yes" xml:space="preserve">
          <source>If you want to serve your static files from the same server that&amp;rsquo;s already serving your site, the process may look something like:</source>
          <target state="translated">既にサイトにサービスを提供しているのと同じサーバーから静的ファイルを提供する場合、プロセスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d1f072200b67438fce5826bd23e1652372b64f96" translate="yes" xml:space="preserve">
          <source>If you want to specify a field&amp;rsquo;s validators, you can do so by defining the field declaratively and setting its &lt;code&gt;validators&lt;/code&gt; parameter:</source>
          <target state="translated">フィールドのバリデーターを指定したい場合は、フィールドを宣言的に定義し、その &lt;code&gt;validators&lt;/code&gt; パラメーターを設定することで指定できます。</target>
        </trans-unit>
        <trans-unit id="2045cb8a545994f5940fdb8bb609edfefe504ffd" translate="yes" xml:space="preserve">
          <source>If you want to submit a form or access a session cookie within a frame or iframe, you may need to modify the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_SAMESITE&quot;&gt;&lt;code&gt;CSRF_COOKIE_SAMESITE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;settings#std:setting-SESSION_COOKIE_SAMESITE&quot;&gt;&lt;code&gt;SESSION_COOKIE_SAMESITE&lt;/code&gt;&lt;/a&gt; settings.</source>
          <target state="translated">フォームを送信するか、フレームまたはiframe内のセッションCookieにアクセスする場合は、&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_SAMESITE&quot;&gt; &lt;code&gt;CSRF_COOKIE_SAMESITE&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;settings#std:setting-SESSION_COOKIE_SAMESITE&quot;&gt; &lt;code&gt;SESSION_COOKIE_SAMESITE&lt;/code&gt; &lt;/a&gt;設定の変更が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="f156652923d4a2867402c1c5d313ea25450f71ae" translate="yes" xml:space="preserve">
          <source>If you want to upload multiple files using one form field, set the &lt;code&gt;multiple&lt;/code&gt; HTML attribute of field&amp;rsquo;s widget:</source>
          <target state="translated">1つのフォームフィールドを使用して複数のファイルをアップロードする場合は、フィールドのウィジェットの &lt;code&gt;multiple&lt;/code&gt; HTML属性を設定します。</target>
        </trans-unit>
        <trans-unit id="45963581a6022c16346e1c2ec6732c8d86176fe6" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;a href=&quot;https://docs.python.org/3/library/pdb.html#module-pdb&quot;&gt;&lt;code&gt;pdb&lt;/code&gt;&lt;/a&gt; while debugging tests, you must disable parallel execution (&lt;code&gt;--parallel=1&lt;/code&gt;). You&amp;rsquo;ll see something like &lt;code&gt;bdb.BdbQuit&lt;/code&gt; if you don&amp;rsquo;t.</source>
          <target state="translated">テストのデバッグ中に&lt;a href=&quot;https://docs.python.org/3/library/pdb.html#module-pdb&quot;&gt; &lt;code&gt;pdb&lt;/code&gt; &lt;/a&gt;を使用する場合は、並列実行を無効にする必要があります（ &lt;code&gt;--parallel=1&lt;/code&gt; ）。そうでない場合は、 &lt;code&gt;bdb.BdbQuit&lt;/code&gt; のようなものが表示されます。</target>
        </trans-unit>
        <trans-unit id="09bf01b3a96c96f5b899be6fd6691dca94d0251d" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;raise_exception&lt;/code&gt; but also give your users a chance to login first, you can add the &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="translated">&lt;code&gt;raise_exception&lt;/code&gt; を使用すると同時に、ユーザーに最初にログインする機会を与えたい場合は、&lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt; &lt;code&gt;login_required()&lt;/code&gt; &lt;/a&gt;デコレーターを追加できます。</target>
        </trans-unit>
        <trans-unit id="5dc0b597e5d02af669c0e6dc95f1cbd74aafb742" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;{{ MEDIA_URL }}&lt;/code&gt; in your templates, add &lt;code&gt;'django.template.context_processors.media'&lt;/code&gt; in the &lt;code&gt;'context_processors'&lt;/code&gt; option of &lt;a href=&quot;#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートで &lt;code&gt;{{ MEDIA_URL }}&lt;/code&gt; を使用する場合は、&lt;a href=&quot;#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;'context_processors'&lt;/code&gt; オプションに &lt;code&gt;'django.template.context_processors.media'&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="0c3dd032579f4df0a564516ab9f6887bed67602d" translate="yes" xml:space="preserve">
          <source>If you want to use Django on a production site, use &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; with &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgi&lt;/a&gt;. mod_wsgi operates in one of two modes: embedded mode or daemon mode. In embedded mode, mod_wsgi is similar to mod_perl &amp;ndash; it embeds Python within Apache and loads Python code into memory when the server starts. Code stays in memory throughout the life of an Apache process, which leads to significant performance gains over other server arrangements. In daemon mode, mod_wsgi spawns an independent daemon process that handles requests. The daemon process can run as a different user than the Web server, possibly leading to improved security. The daemon process can be restarted without restarting the entire Apache Web server, possibly making refreshing your codebase more seamless. Consult the mod_wsgi documentation to determine which mode is right for your setup. Make sure you have Apache installed with the mod_wsgi module activated. Django will work with any version of Apache that supports mod_wsgi.</source>
          <target state="translated">本番サイトでDjangoを使用する場合は、&lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt;と&lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgiを&lt;/a&gt;使用します。 mod_wsgiは、埋め込みモードまたはデーモンモードの2つのモードのいずれかで動作します。埋め込みモードでは、mod_wsgiはmod_perlに似ています。これは、Apache内にPythonを埋め込み、サーバーの起動時にPythonコードをメモリにロードします。コードは、Apacheプロセスの存続期間を通じてメモリ内に留まるため、他のサーバー構成よりも大幅にパフォーマンスが向上します。デーモンモードでは、mod_wsgiはリクエストを処理する独立したデーモンプロセスを生成します。デーモンプロセスは、Webサーバーとは異なるユーザーとして実行できるため、セキュリティが向上する可能性があります。 Apache Webサーバー全体を再起動せずにデーモンプロセスを再起動できるため、コードベースの更新がよりシームレスになる可能性があります。 mod_wsgiのドキュメントを参照して、設定に適したモードを確認してください。 Apacheがインストールされ、mod_wsgiモジュールがアクティブになっていることを確認してください。Djangoはmod_wsgiをサポートするすべてのバージョンのApacheで動作します。</target>
        </trans-unit>
        <trans-unit id="7c92963f8c898d1ccffd90cfaac208f60b5e5b47" translate="yes" xml:space="preserve">
          <source>If you want to use a custom &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; (for instance to add extra validation), set &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; on your view.</source>
          <target state="translated">カスタム&lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;を使用する場合（たとえば、追加の検証を追加する場合）、ビューに&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt;を設定します。</target>
        </trans-unit>
        <trans-unit id="316d41ea216f94382282cfe3b25a5c07e352a193" translate="yes" xml:space="preserve">
          <source>If you want to use a custom widget with a relation field (i.e. &lt;a href=&quot;../../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;), make sure you haven&amp;rsquo;t included that field&amp;rsquo;s name in &lt;code&gt;raw_id_fields&lt;/code&gt;, &lt;code&gt;radio_fields&lt;/code&gt;, or &lt;code&gt;autocomplete_fields&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;フィールド（ForeignKeyまたは&lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; など&lt;/a&gt;）でカスタムウィジェットを使用する場合は、 &lt;code&gt;raw_id_fields&lt;/code&gt; 、 &lt;code&gt;radio_fields&lt;/code&gt; 、または &lt;code&gt;autocomplete_fields&lt;/code&gt; にそのフィールドの名前を含めていないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="72ff3767011b9eb84f053fc485cd959d42700e5b" translate="yes" xml:space="preserve">
          <source>If you want to use a database-backed session, you need to add &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; to your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">データベースを使用するセッションを使用する場合は、&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c485b12671856cb3f97a146712ef453cc167eaf1" translate="yes" xml:space="preserve">
          <source>If you want to use a different &lt;code&gt;Client&lt;/code&gt; class (for example, a subclass with customized behavior), use the &lt;a href=&quot;#django.test.SimpleTestCase.client_class&quot;&gt;&lt;code&gt;client_class&lt;/code&gt;&lt;/a&gt; class attribute:</source>
          <target state="translated">別の &lt;code&gt;Client&lt;/code&gt; クラス（たとえば、動作がカスタマイズされたサブクラス）を使用する場合は、&lt;a href=&quot;#django.test.SimpleTestCase.client_class&quot;&gt; &lt;code&gt;client_class&lt;/code&gt; &lt;/a&gt;クラス属性を使用します。</target>
        </trans-unit>
        <trans-unit id="5db65e04d45386782928afe748f9d80b1e108065" translate="yes" xml:space="preserve">
          <source>If you want to use headers to disable caching altogether, &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt;&lt;code&gt;never_cache()&lt;/code&gt;&lt;/a&gt; is a view decorator that adds headers to ensure the response won&amp;rsquo;t be cached by browsers or other caches. Example:</source>
          <target state="translated">ヘッダーを使用してキャッシュを完全に無効にする場合、&lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt; &lt;code&gt;never_cache()&lt;/code&gt; &lt;/a&gt;はヘッダーを追加するビューデコレーターであり、ブラウザーや他のキャッシュによって応答がキャッシュされないようにします。例：</target>
        </trans-unit>
        <trans-unit id="8361c5fa5bdf1c6b873a3e941b8993711b228a02" translate="yes" xml:space="preserve">
          <source>If you want to use the admin layout, extend from &lt;code&gt;admin/base_site.html&lt;/code&gt;:</source>
          <target state="translated">adminレイアウトを使用する場合は、 &lt;code&gt;admin/base_site.html&lt;/code&gt; から拡張します。</target>
        </trans-unit>
        <trans-unit id="7a82fb0e4828be0c9686fdb58d8239454489f85b" translate="yes" xml:space="preserve">
          <source>If you want to work with model classes or model instances from the &lt;code&gt;from_state&lt;/code&gt; argument in &lt;code&gt;database_forwards()&lt;/code&gt; or &lt;code&gt;database_backwards()&lt;/code&gt;, you must render model states using the &lt;code&gt;clear_delayed_apps_cache()&lt;/code&gt; method to make related models available:</source>
          <target state="translated">&lt;code&gt;database_forwards()&lt;/code&gt; または &lt;code&gt;database_backwards()&lt;/code&gt; の &lt;code&gt;from_state&lt;/code&gt; 引数からモデルクラスまたはモデルインスタンスを操作する場合は、 &lt;code&gt;clear_delayed_apps_cache()&lt;/code&gt; メソッドを使用してモデルの状態をレンダリングし、関連するモデルを使用できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="ddefbc21db307ddde4dcfed071042c3b03fd65a6" translate="yes" xml:space="preserve">
          <source>If you want your custom user model to also work with the admin, your user model must define some additional attributes and methods. These methods allow the admin to control access of the user to admin content:</source>
          <target state="translated">カスタムユーザーモデルを管理者と連携させたい場合、ユーザーモデルはいくつかの追加属性とメソッドを定義しなければなりません。これらのメソッドにより、管理者は管理者コンテンツへのユーザーのアクセスを制御することができます。</target>
        </trans-unit>
        <trans-unit id="281b29199ee15df8030aeddb22d5e3ee5ba23b2d" translate="yes" xml:space="preserve">
          <source>If you wanted to add a new manager to the Proxy, without replacing the existing default, you can use the techniques described in the &lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;custom manager&lt;/a&gt; documentation: create a base class containing the new managers and inherit that after the primary base class:</source>
          <target state="translated">既存のデフォルトを置き換えることなく、新しいマネージャーをプロキシに追加する場合は、&lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;カスタムマネージャーの&lt;/a&gt;ドキュメントで説明されている手法を使用できます。新しいマネージャーを含む基本クラスを作成し、それをプライマリ基本クラスの後に継承します。</target>
        </trans-unit>
        <trans-unit id="ce151f538ddf72bffbb0e10083ffad1aba038cda" translate="yes" xml:space="preserve">
          <source>If you wanted to add checks to a model manager, you would take the same approach on your subclass of &lt;a href=&quot;db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モデルマネージャーにチェックを追加する場合は、&lt;a href=&quot;db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;サブクラスで同じアプローチを使用します。</target>
        </trans-unit>
        <trans-unit id="c6cd0e76c2fef52fb36e48a577f2af1ba781eba5" translate="yes" xml:space="preserve">
          <source>If you wanted to display an inline on the &lt;code&gt;Person&lt;/code&gt; admin add/change pages you need to explicitly define the foreign key since it is unable to do so automatically:</source>
          <target state="translated">&lt;code&gt;Person&lt;/code&gt; 管理者の追加/変更ページにインラインを表示したい場合は、外部キーを自動的に定義できないため、明示的に定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="07539613b20b80f84b619ddd76722bd149b459aa" translate="yes" xml:space="preserve">
          <source>If you wanted to retrieve the uploaded file&amp;rsquo;s on-disk filename, or the file&amp;rsquo;s size, you could use the &lt;a href=&quot;../files/file#django.core.files.File.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../files/file#django.core.files.File.size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; attributes respectively; for more information on the available attributes and methods, see the &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class reference and the &lt;a href=&quot;../../topics/files&quot;&gt;Managing files&lt;/a&gt; topic guide.</source>
          <target state="translated">アップロードされたファイルのディスク上のファイル名またはファイルのサイズを取得する場合は、それぞれ&lt;a href=&quot;../files/file#django.core.files.File.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;属性と&lt;a href=&quot;../files/file#django.core.files.File.size&quot;&gt; &lt;code&gt;size&lt;/code&gt; &lt;/a&gt;属性を使用できます。使用可能な属性とメソッドの詳細については、&lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;クラスリファレンスと&lt;a href=&quot;../../topics/files&quot;&gt;ファイル&lt;/a&gt;の管理トピックガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="b0b81a58992bc81d6e10a12990d5032b8172bb7a" translate="yes" xml:space="preserve">
          <source>If you wish to call a function with a &lt;code&gt;using&lt;/code&gt; parameter you can do it by wrapping the call with a &lt;code&gt;lambda&lt;/code&gt; to add an extra parameter:</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt; パラメータを使用して関数を呼び出したい場合は、呼び出しを &lt;code&gt;lambda&lt;/code&gt; ラップして追加のパラメータを追加することで実行できます。</target>
        </trans-unit>
        <trans-unit id="f26de0b1fb03d0b7c3a7b0c5f5e0aa437ee3f542" translate="yes" xml:space="preserve">
          <source>If you wish to change the index, login or logout templates, you are better off creating your own &lt;code&gt;AdminSite&lt;/code&gt; instance (see below), and changing the &lt;a href=&quot;#django.contrib.admin.AdminSite.index_template&quot;&gt;&lt;code&gt;AdminSite.index_template&lt;/code&gt;&lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.AdminSite.login_template&quot;&gt;&lt;code&gt;AdminSite.login_template&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.admin.AdminSite.logout_template&quot;&gt;&lt;code&gt;AdminSite.logout_template&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="translated">インデックス、ログイン、またはログアウトのテンプレートを変更したい場合は、独自の &lt;code&gt;AdminSite&lt;/code&gt; インスタンスを作成し（下記を参照）、&lt;a href=&quot;#django.contrib.admin.AdminSite.index_template&quot;&gt; &lt;code&gt;AdminSite.index_template&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.contrib.admin.AdminSite.login_template&quot;&gt; &lt;code&gt;AdminSite.login_template&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;#django.contrib.admin.AdminSite.logout_template&quot;&gt; &lt;code&gt;AdminSite.logout_template&lt;/code&gt; &lt;/a&gt;プロパティを変更することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fd89bde5afb1b4ac48d534864f59e0b25319f574" translate="yes" xml:space="preserve">
          <source>If you wish to have separate templates for &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#UpdateView&quot;&gt;&lt;code&gt;UpdateView&lt;/code&gt;&lt;/a&gt;, you can set either &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt;&lt;code&gt;template_name_suffix&lt;/code&gt;&lt;/a&gt; on your view class.</source>
          <target state="translated">&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#UpdateView&quot;&gt; &lt;code&gt;UpdateView&lt;/code&gt; に&lt;/a&gt;別々のテンプレートが必要な場合は、ビュークラスに&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt; &lt;code&gt;template_name_suffix&lt;/code&gt; &lt;/a&gt;を設定できます。</target>
        </trans-unit>
        <trans-unit id="c63c598798c3a61a008e5d7569767325195fe300" translate="yes" xml:space="preserve">
          <source>If you wish to override this behavior, you can override &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.delete_queryset&quot;&gt;&lt;code&gt;ModelAdmin.delete_queryset()&lt;/code&gt;&lt;/a&gt; or write a custom action which does deletion in your preferred manner &amp;ndash; for example, by calling &lt;code&gt;Model.delete()&lt;/code&gt; for each of the selected items.</source>
          <target state="translated">この動作をオーバーライドする場合は、&lt;a href=&quot;index#django.contrib.admin.ModelAdmin.delete_queryset&quot;&gt; &lt;code&gt;ModelAdmin.delete_queryset()&lt;/code&gt; を&lt;/a&gt;オーバーライドするか、選択したアイテムごとに &lt;code&gt;Model.delete()&lt;/code&gt; を呼び出すなどして、好みの方法で削除を行うカスタムアクションを記述できます。</target>
        </trans-unit>
        <trans-unit id="c81732d3ee4b9133691a67e4efeae93d3348110c" translate="yes" xml:space="preserve">
          <source>If you wish to perform arbitrary distance queries using non-point geometries in WGS84 in PostGIS and you want decent performance, enable the &lt;a href=&quot;#django.contrib.gis.db.models.GeometryField.geography&quot;&gt;&lt;code&gt;GeometryField.geography&lt;/code&gt;&lt;/a&gt; keyword so that &lt;a href=&quot;#geography-type&quot;&gt;geography database type&lt;/a&gt; is used instead.</source>
          <target state="translated">PostGISのWGS84で非ポイントジオメトリを使用して任意の距離クエリを実行し、適切なパフォーマンスが必要な場合は、&lt;a href=&quot;#django.contrib.gis.db.models.GeometryField.geography&quot;&gt; &lt;code&gt;GeometryField.geography&lt;/code&gt; &lt;/a&gt;キーワードを有効にして、代わりに&lt;a href=&quot;#geography-type&quot;&gt;geographyデータベースタイプ&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="d149fe0ba9386b629de5325bd32fff38e705d495" translate="yes" xml:space="preserve">
          <source>If you wish to protect a list, tuple or dictionary you can do so using the signing module&amp;rsquo;s &lt;code&gt;dumps&lt;/code&gt; and &lt;code&gt;loads&lt;/code&gt; functions. These imitate Python&amp;rsquo;s pickle module, but use JSON serialization under the hood. JSON ensures that even if your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; is stolen an attacker will not be able to execute arbitrary commands by exploiting the pickle format:</source>
          <target state="translated">リスト、タプル、または辞書を保護する場合は、署名モジュールの &lt;code&gt;dumps&lt;/code&gt; および &lt;code&gt;loads&lt;/code&gt; 機能を使用して保護できます。これらはPythonのpickleモジュールを模倣していますが、内部ではJSONシリアル化を使用しています。JSONは、&lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt;が盗まれても、攻撃者がピクル形式を利用して任意のコマンドを実行できないようにします。</target>
        </trans-unit>
        <trans-unit id="1a7ff6c29d67b18f351c6ef695f42316c70e46f0" translate="yes" xml:space="preserve">
          <source>If you wish to store information related to &lt;code&gt;User&lt;/code&gt;, you can use a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user. For example you might create an Employee model:</source>
          <target state="translated">&lt;code&gt;User&lt;/code&gt; に関連する情報を保存する場合は、&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;を使用して、追加情報のフィールドを含むモデルを作成できます。この1対1モデルは、サイトユーザーに関する非認証関連情報を格納する可能性があるため、多くの場合、プロファイルモデルと呼ばれます。たとえば、従業員モデルを作成するとします。</target>
        </trans-unit>
        <trans-unit id="e3163de4f64d0e6226c0693d4c28e0ff7be844ba" translate="yes" xml:space="preserve">
          <source>If you wish to store the CSRF token in the user&amp;rsquo;s session, use the &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">CSRFトークンをユーザーのセッションに&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt;する場合は、CSRF_USE_SESSIONS設定を使用します。</target>
        </trans-unit>
        <trans-unit id="95ab3f31deb5e5844d6cefd4f6792b2923cdc1d0" translate="yes" xml:space="preserve">
          <source>If you wish to submit your site to the &lt;a href=&quot;https://hstspreload.org/&quot;&gt;browser preload list&lt;/a&gt;, set the &lt;a href=&quot;settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt;&lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;True&lt;/code&gt;. That appends the &lt;code&gt;preload&lt;/code&gt; directive to the &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header.</source>
          <target state="translated">&lt;a href=&quot;https://hstspreload.org/&quot;&gt;ブラウザのプリロードリストに&lt;/a&gt;サイトを送信する場合は、&lt;a href=&quot;settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt; &lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt; &lt;/a&gt;設定を &lt;code&gt;True&lt;/code&gt; に設定します。これにより、 &lt;code&gt;preload&lt;/code&gt; ディレクティブが &lt;code&gt;Strict-Transport-Security&lt;/code&gt; ヘッダーに追加されます。</target>
        </trans-unit>
        <trans-unit id="530ae0cc38e2e42a905344acaf5f960f73fc3715" translate="yes" xml:space="preserve">
          <source>If you wish to use a different template for each sitemap or sitemap index available on your site, you may specify it by passing a &lt;code&gt;template_name&lt;/code&gt; parameter to the &lt;code&gt;sitemap&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; views via the URLconf:</source>
          <target state="translated">サイトで利用可能なサイトマップまたはサイトマップインデックスごとに異なるテンプレートを使用したい場合は、URLconfを介して &lt;code&gt;template_name&lt;/code&gt; パラメータに指定して、 &lt;code&gt;sitemap&lt;/code&gt; と &lt;code&gt;index&lt;/code&gt; ビューに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="6909e16e21302fa3cec3921ce60357ae9b5838a2" translate="yes" xml:space="preserve">
          <source>If you wish to use another database, install the appropriate &lt;a href=&quot;../topics/install#database-installation&quot;&gt;database bindings&lt;/a&gt; and change the following keys in the &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'default'&lt;/code&gt; item to match your database connection settings:</source>
          <target state="translated">別のデータベースを使用する場合は、適切な&lt;a href=&quot;../topics/install#database-installation&quot;&gt;データベースバインディング&lt;/a&gt;をインストールし、データベース接続の設定と一致するように、&lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'default'&lt;/code&gt; アイテムの次のキーを変更します。</target>
        </trans-unit>
        <trans-unit id="b6e2765329d13f9a756817f8148fc06ebd15e20d" translate="yes" xml:space="preserve">
          <source>If you would like to give translators hints about a translatable string, you can add a comment prefixed with the &lt;code&gt;Translators&lt;/code&gt; keyword on the line preceding the string, e.g.:</source>
          <target state="translated">翻訳者に翻訳可能な文字列に関するヒントを提供したい場合は、文字列の前の行に &lt;code&gt;Translators&lt;/code&gt; キーワードを前に付けたコメントを追加できます。例：</target>
        </trans-unit>
        <trans-unit id="ec10a212c4274c393a2dd780fbf91de455cc5cb9" translate="yes" xml:space="preserve">
          <source>If you would like to override the &lt;code&gt;clean()&lt;/code&gt; method and maintain this validation, you must call the parent class&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;clean()&lt;/code&gt; メソッドをオーバーライドしてこの検証を維持する場合は、親クラスの &lt;code&gt;clean()&lt;/code&gt; メソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="3f28065cea9d31fe5a0cfcc2e982ee60d5116348" translate="yes" xml:space="preserve">
          <source>If you would rather start from an empty database and re-run all migrations, you should drop and recreate the database and then run &lt;a href=&quot;#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">空のデータベースから開始してすべての移行を再実行する場合は、データベースを削除して再作成してから、代わりに&lt;a href=&quot;#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="787d4b4a6adbad5e56e698fbb47e2f7227b1967b" translate="yes" xml:space="preserve">
          <source>If you write a custom filter that operates on &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects, you&amp;rsquo;ll usually register it with the &lt;code&gt;expects_localtime&lt;/code&gt; flag set to &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトを操作するカスタムフィルターを作成する場合は、通常、 &lt;code&gt;expects_localtime&lt;/code&gt; フラグを &lt;code&gt;True&lt;/code&gt; に設定して登録します。</target>
        </trans-unit>
        <trans-unit id="41a73fd1c496ecfedcbd96f35862caf467d2aa9d" translate="yes" xml:space="preserve">
          <source>If you write your own password hasher that contains a work factor such as a number of iterations, you should implement a &lt;code&gt;harden_runtime(self, password, encoded)&lt;/code&gt; method to bridge the runtime gap between the work factor supplied in the &lt;code&gt;encoded&lt;/code&gt; password and the default work factor of the hasher. This prevents a user enumeration timing attack due to difference between a login request for a user with a password encoded in an older number of iterations and a nonexistent user (which runs the default hasher&amp;rsquo;s default number of iterations).</source>
          <target state="translated">反復回数などの作業要素を含む独自のパスワードハッシャーを作成する場合は、 &lt;code&gt;harden_runtime(self, password, encoded)&lt;/code&gt; メソッドを実装して、 &lt;code&gt;encoded&lt;/code&gt; されたパスワードで提供される作業要素とデフォルトの作業との間のランタイムギャップを埋める必要があります。ハッシャーの係数。これにより、古い反復回数でエンコードされたパスワードを持つユーザーのログインリクエストと存在しないユーザー（デフォルトのハッシュのデフォルトの反復回数を実行する）の違いによるユーザー列挙のタイミング攻撃が防止されます。</target>
        </trans-unit>
        <trans-unit id="0874fbd3ce49447e25c47a3eeb9385b0739ec7b9" translate="yes" xml:space="preserve">
          <source>If you write your own similar functions and deal with translations, you&amp;rsquo;ll face the problem of what to do when the first argument is a lazy translation object. You don&amp;rsquo;t want to convert it to a string immediately, because you might be using this function outside of a view (and hence the current thread&amp;rsquo;s locale setting will not be correct).</source>
          <target state="translated">独自の同様の関数を記述して翻訳を扱う場合、最初の引数が遅延翻訳オブジェクトであるときに何をすべきかという問題に直面します。ビューの外でこの関数を使用している可能性があるため、すぐに文字列に変換する必要はありません（したがって、現在のスレッドのロケール設定は正しくありません）。</target>
        </trans-unit>
        <trans-unit id="7404aaf8b678e2be0f5abe5634bc5b715f5e8c11" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like default values to come from somewhere other than &lt;code&gt;django.conf.global_settings&lt;/code&gt;, you can pass in a module or class that provides the default settings as the &lt;code&gt;default_settings&lt;/code&gt; argument (or as the first positional argument) in the call to &lt;code&gt;configure()&lt;/code&gt;.</source>
          <target state="translated">デフォルト値を &lt;code&gt;django.conf.global_settings&lt;/code&gt; 以外の場所から取得する場合は、 &lt;code&gt;configure()&lt;/code&gt; ）の呼び出しで &lt;code&gt;default_settings&lt;/code&gt; 引数（または最初の位置引数）としてデフォルト設定を提供するモジュールまたはクラスを渡すことができます。 ）。</target>
        </trans-unit>
        <trans-unit id="87fbb560a0a7d5bfb6385760a929b01781e9247b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to be able to update your Django code occasionally with the latest bug fixes and improvements, follow these instructions:</source>
          <target state="translated">Djangoコードを時々最新のバグ修正と改善で更新できるようにしたい場合は、次の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="2e426d25005a653ab3104419888711627e40acb9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to customize the behavior of &lt;a href=&quot;../ref/middleware#django.middleware.common.BrokenLinkEmailsMiddleware&quot;&gt;&lt;code&gt;django.middleware.common.BrokenLinkEmailsMiddleware&lt;/code&gt;&lt;/a&gt; further (for example to ignore requests coming from web crawlers), you should subclass it and override its methods.</source>
          <target state="translated">&lt;a href=&quot;../ref/middleware#django.middleware.common.BrokenLinkEmailsMiddleware&quot;&gt; &lt;code&gt;django.middleware.common.BrokenLinkEmailsMiddleware&lt;/code&gt; &lt;/a&gt;の動作をさらにカスタマイズする場合（たとえば、Webクローラーからの要求を無視する場合）、それをサブクラス化し、そのメソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="40a45578a28fb495c1954bbd188030f39d58e346" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to manually authenticate a user by comparing a plain-text password to the hashed password in the database, use the convenience function &lt;a href=&quot;#django.contrib.auth.hashers.check_password&quot;&gt;&lt;code&gt;check_password()&lt;/code&gt;&lt;/a&gt;. It takes two arguments: the plain-text password to check, and the full value of a user&amp;rsquo;s &lt;code&gt;password&lt;/code&gt; field in the database to check against, and returns &lt;code&gt;True&lt;/code&gt; if they match, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">プレーンテキストのパスワードとデータベース内のハッシュ化されたパスワードを比較してユーザーを手動で認証する場合は、便利な関数&lt;a href=&quot;#django.contrib.auth.hashers.check_password&quot;&gt; &lt;code&gt;check_password()&lt;/code&gt; を&lt;/a&gt;使用します。これは2つの引数を取ります。チェックするプレーンテキストのパスワードと、チェックするデータベースのユーザーの &lt;code&gt;password&lt;/code&gt; フィールドの完全な値で、一致する場合は &lt;code&gt;True&lt;/code&gt; を、そうでない場合は &lt;code&gt;False&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7032cf12cbd255835e52ce652c41252d70b15172" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a URL without displaying it, you can use a slightly different call:</source>
          <target state="translated">表示せずにURLを取得したい場合は、少し異なる呼び出しを使用できます。</target>
        </trans-unit>
        <trans-unit id="3e6e1935ff1f8bbe3d9a10a3392b2aed18e77332" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a namespaced URL, specify the fully qualified name:</source>
          <target state="translated">名前空間付きのURLを取得する場合は、完全修飾名を指定します。</target>
        </trans-unit>
        <trans-unit id="42574c0524ed457c65a64125a0ee03cde3ec0664" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a static URL without displaying it, you can use a slightly different call:</source>
          <target state="translated">静的URLを表示せずに取得する場合は、少し異なる呼び出しを使用できます。</target>
        </trans-unit>
        <trans-unit id="782329d0998e5379bd00452f104bcc26d52e8259" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a translated string without displaying it, you can use the following syntax:</source>
          <target state="translated">翻訳された文字列を表示せずに取得したい場合は、次の構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="a678c4aabe8ea3a89184137c4d4eb0cd0f145382" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to set up your own admin site with custom behavior, you&amp;rsquo;re free to subclass &lt;code&gt;AdminSite&lt;/code&gt; and override or add anything you like. Then, create an instance of your &lt;code&gt;AdminSite&lt;/code&gt; subclass (the same way you&amp;rsquo;d instantiate any other Python class) and register your models and &lt;code&gt;ModelAdmin&lt;/code&gt; subclasses with it instead of with the default site. Finally, update &lt;code&gt;myproject/urls.py&lt;/code&gt; to reference your &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">カスタム動作で独自の管理サイトを設定したい場合は、 &lt;code&gt;AdminSite&lt;/code&gt; をサブクラス化して、好きなものをオーバーライドまたは追加できます。次に、 &lt;code&gt;AdminSite&lt;/code&gt; サブクラスのインスタンスを作成し（他のPythonクラスをインスタンス化するのと同じ方法で）、モデルと &lt;code&gt;ModelAdmin&lt;/code&gt; サブクラスを、デフォルトのサイトではなくそれを登録します。最後に、 &lt;code&gt;myproject/urls.py&lt;/code&gt; を更新して、&lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; &lt;/a&gt;サブクラスを参照します。</target>
        </trans-unit>
        <trans-unit id="817d51330fc9dd66b1c2b0e80b8eed9e206bc902" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to specify a custom primary key, specify &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; on one of your fields. If Django sees you&amp;rsquo;ve explicitly set &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;Field.primary_key&lt;/code&gt;&lt;/a&gt;, it won&amp;rsquo;t add the automatic &lt;code&gt;id&lt;/code&gt; column.</source>
          <target state="translated">カスタムの主キーを指定する場合は、いずれかのフィールドで&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt;を指定します。Djangoが&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;Field.primary_key&lt;/code&gt; &lt;/a&gt;を明示的に設定したことを確認した場合、自動 &lt;code&gt;id&lt;/code&gt; 列は追加されません。</target>
        </trans-unit>
        <trans-unit id="59523cacb99089a63ab1f97cf8f948701988f18d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d prefer Django not to create a backwards relation, set &lt;code&gt;related_name&lt;/code&gt; to &lt;code&gt;'+'&lt;/code&gt; or end it with &lt;code&gt;'+'&lt;/code&gt;. For example, this will ensure that the &lt;code&gt;User&lt;/code&gt; model won&amp;rsquo;t have a backwards relation to this model:</source>
          <target state="translated">あなたは、後方の関係を作成しないDjangoのを好むセットしたい場合は &lt;code&gt;related_name&lt;/code&gt; に &lt;code&gt;'+'&lt;/code&gt; またはで終了し &lt;code&gt;'+'&lt;/code&gt; 。たとえば、これにより、 &lt;code&gt;User&lt;/code&gt; モデルがこのモデルに対して後方関係を持たないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="1b20aacdd666251729295967fecf137a2c2099d5" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d prefer not to call the template &lt;code&gt;registration/login.html&lt;/code&gt;, you can pass the &lt;code&gt;template_name&lt;/code&gt; parameter via the extra arguments to the &lt;code&gt;as_view&lt;/code&gt; method in your URLconf. For example, this URLconf line would use &lt;code&gt;myapp/login.html&lt;/code&gt; instead:</source>
          <target state="translated">テンプレート &lt;code&gt;registration/login.html&lt;/code&gt; を呼び出さない場合は、 &lt;code&gt;as_view&lt;/code&gt; メソッドに追加の引数を介して &lt;code&gt;template_name&lt;/code&gt; パラメータを渡すことができます。たとえば、次のURLconf行では、代わりに &lt;code&gt;myapp/login.html&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="48c682ae2cbd0afba4b4eae5274158bf92b45a13" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re after even more control, you can also cache template fragments using the &lt;code&gt;cache&lt;/code&gt; template tag. To give your template access to this tag, put &lt;code&gt;{% load cache %}&lt;/code&gt; near the top of your template.</source>
          <target state="translated">さらに細かく制御したい場合は、 &lt;code&gt;cache&lt;/code&gt; テンプレートタグを使用してテンプレートフラグメントをキャッシュすることもできます。テンプレートにこのタグへのアクセスを許可するには、テンプレートの上部近くに &lt;code&gt;{% load cache %}&lt;/code&gt; を配置します。</target>
        </trans-unit>
        <trans-unit id="767eed5b450bd819bca83e5738282f4f7be2808f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re building a database-driven app, chances are you&amp;rsquo;ll have forms that map closely to Django models. For instance, you might have a &lt;code&gt;BlogComment&lt;/code&gt; model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the field types in your form, because you&amp;rsquo;ve already defined the fields in your model.</source>
          <target state="translated">データベース駆動型アプリを構築している場合は、Djangoモデルに密接に対応するフォームが作成される可能性があります。たとえば、 &lt;code&gt;BlogComment&lt;/code&gt; モデルがあり、コメントを送信できるフォームを作成するとします。この場合、モデルでフィールドを既に定義しているため、フォームでフィールドタイプを定義することは冗長になります。</target>
        </trans-unit>
        <trans-unit id="abfc88abce0b83f7179182a6de094082846b855c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re building your own backend, you can use the standard cache backends as reference implementations. You&amp;rsquo;ll find the code in the &lt;code&gt;django/core/cache/backends/&lt;/code&gt; directory of the Django source.</source>
          <target state="translated">独自のバックエンドを構築している場合は、標準のキャッシュバックエンドをリファレンス実装として使用できます。コードは、Djangoソースの &lt;code&gt;django/core/cache/backends/&lt;/code&gt; ディレクトリーにあります。</target>
        </trans-unit>
        <trans-unit id="cdde1ef1672874bcb82d804c53395d8d7aa1ed21" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re constructing SQL like &lt;code&gt;strftime('%W', 'date')&lt;/code&gt; and need a literal &lt;code&gt;%&lt;/code&gt; character in the query, quadruple it (&lt;code&gt;%%%%&lt;/code&gt;) in the &lt;code&gt;template&lt;/code&gt; attribute because the string is interpolated twice: once during the template interpolation in &lt;code&gt;as_sql()&lt;/code&gt; and once in the SQL interpolation with the query parameters in the database cursor.</source>
          <target state="translated">&lt;code&gt;strftime('%W', 'date')&lt;/code&gt; ようにSQLを構築していて、クエリにリテラル &lt;code&gt;%&lt;/code&gt; 文字が必要な場合は、文字列が2回補間されるため、 &lt;code&gt;template&lt;/code&gt; 属性でそれを4倍にします（ &lt;code&gt;%%%%&lt;/code&gt; ）。 &lt;code&gt;as_sql()&lt;/code&gt; でのテンプレート補間と、データベースカーソルのクエリパラメータを使用したSQL補間で1回。</target>
        </trans-unit>
        <trans-unit id="ab456d418794c4d43bbff01956e9a7a76d213a8a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re constructing a URL manually (i.e., &lt;em&gt;not&lt;/em&gt; using the &lt;code&gt;reverse()&lt;/code&gt; function), you&amp;rsquo;ll need to take care of the encoding yourself. In this case, use the &lt;code&gt;iri_to_uri()&lt;/code&gt; and &lt;code&gt;quote()&lt;/code&gt; functions that were documented &lt;a href=&quot;#id1&quot;&gt;above&lt;/a&gt;. For example:</source>
          <target state="translated">URLを手動で作成している場合（つまり、 &lt;code&gt;reverse()&lt;/code&gt; 関数を使用して&lt;em&gt;いない&lt;/em&gt;場合）は、自分でエンコードを処理する必要があります。この場合、使用 &lt;code&gt;iri_to_uri()&lt;/code&gt; と &lt;code&gt;quote()&lt;/code&gt; 文書化された機能&lt;a href=&quot;#id1&quot;&gt;の上に&lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="6d1f283bcbf28eac94ae688e9ec728c932159a38" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re creating a pluggable app called &amp;ldquo;Rock &amp;rsquo;n&amp;rsquo; roll&amp;rdquo;, here&amp;rsquo;s how you would provide a proper name for the admin:</source>
          <target state="translated">「ロックンロール」というプラグイン可能なアプリを作成している場合、管理者に適切な名前を付ける方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="48483c8c5c77a7b69d1a11700c288faaa0c7a213" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re creating a template that might be used in situations where you&amp;rsquo;re not sure whether auto-escaping is enabled, then add an &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter to any variable that needs escaping. When auto-escaping is on, there&amp;rsquo;s no danger of the &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter &lt;em&gt;double-escaping&lt;/em&gt; data &amp;ndash; the &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter does not affect auto-escaped variables.</source>
          <target state="translated">自動エスケープが有効かどうかわからない状況で使用される可能性のあるテンプレートを作成している場合は、&lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;が必要な変数にエスケープフィルターを追加します。自動エスケープがオンの場合、&lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;フィルターがデータを&lt;em&gt;ダブル&lt;/em&gt;&lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;する危険はありません。エスケープフィルターは自動エスケープ変数に影響しません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bb584f8f7f077e584c39783ffdb002ff86b811fe" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re creating an Atom feed, rather than an RSS feed, set the &lt;code&gt;subtitle&lt;/code&gt; attribute instead of the &lt;code&gt;description&lt;/code&gt; attribute. See &lt;a href=&quot;#publishing-atom-and-rss-feeds-in-tandem&quot;&gt;Publishing Atom and RSS feeds in tandem&lt;/a&gt;, later, for an example.</source>
          <target state="translated">RSSフィードではなくAtomフィードを作成する場合は、 &lt;code&gt;description&lt;/code&gt; 属性の代わりに &lt;code&gt;subtitle&lt;/code&gt; 属性を設定します。例については、後で&lt;a href=&quot;#publishing-atom-and-rss-feeds-in-tandem&quot;&gt;AtomおよびRSSフィードをタンデム&lt;/a&gt;で公開するを参照してください。</target>
        </trans-unit>
        <trans-unit id="4cb96d8c5caf914260b393b1dfd4c0e8a90b35c9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re entirely happy with Django&amp;rsquo;s &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model, but you want to add some additional profile information, you could subclass &lt;a href=&quot;#django.contrib.auth.models.AbstractUser&quot;&gt;&lt;code&gt;django.contrib.auth.models.AbstractUser&lt;/code&gt;&lt;/a&gt; and add your custom profile fields, although we&amp;rsquo;d recommend a separate model as described in the &amp;ldquo;Model design considerations&amp;rdquo; note of &lt;a href=&quot;#specifying-custom-user-model&quot;&gt;Specifying a custom user model&lt;/a&gt;. &lt;code&gt;AbstractUser&lt;/code&gt; provides the full implementation of the default &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; as an &lt;a href=&quot;../db/models#abstract-base-classes&quot;&gt;abstract model&lt;/a&gt;.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;モデルに完全に満足しているが、追加のプロファイル情報を追加したい場合は、&lt;a href=&quot;#django.contrib.auth.models.AbstractUser&quot;&gt; &lt;code&gt;django.contrib.auth.models.AbstractUser&lt;/code&gt; &lt;/a&gt;をサブクラス化してカスタムプロファイルフィールドを追加できますが、説明されているように別のモデルをお勧めします&lt;a href=&quot;#specifying-custom-user-model&quot;&gt;カスタムユーザーモデルの指定&lt;/a&gt;の「モデルの設計に関する考慮事項」の注をご覧ください。 &lt;code&gt;AbstractUser&lt;/code&gt; は、デフォルトの完全な実装を提供&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;として&lt;a href=&quot;../db/models#abstract-base-classes&quot;&gt;抽象モデルを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf98ea5e8ac10c40300863d754cd455a34023fde" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re getting this error, you can solve it by:</source>
          <target state="translated">このエラーが発生した場合は、次の方法で解決できます。</target>
        </trans-unit>
        <trans-unit id="4ff638989d7f1c32d1bc77a814ea175afb1ded83" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having trouble going through this tutorial, please head over to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/help/&quot;&gt;Getting Help&lt;/a&gt; section of the FAQ.</source>
          <target state="translated">このチュートリアルで問題が発生した場合は、FAQの&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/help/&quot;&gt;「困ったときは」&lt;/a&gt;セクションに進んでください。</target>
        </trans-unit>
        <trans-unit id="6d2ac7f0ad5bbe9c9e5d4d66af481149008f986f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having trouble going through this tutorial, please post a message to &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-developers-mailing-list&quot;&gt;django-developers&lt;/a&gt; or drop by &lt;a href=&quot;irc://irc.freenode.net/django-dev&quot;&gt;#django-dev on irc.freenode.net&lt;/a&gt; to chat with other Django users who might be able to help.</source>
          <target state="translated">このチュートリアルの実行中に問題が発生した場合は、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-developers-mailing-list&quot;&gt;django-developersに&lt;/a&gt;メッセージを投稿するか&lt;a href=&quot;irc://irc.freenode.net/django-dev&quot;&gt;、irc.freenode.netの＃django-devに立ち寄っ&lt;/a&gt;て、助けてくれる他のDjangoユーザーとチャットしてください。</target>
        </trans-unit>
        <trans-unit id="7d98d87b390e8d3b15eb2355fe5039a0d87c9028" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re in a multi-database setup, you might have fixture data that you want to load onto one database, but not onto another. In this situation, you can add a database identifier into the names of your fixtures.</source>
          <target state="translated">マルチデータベース設定の場合、あるデータベースにはロードしたいが別のデータベースにはロードしたくないフィクスチャデータがあるかもしれません。この状況では、フィクスチャの名前にデータベース識別子を追加できます。</target>
        </trans-unit>
        <trans-unit id="36c3a9be516105bc13cecddbe3c1b10fd6b1043c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in changing the Python-level behavior of a model class, you &lt;em&gt;could&lt;/em&gt; use &lt;code&gt;managed=False&lt;/code&gt; and create a copy of an existing model. However, there&amp;rsquo;s a better approach for that situation: &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;Proxy models&lt;/a&gt;.</source>
          <target state="translated">モデルクラスのPythonレベルの動作を変更したい場合&lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;managed=False&lt;/code&gt; を使用して既存のモデルのコピーを作成&lt;em&gt;でき&lt;/em&gt;ます。ただし、そのような状況には、&lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;プロキシモデル&lt;/a&gt;というより良いアプローチがあります。</target>
        </trans-unit>
        <trans-unit id="99f458dbd1df038441eb2681e7428cb82105b3e7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in the more advanced migration operations, or want to be able to write your own, see the &lt;a href=&quot;../ref/migration-operations&quot;&gt;migration operations reference&lt;/a&gt; and the &amp;ldquo;how-to&amp;rdquo; on &lt;a href=&quot;../howto/writing-migrations&quot;&gt;writing migrations&lt;/a&gt;.</source>
          <target state="translated">より高度な移行オペレーションに興味がある場合、または独自の&lt;a href=&quot;../ref/migration-operations&quot;&gt;オペレーション&lt;/a&gt;を作成できるようにしたい場合は、移行オペレーションリファレンスと、&lt;a href=&quot;../howto/writing-migrations&quot;&gt;移行の作成&lt;/a&gt;に関する「ハウツー」をご覧ください。</target>
        </trans-unit>
        <trans-unit id="90b9a4c5a91dd19aabaed1109072ba30aa990297" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested, you can also run &lt;a href=&quot;../ref/django-admin#django-admin-check&quot;&gt;&lt;code&gt;python manage.py check&lt;/code&gt;&lt;/a&gt;; this checks for any problems in your project without making migrations or touching the database.</source>
          <target state="translated">興味がある場合は、&lt;a href=&quot;../ref/django-admin#django-admin-check&quot;&gt; &lt;code&gt;python manage.py check&lt;/code&gt; を&lt;/a&gt;実行することもできます。これにより、移行を行ったり、データベースに触れたりすることなく、プロジェクトの問題がチェックされます。</target>
        </trans-unit>
        <trans-unit id="254c1791d376774d686299aebfc8b6db7e292b89" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re just updating a record and don&amp;rsquo;t need to do anything with the model object, the most efficient approach is to call &lt;code&gt;update()&lt;/code&gt;, rather than loading the model object into memory. For example, instead of doing this:</source>
          <target state="translated">レコードを更新するだけで、モデルオブジェクトに対して何もする必要がない場合、最も効率的な方法は、モデルオブジェクトをメモリにロードするのではなく、 &lt;code&gt;update()&lt;/code&gt; を呼び出すことです。たとえば、これを行う代わりに：</target>
        </trans-unit>
        <trans-unit id="6535bf89936e50d74084e2cbe76650a8f1162a35" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re manually laying out a form in a template, as opposed to relying on Django&amp;rsquo;s default form layout, you might want to treat &lt;code&gt;&amp;lt;input type=&quot;hidden&quot;&amp;gt;&lt;/code&gt; fields differently from non-hidden fields. For example, because hidden fields don&amp;rsquo;t display anything, putting error messages &amp;ldquo;next to&amp;rdquo; the field could cause confusion for your users &amp;ndash; so errors for those fields should be handled differently.</source>
          <target state="translated">Djangoのデフォルトのフォームレイアウトに依存するのではなく、テンプレートでフォームを手動でレイアウトする場合は、 &lt;code&gt;&amp;lt;input type=&quot;hidden&quot;&amp;gt;&lt;/code&gt; フィールドを非表示でないフィールドとは異なる方法で処理することができます。たとえば、非表示フィールドには何も表示されないため、エラーメッセージをフィールドの「隣」に置くとユーザーが混乱する可能性があるため、これらのフィールドのエラーは別の方法で処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="255a115dbc0b712cc68471c5b0157f7a05af4797" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re new to &lt;a href=&quot;https://python.org/&quot;&gt;Python&lt;/a&gt;, you might want to start by getting an idea of what the language is like. Django is 100% Python, so if you&amp;rsquo;ve got minimal comfort with Python you&amp;rsquo;ll probably get a lot more out of Django.</source>
          <target state="translated">&lt;a href=&quot;https://python.org/&quot;&gt;Python&lt;/a&gt;が初めての場合は、言語の概要を理解することから始めてください。Djangoは100％Pythonであるため、Pythonの使用が最小限の場合でも、おそらくDjangoをさらに活用できます。</target>
        </trans-unit>
        <trans-unit id="57db89d44ba94f90db102a29f1cf186e18b0cf37" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re new to programming entirely, you might want to start with this &lt;a href=&quot;https://wiki.python.org/moin/BeginnersGuide/NonProgrammers&quot;&gt;list of Python resources for non-programmers&lt;/a&gt;</source>
          <target state="translated">プログラミングにまったく慣れていない場合は、&lt;a href=&quot;https://wiki.python.org/moin/BeginnersGuide/NonProgrammers&quot;&gt;プログラマー以外の人のためのPythonリソースの&lt;/a&gt;このリストから始めることをお勧めします</target>
        </trans-unit>
        <trans-unit id="a1b95c0b433ee48fc48a97069bddf9e2b101dfc4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not familiar with file modes, please note that the leading &lt;code&gt;0&lt;/code&gt; is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use &lt;code&gt;644&lt;/code&gt;, you&amp;rsquo;ll get totally incorrect behavior.</source>
          <target state="translated">ファイルモードに慣れていない場合は、先頭の &lt;code&gt;0&lt;/code&gt; が非常に重要であることに注意してください。これは8進数を示します。これは、モードを指定する方法です。 &lt;code&gt;644&lt;/code&gt; を使用しようとすると、完全に不正な動作が発生します。</target>
        </trans-unit>
        <trans-unit id="fca79f66a708a64746ced9500efdfaadfc0da5f9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not familiar with the Python DB-API, note that the SQL statement in &lt;code&gt;cursor.execute()&lt;/code&gt; uses placeholders, &lt;code&gt;&quot;%s&quot;&lt;/code&gt;, rather than adding parameters directly within the SQL. If you use this technique, the underlying database library will automatically escape your parameters as necessary.</source>
          <target state="translated">Python DB-APIに慣れていない場合、 &lt;code&gt;cursor.execute()&lt;/code&gt; の SQLステートメントは、SQL内に直接パラメーターを追加するのではなく、プレースホルダー &lt;code&gt;&quot;%s&quot;&lt;/code&gt; を使用することに注意してください。この手法を使用する場合、基になるデータベースライブラリは必要に応じてパラメーターを自動的にエスケープします。</target>
        </trans-unit>
        <trans-unit id="69337c6de60600bc5976cb6685657eebda60402c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not setting the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable, you &lt;em&gt;must&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt; at some point before using any code that reads settings.</source>
          <target state="translated">&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 環境変数を設定しない場合は、設定を読み取るコードを使用する前に、ある時点で &lt;code&gt;configure()&lt;/code&gt; を呼び出す&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4fdba98bf4c4fe90941820a9cac473eb87b6acfa" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not that familiar with Git, you can always find out more about its commands (once it&amp;rsquo;s installed) by typing &lt;code&gt;git help&lt;/code&gt; into the command line.</source>
          <target state="translated">Gitに慣れていない場合は、コマンドラインに &lt;code&gt;git help&lt;/code&gt; と入力すると、Gitのコマンドについて（インストール後）いつでも詳細を確認できます。</target>
        </trans-unit>
        <trans-unit id="8f2ea50eab7b004cc616e97a7e545f78a1430a05" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using the Django test runner, you may need to also ensure that any console output is not captured which would hide deprecation warnings. For example, if you use &lt;a href=&quot;https://pytest.org/&quot;&gt;pytest&lt;/a&gt;:</source>
          <target state="translated">Djangoテストランナーを使用していない場合は、非推奨の警告を隠すコンソール出力がキャプチャされないようにする必要がある場合もあります。たとえば、&lt;a href=&quot;https://pytest.org/&quot;&gt;pytest&lt;/a&gt;を使用する場合：</target>
        </trans-unit>
        <trans-unit id="336e08309a7a860fad0714de0146cb1df14fc063" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using the default project template, here are the requirements:</source>
          <target state="translated">デフォルトのプロジェクトテンプレートを使用していない場合の要件は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="65ea4d648599b2fb37f6f7e76db2905fce405c7f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using the vanilla sitemap view &amp;ndash; for example, if it&amp;rsquo;s wrapped with a caching decorator &amp;ndash; you must name your sitemap view and pass &lt;code&gt;sitemap_url_name&lt;/code&gt; to the index view:</source>
          <target state="translated">通常のサイトマップビューを使用していない場合（たとえば、キャッシュデコレーターでラップされている場合）、サイトマップビューに名前を付けて、 &lt;code&gt;sitemap_url_name&lt;/code&gt; をインデックスビューに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="a8c1d92ca93227fb6dd5eeedd2d2fb7fc729ef48" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re on Windows, put the drive letter at the beginning of the path, like this:</source>
          <target state="translated">Windowsを使用している場合は、次のようにパスの先頭にドライブ文字を入れます。</target>
        </trans-unit>
        <trans-unit id="4fae52cace337e4f280328a49b626c77ab0c7b45" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re overriding &lt;code&gt;get_queryset()&lt;/code&gt; on your manager, be sure to either call the method on the parent (using &lt;code&gt;super()&lt;/code&gt;) or do the appropriate handling of the &lt;code&gt;_db&lt;/code&gt; attribute on the manager (a string containing the name of the database to use).</source>
          <target state="translated">マネージャーで &lt;code&gt;get_queryset()&lt;/code&gt; をオーバーライドする場合は、必ず親のメソッドを呼び出すか（ &lt;code&gt;super()&lt;/code&gt; を使用）、マネージャーの &lt;code&gt;_db&lt;/code&gt; 属性（データベース名を含む文字列）を適切に処理してください。使用する）。</target>
        </trans-unit>
        <trans-unit id="f1a843504a97e80d5cb600f4100e8e00a5e36193" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re registering &lt;a href=&quot;signals#module-django.db.models.signals&quot;&gt;&lt;code&gt;model signals&lt;/code&gt;&lt;/a&gt;, you can refer to the sender by its string label instead of using the model class itself.</source>
          <target state="translated">&lt;a href=&quot;signals#module-django.db.models.signals&quot;&gt; &lt;code&gt;model signals&lt;/code&gt; &lt;/a&gt;登録する場合、モデルクラス自体を使用する代わりに、文字列ラベルで送信者を参照できます。</target>
        </trans-unit>
        <trans-unit id="7ad1460f336e480b534127419cefa394fd978f41" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re saving a file on a &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;, using a &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; makes this process much easier. The file object will be saved to the location specified by the &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; argument of the corresponding &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; when calling &lt;code&gt;form.save()&lt;/code&gt;:</source>
          <target state="translated">あなたは上のファイルを保存している場合&lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; にし&lt;/a&gt;、使用して&lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;、このプロセスは非常に簡単になります。ファイルオブジェクトは、 &lt;code&gt;form.save()&lt;/code&gt; を呼び出すときに、対応する&lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;../../ref/models/fields#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt;引数で指定された場所に保存されます。</target>
        </trans-unit>
        <trans-unit id="bedad35c511cec1744a3555151947dfea12f66f1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re serializing data (for example, when generating &lt;a href=&quot;../../topics/testing/tools#django.test.TransactionTestCase.fixtures&quot;&gt;&lt;code&gt;fixtures&lt;/code&gt;&lt;/a&gt;) from a model that implements generic relations, you should probably be using a natural key to uniquely identify related &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; objects. See &lt;a href=&quot;../../topics/serialization#topics-serialization-natural-keys&quot;&gt;natural keys&lt;/a&gt; and &lt;a href=&quot;../django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt;&lt;code&gt;dumpdata --natural-foreign&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">一般的な関係を実装するモデルからデータをシリアル化する場合（たとえば、&lt;a href=&quot;../../topics/testing/tools#django.test.TransactionTestCase.fixtures&quot;&gt; &lt;code&gt;fixtures&lt;/code&gt; &lt;/a&gt;生成する場合）、自然キーを使用して、関連する&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;オブジェクトを一意に識別する必要があります。詳細については、&lt;a href=&quot;../../topics/serialization#topics-serialization-natural-keys&quot;&gt;ナチュラルキー&lt;/a&gt;と&lt;a href=&quot;../django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt; &lt;code&gt;dumpdata --natural-foreign&lt;/code&gt; &lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="11eb2a40cd729d4d12c805c9535dc58c68ec956d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re starting a new project, it&amp;rsquo;s highly recommended to set up a custom user model, even if the default &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model is sufficient for you. This model behaves identically to the default user model, but you&amp;rsquo;ll be able to customize it in the future if the need arises:</source>
          <target state="translated">新しいプロジェクトを開始する場合は、デフォルトの&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;モデルで十分な場合でも、カスタムユーザーモデルを設定することを強くお勧めします。このモデルはデフォルトのユーザーモデルと同じように動作しますが、必要に応じて将来カスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="48a25be3e80caa082a172422daae21775a104668" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re subclassing an existing model (perhaps something from another application entirely) and want each model to have its own database table, &lt;a href=&quot;#multi-table-inheritance&quot;&gt;Multi-table inheritance&lt;/a&gt; is the way to go.</source>
          <target state="translated">既存のモデル（おそらく別のアプリケーションからのもの）をサブクラス化していて、各モデルに独自のデータベーステーブルを持たせたい場合は、&lt;a href=&quot;#multi-table-inheritance&quot;&gt;マルチテーブル継承&lt;/a&gt;が適しています。</target>
        </trans-unit>
        <trans-unit id="749f5754bf6064aeadce7af0aa572b7f5cd04a43" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re synchronizing content types to more than one database, be aware that their primary keys may not match across databases. This may result in data corruption or data loss.</source>
          <target state="translated">コンテンツタイプを複数のデータベースに同期する場合は、それらの主キーがデータベース間で一致しない可能性があることに注意してください。これにより、データの破損またはデータの損失が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f6fc2fe716bde4fb5cf0628226301f83349d64f4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re testing a multiple database configuration with primary/replica (referred to as master/slave by some databases) replication, this strategy of creating test databases poses a problem. When the test databases are created, there won&amp;rsquo;t be any replication, and as a result, data created on the primary won&amp;rsquo;t be seen on the replica.</source>
          <target state="translated">プライマリ/レプリカ（一部のデータベースではマスター/スレーブと呼ばれる）レプリケーションを使用して複数のデータベース構成をテストしている場合、テストデータベースを作成するこの戦略では問題が発生します。テストデータベースが作成されると、レプリケーションは行われず、その結果、プライマリで作成されたデータはレプリカで表示されません。</target>
        </trans-unit>
        <trans-unit id="7a5e6b4700226ab4c476a2e5c6dee860df741084" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re upgrading from South, this is basically the South pattern as an operation - one or two methods for forwards and backwards, with an ORM and schema operations available. Most of the time, you should be able to translate the &lt;code&gt;orm.Model&lt;/code&gt; or &lt;code&gt;orm[&quot;appname&quot;, &quot;Model&quot;]&lt;/code&gt; references from South directly into &lt;code&gt;apps.get_model(&quot;appname&quot;, &quot;Model&quot;)&lt;/code&gt; references here and leave most of the rest of the code unchanged for data migrations. However, &lt;code&gt;apps&lt;/code&gt; will only have references to models in the current app unless migrations in other apps are added to the migration&amp;rsquo;s dependencies.</source>
          <target state="translated">南からアップグレードする場合、これは基本的に操作としての南のパターンです-ORMとスキーマ操作が利用可能な、フォワードとバックワードの1つまたは2つの方法。ほとんどの場合、 &lt;code&gt;orm.Model&lt;/code&gt; からのorm.Modelまたは &lt;code&gt;orm[&quot;appname&quot;, &quot;Model&quot;]&lt;/code&gt; 参照を直接 &lt;code&gt;apps.get_model(&quot;appname&quot;, &quot;Model&quot;)&lt;/code&gt; 参照に変換して、ほとんどの部分をそのままにしておくことができるはずです。残りのコードはデータ移行用に変更されていません。ただし、 &lt;code&gt;apps&lt;/code&gt; 他のアプリでの移行は、移行の依存関係に追加されていない限り、現在のアプリケーション内のモデルへの参照を持っています。</target>
        </trans-unit>
        <trans-unit id="dd100d30c9413b8bcf0a641346e7fe8e8d78916b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re upgrading through more than one feature version (e.g. 2.0 to 2.2), it&amp;rsquo;s usually easier to upgrade through each feature release incrementally (2.0 to 2.1 to 2.2) rather than to make all the changes for each feature release at once. For each feature release, use the latest patch release (e.g. for 2.1, use 2.1.15).</source>
          <target state="translated">複数の機能バージョン（2.0から2.2など）でアップグレードする場合、通常、各機能リリースのすべての変更を一度に行うよりも、各機能リリース（2.0から2.1から2.2）を段階的にアップグレードする方が簡単です。機能のリリースごとに、最新のパッチリリースを使用します（例：2.1の場合は2.1.15を使用）。</target>
        </trans-unit>
        <trans-unit id="c0a30d48cf1c939c8e9ed571529055414a3d67b6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &amp;ldquo;Rock &amp;rsquo;n&amp;rsquo; roll&amp;rdquo; in a project called &lt;code&gt;anthology&lt;/code&gt;, but you want it to show up as &amp;ldquo;Jazz Manouche&amp;rdquo; instead, you can provide your own configuration:</source>
          <target state="translated">&lt;code&gt;anthology&lt;/code&gt; というプロジェクトで「ロックンロール」を使用しているが、代わりに「Jazz Manouche」として表示したい場合は、独自の設定を提供できます。</target>
        </trans-unit>
        <trans-unit id="481f4f1b70a903de3297e01b947b9f2c4871b7fa" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &lt;a href=&quot;../topics/http/sessions#cached-sessions-backend&quot;&gt;cache-based session storage&lt;/a&gt;, this selects the cache to use.</source>
          <target state="translated">あなたが使用している場合&lt;a href=&quot;../topics/http/sessions#cached-sessions-backend&quot;&gt;、キャッシュベースのセッションストレージを&lt;/a&gt;、これが使用するキャッシュを選択します。</target>
        </trans-unit>
        <trans-unit id="aeeb2f9285f5f42da4ca38d644da7b9668702942" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using AngularJS 1.1.3 and newer, it&amp;rsquo;s sufficient to configure the &lt;code&gt;$http&lt;/code&gt; provider with the cookie and header names:</source>
          <target state="translated">AngularJS 1.1.3以降を使用している場合は、 &lt;code&gt;$http&lt;/code&gt; プロバイダーにcookieとヘッダー名を設定するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="b71dafc0a9ca6cc7e9afc06dfb5f48ffeac44f3e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Django&amp;rsquo;s &lt;a href=&quot;testing/index&quot;&gt;testing framework&lt;/a&gt; to test database queries, Django will need permission to create a test database.</source>
          <target state="translated">Djangoの&lt;a href=&quot;testing/index&quot;&gt;テストフレームワーク&lt;/a&gt;を使用してデータベースクエリをテストしている場合、Djangoにはテストデータベースを作成する権限が必要です。</target>
        </trans-unit>
        <trans-unit id="9944ee7dd34baf50152dd56fcdc484819ead5962" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Linux or MacOS and install both &lt;a href=&quot;https://pypi.org/project/pywatchman/&quot;&gt;pywatchman&lt;/a&gt; and the &lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;Watchman&lt;/a&gt; service, kernel signals will be used to autoreload the server (rather than polling file modification timestamps each second). This offers better performance on large projects, reduced response time after code changes, more robust change detection, and a reduction in power usage. Django supports &lt;code&gt;pywatchman&lt;/code&gt; 1.2.0 and higher.</source>
          <target state="translated">LinuxまたはMacOSを使用していて、&lt;a href=&quot;https://pypi.org/project/pywatchman/&quot;&gt;pywatchman&lt;/a&gt;と&lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;Watchman&lt;/a&gt;サービスの両方をインストールする場合、カーネルの信号がサーバーの自動再読み込みに使用されます（ファイル変更タイムスタンプを毎秒ポーリングするのではなく）。これにより、大規模プロジェクトでのパフォーマンスが向上し、コード変更後の応答時間が短縮され、より堅牢な変更検出が実現し、電力使用量が削減されます。Djangoは &lt;code&gt;pywatchman&lt;/code&gt; 1.2.0以降をサポートしています。</target>
        </trans-unit>
        <trans-unit id="4e53baf0d0f56b77511625581c99cc7d9191b439" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Memcached, consider using &lt;a href=&quot;../../topics/http/sessions#cached-sessions-backend&quot;&gt;cached sessions&lt;/a&gt; to improve performance.</source>
          <target state="translated">Memcachedを使用している場合は、&lt;a href=&quot;../../topics/http/sessions#cached-sessions-backend&quot;&gt;キャッシュされたセッション&lt;/a&gt;を使用してパフォーマンスを向上させることを検討してください。</target>
        </trans-unit>
        <trans-unit id="5123ae3f1eac47dcb57f53aa5e34a747a949d8e9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL and this value &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; start with a forward slash, then this value is assumed to be the host.</source>
          <target state="translated">MySQLを使用していて、この値&lt;em&gt;が&lt;/em&gt;スラッシュで始まって&lt;em&gt;いない&lt;/em&gt;場合、この値がホストであると見なされます。</target>
        </trans-unit>
        <trans-unit id="5c1359456437f291b8b48eb0bceaeca46fd2af3d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL or MariaDB, you&amp;rsquo;ll need a &lt;a href=&quot;../ref/databases#mysql-db-api-drivers&quot;&gt;DB API driver&lt;/a&gt; like &lt;code&gt;mysqlclient&lt;/code&gt;. See &lt;a href=&quot;../ref/databases#mysql-notes&quot;&gt;notes for the MySQL backend&lt;/a&gt; for details.</source>
          <target state="translated">MySQLまたはMariaDBを使用している場合は、 &lt;code&gt;mysqlclient&lt;/code&gt; などの&lt;a href=&quot;../ref/databases#mysql-db-api-drivers&quot;&gt;DB APIドライバー&lt;/a&gt;が必要です。詳細&lt;a href=&quot;../ref/databases#mysql-notes&quot;&gt;については、MySQLバックエンドのメモを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bf9bdf3f5fa10aff2cab1f17aaffdcca0b623596" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL, the following checks will be performed:</source>
          <target state="translated">MySQLを使用している場合、次のチェックが実行されます。</target>
        </trans-unit>
        <trans-unit id="228adccc2a150114c8cffe4456bca9a36f683fa7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL, your tables may or may not support transactions; it depends on your MySQL version and the table types you&amp;rsquo;re using. (By &amp;ldquo;table types,&amp;rdquo; we mean something like &amp;ldquo;InnoDB&amp;rdquo; or &amp;ldquo;MyISAM&amp;rdquo;.) MySQL transaction peculiarities are outside the scope of this article, but the MySQL site has &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-syntax-transactions.html&quot;&gt;information on MySQL transactions&lt;/a&gt;.</source>
          <target state="translated">MySQLを使用している場合、テーブルがトランザクションをサポートする場合とサポートしない場合があります。MySQLのバージョンと使用しているテーブルのタイプによって異なります。（「テーブルタイプ」とは、「InnoDB」や「MyISAM」のようなものを意味します。）MySQLトランザクションの特殊性はこの記事の範囲外ですが、MySQLサイトには&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-syntax-transactions.html&quot;&gt;MySQLトランザクションに関する情報があります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a9a0fd540cf9eba9010f1a43a66ed09c582deee1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Oracle, you&amp;rsquo;ll need a copy of &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt;, but please read the &lt;a href=&quot;../ref/databases#oracle-notes&quot;&gt;notes for the Oracle backend&lt;/a&gt; for details regarding supported versions of both Oracle and &lt;code&gt;cx_Oracle&lt;/code&gt;.</source>
          <target state="translated">Oracleを使用している場合は、&lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracleの&lt;/a&gt;コピーが必要ですが、Oracleと &lt;code&gt;cx_Oracle&lt;/code&gt; の両方のサポートされているバージョンの詳細については&lt;a href=&quot;../ref/databases#oracle-notes&quot;&gt;、Oracleバックエンドの注意事項&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="92d54d481c5d03a9b0ca88a5f50b8ed2498b6ef7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, Django provides &lt;a href=&quot;../../ref/contrib/postgres/search&quot;&gt;a selection of database specific tools&lt;/a&gt; to allow you to leverage more complex querying options. Other databases have different selections of tools, possibly via plugins or user-defined functions. Django doesn&amp;rsquo;t include any support for them at this time. We&amp;rsquo;ll use some examples from PostgreSQL to demonstrate the kind of functionality databases may have.</source>
          <target state="translated">PostgreSQLを使用している場合、Djangoは&lt;a href=&quot;../../ref/contrib/postgres/search&quot;&gt;データベース固有のツールの選択を&lt;/a&gt;提供して、より複雑なクエリオプションを活用できるようにします。他のデータベースでは、プラグインまたはユーザー定義関数を介して、さまざまなツールが選択されています。現時点では、Djangoにはそれらのサポートは含まれていません。PostgreSQLの例をいくつか使用して、データベースが持つ可能性のある機能の種類を示します。</target>
        </trans-unit>
        <trans-unit id="2740b6405cd59234c5607e21afdcdaccce94c79c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, by default (empty &lt;a href=&quot;#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt;), the connection to the database is done through UNIX domain sockets (&amp;lsquo;local&amp;rsquo; lines in &lt;code&gt;pg_hba.conf&lt;/code&gt;). If your UNIX domain socket is not in the standard location, use the same value of &lt;code&gt;unix_socket_directory&lt;/code&gt; from &lt;code&gt;postgresql.conf&lt;/code&gt;. If you want to connect through TCP sockets, set &lt;a href=&quot;#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; to &amp;lsquo;localhost&amp;rsquo; or &amp;lsquo;127.0.0.1&amp;rsquo; (&amp;lsquo;host&amp;rsquo; lines in &lt;code&gt;pg_hba.conf&lt;/code&gt;). On Windows, you should always define &lt;a href=&quot;#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt;, as UNIX domain sockets are not available.</source>
          <target state="translated">PostgreSQLを使用している場合、デフォルトで（空の&lt;a href=&quot;#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt;）、データベースへの接続はUNIXドメインソケット（ &lt;code&gt;pg_hba.conf&lt;/code&gt; の「local」行）を介して行われます。UNIXドメインソケットが標準の場所にない場合は、 &lt;code&gt;postgresql.conf&lt;/code&gt; の &lt;code&gt;unix_socket_directory&lt;/code&gt; と同じ値を使用します。TCPソケットを介して接続する場合は、&lt;a href=&quot;#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt;を 'localhost'または '127.0.0.1'（ &lt;code&gt;pg_hba.conf&lt;/code&gt; の 'host'行）に設定します。Windowsでは、UNIXドメインソケットは使用できないため、常に&lt;a href=&quot;#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt;を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="dd5ae27cbc04f18050df1d431f5fb25a9fbe2c53" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, the sequence associated with the primary key might need to be updated; see &lt;a href=&quot;../databases#manually-specified-autoincrement-pk&quot;&gt;Manually-specifying values of auto-incrementing primary keys&lt;/a&gt;.</source>
          <target state="translated">PostgreSQLを使用している場合は、主キーに関連付けられているシーケンスを更新する必要がある場合があります。&lt;a href=&quot;../databases#manually-specified-autoincrement-pk&quot;&gt;自動インクリメントの主キーの値を手動で指定するを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="17609ee45cfd691775da7000d116f264e7657fcb" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, you&amp;rsquo;ll need the &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; package. Refer to the &lt;a href=&quot;../ref/databases#postgresql-notes&quot;&gt;PostgreSQL notes&lt;/a&gt; for further details.</source>
          <target state="translated">PostgreSQLを使用している場合は、&lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt;パッケージが必要です。詳細については、&lt;a href=&quot;../ref/databases#postgresql-notes&quot;&gt;PostgreSQLのノート&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="81dfb5f0dc2391f3e82b1355d3ca6abc305f8d47" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Postgres, Oracle, or MySQL with InnoDB, this is enforced at the database integrity level &amp;ndash; database level key constraints prevent the creation of relations that can&amp;rsquo;t be validated.</source>
          <target state="translated">InnoDBでPostgres、Oracle、またはMySQLを使用している場合、これはデータベースの整合性レベルで適用されます。データベースレベルのキー制約により、検証できない関係の作成が防止されます。</target>
        </trans-unit>
        <trans-unit id="65a65316c0bd24040960220c94a678789b0f6a2a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using SQLite you might want to read the &lt;a href=&quot;../ref/databases#sqlite-notes&quot;&gt;SQLite backend notes&lt;/a&gt;.</source>
          <target state="translated">SQLiteを使用している場合は、&lt;a href=&quot;../ref/databases#sqlite-notes&quot;&gt;SQLiteバックエンドノートを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="334c33a340c62565a0dda48701d8cc481ae24464" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using SQLite, you don&amp;rsquo;t need to create anything beforehand - the database file will be created automatically when it is needed.</source>
          <target state="translated">SQLiteを使用している場合、事前に何かを作成する必要はありません。データベースファイルは、必要なときに自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="dd02ebc4205a2c5d09b790615c39301f2afffdb4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Windows and need to install the GNU gettext utilities so &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; works see &lt;a href=&quot;#gettext-on-windows&quot;&gt;gettext on Windows&lt;/a&gt; for more information.</source>
          <target state="translated">Windowsを使用していて、&lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt; &lt;code&gt;django-admin compilemessages&lt;/code&gt; が&lt;/a&gt;機能するようにGNU gettextユーティリティをインストールする必要がある場合は、詳細&lt;a href=&quot;#gettext-on-windows&quot;&gt;についてWindowsのgettextを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7c2566945d2ca024ddf78f5b4ec709f5e3b7bae3" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Windows and need to install the GNU gettext utilities so &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; works, see &lt;a href=&quot;#gettext-on-windows&quot;&gt;gettext on Windows&lt;/a&gt; for more information.</source>
          <target state="translated">Windowsを使用していて、&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; が&lt;/a&gt;機能するようにGNU gettextユーティリティをインストールする必要がある場合は、詳細&lt;a href=&quot;#gettext-on-windows&quot;&gt;についてWindowsのgettextを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="46eb70b42871e7bacf59440c3bae92eb1b4ae4ef" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a &lt;code&gt;QuerySet&lt;/code&gt; with a very large number of items, requesting high page numbers might be slow on some databases, because the resulting &lt;code&gt;LIMIT&lt;/code&gt;/&lt;code&gt;OFFSET&lt;/code&gt; query needs to count the number of &lt;code&gt;OFFSET&lt;/code&gt; records which takes longer as the page number gets higher.</source>
          <target state="translated">非常に多数のアイテムで &lt;code&gt;QuerySet&lt;/code&gt; を使用している場合、一部のデータベースでは大きなページ番号のリクエストが遅くなる可能性があります。これは、結果の &lt;code&gt;LIMIT&lt;/code&gt; / &lt;code&gt;OFFSET&lt;/code&gt; クエリが &lt;code&gt;OFFSET&lt;/code&gt; レコードの数をカウントする必要があるため、ページ番号が大きくなるほど時間がかかります。</target>
        </trans-unit>
        <trans-unit id="70b3d5d4568f4fd39cfd395329f1734d8e532b16" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a cache, connection parameters may be different in development and in production. Django defaults to per-process &lt;a href=&quot;../../topics/cache#local-memory-caching&quot;&gt;local-memory caching&lt;/a&gt; which may not be desirable.</source>
          <target state="translated">キャッシュを使用している場合、接続パラメーターは開発と本番で異なる場合があります。Djangoはデフォルトでプロセスごとの&lt;a href=&quot;../../topics/cache#local-memory-caching&quot;&gt;ローカルメモリキャッシング&lt;/a&gt;を使用しますが、これは望ましくない場合があります。</target>
        </trans-unit>
        <trans-unit id="fc3ed93f28f451dc5be072e0a09e76c785745981" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a database backend that uses a different SQL syntax for a certain function, you can add support for it by monkey patching a new method onto the function&amp;rsquo;s class.</source>
          <target state="translated">特定の関数に異なるSQL構文を使用するデータベースバックエンドを使用している場合は、関数のクラスに新しいメソッドをモンキーパッチすることで、サポートを追加できます。</target>
        </trans-unit>
        <trans-unit id="42525c03b5426673012c5e443de921b7d2a48312" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a database besides SQLite, make sure you&amp;rsquo;ve created a database by this point. Do that with &amp;ldquo;&lt;code&gt;CREATE DATABASE database_name;&lt;/code&gt;&amp;rdquo; within your database&amp;rsquo;s interactive prompt.</source>
          <target state="translated">SQLite以外のデータベースを使用している場合は、この時点でデータベースが作成されていることを確認してください。「 &lt;code&gt;CREATE DATABASE database_name;&lt;/code&gt; データベースのインタラクティブプロンプト内。</target>
        </trans-unit>
        <trans-unit id="3bfd941888efa436ecc6ede3006e996113f463ad" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a different authentication backend, this method may require different credentials. It requires whichever credentials are required by your backend&amp;rsquo;s &lt;code&gt;authenticate()&lt;/code&gt; method.</source>
          <target state="translated">別の認証バックエンドを使用している場合、この方法では別の認証情報が必要になることがあります。バックエンドの &lt;code&gt;authenticate()&lt;/code&gt; メソッドで必要な資格情報が必要です。</target>
        </trans-unit>
        <trans-unit id="05764d13eeb945fede1a5e8927e7f8a5ab301058" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a hosting service and can&amp;rsquo;t change your server&amp;rsquo;s default storage engine, you have a couple of options.</source>
          <target state="translated">ホスティングサービスを使用していて、サーバーのデフォルトのストレージエンジンを変更できない場合は、いくつかのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="5a353593d2d8e5b736818eb171577ee093269dde" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using an &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt;&lt;code&gt;ArrayField&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;CIText&lt;/code&gt; fields, you must add &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, otherwise field values will appear as strings like &lt;code&gt;'{thoughts,django}'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CIText&lt;/code&gt; フィールドの&lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt; &lt;code&gt;ArrayField&lt;/code&gt; &lt;/a&gt;を使用している場合は、&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;に &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; django.contrib.postgres 」を追加する必要があります。追加しない場合、フィールド値は &lt;code&gt;'{thoughts,django}'&lt;/code&gt; ような文字列として表示されます。</target>
        </trans-unit>
        <trans-unit id="61e7c53b9fd063f957398fb1f4320dfd4e2a9584" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using an unofficial 3rd party backend, please consult the documentation provided for any additional requirements.</source>
          <target state="translated">非公式のサードパーティのバックエンドを使用している場合、追加の要件については、提供されているドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="fb1e7f7e52bbcd15afd7dc412eee86df9c3f70b8" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using components of Django &amp;ldquo;standalone&amp;rdquo; &amp;ndash; for example, writing a Python script which loads some Django templates and renders them, or uses the ORM to fetch some data &amp;ndash; there&amp;rsquo;s one more step you&amp;rsquo;ll need in addition to configuring settings.</source>
          <target state="translated">Djangoの「スタンドアロン」のコンポーネントを使用している場合-たとえば、いくつかのDjangoテンプレートをロードしてレンダリングする、またはORMを使用してデータをフェッチするPythonスクリプトを作成する場合-設定の構成に加えて、もう1つ必要なステップがあります。 。</target>
        </trans-unit>
        <trans-unit id="6c2160405a6776b9843f65c896f4c6a76b70b42b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using file-based session storage, this sets the directory in which Django will store session data. When the default value (&lt;code&gt;None&lt;/code&gt;) is used, Django will use the standard temporary directory for the system.</source>
          <target state="translated">ファイルベースのセッションストレージを使用している場合は、Djangoがセッションデータを保存するディレクトリを設定します。デフォルト値（ &lt;code&gt;None&lt;/code&gt; ）を使用すると、Djangoはシステムの標準の一時ディレクトリを使用します。</target>
        </trans-unit>
        <trans-unit id="bdf2864962c6854deb565415dc128e418e85409e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using middleware, you can do that. Middleware provides multiple opportunities to process a response on exit from a view. If you put behavior in the response middleware, it&amp;rsquo;s guaranteed to execute after template rendering has taken place.</source>
          <target state="translated">ミドルウェアを使用している場合は、それを実行できます。ミドルウェアは、ビューの終了時に応答を処理する複数の機会を提供します。応答ミドルウェアに動作を設定すると、テンプレートのレンダリングが行われた後に実行されることが保証されます。</target>
        </trans-unit>
        <trans-unit id="176b3e53bd5619ca954a6de51573ff4145217e13" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using pagination, you can adapt the &lt;a href=&quot;../../topics/pagination#using-paginator-in-view&quot;&gt;example template from the pagination docs&lt;/a&gt;. Change instances of &lt;code&gt;contacts&lt;/code&gt; in that example template to &lt;code&gt;page_obj&lt;/code&gt;.</source>
          <target state="translated">ページネーションを使用している場合&lt;a href=&quot;../../topics/pagination#using-paginator-in-view&quot;&gt;は、ページネーションのドキュメントからサンプルテンプレートを&lt;/a&gt;適用できます。そのサンプルテンプレートの &lt;code&gt;contacts&lt;/code&gt; インスタンスを &lt;code&gt;page_obj&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="38126e95e0083d43b4efeedfd50bff85a4f91dfd" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the &lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; backend, each session is a normal Django model. The &lt;code&gt;Session&lt;/code&gt; model is defined in &lt;code&gt;django/contrib/sessions/models.py&lt;/code&gt;. Because it&amp;rsquo;s a normal model, you can access sessions using the normal Django database API:</source>
          <target state="translated">&lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; バックエンドを使用している場合、各セッションは通常のDjangoモデルです。 &lt;code&gt;Session&lt;/code&gt; モデルがで定義されている &lt;code&gt;django/contrib/sessions/models.py&lt;/code&gt; 。これは通常のモデルであるため、通常のDjangoデータベースAPIを使用してセッションにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="50d514d3dd0b830cdb2e92c3b229482ff305cf07" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the context processor, your template should be rendered with a &lt;code&gt;RequestContext&lt;/code&gt;. Otherwise, ensure &lt;code&gt;messages&lt;/code&gt; is available to the template context.</source>
          <target state="translated">コンテキストプロセッサを使用している場合、テンプレートは &lt;code&gt;RequestContext&lt;/code&gt; でレンダリングする必要があります。それ以外の場合は、 &lt;code&gt;messages&lt;/code&gt; がテンプレートコンテキストで使用できることを確認してください。</target>
        </trans-unit>
        <trans-unit id="526e48b58228f65bfc33a8bdc8a0463e6592108c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the same HTML for each of your form fields, you can reduce duplicate code by looping through each field in turn using a &lt;code&gt;{% for %}&lt;/code&gt; loop:</source>
          <target state="translated">各フォームフィールドに同じHTMLを使用している場合は、 &lt;code&gt;{% for %}&lt;/code&gt; ループを使用して各フィールドを順番にループすることにより、コードの重複を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="71b2f6560e3b81f86c2f6fbf8c0b3fd58fd8164f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re wrestling with a particular problem, start with the &lt;a href=&quot;#time-zones-faq&quot;&gt;time zone FAQ&lt;/a&gt;.</source>
          <target state="translated">特定の問題に取り組んでいる場合は、&lt;a href=&quot;#time-zones-faq&quot;&gt;タイムゾーンのFAQ&lt;/a&gt;から始めてください。</target>
        </trans-unit>
        <trans-unit id="033bd6d75929d6d7705838d0e26ce74b89b3cf6f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a pluggable application that&amp;rsquo;s expected to work independently of the value of &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt;, you may find &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;django.utils.timezone.now()&lt;/code&gt;&lt;/a&gt; useful. This function returns the current date and time as a naive datetime when &lt;code&gt;USE_TZ = False&lt;/code&gt; and as an aware datetime when &lt;code&gt;USE_TZ = True&lt;/code&gt;. You can add or subtract &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;datetime.timedelta&lt;/code&gt;&lt;/a&gt; as needed.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;の値とは無関係に動作することが予想されるプラグ可能なアプリケーションを作成している場合は、&lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;django.utils.timezone.now()&lt;/code&gt; が&lt;/a&gt;役立つことがあります。この関数は、 &lt;code&gt;USE_TZ = False&lt;/code&gt; 場合は現在の日時を単純な日時として返し、 &lt;code&gt;USE_TZ = True&lt;/code&gt; 場合は対応する日時として返します。必要に応じて、&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;datetime.timedelta&lt;/code&gt; &lt;/a&gt;を加算または減算できます。</target>
        </trans-unit>
        <trans-unit id="1b9ad3f8840feee3141c8778e1865bfb234bef75" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a reusable app (or other piece of code) and want to include messaging functionality, but don&amp;rsquo;t want to require your users to enable it if they don&amp;rsquo;t want to, you may pass an additional keyword argument &lt;code&gt;fail_silently=True&lt;/code&gt; to any of the &lt;code&gt;add_message&lt;/code&gt; family of methods. For example:</source>
          <target state="translated">再利用可能なアプリ（またはその他のコード）を作成していて、メッセージング機能を含めたいが、ユーザーが望まない場合に有効にすることをユーザーに要求したくない場合は、追加のキーワード引数 &lt;code&gt;fail_silently=True&lt;/code&gt; 渡すことができます。 =メソッドの &lt;code&gt;add_message&lt;/code&gt; ファミリーのいずれかに該当します。例えば：</target>
        </trans-unit>
        <trans-unit id="84e127f1322ee32bfece7dc5d4283b6cce1c3d07" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a template filter that only expects a string as the first argument, you should use the decorator &lt;code&gt;stringfilter&lt;/code&gt;. This will convert an object to its string value before being passed to your function:</source>
          <target state="translated">最初の引数として文字列のみを期待するテンプレートフィルターを作成する場合は、デコレーター &lt;code&gt;stringfilter&lt;/code&gt; を使用する必要があります。これは、関数に渡される前にオブジェクトを文字列値に変換します。</target>
        </trans-unit>
        <trans-unit id="62e93f9276c7d2bf03dab03afbe7a0d01da88a4a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing reusable views or templates, you may not know ahead of time whether your form is a multipart form or not. The &lt;code&gt;is_multipart()&lt;/code&gt; method tells you whether the form requires multipart encoding for submission:</source>
          <target state="translated">再利用可能なビューまたはテンプレートを作成している場合、フォームがマルチパートフォームであるかどうかが事前にわからない場合があります。 &lt;code&gt;is_multipart()&lt;/code&gt; メソッドは、フォームが提出マルチパートエンコーディングを必要とするかどうかを示します：</target>
        </trans-unit>
        <trans-unit id="0b3ccbce78a9deb2e8380cbbbf0c3e8d425150d4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing some code that must handle an unknown model, for example, in a third-party app that implements a generic view, use this manager (or &lt;a href=&quot;#django.db.models.Model._base_manager&quot;&gt;&lt;code&gt;_base_manager&lt;/code&gt;&lt;/a&gt;) rather than assuming the model has an &lt;code&gt;objects&lt;/code&gt; manager.</source>
          <target state="translated">不明なモデルを処理する必要があるコードを作成している場合（たとえば、汎用ビューを実装するサードパーティアプリで）、モデルに &lt;code&gt;objects&lt;/code&gt; マネージャーがあると想定せずに、このマネージャー（または&lt;a href=&quot;#django.db.models.Model._base_manager&quot;&gt; &lt;code&gt;_base_manager&lt;/code&gt; &lt;/a&gt;）を使用します。</target>
        </trans-unit>
        <trans-unit id="ffa49a02c217a153d3911b777d92a70dad025527" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve activated the automatic Django admin interface, you should see a &amp;ldquo;Flatpages&amp;rdquo; section on the admin index page. Edit flatpages as you edit any other object in the system.</source>
          <target state="translated">自動Django管理インターフェースを有効にしている場合は、管理インデックスページに「フラットページ」セクションが表示されます。システム内の他のオブジェクトを編集するときにフラットページを編集します。</target>
        </trans-unit>
        <trans-unit id="8c91814cc038e9087397b1c9d79e06cb53c2998e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve activated the automatic Django admin interface, you should see a &amp;ldquo;Redirects&amp;rdquo; section on the admin index page. Edit redirects as you edit any other object in the system.</source>
          <target state="translated">自動Django管理インターフェースを有効にした場合は、管理インデックスページに「リダイレクト」セクションが表示されます。システム内の他のオブジェクトを編集するときにリダイレクトを編集します。</target>
        </trans-unit>
        <trans-unit id="746003a32ff1823f7c12c2c3009e4bcdbdada474" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve always used naive datetimes, you probably believe that you can convert a datetime to a date by calling its &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.date&quot;&gt;&lt;code&gt;date()&lt;/code&gt;&lt;/a&gt; method. You also consider that a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; is a lot like a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;, except that it&amp;rsquo;s less accurate.</source>
          <target state="translated">常にナイーブな日時を使用してきた場合は、おそらく&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.date&quot;&gt; &lt;code&gt;date()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことで日時を日付に変換できると信じているでしょう。また、&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;は正確性が低いことを除いて、&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;によく似ていると見なします。</target>
        </trans-unit>
        <trans-unit id="510f1ae50ede1300d4b2693ad8c71631f7d7fb86" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve customized the &lt;a href=&quot;../../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting, &lt;a href=&quot;../../middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../middleware#django.contrib.messages.middleware.MessageMiddleware&quot;&gt;&lt;code&gt;django.contrib.messages.middleware.MessageMiddleware&lt;/code&gt;&lt;/a&gt; must be included.</source>
          <target state="translated">&lt;a href=&quot;../../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;設定をカスタマイズした場合は、&lt;a href=&quot;../../middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../middleware#django.contrib.messages.middleware.MessageMiddleware&quot;&gt; &lt;code&gt;django.contrib.messages.middleware.MessageMiddleware&lt;/code&gt; を&lt;/a&gt;含める必要があります。</target>
        </trans-unit>
        <trans-unit id="46537cc51b7d74f1917135d14f86f7f048e20457" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve never had to deal with tests before, they can look a little hard to write at first glance. Fortunately, testing is a &lt;em&gt;very&lt;/em&gt; big subject in computer programming, so there&amp;rsquo;s lots of information out there:</source>
          <target state="translated">これまでにテストに対処する必要がなかった場合、一見すると少し難しく見えるかもしれません。幸いなことに、テストはコンピュータプログラミングの&lt;em&gt;非常に&lt;/em&gt;大きなテーマであるため、そこには多くの情報があります。</target>
        </trans-unit>
        <trans-unit id="b1fcac0f08f188a490cc866525da1cb739eb8667" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve saved an instance to one database, it might be tempting to use &lt;code&gt;save(using=...)&lt;/code&gt; as a way to migrate the instance to a new database. However, if you don&amp;rsquo;t take appropriate steps, this could have some unexpected consequences.</source>
          <target state="translated">インスタンスを1つのデータベースに保存した場合、インスタンスを新しいデータベースに移行する方法として &lt;code&gt;save(using=...)&lt;/code&gt; を使用したくなるかもしれません。ただし、適切な手順を実行しないと、予期しない結果が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e02d2ccf5c1a7f35c124bfd1c3140db6fcf906af" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve used the &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; command you&amp;rsquo;ve probably already seen &lt;code&gt;dependencies&lt;/code&gt; in action because auto-created migrations have this defined as part of their creation process.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;コマンドを使用したことがある場合は、自動作成された移行で作成プロセスの一部としてこれが定義されているため、 &lt;code&gt;dependencies&lt;/code&gt; が動作していることはおそらくすでに目にしたことでしょう。</target>
        </trans-unit>
        <trans-unit id="57c4c61903f21939d1b79448096a5c411639cc93" translate="yes" xml:space="preserve">
          <source>If your &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; inherits from &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; or implements its own &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt;&lt;code&gt;get_session_auth_hash()&lt;/code&gt;&lt;/a&gt; method, authenticated sessions will include the hash returned by this function. In the &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; case, this is an HMAC of the password field. Django verifies that the hash in the session for each request matches the one that&amp;rsquo;s computed during the request. This allows a user to log out all of their sessions by changing their password.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;が&lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt;から継承するか、独自の&lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt; &lt;code&gt;get_session_auth_hash()&lt;/code&gt; &lt;/a&gt;メソッドを実装する場合、認証されたセッションには、この関数によって返されるハッシュが含まれます。で&lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; の&lt;/a&gt;場合、これはパスワードフィールドのHMACです。Djangoは、各リクエストのセッション内のハッシュが、リクエスト中に計算されたものと一致することを確認します。これにより、ユーザーはパスワードを変更してすべてのセッションをログアウトできます。</target>
        </trans-unit>
        <trans-unit id="ff6fb60a475d1cd1de37b15f96dc6b92a8c3143c" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;ModelForm&lt;/code&gt; and &lt;code&gt;ModelAdmin&lt;/code&gt; both define an &lt;code&gt;exclude&lt;/code&gt; option then &lt;code&gt;ModelAdmin&lt;/code&gt; takes precedence:</source>
          <target state="translated">あなたの場合 &lt;code&gt;ModelForm&lt;/code&gt; と &lt;code&gt;ModelAdmin&lt;/code&gt; のは定義の両方 &lt;code&gt;exclude&lt;/code&gt; オプションを、その後 &lt;code&gt;ModelAdmin&lt;/code&gt; のが優先されます：</target>
        </trans-unit>
        <trans-unit id="eaae8d7419df5dae5e0d1df980784410834abbbb" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;RunPython&lt;/code&gt; or &lt;code&gt;RunSQL&lt;/code&gt; operation only affects one model, it&amp;rsquo;s good practice to pass &lt;code&gt;model_name&lt;/code&gt; as a hint to make it as transparent as possible to the router. This is especially important for reusable and third-party apps.</source>
          <target state="translated">&lt;code&gt;RunPython&lt;/code&gt; または &lt;code&gt;RunSQL&lt;/code&gt; 操作が1つのモデルにのみ影響する場合は、 &lt;code&gt;model_name&lt;/code&gt; をヒントとして渡して、ルーターに対してできるだけ透過的にすることをお勧めします。これは、再利用可能なサードパーティのアプリにとって特に重要です。</target>
        </trans-unit>
        <trans-unit id="17d97886edb51352b4b876638aac3d9f4f3ca528" translate="yes" xml:space="preserve">
          <source>If your Django app is behind a proxy, though, the proxy may be &amp;ldquo;swallowing&amp;rdquo; whether the original request uses HTTPS or not. If there is a non-HTTPS connection between the proxy and Django then &lt;code&gt;is_secure()&lt;/code&gt; would always return &lt;code&gt;False&lt;/code&gt; &amp;ndash; even for requests that were made via HTTPS by the end user. In contrast, if there is an HTTPS connection between the proxy and Django then &lt;code&gt;is_secure()&lt;/code&gt; would always return &lt;code&gt;True&lt;/code&gt; &amp;ndash; even for requests that were made originally via HTTP.</source>
          <target state="translated">ただし、Djangoアプリがプロキシの背後にある場合、元のリクエストがHTTPSを使用しているかどうかに関係なく、プロキシが「飲み込んでいる」可能性があります。プロキシとDjangoの間に非HTTPS接続がある場合、 &lt;code&gt;is_secure()&lt;/code&gt; は、エンドユーザーがHTTPS経由で行ったリクエストであっても、常に &lt;code&gt;False&lt;/code&gt; を返します。対照的に、プロキシとDjangoの間にHTTPS接続がある場合、 &lt;code&gt;is_secure()&lt;/code&gt; は、もともとHTTPを介して行われたリクエストであっても、常に &lt;code&gt;True&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5497b62e97032ff943fb4f10c5f320b8f45dac4e" translate="yes" xml:space="preserve">
          <source>If your GDAL library is in a non-standard location, or you don&amp;rsquo;t want to modify the system&amp;rsquo;s library path then the &lt;a href=&quot;../gdal#std:setting-GDAL_LIBRARY_PATH&quot;&gt;&lt;code&gt;GDAL_LIBRARY_PATH&lt;/code&gt;&lt;/a&gt; setting may be added to your Django settings file with the full path to the GDAL library. For example:</source>
          <target state="translated">GDALライブラリが標準以外の場所にある場合、またはシステムのライブラリパスを変更したくない場合は、&lt;a href=&quot;../gdal#std:setting-GDAL_LIBRARY_PATH&quot;&gt; &lt;code&gt;GDAL_LIBRARY_PATH&lt;/code&gt; &lt;/a&gt;設定がGDALライブラリへのフルパスでDjango設定ファイルに追加されることがあります。例えば：</target>
        </trans-unit>
        <trans-unit id="6656b0bbfc9f0cf5bcaba4af9e2783f344122be3" translate="yes" xml:space="preserve">
          <source>If your GEOS library is in a non-standard location, or you don&amp;rsquo;t want to modify the system&amp;rsquo;s library path then the &lt;a href=&quot;../geos#std:setting-GEOS_LIBRARY_PATH&quot;&gt;&lt;code&gt;GEOS_LIBRARY_PATH&lt;/code&gt;&lt;/a&gt; setting may be added to your Django settings file with the full path to the GEOS C library. For example:</source>
          <target state="translated">GEOSライブラリが標準以外の場所にある場合、またはシステムのライブラリパスを変更したくない場合は、&lt;a href=&quot;../geos#std:setting-GEOS_LIBRARY_PATH&quot;&gt; &lt;code&gt;GEOS_LIBRARY_PATH&lt;/code&gt; &lt;/a&gt;設定をGEOS Cライブラリへの完全パスとともにDjango設定ファイルに追加できます。例えば：</target>
        </trans-unit>
        <trans-unit id="9503b6ac9885ede72752befeddae5b57e6923b42" translate="yes" xml:space="preserve">
          <source>If your MySQL setup does &lt;em&gt;not&lt;/em&gt; support transactions, then Django will always function in autocommit mode: statements will be executed and committed as soon as they&amp;rsquo;re called. If your MySQL setup &lt;em&gt;does&lt;/em&gt; support transactions, Django will handle transactions as explained in this document.</source>
          <target state="translated">MySQLセットアップがトランザクションをサポートしてい&lt;em&gt;ない&lt;/em&gt;場合、Djangoは常に自動コミットモードで機能します。ステートメントは、呼び出されるとすぐに実行およびコミットされます。MySQLセットアップ&lt;em&gt;が&lt;/em&gt;トランザクションをサポートしている場合、Djangoはこのドキュメントで説明されているようにトランザクションを処理します。</target>
        </trans-unit>
        <trans-unit id="7357f3c6b27ecc3b358d99481fc74b66e7e2445c" translate="yes" xml:space="preserve">
          <source>If your app already has models and database tables, and doesn&amp;rsquo;t have migrations yet (for example, you created it against a previous Django version), you&amp;rsquo;ll need to convert it to use migrations by running:</source>
          <target state="translated">アプリにすでにモデルとデータベーステーブルがあり、まだ移行がない場合（たとえば、以前のDjangoバージョンに対して作成した場合）、次のコマンドを実行して、移行を使用するように変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="a6f0ecf7e5650fbc70efecf351f9f0234f1b8a8a" translate="yes" xml:space="preserve">
          <source>If your app is tested with multiple user models, using &lt;code&gt;@override_settings(AUTH_USER_MODEL=...)&lt;/code&gt; for example, and you cache the result of &lt;code&gt;get_user_model()&lt;/code&gt; in a module-level variable, you may need to listen to the &lt;a href=&quot;../../ref/signals#django.test.signals.setting_changed&quot;&gt;&lt;code&gt;setting_changed&lt;/code&gt;&lt;/a&gt; signal to clear the cache. For example:</source>
          <target state="translated">たとえば、 &lt;code&gt;@override_settings(AUTH_USER_MODEL=...)&lt;/code&gt; を使用して複数のユーザーモデルでアプリをテストし、モジュールレベルの変数に &lt;code&gt;get_user_model()&lt;/code&gt; の結果をキャッシュする場合は、&lt;a href=&quot;../../ref/signals#django.test.signals.setting_changed&quot;&gt; &lt;code&gt;setting_changed&lt;/code&gt; &lt;/a&gt;シグナルをリッスンしてクリアする必要がある場合があります。キャッシュ。例えば：</target>
        </trans-unit>
        <trans-unit id="19dcfebcbdd415cf375a630be2b6e427341d0dea" translate="yes" xml:space="preserve">
          <source>If your application connects to other systems &amp;ndash; for instance, if it queries a Web service &amp;ndash; make sure datetimes are properly specified. To transmit datetimes safely, their representation should include the UTC offset, or their values should be in UTC (or both!).</source>
          <target state="translated">アプリケーションが他のシステムに接続する場合（たとえば、Webサービスを照会する場合）、日時が正しく指定されていることを確認してください。日時を安全に送信するには、それらの表現にUTCオフセットを含めるか、それらの値をUTC（またはその両方）にする必要があります。</target>
        </trans-unit>
        <trans-unit id="68eb798bc7d826d0f87acddbc39d34694074284b" translate="yes" xml:space="preserve">
          <source>If your application provides views, you may want to include tests that use the test client to exercise those views. However, an end user is free to deploy the views in your application at any URL of their choosing. This means that your tests can&amp;rsquo;t rely upon the fact that your views will be available at a particular URL. Decorate your test class or test method with &lt;code&gt;@override_settings(ROOT_URLCONF=...)&lt;/code&gt; for URLconf configuration.</source>
          <target state="translated">アプリケーションがビューを提供する場合、それらのビューを実行するためにテストクライアントを使用するテストを含めることができます。ただし、エンドユーザーは任意のURLでアプリケーションのビューを自由にデプロイできます。これは、テストが特定のURLでビューを使用できるという事実に依存できないことを意味します。URLconf構成のために、テストクラスまたはテストメソッドを &lt;code&gt;@override_settings(ROOT_URLCONF=...)&lt;/code&gt; で装飾します。</target>
        </trans-unit>
        <trans-unit id="35485f3524af2f43a59e170657765450ecc8c6f8" translate="yes" xml:space="preserve">
          <source>If your authentication mechanism uses a custom HTTP header and not &lt;code&gt;REMOTE_USER&lt;/code&gt;, you can subclass &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; and set the &lt;code&gt;header&lt;/code&gt; attribute to the desired &lt;code&gt;request.META&lt;/code&gt; key. For example:</source>
          <target state="translated">認証メカニズムが &lt;code&gt;REMOTE_USER&lt;/code&gt; ではなくカスタムHTTPヘッダーを使用する場合、 &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; をサブクラス化し、 &lt;code&gt;header&lt;/code&gt; 属性を目的の &lt;code&gt;request.META&lt;/code&gt; キーに設定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="9779f7ac3b7339bf4ea6d174741695fcb45580da" translate="yes" xml:space="preserve">
          <source>If your background is in plain old PHP (with no use of modern frameworks), you&amp;rsquo;re probably used to putting code under the Web server&amp;rsquo;s document root (in a place such as &lt;code&gt;/var/www&lt;/code&gt;). With Django, you don&amp;rsquo;t do that. It&amp;rsquo;s not a good idea to put any of this Python code within your Web server&amp;rsquo;s document root, because it risks the possibility that people may be able to view your code over the Web. That&amp;rsquo;s not good for security.</source>
          <target state="translated">背景がプレーンな古いPHPの場合（最新のフレームワークを使用しない場合）、おそらくWebサーバーのドキュメントルートの下（ &lt;code&gt;/var/www&lt;/code&gt; などの場所）にコードを配置することに慣れているでしょう。 Djangoでは、そのようなことはしません。このPythonコードのいずれかをWebサーバーのドキュメントルート内に配置することはお勧めできません。Web経由でユーザーのコードを表示できる可能性があるためです。これはセキュリティには良くありません。</target>
        </trans-unit>
        <trans-unit id="ca388b1fedcaa5043ea95b9f8107592768d9f5dc" translate="yes" xml:space="preserve">
          <source>If your code attempts to access the database when its modules are compiled, this will occur &lt;em&gt;before&lt;/em&gt; the test database is set up, with potentially unexpected results. For example, if you have a database query in module-level code and a real database exists, production data could pollute your tests. &lt;em&gt;It is a bad idea to have such import-time database queries in your code&lt;/em&gt; anyway - rewrite your code so that it doesn&amp;rsquo;t do this.</source>
          <target state="translated">モジュールのコンパイル時にコードがデータベースにアクセスしようとすると、テストデータベースがセットアップされる&lt;em&gt;前&lt;/em&gt;にこれが発生し、予期しない結果が生じる可能性があります。たとえば、モジュールレベルのコードにデータベースクエリがあり、実際のデータベースが存在する場合、本番データがテストを汚染する可能性があります。とにかく&lt;em&gt;、コードにそのようなインポート時のデータベースクエリを含めることはお勧めでき&lt;/em&gt;ません。これを行わないようにコードを書き直してください。</target>
        </trans-unit>
        <trans-unit id="8b9eb50ad139972e07c5927be25959ddc8c43a98" translate="yes" xml:space="preserve">
          <source>If your code imports the application registry in an application&amp;rsquo;s &lt;code&gt;__init__.py&lt;/code&gt;, the name &lt;code&gt;apps&lt;/code&gt; will clash with the &lt;code&gt;apps&lt;/code&gt; submodule. The best practice is to move that code to a submodule and import it. A workaround is to import the registry under a different name:</source>
          <target state="translated">コードがアプリケーションレジストリをアプリケーションの &lt;code&gt;__init__.py&lt;/code&gt; にインポートする場合、 &lt;code&gt;apps&lt;/code&gt; という名前は &lt;code&gt;apps&lt;/code&gt; サブモジュールと競合します。ベストプラクティスは、そのコードをサブモジュールに移動してインポートすることです。回避策は、レジストリを別の名前でインポートすることです。</target>
        </trans-unit>
        <trans-unit id="037c62c31dab165af710e06e5131c4b392f063c1" translate="yes" xml:space="preserve">
          <source>If your code only uses ASCII data, it&amp;rsquo;s safe to use your normal strings, passing them around at will, because ASCII is a subset of UTF-8.</source>
          <target state="translated">コードがASCIIデータのみを使用する場合、ASCIIはUTF-8のサブセットであるため、通常の文字列を使用して安全に安全に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e54e295adfb62bcb63529d5938619c752337731c" translate="yes" xml:space="preserve">
          <source>If your command defines mandatory positional arguments, you can customize the message error returned in the case of missing arguments. The default is output by &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; (&amp;ldquo;too few arguments&amp;rdquo;).</source>
          <target state="translated">コマンドが必須の位置引数を定義している場合、引数が欠落している場合に返されるメッセージエラーをカスタマイズできます。デフォルトは、&lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt;による出力です（「引数が少なすぎます」）。</target>
        </trans-unit>
        <trans-unit id="8b66d0e6b2d3c34277e5351352f9e2d49c89f40f" translate="yes" xml:space="preserve">
          <source>If your custom &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class deals with data structures that are more complex than strings, dates, integers, or floats, then you may need to override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.from_db_value&quot;&gt;&lt;code&gt;from_db_value()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/models/fields#django.db.models.Field.to_python&quot;&gt;&lt;code&gt;to_python()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタム&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;クラスが文字列、日付、整数、浮動小数点数よりも複雑なデータ構造を扱う場合は、&lt;a href=&quot;../ref/models/fields#django.db.models.Field.from_db_value&quot;&gt; &lt;code&gt;from_db_value()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../ref/models/fields#django.db.models.Field.to_python&quot;&gt; &lt;code&gt;to_python()&lt;/code&gt; &lt;/a&gt;をオーバーライドする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="42459a545a83bcbb2b1a6c5d0c989d612ebefbcf" translate="yes" xml:space="preserve">
          <source>If your custom field uses the &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt; types for MySQL, you must make sure that &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt; always returns a string type. MySQL performs flexible and unexpected matching when a query is performed on these types and the provided value is an integer, which can cause queries to include unexpected objects in their results. This problem cannot occur if you always return a string type from &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタムフィールドでMySQL の &lt;code&gt;CHAR&lt;/code&gt; 、 &lt;code&gt;VARCHAR&lt;/code&gt; 、または &lt;code&gt;TEXT&lt;/code&gt; 型を使用する場合、&lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; が&lt;/a&gt;常に文字列型を返すことを確認する必要があります。MySQLは、これらの型に対してクエリが実行され、指定された値が整数である場合、柔軟で予期しないマッチングを実行します。これにより、クエリの結果に予期しないオブジェクトが含まれる可能性があります。&lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt;から常に文字列型を返す場合、この問題は発生しません。</target>
        </trans-unit>
        <trans-unit id="5f134f8d6891d13bafe02ccedf40254834ce3b1c" translate="yes" xml:space="preserve">
          <source>If your custom user model is a subclass of &lt;code&gt;AbstractUser&lt;/code&gt;, then you can extend these forms in this manner:</source>
          <target state="translated">カスタムユーザーモデルが &lt;code&gt;AbstractUser&lt;/code&gt; のサブクラスである場合は、次の方法でこれらのフォームを拡張できます。</target>
        </trans-unit>
        <trans-unit id="7489ac299b65b30e1fabb441ed4d0427d3e20fa3" translate="yes" xml:space="preserve">
          <source>If your data does &lt;em&gt;not&lt;/em&gt; validate, the &lt;code&gt;cleaned_data&lt;/code&gt; dictionary contains only the valid fields:</source>
          <target state="translated">データが検証され&lt;em&gt;ない&lt;/em&gt;場合、 &lt;code&gt;cleaned_data&lt;/code&gt; 辞書には有効なフィールドのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="66fee195a0e25a7f977bf0cd9ad9e712b37631fd" translate="yes" xml:space="preserve">
          <source>If your database column name is an SQL reserved word, or contains characters that aren&amp;rsquo;t allowed in Python variable names &amp;ndash; notably, the hyphen &amp;ndash; that&amp;rsquo;s OK. Django quotes column and table names behind the scenes.</source>
          <target state="translated">データベースの列名がSQLの予約語である場合、またはPythonの変数名で許可されていない文字（特にハイフン）が含まれている場合は問題ありません。Djangoは舞台裏で列とテーブルの名前を引用します。</target>
        </trans-unit>
        <trans-unit id="83b77d8f63e76cf58cc37344473b9afbbd464eed" translate="yes" xml:space="preserve">
          <source>If your database configuration requires a specific creation order, you can specify the dependencies that exist using the &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt;&lt;code&gt;DEPENDENCIES&lt;/code&gt;&lt;/a&gt; test setting. Consider the following (simplified) example database configuration:</source>
          <target state="translated">データベース構成で特定の作成順序が必要な場合は、&lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt; &lt;code&gt;DEPENDENCIES&lt;/code&gt; &lt;/a&gt;テスト設定を使用して、存在する依存関係を指定できます。以下の（簡略化された）データベース構成例を検討してください。</target>
        </trans-unit>
        <trans-unit id="7805750627528231fb20224a0ae84ae501c12e42" translate="yes" xml:space="preserve">
          <source>If your database table name is an SQL reserved word, or contains characters that aren&amp;rsquo;t allowed in Python variable names &amp;ndash; notably, the hyphen &amp;ndash; that&amp;rsquo;s OK. Django quotes column and table names behind the scenes.</source>
          <target state="translated">データベーステーブル名がSQLの予約語である場合、またはPython変数名で許可されていない文字（特にハイフン）が含まれている場合は問題ありません。Djangoは舞台裏で列とテーブルの名前を引用します。</target>
        </trans-unit>
        <trans-unit id="b9f5f90e03e19a8bb4a87f8c1e61359a54e098f8" translate="yes" xml:space="preserve">
          <source>If your deployment situation allows, it&amp;rsquo;s usually a good idea to have your front-end Web server perform the functionality provided by the &lt;code&gt;SecurityMiddleware&lt;/code&gt;. That way, if there are requests that aren&amp;rsquo;t served by Django (such as static media or user-uploaded files), they will have the same protections as requests to your Django application.</source>
          <target state="translated">デプロイメント状況が許す場合は、通常、フロントエンドWebサーバーに &lt;code&gt;SecurityMiddleware&lt;/code&gt; によって提供される機能を実行させることをお勧めします。これにより、Djangoが提供しないリクエスト（静的メディアやユーザーがアップロードしたファイルなど）がある場合、Djangoアプリケーションへのリクエストと同じ保護が提供されます。</target>
        </trans-unit>
        <trans-unit id="b1ce081d315c1a0717aefc66e3fbb209ac78a158" translate="yes" xml:space="preserve">
          <source>If your form includes a &lt;a href=&quot;../../ref/forms/fields#django.forms.URLField&quot;&gt;&lt;code&gt;URLField&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt;&lt;code&gt;EmailField&lt;/code&gt;&lt;/a&gt; or any integer field type, Django will use the &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; HTML5 input types. By default, browsers may apply their own validation on these fields, which may be stricter than Django&amp;rsquo;s validation. If you would like to disable this behavior, set the &lt;code&gt;novalidate&lt;/code&gt; attribute on the &lt;code&gt;form&lt;/code&gt; tag, or specify a different widget on the field, like &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたのフォームが含まれている場合&lt;a href=&quot;../../ref/forms/fields#django.forms.URLField&quot;&gt; &lt;code&gt;URLField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt; &lt;code&gt;EmailField&lt;/code&gt; &lt;/a&gt;または任意の整数フィールドタイプを、Djangoは使用する &lt;code&gt;url&lt;/code&gt; 、 &lt;code&gt;email&lt;/code&gt; や &lt;code&gt;number&lt;/code&gt; HTML5の入力タイプを。デフォルトでは、ブラウザはこれらのフィールドに独自の検証を適用する場合があり、Djangoの検証よりも厳しい場合があります。この動作を無効にする場合は、 &lt;code&gt;form&lt;/code&gt; タグに &lt;code&gt;novalidate&lt;/code&gt; 属性を設定するか、&lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;など、フィールドに別のウィジェットを指定します。</target>
        </trans-unit>
        <trans-unit id="9e4e143f7d7dfb7b18d9cf7a1c3427090cb8e9a5" translate="yes" xml:space="preserve">
          <source>If your hasher doesn&amp;rsquo;t have a work factor, implement the method as a no-op (&lt;code&gt;pass&lt;/code&gt;).</source>
          <target state="translated">ハッシャーに作業係数がない場合は、メソッドをno-op（ &lt;code&gt;pass&lt;/code&gt; ）として実装します。</target>
        </trans-unit>
        <trans-unit id="b352e31157863463daa5a9b2b4a00f05e691f6ce" translate="yes" xml:space="preserve">
          <source>If your model contains more than one foreign key to the same model, you&amp;rsquo;ll need to resolve the ambiguity manually using &lt;code&gt;fk_name&lt;/code&gt;. For example, consider the following model:</source>
          <target state="translated">モデルに同じモデルへの複数の外部キーが含まれている場合、 &lt;code&gt;fk_name&lt;/code&gt; を使用してあいまいさを手動で解決する必要があります。たとえば、次のモデルについて考えます。</target>
        </trans-unit>
        <trans-unit id="6ca7a43d3ceacd8c83aa87a7c6008e8f5f3287d7" translate="yes" xml:space="preserve">
          <source>If your model has a &lt;a href=&quot;../../models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; method but you don&amp;rsquo;t want the &amp;ldquo;View on site&amp;rdquo; button to appear, you only need to set &lt;code&gt;view_on_site&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">モデルに&lt;a href=&quot;../../models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt;メソッドがあり、「サイトに表示」ボタンを表示したくない場合は、 &lt;code&gt;view_on_site&lt;/code&gt; を &lt;code&gt;False&lt;/code&gt; に設定するだけです。</target>
        </trans-unit>
        <trans-unit id="55784988b7d647b9df1a836203e5bf6b7c5dabc3" translate="yes" xml:space="preserve">
          <source>If your model has more than one &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; to the &lt;code&gt;parent_model&lt;/code&gt;, you must specify a &lt;code&gt;fk_name&lt;/code&gt;.</source>
          <target state="translated">モデルに &lt;code&gt;parent_model&lt;/code&gt; への複数の&lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;がある場合、 &lt;code&gt;fk_name&lt;/code&gt; を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e6dc5086c9587c9e487ae0b9fdc36e7f3231fe93" translate="yes" xml:space="preserve">
          <source>If your model&amp;rsquo;s &lt;a href=&quot;../../topics/db/models#meta-options&quot;&gt;Meta&lt;/a&gt; specifies &lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt;&lt;code&gt;get_latest_by&lt;/code&gt;&lt;/a&gt;, you can omit any arguments to &lt;code&gt;earliest()&lt;/code&gt; or &lt;code&gt;latest()&lt;/code&gt;. The fields specified in &lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt;&lt;code&gt;get_latest_by&lt;/code&gt;&lt;/a&gt; will be used by default.</source>
          <target state="translated">モデルの&lt;a href=&quot;../../topics/db/models#meta-options&quot;&gt;メタで&lt;/a&gt;&lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt; &lt;code&gt;get_latest_by&lt;/code&gt; が&lt;/a&gt;指定されている場合は、 &lt;code&gt;earliest()&lt;/code&gt; または &lt;code&gt;latest()&lt;/code&gt; への引数を省略できます。&lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt; &lt;code&gt;get_latest_by&lt;/code&gt; で&lt;/a&gt;指定されたフィールドがデフォルトで使用されます。</target>
        </trans-unit>
        <trans-unit id="151f04ef6d26ef02a6f8f49d9494948ff5996818" translate="yes" xml:space="preserve">
          <source>If your project uses proxy models, you must either modify the proxy to extend the user model that&amp;rsquo;s in use in your project, or merge your proxy&amp;rsquo;s behavior into your &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">プロジェクトでプロキシモデルを使用している場合は、プロキシを変更して、プロジェクトで使用しているユーザーモデルを拡張するか、プロキシの動作を&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;サブクラスにマージする必要があります。</target>
        </trans-unit>
        <trans-unit id="44824388e510837cfa981ebd84a663ae9c830298" translate="yes" xml:space="preserve">
          <source>If your request used the &lt;code&gt;follow&lt;/code&gt; argument, the &lt;code&gt;expected_url&lt;/code&gt; and &lt;code&gt;target_status_code&lt;/code&gt; will be the url and status code for the final point of the redirect chain.</source>
          <target state="translated">リクエストで &lt;code&gt;follow&lt;/code&gt; 引数を使用した場合、 &lt;code&gt;expected_url&lt;/code&gt; および &lt;code&gt;target_status_code&lt;/code&gt; は、リダイレクトチェーンの最後のポイントのURLおよびステータスコードになります。</target>
        </trans-unit>
        <trans-unit id="90e0da33d8c8d3ffe3995050565ede94840b1dd8" translate="yes" xml:space="preserve">
          <source>If your root URLconf uses &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;JavaScriptCatalog&lt;/code&gt; must also be wrapped by &lt;code&gt;i18n_patterns()&lt;/code&gt; for the catalog to be correctly generated.</source>
          <target state="translated">ルートURLconfが&lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt; &lt;code&gt;i18n_patterns()&lt;/code&gt; を&lt;/a&gt;使用する場合、カタログが正しく生成されるように、 &lt;code&gt;JavaScriptCatalog&lt;/code&gt; も &lt;code&gt;i18n_patterns()&lt;/code&gt; でラップする必要があります。</target>
        </trans-unit>
        <trans-unit id="6df4fb6245e051b9d36fab3f466fa1d09ca7a5f9" translate="yes" xml:space="preserve">
          <source>If your site accepts file uploads, it is strongly advised that you limit these uploads in your Web server configuration to a reasonable size in order to prevent denial of service (DOS) attacks. In Apache, this can be easily set using the &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#limitrequestbody&quot;&gt;LimitRequestBody&lt;/a&gt; directive.</source>
          <target state="translated">サイトがファイルのアップロードを受け入れる場合は、サービス拒否（DOS）攻撃を防ぐために、Webサーバー構成でのこれらのアップロードを適切なサイズに制限することを強くお勧めします。Apacheでは、これは&lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#limitrequestbody&quot;&gt;LimitRequestBody&lt;/a&gt;ディレクティブを使用して簡単に設定できます。</target>
        </trans-unit>
        <trans-unit id="6f8d605a5c50ad541297eddd5069d8164b968b86" translate="yes" xml:space="preserve">
          <source>If your site offers both HTTP and HTTPS connections, most users will end up with an unsecured connection by default. For best security, you should redirect all HTTP connections to HTTPS.</source>
          <target state="translated">あなたのサイトが HTTP 接続と HTTPS 接続の両方を提供している場合、ほとんどのユーザーはデフォルトでセキュアでない接続になってしまいます。最高のセキュリティを確保するためには、すべての HTTP 接続を HTTPS にリダイレクトする必要があります。</target>
        </trans-unit>
        <trans-unit id="d3c6bc1158a1e98cf03b8d846800ac77b1fa4b8a" translate="yes" xml:space="preserve">
          <source>If your site sends emails, these values need to be set correctly.</source>
          <target state="translated">サイトがメールを送信する場合、これらの値を正しく設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="9aa8302c804c3a783e15d8c95fda308c718b94b7" translate="yes" xml:space="preserve">
          <source>If your site serves user-uploaded files, a malicious user could upload a specially-crafted file that would be interpreted as HTML or JavaScript by the browser when you expected it to be something harmless.</source>
          <target state="translated">あなたのサイトがユーザーがアップロードしたファイルを提供している場合、悪意のあるユーザーが特別に作成したファイルをアップロードすると、無害なものだと思っていたのにブラウザによってHTMLやJavaScriptとして解釈されてしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="0ad66de9dea62ec082b44fd754a56be3eb2434f8" translate="yes" xml:space="preserve">
          <source>If your site uses Django&amp;rsquo;s &lt;a href=&quot;../auth/index&quot;&gt;authentication system&lt;/a&gt; and you deal with logging in users, you can use the test client&amp;rsquo;s &lt;code&gt;login()&lt;/code&gt; method to simulate the effect of a user logging into the site.</source>
          <target state="translated">サイトでDjangoの&lt;a href=&quot;../auth/index&quot;&gt;認証システム&lt;/a&gt;を使用していて、ユーザーのログインを処理している場合は、テストクライアントの &lt;code&gt;login()&lt;/code&gt; メソッドを使用して、サイトにログインしているユーザーの影響をシミュレートできます。</target>
        </trans-unit>
        <trans-unit id="d440a3cae88c7b38cb98393225850ee488a3a51c" translate="yes" xml:space="preserve">
          <source>If your site uses Django&amp;rsquo;s &lt;a href=&quot;../auth/index&quot;&gt;authentication system&lt;/a&gt;, the &lt;code&gt;logout()&lt;/code&gt; method can be used to simulate the effect of a user logging out of your site.</source>
          <target state="translated">サイトでDjangoの&lt;a href=&quot;../auth/index&quot;&gt;認証システムを&lt;/a&gt;使用している場合、 &lt;code&gt;logout()&lt;/code&gt; メソッドを使用して、サイトからログアウトするユーザーの影響をシミュレートできます。</target>
        </trans-unit>
        <trans-unit id="0ae4efc81923d0d641f95a6dbd07af8563d1a6b5" translate="yes" xml:space="preserve">
          <source>If your site uses Django&amp;rsquo;s &lt;a href=&quot;../auth/index&quot;&gt;authentication system&lt;/a&gt;, you can use the &lt;code&gt;force_login()&lt;/code&gt; method to simulate the effect of a user logging into the site. Use this method instead of &lt;a href=&quot;#django.test.Client.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; when a test requires a user be logged in and the details of how a user logged in aren&amp;rsquo;t important.</source>
          <target state="translated">サイトでDjangoの&lt;a href=&quot;../auth/index&quot;&gt;認証システム&lt;/a&gt;を使用している場合は、 &lt;code&gt;force_login()&lt;/code&gt; メソッドを使用して、サイトにログインしているユーザーの影響をシミュレートできます。テストでユーザーのログインが必要で、ユーザーのログイン方法の詳細が重要でない場合は、&lt;a href=&quot;#django.test.Client.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; の&lt;/a&gt;代わりにこのメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="56c55021691d4a1273096fb3bde5d2de5ed1abf6" translate="yes" xml:space="preserve">
          <source>If your site uses the same rendering logic for forms in multiple places, you can reduce duplication by saving the form&amp;rsquo;s loop in a standalone template and using the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag to reuse it in other templates:</source>
          <target state="translated">サイトで複数の場所のフォームに同じレンダリングロジックを使用している場合、フォームのループをスタンドアロンテンプレートに保存し、&lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt;タグを使用して他のテンプレートで再利用することで、重複を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="0462de7d96fe5e5014114972e806e852776e60fd" translate="yes" xml:space="preserve">
          <source>If your template tag needs to access the current context, you can use the &lt;code&gt;takes_context&lt;/code&gt; argument when registering your tag:</source>
          <target state="translated">テンプレートタグが現在のコンテキストにアクセスする必要がある場合は、タグを登録するときに、 &lt;code&gt;takes_context&lt;/code&gt; 引数を使用できます。</target>
        </trans-unit>
        <trans-unit id="131d5a32009bb9c3437d883a85b81cbab612c507" translate="yes" xml:space="preserve">
          <source>If your tests make any database queries, use subclasses &lt;a href=&quot;#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テストでデータベースクエリを作成する場合は、サブクラス&lt;a href=&quot;#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="93b76f5f9b3d3f25cd25b34d9927950756431ed5" translate="yes" xml:space="preserve">
          <source>If your tests rely on database access such as creating or querying models, be sure to create your test classes as subclasses of &lt;a href=&quot;tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; rather than &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたのテストは、このようなモデルを作成または照会など、データベースへのアクセスに依存している場合は、のサブクラスとして、あなたのテストクラスを作成してください&lt;a href=&quot;tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt;ではなく&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7ea04c1e37c45f0d4b469802f36772d32e7b6af6" translate="yes" xml:space="preserve">
          <source>If your view is not rendering a template containing the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag, Django might not set the CSRF token cookie. This is common in cases where forms are dynamically added to the page. To address this case, Django provides a view decorator which forces setting of the cookie: &lt;a href=&quot;#django.views.decorators.csrf.ensure_csrf_cookie&quot;&gt;&lt;code&gt;ensure_csrf_cookie()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ビューが&lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt;テンプレートタグを含むテンプレートをレンダリングしていない場合、DjangoはCSRFトークンCookieを設定しない可能性があります。これは、フォームがページに動的に追加される場合に一般的です。この問題に対処するために、Djangoはcookieの設定を強制するビューデコレータを提供しています：&lt;a href=&quot;#django.views.decorators.csrf.ensure_csrf_cookie&quot;&gt; &lt;code&gt;ensure_csrf_cookie()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="100164bf62bbd4acd7334a3ab2e0db0ddfb29848" translate="yes" xml:space="preserve">
          <source>If, as in the second example above, you&amp;rsquo;ve left the &lt;code&gt;default&lt;/code&gt; database empty, you must provide a database name each time you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;. Omitting the database name would raise an error. For the second example:</source>
          <target state="translated">上記の2番目の例のように、 &lt;code&gt;default&lt;/code&gt; データベースを空のままにした場合、&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;を実行するたびにデータベース名を指定する必要があります。データベース名を省略すると、エラーが発生します。2番目の例の場合：</target>
        </trans-unit>
        <trans-unit id="05a2ca6c2742910df2490054ce0b70ad2788db45" translate="yes" xml:space="preserve">
          <source>If, for some reason, it was decided that the URLs where content for yearly article archives are published at should be changed then you would only need to change the entry in the URLconf.</source>
          <target state="translated">何らかの理由で、年刊記事アーカイブのコンテンツが公開されているURLを変更することになった場合は、URLconfのエントリを変更するだけで済みます。</target>
        </trans-unit>
        <trans-unit id="2bdda409711d05757642b136dd218873e3a28bc8" translate="yes" xml:space="preserve">
          <source>If, for some reason, you &lt;em&gt;want&lt;/em&gt; the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks. To do this, pass in the &lt;code&gt;enforce_csrf_checks&lt;/code&gt; argument when you construct your client:</source>
          <target state="translated">なんらかの理由で、テストクライアントにCSRFチェックを実行さ&lt;em&gt;せたい&lt;/em&gt;場合は、CSRFチェックを実施するテストクライアントのインスタンスを作成できます。これを行うには、クライアントを構築するときに、 &lt;code&gt;enforce_csrf_checks&lt;/code&gt; 引数を渡します。</target>
        </trans-unit>
        <trans-unit id="cd25f650a89f987a8ae9410f69052145579c8043" translate="yes" xml:space="preserve">
          <source>If, for some reason, you &lt;em&gt;want&lt;/em&gt; the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks:</source>
          <target state="translated">何らかの理由で、あなたが、場合&lt;em&gt;したい&lt;/em&gt;テストクライアントがCSRFチェックを実行するには、CSRFチェックを強制するテスト・クライアントのインスタンスを作成することができます。</target>
        </trans-unit>
        <trans-unit id="919bf73ea026018730b49f5cba48431bbbf54fd7" translate="yes" xml:space="preserve">
          <source>If, for some reason, your custom management command must run without an active locale (for example, to prevent translated content from being inserted into the database), deactivate translations using the &lt;code&gt;@no_translations&lt;/code&gt; decorator on your &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">何らかの理由で、アクティブなロケールなしでカスタム管理コマンドを実行する必要がある場合（たとえば、翻訳されたコンテンツがデータベースに挿入されないようにするため）、&lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt;メソッドで &lt;code&gt;@no_translations&lt;/code&gt; デコレーターを使用して翻訳を非アクティブ化します。</target>
        </trans-unit>
        <trans-unit id="b07cc84bbd178c74aa2d9ca20dfcde5708a26518" translate="yes" xml:space="preserve">
          <source>If, however, you have no option but to serve media files on the same Apache &lt;code&gt;VirtualHost&lt;/code&gt; as Django, you can set up Apache to serve some URLs as static media, and others using the mod_wsgi interface to Django.</source>
          <target state="translated">ただし、Django と同じApache &lt;code&gt;VirtualHost&lt;/code&gt; でメディアファイルを提供する以外に選択肢がない場合は、Apacheを設定して、一部のURLを静的メディアとして提供し、他のURLをDjangoへのmod_wsgiインターフェースを使用して提供できます。</target>
        </trans-unit>
        <trans-unit id="9ce69c54fa4098f27900ed28ca0545fa9c86efee" translate="yes" xml:space="preserve">
          <source>If, however, you need to re-enable a globally-disabled action for one particular model, list it explicitly in your &lt;code&gt;ModelAdmin.actions&lt;/code&gt; list:</source>
          <target state="translated">ただし、特定の1つのモデルに対してグローバルに無効にされたアクションを再度有効にする必要がある場合は、 &lt;code&gt;ModelAdmin.actions&lt;/code&gt; リストに明示的にリストします。</target>
        </trans-unit>
        <trans-unit id="4e214bf4c073cee123e8fb348d379cb842d22670" translate="yes" xml:space="preserve">
          <source>Ignore files, directories, or paths matching this glob-style pattern. Use multiple times to ignore more. When specifying a path, always use forward slashes, even on Windows.</source>
          <target state="translated">この glob スタイルのパターンに一致するファイル、ディレクトリ、またはパスを無視します。複数回使用すると、より多くのファイルを無視します。パスを指定する際には、Windows の場合でも、必ず前方スラッシュを使用してください。</target>
        </trans-unit>
        <trans-unit id="b46ee8e1837971774646e299482d167d080ed7ef" translate="yes" xml:space="preserve">
          <source>Ignore the warning about unapplied database migrations for now; we&amp;rsquo;ll deal with the database shortly.</source>
          <target state="translated">現時点では、適用されていないデータベースの移行に関する警告は無視してください。データベースについては後ほど説明します。</target>
        </trans-unit>
        <trans-unit id="37586d575c14722fe8807bc994aadfaef7495bc6" translate="yes" xml:space="preserve">
          <source>Ignores directories matching the given &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;-style pattern. Use multiple times to ignore more.</source>
          <target state="translated">指定された&lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt;スタイルのパターンに一致するディレクトリを無視します。複数回使用してさらに無視します。</target>
        </trans-unit>
        <trans-unit id="26f58245e8a0d7451fc5c47ad810a8c64487bb47" translate="yes" xml:space="preserve">
          <source>Ignores everything between &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;. An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled.</source>
          <target state="translated">&lt;code&gt;{% comment %}&lt;/code&gt; から &lt;code&gt;{% endcomment %}&lt;/code&gt; までのすべてを無視します。オプションのメモを最初のタグに挿入できます。たとえば、コードが無効にされた理由を文書化するためにコードをコメントアウトするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="9ee48f68c602ee8c804d6234ef660c199f1fbe4a" translate="yes" xml:space="preserve">
          <source>Ignores fields and models that may have been removed since the fixture was originally generated.</source>
          <target state="translated">フィクスチャが最初に生成されてから削除された可能性のあるフィールドやモデルを無視します。</target>
        </trans-unit>
        <trans-unit id="e6f657b51973a7ffa6d6443941085cb8d8492fd4" translate="yes" xml:space="preserve">
          <source>Ignores files or directories matching the given &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;-style pattern. Use multiple times to ignore more.</source>
          <target state="translated">指定された&lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt;スタイルのパターンに一致するファイルまたはディレクトリを無視します。複数回使用してさらに無視します。</target>
        </trans-unit>
        <trans-unit id="323377a570864e3a1b26bdc4a63a300a0a6b5471" translate="yes" xml:space="preserve">
          <source>Ignoring &amp;ldquo;stop words&amp;rdquo; such as &amp;ldquo;a&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;and&amp;rdquo;.</source>
          <target state="translated">「a」、「the」、「and」などの「ストップワード」を無視します。</target>
        </trans-unit>
        <trans-unit id="99b7a0e4a10dba5856b9ea510fa67c9bb35255e5" translate="yes" xml:space="preserve">
          <source>Imagine we had a &lt;code&gt;last_accessed&lt;/code&gt; field on our &lt;code&gt;Author&lt;/code&gt; model that we were using to keep track of the last time anybody looked at that author:</source>
          <target state="translated">私たちが持っていたと想像 &lt;code&gt;last_accessed&lt;/code&gt; 私たちの上のフィールドを &lt;code&gt;Author&lt;/code&gt; 我々は誰もがその作者を見て最後の時間を追跡するために使用していたというモデル。</target>
        </trans-unit>
        <trans-unit id="7fc15e1eb128d4daccbe8c7ab2a5c5e128767d8e" translate="yes" xml:space="preserve">
          <source>Implement a &lt;code&gt;clean()&lt;/code&gt; method on your &lt;code&gt;Form&lt;/code&gt; when you must add custom validation for fields that are interdependent. See &lt;a href=&quot;validation#validating-fields-with-clean&quot;&gt;Cleaning and validating fields that depend on each other&lt;/a&gt; for example usage.</source>
          <target state="translated">相互に依存するフィールドのカスタム検証を追加する必要がある場合は、 &lt;code&gt;Form&lt;/code&gt; に &lt;code&gt;clean()&lt;/code&gt; メソッドを実装します。使用例について&lt;a href=&quot;validation#validating-fields-with-clean&quot;&gt;は、相互に依存するフィールドのクリーニングと検証を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c6cfa7967295c6a6446e645b10a6097c50a71d8d" translate="yes" xml:space="preserve">
          <source>Implementation concerns</source>
          <target state="translated">実施上の懸念</target>
        </trans-unit>
        <trans-unit id="e0bf2dc952ab6d2617aa9b9ee013534f9eeb5b62" translate="yes" xml:space="preserve">
          <source>Implementation notes</source>
          <target state="translated">実施上の注意事項</target>
        </trans-unit>
        <trans-unit id="3e3330bd2a361feb0240b1fddb979752ae17ea93" translate="yes" xml:space="preserve">
          <source>Implementing a constructor in a subclass</source>
          <target state="translated">サブクラスでのコンストラクタの実装</target>
        </trans-unit>
        <trans-unit id="632f01fece5418e29e250528914dbf408f470600" translate="yes" xml:space="preserve">
          <source>Implementing caching should not be regarded as an alternative to improving code that&amp;rsquo;s performing poorly because it has been written badly. It&amp;rsquo;s one of the final steps towards producing well-performing code, not a shortcut.</source>
          <target state="translated">キャッシングの実装は、不適切に記述されているため、パフォーマンスの低いコードを改善するための代替手段と見なすべきではありません。これは、ショートカットではなく、パフォーマンスの高いコードを作成するための最終ステップの1つです。</target>
        </trans-unit>
        <trans-unit id="6c877258699b88d7b5575fdb8ca9aae3d8820bae" translate="yes" xml:space="preserve">
          <source>Implementing this yourself often results in a lot of repeated boilerplate code (see &lt;a href=&quot;../forms/index#using-a-form-in-a-view&quot;&gt;Using a form in a view&lt;/a&gt;). To help avoid this, Django provides a collection of generic class-based views for form processing.</source>
          <target state="translated">これを自分で実装すると、多くの場合、ボイラープレートコードが繰り返し繰り返されます（&lt;a href=&quot;../forms/index#using-a-form-in-a-view&quot;&gt;ビューでのフォームの使用を&lt;/a&gt;参照）。これを回避するために、Djangoはフォーム処理用の一般的なクラスベースのビューのコレクションを提供しています。</target>
        </trans-unit>
        <trans-unit id="e5d8feee9c32a98e60e7043052deae37efa5b7c8" translate="yes" xml:space="preserve">
          <source>Implements cached database-backed session store.</source>
          <target state="translated">データベースにキャッシュされたセッションストアをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="57a7f9ee519c5b8d6227a97eb918c9e03394062f" translate="yes" xml:space="preserve">
          <source>Implements database-backed session store.</source>
          <target state="translated">データベースをバックにしたセッションストアをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="22e27035ac8e154d8d3e3995c4f857cc344cbb23" translate="yes" xml:space="preserve">
          <source>Implies setting &lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt;&lt;code&gt;Field.db_index&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt; &lt;code&gt;Field.db_index&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;True&lt;/code&gt; に設定することを意味します。</target>
        </trans-unit>
        <trans-unit id="759987d88bd09dd553f257b758daf18ca5f14887" translate="yes" xml:space="preserve">
          <source>Import spatial reference from EPSG code.</source>
          <target state="translated">EPSGコードから空間参照をインポートします。</target>
        </trans-unit>
        <trans-unit id="f7080a194b706adfdf562e2d80373f6ad81a34c0" translate="yes" xml:space="preserve">
          <source>Import spatial reference from PROJ.4 string.</source>
          <target state="translated">PROJ.4の文字列から空間参照をインポートします。</target>
        </trans-unit>
        <trans-unit id="6fef6e94164d6d870390223dd3af1c7cb28c31ac" translate="yes" xml:space="preserve">
          <source>Import spatial reference from WKT.</source>
          <target state="translated">WKTから空間参照をインポートします。</target>
        </trans-unit>
        <trans-unit id="8a4c58086cb4f68917fb1260e33f6c51036c8456" translate="yes" xml:space="preserve">
          <source>Import spatial reference from XML.</source>
          <target state="translated">XMLから空間参照をインポートします。</target>
        </trans-unit>
        <trans-unit id="4b6d6a30150a506f9b79caf45da5aecb76b0018e" translate="yes" xml:space="preserve">
          <source>Important</source>
          <target state="translated">Important</target>
        </trans-unit>
        <trans-unit id="6c4b688b2ef86c7056f52a57bea61a8792c3849d" translate="yes" xml:space="preserve">
          <source>Importing &lt;code&gt;AbstractBaseUser&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AbstractBaseUser&lt;/code&gt; のインポート</target>
        </trans-unit>
        <trans-unit id="e7a5f39849f3fe8c1533fc46296d83c2841e8caa" translate="yes" xml:space="preserve">
          <source>Importing Spatial Data</source>
          <target state="translated">空間データのインポート</target>
        </trans-unit>
        <trans-unit id="31deeb21a29c47ae89f038bc8341eaaeff7a09c5" translate="yes" xml:space="preserve">
          <source>Imports a dotted module path and returns the attribute/class designated by the last name in the path. Raises &lt;code&gt;ImportError&lt;/code&gt; if the import failed. For example:</source>
          <target state="translated">点線のモジュールパスをインポートし、パスの姓で指定された属性/クラスを返します。調達 &lt;code&gt;ImportError&lt;/code&gt; インポートが失敗した場合。例えば：</target>
        </trans-unit>
        <trans-unit id="43d1c07c1e566ca2939141457a3c42159b8e891a" translate="yes" xml:space="preserve">
          <source>Improved speed might be the most obvious aim for a program, but sometimes other performance improvements might be sought, such as lower memory consumption or fewer demands on the database or network.</source>
          <target state="translated">速度の向上はプログラムにとって最も明白な目標かもしれませんが、時にはメモリ消費量の低下やデータベースやネットワークへの要求の減少など、他のパフォーマンスの向上が求められることもあります。</target>
        </trans-unit>
        <trans-unit id="d8cb9b65545d67676e31319a8591f1bc9ef9938d" translate="yes" xml:space="preserve">
          <source>Improvements in one area will often bring about improved performance in another, but not always; sometimes one can even be at the expense of another. For example, an improvement in a program&amp;rsquo;s speed might cause it to use more memory. Even worse, it can be self-defeating - if the speed improvement is so memory-hungry that the system starts to run out of memory, you&amp;rsquo;ll have done more harm than good.</source>
          <target state="translated">ある領域での改善により、別の領域でのパフォーマンスが改善されることがよくありますが、常にではありません。時には、別のものを犠牲にすることさえできます。たとえば、プログラムの速度が向上すると、より多くのメモリを使用するようになります。さらに悪いことに、それは自己破壊的である可能性があります-速度の改善がメモリを大量に消費しているためにシステムがメモリを使い果たし始めている場合、あなたはより良い害を及ぼすでしょう。</target>
        </trans-unit>
        <trans-unit id="b5e972a8024aea2ff5834415377894b0b1408dc1" translate="yes" xml:space="preserve">
          <source>Improving our view</source>
          <target state="translated">視野の改善</target>
        </trans-unit>
        <trans-unit id="423ee3d502d51a230964dcb05a5037a9723ba101" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, each middleware component is represented by a string: the full Python path to the middleware factory&amp;rsquo;s class or function name. For example, here&amp;rsquo;s the default value created by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">では&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;ミドルウェア工場のクラスや関数名への完全なPythonパス：、各ミドルウェアコンポーネントは、文字列で表されます。たとえば、&lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルト値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0f98c9c44256324347c54d4de74bec56956bdb2a" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;tutorial04&quot;&gt;Tutorial 4&lt;/a&gt; we introduced a class-based view, based on &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">で&lt;a href=&quot;tutorial04&quot;&gt;チュートリアル4&lt;/a&gt;我々はに基づいて、クラスベースのビューを導入&lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; コントロール&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="061872dabbd882e65fed4448dcd75d033d42e91a" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;&quot;nodelist = parser.parse(('endcomment',))&quot;&lt;/code&gt; in the above example, &lt;code&gt;nodelist&lt;/code&gt; is a list of all nodes between the &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;, not counting &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt; themselves.</source>
          <target state="translated">&lt;code&gt;&quot;nodelist = parser.parse(('endcomment',))&quot;&lt;/code&gt; 上記の例では、 &lt;code&gt;nodelist&lt;/code&gt; 間のすべてのノードのリストである &lt;code&gt;{% comment %}&lt;/code&gt; と &lt;code&gt;{% endcomment %}&lt;/code&gt; 、数えず &lt;code&gt;{% comment %}&lt;/code&gt; と &lt;code&gt;{% endcomment %}&lt;/code&gt; 自身。</target>
        </trans-unit>
        <trans-unit id="980baa344e263cc001383a2be32c4e65f245ce93" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;template.html&lt;/code&gt;, the following paths would be valid:</source>
          <target state="translated">で &lt;code&gt;template.html&lt;/code&gt; 、次のパスが有効になります：</target>
        </trans-unit>
        <trans-unit id="6ef78276f8e607837babb1b9074bcf132d9b67ef" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;test_future_question&lt;/code&gt;, we create a question with a &lt;code&gt;pub_date&lt;/code&gt; in the future. The database is reset for each test method, so the first question is no longer there, and so again the index shouldn&amp;rsquo;t have any questions in it.</source>
          <target state="translated">で &lt;code&gt;test_future_question&lt;/code&gt; 、我々はとの質問を作成 &lt;code&gt;pub_date&lt;/code&gt; 将来インチ テストメソッドごとにデータベースがリセットされるため、最初の質問はなくなり、インデックスには質問が含まれなくなります。</target>
        </trans-unit>
        <trans-unit id="5f9cbf79cc52467baff9c100eb8928946f93b121" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;test_past_question&lt;/code&gt;, we create a question and verify that it appears in the list.</source>
          <target state="translated">で &lt;code&gt;test_past_question&lt;/code&gt; 、我々は質問を作成し、それがリストに表示されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="1ca0c441f71f0c9c390db046d94cf2f81905b41d" translate="yes" xml:space="preserve">
          <source>In Django 1.5 and earlier, Django did a &lt;code&gt;SELECT&lt;/code&gt; when the primary key attribute was set. If the &lt;code&gt;SELECT&lt;/code&gt; found a row, then Django did an &lt;code&gt;UPDATE&lt;/code&gt;, otherwise it did an &lt;code&gt;INSERT&lt;/code&gt;. The old algorithm results in one more query in the &lt;code&gt;UPDATE&lt;/code&gt; case. There are some rare cases where the database doesn&amp;rsquo;t report that a row was updated even if the database contains a row for the object&amp;rsquo;s primary key value. An example is the PostgreSQL &lt;code&gt;ON UPDATE&lt;/code&gt; trigger which returns &lt;code&gt;NULL&lt;/code&gt;. In such cases it is possible to revert to the old algorithm by setting the &lt;a href=&quot;options#django.db.models.Options.select_on_save&quot;&gt;&lt;code&gt;select_on_save&lt;/code&gt;&lt;/a&gt; option to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">Django 1.5以前では、主キー属性が設定されたときにDjangoが &lt;code&gt;SELECT&lt;/code&gt; を実行しました。 &lt;code&gt;SELECT&lt;/code&gt; が行を見つけた場合、Djangoは &lt;code&gt;UPDATE&lt;/code&gt; を行い、そうでなければ &lt;code&gt;INSERT&lt;/code&gt; を行いました。古いアルゴリズムでは、 &lt;code&gt;UPDATE&lt;/code&gt; の場合にクエリが1つ増えます。オブジェクトの主キー値の行がデータベースに含まれている場合でも、データベースが行が更新されたと報告しないまれなケースがあります。例は、 &lt;code&gt;NULL&lt;/code&gt; を返すPostgreSQL &lt;code&gt;ON UPDATE&lt;/code&gt; トリガーです。このような場合、&lt;a href=&quot;options#django.db.models.Options.select_on_save&quot;&gt; &lt;code&gt;select_on_save&lt;/code&gt; &lt;/a&gt;オプションを &lt;code&gt;True&lt;/code&gt; に設定することで、古いアルゴリズムに戻すことができます。</target>
        </trans-unit>
        <trans-unit id="7e54c507b0c09f4f3df149d0a652096ad567f2ff" translate="yes" xml:space="preserve">
          <source>In Django, web pages and other content are delivered by views. Each view is represented by a Python function (or method, in the case of class-based views). Django will choose a view by examining the URL that&amp;rsquo;s requested (to be precise, the part of the URL after the domain name).</source>
          <target state="translated">Djangoでは、Webページやその他のコンテンツはビューによって配信されます。各ビューは、Python関数（またはクラスベースのビューの場合はメソッド）によって表されます。 Djangoは要求されたURL（正確には、ドメイン名の後のURLの部分）を調べてビューを選択します。</target>
        </trans-unit>
        <trans-unit id="71d28781461f30c2ecb2b20559c2484c3f2780b6" translate="yes" xml:space="preserve">
          <source>In English, that means start with any non-&lt;code&gt;'defaults'&lt;/code&gt; keyword argument that doesn&amp;rsquo;t contain a double underscore (which would indicate a non-exact lookup). Then add the contents of &lt;code&gt;defaults&lt;/code&gt;, overriding any keys if necessary, and use the result as the keyword arguments to the model class. If there are any callables in &lt;code&gt;defaults&lt;/code&gt;, evaluate them. As hinted at above, this is a simplification of the algorithm that is used, but it contains all the pertinent details. The internal implementation has some more error-checking than this and handles some extra edge-conditions; if you&amp;rsquo;re interested, read the code.</source>
          <target state="translated">英語では、ダブルアンダースコアを含まない &lt;code&gt;'defaults'&lt;/code&gt; キーワード引数で開始することを意味します（これは正確なルックアップではないことを示します）。次に、 &lt;code&gt;defaults&lt;/code&gt; の内容を追加し、必要に応じてキーをオーバーライドし、その結果をキーワード引数としてモデルクラスに使用します。 &lt;code&gt;defaults&lt;/code&gt; に呼び出し可能オブジェクトがある場合は、それらを評価します。上記で示唆したように、これは使用されるアルゴリズムの簡略化ですが、関連するすべての詳細が含まれています。内部実装では、これよりもエラーチェックが多く、いくつかの余分なエッジ条件を処理します。興味があれば、コードを読んでください。</target>
        </trans-unit>
        <trans-unit id="2325b2ee62df43500f1c00235b487a802857009c" translate="yes" xml:space="preserve">
          <source>In HTML, a form is a collection of elements inside &lt;code&gt;&amp;lt;form&amp;gt;...&amp;lt;/form&amp;gt;&lt;/code&gt; that allow a visitor to do things like enter text, select options, manipulate objects or controls, and so on, and then send that information back to the server.</source>
          <target state="translated">HTMLでは、フォームは &lt;code&gt;&amp;lt;form&amp;gt;...&amp;lt;/form&amp;gt;&lt;/code&gt; 内の要素のコレクションであり、訪問者はテキストの入力、オプションの選択、オブジェクトやコントロールの操作などを実行して、その情報を送信できます。サーバーへ。</target>
        </trans-unit>
        <trans-unit id="530abed4adee655c3e3355fa9c58c011c506ea41" translate="yes" xml:space="preserve">
          <source>In MySQL, a database table&amp;rsquo;s &amp;ldquo;collation&amp;rdquo; setting determines whether &lt;code&gt;exact&lt;/code&gt; comparisons are case-sensitive. This is a database setting, &lt;em&gt;not&lt;/em&gt; a Django setting. It&amp;rsquo;s possible to configure your MySQL tables to use case-sensitive comparisons, but some trade-offs are involved. For more information about this, see the &lt;a href=&quot;../databases#mysql-collation&quot;&gt;collation section&lt;/a&gt; in the &lt;a href=&quot;../databases&quot;&gt;databases&lt;/a&gt; documentation.</source>
          <target state="translated">MySQLでは、データベーステーブルの「照合」設定により、 &lt;code&gt;exact&lt;/code&gt; 比較で大文字と小文字が区別されるかどうかが決まります。これはデータベースの設定で&lt;em&gt;あり&lt;/em&gt;、Djangoの設定で&lt;em&gt;はありません&lt;/em&gt;。大文字と小文字を区別する比較を使用するようにMySQLテーブルを構成することは可能ですが、いくつかのトレードオフが関係しています。この詳細については、&lt;a href=&quot;../databases&quot;&gt;データベースの&lt;/a&gt;ドキュメントの&lt;a href=&quot;../databases#mysql-collation&quot;&gt;照合セクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="15bb2b94418927da4ddbebe62ad941621709c6f9" translate="yes" xml:space="preserve">
          <source>In MySQL, a database table&amp;rsquo;s &lt;a href=&quot;../databases#mysql-collation&quot;&gt;collation&lt;/a&gt; determines whether string comparisons (such as the &lt;code&gt;expression&lt;/code&gt; and &lt;code&gt;substring&lt;/code&gt; of this function) are case-sensitive. Comparisons are case-insensitive by default.</source>
          <target state="translated">MySQLでは、データベーステーブルの&lt;a href=&quot;../databases#mysql-collation&quot;&gt;照合&lt;/a&gt;により、文字列の比較（この関数の &lt;code&gt;expression&lt;/code&gt; や &lt;code&gt;substring&lt;/code&gt; など）で大文字と小文字が区別されるかどうかが決まります。デフォルトでは、比較は大文字と小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="8421ba54de371dd641a53fee1d33a332c1c91eef" translate="yes" xml:space="preserve">
          <source>In PostGIS, &lt;code&gt;ST_Distance_Sphere&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; limit the geometry types geographic distance queries are performed with. &lt;a href=&quot;#fndistsphere15&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt; However, these queries may take a long time, as great-circle distances must be calculated on the fly for &lt;em&gt;every&lt;/em&gt; row in the query. This is because the spatial index on traditional geometry fields cannot be used.</source>
          <target state="translated">PostGISでは、 &lt;code&gt;ST_Distance_Sphere&lt;/code&gt; は地理的距離のクエリが実行されるジオメトリタイプを制限しませ&lt;em&gt;ん&lt;/em&gt;。&lt;a href=&quot;#fndistsphere15&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt;ただし、大円距離はクエリ内の&lt;em&gt;すべての&lt;/em&gt;行についてその場で計算する必要があるため、これらのクエリには時間がかかる場合があります。これは、従来のジオメトリフィールドの空間インデックスを使用できないためです。</target>
        </trans-unit>
        <trans-unit id="715bef95523b40746c6e2c01e2e5141dd1cef9e3" translate="yes" xml:space="preserve">
          <source>In Python code: Using the &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Pythonコード：&lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;関数の使用。</target>
        </trans-unit>
        <trans-unit id="bd51507af923505247bc61c0fb892385469fd543" translate="yes" xml:space="preserve">
          <source>In Python regular expressions, the syntax for named regular expression groups is &lt;code&gt;(?P&amp;lt;name&amp;gt;pattern)&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is the name of the group and &lt;code&gt;pattern&lt;/code&gt; is some pattern to match.</source>
          <target state="translated">Python正規表現では、名前付き正規表現グループの構文は &lt;code&gt;(?P&amp;lt;name&amp;gt;pattern)&lt;/code&gt; 。ここで、 &lt;code&gt;name&lt;/code&gt; はグループの名前で、 &lt;code&gt;pattern&lt;/code&gt; は一致するパターンです。</target>
        </trans-unit>
        <trans-unit id="ea7465a7cc3dd82a2d9fd7afc703bdeb0a931d30" translate="yes" xml:space="preserve">
          <source>In Python, deprecation warnings are silenced by default. You must turn them on using the &lt;code&gt;-Wa&lt;/code&gt; Python command line option or the &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable. For example, to show warnings while running tests:</source>
          <target state="translated">Pythonでは、デフォルトで非推奨の警告が表示されません。 &lt;code&gt;-Wa&lt;/code&gt; Pythonコマンドラインオプションまたは&lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt;環境変数を使用して、これらをオンにする必要があります。たとえば、テストの実行中に警告を表示するには：</target>
        </trans-unit>
        <trans-unit id="1b9dd68d5fb0091a5354cd74f43e44ab9d2220be" translate="yes" xml:space="preserve">
          <source>In SQL terms, that evaluates to:</source>
          <target state="translated">SQL用語では、これは次のように評価されます。</target>
        </trans-unit>
        <trans-unit id="b5219e196842cd49964f7f565faa02caa768e6fc" translate="yes" xml:space="preserve">
          <source>In a Django project where the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting defines a &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; engine, it&amp;rsquo;s possible to instantiate a &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; directly. If more than one &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; engine is defined, the first one will be used.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;設定が&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;エンジンを定義するDjangoプロジェクトでは、&lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;直接インスタンス化することが可能です。複数の&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;エンジンが定義されている場合、最初のエンジンが使用されます。</target>
        </trans-unit>
        <trans-unit id="78dd68fff46c7f31d6d76f4f0ceba6a02a64543d" translate="yes" xml:space="preserve">
          <source>In a class-based view, this would become:</source>
          <target state="translated">クラスベースで見ると、こうなる。</target>
        </trans-unit>
        <trans-unit id="5a9a78ce7cfa61e948398641be09cee26a9431e5" translate="yes" xml:space="preserve">
          <source>In a given iterable; often a list, tuple, or queryset. It&amp;rsquo;s not a common use case, but strings (being iterables) are accepted.</source>
          <target state="translated">与えられたイテラブルで; 多くの場合、リスト、タプル、またはクエリセット。これは一般的な使用例ではありませんが、（反復可能であるため）文字列は受け入れられます。</target>
        </trans-unit>
        <trans-unit id="936002e8c54e8cd2138c3c4e13a6b879a99a297c" translate="yes" xml:space="preserve">
          <source>In a hurry? Here&amp;rsquo;s how to do common aggregate queries, assuming the models above:</source>
          <target state="translated">急いで？上記のモデルを想定して、一般的な集計クエリを実行する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="95d5174861e60b5fbde4b2d21a30e9578bd91660" translate="yes" xml:space="preserve">
          <source>In a newly created &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, the cache is empty. The first time a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is evaluated &amp;ndash; and, hence, a database query happens &amp;ndash; Django saves the query results in the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s cache and returns the results that have been explicitly requested (e.g., the next element, if the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is being iterated over). Subsequent evaluations of the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; reuse the cached results.</source>
          <target state="translated">新しく作成された&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;では、キャッシュは空です。&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;が初めて評価されたとき、つまりデータベースクエリが発生したとき、Djangoはクエリ結果を&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;のキャッシュに保存し、明示的に要求された結果（たとえば、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;が反復されている場合は次の要素）を返します以上）。&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; の&lt;/a&gt;後続の評価では、キャッシュされた結果が再利用されます。</target>
        </trans-unit>
        <trans-unit id="66bad3b414c450ecef328dcf5b4fecbf454e6176" translate="yes" xml:space="preserve">
          <source>In a nutshell, you will need to subclass the widget and either &lt;a href=&quot;../../topics/forms/media#assets-as-a-static-definition&quot;&gt;define a &amp;ldquo;Media&amp;rdquo; inner class&lt;/a&gt; or &lt;a href=&quot;../../topics/forms/media#dynamic-property&quot;&gt;create a &amp;ldquo;media&amp;rdquo; property&lt;/a&gt;.</source>
          <target state="translated">一言で言えば、あなたは、ウィジェットをサブクラス化し、どちらかにする必要があります&lt;a href=&quot;../../topics/forms/media#assets-as-a-static-definition&quot;&gt;「メディア」内部クラスを定義する&lt;/a&gt;か、&lt;a href=&quot;../../topics/forms/media#dynamic-property&quot;&gt;「メディア」プロパティを作成します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1142528d124b30027cb2863e674b995be99f903d" translate="yes" xml:space="preserve">
          <source>In a request to &lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt;, the URLconf will look for &lt;code&gt;myapp/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt; へのリクエストでは、URLconfは &lt;code&gt;myapp/&lt;/code&gt; を探します。</target>
        </trans-unit>
        <trans-unit id="8c6e077cc1b0e75309e606ecc2180a3df1935d34" translate="yes" xml:space="preserve">
          <source>In a similar way that a model class&amp;rsquo;s fields map to database fields, a form class&amp;rsquo;s fields map to HTML form &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements. (A &lt;a href=&quot;modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; maps a model class&amp;rsquo;s fields to HTML form &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements via a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;; this is what the Django admin is based upon.)</source>
          <target state="translated">モデルクラスのフィールドがデータベースフィールドにマップするのと同じように、フォームクラスのフィールドはHTMLフォームの &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素にマップします。（&lt;a href=&quot;modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;は、モデルクラスのフィールドを&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;を介してHTMLフォームの &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素にマップします。これは、Django管理者が基づいているものです。）</target>
        </trans-unit>
        <trans-unit id="9e280d0af372eabe0c94458ef4c152f0bbcae80b" translate="yes" xml:space="preserve">
          <source>In a way similar to &lt;a href=&quot;queries#lookups-that-span-relationships&quot;&gt;Lookups that span relationships&lt;/a&gt;, aggregations and annotations on fields of models or models that are related to the one you are querying can include traversing &amp;ldquo;reverse&amp;rdquo; relationships. The lowercase name of related models and double-underscores are used here too.</source>
          <target state="translated">&lt;a href=&quot;queries#lookups-that-span-relationships&quot;&gt;関係&lt;/a&gt;にまたがるルックアップと同様に、クエリしているモデルに関連するモデルまたはモデルのフィールドの集計と注釈には、「逆」の関係のトラバースを含めることができます。ここでも、関連するモデルの小文字の名前と二重下線が使用されています。</target>
        </trans-unit>
        <trans-unit id="ab27628513f607e825e71ce210049162b75905a1" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, a model object might have some of the following methods:</source>
          <target state="translated">加えて&lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;、モデルオブジェクトは、次の方法のいくつかを持っているかもしれません。</target>
        </trans-unit>
        <trans-unit id="751f7712ef19a124de333a44cc737e7ace3bfe24" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; style list of tuples, &lt;code&gt;{% get_language_info_list %}&lt;/code&gt; supports lists of language codes. If you do this in your view:</source>
          <target state="translated">&lt;code&gt;{% get_language_info_list %}&lt;/code&gt; &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt;スタイルリストに加えて、{％get_language_info_list％}は言語コードのリストをサポートしています。あなたの見解でこれを行うと：</target>
        </trans-unit>
        <trans-unit id="acfdeca1bfa2723747c23831e1f6c72abb0244fc" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;pop()&lt;/code&gt;, the &lt;code&gt;Context&lt;/code&gt; object also defines an &lt;code&gt;update()&lt;/code&gt; method. This works like &lt;code&gt;push()&lt;/code&gt; but takes a dictionary as an argument and pushes that dictionary onto the stack instead of an empty one.</source>
          <target state="translated">加えて、 &lt;code&gt;push()&lt;/code&gt; 及び &lt;code&gt;pop()&lt;/code&gt; 、 &lt;code&gt;Context&lt;/code&gt; オブジェクトはまた、定義 &lt;code&gt;update()&lt;/code&gt; メソッドを。これは &lt;code&gt;push()&lt;/code&gt; と同様に機能しますが、引数として辞書を取り、その辞書を空の辞書ではなくスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="d08bf980f90aa9d354ce9fe22f93944096aa983d" translate="yes" xml:space="preserve">
          <source>In addition to a DB API driver, Django needs an adapter to access the database drivers from its ORM. Django provides an adapter for mysqlclient while MySQL Connector/Python includes &lt;a href=&quot;https://dev.mysql.com/doc/connector-python/en/connector-python-django-backend.html&quot;&gt;its own&lt;/a&gt;.</source>
          <target state="translated">Djangoには、DB APIドライバーに加えて、ORMからデータベースドライバーにアクセスするためのアダプターが必要です。Djangoはmysqlclientのアダプタを提供し、MySQL Connector / Pythonは&lt;a href=&quot;https://dev.mysql.com/doc/connector-python/en/connector-python-django-backend.html&quot;&gt;独自のを&lt;/a&gt;含みます。</target>
        </trans-unit>
        <trans-unit id="4446e8a7eb646fabe3c820b8fc45118f5b558932" translate="yes" xml:space="preserve">
          <source>In addition to a database backend, you&amp;rsquo;ll need to make sure your Python database bindings are installed.</source>
          <target state="translated">データベースバックエンドに加えて、Pythonデータベースバインディングがインストールされていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="c94ce8da528fb522992156b232a5ab6d1b86573f" translate="yes" xml:space="preserve">
          <source>In addition to being able to add custom command line options, all &lt;a href=&quot;../ref/django-admin&quot;&gt;management commands&lt;/a&gt; can accept some default options such as &lt;a href=&quot;../ref/django-admin#cmdoption-verbosity&quot;&gt;&lt;code&gt;--verbosity&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/django-admin#cmdoption-traceback&quot;&gt;&lt;code&gt;--traceback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタムコマンドラインオプションを追加できることに加えて、すべての&lt;a href=&quot;../ref/django-admin&quot;&gt;管理コマンド&lt;/a&gt;は&lt;a href=&quot;../ref/django-admin#cmdoption-verbosity&quot;&gt; &lt;code&gt;--verbosity&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../ref/django-admin#cmdoption-traceback&quot;&gt; &lt;code&gt;--traceback&lt;/code&gt; &lt;/a&gt;などのいくつかのデフォルトオプションを受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="f180ecdd9c92f470286413ff38ed940f9bbd38e7" translate="yes" xml:space="preserve">
          <source>In addition to creating the new model, the &lt;code&gt;from_db()&lt;/code&gt; method must set the &lt;code&gt;adding&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; flags in the new instance&amp;rsquo;s &lt;code&gt;_state&lt;/code&gt; attribute.</source>
          <target state="translated">新しいモデルの作成に加えて、 &lt;code&gt;from_db()&lt;/code&gt; メソッドは、新しいインスタンスの &lt;code&gt;_state&lt;/code&gt; 属性に &lt;code&gt;adding&lt;/code&gt; フラグと &lt;code&gt;db&lt;/code&gt; フラグを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="aa82b6442e717c223b5e675d2e5b3acbf200def3" translate="yes" xml:space="preserve">
          <source>In addition to methods provided by the &lt;a href=&quot;../syndication#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt;&lt;/a&gt; base class, GeoDjango&amp;rsquo;s &lt;code&gt;Feed&lt;/code&gt; class provides the following overrides. Note that these overrides may be done in multiple ways:</source>
          <target state="translated">提供される方法に加えて、&lt;a href=&quot;../syndication#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt; の&lt;/a&gt;基本クラス、GeoDjangoの &lt;code&gt;Feed&lt;/code&gt; クラスには、次のオーバーライドを提供します。これらのオーバーライドは複数の方法で実行できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e71cd07f4ac2e62e0ecd7170c96df0e8a130dfc7" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; methods defined in &amp;ldquo;Retrieving objects&amp;rdquo; above, the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; has additional methods used to handle the set of related objects. A synopsis of each is below, and complete details can be found in the &lt;a href=&quot;../../ref/models/relations&quot;&gt;related objects reference&lt;/a&gt;.</source>
          <target state="translated">上記の「オブジェクトの取得」で定義した&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;メソッドに加えて、&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; に&lt;/a&gt;は、関連するオブジェクトのセットを処理するために使用される追加のメソッドがあります。それぞれの概要を以下に示します。詳細については、&lt;a href=&quot;../../ref/models/relations&quot;&gt;関連オブジェクトのリファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a87715969be2e401bffbf721c0b6e38e1c930533" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;'widget'&lt;/code&gt; key described in &lt;a href=&quot;#django.forms.Widget.get_context&quot;&gt;&lt;code&gt;Widget.get_context()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;MultiValueWidget&lt;/code&gt; adds a &lt;code&gt;widget['subwidgets']&lt;/code&gt; key.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Widget.get_context&quot;&gt; &lt;code&gt;Widget.get_context()&lt;/code&gt; &lt;/a&gt;で説明されている &lt;code&gt;'widget'&lt;/code&gt; キーに加えて、 &lt;code&gt;MultiValueWidget&lt;/code&gt; は &lt;code&gt;widget['subwidgets']&lt;/code&gt; キーを追加します。</target>
        </trans-unit>
        <trans-unit id="ff5784549c9c0063d76c5ca8754372f0f0124d65" translate="yes" xml:space="preserve">
          <source>In addition to the API inherited from &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt;, &lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt;&lt;code&gt;FieldFile&lt;/code&gt;&lt;/a&gt; includes several methods that can be used to interact with the underlying file:</source>
          <target state="translated">&lt;code&gt;read()&lt;/code&gt; や &lt;code&gt;write()&lt;/code&gt; などの&lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;から継承されたAPIに加えて、&lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt; &lt;code&gt;FieldFile&lt;/code&gt; に&lt;/a&gt;は、基礎となるファイルとの対話に使用できるいくつかのメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="a10925da11c09a74be0bd8f4c1b6704fc5cb3520" translate="yes" xml:space="preserve">
          <source>In addition to the ability to query by key, there are a number of custom lookups available for &lt;code&gt;HStoreField&lt;/code&gt;.</source>
          <target state="translated">キーでクエリを実行する機能に加えて、 &lt;code&gt;HStoreField&lt;/code&gt; で使用できるカスタムルックアップがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="d69ed98b07f3efe4289e6ef8ac1e34397081717a" translate="yes" xml:space="preserve">
          <source>In addition to the above details, there are a few guidelines which can greatly improve the efficiency and readability of the field&amp;rsquo;s code.</source>
          <target state="translated">上記の詳細に加えて、フィールドのコードの効率と可読性を大幅に改善できるいくつかのガイドラインがあります。</target>
        </trans-unit>
        <trans-unit id="8c64e028bd2cea8a3b5c6e844c13dd01044496cd" translate="yes" xml:space="preserve">
          <source>In addition to the above methods, fields that deal with files have a few other special requirements which must be taken into account. The majority of the mechanics provided by &lt;code&gt;FileField&lt;/code&gt;, such as controlling database storage and retrieval, can remain unchanged, leaving subclasses to deal with the challenge of supporting a particular type of file.</source>
          <target state="translated">上記の方法に加えて、ファイルを扱うフィールドには、考慮しなければならない他のいくつかの特別な要件があります。データベースのストレージや検索の制御など、 &lt;code&gt;FileField&lt;/code&gt; によって提供されるメカニズムの大部分は変更されないままであり、特定のタイプのファイルをサポートするという課題に対処するサブクラスを残します。</target>
        </trans-unit>
        <trans-unit id="2e1bc480fcebe4ce8116912b2190e867237ad26c" translate="yes" xml:space="preserve">
          <source>In addition to the context provided by &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (via &lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt;&lt;code&gt;BaseDateListView&lt;/code&gt;&lt;/a&gt;), the template&amp;rsquo;s context will be:</source>
          <target state="translated">（&lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt; &lt;code&gt;BaseDateListView&lt;/code&gt; &lt;/a&gt;を介して）&lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt;によって提供されるコンテキストに加えて、テンプレートのコンテキストは次のようになります。</target>
        </trans-unit>
        <trans-unit id="78146a6623f617f370bdbb7922a1a46c904a4d3e" translate="yes" xml:space="preserve">
          <source>In addition to the context provided by &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;django.views.generic.list.MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (via &lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt;&lt;code&gt;django.views.generic.dates.BaseDateListView&lt;/code&gt;&lt;/a&gt;), the template&amp;rsquo;s context will be:</source>
          <target state="translated">&lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;django.views.generic.list.MultipleObjectMixin&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt; &lt;code&gt;django.views.generic.dates.BaseDateListView&lt;/code&gt; &lt;/a&gt;を介して）によって提供されるコンテキストに加えて、テンプレートのコンテキストは次のようになります：</target>
        </trans-unit>
        <trans-unit id="9f847ce1f109048a1fb1aa3ac7bebe988e89f275" translate="yes" xml:space="preserve">
          <source>In addition to the following, all extracts for &lt;code&gt;DateField&lt;/code&gt; listed above may also be used on &lt;code&gt;DateTimeField&lt;/code&gt;s .</source>
          <target state="translated">以下に加えて、上記の &lt;code&gt;DateField&lt;/code&gt; のすべての抽出は、 &lt;code&gt;DateTimeField&lt;/code&gt; でも使用できます。</target>
        </trans-unit>
        <trans-unit id="cc163a8af460b22769a0a66d0e1689102a23ab92" translate="yes" xml:space="preserve">
          <source>In addition to the listed methods, &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; exposes the following attributes and methods of its &lt;code&gt;file&lt;/code&gt; object: &lt;code&gt;encoding&lt;/code&gt;, &lt;code&gt;fileno&lt;/code&gt;, &lt;code&gt;flush&lt;/code&gt;, &lt;code&gt;isatty&lt;/code&gt;, &lt;code&gt;newlines&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;readinto&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt;, &lt;code&gt;readlines&lt;/code&gt;, &lt;code&gt;seek&lt;/code&gt;, &lt;code&gt;tell&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;writelines&lt;/code&gt;, &lt;code&gt;readable()&lt;/code&gt;, &lt;code&gt;writable()&lt;/code&gt;, and &lt;code&gt;seekable()&lt;/code&gt;.</source>
          <target state="translated">記載された方法に加えて、&lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;その次の属性とメソッド公開する &lt;code&gt;file&lt;/code&gt; オブジェクトを： &lt;code&gt;encoding&lt;/code&gt; 、 &lt;code&gt;fileno&lt;/code&gt; 、 &lt;code&gt;flush&lt;/code&gt; 、 &lt;code&gt;isatty&lt;/code&gt; 、 &lt;code&gt;newlines&lt;/code&gt; 、 &lt;code&gt;read&lt;/code&gt; 、 &lt;code&gt;readinto&lt;/code&gt; 、 &lt;code&gt;readline&lt;/code&gt; の、 &lt;code&gt;readlines&lt;/code&gt; 、 &lt;code&gt;seek&lt;/code&gt; 、 &lt;code&gt;tell&lt;/code&gt; 、 &lt;code&gt;truncate&lt;/code&gt; 、 &lt;code&gt;write&lt;/code&gt; 、 &lt;code&gt;writelines&lt;/code&gt; 、 &lt;code&gt;readable()&lt;/code&gt; 、 &lt;code&gt;writable()&lt;/code&gt; 、 &lt;code&gt;seekable()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d138f7de7bbc3af07a0fb71bb0320df5a1bd9111" translate="yes" xml:space="preserve">
          <source>In addition to the officially supported databases, there are &lt;a href=&quot;../ref/databases#third-party-notes&quot;&gt;backends provided by 3rd parties&lt;/a&gt; that allow you to use other databases with Django.</source>
          <target state="translated">公式にサポートされているデータベースに加えて、Djangoで他のデータベースを使用できるようにする&lt;a href=&quot;../ref/databases#third-party-notes&quot;&gt;サードパーティによって提供されるバックエンド&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="38ffcb3817bbbd2551f77d39d51caba8b51562b9" translate="yes" xml:space="preserve">
          <source>In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:</source>
          <target state="translated">公式にサポートされているデータベースに加えて、サードパーティによって提供されているバックエンドがあり、Django で他のデータベースを利用することができます。</target>
        </trans-unit>
        <trans-unit id="1db79a28d08359b046f49991e77de295d5e703c7" translate="yes" xml:space="preserve">
          <source>In addition to the optional arguments of its parent &lt;a href=&quot;#django.core.validators.RegexValidator&quot;&gt;&lt;code&gt;RegexValidator&lt;/code&gt;&lt;/a&gt; class, &lt;code&gt;URLValidator&lt;/code&gt; accepts an extra optional attribute:</source>
          <target state="translated">親の&lt;a href=&quot;#django.core.validators.RegexValidator&quot;&gt; &lt;code&gt;RegexValidator&lt;/code&gt; &lt;/a&gt;クラスのオプションの引数に加えて、 &lt;code&gt;URLValidator&lt;/code&gt; は追加のオプションの属性を受け入れます。</target>
        </trans-unit>
        <trans-unit id="0a4a0c3d6f62b599c6443f955946a232e25c4126" translate="yes" xml:space="preserve">
          <source>In addition to the options of the &lt;code&gt;json&lt;/code&gt; serializer, the &lt;code&gt;geojson&lt;/code&gt; serializer accepts the following additional option when it is called by &lt;code&gt;serializers.serialize()&lt;/code&gt;:</source>
          <target state="translated">オプションに加えて &lt;code&gt;json&lt;/code&gt; シリアライザ、 &lt;code&gt;geojson&lt;/code&gt; シリアライザは、それがによって呼び出され、次の追加オプション受け入れ &lt;code&gt;serializers.serialize()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="75907cde4d6071df1af2b10556dffed4d3fefdf2" translate="yes" xml:space="preserve">
          <source>In addition to the regular &lt;a href=&quot;../../forms/fields#core-field-arguments&quot;&gt;form field arguments&lt;/a&gt;, GeoDjango form fields take the following optional arguments.</source>
          <target state="translated">通常の&lt;a href=&quot;../../forms/fields#core-field-arguments&quot;&gt;フォームフィールド引数&lt;/a&gt;に加えて、GeoDjangoフォームフィールドは次のオプションの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="fab30d8fa172502cea3f7aebdb228bfeb4d6d2f0" translate="yes" xml:space="preserve">
          <source>In addition to the regular &lt;a href=&quot;../../models/fields#common-model-field-options&quot;&gt;Field options&lt;/a&gt; available for Django model fields, spatial fields have the following additional options. All are optional.</source>
          <target state="translated">Djangoモデルフィールドで使用できる通常の&lt;a href=&quot;../../models/fields#common-model-field-options&quot;&gt;フィールドオプションに&lt;/a&gt;加えて、空間フィールドには次の追加オプションがあります。すべてオプションです。</target>
        </trans-unit>
        <trans-unit id="bcac2853c813ab81bdb91abe9b8fe01ccb15cb5c" translate="yes" xml:space="preserve">
          <source>In addition to the special attributes that are available for &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; also has &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; attributes.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt;で使用できる特別な属性に加えて、&lt;a href=&quot;#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; &lt;/a&gt;には &lt;code&gt;height&lt;/code&gt; と &lt;code&gt;width&lt;/code&gt; 属性もあります。</target>
        </trans-unit>
        <trans-unit id="14e5e76a34a70eeb072f8cbe5905434d81e71e1b" translate="yes" xml:space="preserve">
          <source>In addition to these configuration steps, you&amp;rsquo;ll also need to actually serve the static files.</source>
          <target state="translated">これらの構成手順に加えて、静的ファイルを実際に提供する必要もあります。</target>
        </trans-unit>
        <trans-unit id="c2c243a6eca738bdaa3a92ec6f2b8a90ad5218f3" translate="yes" xml:space="preserve">
          <source>In addition to these, &lt;a href=&quot;#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; always enables &lt;code&gt;'django.template.context_processors.csrf'&lt;/code&gt;. This is a security related context processor required by the admin and other contrib apps, and, in case of accidental misconfiguration, it is deliberately hardcoded in and cannot be turned off in the &lt;code&gt;context_processors&lt;/code&gt; option.</source>
          <target state="translated">これらに加えて、&lt;a href=&quot;#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; は&lt;/a&gt;常に &lt;code&gt;'django.template.context_processors.csrf'&lt;/code&gt; を有効にします。これは、管理アプリやその他の投稿アプリに必要なセキュリティ関連のコンテキストプロセッサであり、誤って設定を誤ると、意図的にハードコード化されており、 &lt;code&gt;context_processors&lt;/code&gt; オプションでオフにすることはできません。</target>
        </trans-unit>
        <trans-unit id="09d1558db313d92c5461aa77b23628bc5f54ef5a" translate="yes" xml:space="preserve">
          <source>In addition to web links, &lt;code&gt;urlize&lt;/code&gt; also converts email addresses into &lt;code&gt;mailto:&lt;/code&gt; links. If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Send questions to foo@example.com&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Send questions to &amp;lt;a href=&quot;mailto:foo@example.com&quot;&amp;gt;foo@example.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">Webリンクに加えて、 &lt;code&gt;urlize&lt;/code&gt; はメールアドレスを &lt;code&gt;mailto:&lt;/code&gt; リンクに変換します。場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;Send questions to foo@example.com&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;Send questions to &amp;lt;a href=&quot;mailto:foo@example.com&quot;&amp;gt;foo@example.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb3cc5db265feffd76588b55bfe91ebe04db4bd8" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;LineString&lt;/code&gt; objects may also be created by passing in a single sequence of coordinate or &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">さらに、 &lt;code&gt;LineString&lt;/code&gt; オブジェクトは、単一の座標または&lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt; &lt;code&gt;Point&lt;/code&gt; &lt;/a&gt;オブジェクトのシーケンスを渡すことによって作成することもできます。</target>
        </trans-unit>
        <trans-unit id="092a2edd2b26995b6c73e6e9e9e504760cdc3b10" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;QueryDict&lt;/code&gt; has the following methods:</source>
          <target state="translated">さらに、 &lt;code&gt;QueryDict&lt;/code&gt; には以下のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="003bc4accc874f1fef4668d4b87997f905b9b76e" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;manage.py&lt;/code&gt; is automatically created in each Django project. It does the same thing as &lt;code&gt;django-admin&lt;/code&gt; but also sets the &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable so that it points to your project&amp;rsquo;s &lt;code&gt;settings.py&lt;/code&gt; file.</source>
          <target state="translated">さらに、 &lt;code&gt;manage.py&lt;/code&gt; は各Djangoプロジェクトに自動的に作成されます。これは &lt;code&gt;django-admin&lt;/code&gt; と同じことを&lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt;ますが、DJANGO_SETTINGS_MODULE環境変数を &lt;code&gt;settings.py&lt;/code&gt; して、プロジェクトのsettings.pyファイルを指すようにします。</target>
        </trans-unit>
        <trans-unit id="42da778e8ed7bdaf3955ad5f72d2ff5536335b45" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;message/rfc822&lt;/code&gt; attachments will no longer be base64-encoded in violation of &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html#section-5.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046#section-5.2.1&lt;/strong&gt;&lt;/a&gt;, which can cause issues with displaying the attachments in &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=651197&quot;&gt;Evolution&lt;/a&gt; and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=333880&quot;&gt;Thunderbird&lt;/a&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;message/rfc822&lt;/code&gt; 添付ファイルは、&lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html#section-5.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046＃section-5.2.1&lt;/strong&gt;&lt;/a&gt;に違反してbase64でエンコードされなくなり、&lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=651197&quot;&gt;Evolution&lt;/a&gt;および&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=333880&quot;&gt;Thunderbirdでの&lt;/a&gt;添付ファイルの表示で問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8e4cb7c7a0731de3ea837edf11710dd02a514d0f" translate="yes" xml:space="preserve">
          <source>In addition, Django applies the following rule: if you set &lt;code&gt;editable=False&lt;/code&gt; on the model field, &lt;em&gt;any&lt;/em&gt; form created from the model via &lt;code&gt;ModelForm&lt;/code&gt; will not include that field.</source>
          <target state="translated">また、Djangoは以下のルールが適用されます。あなたが設定されている場合は &lt;code&gt;editable=False&lt;/code&gt; モデルフィールドに、&lt;em&gt;どの&lt;/em&gt;経由でモデルから作成したフォーム &lt;code&gt;ModelForm&lt;/code&gt; そのフィールドは含まれません。</target>
        </trans-unit>
        <trans-unit id="30a99ac2f20a9d7ce513beb52192fea90a5cd0c6" translate="yes" xml:space="preserve">
          <source>In addition, Django provides enumeration types that you can subclass to define choices in a concise way:</source>
          <target state="translated">さらに、Django には列挙型が用意されており、サブクラス化して簡潔に選択肢を定義することができます。</target>
        </trans-unit>
        <trans-unit id="c8a09597939bdcb71e0faa18c3b3a20ccef0e692" translate="yes" xml:space="preserve">
          <source>In addition, MySQL will fully rewrite tables for almost every schema operation and generally takes a time proportional to the number of rows in the table to add or remove columns. On slower hardware this can be worse than a minute per million rows - adding a few columns to a table with just a few million rows could lock your site up for over ten minutes.</source>
          <target state="translated">さらに、MySQLはほぼすべてのスキーマ操作に対してテーブルを完全に書き換え、一般的にカラムの追加や削除にはテーブルの行数に比例した時間がかかります。数百万行のテーブルに数カラムを追加すると、10分以上もサイトがロックされてしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="80f1a60fae36c3742c0b6b4ed6f4684b7d6979d1" translate="yes" xml:space="preserve">
          <source>In addition, add the &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; setting so that the libraries can be found by Python:</source>
          <target state="translated">さらに、 &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; 設定を追加して、ライブラリをPythonで見つけられるようにします。</target>
        </trans-unit>
        <trans-unit id="0d00c3d27b51ce30fb9025d5d42429ee3fad5033" translate="yes" xml:space="preserve">
          <source>In addition, as JSON supports only string keys, note that using non-string keys in &lt;code&gt;request.session&lt;/code&gt; won&amp;rsquo;t work as expected:</source>
          <target state="translated">さらに、JSONは文字列キーのみをサポートしているため、 &lt;code&gt;request.session&lt;/code&gt; で非文字列キーを使用しても期待どおりに機能しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="193e94f351cba3a0360a6e545faac2e59e822fc0" translate="yes" xml:space="preserve">
          <source>In addition, coordinates/components of the geometry may added or modified, just like a Python list:</source>
          <target state="translated">また、Pythonのリストのように、ジオメトリの座標要素を追加したり、変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="3ddf753e80872dd11269d2a3533531f2d9a256cc" translate="yes" xml:space="preserve">
          <source>In addition, each generated form field has attributes set as follows:</source>
          <target state="translated">また、生成された各フォームフィールドには、以下のような属性が設定されている。</target>
        </trans-unit>
        <trans-unit id="e0d877515ca9c31768db2b55639e4f4d3d64d88a" translate="yes" xml:space="preserve">
          <source>In addition, for HTTPS requests, strict referer checking is done by &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;. This means that even if a subdomain can set or modify cookies on your domain, it can&amp;rsquo;t force a user to post to your application since that request won&amp;rsquo;t come from your own exact domain.</source>
          <target state="translated">さらに、HTTPSリクエストの場合、厳密なリファラーチェックは &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; によって行われます。つまり、サブドメインがドメインのCookieを設定または変更できる場合でも、リクエストは自分の正確なドメインからのものではないため、ユーザーにアプリケーションへの投稿を強制することはできません。</target>
        </trans-unit>
        <trans-unit id="609772e6e1f8a2aa06a07103e8048bef77e6acf0" translate="yes" xml:space="preserve">
          <source>In addition, if you are using the template system to output something other than HTML, there may be entirely separate characters and words which require escaping.</source>
          <target state="translated">また、テンプレートシステムを使用してHTML以外のものを出力している場合、エスケープを必要とする文字や単語が全く別のものになっていることがあります。</target>
        </trans-unit>
        <trans-unit id="271507652d7f3c6c044a78d1ab9d1f40af16ab01" translate="yes" xml:space="preserve">
          <source>In addition, if your class provides local file storage, it must override the &lt;code&gt;path()&lt;/code&gt; method.</source>
          <target state="translated">さらに、クラスがローカルファイルストレージを提供する場合は、 &lt;code&gt;path()&lt;/code&gt; メソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="f41a663166406e5affa41f624b0f5ba10f8271ea" translate="yes" xml:space="preserve">
          <source>In addition, modify the &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting to include &lt;a href=&quot;../admin/index#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;world&lt;/code&gt; (your newly created application):</source>
          <target state="translated">さらに、&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定を変更して、&lt;a href=&quot;../admin/index#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;world&lt;/code&gt; （新しく作成したアプリケーション）を含めます。</target>
        </trans-unit>
        <trans-unit id="e0cf7f24ea8838462019e7f2d8be131526d91e9c" translate="yes" xml:space="preserve">
          <source>In addition, only &lt;code&gt;LIMIT&lt;/code&gt;, &lt;code&gt;OFFSET&lt;/code&gt;, &lt;code&gt;COUNT(*)&lt;/code&gt;, &lt;code&gt;ORDER BY&lt;/code&gt;, and specifying columns (i.e. slicing, &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#django.db.models.query.QuerySet.values_list&quot;&gt;&lt;code&gt;values_list()&lt;/code&gt;&lt;/a&gt;) are allowed on the resulting &lt;code&gt;QuerySet&lt;/code&gt;. Further, databases place restrictions on what operations are allowed in the combined queries. For example, most databases don&amp;rsquo;t allow &lt;code&gt;LIMIT&lt;/code&gt; or &lt;code&gt;OFFSET&lt;/code&gt; in the combined queries.</source>
          <target state="translated">また、唯一 &lt;code&gt;LIMIT&lt;/code&gt; 、 &lt;code&gt;OFFSET&lt;/code&gt; 、 &lt;code&gt;COUNT(*)&lt;/code&gt; 、 &lt;code&gt;ORDER BY&lt;/code&gt; 、および列を指定する（すなわちスライス、&lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#django.db.models.query.QuerySet.values_list&quot;&gt; &lt;code&gt;values_list()&lt;/code&gt; &lt;/a&gt;）得られた上で許可されている &lt;code&gt;QuerySet&lt;/code&gt; 。さらに、データベースは、結合されたクエリで許可される操作に制限を課します。たとえば、ほとんどのデータベースでは、結合されたクエリで &lt;code&gt;LIMIT&lt;/code&gt; または &lt;code&gt;OFFSET&lt;/code&gt; を使用できません。</target>
        </trans-unit>
        <trans-unit id="073651aeeb0daff1ea4b8f8b97a8fcd077d19c9e" translate="yes" xml:space="preserve">
          <source>In addition, shapefiles also support attribute fields that may contain additional data. Here are the fields on the World Borders layer:</source>
          <target state="translated">さらに、シェイプファイルは、追加データを含む可能性のある属性フィールドもサポートしています。以下は、世界の境界線レイヤーのフィールドです。</target>
        </trans-unit>
        <trans-unit id="6182146b091f830549eb231420eb3ef3684d03ab" translate="yes" xml:space="preserve">
          <source>In addition, some objects are automatically created just after &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; creates a table to hold them in a database:</source>
          <target state="translated">また、一部のオブジェクトは、&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;テーブルを作成してデータベースに保持する直後に自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="602a62df0ea4d621c4bb672ddce2276a2ba75e0f" translate="yes" xml:space="preserve">
          <source>In addition, the concrete base classes of the model are stored as pointers, so you must always keep base classes around for as long as there is a migration that contains a reference to them. On the plus side, methods and managers from these base classes inherit normally, so if you absolutely need access to these you can opt to move them into a superclass.</source>
          <target state="translated">さらに、モデルの具体的な基底クラスはポインタとして保存されているので、基底クラスへの参照を含む移行がある限り、常に基底クラスを保持しておく必要があります。プラス面では、これらのベースクラスのメソッドとマネージャは通常通り継承されるので、どうしてもこれらにアクセスする必要がある場合は、スーパークラスに移動させることができます。</target>
        </trans-unit>
        <trans-unit id="ecc2eb2c3ab555cfa8732961afb123db30b159c9" translate="yes" xml:space="preserve">
          <source>In addition, there&amp;rsquo;s a utility function:</source>
          <target state="translated">さらに、ユーティリティ関数があります：</target>
        </trans-unit>
        <trans-unit id="5cb0790e9c7133e4cc81702a5b48be8ffd4efd86" translate="yes" xml:space="preserve">
          <source>In addition, to allow Python template files that contain Django template language syntax while also preventing packaging systems from trying to byte-compile invalid &lt;code&gt;*.py&lt;/code&gt; files, template files ending with &lt;code&gt;.py-tpl&lt;/code&gt; will be renamed to &lt;code&gt;.py&lt;/code&gt;.</source>
          <target state="translated">さらに、Djangoテンプレート言語構文を含むPythonテンプレートファイルを許可すると同時に、パッケージングシステムが無効な &lt;code&gt;*.py&lt;/code&gt; ファイルをバイトコンパイルしようとするのを防ぐために、 &lt;code&gt;.py-tpl&lt;/code&gt; で終わるテンプレートファイルの名前は &lt;code&gt;.py&lt;/code&gt; に変更されます。</target>
        </trans-unit>
        <trans-unit id="f39294b8048c718f8bb8084ffe106424b63a64a2" translate="yes" xml:space="preserve">
          <source>In addition, to cut down on the repetitive nature of loading and rendering templates, Django provides a shortcut function which automates the process.</source>
          <target state="translated">また、テンプレートの読み込みやレンダリングの繰り返しを減らすために、Django はプロセスを自動化するショートカット機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="be8f95e23db63b8ed19a44c8deba6d75e37d2dc0" translate="yes" xml:space="preserve">
          <source>In addition, try to avoid returning values as positional arguments; where possible, return values as keyword arguments for maximum future compatibility. Of course, if you change the names of things more often than their position in the constructor&amp;rsquo;s argument list, you might prefer positional, but bear in mind that people will be reconstructing your field from the serialized version for quite a while (possibly years), depending how long your migrations live for.</source>
          <target state="translated">さらに、位置引数として値を返さないようにしてください。可能であれば、将来の互換性を最大にするために、キーワード引数として値を返します。もちろん、コンストラクターの引数リストでの位置よりも頻繁に名前を変更する場合は、位置を優先することもできますが、シリアル化されたバージョンからしばらくの間（おそらく数年）人々がフィールドを再構築することに注意してください。移行の存続期間によって異なります。</target>
        </trans-unit>
        <trans-unit id="d3643c4f39cc7b043d095a8d10a730426bd124d2" translate="yes" xml:space="preserve">
          <source>In addition, you may run into a &lt;code&gt;CircularDependencyError&lt;/code&gt; when running your migrations as Django won&amp;rsquo;t be able to automatically break the dependency loop due to the dynamic dependency. If you see this error, you should break the loop by moving the models depended on by your user model into a second migration. (You can try making two normal models that have a &lt;code&gt;ForeignKey&lt;/code&gt; to each other and seeing how &lt;code&gt;makemigrations&lt;/code&gt; resolves that circular dependency if you want to see how it&amp;rsquo;s usually done.)</source>
          <target state="translated">さらに、Djangoは動的な依存関係のために依存関係ループを自動的に解除できないため、移行を実行するときに &lt;code&gt;CircularDependencyError&lt;/code&gt; が発生する可能性があります。このエラーが表示された場合は、ユーザーモデルに依存するモデルを2番目の移行に移動して、ループを解消する必要があります。 （通常、どのように行われるかを確認したい場合は、 &lt;code&gt;ForeignKey&lt;/code&gt; が互いに含まれる2つの通常のモデルを作成し、 &lt;code&gt;makemigrations&lt;/code&gt; が循環依存関係を解決する方法を確認してください。）</target>
        </trans-unit>
        <trans-unit id="6c07cdf9206331466980546d8b1cf47350f9dec8" translate="yes" xml:space="preserve">
          <source>In all cases the name of the directory containing the translation is expected to be named using &lt;a href=&quot;index#term-locale-name&quot;&gt;locale name&lt;/a&gt; notation. E.g. &lt;code&gt;de&lt;/code&gt;, &lt;code&gt;pt_BR&lt;/code&gt;, &lt;code&gt;es_AR&lt;/code&gt;, etc. Untranslated strings for territorial language variants use the translations of the generic language. For example, untranslated &lt;code&gt;pt_BR&lt;/code&gt; strings use &lt;code&gt;pt&lt;/code&gt; translations.</source>
          <target state="translated">すべての場合において、翻訳を含むディレクトリの名前は、&lt;a href=&quot;index#term-locale-name&quot;&gt;ロケール名&lt;/a&gt;表記を使用して命名されることが期待されます。たとえば、 &lt;code&gt;de&lt;/code&gt; 、 &lt;code&gt;pt_BR&lt;/code&gt; 、 &lt;code&gt;es_AR&lt;/code&gt; など。地域の言語バリアントの未翻訳の文字列は、一般的な言語の翻訳を使用します。たとえば、未翻訳の &lt;code&gt;pt_BR&lt;/code&gt; 文字列は &lt;code&gt;pt&lt;/code&gt; 変換を使用します。</target>
        </trans-unit>
        <trans-unit id="72cd5697475afea58d2e7c1ba3fcfc8ea3cf3530" translate="yes" xml:space="preserve">
          <source>In all other respects, the &lt;code&gt;InlineModelAdmin&lt;/code&gt; is exactly the same as any other. You can customize the appearance using any of the normal &lt;code&gt;ModelAdmin&lt;/code&gt; properties.</source>
          <target state="translated">他のすべての点で、 &lt;code&gt;InlineModelAdmin&lt;/code&gt; は他のすべてとまったく同じです。通常の &lt;code&gt;ModelAdmin&lt;/code&gt; プロパティを使用して、外観をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="e9d5e238bac9efc00000ed6f69e2747cbb0fb9ac" translate="yes" xml:space="preserve">
          <source>In an &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object, the &lt;a href=&quot;#django.http.HttpRequest.GET&quot;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt; attributes are instances of &lt;code&gt;django.http.QueryDict&lt;/code&gt;, a dictionary-like class customized to deal with multiple values for the same key. This is necessary because some HTML form elements, notably &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt;, pass multiple values for the same key.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;オブジェクト、&lt;a href=&quot;#django.http.HttpRequest.GET&quot;&gt; &lt;code&gt;GET&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;POST&lt;/code&gt; &lt;/a&gt;の属性は、のインスタンスである &lt;code&gt;django.http.QueryDict&lt;/code&gt; 、辞書のようなクラス、同じキーに対して複数の値に対処するためにカスタマイズされました。これは、いくつかのHTMLフォーム要素（特に &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; ）が同じキーに複数の値を渡すために必要です。</target>
        </trans-unit>
        <trans-unit id="125593a33b52de9b2649a843eba4f9a9f643a393" translate="yes" xml:space="preserve">
          <source>In any case, you should always be able to &lt;a href=&quot;#spatialite-source&quot;&gt;install from source&lt;/a&gt;.</source>
          <target state="translated">いずれの場合も、常に&lt;a href=&quot;#spatialite-source&quot;&gt;ソース&lt;/a&gt;からインストールできる必要があります。</target>
        </trans-unit>
        <trans-unit id="26372be3d62eb8474ab024118b757738445b8b1e" translate="yes" xml:space="preserve">
          <source>In any directory named in the &lt;a href=&quot;settings#std:setting-FIXTURE_DIRS&quot;&gt;&lt;code&gt;FIXTURE_DIRS&lt;/code&gt;&lt;/a&gt; setting</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-FIXTURE_DIRS&quot;&gt; &lt;code&gt;FIXTURE_DIRS&lt;/code&gt; &lt;/a&gt;設定で指定された任意のディレクトリ</target>
        </trans-unit>
        <trans-unit id="c617f38771b04f4bc99f2332d1dc8deca3569a57" translate="yes" xml:space="preserve">
          <source>In any template that uses a POST form, use the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; tag inside the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element if the form is for an internal URL, e.g.:</source>
          <target state="translated">POSTフォームを使用するテンプレートでは、フォームが内部URL用の場合、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素内で&lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt;タグを使用します。例：</target>
        </trans-unit>
        <trans-unit id="9584b79fc48ff0575ab4a3e73aa30d63351d2fd1" translate="yes" xml:space="preserve">
          <source>In both cases, &amp;ldquo;absolute path&amp;rdquo; means a URL that doesn&amp;rsquo;t include the protocol or domain. Examples:</source>
          <target state="translated">どちらの場合も、「絶対パス」は、プロトコルまたはドメインを含まないURLを意味します。例：</target>
        </trans-unit>
        <trans-unit id="ad26be7567d5ea62f6cbf975fb69c51dd3b9c5ff" translate="yes" xml:space="preserve">
          <source>In case a template var (&lt;code&gt;myvar&lt;/code&gt; above) is passed to the tag, the tag will first resolve such variable to a string at run-time and then look up that string in the message catalogs.</source>
          <target state="translated">テンプレート &lt;code&gt;myvar&lt;/code&gt; （上記のmyvar）がタグに渡された場合、タグはまず実行時にそのような変数を文字列に解決してから、メッセージカタログでその文字列を検索します。</target>
        </trans-unit>
        <trans-unit id="2ac2ff181891a9196cfcb6c36702ae8d31f48781" translate="yes" xml:space="preserve">
          <source>In case it is a callable, it accepts the model instance as a parameter. For example:</source>
          <target state="translated">呼び出し可能な場合は、モデルのインスタンスをパラメータとして受け取ります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c754ae6f658d028d73d2c46131b5071580be6e76" translate="yes" xml:space="preserve">
          <source>In case you want to override a setting for a test method, Django provides the &lt;a href=&quot;#django.test.override_settings&quot;&gt;&lt;code&gt;override_settings()&lt;/code&gt;&lt;/a&gt; decorator (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0318&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 318&lt;/strong&gt;&lt;/a&gt;). It&amp;rsquo;s used like this:</source>
          <target state="translated">テストメソッドの設定をオーバーライドしたい場合のために、Djangoは&lt;a href=&quot;#django.test.override_settings&quot;&gt; &lt;code&gt;override_settings()&lt;/code&gt; &lt;/a&gt;デコレータを提供しています（&lt;a href=&quot;https://www.python.org/dev/peps/pep-0318&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 318を&lt;/strong&gt;&lt;/a&gt;参照）。これは次のように使用されます：</target>
        </trans-unit>
        <trans-unit id="14bf4df5347afc16b3429fb63cb4de3162b6824c" translate="yes" xml:space="preserve">
          <source>In case you want to refer to files in one of the locations with an additional namespace, you can &lt;strong&gt;optionally&lt;/strong&gt; provide a prefix as &lt;code&gt;(prefix, path)&lt;/code&gt; tuples, e.g.:</source>
          <target state="translated">追加の名前空間を持ついずれかの場所にあるファイルを参照する&lt;strong&gt;場合&lt;/strong&gt;は、&lt;strong&gt;オプション&lt;/strong&gt;で接頭辞を &lt;code&gt;(prefix, path)&lt;/code&gt; タプルとして指定でき&lt;strong&gt;ます&lt;/strong&gt;。例：</target>
        </trans-unit>
        <trans-unit id="d992ed68ceac74ca140820c822217fa435f7818c" translate="yes" xml:space="preserve">
          <source>In case your custom field needs a special conversion when being saved that is not the same as the conversion used for normal query parameters, you can override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_db_prep_save&quot;&gt;&lt;code&gt;get_db_prep_save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタムフィールドを保存するときに、通常のクエリパラメータで使用される変換とは異なる特別な変換が必要な場合は、&lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_db_prep_save&quot;&gt; &lt;code&gt;get_db_prep_save()&lt;/code&gt; を&lt;/a&gt;オーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="e7465849737f4a0d865ae26d03454c4d9bb925c5" translate="yes" xml:space="preserve">
          <source>In case your model defines a range using two fields, instead of the native PostgreSQL range types, you should write an expression that uses the equivalent function (e.g. &lt;code&gt;TsTzRange()&lt;/code&gt;), and use the delimiters for the field. Most often, the delimiters will be &lt;code&gt;'[)'&lt;/code&gt;, meaning that the lower bound is inclusive and the upper bound is exclusive. You may use the &lt;a href=&quot;fields#django.contrib.postgres.fields.RangeBoundary&quot;&gt;&lt;code&gt;RangeBoundary&lt;/code&gt;&lt;/a&gt; that provides an expression mapping for the &lt;a href=&quot;https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY&quot;&gt;range boundaries&lt;/a&gt;. For example:</source>
          <target state="translated">モデルがネイティブのPostgreSQL範囲型ではなく2つのフィールドを使用して範囲を定義する場合、同等の関数（例： &lt;code&gt;TsTzRange()&lt;/code&gt; ）を使用する式を記述し、フィールドの区切り文字を使用する必要があります。ほとんどの場合、区切り文字は &lt;code&gt;'[)'&lt;/code&gt; になります。これは、下限が含まれ、上限が含まれないことを意味します。&lt;a href=&quot;https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY&quot;&gt;範囲境界の&lt;/a&gt;式マッピングを提供する&lt;a href=&quot;fields#django.contrib.postgres.fields.RangeBoundary&quot;&gt; &lt;code&gt;RangeBoundary&lt;/code&gt; &lt;/a&gt;を使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="051cd6e750abe4a0440743fc7195e3b28df1345b" translate="yes" xml:space="preserve">
          <source>In cases 1 and 2, the value of the &lt;code&gt;backend&lt;/code&gt; argument or the &lt;code&gt;user.backend&lt;/code&gt; attribute should be a dotted import path string (like that found in &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;), not the actual backend class.</source>
          <target state="translated">1と2の場合、 &lt;code&gt;backend&lt;/code&gt; 引数または &lt;code&gt;user.backend&lt;/code&gt; 属性の値は、実際のバックエンドクラスではなく、ドット付きインポートパス文字列（&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; にある&lt;/a&gt;ようなもの）である必要があります。</target>
        </trans-unit>
        <trans-unit id="d8468a1c5eceb7ad498210c570f09ce1a370656f" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; objects, which are created automatically by Django, &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects are your responsibility. Each view you write is responsible for instantiating, populating, and returning an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoによって自動的に作成される&lt;a href=&quot;#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;オブジェクトとは異なり、&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトはユーザーの責任です。作成する各ビューは、&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; の&lt;/a&gt;インスタンス化、入力、および返却を担当します。</target>
        </trans-unit>
        <trans-unit id="f060f555e740ac3beb8b7312bc9eac7c1f9e16bd" translate="yes" xml:space="preserve">
          <source>In detail, Django automatically opens a connection to the database whenever it needs one and doesn&amp;rsquo;t have one already &amp;mdash; either because this is the first connection, or because the previous connection was closed.</source>
          <target state="translated">詳細には、Djangoはデータベースへの接続を必要なときに自動的に開きます。これがまだない場合は、これが最初の接続であるか、前の接続が閉じられていたためです。</target>
        </trans-unit>
        <trans-unit id="34d24d63eafec4abb1397d46acb8a0d53758ad7a" translate="yes" xml:space="preserve">
          <source>In each of these places, the language preference is expected to be in the standard &lt;a href=&quot;index#term-language-code&quot;&gt;language format&lt;/a&gt;, as a string. For example, Brazilian Portuguese is &lt;code&gt;pt-br&lt;/code&gt;.</source>
          <target state="translated">これらの場所のそれぞれで、言語設定は文字列として標準&lt;a href=&quot;index#term-language-code&quot;&gt;言語形式&lt;/a&gt;であることが期待されます。たとえば、ブラジルポルトガル語は &lt;code&gt;pt-br&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8cd7c1e1e4252d27a4de97d1e3a8a42f6ba5b40c" translate="yes" xml:space="preserve">
          <source>In either case, using only one style within a given regex is recommended. When both styles are mixed, any unnamed groups are ignored and only named groups are passed to the view function.</source>
          <target state="translated">いずれの場合も、与えられた正規表現内では片方のスタイルのみを使用することをお勧めします。両方のスタイルが混在している場合、名前のないグループは無視され、名前のあるグループだけがビュー関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="eca740cfe82332cf351f75edde40f7eee9f36561" translate="yes" xml:space="preserve">
          <source>In fact if your form is going to be used to directly add or edit a Django model, a &lt;a href=&quot;modelforms&quot;&gt;ModelForm&lt;/a&gt; can save you a great deal of time, effort, and code, because it will build a form, along with the appropriate fields and their attributes, from a &lt;code&gt;Model&lt;/code&gt; class.</source>
          <target state="translated">実際、フォームを使用してDjangoモデルを直接追加または編集する場合、&lt;a href=&quot;modelforms&quot;&gt;ModelForm&lt;/a&gt;は、適切なフィールドとその属性とともにフォームを構築するため、時間、労力、およびコードを大幅に節約できます。 、 &lt;code&gt;Model&lt;/code&gt; クラスから。</target>
        </trans-unit>
        <trans-unit id="7d9a9c622b4c3cad5652ef1faa625de607bb2ed0" translate="yes" xml:space="preserve">
          <source>In fact, most lookups with &lt;code&gt;__abs&lt;/code&gt; could be implemented as range queries like this, and on most database backends it is likely to be more sensible to do so as you can make use of the indexes. However with PostgreSQL you may want to add an index on &lt;code&gt;abs(change)&lt;/code&gt; which would allow these queries to be very efficient.</source>
          <target state="translated">実際、 &lt;code&gt;__abs&lt;/code&gt; を使用したほとんどのルックアップは、このような範囲クエリとして実装できます。ほとんどのデータベースバックエンドでは、インデックスを使用できるため、そうする方が賢明です。ただし、PostgreSQLでは、 &lt;code&gt;abs(change)&lt;/code&gt; にインデックスを追加すると、これらのクエリを非常に効率的にすることができます。</target>
        </trans-unit>
        <trans-unit id="adba40a949f571c0432f75912f911cb4408c8a50" translate="yes" xml:space="preserve">
          <source>In general constraints are &lt;strong&gt;not&lt;/strong&gt; checked during &lt;code&gt;full_clean()&lt;/code&gt;, and do not raise &lt;code&gt;ValidationError&lt;/code&gt;s. Rather you&amp;rsquo;ll get a database integrity error on &lt;code&gt;save()&lt;/code&gt;. &lt;code&gt;UniqueConstraint&lt;/code&gt;s without a &lt;a href=&quot;#django.db.models.UniqueConstraint.condition&quot;&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/a&gt; (i.e. non-partial unique constraints) are different in this regard, in that they leverage the existing &lt;code&gt;validate_unique()&lt;/code&gt; logic, and thus enable two-stage validation. In addition to &lt;code&gt;IntegrityError&lt;/code&gt; on &lt;code&gt;save()&lt;/code&gt;, &lt;code&gt;ValidationError&lt;/code&gt; is also raised during model validation when the &lt;code&gt;UniqueConstraint&lt;/code&gt; is violated.</source>
          <target state="translated">一般的には制約がされて&lt;strong&gt;いない&lt;/strong&gt;時にチェック &lt;code&gt;full_clean()&lt;/code&gt; 、と提起していない &lt;code&gt;ValidationError&lt;/code&gt; を秒。むしろ、 &lt;code&gt;save()&lt;/code&gt; でデータベースの整合性エラーが発生します。 &lt;code&gt;UniqueConstraint&lt;/code&gt; Sなしの&lt;a href=&quot;#django.db.models.UniqueConstraint.condition&quot;&gt; &lt;code&gt;condition&lt;/code&gt; &lt;/a&gt;（すなわち、非部分ユニーク制約は）彼らは、既存の活用という点で、この点で異なっている &lt;code&gt;validate_unique()&lt;/code&gt; ロジックを、ひいては二段階の検証を可能にします。 &lt;code&gt;save()&lt;/code&gt; の &lt;code&gt;IntegrityError&lt;/code&gt; に加えて、モデルの検証中に &lt;code&gt;UniqueConstraint&lt;/code&gt; に違反すると、 &lt;code&gt;ValidationError&lt;/code&gt; も発生します。</target>
        </trans-unit>
        <trans-unit id="209edf2940165c6cc1a875e5298008997ec85e40" translate="yes" xml:space="preserve">
          <source>In general, &lt;code&gt;Q() objects&lt;/code&gt; make it possible to define and reuse conditions. This permits the &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;construction of complex database queries&lt;/a&gt; using &lt;code&gt;|&lt;/code&gt; (&lt;code&gt;OR&lt;/code&gt;) and &lt;code&gt;&amp;amp;&lt;/code&gt; (&lt;code&gt;AND&lt;/code&gt;) operators; in particular, it is not otherwise possible to use &lt;code&gt;OR&lt;/code&gt; in &lt;code&gt;QuerySets&lt;/code&gt;.</source>
          <target state="translated">一般に、 &lt;code&gt;Q() objects&lt;/code&gt; を使用すると、条件を定義して再利用できます。これにより、 &lt;code&gt;|&lt;/code&gt; を使用して&lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;複雑なデータベースクエリ&lt;/a&gt;を構築できます。（ &lt;code&gt;OR&lt;/code&gt; ）および &lt;code&gt;&amp;amp;&lt;/code&gt; （ &lt;code&gt;AND&lt;/code&gt; ）演算子;特に、そうでない場合は使用することはできません &lt;code&gt;OR&lt;/code&gt; で &lt;code&gt;QuerySets&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6c3985cf74933843dd741b4b15c88efa849cde0" translate="yes" xml:space="preserve">
          <source>In general, GeoDjango installation requires:</source>
          <target state="translated">一般的に、GeoDjango のインストールは必要です。</target>
        </trans-unit>
        <trans-unit id="509d11594c50dfe8712d4434d7a4afdf6b8e5098" translate="yes" xml:space="preserve">
          <source>In general, any cleaning method can raise &lt;code&gt;ValidationError&lt;/code&gt; if there is a problem with the data it is processing, passing the relevant information to the &lt;code&gt;ValidationError&lt;/code&gt; constructor. &lt;a href=&quot;#raising-validation-error&quot;&gt;See below&lt;/a&gt; for the best practice in raising &lt;code&gt;ValidationError&lt;/code&gt;. If no &lt;code&gt;ValidationError&lt;/code&gt; is raised, the method should return the cleaned (normalized) data as a Python object.</source>
          <target state="translated">一般的に、クリーニングメソッドは、処理中のデータに問題がある場合に &lt;code&gt;ValidationError&lt;/code&gt; を発生させ、関連情報を &lt;code&gt;ValidationError&lt;/code&gt; コンストラクターに渡します。 &lt;code&gt;ValidationError&lt;/code&gt; を発生させるベストプラクティスについては、&lt;a href=&quot;#raising-validation-error&quot;&gt;以下&lt;/a&gt;を参照してください。 &lt;code&gt;ValidationError&lt;/code&gt; が発生しない場合、メソッドはクリーンアップされた（正規化された）データをPythonオブジェクトとして返す必要があります。</target>
        </trans-unit>
        <trans-unit id="aff7eda262832443cdc4cfd621b6e572d84270a0" translate="yes" xml:space="preserve">
          <source>In general, it is enough to define &lt;a href=&quot;#django.template.loaders.base.Loader.get_template_sources&quot;&gt;&lt;code&gt;get_template_sources()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.template.loaders.base.Loader.get_contents&quot;&gt;&lt;code&gt;get_contents()&lt;/code&gt;&lt;/a&gt; for custom template loaders. &lt;code&gt;get_template()&lt;/code&gt; will usually not need to be overridden.</source>
          <target state="translated">一般に、カスタムテンプレートローダーに対して&lt;a href=&quot;#django.template.loaders.base.Loader.get_template_sources&quot;&gt; &lt;code&gt;get_template_sources()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#django.template.loaders.base.Loader.get_contents&quot;&gt; &lt;code&gt;get_contents()&lt;/code&gt; &lt;/a&gt;を定義するだけで十分です。 &lt;code&gt;get_template()&lt;/code&gt; は通常、オーバーライドする必要はありません。</target>
        </trans-unit>
        <trans-unit id="b162efee794bcad06a96b812cb84dc6a654ea12a" translate="yes" xml:space="preserve">
          <source>In general, the library path may be set on a per-user basis by setting an environment variable, or by configuring the library path for the entire system.</source>
          <target state="translated">一般的には、環境変数を設定することでユーザ単位でライブラリパスを設定したり、システム全体のライブラリパスを設定したりすることができます。</target>
        </trans-unit>
        <trans-unit id="f02826e5404756fbfee9b9f4d13058259e858ef3" translate="yes" xml:space="preserve">
          <source>In higher level code related to handling of URLs of Django model instances: The &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">DjangoモデルインスタンスのURLの処理に関連する上位レベルのコード：&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="0325acb3dd5bb25e96712e073ccf8beac6d4f214" translate="yes" xml:space="preserve">
          <source>In its simplest form &lt;code&gt;Prefetch&lt;/code&gt; is equivalent to the traditional string based lookups:</source>
          <target state="translated">最も単純な形式では、 &lt;code&gt;Prefetch&lt;/code&gt; は従来の文字列ベースのルックアップと同等です。</target>
        </trans-unit>
        <trans-unit id="74628a3f6d1c7feffe7469a9ab6311bf142ff0b9" translate="yes" xml:space="preserve">
          <source>In larger templates, this technique helps you see which &lt;code&gt;{% block %}&lt;/code&gt; tags are being closed.</source>
          <target state="translated">大きなテンプレートでは、この手法は、どの &lt;code&gt;{% block %}&lt;/code&gt; タグが閉じられているかを確認するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e5e38ef2b3710d00983de8113dd8ab5592914bbb" translate="yes" xml:space="preserve">
          <source>In lieu of the above approach which requires duplicating methods on both the &lt;code&gt;QuerySet&lt;/code&gt; and the &lt;code&gt;Manager&lt;/code&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.as_manager&quot;&gt;&lt;code&gt;QuerySet.as_manager()&lt;/code&gt;&lt;/a&gt; can be used to create an instance of &lt;code&gt;Manager&lt;/code&gt; with a copy of a custom &lt;code&gt;QuerySet&lt;/code&gt;&amp;rsquo;s methods:</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; と &lt;code&gt;Manager&lt;/code&gt; の両方でメソッドを複製する必要がある上記のアプローチの代わりに、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.as_manager&quot;&gt; &lt;code&gt;QuerySet.as_manager()&lt;/code&gt; &lt;/a&gt;を使用して、カスタム &lt;code&gt;QuerySet&lt;/code&gt; のメソッドのコピーを含む &lt;code&gt;Manager&lt;/code&gt; のインスタンスを作成できます。</target>
        </trans-unit>
        <trans-unit id="892885cde16dca9d450a49f5544282693afce6a6" translate="yes" xml:space="preserve">
          <source>In models, a field is instantiated as a class attribute and represents a particular table column, see &lt;a href=&quot;../../topics/db/models&quot;&gt;Models&lt;/a&gt;. It has attributes such as &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt;, and methods that Django uses to map the field value to database-specific values.</source>
          <target state="translated">モデルでは、フィールドはクラス属性としてインスタンス化され、特定のテーブル列を表します。&lt;a href=&quot;../../topics/db/models&quot;&gt;モデルを&lt;/a&gt;参照してください。&lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#django.db.models.Field.unique&quot;&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/a&gt;などの属性と、Djangoがフィールド値をデータベース固有の値にマップするために使用するメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="c049c4f3a733196872767a3d6e8373dbf1a9e8d8" translate="yes" xml:space="preserve">
          <source>In most cases it will be necessary to upgrade to the latest version of your Django-related dependencies as well. If the Django version was recently released or if some of your dependencies are not well-maintained, some of your dependencies may not yet support the new Django version. In these cases you may have to wait until new versions of your dependencies are released.</source>
          <target state="translated">ほとんどの場合、Django 関連の依存関係も最新版にアップグレードする必要があります。Django のバージョンが最近リリースされたばかりだったり、依存関係のいくつかが十分にメンテナンスされていない場合、依存関係のいくつかはまだ新しい Django のバージョンをサポートしていないかもしれません。このような場合は、新しいバージョンの依存関係がリリースされるまで待たなければならないかもしれません。</target>
        </trans-unit>
        <trans-unit id="2553c57b09242581a803e6aacbe2b851d277b3d0" translate="yes" xml:space="preserve">
          <source>In most cases overriding or inheriting &lt;code&gt;get_FOO_display()&lt;/code&gt;, &lt;code&gt;get_next_by_FOO()&lt;/code&gt;, and &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; should work as expected. Since they are added by the metaclass however, it is not practical to account for all possible inheritance structures. In more complex cases you should override &lt;code&gt;Field.contribute_to_class()&lt;/code&gt; to set the methods you need.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;get_FOO_display()&lt;/code&gt; 、 &lt;code&gt;get_next_by_FOO()&lt;/code&gt; 、および &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; のオーバーライドまたは継承は期待どおりに機能するはずです。ただし、メタクラスによって追加されるため、考えられるすべての継承構造を考慮することは現実的ではありません。より複雑なケースでは、必要なメソッドを設定するために &lt;code&gt;Field.contribute_to_class()&lt;/code&gt; をオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="46ee957bac7e253d4620f33ab4a0b3981905456a" translate="yes" xml:space="preserve">
          <source>In most cases when Django is dealing with strings, it will convert them to strings before doing anything else. So, as a general rule, if you pass in a bytestring, be prepared to receive a string back in the result.</source>
          <target state="translated">ほとんどの場合、Django が文字列を扱う際には、何かをする前に文字列に変換します。ですから、一般的なルールとして、バイト文字列を渡した場合、結果として文字列が返ってくることを覚悟しておいてください。</target>
        </trans-unit>
        <trans-unit id="acee6b59fd13a3ca3fe85dc3b662ea33a0c91494" translate="yes" xml:space="preserve">
          <source>In most cases, Django can automatically detect and set this, but you can also provide an explicit override as a class attribute on your &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclass. In a few situations this is required; for instance if the app package is a &lt;a href=&quot;#namespace-package&quot;&gt;namespace package&lt;/a&gt; with multiple paths.</source>
          <target state="translated">ほとんどの場合、Djangoはこれを自動的に検出して設定できますが、&lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;サブクラスのクラス属性として明示的なオーバーライドを提供することもできます。いくつかの状況ではこれが必要です。たとえば、アプリパッケージが複数のパスを持つ&lt;a href=&quot;#namespace-package&quot;&gt;名前空間パッケージ&lt;/a&gt;である場合。</target>
        </trans-unit>
        <trans-unit id="4e12dbf6f96ad8979888b66a156e04c3569721e6" translate="yes" xml:space="preserve">
          <source>In most cases, for a patch to be accepted into Django it has to include tests. For bug fix patches, this means writing a regression test to ensure that the bug is never reintroduced into Django later on. A regression test should be written in such a way that it will fail while the bug still exists and pass once the bug has been fixed. For patches containing new features, you&amp;rsquo;ll need to include tests which ensure that the new features are working correctly. They too should fail when the new feature is not present, and then pass once it has been implemented.</source>
          <target state="translated">ほとんどの場合、パッチがDjangoに受け入れられるには、テストを含める必要があります。バグ修正パッチの場合、これは、バグが後でDjangoに再導入されないようにするための回帰テストを作成することを意味します。回帰テストは、バグが存在している間は失敗し、バグが修正されると合格するように作成する必要があります。新機能を含むパッチの場合、新機能が正しく機能していることを確認するテストを含める必要があります。これらも、新機能が存在しない場合は失敗し、実装されたら合格します。</target>
        </trans-unit>
        <trans-unit id="d63a9dd51c8abf1805656df5834de22fb54d2d48" translate="yes" xml:space="preserve">
          <source>In most cases, inheriting from this mixin will be sufficient to make an old-style middleware compatible with the new system with sufficient backwards-compatibility. The new short-circuiting semantics will be harmless or even beneficial to the existing middleware. In a few cases, a middleware class may need some changes to adjust to the new semantics.</source>
          <target state="translated">ほとんどの場合、このミキシンから継承することで、旧式のミドルウェアを十分な後方互換性を持った新システムと互換性を持たせることができます。新しい短絡セマンティクスは、既存のミドルウェアには無害か、あるいは有益なものになるでしょう。いくつかのケースでは、ミドルウェアクラスが新しいセマンティクスに適応するために、いくつかの変更が必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d9d0c45a9a5c2988974b76f45606b7b5230c0954" translate="yes" xml:space="preserve">
          <source>In most cases, it&amp;rsquo;s best to use translated URLs only within a language code prefixed block of patterns (using &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt;), to avoid the possibility that a carelessly translated URL causes a collision with a non-translated URL pattern.</source>
          <target state="translated">ほとんどの場合、不用意に翻訳されたURLが翻訳されていないURLパターンとの衝突を引き起こす可能性を回避するために、翻訳されたURLは言語コードのプレフィックス付きパターンブロック内でのみ使用するのが最善&lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt; &lt;code&gt;i18n_patterns()&lt;/code&gt; &lt;/a&gt;を使用）。</target>
        </trans-unit>
        <trans-unit id="53ae97a84b8d45f7667a00362e01147ed1582f6c" translate="yes" xml:space="preserve">
          <source>In most cases, the field will have a sensible default widget. For example, by default, a &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; will have a &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widget, that produces an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; in the HTML. If you needed &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; instead, you&amp;rsquo;d specify the appropriate widget when defining your form field, as we have done for the &lt;code&gt;message&lt;/code&gt; field.</source>
          <target state="translated">ほとんどの場合、フィールドには適切なデフォルトのウィジェットがあります。たとえば、デフォルトでは、&lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;には&lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;ウィジェットがあり、HTMLで &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; を生成します。代わりに &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; が必要な場合は、 &lt;code&gt;message&lt;/code&gt; フィールドに対して行ったように、フォームフィールドを定義するときに適切なウィジェットを指定します。</target>
        </trans-unit>
        <trans-unit id="6eb548d924e6f442368c56b8245c2ffe7a95f69e" translate="yes" xml:space="preserve">
          <source>In most cases, this object will not have been saved to the database yet, so if it uses the default &lt;code&gt;AutoField&lt;/code&gt;, &lt;em&gt;it might not yet have a value for its primary key field&lt;/em&gt;.</source>
          <target state="translated">ほとんどの場合、このオブジェクトは、それがデフォルトの使用もしそうなら、まだデータベースに保存されていません &lt;code&gt;AutoField&lt;/code&gt; 、&lt;em&gt;それはまだその主キーフィールドの値を持っていない可能性があります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="553a3a820227d2b61d89c93a4f51644a0ad682a2" translate="yes" xml:space="preserve">
          <source>In most cases, you can send email using &lt;code&gt;django.core.mail.send_mail()&lt;/code&gt;.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;django.core.mail.send_mail()&lt;/code&gt; を使用してメールを送信できます。</target>
        </trans-unit>
        <trans-unit id="fb9e461a8cfdfc6e585763268faa61b1594df5ef" translate="yes" xml:space="preserve">
          <source>In non-interactive mode, the &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt;&lt;code&gt;USERNAME_FIELD&lt;/code&gt;&lt;/a&gt; and required fields (listed in &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt;&lt;code&gt;REQUIRED_FIELDS&lt;/code&gt;&lt;/a&gt;) fall back to &lt;code&gt;DJANGO_SUPERUSER_&amp;lt;uppercase_field_name&amp;gt;&lt;/code&gt; environment variables, unless they are overridden by a command line argument. For example, to provide an &lt;code&gt;email&lt;/code&gt; field, you can use &lt;code&gt;DJANGO_SUPERUSER_EMAIL&lt;/code&gt; environment variable.</source>
          <target state="translated">非インタラクティブモードでは、&lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt; &lt;code&gt;USERNAME_FIELD&lt;/code&gt; &lt;/a&gt;および必須フィールド（&lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt; &lt;code&gt;REQUIRED_FIELDS&lt;/code&gt; に&lt;/a&gt;リストされている）は、コマンドライン引数でオーバーライドされない限り、 &lt;code&gt;DJANGO_SUPERUSER_&amp;lt;uppercase_field_name&amp;gt;&lt;/code&gt; 環境変数にフォールバックします。例えば、 &lt;code&gt;email&lt;/code&gt; フィールドを提供するには、 &lt;code&gt;DJANGO_SUPERUSER_EMAIL&lt;/code&gt; 環境変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="e811dedb04c04b0db2eb92ba335a09921c544b79" translate="yes" xml:space="preserve">
          <source>In normal Python class inheritance, it is permissible for a child class to override any attribute from the parent class. In Django, this isn&amp;rsquo;t usually permitted for model fields. If a non-abstract model base class has a field called &lt;code&gt;author&lt;/code&gt;, you can&amp;rsquo;t create another model field or define an attribute called &lt;code&gt;author&lt;/code&gt; in any class that inherits from that base class.</source>
          <target state="translated">通常のPythonクラス継承では、子クラスが親クラスの属性をオーバーライドすることが許可されています。Djangoでは、これは通常、モデルフィールドでは許可されていません。非抽象モデルの基本クラスに &lt;code&gt;author&lt;/code&gt; というフィールドがある場合、別のモデルフィールドを作成したり、その基本クラスから継承するクラスで &lt;code&gt;author&lt;/code&gt; という属性を定義したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="9ba287b42f73a012193a36b795923c8fa6f96a7d" translate="yes" xml:space="preserve">
          <source>In older versions of Django, be careful when reusing Django&amp;rsquo;s built-in filters as &lt;code&gt;autoescape&lt;/code&gt; defaults to &lt;code&gt;None&lt;/code&gt;. You&amp;rsquo;ll need to pass &lt;code&gt;autoescape=True&lt;/code&gt; to get autoescaping.</source>
          <target state="translated">古いバージョンのDjangoでは、 &lt;code&gt;autoescape&lt;/code&gt; デフォルトで &lt;code&gt;None&lt;/code&gt; に設定されているため、Djangoの組み込みフィルターを再利用するときは注意してください。 &lt;code&gt;autoescape=True&lt;/code&gt; を取得するには、autoescape = Trueを渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="48487eecdf3392dca8cdac3e20e02c45e851f71c" translate="yes" xml:space="preserve">
          <source>In older versions, &lt;code&gt;'&lt;/code&gt; is converted to its decimal code &lt;code&gt;&amp;amp;#39;&lt;/code&gt; instead of the equivalent hex code &lt;code&gt;&amp;amp;#x27;&lt;/code&gt;.</source>
          <target state="translated">以前のバージョンでは、 &lt;code&gt;'&lt;/code&gt; は10進数コードに変換されます &lt;code&gt;&amp;amp;#39;&lt;/code&gt; 同等の16進コードの代わりに &lt;code&gt;&amp;amp;#x27;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a594579463454aa6c5f1d126c4933adb9501ac81" translate="yes" xml:space="preserve">
          <source>In older versions, &lt;code&gt;s&lt;/code&gt; may be a bytestring.</source>
          <target state="translated">古いバージョンでは、 &lt;code&gt;s&lt;/code&gt; はバイト文字列である場合があります。</target>
        </trans-unit>
        <trans-unit id="06abe09565f7ebaaa5a5a3e66eecce8b6a0e1ba2" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRContains&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">古いバージョンでは、MySQLは &lt;code&gt;MBRContains&lt;/code&gt; を使用し、境界ボックスでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="86fdacbc12f0c3ada37ced324655c76230d31333" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRDisjoint&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">古いバージョンでは、MySQLは &lt;code&gt;MBRDisjoint&lt;/code&gt; を使用し、境界ボックスでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="a250c6c4d5ddf0ab4e264cb2589304887da56d37" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBREquals&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">古いバージョンでは、MySQLは &lt;code&gt;MBREquals&lt;/code&gt; を使用し、境界ボックスでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="3d30b1f38b6febfe720406653832214a3cd66396" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRIntersects&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">古いバージョンでは、MySQLは &lt;code&gt;MBRIntersects&lt;/code&gt; を使用し、境界ボックスでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="a108605efc0a5748e8093c6df53458e3fc931cff" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBROverlaps&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">古いバージョンでは、MySQLは &lt;code&gt;MBROverlaps&lt;/code&gt; を使用し、境界ボックスでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="6a423185ebb0542b517af591a286bdfe336b4ccb" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRTouches&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">古いバージョンでは、MySQLは &lt;code&gt;MBRTouches&lt;/code&gt; を使用し、境界ボックスでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="e454d7f81ea9b0f64b3dcee0ba1d27440f516a6e" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRWithin&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">古いバージョンでは、MySQLは &lt;code&gt;MBRWithin&lt;/code&gt; を使用し、境界ボックスでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="04c471d6170a640a7f0b0a6b5d86ad526b15aeb8" translate="yes" xml:space="preserve">
          <source>In older versions, it returns a bytestring instead of a string.</source>
          <target state="translated">古いバージョンでは、文字列の代わりにバイト列を返します。</target>
        </trans-unit>
        <trans-unit id="e77f0794cc34eae167668fa46edcdb855f41b6ef" translate="yes" xml:space="preserve">
          <source>In older versions, permissions for proxy models use the content type of the concrete model rather than content type of the proxy model.</source>
          <target state="translated">古いバージョンでは、プロキシモデルのパーミッションは、プロキシモデルのコンテンツタイプではなく、具象モデルのコンテンツタイプを使用します。</target>
        </trans-unit>
        <trans-unit id="c3ee96d228df4d2c97001f389d45ba85fe666ff6" translate="yes" xml:space="preserve">
          <source>In older versions, proxy models use the content type of the concrete model.</source>
          <target state="translated">古いバージョンでは、プロキシモデルは具象モデルのコンテンツタイプを使用します。</target>
        </trans-unit>
        <trans-unit id="fb39b75e03f33a4e72cf13d13c8cf8133f783eb6" translate="yes" xml:space="preserve">
          <source>In older versions, the &lt;code&gt;tzinfo&lt;/code&gt; attribute is a &lt;a href=&quot;#django.utils.timezone.FixedOffset&quot;&gt;&lt;code&gt;FixedOffset&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">古いバージョンでは、 &lt;code&gt;tzinfo&lt;/code&gt; 属性は&lt;a href=&quot;#django.utils.timezone.FixedOffset&quot;&gt; &lt;code&gt;FixedOffset&lt;/code&gt; &lt;/a&gt;インスタンスです。</target>
        </trans-unit>
        <trans-unit id="688ca5f2699bc44de7ce8a06a72f66e4061b7b2e" translate="yes" xml:space="preserve">
          <source>In older versions, the default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">古いバージョンでは、デフォルト値は &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f4239bf88dcd319d30aa682cbe4d3cde5d9664bc" translate="yes" xml:space="preserve">
          <source>In older versions, the default value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">古いバージョンでは、デフォルト値は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ce7d5574bd6957ee81720c428d128a45952d2924" translate="yes" xml:space="preserve">
          <source>In older versions, the default value is &lt;code&gt;SAMEORIGIN&lt;/code&gt;.</source>
          <target state="translated">古いバージョンでは、デフォルト値は &lt;code&gt;SAMEORIGIN&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="66326a5c500f2e9b8f06b11645d2eb1a463f096a" translate="yes" xml:space="preserve">
          <source>In older versions, the keyword arguments with &lt;code&gt;None&lt;/code&gt; values are made up also for not provided named parts.</source>
          <target state="translated">古いバージョンでは、 &lt;code&gt;None&lt;/code&gt; 値のキーワード引数は、提供されていない名前付きパーツに対しても作成されます。</target>
        </trans-unit>
        <trans-unit id="be44bea554526db510067415e8c9fcb3f595c8bd" translate="yes" xml:space="preserve">
          <source>In older versions, you could set the language in the current session.</source>
          <target state="translated">古いバージョンでは、現在のセッションで言語を設定することができます。</target>
        </trans-unit>
        <trans-unit id="ecde436d8369233ca2f3dcb9ab1ca79254f03cdf" translate="yes" xml:space="preserve">
          <source>In order for the &lt;code&gt;python manage.py migrate&lt;/code&gt; command to work, your Oracle database user must have privileges to run the following commands:</source>
          <target state="translated">ためには &lt;code&gt;python manage.py migrate&lt;/code&gt; 仕事へのコマンドは、Oracleデータベースのユーザーには、次のコマンドを実行する権限を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="90fe772dd41ff482e0ce23d0eaa3b30a1fdefbce" translate="yes" xml:space="preserve">
          <source>In order for your filter to know the current auto-escaping state, set the &lt;code&gt;needs_autoescape&lt;/code&gt; flag to &lt;code&gt;True&lt;/code&gt; when you register your filter function. (If you don&amp;rsquo;t specify this flag, it defaults to &lt;code&gt;False&lt;/code&gt;). This flag tells Django that your filter function wants to be passed an extra keyword argument, called &lt;code&gt;autoescape&lt;/code&gt;, that is &lt;code&gt;True&lt;/code&gt; if auto-escaping is in effect and &lt;code&gt;False&lt;/code&gt; otherwise. It is recommended to set the default of the &lt;code&gt;autoescape&lt;/code&gt; parameter to &lt;code&gt;True&lt;/code&gt;, so that if you call the function from Python code it will have escaping enabled by default.</source>
          <target state="translated">フィルターが現在の自動エスケープ状態を認識できるようにするには、フィルター関数を登録するときに、 &lt;code&gt;needs_autoescape&lt;/code&gt; フラグを &lt;code&gt;True&lt;/code&gt; に設定します。 （このフラグを指定しない場合、デフォルトで &lt;code&gt;False&lt;/code&gt; になります）。このフラグはDjangoに、フィルター関数に &lt;code&gt;autoescape&lt;/code&gt; と呼ばれる追加のキーワード引数を渡したいことを伝えます。これは、自動エスケープが有効な場合は &lt;code&gt;True&lt;/code&gt; 、そうでない場合は &lt;code&gt;False&lt;/code&gt; です。 &lt;code&gt;autoescape&lt;/code&gt; パラメータのデフォルトを &lt;code&gt;True&lt;/code&gt; に設定することをお勧めします。これにより、Pythonコードから関数を呼び出す場合、デフォルトでエスケープが有効になります。</target>
        </trans-unit>
        <trans-unit id="11a387c8a9914108b9a7aabd974b6e6881a3bea5" translate="yes" xml:space="preserve">
          <source>In order to build a custom session engine or to customize an existing one, you may create a new class inheriting from &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase&quot;&gt;&lt;code&gt;SessionBase&lt;/code&gt;&lt;/a&gt; or any other existing &lt;code&gt;SessionStore&lt;/code&gt; class.</source>
          <target state="translated">カスタムセッションエンジンを構築したり、既存のセッションエンジンをカスタマイズしたりするには、&lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase&quot;&gt; &lt;code&gt;SessionBase&lt;/code&gt; &lt;/a&gt;またはその他の既存の &lt;code&gt;SessionStore&lt;/code&gt; クラスから継承する新しいクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="f48a9537ae495f429e0a574bc2641d48124286ad" translate="yes" xml:space="preserve">
          <source>In order to configure logging, you use &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; to define a dictionary of logging settings. These settings describes the loggers, handlers, filters and formatters that you want in your logging setup, and the log levels and other properties that you want those components to have.</source>
          <target state="translated">ロギングを設定するには、&lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt; &lt;code&gt;LOGGING&lt;/code&gt; &lt;/a&gt;を使用してロギング設定の辞書を定義します。これらの設定は、ログ設定で必要なロガー、ハンドラー、フィルター、フォーマッター、およびこれらのコンポーネントに必要なログレベルとその他のプロパティについて説明します。</target>
        </trans-unit>
        <trans-unit id="42b3fc106c92756d794366455faac3a83dc515a5" translate="yes" xml:space="preserve">
          <source>In order to do that you can check the database connection&amp;rsquo;s alias inside a &lt;code&gt;RunPython&lt;/code&gt; operation by looking at the &lt;code&gt;schema_editor.connection.alias&lt;/code&gt; attribute:</source>
          <target state="translated">これを行うには、 &lt;code&gt;schema_editor.connection.alias&lt;/code&gt; 属性を調べて、 &lt;code&gt;RunPython&lt;/code&gt; 操作内でデータベース接続のエイリアスを確認します。</target>
        </trans-unit>
        <trans-unit id="61d52591f027c8771ad5ddae66ce22631a8a19bc" translate="yes" xml:space="preserve">
          <source>In order to fully serialize your &lt;code&gt;Restaurant&lt;/code&gt; instances, you will need to serialize the &lt;code&gt;Place&lt;/code&gt; models as well:</source>
          <target state="translated">&lt;code&gt;Restaurant&lt;/code&gt; インスタンスを完全にシリアル化するには、 &lt;code&gt;Place&lt;/code&gt; モデルもシリアル化する必要があります。</target>
        </trans-unit>
        <trans-unit id="814bf473789694253cf32579769ab02b74a9eb85" translate="yes" xml:space="preserve">
          <source>In order to guarantee atomicity, &lt;code&gt;atomic&lt;/code&gt; disables some APIs. Attempting to commit, roll back, or change the autocommit state of the database connection within an &lt;code&gt;atomic&lt;/code&gt; block will raise an exception.</source>
          <target state="translated">アトミック性を保証するために、 &lt;code&gt;atomic&lt;/code&gt; は一部のAPIを無効にします。 &lt;code&gt;atomic&lt;/code&gt; ブロック内でデータベース接続のコミット、ロールバック、または自動コミット状態を変更しようとすると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="2d184cd5980dd60fc335a14a8588be38002eadd0" translate="yes" xml:space="preserve">
          <source>In order to guarantee that all &lt;code&gt;TestCase&lt;/code&gt; code starts with a clean database, the Django test runner reorders tests in the following way:</source>
          <target state="translated">すべての &lt;code&gt;TestCase&lt;/code&gt; コードがクリーンなデータベースで始まることを保証するために、Djangoテストランナーは次のようにテストを並べ替えます。</target>
        </trans-unit>
        <trans-unit id="ebd5f1b685513a442ce3a791e86443cc357e3454" translate="yes" xml:space="preserve">
          <source>In order to handle this situation, you need to pass &lt;code&gt;handle_forward_references=True&lt;/code&gt; to &lt;code&gt;serializers.deserialize()&lt;/code&gt;. This will set the &lt;code&gt;deferred_fields&lt;/code&gt; attribute on the &lt;code&gt;DeserializedObject&lt;/code&gt; instances. You&amp;rsquo;ll need to keep track of &lt;code&gt;DeserializedObject&lt;/code&gt; instances where this attribute isn&amp;rsquo;t &lt;code&gt;None&lt;/code&gt; and later call &lt;code&gt;save_deferred_fields()&lt;/code&gt; on them.</source>
          <target state="translated">この状況を処理するには、 &lt;code&gt;handle_forward_references=True&lt;/code&gt; を &lt;code&gt;serializers.deserialize()&lt;/code&gt; に渡す必要があります。これにより、 &lt;code&gt;DeserializedObject&lt;/code&gt; インスタンスに &lt;code&gt;deferred_fields&lt;/code&gt; 属性が設定されます。この属性が &lt;code&gt;None&lt;/code&gt; でない &lt;code&gt;DeserializedObject&lt;/code&gt; インスタンスを追跡し、後でそれら &lt;code&gt;save_deferred_fields()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="8b2e79b4b6aa18a676e91499097aad9f8d4ed2dc" translate="yes" xml:space="preserve">
          <source>In order to make a Django project translatable, you have to add a minimal number of hooks to your Python code and templates. These hooks are called &lt;a href=&quot;index#term-translation-string&quot;&gt;translation strings&lt;/a&gt;. They tell Django: &amp;ldquo;This text should be translated into the end user&amp;rsquo;s language, if a translation for this text is available in that language.&amp;rdquo; It&amp;rsquo;s your responsibility to mark translatable strings; the system can only translate strings it knows about.</source>
          <target state="translated">Djangoプロジェクトを翻訳可能にするには、Pythonコードとテンプレートに最小限の数のフックを追加する必要があります。これらのフックは、&lt;a href=&quot;index#term-translation-string&quot;&gt;翻訳文字列&lt;/a&gt;と呼ばれます。彼らはDjangoに次のように伝えます：「このテキストの翻訳がその言語で利用できる場合、このテキストはエンドユーザーの言語に翻訳されるべきです。」翻訳可能な文字列をマークするのはあなたの責任です。システムは、認識している文字列のみを翻訳できます。</target>
        </trans-unit>
        <trans-unit id="fd427f482c454b8a176992fb9016a46f9519bd6a" translate="yes" xml:space="preserve">
          <source>In order to make error messages flexible and easy to override, consider the following guidelines:</source>
          <target state="translated">エラーメッセージを柔軟かつ簡単に上書きできるようにするために、以下のガイドラインを検討してください。</target>
        </trans-unit>
        <trans-unit id="4fbde88be4d3a61eb0fa9d81f26e60f25b7c967a" translate="yes" xml:space="preserve">
          <source>In order to meet the 30-char limitation Oracle has on table names, and match the usual conventions for Oracle databases, Django may shorten table names and turn them all-uppercase. To prevent such transformations, use a quoted name as the value for &lt;code&gt;db_table&lt;/code&gt;:</source>
          <target state="translated">オラクルのテーブル名に関する30文字の制限を満たし、Oracleデータベースの通常の規則に合わせるために、Djangoはテーブル名を短縮してすべて大文字にする場合があります。このような変換を防ぐには、引用符で囲まれた名前を &lt;code&gt;db_table&lt;/code&gt; の値として使用します。</target>
        </trans-unit>
        <trans-unit id="09f9a7ab0865d01d87a2c3387c4322fa09399408" translate="yes" xml:space="preserve">
          <source>In order to obtain a prepared geometry, access the &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.prepared&quot;&gt;&lt;code&gt;GEOSGeometry.prepared&lt;/code&gt;&lt;/a&gt; property. Once you have a &lt;code&gt;PreparedGeometry&lt;/code&gt; instance its spatial predicate methods, listed below, may be used with other &lt;code&gt;GEOSGeometry&lt;/code&gt; objects. An operation with a prepared geometry can be orders of magnitude faster &amp;ndash; the more complex the geometry that is prepared, the larger the speedup in the operation. For more information, please consult the &lt;a href=&quot;https://trac.osgeo.org/geos/wiki/PreparedGeometry&quot;&gt;GEOS wiki page on prepared geometries&lt;/a&gt;.</source>
          <target state="translated">準備されたジオメトリを取得するには、&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.prepared&quot;&gt; &lt;code&gt;GEOSGeometry.prepared&lt;/code&gt; &lt;/a&gt;プロパティにアクセスします。あなたが持ってたら &lt;code&gt;PreparedGeometry&lt;/code&gt; のインスタンスを以下に示すその空間述語方法は、他で使用することができる &lt;code&gt;GEOSGeometry&lt;/code&gt; のオブジェクト。準備されたジオメトリを使用した操作は、桁違いに速くなる可能性があります。準備されたジオメトリが複雑になるほど、操作のスピードアップが大きくなります。詳細については&lt;a href=&quot;https://trac.osgeo.org/geos/wiki/PreparedGeometry&quot;&gt;、準備されたジオメトリに関するGEOS wikiページを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="197304082f996b82afb0836da69efaacaa7a04c7" translate="yes" xml:space="preserve">
          <source>In order to override one or more of them, first create an &lt;code&gt;admin&lt;/code&gt; directory in your project&amp;rsquo;s &lt;code&gt;templates&lt;/code&gt; directory. This can be any of the directories you specified in the &lt;a href=&quot;../../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option of the &lt;code&gt;DjangoTemplates&lt;/code&gt; backend in the &lt;a href=&quot;../../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting. If you have customized the &lt;code&gt;'loaders'&lt;/code&gt; option, be sure &lt;code&gt;'django.template.loaders.filesystem.Loader'&lt;/code&gt; appears before &lt;code&gt;'django.template.loaders.app_directories.Loader'&lt;/code&gt; so that your custom templates will be found by the template loading system before those that are included with &lt;a href=&quot;#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">それらの1つ以上をオーバーライドするには、まずプロジェクトの &lt;code&gt;templates&lt;/code&gt; ディレクトリに &lt;code&gt;admin&lt;/code&gt; ディレクトリを作成します。これは、&lt;a href=&quot;../../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;設定の &lt;code&gt;DjangoTemplates&lt;/code&gt; バックエンドの&lt;a href=&quot;../../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;オプションで指定した任意のディレクトリにすることができます。 &lt;code&gt;'loaders'&lt;/code&gt; オプションをカスタマイズした場合は、 &lt;code&gt;'django.template.loaders.filesystem.Loader'&lt;/code&gt; が &lt;code&gt;'django.template.loaders.app_directories.Loader'&lt;/code&gt; の前に表示されるようにして、カスタムテンプレートがテンプレートローディングシステムによって検出されるようにしてください。&lt;a href=&quot;#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; に&lt;/a&gt;含まれているもの。</target>
        </trans-unit>
        <trans-unit id="6a3a6dec2c344fd808b8bba54d23e18d9e3ffaeb" translate="yes" xml:space="preserve">
          <source>In order to perform IP-based geolocation, the &lt;a href=&quot;#django.contrib.gis.geoip2.GeoIP2&quot;&gt;&lt;code&gt;GeoIP2&lt;/code&gt;&lt;/a&gt; object requires the &lt;a href=&quot;https://pypi.org/project/geoip2/&quot;&gt;geoip2 Python library&lt;/a&gt; and the GeoIP &lt;code&gt;Country&lt;/code&gt; and/or &lt;code&gt;City&lt;/code&gt;&lt;a href=&quot;https://dev.maxmind.com/geoip/geoip2/geolite2/&quot;&gt;datasets in binary format&lt;/a&gt; (the CSV files will not work!). Grab the &lt;code&gt;GeoLite2-Country.mmdb.gz&lt;/code&gt; and &lt;code&gt;GeoLite2-City.mmdb.gz&lt;/code&gt; files and unzip them in a directory corresponding to the &lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt;&lt;code&gt;GEOIP_PATH&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">IPベースの地理位置情報を実行するには、&lt;a href=&quot;#django.contrib.gis.geoip2.GeoIP2&quot;&gt; &lt;code&gt;GeoIP2&lt;/code&gt; &lt;/a&gt;オブジェクトに&lt;a href=&quot;https://pypi.org/project/geoip2/&quot;&gt;geoip2 Pythonライブラリ&lt;/a&gt;と&lt;a href=&quot;https://dev.maxmind.com/geoip/geoip2/geolite2/&quot;&gt;バイナリ形式&lt;/a&gt;のGeoIP &lt;code&gt;Country&lt;/code&gt; および/または &lt;code&gt;City&lt;/code&gt; データセットが必要です（CSVファイルは機能しません！）。グラブ &lt;code&gt;GeoLite2-Country.mmdb.gz&lt;/code&gt; と &lt;code&gt;GeoLite2-City.mmdb.gz&lt;/code&gt; ファイルに対応するディレクトリに解凍してください&lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt; &lt;code&gt;GEOIP_PATH&lt;/code&gt; の&lt;/a&gt;設定。</target>
        </trans-unit>
        <trans-unit id="95a595d960799ba8b0ca87e797be6ea493f08f8d" translate="yes" xml:space="preserve">
          <source>In order to perform URL reversing, you&amp;rsquo;ll need to use &lt;strong&gt;named URL patterns&lt;/strong&gt; as done in the examples above. The string used for the URL name can contain any characters you like. You are not restricted to valid Python names.</source>
          <target state="translated">URL反転を実行するには、上記の例で行ったように&lt;strong&gt;名前付きURLパターン&lt;/strong&gt;を使用する必要があります。URL名に使用する文字列には、任意の文字を含めることができます。有効なPython名に制限されません。</target>
        </trans-unit>
        <trans-unit id="6a68fede8724820357864706cab00502d65622e6" translate="yes" xml:space="preserve">
          <source>In order to protect against &lt;a href=&quot;http://breachattack.com/&quot;&gt;BREACH&lt;/a&gt; attacks, the token is not simply the secret; a random salt is prepended to the secret and used to scramble it.</source>
          <target state="translated">&lt;a href=&quot;http://breachattack.com/&quot;&gt;侵害&lt;/a&gt;攻撃から保護するために、トークンは単なる秘密ではありません。ランダムな塩が秘密に追加され、それをスクランブルするために使用されます。</target>
        </trans-unit>
        <trans-unit id="655aa485065fe0aea8855d7ccc45fba32956ce48" translate="yes" xml:space="preserve">
          <source>In order to resolve this ticket, we&amp;rsquo;ll add a &lt;code&gt;make_toast()&lt;/code&gt; function to the top-level &lt;code&gt;django&lt;/code&gt; module. First we are going to write a test that tries to use the function and check that its output looks correct.</source>
          <target state="translated">このチケットを解決するために、トップレベルの &lt;code&gt;django&lt;/code&gt; モジュールに &lt;code&gt;make_toast()&lt;/code&gt; 関数を追加します。最初に、関数を使用してその出力が正しいことを確認するテストを記述します。</target>
        </trans-unit>
        <trans-unit id="f0a5f481c3502942e7d16bcd7a3cc304c2eefa6a" translate="yes" xml:space="preserve">
          <source>In order to restore the database state between tests for &lt;code&gt;TransactionTestCase&lt;/code&gt;s and database backends without transactions, Django will &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;serialize the contents of all apps&lt;/a&gt; when it starts the test run so it can then reload from that copy before running tests that need it.</source>
          <target state="translated">&lt;code&gt;TransactionTestCase&lt;/code&gt; のテストとトランザクションなしのデータベースバックエンドの間でデータベースの状態を復元するために、Djangoは、テストの実行を開始&lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;する&lt;/a&gt;ときにすべてのアプリのコンテンツをシリアル化するため、必要なテストを実行する前にそのコピーからリロードできます。</target>
        </trans-unit>
        <trans-unit id="f0343766ff0b17d92d018f4427983d376ae25e60" translate="yes" xml:space="preserve">
          <source>In order to send email, Django requires a few settings telling it how to connect to your mail server. At the very least, you&amp;rsquo;ll need to specify &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt; and possibly &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt;&lt;code&gt;EMAIL_HOST_USER&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt;&lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt;&lt;/a&gt;, though other settings may be also required depending on your mail server&amp;rsquo;s configuration. Consult &lt;a href=&quot;../ref/settings&quot;&gt;the Django settings documentation&lt;/a&gt; for a full list of email-related settings.</source>
          <target state="translated">メールを送信するには、Djangoにメールサーバーへの接続方法を指示するいくつかの設定が必要です。少なくとも、&lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; &lt;/a&gt;と、場合によっては&lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt; &lt;code&gt;EMAIL_HOST_USER&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt; &lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt; &lt;/a&gt;を指定する必要がありますが、メールサーバーの構成によっては他の設定も必要になる場合があります。相談する&lt;a href=&quot;../ref/settings&quot;&gt;Djangoの設定文書を&lt;/a&gt;電子メール関連の設定の完全なリストについて。</target>
        </trans-unit>
        <trans-unit id="26a276856b644a8829e847fabc786f7f950cbafe" translate="yes" xml:space="preserve">
          <source>In order to serialize objects other than &lt;code&gt;dict&lt;/code&gt; you must set the &lt;code&gt;safe&lt;/code&gt; parameter to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dict&lt;/code&gt; 以外のオブジェクトをシリアル化するには、 &lt;code&gt;safe&lt;/code&gt; パラメータを &lt;code&gt;False&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="bef01765dc926124667e6f25f418d12592815fda" translate="yes" xml:space="preserve">
          <source>In order to serve different sites in production, you&amp;rsquo;d create a separate settings file with each &lt;code&gt;SITE_ID&lt;/code&gt; (perhaps importing from a common settings file to avoid duplicating shared settings) and then specify the appropriate &lt;a href=&quot;../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; for each site.</source>
          <target state="translated">本番環境のさまざまなサイトにサービスを提供するには、各 &lt;code&gt;SITE_ID&lt;/code&gt; で個別の設定ファイルを作成し（おそらく共通設定ファイルからインポートして、共有設定の重複を回避する）、各サイトに適切な&lt;a href=&quot;../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt;を指定します。</target>
        </trans-unit>
        <trans-unit id="f1fc64af07066814f008513d76447706a68a9ba2" translate="yes" xml:space="preserve">
          <source>In order to show customized HTML when Django returns a 404, you can create an HTML template named &lt;code&gt;404.html&lt;/code&gt; and place it in the top level of your template tree. This template will then be served when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">Djangoが404を返すときにカスタマイズされたHTMLを表示するには、 &lt;code&gt;404.html&lt;/code&gt; という名前のHTMLテンプレートを作成して、テンプレートツリーの最上位に配置できます。このテンプレートは、&lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; に設定されている場合に提供されます。</target>
        </trans-unit>
        <trans-unit id="3409046afa59c093b23889795e8442232cd66efe" translate="yes" xml:space="preserve">
          <source>In order to test class-based views outside of the request/response cycle you must ensure that they are configured correctly, by calling &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; after instantiation.</source>
          <target state="translated">要求/応答サイクルの外でクラスベースのビューをテストするには、インスタンス化の後に&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.setup&quot;&gt; &lt;code&gt;setup()&lt;/code&gt; を&lt;/a&gt;呼び出して、ビューが正しく構成されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="8c0c7c490993a4b8206ebaa2bae3d78e513a3e92" translate="yes" xml:space="preserve">
          <source>In order to understand what happens in your query, consider inspecting the &lt;code&gt;query&lt;/code&gt; property of your &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">クエリで何が起こるかを理解するには、 &lt;code&gt;QuerySet&lt;/code&gt; の &lt;code&gt;query&lt;/code&gt; プロパティを調べることを検討してください。</target>
        </trans-unit>
        <trans-unit id="c570b617951053ed3053b9d4c9a52cb627915e3e" translate="yes" xml:space="preserve">
          <source>In order to use GeoDjango, you will need to add your Python and OSGeo4W directories to your Windows system &lt;code&gt;Path&lt;/code&gt;, as well as create &lt;code&gt;GDAL_DATA&lt;/code&gt; and &lt;code&gt;PROJ_LIB&lt;/code&gt; environment variables. The following set of commands, executable with &lt;code&gt;cmd.exe&lt;/code&gt;, will set this up:</source>
          <target state="translated">GeoDjangoを使用するには、PythonおよびOSGeo4WディレクトリをWindowsシステムの &lt;code&gt;Path&lt;/code&gt; に追加し、 &lt;code&gt;GDAL_DATA&lt;/code&gt; および &lt;code&gt;PROJ_LIB&lt;/code&gt; 環境変数を作成する必要があります。次のコマンドセットは、 &lt;code&gt;cmd.exe&lt;/code&gt; で実行可能で、これをセットアップします。</target>
        </trans-unit>
        <trans-unit id="ded6a8537ff07979ac6a5c88d86c82670bed0de7" translate="yes" xml:space="preserve">
          <source>In order to use another client-side library to handle translations, you may want to take advantage of the &lt;code&gt;JSONCatalog&lt;/code&gt; view. It&amp;rsquo;s similar to &lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt;&lt;code&gt;JavaScriptCatalog&lt;/code&gt;&lt;/a&gt; but returns a JSON response.</source>
          <target state="translated">別のクライアント側ライブラリを使用して翻訳を処理するには、 &lt;code&gt;JSONCatalog&lt;/code&gt; ビューを利用することができます。&lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt; &lt;code&gt;JavaScriptCatalog&lt;/code&gt; に&lt;/a&gt;似ていますが、JSON応答を返します。</target>
        </trans-unit>
        <trans-unit id="68a8c6184d43fa10d946434ba4ead136463b3827" translate="yes" xml:space="preserve">
          <source>In order to use the &lt;code&gt;Hand&lt;/code&gt; class in our models, we &lt;strong&gt;do not&lt;/strong&gt; have to change this class at all. This is ideal, because it means you can easily write model support for existing classes where you cannot change the source code.</source>
          <target state="translated">モデルで &lt;code&gt;Hand&lt;/code&gt; クラスを使用するために、このクラスをまったく変更する&lt;strong&gt;必要は&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。これは、ソースコードを変更できない既存のクラスのモデルサポートを簡単に記述できることを意味するため、理想的です。</target>
        </trans-unit>
        <trans-unit id="482b7e02eb0c4ca18c3f11eba075a9c3cbab0ed5" translate="yes" xml:space="preserve">
          <source>In other words, if you set the name of the database in &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt;, this will take precedence over &lt;a href=&quot;settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;, which would override anything in a &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/option-files.html&quot;&gt;MySQL option file&lt;/a&gt;.</source>
          <target state="translated">つまり、データベースの名前を&lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt;で設定した場合、これは&lt;a href=&quot;settings#std:setting-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;よりも優先され、&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/option-files.html&quot;&gt;MySQLオプションファイル内の&lt;/a&gt;すべてが上書きされます。</target>
        </trans-unit>
        <trans-unit id="348e74db786d501ec367bbeb95b86df85b7e5a62" translate="yes" xml:space="preserve">
          <source>In other words, the usual use is to examine the deserialized objects to make sure that they are &amp;ldquo;appropriate&amp;rdquo; for saving before doing so. Of course, if you trust your data source you can instead save the object directly and move on.</source>
          <target state="translated">言い換えると、通常の使用法は、デシリアライズされたオブジェクトを調べて、保存する前に「適切」であることを確認することです。もちろん、データソースを信頼できる場合は、代わりにオブジェクトを直接保存して次に進むことができます。</target>
        </trans-unit>
        <trans-unit id="87a0055fdb9b686309bb27e57a048438c7379179" translate="yes" xml:space="preserve">
          <source>In other words, to override a command, the new command must have the same name and its app must be before the overridden command&amp;rsquo;s app in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">つまり、コマンドをオーバーライドするには、新しいコマンドの名前が同じであり、そのアプリが&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; で&lt;/a&gt;オーバーライドされたコマンドのアプリの前にある必要があります。</target>
        </trans-unit>
        <trans-unit id="b80ed963edad5d68b67324a7f70c9b908485886a" translate="yes" xml:space="preserve">
          <source>In other words, what&amp;rsquo;s needed is a DRY mechanism. Among other advantages it would allow evolution of the URL design without having to go over all the project source code to search and replace outdated URLs.</source>
          <target state="translated">つまり、必要なのはDRYメカニズムです。他の利点の中でも、古いURLを検索して置き換えるためにすべてのプロジェクトのソースコードを調べなくても、URL設計を進化させることができます。</target>
        </trans-unit>
        <trans-unit id="321459efe8129cd478ea12c0e5f6183e07ff2a01" translate="yes" xml:space="preserve">
          <source>In other words, your applications&amp;rsquo; root packages and the modules that define your application configuration classes shouldn&amp;rsquo;t import any models, even indirectly.</source>
          <target state="translated">つまり、アプリケーションのルートパッケージと、アプリケーション構成クラスを定義するモジュールは、間接的にであっても、モデルをインポートするべきではありません。</target>
        </trans-unit>
        <trans-unit id="87949143eea93ab9a8d8bacabc4b969b2cd76026" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;HandField&lt;/code&gt; class, we&amp;rsquo;re storing the data as a VARCHAR field in the database, so we need to be able to process strings and &lt;code&gt;None&lt;/code&gt; in the &lt;code&gt;from_db_value()&lt;/code&gt;. In &lt;code&gt;to_python()&lt;/code&gt;, we need to also handle &lt;code&gt;Hand&lt;/code&gt; instances:</source>
          <target state="translated">当社では &lt;code&gt;HandField&lt;/code&gt; のクラス、我々は、プロセスの文字列とのことができるようにする必要があるので、データベースのVARCHARフィールドとしてデータを保存している &lt;code&gt;None&lt;/code&gt; で &lt;code&gt;from_db_value()&lt;/code&gt; 。で &lt;code&gt;to_python()&lt;/code&gt; 、我々はまた、処理する必要が &lt;code&gt;Hand&lt;/code&gt; インスタンスを：</target>
        </trans-unit>
        <trans-unit id="8ec59e4ab401ce0ece29fca3cb173154f5ebfc03" translate="yes" xml:space="preserve">
          <source>In our example, we&amp;rsquo;ll call our field &lt;code&gt;HandField&lt;/code&gt;. (It&amp;rsquo;s a good idea to call your &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; subclass &lt;code&gt;&amp;lt;Something&amp;gt;Field&lt;/code&gt;, so it&amp;rsquo;s easily identifiable as a &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; subclass.) It doesn&amp;rsquo;t behave like any existing field, so we&amp;rsquo;ll subclass directly from &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">この例では、フィールドを &lt;code&gt;HandField&lt;/code&gt; と呼びます。（&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;サブクラスを &lt;code&gt;&amp;lt;Something&amp;gt;Field&lt;/code&gt; と呼ぶことをお勧めします。これにより、&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;サブクラスとして簡単に識別できます。）これは、既存のフィールドのように動作しないため、&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;から直接サブクラス化します。</target>
        </trans-unit>
        <trans-unit id="200d03f759a98a5f63a0cca6040dab99cbf456aa" translate="yes" xml:space="preserve">
          <source>In our first test, we focused closely on the internal behavior of the code. For this test, we want to check its behavior as it would be experienced by a user through a web browser.</source>
          <target state="translated">最初のテストでは、コードの内部動作に焦点を当てました。このテストでは、Web ブラウザを介してユーザーが体験するであろう挙動を確認したいと思います。</target>
        </trans-unit>
        <trans-unit id="be3f232c87c2467fa6a724407cf4bb950c14ef61" translate="yes" xml:space="preserve">
          <source>In our poll app, we&amp;rsquo;ll create two models: &lt;code&gt;Question&lt;/code&gt; and &lt;code&gt;Choice&lt;/code&gt;. A &lt;code&gt;Question&lt;/code&gt; has a question and a publication date. A &lt;code&gt;Choice&lt;/code&gt; has two fields: the text of the choice and a vote tally. Each &lt;code&gt;Choice&lt;/code&gt; is associated with a &lt;code&gt;Question&lt;/code&gt;.</source>
          <target state="translated">投票アプリでは、 &lt;code&gt;Question&lt;/code&gt; と &lt;code&gt;Choice&lt;/code&gt; 2つのモデルを作成します。A &lt;code&gt;Question&lt;/code&gt; 、質問と発行日を持っています。A &lt;code&gt;Choice&lt;/code&gt; 任意のテキストと投票集計：2つのフィールドがあります。各 &lt;code&gt;Choice&lt;/code&gt; は &lt;code&gt;Question&lt;/code&gt; 関連付けられています。</target>
        </trans-unit>
        <trans-unit id="8c9571e16932b147d1f1c8511a5d04504310d27a" translate="yes" xml:space="preserve">
          <source>In our poll application, we&amp;rsquo;ll have the following four views:</source>
          <target state="translated">今回の投票アプリケーションでは、次の4つのビューがあります。</target>
        </trans-unit>
        <trans-unit id="bf972e12a966ca6c6eecb8fe6283423f8ce689ac" translate="yes" xml:space="preserve">
          <source>In practice you&amp;rsquo;d probably want to record the interest in a key-value store rather than in a relational database, so we&amp;rsquo;ve left that bit out. The only bit of the view that needs to worry about using &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; is where we want to look up the author we&amp;rsquo;re interested in, which it does with a call to &lt;code&gt;self.get_object()&lt;/code&gt;. Everything else is taken care of for us by the mixin.</source>
          <target state="translated">実際には、関心をリレーショナルデータベースではなく、キーと値のストアに記録する必要があるので、ここでは省略します。&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; の&lt;/a&gt;使用について心配する必要があるビューの唯一の部分は、関心のある作成者を検索する場所です。これは、 &lt;code&gt;self.get_object()&lt;/code&gt; の呼び出しで行います。それ以外はすべて、mixinによって処理されます。</target>
        </trans-unit>
        <trans-unit id="f5a8cc8880a64d6f073c4d7908bd6dba8d796910" translate="yes" xml:space="preserve">
          <source>In practice you&amp;rsquo;ll use this to get a string you can use in multiple places in a template or so you can use the output as an argument for other template tags or filters.</source>
          <target state="translated">実際には、これを使用して、テンプレートの複数の場所で使用できる文字列を取得するか、出力を他のテンプレートタグまたはフィルターの引数として使用できます。</target>
        </trans-unit>
        <trans-unit id="b07696c8063df15fbf4c588d34e006df6dbe3901" translate="yes" xml:space="preserve">
          <source>In practice you&amp;rsquo;ll use this to get a string you can use in multiple places in a template or so you can use the output as an argument for other template tags or filters:</source>
          <target state="translated">実際には、これを使用して、テンプレート内の複数の場所で使用できる文字列を取得するか、出力を他のテンプレートタグまたはフィルターの引数として使用できます。</target>
        </trans-unit>
        <trans-unit id="d297ccfa88b8ebaa61778e3119442058ee0cb9c0" translate="yes" xml:space="preserve">
          <source>In practice, it&amp;rsquo;s often easiest to use &lt;code&gt;chunks()&lt;/code&gt; all the time. Looping over &lt;code&gt;chunks()&lt;/code&gt; instead of using &lt;code&gt;read()&lt;/code&gt; ensures that large files don&amp;rsquo;t overwhelm your system&amp;rsquo;s memory.</source>
          <target state="translated">実際には、多くの場合、常に &lt;code&gt;chunks()&lt;/code&gt; を使用するのが最も簡単です。 &lt;code&gt;read()&lt;/code&gt; を使用する代わりに &lt;code&gt;chunks()&lt;/code&gt; でループすることにより、大きなファイルがシステムのメモリを圧迫しないようにします。</target>
        </trans-unit>
        <trans-unit id="1b8e788eb6f744c88e1daabbf412406627452a09" translate="yes" xml:space="preserve">
          <source>In practice, signal handlers are usually defined in a &lt;code&gt;signals&lt;/code&gt; submodule of the application they relate to. Signal receivers are connected in the &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method of your application configuration class. If you&amp;rsquo;re using the &lt;a href=&quot;#django.dispatch.receiver&quot;&gt;&lt;code&gt;receiver()&lt;/code&gt;&lt;/a&gt; decorator, import the &lt;code&gt;signals&lt;/code&gt; submodule inside &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実際には、シグナルハンドラーは通常、関連するアプリケーションの &lt;code&gt;signals&lt;/code&gt; サブモジュールで定義されます。シグナルレシーバーは、アプリケーション構成クラスの&lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt;メソッドで接続されます。&lt;a href=&quot;#django.dispatch.receiver&quot;&gt; &lt;code&gt;receiver()&lt;/code&gt; &lt;/a&gt;デコレーターを使用している場合は、&lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt;内に &lt;code&gt;signals&lt;/code&gt; サブモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="5e303b3791ba00ba2f2730c84ffcba41b1b0fece" translate="yes" xml:space="preserve">
          <source>In practice, this feature wraps every view function in the &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; decorator described below.</source>
          <target state="translated">実際には、この機能は、以下に説明する&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;デコレーターのすべてのビュー関数をラップします。</target>
        </trans-unit>
        <trans-unit id="807d6a79df3e61ec95aafb0098dd4efac1e3da72" translate="yes" xml:space="preserve">
          <source>In practice, this is rarely an issue. Django gives you aware datetime objects in the models and forms, and most often, new datetime objects are created from existing ones through &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; arithmetic. The only datetime that&amp;rsquo;s often created in application code is the current time, and &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;timezone.now()&lt;/code&gt;&lt;/a&gt; automatically does the right thing.</source>
          <target state="translated">実際には、これが問題になることはほとんどありません。Djangoはモデルとフォーム内の日時オブジェクトを認識します。ほとんどの場合、新しい日時オブジェクトは既存のオブジェクトから&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;演算によって作成されます。アプリケーションコードで頻繁に作成される唯一の日時は現在の時刻であり、&lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;timezone.now()&lt;/code&gt; が&lt;/a&gt;自動的に適切な処理を行います。</target>
        </trans-unit>
        <trans-unit id="b637ff00ea296f5217d7753924c94e2a84bd6acf" translate="yes" xml:space="preserve">
          <source>In practice, you probably won&amp;rsquo;t need to use &lt;a href=&quot;#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt; objects on your own, but they&amp;rsquo;re used by Web requests, as explained in the next section.</source>
          <target state="translated">実際には、おそらく自分で&lt;a href=&quot;#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt;オブジェクトを使用する必要はありませんが、次のセクションで説明するように、Webリクエストで使用されます。</target>
        </trans-unit>
        <trans-unit id="05f63b699e28cf435f1bb4b69860a1d658a1a201" translate="yes" xml:space="preserve">
          <source>In practice, you will usually specify &lt;code&gt;request.FILES&lt;/code&gt; as the source of file data (just like you use &lt;code&gt;request.POST&lt;/code&gt; as the source of form data):</source>
          <target state="translated">実際には、通常、 &lt;code&gt;request.FILES&lt;/code&gt; をファイルデータのソースとして指定します（フォームデータのソースとして &lt;code&gt;request.POST&lt;/code&gt; を使用するのと同じです）。</target>
        </trans-unit>
        <trans-unit id="b18791ebd38e85110f995871c6815d3b19ab08ca" translate="yes" xml:space="preserve">
          <source>In previous parts of the tutorial, the templates have been provided with a context that contains the &lt;code&gt;question&lt;/code&gt; and &lt;code&gt;latest_question_list&lt;/code&gt; context variables. For &lt;code&gt;DetailView&lt;/code&gt; the &lt;code&gt;question&lt;/code&gt; variable is provided automatically &amp;ndash; since we&amp;rsquo;re using a Django model (&lt;code&gt;Question&lt;/code&gt;), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is &lt;code&gt;question_list&lt;/code&gt;. To override this we provide the &lt;code&gt;context_object_name&lt;/code&gt; attribute, specifying that we want to use &lt;code&gt;latest_question_list&lt;/code&gt; instead. As an alternative approach, you could change your templates to match the new default context variables &amp;ndash; but it&amp;rsquo;s a lot easier to tell Django to use the variable you want.</source>
          <target state="translated">チュートリアルの前の部分では、テンプレートには、 &lt;code&gt;question&lt;/code&gt; と &lt;code&gt;latest_question_list&lt;/code&gt; コンテキスト変数を含むコンテキストが提供されています。 &lt;code&gt;DetailView&lt;/code&gt; &lt;code&gt;question&lt;/code&gt; 変数が自動的に提供されて-私たちはDjangoのモデル（使用しているので、 &lt;code&gt;Question&lt;/code&gt; ）、Djangoはコンテキスト変数の適切な名前を決定することができます。ただし、ListViewの場合、自動的に生成されるコンテキスト変数は &lt;code&gt;question_list&lt;/code&gt; です。これをオーバーライドするには、 &lt;code&gt;context_object_name&lt;/code&gt; 属性を指定して、 &lt;code&gt;latest_question_list&lt;/code&gt; を使用することを指定します代わりに。別のアプローチとして、テンプレートを変更して新しいデフォルトのコンテキスト変数に一致させることもできますが、必要な変数を使用するようにDjangoに指示する方がはるかに簡単です。</target>
        </trans-unit>
        <trans-unit id="1f6f3aa09d467d54d4f032943cbd599296ba5ef5" translate="yes" xml:space="preserve">
          <source>In previous versions of Django, it was necessary to first annotate and then filter against the annotation. This resulted in the annotated value always being present in the query result, and often resulted in a query that took more time to execute.</source>
          <target state="translated">以前のバージョンの Django では、最初にアノテーションを付けてからアノテーションに対するフィルタリングを行う必要がありました。その結果、アノテーションされた値が常にクエリ結果に存在することになり、クエリの実行に時間がかかることがよくありました。</target>
        </trans-unit>
        <trans-unit id="857c7ad4641da7dfb7c6325f24baaa53cf1e388e" translate="yes" xml:space="preserve">
          <source>In short, when multiple simultaneous requests from the same client are involved, messages are not guaranteed to be delivered to the same window that created them nor, in some cases, at all. Note that this is typically not a problem in most applications and will become a non-issue in HTML5, where each window/tab will have its own browsing context.</source>
          <target state="translated">要するに、同じクライアントからの複数の同時リクエストが関係している場合、メッセージがそれらを作成した同じウィンドウに配信されることは保証されませんし、場合によっては全く配信されないこともあります。これは通常ほとんどのアプリケーションでは問題ではなく、HTML5 では問題にならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c1af56e92f61b1b8ed524de14c455aa50b0aab85" translate="yes" xml:space="preserve">
          <source>In some cases you may wish to dynamically change which &lt;code&gt;Transform&lt;/code&gt; or &lt;code&gt;Lookup&lt;/code&gt; is returned based on the name passed in, rather than fixing it. As an example, you could have a field which stores coordinates or an arbitrary dimension, and wish to allow a syntax like &lt;code&gt;.filter(coords__x7=4)&lt;/code&gt; to return the objects where the 7th coordinate has value 4. In order to do this, you would override &lt;code&gt;get_lookup&lt;/code&gt; with something like:</source>
          <target state="translated">場合によっては、名前を修正するのではなく、渡された名前に基づいて、返される &lt;code&gt;Transform&lt;/code&gt; または &lt;code&gt;Lookup&lt;/code&gt; を動的に変更することができます。例として、座標または任意の次元を格納するフィールドがあり、 &lt;code&gt;.filter(coords__x7=4)&lt;/code&gt; のような構文で7番目の座標の値が4であるオブジェクトを返すことができるようにすることができます。これを行うには、 &lt;code&gt;get_lookup&lt;/code&gt; を次のようにオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="5fdef86b13548e606f863fbd8e30806d3a23d8c0" translate="yes" xml:space="preserve">
          <source>In some cases you might want to capture the result of &lt;code&gt;widthratio&lt;/code&gt; in a variable. It can be useful, for instance, in a &lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktrans&quot;&gt;&lt;code&gt;blocktrans&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">場合によっては、 &lt;code&gt;widthratio&lt;/code&gt; の結果を変数にキャプチャする必要があります。たとえば、&lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktrans&quot;&gt; &lt;code&gt;blocktrans&lt;/code&gt; &lt;/a&gt;ようなblocktransで役立ちます。</target>
        </trans-unit>
        <trans-unit id="1b575c3528640df48c24349d84fecc89450e51b0" translate="yes" xml:space="preserve">
          <source>In some cases you might want to refer to the current value of a cycle without advancing to the next value. To do this, give the &lt;code&gt;{% cycle %}&lt;/code&gt; tag a name, using &amp;ldquo;as&amp;rdquo;, like this:</source>
          <target state="translated">次の値に進まずに、サイクルの現在の値を参照したい場合があります。これを行うには、次のように、「as」を使用して &lt;code&gt;{% cycle %}&lt;/code&gt; タグに名前を付けます。</target>
        </trans-unit>
        <trans-unit id="29c5cbea71be2c58cfaf5424459023b0c9686745" translate="yes" xml:space="preserve">
          <source>In some cases, such as strings with a percent sign followed by a space and a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;string conversion type&lt;/a&gt; (e.g. &lt;code&gt;_(&quot;10% interest&quot;)&lt;/code&gt;), &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; incorrectly flags strings with &lt;code&gt;python-format&lt;/code&gt;.</source>
          <target state="translated">パーセント記号の後にスペースと&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;文字列変換タイプが&lt;/a&gt;続く文字列（例： &lt;code&gt;_(&quot;10% interest&quot;)&lt;/code&gt; &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; &quot;））などの場合、gettext（）は &lt;code&gt;python-format&lt;/code&gt; で文字列に誤ってフラグを付けます。</target>
        </trans-unit>
        <trans-unit id="0daf50f8b596a24cd4a4b70959499e29894a58dc" translate="yes" xml:space="preserve">
          <source>In some cases, you might want to bypass the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable. For example, if you&amp;rsquo;re using the template system by itself, you likely don&amp;rsquo;t want to have to set up an environment variable pointing to a settings module.</source>
          <target state="translated">場合によっては、 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 環境変数をバイパスする必要があります。たとえば、テンプレートシステムを単独で使用している場合、設定モジュールを指す環境変数を設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8dbcdb94c1eff87b6c56ef91c1c4506628f40cf0" translate="yes" xml:space="preserve">
          <source>In some cases, you won&amp;rsquo;t need to register your check function &amp;ndash; you can piggyback on an existing registration.</source>
          <target state="translated">場合によっては、チェック機能を登録する必要はありません。既存の登録を便乗することができます。</target>
        </trans-unit>
        <trans-unit id="8a2f86e668a97029be624ec47a33ad2137608e0e" translate="yes" xml:space="preserve">
          <source>In some circumstances, the code connecting receivers to signals may run multiple times. This can cause your receiver function to be registered more than once, and thus called multiple times for a single signal event.</source>
          <target state="translated">状況によっては、受信機と信号を接続するコードが複数回実行されることがあります。これにより、受信機の機能が複数回登録され、その結果、1つの信号イベントに対して複数回呼び出されることがあります。</target>
        </trans-unit>
        <trans-unit id="79d711a83ce7a924bc3594bf29585bfc7129050d" translate="yes" xml:space="preserve">
          <source>In some complex data-modeling situations, your models might contain a lot of fields, some of which could contain a lot of data (for example, text fields), or require expensive processing to convert them to Python objects. If you are using the results of a queryset in some situation where you don&amp;rsquo;t know if you need those particular fields when you initially fetch the data, you can tell Django not to retrieve them from the database.</source>
          <target state="translated">一部の複雑なデータモデリングの状況では、モデルに多数のフィールドが含まれる場合があり、その一部には大量のデータ（テキストフィールドなど）が含まれる場合や、Pythonオブジェクトに変換するために高価な処理が必要になる場合があります。最初にデータをフェッチするときに特定のフィールドが必要かどうかわからない状況でクエリセットの結果を使用している場合は、データベースから取得しないようにDjangoに指示できます。</target>
        </trans-unit>
        <trans-unit id="2774cd9614848bc838324a9f3925846c843cbd6c" translate="yes" xml:space="preserve">
          <source>In some rare cases, you might wish to pass parameters to the SQL fragments in &lt;code&gt;extra(select=...)&lt;/code&gt;. For this purpose, use the &lt;code&gt;select_params&lt;/code&gt; parameter.</source>
          <target state="translated">まれに、 &lt;code&gt;extra(select=...)&lt;/code&gt; で SQLフラグメントにパラメーターを渡したい場合があります。このためには、 &lt;code&gt;select_params&lt;/code&gt; パラメータを使用します。</target>
        </trans-unit>
        <trans-unit id="4b48e88bf410f2cba633c2cb412176cbfa3a3eb6" translate="yes" xml:space="preserve">
          <source>In some rare circumstances, it&amp;rsquo;s necessary to be able to force the &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method to perform an SQL &lt;code&gt;INSERT&lt;/code&gt; and not fall back to doing an &lt;code&gt;UPDATE&lt;/code&gt;. Or vice-versa: update, if possible, but not insert a new row. In these cases you can pass the &lt;code&gt;force_insert=True&lt;/code&gt; or &lt;code&gt;force_update=True&lt;/code&gt; parameters to the &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method. Passing both parameters is an error: you cannot both insert &lt;em&gt;and&lt;/em&gt; update at the same time!</source>
          <target state="translated">まれな状況では、 &lt;code&gt;UPDATE&lt;/code&gt; の実行にフォールバックせずに、&lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;メソッドでSQL &lt;code&gt;INSERT&lt;/code&gt; を実行できるようにする必要がある場合があります。またはその逆：可能であれば更新しますが、新しい行は挿入しません。これらの場合、 &lt;code&gt;force_insert=True&lt;/code&gt; または &lt;code&gt;force_update=True&lt;/code&gt; パラメータを&lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;メソッドに渡すことができます。両方のパラメーターを渡すとエラーになります。同時に挿入&lt;em&gt;と&lt;/em&gt;更新の両方を行うことはできません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ce736764b432a2fae47c89320e8e9fd2392f9dd8" translate="yes" xml:space="preserve">
          <source>In some scenarios where views are of a generic nature, a many-to-one relationship might exist between URLs and views. For these cases the view name isn&amp;rsquo;t a good enough identifier for it when comes the time of reversing URLs. Read the next section to know about the solution Django provides for this.</source>
          <target state="translated">ビューが一般的な性質を持ついくつかのシナリオでは、URLとビューの間に多対1の関係が存在する場合があります。これらの場合、URLを逆にするときに、ビュー名だけでは十分な識別子ではありません。Djangoがこれに対して提供するソリューションについて知るには、次のセクションを読んでください。</target>
        </trans-unit>
        <trans-unit id="b1e5d19e9d9d33f10b0a69c92fa82b62a739e1d4" translate="yes" xml:space="preserve">
          <source>In statement 1, a new &lt;code&gt;Person&lt;/code&gt; object is saved to the &lt;code&gt;first&lt;/code&gt; database. At this time, &lt;code&gt;p&lt;/code&gt; doesn&amp;rsquo;t have a primary key, so Django issues an SQL &lt;code&gt;INSERT&lt;/code&gt; statement. This creates a primary key, and Django assigns that primary key to &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">ステートメント1では、新しい &lt;code&gt;Person&lt;/code&gt; オブジェクトが &lt;code&gt;first&lt;/code&gt; データベースに保存されます。現時点では、 &lt;code&gt;p&lt;/code&gt; には主キーがないため、DjangoはSQL &lt;code&gt;INSERT&lt;/code&gt; ステートメントを発行します。これにより主キーが作成され、Djangoはその主キーを &lt;code&gt;p&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="e064abd9ffdc8b00766db1b2b02b9688bf7b519c" translate="yes" xml:space="preserve">
          <source>In templates: Using the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag.</source>
          <target state="translated">テンプレートの場合：&lt;a href=&quot;../../ref/templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;テンプレートタグを使用します。</target>
        </trans-unit>
        <trans-unit id="cfdab87bc82efd3797239c4ba21d1d79e927c429" translate="yes" xml:space="preserve">
          <source>In that &lt;code&gt;register.inclusion_tag()&lt;/code&gt; line, we specified &lt;code&gt;takes_context=True&lt;/code&gt; and the name of the template. Here&amp;rsquo;s what the template &lt;code&gt;link.html&lt;/code&gt; might look like:</source>
          <target state="translated">その &lt;code&gt;register.inclusion_tag()&lt;/code&gt; 行で、 &lt;code&gt;takes_context=True&lt;/code&gt; とテンプレートの名前を指定しました。テンプレート &lt;code&gt;link.html&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="67c01f0adefa1043d3003b730cd2f663f4b756b7" translate="yes" xml:space="preserve">
          <source>In that form, the &amp;ldquo;Question&amp;rdquo; field is a select box containing every question in the database. Django knows that a &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; should be represented in the admin as a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; box. In our case, only one question exists at this point.</source>
          <target state="translated">そのフォームでは、「質問」フィールドはデータベース内のすべての質問を含む選択ボックスです。Djangoは、&lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;を管理者の &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; ボックスとして表す必要があることを認識しています。この場合、この時点で存在する質問は1つだけです。</target>
        </trans-unit>
        <trans-unit id="e16803d7e5444774cf1847606a924ea98fc0f9ff" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;#built-in-field-classes&quot;&gt;built-in Field classes&lt;/a&gt; section below, each &lt;code&gt;Field&lt;/code&gt; defines the error message keys it uses.</source>
          <target state="translated">以下の&lt;a href=&quot;#built-in-field-classes&quot;&gt;組み込みフィールドクラスの&lt;/a&gt;セクションでは、各 &lt;code&gt;Field&lt;/code&gt; 使用するエラーメッセージキーを定義します。</target>
        </trans-unit>
        <trans-unit id="4b8de39169c018ef000a9984f73650a25eb94d98" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;authentication framework&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;django.contrib.auth.views.LoginView&lt;/code&gt;&lt;/a&gt; passes the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; name to the template as &lt;code&gt;{{ site_name }}&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;authentication framework&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt; &lt;code&gt;django.contrib.auth.views.LoginView&lt;/code&gt; は&lt;/a&gt;電流を流す&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;としてテンプレートに名前を &lt;code&gt;{{ site_name }}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f38cdaf92023e3d5b6ad536a62d5ac0850443cb2" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../ref/contrib/admin/admindocs#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;django.contrib.admindocs&lt;/code&gt;&lt;/a&gt; display, the field description is interpolated with &lt;code&gt;field.__dict__&lt;/code&gt; which allows the description to incorporate arguments of the field. For example, the description for &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">で&lt;a href=&quot;../ref/contrib/admin/admindocs#module-django.contrib.admindocs&quot;&gt; &lt;code&gt;django.contrib.admindocs&lt;/code&gt; の&lt;/a&gt;表示、フィールドの説明を用いて補間される &lt;code&gt;field.__dict__&lt;/code&gt; 説明フィールドの引数を組み込むことを可能にします。たとえば、&lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;の説明は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="61a99f888da03252e37a49dc94b253027356d243" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;flatpages#module-django.contrib.flatpages&quot;&gt;&lt;code&gt;flatpages framework&lt;/code&gt;&lt;/a&gt;, each flatpage is associated with a particular site. When a flatpage is created, you specify its &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;flatpages#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; checks the current site in retrieving flatpages to display.</source>
          <target state="translated">&lt;a href=&quot;flatpages#module-django.contrib.flatpages&quot;&gt; &lt;code&gt;flatpages framework&lt;/code&gt; &lt;/a&gt;、各フラットページは、特定のサイトに関連付けられています。フラットページを作成するときは、その指定した&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;、そして&lt;a href=&quot;flatpages#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; は、&lt;/a&gt;ディスプレイににflatpagesを検索する際に現在のサイトをチェックします。</target>
        </trans-unit>
        <trans-unit id="ab0e7037c1bb990ccc8f0010f58edfb9050005ab" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;redirects#module-django.contrib.redirects&quot;&gt;&lt;code&gt;redirects framework&lt;/code&gt;&lt;/a&gt;, each redirect object is associated with a particular site. When Django searches for a redirect, it takes into account the current site.</source>
          <target state="translated">&lt;a href=&quot;redirects#module-django.contrib.redirects&quot;&gt; &lt;code&gt;redirects framework&lt;/code&gt; &lt;/a&gt;、各リダイレクトオブジェクトが特定のサイトに関連付けられています。Djangoがリダイレクトを検索するとき、現在のサイトを考慮に入れます。</target>
        </trans-unit>
        <trans-unit id="e00c865684c73ed393c739c654ec70b0bd8e2997" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;syndication#module-django.contrib.syndication&quot;&gt;&lt;code&gt;syndication framework&lt;/code&gt;&lt;/a&gt;, the templates for &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; automatically have access to a variable &lt;code&gt;{{ site }}&lt;/code&gt;, which is the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object representing the current site. Also, the hook for providing item URLs will use the &lt;code&gt;domain&lt;/code&gt; from the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object if you don&amp;rsquo;t specify a fully-qualified domain.</source>
          <target state="translated">&lt;a href=&quot;syndication#module-django.contrib.syndication&quot;&gt; &lt;code&gt;syndication framework&lt;/code&gt; &lt;/a&gt;のためのテンプレート &lt;code&gt;title&lt;/code&gt; および &lt;code&gt;description&lt;/code&gt; 自動的に変数へのアクセス持って &lt;code&gt;{{ site }}&lt;/code&gt; であり、&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;現在のサイトを表すオブジェクト。また、完全修飾ドメインを指定しない場合、アイテムURLを提供するためのフックは、現在の&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;domain&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3cae9da1a42439d27f7e2fc7772d9140895ca585" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;as_p()&lt;/code&gt;, &lt;code&gt;as_ul()&lt;/code&gt; and &lt;code&gt;as_table()&lt;/code&gt; shortcuts, the fields are displayed in the order in which you define them in your form class. For example, in the &lt;code&gt;ContactForm&lt;/code&gt; example, the fields are defined in the order &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;sender&lt;/code&gt;, &lt;code&gt;cc_myself&lt;/code&gt;. To reorder the HTML output, change the order in which those fields are listed in the class.</source>
          <target state="translated">で &lt;code&gt;as_p()&lt;/code&gt; 、 &lt;code&gt;as_ul()&lt;/code&gt; と &lt;code&gt;as_table()&lt;/code&gt; のショートカット、フィールドは、あなたのフォームクラスで定義した順序で表示されます。たとえば、 &lt;code&gt;ContactForm&lt;/code&gt; の例では、フィールドは、 &lt;code&gt;subject&lt;/code&gt; 、 &lt;code&gt;message&lt;/code&gt; 、 &lt;code&gt;sender&lt;/code&gt; 、 &lt;code&gt;cc_myself&lt;/code&gt; の順に定義されています。HTML出力を並べ替えるには、これらのフィールドがクラスにリストされる順序を変更します。</target>
        </trans-unit>
        <trans-unit id="6ca61b57511e0384cfa193f4c62191a0072117aa" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;fixtures&lt;/code&gt; directory of every installed application</source>
          <target state="translated">で &lt;code&gt;fixtures&lt;/code&gt; すべてのインストール済みアプリケーションのディレクトリ</target>
        </trans-unit>
        <trans-unit id="c2e20542720527ab7cf07a8cbe445b23385b59fc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;polls/urls.py&lt;/code&gt; file include the following code:</source>
          <target state="translated">では &lt;code&gt;polls/urls.py&lt;/code&gt; ファイル次のコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="7e79d1c3816db22dfa49e704e2e1e701d76541a2" translate="yes" xml:space="preserve">
          <source>In the GitHub scenario, the session cookie would be allowed when following a regular link from an external website and be blocked in CSRF-prone request methods (e.g. &lt;code&gt;POST&lt;/code&gt;).</source>
          <target state="translated">GitHubシナリオでは、外部のWebサイトからの通常のリンクをたどるとセッションCookieが許可され、CSRFが発生しやすいリクエストメソッド（ &lt;code&gt;POST&lt;/code&gt; など）でブロックされます。</target>
        </trans-unit>
        <trans-unit id="a35e39704ca75e16ec151ec02bb8d09c5245b059" translate="yes" xml:space="preserve">
          <source>In the SQL standards, each SQL query starts a transaction, unless one is already active. Such transactions must then be explicitly committed or rolled back.</source>
          <target state="translated">SQL標準では、各SQLクエリは、既にアクティブなトランザクションがない限り、トランザクションを開始します。そのようなトランザクションは、明示的にコミットされるかロールバックされなければなりません。</target>
        </trans-unit>
        <trans-unit id="d85d9726aad9b5761b698a91a3fa752dcf0b2bef" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;{{ section.title }}&lt;/code&gt; will be replaced with the &lt;code&gt;title&lt;/code&gt; attribute of the &lt;code&gt;section&lt;/code&gt; object.</source>
          <target state="translated">上記の例では、 &lt;code&gt;{{ section.title }}&lt;/code&gt; は &lt;code&gt;section&lt;/code&gt; オブジェクトの &lt;code&gt;title&lt;/code&gt; 属性に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="c8e400b0450098c588ff1bf9ef3ced42847e2189" translate="yes" xml:space="preserve">
          <source>In the above example, both URL patterns point to the same view &amp;ndash; &lt;code&gt;views.page&lt;/code&gt; &amp;ndash; but the first pattern doesn&amp;rsquo;t capture anything from the URL. If the first pattern matches, the &lt;code&gt;page()&lt;/code&gt; function will use its default argument for &lt;code&gt;num&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;. If the second pattern matches, &lt;code&gt;page()&lt;/code&gt; will use whatever &lt;code&gt;num&lt;/code&gt; value was captured.</source>
          <target state="translated">上記の例では、両方のURLパターンが同じビュー（ &lt;code&gt;views.page&lt;/code&gt; )を指していますが、最初のパターンはURLから何もキャプチャしません。第一のパターンが一致した場合、 &lt;code&gt;page()&lt;/code&gt; 関数は、そのデフォルト引数を使用します &lt;code&gt;num&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; 。2番目のパターンが一致した場合、 &lt;code&gt;page()&lt;/code&gt; は取得された &lt;code&gt;num&lt;/code&gt; 値を使用します。</target>
        </trans-unit>
        <trans-unit id="fc33d28f955e8ad2642da30af478dafd323d4ae4" translate="yes" xml:space="preserve">
          <source>In the above example, only the fields &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; will be displayed, sequentially, in the form. &lt;code&gt;fields&lt;/code&gt; can contain values defined in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;ModelAdmin.readonly_fields&lt;/code&gt;&lt;/a&gt; to be displayed as read-only.</source>
          <target state="translated">上記の例では、フィールド &lt;code&gt;url&lt;/code&gt; 、 &lt;code&gt;title&lt;/code&gt; 、 &lt;code&gt;content&lt;/code&gt; のみがフォームに順番に表示されます。 &lt;code&gt;fields&lt;/code&gt; は、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;ModelAdmin.readonly_fields&lt;/code&gt; で&lt;/a&gt;定義された値を含めて、読み取り専用として表示できます。</target>
        </trans-unit>
        <trans-unit id="36256fe1165ee329fa178a898c6d788a746b521c" translate="yes" xml:space="preserve">
          <source>In the above example, the &amp;ldquo;age&amp;rdquo; field will be excluded but the &amp;ldquo;name&amp;rdquo; field will be included in the generated form.</source>
          <target state="translated">上記の例では、「年齢」フィールドは除外されますが、「名前」フィールドは生成されたフォームに含まれます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
