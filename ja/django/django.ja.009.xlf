<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="ansible">
    <body>
      <group id="ansible">
        <trans-unit id="9b8e730b189037d720518429d06c01e1f5b80497" translate="yes" xml:space="preserve">
          <source>In the above example, the &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; exception raised by &lt;code&gt;Model.clean()&lt;/code&gt; was instantiated with a string, so it will be stored in a special error dictionary key, &lt;a href=&quot;../exceptions#django.core.exceptions.NON_FIELD_ERRORS&quot;&gt;&lt;code&gt;NON_FIELD_ERRORS&lt;/code&gt;&lt;/a&gt;. This key is used for errors that are tied to the entire model instead of to a specific field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054e7fb40fa8d67083dfe23cb23e8a33bd7f4a9d" translate="yes" xml:space="preserve">
          <source>In the above example, the captured &lt;code&gt;&quot;username&quot;&lt;/code&gt; variable is passed to the included URLconf, as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4675b3bb9d4b4002a375360f90bfba0c6f91a3" translate="yes" xml:space="preserve">
          <source>In the above example, the methods below will be available on the manager &lt;code&gt;reporter.article_set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ad72df37c0389d2230e3f4d563d496af4f3eea" translate="yes" xml:space="preserve">
          <source>In the above example, the values for the &lt;code&gt;pass_word&lt;/code&gt; and &lt;code&gt;credit_card_number&lt;/code&gt; POST parameters will be hidden and replaced with stars (&lt;code&gt;**********&lt;/code&gt;) in the request&amp;rsquo;s representation inside the error reports, whereas the value of the &lt;code&gt;name&lt;/code&gt; parameter will be disclosed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac0f6907fb81a767b7ad0760c5544c765493d0b" translate="yes" xml:space="preserve">
          <source>In the above example, the values for the &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;pw&lt;/code&gt; and &lt;code&gt;cc&lt;/code&gt; variables will be hidden and replaced with stars (&lt;code&gt;**********&lt;/code&gt;) in the error reports, whereas the value of the &lt;code&gt;name&lt;/code&gt; variable will be disclosed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c13e8f2b17b315a25d1911d4b412a00dfeed073" translate="yes" xml:space="preserve">
          <source>In the above example, we determined that a case insensitive lookup would be more useful. When dealing with non-English names, a further improvement is to use &lt;a href=&quot;../../ref/contrib/postgres/lookups#std:fieldlookup-unaccent&quot;&gt;&lt;code&gt;unaccented comparison&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96e1eae465a596d094ef282c8dc2860d32edcd6" translate="yes" xml:space="preserve">
          <source>In the above example, we set the Atom feed&amp;rsquo;s &lt;code&gt;subtitle&lt;/code&gt; to the RSS feed&amp;rsquo;s &lt;code&gt;description&lt;/code&gt;, because it&amp;rsquo;s quite short already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2be673a5dead01b36c94268ca913e0de459fc31" translate="yes" xml:space="preserve">
          <source>In the above, if &lt;code&gt;athlete_list&lt;/code&gt; is not empty, the number of athletes will be displayed by the &lt;code&gt;{{ athlete_list|length }}&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036bce9d539c951de0462de6ee0b26a612693636" translate="yes" xml:space="preserve">
          <source>In the above, if &lt;code&gt;athlete_list&lt;/code&gt; is not empty, the number of athletes will be displayed by the &lt;code&gt;{{ athlete_list|length }}&lt;/code&gt; variable. Otherwise, if &lt;code&gt;athlete_in_locker_room_list&lt;/code&gt; is not empty, the message &amp;ldquo;Athletes should be out&amp;hellip;&amp;rdquo; will be displayed. If both lists are empty, &amp;ldquo;No athletes.&amp;rdquo; will be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c8c3e595ff8b1404a63e6217e0454048fc6f6a" translate="yes" xml:space="preserve">
          <source>In the above, the &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; tag loads the &lt;code&gt;humanize&lt;/code&gt; tag library, which then makes the &lt;code&gt;intcomma&lt;/code&gt; filter available for use. If you&amp;rsquo;ve enabled &lt;a href=&quot;../contrib/admin/admindocs#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;django.contrib.admindocs&lt;/code&gt;&lt;/a&gt;, you can consult the documentation area in your admin to find the list of custom libraries in your installation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67157a0988cf8fa0ce4d5b9aaad093f942a5bcec" translate="yes" xml:space="preserve">
          <source>In the admin framework, the &amp;ldquo;view on site&amp;rdquo; link uses the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; to work out the domain for the site that it will redirect to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08000b52dbe25a161a365d8c2d097c086b24d380" translate="yes" xml:space="preserve">
          <source>In the beginning there was only the view function contract, Django passed your function an &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; and expected back an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;. This was the extent of what Django provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89eb2f3613635899652ec376acd113c2fd5cfaa7" translate="yes" xml:space="preserve">
          <source>In the case of a model instance that contained no data, it would rarely if ever be useful to do anything with it in a template. On the other hand, it makes perfect sense to render an unpopulated form - that&amp;rsquo;s what we do when we want the user to populate it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ab596a52e2082b97972eb72c42ac13c8c2757e" translate="yes" xml:space="preserve">
          <source>In the command prompt, ensure your virtual environment is active, and execute the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1609a3c27d2c2842f190fe8992b4a57338c73380" translate="yes" xml:space="preserve">
          <source>In the contact form example above, &lt;code&gt;cc_myself&lt;/code&gt; will be a boolean value. Likewise, fields such as &lt;a href=&quot;../../ref/forms/fields#django.forms.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/forms/fields#django.forms.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt; convert values to a Python &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03eed8e02cbc009e5225da6ccd80e31e4e1d6836" translate="yes" xml:space="preserve">
          <source>In the context of a Web application, &amp;lsquo;form&amp;rsquo; might refer to that HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, or to the Django &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; that produces it, or to the structured data returned when it is submitted, or to the end-to-end working collection of these parts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a34903ee3fddd98e21618e22c82cf3333e5c987" translate="yes" xml:space="preserve">
          <source>In the corresponding view functions, ensure that &lt;a href=&quot;templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; is used to render the response so that &lt;code&gt;{% csrf_token %}&lt;/code&gt; will work properly. If you&amp;rsquo;re using the &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; function, generic views, or contrib apps, you are covered already since these all use &lt;code&gt;RequestContext&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1af41ff9f27e5d9ab58cfab85994a63806adce" translate="yes" xml:space="preserve">
          <source>In the event that all the fields you&amp;rsquo;re querying on are contained within one particular model, you can create a functional index which matches the search vector you wish to use. The PostgreSQL documentation has details on &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX&quot;&gt;creating indexes for full text search&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f92ce395efb837fbb0560e8eb518c73b6ff24f" translate="yes" xml:space="preserve">
          <source>In the example &lt;code&gt;Blog&lt;/code&gt; model, the primary key is the &lt;code&gt;id&lt;/code&gt; field, so these three statements are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e4b5bcdcb35cbb0379b289fe1b7eece5458cac" translate="yes" xml:space="preserve">
          <source>In the example above, in the case of a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; relationship, &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;QuerySet.update()&lt;/code&gt;&lt;/a&gt; is used to perform the update. This requires the objects to already be saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ec93e0054e37a606f1e92a3f1d7cada5286c57" translate="yes" xml:space="preserve">
          <source>In the examples given so far, we have constructed filters that compare the value of a model field with a constant. But what if you want to compare the value of a model field with another field on the same model?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982c8f23176116f5070c7936c454b1f26af16ddc" translate="yes" xml:space="preserve">
          <source>In the first empty migration file, add a &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt; operation to generate a unique value (UUID in the example) for each existing row. Also add an import of &lt;code&gt;uuid&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35fd9a39f1807a0c7d83b5f82b050cbd08213f6" translate="yes" xml:space="preserve">
          <source>In the first example, the UTF-8 characters are unquoted. In the second, the percent-encodings remain unchanged because they lie outside the valid UTF-8 range or represent a reserved character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efe90c94b3cf572dcc6da616bffdbfcdf129e44" translate="yes" xml:space="preserve">
          <source>In the first query, the annotation precedes the filter, so the filter has no effect on the annotation. &lt;code&gt;distinct=True&lt;/code&gt; is required to avoid a &lt;a href=&quot;#combining-multiple-aggregations&quot;&gt;query bug&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d275b5cb7fc4b1432c362be17f59a41994939ed" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;ChoiceAdmin&lt;/code&gt; has an autocomplete field for the &lt;code&gt;ForeignKey&lt;/code&gt; to the &lt;code&gt;Question&lt;/code&gt;. The results are filtered by the &lt;code&gt;question_text&lt;/code&gt; field and ordered by the &lt;code&gt;date_created&lt;/code&gt; field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b60a09350bb67bd6b7fee1bd06d1d2f6e595dc" translate="yes" xml:space="preserve">
          <source>In the following example, the cache is shared over Memcached instances running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port 11212), and 172.19.26.244 (port 11213):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774a14ff6afa3b15c21e0e0586425ba89b6281a2" translate="yes" xml:space="preserve">
          <source>In the following example, the distance from the city of Hobart to every other &lt;a href=&quot;model-api#django.contrib.gis.db.models.PointField&quot;&gt;&lt;code&gt;PointField&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;AustraliaCity&lt;/code&gt; queryset is calculated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32f5b020a99c145d62d9c288e0593a7f2c0d978" translate="yes" xml:space="preserve">
          <source>In the following example, the field &lt;code&gt;identifier&lt;/code&gt; is used as the identifying field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0552e596b3c4142a0555d2a338ce81644b342ad7" translate="yes" xml:space="preserve">
          <source>In the following example, we have a migration in &lt;code&gt;app1&lt;/code&gt; which needs to use models in &lt;code&gt;app2&lt;/code&gt;. We aren&amp;rsquo;t concerned with the details of &lt;code&gt;move_m1&lt;/code&gt; other than the fact it will need to access models from both apps. Therefore we&amp;rsquo;ve added a dependency that specifies the last migration of &lt;code&gt;app2&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66feb7cf13c927fdd790d1e911432061cb79c0af" translate="yes" xml:space="preserve">
          <source>In the last case of the above example, we can tell the session object explicitly that it has been modified by setting the &lt;code&gt;modified&lt;/code&gt; attribute on the session object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66e10c8d1fea4f262f45d7c5ee1356b55e39416" translate="yes" xml:space="preserve">
          <source>In the literal path named by the fixture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9418ed20fe28804d3d729bcecdb7de900f9ed0b8" translate="yes" xml:space="preserve">
          <source>In the meantime, for backwards compatibility, the datetime is considered to be in the default time zone, which is generally what you expect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4fb536c73b22ca7075047278fc28ffbc607d147" translate="yes" xml:space="preserve">
          <source>In the method of a class-based view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551cd425acfd8cfac753b72db2384c8e4518bc4e" translate="yes" xml:space="preserve">
          <source>In the multi-table inheritance situation, it doesn&amp;rsquo;t make sense for a child class to inherit from its parent&amp;rsquo;s &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class. All the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; options have already been applied to the parent class and applying them again would normally only lead to contradictory behavior (this is in contrast with the abstract base class case, where the base class doesn&amp;rsquo;t exist in its own right).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb58183bc0706efe78380abe5cb2057a726424ab" translate="yes" xml:space="preserve">
          <source>In the preceding example, the &lt;code&gt;ModelAdmin&lt;/code&gt; class doesn&amp;rsquo;t define any custom values (yet). As a result, the default admin interface will be provided. If you are happy with the default admin interface, you don&amp;rsquo;t need to define a &lt;code&gt;ModelAdmin&lt;/code&gt; object at all &amp;ndash; you can register the model class without providing a &lt;code&gt;ModelAdmin&lt;/code&gt; description. The preceding example could be simplified to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e2b35778a30a864406e14b018f76e39bbabff2" translate="yes" xml:space="preserve">
          <source>In the previous example, &lt;code&gt;do_comment()&lt;/code&gt; discarded everything between &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;. Instead of doing that, it&amp;rsquo;s possible to do something with the code between block tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16349fd6d21ff8a2e6a4c0856997b30ec2b6e166" translate="yes" xml:space="preserve">
          <source>In the rendered HTML, formsets include a prefix on each field&amp;rsquo;s name. By default, the prefix is &lt;code&gt;'form'&lt;/code&gt;, but it can be customized using the formset&amp;rsquo;s &lt;code&gt;prefix&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200e10196ad98eae959477f8c80a67aaf04f93e7" translate="yes" xml:space="preserve">
          <source>In the resulting &lt;code&gt;.po&lt;/code&gt; file, the string will then appear as often as there are different contextual markers for the same string (the context will appear on the &lt;code&gt;msgctxt&lt;/code&gt; line), allowing the translator to give a different translation for each of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f86e54811f7e97ae54dd57549dcb8faa44a8dcb" translate="yes" xml:space="preserve">
          <source>In the same vein as the 404 and 500 views, Django has a view to handle 403 Forbidden errors. If a view results in a 403 exception then Django will, by default, call the view &lt;code&gt;django.views.defaults.permission_denied&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f25c44dc9756ac574ee333e0116c1d550b05f1" translate="yes" xml:space="preserve">
          <source>In the second example, the first filter restricts the queryset to all those blogs linked to entries with &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; in the headline. The second filter restricts the set of blogs &lt;em&gt;further&lt;/em&gt; to those that are also linked to entries that were published in 2008. The entries selected by the second filter may or may not be the same as the entries in the first filter. We are filtering the &lt;code&gt;Blog&lt;/code&gt; items with each filter statement, not the &lt;code&gt;Entry&lt;/code&gt; items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14fb50e61cd86af2c3d8c9d512bc73616482c1e" translate="yes" xml:space="preserve">
          <source>In the simplest case, all these sections get lumped together into one &lt;code&gt;sitemap.xml&lt;/code&gt;, but it&amp;rsquo;s also possible to use the framework to generate a sitemap index that references individual sitemap files, one per section. (See &lt;a href=&quot;#creating-a-sitemap-index&quot;&gt;Creating a sitemap index&lt;/a&gt; below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ac5a12917c8c24fac2334237392eba54ee1052" translate="yes" xml:space="preserve">
          <source>In the simplest case, if no custom pluralization is needed, this returns &lt;code&gt;false&lt;/code&gt; for the integer &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; for all other numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3de0040189995be2cf2593da6e670d68408010" translate="yes" xml:space="preserve">
          <source>In the template &lt;code&gt;list.html&lt;/code&gt;, you can include navigation between pages in the same way as in the template for the &lt;code&gt;ListView&lt;/code&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112593952263d8950c97e9372f1328eef1054b9d" translate="yes" xml:space="preserve">
          <source>In the terminal, we can run our test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1349bc91f2f8bcface3eb94b3617ded0896f7cda" translate="yes" xml:space="preserve">
          <source>In the usual initialization process, the &lt;code&gt;ready&lt;/code&gt; method is only called once by Django. But in some corner cases, particularly in tests which are fiddling with installed applications, &lt;code&gt;ready&lt;/code&gt; might be called more than once. In that case, either write idempotent methods, or put a flag on your &lt;code&gt;AppConfig&lt;/code&gt; classes to prevent re-running code which should be executed exactly one time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b1551e57f5bae10f916d69e9178bd6c7f54504" translate="yes" xml:space="preserve">
          <source>In the view, ensure that you don&amp;rsquo;t include &lt;code&gt;created_by&lt;/code&gt; in the list of fields to edit, and override &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.form_valid&quot;&gt;&lt;code&gt;form_valid()&lt;/code&gt;&lt;/a&gt; to add the user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369aea273c56bb856861501dbf97173cbd5b7309" translate="yes" xml:space="preserve">
          <source>In these cases, Django&amp;rsquo;s admin lets you write and register &amp;ldquo;actions&amp;rdquo; &amp;ndash; functions that get called with a list of objects selected on the change list page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff28e3a2e690b47e59ebb25d9ed8baa34f438420" translate="yes" xml:space="preserve">
          <source>In these cases, you can always access the database directly, routing around the model layer entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbd19f07f9cef20e603e35db722408992fae9b4" translate="yes" xml:space="preserve">
          <source>In these cases, you can configure Django&amp;rsquo;s settings manually. Do this by calling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704de23b31a120b2bba2d3638dd6200c1609b04d" translate="yes" xml:space="preserve">
          <source>In these cases, you can register to receive signals sent only by particular senders. In the case of &lt;a href=&quot;../ref/signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;django.db.models.signals.pre_save&lt;/code&gt;&lt;/a&gt;, the sender will be the model class being saved, so you can indicate that you only want signals sent by some model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7960a550f468b9dc5e94875f3e62a9969b92b99" translate="yes" xml:space="preserve">
          <source>In this above example, the &lt;code&gt;cleaned_data&lt;/code&gt; value for &lt;code&gt;nick_name&lt;/code&gt; is set to an empty string, because &lt;code&gt;nick_name&lt;/code&gt; is &lt;code&gt;CharField&lt;/code&gt;, and &lt;code&gt;CharField&lt;/code&gt;s treat empty values as an empty string. Each field type knows what its &amp;ldquo;blank&amp;rdquo; value is &amp;ndash; e.g., for &lt;code&gt;DateField&lt;/code&gt;, it&amp;rsquo;s &lt;code&gt;None&lt;/code&gt; instead of the empty string. For full details on each field&amp;rsquo;s behavior in this case, see the &amp;ldquo;Empty value&amp;rdquo; note for each field in the &amp;ldquo;Built-in &lt;code&gt;Field&lt;/code&gt; classes&amp;rdquo; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d643c703ff7b79f6479ff9521d4628ae8af455d8" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;poly&lt;/code&gt; is the geographic field, &lt;a href=&quot;geoquerysets#std:fieldlookup-gis-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; is the spatial lookup type, &lt;code&gt;pnt&lt;/code&gt; is the parameter (which may be a &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object or a string of GeoJSON , WKT, or HEXEWKB), and &lt;code&gt;rst&lt;/code&gt; is a &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7445c15f895769d09cc852511696e2bbac4a2530" translate="yes" xml:space="preserve">
          <source>In this case, a caching mechanism (such as Django&amp;rsquo;s own cache middleware) will cache a separate version of the page for each unique user-agent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce53faed5d5616c30db50952cf57b2835a3fdb3" translate="yes" xml:space="preserve">
          <source>In this case, both the tag and the filter will see the translated string, so they don&amp;rsquo;t need to be aware of translations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e088f70ea4095e39b7329f3fd37bb777703e1375" translate="yes" xml:space="preserve">
          <source>In this case, migrations pertaining to the &lt;code&gt;blog&lt;/code&gt; app will be contained in the &lt;code&gt;blog.db_migrations&lt;/code&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0019695fe483255859741edb13cf942f6859d9f" translate="yes" xml:space="preserve">
          <source>In this case, the Apache configuration should look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e37f4fa83a842b83cf7349cedf3295bb5c2ac3" translate="yes" xml:space="preserve">
          <source>In this case, the Oracle backend will use a separate &lt;code&gt;SELECT&lt;/code&gt; query to retrieve &lt;code&gt;AutoField&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec5cb6330ac92777b17bc2333657f1300336af6" translate="yes" xml:space="preserve">
          <source>In this case, the lazy translations in &lt;code&gt;result&lt;/code&gt; will only be converted to strings when &lt;code&gt;result&lt;/code&gt; itself is used in a string (usually at template rendering time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80ae9b1fb32feea2c4dd344be42cee331d89abf" translate="yes" xml:space="preserve">
          <source>In this case, the subquery must only return a single column &lt;em&gt;and&lt;/em&gt; a single row: the email address of the most recently created comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbeb898add7eb688c2d43a04bafad361bbad9894" translate="yes" xml:space="preserve">
          <source>In this case, the subquery must use &lt;a href=&quot;querysets#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; to return only a single column: the primary key of the post.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd746e7696a4d17c8dc094df4d9ebfa894053b5d" translate="yes" xml:space="preserve">
          <source>In this case, what&amp;rsquo;s needed is something - and in practice, often a collection of things - to improve the code&amp;rsquo;s performance without, or only minimally, affecting its behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881194f58bb0fde296017190a9bf68cd84e48df2" translate="yes" xml:space="preserve">
          <source>In this case, you could write the &lt;code&gt;post()&lt;/code&gt; method yourself, keeping &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; as the only generic functionality, although writing &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; handling code involves a lot of duplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6756abb4e1060efdbcbb43826dc10b83e3f6800" translate="yes" xml:space="preserve">
          <source>In this case, you should leave both &lt;a href=&quot;settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-PORT&quot;&gt;&lt;code&gt;PORT&lt;/code&gt;&lt;/a&gt; empty. However, if you don&amp;rsquo;t use a &lt;code&gt;tnsnames.ora&lt;/code&gt; file or a similar naming method and want to connect using the SID (&amp;ldquo;xe&amp;rdquo; in this example), then fill in both &lt;a href=&quot;settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-PORT&quot;&gt;&lt;code&gt;PORT&lt;/code&gt;&lt;/a&gt; like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7de94b0d76d606f984d3f9448c8656b1164ffb9" translate="yes" xml:space="preserve">
          <source>In this case, you&amp;rsquo;d have to create &lt;code&gt;subject.txt&lt;/code&gt; and &lt;code&gt;message.txt&lt;/code&gt; template files for both the LJWorld.com and Lawrence.com template directories. That gives you more flexibility, but it&amp;rsquo;s also more complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fde808145c2d08c0cba263811b659a0d1ffcce9" translate="yes" xml:space="preserve">
          <source>In this code, if the validation error is raised, the form will display an error message at the top of the form (normally) describing the problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffce769628ac27f44d87f42df5862f24acc276dd" translate="yes" xml:space="preserve">
          <source>In this dictionary, the keys are the field names, and the values are lists of strings representing the error messages. The error messages are stored in lists because a field can have multiple error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a623564b4f28f417a216cea862c50164191f61c6" translate="yes" xml:space="preserve">
          <source>In this dictionary, the keys are the field names, which correspond to the attributes in your &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class. The values are the data you&amp;rsquo;re trying to validate. These will usually be strings, but there&amp;rsquo;s no requirement that they be strings; the type of data you pass depends on the &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;, as we&amp;rsquo;ll see in a moment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1587bc0110b474aeaac0785a98f42c3c6c762ba" translate="yes" xml:space="preserve">
          <source>In this document we discuss how to activate, use, and customize Django&amp;rsquo;s admin interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0926719287aa421a1d56b0909a1fc7f781d1d2c" translate="yes" xml:space="preserve">
          <source>In this example the number of objects is passed to the translation languages as the &lt;code&gt;count&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656eac437a8a706f5a50f4706d81cd4556322bcc" translate="yes" xml:space="preserve">
          <source>In this example we specify that the &lt;code&gt;auth.Permission&lt;/code&gt; object with the PK 27 has a foreign key to the &lt;code&gt;contenttypes.ContentType&lt;/code&gt; instance with the PK 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1663e1b601ad090c33e868ff2147fe08cffda3" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;ContactFormWithPriority&lt;/code&gt; contains all the fields from &lt;code&gt;ContactForm&lt;/code&gt;, plus an additional field, &lt;code&gt;priority&lt;/code&gt;. The &lt;code&gt;ContactForm&lt;/code&gt; fields are ordered first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2209b80ce38841507206cfe8aa0b119a7ec9da3b" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;a.save()&lt;/code&gt; will not be undone in the case where &lt;code&gt;b.save()&lt;/code&gt; raises an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1edf53e67d2069bdbedbd1cbf50a2d693ff2e07" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;my_view&lt;/code&gt; will be accessed at &lt;code&gt;/admin/myapp/mymodel/my_view/&lt;/code&gt; (assuming the admin URLs are included at &lt;code&gt;/admin/&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051a23c85ac542ba06c65f27cebe7e4b3a60e68a" translate="yes" xml:space="preserve">
          <source>In this example, Django looks up the URL of the page to which the user will be redirected in the &lt;code&gt;redirect_to&lt;/code&gt; context variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d03cde60eb57ef15a12664d31c7a72da6e28c3" translate="yes" xml:space="preserve">
          <source>In this example, Memcached is available through a local Unix socket file &lt;code&gt;/tmp/memcached.sock&lt;/code&gt; using the &lt;code&gt;python-memcached&lt;/code&gt; binding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433fbee087dcc328bf7db214b22efaf3bd50d02f" translate="yes" xml:space="preserve">
          <source>In this example, Memcached is running on localhost (127.0.0.1) port 11211, using the &lt;code&gt;python-memcached&lt;/code&gt; binding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f133ecf9ca09837434e3890d3cef12ca4fed57" translate="yes" xml:space="preserve">
          <source>In this example, a 404 to any URL ending with &lt;code&gt;.php&lt;/code&gt; or &lt;code&gt;.cgi&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; be reported. Neither will any URL starting with &lt;code&gt;/phpmyadmin/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195054f639f8e715f1022ab811617e165c16a511" translate="yes" xml:space="preserve">
          <source>In this example, a &lt;code&gt;Place&lt;/code&gt; optionally can be a &lt;code&gt;Restaurant&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6756ca7fc7c0d76c6fb4aabb06e2a4158f57b981" translate="yes" xml:space="preserve">
          <source>In this example, a filesystem backend is being configured with a timeout of 60 seconds, and a maximum capacity of 1000 items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c005782eb9d896545ab46f7dff017dd668f6aa" translate="yes" xml:space="preserve">
          <source>In this example, an &lt;code&gt;Article&lt;/code&gt; can be published in multiple &lt;code&gt;Publication&lt;/code&gt; objects, and a &lt;code&gt;Publication&lt;/code&gt; has multiple &lt;code&gt;Article&lt;/code&gt; objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b684f5c5a6b44db149a6fc644abf91fa5ab5f261" translate="yes" xml:space="preserve">
          <source>In this example, default settings are taken from &lt;code&gt;myapp_defaults&lt;/code&gt;, and the &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is set to &lt;code&gt;True&lt;/code&gt;, regardless of its value in &lt;code&gt;myapp_defaults&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4befaaa872f56a0fce53c6c75f7fb67a6d8c1ea" translate="yes" xml:space="preserve">
          <source>In this example, even if &lt;code&gt;generate_relationships()&lt;/code&gt; causes a database error by breaking an integrity constraint, you can execute queries in &lt;code&gt;add_children()&lt;/code&gt;, and the changes from &lt;code&gt;create_parent()&lt;/code&gt; are still there. Note that any operations attempted in &lt;code&gt;generate_relationships()&lt;/code&gt; will already have been rolled back safely when &lt;code&gt;handle_exception()&lt;/code&gt; is called, so the exception handler can also operate on the database if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6ab84b235e4d9ea5612f6a9d9413066aa77f02" translate="yes" xml:space="preserve">
          <source>In this example, every instance of &lt;code&gt;ProtectedView&lt;/code&gt; will have login protection. These examples use &lt;code&gt;login_required&lt;/code&gt;, however, the same behavior can be obtained by using &lt;a href=&quot;../auth/default#django.contrib.auth.mixins.LoginRequiredMixin&quot;&gt;&lt;code&gt;LoginRequiredMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8d54516eb2ddf93c0730193ef9e5ff2275ee15" translate="yes" xml:space="preserve">
          <source>In this example, for a request to &lt;code&gt;/blog/2005/&lt;/code&gt;, Django will call &lt;code&gt;views.year_archive(request, year=2005, foo='bar')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3417d8eb44afe1e1d939759264bc4ffae54889e" translate="yes" xml:space="preserve">
          <source>In this example, only the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; attributes of each model will be serialized. The primary key is always serialized as the &lt;code&gt;pk&lt;/code&gt; element in the resulting output; it never appears in the &lt;code&gt;fields&lt;/code&gt; part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8067d8a8c40ae0f8c2ce14da99d61f4b9966a75a" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tag defines three blocks that child templates can fill in. All the &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tag does is to tell the template engine that a child template may override those portions of the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42619477c811cd44cc02c9355df92668fd6ed4c7" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;/credit/reports/&lt;/code&gt; URL will be handled by the &lt;code&gt;credit_views.report()&lt;/code&gt; Django view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3edfae11bb8f4437ccac4fa556cfddea017145" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;closepoll&lt;/code&gt; command will be made available to any project that includes the &lt;code&gt;polls&lt;/code&gt; application in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be3072a6fd735a0703698b0b6ac3a9cb0c9f9cc" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; fields will be linked on the change list page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b687cca57779b68234d9c0e07d13e5c941f7615" translate="yes" xml:space="preserve">
          <source>In this example, the RSS feed uses a &lt;code&gt;description&lt;/code&gt; while the Atom feed uses a &lt;code&gt;subtitle&lt;/code&gt;. That&amp;rsquo;s because Atom feeds don&amp;rsquo;t provide for a feed-level &amp;ldquo;description,&amp;rdquo; but they &lt;em&gt;do&lt;/em&gt; provide for a &amp;ldquo;subtitle.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b326223d286d7752529ad59f11428b49a503034" translate="yes" xml:space="preserve">
          <source>In this example, the URLs &lt;code&gt;/basic-admin/&lt;/code&gt; and &lt;code&gt;/advanced-admin/&lt;/code&gt; feature separate versions of the admin site &amp;ndash; using the &lt;code&gt;AdminSite&lt;/code&gt; instances &lt;code&gt;myproject.admin.basic_site&lt;/code&gt; and &lt;code&gt;myproject.admin.advanced_site&lt;/code&gt;, respectively:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1064554cbb5e926b7642f639cedf3b4e19ccfaf" translate="yes" xml:space="preserve">
          <source>In this example, the authors will be grouped by name, so you will only get an annotated result for each &lt;em&gt;unique&lt;/em&gt; author name. This means if you have two authors with the same name, their results will be merged into a single result in the output of the query; the average will be computed as the average over the books written by both authors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26653b4dd28f60f5887d535fdd2c41a9be77e80" translate="yes" xml:space="preserve">
          <source>In this example, the cache is shared over Memcached instances running on IP address 172.19.26.240 and 172.19.26.242, both on port 11211:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24eb635a0f8bca996272df8a1c655a9b31f6b71b" translate="yes" xml:space="preserve">
          <source>In this example, the cache table&amp;rsquo;s name is &lt;code&gt;my_cache_table&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17ed15c449f1b9508d8419ce8642c1281f27a87" translate="yes" xml:space="preserve">
          <source>In this example, the call to &lt;code&gt;send_messages()&lt;/code&gt; opens a connection on the backend, sends the list of messages, and then closes the connection again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2745c5bdedd912f241c4ebd64a703e901229f077" translate="yes" xml:space="preserve">
          <source>In this example, the change list page grid will have no links:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0da41921a43787015fac5f5e1c5d1dfecbbf48b" translate="yes" xml:space="preserve">
          <source>In this example, the current time zone is &lt;code&gt;&quot;Europe/Paris&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441f22ede30f09b22a95399dcf5b6f52537098a8" translate="yes" xml:space="preserve">
          <source>In this example, the methods below will be available both on &lt;code&gt;topping.pizza_set&lt;/code&gt; and on &lt;code&gt;pizza.toppings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5a332a5b08e40bbb5f2b850dee9e2b68a4e2cc" translate="yes" xml:space="preserve">
          <source>In this example, the tables generated by the &lt;code&gt;TablespaceExample&lt;/code&gt; model (i.e. the model table and the many-to-many table) would be stored in the &lt;code&gt;tables&lt;/code&gt; tablespace. The index for the name field and the indexes on the many-to-many table would be stored in the &lt;code&gt;indexes&lt;/code&gt; tablespace. The &lt;code&gt;data&lt;/code&gt; field would also generate an index, but no tablespace for it is specified, so it would be stored in the model tablespace &lt;code&gt;tables&lt;/code&gt; by default. The index for the &lt;code&gt;shortcut&lt;/code&gt; field would be stored in the &lt;code&gt;other_indexes&lt;/code&gt; tablespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca22a91ed71c67573ea882082b60373bebf9e7a" translate="yes" xml:space="preserve">
          <source>In this example, the text &lt;code&gt;&quot;Welcome to my site.&quot;&lt;/code&gt; is marked as a translation string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6696a467b231cec398b49a1411c769bd9d20d750" translate="yes" xml:space="preserve">
          <source>In this example, the translation infrastructure will be passed the string &lt;code&gt;&quot;yes,no&quot;&lt;/code&gt;, not the individual strings &lt;code&gt;&quot;yes&quot;&lt;/code&gt; and &lt;code&gt;&quot;no&quot;&lt;/code&gt;. The translated string will need to contain the comma so that the filter parsing code knows how to split up the arguments. For example, a German translator might translate the string &lt;code&gt;&quot;yes,no&quot;&lt;/code&gt; as &lt;code&gt;&quot;ja,nein&quot;&lt;/code&gt; (keeping the comma intact).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd9148aa6186298c2ad7e6285404bb429dd6b93" translate="yes" xml:space="preserve">
          <source>In this example, the verbose name is &lt;code&gt;&quot;first name&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5ca5faa411e0bbd9bffe6ad8e33eefb0319f3a" translate="yes" xml:space="preserve">
          <source>In this example, the verbose name is &lt;code&gt;&quot;person's first name&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55078180e09b52184446a0c7fd9194404890895d" translate="yes" xml:space="preserve">
          <source>In this example, we have both the alternating odd/even rows and a &amp;ldquo;major&amp;rdquo; row every fifth row. Only the five-row cycle is reset when a category changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd8c087e8aa79ac85b5531899e92178206616f9" translate="yes" xml:space="preserve">
          <source>In this example, we make full use of Python generators to efficiently handle the assembly and transmission of a large CSV file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e94a874a9da7d1610ef213a9b49fa74682f884e" translate="yes" xml:space="preserve">
          <source>In this example, we register the default &lt;code&gt;AdminSite&lt;/code&gt; instance &lt;code&gt;django.contrib.admin.site&lt;/code&gt; at the URL &lt;code&gt;/admin/&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba30e2bfdb84c3b1443dd255eac4c58fdcd1e451" translate="yes" xml:space="preserve">
          <source>In this example, you are outputting the week number. Keep in mind that week numbers computed by the &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; template filter with the &lt;code&gt;'W'&lt;/code&gt; format character are not always the same as those computed by &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;'%W'&lt;/code&gt; format string. For year 2015, for example, week numbers output by &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; are higher by one compared to those output by &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt;. There isn&amp;rsquo;t an equivalent for the &lt;code&gt;'%U'&lt;/code&gt;&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format string in &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt;. Therefore, you should avoid using &lt;a href=&quot;../templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; to generate URLs for &lt;code&gt;WeekArchiveView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301b4eda5dbc41617be06964e971e23018f19d78" translate="yes" xml:space="preserve">
          <source>In this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f888816d53389958e26323fa35763774e290599" translate="yes" xml:space="preserve">
          <source>In this particular case, we&amp;rsquo;re exploiting the fact that the query will already contain the &lt;code&gt;blog_blog&lt;/code&gt; table in its &lt;code&gt;FROM&lt;/code&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c635e25207802e9b8c1131ab72188412bc70493" translate="yes" xml:space="preserve">
          <source>In this respect Python is an excellent language to work with, because solutions that look elegant and feel right usually are the best performing ones. As with most skills, learning what &amp;ldquo;looks right&amp;rdquo; takes practice, but one of the most useful guidelines is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53881c3a8d3e6f6e56631aee12040a01b668caef" translate="yes" xml:space="preserve">
          <source>In this setup, we have two database servers: &lt;code&gt;dbprimary&lt;/code&gt;, described by the database alias &lt;code&gt;default&lt;/code&gt;, and &lt;code&gt;dbreplica&lt;/code&gt; described by the alias &lt;code&gt;replica&lt;/code&gt;. As you might expect, &lt;code&gt;dbreplica&lt;/code&gt; has been configured by the database administrator as a read replica of &lt;code&gt;dbprimary&lt;/code&gt;, so in normal activity, any write to &lt;code&gt;default&lt;/code&gt; will appear on &lt;code&gt;replica&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293973f48ca1c4c53c9792048ba09fe823f806d0" translate="yes" xml:space="preserve">
          <source>In this situation, configure your proxy to set a custom HTTP header that tells Django whether the request came in via HTTPS, and set &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; so that Django knows what header to look for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f6d2dd48f330dbd09730efe37d7c3c65c3287e" translate="yes" xml:space="preserve">
          <source>In this situation, if you have implemented per-user time zone selection, the same URL may show a different set of objects, depending on the end user&amp;rsquo;s time zone. To avoid this, you should use a &lt;code&gt;DateField&lt;/code&gt; as the &lt;code&gt;date_field&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef44d4c601df1f07d7990e5f9437d27dcc4746ed" translate="yes" xml:space="preserve">
          <source>In total, this code does either one or zero database queries. The only deliberate optimization performed is the use of the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; tag. Using &lt;code&gt;QuerySet.exists()&lt;/code&gt; or &lt;code&gt;QuerySet.count()&lt;/code&gt; at any point would cause additional queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ea06b2718f0bb4f849e86d964c52e70ab6b065" translate="yes" xml:space="preserve">
          <source>In two lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f07a5a9fed735706d534272971e4af57a8f3b8c" translate="yes" xml:space="preserve">
          <source>In your Django apps, use settings by importing the object &lt;code&gt;django.conf.settings&lt;/code&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4de0d6688c36d088f680cbb25430ee62bb48e4" translate="yes" xml:space="preserve">
          <source>In your custom &lt;code&gt;change_form.html&lt;/code&gt; template, extend the &lt;code&gt;admin_change_form_document_ready&lt;/code&gt; block and add the event listener code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b734d5cfc118650b81e270f434765a1beb09fa63" translate="yes" xml:space="preserve">
          <source>In your development environment, you might need to add a setting to your &lt;code&gt;~.bashrc&lt;/code&gt; analogous to::</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c473b50e514d1dd908d309dc36f50c2ed8dddf5" translate="yes" xml:space="preserve">
          <source>In your live server environment, you&amp;rsquo;ll need to tell your WSGI application what settings file to use. Do that with &lt;code&gt;os.environ&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed392362647aff54ee6ac0528ce6f7de8014467" translate="yes" xml:space="preserve">
          <source>In your project, you might want to override a template in another Django application, whether it be a third-party application or a contrib application such as &lt;code&gt;django.contrib.admin&lt;/code&gt;. You can either put template overrides in your project&amp;rsquo;s templates directory or in an application&amp;rsquo;s templates directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a12842b892881bad40426a045c5fad617b1bbe3" translate="yes" xml:space="preserve">
          <source>In your settings file, define &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75941c62fda2d7b35a20353a643b95a05c2b9c2" translate="yes" xml:space="preserve">
          <source>In your settings file, you&amp;rsquo;ll need to define &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; as the full path to a directory where you&amp;rsquo;d like Django to store uploaded files. (For performance, these files are not stored in the database.) Define &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; as the base public URL of that directory. Make sure that this directory is writable by the Web server&amp;rsquo;s user account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cdcd1cc4d55dae56b1d2cfee7ef0cf20408b5e1" translate="yes" xml:space="preserve">
          <source>In your templates, use the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; template tag to build the URL for the given relative path using the configured &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa1f28d971ef9c1acfb8d6a41ab17e4a43cce39" translate="yes" xml:space="preserve">
          <source>In-memory backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a0469d56bc9db66aaeb7ea407a1f6066a46182" translate="yes" xml:space="preserve">
          <source>Inches</source>
          <target state="translated">Inches</target>
        </trans-unit>
        <trans-unit id="92ae1c082857bc2359cef4eee3e9adb6e79930a9" translate="yes" xml:space="preserve">
          <source>Include a form in &lt;code&gt;template.html&lt;/code&gt; that will &lt;code&gt;POST&lt;/code&gt; to this view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5bcd4f5af4af7b3e7b03ee3a5c43fdeabd48653" translate="yes" xml:space="preserve">
          <source>Include any other hashers that your site uses in this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a6402e7816c5436da28e068f9dc91e58173dc8" translate="yes" xml:space="preserve">
          <source>Included Bookmarklets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce3d5524b93bea9ab2266460800f72716d9f859" translate="yes" xml:space="preserve">
          <source>Included hashers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393381a25f66cacae86f8855d0301ff3d118a3d0" translate="yes" xml:space="preserve">
          <source>Included in this documentation are some additional notes and settings for &lt;a href=&quot;#testing-postgis&quot;&gt;PostGIS&lt;/a&gt; users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416f36f3b39cfe3286b14fc7265572590f159142" translate="yes" xml:space="preserve">
          <source>Included validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f73b9d45841efe90325f2d512a7445ae790a051" translate="yes" xml:space="preserve">
          <source>Includes fuzzy translations into compiled files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa965cef09d97d1ef5c87655479174fe49cd105" translate="yes" xml:space="preserve">
          <source>Includes the following variables and values by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db77cfa106b7fade03dd841cb10c3f59fd348141" translate="yes" xml:space="preserve">
          <source>Includes the single object associated with the &lt;code&gt;model&lt;/code&gt; specified in the &lt;code&gt;DateDetailView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f672b003fa062b2ae7f24fd7e6d5b2f1fc8b02a7" translate="yes" xml:space="preserve">
          <source>Including other URLconfs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef652f3a03486091b244f2e5aba6969067fa768" translate="yes" xml:space="preserve">
          <source>Inclusion tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab18d470d5980c4f161e3f1dcdc1323336093e7e" translate="yes" xml:space="preserve">
          <source>Increase the default timeout value by setting the &lt;code&gt;timeout&lt;/code&gt; database option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da83a55765005fd8539cc415fb563b5f9f3b112" translate="yes" xml:space="preserve">
          <source>Increasing the work factor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ac801d123e5116aad23e6fa38a3f0dd730faee" translate="yes" xml:space="preserve">
          <source>Independent of the value of &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="a1a7b444d54f66bf3ef208aca5c08ddbf9243ac3" translate="yes" xml:space="preserve">
          <source>Index classes ease creating database indexes. They can be added using the &lt;a href=&quot;options#django.db.models.Options.indexes&quot;&gt;&lt;code&gt;Meta.indexes&lt;/code&gt;&lt;/a&gt; option. This document explains the API references of &lt;a href=&quot;#django.db.models.Index&quot;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/a&gt; which includes the &lt;a href=&quot;#index-options&quot;&gt;index options&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630cb288963201f389b4599b06017a143bbdff7d" translate="yes" xml:space="preserve">
          <source>Index concurrent operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacf39e95bea2bf4d4bb9c3175a59647c4e609a3" translate="yes" xml:space="preserve">
          <source>Index lookups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fe21e39f393b7292e040bfa5eeb5abc353fa3a" translate="yes" xml:space="preserve">
          <source>Index transforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66d20d479f4194c5828779ae5fb5b4e7ca288f0" translate="yes" xml:space="preserve">
          <source>Index transforms index into the array. Any non-negative integer can be used. There are no errors if it exceeds the &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField.size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; of the array. The lookups available after the transform are those from the &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField.base_field&quot;&gt;&lt;code&gt;base_field&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c791c51c23a4a229b636e01c1e218aea31fa64e" translate="yes" xml:space="preserve">
          <source>Indexes are defined in &lt;code&gt;django.db.models.indexes&lt;/code&gt;, but for convenience they&amp;rsquo;re imported into &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt;&lt;code&gt;django.db.models&lt;/code&gt;&lt;/a&gt;. The standard convention is to use &lt;code&gt;from django.db import models&lt;/code&gt; and refer to the indexes as &lt;code&gt;models.&amp;lt;IndexClass&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5492137803e97d2ec59c8b75ce29be484b74e635" translate="yes" xml:space="preserve">
          <source>Indexes for &lt;code&gt;varchar&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8499031097e84decc8e22d2abe9aa002f4dcf0" translate="yes" xml:space="preserve">
          <source>Indexing these fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967ce367d89dccc133d71049f1197d29561b3726" translate="yes" xml:space="preserve">
          <source>India</source>
          <target state="translated">India</target>
        </trans-unit>
        <trans-unit id="ba45edb20cfadb09579c8b985c1073d4c123849c" translate="yes" xml:space="preserve">
          <source>Indian yard, Yard (Indian)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69785e2efdbe3fd9756a43b21d0ac286d349fbbb" translate="yes" xml:space="preserve">
          <source>Indicates how much information manage.py is printing on screen. See the &lt;a href=&quot;django-admin#cmdoption-verbosity&quot;&gt;&lt;code&gt;--verbosity&lt;/code&gt;&lt;/a&gt; flag for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805970dc362427509e5d3cf95b1051c9914c44de" translate="yes" xml:space="preserve">
          <source>Indicates if the widget supports edition of 3D data (default is &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46cbd279a17918dbd83258a502286ca2bd179058" translate="yes" xml:space="preserve">
          <source>Indicates which side of the relation is updated (i.e., if it is the forward or reverse relation that is being modified).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dca5d33b20dad0ae7cbe0b7fa53af5a51dfd232" translate="yes" xml:space="preserve">
          <source>Inequality. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb5ed506e4923c28d7f4a8aa69efe99b3ad75d1" translate="yes" xml:space="preserve">
          <source>Information</source>
          <target state="translated">Information</target>
        </trans-unit>
        <trans-unit id="1816bd5301287d48b239d10b6147fb06b838101a" translate="yes" xml:space="preserve">
          <source>Information on handling HTTP requests in Django:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cea99f6c762632c4e20ad0abdccb5ad2c714eda" translate="yes" xml:space="preserve">
          <source>Information on how to test custom management commands can be found in the &lt;a href=&quot;../topics/testing/tools#topics-testing-management-commands&quot;&gt;testing docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2115a89831353cf02274f4bd272538f5346d1232" translate="yes" xml:space="preserve">
          <source>Informational messages for the user</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46fa48661da126122dd9b3dfb56c3771a9fb032e" translate="yes" xml:space="preserve">
          <source>Informs all validators that the password has been changed. This can be used by validators such as one that prevents password reuse. This should be called once the password has been successfully changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263eb8fac3089407415b3cdb49c8a9493a73a913" translate="yes" xml:space="preserve">
          <source>Inheritance and reverse relations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6878b79ae6a11c71f7d933df7a428440301d2cb7" translate="yes" xml:space="preserve">
          <source>Inherited models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7c24fac5cde31e70194fe1a4a3aa31f2b07c59" translate="yes" xml:space="preserve">
          <source>Inherits all attributes and methods from &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;, but also validates that the uploaded object is a valid image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887fae0cd4b77c5cf1709af4daa6acafe51d7270" translate="yes" xml:space="preserve">
          <source>Initial GET (blank or prepopulated form)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7721368c6a2dc340b98e95500c63c71237f0442f" translate="yes" xml:space="preserve">
          <source>Initial data is what drives the main usability of a formset. As shown above you can define the number of extra forms. What this means is that you are telling the formset how many additional forms to show in addition to the number of forms it generates from the initial data. Let&amp;rsquo;s take a look at an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c0a04d6df77feaf647ce05a50a0c853571c221" translate="yes" xml:space="preserve">
          <source>Initial migrations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e03af3824bf96934c0a17f4b42352a2647e0dd2" translate="yes" xml:space="preserve">
          <source>Initial migrations are marked with an &lt;code&gt;initial = True&lt;/code&gt; class attribute on the migration class. If an &lt;code&gt;initial&lt;/code&gt; class attribute isn&amp;rsquo;t found, a migration will be considered &amp;ldquo;initial&amp;rdquo; if it is the first migration in the app (i.e. if it has no dependencies on any other migration in the same app).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fa16ffd48f366e4fa8d57fea78ff03fcab0191" translate="yes" xml:space="preserve">
          <source>Initialization</source>
          <target state="translated">Initialization</target>
        </trans-unit>
        <trans-unit id="92d116105843bf9003a7b0e9c5d9103920d28ee2" translate="yes" xml:space="preserve">
          <source>Initialization process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b82e76b7fa3fb4fd6420171df7d0206986bbce2" translate="yes" xml:space="preserve">
          <source>Initialize the feed with the given dictionary of metadata, which applies to the entire feed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9480d541cf0f3d79a2ff605d8ca16ab4f5519d5" translate="yes" xml:space="preserve">
          <source>Initialize the feed with the given dictionary of metadata, which applies to the entire feed. Required keyword arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe2e11aaa3a8f997f74dd81ca8d4d6be58f2cd0" translate="yes" xml:space="preserve">
          <source>Initializes view instance attributes: &lt;code&gt;self.request&lt;/code&gt;, &lt;code&gt;self.args&lt;/code&gt;, and &lt;code&gt;self.kwargs&lt;/code&gt; prior to &lt;a href=&quot;#django.views.generic.base.View.dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118f0c3c3c959f831d4cc1d8d61816419873fce8" translate="yes" xml:space="preserve">
          <source>Initializing the application registry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5071690b6f4d6be0ab39c8e9e4f4eeece380821" translate="yes" xml:space="preserve">
          <source>Initializing your new field is a matter of separating out any arguments that are specific to your case from the common arguments and passing the latter to the &lt;code&gt;__init__()&lt;/code&gt; method of &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; (or your parent class).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d886046c9901e1b4b70275cfb11b733f494e6dcb" translate="yes" xml:space="preserve">
          <source>Initially, &lt;code&gt;token.split_contents()&lt;/code&gt; will return three values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529d4aa47626f4c94772e3b1b82467e2ef2eb6cd" translate="yes" xml:space="preserve">
          <source>Inline form events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf3973978eed4752c6694e9f74358e333071d2a" translate="yes" xml:space="preserve">
          <source>Inline formsets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0d302d7df51da277cf03650b8f23cfec69c26b" translate="yes" xml:space="preserve">
          <source>Inline formsets is a small abstraction layer on top of model formsets. These simplify the case of working with related objects via a foreign key. Suppose you have these two models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630cbac3ad3755357bd8db01e781e15971700af2" translate="yes" xml:space="preserve">
          <source>Input Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf3025b06979938acb60abd72189ab0d9a5057f" translate="yes" xml:space="preserve">
          <source>Input provided as &lt;code&gt;bytes&lt;/code&gt; has to be a full binary representation of a file. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a1ada76fb843bfdb99e1335ae14865d2ac5754" translate="yes" xml:space="preserve">
          <source>Insert in bulk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd80c7060b33e0b1f9e0160fda71154e20942302" translate="yes" xml:space="preserve">
          <source>Inside a transaction, when a call to a PostgreSQL cursor raises an exception (typically &lt;code&gt;IntegrityError&lt;/code&gt;), all subsequent SQL in the same transaction will fail with the error &amp;ldquo;current transaction is aborted, queries ignored until end of transaction block&amp;rdquo;. While the basic use of &lt;code&gt;save()&lt;/code&gt; is unlikely to raise an exception in PostgreSQL, there are more advanced usage patterns which might, such as saving objects with unique fields, saving using the force_insert/force_update flag, or invoking custom SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb0c4a6cb7cb3bb932f294d1a031cf85801a6f6" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;. The easiest is to use the &lt;a href=&quot;https://pip.pypa.io/en/latest/installing/#installing-with-get-pip-py&quot;&gt;standalone pip installer&lt;/a&gt;. If your distribution already has &lt;code&gt;pip&lt;/code&gt; installed, you might need to update it if it&amp;rsquo;s outdated. If it&amp;rsquo;s outdated, you&amp;rsquo;ll know because installation won&amp;rsquo;t work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc29c34df2441baed48edcc90ffcebae7fe04ea" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;binutils&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac3c52fd90179ef647d10e226a176c33f103069" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;virtualenvwrapper&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb040b8cf2a6c6983deac2a0f9a6884c824aa78" translate="yes" xml:space="preserve">
          <source>Install Apache and &lt;code&gt;mod_wsgi&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fc7c028097e404e54baa7df716c866ba3c3490" translate="yes" xml:space="preserve">
          <source>Install Django</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dde67d172e208f70974e16600e6965108e24dc5" translate="yes" xml:space="preserve">
          <source>Install Django and set up database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a036bec2d3c0cc5544c8102734b803705b65558" translate="yes" xml:space="preserve">
          <source>Install Python</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf77b120c0a9fb034fd4d1bdf0132dbaea450adf" translate="yes" xml:space="preserve">
          <source>Install ReportLab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb1dca81cfa61308cf3a3e61fdb90b4533b0e8c" translate="yes" xml:space="preserve">
          <source>Install a version of Django &lt;a href=&quot;../topics/install#installing-distribution-package&quot;&gt;provided by your operating system distribution&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f0f70c277d5e4aa7ee5a0a8452076bf3a2f640" translate="yes" xml:space="preserve">
          <source>Install gunicorn by running &lt;code&gt;python -m pip install gunicorn&lt;/code&gt;. For more details, see the &lt;a href=&quot;https://docs.gunicorn.org/en/latest/install.html&quot;&gt;gunicorn documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d28aa5c3f5f864624758280797d60a6e8cc60fb" translate="yes" xml:space="preserve">
          <source>Install it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcaca3d75e252ac3de7f251d6d46620471c66363" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;https://pypi.org/project/argon2_cffi/&quot;&gt;argon2-cffi library&lt;/a&gt;. This can be done by running &lt;code&gt;python -m pip install django[argon2]&lt;/code&gt;, which is equivalent to &lt;code&gt;python -m pip install argon2-cffi&lt;/code&gt; (along with any version requirement from Django&amp;rsquo;s &lt;code&gt;setup.py&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e210902fd89fea327be285ade2968e15f65d75d5" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;https://pypi.org/project/bcrypt/&quot;&gt;bcrypt library&lt;/a&gt;. This can be done by running &lt;code&gt;python -m pip install django[bcrypt]&lt;/code&gt;, which is equivalent to &lt;code&gt;python -m pip install bcrypt&lt;/code&gt; (along with any version requirement from Django&amp;rsquo;s &lt;code&gt;setup.py&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d2af2e61a464edd9e548eb900abf871a875685" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;sites framework&lt;/code&gt;&lt;/a&gt; by adding &lt;code&gt;'django.contrib.sites'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting, if it&amp;rsquo;s not already in there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4701e78d9d83a7d5493cab49cfea8bcd9ddd76" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;btree_gin&lt;/code&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd182d9015bfd8188202d1ecb60688d2939179f" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;btree_gist&lt;/code&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76f5145a32d184e1c7e9587ba465063c089609e" translate="yes" xml:space="preserve">
          <source>Install the Django code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5ac4572b45ea1e5ec997132d5c1eedc83d7af8" translate="yes" xml:space="preserve">
          <source>Install the core Django tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80fff99394b213848b1958268f286bb48e71084" translate="yes" xml:space="preserve">
          <source>Install the docutils Python module (&lt;a href=&quot;https://docutils.sourceforge.io/&quot;&gt;https://docutils.sourceforge.io/&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16648ab97c10387117506d2197c88daefa2c596" translate="yes" xml:space="preserve">
          <source>Install the packages in the order they are listed above, as the GDAL and SQLite packages require the packages listed before them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="ff4f4a940ff19aa2436e69196999c53946b31122" translate="yes" xml:space="preserve">
          <source>Installation instructions are slightly different depending on whether you&amp;rsquo;re installing a distribution-specific package, downloading the latest official release, or fetching the latest development version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3e3dab4a190abbebf78c92247b626a4d65febb" translate="yes" xml:space="preserve">
          <source>Installing Daphne</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bff20e97a1f081da9b80758818ca87edaadcdc" translate="yes" xml:space="preserve">
          <source>Installing Geospatial libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08184aba9687051924cc110485a309cd3a9c8e10" translate="yes" xml:space="preserve">
          <source>Installing Git</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832f4a5393100d982e65d355980b754d3648ec27" translate="yes" xml:space="preserve">
          <source>Installing Git.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b40ec12cc871a8d0e48f0c35c15978313555dda" translate="yes" xml:space="preserve">
          <source>Installing Gunicorn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f56c15f76a3602ff2fe3028129cae40805d2891" translate="yes" xml:space="preserve">
          <source>Installing PostGIS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927da6c1c36a09548ee8a0b09892380aaf33ca8a" translate="yes" xml:space="preserve">
          <source>Installing Python packages with virtualenv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961035f5074b37f06409829bca2e3c28cae1a5ad" translate="yes" xml:space="preserve">
          <source>Installing SpatiaLite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d11135f6e798b9505fe0f0f3c04f2d219d5a612" translate="yes" xml:space="preserve">
          <source>Installing Uvicorn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a34c08b51e2419fa7dc61778c3f2ca278331e1" translate="yes" xml:space="preserve">
          <source>Installing a distribution-specific package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cc33b9e752caf55863c3e0eb6e5deb696214b9" translate="yes" xml:space="preserve">
          <source>Installing a wrapper is done in a context manager &amp;ndash; so the wrappers are temporary and specific to some flow in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdd21443d12c68fe7d176e7e1d37cacee632f0f" translate="yes" xml:space="preserve">
          <source>Installing an official release with &lt;code&gt;pip&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8628a6e864a9e93f538b94578699641e3f734260" translate="yes" xml:space="preserve">
          <source>Installing as a user library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25698238529e36c36bbff9a1cf8864afeb7e862b" translate="yes" xml:space="preserve">
          <source>Installing from source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e127126b29a4052ed7dc43993b38a6393e1246" translate="yes" xml:space="preserve">
          <source>Installing some prerequisites</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bda49ca5c84ac0371dfd0aa4aeead7cef32c9d" translate="yes" xml:space="preserve">
          <source>Installing the contenttypes framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2880c0c7b9f92a492fcc9e1562593a3e93bb68d" translate="yes" xml:space="preserve">
          <source>Installing the development version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3bf6d32afe746a4fa058c7c5dce82e85a778691" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;citext&lt;/code&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5b8eef62a1408d8cc79afa5af9584ec14a4b58" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;hstore&lt;/code&gt; extension and also sets up the connection to interpret hstore data for possible use in subsequent migrations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7101a42b2163ac751b481d457a5c8369b69d8e9e" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;pg_trgm&lt;/code&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31cfb0fb6c711d0656d19a5574b5d7240e78753" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;pgcrypto&lt;/code&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de17062b9cc6ceea7cfbe2b8e21f56dd155d43c" translate="yes" xml:space="preserve">
          <source>Installs the &lt;code&gt;unaccent&lt;/code&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba17ad27b23ed96d07cb286c9f28dee5d248c65" translate="yes" xml:space="preserve">
          <source>Instances can be assigned to the reverse relationship in the same way as you would assign the forward relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a8466028f50993d00a3e49a884c73a7be30cbf" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; have methods for returning the model classes they represent and for querying objects from those models. &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; also has a &lt;a href=&quot;../../topics/db/managers#custom-managers&quot;&gt;custom manager&lt;/a&gt; that adds methods for working with &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; and for obtaining instances of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; for a particular model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca2d03ef0213f868473b19d489c0a841c984cea" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; classes are views which can be used in your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34051ba4426c5e025165ef265738387f13ceb9b3" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;OuterRef&lt;/code&gt; may be used in conjunction with nested instances of &lt;code&gt;Subquery&lt;/code&gt; to refer to a containing queryset that isn&amp;rsquo;t the immediate parent. For example, this queryset would need to be within a nested pair of &lt;code&gt;Subquery&lt;/code&gt; instances to resolve correctly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965f5a03cce86b0170feb9ce452f784fa702bfa6" translate="yes" xml:space="preserve">
          <source>Instantiate an instance of &lt;code&gt;form_class&lt;/code&gt; using &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_form_kwargs&quot;&gt;&lt;code&gt;get_form_kwargs()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;form_class&lt;/code&gt; isn&amp;rsquo;t provided &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_form_class&quot;&gt;&lt;code&gt;get_form_class()&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda3a125fe2fe7a55e269e5c944a131e88c730c7" translate="yes" xml:space="preserve">
          <source>Instantiates a &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt; object with the given template, context, content type, HTTP status, and charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b812b7e4f2492d34300d293c78fa87ed20e859f6" translate="yes" xml:space="preserve">
          <source>Instantiates a &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; object with the given request, template, context, content type, HTTP status, and charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e1e0c6a3602561b6ddda3e1aca0d8c160c34b0" translate="yes" xml:space="preserve">
          <source>Instantiates a &lt;code&gt;QueryDict&lt;/code&gt; object based on &lt;code&gt;query_string&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83733746f9ce2ff985b0d7b6dd35d2bfeeaab86f" translate="yes" xml:space="preserve">
          <source>Instantiates an &lt;code&gt;HttpResponse&lt;/code&gt; object with the given page content and content type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3b8f3c6151107514c4bf4eeca907ec5482a39c" translate="yes" xml:space="preserve">
          <source>Instantiating</source>
          <target state="translated">Instantiating</target>
        </trans-unit>
        <trans-unit id="cffabffc243a86e5e4fd4008f1711530d0497620" translate="yes" xml:space="preserve">
          <source>Instantiating, processing, and rendering forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22aeabb7dc852022ced533d52ff737b2b3613349" translate="yes" xml:space="preserve">
          <source>Instead of a constant, you can also pass any callable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72257cae811c35080fe1f5b3607be554b2133268" translate="yes" xml:space="preserve">
          <source>Instead of hardcoding the secret key in your settings module, consider loading it from an environment variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3dc3e8adb7c023a6a4d986658465fea88d21ee" translate="yes" xml:space="preserve">
          <source>Instead of referring to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; directly, you should reference the user model using &lt;code&gt;django.contrib.auth.get_user_model()&lt;/code&gt;. This method will return the currently active user model &amp;ndash; the custom user model if one is specified, or &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba92e02d2c06f149da74f37d67460e937d8a168" translate="yes" xml:space="preserve">
          <source>Instead of sending out real emails the console backend just writes the emails that would be sent to the standard output. By default, the console backend writes to &lt;code&gt;stdout&lt;/code&gt;. You can use a different stream-like object by providing the &lt;code&gt;stream&lt;/code&gt; keyword argument when constructing the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a20d35e04abc263b2085bd01850ef1fa676b80f" translate="yes" xml:space="preserve">
          <source>Instead, Django uses the &lt;code&gt;F()&lt;/code&gt; object to generate an SQL expression that describes the required operation at the database level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63739a1702388d926c53a0de1d6e622a2ad61b70" translate="yes" xml:space="preserve">
          <source>Instead, you must create a new custom field class and update your models to reference it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91490210e1a90ded8db45f1dc59077e81e981701" translate="yes" xml:space="preserve">
          <source>Instructs the browser to always send the full URL as the referrer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd51c30985320dbadc1a598127335712c56106c" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send a full URL as the referrer, but only when no protocol downgrade occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b636598035ca4d6177e3e6c9c903dcc3d8c1ef76" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send a full URL, but only for same-origin links. No referrer will be sent for cross-origin links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0fb8de2583c8c8bae50209d5c64150e59b7871" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send no referrer for links clicked on this site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ecd1ffca0fc0e4b0053ac06d1820f83756efd8" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send only the origin, not the full URL, and to send no referrer when a protocol downgrade occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637d99a5fb685a12c3c6e4098633e5db47b9ba49" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send only the origin, not the full URL, as the referrer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18be72781eb1ccbaa5b15b5eddd01a77e00e6f66" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send the full URL as the referrer for same-origin links, and only the origin for cross-origin links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192e4032c9433119a1b8f523f5783c3815f7a2f6" translate="yes" xml:space="preserve">
          <source>Instructs the browser to send the full URL when the link is same-origin and no protocol downgrade occurs; send only the origin when the link is cross-origin and no protocol downgrade occurs; and no referrer when a protocol downgrade occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b23bec4f6507d4cca8f5d60ec3bc51bc4831a7a" translate="yes" xml:space="preserve">
          <source>Integer representing the data type for all the bands. Defaults to &lt;code&gt;6&lt;/code&gt; (Float32). All bands of a new raster are required to have the same datatype. The value mapping is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931c94c24a1258cda59704dd26701d5f538121be" translate="yes" xml:space="preserve">
          <source>Integer representing the number of bands of the raster. A raster can be created without passing band data upon creation. If the number of bands isn&amp;rsquo;t specified, it&amp;rsquo;s automatically calculated from the length of the &lt;code&gt;bands&lt;/code&gt; input. The number of bands can&amp;rsquo;t be changed after creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda8d701f2e10496740d2917dbe2843f2ce3cae9" translate="yes" xml:space="preserve">
          <source>Integrating Django with a legacy database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0ec2fc7e330a3d8a5e7db32ab4c2dc5da8dbb8" translate="yes" xml:space="preserve">
          <source>Integrating validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01629819b333385e9c8b6238bf93b852412fec63" translate="yes" xml:space="preserve">
          <source>Integrating with django.contrib.sitemaps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611f4acd53244dba4ed5abdac3bc6b3f444bd766" translate="yes" xml:space="preserve">
          <source>Integration with &lt;code&gt;coverage.py&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71bc9a25badec542735b3baa9e3604b7bc84c68" translate="yes" xml:space="preserve">
          <source>Interaction with default ordering or &lt;code&gt;order_by()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6cfa8632d39cef2cb4c3ea3a83ee056e07d987" translate="yes" xml:space="preserve">
          <source>Interaction with model validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3b3216035a4a5417f816e3184e425f57e7634e" translate="yes" xml:space="preserve">
          <source>Interested in giving back to the community a little? Maybe you&amp;rsquo;ve found a bug in Django that you&amp;rsquo;d like to see fixed, or maybe there&amp;rsquo;s a small feature you want added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff69045749030dbdd4e91ddd52a7fa05a707a735" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;order_with_respect_to&lt;/code&gt; adds an additional field/database column named &lt;code&gt;_order&lt;/code&gt; and sets the model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; option to this field. Consequently, &lt;code&gt;order_with_respect_to&lt;/code&gt; and &lt;code&gt;ordering&lt;/code&gt; cannot be used together, and the ordering added by &lt;code&gt;order_with_respect_to&lt;/code&gt; will apply whenever you obtain a list of objects of this model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53f9038dcc32cdab6d7c6e27dab10759972255d" translate="yes" xml:space="preserve">
          <source>Internally, Django uses a &lt;a href=&quot;../ref/files/file#django.core.files.File&quot;&gt;&lt;code&gt;django.core.files.File&lt;/code&gt;&lt;/a&gt; instance any time it needs to represent a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b010410ca6e72b4d0b168b164c7004c1438d2f5" translate="yes" xml:space="preserve">
          <source>Internally, a &lt;code&gt;QuerySet&lt;/code&gt; can be constructed, filtered, sliced, and generally passed around without actually hitting the database. No database activity actually occurs until you do something to evaluate the queryset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6dd13d4fd26757d4a2c67a0952cec4935e89742" translate="yes" xml:space="preserve">
          <source>Internally, inline translations use an &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc66677522f28534dcc0a16a7bab83d78d113263" translate="yes" xml:space="preserve">
          <source>Internally, these strings are of type &lt;a href=&quot;../ref/utils#django.utils.safestring.SafeString&quot;&gt;&lt;code&gt;SafeString&lt;/code&gt;&lt;/a&gt;. You can test for them using code like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9840502f92536bda054c5b8b5b3b050903683be4" translate="yes" xml:space="preserve">
          <source>Internationalization and localization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e609ab9b7fe6379c805dbcbfe129b8b31dec62eb" translate="yes" xml:space="preserve">
          <source>Internationalization tags and filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fc92b491eced77c0cc45a1a5338ff73ae08d59" translate="yes" xml:space="preserve">
          <source>Internationalization: in JavaScript code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75f43d03d9fa742d9fb2c7d7873a7d5bc0ebf9d" translate="yes" xml:space="preserve">
          <source>Internationalization: in Python code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc3c49e3bc6b80c15d9568df95ee12b2b4ec66b" translate="yes" xml:space="preserve">
          <source>Internationalization: in URL patterns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093d237356c453f731e7c6a8c57c6018a7b3c174" translate="yes" xml:space="preserve">
          <source>Internationalization: in template code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b1a5b17786a57e3a8fb5dfdf8cf77e5bfff51e" translate="yes" xml:space="preserve">
          <source>Internet Explorer 8+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8f4358c79e6f7a5ea439bdcb9825fcc3a2e838" translate="yes" xml:space="preserve">
          <source>Interpolation of &lt;code&gt;'%(app_label)s'&lt;/code&gt; and &lt;code&gt;'%(class)s'&lt;/code&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670d4bcb5c48156aee896dbdd2af0b12b43400b5" translate="yes" xml:space="preserve">
          <source>Interpretation of naive datetime objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5e7d5ae08e5cb2ed9acbf41f656da0c395f4bb" translate="yes" xml:space="preserve">
          <source>Introduce new views based on Django&amp;rsquo;s generic views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142d034c2e0110437de3729fc1ce5c2b7c38c50e" translate="yes" xml:space="preserve">
          <source>Introducing automated testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de87d094c22de1337720d7b33816998f9929c20c" translate="yes" xml:space="preserve">
          <source>Introducing the Django Admin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="2b73339f8aa842940195a89ffe993ba65c3d9dde" translate="yes" xml:space="preserve">
          <source>Introduction to class-based views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82d8f28beb37bb1505deaf578ad2cbafb3ae7f0" translate="yes" xml:space="preserve">
          <source>Introductions to all the key parts of Django you&amp;rsquo;ll need to know:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10d2f178e3c219ba32583ff1ed75ce35061d066" translate="yes" xml:space="preserve">
          <source>Introspects the database tables in the database pointed-to by the &lt;a href=&quot;settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; setting and outputs a Django model module (a &lt;code&gt;models.py&lt;/code&gt; file) to standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e558f12b2fea5ada2ae33560ebbbda69b6b36bad" translate="yes" xml:space="preserve">
          <source>Is it a problem that Django&amp;rsquo;s CSRF protection isn&amp;rsquo;t linked to a session by default?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689295ff3cb0af6e5ed4a1994a98fd53a5442ebe" translate="yes" xml:space="preserve">
          <source>Is posting an arbitrary CSRF token pair (cookie and POST data) a vulnerability?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c6d6a6205743736d71d9cc8062c3a735fdd329" translate="yes" xml:space="preserve">
          <source>Isolation level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c193045b5c55b9e3ed8d3e3e8a7b0a1f8cfd3eb" translate="yes" xml:space="preserve">
          <source>Isolation when using &lt;code&gt;QuerySet.iterator()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a224f02cd37de1afa21b98fadb23b1f88a19283" translate="yes" xml:space="preserve">
          <source>Issues an SQL &lt;code&gt;DELETE&lt;/code&gt; for the object. This only deletes the object in the database; the Python instance will still exist and will still have data in its fields. This method returns the number of objects deleted and a dictionary with the number of deletions per object type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7475fe4c0d244b8e0bfd059947833601ade2bebc" translate="yes" xml:space="preserve">
          <source>It accepts two lists of operations, and when asked to apply state will use the state list, and when asked to apply changes to the database will use the database list. Do not use this operation unless you&amp;rsquo;re very sure you know what you&amp;rsquo;re doing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d336b8e808b2ce8e6bc0892a95ebcc857261a00" translate="yes" xml:space="preserve">
          <source>It allows developers and template authors to specify which parts of their apps should be translated or formatted for local languages and cultures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfc09caa336e0bf633e02009b185c91abc12fe9" translate="yes" xml:space="preserve">
          <source>It also handles the default permissions model as defined for &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.PermissionsMixin&quot;&gt;&lt;code&gt;PermissionsMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc1d84e127c6d08799ea2bc49fa76e2873146cb" translate="yes" xml:space="preserve">
          <source>It also has these methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511ef7aa375efc4f8ed62f952d298be8e0b4f95c" translate="yes" xml:space="preserve">
          <source>It also lets you create multiple versions of a site, with different base templates, while reusing child templates. Django&amp;rsquo;s creators have used this technique to create strikingly different mobile versions of sites by only creating a new base template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f7a089ecd79aa5a1bdbaa5daa9e3f24da1ed07" translate="yes" xml:space="preserve">
          <source>It also provides an additional method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daa4ac3ccf52ec1ffd7ad17d03466c814d3d12f" translate="yes" xml:space="preserve">
          <source>It also supports domain-only links ending in one of the original top level domains (&lt;code&gt;.com&lt;/code&gt;, &lt;code&gt;.edu&lt;/code&gt;, &lt;code&gt;.gov&lt;/code&gt;, &lt;code&gt;.int&lt;/code&gt;, &lt;code&gt;.mil&lt;/code&gt;, &lt;code&gt;.net&lt;/code&gt;, and &lt;code&gt;.org&lt;/code&gt;). For example, &lt;code&gt;djangoproject.com&lt;/code&gt; gets converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a096078e43f7fa4f663661c8b0fa7e65fb69edbb" translate="yes" xml:space="preserve">
          <source>It also tells the browser that the form data should be sent to the URL specified in the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;&amp;rsquo;s &lt;code&gt;action&lt;/code&gt; attribute - &lt;code&gt;/admin/&lt;/code&gt; - and that it should be sent using the HTTP mechanism specified by the &lt;code&gt;method&lt;/code&gt; attribute - &lt;code&gt;post&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2a327dddd892e286db3b065802898e942c35e8" translate="yes" xml:space="preserve">
          <source>It assumes an understanding of templates, contexts, variables, tags, and rendering. Start with the &lt;a href=&quot;../../topics/templates#template-language-intro&quot;&gt;introduction to the Django template language&lt;/a&gt; if you aren&amp;rsquo;t familiar with these concepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690d1365bfbf3fb0fa4c118b89f89d5b8366bb2e" translate="yes" xml:space="preserve">
          <source>It assumes middleware that&amp;rsquo;s compatible with the old style of Django 1.9 and earlier (having methods like &lt;code&gt;process_request()&lt;/code&gt;, &lt;code&gt;process_exception()&lt;/code&gt;, and &lt;code&gt;process_response()&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb59b85de0de778de68aecefe53c76f0de98f9c" translate="yes" xml:space="preserve">
          <source>It boils down to this: Use exactly one of either &lt;code&gt;configure()&lt;/code&gt; or &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;. Not both, and not neither.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cf6839db62a78b3bd293b603fd6fb8dfbb0eb3" translate="yes" xml:space="preserve">
          <source>It can also be registered as a transform as described in &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb23c5c9e3231d62a5810bd6a50cdfe7b6a5920f" translate="yes" xml:space="preserve">
          <source>It can also be registered as a transform as described in &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;. The default lookup name is &lt;code&gt;ord&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea67b801d1eaece4d265dba2ce2e38e5910e3a3" translate="yes" xml:space="preserve">
          <source>It can also be registered as a transform as described in &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;. The default lookup name is &lt;code&gt;reverse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b83a041f76ddd9a3ab23ee010a83c03a9e951ed" translate="yes" xml:space="preserve">
          <source>It can also be registered as a transform. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd0768970c34a1a29a145ed1522c59cc494bcb5" translate="yes" xml:space="preserve">
          <source>It can also be used as a context manager, which will automatically call &lt;code&gt;open()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; as needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3fc307f28897d761a0063f6cf900a66eaaebe1" translate="yes" xml:space="preserve">
          <source>It can assign settings dynamically using normal Python syntax. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a589b7f3ed91b9ee61b7886d257dffc5695c89" translate="yes" xml:space="preserve">
          <source>It can be used as a context manager, e.g. &lt;code&gt;with file.open() as f:&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2097031fa8fe10d38cffd390f98272e96a466e" translate="yes" xml:space="preserve">
          <source>It can be useful to include multiple versions of the content in an email; the classic example is to send both text and HTML versions of a message. With Django&amp;rsquo;s email library, you can do this using the &lt;code&gt;EmailMultiAlternatives&lt;/code&gt; class. This subclass of &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; has an &lt;code&gt;attach_alternative()&lt;/code&gt; method for including extra versions of the message body in the email. All the other methods (including the class initialization) are inherited directly from &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4198fb60ed49893bf1b7b15101a986fc314284" translate="yes" xml:space="preserve">
          <source>It can import values from other settings files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14f9ff60b98c4d0c8826e092f3be2f126af5e32" translate="yes" xml:space="preserve">
          <source>It can prove unwieldy to redefine settings that contain a list of values. In practice, adding or removing values is often sufficient. Django provides the &lt;a href=&quot;#django.test.SimpleTestCase.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt; context manager for easier settings changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097608e43f341dbd5fc60aa8b784590fa3776b10" translate="yes" xml:space="preserve">
          <source>It can sometimes be worth checking whether different and better-performing versions of the software that you&amp;rsquo;re using are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020494bf079569c48d07f0e339eeaba2144e3978" translate="yes" xml:space="preserve">
          <source>It casts &lt;code&gt;objs&lt;/code&gt; to a list, which fully evaluates &lt;code&gt;objs&lt;/code&gt; if it&amp;rsquo;s a generator. The cast allows inspecting all objects so that any objects with a manually set primary key can be inserted first. If you want to insert objects in batches without evaluating the entire generator at once, you can use this technique as long as the objects don&amp;rsquo;t have any manually set primary keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb8f9445123da563549e25d61604338816d4379" translate="yes" xml:space="preserve">
          <source>It checks if the authentication backend stored in the session is present in &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;. If so, it uses the backend&amp;rsquo;s &lt;code&gt;get_user()&lt;/code&gt; method to retrieve the user model instance and then verifies the session by calling the user model&amp;rsquo;s &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt;&lt;code&gt;get_session_auth_hash()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3944a69b3b8d5e875b158cbb7605a1481e03f1ee" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;code&gt;'utf-8'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610e7c05ff132aa7c98f9f01ec8dcc655f337645" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623e5cad0209d1a8e190acf6c13089e4a56c233d" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d209a528a103c486502ebe2e0181e7e90306575" translate="yes" xml:space="preserve">
          <source>It defaults to a list containing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db0ca2305071d48e523540f02a1e4d4cdd92923" translate="yes" xml:space="preserve">
          <source>It defaults to an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54a841d858e6e9a9cdf3df9d4cd720e0e1979b8" translate="yes" xml:space="preserve">
          <source>It defaults to an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4086bf4e205c88779a9aaabba9fb09a7f47c9f8b" translate="yes" xml:space="preserve">
          <source>It defaults to the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e917985102de2cb163734f6e066baeaa33a044" translate="yes" xml:space="preserve">
          <source>It defaults to the name of the module defining the engine class, i.e. the next to last piece of &lt;a href=&quot;#std:setting-TEMPLATES-BACKEND&quot;&gt;&lt;code&gt;BACKEND&lt;/code&gt;&lt;/a&gt;, when it isn&amp;rsquo;t provided. For example if the backend is &lt;code&gt;'mypackage.whatever.Backend'&lt;/code&gt; then its default name is &lt;code&gt;'whatever'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f670820519da37f85de420992b3fd748290e4628" translate="yes" xml:space="preserve">
          <source>It defaults to the value of the &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d147afb5556d22db8ab3da32b2d02bdec93b0017" translate="yes" xml:space="preserve">
          <source>It deliberately ignores GET requests (and other requests that are defined as &amp;lsquo;safe&amp;rsquo; by &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231#section-4.2.1&lt;/strong&gt;&lt;/a&gt;). These requests ought never to have any potentially dangerous side effects, and so a CSRF attack with a GET request ought to be harmless. &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 7231#section-4.2.1&lt;/strong&gt;&lt;/a&gt; defines POST, PUT, and DELETE as &amp;lsquo;unsafe&amp;rsquo;, and all other methods are also assumed to be unsafe, for maximum protection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1df500b3fdcfe2bc743847338a819e8fc0de2b5" translate="yes" xml:space="preserve">
          <source>It does not support middleware. Session and authentication attributes must be supplied by the test itself if required for the view to function properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47f33f421faaf0d62ce5c333284b1b924733727" translate="yes" xml:space="preserve">
          <source>It does not work with child models in a multi-table inheritance scenario.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8152d5b171a8766f9da5b542812132a92f7bc3a8" translate="yes" xml:space="preserve">
          <source>It does not work with many-to-many relationships.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc51282cf5ef3da5ced5304bc564e431c925d3c" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t allow for Python syntax errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067e9c9b65fffdb89e5ef4a000cf2df974c65535" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t matter which model has the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;, but you should only put it in one of the models &amp;ndash; not both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f56311955ef1f67fee06986862dbe095296993" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t save you from generating the response, which may be expensive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a806c4922f40382d07fc0463c125f83ba7a5bc" translate="yes" xml:space="preserve">
          <source>It exposes all possible operations as methods, that should be called in the order you wish changes to be applied. Some possible operations or types of change are not possible on all databases - for example, MyISAM does not support foreign key constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c58c5a4e6116594807b291787a1f7990bcf8231" translate="yes" xml:space="preserve">
          <source>It has access to the following settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a3475069a9ec716d0910e37c46be9d681e15d1" translate="yes" xml:space="preserve">
          <source>It has no &lt;code&gt;content&lt;/code&gt; attribute. Instead, it has a &lt;a href=&quot;#django.http.StreamingHttpResponse.streaming_content&quot;&gt;&lt;code&gt;streaming_content&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0dc2f03765869baa63c35bfcea12543db464d7" translate="yes" xml:space="preserve">
          <source>It has three fields: &lt;code&gt;username&lt;/code&gt; (from the user model), &lt;code&gt;password1&lt;/code&gt;, and &lt;code&gt;password2&lt;/code&gt;. It verifies that &lt;code&gt;password1&lt;/code&gt; and &lt;code&gt;password2&lt;/code&gt; match, validates the password using &lt;a href=&quot;passwords#django.contrib.auth.password_validation.validate_password&quot;&gt;&lt;code&gt;validate_password()&lt;/code&gt;&lt;/a&gt;, and sets the user&amp;rsquo;s password using &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_password&quot;&gt;&lt;code&gt;set_password()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d779021d49b2c90161c17c331456b5b3068c78f" translate="yes" xml:space="preserve">
          <source>It is &lt;em&gt;possible&lt;/em&gt; to write code that does all of this manually, but Django can take care of it all for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076bb76ff5ce930dc8437ad0f408044a3c975e80" translate="yes" xml:space="preserve">
          <source>It is a good idea to limit the accessibility of your caching system and database using a firewall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4bd508268912d6165f52fe9e95d58ac3654cc3c" translate="yes" xml:space="preserve">
          <source>It is also able to consume standard context variables, e.g. assuming a &lt;code&gt;user_stylesheet&lt;/code&gt; variable is passed to the template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7275d5f0dbdce35d356cc0217bbaced47935d584" translate="yes" xml:space="preserve">
          <source>It is also important to be particularly careful when using &lt;code&gt;is_safe&lt;/code&gt; with custom template tags, the &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; template tag, &lt;a href=&quot;../ref/utils#module-django.utils.safestring&quot;&gt;&lt;code&gt;mark_safe&lt;/code&gt;&lt;/a&gt;, and when autoescape is turned off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35cd2bb04a3095baf1f0156dad2be668729d17a" translate="yes" xml:space="preserve">
          <source>It is also important to remember that when running with &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; turned on, Django will remember every SQL query it executes. This is useful when you&amp;rsquo;re debugging, but it&amp;rsquo;ll rapidly consume memory on a production server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9ff4e3c1dd0783a48894b88febf1b60c5ee412" translate="yes" xml:space="preserve">
          <source>It is also possible to make use of the &lt;a href=&quot;https://docs.python.org/3/library/enum.html#functional-api&quot;&gt;Enum Functional API&lt;/a&gt; with the caveat that labels are automatically generated as highlighted above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44479df581713f225efd5b192e8fbdd6c0ac4474" translate="yes" xml:space="preserve">
          <source>It is always better for security to deploy your site behind HTTPS. Without this, it is possible for malicious network users to sniff authentication credentials or any other information transferred between client and server, and in some cases &amp;ndash; &lt;strong&gt;active&lt;/strong&gt; network attackers &amp;ndash; to alter data that is sent in either direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4af27d7dd9a152a61bf23559d3c0f63300fe1e" translate="yes" xml:space="preserve">
          <source>It is an error to pass both &lt;code&gt;db_constraint&lt;/code&gt; and &lt;code&gt;through&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f706f2f8550bb586d727ba9bab956c8a2837633c" translate="yes" xml:space="preserve">
          <source>It is an error to pass in &lt;code&gt;flat&lt;/code&gt; when there is more than one field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92635fe6d3362308ab42d3856be4325b2da976c" translate="yes" xml:space="preserve">
          <source>It is considered an error to specify a cache name that is not configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db35e4ce1081482f04f069c13884b47498468f3e" translate="yes" xml:space="preserve">
          <source>It is for these reasons that Django provides &lt;em&gt;natural keys&lt;/em&gt;. A natural key is a tuple of values that can be used to uniquely identify an object instance without using the primary key value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdaad7896204a4ac78b076176cec9c1cbf93733e" translate="yes" xml:space="preserve">
          <source>It is important to understand that a Django application is a set of code that interacts with various parts of the framework. There&amp;rsquo;s no such thing as an &lt;code&gt;Application&lt;/code&gt; object. However, there&amp;rsquo;s a few places where Django needs to interact with installed applications, mainly for configuration and also for introspection. That&amp;rsquo;s why the application registry maintains metadata in an &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance for each installed application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21713b029856dacee13a57247a95a54d57c7a08f" translate="yes" xml:space="preserve">
          <source>It is important you use a &lt;code&gt;ModelForm&lt;/code&gt; here otherwise things can break. See the &lt;a href=&quot;../../forms/index&quot;&gt;forms&lt;/a&gt; documentation on &lt;a href=&quot;../../forms/validation&quot;&gt;custom validation&lt;/a&gt; and, more specifically, the &lt;a href=&quot;../../../topics/forms/modelforms#overriding-modelform-clean-method&quot;&gt;model form validation notes&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f47a7255f5d5f42baf7de03967064db62c559d6" translate="yes" xml:space="preserve">
          <source>It is internal to the HTTP handler modules and you are unlikely to see it elsewhere. If you are modifying HTTP handling code, you should raise this when you encounter an aborted request to make sure the socket is closed cleanly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f34ac9cd66cf8fc8ae4b45ada16f5905bb668c2" translate="yes" xml:space="preserve">
          <source>It is not always necessary to define a custom model form. The &lt;code&gt;modelformset_factory&lt;/code&gt; function has several arguments which are passed through to &lt;code&gt;modelform_factory&lt;/code&gt;, which are described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8b2584d8949ae3aad5845125aff27c6dea3682" translate="yes" xml:space="preserve">
          <source>It is often useful to automatically prepopulate a SlugField based on the value of some other value. You can do this automatically in the admin using &lt;a href=&quot;../contrib/admin/index#django.contrib.admin.ModelAdmin.prepopulated_fields&quot;&gt;&lt;code&gt;prepopulated_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9f4db131ef38104458cc78f509f9b8e4f82a6f" translate="yes" xml:space="preserve">
          <source>It is optimal because:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408d4a1ae07d6047f237c8763a2a0fa6bd869c5a" translate="yes" xml:space="preserve">
          <source>It is permissible to specify a multi-valued field to order the results by (for example, a &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; field, or the reverse relation of a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; field).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de64c032c28609f6df579f2dfec13b9e5f4dc55" translate="yes" xml:space="preserve">
          <source>It is possible to also look permissions up by &lt;code&gt;{% if in %}&lt;/code&gt; statements. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621c5a5a4c8691aea320db24c5e909c90b4b8f41" translate="yes" xml:space="preserve">
          <source>It is possible to force the set of fields to be loaded by using the &lt;code&gt;fields&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174fe92efe02e9e94a8eb86f6a7e7cb926b52c6f" translate="yes" xml:space="preserve">
          <source>It is possible to nest array fields - you can specify an instance of &lt;code&gt;ArrayField&lt;/code&gt; as the &lt;code&gt;base_field&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bcdc82a033bbb732e04f96956f57d7253284dc" translate="yes" xml:space="preserve">
          <source>It is possible to override the name of the package which contains the migrations on a per-app basis by modifying the &lt;a href=&quot;../ref/settings#std:setting-MIGRATION_MODULES&quot;&gt;&lt;code&gt;MIGRATION_MODULES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d0e398cc2ed04ea79dcc18f3912bf3c9a79141" translate="yes" xml:space="preserve">
          <source>It is possible to specify a custom template for rendering a list filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fa9dadf195abd5e2ec6597c4a03e19eae786f6" translate="yes" xml:space="preserve">
          <source>It is possible to use an inline with generically related objects. Let&amp;rsquo;s say you have the following models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d37ea5ca9ec311b0a77aeb96bb1d5e82b99086a" translate="yes" xml:space="preserve">
          <source>It is recommended to always provide explicit &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name_plural&quot;&gt;&lt;code&gt;verbose_name_plural&lt;/code&gt;&lt;/a&gt; options rather than relying on the fallback English-centric and somewhat na&amp;iuml;ve determination of verbose names Django performs by looking at the model&amp;rsquo;s class name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1506ce35ebb7e326c976d49f03cd54b034d8b5cb" translate="yes" xml:space="preserve">
          <source>It is sometimes possible to have more than one foreign key to the same model. Take this model for instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e64ae5d4a907de96c1bace55146b1c430db4ac7" translate="yes" xml:space="preserve">
          <source>It is strongly advised that you use lowercase table names when you override the table name via &lt;code&gt;db_table&lt;/code&gt;, particularly if you are using the MySQL backend. See the &lt;a href=&quot;../databases#mysql-notes&quot;&gt;MySQL notes&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ab72b6279f2c2143e6e86aebc9b5bfd16c3339" translate="yes" xml:space="preserve">
          <source>It is strongly desirable to avoid hard-coding these URLs (a laborious, non-scalable and error-prone strategy). Equally dangerous is devising ad-hoc mechanisms to generate URLs that are parallel to the design described by the URLconf, which can result in the production of URLs that become stale over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3496c8823f46f96619f7c7234311315d48654dad" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that you explicitly set all fields that should be edited in the form using the &lt;code&gt;fields&lt;/code&gt; attribute. Failure to do so can easily lead to security problems when a form unexpectedly allows a user to set certain fields, especially when new fields are added to a model. Depending on how the form is rendered, the problem may not even be visible on the web page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6c3e0f0685ccb020fe3695c8557e40f27f6ff9" translate="yes" xml:space="preserve">
          <source>It is used to keep track of how many form instances are being displayed. If you are adding new forms via JavaScript, you should increment the count fields in this form as well. On the other hand, if you are using JavaScript to allow deletion of existing objects, then you need to ensure the ones being removed are properly marked for deletion by including &lt;code&gt;form-#-DELETE&lt;/code&gt; in the &lt;code&gt;POST&lt;/code&gt; data. It is expected that all forms are present in the &lt;code&gt;POST&lt;/code&gt; data regardless.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e81a6c17c3961960826357ce78ba7cbd1d1c2dc" translate="yes" xml:space="preserve">
          <source>It is useful for when you need to use a URL reversal before your project&amp;rsquo;s URLConf is loaded. Some common cases where this function is necessary are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edadcc89ba3b1214228e34855c13c67e577d922" translate="yes" xml:space="preserve">
          <source>It is useful when you know you&amp;rsquo;re only going to need values from a small number of the available fields and you won&amp;rsquo;t need the functionality of a model instance object. It&amp;rsquo;s more efficient to select only the fields you need to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206782144dabd31d72568733a87ec94d13293b68" translate="yes" xml:space="preserve">
          <source>It is worth noting that what your method returns is identical to what you return from a function-based view, namely some form of &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;. This means that &lt;a href=&quot;../http/shortcuts&quot;&gt;http shortcuts&lt;/a&gt; or &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; objects are valid to use inside a class-based view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39193d731385b7f76adf3109afc18b9fbf1b9c3d" translate="yes" xml:space="preserve">
          <source>It lets the site developers use the same Django view code for both sites. The view code that displays a given story checks to make sure the requested story is on the current site. It looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d7859b62c014f37a7d006ce96504abe35f5a1a" translate="yes" xml:space="preserve">
          <source>It lets the site producers edit all content &amp;ndash; on both sites &amp;ndash; in a single interface (the Django admin).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc346ea890ef3e267f17202b888b385aff5f57a5" translate="yes" xml:space="preserve">
          <source>It may be &lt;code&gt;None&lt;/code&gt; if the application doesn&amp;rsquo;t contain a &lt;code&gt;models&lt;/code&gt; module. Note that the database related signals such as &lt;a href=&quot;signals#django.db.models.signals.pre_migrate&quot;&gt;&lt;code&gt;pre_migrate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; are only emitted for applications that have a &lt;code&gt;models&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891f0948f1f96a7f49d3a00640d02aa7c1ed47f4" translate="yes" xml:space="preserve">
          <source>It may be helpful to test your local changes with a Django project. First you have to create a new virtual environment, &lt;a href=&quot;#intro-contributing-install-local-copy&quot;&gt;install the previously cloned local copy of Django in editable mode&lt;/a&gt;, and create a new Django project outside of your local copy of Django. You will immediately see any changes you make to Django in your new project, which is of great help when writing your first patch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e290fe2b47b3268f5612298ab687d2e303b5359a" translate="yes" xml:space="preserve">
          <source>It may be used to specify the number of significant digits for the coordinates in the GeoJSON representation &amp;ndash; the default value is 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac47a07e868f886829abcc8990983fdbddac81a" translate="yes" xml:space="preserve">
          <source>It may be worth checking whether Python software you&amp;rsquo;re using has been provided in a different implementation that can execute the same code faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74573669ba6fa17e012f8c9c7aeb042a5383ab68" translate="yes" xml:space="preserve">
          <source>It may return a string which will be printed to &lt;code&gt;stdout&lt;/code&gt; (wrapped by &lt;code&gt;BEGIN;&lt;/code&gt; and &lt;code&gt;COMMIT;&lt;/code&gt; if &lt;a href=&quot;#django.core.management.BaseCommand.output_transaction&quot;&gt;&lt;code&gt;output_transaction&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c1c7b378d9968c5ceb99a8f842f7e7d0ca6e76c" translate="yes" xml:space="preserve">
          <source>It means the same story doesn&amp;rsquo;t have to be published twice in the database; it only has a single record in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b46e8bda19fd3f445307b5f666c282a39b36528" translate="yes" xml:space="preserve">
          <source>It might look nicer to some people to try and chain the &lt;code&gt;etag&lt;/code&gt; and &lt;code&gt;last_modified&lt;/code&gt; decorators if you want to test both preconditions. However, this would lead to incorrect behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8695114b21a9b553118ffa2c5ddcd51f47b6ef" translate="yes" xml:space="preserve">
          <source>It might seem that our tests are growing out of control. At this rate there will soon be more code in our tests than in our application, and the repetition is unaesthetic, compared to the elegant conciseness of the rest of our code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c425b5d6b3879127f569ce1f50dd0ba0ba96b36" translate="yes" xml:space="preserve">
          <source>It must be called explicitly in other cases, for instance in plain Python scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e10351df97aa228da6872da0688f6abb34bb0e1" translate="yes" xml:space="preserve">
          <source>It must be unique across a Django project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6495b09178141d4640e90c3472993cdce9587c4" translate="yes" xml:space="preserve">
          <source>It must be used via the context manager as this allows it to manage things like transactions and deferred SQL (like creating &lt;code&gt;ForeignKey&lt;/code&gt; constraints).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ee041848b140717d20c026aa533d96c5a8fbf4" translate="yes" xml:space="preserve">
          <source>It must end in a slash if set to a non-empty value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139ea78feed883583a666b45b0b67d233b14e2e3" translate="yes" xml:space="preserve">
          <source>It must return a response object that implements a &lt;code&gt;render&lt;/code&gt; method. It could alter the given &lt;code&gt;response&lt;/code&gt; by changing &lt;code&gt;response.template_name&lt;/code&gt; and &lt;code&gt;response.context_data&lt;/code&gt;, or it could create and return a brand-new &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; or equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b879dd92a89ae8af03090a22e5c88dd2ef0fa1" translate="yes" xml:space="preserve">
          <source>It only has access to the HTTP methods &lt;a href=&quot;tools#django.test.Client.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.head&quot;&gt;&lt;code&gt;head()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tools#django.test.Client.options&quot;&gt;&lt;code&gt;options()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;tools#django.test.Client.trace&quot;&gt;&lt;code&gt;trace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fee265c873ca29a4dfdc7e229dbc520d6e70061" translate="yes" xml:space="preserve">
          <source>It only works if it&amp;rsquo;s applied to the view itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c6c1c177ac76f7caf56b39a0f02ef3aeec1cbc" translate="yes" xml:space="preserve">
          <source>It passes that template a single context variable, &lt;code&gt;flatpage&lt;/code&gt;, which is the flatpage object. It uses &lt;a href=&quot;../templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; in rendering the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74322b670fac7c6c201108ca20a76c63ad2a8948" translate="yes" xml:space="preserve">
          <source>It provides some custom context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c03ba869af0beefc751707d92a55c518bcd4160" translate="yes" xml:space="preserve">
          <source>It requires no arguments at time of construction. However, you can use keywords arguments to specify some default headers. For example, this will send a &lt;code&gt;User-Agent&lt;/code&gt; HTTP header in each request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8856f825df0ebb6ad43c3696cec72ae86ffd0ad1" translate="yes" xml:space="preserve">
          <source>It returns a dictionary with these contents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ed0dd1dad3c3e655c1ffc8d30de6f3770a90fa" translate="yes" xml:space="preserve">
          <source>It serves two purposes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f580f8b6a4cd9c3f9c3bf6693e3fc2866c0c68" translate="yes" xml:space="preserve">
          <source>It should be given an iterator that yields strings as content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d799dc88c16a6235c11695fa71cc19f535a7cb" translate="yes" xml:space="preserve">
          <source>It should be very rare that you&amp;rsquo;ll need to use these parameters. Django will almost always do the right thing and trying to override that will lead to errors that are difficult to track down. This feature is for advanced use only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ebf580bfe057469268d0aab1f2ae9a8df7fd29" translate="yes" xml:space="preserve">
          <source>It should come after &lt;code&gt;SessionMiddleware&lt;/code&gt;, because &lt;code&gt;LocaleMiddleware&lt;/code&gt; makes use of session data. And it should come before &lt;code&gt;CommonMiddleware&lt;/code&gt; because &lt;code&gt;CommonMiddleware&lt;/code&gt; needs an activated language in order to resolve the requested URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3417f5f5c578905b93f41a99bf7d9107d492449" translate="yes" xml:space="preserve">
          <source>It should go near the top of the list if you&amp;rsquo;re going to turn on the SSL redirect as that avoids running through a bunch of other unnecessary middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ae97a13ef76334051b1d6adb3f3e630733c512" translate="yes" xml:space="preserve">
          <source>It should return either &lt;code&gt;None&lt;/code&gt; or an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object. If it returns &lt;code&gt;None&lt;/code&gt;, Django will continue processing this request, executing any other &lt;code&gt;process_view()&lt;/code&gt; middleware and, then, the appropriate view. If it returns an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object, Django won&amp;rsquo;t bother calling the appropriate view; it&amp;rsquo;ll apply response middleware to that &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; and return the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a2c669a765e81e1b0b56ce17865b18f7711335" translate="yes" xml:space="preserve">
          <source>It should return the value of the appropriate attribute from &lt;code&gt;model_instance&lt;/code&gt; for this field. The attribute name is in &lt;code&gt;self.attname&lt;/code&gt; (this is set up by &lt;a href=&quot;#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bcce886f189622a63ac65f122c49d0df7f36412" translate="yes" xml:space="preserve">
          <source>It specifies the underlying form field for the array. This is not used to render any HTML, but it is used to process the submitted data and validate it. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05cce6c98f6e4ace18c44a25c87ec03d8301899" translate="yes" xml:space="preserve">
          <source>It uses &lt;a href=&quot;../validators#django.core.validators.MinValueValidator&quot;&gt;&lt;code&gt;MinValueValidator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../validators#django.core.validators.MaxValueValidator&quot;&gt;&lt;code&gt;MaxValueValidator&lt;/code&gt;&lt;/a&gt; to validate the input based on the values that the default database supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5b12b84e0f758abb110dc6f71e3c4bf5bf680f" translate="yes" xml:space="preserve">
          <source>It uses &lt;a href=&quot;../validators#django.core.validators.validate_slug&quot;&gt;&lt;code&gt;validate_slug&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../validators#django.core.validators.validate_unicode_slug&quot;&gt;&lt;code&gt;validate_unicode_slug&lt;/code&gt;&lt;/a&gt; for validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d6064034be012d34362fa98f55318c001776ff" translate="yes" xml:space="preserve">
          <source>It uses these hooks to localize Web apps for particular users according to their preferences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5d75d3ebd51eebd293ed8c3115df3b47816a00" translate="yes" xml:space="preserve">
          <source>It will &lt;em&gt;not&lt;/em&gt; perform any permission checks, so it will be accessible to the general public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821786a5e1da87ecbbea2644ca4a4f5bcd23aca5" translate="yes" xml:space="preserve">
          <source>It will &lt;em&gt;not&lt;/em&gt; provide any header details to prevent caching. This means if the page retrieves data from the database, and caching middleware is active, the page could show outdated information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644c8f988574018f7fada47bc384adca96d5faf0" translate="yes" xml:space="preserve">
          <source>It will NOT compress content if any of the following are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c053e1a98707a94d9c800f51a24bc57417e353c" translate="yes" xml:space="preserve">
          <source>It works backwards, too. To refer to a &amp;ldquo;reverse&amp;rdquo; relationship, use the lowercase name of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3052615bd21fcc198bfe01f9395aa24f32d1ee" translate="yes" xml:space="preserve">
          <source>It works like this. Before calling a view function, Django starts a transaction. If the response is produced without problems, Django commits the transaction. If the view produces an exception, Django rolls back the transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314dada6f6b4efbe8278574634203c228e3dfd1b" translate="yes" xml:space="preserve">
          <source>It works like this: There are three slots for related Choices &amp;ndash; as specified by &lt;code&gt;extra&lt;/code&gt; &amp;ndash; and each time you come back to the &amp;ldquo;Change&amp;rdquo; page for an already-created object, you get another three extra slots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd652d964b8e8cbba1b0b82fa6fa4866bc842b4e" translate="yes" xml:space="preserve">
          <source>It works much like Django&amp;rsquo;s &lt;a href=&quot;syndication&quot;&gt;syndication framework&lt;/a&gt;. To create a sitemap, write a &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class and point to it in your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517efc2501dbd4f205ce9ac4a40724f67d48e4ba" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;d be inefficient and redundant to implement this sign up processing code twice, so the sites use the same code behind the scenes. But the &amp;ldquo;thank you for signing up&amp;rdquo; notice needs to be different for each site. By using &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; objects, we can abstract the &amp;ldquo;thank you&amp;rdquo; notice to use the values of the current site&amp;rsquo;s &lt;a href=&quot;#django.contrib.sites.models.Site.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.sites.models.Site.domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b07ba6619a8a9814858736f9737871f7ec3ee41" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;ll consist of two parts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9141677e2734b4ebcd76a1646f3a801a2b773b8" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a good idea to exploit the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; objects as much as possible, to remove unneeded complexity and redundancy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c820a5c6768751a8444aa072c6c6fa905ba2b39c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a good idea to keep all your virtual environments in one place, for example in &lt;code&gt;.virtualenvs/&lt;/code&gt; in your home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e597b7a72c214db394d011a7d980017dfb96bbf0" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a good idea to run your tests with Python warnings enabled: &lt;code&gt;python -Wa manage.py test&lt;/code&gt;. The &lt;code&gt;-Wa&lt;/code&gt; flag tells Python to display deprecation warnings. Django, like many other Python libraries, uses these warnings to flag when features are going away. It also might flag areas in your code that aren&amp;rsquo;t strictly wrong but could benefit from a better implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5205bb3db42b1f9e1a07a61d0d189eb75f732f1a" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a lot of work to design, build, test and maintain a web application. Many Python and Django projects share common problems. Wouldn&amp;rsquo;t it be great if we could save some of this repeated work?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98892641f79e54717e27729e6b3e830b31327667" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a mistake to think of tests merely as a negative aspect of development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f1771f69342fc15b09588915f707913ee328d7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a relatively common task to check whether a user has a particular permission. For that reason, Django provides a shortcut for that case: the &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt;&lt;code&gt;permission_required()&lt;/code&gt;&lt;/a&gt; decorator.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95c3e2c34569b1779186f9d0e9e6929e2596b80" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a sufficiently significant and powerful technique that Django includes a comprehensive caching framework, as well as other smaller pieces of caching functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d10c8c6b8bd3ff3bac051910da1ebe622e9680d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a very common idiom to load a template, fill a context and return an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object with the result of the rendered template. Django provides a shortcut. Here&amp;rsquo;s the full &lt;code&gt;index()&lt;/code&gt; view, rewritten:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be432822d72363028c0959e5520964f3225f08e1" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a very common idiom to use &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; and raise &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; if the object doesn&amp;rsquo;t exist. Django provides a shortcut. Here&amp;rsquo;s the &lt;code&gt;detail()&lt;/code&gt; view, rewritten:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471a415cfc5575d8283f9728454d7c7ddf752a92" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s actually sent twice: when the new value is applied (&amp;ldquo;setup&amp;rdquo;) and when the original value is restored (&amp;ldquo;teardown&amp;rdquo;). Use the &lt;code&gt;enter&lt;/code&gt; argument to distinguish between the two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a89891994672cfaa504284d854c34b4a0ef5768" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also important that you pass through the arguments that can be passed to the model method &amp;ndash; that&amp;rsquo;s what the &lt;code&gt;*args, **kwargs&lt;/code&gt; bit does. Django will, from time to time, extend the capabilities of built-in model methods, adding new arguments. If you use &lt;code&gt;*args,
**kwargs&lt;/code&gt; in your method definitions, you are guaranteed that your code will automatically support those arguments when they are added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efc3514c2fdb71e437dd068004f9bbbd27d0bd7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s applied globally to all views in your project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8809cf55ca136f973721940052ffe5caef0ffc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s common to have to call a class instance&amp;rsquo;s method more than once. If that function is expensive, then doing so can be wasteful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8a602e8f5da83ffdb845b5072b20d6cf4d49e9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s difficult to intuit how the ORM will translate complex querysets into SQL queries so when in doubt, inspect the SQL with &lt;code&gt;str(queryset.query)&lt;/code&gt; and write plenty of tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c33de3147bcaef08378b87591ea35eac5018b5" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s fairly rare for a new release of well-maintained software to be less efficient, but the maintainers can&amp;rsquo;t anticipate every possible use-case - so while being aware that newer versions are likely to perform better, don&amp;rsquo;t assume that they always will.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5824351282e0b44b78ffe29119839b3c3bb3ecc7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s generally a good idea to have the contenttypes framework installed; several of Django&amp;rsquo;s other bundled applications require it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014f23d80312be5d973dc29048745c41bfbff6a7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s given one or more model classes to register with the &lt;code&gt;ModelAdmin&lt;/code&gt;. If you&amp;rsquo;re using a custom &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt;, pass it using the &lt;code&gt;site&lt;/code&gt; keyword argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504b56f9c369f081939669c1db1001528d39f792" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s good practice to use &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.delete_test_cookie&quot;&gt;&lt;code&gt;delete_test_cookie()&lt;/code&gt;&lt;/a&gt; to clean up after yourself. Do this after you&amp;rsquo;ve verified that the test cookie worked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4304605a4bd63de40eceaad4bc60b970ac46f9b8" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s good practice to use &lt;code&gt;get_absolute_url()&lt;/code&gt; in templates, instead of hard-coding your objects&amp;rsquo; URLs. For example, this template code is bad:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd2a229206e4806f892693c442f1827099d489d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to add &lt;a href=&quot;../ref/models/instances#django.db.models.Model.__str__&quot;&gt;&lt;code&gt;__str__()&lt;/code&gt;&lt;/a&gt; methods to your models, not only for your own convenience when dealing with the interactive prompt, but also because objects&amp;rsquo; representations are used throughout Django&amp;rsquo;s automatically-generated admin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc15190392d26afa387fe6602061f27607a7f9fc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to have a clear idea what you mean by &amp;lsquo;performance&amp;rsquo;. There is not just one metric of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be98169dae8591e0cc8439594e2dacf35c8c196" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to realize that a Django field class is not what is stored in your model attributes. The model attributes contain normal Python objects. The field classes you define in a model are actually stored in the &lt;code&gt;Meta&lt;/code&gt; class when the model class is created (the precise details of how this is done are unimportant here). This is because the field classes aren&amp;rsquo;t necessary when you&amp;rsquo;re just creating and modifying attributes. Instead, they provide the machinery for converting between the attribute value and what is stored in the database or sent to the &lt;a href=&quot;../topics/serialization&quot;&gt;serializer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5df77fc8d383ebc768de094e8b3eec9652afccd" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to remember to call the superclass method &amp;ndash; that&amp;rsquo;s that &lt;code&gt;super().save(*args, **kwargs)&lt;/code&gt; business &amp;ndash; to ensure that the object still gets saved into the database. If you forget to call the superclass method, the default behavior won&amp;rsquo;t happen and the database won&amp;rsquo;t get touched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd5cb2de1d3cc3f6653c84e9c8b8ea45de47b43" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s impossible to use &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; when autocommit is turned off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb38c679f6a6c48fced09d83d829bb8f2faa2c58" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s meaningless to validate a form with no data, but, for the record, here&amp;rsquo;s what happens with unbound forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0cafee32a148eda36617cd8291bb6e3405dff5" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s no good just guessing or assuming where the inefficiencies lie in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0fe6720c1815fea6705c7a7c635a5eef6a5b59" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s not possible to mix a template variable inside a string within &lt;code&gt;{% trans
%}&lt;/code&gt;. If your translations require strings with variables (placeholders), use &lt;a href=&quot;#std:templatetag-blocktrans&quot;&gt;&lt;code&gt;{% blocktrans %}&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb12f4f7c51d654a37e1780fde3e22064747cba" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s not used by the development server (&lt;code&gt;runserver&lt;/code&gt;), but can be used by any ASGI server either in development or in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8f89a8b9a2f1613d09f12b03fc68f4a7741e89" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often possible to avoid explicitly having to handle forward references by taking care with the ordering of objects within a fixture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981625124dca80a0bf6ae3cbc3c96502e0fff8eb" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s only appropriate for HTTP &lt;code&gt;GET&lt;/code&gt; requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656acfbc1ff6a2acf248e9bf74b5e097a84323ae" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s optional, but recommended, to include detailed documentation with your app. Create an empty directory &lt;code&gt;django-polls/docs&lt;/code&gt; for future documentation. Add an additional line to &lt;code&gt;django-polls/MANIFEST.in&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd909e3a15dcb8cd50eed3fdd5287a154cb90918" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s perfectly OK to relate a model to one from another app. To do this, import the related model at the top of the file where your model is defined. Then, refer to the other model class wherever needed. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12343c40f18ca7655192d4ea8976d4b128d77726" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible &amp;ndash; and preferable &amp;ndash; to organize templates in subdirectories inside each directory containing templates. The convention is to make a subdirectory for each Django app, with subdirectories within those subdirectories as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25cfa1772c80752eed913282aa2ef519cdb812ab" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible that a request can come in via POST with an empty &lt;code&gt;POST&lt;/code&gt; dictionary &amp;ndash; if, say, a form is requested via the POST HTTP method but does not include form data. Therefore, you shouldn&amp;rsquo;t use &lt;code&gt;if request.POST&lt;/code&gt; to check for use of the POST method; instead, use &lt;code&gt;if request.method ==
&quot;POST&quot;&lt;/code&gt; (see &lt;a href=&quot;#django.http.HttpRequest.method&quot;&gt;&lt;code&gt;HttpRequest.method&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564f1c720851eec7a9b48849d7c849a75a7a8146" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to customize that character, or omit it entirely, using the &lt;code&gt;label_suffix&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f802f1d2017858d35732da049be5ea421bca251" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to declaratively remove a &lt;code&gt;Field&lt;/code&gt; inherited from a parent class by setting the name of the field to &lt;code&gt;None&lt;/code&gt; on the subclass. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00faa120a59687d5cfacd633db612d462d80f79" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to declaratively remove a &lt;code&gt;Field&lt;/code&gt; inherited from a parent class by setting the name to be &lt;code&gt;None&lt;/code&gt; on the subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ebde0ae552dfd952abe1bc7920a0a46d1d725d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to have a URL pattern which captures named keyword arguments, and also passes arguments with the same names in its dictionary of extra arguments. When this happens, the arguments in the dictionary will be used instead of the arguments captured in the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154d81e5f92ae5b0cc201686b8eb92c861bf4cf0" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to inherit from both &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;ModelForm&lt;/code&gt; simultaneously, however, you must ensure that &lt;code&gt;ModelForm&lt;/code&gt; appears first in the MRO. This is because these classes rely on different metaclasses and a class can only have one metaclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6080acb5e2b0d1d1c50068f3b2d31e59ea47c2" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to load templates from additional sources using custom template loaders. Custom &lt;code&gt;Loader&lt;/code&gt; classes should inherit from &lt;code&gt;django.template.loaders.base.Loader&lt;/code&gt; and define the &lt;code&gt;get_contents()&lt;/code&gt; and &lt;code&gt;get_template_sources()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69453e3cfadab898688cde4346b7c3203c55d089" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to store the tag results in a template variable rather than directly outputting it. This is done by using the &lt;code&gt;as&lt;/code&gt; argument followed by the variable name. Doing so enables you to output the content yourself where you see fit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d178eee9f824ef0def0504a80716cd71afb5a7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to subclass multiple forms, treating forms as mixins. In this example, &lt;code&gt;BeatleForm&lt;/code&gt; subclasses both &lt;code&gt;PersonForm&lt;/code&gt; and &lt;code&gt;InstrumentForm&lt;/code&gt; (in that order), and its field list includes the fields from the parent classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092b661ba6e72b73027d8e3675fba552c7999588" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s pretty common to style form rows and fields that are required or have errors. For example, you might want to present required form rows in bold and highlight errors in red.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116a53426c08ab9c723625b82855ecdb65d734a3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s recommended to leave the &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;SESSION_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt; setting on &lt;code&gt;True&lt;/code&gt; to prevent access to the stored data from JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f926096c05f4b08baaf98d68511f1fb871d7cc9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s required for preserving APIs that rely on a globally available, implicitly configured engine. Any other use is strongly discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c61e8f05c6a50e700712ba22de1bb672bbabc15" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s safe to use this filter on a string that has already gone through the &lt;a href=&quot;#std:templatefilter-urlencode&quot;&gt;&lt;code&gt;urlencode&lt;/code&gt;&lt;/a&gt; filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90004f94d411477597f8fcfc53e05fdd4c25bf29" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s sometimes useful to determine at startup time whether a piece of middleware should be used. In these cases, your middleware&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method may raise &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MiddlewareNotUsed&quot;&gt;&lt;code&gt;MiddlewareNotUsed&lt;/code&gt;&lt;/a&gt;. Django will then remove that middleware from the middleware process and log a debug message to the &lt;a href=&quot;../logging#django-request-logger&quot;&gt;django.request&lt;/a&gt; logger when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80aa528112e9e490aa5ed4ea2d9bc56ea614b01c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s sometimes useful to pre-populate your database with hard-coded data when you&amp;rsquo;re first setting up an app. You can provide initial data with migrations or fixtures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabb5fa7a2f760c58a8cc5008d218d9760bd2a65" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s suggested, but not required, that the name of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; field (&lt;code&gt;manufacturer&lt;/code&gt; in the example above) be the name of the model, lowercase. You can, of course, call the field whatever you want. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ccf51d0275c705c1c35c00156af244882b0ae3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s suggested, but not required, that the name of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;toppings&lt;/code&gt; in the example above) be a plural describing the set of related model objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b268cc70a442674129b98fc3845ba70970358f" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s tailored to the database you&amp;rsquo;re using, so database-specific field types such as &lt;code&gt;auto_increment&lt;/code&gt; (MySQL), &lt;code&gt;serial&lt;/code&gt; (PostgreSQL), or &lt;code&gt;integer
primary key autoincrement&lt;/code&gt; (SQLite) are handled for you automatically. Same goes for the quoting of field names &amp;ndash; e.g., using double quotes or single quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b04562da0b07d14aace68744d0353cd911e6bc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s tempting to write the above query as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb033e6a7bb18748df2f3c0678baacc2715f25c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s unlikely that you will want to interact directly with &lt;code&gt;SchemaEditor&lt;/code&gt; as a normal developer using Django, but if you want to write your own migration system, or have more advanced needs, it&amp;rsquo;s a lot nicer than writing SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6170244348e1c89e69f473c30e48d1cb65ebc165" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s unnecessary to force &lt;code&gt;Exists&lt;/code&gt; to refer to a single column, since the columns are discarded and a boolean result is returned. Similarly, since ordering is unimportant within an SQL &lt;code&gt;EXISTS&lt;/code&gt; subquery and would only degrade performance, it&amp;rsquo;s automatically removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28ef85bef282b391b1e7ce9e6a1cd15710ee46c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s used both by Django&amp;rsquo;s development server and in production WSGI deployments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a9f7ce4d688ce13e435ce877c2781fa2a5fda9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s used by the Django admin site, but you&amp;rsquo;re welcome to use it in your own code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453336f7b66590d003cde9e690939c83ac37a292" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s used to optimize Django&amp;rsquo;s own test suite, which contains hundreds of models but no relations between models in different applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92418ae3af49ec5210634e2bdaff7e544f90cc5" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s worth repeating: &lt;strong&gt;reaching for alternatives to software you&amp;rsquo;re already using is never the first answer to performance problems&lt;/strong&gt;. When you reach this level of optimization, you need a formal benchmarking solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73248e57635e9c9598528380f77d494c9f3a9bef" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s your responsibility to provide the html for the login template , called &lt;code&gt;registration/login.html&lt;/code&gt; by default. This template gets passed four template context variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6194af17afc43140b30fc03efe1a42a49325f5b3" translate="yes" xml:space="preserve">
          <source>Iterate over the file yielding &amp;ldquo;chunks&amp;rdquo; of a given size. &lt;code&gt;chunk_size&lt;/code&gt; defaults to 64 KB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de333b2cbf5d70dfa378153240a6390f38e295c" translate="yes" xml:space="preserve">
          <source>Iterate over the file yielding one line at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64181e92073030143f46bbc584cc34cdb69c2178" translate="yes" xml:space="preserve">
          <source>Iterates over the points in a &lt;a href=&quot;#django.contrib.gis.gdal.LineString&quot;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt;, the rings in a &lt;a href=&quot;#django.contrib.gis.gdal.Polygon&quot;&gt;&lt;code&gt;Polygon&lt;/code&gt;&lt;/a&gt;, or the geometries in a &lt;a href=&quot;#django.contrib.gis.gdal.GeometryCollection&quot;&gt;&lt;code&gt;GeometryCollection&lt;/code&gt;&lt;/a&gt;. Not applicable to other geometry types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3128c83b0869b9fd38f7441368e4805f2bc3963b" translate="yes" xml:space="preserve">
          <source>Iterating over a formset will render the forms in the order they were created. You can change this order by providing an alternate implementation for the &lt;code&gt;__iter__()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f479cac5e7c5d3ad5f478dcb761f931ee9c46cf" translate="yes" xml:space="preserve">
          <source>Its default &lt;code&gt;Content-Type&lt;/code&gt; header is set to &lt;code&gt;application/json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9c5647ed1e6b7f5146c076bc141e3b0a23011d" translate="yes" xml:space="preserve">
          <source>Its default implementation returns &lt;a href=&quot;#django.contrib.admin.ModelAdmin.sortable_by&quot;&gt;&lt;code&gt;sortable_by&lt;/code&gt;&lt;/a&gt; if it&amp;rsquo;s set, otherwise it defers to &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_display&quot;&gt;&lt;code&gt;get_list_display()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="fcf29f6cad3232704b33e962ef5194fad3b6817b" translate="yes" xml:space="preserve">
          <source>Japan</source>
          <target state="translated">Japan</target>
        </trans-unit>
        <trans-unit id="3e794545b69f251b3029e4944b37bdd0893d7ebc" translate="yes" xml:space="preserve">
          <source>JavaScript code doesn&amp;rsquo;t have access to &lt;code&gt;.po&lt;/code&gt; or &lt;code&gt;.mo&lt;/code&gt; files; they need to be delivered by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a7b6649b485d9113794ac7d0b0b25e428c33aa" translate="yes" xml:space="preserve">
          <source>JavaScript code doesn&amp;rsquo;t have access to a &lt;code&gt;gettext&lt;/code&gt; implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09dc489aa0b5f5532a33d3276d7a485bd5f67e2d" translate="yes" xml:space="preserve">
          <source>JavaScript customizations in the admin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce39e0711bfdc751337a274c52d094f106ca490" translate="yes" xml:space="preserve">
          <source>Join chains can be as deep as you require. For example, to extract the age of the youngest author of any book available for sale, you could issue the query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369d197d5e95511bed79dd647091cfb1ff0732bf" translate="yes" xml:space="preserve">
          <source>Join the &lt;code&gt;#geodjango&lt;/code&gt; IRC channel on Freenode. Please be patient and polite &amp;ndash; while you may not get an immediate response, someone will attempt to answer your question as soon as they see it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ad30957afcec67d4756a8b85b0dff0032054c3" translate="yes" xml:space="preserve">
          <source>Joins a list with a string, like Python&amp;rsquo;s &lt;code&gt;str.join(list)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d2e961ad458e7666b83ecad02e5ba87d5f28bf" translate="yes" xml:space="preserve">
          <source>Joins and aggregates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4414f263334ff3637fe5ef567af2d40056a830d8" translate="yes" xml:space="preserve">
          <source>Jumps you from any page to the documentation for the view that generates that page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc4426c8e81f8c006f5531c90d6d6f6c895431d" translate="yes" xml:space="preserve">
          <source>Just as &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; accepts the names of the content-type and object-ID fields as arguments, so too does &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt;; if the model which has the generic foreign key is using non-default names for those fields, you must pass the names of the fields when setting up a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt; to it. For example, if the &lt;code&gt;TaggedItem&lt;/code&gt; model referred to above used fields named &lt;code&gt;content_type_fk&lt;/code&gt; and &lt;code&gt;object_primary_key&lt;/code&gt; to create its generic foreign key, then a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt; back to it would need to be defined like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e413dffa03320c671fc31e6cb89283fb49b6d92" translate="yes" xml:space="preserve">
          <source>Just as the &lt;code&gt;login_required&lt;/code&gt; decorator, this mixin does NOT check the &lt;code&gt;is_active&lt;/code&gt; flag on a user, but the default &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; reject inactive users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de70aed3380b12491dedb45769ad91fb49e553be" translate="yes" xml:space="preserve">
          <source>Just as with Python&amp;rsquo;s subclassing, it&amp;rsquo;s possible for a Django model to inherit from multiple parent models. Keep in mind that normal Python name resolution rules apply. The first base class that a particular name (e.g. &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;) appears in will be the one that is used; for example, this means that if multiple parents contain a &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class, only the first one is going to be used, and all others will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4940cb973e951c23fc5b25e3c6c874837d4c5a9" translate="yes" xml:space="preserve">
          <source>Just be aware that this logic will disable the signals whenever fixtures are deserialized, not just during &lt;code&gt;loaddata&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddab42e3dcb6c903e2f4186535cb27873150c70a" translate="yes" xml:space="preserve">
          <source>Just for completeness, these are the corresponding fragments of the resulting &lt;code&gt;.po&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01310d24cc2563fbb23357235b729b519dca1534" translate="yes" xml:space="preserve">
          <source>Just for completeness, this is the corresponding fragment of the resulting &lt;code&gt;.po&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6cf235d242effb3cde80d1d3c4a76eb03cbc760" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; provides a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_urls&quot;&gt;&lt;code&gt;get_urls()&lt;/code&gt;&lt;/a&gt; method that can be overridden to define additional views for the site. To add a new view to your admin site, extend the base &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_urls&quot;&gt;&lt;code&gt;get_urls()&lt;/code&gt;&lt;/a&gt; method to include a pattern for your new view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1958cb9d96b5b5be5f6e75b1b2cd4481da5abfe0" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt; is only available on &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;s where &lt;code&gt;null=True&lt;/code&gt; and it also accepts the &lt;code&gt;bulk&lt;/code&gt; keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e99592c259163ce6dbd69040fb145ee105a4073" translate="yes" xml:space="preserve">
          <source>Just like a &lt;a href=&quot;#django.forms.ChoiceField&quot;&gt;&lt;code&gt;ChoiceField&lt;/code&gt;&lt;/a&gt;, except &lt;a href=&quot;#django.forms.TypedChoiceField&quot;&gt;&lt;code&gt;TypedChoiceField&lt;/code&gt;&lt;/a&gt; takes two extra arguments, &lt;a href=&quot;#django.forms.TypedChoiceField.coerce&quot;&gt;&lt;code&gt;coerce&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.forms.TypedChoiceField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b0b87bee7c21e20da396fc1d6d1687daac3247" translate="yes" xml:space="preserve">
          <source>Just like a &lt;a href=&quot;#django.forms.MultipleChoiceField&quot;&gt;&lt;code&gt;MultipleChoiceField&lt;/code&gt;&lt;/a&gt;, except &lt;a href=&quot;#django.forms.TypedMultipleChoiceField&quot;&gt;&lt;code&gt;TypedMultipleChoiceField&lt;/code&gt;&lt;/a&gt; takes two extra arguments, &lt;code&gt;coerce&lt;/code&gt; and &lt;code&gt;empty_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce399875d14fc7e29388d5d484a88d69f11646e" translate="yes" xml:space="preserve">
          <source>Just like its parent, you can use it to write tests that involve running the code under test and consuming it with testing tools through HTTP (e.g. Selenium, PhantomJS, etc.), because of which it&amp;rsquo;s needed that the static assets are also published.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f6a81f08cd9496daefb06e9bff0b819aed3764" translate="yes" xml:space="preserve">
          <source>Just like normal form validation, model form validation is triggered implicitly when calling &lt;a href=&quot;../../ref/forms/api#django.forms.Form.is_valid&quot;&gt;&lt;code&gt;is_valid()&lt;/code&gt;&lt;/a&gt; or accessing the &lt;a href=&quot;../../ref/forms/api#django.forms.Form.errors&quot;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; attribute and explicitly when calling &lt;code&gt;full_clean()&lt;/code&gt;, although you will typically not use the latter method in practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06c66c76254d542b0c24ce243a1c9fe4392a7fb" translate="yes" xml:space="preserve">
          <source>Just like templates, we &lt;em&gt;might&lt;/em&gt; be able to get away with putting our static files directly in &lt;code&gt;polls/static&lt;/code&gt; (rather than creating another &lt;code&gt;polls&lt;/code&gt; subdirectory), but it would actually be a bad idea. Django will choose the first static file it finds whose name matches, and if you had a static file with the same name in a &lt;em&gt;different&lt;/em&gt; application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the best way to ensure this is by &lt;em&gt;namespacing&lt;/em&gt; them. That is, by putting those static files inside &lt;em&gt;another&lt;/em&gt; directory named for the application itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7289d3c27d2fa895a412e9d11cd8822f7f37b6" translate="yes" xml:space="preserve">
          <source>Just like the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt; method, permission names take the form &lt;code&gt;&quot;&amp;lt;app label&amp;gt;.&amp;lt;permission codename&amp;gt;&quot;&lt;/code&gt; (i.e. &lt;code&gt;polls.can_vote&lt;/code&gt; for a permission on a model in the &lt;code&gt;polls&lt;/code&gt; application).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d2469802382e4391a866a9fb73e4fc396b25f5" translate="yes" xml:space="preserve">
          <source>Just like the static files, we &lt;em&gt;could&lt;/em&gt; have all our templates together, in one big templates directory, and it would work perfectly well. However, templates that belong to a particular application should be placed in that application&amp;rsquo;s template directory (e.g. &lt;code&gt;polls/templates&lt;/code&gt;) rather than the project&amp;rsquo;s (&lt;code&gt;templates&lt;/code&gt;). We&amp;rsquo;ll discuss in more detail in the &lt;a href=&quot;reusable-apps&quot;&gt;reusable apps tutorial&lt;/a&gt;&lt;em&gt;why&lt;/em&gt; we do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9eb249d0ce5416cf8a379b2da632734988f8a3a" translate="yes" xml:space="preserve">
          <source>Just like when using a normal &lt;code&gt;Form&lt;/code&gt;, each field in a formset&amp;rsquo;s forms may include HTML attributes such as &lt;code&gt;maxlength&lt;/code&gt; for browser validation. However, form fields of formsets won&amp;rsquo;t include the &lt;code&gt;required&lt;/code&gt; attribute as that validation may be incorrect when adding and deleting forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29395b2e5e9f3683720df2e4f68ed2605ac0624" translate="yes" xml:space="preserve">
          <source>Just like with &lt;a href=&quot;#translator-comments&quot;&gt;Python code&lt;/a&gt;, these notes for translators can be specified using comments, either with the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-comment&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/a&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6840dc42a3514ed5409fad17eb45a2dde935b7fb" translate="yes" xml:space="preserve">
          <source>Just like with &lt;code&gt;ModelForms&lt;/code&gt;, by default the &lt;code&gt;clean()&lt;/code&gt; method of a &lt;code&gt;ModelFormSet&lt;/code&gt; will validate that none of the items in the formset violate the unique constraints on your model (either &lt;code&gt;unique&lt;/code&gt;, &lt;code&gt;unique_together&lt;/code&gt; or &lt;code&gt;unique_for_date|month|year&lt;/code&gt;). If you want to override the &lt;code&gt;clean()&lt;/code&gt; method on a &lt;code&gt;ModelFormSet&lt;/code&gt; and maintain this validation, you must call the parent class&amp;rsquo;s &lt;code&gt;clean&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abd3775005f0aef3b58a9511045767bf75536c1" translate="yes" xml:space="preserve">
          <source>Just like you would do in &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; you should provide a lowercase verbose name text for the relation as Django will automatically titlecase it when required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4552dc59351c35a92143d1798b6cb8566638b9ec" translate="yes" xml:space="preserve">
          <source>KML is an XML language focused on geographic visualization &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. &lt;code&gt;KMLSitemap&lt;/code&gt; and its compressed counterpart &lt;code&gt;KMZSitemap&lt;/code&gt; allow you to present geolocated data in a machine-readable format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d3425cd39c677fd086d00da0b180224309c02d" translate="yes" xml:space="preserve">
          <source>Keep and/or add any entries in this list if you need Django to &lt;a href=&quot;#password-upgrades&quot;&gt;upgrade passwords&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742aa74832a6e4eeffec8dce24ca986cd98d8c09" translate="yes" xml:space="preserve">
          <source>Keep in mind that &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; uses any default related model ordering that has been defined. You might have to explicitly order by the relation &lt;code&gt;_id&lt;/code&gt; or referenced field to make sure the &lt;code&gt;DISTINCT ON&lt;/code&gt; expressions match those at the beginning of the &lt;code&gt;ORDER BY&lt;/code&gt; clause. For example, if the &lt;code&gt;Blog&lt;/code&gt; model defined an &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; by &lt;code&gt;name&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7459a01ee1258dd537399c8de7e686ccdee573bc" translate="yes" xml:space="preserve">
          <source>Keep in mind that each of these values can be an expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a533618d8eaf3b030222e4a118ed6bae06ff24" translate="yes" xml:space="preserve">
          <source>Keep in mind that for the dot operator, dictionary key lookup takes precedence over method lookup. Therefore if the &lt;code&gt;data&lt;/code&gt; dictionary contains a key named &lt;code&gt;'items'&lt;/code&gt;, &lt;code&gt;data.items&lt;/code&gt; will return &lt;code&gt;data['items']&lt;/code&gt; instead of &lt;code&gt;data.items()&lt;/code&gt;. Avoid adding keys that are named like dictionary methods if you want to use those methods in a template (&lt;code&gt;items&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, etc.). Read more about the lookup order of the dot operator in the &lt;a href=&quot;language#template-variables&quot;&gt;documentation of template variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e9d273542c1bb70193eff1962287317d2800d3" translate="yes" xml:space="preserve">
          <source>Keep in mind that this will, whenever possible, be executed purely in SQL, and so the &lt;code&gt;delete()&lt;/code&gt; methods of individual object instances will not necessarily be called during the process. If you&amp;rsquo;ve provided a custom &lt;code&gt;delete()&lt;/code&gt; method on a model class and want to ensure that it is called, you will need to &amp;ldquo;manually&amp;rdquo; delete instances of that model (e.g., by iterating over a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; and calling &lt;code&gt;delete()&lt;/code&gt; on each object individually) rather than using the bulk &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method of a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83814bcad4f812320613b08460a501a47d3a6c5e" translate="yes" xml:space="preserve">
          <source>Keep this caching behavior in mind, because it may bite you if you don&amp;rsquo;t use your &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;s correctly. For example, the following will create two &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;s, evaluate them, and throw them away:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24c7b24e7c1e67f6e64f8bbf3e3867d93a0e6c0" translate="yes" xml:space="preserve">
          <source>Keep this in mind when creating your own custom fields. The Django &lt;code&gt;Field&lt;/code&gt; subclass you write provides the machinery for converting between your Python instances and the database/serializer values in various ways (there are differences between storing a value and using a value for lookups, for example). If this sounds a bit tricky, don&amp;rsquo;t worry &amp;ndash; it will become clearer in the examples below. Just remember that you will often end up creating two classes when you want a custom field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6468bfe1b90d6cd3667c5baf1e3e836324d1e401" translate="yes" xml:space="preserve">
          <source>Keep your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; a secret.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bf666ca636cb39858bb367c2938c163eee182a" translate="yes" xml:space="preserve">
          <source>Keeping all user related information in one model removes the need for additional or more complex database queries to retrieve related models. On the other hand, it may be more suitable to store app-specific user information in a model that has a relation with your custom user model. That allows each app to specify its own user data requirements without potentially conflicting or breaking assumptions by other apps. It also means that you would keep your user model as simple as possible, focused on authentication, and following the minimum requirements Django expects custom user models to meet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="8b81e1ecde65f43dd86891e55d0a4672b89353ce" translate="yes" xml:space="preserve">
          <source>Key lookups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df16181be8da903a9ea0bcf833d332c01485cc71" translate="yes" xml:space="preserve">
          <source>Key, index, and path lookups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b5e092dff22a227c99dc4ed720addb67e119e9" translate="yes" xml:space="preserve">
          <source>Keyword Argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db32172db3cd21ae36313d815fba0dd39bd7127a" translate="yes" xml:space="preserve">
          <source>Keyword Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e263b622ac66480a12aa8dc09139beb9f6e104" translate="yes" xml:space="preserve">
          <source>Keyword argument queries &amp;ndash; in &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, etc. &amp;ndash; are &amp;ldquo;AND&amp;rdquo;ed together. If you need to execute more complex queries (for example, queries with &lt;code&gt;OR&lt;/code&gt; statements), you can use &lt;a href=&quot;../../ref/models/querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ec8760b0d3dc8d48fb4e0610ab19607da95cff" translate="yes" xml:space="preserve">
          <source>Keyword arguments allow you to change the message level, add extra CSS tags, or fail silently if the &lt;code&gt;contrib.messages&lt;/code&gt; framework is not installed. These keyword arguments match those for &lt;a href=&quot;../messages#django.contrib.messages.add_message&quot;&gt;&lt;code&gt;django.contrib.messages.add_message()&lt;/code&gt;&lt;/a&gt;, see that function&amp;rsquo;s documentation for more details. One difference is that the level may be passed as a string label in addition to integer/constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c047d4fa560655a4c9b137b6ae6b7f96f9bb33" translate="yes" xml:space="preserve">
          <source>Keyword arguments that can provide extra context for the SQL generated by the aggregate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa8b79bb0bea1bbd3b43612463d464bd5a74adc" translate="yes" xml:space="preserve">
          <source>Kilometre, Kilometer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e617bafa47d9a4ed6de9204fc070360a5cc8706" translate="yes" xml:space="preserve">
          <source>KyngChaos</source>
          <target state="translated">KyngChaos</target>
        </trans-unit>
        <trans-unit id="cbc770cf346b5261fa6de79f704a15a53242cf2d" translate="yes" xml:space="preserve">
          <source>KyngChaos packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b153eb78e99d2e3e01e42e23731bfe05df63eb8b" translate="yes" xml:space="preserve">
          <source>LJWorld.com and Lawrence.com both have email alert functionality, which lets readers sign up to get notifications when news happens. It&amp;rsquo;s pretty basic: A reader signs up on a Web form and immediately gets an email saying, &amp;ldquo;Thanks for your subscription.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87e855f857da475f822ad7e332f47b0210e6b27" translate="yes" xml:space="preserve">
          <source>LOB columns may not be used as primary keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37a4fdbe1b9352a7f800671735935bf512cbbc1" translate="yes" xml:space="preserve">
          <source>LOB columns may not be used in a &lt;code&gt;SELECT DISTINCT&lt;/code&gt; list. This means that attempting to use the &lt;code&gt;QuerySet.distinct&lt;/code&gt; method on a model that includes &lt;code&gt;TextField&lt;/code&gt; columns will result in an &lt;code&gt;ORA-00932&lt;/code&gt; error when run against Oracle. As a workaround, use the &lt;code&gt;QuerySet.defer&lt;/code&gt; method in conjunction with &lt;code&gt;distinct()&lt;/code&gt; to prevent &lt;code&gt;TextField&lt;/code&gt; columns from being included in the &lt;code&gt;SELECT DISTINCT&lt;/code&gt; list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23aa061f34d8daee01c85141530845ac93ba30f7" translate="yes" xml:space="preserve">
          <source>LOB columns may not be used in indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0d617fe578d453561df393b035a56559df8484" translate="yes" xml:space="preserve">
          <source>LOCALE_PATHS, LANGUAGE_CODE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9dfe5041cd205445df5b843e8a9dc628256415" translate="yes" xml:space="preserve">
          <source>Lambdas</source>
          <target state="translated">Lambdas</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="15cf7920bc40aa026228a895b90198998e1c661b" translate="yes" xml:space="preserve">
          <source>Language cookie</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2313e70fc3b44edd797d4ee37ae99cf5b536f9e" translate="yes" xml:space="preserve">
          <source>Language prefix in URL patterns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5706fe49707b39d9d0ba70c9ad9195dbfd8428b" translate="yes" xml:space="preserve">
          <source>Large directories with many files may cause performance issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a2147848cda23e4068f8ecbe6f03cd2754422c" translate="yes" xml:space="preserve">
          <source>Lastly, your check function must be registered explicitly with system check registry. Checks should be registered in a file that&amp;rsquo;s loaded when your application is loaded; for example, in the &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;AppConfig.ready()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccbd0691e5899de74565a225b47115af7e41eb95" translate="yes" xml:space="preserve">
          <source>Later on we use the term &lt;em&gt;packaging&lt;/em&gt; to describe the process of making a Python package easy for others to install. It can be a little confusing, we know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf20c881e0dc069882fc7e5d606a7b61cb53816e" translate="yes" xml:space="preserve">
          <source>LayerMapping data import utility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb48363145bff612fcd9f60ac338f08d9514585" translate="yes" xml:space="preserve">
          <source>Laziness allows us to refer to things before they are instantiated, or even before it&amp;rsquo;s possible to instantiate them. This has numerous uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7306ad109bfe4aa0d559571e47ed10b95c1acd7e" translate="yes" xml:space="preserve">
          <source>Laziness in Django</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db8ab131c503038349926561b42c112352a10ec" translate="yes" xml:space="preserve">
          <source>Laziness is also a way to save effort by trying to avoid work in the first place. That is, one aspect of laziness is not doing anything until it has to be done, because it may not turn out to be necessary after all. Laziness can therefore have performance implications, and the more expensive the work concerned, the more there is to gain through laziness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6579907e4a7f45362bf94f354f36722b584440" translate="yes" xml:space="preserve">
          <source>Lazy Geometries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da11f4eec7970e01e777c79bbd1f868cda4bd15" translate="yes" xml:space="preserve">
          <source>Lazy translation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6bad0f45a94e2a01930bb1020eff0a76e76f44" translate="yes" xml:space="preserve">
          <source>Lazy translations and plural</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1f34a5739405246bd9919b678f713ac631fed7" translate="yes" xml:space="preserve">
          <source>Learn about some other core functionalities of the Django framework:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1ab011ef2c624e2c7031f6c7a9d37cc55f1cf3" translate="yes" xml:space="preserve">
          <source>Learn about the development process for the Django project itself and about how you can contribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3354aecddee7d995b534cf8538581af1f6c203" translate="yes" xml:space="preserve">
          <source>Learn about the various components and tools to help you in the development and testing of Django applications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824d76b124e6289f372e2ff6bcba91e8939343bd" translate="yes" xml:space="preserve">
          <source>Learn more</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ab6cb67a17a1c6e360ed241bd2dda3b974e3d3" translate="yes" xml:space="preserve">
          <source>Learns what headers to take into account for some request path from the response object. It stores those headers in a global path registry so that later access to that path will know what headers to take into account without building the response object itself. The headers are named in the &lt;code&gt;Vary&lt;/code&gt; header of the response, but we want to prevent response generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09777de5be0a68a212ac9f63799746f9d808d38b" translate="yes" xml:space="preserve">
          <source>Leaving this setting off isn&amp;rsquo;t a good idea because an attacker could capture an unencrypted session cookie with a packet sniffer and use the cookie to hijack the user&amp;rsquo;s session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083e90c2b3005bc225a03c2abdf03d369325f963" translate="yes" xml:space="preserve">
          <source>Left-aligns the value in a field of a given width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02227b0f0b9337ad694cb0213155cb14a60b4fc" translate="yes" xml:space="preserve">
          <source>Less than or equal to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c669caad45b8802c1bb872ff0703e13b665fba" translate="yes" xml:space="preserve">
          <source>Less than or equal to. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d2a5fe11e0306023d56f6e8912a222594ed047" translate="yes" xml:space="preserve">
          <source>Less than.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c4349122b9bb7576d0d61f7a88e8edd3726822" translate="yes" xml:space="preserve">
          <source>Less than. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c841a65c7f1c3eccf8b28668b87263bfc640fcff" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s also add a custom method to this model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c13e4563c320f96f46850c604f3f010e32fc04d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s assume you have a blog system, with an &lt;code&gt;Entry&lt;/code&gt; model, and you want your sitemap to include all the links to your individual blog entries. Here&amp;rsquo;s how your sitemap class might look:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c225b116fcb368350be69537d8c022103cd45ec" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s convert our poll app to use the generic views system, so we can delete a bunch of our own code. We&amp;rsquo;ll have to take a few steps to make the conversion. We will:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37107c1b14b06985400cce64f2c0cee8e51e7116" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a &lt;code&gt;ContactForm&lt;/code&gt; to demonstrate how you&amp;rsquo;d use this field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc48aeca8eda2b4682b3d6e61de76f5755e853cc" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s dive right in. Create a file called &lt;code&gt;admin.py&lt;/code&gt; inside the &lt;code&gt;world&lt;/code&gt; application with the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79da13085a3608464e32b76daf1a4b750cb3a395" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s examine case-insensitive transformations here. This transformation isn&amp;rsquo;t very useful in practice as Django already comes with a bunch of built-in case-insensitive lookups, but it will be a nice demonstration of bilateral transformations in a database-agnostic way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c7bb390f8a74d36b4ee2f29857af8f287892c8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s first create a custom form field that validates its input is a string containing comma-separated email addresses. The full class looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187a2d21db52b3e5410be8c2a3c86fdac14a40b4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s learn by example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb3c9be87e64709bf5f0c1265d580cb8272df73" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at an example to see how this works. If you already have the &lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt;&lt;code&gt;contenttypes&lt;/code&gt;&lt;/a&gt; application installed, and then add &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;the sites application&lt;/code&gt;&lt;/a&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and run &lt;code&gt;manage.py migrate&lt;/code&gt; to install it, the model &lt;a href=&quot;sites#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;django.contrib.sites.models.Site&lt;/code&gt;&lt;/a&gt; will be installed into your database. Along with it a new instance of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; will be created with the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b482ca18f2f08a83d3ec431b921de771f9948555" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how two of Django&amp;rsquo;s generic class-based views are built out of mixins providing discrete functionality. We&amp;rsquo;ll consider &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;, which renders a &amp;ldquo;detail&amp;rdquo; view of an object, and &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt;, which will render a list of objects, typically from a queryset, and optionally paginate them. This will introduce us to four mixins which between them provide useful functionality when working with either a single Django object, or multiple objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffefad313aa5954a7172dc72b1d07b889da725a8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at some of these more closely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010769fda27e004183327e34d1bc70963b10f512" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at template inheritance by starting with an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d7d95000f7a31233733941186d880e813c5ba9" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the SQL that will generate the table for the &lt;code&gt;WorldBorder&lt;/code&gt; model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58cc92a0a67b5a9a26020d7c3a1539bddac1b9c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at what &lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; created:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0916a74a448227e847bd0ae1c7a1ee8b3a78ac6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s refactor our &lt;code&gt;CycleNode&lt;/code&gt; implementation to use the &lt;code&gt;render_context&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61527bb6f9f99fa92fe94f8a54144255e683d9a4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s reproduce this error by comparing a naive and an aware datetime:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6172a55db4a398066cf2f300f7a317aae4b91ea" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say the &lt;code&gt;news/year_archive.html&lt;/code&gt; template was found. Here&amp;rsquo;s what that might look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8498358e4e316a59220a51bcfc584545251953d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we want to change the &lt;code&gt;account_type&lt;/code&gt; for our clients to match their registration dates. We can do this using a conditional expression and the &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674775ae6b8f711b93b934fc943f13569ff5e193" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we&amp;rsquo;re writing a backend for Microsoft&amp;rsquo;s SQL Server which uses the SQL &lt;code&gt;LEN&lt;/code&gt; instead of &lt;code&gt;LENGTH&lt;/code&gt; for the &lt;a href=&quot;database-functions#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt; function. We&amp;rsquo;ll monkey patch a new method called &lt;code&gt;as_sqlserver()&lt;/code&gt; onto the &lt;code&gt;Length&lt;/code&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbadd9a8d68743fcc57b910b725e2c6420e8e5f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you were starting a new project that needed a polls app like the one we&amp;rsquo;ve been working on. How do you make this app reusable? Luckily, you&amp;rsquo;re well on the way already. In &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt;, we saw how we could decouple polls from the project-level URLconf using an &lt;code&gt;include&lt;/code&gt;. In this tutorial, we&amp;rsquo;ll take further steps to make the app easy to use in new projects and ready to publish for others to install and use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4547f3c6ed9ab627755ced07c0ef98ea5492c5d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you&amp;rsquo;re developing your Django application and have a &amp;ldquo;pristine&amp;rdquo; copy of a database that you&amp;rsquo;d like to interact with. You can dump your database to a fixture (using the &lt;a href=&quot;#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; command, explained above), then use &lt;code&gt;testserver&lt;/code&gt; to run your Web application with that data. With this arrangement, you have the flexibility of messing up your data in any way, knowing that whatever data changes you&amp;rsquo;re making are only being made to a test database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e592833b5543bdeb8888157baa74642a61fc297" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you&amp;rsquo;re trying to override the templates for a third-party application called &lt;code&gt;blog&lt;/code&gt;, which provides the templates &lt;code&gt;blog/post.html&lt;/code&gt; and &lt;code&gt;blog/list.html&lt;/code&gt;. The relevant settings for your project would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a78da4f0f96ccaa8818c94601b3d212850c1086" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how it works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06a71efa03ee78ba69e395440cf513c47c8c2b5" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how this works by registering a signal that gets called after each HTTP request is finished. We&amp;rsquo;ll be connecting to the &lt;a href=&quot;../ref/signals#django.core.signals.request_finished&quot;&gt;&lt;code&gt;request_finished&lt;/code&gt;&lt;/a&gt; signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febf35219c9a28beaf6a9acbff3a5277afa2d816" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how this works by reordering the fields on the edit form. Replace the &lt;code&gt;admin.site.register(Question)&lt;/code&gt; line with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6404ea57f576d05b9c8fbca7fa5c5d63fa43f83f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start by looking at some examples of showing a list of objects or an individual object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1551f600d211b9d0023bac9d0cb4fadb9a4233e4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with a small custom lookup. We will write a custom lookup &lt;code&gt;ne&lt;/code&gt; which works opposite to &lt;code&gt;exact&lt;/code&gt;. &lt;code&gt;Author.objects.filter(name__ne='Jack')&lt;/code&gt; will translate to the SQL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423531172bf446e55a2e04f7a1a96cecf1db8ece" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with model fields. If you break it down, a model field provides a way to take a normal Python object &amp;ndash; string, boolean, &lt;code&gt;datetime&lt;/code&gt;, or something more complex like &lt;code&gt;Hand&lt;/code&gt; &amp;ndash; and convert it to and from a format that is useful when dealing with the database. (Such a format is also useful for serialization, but as we&amp;rsquo;ll see later, that is easier once you have the database side under control).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f46797d9a8d056443aa92c8f4619748862100fb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s step through this code one line at a time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94aa51d90972b01afb689b3d1a89d3eb901bb673" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look inside a couple of those files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccd1c870a0a4dcf400d08d947411ab954b771e6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try this with an example. Normally, one might do something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504babc6e275812ba81c4391fb57ae519e3510d7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try with some invalid data. In this case, &lt;code&gt;subject&lt;/code&gt; is blank (an error, because all fields are required by default) and &lt;code&gt;sender&lt;/code&gt; is not a valid email address:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2190c9fc23eb29106134f7ad4a9ace95beaf6b8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s update our poll detail template (&amp;ldquo;polls/detail.html&amp;rdquo;) from the last tutorial, so that the template contains an HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2632c1e8aa342b4a8b2b77fdaa7894b3813e8647" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s verify your Django project works. Change into the outer &lt;code&gt;mysite&lt;/code&gt; directory, if you haven&amp;rsquo;t already, and run the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7481c3803bbb2daeb5381bc49b0b54a65124b8cb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s walk through this example. &lt;code&gt;{% regroup %}&lt;/code&gt; takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we&amp;rsquo;re regrouping the &lt;code&gt;cities&lt;/code&gt; list by the &lt;code&gt;country&lt;/code&gt; attribute and calling the result &lt;code&gt;country_list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3cf48e50eddc3fba400217aaf336f782eaf8e5" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s write a migration that populates our new &lt;code&gt;name&lt;/code&gt; field with the combined values of &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; (we&amp;rsquo;ve come to our senses and realized that not everyone has first and last names). All we need to do is use the historical model and iterate over the rows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bb27cf6e20079aabce85127956f8d966f68f12" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s write the first view. Open the file &lt;code&gt;polls/views.py&lt;/code&gt; and put the following Python code in it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f407590b229000b90afe5cd5954958752ddd121" translate="yes" xml:space="preserve">
          <source>Lets you create a formset with the ability to order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02187affceb445e9305a60658d3c066c7db16fa" translate="yes" xml:space="preserve">
          <source>Lets you create a formset with the ability to select forms for deletion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f556c30e0a0e7632f1adaf69376f9c9a698f371c" translate="yes" xml:space="preserve">
          <source>Lets you pass a command as a string to execute it as Django, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df65069d0885fd61cd4c2cc0c08459bf7ec10caa" translate="yes" xml:space="preserve">
          <source>Lets you specify the URL that users who don&amp;rsquo;t pass the test will be redirected to. It may be a login page and defaults to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt; if you don&amp;rsquo;t specify one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7f7f5bed464663e88c2d9517ab5e284fa91f09" translate="yes" xml:space="preserve">
          <source>Level Constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b954a0887add52752e06674c9d7013c57e040fe0" translate="yes" xml:space="preserve">
          <source>Libraries can be loaded by passing the corresponding dictionary key to the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29808eb5cb44255de14dac59aefcc411b6547528" translate="yes" xml:space="preserve">
          <source>Libraries can be loaded by passing the corresponding dictionary key to the &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3f991e900143285adef8fbb526e8ab6f02c275" translate="yes" xml:space="preserve">
          <source>Library Requirements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac58e4217af56e3a1ba8bec5e4dcc9685aa92add" translate="yes" xml:space="preserve">
          <source>Library environment settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5b2a062f05dd148b4ef24c76639416ebcc59f3" translate="yes" xml:space="preserve">
          <source>Licensed under the BSD License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e57aeb5cde6d590a20ba69d32dc0a71347311b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.BooleanField&quot;&gt;&lt;code&gt;BooleanField&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;null=True&lt;/code&gt;. Use that instead of this field as it&amp;rsquo;s likely to be deprecated in a future version of Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d863c349005f0af90c7f401e7734ee9139cec79f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt;&lt;code&gt;unique_for_date&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Field.unique_for_month&quot;&gt;&lt;code&gt;unique_for_month&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb204156411d2f4610b450ea6f4198604fc63ca" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt;&lt;code&gt;unique_for_date&lt;/code&gt;&lt;/a&gt;, but requires the field to be unique with respect to the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911a97afa7975200bcc2321bf08148741b444fe2" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;related_query_name&lt;/code&gt; supports app label and class interpolation via &lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;some special syntax&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8ba55cee6b9bc75efd8d7b2d9363b4469563af" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;, it can be registered as a transform on &lt;code&gt;IntegerField&lt;/code&gt;. The default lookup name is &lt;code&gt;chr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214c8acc0296f6b6279e2c41f5ce14dda1a45453" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;earliest()&lt;/code&gt; and &lt;code&gt;latest()&lt;/code&gt; raise &lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; if there is no object with the given parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239355497d3fbe89204c4a53a6ee6315e778dee6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt;&lt;code&gt;get_or_create()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.query.QuerySet.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt;, if you&amp;rsquo;re using manually specified primary keys and an object needs to be created but the key already exists in the database, an &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1002c38a02557610283e402687e7baac287229" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.signals.pre_delete&quot;&gt;&lt;code&gt;pre_delete&lt;/code&gt;&lt;/a&gt;, but sent at the end of a model&amp;rsquo;s &lt;a href=&quot;models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method and a queryset&amp;rsquo;s &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ea644b70e840a836965a7720340cad8a857b9f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt;, but sent at the end of the &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346c284a84600b7c02cc33179c217f057c75135f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.forms.RadioSelect&quot;&gt;&lt;code&gt;RadioSelect&lt;/code&gt;&lt;/a&gt;, you can loop over the individual checkboxes for the widget&amp;rsquo;s choices. Unlike &lt;a href=&quot;#django.forms.RadioSelect&quot;&gt;&lt;code&gt;RadioSelect&lt;/code&gt;&lt;/a&gt;, the checkboxes won&amp;rsquo;t include the &lt;code&gt;required&lt;/code&gt; HTML attribute if the field is required because browser validation would require all checkboxes to be checked instead of at least one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d780d132abddc411dc49eff10a1e51ef8c50836" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpRequest.get_full_path&quot;&gt;&lt;code&gt;get_full_path()&lt;/code&gt;&lt;/a&gt;, but uses &lt;a href=&quot;#django.http.HttpRequest.path_info&quot;&gt;&lt;code&gt;path_info&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#django.http.HttpRequest.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2a9fd84e842e04d0d7921a646d8d793fe3b3df" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;, but uses a 405 status code. The first argument to the constructor is required: a list of permitted methods (e.g. &lt;code&gt;['GET', 'POST']&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705089e55a46741f3540639bd76ad967ec33de2b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpResponse.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt;, but &lt;a href=&quot;../topics/signing&quot;&gt;cryptographic signing&lt;/a&gt; the cookie before setting it. Use in conjunction with &lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt;&lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt;&lt;/a&gt;. You can use the optional &lt;code&gt;salt&lt;/code&gt; argument for added key strength, but you will need to remember to pass it to the corresponding &lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt;&lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df768b23ac3b315c812da78f870686a8bb4dc2c6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt;, but it returns a permanent redirect (HTTP status code 301) instead of a &amp;ldquo;found&amp;rdquo; redirect (status code 302).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8563b2bd8ef79b66e64abc13b185806b9bcc5261" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.QueryDict.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;, except it includes all values, as a list, for each member of the dictionary. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae206c32c2628442b4554143850ec58ec83ef81" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.QueryDict.setdefault&quot;&gt;&lt;code&gt;setdefault()&lt;/code&gt;&lt;/a&gt;, except it takes a list of values instead of a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955afb7b9c578249edff08f0675f1e6007885295" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.template.Engine.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;, except it takes a list of names and returns the first template that was found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39373966de87495533da143e122efa7b8991fcf2" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../migration-operations#django.db.migrations.operations.AddIndex&quot;&gt;&lt;code&gt;AddIndex&lt;/code&gt;&lt;/a&gt;, but creates an index with the &lt;code&gt;CONCURRENTLY&lt;/code&gt; option. This has a few caveats to be aware of when using this option, see &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY&quot;&gt;the PostgreSQL documentation of building indexes concurrently&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916b0736c9a97408dd3dd4b442e03c3e1742fbdf" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../migration-operations#django.db.migrations.operations.RemoveIndex&quot;&gt;&lt;code&gt;RemoveIndex&lt;/code&gt;&lt;/a&gt;, but removes the index with the &lt;code&gt;CONCURRENTLY&lt;/code&gt; option. This has a few caveats to be aware of when using this option, see &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-dropindex.html&quot;&gt;the PostgreSQL documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f974a90c1064ff9e66af2aa32291764d99ea63" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; can specify &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt;. In the above example, if the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;Entry&lt;/code&gt; had specified &lt;code&gt;related_name='entries'&lt;/code&gt;, then each &lt;code&gt;Author&lt;/code&gt; instance would have an &lt;code&gt;entries&lt;/code&gt; attribute instead of &lt;code&gt;entry_set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152b27754fb68e577d55e104e8ae19972dad7d59" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; won&amp;rsquo;t touch an existing table. It will only create missing tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786a89e1a019ca41285aa5568a005c590d86720a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;formsets&quot;&gt;regular formsets&lt;/a&gt;, Django provides a couple of enhanced formset classes to make working with Django models more convenient. Let&amp;rsquo;s reuse the &lt;code&gt;Author&lt;/code&gt; model from above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51494adf7a641f08554c36bcc81e8661f20bd02d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.items&quot;&gt;&lt;code&gt;dict.items()&lt;/code&gt;&lt;/a&gt;, except this uses the same last-value logic as &lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; and returns an iterator object instead of a view object. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55b5527be4c2db918e610d42ba56ec6ab40c74f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.setdefault&quot;&gt;&lt;code&gt;dict.setdefault()&lt;/code&gt;&lt;/a&gt;, except it uses &lt;a href=&quot;#django.http.QueryDict.__setitem__&quot;&gt;&lt;code&gt;__setitem__()&lt;/code&gt;&lt;/a&gt; internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a26680c4baddc5bdcca1a3e548134ab91aa8e0" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.values&quot;&gt;&lt;code&gt;dict.values()&lt;/code&gt;&lt;/a&gt;, except this uses the same last-value logic as &lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; and returns an iterator instead of a view object. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739f7b0ad74db367e30aab10530f59aa3a7cac4f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;cache.set()&lt;/code&gt;, &lt;code&gt;set_many()&lt;/code&gt; takes an optional &lt;code&gt;timeout&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1cdfba618a7cae4220d4a0f47c6724622f7e74" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;decorator_from_middleware&lt;/code&gt;, but returns a function that accepts the arguments to be passed to the middleware_class. For example, the &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt;&lt;code&gt;cache_page()&lt;/code&gt;&lt;/a&gt; decorator is created from the &lt;code&gt;CacheMiddleware&lt;/code&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd480f7f0b5f6d4b4fbf2c6f4f3e4f6b1854c5d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;push()&lt;/code&gt;, you can use &lt;code&gt;update()&lt;/code&gt; as a context manager to ensure a matching &lt;code&gt;pop()&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba602b2e6c355200a165d077ac6e9a0594ee71f9" translate="yes" xml:space="preserve">
          <source>Like PostgreSQL itself, Django defaults to the &lt;code&gt;READ COMMITTED&lt;/code&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/transaction-iso.html&quot;&gt;isolation level&lt;/a&gt;. If you need a higher isolation level such as &lt;code&gt;REPEATABLE READ&lt;/code&gt; or &lt;code&gt;SERIALIZABLE&lt;/code&gt;, set it in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34fb63c0b51ff06df9550a1593f51e8117c6b72" translate="yes" xml:space="preserve">
          <source>Like WSGI, ASGI has you supply an &lt;code&gt;application&lt;/code&gt; callable which the application server uses to communicate with your code. It&amp;rsquo;s commonly provided as an object named &lt;code&gt;application&lt;/code&gt; in a Python module accessible to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7753e1b85c02959312c8643ca4aadd2afe10bc" translate="yes" xml:space="preserve">
          <source>Like a &lt;a href=&quot;#django.db.models.PositiveIntegerField&quot;&gt;&lt;code&gt;PositiveIntegerField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) point. Values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;32767&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b7111396930922c74543cf53e7858a5613c560" translate="yes" xml:space="preserve">
          <source>Like a CharField, you can specify &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; (read the note about database portability and &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; in that section, too). If &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; is not specified, Django will use a default length of 50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f60adb6d58f4db10d99251a6c1029ea1aeda81c" translate="yes" xml:space="preserve">
          <source>Like a view, the arguments in the URL are passed to the &lt;code&gt;get_object()&lt;/code&gt; method along with the request object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3540955efa9e226e2af7cd4207b9c9d694373a03" translate="yes" xml:space="preserve">
          <source>Like all &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; subclasses, &lt;a href=&quot;#django.db.models.URLField&quot;&gt;&lt;code&gt;URLField&lt;/code&gt;&lt;/a&gt; takes the optional &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; argument. If you don&amp;rsquo;t specify &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt;, a default of 200 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcac6c11b3e3fe6905fac69819c8a77da3c7226" translate="yes" xml:space="preserve">
          <source>Like all custom template tags, you&amp;rsquo;ll need to &lt;a href=&quot;../templates/language#loading-custom-template-libraries&quot;&gt;load its custom tag library&lt;/a&gt; before you can use it. After loading the library, you can retrieve all current flatpages via the &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt;&lt;code&gt;get_flatpages&lt;/code&gt;&lt;/a&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9951a67920449e4d4b835b90125cd72c36ccfbf5" translate="yes" xml:space="preserve">
          <source>Like an &lt;a href=&quot;#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) limit. Values from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;32767&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb140ee24bb5ffd0e10ed6b33a66a505a5c3dd7" translate="yes" xml:space="preserve">
          <source>Like an &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;, but must be either positive or zero (&lt;code&gt;0&lt;/code&gt;). Values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;2147483647&lt;/code&gt; are safe in all databases supported by Django. The value &lt;code&gt;0&lt;/code&gt; is accepted for backward compatibility reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ba58840db2ee448b0fa54dabeda7c3b5fb30f9" translate="yes" xml:space="preserve">
          <source>Like an &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) point. Values from &lt;code&gt;-32768&lt;/code&gt; to &lt;code&gt;32767&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83aed216be35e66a6d332c877c5d35102c04c61" translate="yes" xml:space="preserve">
          <source>Like loggers, handlers also have a log level. If the log level of a log record doesn&amp;rsquo;t meet or exceed the level of the handler, the handler will ignore the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d833a6751175de456bd982f108a2cc4741389d" translate="yes" xml:space="preserve">
          <source>Like other Django contrib applications, you will &lt;em&gt;only&lt;/em&gt; need to add &lt;a href=&quot;../index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; in your settings. This is so that the &lt;code&gt;gis&lt;/code&gt; templates can be located &amp;ndash; if not done, then features such as the geographic admin or KML sitemaps will not function properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c665315f6d801d5b6f09a247bd1d42caef56cf5" translate="yes" xml:space="preserve">
          <source>Like other methods, the &lt;code&gt;timeout&lt;/code&gt; argument is optional and defaults to the &lt;code&gt;TIMEOUT&lt;/code&gt; option of the appropriate backend in the &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aed27718d957f62e17035d413aabc537e0029fc" translate="yes" xml:space="preserve">
          <source>Like pre_init, but this one is sent when the &lt;code&gt;__init__()&lt;/code&gt; method finishes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1c6004ebf3711f7e8bdedde30c5087916707a3" translate="yes" xml:space="preserve">
          <source>Like regular Python files, you can read the file line-by-line by iterating over the uploaded file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef7d6244014f8627193d8008d82d067746059ec" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; and &lt;code&gt;formfield_for_manytomany&lt;/code&gt; methods, the &lt;code&gt;formfield_for_choice_field&lt;/code&gt; method can be overridden to change the default formfield for a field that has declared choices. For example, if the choices available to a superuser should be different than those available to regular staff, you could proceed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0e54aa6002f6648959e5fde59d83b613a588b1" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; method, the &lt;code&gt;formfield_for_manytomany&lt;/code&gt; method can be overridden to change the default formfield for a many to many field. For example, if an owner can own multiple cars and cars can belong to multiple owners &amp;ndash; a many to many relationship &amp;ndash; you could filter the &lt;code&gt;Car&lt;/code&gt; foreign key field to only display the cars owned by the &lt;code&gt;User&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f10fbef42ead92801c9234e033fbaaf39c7b22" translate="yes" xml:space="preserve">
          <source>Like the model field&amp;rsquo;s &lt;a href=&quot;../models/fields#django.db.models.Field.help_text&quot;&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/a&gt;, this value isn&amp;rsquo;t HTML-escaped in automatically-generated forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee07a6c8901e20df89791f61993d7c04c839518" translate="yes" xml:space="preserve">
          <source>Like we said above, the default applications are included for the common case, but not everybody needs them. If you don&amp;rsquo;t need any or all of them, feel free to comment-out or delete the appropriate line(s) from &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; before running &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command will only run migrations for apps in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66be0fca21e376129e6c827671f94aa60b75b0e6" translate="yes" xml:space="preserve">
          <source>Likewise &lt;code&gt;django.template.backends.django.Template&lt;/code&gt; is a thin wrapper adapting &lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt;&lt;code&gt;django.template.Template&lt;/code&gt;&lt;/a&gt; to the common template API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd395412545993aaaed91e9a0591200ef0116d19" translate="yes" xml:space="preserve">
          <source>Likewise, &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt;s does not appear in &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65651098030cec17f9add3564fabd28b9a8d889b" translate="yes" xml:space="preserve">
          <source>Likewise, Django provides the &lt;a href=&quot;#django.test.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="a0475d548a6e1cbd1322fc0c9137a9116d5fd248" translate="yes" xml:space="preserve">
          <source>Limitations of multiple databases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81293e5c309d9dfcca7d5d8a02e465126af1192c" translate="yes" xml:space="preserve">
          <source>Limitations of the provided locale formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8189faab6b029cc653b33f4c4750aed9ad4c8f5a" translate="yes" xml:space="preserve">
          <source>Limitations with string literals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcda513dc4ecc2e4b423a51154674ffc93ff9ff" translate="yes" xml:space="preserve">
          <source>Limiting &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba12ef865c53db8307ed40e2579ac7177efa133" translate="yes" xml:space="preserve">
          <source>Limiting a subquery to a single column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971ffbdea2890da7948e9724ae7ef3cf3d664072" translate="yes" xml:space="preserve">
          <source>Limiting access to logged-in users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b02334497290608d1bafc2deca7fc84fc2dfc2" translate="yes" xml:space="preserve">
          <source>Limiting access to logged-in users that pass a test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8f42c384b84979e56038227caf8b777339004f" translate="yes" xml:space="preserve">
          <source>Limiting flatpages by base URL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace73d3c8d253f1855ef095c01717043cd29aa5f" translate="yes" xml:space="preserve">
          <source>Limiting the maximum number of forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756e3264bedaf6f3365711aa7e045d72b4f68c7a" translate="yes" xml:space="preserve">
          <source>Limiting the number of editable objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da88c2fe4acaa5b5968c3b02bdc16c00c7b795f2" translate="yes" xml:space="preserve">
          <source>Limiting the subquery to a single row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041db2b4ee7faeb26164b54ec59eaa80dec142d2" translate="yes" xml:space="preserve">
          <source>Limits valid inputs to the specified protocol. Accepted values are &lt;code&gt;'both'&lt;/code&gt; (default), &lt;code&gt;'IPv4'&lt;/code&gt; or &lt;code&gt;'IPv6'&lt;/code&gt;. Matching is case insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484b44a0117656cdc1e07d33a88d93a8d2f24ea6" translate="yes" xml:space="preserve">
          <source>Limits valid inputs to the specified protocol. Accepted values are &lt;code&gt;both&lt;/code&gt; (default), &lt;code&gt;IPv4&lt;/code&gt; or &lt;code&gt;IPv6&lt;/code&gt;. Matching is case insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999cfb6c0645f8beaa03ab5c3c2acaad55655c97" translate="yes" xml:space="preserve">
          <source>Lines are split using &lt;a href=&quot;https://www.python.org/dev/peps/pep-0278&quot;&gt;universal newlines&lt;/a&gt;. The following are recognized as ending a line: the Unix end-of-line convention &lt;code&gt;'\n'&lt;/code&gt;, the Windows convention &lt;code&gt;'\r\n'&lt;/code&gt;, and the old Macintosh convention &lt;code&gt;'\r'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0517071aa376e797705058bbad4b658954b9930" translate="yes" xml:space="preserve">
          <source>Link</source>
          <target state="translated">Link</target>
        </trans-unit>
        <trans-unit id="157c974c5568be5651b5bfe24c42d2205c9b6e69" translate="yes" xml:space="preserve">
          <source>Link (Benoit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64590bd60ee31dd14805fcf870b334ba2446be7e" translate="yes" xml:space="preserve">
          <source>Link (Sears)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb5f491ca042b503781828280e205f3f1b3e730" translate="yes" xml:space="preserve">
          <source>Link to the URL of the OpenLayers JavaScript. Defaults to &lt;code&gt;'https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc86c03eac3b683df07db61068268361cd20abb1" translate="yes" xml:space="preserve">
          <source>Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and &lt;code&gt;urlize&lt;/code&gt; will still do the right thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e401e8956761640d7577a37f57e96c4dd3ae2c45" translate="yes" xml:space="preserve">
          <source>Links generated by &lt;code&gt;urlize&lt;/code&gt; have a &lt;code&gt;rel=&quot;nofollow&quot;&lt;/code&gt; attribute added to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d28ace15581d25a0bc2e3781306393967a803c6" translate="yes" xml:space="preserve">
          <source>List Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c12cbc34f26f6d72020d3250e5638a719f3b2a" translate="yes" xml:space="preserve">
          <source>List filter&amp;rsquo;s typically appear only if the filter has more than one choice. A filter&amp;rsquo;s &lt;code&gt;has_output()&lt;/code&gt; method controls whether or not it appears.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff8b40e6d20a6ad55bbd98426ac2eef042a84ff" translate="yes" xml:space="preserve">
          <source>List of all bands of the source, as &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt;&lt;code&gt;GDALBand&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8ec93e18fcf7be286a5711b8624e9d5492b5aa" translate="yes" xml:space="preserve">
          <source>List of compiled regular expression objects describing URLs that should be ignored when reporting HTTP 404 errors via email (see &lt;a href=&quot;../howto/error-reporting&quot;&gt;Error reporting&lt;/a&gt;). Regular expressions are matched against &lt;a href=&quot;request-response#django.http.HttpRequest.get_full_path&quot;&gt;&lt;code&gt;request's full paths&lt;/code&gt;&lt;/a&gt; (including query string, if any). Use this if your site does not provide a commonly requested file such as &lt;code&gt;favicon.ico&lt;/code&gt; or &lt;code&gt;robots.txt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71648c8c3058a09ebc7c06c879fc235d24abcec1" translate="yes" xml:space="preserve">
          <source>List of compiled regular expression objects representing User-Agent strings that are not allowed to visit any page, systemwide. Use this for bots/crawlers. This is only used if &lt;code&gt;CommonMiddleware&lt;/code&gt; is installed (see &lt;a href=&quot;../topics/http/middleware&quot;&gt;Middleware&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4144455cc383697baac646a1657f81571b944123" translate="yes" xml:space="preserve">
          <source>List of database features that the current connection should have so that the model is considered during the migration phase. For example, if you set this list to &lt;code&gt;['gis_enabled']&lt;/code&gt;, the model will only be synchronized on GIS-enabled databases. It&amp;rsquo;s also useful to skip some models when testing with several database backends. Avoid relations between models that may or may not be created as the ORM doesn&amp;rsquo;t handle this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9854912df2ed5719acad92971c25d37b901483" translate="yes" xml:space="preserve">
          <source>List of directories searched for fixture files, in addition to the &lt;code&gt;fixtures&lt;/code&gt; directory of each application, in search order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb3d7aca57a0d0b26fc7bb3082c4d20c9f33257" translate="yes" xml:space="preserve">
          <source>List-index lookup. Example: &lt;code&gt;foo[bar]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005f5ea75301f8060217eadfaf3d96dea8ba5cbd" translate="yes" xml:space="preserve">
          <source>Listening to signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385b28bd6da9bf2d5510b146c5f31381bab45cc6" translate="yes" xml:space="preserve">
          <source>Lists all available tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc017a8f262082983efe363b211f3361bd8ec506" translate="yes" xml:space="preserve">
          <source>Lists all of the apps Django knows about, the migrations available for each app, and whether or not each migration is applied (marked by an &lt;code&gt;[X]&lt;/code&gt; next to the migration name). For a &lt;code&gt;--verbosity&lt;/code&gt; of 2 and above, the applied datetimes are also shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d23e0d858c2bba4fcae0826399057a4e302793" translate="yes" xml:space="preserve">
          <source>Lists of objects follow roughly the same pattern: we need a (possibly paginated) list of objects, typically a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, and then we need to make a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; with a suitable template using that list of objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba7499a41a5ad998706215911b138ebb07a56d1" translate="yes" xml:space="preserve">
          <source>Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren&amp;rsquo;t able to provide such a listing, this will raise a &lt;code&gt;NotImplementedError&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2fb109cdc5372d5cde6e1d6d294486607ffa713" translate="yes" xml:space="preserve">
          <source>Little Endian (e.g., compatible with x86 systems)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1266aa8b6dce351b2dce9a52e20e361f295ffe02" translate="yes" xml:space="preserve">
          <source>Load settings from &lt;code&gt;global_settings.py&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4fc7ccaa44c3bece06261e229b60b0ab1fe883" translate="yes" xml:space="preserve">
          <source>Load settings from the specified settings file, overriding the global settings as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c676aefee9fb2f37fc993a5bfdd721edc6feb06" translate="yes" xml:space="preserve">
          <source>Load the &amp;ldquo;Add question&amp;rdquo; page to see how that looks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c638de2d7ce3a5989cc00da481232df477e68622" translate="yes" xml:space="preserve">
          <source>Load the page by pointing your browser at &amp;ldquo;/polls/&amp;rdquo;, and you should see a bulleted-list containing the &amp;ldquo;What&amp;rsquo;s up&amp;rdquo; question from &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;. The link points to the question&amp;rsquo;s detail page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd5d347be46f19d5af74555db1435a5932c014a" translate="yes" xml:space="preserve">
          <source>Loader methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1aae8262dfa8b38b15f329fe9d720fa2af5ce60" translate="yes" xml:space="preserve">
          <source>Loader types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f514b04ed6b877534da140af8e12cab5016f713" translate="yes" xml:space="preserve">
          <source>Loaders</source>
          <target state="translated">Loaders</target>
        </trans-unit>
        <trans-unit id="5396847021992af28690eea2559e62fb26911d30" translate="yes" xml:space="preserve">
          <source>Loading a template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923064241bee3da1b374c1344aae36c3e741a39f" translate="yes" xml:space="preserve">
          <source>Loading fixtures from &lt;code&gt;stdin&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d6db619863f3d513c0c93969b27a39dcbe2838" translate="yes" xml:space="preserve">
          <source>Loading from &lt;code&gt;stdin&lt;/code&gt; is useful with standard input and output redirections. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb9f7eb8cbdc0a3f102e2624e3f8c578252dcc2" translate="yes" xml:space="preserve">
          <source>Loading templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3b47e04fbcdf7a0c349a1f65b42792f0bfc04b" translate="yes" xml:space="preserve">
          <source>Loading the settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b208b1eada8a869e959c32e9a4f048b2261a0ef9" translate="yes" xml:space="preserve">
          <source>Loads a custom template tag set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d26d6567c1e53323e6feb2451badc41e00b872" translate="yes" xml:space="preserve">
          <source>Loads a template and renders it with the current context. This is a way of &amp;ldquo;including&amp;rdquo; other templates within a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49622805f34b2cbfb5fecab2184d2c2565f31b9e" translate="yes" xml:space="preserve">
          <source>Loads a template with the given name, compiles it and returns a &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d87684e495f6d2a5443bdeacec9acb9e892cab6" translate="yes" xml:space="preserve">
          <source>Loads templates from Django apps on the filesystem. For each app in &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the loader looks for a &lt;code&gt;templates&lt;/code&gt; subdirectory. If the directory exists, Django looks for templates in there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c77b46a82221a37ce360a54ab22eae4cb8567d7" translate="yes" xml:space="preserve">
          <source>Loads templates from a Python dictionary. This is useful for testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddb5a6aa66f708e939717a50c081f9b1687855e" translate="yes" xml:space="preserve">
          <source>Loads templates from a given source, such as the filesystem or a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830f927cc5a7a2d6808cd9d4fd807494ffe8af90" translate="yes" xml:space="preserve">
          <source>Loads templates from the filesystem, according to &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63c9f12a633eb8c9f0b4ac3283d021d46f12d08" translate="yes" xml:space="preserve">
          <source>Local-memory caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46361934de5303c4bb40033efcb4f3ac07fa41a4" translate="yes" xml:space="preserve">
          <source>Locale aware input in forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba391c6c02e5d2f28c6ce4333f7c807d2ee62f0" translate="yes" xml:space="preserve">
          <source>Locale middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17bcca1e911b8aa363c850569b580baafa07f8e" translate="yes" xml:space="preserve">
          <source>Localflavor</source>
          <target state="translated">Localflavor</target>
        </trans-unit>
        <trans-unit id="8760fb7a725faf05acb20618178c43773af945a1" translate="yes" xml:space="preserve">
          <source>Localization: how to create language files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d96c3fa930173a29f42dabd119f2ec989ef3cb" translate="yes" xml:space="preserve">
          <source>Localized names of languages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bab46afe953180e60cc6486cb0020ee91d03396" translate="yes" xml:space="preserve">
          <source>Lock parents models in &lt;code&gt;select_for_update(of=(...))&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420dfa7139dd6d5b31fdef28a0943aa84fccd6c5" translate="yes" xml:space="preserve">
          <source>Log messages related to the handling of requests received by the server invoked by the &lt;a href=&quot;../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command. HTTP 5XX responses are logged as &lt;code&gt;ERROR&lt;/code&gt; messages, 4XX responses are logged as &lt;code&gt;WARNING&lt;/code&gt; messages, and everything else is logged as &lt;code&gt;INFO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c50346183ec708677d8278192a3de3bbcc2cc20" translate="yes" xml:space="preserve">
          <source>Log messages related to the handling of requests. 5XX responses are raised as &lt;code&gt;ERROR&lt;/code&gt; messages; 4XX responses are raised as &lt;code&gt;WARNING&lt;/code&gt; messages. Requests that are logged to the &lt;code&gt;django.security&lt;/code&gt; logger aren&amp;rsquo;t logged to &lt;code&gt;django.request&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8b376a6ea0f93bedb4b80549e00d705797b62b" translate="yes" xml:space="preserve">
          <source>Log messages related to the rendering of templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012294fbc07fc652fdbbd3b8b48183b6e7925dda" translate="yes" xml:space="preserve">
          <source>Loggers</source>
          <target state="translated">Loggers</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="b6197073d1ec39358a4e3d845faf24f41158555a" translate="yes" xml:space="preserve">
          <source>Logging is configured as part of the general Django &lt;code&gt;setup()&lt;/code&gt; function. Therefore, you can be certain that loggers are always ready for use in your project code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea927f6b85c95ca60f956a27e51826d1f034e33" translate="yes" xml:space="preserve">
          <source>Logging of each request and response of the server is sent to the &lt;a href=&quot;../topics/logging#django-server-logger&quot;&gt;django.server&lt;/a&gt; logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5a2893bdcc7d239c1db72e4c4ffbe4bea73174" translate="yes" xml:space="preserve">
          <source>Login</source>
          <target state="translated">Login</target>
        </trans-unit>
        <trans-unit id="97896e639ea44756e547cd457bf906c408b31625" translate="yes" xml:space="preserve">
          <source>Login and logout signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e43d612e11f1568f2373e719d4c4b08dcecdc7cc" translate="yes" xml:space="preserve">
          <source>Logout</source>
          <target state="translated">Logout</target>
        </trans-unit>
        <trans-unit id="0f9949aa8cddbb021036b013be13fcd58f02e95c" translate="yes" xml:space="preserve">
          <source>Logs a user out, then redirects to the login page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a401f8c8dd428897c6bb4440e0e65596927d52" translate="yes" xml:space="preserve">
          <source>Logs a user out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c06f7c9c0dd6c7d57a0b80377942859f9c413d" translate="yes" xml:space="preserve">
          <source>Logs the SQL queries that are executed during schema changes to the database by the &lt;a href=&quot;migrations&quot;&gt;migrations framework&lt;/a&gt;. Note that it won&amp;rsquo;t log the queries executed by &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt;. Messages to this logger have &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;sql&lt;/code&gt; in their extra context (but unlike &lt;code&gt;django.db.backends&lt;/code&gt;, not duration). The values have the same meaning as explained in &lt;a href=&quot;#django-db-logger&quot;&gt;django.db.backends&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf24eeb1b831855c84e20ffbab85ed0e2e98d15d" translate="yes" xml:space="preserve">
          <source>Long messages are a special case. There, the first string directly after the &lt;code&gt;msgstr&lt;/code&gt; (or &lt;code&gt;msgid&lt;/code&gt;) is an empty string. Then the content itself will be written over the next few lines as one string per line. Those strings are directly concatenated. Don&amp;rsquo;t forget trailing spaces within the strings; otherwise, they&amp;rsquo;ll be tacked together without whitespace!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03896792266b6c37fcddf34ea02218f44b413da5" translate="yes" xml:space="preserve">
          <source>Look at the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/deprecation/&quot;&gt;deprecation timeline&lt;/a&gt; for the relevant versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18573a3026539551f5ffe80fbc3fab6545f17122" translate="yes" xml:space="preserve">
          <source>Look at the existing Django fields (in &lt;code&gt;django/db/models/fields/__init__.py&lt;/code&gt;) for inspiration. Try to find a field that&amp;rsquo;s similar to what you want and extend it a little bit, instead of creating an entirely new field from scratch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e1377578dd2108d8423c7213ffe8bd30534cc0" translate="yes" xml:space="preserve">
          <source>Looking for specific information? Try the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/genindex/&quot;&gt;Index&lt;/a&gt;, &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/py-modindex/&quot;&gt;Module Index&lt;/a&gt; or the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/contents/&quot;&gt;detailed table of contents&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a570127f6a268f5a693b78694a0e6f069ee259be" translate="yes" xml:space="preserve">
          <source>Looking for tests in any file below the current directory whose name matches the pattern &lt;code&gt;test*.py&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7015ab4fc4ea24735dbe884238cc1b54bf915eca" translate="yes" xml:space="preserve">
          <source>Lookup</source>
          <target state="translated">Lookup</target>
        </trans-unit>
        <trans-unit id="4f97f5f4ebefacc529850a4ccae9c3992e1498e3" translate="yes" xml:space="preserve">
          <source>Lookup API reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0830ad654338d012cacdd174149c78b55003fa0c" translate="yes" xml:space="preserve">
          <source>Lookup Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e95b80675fe4de22a35ddb29898c8e5ee137e9" translate="yes" xml:space="preserve">
          <source>Lookup a &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; by ID. Since this method uses the same shared cache as &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;get_for_model()&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s preferred to use this method over the usual &lt;code&gt;ContentType.objects.get(pk=id)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af7afda67ab90eca349b13f266deab4ec35aa10" translate="yes" xml:space="preserve">
          <source>Lookup functions can mix the use of &lt;code&gt;Q&lt;/code&gt; objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or &lt;code&gt;Q&lt;/code&gt; objects) are &amp;ldquo;AND&amp;rdquo;ed together. However, if a &lt;code&gt;Q&lt;/code&gt; object is provided, it must precede the definition of any keyword arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbdad9ff3b7e8efdd58c11f1971a5b0ed14de47" translate="yes" xml:space="preserve">
          <source>Lookup parameters, which should be in the format accepted by &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca99d305ed0945b8d9e457a1542829a19f19f1ac" translate="yes" xml:space="preserve">
          <source>Lookup registration can also be done using a decorator pattern:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c22627487f1bdeac0afcbce546d80cd4f51d447" translate="yes" xml:space="preserve">
          <source>Lookups created with custom &lt;code&gt;to_attr&lt;/code&gt; can still be traversed as usual by other lookups:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbc446cd89bbc9f91a61c8d1b7883a4754c0d07" translate="yes" xml:space="preserve">
          <source>Lookups on PostgreSQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6deca122475cb7b177894a1abc642b3c450ad4" translate="yes" xml:space="preserve">
          <source>Lookups that span relationships</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17694782d38160dbec7f61575168852ee61ca592" translate="yes" xml:space="preserve">
          <source>Lookups with rasters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d971984dd21acc2315cc2384dc6c3cc1e2750fe" translate="yes" xml:space="preserve">
          <source>Loop over each item in an array. For example, to display a list of athletes provided in &lt;code&gt;athlete_list&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45543809fe6d79257df2fcb2ced01e5639318229" translate="yes" xml:space="preserve">
          <source>Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 addresses (&lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html#section-3.2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3986#section-3.2.2&lt;/strong&gt;&lt;/a&gt;) and unicode domains are both supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e6ddef874e97d78c2e355736d665c5eb63bdd9" translate="yes" xml:space="preserve">
          <source>Looping over &lt;code&gt;UploadedFile.chunks()&lt;/code&gt; instead of using &lt;code&gt;read()&lt;/code&gt; ensures that large files don&amp;rsquo;t overwhelm your system&amp;rsquo;s memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87879ecc3324ca1b5b68b1f628f788675da7274" translate="yes" xml:space="preserve">
          <source>Looping over hidden and visible fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f78f8afb120cb4e8208c1f6510826e775fef6c" translate="yes" xml:space="preserve">
          <source>Looping over the form&amp;rsquo;s fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92dfee36a072d60f39ed8b943312cd16aba50fa1" translate="yes" xml:space="preserve">
          <source>Loops over each item in an array, making the item available in a context variable. For example, to display a list of athletes provided in &lt;code&gt;athlete_list&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5ba0d2ee5986d496178175529d1a820e6c2011" translate="yes" xml:space="preserve">
          <source>Loosely-coupled to GeoDjango. For example, &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects may be used outside of a Django project/application. In other words, no need to have &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; set or use a database, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18995b9d14f4d8a9703ab1e599060a15073564b7" translate="yes" xml:space="preserve">
          <source>Loosely-coupled, high-level Python interfaces for GIS geometry and raster operations and data manipulation in different formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14c62a5e247e1d3a0c3e590257851d326591f90" translate="yes" xml:space="preserve">
          <source>Low bandwidth connection?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38b638f8a783319921b9ded343024596436ca9a" translate="yes" xml:space="preserve">
          <source>Low-level APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb82d98842b53ea8e4fc0ba928b83950cba983a9" translate="yes" xml:space="preserve">
          <source>MEDIA_ROOT, DEFAULT_FILE_STORAGE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a4d61f0acbbb95318a8a2d2e1f3a3b76934273" translate="yes" xml:space="preserve">
          <source>MacPorts</source>
          <target state="translated">MacPorts</target>
        </trans-unit>
        <trans-unit id="a0d3cf49aa9c486cc3245a67064ef6a90e88d567" translate="yes" xml:space="preserve">
          <source>Mail is sent using the SMTP host and port specified in the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_PORT&quot;&gt;&lt;code&gt;EMAIL_PORT&lt;/code&gt;&lt;/a&gt; settings. The &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt;&lt;code&gt;EMAIL_HOST_USER&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt;&lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt;&lt;/a&gt; settings, if set, are used to authenticate to the SMTP server, and the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; settings control whether a secure connection is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2045c2b3b3410d03382b7449be956846f013a676" translate="yes" xml:space="preserve">
          <source>Mails the email addresses specified in &lt;a href=&quot;settings#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../topics/email#django.core.mail.mail_admins&quot;&gt;&lt;code&gt;mail_admins()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09447360b87529c4e200002f47e5957ff5712079" translate="yes" xml:space="preserve">
          <source>Mails the email addresses specified in &lt;a href=&quot;settings#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../topics/email#django.core.mail.mail_managers&quot;&gt;&lt;code&gt;mail_managers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b99cc729613bb252546c2ed4313e808dbf5dd8a" translate="yes" xml:space="preserve">
          <source>Make sure ALL of the following are true before setting this (assuming the values from the example above):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa35ed7a8f70d5ae8a72a8185bfd890e5ab93011" translate="yes" xml:space="preserve">
          <source>Make sure it&amp;rsquo;s one of the first middleware installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c040a2736ded67e62f5c53ffa1a4ec220de726" translate="yes" xml:space="preserve">
          <source>Make sure that &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is included in your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9525d86fc1dd6d513066076e98a6c857591c199" translate="yes" xml:space="preserve">
          <source>Make sure that &lt;code&gt;mod_auth_basic&lt;/code&gt; and &lt;code&gt;mod_authz_user&lt;/code&gt; are loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69445a55691d7850da50947c34014b2fc4c3ae5d" translate="yes" xml:space="preserve">
          <source>Make sure that mod_wsgi is installed and activated and that you have followed the steps to setup &lt;a href=&quot;modwsgi&quot;&gt;Apache with mod_wsgi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2abf2d686008baca2b498aeae79af0c709468a" translate="yes" xml:space="preserve">
          <source>Make sure that the Python interpreter can load Django&amp;rsquo;s code. The most convenient way to do this is to use &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;, &lt;a href=&quot;https://virtualenvwrapper.readthedocs.io/en/latest/&quot;&gt;virtualenvwrapper&lt;/a&gt;, and &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;. The &lt;a href=&quot;../intro/contributing&quot;&gt;contributing tutorial&lt;/a&gt; walks through how to create a virtualenv.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90fe8d9c88a24bdf2ff7e779cd0a6887772c684" translate="yes" xml:space="preserve">
          <source>Make sure that the key used in production isn&amp;rsquo;t used anywhere else and avoid committing it to source control. This reduces the number of vectors from which an attacker may acquire the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1065df190cc28bea4577001c230e0ec7e0f5f5c" translate="yes" xml:space="preserve">
          <source>Make sure that you don&amp;rsquo;t include the above URL within &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt; - it needs to be language-independent itself to work correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d82bc59e1c3d86100d01ee3c8c4d4ac4373a55c" translate="yes" xml:space="preserve">
          <source>Make sure that you have &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; installed and that you can run its commands from a shell. (Enter &lt;code&gt;git help&lt;/code&gt; at a shell prompt to test this.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4febd23799488138305eb5481ce515953522d418" translate="yes" xml:space="preserve">
          <source>Make sure that your Python code is outside of the Web server&amp;rsquo;s root. This will ensure that your Python code is not accidentally served as plain text (or accidentally executed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5852dd567ba21a0751232f400af285522c51e4b8" translate="yes" xml:space="preserve">
          <source>Make sure the directory pointed-to by this setting exists and is readable and writable by the system user under which your Web server runs. Continuing the above example, if your server runs as the user &lt;code&gt;apache&lt;/code&gt;, make sure the directory &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; exists and is readable and writable by the user &lt;code&gt;apache&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6792ed36d70833105e98f7e1536ea01606bbfe30" translate="yes" xml:space="preserve">
          <source>Make sure you list all extensions you&amp;rsquo;re using! Otherwise Babel won&amp;rsquo;t recognize the tags defined by these extensions and will ignore Jinja2 templates containing them entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8619a1d17175246cf38854aa8293b829b7d1f23b" translate="yes" xml:space="preserve">
          <source>Make sure you&amp;rsquo;ve activated translation for your project (the fastest way is to check if &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; includes &lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt;&lt;code&gt;django.middleware.locale.LocaleMiddleware&lt;/code&gt;&lt;/a&gt;). If you haven&amp;rsquo;t yet, see &lt;a href=&quot;#how-django-discovers-language-preference&quot;&gt;How Django discovers language preference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3a7262191d27cdf5c32da423a57d2c31d3d081" translate="yes" xml:space="preserve">
          <source>Make sure you&amp;rsquo;ve installed the &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;sites framework&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ee1e2048edd25b686838bf844c45d24bc1ae95" translate="yes" xml:space="preserve">
          <source>Make sure your &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting contains a &lt;code&gt;DjangoTemplates&lt;/code&gt; backend whose &lt;code&gt;APP_DIRS&lt;/code&gt; options is set to &lt;code&gt;True&lt;/code&gt;. It&amp;rsquo;s in there by default, so you&amp;rsquo;ll only need to change this if you&amp;rsquo;ve changed that setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1c905ed852730023a7a6e5ec3853b4aa30f7c5" translate="yes" xml:space="preserve">
          <source>Make sure your database is configured to be able to store arbitrary string data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you use a more restrictive encoding &amp;ndash; for example, latin1 (iso8859-1) &amp;ndash; you won&amp;rsquo;t be able to store certain characters in the database, and information will be lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d84fe7fe5ec77cf066388c9481b92a6747b344" translate="yes" xml:space="preserve">
          <source>Make the poll app modifiable in the admin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3288017f14c5479aa28d05689ff3c090be1108e6" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;makemigrations&lt;/code&gt; exit with a non-zero status when model changes without migrations are detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd46c57dda19a380dba63b951c50c57d7edd94b1" translate="yes" xml:space="preserve">
          <source>Makes a DELETE request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b8fdec97a0a90000785f857f6d99d954dfbaaa" translate="yes" xml:space="preserve">
          <source>Makes a GET request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object, which is documented below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab36adc110fb58469cbb078f97a12c9d401e7de" translate="yes" xml:space="preserve">
          <source>Makes a HEAD request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. This method works just like &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;, including the &lt;code&gt;follow&lt;/code&gt;, &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;extra&lt;/code&gt; arguments, except it does not return a message body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622e768ac61b71b81b98d9e29b486595200ed157" translate="yes" xml:space="preserve">
          <source>Makes a PATCH request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9170b880c457475e4acad7c3125b513d409d1e" translate="yes" xml:space="preserve">
          <source>Makes a POST request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object, which is documented below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a618a092d900f3345d37da0ff87b3e10c65839d" translate="yes" xml:space="preserve">
          <source>Makes a PUT request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66196a0bb288c4ef1f8149743502405df89a8fd9" translate="yes" xml:space="preserve">
          <source>Makes a TRACE request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for simulating diagnostic probes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888f82444507e9099b749f8f400d61b51e2436cd" translate="yes" xml:space="preserve">
          <source>Makes all possible efforts to strip all [X]HTML tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99cf9f3654a5878401b856a77fe4db8a46014e99" translate="yes" xml:space="preserve">
          <source>Makes an OPTIONS request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b1ed94dcb4d0abbc485a341862326c80bacbba" translate="yes" xml:space="preserve">
          <source>Makes or deletes the &lt;code&gt;_order&lt;/code&gt; column needed for the &lt;a href=&quot;models/options#django.db.models.Options.order_with_respect_to&quot;&gt;&lt;code&gt;order_with_respect_to&lt;/code&gt;&lt;/a&gt; option on the &lt;code&gt;Meta&lt;/code&gt; subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dccc437985ff30cb011b62713b84ead4f737431" translate="yes" xml:space="preserve">
          <source>Makes the active translation object a &lt;code&gt;NullTranslations()&lt;/code&gt; instance. This is useful when we want delayed translations to appear as the original string for some reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea1449517b61b6227fc0a09d9c44c6bb5266548" translate="yes" xml:space="preserve">
          <source>Makes this object orderable with respect to the given field, usually a &lt;code&gt;ForeignKey&lt;/code&gt;. This can be used to make related objects orderable with respect to a parent object. For example, if an &lt;code&gt;Answer&lt;/code&gt; relates to a &lt;code&gt;Question&lt;/code&gt; object, and a question has more than one answer, and the order of answers matters, you&amp;rsquo;d do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54f5b47c954fae0115f4537ba904f310a264de9" translate="yes" xml:space="preserve">
          <source>Making &amp;ldquo;friendly&amp;rdquo; template contexts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8db8d80fd9fb4fecd9dcd41e45fec83ed98ddd5" translate="yes" xml:space="preserve">
          <source>Making URL patterns themselves translatable via the &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;django.utils.translation.gettext_lazy()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a63d52676fa037454255c2d52959b81d535bf1" translate="yes" xml:space="preserve">
          <source>Making actions available site-wide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eec11322f12a5a830e1ec8f9ac3f17534635686" translate="yes" xml:space="preserve">
          <source>Making an expensive computation that depends on the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11280e40fa12c6ed475a0960415249174d29f82b" translate="yes" xml:space="preserve">
          <source>Making logging calls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbc2e6788aa00914bfa34bdeafb0de83e2e8075" translate="yes" xml:space="preserve">
          <source>Making queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36af64091c8859d03f0c5912aa8c3e10b3dd9b4" translate="yes" xml:space="preserve">
          <source>Making requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b880c8b42823e5609b10a452e5205dcb5f7b4996" translate="yes" xml:space="preserve">
          <source>Management Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309988b71dc98cdf2b11d5ce945ef12fe12b7c85" translate="yes" xml:space="preserve">
          <source>Management commands and locales</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb992093f99727071e66bbe2c45fcb5e3b93112" translate="yes" xml:space="preserve">
          <source>Management commands can be tested with the &lt;a href=&quot;../../ref/django-admin#django.core.management.call_command&quot;&gt;&lt;code&gt;call_command()&lt;/code&gt;&lt;/a&gt; function. The output can be redirected into a &lt;code&gt;StringIO&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123ebb6632286d41ac5ad793d26b1e8e2995104f" translate="yes" xml:space="preserve">
          <source>Management commands from third-party apps that have been unintentionally overridden can be made available under a new name by creating a new command in one of your project&amp;rsquo;s apps (ordered before the third-party app in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;) which imports the &lt;code&gt;Command&lt;/code&gt; of the overridden command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aedb618e7bae6668445752ed581581d51fca7e48" translate="yes" xml:space="preserve">
          <source>Management signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab8c1f3a552b23f9c2fc03d51382bf5a6e5f9e0" translate="yes" xml:space="preserve">
          <source>Manager methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d37a81c73b96201b2d085091cabd9eeab93ecf1" translate="yes" xml:space="preserve">
          <source>Manager names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7b3cfa4fbefb6a7d1086c0a97bc4ea23175a55" translate="yes" xml:space="preserve">
          <source>Managers</source>
          <target state="translated">Managers</target>
        </trans-unit>
        <trans-unit id="9e8450ccf72e480aeae5b3890c911f5578602674" translate="yes" xml:space="preserve">
          <source>Managers from base classes are always inherited by the child class, using Python&amp;rsquo;s normal name resolution order (names on the child class override all others; then come names on the first parent class, and so on).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f90f7785499fc4cfaa11512554a9d9c8b983450" translate="yes" xml:space="preserve">
          <source>Managing database transactions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21bfd78268483f35f3c604df2fe7d8571659141" translate="yes" xml:space="preserve">
          <source>Managing files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4073ab68fce5fa416ebfc1214a39c03aa82bd7" translate="yes" xml:space="preserve">
          <source>Managing static files (e.g. images, JavaScript, CSS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe3a8d49df863653ebd64aa7a5c9599baeb268f" translate="yes" xml:space="preserve">
          <source>Managing the database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821946108f9fcc4278ef8ff2a44740fe9fc0f854" translate="yes" xml:space="preserve">
          <source>Managing users in the admin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b383c49ef5abc4e107f02ad08c8c62501452a9f0" translate="yes" xml:space="preserve">
          <source>Mandatory &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bb3afa6fe6d5f9c1b4819689c8cb64af32574b" translate="yes" xml:space="preserve">
          <source>Manually managing a user&amp;rsquo;s password</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169b1587f29ae2dd843f597266b7665985a7ec7f" translate="yes" xml:space="preserve">
          <source>Manually rendered &lt;code&gt;can_delete&lt;/code&gt; and &lt;code&gt;can_order&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578ba80b666e0ccf9a7012331ca7e916469a6aaf" translate="yes" xml:space="preserve">
          <source>Manually selecting a database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cab6e985bdaa8e6c7cd3d1f1913684e9f6c62a4" translate="yes" xml:space="preserve">
          <source>Manually selecting a database for a &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5d67e28075441efb68505f6ad34b3922452603" translate="yes" xml:space="preserve">
          <source>Manually-specifying values of auto-incrementing primary keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd4f2fc1f97ee8fb54c37f3123e041f2ad5b7eb" translate="yes" xml:space="preserve">
          <source>Many JavaScript toolkits exist, and many of them include widgets (such as calendar widgets) that can be used to enhance your application. Django has deliberately avoided blessing any one JavaScript toolkit. Each toolkit has its own relative strengths and weaknesses - use whichever toolkit suits your requirements. Django is able to integrate with any JavaScript toolkit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25451186d18d24fb946ba6ce8889475aef168969" translate="yes" xml:space="preserve">
          <source>Many commands take a list of &amp;ldquo;app names.&amp;rdquo; An &amp;ldquo;app name&amp;rdquo; is the basename of the package containing your models. For example, if your &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; contains the string &lt;code&gt;'mysite.blog'&lt;/code&gt;, the app name is &lt;code&gt;blog&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ab0c728d9adbf5dc95998cbd2e06c0ddcc849d" translate="yes" xml:space="preserve">
          <source>Many of Django&amp;rsquo;s built-in class-based views inherit from other class-based views or various mixins. Because this inheritance chain is very important, the ancestor classes are documented under the section title of &lt;strong&gt;Ancestors (MRO)&lt;/strong&gt;. MRO is an acronym for Method Resolution Order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef93725b505fdf5fdda66e9602ccdb48505b2c6" translate="yes" xml:space="preserve">
          <source>Many of Django&amp;rsquo;s model fields accept options that they don&amp;rsquo;t do anything with. For example, you can pass both &lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt;&lt;code&gt;editable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; to a &lt;a href=&quot;../ref/models/fields#django.db.models.DateField&quot;&gt;&lt;code&gt;django.db.models.DateField&lt;/code&gt;&lt;/a&gt; and it will ignore the &lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt;&lt;code&gt;editable&lt;/code&gt;&lt;/a&gt; parameter (&lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; being set implies &lt;code&gt;editable=False&lt;/code&gt;). No error is raised in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e02cb06b5702dcaa553fe7f77ae3438f401b6a" translate="yes" xml:space="preserve">
          <source>Many of these settings are sensitive and should be treated as confidential. If you&amp;rsquo;re releasing the source code for your project, a common practice is to publish suitable settings for development, and to use a private settings module for production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75861236e48cb91931859e485f7ff7f5f75eebda" translate="yes" xml:space="preserve">
          <source>Many of these signals are sent by various model methods like &lt;code&gt;__init__()&lt;/code&gt; or &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; that you can override in your own code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d338ef8445afc99ea23ca8b6ff63e24bec60fb" translate="yes" xml:space="preserve">
          <source>Many other things might go wrong with our application in the future, but we can be sure that we won&amp;rsquo;t inadvertently reintroduce this bug, because running the test will warn us immediately. We can consider this little portion of the application pinned down safely forever.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06e57ab2b407ee0845b83ecac56cae0cb1c5bb7" translate="yes" xml:space="preserve">
          <source>Many template tags take a number of arguments &amp;ndash; strings or template variables &amp;ndash; and return a result after doing some processing based solely on the input arguments and some external information. For example, a &lt;code&gt;current_time&lt;/code&gt; tag might accept a format string and return the time as a string formatted accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d934fc1527a93c2b43e246ede7cf475542db271a" translate="yes" xml:space="preserve">
          <source>Many templates, including some of Django&amp;rsquo;s, rely upon the silence of the template system when a nonexistent variable is encountered. If you assign a value other than &lt;code&gt;''&lt;/code&gt; to &lt;code&gt;string_if_invalid&lt;/code&gt;, you will experience rendering problems with these templates and sites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d6af84e82be13a30451c42ca848e947ab607d1" translate="yes" xml:space="preserve">
          <source>Many widgets have optional extra arguments; they can be set when defining the widget on the field. In the following example, the &lt;a href=&quot;#django.forms.SelectDateWidget.years&quot;&gt;&lt;code&gt;years&lt;/code&gt;&lt;/a&gt; attribute is set for a &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt;&lt;code&gt;SelectDateWidget&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58d8917cafabb2c90c45707f57b660d3626c9ee" translate="yes" xml:space="preserve">
          <source>Many-to-many field to &lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d8f6ec324fa681af98e9241f31cfa5781051c6" translate="yes" xml:space="preserve">
          <source>Many-to-many relationship to &lt;a href=&quot;#django.contrib.auth.models.Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c116d2e532fe76c699eb71681c5f325c7f63e0" translate="yes" xml:space="preserve">
          <source>Many-to-many relationship to &lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e5715c4c5ce8ff1bacfa3505a6793b1e2d573f" translate="yes" xml:space="preserve">
          <source>Many-to-many relationships</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e425f695d48e438c36b7fc9a91b741584873db30" translate="yes" xml:space="preserve">
          <source>Many-to-many relationships can be queried using &lt;a href=&quot;../queries#lookups-that-span-relationships&quot;&gt;lookups across relationships&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba72c44b14ca6638dbe6a05d3bce34a9c08ab179" translate="yes" xml:space="preserve">
          <source>Many-to-one relationships</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6d34f1802b32e0c12aec1e3e5d808e6f66d84a" translate="yes" xml:space="preserve">
          <source>ManyToMany-relations are exported for the model that binds them. For instance, the &lt;code&gt;auth.User&lt;/code&gt; model has such a relation to the &lt;code&gt;auth.Permission&lt;/code&gt; model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf3b65a416d6e52bab78d048e87986c34858f91" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.nodata_value&quot;&gt;&lt;code&gt;nodata_value&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49cda891b56d96f95a118e0757e9217f5f1c480" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.driver&quot;&gt;&lt;code&gt;driver&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540288375fb7d6fa4ddcf2966b348db71d56849b" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3690a5f473e1bd7016481bb98cfe5cabfcaea42d" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4ecb0587f3cc23b7f26c6f72881682d026d17e" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea921e1e0d479e3a85669a075cb1b1c3b19e6693" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.srid&quot;&gt;&lt;code&gt;srid&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa20fe2b5818bbde36ad87034a1ecbf01e297f82" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb343929f61bef17958fbce9c5add540ed87a54c" translate="yes" xml:space="preserve">
          <source>Mapping URLs to views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59a41665f92ed102c9cc53a15e018811cad6724" translate="yes" xml:space="preserve">
          <source>Mapping query fields to model fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790cecd9579b54cbb8881de7b21413ab38c2dd3f" translate="yes" xml:space="preserve">
          <source>Maps values for &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and (optionally) &lt;code&gt;None&lt;/code&gt;, to the strings &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, &amp;ldquo;maybe&amp;rdquo;, or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f00002bb6ad2eec19a19de8a03c7d6fad15adff" translate="yes" xml:space="preserve">
          <source>MariaDB</source>
          <target state="translated">MariaDB</target>
        </trans-unit>
        <trans-unit id="7d4168bc3f16d6fe180b1ac18cb68592a82d37fc" translate="yes" xml:space="preserve">
          <source>MariaDB &lt;a href=&quot;https://jira.mariadb.org/browse/MDEV-12981&quot;&gt;doesn&amp;rsquo;t support&lt;/a&gt; the &lt;code&gt;default&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a643fce146444011d7acb230ac298d723eb94e0" translate="yes" xml:space="preserve">
          <source>MariaDB and &lt;code&gt;default&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8e08dd5e412196ef8d596fa4013be4fa1691fa" translate="yes" xml:space="preserve">
          <source>MariaDB notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff977f722d98c1105c72000c74384e594446a96" translate="yes" xml:space="preserve">
          <source>Marking a filter &lt;code&gt;is_safe&lt;/code&gt; will coerce the filter&amp;rsquo;s return value to a string. If your filter should return a boolean or other non-string value, marking it &lt;code&gt;is_safe&lt;/code&gt; will probably have unintended consequences (such as converting a boolean False to the string &amp;lsquo;False&amp;rsquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f989987f22e747a6a20e1632167baf49bbb35ce" translate="yes" xml:space="preserve">
          <source>Marking middleware as unused</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311345611b41ef66eb9c30d09d1355a38f149c13" translate="yes" xml:space="preserve">
          <source>Marking strings as no-op</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ef4478c5a91ad82e0866515b18c5b9ba23b7af" translate="yes" xml:space="preserve">
          <source>Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223d15dc9b30717101f8c092e0326f6bd5d6b0ed" translate="yes" xml:space="preserve">
          <source>Marks strings for translation but doesn&amp;rsquo;t translate them now. This can be used to store strings in global variables that should stay in the base language (because they might be used externally) and will be translated later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ea63ecdea5904962549d0b05f6dc32f2807d9a" translate="yes" xml:space="preserve">
          <source>Marks the migrations up to the target one (following the rules above) as applied, but without actually running the SQL to change your database schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1f153abd2bfa9e625d24e6543581e4741ba55d" translate="yes" xml:space="preserve">
          <source>Marks the user as having no password set. This isn&amp;rsquo;t the same as having a blank string for a password. &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.check_password&quot;&gt;&lt;code&gt;check_password()&lt;/code&gt;&lt;/a&gt; for this user will never return &lt;code&gt;True&lt;/code&gt;. Doesn&amp;rsquo;t save the &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd4c73c983b5ef20c68616eada1df033fb69691" translate="yes" xml:space="preserve">
          <source>Marks the user as having no password set. This isn&amp;rsquo;t the same as having a blank string for a password. &lt;a href=&quot;#django.contrib.auth.models.User.check_password&quot;&gt;&lt;code&gt;check_password()&lt;/code&gt;&lt;/a&gt; for this user will never return &lt;code&gt;True&lt;/code&gt;. Doesn&amp;rsquo;t save the &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d5b558d76aca4dd8323ea862d1817d75c36e4e" translate="yes" xml:space="preserve">
          <source>Matching is done by name. This means that you can use SQL&amp;rsquo;s &lt;code&gt;AS&lt;/code&gt; clauses to map fields in the query to model fields. So if you had some other table that had &lt;code&gt;Person&lt;/code&gt; data in it, you could easily map it into &lt;code&gt;Person&lt;/code&gt; instances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1756bec08ab2e5a4f6f3ea1577c5665ca0e8a418" translate="yes" xml:space="preserve">
          <source>Math Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e1ee5cfc81eca21d13684541c3fe5125c8cf23" translate="yes" xml:space="preserve">
          <source>May be &lt;code&gt;'commit_on_success'&lt;/code&gt; (default) or &lt;code&gt;'autocommit'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d5a77b56557cd02637c33e06076b81641a4ddd" translate="yes" xml:space="preserve">
          <source>May be set with a slice or tuple of (begin, end) feature ID&amp;rsquo;s to map from the data source. In other words, this keyword enables the user to selectively import a subset range of features in the geographic data source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49efc4391faa05cc8087791bccf389e65b797277" translate="yes" xml:space="preserve">
          <source>Maybe. You&amp;rsquo;re better protected from DST-related bugs, but you can still shoot yourself in the foot by carelessly turning naive datetimes into aware datetimes, and vice-versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de10edfac7e76d9ec68df69f5a5a36c3464c6350" translate="yes" xml:space="preserve">
          <source>Measurement</source>
          <target state="translated">Measurement</target>
        </trans-unit>
        <trans-unit id="3c38753a72f7a69367f3f46f2f3bf8c4fb743041" translate="yes" xml:space="preserve">
          <source>Measurement API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9d9ce75f58bd008d16b191b24e7db519550a57" translate="yes" xml:space="preserve">
          <source>Measurement Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a372dab2b1d8a942ab1b2063b60fdcc95c3fb8" translate="yes" xml:space="preserve">
          <source>Media files are uploaded by your users. They&amp;rsquo;re untrusted! Make sure your web server never attempts to interpret them. For instance, if a user uploads a &lt;code&gt;.php&lt;/code&gt; file, the web server shouldn&amp;rsquo;t execute it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc301f7283a9e45e85a8a8deab4551d236d86a4" translate="yes" xml:space="preserve">
          <source>Memcached</source>
          <target state="translated">Memcached</target>
        </trans-unit>
        <trans-unit id="3e4380f0ac1531148db9193c0aeaa68f7bbaf08d" translate="yes" xml:space="preserve">
          <source>Memcached backends pass the contents of &lt;a href=&quot;../ref/settings#std:setting-CACHES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; as keyword arguments to the client constructors, allowing for more advanced control of client behavior. For example usage, see below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2d49e9df412b554e332a39a2726c89c1318ae2" translate="yes" xml:space="preserve">
          <source>Memcached runs as a daemon and is allotted a specified amount of RAM. All it does is provide a fast interface for adding, retrieving and deleting data in the cache. All data is stored directly in memory, so there&amp;rsquo;s no overhead of database or filesystem usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8adc1f5324b8d52b9b22d6eba639e747916c344c" translate="yes" xml:space="preserve">
          <source>Memcached, the most commonly-used production cache backend, does not allow cache keys longer than 250 characters or containing whitespace or control characters, and using such keys will cause an exception. To encourage cache-portable code and minimize unpleasant surprises, the other built-in cache backends issue a warning (&lt;code&gt;django.core.cache.backends.base.CacheKeyWarning&lt;/code&gt;) if a key is used that would cause an error on memcached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7315f949ce30d24b2c84415a3ec8ab22d9946b98" translate="yes" xml:space="preserve">
          <source>Message files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3f4ed084336620d7b21bf9a32d845342f802b8" translate="yes" xml:space="preserve">
          <source>Message levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab63989bf9a5038b658c5d4c375220ce4a1ad58" translate="yes" xml:space="preserve">
          <source>Message middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889993ad5e8282135d84fbb43d72e81128bd864a" translate="yes" xml:space="preserve">
          <source>Message tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129739eac18a8e97b6afdd53b93d70391d1ea0f8" translate="yes" xml:space="preserve">
          <source>Message tags are a string representation of the message level plus any extra tags that were added directly in the view (see &lt;a href=&quot;#adding-extra-message-tags&quot;&gt;Adding extra message tags&lt;/a&gt; below for more details). Tags are stored in a string and are separated by spaces. Typically, message tags are used as CSS classes to customize message style based on message type. By default, each level has a single tag that&amp;rsquo;s a lowercase version of its own constant:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1702b4686278becffc88baabe6f4b7a8355532c" translate="yes" xml:space="preserve">
          <source>Messages</source>
          <target state="translated">Messages</target>
        </trans-unit>
        <trans-unit id="624996c17c837f1f6668cb6415dfad8e3d8884e1" translate="yes" xml:space="preserve">
          <source>Messages are comparable. That allows you to easily write tests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a181e64242c1481fec9677caa37392da3000ad86" translate="yes" xml:space="preserve">
          <source>Messages are implemented through a &lt;a href=&quot;../middleware&quot;&gt;middleware&lt;/a&gt; class and corresponding &lt;a href=&quot;../templates/api&quot;&gt;context processor&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd219d05f6a7f3c767dd3fb3a161b3995ee9e9a7" translate="yes" xml:space="preserve">
          <source>Messages framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f63713d0d8953f6ed46c9ee2e3e3db8b179309" translate="yes" xml:space="preserve">
          <source>Messages levels are nothing more than integers, so you can define your own level constants and use them to create more customized user feedback, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac15d4ec7ca50bd18d6e6dc1f5c0d39428a8296" translate="yes" xml:space="preserve">
          <source>Messages relating to the interaction of code with the database. For example, every application-level SQL statement executed by a request is logged at the &lt;code&gt;DEBUG&lt;/code&gt; level to this logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe57b41a0a77a8786566d6da2db51c95d96ec43" translate="yes" xml:space="preserve">
          <source>Messages to this logger have the following extra context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80427fec440b3b33fe3d42e609fafaf5d7908f0b" translate="yes" xml:space="preserve">
          <source>Meter, Metre</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc183aef428f6d3047aa1c84a2802cd7e666781" translate="yes" xml:space="preserve">
          <source>Method called prior to &lt;a href=&quot;#django.db.models.Field.get_db_prep_save&quot;&gt;&lt;code&gt;get_db_prep_save()&lt;/code&gt;&lt;/a&gt; to prepare the value before being saved (e.g. for &lt;a href=&quot;#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;DateField.auto_now&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8237e11e2d1fac8d031550b39dcb305f6b132f9" translate="yes" xml:space="preserve">
          <source>Method-calling happens in the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;{% for %}&lt;/code&gt;&lt;/a&gt; loop: &lt;code&gt;question.choice_set.all&lt;/code&gt; is interpreted as the Python code &lt;code&gt;question.choice_set.all()&lt;/code&gt;, which returns an iterable of &lt;code&gt;Choice&lt;/code&gt; objects and is suitable for use in the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;{% for %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="5110517bbb0ceecfc811636098d300a818bd2903" translate="yes" xml:space="preserve">
          <source>Methods are copied according to the following rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29b6a782cb3466448adea0bbc4942ee85bf4b9c" translate="yes" xml:space="preserve">
          <source>Methods implementing a file-like interface for reading from an &lt;code&gt;HttpRequest&lt;/code&gt; instance. This makes it possible to consume an incoming request in a streaming fashion. A common use-case would be to process a big XML payload with an iterative parser without constructing a whole XML tree in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7537f0d772e0cefae12a5778f293452376697984" translate="yes" xml:space="preserve">
          <source>Methods of &lt;code&gt;BoundField&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e863f4f1c1be0d2a8f2373d48bcee8d5acaf1b" translate="yes" xml:space="preserve">
          <source>Methods on &lt;code&gt;ContentType&lt;/code&gt; instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d351ad385bfedf9cba6858a1efa5aa57dc9698a4" translate="yes" xml:space="preserve">
          <source>Methods that do not return &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd9ae43b3e6c8f254de171e1a039e0f3d4c6292" translate="yes" xml:space="preserve">
          <source>Methods that it provides can be used to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50171e2f44297086d6687ff051c7db91aa0d69c5" translate="yes" xml:space="preserve">
          <source>Methods that return new &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b62d647fb1aa8ee6a32fabd2dd97436495a6e7" translate="yes" xml:space="preserve">
          <source>Methods with a &lt;code&gt;queryset_only&lt;/code&gt; attribute set to &lt;code&gt;False&lt;/code&gt; are always copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92a882f4327d805f08dc3ac7925cb366b015a77" translate="yes" xml:space="preserve">
          <source>Methods with a &lt;code&gt;queryset_only&lt;/code&gt; attribute set to &lt;code&gt;True&lt;/code&gt; are never copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415e8975c1cd5ee32623426c5ac3a1fbe4a66920" translate="yes" xml:space="preserve">
          <source>Micrometer, Micrometre</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac4affa2d0ba5a96fdb55b5878f3a9560d8453e" translate="yes" xml:space="preserve">
          <source>Microseconds.</source>
          <target state="translated">Microseconds.</target>
        </trans-unit>
        <trans-unit id="8650e63c88329a081961555eda8eb1cef5d7d48c" translate="yes" xml:space="preserve">
          <source>Microsoft SQL Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8978ed84b5906ad4191a0b252828be64701bfa" translate="yes" xml:space="preserve">
          <source>Middleware</source>
          <target state="translated">Middleware</target>
        </trans-unit>
        <trans-unit id="013b752afcfb9baaa62063cabcd12f518b56607e" translate="yes" xml:space="preserve">
          <source>Middleware are run in reverse order during the response phase, which includes &lt;code&gt;process_template_response()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0fd4a19dba75def9d8c0d763f8181a885326acd" translate="yes" xml:space="preserve">
          <source>Middleware can live anywhere on your Python path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041ebd3d71ecfcfc34214d0415172c97361cd2c1" translate="yes" xml:space="preserve">
          <source>Middleware factories must accept a &lt;code&gt;get_response&lt;/code&gt; argument. You can also initialize some global state for the middleware. Keep in mind a couple of caveats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becb94e67378bbdc666f92221c00fee5d9c7782a" translate="yes" xml:space="preserve">
          <source>Middleware for utilizing Web server provided authentication when enabled only on the login page. See &lt;a href=&quot;../howto/auth-remote-user#persistent-remote-user-middleware-howto&quot;&gt;Using REMOTE_USER on login pages only&lt;/a&gt; for usage details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273bb01c3c655949e84e50a76a64ca07929efe48" translate="yes" xml:space="preserve">
          <source>Middleware for utilizing Web server provided authentication. See &lt;a href=&quot;../howto/auth-remote-user&quot;&gt;Authentication using REMOTE_USER&lt;/a&gt; for usage details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c162271e592b254696ec9da70c5a639a0962dbfb" translate="yes" xml:space="preserve">
          <source>Middleware is a framework of hooks into Django&amp;rsquo;s request/response processing. It&amp;rsquo;s a light, low-level &amp;ldquo;plugin&amp;rdquo; system for globally altering Django&amp;rsquo;s input or output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f879bb383b1e685c9b8aed3ac05060d2ce8fdde" translate="yes" xml:space="preserve">
          <source>Middleware order and layering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f978b6bdf37893405edce30440dd6cdeed90da10" translate="yes" xml:space="preserve">
          <source>Middleware ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a60d1acaad6e279a7e85ba440a4702e817dfa62" translate="yes" xml:space="preserve">
          <source>Migrating data between third-party apps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6104f9f7c588f7a77e0522afbc5dfe496325f1fa" translate="yes" xml:space="preserve">
          <source>Migration Operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e03381bda29b3c39bbf1a66cfd648f8b31e67c1" translate="yes" xml:space="preserve">
          <source>Migration files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ff3d249382d25863d2b7fb6623728e99a7bc35" translate="yes" xml:space="preserve">
          <source>Migration files are composed of one or more &lt;code&gt;Operation&lt;/code&gt;s, objects that declaratively record what the migration should do to your database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25bf8db0829f899a4a501088ef01329564b4b8f" translate="yes" xml:space="preserve">
          <source>Migration guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2da04ce43cf92a7b18834d64966f83c65ad531" translate="yes" xml:space="preserve">
          <source>Migration operation for adding extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca984afd74a0089c1d5a5816e4de2e8d46a60b5" translate="yes" xml:space="preserve">
          <source>Migrations</source>
          <target state="translated">Migrations</target>
        </trans-unit>
        <trans-unit id="f2a9aa05174d5ea271caefdf9a694cb35808cba9" translate="yes" xml:space="preserve">
          <source>Migrations are Django&amp;rsquo;s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema. They&amp;rsquo;re designed to be mostly automatic, but you&amp;rsquo;ll need to know when to make migrations, when to run them, and the common problems you might run into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5860dbdc436c899604f2a6b5c077a545ec4c3e15" translate="yes" xml:space="preserve">
          <source>Migrations are Python files containing the old definitions of your models - thus, to write them, Django must take the current state of your models and serialize them out into a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4201b97e35b606bb8ab03e0bf508dc53754b71ae" translate="yes" xml:space="preserve">
          <source>Migrations are how Django stores changes to your models (and thus your database schema) - they&amp;rsquo;re files on disk. You can read the migration for your new model if you like; it&amp;rsquo;s the file &lt;code&gt;polls/migrations/0001_initial.py&lt;/code&gt;. Don&amp;rsquo;t worry, you&amp;rsquo;re not expected to read them every time Django makes one, but they&amp;rsquo;re designed to be human-editable in case you want to manually tweak how Django changes things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8520b8c8572a999f56ebaca25b392b1e5a7fd768" translate="yes" xml:space="preserve">
          <source>Migrations are stored as an on-disk format, referred to here as &amp;ldquo;migration files&amp;rdquo;. These files are actually normal Python files with an agreed-upon object layout, written in a declarative style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a332c317bf1d0e60fbc32123e8677f7cc70c2ae" translate="yes" xml:space="preserve">
          <source>Migrations are supported on all backends that Django ships with, as well as any third-party backends if they have programmed in support for schema alteration (done via the &lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor&lt;/a&gt; class).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a210ab1a3d79accd51ed6fcf26ac6e586f421a" translate="yes" xml:space="preserve">
          <source>Migrations are very powerful and let you change your models over time, as you develop your project, without the need to delete your database or tables and make new ones - it specializes in upgrading your database live, without losing data. We&amp;rsquo;ll cover them in more depth in a later part of the tutorial, but for now, remember the three-step guide to making model changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287dd3417d62ad864c57a1c97b22ab37b12724d5" translate="yes" xml:space="preserve">
          <source>Migrations that add unique fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3e9d3540e1e45a2df1c00240d8e8d4a4deb51c" translate="yes" xml:space="preserve">
          <source>Migrations that alter data are usually called &amp;ldquo;data migrations&amp;rdquo;; they&amp;rsquo;re best written as separate migrations, sitting alongside your schema migrations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec5bf73e34a683f1006273ac17e9ff09e9d9e72" translate="yes" xml:space="preserve">
          <source>Migrations will run the same way on the same dataset and produce consistent results, meaning that what you see in development and staging is, under the same circumstances, exactly what will happen in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb4f2a30749a0e17e31104b3bab726aafe81cf3" translate="yes" xml:space="preserve">
          <source>Mile</source>
          <target state="translated">Mile</target>
        </trans-unit>
        <trans-unit id="938df1db624a12e5f3794fda79717eccaea7b65b" translate="yes" xml:space="preserve">
          <source>Millimetre, Millimeter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294882601354ee55d0273a6e0801814fd33c87c2" translate="yes" xml:space="preserve">
          <source>Mind your charset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fc900f874bc71a36d5a756225bfdc1f04f6842" translate="yes" xml:space="preserve">
          <source>Minutes is the smallest unit used, and &amp;ldquo;0 minutes&amp;rdquo; will be returned for any date that is in the future relative to the comparison point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f34801db80740b6f10ab3922d189b3912dbf6f0" translate="yes" xml:space="preserve">
          <source>Minutes is the smallest unit used, and &amp;ldquo;0 minutes&amp;rdquo; will be returned for any date that is in the past relative to the comparison point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed20376662d49d565aa06cdaa83fc71ecbc93eb" translate="yes" xml:space="preserve">
          <source>Minutes.</source>
          <target state="translated">Minutes.</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="881da705478e54a3227ce93b7e1330829ae0e155" translate="yes" xml:space="preserve">
          <source>Missing context variables are logged as &lt;code&gt;DEBUG&lt;/code&gt; messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6814e874673f049fff670e46ee2d5ebe0602c10a" translate="yes" xml:space="preserve">
          <source>Mitre ratio limit (&lt;code&gt;mitre_limit&lt;/code&gt;) only affects mitered join style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb555521dabc0a453c76cc4ab7c56dcedf3418e" translate="yes" xml:space="preserve">
          <source>Mixing HTTP and HTTPS on the same site is discouraged, therefore &lt;a href=&quot;#django.http.HttpRequest.build_absolute_uri&quot;&gt;&lt;code&gt;build_absolute_uri()&lt;/code&gt;&lt;/a&gt; will always generate an absolute URI with the same scheme the current request has. If you need to redirect users to HTTPS, it&amp;rsquo;s best to let your Web server redirect all HTTP traffic to HTTPS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6405571c37c55f3908e016d6f0d1bc7dd1ad7b90" translate="yes" xml:space="preserve">
          <source>Mixins are a form of multiple inheritance where behaviors and attributes of multiple parent classes can be combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7faff22844ff4aa0e265d825accaee88c80b838d" translate="yes" xml:space="preserve">
          <source>Mixins are an excellent way of reusing code across multiple classes, but they come with some cost. The more your code is scattered among mixins, the harder it will be to read a child class and know what exactly it is doing, and the harder it will be to know which methods from which mixins to override if you are subclassing something that has a deep inheritance tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b491ee73979a719bb1af9d3247e0a61ac5e7319" translate="yes" xml:space="preserve">
          <source>Model &lt;code&gt;Meta&lt;/code&gt; options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdb5bfd735f8228097410fff85a12d88904e922" translate="yes" xml:space="preserve">
          <source>Model &lt;code&gt;_meta&lt;/code&gt; API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec2b6199d9a2dcabb152e3ac5aa91edeb898132" translate="yes" xml:space="preserve">
          <source>Model API reference. For introductory material, see &lt;a href=&quot;../../topics/db/models&quot;&gt;Models&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf86752979128e4676b84c447ce0cf15b2b37d6" translate="yes" xml:space="preserve">
          <source>Model Form API reference. For introductory material about model forms, see the &lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;Creating forms from models&lt;/a&gt; topic guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c96d990f2ccf84f92cf27b02cad319aaaf78f8b" translate="yes" xml:space="preserve">
          <source>Model Form Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43751733528e91e6a81ee1390944c2f4caa1db81" translate="yes" xml:space="preserve">
          <source>Model Meta options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda29083574ba4f14bce85088566ec29f2d87d35" translate="yes" xml:space="preserve">
          <source>Model _meta API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ca529d99e4855dd276594af7db79215340645f" translate="yes" xml:space="preserve">
          <source>Model attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ac726910ce828d6f749b66392ad113e9e02cc8" translate="yes" xml:space="preserve">
          <source>Model class reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37287d65959cefe51226e772fa03bd4238e3e0c1" translate="yes" xml:space="preserve">
          <source>Model field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41719e961e289e645a51ec9bdd2cad757b697d54" translate="yes" xml:space="preserve">
          <source>Model field reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695921f5cbf66d3a0c35cce9afebbff6926a0687" translate="yes" xml:space="preserve">
          <source>Model fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56e51d2d60a86a3949592b2c8a12b4b1ebf5d14" translate="yes" xml:space="preserve">
          <source>Model fields and relationships &lt;code&gt;verbose_name&lt;/code&gt; and &lt;code&gt;help_text&lt;/code&gt; option values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e80f8624b932b0e8e91e5056ff5d83c4a905b6b" translate="yes" xml:space="preserve">
          <source>Model form views provide a &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.form_valid&quot;&gt;&lt;code&gt;form_valid()&lt;/code&gt;&lt;/a&gt; implementation that saves the model automatically. You can override this if you have any special requirements; see below for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1d7da0b3927cb03dafa5eee91a571920018939" translate="yes" xml:space="preserve">
          <source>Model forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66e24ec33a2b3c68df3f08c48b5b1e196b500a3" translate="yes" xml:space="preserve">
          <source>Model formsets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8378c1c9f92338fe290a10e3674d26e5ac280291" translate="yes" xml:space="preserve">
          <source>Model formsets are very similar to formsets. Let&amp;rsquo;s say we want to present a formset to edit &lt;code&gt;Author&lt;/code&gt; model instances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c8939e1430f30633a07f17d075ed74776ac5e3" translate="yes" xml:space="preserve">
          <source>Model formsets validate unique fields in a case-sensitive manner. Thus when using a case-insensitive collation, a formset with unique field values that differ only by case will pass validation, but upon calling &lt;code&gt;save()&lt;/code&gt;, an &lt;code&gt;IntegrityError&lt;/code&gt; will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd41371e5246330c123f4f022d722358234894fa" translate="yes" xml:space="preserve">
          <source>Model index reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6960b6acac76077e50017099fe2ef244227d2a7b" translate="yes" xml:space="preserve">
          <source>Model inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b71c0d1a57d50595ab71717a70ae2e080828c49" translate="yes" xml:space="preserve">
          <source>Model inheritance in Django works almost identically to the way normal class inheritance works in Python, but the basics at the beginning of the page should still be followed. That means the base class should subclass &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;django.db.models.Model&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca38e74d8be1b734a75b8de59f840b8eac71446" translate="yes" xml:space="preserve">
          <source>Model instance reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0f552413c0fc0955ae8f0d43a9dce0382f6758" translate="yes" xml:space="preserve">
          <source>Model managers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0c8a95a9f103b378fe4743340f1323f96c496a" translate="yes" xml:space="preserve">
          <source>Model managers are inherited from abstract base classes. Overriding an inherited field which is referenced by an inherited &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; may cause subtle bugs. See &lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;custom managers and model inheritance&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ef284a8b1cde33fda80d5b952f2b5d4500f805" translate="yes" xml:space="preserve">
          <source>Model metadata is &amp;ldquo;anything that&amp;rsquo;s not a field&amp;rdquo;, such as ordering options (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt;), database table name (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt;), or human-readable singular and plural names (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name_plural&quot;&gt;&lt;code&gt;verbose_name_plural&lt;/code&gt;&lt;/a&gt;). None are required, and adding &lt;code&gt;class
Meta&lt;/code&gt; to a model is completely optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0c31f079fa44ab9d3bf1cf67f70d075de29d6d" translate="yes" xml:space="preserve">
          <source>Model methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21aa040365d9fd0e90458c9cdf44ab96ac4b61f" translate="yes" xml:space="preserve">
          <source>Model methods &lt;code&gt;short_description&lt;/code&gt; attribute values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc2c1b4808a8c6c174bac6b735cf6d4817b2770" translate="yes" xml:space="preserve">
          <source>Model reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e901998535b4b4548a823fe6e8dff9a51d7e087d" translate="yes" xml:space="preserve">
          <source>Model signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8bfdb89301aaa9bc29391e7c013fd0445caa5ab" translate="yes" xml:space="preserve">
          <source>Model signals &lt;code&gt;sender&lt;/code&gt; model can be lazily referenced when connecting a receiver by specifying its full application label. For example, an &lt;code&gt;Question&lt;/code&gt; model defined in the &lt;code&gt;polls&lt;/code&gt; application could be referenced as &lt;code&gt;'polls.Question'&lt;/code&gt;. This sort of reference can be quite handy when dealing with circular import dependencies and swappable models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165513e8bf709c70b23fa24d2ae33a838ec202dc" translate="yes" xml:space="preserve">
          <source>Model table names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a980d3853518b4411e7a3b2ddb629ed67ce75d" translate="yes" xml:space="preserve">
          <source>Model verbose names values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc8c7b4713b18469124c44661e6c1bc2f64d7e7" translate="yes" xml:space="preserve">
          <source>ModelForm factory function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3798f81c7b6fecad2cbfec741314f8a66c0eca3" translate="yes" xml:space="preserve">
          <source>Models</source>
          <target state="translated">Models</target>
        </trans-unit>
        <trans-unit id="1f5b77557908456acc92fa188a7dd4804d6625a9" translate="yes" xml:space="preserve">
          <source>Models across files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28356323a61c86746a499dd28b297834e5993733" translate="yes" xml:space="preserve">
          <source>Models and &lt;code&gt;request.user&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50e5bec2539d667d25b642e592d0b97dcede69d" translate="yes" xml:space="preserve">
          <source>Models and Forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a49aecaa0df41bb8d712681740aeb1f36c1fc1b" translate="yes" xml:space="preserve">
          <source>Models and databases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d52954ae89d4a9e2174f5b96bd02ccd7c226bb" translate="yes" xml:space="preserve">
          <source>Models are created for foreign tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005e6f010a367db7b6295c852fb0fac610e1e07a" translate="yes" xml:space="preserve">
          <source>Models are created for materialized views if &lt;a href=&quot;#cmdoption-inspectdb-include-views&quot;&gt;&lt;code&gt;--include-views&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b4110d21468008c8e0a0e33f9599a8d37cfc02" translate="yes" xml:space="preserve">
          <source>Models are created for partition tables if &lt;a href=&quot;#cmdoption-inspectdb-include-partitions&quot;&gt;&lt;code&gt;--include-partitions&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1c8f41efbb309a8f500003679e08088e02a2b4" translate="yes" xml:space="preserve">
          <source>Modern browsers don&amp;rsquo;t honor &lt;code&gt;X-XSS-Protection&lt;/code&gt; HTTP header anymore. Although the setting offers little practical benefit, you may still want to set the header if you support older browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3034007e7d3292d4b30af33ea10b4ff6560349a" translate="yes" xml:space="preserve">
          <source>Modern browsers honor the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&quot;&gt;X-Frame-Options&lt;/a&gt; HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe. If the response contains the header with a value of &lt;code&gt;SAMEORIGIN&lt;/code&gt; then the browser will only load the resource in a frame if the request originated from the same site. If the header is set to &lt;code&gt;DENY&lt;/code&gt; then the browser will block the resource from loading in a frame no matter which site made the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e67113000137e6e326a81f0fcb1e0dadbbee68" translate="yes" xml:space="preserve">
          <source>Modify &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; to list &lt;code&gt;Argon2PasswordHasher&lt;/code&gt; first. That is, in your settings file, you&amp;rsquo;d put:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eae86d823b9275ab9b9bba0c0701ec36c9bc076" translate="yes" xml:space="preserve">
          <source>Modify &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; to list &lt;code&gt;BCryptSHA256PasswordHasher&lt;/code&gt; first. That is, in your settings file, you&amp;rsquo;d put:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c82d310179969bace38749c982ea817a33948da" translate="yes" xml:space="preserve">
          <source>Modify Windows environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101a18a8e247790ce8a0355c2bad81d18bc06a10" translate="yes" xml:space="preserve">
          <source>Modifying a manager&amp;rsquo;s initial &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a3cd384e10d2a50b6cfc40c58749ddd9ddb377" translate="yes" xml:space="preserve">
          <source>Modifying the user libraries can affect other Python software on your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6188e9bec1a9bf83d8f692aed7153e3b5e7d1f67" translate="yes" xml:space="preserve">
          <source>Modifying upload handlers on the fly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bf8ae756f6957bd6a600e041cf7b0f01e97d7c" translate="yes" xml:space="preserve">
          <source>Module containing the models, e.g. &lt;code&gt;&amp;lt;module 'django.contrib.admin.models'
from 'django/contrib/admin/models.py'&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5914d9d522831d2cbcc08992929a1fa0fffd13f4" translate="yes" xml:space="preserve">
          <source>Month abbreviation in Associated Press style. Proprietary extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1547c51f374801edb89bd01a886d7df6c59157e7" translate="yes" xml:space="preserve">
          <source>Month without leading zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789db7de9daf4c3dea26155c4de1508cc63c78dc" translate="yes" xml:space="preserve">
          <source>Month, 2 digits with leading zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6268ce268f58c92a8b8c465bb7039eb42da0b88e" translate="yes" xml:space="preserve">
          <source>Month, locale specific alternative representation usually used for long date representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b6759ae7ec52517f6707eab3f49676fded852c" translate="yes" xml:space="preserve">
          <source>Month, textual, 3 letters, lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54acf667cda1d25c557e72b3eecaf3a5e654244a" translate="yes" xml:space="preserve">
          <source>Month, textual, 3 letters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f3a466c30a6f138ee4b6107c9f1297f5a1c83b" translate="yes" xml:space="preserve">
          <source>Month, textual, long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8582964d85a742a683053ee36dbed4b0d9acc91" translate="yes" xml:space="preserve">
          <source>Month-based archive page &amp;ndash; displays all days with entries in the given month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e07c73ff2257408bd49d184644b99ce9d8ef611" translate="yes" xml:space="preserve">
          <source>More &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;{% block %}&lt;/code&gt;&lt;/a&gt; tags in your base templates are better. Remember, child templates don&amp;rsquo;t have to define all parent blocks, so you can fill in reasonable defaults in a number of blocks, then only define the ones you need later. It&amp;rsquo;s better to have more hooks than fewer hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299848f148ba8e572159f4587392af118a784da7" translate="yes" xml:space="preserve">
          <source>More about Django &lt;code&gt;Form&lt;/code&gt; classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d0d1d2ad55a7e08bc82e9ce7118b05835d686b" translate="yes" xml:space="preserve">
          <source>More about Django Form classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b989fb93fc290d806e1beba975983651f8aa1602" translate="yes" xml:space="preserve">
          <source>More advanced migrations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e3edf8aaff223f7c4bc82400f24d060ba670ce" translate="yes" xml:space="preserve">
          <source>More attractive automatically-generated admin features &amp;ndash; this overview barely scratched the surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c923753c18be61c1004c12ca3fade2d08722915" translate="yes" xml:space="preserve">
          <source>More complex examples are beyond the scope of this document, but remember - for any configuration of your Field instance, &lt;code&gt;deconstruct()&lt;/code&gt; must return arguments that you can pass to &lt;code&gt;__init__&lt;/code&gt; to reconstruct that state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db010a93e37a57c66656081acb50090017c4ab0d" translate="yes" xml:space="preserve">
          <source>More comprehensive tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c8313dae352f6c86d7bd1fe65b2e1089885088" translate="yes" xml:space="preserve">
          <source>More details are in &lt;a href=&quot;../i18n/translation#explicitly-setting-the-active-language&quot;&gt;Explicitly setting the active language&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1a82e1043266d553c6d8ba1b0f6a2fd3e63754" translate="yes" xml:space="preserve">
          <source>More details are in &lt;a href=&quot;../i18n/translation#how-django-discovers-language-preference&quot;&gt;How Django discovers language preference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7b4df20dd480c377a581def56226b3c32ecde3" translate="yes" xml:space="preserve">
          <source>More details can be found in the &lt;a href=&quot;https://www.w3.org/International/questions/qa-i18n&quot;&gt;W3C Web Internationalization FAQ&lt;/a&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalization_and_localization&quot;&gt;Wikipedia article&lt;/a&gt; or the &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/gettext.html#Concepts&quot;&gt;GNU gettext documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad47279afb909f9e5e8501ff7c41001131170ec" translate="yes" xml:space="preserve">
          <source>More examples of generic views are available in some third party applications, or you could write your own as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525622173583779827304cfa800b3d1dfee99b4c" translate="yes" xml:space="preserve">
          <source>More granular output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f063c4c87e9bae1816af9e601f0d358edd44ea7d" translate="yes" xml:space="preserve">
          <source>More information for new contributors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8f6e8eec977860d6662bb5520eba03e159160c" translate="yes" xml:space="preserve">
          <source>More often, a newcomer to testing will create some code and later decide that it should have some tests. Perhaps it would have been better to write some tests earlier, but it&amp;rsquo;s never too late to get started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2618cd8952a806ae4124de24ab64990b2f4af767" translate="yes" xml:space="preserve">
          <source>More on fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc01b6e00a77dc61a0069c6788d0ed249454de6" translate="yes" xml:space="preserve">
          <source>More than just HTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270b6239e60a5ebd66ab15c63878e1d3222c33cc" translate="yes" xml:space="preserve">
          <source>More than one foreign key to the same model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2586d441d16010e8412e11c6de8265bc1c1e557f" translate="yes" xml:space="preserve">
          <source>Moreover, arithmetic operations may be performed between the distance objects:</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
