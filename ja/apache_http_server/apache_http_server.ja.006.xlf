<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="apache_http_server">
    <body>
      <group id="apache_http_server">
        <trans-unit id="fc52bf4a64a5975a460e1dc39fe3838637d264b0" translate="yes" xml:space="preserve">
          <source>There are two forms of this directive. With three arguments, it applies specifically to a &lt;var&gt;filter-name&lt;/var&gt; and a &lt;var&gt;provider-name&lt;/var&gt; for that filter. With two arguments it applies to a &lt;var&gt;filter-name&lt;/var&gt; whenever the filter runs &lt;em&gt;any&lt;/em&gt; provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70dad6ae61119fe7fcb68181399b7cee9550675" translate="yes" xml:space="preserve">
          <source>There are two kinds of environment variables that affect the Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ed955200fb38fde9cc5add5966ede3928859d7" translate="yes" xml:space="preserve">
          <source>There are two main differences between ``regular'' programming, and CGI programming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db761841c760f74a9fd004b657d5d8e3b56e2440" translate="yes" xml:space="preserve">
          <source>There are two main reasons to avoid the use of &lt;code&gt;.htaccess&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50606e5a31cecfe3878bf4e23fbc7cb8b405833e" translate="yes" xml:space="preserve">
          <source>There are two negotiation methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cefbf49201e6a654eff25d8baa1208708934d3f" translate="yes" xml:space="preserve">
          <source>There are two phases in granting access to a user. The first phase is authentication, in which the &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; authentication provider verifies that the user's credentials are valid. This is also called the &lt;em&gt;search/bind&lt;/em&gt; phase. The second phase is authorization, in which &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; determines if the authenticated user is allowed access to the resource in question. This is also known as the &lt;em&gt;compare&lt;/em&gt; phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed71495f2d2d5a9394ff4316841979492e34995" translate="yes" xml:space="preserve">
          <source>There are two special names that you may use in this directive: 'manual' and 'auto'. This determines if a Managed Domain shall have exactly the name list as is configured ('manual') or offer more convenience. With 'auto' all names of a virtual host are added to a MD. Conventiently, 'auto' is also the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798da0702f95245da27d3355d6ffbd6fb20377d0" translate="yes" xml:space="preserve">
          <source>There are two steps to allowing CGI execution in an arbitrary directory. First, the &lt;code&gt;cgi-script&lt;/code&gt; handler must be activated using the &lt;code&gt;&lt;a href=&quot;../mod/mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../mod/core#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt; directive. Second, &lt;code&gt;ExecCGI&lt;/code&gt; must be specified in the &lt;code&gt;&lt;a href=&quot;../mod/core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe2d66609ad2265c939284044e2d8174fa4a65e" translate="yes" xml:space="preserve">
          <source>There are two ways to accomplish this. One is the socket option &lt;code&gt;SO_LINGER&lt;/code&gt;. But as fate would have it, this has never been implemented properly in most TCP/IP stacks. Even on those stacks with a proper implementation (&lt;em&gt;i.e.&lt;/em&gt;, Linux 2.0.31), this method proves to be more expensive (cputime) than the next solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9285901718c355c2d05e8c26444b6cf4cb82b2" translate="yes" xml:space="preserve">
          <source>There are two ways to use filtering: Simple and Dynamic. In general, you should use one or the other; mixing them can have unexpected consequences (although simple Input filtering can be mixed freely with either simple or dynamic Output filtering).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c14f266e00094b0e1d21c569a91582d2c243a41" translate="yes" xml:space="preserve">
          <source>There are ways to enhance the security of SSI files while still taking advantage of the benefits they provide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f617658d4a59bb520ae4d2a6f4e9a40114938556" translate="yes" xml:space="preserve">
          <source>There has been a lot written about HTTP/2 and how it works. The most normative is, of course, its &lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;RFC 7540&lt;/a&gt; (&lt;a href=&quot;http://httpwg.org/specs/rfc7540.html&quot;&gt;also available in more readable formatting, YMMV&lt;/a&gt;). So, there you'll find the nuts and bolts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cff7415a722997b56484f6c85fef1bafd4be14f" translate="yes" xml:space="preserve">
          <source>There is a third option, &lt;code&gt;UseCanonicalName DNS&lt;/code&gt;, which is intended for use with mass IP-based virtual hosting to support ancient clients that do not provide a &lt;code&gt;Host:&lt;/code&gt; header. With this option, Apache httpd does a reverse DNS lookup on the server IP address that the client connected to in order to work out self-referential URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac9299719b77b3779da37b00211a67a75df1746" translate="yes" xml:space="preserve">
          <source>There is an environment variable &lt;code&gt;force-gzip&lt;/code&gt;, set via &lt;code&gt;&lt;a href=&quot;mod_env#setenv&quot;&gt;SetEnv&lt;/a&gt;&lt;/code&gt;, which will ignore the accept-encoding setting of your browser and will send compressed output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b13a918fa17603cc754b7a0747294fa85e02855" translate="yes" xml:space="preserve">
          <source>There is an environment variable &lt;code&gt;no-brotli&lt;/code&gt;, set via &lt;code&gt;&lt;a href=&quot;mod_env#setenv&quot;&gt;SetEnv&lt;/a&gt;&lt;/code&gt;, which will disable brotli compression for a particular request, even if it is supported by the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bc740e67ca8d7af5d3a2edd838f4d93906c1f8" translate="yes" xml:space="preserve">
          <source>There is no capability within the Apache server to leave a requested module loaded. However, you may preload and keep a specific module loaded by using the following syntax in your httpd.conf:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f7265ff3a8cad54f8d3ad3a98b85fddd9b822a" translate="yes" xml:space="preserve">
          <source>There is no need to manually enable connection pooling in the Apache configuration. Any module using this module for access to LDAP services will share the connection pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ea26633947ec08452226a10d077cdfb42179ff" translate="yes" xml:space="preserve">
          <source>There is one more thing to ordering: the client has its own preferences, too. If you want, you can configure your server to select the protocol most preferred by the client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24856b8409dbdcd7ff7b3e3cd2a07396a9ab696" translate="yes" xml:space="preserve">
          <source>There may be times when authentication puts an unacceptable load on a provider or on your network. This is most likely to affect users of &lt;code&gt;&lt;a href=&quot;../mod/mod_authn_dbd&quot;&gt;mod_authn_dbd&lt;/a&gt;&lt;/code&gt; (or third-party/custom providers). To deal with this, HTTPD 2.3/2.4 introduces a new caching provider &lt;code&gt;&lt;a href=&quot;../mod/mod_authn_socache&quot;&gt;mod_authn_socache&lt;/a&gt;&lt;/code&gt; to cache credentials and reduce the load on the origin provider(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808e45a8550f4607b9133e69dd1d913fd5347859" translate="yes" xml:space="preserve">
          <source>There's another way to let multiple users in that is less specific. Rather than creating a group file, you can just use the following directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7629d8933d627e8bc5262807e9aef8e682ed78a8" translate="yes" xml:space="preserve">
          <source>These HTTP headers are an instruction to the client about the document's validity and persistence. If cached, the document may be fetched from the cache rather than from the source until this time has passed. After that, the cache copy is considered &quot;expired&quot; and invalid, and a new copy must be obtained from the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7065e68bb08374e261a482ee59e8c1f7881c0a5e" translate="yes" xml:space="preserve">
          <source>These authorization providers affect which hosts can access an area of the server. Access can be controlled by hostname, IP Address, or IP Address range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf47a63c159ad471821d721a702ad186188a7b4d" translate="yes" xml:space="preserve">
          <source>These directives alter the protocol behavior of &lt;code&gt;&lt;a href=&quot;mod/mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. See the &lt;code&gt;&lt;a href=&quot;mod/mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod/mod_proxy_http&quot;&gt;mod_proxy_http&lt;/a&gt;&lt;/code&gt; documentation for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587bb6b8336e35f809702264bf62a896a06d157b" translate="yes" xml:space="preserve">
          <source>These documents can be customized to whatever degree you wish to provide more useful information to users about your site, and what they can expect to find there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4352e3f432528116092b2ac8da3ac2d7527d269" translate="yes" xml:space="preserve">
          <source>These improvements are valid for both HTTP/HTTPS connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629497be75229c95cbd33f4c85bb10c8b0bf09fc" translate="yes" xml:space="preserve">
          <source>These pages document the country names (official short names in English) in alphabetical order as given in ISO 3166-1 and the corresponding ISO 3166-1-alpha-2 code elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41301fd0c6504fdf648591e667fcbaa508d2c940" translate="yes" xml:space="preserve">
          <source>These rules are applied prior to request processing, so must be configured at the global or default (first) matching virtual host section, by IP/port interface (and not by name) to be honored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fb952e8d6bf8454eb9269956664f61d9305c6b" translate="yes" xml:space="preserve">
          <source>These tokens can not be combined with each other or &lt;code&gt;strftime(3)&lt;/code&gt; formatting in the same format string. You can use multiple &lt;code&gt;%{format}t&lt;/code&gt; tokens instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea08ba26a297b114cc247d5e4db8f365510324bf" translate="yes" xml:space="preserve">
          <source>These variables are available to the CGI programmer, and are half of the story of the client-server communication. The complete list of required variables is at &lt;a href=&quot;http://www.ietf.org/rfc/rfc3875&quot;&gt;Common Gateway Interface RFC&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80ec3a63e676aa601222a4c8fe252168db33dee" translate="yes" xml:space="preserve">
          <source>Third-party modules like mod_php may be used to write code that does a variety of things. Many third-party applications, written using a variety of languages and tools, are available for download and installation on your Apache HTTP Server. Support of these third-party things is beyond the scope of this documentation, and you should find their documentation or other support forums to answer your questions about them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0c9966576fbc6d61f65d9d4d1381c12b439db7" translate="yes" xml:space="preserve">
          <source>Third-party packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157327ad385544f625e2c923b20d8f5819760b52" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;mmap()&lt;/code&gt;ing is done once at server start or restart, only. So whenever one of the mapped files changes on the filesystem you &lt;em&gt;have&lt;/em&gt; to restart the server (see the &lt;a href=&quot;../stopping&quot;&gt;Stopping and Restarting&lt;/a&gt; documentation). To reiterate that point: if the files are modified &lt;em&gt;in place&lt;/em&gt; without restarting the server you may end up serving requests that are completely bogus. You should update files by unlinking the old copy and putting a new copy in place. Most tools such as &lt;code&gt;rdist&lt;/code&gt; and &lt;code&gt;mv&lt;/code&gt; do this. The reason why this modules doesn't take care of changes to the files is that this check would need an extra &lt;code&gt;stat()&lt;/code&gt; every time which is a waste and against the intent of I/O reduction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b965c956f28755b454e34d204851be6d315ba6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;write(2)&lt;/code&gt; call records the request in the access log. Note that one thing missing from this trace is a &lt;code&gt;time(2)&lt;/code&gt; call. Unlike Apache 1.3, Apache 2.x uses &lt;code&gt;gettimeofday(3)&lt;/code&gt; to look up the time. On some operating systems, like Linux or Solaris, &lt;code&gt;gettimeofday&lt;/code&gt; has an optimized implementation that doesn't require as much overhead as a typical system call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd65bbff8cda967b2c150b431cbb3d7bb03ad403" translate="yes" xml:space="preserve">
          <source>This Example will uncompress gzip'ed output from example.com, so other filters can do further processing with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd587a0c97d457496bc64c6e7759c1f7f556bd2" translate="yes" xml:space="preserve">
          <source>This MPM depends on &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#apr&quot;&gt;APR&lt;/a&gt;'s atomic compare-and-swap operations for thread synchronization. If you are compiling for an x86 target and you don't need to support 386s, or you are compiling for a SPARC and you don't need to run on pre-UltraSPARC chips, add &lt;code&gt;--enable-nonportable-atomics=yes&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; script's arguments. This will cause APR to implement atomic operations using efficient opcodes not available in older CPUs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e781abb83dc40615a6c07623314a0994cdabf72a" translate="yes" xml:space="preserve">
          <source>This MPM does not perform well on older platforms which lack good threading, but the requirement for EPoll or KQueue makes this moot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57769a1f7186d96160f7c3e39ab046ffde374a1a" translate="yes" xml:space="preserve">
          <source>This MPM tries to fix the 'keep alive problem' in HTTP. After a client completes the first request, it can keep the connection open, sending further requests using the same socket and saving significant overhead in creating TCP connections. However, Apache HTTP Server traditionally keeps an entire child process/thread waiting for data from the client, which brings its own disadvantages. To solve this problem, this MPM uses a dedicated listener thread for each process to handle both the Listening sockets, all sockets that are in a Keep Alive state, sockets where the handler and protocol filters have done their work and the ones where the only remaining thing to do is send the data to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b7e26ace2780b73877a19bb09d4ba7f23d2c5d" translate="yes" xml:space="preserve">
          <source>This Recommendation defines a new XHTML document type that is based upon the module framework and modules defined in Modularization of XHTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6cf56469c5b50c525f94a6600145a4f23e56c41" translate="yes" xml:space="preserve">
          <source>This allows a convenient way to match connections that originate from the local host:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bd9c4f2d1a17fd02a914dd6c521ab05cfaa2cf" translate="yes" xml:space="preserve">
          <source>This allows h2, the secure variant, to be the preferred protocol on your server connections. When you want to enable all HTTP/2 variants, you simply write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8edc7fbd158e935a7b36aa37fb91f77ec67ef83" translate="yes" xml:space="preserve">
          <source>This allows only HTTP/1 on connections, except SSL connections to &lt;code&gt;test.example.org&lt;/code&gt; which offer HTTP/2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f89faa4a167e6cc5fa099d0ebef3bad2cb4d81" translate="yes" xml:space="preserve">
          <source>This allows the content of &lt;var&gt;string&lt;/var&gt; to be shown as HTML interpreted, &lt;strong&gt;Additional Information&lt;/strong&gt; for the module &lt;var&gt;module-name&lt;/var&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7e0f36af0ec9094581ac1e91c9a1c0d3babcae" translate="yes" xml:space="preserve">
          <source>This allows users present in both LDAP and &lt;code&gt;&lt;a href=&quot;mod_authn_file#authuserfile&quot;&gt;AuthUserFile&lt;/a&gt;&lt;/code&gt; to authenticate when the LDAP server is available but the user's account is locked or password is otherwise unusable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b605e29c744ad172b03954784a77cb3521baf3b2" translate="yes" xml:space="preserve">
          <source>This appears to be responsive enough that it's almost unnecessary to twiddle the &lt;code&gt;&lt;a href=&quot;../mod/prefork#minspareservers&quot;&gt;MinSpareServers&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../mod/prefork#maxspareservers&quot;&gt;MaxSpareServers&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/mpm_common#startservers&quot;&gt;StartServers&lt;/a&gt;&lt;/code&gt; knobs. When more than 4 children are spawned per second, a message will be emitted to the &lt;code&gt;&lt;a href=&quot;../mod/core#errorlog&quot;&gt;ErrorLog&lt;/a&gt;&lt;/code&gt;. If you see a lot of these errors, then consider tuning these settings. Use the &lt;code&gt;&lt;a href=&quot;../mod/mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; output as a guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae8916a7833d97a9672314d8c05ed3a367362ca" translate="yes" xml:space="preserve">
          <source>This applies to processes forked from Apache httpd children servicing requests, not the Apache httpd children themselves. This includes CGI scripts and SSI exec commands, but not any processes forked from the Apache httpd parent, such as piped logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f3ca6b971a08b73633b546a11f9502b5d135a9" translate="yes" xml:space="preserve">
          <source>This argument is followed by a &lt;var&gt;header&lt;/var&gt; name, which can include the final colon, but it is not required. Case is ignored for &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;unset&lt;/code&gt; and &lt;code&gt;edit&lt;/code&gt;. The &lt;var&gt;header&lt;/var&gt; name for &lt;code&gt;echo&lt;/code&gt; is case sensitive and may be a &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expression&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4fd28a65c17df74977d1bbbb029ca3f6d53b43" translate="yes" xml:space="preserve">
          <source>This argument is followed by a header name, which can include the final colon, but it is not required. Case is ignored. For &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; a &lt;var&gt;value&lt;/var&gt; is given as the third argument. If a &lt;var&gt;value&lt;/var&gt; contains spaces, it should be surrounded by double quotes. For &lt;code&gt;unset&lt;/code&gt;, no &lt;var&gt;value&lt;/var&gt; should be given. &lt;var&gt;value&lt;/var&gt; may be a character string, a string containing format specifiers or a combination of both. The supported format specifiers are the same as for the &lt;code&gt;&lt;a href=&quot;#header&quot;&gt;Header&lt;/a&gt;&lt;/code&gt;, please have a look there for details. For &lt;code&gt;edit&lt;/code&gt; both a &lt;var&gt;value&lt;/var&gt; and a &lt;var&gt;replacement&lt;/var&gt; are required, and are a &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expression&lt;/a&gt; and a replacement string respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b11d9ca8be2c3c99637aab6faf7570753309c25" translate="yes" xml:space="preserve">
          <source>This article covers the &quot;standard&quot; way of protecting parts of your web site that most of you are going to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6662f5aebf8a5d6ed1f98a167219aebfefd108" translate="yes" xml:space="preserve">
          <source>This article deals with Server Side Includes, usually called simply SSI. In this article, I'll talk about configuring your server to permit SSI, and introduce some basic SSI techniques for adding dynamic content to your existing HTML pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903fb209b3fcd0dff632fb71e5568b914df6c85c" translate="yes" xml:space="preserve">
          <source>This at least avoids the extra checks for the &lt;code&gt;&lt;a href=&quot;../mod/core#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt; path. Note that you'll need to add similar sections if you have any &lt;code&gt;&lt;a href=&quot;../mod/mod_alias#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; paths outside of your document root. For highest performance, and no symlink protection, set &lt;code&gt;FollowSymLinks&lt;/code&gt; everywhere, and never set &lt;code&gt;SymLinksIfOwnerMatch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59da7dc7e8e10f7a5cf64a50f5696068ddcf46bb" translate="yes" xml:space="preserve">
          <source>This can be used to send any kind of data from the server, including redirects and other special HTTP responses, without requiring a cgi-script or an nph script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4a7908ad96966e0ee9c4878d2028ee59a7c4bb" translate="yes" xml:space="preserve">
          <source>This cannot be a fully qualified URL, you are not allowed to pass the protocol or a server name (&lt;em&gt;e.g.&lt;/em&gt; simply &lt;code&gt;/location&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd10625c23053e6d6d86f5639fa36443db17cb1b" translate="yes" xml:space="preserve">
          <source>This causes any &lt;code&gt;Vary&lt;/code&gt; fields to be removed from the response header before it is sent back to the client. Some clients don't interpret this field correctly; setting this variable can work around this problem. Setting this variable also implies &lt;strong&gt;force-response-1.0&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14831a40eda26bb6ecb54630f03c6b8448361a53" translate="yes" xml:space="preserve">
          <source>This causes cacheable resources to be stored separately for each session, which is often not desired. &lt;code&gt;CacheIgnoreURLSessionIdentifiers&lt;/code&gt; lets define a list of identifiers that are removed from the key that is used to identify an entity in the cache, such that cacheable resources are not stored separately for each session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9a1b9f7b3b604491eb79a0ea13310ae1a7e26f" translate="yes" xml:space="preserve">
          <source>This command controls various aspects of the parsing. The valid attributes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5510036d136f9a91015a96222048b2bd4f0284" translate="yes" xml:space="preserve">
          <source>This command doesn't output anything. Its only use is to add comments within a file. These comments are not printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edabd70bb88980faa5ddefad84d1ecca3f6c0061" translate="yes" xml:space="preserve">
          <source>This command inserts the text of another document or file into the parsed file. Any included file is subject to the usual access control. If the directory containing the parsed file has &lt;a href=&quot;core#options&quot;&gt;Options&lt;/a&gt;&lt;code&gt;IncludesNOEXEC&lt;/code&gt; set, then only documents with a text &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#mime-type&quot;&gt;MIME-type&lt;/a&gt; (&lt;code&gt;text/plain&lt;/code&gt;, &lt;code&gt;text/html&lt;/code&gt; etc.) will be included. Otherwise CGI scripts are invoked as normal using the complete URL given in the command, including any query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b66dc1c7f7f5365f4138f0ea699a6801d820b4" translate="yes" xml:space="preserve">
          <source>This command prints one of the &lt;a href=&quot;#includevars&quot;&gt;include variables&lt;/a&gt; defined below. If the variable is unset, the result is determined by the &lt;code&gt;&lt;a href=&quot;#ssiundefinedecho&quot;&gt;SSIUndefinedEcho&lt;/a&gt;&lt;/code&gt; directive. Any dates printed are subject to the currently configured &lt;code&gt;timefmt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572effa938cdf1e5b1968f1264363c53afb331fb" translate="yes" xml:space="preserve">
          <source>This command prints the last modification date of the specified file, subject to the &lt;code&gt;timefmt&lt;/code&gt; format specification. The attributes are the same as for the &lt;code&gt;&lt;a href=&quot;#element.fsize&quot;&gt;fsize&lt;/a&gt;&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e8d54dc7a85f30451e9fd80b485f9e18da0ab9" translate="yes" xml:space="preserve">
          <source>This command prints the size of the specified file, subject to the &lt;code&gt;sizefmt&lt;/code&gt; format specification. Attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c5d02164dc60a7f7d9da2a75445b99b071325b" translate="yes" xml:space="preserve">
          <source>This configures an actual filter chain, from declared filters. &lt;code&gt;FilterChain&lt;/code&gt; takes any number of arguments, each optionally preceded with a single-character control that determines what to do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb87682fe5c872d8902e21ecff2855cb66e3521" translate="yes" xml:space="preserve">
          <source>This controls whether or not Basic auth is required before passing the request to the authorizer. If required, the authorizer won't be invoked without a user id and password; 401 will be returned for a request without that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d422749205de8b20ca4dc50753ef98f6c0700988" translate="yes" xml:space="preserve">
          <source>This controls whether or not other modules are allowed to run when this module has a FastCGI authorizer configured and it fails the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958753ca9d639caafdf17124e53ca720c1c3ab9f" translate="yes" xml:space="preserve">
          <source>This defines the &lt;em&gt;nickname&lt;/em&gt;&lt;code&gt;common&lt;/code&gt; and associates it with a particular log format string. The format string consists of percent directives, each of which tell the server to log a particular piece of information. Literal characters may also be placed in the format string and will be copied directly into the log output. The quote character (&lt;code&gt;&quot;&lt;/code&gt;) must be escaped by placing a backslash before it to prevent it from being interpreted as the end of the format string. The format string may also contain the special control characters &quot;&lt;code&gt;\n&lt;/code&gt;&quot; for new-line and &quot;&lt;code&gt;\t&lt;/code&gt;&quot; for tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352c32a414ee1c62ccdf6368d68d9413e58c36b3" translate="yes" xml:space="preserve">
          <source>This difference between &lt;code&gt;onsuccess&lt;/code&gt; and &lt;code&gt;always&lt;/code&gt; is a feature that resulted as a consequence of how httpd internally stores headers for a HTTP response, since it does not offer any &quot;normalized&quot; single list of headers. The main problem that can arise if the following concept is not kept in mind while writing the configuration is that some HTTP responses might end up with the same header duplicated (confusing users or sometimes even HTTP clients). For example, suppose that you have a simple PHP proxy setup with &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt; and your backend PHP scripts adds the &lt;code&gt;X-Foo: bar&lt;/code&gt; header to each HTTP response. As described above, &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt; uses the &lt;code&gt;always&lt;/code&gt; table to store headers, so a configuration like the following ends up in the wrong result, namely having the header duplicated with both values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d2e36185d85af4cb3c648b062cf7eae23de9d3" translate="yes" xml:space="preserve">
          <source>This directive &lt;em&gt;should&lt;/em&gt; always be specified and contain at least the (set of) root URI(s) for this space. Omitting to do so will cause the client to send the Authorization header for &lt;em&gt;every request&lt;/em&gt; sent to this server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918a839ecea6ce3b675ce8bd7c2bf40dead6ab28" translate="yes" xml:space="preserve">
          <source>This directive activates a particular output &lt;a href=&quot;../filter&quot;&gt;filter&lt;/a&gt; for a request depending on the response &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#media-type&quot;&gt;media-type&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f70ebe99d8010dfac061ed4a778e4ad0093d6de" translate="yes" xml:space="preserve">
          <source>This directive adds an action, which will activate &lt;var&gt;cgi-script&lt;/var&gt; when &lt;var&gt;action-type&lt;/var&gt; is triggered by the request. The &lt;var&gt;cgi-script&lt;/var&gt; is the URL-path to a resource that has been designated as a CGI script using &lt;code&gt;&lt;a href=&quot;mod_alias#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt;. The &lt;var&gt;action-type&lt;/var&gt; can be either a &lt;a href=&quot;../handler&quot;&gt;handler&lt;/a&gt; or a &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#mime-type&quot;&gt;MIME content type&lt;/a&gt;. It sends the URL and file path of the requested document using the standard CGI &lt;code&gt;PATH_INFO&lt;/code&gt; and &lt;code&gt;PATH_TRANSLATED&lt;/code&gt; environment variables. The handler used for the particular request is passed using the &lt;code&gt;REDIRECT_HANDLER&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8ffeb12ecc05b86037b5b869fa7028942a2563" translate="yes" xml:space="preserve">
          <source>This directive adds an action, which will activate &lt;var&gt;cgi-script&lt;/var&gt; when a file is requested using the method of &lt;var&gt;method&lt;/var&gt;. The &lt;var&gt;cgi-script&lt;/var&gt; is the URL-path to a resource that has been designated as a CGI script using &lt;code&gt;&lt;a href=&quot;mod_alias#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt;. The URL and file path of the requested document is sent using the standard CGI &lt;code&gt;PATH_INFO&lt;/code&gt; and &lt;code&gt;PATH_TRANSLATED&lt;/code&gt; environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa69cfa2d9dbb0c1eca859dd7dc7ca2bf8f47c6b" translate="yes" xml:space="preserve">
          <source>This directive adds some default behavior to ANY regular expression used afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254cfde73df9b58ed5d95ace4779c3de31ed698e" translate="yes" xml:space="preserve">
          <source>This directive allows access to the server to be restricted based on hostname, IP address, or environment variables. The arguments for the &lt;code&gt;Deny&lt;/code&gt; directive are identical to the arguments for the &lt;code&gt;&lt;a href=&quot;#allow&quot;&gt;Allow&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef11e613c2a219f6bd8c863e4fa2ad59f40ccd14" translate="yes" xml:space="preserve">
          <source>This directive allows inclusion of other configuration files from within the server configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8315a5605d67cccfd3fa5dd45e8f20854555c589" translate="yes" xml:space="preserve">
          <source>This directive allows inclusion of other configuration files from within the server configuration files. It works identically to the &lt;code&gt;&lt;a href=&quot;#include&quot;&gt;Include&lt;/a&gt;&lt;/code&gt; directive, but it will be silently ignored (instead of causing an error) if wildcards are used and they do not match any file or directory or if a file path does not exist on the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d81157146142ccd82fde6fc763495c284fedbb" translate="yes" xml:space="preserve">
          <source>This directive allows you to define a Managed Domain (MD) with specific settings, different from the global MD* ones. For example, you can have such an MD use another CA then Let's Encrypt, have its unique renewal duration etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2e60fceb88f0d9ad62e464ba9c19404249a807" translate="yes" xml:space="preserve">
          <source>This directive allows you to override the prefix used for environment variables set during LDAP authorization. If &lt;em&gt;AUTHENTICATE_&lt;/em&gt; is specified, consumers of these environment variables see the same information whether LDAP has performed authentication, authorization, or both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca58c71ad654da0cf5df25ea531913315cfb760" translate="yes" xml:space="preserve">
          <source>This directive applies to requests for directories that may or may not end in a trailing slash, so expressions that are anchored to the end of line ($) must be written with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96743c486d20dce3d8518e3c1555f6f6335b799" translate="yes" xml:space="preserve">
          <source>This directive can be used instead of the compile-time setting &lt;code&gt;SECURITY_HOLE_PASS_AUTHORIZATION&lt;/code&gt; which has been available in previous versions of Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4830f201ce416d4acd5b19fc70c007b380ad23" translate="yes" xml:space="preserve">
          <source>This directive can be used to fine-tune the per-process connection limit. A &lt;strong&gt;process&lt;/strong&gt; will only accept new connections if the current number of connections (not counting connections in the &quot;closing&quot; state) is lower than:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e68ec10252d2f75c676bbb0eb270ea8869cf0e" translate="yes" xml:space="preserve">
          <source>This directive can be used to toggle the use of &lt;code&gt;&lt;a href=&quot;#ifdefine&quot;&gt;&amp;lt;IfDefine&amp;gt;&lt;/a&gt;&lt;/code&gt; sections without needing to alter &lt;code&gt;-D&lt;/code&gt; arguments in any startup scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd33c0a4c7d7466f0b615012a7868a347e522fb" translate="yes" xml:space="preserve">
          <source>This directive can only be used if this module authenticates the user, and has no effect when this module is used exclusively for authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddacc80562ea4d092157f950fd937205345538b" translate="yes" xml:space="preserve">
          <source>This directive can replace, merge or remove HTTP response headers. The header is modified just after the content handler and output filters are run, allowing outgoing headers to be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca251367e9c8916db85770d55d093c6ffaf5b26" translate="yes" xml:space="preserve">
          <source>This directive can replace, merge, change or remove HTTP request headers. The header is modified just before the content handler is run, allowing incoming headers to be modified. The action it performs is determined by the first argument. This can be one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b116158bf07109dd80ddf11accce97fe04c5a1f" translate="yes" xml:space="preserve">
          <source>This directive causes a user defined message to be logged to the error log. The message can use variables and functions from the &lt;a href=&quot;../expr&quot;&gt;ap_expr syntax&lt;/a&gt;. References to HTTP headers will not cause header names to be added to the Vary header. The messages are logged at loglevel info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98de195903e829209c550213f465fd16c5b6310" translate="yes" xml:space="preserve">
          <source>This directive changes the format in which date strings are displayed when echoing &lt;code&gt;DATE&lt;/code&gt; environment variables. The &lt;var&gt;formatstring&lt;/var&gt; is as in &lt;code&gt;strftime(3)&lt;/code&gt; from the C standard library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdd3cee5ac8d6afd1447df0e2ef37a41ea5a379" translate="yes" xml:space="preserve">
          <source>This directive changes the rules applied to the HTTP Request Line (&lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.1.1&quot;&gt;RFC 7230 &amp;sect;3.1.1&lt;/a&gt;) and the HTTP Request Header Fields (&lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.2&quot;&gt;RFC 7230 &amp;sect;3.2&lt;/a&gt;), which are now applied by default or using the &lt;code&gt;Strict&lt;/code&gt; option. Due to legacy modules, applications or custom user-agents which must be deprecated the &lt;code&gt;Unsafe&lt;/code&gt; option has been added to revert to the legacy behaviors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f896d21b372a33df39e2ace8ff32e290f7f74e7c" translate="yes" xml:space="preserve">
          <source>This directive changes the string that &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; displays when a variable is not set and &quot;echoed&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bea5b5b537387783649eeb4ca9f7d4fdc906ef0" translate="yes" xml:space="preserve">
          <source>This directive changes the string that &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; looks for to mark an include element to process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58c7111a9dc76733ef9e966c4593710e69e9cd3" translate="yes" xml:space="preserve">
          <source>This directive changes the string that &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; looks for to mark the end of an include element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8217dd1874827420eea427ece7d30625bdf540" translate="yes" xml:space="preserve">
          <source>This directive configures the LDAP_OPT_NETWORK_TIMEOUT (or LDAP_OPT_CONNECT_TIMEOUT) option in the underlying LDAP client library, when available. This value typically controls how long the LDAP client library will wait for the TCP connection to the LDAP server to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9821f03314cfdac95405960728ea23af5c35540a" translate="yes" xml:space="preserve">
          <source>This directive configures the timeout for bind and search operations, as well as the LDAP_OPT_TIMEOUT option in the underlying LDAP client library, when available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c6ab3b741d37edfb8d248abfeebf308e4aa7de" translate="yes" xml:space="preserve">
          <source>This directive configures whether this module tracks the delay between the request being read and the first byte of the response headers being written. The resulting value may be logged with the &lt;code&gt;%^FB&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b228b21256a7d279ed630b4b8d6614d74d66316" translate="yes" xml:space="preserve">
          <source>This directive controls how some CGI variables are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505e667a6e03d07a556a3759ac93893f8ff87865" translate="yes" xml:space="preserve">
          <source>This directive controls whether &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; may use the sendfile support from the kernel to transmit file contents to the client. By default, when the handling of a request requires no access to the data within a file -- for example, when delivering a static file -- Apache httpd uses sendfile to deliver the file contents without ever reading the file if the OS supports it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd31f7b6ecb66463f82d6f044ffd6155dbdc11ec" translate="yes" xml:space="preserve">
          <source>This directive controls whether &lt;code&gt;Server&lt;/code&gt; response header field which is sent back to clients includes a description of the generic OS-type of the server as well as information about compiled-in modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3901793b393a7a8aa5d280c2be639cc251b2c00" translate="yes" xml:space="preserve">
          <source>This directive controls whether HTTP trailers are copied into the internal representation of HTTP headers. This merging occurs when the request body has been completely consumed, long after most header processing would have a chance to examine or modify request headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad9332674535a5aa949334a4b12841ef37bd6ec" translate="yes" xml:space="preserve">
          <source>This directive controls whether requests that contain trailing pathname information that follows an actual filename (or non-existent file in an existing directory) will be accepted or rejected. The trailing pathname information can be made available to scripts in the &lt;code&gt;PATH_INFO&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a29d15377f5f28d33f2af2b23fa60bbfedf9ff" translate="yes" xml:space="preserve">
          <source>This directive controls whether the &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; may use memory-mapping if it needs to read the contents of a file during delivery. By default, when the handling of a request requires access to the data within a file -- for example, when delivering a server-parsed file using &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; -- Apache httpd memory-maps the file if the OS supports it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a2a62c5f4735f3cf9e96deb7ebc4ae2eaf6edc" translate="yes" xml:space="preserve">
          <source>This directive controls whether the server will ensure that the REDIRECT_URL environment variable is fully qualified. By default, the variable contains the verbatim URL requested by the client, such as &quot;/index.html&quot;. With &lt;code&gt;&lt;a href=&quot;#qualifyredirecturl%20on&quot;&gt;QualifyRedirectURL ON&lt;/a&gt;&lt;/code&gt;, the same request would result in a value such as &quot;http://www.example.com/index.html&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75328dd051dd8fda5ae2695ab43bfbe53b77a71f" translate="yes" xml:space="preserve">
          <source>This directive currently has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9114ec559e0a53a7dc90a66b879332cf5f801d" translate="yes" xml:space="preserve">
          <source>This directive currently only works with the &lt;code&gt;&lt;a href=&quot;prefork&quot;&gt;prefork&lt;/a&gt;&lt;/code&gt; MPM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480ac741c945d3d75332b180d43b759cc2cf10fb" translate="yes" xml:space="preserve">
          <source>This directive declares an output filter together with a header or environment variable that will determine runtime configuration. The first argument is a &lt;var&gt;filter-name&lt;/var&gt; for use in &lt;code&gt;&lt;a href=&quot;#filterprovider&quot;&gt;FilterProvider&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#filterchain&quot;&gt;FilterChain&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#filterprotocol&quot;&gt;FilterProtocol&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe326ce84965a3c93a17f8622674d6852c056211" translate="yes" xml:space="preserve">
          <source>This directive defines the priority handling of pushed responses based on the content-type of the response. This is usually defined per server config, but may also appear in a virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65596a0174b7b69b14f5ca46d9754248c7e204c6" translate="yes" xml:space="preserve">
          <source>This directive defines the value of the &lt;code&gt;Expires&lt;/code&gt; header and the &lt;code&gt;max-age&lt;/code&gt; directive of the &lt;code&gt;Cache-Control&lt;/code&gt; header generated for documents of the specified type (&lt;em&gt;e.g.&lt;/em&gt;, &lt;code&gt;text/html&lt;/code&gt;). The second argument sets the number of seconds that will be added to a base time to construct the expiration date. The &lt;code&gt;Cache-Control: max-age&lt;/code&gt; is calculated by subtracting the request time from the expiration date and expressing the result in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798539402464ff2ecafa9841b54399225232335d" translate="yes" xml:space="preserve">
          <source>This directive does not currently work in configuration sections that have regular expression arguments, such as &lt;code&gt;&lt;a href=&quot;core#directorymatch&quot;&gt;&amp;lt;DirectoryMatch&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf51425d758a4c214e050ef01684702fb9ccd4a" translate="yes" xml:space="preserve">
          <source>This directive enables &lt;a href=&quot;http://www.ietf.org/rfc/rfc1413.txt&quot;&gt;RFC 1413&lt;/a&gt;-compliant logging of the remote user name for each connection, where the client machine runs identd or something similar. This information is logged in the access log using the &lt;code&gt;%...l&lt;/code&gt;&lt;a href=&quot;mod_log_config#formats&quot;&gt;format string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26236c3fb7e2d1c4f9db80c0df91059cde4fa4c" translate="yes" xml:space="preserve">
          <source>This directive enables DNS lookups so that host names can be logged (and passed to CGIs/SSIs in &lt;code&gt;REMOTE_HOST&lt;/code&gt;). The value &lt;code&gt;Double&lt;/code&gt; refers to doing double-reverse DNS lookup. That is, after a reverse lookup is performed, a forward lookup is then performed on that result. At least one of the IP addresses in the forward lookup must match the original address. (In &quot;tcpwrappers&quot; terminology this is called &lt;code&gt;PARANOID&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7effdffe1b39b0031039f3ecf5e641ce8b2a635" translate="yes" xml:space="preserve">
          <source>This directive enables operating system specific optimizations for a listening socket by the &lt;code&gt;Protocol&lt;/code&gt; type. The basic premise is for the kernel to not send a socket to the server process until either data is received or an entire HTTP Request is buffered. Only &lt;a href=&quot;http://www.freebsd.org/cgi/man.cgi?query=accept_filter&amp;amp;sektion=9&quot;&gt; FreeBSD's Accept Filters&lt;/a&gt;, Linux's more primitive &lt;code&gt;TCP_DEFER_ACCEPT&lt;/code&gt;, and Windows' optimized AcceptEx() are currently supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2788b5047792f206e2053fca8a0cd3e0025ecf" translate="yes" xml:space="preserve">
          <source>This directive enables or disables the generation of the &lt;code&gt;Expires&lt;/code&gt; and &lt;code&gt;Cache-Control&lt;/code&gt; headers for the document realm in question. (That is, if found in an &lt;code&gt;.htaccess&lt;/code&gt; file, for instance, it applies only to documents generated from that directory.) If set to &lt;code&gt;Off&lt;/code&gt;, the headers will not be generated for any document in the realm (unless overridden at a lower level, such as an &lt;code&gt;.htaccess&lt;/code&gt; file overriding a server config file). If set to &lt;code&gt;On&lt;/code&gt;, the headers will be added to served documents according to the criteria defined by the &lt;code&gt;&lt;a href=&quot;#expiresbytype&quot;&gt;ExpiresByType&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#expiresdefault&quot;&gt;ExpiresDefault&lt;/a&gt;&lt;/code&gt; directives (&lt;em&gt;q.v.&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252b73df81d6223ea0d78bbfbd26755a7de82191" translate="yes" xml:space="preserve">
          <source>This directive enables the generation of &lt;code&gt;Content-MD5&lt;/code&gt; headers as defined in RFC1864 respectively RFC2616.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0436ca8b4a79a34fa47f6c5ced317dd594eb8278" translate="yes" xml:space="preserve">
          <source>This directive generates debug information from &lt;code&gt;&lt;a href=&quot;mod_filter&quot;&gt;mod_filter&lt;/a&gt;&lt;/code&gt;. It is designed to help test and debug providers (filter modules), although it may also help with &lt;code&gt;&lt;a href=&quot;mod_filter&quot;&gt;mod_filter&lt;/a&gt;&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a608278f658d5aeae37a36caa6352304a46d0bed" translate="yes" xml:space="preserve">
          <source>This directive gives the server administrator greater control over abnormal client request behavior, which may be useful for avoiding some forms of denial-of-service attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3606632439f138331052d26fa4eb9db773c0009d" translate="yes" xml:space="preserve">
          <source>This directive gives the server administrator greater control over abnormal client request behavior, which may be useful for avoiding some forms of denial-of-service attacks. The value should be increased if normal clients see an error response from the server that indicates too many fields were sent in the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c171471692784ee8050c8be9766287faf90eee2" translate="yes" xml:space="preserve">
          <source>This directive has been disabled. For backwards compatibility of configuration files, it may be specified with the value &lt;code&gt;none&lt;/code&gt;, meaning no default media type. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2382b254d3cbd949644b072febb4bba88dac3e" translate="yes" xml:space="preserve">
          <source>This directive has exactly the same arguments and effect as the &lt;code&gt;&lt;a href=&quot;#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; directive, with the exception that it does not allow the log format to be specified explicitly or for conditional logging of requests. Instead, the log format is determined by the most recently specified &lt;code&gt;&lt;a href=&quot;#logformat&quot;&gt;LogFormat&lt;/a&gt;&lt;/code&gt; directive which does not define a nickname. Common Log Format is used if no other format has been specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a4fd6eeb61627e2464a25b1daf564a5dc6f456" translate="yes" xml:space="preserve">
          <source>This directive has no affect on authorization, even for modules that provide both authentication and authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698a9dae35b69d753397b02033a009b0d9bb2415" translate="yes" xml:space="preserve">
          <source>This directive has no effect other than to emit warnings if the value is not &lt;code&gt;none&lt;/code&gt;. In prior versions, DefaultType would specify a default media type to assign to response content for which no other media type configuration could be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255a8ca460ab6eecf098bcaa8a32f81f49092850" translate="yes" xml:space="preserve">
          <source>This directive has the same effect as the &lt;code&gt;&amp;lt;!--#config errmsg=message --&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90d875d01ea3d277b8d6fa5b5a95415395e7888" translate="yes" xml:space="preserve">
          <source>This directive has the same effect as the &lt;code&gt;&amp;lt;!--#config timefmt=formatstring --&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55049aec6361ab14f95fe1083d7f13fe0296c140" translate="yes" xml:space="preserve">
          <source>This directive influences how file content is handled in responses. When &lt;code&gt;off&lt;/code&gt;, which is the default, file handles are passed from the requestion processing down to the main connection, using the usual Apache setaside handling for managing the lifetime of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c058ce7e59d28babe6a97943575cbe1e1ab62a3f" translate="yes" xml:space="preserve">
          <source>This directive is equivalent to &lt;code&gt;&lt;a href=&quot;#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, but makes use of &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expressions&lt;/a&gt;, instead of simple prefix matching. The supplied regular expression is matched against the URL-path, and if it matches, the server will substitute any parenthesized matches into the given string and use it as a filename. For example, to activate the &lt;code&gt;/icons&lt;/code&gt; directory, one might use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a045c4c7e76910c4cacaa4ec867dd6b98732bc4b" translate="yes" xml:space="preserve">
          <source>This directive is equivalent to &lt;code&gt;&lt;a href=&quot;#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt;, but makes use of &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expressions&lt;/a&gt;, instead of simple prefix matching. The supplied regular expression is matched against the URL-path, and if it matches, the server will substitute any parenthesized matches into the given string and use it as a filename. For example, to redirect all GIF files to like-named JPEG files on another server, one might use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e98dc3af49f8537652289412267fd6daeaecf17" translate="yes" xml:space="preserve">
          <source>This directive is equivalent to &lt;code&gt;&lt;a href=&quot;#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt;, but makes use of &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expressions&lt;/a&gt;, instead of simple prefix matching. The supplied regular expression is matched against the URL-path, and if it matches, the server will substitute any parenthesized matches into the given string and use it as a filename. For example, to activate the standard &lt;code&gt;/cgi-bin&lt;/code&gt;, one might use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fa8888963db181a15a1d7581ead376eff57d26" translate="yes" xml:space="preserve">
          <source>This directive is not normally necessary: it is implied if authentication cacheing is enabled anywhere in &lt;var&gt;httpd.conf&lt;/var&gt;. However, if it is not enabled anywhere in &lt;var&gt;httpd.conf&lt;/var&gt; it will by default not be initialised, and is therefore not available in a &lt;var&gt;.htaccess&lt;/var&gt; context. This directive ensures it is initialised so it can be used in &lt;var&gt;.htaccess&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2626f2241b0e2f5ad41ffa73d7b01341689c8c2f" translate="yes" xml:space="preserve">
          <source>This directive is not valid in &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;core#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt;, or htaccess context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59739c42722ef0585c2e2258fd114b0ffa4c4024" translate="yes" xml:space="preserve">
          <source>This directive is recommended when you have a virtual filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45465123d74731666d3884b10540b0f08be8efa5" translate="yes" xml:space="preserve">
          <source>This directive is used to control how Apache httpd finds the interpreter used to run CGI scripts. For example, setting &lt;code&gt;CGIMapExtension sys:\foo.nlm .foo&lt;/code&gt; will cause all CGI script files with a &lt;code&gt;.foo&lt;/code&gt; extension to be passed to the FOO interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887c4150084ed3f1bf6a3ea11da666679383cc13" translate="yes" xml:space="preserve">
          <source>This directive is used to control how Apache httpd finds the interpreter used to run CGI scripts. The default setting is &lt;code&gt;Script&lt;/code&gt;. This causes Apache httpd to use the interpreter pointed to by the shebang line (first line, starting with &lt;code&gt;#!&lt;/code&gt;) in the script. On Win32 systems this line usually looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9a77ba2f3ad1979cdef27c3bcfd97341c20210" translate="yes" xml:space="preserve">
          <source>This directive is used to define a FastCGI application as a provider for a particular phase of authentication or authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fbd07620651b1e59ca71fa5f5da61f6df3c850" translate="yes" xml:space="preserve">
          <source>This directive is used to enable a FastCGI authorizer to handle a specific processing phase of authentication or authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6071ebdad5ed3aebd916f6d7090456ff3cf5cb25" translate="yes" xml:space="preserve">
          <source>This directive limits the length of time to wait for more output from the CGI program. If the time is exceeded, the request and CGI are terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d24cff335e82d5c5b474bc4a87fa90b520e4cf" translate="yes" xml:space="preserve">
          <source>This directive makes the client know that the Redirect is only temporary (status 302). Exactly equivalent to &lt;code&gt;Redirect temp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f3332d6f037257a4b335a163e1b013e068e4d6" translate="yes" xml:space="preserve">
          <source>This directive makes the client know that the Redirect is permanent (status 301). Exactly equivalent to &lt;code&gt;Redirect permanent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b64f70b7984700055791adeb7d622bf9890fd56" translate="yes" xml:space="preserve">
          <source>This directive matches a uri pattern to invoke a specific handler function in a specific file. It uses PCRE regular expressions to match the uri, and supports interpolating match groups into both the file path and the function name. Be careful writing your regular expressions to avoid security issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9612480c091e4b48b3e1c034c3696696877e41c9" translate="yes" xml:space="preserve">
          <source>This directive may be used to register additional HTTP methods. This is necessary if non-standard methods need to be used with directives that accept method names as parameters, or to allow particular non-standard methods to be used via proxy or CGI script when the server has been configured to only pass recognized methods to modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6135459444740161767e926b160bea04bf38beba" translate="yes" xml:space="preserve">
          <source>This directive only applies to requests which come from HTTP/1.0 browsers. HTTP/1.1 provides much better control over the caching of negotiated documents, and this directive has no effect in responses to HTTP/1.1 requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b257136bd4ffb553bab025481807bfac96483f8" translate="yes" xml:space="preserve">
          <source>This directive only configures mutexes which have been registered with the core server using the &lt;code&gt;ap_mutex_register()&lt;/code&gt; API. All modules bundled with httpd support the &lt;code&gt;Mutex&lt;/code&gt; directive, but third-party modules may not. Consult the documentation of the third-party module, which must indicate the mutex name(s) which can be configured if this directive is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b30e9f07def5c2b0636fa1c38d6d8bbb1272636" translate="yes" xml:space="preserve">
          <source>This directive only has effect on the comparisons performed during nested group processing when &lt;code&gt;&lt;a href=&quot;#authldapcompareasuser&quot;&gt; AuthLDAPCompareAsUser&lt;/a&gt;&lt;/code&gt; is also enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cfabe4448ace5628c1a78012fad27a7d290a8e" translate="yes" xml:space="preserve">
          <source>This directive only has effect on the comparisons performed during nested group processing when &lt;code&gt;&lt;a href=&quot;#authldapsearchasuser&quot;&gt; AuthLDAPSearchAsUser&lt;/a&gt;&lt;/code&gt; is also enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83aae553e0c1720f1a831910bd99820d2afd379" translate="yes" xml:space="preserve">
          <source>This directive only takes effect when the data is being saved to the cache, as opposed to data being served from the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e595f1fe58f2ff226a533d8415b5cfe9fba9f806" translate="yes" xml:space="preserve">
          <source>This directive only takes effect when the data is being saved to the cache, as opposed to data being served from the cache. It is recommended that this option be used alongside the &lt;code&gt;&lt;a href=&quot;#cachereadsize&quot;&gt;CacheReadSize&lt;/a&gt;&lt;/code&gt; directive to ensure that the server does not buffer excessively should data arrive faster than expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de441b68d69728adc724264ff80ebe29fa3b8a8b" translate="yes" xml:space="preserve">
          <source>This directive only takes effect when the data is being saved to the cache, as opposed to data being served from the cache. It is recommended that this option be used alongside the &lt;code&gt;&lt;a href=&quot;#cachesocachereadsize&quot;&gt;CacheSocacheReadSize&lt;/a&gt;&lt;/code&gt; directive to ensure that the server does not buffer excessively should data arrive faster than expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1673f82365815c5a2e256e8d852f74c294af58" translate="yes" xml:space="preserve">
          <source>This directive overrides the behavior of &lt;code&gt;TRACE&lt;/code&gt; for both the core server and &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. The default &lt;code&gt;TraceEnable on&lt;/code&gt; permits &lt;code&gt;TRACE&lt;/code&gt; requests per RFC 2616, which disallows any request body to accompany the request. &lt;code&gt;TraceEnable off&lt;/code&gt; causes the core server and &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; to return a &lt;code&gt;405&lt;/code&gt; (Method not allowed) error to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18b61ff94e8864d206a172649c5c2daf74b945c" translate="yes" xml:space="preserve">
          <source>This directive primarily configures the content types generated for static files served out of the filesystem. For resources other than static files, where the generator of the response typically specifies a Content-Type, this directive has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbfb63bf8e1b9b5941c4058f2d0e157e6c7d889" translate="yes" xml:space="preserve">
          <source>This directive primarily overrides the content types generated for static files served out of the filesystem. For resources other than static files, where the generator of the response typically specifies a Content-Type, this directive has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511fcba594e05dce72d3a1413a2a73fa479f2b49" translate="yes" xml:space="preserve">
          <source>This directive provides a hook for the type_checker phase of the request processing. This phase is where requests are assigned a content type and a handler, and thus can be used to modify the type and handler based on input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6456e8dcaccfbdabbdab741be9a8b405992173" translate="yes" xml:space="preserve">
          <source>This directive pushes resources much earlier than adding &lt;code&gt;Link&lt;/code&gt; headers via &lt;code&gt;&lt;a href=&quot;mod_headers&quot;&gt;mod_headers&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;mod_http2&quot;&gt;mod_http2&lt;/a&gt;&lt;/code&gt; announces these resources in a &lt;code&gt;103 Early Hints&lt;/code&gt; interim response to the client. That means that clients not supporting PUSH will still get early preload hints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea1440a54d5254cd91a6b8bb0a4eeb5b2a3e8cb" translate="yes" xml:space="preserve">
          <source>This directive registers a &lt;em&gt;provider&lt;/em&gt; for the smart filter. The provider will be called if and only if the &lt;var&gt;expression&lt;/var&gt; declared evaluates to true when the harness is first called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d1501c4d5e419bd2651be2b9988fa65ff890fa" translate="yes" xml:space="preserve">
          <source>This directive selects the type of user authentication for a directory. The authentication types available are &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Basic&lt;/code&gt; (implemented by &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt;), &lt;code&gt;Digest&lt;/code&gt; (implemented by &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;), and &lt;code&gt;Form&lt;/code&gt; (implemented by &lt;code&gt;&lt;a href=&quot;mod_auth_form&quot;&gt;mod_auth_form&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a497e90839895bc2ea4a0a0742f2a1df94f3bcd" translate="yes" xml:space="preserve">
          <source>This directive sets the default algorithm for calculating the expiration time for all documents in the affected realm. It can be overridden on a type-by-type basis by the &lt;code&gt;&lt;a href=&quot;#expiresbytype&quot;&gt;ExpiresByType&lt;/a&gt;&lt;/code&gt; directive. See the description of that directive for details about the syntax of the argument, and the &lt;a href=&quot;#AltSyn&quot;&gt;alternate syntax&lt;/a&gt; description as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2687c85b8bce4865b53ebf2708b2eea5e0043443" translate="yes" xml:space="preserve">
          <source>This directive sets the directory from which &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; will serve files. Unless matched by a directive like &lt;code&gt;&lt;a href=&quot;mod_alias#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, the server appends the path from the requested URL to the document root to make the path to the document. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0909b64fe6eb653cd7f58add501e86453533afe7" translate="yes" xml:space="preserve">
          <source>This directive sets the filename prefix of the socket to use for communication with the CGI daemon, an extension corresponding to the process ID of the server will be appended. The socket will be opened using the permissions of the user who starts Apache (usually root). To maintain the security of communications with CGI scripts, it is important that no other user has permission to write in the directory where the socket is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122185f83c74b9184564ad86cbe3a8337bf93dca" translate="yes" xml:space="preserve">
          <source>This directive sets the maximum number of active streams per HTTP/2 session (e.g. connection) that the server allows. A stream is active if it is not &lt;code&gt;idle&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt; according to RFC 7540.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0086edd5fb675771bf6390eaea6c8d14fc281589" translate="yes" xml:space="preserve">
          <source>This directive sets the maximum number of outgoing data bytes buffered in memory for an active streams. This memory is not allocated per stream as such. Allocations are counted against this limit when they are about to be done. Stream processing freezes when the limit has been reached and will only continue when buffered data has been sent out to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edc54702e9ab7e54e0b28989a93d54de92ae1a4" translate="yes" xml:space="preserve">
          <source>This directive sets the maximum number of seconds a h2 worker may idle until it shuts itself down. This only happens while the number of h2 workers exceeds &lt;code&gt;&lt;a href=&quot;#h2minworkers&quot;&gt;H2MinWorkers&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04d9c39be23114492dac34985f5084dd6849952" translate="yes" xml:space="preserve">
          <source>This directive sets the maximum number of worker threads to spawn per child process for HTTP/2 processing. If this directive is not used, &lt;code&gt;&lt;a href=&quot;mod_http2&quot;&gt;mod_http2&lt;/a&gt;&lt;/code&gt; will chose a value suitable for the &lt;code&gt;mpm&lt;/code&gt; module loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef014399ebb37a9c2ebce51726938203f587a4a6" translate="yes" xml:space="preserve">
          <source>This directive sets the minimum number of worker threads to spawn per child process for HTTP/2 processing. If this directive is not used, &lt;code&gt;&lt;a href=&quot;mod_http2&quot;&gt;mod_http2&lt;/a&gt;&lt;/code&gt; will chose a value suitable for the &lt;code&gt;mpm&lt;/code&gt; module loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361e3312d799d2c81a7b55c1695ceb75360053ef" translate="yes" xml:space="preserve">
          <source>This directive sets the name of the authorization realm for a directory. This realm is given to the client so that the user knows which username and password to send. &lt;code&gt;AuthName&lt;/code&gt; takes a single argument; if the realm name contains spaces, it must be enclosed in quotation marks. It must be accompanied by &lt;code&gt;&lt;a href=&quot;#authtype&quot;&gt;AuthType&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directives, and directives such as &lt;code&gt;&lt;a href=&quot;mod_authn_file#authuserfile&quot;&gt;AuthUserFile&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_groupfile#authgroupfile&quot;&gt;AuthGroupFile&lt;/a&gt;&lt;/code&gt; to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5753e1bc94c6acf3aa97a81933f8c7f682c8e2" translate="yes" xml:space="preserve">
          <source>This directive sets the number of &lt;var&gt;bytes&lt;/var&gt; that will be allowed on the HTTP request-line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d4bcb2c93a3107a35b5468ab27bd26802bfc4c" translate="yes" xml:space="preserve">
          <source>This directive sets the number of bytes to be sent in small TLS records (~1300 bytes) until doing maximum sized writes (16k) on https: HTTP/2 connections. This can be used server wide or for specific &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53d791fdcd3bfe234aad0d6a7500f1b818a1062" translate="yes" xml:space="preserve">
          <source>This directive sets the number of seconds of idle time on a TLS connection before the TLS write size falls back to small (~1300 bytes) length. This can be used server wide or for specific &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6657592ad0815ec304bf9d08fcc264e3dd4fe947" translate="yes" xml:space="preserve">
          <source>This directive sets the size of the window that is used for flow control from client to server and limits the amount of data the server has to buffer. The client will stop sending on a stream once the limit has been reached until the server announces more available space (as it has processed some of the data).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b11fcb0d777094d97c3ee4e08ab87f748bab4d" translate="yes" xml:space="preserve">
          <source>This directive should be used with caution as a crash might cause loss of logging data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77366d08361cc7d76af18d230b99d29227c8ebca" translate="yes" xml:space="preserve">
          <source>This directive should only be used when your LDAP server doesn't accept anonymous comparisons and you cannot use a dedicated &lt;code&gt;&lt;a href=&quot;#authldapbinddn&quot;&gt;AuthLDAPBindDN&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c98b60d04c9d6672ac29b7e5d400e266cfc268b" translate="yes" xml:space="preserve">
          <source>This directive should only be used when your LDAP server doesn't accept anonymous searches and you cannot use a dedicated &lt;code&gt;&lt;a href=&quot;#authldapbinddn&quot;&gt;AuthLDAPBindDN&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d66b2d145b18982571559e1892268f4bf627075" translate="yes" xml:space="preserve">
          <source>This directive specifies a default value for the media type charset parameter (the name of a character encoding) to be added to a response if and only if the response's content-type is either &lt;code&gt;text/plain&lt;/code&gt; or &lt;code&gt;text/html&lt;/code&gt;. This should override any charset specified in the body of the response via a &lt;code&gt;META&lt;/code&gt; element, though the exact behavior is often dependent on the user's client configuration. A setting of &lt;code&gt;AddDefaultCharset Off&lt;/code&gt; disables this functionality. &lt;code&gt;AddDefaultCharset On&lt;/code&gt; enables a default charset of &lt;code&gt;iso-8859-1&lt;/code&gt;. Any other value is assumed to be the &lt;var&gt;charset&lt;/var&gt; to be used, which should be one of the &lt;a href=&quot;http://www.iana.org/assignments/character-sets&quot;&gt;IANA registered charset values&lt;/a&gt; for use in Internet media types (MIME types). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13621e08ffb1a433153c0b9a7f8f2bc78667705" translate="yes" xml:space="preserve">
          <source>This directive specifies a list of users that are allowed to gain access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5a952619b4044f298d7277a81e44da3d748fb1" translate="yes" xml:space="preserve">
          <source>This directive specifies a query to be run indicating the user has logged in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75511c033fb559c42f0f2e8afda9393535fd9f5c" translate="yes" xml:space="preserve">
          <source>This directive specifies a query to be run indicating the user has logged out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29707862c60cfa600d2ade0a96738236f62bacd4" translate="yes" xml:space="preserve">
          <source>This directive specifies a string to be used along with the supplied username (and realm in the case of Digest Authentication) in constructing a cache key. This serves to disambiguate identical usernames serving different authentication areas on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb7cb6e4f1e0064a00ba16afeede4170a487e95" translate="yes" xml:space="preserve">
          <source>This directive specifies an LDAP group whose members are allowed access. It takes the distinguished name of the LDAP group. Note: Do not surround the group name with quotes. For example, assume that the following entry existed in the LDAP directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2dfc1e46327f0768117fe96fe0bfc78c93b76f" translate="yes" xml:space="preserve">
          <source>This directive specifies an authentication provider or providers to cache for. Credentials found by a provider not listed in an AuthnCacheProvideFor directive will not be cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d8bf56429619117a859e57197d2a0d07daaac6" translate="yes" xml:space="preserve">
          <source>This directive specifies group membership that is required for the user to gain access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72a7d60680ea675127c67406041fbc4e3806287" translate="yes" xml:space="preserve">
          <source>This directive specifies if the server should honor the order in which the &lt;code&gt;Protocols&lt;/code&gt; directive lists protocols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3cf4327d50ebf07dd4048407e91bdd1f65be14" translate="yes" xml:space="preserve">
          <source>This directive specifies the format of the access log file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65cbc6b183fbdad9819b8fee7607a64c19857e07" translate="yes" xml:space="preserve">
          <source>This directive specifies the list of protocols supported for a server/virtual host. The list determines the allowed protocols a client may negotiate for this server/host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83a770e4bcd8fadb1f5f73f9e05102e31e1d8d2" translate="yes" xml:space="preserve">
          <source>This directive specifies the number of &lt;var&gt;bytes&lt;/var&gt; from 0 (meaning unlimited) to 2147483647 (2GB) that are allowed in a request body. See the note below for the limited applicability to proxy requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9eb190609ebdf4dfb1dbf7311a574e3c6cf8544" translate="yes" xml:space="preserve">
          <source>This directive specifies the number of &lt;var&gt;bytes&lt;/var&gt; that will be allowed in an HTTP request header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a47cb91ddff2bf41f569ce270794b2a1b7454ec" translate="yes" xml:space="preserve">
          <source>This directive specifies the protocol used for a specific listening socket. The protocol is used to determine which module should handle a request and to apply protocol specific optimizations with the &lt;code&gt;AcceptFilter&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e40901cee6d1c922e0c79094363b178f92fc4b5" translate="yes" xml:space="preserve">
          <source>This directive specifies the timeout duration of an ident request. The default value of 30 seconds is recommended by &lt;a href=&quot;http://www.ietf.org/rfc/rfc1413.txt&quot;&gt;RFC 1413&lt;/a&gt;, mainly because of possible network latency. However, you may want to adjust the timeout value according to your local network speed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896edef6307df2764b0ff756fd1e4ccc94a4616d" translate="yes" xml:space="preserve">
          <source>This directive specifies when &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will de-reference aliases during LDAP operations. The default is &lt;code&gt;always&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29e65afa5b417169403a4bade6ef882e2047483" translate="yes" xml:space="preserve">
          <source>This directive specifies which LDAP attributes are used to check for user members within groups. Multiple attributes can be used by specifying this directive multiple times. If not specified, then &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; uses the &lt;code&gt;member&lt;/code&gt; and &lt;code&gt;uniquemember&lt;/code&gt; attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e08c137af1c22c1bb7a5f37af49f54379c42dd" translate="yes" xml:space="preserve">
          <source>This directive tests whether an authenticated user is authorized according to a particular authorization provider and the specified restrictions. &lt;code&gt;&lt;a href=&quot;mod_authz_core&quot;&gt;mod_authz_core&lt;/a&gt;&lt;/code&gt; provides the following generic authorization providers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecef991fbae79e3147d535005d9cf8900a983ba" translate="yes" xml:space="preserve">
          <source>This directive toggles if HTTP/2 requests shall be serialized in HTTP/1.1 format for processing by &lt;code&gt;httpd&lt;/code&gt; core or if received binary data shall be passed into the &lt;code&gt;request_rec&lt;/code&gt;s directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7056c7eb48183e1ab8e1ed7e795e2a385258ab2" translate="yes" xml:space="preserve">
          <source>This directive toggles the maximum number of HTTP/2 server pushes that are remembered per HTTP/2 connection. This can be used inside the &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; section to influence the number for all connections to that virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1895457acf0b4efe5448e6dcf773ace3b9f3bcd" translate="yes" xml:space="preserve">
          <source>This directive toggles the security checks on HTTP/2 connections in TLS mode (https:). This can be used server wide or for specific &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2077c916619177ddb66e69d7908835b1ebb20cfb" translate="yes" xml:space="preserve">
          <source>This directive toggles the usage of the HTTP/1.1 Upgrade method for switching to HTTP/2. This should be used inside a &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; section to enable Upgrades to HTTP/2 for that virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd352ea04c8fb18a38ce7c65bd32a37627b4caa" translate="yes" xml:space="preserve">
          <source>This directive toggles the usage of the HTTP/2 Direct Mode. This should be used inside a &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; section to enable direct HTTP/2 communication for that virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9ffedb101a6d0187a3ce4f8ac4b82b0a70dfaf" translate="yes" xml:space="preserve">
          <source>This directive toggles the usage of the HTTP/2 server push protocol feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3342a12c16c563a4db0bf74a2a763b4fe0f54b3a" translate="yes" xml:space="preserve">
          <source>This directive will allow caching even if the upstream server has requested that the resource not be cached. This directive is only ideal for a 'private' cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1600b0ba5bb4ece86ee8f2aa9977b0d63556b513" translate="yes" xml:space="preserve">
          <source>This directive will allow serving from the cache even if the client has requested that the document not be served from the cache. This might result in stale content being served.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe4760a4661dc9a0e79f06dd07ff6467b716f8b" translate="yes" xml:space="preserve">
          <source>This directive, if enabled by the &lt;code&gt;LDAPReferrals&lt;/code&gt; directive, limits the number of referral hops that are followed before terminating an LDAP query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970139af6b05af26d1d3c92c6dd6d709790cccba" translate="yes" xml:space="preserve">
          <source>This directs &lt;code&gt;&lt;a href=&quot;mod_filter&quot;&gt;mod_filter&lt;/a&gt;&lt;/code&gt; to deal with ensuring the filter doesn't run when it shouldn't, and that the HTTP response headers are correctly set taking into account the effects of the filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a83f2406f07133dd1abd5402e16a3c57f6e8b2" translate="yes" xml:space="preserve">
          <source>This disables &lt;code&gt;&lt;a href=&quot;mod/core#keepalive&quot;&gt;KeepAlive&lt;/a&gt;&lt;/code&gt; when set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c3137e049e6e5a82b3607d1c40d7c4d7820215" translate="yes" xml:space="preserve">
          <source>This discusses a shortcoming in the Unix socket API. Suppose your web server uses multiple &lt;code&gt;&lt;a href=&quot;../mod/mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt; statements to listen on either multiple ports or multiple addresses. In order to test each socket to see if a connection is ready, Apache uses &lt;code&gt;select(2)&lt;/code&gt;. &lt;code&gt;select(2)&lt;/code&gt; indicates that a socket has &lt;em&gt;zero&lt;/em&gt; or &lt;em&gt;at least one&lt;/em&gt; connection waiting on it. Apache's model includes multiple children, and all the idle ones test for new connections at the same time. A naive implementation looks something like this (these examples do not match the code, they're contrived for pedagogical purposes):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b00e366ac09b6248b998fcc90276355d577dd94" translate="yes" xml:space="preserve">
          <source>This document acts as a reference page for most of the relevant standards that Apache follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fed1f9b2b733b39f8e4c03dbe980d09fcdc5da" translate="yes" xml:space="preserve">
          <source>This document covers compilation and installation of the Apache HTTP Server on Unix and Unix-like systems only. For compiling and installation on Windows, see &lt;a href=&quot;platform/windows&quot;&gt;Using Apache HTTP Server with Microsoft Windows&lt;/a&gt; and &lt;a href=&quot;platform/win_compiling&quot;&gt;Compiling Apache for Microsoft Windows&lt;/a&gt;. For other platforms, see the &lt;a href=&quot;platform/index&quot;&gt;platform&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4f27cc0e6576066fbb6551d4b64f45675a3e50" translate="yes" xml:space="preserve">
          <source>This document covers only the bare basics. We hope that this gets you started, but there are many other things that you might need to know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e186096950882bf629e8f9b25aa754739931dc0" translate="yes" xml:space="preserve">
          <source>This document defines a &quot;Content-language:&quot; header, for use in cases where one desires to indicate the language of something that has RFC 822-like headers, like MIME body parts or Web documents, and an &quot;Accept-Language:&quot; header for use in cases where one wishes to indicate one's preferences with regard to language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f294d494c2e112d3de94b002db0f62839af15a" translate="yes" xml:space="preserve">
          <source>This document describes a language tag for use in cases where it is desired to indicate the language used in an information object, how to register values for use in this language tag, and a construct for matching such language tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d717d6d6c5de2adf028095e6cfffc9f6ca4966" translate="yes" xml:space="preserve">
          <source>This document describes how to use DSO modules as well as the theory behind their use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b37d23f5598e6063e173953c8472f24cebec202" translate="yes" xml:space="preserve">
          <source>This document describes the files used to configure Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648e1d9c4d3863d9e5fda31ce5ab91a6a77fe6a5" translate="yes" xml:space="preserve">
          <source>This document describes the use of Apache's Handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b7d9f0568abdfccb822f4469e9de3886f8e5f4" translate="yes" xml:space="preserve">
          <source>This document describes the use of filters in Apache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a639af7855db410b89aa5800e134610060640a0a" translate="yes" xml:space="preserve">
          <source>This document is not the correct place for an in-depth discussion of HTTP request smuggling (instead, try your favourite search engine) however it is important to be aware that it is possible to make a series of requests, and to exploit a vulnerability on an origin webserver such that the attacker can entirely control the content retrieved by the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c65dd00a6180e49c763d5a2019b95aa27a94dd6" translate="yes" xml:space="preserve">
          <source>This document is not yet complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a3ea829f9463270c14e4e1dff0a1ce8c4da901" translate="yes" xml:space="preserve">
          <source>This document summarizes the history of HTML development, and defines the &quot;text/html&quot; MIME type by pointing to the relevant W3C recommendations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f87ba8d3cb734828ee0b15aa5c331480feeb34" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/mod_cache_disk&quot;&gt;mod_cache_disk&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/mod_file_cache&quot;&gt;mod_file_cache&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;programs/htcacheclean&quot;&gt;htcacheclean&lt;/a&gt; reference documentation. It describes how to use the Apache HTTP Server's caching features to accelerate web and proxy serving, while avoiding common problems and misconfigurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d363c9da84f47238866b94ca7dfd78ea39c6ad" translate="yes" xml:space="preserve">
          <source>This does two things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc583d836b5abf7f0efd671718265741f08bc6ce" translate="yes" xml:space="preserve">
          <source>This effectively disables the mutex, and is only allowed for a mutex if the module indicates that it is a valid choice. Consult the module documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0f2aebfc951699bc1637e98aace82e161b95ee" translate="yes" xml:space="preserve">
          <source>This enables the DAV file system provider, which is implemented by the &lt;code&gt;&lt;a href=&quot;mod_dav_fs&quot;&gt;mod_dav_fs&lt;/a&gt;&lt;/code&gt; module. Therefore, that module must be compiled into the server or loaded at runtime using the &lt;code&gt;&lt;a href=&quot;mod_so#loadmodule&quot;&gt;LoadModule&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26c63b4c9dce26265a7b6b1b293796390e85dab" translate="yes" xml:space="preserve">
          <source>This enables the extraction of the title from HTML documents for fancy indexing. If the file does not have a description given by &lt;code&gt;&lt;a href=&quot;#adddescription&quot;&gt;AddDescription&lt;/a&gt;&lt;/code&gt; then httpd will read the document for the value of the &lt;code&gt;title&lt;/code&gt; element. This is CPU and disk intensive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3caf7a74fcfdc1ed0341013535dddfa50b1e87" translate="yes" xml:space="preserve">
          <source>This example also shows that it is not necessary to define a nickname with the &lt;code&gt;&lt;a href=&quot;mod/mod_log_config#logformat&quot;&gt;LogFormat&lt;/a&gt;&lt;/code&gt; directive. Instead, the log format can be specified directly in the &lt;code&gt;&lt;a href=&quot;mod/mod_log_config#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c37a5cbed8ca50aca66c511541b62387c9b719" translate="yes" xml:space="preserve">
          <source>This example assumes that your &lt;code&gt;&lt;a href=&quot;../mod/core#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;/www/htdocs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097735a5849e0b07c160b370865457ac3fc2ed7d" translate="yes" xml:space="preserve">
          <source>This example checks for passwords in two different text files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b06e2819cb7264de8a226ab61f3647deea2f35" translate="yes" xml:space="preserve">
          <source>This example keeps requests for images from appearing in the access log. It can be easily modified to prevent logging of particular directories, or to prevent logging of requests coming from particular hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b2a75ac4ea3471e2edd1715725bfcd314fe4f0" translate="yes" xml:space="preserve">
          <source>This example says that the server is not reachable on port 80 from the outside, but local port 5002 is the one responding to https: requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb577a81caa04692bae4cee05f33b23f5e2c7a2b" translate="yes" xml:space="preserve">
          <source>This example shows how to keep people not on your server from using images on your server as inline-images on their pages. This is not a recommended configuration, but it can work in limited circumstances. We assume that all your images are in a directory called &lt;code&gt;/web/images&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f6176550e7a1876101eb25ea5a338aa977ac2b" translate="yes" xml:space="preserve">
          <source>This file handle caching is done once at server start or restart, only. So whenever one of the cached files changes on the filesystem you &lt;em&gt;have&lt;/em&gt; to restart the server (see the &lt;a href=&quot;../stopping&quot;&gt;Stopping and Restarting&lt;/a&gt; documentation). To reiterate that point: if the files are modified &lt;em&gt;in place&lt;/em&gt; without restarting the server you may end up serving requests that are completely bogus. You should update files by unlinking the old copy and putting a new copy in place. Most tools such as &lt;code&gt;rdist&lt;/code&gt; and &lt;code&gt;mv&lt;/code&gt; do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857df3489417a7a3f631e911207359e90686e98e" translate="yes" xml:space="preserve">
          <source>This file should be placed somewhere not accessible from the web. This is so that folks cannot download the password file. For example, if your documents are served out of &lt;code&gt;/usr/local/apache/htdocs&lt;/code&gt;, you might want to put the password file(s) in &lt;code&gt;/usr/local/apache/passwd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ede5e968aed6d40c8dd40e0d431bcd11188998" translate="yes" xml:space="preserve">
          <source>This file should have an entry for each available variant; these entries consist of contiguous HTTP-format header lines. Entries for different variants are separated by blank lines. Blank lines are illegal within an entry. It is conventional to begin a map file with an entry for the combined entity as a whole (although this is not required, and if present will be ignored). An example map file is shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b290f484baa1746a7155de002cf9613416e25d6" translate="yes" xml:space="preserve">
          <source>This forces an HTTP/1.0 response to clients making an HTTP/1.0 request. It was originally implemented as a result of a problem with AOL's proxies. Some HTTP/1.0 clients may not behave correctly when given an HTTP/1.1 response, and this can be used to interoperate with them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b018dec3656cd96af66b7587298d00744dacdff1" translate="yes" xml:space="preserve">
          <source>This forces the request to be treated as a HTTP/1.0 request even if it was in a later dialect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dbada16f918460437e3b024ef29ae527e401c9" translate="yes" xml:space="preserve">
          <source>This forces the server to be more careful when sending a redirect to the client. This is typically used when a client has a known problem handling redirects. This was originally implemented as a result of a problem with Microsoft's WebFolders software which has a problem handling redirects on directory resources via DAV methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4793f34fea2668d9df88d80ad72720b2f0f7d198" translate="yes" xml:space="preserve">
          <source>This form allows the devops admin to adjust various parameters, take workers offline, change load balancing methods and add new works. For example, clicking on the balancer itself, you will get the following page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a15d5f74920b03290bc24fb81de0a2889097b4" translate="yes" xml:space="preserve">
          <source>This format is also used with the other various &lt;code&gt;&lt;a href=&quot;mod/mod_cache_socache&quot;&gt;mod_cache_socache&lt;/a&gt;&lt;/code&gt; providers. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19059e8eca004b157ac69e14684d90b0d7dd4f2" translate="yes" xml:space="preserve">
          <source>This format is exactly the same as the Common Log Format, with the addition of two more fields. Each of the additional fields uses the percent-directive &lt;code&gt;%{&lt;em&gt;header&lt;/em&gt;}i&lt;/code&gt;, where &lt;em&gt;header&lt;/em&gt; can be any HTTP request header. The access log under this format will look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096d80095c6e70ca2d59f52989b1cc575fa5f553" translate="yes" xml:space="preserve">
          <source>This function is also subject to &lt;code&gt;timefmt&lt;/code&gt; format configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20476b0ad037d103e365dfa8c122e11463e00f7f" translate="yes" xml:space="preserve">
          <source>This handler function just prints out the uri or form encoded arguments to a plaintext page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93293ab5b8cf36fddc30d6ab449647fbcf6bca1" translate="yes" xml:space="preserve">
          <source>This happens while the server is already running. All other hosts will continue to work as before. While a certificate is not available, requests for the managed domain will be answered with a '503 Service Unavailable'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98391fb2488e90f5c28cdbdb3ea93824e9a5216" translate="yes" xml:space="preserve">
          <source>This has the effect of returning &lt;code&gt;.html&lt;/code&gt; files in the &lt;code&gt;/foo/bar&lt;/code&gt; directory to being treated as normal files, rather than as candidates for parsing (see the &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; module).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a26efbb6556e73cb8635136200869e3a58b403a" translate="yes" xml:space="preserve">
          <source>This has the potential to dramatically simplify the coding and configuration required in some web applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8091b090d1c4a33bbe3d0dfc551c4c36b6e50a05" translate="yes" xml:space="preserve">
          <source>This httpd has been configured with &lt;code&gt;Options FollowSymLinks&lt;/code&gt; and &lt;code&gt;AllowOverride None&lt;/code&gt;. Thus it doesn't need to &lt;code&gt;lstat(2)&lt;/code&gt; each directory in the path leading up to the requested file, nor check for &lt;code&gt;.htaccess&lt;/code&gt; files. It simply calls &lt;code&gt;stat(2)&lt;/code&gt; to verify that the file: 1) exists, and 2) is a regular file, not a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500be7dad5231b4b2ff567d7c63f0aa8b5cf50c9" translate="yes" xml:space="preserve">
          <source>This influences &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt;'s behaviour. If it contains a language tag (such as &lt;code&gt;en&lt;/code&gt;, &lt;code&gt;ja&lt;/code&gt; or &lt;code&gt;x-klingon&lt;/code&gt;), &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; tries to deliver a variant with that language. If there's no such variant, the normal &lt;a href=&quot;content-negotiation&quot;&gt;negotiation&lt;/a&gt; process applies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5e3a115e02bf1f5295a6ac52dbfce8fe90bc71" translate="yes" xml:space="preserve">
          <source>This is NOT equivalent - don't do this! This will send all requests that have /image/ anywhere in them to /ftp/pub/image/:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babfa2059b3102cb36483d5cd8a8df20ba7b437f" translate="yes" xml:space="preserve">
          <source>This is a convenience directive to ease http: to https: migration of your Managed Domains. With:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f739ef935ba9f086be01175e37d46619e252d08f" translate="yes" xml:space="preserve">
          <source>This is a historical behavior that may be used by some third-party modules (such as mod_php) for taking responsibility for the matching request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc26703e4960b680738e5f5047c25d2243362841" translate="yes" xml:space="preserve">
          <source>This is a mutex variant based on a Posix semaphore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0892e2e0f7f97cf11bd9549674937cfc2b67cbf" translate="yes" xml:space="preserve">
          <source>This is a mutex variant based on a SystemV IPC semaphore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a7db0821c0052cd9d9feb1c777bad892729b10" translate="yes" xml:space="preserve">
          <source>This is a mutex variant based on cross-process Posix thread mutexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03157a65015ea4d0a1a37f0814c2b079b7c4b848" translate="yes" xml:space="preserve">
          <source>This is a mutex variant where a physical (lock-)file and the &lt;code&gt;fcntl()&lt;/code&gt; function are used as the mutex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c600e00c890445453ad2984406f78cb509350971" translate="yes" xml:space="preserve">
          <source>This is a server-wide setting to select a provider for the &lt;a href=&quot;../socache&quot;&gt;shared object cache&lt;/a&gt;, followed by optional arguments for that provider. Some possible values for &lt;var&gt;provider-name&lt;/var&gt; are &quot;dbm&quot;, &quot;dc&quot;, &quot;memcache&quot;, or &quot;shmcb&quot;, each subject to the appropriate module being loaded. If not set, your platform's default will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d1da23e2f5e97671199fec0d4085ee1c664b19" translate="yes" xml:space="preserve">
          <source>This is a simple configuration that compresses common text-based content types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a67e4e5f4fcc43aedc350c447ebfb3d289c4b61" translate="yes" xml:space="preserve">
          <source>This is a specialized version of &lt;code&gt;&lt;a href=&quot;#mdomain&quot;&gt;MDomain&lt;/a&gt;&lt;/code&gt;, it should be used only when a fine grained configuration is required. &lt;code&gt;&lt;a href=&quot;#mdomain&quot;&gt;MDomain&lt;/a&gt;&lt;/code&gt; is the suggested choice for the general use case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8539438f2d9fd904733b828b25b740abaf07e6" translate="yes" xml:space="preserve">
          <source>This is because all values of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f765231950bf4ed049a069b6531787ecfa597880" translate="yes" xml:space="preserve">
          <source>This is done by the origin server adding a &lt;code&gt;Vary&lt;/code&gt; header to indicate which headers must be taken into account by a cache when determining whether two variants are different from one another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ae0c6007b5dae27eb870d99f39ad87d33d285e" translate="yes" xml:space="preserve">
          <source>This is expected to be a permanent limitation as there is no authorizer flow for retrieving a hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461f0db2b2c71e98cd52b7198d9969827e796d7d" translate="yes" xml:space="preserve">
          <source>This is expected to be permanently out of scope for this module. Application processes must be controlled by other means. For example, &lt;code&gt;&lt;a href=&quot;../programs/fcgistarter&quot;&gt;fcgistarter&lt;/a&gt;&lt;/code&gt; can be used to start them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869a43b38709e993825da9b6bda045ab0ecc01ed" translate="yes" xml:space="preserve">
          <source>This is necessary since multiple &lt;var&gt;URL-paths&lt;/var&gt; can map to the same filesystem location, potentially bypassing the &lt;code&gt;ScriptAlias&lt;/code&gt; and revealing the source code of the CGI scripts if they are not restricted by a &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;Directory&lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59385dd69ab965d41058d5d82cef2148eec1ef84" translate="yes" xml:space="preserve">
          <source>This is one of the more common uses of SSI - to output the results of a CGI program, such as everybody's favorite, a ``hit counter.''</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b26a65f25593db805efaab921801778e92b270" translate="yes" xml:space="preserve">
          <source>This is roughly equivalent to the &lt;code&gt;?config&lt;/code&gt; query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c7616d7530117f7e5ac8e772edeb6d62ece750" translate="yes" xml:space="preserve">
          <source>This is similar to the &lt;code&gt;fcntl:/path/to/mutex&lt;/code&gt; method with the exception that the &lt;code&gt;flock()&lt;/code&gt; function is used to provide file locking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b554610808b90882ecb2b94766d37b5018b7d90" translate="yes" xml:space="preserve">
          <source>This is the IP address of the client (remote host) which made the request to the server. If &lt;code&gt;&lt;a href=&quot;mod/core#hostnamelookups&quot;&gt;HostnameLookups&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;On&lt;/code&gt;, then the server will try to determine the hostname and log it in place of the IP address. However, this configuration is not recommended since it can significantly slow the server. Instead, it is best to use a log post-processor such as &lt;code&gt;&lt;a href=&quot;programs/logresolve&quot;&gt;logresolve&lt;/a&gt;&lt;/code&gt; to determine the hostnames. The IP address reported here is not necessarily the address of the machine at which the user is sitting. If a proxy server exists between the user and the server, this address will be the address of the proxy, rather than the originating machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2daf3692a4a4b3d0d877a438777224f56c112a3" translate="yes" xml:space="preserve">
          <source>This is the final &quot;fix anything&quot; phase before the content handlers are run. Any last-minute changes to the request should be made here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65d2c8ab261dffd2e372b1bc167005acda35d64" translate="yes" xml:space="preserve">
          <source>This is the first hook that will be called after a request has been mapped to a host or virtual host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a2a8b4e0abfc1710f580432e6e19ef44dd7ea5" translate="yes" xml:space="preserve">
          <source>This is the howto guide for the HTTP/2 implementation in Apache httpd. This feature is &lt;em&gt;production-ready&lt;/em&gt; and you may expect interfaces and directives to remain consistent releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5029caca4cd8091500a4d0a6c774e0b50bb2d061" translate="yes" xml:space="preserve">
          <source>This is the name of a provider defined with &lt;code&gt;AuthnzFcgiDefineProvider&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5efdc0278ed66216c1951405fd07b46430e826" translate="yes" xml:space="preserve">
          <source>This is the status code that the server sends back to the client. This information is very valuable, because it reveals whether the request resulted in a successful response (codes beginning in 2), a redirection (codes beginning in 3), an error caused by the client (codes beginning in 4), or an error in the server (codes beginning in 5). The full list of possible status codes can be found in the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616.txt&quot;&gt;HTTP specification&lt;/a&gt; (RFC2616 section 10).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0400800bb63f10bee97745da29901217f17cdb13" translate="yes" xml:space="preserve">
          <source>This is the userid of the person requesting the document as determined by HTTP authentication. The same value is typically provided to CGI scripts in the &lt;code&gt;REMOTE_USER&lt;/code&gt; environment variable. If the status code for the request (see below) is 401, then this value should not be trusted because the user is not yet authenticated. If the document is not password protected, this part will be &quot;&lt;code&gt;-&lt;/code&gt;&quot; just like the previous one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdced36fe52cc483e076b36a6caea4196e2eeb0" translate="yes" xml:space="preserve">
          <source>This is used to assign a name to the provider which is used in other directives such as &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0901da5fc593056d2ef0402efc905742989be4c0" translate="yes" xml:space="preserve">
          <source>This is useful in situations, &lt;em&gt;e.g.&lt;/em&gt; when a client requesting &lt;code&gt;Accept: */*&lt;/code&gt; can not actually processes the content returned by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734142c925f467b3f6b0a8e320a5c7d5f9024e9d" translate="yes" xml:space="preserve">
          <source>This is what you need to get the same effect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82bf5fcbe64baa2a1bb37f67ce2e92d184d8692" translate="yes" xml:space="preserve">
          <source>This is where the content is handled. Files are read, parsed, some are run, and the result is sent to the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f34800f843e0657130e696932d61d0c01ed3dff" translate="yes" xml:space="preserve">
          <source>This last may look confusing at first, so it helps to evaluate what the search filter will look like based on who connects, as shown below. If Fred User connects as &lt;code&gt;fuser&lt;/code&gt;, the filter would look like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349b79b2793fd45b76a446673a3b46159704cb82" translate="yes" xml:space="preserve">
          <source>This library is required but not longer bundled with httpd. Download the source code from &lt;a href=&quot;http://www.pcre.org/&quot;&gt;http://www.pcre.org&lt;/a&gt;, or install a Port or Package. If your build system can't find the pcre-config script installed by the PCRE build, point to it using the &lt;code&gt;--with-pcre&lt;/code&gt; parameter. On some platforms, you may have to install the corresponding &lt;code&gt;-dev&lt;/code&gt; package to allow httpd to build against your installed copy of PCRE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1869984c560930feaf2500ba79b66b9149b0cb31" translate="yes" xml:space="preserve">
          <source>This limit affects only request bodies, not its meta data such as headers. Also, it has no effect on response bodies as the window size for those are managed by the clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2a64e654aafe56f3d41bcee2d0831207eabc64" translate="yes" xml:space="preserve">
          <source>This loading can usually be done in two ways: automatically by a system program called &lt;code&gt;ld.so&lt;/code&gt; when an executable program is started or manually from within the executing program via a programmatic system interface to the Unix loader through the system calls &lt;code&gt;dlopen()/dlsym()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1595c5e832cb04c05c92fa8a4dde860d1860c048" translate="yes" xml:space="preserve">
          <source>This log will be opened as the user the child processes run as, &lt;em&gt;i.e.&lt;/em&gt; the user specified in the main &lt;code&gt;&lt;a href=&quot;mod_unixd#user&quot;&gt;User&lt;/a&gt;&lt;/code&gt; directive. This means that either the directory the script log is in needs to be writable by that user or the file needs to be manually created and set to be writable by that user. If you place the script log in your main logs directory, do &lt;strong&gt;NOT&lt;/strong&gt; change the directory permissions to make it writable by the user the child processes run as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb401652c5d3f6ee95590409cc78b5876629d414" translate="yes" xml:space="preserve">
          <source>This logged message may be captured in any of the following logs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6059076f96342a6aa9734381e6f99eb7d2820462" translate="yes" xml:space="preserve">
          <source>This makes direct h2c attractive for server to server communication as well, when the connection can be trusted or is secured by other means.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5816147c91e69018f97068bd84a2e50c61c784a0" translate="yes" xml:space="preserve">
          <source>This makes it possible to support conditional logging of cached requests as per the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4bdf3bbd5fa65114cadcaef8bd0a601974e32c" translate="yes" xml:space="preserve">
          <source>This makes the icons part of the anchor for the filename, for fancy indexing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acaeef753b1f99d06c90fe64ecc0bbe40d0063d" translate="yes" xml:space="preserve">
          <source>This may offer a substantial performance boost to some users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8441cef69537b9b013ddb6028b63c27d5364f80d" translate="yes" xml:space="preserve">
          <source>This means (and in fact encourages) that you can have multiple handlers (or hooks, or filters) in the same script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb929e0ee3cee78d700b2021b453cc9fd14add47" translate="yes" xml:space="preserve">
          <source>This memory-mapping sometimes yields a performance improvement. But in some environments, it is better to disable the memory-mapping to prevent operational problems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d1f45e7e4b1659395e5508e4942077a92aeeea" translate="yes" xml:space="preserve">
          <source>This method of protocol switching is enabled by default on cleartext (potential h2c) connections and disabled on TLS (potential h2), as mandated by RFC 7540.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f92ca66ed5f5efe53b20966ffb8196cb57d0f83" translate="yes" xml:space="preserve">
          <source>This method of switching protocols is defined in HTTP/1.1 and uses the &quot;Upgrade&quot; header (thus the name) to announce willingness to use another protocol. This may happen on any request of a HTTP/1.1 connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b82175e7020c64b81cdc15f8a100097c9c47927" translate="yes" xml:space="preserve">
          <source>This mode offers the best performance, as the majority of server processing is bypassed. This mode however also bypasses the authentication and authorization phases of server processing, so this mode should be chosen with care when this is important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41bbaee40a6a883f1fe7304931b757cb3f28f57" translate="yes" xml:space="preserve">
          <source>This mode offers the most flexibility, as the potential exists for caching to occur at a precisely controlled point in the filter chain, and cached content can be filtered or personalized before being sent to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1cffba95e7d3b1159feb068a37aed2c395e439c" translate="yes" xml:space="preserve">
          <source>This mode only has an effect when h2 or h2c is enabled via the &lt;code&gt;&lt;a href=&quot;core#protocols&quot;&gt;Protocols&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1b4881cf24d7638dc592b2aaa6d15cf79a4861" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt;. It acts as a support module for &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt; and provides access to resources located in the server's file system. The formal name of this provider is &lt;code&gt;filesystem&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt; backend providers will be invoked by using the &lt;code&gt;&lt;a href=&quot;mod_dav#dav&quot;&gt;Dav&lt;/a&gt;&lt;/code&gt; directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a0ac7037cae1aaef338c56dc025cda56c0df93" translate="yes" xml:space="preserve">
          <source>This module adds three new logging directives. The characteristics of the request itself are logged by placing &quot;&lt;code&gt;%&lt;/code&gt;&quot; directives in the format string, which are replaced in the log file by the values as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b1c9e4215d8d498fafc9ccde59a47687cf94c8" translate="yes" xml:space="preserve">
          <source>This module allows FastCGI authorizer applications to authenticate users and authorize access to resources. It supports generic FastCGI authorizers which participate in a single phase for authentication and authorization as well as Apache httpd-specific authenticators and authorizors which participate in one or both phases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad49d93e12c6a83e6c8056ca31dbf648c4c25e37" translate="yes" xml:space="preserve">
          <source>This module allows authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users through an ldap directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396b92582f8816393cc75119a059ccf433f61eb5" translate="yes" xml:space="preserve">
          <source>This module allows for control of internal environment variables that are used by various Apache HTTP Server modules. These variables are also provided to CGI scripts as native system environment variables, and available for use in SSI pages. Environment variables may be passed from the shell which invoked the &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; process. Alternatively, environment variables may be set or unset within the configuration process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38c1e5d9eaf61f75bd5e505766f1a15284a1f21" translate="yes" xml:space="preserve">
          <source>This module allows the server to be extended with scripts written in the Lua programming language. The extension points (hooks) available with &lt;code&gt;&lt;a href=&quot;mod_lua&quot;&gt;mod_lua&lt;/a&gt;&lt;/code&gt; include many of the hooks available to natively compiled Apache HTTP Server modules, such as mapping requests to files, generating dynamic responses, access control, authentication, and authorization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0f7c6a2396e932882e974cefa3997f77c4b6bb" translate="yes" xml:space="preserve">
          <source>This module allows the use of HTTP Basic Authentication to restrict access by looking up users in the given providers. HTTP Digest Authentication is provided by &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;. This module should usually be combined with at least one authentication module such as &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt; and one authorization module such as &lt;code&gt;&lt;a href=&quot;mod_authz_user&quot;&gt;mod_authz_user&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9037a21a0ea30f6131f2d92326c5301999123ddf" translate="yes" xml:space="preserve">
          <source>This module allows the use of an HTML login form to restrict access by looking up users in the given providers. HTML forms require significantly more configuration than the alternatives, however an HTML login form can provide a much friendlier experience for end users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35a12203eed4ea26747c6367c8ef7eaa07a829b" translate="yes" xml:space="preserve">
          <source>This module also leverages the core functions &lt;a href=&quot;https://ci.apache.org/projects/httpd/trunk/doxygen/group__APACHE__CORE__SCRIPT.html#ga0e81f9571a8a73f5da0e89e1f46d34b1&quot;&gt;ap_add_common_vars&lt;/a&gt; and &lt;a href=&quot;https://ci.apache.org/projects/httpd/trunk/doxygen/group__APACHE__CORE__SCRIPT.html#ga6b975cd7ff27a338cb8752381a4cc14f&quot;&gt;ap_add_cgi_vars&lt;/a&gt; to add environment variables like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a70ab21fc883d96c7497f3a74a52265491efce" translate="yes" xml:space="preserve">
          <source>This module authorizes access to files by comparing the userid used for HTTP authentication (the web userid) with the file-system owner or group of the requested file. The supplied username and password must be already properly verified by an authentication module, such as &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;mod_authz_owner&quot;&gt;mod_authz_owner&lt;/a&gt;&lt;/code&gt; recognizes two arguments for the &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directive, &lt;code&gt;file-owner&lt;/code&gt; and &lt;code&gt;file-group&lt;/code&gt;, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974a96b335004f294ae8f6a75b7777597629b1e2" translate="yes" xml:space="preserve">
          <source>This module caches authentication and authorization results based on the configuration of &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt;. Changes made to the backing LDAP server will not be immediately reflected on the HTTP Server, including but not limited to user lockouts/revocations, password changes, or changes to group memberships. Consult the directives in &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; for details of the cache tunables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc76b34a2d4d733b13dd0045f1cbf4d2180dcbce" translate="yes" xml:space="preserve">
          <source>This module can also provide database-backed user login/logout capabilities. These are likely to be of most value when used in conjunction with &lt;code&gt;&lt;a href=&quot;mod_authn_dbd&quot;&gt;mod_authn_dbd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480359169b46f2bed58ea03fc22485e26f713fa1" translate="yes" xml:space="preserve">
          <source>This module can be configured to provide HTTP/2 related information as additional environment variables to the SSI and CGI namespace, as well as in custom log configurations (see &lt;code&gt;%{VAR_NAME}e&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1a4977c41f35d77e5f13f9e105c8863cfe522a" translate="yes" xml:space="preserve">
          <source>This module controls the setting of the &lt;code&gt;Expires&lt;/code&gt; HTTP header and the &lt;code&gt;max-age&lt;/code&gt; directive of the &lt;code&gt;Cache-Control&lt;/code&gt; HTTP header in server responses. The expiration date can set to be relative to either the time the source file was last modified, or to the time of the client access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849c1a0e6fb762ba001a3f6473f65e6f8ac87ffc" translate="yes" xml:space="preserve">
          <source>This module determines the &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#mime-type&quot;&gt;MIME type&lt;/a&gt; of files in the same way the Unix &lt;code&gt;file(1)&lt;/code&gt; command works: it looks at the first few bytes of the file. It is intended as a &quot;second line of defense&quot; for cases that &lt;code&gt;&lt;a href=&quot;mod_mime&quot;&gt;mod_mime&lt;/a&gt;&lt;/code&gt; can't resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2943e3895f64af5e5a8d14cc4cd5749667eedd26" translate="yes" xml:space="preserve">
          <source>This module does not provide any configuration directives of its own. It requires the services of &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;, and provides the &lt;code&gt;bybusyness&lt;/code&gt; load balancing method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f914785e858748f5782c0967737783f1c8bedf" translate="yes" xml:space="preserve">
          <source>This module does not provide any configuration directives of its own. It requires the services of &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;, and provides the &lt;code&gt;byrequests&lt;/code&gt; load balancing method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ab8dbca1d19e18efd75c3b83802a4c6cd8b685" translate="yes" xml:space="preserve">
          <source>This module does not provide any configuration directives of its own. It requires the services of &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;, and provides the &lt;code&gt;bytraffic&lt;/code&gt; load balancing method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8e7c275327a09375adb0c50b6c4a42fe0ac9c6" translate="yes" xml:space="preserve">
          <source>This module enables smart, context-sensitive configuration of output content filters. For example, apache can be configured to process different content-types through different filters, even when the content-type is not known in advance (e.g. in a proxy).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3a27ae29b274334d4389585cf51f72509816af" translate="yes" xml:space="preserve">
          <source>This module has two directives. The &lt;code&gt;&lt;a href=&quot;#action&quot;&gt;Action&lt;/a&gt;&lt;/code&gt; directive lets you run CGI scripts whenever a file of a certain &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#mime-type&quot;&gt;MIME content type&lt;/a&gt; is requested. The &lt;code&gt;&lt;a href=&quot;#script&quot;&gt;Script&lt;/a&gt;&lt;/code&gt; directive lets you run CGI scripts whenever a particular method is used in a request. This makes it much easier to execute scripts that process files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0dd1e1e6e318e8ee5fd722205f8f399e35ca15" translate="yes" xml:space="preserve">
          <source>This module holds a great deal of power over httpd, which is both a strength and a potential security risk. It is &lt;strong&gt;not&lt;/strong&gt; recommended that you use this module on a server that is shared with users you do not trust, as it can be abused to change the internal workings of httpd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c83829ca7915437b638fe374143b25d406ca22d" translate="yes" xml:space="preserve">
          <source>This module implements HTTP Digest Authentication (&lt;a href=&quot;http://www.faqs.org/rfcs/rfc2617.html&quot;&gt;RFC2617&lt;/a&gt;), and provides an alternative to &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; where the password is not transmitted as cleartext. However, this does &lt;strong&gt;not&lt;/strong&gt; lead to a significant security advantage over basic authentication. On the other hand, the password storage on the server is much less secure with digest authentication than with basic authentication. Therefore, using basic auth and encrypting the whole connection using &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; is a much better alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a7694644cd995ee3409e67991d8d72f4a3b51c" translate="yes" xml:space="preserve">
          <source>This module implements a generic locking API which can be used by any backend provider of &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt;. It &lt;em&gt;requires&lt;/em&gt; at least the service of &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt;. But without a backend provider which makes use of it, it's useless and should not be loaded into the server. A sample backend module which actually utilizes &lt;code&gt;&lt;a href=&quot;mod_dav_lock&quot;&gt;mod_dav_lock&lt;/a&gt;&lt;/code&gt; is &lt;a href=&quot;http://subversion.apache.org/&quot;&gt;mod_dav_svn&lt;/a&gt;, the subversion provider module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6357b4b6633b8d614698477a9a4cc13bbf2ac9a1" translate="yes" xml:space="preserve">
          <source>This module implements the Internet Server extension API. It allows Internet Server extensions (&lt;em&gt;e.g.&lt;/em&gt; ISAPI .dll modules) to be served by Apache for Windows, subject to the noted restrictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfa26768faa88ebfb005de5e4e90c6b0fd1ac8e" translate="yes" xml:space="preserve">
          <source>This module is an extension of and borrows heavily from the &lt;code&gt;mod_mmap_static&lt;/code&gt; module in Apache 1.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932bade00fc751f37d940bc8239137637bceece8" translate="yes" xml:space="preserve">
          <source>This module is derived from a free version of the &lt;code&gt;file(1)&lt;/code&gt; command for Unix, which uses &quot;magic numbers&quot; and other hints from a file's contents to figure out what the contents are. This module is active only if the magic file is specified by the &lt;code&gt;&lt;a href=&quot;#mimemagicfile&quot;&gt;MimeMagicFile&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea5b570b6458d3863969dfb3eb6dfde6db63ec0" translate="yes" xml:space="preserve">
          <source>This module is experimental. Its behaviors, directives, and defaults are subject to more change from release to release relative to other standard modules. Users are encouraged to consult the &quot;CHANGES&quot; file for potential updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1a656b5fb13a1e316071ac690d8fb5235ec0eb" translate="yes" xml:space="preserve">
          <source>This module is inactive until this directive is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8474d82794a35197ac628611c576dd7900b192ff" translate="yes" xml:space="preserve">
          <source>This module is not for every system. If your system is barely keeping up with its load or if you're performing a web server benchmark, you may not want to enable this because the processing is not free.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2a6d9624a98c113d77a229fff31d246b8c6af1" translate="yes" xml:space="preserve">
          <source>This module is used by default instead of &lt;code&gt;&lt;a href=&quot;mod_cgi&quot;&gt;mod_cgi&lt;/a&gt;&lt;/code&gt; whenever a multi-threaded MPM is selected during the compilation process. At the user level, this module is identical in configuration and operation to &lt;code&gt;&lt;a href=&quot;mod_cgi&quot;&gt;mod_cgi&lt;/a&gt;&lt;/code&gt;. The only exception is the additional directive &lt;code&gt;ScriptSock&lt;/code&gt; which gives the name of the socket to use for communication with the cgi daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a611457e8ce7ac285e98b7a346cf52f2a96db3fb" translate="yes" xml:space="preserve">
          <source>This module is used to assign content metadata to the content selected for an HTTP response by mapping patterns in the URI or filenames to the metadata values. For example, the filename extensions of content files often define the content's Internet media type, language, character set, and content-encoding. This information is sent in HTTP messages containing that content and used in content negotiation when selecting alternatives, such that the user's preferences are respected when choosing one of several possible contents to serve. See &lt;code&gt;&lt;a href=&quot;mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; for more information about &lt;a href=&quot;../content-negotiation&quot;&gt;content negotiation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b022f61ca8d59cf9ae11ff7282892d8b04504f22" translate="yes" xml:space="preserve">
          <source>This module makes it easy to restrict what HTTP methods can be used on a server. The most common configuration would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a771079f8ff41a680e085425ea1c2f0e921ce00e" translate="yes" xml:space="preserve">
          <source>This module manages common properties of domains for one or more virtual hosts. Specifically it can use the ACME protocol (&lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-acme-acme/&quot;&gt;RFC Draft&lt;/a&gt;) to automate certificate provisioning. These will be configured for managed domains and their virtual hosts automatically. This includes renewal of certificates before they expire. The most famous Certificate Authority currently implementing the ACME protocol is &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22eb765374bd629cc5b115489f57d07f895760e6" translate="yes" xml:space="preserve">
          <source>This module manages database connections, in a manner optimised for the platform. On non-threaded platforms, it provides a persistent connection in the manner of classic LAMP (Linux, Apache, Mysql, Perl/PHP/Python). On threaded platform, it provides an altogether more scalable and efficient &lt;em&gt;connection pool&lt;/em&gt;, as described in &lt;a href=&quot;http://www.apachetutor.org/dev/reslist&quot;&gt;this article at ApacheTutor&lt;/a&gt;. Note that &lt;code&gt;&lt;a href=&quot;mod_dbd&quot;&gt;mod_dbd&lt;/a&gt;&lt;/code&gt; supersedes the modules presented in that article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718ec8f59bdb79da96bafb20c8af4ae556673e74" translate="yes" xml:space="preserve">
          <source>This module processes &lt;code&gt;.map&lt;/code&gt; files, thereby replacing the functionality of the &lt;code&gt;imagemap&lt;/code&gt; CGI program. Any directory or document type configured to use the handler &lt;code&gt;imap-file&lt;/code&gt; (using either &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt;) will be processed by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95f4d742d9700f1175e0d35e4578b6251f254af" translate="yes" xml:space="preserve">
          <source>This module provides HTTP/2 (&lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;RFC 7540&lt;/a&gt;) support for the Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98e7113dcb4b46b03417e18fcb5bb4a6f4d9025" translate="yes" xml:space="preserve">
          <source>This module provides a filter which will process files before they are sent to the client. The processing is controlled by specially formatted SGML comments, referred to as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7452ef0c0789107dc31f046470a0b155c5365a76" translate="yes" xml:space="preserve">
          <source>This module provides a small subset of configuration mechanisms implemented by Russian Apache and its associated &lt;code&gt;mod_charset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71dadb6c697edaca3bc31bca2f1ebd310670112e" translate="yes" xml:space="preserve">
          <source>This module provides an example protocol module to illustrate the concept. It provides a simple echo server. Telnet to it and type stuff, and it will echo it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd11f3d0e5bc9b88e1b3515c399a56466d535a0c" translate="yes" xml:space="preserve">
          <source>This module provides authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users similar to anonymous-ftp sites, &lt;em&gt;i.e.&lt;/em&gt; have a 'magic' user id 'anonymous' and the email address as a password. These email addresses can be logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fec523ee3d51c0c508792260dbdddb01312eb05" translate="yes" xml:space="preserve">
          <source>This module provides authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users by looking up users in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b6603cdeaae6a28393c8215b9a8154814015be" translate="yes" xml:space="preserve">
          <source>This module provides authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users by looking up users in SQL tables. Similar functionality is provided by, for example, &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db2bd7eba6e6cc0d380e74c76d3063901ba6848" translate="yes" xml:space="preserve">
          <source>This module provides authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users by looking up users in plain text password files. Similar functionality is provided by &lt;code&gt;&lt;a href=&quot;mod_authn_dbm&quot;&gt;mod_authn_dbm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7c277c2badad69e93f8892336474afe5704f9e" translate="yes" xml:space="preserve">
          <source>This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site by group membership. Similar functionality is provided by &lt;code&gt;&lt;a href=&quot;mod_authz_dbm&quot;&gt;mod_authz_dbm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb61824cac3cf0992ba3aef54771167d12516b5" translate="yes" xml:space="preserve">
          <source>This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site by group membership. Similar functionality is provided by &lt;code&gt;&lt;a href=&quot;mod_authz_groupfile&quot;&gt;mod_authz_groupfile&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_dbm&quot;&gt;mod_authz_dbm&lt;/a&gt;&lt;/code&gt;, with the exception that this module queries a SQL database to determine whether a user is a member of a group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81568f49615855ce7aec49eebb408e37bae8f7a6" translate="yes" xml:space="preserve">
          <source>This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site by group membership. Similar functionality is provided by &lt;code&gt;&lt;a href=&quot;mod_authz_groupfile&quot;&gt;mod_authz_groupfile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b288e1de7b5bd314f401055616fafe378ce36d" translate="yes" xml:space="preserve">
          <source>This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site. &lt;code&gt;&lt;a href=&quot;mod_authz_user&quot;&gt;mod_authz_user&lt;/a&gt;&lt;/code&gt; grants access if the authenticated user is listed in a &lt;code&gt;Require user&lt;/code&gt; directive. Alternatively &lt;code&gt;Require valid-user&lt;/code&gt; can be used to grant access to all successfully authenticated users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7122f9472822d923a35d39b8f143bde8b5d94719" translate="yes" xml:space="preserve">
          <source>This module provides class 1 and class 2 &lt;a href=&quot;http://www.webdav.org&quot;&gt;WebDAV&lt;/a&gt; ('Web-based Distributed Authoring and Versioning') functionality for Apache. This extension to the HTTP protocol allows creating, moving, copying, and deleting resources and collections on a remote web server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aad6533fa1c78b152e4df9f54500f03fcda868c" translate="yes" xml:space="preserve">
          <source>This module provides core authentication capabilities to allow or deny access to portions of the web site. &lt;code&gt;&lt;a href=&quot;mod_authn_core&quot;&gt;mod_authn_core&lt;/a&gt;&lt;/code&gt; provides directives that are common to all authentication providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ece937e5e58bfb9c69ac432b1e7b9e5f5881a3c" translate="yes" xml:space="preserve">
          <source>This module provides core authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site. &lt;code&gt;&lt;a href=&quot;mod_authz_core&quot;&gt;mod_authz_core&lt;/a&gt;&lt;/code&gt; provides the functionality to register various authorization providers. It is usually used in conjunction with an authentication provider module such as &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt; and an authorization module such as &lt;code&gt;&lt;a href=&quot;mod_authz_user&quot;&gt;mod_authz_user&lt;/a&gt;&lt;/code&gt;. It also allows for advanced logic to be applied to the authorization processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10af84134fd1ae0953d82d32aa3f7bacad44eaf" translate="yes" xml:space="preserve">
          <source>This module provides directives to control and modify HTTP request and response headers. Headers can be merged, replaced or removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba38b47d1bc6195ff70e5bc7cae7c242fbd1a5d0" translate="yes" xml:space="preserve">
          <source>This module provides for flexible logging of client requests. Logs are written in a customizable format, and may be written directly to a file, or to an external program. Conditional logging is provided so that individual requests may be included or excluded from the logs based on characteristics of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf96c66dde9d429933493c83aeaf2c4113c9568d" translate="yes" xml:space="preserve">
          <source>This module provides for forensic logging of client requests. Logging is done before and after processing a request, so the forensic log contains two log lines for each request. The forensic logger is very strict, which means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d085b15e494fcee004e49414a20da446b2276093" translate="yes" xml:space="preserve">
          <source>This module provides the ability to buffer the input and output filter stacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da79fe00d58921e467ca7a845f71fb6c416237a1" translate="yes" xml:space="preserve">
          <source>This module provides the ability to convert a response into an &lt;a href=&quot;http://tools.ietf.org/html/rfc2397&quot;&gt;RFC2397 data URL&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b955282988c7acef27b703d9ca66ef7de1c4da" translate="yes" xml:space="preserve">
          <source>This module provides the handler &lt;code&gt;send-as-is&lt;/code&gt; which causes Apache HTTP Server to send the document without adding most of the usual HTTP headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5006f42ea5911c347b19a994ffd86fabaf2b10a3" translate="yes" xml:space="preserve">
          <source>This module provides the logging of input and output number of bytes received/sent per request. The numbers reflect the actual bytes as received on the network, which then takes into account the headers and bodies of requests and responses. The counting is done before SSL/TLS on input and after SSL/TLS on output, so the numbers will correctly reflect any changes made by encryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb6c3101002756904091ee8381281820c234274" translate="yes" xml:space="preserve">
          <source>This module queries an &lt;a href=&quot;http://www.ietf.org/rfc/rfc1413.txt&quot;&gt;RFC 1413&lt;/a&gt; compatible daemon on a remote host to look up the owner of a connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf226d1291ef2887d713fa1c88dd80ff15ed934" translate="yes" xml:space="preserve">
          <source>This module relies on &lt;a href=&quot;http://nghttp2.org/&quot;&gt;libnghttp2&lt;/a&gt; to provide the core http/2 engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5c8beb5aa8269be8336de1d5429c1b85cc9fac" translate="yes" xml:space="preserve">
          <source>This module relies on &lt;code&gt;&lt;a href=&quot;mod_dbd&quot;&gt;mod_dbd&lt;/a&gt;&lt;/code&gt; to specify the backend database driver and connection parameters, and manage the database connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0e00dc2ec0e9521d1e5c333b444a60e8747ea5" translate="yes" xml:space="preserve">
          <source>This module requires &lt;code&gt;&lt;a href=&quot;mod_log_config&quot;&gt;mod_log_config&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cb176951ec47d10b727f42574dafc1dfc0c000" translate="yes" xml:space="preserve">
          <source>This module requires &lt;code&gt;&lt;a href=&quot;mod_watchdog&quot;&gt;mod_watchdog&lt;/a&gt;&lt;/code&gt; to be loaded as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d661449bb931d4a23384faf31af4f7b8899d291b" translate="yes" xml:space="preserve">
          <source>This module should be used with care, as when the &lt;code&gt;&lt;a href=&quot;#cachequickhandler&quot;&gt;CacheQuickHandler&lt;/a&gt;&lt;/code&gt; directive is in its default value of &lt;strong&gt;on&lt;/strong&gt;, the &lt;code&gt;&lt;a href=&quot;mod_access_compat#allow&quot;&gt;Allow&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_access_compat#deny&quot;&gt;Deny&lt;/a&gt;&lt;/code&gt; directives will be circumvented. You should not enable quick handler caching for any content to which you wish to limit access by client host name, address or environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e69cd9be22dec28a6bf45e3bd74c7973694c05c" translate="yes" xml:space="preserve">
          <source>This module should be used with care. You can easily create a broken site using &lt;code&gt;&lt;a href=&quot;mod_file_cache&quot;&gt;mod_file_cache&lt;/a&gt;&lt;/code&gt;, so read this document carefully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531ff69e5d869497819ae70cffaa5580efeb04ff" translate="yes" xml:space="preserve">
          <source>This module uses the services of &lt;code&gt;&lt;a href=&quot;mod_slotmem_shm&quot;&gt;mod_slotmem_shm&lt;/a&gt;&lt;/code&gt; when available instead of flat-file storage. No configuration is required to use &lt;code&gt;&lt;a href=&quot;mod_slotmem_shm&quot;&gt;mod_slotmem_shm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d182dd1322bdaffa01ff606205997d2f4b74a60" translate="yes" xml:space="preserve">
          <source>This module was created to improve the performance of websites relying on backend connections to LDAP servers. In addition to the functions provided by the standard LDAP libraries, this module adds an LDAP connection pool and an LDAP shared memory cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5a4c6b97b965f880e6a9ee6568af6712670cd8" translate="yes" xml:space="preserve">
          <source>This modules load balancing algorithm favors servers with more ready (idle) capacity over time, but does not select the server with the most ready capacity every time. Servers that have 0 active clients are penalized, with the assumption that they are not fully initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9b957798e73b91e0165f319ddd3b8dc177aa70" translate="yes" xml:space="preserve">
          <source>This mpm showed some scalability bottlenecks in the past leading to the following error: &quot;&lt;strong&gt;scoreboard is full, not at MaxRequestWorkers&lt;/strong&gt;&quot;. &lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; limits the number of simultaneous requests that will be served at any given time and also the number of allowed processes (&lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;mpm_common#threadsperchild&quot;&gt;ThreadsPerChild&lt;/a&gt;&lt;/code&gt;), meanwhile the Scoreboard is a representation of all the running processes and the status of their worker threads. If the scoreboard is full (so all the threads have a state that is not idle) but the number of active requests served is not &lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt;, it means that some of them are blocking new requests that could be served but that are queued instead (up to the limit imposed by &lt;code&gt;&lt;a href=&quot;mpm_common#listenbacklog&quot;&gt;ListenBacklog&lt;/a&gt;&lt;/code&gt;). Most of the times the threads are stuck in the Graceful state, namely they are waiting to finish their work with a TCP connection to safely terminate and free up a scoreboard slot (for example handling long running requests, slow clients or connections with keep-alive enabled). Two scenarios are very common:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6e2a065e9cf38b8abe87798daf2821019a030d" translate="yes" xml:space="preserve">
          <source>This must be a fully qualified URL (&lt;em&gt;e.g.&lt;/em&gt;&lt;code&gt;http://server/location&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8179f0a2f09a0466d814a4c7204b324e430045" translate="yes" xml:space="preserve">
          <source>This must be set to &lt;em&gt;authn&lt;/em&gt; for authentication, &lt;em&gt;authz&lt;/em&gt; for authorization, or &lt;em&gt;authnz&lt;/em&gt; for a generic FastCGI authorizer which performs both checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48da63918e48b8f94a962d697f4c9957308d84f" translate="yes" xml:space="preserve">
          <source>This naturally adds some expense at the end of a connection, but it is required for a reliable implementation. As HTTP/1.1 becomes more prevalent, and all connections are persistent, this expense will be amortized over more requests. If you want to play with fire and disable this feature, you can define &lt;code&gt;NO_LINGCLOSE&lt;/code&gt;, but this is not recommended at all. In particular, as HTTP/1.1 pipelined persistent connections come into use, &lt;code&gt;lingering_close&lt;/code&gt; is an absolute necessity (and &lt;a href=&quot;http://www.w3.org/Protocols/HTTP/Performance/Pipeline.html&quot;&gt; pipelined connections are faster&lt;/a&gt;, so you want to support them).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08755ce721a5a441e2481a8ddaf72bf5fbf9c79c" translate="yes" xml:space="preserve">
          <source>This new architecture, leveraging non-blocking sockets and modern kernel features exposed by &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#apr&quot;&gt;APR&lt;/a&gt; (like Linux's epoll), no longer requires the &lt;code&gt;mpm-accept&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;core#mutex&quot;&gt;Mutex&lt;/a&gt;&lt;/code&gt; configured to avoid the thundering herd problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523b65e3ffe3f3fe5e4bf1f83664d08b410b4917" translate="yes" xml:space="preserve">
          <source>This notice may not be removed or altered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5f4b7035ebee20a0f6028e8fe4640c31b82dde" translate="yes" xml:space="preserve">
          <source>This one is different than others because the server scope is quite long lived, and multiple threads will have the same server_rec. To accommodate this, server scoped Lua states are stored in an apr resource list. The &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; arguments specify the minimum and maximum number of Lua states to keep in the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b88b38d55ccbbdd6e6c6f736916beb63ac5174" translate="yes" xml:space="preserve">
          <source>This option causes &lt;code&gt;&lt;a href=&quot;mod_autoindex&quot;&gt;mod_autoindex&lt;/a&gt;&lt;/code&gt; to ignore all query variables from the client, including sort order (implies &lt;code&gt;&lt;a href=&quot;#indexoptions.suppresscolumnsorting&quot;&gt;SuppressColumnSorting&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864eb42e3b727e40fd353d4d899079a198ffd445" translate="yes" xml:space="preserve">
          <source>This option gets ignored if set anywhere other than &lt;code&gt;&lt;a href=&quot;#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt;, as &lt;code&gt;&lt;a href=&quot;mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; needs real resources to compare against and evaluate from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbecd99de51d2fbd226aa0168e8e1f2fe38218a" translate="yes" xml:space="preserve">
          <source>This option is only configurable when Apache HTTP Server is linked with an LDAP SDK that implements &lt;code&gt;LDAP_OPT_DEBUG&lt;/code&gt; or &lt;code&gt;LDAP_OPT_DEBUG_LEVEL&lt;/code&gt;, such as OpenLDAP (a value of 7 is verbose) or Tivoli Directory Server (a value of 65535 is verbose).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffe751dbf4f4eea02f49522f138bc769b5ee413" translate="yes" xml:space="preserve">
          <source>This option is provided for compatibility with releases prior to 2.4.11, where trailers were always merged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a188982d89c08509676fb5c28aefeab861eafd" translate="yes" xml:space="preserve">
          <source>This option should not be considered a security restriction, since symlink testing is subject to race conditions that make it circumventable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af73d362475a6013eb5e471cc574c101561674e" translate="yes" xml:space="preserve">
          <source>This option tracks additional data per worker about the currently executing request and creates a utilization summary. You can see these variables during runtime by configuring &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt;. Note that other modules may rely on this scoreboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e5863f2022d980dad9faceecb27e922f1cdfa9" translate="yes" xml:space="preserve">
          <source>This option with &lt;code&gt;FancyIndexing&lt;/code&gt; constructs a simple table for the fancy directory listing. It is necessary for utf-8 enabled platforms or if file names or description text will alternate between left-to-right and right-to-left reading order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec049236f1dd61788c44cbb139365fb559ee746" translate="yes" xml:space="preserve">
          <source>This order has the same effect as &lt;code&gt;Order Allow,Deny&lt;/code&gt; and is deprecated in its favor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a8b966dbabab8aed90ff9d9c3204d792c7b503" translate="yes" xml:space="preserve">
          <source>This page could be summarized with the statement: don't configure Apache HTTP Server in such a way that it relies on DNS resolution for parsing of the configuration files. If httpd requires DNS resolution to parse the configuration files then your server may be subject to reliability problems (ie. it might not start up), or denial and theft of service attacks (including virtual hosts able to steal hits from other virtual hosts).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19cd179129fff67d851042ee7567e36fc40f6ace" translate="yes" xml:space="preserve">
          <source>This page documents all the relevant standards that the Apache HTTP Server follows, along with brief descriptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31466bc729c72a3d7d363fad811b1434869bcd53" translate="yes" xml:space="preserve">
          <source>This parameter specifies the internet media type (&lt;em&gt;i.e.&lt;/em&gt;, MIME type) of documents which should be filtered. By default, all documents are filtered. If &lt;code&gt;intype=&lt;/code&gt; is specified, the filter will be disabled for documents of other types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109131c12baec54f629aecc1d915c3d61f544b9d" translate="yes" xml:space="preserve">
          <source>This parameter specifies the internet media type (&lt;em&gt;i.e.&lt;/em&gt;, MIME type) of filtered documents. It is useful when the filter changes the internet media type as part of the filtering operation. By default, the internet media type is unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c21c33e26ed87544fe0354eeaa5ee211364048" translate="yes" xml:space="preserve">
          <source>This parameter specifies the name of an environment variable which must be set, or the filter will be disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8cfded5a363eb133bbe8734499b6315c11c116" translate="yes" xml:space="preserve">
          <source>This parameter specifies the name of an environment variable which, if set, will disable the filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d17e3fbd24eef11a9cf84a5a73f899aa0f9fdde" translate="yes" xml:space="preserve">
          <source>This parameter specifies the numeric value for filter type that the filter should be registered as. The default value, AP_FTYPE_RESOURCE, is sufficient in most cases. If the filter needs to operate at a different point in the filter chain than resource filters, then this parameter will be necessary. See the AP_FTYPE_foo definitions in util_filter.h for appropriate values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca05d25abb6c74e90fca7732624bfe2d05ab7b60" translate="yes" xml:space="preserve">
          <source>This phase authorizes a user based on the negotiated credentials, such as user ID, client certificate etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a4bad4965dbe93c7bf55c7a73960dc9a29e966" translate="yes" xml:space="preserve">
          <source>This phase checks the requested file and assigns a content type and a handler to it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ad48aae38cdcadc787543e1f5d92c0a472cfcb" translate="yes" xml:space="preserve">
          <source>This phase checks whether a client has access to a resource. This phase is run before the user is authenticated, so beware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e88e6bc95cd513590874cab3fd7f405649cb0a" translate="yes" xml:space="preserve">
          <source>This phase happens late in the request processing, after all the request phases have completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0417e65a2d4134007be067cf55bda0967722831e" translate="yes" xml:space="preserve">
          <source>This phase happens very early on during the request processing, just after the request has been parsed. If the content is found within the cache, it is served immediately and almost all request processing is bypassed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07f86af7329fc6a963a4724ded7e3df1a955ffa" translate="yes" xml:space="preserve">
          <source>This phase is run immediately after the request has been mapped to a virtal host, and can be used to either do some request processing before the other phases kick in, or to serve a request without the need to translate, map to storage et cetera. As this phase is run before anything else, directives such as &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; are void in this phase, just as URIs have not been properly parsed yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056f30f044d1a7a1a5a2edce09c8ca86f364e078" translate="yes" xml:space="preserve">
          <source>This phase it used to check the negotiated user ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4185f16e3ba663fe53c7470dcd8c7658c3d5629f" translate="yes" xml:space="preserve">
          <source>This phase maps files to their physical, cached or external/proxied storage. It can be used by proxy or caching modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d30b21d47e39c7e63b2abc2a6243bf3011741d6" translate="yes" xml:space="preserve">
          <source>This phase translates the requested URI into a filename on the system. Modules such as &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; operate in this phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ef65aa898cd1f4626d7db85baf6f30f649aedc" translate="yes" xml:space="preserve">
          <source>This presents a somewhat elevated risk in comparison to the other types of attack it is possible to make as the Apache user. If you are using &lt;code&gt;&lt;a href=&quot;mod/mod_cache_disk&quot;&gt;mod_cache_disk&lt;/a&gt;&lt;/code&gt; you should bear this in mind - ensure you upgrade httpd when security upgrades are announced and run CGI processes as a non-Apache user using &lt;a href=&quot;suexec&quot;&gt;suEXEC&lt;/a&gt; if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1bafef16b6d9ff75ea4a7efa7bd229edf6db5b" translate="yes" xml:space="preserve">
          <source>This prevents the use of &lt;code&gt;.htaccess&lt;/code&gt; files in all directories apart from those specifically enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9948aef509bb323bf1de4db0cca81e761e123af3" translate="yes" xml:space="preserve">
          <source>This prints out a plain text listing of all existing variables and their values. Special characters are entity encoded (see the &lt;code&gt;&lt;a href=&quot;#element.echo&quot;&gt;echo&lt;/a&gt;&lt;/code&gt; element for details) before being output. There are no attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac41596f7ee593b65542282d34a783855f04c5a" translate="yes" xml:space="preserve">
          <source>This redirection is handled by the server, not the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b32c898875f1188130901b62c08ab47da0cc1a" translate="yes" xml:space="preserve">
          <source>This replaces the per-module logging directives, such as &lt;code&gt;RewriteLog&lt;/code&gt;, that were present in earlier versions of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03fe41e1328b8572529ec412dfdc72ff1c73a13" translate="yes" xml:space="preserve">
          <source>This returns the &lt;code&gt;Last-Modified&lt;/code&gt; and &lt;code&gt;ETag&lt;/code&gt; values for the listed directory in the HTTP header. It is only valid if the operating system and file system return appropriate stat() results. Some Unix systems do so, as do OS2's JFS and Win32's NTFS volumes. OS2 and Win32 FAT volumes, for example, do not. Once this feature is enabled, the client or proxy can track changes to the list of files when they perform a &lt;code&gt;HEAD&lt;/code&gt; request. Note some operating systems correctly track new and removed files, but do not track changes for sizes or dates of the files within the directory. &lt;strong&gt;Changes to the size or date stamp of an existing file will not update the &lt;code&gt;Last-Modified&lt;/code&gt; header on all Unix platforms.&lt;/strong&gt; If this is a concern, leave this option disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658414e63178a7093eb957bdc84fb5e1074512b9" translate="yes" xml:space="preserve">
          <source>This says that any pushed stream of content type 'application/json' should be send out &lt;em&gt;before&lt;/em&gt; X. This makes P1 dependent on Y and X dependent on P1. So, X will be stalled as long as P1 has data to send. The effective weight is inherited from the client stream. Specifying a weight is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b55557e24fb8bcc755c7a4d6bcb0d3715769efa" translate="yes" xml:space="preserve">
          <source>This section describes the syntax of the &lt;code&gt;#if expr&lt;/code&gt; element if &lt;code&gt;&lt;a href=&quot;#ssilegacyexprparser&quot;&gt;SSILegacyExprParser&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1c98d92669cbc6e44001bdf8a1844f94c7ad3c" translate="yes" xml:space="preserve">
          <source>This section has not been fully updated to take into account changes made in the 2.x version of the Apache HTTP Server. Some of the information may still be relevant, but please use it with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a395ff2b639ce0b7e488c122aac2e053ce67abc7" translate="yes" xml:space="preserve">
          <source>This section should only be used if you need to have one configuration file that works across multiple versions of &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt;, regardless of whether a particular directive is available. In normal operation, directives need not be placed in &lt;code&gt;&amp;lt;IfDirective&amp;gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891b7bcfbb9ef6fb3b20c6adce5caa901d576b16" translate="yes" xml:space="preserve">
          <source>This section should only be used if you need to have one configuration file that works across multiple versions of &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt;, regardless of whether a particular section directive is available. In normal operation, directives need not be placed in &lt;code&gt;&amp;lt;IfSection&amp;gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c52890efcd175819938cadd5ce45702d5f52a0" translate="yes" xml:space="preserve">
          <source>This section should only be used if you need to have one configuration file that works whether or not a specific module is available. In normal operation, directives need not be placed in &lt;code&gt;&amp;lt;IfModule&amp;gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56aa1614fe396fec33a4bda6d650e12ed1ad309" translate="yes" xml:space="preserve">
          <source>This selects the &quot;best&quot; available file locking implementation, choosing between &lt;code&gt;fcntl&lt;/code&gt; and &lt;code&gt;flock&lt;/code&gt;, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e84ddfdc1453452523e6196b87b5b64356a3c8" translate="yes" xml:space="preserve">
          <source>This selects the &quot;best&quot; available semaphore implementation, choosing between Posix and SystemV IPC semaphores, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2f97cb53e2ca38ddb10ec207232cf95aacf8d3" translate="yes" xml:space="preserve">
          <source>This selects the default locking implementation, as determined by &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#apr&quot;&gt;APR&lt;/a&gt;. The default locking implementation can be displayed by running &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;-V&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7ba17e4759c7984276cee71f224729519270b9" translate="yes" xml:space="preserve">
          <source>This sendfile mechanism avoids separate read and send operations, and buffer allocations. But on some platforms or within some filesystems, it is better to disable this feature to avoid operational problems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572c3c38d352d12ff4d91ad4235f14ec657d8845" translate="yes" xml:space="preserve">
          <source>This sets the description to display for a file, for &lt;code&gt;&lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;FancyIndexing&lt;/a&gt;&lt;/code&gt;. &lt;var&gt;File&lt;/var&gt; is a file extension, partial filename, wild-card expression or full filename for files to describe. &lt;var&gt;String&lt;/var&gt; is enclosed in double quotes (&lt;code&gt;&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d325564be1ba506f1454bac2cd06c957ccd82e" translate="yes" xml:space="preserve">
          <source>This sets the icon to display next to a file ending in &lt;var&gt;name&lt;/var&gt; for &lt;code&gt;&lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;FancyIndexing&lt;/a&gt;&lt;/code&gt;. &lt;var&gt;Icon&lt;/var&gt; is either a (%-escaped) relative URL to the icon, a fully qualified remote URL, or of the format &lt;code&gt;(alttext,url)&lt;/code&gt; where &lt;var&gt;alttext&lt;/var&gt; is the text tag given for an icon for non-graphical browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1bfec57ba456566035986c6fa3ba9380d91438" translate="yes" xml:space="preserve">
          <source>This sets the icon to display next to files of type &lt;var&gt;MIME-type&lt;/var&gt; for &lt;code&gt;&lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;FancyIndexing&lt;/a&gt;&lt;/code&gt;. &lt;var&gt;Icon&lt;/var&gt; is either a (%-escaped) relative URL to the icon, a fully qualified remote URL, or of the format &lt;code&gt;(alttext,url)&lt;/code&gt; where &lt;var&gt;alttext&lt;/var&gt; is the text tag given for an icon for non-graphical browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664436d96aa78fa9d5cf0cdec86a0a9ae9e9b3aa" translate="yes" xml:space="preserve">
          <source>This sets the icon to display next to files with &lt;code&gt;&lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;FancyIndexing&lt;/a&gt;&lt;/code&gt;. &lt;var&gt;Icon&lt;/var&gt; is either a (%-escaped) relative URL to the icon, a fully qualified remote URL, or of the format &lt;code&gt;(alttext,url)&lt;/code&gt; where &lt;var&gt;alttext&lt;/var&gt; is the text tag given for an icon for non-graphical browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93fdaafcf21e4a89fbe3ea480b83725f4564541" translate="yes" xml:space="preserve">
          <source>This sets the main &lt;code&gt;LogLevel&lt;/code&gt; to info, but turns it up to &lt;code&gt;trace5&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0314221916c0420e420562c732b9829f195a52f" translate="yes" xml:space="preserve">
          <source>This sets the value of a variable. Attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22679f831bc9149d2105abd94c05583798c89935" translate="yes" xml:space="preserve">
          <source>This setting applies to the entire server and cannot be enabled or disabled on a virtualhost-by-virtualhost basis. The collection of extended status information can slow down the server. Also note that this setting cannot be changed during a graceful restart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e361bfebf99aa7600e5b9b5ae961220e0a59b8a9" translate="yes" xml:space="preserve">
          <source>This setting applies to the entire server, and cannot be enabled or disabled on a virtualhost-by-virtualhost basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64618a87f81dc557b4d1ae08fbf2d38c70c4853d" translate="yes" xml:space="preserve">
          <source>This setting controls if HTTP status 103 interim responses are forwarded to the client or not. By default, this is currently not the case since a range of clients still have trouble with unexpected interim responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc3207d82fc60f5d826d07d6d6d7ae9fdeedfb1" translate="yes" xml:space="preserve">
          <source>This setup will, on server start, contact &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt; to request a certificate for the domain. If Let's Encrypt can verify the ownership of the domain, the module will retrieve the certificate and its chain, store it in the local file system (see &lt;code&gt;&lt;a href=&quot;#mdstoredir&quot;&gt;MDStoreDir&lt;/a&gt;&lt;/code&gt;) and provide it, on next restart, to &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6a499aa56810d4e0fdfc3cfdf272eca42cb212" translate="yes" xml:space="preserve">
          <source>This should not be confused with session timeout, which is an entirely separate issue. However, you may wish to check your session-management software for whether cached credentials can &quot;accidentally&quot; extend a session, and bear it in mind when setting your timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97242d73465c8df90d050d09bdfce4c82915c9bf" translate="yes" xml:space="preserve">
          <source>This simple Perl CGI program will display all of the environment variables that are being passed around. Two similar programs are included in the &lt;code&gt;cgi-bin&lt;/code&gt; directory of the Apache distribution. Note that some variables are required, while others are optional, so you may see some variables listed that were not in the official list. In addition, Apache provides many different ways for you to &lt;a href=&quot;../env&quot;&gt;add your own environment variables&lt;/a&gt; to the basic ones provided by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63bd761cc8f75e787aaac4c037162331e81c0ae" translate="yes" xml:space="preserve">
          <source>This simple example shows use of this module in the context of the Authentication and DBD frameworks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926e5f91dca6ff6e71b776cdcb5c18beb85b1a0b" translate="yes" xml:space="preserve">
          <source>This simple logging hook allows you to run a function when httpd enters the logging phase of a request. With it, you can append data to your own logs, manipulate data before the regular log is written, or prevent a log entry from being created. To prevent the usual logging from happening, simply return &lt;code&gt;apache2.DONE&lt;/code&gt; in your logging handler, otherwise return &lt;code&gt;apache2.OK&lt;/code&gt; to tell httpd to log as normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631364ecb6dc2ed34c4c323cf427e52d16dbda50" translate="yes" xml:space="preserve">
          <source>This software is not subject to any license of the American Telephone and Telegraph Company or of the Regents of the University of California.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5bc10b3ee71607905db0ec3248e0c7aefa8c54b" translate="yes" xml:space="preserve">
          <source>This software was submitted by Cisco Systems to the Apache Group in July 1997. Future revisions and derivatives of this source code must acknowledge Cisco Systems as the original contributor of this module. All other licensing and usage conditions are those of the Apache Group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9fadd447d1dc8ced07028d7d87a08c8b07df13" translate="yes" xml:space="preserve">
          <source>This specification defines the HyperText Markup Language (HTML), the publishing language of the World Wide Web. This specification defines HTML 4.01, which is a subversion of HTML 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35eb7abe23bd86a2fcba846ff09e1127b36a4ced" translate="yes" xml:space="preserve">
          <source>This specification defines the Second Edition of XHTML 1.0, a reformulation of HTML 4 as an XML 1.0 application, and three DTDs corresponding to the ones defined by HTML 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b92a2c3a2f0ae4f3e2ff7a00b0ce1e47523ec8b" translate="yes" xml:space="preserve">
          <source>This specifies the address of the application, in the form &lt;em&gt;fcgi://hostname:port/&lt;/em&gt;. The application process(es) must be managed independently, such as with &lt;code&gt;&lt;a href=&quot;../programs/fcgistarter&quot;&gt;fcgistarter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bf097a1f317f8296716f3fe2f8be5b8f78f590" translate="yes" xml:space="preserve">
          <source>This specifies the number of entries &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; will use to cache LDAP compare operations. The default is 1024 entries. Setting it to 0 disables operation caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe3c4178d3a556532689e5b90df850d1f08fdb9" translate="yes" xml:space="preserve">
          <source>This step will typically require root privileges, since &lt;em&gt;PREFIX&lt;/em&gt; is usually a directory with restricted write permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016895bdda3e59b46109dd404bc88bd2009e43a2" translate="yes" xml:space="preserve">
          <source>This syntax is available in Apache 2.4.19 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e15ceca254b40d1c1e4e6df96191aac414777d3" translate="yes" xml:space="preserve">
          <source>This syntax is available in version 2.4.21 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4041d2f7a6c820515ca5c52053ccd9856b7cd5e5" translate="yes" xml:space="preserve">
          <source>This technique can be used as an alternative to a web service running within an application server stack, where an output filter provides the transformation required on the request body. For example, the &lt;code&gt;&lt;a href=&quot;mod/mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt; module might be used to provide a general compression service, or an image transformation filter might be turned into an image transformation service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34340966ef7431f32c2456729d25da254445f0f5" translate="yes" xml:space="preserve">
          <source>This tells Apache that you want to permit files to be parsed for SSI directives. Note that most configurations contain multiple &lt;code&gt;&lt;a href=&quot;../mod/core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; directives that can override each other. You will probably need to apply the &lt;code&gt;Options&lt;/code&gt; to the specific directory where you want SSI enabled in order to assure that it gets evaluated last.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc113ef4bf08fe969374f02ecd76011e50f39c5e" translate="yes" xml:space="preserve">
          <source>This time httpd needs to use reverse DNS to find the &lt;code&gt;ServerName&lt;/code&gt; for this virtualhost. If that reverse lookup fails then it will partially disable the virtualhost. If the virtual host is name-based then it will effectively be totally disabled, but if it is IP-based then it will mostly work. However, if httpd should ever have to generate a full URL for the server which includes the server name (such as when a Redirect is issued), then it will fail to generate a valid URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6427b384c523bb5e48a5808393f243ecf703b8" translate="yes" xml:space="preserve">
          <source>This timeout defaults to units of seconds, but accepts suffixes for milliseconds (ms), minutes (min), and hours (h).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047e2104a9e57f3c25cb7cd57fc30df97c867b17" translate="yes" xml:space="preserve">
          <source>This turns on fancy indexing of directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a9725a540c9be096cedf4f4807551b42fe8612" translate="yes" xml:space="preserve">
          <source>This variable contains the query string of the active SSI document, or the empty string if a query string is not included. For subrequests invoked through the &lt;code&gt;include&lt;/code&gt; SSI directive, &lt;code&gt;QUERY_STRING&lt;/code&gt; will represent the query string of the subrequest and &lt;code&gt;DOCUMENT_ARGS&lt;/code&gt; will represent the query string of the SSI document. (Available in Apache HTTP Server 2.4.19 and later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8af5f65607da86537c28dc5eb33bb0267720d2" translate="yes" xml:space="preserve">
          <source>This was the default behaviour for Apache 2.2. Depending on the shell specifics this might lead to an additional shell process for the lifetime of the logging pipe program and signal handling problems during restart. For compatibility reasons with Apache 2.2 the notation &quot;&lt;code&gt;||&lt;/code&gt;&quot; is also supported and equivalent to using &quot;&lt;code&gt;|&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4107e149328125104938acf1fb48cb377289d9fe" translate="yes" xml:space="preserve">
          <source>This way round, the &lt;code&gt;MirrorID&lt;/code&gt; header is not set. If reversed, the MirrorID header is set to &quot;mirror 12&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5388e2bbef300ad013869f5867c86ade9aa56a3d" translate="yes" xml:space="preserve">
          <source>This will cause &lt;code&gt;foo.gz&lt;/code&gt; to be marked as being encoded with the gzip method, but &lt;code&gt;foo.gz.asc&lt;/code&gt; as an unencoded plaintext file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62569793ae1c428dc6a8ae6fd871eb6803fc2173" translate="yes" xml:space="preserve">
          <source>This will cause &lt;code&gt;mod_lua&lt;/code&gt; to handle requests for files ending in &lt;code&gt;.lua&lt;/code&gt; by invoking that file's &lt;code&gt;handle&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72394d68274bd23b8665e8d3167b8f961f3dd4c" translate="yes" xml:space="preserve">
          <source>This will cause filenames containing the &lt;code&gt;.gz&lt;/code&gt; extension to be marked as encoded using the &lt;code&gt;x-gzip&lt;/code&gt; encoding, and filenames containing the &lt;code&gt;.Z&lt;/code&gt; extension to be marked as encoded with &lt;code&gt;x-compress&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650ad0a9d2d87e3bd1a499177ab28f41932980f1" translate="yes" xml:space="preserve">
          <source>This will create a new directory under the current directory containing the source code for the distribution. You should &lt;code&gt;cd&lt;/code&gt; into that directory before proceeding with compiling the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4b983801091c4c2b9308d01696a4c50930322f" translate="yes" xml:space="preserve">
          <source>This will forbid default access to filesystem locations. Add appropriate &lt;code&gt;&lt;a href=&quot;../mod/core#directory&quot;&gt;Directory&lt;/a&gt;&lt;/code&gt; blocks to allow access only in those areas you wish. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c924096345308165adc90cdd41a4570cd127c0a0" translate="yes" xml:space="preserve">
          <source>This will indicate either that you've used a directive that is never permitted in &lt;code&gt;.htaccess&lt;/code&gt; files, or that you simply don't have &lt;code&gt;&lt;a href=&quot;../mod/core#allowoverride&quot;&gt;AllowOverride&lt;/a&gt;&lt;/code&gt; set to a level sufficient for the directive you've used. Consult the documentation for that particular directive to determine which is the case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2309d3fd5996e0ff14808654c6e8056d0e4a45" translate="yes" xml:space="preserve">
          <source>This will not be available if the &lt;code&gt;&lt;a href=&quot;core#acceptpathinfo&quot;&gt;AcceptPathInfo&lt;/a&gt;&lt;/code&gt; directive is explicitly set to &lt;code&gt;off&lt;/code&gt;. The default behavior, if &lt;code&gt;AcceptPathInfo&lt;/code&gt; is not given, is that &lt;code&gt;&lt;a href=&quot;mod_cgi&quot;&gt;mod_cgi&lt;/a&gt;&lt;/code&gt; will accept path info (trailing &lt;code&gt;/more/path/info&lt;/code&gt; following the script filename in the URI), while the core server will return a 404 NOT FOUND error for requests with additional path info. Omitting the &lt;code&gt;AcceptPathInfo&lt;/code&gt; directive has the same effect as setting it &lt;code&gt;On&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;mod_cgi&quot;&gt;mod_cgi&lt;/a&gt;&lt;/code&gt; requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7505d9ea819eb51bc9354fabdc83330c8a5322" translate="yes" xml:space="preserve">
          <source>This will only be set if &lt;code&gt;&lt;a href=&quot;core#hostnamelookups&quot;&gt;HostnameLookups&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt; (it is off by default), and if a reverse DNS lookup of the accessing host's address indeed finds a host name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30aecd97b4c45244a2d9bedb67b1dcc760d400d3" translate="yes" xml:space="preserve">
          <source>This will only be set if &lt;code&gt;&lt;a href=&quot;mod_ident#identitycheck&quot;&gt;IdentityCheck&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt; and the accessing host supports the ident protocol. Note that the contents of this variable cannot be relied upon because it can easily be faked, and if there is a proxy between the client and the server, it is usually totally useless.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5666880d00cfa9a13e623ed677f6470752bf70" translate="yes" xml:space="preserve">
          <source>This will only be set if the CGI script is subject to authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c488e0fd87b64fc69a4f37c171cc7af24e3d42f2" translate="yes" xml:space="preserve">
          <source>This will remove any special handling of &lt;code&gt;.cgi&lt;/code&gt; files in the &lt;code&gt;/foo/&lt;/code&gt; directory and any beneath it, causing responses containing those files to omit the HTTP Content-Type header field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d1b2f6a17338ab9dbe1758362c5f2ef330beaf" translate="yes" xml:space="preserve">
          <source>This will result in the &lt;code&gt;Zed&lt;/code&gt; variable being set to &quot;&lt;code&gt;X_Y&lt;/code&gt;&quot; if &lt;code&gt;REMOTE_HOST&lt;/code&gt; is &quot;&lt;code&gt;X&lt;/code&gt;&quot; and &lt;code&gt;REQUEST_METHOD&lt;/code&gt; is &quot;&lt;code&gt;Y&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374f900b409d695b77dc014bbdee0d34645b5923" translate="yes" xml:space="preserve">
          <source>This will return a 403 Forbidden response for any request after 8pm or before 7am. This technique can be used for any criteria that you wish to check. You can also redirect, or otherwise rewrite these requests, if that approach is preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3815330e1e0967e02f69176f832c4d082a9b92" translate="yes" xml:space="preserve">
          <source>This will send out a &lt;code&gt;&quot;103 Early Hints&quot;&lt;/code&gt; response to a client as soon as the server &lt;em&gt;starts&lt;/em&gt; processing the request. This may be much early than the time the first response headers have been determined, depending on your web application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7967cded267ebd239f1f4b5718922abc31ecdf9" translate="yes" xml:space="preserve">
          <source>This will suppress the display of the last modification date, in fancy indexing listings. &lt;strong&gt;This option only has an effect if &lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;&lt;code&gt;FancyIndexing&lt;/code&gt;&lt;/a&gt; is also enabled.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaae85d95a6c4478b370633180a49da421fc111" translate="yes" xml:space="preserve">
          <source>This will suppress the file description in fancy indexing listings. By default, no file descriptions are defined, and so the use of this option will regain 23 characters of screen space to use for something else. See &lt;code&gt;&lt;a href=&quot;#adddescription&quot;&gt;AddDescription&lt;/a&gt;&lt;/code&gt; for information about setting the file description. See also the &lt;code&gt;&lt;a href=&quot;#indexoptions.descriptionwidth&quot;&gt;DescriptionWidth&lt;/a&gt;&lt;/code&gt; index option to limit the size of the description column. &lt;strong&gt;This option only has an effect if &lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;&lt;code&gt;FancyIndexing&lt;/code&gt;&lt;/a&gt; is also enabled.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a82e9d4397d3b3512f14197498ab4801109469c" translate="yes" xml:space="preserve">
          <source>This will suppress the file size in fancy indexing listings. &lt;strong&gt;This option only has an effect if &lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;&lt;code&gt;FancyIndexing&lt;/code&gt;&lt;/a&gt; is also enabled.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58bded0e221089407f6efb7035b32794b87d1456" translate="yes" xml:space="preserve">
          <source>This will suppress the horizontal rule lines (&lt;code&gt;hr&lt;/code&gt; elements) in directory listings. Combining both &lt;code&gt;SuppressIcon&lt;/code&gt; and &lt;code&gt;SuppressRules&lt;/code&gt; yields proper HTML 3.2 output, which by the final specification prohibits &lt;code&gt;img&lt;/code&gt; and &lt;code&gt;hr&lt;/code&gt; elements from the &lt;code&gt;pre&lt;/code&gt; block (used to format FancyIndexed listings.) &lt;strong&gt;This option only has an effect if &lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;&lt;code&gt;FancyIndexing&lt;/code&gt;&lt;/a&gt; is also enabled.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a8452e4019c02febfa4646ee1273d09890bdff" translate="yes" xml:space="preserve">
          <source>This will suppress the icon in fancy indexing listings. Combining both &lt;code&gt;SuppressIcon&lt;/code&gt; and &lt;code&gt;SuppressRules&lt;/code&gt; yields proper HTML 3.2 output, which by the final specification prohibits &lt;code&gt;img&lt;/code&gt; and &lt;code&gt;hr&lt;/code&gt; elements from the &lt;code&gt;pre&lt;/code&gt; block (used to format FancyIndexed listings.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db8dd854838eb61bca4e02cee8e5d69a7f9380f" translate="yes" xml:space="preserve">
          <source>This works by defining two special &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; types: &lt;code&gt;Require dbd-login&lt;/code&gt; and &lt;code&gt;Require dbd-logout&lt;/code&gt;. For usage details, see the configuration example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898b90f45e7970a12f00011881cab1f13b9f45ee" translate="yes" xml:space="preserve">
          <source>This would allow clients to walk through the entire filesystem. To work around this, add the following block to your server's configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df130ea2c95233a4e4bb43aaab63ff7d3ab6338" translate="yes" xml:space="preserve">
          <source>This would allow the user to enter without password verification by using the userIDs &quot;anonymous&quot;, &quot;AnonyMous&quot;, &quot;Not Registered&quot; and &quot;I Don't Know&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35352cb6ff56f90156c939974b816a6e5faab8c9" translate="yes" xml:space="preserve">
          <source>This would invoke the &quot;handle&quot; function, which is the default if no specific function name is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e50f007138991799dae5e30f1602742ef3f0da9" translate="yes" xml:space="preserve">
          <source>This would match uri's such as /photos/show?id=9 to the file /scripts/photos.lua and invoke the handler function handle_show on the lua vm after loading that file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ec4a4c4e1f5b0041626aa8e9012fcd2a801533" translate="yes" xml:space="preserve">
          <source>This would result in error messages such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9391c6b559525c33eb4a9f711f3b2d7e611ac470" translate="yes" xml:space="preserve">
          <source>Thread ID of current thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f094e95d084e7a8234e73b99c6ee7702265690" translate="yes" xml:space="preserve">
          <source>Three directives are provided by this module: &lt;code&gt;&lt;a href=&quot;#transferlog&quot;&gt;TransferLog&lt;/a&gt;&lt;/code&gt; to create a log file, &lt;code&gt;&lt;a href=&quot;#logformat&quot;&gt;LogFormat&lt;/a&gt;&lt;/code&gt; to set a custom format, and &lt;code&gt;&lt;a href=&quot;#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; to define a log file and format in one step. The &lt;code&gt;TransferLog&lt;/code&gt; and &lt;code&gt;CustomLog&lt;/code&gt; directives can be used multiple times in each server to cause each request to be logged to multiple files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf04427b0a8d6381ba7dfd514c6e24776d56c58" translate="yes" xml:space="preserve">
          <source>Three-state RFC2616 HTTP caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfac5feedfb24e44b5cba00723ae5082e24984eb" translate="yes" xml:space="preserve">
          <source>Through the use of &lt;code&gt;AuthBasicUseDigestAlgorithm&lt;/code&gt; a site may switch from Digest to Basic Authentication without requiring users to be assigned new passwords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0be28b4c187a262cddc2eb2a88cb36cf5f73dca" translate="yes" xml:space="preserve">
          <source>Thus you may log it this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e03aeab02653879a16310718394bdda8f200909" translate="yes" xml:space="preserve">
          <source>Thus, it is possible to have one or more hot spares and hot standbys for each load balancer set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d41909836fdd10d974b79aa5b53af3faae95f1" translate="yes" xml:space="preserve">
          <source>Time that cached items remain valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0d58bd64f04ea40d17ec1a788b359f64c6bcdd" translate="yes" xml:space="preserve">
          <source>Time that entries in the operation cache remain valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc58d7747e0d7b21f797f0f149f70c2de0756cf2" translate="yes" xml:space="preserve">
          <source>Time the request was received, in the format &lt;code&gt;[18/Sep/2011:19:18:28 -0400]&lt;/code&gt;. The last number indicates the timezone offset from GMT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebf1fd41663efd3cbfd9f8b5ba0f98cb9ce135a" translate="yes" xml:space="preserve">
          <source>TimeOut Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b174d5d610e8f0b6ab0a17d86587d7f13a8db7a" translate="yes" xml:space="preserve">
          <source>Timeouts for ldap compare operations requires an SDK with LDAP_OPT_TIMEOUT, such as OpenLDAP &amp;gt;= 2.4.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5386ff32ff5f1d094d5fdaea4ce53623159ff18" translate="yes" xml:space="preserve">
          <source>Timestamp including milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf1b54b003a59c279d1ba0b615a8a5f3459ca8c" translate="yes" xml:space="preserve">
          <source>Tips</source>
          <target state="translated">Tips</target>
        </trans-unit>
        <trans-unit id="ee20bb0a759c311706e4062c60aa458a9f75ce12" translate="yes" xml:space="preserve">
          <source>Tips to Avoid These Problems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9b9891d94f801888d42a568cd7c01af133e709" translate="yes" xml:space="preserve">
          <source>To achieve this, when the error redirect is sent, additional environment variables will be set, which will be generated from the headers provided to the original request by prepending 'REDIRECT_' onto the original header name. This provides the error document the context of the original request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c888eaaf108bd7127387059dc61077a16d695e" translate="yes" xml:space="preserve">
          <source>To activate the example_hooks module, include a block similar to the following in your &lt;code&gt;httpd.conf&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8f858f477432d6bd24f1b7366ddc529f96a79f" translate="yes" xml:space="preserve">
          <source>To add a user to your already existing password file, type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570daf2bcd62a72a1b072b04b370a60b8760b988" translate="yes" xml:space="preserve">
          <source>To add another module of your own:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368cceee963bb540ba11411d1854ee9f8cd3de74" translate="yes" xml:space="preserve">
          <source>To allow CGI program execution for any file ending in &lt;code&gt;.cgi&lt;/code&gt; in users' directories, you can use the following configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9209cf50e0f80f4ead2561d967c36d7cab9891" translate="yes" xml:space="preserve">
          <source>To check if you are using suexec, run &lt;code&gt;apachectl -V&lt;/code&gt; and check for the location of &lt;code&gt;SUEXEC_BIN&lt;/code&gt;. If Apache finds an &lt;code&gt;&lt;a href=&quot;../programs/suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; binary there on startup, suexec will be activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943738d241eded3fd1daf078162833d9dbe7a375" translate="yes" xml:space="preserve">
          <source>To circumvent this limitation, there are some known configuration patterns that can help, like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbc82c5f2b8d5fe873e1906b670626ffb48a69d" translate="yes" xml:space="preserve">
          <source>To configure &lt;code&gt;&lt;a href=&quot;mod_info&quot;&gt;mod_info&lt;/a&gt;&lt;/code&gt;, add the following to your &lt;code&gt;httpd.conf&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07f6328bc34c39815ccdc58ff0db9e3fff6a113" translate="yes" xml:space="preserve">
          <source>To configure inline authentication, the administrator overrides the error document returned by the &lt;var&gt;HTTP_UNAUTHORIZED&lt;/var&gt; status code with a custom error document containing the login form, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6415a3103962fc92515b8c0a370f8cbcd730ca76" translate="yes" xml:space="preserve">
          <source>To configure the source tree using all the default options, simply type &lt;code&gt;./configure&lt;/code&gt;. To change the default options, &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; accepts a variety of variables and command line options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8e7c531d8f73b5d957c92d4ebf8d3aba3a67bd" translate="yes" xml:space="preserve">
          <source>To connect to your database, you'll need to specify a driver, and connection parameters. These vary from one database engine to another. For example, to connect to mysql, do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a259914507f0f81055a1685dd2b26aad916f4436" translate="yes" xml:space="preserve">
          <source>To convey this further information, Apache optionally sends a &lt;code&gt;Content-Language&lt;/code&gt; header, to specify the language that the document is in, and can append additional information onto the &lt;code&gt;Content-Type&lt;/code&gt; header to indicate the particular character set that should be used to correctly render the information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7753822caf031c3782f667e0c01781f61691371" translate="yes" xml:space="preserve">
          <source>To create Apache SHA1-variant basic-authentication passwords in various languages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045680397a4569aa017ba74d93eab8ee145ab706" translate="yes" xml:space="preserve">
          <source>To create Apache digest-authentication passwords in various languages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3a3ce6eb76d2147c44e5759e7ba4d471846090" translate="yes" xml:space="preserve">
          <source>To create the file, type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e1fc6d8f0279adbc5ce022eda3d5db4ff7a06c" translate="yes" xml:space="preserve">
          <source>To create the file, use the &lt;code&gt;&lt;a href=&quot;../programs/htpasswd&quot;&gt;htpasswd&lt;/a&gt;&lt;/code&gt; utility that came with Apache. This will be located in the &lt;code&gt;bin&lt;/code&gt; directory of wherever you installed Apache. If you have installed Apache from a third-party package, it may be in your execution path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fdba33d71c02a85c07c051f406c545755125e3" translate="yes" xml:space="preserve">
          <source>To enable &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt;, add the following to a container in your &lt;code&gt;httpd.conf&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182cee3d11523219a669a8aef9e762006ca4745c" translate="yes" xml:space="preserve">
          <source>To enable a user to log out of a particular session, configure a page to be handled by the &lt;var&gt;form-logout-handler&lt;/var&gt;. Any attempt to access this URL will cause the username and password to be removed from the current session, effectively logging the user out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc80afd2ab872401efda11231a3b5efc71b49df9" translate="yes" xml:space="preserve">
          <source>To enable body preservation, add three additional fields to the login form as per the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2469cd8e9057d17dbb3f6a648f369ba2cf4a21" translate="yes" xml:space="preserve">
          <source>To enable the module, it should be compiled and loaded in to your running Apache configuration. Logging can then be enabled or disabled separately for input and output via the below directives. Additionally, &lt;code&gt;&lt;a href=&quot;mod_dumpio&quot;&gt;mod_dumpio&lt;/a&gt;&lt;/code&gt; needs to be configured to &lt;code&gt;&lt;a href=&quot;core#loglevel&quot;&gt;LogLevel&lt;/a&gt;&lt;/code&gt;&lt;code&gt;trace7&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d573cbfeefe2aade62109fed25d647d672917d" translate="yes" xml:space="preserve">
          <source>To enable this module, LDAP support must be compiled into apr-util. This is achieved by adding the &lt;code&gt;--with-ldap&lt;/code&gt; flag to the &lt;code&gt;&lt;a href=&quot;../programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; script when building Apache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6e03e305cb93de1fb946c2246f50712d910835" translate="yes" xml:space="preserve">
          <source>To ensure that and &lt;code&gt;Location:&lt;/code&gt; headers generated from the backend are modified to point to the reverse proxy, instead of back to itself, the &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy#proxypassreverse&quot;&gt;ProxyPassReverse&lt;/a&gt;&lt;/code&gt; directive is most often required:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea6bbdae62e9a105448b1f3ff5e3ed258499a74" translate="yes" xml:space="preserve">
          <source>To find which directives can be placed in &lt;code&gt;.htaccess&lt;/code&gt; files, check the Context of the directive. The server administrator further controls what directives may be placed in &lt;code&gt;.htaccess&lt;/code&gt; files by configuring the &lt;code&gt;&lt;a href=&quot;mod/core#allowoverride&quot;&gt;AllowOverride&lt;/a&gt;&lt;/code&gt; directive in the main configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b336ecbea6e4c598d870ad83fdf4eedcc03cea" translate="yes" xml:space="preserve">
          <source>To get here means no variant was selected (because none are acceptable to the browser). Return a 406 status (meaning &quot;No acceptable representation&quot;) with a response body consisting of an HTML document listing the available variants. Also set the HTTP &lt;code&gt;Vary&lt;/code&gt; header to indicate the dimensions of variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3218dea781ae0951f1b4ac18b90767b4d309eec4" translate="yes" xml:space="preserve">
          <source>To get the most from this document, you should be familiar with the basics of HTTP, and have read the Users' Guides to &lt;a href=&quot;urlmapping&quot;&gt;Mapping URLs to the Filesystem&lt;/a&gt; and &lt;a href=&quot;content-negotiation&quot;&gt;Content negotiation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acb4ae56ff082edf87297ba6ab4e529d13a74e1" translate="yes" xml:space="preserve">
          <source>To give you an overview of the DSO features of Apache HTTP Server 2.x, here is a short and concise summary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c2de7e53d544d80edabe53b8514c8818792d14" translate="yes" xml:space="preserve">
          <source>To have such configuration changes take effect, it is necessary to stop and then start the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7903a722014ee25818c678f5c1dfde4fe0ffdfe5" translate="yes" xml:space="preserve">
          <source>To have these changes persist restarts of the reverse proxy, ensure that &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy#balancerpersist&quot;&gt;BalancerPersist&lt;/a&gt;&lt;/code&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2c40264a61b937cc87b76731a0b98391062faa" translate="yes" xml:space="preserve">
          <source>To illustrate this point we can think about the following two situations: serving a static asset (like a CSS file) versus serving content retrieved from FCGI/CGI or a proxied server. The former is predictable, namely the event MPM has full visibility on the end of the content and it can use events: the worker thread serving the response content can flush the first bytes until &lt;code&gt;EWOULDBLOCK&lt;/code&gt; or &lt;code&gt;EAGAIN&lt;/code&gt; is returned, delegating the rest to the listener. This one in turn waits for an event on the socket, and delegates the work to flush the rest of the content to the first idle worker thread. Meanwhile in the latter example (FCGI/CGI/proxied content) the MPM can't predict the end of the response and a worker thread has to finish its work before returning the control to the listener. The only alternative is to buffer the response in memory, but it wouldn't be the safest option for the sake of the server's stability and memory footprint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78dcdf1b1c3754a8fe8469fdb3fc37ab70dd4848" translate="yes" xml:space="preserve">
          <source>To implement authentication, you must also use the &lt;code&gt;&lt;a href=&quot;#authname&quot;&gt;AuthName&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directives. In addition, the server must have an authentication-provider module such as &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt; and an authorization module such as &lt;code&gt;&lt;a href=&quot;mod_authz_user&quot;&gt;mod_authz_user&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e448f80dd5f001a27e43f7e4fd984a2d3c344e" translate="yes" xml:space="preserve">
          <source>To include extensions associated with Handlers and/or Filters, set the &lt;code&gt;MultiviewsMatch&lt;/code&gt; directive to either &lt;code&gt;Handlers&lt;/code&gt;, &lt;code&gt;Filters&lt;/code&gt;, or both option keywords. If all other factors are equal, the smallest file will be served, &lt;em&gt;e.g.&lt;/em&gt; in deciding between &lt;code&gt;index.html.cgi&lt;/code&gt; of 500 bytes and &lt;code&gt;index.html.pl&lt;/code&gt; of 1000 bytes, the &lt;code&gt;.cgi&lt;/code&gt; file would win in this example. Users of &lt;code&gt;.asis&lt;/code&gt; files might prefer to use the Handler option, if &lt;code&gt;.asis&lt;/code&gt; files are associated with the &lt;code&gt;asis-handler&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5ee247416354296edca1eccbb94a41cc7c6ea3" translate="yes" xml:space="preserve">
          <source>To include the example_hooks module in your server, follow the steps below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9ecba37f809ee5b89772b759b597661ae33eda" translate="yes" xml:space="preserve">
          <source>To isolate the damage a wayward SSI file can cause, a server administrator can enable &lt;a href=&quot;../suexec&quot;&gt;suexec&lt;/a&gt; as described in the &lt;a href=&quot;#cgi&quot;&gt;CGI in General&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762f9ba58761fb86d477f8f118e72fc863495ee5" translate="yes" xml:space="preserve">
          <source>To keep the thundering herd at bay, the &lt;code&gt;CacheLock&lt;/code&gt; directive can be used to define a directory in which locks are created for URLs &lt;strong&gt;in flight&lt;/strong&gt;. The lock is used as a &lt;strong&gt;hint&lt;/strong&gt; by other requests to either suppress an attempt to cache (someone else has gone to fetch the entity), or to indicate that a stale entry is being refreshed (stale content will be returned in the mean time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7656f1aa9b97c31f048b70b023551d86f29da7b5" translate="yes" xml:space="preserve">
          <source>To keep up-to-date with what is actually going on against your server you have to check the &lt;a href=&quot;../logs&quot;&gt;Log Files&lt;/a&gt;. Even though the log files only reports what has already happened, they will give you some understanding of what attacks is thrown against the server and allow you to check if the necessary level of security is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcc7c4c6458d7cc35d034239fd79caf299e2b8c" translate="yes" xml:space="preserve">
          <source>To make the server accept connections on port 80 for one interface, and port 8000 on another, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d329fbd9ee949d381adbeb366fb07a3dd9cef1e" translate="yes" xml:space="preserve">
          <source>To make this practical, Active Directory supports the concept of a Global Catalog. This Global Catalog is a read only copy of selected attributes of all the Active Directory servers within the Active Directory forest. Querying the Global Catalog allows all the domains to be queried in a single query, without the query spanning servers over potentially slow links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b798e1ed517af1df1cc6f96e3ee1b4a7036db5" translate="yes" xml:space="preserve">
          <source>To mitigate this problem, the event MPM does two things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157ca9928914dfe920691a84e2f951eda59cc8dc" translate="yes" xml:space="preserve">
          <source>To modify &lt;code&gt;Cache-Control&lt;/code&gt; directives other than &lt;code&gt;max-age&lt;/code&gt; (see &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9&quot;&gt;RFC 2616 section 14.9&lt;/a&gt;), you can use the &lt;code&gt;&lt;a href=&quot;mod_headers#header&quot;&gt;Header&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42292ef87e73ccf50a544056732eaf189cf530c6" translate="yes" xml:space="preserve">
          <source>To permit SSI on your server, you must have the following directive either in your &lt;code&gt;httpd.conf&lt;/code&gt; file, or in a &lt;code&gt;.htaccess&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a19c55a9d3596d8a8affa242cf47664f56ae9d7" translate="yes" xml:space="preserve">
          <source>To protect a particular URL with &lt;code&gt;&lt;a href=&quot;mod_auth_form&quot;&gt;mod_auth_form&lt;/a&gt;&lt;/code&gt;, you need to decide where you will store your &lt;var&gt;session&lt;/var&gt;, and you will need to decide what method you will use to authenticate. In this simple example, the login details will be stored in a session based on &lt;code&gt;&lt;a href=&quot;mod_session_cookie&quot;&gt;mod_session_cookie&lt;/a&gt;&lt;/code&gt;, and authentication will be attempted against a file using &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt;. If authentication is unsuccessful, the user will be redirected to the form login page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc3bec07d3e7768634f2aa02e9c9dd86d2fb4c8" translate="yes" xml:space="preserve">
          <source>To put a literal dollar sign into the value of your variable, you need to escape the dollar sign with a backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09df7bcd0dc662983a8bf628e3d06f68f05716f1" translate="yes" xml:space="preserve">
          <source>To run a really tight ship, you'll want to stop users from setting up &lt;code&gt;.htaccess&lt;/code&gt; files which can override security features you've configured. Here's one way to do it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699144c468fd11494ee7f64644845fe7e6887000" translate="yes" xml:space="preserve">
          <source>To see which modules are currently compiled into the server, you can use the &lt;code&gt;-l&lt;/code&gt; command line option. You can also see what modules are loaded dynamically using the &lt;code&gt;-M&lt;/code&gt; command line option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9f8bc4cba6c64c8f61632ca1e72f1c13319493" translate="yes" xml:space="preserve">
          <source>To select a dbm file rather than a text file, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa1972d6987928d23dcd8a0e53fd7ed64679667" translate="yes" xml:space="preserve">
          <source>To simplify this creation of DSO files for Apache httpd modules (especially for third-party modules) a support program named &lt;code&gt;&lt;a href=&quot;programs/apxs&quot;&gt;apxs&lt;/a&gt;&lt;/code&gt; (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c52e87c1510323ef72c04725156f66c3af6c23d" translate="yes" xml:space="preserve">
          <source>To solve this problem the &lt;code&gt;&lt;a href=&quot;#cachequickhandler&quot;&gt;CacheQuickHandler &lt;/a&gt;&lt;/code&gt; directive can be set to &lt;strong&gt;off&lt;/strong&gt;, and the server will process all phases normally handled by a non-cached request, including the &lt;strong&gt;authentication and authorisation&lt;/strong&gt; phases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5473d5eef5c07786c8855a4cef0c088a9fdb0499" translate="yes" xml:space="preserve">
          <source>To specify a secure LDAP server, use &lt;em&gt;ldaps://&lt;/em&gt; in the &lt;code&gt;&lt;a href=&quot;#authldapurl&quot;&gt;AuthLDAPURL&lt;/a&gt;&lt;/code&gt; directive, instead of &lt;em&gt;ldap://&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df710c46cd46d08d41a2d1278fd5b1929ed24dd8" translate="yes" xml:space="preserve">
          <source>To store items in the cache, &lt;code&gt;&lt;a href=&quot;mod/mod_cache_disk&quot;&gt;mod_cache_disk&lt;/a&gt;&lt;/code&gt; creates a 22 character hash of the URL being requested. This hash incorporates the hostname, protocol, port, path and any CGI arguments to the URL, as well as elements defined by the Vary header to ensure that multiple URLs do not collide with one another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639e4d4301c496c3de0bf2dc7248947a094b8bda" translate="yes" xml:space="preserve">
          <source>To summarize: there is no one good strategy on how to make best use of this feature of HTTP/2 and everyone is still experimenting. So, how do you experiment with it in Apache httpd?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d55c7f5a8d73597c5eb961e243f5e8118a1c50" translate="yes" xml:space="preserve">
          <source>To support such integration, &lt;code&gt;&lt;a href=&quot;mod_authz_dbd&quot;&gt;mod_authz_dbd&lt;/a&gt;&lt;/code&gt; exports an optional hook that will be run whenever a user's status is updated in the database. Other session management modules can then use the hook to implement functions that start and end client-side sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a9393b963e98e14c86c3919a99f0cb1c68d1a8" translate="yes" xml:space="preserve">
          <source>To take authorization a little further, authorization container directives such as &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireany&quot;&gt;&amp;lt;RequireAny&amp;gt;&lt;/a&gt;&lt;/code&gt; allow logic to be applied so that the order in which authorization is handled can be completely controlled through the configuration. See &lt;a href=&quot;../mod/mod_authz_core#logic&quot;&gt;Authorization Containers&lt;/a&gt; for an example of how they may be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d589d2292e7fe720f4b7b77113e6564acabac351" translate="yes" xml:space="preserve">
          <source>To unconditionally set the &lt;code&gt;IndexOptions&lt;/code&gt; for a particular directory, clearing the inherited settings, specify keywords without any &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; prefixes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6577bb24f5019301626e06fb78c6c1882a7e0157" translate="yes" xml:space="preserve">
          <source>To upgrade across minor versions, start by finding the file &lt;code&gt;config.nice&lt;/code&gt; in the &lt;code&gt;build&lt;/code&gt; directory of your installed server or at the root of the source tree for your old install. This will contain the exact &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; command line that you used to configure the source tree. Then to upgrade from one version to the next, you need only copy the &lt;code&gt;config.nice&lt;/code&gt; file to the source tree of the new version, edit it to make any desired changes, and then run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c71862e30cf7731f8f67a2d1991ffd508d3e94" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;mod_heartbeat&quot;&gt;mod_heartbeat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_watchdog&quot;&gt;mod_watchdog&lt;/a&gt;&lt;/code&gt; must be either a static modules or, if a dynamic module, must be loaded before &lt;code&gt;&lt;a href=&quot;mod_heartbeat&quot;&gt;mod_heartbeat&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69054e97cf44134bfd981043149588f945cffda" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;mod_heartmonitor&quot;&gt;mod_heartmonitor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_watchdog&quot;&gt;mod_watchdog&lt;/a&gt;&lt;/code&gt; must be either a static modules or, if a dynamic module, it must be loaded before &lt;code&gt;&lt;a href=&quot;mod_heartmonitor&quot;&gt;mod_heartmonitor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aeed9a030e20e6e2cfc2401094ef20527051ce7" translate="yes" xml:space="preserve">
          <source>To use MD5 Digest authentication, configure the location to be protected as shown in the below example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258a144d6cd7be0ecdf5ca997064538fc3096771" translate="yes" xml:space="preserve">
          <source>To use SSL, see the &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; directives &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedclientcert&quot;&gt;LDAPTrustedClientCert&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedglobalcert&quot;&gt;LDAPTrustedGlobalCert&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedmode&quot;&gt;LDAPTrustedMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60315d0a6bae435aacbbe5e68775fea19e13900" translate="yes" xml:space="preserve">
          <source>To use TLS, see the &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; directives &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedclientcert&quot;&gt;LDAPTrustedClientCert&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedglobalcert&quot;&gt;LDAPTrustedGlobalCert&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedmode&quot;&gt;LDAPTrustedMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050a6f474a5fdc6c7dfd2fbcc68597532ea9ff26" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;&lt;a href=&quot;event&quot;&gt;event&lt;/a&gt;&lt;/code&gt; MPM, add &lt;code&gt;--with-mpm=event&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; script's arguments when building the &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c81113e199927aa704f4f9c8d2ce564b597364" translate="yes" xml:space="preserve">
          <source>To use this MPM on FreeBSD, FreeBSD 5.3 or higher is recommended. However, it is possible to run this MPM on FreeBSD 5.2.1, if you use &lt;code&gt;libkse&lt;/code&gt; (see &lt;code&gt;man libmap.conf&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24736ae3b9422ad77cdb4357449ee81ed8ae0e9" translate="yes" xml:space="preserve">
          <source>To use this, the untainting regexps must be included in the prepared statements configured. The regexp follows immediately after the % in the prepared statement, and is enclosed in curly brackets {}. For example, if your application expects alphanumeric input, you can use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72fa84af46bc9d835ddf906a29631f93fa380501" translate="yes" xml:space="preserve">
          <source>To utilize &lt;code&gt;&lt;a href=&quot;mod_dbd&quot;&gt;mod_dbd&lt;/a&gt;&lt;/code&gt;, specify &lt;code&gt;mod_dbd&lt;/code&gt; as the database type, or leave the field blank:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b49c9d742b1e014e3af8aeff5d8f5f1ac8e5c35" translate="yes" xml:space="preserve">
          <source>Today's date</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ae9a69b52ee1d2d7ff3069401bb6b276d07830" translate="yes" xml:space="preserve">
          <source>Together with microsecond time stamps in the error log, &lt;code&gt;hook=all&lt;/code&gt; also lets you determine the times spent in the different parts of the request processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cd8a58c1edd9b705d833e869e749b1a1ed4386" translate="yes" xml:space="preserve">
          <source>Toggle how this module responds when another handler is configured</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562f741feaf7d5724c94bd871528311dd23f0f92" translate="yes" xml:space="preserve">
          <source>Toggle trailing slash redirects on or off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2205898b40d1e64bc7d4cb3f660785bc52cc5b9" translate="yes" xml:space="preserve">
          <source>Too Long, Didn't read: there are some new terms and gotchas that need to be kept in mind while reading this document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808f893e73cc981bc2c8b64ecc66ee450b38f6f8" translate="yes" xml:space="preserve">
          <source>Trace messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08cc43b94efc06d02340423901b5e9e0a3cb68f9" translate="yes" xml:space="preserve">
          <source>Trace messages, dumping large amounts of data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e9a5452eaa72a6178ccbc740d56527c03e1f6f" translate="yes" xml:space="preserve">
          <source>TraceEnable Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076fae5ce92c7838f41e901cfce2782e4c2800c9" translate="yes" xml:space="preserve">
          <source>Tracing another filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e342ec72105b478f8ab15ca8109a00e1d2cbcc" translate="yes" xml:space="preserve">
          <source>TrackModified</source>
          <target state="translated">TrackModified</target>
        </trans-unit>
        <trans-unit id="2593c9997a65ff6676fc83cbe0f36eb62aed8480" translate="yes" xml:space="preserve">
          <source>TransferLog Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be78681cb8f6ab02e3f5e886135377df19211222" translate="yes" xml:space="preserve">
          <source>Translate name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="4d9008135bc49400f326e9ca45a63a626bd4a4ae" translate="yes" xml:space="preserve">
          <source>True if string is a valid URL, accessible via all the server's currently-configured access controls for that path. This uses an internal subrequest to do the check, so use it with care - it can impact your server's performance!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39229ca01d32be512c0b372abaf3036235c9d942" translate="yes" xml:space="preserve">
          <source>True if string is a valid file, accessible via all the server's currently-configured access controls for that path. This uses an internal subrequest to do the check, so use it with care - it can impact your server's performance!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dad48b3aa7fd78217e248e12fabe06c03f9355f" translate="yes" xml:space="preserve">
          <source>True if string is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab48a95d87010b23ff91b2f8d3d3f5e56067199" translate="yes" xml:space="preserve">
          <source>True if string is not empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d725c138651d1230e691502a875fbbe6b99038" translate="yes" xml:space="preserve">
          <source>Trying to start the server on a privileged port when not logged in as the root user; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b0cfd7bfe6127e6f846f339ea5739c54d52d8b" translate="yes" xml:space="preserve">
          <source>Trying to start the server when there is another instance of Apache or some other web server already bound to the same Port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ce75541918c8556fe2065df43b41e423b9d315" translate="yes" xml:space="preserve">
          <source>Tune the &lt;code&gt;&lt;a href=&quot;../mod/mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; directive to allow the server to handle the maximum number of simultaneous connections without running out of resources. See also the &lt;a href=&quot;perf-tuning&quot;&gt;performance tuning documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970b53a4b8a2efafdc75d8c56d35b38d6d1eb325" translate="yes" xml:space="preserve">
          <source>Tuning &lt;code&gt;AsyncRequestWorkerFactor&lt;/code&gt; requires knowledge about the traffic handled by httpd in each specific use case, so changing the default value requires extensive testing and data gathering from &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71d317718fcf5a9a61b3b9c263ea1125a04d4ba" translate="yes" xml:space="preserve">
          <source>Turn the echo server on or off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474b0585f4d81e20c4918ffc9c1c47c63541b070" translate="yes" xml:space="preserve">
          <source>Turning &lt;code&gt;AllowEncodedSlashes&lt;/code&gt;&lt;code&gt;On&lt;/code&gt; is mostly useful when used in conjunction with &lt;code&gt;PATH_INFO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3750b7873b224ec7b935b44d7693f8b95a5ef5eb" translate="yes" xml:space="preserve">
          <source>Turning off the trailing slash redirect may result in an information disclosure. Consider a situation where &lt;code&gt;&lt;a href=&quot;mod_autoindex&quot;&gt;mod_autoindex&lt;/a&gt;&lt;/code&gt; is active (&lt;code&gt;Options +Indexes&lt;/code&gt;) and &lt;code&gt;&lt;a href=&quot;#directoryindex&quot;&gt;DirectoryIndex&lt;/a&gt;&lt;/code&gt; is set to a valid resource (say, &lt;code&gt;index.html&lt;/code&gt;) and there's no other special handler defined for that URL. In this case a request with a trailing slash would show the &lt;code&gt;index.html&lt;/code&gt; file. &lt;strong&gt;But a request without trailing slash would list the directory contents&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5427e53ad3282340f5fa474ad97edf34ef2370c" translate="yes" xml:space="preserve">
          <source>Turns on SDK-specific LDAP debug options that generally cause the LDAP SDK to log verbose trace information to the main Apache error log. The trace messages from the LDAP SDK provide gory details that can be useful during debugging of connectivity problems with backend LDAP servers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85a660e05810d60d2fc2a2d0c12fd9dd8f8c757" translate="yes" xml:space="preserve">
          <source>Turns on/off Meta file processing on a per-directory basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="translated">チュートリアル</target>
        </trans-unit>
        <trans-unit id="2ffdcbf97222df160f036532acf2ad673889d44a" translate="yes" xml:space="preserve">
          <source>Two special values for this are &lt;var&gt;directory&lt;/var&gt;, which uses the directory context of the request as a string, and &lt;var&gt;server&lt;/var&gt; which uses the virtual host name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ceef5832db9f1bf9c91e4bfe23d8196a9b64542" translate="yes" xml:space="preserve">
          <source>Two useful configuration schemes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea09d621768f6e418bcf166744b5a590a61ef14b" translate="yes" xml:space="preserve">
          <source>Two-state key/value shared object caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612d05b633162ff29d69b22d8c50596ca85d1dd6" translate="yes" xml:space="preserve">
          <source>Type map files should have the same name as the resource which they are describing, followed by the extension &lt;code&gt;.var&lt;/code&gt;. In the examples shown below, the resource is named &lt;code&gt;foo&lt;/code&gt;, so the type map file is named &lt;code&gt;foo.var&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fe15b42d04e7efdb397282c33468e43e7445e7" translate="yes" xml:space="preserve">
          <source>Type maps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3106ffe2cde6c3150d342a301b18e5eb61ad3d0" translate="yes" xml:space="preserve">
          <source>Type of ACME challenge used to prove domain ownership.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465871df0034df0da57ba1a9445ee210be7aa78a" translate="yes" xml:space="preserve">
          <source>Type of user authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f57f6e35bda65357e7a736d4afaf1ecfe029671" translate="yes" xml:space="preserve">
          <source>Types of directives that are allowed in &lt;code&gt;.htaccess&lt;/code&gt; files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824a7da375016dbb41ec05795d7c1c47deba752a" translate="yes" xml:space="preserve">
          <source>TypesConfig Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98102d2f4af9b93a203b000e12715e3ccd9ec5c" translate="yes" xml:space="preserve">
          <source>Typically if a user requests a resource without a trailing slash, which points to a directory, &lt;code&gt;&lt;a href=&quot;mod_dir&quot;&gt;mod_dir&lt;/a&gt;&lt;/code&gt; redirects him to the same resource, but &lt;em&gt;with&lt;/em&gt; trailing slash for some good reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf109dfb65fe4587c1cf283360fbf1341c70ef2" translate="yes" xml:space="preserve">
          <source>Typically the module will be configured as so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9b502446474b568c0d36fd078ae604992db123" translate="yes" xml:space="preserve">
          <source>Typically the module will be configured as so;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3568e74e1ad6bbdb8c37358940d6fc97e1b1ed31" translate="yes" xml:space="preserve">
          <source>Typically, a document called &lt;code&gt;index.html&lt;/code&gt; will be served when a directory is requested without a file name being specified. For example, if &lt;code&gt;DocumentRoot&lt;/code&gt; is set to &lt;code&gt;/var/www/html&lt;/code&gt; and a request is made for &lt;code&gt;http://www.example.com/work/&lt;/code&gt;, the file &lt;code&gt;/var/www/html/work/index.html&lt;/code&gt; will be served to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535642d55022835824a32fddeb814b6614eb90c6" translate="yes" xml:space="preserve">
          <source>URI Mapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa3741ac5898eea823ba4ab3c035108a14cae3c" translate="yes" xml:space="preserve">
          <source>URIs from clients can't be mapped, such as with the &lt;code&gt;ProxyPass&lt;/code&gt; used with FastCGI responders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6774dfcefd05f2417727433a9029ab969c55ab" translate="yes" xml:space="preserve">
          <source>URIs in this file are relative to the location of the type map file. Usually, these files will be located in the same directory as the type map file, but this is not required. You may provide absolute or relative URIs for any file located on the same server as the map file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2423519dbb51265337f3714ca5660d2c024bd60b" translate="yes" xml:space="preserve">
          <source>URIs that are in the same protection space for digest authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c919eda41ea0d09dc4373f05b23a1ec622e04f94" translate="yes" xml:space="preserve">
          <source>URL Rewriting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304856a39b09bddcc5eab947bdaf620019c824a6" translate="yes" xml:space="preserve">
          <source>URL Rewriting with mod_rewrite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9328508222e4233ca14d21d6efb610ca868a3d2c" translate="yes" xml:space="preserve">
          <source>URL references relative to the Referer: information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252e22c1fe5164dfdf67a2d7533c44502234a9f7" translate="yes" xml:space="preserve">
          <source>URL specifying the LDAP search parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8c2c8daaadc4fed6bd196801e53909710da195" translate="yes" xml:space="preserve">
          <source>URLs can begin with a slash (/) for local web-paths (relative to the &lt;code&gt;&lt;a href=&quot;#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt;), or be a full URL which the client can resolve. Alternatively, a message can be provided to be displayed by the browser. Note that deciding whether the parameter is an URL, a path or a message is performed before any expression is parsed. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a86809204b9eb87dfff3cb2c76f548e30f74894" translate="yes" xml:space="preserve">
          <source>UWSGI gateway module for &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acccefd8d11359e59ad4ed472d2d476e53d39965" translate="yes" xml:space="preserve">
          <source>Ultimately, every stream depends on the &lt;em&gt;root&lt;/em&gt; stream which gets all the bandwidth available, but never sends anything. So all its bandwidth is distributed by weight among its children. Which either have data to send or distribute the bandwidth to their own children. And so on. If none of the children have data to send, that bandwidth get distributed somewhere else according to the same rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae069022daa8cf2f9c10bfb675fca326b3af9d0e" translate="yes" xml:space="preserve">
          <source>Ultimately, the security of the TLS connection is determined by the server configuration directives for &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29c2d4a1e91040c9d4889c5b2c13fe0de94587c" translate="yes" xml:space="preserve">
          <source>UnDefine Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca09f5dbf89ea3eafb5ab27f217efe0b06a097c4" translate="yes" xml:space="preserve">
          <source>Unary operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cbf6795a0720a0a94088dbbf8156ccd08cff96" translate="yes" xml:space="preserve">
          <source>Unary operators take one argument and have the form &quot;&lt;code&gt;-[a-zA-Z]&lt;/code&gt;&quot;, i.e. a minus and one character. The name &lt;em&gt;is&lt;/em&gt; case sensitive. Modules may register additional unary operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26dc99c135c728be6b2dd94320941652f9b7df53" translate="yes" xml:space="preserve">
          <source>Uncommenting this &lt;code&gt;Include&lt;/code&gt; line will enable this feature, and provide language-negotiated error messages, based on the language preference set in the client browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b865e1ccc7dc82e74ac1164b10f13eb942aab8c3" translate="yes" xml:space="preserve">
          <source>UndefMacro Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ed1373b1750bb1d2c334614f3df969f01c47af" translate="yes" xml:space="preserve">
          <source>Undefine a macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a13a0ebb99d34b7ea00b2c12fce85f5bfc4b78e" translate="yes" xml:space="preserve">
          <source>Undefine the existence of a variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410bebc1497e5083ec2348210769e9d65d7793b0" translate="yes" xml:space="preserve">
          <source>Under certain circumstances, content generators might create content in small chunks. In order to promote memory reuse, in memory chunks are always 8k in size, regardless of the size of the chunk itself. When many small chunks are generated by a request, this can create a large memory footprint while the request is being processed, and an unnecessarily large amount of data on the wire. The addition of a buffer collapses the response into the fewest chunks possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b89a7126d9a36f75b767d46682b9ec4e1639e2" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, a file filtered by &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; may contain elements that are either dynamically generated, or that may have changed independently of the original file. As a result, by default the &lt;code&gt;Last-Modified&lt;/code&gt; header is stripped from the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85578f038078576ed54428d5d20efba93ff680ff" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, a file filtered by &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; may contain elements that are either dynamically generated, or that may have changed independently of the original file. As a result, by default the server is asked not to generate an &lt;code&gt;ETag&lt;/code&gt; header for the response by adding &lt;code&gt;no-etag&lt;/code&gt; to the request notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2120d3cb8999960c184f3989bd7bca7e52cd73c" translate="yes" xml:space="preserve">
          <source>Under normal conditions, the value should not be changed from the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3139dc3828cd21e146f9a6fa5159c769b4725c37" translate="yes" xml:space="preserve">
          <source>Under normal operation, &lt;code&gt;&lt;a href=&quot;mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will respond to and can be controlled by the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9&quot;&gt;Cache-Control&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32&quot;&gt;Pragma&lt;/a&gt; headers sent from a client in a request, or from a server within a response. Under exceptional circumstances, &lt;code&gt;&lt;a href=&quot;mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; can be configured to override these headers and force site specific behaviour, however such behaviour will be limited to this cache only, and will not affect the operation of other caches that may exist between the client and server, and as a result is not recommended unless strictly necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f382b0df66049577fb119c5e1ad1f5dc385ad40e" translate="yes" xml:space="preserve">
          <source>Under the default mode of cache operation, the cache runs as a quick handler, short circuiting the majority of server processing and offering the highest cache performance available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb702a57626c1241070ba66e3cac145424c1d3eb" translate="yes" xml:space="preserve">
          <source>Underlying peer IP address and port of the connection (see the &lt;code&gt;&lt;a href=&quot;mod_remoteip&quot;&gt;mod_remoteip&lt;/a&gt;&lt;/code&gt; module)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c66e7f581b0cbb54c3cd8850d9abd2333847c51" translate="yes" xml:space="preserve">
          <source>Underlying peer IP address of the connection (see the &lt;code&gt;&lt;a href=&quot;mod_remoteip&quot;&gt;mod_remoteip&lt;/a&gt;&lt;/code&gt; module).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774ce89a80bf3b68d6addd6d79403ff98662a3de" translate="yes" xml:space="preserve">
          <source>Understanding the Cache-Store</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a65c22ae3e2fdb67baa5a8173a144cc8f3b046" translate="yes" xml:space="preserve">
          <source>Undoes the effect of a &lt;code&gt;&lt;a href=&quot;#define&quot;&gt;Define&lt;/a&gt;&lt;/code&gt; or of passing a &lt;code&gt;-D&lt;/code&gt; argument to &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9327dd8ecfe0bc1796a12cfcd800c9b5f8e983f" translate="yes" xml:space="preserve">
          <source>Unescape %hex encoded string, leaving encoded slashes alone; return empty string if %00 is found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2382afaad1cca3f3e56e2165c99c3a388acd3d48" translate="yes" xml:space="preserve">
          <source>Unique Identifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e120c4aa47b4bf36ab9043fbdf1d26d4d53842cd" translate="yes" xml:space="preserve">
          <source>Unix only. Uses the traditional Unix &lt;code&gt;crypt(3)&lt;/code&gt; function with a randomly-generated 32-bit salt (only 12 bits used) and the first 8 characters of the password. Insecure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797f223f5cd30cf21120a5e052bfecb165c97cee" translate="yes" xml:space="preserve">
          <source>Unix threaded MPMs only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19450dbe0a6e0010921dda4d307a61720e8f1292" translate="yes" xml:space="preserve">
          <source>Unless you fully understand suexec, you should not be using it. To disable suexec, simply remove (or rename) the &lt;code&gt;&lt;a href=&quot;../programs/suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; binary pointed to by &lt;code&gt;SUEXEC_BIN&lt;/code&gt; and then restart the server. If, after reading about &lt;a href=&quot;../suexec&quot;&gt;suexec&lt;/a&gt;, you still wish to use it, then run &lt;code&gt;suexec -V&lt;/code&gt; to find the location of the suexec log file, and use that log file to find what policy you are violating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52bed01a250ebca05166315a8fbcf39dfb32fcd" translate="yes" xml:space="preserve">
          <source>Unlike a simple two state key/value cache where the content disappears completely when no longer fresh, an HTTP cache includes a mechanism to retain stale content, and to ask the origin server whether this stale content has changed and if not, make it fresh again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b896f27689d4707adc7b33e08a332f87002fd1" translate="yes" xml:space="preserve">
          <source>UnsetEnv Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dd3a1d8ed51cf30314c15a934d4cae0718aa5a" translate="yes" xml:space="preserve">
          <source>Upgrading</source>
          <target state="translated">Upgrading</target>
        </trans-unit>
        <trans-unit id="ddddb814d628f115c9ad740b29435e854d1ca264" translate="yes" xml:space="preserve">
          <source>Upgrading from Apache HTTP Server 2.2 Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd06e7c9297770b28d518bfbd8d60fca78794c7" translate="yes" xml:space="preserve">
          <source>Upgrading from one minor version to the next (for example, from 2.2.55 to 2.2.57) is easier. The &lt;code&gt;make install&lt;/code&gt; process will not overwrite any of your existing documents, log files, or configuration files. In addition, the developers make every effort to avoid incompatible changes in the &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; options, run-time configuration, or the module API between minor versions. In most cases you should be able to use an identical &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; command line, an identical configuration file, and all of your modules should continue to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77437a6a78eef28946b47fc879888798b29e18b1" translate="yes" xml:space="preserve">
          <source>Upgrading to 2.4 from 2.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762afa4dc77003d1898619977996501879337c3c" translate="yes" xml:space="preserve">
          <source>Upon accepting the connection, the listener thread wakes up a worker thread to do the request processing. In this trace, the worker thread that handles the request is mapped to LWP #65.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="de588646df16f9419dd97e9327b5a5f7d6cffcaa" translate="yes" xml:space="preserve">
          <source>Usage Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a639bcd17ebccc1985bbeb0e6ab64c278e4a072" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;Location&amp;gt;&lt;/code&gt; to apply directives to content that lives outside the filesystem. For content that lives in the filesystem, use &lt;code&gt;&lt;a href=&quot;#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt;. An exception is &lt;code&gt;&amp;lt;Location &quot;/&quot;&amp;gt;&lt;/code&gt;, which is an easy way to apply a configuration to the entire server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269c74cbf596690e82e2e606112127fa8c545a9d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;mode=output&lt;/code&gt; (the default) for filters which process the response. Use &lt;code&gt;mode=input&lt;/code&gt; for filters which process the request. &lt;code&gt;mode=input&lt;/code&gt; is available in Apache 2.1 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08780f7560031c6c20c5dde3e42e3cb2ea5f43bc" translate="yes" xml:space="preserve">
          <source>Use Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb70ab11c127b6f2c83cf4063b9a63fe0074c33" translate="yes" xml:space="preserve">
          <source>Use a case-insensitive match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9169376cd9801e6bdcf0f0c79749db3c5480acc4" translate="yes" xml:space="preserve">
          <source>Use a complete list of options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c993019331704737a050c847e49ffe0d561787a7" translate="yes" xml:space="preserve">
          <source>Use a http proxy to connect to the MDCertificateAuthority. Define this if your webserver can only reach the internet with a forward proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56af3238c208cda925f5035ad83f97cbcaa36859" translate="yes" xml:space="preserve">
          <source>Use a macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d545374a02d6d86e0b9a077721f9a1b62274fa4f" translate="yes" xml:space="preserve">
          <source>Use memory-mapping to read files during delivery</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aac443414afab5f8fa703c9dada66d31d765063" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireall&quot;&gt;RequireAll&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireany&quot;&gt;RequireAny&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requirenone&quot;&gt;RequireNone&lt;/a&gt;&lt;/code&gt; directives may be used to enforce more complex sets of requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d92cb0c463e705206253222cc0b351e846c7a7e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Dav&lt;/code&gt; directive to enable the WebDAV HTTP methods for the given container:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94edbb75528ea924d8a7b86d3d2f1f33b7fb0cf4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DavDepthInfinity&lt;/code&gt; directive to allow the processing of &lt;code&gt;PROPFIND&lt;/code&gt; requests containing the header 'Depth: Infinity'. Because this type of request could constitute a denial-of-service attack, by default it is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd1893f62d1bfd5d57b6261f869a4d290f25e7b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DavGenericLockDB&lt;/code&gt; directive to specify the full path to the lock database, excluding an extension. If the path is not absolute, it will be interpreted relative to &lt;code&gt;&lt;a href=&quot;core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt;. The implementation of &lt;code&gt;&lt;a href=&quot;mod_dav_lock&quot;&gt;mod_dav_lock&lt;/a&gt;&lt;/code&gt; uses a SDBM database to track user locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57a55634353ebfc259f85743f4a5eb312dcb1aa" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DavLockDB&lt;/code&gt; directive to specify the full path to the lock database, excluding an extension. If the path is not absolute, it will be taken relative to &lt;code&gt;&lt;a href=&quot;core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt;. The implementation of &lt;code&gt;&lt;a href=&quot;mod_dav_fs&quot;&gt;mod_dav_fs&lt;/a&gt;&lt;/code&gt; uses a SDBM database to track user locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1232db4399910db27d77dc733dfd34f14af8e1ba" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DavMinTimeout&lt;/code&gt; directive to specify, in seconds, the minimum lock timeout to return to a client. Microsoft Web Folders defaults to a timeout of 120 seconds; the &lt;code&gt;DavMinTimeout&lt;/code&gt; can override this to a higher value (like 600 seconds) to reduce the chance of the client losing the lock due to network latency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8faf5d5f4b730792d266649a56fc51e5ccc1892" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;XBitHack Full&lt;/code&gt; configuration. This tells Apache to determine the last modified date by looking only at the date of the originally requested file, ignoring the modification date of any included files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1772a450546f3fbe0f9d796de15f812dd74e9b3f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;disabled&lt;/code&gt; argument to disable that feature if inheritance from a parent directory is not desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02422afe5d38f53d8e87eb7713000781b68dcd2b" translate="yes" xml:space="preserve">
          <source>Use the DN of the client username to set the REMOTE_USER environment variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689a3c85ca66ebc841b4ca9341072e8bab711ed7" translate="yes" xml:space="preserve">
          <source>Use the DN of the client username when checking for group membership</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02a9a862447df53ec0f6e2ef7f6f807e7075083" translate="yes" xml:space="preserve">
          <source>Use the LDAP server to compare the DNs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0f1717c078404b0a1f17f0a1590c06f36d764d" translate="yes" xml:space="preserve">
          <source>Use the authenticated user's credentials to perform authorization comparisons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cb33101e2587fd3bddf4466b256bec11aa2f6c" translate="yes" xml:space="preserve">
          <source>Use the authenticated user's credentials to perform authorization searches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed3c81c87794636c110cd7ba33831ab2a2c0435" translate="yes" xml:space="preserve">
          <source>Use the directives provided by &lt;code&gt;&lt;a href=&quot;../mod/mod_expires&quot;&gt;mod_expires&lt;/a&gt;&lt;/code&gt; to set an explicit expiration time on your files, thereby letting browsers and proxies know that it is acceptable to cache them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3717fd5a15189fce0f8217ffdcc2a6a1b585a85d" translate="yes" xml:space="preserve">
          <source>Use the interpreter for the lifetime of the thread handling the request (only available with threaded MPMs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270e51954c462ddaf978e7bf6385f68d090adeca" translate="yes" xml:space="preserve">
          <source>Use the kernel sendfile support to deliver files to the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c98fc0c7d593e60f7f62f780ae68429f600185c" translate="yes" xml:space="preserve">
          <source>Use the mime.types configuration file and the &lt;code&gt;&lt;a href=&quot;mod_mime#addtype&quot;&gt;AddType&lt;/a&gt;&lt;/code&gt; to configure media type assignments via file extensions, or the &lt;code&gt;&lt;a href=&quot;#forcetype&quot;&gt;ForceType&lt;/a&gt;&lt;/code&gt; directive to configure the media type for specific resources. Otherwise, the server will send the response without a Content-Type header field and the recipient may attempt to guess the media type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3a2433caebc6298d38b43c724572ac29bd6cd2" translate="yes" xml:space="preserve">
          <source>Use the value of the attribute returned during the user query to set the REMOTE_USER environment variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9741038b043dbb8782a809e03db681a82a805211" translate="yes" xml:space="preserve">
          <source>Use this directive if you have a dedicated login URL, and you have not embedded the destination page in the login form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05200fd520c1ac0630e0170a861000243ad324bf" translate="yes" xml:space="preserve">
          <source>Use this directive if you have a dedicated login page to redirect users to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b2af266679d8b6ea9c5cffb872059220abb1c6" translate="yes" xml:space="preserve">
          <source>Use this to set a handler for any URL that doesn't map to anything in your filesystem, and would otherwise return HTTP 404 (Not Found). For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b98c8662c0d6f3f7cae3aa44d261fa885d995b" translate="yes" xml:space="preserve">
          <source>UseCanonicalName Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbc6805b1fbfc6d5c9bd24da0cd6692dfdb6e44" translate="yes" xml:space="preserve">
          <source>UseCanonicalPhysicalPort Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986a178daa2447e73c878d39636609112f5779bf" translate="yes" xml:space="preserve">
          <source>Useful tools to debug HTTP/2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aeb7b1e08c55fd31a3924a5e4bc32de4a207a39" translate="yes" xml:space="preserve">
          <source>User Authorization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabd7bc558626629a3eca4cadeb93fe192244b4c" translate="yes" xml:space="preserve">
          <source>User Directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9324c1592e951bf7034ca30193bb9836a74354c6" translate="yes" xml:space="preserve">
          <source>User authentication using DBM files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfe486e25169356df2650334dc7bce773182e3a" translate="yes" xml:space="preserve">
          <source>User authentication using MD5 Digest Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b3bd0f67cc6943e9ea5569fc302de3999781f4" translate="yes" xml:space="preserve">
          <source>User authentication using an SQL database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29c287c84a04b29926e0f28042c03a9594ad608" translate="yes" xml:space="preserve">
          <source>User authentication using text files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd83e9aef4a6292006cd1f95d365c5fcb9d8fcda" translate="yes" xml:space="preserve">
          <source>User-specific directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2b9c754c8b2569eb9aeefdc955367beb908240" translate="yes" xml:space="preserve">
          <source>UserExpr &lt;em&gt;expr&lt;/em&gt; (no default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8044b0f1d2d0886e9afa1544a649f6fa07673577" translate="yes" xml:space="preserve">
          <source>Usernames and Passwords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1deb8e9e70cba86ee05caf94304e1a125a4ad93" translate="yes" xml:space="preserve">
          <source>Users are strongly cautioned against toggling the &lt;code&gt;Unsafe&lt;/code&gt; mode of operation, particularly on outward-facing, publicly accessible server deployments. If an interface is required for faulty monitoring or other custom service consumers running on an intranet, users should toggle the Unsafe option only on a specific virtual host configured to service their internal private network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9a575de7d397efd0e880094d393eb13e33c9a4" translate="yes" xml:space="preserve">
          <source>Users will need to enter their User Principal Name as a login, in the form &lt;em&gt;somebody@nz.example.com&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bf6364d4dd69690b02a9c6538a2ab54e05c07c" translate="yes" xml:space="preserve">
          <source>Users' Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a418bd02f0103f59f54aa362c8cd71efcbce86" translate="yes" xml:space="preserve">
          <source>Uses extensive caching of LDAP operations via &lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6567778761266a9b02390ca1a3b459665c83f9ff" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;-IncludesNOEXEC&lt;/code&gt; or &lt;code&gt;-Includes&lt;/code&gt; disables server-side includes completely regardless of the previous setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef96d98987acf70f1f0bf705d3eb3d458806ba34" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt; with multiple &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#require&quot;&gt;&amp;lt;Require&amp;gt;&lt;/a&gt;&lt;/code&gt; directives, each negated with &lt;code&gt;not&lt;/code&gt;, will only allow access, if all of negated conditions are true. In other words, access will be blocked, if any of the negated conditions fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cfe0fd815e17e8e27d51653226d88100952728" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; in its default state where &lt;code&gt;&lt;a href=&quot;mod/mod_cache#cachequickhandler&quot;&gt;CacheQuickHandler&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;On&lt;/code&gt; is very much like having a caching reverse-proxy bolted to the front of the server. Requests will be served by the caching module unless it determines that the origin server should be queried just as an external cache would, and this drastically changes the security model of httpd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93be4ceec54019d2af6750f475d10b582dc522c8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;none&lt;/code&gt; for an argument will disable any accept filters for that protocol. This is useful for protocols that require a server send data first, such as &lt;code&gt;ftp:&lt;/code&gt; or &lt;code&gt;nntp&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92ddbe6f82c784dccef8e9ef4c16e629c4b0057" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;syslog&lt;/code&gt; instead of a filename enables logging via syslogd(8) if the system supports it. The default is to use syslog facility &lt;code&gt;local7&lt;/code&gt;, but you can override this by using the &lt;code&gt;syslog:facility&lt;/code&gt; syntax where &lt;var&gt;facility&lt;/var&gt; can be one of the names usually documented in syslog(1). The facility is effectively global, and if it is changed in individual virtual hosts, the final facility specified affects the entire server. Same rules apply for the syslog tag, which by default uses the Apache binary name, &lt;code&gt;httpd&lt;/code&gt; in most cases. You can also override this by using the &lt;code&gt;syslog::tag&lt;/code&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53089f052ebc0a58a29b582929a317ea3e16fe9" translate="yes" xml:space="preserve">
          <source>Using Active Directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66e8733053c04b642dcc922408ccfb6feef9b28" translate="yes" xml:space="preserve">
          <source>Using Apache HTTP Server on Microsoft Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af9e4e2c9d149d85509c48f9932553c46f724fc" translate="yes" xml:space="preserve">
          <source>Using Apache With Novell NetWare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b23e4364684786e546fbacb23b791529a6d4d08" translate="yes" xml:space="preserve">
          <source>Using Apache With RPM Based Systems (Redhat / CentOS / Fedora)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c875e44fd1ef0fdaa84f15d0801ef4a2feca59d" translate="yes" xml:space="preserve">
          <source>Using Digest Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb7f893b5d295199ac44ad44dd9b3270246f3bd" translate="yes" xml:space="preserve">
          <source>Using Environment Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a0afebc28cc1af019bbcc8893f1fbc50902b77" translate="yes" xml:space="preserve">
          <source>Using Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb778da1032664b3ef979237c5b9a41636fde2eb" translate="yes" xml:space="preserve">
          <source>Using Microsoft FrontPage with &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d43fc23bf11c4d0e868d438ad84922c0a05888" translate="yes" xml:space="preserve">
          <source>Using Microsoft FrontPage with mod_authnz_ldap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e268b9140f8f6023063dba7e235817c07ef297b0" translate="yes" xml:space="preserve">
          <source>Using RewriteMap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87e09729dd6b5b5124e02ef516affe43c08f688" translate="yes" xml:space="preserve">
          <source>Using SSL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8e852e31d4a8a04b372e96b8a08d01ef1f6f8e" translate="yes" xml:space="preserve">
          <source>Using SSL/TLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686d16463ab8470f47e9807e2c221cf7aa81ac78" translate="yes" xml:space="preserve">
          <source>Using TLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39c0fdf446db1ccc92645009cc7edb3b1cad76f" translate="yes" xml:space="preserve">
          <source>Using a 'MultiViews' search, where the server does an implicit filename pattern match and chooses from among the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0eb9565fd38d269f0b7ece6b15516beebe9270" translate="yes" xml:space="preserve">
          <source>Using a level of at least &lt;code&gt;crit&lt;/code&gt; is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5355cb9512be885860ba075229091884830619" translate="yes" xml:space="preserve">
          <source>Using a type map (&lt;em&gt;i.e.&lt;/em&gt;, a &lt;code&gt;*.var&lt;/code&gt; file) which names the files containing the variants explicitly, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27cd65e8975db60326448ae18097a8c3847e6ce4" translate="yes" xml:space="preserve">
          <source>Using a type-map file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135a02e37038bba51483274dd0e5a2d6c0ef00d6" translate="yes" xml:space="preserve">
          <source>Using an include file for a header and/or a footer can reduce the burden of these updates. You just have to make one footer file, and then include it into each page with the &lt;code&gt;include&lt;/code&gt; SSI command. The &lt;code&gt;include&lt;/code&gt; function can determine what file to include with either the &lt;code&gt;file&lt;/code&gt; attribute, or the &lt;code&gt;virtual&lt;/code&gt; attribute. The &lt;code&gt;file&lt;/code&gt; attribute is a file path, &lt;em&gt;relative to the current directory&lt;/em&gt;. That means that it cannot be an absolute file path (starting with /), nor can it contain ../ as part of that path. The &lt;code&gt;virtual&lt;/code&gt; attribute is probably more useful, and should specify a URL relative to the document being served. It can start with a /, but must be on the same server as the file being served.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aadd43b809dd705e31b28ea715ae6b7db7bf34d" translate="yes" xml:space="preserve">
          <source>Using authorization providers for access control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19174858336eefca2292878323b965333da6c27e" translate="yes" xml:space="preserve">
          <source>Using buffer with mod_include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6626de78a5f09544c36df6715395ad52ad3da8e2" translate="yes" xml:space="preserve">
          <source>Using mod_file_cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76f11d004cff46eb7dbb42aae2cf18bf7d1e902" translate="yes" xml:space="preserve">
          <source>Using mod_rewrite for Proxying</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4736a749cabe16c7d1fc06daf20548662e19bcc5" translate="yes" xml:space="preserve">
          <source>Using mod_rewrite to control access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65d78afb0dc3a5bf46dfe8192e6d4a2a0b14ca5" translate="yes" xml:space="preserve">
          <source>Using multiple providers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce9444223322d8df43effdecb6929d3897679cc" translate="yes" xml:space="preserve">
          <source>Using sed to replace text in the response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c994c58d300811ae2c15fddf24b44e9de599bcb" translate="yes" xml:space="preserve">
          <source>Using that rather than the &lt;code&gt;Require user rbowen&lt;/code&gt; line will allow anyone in that is listed in the password file, and who correctly enters their password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd1b5d22b890490c06ec1a7dd9e7362ee43ff2f" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;../mod/core#if&quot;&gt;&amp;lt;If&amp;gt;&lt;/a&gt;&lt;/code&gt;, you can allow or deny access based on arbitrary environment variables or request header values. For example, to deny access based on user-agent (the browser type) you might do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d77295f512ddac0b6f9deb9a47c78a9f46938f3" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt;&lt;code&gt;expr&lt;/code&gt; syntax, this could also be written as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b480e16ccd23a3a22f6adfa48fa06240f2ed41a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;mod/mod_cache_socache&quot;&gt;mod_cache_socache&lt;/a&gt;&lt;/code&gt; module, &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; can cache data from a variety of implementations (aka: &quot;providers&quot;). Using the &lt;code&gt;&lt;a href=&quot;mod/mod_socache_memcache&quot;&gt;mod_socache_memcache&lt;/a&gt;&lt;/code&gt; module, for example, one can specify that &lt;a href=&quot;http://memcached.org&quot;&gt;memcached&lt;/a&gt; is to be used as the the backend storage mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5528305329eed8bbeebd875c81bba7b4d34ae8bb" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;mod_example_hooks&lt;/code&gt; Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcd2a8678bde82e958e481b362d07112565651a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;set&lt;/code&gt; directive, you can set variables for later use. We'll need this later in the discussion, so we'll talk about it here. The syntax of this is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d255a0c89354eb89175c7944db695a5b5a3629" translate="yes" xml:space="preserve">
          <source>Using the syntax shown in the UserDir documentation, you can restrict what users are permitted to use this functionality:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c327ea2396a35d698009f899819239cbe9d7e0" translate="yes" xml:space="preserve">
          <source>Using this directive in conjunction with &lt;code&gt;IndexOptions HTMLTable&lt;/code&gt; adds a number of CSS classes to the resulting HTML. The entire table is given a CSS id of &lt;code&gt;indexlist&lt;/code&gt; and the following classes are associated with the various parts of the listing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf69a85ea3ad53b52ca117cf05fa76440da97db" translate="yes" xml:space="preserve">
          <source>Usually, the functionality is used like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec55b3ebac0523b6402edeed566288b0942588a4" translate="yes" xml:space="preserve">
          <source>Usually, when something goes wrong with your SSI directive, you get the message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ca7f972a1943935960a07a82a5d567b82687a1" translate="yes" xml:space="preserve">
          <source>Valid hyperlink</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d318103c56139d8cee90657b9de3288a554a8d64" translate="yes" xml:space="preserve">
          <source>Valid protocols are &lt;code&gt;http/1.1&lt;/code&gt; for http and https connections, &lt;code&gt;h2&lt;/code&gt; on https connections and &lt;code&gt;h2c&lt;/code&gt; for http connections. Modules may enable more protocols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb97cfb984add68c327523d6390f2de3f12fea12" translate="yes" xml:space="preserve">
          <source>Validating CRYPT or MD5 passwords with the OpenSSL command line program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bc17b978888b7f8d38d59e97cafd1fa72118b4" translate="yes" xml:space="preserve">
          <source>Value Type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8e4a0d041ac0cb42d4610b742f88aaf8fcf001" translate="yes" xml:space="preserve">
          <source>Value of the &lt;code&gt;Expires&lt;/code&gt; header configured by MIME type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="95a5f9af637cf5be9627a6081521faef0054e87f" translate="yes" xml:space="preserve">
          <source>Variable Name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5e080ccadff18613ccf65446b862a68b6d073c" translate="yes" xml:space="preserve">
          <source>Variable Substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcf02e069b085036bdc1db341639b8fa69de100" translate="yes" xml:space="preserve">
          <source>Variable names may not contain colon &quot;:&quot; characters, to avoid clashes with &lt;code&gt;&lt;a href=&quot;mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt;'s syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff543100742c9cc6f495c37dccf8aba22e36661a" translate="yes" xml:space="preserve">
          <source>Variable substitution is done within quoted strings in most cases where they may reasonably occur as an argument to an SSI directive. This includes the &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;flastmod&lt;/code&gt;, &lt;code&gt;fsize&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;echo&lt;/code&gt;, and &lt;code&gt;set&lt;/code&gt; directives. If &lt;code&gt;&lt;a href=&quot;#ssilegacyexprparser&quot;&gt;SSILegacyExprParser&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt;, substitution also occurs in the arguments to conditional operators. You can insert a literal dollar sign into the string using backslash quoting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d54142c18cddb50c31ddc67496357f5820ae1e2" translate="yes" xml:space="preserve">
          <source>Variable/Negotiated Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="a2ce63ac68f3fd5d66830a4653721365ad163fff" translate="yes" xml:space="preserve">
          <source>Various configuration settings for directory indexing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4309ac44d8fe85118263a1a57a22f58b6ec8c201" translate="yes" xml:space="preserve">
          <source>Various query string arguments are available to give the client some control over the ordering of the directory listing, as well as what files are listed. If you do not wish to give the client this control, the &lt;code&gt;&lt;a href=&quot;#indexoptions.ignoreclient&quot;&gt;IndexOptions IgnoreClient&lt;/a&gt;&lt;/code&gt; option disables that functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1d19cfe6e286e99c8d5de660c3ec7c6b4f3d3a" translate="yes" xml:space="preserve">
          <source>Various versions of Apache httpd have used other modules and directives to control access logging, including mod_log_referer, mod_log_agent, and the &lt;code&gt;TransferLog&lt;/code&gt; directive. The &lt;code&gt;&lt;a href=&quot;mod/mod_log_config#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; directive now subsumes the functionality of all the older directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e34c2f135661e69ffdee32c32b07269bc6c2265" translate="yes" xml:space="preserve">
          <source>Version 2.1 and later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacc7d2bc35fc6da3222aefad831302141f5b79f" translate="yes" xml:space="preserve">
          <source>Version 2.3 and later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6974ab729b6242600700a81b1ec6d4d1a48c0a94" translate="yes" xml:space="preserve">
          <source>Version History</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f80265529c7013bc8d77901940e0f1a28df4271" translate="yes" xml:space="preserve">
          <source>Version dependent configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6192a9d22a2543af0e30c3c2cb0a07b2a458ac" translate="yes" xml:space="preserve">
          <source>Virtual Host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ffd07d38c9eecf8b9e7c924c1acc2ba2be5585" translate="yes" xml:space="preserve">
          <source>Virtual Host Definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e002ac7b12d3f2cdf65aa829a437c692675c0a" translate="yes" xml:space="preserve">
          <source>Virtual Hosts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d6903bac62c5839a6798a10585dfa4d1a7f9dd" translate="yes" xml:space="preserve">
          <source>Virtual Hosts documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22916a19658fafdc4cff10ce9ab8025e2ccfa65" translate="yes" xml:space="preserve">
          <source>VirtualHost Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7638d8452bcb57e9befd1bd519a3973f1637465a" translate="yes" xml:space="preserve">
          <source>Visitors coming from that address (&lt;code&gt;10.252.46.165&lt;/code&gt;) will not be able to see the content covered by this directive. If, instead, you have a machine name, rather than an IP address, you can use that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa3408b9d4c79b34884969e3687c2a9ef79c344" translate="yes" xml:space="preserve">
          <source>Visitors coming from that address will not be able to see the content covered by this directive. If, instead, you have a machine name, rather than an IP address, you can use that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de230d22e24d564ac336650263a0a894157d9fc3" translate="yes" xml:space="preserve">
          <source>Warning conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5357a0025cfa374032ba8e0510b9d8066c61e7d7" translate="yes" xml:space="preserve">
          <source>Watching Your Logs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851ed3691e48dc65c11484652a2726a138ba65e5" translate="yes" xml:space="preserve">
          <source>We can calculate the absolute maximum numbers of concurrent connections in two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab517e12a3d9314c68f947ae30fdd351a972987" translate="yes" xml:space="preserve">
          <source>We distribute each worker's work quota to the worker, and then look which of them needs to work most urgently (biggest lbstatus). This worker is then selected for work, and its lbstatus reduced by the total work quota we distributed to all workers. Thus the sum of all lbstatus does not change(*) and we distribute the requests as desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5650998547c971333c974a71673ccedc058fd8bd" translate="yes" xml:space="preserve">
          <source>Web Site Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9b8617c524d850c01824020a98215a5bba7431" translate="yes" xml:space="preserve">
          <source>Web site content can take many different forms, but may be broadly divided into static and dynamic content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2833484d472a90545a2b4ce437b3b2e8bf6ecd" translate="yes" xml:space="preserve">
          <source>Websockets support module for &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71fd9d92e619cb6c289ce93dca30473cb349e68" translate="yes" xml:space="preserve">
          <source>Weighted Traffic Counting Algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d89f985b0e89df40faceb3a8e3a58ea3c71a964" translate="yes" xml:space="preserve">
          <source>Weighted Traffic Counting load balancer scheduler algorithm for &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd9fa14038e1e9f2d1a2fd3404ab7d9ed3662e7" translate="yes" xml:space="preserve">
          <source>Well formed content that is intended to be cached should declare an explicit freshness lifetime with the &lt;code&gt;Cache-Control&lt;/code&gt; header's &lt;code&gt;max-age&lt;/code&gt; or &lt;code&gt;s-maxage&lt;/code&gt; fields, or by including an &lt;code&gt;Expires&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4c3335054e1d495b85843673e9ffac93316b41" translate="yes" xml:space="preserve">
          <source>What Can be Cached?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d50d473c71ef00b8d2ff2317cceb35e67ac9b29" translate="yes" xml:space="preserve">
          <source>What Should Not be Cached?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c2dd8f1f6d6f1b54a7aeaa367217207ed1b150" translate="yes" xml:space="preserve">
          <source>What are SSI?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c451360e1d481ad0787a4cff6900f5bc66d6e2" translate="yes" xml:space="preserve">
          <source>What else can I config?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa48987a45721c3577023cf848292dc79bf617c" translate="yes" xml:space="preserve">
          <source>What is a Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e51f6561157e91550e99ed7b419b6c51d37604a" translate="yes" xml:space="preserve">
          <source>What the server will return to the client in case of an error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b633337049dba11d4154da9810031647dcf22be8" translate="yes" xml:space="preserve">
          <source>What they are/How to use them</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968e72259bfafe74221425760d23b0250d2f0745" translate="yes" xml:space="preserve">
          <source>What's going on behind the scenes?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4b36bc57457b9920995102b0eb6da42363fb68" translate="yes" xml:space="preserve">
          <source>What's next?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13d0e41545f9a560f193f28b8cca334e91d0153" translate="yes" xml:space="preserve">
          <source>When (not) to use .htaccess files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629e2997d8013a04d1a54a8a328560ff1cf11b99" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; is run it will take several minutes to test for the availability of features on your system and build Makefiles which will later be used to compile the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ead7c963a0fb3d76a6b95eabb9a28369ca3248e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;programs/suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; is used to launch CGI scripts, the environment will be cleaned down to a set of &lt;em&gt;safe&lt;/em&gt; variables before CGI scripts are launched. The list of &lt;em&gt;safe&lt;/em&gt; variables is defined at compile-time in &lt;code&gt;suexec.c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5bcbf6e2713a8626c6ed412ab9fa0aa85bda6d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;AuthLDAPSubGroupAttribute&lt;/code&gt; overlaps with &lt;code&gt;AuthLDAPGroupAttribute&lt;/code&gt; (as it does by default and as required by common LDAP schemas), uncached searching for subgroups in large groups can be very slow. If you use large, non-nested groups, set &lt;code&gt;AuthLDAPMaxSubGroupDepth&lt;/code&gt; to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a286a5882af52d9b9df4b56fd9a04721a667c90" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;reqenv&lt;/code&gt; is used outside of &amp;lt;&lt;code&gt;&lt;a href=&quot;mod/core#if&quot;&gt;If&lt;/a&gt;&lt;/code&gt;&amp;gt;, the resolution will generally occur later, but the exact timing depends on the directive the expression has been used within.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29db440ec4847aad1f6841d428ca245dd73120fa" translate="yes" xml:space="preserve">
          <source>When Apache issues a redirect in response to a client request, the response includes some actual text to be displayed in case the client can't (or doesn't) automatically follow the redirection. Apache ordinarily labels this text according to the character set which it uses, which is ISO-8859-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ca9ca31b86ffe963a54cdea12d3d3a866b0736" translate="yes" xml:space="preserve">
          <source>When Basic authentication isn't provided by the client and the authorizer determines the user, this expression, evaluated after calling the authorizer, determines the user. The expression follows &lt;a href=&quot;../expr&quot;&gt; ap_expr syntax&lt;/a&gt; and must resolve to a string. A typical use is to reference a &lt;code&gt;Variable-&lt;em&gt;XXX&lt;/em&gt;&lt;/code&gt; setting returned by the authorizer using an option like &lt;code&gt;UserExpr &quot;%{reqenv:&lt;em&gt;XXX&lt;/em&gt;}&quot;&lt;/code&gt;. If this option is specified and the user id can't be retrieved using the expression after a successful authentication, the request will be rejected with a 500 error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215baf8819dfe6106de7ec9388d0b2fd0de11021" translate="yes" xml:space="preserve">
          <source>When KeepAlive connections are used with SSL, the overhead of the SSL handshake is reflected in the byte count of the first request on the connection. When per-directory SSL renegotiation occurs, the bytes are associated with the request that triggered the renegotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9217de47c636d83429f3b61714179b4b18158c" translate="yes" xml:space="preserve">
          <source>When a Lua filter is used as the underlying provider via the &lt;code&gt;&lt;a href=&quot;mod_filter#filterprovider&quot;&gt;FilterProvider&lt;/a&gt;&lt;/code&gt; directive, filtering will only work when the &lt;var&gt;filter-name&lt;/var&gt; is identical to the &lt;var&gt;provider-name&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee095f83c4a43d3010c3f043df254c7ded120c6" translate="yes" xml:space="preserve">
          <source>When a URI is accessed that is served by the handler &lt;code&gt;form-logout-handler&lt;/code&gt;, the page specified by this directive will be shown to the end user. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be85721c0e70340fd22fb31b22d945d451b8ceff" translate="yes" xml:space="preserve">
          <source>When a cache stores a representation, it associates it with the request URL. The next time that URL is requested, the cache can use the stored representation. But, if the resource is negotiable at the server, this might result in only the first requested variant being cached and subsequent cache hits might return the wrong response. To prevent this, httpd normally marks all responses that are returned after content negotiation as non-cacheable by HTTP/1.0 clients. httpd also supports the HTTP/1.1 protocol features to allow caching of negotiated responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa014e09b6538296075007552a27d97993dcf17" translate="yes" xml:space="preserve">
          <source>When a cached entry becomes stale, &lt;code&gt;&lt;a href=&quot;mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will submit a conditional request to the backend, which is expected to confirm whether the cached entry is still fresh, and send an updated entity if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f90d10a5e38b37962abc259e71f586432ffc1c" translate="yes" xml:space="preserve">
          <source>When a client requests a DAV resource lock, it can also specify a time when the lock will be automatically removed by the server. This value is only a request, and the server can ignore it or inform the client of an arbitrary value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3a42d6f9fec98bbee140752618dea3cad08a67" translate="yes" xml:space="preserve">
          <source>When a client requests a page on your server, but the server cannot find a single page that matches the &lt;code&gt;Accept-language&lt;/code&gt; sent by the browser, the server will return either a &quot;No Acceptable Variant&quot; or &quot;Multiple Choices&quot; response to the client. To avoid these error messages, it is possible to configure httpd to ignore the &lt;code&gt;Accept-language&lt;/code&gt; in these cases and provide a document that does not explicitly match the client's request. The &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation#forcelanguagepriority&quot;&gt;ForceLanguagePriority&lt;/a&gt;&lt;/code&gt; directive can be used to override one or both of these error messages and substitute the servers judgement in the form of the &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation#languagepriority&quot;&gt;LanguagePriority&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cd048d1c4fed99109ce95117f13fde6a256a74" translate="yes" xml:space="preserve">
          <source>When a client uses a Keep-Alive connection, it will be counted as a single &quot;request&quot; for the &lt;code&gt;&lt;a href=&quot;mpm_common#maxconnectionsperchild&quot;&gt;MaxConnectionsPerChild&lt;/a&gt;&lt;/code&gt; directive, regardless of how many requests are sent using the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7162621ff4afa80b8a10cee0333c623269a8f8f1" translate="yes" xml:space="preserve">
          <source>When a conditional request is received by an origin server, the origin server should check whether the ETag or the Last-Modified parameter has changed, as appropriate for the request. If not, the origin should respond with a terse &quot;304 Not Modified&quot; response. This signals to the cache that the stale content is still fresh should be used for subsequent requests until the content's new freshness lifetime is reached again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4999023d4803ff6bcf8239ae23f69556b9ab4baa" translate="yes" xml:space="preserve">
          <source>When a configuration section contains &lt;code&gt;AuthMerging And&lt;/code&gt; or &lt;code&gt;AuthMerging Or&lt;/code&gt;, its authorization logic is combined with that of the nearest predecessor (according to the overall order of configuration sections) which also contains authorization logic as if the two sections were jointly contained within a &lt;code&gt;&lt;a href=&quot;#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#requireany&quot;&gt;&amp;lt;RequireAny&amp;gt;&lt;/a&gt;&lt;/code&gt; directive, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5147efe404d949542827af2887254ff60d77ec" translate="yes" xml:space="preserve">
          <source>When a particular level is specified, messages from all other levels of higher significance will be reported as well. &lt;em&gt;E.g.&lt;/em&gt;, when &lt;code&gt;LogLevel info&lt;/code&gt; is specified, then messages with log levels of &lt;code&gt;notice&lt;/code&gt; and &lt;code&gt;warn&lt;/code&gt; will also be posted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0147aa99a95af58978408ce9d48c326ca68d0ec" translate="yes" xml:space="preserve">
          <source>When a program runs through the web server as a CGI program, it may not have the same &lt;code&gt;PATH&lt;/code&gt;. Any programs that you invoke in your CGI program (like &lt;code&gt;sendmail&lt;/code&gt;, for example) will need to be specified by a full path, so that the shell can find them when it attempts to execute your CGI program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163f587c42e0415f7d28a7fd3df02e0f5e820ec9" translate="yes" xml:space="preserve">
          <source>When a request is received, the server first maps it to the best matching &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; based on the local IP address and port combination only. Non-wildcards have a higher precedence. If no match based on IP and port occurs at all, the &quot;main&quot; server configuration is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5519d8d538f0b87b20bb13e334452fdff4452904" translate="yes" xml:space="preserve">
          <source>When a server/vhost does not have h2 or h2c enabled via &lt;code&gt;&lt;a href=&quot;core#protocols&quot;&gt;Protocols&lt;/a&gt;&lt;/code&gt;, the connection is never inspected for a HTTP/2 preamble. &lt;code&gt;H2Direct&lt;/code&gt; does not matter then. This is important for connections that use protocols where an initial read might hang indefinitely, such as NNTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e729f29e117c4b97c22c0addf1cb32c7c3c30b1c" translate="yes" xml:space="preserve">
          <source>When a stream &lt;em&gt;depends&lt;/em&gt; on another, say X depends on Y, then Y gets all bandwidth before X gets any. Note that this does not mean that Y will block X. If Y has no data to send, all bandwidth allocated to Y can be used by X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a2a00e6f833976fcf995ee2b2f4088f555f500" translate="yes" xml:space="preserve">
          <source>When a stream has more than one dependant, say X1 and X2 both depend on Y, the &lt;em&gt;weight&lt;/em&gt; determines the bandwidth allocation. If X1 and X2 have the same weight, they both get half of the available bandwidth. If the weight of X1 is twice as large as that for X2, X1 gets twice the bandwidth of X2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976c7cd9424ffed8c10154abdbcec94f9b855b16" translate="yes" xml:space="preserve">
          <source>When a virtual host is known by one of many different server aliases, ensuring that &lt;code&gt;&lt;a href=&quot;mod/core#usecanonicalname&quot;&gt;UseCanonicalName&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;On&lt;/code&gt; can dramatically improve the ratio of cache hits. This is because the hostname of the virtual-host serving the content is used within the cache key. With the setting set to &lt;code&gt;On&lt;/code&gt; virtual-hosts with multiple server names or aliases will not produce differently cached entities, and instead content will be cached as per the canonical hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda71e715973c1da943b42f487702ad4b5366362" translate="yes" xml:space="preserve">
          <source>When acting as a forward proxy server, &lt;var&gt;url-string&lt;/var&gt; must minimally begin with a protocol for which caching should be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82188932584c75e195c92bd7ba98a33b1fad03f" translate="yes" xml:space="preserve">
          <source>When added to a directory/location HTTP/2 PUSHes will be attempted for all paths added via this directive. This directive can be used several times for the same location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a14397a21286ca674b4287454a32b59daf66f49" translate="yes" xml:space="preserve">
          <source>When adding users via FrontPage, FrontPage administrators should choose usernames that already exist in the LDAP directory (for obvious reasons). Also, the password that the administrator enters into the form is ignored, since Apache will actually be authenticating against the password in the LDAP database, and not against the password in the local user file. This could cause confusion for web administrators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11022806beb2f3f94e4cc4f6f48af01e7ac7612a" translate="yes" xml:space="preserve">
          <source>When all the worker threads are idle, then absolute maximum numbers of concurrent connections can be calculared in a simpler way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a22e3bd75a198384380f043581b689df81eda0" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;ETag&lt;/code&gt; header exists in the original cached response, &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will add an &lt;code&gt;If-None-Match&lt;/code&gt; header to the request to the origin server. When a &lt;code&gt;Last-Modified&lt;/code&gt; header exists in the original cached response, &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will add an &lt;code&gt;If-Modified-Since&lt;/code&gt; header to the request to the origin server. Performing either of these actions makes the request &lt;strong&gt;conditional&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667b2ee8880f87a800b2fc278de24efbd758416a" translate="yes" xml:space="preserve">
          <source>When an entity is cached for the first time, a lock will be created for the entity until the response has been fully cached. During the lifetime of the lock, the cache will suppress the second and subsequent attempt to cache the same entity. While this doesn't hold back the thundering herd, it does stop the cache attempting to cache the same entity multiple times simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b345dddad168779c83a44cfc362415294b3c82b0" translate="yes" xml:space="preserve">
          <source>When an entity reaches its freshness lifetime and becomes stale, a lock will be created for the entity until the response has either been confirmed as still fresh, or replaced by the backend. During the lifetime of the lock, the second and subsequent incoming request will cause stale data to be returned, and the thundering herd is kept at bay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec32eff29a0d895b1b9d4c5cc4e37397923725d3" translate="yes" xml:space="preserve">
          <source>When any directive provided by this module is used in a new configuration section, no directives provided by this module are inherited from previous configuration sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8d78630ceedef24a3fed989d6ea9690082b4fa" translate="yes" xml:space="preserve">
          <source>When authorization is enabled, it is normally inherited by each subsequent &lt;a href=&quot;../sections#merging&quot;&gt;configuration section&lt;/a&gt;, unless a different set of authorization directives is specified. This is the default action, which corresponds to an explicit setting of &lt;code&gt;AuthMerging Off&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1977e78c0d2c84104659ea37bd26e7e7a1936d" translate="yes" xml:space="preserve">
          <source>When choosing the LDAP URL, the attribute to use for authentication should be something that will also be valid for putting into a &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt; user file. The user ID is ideal for this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248dbb762c114b12f20d41a6c689f50d47c9328b" translate="yes" xml:space="preserve">
          <source>When configured, the CGI error log logs any CGI which does not execute properly. Each CGI script which fails to operate causes several lines of information to be logged. The first two lines are always of the format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd941fd9b27e5b13f81b555503c2650872f44a1" translate="yes" xml:space="preserve">
          <source>When configuring the login as a standalone page, unsuccessful authentication attempts should be redirected to a login form created by the website for this purpose, using the &lt;code&gt;&lt;a href=&quot;#authformloginrequiredlocation&quot;&gt;AuthFormLoginRequiredLocation&lt;/a&gt;&lt;/code&gt; directive. Typically this login page will contain an HTML form, asking the user to provide their usename and password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb024a4a0c2381c425b574770dec3959bc35395" translate="yes" xml:space="preserve">
          <source>When content expires from the cache and becomes stale, rather than pass on the original request, httpd will modify the request to make it conditional instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faae74d89db6e6c2e508290509a3178e6ec7e1d9" translate="yes" xml:space="preserve">
          <source>When disabled, the cache operates as a normal handler, and is subject to the full set of phases when handling a server request. While this mode is slower than the default, it allows the cache to be used in cases where full processing is required, such as when content is subject to authorisation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ea5070419ee5104bc4e4a7a05835d6e44b486b" translate="yes" xml:space="preserve">
          <source>When disabling authentication, note that clients which have already authenticated against another portion of the server's document tree will typically continue to send authentication HTTP headers or cookies with each request, regardless of whether the server actually requires authentication for every resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cac2864dd9f229f94610bad5ff04db7234154d" translate="yes" xml:space="preserve">
          <source>When doing searches, the attribute, filter and username passed by the HTTP client are combined to create a search filter that looks like &lt;code&gt;(&amp;amp;(&lt;em&gt;filter&lt;/em&gt;)(&lt;em&gt;attribute&lt;/em&gt;=&lt;em&gt;username&lt;/em&gt;))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218558494c54dbb782d7da3c73c462c1113b63dd" translate="yes" xml:space="preserve">
          <source>When editing CGI scripts on Windows, end-of-line characters may be appended to the interpreter path. Ensure that files are then transferred to the server in ASCII mode. Failure to do so may result in &quot;Command not found&quot; warnings from the OS, due to the unrecognized end-of-line character being interpreted as a part of the interpreter filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a667a967d93fe44971122854bfcc2d78462af33" translate="yes" xml:space="preserve">
          <source>When entering a file path on non-Unix platforms, care should be taken to make sure that only forward slashed are used even though the platform may allow the use of back slashes. In general it is a good idea to always use forward slashes throughout the configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d15344a6cca02605d39aa585d94e3ac54614674" translate="yes" xml:space="preserve">
          <source>When entering a file path on non-Unix platforms, care should be taken to make sure that only forward slashes are used even though the platform may allow the use of back slashes. In general it is a good idea to always use forward slashes throughout the configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353ca2c38fa31c4d6abf8949571ecfc1307e36d1" translate="yes" xml:space="preserve">
          <source>When environment variables are looked up within an &amp;lt;&lt;code&gt;&lt;a href=&quot;mod/core#if&quot;&gt;If&lt;/a&gt;&lt;/code&gt;&amp;gt; condition, it's important to consider how extremely early in request processing that this resolution occurs. As a guideline, any directive defined outside of virtual host context (directory, location, htaccess) is not likely to have yet had a chance to execute. &lt;code&gt;&lt;a href=&quot;mod/mod_setenvif#setenvif&quot;&gt;SetEnvIf&lt;/a&gt;&lt;/code&gt; in virtual host scope is one directive that runs prior to this resolution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77d0bac11c3ffb179899595c2ff2686e3a867d7" translate="yes" xml:space="preserve">
          <source>When explicit directives such as &lt;code&gt;&lt;a href=&quot;#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt; do not apply to the current request, the internal handler name normally set by those directives is set to match the content type specified by this directive. This is a historical behavior that some third-party modules (such as mod_php) may use &quot;magic&quot; content types used only to signal the module to take responsibility for the matching request. Configurations that rely on such &quot;magic&quot; types should be avoided by the use of &lt;code&gt;&lt;a href=&quot;#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee6c801a58b67c2ec4e89888d878392b2efdcbb" translate="yes" xml:space="preserve">
          <source>When explicit directives such as &lt;code&gt;&lt;a href=&quot;core#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt; do not apply to the current request, the internal handler name normally set by those directives is instead set to the content type specified by this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53de5c958b3748ce5faf184fdf43c4c9369608d6" translate="yes" xml:space="preserve">
          <source>When httpd is restarted, special consideration must be made for changes to &lt;code&gt;&lt;a href=&quot;mod/mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt; directives. During a restart, httpd keeps ports bound (as in the original configuration) to avoid generating &quot;Connection refused&quot; errors for any new attempts to connect to the server. If changes are made to the set of &lt;code&gt;&lt;a href=&quot;mod/mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt; directives used which conflict with the old configuration, configuration will fail and the server will terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40ef64e9a99056e876910610e7cf3a2380584f0" translate="yes" xml:space="preserve">
          <source>When httpd is used in front of an expensive content generator, buffering the response may allow the backend to complete processing and release resources sooner, depending on how the backend is designed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1866d88ddfeed4059114015476162b852c7ba462" translate="yes" xml:space="preserve">
          <source>When httpd starts, it binds to some port and address on the local machine and waits for incoming requests. By default, it listens to all addresses on the machine. However, it may need to be told to listen on specific ports, or only on selected addresses, or a combination of both. This is often combined with the &lt;a href=&quot;vhosts/index&quot;&gt;Virtual Host&lt;/a&gt; feature, which determines how &lt;code&gt;httpd&lt;/code&gt; responds to different IP addresses, hostnames and ports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78198e7ec462036c1b5a96c37c656720011ee9df" translate="yes" xml:space="preserve">
          <source>When in auto drive mode, the module will check every 12 hours at least what the status of the managed domains is and if it needs to do something. On errors, for example when the CA is unreachable, it will initially retry after some seconds. Should that continue to fail, it will back off to a maximum interval of hourly checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597eada55cc095848d7b1ff61eb4897b76877371" translate="yes" xml:space="preserve">
          <source>When keep-alives are in use, children will be kept busy doing nothing waiting for more requests on the already open connection. The default &lt;code&gt;&lt;a href=&quot;../mod/core#keepalivetimeout&quot;&gt;KeepAliveTimeout&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;5&lt;/code&gt; seconds attempts to minimize this effect. The tradeoff here is between network bandwidth and server resources. In no event should you raise this above about &lt;code&gt;60&lt;/code&gt; seconds, as &lt;a href=&quot;http://www.hpl.hp.com/techreports/Compaq-DEC/WRL-95-4.html&quot;&gt; most of the benefits are lost&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a56e29e909312c03a58a68c62c97b9a4c00ff4" translate="yes" xml:space="preserve">
          <source>When logging to a regular file, messages of the level &lt;code&gt;notice&lt;/code&gt; cannot be suppressed and thus are always logged. However, this doesn't apply when logging is done using &lt;code&gt;syslog&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d3ed5ed05a63e004506de7150c4ea5cf17ddc9" translate="yes" xml:space="preserve">
          <source>When multiple &lt;code&gt;Require&lt;/code&gt; directives are used in a single &lt;a href=&quot;../sections#merging&quot;&gt;configuration section&lt;/a&gt; and are not contained in another authorization directive like &lt;code&gt;&lt;a href=&quot;#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt;, they are implicitly contained within a &lt;code&gt;&lt;a href=&quot;#requireany&quot;&gt;&amp;lt;RequireAny&amp;gt;&lt;/a&gt;&lt;/code&gt; directive. Thus the first one to authorize a user authorizes the entire request, and subsequent &lt;code&gt;Require&lt;/code&gt; directives are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5553dbf637dbcc9fa1806095e424f752dd99373" translate="yes" xml:space="preserve">
          <source>When multiple mutexes based on this mechanism are used within multi-threaded, multi-process environments, deadlock errors (EDEADLK) can be reported for valid mutex operations if &lt;code&gt;fcntl()&lt;/code&gt; is not thread-aware, such as on Solaris.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb99253b19baf20c451107e46273c69d1edb31d6" translate="yes" xml:space="preserve">
          <source>When name-based virtual hosting is used, the value for this directive is taken from the default (first-listed) virtual host best matching the current IP address and port combination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12e17a2c7ccf555be125237f417b02981e8d999" translate="yes" xml:space="preserve">
          <source>When name-based virtual hosting is used, the value for this directive is taken from the default (first-listed) virtual host for the local IP and port combination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11887d12e5fb58cc78b43ce17b4288b5c19b97d3" translate="yes" xml:space="preserve">
          <source>When not to use mod_rewrite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db682ef55d9d973c4c0591a7b22654d6b9688fc" translate="yes" xml:space="preserve">
          <source>When placed into an &lt;code&gt;.htaccess&lt;/code&gt; file or a &lt;code&gt;&lt;a href=&quot;#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; section, this directive forces all matching files to be parsed through the &lt;a href=&quot;../handler&quot;&gt;handler&lt;/a&gt; given by &lt;var&gt;handler-name&lt;/var&gt;. For example, if you had a directory you wanted to be parsed entirely as imagemap rule files, regardless of extension, you might put the following into an &lt;code&gt;.htaccess&lt;/code&gt; file in that directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6600ee605ebc857dd2cf42da8bc6738d8ff95cba" translate="yes" xml:space="preserve">
          <source>When placed into an &lt;code&gt;.htaccess&lt;/code&gt; file or a &lt;code&gt;&lt;a href=&quot;#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt; section, this directive forces all matching files to be served with the content type identification given by &lt;var&gt;media-type&lt;/var&gt;. For example, if you had a directory full of GIF files, but did not want to label them all with &lt;code&gt;.gif&lt;/code&gt;, you might want to use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e9fc334cd6f5c57d584a872be6df221ad44fcd" translate="yes" xml:space="preserve">
          <source>When reading data from the client, the length of time to wait for a TCP packet to arrive if the read buffer is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc0ac5a4b6213210191d168967516c6accbb3ad" translate="yes" xml:space="preserve">
          <source>When redirecting to a local URL, additional environment variables are set so that the response can be further customized. They are not sent to external URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7626192a07317ccd594363f7d3813b261af761" translate="yes" xml:space="preserve">
          <source>When running a server with many &lt;a href=&quot;vhosts/index&quot;&gt;virtual hosts&lt;/a&gt;, there are several options for dealing with log files. First, it is possible to use logs exactly as in a single-host server. Simply by placing the logging directives outside the &lt;code&gt;&lt;a href=&quot;mod/core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; sections in the main server context, it is possible to log all requests in the same access log and error log. This technique does not allow for easy collection of statistics on individual virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b8f9444a262a8f66a3143eb97224c14afa7eb8" translate="yes" xml:space="preserve">
          <source>When running httpd as a caching proxy server, there is also the potential for so-called cache poisoning. Cache Poisoning is a broad term for attacks in which an attacker causes the proxy server to retrieve incorrect (and usually undesirable) content from the origin server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500b9e3d6a36bad9466fdd6ef795cb147165b002" translate="yes" xml:space="preserve">
          <source>When set &lt;code&gt;On&lt;/code&gt; the 'password' entered is checked for at least one '@' and a '.' to encourage users to enter valid email addresses (see the above &lt;code&gt;&lt;a href=&quot;#anonymous_logemail&quot;&gt;Anonymous_LogEmail&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ef68dcfaf1d70802194a48115fe91f6c25f04c" translate="yes" xml:space="preserve">
          <source>When set &lt;code&gt;On&lt;/code&gt;, the default, the 'password' entered (which hopefully contains a sensible email address) is logged in the error log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4658ce37b11f80d620fd9cbcd7a9a1d76eccc76" translate="yes" xml:space="preserve">
          <source>When set &lt;code&gt;On&lt;/code&gt;, users can leave the userID (and perhaps the password field) empty. This can be very convenient for MS-Explorer users who can just hit return or click directly on the OK button; which seems a natural reaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa330499de5706e7a4f57efc701c5d503791fef" translate="yes" xml:space="preserve">
          <source>When set &lt;code&gt;on&lt;/code&gt;, this directive says to use the distinguished name of the client username when checking for group membership. Otherwise, the username will be used. For example, assume that the client sent the username &lt;code&gt;bjenson&lt;/code&gt;, which corresponds to the LDAP DN &lt;code&gt;cn=Babs Jenson, o=Example&lt;/code&gt;. If this directive is set, &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will check if the group has &lt;code&gt;cn=Babs Jenson, o=Example&lt;/code&gt; as a member. If this directive is not set, then &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will check if the group has &lt;code&gt;bjenson&lt;/code&gt; as a member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f46072c513a4b2cd49034f730c371b0388effc8" translate="yes" xml:space="preserve">
          <source>When set to &quot;default&quot;, the underlying SDK's referral chasing state is not changed, &lt;code&gt;LDAPReferralHopLimit&lt;/code&gt; is not used to overide the SDK's hop limit, and no LDAP rebind callback is registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ca2efbed5e6be29de8946ff3c94f94d89a23c6" translate="yes" xml:space="preserve">
          <source>When set to &quot;off&quot;, the underlying SDK's referral chasing state is disabled completely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1e82b8ad6394c1a83fed9262c1521da562cfb0" translate="yes" xml:space="preserve">
          <source>When set to &quot;on&quot;, the underlying SDK's referral chasing state is enabled, &lt;code&gt;LDAPReferralHopLimit&lt;/code&gt; is used to override the SDK's hop limit, and an LDAP rebind callback is registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25dae0d5038ac2b3de23dba7637ac70c5615e78b" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;on&lt;/code&gt;, PUSH resources announced with &lt;code&gt;H2PushResource&lt;/code&gt; will trigger an interim 103 response before the final response. The 103 response will carry &lt;code&gt;Link&lt;/code&gt; headers that advise the &lt;code&gt;preload&lt;/code&gt; of such resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990397e3fa8e4b61f13558a62a97fb1153638b6b" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;on&lt;/code&gt;, file content is copied while the request is still being processed and the buffered data is passed on to the main connection. This is better if a third party module is injecting files with different lifetimes into the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b142e9fc260b05a2508c164bf81c24cc1fc57927" translate="yes" xml:space="preserve">
          <source>When set to a value of &quot;1&quot;, this variable disables the &lt;code&gt;DEFLATE&lt;/code&gt; output filter provided by &lt;code&gt;&lt;a href=&quot;mod/mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt; for content-types other than &lt;code&gt;text/html&lt;/code&gt;. If you'd rather use statically compressed files, &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; evaluates the variable as well (not only for gzip, but for all encodings that differ from &quot;identity&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af969925bf38a7efc916353e59a8fab07a689b14" translate="yes" xml:space="preserve">
          <source>When set, &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will not save an otherwise cacheable response. This environment variable does not influence whether a response already in the cache will be served for the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966e716fa3df4846b1120efbd4b58ed83531149e" translate="yes" xml:space="preserve">
          <source>When set, &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will use the LDAP server to compare the DNs. This is the only foolproof way to compare DNs. &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will search the directory for the DN specified with the &lt;a href=&quot;#reqdn&quot;&gt;&lt;code&gt;Require dn&lt;/code&gt;&lt;/a&gt; directive, then, retrieve the DN and compare it with the DN retrieved from the user entry. If this directive is not set, &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; simply does a string comparison. It is possible to get false negatives with this approach, but it is much faster. Note the &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; cache can speed up DN comparison in most situations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154b9a7ca9d9cc54b62d88ee2b1eea96c3b6ffb8" translate="yes" xml:space="preserve">
          <source>When set, and &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; has authenticated the user, LDAP comparisons for authorization use the queried distinguished name (DN) and HTTP basic authentication password of the authenticated user instead of the servers configured credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0c60d0363b112a14ca9de0b5626b707ff8e266" translate="yes" xml:space="preserve">
          <source>When set, and &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; has authenticated the user, LDAP searches for authorization use the queried distinguished name (DN) and HTTP basic authentication password of the authenticated user instead of the servers configured credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442132fa0e38471e4a96b05927bfa1da0f015a65" translate="yes" xml:space="preserve">
          <source>When set, the &lt;code&gt;DEFLATE&lt;/code&gt; filter of &lt;code&gt;&lt;a href=&quot;mod/mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt; will be turned off and &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; will refuse to deliver encoded resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b18378e6769c3440c4fb1953efb7427de6252f" translate="yes" xml:space="preserve">
          <source>When setting up dynamic content, such as &lt;code&gt;mod_php&lt;/code&gt;, &lt;code&gt;mod_perl&lt;/code&gt; or &lt;code&gt;mod_python&lt;/code&gt;, many security considerations get out of the scope of &lt;code&gt;httpd&lt;/code&gt; itself, and you need to consult documentation from those modules. For example, PHP lets you setup &lt;a href=&quot;http://www.php.net/manual/en/ini.sect.safe-mode.php&quot;&gt;Safe Mode&lt;/a&gt;, which is most usually disabled by default. Another example is &lt;a href=&quot;http://www.hardened-php.net/suhosin/&quot;&gt;Suhosin&lt;/a&gt;, a PHP addon for more security. For more information about those, consult each project documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7313dcbd561cff9c771be513cce38dcae02234" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt; directives are used within a &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt; section, &lt;a href=&quot;../expr&quot;&gt;expression syntax&lt;/a&gt; can be used to manipulate the destination path or URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3827865c38a1580feae9bcff43d8cd79480a223" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt; directives are used within a &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt; section, these directives will take precedence over any globally defined &lt;code&gt;&lt;a href=&quot;#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fee1859095ff1ab34b27d36f71f09b0eeaaa15" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#cachedetailheader&quot;&gt;CacheDetailHeader&lt;/a&gt;&lt;/code&gt; directive is switched on, an &lt;strong&gt;X-Cache-Detail&lt;/strong&gt; header will be added to the response containing the detailed reason for a particular caching decision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d2bfaa69328568744c30f5db8359e46f1aa25e" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#cacheheader&quot;&gt;CacheHeader&lt;/a&gt;&lt;/code&gt; directive is switched on, an &lt;strong&gt;X-Cache&lt;/strong&gt; header will be added to the response with the cache status of this response. If the normal handler is used, this directive may appear within a &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; directive. If the quick handler is used, this directive must appear within a server or virtual host context, otherwise the setting will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9a53b89197ed92dc2f6d6d69120edc913a072e" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#cachekeybaseurl&quot;&gt;CacheKeyBaseURL&lt;/a&gt;&lt;/code&gt; directive is specified, the URL provided will be used as the base URL to calculate the URL of the cache keys in the reverse proxy configuration. When not specified, the scheme, hostname and port of the current virtual host is used to construct the cache key. When a cluster of machines is present, and all cached entries should be cached beneath the same cache key, a new base URL can be specified with this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e3918d53a9ae72f4be9c6b4c2feec24509442d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#cachestaleonerror&quot;&gt;CacheStaleOnError&lt;/a&gt;&lt;/code&gt; directive is switched on, and when stale data is available in the cache, the cache will respond to 5xx responses from the backend by returning the stale data instead of the 5xx response. While the Cache-Control headers sent by clients will be respected, and the raw 5xx responses returned to the client on request, the 5xx response so returned to the client will not invalidate the content in the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd9ce73a3944f40fac613612a399cc50fc7b579" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;mod/mod_cache#cachequickhandler&quot;&gt;CacheQuickHandler&lt;/a&gt;&lt;/code&gt; directive is set to &lt;code&gt;Off&lt;/code&gt;, the full set of request processing phases are executed and the security model remains unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84e63e13edbc3e9488daa1a0cef8e024822eaba" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Expires&lt;/code&gt; header is already part of the response generated by the server, for example when generated by a CGI script or proxied from an origin server, this module does not change or add an &lt;code&gt;Expires&lt;/code&gt; or &lt;code&gt;Cache-Control&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f151ead31c7981e39cee332a2a1eeb2649d6f7f" translate="yes" xml:space="preserve">
          <source>When the authorizer returns success and &lt;code&gt;UserExpr&lt;/code&gt; is configured and evaluates to an empty string (e.g., authorizer didn't return a variable), this value will be used as the user id. This is typically used when the authorizer has a concept of guest, or unauthenticated, users and guest users are mapped to some specific user id for logging and other purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e758205b94dbc4cace76de35730c569f6652ff" translate="yes" xml:space="preserve">
          <source>When the end user has filled in their login details, the form will make an HTTP POST request to the original password protected URL. &lt;code&gt;&lt;a href=&quot;mod_auth_form&quot;&gt;mod_auth_form&lt;/a&gt;&lt;/code&gt; will intercept this POST request, and if HTML fields are found present for the username and password, the user will be logged in, and the original password protected URL will be returned to the user as a GET request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d748e6fa3ad3fdd2b7d8324fcf3149e5185e8737" translate="yes" xml:space="preserve">
          <source>When the functions &lt;code&gt;req&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt; are used, the header name will automatically be added to the Vary header of the HTTP response, except where otherwise noted for the directive accepting the expression. The &lt;code&gt;req_novary&lt;/code&gt; function can be used to prevent names from being added to the Vary header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f938ec7861fd0ea5d3dac95335206e54dd56db8f" translate="yes" xml:space="preserve">
          <source>When the origin server is designed to respond with different content based on the value of headers in the request, for example to serve multiple languages at the same URL, HTTP's caching mechanism makes it possible to cache multiple variants of the same page at the same URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ebcb429f7e5ef33684e13cda98ffbf31c3f08b" translate="yes" xml:space="preserve">
          <source>When the quick handler is switched off using the &lt;code&gt;&lt;a href=&quot;#cachequickhandler&quot;&gt;CacheQuickHandler&lt;/a&gt;&lt;/code&gt; directive, it becomes possible to insert the &lt;strong&gt;CACHE&lt;/strong&gt; filter at a point in the filter stack chosen by the administrator. This provides the opportunity to cache content before that content is personalised by the &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; filter, or optionally compressed by the &lt;code&gt;&lt;a href=&quot;mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt; filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9105e1266f2943b951ddd5da39e2c604591ca64" translate="yes" xml:space="preserve">
          <source>When the reverse proxy server is accessed at that url (eg: &lt;code&gt;http://rproxy.example.com/balancer-manager/&lt;/code&gt;, you will see a page similar to the below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4013df12d6a8f66a15b63f3fdfc1d89ad75d626" translate="yes" xml:space="preserve">
          <source>When the server finds an &lt;code&gt;.htaccess&lt;/code&gt; file (as specified by &lt;code&gt;&lt;a href=&quot;#accessfilename&quot;&gt;AccessFileName&lt;/a&gt;&lt;/code&gt;), it needs to know which directives declared in that file can override earlier configuration directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5f804a0ee4354ef7d31109f7f398a47f8a2cef" translate="yes" xml:space="preserve">
          <source>When the server has been compiled with gprof profiling support, &lt;code&gt;GprofDir&lt;/code&gt; causes &lt;code&gt;gmon.out&lt;/code&gt; files to be written to the specified directory when the process exits. If the argument ends with a percent symbol ('%'), subdirectories are created for each process id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f0313cb9cbba1ef4e0ac0c13d81986b7d4e6a1" translate="yes" xml:space="preserve">
          <source>When the server load goes down in a way that causes httpd to stop some processes (for example due to &lt;code&gt;&lt;a href=&quot;mpm_common#maxsparethreads&quot;&gt;MaxSpareThreads&lt;/a&gt;&lt;/code&gt;). This is particularly problematic because when the load increases again, httpd will try to start new processes. If the pattern repeats, the number of processes can rise quite a bit, ending up in a mixture of old processes trying to stop and new ones trying to do some work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd09288509fef1a4fb6844ecab2675098105022" translate="yes" xml:space="preserve">
          <source>When the server looks up a path via an internal &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#subrequest&quot;&gt;subrequest&lt;/a&gt; such as looking for a &lt;code&gt;&lt;a href=&quot;mod/mod_dir#directoryindex&quot;&gt;DirectoryIndex&lt;/a&gt;&lt;/code&gt; or generating a directory listing with &lt;code&gt;&lt;a href=&quot;mod/mod_autoindex&quot;&gt;mod_autoindex&lt;/a&gt;&lt;/code&gt;, per-request environment variables are &lt;em&gt;not&lt;/em&gt; inherited in the subrequest. Additionally, &lt;code&gt;&lt;a href=&quot;mod/mod_setenvif#setenvif&quot;&gt;SetEnvIf&lt;/a&gt;&lt;/code&gt; directives are not separately evaluated in the subrequest due to the API phases &lt;code&gt;&lt;a href=&quot;mod/mod_setenvif&quot;&gt;mod_setenvif&lt;/a&gt;&lt;/code&gt; takes action in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57884f43b4cdb5fd15603e148394c576d11f8e5" translate="yes" xml:space="preserve">
          <source>When the server looks up a path via an internal &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#subrequest&quot;&gt;subrequest&lt;/a&gt; such as looking for a &lt;code&gt;&lt;a href=&quot;mod_dir#directoryindex&quot;&gt;DirectoryIndex&lt;/a&gt;&lt;/code&gt; or generating a directory listing with &lt;code&gt;&lt;a href=&quot;mod_autoindex&quot;&gt;mod_autoindex&lt;/a&gt;&lt;/code&gt;, per-request environment variables are &lt;em&gt;not&lt;/em&gt; inherited in the subrequest. Additionally, &lt;code&gt;&lt;a href=&quot;mod_setenvif#setenvif&quot;&gt;SetEnvIf&lt;/a&gt;&lt;/code&gt; directives are not separately evaluated in the subrequest due to the API phases &lt;code&gt;&lt;a href=&quot;mod_setenvif&quot;&gt;mod_setenvif&lt;/a&gt;&lt;/code&gt; takes action in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce494b86bfbcef49ba757ad161c13e18ed0bb38" translate="yes" xml:space="preserve">
          <source>When the value parameter uses the &lt;a href=&quot;../expr&quot;&gt;ap_expr&lt;/a&gt; parser, some expression syntax will differ from examples that evaluate &lt;em&gt;boolean&lt;/em&gt; expressions such as &amp;lt;If&amp;gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed5bb5b763129ed92a95e02ab3925bd152f8d22" translate="yes" xml:space="preserve">
          <source>When this directive is set to &lt;code&gt;All&lt;/code&gt;, then any directive which has the .htaccess Context is allowed in &lt;code&gt;.htaccess&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d54e8a5c683ebb9bebc6b7ca5c81934dc401584" translate="yes" xml:space="preserve">
          <source>When this directive is set to &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#allowoverride&quot;&gt;AllowOverride&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt;, then &lt;a href=&quot;#accessfilename&quot;&gt;.htaccess&lt;/a&gt; files are completely ignored. In this case, the server will not even attempt to read &lt;code&gt;.htaccess&lt;/code&gt; files in the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd9770c8d200c42522d208f6f0d51084fb0d984" translate="yes" xml:space="preserve">
          <source>When this directive is set to &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#allowoverridelist&quot;&gt;AllowOverrideList&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;#accessfilename&quot;&gt;.htaccess&lt;/a&gt; files are completely ignored. In this case, the server will not even attempt to read &lt;code&gt;.htaccess&lt;/code&gt; files in the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9dbcc29c8a17f8de0f7be0d2170f90a8d75105" translate="yes" xml:space="preserve">
          <source>When this directive is set to a non-zero value &lt;code&gt;X&lt;/code&gt; combined with use of the &lt;code&gt;Require ldap-group someGroupDN&lt;/code&gt; directive, the provided user credentials will be searched for as a member of the &lt;code&gt;someGroupDN&lt;/code&gt; directory object or of any group member of the current group up to the maximum nesting level &lt;code&gt;X&lt;/code&gt; specified by this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7894faeec2fe7877b9155485d10b2f280a2bedd9" translate="yes" xml:space="preserve">
          <source>When this directive is specified, any successfully authenticated user will be allowed to gain access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad70b4758a0fbe135b86bc10569999ed8ee8e86" translate="yes" xml:space="preserve">
          <source>When this directive is specified, the filesystem permissions on the file being accessed are consulted. The user must be a member of a group with the same name as the group that owns the file. See &lt;code&gt;&lt;a href=&quot;mod_authz_owner&quot;&gt;mod_authz_owner&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a469c4cfe89f39721c6cdfba88d592caf5024c0b" translate="yes" xml:space="preserve">
          <source>When this directive is specified, the user must be a member of the group assigned to the file being accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86096f583d0c041ccd9a423d288a7d4fdd15687d" translate="yes" xml:space="preserve">
          <source>When this feature was added to Apache, it caused a flurry of problems on various versions of Unix because of shortsightedness. The TCP specification does not state that the &lt;code&gt;FIN_WAIT_2&lt;/code&gt; state has a timeout, but it doesn't prohibit it. On systems without the timeout, Apache 1.2 induces many sockets stuck forever in the &lt;code&gt;FIN_WAIT_2&lt;/code&gt; state. In many cases this can be avoided by simply upgrading to the latest TCP/IP patches supplied by the vendor. In cases where the vendor has never released patches (&lt;em&gt;i.e.&lt;/em&gt;, SunOS4 -- although folks with a source license can patch it themselves), we have decided to disable this feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a994d072d8479f4af71a4bd5a3be259defd6b9cb" translate="yes" xml:space="preserve">
          <source>When this freshness lifetime is missing from the request or the response, a default freshness lifetime is applied. The default freshness lifetime for cached entities is one hour, however this can be easily over-ridden by using the &lt;code&gt;&lt;a href=&quot;mod/mod_cache#cachedefaultexpire&quot;&gt;CacheDefaultExpire&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b905df3731705f71d4d867167f87c390b91761c" translate="yes" xml:space="preserve">
          <source>When used with a &lt;code&gt;Require dbd-group&lt;/code&gt; directive, it specifies a query to look up groups for the current user. This is the standard functionality of other authorization modules such as &lt;code&gt;&lt;a href=&quot;mod_authz_groupfile&quot;&gt;mod_authz_groupfile&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_dbm&quot;&gt;mod_authz_dbm&lt;/a&gt;&lt;/code&gt;. The first column value of each row returned by the query statement should be a string containing a group name. Zero, one, or more rows may be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df60ae45e5775c67392567ffa75d9f1985094a3c" translate="yes" xml:space="preserve">
          <source>When used with a &lt;code&gt;Require dbd-login&lt;/code&gt; or &lt;code&gt;Require dbd-logout&lt;/code&gt; directive, it will never deny access, but will instead execute a SQL statement designed to log the user in or out. The user must already be authenticated with &lt;code&gt;&lt;a href=&quot;mod_authn_dbd&quot;&gt;mod_authn_dbd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895fc40ab5eda6a0ba52d631625f18c8529b58c3" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&amp;lt;Limit&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;LimitExcept&amp;gt;&lt;/code&gt; directives with the &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directive, note that the first &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; to succeed authorizes the request, regardless of the presence of other &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d196233d84b9cd76fee51c59a8201ed1a65ff7" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;.htaccess&lt;/code&gt; files, be aware that the per-directory context changes things a bit. In particular, rules are taken to be relative to the current directory, rather than being the original requested URI. Consider the following examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b24906c57b72767539c0a779a3022a479e8d94e" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest#authdigestprovider&quot;&gt;AuthDigestProvider&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;dbd&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b50eb4747e3e46c6509d4ced1cb6109195a256b" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest#authdigestprovider&quot;&gt;AuthDigestProvider&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;dbm&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd5ef4d0ac50318a6a6c6d8abbf157fb9844e8b" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest#authdigestprovider&quot;&gt;AuthDigestProvider&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;file&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0427cd3a255d317c676bf2c80c700c4b7d016da" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; directive with the &lt;code&gt;anon&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa42a2502a154b84f38d7182fe808d71d38b9794" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; directive with the &lt;code&gt;ldap&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398f65d507699afee646f55bc7f105c0e65ed1dd" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_digest#authdigestprovider&quot;&gt;AuthDigestProvider&lt;/a&gt;&lt;/code&gt; and Digest Authentication, providers perform a similar check to find a matching username in their data stores. However, unlike in the Basic Authentication case, the value associated with each stored username must be an encrypted string composed from the username, realm name, and password. (See &lt;a href=&quot;http://tools.ietf.org/html/rfc2617#section-3.2.2.2&quot;&gt; RFC 2617, Section 3.2.2.2&lt;/a&gt; for more details on the format used for this encrypted string.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755516fae693004dfbde452575de3f05ae6ac6c5" translate="yes" xml:space="preserve">
          <source>When using a multi-threaded MPM under unix, the module &lt;code&gt;&lt;a href=&quot;mod_cgid&quot;&gt;mod_cgid&lt;/a&gt;&lt;/code&gt; should be used in place of this module. At the user level, the two modules are essentially identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0d739f4cf53be7af212de7e77b051c454cfbe4" translate="yes" xml:space="preserve">
          <source>When using prepared statements with a MySQL database, it is preferred to set &lt;code&gt;reconnect&lt;/code&gt; to 0 in the connection string as to avoid errors that arise from the MySQL client reconnecting without properly resetting the prepared statements. If set to 1, any broken connections will be attempted fixed, but as mod_dbd is not informed, the prepared statements will be invalidated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6024de9169998e5be7b9d8523056bc0081bc6b18" translate="yes" xml:space="preserve">
          <source>When was this document modified?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8936dfb1681f55464feefff9a9e4cc1bb197d9" translate="yes" xml:space="preserve">
          <source>When will the module de-reference aliases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d1c19dd5143a8c7fe658e537848f213d5b8650" translate="yes" xml:space="preserve">
          <source>When writing data to the client, the length of time to wait for an acknowledgement of a packet if the send buffer is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcd50bdf729699f4137ef23a8da44748469f988" translate="yes" xml:space="preserve">
          <source>When you &lt;code&gt;./configure&lt;/code&gt; you Apache httpd source tree, you need to give it '&lt;code&gt;--enable-http2&lt;/code&gt;' as additional argument to trigger the build of the module. Should your &lt;code&gt;libnghttp2&lt;/code&gt; reside in an unusual place (whatever that is on your operating system), you may announce its location with '&lt;code&gt;--with-nghttp2=&amp;lt;path&amp;gt;&lt;/code&gt;' to &lt;code&gt;configure&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66510b6381df6b3db3006259fbb6f29b234a6ca1" translate="yes" xml:space="preserve">
          <source>When you &lt;code&gt;POST&lt;/code&gt; a web form to a CGI program, the data in that form is bundled up into a special format and gets delivered to your CGI program over &lt;code&gt;STDIN&lt;/code&gt;. The program then can process that data as though it was coming in from the keyboard, or from a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0b354d4fa933212336afa0dfa505131643f078" translate="yes" xml:space="preserve">
          <source>When you have a &lt;code&gt;httpd&lt;/code&gt; built with &lt;code&gt;&lt;a href=&quot;../mod/mod_http2&quot;&gt;mod_http2&lt;/a&gt;&lt;/code&gt; you need some basic configuration for it becoming active. The first thing, as with every Apache module, is that you need to load it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61dec149d493beb49f091ebea0cd588c6392ca06" translate="yes" xml:space="preserve">
          <source>When you miss HTTP headers from the environment, make sure they are formatted according to &lt;a href=&quot;http://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt;, section 4.2: Header names must start with a letter, followed only by letters, numbers or hyphen. Any header violating this rule will be dropped silently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81276ec8624b501e21dd438c19622cb7fe1fe3ed" translate="yes" xml:space="preserve">
          <source>When you post a question about a CGI problem that you're having, whether to a mailing list, or to a newsgroup, make sure you provide enough information about what happened, what you expected to happen, and how what actually happened was different, what server you're running, what language your CGI program was in, and, if possible, the offending code. This will make finding your problem much simpler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e8a2eeb517b63f8ac99a0021a4ec8138afc45c" translate="yes" xml:space="preserve">
          <source>When you put configuration directives in a &lt;code&gt;.htaccess&lt;/code&gt; file, and you don't get the desired effect, there are a number of things that may be going wrong.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e4a8b661a9ed821cd1a9582532c84649d16b62" translate="yes" xml:space="preserve">
          <source>When you run a program from your command line, you have certain information that is passed to the shell without you thinking about it. For example, you have a &lt;code&gt;PATH&lt;/code&gt;, which tells the shell where it can look for files that you reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9683dca9625b43593a77f5b5e8d6b0027c265c" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;&lt;a href=&quot;mod_md&quot;&gt;mod_md&lt;/a&gt;&lt;/code&gt; to obtain a certificate, you become a customer of the CA (e.g. Let's Encrypt). That means you need to read and agree to their Terms of Service, so that you understand what they offer and what they might exclude or require from you. &lt;code&gt;&lt;a href=&quot;mod_md&quot;&gt;mod_md&lt;/a&gt;&lt;/code&gt; cannot, by itself, agree to such a thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc40f889454489f66e7f434d67052406b20713c" translate="yes" xml:space="preserve">
          <source>When you write CGI programs, you should consider using a code library, or module, to do most of the grunt work for you. This leads to fewer errors, and faster development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e10535141d81f18bf122a5362f9905beec9c1c4" translate="yes" xml:space="preserve">
          <source>Whenever a '+' or '-' prefixed keyword is encountered, it is applied to the current &lt;code&gt;IndexOptions&lt;/code&gt; settings (which may have been inherited from an upper-level directory). However, whenever an unprefixed keyword is processed, it clears all inherited options and any incremental settings encountered so far. Consider the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25310bea92e118c2b83ad4179505ca6385b8409" translate="yes" xml:space="preserve">
          <source>Whereas clicking on a worker, displays this page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7b702b98d1bc8c765966d7527ed5c2ece82dc4" translate="yes" xml:space="preserve">
          <source>Wherever in your URL-space you allow overrides (typically &lt;code&gt;.htaccess&lt;/code&gt; files), Apache will attempt to open &lt;code&gt;.htaccess&lt;/code&gt; for each filename component. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5728c5e5e274fa2ff484aca34cf1fc4a996e2c88" translate="yes" xml:space="preserve">
          <source>Wherever in your URL-space you do not have an &lt;code&gt;Options FollowSymLinks&lt;/code&gt;, or you do have an &lt;code&gt;Options SymLinksIfOwnerMatch&lt;/code&gt;, Apache will need to issue extra system calls to check up on symlinks. (One extra call per filename component.) For example, if you had:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae86e356e5c9bc8696abeba30d0f74af804aacf" translate="yes" xml:space="preserve">
          <source>Whether or not this request is done via HTTPS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27b044f841c4be61d357cc3698bd77f9578e4a9" translate="yes" xml:space="preserve">
          <source>Whether or not you have preloaded an ISAPI extension, all ISAPI extensions are governed by the same permissions and restrictions as CGI scripts. That is, &lt;code&gt;&lt;a href=&quot;core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt;&lt;code&gt;ExecCGI&lt;/code&gt; must be set for the directory that contains the ISAPI .dll file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31384eee3c29aa1bd76692c48ef349aac1a78a9" translate="yes" xml:space="preserve">
          <source>Whether some authorization is/was required for this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34b9c5bef58c3e09fb1f1e544a0d52f966df389" translate="yes" xml:space="preserve">
          <source>Whether this request is the initial request or a sub-request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251f105ba7c8b48dde77c6ea2a76ab15ee0e810a" translate="yes" xml:space="preserve">
          <source>Whether to use persistent connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a92ee51178f9cb4cb051d1b7ee2928017d12f75" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;&lt;a href=&quot;mod_mime&quot;&gt;mod_mime&lt;/a&gt;&lt;/code&gt; associates metadata with filename extensions, the &lt;code&gt;&lt;a href=&quot;core&quot;&gt;core&lt;/a&gt;&lt;/code&gt; server provides directives that are used to associate all the files in a given container (&lt;em&gt;e.g.&lt;/em&gt;, &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;core#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt;) with particular metadata. These directives include &lt;code&gt;&lt;a href=&quot;core#forcetype&quot;&gt;ForceType&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;core#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;core#setinputfilter&quot;&gt;SetInputFilter&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;core#setoutputfilter&quot;&gt;SetOutputFilter&lt;/a&gt;&lt;/code&gt;. The core directives override any filename extension mappings defined in &lt;code&gt;&lt;a href=&quot;mod_mime&quot;&gt;mod_mime&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea145b8e65b2f7bbdcddeb03f4dec48bd759bd8f" translate="yes" xml:space="preserve">
          <source>While TCP adjust its flow-control and window sizes, longer TLS records can get stuck in queues or get lost and need retransmission. This is of course true for all packets. TLS however needs the whole record in order to decrypt it. Any missing bytes at the end will stall usage of the received ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced38db8267b63e892cb4b9da5c0a347c82b0fc0" translate="yes" xml:space="preserve">
          <source>While processing a request, the server looks for the first existing configuration file from this list of names in every directory of the path to the document, if distributed configuration files are &lt;a href=&quot;#allowoverride&quot;&gt;enabled for that directory&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3df26c59f1ab2ca3f807389d3ef3789f627822" translate="yes" xml:space="preserve">
          <source>While sending the response to the client, it might happen that the TCP write buffer fills up because the connection is too slow. Usually in this case a &lt;code&gt;write()&lt;/code&gt; to the socket returns &lt;code&gt;EWOULDBLOCK&lt;/code&gt; or &lt;code&gt;EAGAIN&lt;/code&gt;, to become writable again after an idle time. The worker holding the socket might be able to offload the waiting task to the listener thread, that in turn will re-assign it to the first idle worker thread available once an event will be raised for the socket (for example, &quot;the socket is now writable&quot;). Please check the Limitations section for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50692d63ff5714938dba1ca56057488661ccdcd4" translate="yes" xml:space="preserve">
          <source>While set to on, asynchronous support for ISAPI callbacks is simulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e777f27cb9c1fc8692bf9145dcb03e871513d031" translate="yes" xml:space="preserve">
          <source>While that should do the trick for most, they are people who might prefer a statically linked &lt;code&gt;nghttp2&lt;/code&gt; in this module. For those, the option &lt;code&gt;--enable-nghttp2-staticlib-deps&lt;/code&gt; exists. It works quite similar to how one statically links openssl to &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42762e89aeb4ed902f53981c5977a6cbdc9c8cc" translate="yes" xml:space="preserve">
          <source>While this directive is supported in virtual host context, the changes it makes are visible to any later configuration directives, beyond any enclosing virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8481c1d9838698c2c9a8ab9e37fcc89ffae6996" translate="yes" xml:space="preserve">
          <source>While this is great for performance, it comes at a price: such vhosts need more care in their configuration. The problem is that you will have multiple requests for multiple hosts on the same TLS connection. And that makes renegotiation impossible, in face the HTTP/2 standard forbids it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c170f3de3c0a3065efd6aa2abf4ee231a3734468" translate="yes" xml:space="preserve">
          <source>While this mode offers the best performance, the administrator may find that under certain circumstances they may want to perform further processing on the request after the request is cached, such as to inject personalisation into the cached page, or to apply authorisation restrictions to the content. Under these circumstances, an administrator is often forced to place independent reverse proxy servers either behind or in front of the caching server to achieve this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f983a660ea1223340ae32159c1ab35d5e29bd2f" translate="yes" xml:space="preserve">
          <source>Wiki</source>
          <target state="translated">Wiki</target>
        </trans-unit>
        <trans-unit id="11cf73f9c8567ee6a8dc0e951be3fa2b6a768a7b" translate="yes" xml:space="preserve">
          <source>Wildcards may be included in the directory or file portion of the path. This example will fail if there is no subdirectory in conf/vhosts that contains at least one *.conf file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff8bd4880d2a0b2a7056cb41112ae8436b88568" translate="yes" xml:space="preserve">
          <source>Will behave as documented, although the &lt;code&gt;fKeepConn&lt;/code&gt; flag is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf7240160fede9fa899a2b257e7a4680b0f68cd" translate="yes" xml:space="preserve">
          <source>Will dump the full data passing through to a tempfile before the provider. &lt;strong&gt;For single-user debug only&lt;/strong&gt;; this will not support concurrent hits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9955fd321ae297f842108b36f9d73df1f957213" translate="yes" xml:space="preserve">
          <source>Will report false if the request has been aborted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b794143cad797733be6c171bd691a726f1041a" translate="yes" xml:space="preserve">
          <source>Will return the negotiated Keep-Alive status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1bdbb4ee72852efc06500b5ae4db20886c9dd52" translate="yes" xml:space="preserve">
          <source>Win32 only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615d4f9a3ffb7918071ad5358409e6221042f1d3" translate="yes" xml:space="preserve">
          <source>Win32 only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743ff20c45a530bb204ac34082aeb4e4cf3729d6" translate="yes" xml:space="preserve">
          <source>Window's mpm_winnt interprets the AcceptFilter to toggle the AcceptEx() API, and does not support http protocol buffering. &lt;code&gt;connect&lt;/code&gt; will use the AcceptEx() API, also retrieve the network endpoint addresses, but like &lt;code&gt;none&lt;/code&gt; the &lt;code&gt;connect&lt;/code&gt; option does not wait for the initial data transmission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21045e419bdc8624e310145461055e079ac2872" translate="yes" xml:space="preserve">
          <source>Windows &amp;amp; Netware only. Insecure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f78e502e2aad7494f44ebeca565b4bee8660f4" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;MDPortMap&lt;/code&gt; you can tell it which 'Internet port' corresponds to which local port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8929bb3d768d0815a22462e23474b9cf5a3234b9" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;ProtocolsHonorOrder&lt;/code&gt; set to &lt;code&gt;on&lt;/code&gt; (default), the client ordering does not matter and only the ordering in the server settings influences the outcome of the protocol negotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c83c6ae90d6a45e1744834e2aea3e7d90b816d" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;UseCanonicalName Off&lt;/code&gt; Apache httpd will form self-referential URLs using the hostname and port supplied by the client if any are supplied (otherwise it will use the canonical name, as defined above). These values are the same that are used to implement &lt;a href=&quot;../vhosts/name-based&quot;&gt;name-based virtual hosts&lt;/a&gt; and are available with the same clients. The CGI variables &lt;code&gt;SERVER_NAME&lt;/code&gt; and &lt;code&gt;SERVER_PORT&lt;/code&gt; will be constructed from the client supplied values as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf72e1592236a1f716a9fd68544b484272b5a90" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;UseCanonicalPhysicalPort Off&lt;/code&gt;, the physical ports are removed from the ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445d693d85330e488b2199d33de9dc33108767b7" translate="yes" xml:space="preserve">
          <source>With Apache's ability to set environment variables with the &lt;code&gt;SetEnvIf&lt;/code&gt; directives, and other related directives, this functionality can let you do a wide variety of dynamic content on the server side without resorting a full web application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2eeb951e8b8fdd1adfac6bc5450e92d9465868d" translate="yes" xml:space="preserve">
          <source>With Pw specified as 512, a pushed, interleaved stream would get double the weight of X. With 128 only half as much. Note that effective weights are always capped at 256.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac174e352894424922bce94c20f385c8c434846" translate="yes" xml:space="preserve">
          <source>With a network-mounted &lt;code&gt;&lt;a href=&quot;#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt; (e.g., NFS, SMB, CIFS, FUSE), the kernel may be unable to serve the network file through its own cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af665d71a8c5a4736626f2484e12b7dc545fc03" translate="yes" xml:space="preserve">
          <source>With an NFS-mounted filesystem, the kernel may be unable to reliably serve the network file through its own cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3294b20a90dc29c145dfd4329546f6ce7f57a501" translate="yes" xml:space="preserve">
          <source>With the default value, &lt;code&gt;Off&lt;/code&gt;, such URLs are refused with a 404 (Not found) error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a5f42b3915b9c429f0240d084b0e5d1e1e60d4" translate="yes" xml:space="preserve">
          <source>With the exception of some built-in comparison operators, binary operators have the form &quot;&lt;code&gt;-[a-zA-Z][a-zA-Z0-9_]+&lt;/code&gt;&quot;, i.e. a minus and at least two characters. The name is not case sensitive. Modules may register additional binary operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c8633cd17b8286dce9ad9c5d637092e68da4f9" translate="yes" xml:space="preserve">
          <source>With the file-based mechanisms &lt;em&gt;fcntl&lt;/em&gt; and &lt;em&gt;flock&lt;/em&gt;, the path, if provided, is a directory where the lock file will be created. The default directory is httpd's run-time file directory relative to &lt;code&gt;&lt;a href=&quot;#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt;. Always use a local disk filesystem for &lt;code&gt;/path/to/mutex&lt;/code&gt; and never a directory residing on a NFS- or AFS-filesystem. The basename of the file will be the mutex type, an optional instance string provided by the module, and unless the &lt;code&gt;OmitPID&lt;/code&gt; keyword is specified, the process id of the httpd parent process will be appended to make the file name unique, avoiding conflicts when multiple httpd instances share a lock file directory. For example, if the mutex name is &lt;code&gt;mpm-accept&lt;/code&gt; and the lock file directory is &lt;code&gt;/var/httpd/locks&lt;/code&gt;, the lock file name for the httpd instance with parent process id 12345 would be &lt;code&gt;/var/httpd/locks/mpm-accept.12345&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93fd6aeef55e640e2da0d1c538a721367c01fd4" translate="yes" xml:space="preserve">
          <source>With the introduction of authorization container directives such as &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireany&quot;&gt;&amp;lt;RequireAny&amp;gt;&lt;/a&gt;&lt;/code&gt;, the configuration also has control over when the authorization methods are called and what criteria determines when access is granted. See &lt;a href=&quot;../mod/mod_authz_core#logic&quot;&gt;Authorization Containers&lt;/a&gt; for an example of how they may be used to express complex authorization logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bec833ff6bd28b853be3841dd87f70848c777e" translate="yes" xml:space="preserve">
          <source>With the introduction of the new provider based authentication and authorization architecture, you are no longer locked into a single authentication or authorization method. In fact any number of the providers can be mixed and matched to provide you with exactly the scheme that meets your needs. In the following example, both the file and LDAP based authentication providers are being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1743f35fa7e2a7940fb4f69ee5c162a93988031" translate="yes" xml:space="preserve">
          <source>With the value &lt;code&gt;NoDecode&lt;/code&gt;, such URLs are accepted, but encoded slashes are not decoded but left in their encoded state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d6da88acd629a9aca84de034378f4749eb8ace" translate="yes" xml:space="preserve">
          <source>With the value &lt;code&gt;On&lt;/code&gt;, such URLs are accepted, and encoded slashes are decoded like all other encoded characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2977918fc5b634bf85c9dccf8a74c81205ec2651" translate="yes" xml:space="preserve">
          <source>With this setup, &lt;code&gt;http://example.com/phparea&lt;/code&gt; can be used to access the output of the PHP scripts, and &lt;code&gt;http://example.com/php-source&lt;/code&gt; can be used with a DAV client to manipulate them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926e794bc126277d0309fc63d3c1e38582d6afaa" translate="yes" xml:space="preserve">
          <source>Worker has been initialized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a5656d7dcc496927f591a4237dcce652ea42d3" translate="yes" xml:space="preserve">
          <source>Worker has failed dynamic health check and will not be used until it passes subsequent health checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d07e969dd37dfd96ebf47eaadbf24879776a82" translate="yes" xml:space="preserve">
          <source>Worker is a hot spare. For each worker in a given lbset that is unusable (draining, stopped, in error, etc.), a usable hot spare with the same lbset will be used in its place. Hot spares can help ensure that a specific number of workers are always available for use by a balancer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe73faf936d04c6fce12ab53a9605f5f828b6f6" translate="yes" xml:space="preserve">
          <source>Worker is administratively stopped; will not accept requests and will not be automatically retried</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18343b5c05b7d0611ad456b972bc28ebea0c5afd" translate="yes" xml:space="preserve">
          <source>Worker is available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086b7132950f03d2c8845be2b1848a66332fc94f" translate="yes" xml:space="preserve">
          <source>Worker is disabled and will not accept any requests; will be automatically retried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6a9cfd7804eb29062a2f147cedd2c0fde85e88" translate="yes" xml:space="preserve">
          <source>Worker is in an error state, usually due to failing pre-request check; requests will not be proxied to this worker, but it will be retried depending on the &lt;code&gt;retry&lt;/code&gt; setting of the worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569af7fc1b480fa26510c6ccf1123f68ecabf312" translate="yes" xml:space="preserve">
          <source>Worker is in drain mode and will only accept existing sticky sessions destined for itself and ignore all other requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0756af78fb87094c903e0f58c954efbdd8125396" translate="yes" xml:space="preserve">
          <source>Worker is in hot-standby mode and will only be used if no other viable workers or spares are available in the balancer set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3aeaafab237d2f4e58b8f642c08bb2850ac4ae" translate="yes" xml:space="preserve">
          <source>Worker is in ignore-errors mode and will always be considered available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804d48b02acac44d50fe12047561ef53c3286b70" translate="yes" xml:space="preserve">
          <source>Working with result sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dabb8334b6cbbc19635a160f00032f11eeb9962" translate="yes" xml:space="preserve">
          <source>Writing</source>
          <target state="translated">Writing</target>
        </trans-unit>
        <trans-unit id="f266a433f660b6db62d531318fe58a9d763dcd99" translate="yes" xml:space="preserve">
          <source>Writing Authorization Providers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537a8a5b77df09d0339ea9bc94f4afa2f3f0c779" translate="yes" xml:space="preserve">
          <source>Writing Handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768ea9dbda4ceaccbf08f4b8e74e59f5a9864076" translate="yes" xml:space="preserve">
          <source>Writing Hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0923fb21e44c94ecf40cddd8f2cda13771013b" translate="yes" xml:space="preserve">
          <source>Writing a CGI program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad788e7058323bdec6917f723aa1efea0eda33ad" translate="yes" xml:space="preserve">
          <source>XBitHack Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171d6141172fa9606fdfe7fd3a61679cd067a273" translate="yes" xml:space="preserve">
          <source>XHTML example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c41470bb19b913bc747f66f4652460c75446b96" translate="yes" xml:space="preserve">
          <source>XML Namespace support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d7a30b1d4ee198e646374a5ba259b55506d00e" translate="yes" xml:space="preserve">
          <source>XSLT transforms and XIncludes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276c71e4af5f18156b7d9b0f7614cbb8a0de6fd4" translate="yes" xml:space="preserve">
          <source>You can achieve the same with &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; and some &lt;code&gt;&lt;a href=&quot;mod_alias#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt; configuration, basically. If you do it yourself, please make sure to exclude the paths /.well-known/* from your redirection, otherwise &lt;code&gt;&lt;a href=&quot;mod_md&quot;&gt;mod_md&lt;/a&gt;&lt;/code&gt; might have trouble signing on new certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855aa4a66e634a1e9cb49a9682c6b050eab70165" translate="yes" xml:space="preserve">
          <source>You can adjust numerous configuration details of the &lt;em&gt;balancers&lt;/em&gt; and the &lt;em&gt;workers&lt;/em&gt; via the various parameters defined in &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt;. For example, assuming we would want &lt;code&gt;http://www3.example.com:8080&lt;/code&gt; to handle 3x the traffic with a timeout of 1 second, we would adjust the configuration as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1212fc7c4529dc572646ab5d103fba383c058d9" translate="yes" xml:space="preserve">
          <source>You can also fine-tune various failover scenarios, detailing which workers and even which balancers should be accessed in such cases. For example, the below setup implements three failover cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04de0bd77cc86a5bcaf8b8cccf8233e4199d9894" translate="yes" xml:space="preserve">
          <source>You can also override more general &lt;code&gt;ForceType&lt;/code&gt; settings by using the value of &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f2d31c5f2d052be03b8042ebb855a3c7176a13" translate="yes" xml:space="preserve">
          <source>You can also specify the expiration time calculation using an &lt;a href=&quot;#AltSyn&quot;&gt;alternate syntax&lt;/a&gt;, described earlier in this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff62f082ca491190e3933aa8614ce0aaba65a38" translate="yes" xml:space="preserve">
          <source>You can also specify the protocol using the &lt;code&gt;&lt;a href=&quot;mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2cc3faba3f0245c08d704c98e702822d9d5a0f" translate="yes" xml:space="preserve">
          <source>You can check your configuration files for syntax errors without starting the server by using &lt;code&gt;apachectl configtest&lt;/code&gt; or the &lt;code&gt;-t&lt;/code&gt; command line option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d149e5a3d3d850f6ef005056402bde74f1aa3681" translate="yes" xml:space="preserve">
          <source>You can create an htdocs subdirectory which is modifiable by other users -- since root never executes any files out of there, and shouldn't be creating files in there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85383c2328cf9cd2e710ed3471a1069a07d077b7" translate="yes" xml:space="preserve">
          <source>You can do the same thing using &lt;code&gt;&lt;a href=&quot;mod_substitute&quot;&gt;mod_substitute&lt;/a&gt;&lt;/code&gt; without invoking an external process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b64bd4e8e61c2a658e9cd94e60b23e4f64f87fb" translate="yes" xml:space="preserve">
          <source>You can insert &lt;code&gt;not&lt;/code&gt; to negate a particular requirement. Note, that since a &lt;code&gt;not&lt;/code&gt; is a negation of a value, it cannot be used by itself to allow or deny a request, as &lt;em&gt;not true&lt;/em&gt; does not constitute &lt;em&gt;false&lt;/em&gt;. Thus, to deny a visit using a negation, the block must have one element that evaluates as true or false. For example, if you have someone spamming your message board, and you want to keep them out, you could do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c18c721fa5129bec050549641be62aef598d9aa" translate="yes" xml:space="preserve">
          <source>You can optionally add a &lt;code&gt;&lt;a href=&quot;mod_session_crypto#sessioncryptopassphrase&quot;&gt;SessionCryptoPassphrase&lt;/a&gt;&lt;/code&gt; to create an encrypted session cookie. This required the additional module &lt;code&gt;&lt;a href=&quot;mod_session_crypto&quot;&gt;mod_session_crypto&lt;/a&gt;&lt;/code&gt; be loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c3e2bea4317a6a99f792f09d88b2fb63d3cb1d" translate="yes" xml:space="preserve">
          <source>You can override an earlier defined &lt;code&gt;SetHandler&lt;/code&gt; directive by using the value &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46162bac61aac9d1858883fe9d16bb68b0d7827b" translate="yes" xml:space="preserve">
          <source>You can pass additional arguments to &lt;code&gt;config.nice&lt;/code&gt;, which will be appended to your original &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76c3f06cfdf04c59080f509a2cfcf6ef687350f" translate="yes" xml:space="preserve">
          <source>You can read more about logging in the &lt;a href=&quot;logs&quot;&gt;logs documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ccde5e8043adc8b7a060bd43b157a585811ba4e" translate="yes" xml:space="preserve">
          <source>You can read more about the hosts file at &lt;a href=&quot;http://en.wikipedia.org/wiki/Hosts_(file)&quot;&gt;Wikipedia.org/wiki/Hosts_(file)&lt;/a&gt;, and more about DNS at &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;Wikipedia.org/wiki/Domain_Name_System&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1cde7752428b9f34ec7e7de963df83b021de1e" translate="yes" xml:space="preserve">
          <source>You can then use this connection in a variety of other modules, including &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_authn_dbd&quot;&gt;mod_authn_dbd&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;mod_lua&quot;&gt;mod_lua&lt;/a&gt;&lt;/code&gt;. Further usage examples appear in each of those modules' documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371cb223523077c079817582abcfb03a3d72991d" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&lt;a href=&quot;mod/mod_info&quot;&gt;mod_info&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;-DDUMP_CONFIG&lt;/code&gt; to dump the configuration with all included files and environment variables resolved and all comments and non-matching &lt;code&gt;&lt;a href=&quot;mod/core#ifdefine&quot;&gt;&amp;lt;IfDefine&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod/core#ifmodule&quot;&gt;&amp;lt;IfModule&amp;gt;&lt;/a&gt;&lt;/code&gt; sections removed. However, the output does not reflect the merging or overriding that may happen for repeated directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ca69dea7e416c9179d58d541c316b8246224e6" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;%{format}t&lt;/code&gt; directive multiple times to build up a time format using the extended format tokens like &lt;code&gt;msec_frac&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc44323eb9ba037106a399d8117b6cf30376a520" translate="yes" xml:space="preserve">
          <source>You can, if desired, prevent the client from reordering the list by also adding the &lt;code&gt;&lt;a href=&quot;#indexoptions.suppresscolumnsorting&quot;&gt;SuppressColumnSorting&lt;/a&gt;&lt;/code&gt; index option to remove the sort link from the top of the column, along with the &lt;code&gt;&lt;a href=&quot;#indexoptions.ignoreclient&quot;&gt;IgnoreClient&lt;/a&gt;&lt;/code&gt; index option to prevent them from manually adding sort options to the query string in order to override your ordering preferences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf12cee86ea99620312dd0987c6170ed8d42f1e0" translate="yes" xml:space="preserve">
          <source>You consider security at your site to be so feeble in other areas, as to make one more potential hole irrelevant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd67398d95d7d11c9093f4e24b4aed7198ebd14" translate="yes" xml:space="preserve">
          <source>You could also use this directive to configure a particular handler for files with a particular file extension. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027c4133ae0383ba4414e8a90b837adab73cf363" translate="yes" xml:space="preserve">
          <source>You could explicitly use the &lt;code&gt;&lt;a href=&quot;../mod/core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; directive, inside your main server configuration file, to specify that CGI execution was permitted in a particular directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980cb25cff3bcdd3764d9da2996e465d535f6bc4" translate="yes" xml:space="preserve">
          <source>You have no users, and nobody ever visits your server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc11935b5a1a3fcd6dac11916f99d0546cc9887a" translate="yes" xml:space="preserve">
          <source>You may finally allow &lt;code&gt;Any&lt;/code&gt; extensions to match, even if &lt;code&gt;&lt;a href=&quot;mod_mime&quot;&gt;mod_mime&lt;/a&gt;&lt;/code&gt; doesn't recognize the extension. This can cause unpredictable results, such as serving .old or .bak files the webmaster never expected to be served.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd31aef150cf5b8551378c1d46456e489bd77c8" translate="yes" xml:space="preserve">
          <source>You may place the &lt;strong&gt;CACHE&lt;/strong&gt; filter anywhere you wish within the filter chain. In this example, content is cached after being parsed by &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt;, but before being processed by &lt;code&gt;&lt;a href=&quot;mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439ca1a10d19ec11b0b44ebaa1be45fe042a95a4" translate="yes" xml:space="preserve">
          <source>You may want to use this option if you have 2 servers parsing the output of a file each processing different commands (possibly at different times).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641bdaec0d676f0944c3240433840e23f0ab93f3" translate="yes" xml:space="preserve">
          <source>You may wish to add a &lt;code&gt;&lt;a href=&quot;core#limit&quot;&gt;&amp;lt;Limit&amp;gt;&lt;/a&gt;&lt;/code&gt; clause inside the &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; directive to limit access to DAV-enabled locations. If you want to set the maximum amount of bytes that a DAV client can send at one request, you have to use the &lt;code&gt;&lt;a href=&quot;core#limitxmlrequestbody&quot;&gt;LimitXMLRequestBody&lt;/a&gt;&lt;/code&gt; directive. The &quot;normal&quot; &lt;code&gt;&lt;a href=&quot;core#limitrequestbody&quot;&gt;LimitRequestBody&lt;/a&gt;&lt;/code&gt; directive has no effect on DAV requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9509e4bdad49da988a0f126726c9887361a8e7b9" translate="yes" xml:space="preserve">
          <source>You may wish to configure the &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; module to authenticate users present in any of the domains making up the Active Directory forest. In this way both &lt;em&gt;somebody@nz.example.com&lt;/em&gt; and &lt;em&gt;someone@au.example.com&lt;/em&gt; can be authenticated using the same query at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1928e58dc222405beed9cb38406a9c44ad394ce8" translate="yes" xml:space="preserve">
          <source>You may wish to use &lt;code&gt;&lt;a href=&quot;mod_authz_host&quot;&gt;mod_authz_host&lt;/a&gt;&lt;/code&gt; inside the &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; directive to limit access to your server configuration information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28787871e313bb1e97948f9506ceb3d7bec68b27" translate="yes" xml:space="preserve">
          <source>You might notice some strange formatting with this directive on Windows, because the output from &lt;code&gt;dir&lt;/code&gt; contains the string ``&amp;lt;&lt;code&gt;dir&lt;/code&gt;&amp;gt;'' in it, which confuses browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07c9429f9513b8dcb5afa45577c180dfa9fe642" translate="yes" xml:space="preserve">
          <source>You must enable HTTP/2 via &lt;code&gt;&lt;a href=&quot;core#protocols&quot;&gt;Protocols&lt;/a&gt;&lt;/code&gt; in order to use the functionality described in this document. The HTTP/2 protocol &lt;a href=&quot;https://http2.github.io/faq/#does-http2-require-encryption&quot;&gt;does not require&lt;/a&gt; the use of encryption so two schemes are available: &lt;code&gt;h2&lt;/code&gt; (HTTP/2 over TLS) and &lt;code&gt;h2c&lt;/code&gt; (HTTP/2 over TCP).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad647919f3790139f4c850607e3d64888c060c7" translate="yes" xml:space="preserve">
          <source>You need to set protocols if you want to extend the available protocols for a server/host. By default, only the http/1.1 protocol (which includes the compatibility with 1.0 and 0.9 clients) is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9e48daf0fcb7266892d45421551a166394057c" translate="yes" xml:space="preserve">
          <source>You only need to set the protocol if you are running on non-standard ports. For example, running an &lt;code&gt;https&lt;/code&gt; site on port 8443:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14db5ece7e1cf8789261de145462253b0f5ddda" translate="yes" xml:space="preserve">
          <source>You only need to set the protocol if you are running on non-standard ports; otherwise, &lt;code&gt;http&lt;/code&gt; is assumed for port 80 and &lt;code&gt;https&lt;/code&gt; for port 443.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b560924f42ae8416b042aa427ea10df1cc3f67" translate="yes" xml:space="preserve">
          <source>You probably also want to take a look at the &lt;a href=&quot;access&quot;&gt;Access Control&lt;/a&gt; howto, which discusses the various ways to control access to your server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb22025e1c0eef4493834885675799ce80bf0afc" translate="yes" xml:space="preserve">
          <source>You should also read the documentation for &lt;code&gt;&lt;a href=&quot;../mod/mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_host&quot;&gt;mod_authz_host&lt;/a&gt;&lt;/code&gt; which contain some more information about how this all works. The directive &lt;code&gt;&lt;a href=&quot;../mod/mod_authn_core#authnprovideralias&quot;&gt;&amp;lt;AuthnProviderAlias&amp;gt;&lt;/a&gt;&lt;/code&gt; can also help in simplifying certain authentication configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64e632bc51754952ba9e77b3dbc9794b65b1d9b" translate="yes" xml:space="preserve">
          <source>You should always test any new version in your environment before putting it into production. For example, you can install and run the new version along side the old one by using a different &lt;code&gt;--prefix&lt;/code&gt; and a different port (by adjusting the &lt;code&gt;&lt;a href=&quot;mod/mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt; directive) to test for any incompatibilities before doing the final upgrade.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f867f59042a51868cd31e8be763d7f47108323b" translate="yes" xml:space="preserve">
          <source>You should avoid using &lt;code&gt;.htaccess&lt;/code&gt; files completely if you have access to httpd main server config file. Using &lt;code&gt;.htaccess&lt;/code&gt; files slows down your Apache http server. Any directive that you can include in a &lt;code&gt;.htaccess&lt;/code&gt; file is better set in a &lt;code&gt;&lt;a href=&quot;../mod/core#directory&quot;&gt;Directory&lt;/a&gt;&lt;/code&gt; block, as it will have the same effect with better performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b7e0f683c608e644cd270142d8970c5d0f5c02" translate="yes" xml:space="preserve">
          <source>You should then be able to request your first document via the URL &lt;code&gt;http://localhost/&lt;/code&gt;. The web page you see is located under the &lt;code&gt;&lt;a href=&quot;mod/core#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt;, which will usually be &lt;code&gt;&lt;em&gt;PREFIX&lt;/em&gt;/htdocs/&lt;/code&gt;. Then &lt;a href=&quot;stopping&quot;&gt;stop&lt;/a&gt; the server again by running:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b36eb7292312d29f6d879277e4d20857816ec4" translate="yes" xml:space="preserve">
          <source>You trust your users not to write scripts which will deliberately or accidentally expose your system to an attack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab42a139b0c493777673c2bf9d32551376cfe0f" translate="yes" xml:space="preserve">
          <source>You will also need to make sure that the modules &lt;code&gt;&lt;a href=&quot;../mod/mod_authn_core&quot;&gt;mod_authn_core&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core&quot;&gt;mod_authz_core&lt;/a&gt;&lt;/code&gt; have either been built into the httpd binary or loaded by the httpd.conf configuration file. Both of these modules provide core directives and functionality that are critical to the configuration and use of authentication and authorization in the web server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736a44555d57900dbb87b3ad70bacd0a2f0a35bf" translate="yes" xml:space="preserve">
          <source>You will probably want to use &lt;code&gt;&lt;a href=&quot;mod_authz_host&quot;&gt;mod_authz_host&lt;/a&gt;&lt;/code&gt; to limit access to your server configuration information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b5c5962cd2985e9ca139a922d0dc729e54a422" translate="yes" xml:space="preserve">
          <source>You would not want to use the full option, unless you assure the group-execute bit is unset for every SSI script which might &lt;code&gt;#include&lt;/code&gt; a CGI or otherwise produces different output on each hit (or could potentially change on subsequent requests).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a98ad0ebf689d82da69c3a62101c108aa564233" translate="yes" xml:space="preserve">
          <source>You would then invoke this macro several times to create virtual hosts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf85c1a798fc16dea425ffd9ba3b499c47754516" translate="yes" xml:space="preserve">
          <source>You'll get the same response as before, but it will be appended to the existing file, rather than creating a new file. (It's the &lt;code&gt;-c&lt;/code&gt; that makes it create a new password file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c62a55799abaff169a66ce82f2a6f56c2f1a79" translate="yes" xml:space="preserve">
          <source>You'll sometimes also see this type of string appended to a URL. When that is done, the server puts that string into the environment variable called &lt;code&gt;QUERY_STRING&lt;/code&gt;. That's called a &lt;code&gt;GET&lt;/code&gt; request. Your HTML form specifies whether a &lt;code&gt;GET&lt;/code&gt; or a &lt;code&gt;POST&lt;/code&gt; is used to deliver the data, by setting the &lt;code&gt;METHOD&lt;/code&gt; attribute in the &lt;code&gt;FORM&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a7d077259287bb449e9e2bc88d55b1f4afa659" translate="yes" xml:space="preserve">
          <source>You're adding a header to a locally generated non-success (non-2xx) response, such as a redirect, in which case only the table corresponding to &lt;code&gt;always&lt;/code&gt; is used in the ultimate response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde3e763a711af06a7cd8535e9b343a6d666276d" translate="yes" xml:space="preserve">
          <source>You're modifying or removing a header generated by a CGI script or by &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt;, in which case the CGI scripts' headers are in the table corresponding to &lt;code&gt;always&lt;/code&gt; and not in the default table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03685d5e51343260cb9521ef42ec518ebec02e90" translate="yes" xml:space="preserve">
          <source>You're modifying or removing a header generated by some piece of the server but that header is not being found by the default &lt;code&gt;onsuccess&lt;/code&gt; condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e146d7418d08997438b1605d3f9f94706d01dd46" translate="yes" xml:space="preserve">
          <source>Your first CGI program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343ee120c11f45ac3d5423e81dd33d617ad96e59" translate="yes" xml:space="preserve">
          <source>Your program is then responsible for splitting that string up into useful information. Fortunately, there are libraries and modules available to help you process this data, as well as handle other of the aspects of your CGI program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882eb64d904d8289123b88f21f5f33c5ba2a529e" translate="yes" xml:space="preserve">
          <source>Zlib compression window size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="40cc474b3d42448dda6ce4d33c9a245533cd029e" translate="yes" xml:space="preserve">
          <source>a URL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ebd0c06c29bc3b08274717a41b19196ee279b7" translate="yes" xml:space="preserve">
          <source>a floating-point number with a value in the range 0[.000] to 1[.000], indicating the relative 'quality' of this variant compared to the other available variants, independent of the client's capabilities. For example, a jpeg file is usually of higher source quality than an ascii file if it is attempting to represent a photograph. However, if the resource being represented is ascii art, then an ascii file would have a higher source quality than a jpeg file. All &lt;code&gt;qs&lt;/code&gt; values are therefore specific to a given resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da23614e02469a0d7c7bd1bdab5c9c474b1904dc" translate="yes" xml:space="preserve">
          <source>ab</source>
          <target state="translated">ab</target>
        </trans-unit>
        <trans-unit id="5ba15f733c8dc4c457f2e1d97ae43d1faba88023" translate="yes" xml:space="preserve">
          <source>accept Serialization - Multiple Sockets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e4020a0db6f81fcdf7a9b559b60ed790624e57" translate="yes" xml:space="preserve">
          <source>accept Serialization - Single Socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7564312f20d94574aae7518d56ecfeaddc6331b7" translate="yes" xml:space="preserve">
          <source>access_compat_module</source>
          <target state="translated">access_compat_module</target>
        </trans-unit>
        <trans-unit id="6fe7412cd35021c03aa267d66c1c14067b520e5b" translate="yes" xml:space="preserve">
          <source>actions_module</source>
          <target state="translated">actions_module</target>
        </trans-unit>
        <trans-unit id="1c5e7daacb435d492d388cd64f5fa9a25a72883b" translate="yes" xml:space="preserve">
          <source>alias_module</source>
          <target state="translated">alias_module</target>
        </trans-unit>
        <trans-unit id="ef90394042620d154f58bb2899cde1f8cad95465" translate="yes" xml:space="preserve">
          <source>all-in-one file for compilation convenience when moving from one version of Apache to the next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c443e9135f6d03ec859e691ebf8690fc82bbce05" translate="yes" xml:space="preserve">
          <source>allowmethods_module</source>
          <target state="translated">allowmethods_module</target>
        </trans-unit>
        <trans-unit id="162ffd8f2a5cd80ed94a8acfef9cb056f4c1fe4e" translate="yes" xml:space="preserve">
          <source>alternate name for &lt;code&gt;H2PUSH&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965dd83dde8175ea2b278234d9c07af6ae9ef018" translate="yes" xml:space="preserve">
          <source>an HTML processing filter will only run if the content is text/html or application/xhtml+xml</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
