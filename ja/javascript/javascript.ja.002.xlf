<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="19f7daca497866407a804d2515195e9b50de7a0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduceRight&lt;/code&gt; executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the array over which iteration is occurring.</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; は、配列に存在する各要素に対して1回コールバック関数を実行します。配列の穴を除き、4つの引数を受け取ります。初期値（または前のコールバック呼び出しからの値）、現在の要素の値、現在のインデックス、および反復が発生している配列。</target>
        </trans-unit>
        <trans-unit id="e183bcee9fa0461929a460275eb46398543ac401" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduceRight&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;reduceRight&lt;/code&gt; in implementations which do not natively support it.</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; は、第5版でECMA-262標準に追加されました。そのため、標準のすべての実装に存在するわけではありません。これを回避するには、スクリプトの先頭に次のコードを挿入し、ネイティブでサポートされていない実装で &lt;code&gt;reduceRight&lt;/code&gt; を使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="33516876493d7ab271acd01e5cd4df9b508bb817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regexp&lt;/code&gt; (pattern)</source>
          <target state="translated">&lt;code&gt;regexp&lt;/code&gt; （パターン）</target>
        </trans-unit>
        <trans-unit id="3b50cdeee94225760e2f7747c9332b8825ee7e2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacer&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;replacer&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="edf09657a6cd9369f4157f23ba0b5f27d5b6de5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reviver&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;reviver&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="f0e904f8c24ecf682a6f5e63458cb1cbcee9bac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seconds&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;seconds&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="ff83357cc1b6979bd79773394fe6ea40a346fe11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;separator&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;separator&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="7170a35caeba3e97dec9aca1b6e4db73bc4bd2fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shift&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;shift&lt;/code&gt; は意図的に一般的です。このメソッドは、配列に似たオブジェクトに&lt;a href=&quot;../function/call&quot;&gt;呼び出し&lt;/a&gt;または&lt;a href=&quot;../function/apply&quot;&gt;適用&lt;/a&gt;できます。一連の連続するゼロベースの数値プロパティの最後のプロパティを反映する &lt;code&gt;length&lt;/code&gt; プロパティを含まないオブジェクトは、意味のある動作をしない場合があります。</target>
        </trans-unit>
        <trans-unit id="160dad759dd0e75b44cd564955c2cdc5c93e7148" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string.</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; は、1つの文字列からテキストを抽出し、新しい文字列を返します。1つの文字列のテキストを変更しても、他の文字列には影響しません。</target>
        </trans-unit>
        <trans-unit id="c5f97bc4748414b9af188076accbb28e2bc86ead" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; extracts up to but not including &lt;code&gt;endIndex&lt;/code&gt;. &lt;code&gt;str.slice(1, 4)&lt;/code&gt; extracts the second character through the fourth character (characters indexed 1, 2, and 3).</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; は、 &lt;code&gt;endIndex&lt;/code&gt; まで（ただし、これを含まない）を抽出します。 &lt;code&gt;str.slice(1, 4)&lt;/code&gt; は、2番目の文字から4番目の文字（1、2、および3のインデックスが付けられた文字）を抽出します。</target>
        </trans-unit>
        <trans-unit id="c3e1099202446c7e4ab7ef63ac55d9f8ec063f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice&lt;/code&gt; does not alter the original array. It returns a shallow copy of elements from the original array. Elements of the original array are copied into the returned array as follows:</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; は元の配列を変更しません。元の配列から要素の浅いコピーを返します。元の配列の要素は、次のように返された配列にコピーされます。</target>
        </trans-unit>
        <trans-unit id="179b14e482dd2bf02a96de7ee24337cd6514dc71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice&lt;/code&gt; method can also be called to convert Array-like objects / collections to a new Array. You just bind the method to the object. The &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; inside a function is an example of an 'array-like object'.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; メソッドを呼び出して、配列のようなオブジェクト/コレクションを新しい配列に変換することもできます。メソッドをオブジェクトにバインドするだけです。関数内の&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;は、「配列のようなオブジェクト」の例です。</target>
        </trans-unit>
        <trans-unit id="06c5dda2e59bbcd28149fa9d5e0afd8d273ac68e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; does not mutate the array on which it is called.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; は、呼び出された配列を変更しません。</target>
        </trans-unit>
        <trans-unit id="11b28e4ba0863d328756279e3c3292205af51c63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a &lt;em&gt;truthy&lt;/em&gt; value (a value that becomes true when converted to a Boolean). If such an element is found, &lt;code&gt;some()&lt;/code&gt; immediately returns &lt;code&gt;true&lt;/code&gt;. Otherwise, &lt;code&gt;some()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; を実行 &lt;code&gt;callback&lt;/code&gt; それが1見つけるまで、アレイ内の各要素の存在のために一度関数を &lt;code&gt;callback&lt;/code&gt; 返さ&lt;em&gt;truthyの&lt;/em&gt;値（ブール値に変換したときに真となる値）。そのような要素が見つかると、 &lt;code&gt;some()&lt;/code&gt; はすぐに &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合、 &lt;code&gt;some()&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; を返します。 &lt;code&gt;callback&lt;/code&gt; は、値が割り当てられている配列のインデックスに対してのみ呼び出されます。削除されたインデックス、または値が割り当てられていないインデックスに対しては呼び出されません。</target>
        </trans-unit>
        <trans-unit id="1794642ba04e4d6337bfd3f3640e4918152c675c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;some()&lt;/code&gt; in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;fun.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; は、第5版でECMA-262標準に追加されました。そのため、標準のすべての実装に存在するわけではありません。これを回避するには、スクリプトの先頭に次のコードを挿入し、ネイティブでサポートしていない実装で &lt;code&gt;some()&lt;/code&gt; を使用できるようにします。このアルゴリズムは、厳密に1つの仮定、ECMA-262、第5版で指定された&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;元の値とその有し &lt;code&gt;fun.call&lt;/code&gt; の元の値に評価を&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="814c33c4bbb96e5e855c39b48aa6eebdeb69b0f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;some&lt;/code&gt; 、それが呼び出された上で入力された配列を変化させません。</target>
        </trans-unit>
        <trans-unit id="be6f45d77c2c5ad4e6d66e946743407f28d80e60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; is now a prototype accessor property rather than an instance's own data property.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; は、インスタンス自体のデータプロパティではなく、プロトタイプアクセサープロパティになりました。</target>
        </trans-unit>
        <trans-unit id="ec32f67a13e274cee41ce0b037a6bd6e20a67d84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;space&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;space&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="facf33433b0c7fdcba36fd5d05001e4a2741b9cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="32bc7ebdd7a94be9c6d291b91bbee7e102177381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substr()&lt;/code&gt; extracts &lt;code&gt;length&lt;/code&gt; characters from a &lt;code&gt;string&lt;/code&gt;, counting from the &lt;code&gt;start&lt;/code&gt; index.</source>
          <target state="translated">&lt;code&gt;substr()&lt;/code&gt; は、 &lt;code&gt;start&lt;/code&gt; インデックスから数えて、 &lt;code&gt;string&lt;/code&gt; から &lt;code&gt;length&lt;/code&gt; 文字を抽出します。</target>
        </trans-unit>
        <trans-unit id="ba89e1d86344d4b9f6294322e48f8743d850e860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substr&lt;/code&gt; (pattern)</source>
          <target state="translated">&lt;code&gt;substr&lt;/code&gt; （パターン）</target>
        </trans-unit>
        <trans-unit id="74bf3cc5b028ce89b3830152d34219ed010da730" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substring()&lt;/code&gt; extracts characters from &lt;code&gt;indexStart&lt;/code&gt; up to &lt;em&gt;but not including&lt;/em&gt;&lt;code&gt;indexEnd&lt;/code&gt;. In particular:</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; は、 &lt;code&gt;indexStart&lt;/code&gt; から &lt;code&gt;indexEnd&lt;/code&gt; まで（&lt;em&gt;ただし&lt;/em&gt;、endEnd &lt;em&gt;を含まない&lt;/em&gt;）の文字を抽出します。特に：</target>
        </trans-unit>
        <trans-unit id="f44a4e0f38b52ecf0a8a2003b18a78ebea1791aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super.prop&lt;/code&gt; cannot overwrite non-writable properties</source>
          <target state="translated">&lt;code&gt;super.prop&lt;/code&gt; は書き込み不可のプロパティを上書きできません</target>
        </trans-unit>
        <trans-unit id="7a5594874f7480f484387f72310ff0d93b8fc375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; in function calls</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; は関数呼び出しで</target>
        </trans-unit>
        <trans-unit id="2b5ee3fe1f8e0e75aa710db2fa0a27deb969033d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; on the object's prototype chain</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; オブジェクトのプロトタイプチェーン上のこれ</target>
        </trans-unit>
        <trans-unit id="b501381387afcdf844a20f96f0b6091228630172" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; with a getter or setter</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; はゲッターまたはセッターで</target>
        </trans-unit>
        <trans-unit id="0d5e6c58c5cd9b050c7049083d44fd11c2eec388" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt;: only use &lt;code&gt;this&lt;/code&gt; when it refers to an object you created.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; ： &lt;code&gt;this&lt;/code&gt; は、作成したオブジェクトを参照する場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="779aceeb7270cdad00cb940de800bd7521481776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisArg&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="5a08d5948b2def2607aed3f4f4280c011a8b47f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="a3e9c8c91a10a0289e722c74917e77510f78f592" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toFixed()&lt;/code&gt; returns a string representation of &lt;code&gt;numObj&lt;/code&gt; that does not use exponential notation and has exactly &lt;code&gt;digits&lt;/code&gt; digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If &lt;code&gt;numObj&lt;/code&gt; is greater than &lt;code&gt;1e+21&lt;/code&gt;, this method simply calls &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt; and returns a string in exponential notation.</source>
          <target state="translated">&lt;code&gt;toFixed()&lt;/code&gt; は、指数表記を使用しない &lt;code&gt;numObj&lt;/code&gt; の文字列表現を返します。小数点以下の桁は正確に &lt;code&gt;digits&lt;/code&gt; です。数値は必要に応じて丸められ、小数部は指定された長さになるように必要に応じてゼロが埋め込まれます。 &lt;code&gt;numObj&lt;/code&gt; が &lt;code&gt;1e+21&lt;/code&gt; より大きい場合、このメソッドは&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt;を呼び出し、指数表記の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="a8b651b9c77ed0ce1c0de403bac2282de958ed8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toJSON()&lt;/code&gt; behavior</source>
          <target state="translated">&lt;code&gt;toJSON()&lt;/code&gt; の動作</target>
        </trans-unit>
        <trans-unit id="80382765aecda671c63e02055ef7711dfa13c7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toLocaleDateString&lt;/code&gt;: IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;toLocaleDateString&lt;/code&gt; ： &lt;code&gt;timeZone&lt;/code&gt; オプションのIANAタイムゾーン名</target>
        </trans-unit>
        <trans-unit id="1b752b34a5916bc298b5c8206b28f514ea8ff59f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toLocaleString&lt;/code&gt;: IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;toLocaleString&lt;/code&gt; ： &lt;code&gt;timeZone&lt;/code&gt; オプションのIANAタイムゾーン名</target>
        </trans-unit>
        <trans-unit id="6eb277cafd46f4159c896025370f12a2f6d64434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toLocaleTimeString&lt;/code&gt;: IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;toLocaleTimeString&lt;/code&gt; ： &lt;code&gt;timeZone&lt;/code&gt; オプションのIANAタイムゾーン名</target>
        </trans-unit>
        <trans-unit id="24c0e4e4bc808aeef7016fa7c11598fcba4dde6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; can be used with every object and allows you to get its class. To use the &lt;code&gt;Object.prototype.toString()&lt;/code&gt; with every object, you need to call &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; on it, passing the object you want to inspect as the first parameter called &lt;code&gt;thisArg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; はすべてのオブジェクトで使用でき、そのクラスを取得できます。 &lt;code&gt;Object.prototype.toString()&lt;/code&gt; をすべてのオブジェクトで使用するには、そのオブジェクトで&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;を呼び出し、検査するオブジェクトを &lt;code&gt;thisArg&lt;/code&gt; という最初のパラメーターとして渡します。</target>
        </trans-unit>
        <trans-unit id="ebaec00cdc4f2608e90c999113783bb2ce314eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; is a generic method, it does not require that its &lt;code&gt;this&lt;/code&gt; is a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance. However, it must have an internal &lt;code&gt;[[TimeValue]]&lt;/code&gt; property that can't be constructed using native javascript, so it's effectively limited to use with &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instances. If called on a non&amp;ndash;Date instance, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; はジェネリックメソッドであり、 &lt;code&gt;this&lt;/code&gt; が&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;インスタンスである必要はありません。ただし、ネイティブのJavaScriptを使用して構築できない内部 &lt;code&gt;[[TimeValue]]&lt;/code&gt; プロパティが必要なため、事実上、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;インスタンスでの使用に制限されています。Date以外のインスタンスで呼び出されると、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="03e7516d03397c9f071fe8f614d35da9a8a7cb33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true || (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; is short-circuit evaluated to true.</source>
          <target state="translated">&lt;code&gt;true || (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; は、短絡と評価されて真になります。</target>
        </trans-unit>
        <trans-unit id="38cbb75fcf75ae853ba9352668f45a213d129616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; for all cases except when the property is an &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;own&lt;/a&gt;&lt;a href=&quot;../errors/cant_delete&quot;&gt;non-configurable&lt;/a&gt; property, in which case, &lt;code&gt;false&lt;/code&gt; is returned in non-strict mode.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; プロパティが&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;独自&lt;/a&gt;&lt;a href=&quot;../errors/cant_delete&quot;&gt;の設定不可能な&lt;/a&gt;プロパティである場合を除き、すべてのケースでtrue。この場合、非厳密モードでは &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="43d49a42f4ac24a23d7b0dc480f52bb724400658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;Map&lt;/code&gt; object existed and has been removed, or &lt;code&gt;false&lt;/code&gt; if the element does not exist.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;Map&lt;/code&gt; オブジェクト内の要素が存在し、削除されている場合はtrue、存在しない場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b52fa274694ea5a1179413a7e3384afacd0c8c93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;Set&lt;/code&gt; object has been removed successfully; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt; オブジェクトの要素が正常に削除された場合はtrue。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad47e78b85ff8fcadb3f477f5ee28babaf94f1aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;WeakMap&lt;/code&gt; object has been removed successfully. &lt;code&gt;false&lt;/code&gt; if the key is not found in the &lt;code&gt;WeakMap&lt;/code&gt; or if the key is not an object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;WeakMap&lt;/code&gt; オブジェクトの要素が正常に削除された場合はtrue。キーが &lt;code&gt;WeakMap&lt;/code&gt; で見つからない場合、またはキーがオブジェクトでない場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dbd4f5c319694e7739e297c51a6f63c48382b8ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このプロパティ記述子のタイプが変更される可能性があり、プロパティが対応するオブジェクトから削除される可能性がある場合にのみtrue。</target>
        </trans-unit>
        <trans-unit id="a261c928f83c6ef114df5a7b67df45bdfdd4d65e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the value associated with the property may be changed (data descriptors only).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; プロパティに関連付けられた値が変更される可能性がある場合にのみtrue（データ記述子のみ）。</target>
        </trans-unit>
        <trans-unit id="2998d7302bb6803e20e9c8b2bacf115cfee7be97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the value associated with the property may be changed with an &lt;a href=&quot;../../operators/assignment_operators&quot;&gt;assignment operator&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; プロパティに関連付けられた値が&lt;a href=&quot;../../operators/assignment_operators&quot;&gt;代入演算子で&lt;/a&gt;変更される可能性がある場合にのみtrue。</target>
        </trans-unit>
        <trans-unit id="b9f79a7d054490db92eba9d372aa4b719752b605" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if this property shows up during enumeration of the properties on the corresponding object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 対応するオブジェクトのプロパティの列挙中にこのプロパティが表示される場合にのみtrue。</target>
        </trans-unit>
        <trans-unit id="403ab8fef7185da9ea8f236690743212ee3f4511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given argument is one of the &lt;code&gt;ArrayBuffer&lt;/code&gt; views; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 指定された引数が &lt;code&gt;ArrayBuffer&lt;/code&gt; ビューの1つである場合はtrue。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ad722b1a78f0b3aaa3ab9fc3122d01b5ab72196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given characters are found at the beginning of the string; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 指定された文字が文字列の先頭にある場合はtrue。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="599635e4a36f0da6f478ec8cea82bf84c7e4eba4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given characters are found at the end of the string; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 指定された文字が文字列の最後にある場合はtrue。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="efce8eb89437ea55e8a2d32953d36dcf92c4b621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given value is &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 指定された値が&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; の&lt;/a&gt;場合はtrue。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="342737374e8a91e88099d9b9c6cf35e172a22132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the search string is found anywhere within the given string; otherwise, &lt;code&gt;false&lt;/code&gt; if not.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 指定された文字列内のどこかに検索文字列が見つかった場合はtrue。そうでない場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81c424b5f4868e1250efd5e39d0663d70bdfaf0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the value is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 値が&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;の場合はtrue。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="559a1263b837d64ca49563260ab655c8946e0b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if there is a match between the regular expression and the specified string; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 正規表現と指定された文字列が一致する場合はtrue。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b06a8d0aa1f35f09637f0a833487b8ac3df2eaf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 演算子</target>
        </trans-unit>
        <trans-unit id="e39019e70685809a646df8badf13aa6fcb90f191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;; i.e., it is a variable in global scope. The initial value of &lt;code&gt;undefined&lt;/code&gt; is the primitive value &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; は&lt;em&gt;グローバルオブジェクトの&lt;/em&gt;プロパティです。つまり、グローバルスコープの変数です。 &lt;code&gt;undefined&lt;/code&gt; の初期値は、プリミティブ値 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e32478874aacd9d501e1cb1554de2adde3425fe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="583f1a093d9e0daac2d6218f56fbe2b878d0a75c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uneval()&lt;/code&gt; is a top-level function and is not associated with any object.</source>
          <target state="translated">&lt;code&gt;uneval()&lt;/code&gt; はトップレベルの関数であり、どのオブジェクトにも関連付けられていません。</target>
        </trans-unit>
        <trans-unit id="54ea170c667936dd460a01147aec68e0e36f24d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unshift&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;unshift&lt;/code&gt; は意図的に一般的です。このメソッドは、配列に似たオブジェクトに&lt;a href=&quot;../function/call&quot;&gt;呼び出し&lt;/a&gt;または&lt;a href=&quot;../function/apply&quot;&gt;適用&lt;/a&gt;できます。一連の連続するゼロベースの数値プロパティの最後のプロパティを反映する &lt;code&gt;length&lt;/code&gt; プロパティを含まないオブジェクトは、意味のある動作をしない場合があります。</target>
        </trans-unit>
        <trans-unit id="082c78c82d02cfa1aa55b9668629269cfe246e0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value1&lt;/code&gt;, &lt;code&gt;value2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;valueN&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;value1&lt;/code&gt; 、 &lt;code&gt;value2&lt;/code&gt; 、&amp;hellip;、 &lt;code&gt;valueN&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="d8fca77d17b58678670fbc0cae9a64a21cc517f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - any JavaScript value returned by the iterator. Can be omitted when &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -イテレータから返されたJavaScriptの値。 &lt;code&gt;done&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合は省略できます。</target>
        </trans-unit>
        <trans-unit id="719b0a44fa3a7cc390dda454c3238006d814f0f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;: A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/USVString&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt; representing the data type of the global. This can be one of &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;f32&lt;/code&gt;, and &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; ：グローバルのデータ型を表す&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/USVString&quot;&gt; &lt;code&gt;USVString&lt;/code&gt; &lt;/a&gt;。これは、 &lt;code&gt;i32&lt;/code&gt; 、 &lt;code&gt;i64&lt;/code&gt; 、 &lt;code&gt;f32&lt;/code&gt; 、および &lt;code&gt;f64&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="e73f3f1f5fa4d6bd92c5a843d08920d8f064e14a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="b278bbc667f37602237e3f657c44d68ec7b00636" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var1&lt;/code&gt;, &lt;code&gt;var2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;varN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;var1&lt;/code&gt; 、 &lt;code&gt;var2&lt;/code&gt; 、&amp;hellip;、 &lt;code&gt;varN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="185c9b3f09ed3b97953f5ab491884df10b2d1078" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; declarations, wherever they occur, are processed before any code is executed. This is called hoisting, and is discussed further below.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 宣言は、どこで発生しても、コードが実行される前に処理されます。これは巻き上げと呼ばれ、以下でさらに説明します。</target>
        </trans-unit>
        <trans-unit id="e29396e88101aa5c9c6e5b1a6ea79a0ca2383722" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; 、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1ab0381dcfa7096741dbbe819c3f0cd4e33a1de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; 、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt; 、 &lt;code&gt;hour&lt;/code&gt; 、 &lt;code&gt;minute&lt;/code&gt; 、 &lt;code&gt;second&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a3d71da112f61025ed1ed587e449658a6dd9467" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with&lt;/code&gt; check&lt;code&gt;: with(proxy) { (foo); }&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; チェック &lt;code&gt;: with(proxy) { (foo); }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e21e2f9b82bc91902812d873f3f79cfae15e1f2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="127e3bef85bcf72c62d28958d52e82b0eba14fa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3c455c86448186ceb1938325bdc16b3566e6f09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield*&lt;/code&gt; is an expression, not a statement, so it evaluates to a value.</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; は式ではなくステートメントであるため、値に評価されます。</target>
        </trans-unit>
        <trans-unit id="419dd5b8fccd2a6487579a6a8a9b5e7f19fe9565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield&lt;/code&gt;, &lt;code&gt;yield*&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 、 &lt;code&gt;yield*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="341bf96f46b0c81adb002d295542211646e18d09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{a, b} = {a: 1, b: 2}&lt;/code&gt; is not valid stand-alone syntax, as the &lt;code&gt;{a, b}&lt;/code&gt; on the left-hand side is considered a block and not an object literal.</source>
          <target state="translated">&lt;code&gt;{a, b} = {a: 1, b: 2}&lt;/code&gt; is not valid stand-alone syntax, as the &lt;code&gt;{a, b}&lt;/code&gt; on the left-hand side is considered a block and not an object literal.</target>
        </trans-unit>
        <trans-unit id="5230ab5dda2ed412cc89baa47822f4d75125653e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(But if same object is created simply in different order -- at least in some implementations...)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(But if same object is created simply in different order -- at least in some implementations...)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dfb02ceb026e6ae5ac6f0be402c1b301d7940564" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(In addition to all the string-related functions shown above, this also adds:)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(In addition to all the string-related functions shown above, this also adds:)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a2eef995cc95e10cdc733dccecfaa31698e73159" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;A simple common debugging function:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;簡単な一般的なデバッグ機能：&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5d5b905aab17381457ccd41c46671a2d91479799" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implementation-dependent&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Implementation-dependent&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7fa0ad8b5a8291adb411d07ca7859a1bddd190ce" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Not such simple results: (especially if silent error-trapping had hidden the error messages)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;そのような単純な結果ではありません：（特に、サイレントエラートラップがエラーメッセージを隠していた場合）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="717f3e3fcef4bcf703ec3a92b35b6d2e55c89b37" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;CompileError&lt;/code&gt; constructor contains no methods of its own, however, it does inherit some methods through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;CompileError&lt;/code&gt; のコンストラクタは、しかし、それはプロトタイプチェーンを通していくつかのメソッドを継承しない、自分自身のメソッドが含まれていません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="87700a667a6673156a97eafb30f14af47b5921a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;CompileError&lt;/code&gt; constructor contains no unique properties of its own, however, it does inherit some properties through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;CompileError&lt;/code&gt; のコンストラクタは、しかし、それはプロトタイプチェーンを通していくつかのプロパティを継承しない、それ自身のユニークな特性が含まれていません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f15b7e992ab5dd1f13952a86ad0bf02cdea5df4b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;LinkError&lt;/code&gt; constructor contains no methods of its own, however, it does inherit some methods through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;LinkError&lt;/code&gt; のコンストラクタは、しかし、それはプロトタイプチェーンを通していくつかのメソッドを継承しない、自分自身のメソッドが含まれていません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6c1ba8efd28bc55d3bdf90dfe77d00fb1c86e62d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;LinkError&lt;/code&gt; constructor contains no unique properties of its own, however, it does inherit some properties through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;LinkError&lt;/code&gt; のコンストラクタは、しかし、それはプロトタイプチェーンを通していくつかのプロパティを継承しない、それ自身のユニークな特性が含まれていません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="81ab2d2c1255f7e1753ac01cc91d81c8f9c48501" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;RuntimeError&lt;/code&gt; constructor contains no methods of its own, however, it does inherit some methods through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;RuntimeError&lt;/code&gt; のコンストラクタは、しかし、それはプロトタイプチェーンを通していくつかのメソッドを継承しない、自分自身のメソッドが含まれていません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="74095f42de4d7f5475ae1dbc4725b9be3544fd4f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;RuntimeError&lt;/code&gt; constructor contains no unique properties of its own, however, it does inherit some properties through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;RuntimeError&lt;/code&gt; のコンストラクタは、しかし、それはプロトタイプチェーンを通していくつかのプロパティを継承しない、それ自身のユニークな特性が含まれていません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8cb7b844be425a6fac5553f6a15fb2935cc155cf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TypedArray&lt;/em&gt;.length</source>
          <target state="translated">&lt;em&gt;TypedArray&lt;/em&gt;.length</target>
        </trans-unit>
        <trans-unit id="1c710b3236a880a923694bf6a06886ddbacad493" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bufferSource&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;bufferSource&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fba8cd3f7f6217871e25861874ae318826487b9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;descriptor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;descriptor&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="54072ae3218999871450d1ac7d5ccf9caab714d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;element&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;element&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="842439d5a5b16c0e40a6c0b28aaf23f3b2e8f80e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;fulfilled&lt;/em&gt;: meaning that the operation completed successfully.</source>
          <target state="translated">&lt;em&gt;満たされた&lt;/em&gt;：操作が正常に完了したことを意味します。</target>
        </trans-unit>
        <trans-unit id="dd168aa9d4ae49e271eef17edb16794501f68041" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a client browser in any other timezone.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;getTime（）は、時刻表現に常にUTCを使用します。たとえば、あるタイムゾーンのクライアントブラウザーgetTime（）は、他のタイムゾーンのクライアントブラウザーと同じになります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5202973f7bda6ae438bed3c03b95c200d8b18c2c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;importObject&lt;/em&gt;Optional</source>
          <target state="translated">&lt;em&gt;importObject&lt;/em&gt;Optional</target>
        </trans-unit>
        <trans-unit id="4bdbec4903c75d928d10089c854073ed37579d4d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;index&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;index&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d7b87c5aff182ec43148180c5da2bc7e9cebaa8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;initial&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;initial&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="598521aec28dde71093d6bbc59ff5cfc1299ca0e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;maximum Optional&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;最大オプション&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="934ace61f06798239432f0fa44e4ff08d6329c5a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;memoryDescriptor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;memoryDescriptor&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="38e0f8032431764a059a1cb9cc659b02c68bf62d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;module&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;module&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cb30455a66424f3529cb89fcf9b7e15c3d5db894" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;number&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;number&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d8d22cc104a692c502f9dcdf46a40697fc074e64" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;or&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;or&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c43da98eedb6185b4e71f1eec7e1639f100b2700" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pending&lt;/em&gt;: initial state, neither fulfilled nor rejected.</source>
          <target state="translated">&lt;em&gt;保留中&lt;/em&gt;：初期状態です。満たされても拒否されてもいません。</target>
        </trans-unit>
        <trans-unit id="62469c9ee4d6d79ce6f2f8d4741fef5526fd9e0a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;rejected&lt;/em&gt;: meaning that the operation failed.</source>
          <target state="translated">&lt;em&gt;rejected&lt;/em&gt;：操作が失敗したことを意味します。</target>
        </trans-unit>
        <trans-unit id="076c60f25ec5e538e4ed4f4fecd6fb1b67cb4534" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;sectionName&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;sectionName&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="24bcdb791ccc08a22b157d613997e10cb880d5ab" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;source&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;source&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="90915625bd23460bbd44a00cfa9cf6a30f7e2120" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;tableDescriptor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;tableDescriptor&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57b94954efb552b29d0a51dd28abd1e100e2963d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;value&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;value&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="186298d2b51234bde601493ff83fbb5fe6dc2235" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity&quot;&gt;&lt;code&gt;Function.arity&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity&quot;&gt;&lt;code&gt;Function.arity&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="6029dc0e32d5181c9fba478ecc8d70c25b2353fa" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger&quot;&gt;&lt;code&gt;Number.toInteger()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger&quot;&gt;&lt;code&gt;Number.toInteger()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="3d323408d32352f03d18541923ef7caf562d4d7d" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count&quot;&gt;&lt;code&gt;Object.prototype.__count__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count&quot;&gt;&lt;code&gt;Object.prototype.__count__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="21cd6cc7bf1095aefebe43ef37e8ced2ea2fbe4a" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval&quot;&gt;&lt;code&gt;Object.prototype.eval()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval&quot;&gt;&lt;code&gt;Object.prototype.eval()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="df274dbbedd00a1dd82f3a4a7d6246936b3a95f4" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/parent&quot;&gt;&lt;code&gt;Object.prototype.__parent__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/parent&quot;&gt;&lt;code&gt;Object.prototype.__parent__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="22a2cc28c8fd46b420a8e8c936878a517cb20ea9" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote&quot;&gt;&lt;code&gt;String.prototype.quote()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote&quot;&gt;&lt;code&gt;String.prototype.quote()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="f519c17b9e05ab642f70b7f859003b50b27c3755" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear&quot;&gt;&lt;code&gt;WeakMap.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear&quot;&gt;&lt;code&gt;WeakMap.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="0af0f742385c87deb76114ccabb08706485d454d" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear&quot;&gt;&lt;code&gt;WeakSet.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear&quot;&gt;&lt;code&gt;WeakSet.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="3562043c28d38e818e1d9187523ab791d7e15d59" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Removes all elements from the &lt;code&gt;WeakSet&lt;/code&gt; object.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;WeakSet&lt;/code&gt; オブジェクトからすべての要素を削除します。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="62be5d11388f2bf91d12309fb1a47e2b90a86249" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Removes all key/value pairs from the &lt;code&gt;WeakMap&lt;/code&gt; object. Note that it is possible to implement a &lt;code&gt;WeakMap&lt;/code&gt;-like object that has a &lt;code&gt;.clear()&lt;/code&gt; method by encapsulating a &lt;code&gt;WeakMap&lt;/code&gt; object that hasn't it (see example on page &lt;a href=&quot;../weakmap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt;)&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;WeakMap&lt;/code&gt; オブジェクトからすべてのキーと値のペアを削除します。ない &lt;code&gt;.clear()&lt;/code&gt; メソッドを持つ &lt;code&gt;WeakMap&lt;/code&gt; のようなオブジェクトを、それを持たない &lt;code&gt;WeakMap&lt;/code&gt; オブジェクトをカプセル化することで実装できることに注意してください（&lt;a href=&quot;../weakmap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt;ページの例を参照）&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="3c7aa0f3f104fcbc272e3a3584e844979b6c8c0f" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Removes all key/value pairs from the &lt;code&gt;WeakMap&lt;/code&gt; object. Note that it is possible to implement a &lt;code&gt;WeakMap&lt;/code&gt;-like object that has a &lt;code&gt;.clear()&lt;/code&gt; method by encapsulating a &lt;code&gt;WeakMap&lt;/code&gt; object that hasn't it (see example on page &lt;a href=&quot;weakmap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt;)&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;WeakMap&lt;/code&gt; オブジェクトからすべてのキーと値のペアを削除します。ない &lt;code&gt;.clear()&lt;/code&gt; メソッドを持つ &lt;code&gt;WeakMap&lt;/code&gt; のようなオブジェクトを、それを持たない &lt;code&gt;WeakMap&lt;/code&gt; オブジェクトをカプセル化することで実装できることに注意してください（&lt;a href=&quot;weakmap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt;ページの例を参照）&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="f336d80dafe45ae2ae62932e7bc01ae45e6a6a39" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;指定されたオブジェクトのコンテキストでJavaScriptコードの文字列を評価するために使用されましたが、削除されました。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="0bc2f9caec433cdab4e0c56b5932cc0751fa2a1f" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to evaluate the passed value and convert it to an integer (or &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;), but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;渡された値を評価して整数（または&lt;a href=&quot;infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;）に変換するために使用されましたが、削除されました。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="06147fd5b0330a3bd35221810117c0104614dc3b" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to point to an object's context, but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;オブジェクトのコンテキストを指すために使用されましたが、削除されました。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="6df39bb87236c6a95814f2126d778ad77c7fb09b" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to return the number of enumerable properties directly on a user-defined object, but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;ユーザー定義オブジェクトの列挙可能なプロパティの数を直接返すために使用されていましたが、削除されました。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="06fd1cef6bdb79a0e58063eda9afba9011f52ad0" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to specifiy the number of arguments expected by the function, but has been removed. Use the &lt;a href=&quot;function/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property instead.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;関数が期待する引数の数を指定するために使用されましたが、削除されました。代わりに&lt;a href=&quot;function/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティを使用してください。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="265633d3d66ddc1de561025f67cfe5ba36aeb85a" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to specifiy the number of arguments expected by the function, but has been removed. Use the &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property instead.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;関数が期待する引数の数を指定するために使用されましたが、削除されました。代わりに&lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティを使用してください。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="82c4c36b0afe843b69360745935e5cc612adb09e" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Wraps the string in double quotes (&quot;&lt;code&gt;&quot;&lt;/code&gt;&quot;).&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;文字列を二重引用符（ &quot; &lt;code&gt;&quot;&lt;/code&gt; &quot;）で囲みます。&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="c2edd1d39238dfdee97d64fcceb59811e32c0b09" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.from' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.from」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ec21b87dec9278fc8594eefd0e2feb0afbe15dc4" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.of' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.of」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="50181da8c7ca3c3c77058e8d742194f188be30cb" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.entries()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.prototype.entries（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="93618b2469ae3ba1395c666fa06c56e602111c2a" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.find' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.prototype.find」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a9e67246a6424819b8bcc17c0b6092e768e1685d" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.findIndex' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.prototype.findIndex」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd6f4e0049a23c4bbca92eaa29f39479abb6cff8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.forEach' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.prototype.forEach」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c9859be65b844ff2599639efb57bf72ca0f2591b" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.keys()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.prototype.keys（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="555530e63b597af98450a9d80fdf1ab621870a26" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.reduce' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.prototype.reduce」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a82a5ae53ccbde6340335955d077126e6c8107f9" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.reduceRight' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.prototype.reduceRight」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7f63a5a0facf86d23bc51132692430599e3505e8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.slice' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.prototype.slice」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="04b318feae6f39c1e4b739df7abff3764dccc63f" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.values()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「％TypedArray％.prototype.values（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2c67a3e5fb004d6ce59b555006262218dbe4b79c" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype[@@iterator]()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における '％TypedArray％.prototype [@@ iterator]（）'の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6b8b94313c26b169ad06a3892984eea7a1275836" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'Array.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「Array.prototype.toString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="05f0d395a01f847edbb134cddbd70a230cd72ba0" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArrayプロトタイプ」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="aaf87eb60417d761e3d1bde5b784dd3965f4f7a2" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.buffer' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.buffer」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="041e9f1d779d6b664311d0decdc5c7422f8cc02c" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.byteLength' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.byteLength」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5b09b27abc95298efd70295bf57bb217c76c725e" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.byteOffset' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.byteOffset」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c9fb7375e045d8b7e636f00da7f6d87a9f5b45ad" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.copyWithin' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.copyWithin」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="498626fed36d12b550426d39d4185197eba02bc5" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.every' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.every」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2964fb1fedc0fc2fb8cf624c61dbc8c8dcbc8a46" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.fill' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.fill」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6880629eea61e0e7e26ff10d8d36960ce8e472b1" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.filter' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.filter」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="00dd7391b48af10ba809bd9c0714cd1f2d6af8f8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.includes' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.includes」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="22830ca445ed4afca15737a437b93580a3f8e624" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.indexOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.indexOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3da3282a0b835f58d03e8f6a1d380259e47a0097" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.join' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.join」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ceedb06a6a4c3d0e33d4085fecbe7774c125920e" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.lastIndexOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.lastIndexOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="15f3571954f021e744e2c2871a084e198cf3beea" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.length' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.length」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d504b9133964d32f917280196b75ed9e5c33acb2" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.map' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.map」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="855c656d01612dc788a429a8d6753591ac413ab8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.reverse' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.reverse」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="30bebe3efea7dfe7266798053e324280beb1bc59" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.set' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.set」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="84545422c6366771aa76bd4ef9c53e10164fb432" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.some' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.some」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="34fca14ece1e544a703fd6b52d3f97dba54ac6a6" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.sort' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.sort」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="531d01a0bd87594f9ca5ae61086e88b35418c538" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.subarray' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.subarray」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b35e02e72a8f9d3d05d568b57e778b65d09f80b7" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.toLocaleString' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.toLocaleString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d21658e80923eecc6538b3617f1a3f50482446da" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「TypedArray.prototype.toString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d0c8ecd9ee0131f54965f622aaaba0fcec001e26" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'get %TypedArray% [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;その仕様における「get％TypedArray％[@@ species]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8e3853505372fe592bda8804bbd1d24bacc08f84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Deprecated&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a6d428e3c3bdac121ee984826a4318bc3046d02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Non-standard&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Non-standard&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a1898e32517f0ac48473cf7b8bf5b7c1c216e9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Obsolete since Gecko 58 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Gecko 58で廃止（Firefox 58 / Thunderbird 58 / SeaMonkey 2.55）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e23e7b16b1b356401be67f3b11f39c65f93e89ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Obsolete&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Obsolete&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e8f31cb3d7955b486489fd58e39cfdefd88275fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access (index into) an Array item&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列アイテムへのアクセス（インデックス付け）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bdcb55dedfa87a860f62cc64679e147f49a4d6f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add to the end of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列の最後に追加&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="05ea62e60330916a6489b6ce7bb5b8dc0c78c4b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add to the front of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列の前に追加&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33b02d206997d55697090cf6e35836cc1d3eaf90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All&lt;/strong&gt; browsers include the CustomError constructor in the stack trace when using a prototypal declaration.</source>
          <target state="translated">&lt;strong&gt;すべての&lt;/strong&gt;ブラウザーは、プロトタイプ宣言を使用するときに、スタックトレースにCustomErrorコンストラクターを含めます。</target>
        </trans-unit>
        <trans-unit id="5b683df0325a5c3aa0ff6b82a0efd33ff4fb848b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any JSON text is a valid JavaScript expression&lt;/strong&gt; &amp;ndash; but only in JavaScript engines that have implemented the &lt;a href=&quot;https://github.com/tc39/proposal-json-superset&quot;&gt;proposal to make all JSON text valid ECMA-262&lt;/a&gt;. In engines that haven't implemented the proposal, U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR are allowed in string literals and property keys in JSON; but their use in these features in JavaScript literals is a &lt;a href=&quot;syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;JSONテキストはすべて有効なJavaScript式ですが、&lt;/strong&gt;&lt;a href=&quot;https://github.com/tc39/proposal-json-superset&quot;&gt;すべてのJSONテキストを有効にするECMA-262&lt;/a&gt;の提案を実装したJavaScriptエンジンでのみ使用できます。提案を実装していないエンジンでは、JSONの文字列リテラルおよびプロパティキーでU + 2028 LINE SEPARATORおよびU + 2029 PARAGRAPH SEPARATORを使用できます。しかし、JavaScriptリテラルのこれらの機能での使用は&lt;a href=&quot;syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="5b0c0be5998f55ce07f49b011955c83a425bf461" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Arithmetic operators&lt;/strong&gt; take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).</source>
          <target state="translated">&lt;strong&gt;算術演算子&lt;/strong&gt;は、数値（リテラルまたは変数）をオペランドとして取り、単一の数値を返します。標準の算術演算子は、加算（+）、減算（-）、乗算（*）、および除算（/）です。</target>
        </trans-unit>
        <trans-unit id="d58761037eb102cdd483560e6c7d7030ff86f575" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array generics are non-standard, deprecated and will get removed in the near future&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;ジェネリック配列は非標準であり、非推奨であり、近い将来削除される予定&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="b30cb3c4fca448be47cfe32dca81740b30ec763e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array.prototype.values&lt;/strong&gt; is default implementation of &lt;strong&gt;Array.prototype[Symbol.iterator]&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Array.prototype.values&lt;/strong&gt;は、&lt;strong&gt;Array.prototype [Symbol.iterator]の&lt;/strong&gt;デフォルトの実装です。</target>
        </trans-unit>
        <trans-unit id="cfe77fb8f9d3ead7aa894195d340299d87c05d7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a function&lt;/strong&gt;, it takes two parameters: the &lt;var&gt;key&lt;/var&gt; and the &lt;var&gt;value&lt;/var&gt; being stringified. The object in which the key was found is provided as the replacer's &lt;code&gt;this&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;strong&gt;関数として、&lt;/strong&gt; 2つのパラメータを取ります。文字列化される &lt;var&gt;key&lt;/var&gt; と &lt;var&gt;value&lt;/var&gt; です。キーが見つかったオブジェクトは、置換の &lt;code&gt;this&lt;/code&gt; パラメータとして提供されます。</target>
        </trans-unit>
        <trans-unit id="08de02d64d63b964ff314d3c7beb845b2d276f35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bitwise operators&lt;/strong&gt; treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;numbers&lt;/a&gt;&lt;/code&gt;. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.</source>
          <target state="translated">&lt;strong&gt;ビット演算子は&lt;/strong&gt;、オペランドを10進数、16進数、または8進 &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;numbers&lt;/a&gt;&lt;/code&gt; ではなく、32ビットのシーケンス（0と1）として扱います。たとえば、10進数の9のバイナリ表現は1001です。ビット演算子は、そのようなバイナリ表現で演算を実行しますが、標準のJavaScript数値を返します。</target>
        </trans-unit>
        <trans-unit id="1f68cd6401f243f6a15630c0fd88ba2ba9d0cc08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bonus:&lt;/strong&gt; use &lt;a href=&quot;../../operators/comparison_operators#Identity_strict_equality_(===)&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator to test if the original string was palindrome.</source>
          <target state="translated">&lt;strong&gt;おまけ：&lt;/strong&gt;&lt;a href=&quot;../../operators/comparison_operators#Identity_strict_equality_(===)&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;演算子を使用して、元の文字列が回文かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="354d7cd920e22988d709c2fcafbfc3b986052128" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contra: &lt;/strong&gt;Code using &lt;code&gt;with&lt;/code&gt; may not be forward compatible, especially when used with something other than a plain object. Consider this example:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;反対&lt;strong&gt;：&lt;/strong&gt; &lt;code&gt;with&lt;/code&gt; を使用するコードは、特にプレーンオブジェクト以外のものと使用する場合、上位互換性がない可能性があります。この例を考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="4b1d91dbcdb082d80f433f735c070501aa6f7059" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contra:&lt;/strong&gt; The &lt;code&gt;with&lt;/code&gt; statement forces the specified object to be searched first for all name lookups. Therefore all identifiers that aren't members of the specified object will be found more slowly in a 'with' block. Where performance is important, 'with' should only be used to encompass code blocks that access members of the specified object.</source>
          <target state="translated">&lt;strong&gt;コントラ：&lt;/strong&gt; &lt;code&gt;with&lt;/code&gt; の文軍指定されたオブジェクトは、すべての名前検索のために最初に検索します。したがって、指定されたオブジェクトのメンバーではないすべての識別子は、「with」ブロックでよりゆっくりと検出されます。パフォーマンスが重要な場合、「with」は、指定されたオブジェクトのメンバーにアクセスするコードブロックを囲むためにのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fd571b82c00d35e92b4ad6f646719c1880c12581" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contra:&lt;/strong&gt; The &lt;code&gt;with&lt;/code&gt; statement makes it hard for a human reader or JavaScript compiler to decide whether an unqualified name will be found along the scope chain, and if so, in which object. So given this example:</source>
          <target state="translated">&lt;strong&gt;コントラ：&lt;/strong&gt; &lt;code&gt;with&lt;/code&gt; の文がそうならば非修飾名がどのオブジェクトに、スコープチェーンに沿った、とされるかどうかを決定するために人間の読者やJavaScriptコンパイラのために懸命にそれを作ります。したがって、この例を考えると：</target>
        </trans-unit>
        <trans-unit id="0002fefd9f47b1f2fb792e23d2c9c3abaea8a1cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Copy an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;アレイをコピーする&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9fc669e554526f585dd24406b20edb1293ae49d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;アレイを作成する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e8d9129ebb409db374dea0252562001e3362acce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DO NOT rely on exact return values of -1 or 1. &lt;/strong&gt;Negative and positive integer results vary between browsers (as well as between browser versions) because the W3C specification only mandates negative and positive values. Some browsers may return -2 or 2 or even some other negative or positive value.</source>
          <target state="translated">&lt;strong&gt;-1または1の正確な戻り値に依存し&lt;/strong&gt;ないでください。W3C仕様では負の値と正の値のみが義務付けられているため、負の整数と正の整数の結果はブラウザー間（およびブラウザーのバージョン間）で異なります。一部のブラウザは、-2または2を返したり、他の負または正の値を返すこともあります。</target>
        </trans-unit>
        <trans-unit id="1d10557d3984d83778d01243f0951be3fe40e695" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default function parameters&lt;/strong&gt; allow named parameters to be initialized with default values if no value or &lt;code&gt;undefined&lt;/code&gt; is passed.</source>
          <target state="translated">&lt;strong&gt;デフォルトの関数パラメーターを&lt;/strong&gt;使用すると、値が指定されていないか &lt;code&gt;undefined&lt;/code&gt; 場合、名前付きパラメーターをデフォルト値で初期化できます。</target>
        </trans-unit>
        <trans-unit id="75559a8556e3c27c5d912beff976b58d02107da3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Defaults to &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;デフォルトは&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bfbcff8db90762ab7b7cbc62ec24a1263a90015" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deleting array elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列要素の削除&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bbf74f16f95e0cf9b687fa6ce03d882c2fd5437e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Demonstration of the internal call:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;内部呼び出しのデモ：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53c5b98fc1bbd6480cc2a37258052f312d640c9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation warning:&lt;/strong&gt; Do not use &lt;code&gt;unwatch()&lt;/code&gt; and &lt;a href=&quot;watch&quot;&gt;&lt;code&gt;watch()&lt;/code&gt;&lt;/a&gt;! These two methods were implemented only in Firefox prior to version 58, they're &lt;strong&gt;deprecated and removed in Firefox 58+&lt;/strong&gt;. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as &lt;code&gt;window&lt;/code&gt;. You can usually use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setters and getters&lt;/a&gt; or &lt;a href=&quot;../proxy&quot;&gt;proxies&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨の警告：&lt;/strong&gt; &lt;code&gt;unwatch()&lt;/code&gt; と&lt;a href=&quot;watch&quot;&gt; &lt;code&gt;watch()&lt;/code&gt; を&lt;/a&gt;使用しないでください！これらの2つのメソッドは、バージョン58より前のFirefoxでのみ実装&lt;strong&gt;されていました。Firefox58以降で&lt;/strong&gt;は&lt;strong&gt;廃止され、削除されました&lt;/strong&gt;。さらに、ウォッチポイントを使用すると、パフォーマンスに深刻な悪影響が及びます。これは、 &lt;code&gt;window&lt;/code&gt; などのグローバルオブジェクトで使用する場合に特に当てはまります。通常は、代わりに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;セッターとゲッター&lt;/a&gt;または&lt;a href=&quot;../proxy&quot;&gt;プロキシを&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="69de191aa06761f1ef525b205cd37c6dd77d7c9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation warning:&lt;/strong&gt; Do not use &lt;code&gt;watch()&lt;/code&gt; and &lt;a href=&quot;unwatch&quot;&gt;&lt;code&gt;unwatch()&lt;/code&gt;&lt;/a&gt;! These two methods were implemented only in Firefox prior to version 58, they're &lt;strong&gt;deprecated and removed in Firefox 58+&lt;/strong&gt;. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as &lt;code&gt;window&lt;/code&gt;. You can usually use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setters and getters&lt;/a&gt; or &lt;a href=&quot;../proxy&quot;&gt;proxies&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨の警告：&lt;/strong&gt; &lt;code&gt;watch()&lt;/code&gt; および&lt;a href=&quot;unwatch&quot;&gt; &lt;code&gt;unwatch()&lt;/code&gt; &lt;/a&gt;は使用しないでください。これらの2つのメソッドは、バージョン58より前のFirefoxでのみ実装&lt;strong&gt;されていました。Firefox58以降で&lt;/strong&gt;は&lt;strong&gt;廃止され、削除されました&lt;/strong&gt;。さらに、ウォッチポイントを使用すると、パフォーマンスに深刻な悪影響が及びます。これは、 &lt;code&gt;window&lt;/code&gt; などのグローバルオブジェクトで使用する場合に特に当てはまります。通常は、代わりに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;セッターとゲッター&lt;/a&gt;または&lt;a href=&quot;../proxy&quot;&gt;プロキシを&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="25222a23c95aa0f2d21abd7571810ca19e4c7730" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Find the index of an item in the Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列内のアイテムのインデックスを見つける&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4dcdd1b9ec2a97e86f7bd99f0a71c4f5d77cebf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Firefox now warns about the usage of &lt;code&gt;for each...in&lt;/code&gt; and it no longer works starting with Firefox 57.&lt;br/&gt; Please see &lt;a href=&quot;../errors/for-each-in_loops_are_deprecated&quot;&gt;Warning: JavaScript 1.6's for-each-in loops are deprecated&lt;/a&gt; for migration help.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Firefoxは &lt;code&gt;for each...in&lt;/code&gt; 使用について警告するようになり、Firefox 57以降では機能しなくなりました。&lt;a href=&quot;../errors/for-each-in_loops_are_deprecated&quot;&gt;警告を&lt;/a&gt;&lt;br/&gt;参照してください：JavaScript 1.6のfor-each-inループは移行のヘルプのために非推奨になりました。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be8d6e51472f943aefdf0780162eb41648ba3c87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If it is a number&lt;/strong&gt;, successive levels in the stringification will each be indented by this many space characters (up to 10).</source>
          <target state="translated">&lt;strong&gt;数値の場合&lt;/strong&gt;、文字列化の連続するレベルはそれぞれこの数のスペース文字（最大10）でインデントされます。</target>
        </trans-unit>
        <trans-unit id="c1116add768a684f4e58eaf62c48388c556991ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If it is a string&lt;/strong&gt;, successive levels will be indented by this string (or the first ten characters of it).</source>
          <target state="translated">&lt;strong&gt;文字列の場合&lt;/strong&gt;、連続するレベルはこの文字列（またはその最初の10文字）によってインデントされます。</target>
        </trans-unit>
        <trans-unit id="48c257781cc4b92a9f97156dca91f0debe711918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Since compilation for large modules can be expensive, developers should only use the &lt;code&gt;Module()&lt;/code&gt; constructor when synchronous compilation is absolutely required; the asynchronous &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method should be used at all other times.</source>
          <target state="translated">&lt;strong&gt;重要&lt;/strong&gt;：大きなモジュールのコンパイルはコストがかかる可能性があるため、同期コンパイルが絶対に必要な場合のみ、開発者は &lt;code&gt;Module()&lt;/code&gt; コンストラクタを使用する必要があります。その他の場合は常に非同期の&lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bd1aefe99b2310836321b557de98b25cf407e51f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Since instantiation for large modules can be expensive, developers should only use the &lt;code&gt;Instance()&lt;/code&gt; constructor when synchronous instantiation is absolutely required; the asynchronous &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method should be used at all other times.</source>
          <target state="translated">&lt;strong&gt;重要&lt;/strong&gt;：大きなモジュールのインスタンス化は負荷が高いため、同期インスタンス化が絶対に必要な場合にのみ、開発者は &lt;code&gt;Instance()&lt;/code&gt; コンストラクターを使用する必要があります。それ以外の場合は常に、非同期の&lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a9bf07972f40544b9b201abb81e01b4ac7dbd3dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: This method is not the most efficient way of fetching and instantiating wasm modules. If at all possible, you should use the newer &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method instead, which fetches, compiles, and instantiates a module all in one step, directly from the raw bytecode, so doesn't require conversion to an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;重要&lt;/strong&gt;：この方法は、wasmモジュールをフェッチしてインスタンス化する最も効率的な方法ではありません。可能であれば、代わりに新しい&lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。このメソッドは、モジュールをすべて1ステップで生のバイトコードから直接フェッチ、コンパイル、およびインスタンス化するため、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;への変換を必要としません。</target>
        </trans-unit>
        <trans-unit id="d8ff1f9032591ebf283b62753a8815882b515c8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Input:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e04e672456b4ff723c5f9f6e53dc395cb83b4bac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Loop over an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列のループ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48dde77d098e09c30903fcaf542b212d7acfa42e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-configurable properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;構成できないプロパティ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5709d241af5f68117d5d8e9f9e8ba6cd6442579b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-standard. Do not use!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;非標準。使ってはいけません！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3ac491f9ac5113b463db546a5ed84958fab0c7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Not to be confused with:&lt;/strong&gt; Several other languages have mechanisms for lazy evaluation and deferring a computation, which they also call &quot;promises&quot;, e.g. Scheme. Promises in JavaScript represent processes which are already happening, which can be chained with callback functions. If you are looking to lazily evaluate an expression, consider the &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow function&lt;/a&gt; with no arguments: &lt;code&gt;f = () =&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; to create the lazily-evaluated expression, and &lt;code&gt;f()&lt;/code&gt; to evaluate.</source>
          <target state="translated">&lt;strong&gt;混同しないでください。&lt;/strong&gt;他のいくつかの言語には、遅延評価と計算の延期のためのメカニズムがあり、それらは「約束」とも呼ばれます（Schemeなど）。 JavaScriptのプロミスは、すでに発生しているプロセスを表しており、コールバック関数と連鎖させることができます。式を遅延評価する場合は、引数のない&lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow関数&lt;/a&gt;を検討してください &lt;code&gt;f = () =&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; は遅延評価式を作成し、 &lt;code&gt;f()&lt;/code&gt; は評価します。</target>
        </trans-unit>
        <trans-unit id="d61ea3464cad9c0ab62e9b7e02009f31bada4249" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note :&lt;/strong&gt; In UTF-16, Unicode characters above &lt;code&gt;\uFFFF&lt;/code&gt; are encoded as two surrogate code units, of the range &lt;code&gt;\uD800&lt;/code&gt;-&lt;code&gt;\uDFFF&lt;/code&gt;. The value of each code unit is taken separately into account for the comparison. Thus the character formed by the surrogate pair &lt;code&gt;\uD655\uDE55&lt;/code&gt; will be sorted before the character &lt;code&gt;\uFF3A&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; UTF-16で、上記のUnicode文字 &lt;code&gt;\uFFFF&lt;/code&gt; 範囲の二サロゲートコード単位として符号化される &lt;code&gt;\uD800&lt;/code&gt; - &lt;code&gt;\uDFFF&lt;/code&gt; 。各コード単位の値は、比較のために個別に考慮されます。したがって、サロゲートペア &lt;code&gt;\uD655\uDE55&lt;/code&gt; によって形成される文字は、文字 &lt;code&gt;\uFF3A&lt;/code&gt; 前にソートされます。</target>
        </trans-unit>
        <trans-unit id="a9ee1c1c79242cef0d6a8d6908b45f5bd0aa2279" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note for Mozilla developers:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Mozilla開発者への注意：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="220e1fbc78a51bbe255c0338790e6417361b15cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: =&amp;gt;&lt;/strong&gt; is not an operator, but the notation for &lt;a href=&quot;functions/arrow_functions&quot;&gt;Arrow functions&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：=&amp;gt;&lt;/strong&gt;は演算子ではなく、&lt;a href=&quot;functions/arrow_functions&quot;&gt;アロー関数の&lt;/a&gt;表記です。</target>
        </trans-unit>
        <trans-unit id="21af73758032257908f95eb10b99a3fa25edcefd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; &amp;ldquo;Array-like&amp;rdquo; means that &lt;code&gt;arguments&lt;/code&gt; has a &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; property and properties indexed from zero, but it doesn't have &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;'s built-in methods like &lt;code&gt;&lt;a href=&quot;../global_objects/array/foreach&quot;&gt;forEach&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../global_objects/array/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;#Description&quot;&gt;&amp;sect;Description&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;「配列のような」とは、 &lt;code&gt;arguments&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; プロパティとゼロからインデックスが付けられたプロパティがあるが、 &lt;code&gt;&lt;a href=&quot;../global_objects/array/foreach&quot;&gt;forEach&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../global_objects/array/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; などの&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;の組み込みメソッドがないことを意味します。詳細については、&lt;a href=&quot;#Description&quot;&gt;&amp;sect;説明&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fdbf3840a2f6f9eeaa020c7a23c885188c93bd94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; A &lt;code&gt;throw&lt;/code&gt; (or returning a rejected promise) in the &lt;code&gt;finally&lt;/code&gt; callback will reject the new promise with the rejection reason specified when calling &lt;code&gt;throw()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;throw&lt;/code&gt; で（または拒否約束を返す） &lt;code&gt;finally&lt;/code&gt; コールバックが拒否理由を呼び出すときに指定した新しい約束を拒否します &lt;code&gt;throw()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba2d2aa8e4c5677b17e394010e4566e6c0629d2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Calling &lt;code&gt;watch()&lt;/code&gt; on an object for a specific property overrides any previous handler attached for that property.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;特定のプロパティのオブジェクトで &lt;code&gt;watch()&lt;/code&gt; を呼び出すと、そのプロパティに関連付けられている以前のハンドラーがオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="c5e1b863217894f54f5c1996cbd75468632a7d09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Class &lt;strong&gt;expressions&lt;/strong&gt; are subject to the same hoisting restrictions as described in the &lt;a href=&quot;#Class_declarations&quot;&gt;Class declarations&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;クラス&lt;strong&gt;式に&lt;/strong&gt;は、&lt;a href=&quot;#Class_declarations&quot;&gt;クラス宣言&lt;/a&gt;セクションで説明されているのと同じ巻き上げ制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="88bba440ee116b0187025292f62bac9e6b3181db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Concatenating array(s)/value(s) will leave the originals untouched. Furthermore, any operation on the new array (except operations on elements which are object references) will have no effect on the original arrays, and vice versa.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;配列/値を連結すると、元の配列はそのまま残ります。さらに、新しい配列に対する操作（オブジェクト参照である要素に対する操作を除く）は、元の配列には影響しません。逆も同様です。</target>
        </trans-unit>
        <trans-unit id="ce3b4b48eb733544d15ad2e35bdd85b6a5d52409" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; ECMAScript Internationalization API, implemented with Firefox 29, added the &lt;code&gt;locales&lt;/code&gt; argument to the &lt;code&gt;Number.toLocaleString()&lt;/code&gt; method. If the argument is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, this method returns localized digits specified by the OS, while the previous versions of Firefox returned&lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_numerals&quot;&gt; Western Arabic&lt;/a&gt; digits. This change has been reported as a regression affecting backward compatibility which might be fixed soon. (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=999003&quot;&gt;bug 999003&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Firefox 29で実装されたECMAScript国際化APIは、 &lt;code&gt;locales&lt;/code&gt; 引数を &lt;code&gt;Number.toLocaleString()&lt;/code&gt; メソッドに追加しました。引数が&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; の&lt;/a&gt;場合、このメソッドはOSによって指定されたローカライズされた数字を返しますが、以前のバージョンのFirefoxは&lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_numerals&quot;&gt;西アラビア&lt;/a&gt;数字を返しました。この変更は、下位互換性に影響を与える回帰として報告されており、間もなく修正される可能性があります。（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=999003&quot;&gt;バグ999003&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="8b005bd4745ae59192a510679861adb544ac3246" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For another possible approach to strings in JavaScript, please read the article about &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView&quot;&gt;&lt;code&gt;StringView&lt;/code&gt; &amp;mdash; a C-like representation of strings based on typed arrays&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JavaScriptでの文字列への別の可能なアプローチについては、&lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView&quot;&gt;型付き配列に基づくCのような文字列の表現である&lt;/a&gt; &lt;code&gt;StringView&lt;/code&gt; に関する記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="49422b1f67b73c938af873bfc9a6d9fcd09fafa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For the Array method, see &lt;a href=&quot;../array/indexof&quot;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Arrayメソッドについては、&lt;a href=&quot;../array/indexof&quot;&gt; &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fafbf00abcf5c63c2ca82ab257820e3938f88e17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For the String method, see &lt;a href=&quot;../string/indexof&quot;&gt;&lt;code&gt;String.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Stringメソッドについては、&lt;a href=&quot;../string/indexof&quot;&gt; &lt;code&gt;String.prototype.indexOf()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="86f89811eda018557eeb00403726d33bfa160377" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If &lt;code&gt;initialValue&lt;/code&gt; isn't provided, &lt;code&gt;reduce()&lt;/code&gt; will execute the callback function starting at index 1, skipping the first index. If &lt;code&gt;initialValue&lt;/code&gt; is provided, it will start at index 0.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;場合 &lt;code&gt;initialValue&lt;/code&gt; 設けられていない、 &lt;code&gt;reduce()&lt;/code&gt; 最初のインデックスをスキップし、インデックス1から始まるコールバック関数を実行します。 &lt;code&gt;initialValue&lt;/code&gt; が指定されている場合、それはインデックス0から始まります。</target>
        </trans-unit>
        <trans-unit id="0606f016259513e72d37c5d9a393efa4b1bbb49c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you wish the replacer to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;最初のオブジェクトを空の文字列プロパティを持つキーと区別する場合（両方が空の文字列をキーとして、場合によってはオブジェクトを値として提供するため）、反復回数を追跡する必要があります（それは最初の反復を超えています、それは本物の空の文字列キーです）。</target>
        </trans-unit>
        <trans-unit id="cc7ec0a50ad5c171c36ec4b7997d54a3f65a816b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/performance&quot;&gt;Web Performance API&lt;/a&gt;'s high-resolution time feature, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/now&quot;&gt;&lt;code&gt;Performance.now()&lt;/code&gt;&lt;/a&gt; can provide more reliable and precise measurements of elapsed time than &lt;a href=&quot;date/now&quot;&gt;&lt;code&gt;Date.now()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/performance&quot;&gt;Web Performance API&lt;/a&gt;の高解像度時間機能をサポートするブラウザーでは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/now&quot;&gt; &lt;code&gt;Performance.now()&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;date/now&quot;&gt; &lt;code&gt;Date.now()&lt;/code&gt; &lt;/a&gt;よりも信頼できる正確な経過時間の測定を提供できます。</target>
        </trans-unit>
        <trans-unit id="4f976fd9fea9d5aa4ce715d9bf46bd7fa9796846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is a good idea to comment the intentional use of the empty statement, as it is not really obvious to distinguish between a normal semicolon. In the following example the usage is probably not intentional:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;通常のセミコロンを区別することは本当に明らかではないため、空のステートメントの意図的な使用にコメントを付けることをお勧めします。次の例では、おそらく意図的な使用ではありません。</target>
        </trans-unit>
        <trans-unit id="7f4bbacf6321e13f6eb99261e1d22c24b709b5c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; JavaScript &lt;code&gt;Date&lt;/code&gt; objects can only be instantiated by calling JavaScript &lt;code&gt;Date&lt;/code&gt; as a constructor: calling it as a regular function (i.e. without the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator) will return a string rather than a &lt;code&gt;Date&lt;/code&gt; object; unlike other JavaScript object types, JavaScript &lt;code&gt;Date&lt;/code&gt; objects have no literal syntax.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JavaScript &lt;code&gt;Date&lt;/code&gt; オブジェクトは、JavaScript &lt;code&gt;Date&lt;/code&gt; をコンストラクターとして呼び出すことによってのみインスタンス化できます。通常の関数として（つまり、&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子なしで）呼び出すと、 &lt;code&gt;Date&lt;/code&gt; オブジェクトではなく文字列が返されます。他のJavaScriptオブジェクトタイプとは異なり、JavaScript &lt;code&gt;Date&lt;/code&gt; オブジェクトにはリテラル構文がありません。</target>
        </trans-unit>
        <trans-unit id="cba716c445446c37823ee39ce035c3f7e61e130a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; JavaScript also has &lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;a bitwise operator ^ (logical XOR)&lt;/a&gt;. &lt;code&gt;**&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt; are different (for example : &lt;code&gt;2 ** 3 === 8&lt;/code&gt; when &lt;code&gt;2 ^ 3 === 1&lt;/code&gt;.)</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JavaScriptには&lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;、ビットごとの演算子^（論理XOR）もあり&lt;/a&gt;ます。 &lt;code&gt;**&lt;/code&gt; と &lt;code&gt;^&lt;/code&gt; は異なります（例： &lt;code&gt;2 ^ 3 === 1&lt;/code&gt; 場合、2 &lt;code&gt;2 ** 3 === 8&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="771025a125bb3c93ccfe202888079e1424a8e069" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Labeled loops or blocks are very uncommon. Usually function calls can be used instead of loop jumps.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ラベル付きのループまたはブロックは非常にまれです。通常、ループジャンプの代わりに関数呼び出しを使用できます。</target>
        </trans-unit>
        <trans-unit id="1fac8f55feeec11dca5f652a1e6bc14af58f7c8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Month are 0-indexed when used as an argument of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; (thus 0 corresponds to January and 11 to December).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;月は、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;引数として使用される場合、0インデックスが付けられます（したがって、0は1月に対応し、11は12月に対応します）。</target>
        </trans-unit>
        <trans-unit id="6aefc9efe8abe1e05cdb3d94a2c17571efaa3b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Objects in string contexts convert via the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method, which is different from &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; objects converting to string primitives using &lt;code&gt;valueOf&lt;/code&gt;. All objects have a string conversion, if only &quot;&lt;code&gt;[object &lt;em&gt;type&lt;/em&gt;]&lt;/code&gt;&quot;. But many objects do not convert to number, boolean, or function.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;文字列コンテキスト内のオブジェクトは&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;メソッドを介して変換されます。これは、 &lt;code&gt;valueOf&lt;/code&gt; を使用して文字列プリミティブに変換する&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトとは異なります。&quot; &lt;code&gt;[object &lt;em&gt;type&lt;/em&gt;]&lt;/code&gt; &lt;em&gt;type&lt;/em&gt; ] &quot; のみの場合、すべてのオブジェクトは文字列変換されます。ただし、多くのオブジェクトは数値、ブール値、または関数に変換されません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="727266a08c0b936a62b4097f40ecb0ef35024e59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Parsing of strings with &lt;code&gt;Date.parse&lt;/code&gt; is strongly discouraged due to browser differences and inconsistencies.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ブラウザの違いと不整合のため、 &lt;code&gt;Date.parse&lt;/code&gt; を使用した文字列の解析はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="b4d90c5d6d9b94a1f7230d93bf106368245455c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Spread syntax effectively goes one level deep while copying an array. Therefore, it may be unsuitable for copying multidimensional arrays as the following example shows (it's the same with &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; and spread syntax).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;スプレッドの構文は、配列をコピーするときに1レベル深くなります。したがって、次の例に示すように、多次元配列のコピーには適さない場合があります（&lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt;とスプレッド構文でも同じです）。</target>
        </trans-unit>
        <trans-unit id="358e3ce297689d443eafc4cf6dc6e850fef804bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in JavaScript 1.8.5 &lt;code&gt;toString()&lt;/code&gt; called on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt;, and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt;, as defined in the 5th Edition of ECMAScript and a subsequent Errata. See &lt;a href=&quot;#Using_toString()_to_detect_object_class&quot;&gt;Using_toString()_to_detect_object_class&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JavaScript 1.8.5以降では、&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; で&lt;/a&gt;呼び出された &lt;code&gt;toString()&lt;/code&gt; は &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt; &lt;em&gt;Null&lt;/em&gt; ]を返し、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt; &lt;em&gt;Undefined&lt;/em&gt; ]を返します。これは、ECMAScriptの第5版と後続のエラッタで定義されています。&lt;a href=&quot;#Using_toString()_to_detect_object_class&quot;&gt;Using_toString（）_ to_detect_object_classを&lt;/a&gt;参照してください。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0e12c8b40a6c873368a85592313dce66b1e2b5dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; String objects are Type Object, not String! String objects are rarely used, so the following results might be surprising:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;文字列オブジェクトは文字列ではなくタイプオブジェクトです！文字列オブジェクトはめったに使用されないため、次の結果は驚くべきものになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="84fe9a5fbe07ccdfcfe25ab1224f1a2b8b21eb68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;has()&lt;/code&gt; uses the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; algorithm to determine whether the given element is found.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;技術的には、 &lt;code&gt;has()&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; アルゴリズムを使用して、指定された要素が見つかったかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="932b8bb42efb809689f0c3094f4532ecc539146e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;includes()&lt;/code&gt; uses the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; algorithm to determine whether the given element is found.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;技術的には、 &lt;code&gt;includes()&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; アルゴリズムを使用して、指定された要素が見つかったかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="98b0a7fbbe7fc19a335dd9a46844842671c58994" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;Object.create()&lt;/code&gt; method used above is relatively new. For alternative methods, please consider one of the following approaches:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;Object.create()&lt;/code&gt; 上記の使用方法は、比較的新しいものです。別の方法については、次のいずれかの方法を検討してください。</target>
        </trans-unit>
        <trans-unit id="2092b16cccf693b8d8fff7395070e011bb2ec6d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The argument &lt;code&gt;monthIndex&lt;/code&gt; is 0-based. This means that &lt;code&gt;January = 0&lt;/code&gt; and &lt;code&gt;December = 11&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;引数 &lt;code&gt;monthIndex&lt;/code&gt; は0ベースです。これは、 &lt;code&gt;January = 0&lt;/code&gt; および &lt;code&gt;December = 11&lt;/code&gt; ことを意味します。</target>
        </trans-unit>
        <trans-unit id="1955d1efaa1f8720eb71242a2a0fe4e7c8e0d0b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The reason for &lt;code&gt;unwatch()&lt;/code&gt; to take the property name &lt;em&gt;prop&lt;/em&gt; as its only parameter is due to the &quot;single handler allowing&quot; behavior of the &lt;a href=&quot;watch&quot;&gt;&lt;code&gt;watch()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;unwatch()&lt;/code&gt; がプロパティ名&lt;em&gt;prop&lt;/em&gt;を唯一のパラメーターとして取る理由は、&lt;a href=&quot;watch&quot;&gt; &lt;code&gt;watch()&lt;/code&gt; &lt;/a&gt;メソッドの「単一ハンドラー許可」動作によるものです。</target>
        </trans-unit>
        <trans-unit id="40b2c17bd14e9e2f0d83c335e3a0b242c8caae4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; in strict mode. See below.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;厳密モードでは、 &lt;code&gt;this&lt;/code&gt; 値は &lt;code&gt;undefined&lt;/code&gt; になります。下記参照。</target>
        </trans-unit>
        <trans-unit id="8c7727adbde630d97ded4c8afef19d6a4439e805" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This article describes the &lt;code&gt;Promise&lt;/code&gt; constructor and the methods and properties of such objects. To learn about the way promises work and how you can use them, we advise you to read &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Using promises&lt;/a&gt; first. The constructor is primarily used to wrap functions that do not already support promises.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この記事では、 &lt;code&gt;Promise&lt;/code&gt; コンストラクターと、そのようなオブジェクトのメソッドとプロパティについて説明します。Promiseの仕組みとその使用方法について学習するには、最初に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Promiseの使用&lt;/a&gt;を読むことをお勧めします。コンストラクターは主に、promiseをまだサポートしていない関数をラップするために使用されます。</target>
        </trans-unit>
        <trans-unit id="63e3c87f450a346f40b18eca582548e2deeb51f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This is one of the few cases in JavaScript where &lt;strong&gt;the semicolon is mandatory&lt;/strong&gt;. Indeed, without the semicolon the line that follows the cycle declaration will be considered a statement.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これは&lt;strong&gt;、セミコロンが必須&lt;/strong&gt;であるJavaScriptの数少ないケースの1つです。実際、セミコロンがなければ、サイクル宣言に続く行はステートメントと見なされます。</target>
        </trans-unit>
        <trans-unit id="f70fb05109e87bae7ee85aa0c96458c3ad964ea2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This non-native &lt;code&gt;Function.construct&lt;/code&gt; method will not work with some native constructors; like &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, for example. In these cases you have to use the &lt;a href=&quot;bind&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt; method. For example, imagine having an array like the following, to be used with &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;[2012, 11, 4]&lt;/code&gt;; in this case you have to write something like: &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt;. This is not the best way to do things, and probably not to be used in any production environment.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この非ネイティブの &lt;code&gt;Function.construct&lt;/code&gt; メソッドは、一部のネイティブコンストラクターでは機能しません。たとえば、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; の&lt;/a&gt;ように。これらの場合、&lt;a href=&quot;bind&quot;&gt; &lt;code&gt;Function.prototype.bind&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。たとえば、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;コンストラクターで使用する次のような配列があるとします。 &lt;code&gt;[2012, 11, 4]&lt;/code&gt; ; この場合、次のように記述する必要があります： &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt; 。これは物事を行うための最良の方法ではなく、おそらく本番環境で使用することもできません。</target>
        </trans-unit>
        <trans-unit id="24502e3f5823bcbfeccb81fd33ffa25b3f363c52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This operation only works with a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; and may not be allowed on the main thread.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この操作は共有&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; で&lt;/a&gt;のみ機能し、メインスレッドでは許可されない場合があります。</target>
        </trans-unit>
        <trans-unit id="ef427d917c001b1f4650cf5e5def0d0fc7c777bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This operation works with a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; only.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この操作は、共有&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; で&lt;/a&gt;のみ機能します。</target>
        </trans-unit>
        <trans-unit id="459514910373cc21fc85761c674b24cfc7d00d66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Using the &lt;code&gt;Function&lt;/code&gt; constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;Function&lt;/code&gt; コンストラクターを使用して関数を作成することはお勧めしません。関数の本体を文字列として必要とするため、JSエンジンの一部の最適化が妨げられ、その他の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="725b65434e6935214fd79e2f1684e8b9c1ce58bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Using the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;使用 &lt;code&gt;GeneratorFunction&lt;/code&gt; のそれはいくつかのJSエンジンの最適化を防ぐことができ、また他の問題を引き起こす可能性があります文字列として関数本体を必要とするための関数を作成するためにコンストラクタが推奨されていません。</target>
        </trans-unit>
        <trans-unit id="85c319751ff83b08966d7270386045fb1f98bd7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When loading a library (such as jQuery), make sure it is loaded before you access library variables, such as &quot;$&quot;. Put the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; tag that loads the library before your code that uses it.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ライブラリ（jQueryなど）をロードする場合は、「$」などのライブラリ変数にアクセスする前に、ライブラリがロードされていることを確認してください。ライブラリをロードする&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt; &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &lt;/a&gt;タグを、それを使用するコードの前に置きます。</target>
        </trans-unit>
        <trans-unit id="0a681172ba1c89d6f086e8f2d83d03e01913d5ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the non-standard property &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document#Properties&quot;&gt;document.all&lt;/a&gt;&lt;/code&gt; is used as an argument for this constructor, the result is a &lt;code&gt;Boolean&lt;/code&gt; object with the value &lt;code&gt;false&lt;/code&gt;. This property is legacy and non-standard and should not be used.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;非標準プロパティ &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document#Properties&quot;&gt;document.all&lt;/a&gt;&lt;/code&gt; がこのコンストラクタの引数として使用される場合、結果は値 &lt;code&gt;false&lt;/code&gt; の &lt;code&gt;Boolean&lt;/code&gt; オブジェクトです。このプロパティはレガシーで非標準であるため、使用しないでください。</target>
        </trans-unit>
        <trans-unit id="78fe89a73001c5f232175ca238a51a999dec2f14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the string is empty, &lt;code&gt;split()&lt;/code&gt; returns an array containing one empty string, rather than an empty array. If the string and separator are both empty strings, an empty array is returned.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;文字列が空の場合、 &lt;code&gt;split()&lt;/code&gt; は空の配列ではなく、1つの空の文字列を含む配列を返します。文字列とセパレータが両方とも空の文字列の場合、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="a96e44fab969f1254bb7b66f556f52c2916c9cd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Where &lt;code&gt;Date&lt;/code&gt; is called as a constructor with more than one argument, if values are greater than their logical range (e.g. 13 is provided as the month value or 70 for the minute value), the adjacent value will be adjusted. E.g. &lt;code&gt;new Date(2013, 13, 1)&lt;/code&gt; is equivalent to &lt;code&gt;new Date(2014, 1, 1)&lt;/code&gt;, both create a date for &lt;code&gt;2014-02-01&lt;/code&gt; (note that the month is 0-based). Similarly for other values: &lt;code&gt;new Date(2013, 2, 1, 0, 70)&lt;/code&gt; is equivalent to &lt;code&gt;new Date(2013, 2, 1, 1, 10)&lt;/code&gt; which both create a date for &lt;code&gt;2013-03-01T01:10:00&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;Date&lt;/code&gt; 値がその論理的な範囲よりも大きい場合には、複数の引数を持つコンストラクタと呼ばれているが（例えば13分値の月の値または70として提供されている）、隣接する値が調整されます。例えば &lt;code&gt;new Date(2013, 13, 1)&lt;/code&gt; と等価である &lt;code&gt;new Date(2014, 1, 1)&lt;/code&gt; 、両方の日付作成 &lt;code&gt;2014-02-01&lt;/code&gt; （月は0ベースであることに注意してください）。同様に他の値の場合： &lt;code&gt;new Date(2013, 2, 1, 0, 70)&lt;/code&gt; は &lt;code&gt;new Date(2013, 2, 1, 1, 10)&lt;/code&gt; 両方とも &lt;code&gt;2013-03-01T01:10:00&lt;/code&gt; の日付を作成するnew Date（2013、2、1、1、10）と同等です。</target>
        </trans-unit>
        <trans-unit id="c376b19033b5623261bc5e616fe9c13de6b18217" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Where &lt;code&gt;Date&lt;/code&gt; is called as a constructor with more than one argument, the specified arguments represent local time. If UTC is desired, use &lt;code&gt;new Date(&lt;a href=&quot;date/utc&quot;&gt;&lt;code&gt;Date.UTC(...)&lt;/code&gt;&lt;/a&gt;)&lt;/code&gt; with the same arguments.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;Date&lt;/code&gt; が複数の引数を持つコンストラクターとして呼び出される場合、指定された引数は現地時間を表します。UTCが必要な場合は、同じ引数で &lt;code&gt;new Date(&lt;a href=&quot;date/utc&quot;&gt;&lt;code&gt;Date.UTC(...)&lt;/code&gt;&lt;/a&gt;)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="483e9d92a6e22a6218f96269fd44e507007c34f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While the syntax of this function is almost identical to that of &lt;a href=&quot;apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt;, the fundamental difference is that &lt;code&gt;call()&lt;/code&gt; accepts an &lt;strong&gt;argument list&lt;/strong&gt;, while &lt;code&gt;apply()&lt;/code&gt; accepts a &lt;strong&gt;single array of arguments&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この関数の構文は&lt;a href=&quot;apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;の構文とほとんど同じですが、根本的な違いは、 &lt;code&gt;call()&lt;/code&gt; が&lt;strong&gt;引数リストを&lt;/strong&gt;受け入れるのに対し、 &lt;code&gt;apply()&lt;/code&gt; は&lt;strong&gt;単一の引数の配列を&lt;/strong&gt;受け入れる&lt;strong&gt;こと&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="45de165c548b297c79c481f99d672f8cf89f9257" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While the syntax of this function is almost identical to that of &lt;a href=&quot;call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, the fundamental difference is that &lt;code&gt;call()&lt;/code&gt; accepts an &lt;strong&gt;argument list&lt;/strong&gt;, while &lt;code&gt;apply()&lt;/code&gt; accepts a &lt;strong&gt;single array of arguments&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この関数の構文は&lt;a href=&quot;call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt;の構文とほとんど同じですが、根本的な違いは、 &lt;code&gt;call()&lt;/code&gt; が&lt;strong&gt;引数リストを&lt;/strong&gt;受け入れるのに対し、 &lt;code&gt;apply()&lt;/code&gt; は&lt;strong&gt;引数の単一の配列を&lt;/strong&gt;受け入れる&lt;strong&gt;こと&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="2d59bee38265027466360229e7e458140b2cc379" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You call this method directly on the &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; constructor rather than on an instance of type &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;あなたが上で直接このメソッドを呼び出す&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;コンストラクタではなく、型のインスタンス上 &lt;code&gt;Object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bd8ec3585d0563d461a40a712d9dd099952dd2e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You cannot use the &lt;code&gt;replacer&lt;/code&gt; function to remove values from an array. If you return &lt;code&gt;undefined&lt;/code&gt; or a function then &lt;code&gt;null&lt;/code&gt; is used instead.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;replacer&lt;/code&gt; 関数を使用して配列から値を削除することはできません。 &lt;code&gt;undefined&lt;/code&gt; または関数を返す場合は、代わりに &lt;code&gt;null&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="ad9f17cd84782a44036af0759ea462aad9301397" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You won't get a valid JSON representation of your Object.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;オブジェクトの有効なJSON表現は取得できません。</target>
        </trans-unit>
        <trans-unit id="5d742ca8820cc8f4f5c4af33dd908bfaf75b2050" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if separator is an array, then Array is coerced to String and used as separator.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;セパレータが配列の場合、配列は文字列に強制変換され、セパレータとして使用されます。</target>
        </trans-unit>
        <trans-unit id="f0992c6b2919932b092fd0f7a0df506e469dfbe6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; parsing of date strings with the &lt;code&gt;Date&lt;/code&gt; constructor (and &lt;code&gt;Date.parse&lt;/code&gt;, they are equivalent) is strongly discouraged due to browser differences and inconsistencies.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ブラウザーの違いと不整合のため、 &lt;code&gt;Date&lt;/code&gt; コンストラクター（および &lt;code&gt;Date.parse&lt;/code&gt; 、それらは同等）を使用した日付文字列の解析は強くお勧めしません。</target>
        </trans-unit>
        <trans-unit id="9b9dfd33cb91f3fcb5263a6223e75ed8d7fccfcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; parsing of date strings with the &lt;code&gt;Date&lt;/code&gt; constructor (and &lt;code&gt;Date.parse&lt;/code&gt;, they are equivalent) is strongly discouraged due to browser differences and inconsistencies. Support for RFC 2822 format strings is by convention only. Support for ISO 8601 formats differs in that date-only strings (e.g. &quot;1970-01-01&quot;) are treated as UTC, not local.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ブラウザーの違いと不整合のため、 &lt;code&gt;Date&lt;/code&gt; コンストラクター（および &lt;code&gt;Date.parse&lt;/code&gt; 、それらは同等）を使用した日付文字列の解析は強くお勧めしません。RFC 2822形式の文字列のサポートは、慣例によるものです。ISO 8601形式のサポートは、日付のみの文字列（「1970-01-01」など）がローカルではなくUTCとして扱われる点が異なります。</target>
        </trans-unit>
        <trans-unit id="8c39a996edba84df7911753e2829b63a5f8e3c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/async_function&quot;&gt;&lt;code&gt;async functions&lt;/code&gt;&lt;/a&gt; created with the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they are always created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor was called. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for an async function expression.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;AsyncFunction&lt;/code&gt; コンストラクターで作成された&lt;a href=&quot;../statements/async_function&quot;&gt; &lt;code&gt;async functions&lt;/code&gt; &lt;/a&gt;は、その作成コンテキストにクロージャーを作成しません。これらは常にグローバルスコープで作成されます。それらを実行すると、 &lt;code&gt;AsyncFunction&lt;/code&gt; コンストラクターが呼び出されたスコープからのものではなく、独自のローカル変数とグローバル変数にのみアクセスできます。これは、非同期関数式のコードで&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を使用する場合とは異なります。</target>
        </trans-unit>
        <trans-unit id="d82da84f38fe49ba1869bdfebddcc97658eb025b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator function&lt;/code&gt;&lt;/a&gt; created with the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor was called. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a generator function expression.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; コンストラクターで作成されたジェネレーター&lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;generator function&lt;/code&gt; &lt;/a&gt;は、作成コンテキストにクロージャーを作成しません。それらは常にグローバルスコープで作成されます。それらを実行すると、 &lt;code&gt;GeneratorFunction&lt;/code&gt; コンストラクターが呼び出されたスコープからのものではなく、独自のローカル変数とグローバル変数にのみアクセスできます。これは、ジェネレータ関数式のコードで&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を使用する場合とは異なります。</target>
        </trans-unit>
        <trans-unit id="495863d88fbf751d8ba6907c004a3f640c826674" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;'abab'.lastIndexOf('ab', 2)&lt;/code&gt; will return 2 and not 0, as fromIndex limits only the beginning of the match.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;'abab'.lastIndexOf('ab', 2)&lt;/code&gt; は一致の開始のみを制限するため、'abab'.lastIndexOf（' ab '、2）は0ではなく2を返します。</target>
        </trans-unit>
        <trans-unit id="9a8f89b113bc9a50274099344d40a045c940ddd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt; is not a global object, but could be obtained from generator function instance (see &lt;a href=&quot;global_objects/generatorfunction&quot;&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt;&lt;/a&gt; for more detail).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; はグローバルオブジェクトではありませんが、ジェネレーター関数インスタンスから取得できます（詳細については、&lt;a href=&quot;global_objects/generatorfunction&quot;&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="def3ad9fe5c564448194b0f63f7804b66d49b157" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;for...in&lt;/code&gt; should not be used to iterate over an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; where the index order is important.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;for...in&lt;/code&gt; は、インデックスの順序が重要な&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;を反復処理するために使用しないでください。</target>
        </trans-unit>
        <trans-unit id="882cfe6315be7052cd357e441923163e031b87d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A WebAssembly page has a constant size of 65,536 bytes, i.e., 64KiB.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：WebAssemblyページのサイズは65,536バイト（64KiB）で一定です。</target>
        </trans-unit>
        <trans-unit id="a8fd1ef24f654d71e16ff8445c0538324825d038" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A promise is said to be &lt;em&gt;settled&lt;/em&gt; if it is either fulfilled or rejected, but not pending. You will also hear the term &lt;em&gt;resolved&lt;/em&gt; used with promises &amp;mdash; this means that the promise is settled or &amp;ldquo;locked in&amp;rdquo; to match the state of another promise. &lt;a href=&quot;https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md&quot;&gt;States and fates&lt;/a&gt; contains more details about promise terminology.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：約定は、約定または拒否されたが保留されていない場合に、&lt;em&gt;決済さ&lt;/em&gt;れたといいます。また、約束で使用&lt;em&gt;さ&lt;/em&gt;れる&lt;em&gt;解決&lt;/em&gt;済みの用語も聞こえます。これは、約束が別の約束の状態と一致するように解決または「ロックイン」されることを意味します。&lt;a href=&quot;https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md&quot;&gt;状態と運命&lt;/a&gt;には、約束の用語に関する詳細が含まれています。</target>
        </trans-unit>
        <trans-unit id="c76700c50c5fa16db7054238c2711b85fbd934f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Properties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：非配列オブジェクトのプロパティは、特定の順序で文字列化されることが保証されていません。文字列化内の同じオブジェクト内のプロパティの順序に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="2f6afb69d4eebfc7e3036f03848bafb35d8fd458" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Tables can currently only store function references, but this will likely be expanded in the future.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：現在、テーブルに保存できるのは関数参照のみですが、今後拡張される可能性があります。</target>
        </trans-unit>
        <trans-unit id="730c3fbd9fa3f3ea98a713ccc6d273af0217ce1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This method returns &lt;code&gt;false&lt;/code&gt; for any condition put on an empty array.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このメソッドは、空の配列に置かれた条件に対して &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a15ca51ca715b47d988eb0b32907c1c0c57fc3ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This method returns &lt;code&gt;true&lt;/code&gt; for any condition put on an empty array.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このメソッドは、空の配列に置かれた条件に対して &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="268ad9f0404aa4d4c9f3de0de141d7fb9b970ee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also find this example as &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt; on GitHub (&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;view it live also&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：この例は、GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt;として見つけることもできます（&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;ライブで表示&lt;/a&gt;することもできます）。</target>
        </trans-unit>
        <trans-unit id="dabecf3ab82a6b52a81ab3fa4b0de9cf41a94cba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also find this example at &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index.html&quot;&gt;index.html&lt;/a&gt; on GitHub (&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/&quot;&gt;view it live also&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：この例は、GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index.html&quot;&gt;index.html&lt;/a&gt;にもあります（&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/&quot;&gt;ライブで表示&lt;/a&gt;することもできます）。</target>
        </trans-unit>
        <trans-unit id="91bc1fdd36d938de9da490fa6cbe55d7c58f4983" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can see the example &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/global.html&quot;&gt;running live on GitHub&lt;/a&gt;; see also the &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/global.html&quot;&gt;source code&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/global.html&quot;&gt;GitHubで実行中&lt;/a&gt;のサンプルを確認できます。&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/global.html&quot;&gt;ソースコード&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="be682e2136e817b30ce287371c8a73287c26fcdf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You'll probably want to use &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; in most cases, as it is more efficient than &lt;code&gt;compile()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;compile()&lt;/code&gt; より効率的であるため、ほとんどの場合、&lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9a46e1cbe0687c5ef74a0082002606802b10569f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You'll probably want to use &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; in most cases, as it is more efficient than &lt;code&gt;instantiate()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：ほとんどの場合、&lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。これは、 &lt;code&gt;instantiate()&lt;/code&gt; より効率的だからです。</target>
        </trans-unit>
        <trans-unit id="c5f3eb9c75799b6711da351bfde82222637c772a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes&lt;/strong&gt;: The parentheses &lt;code&gt;( ... )&lt;/code&gt; around the assignment statement are required when using object literal destructuring assignment without a declaration.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：宣言なしでオブジェクトリテラルの構造化代入を使用する場合は、代入ステートメントを囲む括弧 &lt;code&gt;( ... )&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="328dbb416ec43a5d5908babc2a4d818c1d1b4d94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Numbers&lt;/strong&gt;: Leading zeros are prohibited (in &lt;a href=&quot;json/stringify&quot;&gt;&lt;code&gt;JSON.stringify&lt;/code&gt;&lt;/a&gt; zeros will be ignored, but in &lt;a href=&quot;json/parse&quot;&gt;&lt;code&gt;JSON.parse&lt;/code&gt;&lt;/a&gt; it will throw SyntaxError); a decimal point must be followed by at least one digit.</source>
          <target state="translated">&lt;strong&gt;数値&lt;/strong&gt;：先頭のゼロは禁止されています（&lt;a href=&quot;json/stringify&quot;&gt; &lt;code&gt;JSON.stringify&lt;/code&gt; では&lt;/a&gt;ゼロは無視されますが、&lt;a href=&quot;json/parse&quot;&gt; &lt;code&gt;JSON.parse&lt;/code&gt; &lt;/a&gt;ではSyntaxErrorがスローされます）; 小数点の後には少なくとも1桁の数字が必要です。</target>
        </trans-unit>
        <trans-unit id="7ece7382735109b62c363babb434637eaa506bff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Objects and Arrays&lt;/strong&gt;: Property names must be double-quoted strings; trailing commas are forbidden.</source>
          <target state="translated">&lt;strong&gt;オブジェクトと配列&lt;/strong&gt;：プロパティ名は二重引用符で囲まれた文字列である必要があります。末尾のコンマは禁止されています。</target>
        </trans-unit>
        <trans-unit id="1826f809cf822bd5667504e48b0c2d2304b96d8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old comprehensions syntax (do not use anymore!):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;古い内包表記構文（もう使用しないでください！）：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ccfff51da82250c6945871fe29c0806ff574c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Output:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="68122dbb7070cbaf7691a8bb5160ae8529b51c44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pro:&lt;/strong&gt; The &lt;code&gt;with&lt;/code&gt; statement can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. The scope chain change required by 'with' is not computationally expensive. Use of 'with' will relieve the interpreter of parsing repeated object references. Note, however, that in many cases this benefit can be achieved by using a temporary variable to store a reference to the desired object.</source>
          <target state="translated">&lt;strong&gt;プロ：&lt;/strong&gt; &lt;code&gt;with&lt;/code&gt; の文は、パフォーマンスのペナルティなしで長時間のオブジェクト参照を繰り返す必要性を減らすことにより、ファイルサイズを小さくすることができます。「with」で必要なスコープチェーンの変更は、計算コストがかかりません。「with」を使用すると、インタプリタが繰り返しオブジェクト参照を解析する必要がなくなります。ただし、多くの場合、この利点は、一時変数を使用して目的のオブジェクトへの参照を格納することで達成できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a7e2daf6ab78ab4941f50d31c4d73b3f5fe43db5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflect&lt;/strong&gt; is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of &lt;a href=&quot;proxy/handler&quot;&gt;proxy handlers&lt;/a&gt;. &lt;code&gt;Reflect&lt;/code&gt; is not a function object, so it's not constructible.</source>
          <target state="translated">&lt;strong&gt;Reflect&lt;/strong&gt;は、インターセプト可能なJavaScript操作のメソッドを提供する組み込みオブジェクトです。メソッドは&lt;a href=&quot;proxy/handler&quot;&gt;プロキシハンドラ&lt;/a&gt;のメソッドと同じです。 &lt;code&gt;Reflect&lt;/code&gt; は関数オブジェクトではないため、構築できません。</target>
        </trans-unit>
        <trans-unit id="2968057f98255a54a356baa8a6298169e0b0da1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove an item by index position&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;インデックス位置でアイテムを削除する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e47fa095321df3a7f10f4fedbd3b9a8987634de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove from the end of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列の最後から削除&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2c08b8bf8fa04b2a3d5c5cdfdce58bcf6945232b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove from the front of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;アレイの前面から削除&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1dce4b02f92aa1d139f10dc83a34e567ed4967a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove items from an index position&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;インデックス位置からアイテムを削除する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="364e95219afdc861c39574e473e8e92a19cd552a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Snippet:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Snippet:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1d7a85c5e31389a97538ee981b219beb53784f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spread syntax&lt;/strong&gt; allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</source>
          <target state="translated">&lt;strong&gt;スプレッド構文&lt;/strong&gt;により、0個以上の引数（関数呼び出しの場合）または要素（配列リテラルの場合）が期待される場所で配列式や文字列などの反復可能オブジェクトを展開したり、0個以上の場所でオブジェクト式を展開したりできますキーと値のペア（オブジェクトリテラル用）が必要です。</target>
        </trans-unit>
        <trans-unit id="01304236fb3fbdd845e39d7a2be8f942c7fc22fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Strict vs. non-strict mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;厳格モードと非厳格モード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c9d22131e0b891bce0d6de6b15ad73403e3bc1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String generics are non-standard, deprecated and will get removed in the near future&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;文字列ジェネリックは非標準であり、非推奨であり、近い将来削除される予定&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="f8fcf8539d8a98297d80b69a936a76ae9287a571" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary&lt;/strong&gt;: manually updating or setting the constructor can lead to differrent and sometimes confusing consequences. To prevent this just define the role of constructor in each specific case. In most cases constructor is not used and reassignment of it is not necessary.</source>
          <target state="translated">&lt;strong&gt;まとめ&lt;/strong&gt;：コンストラクタを手動で更新または設定すると、結果が異なり、混乱を招く可能性があります。これを防ぐには、特定のケースごとにコンストラクターの役割を定義するだけです。ほとんどの場合、コンストラクターは使用されず、再割り当てする必要はありません。</target>
        </trans-unit>
        <trans-unit id="9833331fd9a6aef6d0b22322f7e75ecf6f7892ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/Contribute/Guidelines/Conventions_definitions#Experimental&quot;&gt;experimental technology&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/Contribute/Guidelines/Conventions_definitions#Experimental&quot;&gt;実験的な技術です&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="717bc18ee99931dbee84a9e8cb53beb20c99f5ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;big&amp;gt; element has been removed in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="translated">&lt;strong&gt;使用上の注意：&lt;/strong&gt; &amp;lt;big&amp;gt;要素は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt;で削除されたため、今後は使用しないでください。代わりに、Web開発者は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt;プロパティを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b64d0614cf0f35a92dc16f50aca15eb7c0be0a39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;font&amp;gt; element has been removed in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="translated">&lt;strong&gt;使用上の注意：&lt;/strong&gt; &amp;lt;font&amp;gt;要素は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt;で削除されたため、今後は使用しないでください。代わりに、Web開発者は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt;プロパティを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f386da939ae3ec34638a5a475319e8fe20344697" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Be careful when using &lt;code&gt;Function.name&lt;/code&gt; and source code transformations, such as those carried out by JavaScript compressors (minifiers) or obfuscators. These tools are often used as part of a JavaScript build pipeline to reduce the size of a program prior to deploying it to production. Such transformations often change a function's name at build-time.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; &lt;code&gt;Function.name&lt;/code&gt; およびJavaScriptコンプレッサー（縮小機能）または難読化機能によって実行されるようなソースコード変換を使用するときは注意してください。これらのツールは、多くの場合、JavaScriptビルドパイプラインの一部として使用され、本番環境にデプロイする前にプログラムのサイズを縮小します。このような変換により、ビルド時に関数の名前が変更されることがよくあります。</target>
        </trans-unit>
        <trans-unit id="55e70cb40ee5f019a59e614e90a54c1a2fc6b0b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Blinking text is frowned upon by several accessibility standards. The &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; element itself is non-standard and deprecated!</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;点滅するテキストは、いくつかのアクセシビリティ基準によって不満を抱いています。 &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; 要素自体は非標準および非推奨です！</target>
        </trans-unit>
        <trans-unit id="1b5d0d7d0d2f5fe9dfc395db3dd646dfc2ae6e5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Changing the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in &lt;strong&gt;&lt;em&gt;every&lt;/em&gt;&lt;/strong&gt; browser and JavaScript engine. The effects on performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in &lt;code&gt;obj.__proto__ = ...&lt;/code&gt; statement, but may extend to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; code that has access to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; object whose &lt;code&gt;[[Prototype]]&lt;/code&gt; has been altered. If you care about performance you should avoid setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object. Instead, create a new object with the desired &lt;code&gt;[[Prototype]]&lt;/code&gt; using &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;オブジェクトの &lt;code&gt;[[Prototype]]&lt;/code&gt; を変更することは、&lt;strong&gt;&lt;em&gt;すべての&lt;/em&gt;&lt;/strong&gt;ブラウザーとJavaScriptエンジンで、最新のJavaScriptエンジンがプロパティアクセスを最適化する方法の性質上、非常に遅い操作です。継承を変更するパフォーマンスへの影響は微妙と遠く離れている、とに費やさ単に時間に限定されるものではない &lt;code&gt;obj.__proto__ = ...&lt;/code&gt; 声明、それに延長することができる&lt;strong&gt;&lt;em&gt;任意の&lt;/em&gt;&lt;/strong&gt;へのアクセスがあるコード&lt;strong&gt;&lt;em&gt;の任意&lt;/em&gt;&lt;/strong&gt;のオブジェクト &lt;code&gt;[[Prototype]]&lt;/code&gt; が変更されました。パフォーマンスを &lt;code&gt;[[Prototype]]&lt;/code&gt; する場合は、オブジェクトの[[Prototype]]を設定しないでください。代わりに、&lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt;を使用して、目的の &lt;code&gt;[[Prototype]]&lt;/code&gt; で新しいオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="f84a273039ca68a151552997ce032eae196ac263" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Changing the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in &lt;strong&gt;&lt;em&gt;every&lt;/em&gt;&lt;/strong&gt; browser and JavaScript engine. The effects on performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in the &lt;code&gt;Object.setPrototypeOf(...)&lt;/code&gt; statement, but may extend to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; code that has access to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; object whose &lt;code&gt;[[Prototype]]&lt;/code&gt; has been altered. If you care about performance you should avoid setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object. Instead, create a new object with the desired &lt;code&gt;[[Prototype]]&lt;/code&gt; using &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;オブジェクトの &lt;code&gt;[[Prototype]]&lt;/code&gt; を変更することは、&lt;strong&gt;&lt;em&gt;すべての&lt;/em&gt;&lt;/strong&gt;ブラウザーとJavaScriptエンジンで、最新のJavaScriptエンジンがプロパティアクセスを最適化する方法の性質上、非常に遅い操作です。継承を変更するパフォーマンスへの影響は微妙と遠く離れている、とに費やさ単に時間に限定されるものではない &lt;code&gt;Object.setPrototypeOf(...)&lt;/code&gt; 文で、それに延長することができる&lt;strong&gt;&lt;em&gt;任意の&lt;/em&gt;&lt;/strong&gt;へのアクセスがあるコード&lt;strong&gt;&lt;em&gt;の任意&lt;/em&gt;&lt;/strong&gt;のオブジェクト &lt;code&gt;[[Prototype]]&lt;/code&gt; は変更されました。パフォーマンスを &lt;code&gt;[[Prototype]]&lt;/code&gt; する場合は、オブジェクトの[[Prototype]]を設定しないでください。代わりに、目的の &lt;code&gt;[[Prototype]]&lt;/code&gt; を使用して新しいオブジェクトを作成します&lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="248749449464dd9efaec982a0437b9634b4e3780" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Never use a loop like this on arrays. Only use it on objects. See &lt;a href=&quot;for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;このようなループを配列で使用しないでください。オブジェクトでのみ使用してください。詳細については&lt;a href=&quot;for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bfb69c8eec1421056abb8beea5c19c0b31c53352" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The 5th edition of ECMAScript (ES5) forbids use of &lt;code&gt;arguments.callee()&lt;/code&gt; in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Strict_mode&quot;&gt;strict mode&lt;/a&gt;. Avoid using &lt;code&gt;arguments.callee()&lt;/code&gt; by either giving function expressions a name or use a function declaration where a function must call itself.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; ECMAScript（ES5）の第5版は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Strict_mode&quot;&gt;strictモード&lt;/a&gt;での &lt;code&gt;arguments.callee()&lt;/code&gt; の使用を禁止しています。関数式に名前を付けるか、関数がそれ自体を呼び出す必要がある関数宣言を使用して、 &lt;code&gt;arguments.callee()&lt;/code&gt; の使用を避けます。</target>
        </trans-unit>
        <trans-unit id="f498e75f5d9e31af159052fc376e06d40082fac7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The script interpreter will set the built-in &lt;code&gt;Function.name&lt;/code&gt; property only if a function does not have an own property called &lt;em&gt;name&lt;/em&gt; (see section &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-setfunctionname&quot;&gt;9.2.11 of the ECMAScript2015 Language Specification&lt;/a&gt;). However, ES2015 specifies the &lt;em&gt;static&lt;/em&gt; keyword such that static methods will be set as OwnProperty of the class constructor function (ECMAScript2015, &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-runtime-semantics-classdefinitionevaluation&quot;&gt;14.5.14.21.b&lt;/a&gt; + &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer-runtime-semantics-propertydefinitionevaluation&quot;&gt;12.2.6.9&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;スクリプトインタープリターは、関数に&lt;em&gt;name&lt;/em&gt;という独自のプロパティがない場合にのみ、組み込みの &lt;code&gt;Function.name&lt;/code&gt; プロパティを設定します（&lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-setfunctionname&quot;&gt;ECMAScript2015言語仕様の&lt;/a&gt;セクション9.2.11を参照）。しかし、ES2015指定&lt;em&gt;静的&lt;/em&gt;静的メソッドは、クラスのコンストラクタ関数のOwnProperty（ECMAScript2015として設定されるように、キーワード&lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-runtime-semantics-classdefinitionevaluation&quot;&gt;14.5.14.21.b&lt;/a&gt; + &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer-runtime-semantics-propertydefinitionevaluation&quot;&gt;12.2.6.9&lt;/a&gt;）。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f75778df4c35dd67da903044e9651178f5ebb11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This section demonstrates JavaScript capabilities and documents some edge cases of the &lt;code&gt;bind()&lt;/code&gt; method. The methods shown below are not the best way to do things and probably should not be used in any production environment.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;このセクションでは、JavaScript機能を示し、 &lt;code&gt;bind()&lt;/code&gt; メソッドのエッジケースについて説明します。以下に示す方法は、物事を行うための最良の方法ではなく、本番環境では使用しないでください。</target>
        </trans-unit>
        <trans-unit id="a10eae4778a6e80dd66cdfbd34f4e810f358284c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; While &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; is supported today in most browsers, its existence and exact behavior has only been standardized in the ECMAScript 2015 specification as a legacy feature to ensure compatibility for web browsers. For better support, it is recommended that only &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt; be used instead.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;ながら &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; ほとんどのブラウザでサポートされている今日、その存在と正確な動作が唯一のWebブラウザとの互換性を確保するために、従来の機能としてはECMAScript 2015仕様で標準化されています。より良いサポートのために、代わりに&lt;a href=&quot;getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; &lt;/a&gt;のみを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0a5612383cfdef07dbdbaccf59a6815b748fc594" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Do not call &lt;code&gt;Promise.resolve&lt;/code&gt; on a thenable that resolves to itself. This will cause infinite recursion as it tries to flatten what seems to be an infinitely nested promise. An &lt;a href=&quot;https://stackblitz.com/edit/angular-promiseresovle-with-async-pipe?file=src/app/app.component.ts&quot;&gt;example&lt;/a&gt; would be using it along with the &lt;code&gt;async&lt;/code&gt; Pipe in Angular. Find more on that &lt;a href=&quot;https://angular.io/guide/template-syntax#avoid-side-effects&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：Doが呼び出すことはありませ &lt;code&gt;Promise.resolve&lt;/code&gt; を自分自身に解決されることをthenableに。これは、無限にネストされた約束のように見えるものをフラット化しようとするため、無限再帰を引き起こします。&lt;a href=&quot;https://stackblitz.com/edit/angular-promiseresovle-with-async-pipe?file=src/app/app.component.ts&quot;&gt;例では、&lt;/a&gt;一緒にそれを使用することになり &lt;code&gt;async&lt;/code&gt; 角度でパイプ。詳しくは&lt;a href=&quot;https://angular.io/guide/template-syntax#avoid-side-effects&quot;&gt;こちら&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7a9f32395d01e090845cd2b2405d5899dc04c443" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[BoundArguments]]&lt;/strong&gt; - a list of values whose elements are used as the first arguments to any call to the wrapped function.</source>
          <target state="translated">&lt;strong&gt;[[BoundArguments]]&lt;/strong&gt; - a list of values whose elements are used as the first arguments to any call to the wrapped function.</target>
        </trans-unit>
        <trans-unit id="1c457b9ae473d9a8e5d4eaa6ce3d27b852eb32db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[BoundTargetFunction]] &lt;/strong&gt;- the wrapped function object;</source>
          <target state="translated">&lt;strong&gt;[[BoundTargetFunction]] &lt;/strong&gt;- the wrapped function object;</target>
        </trans-unit>
        <trans-unit id="efa00c9a92d0f0da9ba1722378f62c5f9d65f3dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[BoundThis]]&lt;/strong&gt; - the value that is always passed as &lt;strong&gt;this&lt;/strong&gt; value when calling the wrapped function.</source>
          <target state="translated">&lt;strong&gt;[[BoundThis]]&lt;/strong&gt; - the value that is always passed as &lt;strong&gt;this&lt;/strong&gt; value when calling the wrapped function.</target>
        </trans-unit>
        <trans-unit id="577f5d8afff0a44a9df13b8bae9dde88197fd9df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[Call]]&lt;/strong&gt; - executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a &lt;strong&gt;this&lt;/strong&gt; value and a list containing the arguments passed to the function by a call expression.</source>
          <target state="translated">&lt;strong&gt;[[Call]]&lt;/strong&gt; - executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a &lt;strong&gt;this&lt;/strong&gt; value and a list containing the arguments passed to the function by a call expression.</target>
        </trans-unit>
        <trans-unit id="a1f965c5efb247e9f1ca771f32bbb0bebddb9805" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;true&lt;/strong&gt; if the given value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; and its type is &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定された値が&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; で&lt;/a&gt;、その型が&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; の&lt;/a&gt;場合は&lt;strong&gt;true&lt;/strong&gt;。それ以外の場合は&lt;strong&gt;false&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="228dfd5f782ef2106d4a039fb5d023e738ebc476" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fromIndex&lt;/var&gt;Optional</source>
          <target state="translated">&lt;var&gt;fromIndex&lt;/var&gt;Optional</target>
        </trans-unit>
        <trans-unit id="7ff930fa6ee78c9cd2e66ff9e5033f26ff39845a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt;)</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="translated">=</target>
        </trans-unit>
        <trans-unit id="6947818ac409551f11fbaa78f0ea6391960aa5b8" translate="yes" xml:space="preserve">
          <source>==</source>
          <target state="translated">==</target>
        </trans-unit>
        <trans-unit id="b64cc2760536699c09c33fd0c38b16350e500872" translate="yes" xml:space="preserve">
          <source>===</source>
          <target state="translated">===</target>
        </trans-unit>
        <trans-unit id="5bab61eb53176449e25c2c82f172b82cb13ffb9d" translate="yes" xml:space="preserve">
          <source>?</source>
          <target state="translated">?</target>
        </trans-unit>
        <trans-unit id="6be66c429c3c727cd324ae89b834ffe534a6d50d" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 15</source>
          <target state="translated">? &amp;mdash; 15</target>
        </trans-unit>
        <trans-unit id="a98a00019d88037faae9cad68367d907f7fac409" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 9</source>
          <target state="translated">? &amp;mdash; 9</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="33438fbb207f3814ad9d1d3dd93280603933fa16" translate="yes" xml:space="preserve">
          <source>A (possibly empty) array containing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; copies of the contents of all custom sections matching &lt;code&gt;sectionName&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sectionName&lt;/code&gt; に一致するすべてのカスタムセクションの内容の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;コピーを含む（おそらく空の）配列。</target>
        </trans-unit>
        <trans-unit id="053a7abfdbcf7d9b895fd54cebc0c7e4b5efa722" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../statements/for...of&quot;&gt;for...of&lt;/a&gt; loop</source>
          <target state="translated">A &lt;a href=&quot;../../statements/for...of&quot;&gt;のための...の&lt;/a&gt;ループ</target>
        </trans-unit>
        <trans-unit id="84f12357f8487d95cc0257115743a5b38de4fff7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../template_literals&quot;&gt;template string&lt;/a&gt;, optionally with substitutions (&lt;code&gt;${...}&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;../../template_literals&quot;&gt;テンプレート文字列&lt;/a&gt;任意に置換を有します、（ &lt;code&gt;${...}&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2b3930bb8348a508fdb54c0020887be0f3785bc4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not setting the property was successful.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;プロパティを設定すると、成功したかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="06a8ff2390c96888656c4062d94bf43a017fd129" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given object is extensible.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;指定されたオブジェクトが拡張可能であるか否かを示します。</target>
        </trans-unit>
        <trans-unit id="13c6697fbe602dcae192f8dcc845ae9ab4207982" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given object is frozen.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;指定されたオブジェクトが凍結されているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="8601cb9e9f1154f2ab964d9e588eeeb3c5c2a758" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given object is sealed.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;指定されたオブジェクトが封入されているか否かを示します。</target>
        </trans-unit>
        <trans-unit id="3843ab2b6ba6be1add2b690cce1819a1dccb7ebb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given value is a finite number.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;所定の値は有限数であるか否かを示します。</target>
        </trans-unit>
        <trans-unit id="5109483ee5c933868d96d80dd336f7312b80822c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given value is a number that is a safe integer.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;与えられた値が安全整数で番号であるか否かを示します。</target>
        </trans-unit>
        <trans-unit id="bf5065726fcac4c9533050ddcf27e1e32ed27061" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given value is an integer.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;与えられた値が整数であるか否かを示します。</target>
        </trans-unit>
        <trans-unit id="4b808b286549ba59f8f3c5071d19f3337b726b63" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the object has the specified property as own property.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;オブジェクトが自身のプロパティとして指定された特性を有しているか否かを示します。</target>
        </trans-unit>
        <trans-unit id="4efefca3b380f5db951ff7c20fcb46e9716a8785" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully defined.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;プロパティが正常に定義されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="ce0f69c8908cf96c2359f44a2dcf5356276e2139" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully deleted.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;プロパティが正常に削除されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="294a9c25ebbb3040a39065ef8dde07c4ba94ecf2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the prototype was successfully set.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;プロトタイプが正常に設定されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="560eec06c5f5994e73c61896c4df515cb01f8b8d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the target has the property.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;ターゲットは、プロパティを持っているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="f263166801049c433aa11d6df481ee2d7e4fe2cf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the target is extensible.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;ターゲットは拡張可能であるか否かを示します。</target>
        </trans-unit>
        <trans-unit id="6169a91c19a2f0a7c8ce1da8d9495da52b4cb48d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the target was successfully set to prevent extensions.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;ターゲットが正常に機能拡張を防ぐために設定されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="8c0c304da546848f8bd08511c1595d81c9e894ce" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the two arguments are the same value.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 2つの引数が同じ値であるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="15d7965c265aafad8cc8bee3c70112fdaa7ce321" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether the calling object lies in the prototype chain of the specified object.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;指定されたオブジェクトのプロトタイプチェーン内の呼び出し元のオブジェクトの嘘かどうかを示します。</target>
        </trans-unit>
        <trans-unit id="b7862e7910f50c683ca4dac57c31bb0247ac2083" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether the operation is lock free.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;操作がロック自由であるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="3564dcfc5fb3b8f6620d15d3682485bd0fbae055" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether the specified property is enumerable.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;指定されたプロパティが列挙可能かどうかを示します。</target>
        </trans-unit>
        <trans-unit id="ecd33b59987796a772d1e0ba229850e91fc8bb00" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; which is &lt;code&gt;true&lt;/code&gt; if the value &lt;code&gt;searchElement&lt;/code&gt; is found within the array (or the part of the array beginning at the index &lt;code&gt;fromIndex&lt;/code&gt;, if specified). Values of zero are all considered to be equal regardless of sign (that is, -0 is considered to be equal to both 0 and +0), but &lt;code&gt;false&lt;/code&gt; is not considered to be the same as 0.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;である &lt;code&gt;true&lt;/code&gt; 値場合 &lt;code&gt;searchElement&lt;/code&gt; とは（または配列の一部インデックスで始まる配列内に見出され &lt;code&gt;fromIndex&lt;/code&gt; 指定した場合、）。ゼロの値は、符号に関係なくすべて等しいと見なされます（つまり、-0は0と+0の両方に等しいと見なされます）が、 &lt;code&gt;false&lt;/code&gt; は0と同じとは見なされません。</target>
        </trans-unit>
        <trans-unit id="a66270d224cc8bf2fa8d27d680e79fbbfe7f4411" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2db7cf0bf42425e60ea87710df41debe3fea586e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; called if the &lt;code&gt;Promise&lt;/code&gt; is fulfilled. This function has one argument, the &lt;code&gt;fulfillment value&lt;/code&gt;. If it is not a function, it is internally replaced with an &quot;Identity&quot; function (it returns the received argument).</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;場合に呼び出さ &lt;code&gt;Promise&lt;/code&gt; 果たされます。この関数には、 &lt;code&gt;fulfillment value&lt;/code&gt; という1つの引数があります。関数でない場合は、内部的に「Identity」関数に置き換えられます（受け取った引数を返します）。</target>
        </trans-unit>
        <trans-unit id="cbfe09aafac5cb3179827c64b978f884c1925f95" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; called if the &lt;code&gt;Promise&lt;/code&gt; is rejected. This function has one argument, the &lt;code&gt;rejection reason&lt;/code&gt;. If it is not a function, it is internally replaced with a &quot;Thrower&quot; function (it throws an error it received as argument).</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;場合に呼び出さ &lt;code&gt;Promise&lt;/code&gt; 拒否されます。この関数には、 &lt;code&gt;rejection reason&lt;/code&gt; という1つの引数があります。関数でない場合は、内部的に「Thrower」関数に置き換えられます（引数として受け取ったエラーをスローします）。</target>
        </trans-unit>
        <trans-unit id="dd5b8dd934e6350b0cf2d693a280a94187b707ee" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; called when the &lt;code&gt;Promise&lt;/code&gt; is rejected. This function has one argument:</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;したときに呼び出さ &lt;code&gt;Promise&lt;/code&gt; 拒否されます。この関数には1つの引数があります。</target>
        </trans-unit>
        <trans-unit id="09c8336afa2c0f03310b3bd721ff74a91274c2f7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; called when the &lt;code&gt;Promise&lt;/code&gt; is settled.</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;したときに呼び出さ &lt;code&gt;Promise&lt;/code&gt; 確定しています。</target>
        </trans-unit>
        <trans-unit id="48c6bb1eeac96194bbb9e1a5cfbbd1044a7ee089" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; object's read-only &lt;code&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/code&gt; property indicates the function's name as specified when it was created, or &lt;code&gt;&quot;anonymous&quot;&lt;/code&gt; for functions created anonymously.</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;オブジェクトの読み取り専用の &lt;code&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/code&gt; プロパティは、それが作成、または時に指定された関数の名前を示す &lt;code&gt;&quot;anonymous&quot;&lt;/code&gt; 匿名で作成された機能のために。</target>
        </trans-unit>
        <trans-unit id="56a354f1c57ffdef2987affbea832125989711c3" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../global_objects/promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; or any value to wait for.</source>
          <target state="translated">A &lt;a href=&quot;../global_objects/promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;かを待つために任意の値。</target>
        </trans-unit>
        <trans-unit id="1c80d77bffcf8142f404e17f78525e7b54c16234" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; の&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="35975415f4e0e0e5a26be836b5c62773dfdf9df3" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; representing the milliseconds elapsed since the UNIX epoch.</source>
          <target state="translated">A &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; UNIXエポックからの経過ミリ秒数を表します。</target>
        </trans-unit>
        <trans-unit id="c72f514d5ea1869e64d0f1bc89c9c57ec95165e8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;. If the parameter is of a different type, it will get converted to a number or to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if it cannot be converted.</source>
          <target state="translated">A &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;。パラメータのタイプが異なる場合、数値に変換されます。変換できない場合は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;に変換されます。</target>
        </trans-unit>
        <trans-unit id="90e69c14f902310947e3c38b04e08ebd2c85319c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that is rejected with the given reason.</source>
          <target state="translated">指定された理由で拒否された&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6227ec584abbfb76dde45384e4e66d6abe4214dc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that is resolved with the given value, or the promise passed as value, if the value was a promise object.</source>
          <target state="translated">A &lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;値が約束の目的であった場合、所定の値、または値として渡された約束で解決されます。</target>
        </trans-unit>
        <trans-unit id="b9a91fb791a6682e16518a8761044575d6b36084" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; (&quot;invalid language tag: xx_yy&quot;) is thrown if a &lt;code&gt;locale&lt;/code&gt; argument isn't a valid language tag.</source>
          <target state="translated">A &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;（「無効な言語タグ：xx_yyは」）場合にスローされた &lt;code&gt;locale&lt;/code&gt; 引数が有効な言語タグではありません。</target>
        </trans-unit>
        <trans-unit id="b7986ca1a037ff7f8ae7007ac7b84d094da8a9c8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown if &lt;code&gt;form&lt;/code&gt; isn't one of the values specified above.</source>
          <target state="translated">A &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;あれば投げられる &lt;code&gt;form&lt;/code&gt; 上記の指定された値ではありません。</target>
        </trans-unit>
        <trans-unit id="be6d9353dd183a4200cfb353cbbacdb730746840" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object or literal. The match or matches are replaced with &lt;code&gt;newSubStr&lt;/code&gt; or the value returned by the specified &lt;code&gt;function&lt;/code&gt;.</source>
          <target state="translated">A &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトまたはリテラル。1つまたは複数の一致は、 &lt;code&gt;newSubStr&lt;/code&gt; または指定された &lt;code&gt;function&lt;/code&gt; によって返された値に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="09e51ecccc0c015bb3a71a4169a8700f5747f19a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../statements/return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt; statement is reached. In this case, execution of the generator ends and an &lt;code&gt;IteratorResult&lt;/code&gt; is returned to the caller in which the &lt;code&gt;value&lt;/code&gt; is the value specified by the &lt;code&gt;return&lt;/code&gt; statement and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../statements/return&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt;ステートメントが到達しています。この場合、ジェネレーターの実行が終了し、 &lt;code&gt;IteratorResult&lt;/code&gt; が呼び出し元に返され &lt;code&gt;true&lt;/code&gt; 。この &lt;code&gt;value&lt;/code&gt; は、 &lt;code&gt;return&lt;/code&gt; ステートメントで指定された値であり、 &lt;code&gt;done&lt;/code&gt; がtrueです。</target>
        </trans-unit>
        <trans-unit id="6d94099f13bcc9046ee189be6871175e002a0e79" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; of the specified length with the pad string applied at the end of the current string.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;のパッド列で指定された長さのは、現在の文字列の最後に適用されます。</target>
        </trans-unit>
        <trans-unit id="18d9a51534f1f350de06c0937b0a55e28682578c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; of the specified length with the pad string applied from the start.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;のパッド列で指定された長さの開始から印加されます。</target>
        </trans-unit>
        <trans-unit id="e619d2320e5ad77f52d56b8d7d547d0534e91e71" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object that's used to insert white space into the output JSON string for readability purposes.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;読みやすさのために、出力JSON文字列に空白を挿入するために使用されますオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a3d807fa0fea94c766a6c6572f0b90ef6d57c40e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that is a target of the match.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;一致の対象です。</target>
        </trans-unit>
        <trans-unit id="1f9628c09235d84d6c607c47ab7f0b35d2579237" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that is a target of the replacement.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;の交換の対象です。</target>
        </trans-unit>
        <trans-unit id="31c6d9a58da4c9f834f057ef6fa796e72be6fa17" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that is a target of the search.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;検索の対象です。</target>
        </trans-unit>
        <trans-unit id="70d08401a35fd3d4dfe70bd6e1cce1b74421c152" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that is to be replaced by &lt;code&gt;newSubStr&lt;/code&gt;. It is treated as a verbatim string and is &lt;em&gt;not&lt;/em&gt; interpreted as a regular expression. Only the first occurrence will be replaced.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;に置き換えられる &lt;code&gt;newSubStr&lt;/code&gt; 。それは逐語的文字列として扱われ、正規表現として解釈され&lt;em&gt;ません&lt;/em&gt;。最初の出現のみが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="ca459661381b77f41d22ce3c0494894ae4e1ba9d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; which is either &quot;&lt;code&gt;ok&lt;/code&gt;&quot;, &quot;&lt;code&gt;not-equal&lt;/code&gt;&quot;, or &quot;&lt;code&gt;timed-out&lt;/code&gt;&quot;.</source>
          <target state="translated">A &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;のどちらか「で &lt;code&gt;ok&lt;/code&gt; 、」「 &lt;code&gt;not-equal&lt;/code&gt; 」、または「 &lt;code&gt;timed-out&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="5206fa01860ba323314f7b5cb23869068e675be0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;invalid element in locales argument&quot;) is thrown if an array element isn't of type string.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;配列要素が文字列型でない場合（「ロケール引数に無効な要素」）がスローされます。</target>
        </trans-unit>
        <trans-unit id="2247216a7a1393502ff5b58f70d6da4ee07e55e4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception if the &lt;code&gt;propertiesObject&lt;/code&gt; parameter is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or a non-primitive-wrapper object.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外の&lt;/a&gt;場合は、例外 &lt;code&gt;propertiesObject&lt;/code&gt; のパラメータが&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;または非プリミティブ・ラッパー・オブジェクト。</target>
        </trans-unit>
        <trans-unit id="71de3f580d90f2a856a9417fce77d2635344565c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown if &lt;code&gt;&lt;var&gt;prototypeObj&lt;/var&gt;&lt;/code&gt; is undefined or null.</source>
          <target state="translated">A &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;場合にスローされ &lt;code&gt;&lt;var&gt;prototypeObj&lt;/var&gt;&lt;/code&gt; が未定義またはnullです。</target>
        </trans-unit>
        <trans-unit id="be026a6500abab62c0f3c1a1ba06cd11a8f384d4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown if the first argument is not a well formed object.</source>
          <target state="translated">A &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外は、&lt;/a&gt;最初の引数がうまく形成されたオブジェクトでない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="ea07a755143c730ed47d3beacdfc13a38ef990d8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown when attempts are made to change non-configurable property attributes (except &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;writable&lt;/code&gt;, if permitted) unless the current and new values are the same.</source>
          <target state="translated">A &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;試みが非構成可能プロパティ属性を変更するために行われたとき（ただしスローされる &lt;code&gt;value&lt;/code&gt; と &lt;code&gt;writable&lt;/code&gt; 現在の値と新しい値が同じでない限り、許可されている場合）。</target>
        </trans-unit>
        <trans-unit id="972b69f66ebc9f00367b3e5530ed4825e43881ea" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;target&lt;/code&gt; is not an &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; or if &lt;code&gt;prototype&lt;/code&gt; is neither an object nor &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、場合 &lt;code&gt;target&lt;/code&gt; ない&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;または場合 &lt;code&gt;prototype&lt;/code&gt; オブジェクトでももない&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e0bafdafc405566d9d7ce7f3627fc33d25478b42" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;target&lt;/code&gt; is not an &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、場合 &lt;code&gt;target&lt;/code&gt; ない&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb25e77ff949453c52dedd7a3fa7b9e4563573ec" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;target&lt;/code&gt; or &lt;code&gt;newTarget&lt;/code&gt; are not constructors.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、場合 &lt;code&gt;target&lt;/code&gt; または &lt;code&gt;newTarget&lt;/code&gt; はコンストラクタではありません。</target>
        </trans-unit>
        <trans-unit id="7bb15c2753e0f618afb24d5a14ee6b5db238bcd6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if the &lt;em&gt;target&lt;/em&gt; is not callable.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;場合、&lt;em&gt;ターゲットは&lt;/em&gt;呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="fee685859972af60789d465f8fb015138440f81c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;function&quot;&gt;function declaration&lt;/a&gt; is also limited in scope inside the block where the declaration occurs:</source>
          <target state="translated">&lt;a href=&quot;function&quot;&gt;関数宣言は&lt;/a&gt;また、宣言が発生するブロックの中範囲が限定されています。</target>
        </trans-unit>
        <trans-unit id="54c8325a51827282f908faa46975e6ad3bbb3dc5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;global_objects/generator&quot;&gt;generator object&lt;/a&gt; is both, iterator and iterable:</source>
          <target state="translated">&lt;a href=&quot;global_objects/generator&quot;&gt;ジェネレータオブジェクトは&lt;/a&gt;、イテレータと反復可能でもあります。</target>
        </trans-unit>
        <trans-unit id="9687726c5be4bf3421292dc48ea0095ad087dd28" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; is an example of a built-in iterable object:</source>
          <target state="translated">A &lt;a href=&quot;global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;組み込み反復可能オブジェクトの一例です。</target>
        </trans-unit>
        <trans-unit id="7a4d552f9e15f73d3e404f4fe0efc7a20b98e8b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream and compile.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;オブジェクトか、ストリーミングやコンパイルしたい.wasmモジュールの基本となるソースを表す1つ、と果たしていき約束。</target>
        </trans-unit>
        <trans-unit id="4905e7c0c4ab4689a993b295b78420fffca1e446" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream, compile, and instantiate.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;オブジェクトまたはあなたが流れ、コンパイル、およびインスタンス化したい.wasmモジュールの基本となるソースを表す1つ、と果たしていき約束。</target>
        </trans-unit>
        <trans-unit id="594c3ca6cf174be325d2d0ef16c5b85b3a5347c2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown if an invalid Unicode code point is given (e.g. &quot;RangeError: NaN is not a valid code point&quot;).</source>
          <target state="translated">A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;無効なUnicodeコードポイントが与えられた場合にスローされます（例えば、「例外RangeError：NaNの有効なコード・ポイントではありません」）。</target>
        </trans-unit>
        <trans-unit id="53ae6707d219d3eb2e8246151c524b14aa57a31b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; containing WebAssembly binary code to be validated.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型指定された配列&lt;/a&gt;または&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; WebAssemblyバイナリコードを含むが検証されます。</target>
        </trans-unit>
        <trans-unit id="704e58931dfc471fd6ce93bd72109c41236ee60c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; containing the binary code of the .wasm module you want to compile.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型指定された配列&lt;/a&gt;または&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;コンパイルする.wasmモジュールのバイナリコードを含みます。</target>
        </trans-unit>
        <trans-unit id="6746a446d99dcd971da402aa449b7f521efaf633" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;code point&lt;/a&gt; is a value in the Unicode codespace; that is, the range of integers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;0x10FFFF&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;コードポイントは、&lt;/a&gt; Unicodeのコードスペース内の値です。つまり、 &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;0x10FFFF&lt;/code&gt; までの整数の範囲です。</target>
        </trans-unit>
        <trans-unit id="55fd0b75aaad9386e86ed8d4602a208acead2548" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown if the &lt;code&gt;length&lt;/code&gt; is larger than &lt;a href=&quot;number/max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt; (&amp;gt;= 2 ** 53) or negative.</source>
          <target state="translated">A &lt;a href=&quot;rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;場合にスローされる &lt;code&gt;length&lt;/code&gt; よりも大きい&lt;a href=&quot;number/max_safe_integer&quot;&gt; &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; &lt;/a&gt;（&amp;gt; = 2 ** 53）または陰性。</target>
        </trans-unit>
        <trans-unit id="7205bac44021b8d708776412ea558802ff4460d6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive is not allowed at the top of such functions per the ECMAScript specification.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 指令はECMAScript仕様当たりのそのような機能の先頭に許されません。</target>
        </trans-unit>
        <trans-unit id="04db161867abd892d1879650dd50a42a3241956f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive is written at the top of a function that has one of the following parameters:</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ディレクティブは、次のいずれかのパラメータを持つ関数の先頭に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="36fa3b6ca02d560835a571b61d60a0be9ae0ff72" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; statement is called outside of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;function&lt;/a&gt;. Maybe there are missing curly brackets somewhere? The &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; statements must be in a function, because they end (or pause and resume) function execution and specify a value to be returned to the function caller.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; 文が外部と呼ばれる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;機能&lt;/a&gt;。たぶんどこかに中かっこがありませんか？ &lt;code&gt;return&lt;/code&gt; と &lt;code&gt;yield&lt;/code&gt; の文は、彼らが終了（または一時停止と再開）するので、関数内で関数実行することと、関数呼び出し側に返される値を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b5a5c49fef452a6040ad34681ccecffc50d13bda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;&lt;/code&gt; which will be resolved with the value returned by the async function, or rejected with an uncaught exception thrown from within the async function.</source>
          <target state="translated">A &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;&lt;/code&gt; 非同期関数によって返された値を使用して解決、または非同期関数内からスローキャッチされない例外で拒否されます。</target>
        </trans-unit>
        <trans-unit id="ee2f9d9e32a76553f9da405c9dff57319320c2cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;strong&gt;Promise&lt;/strong&gt;&lt;/code&gt; is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a &lt;em&gt;promise&lt;/em&gt; to supply the value at some point in the future.</source>
          <target state="translated">A &lt;code&gt;&lt;strong&gt;Promise&lt;/strong&gt;&lt;/code&gt; 約束が作成されたときに必ずしも知られていない値のためのプロキシです。ハンドラーを非同期アクションの最終的な成功値または失敗理由に関連付けることができます。これにより、非同期メソッドは同期メソッドのように値を返すことができます。非同期メソッドは、最終的な値をすぐに返すのではなく、将来のある時点で値を提供する&lt;em&gt;という約束&lt;/em&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="aadcbd699b9905adade866c2e59b1be431005843" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GlobalDescriptor&lt;/code&gt; dictionary object, which contains two properties:</source>
          <target state="translated">&lt;code&gt;GlobalDescriptor&lt;/code&gt; 2つのプロパティが含まれている辞書オブジェクト：</target>
        </trans-unit>
        <trans-unit id="5200ff483f97e4666f3e1ef542a97c6bbf3a87d7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt; is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable&quot;&gt;iterable&lt;/a&gt; and can thus be directly iterated, whereas iterating over an &lt;code&gt;Object&lt;/code&gt; requires obtaining its keys in some fashion and iterating over them.</source>
          <target state="translated">A &lt;code&gt;Map&lt;/code&gt; で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable&quot;&gt;反復可能な&lt;/a&gt;ので、直接の繰り返し処理のに対し、反復することができる &lt;code&gt;Object&lt;/code&gt; 何らかの形でそのキーを取得し、それらを反復処理が必要です。</target>
        </trans-unit>
        <trans-unit id="cb049fe93ca3b653d2fbae6338cee77ded205c54" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt; may perform better in scenarios involving frequent addition and removal of key pairs.</source>
          <target state="translated">A &lt;code&gt;Map&lt;/code&gt; 頻繁に加えて、キーペアの除去を含むシナリオでより良い実行することができます。</target>
        </trans-unit>
        <trans-unit id="3560b3d3847df14e26f9c3ea9810d33ac4d21c46" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt; object iterates its elements in insertion order &amp;mdash; a &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; loop returns an array of &lt;code&gt;[key, value]&lt;/code&gt; for each iteration.</source>
          <target state="translated">A &lt;code&gt;Map&lt;/code&gt; オブジェクトは、挿入のために、その要素を反復する- &lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;ループ戻りのアレイ &lt;code&gt;[key, value]&lt;/code&gt; 各反復について。</target>
        </trans-unit>
        <trans-unit id="4ac1d45331418e486ac804b5e04469781abfba9c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; is in one of these states:</source>
          <target state="translated">A &lt;code&gt;Promise&lt;/code&gt; これらのいずれかの状態にあります。</target>
        </trans-unit>
        <trans-unit id="2b185f8ebf5ef7f3ba82db7735ad53af609f886d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; object is created using the &lt;code&gt;new &lt;/code&gt;keyword and its constructor. This constructor takes as its argument a function, called the &quot;executor function&quot;. This function should take two functions as parameters. The first of these functions (&lt;code&gt;resolve&lt;/code&gt;) is called when the asynchronous task completes successfully and returns the results of the task as a value. The second (&lt;code&gt;reject&lt;/code&gt;) is called when the task fails, and returns the reason for failure, which is typically an error object.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; オブジェクトを使用して作成された &lt;code&gt;new &lt;/code&gt; キーワードとそのコンストラクタを。このコンストラクタは、「エグゼキュータ関数」と呼ばれる関数を引数として取ります。この関数は、パラメーターとして2つの関数を取る必要があります。これらの関数の最初の関数（ &lt;code&gt;resolve&lt;/code&gt; ）は、非同期タスクが正常に完了し、タスクの結果を値として返すときに呼び出されます。2番目の（ &lt;code&gt;reject&lt;/code&gt; ）は、タスクが失敗したときに呼び出され、失敗の理由（通常はエラーオブジェクト）を返します。</target>
        </trans-unit>
        <trans-unit id="c6964b5866f2007ccb24c5905bc563e99dde8fb9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; that resolves to a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled module.</source>
          <target state="translated">A &lt;code&gt;Promise&lt;/code&gt; に解決されること&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; の&lt;/a&gt;オブジェクトがコンパイルされたモジュールを表します。</target>
        </trans-unit>
        <trans-unit id="4de9b416e1fbc7481a27bb8429d6397a2254b14e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; that resolves to a &lt;code&gt;ResultObject&lt;/code&gt; which contains two fields:</source>
          <target state="translated">A &lt;code&gt;Promise&lt;/code&gt; に解決されることを &lt;code&gt;ResultObject&lt;/code&gt; する 2つのフィールドが含まれています。</target>
        </trans-unit>
        <trans-unit id="00d05183f590cb4b14e769763ee8c647e28e7d60" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; that resolves to an &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">A &lt;code&gt;Promise&lt;/code&gt; と解決さ&lt;a href=&quot;instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; の&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="1cfb25bd057c28192df1cb63abbb26d409cf50fa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RangeError&lt;/code&gt; is thrown when trying to pass a value as an argument to a function that does not allow a range that includes the value. This can be encountered when passing a value that is not one of the allowed string values to &lt;a href=&quot;string/normalize&quot;&gt;&lt;code&gt;String.prototype.normalize()&lt;/code&gt;&lt;/a&gt;, or when attempting to create an array of an illegal length with the &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; constructor, or when passing bad values to the numeric methods &lt;a href=&quot;number/toexponential&quot;&gt;&lt;code&gt;Number.toExponential()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;number/tofixed&quot;&gt;&lt;code&gt;Number.toFixed()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;number/toprecision&quot;&gt;&lt;code&gt;Number.toPrecision()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;RangeError&lt;/code&gt; 値を含む範囲を許可していない関数の引数として値を渡そうとしたときにスローされます。これは、許可された文字列値ではない値を&lt;a href=&quot;string/normalize&quot;&gt; &lt;code&gt;String.prototype.normalize()&lt;/code&gt; &lt;/a&gt;に渡す場合、または&lt;a href=&quot;array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;コンストラクターで無効な長さの配列を作成しようとした場合、または数値に不正な値を渡す場合に発生する可能性があります。メソッド&lt;a href=&quot;number/toexponential&quot;&gt; &lt;code&gt;Number.toExponential()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;number/tofixed&quot;&gt; &lt;code&gt;Number.toFixed()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;number/toprecision&quot;&gt; &lt;code&gt;Number.toPrecision()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed2befd856c4255cc5994cf904901277fc2776d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReferenceError&lt;/code&gt; is thrown when trying to dereference a variable that has not been declared.</source>
          <target state="translated">A &lt;code&gt;ReferenceError&lt;/code&gt; 宣言されていない変数を逆参照しようとしたときにスローされます。</target>
        </trans-unit>
        <trans-unit id="be2a7b3a6debeb9c96cf1d10b1a0a4c542b3fa7b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; object can always be converted to its primitive counterpart with the &lt;a href=&quot;string/valueof&quot;&gt;&lt;code&gt;valueOf()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; オブジェクトは、常にで、そのプリミティブの対応に変換することができる&lt;a href=&quot;string/valueof&quot;&gt; &lt;code&gt;valueOf()&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="8f87d17361da9b7795965121199c3f88b970071f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyntaxError&lt;/code&gt; is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.</source>
          <target state="translated">A &lt;code&gt;SyntaxError&lt;/code&gt; 、コードを解析する際に、言語の構文に準拠していないときのJavaScriptエンジンに遭遇トークンまたはトークンの順序をスローされます。</target>
        </trans-unit>
        <trans-unit id="ce36c6d1ef6544f01f6fb69c452e505dbbd0e818" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TypeError&lt;/code&gt; is thrown when an operand or argument passed to a function is incompatible with the type expected by that operator or function.</source>
          <target state="translated">A &lt;code&gt;TypeError&lt;/code&gt; 例外は、関数に渡されたオペランドまたは引数がその演算子や関数が期待するタイプと互換性がない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="6903451e264fc3512b6bd0a4d441040a526ae25d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URIError&lt;/code&gt; is thrown when the global URI handling functions are passed a malformed URI.</source>
          <target state="translated">A &lt;code&gt;URIError&lt;/code&gt; は機能を扱うグローバルなURIが不正な形式のURIを渡されたときにスローされます。</target>
        </trans-unit>
        <trans-unit id="98fc25d38ba5089b4c8b88bc8b8397aaa28c8500" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebAssembly.Global&lt;/code&gt; object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; instances. This allows dynamic linking of multiple modules.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Global&lt;/code&gt; オブジェクトには、JavaScriptおよび1つのまたは複数を横切る輸入/輸出の両方からアクセス可能な、グローバル変数のインスタンスを表す&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; の&lt;/a&gt;インスタンス。これにより、複数のモジュールを動的にリンクできます。</target>
        </trans-unit>
        <trans-unit id="9a8b77bae4bc6d8a32b6a9eeaef79f0605e7f2a9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebAssembly.Instance&lt;/code&gt; object is a stateful, executable instance of a &lt;a href=&quot;module&quot;&gt;WebAssembly.Module&lt;/a&gt;. &lt;code&gt;Instance&lt;/code&gt; objects contain all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly functions&lt;/a&gt; that allow calling into WebAssembly code from JavaScript.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Instance&lt;/code&gt; のオブジェクトは、ステートフル、実行インスタンスである&lt;a href=&quot;module&quot;&gt;WebAssembly.Module&lt;/a&gt;。 &lt;code&gt;Instance&lt;/code&gt; オブジェクトには、JavaScriptからWebAssemblyコードを呼び出すことができるすべての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;エクスポートされたWebAssembly関数&lt;/a&gt;が含まれています。</target>
        </trans-unit>
        <trans-unit id="921fca7011f27002aa157c2ec7c9c36f16b699b0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebAssembly.Module&lt;/code&gt; object contains stateless WebAssembly code that has already been compiled by the browser and can be efficiently &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;shared with Workers&lt;/a&gt;, and instantiated multiple times. To instantiate the module, call &lt;a href=&quot;instantiate#Secondary_overload_%E2%80%94_taking_a_module_object_instance&quot;&gt;the secondary overload of &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt;&lt;/a&gt;.   The &lt;code&gt;WebAssembly.Module()&lt;/code&gt; constructor function can be called to synchronously compile given WebAssembly binary code. However, the primary way to get a &lt;code&gt;Module&lt;/code&gt; is through an asynchronous compilation function like &lt;a href=&quot;compile&quot;&gt;&lt;code&gt;WebAssembly.compile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Module&lt;/code&gt; のオブジェクトが既にブラウザによってコンパイルされており、効率的にすることができるステートレスWebAssemblyコード含ま&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;労働者と共有し&lt;/a&gt;、そして複数回インスタンス化します。モジュールをインスタンス化するに&lt;a href=&quot;instantiate#Secondary_overload_%E2%80%94_taking_a_module_object_instance&quot;&gt;は、 &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; の&lt;/a&gt; 2次オーバーロードを呼び出します。 &lt;code&gt;WebAssembly.Module()&lt;/code&gt; コンストラクタ関数は同期所与WebAssemblyバイナリコードをコンパイルするために呼び出すことができます。ただし、 &lt;code&gt;Module&lt;/code&gt; を取得する主な方法は、&lt;a href=&quot;compile&quot;&gt; &lt;code&gt;WebAssembly.compile()&lt;/code&gt; &lt;/a&gt;などの非同期コンパイル関数を使用することです。</target>
        </trans-unit>
        <trans-unit id="eba41b0201e452f630459374c806c98a1297ee1f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;break&lt;/code&gt; statement, with or without a following label, cannot be used within the body of a function that is itself nested within the current loop, switch, or label statement that the &lt;code&gt;break&lt;/code&gt; statement is intended to break out of.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 、次のラベルの有無にかかわらず文は、それ自体が電流ループ、スイッチ、またはそのラベルステートメント内でネストされた関数の本体内で使用することはできません &lt;code&gt;break&lt;/code&gt; 文はから抜け出すことを意図しています。</target>
        </trans-unit>
        <trans-unit id="bdadf50dbb9e369f4ca563534df20d38ecd7fb6e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;case&lt;/code&gt; clause used to match against &lt;code&gt;expression&lt;/code&gt;. If the &lt;code&gt;expression&lt;/code&gt; matches the specified &lt;code&gt;valueN&lt;/code&gt;, the statements inside the case clause are executed until either the end of the &lt;code&gt;switch&lt;/code&gt; statement or a &lt;code&gt;break&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; 句は、照合に使用される &lt;code&gt;expression&lt;/code&gt; 。場合は &lt;code&gt;expression&lt;/code&gt; 指定された一致する &lt;code&gt;valueN&lt;/code&gt; 、ケース節内のステートメントは、のいずれかの端まで実行されている &lt;code&gt;switch&lt;/code&gt; 文または &lt;code&gt;break&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ffb5782aae7b78d5a8ea5e6a7841ff66f48e5e13" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;catch&lt;/code&gt; clause contains statements that specify what to do if an exception is thrown in the &lt;code&gt;try&lt;/code&gt; block. That is, you want the &lt;code&gt;try&lt;/code&gt; block to succeed, and if it does not succeed, you want to pass control to the &lt;code&gt;catch&lt;/code&gt; block. If any statement within the &lt;code&gt;try&lt;/code&gt; block (or in a function called from within the &lt;code&gt;try&lt;/code&gt; block) throws an exception, control is immediately shifted to the &lt;code&gt;catch&lt;/code&gt; clause. If no exception is thrown in the &lt;code&gt;try&lt;/code&gt; block, the &lt;code&gt;catch&lt;/code&gt; clause is skipped.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 句は、例外がスローにされた場合にどうするかを指定するステートメントが含ま &lt;code&gt;try&lt;/code&gt; ブロックを。つまり、 &lt;code&gt;try&lt;/code&gt; ブロックを成功させ、成功しない場合は、 &lt;code&gt;catch&lt;/code&gt; ブロックに制御を渡す必要があります。内の任意のステートメント場合は &lt;code&gt;try&lt;/code&gt; （または内から呼び出された関数内のブロック &lt;code&gt;try&lt;/code&gt; ブロック）が例外をスローし、制御がすぐにシフトしている &lt;code&gt;catch&lt;/code&gt; 句。 &lt;code&gt;try&lt;/code&gt; ブロックで例外がスローされない場合、 &lt;code&gt;catch&lt;/code&gt; 句はスキップされます。</target>
        </trans-unit>
        <trans-unit id="02e8d04e469b5bcbf21433a4012b82c5bfc9ce85" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;default&lt;/code&gt; clause; if provided, this clause is executed if the value of &lt;code&gt;expression&lt;/code&gt; doesn't match any of the &lt;code&gt;case&lt;/code&gt; clauses.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; 句。指定した場合、 &lt;code&gt;expression&lt;/code&gt; の値がどの &lt;code&gt;case&lt;/code&gt; 句とも一致しない場合、この句が実行されます。</target>
        </trans-unit>
        <trans-unit id="1f6391784764ff523273fba5cceddabeec206abf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;finally&lt;/code&gt; callback will not receive any argument, since there's no reliable means of determining if the promise was fulfilled or rejected. This use case is for precisely when you &lt;em&gt;do not care&lt;/em&gt; about the rejection reason, or the fulfillment value, and so there's no need to provide it.</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 約束が果たさまたは拒否されたかどうかを決定する信頼できる手段はありませんので、コールバックは、任意の引数を受け取ることができません。このユースケースは、あなたが正確にするときのためにある&lt;em&gt;気にしない&lt;/em&gt;拒絶理由、または履行価値について、そしてそれを提供する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5c85fa7f0722fca7a5c029123284b0bf3d6b17a3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;for...in&lt;/code&gt; loop iterates over the properties of an object in an arbitrary order (see the &lt;a href=&quot;../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator for more on why one cannot depend on the seeming orderliness of iteration, at least in a cross-browser setting).</source>
          <target state="translated">A &lt;code&gt;for...in&lt;/code&gt; 任意の順序でオブジェクトのプロパティをループ反復（参照&lt;a href=&quot;../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;一方は少なくともクロスブラウザの設定で、反復の見せかけの秩序に依存することができない理由の詳細について演算子）。</target>
        </trans-unit>
        <trans-unit id="7daf5d7bbf2123562d6d346b537a06d3d3f2bd90" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;for...in&lt;/code&gt; loop only iterates over enumerable, non-Symbol properties. Objects created from built&amp;ndash;in constructors like &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Object&lt;/code&gt; have inherited non&amp;ndash;enumerable properties from &lt;code&gt;Object.prototype&lt;/code&gt; and &lt;code&gt;String.prototype&lt;/code&gt;, such as &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;../global_objects/string/indexof&quot;&gt;&lt;code&gt;indexOf()&lt;/code&gt;&lt;/a&gt; method or &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;../global_objects/object/tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method. The loop will iterate over all enumerable properties of the object itself and those the object inherits from its constructor's prototype (properties closer to the object in the prototype chain override prototypes' properties).</source>
          <target state="translated">&lt;code&gt;for...in&lt;/code&gt; ループのみ列挙、非シンボルのプロパティを介して反復します。 &lt;code&gt;Array&lt;/code&gt; や &lt;code&gt;Object&lt;/code&gt; などの組み込みコンストラクターから作成されたオブジェクトは、&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../global_objects/string/indexof&quot;&gt; &lt;code&gt;indexOf()&lt;/code&gt; &lt;/a&gt;メソッドや&lt;a href=&quot;../global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../global_objects/object/tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;メソッドなど、 &lt;code&gt;Object.prototype&lt;/code&gt; および &lt;code&gt;String.prototype&lt;/code&gt; から列挙不可能なプロパティを継承しています。ループは、オブジェクト自体のすべての列挙可能なプロパティと、オブジェクトがコンストラクターのプロトタイプから継承するプロパティ（プロトタイプチェーンのオブジェクトに近いプロパティがプロトタイプのプロパティをオーバーライドする）を反復します。</target>
        </trans-unit>
        <trans-unit id="e7396441d91b985770db10dbd377efee8986b41f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;function*&lt;/code&gt; expression is very similar to and has almost the same syntax as a &lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;function* statement&lt;/code&gt;&lt;/a&gt;. The main difference between a &lt;code&gt;function*&lt;/code&gt; expression and a &lt;code&gt;function*&lt;/code&gt; statement is the &lt;em&gt;function name,&lt;/em&gt; which can be omitted in &lt;code&gt;function*&lt;/code&gt; expressions to create &lt;em&gt;anonymous&lt;/em&gt; generator functions. See also the chapter about &lt;a href=&quot;../functions&quot;&gt;functions&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;function*&lt;/code&gt; 式は非常によく似ているとほぼ同じ構文を持っている&lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;function* statement&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;function*&lt;/code&gt; 式と &lt;code&gt;function*&lt;/code&gt; ステートメントの主な違いは、&lt;em&gt;関数名&lt;/em&gt;です。&lt;em&gt;無名&lt;/em&gt;ジェネレーター関数を作成するために &lt;code&gt;function*&lt;/code&gt; 式で省略できます。詳細については、&lt;a href=&quot;../functions&quot;&gt;関数&lt;/a&gt;に関する章も参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="161855917ba8e27cb251bc7e0ab15523733382a4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;return&lt;/code&gt; statement in a generator, when executed, will make the generator finished (i.e the &lt;code&gt;done&lt;/code&gt; property of the object returned by it will be set to &lt;code&gt;true&lt;/code&gt;). If a value is returned, it will be set as the &lt;code&gt;value&lt;/code&gt; property of the object returned by the generator.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; ジェネレータ内のステートメントは、実行されると、（つまり、発電機が終了になります &lt;code&gt;done&lt;/code&gt; 、それによって返されたオブジェクトのプロパティがに設定されます &lt;code&gt;true&lt;/code&gt; ）。値が返された &lt;code&gt;value&lt;/code&gt; 、ジェネレーターによって返されたオブジェクトのvalueプロパティとして設定されます。</target>
        </trans-unit>
        <trans-unit id="553b384fbb6585ba773d28d758f9f429de0314f4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;then&lt;/code&gt; call will return a rejected promise if the function throws an error or returns a rejected Promise.</source>
          <target state="translated">&lt;code&gt;then&lt;/code&gt; 関数がエラーをスローまたは拒否の約束を返す場合、コールは拒否約束を返します。</target>
        </trans-unit>
        <trans-unit id="f85669998c43af1d574900f10da9c77e5f1b39dd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;this&lt;/code&gt; behaves a little differently in JavaScript compared to other languages. It also has some differences between &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; and non-strict mode.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 、異なるJavaScriptで少しは他の言語に比べて動作します。&lt;a href=&quot;../strict_mode&quot;&gt;厳格モード&lt;/a&gt;と非厳格モードの間にもいくつかの違いがあります。</target>
        </trans-unit>
        <trans-unit id="e736d0f4e065e89736483a5edb09020c00eb2377" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;yield&lt;/code&gt;, which causes the generator to once again pause and return the generator's new value. The next time &lt;code&gt;next()&lt;/code&gt; is called, execution resumes with the statement immediately after the &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; ジェネレータは再び一時停止し、発電機の新しい値を返すようになり、。次に &lt;code&gt;next()&lt;/code&gt; が呼び出されると、 &lt;code&gt;yield&lt;/code&gt; の直後のステートメントから実行が再開されます。</target>
        </trans-unit>
        <trans-unit id="cf024d343332c9a271ae80fcae03d8a4d750816d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;&lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt;&lt;/em&gt; (or &lt;em&gt;function declaration&lt;/em&gt;) requires a name, this won't work:</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;../statements/function&quot;&gt;function文&lt;/a&gt;&lt;/em&gt;（または&lt;em&gt;関数宣言は&lt;/em&gt;）名前を必要とし、これは動作しません。</target>
        </trans-unit>
        <trans-unit id="3778b81b203c21ee19e5a64392e174588d725865" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;bitmask&lt;/em&gt; is a sequence of bits that can manipulate and/or read flags. Typically, a &quot;primitive&quot; bitmask for each flag is defined:</source>
          <target state="translated">&lt;em&gt;ビットマスクは、&lt;/em&gt;操作および/またはフラグを読み取ることができるビットのシーケンスです。通常、各フラグの「プリミティブ」ビットマスクが定義されています。</target>
        </trans-unit>
        <trans-unit id="616c71df006301f0a75f6e4ff7f05b356e995341" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;function declaration&lt;/em&gt; of a function named &lt;code&gt;multiply&lt;/code&gt;:</source>
          <target state="translated">&lt;em&gt;関数宣言&lt;/em&gt;という名前の関数の &lt;code&gt;multiply&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="35894eb871c6c979df3d1ba81e1c6ca6f8e00686" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;function expression&lt;/em&gt; of a function named &lt;code&gt;func_name&lt;/code&gt; assigned to the variable &lt;code&gt;multiply:&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;関数式&lt;/em&gt;関数という名前の &lt;code&gt;func_name&lt;/code&gt; 変数に代入 &lt;code&gt;multiply:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a16b80918021826a12c3ca2b99b7b638286b8d63" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;function expression&lt;/em&gt; of an anonymous function assigned to the variable &lt;code&gt;multiply:&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;関数式&lt;/em&gt;の変数に割り当てられた匿名関数の &lt;code&gt;multiply:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4cecb0627284110016a4476607f97b3720e6e60d" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;&lt;em&gt;TypedArray&lt;/em&gt;&lt;/strong&gt; object describes an array-like view of an underlying &lt;a href=&quot;arraybuffer&quot;&gt;binary data buffer&lt;/a&gt;. There is no global property named &lt;code&gt;TypedArray&lt;/code&gt;, nor is there a directly visible &lt;code&gt;TypedArray&lt;/code&gt; constructor. Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;TypedArrayの&lt;/em&gt;&lt;/strong&gt;オブジェクトは、アレイ状の基礎となるのビューについて説明&lt;a href=&quot;arraybuffer&quot;&gt;バイナリデータバッファ&lt;/a&gt;。 &lt;code&gt;TypedArray&lt;/code&gt; という名前のグローバルプロパティはなく、直接表示される &lt;code&gt;TypedArray&lt;/code&gt; コンストラクターもありません。代わりに、いくつかの異なるグローバルプロパティがあり、その値は特定の要素タイプの型付き配列コンストラクターです。以下にリストします。次のページでは、任意の型の要素を含む任意の型付き配列で使用できる一般的なプロパティとメソッドを見つけます。</target>
        </trans-unit>
        <trans-unit id="4ffdaf43db80d9813eafb43fcb11b04b02619eba" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;class expression&lt;/strong&gt; is another way to define a class. Class expressions can be named or unnamed. The name given to a named class expression is local to the class's body. (it can be retrieved through the class's (not an instance's) &lt;a href=&quot;global_objects/function/name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property, though).</source>
          <target state="translated">&lt;strong&gt;クラス式は&lt;/strong&gt;クラスを定義する別の方法です。クラス式は、名前を付けても付けなくてもかまいません。名前付きクラス式に付けられた名前は、クラスの本体に対してローカルです。（ただし、（インスタンスではなく）クラスの&lt;a href=&quot;global_objects/function/name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;プロパティを通じて取得できます）。</target>
        </trans-unit>
        <trans-unit id="e1828be1ceabd01ec290c6d2e59d9a92810744db" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;negative&lt;/strong&gt; number if the reference string occurs before the compare string; &lt;strong&gt;positive&lt;/strong&gt; if the reference string occurs after the compare string; &lt;strong&gt;0&lt;/strong&gt; if they are equivalent.</source>
          <target state="translated">&lt;strong&gt;陰性&lt;/strong&gt;参照ストリングを比較する文字列の前に発生した場合の数; 参照文字列が比較文字列の後にある場合は&lt;strong&gt;正&lt;/strong&gt;。同等の場合は&lt;strong&gt;0&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="df1fd9e80de43273a6485b1a24756946a1ea7ac2" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;pending&lt;/strong&gt;&lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; in all other cases. This returned promise is then resolved/rejected &lt;strong&gt;asynchronously&lt;/strong&gt; (as soon as the stack is empty) when all the promises in the given &lt;var&gt;iterable&lt;/var&gt; have resolved, or if any of the promises reject. See the example about &quot;Asynchronicity or synchronicity of Promise.all&quot; below. Returned values will be in order of the Promises passed, regardless of completion order.</source>
          <target state="translated">&lt;strong&gt;保留&lt;/strong&gt;&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;他のすべての場合インチ この返されたプロミスは、指定された &lt;var&gt;iterable&lt;/var&gt; 内のすべてのプロミスが解決されたとき、またはいずれかのプロミスが拒否されたときに、&lt;strong&gt;非同期に&lt;/strong&gt;（スタックが空になると）解決または拒否されます。下記の「Promise.allの非同期性または同期性」に関する例を参照してください。戻り値は、完了順序に関係なく、渡されたPromiseの順序になります。</target>
        </trans-unit>
        <trans-unit id="25ad8a62b7513322b403e0f619eb8a058805f04f" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;pending&lt;/strong&gt;&lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that &lt;strong&gt;asynchronously &lt;/strong&gt;yields the value of first promise in the given iterable to resolve or reject.</source>
          <target state="translated">解決または拒否する指定されたイテラブルの最初のプロミスの値を&lt;strong&gt;非同期で&lt;/strong&gt;生成する&lt;strong&gt;保留中の&lt;/strong&gt;&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02a0219c38d84676f5da6ee3322b83dba7383620" translate="yes" xml:space="preserve">
          <source>A BCP 47 language tag defines a language and minimally contains a primary language code. In its most common form it can contain, in order: a language code, a script code, and a country or region code, all separated by hyphens. While the tag is not case sensitive, it is recommended to use title case for script code, upper case for country and region codes and lower case for everything else.</source>
          <target state="translated">BCP 47言語タグは、言語を定義し、最小限のプライマリ言語コードを含む。最も一般的な形式では、言語コード、スクリプトコード、国または地域コードの順にハイフンで区切られています。このタグは大文字と小文字を区別しませんが、スクリプトコードにはタイトルケース、国コードと地域コードには大文字、それ以外のものには小文字を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="43804a4a9aa6352b15786146999b141dd3cea0a4" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating if an object should be flattened to its array elements. Used by &lt;a href=&quot;array/concat&quot;&gt;&lt;code&gt;Array.prototype.concat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オブジェクトを配列要素にフラット化する必要があるかどうかを示すブール値。&lt;a href=&quot;array/concat&quot;&gt; &lt;code&gt;Array.prototype.concat()&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="73c4fecc39afe3b7d7ff135a3c3914a49616975e" translate="yes" xml:space="preserve">
          <source>A JSON string representing the given value.</source>
          <target state="translated">与えられた値を表すJSON文字列。</target>
        </trans-unit>
        <trans-unit id="75d1f145db781ec7a8306c0f9c1ded681ab8f7b5" translate="yes" xml:space="preserve">
          <source>A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the &lt;code&gt;Array&lt;/code&gt; constructor and that argument is a number (see the arrayLength parameter below). Note that this special case only applies to JavaScript arrays created with the &lt;code&gt;Array&lt;/code&gt; constructor, not array literals created with the bracket syntax.</source>
          <target state="translated">JavaScript配列は、単一の引数が &lt;code&gt;Array&lt;/code&gt; コンストラクターに渡され、その引数が数値である場合を除いて、指定された要素で初期化されます（以下のarrayLengthパラメーターを参照）。この特殊なケースは、 &lt;code&gt;Array&lt;/code&gt; コンストラクターで作成されたJavaScript配列にのみ適用され、ブラケット構文で作成された配列リテラルには適用されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="687c3ed1334648e979e3b2e6e75ba3934e437431" translate="yes" xml:space="preserve">
          <source>A JavaScript array's &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property and numerical properties are connected. Several of the built-in array methods (e.g., &lt;a href=&quot;array/join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/indexof&quot;&gt;&lt;code&gt;indexOf()&lt;/code&gt;&lt;/a&gt;, etc.) take into account the value of an array's &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property when they're called. Other methods (e.g., &lt;a href=&quot;array/push&quot;&gt;&lt;code&gt;push()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/splice&quot;&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/a&gt;, etc.) also result in updates to an array's &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">JavaScript配列の&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティと数値プロパティが関連付けられています。組み込みの配列メソッドのいくつか（例：&lt;a href=&quot;array/join&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/indexof&quot;&gt; &lt;code&gt;indexOf()&lt;/code&gt; &lt;/a&gt;など）は、呼び出されたときに配列の&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティの値を考慮します。他のメソッド（例：&lt;a href=&quot;array/push&quot;&gt; &lt;code&gt;push()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/splice&quot;&gt; &lt;code&gt;splice()&lt;/code&gt; &lt;/a&gt;など）も、配列の&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティを更新します。</target>
        </trans-unit>
        <trans-unit id="f8252cb059d152f4c5282ca286dd2eac86683b49" translate="yes" xml:space="preserve">
          <source>A JavaScript expression or statement.</source>
          <target state="translated">JavaScript の式または文。</target>
        </trans-unit>
        <trans-unit id="b7baf04c55848a7dee60b6538de0c81bba6f8335" translate="yes" xml:space="preserve">
          <source>A JavaScript identifier must start with a letter, underscore (_), or dollar sign ($). They can't start with a digit! Only subsequent characters can be digits (0-9).</source>
          <target state="translated">JavaScript の識別子は、文字、アンダースコア (_)、またはドル記号 ($)で始まらなければなりません。数字で始まることはできません。それ以降の文字は、数字 (0-9)のみにすることができます。</target>
        </trans-unit>
        <trans-unit id="436105a2e47eb8b6b91a0f5ffa9c533a30bfd6f8" translate="yes" xml:space="preserve">
          <source>A JavaScript statement. &lt;code&gt;break&lt;/code&gt; can be used with any labeled statement, and &lt;code&gt;continue&lt;/code&gt; can be used with looping labeled statements.</source>
          <target state="translated">JavaScriptステートメント。 &lt;code&gt;break&lt;/code&gt; は任意のラベル付きステートメントで使用でき、 &lt;code&gt;continue&lt;/code&gt; はラベル付きステートメントのループで使用できます。</target>
        </trans-unit>
        <trans-unit id="f06db2b9d1c09f3e2c77889d9d3b0c6ac22d6231" translate="yes" xml:space="preserve">
          <source>A Proxy object created with &lt;code&gt;new Proxy(target, handler)&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;new Proxy(target, handler)&lt;/code&gt; 呼び出しで作成されたProxyオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8e4136f228dfc977ef8108eb316e1654ad369597" translate="yes" xml:space="preserve">
          <source>A Taste of JavaScript&amp;rsquo;s New Parallel Primitives &amp;ndash; Mozilla Hacks</source>
          <target state="translated">JavaScriptの新しい並列プリミティブの味&amp;ndash; Mozillaハック</target>
        </trans-unit>
        <trans-unit id="c4aecde4d6fdca34ead5a48a782644f5bd00c362" translate="yes" xml:space="preserve">
          <source>A Unicode code point escape consists of &lt;code&gt;\u{&lt;/code&gt;, followed by a code point in hexadecimal base, followed by &lt;code&gt;}&lt;/code&gt;. The value of the hexadecimal digits must be in the range 0 and 0x10FFFF inclusive. Code points in the range U+10000 to U+10FFFF do not need to be represented as a surrogate pair. Code point escapes were added to JavaScript in ECMAScript 2015 (ES6).</source>
          <target state="translated">Unicodeコードポイントエスケープは、 &lt;code&gt;\u{&lt;/code&gt; 、16進数ベースのコードポイント、 &lt;code&gt;}&lt;/code&gt; で構成されます。16進数の値は、0から0x10FFFFまでの範囲でなければなりません。U + 10000からU + 10FFFFの範囲のコードポイントは、サロゲートペアとして表す必要はありません。ECMAScript 2015（ES6）のJavaScriptにコードポイントエスケープが追加されました。</target>
        </trans-unit>
        <trans-unit id="83c551c83eb732fea88b2681ba8c3ba07f268b35" translate="yes" xml:space="preserve">
          <source>A Unicode escape sequence consists of exactly four hexadecimal digits following &lt;code&gt;\u&lt;/code&gt;. It represents a code unit in the UTF-16 encoding. For code points U+0000 to U+FFFF, the code unit is equal to the code point. Code points U+10000 to U+10FFFF require two escape sequences representing the two code units (a surrogate pair) used to encode the character; the surrogate pair is distinct from the code point.</source>
          <target state="translated">Unicodeエスケープシーケンスは、 &lt;code&gt;\u&lt;/code&gt; 続く4桁の16進数で構成されます。これは、UTF-16エンコーディングのコード単位を表します。コードポイントU + 0000〜U + FFFFの場合、コード単位はコードポイントに等しくなります。コードポイントU + 10000〜U + 10FFFFには、文字のエンコードに使用される2つのコード単位（サロゲートペア）を表す2つのエスケープシーケンスが必要です。サロゲートペアはコードポイントとは異なります。</target>
        </trans-unit>
        <trans-unit id="0aa411b19c7b113c3f6431bfadad85e7d602cfb8" translate="yes" xml:space="preserve">
          <source>A basic usage of &lt;code&gt;toDateString()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;toDateString()&lt;/code&gt; の基本的な使用法</target>
        </trans-unit>
        <trans-unit id="f2adaab87823eb11e318653dbb7524a3415a8bbc" translate="yes" xml:space="preserve">
          <source>A basic usage of &lt;code&gt;toTimeString()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;toTimeString()&lt;/code&gt; の基本的な使用法</target>
        </trans-unit>
        <trans-unit id="3e5e2bb2fff74dd2824727799dc53fdbdf26d42d" translate="yes" xml:space="preserve">
          <source>A basic use of &lt;code&gt;propertyIsEnumerable&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;propertyIsEnumerable&lt;/code&gt; の基本的な使用法</target>
        </trans-unit>
        <trans-unit id="d891a2194b452ecf93acc6c1566c1656cc91ed7f" translate="yes" xml:space="preserve">
          <source>A better way to concatenate arrays</source>
          <target state="translated">配列を連結するより良い方法</target>
        </trans-unit>
        <trans-unit id="4f9620050291138aff1d61b1756309b0d6ca9fea" translate="yes" xml:space="preserve">
          <source>A bitmask with multiple set flags acts like an &quot;either/or&quot;. For example, the following two are equivalent:</source>
          <target state="translated">複数のセットフラグを持つビットマスクは、&quot;どちらか一方 &quot;のように動作します。例えば、以下の2つは等価です。</target>
        </trans-unit>
        <trans-unit id="e5158c94a77d08d4208572b614ef2e4231f2f8b8" translate="yes" xml:space="preserve">
          <source>A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets.</source>
          <target state="translated">ブロック文は、0個以上の文をグループ化するために使用されます。ブロックは一組の中括弧で区切られます。</target>
        </trans-unit>
        <trans-unit id="91851f30b1a551d659f6525abe80e9d7be51f491" translate="yes" xml:space="preserve">
          <source>A boolean that specifies whether &lt;code&gt;bufferSource&lt;/code&gt; is valid wasm code (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;bufferSource&lt;/code&gt; が有効なwasmコードであるか（ &lt;code&gt;true&lt;/code&gt; ）、否か（ &lt;code&gt;false&lt;/code&gt; ）を指定するブール値。</target>
        </trans-unit>
        <trans-unit id="ee1ad7b74d0c975ebc4417e9a80894a26b0bfe7e" translate="yes" xml:space="preserve">
          <source>A bound function may also be constructed using the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator: doing so acts as though the target function had instead been constructed. The provided &lt;code&gt;this&lt;/code&gt; value is ignored, while prepended arguments are provided to the emulated function.</source>
          <target state="translated">バインドされた関数は、&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子を使用して構築することもできます。そうすると、ターゲット関数が代わりに構築されたかのように動作します。提供された &lt;code&gt;this&lt;/code&gt; 値は無視されますが、前に追加された引数はエミュレートされた関数に提供されます。</target>
        </trans-unit>
        <trans-unit id="8a5913715a114a560d95c181d3ab1214153cb231" translate="yes" xml:space="preserve">
          <source>A car constructor</source>
          <target state="translated">カーコンストラクター</target>
        </trans-unit>
        <trans-unit id="e259aa87721071e379d123997ab81127c59fa545" translate="yes" xml:space="preserve">
          <source>A character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen, but if the hyphen appears as the first or last character enclosed in the square brackets it is taken as a literal hyphen to be included in the character set as a normal character. It is also possible to include a character class in a character set.</source>
          <target state="translated">文字セットです。囲まれた文字のいずれかにマッチします。ハイフンを使って文字の範囲を指定することもできますが、角括弧で囲まれた最初の文字または最後の文字としてハイフンが現れた場合は、リテラルハイフンとして扱われ、通常の文字として文字セットに含まれます。文字集合に文字クラスを含めることも可能です。</target>
        </trans-unit>
        <trans-unit id="d9454cf43a106d619fb8d537cadb084a577d879a" translate="yes" xml:space="preserve">
          <source>A check that works in all hosts, including those supporting ECMA-262 prior to ed 5.1, is to test for the features specified in ECMA-402 that are required to support regional options for &lt;code&gt;Number.prototype.toLocaleString&lt;/code&gt; directly:</source>
          <target state="translated">ed 5.1より前のECMA-262をサポートするホストを含​​むすべてのホストで機能するチェックは、 &lt;code&gt;Number.prototype.toLocaleString&lt;/code&gt; の地域オプションを直接サポートするために必要なECMA-402で指定された機能をテストすることです。</target>
        </trans-unit>
        <trans-unit id="5481a904921a8ba55f21919a323f8932aefcb6b5" translate="yes" xml:space="preserve">
          <source>A class can't be redefined. If you're playing with code in Scratchpad (Firefox menu Tools &amp;gt; Web Developer &amp;gt; Scratchpad) and you 'Run' a definition of a class with the same name twice, you'll get a confusing SyntaxError: redeclaration of let &amp;lt;class-name&amp;gt;.</source>
          <target state="translated">クラスは再定義できません。Scratchpad（Firefoxメニューの[ツール]&amp;gt; [Web Developer]&amp;gt; [Scratchpad]）でコードを操作していて、同じ名前のクラスの定義を2回「実行」すると、紛らわしいSyntaxErrorが発生します：let &amp;lt;class-nameの再宣言&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="affc3fe240c869d7d085cacb21c50814994b6abb" translate="yes" xml:space="preserve">
          <source>A class expression has a similar syntax to a &lt;a href=&quot;../statements/class&quot;&gt;class statement (declaration)&lt;/a&gt;. However, with class expressions, you are able to omit the class name (&quot;binding identifier&quot;), which you can't with class statements. Additionally, class expressions allow you to redefine/re-declare classes and &lt;strong&gt;don't throw&lt;/strong&gt; any type errors like &lt;a href=&quot;../statements/class&quot;&gt;class declaration&lt;/a&gt;. The constructor property is optional. And, &lt;em&gt;typeof &lt;/em&gt;the classes generated using this keyword will always be &quot;function&quot;.</source>
          <target state="translated">クラス式の構文は、&lt;a href=&quot;../statements/class&quot;&gt;クラスステートメント（宣言）&lt;/a&gt;と似ています。ただし、クラス式を使用すると、クラス名（「バインディング識別子」）を省略できます。クラスステートメントでは省略できません。さらに、クラス式を使用すると、クラスを再定義/再宣言でき、&lt;a href=&quot;../statements/class&quot;&gt;クラス宣言の&lt;/a&gt;ような型エラーを&lt;strong&gt;スローしません&lt;/strong&gt;。コンストラクターのプロパティーはオプションです。そして、このキーワードを使用して生成されたクラスの&lt;em&gt;typeof&lt;/em&gt;は常に「関数」になります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4be35b651f0a568e026b94e6fff7951293ac21ab" translate="yes" xml:space="preserve">
          <source>A class or function that specifies the type of the object instance.</source>
          <target state="translated">オブジェクトインスタンスの型を指定するクラスまたは関数。</target>
        </trans-unit>
        <trans-unit id="e5ce69bdc537a6d92bff50bc86be8f5ac0f7b9fd" translate="yes" xml:space="preserve">
          <source>A class that uses these mix-ins can then be written like this:</source>
          <target state="translated">これらのミックスインを使用するクラスは、次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="39aaecfaf4564f23bf1246c8fede726db2847066" translate="yes" xml:space="preserve">
          <source>A combination of &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; and &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;Object.prototype.__proto__&lt;/code&gt;&lt;/a&gt; permits appending a whole prototype chain to a new prototype object:</source>
          <target state="translated">組み合わせ &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; と&lt;a href=&quot;proto&quot;&gt; &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; &lt;/a&gt;新しいプロトタイプオブジェクトに全体プロトタイプチェーンを追加可能にします。</target>
        </trans-unit>
        <trans-unit id="a0680f546a962c0507483054c967152075246ace" translate="yes" xml:space="preserve">
          <source>A comparison operator compares its operands and returns a &lt;code&gt;Boolean&lt;/code&gt; value based on whether the comparison is true.</source>
          <target state="translated">比較演算子は、そのオペランドを比較し、比較が真であるかどうかに基づいて &lt;code&gt;Boolean&lt;/code&gt; 値を返します。</target>
        </trans-unit>
        <trans-unit id="2a5e6d6b9cc37e9b7fcf09def0cba9b52979fb68" translate="yes" xml:space="preserve">
          <source>A complete &lt;code&gt;traps&lt;/code&gt; list example</source>
          <target state="translated">完全な &lt;code&gt;traps&lt;/code&gt; リストの例</target>
        </trans-unit>
        <trans-unit id="a78fab145b5ed6d4fb7c08eddc013013f7b82918" translate="yes" xml:space="preserve">
          <source>A complete Uniform Resource Identifier.</source>
          <target state="translated">完全な統一リソース識別子。</target>
        </trans-unit>
        <trans-unit id="6b20b13a4fc8de6ca62360304babadde81fa794c" translate="yes" xml:space="preserve">
          <source>A complete, encoded Uniform Resource Identifier.</source>
          <target state="translated">完全にエンコードされたユニフォームリソース識別子。</target>
        </trans-unit>
        <trans-unit id="b2fe7cd29d98cfab312d2e5517380b9c369153c0" translate="yes" xml:space="preserve">
          <source>A conditional expression.</source>
          <target state="translated">条件式です。</target>
        </trans-unit>
        <trans-unit id="f6632e5f5bd9abe4dc368b9d415998f5911b7f4e" translate="yes" xml:space="preserve">
          <source>A constant cannot share its name with a function or a variable in the same scope.</source>
          <target state="translated">定数は、同じスコープ内の関数や変数と名前を共有することはできません。</target>
        </trans-unit>
        <trans-unit id="d13dd078dfced5a0df52d91a69a56bcb59726aa3" translate="yes" xml:space="preserve">
          <source>A constant is a value that cannot be altered by the program during normal execution. It cannot change through re-assignment, and it can't be redeclared. In JavaScript, constants are declared using the &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; keyword.</source>
          <target state="translated">定数は、通常の実行中にプログラムによって変更できない値です。再割り当てによって変更することはできず、再宣言することもできません。JavaScriptでは、定数は &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; キーワードを使用して宣言されます。</target>
        </trans-unit>
        <trans-unit id="db4315ea0ad8def4cff6a9eaa03fe9fdab3d790a" translate="yes" xml:space="preserve">
          <source>A constant is a value that cannot be altered by the program during normal execution. It cannot change through re-assignment, and it can't be redeclared. In JavaScript, constants are declared using the &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; keyword. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).</source>
          <target state="translated">定数は、通常の実行中にプログラムによって変更できない値です。再割り当てによって変更することはできず、再宣言することもできません。JavaScriptでは、定数は &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; キーワードを使用して宣言されます。定数の初期化子が必要です。つまり、その値は宣言されているのと同じステートメントで指定する必要があります（後で変更できないことを考えると、これは理にかなっています）。</target>
        </trans-unit>
        <trans-unit id="dad3a1b62d9a269bab8c384da4c6f6cbee044610" translate="yes" xml:space="preserve">
          <source>A constructor can use the &lt;code&gt;super&lt;/code&gt; keyword to call the constructor of a parent class.</source>
          <target state="translated">コンストラクターは、 &lt;code&gt;super&lt;/code&gt; キーワードを使用して、親クラスのコンストラクターを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b371450f5e927216cb5bae14c7dd9abde627d023" translate="yes" xml:space="preserve">
          <source>A constructor can use the &lt;code&gt;super&lt;/code&gt; keyword to call the constructor of the super class.</source>
          <target state="translated">コンストラクターは、 &lt;code&gt;super&lt;/code&gt; キーワードを使用して、スーパークラスのコンストラクターを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="5575539fb8cb6172defee6ff00cdfdd128c54198" translate="yes" xml:space="preserve">
          <source>A constructor function that is used to create derived objects.</source>
          <target state="translated">派生オブジェクトを作成するためのコンストラクタ関数です。</target>
        </trans-unit>
        <trans-unit id="1602adfb08375a1aa14a51a5a997c17b0400dee0" translate="yes" xml:space="preserve">
          <source>A copy of the given function with the specified &lt;code&gt;this&lt;/code&gt; value and initial arguments.</source>
          <target state="translated">指定された &lt;code&gt;this&lt;/code&gt; 値と初期引数を持つ指定された関数のコピー。</target>
        </trans-unit>
        <trans-unit id="b0ab4090880d85d1b8d21b29b371027f6371260b" translate="yes" xml:space="preserve">
          <source>A couple of additions to ECMAScript 2015 aren't new built-ins or syntax, but protocols. These protocols can be implemented by any object respecting some conventions.</source>
          <target state="translated">ECMAScript 2015 に追加されたいくつかの機能は、新しいビルドインや構文ではなく、プロトコルです。これらのプロトコルは、いくつかの規約を尊重した任意のオブジェクトによって実装することができます。</target>
        </trans-unit>
        <trans-unit id="ddfad6a3c7b6aad43e7acf467e08fcfd6fa7bb2b" translate="yes" xml:space="preserve">
          <source>A data descriptor also has the following optional keys:</source>
          <target state="translated">データ記述子には、以下のオプションキーもあります。</target>
        </trans-unit>
        <trans-unit id="d9318c3e645dd03eab39853306667eb56567ba0b" translate="yes" xml:space="preserve">
          <source>A different property name is assigned to &lt;em&gt;variable&lt;/em&gt; on each iteration.</source>
          <target state="translated">反復ごとに異なるプロパティ名が&lt;em&gt;変数&lt;/em&gt;に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="2ac339db0910563774342c530ee05a9df754ba7c" translate="yes" xml:space="preserve">
          <source>A fix was proposed for ECMAScript (via an opt-in), but &lt;a href=&quot;https://web.archive.org/web/20160331031419/http://wiki.ecmascript.org:80/doku.php?id=harmony:typeof_null&quot;&gt;was rejected&lt;/a&gt;. It would have resulted in &lt;code&gt;typeof null === 'null'&lt;/code&gt;.</source>
          <target state="translated">（オプトインを介して）ECMAScriptの修正が提案されました&lt;a href=&quot;https://web.archive.org/web/20160331031419/http://wiki.ecmascript.org:80/doku.php?id=harmony:typeof_null&quot;&gt;が、拒否されました&lt;/a&gt;。これは、中に生じるであろう &lt;code&gt;typeof null === 'null'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b097560e17532f6278cd5f83e7f51aaf658edd28" translate="yes" xml:space="preserve">
          <source>A floating point number parsed from the given value. If the value cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定された値から解析された浮動小数点数。値を数値に変換できない場合は、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="371c34e437934d420382c99d5285ca1f3bc53b30" translate="yes" xml:space="preserve">
          <source>A floating point number parsed from the given value. If the value cannot be converted to a number, &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定された値から解析された浮動小数点数。値を数値に変換できない場合は、&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="9b79ec39be95b3e0d250c0a633a3d32fb77deeab" translate="yes" xml:space="preserve">
          <source>A floating-point, pseudo-random number between &lt;code&gt;0&lt;/code&gt; (inclusive) and 1 (exclusive).</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; （両端を含む）から1（両端を含まない）までの浮動小数点の疑似乱数。</target>
        </trans-unit>
        <trans-unit id="7cafb6830f1d478c5941713a168e8fb7bbd5c08d" translate="yes" xml:space="preserve">
          <source>A full year.</source>
          <target state="translated">充実した一年。</target>
        </trans-unit>
        <trans-unit id="0d6e94450b453029b22684eb10d9d61439880bfa" translate="yes" xml:space="preserve">
          <source>A function can also be created using an expression (see &lt;a href=&quot;../operators/function&quot;&gt;&lt;code&gt;function expression&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">関数は、式を使用して作成することもできます（&lt;a href=&quot;../operators/function&quot;&gt; &lt;code&gt;function expression&lt;/code&gt; &lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d9429efc6b1da6d1491d22425f8bad0d0e863f80" translate="yes" xml:space="preserve">
          <source>A function created with a function declaration is a &lt;code&gt;Function&lt;/code&gt; object and has all the properties, methods and behavior of &lt;code&gt;Function&lt;/code&gt; objects. See &lt;a href=&quot;../global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; for detailed information on functions.</source>
          <target state="translated">関数宣言で作成された関数は、 &lt;code&gt;Function&lt;/code&gt; オブジェクトとすべてのプロパティ、メソッドの挙動有する &lt;code&gt;Function&lt;/code&gt; オブジェクトを。&lt;a href=&quot;../global_objects/function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;の詳細については、関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="1f97df21b5d4705d8cbdc1803f6da41b206ef6b7" translate="yes" xml:space="preserve">
          <source>A function declaration is very easily (and often unintentionally) turned into a function expression. A function declaration ceases to be one when it either:</source>
          <target state="translated">関数宣言は非常に簡単に(多くの場合、意図せずに)関数式に変換されてしまいます。関数宣言は、以下のいずれかになったときに、関数宣言であることをやめます。</target>
        </trans-unit>
        <trans-unit id="5b9ad1827d86af32055f8e3c9330866ce3f9a55c" translate="yes" xml:space="preserve">
          <source>A function defined by '&lt;code&gt;new Function'&lt;/code&gt; does not have a function name. However, in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; JavaScript engine, the serialized form of the function shows as if it has the name &quot;anonymous&quot;. For example, &lt;code&gt;alert(new Function())&lt;/code&gt; outputs:</source>
          <target state="translated">' &lt;code&gt;new Function'&lt;/code&gt; で定義された関数には関数名がありません。ただし、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; JavaScriptエンジンでは、関数のシリアル化された形式は、 &quot;匿名&quot;という名前のように表示されます。たとえば、 &lt;code&gt;alert(new Function())&lt;/code&gt; の出力は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0cb46d8b075c75dc3c16ff480fba2c741b276607" translate="yes" xml:space="preserve">
          <source>A function defined by a function expression or by a function declaration inherits the current scope. That is, the function forms a closure. On the other hand, a function defined by a &lt;code&gt;Function&lt;/code&gt; constructor does not inherit any scope other than the global scope (which all functions inherit).</source>
          <target state="translated">関数式または関数宣言によって定義された関数は、現在のスコープを継承します。つまり、関数はクロージャを形成します。一方、 &lt;code&gt;Function&lt;/code&gt; コンストラクターによって定義された関数は、（すべての関数が継承する）グローバルスコープ以外のスコープを継承しません。</target>
        </trans-unit>
        <trans-unit id="ca4d420f7642859685b17cc1f8ae4ff6bb561dd9" translate="yes" xml:space="preserve">
          <source>A function defined with the &lt;code&gt;Function&lt;/code&gt;&lt;em&gt;constructor&lt;/em&gt; assigned to the variable &lt;code&gt;multiply:&lt;/code&gt;</source>
          <target state="translated">変数 &lt;code&gt;multiply:&lt;/code&gt; 割り当てられた &lt;code&gt;Function&lt;/code&gt; &lt;em&gt;コンストラクターで&lt;/em&gt;定義された関数：</target>
        </trans-unit>
        <trans-unit id="73be31de4adcba2da7225bb0f4a9b968444b1010" translate="yes" xml:space="preserve">
          <source>A function expression can use yet another workaround:</source>
          <target state="translated">関数式は別の回避策を使うことができます。</target>
        </trans-unit>
        <trans-unit id="c2dfdb97125ee4e9962a399a5366ed00c280da16" translate="yes" xml:space="preserve">
          <source>A function expression is similar to and has the same syntax as a function declaration (see &lt;a href=&quot;operators/function&quot;&gt;function expression&lt;/a&gt; for details). A function expression may be a part of a larger expression. One can define &quot;named&quot; function expressions (where the name of the expression might be used in the call stack for example) or &quot;anonymous&quot; function expressions. Function expressions are not &lt;em&gt;hoisted&lt;/em&gt; onto the beginning of the scope, therefore they cannot be used before they appear in the code.</source>
          <target state="translated">関数式は関数宣言に似ており、構文は同じです（詳細は&lt;a href=&quot;operators/function&quot;&gt;関数式&lt;/a&gt;を参照）。関数式は、より大きな式の一部である場合があります。 「名前付き」関数式（たとえば、式の名前がコールスタックで使用される場合がある）または「無名」関数式を定義できます。関数式はスコープの先頭に&lt;em&gt;巻き上げられ&lt;/em&gt;ないため、コードに現れるまで使用できません。</target>
        </trans-unit>
        <trans-unit id="9abc2a0360bc3eff25939fd5a04b7a5d63268a33" translate="yes" xml:space="preserve">
          <source>A function expression is very similar to and has almost the same syntax as a function statement (see &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; for details). The main difference between a function expression and a function statement is the &lt;em&gt;function name,&lt;/em&gt; which can be omitted in function expressions to create &lt;em&gt;anonymous&lt;/em&gt; functions. A function expression can be used as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE (Immediately Invoked Function Expression)&lt;/a&gt; which runs as soon as it is defined. See also the chapter about &lt;a href=&quot;../functions&quot;&gt;functions&lt;/a&gt; for more information.</source>
          <target state="translated">関数式は、関数ステートメントとよく似ており、構文はほとんど同じです（詳細については、&lt;a href=&quot;../statements/function&quot;&gt;関数ステートメント&lt;/a&gt;を参照してください）。関数式と関数ステートメントの主な違いは、&lt;em&gt;関数名です。&lt;/em&gt;これは、関数式で省略して&lt;em&gt;無名&lt;/em&gt;関数を作成できます。関数式は、定義されるとすぐに実行される&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE（Immediately Invoked Function Expression）&lt;/a&gt;として使用できます。詳細については、&lt;a href=&quot;../functions&quot;&gt;関数&lt;/a&gt;に関する章も参照してください。</target>
        </trans-unit>
        <trans-unit id="ff9fdc82d293a9e0612ffb777123c2e0f2b27c41" translate="yes" xml:space="preserve">
          <source>A function immediately stops at the point where &lt;code&gt;return&lt;/code&gt; is called.</source>
          <target state="translated">関数は、 &lt;code&gt;return&lt;/code&gt; が呼び出された時点ですぐに停止します。</target>
        </trans-unit>
        <trans-unit id="9113c2beb8118cfebd7f2423d05b81d9bd9ab1e3" translate="yes" xml:space="preserve">
          <source>A function proxy could easily extend a constructor with a new constructor. This example uses the &lt;a href=&quot;proxy/handler/construct&quot;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;proxy/handler/apply&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; handlers.</source>
          <target state="translated">関数プロキシは、コンストラクタを新しいコンストラクタで簡単に拡張できます。この例では、&lt;a href=&quot;proxy/handler/construct&quot;&gt; &lt;code&gt;construct&lt;/code&gt; &lt;/a&gt;ハンドラーと&lt;a href=&quot;proxy/handler/apply&quot;&gt; &lt;code&gt;apply&lt;/code&gt; &lt;/a&gt;ハンドラーを使用しています。</target>
        </trans-unit>
        <trans-unit id="03ecf4283b466c176658b3d18ca5e2c126bc74ce" translate="yes" xml:space="preserve">
          <source>A function reference &amp;mdash; this is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;exported WebAssembly function&lt;/a&gt;, a JavaScript wrapper for an underlying wasm function.</source>
          <target state="translated">関数リファレンス&amp;mdash;これは、基礎となるwasm関数のJavaScriptラッパーである&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;エクスポートされたWebAssembly&lt;/a&gt;関数です。</target>
        </trans-unit>
        <trans-unit id="24f59d4c4c95c1049fcd13959c6de8f665314a9a" translate="yes" xml:space="preserve">
          <source>A function that alters the behavior of the stringification process, or an array of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or not provided, all properties of the object are included in the resulting JSON string.</source>
          <target state="translated">文字列化プロセスの動作を変更する関数、またはJSONオブジェクトに含める値オブジェクトのプロパティを選択/フィルタリングするためのホワイトリストとして機能する&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトと&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクトの配列。この値が&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;または指定されていない場合、オブジェクトのすべてのプロパティが結果のJSON文字列に含まれます。</target>
        </trans-unit>
        <trans-unit id="cbf9a56251fbfd535a60ddc310525241b709af50" translate="yes" xml:space="preserve">
          <source>A function that assigns values to properties. Returns a &lt;a href=&quot;boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; that is &lt;code&gt;true&lt;/code&gt; if the update was successful.</source>
          <target state="translated">プロパティに値を割り当てる関数。更新が成功した場合に &lt;code&gt;true&lt;/code&gt; となる&lt;a href=&quot;boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="43a45f41c9933a06a919a5f30a6c4b8a591fcbf1" translate="yes" xml:space="preserve">
          <source>A function that calls itself is called a &lt;em&gt;recursive function&lt;/em&gt;. In some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case). When there is too much or infinite recursion, JavaScript will throw this error.</source>
          <target state="translated">自分自身を呼び出す関数は、&lt;em&gt;再帰関数&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。いくつかの点で、再帰はループに似ています。どちらも同じコードを複数回実行し、両方とも条件を必要とします（この場合、無限ループ、つまり無限再帰を回避するため）。再帰が多すぎるか無限である場合、JavaScriptはこのエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="98c6f6efac918d9322c51f018dbf9171795c0701" translate="yes" xml:space="preserve">
          <source>A function that is passed with the arguments &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. The &lt;code&gt;executor&lt;/code&gt; function is executed immediately by the Promise implementation, passing &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; functions (the executor is called before the &lt;code&gt;Promise&lt;/code&gt; constructor even returns the created object). The &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; functions, when called, resolve or reject the promise, respectively. The executor normally initiates some asynchronous work, and then, once that completes, either calls the &lt;code&gt;resolve&lt;/code&gt; function to resolve the promise or else rejects it if an error occurred. If an error is thrown in the executor function, the promise is rejected. The return value of the executor is ignored.</source>
          <target state="translated">引数とともに渡される関数は &lt;code&gt;resolve&lt;/code&gt; および &lt;code&gt;reject&lt;/code&gt; です。 &lt;code&gt;executor&lt;/code&gt; 機能を渡して、約束の実装により、直ちに実行され &lt;code&gt;resolve&lt;/code&gt; し、 &lt;code&gt;reject&lt;/code&gt; （前エグゼキュータが呼び出される関数を &lt;code&gt;Promise&lt;/code&gt; コンストラクタも作成したオブジェクトを返します）。 &lt;code&gt;resolve&lt;/code&gt; と &lt;code&gt;reject&lt;/code&gt; 機能を、それぞれ、決意、と呼ばれるか、約束を拒否します。エグゼキューターは通常、いくつかの非同期作業を開始し、それが完了すると、 &lt;code&gt;resolve&lt;/code&gt; 呼び出します。エラーが発生した場合、promiseを解決するか、それ以外の場合は拒否します。executor関数でエラーがスローされると、promiseは拒否されます。executorの戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="3b6c202c664ab096ab553b1c07d2b8262458dce1" translate="yes" xml:space="preserve">
          <source>A function that returns the value of properties.</source>
          <target state="translated">プロパティの値を返す関数です。</target>
        </trans-unit>
        <trans-unit id="bfc1bad3cbaa4d13d2233d0206c2b2ffdce21b37" translate="yes" xml:space="preserve">
          <source>A function that sets the prototype of an object.</source>
          <target state="translated">オブジェクトのプロトタイプを設定する関数です。</target>
        </trans-unit>
        <trans-unit id="749223692f1b9574f5d04f324a2ad9a5a8006310" translate="yes" xml:space="preserve">
          <source>A function to be bound to a lookup of the specified property.</source>
          <target state="translated">指定されたプロパティのルックアップにバインドされる関数。</target>
        </trans-unit>
        <trans-unit id="a289508c6acb9cb862a0ee6fb20a78e65eedf75f" translate="yes" xml:space="preserve">
          <source>A function to be called when there is an attempt to set the specified property. This function takes the form</source>
          <target state="translated">指定されたプロパティを設定しようとしたときに呼び出される関数。この関数の形式は</target>
        </trans-unit>
        <trans-unit id="00dcfc0d78a91dc0676b4f68e3f1d1b4a0ea76cc" translate="yes" xml:space="preserve">
          <source>A function to be invoked to create the new substring to be used to replace the matches to the given &lt;code&gt;regexp&lt;/code&gt; or &lt;code&gt;substr&lt;/code&gt;. The arguments supplied to this function are described in the &quot;&lt;a href=&quot;#Specifying_a_function_as_a_parameter&quot;&gt;Specifying a function as a parameter&lt;/a&gt;&quot; section below.</source>
          <target state="translated">指定された &lt;code&gt;regexp&lt;/code&gt; または &lt;code&gt;substr&lt;/code&gt; への一致を置き換えるために使用される新しい部分文字列を作成するために呼び出される関数。この関数に提供される引数については、以下の「&lt;a href=&quot;#Specifying_a_function_as_a_parameter&quot;&gt;関数をパラメーターとして指定する&lt;/a&gt;」セクションで説明します。</target>
        </trans-unit>
        <trans-unit id="2afba9c676a8752b7ae50bd8ffdc32d33f55bebc" translate="yes" xml:space="preserve">
          <source>A function to be invoked to create the new substring. The arguments supplied to this function are described in the &lt;a href=&quot;../string/replace#Specifying_a_function_as_a_parameter&quot;&gt;Specifying a function as a parameter&lt;/a&gt; section in &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="translated">新しい部分文字列を作成するために呼び出される関数。この関数に提供される引数は、&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt;ページの&lt;a href=&quot;../string/replace#Specifying_a_function_as_a_parameter&quot;&gt;パラメーターとしての関数&lt;/a&gt;の指定セクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="cd2c6d1daab487bf2bc3a4db4c6aedcd71e0304f" translate="yes" xml:space="preserve">
          <source>A function to call when the specified property's value changes.</source>
          <target state="translated">指定したプロパティの値が変更されたときに呼び出す関数です。</target>
        </trans-unit>
        <trans-unit id="22d9ab9255feb90b92b12e451f5f8037ec3c4743" translate="yes" xml:space="preserve">
          <source>A function to execute on each value in the array until the function returns &lt;code&gt;true&lt;/code&gt;, indicating the desired element was found. It takes 3 arguments:</source>
          <target state="translated">目的の要素が見つかったことを示す &lt;code&gt;true&lt;/code&gt; が返されるまで、配列の各値に対して実行する関数。3つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="caf9c76381db8f213d75e9d4e54dd17095857c5d" translate="yes" xml:space="preserve">
          <source>A function value (see &quot;Methods&quot; above) can not be assigned to a value in JSON.</source>
          <target state="translated">関数の値(上記の「メソッド」を参照)は、JSONの値に代入することはできません。</target>
        </trans-unit>
        <trans-unit id="2ecb79c1465a221cd233921d61186d139a11615f" translate="yes" xml:space="preserve">
          <source>A function which serves as a getter for the property, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no getter (accessor descriptors only).</source>
          <target state="translated">プロパティのゲッターとして機能する関数、またはゲッターがない場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;（アクセサー記述子のみ）。</target>
        </trans-unit>
        <trans-unit id="2599f25d2eac390c558c42cb2e5d6afad0749e53" translate="yes" xml:space="preserve">
          <source>A function which serves as a getter for the property, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no getter. The function's return value will be used as the value of the property.</source>
          <target state="translated">プロパティのゲッターとして機能する関数、またはゲッターがない場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。関数の戻り値は、プロパティの値として使用されます。</target>
        </trans-unit>
        <trans-unit id="18fd3c42f5a068421cc4b5d622b0ecd5d9c6e35c" translate="yes" xml:space="preserve">
          <source>A function which serves as a getter for the property, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no getter. When the property is accessed, this function is called without arguments and with &lt;code&gt;this&lt;/code&gt; set to the object through which the property is accessed (this may not be the object on which the property is defined due to inheritance). The return value will be used as the value of the property.</source>
          <target state="translated">プロパティのゲッターとして機能する関数、またはゲッターがない場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。プロパティがアクセスされると、この関数は、引数なしとして呼び出され &lt;code&gt;this&lt;/code&gt; プロパティがアクセスされ、それを通してオブジェクトに設定（このプロパティは、継承による定義されているオブジェクトでなくてもよいです）。戻り値はプロパティの値として使用されます。</target>
        </trans-unit>
        <trans-unit id="5ef0023834d5aa96e315794374390f76299405a8" translate="yes" xml:space="preserve">
          <source>A function which serves as a setter for the property, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no setter (accessor descriptors only).</source>
          <target state="translated">プロパティのセッターとして機能する関数、またはセッターがない場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;（アクセサー記述子のみ）。</target>
        </trans-unit>
        <trans-unit id="1d55127172ebe4e888c89041b33e167af3ac2236" translate="yes" xml:space="preserve">
          <source>A function which serves as a setter for the property, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no setter. The function will receive as its only argument the new value being assigned to the property.</source>
          <target state="translated">プロパティのセッターとして機能する関数。セッターがない場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。関数は、プロパティに割り当てられている新しい値を唯一の引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="942da11064ceb4eab856dd316d799b9b8d4ffbfd" translate="yes" xml:space="preserve">
          <source>A function which serves as a setter for the property, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no setter. When the property is assigned to, this function is called with one argument (the value being assigned to the property) and with &lt;code&gt;this&lt;/code&gt; set to the object through which the property is assigned.</source>
          <target state="translated">プロパティのセッターとして機能する関数。セッターがない場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。プロパティが割り当てられている場合、この関数は一つの引数（プロパティに割り当てられている値）とし、と呼ばれ &lt;code&gt;this&lt;/code&gt; プロパティが割り当てられ、それを通してオブジェクトに設定。</target>
        </trans-unit>
        <trans-unit id="98c89ec5c4ecc3d5ed3f390345dc66fbcc2f3a46" translate="yes" xml:space="preserve">
          <source>A function with a superclass as input and a subclass extending that superclass as output can be used to implement mix-ins in ECMAScript:</source>
          <target state="translated">スーパークラスを入力として、そのスーパークラスを拡張したサブクラスを出力として持つ関数を使用して、ECMAScript でミックスインを実装することができます。</target>
        </trans-unit>
        <trans-unit id="c750fd129f1e265e479295ff61493b4ea1228cc3" translate="yes" xml:space="preserve">
          <source>A function with no argument to invalidate (switch off) the &lt;code&gt;proxy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;proxy&lt;/code&gt; を無効にする（スイッチを切る）引数のない関数。</target>
        </trans-unit>
        <trans-unit id="0bc1f6bc7c5b2ce42ed618693d37fce2d9aa05e1" translate="yes" xml:space="preserve">
          <source>A function's last parameter can be prefixed with &lt;code&gt;...&lt;/code&gt; which will cause all remaining (user supplied) arguments to be placed within a &quot;standard&quot; javascript array. Only the last parameter can be a &quot;rest parameter&quot;.</source>
          <target state="translated">関数の最後のパラメーターの前に &lt;code&gt;...&lt;/code&gt; を付けることができます。これにより、残りのすべての（ユーザー指定の）引数が「標準」のJavaScript配列内に配置されます。最後のパラメーターのみが「残りのパラメーター」になることができます。</target>
        </trans-unit>
        <trans-unit id="ea55966c6f3f6211c07d03a32a8bcf8e2437408f" translate="yes" xml:space="preserve">
          <source>A generator function expression is similar to and has the same syntax as a generator function declaration (see &lt;a href=&quot;operators/function*&quot;&gt;&lt;code&gt;function* expression&lt;/code&gt;&lt;/a&gt; for details):</source>
          <target state="translated">ジェネレーター関数の式は、ジェネレーター関数の宣言と似ており、構文も同じです（詳細は&lt;a href=&quot;operators/function*&quot;&gt; &lt;code&gt;function* expression&lt;/code&gt; &lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="f93172b59d0434275a525299048055510d37d19c" translate="yes" xml:space="preserve">
          <source>A getter can be removed using the &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">getterは、 &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 演算子を使用して削除できます。</target>
        </trans-unit>
        <trans-unit id="8c21f7c718218b0fabfc90729d7549638c61d121" translate="yes" xml:space="preserve">
          <source>A good solution for the missing object-methods is not immediately apparent.</source>
          <target state="translated">欠けているオブジェクト・メソッドのための良い解決策は、すぐには明らかになりません。</target>
        </trans-unit>
        <trans-unit id="402a38a12748d1373c4f6039b2ee5012310a6af8" translate="yes" xml:space="preserve">
          <source>A high-low pair is ok. For example:</source>
          <target state="translated">ハイローペアでもOKです。例えば</target>
        </trans-unit>
        <trans-unit id="3ff5b7d0d6d0af0eca0e8bb5827eb12187e93b20" translate="yes" xml:space="preserve">
          <source>A lexical variable was accessed before it was initialized. This happens within any block statement, when &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; declarations are accessed before they are defined.</source>
          <target state="translated">字句変数が初期化される前にアクセスされました。とき、これは、任意のブロック文の中で起こっ &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; か、 &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; それらが定義される前に宣言がアクセスされます。</target>
        </trans-unit>
        <trans-unit id="4485423a6485cd02f45a5566ae926e0ce685bdfc" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; values for which to get the canonical locale names.</source>
          <target state="translated">正規ロケール名を取得する&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;値のリスト。</target>
        </trans-unit>
        <trans-unit id="91a5a1c0b7abfeead316c53f5d1f2b1731a18ffc" translate="yes" xml:space="preserve">
          <source>A list of values that the &lt;code&gt;constructor&lt;/code&gt; will be called with.</source>
          <target state="translated">&lt;code&gt;constructor&lt;/code&gt; が呼び出されるときに使用する値のリスト。</target>
        </trans-unit>
        <trans-unit id="8eea163af25923fbee0560f02571b8c923037409" translate="yes" xml:space="preserve">
          <source>A map API could be implemented in JavaScript with two arrays (one for keys, one for values) shared by the four API methods. Setting elements on this map would involve pushing a key and value onto the end of each of those arrays simultaneously. As a result, the indices of the key and value would correspond to both arrays. Getting values from the map would involve iterating through all keys to find a match, then using the index of this match to retrieve the corresponding value from the array of values.</source>
          <target state="translated">4 つの API メソッドで共有される 2 つの配列 (1 つはキー用、もう 1 つは値用)を使用して、マップ API を JavaScript で実装することができます。このマップに要素を設定するには、キーと値をそれぞれの配列の端に同時に押し込む必要があります。その結果、キーと値のインデックスは両方の配列に対応します。マップから値を取得するには、すべてのキーを繰り返し処理して一致する値を見つけ、この一致した値のインデックスを使用して値の配列から対応する値を取得します。</target>
        </trans-unit>
        <trans-unit id="3b17fbb796e9e516962f9207b281c639617542a1" translate="yes" xml:space="preserve">
          <source>A memory created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</source>
          <target state="translated">JavaScriptやWebAssemblyのコードで作成されたメモリは、JavaScriptとWebAssemblyの両方からアクセス可能で、変更可能になります。</target>
        </trans-unit>
        <trans-unit id="6ae56e21e0d05b9b39077e54c5fd373f0882e6da" translate="yes" xml:space="preserve">
          <source>A meta-property exposing context-specific metadata to a JavaScript module.</source>
          <target state="translated">コンテキスト固有のメタデータを JavaScript モジュールに公開するメタプロパティ。</target>
        </trans-unit>
        <trans-unit id="4020f123d501eba8c8b785a8fed6a2766a94c6be" translate="yes" xml:space="preserve">
          <source>A method converting an object to a primitive value.</source>
          <target state="translated">オブジェクトをプリミティブ値に変換するメソッド。</target>
        </trans-unit>
        <trans-unit id="5688deddaf4d11bb720fddf64840a3811d31ee17" translate="yes" xml:space="preserve">
          <source>A method determining if a constructor object recognizes an object as its instance. Used by &lt;a href=&quot;../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コンストラクターオブジェクトがオブジェクトをインスタンスとして認識するかどうかを決定するメソッド。&lt;a href=&quot;../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="c38757f8f459644b54ec537af8be30b75985250e" translate="yes" xml:space="preserve">
          <source>A method is not bound to the object that it is a method of. Specifically, &lt;code&gt;this&lt;/code&gt; is not fixed in a method, i.e., &lt;code&gt;this&lt;/code&gt; does not necessarily refer to an object containing the method. &lt;code&gt;this&lt;/code&gt; is instead &quot;passed&quot; by the function call. See &lt;a href=&quot;this#Method_binding&quot;&gt;method binding&lt;/a&gt;.</source>
          <target state="translated">メソッドは、それがメソッドであるオブジェクトにバインドされていません。具体的には、 &lt;code&gt;this&lt;/code&gt; 方法で固定されていない、すなわち、 &lt;code&gt;this&lt;/code&gt; 必ずしもメソッドを含むオブジェクトを参照していません。代わりに、 &lt;code&gt;this&lt;/code&gt; は関数呼び出しによって「渡されます」。&lt;a href=&quot;this#Method_binding&quot;&gt;メソッドのバインディングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="68f3f78bd28ff78ae3da4393f5de4b311c78fdaa" translate="yes" xml:space="preserve">
          <source>A method returning the canonical locale names.</source>
          <target state="translated">正規のロケール名を返すメソッド。</target>
        </trans-unit>
        <trans-unit id="dadd338c8c1c2e7b5c10d87afaa027380d3634f3" translate="yes" xml:space="preserve">
          <source>A method returning the default iterator for an object. Used by &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オブジェクトのデフォルトのイテレータを返すメソッド。&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="d448a2044295b3d89e5449ecc23bbe4699613812" translate="yes" xml:space="preserve">
          <source>A method that matches against a string, also used to determine if an object may be used as a regular expression. Used by &lt;a href=&quot;string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列と照合するメソッド。オブジェクトを正規表現として使用できるかどうかを判断するためにも使用されます。&lt;a href=&quot;string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="fc5bca6ad7ba18ef6f0f323e4bc3ead96338c022" translate="yes" xml:space="preserve">
          <source>A method that replaces matched substrings of a string. Used by &lt;a href=&quot;string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列の一致した部分文字列を置き換えるメソッド。&lt;a href=&quot;string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="de5a61e2d2a25d9acb7ce52c105c5320cee97041" translate="yes" xml:space="preserve">
          <source>A method that returns the default AsyncIterator for an object. Used by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await-of&quot;&gt;&lt;code&gt;for await of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オブジェクトのデフォルトのAsyncIteratorを返すメソッド。の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await-of&quot;&gt; &lt;code&gt;for await of&lt;/code&gt; &lt;/a&gt;使用されます。</target>
        </trans-unit>
        <trans-unit id="4315adad342e639519993beb815ff8269fd3c4af" translate="yes" xml:space="preserve">
          <source>A method that returns the index within a string that matches the regular expression. Used by &lt;a href=&quot;string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">正規表現に一致する文字列内のインデックスを返すメソッド。&lt;a href=&quot;string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="42fa96aa3a1b5a03150d78fb2c59e409f9c4ad91" translate="yes" xml:space="preserve">
          <source>A method that splits a string at the indices that match a regular expression. Used by &lt;a href=&quot;string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">正規表現に一致するインデックスで文字列を分割するメソッド。&lt;a href=&quot;string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="d7bc79d695e0d555a19bc377ca68d9432fb9cfc0" translate="yes" xml:space="preserve">
          <source>A more advanced form of template literals are &lt;em&gt;tagged&lt;/em&gt; templates. Tags allow you to parse template literals with a function. The first argument of a tag function contains an array of string values. The remaining arguments are related to the expressions. In the end, your function can return your manipulated string (or it can return something completely different as described in the next example). The name of the function used for the tag can be whatever you want.</source>
          <target state="translated">テンプレートリテラルのより高度な形式は&lt;em&gt;タグ付き&lt;/em&gt;テンプレートです。タグを使用すると、関数を使用してテンプレートリテラルを解析できます。タグ関数の最初の引数には、文字列値の配列が含まれています。残りの引数は式に関連しています。最後に、関数は操作された文字列を返すことができます（または次の例で説明するように、まったく異なるものを返すことができます）。タグに使用される関数の名前は、好きな名前にすることができます。</target>
        </trans-unit>
        <trans-unit id="e28b2de5c004d0f1bcbf2226d41b5cb7acfc81b8" translate="yes" xml:space="preserve">
          <source>A more powerful array literal</source>
          <target state="translated">より強力な配列リテラル</target>
        </trans-unit>
        <trans-unit id="a0437fbd66ef802c9b4fafafcf5e82e5389f4db6" translate="yes" xml:space="preserve">
          <source>A more robust (fully ES2015 specification compliant), but less performant and compact, Polyfill is available &lt;a href=&quot;https://github.com/mathiasbynens/String.prototype.startsWith&quot;&gt;on GitHub by Mathias Bynens&lt;/a&gt;.</source>
          <target state="translated">より堅牢（ES2015仕様に完全に準拠）ですが、パフォーマンスが低くコンパクトですが、Polyfillは&lt;a href=&quot;https://github.com/mathiasbynens/String.prototype.startsWith&quot;&gt;Mathias BynensによってGitHub&lt;/a&gt;で入手できます。</target>
        </trans-unit>
        <trans-unit id="36b76709f992dd56b853500e8c8b994505b38649" translate="yes" xml:space="preserve">
          <source>A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen, but if the hyphen appears as the first or last character enclosed in the square brackets it is taken as a literal hyphen to be included in the character set as a normal character.</source>
          <target state="translated">否定された文字セットまたは補完された文字セット。つまり、角括弧で囲まれていないものと一致します。ハイフンを使って文字の範囲を指定することもできますが、角括弧で囲まれた最初の文字または最後の文字としてハイフンが現れた場合は、リテラルハイフンとして扱われ、通常の文字として文字セットに含まれます。</target>
        </trans-unit>
        <trans-unit id="6be66e03dfaaf431382f1c04bc8d296aff96dac6" translate="yes" xml:space="preserve">
          <source>A negative index can be used, indicating an offset from the end of the sequence. &lt;code&gt;slice(-2)&lt;/code&gt; extracts the last two elements in the sequence.</source>
          <target state="translated">シーケンスの最後からのオフセットを示す負のインデックスを使用できます。 &lt;code&gt;slice(-2)&lt;/code&gt; は、シーケンスの最後の2つの要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="51349d68b4f5429cae5cd0cbad56369759fd2e84" translate="yes" xml:space="preserve">
          <source>A negative index can be used, indicating an offset from the end of the sequence. &lt;code&gt;slice(2,-1)&lt;/code&gt; extracts the third element through the second-to-last element in the sequence.</source>
          <target state="translated">シーケンスの最後からのオフセットを示す負のインデックスを使用できます。 &lt;code&gt;slice(2,-1)&lt;/code&gt; は、シーケンスの最後から2番目の要素から3番目の要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="4f808e631894a2f90d32972afc49f6cf0bc89233" translate="yes" xml:space="preserve">
          <source>A new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">新しい&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="c613d15c15713ae6ef520c64a0e2f7b52fb882f9" translate="yes" xml:space="preserve">
          <source>A new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; iterator object.</source>
          <target state="translated">新しい&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;反復子オブジェクト。</target>
        </trans-unit>
        <trans-unit id="dddcda30be4b44e7477dd0da7e339278482b989c" translate="yes" xml:space="preserve">
          <source>A new &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; iterator object.</source>
          <target state="translated">新しい&lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;イテレータオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b62d4cd178fda37545db715a45a0690a5e3b5874" translate="yes" xml:space="preserve">
          <source>A new &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; containing the extracted elements.</source>
          <target state="translated">抽出された要素を含む新しい&lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fe0eaed7d1c68a1dc40a87f16446263af8eb0d84" translate="yes" xml:space="preserve">
          <source>A new &lt;a href=&quot;../typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">新しい&lt;a href=&quot;../typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="a921a3d19f82d5a6c0c65b32d92f861cf5fff0ba" translate="yes" xml:space="preserve">
          <source>A new &lt;a href=&quot;../typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;../typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="dce6da36aa5925d7e4811de3dc26ad15d4382fea" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;&lt;strong&gt;Array Iterator&lt;/strong&gt;&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;&lt;strong&gt;Array Iterator&lt;/strong&gt;&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="3e9337d09562a5cbe3357148f2a5f1ce88ff3b5f" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;&lt;strong&gt;Iterator&lt;/strong&gt;&lt;/code&gt; object containing the values for each element in the given &lt;code&gt;Set&lt;/code&gt;, in insertion order.</source>
          <target state="translated">指定された &lt;code&gt;Set&lt;/code&gt; の各要素の値を挿入順に含む新しい &lt;code&gt;&lt;strong&gt;Iterator&lt;/strong&gt;&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="d092a85b0972c791283dea133f4084b9eb7a4d13" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;ArrayBuffer&lt;/code&gt; object of the specified size. Its contents are initialized to 0.</source>
          <target state="translated">指定されたサイズの新しい &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクト。その内容は0に初期化されます。</target>
        </trans-unit>
        <trans-unit id="30629af8f3caeb3b4d959a5aad34712b09eb1ddc" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;ArrayBuffer&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="c8e65b2fa1a5c678261f39d4adea123f7fb5c007" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;DataView&lt;/code&gt; object representing the specified data buffer. (That probably wasn't a very helpful description.)</source>
          <target state="translated">指定されたデータバッファーを表す新しい &lt;code&gt;DataView&lt;/code&gt; オブジェクト。（それはおそらくあまり役​​に立ちませんでした。）</target>
        </trans-unit>
        <trans-unit id="71dbaf10825f1f38baee8654d68d22d120a02a7f" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;Iterator&lt;/code&gt; object that contains an array of &lt;code&gt;[value, value]&lt;/code&gt; for each element in the given &lt;code&gt;Set&lt;/code&gt;, in insertion order.</source>
          <target state="translated">指定された &lt;code&gt;Set&lt;/code&gt; の各要素の &lt;code&gt;[value, value]&lt;/code&gt; 配列を挿入順に含む新しい &lt;code&gt;Iterator&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="7131b3be3d17f94f071839d848fe3e6bf217caa6" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;Iterator&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Iterator&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="e32931d7616e63386fb65a2a46d23e8311baaf5f" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Set&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="03debe9eecb0427cc04fc999f860dfa1b7891656" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object of the specified size. Its contents are initialized to 0.</source>
          <target state="translated">指定されたサイズの新しい &lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクト。その内容は0に初期化されます。</target>
        </trans-unit>
        <trans-unit id="82e9bec1fbb9e139886d35c44a9d20812037a729" translate="yes" xml:space="preserve">
          <source>A new array containing the extracted elements.</source>
          <target state="translated">抽出された要素を含む新しい配列。</target>
        </trans-unit>
        <trans-unit id="0261785a07602d2e1bbe3b46aecc558f6c85855b" translate="yes" xml:space="preserve">
          <source>A new array with each element being the result of the callback function and flattened to a depth of 1.</source>
          <target state="translated">各要素はコールバック関数の結果であり,深さが1になるように平坦化された新しい配列.</target>
        </trans-unit>
        <trans-unit id="15880a072d65b5cde36dd14b9f8264a5fa3afd4f" translate="yes" xml:space="preserve">
          <source>A new array with each element being the result of the callback function.</source>
          <target state="translated">各要素がコールバック関数の結果となる新しい配列。</target>
        </trans-unit>
        <trans-unit id="787331af089954494bf14f34517127e9edfd92a7" translate="yes" xml:space="preserve">
          <source>A new array with the elements that pass the test. If no elements pass the test, an empty array will be returned.</source>
          <target state="translated">テストに合格した要素を含む新しい配列。テストに合格する要素がない場合は、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="d087a51bb36101028d4dabf78ec77f2f27cceeea" translate="yes" xml:space="preserve">
          <source>A new array with the sub-array elements concatenated into it.</source>
          <target state="translated">部分配列の要素を連結した新しい配列。</target>
        </trans-unit>
        <trans-unit id="1f23e49ea228e5477d3ecb3b4ba5080edda53b87" translate="yes" xml:space="preserve">
          <source>A new instance of &lt;code&gt;target&lt;/code&gt; (or &lt;code&gt;newTarget&lt;/code&gt;, if present), initialized by &lt;code&gt;target&lt;/code&gt; as a constructor with the given arguments.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; の新しいインスタンス（または、存在する場合は &lt;code&gt;newTarget&lt;/code&gt; ）。 &lt;code&gt;target&lt;/code&gt; によって、指定された引数を持つコンストラクターとして初期化されます。</target>
        </trans-unit>
        <trans-unit id="f8e76faf159ebbe1d5fa5e1c569e069aab695162" translate="yes" xml:space="preserve">
          <source>A new object created from a completely custom object (especially one created from the &lt;code&gt;null&lt;/code&gt; object, which is basically a custom object with NO members) can behave in unexpected ways. This is especially true when debugging, since common object-property converting/detecting utility functions may generate errors, or simply lose information (especially if using silent error-traps that ignore errors). For example, here are two objects:</source>
          <target state="translated">完全にカスタムオブジェクトから作成された新しいオブジェクト（特に &lt;code&gt;null&lt;/code&gt; オブジェクトから作成されたオブジェクト、基本的にはメンバーのないカスタムオブジェクト）は予期しない動作をする可能性があります。一般的なオブジェクトプロパティの変換/検出ユーティリティ関数がエラーを生成するか、単に情報を失う可能性があるため（特に、エラーを無視するサイレントエラートラップを使用している場合）、これはデバッグ時に特に当てはまります。たとえば、次の2つのオブジェクトがあります。</target>
        </trans-unit>
        <trans-unit id="2d8101d5af7e72ba3918b74c1d5d67842ac5ec4d" translate="yes" xml:space="preserve">
          <source>A new object is created, inheriting from &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;.prototype&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;.prototype&lt;/code&gt; から継承した新しいオブジェクトが作成されます。</target>
        </trans-unit>
        <trans-unit id="f300f7a8a11e41b5a4d9b1b5854806567bf69dc0" translate="yes" xml:space="preserve">
          <source>A new object whose properties are given by the entries of the iterable.</source>
          <target state="translated">プロパティがイテレート可能なエントリによって与えられる新しいオブジェクト。</target>
        </trans-unit>
        <trans-unit id="45822e75325d21731d5124edc960068164d7b2a1" translate="yes" xml:space="preserve">
          <source>A new object with properties reflecting the locale and collation options computed during the initialization of the given &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;オブジェクトの初期化中に計算されたロケールと照合オプションを反映するプロパティを持つ新しいオブジェクト。</target>
        </trans-unit>
        <trans-unit id="7f62cd1bbf76a677946cc7b2f177ad8c113906f1" translate="yes" xml:space="preserve">
          <source>A new object with properties reflecting the locale and date and time formatting options computed during the initialization of the given &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトの初期化中に計算されたロケールと日付と時刻のフォーマットオプションを反映するプロパティを持つ新しいオブジェクト。</target>
        </trans-unit>
        <trans-unit id="e9f66c91a77e9f32bda81c6f3cf03db94cc0f64e" translate="yes" xml:space="preserve">
          <source>A new object with properties reflecting the locale and number formatting options computed during the initialization of the given &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;オブジェクトの初期化中に計算されたロケールおよび数値フォーマットオプションを反映するプロパティを持つ新しいオブジェクト。</target>
        </trans-unit>
        <trans-unit id="296f793f8cc501d86171b337ca076906a04bb7eb" translate="yes" xml:space="preserve">
          <source>A new object with properties reflecting the locale and plural formatting options computed during the initialization of the given &lt;a href=&quot;../pluralrules&quot;&gt;&lt;code&gt;PluralRules&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../pluralrules&quot;&gt; &lt;code&gt;PluralRules&lt;/code&gt; &lt;/a&gt;オブジェクトの初期化中に計算されたロケールと複数の書式設定オプションを反映するプロパティを持つ新しいオブジェクト。</target>
        </trans-unit>
        <trans-unit id="08f627000a3c7055f8024f0439e70da3b07b277f" translate="yes" xml:space="preserve">
          <source>A new object with the specified prototype object and properties.</source>
          <target state="translated">指定されたプロトタイプオブジェクトとプロパティを持つ新しいオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a769655fdedcb1408f3478f52d7c8df981a9fc0e" translate="yes" xml:space="preserve">
          <source>A new string containing the combined text of the strings provided.</source>
          <target state="translated">提供された文字列を組み合わせたテキストを含む新しい文字列。</target>
        </trans-unit>
        <trans-unit id="adc7344e5f5ef2ee7e786e09acc8279e5cf0f2e5" translate="yes" xml:space="preserve">
          <source>A new string containing the extracted section of the string.</source>
          <target state="translated">文字列の抽出された部分を含む新しい文字列。</target>
        </trans-unit>
        <trans-unit id="ef1730dad85af52ee53a5c327c3154cf0baba829" translate="yes" xml:space="preserve">
          <source>A new string containing the specified number of copies of the given string.</source>
          <target state="translated">与えられた文字列の指定されたコピー数を含む新しい文字列。</target>
        </trans-unit>
        <trans-unit id="d201988be0242c8883ea1fb8502cfa099697c2b8" translate="yes" xml:space="preserve">
          <source>A new string containing the specified part of the given string.</source>
          <target state="translated">与えられた文字列の指定された部分を含む新しい文字列。</target>
        </trans-unit>
        <trans-unit id="28ac369c445d0d041e9c6a702a99ff04b225837a" translate="yes" xml:space="preserve">
          <source>A new string representing the calling string converted to lower case, according to any locale-specific case mappings.</source>
          <target state="translated">呼び出し元の文字列を表す新しい文字列を、ロケール固有の大文字小文字のマッピングに従って小文字に変換したもの。</target>
        </trans-unit>
        <trans-unit id="6e96e2746d988d9bcba551eed7288e58dd62aae5" translate="yes" xml:space="preserve">
          <source>A new string representing the calling string converted to lower case.</source>
          <target state="translated">呼び出し元の文字列を表す新しい文字列を小文字に変換したもの。</target>
        </trans-unit>
        <trans-unit id="b7088d53a8622cb159f94cefb3726228f1cc8842" translate="yes" xml:space="preserve">
          <source>A new string representing the calling string converted to upper case, according to any locale-specific case mappings.</source>
          <target state="translated">呼び出し元の文字列を表す新しい文字列で、ロケール固有の大文字小文字のマッピングに従って大文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="85c20ad1902c44362264377b04a030dae8f37e24" translate="yes" xml:space="preserve">
          <source>A new string representing the calling string converted to upper case.</source>
          <target state="translated">呼び出し文字列を表す新しい文字列を大文字に変換したもの。</target>
        </trans-unit>
        <trans-unit id="aa6c42713d9b878488ae5dba64a73fa2a0d70247" translate="yes" xml:space="preserve">
          <source>A new string representing the calling string stripped of whitespace from both ends.</source>
          <target state="translated">呼び出し元の文字列を表す新しい文字列で、両端から空白を取り除いたもの。</target>
        </trans-unit>
        <trans-unit id="b28d7ed1422364783e7ea352a5c543e815cef386" translate="yes" xml:space="preserve">
          <source>A new string representing the calling string stripped of whitespace from its (right) end.</source>
          <target state="translated">呼び出し元の文字列を表す新しい文字列で、その(右端の)文字列から空白を取り除いたもの。</target>
        </trans-unit>
        <trans-unit id="b81950a82c2c1eec35e85fa59d60e9fd0b2763d5" translate="yes" xml:space="preserve">
          <source>A new string representing the calling string stripped of whitespace from its beginning (left end).</source>
          <target state="translated">呼び出し元の文字列を表す新しい文字列で、その先頭(左端)から空白を取り除いたもの。</target>
        </trans-unit>
        <trans-unit id="8021a38ffc9bd0cf0c5822c3c12811137d33f805" translate="yes" xml:space="preserve">
          <source>A new string representing the decoded version of the given encoded Uniform Resource Identifier (URI) component.</source>
          <target state="translated">与えられたエンコードされたUniform Resource Identifier (URI)コンポーネントのデコードされたバージョンを表す新しい文字列。</target>
        </trans-unit>
        <trans-unit id="0070c590794d620c343cc9f55fbda91526443db5" translate="yes" xml:space="preserve">
          <source>A new string representing the provided string encoded as a Uniform Resource Identifier (URI) component.</source>
          <target state="translated">Uniform Resource Identifier (URI)コンポーネントとしてエンコードされた、提供された文字列を表す新しい文字列。</target>
        </trans-unit>
        <trans-unit id="042974e32f133b133949bb8c15c058dfcbd137de" translate="yes" xml:space="preserve">
          <source>A new string representing the provided string encoded as a Uniform Resource Identifier (URI).</source>
          <target state="translated">URI(Uniform Resource Identifier)としてエンコードされた、提供された文字列を表す新しい文字列。</target>
        </trans-unit>
        <trans-unit id="864526c93d5ca1a276dd7e86fd8a170db237b73a" translate="yes" xml:space="preserve">
          <source>A new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).</source>
          <target state="translated">与えられたエンコードされたUniform Resource Identifier (URI)のエンコードされていないバージョンを表す新しい文字列。</target>
        </trans-unit>
        <trans-unit id="dea5e189df4e81121928c3571817453eb201cf91" translate="yes" xml:space="preserve">
          <source>A new string with some or all matches of a pattern replaced by a replacement.</source>
          <target state="translated">パターンの一部またはすべてのマッチした文字列が置換された新しい文字列。</target>
        </trans-unit>
        <trans-unit id="97d3688bacf36efa4f12e7387732d8be529503af" translate="yes" xml:space="preserve">
          <source>A new typed array containing the extracted elements.</source>
          <target state="translated">抽出された要素を含む新しい型付き配列。</target>
        </trans-unit>
        <trans-unit id="9b7ee4ada01f7b0909767c6a955b91cc62eca450" translate="yes" xml:space="preserve">
          <source>A new typed array with the elements that pass the test.</source>
          <target state="translated">テストに合格した要素を持つ新しい型付き配列。</target>
        </trans-unit>
        <trans-unit id="9b2b934ce7cc04e3d5bf5209be8fb87e0bcb42b7" translate="yes" xml:space="preserve">
          <source>A new typed array.</source>
          <target state="translated">新しい型付き配列。</target>
        </trans-unit>
        <trans-unit id="a980deccc4f134900e4659e48e5aefb323aca20f" translate="yes" xml:space="preserve">
          <source>A newly created revocable &lt;code&gt;Proxy&lt;/code&gt; object is returned.</source>
          <target state="translated">新しく作成された取り消し可能な &lt;code&gt;Proxy&lt;/code&gt; オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="41ff4abadbaa900e09a934a97c156d8a74fa6ec6" translate="yes" xml:space="preserve">
          <source>A non-RegExp object as the parameter</source>
          <target state="translated">パラメータとしてRegExp以外のオブジェクト</target>
        </trans-unit>
        <trans-unit id="92f0b60e53c2dda5a405b219ca8bdddaaa479d83" translate="yes" xml:space="preserve">
          <source>A non-extensible object's prototype is immutable:</source>
          <target state="translated">拡張不可能なオブジェクトのプロトタイプは不変です。</target>
        </trans-unit>
        <trans-unit id="866f75f22b1e2f8cc39b203958191e20ccc4ae2e" translate="yes" xml:space="preserve">
          <source>A number (given in radians).</source>
          <target state="translated">数(ラジアン単位で与えられる)。</target>
        </trans-unit>
        <trans-unit id="33b8bf0b19804a30e81dfa4f88a4afa62b1a772e" translate="yes" xml:space="preserve">
          <source>A number between 0 and 999, representing the milliseconds.</source>
          <target state="translated">0 から 999 の間の数値で、ミリ秒を表します。</target>
        </trans-unit>
        <trans-unit id="1ab9293c976e98a3fcdd69dc7264e14bbcc79c9b" translate="yes" xml:space="preserve">
          <source>A number corresponding to the year of the given date, according to local time.</source>
          <target state="translated">現地時間に応じて、指定された日付の年に対応する番号。</target>
        </trans-unit>
        <trans-unit id="c6394a8a6b36364c1881bf24f0f7260429def9b5" translate="yes" xml:space="preserve">
          <source>A number of woken up agents.</source>
          <target state="translated">覚醒した工作員が多数。</target>
        </trans-unit>
        <trans-unit id="e346a469255ac8b3f428891afc3b37da3169a46a" translate="yes" xml:space="preserve">
          <source>A number representing &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt; - 1&lt;/code&gt;, where &lt;code&gt;e&lt;/code&gt; is &lt;a href=&quot;e&quot;&gt;Euler's number&lt;/a&gt; and &lt;code&gt;x&lt;/code&gt; is the argument.</source>
          <target state="translated">&lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt; - 1&lt;/code&gt; 表す数値。ここで、 &lt;code&gt;e&lt;/code&gt; は&lt;a href=&quot;e&quot;&gt;オイラー数&lt;/a&gt;、 &lt;code&gt;x&lt;/code&gt; は引数です。</target>
        </trans-unit>
        <trans-unit id="320583e2aa41cd69454f31d51139ca63b04f0465" translate="yes" xml:space="preserve">
          <source>A number representing &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt;&lt;/code&gt;, where &lt;code&gt;e&lt;/code&gt; is &lt;a href=&quot;e&quot;&gt;Euler's number&lt;/a&gt; and &lt;code&gt;x&lt;/code&gt; is the argument.</source>
          <target state="translated">&lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt;&lt;/code&gt; 表す数値。ここで、 &lt;code&gt;e&lt;/code&gt; は&lt;a href=&quot;e&quot;&gt;オイラー数で&lt;/a&gt;あり、 &lt;code&gt;x&lt;/code&gt; は引数です。</target>
        </trans-unit>
        <trans-unit id="9c51ce7fa2e9a3b589c1f44496f3aed4944d8f2f" translate="yes" xml:space="preserve">
          <source>A number representing an angle in radians.</source>
          <target state="translated">角度をラジアン単位で表す数値。</target>
        </trans-unit>
        <trans-unit id="8fd6e43b7783552058a65ed8605c2e3bcc50189e" translate="yes" xml:space="preserve">
          <source>A number representing the UTF-16 code unit value of the character at the given index; &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;index&lt;/code&gt; is out of range.</source>
          <target state="translated">指定されたインデックスにある文字のUTF-16コード単位値を表す数値。 &lt;code&gt;index&lt;/code&gt; が範囲外の場合は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="19dfcc30e32bee411afb3e0cd2d738b242ef5813" translate="yes" xml:space="preserve">
          <source>A number representing the code point value of the character at the given index; &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no element at &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">指定されたインデックスにある文字のコードポイント値を表す数値。 &lt;code&gt;pos&lt;/code&gt; に要素がない場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1f3fa03a067fb17357799a6fad9a3cf0cfd38bdd" translate="yes" xml:space="preserve">
          <source>A number representing the given base taken to the power of the given exponent.</source>
          <target state="translated">指定された基底を表す数値を、指定された指数の累乗で表したもの。</target>
        </trans-unit>
        <trans-unit id="eeffbd6a40f2f1560827f097477009728e35e3a4" translate="yes" xml:space="preserve">
          <source>A number representing the largest integer less than or equal to the specified number.</source>
          <target state="translated">指定された数値以下の最大の整数を表す数値。</target>
        </trans-unit>
        <trans-unit id="c85077afce4c00cc243f168ecfdfdeb51271f37e" translate="yes" xml:space="preserve">
          <source>A number representing the milliseconds elapsed between 1 January 1970 00:00:00 UTC and the given date.</source>
          <target state="translated">1970年1月1日 00:00:00:00 UTCから指定された日付までの経過時間をミリ秒単位で表した数値。</target>
        </trans-unit>
        <trans-unit id="3959e82cf74fe8f21cae7d239e4881d9e242874f" translate="yes" xml:space="preserve">
          <source>A number representing the milliseconds elapsed since January 1, 1970, 00:00:00 UTC and the date obtained by parsing the given string representation of a date. If the argument doesn't represent a valid date, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">1970年1月1日00:00:00 UTCから経過したミリ秒を表す数値、および日付の指定された文字列表現を解析して取得した日付。引数が有効な日付を表していない場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="bbec7b01f1d137f427f8a03887d75e72d96e2a3f" translate="yes" xml:space="preserve">
          <source>A number representing the number of milliseconds for the given date since January 1, 1970, 00:00:00, UTC.</source>
          <target state="translated">1970年1月1日午前0時00分00秒(UTC)からの指定された日付のミリ秒数を表す数値。</target>
        </trans-unit>
        <trans-unit id="2de4476eb25f39be7fd0ec6899f52ec4cf3653cb" translate="yes" xml:space="preserve">
          <source>A number representing the primitive value of the specified &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクトのプリミティブ値を表す数値。</target>
        </trans-unit>
        <trans-unit id="29a02110eaa008ff87ed2535bf2b89acf72cf41f" translate="yes" xml:space="preserve">
          <source>A number representing the sign of the given argument. If the argument is a positive number, negative number, positive zero or negative zero, the function will return &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;-0&lt;/code&gt; respectively. Otherwise, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定された引数の符号を表す数値。引数が正の数、負の数、正のゼロまたは負のゼロの場合、関数は戻ります &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;-1&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;-0&lt;/code&gt; それぞれ。それ以外の場合は、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="c0ea0ff05072d5d43f31331c60e2ec0547f19535" translate="yes" xml:space="preserve">
          <source>A number representing the time-zone offset, in minutes, from the date based on current host system settings to UTC.</source>
          <target state="translated">現在のホストシステムの設定に基づく日付からUTCまでの時間帯のオフセット(分単位)を表す数値。</target>
        </trans-unit>
        <trans-unit id="136ee8eaff7c938674408c51762470e45721a247" translate="yes" xml:space="preserve">
          <source>A number representing the year in the given date according to universal time.</source>
          <target state="translated">普遍的な時間にしたがって、指定された日付の中の年を表す数字。</target>
        </trans-unit>
        <trans-unit id="3c1ea39354a2e2238fa968d55e87378d62a41e02" translate="yes" xml:space="preserve">
          <source>A number, between 0 and 999, representing the milliseconds for the given date according to local time.</source>
          <target state="translated">0から999の間の数値で、現地時間に基づく指定した日付のミリ秒を表します。</target>
        </trans-unit>
        <trans-unit id="7ed3c373d108b1b5e682a0caaea0fb68c8d2e5a0" translate="yes" xml:space="preserve">
          <source>A number.</source>
          <target state="translated">数です。</target>
        </trans-unit>
        <trans-unit id="6bfa57bff8461cf0df0af44f35e9e38fbc5eaf43" translate="yes" xml:space="preserve">
          <source>A pending promise can either be &lt;em&gt;fulfilled&lt;/em&gt; with a value, or &lt;em&gt;rejected&lt;/em&gt; with a reason (error). When either of these options happens, the associated handlers queued up by a promise's &lt;code&gt;then&lt;/code&gt; method are called. (If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.)</source>
          <target state="translated">保留中の約束は、値で&lt;em&gt;満たさ&lt;/em&gt;れるか、理由（エラー）で&lt;em&gt;拒否され&lt;/em&gt;ます。これらのオプションのいずれかが発生すると、promiseの &lt;code&gt;then&lt;/code&gt; メソッドによってキューに入れられた関連ハンドラーが呼び出されます。（対応するハンドラーがアタッチされたときにpromiseがすでに満たされているか拒否されている場合、ハンドラーが呼び出されるため、非同期操作の完了とそのハンドラーがアタッチされている間に競合状態はありません。）</target>
        </trans-unit>
        <trans-unit id="b3226275484ea18a77201e6aee0a1c537280bebd" translate="yes" xml:space="preserve">
          <source>A placeholder property named &lt;code&gt;@@iterator&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;@@iterator&lt;/code&gt; という名前のプレースホルダープロパティが使用されます。</target>
        </trans-unit>
        <trans-unit id="35dcb8f7eb7086bf817764b2a5823e55523f89c8" translate="yes" xml:space="preserve">
          <source>A placeholder property named &lt;code&gt;iterator&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;iterator&lt;/code&gt; という名前のプレースホルダープロパティが使用されます。</target>
        </trans-unit>
        <trans-unit id="797ee696694a0a3a8c95b40f03ad3788a1f5d981" translate="yes" xml:space="preserve">
          <source>A polyfill for &lt;code&gt;isNaN&lt;/code&gt; would be (the polyfill leverages the unique never-equal-to-itself characteristic of &lt;code&gt;NaN&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;isNaN&lt;/code&gt; のポリフィルは次のようになります（ポリフィルは、 &lt;code&gt;NaN&lt;/code&gt; 特有の決して等しくないという特性を活用します）。</target>
        </trans-unit>
        <trans-unit id="0ac2db2f4012edd96917557a5359b7d82c950825" translate="yes" xml:space="preserve">
          <source>A polyfill for this feature is available in the &lt;a href=&quot;https://github.com/zbraniecki/proposal-intl-formatToParts&quot;&gt;proposal repository&lt;/a&gt;.</source>
          <target state="translated">この機能のポリフィルは、&lt;a href=&quot;https://github.com/zbraniecki/proposal-intl-formatToParts&quot;&gt;提案リポジトリにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="524333b95fae4bfe9aa20007f5674f444d211ac1" translate="yes" xml:space="preserve">
          <source>A polyfill that avoids underflows and overflows:</source>
          <target state="translated">アンダーフローやオーバーフローを回避するポリフィル。</target>
        </trans-unit>
        <trans-unit id="c7411075f7f43a8bb768198f65a74746630e60ed" translate="yes" xml:space="preserve">
          <source>A potential &quot;downside&quot; of moving strict code to strict mode is that the semantics may be different in legacy browsers which do not implement strict mode. In some rare occasions (like bad concatenation or minification), your code also may not run in the mode you wrote and tested it in. Here are the rules to make your code strictness-neutral:</source>
          <target state="translated">厳密なコードを厳密なモードに移行することの潜在的な「欠点」は、厳密なモードを実装していないレガシーブラウザではセマンティクスが異なる可能性があることです。まれなケースでは (連結やミニ化の失敗など)、あなたのコードはあなたが書いてテストしたモードでは動作しないかもしれません。ここでは、コードを strictness-neutral にするためのルールを紹介します。</target>
        </trans-unit>
        <trans-unit id="7cef6daa9184b3ffcb088f3bfba29a8f29e5b55c" translate="yes" xml:space="preserve">
          <source>A property can be both 1) unpacked from an object and assigned to a variable with a different name and 2) assigned a default value in case the unpacked value is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">プロパティは、1）オブジェクトからアンパックして別の名前の変数に割り当てることも、2）アンパックした値が &lt;code&gt;undefined&lt;/code&gt; 場合にデフォルト値を割り当てることもできます。</target>
        </trans-unit>
        <trans-unit id="82be02990f1ff9f24ca4e15675d549bb21ccc212" translate="yes" xml:space="preserve">
          <source>A property can be unpacked from an object and assigned to a variable with a different name than the object property.</source>
          <target state="translated">プロパティは、オブジェクトから展開して、オブジェクトのプロパティとは異なる名前の変数に代入することができます。</target>
        </trans-unit>
        <trans-unit id="2bcfba5371861c7981fe69a021e20870135674ed" translate="yes" xml:space="preserve">
          <source>A property cannot be added as or modified to be non-configurable, if it does not exists as a non-configurable own property of the target object.</source>
          <target state="translated">プロパティは、ターゲット・オブジェクトの非構成可能な自身のプロパティとして存在しない場合、非構成可能なプロパティとして追加したり、変更したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="2e04530278a649f014a11c499ebb449c693ba214" translate="yes" xml:space="preserve">
          <source>A property cannot be added, if the target object is not extensible.</source>
          <target state="translated">対象となるオブジェクトが拡張可能でない場合、プロパティを追加することはできません。</target>
        </trans-unit>
        <trans-unit id="cfd7ea6ee7e2e1c263f5302a1c512f5a8ee38d74" translate="yes" xml:space="preserve">
          <source>A property cannot be deleted, if it exists as a non-configurable own property of the target object.</source>
          <target state="translated">プロパティは、ターゲット・オブジェクトの構成不可能な自身のプロパティとして存在する場合、削除することはできません。</target>
        </trans-unit>
        <trans-unit id="0846ddf6b5a46670bf4f9ddb9fd8b6890ffe20f7" translate="yes" xml:space="preserve">
          <source>A property cannot be reported as existent, if it does not exists as an own property of the target object and the target object is not extensible.</source>
          <target state="translated">プロパティは、ターゲット・オブジェクトの自身のプロパティとして存在せず、ターゲット・オブジェクトが拡張可能でない場合、存在していると報告することはできません。</target>
        </trans-unit>
        <trans-unit id="8ebf50c0307940fe5801235019034d6961173cf7" translate="yes" xml:space="preserve">
          <source>A property cannot be reported as non-configurable, if it does not exists as an own property of the target object or if it exists as a configurable own property of the target object.</source>
          <target state="translated">プロパティは、ターゲット・オブジェクトの自身のプロパティとして存在しない場合、またはターゲット・オブジェクトの構成可能な自身のプロパティとして存在する場合は、構成不可能として報告することはできません。</target>
        </trans-unit>
        <trans-unit id="88e9d157bd35141804b76df597e560bf5ef95d48" translate="yes" xml:space="preserve">
          <source>A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.</source>
          <target state="translated">プロパティは、ターゲット・オブジェクトの設定不可能な自身のプロパティとして存在する場合、存在しないと報告することはできません。</target>
        </trans-unit>
        <trans-unit id="badcbd6294ee5e29488a5d21fa2443b50b556f20" translate="yes" xml:space="preserve">
          <source>A property cannot be reported as non-existent, if it exists as an own property of the target object and the target object is not extensible.</source>
          <target state="translated">プロパティは、ターゲット・オブジェクトの自身のプロパティとして存在し、ターゲット・オブジェクトが拡張可能ではない場合、存在しないと報告することはできません。</target>
        </trans-unit>
        <trans-unit id="d37873543ac1180b5625b0693c0652776e41513d" translate="yes" xml:space="preserve">
          <source>A property definition of the form &lt;code&gt;__proto__: value&lt;/code&gt; or &lt;code&gt;&quot;__proto__&quot;: value&lt;/code&gt; does not create a property with the name &lt;code&gt;__proto__&lt;/code&gt;. Instead, if the provided value is an object or &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, it changes the &lt;code&gt;[[Prototype]]&lt;/code&gt; of the created object to that value. (If the value is not an object or null, the object is not changed.)</source>
          <target state="translated">フォームのプロパティ定義 &lt;code&gt;__proto__: value&lt;/code&gt; または &lt;code&gt;&quot;__proto__&quot;: value&lt;/code&gt; 名前付きプロパティを作成しません &lt;code&gt;__proto__&lt;/code&gt; を。代わりに、提供された値がオブジェクトまたは&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; の&lt;/a&gt;場合、作成されたオブジェクトの &lt;code&gt;[[Prototype]]&lt;/code&gt; をその値に変更します。（値がオブジェクトまたはnullでない場合、オブジェクトは変更されません。）</target>
        </trans-unit>
        <trans-unit id="fc0775db0766a26736241f2163280bafa3ce93de" translate="yes" xml:space="preserve">
          <source>A property descriptor object if the property exists in the given target object; otherwise, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プロパティが指定されたターゲットオブジェクトに存在する場合、プロパティ記述子オブジェクト。それ以外の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="12b8c0bddec1b93be72144228de4bb068f82c2e7" translate="yes" xml:space="preserve">
          <source>A property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">指定されたプロパティがオブジェクトに存在する場合はそのプロパティ記述子、それ以外の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1251c13eeceec96bdc2abe1f799429c7ddbeb11c" translate="yes" xml:space="preserve">
          <source>A property may not be non-configurable, if a corresponding configurable property of the target object exists.</source>
          <target state="translated">ターゲット・オブジェクトの対応する設定可能なプロパティが存在する場合、プロパティは非設定可能ではありません。</target>
        </trans-unit>
        <trans-unit id="6175702d4b908c8983502b8e8b3619359ecedeaf" translate="yes" xml:space="preserve">
          <source>A property of an object can also refer to a &lt;a href=&quot;../functions&quot;&gt;function&lt;/a&gt; or a &lt;a href=&quot;../functions/get&quot;&gt;getter&lt;/a&gt; or &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt; method.</source>
          <target state="translated">オブジェクトのプロパティは、&lt;a href=&quot;../functions&quot;&gt;関数&lt;/a&gt;または&lt;a href=&quot;../functions/get&quot;&gt;ゲッター&lt;/a&gt;または&lt;a href=&quot;../functions/set&quot;&gt;セッター&lt;/a&gt;メソッドを参照することもできます。</target>
        </trans-unit>
        <trans-unit id="f99e727736e50c312224e12da97929ee2d5745cd" translate="yes" xml:space="preserve">
          <source>A read-only element that specifies the last matched characters.</source>
          <target state="translated">最後にマッチした文字を指定する読み取り専用の要素。</target>
        </trans-unit>
        <trans-unit id="787c95e0758676812dad54fc3efae04a04e5c1e0" translate="yes" xml:space="preserve">
          <source>A read-only property that is the zero-based index of the match in the string.</source>
          <target state="translated">文字列内のマッチのゼロベースのインデックスである読み取り専用のプロパティ。</target>
        </trans-unit>
        <trans-unit id="ca40b6e67b70a23ebbf760fa1b1a82230fc604cb" translate="yes" xml:space="preserve">
          <source>A read-only property that reflects the original string against which the regular expression was matched.</source>
          <target state="translated">正規表現がマッチした元の文字列を反映する読み取り専用のプロパティです。</target>
        </trans-unit>
        <trans-unit id="730458589a52cf9b82c89704cc9fbdda5aa6828c" translate="yes" xml:space="preserve">
          <source>A read-only string containing the description of the symbol.</source>
          <target state="translated">シンボルの説明を含む読み取り専用の文字列。</target>
        </trans-unit>
        <trans-unit id="64102081d8ac27a0b3d334d82feac1d6b074c1da" translate="yes" xml:space="preserve">
          <source>A reading thread is sleeping and waiting on location 0 which is expected to be 0. As long as that is true, it will not go on. However, once the writing thread has stored a new value, it will be notified by the writing thread and return the new value (123).</source>
          <target state="translated">読み込みスレッドはスリープ状態で、0であると予想される場所0で待機しています。 それが本当である限り、スレッドは進みません。しかし、書き込みスレッドが新しい値を格納すると、書き込みスレッドから通知があり、新しい値(123)を返します。</target>
        </trans-unit>
        <trans-unit id="6633c50b2d15b5ea052bd2cf883fb21f72a167f8" translate="yes" xml:space="preserve">
          <source>A reading thread is sleeping and waiting on location 0 which is expected to be 0. As long as that is true, it will not go on. However, once the writing thread has stored a new value, it will be woken up by the writing thread and return the new value (123).</source>
          <target state="translated">読み込みスレッドはスリープ状態で、0であると予想される場所0で待機しています。 それが本当である限り、スレッドは進みません。しかし、書き込みスレッドが新しい値を格納すると、書き込みスレッドに起こされて新しい値(123)を返します。</target>
        </trans-unit>
        <trans-unit id="6004e3146eef4ca752c4d06a8ef6aebcdbecfa99" translate="yes" xml:space="preserve">
          <source>A record in the global symbol registry</source>
          <target state="translated">グローバルシンボルレジストリのレコード</target>
        </trans-unit>
        <trans-unit id="3952ae589c24ccd58caf50364ba04b8aa25e0490" translate="yes" xml:space="preserve">
          <source>A recursive function must be able to refer to itself. Typically, a function refers to itself by its name. However, an anonymous function (which can be created by a &lt;a href=&quot;../../operators/function&quot;&gt;function expression&lt;/a&gt; or the &lt;a href=&quot;../../global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt; constructor&lt;/a&gt;) does not have a name. Therefore if there is no accessible variable referring to it, the only way the function can refer to itself is by &lt;code&gt;arguments.callee&lt;/code&gt;.</source>
          <target state="translated">再帰関数はそれ自体を参照できなければなりません。通常、関数はそれ自体をその名前で参照します。ただし、無名関数（&lt;a href=&quot;../../operators/function&quot;&gt;関数式&lt;/a&gt;または&lt;a href=&quot;../../global_objects/function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; コンストラクター&lt;/a&gt;によって作成できる）には名前がありません。したがって、それを参照するアクセス可能な変数がない場合、関数がそれ自体を参照できる唯一の方法は、 &lt;code&gt;arguments.callee&lt;/code&gt; によるものです。</target>
        </trans-unit>
        <trans-unit id="6a1215e7af059f28ad2effa06d3994af298752fc" translate="yes" xml:space="preserve">
          <source>A reference to &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt;への参照。</target>
        </trans-unit>
        <trans-unit id="fead2f20f45c2ca00a351d9dfac88e5f29757cd2" translate="yes" xml:space="preserve">
          <source>A reference to &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;への参照。</target>
        </trans-unit>
        <trans-unit id="645b0911c2178e55ee4e148c4418035e836ea6ed" translate="yes" xml:space="preserve">
          <source>A reference to &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt;への参照。</target>
        </trans-unit>
        <trans-unit id="dd2787042865ffaea6ef24de5b37f662ed711e7d" translate="yes" xml:space="preserve">
          <source>A reference to &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;への参照。</target>
        </trans-unit>
        <trans-unit id="826f72073177c0d1c0308286baa370878ae70e04" translate="yes" xml:space="preserve">
          <source>A reference to &lt;code&gt;Intl.NumberFormat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat&lt;/code&gt; への参照。</target>
        </trans-unit>
        <trans-unit id="fd62f12019b9406a7cede5399f8eb706d80bb9d2" translate="yes" xml:space="preserve">
          <source>A reference to &lt;code&gt;Intl.PluralRules&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules&lt;/code&gt; への参照。</target>
        </trans-unit>
        <trans-unit id="b14b4d3af20ec453f94c95d9cf1f5471eb56d6e7" translate="yes" xml:space="preserve">
          <source>A regular expression object. If a non-RegExp object &lt;code&gt;obj&lt;/code&gt; is passed, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; by using &lt;code&gt;new RegExp(obj)&lt;/code&gt;.</source>
          <target state="translated">正規表現オブジェクト。非RegExpオブジェクト &lt;code&gt;obj&lt;/code&gt; が渡された場合、それは &lt;code&gt;new RegExp(obj)&lt;/code&gt; を使用して暗黙的に&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; に&lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="6af9dcae600f92a537eab39a4f0ef60a85d9bfa8" translate="yes" xml:space="preserve">
          <source>A regular expression object. If a non-RegExp object &lt;code&gt;obj&lt;/code&gt; is passed, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; by using &lt;code&gt;new RegExp(obj)&lt;/code&gt;. If you don't give any parameter and use the match() method directly, you will get an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; with an empty string:[&quot;&quot;].</source>
          <target state="translated">正規表現オブジェクト。非RegExpオブジェクト &lt;code&gt;obj&lt;/code&gt; が渡された場合、それは &lt;code&gt;new RegExp(obj)&lt;/code&gt; を使用して暗黙的に&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; に&lt;/a&gt;変換されます。パラメータを指定せずにmatch（）メソッドを直接使用すると、空の文字列：[&quot;&quot;]の&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;が取得されます。</target>
        </trans-unit>
        <trans-unit id="aaba0ae4b7af561e5502607c074cef2e112205b5" translate="yes" xml:space="preserve">
          <source>A revocable &lt;code&gt;Proxy&lt;/code&gt; is an object with following two properties &lt;code&gt;{proxy: proxy, revoke: revoke}&lt;/code&gt;.</source>
          <target state="translated">取り消し可能な &lt;code&gt;Proxy&lt;/code&gt; は、次の2つのプロパティ &lt;code&gt;{proxy: proxy, revoke: revoke}&lt;/code&gt; 持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="4f39d457b1eda7365f2b249a3b851f81d79d236e" translate="yes" xml:space="preserve">
          <source>A safe integer is an integer that</source>
          <target state="translated">安全な整数とは</target>
        </trans-unit>
        <trans-unit id="98ae50e3f46c01960a05f68ae16ebf2a6e65f77f" translate="yes" xml:space="preserve">
          <source>A safer way to define functions conditionally is to assign a function expression to a variable:</source>
          <target state="translated">条件付きで関数を定義するより安全な方法は、関数式を変数に代入することです。</target>
        </trans-unit>
        <trans-unit id="94a49979b4f82d59d26824b08ef6077682a866b7" translate="yes" xml:space="preserve">
          <source>A sequence of code points.</source>
          <target state="translated">コードポイントのシーケンス。</target>
        </trans-unit>
        <trans-unit id="961e96d7aadc89a7406fc5bff68c413fb0945328" translate="yes" xml:space="preserve">
          <source>A sequence of numbers that are UTF-16 code units. The range is between 0 and 65535 (0xFFFF). Numbers greater than 0xFFFF are truncated. No validity checks are performed.</source>
          <target state="translated">UTF-16のコード単位である数字の列。範囲は0~65535(0xFFFF)。0xFFFFより大きい数値は切り捨てられます。有効性のチェックは行いません。</target>
        </trans-unit>
        <trans-unit id="1d120207d33f71b14fac5fd1daf6ea9ad3f6617e" translate="yes" xml:space="preserve">
          <source>A setter can be removed using the &lt;a href=&quot;../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">セッターは、&lt;a href=&quot;../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;演算子を使用して削除できます。</target>
        </trans-unit>
        <trans-unit id="a43b6979efc421a51bb34618f3f716ef7c680397" translate="yes" xml:space="preserve">
          <source>A shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">共有&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2d0317a114534b8be470ff17d0bddad0b14c5f27" translate="yes" xml:space="preserve">
          <source>A shared integer typed array. One of &lt;a href=&quot;../int8array&quot;&gt;&lt;code&gt;Int8Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../uint8array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../int16array&quot;&gt;&lt;code&gt;Int16Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../uint16array&quot;&gt;&lt;code&gt;Uint16Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../uint32array&quot;&gt;&lt;code&gt;Uint32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">共有整数型配列。一つ&lt;a href=&quot;../int8array&quot;&gt; &lt;code&gt;Int8Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../uint8array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../int16array&quot;&gt; &lt;code&gt;Int16Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../uint16array&quot;&gt; &lt;code&gt;Uint16Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../uint32array&quot;&gt; &lt;code&gt;Uint32Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c8df0882bca9a687b9140e41812fc9aaccc57a5d" translate="yes" xml:space="preserve">
          <source>A signed 16-bit integer number.</source>
          <target state="translated">符号付き16ビット整数値。</target>
        </trans-unit>
        <trans-unit id="706f50d9a48d0c59e8b452a5b35c3ff3a1bdc90f" translate="yes" xml:space="preserve">
          <source>A signed 32-bit float number.</source>
          <target state="translated">符号付き32ビットの浮動小数点数。</target>
        </trans-unit>
        <trans-unit id="3ea92d52219d63d683595e0c616072c73cc86e26" translate="yes" xml:space="preserve">
          <source>A signed 32-bit integer number.</source>
          <target state="translated">符号付き32ビット整数値。</target>
        </trans-unit>
        <trans-unit id="71e7538b008897b24f463feea45c322d7c49138b" translate="yes" xml:space="preserve">
          <source>A signed 64-bit float number.</source>
          <target state="translated">符号付き64ビットの浮動小数点数。</target>
        </trans-unit>
        <trans-unit id="885ff284d1780f10da2e38f4585b4776fe6e244b" translate="yes" xml:space="preserve">
          <source>A signed 8-bit integer number.</source>
          <target state="translated">符号付き8ビット整数値。</target>
        </trans-unit>
        <trans-unit id="622e0ae943e82a2002d105a9ba130181bac973d2" translate="yes" xml:space="preserve">
          <source>A similar result can be achieved using the &lt;a href=&quot;string/localecompare&quot;&gt;&lt;code&gt;localeCompare()&lt;/code&gt;&lt;/a&gt; method inherited by &lt;code&gt;String&lt;/code&gt; instances.</source>
          <target state="translated">同様の結果は、 &lt;code&gt;String&lt;/code&gt; インスタンスによって継承された&lt;a href=&quot;string/localecompare&quot;&gt; &lt;code&gt;localeCompare()&lt;/code&gt; &lt;/a&gt;メソッドを使用して実現できます。</target>
        </trans-unit>
        <trans-unit id="4bc28ad3e72ba68d8cf81a60c620e0a5af88cf38" translate="yes" xml:space="preserve">
          <source>A simple class declaration</source>
          <target state="translated">簡単なクラス宣言</target>
        </trans-unit>
        <trans-unit id="be6da88607b4e805d6a435a71c844f0a4e76e44b" translate="yes" xml:space="preserve">
          <source>A simple class expression</source>
          <target state="translated">簡単なクラス表現</target>
        </trans-unit>
        <trans-unit id="8e839688e01ba01e9dfe145feb09335f1aa963d0" translate="yes" xml:space="preserve">
          <source>A simple example:</source>
          <target state="translated">簡単な例です。</target>
        </trans-unit>
        <trans-unit id="8489270c852390ea6b9de9174327430c8b26f4f8" translate="yes" xml:space="preserve">
          <source>A simple loop</source>
          <target state="translated">シンプルなループ</target>
        </trans-unit>
        <trans-unit id="f4c0555e72c74dee716dad5376bb1622baa52b2e" translate="yes" xml:space="preserve">
          <source>A source map has been specified more than once for a given JavaScript source.</source>
          <target state="translated">指定された JavaScript ソースに対して、ソース マップが複数回指定されています。</target>
        </trans-unit>
        <trans-unit id="9b184b07701b8fb31f34e2cb63f82768ace5891e" translate="yes" xml:space="preserve">
          <source>A space before bracket notation is allowed.</source>
          <target state="translated">大括弧表記の前にスペースを入れることができます。</target>
        </trans-unit>
        <trans-unit id="ad946f7b8e83d55ed9869009cd035be585910e88" translate="yes" xml:space="preserve">
          <source>A specific language construct was expected, but something else was provided. This might be a simple typo.</source>
          <target state="translated">特定の言語構成が期待されていましたが、何か他のものが提供されていました。これは単純なタイプミスかもしれません。</target>
        </trans-unit>
        <trans-unit id="9a33db5b89e156b54b88e9df50b9312712f79b69" translate="yes" xml:space="preserve">
          <source>A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a &lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement (&lt;code&gt;{ ... }&lt;/code&gt;) to group those statements. To execute no statement within the loop, use an &lt;a href=&quot;empty&quot;&gt;empty&lt;/a&gt; statement (&lt;code&gt;;&lt;/code&gt;).</source>
          <target state="translated">条件がtrueと評価される限り実行されるステートメント。ループ内で複数のステートメントを実行するには、&lt;a href=&quot;block&quot;&gt;ブロック&lt;/a&gt;ステートメント（ &lt;code&gt;{ ... }&lt;/code&gt; ）を使用して、それらのステートメントをグループ化します。ループ内でステートメントを実行しない場合は、&lt;a href=&quot;empty&quot;&gt;空の&lt;/a&gt;ステートメント（ &lt;code&gt;;&lt;/code&gt; ）を使用します。</target>
        </trans-unit>
        <trans-unit id="aef327f62f00288b84ce0d5a9ee5cd26bf655f63" translate="yes" xml:space="preserve">
          <source>A statement that is executed at least once and is re-executed each time the condition evaluates to true. To execute multiple statements within the loop, use a &lt;a href=&quot;block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; statement (&lt;code&gt;{ ... }&lt;/code&gt;) to group those statements.</source>
          <target state="translated">少なくとも1回実行され、条件がtrueと評価されるたびに再実行されるステートメント。ループ内で複数のステートメントを実行するには、&lt;a href=&quot;block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt;ステートメント（ &lt;code&gt;{ ... }&lt;/code&gt; ）を使用して、それらのステートメントをグループ化します。</target>
        </trans-unit>
        <trans-unit id="6eecb97f6ef9305b517fa96d9c46076699ed6107" translate="yes" xml:space="preserve">
          <source>A statement to execute for each property. To execute multiple statements within the loop, use a &lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement (&lt;code&gt;{ ... }&lt;/code&gt;) to group those statements.</source>
          <target state="translated">各プロパティに対して実行するステートメント。ループ内で複数のステートメントを実行するには、&lt;a href=&quot;block&quot;&gt;ブロック&lt;/a&gt;ステートメント（ &lt;code&gt;{ ... }&lt;/code&gt; ）を使用して、それらのステートメントをグループ化します。</target>
        </trans-unit>
        <trans-unit id="e962b27f500b22c745f065461212bdfade91281a" translate="yes" xml:space="preserve">
          <source>A strict-mode-only warning that a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; occurred. JavaScript execution won't be halted.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;が発生したという厳格モードのみの警告。JavaScriptの実行は停止されません。</target>
        </trans-unit>
        <trans-unit id="3576341a0c51d1186f6c01433f210a6c20f5e828" translate="yes" xml:space="preserve">
          <source>A stricter parse function</source>
          <target state="translated">より厳格なパース関数</target>
        </trans-unit>
        <trans-unit id="c5be257dc67a409c94dc4468613d1b77d00fabab" translate="yes" xml:space="preserve">
          <source>A string containing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b&quot;&gt;&lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b&quot;&gt; &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="f12462db5702ef9de56d6688cc3229d24a6822f4" translate="yes" xml:space="preserve">
          <source>A string containing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big&quot;&gt;&lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big&quot;&gt; &lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="ebc2489d09aaf80b5f3d4329140b21beae60ffad" translate="yes" xml:space="preserve">
          <source>A string containing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink&quot;&gt;&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink&quot;&gt; &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="ec7ad51106a4c18c42f006349c05da5d70f3e509" translate="yes" xml:space="preserve">
          <source>A string containing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt;&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt; &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="f8c391aaa399b04ba0a7a0785a3f6a45ff5edf9e" translate="yes" xml:space="preserve">
          <source>A string containing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i&quot;&gt;&lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i&quot;&gt; &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="4b37254c20cb4322dddec6edfdd4a59a8749c619" translate="yes" xml:space="preserve">
          <source>A string containing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt;&lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt; &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="7a20e76995e89e307af6f89319a0706e4ba3e00d" translate="yes" xml:space="preserve">
          <source>A string containing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt;&lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt; &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="1ddf5983ed53b29b0a2acb22b989e0a467380d41" translate="yes" xml:space="preserve">
          <source>A string containing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt;&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt; &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="4306846ca234ae1382c39998ecba39890e1fd00b" translate="yes" xml:space="preserve">
          <source>A string containing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt;&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt; &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="51de888e8e9b13df3e647799710c993ee4efd9ce" translate="yes" xml:space="preserve">
          <source>A string containing an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を含む文字列。</target>
        </trans-unit>
        <trans-unit id="abe9e0cf511aef2167e97d8008c18e49b5c48eec" translate="yes" xml:space="preserve">
          <source>A string containing the JavaScript statements comprising the function body.</source>
          <target state="translated">関数本体を構成するJavaScript文を含む文字列。</target>
        </trans-unit>
        <trans-unit id="38d61b47da781175f39c0ce0ce74496ca36281c3" translate="yes" xml:space="preserve">
          <source>A string containing the JavaScript statements comprising the function definition.</source>
          <target state="translated">関数定義を構成するJavaScript文を含む文字列。</target>
        </trans-unit>
        <trans-unit id="76ab2020f08dc24275ba16863402a30ec1a282de" translate="yes" xml:space="preserve">
          <source>A string containing the Unicode Normalization Form of the given string.</source>
          <target state="translated">与えられた文字列の Unicode 正規化形式を含む文字列。</target>
        </trans-unit>
        <trans-unit id="e3e98e4cc796765cd4f1b36dfc48bd45a5a8f037" translate="yes" xml:space="preserve">
          <source>A string containing the name of the property to be bound to the given function.</source>
          <target state="translated">与えられた関数にバインドされるプロパティの名前を含む文字列。</target>
        </trans-unit>
        <trans-unit id="c4a276b31a6d267ea98ce2254e8a3d7b9ba63144" translate="yes" xml:space="preserve">
          <source>A string containing the name of the property to bind to the given function.</source>
          <target state="translated">与えられた関数にバインドするプロパティの名前を含む文字列。</target>
        </trans-unit>
        <trans-unit id="cf46dbdb642416ee5553d0fcefb91c75bfde7711" translate="yes" xml:space="preserve">
          <source>A string created by using the specified sequence of code points.</source>
          <target state="translated">指定されたコードポイントのシーケンスを使用して作成された文字列。</target>
        </trans-unit>
        <trans-unit id="145134fffe30f647881f6800617d58d07ab6d93c" translate="yes" xml:space="preserve">
          <source>A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;CSS color reference&lt;/a&gt;.</source>
          <target state="translated">16進数のRGB 3成分または文字列リテラルとして色を表す文字列。色名の文字列リテラルは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;CSSカラーリファレンスに&lt;/a&gt;リストされています。</target>
        </trans-unit>
        <trans-unit id="b973e9b0d98fb7a711707960f9a13ff27cb14416" translate="yes" xml:space="preserve">
          <source>A string key used to identify a symbol.</source>
          <target state="translated">シンボルを識別するために使用される文字列キー。</target>
        </trans-unit>
        <trans-unit id="c4ba502455dbe95cd2c6eb5283a1c02f3545e525" translate="yes" xml:space="preserve">
          <source>A string leading to an invalid date has been provided to &lt;a href=&quot;../global_objects/date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/date/parse&quot;&gt;&lt;code&gt;Date.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">無効な日付につながる文字列が&lt;a href=&quot;../global_objects/date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/date/parse&quot;&gt; &lt;code&gt;Date.parse()&lt;/code&gt; に&lt;/a&gt;提供されました。</target>
        </trans-unit>
        <trans-unit id="f2134306d88850caca46971ddc5dc90adf6e606a" translate="yes" xml:space="preserve">
          <source>A string literal is zero or more Unicode code points enclosed in single or double quotes. Unicode code points may also be represented by an escape sequence. All code points may appear literally in a string literal except for these closing quote code points:</source>
          <target state="translated">文字列リテラルは、 ゼロ個以上の Unicode コ ー ド 点を一重引用符ま たは二重引用符で囲んだものです。Unicode コード点は、 エスケープシーケンスで表すこともできます。文字列リテラルの中では、これらの閉じ引用符で囲まれたコードポイントを除いて、すべてのコードポイントが文字通りに現れることがあります。</target>
        </trans-unit>
        <trans-unit id="5ac33925a3b34d167477d5f4e59967a5cff70eb4" translate="yes" xml:space="preserve">
          <source>A string made out of the characters &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt;</source>
          <target state="translated">文字 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、および &lt;code&gt;_&lt;/code&gt; で構成される文字列</target>
        </trans-unit>
        <trans-unit id="de8ec3b2242ce2b8ec5db8f1df700c63a8886a5d" translate="yes" xml:space="preserve">
          <source>A string of length N consisting of the N specified UTF-16 code units.</source>
          <target state="translated">UTF-16 のコード単位を N 個指定した長さ N の文字列。</target>
        </trans-unit>
        <trans-unit id="5b81bc68802330b0cc8615d6ff27b54ac4650e9c" translate="yes" xml:space="preserve">
          <source>A string or symbol representing a property name or array index (non-symbols will be coerced to strings).</source>
          <target state="translated">プロパティ名または配列インデックスを表す文字列または記号(記号以外のものは強制的に文字列になります)。</target>
        </trans-unit>
        <trans-unit id="a18c7400718bfc639f4c116a3e19d59b2744892d" translate="yes" xml:space="preserve">
          <source>A string representation of the given date.</source>
          <target state="translated">指定した日付の文字列表現。</target>
        </trans-unit>
        <trans-unit id="08a2428925659a7efc79a81666d56ab1b23ac8bd" translate="yes" xml:space="preserve">
          <source>A string representing a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object in fixed-point or exponential notation rounded to &lt;code&gt;precision&lt;/code&gt; significant digits. See the discussion of rounding in the description of the &lt;a href=&quot;tofixed&quot;&gt;&lt;code&gt;Number.prototype.toFixed()&lt;/code&gt;&lt;/a&gt; method, which also applies to &lt;code&gt;toPrecision()&lt;/code&gt;.</source>
          <target state="translated">表す文字列&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;固定小数点または指数表記の目的は、に丸め &lt;code&gt;precision&lt;/code&gt; 有効桁。説明に丸めの議論を参照&lt;a href=&quot;tofixed&quot;&gt; &lt;code&gt;Number.prototype.toFixed()&lt;/code&gt; &lt;/a&gt;も適用方法、 &lt;code&gt;toPrecision()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e30f03797e3869c4ecd88c8bf859d4c16eb311c" translate="yes" xml:space="preserve">
          <source>A string representing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt&quot;&gt;&lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt&quot;&gt; &lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt; &lt;/a&gt; HTML要素を表す文字列。</target>
        </trans-unit>
        <trans-unit id="0e01b8f1781e759022defb07600f62cd42344aa0" translate="yes" xml:space="preserve">
          <source>A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.</source>
          <target state="translated">JavaScript の式、文、または一連の文を表す文字列。式には、変数や既存のオブジェクトのプロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="f9254bb11ce7fa09e680aac2d18a191122d1c881" translate="yes" xml:space="preserve">
          <source>A string representing an &lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822&lt;/a&gt; or (a variant of) ISO 8601 date (other formats may be used, but results may be unexpected).</source>
          <target state="translated">&lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822&lt;/a&gt;またはISO 8601日付（の変形）を表す文字列（他の形式が使用されることもありますが、予期しない結果になる場合があります）。</target>
        </trans-unit>
        <trans-unit id="6244d4a905fd37ba6f6d50a55c6bb8f4e5b6c4d7" translate="yes" xml:space="preserve">
          <source>A string representing the &lt;code&gt;name&lt;/code&gt; attribute of the a tag to be created.</source>
          <target state="translated">作成するaタグの &lt;code&gt;name&lt;/code&gt; 属性を表す文字列。</target>
        </trans-unit>
        <trans-unit id="cfef5b02c603941cad9446222899fb11356af21f" translate="yes" xml:space="preserve">
          <source>A string representing the calling object.</source>
          <target state="translated">呼び出し元のオブジェクトを表す文字列。</target>
        </trans-unit>
        <trans-unit id="cfc79f0e7924f2faa05b9dd03bc2ba62bd8be7f2" translate="yes" xml:space="preserve">
          <source>A string representing the character (exactly one UTF-16 code unit) at the specified index; empty string if &lt;code&gt;index&lt;/code&gt; is out of range.</source>
          <target state="translated">指定されたインデックスの文字（正確には1つのUTF-16コード単位）を表す文字列。 &lt;code&gt;index&lt;/code&gt; が範囲外の場合は空の文字列。</target>
        </trans-unit>
        <trans-unit id="bce925e4236a8a7f459800d14b769e67fd668383" translate="yes" xml:space="preserve">
          <source>A string representing the date portion of the given &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance according to language-specific conventions.</source>
          <target state="translated">言語固有の規則に従って、指定された&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;インスタンスの日付部分を表す文字列。</target>
        </trans-unit>
        <trans-unit id="6c9697396de5d4178a0436aa1919cd3a843bcdda" translate="yes" xml:space="preserve">
          <source>A string representing the date portion of the given &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object in human readable form in American English.</source>
          <target state="translated">指定された&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付部分をアメリカ英語で人間が読める形式で表す文字列。</target>
        </trans-unit>
        <trans-unit id="93885e8efffe8ca22cde3b3103a348ebf2fcb896" translate="yes" xml:space="preserve">
          <source>A string representing the elements of the array.</source>
          <target state="translated">配列の要素を表す文字列.</target>
        </trans-unit>
        <trans-unit id="701ca4745ebe954e81d4c94ac49ec3b0b11338d2" translate="yes" xml:space="preserve">
          <source>A string representing the elements of the typed array.</source>
          <target state="translated">型付き配列の要素を表す文字列.</target>
        </trans-unit>
        <trans-unit id="694c9b223fd1d55490540acabfbd260b93f3ff7d" translate="yes" xml:space="preserve">
          <source>A string representing the given &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object in exponential notation with one digit before the decimal point, rounded to &lt;code&gt;fractionDigits&lt;/code&gt; digits after the decimal point.</source>
          <target state="translated">小数点の前に1桁の指数表記で指定された&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクトを表す文字列。小数点以下は &lt;code&gt;fractionDigits&lt;/code&gt; 桁に丸められます。</target>
        </trans-unit>
        <trans-unit id="d6a9a7d6acfe9f8529cddf686faa5be06a13dacd" translate="yes" xml:space="preserve">
          <source>A string representing the given date according to language-specific conventions.</source>
          <target state="translated">言語固有の規則に従って、指定された日付を表す文字列。</target>
        </trans-unit>
        <trans-unit id="bc72a865054e5fa7915f4960d0747b66252825d6" translate="yes" xml:space="preserve">
          <source>A string representing the given date in the &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt; format according to universal time.</source>
          <target state="translated">指定された日付を&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;形式で世界時に従って表す文字列。</target>
        </trans-unit>
        <trans-unit id="64a69f15ed616bdd4d91437822d386ddaf433d06" translate="yes" xml:space="preserve">
          <source>A string representing the given date using the UTC time zone.</source>
          <target state="translated">UTC タイムゾーンを使用して指定した日付を表す文字列。</target>
        </trans-unit>
        <trans-unit id="168956bbaa8e1f9f6875a4e8d5b9ee1d635883e8" translate="yes" xml:space="preserve">
          <source>A string representing the given date.</source>
          <target state="translated">指定した日付を表す文字列。</target>
        </trans-unit>
        <trans-unit id="ffbe6ab9f29a627c561f25e1d22a21bbafc5486b" translate="yes" xml:space="preserve">
          <source>A string representing the given number using fixed-point notation.</source>
          <target state="translated">固定小数点表記を用いて与えられた数値を表す文字列。</target>
        </trans-unit>
        <trans-unit id="23e944223688a40ac8cb9c8008ea32555e40451b" translate="yes" xml:space="preserve">
          <source>A string representing the given object.</source>
          <target state="translated">与えられたオブジェクトを表す文字列。</target>
        </trans-unit>
        <trans-unit id="ac2bb9c5fd42d8c226c061ffc6074803f916b703" translate="yes" xml:space="preserve">
          <source>A string representing the key for the given symbol if one is found on the global registry; otherwise, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">グローバルレジストリで見つかった場合、指定されたシンボルのキーを表す文字列。それ以外の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="667b912c4ed8d3e3093de093469f68a12c07850a" translate="yes" xml:space="preserve">
          <source>A string representing the object.</source>
          <target state="translated">オブジェクトを表す文字列。</target>
        </trans-unit>
        <trans-unit id="990d392ee905bf2438c03975619b9f3b89227271" translate="yes" xml:space="preserve">
          <source>A string representing the primitive value of a given &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトのプリミティブ値を表す文字列。</target>
        </trans-unit>
        <trans-unit id="ebfda157488c0e43d59991005141b47bd2618063" translate="yes" xml:space="preserve">
          <source>A string representing the source code of the function.</source>
          <target state="translated">関数のソースコードを表す文字列。</target>
        </trans-unit>
        <trans-unit id="c3e0e160beabc70b9ccc2f0947f69ebc84c8de74" translate="yes" xml:space="preserve">
          <source>A string representing the source code of the given Object.</source>
          <target state="translated">与えられたオブジェクトのソースコードを表す文字列。</target>
        </trans-unit>
        <trans-unit id="e87087e3b7c93062c82f502c485f3c8053121e71" translate="yes" xml:space="preserve">
          <source>A string representing the specified &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;オブジェクトを表す文字列。</target>
        </trans-unit>
        <trans-unit id="b33ca901b06ca2547079b023d6415a900fbbe78a" translate="yes" xml:space="preserve">
          <source>A string representing the specified &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトを表す文字列。</target>
        </trans-unit>
        <trans-unit id="952876e6d59e7e29a62c3ddd5855937975967682" translate="yes" xml:space="preserve">
          <source>A string representing the specified &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクトを表す文字列。</target>
        </trans-unit>
        <trans-unit id="b35316e186539e1e03a1985888302b2c59d358b8" translate="yes" xml:space="preserve">
          <source>A string representing the specified &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;オブジェクトを表す文字列。</target>
        </trans-unit>
        <trans-unit id="db046c0e034f78ea98d34e4760eeed28ae241d71" translate="yes" xml:space="preserve">
          <source>A string representing the time portion of the given &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance according to language-specific conventions.</source>
          <target state="translated">言語固有の規則に従って、指定された&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;インスタンスの時刻部分を表す文字列。</target>
        </trans-unit>
        <trans-unit id="61f9cb13ac776ca3611c0b60732436e06749eebe" translate="yes" xml:space="preserve">
          <source>A string representing the time portion of the given date in human readable form in American English.</source>
          <target state="translated">指定された日付の時間部分を、アメリカ英語で人間が読める形式で表す文字列。</target>
        </trans-unit>
        <trans-unit id="3f0dcfc8cc35afe6bb0ed02631a89116727bc9c4" translate="yes" xml:space="preserve">
          <source>A string representing the type of value to be stored in the table. At the moment this can only have a value of &lt;code&gt;&quot;anyfunc&quot;&lt;/code&gt; (functions).</source>
          <target state="translated">テーブルに格納される値のタイプを表す文字列。現時点では、これは &lt;code&gt;&quot;anyfunc&quot;&lt;/code&gt; （関数）の値のみを持つことができます。</target>
        </trans-unit>
        <trans-unit id="030d4e4fabacf5a3d7ad01b972f183ecff65034b" translate="yes" xml:space="preserve">
          <source>A string representing the value to search for.</source>
          <target state="translated">検索する値を表す文字列。</target>
        </trans-unit>
        <trans-unit id="48b62b6aa9e258b2815ec9128f214b6becbe0640" translate="yes" xml:space="preserve">
          <source>A string representing the value to search for. If &lt;code&gt;searchValue&lt;/code&gt; is an empty string, then &lt;code&gt;fromIndex&lt;/code&gt; is returned.</source>
          <target state="translated">検索する値を表す文字列。場合 &lt;code&gt;searchValue&lt;/code&gt; が空の文字列で、その後、 &lt;code&gt;fromIndex&lt;/code&gt; のが返されます。</target>
        </trans-unit>
        <trans-unit id="3ff1f8ff6ca06064eab0e4356c8d2a105d2d09ab" translate="yes" xml:space="preserve">
          <source>A string that contains the flags of the &lt;code&gt;RegExp&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; オブジェクトのフラグを含む文字列。</target>
        </trans-unit>
        <trans-unit id="8c48800076146dbe970f29dc9bf319cfdbded902" translate="yes" xml:space="preserve">
          <source>A string to be searched for within this string.</source>
          <target state="translated">この文字列の中で検索する文字列。</target>
        </trans-unit>
        <trans-unit id="8b24c133d1238ece438133be89a181d28dca5fe8" translate="yes" xml:space="preserve">
          <source>A string value used for the default description of an object. Used by &lt;a href=&quot;object/tostring&quot;&gt;&lt;code&gt;Object.prototype.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オブジェクトのデフォルトの説明に使用される文字列値。&lt;a href=&quot;object/tostring&quot;&gt; &lt;code&gt;Object.prototype.toString()&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="cfc08b80d01ebf250b441770b1bebd6b67e94014" translate="yes" xml:space="preserve">
          <source>A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the &lt;code&gt;locales&lt;/code&gt; argument, see the &lt;a href=&quot;../intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="translated">BCP 47言語タグを含む文字列、またはそのような文字列の配列。 &lt;code&gt;locales&lt;/code&gt; 引数の一般的な形式と解釈については、&lt;a href=&quot;../intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd1fda3a4fc0dc9e9f5a778e58cc41240c583e81" translate="yes" xml:space="preserve">
          <source>A string with a BCP 47 language tag, or an array of such strings. For the general form of the &lt;code&gt;locales&lt;/code&gt; argument, see the &lt;a href=&quot;../intl#Locale_identification_and_negotiation&quot;&gt;Intl page&lt;/a&gt;.</source>
          <target state="translated">BCP 47言語タグを含む文字列、またはそのような文字列の配列。 &lt;code&gt;locales&lt;/code&gt; 引数の一般的な形式については、&lt;a href=&quot;../intl#Locale_identification_and_negotiation&quot;&gt;Intlページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="04ec703ab3361b962aaf358db865119109228132" translate="yes" xml:space="preserve">
          <source>A string with a language-sensitive representation of the given number.</source>
          <target state="translated">指定された数値を言語に応じて表現した文字列。</target>
        </trans-unit>
        <trans-unit id="9540e4c01c9b518ddb013e0b730154a0bbb14fc8" translate="yes" xml:space="preserve">
          <source>A string with all array elements joined.</source>
          <target state="translated">すべての配列要素を結合した文字列。</target>
        </trans-unit>
        <trans-unit id="be6c9aeda83fe92c774caf7e86683ef417b1db55" translate="yes" xml:space="preserve">
          <source>A string with all array elements joined. If &lt;code&gt;&lt;em&gt;arr&lt;/em&gt;.length&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, the empty string is returned.</source>
          <target state="translated">すべての配列要素が結合された文字列。場合 &lt;code&gt;&lt;em&gt;arr&lt;/em&gt;.length&lt;/code&gt; ある &lt;code&gt;0&lt;/code&gt; 、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="3a4e7454db84038abc27af6304fc8e28d1349ecb" translate="yes" xml:space="preserve">
          <source>A switch statement first evaluates its expression. It then looks for the first &lt;code&gt;case&lt;/code&gt; clause whose expression evaluates to the same value as the result of the input expression (using the &lt;a href=&quot;../operators/comparison_operators&quot;&gt;strict comparison&lt;/a&gt;, &lt;code&gt;===&lt;/code&gt;) and transfers control to that clause, executing the associated statements. (If multiple cases match the provided value, the first case that matches is selected, even if the cases are not equal to each other.)</source>
          <target state="translated">switchステートメントは最初にその式を評価します。次に、式が入力式の結果と同じ値に評価される最初の &lt;code&gt;case&lt;/code&gt; 句を探し（&lt;a href=&quot;../operators/comparison_operators&quot;&gt;厳密な比較&lt;/a&gt;、 &lt;code&gt;===&lt;/code&gt; を使用）、その句に制御を移して、関連するステートメントを実行します。（複数のケースが指定された値と一致する場合、ケースが互いに等しくなくても、一致する最初のケースが選択されます。）</target>
        </trans-unit>
        <trans-unit id="02423ce5fb8b86d888d30d8d64bcf73a9af82d5c" translate="yes" xml:space="preserve">
          <source>A symbol containing property names to exclude from a &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; binding scope.</source>
          <target state="translated">プロパティ名を含むシンボルから除外する &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 範囲を結合します。</target>
        </trans-unit>
        <trans-unit id="37eb349389fccc1b0c1676c6b0a7744cf03a9c12" translate="yes" xml:space="preserve">
          <source>A symbol containing property names to exclude from a &lt;code&gt;&lt;a href=&quot;../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; binding scope.</source>
          <target state="translated">プロパティ名を含むシンボルから除外する &lt;code&gt;&lt;a href=&quot;../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 範囲を結合します。</target>
        </trans-unit>
        <trans-unit id="468bc722d85e2f6acf095f7491f98edd491f1ee7" translate="yes" xml:space="preserve">
          <source>A symbol that is stored globally.</source>
          <target state="translated">グローバルに保存されるシンボル。</target>
        </trans-unit>
        <trans-unit id="f714a352d072866d3fb308a4778400ba2c07a9d0" translate="yes" xml:space="preserve">
          <source>A target object to wrap with &lt;code&gt;Proxy&lt;/code&gt;. It can be any sort of object, including a native array, a function or even another proxy.</source>
          <target state="translated">&lt;code&gt;Proxy&lt;/code&gt; でラップするターゲットオブジェクト。ネイティブ配列、関数、または別のプロキシを含む、あらゆる種類のオブジェクトを使用できます。</target>
        </trans-unit>
        <trans-unit id="ca85face59c27157fe435bbdb6b7093a86e68119" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="79eab3aabd52f88978f67220e7bda2206962e0be" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="352d1375fd75c144e78cf196a0f04491e2fe9150" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;../object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../object/getownpropertysymbols&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../object/getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../object/getownpropertysymbols&quot;&gt; &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt; の&lt;/a&gt;トラップ。</target>
        </trans-unit>
        <trans-unit id="e9758c3b7b5478c4ddefcaaf78160de0dfedefbd" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;../object/getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../object/getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="5b1fd4a8eb9d4ddc23aa3162d2bcab35b3c110fa" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="08e4e941d26b8d998800802578dd7417b3ca1c74" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="da25e5e73af05bed88747f5aac3c15754a99faab" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="8e204fa2387a2c7372bf9ca5e595b8012bbf963d" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="a0edc28232e9b68e8c4f19d67b089473bf164015" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="27a8eece55c73898d2863967593b02efbf033598" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;object/getownpropertysymbols&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;object/getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;object/getownpropertysymbols&quot;&gt; &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt; の&lt;/a&gt;トラップ。</target>
        </trans-unit>
        <trans-unit id="9b69cd465eac589a6fdd89e2f9adfcb39e2e948c" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;object/getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;object/getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="a380a9832aa75b61c220704b8d533924aa31e11d" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="2d4a1dfdb9c96ff3bd17e42c78d835d472faa90d" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="3e88181b49d9bf7bab9df8d07b14a75d4bf8ffd7" translate="yes" xml:space="preserve">
          <source>A trap for &lt;a href=&quot;object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; &lt;/a&gt;のトラップ。</target>
        </trans-unit>
        <trans-unit id="4dd6e535c6f8e139282c480461a1caa98a498a12" translate="yes" xml:space="preserve">
          <source>A trap for a function call.</source>
          <target state="translated">関数呼び出しの罠。</target>
        </trans-unit>
        <trans-unit id="1a2ad834b888b660da429f550b49f77378b9d80a" translate="yes" xml:space="preserve">
          <source>A trap for getting property values.</source>
          <target state="translated">プロパティ値を取得するための罠。</target>
        </trans-unit>
        <trans-unit id="52f6f55d2bd80afee7ddc290daa3ef909f014f36" translate="yes" xml:space="preserve">
          <source>A trap for setting property values.</source>
          <target state="translated">プロパティ値を設定するための罠。</target>
        </trans-unit>
        <trans-unit id="c779c4d34b90d4c6e386ddb236ed9f256bdfd210" translate="yes" xml:space="preserve">
          <source>A trap for the &lt;a href=&quot;../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;a href=&quot;../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;演算子のトラップ。</target>
        </trans-unit>
        <trans-unit id="7728c929fd5bd7fba3e8a74fb6e4692b5d193946" translate="yes" xml:space="preserve">
          <source>A trap for the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子のトラップ。</target>
        </trans-unit>
        <trans-unit id="98a0e1ae38f5f24bd810829acf85618abf72a845" translate="yes" xml:space="preserve">
          <source>A trap for the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;オペレーターのトラップ。</target>
        </trans-unit>
        <trans-unit id="1febd86af2a203f90a11436c1a18e68c099d707e" translate="yes" xml:space="preserve">
          <source>A trap for the &lt;a href=&quot;../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;a href=&quot;../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;演算子のトラップ。</target>
        </trans-unit>
        <trans-unit id="7cea200be4a9c2b8f1c9cc9bbcccfda58d1074d3" translate="yes" xml:space="preserve">
          <source>A trap for the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子のトラップ。</target>
        </trans-unit>
        <trans-unit id="8654b706fa6b9af0ed7032618303a93a642cf06b" translate="yes" xml:space="preserve">
          <source>A trap for the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;オペレーターのトラップ。</target>
        </trans-unit>
        <trans-unit id="a69c5ae1758c60cb2ef6ec31a59400ca878c1428" translate="yes" xml:space="preserve">
          <source>A typical way of creating a subclass is to define the subclass, set its prototype to an instance of the superclass, and then define properties on that instance. This can get awkward especially for getters and setters. Instead, you can use this code to set the prototype:</source>
          <target state="translated">典型的なサブクラスの作成方法は、サブクラスを定義し、そのプロトタイプをスーパークラスのインスタンスに設定し、そのインスタンスにプロパティを定義することです。これは特にゲッターとセッターの場合は厄介です。代わりに、以下のコードを使用してプロトタイプを設定することができます。</target>
        </trans-unit>
        <trans-unit id="6c2991084e6569f2ed88f6e399acf601ae83c1a5" translate="yes" xml:space="preserve">
          <source>A typo in the function name</source>
          <target state="translated">関数名のタイプミス</target>
        </trans-unit>
        <trans-unit id="3d0ce29170ec5349f499b1bce1c4c9e236da391a" translate="yes" xml:space="preserve">
          <source>A unary operation is operation with only one operand.</source>
          <target state="translated">単項演算とは、オペランドが1つしかない演算のことです。</target>
        </trans-unit>
        <trans-unit id="d7669d85b1f450361ac91fc523c430ae2974bb01" translate="yes" xml:space="preserve">
          <source>A use of &lt;code&gt;arguments.callee&lt;/code&gt; with no good alternative</source>
          <target state="translated">良い代替手段のない &lt;code&gt;arguments.callee&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="65c6cda8f8472b4358be95653eeaab24da63771b" translate="yes" xml:space="preserve">
          <source>A valid property descriptor object might look like this:</source>
          <target state="translated">有効なプロパティ記述子オブジェクトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c3aa9c025eda639e03b29c469fd28461ee4a9efc" translate="yes" xml:space="preserve">
          <source>A value has been assigned to an undeclared variable. In other words, there was an assignment without the var keyword. There are some differences between declared and undeclared variables, which might lead to unexpected results and that's why JavaScript presents an error in strict mode.</source>
          <target state="translated">値が宣言されていない変数に代入されました。言い換えれば、var キーワードなしの代入があったということです。宣言された変数と未宣言の変数にはいくつかの違いがあり、それが予期せぬ結果をもたらす可能性があり、それがJavaScriptが厳密モードでエラーを提示する理由です。</target>
        </trans-unit>
        <trans-unit id="7aa2030027d9d974ffa76da27911686f24263fee" translate="yes" xml:space="preserve">
          <source>A value in the array if an element passes the test; otherwise, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要素がテストに合格した場合の配列の値。それ以外の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0a283d93356f400d76dfe3bca82f82577b120c85" translate="yes" xml:space="preserve">
          <source>A variable can be assigned a default, in the case that the value unpacked from the array is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">配列からアンパックされた値が &lt;code&gt;undefined&lt;/code&gt; である場合、変数にデフォルトを割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="90b0625816e4bdec40f6e6bc2f1aa97d5d2e44a9" translate="yes" xml:space="preserve">
          <source>A variable can be assigned a default, in the case that the value unpacked from the object is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">オブジェクトからアンパックされた値が &lt;code&gt;undefined&lt;/code&gt; である場合、変数にデフォルトを割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="de639cf85e7f18e2d70873594c11082ac458b0cb" translate="yes" xml:space="preserve">
          <source>A variable can be assigned its value via destructuring separate from the variable's declaration.</source>
          <target state="translated">変数の宣言とは別に、デストラクチャリングによって変数の値を代入することができます。</target>
        </trans-unit>
        <trans-unit id="cd63eedf5f9a239ec856355af38580e43b4e42b7" translate="yes" xml:space="preserve">
          <source>A variable can be assigned its value with destructuring separate from its declaration.</source>
          <target state="translated">変数には、宣言とは別にデストラクチャリングで値を代入することができます。</target>
        </trans-unit>
        <trans-unit id="5491aecbb4c5aaf727cda68822d865466815a1b8" translate="yes" xml:space="preserve">
          <source>A variable is missing a name. This is likely due to a syntax error in your code. Probably a comma is wrong somewhere or you struggled with coming up with a name. Totally understandable! Naming things is so hard.</source>
          <target state="translated">変数に名前がありません。これは、コードの構文エラーが原因である可能性が高いです。おそらくカンマがどこかで間違っているか、名前をつけるのに苦労しているのでしょう。まったくもって理解できます。物事に名前をつけるのはとても難しいです。</target>
        </trans-unit>
        <trans-unit id="1b060c9344e9b5bc650248ac5ff1dfc17c0e70ac" translate="yes" xml:space="preserve">
          <source>A variable needs to be available in the current context of execution. Variables defined inside a &lt;a href=&quot;../functions&quot;&gt;function&lt;/a&gt; cannot be accessed from anywhere outside the function, because the variable is defined only in the scope of the function</source>
          <target state="translated">変数は、実行の現在のコンテキストで使用できる必要があります。&lt;a href=&quot;../functions&quot;&gt;関数&lt;/a&gt;内で定義された変数は、関数のスコープ内でのみ定義されるため、関数の外部からはアクセスできません。</target>
        </trans-unit>
        <trans-unit id="1a701b5ba9e24b2d5d6ecd8f6bb4daf2b6958bb6" translate="yes" xml:space="preserve">
          <source>A variable that has not been assigned a value is of type undefined. A method or statement also returns &lt;code&gt;undefined&lt;/code&gt; if the variable that is being evaluated does not have an assigned value. A function returns &lt;code&gt;undefined&lt;/code&gt; if a value was not &lt;a href=&quot;../statements/return&quot;&gt;&lt;code&gt;returned&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値が割り当てられていない変数のタイプは未定義です。評価される変数に値が割り当てられていない場合も、メソッドまたはステートメントは &lt;code&gt;undefined&lt;/code&gt; を返します。値が&lt;a href=&quot;../statements/return&quot;&gt; &lt;code&gt;returned&lt;/code&gt; &lt;/a&gt;れなかった場合、関数は &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c2e71e7b83c180f05766211460b6c2813e8f3c2c" translate="yes" xml:space="preserve">
          <source>A warning that a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; occurred. JavaScript execution won't be halted.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;が発生したという警告。JavaScriptの実行は停止されません。</target>
        </trans-unit>
        <trans-unit id="99744caee1d8cf688028147e8f13bf4215490db3" translate="yes" xml:space="preserve">
          <source>A warning. JavaScript execution won't be halted.</source>
          <target state="translated">警告です。JavaScriptの実行は停止しません。</target>
        </trans-unit>
        <trans-unit id="e5c736c5bbec75ae99418480a199602066f656a9" translate="yes" xml:space="preserve">
          <source>A wasm module is comprised of a sequence of &lt;strong&gt;sections&lt;/strong&gt;. Most of these sections are fully specified and validated by the wasm spec, but modules can also contain &lt;strong&gt;custom sections&lt;/strong&gt; that are ignored and skipped over during validation. (Read &lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#high-level-structure&quot;&gt;High level structure&lt;/a&gt; for information on section structures, and how normal sections (&quot;known sections&quot;) and custom sections are distinguished.)</source>
          <target state="translated">wasmモジュールは、一連の&lt;strong&gt;セクションで&lt;/strong&gt;構成されてい&lt;strong&gt;ます&lt;/strong&gt;。これらのセクションのほとんどはwasm仕様によって完全に指定および検証されますが、モジュールは、検証中に無視されてスキップされる&lt;strong&gt;カスタムセクション&lt;/strong&gt;を含むこともできます。（セクション構造、および通常のセクション（「既知のセクション」）とカスタムセクションの区別方法については、&lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#high-level-structure&quot;&gt;高レベルの構造&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="4aa4697b07a8611e189489ab6199d641cd76a747" translate="yes" xml:space="preserve">
          <source>A writing thread stores a new value and notifies the waiting thread once it has written:</source>
          <target state="translated">書き込みスレッドは新しい値を格納し、書き込みが完了すると待機スレッドに通知します。</target>
        </trans-unit>
        <trans-unit id="4cbabdffbd1bab0cae3fc1a0019839f4544586ac" translate="yes" xml:space="preserve">
          <source>A writing thread stores a new value and wakes up the waiting thread once it has written:</source>
          <target state="translated">書き込みスレッドは新しい値を格納し、書き込みが完了すると待機スレッドをウェイクアップします。</target>
        </trans-unit>
        <trans-unit id="1f654f3786d387f1f667073d19e8d50ab6c1f52e" translate="yes" xml:space="preserve">
          <source>A zero arguments function that returns an object with at least the following two properties:</source>
          <target state="translated">少なくとも以下の2つのプロパティを持つオブジェクトを返すゼロ引数関数。</target>
        </trans-unit>
        <trans-unit id="5d928152252c91fba65904f459694ecdebac2687" translate="yes" xml:space="preserve">
          <source>A zero arguments function that returns an object, conforming to the &lt;a href=&quot;#The_iterator_protocol&quot;&gt;iterator protocol&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#The_iterator_protocol&quot;&gt;反復子プロトコルに&lt;/a&gt;準拠したオブジェクトを返すゼロ引数関数。</target>
        </trans-unit>
        <trans-unit id="a75dcd16586fb5f6c8c69b71a7481aad1b6a67e8" translate="yes" xml:space="preserve">
          <source>A&lt;strong&gt; BF&lt;/strong&gt; has the following internal properties:</source>
          <target state="translated">&lt;strong&gt;BFは&lt;/strong&gt;、以下の内部プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="49878dce2f16a74d7033987811c35e5b95550873" translate="yes" xml:space="preserve">
          <source>A&lt;strong&gt; block statement&lt;/strong&gt; (or &lt;strong&gt;compound statement&lt;/strong&gt; in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be &lt;a href=&quot;label&quot;&gt;&lt;code&gt;labelled&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;strong&gt;ブロック文&lt;/strong&gt;（または&lt;strong&gt;化合物ステートメント&lt;/strong&gt;他の言語）は、グループゼロ個以上のステートメントに使用されます。ブロックは中括弧のペアで区切られ、オプションで&lt;a href=&quot;label&quot;&gt; &lt;code&gt;labelled&lt;/code&gt; &lt;/a&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="ee015445526035af29c93b90202949b4587400d7" translate="yes" xml:space="preserve">
          <source>APIs accepting &lt;code&gt;SharedArrayBuffer&lt;/code&gt; objects</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクトを受け入れるAPI</target>
        </trans-unit>
        <trans-unit id="cd437865cbac7655f8b86519aea764f378093804" translate="yes" xml:space="preserve">
          <source>Abbreviation</source>
          <target state="translated">Abbreviation</target>
        </trans-unit>
        <trans-unit id="6b21fb791ac05170893860c248401cd24a59b732" translate="yes" xml:space="preserve">
          <source>About</source>
          <target state="translated">About</target>
        </trans-unit>
        <trans-unit id="7886ac36df688ed13a786b2bb5bd2ba298c50a1a" translate="yes" xml:space="preserve">
          <source>About functions</source>
          <target state="translated">機能について</target>
        </trans-unit>
        <trans-unit id="1b83b79a48463cd6711e8e01351644b0ad5e88de" translate="yes" xml:space="preserve">
          <source>About the stability of the algorithm used by V8 engine</source>
          <target state="translated">V8エンジンで使用するアルゴリズムの安定性について</target>
        </trans-unit>
        <trans-unit id="0106715cf835b611d90eb91937826ff982f2dcf2" translate="yes" xml:space="preserve">
          <source>Abstract subclasses or &lt;em&gt;mix-ins&lt;/em&gt; are templates for classes. An ECMAScript class can only have a single superclass, so multiple inheritance from tooling classes, for example, is not possible. The functionality must be provided by the superclass.</source>
          <target state="translated">抽象サブクラスまたは&lt;em&gt;ミックスイン&lt;/em&gt;は、クラスのテンプレートです。ECMAScriptクラスは単一のスーパークラスしか持つことができないため、たとえばツールクラスからの複数の継承は不可能です。機能はスーパークラスによって提供される必要があります。</target>
        </trans-unit>
        <trans-unit id="3937ab6a9745e6450cbda489364a520653416591" translate="yes" xml:space="preserve">
          <source>Accepts the same parameters as the longest form of the constructor (i.e. 2 to 7) and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</source>
          <target state="translated">コンストラクタの最長形式 (2 から 7)と同じパラメータを受け取り、1970 年 1 月 1 日 00:00:00 UTC からのミリ秒数を返します。</target>
        </trans-unit>
        <trans-unit id="64c2fdaf0d7d7c4b1a130edea5168f8bf4acc6fd" translate="yes" xml:space="preserve">
          <source>Accessing &lt;code&gt;arguments.callee&lt;/code&gt;, &lt;code&gt;arguments.caller&lt;/code&gt;, &lt;code&gt;anyFunction.caller&lt;/code&gt;, or &lt;code&gt;anyFunction.arguments&lt;/code&gt; throws an error in strict mode. The only legitimate use case would be to reuse a function as in:</source>
          <target state="translated">&lt;code&gt;arguments.callee&lt;/code&gt; 、 &lt;code&gt;arguments.caller&lt;/code&gt; 、 &lt;code&gt;anyFunction.caller&lt;/code&gt; 、または &lt;code&gt;anyFunction.arguments&lt;/code&gt; にアクセスすると、strictモードでエラーがスローされます。正当なユースケースは、次のように関数を再利用することだけです。</target>
        </trans-unit>
        <trans-unit id="824a6b7e82da608ad646aa497bfb65acd8b51615" translate="yes" xml:space="preserve">
          <source>Accessing array elements</source>
          <target state="translated">配列要素へのアクセス</target>
        </trans-unit>
        <trans-unit id="f4fd2f3b1b3cdcb020eafc4382f368f8a830f384" translate="yes" xml:space="preserve">
          <source>Accessing member properties</source>
          <target state="translated">メンバーのプロパティへのアクセス</target>
        </trans-unit>
        <trans-unit id="90d1447dd9b06b8c521f2215a9bb4355c02cffef" translate="yes" xml:space="preserve">
          <source>Accessing properties</source>
          <target state="translated">プロパティへのアクセス</target>
        </trans-unit>
        <trans-unit id="6867f0cae96b79e846c62315ef900c88de7d2a6e" translate="yes" xml:space="preserve">
          <source>Accessor function &amp;mdash; gets a reference stored at a given index.</source>
          <target state="translated">アクセサ関数&amp;mdash;指定されたインデックスに格納されている参照を取得します。</target>
        </trans-unit>
        <trans-unit id="ade5bed3fb09f083a64d835c6b9ecf57df10652c" translate="yes" xml:space="preserve">
          <source>Accessor function &amp;mdash; gets the element stored at a given index.</source>
          <target state="translated">アクセサ関数&amp;mdash;指定されたインデックスに格納されている要素を取得します。</target>
        </trans-unit>
        <trans-unit id="de8cfb885ac1a5a0e5b7e1f0d2484547278be5e3" translate="yes" xml:space="preserve">
          <source>Accessor methods</source>
          <target state="translated">アクセス方法</target>
        </trans-unit>
        <trans-unit id="ef6278157dee40276c5c781db7fadee935415924" translate="yes" xml:space="preserve">
          <source>According to this &lt;a href=&quot;https://jsperf.com/concat-vs-plus-vs-join&quot;&gt;performance test&lt;/a&gt;, the &lt;a href=&quot;../../operators/assignment_operators&quot;&gt;assignment operators&lt;/a&gt; are several times faster.</source>
          <target state="translated">この&lt;a href=&quot;https://jsperf.com/concat-vs-plus-vs-join&quot;&gt;パフォーマンステストに&lt;/a&gt;よると、&lt;a href=&quot;../../operators/assignment_operators&quot;&gt;代入演算子&lt;/a&gt;は数倍高速です。</target>
        </trans-unit>
        <trans-unit id="50877128d69d59f89659d1e25a6b10ddb9053f08" translate="yes" xml:space="preserve">
          <source>Accumulator (acc)</source>
          <target state="translated">アキュムレータ(acc)</target>
        </trans-unit>
        <trans-unit id="62e19ea87b1293ece74c3e4fee0220843ffdab91" translate="yes" xml:space="preserve">
          <source>Add the missing quote for &lt;code&gt;&lt;strong&gt;'&lt;/strong&gt;#333'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;'&lt;/strong&gt;#333'&lt;/code&gt; の欠落している引用を追加します。</target>
        </trans-unit>
        <trans-unit id="be466766a475ae99956857e8ded4b641203d4b64" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;https://github.com/rwaldron/exponentiation-operator&quot;&gt;Exponentiation operator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rwaldron/exponentiation-operator&quot;&gt;指数演算子を&lt;/a&gt;追加しました。</target>
        </trans-unit>
        <trans-unit id="081033e37447cd5c8275074df2111507c50bba4d" translate="yes" xml:space="preserve">
          <source>Added &lt;code&gt;flags&lt;/code&gt;, &lt;code&gt;sticky&lt;/code&gt; and &lt;code&gt;unicode&lt;/code&gt; properties.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 、 &lt;code&gt;sticky&lt;/code&gt; 、および &lt;code&gt;unicode&lt;/code&gt; プロパティを追加しました。</target>
        </trans-unit>
        <trans-unit id="03edf84fdf4ff936001433aef81408483109d06e" translate="yes" xml:space="preserve">
          <source>Added Intl.getCanonicalLocales in the 4th edition.</source>
          <target state="translated">第4版にIntl.getCanonicalLocalesを追加しました。</target>
        </trans-unit>
        <trans-unit id="6198579f91f6ebf0e39f9c05ac3c0fdd323f6f46" translate="yes" xml:space="preserve">
          <source>Added Object.assign, Object.getOwnPropertySymbols, Object.setPrototypeOf, Object.is</source>
          <target state="translated">Object.assign、Object.getOwnPropertySymbols、Object.setPrototypeOf、Object.isを追加しました。</target>
        </trans-unit>
        <trans-unit id="565c28277f8ab4aa36c6befbda0b5ffe98901ba6" translate="yes" xml:space="preserve">
          <source>Added Object.entries, Object.values and Object.getOwnPropertyDescriptors.</source>
          <target state="translated">Object.entry、Object.value、Object.getOwnPropertyDescriptorsを追加しました。</target>
        </trans-unit>
        <trans-unit id="acc641a6a63fdaa9095940bfc4092e77317cd4de" translate="yes" xml:space="preserve">
          <source>Added computed property names.</source>
          <target state="translated">計算されたプロパティ名を追加しました。</target>
        </trans-unit>
        <trans-unit id="04ac351a37ff69d1126505d24be9022c7f9095fa" translate="yes" xml:space="preserve">
          <source>Added definition for escaping behavior and &quot;(?:)&quot; for empty regular expressions.</source>
          <target state="translated">エスケープ動作の定義と、空の正規表現に対する&quot;(?:)の定義を追加しました。</target>
        </trans-unit>
        <trans-unit id="8fe86aba93bfcf5da4cc9423895c7511abe20830" translate="yes" xml:space="preserve">
          <source>Added more specific requirements for the string representation.</source>
          <target state="translated">文字列表現について、より具体的な要件を追加しました。</target>
        </trans-unit>
        <trans-unit id="e47e350e79384f15ad0903691d895fcc672cc4aa" translate="yes" xml:space="preserve">
          <source>Added the &lt;code&gt;copyWithin()&lt;/code&gt;, &lt;code&gt;fill()&lt;/code&gt;, &lt;code&gt;entries()&lt;/code&gt;, &lt;code&gt;keys()&lt;/code&gt;, &lt;code&gt;values()&lt;/code&gt;, &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;findIndex()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;copyWithin()&lt;/code&gt; 、 &lt;code&gt;fill()&lt;/code&gt; 、 &lt;code&gt;entries()&lt;/code&gt; 、 &lt;code&gt;keys()&lt;/code&gt; 、 &lt;code&gt;values()&lt;/code&gt; 、 &lt;code&gt;find()&lt;/code&gt; 、 &lt;code&gt;findIndex()&lt;/code&gt; メソッドを追加しました。</target>
        </trans-unit>
        <trans-unit id="ff7e52004e25fccb0871c726ae07f6e3411d165c" translate="yes" xml:space="preserve">
          <source>Added the &lt;code&gt;includes()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; メソッドを追加しました。</target>
        </trans-unit>
        <trans-unit id="a699dee10b3262c22ca39a65e377e4bbfd7c4bff" translate="yes" xml:space="preserve">
          <source>Added: Binary and Octal Numeric literals, Unicode code point escapes, Templates</source>
          <target state="translated">追加:2進数と8進数リテラル、Unicodeコードポイントエスケープ、テンプレート</target>
        </trans-unit>
        <trans-unit id="8ddce2a6ecdbbe64c867534f006a7dc2eb9c5275" translate="yes" xml:space="preserve">
          <source>Adding a constant value</source>
          <target state="translated">定数値の追加</target>
        </trans-unit>
        <trans-unit id="5e011f6d2c921b5a7434b91375a3527384e167c0" translate="yes" xml:space="preserve">
          <source>Adding elements to an array</source>
          <target state="translated">配列に要素を追加する</target>
        </trans-unit>
        <trans-unit id="28d00bdf6d557f92fe07f66cf6334c2ed6adfdd5" translate="yes" xml:space="preserve">
          <source>Adding properties and default values</source>
          <target state="translated">プロパティとデフォルト値の追加</target>
        </trans-unit>
        <trans-unit id="3bebabe6f8df15e6124145d881a13fe674a1c2b5" translate="yes" xml:space="preserve">
          <source>Adding the missing object-method by using the standard-objectas new object's prototype does not work either:</source>
          <target state="translated">標準オブジェクトの新しいオブジェクトのプロトタイプを使用して、欠落しているオブジェクトメソッドを追加しても動作しません。</target>
        </trans-unit>
        <trans-unit id="5a44cd7495b7d1e4d2ae6a89ccde2d33b55c69d0" translate="yes" xml:space="preserve">
          <source>Adding the missing object-method directly from the standard-object does NOT work:</source>
          <target state="translated">欠けているobject-methodを標準オブジェクトから直接追加してもうまくいきません。</target>
        </trans-unit>
        <trans-unit id="d0fedff1bfb8c8c51e933f04bb5e7ca7abe77aa1" translate="yes" xml:space="preserve">
          <source>Adding the missing object-method directly to new object's &quot;prototype&quot; does not work either, since new object does not have a real prototype (which is really the cause of ALL these problems) and one cannot be &lt;strong&gt;directly&lt;/strong&gt; added:</source>
          <target state="translated">欠落しているオブジェクトメソッドを新しいオブジェクトの「プロトタイプ」に&lt;strong&gt;直接&lt;/strong&gt;追加することもできません。新しいオブジェクトには実際のプロトタイプがなく（これが実際にこれらすべての問題の原因です）、&lt;strong&gt;直接&lt;/strong&gt;追加することはできません。</target>
        </trans-unit>
        <trans-unit id="8e8428e85c661f03dd33db8f12b20a010ab5be5e" translate="yes" xml:space="preserve">
          <source>Addition</source>
          <target state="translated">Addition</target>
        </trans-unit>
        <trans-unit id="2b3085ab4111799609b3d1b2ae064d441e5dc2b4" translate="yes" xml:space="preserve">
          <source>Addition (+)</source>
          <target state="translated">追加 (+)</target>
        </trans-unit>
        <trans-unit id="b06ee1a3cd7c4bb384bc0c22bec9a026b58008c8" translate="yes" xml:space="preserve">
          <source>Addition (&lt;code&gt;+&lt;/code&gt;)</source>
          <target state="translated">加算（ &lt;code&gt;+&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="c8217392646c4b940c031f95cbb65a4bfa731556" translate="yes" xml:space="preserve">
          <source>Addition assignment</source>
          <target state="translated">追加課題</target>
        </trans-unit>
        <trans-unit id="2197493642f65b3bdf38cf7c3658b6188942d641" translate="yes" xml:space="preserve">
          <source>Addition assignment (&lt;code&gt;x += y&lt;/code&gt;)</source>
          <target state="translated">加算割り当て（ &lt;code&gt;x += y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7cd34bf7acae990dca0b859d97d34f0f52815b8c" translate="yes" xml:space="preserve">
          <source>Addition assignment.</source>
          <target state="translated">追加課題。</target>
        </trans-unit>
        <trans-unit id="f74e0ac9ed8d7f7a1030f46628e0a04f3905aadc" translate="yes" xml:space="preserve">
          <source>Addition operator.</source>
          <target state="translated">加算演算子。</target>
        </trans-unit>
        <trans-unit id="f7dbbdb06bc5b7af48f53c6973901edba4fed30f" translate="yes" xml:space="preserve">
          <source>Additional &lt;code&gt;Object.defineProperty&lt;/code&gt; examples</source>
          <target state="translated">追加の &lt;code&gt;Object.defineProperty&lt;/code&gt; の例</target>
        </trans-unit>
        <trans-unit id="911a0b354b810ade1b41221cd419095a4767144e" translate="yes" xml:space="preserve">
          <source>Additional information</source>
          <target state="translated">追加情報</target>
        </trans-unit>
        <trans-unit id="be908ec79718378d45598abccb61f8210ba488f3" translate="yes" xml:space="preserve">
          <source>Additional reference pages</source>
          <target state="translated">追加の参考ページ</target>
        </trans-unit>
        <trans-unit id="852c24fb4a79414daaa05219e1717dabb5052630" translate="yes" xml:space="preserve">
          <source>Additionally, modern javascript interpreters convert javascript to machine code. This means that any concept of variable naming gets obliterated. Thus, any use of eval will force the browser to do long expensive variable name lookups to figure out where the variable exists in the machine code and set it's value. Additonally, new things can be introduced to that variable through &lt;code&gt;eval()&lt;/code&gt; such as changing the type of that variable, forcing the browser to reevaluate all of the generated machine code to compensate. However, there (thankfully) exists a very good alternative to eval: simply using &lt;a href=&quot;function&quot;&gt;window.Function&lt;/a&gt;. As an example of how you convert code using evil &lt;code&gt;eval()&lt;/code&gt; to using &lt;code&gt;Function&lt;/code&gt;&lt;code&gt;()&lt;/code&gt;, see below.</source>
          <target state="translated">さらに、最新のJavaScriptインタープリターはJavaScriptをマシンコードに変換します。これは、変数の命名の概念がすべてなくなることを意味します。したがって、evalを使用すると、ブラウザーは負荷の高い変数名のルックアップを実行して、変数がマシンコードのどこに存在するかを突き止め、その値を設定します。さらに、変数の型を変更するなど、 &lt;code&gt;eval()&lt;/code&gt; を介してその変数に新しいものを導入し、ブラウザーに生成されたすべてのマシンコードを再評価させて補正することができます。ただし、（ありがたいことに）evalの非常に優れた代替手段が存在し&lt;a href=&quot;function&quot;&gt;ます&lt;/a&gt;。単にwindow.Functionを使用することです。 evil &lt;code&gt;eval()&lt;/code&gt; を使用してコードを &lt;code&gt;Function&lt;/code&gt; &lt;code&gt;()&lt;/code&gt; に変換する方法の例として、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8053ee0e50e553070719c314d845c016311d928" translate="yes" xml:space="preserve">
          <source>Additionally, the literals &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; cannot be used as identifiers in ECMAScript.</source>
          <target state="translated">さらに、リテラル &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; 、および &lt;code&gt;false&lt;/code&gt; は、ECMAScriptの識別子として使用できません。</target>
        </trans-unit>
        <trans-unit id="fcbcb3a77e9537f438a0efbbd0e5cbe719ffc2a1" translate="yes" xml:space="preserve">
          <source>Additions to the ECMAScript core for language-sensitive functionalities.</source>
          <target state="translated">言語に依存した機能のためのECMAScriptコアへの追加。</target>
        </trans-unit>
        <trans-unit id="4759351ba4b9fbdd878a8502549bdde6e6923394" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; operators. Implemented in JavaScript 1.3</source>
          <target state="translated">&lt;code&gt;===&lt;/code&gt; および &lt;code&gt;!==&lt;/code&gt; 演算子を追加します。JavaScript 1.3で実装</target>
        </trans-unit>
        <trans-unit id="5ad7711e1148d74b0574ef7c2c37d9dd45ad4aaf" translate="yes" xml:space="preserve">
          <source>Adds a watchpoint to a property of the object.</source>
          <target state="translated">オブジェクトのプロパティにウォッチポイントを追加します。</target>
        </trans-unit>
        <trans-unit id="657731d749e2d6a9de60168f33a23f9ddd368b65" translate="yes" xml:space="preserve">
          <source>Adds and/or removes elements from an array.</source>
          <target state="translated">配列の要素を追加または削除します.</target>
        </trans-unit>
        <trans-unit id="a18c0515b1e699cb7c620dcd2adef158b3ef3b8b" translate="yes" xml:space="preserve">
          <source>Adds one or more elements to the end of an array and returns the new length of the array.</source>
          <target state="translated">配列の末尾に1つ以上の要素を追加し、配列の新しい長さを返します。</target>
        </trans-unit>
        <trans-unit id="f61ad7270a14415923e0081811abfc1f769cd27c" translate="yes" xml:space="preserve">
          <source>Adds one or more elements to the front of an array and returns the new length of the array.</source>
          <target state="translated">配列の先頭に1つ以上の要素を追加し、配列の新しい長さを返します。</target>
        </trans-unit>
        <trans-unit id="8b83e6e18d048c7488a23f2caaef73b9035ab330" translate="yes" xml:space="preserve">
          <source>Adds the given expression to the scope chain used when evaluating the statement. The parentheses around the expression are required.</source>
          <target state="translated">指定した式を、文を評価する際に使用するスコープチェインに追加します。式の周りの括弧は必須です。</target>
        </trans-unit>
        <trans-unit id="bf12230e6a49b89bccaf853c9216a46d38756e70" translate="yes" xml:space="preserve">
          <source>Adds the named properties described by the given descriptors to an object.</source>
          <target state="translated">与えられたディスクリプタによって記述された名前付きプロパティをオブジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="fe84fd43eeafd8f05fa1e59828812e7eb63265a5" translate="yes" xml:space="preserve">
          <source>Adds the named property described by a given descriptor to an object.</source>
          <target state="translated">指定された記述子によって記述された名前付きプロパティをオブジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="bdb5a2a4ee884959b1358bbd357d218e98ec277a" translate="yes" xml:space="preserve">
          <source>Adds the provided value to the existing value at the specified index of the array. Returns the old value at that index.</source>
          <target state="translated">指定したインデックスの既存の値に、指定した値を追加します。そのインデックスの古い値を返します。</target>
        </trans-unit>
        <trans-unit id="000686381772b360b63718c19087e068cf26960a" translate="yes" xml:space="preserve">
          <source>Admittedly the wording in the error message is slightly strange. &quot;Formal parameter&quot; is a fancy way of saying &quot;function argument&quot;. And we use the word &quot;malformed&quot; because all Firefox engineers are huge fans of 19th-century Gothic horror novels.</source>
          <target state="translated">確かに、エラーメッセージの文言が少しおかしいですね。&quot;Formal parameter&quot; は &quot;function argument&quot; の言い回しです。そして、Firefox のエンジニアはみんな 19 世紀のゴシックホラー小説の大ファンだから、&quot;malformed&quot; という言葉を使っています。</target>
        </trans-unit>
        <trans-unit id="66931511954ef5ba588177fe993eecfba55f8306" translate="yes" xml:space="preserve">
          <source>Advanced Example</source>
          <target state="translated">高度な例</target>
        </trans-unit>
        <trans-unit id="fd594fc50ea0d0145d9eb66000d129d1ca222693" translate="yes" xml:space="preserve">
          <source>Advanced syntax</source>
          <target state="translated">高度な構文</target>
        </trans-unit>
        <trans-unit id="ca966786da2f248e896d291e87c5ffa79dcb8e20" translate="yes" xml:space="preserve">
          <source>After completing the third pass, the condition &lt;code&gt;n&lt;/code&gt; &amp;lt; 3 is no longer true, so the loop terminates.</source>
          <target state="translated">3番目のパスを完了すると、条件 &lt;code&gt;n&lt;/code&gt; &amp;lt;3は真ではなくなり、ループは終了します。</target>
        </trans-unit>
        <trans-unit id="24afd16cb86cfb1a82a3c2149fe1b3cef4992c68" translate="yes" xml:space="preserve">
          <source>After fetching some WebAssembly bytecode using fetch, we compile and instantiate the module using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; function, importing a JavaScript function into the WebAssembly Module in the process. We then call an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly function&lt;/a&gt; that is exported by the &lt;code&gt;Instance&lt;/code&gt;.</source>
          <target state="translated">fetchを使用してWebAssemblyバイトコードをフェッチした後、&lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;関数を使用してモジュールをコンパイルおよびインスタンス化し、プロセスのJavaScript関数をWebAssemblyモジュールにインポートします。次に、 &lt;code&gt;Instance&lt;/code&gt; によってエクスポートされる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly関数&lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="d8663f20224c8efc2c6ecb4d69de68214261ca31" translate="yes" xml:space="preserve">
          <source>After fetching some WebAssembly bytecode using fetch, we compile and instantiate the module using the &lt;a href=&quot;instantiate&quot;&gt;&lt;code&gt;WebAssembly.instantiate()&lt;/code&gt;&lt;/a&gt; function, importing a JavaScript function into the WebAssembly Module in the process. We then call an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly function&lt;/a&gt; that is exported by the &lt;code&gt;Instance&lt;/code&gt;.</source>
          <target state="translated">フェッチを使用していくつかのWebAssemblyバイトコードをフェッチした後、&lt;a href=&quot;instantiate&quot;&gt; &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; &lt;/a&gt;関数を使用してモジュールをコンパイルおよびインスタンス化し、プロセスのJavaScript関数をWebAssemblyモジュールにインポートします。次に、 &lt;code&gt;Instance&lt;/code&gt; によってエクスポートされる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly関数&lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a8d3778312e67a0dbf038e761562279b877500cc" translate="yes" xml:space="preserve">
          <source>After the first pass: &lt;code&gt;n&lt;/code&gt; = 1 and &lt;code&gt;x&lt;/code&gt; = 1</source>
          <target state="translated">最初のパスの後： &lt;code&gt;n&lt;/code&gt; = 1および &lt;code&gt;x&lt;/code&gt; = 1</target>
        </trans-unit>
        <trans-unit id="12a12943aaf89ee22083f3f484cff84a2064bc3b" translate="yes" xml:space="preserve">
          <source>After the second pass: &lt;code&gt;n&lt;/code&gt; = 2 and &lt;code&gt;x&lt;/code&gt; = 3</source>
          <target state="translated">2回目のパスの後： &lt;code&gt;n&lt;/code&gt; = 2および &lt;code&gt;x&lt;/code&gt; = 3</target>
        </trans-unit>
        <trans-unit id="c6e80ccbd220312b22d98f0367fdf7c0ae2d26a5" translate="yes" xml:space="preserve">
          <source>After the third pass: &lt;code&gt;n&lt;/code&gt; = 3 and &lt;code&gt;x&lt;/code&gt; = 6</source>
          <target state="translated">3回目のパスの後： &lt;code&gt;n&lt;/code&gt; = 3および &lt;code&gt;x&lt;/code&gt; = 6</target>
        </trans-unit>
        <trans-unit id="e9dfdd5f79f94c7a0ae608406de5ef5f9ef9983d" translate="yes" xml:space="preserve">
          <source>Again, adding the missing object-method directly from the &lt;strong&gt;standard-object &lt;/strong&gt;does NOT work. However, adding the &lt;strong&gt;generic&lt;/strong&gt; method directly, DOES:</source>
          <target state="translated">繰り返しますが、不足しているオブジェクトメソッドを&lt;strong&gt;標準オブジェクト&lt;/strong&gt;から直接追加しても機能しません。ただし、&lt;strong&gt;ジェネリック&lt;/strong&gt;メソッドを直接追加すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="5ffa625a3f6e38f230794c1057ba393d92a61974" translate="yes" xml:space="preserve">
          <source>Again, note that this implementation aims for absolute compatibility with &lt;code&gt;lastIndexOf&lt;/code&gt; in Firefox and the SpiderMonkey JavaScript engine, including in several cases which are arguably edge cases. If you intend to use this in real-world applications, you may be able to calculate &lt;code&gt;from&lt;/code&gt; with less complicated code if you ignore those cases.</source>
          <target state="translated">繰り返しますが、この実装は、Firefoxの &lt;code&gt;lastIndexOf&lt;/code&gt; およびSpiderMonkey JavaScriptエンジンとの完全な互換性を目的としていることに注意してください。これを実際のアプリケーションで使用する場合、これらのケースを無視すれば、複雑でないコードで &lt;code&gt;from&lt;/code&gt; 計算できる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c8d893483b669531f685ab1a19e3a923338615e6" translate="yes" xml:space="preserve">
          <source>Again, the input form is not preserved, so we have to use &lt;a href=&quot;../global_objects/array/join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; to revert back to a string.</source>
          <target state="translated">この場合も、入力フォームは保持されないため、&lt;a href=&quot;../global_objects/array/join&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;を使用して文字列に戻す必要があります。</target>
        </trans-unit>
        <trans-unit id="37d5985620801a4205aba92553a9d8524277fb16" translate="yes" xml:space="preserve">
          <source>Again, the same notion holds true when a function is invoked from a getter or a setter. A function used as getter or setter has its &lt;code&gt;this&lt;/code&gt; bound to the object from which the property is being set or gotten.</source>
          <target state="translated">繰り返しになりますが、関数がゲッターまたはセッターから呼び出された場合も同じ考え方が当てはまります。getterまたはsetterとして使用される関数の &lt;code&gt;this&lt;/code&gt; は、プロパティの設定または取得元のオブジェクトにバインドされています。</target>
        </trans-unit>
        <trans-unit id="f8321eb891fa924b9dc262d42e8371d91e746d33" translate="yes" xml:space="preserve">
          <source>Aliasing</source>
          <target state="translated">Aliasing</target>
        </trans-unit>
        <trans-unit id="6358bde33ab8dcdc66484b4354fed8b792df34ab" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; instances and instances of &lt;a href=&quot;../error#Error_types&quot;&gt;non-generic errors&lt;/a&gt; inherit from &lt;code&gt;Error.prototype&lt;/code&gt;. As with all constructor functions, you can use the prototype of the constructor to add properties or methods to all instances created with that constructor.</source>
          <target state="translated">すべての&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;インスタンスおよび&lt;a href=&quot;../error#Error_types&quot;&gt;一般的&lt;/a&gt;でないエラーのインスタンスは、 &lt;code&gt;Error.prototype&lt;/code&gt; から継承します。すべてのコンストラクター関数と同様に、コンストラクターのプロトタイプを使用して、そのコンストラクターで作成されたすべてのインスタンスにプロパティまたはメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="003664c44c4d51f07c612369f57d65687cf17925" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;EvalError.prototype&lt;/code&gt;. You can use the prototype to add properties or methods to all instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;EvalError.prototype&lt;/code&gt; を継承します。プロトタイプを使用して、すべてのインスタンスにプロパティまたはメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="6fb32009d509e25121605ddb50f9c91ffa887ec9" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../global&quot;&gt;&lt;code&gt;WebAssembly.Global&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;Global.prototype&lt;/code&gt;. The prototype object of the &lt;a href=&quot;../global&quot;&gt;&lt;code&gt;WebAssembly.Global()&lt;/code&gt;&lt;/a&gt; constructor can be modified to affect all &lt;a href=&quot;../global&quot;&gt;&lt;code&gt;WebAssembly.Global&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../global&quot;&gt; &lt;code&gt;WebAssembly.Global&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;Global.prototype&lt;/code&gt; から継承します。&lt;a href=&quot;../global&quot;&gt; &lt;code&gt;WebAssembly.Global()&lt;/code&gt; &lt;/a&gt;コンストラクターのプロトタイプオブジェクトを変更して、すべての&lt;a href=&quot;../global&quot;&gt; &lt;code&gt;WebAssembly.Global&lt;/code&gt; &lt;/a&gt;インスタンスに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="69283658782a98fd7a7ddf8b2e0c51354c399c96" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;Instance.prototype&lt;/code&gt;. The prototype object of the &lt;a href=&quot;../instance&quot;&gt;&lt;code&gt;WebAssembly.Instance()&lt;/code&gt;&lt;/a&gt; constructor can be modified to affect all &lt;a href=&quot;../instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;Instance.prototype&lt;/code&gt; から継承します。&lt;a href=&quot;../instance&quot;&gt; &lt;code&gt;WebAssembly.Instance()&lt;/code&gt; &lt;/a&gt;コンストラクターのプロトタイプオブジェクトは、すべての&lt;a href=&quot;../instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; &lt;/a&gt;インスタンスに影響を与えるように変更できます。</target>
        </trans-unit>
        <trans-unit id="026aba02796b01ec2190782b2e646184cba1aff5" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../memory&quot;&gt;&lt;code&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;Memory.prototype&lt;/code&gt;. The prototype object of the &lt;a href=&quot;../memory&quot;&gt;&lt;code&gt;WebAssembly.Memory()&lt;/code&gt;&lt;/a&gt; constructor can be modified to affect all &lt;a href=&quot;../memory&quot;&gt;&lt;code&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../memory&quot;&gt; &lt;code&gt;WebAssembly.Memory&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;Memory.prototype&lt;/code&gt; から継承します。&lt;a href=&quot;../memory&quot;&gt; &lt;code&gt;WebAssembly.Memory()&lt;/code&gt; &lt;/a&gt;コンストラクタのプロトタイプオブジェクトを変更して、すべての&lt;a href=&quot;../memory&quot;&gt; &lt;code&gt;WebAssembly.Memory&lt;/code&gt; &lt;/a&gt;インスタンスに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="bdbd486bbe2eca50d04f45d362234cb26edca450" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;Module.prototype&lt;/code&gt;. The prototype object of the &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module()&lt;/code&gt;&lt;/a&gt; constructor can be modified to affect all &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;Module.prototype&lt;/code&gt; から継承します。&lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module()&lt;/code&gt; &lt;/a&gt;コンストラクターのプロトタイプオブジェクトを変更して、すべての&lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;インスタンスに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="5a7606f79343725422babc5e51f5f05428465adb" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;Number.prototype&lt;/code&gt;. The prototype object of the &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; constructor can be modified to affect all &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;Number.prototype&lt;/code&gt; から継承します。&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;コンストラクターのプロトタイプオブジェクトを変更して、すべての&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;インスタンスに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="ab75216f661369242189ce5698757797261f4a5a" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;RangeError.prototype&lt;/code&gt;. You can use the prototype to add properties or methods to all instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;RangeError.prototype&lt;/code&gt; から継承します。プロトタイプを使用して、すべてのインスタンスにプロパティまたはメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="3124aaaa5b8d30fdd2b704d4d37baa9a93f43bf8" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;ReferenceError.prototype&lt;/code&gt;. You can use the prototype to add properties or methods to all instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;ReferenceError.prototype&lt;/code&gt; を継承します。プロトタイプを使用して、すべてのインスタンスにプロパティまたはメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="730a2904d7e3af2e4ca1b8eaeca44006776372e6" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;String.prototype&lt;/code&gt;. Changes to the &lt;code&gt;String&lt;/code&gt; prototype object are propagated to all &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;String.prototype&lt;/code&gt; から継承します。 &lt;code&gt;String&lt;/code&gt; プロトタイプオブジェクトへの変更は、すべての&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;インスタンスに伝達されます。</target>
        </trans-unit>
        <trans-unit id="96a802d8f83091635d056b8369ae89ba4071f7e6" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;-keyed properties will be completely ignored, even when using the &lt;code&gt;replacer&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;replacer&lt;/code&gt; 関数を使用している場合でも、すべての&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;キー設定プロパティは完全に無視されます。</target>
        </trans-unit>
        <trans-unit id="95eae42823cc777fcabbd7d0f175778cdb0b1cfb" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;SyntaxError.prototype&lt;/code&gt;. You can use the prototype to add properties or methods to all instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;SyntaxError.prototype&lt;/code&gt; を継承します。プロトタイプを使用して、すべてのインスタンスにプロパティまたはメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="3aaad887af8d724ee1c08026b6c732d015470607" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;Table.prototype&lt;/code&gt;. The prototype object of the &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table()&lt;/code&gt;&lt;/a&gt; constructor can be modified to affect all &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;Table.prototype&lt;/code&gt; から継承します。&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table()&lt;/code&gt; &lt;/a&gt;コンストラクターのプロトタイプオブジェクトは、すべての&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table&lt;/code&gt; &lt;/a&gt;インスタンスに影響を与えるように変更できます。</target>
        </trans-unit>
        <trans-unit id="58b0a143dc9269530ada70bbcc4d492ec9376fc6" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;TypeError.prototype&lt;/code&gt;. You can use the prototype to add properties or methods to all instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;インスタンスは継承 &lt;code&gt;TypeError.prototype&lt;/code&gt; 。プロトタイプを使用して、すべてのインスタンスにプロパティまたはメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="0b9680b7440871a892887aad70fc650f673d8dfc" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;URIError.prototype&lt;/code&gt;. You can use the prototype to add properties or methods to all instances.</source>
          <target state="translated">すべての&lt;a href=&quot;../urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;URIError.prototype&lt;/code&gt; から継承します。プロトタイプを使用して、すべてのインスタンスにプロパティまたはメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="8e319ff6d53fa4b1c841170a0e3c1a0e3f3f15f5" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; instances and instances of &lt;a href=&quot;error#Error_types&quot;&gt;non-generic errors&lt;/a&gt; inherit from &lt;code&gt;Error.prototype&lt;/code&gt;. As with all constructor functions, you can use the prototype of the constructor to add properties or methods to all instances created with that constructor.</source>
          <target state="translated">すべての&lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;インスタンスおよび&lt;a href=&quot;error#Error_types&quot;&gt;一般的&lt;/a&gt;でないエラーのインスタンスは、 &lt;code&gt;Error.prototype&lt;/code&gt; から継承します。すべてのコンストラクター関数と同様に、コンストラクターのプロトタイプを使用して、そのコンストラクターで作成されたすべてのインスタンスにプロパティまたはメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="0e436abe6e4d4f882028e1a9675830fb5556a5a7" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Array&lt;/code&gt; instances inherit from &lt;a href=&quot;array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt;. The prototype object of the &lt;code&gt;Array&lt;/code&gt; constructor can be modified to affect all &lt;code&gt;Array&lt;/code&gt; instances.</source>
          <target state="translated">すべての &lt;code&gt;Array&lt;/code&gt; インスタンスは&lt;a href=&quot;array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt;から継承します。 &lt;code&gt;Array&lt;/code&gt; コンストラクターのプロトタイプオブジェクトを変更して、すべての &lt;code&gt;Array&lt;/code&gt; インスタンスに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="9875ccea55d3a842975e91d390a3af939e3eed15" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;ArrayBuffer&lt;/code&gt; instances inherit from &lt;a href=&quot;arraybuffer/prototype&quot;&gt;&lt;code&gt;ArrayBuffer.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;ArrayBuffer&lt;/code&gt; インスタンスは&lt;a href=&quot;arraybuffer/prototype&quot;&gt; &lt;code&gt;ArrayBuffer.prototype&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="effb93a4c8da4ec0f1be72e2ae211ce6afbd6ec1" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Boolean&lt;/code&gt; instances inherit from &lt;a href=&quot;boolean/prototype&quot;&gt;&lt;code&gt;Boolean.prototype&lt;/code&gt;&lt;/a&gt;. As with all constructors, the prototype object dictates instances' inherited properties and methods.</source>
          <target state="translated">すべての &lt;code&gt;Boolean&lt;/code&gt; インスタンスは&lt;a href=&quot;boolean/prototype&quot;&gt; &lt;code&gt;Boolean.prototype&lt;/code&gt; &lt;/a&gt;から継承します。すべてのコンストラクターと同様に、プロトタイプオブジェクトはインスタンスの継承されたプロパティとメソッドを指示します。</target>
        </trans-unit>
        <trans-unit id="9e5c1e0761e4549ba2ba127e71b4382782167566" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;DataView&lt;/code&gt; instances inherit from &lt;a href=&quot;dataview/prototype&quot;&gt;&lt;code&gt;DataView.prototype&lt;/code&gt;&lt;/a&gt; and allows the addition of properties to all DataView objects.</source>
          <target state="translated">すべての &lt;code&gt;DataView&lt;/code&gt; インスタンスは&lt;a href=&quot;dataview/prototype&quot;&gt; &lt;code&gt;DataView.prototype&lt;/code&gt; &lt;/a&gt;を継承し、すべてのDataViewオブジェクトにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="7949a720ec3735ecbd32753ffb251c0c01c4eecb" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Date&lt;/code&gt; instances inherit from &lt;a href=&quot;date/prototype&quot;&gt;&lt;code&gt;Date.prototype&lt;/code&gt;&lt;/a&gt;. The prototype object of the &lt;code&gt;Date&lt;/code&gt; constructor can be modified to affect all &lt;code&gt;Date&lt;/code&gt; instances.</source>
          <target state="translated">すべての &lt;code&gt;Date&lt;/code&gt; インスタンスは&lt;a href=&quot;date/prototype&quot;&gt; &lt;code&gt;Date.prototype&lt;/code&gt; &lt;/a&gt;から継承します。 &lt;code&gt;Date&lt;/code&gt; コンストラクターのプロトタイプオブジェクトを変更して、すべての &lt;code&gt;Date&lt;/code&gt; インスタンスに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="93f6e3b5a646650e518df9a5f613e848adf58793" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Float32Array&lt;/code&gt; objects inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;%TypedArray%.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Float32Array&lt;/code&gt; オブジェクトは&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;%TypedArray%.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="1de04b213dff12d54337a9a721e7fe285440cf11" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Float64Array&lt;/code&gt; objects inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;%TypedArray%.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Float64Array&lt;/code&gt; オブジェクトは&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;%TypedArray%.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="2dd9f64884449e5acb404600b96fc39b07ce7de0" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Global&lt;/code&gt; instances inherit from the &lt;code&gt;Global()&lt;/code&gt; constructor's &lt;a href=&quot;global/prototype&quot;&gt;prototype object&lt;/a&gt; &amp;mdash; this can be modified to affect all &lt;code&gt;Global&lt;/code&gt; instances.</source>
          <target state="translated">すべての &lt;code&gt;Global&lt;/code&gt; インスタンスは、 &lt;code&gt;Global()&lt;/code&gt; コンストラクターの&lt;a href=&quot;global/prototype&quot;&gt;プロトタイプオブジェクトを&lt;/a&gt;継承します。これを変更して、すべての &lt;code&gt;Global&lt;/code&gt; インスタンスに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="85fdb82a9af0f7d7a41549cf8cfec19ab332d72d" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Instance&lt;/code&gt; instances inherit from the &lt;code&gt;Instance()&lt;/code&gt; constructor's &lt;a href=&quot;instance/prototype&quot;&gt;prototype object&lt;/a&gt; &amp;mdash; this can be modified to affect all &lt;code&gt;Instance&lt;/code&gt; instances.</source>
          <target state="translated">すべての &lt;code&gt;Instance&lt;/code&gt; インスタンスは、 &lt;code&gt;Instance()&lt;/code&gt; コンストラクターの&lt;a href=&quot;instance/prototype&quot;&gt;プロトタイプオブジェクト&lt;/a&gt;から継承します。これは、すべての &lt;code&gt;Instance&lt;/code&gt; インスタンスに影響を与えるように変更できます。</target>
        </trans-unit>
        <trans-unit id="23ba1926f10576f9c862c3f14c437e2319ccafd8" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Int16Array&lt;/code&gt; objects inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;%TypedArray%.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Int16Array&lt;/code&gt; オブジェクトは&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;%TypedArray%.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="4033578758464d6cb1ee6c3dfaf8d6386c4928de" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Int32Array&lt;/code&gt; objects inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;%TypedArray%.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Int32Array&lt;/code&gt; オブジェクトは&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;%TypedArray%.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="8f72ba2b7a060cad9f2f8ea3e11a008c69d0b604" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Int8Array&lt;/code&gt; objects inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;%TypedArray%.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Int8Array&lt;/code&gt; オブジェクトは&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;%TypedArray%.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="47343a390d48b780d6c94bd37e3e38ea5037f9d5" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Map&lt;/code&gt; instances inherit from &lt;a href=&quot;map/prototype&quot;&gt;&lt;code&gt;Map.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Map&lt;/code&gt; インスタンスは&lt;a href=&quot;map/prototype&quot;&gt; &lt;code&gt;Map.prototype&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="a0d6d6f0e1a1182028c9cacf782249a77dd7f3ac" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Memory&lt;/code&gt; instances inherit from the &lt;code&gt;Memory()&lt;/code&gt; constructor's &lt;a href=&quot;memory/prototype&quot;&gt;prototype object&lt;/a&gt; &amp;mdash; this can be modified to affect all &lt;code&gt;Memory&lt;/code&gt; instances.</source>
          <target state="translated">すべての &lt;code&gt;Memory&lt;/code&gt; インスタンスは、 &lt;code&gt;Memory()&lt;/code&gt; コンストラクターの&lt;a href=&quot;memory/prototype&quot;&gt;プロトタイプオブジェクトを&lt;/a&gt;継承します。これを変更して、すべての &lt;code&gt;Memory&lt;/code&gt; インスタンスに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="d8de8e11841fcd0f40e2e6f809507d914001a9f6" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Module&lt;/code&gt; instances inherit from the &lt;code&gt;Module()&lt;/code&gt; constructor's &lt;a href=&quot;module/prototype&quot;&gt;prototype object&lt;/a&gt; &amp;mdash; this can be modified to affect all &lt;code&gt;Module&lt;/code&gt; instances.</source>
          <target state="translated">すべての &lt;code&gt;Module&lt;/code&gt; インスタンスは、 &lt;code&gt;Module()&lt;/code&gt; コンストラクターの&lt;a href=&quot;module/prototype&quot;&gt;プロトタイプオブジェクトを&lt;/a&gt;継承します。これは、すべての &lt;code&gt;Module&lt;/code&gt; インスタンスに影響を与えるように変更できます。</target>
        </trans-unit>
        <trans-unit id="b529e8c037124fb41a7c05015d75c9dc6f60ac78" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Number&lt;/code&gt; instances inherit from &lt;a href=&quot;number/prototype&quot;&gt;&lt;code&gt;Number.prototype&lt;/code&gt;&lt;/a&gt;. The prototype object of the &lt;code&gt;Number&lt;/code&gt; constructor can be modified to affect all &lt;code&gt;Number&lt;/code&gt; instances.</source>
          <target state="translated">すべての &lt;code&gt;Number&lt;/code&gt; インスタンスは&lt;a href=&quot;number/prototype&quot;&gt; &lt;code&gt;Number.prototype&lt;/code&gt; &lt;/a&gt;から継承します。 &lt;code&gt;Number&lt;/code&gt; コンストラクターのプロトタイプオブジェクトを変更して、すべての &lt;code&gt;Number&lt;/code&gt; インスタンスに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="36ba8126511e1d5ab6eecd05ea63a9cb58a8ad47" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Set&lt;/code&gt; instances inherit from &lt;a href=&quot;set/prototype&quot;&gt;&lt;code&gt;Set.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Set&lt;/code&gt; インスタンスは&lt;a href=&quot;set/prototype&quot;&gt; &lt;code&gt;Set.prototype&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="69dcf5e51ee99d45ced5b550867dc499e1f2c001" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances inherit from &lt;a href=&quot;sharedarraybuffer/prototype&quot;&gt;&lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;SharedArrayBuffer&lt;/code&gt; インスタンスは&lt;a href=&quot;sharedarraybuffer/prototype&quot;&gt; &lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="d0856930c7b24eece989c7e44897b900e6e6b13a" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Table&lt;/code&gt; instances inherit from the &lt;code&gt;Table()&lt;/code&gt; constructor's &lt;a href=&quot;table/prototype&quot;&gt;prototype object&lt;/a&gt; &amp;mdash; this can be modified to affect all &lt;code&gt;Table&lt;/code&gt; instances.</source>
          <target state="translated">すべての &lt;code&gt;Table&lt;/code&gt; インスタンスは、 &lt;code&gt;Table()&lt;/code&gt; コンストラクターの&lt;a href=&quot;table/prototype&quot;&gt;プロトタイプオブジェクトを&lt;/a&gt;継承します。これは、すべての &lt;code&gt;Table&lt;/code&gt; インスタンスに影響を与えるように変更できます。</target>
        </trans-unit>
        <trans-unit id="94bd2c86992033f0377d0c21c8fe73b71bb3b195" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Uint16Array&lt;/code&gt; objects inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;%TypedArray%.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Uint16Array&lt;/code&gt; オブジェクトは&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;%TypedArray%.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="8365dc0b586830cba52bef8f423c0ac17ba2adee" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Uint32Array&lt;/code&gt; objects inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;%TypedArray%.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Uint32Array&lt;/code&gt; オブジェクトは&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;%TypedArray%.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="32b01b1e0ef7e366df1812aaea2b5977ac71f593" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Uint8Array&lt;/code&gt; objects inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;%TypedArray%.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Uint8Array&lt;/code&gt; オブジェクトは&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;%TypedArray%.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="e8eeb59d90c2645f29ab383b71fe81f08ece4ebc" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Uint8ClampedArray&lt;/code&gt; objects inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;%TypedArray%.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;Uint8ClampedArray&lt;/code&gt; オブジェクトは&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;%TypedArray%.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="e1f0d6a3b70717b6884f3c0b629108efe8aac90d" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;WeakMap&lt;/code&gt; instances inherit from &lt;a href=&quot;weakmap/prototype&quot;&gt;&lt;code&gt;WeakMap.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;WeakMap&lt;/code&gt; インスタンスは&lt;a href=&quot;weakmap/prototype&quot;&gt; &lt;code&gt;WeakMap.prototype&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="1b324f1c300abf08690cf5fdf478fe517ff63837" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;WeakSet&lt;/code&gt; instances inherit from &lt;a href=&quot;weakset/prototype&quot;&gt;&lt;code&gt;WeakSet.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;WeakSet&lt;/code&gt; インスタンスは&lt;a href=&quot;weakset/prototype&quot;&gt; &lt;code&gt;WeakSet.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="caa9e24df156cfdb4d142799282e384df8bdf1ec" translate="yes" xml:space="preserve">
          <source>All &lt;em&gt;TypedArray&lt;/em&gt;s inherit from &lt;a href=&quot;typedarray/prototype&quot;&gt;&lt;code&gt;TypedArray.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての&lt;em&gt;TypedArrayはTypedArray.prototype&lt;/em&gt;から継承し&lt;a href=&quot;typedarray/prototype&quot;&gt; &lt;code&gt;TypedArray.prototype&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ad4018e90e91778c9569e25b4567b87d75de52e7" translate="yes" xml:space="preserve">
          <source>All Symbols inherit from &lt;a href=&quot;symbol/prototype&quot;&gt;&lt;code&gt;Symbol.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべてのシンボルは&lt;a href=&quot;symbol/prototype&quot;&gt; &lt;code&gt;Symbol.prototype&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="fd9684a5b331be670cc7330c87f856a795e01ea9" translate="yes" xml:space="preserve">
          <source>All arguments passed to the function are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed.</source>
          <target state="translated">関数に渡されるすべての引数は、渡された順に、作成される関数内のパラメータの識別子の名前として扱われます。</target>
        </trans-unit>
        <trans-unit id="f87878419880ebfb221478583e3502dd7be47233" translate="yes" xml:space="preserve">
          <source>All current browsers expose a non-standard host object &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/all&quot;&gt;&lt;code&gt;document.all&lt;/code&gt;&lt;/a&gt; with type &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">現在のすべてのブラウザは、 &lt;code&gt;undefined&lt;/code&gt; 型の非標準のホストオブジェクト&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/all&quot;&gt; &lt;code&gt;document.all&lt;/code&gt; &lt;/a&gt;を公開しています。</target>
        </trans-unit>
        <trans-unit id="4ddf64f681f98ace44ef31c3c44d029ce8b8aa76" translate="yes" xml:space="preserve">
          <source>All do approximately the same thing, with a few subtle differences:</source>
          <target state="translated">どれもほぼ同じことをしていますが、微妙な違いがあります。</target>
        </trans-unit>
        <trans-unit id="eada20faad2740b207a20c3958a4f8c58106dcb5" translate="yes" xml:space="preserve">
          <source>All method definitions are not constructors and will throw a &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if you try to instantiate them.</source>
          <target state="translated">すべてのメソッド定義はコンストラクターではなく、インスタンス化しようとすると&lt;a href=&quot;../global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="f9a8c4b74f272211073c0883e9598c87ec2758b0" translate="yes" xml:space="preserve">
          <source>All objects (with the exception of objects created with &lt;code&gt;Object.create(null)&lt;/code&gt;) will have a &lt;code&gt;constructor&lt;/code&gt; property. Objects created without the explicit use of a constructor function (i.e. the object and array literals) will have a &lt;code&gt;constructor&lt;/code&gt; property that points to the Fundamental Object constructor type for that object.</source>
          <target state="translated">すべてのオブジェクト（ &lt;code&gt;Object.create(null)&lt;/code&gt; で作成されたオブジェクトを除く）には、 &lt;code&gt;constructor&lt;/code&gt; プロパティがあります。コンストラクター関数を明示的に使用せずに作成されたオブジェクト（つまり、オブジェクトと配列リテラル）には、そのオブジェクトのFundamental Objectコンストラクタータイプを指す &lt;code&gt;constructor&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="444960ec895393920d3db668733cfbaee3f9c2a2" translate="yes" xml:space="preserve">
          <source>All objects in JavaScript are descended from &lt;code&gt;Object&lt;/code&gt;; all objects inherit methods and properties from &lt;a href=&quot;object/prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt;, although they may be overridden. For example, other constructors' prototypes override the &lt;code&gt;constructor&lt;/code&gt; property and provide their own &lt;code&gt;toString()&lt;/code&gt; methods. Changes to the &lt;code&gt;Object&lt;/code&gt; prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.</source>
          <target state="translated">JavaScriptのすべてのオブジェクトは &lt;code&gt;Object&lt;/code&gt; の子孫です。すべてのオブジェクトは、オーバーライドされる可能性がありますが、&lt;a href=&quot;object/prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;からメソッドとプロパティを継承します。たとえば、他のコンストラクタのプロトタイプは &lt;code&gt;constructor&lt;/code&gt; プロパティをオーバーライドし、独自の &lt;code&gt;toString()&lt;/code&gt; メソッドを提供します。変更 &lt;code&gt;Object&lt;/code&gt; これらの変更にプロパティとメソッド対象がプロトタイプチェーンに沿ってさらに上書きされない限り、プロトタイプオブジェクトは、すべてのオブジェクトに伝播されます。</target>
        </trans-unit>
        <trans-unit id="91efbc8b0a75bcb0ae918c1eadca08aaf8dd6772" translate="yes" xml:space="preserve">
          <source>All other strict mode rules apply normally.</source>
          <target state="translated">他のすべての厳格なモードの規則は通常適用されます。</target>
        </trans-unit>
        <trans-unit id="d25c2dda8d69854969d118bb70768bda490ac5d2" translate="yes" xml:space="preserve">
          <source>All the considerations about the &quot;&lt;a href=&quot;let#Temporal_dead_zone&quot;&gt;temporal dead zone&lt;/a&gt;&quot; apply to both &lt;code&gt;&lt;a href=&quot;let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">「&lt;a href=&quot;let#Temporal_dead_zone&quot;&gt;一時的なデッドゾーン&lt;/a&gt;」に関するすべての考慮事項は、 &lt;code&gt;&lt;a href=&quot;let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;const&lt;/code&gt; の両方に適用されます。</target>
        </trans-unit>
        <trans-unit id="7443631fd99cc8363c877fe55426401cba7849e3" translate="yes" xml:space="preserve">
          <source>All the other &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; instances (including &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../weakmap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../weakset&quot;&gt;&lt;code&gt;WeakSet&lt;/code&gt;&lt;/a&gt;) will have only their enumerable properties serialized.</source>
          <target state="translated">他のすべての&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;インスタンス（&lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../weakmap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../weakset&quot;&gt; &lt;code&gt;WeakSet&lt;/code&gt; を含む&lt;/a&gt;）では、列挙可能なプロパティのみがシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="b559f400933c46f64da8e0e36f0e1b38620d2843" translate="yes" xml:space="preserve">
          <source>All three expressions in the head of the &lt;code&gt;for&lt;/code&gt; loop are optional.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループの先頭にある3つの式はすべてオプションです。</target>
        </trans-unit>
        <trans-unit id="a7f313e4caae01c6a7db9baf6465d18a4d65a50a" translate="yes" xml:space="preserve">
          <source>All traps are optional. If a trap has not been defined, the default behavior is to forward the operation to the target.</source>
          <target state="translated">すべてのトラップはオプションです。トラップが定義されていない場合、デフォルトの動作は操作をターゲットに転送することです。</target>
        </trans-unit>
        <trans-unit id="03c835b94e39ac017fcb8628d5781029d67298cd" translate="yes" xml:space="preserve">
          <source>Allocating and sharing memory</source>
          <target state="translated">メモリの割り当てと共有</target>
        </trans-unit>
        <trans-unit id="501b33cc6854193606c0c70639ab25f97d0382a3" translate="yes" xml:space="preserve">
          <source>Allowed in sloppy mode</source>
          <target state="translated">スロッピーモードで許可されている</target>
        </trans-unit>
        <trans-unit id="375fcddc8bcc6bd74e08a786aa331a7ad79e9796" translate="yes" xml:space="preserve">
          <source>Allows a function to be defined that will be executed when an undefined object member is called as a method.</source>
          <target state="translated">未定義のオブジェクト・メンバがメソッドとして呼び出されたときに実行される関数の定義を許可します。</target>
        </trans-unit>
        <trans-unit id="c3e863389db44883a7db40578eaa7bacba367e5f" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to &lt;code&gt;Error&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; インスタンスにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="59308717a2c094d78a0055308752447499b03524" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to a &lt;code&gt;Number&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; オブジェクトにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="4c29e82f98df1205c50185b2d7f53bf3b906c117" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to a &lt;code&gt;String&lt;/code&gt; object.</source>
          <target state="translated">プロパティを &lt;code&gt;String&lt;/code&gt; オブジェクトに追加できます。</target>
        </trans-unit>
        <trans-unit id="39081b8b6d9226bb3ffb8ac2e2567282d5cef7ce" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to a &lt;code&gt;SyntaxError&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;SyntaxError&lt;/code&gt; オブジェクトにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="9771e19a4f361cfab1b0f73cd9a0dc6d95e933b3" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to a &lt;code&gt;TypeError&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;TypeError&lt;/code&gt; オブジェクトにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="42d07e4163f2b424ff96ef9db80036f247a8891d" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to a &lt;code&gt;URIError&lt;/code&gt; object.</source>
          <target state="translated">プロパティを &lt;code&gt;URIError&lt;/code&gt; オブジェクトに追加できるようにします。</target>
        </trans-unit>
        <trans-unit id="0f4da43936ff925553a2a194df57b18e14e0864b" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to a JavaScript &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="translated">JavaScript &lt;code&gt;Date&lt;/code&gt; オブジェクトにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="82f4d6ddde49f3576570ad4ccaa29a9284cb7e4b" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to all &lt;code&gt;ArrayBuffer&lt;/code&gt; objects.</source>
          <target state="translated">すべての &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="4cc5e7f6fc0322fba2c517e5b5c258c47d7eb103" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to all &lt;code&gt;SharedArrayBuffer&lt;/code&gt; objects.</source>
          <target state="translated">すべての &lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクトにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="6488d256740fc3d126254f03c1c1a7336698fd3a" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to all array objects.</source>
          <target state="translated">すべての配列オブジェクトにプロパティを追加できるようにします。</target>
        </trans-unit>
        <trans-unit id="dbcd5ac942385db0cc7c8fa02a9f979de7eef33f" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to all async function objects.</source>
          <target state="translated">すべての非同期関数オブジェクトにプロパティを追加できるようにします。</target>
        </trans-unit>
        <trans-unit id="aa91d04417c2e9afa11118cbca6409f7ca5af35b" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to all generator function objects.</source>
          <target state="translated">すべてのジェネレータ関数オブジェクトにプロパティを追加できるようにします。</target>
        </trans-unit>
        <trans-unit id="0b4d6eb0217a375c85d87e78f2ba33b9c018199d" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to all objects of type Object.</source>
          <target state="translated">Object型のすべてのオブジェクトにプロパティを追加できるようにします。</target>
        </trans-unit>
        <trans-unit id="09b156dd07f2c2455b21b1ba2c0057f8f87d93b6" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to all objects.</source>
          <target state="translated">すべてのオブジェクトにプロパティを追加することができます。</target>
        </trans-unit>
        <trans-unit id="b36dad40952402b264f187628e35495f5b4c384c" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to an &lt;code&gt;EvalError&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;EvalError&lt;/code&gt; オブジェクトにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="57c12820597bbcc9de60b5f548ec897d46e4dbbc" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to an &lt;code&gt;RangeError&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;RangeError&lt;/code&gt; オブジェクトにプロパティを追加できるようにします。</target>
        </trans-unit>
        <trans-unit id="6ac1610eaa935d834161476d645a070e31701a38" translate="yes" xml:space="preserve">
          <source>Allows the addition of properties to an &lt;code&gt;ReferenceError&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;ReferenceError&lt;/code&gt; オブジェクトにプロパティを追加できるようにします。</target>
        </trans-unit>
        <trans-unit id="1d8beaf13822aabc5dd9c2425099584aade0fc84" translate="yes" xml:space="preserve">
          <source>Already has pragma</source>
          <target state="translated">すでにプラグマを持っている</target>
        </trans-unit>
        <trans-unit id="886c9e7779c740f4ed58e8ac8564475d6a676d3c" translate="yes" xml:space="preserve">
          <source>Also note that if one wishes to follow the more recent &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC3986&lt;/a&gt; for URLs, which makes square brackets reserved (for IPv6) and thus not encoded when forming something which could be part of a URL (such as a host), the following code snippet may help:</source>
          <target state="translated">また、URLの最新の&lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC3986&lt;/a&gt;に従って、角かっこが予約され（IPv6の場合）、URLの一部となる可能性のあるもの（ホストなど）を形成するときにエンコードされない場合、次のコードスニペットが助けて：</target>
        </trans-unit>
        <trans-unit id="44aaa7e2f07613634bd606fcf151829ad848af49" translate="yes" xml:space="preserve">
          <source>Also note that the &lt;code&gt;throw&lt;/code&gt; statement is affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt; as no line terminator between the &lt;code&gt;throw&lt;/code&gt; keyword and the expression is allowed.</source>
          <target state="translated">また、 &lt;code&gt;throw&lt;/code&gt; ステートメントは、 &lt;code&gt;throw&lt;/code&gt; キーワードと式の間の行終了&lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;文字&lt;/a&gt;が許可されていないため、自動セミコロン挿入（ASI）の影響を受けることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a190b20bed3e51ce14093300961fd4b596dc80da" translate="yes" xml:space="preserve">
          <source>Also note that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.</source>
          <target state="translated">また、これは既存のバッファに新しいビューを作成するものであり、新しいオブジェクトの内容を変更すると元のオブジェクトに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="9634a42ed3f2b30027f314284994277dc76358bf" translate="yes" xml:space="preserve">
          <source>Also notice that conversion is not necessarily a 1:1 character mapping, as some characters might result in two (or even more) characters when transformed to upper-case. Therefore the length of the result string can differ from the input length. This also implies that the conversion is not stable, so i.E. the following can return &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">また、一部の文字が大文字に変換されたときに2つ（またはそれ以上）の文字になる可能性があるため、変換は必ずしも1：1文字マッピングではないことに注意してください。したがって、結果の文字列の長さは入力の長さと異なる場合があります。これは、変換が安定していないことも意味するため、次の場合は &lt;code&gt;false&lt;/code&gt; を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="22654a7e5ebe06cd3b2ff3d692862b4b4e9908e1" translate="yes" xml:space="preserve">
          <source>Also see &lt;a href=&quot;global_objects/promise/all&quot;&gt;&lt;code&gt;Promise.all(iterable)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;global_objects/promise/race&quot;&gt;&lt;code&gt;Promise.race(iterable)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;global_objects/array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;global_objects/promise/all&quot;&gt; &lt;code&gt;Promise.all(iterable)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;global_objects/promise/race&quot;&gt; &lt;code&gt;Promise.race(iterable)&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;global_objects/array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="bd8342b555d8838875394ea5e29c358b31b39980" translate="yes" xml:space="preserve">
          <source>Also supported in Internet Explorer 8, but only on DOM objects and with some non-standard behaviors.</source>
          <target state="translated">Internet Explorer 8 でもサポートされていますが、DOM オブジェクトのみで、いくつかの非標準的な動作をします。</target>
        </trans-unit>
        <trans-unit id="7240bfc6e7a3b195bf0463cb2d757f8098c06b35" translate="yes" xml:space="preserve">
          <source>Also supported in Safari 5, but not on DOM objects.</source>
          <target state="translated">Safari 5 でもサポートされていますが、DOM オブジェクトではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e71aa5eaf431721abfe793237d22c0717904cfd7" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; can also be stored in a Set. &lt;code&gt;NaN&lt;/code&gt; is considered the same as &lt;code&gt;NaN&lt;/code&gt; (even though &lt;code&gt;NaN !== NaN&lt;/code&gt;).</source>
          <target state="translated">また、 &lt;code&gt;NaN&lt;/code&gt; および &lt;code&gt;undefined&lt;/code&gt; もSetに格納できます。 &lt;code&gt;NaN&lt;/code&gt; は同じと考えられている &lt;code&gt;NaN&lt;/code&gt; （たとえ &lt;code&gt;NaN !== NaN&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b93c01e4f75dec68dae71fa7bb6210643be13e3e" translate="yes" xml:space="preserve">
          <source>Also, certain methods, such as &lt;a href=&quot;../global_objects/object/create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/symbol/keyfor&quot;&gt;&lt;code&gt;Symbol.keyFor()&lt;/code&gt;&lt;/a&gt;, require a specific type, that must be provided.</source>
          <target state="translated">また、&lt;a href=&quot;../global_objects/object/create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../global_objects/symbol/keyfor&quot;&gt; &lt;code&gt;Symbol.keyFor()&lt;/code&gt; &lt;/a&gt;などの特定のメソッドには、提供する必要がある特定のタイプが必要です。</target>
        </trans-unit>
        <trans-unit id="fd0dfcc3a3cd12124e00748bc6aa31768abfdfd7" translate="yes" xml:space="preserve">
          <source>Also, check your syntax when using callbacks. Brackets and commas can get difficult easily.</source>
          <target state="translated">また、コールバックを使用する際には構文をチェックしてください。括弧とカンマは簡単に難しくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="5b04c7a5831dedb851aed975f051c1cac400682e" translate="yes" xml:space="preserve">
          <source>Alternation</source>
          <target state="translated">Alternation</target>
        </trans-unit>
        <trans-unit id="3b74e96e489cf616e54374e5e92ff3290101f441" translate="yes" xml:space="preserve">
          <source>Alternative</source>
          <target state="translated">Alternative</target>
        </trans-unit>
        <trans-unit id="5c4643987233045b798981975d91bef3917972f2" translate="yes" xml:space="preserve">
          <source>Alternative URI encoding scheme is Base62x, which has been ported into NPM.</source>
          <target state="translated">代替のURIエンコーディング方式としてBase62xがありますが、これはNPMに移植されています。</target>
        </trans-unit>
        <trans-unit id="66e43821463119922caa2a3f2d670aa183764fad" translate="yes" xml:space="preserve">
          <source>Alternative iteration</source>
          <target state="translated">代替イテレーション</target>
        </trans-unit>
        <trans-unit id="27c5ad050b554e2ceb89c360fc83e65cd724c40f" translate="yes" xml:space="preserve">
          <source>Alternative standard syntax</source>
          <target state="translated">代替標準構文</target>
        </trans-unit>
        <trans-unit id="927d823c46c4f09b7d355ef52e10f95d67521db8" translate="yes" xml:space="preserve">
          <source>Alternative standard syntax using Date methods</source>
          <target state="translated">Dateメソッドを使用した代替の標準構文</target>
        </trans-unit>
        <trans-unit id="8e7367387d4a21b8391d0907ab087058608214ad" translate="yes" xml:space="preserve">
          <source>Alternative standard syntax using the ECMAScript Intl API</source>
          <target state="translated">ECMAScript Intl API を使用した代替標準構文</target>
        </trans-unit>
        <trans-unit id="26b6739998f2a62f72de88d5a8efe1cb484a7ca8" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;a href=&quot;../operators/typeof&quot;&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/a&gt; can be used:</source>
          <target state="translated">または、&lt;a href=&quot;../operators/typeof&quot;&gt; &lt;code&gt;typeof&lt;/code&gt; &lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="d4ff16c9a90b8e9758ad7e5b9a70d6dedd029a0e" translate="yes" xml:space="preserve">
          <source>Alternatively, a &lt;a href=&quot;../global_objects/function/bind&quot;&gt;bound function&lt;/a&gt; could be created so that a preassigned &lt;code&gt;this&lt;/code&gt; value would be passed to the bound target function (the &lt;code&gt;growUp()&lt;/code&gt; function in the example above).</source>
          <target state="translated">または、&lt;a href=&quot;../global_objects/function/bind&quot;&gt;バインドされた関数&lt;/a&gt;を作成して、事前に割り当てられた &lt;code&gt;this&lt;/code&gt; 値がバインドされたターゲット関数（上記の例では &lt;code&gt;growUp()&lt;/code&gt; 関数）に渡されるようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="00d5207d6428c3fadad5b655770cb668cbf00390" translate="yes" xml:space="preserve">
          <source>Alternatively, written with an arrow function:</source>
          <target state="translated">または、矢印関数を使って書く。</target>
        </trans-unit>
        <trans-unit id="59900b700e7f1680e65a6db2c48f71aebf87123b" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;:</source>
          <target state="translated">または、&lt;a href=&quot;../functions/arrow_functions&quot;&gt;矢印関数&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="04343d04daa907e29635a443e8bc5dea7deffd8d" translate="yes" xml:space="preserve">
          <source>Although &lt;a href=&quot;../string&quot;&gt;strings&lt;/a&gt; are native, Array-like objects, they are not suitable in applications of this method, as strings are immutable. Similarly for the native, Array-like object &lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;.</source>
          <target state="translated">が、&lt;a href=&quot;../string&quot;&gt;文字列は&lt;/a&gt;ネイティブ、アレイのようなオブジェクトである文字列は不変で、彼らは、この方法の用途には適していません。同様に、ネイティブの配列のようなオブジェクト&lt;a href=&quot;../../functions/arguments&quot;&gt;引数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="328b8e5ce667becc8fa587f48ab12b9cf6842be4" translate="yes" xml:space="preserve">
          <source>Although ECMAScript makes iteration order of objects implementation-dependent, it may appear that all major browsers support an iteration order based on the earliest added property coming first (at least for properties not on the prototype). However, in the case of Internet Explorer, when one uses &lt;code&gt;delete&lt;/code&gt; on a property, some confusing behavior results, preventing other browsers from using simple objects like object literals as ordered associative arrays. In Explorer, while the property &lt;em&gt;value&lt;/em&gt; is indeed set to undefined, if one later adds back a property with the same name, the property will be iterated in its &lt;em&gt;old&lt;/em&gt; position--not at the end of the iteration sequence as one might expect after having deleted the property and then added it back.</source>
          <target state="translated">ECMAScriptはオブジェクトの反復順序を実装に依存しますが、すべての主要なブラウザーは、最初に追加される最も早いプロパティに基づいて反復順序をサポートしているように見えます（少なくともプロトタイプにないプロパティの場合）。ただし、Internet Explorerの場合、プロパティで &lt;code&gt;delete&lt;/code&gt; を使用すると、混乱を招く動作が発生し、他のブラウザーがオブジェクトリテラルなどの単純なオブジェクトを順序付き連想配列として使用できなくなります。エクスプローラーでは、プロパティ&lt;em&gt;値&lt;/em&gt;は確かにundefinedに設定されていますが、後で同じ名前のプロパティを追加すると、プロパティは&lt;em&gt;古い&lt;/em&gt;シーケンスで繰り返されます-繰り返しシーケンスの最後ではなく、プロパティを削除して、再度追加しました。</target>
        </trans-unit>
        <trans-unit id="1f2ff42eeaabd4a54d8ef5d9fc28c814839b4216" translate="yes" xml:space="preserve">
          <source>Although discouraged by ECMAScript 3 and forbidden by ECMAScript 5, many implementations interpret a numeric string beginning with a leading &lt;code&gt;0&lt;/code&gt; as octal. The following may have an octal result, or it may have a decimal result. &lt;strong&gt;Always specify a radix to avoid this unreliable behavior.&lt;/strong&gt;</source>
          <target state="translated">ECMAScript 3では推奨されておらず、ECMAScript 5では禁止されていますが、多くの実装では、先頭の &lt;code&gt;0&lt;/code&gt; で始まる数値文字列を8進数として解釈します。次の結果は8進数の結果になる場合と、10進数の結果になる場合があります。&lt;strong&gt;この信頼できない動作を回避するために、常に基数を指定してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0e546fa6a556e999400a21488ad947d7ca555cc0" translate="yes" xml:space="preserve">
          <source>Although host objects (such as DOM objects) are not required by spec to follow the Mozilla behavior when converted by &lt;code&gt;Array.prototype.slice&lt;/code&gt; and IE &amp;lt; 9 does not do so, versions of IE starting with version 9 do allow this. &amp;ldquo;Shimming&amp;rdquo; it can allow reliable cross-browser behavior. As long as other modern browsers continue to support this ability, as currently do IE, Mozilla, Chrome, Safari, and Opera, developers reading (DOM-supporting) slice code relying on this shim will not be misled by the semantics; they can safely rely on the semantics to provide the now apparently &lt;em&gt;de facto&lt;/em&gt; standard behavior. (The shim also fixes IE to work with the second argument of &lt;code&gt;slice()&lt;/code&gt; being an explicit &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; value as earlier versions of IE also did not allow but all modern browsers, including IE &amp;gt;= 9, now do.)</source>
          <target state="translated">ホストオブジェクト（DOMオブジェクトなど）は、 &lt;code&gt;Array.prototype.slice&lt;/code&gt; によって変換されたときにMozillaの動作に従う必要がなく、IE &amp;lt;9でもそうではありませんが、バージョン9以降のIEのバージョンではこれが可能です。 「シミング」は、信頼できるクロスブラウザ動作を可能にします。現在IE、Mozilla、Chrome、Safari、Operaと同様に、他の最新のブラウザーがこの機能をサポートしている限り、このシムに依存する（DOMをサポートする）スライスコードを読み取る開発者は、セマンティクスに惑わされることはありません。彼らは、セマンティクスに安全に依存して、今では明らかに&lt;em&gt;事実上の&lt;/em&gt;標準的な動作を提供できます。 （シムは、IEが &lt;code&gt;slice()&lt;/code&gt; の 2番目の引数が明示的な&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;も動作するように修正します 以前のバージョンのIEも許可していませんでしたが、IE&amp;gt; = 9を含むすべての最新のブラウザーでは許可されています）。</target>
        </trans-unit>
        <trans-unit id="677f3d7595a2ad40aa5a76dea236adc2d8d4b9f4" translate="yes" xml:space="preserve">
          <source>Although most common Unicode values can be represented with one 16-bit number (as expected early on during JavaScript standardization) and &lt;code&gt;fromCharCode()&lt;/code&gt; can be used to return a single character for the most common values (i.e., UCS-2 values which are the subset of UTF-16 with the most common characters), in order to deal with ALL legal Unicode values (up to 21 bits), &lt;code&gt;fromCharCode()&lt;/code&gt; alone is inadequate. Since the higher code point characters use two (lower value) &quot;surrogate&quot; numbers to form a single character, &lt;a href=&quot;fromcodepoint&quot;&gt;&lt;code&gt;String.fromCodePoint()&lt;/code&gt;&lt;/a&gt; (part of the ES2015 standard) can be used to return such a pair and thus adequately represent these higher valued characters.</source>
          <target state="translated">最も一般的なUnicode値は1つの16ビット数で表すことができますが（JavaScript標準化の初期の段階で予想される &lt;code&gt;fromCharCode()&lt;/code&gt; ）、fromCharCode（）を使用して最も一般的な値（つまり、UCS-2値であるUCS-2値）を返すことができます最も一般的な文字を含むUTF-16のサブセット）、すべての正当なUnicode値（最大21ビット）を処理するために、 &lt;code&gt;fromCharCode()&lt;/code&gt; だけでは不十分です。高いコードポイント文字は2つの（低い値）「代理」番号を使用して単一の文字を形成するため、&lt;a href=&quot;fromcodepoint&quot;&gt; &lt;code&gt;String.fromCodePoint()&lt;/code&gt; &lt;/a&gt;（ES2015標準の一部）を使用してそのようなペアを返し、これらの高い値の文字を適切に表すことができます。 。</target>
        </trans-unit>
        <trans-unit id="fafc754b4e1f1a6abde2232b1dfb74cc16e07223" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;../evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;../evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">が&lt;a href=&quot;../evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; の&lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;../evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; の&lt;/a&gt;インスタンスはプロトタイプチェーンを通じて継承にいくつかの方法を実行します。</target>
        </trans-unit>
        <trans-unit id="3c4831a007000b96eb848de60d92020501941170" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">が&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;インスタンスはプロトタイプチェーンを通していくつかのメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="d92a5719e2fe25bf2728cd1c78c468fd8c46af67" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;../referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;../referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">けれども&lt;a href=&quot;../referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;../referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;インスタンスはプロトタイプチェーンを通じて継承にいくつかの方法を実行します。</target>
        </trans-unit>
        <trans-unit id="c2a69757a0f96d3d2cf4f6cf73c6af0caae6f12f" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;../syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;../syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">けれども&lt;a href=&quot;../syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;../syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;インスタンスはプロトタイプチェーンを通じて継承にいくつかの方法を実行します。</target>
        </trans-unit>
        <trans-unit id="2acdacdb34fc633b27ece5839ed9e2ab1df04b80" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">が、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外の&lt;/a&gt;インスタンスはプロトタイプチェーンを通していくつかのメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="1f03aefc5ea645d10ba9840a1cb282430fb58ff9" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;../urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;../urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">が&lt;a href=&quot;../urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; の&lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;../urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; の&lt;/a&gt;インスタンスはプロトタイプチェーンを通じて継承にいくつかの方法を実行します。</target>
        </trans-unit>
        <trans-unit id="266ec2a96c1bd291182ec8f1ea68bd537baff4d0" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">が&lt;a href=&quot;evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; の&lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; の&lt;/a&gt;インスタンスはプロトタイプチェーンを通じて継承にいくつかの方法を実行します。</target>
        </trans-unit>
        <trans-unit id="884cd0ce185093baffafa4f40619abb1549b7bb2" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">が&lt;a href=&quot;rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;インスタンスはプロトタイプチェーンを通していくつかのメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="84f42a7b014bc014883bc4094f392c1d2ce76a19" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">けれども&lt;a href=&quot;referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;インスタンスはプロトタイプチェーンを通じて継承にいくつかの方法を実行します。</target>
        </trans-unit>
        <trans-unit id="ddb9448464c98e6d812bfeed973d2389d2b1893d" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">けれども&lt;a href=&quot;syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;インスタンスはプロトタイプチェーンを通じて継承にいくつかの方法を実行します。</target>
        </trans-unit>
        <trans-unit id="83458f1de95a00f961550d6dc892f06c5b650573" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">が、&lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外の&lt;/a&gt;インスタンスはプロトタイプチェーンを通していくつかのメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="c4f3a2858e493804909a70d1e337183d9006e690" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; prototype object does not contain any methods of its own, &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; instances do inherit some methods through the prototype chain.</source>
          <target state="translated">が&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; の&lt;/a&gt;プロトタイプオブジェクトが自分自身のいずれかの方法を含んでいない、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; の&lt;/a&gt;インスタンスはプロトタイプチェーンを通じて継承にいくつかの方法を実行します。</target>
        </trans-unit>
        <trans-unit id="d449a8319004d48cb02ff0d15a7ea572fe5785fc" translate="yes" xml:space="preserve">
          <source>Although the arrow in an arrow function is not an operator, arrow functions have special parsing rules that interact differently with &lt;a href=&quot;../operators/operator_precedence&quot;&gt;operator precedence&lt;/a&gt; compared to regular functions.</source>
          <target state="translated">アロー関数のアローは演算子ではありませんが、アロー関数には、通常の関数と比較して&lt;a href=&quot;../operators/operator_precedence&quot;&gt;演算子の優先順位&lt;/a&gt;とは異なる方法で相互作用する特別な解析規則があります。</target>
        </trans-unit>
        <trans-unit id="9ee2ed9d8a6534cc88e49b1a823010ed05b9590e" translate="yes" xml:space="preserve">
          <source>Although the specification allows custom type tags for non-standard exotic objects, it requires those type tags to be different from the predefined ones. The case of &lt;code&gt;document.all&lt;/code&gt; having type &lt;code&gt;'undefined'&lt;/code&gt; is classified in the web standards as a &quot;willful violation&quot; of the original ECMA JavaScript standard.</source>
          <target state="translated">仕様では非標準のエキゾチックオブジェクトのカスタムタイプタグが許可されていますが、これらのタイプタグは事前定義されたものとは異なる必要があります。タイプが &lt;code&gt;'undefined'&lt;/code&gt; の &lt;code&gt;document.all&lt;/code&gt; のケースは、Web標準では元のECMA JavaScript標準の「故意の違反」として分類されています。</target>
        </trans-unit>
        <trans-unit id="f2fed62b1ff8db7cfc94e680e62f79c05a7033e5" translate="yes" xml:space="preserve">
          <source>Always display the currency for the strings and numbers in the &lt;code&gt;prices&lt;/code&gt; array:</source>
          <target state="translated">常に文字列と数値の通貨を &lt;code&gt;prices&lt;/code&gt; 配列に表示します。</target>
        </trans-unit>
        <trans-unit id="de344142ebe59faa564c70aee1d3036521d494c3" translate="yes" xml:space="preserve">
          <source>Ambiguity contra</source>
          <target state="translated">曖昧さの禁則</target>
        </trans-unit>
        <trans-unit id="758f3bda62509c3e851edde04e493f8364a35817" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../iteration_protocols#The_iterable_protocol&quot;&gt;iterable&lt;/a&gt; object such as an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;などの&lt;a href=&quot;../../iteration_protocols#The_iterable_protocol&quot;&gt;反復可能な&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6404b312ad7915d95e80ce14e58e764300a869c2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing substrings as its elements.</source>
          <target state="translated">&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;の要素としてストリングを含みます。</target>
        </trans-unit>
        <trans-unit id="0e9dedc62d10f465d5626a637b0c88c5237852e9" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing the entire match result and any parentheses-captured matched results, or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; if there were no matches.</source>
          <target state="translated">&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;全体の一致結果および任意含有一致結果、または括弧は捕捉&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;全く一致が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="0903607cf4bfee31ccf89993f3cacdf41e7d64e5" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of objects containing the formatted date in parts.</source>
          <target state="translated">部分的にフォーマットされた日付を含むオブジェクトの&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5ba9f97d3e017eca251db2467034301d110c9b45" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of objects containing the formatted number in parts.</source>
          <target state="translated">フォーマットされた数値を部分的に含むオブジェクトの&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6f919f6fbefb61e93d063e3c123e6529b7649369" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of plural rules used by the given language.</source>
          <target state="translated">指定された言語で使用される複数の規則の&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b4f7be06c4d9ae792255ebc0250f2b2640e62ce1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of strings split at each point where the separator occurs in the given string.</source>
          <target state="translated">指定された文字列でセパレータが発生する各ポイントで分割される文字列の&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6783311dffe802f4a992de2529c1f746e8576d9" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of the &lt;code&gt;target&lt;/code&gt; object's own property keys.</source>
          <target state="translated">&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;target&lt;/code&gt; オブジェクト自身のプロパティキー。</target>
        </trans-unit>
        <trans-unit id="d1ff45237a73749bc79cec7236b4fa98e13289eb" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; object from which to transfer.</source>
          <target state="translated">転送元の&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6b8ff625c2201a9d73ca060be123ef05f8533d5a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or other &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable&quot;&gt;iterable&lt;/a&gt; object whose elements are key-value pairs (arrays with two elements, e.g. &lt;code&gt;[[ 1, 'one' ],[ 2, 'two' ]]&lt;/code&gt;). Each key-value pair is added to the new &lt;code&gt;Map&lt;/code&gt;; &lt;code&gt;null&lt;/code&gt; values are treated as &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;または他の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable&quot;&gt;反復可能な&lt;/a&gt;要素が、キーと値のペア（二つの要素、例えばて配列されているオブジェクト &lt;code&gt;[[ 1, 'one' ],[ 2, 'two' ]]&lt;/code&gt; ）。キーと値の各ペアが新しい &lt;code&gt;Map&lt;/code&gt; に追加されます。 &lt;code&gt;null&lt;/code&gt; 値は &lt;code&gt;undefined&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="cb51764372fd9fd0f63d909fe7db0bc8d3cc4874" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView&quot;&gt;&lt;code&gt;ArrayBufferView&lt;/code&gt;&lt;/a&gt; with elements will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, as they are views over memory and will definitely cause other possible issues:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView&quot;&gt; &lt;code&gt;ArrayBufferView&lt;/code&gt; &lt;/a&gt;要素を持つが原因となります&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、彼らはメモリの景色があるとして、間違いなく他の可能性のある問題が発生します：</target>
        </trans-unit>
        <trans-unit id="67afce71a388ef0eb6c0cac3db9777304b18b55e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;expression&lt;/a&gt; that is considered to be either &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;表現&lt;/a&gt;のいずれかであると考えられて&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d078a62ea5093a92723f41b7d34180773fcbb9d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../object&quot;&gt;Object&lt;/a&gt;&lt;/code&gt; with two properties:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../object&quot;&gt;Object&lt;/a&gt;&lt;/code&gt; 二つの性質を持ちます：</target>
        </trans-unit>
        <trans-unit id="2abe3f4617f7bbbed2cf60e57170354c81a50555" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Object&lt;/code&gt; has a prototype, so there are default keys in the map that could collide with your keys if you're not careful. As of ES5 this can be bypassed by using &lt;code&gt;map = Object.create(null)&lt;/code&gt;, but this is seldom done.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; のプロトタイプを持っているので、注意しないなら、あなたの鍵と衝突する可能性がマップ内のデフォルトのキーがあります。 ES5 以降、これは &lt;code&gt;map = Object.create(null)&lt;/code&gt; を使用してバイパスできますが、これが行われることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="06a7d772c6f306b21c08de902dd9ee6804b69ae2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;async function&lt;/code&gt; expression is very similar to, and has almost the same syntax as, an &lt;a href=&quot;../statements/async_function&quot;&gt;&lt;code&gt;async function statement&lt;/code&gt;&lt;/a&gt;. The main difference between an async &lt;code&gt;function&lt;/code&gt; expression and an async &lt;code&gt;function&lt;/code&gt; statement is the &lt;em&gt;function name,&lt;/em&gt; which can be omitted in &lt;code&gt;async function&lt;/code&gt; expressions to create &lt;em&gt;anonymous&lt;/em&gt; functions. An &lt;code&gt;async function&lt;/code&gt; expression can be used as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt; (Immediately Invoked Function Expression) which runs as soon as it is defined. See also the chapter about &lt;a href=&quot;../functions&quot;&gt;functions&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;async function&lt;/code&gt; 式は非常によく似ている、と、とほぼ同じ構文を持つ&lt;a href=&quot;../statements/async_function&quot;&gt; &lt;code&gt;async function statement&lt;/code&gt; &lt;/a&gt;。非同期 &lt;code&gt;function&lt;/code&gt; 式と非同期 &lt;code&gt;function&lt;/code&gt; ステートメントの主な違いは、&lt;em&gt;関数名です。&lt;/em&gt;これは、 &lt;code&gt;async function&lt;/code&gt; 式で省略して&lt;em&gt;無名&lt;/em&gt;関数を作成できます。 &lt;code&gt;async function&lt;/code&gt; 式はとして使用することができます&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;生命維持&lt;/a&gt;とすぐに、それが定義されているとして実行（すぐに呼び出される関数式）。詳細については、&lt;a href=&quot;../functions&quot;&gt;関数&lt;/a&gt;に関する章も参照してください。</target>
        </trans-unit>
        <trans-unit id="749fa5b9e60f6364ec3fa81094279ac9d284d736" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;async&lt;/code&gt; function can contain an &lt;a href=&quot;../operators/await&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; expression that pauses the execution of the async function and waits for the passed &lt;code&gt;Promise&lt;/code&gt;'s resolution, and then resumes the &lt;code&gt;async&lt;/code&gt; function's execution and returns the resolved value.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; 関数を含むことができる&lt;a href=&quot;../operators/await&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;通過用非同期関数を待つの実行一時停止発現 &lt;code&gt;Promise&lt;/code&gt; の解像度を、その後再開 &lt;code&gt;async&lt;/code&gt; 関数の実行と戻る解決された値を。</target>
        </trans-unit>
        <trans-unit id="7d6e5cba73fe7c67ccfb97f3daaecf839a1c2e1a" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;already resolved&lt;/strong&gt;&lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; if the &lt;var&gt;iterable&lt;/var&gt; passed is empty.</source>
          <target state="translated">&lt;strong&gt;すでに解決&lt;/strong&gt;&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;場合 &lt;var&gt;iterable&lt;/var&gt; 渡さは空です。</target>
        </trans-unit>
        <trans-unit id="fdaf841e34b58dc92bf429e752b673bd9e8bb718" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;arrow function expression&lt;/strong&gt; has a shorter syntax than a &lt;a href=&quot;../operators/function&quot;&gt;function expression&lt;/a&gt; and does not have its own &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;arguments&quot;&gt;arguments&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../operators/super&quot;&gt;super&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../operators/new.target&quot;&gt;new.target&lt;/a&gt;&lt;/code&gt;. These function expressions are best suited for non-method functions, and they cannot be used as constructors.</source>
          <target state="translated">&lt;strong&gt;矢印の関数式は、&lt;/strong&gt;より短い構文は&lt;a href=&quot;../operators/function&quot;&gt;関数式を&lt;/a&gt;、独自の持っていない &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;arguments&quot;&gt;arguments&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../operators/super&quot;&gt;super&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../operators/new.target&quot;&gt;new.target&lt;/a&gt;&lt;/code&gt; を。これらの関数式はメソッド以外の関数に最適であり、コンストラクターとして使用することはできません。</target>
        </trans-unit>
        <trans-unit id="607e4dc315b484ba61d20fbbf5614a0760b2cdba" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;assignment operator&lt;/strong&gt; assigns a value to its left operand based on the value of its right operand.</source>
          <target state="translated">&lt;strong&gt;代入演算子は&lt;/strong&gt;その右のオペランドの値に基づいて、その左のオペランドに値を代入します。</target>
        </trans-unit>
        <trans-unit id="904d5976b308e2cf370f1501613cd8846c61e3a2" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;asynchronously resolved&lt;/strong&gt;&lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; if the &lt;var&gt;iterable&lt;/var&gt; passed contains no promises. Note, Google Chrome 58 returns an &lt;strong&gt;already resolved&lt;/strong&gt; promise in this case.</source>
          <target state="translated">&lt;strong&gt;非同期的解決&lt;/strong&gt;&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;かの &lt;var&gt;iterable&lt;/var&gt; 合格には約束が含まれていません。この場合、Google Chrome 58は&lt;strong&gt;解決済みの&lt;/strong&gt;プロミスを返します。</target>
        </trans-unit>
        <trans-unit id="a767f92ce194f1873bd322c68f31bfd6943db581" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;empty statement&lt;/strong&gt; is used to provide no statement, although the JavaScript syntax would expect one.</source>
          <target state="translated">&lt;strong&gt;空のステートメントは、&lt;/strong&gt; JavaScriptの構文は1を期待するだろうが、何の声明を提供しないために使用されます。</target>
        </trans-unit>
        <trans-unit id="c41d3a52802b697a3a0ec9387f2f4b7e944f5a03" translate="yes" xml:space="preserve">
          <source>An API that returns a &lt;a href=&quot;../global_objects/promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; will result in a promise chain, and it splits the function into many parts. Consider the following code:</source>
          <target state="translated">&lt;a href=&quot;../global_objects/promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;を返すAPIは、Promiseチェーンを作成し、関数を多くの部分に分割します。次のコードを検討してください。</target>
        </trans-unit>
        <trans-unit id="d6e1fb977cb0563ff8d5c19996560538d0a19f3d" translate="yes" xml:space="preserve">
          <source>An accessor descriptor also has the following optional keys:</source>
          <target state="translated">アクセサ記述子には、以下のオプションキーもあります。</target>
        </trans-unit>
        <trans-unit id="c6ba2736be15ee34c7ec5d427128a154ec58e802" translate="yes" xml:space="preserve">
          <source>An accessor property that returns the buffer contained in the memory.</source>
          <target state="translated">メモリに含まれるバッファを返すアクセサプロパティ。</target>
        </trans-unit>
        <trans-unit id="a03499d49258efd7b96ce9fc262e5c83ec924074" translate="yes" xml:space="preserve">
          <source>An additional optimization technique to lazify or delay the calculation of a property value and cache it for later access are&lt;strong&gt; smart or &lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;memoized&lt;/a&gt; getters&lt;/strong&gt;. The value is calculated the first time the getter is called, and is then cached so subsequent accesses return the cached value without recalculating it. This is useful in the following situations:</source>
          <target state="translated">プロパティ値の計算を遅延または遅延させ、後でアクセスするためにキャッシュするための追加の最適化手法は、&lt;strong&gt;スマートまたは&lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;メモ化された&lt;/a&gt;ゲッター&lt;/strong&gt;です。値は、getterが最初に呼び出されたときに計算され、次にキャッシュされるため、以降のアクセスでは、再計算されずにキャッシュされた値が返されます。これは、次の状況で役立ちます。</target>
        </trans-unit>
        <trans-unit id="5c0089cf4fd6d504691e8dd3f3f6007a79efc218" translate="yes" xml:space="preserve">
          <source>An alias for the variable that holds the value attempted to be assigned to &lt;code&gt;prop.&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;prop.&lt;/code&gt; うとした値を保持する変数のエイリアス。</target>
        </trans-unit>
        <trans-unit id="d6016719702c59ad00b3edb04713bfcc42f7a2e2" translate="yes" xml:space="preserve">
          <source>An alias for the variable that holds the value attempted to be assigned to &lt;code&gt;prop&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;prop&lt;/code&gt; に割り当てようとした値を保持する変数のエイリアス。</target>
        </trans-unit>
        <trans-unit id="400e6951bed505cfb4c59c0c2736981c28198b92" translate="yes" xml:space="preserve">
          <source>An array containing objects representing the exported functions of the given module.</source>
          <target state="translated">指定したモジュールのエクスポートされた関数を表すオブジェクトを含む配列。</target>
        </trans-unit>
        <trans-unit id="6c7fc74f35e37d771379bedc3096bf6ec8a27b18" translate="yes" xml:space="preserve">
          <source>An array containing objects representing the imported functions of the given module.</source>
          <target state="translated">指定したモジュールのインポートされた関数を表すオブジェクトを含む配列。</target>
        </trans-unit>
        <trans-unit id="3ee0359ece94b819bf8999821d7a29e0c97c39e9" translate="yes" xml:space="preserve">
          <source>An array containing the canonical locale names.</source>
          <target state="translated">正規ロケール名を含む配列。</target>
        </trans-unit>
        <trans-unit id="b8c6ddda445db591cd5ad81d4db8de771f6936fb" translate="yes" xml:space="preserve">
          <source>An array containing the deleted elements. If only one element is removed, an array of one element is returned. If no elements are removed, an empty array is returned.</source>
          <target state="translated">削除された要素を含む配列。1 つの要素だけが削除された場合は、1 つの要素の配列が返されます。削除された要素がない場合は、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="83a6b9d1167655fd7e1912a34148467ca61399c7" translate="yes" xml:space="preserve">
          <source>An array containing the given object's own enumerable property values.</source>
          <target state="translated">与えられたオブジェクト自身の列挙可能なプロパティ値を含む配列。</target>
        </trans-unit>
        <trans-unit id="0ef0fc75dc31886b468c867697291158b56e92dd" translate="yes" xml:space="preserve">
          <source>An array corresponding to the arguments passed to a function. This is deprecated as property of &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;. Use the &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object available within the function instead.</source>
          <target state="translated">関数に渡された引数に対応する配列。これは&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; の&lt;/a&gt;プロパティとしては非推奨です。代わりに、関数内で使用可能な&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;オブジェクトを使用してください。</target>
        </trans-unit>
        <trans-unit id="2392b3a79dbcf85997c3e946ba81b7bb00504726" translate="yes" xml:space="preserve">
          <source>An array corresponding to the arguments passed to a function. This is deprecated as property of &lt;a href=&quot;function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;. Use the &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object available within the function instead.</source>
          <target state="translated">関数に渡された引数に対応する配列。これは&lt;a href=&quot;function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; の&lt;/a&gt;プロパティとしては非推奨です。代わりに、関数内で使用可能な&lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;オブジェクトを使用してください。</target>
        </trans-unit>
        <trans-unit id="17f84c99cc1e709b7e2e7cc25e68a800f6787203" translate="yes" xml:space="preserve">
          <source>An array of all symbol properties found directly upon the given object.</source>
          <target state="translated">指定されたオブジェクトに直接適用されるすべてのシンボルプロパティの配列。</target>
        </trans-unit>
        <trans-unit id="939875be84425baa86f4e27e35e5c37a64400d8e" translate="yes" xml:space="preserve">
          <source>An array of objects. An &lt;code&gt;'x'&lt;/code&gt; denotes an &lt;code&gt;'on'&lt;/code&gt; state, a &lt;code&gt;'-'&lt;/code&gt; (hyphen) denotes an &lt;code&gt;'off'&lt;/code&gt; state and an &lt;code&gt;'_'&lt;/code&gt; (underscore) denotes the length of an &lt;code&gt;'on'&lt;/code&gt; state.</source>
          <target state="translated">オブジェクトの配列。 &lt;code&gt;'x'&lt;/code&gt; 表す &lt;code&gt;'on'&lt;/code&gt; 状態、 &lt;code&gt;'-'&lt;/code&gt; （ハイフン）である &lt;code&gt;'off'&lt;/code&gt; 状態と &lt;code&gt;'_'&lt;/code&gt; （アンダースコア）の長表す &lt;code&gt;'on'&lt;/code&gt; 状態。</target>
        </trans-unit>
        <trans-unit id="5f1aa483a622265e16e21ae55475c37ff5942623" translate="yes" xml:space="preserve">
          <source>An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.</source>
          <target state="translated">指定したロケールタグのサブセットを表す文字列の配列で、ランタイムのデフォルトロケールに戻さなくても照合に対応しています。</target>
        </trans-unit>
        <trans-unit id="8c38f432bd1ddfdeee6fa4d76387b78d4ffffeb8" translate="yes" xml:space="preserve">
          <source>An array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale.</source>
          <target state="translated">指定したロケールタグのサブセットを表す文字列の配列で、 ランタイムのデフォルトのロケールに戻ることなく、日付と時刻の書式設定をサポートします。</target>
        </trans-unit>
        <trans-unit id="dff512279d3e3d7747a9029073cc81b1abeb136c" translate="yes" xml:space="preserve">
          <source>An array of strings representing a subset of the given locale tags that are supported in number formatting without having to fall back to the runtime's default locale.</source>
          <target state="translated">指定したロケールタグのサブセットを表す文字列の配列で、 ランタイムのデフォルトロケールに戻さなくても数値フォーマットでサポートされています。</target>
        </trans-unit>
        <trans-unit id="d3525b867e17bc9965be4e0986238be5396a0ea2" translate="yes" xml:space="preserve">
          <source>An array of strings representing a subset of the given locale tags that are supported in plural formatting without having to fall back to the runtime's default locale.</source>
          <target state="translated">指定したロケールタグのサブセットを表す文字列の配列で、 ランタイムのデフォルトのロケールに戻さなくても複数の書式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="9ecd22a069ff40a7adba2fb22eb682e921f7fa56" translate="yes" xml:space="preserve">
          <source>An array of strings that correspond to the properties found directly upon the given object.</source>
          <target state="translated">与えられたオブジェクトのプロパティに直接対応する文字列の配列。</target>
        </trans-unit>
        <trans-unit id="6fcf73071464349321076ab6e25b38ccba0fc11a" translate="yes" xml:space="preserve">
          <source>An array of strings that represent all the enumerable properties of the given object.</source>
          <target state="translated">与えられたオブジェクトのすべての列挙可能なプロパティを表す文字列の配列。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
