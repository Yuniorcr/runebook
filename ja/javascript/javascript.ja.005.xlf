<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="1cd1de9386a1bb34affcd9ac7260ed1e95adf198" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function Definitions' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「関数定義」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5f6d76fb6b0a03f1e71fd719c795015807cda26c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function definitions' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「関数定義」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eb4f37ad582d9adfc30cb6bc3d81baee579becca" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「関数」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ac302b6b2133b4189702677fcc80bd5f0b705667" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function.length' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Function.length」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="efc7f6cacc4a4de0fbf06fe1dbc214a41d90a71f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Function.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6033f1d90c62028fbbb9a636f403ddc5646a1903" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function.prototype.apply' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Function.prototype.apply」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="79a20eceac4f2a9634617e4768df8bb6ff80edf8" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function.prototype.bind' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Function.prototype.bind」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="38578ace3f0409c8726354ae249fda42bce1c98e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function.prototype.call' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Function.prototype.call」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7da1245f057387ec18e79519ea934ed71e8f98e0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Function.prototype.toString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0b9129e8b47fc04fddec5cc723f65b44d2c3b185" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Generator objects' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「ジェネレーターオブジェクト」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a495e258307976cd7a05d22db985e812840297b2" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Generator.prototype.next' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Generator.prototype.next」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d8a726bfe23bbdc2da04101fb359cff2069b2829" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Generator.prototype.return' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Generator.prototype.return」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bf50f5461162574631d1eceaf96e53874ca8d35e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Generator.prototype.throw' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Generator.prototype.throw」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6253c7c1c96e05b7eafceaf43f52aae6f77a7276" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'GeneratorFunction' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「GeneratorFunction」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="47492ad9ca39fcb04f69e2d23c9eefcb5eabfbcb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'GeneratorFunction.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「GeneratorFunction.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fb5a40c8dd733e54fd1b52cf0d9c79d122374f02" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Imports' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「インポート」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6f8d451d1f7b150a9357cf62840b1d4945bfaf7a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Infinity' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「無限」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="86f3c47e8317d483056d2ffe35e1c673df2b71cd" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Iteration' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「反復」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8cede01b8a9f4aceb474d3b382125f2a3791e850" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'JSON' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「JSON」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="82bf77a3986fcd8bf59dcfb0f8b930f72431fed7" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'JSON.parse' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「JSON.parse」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5755929efb7d109a2c5f0016baa1a9ea95a9d1a7" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'JSON.stringify' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「JSON.stringify」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f4c2581aee4b4d85514c54bccb01cf834d06646e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Labelled statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「ラベル付きステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2e796c00d9d7291b8962b4a69209d163c3becefb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Let and Const Declarations' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「LetおよびConst宣言」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="42944dd7bb66bb320b722fa5cd926d87c87b47db" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Lexical Grammar' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「語彙文法」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3e40887bf2be933e386432b750a87967620f017d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「マップ」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fc00077262d47aab888be3bcf9e9c397bdd7e09c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b0ec8bb5e99b080cfb67756354bab18ca5200967" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.clear' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.clear」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b92455d37b44d36804d5b754e161de5e5aa797ed" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.delete' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.delete」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c6cf0066ac2ca6290ed94555788d2f28e80c1758" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.entries' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.entries」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="82d635a6776df6839a3a241f61216a487be016b8" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.forEach' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.forEach」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ebf442ab94b8448de11b47dff5bb5a7ab62f5d79" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.get' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.get」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d321a35dfdfca065f3a7c3b2ef2274b2f4214192" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.has' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.has」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="87e4ebb10f7b3a94d10a984359c4958ba7a2d0aa" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.keys' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.keys」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="82be43a5b173328596216e92d27b72df73c31799" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.set' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.set」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b2932146b7903865eb8738ccde0c0a4fe61db724" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.size' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.size」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="57e58cb0ff9f292b9ea5ba5302983bfa37ef3be2" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype.values' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype.values」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="394baa6023f26003139fe0752df6ce93326d5c16" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype[@@iterator]()' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype [@@ iterator]（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="20b2a3421c3e747fe535f428575f0ef8fba49842" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Map.prototype[@@toStringTag]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Map.prototype [@@ toStringTag]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0b1fc304e9769fd69e8d4bfac53759112b3b5962" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「数学」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="40bcb6526244fd72acb1da47cf19fe20f1d2a1a3" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.E' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.E」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="166c023a63d068b8c4d4bae22d3ee70893b15e76" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.LN10' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.LN10」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="06e9bc5a394a5e34b58e525a89513a03eb4d4eeb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.LN2' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.LN2」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d1b0623379c786414383f9de07adbafd0b6853a1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.LOG10E' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.LOG10E」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="984341eb45bc41a29176e8228b6494020c6f2733" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.LOG2E' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.LOG2E」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6e7830068a12038effc7539450756ea19bf35a72" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.PI' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.PI」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2dac8a2b6cd0f41f7c7fe4523bd5896df156cd57" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.SQRT1_2' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.SQRT1_2」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="78e4e4be1c3d4845ffa4448a9c72b3ca03d5356f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.SQRT2' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.SQRT2」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ef4de5ecc59c138e529f6148d6541c172f21de08" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.abs' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.abs」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5b6d7084dbb8628c25724ee585545ebc279503da" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.acos' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.acos」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1cddc8b639ad56979ee32c9c2ff7d70ae0661ca4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.acosh' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.acosh」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9f4e1195682c041d1b2e55cf9e7f22b5e832f382" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.asin' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.asin」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8c136b7a96cc98a5029bbeff523c2297755e93f3" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.asinh' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.asinh」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="08939806171639870301b3f126ab2cf43ae4410f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.atan' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.atan」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="11b09380a13531a89dc2dcc2b46d218234aa7a66" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.atan2' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.atan2」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="38a5161f88a7abd5d179cda332eebd8ae237e7a0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.atanh' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.atanh」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="95d87a2f8166154210ffcbc34b71e825416bbebc" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.cbrt' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.cbrt」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="947d189c7e717854bca27918fa7c8e980ad81e86" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.ceil' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.ceil」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ae4714e64ceb8f8c1c25e0460be1a5223e1b2f51" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.clz32' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.clz32」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="369b95ce46a9cfa0115149d600a0799133d58c7d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.cos' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.cos」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8768d93f347c90fb25953b62dc984755802854d5" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.cosh' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.cosh」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7180fff4fc8c099253cca2ae3f6fdcdfa27fc2f9" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.exp' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.exp」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9ae60e0945f3a21c193a177cfb8773513e521d1d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.expm1' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.expm1」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0f740762891c024b08530f1a8a9e2efc99290f07" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.floor' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.floor」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e2a02d592dfa1c1f5dcaaf5fde341ea2ddfb113a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.fround' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.fround」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a64b8253ab2d85fc692adacab84775dbd306ce94" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.hypot' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.hypot」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2a938b84865c0f7def3952cbf527d410396f27d3" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.imul' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.imul」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9537bfb0cb976f020bd0147b815490ef40e49c2c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.log' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.log」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b180ec5ea423c8e6fdaee6074d5e8dd943120b60" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.log10' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.log10」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bd27cba2aa60a623741b43c21d989a2022bdcb59" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.log1p' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.log1p」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0bc53cd20471162a13d4ed8beb0f7c5797782bc3" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.log2' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.log2」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7a00dfbf81060226c3f4e2e3c832d55cd493ded9" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.max' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.max」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3e0e3b9f53781fe6f6b93f26d6a31af0fef32695" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.min' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.min」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="19f0c24a4ced4491decc5bf26a9ade6703d981db" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.pow' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.pow」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9749e288c79fcc2e066343f12f53cf227ac3f408" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.random' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.random」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e18edece4f2dff16ae8ebc8d0d6b0f699ac6549c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.round' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.round」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e2e84a7b807d775efc2e67b5fc6a8f6017b5f93f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.sign' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.sign」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c36aa3381b21a268291ac1f15efba4dc3a6453a0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.sin' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.sin」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4e294cf2e4a782acff7ad3cdad223f91f0de08f2" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.sinh' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.sinh」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="08fe46699e2ce5774c5d78f07afc38ea5501405e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.sqrt' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.sqrt」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="dec4744b64b8f9b5810d616c511980f8bb5ef557" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.tan' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.tan」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8260f8bb2dded337f3196dda431f88b531aaf2fb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.tanh' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.tanh」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f069b53d6015ec47bb9d510ba303ead879095089" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Math.trunc' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Math.trunc」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9babcfd79311e2888b78a5a6ff10c3c9d9079eb2" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Method definitions' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「メソッド定義」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f7f8a3a715a36e8370215df24c1793b94f05addc" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'NaN' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「NaN」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9ee6a417d727fa428f9c38015c73f77e0fc511a4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'NativeError' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「NativeError」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5cf8517d6031323340faca485aca2c89583931c4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'NativeError.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「NativeError.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0d7f8a67b1e1ecd501e72797603b82507e339de4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「番号」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fbfafb0ab522a412d94414258d1d3cd5a3f43e0c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.EPSILON' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.EPSILON」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="65f2d3ed5668b6472e09ee5665b6a95acd55e621" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.MAX_SAFE_INTEGER' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.MAX_SAFE_INTEGER」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0e6a9c69b02d66b64a606f352b91d715cf49ecb3" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.MAX_VALUE' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.MAX_VALUE」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="53fc1db94b809f22e4631a14ab7b7ce045a33bc1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.MIN_SAFE_INTEGER' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「Number.MIN_SAFE_INTEGER」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="06785f4ade94ff34f7489dfb5441de1bfb36114c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.MIN_VALUE' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.MIN_VALUE」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a9951faf2bdfb7e5bdd533daada72ddefd03c89c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.NEGATIVE_INFINITY' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.NEGATIVE_INFINITY」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="58e4811a0449ca88df6dc41c59b126f96527b337" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.NaN' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.NaN」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4920eb048d51bf51f58f37a69e2032b4ddd3505a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.POSITIVE_INFINITY' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.POSITIVE_INFINITY」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b6130a25a25f547c3806fb3d59296fb29dc8c70a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.isInteger' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.isInteger」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd340dfd1b6afbd49e7317b0a56f3aa12a732866" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.isSafeInteger' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.isSafeInteger」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="15f043fc486b47410e95f6e6981d14ad5199f824" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.isnan' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.isnan」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6cf09b09ea7f335deb597027059b893da34f7b00" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.parseFloat' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.parseFloat」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="661f6c103773e2e48f4125082e7f2e2608f1d49a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.parseInt' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.parseInt」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d54b35d7c1fd28423d6dfeee3cc56d352afc04bc" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.prototype.toExponential' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.prototype.toExponential」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0559101bdd300a60bf31186423d7d5661f39807e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.prototype.toFixed' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.prototype.toFixed」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e1602581502cf3b7f595256893b5583b8c6aab35" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.prototype.toLocaleString' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.prototype.toLocaleString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="62a59688c0480fb5f8abb92f1d1574ab20a30877" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.prototype.toPrecision' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.prototype.toPrecision」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c7427152cea8ec0b531e7a8d9bc5da434fe07eeb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.prototype.tostring' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.prototype.tostring」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="26fc17c2905d320767719965e13b26d23610d3cc" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Number.prototype.valueOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Number.prototype.valueOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5241148514283c1fa44745d343543327dc541d75" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object Initializer' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「オブジェクト初期化子」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6fa2cb2384c495167572a1edeabd172569ae3231" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「オブジェクト」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3199347f3cb843bc24696d083c63ff654743b132" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.assign' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.assign」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ce4dc39527de2d5bf8bf54f5f7039b92adb5fa22" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.create' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.create」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="acb5473c4df51b87cb748c117bfa66745581031c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.defineProperties' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.defineProperties」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ef02490f6fa90ddfc96d7d387a55757ccfa441c8" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.defineProperty' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.defineProperty」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="899c359985c770a5d7c3032b3ae308b998057f70" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.entries' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.entries」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cc8fd40ca33cbabb817a139635deef4fd60ab500" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.freeze' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.freeze」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1d2e2f6bb7621f4e1f9ddc514b1d4beb932d3d78" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.getOwnPropertyDescriptor' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.getOwnPropertyDescriptor」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5405305a2eb39f8162722a49b336a24ea5f4fa24" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.getOwnPropertyDescriptors' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.getOwnPropertyDescriptors」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b6a6af98d5f43b6b6b7d835f5ee591a53601c059" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.getOwnPropertyNames' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.getOwnPropertyNames」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="94b3b97b1e4ab4878747d8c3fe7b602be79aed88" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.getOwnPropertySymbols' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.getOwnPropertySymbols」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c7fa5d5a6725c9fd67f2420091c125dde36e8305" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.getPrototypeOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.getPrototypeOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cadb4793220db7edc90bf347e13d28edd2db0e78" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.is' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.is」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="38ca8032e01677c6fae1ab22a4f920d5587c1bc8" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.isExtensible' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.isExtensible」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="29171442e0b26da2b65c8c59444c05eca5190032" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.isFrozen' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.isFrozen」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1f469b440a0b952b97fc8871289773e9b6db0098" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.isSealed' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.isSealed」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="dc193a30b53d9ffbb69f544f8a22db65d89766cb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.keys' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.keys」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="90405fffb50880631c01ca3c020ff208b4b36a3b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.preventExtensions' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.preventExtensions」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="707ad2fb4e6efdb9b63ef822facf3e8d3d3b68f9" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0f83c2cf9c2a2ceed24a803f26e62f07276ea812" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.__defineGetter__()' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype .__ defineGetter __（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a4ece6dfdadd1f3b7df964e0a3674e0ff9a31b08" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.__defineSetter__()' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype .__ defineSetter __（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b548e1e290a7cec36526ba02db03855efdc873c2" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.__proto__' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype .__ proto__」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c7f1d8eecdbdb75f1d4f3783c637cf1cf085ef72" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.constructor' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype.constructor」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="51bf573e7cc7029c9297a99a6818b420a3ea517d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.hasOwnProperty' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype.hasOwnProperty」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b3e20223370a6e79b6638fadb69430b94fd26c9a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.isPrototypeOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype.isPrototypeOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ea5ea3ad05619e5ddaa551a54d10086d2712c7ef" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.propertyIsEnumerable' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype.propertyIsEnumerable」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b185f3ba01958aa5d01e86a025c56d713f78ac02" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.toLocaleString' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype.toLocaleString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3e14841b6eeb523e7e66a1886eb3f282dd40e531" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype.toString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="441ea7e4c39c466b83d343474f8d10a1b0667067" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.prototype.valueOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.prototype.valueOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="64ff8a082b0fb7a4ee5a803119b2913e0d6938e2" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.seal' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.seal」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="73ef3d33b6272fb18b5a12fa39bbce639fc1f5f0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.setPrototypeOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.setPrototypeOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d59301a130f0dc1c917d6df954cd771e307209f1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Object.values' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Object.values」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b390d94e746e56ca73a56cda0dcc5cf7475da4c8" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Promise' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「約束」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="95fefc64cb506e9871d6bff333ff30478b209115" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Promise.all' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Promise.all」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a82af2ed51c99f1ebbf9d790642c4293237b8c3c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Promise.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Promise.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="98d1aa394a6e93c49c4a0a982f643a8a94f485b5" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Promise.prototype.catch' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Promise.prototype.catch」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="345e17f872e6d9dbd8bb963b4cfe4c049a3b5f1d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Promise.prototype.finally' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Promise.prototype.finally」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3793efa402aa2cd3e2a3179d5f20ce4fafcf1d3a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Promise.prototype.then' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Promise.prototype.then」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="881b430090b251e95c45cf0cd80b8dd6b5b0670f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Promise.race' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Promise.race」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="43076814b09956f97485ec6da58783fa23b0d91e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Promise.reject' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Promise.reject」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c92af88d55e84a0728cf7e6e3bb92063839f296c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Promise.resolve' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Promise.resolve」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="51a769b17d4ba1ed197158a0876c544c5a4eca53" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Property Accessors' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「プロパティアクセサー」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a632e7a96cc0f03e3e2988316233f2182f6ac8e3" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Proxy Object Internal Methods and Internal Slots' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「プロキシオブジェクトの内部メソッドと内部スロット」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2e096620e567a6219716ce296bd49deb7e0d113d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Proxy Revocation Functions' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「プロキシー取り消し機能」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="76f1948ecab47b5ba20b38f5e6aa460278e51528" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Proxy' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「プロキシ」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d2a67e4ffdd508ce771a67decc80d1b4c54c84da" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RangeError' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「RangeError」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="21652ba4c806db55b720de5f304fe7b696ede489" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'ReferenceError' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「ReferenceError」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="80f8bf1cc7ae72b3092fe9dd584bc1e983aeb9c4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「反映」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6f9d4a954fcf3ac9a0d9ef45a6c8e45143cb5dae" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.apply' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.apply」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ccc56314eaee8fb42ac7af1c70d9ae24aa7d628d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.construct' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.construct」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7a31ef9a2404f0fe623dcf863f12d9909bd0a1a2" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.defineProperty' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.defineProperty」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2735e641ca5081feea52f55957d1c2d355e8f058" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.deleteProperty' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.deleteProperty」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9a14bf5e49bc0b1f90f73f84d04891b9ed91adac" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.get' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.get」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e965b63f868f8f9e9cb9f752c7eb8dde6aadab3b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.getOwnPropertyDescriptor' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.getOwnPropertyDescriptor」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b66b73d6d3908d6310c14b1e7208066f759ddb8e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.getPrototypeOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.getPrototypeOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d105bfcdb73ae9ab636d852e8ea56ef2e8a1ed33" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.has' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.has」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="706f6f98a581f182a0d570e80c953fd8ea337cec" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.isExtensible' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.isExtensible」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="81677fab926f7f949346fbd6e890e0708ae6d7e5" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.ownKeys' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.ownKeys」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e57d87ad71c9db4ff71199b8a238fa5fd2078a3e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.preventExtensions' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.preventExtensions」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd983c1e05b2df55439950435a6a177d9c1855cf" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.set' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.set」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7f7baff1f025ad1049fd55dd58d7b962a266cf7c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Reflect.setPrototypeOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Reflect.setPrototypeOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1b599565727212e76d88372162ecddd5c93acc41" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8a491c632278c70dfb5666601654bd561d63d0f2" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.exec' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.exec」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3977710144f3ab18487b7913f32d40f6637a9672" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.lastIndex' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.lastIndex」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c7a8e0e5e620ef1ca414a0e6afdcb88bfad2daeb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1fb9473caedab1cbde68dffa17903b796c14347b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype.compile' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype.compile」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1014dc67e4c816bacacf34389374aeb974e33d67" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype.flags' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype.flags」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ec1de28688a0dae98ab17cb66f77e9e03d2e1f62" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype.global' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype.global」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="43a8138fcc0e620c56864565b22ed5d43264a2e6" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype.ignoreCase' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype.ignoreCase」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4a84d6f317982bdcf044f1497efe4b3cafc5de9b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype.multiline' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype.multiline」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1cc2e1db67eeb5b60e029372d59cebdb661dac96" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype.source' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype.source」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5a9dd3bd962592b099421039d917f445d15a4880" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype.sticky' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype.sticky」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1d449fa55ee92c587efecb52c497948c2b31ad1f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype.toString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bbcc540f23d950e1b6a77ef9b7c6ddfbca824267" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype.unicode' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype.unicode」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f2203683fab22363da6c05cc1aeb082a217521df" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype[@@match]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype [@@ match]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="31a567c3cf2c85aadf4fa88c2c4e126510510690" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype[@@replace]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype [@@ replace]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3a1f34587287ce757282f801a4897f017d940aee" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype[@@search]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype [@@ search]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7864623db62c738886afc4ba163193f5b2ee1448" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.prototype[@@split]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.prototype [@@ split]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4a10de9d9cf87020e73f7695addec58b80e9254e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'RegExp.test' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「RegExp.test」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8a7b0f58e6972f6a94c16daf4daa23a593ff2a74" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Relational Operators' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「関係演算子」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e45fd469d9b9ac9c25cf6fe66fe506dbd15e25ea" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Return statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Returnステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e6696eb0263627286954b8622cd7ad30feb5398d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「セット」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f2210630df3a3c7783cf233d1e863a3d62754976" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="278a5038e1414999eb0ba89741dbf0c1123d77b1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype.add' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype.add」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="34ed2b1b78253cdeb3e064af793a72b9da5ae3ea" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype.clear' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype.clear」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a9a645e79709e039af888c79dadff8d1758a8ef4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype.delete' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype.delete」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="12fe12d0a188d4add7bbfeac62fac1c51445872a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype.entries' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype.entries」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="346e5573e069e4063def3d31acc392eab7e7b72e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype.forEach' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype.forEach」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="067c892df28be9c33679814bc52845e0d8372be5" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype.has' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype.has」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0376b61b96c0535a4c83ba86f6c295620c002ae7" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype.size' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype.size」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4b4c89b94116b7a397e684398c4a6d1dc56c7092" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype.values' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype.values」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ab9589719e29d0c918c0dd500d40f2a70526c649" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Set.prototype[@@iterator]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Set.prototype [@@ iterator]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c058e8d4978d7bbc6fbf0b0ea922af36c2970230" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'SharedArrayBuffer' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「SharedArrayBuffer」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d7d3e7a97ab6db8520ec46619c94ba3996bb9a05" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'SharedArrayBuffer.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「SharedArrayBuffer.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ddc905275ae3a5eb00a6605809b9b8d3f7abb3a1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'SharedArrayBuffer.prototype.byteLength' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「SharedArrayBuffer.prototype.byteLength」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd967fc1280ed4f35abbfa24f0c3136f9d181ab7" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'SharedArrayBuffer.prototype.slice' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「SharedArrayBuffer.prototype.slice」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e6d71112a90e04cd6009b6cd85f911ef0a290607" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Strict Mode Code' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「厳密モードコード」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d8645fd48020103c1a8157b21391a7da6e61715e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「文字列」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9bc178ad2c1d7aa3bb96ba0f8afe44e7f2edfe75" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.fromCharCode' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.fromCharCode」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b26a95a9e311f6d082dea0efbbc1302ac93d1c35" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.fromCodePoint' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.fromCodePoint」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bb420ef0672d9eac451ef0f74b068939812d82ec" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="93f49fe584ebd0a5a5eae0eeb943530c9d8d3e0a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.big' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.big」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ab7958a9663ae7c40ab2455d1c57cf5297022d6f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.blink' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.blink」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c9f63ca2c23a4728e0a6af00ed154387acfb785e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.bold' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.bold」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cf4c3246e2b8f33cb2d2aae02d48283bcb205011" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.charAt' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.charAt」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8559d59028a1e1fa9c71c336bc452d55dd30a642" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.charCodeAt' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.charCodeAt」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d157614977aad62689b4f877fa09d067abdba96a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.codePointAt' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.codePointAt」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3f637f5862b8fb4d7c75449dea5ff8c760754576" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.concat' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.concat」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bfe960c842e07d93ba01e464ab5a2e65c9b20dcb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.endsWith' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.endsWith」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2f3736f3aeebcb32a05db6bcb4a32c7e68a9b442" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.fixed' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.fixed」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c97b2b3127d6b5b9466577d717d6fbf6c4e828c0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.fontcolor' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.fontcolor」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d06b50181f65dbe1e8f364a86a59697dee53dbf0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.fontsize' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.fontsize」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0e5aa1fcba5a371e73f66ff23d8e730573a59221" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.includes' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「String.prototype.includes」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="812e06fd05791820420e9c0b3eaa0a48d5a78e19" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.indexOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.indexOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ac24a44adeaaead407c21499ec1fc9a2d12cbfe0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.italics' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.italics」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0eac5ec7c528c0d17e1dcafa17ef9f9c30104ebe" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.lastIndexOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.lastIndexOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fafa552f24ec01b94411f9afc976c6732380e1b9" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.length' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.length」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9be803271d04e11a3e4d74488df59f3c8c03a14b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.link' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.link」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="90aadcdb9691f53b2b1f78036d31a7411789b686" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.localeCompare' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.localeCompare」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9bf7f2a74593920002d142a0c41ca4e19008006e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.match' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.match」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5174b86009faeb168c6c152fb66e87fc7a71ae72" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.normalize' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.normalize」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="49231eca7f9ca77eb52f2c8b883db837cbd3c840" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.padEnd' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.padEnd」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b6424282d70af98ed0c804654fa53e7782d005bb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.padStart' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.padStart」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="79531d8f8b18082afc25ba9bc63b42091f6d8a1f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.repeat' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.repeat」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2e380b5396cba7f550ee09858d616ddec2199d08" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.replace' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.replace」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a1440d7536694b90ce7bf072284577e6fa63c5ce" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.search' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.search」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2cee7dfd789380fffb52095a08a112be40bb8aca" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.slice' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.slice」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="dfff7a5e2d506aa97b8ecff496bc9b037e5f83c5" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.small' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.small」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ab9e5f51ee86b32e0fbff39563c239335c573d88" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.split' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.split」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ebd0bc8eb7b55b0ae1755794de22aea9735d79b5" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.startsWith' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.startsWith」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f6a5b71b779065b4297d3d63b63d7ebc81eeb4ba" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.strike' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.strike」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a689add63365567d4bdc6319deef64595f8d67e8" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.sub' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.sub」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eadb9c40bf4b16b78627ceaee7c25963905406c9" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.substr' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.substr」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="99b199b904a9398deda5754e57a2f0c761774434" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.substring' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.substring」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4c396d6b4c1d046613045e55f3352b20e74a5577" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.sup' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.sup」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="88db20a88f35a02fb442aac882650baf48c6b357" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.toLocaleLowerCase' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.toLocaleLowerCase」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ee7441aa2aac0d3356b08ef563cb26f3a4e8cec4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.toLocaleUpperCase' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.toLocaleUpperCase」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8b2cddd0ef02ff6dedf5ca8e17374760a354dfc2" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.toLowerCase' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.toLowerCase」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="acf2c4383e14cf05c2ab8d91304b27a91d8ce1a8" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.toString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2204743fd3749aec88c5e7bdecbd1149eebe5a70" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.toUpperCase' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.toUpperCase」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="80fb6de4ad196cf11af43dceab93d47da46ce700" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.trim' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.trim」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="83a02ca34d46898039fba0d21b22ecf67bd696a0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype.valueOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype.valueOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="69752c8a603a5ff7de67bde414d5654b72bdf52f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.prototype[@@iterator]()' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.prototype [@@ iterator]（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3716a699d51279ac8e9a7174f022b4f6578fb5c0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'String.raw' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「String.raw」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fbdf1a467211c01cb2baf6a48414b74947e1db81" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「記号」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="689a3b307664b7989b43b1d66168d16070f4f18b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.for' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「Symbol.for」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bf94c9a57ee975041e2ff66cfbe2460b640482d1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.hasInstance' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.hasInstance」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4f65ccb03dd1f5dd887beaededabec7829e0ceda" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.isconcatspreadable' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.isconcatspreadable」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="07e3b97f5b158417114598217f225a4122ac7566" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.iterator' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.iterator」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="92de5bf3efb9476e909c9c8c26a83c8abf401027" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.keyFor' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.keyFor」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="853b4d3b067d964929fcc8967722b59ef0a9b9d6" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.match' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.match」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e88f7edf38f961c0af1081a007d8c2b07a6c4f71" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4e86fc0b54148c764f44def8e84ab6a22f18bb4c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.prototype.@@toPrimitive' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.prototype。@@ toPrimitive」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2abb9348b56b02e072c6dd1cbe094d7976ad2b52" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.prototype.toString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ef70e2bd82b2c4f9b729c89796d92040390333df" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.prototype.valueOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.prototype.valueOf」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7f2c28183523aa4791e4c0f245bacae7f29ed852" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.replace' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.replace」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1e98db613bbfa2838372e45e60f7ec2e4d787fee" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.search' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.search」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0f790eb7402c7787197f893ba99c7c5b6c559247" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.species' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.species」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="493f3e98dc3792f182f3ecd0444dff09a4f69614" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.split' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.split」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d4daeca1ad4a03ceee1ff38906131bdbe22d2059" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.toPrimitive' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.toPrimitive」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e15dd13e275b535a8a560028d22e342cf01cca36" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.toStringTag' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.toStringTag」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f8e5ff09ae8b8458830de988fe59cc5014d03253" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Symbol.unscopables' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「Symbol.unscopables」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="01ff7983af663f252a673874b0003c52c4ab5947" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'SyntaxError' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「SyntaxError」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c16eb1de9f336d6cc10e7bb47ced088202c4c945" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Template Literals' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「テンプレートリテラル」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="40f782faff72b37f10e0f117325fd181fd4319de" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The Grouping Operator' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「グループ化演算子」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5fa3891ae5a03589e3882468f6f8f0f22fee2296" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The delete Operator' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「削除演算子」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e41850c8452a205c4366a3a95e6eb57ace403753" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The new Operator' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「新しいオペレーター」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="08c3b92475dfad223bf4d332c6519f621b2c156b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The this keyword' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「このキーワード」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="dd63efc13c6e5318360e68609a1dc6a5e142db66" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The typeof Operator' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「The typeof Operator」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cfe00977d8c82b08e413b6fc146ce591636d6118" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The void Operator' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「The void Operator」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9514ca3adc0a652b2722a543d4b8f3ba704ce68d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'TypeError' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「TypeError」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2236d577b286547c41c8577aa545fc3fbd090153" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'TypedArray Objects' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「TypedArrayオブジェクト」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="acd4bb142759545f168234428a5e22927e62ca34" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'TypedArray constructors' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「TypedArrayコンストラクター」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="77eb34ca1346976dbc9a2f0c44fd7acaa095fd70" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'TypedArray.BYTES_PER_ELEMENT' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「TypedArray.BYTES_PER_ELEMENT」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="af2db7b633371755bad80cacdab59193fc7278e6" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'TypedArray.name' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「TypedArray.name」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d8054b7b50cd68145274ca1180752eaa80d7564c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'URIError' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「URIError」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="778d7499419302ae85d75ce3f5dbf4170a2d52d4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakMap' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「WeakMap」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="43508cb3cab3f1794ffab929a49cd881ba425b9e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakMap.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「WeakMap.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3ba8fcaa79339192b9f6f0bff6ef3b0db799d54a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakMap.prototype.delete' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「WeakMap.prototype.delete」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8f0af8b453233daf40fd9b11cca98f24b66a8b94" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakMap.prototype.get' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「WeakMap.prototype.get」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a555f28e66bf0a6d8f83e3b8186e43bd1e3cc75a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakMap.prototype.has' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「WeakMap.prototype.has」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fe540966faf94ce247c1ca2636ae4b16b3c65f00" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakMap.prototype.set' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「WeakMap.prototype.set」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="af8c7e66ddefb074d75afbf5ae39df777c160b81" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakSet' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「WeakSet」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fba7e6423f388535bc2aaf40bddddf40e11e408f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakSet.prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「WeakSet.prototype」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="72ff9ca74e2bed73629c35c8fb25e4389ead55b5" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakSet.prototype.add' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「WeakSet.prototype.add」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b8658cfd8c06ade6e48890049e4179092f836e08" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakSet.prototype.delete' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「WeakSet.prototype.delete」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="748468630265fb8af9c46b0dd1318f5ab1a954a6" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'WeakSet.prototype.has' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「WeakSet.prototype.has」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7746a8ec93f8446f22c690ae57e5e3b7ef7a9d0d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Yield' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「利回り」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ed1b3fc319e9693c97f50bfc4d0e38ca8ae5e371" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[Call]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[Call]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1488f08cf7827249d49beb20582038c50867dcb7" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[Construct]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[Construct]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6ca9bfd9e79fedc1c09f3525b10ff1eaae4e8046" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[DefineOwnProperty]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[DefineOwnProperty]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1b850cbe8ff15262f38347ae51fbf80d3830bf88" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[Delete]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[Delete]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f5af16a909da0e455521664fe9dedc3d026f835e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[GetOwnProperty]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[GetOwnProperty]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="34a663c1c8cd6cea534b534cfcf5da0a50641b9d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[GetPrototypeOf]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[GetPrototypeOf]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ca0458a00f00d808f841ff69bd342bf284106998" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[Get]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[Get]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9111bd3573dba091d610e4dfc729318dbcf0fa5d" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[HasProperty]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[HasProperty]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bc300ae4477f5475d87acdc216d24546fc897e09" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[IsExtensible]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[IsExtensible]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="36484c7fa5da66234133f314efdd6c5ff2e00b36" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[OwnPropertyKeys]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[OwnPropertyKeys]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="971a1f0e48bca42d75c8a54f72c26621777023c1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[PreventExtensions]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[PreventExtensions]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d47bfc51d360125e5669f5c5bb05be59a7fe2f9c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[SetPrototypeOf]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[SetPrototypeOf]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="04ba73cc01b4c8b37b24a64d1bda2a8f1dd14d6b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of '[[Set]]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「[[Set]]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="aa95d7bd0fb7333702cc1b8d0a3ac125810f3635" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'arguments object' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「引数オブジェクト」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e17e329814218169b8a5db00fe0a1b38513dbde1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'async function' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「非同期関数」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="69e21ca2c3a50567bb6902c7c4d979115c60faaa" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'async functions' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「非同期関数」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3a0bb0f26cffb012eaa61cf30ab8036ca1046c41" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'decodeURI' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「decodeURI」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3ac92eeee112737db03930ecfda94d920da86a89" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'decodeURIComponent' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「decodeURIComponent」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4593bd7b7d670522f11d4fed1a8c720269d0b718" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'do-while statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「do-whileステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8ba11a53fd9748dc6116a980a402f8e859c24dd0" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'encodeURI' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「encodeURI」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c9528d04354bdee79e859028b6207f3b8402fed1" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'encodeURIComponent' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「encodeURIComponent」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="54bed952d234920a486ccbfed760f99def19cc2e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'eval' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「評価」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="13dc2a86916e0132197ba7154abeeef46d219a1e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'extends' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「拡張」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cd616c4ba73fe62662d5a5fab1f5a14aa019a04b" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'for statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「forステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="becc50be4146c3dc1ee828f6d355b37b45e91b4f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'for...in statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「for ... inステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4aecaa60941f3c61d8178f74669a849dfb1b128c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'for...of statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「for ... ofステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="375984877f565b875136f91d1bf0f056471f4d70" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'function*' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「function *」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3c8f1df74ddea143b98bb6d98d9eca3fe35fb634" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get Array [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「get Array [@@ species]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2dd488497ac56128117793aac5ab95436db32b0f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get ArrayBuffer [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「get ArrayBuffer [@@ species]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="67cba4bfa395699bbf1ca627be6d6c7ed1088047" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get Map [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「get Map [@@ species]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7efe48cf4711551e2ff3484ab8c28aaca20a85de" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get RegExp [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「get RegExp [@@ species]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1d9d327dfee9cbf4d0cbdb83076626736614a63a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'get Set [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「get Set [@@ species]」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="203a9e5a6fa893ff7c437dbc1d61cfee092c35dc" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'if statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「ifステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="56d2b0a020136926b65ca1d561661ac25bb4c259" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'isFinite' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「isFinite」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="42fe87993ba80266c4883348667264562414938a" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'isNaN' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「isNaN」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d1bdbac3aa7ec9b888b683eb4bb8bdf02c69db2e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'name' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「名前」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f56d2b40cfdcfc845cfebb60182bc34ccd7c2252" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'null value' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「null値」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fcb1d3bb2a0ecb2239ec4f53353e69f44cf7ae0f" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'parseFloat' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「parseFloat」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="518059aca334c4b838a9f7d492159ac63ec21170" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'parseInt' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「parseInt」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd7d4c6e892f4a5a65237b37587cc745ca68d60c" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'super' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「スーパー」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a0aa1f5563fdd84cfb61e18f28a6fecf3c41c081" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'switch statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「switchステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a47a621cb9903cbcdedaa9e5c4b88fddcbcf5dbc" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'throw statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「スローステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8e9e3039d8ae448cb4710647dfd10723330bb0bb" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'try statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様での「tryステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0328e3a19f174b12604c2ea64636e23748582cf4" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'undefined' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「未定義」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="38ef33a7df16a22ffac2e163b33bd845a8d7177e" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'variable statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「変数ステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f06a84b44c0f4cd2094c12e7420a23a4ca272182" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'while statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「whileステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="886a4bd2b766d6989a8c99e842c495a13d437c63" translate="yes" xml:space="preserve">
          <source>ECMAScript Latest Draft (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'with statement' in that specification.&lt;/small&gt;</source>
          <target state="translated">ECMAScript最新ドラフト（ECMA-262）&lt;br/&gt;&lt;small&gt;その仕様における「withステートメント」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="319cb5b84263d677b53281f837665fe543259523" translate="yes" xml:space="preserve">
          <source>ES 5.1: generic array-like object as &lt;code&gt;arguments&lt;/code&gt;</source>
          <target state="translated">ES 5.1： &lt;code&gt;arguments&lt;/code&gt; としての一般的な配列のようなオブジェクト</target>
        </trans-unit>
        <trans-unit id="366084ca917fc8b3421b6421c84c24e6b9a60661" translate="yes" xml:space="preserve">
          <source>ES Intl 2017 added the &lt;code&gt;locale&lt;/code&gt; parameter.</source>
          <target state="translated">ES Intl 2017は &lt;code&gt;locale&lt;/code&gt; パラメータを追加しました。</target>
        </trans-unit>
        <trans-unit id="68d0144cd039daa1b1be92d7cf1dea0c53032a0f" translate="yes" xml:space="preserve">
          <source>ES2015 Implementation</source>
          <target state="translated">ES2015の実施</target>
        </trans-unit>
        <trans-unit id="b19178f11aca1b546e64d713a3f2c44a3f104e12" translate="yes" xml:space="preserve">
          <source>ES2015 behavior for non-object argument</source>
          <target state="translated">ES2015の非オブジェクト引数の動作</target>
        </trans-unit>
        <trans-unit id="42186bb00dcd9183c0d58d4df894604281c36fdf" translate="yes" xml:space="preserve">
          <source>ES2015 generators</source>
          <target state="translated">ES2015ジェネレータ</target>
        </trans-unit>
        <trans-unit id="6fb992b2c855d919f4c60931e795d91a96cd5097" translate="yes" xml:space="preserve">
          <source>ES2015 says that if &lt;code&gt;shouldDefineZero&lt;/code&gt; is false, then &lt;code&gt;zero&lt;/code&gt; should never be defined, since the block never executes. However, it's a new part of the standard. Historically, this was left unspecified, and some browsers would define &lt;code&gt;zero&lt;/code&gt; whether the block executed or not.</source>
          <target state="translated">ES2015は、 &lt;code&gt;shouldDefineZero&lt;/code&gt; がfalseの場合、ブロックは実行されないため、 &lt;code&gt;zero&lt;/code&gt; を定義するべきではないと述べています。ただし、これは標準の新しい部分です。歴史的には、これは未指定のままであり、一部のブラウザはブロックが実行されたかどうかにかかわらず &lt;code&gt;zero&lt;/code&gt; を定義していました。</target>
        </trans-unit>
        <trans-unit id="bee29154ab9fa90818a8d86dfd2b1f59a89e61e4" translate="yes" xml:space="preserve">
          <source>ES2015 version</source>
          <target state="translated">ES2015年版</target>
        </trans-unit>
        <trans-unit id="4d2108462ce956680d3ccb18eed5060003361838" translate="yes" xml:space="preserve">
          <source>ES2016 behavior</source>
          <target state="translated">ES2016の行動</target>
        </trans-unit>
        <trans-unit id="1212f2500040ec8534cfc3f19859d28a9feb6168" translate="yes" xml:space="preserve">
          <source>ES2018 revision of illegal escape sequences</source>
          <target state="translated">ES2018不正脱出シーケンスの修正</target>
        </trans-unit>
        <trans-unit id="f5bb6ec1eafb3f8fd1eefdd21b0b2da7b90a64fe" translate="yes" xml:space="preserve">
          <source>ES5 Custom Error Object</source>
          <target state="translated">ES5 カスタム エラー オブジェクト</target>
        </trans-unit>
        <trans-unit id="85f9ef4614017840809310753dd782db5979b72d" translate="yes" xml:space="preserve">
          <source>ES5 version</source>
          <target state="translated">ES5バージョン</target>
        </trans-unit>
        <trans-unit id="fcde29ed9fdaf87cf2e0a4971e0fe66222320319" translate="yes" xml:space="preserve">
          <source>ES6 Custom Error Class</source>
          <target state="translated">ES6 カスタム エラー クラス</target>
        </trans-unit>
        <trans-unit id="30628f83893b8c0a106c9fd953261e35d79064b3" translate="yes" xml:space="preserve">
          <source>ES6 In Depth: &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;</source>
          <target state="translated">ES6の詳細： &lt;code&gt;let&lt;/code&gt; および &lt;code&gt;const&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="605293d0d73b48d8d5336d73fcabe830a4f15d8d" translate="yes" xml:space="preserve">
          <source>ESNext comprehensions can have multiple &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; components.</source>
          <target state="translated">ESNext内包表記には、複数の &lt;code&gt;if&lt;/code&gt; および &lt;code&gt;for&lt;/code&gt; コンポーネントを含めることができます。</target>
        </trans-unit>
        <trans-unit id="9965edc936d3809465606f02c7c160e073a441a1" translate="yes" xml:space="preserve">
          <source>ESNext comprehensions create one scope per &quot;for&quot; node instead of the comprehension as a whole.</source>
          <target state="translated">ESNext内包では、内包全体ではなく、「for」ノードごとに1つのスコープが作成されます。</target>
        </trans-unit>
        <trans-unit id="ea4abbc564d29187e364b7931f8ae1bda7fa121a" translate="yes" xml:space="preserve">
          <source>ESNext comprehensions only work with &lt;code&gt;&lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; and not with &lt;code&gt;&lt;a href=&quot;../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; iterations.</source>
          <target state="translated">ESNext内包表記は &lt;code&gt;&lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のみ機能し、 &lt;code&gt;&lt;a href=&quot;../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 反復では機能しません。</target>
        </trans-unit>
        <trans-unit id="a1fe1fbcdf4d7b62a39fbe05ec1bf1daf3d1c4a7" translate="yes" xml:space="preserve">
          <source>ESNext comprehensions start with &quot;for&quot; instead of the assignment expression.</source>
          <target state="translated">ESネクストの理解度は、代入表現の代わりに「for」で始まります。</target>
        </trans-unit>
        <trans-unit id="d7c86a71815a34f2fa40ec5092a9660df3a61e40" translate="yes" xml:space="preserve">
          <source>Each argument can also be set or reassigned:</source>
          <target state="translated">各引数は、設定や再割り当ても可能です。</target>
        </trans-unit>
        <trans-unit id="90fef6634d1285ee6c9e820b05b924c2802dd22a" translate="yes" xml:space="preserve">
          <source>Each bit in the first operand is paired with the corresponding bit in the second operand: first bit to first bit, second bit to second bit, and so on.</source>
          <target state="translated">第1のオペランドの各ビットは、第2のオペランドの対応するビットとペアになっています:第1のビットから第1のビットへ、第2のビットから第2のビットへ、というように。</target>
        </trans-unit>
        <trans-unit id="a2c2445e6bf70260fa646b290bfde12ba3769ead" translate="yes" xml:space="preserve">
          <source>Each iteration, the loop increments &lt;code&gt;n&lt;/code&gt; and adds it to &lt;code&gt;x&lt;/code&gt;. Therefore, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; take on the following values:</source>
          <target state="translated">ループごとに、ループは &lt;code&gt;n&lt;/code&gt; をインクリメントし、それを &lt;code&gt;x&lt;/code&gt; に追加します。したがって、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; は次の値を取ります。</target>
        </trans-unit>
        <trans-unit id="13ff20305cbad3a9b28fee7aeb6474d07915a9c2" translate="yes" xml:space="preserve">
          <source>Each of these operators will call the &lt;code&gt;valueOf()&lt;/code&gt; function on each operand before a comparison is made.</source>
          <target state="translated">これらの各演算子は、比較が行われる前に、各オペランドの &lt;code&gt;valueOf()&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5b64d83b590f0d83ea4cc47b642d4ecb7594f32e" translate="yes" xml:space="preserve">
          <source>Each value is visited once, except in the case when it was deleted and re-added before &lt;code&gt;forEach()&lt;/code&gt; has finished. &lt;code&gt;callback&lt;/code&gt; is not invoked for values deleted before being visited. New values added before &lt;code&gt;forEach()&lt;/code&gt; has finished will be visited.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; が完了する前に削除されて再度追加された場合を除き、各値は1回アクセスされます。アクセスする前に削除された値に対して &lt;code&gt;callback&lt;/code&gt; は呼び出されません。 &lt;code&gt;forEach()&lt;/code&gt; が完了する前に追加された新しい値が訪問されます。</target>
        </trans-unit>
        <trans-unit id="3e968edb18e059adb91fdd108f6f75cc7872f8a9" translate="yes" xml:space="preserve">
          <source>Each value is visited once, except in the case when it was deleted and re-added before &lt;code&gt;forEach&lt;/code&gt; has finished. &lt;code&gt;callback&lt;/code&gt; is not invoked for values deleted before being visited. New values added before &lt;code&gt;forEach&lt;/code&gt; has finished will be visited.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; が完了する前に削除されて再度追加された場合を除いて、各値は1回アクセスされます。アクセスする前に削除された値に対して &lt;code&gt;callback&lt;/code&gt; は呼び出されません。 &lt;code&gt;forEach&lt;/code&gt; が完了する前に追加された新しい値にアクセスします。</target>
        </trans-unit>
        <trans-unit id="45b6e2c2608c97f1c299ccac34ca829676776480" translate="yes" xml:space="preserve">
          <source>Early termination may be accomplished with:</source>
          <target state="translated">早期終了は</target>
        </trans-unit>
        <trans-unit id="ee9e0d0add9d9d71ab8905d21c6e324abe881ed9" translate="yes" xml:space="preserve">
          <source>Early versions of JavaScript did not allow named function expressions, and for this reason you could not make a recursive function expression.</source>
          <target state="translated">JavaScript の初期のバージョンでは名前付き関数式を許可していなかったため、再帰的な関数式を作成することができませんでした。</target>
        </trans-unit>
        <trans-unit id="fedc433fa409cbc9c8c146d865ad7e3e089c12b2" translate="yes" xml:space="preserve">
          <source>Easier way would be using &lt;a href=&quot;from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">より簡単な方法は、&lt;a href=&quot;from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;メソッドを使用することです。</target>
        </trans-unit>
        <trans-unit id="8440b9eb7d03917b2509b5baeab2a299ce257eb0" translate="yes" xml:space="preserve">
          <source>Edge</source>
          <target state="translated">Edge</target>
        </trans-unit>
        <trans-unit id="60982772a3b941fa0d0b88783b4e0e2be11132a4" translate="yes" xml:space="preserve">
          <source>Edge 12 included Symbol properties in &lt;code&gt;JSON.stringify()&lt;/code&gt; output.</source>
          <target state="translated">Edge 12では、 &lt;code&gt;JSON.stringify()&lt;/code&gt; 出力にSymbolプロパティが含まれていました。</target>
        </trans-unit>
        <trans-unit id="40943d342558e930e5fd4552c5671ad9d18db865" translate="yes" xml:space="preserve">
          <source>Edge Mobile</source>
          <target state="translated">エッジモバイル</target>
        </trans-unit>
        <trans-unit id="afc44b104f02b499cc7c61ae7a78c653927bbf0a" translate="yes" xml:space="preserve">
          <source>Edge mobile</source>
          <target state="translated">エッジモバイル</target>
        </trans-unit>
        <trans-unit id="add94fac827b3ed02fee4c1b72173331645c25b8" translate="yes" xml:space="preserve">
          <source>Edit this page on MDN</source>
          <target state="translated">MDNでこのページを編集する</target>
        </trans-unit>
        <trans-unit id="008363165bb78778efcb0dca85b814a955e2e4c9" translate="yes" xml:space="preserve">
          <source>Either the proxy or an object that inherits from the proxy.</source>
          <target state="translated">プロキシまたはプロキシを継承するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="e4b38e596f9fec7bf19c0bf4e8aa8e2495f84ef8" translate="yes" xml:space="preserve">
          <source>Element to begin at. The offset is inclusive. The whole array will be included in the new view if this value is not specified.</source>
          <target state="translated">開始する要素。オフセットは包括されます。この値を指定しなかった場合は、配列全体が新しいビューに含まれます。</target>
        </trans-unit>
        <trans-unit id="acb8402192e4fb921e99c5e800b0a74aca0e7536" translate="yes" xml:space="preserve">
          <source>Element to end at. The offset is exclusive. If not specified, all elements from the one specified by &lt;code&gt;begin&lt;/code&gt; to the end of the array are included in the new view.</source>
          <target state="translated">終了する要素。オフセットは排他的です。指定しない場合、 &lt;code&gt;begin&lt;/code&gt; で指定したものから配列の最後までのすべての要素が新しいビューに含まれます。</target>
        </trans-unit>
        <trans-unit id="1f87f18bf82e7dbae16d9eb0650f3aae8bda7358" translate="yes" xml:space="preserve">
          <source>Element to locate in the array.</source>
          <target state="translated">配列内に配置する要素。</target>
        </trans-unit>
        <trans-unit id="e425304ea5ec65f451cb0ba16e364adf2093e3f7" translate="yes" xml:space="preserve">
          <source>Element to locate in the typed array.</source>
          <target state="translated">型付けされた配列の中に配置される要素。</target>
        </trans-unit>
        <trans-unit id="3fcf8d1c329b8253b505b459223fcce2eb650cc6" translate="yes" xml:space="preserve">
          <source>Elements of which to create the array.</source>
          <target state="translated">配列を作成する要素.</target>
        </trans-unit>
        <trans-unit id="4edeca08cc5462e94fa2a62326f82d8d7ada8bbb" translate="yes" xml:space="preserve">
          <source>Elements of which to create the typed array.</source>
          <target state="translated">型付き配列を作成するための要素.</target>
        </trans-unit>
        <trans-unit id="4f669dc718477856bed1799983b8c268355453b2" translate="yes" xml:space="preserve">
          <source>Eliminates some JavaScript silent errors by changing them to throw errors.</source>
          <target state="translated">エラーをスローするように変更することで、いくつかのJavaScriptのサイレントエラーを排除します。</target>
        </trans-unit>
        <trans-unit id="3159fe421b3221381b3c778dc1c3c26e4540be37" translate="yes" xml:space="preserve">
          <source>Empty</source>
          <target state="translated">Empty</target>
        </trans-unit>
        <trans-unit id="8b06cc60a0faec1d34759ef80750c8485d2c77d7" translate="yes" xml:space="preserve">
          <source>Empty properties</source>
          <target state="translated">空のプロパティ</target>
        </trans-unit>
        <trans-unit id="2b24691d5c7080c808dedfcbf53bd3691b21adf9" translate="yes" xml:space="preserve">
          <source>Empty regular expressions and escaping</source>
          <target state="translated">空の正規表現とエスケープ</target>
        </trans-unit>
        <trans-unit id="942d27c7af5f5f59f47387fe47c4d03fba2c4861" translate="yes" xml:space="preserve">
          <source>Empty statement</source>
          <target state="translated">空の文</target>
        </trans-unit>
        <trans-unit id="cc83d313611b2e46ae94b53ce46e3fa4cfe2b908" translate="yes" xml:space="preserve">
          <source>Emulating private members</source>
          <target state="translated">プライベートメンバーをエミュレートする</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="c6908437850b0a62847818edf8e745455743b14c" translate="yes" xml:space="preserve">
          <source>Encoding replaces each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character. An &lt;a href=&quot;../global_objects/urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; will be thrown if there is an attempt to encode a surrogate which is not part of a high-low pair, for example:</source>
          <target state="translated">エンコーディングは、特定の文字の各インスタンスを、文字のUTF-8エンコーディングを表す1、2、3、または4つのエスケープシーケンスに置き換えます。AN &lt;a href=&quot;../global_objects/urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; は&lt;/a&gt;高低ペアの一部ではないサロゲートを符号化しようとする試みがある場合、例えば、スローされます。</target>
        </trans-unit>
        <trans-unit id="de376448a12190aa5365a62c74c46bef27f69f33" translate="yes" xml:space="preserve">
          <source>End index, defaults to &lt;code&gt;this.length&lt;/code&gt;.</source>
          <target state="translated">終了インデックス。デフォルトは &lt;code&gt;this.length&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="322c5d3730703ae50125a473e7a7c3d0e9ef2301" translate="yes" xml:space="preserve">
          <source>Endianness</source>
          <target state="translated">Endianness</target>
        </trans-unit>
        <trans-unit id="08e6bb230ace6fe2dec5ddab148376adc14508a8" translate="yes" xml:space="preserve">
          <source>Engines implementing the &lt;a href=&quot;https://github.com/tc39/proposal-well-formed-stringify&quot;&gt;well-formed JSON.stringify specfication&lt;/a&gt;, prevent returning ill-formed Unicode strings. Previously, &lt;code&gt;JSON.stringify&lt;/code&gt; would output lone surrogates if the input contained any lone surrogates, which is invalid UTF-8:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tc39/proposal-well-formed-stringify&quot;&gt;整形式のJSON.stringify仕様を&lt;/a&gt;実装するエンジンは、不正な形式の Unicode文字列を返さないようにします。以前は、 &lt;code&gt;JSON.stringify&lt;/code&gt; は、入力に孤立サロゲートが含まれている場合にそれを出力していましたが、これは無効なUTF-8です。</target>
        </trans-unit>
        <trans-unit id="0a6a5a6f3f3e1c1e734d24998bd2ef1cd1b5f596" translate="yes" xml:space="preserve">
          <source>Enumerability and ownership of properties</source>
          <target state="translated">物件の列挙性と所有権</target>
        </trans-unit>
        <trans-unit id="83df7a7ef8fa21dd3116045758d3e9407ca3149d" translate="yes" xml:space="preserve">
          <source>Enumerable</source>
          <target state="translated">Enumerable</target>
        </trans-unit>
        <trans-unit id="7f6250896c39159050f59ba1d3ff514f1bcce762" translate="yes" xml:space="preserve">
          <source>Enumerable attribute</source>
          <target state="translated">列挙可能属性</target>
        </trans-unit>
        <trans-unit id="9b49d0d70a1607c9fad8021e99f66e56a4991075" translate="yes" xml:space="preserve">
          <source>Equal as assign</source>
          <target state="translated">代入と同じ</target>
        </trans-unit>
        <trans-unit id="7a9900d84e1403f9c455cfd34c5bb3f62971e633" translate="yes" xml:space="preserve">
          <source>Equality</source>
          <target state="translated">Equality</target>
        </trans-unit>
        <trans-unit id="71362d979907adc60ba86d3ba17c25f003c8f56e" translate="yes" xml:space="preserve">
          <source>Equality (&lt;code&gt;a == b&lt;/code&gt;)</source>
          <target state="translated">平等（ &lt;code&gt;a == b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="98b56faa4de659de77668e6fdb0c5048b62368de" translate="yes" xml:space="preserve">
          <source>Equality (==)</source>
          <target state="translated">平等(==)</target>
        </trans-unit>
        <trans-unit id="dc4db08c00f772e9f4335f656a22b0169bb27868" translate="yes" xml:space="preserve">
          <source>Equality comparisons and sameness</source>
          <target state="translated">平等比較と同質性</target>
        </trans-unit>
        <trans-unit id="b5c034869b40f53ede32b69dcb310e3bc762dc36" translate="yes" xml:space="preserve">
          <source>Equality operator.</source>
          <target state="translated">等価演算子。</target>
        </trans-unit>
        <trans-unit id="2a6aa35f8013684cff4ad26bb51395662e2921e2" translate="yes" xml:space="preserve">
          <source>Equality operators</source>
          <target state="translated">平等演算子</target>
        </trans-unit>
        <trans-unit id="d89759b49addc473526624ebc89a42f2cd513170" translate="yes" xml:space="preserve">
          <source>Equivalent C type</source>
          <target state="translated">等価Cタイプ</target>
        </trans-unit>
        <trans-unit id="7f2f6a15cf8da2b27e5a4af47b58e7ad71c0b3d9" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="translated">Error</target>
        </trans-unit>
        <trans-unit id="5da25ad570031cfc548ccf057713182fe2696bf6" translate="yes" xml:space="preserve">
          <source>Error Type</source>
          <target state="translated">エラーの種類</target>
        </trans-unit>
        <trans-unit id="32311e30ab1fda529fa41564dc2917ee8c384012" translate="yes" xml:space="preserve">
          <source>Error description. Similar to &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーの説明。&lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;message&lt;/code&gt; &lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="882278ab4950cb9a4a1bc7b234091508ed44599c" translate="yes" xml:space="preserve">
          <source>Error description. Similar to &lt;a href=&quot;message&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーの説明。&lt;a href=&quot;message&quot;&gt; &lt;code&gt;message&lt;/code&gt; &lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="ab66d40e43b787a9c62eb89b8c9d17b70a673d0d" translate="yes" xml:space="preserve">
          <source>Error instances</source>
          <target state="translated">エラーインスタンス</target>
        </trans-unit>
        <trans-unit id="93d7060cbfdc591a151db80cdf2519fe1a5363b9" translate="yes" xml:space="preserve">
          <source>Error message.</source>
          <target state="translated">エラーメッセージです。</target>
        </trans-unit>
        <trans-unit id="0723a3ada609dfca6e0b37961e51de874e64718b" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は&lt;a href=&quot;../evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では、&lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="e4c6cc4021c6b080a59bcaba117acf526da546dc" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では&lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="b75bd3b3dd9a49caba86743b4d47adbb43287e92" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は&lt;a href=&quot;../referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では、&lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="f7bea9550b074c1b4351cfb1950e0a7218577d08" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。が、ECMA-262指定されていること&lt;a href=&quot;../syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;、自身の提供しなければならない &lt;code&gt;message&lt;/code&gt; プロパティを、で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;あるSpiderMonkey&lt;/a&gt;、それが継承&lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6de471ad3ee173335365de7cf65af3098aeb08fc" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では、&lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="eadff62eab5e661a68d0bbd5bbe23f56947a074c" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;../urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;../error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は、&lt;a href=&quot;../urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では、&lt;a href=&quot;../error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="a600c05632bc0fa5b1bf31e8f001f908404a8225" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は&lt;a href=&quot;evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では、&lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="cc83699010f2697e2d3c6ccc27497708896537fc" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は&lt;a href=&quot;rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では&lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="5da0af4c7ec3a3542fddcaa142b9cff263b97517" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は&lt;a href=&quot;referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では、&lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="a0551692c93834e9bdacb8df76af1525d5a3baa1" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。が、ECMA-262指定されていること&lt;a href=&quot;syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;、自身の提供しなければならない &lt;code&gt;message&lt;/code&gt; プロパティを、で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;あるSpiderMonkey&lt;/a&gt;、それが継承&lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="73668cb889f5c262a078fc53c3d032d7e1a36271" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は&lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では、&lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="c8cc003dc5baa2ae36be3f3293fea9db2346c057" translate="yes" xml:space="preserve">
          <source>Error message. Although ECMA-262 specifies that &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; should provide its own &lt;code&gt;message&lt;/code&gt; property, in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;, it inherits &lt;a href=&quot;error/message&quot;&gt;&lt;code&gt;Error.prototype.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージ。ECMA-262は、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;が独自の &lt;code&gt;message&lt;/code&gt; プロパティを提供するように指定していますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;では、&lt;a href=&quot;error/message&quot;&gt; &lt;code&gt;Error.prototype.message&lt;/code&gt; を&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="135a3e61de2bbd9c2bb5be2be57b4679f9cffd6b" translate="yes" xml:space="preserve">
          <source>Error name.</source>
          <target state="translated">エラー名です。</target>
        </trans-unit>
        <trans-unit id="a4fb55bc74c7ea262716160fb8ddb3f98f3699d8" translate="yes" xml:space="preserve">
          <source>Error name. Inherited from &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラー名。&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;から継承されます。</target>
        </trans-unit>
        <trans-unit id="275aa09b2bc13bc23fb908aa783d6c9afd78a221" translate="yes" xml:space="preserve">
          <source>Error name. Inherited from &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラー名。&lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;から継承されます。</target>
        </trans-unit>
        <trans-unit id="79273058d33f8067d58ee34f9e91e49d8799fc7e" translate="yes" xml:space="preserve">
          <source>Error number.</source>
          <target state="translated">エラー番号です。</target>
        </trans-unit>
        <trans-unit id="8ea045e280d8c28c9b5e6d95b6e882549507bbcd" translate="yes" xml:space="preserve">
          <source>Error type</source>
          <target state="translated">エラータイプ</target>
        </trans-unit>
        <trans-unit id="791a69f19a69a95d78745770545e8504ba8e369a" translate="yes" xml:space="preserve">
          <source>Error types</source>
          <target state="translated">エラーの種類</target>
        </trans-unit>
        <trans-unit id="1d8bbcf33ba405b5f77d43f69b84de9111b514f4" translate="yes" xml:space="preserve">
          <source>Error.prototype</source>
          <target state="translated">Error.prototype</target>
        </trans-unit>
        <trans-unit id="18318b3c97276147519a683c71090a2f5b7059cb" translate="yes" xml:space="preserve">
          <source>Error: Permission denied to access property &quot;x&quot;</source>
          <target state="translated">エラーが発生しました。プロパティ &quot;x &quot;へのアクセス許可が拒否されました。</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="4db7eca5c7a9917e762143fbbd7a62c91fbf6448" translate="yes" xml:space="preserve">
          <source>Errors about undeclared variable assignments occur in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt; only. In non-strict code, they are silently ignored.</source>
          <target state="translated">宣言されていない変数の割り当てに関するエラーは、&lt;a href=&quot;../strict_mode&quot;&gt;厳密モードのコードで&lt;/a&gt;のみ発生します。非厳密なコードでは、これらは黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="4dcd9d9083dbae3e558b8e7b5727cc6dd3026e08" translate="yes" xml:space="preserve">
          <source>Errors displayed in the Web console may include a link to the corresponding page below to help you quickly comprehend the problem in your code.</source>
          <target state="translated">Web コンソールに表示されるエラーには、コード内の問題を素早く理解するために、以下の対応するページへのリンクが含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="f0aeebd45aef869ba5e27890ea53004a2f442d8b" translate="yes" xml:space="preserve">
          <source>Errors thrown</source>
          <target state="translated">投げられたエラー</target>
        </trans-unit>
        <trans-unit id="3b2b5bd7079ac0554d62c9d1d8e70228a3ff1f7c" translate="yes" xml:space="preserve">
          <source>Errors: Already has pragma</source>
          <target state="translated">エラー。既に pragma を持っています。</target>
        </trans-unit>
        <trans-unit id="8dd7e892cb81de4b6894c20a1e864c04c59e501f" translate="yes" xml:space="preserve">
          <source>Errors: Array sort argument</source>
          <target state="translated">エラー。配列のソート引数</target>
        </trans-unit>
        <trans-unit id="352ee08916a7f706a4b99a44d7b2a801535c99e6" translate="yes" xml:space="preserve">
          <source>Errors: Bad octal</source>
          <target state="translated">エラー。悪い八進数</target>
        </trans-unit>
        <trans-unit id="c82d315999f12151cb3bbbf40d74958365d0cdca" translate="yes" xml:space="preserve">
          <source>Errors: Bad radix</source>
          <target state="translated">エラー。悪い基数</target>
        </trans-unit>
        <trans-unit id="bab6d129b3965a3b234aaf0731671983d443ba34" translate="yes" xml:space="preserve">
          <source>Errors: Bad regexp flag</source>
          <target state="translated">エラー。不正な正規表現フラグ</target>
        </trans-unit>
        <trans-unit id="a924e5d71cfa3facbaf269cdd9ca304e4a69b1f0" translate="yes" xml:space="preserve">
          <source>Errors: Bad return or yield</source>
          <target state="translated">エラー。戻り値が悪い、または利回りが悪い</target>
        </trans-unit>
        <trans-unit id="a967564448e536cb4676271fdc49a5417cd39b14" translate="yes" xml:space="preserve">
          <source>Errors: Called on incompatible type</source>
          <target state="translated">エラー。互換性のないタイプで呼び出された</target>
        </trans-unit>
        <trans-unit id="38147040f226bcfc35f0f948e9f1ebcb8c8239f9" translate="yes" xml:space="preserve">
          <source>Errors: Cant access lexical declaration before init</source>
          <target state="translated">エラー。init の前に語彙宣言にアクセスできない</target>
        </trans-unit>
        <trans-unit id="1d17ec91c09d7cf983d488735d71ca4d3dcb4a02" translate="yes" xml:space="preserve">
          <source>Errors: Cant access property</source>
          <target state="translated">エラー。プロパティにアクセスすることはできません</target>
        </trans-unit>
        <trans-unit id="8fba88ecf30616b471c1a7b69853ec50c3baa76d" translate="yes" xml:space="preserve">
          <source>Errors: Cant define property object not extensible</source>
          <target state="translated">エラー。拡張可能ではないプロパティ・オブジェクトを定義できない</target>
        </trans-unit>
        <trans-unit id="b1b3de2016e6e218fed8372d24b8959caabffe25" translate="yes" xml:space="preserve">
          <source>Errors: Cant delete</source>
          <target state="translated">エラー。カント削除</target>
        </trans-unit>
        <trans-unit id="da7df18e62d81c1b83bf513798ca02b4054ad8d9" translate="yes" xml:space="preserve">
          <source>Errors: Cant redefine property</source>
          <target state="translated">エラー。プロパティを再定義することはできません</target>
        </trans-unit>
        <trans-unit id="9e83028ec26fc64dd2712ed06688c1c6cd2c75c4" translate="yes" xml:space="preserve">
          <source>Errors: Cyclic object value</source>
          <target state="translated">エラー。サイクリックオブジェクトの値</target>
        </trans-unit>
        <trans-unit id="43ad51f7e26e811eaf7c5b9a34a92dcafe2deca5" translate="yes" xml:space="preserve">
          <source>Errors: Dead object</source>
          <target state="translated">エラー。デッドオブジェクト</target>
        </trans-unit>
        <trans-unit id="c3d2a18b6d0545e068335e31fbf94a02e98e7712" translate="yes" xml:space="preserve">
          <source>Errors: Delete in strict mode</source>
          <target state="translated">エラー。厳密なモードでの削除</target>
        </trans-unit>
        <trans-unit id="b8d7d2f9099102c43481100835038e2190a5abe5" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated String generics</source>
          <target state="translated">エラー。非推奨の文字列ジェネリック</target>
        </trans-unit>
        <trans-unit id="be7396c46d09202770db4d277b642e4d393a60ce" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated caller or arguments usage</source>
          <target state="translated">エラー。非推奨の呼び出し元または引数の使用法</target>
        </trans-unit>
        <trans-unit id="c0b93123cce76bb2386be590aa64ddbd88296c01" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated expression closures</source>
          <target state="translated">エラー。非推奨の式クロージャ</target>
        </trans-unit>
        <trans-unit id="13f293adaf92361b577a264fefcf84b419105ac4" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated octal</source>
          <target state="translated">エラーが発生しました。非推奨の8進数</target>
        </trans-unit>
        <trans-unit id="07e8c7ae109c22ef9c4d33e0f81d5688ede2fe8a" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated source map pragma</source>
          <target state="translated">エラー。非推奨のソースマップ・プラグマ</target>
        </trans-unit>
        <trans-unit id="ed7a5a08a3a3eb4466a75097a5fcfab4cb0bd6c2" translate="yes" xml:space="preserve">
          <source>Errors: Deprecated toLocaleFormat</source>
          <target state="translated">エラーが発生しました。非推奨の toLocaleFormat</target>
        </trans-unit>
        <trans-unit id="10a3595cbcf8de8758c23e623a2ea8604884326c" translate="yes" xml:space="preserve">
          <source>Errors: Equal as assign</source>
          <target state="translated">エラー。代入としてイコール</target>
        </trans-unit>
        <trans-unit id="94ce4265de80952855df9a0737dcaa3a7fe89f85" translate="yes" xml:space="preserve">
          <source>Errors: For-each-in loops are deprecated</source>
          <target state="translated">エラー。For-each-in ループは非推奨です。</target>
        </trans-unit>
        <trans-unit id="6f2391fd0f24d7e2a6bbad2155842637cb9560be" translate="yes" xml:space="preserve">
          <source>Errors: Getter only</source>
          <target state="translated">エラー。ゲッターのみ</target>
        </trans-unit>
        <trans-unit id="a4018e9494a60acaf2a6d79f0a42b17939fa9cae" translate="yes" xml:space="preserve">
          <source>Errors: Identifier after number</source>
          <target state="translated">エラー。番号の後の識別子</target>
        </trans-unit>
        <trans-unit id="09607ffaa1e42677d295cb3d2118135ca3780723" translate="yes" xml:space="preserve">
          <source>Errors: Illegal character</source>
          <target state="translated">エラー。不正な文字</target>
        </trans-unit>
        <trans-unit id="4260b0719e659d5aafb5cc60590d1a0ebe928843" translate="yes" xml:space="preserve">
          <source>Errors: Invalid array length</source>
          <target state="translated">エラー。無効な配列長</target>
        </trans-unit>
        <trans-unit id="8dc23f11124b41445ae1860151f5f6f4f0c098d1" translate="yes" xml:space="preserve">
          <source>Errors: Invalid assignment left-hand side</source>
          <target state="translated">エラー。無効な左側の割り当て</target>
        </trans-unit>
        <trans-unit id="41bd742f3b588608e547c5de15519c28a07a053d" translate="yes" xml:space="preserve">
          <source>Errors: Invalid const assignment</source>
          <target state="translated">エラー。無効な定数代入</target>
        </trans-unit>
        <trans-unit id="09e0d3004f116466dc1e29cf856fa83630f3482e" translate="yes" xml:space="preserve">
          <source>Errors: Invalid date</source>
          <target state="translated">エラー。無効な日付</target>
        </trans-unit>
        <trans-unit id="9bca24ca2fed1d96762735562d814ec0bfa861f9" translate="yes" xml:space="preserve">
          <source>Errors: Invalid for-in initializer</source>
          <target state="translated">エラー。無効な for-in イニシャライザ</target>
        </trans-unit>
        <trans-unit id="b9fbd4c50f44dd361494c113ef2fede40ea2538c" translate="yes" xml:space="preserve">
          <source>Errors: Invalid for-of initializer</source>
          <target state="translated">エラー。無効な for-of イニシャライザ</target>
        </trans-unit>
        <trans-unit id="5efcff2ea024b4062bd794e9616fbbbc1ba0280d" translate="yes" xml:space="preserve">
          <source>Errors: JSON bad parse</source>
          <target state="translated">エラー。JSON の不正なパース</target>
        </trans-unit>
        <trans-unit id="02a12b1ad44a38a628a993c2697638031a9d9127" translate="yes" xml:space="preserve">
          <source>Errors: Malformed URI</source>
          <target state="translated">エラー。不正な URI</target>
        </trans-unit>
        <trans-unit id="f36f27cd04200e137ab075f007038d3770524f46" translate="yes" xml:space="preserve">
          <source>Errors: Malformed formal parameter</source>
          <target state="translated">エラー。不正な形式のフォーマルパラメータ</target>
        </trans-unit>
        <trans-unit id="6e3cfab42d0b6474a1327b97813d1eef55e939d6" translate="yes" xml:space="preserve">
          <source>Errors: Missing bracket after list</source>
          <target state="translated">エラー。リストの後に括弧がない</target>
        </trans-unit>
        <trans-unit id="f0f7f1ea490cf0f7a3f9b1e982653a6038ff96bb" translate="yes" xml:space="preserve">
          <source>Errors: Missing colon after property id</source>
          <target state="translated">エラー。プロパティIDの後にコロンがありません</target>
        </trans-unit>
        <trans-unit id="c9a0aa796797661ecf1cba64ed842a32af03dbcc" translate="yes" xml:space="preserve">
          <source>Errors: Missing curly after function body</source>
          <target state="translated">エラー。関数ボディの後のカーリーの欠落</target>
        </trans-unit>
        <trans-unit id="55aea59258979ead636d948b8d52f086170ba80c" translate="yes" xml:space="preserve">
          <source>Errors: Missing curly after property list</source>
          <target state="translated">エラー。プロパティリストの後にカーリーがない</target>
        </trans-unit>
        <trans-unit id="d942fe3513297e1c7820a942c4cc8fc23e9d0274" translate="yes" xml:space="preserve">
          <source>Errors: Missing formal parameter</source>
          <target state="translated">エラー。フォーマルパラメータの欠落</target>
        </trans-unit>
        <trans-unit id="d18ac5484216e16730653f291b5b2f443a67007d" translate="yes" xml:space="preserve">
          <source>Errors: Missing initializer in const</source>
          <target state="translated">エラー。const の初期化子が存在しない</target>
        </trans-unit>
        <trans-unit id="197d55ef59577929cad5d6376fff53cc538ea2da" translate="yes" xml:space="preserve">
          <source>Errors: Missing name after dot operator</source>
          <target state="translated">エラー。ドット演算子の後に名前がない</target>
        </trans-unit>
        <trans-unit id="af9553ff72e3e49e09130a11396020d732e68887" translate="yes" xml:space="preserve">
          <source>Errors: Missing parenthesis after argument list</source>
          <target state="translated">エラー。引数リストの後に括弧がない</target>
        </trans-unit>
        <trans-unit id="ef2e83ba64f717ffdd586359a48a04c1133ecfd9" translate="yes" xml:space="preserve">
          <source>Errors: Missing parenthesis after condition</source>
          <target state="translated">エラー。条件の後に括弧がない</target>
        </trans-unit>
        <trans-unit id="723bb5456ca90f92354a8d7bc46d7999b8465f9a" translate="yes" xml:space="preserve">
          <source>Errors: Missing semicolon before statement</source>
          <target state="translated">エラー。文の前にセミコロンがない</target>
        </trans-unit>
        <trans-unit id="54ad9cd1eb80c216fb4be88acf39104b14ba11de" translate="yes" xml:space="preserve">
          <source>Errors: More arguments needed</source>
          <target state="translated">エラー。より多くの引数が必要</target>
        </trans-unit>
        <trans-unit id="e4ab555dce80dab9a1d2c08fc72edc9e295f9330" translate="yes" xml:space="preserve">
          <source>Errors: Negative repetition count</source>
          <target state="translated">誤りだ 負の繰り返し回数</target>
        </trans-unit>
        <trans-unit id="7d3721063573df07d41d902bf150bae76356cbcb" translate="yes" xml:space="preserve">
          <source>Errors: No non-null object</source>
          <target state="translated">エラー。非 null オブジェクトがありません。</target>
        </trans-unit>
        <trans-unit id="865a7f8f4a964d2b8dba16fdd62ca28085c7b069" translate="yes" xml:space="preserve">
          <source>Errors: No properties</source>
          <target state="translated">エラー。プロパティがありません</target>
        </trans-unit>
        <trans-unit id="5a4af7cb628f98d88531f89b07e9613fc531f3d6" translate="yes" xml:space="preserve">
          <source>Errors: No variable name</source>
          <target state="translated">エラーが発生しました。変数名がありません</target>
        </trans-unit>
        <trans-unit id="01f47511f37b5c2cab0ffae3977d63557d1f07ce" translate="yes" xml:space="preserve">
          <source>Errors: Non configurable array element</source>
          <target state="translated">エラー。構成可能な配列要素ではありません。</target>
        </trans-unit>
        <trans-unit id="7d97377314874c0e2b4c161b04a2e02188392543" translate="yes" xml:space="preserve">
          <source>Errors: Not a codepoint</source>
          <target state="translated">エラー。コードポイントではありません</target>
        </trans-unit>
        <trans-unit id="18b71c635f26729510093b45d7ba8c0d9cfe8f86" translate="yes" xml:space="preserve">
          <source>Errors: Not a constructor</source>
          <target state="translated">エラー。コンストラクタではありません</target>
        </trans-unit>
        <trans-unit id="1807c63c40225996463390a67c1107301996cecd" translate="yes" xml:space="preserve">
          <source>Errors: Not a function</source>
          <target state="translated">エラー。関数ではありません</target>
        </trans-unit>
        <trans-unit id="df583a0032a705cbf07f39560b1be5d2e522e145" translate="yes" xml:space="preserve">
          <source>Errors: Not defined</source>
          <target state="translated">エラーが発生しました。定義されていない</target>
        </trans-unit>
        <trans-unit id="850b3c1318990348afa7485c8e84bbc24088739f" translate="yes" xml:space="preserve">
          <source>Errors: Precision range</source>
          <target state="translated">誤差 精度範囲</target>
        </trans-unit>
        <trans-unit id="0ad541e2ca59c434fb84fad273af1ec5cf1380eb" translate="yes" xml:space="preserve">
          <source>Errors: Property access denied</source>
          <target state="translated">エラー。プロパティのアクセスが拒否されました</target>
        </trans-unit>
        <trans-unit id="b9d85b0f31e5ac0d8bcd26d038de2f927d1962b4" translate="yes" xml:space="preserve">
          <source>Errors: Read-only</source>
          <target state="translated">エラーが発生しました。読み取り専用</target>
        </trans-unit>
        <trans-unit id="0b0933a70e1f0cc36a342a702fac3de417649fec" translate="yes" xml:space="preserve">
          <source>Errors: Redeclared parameter</source>
          <target state="translated">エラーが発生しました。再定義されたパラメータ</target>
        </trans-unit>
        <trans-unit id="791fa694a5b25c86cf4af00f885cbc3b9fa535f1" translate="yes" xml:space="preserve">
          <source>Errors: Reduce of empty array with no initial value</source>
          <target state="translated">エラー。初期値がない空の配列のリデュース</target>
        </trans-unit>
        <trans-unit id="84e9a716eba40d72473ee0b4b978ec33a70fab2b" translate="yes" xml:space="preserve">
          <source>Errors: Reserved identifier</source>
          <target state="translated">エラーが発生しました。予約済み識別子</target>
        </trans-unit>
        <trans-unit id="255b375f86ab31e5bdd941152881b816f3bffdcd" translate="yes" xml:space="preserve">
          <source>Errors: Resulting string too large</source>
          <target state="translated">エラー。結果の文字列が大きすぎる</target>
        </trans-unit>
        <trans-unit id="eb140b3f8d93e82c0e940c59df8e9c6aa42a3cff" translate="yes" xml:space="preserve">
          <source>Errors: Stmt after return</source>
          <target state="translated">エラー。復帰後のStmt</target>
        </trans-unit>
        <trans-unit id="475feff930f4eac1749e7004777854fc1d75adb9" translate="yes" xml:space="preserve">
          <source>Errors: Strict Non Simple Params</source>
          <target state="translated">エラー。厳密な非単純パラメタ</target>
        </trans-unit>
        <trans-unit id="02cf343eae0a237e207a41e1f46212ff6d985b14" translate="yes" xml:space="preserve">
          <source>Errors: Too much recursion</source>
          <target state="translated">エラー。再帰が多すぎる</target>
        </trans-unit>
        <trans-unit id="15c10369ec385ff8bbc27a9edb32cb6e9fd0d35b" translate="yes" xml:space="preserve">
          <source>Errors: Typed array invalid arguments</source>
          <target state="translated">エラー。型付けされた配列の無効な引数</target>
        </trans-unit>
        <trans-unit id="d04fe42d4ea52f842650123be2d83444d39ea461" translate="yes" xml:space="preserve">
          <source>Errors: Undeclared var</source>
          <target state="translated">エラー。未定義の var</target>
        </trans-unit>
        <trans-unit id="f6319b6c1706c0e54a4137f4e3da02cbe325e462" translate="yes" xml:space="preserve">
          <source>Errors: Undefined prop</source>
          <target state="translated">エラー。未定義のプロップ</target>
        </trans-unit>
        <trans-unit id="8949d938da3922fbe4f602b02e9af1a800a8e027" translate="yes" xml:space="preserve">
          <source>Errors: Unexpected token</source>
          <target state="translated">エラー。予期しないトークン</target>
        </trans-unit>
        <trans-unit id="259d0fbcd47abe2d4520c2c796874574de06feb2" translate="yes" xml:space="preserve">
          <source>Errors: Unexpected type</source>
          <target state="translated">エラー。予期しないタイプ</target>
        </trans-unit>
        <trans-unit id="e02adf217f0d3e0bd942ea5726d08df68419d07a" translate="yes" xml:space="preserve">
          <source>Errors: Unnamed function statement</source>
          <target state="translated">エラー。名前のない関数文</target>
        </trans-unit>
        <trans-unit id="131c182d6290c1b4ec9f3f031f5e482bd739af37" translate="yes" xml:space="preserve">
          <source>Errors: Unterminated string literal</source>
          <target state="translated">エラー。終端されていない文字列リテラル</target>
        </trans-unit>
        <trans-unit id="7bb906ebfd794bbe515da4b53d1f4c6e2751b3ff" translate="yes" xml:space="preserve">
          <source>Errors: Var hides argument</source>
          <target state="translated">エラー。Var は引数を隠します。</target>
        </trans-unit>
        <trans-unit id="f76bf9d24aa458e29292c5d323e9909b289f7e5f" translate="yes" xml:space="preserve">
          <source>Errors: in operator no object</source>
          <target state="translated">エラー:演算子にオブジェクトがありません</target>
        </trans-unit>
        <trans-unit id="bc7859be9d1081aa5153e7411a415bee20afa739" translate="yes" xml:space="preserve">
          <source>Errors: invalid right hand side instanceof operand</source>
          <target state="translated">エラー:オペランドの右辺のインスタンスが無効です。</target>
        </trans-unit>
        <trans-unit id="59419d70e04beb57aeb1b313429871b8c786db40" translate="yes" xml:space="preserve">
          <source>Errors: is not iterable</source>
          <target state="translated">エラー:反復可能ではありません。</target>
        </trans-unit>
        <trans-unit id="288e9e074adac987d562d2b357137fa4c58378eb" translate="yes" xml:space="preserve">
          <source>Escape notation</source>
          <target state="translated">エスケープ表記法</target>
        </trans-unit>
        <trans-unit id="0db72e172d24bd8ce3e4907133558b491951978e" translate="yes" xml:space="preserve">
          <source>Escape sequence</source>
          <target state="translated">脱出シーケンス</target>
        </trans-unit>
        <trans-unit id="bf7fb4efc8e300ba9c57d5146ecaab144ececb80" translate="yes" xml:space="preserve">
          <source>Escape sequences allowed in tagged template literals</source>
          <target state="translated">タグ付きテンプレートリテラルで許可されるエスケープシーケンス</target>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="75abb1c73bbc05d1116b39c290363013448c26fe" translate="yes" xml:space="preserve">
          <source>Euler's constant and the base of natural logarithms, approximately 2.718.</source>
          <target state="translated">オイラーの定数と自然対数の基底、約2.718。</target>
        </trans-unit>
        <trans-unit id="cfd2a1c097181f5e294de23293bba96e87ebd8c0" translate="yes" xml:space="preserve">
          <source>EvalError</source>
          <target state="translated">EvalError</target>
        </trans-unit>
        <trans-unit id="c82151df8aa8ffd53f4c7c3adeab5bf787c8c006" translate="yes" xml:space="preserve">
          <source>EvalError instances</source>
          <target state="translated">EvalError インスタンス</target>
        </trans-unit>
        <trans-unit id="6fa30b29960ec8ea70f1e8f6d40186139a86c0f7" translate="yes" xml:space="preserve">
          <source>EvalError.prototype</source>
          <target state="translated">EvalError.prototype</target>
        </trans-unit>
        <trans-unit id="c36ff9398efc01b04e4d0f34d966eb17595e83c4" translate="yes" xml:space="preserve">
          <source>Evaluated at call time</source>
          <target state="translated">呼び出し時に評価</target>
        </trans-unit>
        <trans-unit id="9a33d91cba8210a61815be383769a3188e4afae6" translate="yes" xml:space="preserve">
          <source>Evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.</source>
          <target state="translated">式を評価し、式の値を case 節にマッチングさせ、その case に関連付けられたステートメントを実行します。</target>
        </trans-unit>
        <trans-unit id="974086a8daaea90fc8fb074858e38fdfecd28f34" translate="yes" xml:space="preserve">
          <source>Even strings may be used as input; to achieve the filter and map actions (under Array-like objects) above:</source>
          <target state="translated">文字列であっても入力として使用することができます;上記のフィルタとマップのアクションを実現するために (配列のようなオブジェクトの下で)。</target>
        </trans-unit>
        <trans-unit id="0363c5af4f1684401bc99ff28d665cc13e01573a" translate="yes" xml:space="preserve">
          <source>Even though older Opera versions don't support &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; yet, Opera supports the non-standard &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/a&gt; property since Opera 10.50.</source>
          <target state="translated">古いバージョンのOperaはまだ &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; をサポートしていませんが、OperaはOpera 10.50以降、非標準の&lt;a href=&quot;proto&quot;&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;/a&gt;プロパティをサポートしています。</target>
        </trans-unit>
        <trans-unit id="ada9a62bff902273af1992bea678f54c04e457ab" translate="yes" xml:space="preserve">
          <source>Even though the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators can be used with operands that are not Boolean values, they can still be considered Boolean operators since their return values can always be converted to Boolean values.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; と &lt;code&gt;||&lt;/code&gt; にもかかわらず 演算子はブール値ではないオペランドと共に使用できますが、戻り値は常にブール値に変換できるため、ブール演算子と見なすことができます。</target>
        </trans-unit>
        <trans-unit id="1a2474eaa661b7cd3c27c48fde88a3027610361e" translate="yes" xml:space="preserve">
          <source>Every JavaScript function is actually a &lt;code&gt;Function&lt;/code&gt; object. This can be seen with the code &lt;code&gt;(function(){}).constructor === Function&lt;/code&gt; which returns true.</source>
          <target state="translated">すべてのJavaScript関数は、実際には &lt;code&gt;Function&lt;/code&gt; オブジェクトです。これは、trueを返すコード &lt;code&gt;(function(){}).constructor === Function&lt;/code&gt; で確認できます。</target>
        </trans-unit>
        <trans-unit id="2e0a8e77b4ee1840bb063aeb135c8b4676d988a4" translate="yes" xml:space="preserve">
          <source>Every function in JavaScript is a &lt;code&gt;Function&lt;/code&gt; object. See &lt;a href=&quot;global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; for information on properties and methods of &lt;code&gt;Function&lt;/code&gt; objects.</source>
          <target state="translated">JavaScriptのすべての関数は &lt;code&gt;Function&lt;/code&gt; オブジェクトです。 &lt;code&gt;Function&lt;/code&gt; オブジェクトのプロパティとメソッドについては、&lt;a href=&quot;global_objects/function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8c56700ea968195a5a9d16c57d30355f44dfc38c" translate="yes" xml:space="preserve">
          <source>Every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; inherits the &lt;code&gt;hasOwnProperty&lt;/code&gt; method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, this method does not check down the object's prototype chain.</source>
          <target state="translated">&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;から派生したすべてのオブジェクトは、 &lt;code&gt;hasOwnProperty&lt;/code&gt; メソッドを継承します。このメソッドを使用して、オブジェクトがそのオブジェクトの直接プロパティとして指定されたプロパティを持っているかどうかを判断できます。&lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子とは異なり、このメソッドはオブジェクトのプロトタイプチェーンをチェックダウンしません。</target>
        </trans-unit>
        <trans-unit id="f40889b6c0cc900f9d46901255cc5334d14b30b3" translate="yes" xml:space="preserve">
          <source>Every object has a &lt;code&gt;propertyIsEnumerable&lt;/code&gt; method. This method can determine whether the specified property in an object can be enumerated by a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">すべてのオブジェクトには &lt;code&gt;propertyIsEnumerable&lt;/code&gt; メソッドがあります。このメソッドは、プロトタイプチェーンを通じて継承されたプロパティを除いて、オブジェクト内の指定されたプロパティを&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;ループで列挙できるかどうかを判断できます。オブジェクトに指定されたプロパティがない場合、このメソッドは &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9ee05ce8b14dd8b93ed62d53c6fae35fee2934ac" translate="yes" xml:space="preserve">
          <source>Every object has a &lt;code&gt;toString()&lt;/code&gt; method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the &lt;code&gt;toString()&lt;/code&gt; method is inherited by every object descended from &lt;code&gt;Object&lt;/code&gt;. If this method is not overridden in a custom object, &lt;code&gt;toString()&lt;/code&gt; returns &quot;[object &lt;em&gt;type&lt;/em&gt;]&quot;, where &lt;code&gt;&lt;em&gt;type&lt;/em&gt;&lt;/code&gt; is the object type. The following code illustrates this:</source>
          <target state="translated">すべてのオブジェクトには &lt;code&gt;toString()&lt;/code&gt; メソッドがあり、オブジェクトがテキスト値として表されるとき、またはオブジェクトが文字列が期待される方法で参照されるときに自動的に呼び出されます。デフォルトでは、 &lt;code&gt;toString()&lt;/code&gt; メソッドは &lt;code&gt;Object&lt;/code&gt; から派生したすべてのオブジェクトに継承されます。このメソッドがカスタムオブジェクトでオーバーライドされていない場合、 &lt;code&gt;toString()&lt;/code&gt; は「[オブジェクト&lt;em&gt;タイプ&lt;/em&gt; ]」を返します。ここで、 &lt;code&gt;&lt;em&gt;type&lt;/em&gt;&lt;/code&gt; はオブジェクトタイプです。次のコードはこれを示しています。</target>
        </trans-unit>
        <trans-unit id="7dce79ae7d813bf824ea4fe59f92fbd870361bb8" translate="yes" xml:space="preserve">
          <source>Every object will inherit &lt;code&gt;objCustom&lt;/code&gt; property and every object that is an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; will inherit &lt;code&gt;arrCustom&lt;/code&gt; property because of adding those properties to &lt;a href=&quot;../global_objects/object/prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt;. The object &lt;code&gt;iterable&lt;/code&gt; inherits properties &lt;code&gt;objCustom&lt;/code&gt; and &lt;code&gt;arrCustom&lt;/code&gt; because of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">すべてのオブジェクトは継承します &lt;code&gt;objCustom&lt;/code&gt; 財産とされるすべてのオブジェクト&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;継承する &lt;code&gt;arrCustom&lt;/code&gt; のために、これらのプロパティの追加のプロパティを&lt;a href=&quot;../global_objects/object/prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../global_objects/array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; をします&lt;/a&gt;。継承 &lt;code&gt;iterable&lt;/code&gt; オブジェクト&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;とプロトタイプチェーン&lt;/a&gt;により、反復可能なオブジェクトはプロパティ &lt;code&gt;objCustom&lt;/code&gt; と &lt;code&gt;arrCustom&lt;/code&gt; を継承します。</target>
        </trans-unit>
        <trans-unit id="c46e3a55ca8ade0ed7849050d72708177e8ecdfd" translate="yes" xml:space="preserve">
          <source>Every symbol value returned from &lt;code&gt;Symbol()&lt;/code&gt; is unique. A symbol value may be used as an identifier for object properties; this is the data type's only purpose. Some further explanation about purpose and usage can be found in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Symbol&quot;&gt;glossary entry for Symbol&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Symbol()&lt;/code&gt; から返されるすべてのシンボル値は一意です。シンボル値は、オブジェクトプロパティの識別子として使用できます。これがデータ型の唯一の目的です。目的と使用法の詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Symbol&quot;&gt;シンボルの用語集のエントリを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="a374c2dbd4e1ac574cac1ee15dc3b91506d49eda" translate="yes" xml:space="preserve">
          <source>Example &lt;var&gt;replacer&lt;/var&gt;, as a function</source>
          <target state="translated">関数としての &lt;var&gt;replacer&lt;/var&gt; の例</target>
        </trans-unit>
        <trans-unit id="bafa2dab89bc4dccad242be9dfb9c017aa1dc9f8" translate="yes" xml:space="preserve">
          <source>Example &lt;var&gt;replacer&lt;/var&gt;, as an array</source>
          <target state="translated">配列としての &lt;var&gt;replacer&lt;/var&gt; の例</target>
        </trans-unit>
        <trans-unit id="32f213aa4f0ea9e9398d23fcce147266f0c86ee2" translate="yes" xml:space="preserve">
          <source>Example of using &lt;code&gt;JSON.stringify()&lt;/code&gt; with &lt;code&gt;localStorage&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;JSON.stringify()&lt;/code&gt; と &lt;code&gt;localStorage&lt;/code&gt; の使用例</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="fc8c01410a17dc95f19aad8ef81162093e5c7c67" translate="yes" xml:space="preserve">
          <source>Example with yield*</source>
          <target state="translated">歩留まり*のある例</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="c5f36059a65056444f92027e3a107484e5c3d4a3" translate="yes" xml:space="preserve">
          <source>Examples of correct behavior:</source>
          <target state="translated">正しい行動の例。</target>
        </trans-unit>
        <trans-unit id="7431bcad988714e6fec0d7af7fd0453b288120a0" translate="yes" xml:space="preserve">
          <source>Examples of expressions that can be converted to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;false&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;false&lt;/a&gt;に変換できる式の例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5085e9cffcff50e78151198e39d1a6ade980c6cf" translate="yes" xml:space="preserve">
          <source>Examples using the iteration protocols</source>
          <target state="translated">イテレーションプロトコルを使用した例</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="a145277353fc42785db4d1fd58fae1ba37e5b3a5" translate="yes" xml:space="preserve">
          <source>Exceptions will interrupt the ongoing copying task</source>
          <target state="translated">例外が発生すると、進行中のコピータスクが中断されます。</target>
        </trans-unit>
        <trans-unit id="6c9018ae3043c702753ed63c89a0f4dfcd9fa192" translate="yes" xml:space="preserve">
          <source>Executes a search for a match in its string parameter.</source>
          <target state="translated">文字列パラメータに一致するものを検索します。</target>
        </trans-unit>
        <trans-unit id="a6f201fddd38c3438dc16b0c68100cb5b75bc1f3" translate="yes" xml:space="preserve">
          <source>Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.</source>
          <target state="translated">指定された条件が真であれば文を実行します。条件が偽の場合は、別の文を実行することができます。</target>
        </trans-unit>
        <trans-unit id="e25f2f2d66e365cd2db8e2b9291d3e52cffba918" translate="yes" xml:space="preserve">
          <source>Executes the search for a match between a regular expression and a specified string.</source>
          <target state="translated">正規表現と指定された文字列との一致検索を実行します。</target>
        </trans-unit>
        <trans-unit id="b687c26f5ce46495b20b486f34459c9b7beed83c" translate="yes" xml:space="preserve">
          <source>Existing properties in objects frozen with &lt;a href=&quot;freeze&quot;&gt;&lt;code&gt;Object.freeze()&lt;/code&gt;&lt;/a&gt; are made immutable. Objects sealed with &lt;code&gt;Object.seal()&lt;/code&gt; can have their existing properties changed.</source>
          <target state="translated">&lt;a href=&quot;freeze&quot;&gt; &lt;code&gt;Object.freeze()&lt;/code&gt; で&lt;/a&gt;凍結されたオブジェクトの既存のプロパティは不変になります。 &lt;code&gt;Object.seal()&lt;/code&gt; でシールされたオブジェクトは、既存のプロパティを変更できます。</target>
        </trans-unit>
        <trans-unit id="d165ee97f26b031b938fc12621899c47ca3e7175" translate="yes" xml:space="preserve">
          <source>Exponentiation</source>
          <target state="translated">Exponentiation</target>
        </trans-unit>
        <trans-unit id="cb4e0aa1acc069da2bfcaf4ad0b0b148c6d99e82" translate="yes" xml:space="preserve">
          <source>Exponentiation (**)</source>
          <target state="translated">指数 (**)</target>
        </trans-unit>
        <trans-unit id="4ce1e1b52f6bd1af104e523df31584b44ac04ecf" translate="yes" xml:space="preserve">
          <source>Exponentiation (&lt;code&gt;**&lt;/code&gt;)</source>
          <target state="translated">べき乗（ &lt;code&gt;**&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="de0433c71ffaa7b9e55995e55af2210d618cf05b" translate="yes" xml:space="preserve">
          <source>Exponentiation assignment</source>
          <target state="translated">指数の割り当て</target>
        </trans-unit>
        <trans-unit id="f170aec10bac78f0ad0443256a34b162228825a6" translate="yes" xml:space="preserve">
          <source>Exponentiation assignment (&lt;code&gt;x **= y&lt;/code&gt;)</source>
          <target state="translated">べき乗代入（ &lt;code&gt;x **= y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4598c7b8a329040314a386875a5d7a22807da510" translate="yes" xml:space="preserve">
          <source>Exponentiation operator</source>
          <target state="translated">指数演算子</target>
        </trans-unit>
        <trans-unit id="d53d5d4319e68fd43449b36bcd501e342e38cc1b" translate="yes" xml:space="preserve">
          <source>Exponentiation operator.</source>
          <target state="translated">指数演算子。</target>
        </trans-unit>
        <trans-unit id="3c32226b7077e03be4f4c20383b6de84210c3cce" translate="yes" xml:space="preserve">
          <source>Exported modules are in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict mode&lt;/code&gt;&lt;/a&gt; whether you declare them as such or not. The export statement cannot be used in embedded scripts.</source>
          <target state="translated">エクスポートされたモジュールは、宣言されているかどうかに関係なく、&lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict mode&lt;/code&gt; &lt;/a&gt;です。exportステートメントは埋め込みスクリプトでは使用できません。</target>
        </trans-unit>
        <trans-unit id="8c05ac4c4f75d588f9d0744fb608804a04253db1" translate="yes" xml:space="preserve">
          <source>Expression closures</source>
          <target state="translated">式のクロージャ</target>
        </trans-unit>
        <trans-unit id="2d0696153dd2fb58b4e351fc1c4fedb61daed2ba" translate="yes" xml:space="preserve">
          <source>Expression closures can also be found with getter and setter, like this:</source>
          <target state="translated">式のクロージャは、このようにゲッターやセッターでも見つけることができます。</target>
        </trans-unit>
        <trans-unit id="581a7a95b4e312c821cdf7a863b5c199c2d3c33c" translate="yes" xml:space="preserve">
          <source>Expression closures omit curly braces or return statements from function declarations or from method definitions in objects.</source>
          <target state="translated">式クロージャは、関数宣言やオブジェクト内のメソッド定義から中括弧や戻り文を省略します。</target>
        </trans-unit>
        <trans-unit id="fa16152754c1f4658d7ae3ca9f9623621e4a316c" translate="yes" xml:space="preserve">
          <source>Expression expected</source>
          <target state="translated">期待される表現</target>
        </trans-unit>
        <trans-unit id="7dff6c99287ca9df1ed3e9bb493350ccf3e23d7f" translate="yes" xml:space="preserve">
          <source>Expression interpolation</source>
          <target state="translated">式の補間</target>
        </trans-unit>
        <trans-unit id="2b5114c8925fb54156ac1f2a96e3e3efaabcda19" translate="yes" xml:space="preserve">
          <source>Expression statement</source>
          <target state="translated">表現文</target>
        </trans-unit>
        <trans-unit id="185116746a776538580388835627883dc105b866" translate="yes" xml:space="preserve">
          <source>Expressions and operators</source>
          <target state="translated">式と演算子</target>
        </trans-unit>
        <trans-unit id="f2a7081fd365d6e3bba8a240ffe6f818bab9cf08" translate="yes" xml:space="preserve">
          <source>Expressions with values of any type.</source>
          <target state="translated">任意の型の値を持つ式。</target>
        </trans-unit>
        <trans-unit id="8fe87e42cb5c52af14065a5aa3d0a913ff11e6c4" translate="yes" xml:space="preserve">
          <source>Extending &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; の拡張</target>
        </trans-unit>
        <trans-unit id="a460597693640f31a8e009214a2742ebf0ebd8a8" translate="yes" xml:space="preserve">
          <source>Extending constructor</source>
          <target state="translated">コンストラクタの拡張</target>
        </trans-unit>
        <trans-unit id="14831e5f4bdf4799f1493cdad25d550a2bc5c8b2" translate="yes" xml:space="preserve">
          <source>Extending from &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; works like with a normal class, except that the prototype object does not inherit from &lt;a href=&quot;../global_objects/object/prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;からの拡張は、プロトタイプオブジェクトが&lt;a href=&quot;../global_objects/object/prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;から継承しないことを除いて、通常のクラスと同様に機能します。</target>
        </trans-unit>
        <trans-unit id="451b62a75fcf61f8ce703d7d9a0414c926ed8849" translate="yes" xml:space="preserve">
          <source>Extending the &lt;code&gt;Math&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;Math&lt;/code&gt; オブジェクトの拡張</target>
        </trans-unit>
        <trans-unit id="2794af9f9e739cf27a26b3cff6032ebe65e775f7" translate="yes" xml:space="preserve">
          <source>Extends the scope chain for a statement.</source>
          <target state="translated">ステートメントのスコープチェーンを拡張します。</target>
        </trans-unit>
        <trans-unit id="55cbe18000bc3995734c638d5fff67be25bb8d2c" translate="yes" xml:space="preserve">
          <source>Extracting sub-domain name from URL</source>
          <target state="translated">URLからサブドメイン名を抽出する</target>
        </trans-unit>
        <trans-unit id="889e35c91beeadf592fd1ba3654f0cc858ffb920" translate="yes" xml:space="preserve">
          <source>Extracts a section of a string and returns a new string.</source>
          <target state="translated">文字列のセクションを抽出し、新しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="df4b0c79746a06eb98d7408844aa41898aef8947" translate="yes" xml:space="preserve">
          <source>Extracts a section of an array and returns a new array.</source>
          <target state="translated">配列のセクションを抽出し、新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="db20b3f83ce4a09595255f23025cbf85910b5380" translate="yes" xml:space="preserve">
          <source>Extracts a section of an array and returns a new array. See also &lt;a href=&quot;../array/slice&quot;&gt;&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のセクションを抽出し、新しい配列を返します。&lt;a href=&quot;../array/slice&quot;&gt; &lt;code&gt;Array.prototype.slice()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="0821e2567464bf6b8a613fc22f3b8976305b6ac4" translate="yes" xml:space="preserve">
          <source>Extracts a section of an array and returns a new array. See also &lt;a href=&quot;array/slice&quot;&gt;&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のセクションを抽出し、新しい配列を返します。&lt;a href=&quot;array/slice&quot;&gt; &lt;code&gt;Array.prototype.slice()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="f288167cd8a86d379b8230e12c5595015bcaea3a" translate="yes" xml:space="preserve">
          <source>Fall-back to implementation-specific date formats</source>
          <target state="translated">実装固有の日付フォーマットへのフォールバック</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">Feature</target>
        </trans-unit>
        <trans-unit id="7b717fd6982b71bdce3578ef5ddfad4343e09f5f" translate="yes" xml:space="preserve">
          <source>Features of comparisons:</source>
          <target state="translated">比較の特徴。</target>
        </trans-unit>
        <trans-unit id="7aeec736a846ee67fe0ca583dedc36bf36ae5012" translate="yes" xml:space="preserve">
          <source>Field declarations</source>
          <target state="translated">フィールド宣言</target>
        </trans-unit>
        <trans-unit id="f08ab394a08fab914fec4dcbe3d645010ddc09f8" translate="yes" xml:space="preserve">
          <source>Field name</source>
          <target state="translated">フィールド名</target>
        </trans-unit>
        <trans-unit id="9ae0e3dd3acd9ddcea2077b275750a4318ea4457" translate="yes" xml:space="preserve">
          <source>Fields and public/private class properties proposal (stage 3)</source>
          <target state="translated">フィールドと公開・非公開クラス物件の提案(第3段階</target>
        </trans-unit>
        <trans-unit id="007e19d07edc411fe1c45dc85daa2867631904e5" translate="yes" xml:space="preserve">
          <source>Fifth, strict mode requires that function parameter names be unique. In normal code the last duplicated argument hides previous identically-named arguments. Those previous arguments remain available through &lt;code&gt;arguments[i]&lt;/code&gt;, so they're not completely inaccessible. Still, this hiding makes little sense and is probably undesirable (it might hide a typo, for example), so in strict mode duplicate argument names are a syntax error:</source>
          <target state="translated">5番目に、strictモードでは、関数のパラメーター名が一意である必要があります。通常のコードでは、最後に複製された引数は、以前に同じ名前の引数を隠します。これらの以前の引数は、 &lt;code&gt;arguments[i]&lt;/code&gt; を通じて引き続き使用できるため、完全にアクセスできなくなります。それでも、この非表示はほとんど意味がなく、おそらく望ましくない（たとえば、タイプミスを隠す可能性がある）ため、厳密モードでは、引数名の重複は構文エラーです。</target>
        </trans-unit>
        <trans-unit id="666530553fb96c3d3f109d33bd5edf92e7a691be" translate="yes" xml:space="preserve">
          <source>Fills all the elements of an array from a start index to an end index with a static value.</source>
          <target state="translated">開始インデックスから終了インデックスまでの配列のすべての要素を静的な値で埋めます。</target>
        </trans-unit>
        <trans-unit id="a75dc31a95b4aef25c62308ffa41873cdd738b6c" translate="yes" xml:space="preserve">
          <source>Fills all the elements of an array from a start index to an end index with a static value. See also &lt;a href=&quot;../array/fill&quot;&gt;&lt;code&gt;Array.prototype.fill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">開始インデックスから終了インデックスまでの配列のすべての要素を静的な値で埋めます。&lt;a href=&quot;../array/fill&quot;&gt; &lt;code&gt;Array.prototype.fill()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="a88e2cbf4276d97cdcd6785e30735a92976ef5ce" translate="yes" xml:space="preserve">
          <source>Fills all the elements of an array from a start index to an end index with a static value. See also &lt;a href=&quot;array/fill&quot;&gt;&lt;code&gt;Array.prototype.fill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">開始インデックスから終了インデックスまでの配列のすべての要素を静的な値で埋めます。&lt;a href=&quot;array/fill&quot;&gt; &lt;code&gt;Array.prototype.fill()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="c6860113c7c642332fc3a3e6ee6e30d1c1a272f7" translate="yes" xml:space="preserve">
          <source>Filtering invalid entries from JSON</source>
          <target state="translated">JSON からの無効なエントリのフィルタリング</target>
        </trans-unit>
        <trans-unit id="ee122d421f92b5a541bb734a1884e2423de65f5b" translate="yes" xml:space="preserve">
          <source>Filtering out all small values</source>
          <target state="translated">すべての小さな値をフィルタリング</target>
        </trans-unit>
        <trans-unit id="1cf2ac565bca4aae2d61b8d2f04600693a8f2e35" translate="yes" xml:space="preserve">
          <source>Filtering typed array elements using arrow functions</source>
          <target state="translated">矢印関数を使用した型付けされた配列要素のフィルタリング</target>
        </trans-unit>
        <trans-unit id="1f0e76bf51b873113068f8f593d2933136ea08b3" translate="yes" xml:space="preserve">
          <source>Finally, the flags can all be flipped with the NOT operator:</source>
          <target state="translated">最後に、フラグはすべてNOT演算子で反転させることができます。</target>
        </trans-unit>
        <trans-unit id="628605832bc367bee6262e25c4437200962e153f" translate="yes" xml:space="preserve">
          <source>Finally, the following encodes &lt;code&gt;-314,&lt;/code&gt; i.e. the two's complement of &lt;code&gt;314&lt;/code&gt;:</source>
          <target state="translated">最後に、次のコードは &lt;code&gt;-314,&lt;/code&gt; つまり &lt;code&gt;314&lt;/code&gt; の 2の補数をエンコードします。</target>
        </trans-unit>
        <trans-unit id="a246a9ac2cfd54b3eddd6fb83323484dc6ff1963" translate="yes" xml:space="preserve">
          <source>Finally, we load and instantiate a wasm module (table2.wasm) using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt;, log the table length, and invoke the two referenced functions that are now stored in the table (the table2.wasm module (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/text-format-examples/table2.was&quot;&gt;text representation&lt;/a&gt;) adds two function references to the table, both of which print out a simple value):</source>
          <target state="translated">最後に、&lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;）を使用してwasmモジュール（table2.wasm）をロードしてインスタンス化し、テーブルの長さをログに記録して、テーブルに格納されている2つの参照される関数（table2.wasmモジュール（&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/text-format-examples/table2.was&quot;&gt;テキスト表現を&lt;/a&gt;参照）を呼び出します）テーブルに2つの関数参照を追加します。どちらも単純な値を出力します）：</target>
        </trans-unit>
        <trans-unit id="7e9117458065674a0eecb3d57bba0c408743ab31" translate="yes" xml:space="preserve">
          <source>Finally, we load and instantiate a wasm module (table2.wasm) using the &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method. The table2.wasm module contains two functions (one that returns 42 and another that returns 83) and stores both into elements 0 and 1 of the imported table (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.wat&quot;&gt;text representation&lt;/a&gt;). So after instantiation, the table still has length 2, but the elements now contain callable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly Functions&lt;/a&gt; which we can call from JS.</source>
          <target state="translated">最後に、&lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、wasmモジュール（table2.wasm）をロードしてインスタンス化します。 table2.wasmモジュールには2つの関数（42を返す関数と83を返す関数）が含まれており、両方をインポートされたテーブルの要素0と1に格納します（&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.wat&quot;&gt;テキスト表現を&lt;/a&gt;参照）。したがって、インスタンス化後もテーブルの長さは2のままですが、要素には、JSから呼び出すことができる呼び出し可能な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;エクスポートされたWebAssembly関数&lt;/a&gt;が含まれています。</target>
        </trans-unit>
        <trans-unit id="58226a61a67596d98ffaf70454df59f83e7ced23" translate="yes" xml:space="preserve">
          <source>Find a prime number in a typed array</source>
          <target state="translated">型付き配列から素数を求める</target>
        </trans-unit>
        <trans-unit id="8f37072c3608cc003b157f71c30a248c4c6a51d0" translate="yes" xml:space="preserve">
          <source>Find a prime number in an array</source>
          <target state="translated">配列の素数を求める</target>
        </trans-unit>
        <trans-unit id="d1e19d6ab5daafbde74e561a3b1d7b21263755a6" translate="yes" xml:space="preserve">
          <source>Find an object in an array by one of its properties</source>
          <target state="translated">配列内のオブジェクトをプロパティのいずれかで探す</target>
        </trans-unit>
        <trans-unit id="f1cd6ffa1b3c8ec0dd4e6be716a92ec8f1f9f551" translate="yes" xml:space="preserve">
          <source>Find index using arrow function</source>
          <target state="translated">矢印関数を使ってインデックスを探す</target>
        </trans-unit>
        <trans-unit id="649e3d1f411a5e5672ada99d3cf70186333f3b9a" translate="yes" xml:space="preserve">
          <source>Find the index of a prime number in a typed array</source>
          <target state="translated">型付き配列の素数のインデックスを求める</target>
        </trans-unit>
        <trans-unit id="0ef588b9c44899f7675e9204a55cffc17d81dd89" translate="yes" xml:space="preserve">
          <source>Find the index of a prime number in an array</source>
          <target state="translated">配列の素数のインデックスを求める</target>
        </trans-unit>
        <trans-unit id="3369b31757a96f3618528e5e64fc701055fe1935" translate="yes" xml:space="preserve">
          <source>Finding all the occurrences of an element</source>
          <target state="translated">要素のすべての出現を見つける</target>
        </trans-unit>
        <trans-unit id="8d83f670084be5d612b46adf91f8088c24bb7e21" translate="yes" xml:space="preserve">
          <source>Finding an array item object by its property</source>
          <target state="translated">配列アイテムオブジェクトをプロパティから探す</target>
        </trans-unit>
        <trans-unit id="92acdda72f8e36c379793e467f70c0ae3a1224ea" translate="yes" xml:space="preserve">
          <source>Finding if an element exists in the array or not and updating the array</source>
          <target state="translated">配列内に要素が存在するかどうかを調べ、配列を更新する</target>
        </trans-unit>
        <trans-unit id="7e1007aaa70de53e880a3535d978eaf43256864e" translate="yes" xml:space="preserve">
          <source>Finding successive matches</source>
          <target state="translated">連続した試合を探す</target>
        </trans-unit>
        <trans-unit id="bb3bc4ab22c6f54427b5ca14af39756cc239a13b" translate="yes" xml:space="preserve">
          <source>Finding symbol properties on objects</source>
          <target state="translated">オブジェクトのシンボルプロパティを見つける</target>
        </trans-unit>
        <trans-unit id="b4ee6522335b033249255b4cc1d572993282aafb" translate="yes" xml:space="preserve">
          <source>Firefox</source>
          <target state="translated">Firefox</target>
        </trans-unit>
        <trans-unit id="b9e5aaa5ef8341eacc819710d9436cfc5853e41c" translate="yes" xml:space="preserve">
          <source>Firefox (SpiderMonkey)</source>
          <target state="translated">Firefox (SpiderMonkey)</target>
        </trans-unit>
        <trans-unit id="4d1521feafccc55ae3eb0b7fe412c31a18c24f85" translate="yes" xml:space="preserve">
          <source>Firefox (SpiderMonkey) also implemented an earlier version of generators in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7&quot;&gt;JavaScript 1.7&lt;/a&gt;, where the star (*) in the function declaration was not necessary (you just use the &lt;code&gt;yield&lt;/code&gt; keyword in the function body). However, legacy generators support has been removed since Firefox 58 (released on January 23, 2018) (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1083482&quot;&gt;bug 1083482&lt;/a&gt;).</source>
          <target state="translated">Firefox（SpiderMonkey）は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7&quot;&gt;JavaScript 1.7の&lt;/a&gt;以前のバージョンのジェネレーターも実装しました。関数宣言のスター（*）は必要ありませんでした（関数本体で &lt;code&gt;yield&lt;/code&gt; キーワードを使用するだけです）。ただし、レガシージェネレーターのサポートは、Firefox 58（2018年1月23日にリリース）から削除されました（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1083482&quot;&gt;バグ1083482&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="79564b98bb5b81c590c23d2688cdc61c3e394cea" translate="yes" xml:space="preserve">
          <source>Firefox 4 through 22 will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; on any attempt whatsoever (whether permitted or not) to redefine the &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property of an array.</source>
          <target state="translated">Firefox 4から22は、配列の&lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティを再定義しようとする試みが何であれ（許可されているかどうかにかかわらず）&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="6a5d9ecf354d6740bdcdb7f53a41cac2ba32a87f" translate="yes" xml:space="preserve">
          <source>Firefox 49 (Firefox 49 / Thunderbird 49 / SeaMonkey 2.46) changed the parsing of 2-digit years to be aligned with the Google Chrome browser instead of Internet Explorer. Now, 2-digit years that are less than &lt;code&gt;50&lt;/code&gt; are parsed as 21st century years. For example, &lt;code&gt;04/16/17&lt;/code&gt;, previously parsed as April 16, 1917, will be April 16, 2017 now. To avoid any interoperability issues or ambiguous years, it is recommended to use the ISO 8601 format like &quot;2017-04-16&quot; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1265136&quot;&gt;bug 1265136&lt;/a&gt;).</source>
          <target state="translated">Firefox 49（Firefox 49 / Thunderbird 49 / SeaMonkey 2.46）では、2桁の年の解析がInternet ExplorerではなくGoogle Chromeブラウザーに合わせて変更されました。現在、 &lt;code&gt;50&lt;/code&gt; 未満の2桁の年は21世紀の年として解析されます。たとえば、以前は1917年4月16日として解析されていた &lt;code&gt;04/16/17&lt;/code&gt; は、現在は2017年4月16日になります。相互運用性の問題やあいまいな年を回避するには、「2017-04-16」のようなISO 8601形式を使用することをお勧めします（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1265136&quot;&gt;バグ1265136&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="db908b00f13b43b864c634abccfc04620ec44717" translate="yes" xml:space="preserve">
          <source>Firefox 54 adds support of &lt;code&gt;let&lt;/code&gt; in workers.</source>
          <target state="translated">Firefox 54では、 &lt;code&gt;let&lt;/code&gt; inワーカーのサポートが追加されています。</target>
        </trans-unit>
        <trans-unit id="a45270edbc762154a6f271f3eb4960596f0ef424" translate="yes" xml:space="preserve">
          <source>Firefox &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1222552&quot;&gt;bug 1222552&lt;/a&gt; tracks the removal of String generic methods.</source>
          <target state="translated">Firefox &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1222552&quot;&gt;バグ1222552&lt;/a&gt;は、Stringジェネリックメソッドの削除を追跡します。</target>
        </trans-unit>
        <trans-unit id="35e08ebaf6a034e084ac621e4a8de400a08ba9e7" translate="yes" xml:space="preserve">
          <source>Firefox for Android</source>
          <target state="translated">Android用Firefox</target>
        </trans-unit>
        <trans-unit id="74f9047b6c6fa8c499975106dfc6e802ca444bdf" translate="yes" xml:space="preserve">
          <source>Firefox provided a non-standard destructuring implementation from Firefox 2 to 40.</source>
          <target state="translated">Firefox は Firefox 2 から 40 まで非標準のデストラクチャリング実装を提供していました。</target>
        </trans-unit>
        <trans-unit id="479561c747d08a6c5a06f978b23d08262fd29f10" translate="yes" xml:space="preserve">
          <source>Firefox-specific notes</source>
          <target state="translated">Firefox特有の注意点</target>
        </trans-unit>
        <trans-unit id="343ed92e59bf4112144f44a78b87fe8a07807593" translate="yes" xml:space="preserve">
          <source>First example: Appending a chain to a prototype</source>
          <target state="translated">最初の例。プロトタイプにチェーンを追加する</target>
        </trans-unit>
        <trans-unit id="29fd4edccdecf77bd7c10cb34e0754a2ea1c38d1" translate="yes" xml:space="preserve">
          <source>First number.</source>
          <target state="translated">最初の番号。</target>
        </trans-unit>
        <trans-unit id="82bfd1c53da65ebf30035357da255d6d94c2ef18" translate="yes" xml:space="preserve">
          <source>First overload example</source>
          <target state="translated">最初のオーバーロードの例</target>
        </trans-unit>
        <trans-unit id="466d85d781b7db06275166930a81e0dca37c49b3" translate="yes" xml:space="preserve">
          <source>First standardisation of the format.</source>
          <target state="translated">フォーマットの最初の標準化。</target>
        </trans-unit>
        <trans-unit id="5b93748b0a3a681253a74743394a120c7a6fa7b9" translate="yes" xml:space="preserve">
          <source>First, in strict mode, a short list of identifiers become reserved keywords. These words are &lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;. In strict mode, then, you can't name or use variables or arguments with these names.</source>
          <target state="translated">まず、厳密モードでは、識別子の短いリストが予約済みキーワードになります。これらの単語は、 &lt;code&gt;implements&lt;/code&gt; 、 &lt;code&gt;interface&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;package&lt;/code&gt; 、 &lt;code&gt;private&lt;/code&gt; 、 &lt;code&gt;protected&lt;/code&gt; 、 &lt;code&gt;public&lt;/code&gt; 、 &lt;code&gt;static&lt;/code&gt; 、 &lt;code&gt;yield&lt;/code&gt; です。厳密モードでは、これらの名前を持つ変数や引数に名前を付けたり、使用したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="e8c4a0e634f6c21877c0422c33f30601e6bc1d22" translate="yes" xml:space="preserve">
          <source>First, let's see what happens with this:</source>
          <target state="translated">まずは、これでどうなるか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="d7e4ecada8c173592514cb716614c0fb6feafa19" translate="yes" xml:space="preserve">
          <source>First, strict mode makes it impossible to accidentally create global variables. In normal JavaScript mistyping a variable in an assignment creates a new property on the global object and continues to &quot;work&quot; (although future failure is possible: likely, in modern JavaScript). Assignments, which would accidentally create global variables, instead throw an error in strict mode:</source>
          <target state="translated">第一に、厳密モードは誤ってグローバル変数を作成することを不可能にします。通常のJavaScriptでは、代入で変数を誤入力するとグローバルオブジェクトに新しいプロパティが作成され、&quot;動作 &quot;し続けます(将来的に失敗する可能性はありますが、現代のJavaScriptではその可能性が高いです)。誤ってグローバル変数を作成してしまう代入は、代わりに厳格モードでエラーを投げます。</target>
        </trans-unit>
        <trans-unit id="93661d5eef74f0e969085b8ecfcc54aebce0fe81" translate="yes" xml:space="preserve">
          <source>First, strict mode prohibits &lt;code&gt;with&lt;/code&gt;. The problem with &lt;code&gt;with&lt;/code&gt; is that any name inside the block might map either to a property of the object passed to it, or to a variable in surrounding (or even global) scope, at runtime: it's impossible to know which beforehand. Strict mode makes &lt;code&gt;with&lt;/code&gt; a syntax error, so there's no chance for a name in a &lt;code&gt;with&lt;/code&gt; to refer to an unknown location at runtime:</source>
          <target state="translated">まず、厳格モードではを禁止 &lt;code&gt;with&lt;/code&gt; ます。問題点 &lt;code&gt;with&lt;/code&gt; ブロック内の任意の名前は、実行時に（あるいはグローバルな）範囲を、周囲にそれへの、または変数に渡されたオブジェクトのプロパティのいずれかにマッピングするかもしれないということです。それは事前のかを知ることは不可能です。厳密モード &lt;code&gt;with&lt;/code&gt; は構文エラーが発生するため、実行時に &lt;code&gt;with&lt;/code&gt; 内の名前が不明な場所を参照する可能性はありません。</target>
        </trans-unit>
        <trans-unit id="0bc0f2deeb40670137ee5e7fce77f88441850542" translate="yes" xml:space="preserve">
          <source>First, the names &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; can't be bound or assigned in language syntax. All these attempts to do so are syntax errors:</source>
          <target state="translated">まず、名前 &lt;code&gt;eval&lt;/code&gt; と &lt;code&gt;arguments&lt;/code&gt; は、言語構文でバインドしたり割り当てたりすることはできません。これらの試みはすべて構文エラーです。</target>
        </trans-unit>
        <trans-unit id="ddd18856e490741983da8a014f3d4fda001f883a" translate="yes" xml:space="preserve">
          <source>First, the value passed as &lt;code&gt;this&lt;/code&gt; to a function in strict mode is not forced into being an object (a.k.a. &quot;boxed&quot;). For a normal function, &lt;code&gt;this&lt;/code&gt; is always an object: either the provided object if called with an object-valued &lt;code&gt;this&lt;/code&gt;; the value, boxed, if called with a Boolean, string, or number &lt;code&gt;this&lt;/code&gt;; or the global object if called with an &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;&lt;code&gt;this&lt;/code&gt;. (Use &lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; to specify a particular &lt;code&gt;this&lt;/code&gt;.) Not only is automatic boxing a performance cost, but exposing the global object in browsers is a security hazard because the global object provides access to functionality that &quot;secure&quot; JavaScript environments must restrict. Thus for a strict mode function, the specified &lt;code&gt;this&lt;/code&gt; is not boxed into an object, and if unspecified, &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;:</source>
          <target state="translated">第1に、strictモードの関数に &lt;code&gt;this&lt;/code&gt; として渡される値は、オブジェクト（別名「ボックス化」）になることを強制されません。通常の関数の場合、 &lt;code&gt;this&lt;/code&gt; は常にオブジェクトです。オブジェクト値 &lt;code&gt;this&lt;/code&gt; で呼び出された場合は、指定されたオブジェクト。ブール値、文字列、または数値 &lt;code&gt;this&lt;/code&gt; で呼び出された場合、ボックス化された値。 &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; &lt;code&gt;this&lt;/code&gt; で呼び出された場合は、グローバルオブジェクト。 （特定の &lt;code&gt;this&lt;/code&gt; を指定するには、&lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt; &lt;code&gt;call&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt; &lt;code&gt;apply&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;を使用します。）自動ボクシングはパフォーマンスコストだけでなく、ブラウザでグローバルオブジェクトを公開することは、「安全な」JavaScript環境が制限する必要のある機能へのアクセスを提供するため、セキュリティ上の危険があります。したがって、厳密なモード関数の場合、指定された &lt;code&gt;this&lt;/code&gt; はオブジェクトにボックス化されず、指定されていない場合、 &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;undefined&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="f7d023808f174ab8e9ea16e2a95b38e5b17ecf73" translate="yes" xml:space="preserve">
          <source>Five ways to trigger the getPrototypeOf trap</source>
          <target state="translated">getPrototypeOfトラップを起動する5つの方法</target>
        </trans-unit>
        <trans-unit id="ec78f5797be806c8fb7d55e2cb1cd7c9c178dc49" translate="yes" xml:space="preserve">
          <source>Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that's not strict mode.</source>
          <target state="translated">JavaScriptエンジンが最適化を実行するのを困難にするミスを修正:厳密モードのコードは、厳密モードではない同一のコードよりも高速に動作するように作られることがあります。</target>
        </trans-unit>
        <trans-unit id="2fb3a7472b9e38ce89982c734b3407ebd8795a29" translate="yes" xml:space="preserve">
          <source>Fixing &lt;code&gt;charAt()&lt;/code&gt; to support non-Basic-Multilingual-Plane (BMP) characters</source>
          <target state="translated">Basic-Multilingual-Plane（BMP）以外の文字をサポートするための &lt;code&gt;charAt()&lt;/code&gt; の修正</target>
        </trans-unit>
        <trans-unit id="11507ac95dca3feb2b8c4bb287993517917f67b9" translate="yes" xml:space="preserve">
          <source>Fixing &lt;code&gt;charCodeAt()&lt;/code&gt; to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known</source>
          <target state="translated">&lt;code&gt;charCodeAt()&lt;/code&gt; を修正して、Basic-Multilingual-Plane以外の文字が文字列の前にあることがわかっている場合にそれらを処理する</target>
        </trans-unit>
        <trans-unit id="a7ded16d6380cdd3e6576df896aefa0771f62887" translate="yes" xml:space="preserve">
          <source>Fixing &lt;code&gt;charCodeAt()&lt;/code&gt; to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown</source>
          <target state="translated">&lt;code&gt;charCodeAt()&lt;/code&gt; を修正して、Basic-Multilingual-Plane以外の文字が文字列の前にあるか不明な場合にそれらを処理する</target>
        </trans-unit>
        <trans-unit id="2e89dff31c07cb2e1222562e89dab65cd50f935f" translate="yes" xml:space="preserve">
          <source>Fixing the error</source>
          <target state="translated">エラーの修正</target>
        </trans-unit>
        <trans-unit id="27c496f6d390ee9de934635b46bf75430ba5520d" translate="yes" xml:space="preserve">
          <source>Fixing the issue</source>
          <target state="translated">問題の修正</target>
        </trans-unit>
        <trans-unit id="a774409a00c21de377cf8ed5c6a56b8547973042" translate="yes" xml:space="preserve">
          <source>Flag</source>
          <target state="translated">Flag</target>
        </trans-unit>
        <trans-unit id="24ae54aa123f1e9b4344ecb937d6d2afe72643b5" translate="yes" xml:space="preserve">
          <source>Flags and bitmasks</source>
          <target state="translated">フラグとビットマスク</target>
        </trans-unit>
        <trans-unit id="402c310f773a2f54c4f79cd3b5e281e5bd324200" translate="yes" xml:space="preserve">
          <source>Flags can be cleared by ANDing them with a bitmask, where each bit with the value zero will clear the corresponding flag, if it isn't already cleared. This bitmask can be created by NOTing primitive bitmasks. For example, the bitmask 1010 can be used to clear flags A and C:</source>
          <target state="translated">フラグは、ビットマスクでフラグを AND することでクリアすることができます。このビットマスクは、プリミティブビットマスクを NOT することで作成することができます。例えば、ビットマスク1010はフラグAとCをクリアするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="8be35b5435b7b61382c9f1f05c9391b546149731" translate="yes" xml:space="preserve">
          <source>Flags can be set by ORing them with a bitmask, where each bit with the value one will set the corresponding flag, if that flag isn't already set. For example, the bitmask 1100 can be used to set flags C and D:</source>
          <target state="translated">フラグは、ビットマスクでフラグをORすることで設定することができます。例えば、ビットマスク1100はフラグCとDを設定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="6b192ec50adb695094e9ea8e3074cdf0cab908bc" translate="yes" xml:space="preserve">
          <source>Flags can be toggled by XORing them with a bitmask, where each bit with the value one will toggle the corresponding flag. For example, the bitmask 0110 can be used to toggle flags B and C:</source>
          <target state="translated">フラグはビットマスクを用いて XOR することでトグルさせることができます。例えば、ビットマスク 0110 はフラグ B と C のトグルに使用できます。</target>
        </trans-unit>
        <trans-unit id="93561e04ebf9722b05b722a676a059de1cd150b6" translate="yes" xml:space="preserve">
          <source>Flags in the &lt;code&gt;flags&lt;/code&gt; property are sorted alphabetically (from left to right, e.g. &lt;code&gt;&quot;gimuy&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; プロパティのフラグはアルファベット順にソートされます（左から右に、たとえば &lt;code&gt;&quot;gimuy&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c74be1a6e28386bf4303b024e8247e94f690663b" translate="yes" xml:space="preserve">
          <source>Flatten an array of arrays</source>
          <target state="translated">配列の配列を平坦化する</target>
        </trans-unit>
        <trans-unit id="d7cd24bf280532f4f898959db20c74b3ccc8b2ae" translate="yes" xml:space="preserve">
          <source>Flattening and array holes</source>
          <target state="translated">平坦化とアレイホール</target>
        </trans-unit>
        <trans-unit id="c2f19e1b80d5b2df4e3edb0bdb33cbdeb5eed7a6" translate="yes" xml:space="preserve">
          <source>Flattening nested arrays</source>
          <target state="translated">入れ子になった配列の平坦化</target>
        </trans-unit>
        <trans-unit id="1cbcea917c60692fe6c69a4151dd7e5bcc9da555" translate="yes" xml:space="preserve">
          <source>Float32Array</source>
          <target state="translated">Float32Array</target>
        </trans-unit>
        <trans-unit id="5ff19b16982cfa6758e365cf413637891bed2071" translate="yes" xml:space="preserve">
          <source>Float32Array.length</source>
          <target state="translated">Float32Array.length</target>
        </trans-unit>
        <trans-unit id="42ae0e778d4c2ca3c83ff2f30eea14a7dfba5a83" translate="yes" xml:space="preserve">
          <source>Float64Array</source>
          <target state="translated">Float64Array</target>
        </trans-unit>
        <trans-unit id="8c08f72095752842331f617ad40382c52a79be64" translate="yes" xml:space="preserve">
          <source>Float64Array.length</source>
          <target state="translated">Float64Array.length</target>
        </trans-unit>
        <trans-unit id="38fb7d13eea1d3aa6fea21b45d143f96020357b9" translate="yes" xml:space="preserve">
          <source>Floating point numbers cannot represent all decimals precisely in binary which can lead to unexpected results such as &lt;code&gt;0.1 + 0.2 === 0.3&lt;/code&gt; returning &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="translated">浮動小数点数は、すべての小数を正確に2進数で表すことができないため、 &lt;code&gt;0.1 + 0.2 === 0.3&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; を返すなど、予期しない結果が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2b43243fdd89b16da4288d445ddfe79d321b593e" translate="yes" xml:space="preserve">
          <source>Following example describes how &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; property can modify the primitive value converted from an object.</source>
          <target state="translated">次の例では、 &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; プロパティがオブジェクトから変換されたプリミティブ値を変更する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="f922c692de8b242cb40eacde64bca978c1ca3adf" translate="yes" xml:space="preserve">
          <source>Following example uses filter() to filter array content based on search criteria</source>
          <target state="translated">次の例では、検索条件に基づいて配列の内容をフィルタリングするために filter()を使用しています。</target>
        </trans-unit>
        <trans-unit id="73b9316c019823619b5646cb777484856c64691b" translate="yes" xml:space="preserve">
          <source>Following, an example to demonstrate the asynchronicity of the &lt;code&gt;then&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;then&lt;/code&gt; 、thenメソッドの非同期性を示す例を示します。</target>
        </trans-unit>
        <trans-unit id="f7880600348a091a43e2a84906d6002820643108" translate="yes" xml:space="preserve">
          <source>For</source>
          <target state="translated">For</target>
        </trans-unit>
        <trans-unit id="d963f5da0cdbd62bc6ea76588ca83a2bc87e9956" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects and values, the built-in &lt;code&gt;toString&lt;/code&gt; method returns the string &quot;&lt;code&gt;true&lt;/code&gt;&quot; or &quot;&lt;code&gt;false&lt;/code&gt;&quot; depending on the value of the boolean object.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;オブジェクトと値、ビルトイン &lt;code&gt;toString&lt;/code&gt; メソッドが返す文字列「 &lt;code&gt;true&lt;/code&gt; 」または「 &lt;code&gt;false&lt;/code&gt; ブールオブジェクトの値に応じて」。</target>
        </trans-unit>
        <trans-unit id="78f02d508180d333d3bdf9c4b73f513109cd92ab" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#application/x-www-form-urlencoded-encoding-algorithm&quot;&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/a&gt;, spaces are to be replaced by '+', so one may wish to follow a &lt;code&gt;encodeURIComponent&lt;/code&gt; replacement with an additional replacement of &quot;%20&quot; with &quot;+&quot;.</source>
          <target state="translated">ための&lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#application/x-www-form-urlencoded-encoding-algorithm&quot;&gt; &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; &lt;/a&gt;、スペースは1つが追従することを望むかもしれないので、「+」によって置換される &lt;code&gt;encodeURIComponent&lt;/code&gt; での「+」と「20％」のさらなる置換と交換。</target>
        </trans-unit>
        <trans-unit id="0150c094f814b58e502257f3320b5c178ae8e57b" translate="yes" xml:space="preserve">
          <source>For Firefox code, see also the XPCOMUtils.jsm code module, which defines the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/XPCOMUtils.jsm#defineLazyGetter()&quot;&gt;defineLazyGetter()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">Firefoxコードについては、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/XPCOMUtils.jsm#defineLazyGetter()&quot;&gt;defineLazyGetter()&lt;/a&gt;&lt;/code&gt; 関数を定義するXPCOMUtils.jsmコードモジュールも参照してください。</target>
        </trans-unit>
        <trans-unit id="210a879a4b2aa0d95ec9da37fe5892d29b8a79a9" translate="yes" xml:space="preserve">
          <source>For a simple Browser Polyfill, see &lt;a href=&quot;http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html&quot;&gt;Javascript - Object.keys Browser Compatibility&lt;/a&gt;.</source>
          <target state="translated">単純なブラウザポリフィルについては、「&lt;a href=&quot;http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html&quot;&gt;JavaScript-Object.keysブラウザ互換性&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="6eed66056ef285fe12b8fd7635a096bba84ab196" translate="yes" xml:space="preserve">
          <source>For all</source>
          <target state="translated">全ての方へ</target>
        </trans-unit>
        <trans-unit id="a37a1adcb69a9fd41ca6383d2e475cccb64b3ed8" translate="yes" xml:space="preserve">
          <source>For an alphabetical listing see the sidebar on the left.</source>
          <target state="translated">アルファベット一覧は左のサイドバーを参照してください。</target>
        </trans-unit>
        <trans-unit id="1be6e4c4961c1505f420c1021f909ec3aa651732" translate="yes" xml:space="preserve">
          <source>For an empty string, &lt;code&gt;length&lt;/code&gt; is 0.</source>
          <target state="translated">空の文字列の場合、 &lt;code&gt;length&lt;/code&gt; は0です。</target>
        </trans-unit>
        <trans-unit id="59b2abd13b3c51e0458897a7926919a7cea6ff8d" translate="yes" xml:space="preserve">
          <source>For an introduction to regular expressions, read the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;Regular Expressions chapter&lt;/a&gt; in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;JavaScript Guide&lt;/a&gt;.</source>
          <target state="translated">正規表現の概要については、読んで&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;正規表現の章&lt;/a&gt;で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;はJavaScriptをガイド&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc2f422b6b7a4e76ecff0b1265a311c238657e3c" translate="yes" xml:space="preserve">
          <source>For arithmetic purposes, the &lt;code&gt;NaN&lt;/code&gt; value is not a number in any radix. You can call the &lt;a href=&quot;isnan&quot;&gt;&lt;code&gt;isNaN&lt;/code&gt;&lt;/a&gt; function to determine if the result of &lt;code&gt;parseFloat&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;. If &lt;code&gt;NaN&lt;/code&gt; is passed on to arithmetic operations, the operation results will also be &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">算術の目的で、 &lt;code&gt;NaN&lt;/code&gt; 値は基数の数値ではありません。&lt;a href=&quot;isnan&quot;&gt; &lt;code&gt;isNaN&lt;/code&gt; &lt;/a&gt;関数を呼び出して、 &lt;code&gt;parseFloat&lt;/code&gt; の結果が &lt;code&gt;NaN&lt;/code&gt; かどうかを判断できます。 &lt;code&gt;NaN&lt;/code&gt; が算術演算に渡される場合、演算結果も &lt;code&gt;NaN&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="81f69a3c9b1dad06d544f28881400c339201a899" translate="yes" xml:space="preserve">
          <source>For arithmetic purposes, the &lt;code&gt;NaN&lt;/code&gt; value is not a number in any radix. You can call the &lt;a href=&quot;isnan&quot;&gt;&lt;code&gt;isNaN&lt;/code&gt;&lt;/a&gt; function to determine if the result of &lt;code&gt;parseInt&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;. If &lt;code&gt;NaN&lt;/code&gt; is passed on to arithmetic operations, the operation results will also be &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">算術の目的で、 &lt;code&gt;NaN&lt;/code&gt; 値は基数の数値ではありません。&lt;a href=&quot;isnan&quot;&gt; &lt;code&gt;isNaN&lt;/code&gt; &lt;/a&gt;関数を呼び出して、 &lt;code&gt;parseInt&lt;/code&gt; の結果が &lt;code&gt;NaN&lt;/code&gt; かどうかを確認できます。 &lt;code&gt;NaN&lt;/code&gt; が算術演算に渡される場合、演算結果も &lt;code&gt;NaN&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e014e579d555536cf34d483834677b42bd983ecb" translate="yes" xml:space="preserve">
          <source>For array literals or strings:</source>
          <target state="translated">配列リテラルや文字列の場合。</target>
        </trans-unit>
        <trans-unit id="d60d1f5640b0dfe178b8712fb24c3a7983774b1f" translate="yes" xml:space="preserve">
          <source>For array objects, the default behavior is to spread (flatten) elements. &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; can avoid flattening in these cases.</source>
          <target state="translated">配列オブジェクトの場合、デフォルトの動作は要素を展開（平坦化）することです。このような場合、 &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; はフラット化を回避できます。</target>
        </trans-unit>
        <trans-unit id="5669a9934fcde12871e529e3db4e75c726235832" translate="yes" xml:space="preserve">
          <source>For array-like objects, the default behavior is no spreading or flattening. &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; can force flattening in these cases.</source>
          <target state="translated">配列のようなオブジェクトの場合、デフォルトの動作は拡散や平坦化ではありません。このような場合、 &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; は強制的にフラット化できます。</target>
        </trans-unit>
        <trans-unit id="3ea296a3a7670c5a8a211c5e999d00233eacd04f" translate="yes" xml:space="preserve">
          <source>For array-like objects, the default is to not spread. &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; needs to be set to &lt;code&gt;true&lt;/code&gt; in order to get a flattened array:</source>
          <target state="translated">配列のようなオブジェクトの場合、デフォルトでは拡散しません。フラット化された配列を取得するには、 &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d4ebd17ee6524394d68de55d71267a3a2129d421" translate="yes" xml:space="preserve">
          <source>For both &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;, NaN is treated as 0.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; の両方で、NaNは0として扱われます。</target>
        </trans-unit>
        <trans-unit id="26aabe4f640dee6e21eddc2167826f78cdca41f3" translate="yes" xml:space="preserve">
          <source>For certain methods, you have to provide a (callback) function and it will work on specific objects only. In this example, &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt; is used, which will work with &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; objects only.</source>
          <target state="translated">特定のメソッドでは、（コールバック）関数を提供する必要があり、特定のオブジェクトでのみ機能します。この例では、&lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt;が使用されており、これは&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;オブジェクトでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="e0e1751073e5970c64bca2f757d1c623e86bb3c0" translate="yes" xml:space="preserve">
          <source>For character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See &lt;a href=&quot;object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; for more information.)</source>
          <target state="translated">ブラケット表記を使用した文字アクセスの場合、これらのプロパティを削除または値を割り当てようとしても成功しません。関連するプロパティは、書き込みも構成もできません。（詳細については、&lt;a href=&quot;object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="99044996f4e427d6809e09a478ce8eac0722235a" translate="yes" xml:space="preserve">
          <source>For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally.</source>
          <target state="translated">通常、文字通りに扱われる文字については、次の文字が特別であり、文字通りに解釈されないことを示しています。</target>
        </trans-unit>
        <trans-unit id="a748d10a4ab866b8eb98e9cd6ef0ff7546d5f266" translate="yes" xml:space="preserve">
          <source>For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally.</source>
          <target state="translated">通常特別に扱われる文字については、次の文字は特別ではなく、文字通りに解釈すべきであることを示しています。</target>
        </trans-unit>
        <trans-unit id="6b13759ba937d4a7dfd20fa0a292bf064a8452b9" translate="yes" xml:space="preserve">
          <source>For compatibility with millennium calculations (in other words, to take into account the year 2000), you should always specify the year in full; for example, use 1998, not 98. To assist you in specifying the complete year, JavaScript includes the methods &lt;a href=&quot;getfullyear&quot;&gt;&lt;code&gt;getFullYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;setfullyear&quot;&gt;&lt;code&gt;setFullYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getutcfullyear&quot;&gt;&lt;code&gt;getUTCFullYear()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setutcfullyear&quot;&gt;&lt;code&gt;setUTCFullYear()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ミレニアム計算との互換性（つまり、2000年を考慮に入れる）のために、常に完全な年を指定する必要があります。たとえば、98ではなく1998を使用します。完全な年を指定するのに役立つように、JavaScriptにはメソッド&lt;a href=&quot;getfullyear&quot;&gt; &lt;code&gt;getFullYear()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;setfullyear&quot;&gt; &lt;code&gt;setFullYear()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;getutcfullyear&quot;&gt; &lt;code&gt;getUTCFullYear()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;setutcfullyear&quot;&gt; &lt;code&gt;setUTCFullYear()&lt;/code&gt; が含まれてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3404e5bf70a885865d212605712da9b2b525a7d4" translate="yes" xml:space="preserve">
          <source>For consistency with functions like &lt;a href=&quot;padend&quot;&gt;&lt;code&gt;String.prototype.padEnd&lt;/code&gt;&lt;/a&gt; the standard method name is &lt;code&gt;trimEnd&lt;/code&gt;. However, for web compatibility reasons, &lt;code&gt;trimRight&lt;/code&gt; remains as an alias to &lt;code&gt;trimEnd&lt;/code&gt;. In some engines this means:</source>
          <target state="translated">&lt;a href=&quot;padend&quot;&gt; &lt;code&gt;String.prototype.padEnd&lt;/code&gt; &lt;/a&gt;などの関数との整合性を保つため、標準のメソッド名は &lt;code&gt;trimEnd&lt;/code&gt; です。ただし、Web互換性の理由から、 &lt;code&gt;trimRight&lt;/code&gt; はtrimEndのエイリアスとして &lt;code&gt;trimEnd&lt;/code&gt; ます。一部のエンジンでは、これは次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="f18d1ae2a3eb146497e18d6828d80707fdde7cf4" translate="yes" xml:space="preserve">
          <source>For consistency with functions like &lt;a href=&quot;padstart&quot;&gt;&lt;code&gt;String.prototype.padStart&lt;/code&gt;&lt;/a&gt; the standard method name is &lt;code&gt;trimStart&lt;/code&gt;. However, for web compatibility reasons, &lt;code&gt;trimLeft&lt;/code&gt; remains as an alias to &lt;code&gt;trimStart&lt;/code&gt;. In some engines this means:</source>
          <target state="translated">&lt;a href=&quot;padstart&quot;&gt; &lt;code&gt;String.prototype.padStart&lt;/code&gt; &lt;/a&gt;などの関数との一貫性を保つため、標準のメソッド名は &lt;code&gt;trimStart&lt;/code&gt; です。ただし、Web互換性の理由から、 &lt;code&gt;trimLeft&lt;/code&gt; はtrimStartのエイリアスとして &lt;code&gt;trimStart&lt;/code&gt; ます。一部のエンジンでは、これは次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="f9918cac41143b821348744973cb230ce45c39e6" translate="yes" xml:space="preserve">
          <source>For data properties of a frozen object, values cannot be changed, the writable and configurable attributes are set to false. Accessor properties (getters and setters) work the same (and still give the illusion that you are changing the value). Note that values that are objects can still be modified, unless they are also frozen. As an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added to or removed from the array.</source>
          <target state="translated">フローズドオブジェクトのデータプロパティについては、値を変更することはできず、書き込み可能属性と設定可能属性はfalseに設定されています。アクセサプロパティ(ゲッターとセッター)も同じように動作します(なお、値を変更しているかのような錯覚を与えます)。オブジェクトである値は、フリーズしていない限り、変更することができることに注意してください。オブジェクトとして、配列を凍結することができます。</target>
        </trans-unit>
        <trans-unit id="3fc009100b3e934d5118774a507a120144dc3f88" translate="yes" xml:space="preserve">
          <source>For deep cloning, we need to use other alternatives because &lt;code&gt;Object.assign()&lt;/code&gt; copies property values. If the source value is a reference to an object, it only copies that reference value.</source>
          <target state="translated">ディープクローニングでは、 &lt;code&gt;Object.assign()&lt;/code&gt; がプロパティ値をコピーするため、他の代替手段を使用する必要があります。ソース値がオブジェクトへの参照である場合、その参照値のみがコピーされます。</target>
        </trans-unit>
        <trans-unit id="a872f9cc20d8e834dae1ca1ebcab116bbe0ba998" translate="yes" xml:space="preserve">
          <source>For derived classes, the default constructor is:</source>
          <target state="translated">派生クラスの場合、デフォルトのコンストラクタは</target>
        </trans-unit>
        <trans-unit id="5ae3d3d29fc3be84e49f8896de494e2a5bc4e77f" translate="yes" xml:space="preserve">
          <source>For didactic purpose only (since there is the &lt;code&gt;&lt;a href=&quot;../global_objects/number/tostring&quot;&gt;Number.toString(2)&lt;/a&gt;&lt;/code&gt; method), we show how it is possible to modify the &lt;code&gt;arrayFromMask&lt;/code&gt; algorithm in order to create a &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; containing the binary representation of a &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt;, rather than an &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">（ &lt;code&gt;&lt;a href=&quot;../global_objects/number/tostring&quot;&gt;Number.toString(2)&lt;/a&gt;&lt;/code&gt; メソッドがあるため）教訓的な目的のみで、 &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; ではなく、 &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt; のバイナリ表現を含む &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; を作成するために &lt;code&gt;arrayFromMask&lt;/code&gt; アルゴリズムを変更する方法を示します。</target>
        </trans-unit>
        <trans-unit id="3be8fcb6f27956cba103591a38605bc08e18e6ee" translate="yes" xml:space="preserve">
          <source>For each variable declared, you may optionally specify its initial value to any legal JavaScript expression.</source>
          <target state="translated">宣言された各変数に対して、その初期値を任意の合法的な JavaScript 式に指定することができます。</target>
        </trans-unit>
        <trans-unit id="af9424dff50db5cffee05db82f14e282e8a7ffab" translate="yes" xml:space="preserve">
          <source>For example checking if a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;Nodes&lt;/a&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; in a different context you can use &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt;</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;ノード&lt;/a&gt;が別のコンテキストで&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt;かどうかを確認するには、 &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="a1921efdfed6a87b6e5c50e8a40d2c7e77f411a0" translate="yes" xml:space="preserve">
          <source>For example, &quot;*&quot; is a special character that means 0 or more occurrences of the preceding character should be matched; for example, &lt;code&gt;/a*/&lt;/code&gt; means match 0 or more &quot;a&quot;s. To match &lt;code&gt;*&lt;/code&gt; literally, precede it with a backslash; for example, &lt;code&gt;/a\*/&lt;/code&gt; matches &quot;a*&quot;.</source>
          <target state="translated">たとえば、 &quot;*&quot;は、先行する文字の0回以上の出現に一致する必要があることを意味する特殊文字です。たとえば、 &lt;code&gt;/a*/&lt;/code&gt; は0個以上の「a」に一致することを意味します。 &lt;code&gt;*&lt;/code&gt; を文字通り一致させるには、その前にバックスラッシュを付けます。たとえば、 &lt;code&gt;/a\*/&lt;/code&gt; 「a *」と一致します。</target>
        </trans-unit>
        <trans-unit id="bea3e1a01ebe6de98dcc04169dd3576954076ff3" translate="yes" xml:space="preserve">
          <source>For example, /&lt;code&gt;Jack(?=Sprat)/&lt;/code&gt; matches &quot;Jack&quot; only if it is followed by &quot;Sprat&quot;.</source>
          <target state="translated">たとえば、/ &lt;code&gt;Jack(?=Sprat)/&lt;/code&gt; は、 &quot;Sprat&quot;が後に続く場合にのみ &quot;Jack&quot;と一致します。</target>
        </trans-unit>
        <trans-unit id="f996f230c5ba69cacb722a4b28f7baf9a2451188" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/&amp;lt;.*?&amp;gt;/&lt;/code&gt; matches &quot;&amp;lt;foo&amp;gt;&quot; in &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;, whereas &lt;code&gt;/&amp;lt;.*&amp;gt;/&lt;/code&gt; matches &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/&amp;lt;.*?&amp;gt;/&lt;/code&gt; &amp;lt; 。*？ &amp;gt; /は「&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;」の「&amp;lt;foo&amp;gt;」と一致し、/ &amp;lt;。 &lt;code&gt;/&amp;lt;.*&amp;gt;/&lt;/code&gt; &amp;gt; /は「&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;」と一致します。</target>
        </trans-unit>
        <trans-unit id="27e4be0ac9808621eb5d1917ee74c672f0b47394" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/(foo)/&lt;/code&gt; matches and remembers &quot;foo&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/(foo)/&lt;/code&gt; は、「foo bar」の「foo」に一致して記憶します。</target>
        </trans-unit>
        <trans-unit id="731dc4cf5c8a54fbcbc2af314a327d088d98638c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/.y/&lt;/code&gt; matches &quot;my&quot; and &quot;ay&quot;, but not &quot;yes&quot;, in &quot;yes make my day&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/.y/&lt;/code&gt; 。y /は、「yes make my day」の「my」と「ay」に一致しますが、「yes」には一致しません。</target>
        </trans-unit>
        <trans-unit id="e2ecf141ae7a336698fb8c2752ab124b962f13e2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\Bon/&lt;/code&gt; matches &quot;on&quot; in &quot;at noon&quot;, and &lt;code&gt;/ye\B/&lt;/code&gt; matches &quot;ye&quot; in &quot;possibly yesterday&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\Bon/&lt;/code&gt; は「正午」の「on」に一致し、 &lt;code&gt;/ye\B/&lt;/code&gt; は「おそらく昨日」の「ye」に一致します。</target>
        </trans-unit>
        <trans-unit id="ba512b360907fd081a5c8d7d957c6b35edbcd627" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\D/&lt;/code&gt; or &lt;code&gt;/[^0-9]/&lt;/code&gt; matches &quot;B&quot; in &quot;B2 is the suite number&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\D/&lt;/code&gt; または &lt;code&gt;/[^0-9]/&lt;/code&gt; は、「B2 is the suite number」の「B」に一致します。</target>
        </trans-unit>
        <trans-unit id="72c8f4c13713a783b774b36799e9b95d4b11c727" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\S\w*/&lt;/code&gt; matches &quot;foo&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\S\w*/&lt;/code&gt; は、「foo bar」の「foo」に一致します。</target>
        </trans-unit>
        <trans-unit id="a10d7b5dd4f43f12c1a090ad22713c68343dbcce" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\W/&lt;/code&gt; or &lt;code&gt;/[^A-Za-z0-9_]/&lt;/code&gt; matches &quot;%&quot; in &quot;50%&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\W/&lt;/code&gt; または &lt;code&gt;/[^A-Za-z0-9_]/&lt;/code&gt; は、「50％」の「％」と一致します。</target>
        </trans-unit>
        <trans-unit id="58a7325cb42e0955f08d3fb78805a675633c686c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\cM/&lt;/code&gt; matches control-M in a string.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\cM/&lt;/code&gt; は文字列内のcontrol-Mに一致します。</target>
        </trans-unit>
        <trans-unit id="54379d80b8754985be2df6f32cd7b59e7b5d22b6" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\d+(?!\.)/&lt;/code&gt; matches a number only if it is not followed by a decimal point.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\d+(?!\.)/&lt;/code&gt; 。）/は、小数点が続かない場合にのみ数値と一致します。</target>
        </trans-unit>
        <trans-unit id="2f99f6f3b6617e0baeab0f498629bf696685e7c5" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\d/&lt;/code&gt; or &lt;code&gt;/[0-9]/&lt;/code&gt; matches &quot;2&quot; in &quot;B2 is the suite number&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\d/&lt;/code&gt; または &lt;code&gt;/[0-9]/&lt;/code&gt; は、「B2 is the suite number」の「2」に一致します。</target>
        </trans-unit>
        <trans-unit id="b666bd4de97017a6096dee7ee40ac60fc051d1ad" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\s\w*/&lt;/code&gt; matches &quot; bar&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\s\w*/&lt;/code&gt; は「foo bar」の「bar」に一致します。</target>
        </trans-unit>
        <trans-unit id="c081fbd7f9e8826910cd2ba54069a078d1643b1f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\w/&lt;/code&gt; matches &quot;a&quot; in &quot;apple&quot;, &quot;5&quot; in &quot;$5.28&quot;, and &quot;3&quot; in &quot;3D&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\w/&lt;/code&gt; は、「apple」の「a」、「$ 5.28」の「5」、「3D」の「3」と一致します。</target>
        </trans-unit>
        <trans-unit id="04e47940435de007ee6bfc72f9ee144bd618626f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/^A/&lt;/code&gt; does not match the &quot;A&quot; in &quot;an A&quot;, but does match the first &quot;A&quot; in &quot;An A&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/^A/&lt;/code&gt; は「an A」の「A」とは一致しませんが、「An A」の最初の「A」とは一致します。</target>
        </trans-unit>
        <trans-unit id="d8627b8a39beff2d023b9ce420d597267ed2aac7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a+/&lt;/code&gt; matches the &quot;a&quot; in &quot;candy&quot; and all the &quot;a&quot;'s in &quot;caaaaaaandy&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/a+/&lt;/code&gt; は、「candy」の「a」と「caaaaaaandy」のすべての「a」に一致します。</target>
        </trans-unit>
        <trans-unit id="77f98d5935fe226c6d759c07f102de18c3583fba" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/apple(,)\sorange\1/&lt;/code&gt; matches &quot;apple, orange,&quot; in &quot;apple, orange, cherry, peach&quot;. A complete example follows this table.</source>
          <target state="translated">たとえば、 &lt;code&gt;/apple(,)\sorange\1/&lt;/code&gt; は、「apple、orange、cherry、peach」の「apple、orange、」に一致します。完全な例はこの表の後にあります。</target>
        </trans-unit>
        <trans-unit id="08296657ebef91f76b34b0de5567df76b6e97cb4" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{1,3}/&lt;/code&gt; matches nothing in &quot;cndy&quot;, the &quot;a&quot; in &quot;candy&quot;, the two &quot;a&quot;'s in &quot;caandy&quot;, and the first three &quot;a&quot;'s in &quot;caaaaaaandy&quot;. Notice that when matching &quot;caaaaaaandy&quot;, the match is &quot;aaa&quot;, even though the original string had more &quot;a&quot;'s in it.</source>
          <target state="translated">たとえば、 &lt;code&gt;/a{1,3}/&lt;/code&gt; は「cndy」、「candy」の「a」、「caandy」の2つの「a」、および「」の最初の3つの「a」には一致しません。 caaaaaaandy」。「caaaaaaandy」と一致する場合、元の文字列に「a」がさらに含まれていても、一致は「aaa」です。</target>
        </trans-unit>
        <trans-unit id="a90f3faff5967d1b354e84aa4ba89dec44e6af85" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{2,}/&lt;/code&gt; doesn't match the &quot;a&quot; in &quot;candy&quot;, but matches all of the a's in &quot;caandy&quot; and in &quot;caaaaaaandy&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/a{2,}/&lt;/code&gt; は「candy」の「a」とは一致しませんが、「caandy」と「caaaaaaandy」のすべてのaと一致します。</target>
        </trans-unit>
        <trans-unit id="a4af36d397a8b981ed8a1d428eaa0a51abce8c20" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{2}/&lt;/code&gt; doesn't match the &quot;a&quot; in &quot;candy&quot;, but it matches all of the &quot;a&quot;'s in &quot;caandy&quot;, and the first two &quot;a&quot;'s in &quot;caaandy&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/a{2}/&lt;/code&gt; は「キャンディー」の「a」とは一致しませんが、「caandy」の「a」のすべて、および「caaandy」の最初の2つの「a」と一致します。 」</target>
        </trans-unit>
        <trans-unit id="3616762289f2ad86d25dbe81ba9ff555c4b706e2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/b/&lt;/code&gt; matches the character &quot;b&quot;. By placing a backslash in front of &quot;b&quot;, that is by using &lt;code&gt;/\b/&lt;/code&gt;, the character becomes special to mean match a word boundary.</source>
          <target state="translated">たとえば、 &lt;code&gt;/b/&lt;/code&gt; は文字「b」に一致します。&quot; &lt;code&gt;/\b/&lt;/code&gt; &quot;の前にバックスラッシュを配置することにより、つまり/ \ b /を使用すると、文字は単語境界と一致することを意味する特別なものになります。</target>
        </trans-unit>
        <trans-unit id="8e340ac6bd33c408c1574b00399d8080044c2819" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/bo*/&lt;/code&gt; matches &quot;boooo&quot; in &quot;A ghost booooed&quot; and &quot;b&quot; in &quot;A bird warbled&quot;, but nothing in &quot;A goat grunted&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/bo*/&lt;/code&gt; は、「A ghost booooed」の「boooo」と「A bird warbled」の「b」に一致しますが、「ヤギのうなり声」には一致しません。</target>
        </trans-unit>
        <trans-unit id="ee70c325b7fda48a36f20806ce19cd350a23827a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/e?le?/&lt;/code&gt; matches the &quot;el&quot; in &quot;angel&quot; and the &quot;le&quot; in &quot;angle.&quot;</source>
          <target state="translated">たとえば、 &lt;code&gt;/e?le?/&lt;/code&gt; は、「angel」の「el」および「angle」の「le」と一致します。</target>
        </trans-unit>
        <trans-unit id="0890428ef6f4a779e8ee5f7ad1dcddbac728b190" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/green|red/&lt;/code&gt; matches &quot;green&quot; in &quot;green apple&quot; and &quot;red&quot; in &quot;red apple&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/green|red/&lt;/code&gt; は、「緑のリンゴ」の「緑」および「赤いリンゴ」の「赤」に一致します。</target>
        </trans-unit>
        <trans-unit id="8133255e243f3bc7a528482f8249e11e97cbc601" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/t$/&lt;/code&gt; does not match the &quot;t&quot; in &quot;eater&quot;, but does match it in &quot;eat&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/t$/&lt;/code&gt; は「eater」の「t」とは一致しませんが、「eat」の「t」とは一致します。</target>
        </trans-unit>
        <trans-unit id="5cc5b6d1d137d8d2cc001b6a446910cfa7fb6b4f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a safe integer: it can be exactly represented in IEEE-754, but the integer &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; + 1&lt;/code&gt; can't be directly represented in IEEE-754 but instead rounds to &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; under round-to-nearest and round-to-zero rounding. The safe integers consist of all integers from &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; inclusive to &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; inclusive (&amp;plusmn; &lt;code&gt;9007199254740991&lt;/code&gt; or &amp;plusmn; 9,007,199,254,740,991).</source>
          <target state="translated">例えば、 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; 安全な整数である：それは正確に表現しない、任意のIEEE-754丸めモードの下でそれを他の整数ラウンドすることができます。対照的に、 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; は安全な整数ではあり&lt;em&gt;ません&lt;/em&gt;。IEEE-754で正確に表すことができますが、整数 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; + 1&lt;/code&gt; はIEEE-754で直接表すことはできず、代わりに最も近い丸 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; で2 &lt;sup&gt;53&lt;/sup&gt;に丸められますゼロに丸めます。安全な整数から全ての整数から成る &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; に包括的 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; （&amp;plusmn;包括 &lt;code&gt;9007199254740991&lt;/code&gt; または&amp;plusmn;9,007,199,254,740,991）。</target>
        </trans-unit>
        <trans-unit id="1468820736d3768571efe41dbb75777077dfdee4" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; yields 2:</source>
          <target state="translated">たとえば、 &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; は2になります。</target>
        </trans-unit>
        <trans-unit id="43017361c6ef1192dc85fc698a7f5457aa051e32" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;9 &amp;lt;&amp;lt; 2&lt;/code&gt; yields 36:</source>
          <target state="translated">たとえば、 &lt;code&gt;9 &amp;lt;&amp;lt; 2&lt;/code&gt; は36になります。</target>
        </trans-unit>
        <trans-unit id="d40cd50395c60e958fd69dd0d91559fbae320fed" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[^abc]&lt;/code&gt; is the same as &lt;code&gt;[^a-c]&lt;/code&gt;. They initially match &quot;o&quot; in &quot;bacon&quot; and &quot;h&quot; in &quot;chop&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;[^abc]&lt;/code&gt; は &lt;code&gt;[^a-c]&lt;/code&gt; と同じです。最初は「ベーコン」の「o」と「チョップ」の「h」に一致します。</target>
        </trans-unit>
        <trans-unit id="3e34984e389a74734f82bae79350f3d5f1e65463" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[abcd]&lt;/code&gt; is the same as &lt;code&gt;[a-d]&lt;/code&gt;. They match the &quot;b&quot; in &quot;brisket&quot; and the &quot;c&quot; in &quot;chop&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;[abcd]&lt;/code&gt; は &lt;code&gt;[a-d]&lt;/code&gt; と同じです。「ブリスケット」の「b」と「チョップ」の「c」に一致します。</target>
        </trans-unit>
        <trans-unit id="2d4c70a562d592dc4b4f50eca2763191f11d3182" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;slice(1,4)&lt;/code&gt; extracts the second element through the fourth element (elements indexed 1, 2, and 3).</source>
          <target state="translated">たとえば、 &lt;code&gt;slice(1,4)&lt;/code&gt; は、2番目の要素から4番目の要素（インデックスが1、2、3の要素）を抽出します。</target>
        </trans-unit>
        <trans-unit id="866a7c2ace957888375af096e8b401b5012bea84" translate="yes" xml:space="preserve">
          <source>For example, [\w-] is the same as [A-Za-z0-9_-]. They match the &quot;b&quot; in &quot;brisket&quot;, the &quot;c&quot; in &quot;chop&quot; and the &quot;n&quot; in &quot;non-profit&quot;.</source>
          <target state="translated">例えば、[\w-]は[A-Za-z0-9_-]と同じです。brisket」の「b」、「chop」の「c」、「non-profit」の「n」が一致します。</target>
        </trans-unit>
        <trans-unit id="1b85b07b0e9d23ce4d536e495de0c011cfeb1892" translate="yes" xml:space="preserve">
          <source>For example, [abcd-] and [-abcd] match the &quot;b&quot; in &quot;brisket&quot;, the &quot;c&quot; in &quot;chop&quot; and the &quot;-&quot; (hyphen) in &quot;non-profit&quot;.</source>
          <target state="translated">例えば、[abcd-]と[-abcd]は、「brisket」の「b」、「chop」の「c」、「non-profit」の「-」(ハイフン)に一致します。</target>
        </trans-unit>
        <trans-unit id="d534024361a43e9b767937a323c46e5884274247" translate="yes" xml:space="preserve">
          <source>For example, a bitwise AND of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0001&lt;/code&gt; which is 1 in decimal.</source>
          <target state="translated">例えば、ビット単位のANDの &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; における結果 &lt;code&gt;0001&lt;/code&gt; 小数で1です。</target>
        </trans-unit>
        <trans-unit id="35dfc44891ed2854f3701d280c936b920ff7097c" translate="yes" xml:space="preserve">
          <source>For example, a bitwise OR of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0101&lt;/code&gt; which is 5 in decimal.</source>
          <target state="translated">たとえば、ORのビット単位の &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; における結果 &lt;code&gt;0101&lt;/code&gt; 小数で5です。</target>
        </trans-unit>
        <trans-unit id="ff16bc0ecdfd4fb29f2ad2e161dd9ad9ab4eaa13" translate="yes" xml:space="preserve">
          <source>For example, a bitwise XOR of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0100&lt;/code&gt; which is 4 in decimal.</source>
          <target state="translated">たとえば、ビットごとのXORが &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; 、 &lt;code&gt;0100&lt;/code&gt; となり、10進数では4になります。</target>
        </trans-unit>
        <trans-unit id="18a0c77ee8e8d786fbaa02174f49d557f339c981" translate="yes" xml:space="preserve">
          <source>For example, an extension designed to scrape contents of web-pages could have the scraping rules defined in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPath&quot;&gt;XPath&lt;/a&gt; instead of JavaScript code.</source>
          <target state="translated">たとえば、Webページのコンテンツをスクレイピングするように設計された拡張機能では、JavaScriptコードではなく&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPath&quot;&gt;XPathで&lt;/a&gt;スクレイピングルールを定義できます。</target>
        </trans-unit>
        <trans-unit id="30d78476f415ba39dfea6fce2e88c0a1b1289345" translate="yes" xml:space="preserve">
          <source>For example, assume you have this script:</source>
          <target state="translated">例えば、次のようなスクリプトがあるとします。</target>
        </trans-unit>
        <trans-unit id="bb063a9af9663d39a47eb4d1e7486590fe3ad853" translate="yes" xml:space="preserve">
          <source>For example, check if &lt;code&gt;baz&lt;/code&gt; object descends from &lt;code&gt;Foo.prototype&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;baz&lt;/code&gt; オブジェクトが &lt;code&gt;Foo.prototype&lt;/code&gt; から派生しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="e88872bda7dcb80ad8bdf7d45a7fe8e4824839d7" translate="yes" xml:space="preserve">
          <source>For example, dividing zero by zero results in a &lt;code&gt;NaN&lt;/code&gt; &amp;mdash; but dividing other numbers by zero does not.</source>
          <target state="translated">たとえば、0を0で除算すると &lt;code&gt;NaN&lt;/code&gt; になりますが、他の数値を0で除算することはできません。</target>
        </trans-unit>
        <trans-unit id="34ab198aa4b01ccc2fc1e99847d64c05bdafb92c" translate="yes" xml:space="preserve">
          <source>For example, if a function is passed 3 arguments, you can access them as follows:</source>
          <target state="translated">例えば、関数に3つの引数が渡された場合、以下のようにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="937d79a6cfd454f4894cee8f40a83443bcd6a1f3" translate="yes" xml:space="preserve">
          <source>For example, if a user writes &quot;Jack &amp;amp; Jill&quot;, the text may get encoded as &quot;Jack &amp;amp;amp; Jill&quot;. Without &lt;code&gt;encodeURIComponent&lt;/code&gt; the ampersand could be interpretted on the server as the start of a new field and jeopardize the integrity of the data.</source>
          <target state="translated">たとえば、ユーザーが「Jack＆Jill」と書いた場合、テキストは「Jack＆amp; Jill」としてエンコードされます。 &lt;code&gt;encodeURIComponent&lt;/code&gt; がなければ、アンパサンドはサーバー上で新しいフィールドの始まりとして解釈され、データの整合性を危険にさらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="5799cfe8931ec98fb88c4a0444b5af94210cf13a" translate="yes" xml:space="preserve">
          <source>For example, if the buffer is 16 bytes long, the &lt;code&gt;byteOffset&lt;/code&gt; is 8, and the &lt;code&gt;byteLength&lt;/code&gt; is 10, this error is thrown because the resulting view tries to extend 2 bytes past the total length of the buffer.</source>
          <target state="translated">たとえば、バッファの長さが16バイト、 &lt;code&gt;byteOffset&lt;/code&gt; が8、 &lt;code&gt;byteLength&lt;/code&gt; が10の場合、結果のビューはバッファの全長を2バイト超えようとするため、このエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="b02fbdba4483319e083506a278688555164aea94" translate="yes" xml:space="preserve">
          <source>For example, in the &lt;em&gt;initialization&lt;/em&gt; block it is not required to initialize variables:</source>
          <target state="translated">たとえば、&lt;em&gt;初期化&lt;/em&gt;ブロックでは、変数を初期化する必要はありません。</target>
        </trans-unit>
        <trans-unit id="99ec1dd0889b0f7d806f56f4eb1bb18db712b1fb" translate="yes" xml:space="preserve">
          <source>For example, suppose a script does &lt;code&gt;obj.name = &quot;jen&quot;&lt;/code&gt;, and &lt;code&gt;obj&lt;/code&gt; is not a proxy, and has no own property &lt;code&gt;.name&lt;/code&gt;, but it has a proxy on its prototype chain. That proxy's &lt;code&gt;set&lt;/code&gt; handler will be called, and &lt;code&gt;obj&lt;/code&gt; will be passed as the receiver.</source>
          <target state="translated">たとえば、スクリプトが &lt;code&gt;obj.name = &quot;jen&quot;&lt;/code&gt; を実行し、 &lt;code&gt;obj&lt;/code&gt; はプロキシではなく、独自のプロパティ &lt;code&gt;.name&lt;/code&gt; を持たないが、プロトタイプチェーンにプロキシがあるとします。そのプロキシの &lt;code&gt;set&lt;/code&gt; ハンドラーが呼び出され、 &lt;code&gt;obj&lt;/code&gt; がレシーバーとして渡されます。</target>
        </trans-unit>
        <trans-unit id="2467e34ebb06a05a1bf1438ed09bb680f3c3c652" translate="yes" xml:space="preserve">
          <source>For example, the following two functions are equivalent.</source>
          <target state="translated">例えば、以下の2つの関数は等価です。</target>
        </trans-unit>
        <trans-unit id="8762ede52d7e131b7a89f66401e61b7b5608dc17" translate="yes" xml:space="preserve">
          <source>For example, this syntax worked:</source>
          <target state="translated">例えば、この構文は機能しました。</target>
        </trans-unit>
        <trans-unit id="86aa87dc02431531a1951cc0ccafa84c378749c8" translate="yes" xml:space="preserve">
          <source>For example, when chaining expressions, trailing commas are not allowed.</source>
          <target state="translated">例えば、式を連結する際には、末尾のカンマを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="202acdf71c225449c011c82d77563f9f789c506e" translate="yes" xml:space="preserve">
          <source>For example, when using methods such as &lt;a href=&quot;global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; that returns the default constructor, you want these methods to return a parent &lt;code&gt;Array&lt;/code&gt; object, instead of the &lt;code&gt;MyArray&lt;/code&gt; object. The &lt;a href=&quot;global_objects/symbol/species&quot;&gt;&lt;code&gt;Symbol.species&lt;/code&gt;&lt;/a&gt; symbol lets you do this:</source>
          <target state="translated">たとえば、デフォルトのコンストラクタを返す&lt;a href=&quot;global_objects/array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;などのメソッドを使用する場合、これらのメソッドが &lt;code&gt;MyArray&lt;/code&gt; オブジェクトではなく親の &lt;code&gt;Array&lt;/code&gt; オブジェクトを返すようにする必要があります。&lt;a href=&quot;global_objects/symbol/species&quot;&gt; &lt;code&gt;Symbol.species&lt;/code&gt; &lt;/a&gt;記号は、あなたがこれを行うことができます：</target>
        </trans-unit>
        <trans-unit id="528dfe874f4c6aa065144a48883f47780d348e68" translate="yes" xml:space="preserve">
          <source>For example, you can use it on a single line:</source>
          <target state="translated">例えば、1行で使うことができます。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="01a23d9503be041aca2248747ff63b7c2a66fcbb" translate="yes" xml:space="preserve">
          <source>For function calls:</source>
          <target state="translated">関数呼び出し用。</target>
        </trans-unit>
        <trans-unit id="f9351ecb7139ba4a292947d12e3373f477026a84" translate="yes" xml:space="preserve">
          <source>For instance, if another exception occurs inside a try's catch-block, any remaining code in the same outer try-block enclosing that try..catch (or in the main flow, if not in an outer try-block) , will not get executed, since control is immediately transferred to the outer try's catch-block (or the internal error-generator, if not in a try-block).</source>
          <target state="translated">例えば、tryのキャッチブロック内で別の例外が発生した場合、そのtry..catchを囲んでいる同じ外側のtryブロック(または外側のtryブロック内でない場合はメインフロー内)に残っているコードは実行されません。</target>
        </trans-unit>
        <trans-unit id="3d6c2ff5aafe8379fafb6af50138a5bbb4622c48" translate="yes" xml:space="preserve">
          <source>For instance, the following example adds a method to the &lt;code&gt;Math&lt;/code&gt; object for calculating the &lt;em&gt;greatest common divisor&lt;/em&gt; of a list of arguments.</source>
          <target state="translated">たとえば、次の例では、引数リストの&lt;em&gt;最大公約数&lt;/em&gt;を計算するためのメソッドを &lt;code&gt;Math&lt;/code&gt; オブジェクトに追加します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="21711d63e992ed5c39c7e55a8b4160a3ddd59a3e" translate="yes" xml:space="preserve">
          <source>For migrating away from String generics, see also &lt;a href=&quot;../errors/deprecated_string_generics&quot;&gt;Warning: String.x is deprecated; use String.prototype.x instead&lt;/a&gt;.</source>
          <target state="translated">Stringジェネリックからの移行については、&lt;a href=&quot;../errors/deprecated_string_generics&quot;&gt;警告：String.xは非推奨です。代わりにString.prototype.xを使用してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb079a75ce78aeb8e4751ad38cdd82e4e1931681" translate="yes" xml:space="preserve">
          <source>For more details and examples, see the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; reference page.</source>
          <target state="translated">詳細と例については、 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; リファレンスページを参照してください。</target>
        </trans-unit>
        <trans-unit id="e5c537fbbdfb46a6df802c4196646c039b2d58aa" translate="yes" xml:space="preserve">
          <source>For more details see the</source>
          <target state="translated">詳細については</target>
        </trans-unit>
        <trans-unit id="565399faf193cd242082c77a9136a91023cacc82" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;json/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;json/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="537acebfecc5ae5d569fe9aa4cc7353d681d905f" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;../global_objects/date/parse&quot;&gt;&lt;code&gt;Date.parse()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../global_objects/date/parse&quot;&gt; &lt;code&gt;Date.parse()&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6ec7bb7f7f306725bc0cc8d0a9596c029c14e67e" translate="yes" xml:space="preserve">
          <source>For more examples and explanations, see also the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;JavaScript guide about functions&lt;/a&gt;.</source>
          <target state="translated">その他の例と説明については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;関数に関するJavaScriptガイド&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="f8c75dccfa7bff0491d015e11249ba2e60cb980b" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">その他の例については、&lt;a href=&quot;../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt;メソッドも参照してください。</target>
        </trans-unit>
        <trans-unit id="bd469e9a34419903e864c6e6bb0279a91ed2b956" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; pages.</source>
          <target state="translated">その他の例については、&lt;a href=&quot;../intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;ページも参照してください。</target>
        </trans-unit>
        <trans-unit id="fa45aa826bc67e52c3699e8add9da78f080b141c" translate="yes" xml:space="preserve">
          <source>For more information about the constructor syntax and the parameters, see &lt;em&gt;&lt;a href=&quot;typedarray#Syntax&quot;&gt;TypedArray&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">コンストラクターの構文とパラメーターの詳細については、「&lt;em&gt;&lt;a href=&quot;typedarray#Syntax&quot;&gt;TypedArray&lt;/a&gt;&lt;/em&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="eb077bcb1697973ae809872951b88bd50d47f865" translate="yes" xml:space="preserve">
          <source>For more information and examples about methods, see &lt;a href=&quot;../functions/method_definitions&quot;&gt;method definitions&lt;/a&gt;.</source>
          <target state="translated">メソッドの詳細と例については、&lt;a href=&quot;../functions/method_definitions&quot;&gt;メソッド定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4147ffff788ad6e8dd732f25c8f44303ca5eff09" translate="yes" xml:space="preserve">
          <source>For more information on ES2015 generators, see &lt;a href=&quot;statements/function*&quot;&gt;the function* documentation&lt;/a&gt;.</source>
          <target state="translated">ES2015ジェネレーターの詳細について&lt;a href=&quot;statements/function*&quot;&gt;は、function *のドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c20f6816b01b03bef7066dc636a8fdc827e288d4" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@replace&quot;&gt;&lt;code&gt;RegExp.prototype[@@replace]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../regexp/@@replace&quot;&gt; &lt;code&gt;RegExp.prototype[@@replace]()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1d249c0c1e1c5c8d53c7694847144936b46861ae" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@search&quot;&gt;&lt;code&gt;RegExp.prototype[@@search]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../regexp/@@search&quot;&gt; &lt;code&gt;RegExp.prototype[@@search]()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="22a55ca163b96bcc1e7fca930dc6fbd5e236d8e6" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@split&quot;&gt;&lt;code&gt;RegExp.prototype[@@split]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../regexp/@@split&quot;&gt; &lt;code&gt;RegExp.prototype[@@split]()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0ff1246a9ef90a722598fb1022139c892f34d135" translate="yes" xml:space="preserve">
          <source>For non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. For example, &lt;code&gt;9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; yields 2, the same as &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt;:</source>
          <target state="translated">負でない数の場合、ゼロを埋める右シフトと符号伝播右シフトは同じ結果になります。たとえば、 &lt;code&gt;9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; は &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; と同じ2を返します。</target>
        </trans-unit>
        <trans-unit id="948269bcb1af5d5bc928b45a45c3946fc9810b7e" translate="yes" xml:space="preserve">
          <source>For object literals (new in ECMAScript 2018):</source>
          <target state="translated">オブジェクトリテラルの場合(ECMAScript 2018の新機能)。</target>
        </trans-unit>
        <trans-unit id="934a86b954c8fa55f872d6a94658543d7acf642d" translate="yes" xml:space="preserve">
          <source>For object references (and not the actual object), &lt;code&gt;slice&lt;/code&gt; copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.</source>
          <target state="translated">オブジェクト参照（実際のオブジェクトではない）の場合、 &lt;code&gt;slice&lt;/code&gt; はオブジェクト参照を新しい配列にコピーします。元の配列と新しい配列の両方が同じオブジェクトを参照しています。参照オブジェクトが変更された場合、変更は新しい配列と元の配列の両方に表示されます。</target>
        </trans-unit>
        <trans-unit id="5af6e6762708ddaa2c5f00a451db70105ec9d12f" translate="yes" xml:space="preserve">
          <source>For octal escape sequences, you can use hexadecimal escape sequences instead:</source>
          <target state="translated">8進数のエスケープシーケンスの場合は、代わりに16進数のエスケープシーケンスを使用することができます。</target>
        </trans-unit>
        <trans-unit id="f9f59cbb942a8e1a9e18f6e55a2b55245320287c" translate="yes" xml:space="preserve">
          <source>For of iteration and destructuring</source>
          <target state="translated">反復と破壊のために</target>
        </trans-unit>
        <trans-unit id="ec534dca289b00a3b54f4910479eff1332f34eb9" translate="yes" xml:space="preserve">
          <source>For several versions, Firefox's SpiderMonkey engine had &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=773687&quot;&gt;a bug&lt;/a&gt; with regard to the &lt;code&gt;^&lt;/code&gt; assertion and the sticky flag which allowed expressions starting with the &lt;code&gt;^&lt;/code&gt; assertion and using the sticky flag to match when they shouldn't. The bug was introduced some time after Firefox 3.6 (which had the sticky flag but not the bug) and fixed in 2015. Perhaps because of the bug, the ES2015 specification &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-assertion&quot;&gt;specifically calls out&lt;/a&gt; the fact that:</source>
          <target state="translated">いくつかのバージョンでは、FirefoxのSpiderMonkeyのエンジンが持っていた&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=773687&quot;&gt;バグを&lt;/a&gt;に関して &lt;code&gt;^&lt;/code&gt; 式が始まる許可アサーションとスティッキーフラグ &lt;code&gt;^&lt;/code&gt; アサーションとするとき、彼らはいけないと一致するようにスティッキーフラグを使用して。このバグは、Firefox 3.6（スティッキーフラグはあったが、バグはなかった）の少し後に導入され、2015年に修正されました。おそらく、バグが原因で、ES2015仕様は&lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-assertion&quot;&gt;特に次&lt;/a&gt;の事実を明らかにしています。</target>
        </trans-unit>
        <trans-unit id="4b46591f15bdd7e9992fad829386c92aad2d66b7" translate="yes" xml:space="preserve">
          <source>For sorting strings with non-ASCII characters, i.e. strings with accented characters (e, &amp;eacute;, &amp;egrave;, a, &amp;auml;, etc.), strings from languages other than English: use &lt;a href=&quot;../string/localecompare&quot;&gt;&lt;code&gt;String.localeCompare&lt;/code&gt;&lt;/a&gt;. This function can compare those characters so they appear in the right order.</source>
          <target state="translated">非ASCII文字を含む文字列、つまりアクセント付き文字（e、&amp;eacute;、&amp;egrave;、a、&amp;auml;など）を含む文字列を&lt;a href=&quot;../string/localecompare&quot;&gt; &lt;code&gt;String.localeCompare&lt;/code&gt; &lt;/a&gt;するには、英語以外の言語の文字列：String.localeCompareを使用します。この関数は、それらの文字を比較して、正しい順序で表示されるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="540a56d0783c49dbe2c11278be8b492feebaf797" translate="yes" xml:space="preserve">
          <source>For strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects), &lt;code&gt;slice&lt;/code&gt; copies the values into the new array. Changes to the string, number or boolean in one array do not affect the other array.</source>
          <target state="translated">文字列、数値、ブール（&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;オブジェクトではない）の場合、 &lt;code&gt;slice&lt;/code&gt; は値を新しい配列にコピーします。1つの配列の文字列、数値、またはブール値を変更しても、他の配列には影響しません。</target>
        </trans-unit>
        <trans-unit id="06785c7ab3ceabe53e023cc803f4cbcf0a2ea208" translate="yes" xml:space="preserve">
          <source>For that reason, it is recommended to always declare variables at the top of their scope (the top of global code and the top of function code) so it's clear which variables are function scoped (local) and which are resolved on the scope chain.</source>
          <target state="translated">そのため、変数は常にスコープの一番上(グローバルコードの一番上と関数コードの一番上)で宣言することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1a8ab842102daf5a75a62664fc4cef78325333c6" translate="yes" xml:space="preserve">
          <source>For the above polyfill code snippet, if you need support for IE &amp;lt; 9, then you will also need an Object.keys polyfill (such as the one found on the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; page).</source>
          <target state="translated">上記のポリフィルコードスニペットで、IE &amp;lt;9のサポートが必要な場合は、Object.keysポリフィル（&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt;ページにあるものなど）も必要です。</target>
        </trans-unit>
        <trans-unit id="e86c69e41d5578c8ab620467b118befa7b4c82a3" translate="yes" xml:space="preserve">
          <source>For these reasons, the code may break when it encounters &lt;code&gt;String&lt;/code&gt; objects when it expects a primitive string instead, although generally, authors need not worry about the distinction.</source>
          <target state="translated">これらの理由により、通常は作成者が区別を気にする必要はありませんが、代わりにプリミティブ文字列を期待しているときに &lt;code&gt;String&lt;/code&gt; オブジェクトに遭遇すると、コードが壊れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a80fbe0f90b18884c38de565a55619dfc8eef409" translate="yes" xml:space="preserve">
          <source>For this example we need to stay parent constructor to continue to work properly.</source>
          <target state="translated">この例では、正しく動作するためには親コンストラクタのままでいる必要があります。</target>
        </trans-unit>
        <trans-unit id="7e72d021a9c7dcee914ef4ae15b51fa929f6676a" translate="yes" xml:space="preserve">
          <source>For values greater than 1 or less than -1, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">1より大きい値または-1より小さい値の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="87dff4f71b0ce96c7e09b920f635128236b8af67" translate="yes" xml:space="preserve">
          <source>For values less than -1 or greater than 1, &lt;code&gt;Math.acos()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">-1未満または1より大きい値の場合、 &lt;code&gt;Math.acos()&lt;/code&gt; は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="07875d85c183bca60211acd95bc562b6d1f1151b" translate="yes" xml:space="preserve">
          <source>For values less than -1 or greater than 1, &lt;code&gt;Math.asin()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">-1未満または1より大きい値の場合、 &lt;code&gt;Math.asin()&lt;/code&gt; は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="dbccb44e1ad1d9938a16b005939cd9587366d68f" translate="yes" xml:space="preserve">
          <source>For values less than 1 &lt;code&gt;Math.acosh()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1 &lt;code&gt;Math.acosh()&lt;/code&gt; 値の場合、Math.acosh（）は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="9b6b3c574ade47a62c108d529c0e430d70e98212" translate="yes" xml:space="preserve">
          <source>For very small values of &lt;em&gt;x&lt;/em&gt;, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.</source>
          <target state="translated">&lt;em&gt;xの&lt;/em&gt;値が非常に小さい場合、1を追加すると、精度が低下または排除される可能性があります。JSで使用される倍精度浮動小数点は、約15桁の精度を提供します。1 + 1e-15 = 1.000000000000001、ただし1 + 1e-16 = 1.000000000000000、したがって15を超える桁は四捨五入されるため、その算術演算では正確に1.0。</target>
        </trans-unit>
        <trans-unit id="04e11fb6d3be3c51b3a94e7dbcd6c14d6c2cfa81" translate="yes" xml:space="preserve">
          <source>For-each-in loops are deprecated</source>
          <target state="translated">For-each-in ループは非推奨です。</target>
        </trans-unit>
        <trans-unit id="af0e67684b1c4abe6fb7b9901318f2329739aabd" translate="yes" xml:space="preserve">
          <source>Forbes Lindesay: Promises and Generators: control flow utopia -- JSConf EU 2013</source>
          <target state="translated">フォーブス・リンデッセイ 約束とジェネレーター:制御フローのユートピア --JSConf EU 2013</target>
        </trans-unit>
        <trans-unit id="7b32fb1f943493003851f2d112058fd52282df82" translate="yes" xml:space="preserve">
          <source>Forbes Lindesay: promisejs.org</source>
          <target state="translated">フォーブス リンデッセイ:promisejs.org</target>
        </trans-unit>
        <trans-unit id="a053925e9cf7d7a90e5b988e023b63f45b8b1600" translate="yes" xml:space="preserve">
          <source>Forgotten characters</source>
          <target state="translated">忘れられたキャラクター</target>
        </trans-unit>
        <trans-unit id="a6261dda713480f61e179215417e7e8c9ea57961" translate="yes" xml:space="preserve">
          <source>Forgotten closing curly bracket</source>
          <target state="translated">閉じ方を忘れた中括弧</target>
        </trans-unit>
        <trans-unit id="736612168ad4b2ebbdea7fc60c97a690632ed1ff" translate="yes" xml:space="preserve">
          <source>Forgotten comma</source>
          <target state="translated">カンマを忘れた</target>
        </trans-unit>
        <trans-unit id="55550d89e7ca43740394fa9c2e706f8405aa15d0" translate="yes" xml:space="preserve">
          <source>Form feed</source>
          <target state="translated">フォームフィード</target>
        </trans-unit>
        <trans-unit id="c9564ba8c76d4110b57b41baba092e3a50ad181e" translate="yes" xml:space="preserve">
          <source>Format of Date.prototype.toString is standardised.</source>
          <target state="translated">Date.prototype.toStringのフォーマットが標準化されました。</target>
        </trans-unit>
        <trans-unit id="98fa7137d9a2d748fcbbbfd8b1e23d8f46f9b4f2" translate="yes" xml:space="preserve">
          <source>Formatting dates: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateFormat/formatToParts&quot;&gt;&lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">日付のフォーマット：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateFormat/formatToParts&quot;&gt; &lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ac8fc42d2b96064f7447761abb1d6b2a1cc4fe6c" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;copywithin&quot;&gt;&lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;copywithin&quot;&gt; &lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="d61bb5d1708bc7b38517ac71a7df63c26e5057f7" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Float32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Float32Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="425c654a6ac340d691d752960a9e7f52569afd68" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Float64Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Float64Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="14546609f361e44ca966512a77290cf12a63fa3e" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int16Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int16Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="60db126691b5722582058185268706c6e85661e3" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int32Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="99164b3e66d1fe611117c5f5c408c48a0336e80b" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int8Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int8Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="0a7997ac147da1feac14077729de0f0f06e382f0" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="787212c5a9c84503f45356ae7e6124bb9b8bca71" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint16Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint16Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="229f398e7f83b0bbc501b9d259ec99c5eadbf00e" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint32Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="9dc5fa3b4b962f46918bf70fff9a0ed4d0005fe6" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint8Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint8Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="61573e9050bbc7f9716c65c5a5be5d32c4b6dd10" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint8ClampedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint8ClampedArray.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="48a73d90ee5399219a2b26ba8bbeaddc97c358c8" translate="yes" xml:space="preserve">
          <source>Fourth, strict mode prior to Gecko 34 requires that all properties named in an object literal be unique. The normal code may duplicate property names, with the last one determining the property's value. But since only the last one does anything, the duplication is simply a vector for bugs, if the code is modified to change the property value other than by changing the last instance. Duplicate property names are a syntax error in strict mode:</source>
          <target state="translated">第四に、Gecko 34 より前の strict mode では、オブジェクトリテラルの中で命名されたすべてのプロパティが一意であることが要求されます。通常のコードはプロパティ名を複製し、最後のものがプロパティの値を決定します。しかし、最後のものだけが何かをするので、コードが変更されて最後のインスタンスを変更する以外にプロパティの値が変更された場合、重複は単なるバグのためのベクトルになってしまいます。プロパティ名の重複は、厳密なモードでは構文エラーになります。</target>
        </trans-unit>
        <trans-unit id="c12396c0b31eb0d4a22472ff15863783b40b01cf" translate="yes" xml:space="preserve">
          <source>Freezes an object: other code can't delete or change any properties.</source>
          <target state="translated">オブジェクトをフリーズさせる:他のコードではプロパティを削除したり変更したりできません。</target>
        </trans-unit>
        <trans-unit id="dda8928286e33df7e9ce870b122f4032e106574b" translate="yes" xml:space="preserve">
          <source>Freezing arrays</source>
          <target state="translated">配列の凍結</target>
        </trans-unit>
        <trans-unit id="fff69c46ec0f3f13c6b9d6db7e3128d82b5edef7" translate="yes" xml:space="preserve">
          <source>Freezing objects</source>
          <target state="translated">オブジェクトの凍結</target>
        </trans-unit>
        <trans-unit id="f845f4e8f7b96ac0598f032fd671c668cddf0fe3" translate="yes" xml:space="preserve">
          <source>From Chrome 42 to 48 strict mode is required. Non-strict mode support can be enabled using the flag &quot;Enable Experimental JavaScript&quot;.</source>
          <target state="translated">Chrome 42から48までは厳密なモードが必要です。厳密モード以外のサポートは、&quot;Enable Experimental JavaScript &quot;フラグを使用して有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="c25679ace478e563cd698a280a119eebace2f598" translate="yes" xml:space="preserve">
          <source>From Firefox 13 to Firefox 18, the &lt;code&gt;size&lt;/code&gt; property was implemented as a &lt;code&gt;Map.prototype.size()&lt;/code&gt; method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification.</source>
          <target state="translated">Firefox 13からFirefox 18まで、 &lt;code&gt;size&lt;/code&gt; プロパティは &lt;code&gt;Map.prototype.size()&lt;/code&gt; メソッドとして実装されていましたが、ECMAScript 2015仕様に準拠する新しいバージョンのプロパティに変更されました。</target>
        </trans-unit>
        <trans-unit id="0e0b399dc9eebfc7d1990373abc52e0d61c10f38" translate="yes" xml:space="preserve">
          <source>From Firefox 13 to Firefox 18, the &lt;code&gt;size&lt;/code&gt; property was implemented as a &lt;code&gt;Set.prototype.size()&lt;/code&gt; method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification.</source>
          <target state="translated">Firefox 13からFirefox 18まで、 &lt;code&gt;size&lt;/code&gt; プロパティは &lt;code&gt;Set.prototype.size()&lt;/code&gt; メソッドとして実装されていましたが、ECMAScript 2015仕様に準拠する新しいバージョンのプロパティに変更されました。</target>
        </trans-unit>
        <trans-unit id="ee3161c209cb087ce7f1ec61b18e678d56621e54" translate="yes" xml:space="preserve">
          <source>From a Base64 string</source>
          <target state="translated">Base64文字列から</target>
        </trans-unit>
        <trans-unit id="e9fcc3ba0dacb2c33f5572d6513c46ec1f51af44" translate="yes" xml:space="preserve">
          <source>From a local file</source>
          <target state="translated">ローカルファイルから</target>
        </trans-unit>
        <trans-unit id="95b25b855817858fdde0a383b9816b0ebbbd9c77" translate="yes" xml:space="preserve">
          <source>From another static method</source>
          <target state="translated">別の静的メソッドから</target>
        </trans-unit>
        <trans-unit id="cdc7d2920f0a75374a2c82187a3825b5b375d499" translate="yes" xml:space="preserve">
          <source>From arguments to an array</source>
          <target state="translated">引数から配列へ</target>
        </trans-unit>
        <trans-unit id="edb7e13687c4fd064af515ae57c789b549d14b28" translate="yes" xml:space="preserve">
          <source>From class constructor and other methods</source>
          <target state="translated">クラスのコンストラクタなどのメソッドから</target>
        </trans-unit>
        <trans-unit id="c72c051b28b8c78171bcbcf2fd4fcfe0b74f3d7a" translate="yes" xml:space="preserve">
          <source>Fulfillment:</source>
          <target state="translated">Fulfillment:</target>
        </trans-unit>
        <trans-unit id="9b556da9671d8001f81148151b0a6bfa6ee1ec5c" translate="yes" xml:space="preserve">
          <source>Full JSON syntax</source>
          <target state="translated">完全なJSON構文</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="94666812ce5866cd1a15db937596988239737375" translate="yes" xml:space="preserve">
          <source>Function Call</source>
          <target state="translated">関数呼び出し</target>
        </trans-unit>
        <trans-unit id="c17d72a13ca98610038debcb2b1acf449da4ad6e" translate="yes" xml:space="preserve">
          <source>Function Properties of the &lt;code&gt;Module&lt;/code&gt; Constructor</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; コンストラクターの関数プロパティ</target>
        </trans-unit>
        <trans-unit id="5bfbcebae9458d0af9e37589048c8edd93acdcad" translate="yes" xml:space="preserve">
          <source>Function body</source>
          <target state="translated">機能体</target>
        </trans-unit>
        <trans-unit id="b6f490406ad4b3c4986a489d476e2a16ce80e13b" translate="yes" xml:space="preserve">
          <source>Function called on the wrong object</source>
          <target state="translated">間違ったオブジェクトで呼び出された関数</target>
        </trans-unit>
        <trans-unit id="b00de2862aa946dfc63f1e8f57701a7ce09a0278" translate="yes" xml:space="preserve">
          <source>Function composition enabling piping</source>
          <target state="translated">配管を可能にする機能構成</target>
        </trans-unit>
        <trans-unit id="d1af7f91669f189668c5eb3a09479b4ab49a0508" translate="yes" xml:space="preserve">
          <source>Function constructor name</source>
          <target state="translated">関数コンストラクタ名</target>
        </trans-unit>
        <trans-unit id="ec3a38ff47b4e9447d9b4167f95723643ee1edca" translate="yes" xml:space="preserve">
          <source>Function context</source>
          <target state="translated">関数コンテキスト</target>
        </trans-unit>
        <trans-unit id="371cd61240f0b649474e4841824d099d52b4a785" translate="yes" xml:space="preserve">
          <source>Function declaration hoisting</source>
          <target state="translated">関数宣言巻上げ</target>
        </trans-unit>
        <trans-unit id="964604cea11cd6874a8ee2a3a7585807e1d95455" translate="yes" xml:space="preserve">
          <source>Function declarations in JavaScript are hoisted to the top of the enclosing function or global scope. You can use the function before you declared it:</source>
          <target state="translated">JavaScriptでの関数宣言は、それを囲む関数やグローバルスコープの最上位に持ち上げられます。宣言する前の関数を使うことができます。</target>
        </trans-unit>
        <trans-unit id="0882844bfef9215bf1252619621dc4233118aee9" translate="yes" xml:space="preserve">
          <source>Function expression</source>
          <target state="translated">関数式</target>
        </trans-unit>
        <trans-unit id="17fb59f0733689ed2045be8aa3262ce6ec9a7435" translate="yes" xml:space="preserve">
          <source>Function expression hoisting</source>
          <target state="translated">関数式吊り上げ</target>
        </trans-unit>
        <trans-unit id="daae0e7952ba89448f51a03b65028ea3105791cd" translate="yes" xml:space="preserve">
          <source>Function expressions in JavaScript are not hoisted, unlike &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;&lt;code&gt;function declarations&lt;/code&gt;&lt;/a&gt;. You can't use function expressions before you define them:</source>
          <target state="translated">JavaScriptの関数式は、&lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt; &lt;code&gt;function declarations&lt;/code&gt; &lt;/a&gt;とは異なり、巻き上げられません。定義する前に関数式を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="dc209ae9e238f3c0aff47d37bc404c3e7a2be0ad" translate="yes" xml:space="preserve">
          <source>Function is a predicate, to test each element of the array. Return &lt;code&gt;true&lt;/code&gt; to keep the element, &lt;code&gt;false&lt;/code&gt; otherwise. It accepts three arguments:</source>
          <target state="translated">関数は述語であり、配列の各要素をテストします。要素を保持する &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。次の3つの引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="5a44c442ae585c40fccbf2f6faa786a10212d74f" translate="yes" xml:space="preserve">
          <source>Function names for getters and setters</source>
          <target state="translated">ゲッターとセッターの関数名</target>
        </trans-unit>
        <trans-unit id="708c1dbb97c63bf19d7f91be53f2b8467bf5e2e1" translate="yes" xml:space="preserve">
          <source>Function names in classes</source>
          <target state="translated">クラス内の関数名</target>
        </trans-unit>
        <trans-unit id="fd9bc7843bf061faafecc018aa83931d7818ecba" translate="yes" xml:space="preserve">
          <source>Function object (implements [[Call]] in ECMA-262 terms)</source>
          <target state="translated">関数オブジェクト(ECMA-262用語の[[Call]]を実装しています。</target>
        </trans-unit>
        <trans-unit id="1e0d99529d66efa9e16b2a37d29fa7405450d6fd" translate="yes" xml:space="preserve">
          <source>Function parameters</source>
          <target state="translated">機能パラメータ</target>
        </trans-unit>
        <trans-unit id="672b8daa03c25145e5097f1862c9ef31387136fa" translate="yes" xml:space="preserve">
          <source>Function parameters must be identifiers when setting up a function. All these function declarations fail, as they are providing values for their parameters:</source>
          <target state="translated">関数を設定する際には、関数のパラメータは識別子でなければなりません。これらの関数宣言は、パラメータに値を提供しているため、すべて失敗します。</target>
        </trans-unit>
        <trans-unit id="5600fe54b54a8b636f91ef1623504e92aeaf1ae6" translate="yes" xml:space="preserve">
          <source>Function properties</source>
          <target state="translated">関数プロパティ</target>
        </trans-unit>
        <trans-unit id="6b465d97d33508de4883b2ea2aacf42b30c0c590" translate="yes" xml:space="preserve">
          <source>Function properties of the Global constructor</source>
          <target state="translated">グローバルコンストラクタの関数プロパティ</target>
        </trans-unit>
        <trans-unit id="96d13c4b058b0e3603f90420cc0657996a50eabb" translate="yes" xml:space="preserve">
          <source>Function scope in the JavaScript Guide</source>
          <target state="translated">JavaScriptガイドの関数スコープ</target>
        </trans-unit>
        <trans-unit id="ab4bd9f09183936227e630a7c7b39b941aaf5590" translate="yes" xml:space="preserve">
          <source>Function shares a name with a pre-existing property</source>
          <target state="translated">関数は既存のプロパティと名前を共有します。</target>
        </trans-unit>
        <trans-unit id="bd3b89a4a10cf13f1260aab66f1be84bb80af97e" translate="yes" xml:space="preserve">
          <source>Function statement</source>
          <target state="translated">関数文</target>
        </trans-unit>
        <trans-unit id="eafea940d1e511a0a2f1cebf6796b3477ec72210" translate="yes" xml:space="preserve">
          <source>Function statement name</source>
          <target state="translated">関数文名</target>
        </trans-unit>
        <trans-unit id="3d8ee8398d60cc1a5f5c35466d2a76d13621895a" translate="yes" xml:space="preserve">
          <source>Function that produces an element of the new Array, taking three arguments:</source>
          <target state="translated">3 つの引数を取り、新しい配列の要素を生成する関数。</target>
        </trans-unit>
        <trans-unit id="e6f81952ca9f35c640c03b5be0a1ea2ca810fee4" translate="yes" xml:space="preserve">
          <source>Function that produces an element of the new typed array, taking three arguments:</source>
          <target state="translated">3つの引数を取り、新しい型付き配列の要素を生成する関数。</target>
        </trans-unit>
        <trans-unit id="e0aaa783b56f46ef91a7fcf55d33b81a0f903750" translate="yes" xml:space="preserve">
          <source>Function to execute for each element, taking three arguments:</source>
          <target state="translated">3つの引数を取り、各要素に対して実行する関数。</target>
        </trans-unit>
        <trans-unit id="0a9a09fba73beb71e3ec6b2f4fced16c535d8900" translate="yes" xml:space="preserve">
          <source>Function to execute for each element.</source>
          <target state="translated">各要素に対して実行する関数。</target>
        </trans-unit>
        <trans-unit id="8245e0a7fd1fb6820a2bdc6134a7f51effa836cd" translate="yes" xml:space="preserve">
          <source>Function to execute for each element. See &lt;a href=&quot;#Description&quot;&gt;Description&lt;/a&gt; for details.</source>
          <target state="translated">各要素に対して実行する関数。詳細については、&lt;a href=&quot;#Description&quot;&gt;説明&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e59e92aca05dfc3936638050c64046f21a70c72f" translate="yes" xml:space="preserve">
          <source>Function to execute on each element in the array, taking four arguments:</source>
          <target state="translated">4つの引数を取り、配列の各要素に対して実行する関数です。</target>
        </trans-unit>
        <trans-unit id="d9c16d36fcae4e723d177e4453f6bedf0139948a" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking four arguments:</source>
          <target state="translated">4つの引数を取り、配列の各値に対して実行する関数です。</target>
        </trans-unit>
        <trans-unit id="e6195e252567d35a10d21eb1e04df6a69d8cfbdf" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking three arguments:</source>
          <target state="translated">3つの引数を取り、配列の各値に対して実行する関数です。</target>
        </trans-unit>
        <trans-unit id="06ab7f94fc517f961f4f408b0c5f87cd008986bf" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the typed array, taking four arguments:</source>
          <target state="translated">4つの引数を取り、型付き配列の各値に対して実行する関数。</target>
        </trans-unit>
        <trans-unit id="5f6b934406be9d6249cdc1b3a19e92f08c41af81" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the typed array, taking three arguments:</source>
          <target state="translated">3つの引数を取り、型付き配列の各値に対して実行する関数。</target>
        </trans-unit>
        <trans-unit id="d0399838948b85571daab359e55567d43009c4e7" translate="yes" xml:space="preserve">
          <source>Function to test against</source>
          <target state="translated">に対してテストする機能</target>
        </trans-unit>
        <trans-unit id="3675e65254805019fa03ca3bbd0a78cd966d0b59" translate="yes" xml:space="preserve">
          <source>Function to test each element of the typed array. Invoked with arguments &lt;code&gt;(element, index, typedarray)&lt;/code&gt;. Return &lt;code&gt;true&lt;/code&gt; to keep the element, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">型付き配列の各要素をテストする関数。引数 &lt;code&gt;(element, index, typedarray)&lt;/code&gt; 呼び出されます。要素を保持する &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5e7473d030993e2d6eb3f57687483d5d690862bd" translate="yes" xml:space="preserve">
          <source>Function to test for each element, taking three arguments:</source>
          <target state="translated">3つの引数を取り、各要素をテストするための関数。</target>
        </trans-unit>
        <trans-unit id="ec0042429e084ef113ff136b415ef99aef55e4ca" translate="yes" xml:space="preserve">
          <source>Function.length</source>
          <target state="translated">Function.length</target>
        </trans-unit>
        <trans-unit id="61048c595732199c0b042fcddcb8a4147d570f28" translate="yes" xml:space="preserve">
          <source>Function.prototype</source>
          <target state="translated">Function.prototype</target>
        </trans-unit>
        <trans-unit id="e8db8cd46941a2c6cb8556f8f50bea337d34209b" translate="yes" xml:space="preserve">
          <source>Function.prototype.toString result</source>
          <target state="translated">Function.prototype.toString 結果</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="c3b29c6be0b6a24a1feb33b3fab2c4f7ffa22f5d" translate="yes" xml:space="preserve">
          <source>Functions and classes</source>
          <target state="translated">関数とクラス</target>
        </trans-unit>
        <trans-unit id="a993a7d52a753df1bbff39ffb1b6921b25fde081" translate="yes" xml:space="preserve">
          <source>Functions and function scope</source>
          <target state="translated">機能と機能の範囲</target>
        </trans-unit>
        <trans-unit id="6673418c5f8022362be941a6c397594c4ab43b3a" translate="yes" xml:space="preserve">
          <source>Functions can be conditionally declared, that is, a function statement can be nested within an &lt;code&gt;if&lt;/code&gt; statement, however the results are inconsistent across implementations and therefore this pattern should not be used in production code. For conditional function creation, use function expressions instead.</source>
          <target state="translated">関数は条件付きで宣言できます。つまり、関数ステートメントは &lt;code&gt;if&lt;/code&gt; ステートメント内にネストできますが、実装間で結果に一貫性がないため、このパターンを本番コードで使用しないでください。条件付き関数の作成には、代わりに関数式を使用してください。</target>
        </trans-unit>
        <trans-unit id="7a375adfd2b106044376f7940f10595ea47f0544" translate="yes" xml:space="preserve">
          <source>Functions created with the &lt;code&gt;Function&lt;/code&gt; constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;Function&lt;/code&gt; constructor was created. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a function expression.</source>
          <target state="translated">Function コンストラクターで作成された &lt;code&gt;Function&lt;/code&gt; は、作成コンテキストにクロージャーを作成しません。それらは常にグローバルスコープで作成されます。それらを実行すると、 &lt;code&gt;Function&lt;/code&gt; コンストラクターが作成されたスコープからのものではなく、独自のローカル変数とグローバル変数にのみアクセスできます。これは、関数式のコードで&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を使用する場合とは異なります。</target>
        </trans-unit>
        <trans-unit id="59d73efc9d6d784f8d7600d608f8c956ab9681d7" translate="yes" xml:space="preserve">
          <source>Functions created with the syntax &lt;code&gt;new Function(...)&lt;/code&gt; or just &lt;code&gt;Function(...) create&lt;/code&gt;&lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; objects and their name is &quot;anonymous&quot;.</source>
          <target state="translated">構文 &lt;code&gt;new Function(...)&lt;/code&gt; または単に &lt;code&gt;Function(...) create&lt;/code&gt; &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;オブジェクトを作成し、その名前は「匿名」です。</target>
        </trans-unit>
        <trans-unit id="767b81b474f513e1ae3378489bb47b34cbac169b" translate="yes" xml:space="preserve">
          <source>Functions defined by function expressions and function declarations are parsed only once, while those defined by the &lt;code&gt;Function&lt;/code&gt; constructor are not. That is, the function body string passed to the &lt;code&gt;Function&lt;/code&gt; constructor must be parsed each and every time the constructor is called. Although a function expression creates a closure every time, the function body is not reparsed, so function expressions are still faster than &quot;&lt;code&gt;new Function(...)&lt;/code&gt;&quot;. Therefore the &lt;code&gt;Function&lt;/code&gt; constructor should generally be avoided whenever possible.</source>
          <target state="translated">関数式と関数宣言で定義された関数は一度だけ解析されますが、 &lt;code&gt;Function&lt;/code&gt; コンストラクターで定義された関数はそうではありません。つまり、 &lt;code&gt;Function&lt;/code&gt; コンストラクターに渡された関数本体文字列は、コンストラクターが呼び出されるたびに解析される必要があります。関数式は常にクロージャを作成しますが、関数本体は再解析されないため、関数式は「 &lt;code&gt;new Function(...)&lt;/code&gt; 」よりも高速です。したがって、可能な場合は常に &lt;code&gt;Function&lt;/code&gt; コンストラクターを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="fea71cda87d91c331ea7710f6b634b839573601d" translate="yes" xml:space="preserve">
          <source>Functions defined inside function body</source>
          <target state="translated">関数本体内で定義された関数</target>
        </trans-unit>
        <trans-unit id="edd7fcd1cb74de67d317175dfdbe9485ebef1286" translate="yes" xml:space="preserve">
          <source>Functions in the JavaScript Guide</source>
          <target state="translated">JavaScriptガイドの関数</target>
        </trans-unit>
        <trans-unit id="808e29a2e402297441116279af3d78e2c5812556" translate="yes" xml:space="preserve">
          <source>Functions which are part of an object (apart from the global scope) can be deleted with &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの一部である関数（グローバルスコープを除く）は、 &lt;code&gt;delete&lt;/code&gt; を使用して削除できます。</target>
        </trans-unit>
        <trans-unit id="519b03d9cd4fe17b24fdac2c2c1f48f9d5d19463" translate="yes" xml:space="preserve">
          <source>Fundamental objects</source>
          <target state="translated">基本オブジェクト</target>
        </trans-unit>
        <trans-unit id="e0f4637b5c4a3036a3d75ea225910b8db3ffab0a" translate="yes" xml:space="preserve">
          <source>Further, this teqnique could be extended to creating jumpless &quot;Count Trailing Zeros&quot; and &quot;Count Trailing Ones&quot; functions as seen below. The &lt;code&gt;ctrz&lt;/code&gt; function below fills in all the high bits with the lowest filled bit, then negates the bits to earase all higher set bits so that clz can then be used.</source>
          <target state="translated">さらに、このテクニックを拡張して、以下に示すようにジャンプのない「Count Trailing Zeros」関数と「Count Trailing Ones」関数を作成できます。以下の &lt;code&gt;ctrz&lt;/code&gt; 関数は、すべての上位ビットを最低の埋め込みビットで埋め、次にビットを否定して上位セットビットをすべて消去し、clzを使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="e95bc397d4ac052736cf87b758eeb2c07cff1cb8" translate="yes" xml:space="preserve">
          <source>Future ECMAScript versions will likely introduce new syntax, and strict mode in ECMAScript 5 applies some restrictions to ease the transition. It will be easier to make some changes if the foundations of those changes are prohibited in strict mode.</source>
          <target state="translated">将来の ECMAScript のバージョンでは、新しい構文が導入される可能性が高く、ECMAScript 5 の strict mode では、その移行を容易にするためにいくつかの制限が適用されます。厳密モードでは、変更の基礎となる部分が禁止されている場合は、いくつかの変更を行うことが容易になります。</target>
        </trans-unit>
        <trans-unit id="c206106a39358ac1d296043204ca34946d2e58c3" translate="yes" xml:space="preserve">
          <source>Future reserved keywords</source>
          <target state="translated">今後の予約キーワード</target>
        </trans-unit>
        <trans-unit id="b493f1c7f16fd418270a7c7b36ea4521bd5a8305" translate="yes" xml:space="preserve">
          <source>Future reserved keywords in older standards</source>
          <target state="translated">古い規格の将来の予約キーワード</target>
        </trans-unit>
        <trans-unit id="eeec35195b8fa6e3f75a2d7f1965493078ca0bf3" translate="yes" xml:space="preserve">
          <source>GMT and UTC are considered equivalent. The local time zone is used to interpret arguments in &lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 Section 3.3&lt;/a&gt; format that do not contain time zone information.</source>
          <target state="translated">GMTとUTCは同等と見なされます。ローカルタイムゾーンは、タイムゾーン情報を含まない&lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822セクション3.3&lt;/a&gt;形式の引数を解釈するために使用されます。</target>
        </trans-unit>
        <trans-unit id="48b5cf380b98788e6ec261d8df907dfa694f80ed" translate="yes" xml:space="preserve">
          <source>Gecko-specific notes</source>
          <target state="translated">ヤモリ特有の注意事項</target>
        </trans-unit>
        <trans-unit id="bf536d82538e3716aa45f22ff44fd02408c927f0" translate="yes" xml:space="preserve">
          <source>Generally speaking, a function is a &quot;subprogram&quot; that can be &lt;em&gt;called&lt;/em&gt; by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the &lt;em&gt;function body&lt;/em&gt;. Values can be &lt;em&gt;passed&lt;/em&gt; to a function, and the function will &lt;em&gt;return&lt;/em&gt; a value.</source>
          <target state="translated">一般的に言えば、関数は関数の外部（再帰の場合は内部）のコードから&lt;em&gt;呼び出す&lt;/em&gt;ことができる「サブプログラム」です。プログラム自体と同様に、関数は&lt;em&gt;関数本体&lt;/em&gt;と呼ばれる一連のステートメントで構成されます。値を関数に&lt;em&gt;渡す&lt;/em&gt;ことができ、関数は値を&lt;em&gt;返し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1d20de03126b297e05c13a7d280f33e24c72c537" translate="yes" xml:space="preserve">
          <source>Generator</source>
          <target state="translated">Generator</target>
        </trans-unit>
        <trans-unit id="d3f2061539e543a51091b4d970d40aa70534574d" translate="yes" xml:space="preserve">
          <source>Generator Functions enable writing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol&quot;&gt;iterators&lt;/a&gt; more easily.</source>
          <target state="translated">ジェネレータ関数を使用すると、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol&quot;&gt;イテレータを&lt;/a&gt;より簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="3e6c1576c99e691366d463b6cc7261f52436128a" translate="yes" xml:space="preserve">
          <source>Generator comprehensions</source>
          <target state="translated">ジェネレータの理解</target>
        </trans-unit>
        <trans-unit id="ea618cb70bb6a900ab6754a69ae6cc8b7800d1ae" translate="yes" xml:space="preserve">
          <source>Generator comprehensions.</source>
          <target state="translated">ジェネレーターの理解。</target>
        </trans-unit>
        <trans-unit id="760f7f62ed1bb4c4df9cae1aeb12d6e6a7d3cff3" translate="yes" xml:space="preserve">
          <source>Generator defined in an expression</source>
          <target state="translated">式で定義されたジェネレータ</target>
        </trans-unit>
        <trans-unit id="e794b11cba8f11ca654cb29060aa1e3ce3e6b0fd" translate="yes" xml:space="preserve">
          <source>Generator methods</source>
          <target state="translated">ジェネレータの方法</target>
        </trans-unit>
        <trans-unit id="c1435d362ab37b4b01f1069647bcc8d8375e7adc" translate="yes" xml:space="preserve">
          <source>Generator methods are not constructable (ES2016)</source>
          <target state="translated">ジェネレータメソッドが構築できない(ES2016)</target>
        </trans-unit>
        <trans-unit id="6048aba4df24c5f501add490c86e5a00ceca6ecf" translate="yes" xml:space="preserve">
          <source>GeneratorFunction</source>
          <target state="translated">GeneratorFunction</target>
        </trans-unit>
        <trans-unit id="2a0186662d51266237099d799c6ba09ec8791ee4" translate="yes" xml:space="preserve">
          <source>GeneratorFunction.prototype</source>
          <target state="translated">GeneratorFunction.prototype</target>
        </trans-unit>
        <trans-unit id="19b9eb24b04f641254c53a3e7f692e1ee1738460" translate="yes" xml:space="preserve">
          <source>Generators and iterators in Firefox versions before 26</source>
          <target state="translated">26以前のバージョンのFirefoxでのジェネレータとイテレータ</target>
        </trans-unit>
        <trans-unit id="efc1c21247260851933d4a582e95a94e6b02af01" translate="yes" xml:space="preserve">
          <source>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</source>
          <target state="translated">ジェネレータは、終了してから再入力することができる関数です。コンテキスト(変数バインディング)は、再入力時にも保存されます。</target>
        </trans-unit>
        <trans-unit id="869d87770dc1b9354d4e10914b5250ec24707455" translate="yes" xml:space="preserve">
          <source>Generators are not constructable</source>
          <target state="translated">ジェネレータは構築不可能</target>
        </trans-unit>
        <trans-unit id="4f0cd84055f0e4e5bb70077c4ce1a3815d964046" translate="yes" xml:space="preserve">
          <source>Generators in JavaScript -- especially when combined with Promises -- are a very powerful tool for asynchronous programming as they mitigate -- if not entirely eliminate -- the problems with callbacks, such as &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; and &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt;.</source>
          <target state="translated">JavaScriptのジェネレーター（特にPromiseと組み合わせた場合）は、&lt;a href=&quot;http://callbackhell.com/&quot;&gt;コールバック地獄&lt;/a&gt;や&lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;制御の反転&lt;/a&gt;などのコールバックの問題を完全に排除するわけではないにせよ、軽減する非同期プログラミングにとって非常に強力なツールです。</target>
        </trans-unit>
        <trans-unit id="50585588be2138822abbe8f8b1df2809a6a3a359" translate="yes" xml:space="preserve">
          <source>Generators should not be re-used, even if the &lt;code&gt;for...of&lt;/code&gt; loop is terminated early, for example via the &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; keyword. Upon exiting a loop, the generator is closed and trying to iterate over it again does not yield any further results.</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; ループが&lt;a href=&quot;break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt;キーワードなどによって早期に終了した場合でも、ジェネレーターを再利用しないでください。ループを終了すると、ジェネレーターは閉じられ、ループを繰り返し処理しようとしても、それ以上の結果は得られません。</target>
        </trans-unit>
        <trans-unit id="19ff32cabc04ec23eb1a5aec10de0239f6e32924" translate="yes" xml:space="preserve">
          <source>Generic function</source>
          <target state="translated">汎用関数</target>
        </trans-unit>
        <trans-unit id="857bc90faf0413b73759698277c41331ae085628" translate="yes" xml:space="preserve">
          <source>Generic methods (non-standard)</source>
          <target state="translated">汎用メソッド(非標準</target>
        </trans-unit>
        <trans-unit id="469e0788e79d852a9a805ea846c580f27362cc2a" translate="yes" xml:space="preserve">
          <source>Gentle explanation of 'this' keyword in JavaScript</source>
          <target state="translated">JavaScriptでの'this'キーワードの優しい説明</target>
        </trans-unit>
        <trans-unit id="f83d0b54329e66f173582e1190480dc976e5939b" translate="yes" xml:space="preserve">
          <source>Get Non-Enumerable Only</source>
          <target state="translated">非数値のみを取得</target>
        </trans-unit>
        <trans-unit id="ac8081883e1d5686a080039aa13ba3a61df7e4fb" translate="yes" xml:space="preserve">
          <source>Get the number of seconds since Unix Epoch</source>
          <target state="translated">Unix エポックからの秒数を取得します。</target>
        </trans-unit>
        <trans-unit id="24c89d564893863a779b5a6e9bbe9934dfe48687" translate="yes" xml:space="preserve">
          <source>Gets a signed 16-bit integer (short) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの先頭から指定されたバイトオフセットの符号付き16ビット整数(ショート)を取得します。</target>
        </trans-unit>
        <trans-unit id="7c5b0df8b04a0c459aba5cd19fee72b7324990e0" translate="yes" xml:space="preserve">
          <source>Gets a signed 32-bit float (float) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定したバイトオフセットの符号付き32ビットのフロート(float)を取得します。</target>
        </trans-unit>
        <trans-unit id="d609650bbdb5e336c7b9bb56379a37b51538aeea" translate="yes" xml:space="preserve">
          <source>Gets a signed 32-bit integer (long) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの先頭から指定したバイトオフセットの符号付き32ビット整数(long)を取得します。</target>
        </trans-unit>
        <trans-unit id="0e5cc6ced115c2b184167e3f8f66963001ef368a" translate="yes" xml:space="preserve">
          <source>Gets a signed 64-bit float (double) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセットの符号付き64ビットのfloat(double)を取得します。</target>
        </trans-unit>
        <trans-unit id="81db90d6ffde9b6412bbe66c68c47ef4e7743159" translate="yes" xml:space="preserve">
          <source>Gets a signed 8-bit integer (byte) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセットの符号付き 8 ビット整数(バイト)を取得します。</target>
        </trans-unit>
        <trans-unit id="8fc72f256d25a90c98cdb40cba94a8871282ad94" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセットに、符号なし 16 ビット整数(符号なしショート)を取得します。</target>
        </trans-unit>
        <trans-unit id="d7f4131283bcadf677ce4db2eedf7e688f79ab97" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセットにある、符号なし 32 ビット整数(符号なしロング)を取得します。</target>
        </trans-unit>
        <trans-unit id="d5b761248a23b47f9e33c7eae9b8dc3f30519d6b" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセット位置の符号なし 8 ビット整数(符号なしバイト)を取得します。</target>
        </trans-unit>
        <trans-unit id="96857c88cebeabc578d887e01fbcb2fd02cbcdb7" translate="yes" xml:space="preserve">
          <source>Getter</source>
          <target state="translated">Getter</target>
        </trans-unit>
        <trans-unit id="f2e54c330cdd01c6d47ab5b44eb43fb8cf8f5947" translate="yes" xml:space="preserve">
          <source>Getter and setter functions</source>
          <target state="translated">ゲッターとセッター関数</target>
        </trans-unit>
        <trans-unit id="cb65abe3705de84bc96c85c734723746cfaff77d" translate="yes" xml:space="preserve">
          <source>Getter only</source>
          <target state="translated">ゲッターのみ</target>
        </trans-unit>
        <trans-unit id="b82e2aa4437224c3ce65ca8da908b4469c7c2482" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that compares two strings according to the sort order of this &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt;オブジェクトの並べ替え順序に従って2つの文字列を比較する関数を返します。</target>
        </trans-unit>
        <trans-unit id="c22fac77c009059affb217382c064ececfc99ac0" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that compares two strings according to the sort order of this &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt;オブジェクトの並べ替え順序に従って2つの文字列を比較する関数を返します。</target>
        </trans-unit>
        <trans-unit id="b3bbfe3f0cad3780f6ed32aa64f5415f3f02b3ea" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a date according to the locale and formatting options of this &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って日付をフォーマットする関数を返します。</target>
        </trans-unit>
        <trans-unit id="101493502c3dabb33abe624e85075b4278d7088d" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a date according to the locale and formatting options of this &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って日付をフォーマットする関数を返します。</target>
        </trans-unit>
        <trans-unit id="0d595a3294f368cb93ba183d5cf3d0d933407b9a" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a number according to the locale and formatting options of this &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールおよびフォーマットオプションに従って数値をフォーマットする関数を返します。</target>
        </trans-unit>
        <trans-unit id="d32338c2f6c2e1ff3f7f292dd7d93f2f42a2385e" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a number according to the locale and formatting options of this &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールおよびフォーマットオプションに従って数値をフォーマットする関数を返します。</target>
        </trans-unit>
        <trans-unit id="d8ea8a70e0c66dbc7cdb18bf43206be829e1c2b4" translate="yes" xml:space="preserve">
          <source>Getters give you a way to define a property of an object, but they do not calculate the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed, and if it is never needed, you never pay the cost.</source>
          <target state="translated">ゲッターはオブジェクトのプロパティを定義する方法を提供しますが、アクセスされるまでプロパティの値を計算しません。ゲッターは、値が必要になるまで値を計算するためのコストを延期し、値が必要になることがなければコストを支払うことはありません。</target>
        </trans-unit>
        <trans-unit id="b65d9b412c6df59f988b1cc08ddee0764855c0ac" translate="yes" xml:space="preserve">
          <source>Getting a random integer between two values</source>
          <target state="translated">2つの値の間のランダムな整数を取得する</target>
        </trans-unit>
        <trans-unit id="e006e97377ead1206e5712837e81f4c8008e48bd" translate="yes" xml:space="preserve">
          <source>Getting a random integer between two values, inclusive</source>
          <target state="translated">2つの値の間のランダムな整数を取得します。</target>
        </trans-unit>
        <trans-unit id="a7aaee129f91cb0de88f607c96a13e02b3eadf9e" translate="yes" xml:space="preserve">
          <source>Getting a random number between 0 (inclusive) and 1 (exclusive)</source>
          <target state="translated">0(含む)と1(含む)の間の乱数の取得</target>
        </trans-unit>
        <trans-unit id="e7e9b5402b7c69e9cfcf0a3dc0c6734f74f10e42" translate="yes" xml:space="preserve">
          <source>Getting a random number between two values</source>
          <target state="translated">2つの値の間の乱数を取得する</target>
        </trans-unit>
        <trans-unit id="9cdb6a445dbcaa1ef224574cb3e4c4af50c03c03" translate="yes" xml:space="preserve">
          <source>Getting an array buffer from existing data</source>
          <target state="translated">既存のデータから配列バッファを取得する</target>
        </trans-unit>
        <trans-unit id="0c5070744f1dae1186acd94d2236210213d9a650" translate="yes" xml:space="preserve">
          <source>Getting it to work with higher values</source>
          <target state="translated">より高い値で動作するようにする</target>
        </trans-unit>
        <trans-unit id="93fa8562e2ad496efa70d8d322f9289d62409ab4" translate="yes" xml:space="preserve">
          <source>Getting the maximum element of an array</source>
          <target state="translated">配列の最大要素を取得する</target>
        </trans-unit>
        <trans-unit id="159afb1c4f6c9a04181e9922b1f6ba14fa8bf7f4" translate="yes" xml:space="preserve">
          <source>Getting whole characters</source>
          <target state="translated">キャラクター全体の取得</target>
        </trans-unit>
        <trans-unit id="1ccf04e9757d71b593670b6503b8dfb8626fea28" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt;, this returns 'border-top'.</source>
          <target state="translated">与えられた &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt; 、この'border-top'を返します。</target>
        </trans-unit>
        <trans-unit id="8cf85e175fcc3bf8d435c791b50a25d2626fc4d0" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt; and string, returns a copy of the contents of all custom sections in the module with the given string name.</source>
          <target state="translated">与えられた &lt;code&gt;Module&lt;/code&gt; と文字列、指定された文字列名を持つモジュール内のすべてのカスタムセクションの内容のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="71816309ab49deddc634406a637aa5de13c077ff" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt;, returns an array containing descriptions of all the declared exports.</source>
          <target state="translated">与えられた &lt;code&gt;Module&lt;/code&gt; 、宣言されたすべての輸出の記述を含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="f856fccf3beb4cca4ef1ea953cc00f8bd48e12ac" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt;, returns an array containing descriptions of all the declared imports.</source>
          <target state="translated">与えられた &lt;code&gt;Module&lt;/code&gt; 、宣言されたすべての輸入品の説明を含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="dd5ae485e18c7c0ddc8083d7c7bb31df74e1088c" translate="yes" xml:space="preserve">
          <source>Given a date string of &lt;code&gt;&quot;March 7, 2014&quot;&lt;/code&gt;, &lt;code&gt;parse()&lt;/code&gt; assumes a local time zone, but given an ISO format such as &lt;code&gt;&quot;2014-03-07&quot;&lt;/code&gt; it will assume a time zone of UTC (ES5 and ECMAScript 2015). Therefore &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects produced using those strings may represent different moments in time depending on the version of ECMAScript supported unless the system is set with a local time zone of UTC. This means that two date strings that appear equivalent may result in two different values depending on the format of the string that is being converted.</source>
          <target state="translated">&lt;code&gt;&quot;March 7, 2014&quot;&lt;/code&gt; 日付文字列を指定すると、 &lt;code&gt;parse()&lt;/code&gt; はローカルタイムゾーンを想定しますが、 &lt;code&gt;&quot;2014-03-07&quot;&lt;/code&gt; などのISO形式を指定すると、UTC（ES5およびECMAScript 2015）のタイムゾーンを想定します。したがって、これらの文字列を使用して生成された&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトは、システムがUTCのローカルタイムゾーンで設定されていない限り、サポートされているECMAScriptのバージョンに応じて異なる瞬間を表す場合があります。つまり、等価に見える2つの日付文字列は、変換される文字列の形式に応じて、2つの異なる値になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f9c73621eb8378bc40ca8b96e5182b675e0b3c0c" translate="yes" xml:space="preserve">
          <source>Given a module &lt;code&gt;my-module.js&lt;/code&gt;</source>
          <target state="translated">モジュール &lt;code&gt;my-module.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35be346396e126b3b89b1cd82cc0c32b468472ae" translate="yes" xml:space="preserve">
          <source>Given a shared &lt;code&gt;Int32Array&lt;/code&gt;:</source>
          <target state="translated">共有された &lt;code&gt;Int32Array&lt;/code&gt; が与えられた場合：</target>
        </trans-unit>
        <trans-unit id="d6fd3993d58d86b8a2d1b9dacc8bf0a3179cf150" translate="yes" xml:space="preserve">
          <source>Given a string representing a time, &lt;code&gt;parse()&lt;/code&gt; returns the time value. It accepts the RFC2822 / IETF date syntax (&lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 Section 3.3&lt;/a&gt;), e.g. &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;&lt;/code&gt;. It understands the continental US time zone abbreviations, but for general use, use a time zone offset, for example, &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 +0430&quot;&lt;/code&gt; (4 hours, 30 minutes east of the Greenwich meridian).</source>
          <target state="translated">時間を表す文字列を指定すると、 &lt;code&gt;parse()&lt;/code&gt; は時間の値を返します。 RFC2822 / IETF日付構文（&lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822セクション3.3&lt;/a&gt;）を受け入れます（例： &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;&lt;/code&gt; 。米国大陸のタイムゾーンの省略形を認識しますが、一般的に使用するには、タイムゾーンオフセットを使用します。たとえば、 &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 +0430&quot;&lt;/code&gt; （グリニッジ子午線の東4時間30分）です。</target>
        </trans-unit>
        <trans-unit id="95e6727da6ca58f8c51ff5196575c2e7fcac3248" translate="yes" xml:space="preserve">
          <source>Given an array of items and an array of tests, this example counts the number of items that passes all the tests.</source>
          <target state="translated">項目の配列とテストの配列を指定すると、この例ではすべてのテストに合格した項目の数をカウントします。</target>
        </trans-unit>
        <trans-unit id="ed0e87792cb402fa5496b2410e4f2a4d126225e0" translate="yes" xml:space="preserve">
          <source>Given an array of items and an array of tests, this example determines whether all items pass all tests.</source>
          <target state="translated">項目の配列とテストの配列があると、この例では、すべての項目がすべてのテストに合格するかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="ce988ebc4e75168602f3d1de0e938f1b059ff589" translate="yes" xml:space="preserve">
          <source>Given an object or value named &lt;code&gt;myExport&lt;/code&gt; which has been exported from the module &lt;code&gt;my-module&lt;/code&gt; either implicitly (because the entire module is exported) or explicitly (using the &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement), this inserts &lt;code&gt;myExport&lt;/code&gt; into the current scope.</source>
          <target state="translated">モジュール &lt;code&gt;my-module&lt;/code&gt; から暗黙的に（モジュール全体がエクスポートされるため）または明示的に（&lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;ステートメントを使用して）エクスポートされた &lt;code&gt;myExport&lt;/code&gt; という名前のオブジェクトまたは値を指定すると、 &lt;code&gt;myExport&lt;/code&gt; が現在のスコープに挿入されます。</target>
        </trans-unit>
        <trans-unit id="57777d79c2c7fcb95a77d48ba531eb7fb132081d" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;this&lt;/code&gt; comes from the surrounding lexical context, &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; rules with regard to &lt;code&gt;this&lt;/code&gt; are ignored.</source>
          <target state="translated">ことを考えると &lt;code&gt;this&lt;/code&gt; 、周囲の字句文脈から来て、&lt;a href=&quot;../strict_mode&quot;&gt;厳格なモード&lt;/a&gt;に関する規則 &lt;code&gt;this&lt;/code&gt; 無視されます。</target>
        </trans-unit>
        <trans-unit id="54f2ff8a238acabb2079588d5c2033656ef069ee" translate="yes" xml:space="preserve">
          <source>Given the following code:</source>
          <target state="translated">以下のコードが与えられているとします。</target>
        </trans-unit>
        <trans-unit id="66cc8f0aba96a51c396c49f13e7a6a7e2cfea340" translate="yes" xml:space="preserve">
          <source>Global Context</source>
          <target state="translated">グローバルコンテキスト</target>
        </trans-unit>
        <trans-unit id="b5cdadeb82c625264f87984cdb7712780b8ec0e8" translate="yes" xml:space="preserve">
          <source>Global Objects</source>
          <target state="translated">グローバルオブジェクト</target>
        </trans-unit>
        <trans-unit id="d1a3f442a9873910f12738a060cce503718a5808" translate="yes" xml:space="preserve">
          <source>Global instances</source>
          <target state="translated">グローバルインスタンス</target>
        </trans-unit>
        <trans-unit id="6c1092b384c391c235bf0f03a6b067bc9829d4dd" translate="yes" xml:space="preserve">
          <source>Global objects</source>
          <target state="translated">グローバルオブジェクト</target>
        </trans-unit>
        <trans-unit id="20c3687f785130a94e95b82635515a9bed2f11aa" translate="yes" xml:space="preserve">
          <source>Global replace can only be done with a regular expression. In the following example, the regular expression includes the global and ignore case flags which permits &lt;code&gt;replace()&lt;/code&gt; to replace each occurrence of 'apples' in the string with 'oranges'.</source>
          <target state="translated">グローバル置換は、正規表現でのみ実行できます。次の例では、正規表現にグローバルと無視のフラグが含まれており、 &lt;code&gt;replace()&lt;/code&gt; で文字列内の「apples」が出現するたびに「oranges」に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="fcd2f358507f46dacf4e333df045d970161f3961" translate="yes" xml:space="preserve">
          <source>Global search.</source>
          <target state="translated">グローバル検索。</target>
        </trans-unit>
        <trans-unit id="167937e0f76150c8fbf7b4c427c862e86b880570" translate="yes" xml:space="preserve">
          <source>Global symbol registry</source>
          <target state="translated">グローバルシンボルレジストリ</target>
        </trans-unit>
        <trans-unit id="2b29ffb55e0badb65375a434cf64ab1147fe24e3" translate="yes" xml:space="preserve">
          <source>Glossary: Symbol data type</source>
          <target state="translated">用語集 シンボルデータ型</target>
        </trans-unit>
        <trans-unit id="3ed7f82aff7c093f6dce93e01e74889c131e51f5" translate="yes" xml:space="preserve">
          <source>Good variable names</source>
          <target state="translated">良い変数名</target>
        </trans-unit>
        <trans-unit id="18e43c184811802315da94a97ea03158c2b342c5" translate="yes" xml:space="preserve">
          <source>Gotchas when throwing errors</source>
          <target state="translated">エラーを投げるときのゴッチャ</target>
        </trans-unit>
        <trans-unit id="755f5dc8338fdd2b9f3422f770363e935afd3aac" translate="yes" xml:space="preserve">
          <source>Gradual transition</source>
          <target state="translated">漸進的な移行</target>
        </trans-unit>
        <trans-unit id="7be07c875cfba8e109b4abbd611ba4cce5fd4c77" translate="yes" xml:space="preserve">
          <source>Greater Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661a1cf195498e4d5ef48d28086f549d7a9f9e52" translate="yes" xml:space="preserve">
          <source>Greater Than Or Equal</source>
          <target state="translated">大なり</target>
        </trans-unit>
        <trans-unit id="acaff83628aa9c951c9c96ec4a78d05b5903c181" translate="yes" xml:space="preserve">
          <source>Greater than (&lt;code&gt;a &amp;gt; b&lt;/code&gt;)</source>
          <target state="translated">より大きい（ &lt;code&gt;a &amp;gt; b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="19339cbb3bf9612b2d425533788b474fc71b7fc8" translate="yes" xml:space="preserve">
          <source>Greater than operator (&amp;gt;)</source>
          <target state="translated">大なり演算子（&amp;gt;）</target>
        </trans-unit>
        <trans-unit id="ba00f24f428c5c797c9c1a02fe3126b504dc367c" translate="yes" xml:space="preserve">
          <source>Greater than operator.</source>
          <target state="translated">オペレーターよりも大きい。</target>
        </trans-unit>
        <trans-unit id="ce9ce28c1418e4236454c52dcc54f02f5b21530f" translate="yes" xml:space="preserve">
          <source>Greater than or equal (&lt;code&gt;a &amp;gt;= b&lt;/code&gt;)</source>
          <target state="translated">以上（ &lt;code&gt;a &amp;gt;= b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="49067406979e72aabf504916a7dbce98a5bea221" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator (&amp;gt;=)</source>
          <target state="translated">以上の演算子（&amp;gt; =）</target>
        </trans-unit>
        <trans-unit id="4aeb184a334e8273aa73cf8c81481065f24bf2f2" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator.</source>
          <target state="translated">大きいか等しい演算子。</target>
        </trans-unit>
        <trans-unit id="2ae6967b07a45b63c8543a6c5e34052414ba32af" translate="yes" xml:space="preserve">
          <source>Grouping</source>
          <target state="translated">Grouping</target>
        </trans-unit>
        <trans-unit id="a558ecadea6e7417651ffb43f2ee9ca2c34b30f4" translate="yes" xml:space="preserve">
          <source>Grouping and back references</source>
          <target state="translated">グループ化とバックリファレンス</target>
        </trans-unit>
        <trans-unit id="2cef99738d01030fced8fc7aad3f62156b1e6acd" translate="yes" xml:space="preserve">
          <source>Grouping objects by a property</source>
          <target state="translated">プロパティによるオブジェクトのグループ化</target>
        </trans-unit>
        <trans-unit id="527e76a146b1b5490208a09d5b54bffbd071c7e6" translate="yes" xml:space="preserve">
          <source>Grouping operator.</source>
          <target state="translated">グループ化演算子。</target>
        </trans-unit>
        <trans-unit id="af3b3fd4e5a91be3c9ae24e7f9f2b199db3bc273" translate="yes" xml:space="preserve">
          <source>HTML Living Standard&lt;br/&gt;&lt;small&gt;The definition of 'import.meta' in that specification.&lt;/small&gt;</source>
          <target state="translated">HTML Living Standard &lt;br/&gt;&lt;small&gt;その仕様における「import.meta」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4c41038188894303cbb976481fb1aa9e2a5e355e" translate="yes" xml:space="preserve">
          <source>HTML content</source>
          <target state="translated">HTMLコンテンツ</target>
        </trans-unit>
        <trans-unit id="bcbc9616d000628a0c49e8fdf2dae8519b74150b" translate="yes" xml:space="preserve">
          <source>HTML wrapper methods</source>
          <target state="translated">HTML ラッパーメソッド</target>
        </trans-unit>
        <trans-unit id="c6ade9cd7521f0bda3a7985cfe1fbb3d2ca278a4" translate="yes" xml:space="preserve">
          <source>Handle rejected &lt;code&gt;Promise&lt;/code&gt; without try block.</source>
          <target state="translated">拒否された &lt;code&gt;Promise&lt;/code&gt; をtryブロックなしで処理します。</target>
        </trans-unit>
        <trans-unit id="05be078b093d3d7249de3afe5aeea8df03ebd38b" translate="yes" xml:space="preserve">
          <source>Handling a specific error</source>
          <target state="translated">特定のエラーの処理</target>
        </trans-unit>
        <trans-unit id="0f0511546a2fd284a7b7e7b3e0c83c8b0aa321c0" translate="yes" xml:space="preserve">
          <source>Handling values larger or smaller than ~9 quadrillion with full precision requires using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic&quot;&gt;arbitrary precision arithmetic library&lt;/a&gt;. See &lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;What Every Programmer Needs to Know about Floating Point Arithmetic&lt;/a&gt; for more information on floating point representations of numbers.</source>
          <target state="translated">完全な精度で約9兆以上の値を処理するには、&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic&quot;&gt;任意の精度の算術ライブラリ&lt;/a&gt;を使用する必要があります。数値の浮動小数点表現の詳細について&lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;は、すべてのプログラマーが浮動小数点演算について知っておくべきことを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c4f14b0be5232bf7b6a4a221e3c77e209ae1957e" translate="yes" xml:space="preserve">
          <source>Has a value of 1.</source>
          <target state="translated">1の値を持っています。</target>
        </trans-unit>
        <trans-unit id="6769a17273095a460a5770629c83ce2f07e68f73" translate="yes" xml:space="preserve">
          <source>Has the same functionality as &lt;a href=&quot;arraybuffer/slice&quot;&gt;&lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;arraybuffer/slice&quot;&gt; &lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt; &lt;/a&gt;と同じ機能があります。</target>
        </trans-unit>
        <trans-unit id="3842628d6ffd70cf6c89393a3508b1bc7fbb2c25" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;false&lt;/code&gt; if the iterator was able to produce the next value in the sequence. This is equivalent of not specifying the &lt;code&gt;done&lt;/code&gt; property altogether.</source>
          <target state="translated">イテレーターがシーケンスの次の値を生成できた場合、値は &lt;code&gt;false&lt;/code&gt; になります。これは、 &lt;code&gt;done&lt;/code&gt; プロパティを完全に指定しないことと同じです。</target>
        </trans-unit>
        <trans-unit id="f160378fa42521846caacc333df5e6d0e7f03987" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator is past the end of the iterated sequence. In this case &lt;code&gt;value&lt;/code&gt; optionally specifies the &lt;em&gt;return value&lt;/em&gt; of the iterator.</source>
          <target state="translated">反復子が反復シーケンスの終わりを過ぎている場合、値は &lt;code&gt;true&lt;/code&gt; です。この場合、 &lt;code&gt;value&lt;/code&gt; オプションでイテレータの&lt;em&gt;戻り値&lt;/em&gt;を指定します。</target>
        </trans-unit>
        <trans-unit id="706e860c1a9505d02f07d336b066f2bf2d9d2bb4" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator is past the end of the iterated sequence. In this case &lt;code&gt;value&lt;/code&gt; optionally specifies the return value of the iterator.</source>
          <target state="translated">反復子が反復シーケンスの終わりを過ぎている場合、値は &lt;code&gt;true&lt;/code&gt; です。この場合、 &lt;code&gt;value&lt;/code&gt; オプションでイテレータの戻り値を指定します。</target>
        </trans-unit>
        <trans-unit id="89a512c7a0d8eebcc121926b32d2b19cb2392d47" translate="yes" xml:space="preserve">
          <source>Hence encodeURI &lt;strong&gt;does not&lt;/strong&gt; encode characters that are necessary to formulate a complete URI. Also, encodeURI &lt;strong&gt;does not&lt;/strong&gt; encode a few additional characters, known as &quot;unreserved marks&quot;, which do not have a reserved purpose but are allowed in a URI &quot;as is&quot;. (See &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396)&lt;/a&gt;</source>
          <target state="translated">したがって、encodeURI &lt;strong&gt;は&lt;/strong&gt;完全なURIを作成するために必要な文字をエンコード&lt;strong&gt;しません&lt;/strong&gt;。また、encodeURI &lt;strong&gt;は&lt;/strong&gt;、「予約されていないマーク」と呼ばれる追加の文字をエンコード&lt;strong&gt;しません。これらの&lt;/strong&gt;文字は、予約された目的はありませんが、URIで「そのまま」使用できます。（&lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="06a53efe4443b193ea939246d0bee3605e739beb" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;++&lt;/code&gt; is not treated as a &lt;a href=&quot;operators/arithmetic_operators#Increment&quot;&gt;postfix operator&lt;/a&gt; applying to variable &lt;code&gt;b&lt;/code&gt;, because a line terminator occurs between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;++&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;++&lt;/code&gt; は変数 &lt;code&gt;b&lt;/code&gt; に適用される&lt;a href=&quot;operators/arithmetic_operators#Increment&quot;&gt;後置演算子&lt;/a&gt;として扱われません。これは、 &lt;code&gt;b&lt;/code&gt; と &lt;code&gt;++&lt;/code&gt; の間に行末記号が発生するためです。</target>
        </trans-unit>
        <trans-unit id="b316f1fcc81d86f5ec38af0adc62588474cb39dc" translate="yes" xml:space="preserve">
          <source>Here JavaScript thinks that you meant to have &lt;code&gt;);&lt;/code&gt; inside the string and ignores it, and it ends up not knowing that you meant the &lt;code&gt;);&lt;/code&gt; to end the function &lt;code&gt;console.log&lt;/code&gt;. To fix this, we could put a&lt;code&gt;'&lt;/code&gt; after the &quot;Script&quot; string:</source>
          <target state="translated">ここでJavaScriptはあなたが持っているつもりだったと考えています &lt;code&gt;);&lt;/code&gt; 文字列の内部にあり、それを無視し、それがあなたが意図したことを知らないことになります &lt;code&gt;);&lt;/code&gt; 関数 &lt;code&gt;console.log&lt;/code&gt; を終了します。これを修正するには、「スクリプト」文字列 &lt;code&gt;'&lt;/code&gt; 後に'を付けます。</target>
        </trans-unit>
        <trans-unit id="6b78dc499efcb3a2e64d5a1d08544b298bfb6496" translate="yes" xml:space="preserve">
          <source>Here is an example of an &lt;strong&gt;anonymous&lt;/strong&gt; function expression (the &lt;code&gt;name&lt;/code&gt; is not used):</source>
          <target state="translated">&lt;strong&gt;無名&lt;/strong&gt;関数式の例を次に示します（ &lt;code&gt;name&lt;/code&gt; は使用されません）。</target>
        </trans-unit>
        <trans-unit id="3165612e15dd81d081ad2ea3bdee303a0e8cef7a" translate="yes" xml:space="preserve">
          <source>Here is the output:</source>
          <target state="translated">こちらが出力です。</target>
        </trans-unit>
        <trans-unit id="a25458ba1519e52ca3b4eba3bb4f22092fc95ae9" translate="yes" xml:space="preserve">
          <source>Here is the same &quot;Conditional catch clauses&quot; using code that conforms to ECMAScript specification (obviously it's verbose, but works everywhere):</source>
          <target state="translated">ここでは、ECMAScriptの仕様に準拠したコードを使った同じ「条件付きキャッチ句」を紹介します(明らかに冗長ですが、どこでも動作します)。</target>
        </trans-unit>
        <trans-unit id="b6ddfd08130fdd41064ead403ecc7771b756bd7a" translate="yes" xml:space="preserve">
          <source>Here the prototype of &lt;strong&gt;Square&lt;/strong&gt; class is changed but still the constructor of the previous base class &lt;strong&gt;Polygon &lt;/strong&gt;is called when a new instance of a square is being created.</source>
          <target state="translated">ここでは、&lt;strong&gt;Square&lt;/strong&gt;クラスのプロトタイプが変更されていますが、正方形の新しいインスタンスが作成されるときに、以前の基本クラス&lt;strong&gt;Polygonの&lt;/strong&gt;コンストラクターが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="90b6aaa340bd0ee0aff948f94fa41abe49107e85" translate="yes" xml:space="preserve">
          <source>Here's an external resource for getting the complete Unicode block range for different scripts: &lt;a href=&quot;http://kourge.net/projects/regexp-unicode-block&quot;&gt;Regexp-Unicode-block&lt;/a&gt;.</source>
          <target state="translated">さまざまなスクリプトの完全なUnicodeブロック範囲を取得するための外部リソースは次のとおりです：&lt;a href=&quot;http://kourge.net/projects/regexp-unicode-block&quot;&gt;Regexp-Unicode-block&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7857a46a59cc12380ddb853b6b9f402e6c55d9ef" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are declared before any code is executed, but the assignments occur later. At the time &quot;&lt;code&gt;x = y&lt;/code&gt;&quot; is evaluated, &lt;code&gt;y&lt;/code&gt; exists so no &lt;code&gt;ReferenceError&lt;/code&gt; is thrown and its value is &lt;code&gt;undefined&lt;/code&gt;. So, &lt;code&gt;x&lt;/code&gt; is assigned the undefined value. Then, &lt;code&gt;y&lt;/code&gt; is assigned the value &lt;code&gt;'A'&lt;/code&gt;. Consequently, after the first line, &lt;code&gt;x === undefined &amp;amp;&amp;amp; y === 'A'&lt;/code&gt;, hence the result.</source>
          <target state="translated">ここで、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; はコードが実行される前に宣言されますが、割り当ては後で発生します。 「 &lt;code&gt;x = y&lt;/code&gt; 」が評価される時点では、 &lt;code&gt;y&lt;/code&gt; が存在するため、 &lt;code&gt;ReferenceError&lt;/code&gt; はスローされず、その値は &lt;code&gt;undefined&lt;/code&gt; です。したがって、 &lt;code&gt;x&lt;/code&gt; には未定義の値が割り当てられます。次に、 &lt;code&gt;y&lt;/code&gt; に値 &lt;code&gt;'A'&lt;/code&gt; が割り当てられます。その結果、最初の行の後、 &lt;code&gt;x === undefined &amp;amp;&amp;amp; y === 'A'&lt;/code&gt; 、したがって結果。</target>
        </trans-unit>
        <trans-unit id="f2c3bff61e26f4963cd35a7ab991589ba7008419" translate="yes" xml:space="preserve">
          <source>Here, accessing the exports means using the module name (&quot;myModule&quot; in this case) as a namespace. For example, if the module imported above includes an export &lt;code&gt;doAllTheAmazingThings()&lt;/code&gt;, you would call it like this:</source>
          <target state="translated">ここで、エクスポートにアクセスすることは、モジュール名（この場合は「myModule」）を名前空間として使用することを意味します。たとえば、上記でインポートしたモジュールにエクスポート &lt;code&gt;doAllTheAmazingThings()&lt;/code&gt; が含まれている場合は、次のように呼び出します。</target>
        </trans-unit>
        <trans-unit id="51f81ae1558077795df8fc0042020be94e3ff570" translate="yes" xml:space="preserve">
          <source>Here, the method named &quot;createElement&quot; is retrieved from &lt;code&gt;document&lt;/code&gt; and is called.</source>
          <target state="translated">ここでは、「createElement」という名前のメソッドが &lt;code&gt;document&lt;/code&gt; から取得され、呼び出されます。</target>
        </trans-unit>
        <trans-unit id="54b1a90f72334cf67c79da3608b8cff7cc194a79" translate="yes" xml:space="preserve">
          <source>Hexadecimal</source>
          <target state="translated">Hexadecimal</target>
        </trans-unit>
        <trans-unit id="0a2f21efe45a597d0c5e08f0bcf4197917ea15a9" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences</source>
          <target state="translated">16進数のエスケープシーケンス</target>
        </trans-unit>
        <trans-unit id="9b58c9bceb1fb4cd00c1b0d68cba9a880adb6196" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences (&lt;code&gt;'\0xA9'&lt;/code&gt;)</source>
          <target state="translated">16進数のエスケープシーケンス（ &lt;code&gt;'\0xA9'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d77a4d628bd253cb9d7796f35659fc6bb4dc2dfa" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences consist of &lt;code&gt;\x&lt;/code&gt; followed by exactly two hexadecimal digits representing a code unit or code point in the range 0x0000 to 0x00FF.</source>
          <target state="translated">16進数のエスケープシーケンスは、 &lt;code&gt;\x&lt;/code&gt; それに続く0x0000から0x00FFの範囲のコードユニットまたはコードポイントを表す2桁の16進数で構成されます。</target>
        </trans-unit>
        <trans-unit id="a4bd87c365a900dd5094579ce438c4cfe544351c" translate="yes" xml:space="preserve">
          <source>Hexadecimal escapes started by &quot;\x&quot;, for example &lt;code&gt;\xA9&lt;/code&gt;</source>
          <target state="translated">「\ x」で始まる16進エスケープ、たとえば &lt;code&gt;\xA9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e066ca26a734b38a5a274a8d41c70f6df347e59e" translate="yes" xml:space="preserve">
          <source>Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;X&quot; (&lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X)&lt;/code&gt;. If the digits after 0x are outside the range (0123456789ABCDEF), the following &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; is thrown: &quot;Identifier starts immediately after numeric literal&quot;.</source>
          <target state="translated">16進数の構文では、先頭の0の後に小文字または大文字のラテン文字 &quot;X&quot;（ &lt;code&gt;0x&lt;/code&gt; または &lt;code&gt;0X)&lt;/code&gt; が続きます。0xの後の数字が範囲（0123456789ABCDEF）の外にある場合、次の &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; がスローされます：「数値リテラルの直後に識別子が始まります」。</target>
        </trans-unit>
        <trans-unit id="a69413db5aeb0efb2c0b65dd4800effb756f3189" translate="yes" xml:space="preserve">
          <source>Hexadecimal numeric literals (&lt;code&gt;0xAF&lt;/code&gt;)</source>
          <target state="translated">16進数の数値リテラル（ &lt;code&gt;0xAF&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ed159796c6374be3a3a7fcdf94ff47de9417b532" translate="yes" xml:space="preserve">
          <source>Hidden characters</source>
          <target state="translated">隠しキャラ</target>
        </trans-unit>
        <trans-unit id="ba8e27ee7970ed22acceee3b123e2ed01cfef7b9" translate="yes" xml:space="preserve">
          <source>Hiding Implementation Details with ECMAScript 6 WeakMaps</source>
          <target state="translated">ECMAScript 6 WeakMaps で実装の詳細を隠す</target>
        </trans-unit>
        <trans-unit id="48c7f05df7a5b55b6867d43de9a4ff0ca135540e" translate="yes" xml:space="preserve">
          <source>Historically &lt;code&gt;eval()&lt;/code&gt; had an optional second argument, specifying an object in whose context the evaluation was to be performed. This argument was non-standard, and was definitely removed from Firefox 4. See &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=531675&quot;&gt;bug 531675&lt;/a&gt;.</source>
          <target state="translated">歴史的に &lt;code&gt;eval()&lt;/code&gt; にはオプションの2番目の引数があり、そのコンテキストで評価が実行されるオブジェクトを指定していました。この引数は非標準であり、Firefox 4から削除され&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=531675&quot;&gt;ました&lt;/a&gt;。バグ531675を参照してください。</target>
        </trans-unit>
        <trans-unit id="7bcaf634e9dbfa99922f815d7eb0b950882fbc2c" translate="yes" xml:space="preserve">
          <source>Hoisting</source>
          <target state="translated">Hoisting</target>
        </trans-unit>
        <trans-unit id="5f27b866d76e39ba378b955e78eb58dfdd94f6f6" translate="yes" xml:space="preserve">
          <source>Horizontal tabulation</source>
          <target state="translated">水平方向の集計</target>
        </trans-unit>
        <trans-unit id="3adb95f9912f2091bd36deb307c797f8d4c2f8ed" translate="yes" xml:space="preserve">
          <source>Host object (provided by the JS environment)</source>
          <target state="translated">ホストオブジェクト(JS環境で提供される</target>
        </trans-unit>
        <trans-unit id="05d832afb150e6d6cee536a5366db6a39f98f7aa" translate="yes" xml:space="preserve">
          <source>Hour cycle. Possible values include: &lt;code&gt;&quot;h11&quot;&lt;/code&gt;, &lt;code&gt;&quot;h12&quot;&lt;/code&gt;, &lt;code&gt;&quot;h23&quot;&lt;/code&gt;, &lt;code&gt;&quot;h24&quot;&lt;/code&gt;.</source>
          <target state="translated">時間サイクル。可能な値には、 &lt;code&gt;&quot;h11&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;h12&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;h23&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;h24&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f4d808298af4e3a344801b330a4f9fdcd1165517" translate="yes" xml:space="preserve">
          <source>Hour: 2 digit hour of day, e.g. &quot;14&quot;</source>
          <target state="translated">時間:2桁の曜日の時間、例:&quot;14&quot;</target>
        </trans-unit>
        <trans-unit id="02b8a9b69ed5e801a258f6ff432668b197dc1977" translate="yes" xml:space="preserve">
          <source>How a static method can and cannot be called.</source>
          <target state="translated">静的なメソッドの呼び方、呼び方。</target>
        </trans-unit>
        <trans-unit id="9212bc0bac3b7334165992d907eff590f2d58bf7" translate="yes" xml:space="preserve">
          <source>How a static method is implemented on a class.</source>
          <target state="translated">静的メソッドがクラスにどのように実装されているか。</target>
        </trans-unit>
        <trans-unit id="3c942ed885b162688cb9195ae45a134e9665a26b" translate="yes" xml:space="preserve">
          <source>How reduce() works</source>
          <target state="translated">reduce()の動作方法</target>
        </trans-unit>
        <trans-unit id="590c269c92635e56c357d9c996f7ebd80cef25ce" translate="yes" xml:space="preserve">
          <source>How to display the currency in currency formatting. Possible values are &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; to use a localized currency symbol such as &amp;euro;, &lt;code&gt;&quot;code&quot;&lt;/code&gt; to use the ISO currency code, &lt;code&gt;&quot;name&quot;&lt;/code&gt; to use a localized currency name such as &lt;code&gt;&quot;dollar&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;symbol&quot;&lt;/code&gt;.</source>
          <target state="translated">通貨を通貨フォーマットで表示する方法。可能な値は、&amp;euro;などのローカライズされた通貨記号を使用する &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; 、ISO通貨コードを使用する &lt;code&gt;&quot;code&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;dollar&quot;&lt;/code&gt; などのローカライズされた通貨名を使用する &lt;code&gt;&quot;name&quot;&lt;/code&gt; 」です。デフォルトは &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="317cebfb06712b03449e83ae5a1cfac238766c01" translate="yes" xml:space="preserve">
          <source>How to use a source map &amp;ndash; Firefox Tools documentation</source>
          <target state="translated">ソースマップの使用方法&amp;ndash; Firefoxツールのドキュメント</target>
        </trans-unit>
        <trans-unit id="72c36f97b9d3ec431e2384db73310aeb72ab6819" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; is valid, as is &lt;code&gt;var {a, b} = {a: 1, b: 2}&lt;/code&gt;</source>
          <target state="translated">ただし、 &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; は有効です &lt;code&gt;var {a, b} = {a: 1, b: 2}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ca0de76b3b99b8b56c8d7af288735c24f70c1f3" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;eval()&lt;/code&gt; is not necessary here. In fact, its use here is discouraged. Instead, use the &lt;a href=&quot;../operators/property_accessors&quot;&gt;property accessors&lt;/a&gt;, which are much faster and safer:</source>
          <target state="translated">ただし、ここでは &lt;code&gt;eval()&lt;/code&gt; は必要ありません。実際、ここでの使用はお勧めできません。代わりに、はるかに高速で安全な&lt;a href=&quot;../operators/property_accessors&quot;&gt;プロパティアクセサを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b921fc32f59289040086bb44d7385dce3af7b6ca" translate="yes" xml:space="preserve">
          <source>However, a function can access all variables and functions defined inside the scope in which it is defined. In other words, a function defined in the global scope can access all variables defined in the global scope.</source>
          <target state="translated">ただし、関数は、定義されているスコープ内で定義されているすべての変数や関数にアクセスすることができます。つまり、グローバルスコープで定義された関数は、グローバルスコープで定義されたすべての変数にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="1344ff6ea20d410b0de6c7bf7acfe1eadf51dcfb" translate="yes" xml:space="preserve">
          <source>However, adding non-standard methods to the array object can cause issues later, either with your own code, or when &lt;a href=&quot;https://developers.google.com/web/updates/2018/03/smooshgate&quot;&gt;adding features to JavaScript&lt;/a&gt;.</source>
          <target state="translated">ただし、非標準のメソッドを配列オブジェクトに追加すると、後で独自のコードで、または&lt;a href=&quot;https://developers.google.com/web/updates/2018/03/smooshgate&quot;&gt;JavaScriptに機能を追加する&lt;/a&gt;ときに問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e2fc3da3ae9c154becb2bd8619ed5afc981767c4" translate="yes" xml:space="preserve">
          <source>However, as it is widely implemented and used on the Web, it is very unlikely that browsers will stop implementing it.</source>
          <target state="translated">しかし、Web上では広く実装・利用されているため、ブラウザが実装をやめる可能性は極めて低いと考えられます。</target>
        </trans-unit>
        <trans-unit id="f9600d456633eb4645e65e56ab2737fa05e32c69" translate="yes" xml:space="preserve">
          <source>However, both spread (&lt;code&gt;...&lt;/code&gt;) and &lt;code&gt;apply&lt;/code&gt; will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;Using &lt;code&gt;apply&lt;/code&gt; and built-in functions&lt;/a&gt; for more details. The &lt;code&gt;reduce&lt;/code&gt; solution does not have this problem.</source>
          <target state="translated">ただし、spread（ &lt;code&gt;...&lt;/code&gt; ）と &lt;code&gt;apply&lt;/code&gt; はどちらも、配列の要素が多すぎると、失敗するか、誤った結果を返します。これは、配列要素を関数パラメーターとして渡そうとするためです。詳しくは、&lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt; &lt;code&gt;apply&lt;/code&gt; &lt;/a&gt;および組み込み関数の使用を参照してください。 &lt;code&gt;reduce&lt;/code&gt; ソリューションは、この問題はありません。</target>
        </trans-unit>
        <trans-unit id="155f9210fb274769199d9d6e37fb1cb3e08415b0" translate="yes" xml:space="preserve">
          <source>However, do note the difference between &lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;Number.isNaN():&lt;/code&gt; the former will return &lt;code&gt;true&lt;/code&gt; if the value is currently &lt;code&gt;NaN&lt;/code&gt;, or if it is going to be &lt;code&gt;NaN&lt;/code&gt; after it is coerced to a number, while the latter will return &lt;code&gt;true&lt;/code&gt; only if the value is currently &lt;code&gt;NaN:&lt;/code&gt;</source>
          <target state="translated">ただし、 &lt;code&gt;isNaN()&lt;/code&gt; と &lt;code&gt;Number.isNaN():&lt;/code&gt; の違いに注意してください。値が現在 &lt;code&gt;NaN&lt;/code&gt; である場合、または数値に強制変換された後に &lt;code&gt;NaN&lt;/code&gt; になる場合、前者は &lt;code&gt;true&lt;/code&gt; を返しますが、後者は返されます。値が現在 &lt;code&gt;NaN:&lt;/code&gt; 場合のみ &lt;code&gt;true&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="bb5955412c243802f624c3fcc726fa95ed764470" translate="yes" xml:space="preserve">
          <source>However, if a feature is part of the language, the burden of implementing that feature performantly is on the engine developers (ideally).</source>
          <target state="translated">しかし、ある機能が言語の一部である場合、その機能を性能的に実装する負担はエンジン開発者にあります(理想的には)。</target>
        </trans-unit>
        <trans-unit id="022c3ab98768670bbf1933120325adce314d4bb1" translate="yes" xml:space="preserve">
          <source>However, if you are more interested in all the little technical bits defined by the ECMA standard, and are less concerned about performance or conciseness, then you may find this more descriptive polyfill to be more useful.</source>
          <target state="translated">しかし、ECMA規格で定義されているすべての小さな技術的なビットに興味があり、性能や簡潔さにあまり関心がない場合は、このより記述的なポリフィルの方が有用であると感じるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e8b64102d1a72628622132dccbb3c2f213dbfead" translate="yes" xml:space="preserve">
          <source>However, if you set &lt;code&gt;Symbol.match&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;isRegExp&lt;/code&gt; check (that uses the &lt;code&gt;match&lt;/code&gt; property) will indicate that the object is not a regular expression object. The methods &lt;code&gt;startsWith&lt;/code&gt; and &lt;code&gt;endsWith&lt;/code&gt; won't throw a &lt;code&gt;TypeError&lt;/code&gt; as a consequence.</source>
          <target state="translated">ただし、 &lt;code&gt;Symbol.match&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、 &lt;code&gt;isRegExp&lt;/code&gt; チェック（ &lt;code&gt;match&lt;/code&gt; プロパティを使用）は、オブジェクトが正規表現オブジェクトではないことを示します。 &lt;code&gt;startsWith&lt;/code&gt; メソッドと &lt;code&gt;endsWith&lt;/code&gt; メソッドは結果として &lt;code&gt;TypeError&lt;/code&gt; をスローしません。</target>
        </trans-unit>
        <trans-unit id="31f1e2bdac94b098b9f877ce5da8857a1ad83361" translate="yes" xml:space="preserve">
          <source>However, illegal escape sequences must still be represented in the &amp;ldquo;cooked&amp;rdquo; representation. They will show up as &lt;a href=&quot;global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; element in the &amp;ldquo;cooked&amp;rdquo; array:</source>
          <target state="translated">ただし、違法なエスケープシーケンスは、「調理された」表現で表す必要があります。これらは、「cooked」配列の&lt;a href=&quot;global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;要素として表示されます。</target>
        </trans-unit>
        <trans-unit id="03a698f36d60dc84adc893e9fc94c9f9a1a121dc" translate="yes" xml:space="preserve">
          <source>However, in a case like the following, there are not alternatives to &lt;code&gt;arguments.callee&lt;/code&gt;, so its deprecation could be a bug (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=725398&quot;&gt;bug 725398&lt;/a&gt;):</source>
          <target state="translated">ただし、次のような場合は、 &lt;code&gt;arguments.callee&lt;/code&gt; の代替手段がないため、非推奨となる可能性があります（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=725398&quot;&gt;バグ725398を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="4589d67aea24a69292bd71d7b10227587745cfc4" translate="yes" xml:space="preserve">
          <source>However, in many User Interfaces there is a desire to customize the formatting of this string. The &lt;code&gt;formatToParts&lt;/code&gt; method enables locale-aware formatting of strings produced by &lt;code&gt;DateTimeFormat&lt;/code&gt; formatters by providing you the string in parts:</source>
          <target state="translated">ただし、多くのユーザーインターフェイスでは、この文字列のフォーマットをカスタマイズしたいという要望があります。 &lt;code&gt;formatToParts&lt;/code&gt; の方法は、によって生成文字列の書式設定ロケール対応可能 &lt;code&gt;DateTimeFormat&lt;/code&gt; のあなたの部分の文字列を提供することにより、フォーマッタ：</target>
        </trans-unit>
        <trans-unit id="8022b3b7bd063cb56b7912845f1a0f26bce01df9" translate="yes" xml:space="preserve">
          <source>However, in many User Interfaces there is a desire to customize the formatting of this string. The &lt;code&gt;formatToParts&lt;/code&gt; method enables locale-aware formatting of strings produced by &lt;code&gt;NumberFormat&lt;/code&gt; formatters by providing you the string in parts:</source>
          <target state="translated">ただし、多くのユーザーインターフェイスでは、この文字列のフォーマットをカスタマイズしたいという要望があります。 &lt;code&gt;formatToParts&lt;/code&gt; の方法は、によって生成文字列の書式設定ロケール対応可能 &lt;code&gt;NumberFormat&lt;/code&gt; あなたの部分の文字列を提供することにより、フォーマッタ：</target>
        </trans-unit>
        <trans-unit id="f669417c4db529251f3383ce99a11f4abe560111" translate="yes" xml:space="preserve">
          <source>However, invalid values in date strings not recognized as simplified ISO format as defined by ECMA-262 may or may not result in &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, depending on the browser and values provided, e.g.:</source>
          <target state="translated">ただし、ECMA-262で定義されている簡易ISO形式として認識されない日付文字列の無効な値は、ブラウザーや指定された値に応じて、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になる&lt;/a&gt;場合とならない場合があります。</target>
        </trans-unit>
        <trans-unit id="84cb019d3ebd3521eafb6da4bfd6f75dae35c17b" translate="yes" xml:space="preserve">
          <source>However, it's important to point out that a block nested inside a case clause will create a new block scoped lexical environment, which will not produce the redeclaration errors shown above.</source>
          <target state="translated">しかし、case節の中に入れ子になったブロックは、新しいブロックスコープ付き語彙環境を作成し、上記のような再宣言エラーを発生させないことを指摘しておくことが重要です。</target>
        </trans-unit>
        <trans-unit id="eb206323f2e15d213b5f0f56c363d1864f9a048d" translate="yes" xml:space="preserve">
          <source>However, objects created with the object literal notation are an exception here: Although the prototype is undefined, &lt;code&gt;instanceof Object&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ただし、オブジェクトリテラル表記で作成されたオブジェクトはここでは例外です。プロトタイプは未定義ですが、 &lt;code&gt;instanceof Object&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cb8b548450bac1315df5f50eded94022c2cca6c2" translate="yes" xml:space="preserve">
          <source>However, oftentimes, this error is only a consequence of another error, like not escaping strings properly, or using &lt;code&gt;var&lt;/code&gt; wrongly. You might also have too many parenthesis somewhere. Carefully check the syntax when this error is thrown.</source>
          <target state="translated">ただし、多くの場合、このエラーは文字列を適切にエスケープしない、 &lt;code&gt;var&lt;/code&gt; を誤って使用するなど、別のエラーの結果にすぎません。どこかに括弧が多すぎる可能性もあります。このエラーがスローされた場合は、構文を慎重に確認してください。</target>
        </trans-unit>
        <trans-unit id="97e2c5535a759168412becefdd1bf3e1815503f4" translate="yes" xml:space="preserve">
          <source>However, setting the generic &lt;strong&gt;prototype&lt;/strong&gt; as the new object's prototype works even better:</source>
          <target state="translated">ただし、新しいオブジェクトのプロトタイプとして汎用&lt;strong&gt;プロトタイプ&lt;/strong&gt;を設定すると、さらにうまく機能します。</target>
        </trans-unit>
        <trans-unit id="a979c19b10bb900d27fa12f6bd72e17ef4663d95" translate="yes" xml:space="preserve">
          <source>However, the advantage of the &lt;em&gt;literal&lt;/em&gt; or &lt;em&gt;initializer&lt;/em&gt; notation is, that you are able to quickly create objects with properties inside the curly braces. You simply notate a list of &lt;code&gt;key: value&lt;/code&gt; pairs delimited by comma. The following code creates an object with three properties and the keys are &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, &lt;code&gt;&quot;age&quot;&lt;/code&gt; and &lt;code&gt;&quot;baz&quot;&lt;/code&gt;. The values of these keys are a string &lt;code&gt;&quot;bar&quot;&lt;/code&gt;, a number &lt;code&gt;42&lt;/code&gt;, and another object.</source>
          <target state="translated">ただし、&lt;em&gt;リテラル&lt;/em&gt;または&lt;em&gt;イニシャライザ&lt;/em&gt;表記の利点は、中括弧内にプロパティを持つオブジェクトをすばやく作成できることです。カンマで区切られた &lt;code&gt;key: value&lt;/code&gt; ペアのリストを単純に表記します。次のコードは、3つのプロパティを持つオブジェクトを作成し、キーは &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;age&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;baz&quot;&lt;/code&gt; です。これらのキーの値は、文字列 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; 、数値 &lt;code&gt;42&lt;/code&gt; 、および別のオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="90eb6b0644af78d5b428ee0a62bbaacec5e664a7" translate="yes" xml:space="preserve">
          <source>However, the following expressions are not equivalent due to &lt;a href=&quot;operator_precedence&quot;&gt;operator precedence&lt;/a&gt; and stresses the importance of requiring the right-hand operand to be a single expression (grouped if needed by parentheses).</source>
          <target state="translated">ただし、次の式は&lt;a href=&quot;operator_precedence&quot;&gt;演算子の優先順位の&lt;/a&gt;ために同等ではなく、右側のオペランドを単一の式（括弧でグループ化する必要がある場合はグループ化）にする必要があることの重要性を強調しています。</target>
        </trans-unit>
        <trans-unit id="5502e7d43a8615c92869746e5397dde33bba4059" translate="yes" xml:space="preserve">
          <source>However, the following function is more performant because it is likely that browsers in which this polyfill would be used do not optimize with an internal integer type in javascript, instead using floating points for all numbers.</source>
          <target state="translated">しかし、このポリフィルが使われるであろうブラウザは、javascriptの内部整数型で最適化されておらず、すべての数値に浮動小数点を使用している可能性が高いため、次の関数の方がパフォーマンスが高いです。</target>
        </trans-unit>
        <trans-unit id="cb6b6a8647000d55f54a8880aa12a2276fcbbc59" translate="yes" xml:space="preserve">
          <source>However, the number 1.337 cannot be precisely represented in the binary numeral system, so it differs in 32-bit and 64-bit:</source>
          <target state="translated">ただし、1.337という数字は2進数系では正確に表現できないため、32ビットと64ビットで異なります。</target>
        </trans-unit>
        <trans-unit id="5eb7c1d2404c8192a9680a075b13909caf70856d" translate="yes" xml:space="preserve">
          <source>However, this is not the case for negative numbers. For example, &lt;code&gt;-9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; yields 1073741821, which is different than &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; (which yields &lt;code&gt;-3&lt;/code&gt;):</source>
          <target state="translated">ただし、これは負の数には当てはまりません。たとえば、 &lt;code&gt;-9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; は1073741821を生成し、 &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; （ &lt;code&gt;-3&lt;/code&gt; を生成）とは異なります。</target>
        </trans-unit>
        <trans-unit id="14dcb2bd120f90b22199060ec27ba9fae6eef4eb" translate="yes" xml:space="preserve">
          <source>However, this kind of technique should be avoided. JavaScript is a statically scoped language, so knowing if a variable is declared can be read by seeing whether it is declared in an enclosing context. The only exception is the global scope, but the global scope is bound to the global object, so checking the existence of a variable in the global context can be done by checking the existence of a property on the &lt;em&gt;global object&lt;/em&gt; (using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, for instance).</source>
          <target state="translated">ただし、このような手法は避けてください。 JavaScriptは静的スコープの言語であるため、変数が宣言されているかどうかは、それが囲んでいるコンテキストで宣言されているかどうかを確認することで読み取ることができます。唯一の例外はグローバルスコープですが、グローバルスコープはグローバルオブジェクトにバインドされているため、グローバルコンテキスト内の変数の存在を確認するには、&lt;em&gt;グローバルオブジェクトの&lt;/em&gt;プロパティの存在を確認し&lt;em&gt;ます&lt;/em&gt;（&lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子を使用して、例えば）。</target>
        </trans-unit>
        <trans-unit id="2730f9b7a2f6ab7900a8832f3fabf4b290a2468e" translate="yes" xml:space="preserve">
          <source>However, this was actually a really bad solution as this (in conjunction with other &lt;code&gt;arguments&lt;/code&gt;, &lt;code&gt;callee&lt;/code&gt;, and &lt;code&gt;caller&lt;/code&gt; issues) make inlining and tail recursion impossible in the general case (you can achieve it in select cases through tracing, etc., but even the best code is suboptimal due to checks that would not otherwise be necessary.) The other major issue is that the recursive call will get a different &lt;code&gt;this&lt;/code&gt; value, e.g.:</source>
          <target state="translated">ただし、これは実際には非常に悪い解決策でした（他の &lt;code&gt;arguments&lt;/code&gt; 、 &lt;code&gt;callee&lt;/code&gt; 、 &lt;code&gt;caller&lt;/code&gt; 問題と組み合わせて）は、一般的なケースでインライン化と末尾再帰を不可能にします（トレースなどを通じて特定のケースで実現できますが、最適なコードは、他の方法では必要のないチェックのために最適ではありません。）他の主要な問題は、再帰呼び出しが異なる &lt;code&gt;this&lt;/code&gt; 値を取得することです。たとえば、次のようになります。</target>
        </trans-unit>
        <trans-unit id="f70a9726f7f1c9df802ece4459bb5ec212f9dbd6" translate="yes" xml:space="preserve">
          <source>However, while the end result is the same, there is one important difference in the process. When using &lt;code&gt;Object.create()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt;, the &lt;code&gt;new.target&lt;/code&gt; operator will point to &lt;code&gt;undefined&lt;/code&gt; within the function used as the constructor, since the &lt;code&gt;new&lt;/code&gt; keyword is not being used to create the object.</source>
          <target state="translated">ただし、最終結果は同じですが、プロセスには1つの重要な違いがあります。 &lt;code&gt;Object.create()&lt;/code&gt; および &lt;code&gt;Function.prototype.apply()&lt;/code&gt; を使用する場合、 &lt;code&gt;new.target&lt;/code&gt; 演算子は、コンストラクタとして使用される関数内で &lt;code&gt;undefined&lt;/code&gt; を指します。これは、オブジェクトの作成に &lt;code&gt;new&lt;/code&gt; キーワードが使用されていないためです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
