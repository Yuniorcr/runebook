<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="0fc7738752a9280dc91c4574c698736df1bc6ba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; method returns a specified element from a &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; メソッドから指定された要素を返し &lt;code&gt;Map&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="335acba5423d5b8363cfc0e4aa72f3f46f1955ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; method returns a specified element from a &lt;code&gt;WeakMap&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; メソッドから指定された要素を返す &lt;code&gt;WeakMap&lt;/code&gt; のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="1a850a6febb572a384a24c7df8e0457cc8614143" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; prototype method of the &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table()&lt;/code&gt;&lt;/a&gt; object retrieves a function reference stored at a given index.</source>
          <target state="translated">&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table()&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; プロトタイプメソッドは、指定されたインデックスに保存されている関数参照を取得します。</target>
        </trans-unit>
        <trans-unit id="b4dde45797ad98c48dade2728b6c12eb8ce92911" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;grow()&lt;/strong&gt;&lt;/code&gt; prototype method of the &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table&lt;/code&gt;&lt;/a&gt; object increases the size of the Table instance by a specified number of elements.</source>
          <target state="translated">&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;&lt;strong&gt;grow()&lt;/strong&gt;&lt;/code&gt; プロトタイプメソッドは、指定された要素数だけTableインスタンスのサイズを増やします。</target>
        </trans-unit>
        <trans-unit id="a6060c6c51098ef6c190fef62001acc66cdb61bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.apply&lt;/strong&gt;&lt;/code&gt; method is a trap for a function call.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.apply&lt;/strong&gt;&lt;/code&gt; 方法は、関数呼び出しのためのトラップです。</target>
        </trans-unit>
        <trans-unit id="ebeba589d24753e676940b4f5b81bb60a417fc4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.construct()&lt;/strong&gt;&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.construct()&lt;/strong&gt;&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子。</target>
        </trans-unit>
        <trans-unit id="041ce7b126e2eb7202c39c6d0b3f33189835e50c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.construct()&lt;/strong&gt;&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself have a &lt;code&gt;[[Construct]]&lt;/code&gt; internal method (i.e. &lt;code&gt;new target&lt;/code&gt; must be valid).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.construct()&lt;/strong&gt;&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子。結果のProxyオブジェクトで新しい操作を有効にするには、プロキシの初期化に使用されるターゲット自体に &lt;code&gt;[[Construct]]&lt;/code&gt; 内部メソッドが必要です（つまり、 &lt;code&gt;new target&lt;/code&gt; が有効でなければなりません）。</target>
        </trans-unit>
        <trans-unit id="3015fd2a9dbf9e98fd839a73112ceb5bfcc5b7d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.defineProperty()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.defineProperty()&lt;/strong&gt;&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4cbf129d9dac36ff391a03a0f966618e51d99e51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.deleteProperty()&lt;/strong&gt;&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.deleteProperty()&lt;/strong&gt;&lt;/code&gt; メソッドでのトラップで&lt;a href=&quot;../../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;演算子。</target>
        </trans-unit>
        <trans-unit id="0abd7c5d4ea92feb3c2b484121d4264aa2c11105" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.get&lt;/strong&gt;&lt;/code&gt; method is a trap for getting a property value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.get&lt;/strong&gt;&lt;/code&gt; の方法は、プロパティ値を取得するための罠です。</target>
        </trans-unit>
        <trans-unit id="59730d676349632026c5dc7ef0f38e06c3002e72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.getOwnPropertyDescriptor()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.getOwnPropertyDescriptor()&lt;/strong&gt;&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="086a09b79cd37f0435c1774d7bfe36c00f745b79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.has&lt;/strong&gt;&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.has&lt;/strong&gt;&lt;/code&gt; の方法はのトラップである&lt;a href=&quot;../../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;オペレータ。</target>
        </trans-unit>
        <trans-unit id="a3cfd683d96a3e006c62de08bb3e8ec5e57e718a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.isExtensible()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.isExtensible()&lt;/strong&gt;&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c5931aef486dd853658845ce2aba9bdfdfdbc229" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.ownKeys()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../reflect/ownkeys&quot;&gt;&lt;code&gt;Reflect.ownKeys()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.ownKeys()&lt;/strong&gt;&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../reflect/ownkeys&quot;&gt; &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d70ff38470c4a982db89266f128fe65328a719fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.preventExtensions()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.preventExtensions()&lt;/strong&gt;&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="17de101f0f93ac7e750b7baf3762c51a200ff581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.set()&lt;/strong&gt;&lt;/code&gt; method is a trap for setting a property value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.set()&lt;/strong&gt;&lt;/code&gt; メソッドは、プロパティ値を設定するためのトラップです。</target>
        </trans-unit>
        <trans-unit id="8f5642471ca7f980d4ea68a1666fcd226e0fb5d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.set&lt;/strong&gt;&lt;/code&gt; method is a trap for setting property value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.set&lt;/strong&gt;&lt;/code&gt; の方法は、プロパティ値を設定するための罠です。</target>
        </trans-unit>
        <trans-unit id="bf9458764a8481b8a0b61026ed10df0c6f1f5f21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.setPrototypeOf&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.setPrototypeOf&lt;/strong&gt;&lt;/code&gt; の方法でのトラップである&lt;a href=&quot;../../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5a578a8c370f8fc817eaca6611c1b03d11a3e391" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether an element with the specified key exists in the &lt;code&gt;WeakMap&lt;/code&gt; object or not.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定されたキーを持つ要素が中に存在するかどうかを示すブール値を返し &lt;code&gt;WeakMap&lt;/code&gt; のオブジェクトかどうかを。</target>
        </trans-unit>
        <trans-unit id="f9c19455950535277cbe042b5abeab5be486d60a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether an element with the specified key exists or not.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定されたキーを持つ要素が存在するか否かを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="bf4ee0492be4bf2ce00eecf3e84378a5d4ab8581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether an element with the specified value exists in a &lt;code&gt;Set&lt;/code&gt; object or not.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された値を持つ要素が中に存在するかどうかを示すブール値を返し &lt;code&gt;Set&lt;/code&gt; オブジェクトまたはありません。</target>
        </trans-unit>
        <trans-unit id="28dfec19ee609ef661e6aa5747bfddf893d3ff44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether an object exists in a &lt;code&gt;WeakSet&lt;/code&gt; or not.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; メソッドは、オブジェクトが存在するかどうかを示すブール値を返し &lt;code&gt;WeakSet&lt;/code&gt; かどうかを。</target>
        </trans-unit>
        <trans-unit id="d7197f999777ef023242bba71e8f3dd708e89e15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;hasOwnProperty()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;hasOwnProperty()&lt;/strong&gt;&lt;/code&gt; メソッドは、オブジェクトが（それを継承とは対照的に）それ自体のプロパティとして指定された性質を持っているかどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="7726c9f5fd4376043b25b1884a2d1ede79735ece" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;includes()&lt;/strong&gt;&lt;/code&gt; method determines whether a typed array includes a certain element, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate. This method has the same algorithm as &lt;a href=&quot;../array/includes&quot;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;includes()&lt;/strong&gt;&lt;/code&gt; メソッドは、型指定された配列が戻り、特定の要素を含むかどうかを決定する &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 適宜。このメソッドには、&lt;a href=&quot;../array/includes&quot;&gt; &lt;code&gt;Array.prototype.includes()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="b653c9e14a9e2e753822079edd73d5fee226066c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;includes()&lt;/strong&gt;&lt;/code&gt; method determines whether an array includes a certain element, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;includes()&lt;/strong&gt;&lt;/code&gt; メソッドは、配列を返す、特定の要素を含むかどうかを決定する &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 適宜。</target>
        </trans-unit>
        <trans-unit id="646c7e2b71ac8fde9d550f86accc5ba525a2b6d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;indexOf()&lt;/strong&gt;&lt;/code&gt; method returns the first index at which a given element can be found in the array, or -1 if it is not present.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;indexOf()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された要素が配列中に見出さ、または可能な-1が存在しない場合は、最初のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="a3eea6400a846378f17241be6f13fd2cb91aeb1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;indexOf()&lt;/strong&gt;&lt;/code&gt; method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as &lt;a href=&quot;../array/indexof&quot;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;indexOf()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された要素は、型指定された配列に見出される、または可能な-1が存在しない場合は、最初のインデックスを返します。このメソッドには、&lt;a href=&quot;../array/indexof&quot;&gt; &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="1309d2331fb1e69c62dda54ace47f79d74d38ab7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;isNaN()&lt;/strong&gt;&lt;/code&gt; function determines whether a value is &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or not. Note: coercion inside the &lt;code&gt;isNaN&lt;/code&gt; function has &lt;a href=&quot;#Description&quot;&gt;interesting&lt;/a&gt; rules; you may alternatively want to use &lt;a href=&quot;number/isnan&quot;&gt;&lt;code&gt;Number.isNaN()&lt;/code&gt;&lt;/a&gt;, as defined in ECMAScript 2015.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;isNaN()&lt;/strong&gt;&lt;/code&gt; 関数は、値があるか否かを判断する&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;か。注： &lt;code&gt;isNaN&lt;/code&gt; 関数内の強制には&lt;a href=&quot;#Description&quot;&gt;興味深い&lt;/a&gt;ルールがあります。あるいは、ECMAScript 2015で定義されている&lt;a href=&quot;number/isnan&quot;&gt; &lt;code&gt;Number.isNaN()&lt;/code&gt; &lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="c16094e78a9c4d4dd4c3193df98071909c221758" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;isPrototypeOf()&lt;/strong&gt;&lt;/code&gt; method checks if an object exists in another object's prototype chain.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;isPrototypeOf()&lt;/strong&gt;&lt;/code&gt; メソッドをチェックオブジェクトが別のオブジェクトのプロトタイプチェーン内に存在する場合。</target>
        </trans-unit>
        <trans-unit id="c84931dfa3aedb1e375bec4968382252b89985d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/code&gt; method creates and returns a new string by concatenating all of the elements in an array (or an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;array-like object&lt;/a&gt;), separated by commas or a specified separator string.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/code&gt; メソッドを作成して返す配列内のすべての要素を連結して新しい文字列を（または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;アレイ状の物体&lt;/a&gt;）、カンマまたは指定された区切り文字で区切られました。</target>
        </trans-unit>
        <trans-unit id="e89ed642d493aa56fa98b2de88ff611ae7b3de06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/code&gt; method joins all elements of an array into a string. This method has the same algorithm as &lt;a href=&quot;../array/join&quot;&gt;&lt;code&gt;Array.prototype.join()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/code&gt; メソッドは、文字列に、アレイのすべての要素を結合します。このメソッドには、&lt;a href=&quot;../array/join&quot;&gt; &lt;code&gt;Array.prototype.join()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="9a26f632b30ce857bf418ecdc5f8c983697f974a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;Iterator&lt;/a&gt;&lt;/code&gt; object that contains the keys for each element in the &lt;code&gt;Map&lt;/code&gt; object in insertion order.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;/code&gt; メソッドの戻り新しい &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;Iterator&lt;/a&gt;&lt;/code&gt; の各要素のキー含むオブジェクト &lt;code&gt;Map&lt;/code&gt; 挿入順にオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="76bb159eb6b9791e097386dc324574864b1432bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;&lt;strong&gt;Array Iterator&lt;/strong&gt;&lt;/code&gt; object that contains the keys for each index in the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;/code&gt; メソッドの戻り新しい &lt;code&gt;&lt;strong&gt;Array Iterator&lt;/strong&gt;&lt;/code&gt; アレイ内の各インデックスのキーを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6c612445ee05f073466d078f3ce15332e66c2bd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;lastIndexOf()&lt;/strong&gt;&lt;/code&gt; method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at &lt;code&gt;fromIndex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;lastIndexOf()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された要素が配列中に見出さ、または可能な-1が存在しない場合、最後のインデックスを返します。配列は &lt;code&gt;fromIndex&lt;/code&gt; から逆方向に検索されます。</target>
        </trans-unit>
        <trans-unit id="aea8805086569e0d38da2523961661819a548ac9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;lastIndexOf()&lt;/strong&gt;&lt;/code&gt; method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at &lt;code&gt;fromIndex&lt;/code&gt;. This method has the same algorithm as &lt;a href=&quot;../array/lastindexof&quot;&gt;&lt;code&gt;Array.prototype.lastIndexOf()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;lastIndexOf()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された要素は、型指定された配列に見出される、または可能な-1が存在しない場合、最後のインデックスを返します。型指定された配列は、 &lt;code&gt;fromIndex&lt;/code&gt; から逆方向に検索されます。このメソッドには、&lt;a href=&quot;../array/lastindexof&quot;&gt; &lt;code&gt;Array.prototype.lastIndexOf()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="7f5e8c3de9785ec846493bfb4607e68760653c61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; property indicates the number of Parameters expected by the function.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; プロパティは、関数が期待パラメータの数を示します。</target>
        </trans-unit>
        <trans-unit id="5e614ccc31e70daa3fef6a16bf753ec57010d8d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; property of an object which is an instance of type &lt;code&gt;Array&lt;/code&gt; sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.</source>
          <target state="translated">タイプ &lt;code&gt;Array&lt;/code&gt; のインスタンスであるオブジェクトの &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; プロパティは、その配列の要素数を設定または返します。値は、符号なしの32ビット整数であり、常に数値的に配列の最高のインデックスよりも大きくなります。</target>
        </trans-unit>
        <trans-unit id="e016f1881f16e6920b357efdcbe478a254dc61c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; prototype property of the &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table&lt;/code&gt;&lt;/a&gt; object returns the length of the table, i.e. the number of elements in the table.</source>
          <target state="translated">&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; プロトタイププロパティは、テーブルの長さ、つまりテーブル内の要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="eb9668d69effc5305fd7aab7ea6517a13800409a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/code&gt; method creates a new array with the results of calling a provided function on every element in the calling array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/code&gt; メソッドを呼び出し、配列内のすべての要素上に設けられた関数を呼び出しの結果と新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="614bd51d4e9c7402f88af18d7b6e21940a9250b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/code&gt; method creates a new typed array with the results of calling a provided function on every element in this typed array. This method has the same algorithm as &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/code&gt; メソッドは、この型付き配列のすべての要素に与えられた関数を呼び出した結果、新たな型指定された配列を作成します。このメソッドには、&lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="18a4b2bf257ace2f33834f2cc8b05b61604a44f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;message&lt;/strong&gt;&lt;/code&gt; property is a human-readable description of the error.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;message&lt;/strong&gt;&lt;/code&gt; プロパティには、エラーの人間が読める記述です。</target>
        </trans-unit>
        <trans-unit id="0ad72babece34d72a19caabe0e4a753ecf029c1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/code&gt; property represents a name for the type of error. The initial value is &quot;Error&quot;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/code&gt; プロパティには、エラーのタイプの名前を表します。初期値は「エラー」です。</target>
        </trans-unit>
        <trans-unit id="ce94cb770544dfa60920742d4f5dac77d505498f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;next&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;()&lt;/code&gt; method returns an object with two properties &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. You can also provide a parameter to the &lt;code&gt;next&lt;/code&gt; method to send a value to the generator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;next&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;()&lt;/code&gt; メソッドは、2つのプロパティを持つオブジェクトを返し &lt;code&gt;done&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; 。 &lt;code&gt;next&lt;/code&gt; メソッドにパラメーターを提供して、ジェネレーターに値を送信することもできます。</target>
        </trans-unit>
        <trans-unit id="21999aa5050544f95a6e76a702a3f445bf0f43af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;parseFloat()&lt;/strong&gt;&lt;/code&gt; function parses an argument and returns a floating point number.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;parseFloat()&lt;/strong&gt;&lt;/code&gt; 関数は、引数を解析し、浮動小数点数を返します。</target>
        </trans-unit>
        <trans-unit id="3dfd6913e9b4442f40861ed9599bb5d91ebf4080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;parseInt()&lt;/strong&gt;&lt;/code&gt; function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;parseInt()&lt;/strong&gt;&lt;/code&gt; 関数は、文字列引数を解析し、指定された基数（数学数字システムにおける塩基）の整数を返します。</target>
        </trans-unit>
        <trans-unit id="c90d1c205bf439b189bbf3642a6a17b570f4f81e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;pop()&lt;/strong&gt;&lt;/code&gt; method removes the &lt;strong&gt;last&lt;/strong&gt; element from an array and returns that element. This method changes the length of the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;pop()&lt;/strong&gt;&lt;/code&gt; メソッドは、削除&lt;strong&gt;最後の&lt;/strong&gt;アレイと素子リターンから要素。このメソッドは、配列の長さを変更します。</target>
        </trans-unit>
        <trans-unit id="6e1c6dc676b89297060531361010c44a7f2dec4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;propertyIsEnumerable()&lt;/strong&gt;&lt;/code&gt; method returns a Boolean indicating whether the specified property is enumerable.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;propertyIsEnumerable()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定されたプロパティが列挙されているかどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="f23900d5c68bc22503398f9c178ca4960a1a1092" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;push()&lt;/strong&gt;&lt;/code&gt; method adds one or more elements to the end of an array and returns the new length of the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;push()&lt;/strong&gt;&lt;/code&gt; メソッドは、配列の端部に一つ以上の要素を追加し、配列の新しい長さを返します。</target>
        </trans-unit>
        <trans-unit id="476cae893735b439422b4179cf3399831bed3f65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/code&gt; method applies a function against an accumulator and each value of the typed array (from left-to-right) has to reduce it to a single value. This method has the same algorithm as &lt;a href=&quot;../array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/code&gt; メソッドは、アキュムレータに対して関数を適用し、（左から右への）型指定された配列の各値は、単一の値に低減しなければなりません。このメソッドには、&lt;a href=&quot;../array/reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあります。&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="034f4b7413c524fd0d47e690c5d412bccf3ddaf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/code&gt; method executes a &lt;strong&gt;reducer&lt;/strong&gt; function (that you provide) on each member of the array resulting in a single output value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/code&gt; メソッドが実行さ&lt;strong&gt;減速&lt;/strong&gt;単一の出力値が得られるアレイの各メンバーに関数を（あなたが提供します）。</target>
        </trans-unit>
        <trans-unit id="5229cb6830ae1ec04570147dbf431d6a0cff0861" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/code&gt; method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/code&gt; メソッドは、アキュムレータおよび単一の値に低減する（右から左への）アレイの各値に対して関数を適用します。</target>
        </trans-unit>
        <trans-unit id="9ea7d2d504b07bbb124916fce9aa44e2ec6dedb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/code&gt; method applies a function against an accumulator and each value of the typed array (from right-to-left) has to reduce it to a single value. This method has the same algorithm as &lt;a href=&quot;../array/reduceright&quot;&gt;&lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/code&gt; メソッドは、アキュムレータに対して関数を適用し、（右から左から）型指定された配列の各値は、単一の値に低減しなければなりません。このメソッドには、&lt;a href=&quot;../array/reduceright&quot;&gt; &lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあります。&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="a790ac6e1294383154bc7b2978538f5eb94d6274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;return()&lt;/strong&gt;&lt;/code&gt; method returns the given value and finishes the generator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;return()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された値を返し、発電機を終了します。</target>
        </trans-unit>
        <trans-unit id="3c536cd88c53a52914f16d8cfa3831411cf0210d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/code&gt; method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as &lt;a href=&quot;../array/reverse&quot;&gt;&lt;code&gt;Array.prototype.reverse()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/code&gt; メソッドは、代わりに型指定された配列を反転させます。最初に入力された配列要素が最後になり、最後が最初になります。このメソッドには、&lt;a href=&quot;../array/reverse&quot;&gt; &lt;code&gt;Array.prototype.reverse()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="a1e9a75dd821f1661fdaa1d44865d4df67bf3184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/code&gt; method reverses an array &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;in place&lt;/a&gt;&lt;/em&gt;. The first array element becomes the last, and the last array element becomes the first.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/code&gt; メソッドは、配列逆転&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;場所での&lt;/a&gt;&lt;/em&gt;。最初の配列要素が最後になり、最後の配列要素が最初になります。</target>
        </trans-unit>
        <trans-unit id="c5867b40bdd16a340cfc615fb40e0bbd1a484ded" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; method adds a new element with a specified &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; to a &lt;code&gt;WeakMap&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定されたと新しい要素追加 &lt;code&gt;key&lt;/code&gt; および &lt;code&gt;value&lt;/code&gt; に &lt;code&gt;WeakMap&lt;/code&gt; のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="9f3a35790c7d2a8ee211d6d1ce612f997e937471" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; method adds or updates an element with a specified &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; to a &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された要素を追加または更新 &lt;code&gt;key&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; に &lt;code&gt;Map&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ea2e9a9480a1e9deaae663450236dfc2267ef78e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; prototype method of the &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table&lt;/code&gt;&lt;/a&gt; object mutates a reference stored at a given index to a different value.</source>
          <target state="translated">&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; プロトタイプメソッドは、特定のインデックスに格納されている参照を別の値に変更します。</target>
        </trans-unit>
        <trans-unit id="229299e7a3f94fb998193be6f7ee48453e822fd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;shift()&lt;/strong&gt;&lt;/code&gt; method removes the &lt;strong&gt;first&lt;/strong&gt; element from an array and returns that removed element. This method changes the length of the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;shift()&lt;/strong&gt;&lt;/code&gt; メソッドは削除&lt;strong&gt;最初&lt;/strong&gt;アレイ戻る除去要素から要素。このメソッドは、配列の長さを変更します。</target>
        </trans-unit>
        <trans-unit id="313011d9b2b52af018ebe510e386c7823ed7c020" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/code&gt; accessor property returns the number of elements in a &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/code&gt; プロパティアクセサは内の要素の数を返し&lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="0385cfa03ce049ee131132676b239e05083bd039" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/code&gt; accessor property returns the number of elements in a &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/code&gt; アクセッサ性リターン内の要素の数&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="2ef31edf22c840448a59a649b73d48c84f89ef3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;ArrayBuffer&lt;/code&gt; whose contents are a copy of this &lt;code&gt;ArrayBuffer&lt;/code&gt;'s bytes from &lt;code&gt;begin&lt;/code&gt;, inclusive, up to &lt;code&gt;end&lt;/code&gt;, exclusive.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; メソッドは、新しい返し &lt;code&gt;ArrayBuffer&lt;/code&gt; その内容は本のコピーです &lt;code&gt;ArrayBuffer&lt;/code&gt; さんからバイトを &lt;code&gt;begin&lt;/code&gt; 、包括的、最大で &lt;code&gt;end&lt;/code&gt; 、排他的に。</target>
        </trans-unit>
        <trans-unit id="2e7095197fe13f285adf5209123fd1abb0c9fa52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; method returns a shallow copy of a portion of a typed array into a new typed array object. This method has the same algorithm as &lt;a href=&quot;../array/slice&quot;&gt;&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; メソッドは、新しい型指定された配列オブジェクトに入力されたアレイの一部の浅いコピーを返します。このメソッドには、&lt;a href=&quot;../array/slice&quot;&gt; &lt;code&gt;Array.prototype.slice()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="43cc073d057693a01ec495da4dbef5af38eea0e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; method returns a shallow copy of a portion of an array into a new array object selected from &lt;code&gt;begin&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; (&lt;code&gt;end&lt;/code&gt; not included). The original array will not be modified.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; メソッドは、から選択された新しい配列オブジェクトへの配列の部分の浅いコピーを返し &lt;code&gt;begin&lt;/code&gt; まで &lt;code&gt;end&lt;/code&gt; （ &lt;code&gt;end&lt;/code&gt; 含まれていません）。元の配列は変更されません。</target>
        </trans-unit>
        <trans-unit id="e826557cdea9d5add121c371e2c870aa1194038b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/code&gt; method tests whether at least one element in the array passes the test implemented by the provided function.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/code&gt; メソッドは、配列内の少なくとも一つの要素が提供される関数によって実装試験に合格するかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="6a14810ab931e34a4371074da58f2bae48868a03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/code&gt; method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as &lt;a href=&quot;../array/some&quot;&gt;&lt;code&gt;Array.prototype.some()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/code&gt; 型付けされた配列内のいくつかの要素が設けられた関数によって実装試験に合格するかどうかの方法をテスト。このメソッドには、&lt;a href=&quot;../array/some&quot;&gt; &lt;code&gt;Array.prototype.some()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="401523bcf7fcc84881c476c7d9734caaf27b63b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/code&gt; method sorts the elements of a typed array numerically &lt;em&gt;in place&lt;/em&gt; and returns the typed array. This method has the same algorithm as &lt;a href=&quot;../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt;, except that sorts the values numerically instead of as strings&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/code&gt; メソッドは、数値的に型指定された配列の要素をソートする&lt;em&gt;代わりに、&lt;/em&gt;および型付き配列を返します。このメソッドのアルゴリズムは&lt;a href=&quot;../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt;と同じですが、文字列ではなく数値で値をソートします&lt;em&gt;。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="d056cc137d408763936ae0e6e9c71d0fa1728ac2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/code&gt; method sorts the elements of an array &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;in place&lt;/a&gt;&lt;/em&gt; and returns the array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/code&gt; メソッドは、配列の要素をソートする&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;代わりに&lt;/a&gt;&lt;/em&gt;、アレイを返します。デフォルトの並べ替え順序は、要素を文字列に変換してから、UTF-16コード単位の値のシーケンスを比較して構築されます。</target>
        </trans-unit>
        <trans-unit id="de56aea8fa54670e386932ea709cfe1cf1e1798d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/code&gt; keyword defines a static method for a class. Static methods aren't called on instances of the class. Instead, they're called on the class itself. These are often utility functions, such as functions to create or clone objects.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/code&gt; キーワードは、クラスの静的メソッドを定義します。静的メソッドは、クラスのインスタンスでは呼び出されません。代わりに、クラス自体で呼び出されます。これらは、多くの場合、オブジェクトを作成または複製する関数などのユーティリティ関数です。</target>
        </trans-unit>
        <trans-unit id="97131a8fde25db2419457b98595cec0e63b8e38a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;then()&lt;/strong&gt;&lt;/code&gt; method returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;. It takes up to two arguments: callback functions for the success and failure cases of the &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;then()&lt;/strong&gt;&lt;/code&gt; メソッドを返し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;。成功と失敗例のためのコールバック関数：これは2つの引数を取り &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32b163d7592cd21a3cef3e0bbec84026237c2cbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;throw()&lt;/strong&gt;&lt;/code&gt; method resumes the execution of a generator by throwing an error into it and returns an object with two properties &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;throw()&lt;/strong&gt;&lt;/code&gt; メソッドは、その中にエラーをスローすることにより、発電機の実行を再開し、二つの特性を持つオブジェクトを返し &lt;code&gt;done&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a27864056b05cb6d65d10b6fd4fc69ea0bfb69d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the elements of the array. The elements are converted to Strings using their &lt;code&gt;toLocaleString&lt;/code&gt; methods and these Strings are separated by a locale-specific String (such as a comma &amp;ldquo;,&amp;rdquo;).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; メソッドは、配列の要素を表す文字列を返します。要素は &lt;code&gt;toLocaleString&lt;/code&gt; メソッドを使用して文字列に変換され、これらの文字列はロケール固有の文字列（カンマ「、」など）で区切られます。</target>
        </trans-unit>
        <trans-unit id="b605bc8e35e3f59ed456cdbc1085ec83b2b02f6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the elements of the typed array. The elements are converted to strings and are separated by a locale-specific string (such as a comma &amp;ldquo;,&amp;rdquo;). This method has the same algorithm as &lt;a href=&quot;../array/tolocalestring&quot;&gt;&lt;code&gt;Array.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt; and, as the typed array elements are numbers, the same algorithm as &lt;a href=&quot;../number/tolocalestring&quot;&gt;&lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt; applies for each element. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; メソッドは、型指定された配列の要素を表す文字列を返します。要素は文字列に変換され、ロケール固有の文字列（コンマ「、」など）で区切られます。このメソッドには&lt;a href=&quot;../array/tolocalestring&quot;&gt; &lt;code&gt;Array.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり、型指定された配列要素は数値であるため、各要素には&lt;a href=&quot;../number/tolocalestring&quot;&gt; &lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムが適用されます。&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="7dfd5ee925b0c99d73ec512ba8fa1ebd89f29c09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; メソッドは、オブジェクトを表す文字列を返します。このメソッドは、ロケール固有の目的で派生オブジェクトによってオーバーライドされることを意図しています。</target>
        </trans-unit>
        <trans-unit id="91b928eb50588710e2a4597c5783c62b17ddd758" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; メソッドは、オブジェクトを表す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="6e85c2a1af60ac5b65d1d94bc0fe001f9d669432" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the source code of the function.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; メソッドは、関数のソースコードを表す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="022795b56bb8cf198957356a9dac9f4f2481d4bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された文字列表現を返し&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="7911e7b2a10371eaf4073ef2535ba2537d07e540" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された文字列表現を返し&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="7b8623479f106befa5e18eb45cb1059e5f32bcb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified Boolean object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定されたBooleanオブジェクトを表す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="5a04aaef31f20bb3cf4bdfb78b3cfe2b84ce61e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified array and its elements.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された配列とその要素を表す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="192703e31b3b7b413086f3a38c9cc3705e7c710a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified array and its elements. This method has the same algorithm as &lt;a href=&quot;../array/tostring&quot;&gt;&lt;code&gt;Array.prototype.toString()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; メソッドは、指定された配列とその要素を表す文字列を返します。このメソッドには、&lt;a href=&quot;../array/tostring&quot;&gt; &lt;code&gt;Array.prototype.toString()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムがあり&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt;は、ここで&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="d267261388589c501414274d6e9126947d38aba2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;uneval()&lt;/strong&gt;&lt;/code&gt; function creates a string representation of the source code of an Object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;uneval()&lt;/strong&gt;&lt;/code&gt; 関数は、オブジェクトのソースコードの文字列表現を作成します。</target>
        </trans-unit>
        <trans-unit id="b926e52c01652669c02278301d217c157917d6e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;unshift()&lt;/strong&gt;&lt;/code&gt; method adds one or more elements to the beginning of an array and returns the new length of the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;unshift()&lt;/strong&gt;&lt;/code&gt; メソッドは、配列の先頭への1つのまたは複数の要素を追加し、配列の新しい長さを返します。</target>
        </trans-unit>
        <trans-unit id="499de83f7f41f334be396bc8f3ea1dfea79d7d14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;unwatch()&lt;/strong&gt;&lt;/code&gt; method removes a watchpoint set with the &lt;a href=&quot;watch&quot;&gt;&lt;code&gt;watch()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;unwatch()&lt;/strong&gt;&lt;/code&gt; メソッドは、とウォッチポイントのセット削除&lt;a href=&quot;watch&quot;&gt; &lt;code&gt;watch()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="7e217ffdbfd7b09bd5b6b41d867eb4de145af8f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;valueOf()&lt;/strong&gt;&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;valueOf()&lt;/strong&gt;&lt;/code&gt; メソッドは、プリミティブ値返す&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ad7e757caa0d53a4a93724609133ec5424859830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;valueOf()&lt;/strong&gt;&lt;/code&gt; method returns the primitive value of a Symbol object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;valueOf()&lt;/strong&gt;&lt;/code&gt; メソッドは、シンボルオブジェクトのプリミティブ値を返します。</target>
        </trans-unit>
        <trans-unit id="c7ac2ff9d04658e4dfa1c74a21f139c1399cac29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;Iterator&lt;/code&gt; object that contains the values for each element in the &lt;code&gt;Set&lt;/code&gt; object in insertion order.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/code&gt; メソッドの戻り新しい &lt;code&gt;Iterator&lt;/code&gt; の各要素の値を含むオブジェクト &lt;code&gt;Set&lt;/code&gt; 挿入のためにオブジェクト。</target>
        </trans-unit>
        <trans-unit id="920978b0337a6e007b81c3f6fce745458e110e65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;Iterator&lt;/a&gt;&lt;/strong&gt; object that contains the values for each element in the &lt;code&gt;Map&lt;/code&gt; object in insertion order.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/code&gt; メソッドの戻り新しい&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;イテレータ&lt;/a&gt;&lt;/strong&gt;の各要素の値を含むオブジェクト &lt;code&gt;Map&lt;/code&gt; 挿入順にオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6ea39c43c18a974ed813a6094426dc4acb932dc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;watch()&lt;/strong&gt;&lt;/code&gt; method watches for a property to be assigned a value and runs a function when that occurs.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;watch()&lt;/strong&gt;&lt;/code&gt; メソッドは、値が割り当てられるプロパティを監視し、それが発生したときに関数を実行します。</target>
        </trans-unit>
        <trans-unit id="283c12603649b3462865df7f0024166c551ecdb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@@isConcatSpreadable&lt;/code&gt; symbol (&lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt;) can be defined as an own or inherited property and its value is a boolean. It can control behavior for arrays and array-like objects:</source>
          <target state="translated">&lt;code&gt;@@isConcatSpreadable&lt;/code&gt; シンボル（ &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; は）自身、または継承されたプロパティとして定義することができ、その値はブール値です。配列および配列のようなオブジェクトの動作を制御できます。</target>
        </trans-unit>
        <trans-unit id="bc65c6de076d42ba499770b56887d3eb47ca601c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@@unscopables&lt;/code&gt; symbol (&lt;code&gt;Symbol.unscopables&lt;/code&gt;) can be defined on any object to exclude property names from being exposed as lexical variables in with &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; environment bindings. Note that if using &lt;a href=&quot;../../strict_mode&quot;&gt;Strict mode&lt;/a&gt;, &lt;code&gt;with&lt;/code&gt; statements are not available and will likely also not need this symbol.</source>
          <target state="translated">&lt;code&gt;@@unscopables&lt;/code&gt; 記号（ &lt;code&gt;Symbol.unscopables&lt;/code&gt; は）としてレキシカル変数として公開されてからプロパティ名を除外するために任意のオブジェクトに定義することができます &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 環境のバインディング。&lt;a href=&quot;../../strict_mode&quot;&gt;厳格モード&lt;/a&gt;を使用している場合、 &lt;code&gt;with&lt;/code&gt; ステートメントは使用できず、この記号も不要になる可能性が高いことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d440604706f8d64b5747fd6b1564ef1153563ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Array&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">値が1 の &lt;code&gt;Array&lt;/code&gt; コンストラクターの長さプロパティ。</target>
        </trans-unit>
        <trans-unit id="f0b8901e6f9fc11f606262ccc7196ea062692d5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer.prototype&lt;/code&gt; のプロパティは、プロトタイプを表し&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="16e25d8346c656e25fff7c636bb66557bf0a41ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer.transfer()&lt;/code&gt; method allows you to grow and detach &lt;code&gt;ArrayBuffer&lt;/code&gt; objects. The ability to grow an &lt;code&gt;ArrayBuffer&lt;/code&gt; without copying has the advantage of being much faster for large buffers (similar to realloc). The ability to detach an &lt;code&gt;ArrayBuffer&lt;/code&gt; gives the developer explicit control over when the underlying memory is released. This avoids having to drop all references and wait for garbage collection.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer.transfer()&lt;/code&gt; メソッドは、あなたが成長することを可能とデタッチ &lt;code&gt;ArrayBuffer&lt;/code&gt; はオブジェクト。成長する能力 &lt;code&gt;ArrayBuffer&lt;/code&gt; をコピーせずには（reallocのと同様に）大きなバッファのためにはるかに高速であるという利点を有しています。 &lt;code&gt;ArrayBuffer&lt;/code&gt; をデタッチする機能により、開発者は基礎となるメモリが解放される時期を明示的に制御できます。これにより、すべての参照を削除してガベージコレクションを待つ必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="c7798863e6e21e4386b76ed95ddae500d73c0f05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer&lt;/code&gt; constructor creates a new &lt;code&gt;ArrayBuffer&lt;/code&gt; of the given length in bytes.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; のコンストラクタは、新規作成 &lt;code&gt;ArrayBuffer&lt;/code&gt; バイト単位で指定された長さのを。</target>
        </trans-unit>
        <trans-unit id="7ef2a45ac041790c4ea1d3aefd4331e7987f9343" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">値が1 の &lt;code&gt;ArrayBuffer&lt;/code&gt; コンストラクターの長さプロパティ。</target>
        </trans-unit>
        <trans-unit id="6b1774c4b4c02e44b8e0aac74afed99897b9b23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer&lt;/code&gt; object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an &lt;code&gt;ArrayBuffer&lt;/code&gt;; instead, you create one of the &lt;a href=&quot;typedarray&quot;&gt;typed array objects&lt;/a&gt; or a &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; のオブジェクトは、一般的な、固定長の生のバイナリデータバッファを表すために使用されます。 &lt;code&gt;ArrayBuffer&lt;/code&gt; の内容を直接操作することはできません。代わりに、&lt;a href=&quot;typedarray&quot;&gt;型付き配列オブジェクトの&lt;/a&gt; 1つまたは特定の形式でバッファーを表す&lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;オブジェクトを作成し、それを使用してバッファーの内容を読み書きします。</target>
        </trans-unit>
        <trans-unit id="dd55341d100e7a3a053ee01170efee3a7d53d666" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AsyncFunction&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">値が1 の &lt;code&gt;AsyncFunction&lt;/code&gt; コンストラクターの長さプロパティ。</target>
        </trans-unit>
        <trans-unit id="fa46dc694c81367a99ea8f930dd75cbd6894fcbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Atomics&lt;/code&gt; object provides atomic operations as static methods. They are used with &lt;a href=&quot;sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;Atomics&lt;/code&gt; オブジェクトは静的メソッドとしてアトミック操作を提供します。それらは&lt;a href=&quot;sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;オブジェクトで使用されます。</target>
        </trans-unit>
        <trans-unit id="a7e596b718f486754c0b60ce4ad8e194715210d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Boolean.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Boolean.prototype&lt;/code&gt; のプロパティは、プロトタイプを表す&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;コンストラクタを。</target>
        </trans-unit>
        <trans-unit id="f808eb0c2990139c56c9c9646eb837d890e99678" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Boolean&lt;/code&gt; object is an object wrapper for a boolean value.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; オブジェクトは、ブール値のオブジェクトラッパーです。</target>
        </trans-unit>
        <trans-unit id="eb4fe7936e991cf8cac6bfe1ff9a3583f860269a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataView&lt;/code&gt; view provides a low-level interface for reading and writing multiple number types in a binary &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;, without having to care about the platform's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;endianness&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DataView&lt;/code&gt; ビューは、バイナリで複数の番号タイプを読み書きするための低レベルのインタフェースを提供&lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; を&lt;/a&gt;プラットフォームのを気にすることなく、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;エンディアン&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff166af089f3634c010f854cade55b13339404e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date.UTC()&lt;/code&gt; method accepts the same parameters as the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.</source>
          <target state="translated">&lt;code&gt;Date.UTC()&lt;/code&gt; メソッドは、同じパラメータを受け入れる&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;コンストラクタを、しかし、UTCとして扱います。1970年1月1日00:00:00 UTC以降のミリ秒数を返します。</target>
        </trans-unit>
        <trans-unit id="94ea236eb60b2a87910dba439ce76e913ed81428" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date.now()&lt;/code&gt; method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.</source>
          <target state="translated">&lt;code&gt;Date.now()&lt;/code&gt; メソッドは、ミリ秒単位の数は1970年1月1日00:00:00から経過返します。</target>
        </trans-unit>
        <trans-unit id="2fd70be910414d05682135739f98ad747175718f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date.parse()&lt;/code&gt; method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or &lt;code&gt;NaN&lt;/code&gt; if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31).</source>
          <target state="translated">&lt;code&gt;Date.parse()&lt;/code&gt; メソッドは、日付の文字列表現を解析し、1970年1月1日からのミリ秒数を返し00:00:00 UTCまたは &lt;code&gt;NaN&lt;/code&gt; の文字列が認識されない場合、または、いくつかの場合には、不正の日付値を含みます（例：2015-02-31）。</target>
        </trans-unit>
        <trans-unit id="64bc06f8e96147763877ef296f66c5ad039e983e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Date.prototype&lt;/code&gt; のプロパティは、プロトタイプを表す&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;コンストラクタを。</target>
        </trans-unit>
        <trans-unit id="ef55f178e7909f6ce70b17d6b7c9f73f26fc56c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EPSILON&lt;/code&gt; property has a value of approximately &lt;code&gt;2.2204460492503130808472633361816E-16&lt;/code&gt;, or &lt;code&gt;2&lt;sup&gt;-52&lt;/sup&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EPSILON&lt;/code&gt; プロパティは約の値を有する &lt;code&gt;2.2204460492503130808472633361816E-16&lt;/code&gt; 、又は &lt;code&gt;2&lt;sup&gt;-52&lt;/sup&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7931f45154020c0f6a612370bd2020e49a7038ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Error&lt;/code&gt; constructor creates an error object. Instances of &lt;code&gt;Error&lt;/code&gt; objects are thrown when runtime errors occur. The &lt;code&gt;Error&lt;/code&gt; object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; コンストラクタは、エラーオブジェクトを作成します。ランタイムエラーが発生すると、 &lt;code&gt;Error&lt;/code&gt; オブジェクトのインスタンスがスローされます。 &lt;code&gt;Error&lt;/code&gt; オブジェクトは、ユーザ定義の例外のベースオブジェクトとして使用することができます。標準の組み込みエラータイプについては、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="af6eaa4eee0613c64cc6fc28b3637cc80c1af151" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EvalError&lt;/code&gt; object indicates an error regarding the global &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; function. This exception is not thrown by JavaScript anymore, however the &lt;code&gt;EvalError&lt;/code&gt; object remains for compatibility.</source>
          <target state="translated">&lt;code&gt;EvalError&lt;/code&gt; のオブジェクトは、グローバルに関するエラーを示している&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt;関数を。この例外はJavaScriptによってスローされなくなりましたが、 &lt;code&gt;EvalError&lt;/code&gt; オブジェクトは互換性のために残されています。</target>
        </trans-unit>
        <trans-unit id="ed981ea7fa087278317dd34d4188d2ef63c76871" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float32Array&lt;/code&gt; typed array represents an array of 32-bit floating point numbers (corresponding to the C &lt;code&gt;float&lt;/code&gt; data type) in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Float32Array&lt;/code&gt; は、アレイが（C用に対応する32ビットの浮動小数点数のアレイ表す型付け &lt;code&gt;float&lt;/code&gt; プラットフォームバイト順にデータタイプ）。バイトオーダーの制御が必要な場合は、代わりに&lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; を&lt;/a&gt;使用してください。内容は &lt;code&gt;0&lt;/code&gt; に初期化されます。いったん確立されると、オブジェクトのメソッドを使用するか、標準の配列インデックス構文を使用して（つまり、ブラケット表記を使用して）、配列内の要素を参照できます。</target>
        </trans-unit>
        <trans-unit id="d6af88321151d21a75dde1d9456dd53c65f47509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float64Array&lt;/code&gt; typed array represents an array of 64-bit floating point numbers (corresponding to the C &lt;code&gt;double&lt;/code&gt; data type) in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Float64Array&lt;/code&gt; アレイは64ビット浮動小数点数のアレイ（Cに対応表す型付き &lt;code&gt;double&lt;/code&gt; プラットフォームのバイト順のデータ型）。バイトオーダーの制御が必要な場合は、代わりに&lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; を&lt;/a&gt;使用してください。内容は &lt;code&gt;0&lt;/code&gt; に初期化されます。いったん確立されると、オブジェクトのメソッドを使用するか、標準の配列インデックス構文を使用して（つまり、ブラケット表記を使用して）、配列内の要素を参照できます。</target>
        </trans-unit>
        <trans-unit id="2e2a9b42d0d50788b48d5fa46232bbfae15ea093" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Function&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; コンストラクタ</target>
        </trans-unit>
        <trans-unit id="7c44cf1deb778cfc6fb4fb3c2c8717c2a3303fef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Function&lt;/code&gt; creates a new &lt;code&gt;Function&lt;/code&gt; object. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues to &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;. However, unlike eval, the Function constructor creates functions which execute in the global scope only.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 新しい作成 &lt;code&gt;Function&lt;/code&gt; オブジェクトを。コンストラクターを直接呼び出すと、関数を動的に作成できますが、セキュリティおよび&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;と同様の（ただしそれほど重要ではない）パフォーマンスの問題が発生します。ただし、evalとは異なり、Functionコンストラクターはグローバルスコープでのみ実行される関数を作成します。</target>
        </trans-unit>
        <trans-unit id="32ec1baff187da5dbe10927d09b669f9f1adfa1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; コンストラクタ</target>
        </trans-unit>
        <trans-unit id="59abf0f6e298917eba3d8ef1a0bff1e34e283128" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">値が1 の &lt;code&gt;GeneratorFunction&lt;/code&gt; コンストラクターの長さプロパティ。</target>
        </trans-unit>
        <trans-unit id="87a8e025058f3fe8d553a9626cd39169afab5b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneratorFunction&lt;/code&gt; creates a new &lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator function&lt;/code&gt;&lt;/a&gt; object. In JavaScript every generator function is actually a &lt;code&gt;GeneratorFunction&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; は新しい作成&lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;generator function&lt;/code&gt; &lt;/a&gt;オブジェクトを。JavaScriptでは、すべてのジェネレーター関数は実際には &lt;code&gt;GeneratorFunction&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="28ae646bea19e4d833aab812af7d3f0537a33cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Int16Array&lt;/code&gt; typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Int16Array&lt;/code&gt; は、アレイは、プラットフォームバイト順に2の補数16ビット符号付き整数の配列を表す型付け。バイトオーダーの制御が必要な場合は、代わりに&lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; を&lt;/a&gt;使用してください。内容は &lt;code&gt;0&lt;/code&gt; に初期化されます。いったん確立されると、オブジェクトのメソッドを使用するか、標準の配列インデックス構文を使用して（つまり、ブラケット表記を使用して）、配列内の要素を参照できます。</target>
        </trans-unit>
        <trans-unit id="325065478761dec46c8e43c1bb706efac29c0299" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Int32Array&lt;/code&gt; typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Int32Array&lt;/code&gt; は、アレイは、プラットフォームバイト順に2の補数32ビット符号付き整数の配列を表す型付け。バイトオーダーの制御が必要な場合は、代わりに&lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; を&lt;/a&gt;使用してください。内容は &lt;code&gt;0&lt;/code&gt; に初期化されます。いったん確立されると、オブジェクトのメソッドを使用するか、標準の配列インデックス構文を使用して（つまり、ブラケット表記を使用して）、配列内の要素を参照できます。</target>
        </trans-unit>
        <trans-unit id="891fa823bae7aa088eb1194224b013cf774a6a47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Int8Array&lt;/code&gt; typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Int8Array&lt;/code&gt; は、アレイは2の補数8ビット符号付き整数の配列を表す型付け。内容は &lt;code&gt;0&lt;/code&gt; に初期化されます。いったん確立されると、オブジェクトのメソッドを使用するか、標準の配列インデックス構文を使用して（つまり、ブラケット表記を使用して）、配列内の要素を参照できます。</target>
        </trans-unit>
        <trans-unit id="af81d2d38d363ace398fbc1e421544179af912eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator.prototype.compare&lt;/code&gt; property returns a function that compares two strings according to the sort order of this &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.Collator.prototype.compare&lt;/code&gt; プロパティは、このソート順に従って2つの文字列を比較する関数返す&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="272a6c3a7d60877b1c869914ecf7c277bb5a3af7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator.prototype.resolvedOptions()&lt;/code&gt; method returns a new object with properties reflecting the locale and collation options computed during initialization of this &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.Collator.prototype.resolvedOptions()&lt;/code&gt; メソッドは、この初期化中に計算されたロケールと照合オプション反射特性を持つ新しいオブジェクトを返す&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ffd097940ae82397c8bf3f2f5237f8e029da868c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Intl.Collator.prototype&lt;/code&gt; プロパティは、プロトタイプオブジェクトを表し&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt;コンストラクタを。</target>
        </trans-unit>
        <trans-unit id="819a653bd9f195fc3bcc00a8e0b90359c1639beb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator.supportedLocalesOf()&lt;/code&gt; method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.</source>
          <target state="translated">&lt;code&gt;Intl.Collator.supportedLocalesOf()&lt;/code&gt; メソッドは、実行時のデフォルトロケールにフォールバックすることなく、照合に支持されて設けられたロケールのものを含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="af6623b71c624d05792333d55bb545b7d54f9830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator&lt;/code&gt; object has the following properties and methods:</source>
          <target state="translated">&lt;code&gt;Intl.Collator&lt;/code&gt; オブジェクトは、次のプロパティとメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="80111b8a70cd58e3c8afeff0e4043d4fff18da6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator&lt;/code&gt; object is a constructor for collators, objects that enable language sensitive string comparison.</source>
          <target state="translated">&lt;code&gt;Intl.Collator&lt;/code&gt; オブジェクトは、丁合、言語に依存した文字列の比較を可能にするオブジェクトのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="3d4e6137125f5916ae76205d08a1ab73a524c339" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.prototype.format&lt;/code&gt; property returns a getter function that formats a date according to the locale and formatting options of this &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.prototype.format&lt;/code&gt; のプロパティは、ロケールおよびこの書式設定オプションに応じて日付をフォーマットゲッター関数戻り&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; の&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="827b13c5aa9c4dec3eab430890de485d22a04892" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; method allows locale-aware formatting of strings produced by &lt;code&gt;DateTimeFormat&lt;/code&gt; formatters.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; メソッドは、によって生成文字列の形式ロケール対応可能 &lt;code&gt;DateTimeFormat&lt;/code&gt; のフォーマッタ。</target>
        </trans-unit>
        <trans-unit id="b66b9447f5c9239d68ec7f4ac962b72f2a9766fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.prototype.resolvedOptions()&lt;/code&gt; method returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.prototype.resolvedOptions()&lt;/code&gt; メソッドは、この初期化中に計算されたオプションの書式ロケールと日時反射特性を持つ新しいオブジェクトを返す&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; の&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ce32b4be32d6b141f0a059bea36eaf6cb30b27de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.prototype&lt;/code&gt; のプロパティは、プロトタイプオブジェクトを表し&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; の&lt;/a&gt;コンストラクタを。</target>
        </trans-unit>
        <trans-unit id="45f08d1a87a417d8a3d5b0c4ec978877b18473ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.supportedLocalesOf()&lt;/code&gt; method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.supportedLocalesOf()&lt;/code&gt; メソッドは、バック実行時のデフォルトロケールに落下することなく、フォーマット日時に支持されて設けられたロケールのものを含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="f66ae3a8ee78181e3f3a1efcf6577955630e42a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; object is a constructor for objects that enable language-sensitive date and time formatting.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; のオブジェクトは、言語に依存日付と時刻の書式設定を有効にするオブジェクトのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="5afc45e19c4e91c235fc91239ceb165d6d29dbf4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat.prototype.format&lt;/code&gt; property returns a getter function that formats a number according to the locale and formatting options of this &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat.prototype.format&lt;/code&gt; のプロパティは、ロケールこれのフォーマットオプションに従って番号をフォーマットゲッター関数戻り&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="e49d7b85f01ac1ff877966dad32b47f71e8591df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat.prototype.resolvedOptions()&lt;/code&gt; method returns a new object with properties reflecting the locale and number formatting options computed during initialization of this &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat.prototype.resolvedOptions()&lt;/code&gt; メソッドの戻りロケールを反射特性及びその初期化中に計算された数の書式オプションを使用して新しいオブジェクト&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ec31c442949adbd76df6c61725256709aa923321" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;Intl.NumberFormat&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat.prototype&lt;/code&gt; のプロパティは、プロトタイプオブジェクトを表し&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;Intl.NumberFormat&lt;/code&gt; の&lt;/a&gt;コンストラクタを。</target>
        </trans-unit>
        <trans-unit id="f751d24db3a576bc70d1c2a8c92ca22cbf0ab486" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat.supportedLocalesOf()&lt;/code&gt; method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat.supportedLocalesOf()&lt;/code&gt; メソッドは、バック実行時のデフォルトロケールに落下することなく、フォーマット番号に支持されて設けられたロケールのものを含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="557fde9f4a9efb876f4eac88cf3301ed491abed9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat&lt;/code&gt; object is a constructor for objects that enable language sensitive number formatting.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat&lt;/code&gt; のオブジェクトは、言語に敏感な数の書式設定を有効にするオブジェクトのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="fbf01e65cc876868c83e46a1fc778c101bb65165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Numberformat.prototype.formatToParts()&lt;/code&gt; method allows locale-aware formatting of strings produced by &lt;code&gt;NumberTimeFormat&lt;/code&gt; formatters.</source>
          <target state="translated">&lt;code&gt;Intl.Numberformat.prototype.formatToParts()&lt;/code&gt; メソッドは、によって生成文字列の形式ロケール対応可能 &lt;code&gt;NumberTimeFormat&lt;/code&gt; のフォーマッタ。</target>
        </trans-unit>
        <trans-unit id="150cf40025fc4f735dfaaac10b628060aa4c4195" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules.prototype.resolvedOptions()&lt;/code&gt; method returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this &lt;a href=&quot;../pluralrules&quot;&gt;&lt;code&gt;PluralRules&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules.prototype.resolvedOptions()&lt;/code&gt; メソッドは、この初期化中に計算されたオプションの書式ロケールと複数の反射特性を有する新しいオブジェクトを返す&lt;a href=&quot;../pluralrules&quot;&gt; &lt;code&gt;PluralRules&lt;/code&gt; の&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="f841b3bcc9465a5f44c5f253a0e7d0f81550121f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules.prototype.select&lt;/code&gt; method returns a String indicating which plural rule to use for locale-aware formatting.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules.prototype.select&lt;/code&gt; の方法は、ロケール対応フォーマットに使用する複数のルールを示す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="83257ff29ba302a990881c5f4e65242dd823bf9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../pluralrules&quot;&gt;&lt;code&gt;Intl.PluralRules&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules.prototype&lt;/code&gt; のプロパティは、プロトタイプオブジェクトを表し&lt;a href=&quot;../pluralrules&quot;&gt; &lt;code&gt;Intl.PluralRules&lt;/code&gt; の&lt;/a&gt;コンストラクタを。</target>
        </trans-unit>
        <trans-unit id="f7d51efcb1f98ad73709b9a4f50ddcd7b465e033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules.supportedLocalesOf()&lt;/code&gt; method returns an array containing those of the provided locales that are supported in plural formatting without having to fall back to the runtime's default locale.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules.supportedLocalesOf()&lt;/code&gt; メソッドの戻りはなく、複数のフォーマットでサポートされて設けられたロケールのものを含む配列は、ランタイムのデフォルトロケールにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="de59eaa070333ae43b6eb54897dd9ddfc59086a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules&lt;/code&gt; object is a constructor for objects that enable plural sensitive formatting and plural language rules.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules&lt;/code&gt; のオブジェクトは、複数の敏感なフォーマットと複数の言語ルールを有効オブジェクトのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="3882d167c04f285a222b74818008c457eaf560eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.getCanonicalLocales()&lt;/code&gt; method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.</source>
          <target state="translated">&lt;code&gt;Intl.getCanonicalLocales()&lt;/code&gt; メソッドは、正規のロケール名を含む配列を返します。重複は省略され、要素は構造的に有効な言語タグとして検証されます。</target>
        </trans-unit>
        <trans-unit id="9883dc65c62c7940615fb93418b9103125f683b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl&lt;/code&gt; object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; objects are properties of the &lt;code&gt;Intl&lt;/code&gt; object. This page documents these properties as well as functionality common to the internationalization constructors and other language sensitive functions.</source>
          <target state="translated">&lt;code&gt;Intl&lt;/code&gt; オブジェクトは、ECMAScriptの国際番号の書式、言語に依存した文字列の比較を提供するAPI、、、日付と時刻の書式の名前空間です。&lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのコンストラクターは、 &lt;code&gt;Intl&lt;/code&gt; オブジェクトのプロパティです。このページでは、これらのプロパティと、国際化コンストラクターおよびその他の言語依存関数に共通の機能について説明します。</target>
        </trans-unit>
        <trans-unit id="89afb46cfc82dfbbdb5c7ec457655306ed4715c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSON.parse()&lt;/code&gt; method parses a JSON string, constructing the JavaScript value or object described by the string. An optional &lt;strong&gt;reviver&lt;/strong&gt; function can be provided to perform a transformation on the resulting object before it is returned.</source>
          <target state="translated">&lt;code&gt;JSON.parse()&lt;/code&gt; メソッドは、文字列によって記述JavaScriptの値又はオブジェクトを構築する、JSON文字列を解析します。オプションの&lt;strong&gt;リバイバー&lt;/strong&gt;関数を提供して、結果のオブジェクトが返される前に変換を実行できます。</target>
        </trans-unit>
        <trans-unit id="b48f840a4d5a62a5f6b73ac28487ab68c361cab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSON.stringify()&lt;/code&gt; method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.</source>
          <target state="translated">&lt;code&gt;JSON.stringify()&lt;/code&gt; メソッドは、代替機能が指定されている場合は必要に応じて値を交換または代替配列が指定されている場合、任意にのみ指定されたプロパティを含む、JSONストリングにJavaScriptオブジェクトまたは値に変換します。</target>
        </trans-unit>
        <trans-unit id="282dab3b27dcf6633f10d03d043d31cb8ce13e25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSON&lt;/code&gt; object contains methods for parsing &lt;a href=&quot;https://json.org/&quot;&gt;JavaScript Object Notation&lt;/a&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt;) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.</source>
          <target state="translated">&lt;code&gt;JSON&lt;/code&gt; のオブジェクトを解析するための方法を含んでいる&lt;a href=&quot;https://json.org/&quot;&gt;JavaScriptオブジェクト表記&lt;/a&gt;（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSONを&lt;/a&gt;）およびJSONに値を変換します。呼び出すことも構築することもできず、2つのメソッドプロパティを除いて、独自の興味深い機能はありません。</target>
        </trans-unit>
        <trans-unit id="2e129086723a303edc098859842bdfa440c65192" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt; constant has a value of &lt;code&gt;9007199254740991&lt;/code&gt; (9,007,199,254,740,991 or ~9 quadrillion). The reasoning behind that number is that JavaScript uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&quot;&gt;double-precision floating-point format numbers&lt;/a&gt; as specified in &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; and can only safely represent numbers between &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; and &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt; の定数は、持っている &lt;code&gt;9007199254740991&lt;/code&gt; （9,007,199,254,740,991または〜9兆を）。その数の背後にある理由は、JavaScriptを使用することである&lt;a href=&quot;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&quot;&gt;倍精度浮動小数点形式番号&lt;/a&gt;で指定され&lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt;のみ安全の数を表現することができる &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; 及び &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fadc95ce85c2b565bfdeaf904c61b94fca77acf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MAX_VALUE&lt;/code&gt; property has a value of approximately &lt;code&gt;1.79E+308&lt;/code&gt;, or 2&lt;sup&gt;1024&lt;/sup&gt;. Values larger than &lt;code&gt;MAX_VALUE&lt;/code&gt; are represented as &quot;&lt;code&gt;Infinity&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;MAX_VALUE&lt;/code&gt; のプロパティは、およその値を有する &lt;code&gt;1.79E+308&lt;/code&gt; 、又は2 &lt;sup&gt;1024&lt;/sup&gt;。 &lt;code&gt;MAX_VALUE&lt;/code&gt; より大きい値は「 &lt;code&gt;Infinity&lt;/code&gt; 」として表されます。</target>
        </trans-unit>
        <trans-unit id="51138e87dd8afa0c248cf646ff6fba440aa07574" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MIN_SAFE_INTEGER&lt;/code&gt; constant has a value of &lt;code&gt;-9007199254740991&lt;/code&gt; (-9,007,199,254,740,991 or about -9 quadrillion). The reasoning behind that number is that JavaScript uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&quot;&gt;double-precision floating-point format numbers&lt;/a&gt; as specified in &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; and can only safely represent numbers between &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; and &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt;. See &lt;a href=&quot;issafeinteger&quot;&gt;&lt;code&gt;Number.isSafeInteger()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;MIN_SAFE_INTEGER&lt;/code&gt; の定数の値を有する &lt;code&gt;-9007199254740991&lt;/code&gt; （-9,007,199,254,740,991又は約-9兆）を。その数の背後にある理由は、JavaScriptを使用することである&lt;a href=&quot;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&quot;&gt;倍精度浮動小数点形式番号&lt;/a&gt;で指定され&lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt;のみ安全の数を表現することができる &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; 及び &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; 。詳細については、&lt;a href=&quot;issafeinteger&quot;&gt; &lt;code&gt;Number.isSafeInteger()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2edd7ede8c6ff2cb8e59eff68ecbdb126e29569e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MIN_VALUE&lt;/code&gt; property is the number closest to 0, not the most negative number, that JavaScript can represent.</source>
          <target state="translated">&lt;code&gt;MIN_VALUE&lt;/code&gt; のプロパティは0に近い数ではなく、JavaScriptが表現できることが最も負の数、です。</target>
        </trans-unit>
        <trans-unit id="d0c964aed5ec320d75e2a45199d447ce687d7cda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt;) may be used as either a key or a value.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; オブジェクトは、キーと値のペアを保持し、キーの本来の挿入順序を記憶しています。任意の値（オブジェクトと&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;プリミティブ値の&lt;/a&gt;両方）をキーまたは値として使用できます。</target>
        </trans-unit>
        <trans-unit id="88182ac6e810e4db29e4f4ca99dd5f46cbb85788" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="e1bc1fc4fdbe497780e3d4e463f6104aa51a7aed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map[@@toStringTag]&lt;/code&gt; property has an initial value of &quot;Map&quot;.</source>
          <target state="translated">&lt;code&gt;Map[@@toStringTag]&lt;/code&gt; プロパティは、「マップ」の初期値を持っています。</target>
        </trans-unit>
        <trans-unit id="3bbde0f7b7ef75ccc2709ef492ef3e5714515a85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.E&lt;/code&gt; property represents the base of natural logarithms, e, approximately 2.718.</source>
          <target state="translated">&lt;code&gt;Math.E&lt;/code&gt; を使用するプロパティは、自然対数の底、E、約2.718を表します。</target>
        </trans-unit>
        <trans-unit id="0e9d214144756719d648c3dc2c1301f19276447c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.LN10&lt;/code&gt; property represents the natural logarithm of 10, approximately 2.302:</source>
          <target state="translated">&lt;code&gt;Math.LN10&lt;/code&gt; のプロパティは、10の自然対数、約2.302を表します。</target>
        </trans-unit>
        <trans-unit id="8db0f1faf59a2ac2c578484cf3b24e6f4c214ed3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.LN2&lt;/code&gt; property represents the natural logarithm of 2, approximately 0.693:</source>
          <target state="translated">&lt;code&gt;Math.LN2&lt;/code&gt; のプロパティは、2の自然対数、約0.693を表します。</target>
        </trans-unit>
        <trans-unit id="cdf7f2ecf0017b27e7a6141dc1ed457384dd58e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.LOG10E&lt;/code&gt; property represents the base 10 logarithm of e, approximately 0.434:</source>
          <target state="translated">&lt;code&gt;Math.LOG10E&lt;/code&gt; のプロパティは、Eの10を底とする対数を表す、約0.434：</target>
        </trans-unit>
        <trans-unit id="d5c9e3c0689448a1a9df15e39f7d754a2992a927" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.LOG2E&lt;/code&gt; property represents the base 2 logarithm of e, approximately 1.442:</source>
          <target state="translated">&lt;code&gt;Math.LOG2E&lt;/code&gt; のプロパティは、Eの2を底とする対数を表す、約1.442：</target>
        </trans-unit>
        <trans-unit id="63cd40ab11d7a3a27a7c89ce217a526e42186596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.PI&lt;/code&gt; property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159:</source>
          <target state="translated">&lt;code&gt;Math.PI&lt;/code&gt; のプロパティは円周率を表し、約3.14159：</target>
        </trans-unit>
        <trans-unit id="2e8337ecf94f86624ee273c9827f2a26f251ff2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.SQRT1_2&lt;/code&gt; property represents the square root of 1/2 which is approximately 0.707:</source>
          <target state="translated">&lt;code&gt;Math.SQRT1_2&lt;/code&gt; のプロパティは、約0.707である1/2の平方根を表します。</target>
        </trans-unit>
        <trans-unit id="a26902a9e42f526f3ae90dbfb5a8226a1c70fb8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.SQRT2&lt;/code&gt; property represents the square root of 2, approximately 1.414:</source>
          <target state="translated">&lt;code&gt;Math.SQRT2&lt;/code&gt; の宿泊施設には、2の平方根、約1.414を表します。</target>
        </trans-unit>
        <trans-unit id="eae6f5b844e3d6d91260924e40ec029c879a9923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.abs()&lt;/code&gt; function returns the absolute value of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.abs()&lt;/code&gt; 関数が返す数の絶対値であります</target>
        </trans-unit>
        <trans-unit id="f1f2a5f19a3e5516861af947471fe4ec8a980466" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.acos()&lt;/code&gt; function returns the arccosine (in radians) of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.acos()&lt;/code&gt; 関数は、数値の（ラジアン）アークコサインを返し、あります</target>
        </trans-unit>
        <trans-unit id="23e53e5610b8e2bffb508c5cb59181c802697a1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.acos()&lt;/code&gt; method returns a numeric value between 0 and &amp;pi; radians for &lt;code&gt;x&lt;/code&gt; between -1 and 1. If the value of &lt;code&gt;x&lt;/code&gt; is outside this range, it returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Math.acos()&lt;/code&gt; メソッドの戻りのために0と&amp;pi;ラジアンの間の数値 &lt;code&gt;x&lt;/code&gt; の値との間の場合-1から1 &lt;code&gt;x&lt;/code&gt; がこの範囲外であり、それは返し&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; が&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7f1359f0c5180f313c713a239ff7586a8b6ed071" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.acosh()&lt;/code&gt; function returns the hyperbolic arc-cosine of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.acosh()&lt;/code&gt; 関数は、数値の双曲線アークコサインを返すことです</target>
        </trans-unit>
        <trans-unit id="77ea6d905eac5b576ffa3e8e68dd6623c41fd8de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.asin()&lt;/code&gt; function returns the arcsine (in radians) of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.asin()&lt;/code&gt; 関数は、つまり、数（ラジアン）アークサインを返します</target>
        </trans-unit>
        <trans-unit id="1201f0735d6c0d6605da2162314daa4a1383fe06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.asin()&lt;/code&gt; method returns a numeric value between</source>
          <target state="translated">&lt;code&gt;Math.asin()&lt;/code&gt; メソッドは、間の数値を返します</target>
        </trans-unit>
        <trans-unit id="4f24cc302535514a7789482772fb7228bbe3c1b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.asinh()&lt;/code&gt; function returns the hyperbolic arcsine of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.asinh()&lt;/code&gt; 関数は、であり、数値の双曲線アークサインを返します</target>
        </trans-unit>
        <trans-unit id="274e9068ecd50879d6acc911f659025f3fc40267" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atan()&lt;/code&gt; function returns the arctangent (in radians) of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.atan()&lt;/code&gt; 関数は、つまり、数（ラジアン）アークタンジェントを返します</target>
        </trans-unit>
        <trans-unit id="19e0ae310ffca0a95d08a532386a65fa4b83741a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atan()&lt;/code&gt; method returns a numeric value between</source>
          <target state="translated">&lt;code&gt;Math.atan()&lt;/code&gt; メソッドは、間の数値を返します</target>
        </trans-unit>
        <trans-unit id="1efa67754ea28c885fc086cb93e6069cc3a67fe6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atan2()&lt;/code&gt; function returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), for &lt;code&gt;Math.atan2(y,x)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Math.atan2()&lt;/code&gt; 関数のための点（X、Y）に正のx軸および（0,0）から線間（ラジアン）面の角度を返し &lt;code&gt;Math.atan2(y,x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77c207e19c5f9f4f46bab9f5091528b80eb08a44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atan2()&lt;/code&gt; method returns a numeric value between -&amp;pi; and &amp;pi; representing the angle theta of an &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt; point. This is the counterclockwise angle, measured in radians, between the positive X axis, and the point &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt;. Note that the arguments to this function pass the y-coordinate first and the x-coordinate second.</source>
          <target state="translated">&lt;code&gt;Math.atan2()&lt;/code&gt; メソッドは、角度&amp;theta;を表す-&amp;pi;と&amp;pi;との間の数値を返し &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt; 点。これは、正のX軸と点 &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt; 間のラジアンで測定された反時計回りの角度です。この関数の引数は、最初にy座標を渡し、2番目にx座標を渡すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="401089a6230e9c0e59b469731579b2c037b6d9d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atanh()&lt;/code&gt; function returns the hyperbolic arctangent of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.atanh()&lt;/code&gt; 関数は、であり、数値の双曲線アークタンジェントを返します</target>
        </trans-unit>
        <trans-unit id="2d1450b678d6cdc0ae70a87335e790c92ef781be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.cbrt()&lt;/code&gt; function returns the cube root of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.cbrt()&lt;/code&gt; 関数は、すなわち、数の立方根を返します</target>
        </trans-unit>
        <trans-unit id="e853adf2395dd36708d65c7b793868c0402ab685" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.ceil()&lt;/code&gt; function returns the smallest integer greater than or equal to a given number.</source>
          <target state="translated">&lt;code&gt;Math.ceil()&lt;/code&gt; 関数が返す与えられた数の最も小さい整数より大きいかまたは等しいです。</target>
        </trans-unit>
        <trans-unit id="1f46b5999ff7482155c968a0bfe7d2ac290cd792" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.clz32()&lt;/code&gt; function returns the number of leading zero bits in the 32-bit binary representation of a number.</source>
          <target state="translated">&lt;code&gt;Math.clz32()&lt;/code&gt; 関数は、数値の32ビットバイナリ表現における先行ゼロのビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="f34d1fcee66df36e2155cbe5c0adec85c2bcec1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.cos()&lt;/code&gt; method returns a numeric value between -1 and 1, which represents the cosine of the angle.</source>
          <target state="translated">&lt;code&gt;Math.cos()&lt;/code&gt; メソッドは、角度のコサインを表す数値との間の-1と1を返し。</target>
        </trans-unit>
        <trans-unit id="1982921bfd23b352614e4487bb825af16d5cac08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.cos()&lt;/code&gt; static function returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/cosine&quot;&gt;cosine&lt;/a&gt; of the specified angle, which must be specified in &lt;a href=&quot;https://en.wikipedia.org/wiki/radians&quot;&gt;radians&lt;/a&gt;. This value is</source>
          <target state="translated">&lt;code&gt;Math.cos()&lt;/code&gt; 静的関数が返す&lt;a href=&quot;https://en.wikipedia.org/wiki/cosine&quot;&gt;コサイン&lt;/a&gt;で指定しなければならない指定された角度の、&lt;a href=&quot;https://en.wikipedia.org/wiki/radians&quot;&gt;ラジアン&lt;/a&gt;。この値は</target>
        </trans-unit>
        <trans-unit id="a555d20b1f19ec5103b77931d479fb6e8b4dbb3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.cosh()&lt;/code&gt; function returns the hyperbolic cosine of a number, that can be expressed using the &lt;a href=&quot;e&quot;&gt;constant e&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;Math.cosh()&lt;/code&gt; 関数を用いて表すことができる数の双曲線余弦返す&lt;a href=&quot;e&quot;&gt;定数eを&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="2bfea75be247f3daec71554eaad766c96c0db251" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.exp()&lt;/code&gt; function returns &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt;&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the argument, and &lt;code&gt;e&lt;/code&gt; is &lt;a href=&quot;e&quot;&gt;Euler's number (also known as Napier's constant)&lt;/a&gt;, the base of the natural logarithms.</source>
          <target state="translated">&lt;code&gt;Math.exp()&lt;/code&gt; 関数が返す &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt;&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; は引数であり、 &lt;code&gt;e&lt;/code&gt; はである&lt;a href=&quot;e&quot;&gt;（また、ネイピア数としても知られる）オイラー数&lt;/a&gt;、自然対数の底。</target>
        </trans-unit>
        <trans-unit id="18eee299904532f2ffd28d81c9ac6c8227771f9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.expm1()&lt;/code&gt; function returns &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt; - 1&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the argument, and &lt;a href=&quot;e&quot;&gt;e&lt;/a&gt; the base of the natural logarithms.</source>
          <target state="translated">&lt;code&gt;Math.expm1()&lt;/code&gt; 関数が返す &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt; - 1&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; は引数であり、&lt;a href=&quot;e&quot;&gt;eは&lt;/a&gt;自然対数の底です。</target>
        </trans-unit>
        <trans-unit id="e8824a7825bf37b6f9c96fb23ed3ac4b27945d51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.floor()&lt;/code&gt; function returns the largest integer less than or equal to a given number.</source>
          <target state="translated">&lt;code&gt;Math.floor()&lt;/code&gt; 関数は、以下の最大の整数を返すか、指定された数に等しいです。</target>
        </trans-unit>
        <trans-unit id="e73fd876183d4897911545affeaa2f0c199ea36d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.fround()&lt;/code&gt; function returns the nearest &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;32-bit single precision&lt;/a&gt; float representation of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Math.fround()&lt;/code&gt; 関数が返す最も近い&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;32ビット単精度&lt;/a&gt;の浮動小数点表現&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3acae50845ea68e690e7b7727178f6ef8b66df64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.hypot()&lt;/code&gt; function returns the square root of the sum of squares of its arguments, that is</source>
          <target state="translated">&lt;code&gt;Math.hypot()&lt;/code&gt; 関数は、その引数の二乗の和の平方根を返し、すなわち</target>
        </trans-unit>
        <trans-unit id="1783d7acae54f32c226e638343bf0fad7c634c55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.imul()&lt;/code&gt; function returns the result of the C-like 32-bit multiplication of the two parameters.</source>
          <target state="translated">&lt;code&gt;Math.imul()&lt;/code&gt; 関数は、Cのような二つのパラメータの32ビット乗算の結果を返します。</target>
        </trans-unit>
        <trans-unit id="0fbb4c724848b0a53ecbfacba61326cab66e211b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.log()&lt;/code&gt; function returns the natural logarithm (base &lt;a href=&quot;e&quot;&gt;&lt;code&gt;e&lt;/code&gt;&lt;/a&gt;) of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.log()&lt;/code&gt; 関数は、自然対数（底返す&lt;a href=&quot;e&quot;&gt; &lt;code&gt;e&lt;/code&gt; &lt;/a&gt;である、数）を</target>
        </trans-unit>
        <trans-unit id="4936dafff05a90c9d111b4b30e42a197099af9dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.log10()&lt;/code&gt; function returns the base 10 logarithm of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.log10()&lt;/code&gt; 関数は、すなわち、数の10を底とする対数を返します</target>
        </trans-unit>
        <trans-unit id="b09f211d660ff7375eef3abee35fe3455dd2f781" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.log1p()&lt;/code&gt; function returns the natural logarithm (base &lt;a href=&quot;e&quot;&gt;&lt;code&gt;e&lt;/code&gt;&lt;/a&gt;) of 1 + a number, that is</source>
          <target state="translated">&lt;code&gt;Math.log1p()&lt;/code&gt; 関数は、自然対数（底返す&lt;a href=&quot;e&quot;&gt; &lt;code&gt;e&lt;/code&gt; &lt;/a&gt; 1 +数の）を</target>
        </trans-unit>
        <trans-unit id="9de4bd7bfcecd8d7baebf0daf3b3529ba48f3549" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.log2()&lt;/code&gt; function returns the base 2 logarithm of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.log2()&lt;/code&gt; 関数は、すなわち、数の2を底とする対数を返します</target>
        </trans-unit>
        <trans-unit id="b33a199cd22e3ee41631af09205653506adc3bdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.max()&lt;/code&gt; function returns the largest of zero or more numbers.</source>
          <target state="translated">&lt;code&gt;Math.max()&lt;/code&gt; 関数は、ゼロまたはそれ以上の数の最大を返します。</target>
        </trans-unit>
        <trans-unit id="62674bee19df406bc1fdbd14f622d63ce4c011e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.pow()&lt;/code&gt; function returns the &lt;code&gt;base&lt;/code&gt; to the &lt;code&gt;exponent&lt;/code&gt; power, that is, &lt;code&gt;base&lt;sup&gt;exponent&lt;/sup&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Math.pow()&lt;/code&gt; 関数が返す &lt;code&gt;base&lt;/code&gt; の &lt;code&gt;exponent&lt;/code&gt; であるパワー、 &lt;code&gt;base&lt;sup&gt;exponent&lt;/sup&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d936ed23a8c7935bde0bf4037eb8c8f483a83a7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.random()&lt;/code&gt; function returns a floating-point, pseudo-random number in the range 0&amp;ndash;1 (inclusive of 0, but not 1) with approximately uniform distribution over that range &amp;mdash; which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.</source>
          <target state="translated">&lt;code&gt;Math.random()&lt;/code&gt; 関数は、0〜1（ 0を含むが1は含まない）の範囲の浮動小数点の疑似乱数を返し、その範囲全体でほぼ均一に分布します。これを目的の範囲にスケーリングできます。実装は、乱数生成アルゴリズムの初期シードを選択します。ユーザーが選択またはリセットすることはできません。</target>
        </trans-unit>
        <trans-unit id="af02360b60e878aed2709cd3f773108e1aa2625a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.round()&lt;/code&gt; function returns the value of a number rounded to the nearest integer.</source>
          <target state="translated">&lt;code&gt;Math.round()&lt;/code&gt; 関数は、最も近い整数に丸めた数値を返します。</target>
        </trans-unit>
        <trans-unit id="da8b8ae5b73735a996356de7c47d8dacefce3df1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sign()&lt;/code&gt; function returns the sign of a number, indicating whether the number is positive, negative or zero.</source>
          <target state="translated">&lt;code&gt;Math.sign()&lt;/code&gt; 関数は、数値が正、負またはゼロであるか否かを示す、数値の符号を返します。</target>
        </trans-unit>
        <trans-unit id="dde4deb7799dcc763f16a0179238397eb20e4b9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sin()&lt;/code&gt; function returns the sine of a number.</source>
          <target state="translated">&lt;code&gt;Math.sin()&lt;/code&gt; 関数は、数値のサインを返します。</target>
        </trans-unit>
        <trans-unit id="76d76cf0a5feac65ad2cb021f11849024f28eeb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sin()&lt;/code&gt; method returns a numeric value between -1 and 1, which represents the sine of the angle given in radians.</source>
          <target state="translated">&lt;code&gt;Math.sin()&lt;/code&gt; メソッドは、ラジアンで与えられた角度のサインを表す数値との間の-1と1を返し。</target>
        </trans-unit>
        <trans-unit id="564f79a1eff02a3d9293260681dc7c21beb64171" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sinh()&lt;/code&gt; function returns the hyperbolic sine of a number, that can be expressed using the &lt;a href=&quot;e&quot;&gt;constant e&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;Math.sinh()&lt;/code&gt; 関数を用いて表すことができる数の双曲線正弦返す&lt;a href=&quot;e&quot;&gt;定数eを&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="106bcb416cbdd429ad7933d6dc31d26364d03dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sqrt()&lt;/code&gt; function returns the square root of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.sqrt()&lt;/code&gt; 関数は、すなわち、数の平方根を返します</target>
        </trans-unit>
        <trans-unit id="fdc14b01c600a83941368feb4762d6c7ab8c3902" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.tan()&lt;/code&gt; function returns the tangent of a number.</source>
          <target state="translated">&lt;code&gt;Math.tan()&lt;/code&gt; 関数は、数値の正接を返します。</target>
        </trans-unit>
        <trans-unit id="d6a42ec70f0ea0607606e14849e66ec68b4c61ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.tan()&lt;/code&gt; method returns a numeric value that represents the tangent of the angle.</source>
          <target state="translated">&lt;code&gt;Math.tan()&lt;/code&gt; メソッドは、角度のタンジェントを表す数値を返します。</target>
        </trans-unit>
        <trans-unit id="02ff2998fa9285454da319330dee3f30e6cd32c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.tanh()&lt;/code&gt; function returns the hyperbolic tangent of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.tanh()&lt;/code&gt; 関数は、すなわち、数の双曲線正接を返し</target>
        </trans-unit>
        <trans-unit id="f27db3f3a41ec46f179c587df8a34363b782a28c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.trunc()&lt;/code&gt; function returns the integer part of a number by removing any fractional digits.</source>
          <target state="translated">&lt;code&gt;Math.trunc()&lt;/code&gt; 関数は、任意の小数桁を除去することにより、数の整数部分を返します。</target>
        </trans-unit>
        <trans-unit id="4fa18c0132666e17849d60724c9ad3039600e31b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.EPSILON&lt;/code&gt; property represents the difference between 1 and the smallest floating point number greater than 1.</source>
          <target state="translated">&lt;code&gt;Number.EPSILON&lt;/code&gt; のプロパティは、1,1より最小の浮動小数点数の大きな差を表します。</target>
        </trans-unit>
        <trans-unit id="05ff1ee697d3c5c3e0b67d8245da7a9116b43c49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; constant represents the maximum safe integer in JavaScript (&lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; の定数は、JavaScriptでの安全な最大の整数（表し、 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4ca43227a25c5f381fd5c0e2898671ab9a49919b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.MAX_VALUE&lt;/code&gt; property represents the maximum numeric value representable in JavaScript.</source>
          <target state="translated">&lt;code&gt;Number.MAX_VALUE&lt;/code&gt; のプロパティには、JavaScriptの最大数値表現を表します。</target>
        </trans-unit>
        <trans-unit id="bf526ed1de12696fb61cc3e08aab8fcda9ea33ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt; constant represents the minimum safe integer in JavaScript (&lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt; の定数はJavaScriptで最小安全整数を表し（ &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f7381448634e0f31bd5201bcea50a9d1e174d800" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.MIN_VALUE&lt;/code&gt; property represents the smallest positive numeric value representable in JavaScript.</source>
          <target state="translated">&lt;code&gt;Number.MIN_VALUE&lt;/code&gt; のプロパティには、JavaScriptで最小の正の数値表現を表します。</target>
        </trans-unit>
        <trans-unit id="5aec2d9b31c88e5aa46d62d6093ad29565e0dd29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; property represents the negative Infinity value.</source>
          <target state="translated">&lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; とのプロパティは、負の無限大の値を表します。</target>
        </trans-unit>
        <trans-unit id="c9ae0e314f4a7ce76ee0711a747131d463602ac9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.NaN&lt;/code&gt; property represents Not-A-Number. Equivalent of &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Number.NaN&lt;/code&gt; のプロパティがない-A-数を表します。&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; に&lt;/a&gt;相当します。</target>
        </trans-unit>
        <trans-unit id="d0a8de008582132cc9e6cc742bf738dcafc19037" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; property represents the positive Infinity value.</source>
          <target state="translated">&lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; とのプロパティには、正の無限大値を表します。</target>
        </trans-unit>
        <trans-unit id="30fd7b6f3053abaff3bf2a0464c281e23ec072c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.isFinite()&lt;/code&gt; method determines whether the passed value is a finite number.</source>
          <target state="translated">&lt;code&gt;Number.isFinite()&lt;/code&gt; メソッドは、渡された値が有限数であるか否かを判断します。</target>
        </trans-unit>
        <trans-unit id="6702ce32a97290f8e908e26ff226fd16b8db7bc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.isInteger()&lt;/code&gt; method determines whether the passed value is an integer.</source>
          <target state="translated">&lt;code&gt;Number.isInteger()&lt;/code&gt; メソッドは、渡された値が整数であるか否かを判定する。</target>
        </trans-unit>
        <trans-unit id="5e9f4d261b9a45b076a155c11abbd5aac9e031d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.isNaN()&lt;/code&gt; method determines whether the passed value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; and its type is &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;. It is a more robust version of the original, global &lt;a href=&quot;../isnan&quot;&gt;&lt;code&gt;isNaN()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Number.isNaN()&lt;/code&gt; メソッドは、渡された値であるか否かを判断する&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;とその種類がある&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;。これは、元のグローバル&lt;a href=&quot;../isnan&quot;&gt; &lt;code&gt;isNaN()&lt;/code&gt; の&lt;/a&gt;より堅牢なバージョンです。</target>
        </trans-unit>
        <trans-unit id="9914bbce6f34a5629b45e57a04521135a21f3d24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.isSafeInteger()&lt;/code&gt; method determines whether the provided value is a number that is a</source>
          <target state="translated">&lt;code&gt;Number.isSafeInteger()&lt;/code&gt; メソッドは、与えられた値は、Aである数であるか否かを判断します</target>
        </trans-unit>
        <trans-unit id="f9aa47102986c689ecc518ad79ea95d634627d70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.parseFloat()&lt;/code&gt; method parses a string argument and returns a floating point number. This method behaves identically to the global function &lt;a href=&quot;../parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; and is part of ECMAScript 2015 (its purpose is modularization of globals).</source>
          <target state="translated">&lt;code&gt;Number.parseFloat()&lt;/code&gt; メソッドは、文字列引数を解析し、浮動小数点数を返します。このメソッドはグローバル関数&lt;a href=&quot;../parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt;と同じように動作し、ECMAScript 2015の一部です（その目的はグローバルのモジュール化です）。</target>
        </trans-unit>
        <trans-unit id="53ff239b6aba38919ddab96f4de82953204c8139" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.parseInt()&lt;/code&gt; method parses a string argument and returns an integer of the specified radix or base.</source>
          <target state="translated">&lt;code&gt;Number.parseInt()&lt;/code&gt; メソッドは、文字列引数を解析し、指定された基数又は塩基の整数を返します。</target>
        </trans-unit>
        <trans-unit id="df593d41968f688ad83a119c51c4284dfcfd496e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Number.prototype&lt;/code&gt; をのプロパティは、プロトタイプを表す&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;コンストラクタを。</target>
        </trans-unit>
        <trans-unit id="00ade8ef2452f453af0fa56020df4de938b0c743" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number&lt;/code&gt; JavaScript object is a wrapper object allowing you to work with numerical values. A &lt;code&gt;Number&lt;/code&gt; object is created using the &lt;code&gt;Number()&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; JavaScriptオブジェクトを使用すると、数値で作業できるようにするラッパーオブジェクトです。 &lt;code&gt;Number&lt;/code&gt; オブジェクトを使用して作成された &lt;code&gt;Number()&lt;/code&gt; コンストラクタを。</target>
        </trans-unit>
        <trans-unit id="33e9c7709d72fc16e777d20479de2eee0376b010" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.assign()&lt;/code&gt; method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.</source>
          <target state="translated">&lt;code&gt;Object.assign()&lt;/code&gt; メソッドは、ターゲット・オブジェクトに1つ以上のソースオブジェクトからすべての列挙独自のプロパティの値をコピーするために使用されます。ターゲットオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="0507ba624ef552980aa74cae51b4f564b83468d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.assign()&lt;/code&gt; method only copies &lt;em&gt;enumerable&lt;/em&gt; and &lt;em&gt;own&lt;/em&gt; properties from a source object to a target object. It uses &lt;code&gt;[[Get]]&lt;/code&gt; on the source and &lt;code&gt;[[Set]]&lt;/code&gt; on the target, so it will invoke getters and setters. Therefore it &lt;em&gt;assigns&lt;/em&gt; properties versus just copying or defining new properties. This may make it unsuitable for merging new properties into a prototype if the merge sources contain getters. For copying property definitions, including their enumerability, into prototypes &lt;a href=&quot;getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; should be used instead.</source>
          <target state="translated">&lt;code&gt;Object.assign()&lt;/code&gt; メソッドは、コピーのみ&lt;em&gt;列挙&lt;/em&gt;し、&lt;em&gt;自身の&lt;/em&gt;ターゲット・オブジェクトにソースオブジェクトからプロパティを。ソースでは &lt;code&gt;[[Get]]&lt;/code&gt; 、ターゲットでは &lt;code&gt;[[Set]]&lt;/code&gt; を使用するため、ゲッターとセッターを呼び出します。したがって、新しいプロパティを単にコピーまたは定義するのではなく、プロパティを&lt;em&gt;割り当て&lt;/em&gt;ます。これにより、マージソースにゲッターが含まれている場合、新しいプロパティをプロトタイプにマージするのに適さなくなる可能性があります。列挙可能性を含むプロパティ定義をプロトタイプにコピーするには、代わりに&lt;a href=&quot;getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e14de3855af35d97b2ebf25374631842bd03f5bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.fromEntries()&lt;/code&gt; method takes a list of key-value pairs and returns a new object whose properties are given by those entries. The &lt;var&gt;iterable&lt;/var&gt; argument is expected to be an object that implements an &lt;code&gt;@@iterator&lt;/code&gt; method, that returns an iterator object, that produces a two element array-like object, whose first element is a value that will be used as a property key, and whose second element is the value to associate with that property key.</source>
          <target state="translated">&lt;code&gt;Object.fromEntries()&lt;/code&gt; メソッドは、キーと値のペアのリストを受け取り、その特性がそれらのエントリによって与えられる新しいオブジェクトを返します。 &lt;var&gt;iterable&lt;/var&gt; 引数は実装しているオブジェクトであると予想される &lt;code&gt;@@iterator&lt;/code&gt; 2つの素子アレイ状オブジェクト、最初のエレメントプロパティのキーとして使用される値であり、そのを生成するイテレータオブジェクトを返すメソッド、 2番目の要素は、そのプロパティキーに関連付ける値です。</target>
        </trans-unit>
        <trans-unit id="83c886659af8759625cee34b1b5a144964eeb5f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; method returns an array of all properties (including &lt;em&gt;non-&lt;/em&gt;enumerable properties except for those which use Symbol) found directly upon a given object.</source>
          <target state="translated">&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; メソッドの戻り（含むすべてのプロパティの配列&lt;em&gt;非&lt;/em&gt;記号を使用するものを除いて列挙特性）が指定されたオブジェクト上に直接発見しました。</target>
        </trans-unit>
        <trans-unit id="d7806b442903437f717194b67dd57fdab9f58a7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.isExtensible()&lt;/code&gt; method determines if an object is extensible (whether it can have new properties added to it).</source>
          <target state="translated">&lt;code&gt;Object.isExtensible()&lt;/code&gt; の目的は、拡張可能であればこの方法は、（それに追加された新しい特性を有することができるかどうか）を判定する。</target>
        </trans-unit>
        <trans-unit id="9f6b67810c2518bd202a149b5865b7c11bb99c60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; constructor creates an object wrapper for the given value. If the value is &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, it will create and return an empty object, otherwise, it will return an object of a Type that corresponds to the given value. If the value is an object already, it will return the value.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; コンストラクタは、指定された値のオブジェクトラッパーを作成します。値が&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; の&lt;/a&gt;場合は、空のオブジェクトを作成して返します。それ以外の場合は、指定された値に対応するTypeのオブジェクトを返します。値がすでにオブジェクトである場合、値を返します。</target>
        </trans-unit>
        <trans-unit id="0ecd1d83517590405260a28595c7ce53cb4fe8be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise.all(&lt;var&gt;iterable&lt;/var&gt;)&lt;/code&gt; method returns a single &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that resolves when all of the promises in the &lt;var&gt;iterable&lt;/var&gt; argument have resolved or when the &lt;var&gt;iterable&lt;/var&gt; argument contains no promises. It rejects with the reason of the first promise that rejects.</source>
          <target state="translated">&lt;code&gt;Promise.all(&lt;var&gt;iterable&lt;/var&gt;)&lt;/code&gt; メソッドは、単一返す&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;解決さがで約束のすべてのときに &lt;var&gt;iterable&lt;/var&gt; 引数が解決した場合、または &lt;var&gt;iterable&lt;/var&gt; 引数は何の約束が含まれていません。それは拒否する最初の約束の理由で拒否します。</target>
        </trans-unit>
        <trans-unit id="39c2c4a2b5c12a456ec7e8862269d084744f1772" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; オブジェクトは、最終的に完了（または失敗）非同期動作の、およびその結果の値を表します。</target>
        </trans-unit>
        <trans-unit id="318ea5baaf062d85eb4545793a6a066d3fc803d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.&lt;/code&gt;getOwnPropertyDescriptor method returns a property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; otherwise. The only difference to &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt; is how non-object targets are handled.</source>
          <target state="translated">&lt;code&gt;Reflect.&lt;/code&gt; getOwnPropertyDescriptorメソッドは、指定されたプロパティがオブジェクトに存在する場合はそのプロパティ記述子を返し、それ以外の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;返します。&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt;との唯一の違いは、非オブジェクトターゲットの処理方法です。</target>
        </trans-unit>
        <trans-unit id="a33bbe15250b58ff2ee2b3186da5ace119ecefbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.defineProperty&lt;/code&gt; method allows precise addition to or modification of a property on an object. For more details see the &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt; which is similar. &lt;code&gt;Object.defineProperty&lt;/code&gt; returns the object or throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the property has not been successfully defined. &lt;code&gt;Reflect.defineProperty&lt;/code&gt;, however, simply returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully defined.</source>
          <target state="translated">&lt;code&gt;Reflect.defineProperty&lt;/code&gt; の方法は、正確に加えて、またはオブジェクトのプロパティの変更を可能にします。詳細については、同様の&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; &lt;/a&gt;を参照してください。 &lt;code&gt;Object.defineProperty&lt;/code&gt; はオブジェクトを返すか、プロパティが正常に定義されていない場合は&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を&lt;/a&gt;スローします。ただし、 &lt;code&gt;Reflect.defineProperty&lt;/code&gt; は、プロパティが正常に定義されたかどうかを示す&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;を返すだけです。</target>
        </trans-unit>
        <trans-unit id="6ff84b74ad3cfee0a4a3dcba8f32def3b8e5293a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.deleteProperty&lt;/code&gt; method allows you to delete a property on an object. It returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully deleted. It is almost identical to the non-strict &lt;a href=&quot;../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Reflect.deleteProperty&lt;/code&gt; の方法を使用すると、オブジェクトのプロパティを削除することができます。プロパティが正常に削除されたかどうかを示す&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;を返します。これは、厳密でない&lt;a href=&quot;../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; 演算子&lt;/a&gt;とほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="dc745270437f9326849c6d9b5e5b62f40bfa51e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.get&lt;/code&gt; method allows you to get a property on an object. It is like the &lt;a href=&quot;../../operators/property_accessors&quot;&gt;property accessor&lt;/a&gt; syntax as a function.</source>
          <target state="translated">&lt;code&gt;Reflect.get&lt;/code&gt; の方法を使用すると、オブジェクトのプロパティを取得することができます。これは、関数としての&lt;a href=&quot;../../operators/property_accessors&quot;&gt;プロパティアクセサー&lt;/a&gt;構文に似ています。</target>
        </trans-unit>
        <trans-unit id="e6d720aac72b2b70bad97973f531686e62380121" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; method returns the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">&lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; の方法戻るプロトタイプ（内部のすなわち値 &lt;code&gt;[[Prototype]]&lt;/code&gt; 指定されたオブジェクトのプロパティ）。</target>
        </trans-unit>
        <trans-unit id="6bd85fe113e748e1f2e229506163759fcafb2d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.has&lt;/code&gt; method allows you to check if a property is in an object. It works like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">&lt;code&gt;Reflect.has&lt;/code&gt; メソッドは、プロパティがオブジェクトであるかどうかをチェックすることができます。関数としての&lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 演算子の&lt;/a&gt;ように機能します。</target>
        </trans-unit>
        <trans-unit id="06008423ce51bcc45055fb5e581199b41a3ba3f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.isExtensible&lt;/code&gt; method allows you determine if an object is extensible (whether it can have new properties added to it). It is the same method as &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Reflect.isExtensible&lt;/code&gt; メソッドは、オブジェクトが（それはそれに追加された新しい性質を持つことができるかどうか）拡張可能であるかどうかを判断できます。これは&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;と同じメソッドです。</target>
        </trans-unit>
        <trans-unit id="8c4e704125f2bd3945bb47344c139beffed30016" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.ownKeys&lt;/code&gt; method returns an array of the &lt;code&gt;target&lt;/code&gt; object's own property keys. Its return value is equivalent to &lt;code&gt;&lt;a href=&quot;../object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;&lt;/a&gt;(target).concat(&lt;a href=&quot;../object/getownpropertysymbols&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/a&gt;(target))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reflect.ownKeys&lt;/code&gt; 方法は、以下の配列を返す &lt;code&gt;target&lt;/code&gt; オブジェクト自身のプロパティキーを。その戻り値は &lt;code&gt;&lt;a href=&quot;../object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;&lt;/a&gt;(target).concat(&lt;a href=&quot;../object/getownpropertysymbols&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/a&gt;(target))&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="1d0090758332458ff4b1b71b18d3d9db1d3029bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.preventExtensions&lt;/code&gt; method allows you to prevent new properties from ever being added to an object (i.e. prevents future extensions to the object). It is the same method as &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Reflect.preventExtensions&lt;/code&gt; 方法は、あなたがオブジェクト（オブジェクトへのすなわち防止、将来の拡張）に追加される新しいプロパティを防ぐことができます。&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;と同じメソッドです。</target>
        </trans-unit>
        <trans-unit id="941c3446a3199bbb99c92b8d422a069acbe089ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.set&lt;/code&gt; method allows you to set a property on an object. It does property assignment and is like the &lt;a href=&quot;../../operators/property_accessors&quot;&gt;property accessor&lt;/a&gt; syntax as a function.</source>
          <target state="translated">&lt;code&gt;Reflect.set&lt;/code&gt; の方法を使用すると、オブジェクトのプロパティを設定することができます。プロパティの割り当てを行い、関数としての&lt;a href=&quot;../../operators/property_accessors&quot;&gt;プロパティアクセサー&lt;/a&gt;構文に似ています。</target>
        </trans-unit>
        <trans-unit id="b304e4df14207b021ae9f7976187625bee6b192e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; method changes the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">&lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; の方法は、プロトタイプ（内部のすなわち値変更 &lt;code&gt;[[Prototype]]&lt;/code&gt; 指定されたオブジェクトのプロパティ）。</target>
        </trans-unit>
        <trans-unit id="28768566b9ebbc5b1f7805df7f78edafa41f4934" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect&lt;/code&gt; object provides the following static functions which have the same names as the &lt;a href=&quot;proxy/handler&quot;&gt;proxy handler methods&lt;/a&gt;. Some of these methods are the same as corresponding methods on &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Reflect&lt;/code&gt; オブジェクトと同じ名称有する次の静的機能を提供する&lt;a href=&quot;proxy/handler&quot;&gt;プロキシハンドラ方法&lt;/a&gt;。これらのメソッドの一部は、&lt;a href=&quot;object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; の&lt;/a&gt;対応するメソッドと同じです。</target>
        </trans-unit>
        <trans-unit id="2ee5beb66ffe8f09c8a228966b2f72b5e2e48241" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;RegExp.prototype&lt;/code&gt; のプロパティは、プロトタイプオブジェクトを表す&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;コンストラクタを。</target>
        </trans-unit>
        <trans-unit id="570d3e4c661a27c8a8ead271959b5f089f9878f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp&lt;/code&gt; constructor creates a regular expression object for matching text with a pattern.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; オブジェクトのコンストラクタは、パターンと一致するテキストのための正規表現オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="60b96d37624533a85e7433edd6782b3fbb87a5b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp&lt;/code&gt; constructor no longer throws when the first argument is a &lt;code&gt;RegExp&lt;/code&gt; and the second argument is present. Introduces Unicode and sticky flags.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; 最初の引数がある場合、コンストラクタはもはやスローない &lt;code&gt;RegExp&lt;/code&gt; と2番目の引数が存在します。Unicodeとスティッキーフラグを導入します。</target>
        </trans-unit>
        <trans-unit id="5e2198ec631b23c3a344779780debe7b84c5223b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ResultObject&lt;/code&gt;'s instance member is then accessed, and the contained exported function invoked.</source>
          <target state="translated">次に &lt;code&gt;ResultObject&lt;/code&gt; のインスタンスメンバーにアクセスし、含まれているエクスポートされた関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4ea8be37a07ffe14772a2854fd53fa75fb450212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; object lets you store unique values of any type, whether &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt; or object references.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクトはかどうか、あなたはどのようなタイプのユニークな値を格納することができます&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;プリミティブ値&lt;/a&gt;またはオブジェクト参照。</target>
        </trans-unit>
        <trans-unit id="34880c0508906d43d019cb591c6da56579f52f0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="a598c08aaa8ecf5c7c480e2837e96572304b6cef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt;&lt;strong&gt;iterator&lt;/strong&gt; function, which is the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; function by default.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; &lt;strong&gt;イテレータ&lt;/strong&gt;である機能、&lt;a href=&quot;values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;デフォルトで機能。</target>
        </trans-unit>
        <trans-unit id="0c71fb0fbfa27a6157213819367f7b11882997d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt; のプロパティは、プロトタイプを表し&lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; の&lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="ea06a3e12d4141d776d10f098513731c0cdd10c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedArrayBuffer&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; の値がコンストラクタのlengthプロパティは1です。</target>
        </trans-unit>
        <trans-unit id="672f134bc8206393caf4630923f5c2950d97f1fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object is used to represent a generic, fixed-length raw binary data buffer, similar to the &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; object, but in a way that they can be used to create views on shared memory. Unlike an &lt;code&gt;ArrayBuffer&lt;/code&gt;, a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; cannot become detached.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; のオブジェクトは次のように一般的な、固定長の生のバイナリデータバッファ、表すために使用される&lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;オブジェクトを、彼らは、共有メモリ上のビューを作成するために使用することができる方法です。異なり &lt;code&gt;ArrayBuffer&lt;/code&gt; 、 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; が外れることはできません。</target>
        </trans-unit>
        <trans-unit id="88ef77a0e9fb197ba353ecea29e41bbe0a4b15c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String.fromCodePoint&lt;/code&gt; method has been added to ECMAScript 2015 and may not be supported in all web browsers or environments yet. Use the code below for a polyfill:</source>
          <target state="translated">&lt;code&gt;String.fromCodePoint&lt;/code&gt; の方法は、ECMAScriptの2015年に追加されていて、まだすべてのWebブラウザや環境ではサポートされない場合があります。以下のコードをポリフィルに使用します。</target>
        </trans-unit>
        <trans-unit id="ba63f93ea5376f91b5fd6a2f50242a83a2779f6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String.prototype&lt;/code&gt; property represents the &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; prototype object.</source>
          <target state="translated">&lt;code&gt;String.prototype&lt;/code&gt; のプロパティは表し&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="5e7d31df8e58e56f31f727605912a01954afb65e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; global object is a constructor for strings or a sequence of characters.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; グローバルオブジェクトは、文字列や文字列のコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="4ab9d2be63079545f5c322e7a163da5705fd8972" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; instance methods are also available in Firefox as of JavaScript 1.6 (&lt;strong&gt;not&lt;/strong&gt; part of the ECMAScript standard) on the &lt;code&gt;String&lt;/code&gt; object for applying &lt;code&gt;String&lt;/code&gt; methods to any object:</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; インスタンスメソッドでは、JavaScript 1.6（のようにFirefoxでも利用可能で&lt;strong&gt;はない&lt;/strong&gt;でのECMAScript標準の一部） &lt;code&gt;String&lt;/code&gt; 適用するためのオブジェクト &lt;code&gt;String&lt;/code&gt; 任意のオブジェクトにメソッドを：</target>
        </trans-unit>
        <trans-unit id="9dbc42b5210da7f1b1f51151e4fb3f0d147cb43a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol()&lt;/code&gt; function returns a value of type &lt;strong&gt;symbol&lt;/strong&gt;, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class but is incomplete as a constructor because it does not support the syntax &quot;&lt;code&gt;new Symbol()&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;Symbol()&lt;/code&gt; 関数は、式の値を返し&lt;strong&gt;シンボルを&lt;/strong&gt;、組み込みオブジェクトのいくつかのメンバーを公開する静的特性を有する、グローバルシンボルレジストリを露出静的メソッドを有し、オブジェクトクラス内蔵しかし理由コンストラクタとして不完全である似ています構文 &quot; &lt;code&gt;new Symbol()&lt;/code&gt; &quot; はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="2eeb1bb20ef431cf563f2cbfb734b8f4577eedef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol.hasInstance&lt;/code&gt; well-known symbol is used to determine if a constructor object recognizes an object as its instance. The &lt;a href=&quot;../../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/a&gt; operator's behavior can be customized by this symbol.</source>
          <target state="translated">&lt;code&gt;Symbol.hasInstance&lt;/code&gt; よく知られているシンボルは、コンストラクタオブジェクトがインスタンスとしてオブジェクトを認識するかどうかを決定するために使用されます。&lt;a href=&quot;../../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/a&gt;演算子の動作は、この記号でカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="b60212268a8a6dfd5a6005f758a9d98574b86f91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; well-known symbol is used to configure if an object should be flattened to its array elements when using the &lt;a href=&quot;../array/concat&quot;&gt;&lt;code&gt;Array.prototype.concat()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; 使用する場合、オブジェクトは、その配列要素に平坦化されなければならない場合によく知られているシンボルを構成するために使用される&lt;a href=&quot;../array/concat&quot;&gt; &lt;code&gt;Array.prototype.concat()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="2fdffdb2718df5708641e8ddf4fc5c7a72a9011e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol.toStringTag&lt;/code&gt; well-known symbol is a string valued property that is used in the creation of the default string description of an object. It is accessed internally by the &lt;a href=&quot;../object/tostring&quot;&gt;&lt;code&gt;Object.prototype.toString()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Symbol.toStringTag&lt;/code&gt; よく知られたシンボルは、オブジェクトのデフォルトの文字列の記述の作成に使用される文字列の値を持つプロパティです。&lt;a href=&quot;../object/tostring&quot;&gt; &lt;code&gt;Object.prototype.toString()&lt;/code&gt; &lt;/a&gt;メソッドによって内部的にアクセスされます。</target>
        </trans-unit>
        <trans-unit id="17673a228ad0e13eb800ae35d1753fe2069b9f68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol.unscopables&lt;/code&gt; well-known symbol is used to specify an object value of whose own and inherited property names are excluded from the &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; environment bindings of the associated object.</source>
          <target state="translated">&lt;code&gt;Symbol.unscopables&lt;/code&gt; よく知られているシンボルは、その自身と継承されたプロパティ名から除外されるのオブジェクト値を指定するために使用される &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 、関連するオブジェクトの環境バインディングを。</target>
        </trans-unit>
        <trans-unit id="cc62c15ca64f49d9999d62a4fd880330e76b59d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTC()&lt;/code&gt; method differs from the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor in two ways.</source>
          <target state="translated">&lt;code&gt;UTC()&lt;/code&gt; メソッドが異なり&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 2つの方法でコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="f501e8c0da96de248d7c2768914219561bac1f65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Uint16Array&lt;/code&gt; typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Uint16Array&lt;/code&gt; は、アレイは、プラットフォームバイト順で16ビット符号なし整数の配列を表す型付け。バイトオーダーの制御が必要な場合は、代わりに&lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; を&lt;/a&gt;使用してください。内容は &lt;code&gt;0&lt;/code&gt; に初期化されます。いったん確立されると、オブジェクトのメソッドを使用するか、標準の配列インデックス構文を使用して（つまり、ブラケット表記を使用して）、配列内の要素を参照できます。</target>
        </trans-unit>
        <trans-unit id="4a55ce5fe99c56fdceacc73b4b134514a93c3d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Uint32Array&lt;/code&gt; typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Uint32Array&lt;/code&gt; は、アレイは、プラットフォームのバイト順の32ビット符号なし整数の配列を表す型付け。バイトオーダーの制御が必要な場合は、代わりに&lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; を&lt;/a&gt;使用してください。内容は &lt;code&gt;0&lt;/code&gt; に初期化されます。いったん確立されると、オブジェクトのメソッドを使用するか、標準の配列インデックス構文を使用して（つまり、ブラケット表記を使用して）、配列内の要素を参照できます。</target>
        </trans-unit>
        <trans-unit id="6758579c79dd87294c5dc236825268d167d8b7b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Uint8Array&lt;/code&gt; typed array represents an array of 8-bit unsigned integers. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Uint8Array&lt;/code&gt; は、アレイは、8ビット符号なし整数の配列を表す型付け。内容は &lt;code&gt;0&lt;/code&gt; に初期化されます。いったん確立されると、オブジェクトのメソッドを使用するか、標準の配列インデックス構文を使用して（つまり、ブラケット表記を使用して）、配列内の要素を参照できます。</target>
        </trans-unit>
        <trans-unit id="becefe67b2c4fe9672fcfd14c35de7d3fc5a570d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Uint8ClampedArray&lt;/code&gt; typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Uint8ClampedArray&lt;/code&gt; は、アレイ0-255にクランプ8ビット符号なし整数の配列を表す型付け [0,255]の範囲外の値を指定した場合は、代わりに0または255が設定されます。非整数を指定すると、最も近い整数が設定されます。内容は &lt;code&gt;0&lt;/code&gt; に初期化されます。いったん確立されると、オブジェクトのメソッドを使用するか、標準の配列インデックス構文を使用して（つまり、ブラケット表記を使用して）、配列内の要素を参照できます。</target>
        </trans-unit>
        <trans-unit id="df457713e029746440c719b5ccfea9d29d4cb9ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakMap&lt;/code&gt; object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; のオブジェクトは、キーが弱参照されたキー/値ペアのコレクションです。キーはオブジェクトでなければならず、値は任意の値にすることができます。</target>
        </trans-unit>
        <trans-unit id="9d06504624ab1755b379a233018475c52e069789" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakMap&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5c11f82ca68af9ed6ac53fcd220f3d8dbaaaf72d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakSet&lt;/code&gt; is &lt;em&gt;weak&lt;/em&gt;: References to objects in the collection are held weakly. If there is no other reference to an object stored in the &lt;code&gt;WeakSet&lt;/code&gt;, they can be garbage collected. That also means that there is no list of current objects stored in the collection. &lt;code&gt;WeakSets&lt;/code&gt; are not enumerable.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; がある&lt;em&gt;弱い&lt;/em&gt;：コレクション内のオブジェクトへの参照が弱く保持されています。 &lt;code&gt;WeakSet&lt;/code&gt; に格納されているオブジェクトへの他の参照がない場合、それらはガベージコレクションされる可能性があります。これは、コレクションに保存されている現在のオブジェクトのリストがないことも意味します。 &lt;code&gt;WeakSets&lt;/code&gt; は列挙できません。</target>
        </trans-unit>
        <trans-unit id="d5058fc0aed6629cbc33fced5d309e3ee1f7316d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakSet&lt;/code&gt; object lets you store weakly held &lt;em&gt;objects&lt;/em&gt; in a collection.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; のオブジェクトを使用すると、弱く保持保存することができます&lt;em&gt;オブジェクトを&lt;/em&gt;コレクションに。</target>
        </trans-unit>
        <trans-unit id="01d56084580640fa957fcf6427c5232652a130db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a8c89dc484707bb11be96fc5d01e0a0063acb5ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.Instance()&lt;/code&gt; constructor function can be called to synchronously instantiate a given &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object. However, the primary way to get an &lt;code&gt;Instance&lt;/code&gt; is through the asynchronous &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Instance()&lt;/code&gt; コンストラクタ関数を同期所与インスタンス化するために呼び出すことができる&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; の&lt;/a&gt;オブジェクト。ただし、 &lt;code&gt;Instance&lt;/code&gt; を取得する主な方法は、非同期の&lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;関数を使用することです。</target>
        </trans-unit>
        <trans-unit id="431715582373fc3771aab674c546503fbe9712d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.compile()&lt;/code&gt; function compiles a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; from WebAssembly binary code. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the &lt;a href=&quot;instantiate&quot;&gt;&lt;code&gt;WebAssembly.instantiate()&lt;/code&gt;&lt;/a&gt; function should be used).</source>
          <target state="translated">&lt;code&gt;WebAssembly.compile()&lt;/code&gt; 関数はコンパイル&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; WebAssemblyバイナリコードからです。この関数は、インスタンス化する前にモジュールをコンパイルする必要がある場合に役立ちます（そうでない場合は、&lt;a href=&quot;instantiate&quot;&gt; &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; &lt;/a&gt;関数を使用する必要があります）。</target>
        </trans-unit>
        <trans-unit id="88cbd7022f0dc142a0272f425d6433132bf50d15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; function compiles a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; directly from a streamed underlying source. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; function should be used).</source>
          <target state="translated">&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; 関数はコンパイル&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; の&lt;/a&gt;基礎となるソースをストリーミングから直接。この関数は、インスタンス化する前にモジュールをコンパイルする必要がある場合に役立ちます（そうでない場合は、&lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;関数を使用する必要があります）。</target>
        </trans-unit>
        <trans-unit id="08567726bd617fa9035a47d055a4d3216e2c81e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.customSections()&lt;/code&gt; function returns a copy of the contents of all custom sections in the given module with the given string name.</source>
          <target state="translated">&lt;code&gt;WebAssembly.customSections()&lt;/code&gt; 関数は、指定された文字列名を指定したモジュール内のすべてのカスタムセクションの内容のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="e0625c0520f6ee2a799a7c133d2cafd74185c195" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.exports()&lt;/code&gt; function returns an array containing descriptions of all the declared exports of the given &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebAssembly.exports()&lt;/code&gt; 関数は、指定されたすべての宣言された輸出の記述を含む配列を返し &lt;code&gt;Module&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="160b1badc18cb49f8201fc4bef67fddd7d3b9e66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.imports()&lt;/code&gt; function returns an array containing descriptions of all the declared imports of the given &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebAssembly.imports()&lt;/code&gt; 関数は、指定されたすべての宣言された輸入の記述を含む配列を返し &lt;code&gt;Module&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1e6f8615f0734b1d5bb89170d09bfbbcd77c103b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; function allows you to compile and instantiate WebAssembly code. This function has two overloads:</source>
          <target state="translated">&lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; 関数は、あなたがしてインスタンス化WebAssemblyコードをコンパイルすることができます。この関数には2つのオーバーロードがあります。</target>
        </trans-unit>
        <trans-unit id="f11662796a3c2b4d0cc4297914cb2e15741dc2ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; function compiles and instantiates a WebAssembly module directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code.</source>
          <target state="translated">&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; 関数のコンパイルとその下のソースをストリーミングから直接WebAssemblyモジュールをインスタンス化。これはwasmコードをロードするための最も効率的で最適化された方法です。</target>
        </trans-unit>
        <trans-unit id="513a4a761419c3c18faafd5f4a429e08153aa790" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.validate()&lt;/code&gt; function validates a given &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; of WebAssembly binary code, returning whether the bytes form a valid wasm module (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;WebAssembly.validate()&lt;/code&gt; 関数は、指定された検証&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型付けされた配列&lt;/a&gt;のバイトが有効wasmモジュール（形成するかどうか戻り、WebAssemblyバイナリコードを &lt;code&gt;true&lt;/code&gt; ）か否か（ &lt;code&gt;false&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b7b528dd62767beb2683a49d53c7b5236878ea86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly&lt;/code&gt; JavaScript object acts as the namespace for all &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt;-related functionality.</source>
          <target state="translated">&lt;code&gt;WebAssembly&lt;/code&gt; JavaScriptオブジェクトはすべての名前空間として機能&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt;関連の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="5f7a8cc3a9371437a23053a36f921a1730e516bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@iterator]()&lt;/code&gt; method returns a new &lt;code&gt;Iterator&lt;/code&gt; object that iterates over the code points of a String value, returning each code point as a String value.</source>
          <target state="translated">&lt;code&gt;[@@iterator]()&lt;/code&gt; メソッドの戻り新たな &lt;code&gt;Iterator&lt;/code&gt; 文字列値のコードポイントを反復処理は、文字列値として各コードポイントを返すことを目的。</target>
        </trans-unit>
        <trans-unit id="d7edbb6e8ed718ecee2482e335fb5718a48701f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@match]()&lt;/code&gt; method retrieves the matches when matching a &lt;em&gt;string&lt;/em&gt; against a &lt;em&gt;regular expression&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;[@@match]()&lt;/code&gt; に一致する場合の方法は、マッチを検索&lt;em&gt;文字列&lt;/em&gt;に対して&lt;em&gt;正規表現&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5803ecea92c3c2ee4eed4f00d6d6c5bc4cd46f5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@replace]()&lt;/code&gt; method replaces some or all matches of a &lt;code&gt;this&lt;/code&gt; pattern in a string by a &lt;code&gt;replacement&lt;/code&gt;, and returns the result of the replacement as a new string. The &lt;code&gt;replacement&lt;/code&gt; can be a string or a function to be called for each match.</source>
          <target state="translated">&lt;code&gt;[@@replace]()&lt;/code&gt; メソッドは、いくつかのまたはすべての一致置き換えられ &lt;code&gt;this&lt;/code&gt; ことにより、文字列内のパターンを &lt;code&gt;replacement&lt;/code&gt; し、新たな文字列として交換の結果を返します。 &lt;code&gt;replacement&lt;/code&gt; 、各試合のために呼ばれる文字列または関数とすることができます。</target>
        </trans-unit>
        <trans-unit id="702debe49ebbe75d5bd74b0679e78ca35620a7da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@search]()&lt;/code&gt; method executes a search for a match between a &lt;code&gt;this&lt;/code&gt; regular expression and a string.</source>
          <target state="translated">&lt;code&gt;[@@search]()&lt;/code&gt; メソッドは間のマッチの探索を実行 &lt;code&gt;this&lt;/code&gt; 正規表現と文字列。</target>
        </trans-unit>
        <trans-unit id="6b8c4cfaddc77f1249280ab915686e7bb63bc284" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@split]()&lt;/code&gt; method splits a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object into an array of strings by separating the string into substrings.</source>
          <target state="translated">&lt;code&gt;[@@split]()&lt;/code&gt; メソッドは、分割&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;のサブストリングに文字列を分離することにより、文字列の配列にオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="1a9e1a3950618acc993f18874eb3cd0cc985d8f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; method of &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; returns the primitive value of a Symbol object as a Symbol data type. The &lt;code&gt;hint&lt;/code&gt; argument is not used.</source>
          <target state="translated">&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; メソッドは、Symbolオブジェクトのプリミティブ値をSymbolデータ型として返します。 &lt;code&gt;hint&lt;/code&gt; 引数が使用されていません。</target>
        </trans-unit>
        <trans-unit id="ad1db902e858dd1bcd93073c9aef8c9165d1cf55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; method of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object returns a primitive value, that is either of type number or of type string.</source>
          <target state="translated">&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; メソッドは、数値型または文字列型のプリミティブ値を返します。</target>
        </trans-unit>
        <trans-unit id="ae55b862b874f5aa4c190fb07cb31113ac34fd4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__defineGetter__&lt;/code&gt; allows a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/get&quot;&gt;getter&lt;/a&gt; to be defined on a pre-existing object.</source>
          <target state="translated">&lt;code&gt;__defineGetter__&lt;/code&gt; が可能&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/get&quot;&gt;ゲッターは&lt;/a&gt;、既存のオブジェクトに対して定義します。</target>
        </trans-unit>
        <trans-unit id="df282761b2e5875f7eb96f9bb6d34ddc61ba61d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__defineSetter__&lt;/code&gt; method allows a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/set&quot;&gt;setter&lt;/a&gt; to be defined on a pre-existing object.</source>
          <target state="translated">&lt;code&gt;__defineSetter__&lt;/code&gt; の方法が可能&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/set&quot;&gt;セッターは&lt;/a&gt;、既存のオブジェクトに対して定義します。</target>
        </trans-unit>
        <trans-unit id="88656395b7a7a6c591f6a0068a0e8a228ecb8c3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; getter function exposes the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object. For objects created using an object literal, this value is &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt;. For objects created using array literals, this value is &lt;a href=&quot;../array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt;. For functions, this value is &lt;a href=&quot;../function/prototype&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt;. For objects created using &lt;code&gt;new fun&lt;/code&gt;, where &lt;code&gt;fun&lt;/code&gt; is one of the built-in constructor functions provided by JavaScript (&lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, and so on &amp;mdash; including new constructors added as JavaScript evolves), this value is always &lt;code&gt;fun.prototype&lt;/code&gt;. For objects created using &lt;code&gt;new fun&lt;/code&gt;, where &lt;code&gt;fun&lt;/code&gt; is a function defined in a script, this value is the value of &lt;code&gt;fun.prototype&lt;/code&gt;. (That is, if the constructor didn't return an other object explicitly, or the &lt;code&gt;fun.prototype&lt;/code&gt; has been reassigned since the instance was created).</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; ゲッタ機能は内部の値を公開し &lt;code&gt;[[Prototype]]&lt;/code&gt; オブジェクトのを。オブジェクトリテラルを使用して作成されたオブジェクトの場合、この値は&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;です。配列リテラルを使用して作成されたオブジェクトの場合、この値は&lt;a href=&quot;../array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt;です。関数の場合、この値は&lt;a href=&quot;../function/prototype&quot;&gt; &lt;code&gt;Function.prototype&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;new fun&lt;/code&gt; を使用して作成されたオブジェクトの場合、 &lt;code&gt;fun&lt;/code&gt; はJavaScriptによって提供される組み込みコンストラクタ関数の1つです（&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; )&lt;/a&gt;など（JavaScriptの進化に伴って追加された新しいコンストラクターを含む）、この値は常に &lt;code&gt;fun.prototype&lt;/code&gt; です。使用して作成されたオブジェクトの &lt;code&gt;new fun&lt;/code&gt; 、 &lt;code&gt;fun&lt;/code&gt; スクリプト内で定義された関数であるが、この値はの値です &lt;code&gt;fun.prototype&lt;/code&gt; 。（つまり、コンストラクターが他のオブジェクトを明示的に返さなかった場合、またはインスタンスの作成後に &lt;code&gt;fun.prototype&lt;/code&gt; が再割り当てされた場合）。</target>
        </trans-unit>
        <trans-unit id="9a4587848d9799cdf3cf0840f3aad39f67d2da66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; property can also be used in an object literal definition to set the object &lt;code&gt;[[Prototype]]&lt;/code&gt; on creation, as an alternative to &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt;. See: &lt;a href=&quot;../../operators/object_initializer&quot;&gt;object initializer / literal syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; プロパティは、オブジェクトを設定するオブジェクトリテラルの定義に使用することができる &lt;code&gt;[[Prototype]]&lt;/code&gt; に代わるものとして、作成時に&lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt;。参照：&lt;a href=&quot;../../operators/object_initializer&quot;&gt;オブジェクト初期化子/リテラル​​構文&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d227e2d5482783082d004650b511f91313f8e959" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; property is a simple accessor property on &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; consisting of a getter and setter function. A property access for &lt;code&gt;__proto__&lt;/code&gt; that eventually consults &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; will find this property, but an access that does not consult &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; will not find it. If some other &lt;code&gt;__proto__&lt;/code&gt; property is found before &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; is consulted, that property will hide the one found on &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; プロパティは、上の単純なアクセサプロパティで&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;ゲッターとセッター関数からなります。プロパティにアクセス &lt;code&gt;__proto__&lt;/code&gt; 最終的に相談する&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;、このプロパティを見つけるだろうが、相談していないアクセス&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;それを見つけることができません。他のいくつかの場合 &lt;code&gt;__proto__&lt;/code&gt; の前に発見されたプロパティ&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;相談され、1が非表示になり、そのプロパティがで見つかった&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="79b845be957203ffd43b7971d99febd2b76a1f2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; property of &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; is an accessor property (a getter function and a setter function) that exposes the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; (either an object or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;) of the object through which it is accessed.</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; のプロパティ&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt;内部露出さアクセサプロパティ（getter関数とsetter関数）である &lt;code&gt;[[Prototype]]&lt;/code&gt; （オブジェクトまたはいずれか&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;それがアクセスされ、それを通して物体のを）。</target>
        </trans-unit>
        <trans-unit id="073f9279702f70da18b8d56744e49fc289cd7b00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; setter allows the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object to be mutated. The object must be extensible according to &lt;a href=&quot;isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;: if it is not, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown. The value provided must be an object or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. Providing any other value will do nothing.</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; セッターができ &lt;code&gt;[[Prototype]]&lt;/code&gt; オブジェクトを変異させます。オブジェクトは&lt;a href=&quot;isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;に従って拡張可能である必要があります。拡張可能でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。指定する値は、オブジェクトまたは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;である必要があります。他の値を指定しても何も起こりません。</target>
        </trans-unit>
        <trans-unit id="bcffaf9d58caee22bc68a42b2ea1dc4874960802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;anchor()&lt;/code&gt; method creates an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML anchor element that is used as a hypertext target.</source>
          <target state="translated">&lt;code&gt;anchor()&lt;/code&gt; メソッドを作成&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;/a&gt;ハイパーテキストターゲットとして使用されるHTMLアンカーエレメント。</target>
        </trans-unit>
        <trans-unit id="301e17caff65a70e4a97e5350f7b3f0e8277e90f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apply&lt;/code&gt; method can return any value.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; 方法は任意の値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="651ec3657f151b026dde895f6eebe20fcc7c3a26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments.callee&lt;/code&gt; property contains the currently executing function.</source>
          <target state="translated">&lt;code&gt;arguments.callee&lt;/code&gt; のプロパティは、現在実行中の関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="c1aa534c48a7543729c424e8c8ec09cadd669f68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments.length&lt;/code&gt; property contains the number of arguments passed to the function.</source>
          <target state="translated">&lt;code&gt;arguments.length&lt;/code&gt; をプロパティは、関数に渡される引数の数が含まれています。</target>
        </trans-unit>
        <trans-unit id="59bbb7f7119de36cfcf32641ad6d77b38553ba5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="cddfc2bc8a7e8c4c52b64a81d0fc5361db444af6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object can be used in conjunction with &lt;a href=&quot;rest_parameters&quot;&gt;rest&lt;/a&gt;, &lt;a href=&quot;default_parameters&quot;&gt;default&lt;/a&gt;, and &lt;a href=&quot;../operators/destructuring_assignment&quot;&gt;destructured&lt;/a&gt; parameters.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; オブジェクトはと組み合わせて使用することができます&lt;a href=&quot;rest_parameters&quot;&gt;残り&lt;/a&gt;、&lt;a href=&quot;default_parameters&quot;&gt;デフォルト&lt;/a&gt;、および&lt;a href=&quot;../operators/destructuring_assignment&quot;&gt;破壊さ&lt;/a&gt;パラメータ。</target>
        </trans-unit>
        <trans-unit id="a141af77cbe04a88a45af296fd49cc1fdd744329" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object is a local variable available within all non-&lt;a href=&quot;arrow_functions&quot;&gt;arrow&lt;/a&gt; functions. You can refer to a function's arguments inside that function by using its &lt;code&gt;arguments&lt;/code&gt; object. It has entries for each argument the function was called with, with the first entry's index at 0.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; オブジェクトは、すべての非内で利用可能なローカル変数である&lt;a href=&quot;arrow_functions&quot;&gt;矢印&lt;/a&gt;機能。 &lt;code&gt;arguments&lt;/code&gt; オブジェクトを使用して、関数内の関数の引数を参照できます。関数が呼び出された各引数のエントリがあり、最初のエントリのインデックスは0です。</target>
        </trans-unit>
        <trans-unit id="60575e89f78ff2e0d50e081c0acd7b31a68e8313" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object is not an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;. It is similar, but does not have any &lt;code&gt;Array&lt;/code&gt; properties except &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt;. For example, it does not have the &lt;code&gt;&lt;a href=&quot;../global_objects/array/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; method. However, it can be converted to a real &lt;code&gt;Array&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; オブジェクトではありません&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。これは似ていますが、 &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 以外の &lt;code&gt;Array&lt;/code&gt; プロパティはありません。たとえば、 &lt;code&gt;&lt;a href=&quot;../global_objects/array/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; メソッドはありません。ただし、実際の &lt;code&gt;Array&lt;/code&gt; 変換できます。</target>
        </trans-unit>
        <trans-unit id="3dd0f883876fb508ee5f1ca7705e886193257634" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object is useful for functions called with more arguments than they are formally declared to accept. This technique is useful for functions that can be passed a variable number of arguments, such as &lt;code&gt;&lt;a href=&quot;../global_objects/math/min&quot;&gt;Math.min()&lt;/a&gt;&lt;/code&gt;. This example function accepts any number of string arguments and returns the longest one:</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; オブジェクトは、彼らが正式に受け入れるように宣言されているよりも多くの引数で呼び出された関数のために有用です。この手法は、 &lt;code&gt;&lt;a href=&quot;../global_objects/math/min&quot;&gt;Math.min()&lt;/a&gt;&lt;/code&gt; などの可変数の引数を渡すことができる関数に役立ちます。このサンプル関数は、任意の数の文字列引数を受け入れ、最も長い引数を返します。</target>
        </trans-unit>
        <trans-unit id="50f2fe5d7c6bfb8cfe3c7ec7d417908818ff38e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async function&lt;/code&gt; defines an async function expression.</source>
          <target state="translated">&lt;code&gt;async function&lt;/code&gt; 非同期関数式を定義します。</target>
        </trans-unit>
        <trans-unit id="e4765d37e0ea2da1075b6c56191e186797071e82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async function&lt;/code&gt; keyword can be used to define &lt;code&gt;async&lt;/code&gt; functions inside expressions.</source>
          <target state="translated">&lt;code&gt;async function&lt;/code&gt; キーワードを定義するために使用することができる &lt;code&gt;async&lt;/code&gt; 式の内部で機能します。</target>
        </trans-unit>
        <trans-unit id="41545b3d9faec85b5211c3d912f75615a0f76938" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;await&lt;/code&gt; expression causes &lt;code&gt;async&lt;/code&gt; function execution to pause until a &lt;code&gt;Promise&lt;/code&gt; is resolved, that is fulfilled or rejected, and to resume execution of the &lt;code&gt;async&lt;/code&gt; function after fulfillment. When resumed, the value of the &lt;code&gt;await&lt;/code&gt; expression is that of the fulfilled &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; 式が原因 &lt;code&gt;async&lt;/code&gt; まで、機能の実行を一時停止する &lt;code&gt;Promise&lt;/code&gt; 果たさまたは拒否、との実行を再開していること、解決される &lt;code&gt;async&lt;/code&gt; 履行後に機能を。再開すると、 &lt;code&gt;await&lt;/code&gt; 式の値は、満たされた &lt;code&gt;Promise&lt;/code&gt; の値になります。</target>
        </trans-unit>
        <trans-unit id="3c1fc437d45803033cc9f40384b0bba97c9f9319" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;await&lt;/code&gt; operator is used to wait for a &lt;a href=&quot;../global_objects/promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;. It can only be used inside an &lt;a href=&quot;../statements/async_function&quot;&gt;&lt;code&gt;async function&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; 演算子を待つために使用される&lt;a href=&quot;../global_objects/promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;../statements/async_function&quot;&gt; &lt;code&gt;async function&lt;/code&gt; &lt;/a&gt;内でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="3b476f578e38d80f45dbe153e1487f74e1f2f140" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;big()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big&quot;&gt;&lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in a big font.</source>
          <target state="translated">&lt;code&gt;big()&lt;/code&gt; メソッドを作成し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big&quot;&gt; &lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt; &lt;/a&gt;大きなフォントで表示される文字列の原因となるHTML要素を。</target>
        </trans-unit>
        <trans-unit id="3af4ea81fb69059eb53ae61ff126bfcb192cbde2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;big()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;big&amp;gt;str&amp;lt;/big&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;big()&lt;/code&gt; メソッドは文字列埋め込み &lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt; タグ： &lt;code&gt;&quot;&amp;lt;big&amp;gt;str&amp;lt;/big&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a8e00a25499e30efadb3dddfe9a14410a06bc7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;bind&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="8132b3a6967af37f37dd3ef765aab50d8c11c583" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blink()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink&quot;&gt;&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to blink.</source>
          <target state="translated">&lt;code&gt;blink()&lt;/code&gt; メソッドを作成します&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink&quot;&gt; &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; &lt;/a&gt;点滅に文字列を起こしHTML要素を。</target>
        </trans-unit>
        <trans-unit id="3cd0f81d248508c433f8fce895a74aa073df7ead" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blink()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;blink&amp;gt;str&amp;lt;/blink&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;blink()&lt;/code&gt; メソッドは、文字列埋め込み &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; タグ： &lt;code&gt;&quot;&amp;lt;blink&amp;gt;str&amp;lt;/blink&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d21b9bdcf585076eb4f96378bf162b67dd2602a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bold()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b&quot;&gt;&lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as bold.</source>
          <target state="translated">&lt;code&gt;bold()&lt;/code&gt; メソッドを作成し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b&quot;&gt; &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; &lt;/a&gt;太字として表示される文字列を引き起こすHTML要素。</target>
        </trans-unit>
        <trans-unit id="711ba8bfc713db15b64fe905729caa25c32b4e76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bold()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;b&amp;gt;str&amp;lt;/b&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bold()&lt;/code&gt; メソッドは、文字列埋め込み &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; タグ： &lt;code&gt;&quot;&amp;lt;b&amp;gt;str&amp;lt;/b&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7441f09fd242afe09a0870fa34657501f6b21c35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break&lt;/code&gt; statement includes an optional label that allows the program to break out of a labeled statement. The &lt;code&gt;break&lt;/code&gt; statement needs to be nested within the referenced label. The labeled statement can be any &lt;a href=&quot;block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; statement; it does not have to be preceded by a loop statement.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 文は、プログラムがラベル付き文から抜け出すことを可能にするオプションのラベルを含んでいます。 &lt;code&gt;break&lt;/code&gt; ステートメントは、参照ラベル内にネストする必要があります。ラベル付きステートメントは任意の&lt;a href=&quot;block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt;ステートメントにすることができます。ループ文の前に置く必要はありません。</target>
        </trans-unit>
        <trans-unit id="206dae9becb9d9cba3f7116dc25d9ec0b751721a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; accessor property represents the &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; referenced by the &lt;code&gt;DataView&lt;/code&gt; at construction time.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; プロパティアクセサは表し&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; は&lt;/a&gt;によって参照 &lt;code&gt;DataView&lt;/code&gt; 構築時に。</target>
        </trans-unit>
        <trans-unit id="77529542568f7acca92b139773062db33079b177" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; accessor property represents the &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; referenced by a &lt;em&gt;TypedArray&lt;/em&gt; at construction time.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; アクセサプロパティが表す&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;によって参照&lt;em&gt;TypedArray&lt;/em&gt;建設時に。</target>
        </trans-unit>
        <trans-unit id="dd4770c8b1ba9535e191c0571cc7297624275087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when the &lt;code&gt;DataView&lt;/code&gt; is constructed and cannot be changed.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; プロパティは、その設定アクセサ関数れるアクセサプロパティです &lt;code&gt;undefined&lt;/code&gt; あなただけのこのプロパティを読み取ることができることを意味し、。この値は、 &lt;code&gt;DataView&lt;/code&gt; の構築時に確立され、変更できません。</target>
        </trans-unit>
        <trans-unit id="f46fe19984b1ea8a0fee47a449a7734c0f702ff4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when the &lt;em&gt;TypedArray&lt;/em&gt; is constructed and cannot be changed. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; プロパティは、その設定アクセサ関数れるアクセサプロパティです &lt;code&gt;undefined&lt;/code&gt; あなただけのこのプロパティを読み取ることができることを意味し、。この値は、&lt;em&gt;TypedArrayの&lt;/em&gt;構築時に&lt;em&gt;設定&lt;/em&gt;され、変更できません。&lt;em&gt;TypedArray&lt;/em&gt;は&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArrayオブジェクトの&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="bc8aa27ef1110bedfc53d88715e356c0dad6c6ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; prototype property of the &lt;code&gt;&lt;a href=&quot;../memory&quot;&gt;Memory&lt;/a&gt;&lt;/code&gt; object returns the buffer contained in the memory.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../memory&quot;&gt;Memory&lt;/a&gt;&lt;/code&gt; オブジェクトの &lt;code&gt;buffer&lt;/code&gt; prototypeプロパティは、メモリに含まれているバッファを返します。</target>
        </trans-unit>
        <trans-unit id="2b3644bd31d44382ba2f6d01348490277a56018e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; accessor property represents the length (in bytes) of a typed array.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; プロパティアクセサは、型指定された配列の長さ（バイト単位）を表します。</target>
        </trans-unit>
        <trans-unit id="6460908b1dcbbf48b93d019df7de155e9901924c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; accessor property represents the length (in bytes) of this view from the start of its &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; プロパティアクセサは、その開始から、この図の長さ（バイト単位）を表す&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2d892f875b973935b0c6f518125a00e538ba61fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when a &lt;em&gt;TypedArray&lt;/em&gt; is constructed and cannot be changed. If the &lt;em&gt;TypedArray&lt;/em&gt; is not specifying an &lt;code&gt;byteOffset&lt;/code&gt; or a &lt;code&gt;length&lt;/code&gt;, the &lt;code&gt;length&lt;/code&gt; of the referenced &lt;code&gt;ArrayBuffer&lt;/code&gt; will be returned. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; プロパティは、その設定アクセサ関数れるアクセサプロパティです &lt;code&gt;undefined&lt;/code&gt; あなただけのこのプロパティを読み取ることができることを意味し、。この値は、&lt;em&gt;TypedArrayの&lt;/em&gt;構築時に&lt;em&gt;設定&lt;/em&gt;され、変更できません。場合&lt;em&gt;TypedArrayが&lt;/em&gt;指定されていない &lt;code&gt;byteOffset&lt;/code&gt; 又は &lt;code&gt;length&lt;/code&gt; 、 &lt;code&gt;length&lt;/code&gt; 参照の &lt;code&gt;ArrayBuffer&lt;/code&gt; が返されます。&lt;em&gt;TypedArray&lt;/em&gt;は&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArrayオブジェクトの&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="32d789cb64c689b28b5b83a993c479ec1cc29f74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when an &lt;code&gt;DataView&lt;/code&gt; is constructed and cannot be changed. If the &lt;code&gt;DataView&lt;/code&gt; is not specifying an offset or a &lt;code&gt;byteLength&lt;/code&gt;, the &lt;code&gt;byteLength&lt;/code&gt; of the referenced &lt;code&gt;ArrayBuffer&lt;/code&gt; or &lt;code&gt;SharedArrayBuffer&lt;/code&gt; will be returned.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; プロパティは、その設定アクセサ関数れるアクセサプロパティです &lt;code&gt;undefined&lt;/code&gt; あなただけのこのプロパティを読み取ることができることを意味し、。この値は、 &lt;code&gt;DataView&lt;/code&gt; の構築時に設定され、変更できません。場合 &lt;code&gt;DataView&lt;/code&gt; オフセットまたは指定されていない &lt;code&gt;byteLength&lt;/code&gt; 、 &lt;code&gt;byteLength&lt;/code&gt; 参照の &lt;code&gt;ArrayBuffer&lt;/code&gt; や &lt;code&gt;SharedArrayBuffer&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="f1e3f9e18e74ee4d925dabffe6ff8099c025b2c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when the array is constructed and cannot be changed. This property returns 0 if this &lt;code&gt;ArrayBuffer&lt;/code&gt; has been detached.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; プロパティは、その設定アクセサ関数れるアクセサプロパティです &lt;code&gt;undefined&lt;/code&gt; あなただけのこのプロパティを読み取ることができることを意味し、。この値は、配列の作成時に設定され、変更できません。この &lt;code&gt;ArrayBuffer&lt;/code&gt; が切り離されている場合、このプロパティは0を返します。</target>
        </trans-unit>
        <trans-unit id="a60b2d52d1d421a0ddac5ec533cb34b372b79c3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when the shared array is constructed and cannot be changed.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; プロパティは、その設定アクセサ関数れるアクセサプロパティです &lt;code&gt;undefined&lt;/code&gt; あなただけのこのプロパティを読み取ることができることを意味し、。この値は、共有配列の作成時に設定され、変更できません。</target>
        </trans-unit>
        <trans-unit id="b9fd260a7fdf1f5db1cc7053ed22822cdd5c08a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; accessor property represents the offset (in bytes) of a typed array from the start of its &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; プロパティアクセサは、その開始から型指定された配列のオフセット（バイト単位）を表す&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="01cb971b3e065fee20d5145cfdcd4f713fe96188" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; accessor property represents the offset (in bytes) of this view from the start of its &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; プロパティアクセサは、その開始から、この図の（バイト単位）オフセットを表す&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f0f989a6f1df903483f4b9431daa5f4336e5b6b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when a &lt;em&gt;TypedArray&lt;/em&gt; is constructed and cannot be changed.&lt;em&gt; TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; のプロパティは、その設定アクセサ関数れるアクセサプロパティです &lt;code&gt;undefined&lt;/code&gt; あなただけのこのプロパティを読み取ることができることを意味し、。この値は、&lt;em&gt;TypedArrayの&lt;/em&gt;構築時に&lt;em&gt;設定&lt;/em&gt;され、変更できません。&lt;em&gt;TypedArray&lt;/em&gt;は&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArrayオブジェクトの&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="8ed209723f3feab21d710369cd62044e2b939437" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when an &lt;code&gt;DataView&lt;/code&gt; is constructed and cannot be changed.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; のプロパティは、その設定アクセサ関数れるアクセサプロパティです &lt;code&gt;undefined&lt;/code&gt; あなただけのこのプロパティを読み取ることができることを意味し、。この値は、 &lt;code&gt;DataView&lt;/code&gt; の構築時に設定され、変更できません。</target>
        </trans-unit>
        <trans-unit id="8161aa547f93cb84296896d4e7446939d30f0ca5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call()&lt;/code&gt; allows for a function/method belonging to one object to be assigned and called for a different object.</source>
          <target state="translated">&lt;code&gt;call()&lt;/code&gt; 、異なる目的のために割り当てられたと呼ばれる1つのオブジェクトに属する関数/メソッドを可能にします。</target>
        </trans-unit>
        <trans-unit id="43da70a23074296619f70d5b37415327e2012b90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; block specifies an identifier (&lt;code&gt;e&lt;/code&gt; in the example above) that holds the value specified by the &lt;code&gt;throw&lt;/code&gt; statement. The &lt;code&gt;catch&lt;/code&gt; block is unique in that JavaScript creates this identifier when the &lt;code&gt;catch&lt;/code&gt; block is entered and it adds it to the current scope; the identifier lasts only for the duration of the &lt;code&gt;catch&lt;/code&gt; block; after the &lt;code&gt;catch&lt;/code&gt; block finishes executing, the identifier is no longer available.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; ブロックは、識別子（指定 &lt;code&gt;e&lt;/code&gt; で指定された値を保持上記の例で） &lt;code&gt;throw&lt;/code&gt; ステートメントを。 &lt;code&gt;catch&lt;/code&gt; 時にブロックはJavaScriptを有効にして識別子を作成するという点で独特である &lt;code&gt;catch&lt;/code&gt; ブロックが入力され、それが現在のスコープに追加します。識別子は、 &lt;code&gt;catch&lt;/code&gt; ブロックの期間だけ持続します。 &lt;code&gt;catch&lt;/code&gt; ブロックの実行が完了すると、識別子は使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="544645a4f8e160c0d4fe0eb4fec710546ee40c34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; method can be useful for error handling in your promise composition.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 方法は、あなたの約束組成物中のエラー処理のために有用であることができます。</target>
        </trans-unit>
        <trans-unit id="1b097bed40408ec71f2a18fa311697e6832b1b0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;charCodeAt()&lt;/code&gt; method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.</source>
          <target state="translated">&lt;code&gt;charCodeAt()&lt;/code&gt; メソッドは、指定されたインデックスのUTF-16コード単位を表す0〜65535の整数を返します。</target>
        </trans-unit>
        <trans-unit id="0eeb5286b919a18fcb89a20219f0d1f136b62b5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;class&lt;/code&gt; keyword defines a class expression.</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; キーワードは、クラスの表現を定義します。</target>
        </trans-unit>
        <trans-unit id="95985bdbf42d6b4738085044d60000c9b3583fe0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;codePointAt()&lt;/code&gt; method returns a non-negative integer that is the Unicode code point value.</source>
          <target state="translated">&lt;code&gt;codePointAt()&lt;/code&gt; メソッドは、Unicodeコードポイント値であり、負でない整数を戻します。</target>
        </trans-unit>
        <trans-unit id="9f095881f298e599ebed8633ac85c15b6650d5c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compareFunction&lt;/code&gt; can be invoked multiple times per element within the array. Depending on the &lt;code&gt;compareFunction&lt;/code&gt;'s nature, this may yield a high overhead. The more work a &lt;code&gt;compareFunction&lt;/code&gt; does and the more elements there are to sort, the wiser it may be to consider using a &lt;a href=&quot;map&quot;&gt;map&lt;/a&gt; for sorting. The idea is to traverse the array once to extract the actual values used for sorting into a temporary array, sort the temporary array and then traverse the temporary array to achieve the right order.</source>
          <target state="translated">&lt;code&gt;compareFunction&lt;/code&gt; は、アレイ内の要素ごとに複数回呼び出すことができます。 &lt;code&gt;compareFunction&lt;/code&gt; の性質によっては、これによりオーバーヘッドが高くなる場合があります。 &lt;code&gt;compareFunction&lt;/code&gt; が行う作業が多く、ソートする要素が多いほど、ソートに&lt;a href=&quot;map&quot;&gt;マップ&lt;/a&gt;を使用することを検討するほうが賢明です。アイデアは、配列を一度トラバースして、一時配列へのソートに使用される実際の値を抽出し、一時配列をソートしてから、一時配列をトラバースして正しい順序を実現することです。</target>
        </trans-unit>
        <trans-unit id="cf4d7fdca68be4460dc0d605575caa1e51184ec2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compile&lt;/code&gt; method is deprecated. You can just use the &lt;code&gt;RegExp&lt;/code&gt; constructor to achieve the same effect.</source>
          <target state="translated">&lt;code&gt;compile&lt;/code&gt; 方法が推奨されていません。 &lt;code&gt;RegExp&lt;/code&gt; コンストラクターを使用するだけで同じ効果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="d59dd5e2aefdc347b412f036231fce35bb1e6ab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concat()&lt;/code&gt; function concatenates the string arguments to the calling string and returns a new string. Changes to the original string or the returned string don't affect the other. If the arguments are not of the type string, they are converted to string values before concatenating.</source>
          <target state="translated">&lt;code&gt;concat()&lt;/code&gt; 関数は、呼び出し元の文字列に文字列引数を連結し、新しい文字列を返します。元の文字列または返された文字列を変更しても、他の文字列には影響しません。引数が文字列型ではない場合、それらは連結する前に文字列値に変換されます。</target>
        </trans-unit>
        <trans-unit id="261563fef63b3d1ff27f440311aef252e6157691" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concat()&lt;/code&gt; method concatenates the string arguments to the calling string and returns a new string.</source>
          <target state="translated">&lt;code&gt;concat()&lt;/code&gt; メソッドを呼び出して文字列に文字列引数を連結し、新しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="8565512ca78d2e185bde3d8a44e3082d5f9dcf70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concat&lt;/code&gt; method creates a new array consisting of the elements in the object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array). It does not recurse into nested array arguments.</source>
          <target state="translated">&lt;code&gt;concat&lt;/code&gt; 方法は、（引数が配列の場合）は、その引数の各要素、各引数の、順に続いて、それが呼び出されたオブジェクトの要素からなる新しい配列を、作成または引数自体（もし引数は配列ではありません）。ネストされた配列引数には再帰しません。</target>
        </trans-unit>
        <trans-unit id="d162ddc220f1ea4dd29d37ec734816bb9aecd40e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concat&lt;/code&gt; method does not alter &lt;code&gt;this&lt;/code&gt; or any of the arrays provided as arguments but instead returns a shallow copy that contains copies of the same elements combined from the original arrays. Elements of the original arrays are copied into the new array as follows:</source>
          <target state="translated">&lt;code&gt;concat&lt;/code&gt; 方法は変更しない &lt;code&gt;this&lt;/code&gt; や引数として提供される配列のいずれかの代わりに、元の配列から結合同じ要素のコピーを含む浅いコピーを返します。元の配列の要素は、次のように新しい配列にコピーされます。</target>
        </trans-unit>
        <trans-unit id="d8988f26c17a8216d8f55ba340fae86fc60ab716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configurable&lt;/code&gt; attribute controls at the same time whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;writable&lt;/code&gt;) can be changed.</source>
          <target state="translated">&lt;code&gt;configurable&lt;/code&gt; プロパティは、オブジェクトから、および（以外の属性かどうかを削除することができるかどうかを同時に属性コントロール &lt;code&gt;value&lt;/code&gt; と &lt;code&gt;writable&lt;/code&gt; ）変更することができます。</target>
        </trans-unit>
        <trans-unit id="fb22a15f343741bfd47f5d5f28aba62a3655278a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed.</source>
          <target state="translated">&lt;code&gt;configurable&lt;/code&gt; プロパティは、オブジェクトから、および（以外の属性かどうかを削除することができるかどうか属性コントロール &lt;code&gt;writable&lt;/code&gt; ）変更することができます。</target>
        </trans-unit>
        <trans-unit id="bc29c78e83267e7702095c83fcdd3aeb6a054197" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configurable&lt;/code&gt; attribute of this property is now &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">このプロパティの &lt;code&gt;configurable&lt;/code&gt; 属性が &lt;code&gt;true&lt;/code&gt; になりました。</target>
        </trans-unit>
        <trans-unit id="7b996e34fbe9ae41a70f1d418fb5bd2ed2ed2d98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;const&lt;/code&gt; declaration creates a read-only reference to a value. It does &lt;strong&gt;not&lt;/strong&gt; mean the value it holds is immutable, just that the variable identifier cannot be reassigned. For instance, in case the content is an object, this means the object itself can still be altered. This means that you can't mutate the value stored in a variable:</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 宣言は、値への読み取り専用の参照を作成します。それが保持する値が不変であることを意味するのでは&lt;strong&gt;なく&lt;/strong&gt;、変数識別子を再割り当てできないということだけです。たとえば、コンテンツがオブジェクトの場合、オブジェクト自体は引き続き変更できることを意味します。つまり、変数に格納されている値を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="4c8eefc6ebfd279fcb1745f81c375b6511d887ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;construct&lt;/code&gt; method must return an object.</source>
          <target state="translated">&lt;code&gt;construct&lt;/code&gt; メソッドは、オブジェクトを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="ff6581a6663ce2d74d4d31e6e537b38321d0c910" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; method is a special method for creating and initializing an object created within a &lt;code&gt;&lt;a href=&quot;../statements/class&quot;&gt;class&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;constructor&lt;/code&gt; メソッドは、内部に作成されたオブジェクト作成および初期化するための特別な方法である &lt;code&gt;&lt;a href=&quot;../statements/class&quot;&gt;class&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e503dd29e531e8ca49601627a2d04a566f54a02a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; property returns a reference to the &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; constructor function that created the instance object. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;&quot;test&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;constructor&lt;/code&gt; プロパティへの参照を返し&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;インスタンスオブジェクトを作成したコンストラクタ関数。このプロパティの値は関数自体への参照であり、関数の名前を含む文字列ではないことに注意してください。この値は、 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;&quot;test&quot;&lt;/code&gt; などのプリミティブ値に対してのみ読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="e0686ce826b772555a78940c3dad4d0af25e6214" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; statement can include an optional label that allows the program to jump to the next iteration of a labeled loop statement instead of the current loop. In this case, the &lt;code&gt;continue&lt;/code&gt; statement needs to be nested within this labeled statement.</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; ステートメントは、プログラムがラベル付きループ文の代わりに、電流ループの次の繰り返しにジャンプすることを可能にするオプションのラベルを含めることができます。この場合、 &lt;code&gt;continue&lt;/code&gt; ステートメントはこのラベル付きステートメント内にネストする必要があります。</target>
        </trans-unit>
        <trans-unit id="01fb7109701916242ce2205e739220de803bdf91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;copyWithin&lt;/code&gt; function is intentionally &lt;em&gt;generic&lt;/em&gt;, it does not require that its &lt;code&gt;this&lt;/code&gt; value be an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;copyWithin&lt;/code&gt; の機能が意図的で&lt;em&gt;一般的な&lt;/em&gt;、それはそのことを必要としません &lt;code&gt;this&lt;/code&gt; 値はなる&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="9e1e66df1bad7208bb9b957a4907ea02459e4247" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;copyWithin&lt;/code&gt; method is a mutable method. It does not alter the length of &lt;code&gt;this&lt;/code&gt;, but will change its content and create new properties if necessary.</source>
          <target state="translated">&lt;code&gt;copyWithin&lt;/code&gt; の方法が変更可能な方法です。 &lt;code&gt;this&lt;/code&gt; の長さは変更されませんが、その内容が変更され、必要に応じて新しいプロパティが作成されます。</target>
        </trans-unit>
        <trans-unit id="0d4e4a2f5912a9e57cc607207bc577c011f3c5ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;copyWithin&lt;/code&gt; works like C and C++'s &lt;code&gt;memmove&lt;/code&gt;, and is a high-performance method to shift the data of an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;. This especially applies to the &lt;a href=&quot;../typedarray/copywithin&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; method of the same name. The sequence is copied and pasted as one operation; pasted sequence will have the copied values even when the copy and paste region overlap.</source>
          <target state="translated">&lt;code&gt;copyWithin&lt;/code&gt; は、 CおよびC ++のように動作 &lt;code&gt;memmove&lt;/code&gt; 、及びデータシフトする高性能な方法である&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。これは特に、同じ名前の&lt;a href=&quot;../typedarray/copywithin&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;メソッドに適用されます。シーケンスは1つの操作としてコピーおよび貼り付けられます。貼り付けられたシーケンスは、コピーと貼り付けの領域が重なっている場合でも、コピーされた値を持ちます。</target>
        </trans-unit>
        <trans-unit id="b1ad2da2466bc7c65b1d4fdb1ca297753e580c92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;count&lt;/code&gt; parameter defaults to &lt;code&gt;0&lt;/code&gt; instead of the later-specified &lt;code&gt;+Infinity&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; のパラメータのデフォルトは &lt;code&gt;0&lt;/code&gt; ではなく、後に指定の &lt;code&gt;+Infinity&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6459290abb22692aeaf643f0b0875963a2637158" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;count&lt;/code&gt; parameter of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wake&quot;&gt;&lt;code&gt;Atomics.wake()&lt;/code&gt;&lt;/a&gt; method has been changed: it now defaults to &lt;code&gt;+Infinity&lt;/code&gt;, not &lt;code&gt;0&lt;/code&gt; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1253350&quot;&gt;bug 1253350&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wake&quot;&gt; &lt;code&gt;Atomics.wake()&lt;/code&gt; &lt;/a&gt;メソッドの &lt;code&gt;count&lt;/code&gt; パラメータが変更されました。デフォルトでは &lt;code&gt;0&lt;/code&gt; ではなく &lt;code&gt;+Infinity&lt;/code&gt; になりました（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1253350&quot;&gt;バグ1253350&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="579abc478417cce04b67170481387cc4f0379da4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defineProperty&lt;/code&gt; method must return a &lt;a href=&quot;../../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property has been successfully defined.</source>
          <target state="translated">&lt;code&gt;defineProperty&lt;/code&gt; 方法は返さなければならない&lt;a href=&quot;../../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;プロパティが正常に定義されているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="d51c50dc1f17fb2d3d9a387e4984d9886950112d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; operator can only delete properties on an object. Object properties are &quot;qualified&quot; if they are configurable.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 演算子は、オブジェクトのプロパティを削除することができます。オブジェクトプロパティは、構成可能であれば「修飾」されます。</target>
        </trans-unit>
        <trans-unit id="eaff799ffb5f4c865de5bbeb223a7f16c1c96408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; operator deletes a property from an object.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; オペレータは、オブジェクトからプロパティを削除します。</target>
        </trans-unit>
        <trans-unit id="448e313ceb8a1786b1ec9c45f3df2f4ae6950a88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deleteProperty&lt;/code&gt; method must return a &lt;a href=&quot;../../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property has been successfully deleted.</source>
          <target state="translated">&lt;code&gt;deleteProperty&lt;/code&gt; の方法は返さなければならない&lt;a href=&quot;../../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;プロパティが正常に削除されたか否かを示します。</target>
        </trans-unit>
        <trans-unit id="fcd2de562ed07e7f7a0f74cee6c831e37c07da25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do...while&lt;/code&gt; creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.</source>
          <target state="translated">&lt;code&gt;do...while&lt;/code&gt; falseに試験条件評価されるまで指定された文を実行するループを作成します。ステートメントの実行後に条件が評価され、指定されたステートメントが少なくとも1回実行されます。</target>
        </trans-unit>
        <trans-unit id="9b037595b9a4b32697b21b81f6d685a6b7b0cc69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endsWith()&lt;/code&gt; method determines whether a string ends with the characters of a specified string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="translated">&lt;code&gt;endsWith()&lt;/code&gt; メソッドは戻り、指定された文字列の文字で文字列を終了するか否かを判断する &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 適宜。</target>
        </trans-unit>
        <trans-unit id="6b9e346adfa1b501f7258a884c4f52ebb1fce163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entries()&lt;/code&gt; method returns a new &lt;code&gt;Array Iterator&lt;/code&gt; object that contains the key/value pairs for each index in the array.</source>
          <target state="translated">&lt;code&gt;entries()&lt;/code&gt; メソッドの戻り新しい &lt;code&gt;Array Iterator&lt;/code&gt; アレイ内の各インデックスのキー/値のペアを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="769b265003faa6091f017d7147f12f3732022a92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enum&lt;/code&gt; identifier is generally reserved.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; 識別子は、一般的に予約されています。</target>
        </trans-unit>
        <trans-unit id="248a7d9a5873cc3f556301fa757159e374622ac2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enumerable&lt;/code&gt; property attribute defines whether the property is picked by &lt;a href=&quot;assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread &lt;/a&gt;operator. For non-&lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbols&lt;/code&gt;&lt;/a&gt; properties it also defines whether it shows up in a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop and &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; or not.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; プロパティ属性は、プロパティにより撮像されたかどうかを定義&lt;a href=&quot;assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;../../operators/spread_syntax&quot;&gt;拡散&lt;/a&gt;演算子。非ための&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbols&lt;/code&gt; &lt;/a&gt;特性、それはまた、それが中に現れるかどうかを定義&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;ループ&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt;かどうか。</target>
        </trans-unit>
        <trans-unit id="262f6845d838ab7895857d8dab6ec4e384ed3f75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enumerate&lt;/code&gt; handler has been removed.</source>
          <target state="translated">&lt;code&gt;enumerate&lt;/code&gt; ハンドラが削除されました。</target>
        </trans-unit>
        <trans-unit id="60cda406b7503937cb4bcba89ffc4774b591579c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;every&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; function once for each element present in the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt; value. If such an element is found, the &lt;code&gt;every&lt;/code&gt; method immediately returns &lt;code&gt;false&lt;/code&gt;. Otherwise, if &lt;code&gt;callback&lt;/code&gt; returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; value for all elements, &lt;code&gt;every&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 方法が提供さ実行 &lt;code&gt;callback&lt;/code&gt; それが1見つけるまで、アレイ内の各要素の存在のために一度関数を &lt;code&gt;callback&lt;/code&gt; 返さ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;値。そのような要素が見つかると、 &lt;code&gt;every&lt;/code&gt; メソッドはすぐに &lt;code&gt;false&lt;/code&gt; を返します。それ以外の場合は、場合 &lt;code&gt;callback&lt;/code&gt; 返す&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthyの&lt;/a&gt;すべての要素の値を、 &lt;code&gt;every&lt;/code&gt; リターン &lt;code&gt;true&lt;/code&gt; 。 &lt;code&gt;callback&lt;/code&gt; は、値が割り当てられている配列のインデックスに対してのみ呼び出されます。削除されたインデックス、または値が割り当てられていないインデックスに対しては呼び出されません。</target>
        </trans-unit>
        <trans-unit id="fe726a22b9fe9e4b71733bdecdeba4c970f7e0e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;every&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a &lt;em&gt;falsy&lt;/em&gt; value (a value that becomes false when converted to a Boolean). If such an element is found, the &lt;code&gt;every&lt;/code&gt; method immediately returns &lt;code&gt;false&lt;/code&gt;. Otherwise, if &lt;code&gt;callback&lt;/code&gt; returned a true value for all elements, &lt;code&gt;every&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 方法が提供さ実行 &lt;code&gt;callback&lt;/code&gt; それが1見つかるまで、型指定された配列内の各要素の存在のために一度関数を &lt;code&gt;callback&lt;/code&gt; 返さ&lt;em&gt;falsy&lt;/em&gt;値（ブール値に変換したときに偽となる値）。そのような要素が見つかると、 &lt;code&gt;every&lt;/code&gt; メソッドはすぐに &lt;code&gt;false&lt;/code&gt; を返します。それ以外の場合、 &lt;code&gt;callback&lt;/code&gt; がすべての要素のtrue値を返した場合、 &lt;code&gt;every&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5502d324148be748c13c8b24bf2ff1dfda3fd2ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exec()&lt;/code&gt; method executes a search for a match in a specified string. Returns a result array, or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;exec()&lt;/code&gt; メソッドは、指定した文字列でのマッチの検索を実行します。結果の配列、または&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="9da67b0a2bf1e2e56acd5e6a00e10cd0f9ba6fad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;export&lt;/code&gt; statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; 、彼らが持つ他のプログラムで使用できるようにモジュールからエクスポート機能、オブジェクト、またはプリミティブ値にはJavaScriptモジュールを作成するときに文が使用されている&lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;声明。</target>
        </trans-unit>
        <trans-unit id="1d121d7c83043915b62c3d026d20e9eb9ce0263a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports&lt;/code&gt; readonly property of the &lt;a href=&quot;../instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; object prototype returns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript.</source>
          <target state="translated">&lt;a href=&quot;../instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; &lt;/a&gt;オブジェクトプロトタイプの &lt;code&gt;exports&lt;/code&gt; readonlyプロパティは、WebAssemblyモジュールインスタンスからエクスポートされたすべての関数をメンバーとして含むオブジェクトを返し、JavaScriptによるアクセスと使用を可能にします。</target>
        </trans-unit>
        <trans-unit id="398bb44428230207be4b29663c2d907af05f08fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports[0]&lt;/code&gt; output looks like this:</source>
          <target state="translated">&lt;code&gt;exports[0]&lt;/code&gt; このような出力になります。</target>
        </trans-unit>
        <trans-unit id="1248c8ee5b9877f2e85da9ce2ebd273eed344846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; keyword can be used to subclass custom classes as well as built-in objects.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; キーワードは、サブクラスのカスタムクラスを使用するだけでなく、組み込みオブジェクトことができます。</target>
        </trans-unit>
        <trans-unit id="8be240467cc255fa80e8a5d40e5248d61e3121d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; keyword is used in &lt;a href=&quot;../statements/class&quot;&gt;class declarations&lt;/a&gt; or &lt;a href=&quot;../operators/class&quot;&gt;class expressions&lt;/a&gt; to create a class which is a child of another class.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; キーワードで使用されている&lt;a href=&quot;../statements/class&quot;&gt;クラス宣言&lt;/a&gt;または&lt;a href=&quot;../operators/class&quot;&gt;クラス表現&lt;/a&gt;別のクラスの子であるクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="e9c6fff34eb2957d22e20e462d2759e3b630de74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fill&lt;/code&gt; method takes up to three arguments &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;. The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; arguments are optional with default values of &lt;code&gt;0&lt;/code&gt; and the &lt;code&gt;length&lt;/code&gt; of the &lt;code&gt;this&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; 方法は、3つの引数に取り &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; 。 &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; の引数はデフォルトの値を持つオプションである &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; の &lt;code&gt;this&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="0e3b582ede252bcf25aebee36e7e68677d22aa38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter()&lt;/code&gt; method calls a provided &lt;code&gt;callback&lt;/code&gt; function once for each element in a typed array, and constructs a new typed array of all the values for which &lt;code&gt;callback&lt;/code&gt; returns a true value. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the typed array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Typed array elements which do not pass the &lt;code&gt;callback&lt;/code&gt; test are simply skipped, and are not included in the new typed array.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; メソッドを提供呼び出し &lt;code&gt;callback&lt;/code&gt; 型指定された配列の各要素に対して一度関数を、とするすべての値の新しい型指定された配列構成 &lt;code&gt;callback&lt;/code&gt; 真の値を返しています。 &lt;code&gt;callback&lt;/code&gt; は、値が割り当てられている型付き配列のインデックスに対してのみ呼び出されます。削除されたインデックス、または値が割り当てられていないインデックスに対しては呼び出されません。 &lt;code&gt;callback&lt;/code&gt; テストに合格しない型付き配列要素は単にスキップされ、新しい型付き配列には含まれません。</target>
        </trans-unit>
        <trans-unit id="b5f309c0b5856c39cb9b939d27f25e1d4dbdaffc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally()&lt;/code&gt; method can be useful if you want to do some processing or cleanup once the promise is settled, regardless of its outcome.</source>
          <target state="translated">&lt;code&gt;finally()&lt;/code&gt; あなたは関係なく、その結果の、約束が確定した後、いくつかの処理やクリーンアップを行いたい場合はこの方法は便利です。</target>
        </trans-unit>
        <trans-unit id="ca2b8cacac1a430149bebcb16b2ae7b2f9d5b2df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally()&lt;/code&gt; method is very similar to calling &lt;code&gt;.then(onFinally, onFinally)&lt;/code&gt; however there are couple of differences:</source>
          <target state="translated">&lt;code&gt;finally()&lt;/code&gt; メソッドは、呼び出しに非常によく似ている &lt;code&gt;.then(onFinally, onFinally)&lt;/code&gt; しかし違いがいくつかあります：</target>
        </trans-unit>
        <trans-unit id="afb8460fbc1a6af0566d608676e595d2980214bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; clause</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 句</target>
        </trans-unit>
        <trans-unit id="493a6b259c76f8e49c9fb9f85cb6a55f07cd517c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; clause contains statements to execute after the &lt;code&gt;try&lt;/code&gt; block and &lt;code&gt;catch&lt;/code&gt; clause(s) execute, but before the statements following the &lt;code&gt;try..catch..finally&lt;/code&gt; block. Note that the &lt;code&gt;finally&lt;/code&gt; clause executes regardless of whether an exception is thrown. Also, if an exception is thrown, the statements in the &lt;code&gt;finally&lt;/code&gt; clause execute even if no &lt;code&gt;catch&lt;/code&gt; clause handles the exception.</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 句は、後に実行するステートメントが含まれている &lt;code&gt;try&lt;/code&gt; ブロックと &lt;code&gt;catch&lt;/code&gt; 節（複数可）を実行しますが、次の文の前に &lt;code&gt;try..catch..finally&lt;/code&gt; ブロックを。例外がスローされたかどうかに関係なく、 &lt;code&gt;finally&lt;/code&gt; 句が実行されることに注意してください。また、例外がスローされると、例外を処理する &lt;code&gt;catch&lt;/code&gt; 句がない場合でも、 &lt;code&gt;finally&lt;/code&gt; 句のステートメントが実行されます。</target>
        </trans-unit>
        <trans-unit id="ae0af582c79ba9fdaa1e4be03ccddb06832fa849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; clause executes after the &lt;code&gt;try&lt;/code&gt; block and &lt;code&gt;catch&lt;/code&gt; clause(s) execute but before the statements following the &lt;code&gt;try&lt;/code&gt; statement. It always executes, regardless of whether an exception was thrown or caught.</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 後の節の実行 &lt;code&gt;try&lt;/code&gt; ブロックと &lt;code&gt;catch&lt;/code&gt; 節（複数可）を実行するが、文の前に次 &lt;code&gt;try&lt;/code&gt; 文を。例外がスローされたかキャッチされたかに関係なく、常に実行されます。</target>
        </trans-unit>
        <trans-unit id="ebb9ff3b4d2328dc13d0f5dbf5fefaf6cb770084" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;find&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value. If such an element is found, &lt;code&gt;find&lt;/code&gt; immediately returns the value of that element. Otherwise, &lt;code&gt;find&lt;/code&gt; returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the typed array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; 方法を実行 &lt;code&gt;callback&lt;/code&gt; それが1見つかるまで、型指定された配列内の各要素の存在のために一度関数を &lt;code&gt;callback&lt;/code&gt; 真の値を返しています。そのような要素が見つかった場合、 &lt;code&gt;find&lt;/code&gt; はすぐにその要素の値を返します。それ以外の場合、 &lt;code&gt;find&lt;/code&gt; は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;を返します。 &lt;code&gt;callback&lt;/code&gt; は、値が割り当てられている型付き配列のインデックスに対してのみ呼び出されます。削除されたインデックス、または値が割り当てられていないインデックスに対しては呼び出されません。</target>
        </trans-unit>
        <trans-unit id="a2f6dbc0e7d561f4adb48c5a0084b12e047f565d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;find&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each index of the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value. If such an element is found, &lt;code&gt;find&lt;/code&gt; immediately returns the value of that element. Otherwise, &lt;code&gt;find&lt;/code&gt; returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked for every index of the array from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length - 1&lt;/code&gt; and is invoked for all indexes, not just those that have been assigned values. This may mean that it's less efficient for sparse arrays than other methods that only visit indexes that have been assigned a value.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; 方法を実行 &lt;code&gt;callback&lt;/code&gt; それが1見つかるまで配列の各インデックスに対して一度関数を &lt;code&gt;callback&lt;/code&gt; 真の値を返しています。そのような要素が見つかった場合、 &lt;code&gt;find&lt;/code&gt; はすぐにその要素の値を返します。それ以外の場合、 &lt;code&gt;find&lt;/code&gt; は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;を返します。 &lt;code&gt;callback&lt;/code&gt; は、 &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;length - 1&lt;/code&gt; までの配列のすべてのインデックスに対して呼び出され、値が割り当てられたインデックスだけでなく、すべてのインデックスに対して呼び出されます。これは、値が割り当てられているインデックスのみを訪問する他のメソッドよりもスパース配列の方が効率が悪いことを意味する場合があります。</target>
        </trans-unit>
        <trans-unit id="7a8b983e2f4829e511b41212dc899b30c721853a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findIndex&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value. If such an element is found, &lt;code&gt;findIndex&lt;/code&gt; immediately returns the index of that element. Otherwise, &lt;code&gt;findIndex&lt;/code&gt; returns -1. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the typed array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;findIndex&lt;/code&gt; の方法を実行 &lt;code&gt;callback&lt;/code&gt; それが1見つかるまで、型指定された配列内の各要素の存在のために一度関数を &lt;code&gt;callback&lt;/code&gt; 真の値を返しています。そのような要素が見つかると、 &lt;code&gt;findIndex&lt;/code&gt; はすぐにその要素のインデックスを返します。それ以外の場合、 &lt;code&gt;findIndex&lt;/code&gt; は-1を返します。 &lt;code&gt;callback&lt;/code&gt; は、値が割り当てられている型付き配列のインデックスに対してのみ呼び出されます。削除されたインデックス、または値が割り当てられていないインデックスに対しては呼び出されません。</target>
        </trans-unit>
        <trans-unit id="e184dccaa01d8c1336c503c32e412ef6fedc68a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findIndex&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for every array index &lt;code&gt;0..length-1&lt;/code&gt; (inclusive) in the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a truthy value (a value that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion&quot;&gt;coerces&lt;/a&gt; to &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;findIndex&lt;/code&gt; の方法を実行 &lt;code&gt;callback&lt;/code&gt; すべての配列インデックスに対して一度機能を &lt;code&gt;0..length-1&lt;/code&gt; それが1見つかるまで（両端を含む）の配列に &lt;code&gt;callback&lt;/code&gt; truthy値（値その戻り&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion&quot;&gt;強制変換&lt;/a&gt;に &lt;code&gt;true&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ddb6a4717e869f31b8dfea822bc35fc297019a9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixed()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt&quot;&gt;&lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in fixed-pitch font.</source>
          <target state="translated">&lt;code&gt;fixed()&lt;/code&gt; メソッドを作成し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt&quot;&gt; &lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt; &lt;/a&gt;固定ピッチフォントで表示される文字列を引き起こすHTML要素。</target>
        </trans-unit>
        <trans-unit id="c48c22c4579ce5d02046766c641cc1ca194ff818" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixed()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;tt&amp;gt;str&amp;lt;/tt&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fixed()&lt;/code&gt; メソッドは、文字列埋め込み &lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt; タグ： &lt;code&gt;&quot;&amp;lt;tt&amp;gt;str&amp;lt;/tt&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1f38db68a6bd39288ff7c228bab4de71e507f4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; property returns a string consisting of the flags of the current regular expression object.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; プロパティは、現在の正規表現オブジェクトのフラグからなる文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fe01e45b472a17933803d2bb3045c805fc95c57b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fontcolor()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt;&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in the specified font color.</source>
          <target state="translated">&lt;code&gt;fontcolor()&lt;/code&gt; メソッドを作成し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt; &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; &lt;/a&gt;文字列が指定されたフォント色で表示させるHTML要素。</target>
        </trans-unit>
        <trans-unit id="e049850efda23e9baaf754634772c96f3d0e907b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fontsize()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt;&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in the specified font size.</source>
          <target state="translated">&lt;code&gt;fontsize()&lt;/code&gt; メソッドを作成し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt; &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; &lt;/a&gt;文字列が指定されたフォントサイズで表示させるHTML要素。</target>
        </trans-unit>
        <trans-unit id="07795950e389f56d946a676fa471420cef5f0fe3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for await...of&lt;/code&gt;creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Array&lt;/code&gt;-like objects (e.g., &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.</source>
          <target state="translated">&lt;code&gt;for await...of&lt;/code&gt; 反復可能なオブジェクト非同期（async）反復処理だけでなく、同期イテラブル上、を含む作成するループ：組み込みの&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Array&lt;/code&gt; オブジェクト様（例えば、&lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt; &lt;code&gt;NodeList&lt;/code&gt; &lt;/a&gt;）、&lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;、およびユーザー定義の非同期/同期イテラブル。オブジェクトの各プロパティの値に対して実行されるステートメントでカスタム反復フックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="92018a29351b2499a5caaa78a8fec107cbde8ac4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for each...in&lt;/code&gt; statement is deprecated as the part of ECMA-357 (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/Web/E4X&quot;&gt;E4X&lt;/a&gt;) standard. E4X support has been removed. Consider using &lt;a href=&quot;for...of&quot;&gt;for...of&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;for each...in&lt;/code&gt; 文はECMA-357（の一部として推奨されていません&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/Web/E4X&quot;&gt;E4X&lt;/a&gt;）標準。E4Xサポートが削除されました。代わりに&lt;a href=&quot;for...of&quot;&gt;for ... ofの&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="eb90258c1a74d909c7a02e4a5cd78322b013bc9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for...in&lt;/code&gt; iterates over all non-&lt;a href=&quot;../global_objects/symbol&quot;&gt;Symbol&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;enumerable properties&lt;/a&gt; of an object.</source>
          <target state="translated">&lt;code&gt;for...in&lt;/code&gt; のすべての非を反復&lt;a href=&quot;../global_objects/symbol&quot;&gt;記号&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;列挙プロパティ&lt;/a&gt;オブジェクトの。</target>
        </trans-unit>
        <trans-unit id="29406bf57a33a30a4b6f597e7fe2d7356f5eca8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for...in&lt;/code&gt; loop below iterates over all of the object's enumerable, non-Symbol properties and logs a string of the property names and their values.</source>
          <target state="translated">以下の &lt;code&gt;for...in&lt;/code&gt; ループは、オブジェクトの列挙可能な非シンボルプロパティのすべてを反復し、プロパティ名とその値の文字列をログに記録します。</target>
        </trans-unit>
        <trans-unit id="f712afa8e9cb3754589a55d82fe83b933ad6717c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for...of&lt;/code&gt; statement iterates over data that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;iterable object&lt;/a&gt; defines to be iterated over.</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; 文はデータを反復処理することを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;反復可能なオブジェクトの&lt;/a&gt;定義は、反復処理されます。</target>
        </trans-unit>
        <trans-unit id="c497a43bf18e1ae3f58f4b70fa1313f082991044" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for...of&lt;/code&gt;creates a loop iterating over &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable objects&lt;/a&gt;, including: built-in &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Array&lt;/code&gt;-like objects (e.g., &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; 繰り返し処理を行うループ作成&lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;反復可能なオブジェクトを&lt;/a&gt;含む、：組み込みの&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Array&lt;/code&gt; オブジェクト様（例えば、&lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt; &lt;code&gt;NodeList&lt;/code&gt; &lt;/a&gt;）、&lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;、およびユーザー定義の反復可能オブジェクトを。オブジェクトの各プロパティの値に対して実行されるステートメントでカスタム反復フックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="6da8bd4887945e1df08e947192a941ac0562f0b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forEach()&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; once for each element present in the typed array in ascending order. It is not invoked for indexes that have been deleted or elided. However, it is executed for elements that are present and have the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; メソッドが提供さ実行する &lt;code&gt;callback&lt;/code&gt; 昇順に入力アレイ内の各要素の存在のために一度。削除または省略されたインデックスに対しては呼び出されません。ただし、存在し、値が&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;である要素に対して実行されます。</target>
        </trans-unit>
        <trans-unit id="db182815806ced5ebb493f02e1d099d07a63467b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forEach()&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; once for each value which actually exists in the &lt;code&gt;Set&lt;/code&gt; object. It is not invoked for values which have been deleted. However, it is executed for values which are present but have the value &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; メソッドが提供さ実行する &lt;code&gt;callback&lt;/code&gt; 実際に存在する各値に対して一度 &lt;code&gt;Set&lt;/code&gt; オブジェクト。削除された値に対しては呼び出されません。ただし、存在する値が &lt;code&gt;undefined&lt;/code&gt; である場合に実行されます。</target>
        </trans-unit>
        <trans-unit id="f9f7e05c5fd62de0070b06e49a72a216e6f80b94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forEach&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; once for each key of the map which actually exist. It is not invoked for keys which have been deleted. However, it is executed for values which are present but have the value &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; 方法が提供さ実行する &lt;code&gt;callback&lt;/code&gt; 実際に存在するマップの各キーの一度。削除されたキーに対しては呼び出されません。ただし、存在する値が &lt;code&gt;undefined&lt;/code&gt; である場合に実行されます。</target>
        </trans-unit>
        <trans-unit id="0ca7c3b42e910613bcd59048c92585787ffc8fa4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;formatToParts()&lt;/code&gt; method is useful for custom formatting of date strings. It returns an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the &lt;code&gt;formatToParts()&lt;/code&gt; method returns, looks like this:</source>
          <target state="translated">&lt;code&gt;formatToParts()&lt;/code&gt; メソッドは、日付文字列の書式をカスタムするのに便利です。ロケール固有の部分を保持しながらカスタム文字列を作成できるロケール固有のトークンを含むオブジェクトの&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;を返します。 &lt;code&gt;formatToParts()&lt;/code&gt; メソッドが返す構造は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="fab0d98a022cfcafdbadc12bf113a20afcc1d6b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;formatToParts()&lt;/code&gt; method is useful for custom formatting of number strings. It returns an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the &lt;code&gt;formatToParts()&lt;/code&gt; method returns, looks like this:</source>
          <target state="translated">&lt;code&gt;formatToParts()&lt;/code&gt; メソッドは、数値文字列の書式をカスタムするのに便利です。ロケール固有の部分を保持しながらカスタム文字列を作成できるロケール固有のトークンを含むオブジェクトの&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;を返します。 &lt;code&gt;formatToParts()&lt;/code&gt; メソッドが返す構造は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="fd423370e6c4bf20906012c05a38d24688897b5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function*&lt;/code&gt; keyword can be used to define a generator function inside an expression.</source>
          <target state="translated">&lt;code&gt;function*&lt;/code&gt; キーワードは、式の中ジェネレータ関数を定義するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="8f156c2704eb928c282ec963343ae475c9d3b08e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function*&lt;/code&gt; keyword defines a generator function expression.</source>
          <target state="translated">&lt;code&gt;function*&lt;/code&gt; キーワードは、ジェネレータ関数式を定義します。</target>
        </trans-unit>
        <trans-unit id="33e827b4ed74885f2170b0ea61a127c1413e0b08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; keyword can be used to define a function inside an expression.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; キーワードは、式の中の関数を定義するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="134d18d1ded106547a7ac40a53ef2d07abd2638f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contains at least one &lt;a href=&quot;operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; キーワードは、式の中のレガシー・ジェネレータ機能を定義するために使用することができます。関数をレガシージェネレーターにするには、関数本体に少なくとも1つの&lt;a href=&quot;operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt;式が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="1376db3f2218216b073ab1cc640028ca29c50085" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; keyword defines a function expression.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; キーワードは、関数式を定義します。</target>
        </trans-unit>
        <trans-unit id="22e2627431db302a628ff6fee1b32925f73fabfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; method can return any value.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; メソッドは、任意の値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="13f27328229caf8369980cf45d2a8c6bb39118ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; syntax binds an object property to a function that will be called when that property is looked up.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 構文は、そのプロパティが検索されるときに呼び出される関数にオブジェクトのプロパティをバインドします。</target>
        </trans-unit>
        <trans-unit id="d05dd55ae668fc9f4dadca6fcd731e01110ff5cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getDate()&lt;/code&gt; method returns the day of the month for the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getDate()&lt;/code&gt; メソッドは、ローカル時間に基づき、指定された日時の月の日を返します。</target>
        </trans-unit>
        <trans-unit id="e04f3a360c18901fbc4ea2940bf454193ab3666c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getDay()&lt;/code&gt; method returns the day of the week for the specified date according to local time, where 0 represents Sunday. For the day of the month see &lt;a href=&quot;getdate&quot;&gt;getDate()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getDay()&lt;/code&gt; メソッドは、0は日曜日を表すローカル時間に基づき、指定された日時の曜日を返します。月の日については、&lt;a href=&quot;getdate&quot;&gt;getDate（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6a9f9f676c0cc78ad67df96facf8f3f38aa56a43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFloat32()&lt;/code&gt; method gets a signed 32-bit float (float) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFloat32()&lt;/code&gt; メソッドは、開始からのオフセット指定されたバイトで符号付き32ビットフロート（フロート）を取得&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fa36571f206932e93411e982c87c578947461a0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFloat64()&lt;/code&gt; method gets a signed 64-bit float (double) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFloat64()&lt;/code&gt; メソッドは、開始からのオフセット指定されたバイトで符号付き64ビットフロート（二重）を取得&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d9d146589515af1bb3daa9cd983a4603940525ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFullYear()&lt;/code&gt; method returns the year of the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getFullYear()&lt;/code&gt; メソッドは、現地時間に応じて指定された日付の年を返します。</target>
        </trans-unit>
        <trans-unit id="2847e189000182b336da2124e9513f819d01930f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getHours()&lt;/code&gt; method returns the hour for the specified date, according to local time.</source>
          <target state="translated">&lt;code&gt;getHours()&lt;/code&gt; メソッドは、ローカル時間に応じて、指定された日付の時間を返します。</target>
        </trans-unit>
        <trans-unit id="52e82be3f6a954249303eaef82b3b7c60c752028" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInt16()&lt;/code&gt; method gets a signed 16-bit integer (short) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getInt16()&lt;/code&gt; メソッドは、開始からのオフセット指定されたバイトで符号付き16ビット整数（ショート）を取得&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="962649f728dba72ec76eb3806281dd1d21b5e028" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInt32()&lt;/code&gt; method gets a signed 32-bit integer (long) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getInt32()&lt;/code&gt; メソッドは、開始からのオフセット指定されたバイトで符号付き32ビット整数（長く）なる&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="980cdc01daf7be300e5b8c69d8215b0716f5b04a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInt8()&lt;/code&gt; method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getInt8()&lt;/code&gt; メソッドは、開始からのオフセット指定されたバイトで符号付き8ビット整数（バイト）を取得&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="36afd52250cf4065f352d5f83fdccdd94e509185" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMilliseconds()&lt;/code&gt; method returns the milliseconds in the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getMilliseconds()&lt;/code&gt; メソッドは、ローカル時間に基づき、指定された日時にミリ秒を返します。</target>
        </trans-unit>
        <trans-unit id="e6bfe75388540e76a5084b891c3fdcbe40323576" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMinutes()&lt;/code&gt; method returns the minutes in the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getMinutes()&lt;/code&gt; メソッドは、ローカル時間に応じて、指定された日時の分を返します。</target>
        </trans-unit>
        <trans-unit id="403b1a9a59018c87ead2fc41704995448cbf8f1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMonth()&lt;/code&gt; method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).</source>
          <target state="translated">&lt;code&gt;getMonth()&lt;/code&gt; メソッドは、（ゼロ年の最初の月を示す）ゼロベース値として、ローカル時間に基づき、指定された日時に月を返します。</target>
        </trans-unit>
        <trans-unit id="ea41ec984f65501c21f45f656c294aaab666ad64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; method must return an object or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; のメソッドは、オブジェクトまたは返す必要があり &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8f23c761f1daf7cf770d343be0e8a0b70d781d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getPrototypeOf&lt;/code&gt; method must return an object or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getPrototypeOf&lt;/code&gt; のメソッドは、オブジェクトまたは返す必要があり &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1106dd2a14afc0d3fc0d455fd9ea6f20293b1ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getSeconds()&lt;/code&gt; method returns the seconds in the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getSeconds()&lt;/code&gt; メソッドは、ローカル時間に応じて、指定された日時の秒を返します。</target>
        </trans-unit>
        <trans-unit id="4c4b0f5f01e52cdd348a4a4f41c9c6c66a9163f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getTime()&lt;/code&gt; method returns the numeric value corresponding to the time for the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getTime()&lt;/code&gt; メソッドは、世界時に基づき、指定された日時の時間に対応する数値を返します。</target>
        </trans-unit>
        <trans-unit id="0cf6cd047165df1fea08b2a65982c5365eef255e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getTimezoneOffset()&lt;/code&gt; method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.</source>
          <target state="translated">&lt;code&gt;getTimezoneOffset()&lt;/code&gt; メソッドは、現在のロケール（ホストシステム設定）からUTCへの時差（分単位）を返します。</target>
        </trans-unit>
        <trans-unit id="02ca508407a71cfecf575e3fd69c13c522024d79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCDate()&lt;/code&gt; method returns the day (date) of the month in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCDate()&lt;/code&gt; メソッドでは世界時に基づき、指定された日時に、月の日（日付）を返します。</target>
        </trans-unit>
        <trans-unit id="6c5141384fd8dbcf7314b85412ffb1186ac3eb0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCDay()&lt;/code&gt; method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.</source>
          <target state="translated">&lt;code&gt;getUTCDay()&lt;/code&gt; メソッドは、0は日曜日を表し世界時に基づき、指定された日時に曜日を返します。</target>
        </trans-unit>
        <trans-unit id="485ae8904d445cb931eaf57bc2f6fc5a75c956f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCFullYear()&lt;/code&gt; method returns the year in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCFullYear()&lt;/code&gt; メソッドでは世界時に基づき、指定された日時の年を返します。</target>
        </trans-unit>
        <trans-unit id="6e0f2c7e6cdce96b470e00d6dae64071d42f2714" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCHours()&lt;/code&gt; method returns the hours in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCHours()&lt;/code&gt; メソッドは、世界時に従って、指定された日時の時間を返します。</target>
        </trans-unit>
        <trans-unit id="792ad172d83482315cfaade158ab4b56a8070d29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; method returns the milliseconds in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCMilliseconds()&lt;/code&gt; メソッドは、世界時に従って、指定された日時のミリ秒を返します。</target>
        </trans-unit>
        <trans-unit id="4d6dc3e7a23a53a4431d50d20b4314fbf51e3b4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCMinutes()&lt;/code&gt; method returns the minutes in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCMinutes()&lt;/code&gt; メソッドは、世界時に従って、指定された日時の分を返します。</target>
        </trans-unit>
        <trans-unit id="a8e2240d70cd6c006b32d6d66bd2dc4e25e784b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCMonth()&lt;/code&gt; returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).</source>
          <target state="translated">&lt;code&gt;getUTCMonth()&lt;/code&gt; は、（ゼロ年の最初の月を示す）ゼロベース値として、世界時に基づき、指定された日時の月を返します。</target>
        </trans-unit>
        <trans-unit id="4994a1c81f9b0ead2db9194632edcb867919d3e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCSeconds()&lt;/code&gt; method returns the seconds in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCSeconds()&lt;/code&gt; メソッドでは世界時に基づき、指定された日時の秒を返します。</target>
        </trans-unit>
        <trans-unit id="b4cb9d2442b33b0752c362a8b69a2e4787f4d186" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUint16()&lt;/code&gt; method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getUint16()&lt;/code&gt; メソッドは、開始からのオフセット指定されたバイトで符号なし16ビット整数（unsigned short型）を取得&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="31b4253c3ebb280c0d1c463c1ff695239fb52130" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUint32()&lt;/code&gt; method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getUint32()&lt;/code&gt; メソッドは、開始からのオフセット指定されたバイトで符号なし32ビット整数（unsigned long型）を取得&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c90ef7ca51d5a8571747710d9a0c566e95bd223d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUint8()&lt;/code&gt; method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getUint8()&lt;/code&gt; メソッドは、開始からのオフセット指定されたバイトで符号なし8ビット整数（符号なしバイト）を取得&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ddeeb1a8c80dd55d495f18e4339394cdfaee1be6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag is used with the regular expression. &lt;code&gt;global&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; プロパティは、「か否かを示す &lt;code&gt;g&lt;/code&gt; 」フラグが正規表現で使用されています。 &lt;code&gt;global&lt;/code&gt; は、個々の正規表現インスタンスの読み取り専用プロパティです。</target>
        </trans-unit>
        <trans-unit id="9c4ae749dfc02b57fa2a602ea8209b5a5af4898f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;grow()&lt;/code&gt; protoype method of the &lt;code&gt;&lt;a href=&quot;../memory&quot;&gt;Memory&lt;/a&gt;&lt;/code&gt; object increases the size of the memory instance by a specified number of WebAssembly pages.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../memory&quot;&gt;Memory&lt;/a&gt;&lt;/code&gt; オブジェクトの &lt;code&gt;grow()&lt;/code&gt; プロトタイプメソッドは、メモリインスタンスのサイズを指定された数のWebAssemblyページだけ増やします。</target>
        </trans-unit>
        <trans-unit id="d9d2f55a6442ec009dff9f8791025ae6d16936c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.apply()&lt;/code&gt; method is a trap for a function call.</source>
          <target state="translated">&lt;code&gt;handler.apply()&lt;/code&gt; メソッドは、関数呼び出しのためのトラップです。</target>
        </trans-unit>
        <trans-unit id="da11e5195e97ea8a85450a5c62373ae9b040b9cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.defineProperty()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.defineProperty()&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="34e98c61053dec6731b28a1be2fcdf4dea2fcc94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.deleteProperty()&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;handler.deleteProperty()&lt;/code&gt; メソッドでのトラップで&lt;a href=&quot;../../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;演算子。</target>
        </trans-unit>
        <trans-unit id="7e5ab0de815a367d114d029c9082ded5622f891b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.get()&lt;/code&gt; method is a trap for getting a property value.</source>
          <target state="translated">&lt;code&gt;handler.get()&lt;/code&gt; メソッドは、プロパティ値を取得するための罠です。</target>
        </trans-unit>
        <trans-unit id="aa8b37133034564088222a099ba7d4fe7bbb28ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.getOwnPropertyDescriptor()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.getOwnPropertyDescriptor()&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d144a88e59d6732706042d1b8eb2f35df5a2fd2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.getPrototypeOf()&lt;/code&gt; method is a trap for the&lt;code&gt; [[GetPrototypeOf]]&lt;/code&gt; internal method.</source>
          <target state="translated">&lt;code&gt;handler.getPrototypeOf()&lt;/code&gt; メソッドでのトラップである &lt;code&gt; [[GetPrototypeOf]]&lt;/code&gt; 内部メソッド。</target>
        </trans-unit>
        <trans-unit id="a5b4c65dd0b7a110d6c1535f91f335edae32cdce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.has()&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;handler.has()&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;オペレータ。</target>
        </trans-unit>
        <trans-unit id="c6c293f67d7c5e7952172040332bf0247fedefa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.isExtensible()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.isExtensible()&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2cad75bca6dd2dae5242f0905ebba96efb71161d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.ownKeys()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../reflect/ownkeys&quot;&gt;&lt;code&gt;Reflect.ownKeys()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.ownKeys()&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../reflect/ownkeys&quot;&gt; &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e03465bf0925a432e723c9df7faaf10db9089082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.preventExtensions()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.preventExtensions()&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b34c42feebcd0b8745a3409c30a53b81a69f04a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.setPrototypeOf()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.setPrototypeOf()&lt;/code&gt; メソッドでのトラップである&lt;a href=&quot;../../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fdfcd91dc8f4435cbfb2e13d27046695b20cb020" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;has&lt;/code&gt; method must return a boolean value.</source>
          <target state="translated">&lt;code&gt;has&lt;/code&gt; 方法は、ブール値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="e7e2ffad18433efedfa98f68a218e08732672865" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreCase&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;i&lt;/code&gt;&quot; flag is used with the regular expression. &lt;code&gt;ignoreCase&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">&lt;code&gt;ignoreCase&lt;/code&gt; はのプロパティは、「か否かを示している &lt;code&gt;i&lt;/code&gt; 」フラグが正規表現で使用されています。 &lt;code&gt;ignoreCase&lt;/code&gt; は、個々の正規表現インスタンスの読み取り専用プロパティです。</target>
        </trans-unit>
        <trans-unit id="a02b27715b2fe21499d61100129116507cecde04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import.meta&lt;/code&gt; object consists of the keyword &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt;, a dot, and a property name &lt;code&gt;meta&lt;/code&gt;. Normally &lt;code&gt;import.&lt;/code&gt; serves as the context for a property access, but here &lt;code&gt;import.&lt;/code&gt; is not really an object.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; オブジェクトは、キーワードで構成され&lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;、ドット、およびプロパティ名の &lt;code&gt;meta&lt;/code&gt; 。通常は &lt;code&gt;import.&lt;/code&gt; プロパティアクセスのコンテキストとして機能しますが、ここでは &lt;code&gt;import.&lt;/code&gt; 実際にはオブジェクトではありません。</target>
        </trans-unit>
        <trans-unit id="bd4535c25176da8e60dbc4d09c2cfbb6d7252947" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import.meta&lt;/code&gt; object is created by the ECMAScript implementation, with a &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; prototype. The object is extensible, and its properties are writable, configurable, and enumerable.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; オブジェクトがで、ECMAScriptの実装によって作成された&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;プロトタイプ。オブジェクトは拡張可能であり、そのプロパティは書き込み可能、​​構成可能、および列挙可能です。</target>
        </trans-unit>
        <trans-unit id="137b89f6f10ee4ca89dff87eedc511ac09b31e96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; keyword may be called as a function to dynamically import a module. When used this way, it returns a promise.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; キーワードは、動的モジュールをインポートするには、関数として呼び出すことができます。この方法で使用すると、Promiseが返されます。</target>
        </trans-unit>
        <trans-unit id="cd958d3d8612c968975765e609ccc04caf5a63c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator always expects an object.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; オペレータは、常にオブジェクトを期待しています。</target>
        </trans-unit>
        <trans-unit id="70177b29eb0e4bfc6a23b96b657fc326b3f6a005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator determines whether an object has a given property.</source>
          <target state="translated">オペレータは、オブジェクトが指定された特性を有しているか否かを判定する。 &lt;code&gt;in&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2af3817320c5d2c460c7e767b6bbeb13970040f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator returns &lt;code&gt;true&lt;/code&gt; for properties in the prototype chain.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; オペレータが戻る &lt;code&gt;true&lt;/code&gt; プロトタイプチェーン内のプロパティの。</target>
        </trans-unit>
        <trans-unit id="b6fa64d07582785dd2131600f615794034736d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the specified property is in the specified object or its prototype chain.</source>
          <target state="translated">戻り &lt;code&gt;true&lt;/code&gt; 指定されたプロパティが指定されたオブジェクトまたはそのプロトタイプチェーン内にある場合。 &lt;code&gt;in&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ea9fa669bb545ce5f8669d897d233f52c2bd048" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includes()&lt;/code&gt; method determines whether one string may be found within another string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; メソッドは、1つの文字列を返す、別の文字列の中に見出すことができるかどうかを決定する &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 適宜。</target>
        </trans-unit>
        <trans-unit id="57a47f7d9e0fe49d6c50e9dab172f8b6fc789ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includes()&lt;/code&gt; method is case sensitive. For example, the following expression returns false:</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; メソッドは、大文字と小文字が区別されます。たとえば、次の式はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="da25ad1444fb168b26f9af841d880d06222f7db2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indexOf()&lt;/code&gt; method is case sensitive. For example, the following expression returns -1:</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; メソッドは、大文字と小文字が区別されます。たとえば、次の式は-1を返します。</target>
        </trans-unit>
        <trans-unit id="88275165e94dfa73163214733a74215098b67408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indexOf()&lt;/code&gt; method returns the index within the calling &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object of the first occurrence of the specified value, starting the search at &lt;code&gt;fromIndex&lt;/code&gt;. Returns -1 if the value is not found.</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; メソッドは、呼び出し内のインデックスを返す&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;の検索開始し、指定された値の最初の出現の目的 &lt;code&gt;fromIndex&lt;/code&gt; 。値が見つからない場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="1131810937b6ceba699e277ff01edd9ab93e559b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instanceof&lt;/code&gt; operator determines whether an object is an instance of another object.</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; のオペレータは、オブジェクトが別のオブジェクトのインスタンスであるか否かを判断します。</target>
        </trans-unit>
        <trans-unit id="db5f10dc6f232cd9e6844d01ffbc76f124d2050a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instanceof&lt;/code&gt; operator tests the presence of &lt;code&gt;constructor.prototype&lt;/code&gt; in &lt;code&gt;object&lt;/code&gt;'s prototype chain.</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; のオペレータが存在テスト &lt;code&gt;constructor.prototype&lt;/code&gt; における &lt;code&gt;object&lt;/code&gt; のプロトタイプチェーン。</target>
        </trans-unit>
        <trans-unit id="05eb0faee90a55ba0e606a263c4af994fcd1c9e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instanceof&lt;/code&gt; tests whether the &lt;code&gt;prototype&lt;/code&gt; property of a constructor appears anywhere in the prototype chain of an object.</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; のかどうかをテスト &lt;code&gt;prototype&lt;/code&gt; コンストラクタのプロパティはどこにでもオブジェクトのプロトタイプチェーン内に表示されます。</target>
        </trans-unit>
        <trans-unit id="db62a1f4bb9f66603917c1a79ebcc8a346d4e545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isExtensible&lt;/code&gt; method must return a boolean value.</source>
          <target state="translated">&lt;code&gt;isExtensible&lt;/code&gt; の方法は、ブール値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="85e3a1f11e7e8776b457b403545f6b2ffc357c60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isPrototypeOf()&lt;/code&gt; method allows you to check whether or not an object exists within another object's prototype chain.</source>
          <target state="translated">&lt;code&gt;isPrototypeOf()&lt;/code&gt; メソッドを使用すると、オブジェクトが別のオブジェクトのプロトタイプチェーン内に存在するか否かをチェックすることができます。</target>
        </trans-unit>
        <trans-unit id="22c6c3a68a3f263cb8242bb52bcd85136093befc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;italics()&lt;/code&gt; method creates an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i&quot;&gt;&lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be italic.</source>
          <target state="translated">&lt;code&gt;italics()&lt;/code&gt; メソッドを作成し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i&quot;&gt; &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; &lt;/a&gt;イタリックする文字列を引き起こすHTML要素。</target>
        </trans-unit>
        <trans-unit id="b11dee7a5962a98be4ee10fd5794342f2e33d45d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;italics()&lt;/code&gt; method embeds a string in an &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;i&amp;gt;str&amp;lt;/i&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;italics()&lt;/code&gt; メソッドは、文字列埋め込み &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; ：タグ &lt;code&gt;&quot;&amp;lt;i&amp;gt;str&amp;lt;/i&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e74dd16f9858676902cde2900dd4949803073594" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keys()&lt;/code&gt; method is an alias for this method (for similarity with &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; objects); it behaves exactly the same and returns &lt;strong&gt;values&lt;/strong&gt; of &lt;code&gt;Set&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;keys()&lt;/code&gt; メソッドは（との類似性のため、この方法の別名である&lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;オブジェクト）。まったく同じように動作し、 &lt;code&gt;Set&lt;/code&gt; 要素の&lt;strong&gt;値&lt;/strong&gt;を返し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="183d7350179b9311f6ab0cc773e01fa02ad51905" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keys()&lt;/code&gt; method returns a new &lt;code&gt;Array Iterator&lt;/code&gt; object that contains the keys for each index in the array.</source>
          <target state="translated">&lt;code&gt;keys()&lt;/code&gt; メソッドの戻り新しい &lt;code&gt;Array Iterator&lt;/code&gt; アレイ内の各インデックスのキーを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="f138711db135dc77545d537efaa0371b48630b42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lastIndex&lt;/code&gt; is a read/write integer property of regular expression instances that specifies the index at which to start the next match.</source>
          <target state="translated">&lt;code&gt;lastIndex&lt;/code&gt; のは次の試合を開始する位置のインデックスを指定する正規表現のインスタンスの読み取り/書き込み整数プロパティです。</target>
        </trans-unit>
        <trans-unit id="23d7ea72aede6afa9bf6337e59208b0df9cc6a61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lastIndexOf()&lt;/code&gt; method is case sensitive. For example, the following expression returns -1:</source>
          <target state="translated">&lt;code&gt;lastIndexOf()&lt;/code&gt; メソッドは、大文字と小文字が区別されます。たとえば、次の式は-1を返します。</target>
        </trans-unit>
        <trans-unit id="7aeaa3725e44aeaaab6aa2ed98bb6cb13ae6961c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lastIndexOf()&lt;/code&gt; method returns the index within the calling &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object of the last occurrence of the specified value, searching backwards from &lt;code&gt;fromIndex&lt;/code&gt;. Returns -1 if the value is not found.</source>
          <target state="translated">&lt;code&gt;lastIndexOf()&lt;/code&gt; メソッドは、呼び出し内のインデックスを返す&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;から逆方向に検索して、指定の値の最後に現れるオブジェクト &lt;code&gt;fromIndex&lt;/code&gt; 。値が見つからない場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="113510bfe2eab0d5b0a61ea4c42047ebb99f5885" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; accessor property represents the length (in elements) of a typed array.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; プロパティアクセサは、型指定された配列の（要素における）長さを表します。</target>
        </trans-unit>
        <trans-unit id="c8dd28c3bf8fd7c77f8d27e10373d279d0f83b72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when a &lt;em&gt;TypedArray&lt;/em&gt; is constructed and cannot be changed. If the &lt;em&gt;TypedArray&lt;/em&gt; is not specifying an &lt;code&gt;byteOffset&lt;/code&gt; or a &lt;code&gt;length&lt;/code&gt;, the length of the referenced &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; will be returned. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; プロパティは、その設定アクセサ関数れるアクセサプロパティです &lt;code&gt;undefined&lt;/code&gt; あなただけのこのプロパティを読み取ることができることを意味し、。この値は、&lt;em&gt;TypedArrayの&lt;/em&gt;構築時に&lt;em&gt;設定&lt;/em&gt;され、変更できません。&lt;em&gt;TypedArray&lt;/em&gt;が &lt;code&gt;byteOffset&lt;/code&gt; または &lt;code&gt;length&lt;/code&gt; を指定していない場合、参照されている&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;長さが返されます。&lt;em&gt;TypedArray&lt;/em&gt;は&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArrayオブジェクトの&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="17eb6c72a74d84b4b63d4970c73653ebdce9ee57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; property of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object indicates the length of a string, in UTF-16 code units.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;length&lt;/code&gt; プロパティは、文字列の長さをUTF-16コード単位で示します。</target>
        </trans-unit>
        <trans-unit id="cb11bdfd638aa86f8289baf1a1d8a061b583b03c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; property of the &lt;code&gt;from()&lt;/code&gt; method is 1.</source>
          <target state="translated">&lt;code&gt;from()&lt;/code&gt; メソッドの &lt;code&gt;length&lt;/code&gt; プロパティは1です。</target>
        </trans-unit>
        <trans-unit id="09c5fb288f65bc91b4b3473ba47a47fb653facb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; statement declares a block scope local variable, optionally initializing it to a value.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 文は、必要に応じて値に初期化し、ブロックスコープのローカル変数を宣言します。</target>
        </trans-unit>
        <trans-unit id="0313466e501e9d2ee779cff6b6907eb58890ff94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link()&lt;/code&gt; method creates a string representing the code for an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element to be used as a hypertext link to another URL.</source>
          <target state="translated">&lt;code&gt;link()&lt;/code&gt; メソッドは、ためのコードを表す文字列を作成&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;/a&gt;別のURLへのハイパーテキストリンクとして使用するHTML要素。</target>
        </trans-unit>
        <trans-unit id="2c8a94c9b1f0a43763fc71db81d01f21c354f32a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locale&lt;/code&gt; parameter indicates the locale to be used to convert to lower case according to any locale-specific case mappings. If multiple locales are given in an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;https://tc39.github.io/ecma402/#sec-bestavailablelocale&quot;&gt;best available locale&lt;/a&gt; is used. The default locale is the host environment&amp;rsquo;s current locale.</source>
          <target state="translated">&lt;code&gt;locale&lt;/code&gt; パラメータには、任意のロケール固有のケースマッピングに従って小文字に変換するために使用されるロケールを示します。&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;で複数のロケールが指定されている場合は、&lt;a href=&quot;https://tc39.github.io/ecma402/#sec-bestavailablelocale&quot;&gt;利用可能な最良のロケール&lt;/a&gt;が使用されます。デフォルトのロケールは、ホスト環境の現在のロケールです。</target>
        </trans-unit>
        <trans-unit id="87a61fc61be3cb2fa6992be6f5681a169ebfa637" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locale&lt;/code&gt; parameter indicates the locale to be used to convert to upper case according to any locale-specific case mappings. If multiple locales are given in an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;https://tc39.github.io/ecma402/#sec-bestavailablelocale&quot;&gt;best available locale&lt;/a&gt; is used. The default locale is the host environment&amp;rsquo;s current locale.</source>
          <target state="translated">&lt;code&gt;locale&lt;/code&gt; パラメータには、任意のロケール固有のケースマッピングに従って大文字に変換するために使用するロケールを示します。&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;で複数のロケールが指定されている場合は、&lt;a href=&quot;https://tc39.github.io/ecma402/#sec-bestavailablelocale&quot;&gt;利用可能な最良のロケール&lt;/a&gt;が使用されます。デフォルトのロケールは、ホスト環境の現在のロケールです。</target>
        </trans-unit>
        <trans-unit id="fe7114676e5794e2c52c5f0428da500dcc35a1ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;localeCompare()&lt;/code&gt; method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.</source>
          <target state="translated">&lt;code&gt;localeCompare()&lt;/code&gt; メソッドは、参照文字列の前または後に来るか、ソート順で指定された文字列と同じであるか否かを示す数値を返します。</target>
        </trans-unit>
        <trans-unit id="883114d59602c7b3b87638f37eefba80d5f928a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments are not supported in all browsers yet. To check for support in ES5.1 and later implementations, the requirement that illegal language tags are rejected with a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception can be used:</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; の引数は、まだすべてのブラウザでサポートされていません。ES5.1以降の実装でのサポートを確認するには、不正な言語タグが&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;例外で拒否されるという要件を使用できます。</target>
        </trans-unit>
        <trans-unit id="ea464ebe7443bcc1cbc7c7ecc9c241c36251a148" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments are not supported in all browsers yet. To check whether an implementation supports them already, you can use the requirement that illegal language tags are rejected with a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; の引数は、まだすべてのブラウザでサポートされていません。実装がそれらをすでにサポートしているかどうかを確認するには、不正な言語タグが&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;例外で拒否されるという要件を使用できます。</target>
        </trans-unit>
        <trans-unit id="f572b1180fdbc7170369c39d485a6e7766dc9db9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments are not supported in all browsers yet. To check whether an implementation supports them, use the &quot;i&quot; argument (a requirement that illegal language tags are rejected) and look for a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; の引数は、まだすべてのブラウザでサポートされていません。実装がそれらをサポートしているかどうかを確認するには、「i」引数（不正な言語タグが拒否されるという要件）を使用して、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;例外を探します。</target>
        </trans-unit>
        <trans-unit id="e3949bb7189796b1cf1238b59f777179eda6e077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; argument must be either a string holding a &lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;BCP 47 language tag&lt;/a&gt;, or an array of such language tags. If the &lt;code&gt;locales&lt;/code&gt; argument is not provided or is undefined, the runtime's default locale is used.</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; 引数は、文字列、のいずれかでなければなりません&lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;BCP 47言語タグ&lt;/a&gt;、または、そのような言語タグの配列を。場合は &lt;code&gt;locales&lt;/code&gt; 引数が指定されていないか、定義されていない、実行時のデフォルトのロケールが使用されています。</target>
        </trans-unit>
        <trans-unit id="7086a2f95f0fc388bf0358b543f97d1674a54c6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; argument, after stripping off all Unicode extensions, is interpreted as a prioritized request from the application. The runtime compares it against the locales it has available and picks the best one available. Two matching algorithms exist: the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; matcher follows the Lookup algorithm specified in &lt;a href=&quot;http://tools.ietf.org/html/rfc4647#section-3.4&quot;&gt;BCP 47&lt;/a&gt;; the &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher lets the runtime provide a locale that's at least, but possibly more, suited for the request than the result of the Lookup algorithm. If the application doesn't provide a &lt;code&gt;locales&lt;/code&gt; argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the &lt;code&gt;options&lt;/code&gt; argument (see below).</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; 引数は、すべてのUnicode拡張をはがした後、アプリケーションからの優先順位の要求として解釈されます。ランタイムは、それを使用可能なロケールと比較し、使用可能な最良のロケールを選択します。 2つのマッチングアルゴリズムが存在します。 &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; マッチャーは、&lt;a href=&quot;http://tools.ietf.org/html/rfc4647#section-3.4&quot;&gt;BCP 47で&lt;/a&gt;指定されたルックアップアルゴリズムに従います。 &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; マッチャは、ランタイムが検索アルゴリズムの結果よりも、要求に適し、おそらくより少なくとものロケールを提供しますが、することができます。アプリケーションが &lt;code&gt;locales&lt;/code&gt; 引数を提供しない場合、またはランタイムにリクエストと一致するロケールがない場合は、ランタイムのデフォルトロケールが使用されます。マッチャーは &lt;code&gt;options&lt;/code&gt; 引数（下記参照）。</target>
        </trans-unit>
        <trans-unit id="b08d877e6bf413fc13c3d37199506f7d0a1e0e66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;map&lt;/code&gt; method calls a provided &lt;code&gt;callback&lt;/code&gt; function once for each element in a typed array, in order, and constructs a new typed array from the results. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the typed array which have assigned values; it is not invoked for indexes that are undefined, those which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 方法を提供呼び出し &lt;code&gt;callback&lt;/code&gt; ために、型指定された配列の各要素に対して一度関数を、その結果から新しい型指定された配列を構築します。 &lt;code&gt;callback&lt;/code&gt; は、値が割り当てられている型付き配列のインデックスに対してのみ呼び出されます。未定義のインデックス、削除されたインデックス、または値が割り当てられていないインデックスに対しては呼び出されません。</target>
        </trans-unit>
        <trans-unit id="bfae77744f16583101bc9d1e6d139a5d625553f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;match()&lt;/code&gt; method retrieves the matches when matching a &lt;em&gt;string&lt;/em&gt; against a &lt;em&gt;regular expression&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;match()&lt;/code&gt; に一致するときの方法は、マッチを検索&lt;em&gt;文字列&lt;/em&gt;に対して&lt;em&gt;正規表現&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1cd36e9e374ad9091fa6699ae6fe45d18730e8eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multiline&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;m&lt;/code&gt;&quot; flag is used with the regular expression. &lt;code&gt;multiline&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">&lt;code&gt;multiline&lt;/code&gt; プロパティは、「か否かを示す &lt;code&gt;m&lt;/code&gt; 」フラグが正規表現で使用されています。 &lt;code&gt;multiline&lt;/code&gt; は、個々の正規表現インスタンスの読み取り専用プロパティです。</target>
        </trans-unit>
        <trans-unit id="558f554fcdc8ea52cd4b8fe404a0f920fe941d72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; parameter is the name of the &quot;module object&quot; which will be used as a kind of namespace to refer to the exports. The &lt;code&gt;export&lt;/code&gt; parameters specify individual named exports, while the &lt;code&gt;import * as name&lt;/code&gt; syntax imports all of them. Below are examples to clarify the syntax.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; パラメータが輸出を参照する名前空間の種類として使用される「モジュールオブジェクト」の名前です。 &lt;code&gt;export&lt;/code&gt; ながらパラメータは、個々の名前の輸出を指定して &lt;code&gt;import * as name&lt;/code&gt; すべてのそれらの構文の輸入。構文を明確にするための例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="c2fd4b993fc5004622c5bb00bf202352054f7967" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; property returns the name of a function statement.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; プロパティは、functionステートメントの名前を返します。</target>
        </trans-unit>
        <trans-unit id="2283ba7d359450bc81731af9b0a2b87f569352d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new.target&lt;/code&gt; property is a meta property that is available to all functions. In &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, &lt;code&gt;new.target&lt;/code&gt; refers to the &lt;code&gt;new.target&lt;/code&gt; of the surrounding function.</source>
          <target state="translated">&lt;code&gt;new.target&lt;/code&gt; プロパティは、すべての機能が利用できるメタプロパティです。&lt;a href=&quot;../functions/arrow_functions&quot;&gt;矢印機能&lt;/a&gt;、 &lt;code&gt;new.target&lt;/code&gt; を指す &lt;code&gt;new.target&lt;/code&gt; 周囲関数の。</target>
        </trans-unit>
        <trans-unit id="7ce76926b68cdc3a461eccb5b461dabd528f74bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new.target&lt;/code&gt; syntax consists of the keyword &lt;code&gt;&quot;new&lt;/code&gt;&quot;, a dot, and a property name &lt;code&gt;&quot;target&quot;&lt;/code&gt;. Normally &quot;&lt;code&gt;new.&quot;&lt;/code&gt; serves as the context for a property access, but here &lt;code&gt;&quot;new.&quot;&lt;/code&gt; is not really an object. In constructor calls, however, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor invoked by &lt;code&gt;new&lt;/code&gt; and so &quot;&lt;code&gt;new.&lt;/code&gt;&quot; becomes a virtual context.</source>
          <target state="translated">&lt;code&gt;new.target&lt;/code&gt; 構文は、キーワードで構成され &lt;code&gt;&quot;new&lt;/code&gt; 」、ドット、およびプロパティ名 &lt;code&gt;&quot;target&quot;&lt;/code&gt; 。通常は「 &lt;code&gt;new.&quot;&lt;/code&gt; 」。プロパティアクセスのコンテキストとして機能しますが、ここでは &lt;code&gt;&quot;new.&quot;&lt;/code&gt; 実際にはオブジェクトではありません。ただし、コンストラクター呼び出しでは、 &lt;code&gt;new.target&lt;/code&gt; は &lt;code&gt;new&lt;/code&gt; によって呼び出されるコンストラクターを参照するため、「 &lt;code&gt;new.&lt;/code&gt; 」は仮想コンテキストになります。</target>
        </trans-unit>
        <trans-unit id="9cd6623e561ade5b01d90352a992281d58b6ac45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; operator creates an instance of a constructor.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 演算子は、コンストラクタのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="e21521d991c151367409a72b02a44ae78a0be060" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; method always has to return an object with appropriate properties including &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. If a non-object value gets returned (such as &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;), a &lt;a href=&quot;global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;iterator.next() returned a non-object value&quot;) will be thrown.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; の方法は、常に、適切な特性を有するオブジェクトを返す必要があります &lt;code&gt;done&lt;/code&gt; し、 &lt;code&gt;value&lt;/code&gt; 。非オブジェクト値（ &lt;code&gt;false&lt;/code&gt; や &lt;code&gt;undefined&lt;/code&gt; など）が返されると、&lt;a href=&quot;global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;（ &quot;iterator.next（）が非オブジェクト値を返した&quot;）がスローされます。</target>
        </trans-unit>
        <trans-unit id="f174fb73ba3588cb8caa57f832fa3eb95986aa78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize()&lt;/code&gt; method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).</source>
          <target state="translated">&lt;code&gt;normalize()&lt;/code&gt; メソッドの戻り指定された文字列のUnicodeの正規化形式（値は文字列でない場合、それは最初のものに変換されます）。</target>
        </trans-unit>
        <trans-unit id="4aff30fdae8f257c106e47a8bb7dd1011781b3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize()&lt;/code&gt; method returns the specified Unicode Normalization Form of the string. It does not affect the value of the string itself.</source>
          <target state="translated">&lt;code&gt;normalize()&lt;/code&gt; メソッドの戻り列の指定されたUnicode正規化形式。文字列自体の値には影響しません。</target>
        </trans-unit>
        <trans-unit id="8970c03025d4ded0d662a33a3f3917b925ab0b14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument must be an object with properties that vary between constructors and functions. If the &lt;code&gt;options&lt;/code&gt; argument is not provided or is undefined, default values are used for all properties.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数はコンストラクタと機能の間で変動するプロパティを持つオブジェクトでなければなりません。場合は &lt;code&gt;options&lt;/code&gt; 引数が指定されていないか、または定義されていない場合、デフォルト値は、すべてのプロパティのために使用されています。</target>
        </trans-unit>
        <trans-unit id="755c639a04dde41cfac04b322a645ce06eb3162a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ownKeys&lt;/code&gt; method must return an enumerable object.</source>
          <target state="translated">&lt;code&gt;ownKeys&lt;/code&gt; の方法は、列挙オブジェクトを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="ecbfd2872cecfb72bb48dc7cf45ebe8a9cf8640f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padEnd()&lt;/code&gt; method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.</source>
          <target state="translated">&lt;code&gt;padEnd()&lt;/code&gt; メソッドパッド指定された文字列（必要に応じて、繰り返される）と現在の文字列は、そのように得られた文字列が所定の長さに達します。パディングは現在の文字列の最後（右）から適用されます。</target>
        </trans-unit>
        <trans-unit id="18cee9d88b83b975af2ab16ea8f8315d121feff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padStart()&lt;/code&gt; method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start (left) of the current string.</source>
          <target state="translated">&lt;code&gt;padStart()&lt;/code&gt; 結果の文字列が所定の長さに達するまで、この方法は、（必要であれば複数回）別の文字列で現在の文字列をパッド。パディングは、現在の文字列の先頭（左）から適用されます。</target>
        </trans-unit>
        <trans-unit id="ff782796e7914cb522d339da2ed9982858565d69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse()&lt;/code&gt; method takes a date string (such as &lt;code&gt;&quot;Dec 25, 1995&quot;&lt;/code&gt;) and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC. This function is useful for setting date values based on string values, for example in conjunction with the &lt;a href=&quot;settime&quot;&gt;&lt;code&gt;setTime()&lt;/code&gt;&lt;/a&gt; method and the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;parse()&lt;/code&gt; メソッドは、（のような日付文字列取り &lt;code&gt;&quot;Dec 25, 1995&quot;&lt;/code&gt; ）と1970年1月1日00:00:00 UTCからのミリ秒数を返します。この関数は、たとえば&lt;a href=&quot;settime&quot;&gt; &lt;code&gt;setTime()&lt;/code&gt; &lt;/a&gt;メソッドや&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトと組み合わせて、文字列値に基づいて日付値を設定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="aefa58dbac2b38e433d64f17d1a342609b458b98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt&lt;/code&gt; function converts its first argument to a string, parses it, and returns an integer or &lt;code&gt;NaN&lt;/code&gt;. If not &lt;code&gt;NaN&lt;/code&gt;, the returned value will be the integer that is the first argument taken as a number in the specified &lt;var&gt;radix&lt;/var&gt; (base). For example, a &lt;var&gt;radix&lt;/var&gt; of 10 indicates to convert from a decimal number, 8 octal, 16 hexadecimal, and so on. For radices above &lt;code&gt;10&lt;/code&gt;, the letters of the alphabet indicate numerals greater than &lt;code&gt;9&lt;/code&gt;. For example, for hexadecimal numbers (base 16), &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;F&lt;/code&gt; are used.</source>
          <target state="translated">&lt;code&gt;parseInt&lt;/code&gt; の関数は、文字列に最初の引数を変換し、それを解析し、戻り整数または &lt;code&gt;NaN&lt;/code&gt; に。 &lt;code&gt;NaN&lt;/code&gt; でない場合、戻り値は、指定された &lt;var&gt;radix&lt;/var&gt; （底）の数値として取られる最初の引数である整数になります。たとえば、 &lt;var&gt;radix&lt;/var&gt; が10の場合、10進数、8進数で8、16進数で16などに変換されます。 &lt;code&gt;10&lt;/code&gt; を超える基数の場合、アルファベットの文字は &lt;code&gt;9&lt;/code&gt; より大きい数字を示します。たとえば、16進数（基数16）の場合、 &lt;code&gt;A&lt;/code&gt; から &lt;code&gt;F&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="62e0bb0ab90ea771feccdb11142c9389f76ef1c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt&lt;/code&gt; function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading white space in string is ignored. If radix is undefined or &lt;code&gt;0&lt;/code&gt;, it is assumed to be &lt;code&gt;10&lt;/code&gt; except when the number begins with the character pairs &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X&lt;/code&gt;, in which case a radix of 16 is assumed.</source>
          <target state="translated">&lt;code&gt;parseInt&lt;/code&gt; の関数は、指定された基数に応じて、文字列引数の内容の解釈によって決定される整数値を生成します。文字列の先頭の空白は無視されます。基数が未定義又はている場合は &lt;code&gt;0&lt;/code&gt; 、であると仮定される &lt;code&gt;10&lt;/code&gt; の数は、文字ペアで始まる場合を除き &lt;code&gt;0x&lt;/code&gt; または &lt;code&gt;0X&lt;/code&gt; 16の基数が想定される場合には、。</target>
        </trans-unit>
        <trans-unit id="c60f04904ead449c08e1e81c8531e7adcc2b41fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pop&lt;/code&gt; method removes the last element from an array and returns that value to the caller.</source>
          <target state="translated">&lt;code&gt;pop&lt;/code&gt; 方法は、その呼び出し元に値配列戻るから最後の要素を除去します。</target>
        </trans-unit>
        <trans-unit id="9ab16e0fc0db89306a6784360841c26c4479a73b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preventExtensions&lt;/code&gt; method must return a boolean value.</source>
          <target state="translated">&lt;code&gt;preventExtensions&lt;/code&gt; の方法は、ブール値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="8f32a090ceccd68383b7ba5f870e5dd9561a6baf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;products&lt;/code&gt; proxy object evaluates the passed value and converts it to an array if needed. The object also supports an extra property called &lt;code&gt;latestBrowser&lt;/code&gt; both as a getter and a setter.</source>
          <target state="translated">&lt;code&gt;products&lt;/code&gt; プロキシオブジェクトは、渡された値を評価し、必要に応じてアレイに変換します。このオブジェクトは、getterとsetterの両方として、 &lt;code&gt;latestBrowser&lt;/code&gt; と呼ばれる追加のプロパティもサポートしています。</target>
        </trans-unit>
        <trans-unit id="34d55bbc82b47848857e3ac616ac13cf5700cad2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;push&lt;/code&gt; method appends values to an array.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 方法は、配列に値を付加します。</target>
        </trans-unit>
        <trans-unit id="633d24f997230b8d766489544feb01d87ea952bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;race&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is settled the same way (and takes the same value) as the first promise that settles amongst the promises of the iterable passed as argument.</source>
          <target state="translated">&lt;code&gt;race&lt;/code&gt; 関数は返す &lt;code&gt;Promise&lt;/code&gt; 引数として渡された反復可能なの約束の中で安定するという最初の約束と同じように落ち着い（と同じ値をとる）されます。</target>
        </trans-unit>
        <trans-unit id="33aa038fc6863abbea6e118da1e8c10abf78154f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reduce&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array, excluding holes in the typed array, receiving four arguments: the initial value (or value from the previous &lt;code&gt;callback&lt;/code&gt; call), the value of the current element, the current index, and the typed array over which iteration is occurring.</source>
          <target state="translated">&lt;code&gt;reduce&lt;/code&gt; 方法を実行 &lt;code&gt;callback&lt;/code&gt; 初期値（または前の値：四つの引数受信、型指定された配列内の穴を除く、型指定された配列内の各要素の存在のために一度関数を &lt;code&gt;callback&lt;/code&gt; 呼び出し）、現在の要素の値は、現在のインデックス、および反復が発生する型付き配列。</target>
        </trans-unit>
        <trans-unit id="20ffacb4e44ab32601d9f4fb5d99c50d57cecf13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reduceRight&lt;/code&gt; method executes the callback function once for each element present in the typed array, excluding holes in the typed array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the typed array over which iteration is occurring.</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; の初期値（または前のコールバック呼び出しからの値）、現在の要素の値は、現在の：方法は、4つの引数を受信し、型指定された配列内の穴を除いて、型指定された配列内の各要素の存在のために一度コールバック関数を実行しますインデックス、および反復が発生する型付き配列。</target>
        </trans-unit>
        <trans-unit id="7f9e1929ca6391ece612b3add43641e3689412f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repeat()&lt;/code&gt; method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.</source>
          <target state="translated">&lt;code&gt;repeat()&lt;/code&gt; メソッドの構文と戻り、それが一緒に連結、呼び出された文字列のコピーの指定された数を含む新しい文字列。</target>
        </trans-unit>
        <trans-unit id="30b629a773a8dd7d41ea9e8b169140d5bf21911d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replace()&lt;/code&gt; method returns a new string with some or all matches of a &lt;code&gt;pattern&lt;/code&gt; replaced by a &lt;code&gt;replacement&lt;/code&gt;. The &lt;code&gt;pattern&lt;/code&gt; can be a string or a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;replacement&lt;/code&gt; can be a string or a function to be called for each match. If &lt;code&gt;pattern&lt;/code&gt; is a string, only the first occurrence will be replaced.</source>
          <target state="translated">&lt;code&gt;replace()&lt;/code&gt; メソッドは、一部またはすべてのマッチした新しい文字列を返す &lt;code&gt;pattern&lt;/code&gt; に置き換え &lt;code&gt;replacement&lt;/code&gt; 。 &lt;code&gt;pattern&lt;/code&gt; 文字列またはあることができる&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;replacement&lt;/code&gt; 、文字列または各マッチのために呼び出される関数であることができます。 &lt;code&gt;pattern&lt;/code&gt; が文字列の場合、最初に出現したものだけが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="341f412d5f7d5aab08aaa95acf74d7f837961b69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replacer&lt;/code&gt; parameter</source>
          <target state="translated">&lt;code&gt;replacer&lt;/code&gt; パラメータ</target>
        </trans-unit>
        <trans-unit id="0d734f45eeb768c565804623ec5ec86381be24ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replacer&lt;/code&gt; parameter can be either a function or an array.</source>
          <target state="translated">&lt;code&gt;replacer&lt;/code&gt; パラメータは関数または配列のいずれかとすることができます。</target>
        </trans-unit>
        <trans-unit id="78aa7130e5e55b9662aeb44be141261920014bfa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return&lt;/code&gt; ends function execution and specifies a value to be returned to the function caller.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 終了機能の実行や指定する値は、関数の呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="1825c33bdb119cbc94fc38f165d172979bab1bb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return&lt;/code&gt; statement is affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;. No line terminator is allowed between the &lt;code&gt;return&lt;/code&gt; keyword and the expression.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 文はに影響される&lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;自動セミコロン挿入（ASI） &lt;/a&gt;。 &lt;code&gt;return&lt;/code&gt; キーワードと式の間に改行記号を入れることはできません。</target>
        </trans-unit>
        <trans-unit id="94001dce7d6c0277531fc208a30177bf512bc983" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse&lt;/code&gt; method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array.</source>
          <target state="translated">&lt;code&gt;reverse&lt;/code&gt; 方法は、配列を変異、及び配列への参照を返す代わりに、呼び出し配列オブジェクトの要素を転置します。</target>
        </trans-unit>
        <trans-unit id="73fda5f3ce4df46d6bd3cfa77cfdb40d794c10ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search()&lt;/code&gt; method executes a search for a match between a regular expression and this &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;search()&lt;/code&gt; メソッドは、正規表現との間のこの一致の検索実行&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="91b89c8ef1b28ba3db99fa2d5a508436f955931e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set()&lt;/code&gt; method stores multiple values in the typed array, reading input values from a specified array.</source>
          <target state="translated">&lt;code&gt;set()&lt;/code&gt; 指定された配列からの入力値を読み込む型指定された配列内のメソッド格納複数の値を、。</target>
        </trans-unit>
        <trans-unit id="afa3d342e4bc64667929dfba353c2c5c385f97f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; method should return a boolean value. Return &lt;code&gt;true&lt;/code&gt; to indicate that assignment succeeded. If the &lt;code&gt;set&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;, and the assignment happened in strict-mode code, a &lt;code&gt;TypeError&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 方法は、ブール値を返す必要があります。 &lt;code&gt;true&lt;/code&gt; を返すと、割り当てが成功したことを示します。場合は &lt;code&gt;set&lt;/code&gt; メソッドが返すの &lt;code&gt;false&lt;/code&gt; 割り当てが厳密モードのコードで起こった、そして、 &lt;code&gt;TypeError&lt;/code&gt; 例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="01518a20f1590edf2677afb2701eab97cf0432cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; syntax binds an object property to a function to be called when there is an attempt to set that property.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 構文は、そのプロパティを設定しようとしたときに、関数へのオブジェクトプロパティが呼び出されることに結合します。</target>
        </trans-unit>
        <trans-unit id="45224e723f1721f9d3c13524ff9d20d789929030" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setDate()&lt;/code&gt; method sets the day of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object relative to the beginning of the currently set month.</source>
          <target state="translated">&lt;code&gt;setDate()&lt;/code&gt; メソッドは、日設定&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;現在設定されている月の初めに対する物体を。</target>
        </trans-unit>
        <trans-unit id="0d9d1bae85d41120a53a7340c0bdd89b7a51db51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFloat32()&lt;/code&gt; method stores a signed 32-bit float (float) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setFloat32()&lt;/code&gt; メソッドストアの先頭からのオフセット指定されたバイトで符号付き32ビットフロート（フロート）値&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45a036c27a787e007cc4eccd674e04938f8975b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFloat64()&lt;/code&gt; method stores a signed 64-bit float (double) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setFloat64()&lt;/code&gt; メソッドストアの先頭からのオフセット指定されたバイトで符号付き64ビット浮動小数点（ダブル）値&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75853f0bea9dcc76f1f09901ffb1b2a24eb42803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFullYear()&lt;/code&gt; method sets the full year for a specified date according to local time. Returns new timestamp.</source>
          <target state="translated">&lt;code&gt;setFullYear()&lt;/code&gt; メソッドは、ローカル時間に基づき、指定された日時の通年を設定します。新しいタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="23428a9e37d33ce840e55033fafbd7c8676488da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setHours()&lt;/code&gt; method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;setHours()&lt;/code&gt; メソッドは、ローカル時間に基づき、指定された日付の時間を設定し、時間が更新で表されるまで、1970年1月1日から00:00:00のミリ秒数を返す&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="73882f81fd5a0702c5c489eb2978efe759f4fd70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setInt16()&lt;/code&gt; method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setInt16()&lt;/code&gt; メソッドを格納符号付き16ビット整数（ショート）値の先頭からのオフセット指定されたバイトでの&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d77d742cec0a6991749751071a2eee256c6ef115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setInt32()&lt;/code&gt; method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setInt32()&lt;/code&gt; メソッドストアの先頭からのオフセット指定されたバイトで符号付き32ビット整数（長い）値&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="49306e42c516b8e8fbb2eb954a0b4f9f94de178b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setInt8()&lt;/code&gt; method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setInt8()&lt;/code&gt; メソッドストアの先頭からのオフセット指定されたバイトで符号付き8ビット整数（バイト）値&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6ce03c23c2628b4f043524d96a70c7ec69036c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setMilliseconds()&lt;/code&gt; method sets the milliseconds for a specified date according to local time.</source>
          <target state="translated">&lt;code&gt;setMilliseconds()&lt;/code&gt; メソッドは、ローカル時間に基づき、指定された日付のミリ秒を設定します。</target>
        </trans-unit>
        <trans-unit id="3af72fc29cdb4e1a5fde6585640fdae002c1fe46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setMinutes()&lt;/code&gt; method sets the minutes for a specified date according to local time.</source>
          <target state="translated">&lt;code&gt;setMinutes()&lt;/code&gt; メソッドは、ローカル時間に基づき、指定された日付の分を設定します。</target>
        </trans-unit>
        <trans-unit id="403f0919425de2bcf88cd0a132b42f328c196b20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setMonth()&lt;/code&gt; method sets the month for a specified date according to the currently set year.</source>
          <target state="translated">&lt;code&gt;setMonth()&lt;/code&gt; メソッドは、現在設定されている年に基づき、指定された日時の月を設定します。</target>
        </trans-unit>
        <trans-unit id="36506ea61e5bef89a285379403a21ba86c6d6375" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setPrototypeOf&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;[[Prototype]]&lt;/code&gt; was successfully changed, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setPrototypeOf&lt;/code&gt; の方法は返し &lt;code&gt;true&lt;/code&gt; 場合は &lt;code&gt;[[Prototype]]&lt;/code&gt; 正常に変更されたそうでない場合は、 &lt;code&gt;false&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a48af94ec3f2b112ce922a1a295738d4f6e7e17d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setSeconds()&lt;/code&gt; method sets the seconds for a specified date according to local time.</source>
          <target state="translated">&lt;code&gt;setSeconds()&lt;/code&gt; メソッドは、ローカル時間に基づき、指定された日時の秒を設定します。</target>
        </trans-unit>
        <trans-unit id="a096b9c2df07dc8063e8649cb0c5c1ab00cc6384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setTime()&lt;/code&gt; method sets the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.</source>
          <target state="translated">&lt;code&gt;setTime()&lt;/code&gt; メソッドは、設定&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;時間にオブジェクトが、1970年1月1日00:00:00 UTCからのミリ秒数で表されます。</target>
        </trans-unit>
        <trans-unit id="de572d36f314857b2ce259d68a05e3bce5b61d39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCDate()&lt;/code&gt; method sets the day of the month for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCDate()&lt;/code&gt; メソッドでは世界時に基づき、指定された日時の月の日付を設定します。</target>
        </trans-unit>
        <trans-unit id="7f38365ea2d59a1194bf5f4f42e70c72249a6323" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCFullYear()&lt;/code&gt; method sets the full year for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCFullYear()&lt;/code&gt; メソッドでは世界時に基づき、指定された日時の通年を設定します。</target>
        </trans-unit>
        <trans-unit id="a0d7e0df49c1d646e3a239a8081d192908f2580f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCHours()&lt;/code&gt; method sets the hour for a specified date according to universal time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;setUTCHours()&lt;/code&gt; メソッドは、世界時に基づき、指定された日時の時間を設定し、戻って1970年1月1日からのミリ秒数00:00:00更新で表される時間までの&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="7880b6e9871ab35907d380c2581378730b097670" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; method sets the milliseconds for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCMilliseconds()&lt;/code&gt; メソッドでは世界時に基づき、指定された日時のミリ秒を設定します。</target>
        </trans-unit>
        <trans-unit id="3296b4db04455b2c6710477aa8a2735e0ac06e75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCMinutes()&lt;/code&gt; method sets the minutes for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCMinutes()&lt;/code&gt; メソッドは、世界時に従って、指定された日時の分を設定します。</target>
        </trans-unit>
        <trans-unit id="cb9bc5f6461e116f0f810368ed4497cf904f8baa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCMonth()&lt;/code&gt; method sets the month for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCMonth()&lt;/code&gt; メソッドでは世界時に基づき、指定された日時の月を設定します。</target>
        </trans-unit>
        <trans-unit id="c1bd3a2f0adacb7676183d4f486b7a314e7ebc56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCSeconds()&lt;/code&gt; method sets the seconds for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCSeconds()&lt;/code&gt; メソッドでは世界時に基づき、指定された日時の秒を設定します。</target>
        </trans-unit>
        <trans-unit id="6403066c197b602947ff39362877ae8674531421" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUint16()&lt;/code&gt; method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setUint16()&lt;/code&gt; メソッドストアの先頭からのオフセット指定されたバイトで符号なし16ビット整数（符号なしshort）値&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf0a945544e186d0b49c0f2b8a68511e4bd62e26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUint32()&lt;/code&gt; method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setUint32()&lt;/code&gt; メソッドストアの先頭からのオフセット指定されたバイトで符号なし32ビット整数（unsigned long型）値&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c56402f6420e37b73178dc9c773cb8a7d5f73d33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUint8()&lt;/code&gt; method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setUint8()&lt;/code&gt; メソッドストアの先頭からのオフセット指定されたバイトで符号なし8ビット整数（バイト）値&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75f9ec0c3f813d1eedecab4ed7911277e6aabe77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shift&lt;/code&gt; method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value. If the &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property is 0, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;code&gt;shift&lt;/code&gt; 方法は、ゼロ番目のインデックスにある要素を削除し、ダウン連続したインデックスに値をシフトし、除去した値を返します。場合は&lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティが0である、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;返されます。</target>
        </trans-unit>
        <trans-unit id="8c0cff95e4409ed92bc4573e6783a353a2a717a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice()&lt;/code&gt; method extracts a section of a string and returns it as a new string, without modifying the original string.</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; メソッドは、文字列の部分を抽出し、元の文字列を変更することなく、新たな文字列として返します。</target>
        </trans-unit>
        <trans-unit id="93b4aadf41d545ddf2d902b3c09b49283d21b559" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; method copies up to, but not including, the byte indicated by the &lt;code&gt;end&lt;/code&gt; parameter. If either &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; is negative, it refers to an index from the end of the array, as opposed to from the beginning.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 方式のコピーが、含めないまで、バイトがで示される &lt;code&gt;end&lt;/code&gt; パラメータ。 &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;end&lt;/code&gt; のいずれかが負の場合、最初からではなく、配列の最後からのインデックスを参照します。</target>
        </trans-unit>
        <trans-unit id="bc6796e69b48f93eec07acfe185d9d15372affbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; method does not alter. It returns a shallow copy of elements from the original typed array.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 方法は変更されません。元の型付き配列から要素の浅いコピーを返します。</target>
        </trans-unit>
        <trans-unit id="aaf2807ffd405cc84ac738196cd3f881d6868234" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;small()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt;&lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in a small font.</source>
          <target state="translated">&lt;code&gt;small()&lt;/code&gt; メソッドを作成し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt; &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; &lt;/a&gt;小さなフォントで表示される文字列を引き起こすHTML要素。</target>
        </trans-unit>
        <trans-unit id="829a872efd080f7954a56045279afd8ebbac1c5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;small()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;small&amp;gt;str&amp;lt;/small&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;small()&lt;/code&gt; メソッドは、内の文字列を埋め込む &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; タグ： &lt;code&gt;&quot;&amp;lt;small&amp;gt;str&amp;lt;/small&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca6f400142a2c25332b87f4b99a76332641e98ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;some&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value. If such an element is found, &lt;code&gt;some&lt;/code&gt; immediately returns &lt;code&gt;true&lt;/code&gt;. Otherwise, &lt;code&gt;some&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;some&lt;/code&gt; 方法を実行 &lt;code&gt;callback&lt;/code&gt; それが1見つかるまで、型指定された配列内の各要素の存在のために一度関数を &lt;code&gt;callback&lt;/code&gt; 真の値を返しています。そのような要素が見つかった場合、 &lt;code&gt;some&lt;/code&gt; すぐに戻ります &lt;code&gt;true&lt;/code&gt; 。そうでなければ、 &lt;code&gt;some&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9100d3ba6e1e86b77eb0b07a7f274f3e7f393fb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sort&lt;/code&gt; method can be conveniently used with &lt;a href=&quot;../../operators/function&quot;&gt;function expressions&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;sort&lt;/code&gt; 方法は、簡便で使用できる&lt;a href=&quot;../../operators/function&quot;&gt;関数式&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="499e2b3f7324baaf767d11bc108fa7744d9289e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property for empty regular expressions now returns &quot;(?:)&quot; instead of an empty string. A definition for the escaping behavior has been added.</source>
          <target state="translated">空の正規表現の &lt;code&gt;source&lt;/code&gt; プロパティは、空の文字列ではなく「（？:)」を返すようになりました。エスケープ動作の定義が追加されました。</target>
        </trans-unit>
        <trans-unit id="21afb7889039c2ca365865732cb59eee7cee8f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property returns a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; containing the source text of the regexp object, and it doesn't contain the two forward slashes on both sides and any flags.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; プロパティが返す&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;正規表現オブジェクトのソーステキストを含むが、それは両側に2つのスラッシュと任意のフラグが含まれていません。</target>
        </trans-unit>
        <trans-unit id="f081fd2fcaf00b6f4603d7f666a650d220572341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space&lt;/code&gt; argument</source>
          <target state="translated">&lt;code&gt;space&lt;/code&gt; 引数</target>
        </trans-unit>
        <trans-unit id="8ccba351da674181850d390944a0dc58c3521ad3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space&lt;/code&gt; argument may be used to control spacing in the final string.</source>
          <target state="translated">&lt;code&gt;space&lt;/code&gt; 引数は、最終的な文字列内の間隔を制御するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="6a233153b50fe557fdd0379de0cbec9b71c9dcc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; プロパティが返すアクセサのデフォルトコンストラクタ&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型指定された配列&lt;/a&gt;オブジェクト。サブクラスコンストラクターは、コンストラクターの割り当てを変更するためにオーバーライドする場合があります。</target>
        </trans-unit>
        <trans-unit id="e2d25b4299acbc398c6b62130c59f60822dfe859" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;code&gt;Array&lt;/code&gt; objects. Subclass constructors may override it to change the constructor assignment.</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; のためのプロパティが返すアクセサはデフォルトコンストラクタ &lt;code&gt;Array&lt;/code&gt; オブジェクト。サブクラスコンストラクターは、コンストラクターの割り当てを変更するためにそれをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="601b2478148eb6bd5202d1429c4e933267b52c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;code&gt;RegExp&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; プロパティが返すアクセサのデフォルトコンストラクタ &lt;code&gt;RegExp&lt;/code&gt; オブジェクト。サブクラスコンストラクターは、コンストラクターの割り当てを変更するためにオーバーライドする場合があります。</target>
        </trans-unit>
        <trans-unit id="b363d88f771a62702012ce4aba514c3171275947" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is one of the typed array constructors for a given &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; object:</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; プロパティは、所与のために型指定された配列コンストラクタの一つであるデフォルトコンストラクタ関数、戻り&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型付き配列&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="24e49f373d7e20e5dc5e2d161d8979912f797d82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is the &lt;code&gt;Array&lt;/code&gt; constructor for &lt;code&gt;Array&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; プロパティがあり、デフォルトのコンストラクタ関数、返す &lt;code&gt;Array&lt;/code&gt; のコンストラクタ &lt;code&gt;Array&lt;/code&gt; オブジェクトを：</target>
        </trans-unit>
        <trans-unit id="9eae346a6740d7f6886b64231691dc06c17d04e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is the &lt;code&gt;RegExp&lt;/code&gt; constructor for &lt;code&gt;RegExp&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; プロパティがあり、デフォルトのコンストラクタ関数、返し &lt;code&gt;RegExp&lt;/code&gt; のコンストラクタ &lt;code&gt;RegExp&lt;/code&gt; オブジェクトを：</target>
        </trans-unit>
        <trans-unit id="db31fc87b43f5f60c0d2eb6a1b89573b2dbd8aba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;splice()&lt;/code&gt; method changes the contents of an array by removing existing elements and/or adding new elements.</source>
          <target state="translated">&lt;code&gt;splice()&lt;/code&gt; メソッドは、既存の要素を除去し、および/または新たな要素を追加することによって、配列の内容を変更します。</target>
        </trans-unit>
        <trans-unit id="e95c7a0c76d1545fdde91a9fb98f9e8135ae9cff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;split()&lt;/code&gt; method splits a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split.</source>
          <target state="translated">&lt;code&gt;split()&lt;/code&gt; メソッドは、分割&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;場合、各分割を行うことを決定するために指定されたセパレータ文字列を使用して、サブストリングに文字列を分離することにより、文字列の配列にオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="e29d8c4d782d1b004f826d77b14b3418f2814509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;startsWith()&lt;/code&gt; method determines whether a string begins with the characters of a specified string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="translated">&lt;code&gt;startsWith()&lt;/code&gt; メソッドは、文字列を返す、指定された文字列の文字で始まるかどうかを決定する &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 適宜。</target>
        </trans-unit>
        <trans-unit id="77d3afa15edcb61a8dd51d9fae468c30feda07d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sticky&lt;/code&gt; property reflects whether or not the search is sticky (searches in strings only from the index indicated by the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property of this regular expression). &lt;code&gt;sticky&lt;/code&gt; is a read-only property of an individual regular expression object.</source>
          <target state="translated">&lt;code&gt;sticky&lt;/code&gt; プロパティは、検索がスティッキー（インデックスはで示さのみから、文字列で検索しているか否かを反映し&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; の&lt;/a&gt;この正規表現のプロパティ）。 &lt;code&gt;sticky&lt;/code&gt; は、個々の正規表現オブジェクトの読み取り専用プロパティです。</target>
        </trans-unit>
        <trans-unit id="99043c5a32d0365d88f7489c6a8f1df22ee9d725" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strike()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt;&lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as struck-out text.</source>
          <target state="translated">&lt;code&gt;strike()&lt;/code&gt; メソッドを作成します&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt; &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; &lt;/a&gt;打たアウトテキストとして表示される文字列の原因となるHTML要素を。</target>
        </trans-unit>
        <trans-unit id="31a05bd2a1780dc31b42319ce054ece0665f1e16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strike()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;strike&amp;gt;str&amp;lt;/strike&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strike()&lt;/code&gt; メソッドは、文字列埋め込み &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; タグ： &lt;code&gt;&quot;&amp;lt;strike&amp;gt;str&amp;lt;/strike&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="507fbf2cabe8cc4c38162953645bf7c1f619ac17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sub()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt;&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as subscript.</source>
          <target state="translated">&lt;code&gt;sub()&lt;/code&gt; メソッドを作成し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt; &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; &lt;/a&gt;下付き文字として表示される文字列を引き起こすHTML要素。</target>
        </trans-unit>
        <trans-unit id="2bdb3a13b34e25938fe41425b72524f0bf1cc3be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sub()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;sub&amp;gt;str&amp;lt;/sub&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sub()&lt;/code&gt; メソッドは、文字列埋め込み &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; タグ： &lt;code&gt;&quot;&amp;lt;sub&amp;gt;str&amp;lt;/sub&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9993ed926361be11052212435757aafd0d039ba5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subarray()&lt;/code&gt; method returns a new &lt;em&gt;TypedArray&lt;/em&gt; on the same &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; store and with the same element types as for this &lt;em&gt;TypedArray&lt;/em&gt; object. The &lt;code&gt;begin&lt;/code&gt; offset is &lt;strong&gt;inclusive&lt;/strong&gt; and the &lt;code&gt;end&lt;/code&gt; offset is &lt;strong&gt;exclusive&lt;/strong&gt;. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;subarray()&lt;/code&gt; メソッドは、新しい戻り&lt;em&gt;TypedArrayを&lt;/em&gt;同じに&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;ストアと、このため同じ要素タイプと&lt;em&gt;TypedArrayの&lt;/em&gt;オブジェクト。 &lt;code&gt;begin&lt;/code&gt; オフセットで&lt;strong&gt;包括的&lt;/strong&gt;かつ &lt;code&gt;end&lt;/code&gt; オフセットがある&lt;strong&gt;排他的&lt;/strong&gt;。&lt;em&gt;TypedArray&lt;/em&gt;は、&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型付き配列型の&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="2aa58fac1e632511279bc461e0096abef9f7ba06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;substr()&lt;/code&gt; method returns a portion of the string, starting at the specified index and extending for a given number of characters afterward.</source>
          <target state="translated">&lt;code&gt;substr()&lt;/code&gt; メソッドは、指定されたインデックスから開始し、その後の文字の所定の数の延びる、文字列の一部を返します。</target>
        </trans-unit>
        <trans-unit id="be167c8175a7d6f8833d2941a5e2fdcd944be2d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;substring()&lt;/code&gt; method returns the part of the &lt;code&gt;string&lt;/code&gt; between the start and end indexes, or to the end of the string.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; メソッドは、一部の戻り &lt;code&gt;string&lt;/code&gt; の開始と終了のインデックスとの間の、または文字列の末尾に。</target>
        </trans-unit>
        <trans-unit id="003c13ccdfd8b1a57c113ea1d6bc0e52ea29e631" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sup()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt;&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as superscript.</source>
          <target state="translated">&lt;code&gt;sup()&lt;/code&gt; メソッドを作成し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt; &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; &lt;/a&gt;上付き文字として表示する文字列を引き起こすHTML要素。</target>
        </trans-unit>
        <trans-unit id="6ff29a71a32065c70b52973a18ab04a6c17f1dff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sup()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;sup&amp;gt;str&amp;lt;/sup&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sup()&lt;/code&gt; メソッドは、文字列埋め込み &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; タグ： &lt;code&gt;&quot;&amp;lt;sup&amp;gt;str&amp;lt;/sup&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e46078bb0ba472d9375caf8339dff1c52c38414" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;super.prop&lt;/code&gt; and &lt;code&gt;super[expr]&lt;/code&gt; expressions are valid in any &lt;a href=&quot;../functions/method_definitions&quot;&gt;method definition&lt;/a&gt; in both &lt;a href=&quot;../classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;object_initializer&quot;&gt;object literals&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;super.prop&lt;/code&gt; と &lt;code&gt;super[expr]&lt;/code&gt; の式は、いずれかの有効な&lt;a href=&quot;../functions/method_definitions&quot;&gt;メソッド定義&lt;/a&gt;の両方で&lt;a href=&quot;../classes&quot;&gt;クラス&lt;/a&gt;と&lt;a href=&quot;object_initializer&quot;&gt;オブジェクトリテラル&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58c5b386594d5e64ef24ee818cae836b2122508b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;super&lt;/code&gt; keyword calls the parent constructor.</source>
          <target state="translated">&lt;code&gt;super&lt;/code&gt; キーワードは、親クラスのコンストラクタを呼び出します。</target>
        </trans-unit>
        <trans-unit id="91de460ec7fcf2753b77f48df09d0c84f211e499" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; evaluates an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators&quot;&gt;expression&lt;/a&gt;, matching the expression's value to a &lt;code&gt;case&lt;/code&gt; clause, and executes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;statements&lt;/a&gt; associated with that case, as well as statements in cases that follow the matching case.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 評価&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators&quot;&gt;式を&lt;/a&gt;に式の値と一致する、 &lt;code&gt;case&lt;/code&gt; 句、および実行&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;文&lt;/a&gt;マッチングケースに従う場合には、その場合、同様のステートメントに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="3e53ba41760666996f98eae5a199f411ab236a83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; must be a callable itself. That is, it must be a function object.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 呼び出し可能な、それ自体でなければなりません。つまり、関数オブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="118b70346f478cde348ec89edbef454b86b02683" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test()&lt;/code&gt; method executes a search for a match between a regular expression and a specified string. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;test()&lt;/code&gt; メソッドは、正規表現と指定された文字列の間のマッチの検索を実行します。 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a26026e74ab32dbe930f6fe9c0eb33b2bb573b08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;then&lt;/code&gt; method returns a &lt;code&gt;Promise&lt;/code&gt; which allows for method chaining.</source>
          <target state="translated">&lt;code&gt;then&lt;/code&gt; 方法は戻り &lt;code&gt;Promise&lt;/code&gt; 方法連鎖を可能にします。</target>
        </trans-unit>
        <trans-unit id="9e82a86dbb3410327d5092a53deea5d6ea2eb81d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; keyword refers to a special property of an execution context.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; キーワードは、実行コンテキストの特殊な性質を指します。</target>
        </trans-unit>
        <trans-unit id="00fd0b0cc8d2f6cd4678dd2f83f96ee25c5edd2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;throw&lt;/code&gt; throws a user-defined exception. Execution of the current function will stop (the statements after &lt;code&gt;throw&lt;/code&gt; won't be executed), and control will be passed to the first &lt;a href=&quot;try...catch&quot;&gt;&lt;code&gt;catch&lt;/code&gt;&lt;/a&gt; block in the call stack. If no &lt;code&gt;catch&lt;/code&gt; block exists among caller functions, the program will terminate.</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; ユーザ定義の例外をスローします。現在の関数の実行が停止し（ &lt;code&gt;throw&lt;/code&gt; の後のステートメントは実行されません）、制御は呼び出しスタックの最初の&lt;a href=&quot;try...catch&quot;&gt; &lt;code&gt;catch&lt;/code&gt; &lt;/a&gt;ブロックに渡されます。呼び出し元の関数の間に &lt;code&gt;catch&lt;/code&gt; ブロックが存在しない場合、プログラムは終了します。</target>
        </trans-unit>
        <trans-unit id="412cad314e9e2ce3182ddcf5c41f4f9b131718f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toDateString()&lt;/code&gt; method is especially useful because compliant engines implementing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt; may differ in the string obtained from &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects, as the format is implementation-dependent and simple string slicing approaches may not produce consistent results across multiple engines.</source>
          <target state="translated">&lt;code&gt;toDateString()&lt;/code&gt; が実装準拠エンジンための方法が特に有用である&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt;から得られた文字列が異なっていてもよい&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;のための&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;フォーマットは実装依存であり、単純な文字列スライスであるとして、オブジェクト複数のエンジン間で一貫した結果が得られないことがあり近づきます。</target>
        </trans-unit>
        <trans-unit id="cbdc60f0324fcd00ec12f6699e2bce8320cb7592" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toDateString()&lt;/code&gt; method returns the date portion of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object in human readable form in American English.</source>
          <target state="translated">&lt;code&gt;toDateString()&lt;/code&gt; メソッドは、の日付部分を返す&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;アメリカ英語では、人間が読める形式でオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="5f989bfca9e5f06fffcc793cf31d7367de0dde7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toExponential()&lt;/code&gt; method returns a string representing the Number object in exponential notation.</source>
          <target state="translated">&lt;code&gt;toExponential()&lt;/code&gt; メソッドは、指数表記の数値オブジェクトを表す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="53d8b1c4bd3dbc794cbda4ebd5abe95d88e21507" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toFixed()&lt;/code&gt; method formats a number using fixed-point notation.</source>
          <target state="translated">&lt;code&gt;toFixed()&lt;/code&gt; メソッドは、固定小数点表記を使用して数値をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="6f32bb884a567e3a395878b1be4722efa1cadfea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toISOString()&lt;/code&gt; method returns a string in &lt;em&gt;simplified&lt;/em&gt; extended ISO format (&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;), which is always 24 or 27 characters long (&lt;code&gt;YYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt; or &lt;code&gt;&amp;plusmn;YYYYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt;, respectively). The timezone is always zero UTC offset, as denoted by the suffix &quot;&lt;code&gt;Z&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;toISOString()&lt;/code&gt; メソッドは、文字列を返し&lt;em&gt;簡略&lt;/em&gt;拡張ISOフォーマット（&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;（24又は27文字常に）、 &lt;code&gt;YYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt; または &lt;code&gt;&amp;plusmn;YYYYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt; ）。タイムゾーンは、サフィックス「 &lt;code&gt;Z&lt;/code&gt; 」で示されるように、常にゼロUTCオフセットです。</target>
        </trans-unit>
        <trans-unit id="f85df78873b6cf40bbfcdeb161d8c38d9baf44c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toJSON()&lt;/code&gt; method returns a string representation of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;toJSON()&lt;/code&gt; メソッドは、文字列表現戻り&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6de692ce5d4ffa4c2464aca0c7356c940514d2ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleDateString()&lt;/code&gt; method returns a string with a language sensitive representation of the date portion of this date. The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">&lt;code&gt;toLocaleDateString()&lt;/code&gt; メソッドは、この日付の日付部分の言語に敏感な表現の文字列を返します。新しい &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数により、アプリケーションは、フォーマット規則を使用する言語を指定し、関数の動作をカスタマイズできます。 &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数を無視する古い実装では、使用されるロケールと返される文字列の形式は完全に実装に依存します。</target>
        </trans-unit>
        <trans-unit id="cdc0297f0eb65109fdc9b01fc5f3443358fd86a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; method returns the calling string value converted to lower case, according to any locale-specific case mappings.</source>
          <target state="translated">&lt;code&gt;toLocaleLowerCase()&lt;/code&gt; メソッドを呼び出す文字列の値は、任意のロケール固有のケースマッピングに従って、小文字に変換戻ります。</target>
        </trans-unit>
        <trans-unit id="443b75095ca82d21f5ba0fd745809d9eba99b8bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; method returns the value of the string converted to lower case according to any locale-specific case mappings. &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; does not affect the value of the string itself. In most cases, this will produce the same result as &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;, but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.</source>
          <target state="translated">&lt;code&gt;toLocaleLowerCase()&lt;/code&gt; メソッドは、文字列の値は、任意のロケール固有のケースマッピングに従って小文字に変換戻ります。 &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; は、文字列自体の値には影響しません。ほとんどの場合、これは&lt;a href=&quot;tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt;と同じ結果を生成しますが、トルコ語などの一部のロケールでは、ケースマッピングがUnicodeのデフォルトのケースマッピングに従っていないため、結果が異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="9a5bc98b93806d7328dfd23d0e2f20fe79d9d58b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleString()&lt;/code&gt; method returns a string with a language sensitive representation of this date. The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">&lt;code&gt;toLocaleString()&lt;/code&gt; メソッドは、この日付の言語敏感な表現の文字列を返します。新しい &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数により、アプリケーションは、フォーマット規則を使用する言語を指定し、関数の動作をカスタマイズできます。 &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数を無視する古い実装では、使用されるロケールと返される文字列の形式は完全に実装に依存します。</target>
        </trans-unit>
        <trans-unit id="4c181a78790a95d522c7d634f8dcba90d04ce862" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleString()&lt;/code&gt; method returns a string with a language-sensitive representation of this number.</source>
          <target state="translated">&lt;code&gt;toLocaleString()&lt;/code&gt; メソッドは、この数の言語に依存する表現を含む文字列を返します。</target>
        </trans-unit>
        <trans-unit id="ce71ded9fb47fafdc0a5c1f2bfd5f0791c1ea986" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleTimeString()&lt;/code&gt; method returns a string with a language sensitive representation of the time portion of this date. The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">&lt;code&gt;toLocaleTimeString()&lt;/code&gt; メソッドは、この日付の時間部分の言語に敏感な表現の文字列を返します。新しい &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数により、アプリケーションは、フォーマット規則を使用する言語を指定し、関数の動作をカスタマイズできます。 &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数を無視する古い実装では、使用されるロケールと返される文字列の形式は完全に実装に依存します。</target>
        </trans-unit>
        <trans-unit id="4dddededdeaa266d4f6b4e36f1016e6d56f2759f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; method returns the calling string value converted to upper case, according to any locale-specific case mappings.</source>
          <target state="translated">&lt;code&gt;toLocaleUpperCase()&lt;/code&gt; メソッドを呼び出す文字列の値は、任意のロケール固有のケースマッピングに従って、大文字に変換戻ります。</target>
        </trans-unit>
        <trans-unit id="edab54eb7430a87e4e2c56f40c88fe4692fd8d48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; method returns the value of the string converted to upper case according to any locale-specific case mappings. &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; does not affect the value of the string itself. In most cases, this will produce the same result as &lt;a href=&quot;touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;, but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.</source>
          <target state="translated">&lt;code&gt;toLocaleUpperCase()&lt;/code&gt; メソッドは、文字列の値は、任意のロケール固有のケースマッピングに従って大文字に変換戻ります。 &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; は、文字列自体の値には影響しません。ほとんどの場合、これは&lt;a href=&quot;touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt;と同じ結果を生成しますが、トルコ語などの一部のロケールでは、大文字と小文字のマッピングがUnicodeのデフォルトの大文字と小文字のマッピングに従っていないため、異なる結果になる場合があります。</target>
        </trans-unit>
        <trans-unit id="0cb3154ea52bee934a4a9af4298d2277e26aa187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLowerCase()&lt;/code&gt; method returns the calling string value converted to lower case.</source>
          <target state="translated">&lt;code&gt;toLowerCase()&lt;/code&gt; メソッドを呼び出す文字列の値を小文字に変換し戻します。</target>
        </trans-unit>
        <trans-unit id="1d4fc82c4ee80a96e1bdeeea889258ac210eac67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLowerCase()&lt;/code&gt; method returns the value of the string converted to lower case. &lt;code&gt;toLowerCase()&lt;/code&gt; does not affect the value of the string &lt;code&gt;str&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;toLowerCase()&lt;/code&gt; メソッドは、文字列の値を小文字に変換し戻します。 &lt;code&gt;toLowerCase()&lt;/code&gt; は、文字列 &lt;code&gt;str&lt;/code&gt; 自体の値には影響しません。</target>
        </trans-unit>
        <trans-unit id="1dceab665270eb0d894532b40e2a43d79af258c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toPrecision()&lt;/code&gt; method returns a string representing the &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object to the specified precision.</source>
          <target state="translated">&lt;code&gt;toPrecision()&lt;/code&gt; メソッドの戻り表す文字列&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;指定された精度にオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="3593487d782bc9e25b68ad4e96adfb00fc0890a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method is automatically called when a date is to be represented as a text value, e.g. &lt;code&gt;console.log(new Date())&lt;/code&gt;, or when a date is used in a string concatenation, such as &lt;code&gt;var today&amp;nbsp;= 'Today is ' + new Date()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; メソッドが自動的に日付がテキスト値として表現されるときに呼び出され、例えば &lt;code&gt;console.log(new Date())&lt;/code&gt; 日付がのような、文字列連結で使用されている場合、または &lt;code&gt;var today&amp;nbsp;= 'Today is ' + new Date()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8cb91bb2a4fa972bac6025c69afe74adbc9c959" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;f&lt;/code&gt; are used.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; メソッドは、最初の引数を解析し、指定された基数（塩基）の文字列表現を返すことを試みます。アルファベットの文字は、例えば9よりも数字が大きいことを示す10以上の基数の場合、16進数（ベース16）のために、スルー &lt;code&gt;f&lt;/code&gt; 使用されています。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aef48c3db750fafbc9e23694d9a289d86ef5365f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the regular expression.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; メソッドは、正規表現を表す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="3a6e291ea9eb17a7ed3124b0e25d51227f3fbaef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; メソッドは、指定された文字列表現を返し&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="108226db1a2ff86483cf2870fd73d0b2b13efb5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; メソッドは、指定された文字列表現を返し&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6b4c6fa3d38cb17e4f6b59c566d1c25ba3830d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified object.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; メソッドは、指定されたオブジェクトを表す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="97243005725f08a5812c6aa4c5b25fe95d939f4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception (&quot;Function.prototype.toString called on incompatible object&quot;), if its &lt;code&gt;this&lt;/code&gt; value object is not a &lt;code&gt;Function&lt;/code&gt; object. It will also throw for &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; objects, for example.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; メソッドがスローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;その場合には、例外（「互換性のないオブジェクトで呼び出さFunction.prototype.toStringを」） &lt;code&gt;this&lt;/code&gt; 値オブジェクトではない &lt;code&gt;Function&lt;/code&gt; オブジェクト。たとえば、&lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;オブジェクトに対してもスローされます。</target>
        </trans-unit>
        <trans-unit id="50872c2d5a0223153996743472e6bfd2cc8e42f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toTimeString()&lt;/code&gt; method is especially useful because compliant engines implementing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt; may differ in the string obtained from &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines.</source>
          <target state="translated">形式は実装に依存するため、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262を&lt;/a&gt;実装する準拠エンジンは&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;から取得した文字列が異なる場合があるため、 &lt;code&gt;toTimeString()&lt;/code&gt; メソッドは特に役立ちます。単純な文字列スライスアプローチでは、複数のエンジンにわたって一貫した結果が得られない場合があります。</target>
        </trans-unit>
        <trans-unit id="9eedbbd929be16bb6a08efc9eee825f499e9beab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toTimeString()&lt;/code&gt; method returns the time portion of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object in human readable form in American English.</source>
          <target state="translated">&lt;code&gt;toTimeString()&lt;/code&gt; メソッドは、時間の部分を返し&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;アメリカ英語では、人間が読める形式でオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="5c831507f30af5e55f57b81c961372d23720a569" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toUTCString()&lt;/code&gt; method converts a date to a string, using the UTC time zone.</source>
          <target state="translated">&lt;code&gt;toUTCString()&lt;/code&gt; メソッドは、UTCタイムゾーンを使用して、文字列に日付を変換します。</target>
        </trans-unit>
        <trans-unit id="aae475104e93c5906b6da885303c159f6bd726b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toUpperCase()&lt;/code&gt; method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).</source>
          <target state="translated">&lt;code&gt;toUpperCase()&lt;/code&gt; メソッドは、呼び出し元の文字列値は、（それが1でない場合、値が文字列に変換されます）大文字に変換して返します。</target>
        </trans-unit>
        <trans-unit id="91e9cc5eaa6597510653d6ea202a3d6fc4562f87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toUpperCase()&lt;/code&gt; method returns the value of the string converted to uppercase. This method does not affect the value of the string itself since JavaScript strings are immutable.</source>
          <target state="translated">&lt;code&gt;toUpperCase()&lt;/code&gt; メソッドは、文字列の値を大文字に変換戻ります。JavaScript文字列は不変なので、このメソッドは文字列自体の値には影響しません。</target>
        </trans-unit>
        <trans-unit id="f3ac0a8da3e9e204f8f84192c5f916cf4feeaf6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim()&lt;/code&gt; method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).</source>
          <target state="translated">&lt;code&gt;trim()&lt;/code&gt; メソッドを削除した文字列の両端から空白。このコンテキストの空白は、すべての空白文字（スペース、タブ、ノーブレークスペースなど）とすべての行末文字（LF、CRなど）です。</target>
        </trans-unit>
        <trans-unit id="a77d84b3b80fca92ad2f2c44608b4f1ce7547f76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim()&lt;/code&gt; method returns the string stripped of whitespace from both ends. &lt;code&gt;trim()&lt;/code&gt; does not affect the value of the string itself.</source>
          <target state="translated">&lt;code&gt;trim()&lt;/code&gt; メソッドは、両端から空白を取り除いた文字列を返します。 &lt;code&gt;trim()&lt;/code&gt; は、文字列自体の値には影響しません。</target>
        </trans-unit>
        <trans-unit id="e8326ead88e4cd9c2599706946cb0d4f772330fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimEnd()&lt;/code&gt; / &lt;code&gt;trimRight()&lt;/code&gt; methods return the string stripped of whitespace from its right end. &lt;code&gt;trimEnd()&lt;/code&gt; or &lt;code&gt;trimRight()&lt;/code&gt; do not affect the value of the string itself.</source>
          <target state="translated">&lt;code&gt;trimEnd()&lt;/code&gt; / &lt;code&gt;trimRight()&lt;/code&gt; メソッドは、その右端から空白を取り除いた文字列を返します。 &lt;code&gt;trimEnd()&lt;/code&gt; または &lt;code&gt;trimRight()&lt;/code&gt; は、文字列自体の値には影響しません。</target>
        </trans-unit>
        <trans-unit id="d0c42df8ea8425f6289055b0685f49215590cd01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimEnd()&lt;/code&gt; method removes whitespace from the end of a string. &lt;code&gt;trimRight()&lt;/code&gt; is an alias of this method.</source>
          <target state="translated">&lt;code&gt;trimEnd()&lt;/code&gt; メソッドは、文字列の末尾の空白を除去します。 &lt;code&gt;trimRight()&lt;/code&gt; は、このメソッドのエイリアスです。</target>
        </trans-unit>
        <trans-unit id="84d6affa61054b04ac320da53491af0255f69a38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimStart()&lt;/code&gt; / &lt;code&gt;trimLeft()&lt;/code&gt; methods return the string stripped of whitespace from its left end. &lt;code&gt;trimLeft()&lt;/code&gt; or &lt;code&gt;trimStart()&lt;/code&gt; do not affect the value of the string itself.</source>
          <target state="translated">&lt;code&gt;trimStart()&lt;/code&gt; / &lt;code&gt;trimLeft()&lt;/code&gt; メソッドは、その左端から空白を取り除いた文字列を返します。 &lt;code&gt;trimLeft()&lt;/code&gt; または &lt;code&gt;trimStart()&lt;/code&gt; は、文字列自体の値には影響しません。</target>
        </trans-unit>
        <trans-unit id="a273caafe0e3f21a7d29b468ea165a0f70d1e4ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimStart()&lt;/code&gt; method removes whitespace from the beginning of a string. &lt;code&gt;trimLeft()&lt;/code&gt; is an alias of this method.</source>
          <target state="translated">&lt;code&gt;trimStart()&lt;/code&gt; メソッドを削除し、文字列の先頭から空白。 &lt;code&gt;trimLeft()&lt;/code&gt; はこのメソッドのエイリアスです。</target>
        </trans-unit>
        <trans-unit id="8e8dbdfa9a4dbb033289cdec8edd0c90b52dd4dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try...catch&lt;/code&gt; statement marks a block of statements to try, and specifies a response, should an exception be thrown.</source>
          <target state="translated">&lt;code&gt;try...catch&lt;/code&gt; 文のマークしようとする文のブロックを、その応答を指定するには、例外がスローされなければなりません。</target>
        </trans-unit>
        <trans-unit id="769e08ea4cd1c8b66874471821aed2443abfa2a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; statement consists of a &lt;code&gt;try&lt;/code&gt; block, which contains one or more statements. &lt;code&gt;{}&lt;/code&gt; must always be used, also for single statements. At least one &lt;code&gt;catch&lt;/code&gt; clause, or a &lt;code&gt;finally&lt;/code&gt; clause, must be present. This gives us three forms for the &lt;code&gt;try&lt;/code&gt; statement:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 文はで構成されて &lt;code&gt;try&lt;/code&gt; 1つ以上の文を含むブロック、。 &lt;code&gt;{}&lt;/code&gt; は常に単一のステートメントにも使用する必要があります。少なくとも1つの &lt;code&gt;catch&lt;/code&gt; 句、または &lt;code&gt;finally&lt;/code&gt; 句が存在している必要があります。これにより、 &lt;code&gt;try&lt;/code&gt; ステートメントの3つの形式が得られます。</target>
        </trans-unit>
        <trans-unit id="4bec62c61738f40c660dbbd07be4d2a3f373053d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; operator determines the type of a given object.</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 演算の演算子は、指定されたオブジェクトの種類を判定する。</target>
        </trans-unit>
        <trans-unit id="c55560a650a9b123b737ee66a03b700f6fe1cd62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; operator is followed by its operand:</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 演算の演算子は、そのオペランドが続いています。</target>
        </trans-unit>
        <trans-unit id="1a23f4a9cde5079c1f99d663faf09b3511568087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; operator returns a string indicating the type of the unevaluated operand.</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 演算の演算子は、未評価のオペランドのタイプを示す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="f610c77b8f248a18fe0dc12f1ff1e1a5a0afa79c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unicode&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;u&lt;/code&gt;&quot; flag is used with a regular expression. &lt;code&gt;unicode&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">&lt;code&gt;unicode&lt;/code&gt; プロパティは、「か否かを示す &lt;code&gt;u&lt;/code&gt; 」フラグが正規表現で使用されています。 &lt;code&gt;unicode&lt;/code&gt; は、個々の正規表現インスタンスの読み取り専用プロパティです。</target>
        </trans-unit>
        <trans-unit id="ebe281bf94ee2b4c66c24905c0dbe8e1af906423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unshift&lt;/code&gt; method inserts the given values to the beginning of an array-like object.</source>
          <target state="translated">&lt;code&gt;unshift&lt;/code&gt; 方法は、アレイ状物体の最初に与えられた値を挿入します。</target>
        </trans-unit>
        <trans-unit id="8cad25838721f6b6affa0e29e3484611dc0437b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; returns the primitive value of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object as a string data type. This value is equivalent to &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;String.prototype.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;valueOf()&lt;/code&gt; メソッドは、&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトのプリミティブ値を文字列データ型として返します。この値は、&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;String.prototype.toString()&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="a2b73ecde1dfc53d92441f91129b9e133efc59fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; メソッドは、プリミティブ値戻り&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;真夜中1970年1月1日UTCので、数データ型としてのミリ秒数をオブジェクト。</target>
        </trans-unit>
        <trans-unit id="da22d1c9f68730f5c70c46b9c54ce3ad651cea55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; メソッドは、プリミティブ値戻り&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="c14657e05277c3ae2629d97db6e277ae1e2ddf97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; メソッドは、プリミティブ値を返し&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="838b5313047bbb34666f3e61531649c3d13eb091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of the specified object.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; メソッドは、指定されたオブジェクトのプリミティブな値を返します。</target>
        </trans-unit>
        <trans-unit id="92f2a0b3c5433cf03e1339120e414cfefce5a576" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the wrapped primitive value of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; メソッドは、ラップされたプリミティブ値を返し&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="38dcfa335912989ce16f78d3ad1c5e19e069e1ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf&lt;/code&gt; method of &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; returns the primitive value of a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; object or literal &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; as a Boolean data type.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;valueOf&lt;/code&gt; メソッドは、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;オブジェクトまたはリテラル&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;のプリミティブ値をブールデータ型として返します。</target>
        </trans-unit>
        <trans-unit id="535be2559b3b7f2298770f875f760c417c3946ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf&lt;/code&gt; method of &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; returns the primitive value of a Symbol object as a Symbol data type.</source>
          <target state="translated">&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;valueOf&lt;/code&gt; メソッドは、Symbolオブジェクトのプリミティブ値をSymbolデータ型として返します。</target>
        </trans-unit>
        <trans-unit id="55fa1d436ded0f7743550d3d4a3a96be51625c12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;values()&lt;/code&gt; method returns a new &lt;code&gt;Array Iterator&lt;/code&gt; object that contains the values for each index in the array.</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; メソッドの戻り新しい &lt;code&gt;Array Iterator&lt;/code&gt; アレイ内の各インデックスの値を含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6d7e5202574c3bb684ad4cc90ea7079a312c949a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;var&lt;/code&gt; declares a variable, optionally initializing it to a value.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 、必要に応じて値に初期化し、変数を宣言します。</target>
        </trans-unit>
        <trans-unit id="897af01fbc7a1aeaf9f2be520c8cb53a174fd03e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; evaluates the given &lt;code&gt;&lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; and then returns &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 評価する与えられた &lt;code&gt;&lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; し、その後復帰し&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="82acc2ba21ba03475bc6c3532a1ee15ad0f92f7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator discards an expression's return value.</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 演算子は式の戻り値を破棄します。</target>
        </trans-unit>
        <trans-unit id="e5db750a3354d5b639f19156e00ff8b9a3dc4cbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator is often used merely to obtain the &lt;code&gt;undefined&lt;/code&gt; primitive value, usually using &quot;&lt;code&gt;void(0)&lt;/code&gt;&quot; (which is equivalent to &quot;&lt;code&gt;void 0&lt;/code&gt;&quot;). In these cases, the global variable &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; can be used instead (assuming it has not been assigned to a non-default value).</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; オペレータはしばしば得るために単に使用されている &lt;code&gt;undefined&lt;/code&gt; 通常使用して、プリミティブ値を「 &lt;code&gt;void(0)&lt;/code&gt; 」（「に相当する &lt;code&gt;void 0&lt;/code&gt; 」）。このような場合、代わりにグローバル変数&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;を使用できます（デフォルト以外の値に割り当てられていない場合）。</target>
        </trans-unit>
        <trans-unit id="b3d13e2a5ad5de3f04bc4a1d15b6fb13b7da1253" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt; methods are modeled on Linux futexes (&quot;fast user-space mutex&quot;) and provide ways for waiting until a certain condition becomes true and are typically used as blocking constructs.</source>
          <target state="translated">&lt;code&gt;wait()&lt;/code&gt; および &lt;code&gt;notify()&lt;/code&gt; メソッドは、Linux futexes（「ファストユーザ空間のミューテックス」）をモデルにして、特定の条件が真になるまで待っていると、通常の構造をブロックとして使用されているための方法を提供しています。</target>
        </trans-unit>
        <trans-unit id="c40665399093e4817a0248d3b80c6b99f91366d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;x = 2&lt;/code&gt; is limited in scope to the block in which it was defined.</source>
          <target state="translated">&lt;code&gt;x = 2&lt;/code&gt; 、それが定義されたブロックの範囲に制限されます。</target>
        </trans-unit>
        <trans-unit id="ceb06a046a90f1a77d67b9b150bf36b1e7029262" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield*&lt;/code&gt; expression iterates over the operand and yields each value returned by it.</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 表現のオペランドを反復処理し、それによって返された各値が得られます。</target>
        </trans-unit>
        <trans-unit id="ecfbc752dbf10bd278aee60426270db4ee3e7593" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield*&lt;/code&gt; is used to delegate to another &lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator&lt;/code&gt;&lt;/a&gt; or iterable object.</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 別に委譲するために使用される&lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;generator&lt;/code&gt; &lt;/a&gt;または反復可能なオブジェクト。</target>
        </trans-unit>
        <trans-unit id="26fb3b11fb166e5aa3634e574db12005808db70d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword actually returns an &lt;code&gt;IteratorResult&lt;/code&gt; object with two properties, &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; property is the result of evaluating the &lt;code&gt;yield&lt;/code&gt; expression, and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, indicating that the generator function has not fully completed.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; キーワードは、実際に返す &lt;code&gt;IteratorResult&lt;/code&gt; の 2つのプロパティを持つオブジェクト &lt;code&gt;value&lt;/code&gt; と &lt;code&gt;done&lt;/code&gt; 。 &lt;code&gt;value&lt;/code&gt; プロパティは、評価の結果である &lt;code&gt;yield&lt;/code&gt; 発現を、そして &lt;code&gt;done&lt;/code&gt; である &lt;code&gt;false&lt;/code&gt; ジェネレータ機能が完全に完了していないことを示します。</target>
        </trans-unit>
        <trans-unit id="9df48637246cf3fa0fd6096242e9cd90e47acc90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword is used to pause and resume a generator function (&lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;function*&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;legacy generator function&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; キーワードジェネレータ機能（一時停止および再開するために使用される&lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;function*&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;レガシージェネレータ機能&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9ae86ee006331319767ea8ea1e7b47a6d042f723" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword pauses generator function execution and the value of the expression following the &lt;code&gt;yield&lt;/code&gt; keyword is returned to the generator's caller. It can be thought of as a generator-based version of the &lt;code&gt;return&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; キーワードポーズジェネレータ関数実行し、次の式の値 &lt;code&gt;yield&lt;/code&gt; ジェネレータの呼び出し元に返されたキーワード。これは、 &lt;code&gt;return&lt;/code&gt; キーワードのジェネレーターベースのバージョンと考えることができます。</target>
        </trans-unit>
        <trans-unit id="065463d049b36377da14331481f7dd33b125cfc1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;n&lt;/em&gt;th string found by a parenthesized capture group, provided the first argument to &lt;code&gt;replace()&lt;/code&gt; was a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. (Corresponds to &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, etc. above.) For example, if &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt;, was given, &lt;code&gt;p1&lt;/code&gt; is the match for &lt;code&gt;\a+&lt;/code&gt;, and &lt;code&gt;p2&lt;/code&gt; for &lt;code&gt;\b+&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;N&lt;/em&gt;番目の文字列は、括弧キャプチャグループによって発見する最初の引数提供 &lt;code&gt;replace()&lt;/code&gt; あった&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト。（上記の &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; などに対応します。）たとえば、 &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt; が指定された場合、 &lt;code&gt;p1&lt;/code&gt; は &lt;code&gt;\a+&lt;/code&gt; に、 &lt;code&gt;p2&lt;/code&gt; は &lt;code&gt;\b+&lt;/code&gt; 一致します。</target>
        </trans-unit>
        <trans-unit id="afc59143cc18af9cdc27570c778510a67d50d1e6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Proxy&lt;/strong&gt; object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).</source>
          <target state="translated">&lt;strong&gt;プロキシ&lt;/strong&gt;オブジェクトは、基本的な操作（例えば不動産検索、割り当て、列挙、関数呼び出しなど）のカスタム動作を定義するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c5ef3d98d86d821ee86cd80487256c6f9f09f04a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;array comprehension&lt;/strong&gt; syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!</source>
          <target state="translated">&lt;strong&gt;配列内包の&lt;/strong&gt;構文を使用すると、すぐに既存のいずれかに基づいて新しい配列を組み立てることが許さJavaScript式でした。ただし、標準およびFirefoxの実装からは削除されています。使用しないでください。</target>
        </trans-unit>
        <trans-unit id="d8f59a014ecb1a14707700e8eac92c0e0d267805" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;bind()&lt;/strong&gt; function creates a new &lt;strong&gt;bound function&lt;/strong&gt;&lt;strong&gt;(BF)&lt;/strong&gt;. A &lt;strong&gt;BF&lt;/strong&gt; is an &lt;strong&gt;exotic function object&lt;/strong&gt; (a term from &lt;strong&gt;ECMAScript 2015&lt;/strong&gt;) that wraps the original function object. Calling a &lt;strong&gt;BF&lt;/strong&gt; generally results in the execution of its &lt;strong&gt;wrapped function&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;バインド（）&lt;/strong&gt;関数は、新しい作成&lt;strong&gt;バウンド機能&lt;/strong&gt;&lt;strong&gt;（BF）を&lt;/strong&gt;。&lt;strong&gt;BFが&lt;/strong&gt;ある&lt;strong&gt;エキゾチック関数オブジェクト&lt;/strong&gt;（の用語&lt;strong&gt;のECMAScript 2015&lt;/strong&gt;元の関数オブジェクトをラップしています）。&lt;strong&gt;BFを&lt;/strong&gt;呼び出すと、通常、&lt;strong&gt;ラップされた関数が&lt;/strong&gt;実行さ&lt;strong&gt;れます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1d733e1153af7fad236cbcb528b0288e3e22d5e4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;break statement&lt;/strong&gt; terminates the current loop, &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt; statement and transfers program control to the statement following the terminated statement.</source>
          <target state="translated">&lt;strong&gt;break文は&lt;/strong&gt;、現在のループ、終了&lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;label&quot;&gt; &lt;code&gt;label&lt;/code&gt; &lt;/a&gt;文を終了し、次のステートメントにプログラム制御を移します。</target>
        </trans-unit>
        <trans-unit id="94714384460d5950f3307e7c533970bce49359f6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;catch()&lt;/strong&gt; method returns a &lt;code&gt;Promise&lt;/code&gt; and deals with rejected cases only. It behaves the same as calling &lt;a href=&quot;then&quot;&gt;&lt;code&gt;Promise.prototype.then(undefined, onRejected)&lt;/code&gt;&lt;/a&gt; (in fact, calling &lt;code&gt;obj.catch(onRejected)&lt;/code&gt; internally calls &lt;code&gt;obj.then(undefined, onRejected)&lt;/code&gt;). This means, that you have to provide &lt;code&gt;onRejected&lt;/code&gt; function even if you want to fallback to &lt;code&gt;undefined&lt;/code&gt; result value - for example &lt;code&gt;obj.catch(() =&amp;gt; {})&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;キャッチ（）&lt;/strong&gt;メソッドが返す &lt;code&gt;Promise&lt;/code&gt; だけ拒否例でやお得な情報を。これは、&lt;a href=&quot;then&quot;&gt; &lt;code&gt;Promise.prototype.then(undefined, onRejected)&lt;/code&gt; &lt;/a&gt;を呼び出すのと同じように動作します（実際、 &lt;code&gt;obj.catch(onRejected)&lt;/code&gt; を呼び出すと、内部で &lt;code&gt;obj.then(undefined, onRejected)&lt;/code&gt; ）。つまり、たとえば &lt;code&gt;obj.catch(() =&amp;gt; {})&lt;/code&gt; ように、 &lt;code&gt;undefined&lt;/code&gt; 結果値にフォールバックしたい場合でも、 &lt;code&gt;onRejected&lt;/code&gt; 関数を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="99ace5b02df9e8b779d43f17fe783c684b201a52" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;class declaration&lt;/strong&gt; creates a new class with a given name using prototype-based inheritance.</source>
          <target state="translated">&lt;strong&gt;クラス宣言は&lt;/strong&gt;プロトタイプベースの継承を使用して指定された名前の新しいクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="8fe53faa937fc7cde1f3dbdb6693fd9e43484178" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;class expression&lt;/strong&gt; is one way to define a class in ECMAScript 2015. Similar to &lt;a href=&quot;function&quot;&gt;function expressions&lt;/a&gt;, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes use prototype-based inheritance.</source>
          <target state="translated">&lt;strong&gt;クラス式は&lt;/strong&gt; 1つのにECMAScriptの同様の2015年でクラスを定義する方法である&lt;a href=&quot;function&quot;&gt;関数式&lt;/a&gt;、クラス式は名前を付けることができますまたは名前。名前が付けられている場合、クラスの名前はクラス本体に対してのみローカルです。JavaScriptクラスはプロトタイプベースの継承を使用します。</target>
        </trans-unit>
        <trans-unit id="73225444d7e8533026618e451637c545dd6c871c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;conditional (ternary) operator&lt;/strong&gt; is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">&lt;strong&gt;条件（三）演算子は、&lt;/strong&gt; 3つのオペランドをとるのみJavaScriptの演算子です。この演算子は、&lt;a href=&quot;../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;ステートメントのショートカットとしてよく使用されます。</target>
        </trans-unit>
        <trans-unit id="a9330c73465ea3e6ff22f7d537d670942af5fe2a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;continue statement&lt;/strong&gt; terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.</source>
          <target state="translated">&lt;strong&gt;continue文は&lt;/strong&gt;、現在またはラベル付きループの現在の反復でのステートメントの実行を終了し、次の反復でループの実行を継続します。</target>
        </trans-unit>
        <trans-unit id="37a8ee20020657a18f3bca33142a67351ee49ca6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;debugger statement&lt;/strong&gt; invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.</source>
          <target state="translated">&lt;strong&gt;デバッガの文は&lt;/strong&gt;、このようなブレークポイントを設定すると、使用可能な任意のデバッグ機能を呼び出します。デバッグ機能が利用できない場合、このステートメントは効果がありません。</target>
        </trans-unit>
        <trans-unit id="f1f8b1715d765f723a3d6b24a097ae8fc219b0e8" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default keyword &lt;/strong&gt;can be used in two situations in JavaScript: within a &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt; statement, or with an &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">&lt;strong&gt;デフォルトのキーワード&lt;/strong&gt;は、JavaScriptの2つの状況で使用できます。1つは&lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;ステートメント内、もう1つは&lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;ステートメントです。</target>
        </trans-unit>
        <trans-unit id="27335960563bef2cdec1223d71b74b09bdcf3633" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;destructuring assignment&lt;/strong&gt; syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</source>
          <target state="translated">構造化&lt;strong&gt;代入&lt;/strong&gt;構文は、配列からの値、またはオブジェクトからのプロパティを個別の変数にアンパックすることを可能にするJavaScript式です。</target>
        </trans-unit>
        <trans-unit id="db24014295ccb881f02ef10b67d2e5dcf0fe8bce" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;for statement&lt;/strong&gt; creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a &lt;a href=&quot;block&quot;&gt;block statement&lt;/a&gt;) to be executed in the loop.</source>
          <target state="translated">&lt;strong&gt;ステートメントは、&lt;/strong&gt;ステートメント（通常、続いて3つのオプション式、括弧で囲まれ、セミコロンで区切らから成るループ、作成&lt;a href=&quot;block&quot;&gt;ブロック文&lt;/a&gt;ループで実行されるが）。</target>
        </trans-unit>
        <trans-unit id="dbaba40e57db93ab21dee53da06becedbf4d1aa4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;function declaration&lt;/strong&gt; (function statement) defines a function with the specified parameters.</source>
          <target state="translated">&lt;strong&gt;関数宣言&lt;/strong&gt;（関数文）が指定されたパラメータを有する関数を定義します。</target>
        </trans-unit>
        <trans-unit id="5246b915eb7c85d0437344cef9ea86765b90ccb2" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;if statement&lt;/strong&gt; executes a statement if a specified condition is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;. If the condition is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;, another statement can be executed.</source>
          <target state="translated">&lt;strong&gt;if文は、&lt;/strong&gt;指定した条件がある場合のステートメントを実行し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;。条件が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsyの&lt;/a&gt;場合、別のステートメントを実行できます。</target>
        </trans-unit>
        <trans-unit id="e17438ef55a4e09a7dbcf723659c6679b84bf06f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;iterable&lt;/strong&gt; protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a &lt;a href=&quot;statements/for...of&quot;&gt;&lt;code&gt;for..of&lt;/code&gt;&lt;/a&gt; construct. Some built-in types are &lt;a href=&quot;#Built-in_iterables&quot;&gt;built-in iterables&lt;/a&gt; with a default iteration behavior, such as &lt;a href=&quot;global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, while other types (such as &lt;a href=&quot;global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;) are not.</source>
          <target state="translated">&lt;strong&gt;反復可能な&lt;/strong&gt;プロトコルにはJavaScriptを有効にし、このような値がでオーバーループしているものとして、その繰り返しの動作を定義したり、カスタマイズすることができますオブジェクト&lt;a href=&quot;statements/for...of&quot;&gt; &lt;code&gt;for..of&lt;/code&gt; &lt;/a&gt;構築物。一部の組み込み型は、&lt;a href=&quot;global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;などのデフォルトの反復動作を備えた&lt;a href=&quot;#Built-in_iterables&quot;&gt;組み込みの反復可能&lt;/a&gt;ですが、他の型（&lt;a href=&quot;global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;など）はそうではありません。</target>
        </trans-unit>
        <trans-unit id="256bf006dce59aa8632fcb126bf4510bc31e4563" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;iterator&lt;/strong&gt; protocol defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated.</source>
          <target state="translated">&lt;strong&gt;反復子の&lt;/strong&gt;全ての値が生成されたときにプロトコルが（有限または無限のいずれか）の値のシーケンスを生成するための標準的な方法、および潜在的に戻り値を定義します。</target>
        </trans-unit>
        <trans-unit id="1dc9001af6987d19bbd223d74b3ee5b04eac7a1e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;labeled statement&lt;/strong&gt; can be used with &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; statements. It is prefixing a statement with an identifier which you can refer to.</source>
          <target state="translated">&lt;strong&gt;ラベル付き文は、&lt;/strong&gt;一緒に使用することができ&lt;a href=&quot;break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;continue&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt;ステートメントを。ステートメントの前に、参照できる識別子を付けます。</target>
        </trans-unit>
        <trans-unit id="a5afe6c326deb45bb1c28c14ba0b8f1e9c6e7f08" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;reducer&lt;/strong&gt; function is fed four parameters:</source>
          <target state="translated">&lt;strong&gt;減速&lt;/strong&gt;機能は4つのパラメータが供給されます。</target>
        </trans-unit>
        <trans-unit id="4a91b7f158fd8ddfc727835a7d5c6d3fe0e61fa6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;rest parameter&lt;/strong&gt; syntax allows us to represent an indefinite number of arguments as an array.</source>
          <target state="translated">&lt;strong&gt;残りのパラメータの&lt;/strong&gt;構文は、私たちは配列として引数の不特定多数を表現することができます。</target>
        </trans-unit>
        <trans-unit id="38cf1e83c03988b5e1319e2f037c50f8bc3c82c5" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;super&lt;/strong&gt; keyword is used to access and call functions on an object's parent.</source>
          <target state="translated">&lt;strong&gt;スーパー&lt;/strong&gt;キーワードは、オブジェクトの親にアクセスし、コール機能に使用されています。</target>
        </trans-unit>
        <trans-unit id="8d9b434bf4770e269f3ed85648191f4b9db54c86" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;value&lt;/strong&gt; of the &lt;strong&gt;first element&lt;/strong&gt; in the array that satisfies the provided testing function; otherwise, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;strong&gt;値&lt;/strong&gt;の&lt;strong&gt;最初の要素&lt;/strong&gt;のアレイを満たす提供機能テストで、それ以外の場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="02842c94116a9c6809ef6eee7ec3c23722a1feab" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;while statement&lt;/strong&gt; creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.</source>
          <target state="translated">&lt;strong&gt;while文は、&lt;/strong&gt;長い間、真の試験条件評価されるよう指定された文を実行するループを作成します。条件は、ステートメントを実行する前に評価されます。</target>
        </trans-unit>
        <trans-unit id="fd60c91aefb449ecfe0c5d63d04422740e88d367" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;with statement&lt;/strong&gt; extends the scope chain for a statement.</source>
          <target state="translated">&lt;strong&gt;声明では、&lt;/strong&gt;文のスコープチェーンを拡張します。</target>
        </trans-unit>
        <trans-unit id="bd4b7d3e8a9687f79e6ec51636e21057aed22d25" translate="yes" xml:space="preserve">
          <source>The Array object being traversed</source>
          <target state="translated">トラバースされている配列オブジェクト</target>
        </trans-unit>
        <trans-unit id="124954ca57725d5f3aa87356bc8cd739a5f724f9" translate="yes" xml:space="preserve">
          <source>The Atomic operations are installed on an &lt;code&gt;Atomics&lt;/code&gt; module. Unlike the other global objects, &lt;code&gt;Atomics&lt;/code&gt; is not a constructor. You cannot use it with a &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; or invoke the &lt;code&gt;Atomics&lt;/code&gt; object as a function. All properties and methods of &lt;code&gt;Atomics&lt;/code&gt; are static (as is the case with the &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object, for example).</source>
          <target state="translated">Atomic操作は、 &lt;code&gt;Atomics&lt;/code&gt; モジュールにインストールされます。他のグローバルオブジェクトとは異なり、 &lt;code&gt;Atomics&lt;/code&gt; はコンストラクタではありません。これを&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 演算子で&lt;/a&gt;使用したり、 &lt;code&gt;Atomics&lt;/code&gt; オブジェクトを関数として呼び出したりすることはできません。 &lt;code&gt;Atomics&lt;/code&gt; のすべてのプロパティとメソッドは静的です（たとえば、&lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;オブジェクトの場合と同様）。</target>
        </trans-unit>
        <trans-unit id="c9360b8cf41eb0b67799088a47ba963c3ed2252b" translate="yes" xml:space="preserve">
          <source>The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in &lt;code&gt;locale&lt;/code&gt;.</source>
          <target state="translated">実際に使用されるロケールのBCP 47言語タグ。このロケールにつながる入力BCP 47言語タグでUnicode拡張値が要求された場合、要求され、このロケールでサポートされているキーと値のペアがlocaleに含まれ &lt;code&gt;locale&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf28f8279826d3b43c23b8e24d4d008e353709bf" translate="yes" xml:space="preserve">
          <source>The Debugger in the Firefox Developer Tools</source>
          <target state="translated">Firefox開発者ツールのデバッガ</target>
        </trans-unit>
        <trans-unit id="999324758919789edc66930d918929098458f194" translate="yes" xml:space="preserve">
          <source>The ECMA-402 (ECMAScript Intl API) standard specifies standard objects and methods that enable language sensitive date and time formatting (available in Chrome 24+, Firefox 29+, IE11+, Safari10+).</source>
          <target state="translated">ECMA-402 (ECMAScript Intl API)標準は、言語に応じた日付と時刻の書式設定を可能にする標準オブジェクトとメソッドを規定しています (Chrome 24+,Firefox 29+,IE11+,Safari10+で利用可能)。</target>
        </trans-unit>
        <trans-unit id="8e137fb633ed9a984aae87f772a0fc0ed4a1c417" translate="yes" xml:space="preserve">
          <source>The ECMAScript 5 specification of the function &lt;code&gt;parseInt&lt;/code&gt; no longer allows implementations to treat Strings beginning with a &lt;code&gt;0&lt;/code&gt; character as octal values. ECMAScript 5 states:</source>
          <target state="translated">関数 &lt;code&gt;parseInt&lt;/code&gt; のECMAScript 5仕様では、実装が &lt;code&gt;0&lt;/code&gt; 文字で始まる文字列を8進値として扱うことができなくなりました。ECMAScript 5は次のように述べています：</target>
        </trans-unit>
        <trans-unit id="b3216945e8685ea4af8a3c93dd0029a0b22151b1" translate="yes" xml:space="preserve">
          <source>The ECMAScript specification mentions&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-rules-of-automatic-semicolon-insertion&quot;&gt; three rules of semicolon insertion&lt;/a&gt;.</source>
          <target state="translated">ECMAScript仕様では&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-rules-of-automatic-semicolon-insertion&quot;&gt;、セミコロンの挿入に関する3つの規則が&lt;/a&gt;言及されています。</target>
        </trans-unit>
        <trans-unit id="8208825fde42cabcd8bbb76cd476940ce51a4654" translate="yes" xml:space="preserve">
          <source>The ECMAScript specification states: If the String does not conform to the standard format the function may fall back to any implementation&amp;ndash;specific heuristics or implementation&amp;ndash;specific parsing algorithm. Unrecognizable strings or dates containing illegal element values in ISO formatted strings shall cause &lt;code&gt;Date.parse()&lt;/code&gt; to return &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ECMAScript仕様には、次のように記載されています。文字列が標準形式に準拠していない場合、関数は実装固有のヒューリスティックまたは実装固有の解析アルゴリズムにフォールバックする可能性があります。認識できない文字列またはISO形式の文字列に無効な要素値を含む日付があると、 &lt;code&gt;Date.parse()&lt;/code&gt; は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="5ab764a8c99b12a3a98198c6866656e7cedcca17" translate="yes" xml:space="preserve">
          <source>The Iterator protocol</source>
          <target state="translated">イテレータプロトコル</target>
        </trans-unit>
        <trans-unit id="6becbd4e850d3a8a0a7babdb926cca557de3dc9c" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Array&lt;/code&gt; object is a global object that is used in the construction of arrays; which are high-level, list-like objects.</source>
          <target state="translated">JavaScript &lt;code&gt;Array&lt;/code&gt; オブジェクトは、配列の構築に使用されるグローバルオブジェクトです。これらは、高レベルのリストのようなオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="d93195924299629cef4916635b4b1e0990c4dbde" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Date&lt;/code&gt; object provides uniform behavior across platforms. The time value can be passed between systems to create a date that represents the same moment in time.</source>
          <target state="translated">JavaScriptの &lt;code&gt;Date&lt;/code&gt; オブジェクトは、プラットフォーム間で統一された動作を提供します。時間値をシステム間で渡して、同じ時間を表す日付を作成できます。</target>
        </trans-unit>
        <trans-unit id="bafdbb63aeaa1f07ea2da5fed805a6b7854d004c" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Date&lt;/code&gt; object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where JavaScript is executed.</source>
          <target state="translated">JavaScriptの &lt;code&gt;Date&lt;/code&gt; オブジェクトは、多くのUTC（ユニバーサル）メソッドとローカル時間メソッドをサポートしています。グリニッジ標準時（GMT）としても知られるUTCは、世界標準時によって設定された時刻を指します。現地時間とは、JavaScriptが実行されるコンピューターに認識されている時間です。</target>
        </trans-unit>
        <trans-unit id="156d00682b0b8947f00a38049180c99849ecf542" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Math.log()&lt;/code&gt;function is equivalent to &lt;em&gt;ln(x)&lt;/em&gt; in mathematics.</source>
          <target state="translated">JavaScript &lt;code&gt;Math.log()&lt;/code&gt; 関数は、数学の&lt;em&gt;ln（x）&lt;/em&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="dde583114572ab3af5b6024979e219b534fa142d" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;delete&lt;/code&gt; removes a property from an object; if no more references to the same property are held, it is eventually released automatically.</source>
          <target state="translated">JavaScriptの &lt;code&gt;delete&lt;/code&gt; により、オブジェクトからプロパティが削除されます。同じプロパティへの参照が保持されなくなると、最終的には自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="feacf6d164087c84342adcbacb255f2b0ba72579" translate="yes" xml:space="preserve">
          <source>The JavaScript date is based on a time value that is milliseconds since midnight January 1, 1970, UTC. A day holds 86,400,000 milliseconds. The JavaScript &lt;code&gt;Date&lt;/code&gt; object range is -100,000,000 days to 100,000,000 days relative to January 1, 1970 UTC.</source>
          <target state="translated">JavaScriptの日付は、UTC 1970年1月1日の午前0時からのミリ秒単位の時間値に基づいています。1日は86,400,000ミリ秒です。JavaScriptの &lt;code&gt;Date&lt;/code&gt; オブジェクトの範囲は、1970年1月1日のUTCに対して-100,000,000日から100,000,000日です。</target>
        </trans-unit>
        <trans-unit id="b9de9c5fa9fea058719adf889a9d0bba2b33c317" translate="yes" xml:space="preserve">
          <source>The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Venkman&quot;&gt;Venkman&lt;/a&gt;.</source>
          <target state="translated">JavaScriptデバッガーは、このメソッドで提供されるものと同様の機能、およびその他のデバッグオプションを備えています。デバッガーについては、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Venkman&quot;&gt;Venkmanを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0d28aae23ee954321752888e11c516cf9eed364d" translate="yes" xml:space="preserve">
          <source>The JavaScript language is intended to be used within some larger environment, be it a browser, server-side scripts, or similar. For the most part, this reference attempts to be environment-agnostic and does not target a web browser environment.</source>
          <target state="translated">JavaScript言語は、ブラウザ、サーバーサイドスクリプト、または類似のものなど、より大きな環境での使用を意図しています。ほとんどの場合、このリファレンスは環境にとらわれないように試みており、ウェブブラウザ環境を対象としていません。</target>
        </trans-unit>
        <trans-unit id="69baf2e55fa7ceef3be5f6200851de4d7761bde2" translate="yes" xml:space="preserve">
          <source>The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title &quot;JavaScript reference&quot;). If you're learning JavaScript, or need help understanding some of its capabilities or features, check out the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScript guide&lt;/a&gt;.</source>
          <target state="translated">JavaScriptリファレンスは、JavaScript言語に関する事実のリポジトリとして機能します。ここでは、言語全体について詳しく説明します。JavaScriptコードを記述するとき、これらのページを頻繁に参照します（したがって、「JavaScriptリファレンス」というタイトルです）。JavaScriptを学習している場合、またはJavaScriptの機能の一部を理解するのに支援が必要な場合は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScriptガイドを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="d4f84834e7660ed505621093e0e5d6c89de8cc1e" translate="yes" xml:space="preserve">
          <source>The Promise returned by &lt;code&gt;catch()&lt;/code&gt; is rejected if &lt;code&gt;onRejected&lt;/code&gt; throws an error or returns a Promise which is itself rejected; otherwise, it is resolved.</source>
          <target state="translated">&lt;code&gt;onRejected&lt;/code&gt; がエラーをスローした場合、またはそれ自体が拒否されたPromiseを返した場合、 &lt;code&gt;catch()&lt;/code&gt; によって返されたPromiseは拒否されます。それ以外の場合は解決されます。</target>
        </trans-unit>
        <trans-unit id="95b5af8e1532fe52df042769f7bec798553a35f2" translate="yes" xml:space="preserve">
          <source>The Set object that's being traversed.</source>
          <target state="translated">トラバースされている Set オブジェクト。</target>
        </trans-unit>
        <trans-unit id="49e044a65fd508c1e1bf68ae413fba5886e5cb81" translate="yes" xml:space="preserve">
          <source>The UTF-16 code unit matches the Unicode code point for code points that can be represented in a single UTF-16 code unit. If the Unicode code point cannot be represented in a single UTF-16 code unit (because its value is greater than 0x10000) then the code unit returned will be the first part of a surrogate pair for the code point. If you want the entire code point value, use &lt;code&gt;codePointAt&lt;/code&gt;().</source>
          <target state="translated">UTF-16コード単位は、単一のUTF-16コード単位で表すことができるコードポイントのUnicodeコードポイントと一致します。Unicodeコードポイントを単一のUTF-16コード単位で表すことができない場合（その値が0x10000より大きいため）、返されるコード単位は、コードポイントのサロゲートペアの最初の部分になります。コードポイント値全体が必要な場合は、 &lt;code&gt;codePointAt&lt;/code&gt; （）を使用します。</target>
        </trans-unit>
        <trans-unit id="614f666e60229c8931cfcf35c7c7b7b8405c66c9" translate="yes" xml:space="preserve">
          <source>The above alert shows &lt;code&gt;button&lt;/code&gt;. Note however that only the outer code has its &lt;code&gt;this&lt;/code&gt; set this way:</source>
          <target state="translated">上記のアラートは &lt;code&gt;button&lt;/code&gt; 示しています。唯一の外側のコードはその持っていることに注意してください &lt;code&gt;this&lt;/code&gt; セットをこのように：</target>
        </trans-unit>
        <trans-unit id="48db29ca2070a265910895b83347db970012efd5" translate="yes" xml:space="preserve">
          <source>The above code creates three new symbols. Note that &lt;code&gt;Symbol(&quot;foo&quot;)&lt;/code&gt; does not coerce the string &quot;foo&quot; into a symbol. It creates a new symbol each time:</source>
          <target state="translated">上記のコードは、3つの新しいシンボルを作成します。 &lt;code&gt;Symbol(&quot;foo&quot;)&lt;/code&gt; は文字列 &quot;foo&quot;をシンボルに強制変換しないことに注意してください。毎回新しいシンボルを作成します：</target>
        </trans-unit>
        <trans-unit id="ebc968b0e572c0c6ecd0d9dde19f65705aeb7e07" translate="yes" xml:space="preserve">
          <source>The above example uses parsing of a non&amp;ndash;standard string value that may not be correctly parsed in non&amp;ndash;Mozilla browsers.</source>
          <target state="translated">上記の例では、非Mozillaブラウザーでは正しく解析されない可能性がある非標準の文字列値の解析を使用しています。</target>
        </trans-unit>
        <trans-unit id="779a22b41e4e4f93cde5fd366230052879eb4ac2" translate="yes" xml:space="preserve">
          <source>The above syntax using the &lt;code&gt;Symbol()&lt;/code&gt; function will not create a global symbol that is available in your whole codebase. To create symbols available across files and even across realms (each of which has its own global scope), use the methods &lt;a href=&quot;symbol/for&quot;&gt;&lt;code&gt;Symbol.for()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;symbol/keyfor&quot;&gt;&lt;code&gt;Symbol.keyFor()&lt;/code&gt;&lt;/a&gt; to set and retrieve symbols from the global symbol registry.</source>
          <target state="translated">&lt;code&gt;Symbol()&lt;/code&gt; 関数を使用した上記の構文では、コードベース全体で使用できるグローバルシンボルは作成されません。ファイル間およびレルム間（それぞれに独自のグローバルスコープがある）でも使用可能なシンボルを作成するには、&lt;a href=&quot;symbol/for&quot;&gt; &lt;code&gt;Symbol.for()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;symbol/keyfor&quot;&gt; &lt;code&gt;Symbol.keyFor()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、グローバルシンボルレジストリからシンボルを設定および取得します。</target>
        </trans-unit>
        <trans-unit id="76c147cd9cdc395d76c4a7f61bcaf2a60decddaa" translate="yes" xml:space="preserve">
          <source>The absolute value of the given number.</source>
          <target state="translated">与えられた数の絶対値。</target>
        </trans-unit>
        <trans-unit id="6eade57e467c41464ec5d8b8513d318ab94fe744" translate="yes" xml:space="preserve">
          <source>The accumulator accumulates the callback's return values; it is the accumulated value previously returned in the last invocation of the callback, or &lt;code&gt;initialValue&lt;/code&gt;, if supplied (see below).</source>
          <target state="translated">アキュムレータは、コールバックの戻り値を蓄積します。これは、コールバックの最後の呼び出しで以前に返された累積値、または提供されている場合は、 &lt;code&gt;initialValue&lt;/code&gt; です（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="c0cb05ceed2902ab0776f2e0d4d042358e7f0a6a" translate="yes" xml:space="preserve">
          <source>The addition assignment operator &lt;strong&gt;adds&lt;/strong&gt; the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the &lt;a href=&quot;arithmetic_operators#Addition&quot;&gt;addition operator&lt;/a&gt; for more details.</source>
          <target state="translated">加算代入演算子&lt;strong&gt;は&lt;/strong&gt;、右側のオペランドの値を変数に&lt;strong&gt;加算&lt;/strong&gt;し、結果を変数に代入します。2つのオペランドのタイプによって、加算代入演算子の動作が決まります。追加または連結が可能です。詳細については、&lt;a href=&quot;arithmetic_operators#Addition&quot;&gt;加算演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4a9e70d115ebee62e12d028c95344707ba539dff" translate="yes" xml:space="preserve">
          <source>The addition operator produces the sum of numeric operands or string concatenation.</source>
          <target state="translated">加算演算子は、数値演算子または文字列の連結の合計を生成します。</target>
        </trans-unit>
        <trans-unit id="45fd46de73e09649bf34e6b28fed934df6b6ff74" translate="yes" xml:space="preserve">
          <source>The allowed range for these methods is usually between 0 and 20 (or 21). However, the ECMAScript specification allows to extend this range.</source>
          <target state="translated">これらのメソッドの許容範囲は、通常 0 から 20 (または 21)の間です。しかし、ECMAScript の仕様では、この範囲を拡張することができます。</target>
        </trans-unit>
        <trans-unit id="f2e4f23675a348a666a6bfafd7a4699120b37ced" translate="yes" xml:space="preserve">
          <source>The angle in radians (in</source>
          <target state="translated">ラジアン単位の角度(</target>
        </trans-unit>
        <trans-unit id="2634c0a019d5cd1eb149d39cd1e280b4a526aa36" translate="yes" xml:space="preserve">
          <source>The angle in radians for which to return the cosine.</source>
          <target state="translated">余弦を返す角度をラジアン単位で指定します。</target>
        </trans-unit>
        <trans-unit id="4e34c6cf0ffab0f10f4b4f8b32a6d6fee2d0835d" translate="yes" xml:space="preserve">
          <source>The arccosine (in radians) of the given number if it's between &lt;strong&gt;-1&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;; otherwise, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">与えられた数の（ラジアン）アークコサインそれは間だ場合は&lt;strong&gt;-1&lt;/strong&gt;と&lt;strong&gt;1&lt;/strong&gt;。それ以外の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ddc680f871363f6e0485b6e299a25e7590efcab6" translate="yes" xml:space="preserve">
          <source>The arcsine (in radians) of the given number if it's between &lt;strong&gt;-1&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;; otherwise, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">与えられた数の（ラジアン）アークサインが間だ場合は&lt;strong&gt;-1&lt;/strong&gt;と&lt;strong&gt;1&lt;/strong&gt;。それ以外の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="85ae76861326155a029dcf8b30f59372b5b5bdd8" translate="yes" xml:space="preserve">
          <source>The arctangent (in radians) of the given number.</source>
          <target state="translated">与えられた数の八角(ラジアン単位)。</target>
        </trans-unit>
        <trans-unit id="8a7944803c62f9bf2952575c8a72fd7e52711bcc" translate="yes" xml:space="preserve">
          <source>The argument list is invalid somehow. Perhaps you accidentally picked a keyword like &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt; as an argument name, or perhaps there's some stray punctuation in your argument list. Or maybe you accidentally passed an invalid value, like a number or object.</source>
          <target state="translated">引数リストがどういうわけか無効です。おそらく、引数名として &lt;code&gt;if&lt;/code&gt; や &lt;code&gt;var&lt;/code&gt; などのキーワードを誤って選択したか、引数リストに誤った句読点がある可能性があります。または、誤って数値やオブジェクトなどの無効な値を渡した可能性があります。</target>
        </trans-unit>
        <trans-unit id="7cad76dfde920321524d3fa684e08460364eae69" translate="yes" xml:space="preserve">
          <source>The argument of &lt;a href=&quot;../global_objects/array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt; is expected to be either &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or a function which compares its operands.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt;の引数は、&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;か、そのオペランドを比較する関数であることが期待されています。</target>
        </trans-unit>
        <trans-unit id="6f2610db3899781e47b828d98a30ce2343116de0" translate="yes" xml:space="preserve">
          <source>The argument of the &lt;code&gt;eval()&lt;/code&gt; function is a string. If the string represents an expression, &lt;code&gt;eval()&lt;/code&gt; evaluates the expression. If the argument represents one or more JavaScript statements, &lt;code&gt;eval()&lt;/code&gt; evaluates the statements. Do not call &lt;code&gt;eval()&lt;/code&gt; to evaluate an arithmetic expression; JavaScript evaluates arithmetic expressions automatically.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 関数の引数は文字列です。文字列が式を表す場合、 &lt;code&gt;eval()&lt;/code&gt; は式を評価します。引数が1つ以上のJavaScriptステートメントを表す場合、 &lt;code&gt;eval()&lt;/code&gt; はステートメントを評価します。算術式を評価するために &lt;code&gt;eval()&lt;/code&gt; を呼び出さないでください。JavaScriptは算術式を自動的に評価します。</target>
        </trans-unit>
        <trans-unit id="86421c1a1ea2fb7e300781ab95602ea6e5e9b867" translate="yes" xml:space="preserve">
          <source>The argument passed to this function will be converted to &lt;code&gt;number&lt;/code&gt; type implicitly.</source>
          <target state="translated">この関数に渡される引数は、暗黙的に &lt;code&gt;number&lt;/code&gt; 型に変換されます。</target>
        </trans-unit>
        <trans-unit id="2642b281b11a45379b1899c8bfdfa20fded62cac" translate="yes" xml:space="preserve">
          <source>The argument passed to this method will be converted to number type implicitly.</source>
          <target state="translated">このメソッドに渡された引数は暗黙のうちに数値型に変換されます。</target>
        </trans-unit>
        <trans-unit id="ad8b914095fbf6c1921676be0fbe503c75e3bc36" translate="yes" xml:space="preserve">
          <source>The argument to be checked.</source>
          <target state="translated">チェックする引数。</target>
        </trans-unit>
        <trans-unit id="568b31681a37df3f00fb42424598962a14f30d09" translate="yes" xml:space="preserve">
          <source>The arguments &quot;&lt;code&gt;a&lt;/code&gt;&quot; and &quot;&lt;code&gt;b&lt;/code&gt;&quot; are formal argument names that are used in the function body, &quot;&lt;code&gt;return a + b&lt;/code&gt;&quot;.</source>
          <target state="translated">引数「 &lt;code&gt;a&lt;/code&gt; 」と「 &lt;code&gt;b&lt;/code&gt; 」は、関数本体で使用される正式な引数名であり、「 &lt;code&gt;return a + b&lt;/code&gt; 」です。</target>
        </trans-unit>
        <trans-unit id="d01f440c1503d60bc2f15078825ee9b7b4dd13f7" translate="yes" xml:space="preserve">
          <source>The arguments of &lt;code&gt;substring()&lt;/code&gt; represent the starting and ending indexes, while the arguments of &lt;code&gt;substr()&lt;/code&gt; represent the starting index and the length of characters to include in the returned string.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; の引数は開始インデックスと終了インデックスを表し、 &lt;code&gt;substr()&lt;/code&gt; の引数は開始インデックスと返される文字列に含める文字の長さを表します。</target>
        </trans-unit>
        <trans-unit id="1c05bc8168ca994804516a468e85cd019d331fe5" translate="yes" xml:space="preserve">
          <source>The arguments to the function are as follows:</source>
          <target state="translated">この関数の引数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ce50c2eb1731e30f651e83e65a160b7d9cb292ed" translate="yes" xml:space="preserve">
          <source>The arguments.length property provides the number of arguments actually passed to a function. This can be more or less than the defined parameter's count (see &lt;a href=&quot;../../global_objects/function/length&quot;&gt;&lt;code&gt;Function.length&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">arguments.lengthプロパティは、実際に関数に渡される引数の数を提供します。これは、定義されたパラメーターの数よりも多くても少なくてもかまいません（&lt;a href=&quot;../../global_objects/function/length&quot;&gt; &lt;code&gt;Function.length&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d6ace2dacc3116721ac085e0aa2ff5a3b5910fd8" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;every&lt;/code&gt; was called upon.</source>
          <target state="translated">配列は &lt;code&gt;every&lt;/code&gt; 呼び出されました。</target>
        </trans-unit>
        <trans-unit id="b0a5990c1febd7c0456b1d95c2919dd12ea41ed9" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;filter&lt;/code&gt; was called upon.</source>
          <target state="translated">配列 &lt;code&gt;filter&lt;/code&gt; が要求されました。</target>
        </trans-unit>
        <trans-unit id="739231e797b44686b6cb1d90214cc6c87045d6c4" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;find&lt;/code&gt; was called upon.</source>
          <target state="translated">配列 &lt;code&gt;find&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="fd246a8490071c05ff637a363cae6c8e36958f15" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;findIndex&lt;/code&gt; was called upon.</source>
          <target state="translated">配列 &lt;code&gt;findIndex&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="ab72b62dc5410c1069e9b77f96e6c04c204b365d" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;forEach()&lt;/code&gt; was called upon.</source>
          <target state="translated">配列 &lt;code&gt;forEach()&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="d3186a1a627eaeb3ebe86c8859078581c3a2241f" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;map&lt;/code&gt; was called upon.</source>
          <target state="translated">配列 &lt;code&gt;map&lt;/code&gt; が要求されました。</target>
        </trans-unit>
        <trans-unit id="d8556e513816f3230a6e95e0d7cca63a630bf152" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;reduce()&lt;/code&gt; was called upon.</source>
          <target state="translated">配列 &lt;code&gt;reduce()&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="e4bc918402b106b22d0715b5db9cbc982610a958" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;reduce&lt;/code&gt; was called upon.</source>
          <target state="translated">配列 &lt;code&gt;reduce&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="52ab5cf3467b3f84dd374afb2b77922d7f6dba9d" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;some()&lt;/code&gt; was called upon.</source>
          <target state="translated">配列 &lt;code&gt;some()&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="6dad5186f2394322d0d048218bd4971959e5c71d" translate="yes" xml:space="preserve">
          <source>The array &lt;strong&gt;iterator&lt;/strong&gt; function, which is the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; function by default.</source>
          <target state="translated">配列&lt;strong&gt;反復&lt;/strong&gt;関数。デフォルトでは、&lt;a href=&quot;values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;関数です。</target>
        </trans-unit>
        <trans-unit id="baf0ca63b09065862fb6a8e2d7fe2f07e5b3e61c" translate="yes" xml:space="preserve">
          <source>The array comprehensions syntax is non-standard and removed starting with Firefox 58. For future-facing usages, consider using &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;Array.prototype.map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, and &lt;a href=&quot;spread_syntax&quot;&gt;spread syntax&lt;/a&gt;.</source>
          <target state="translated">配列内包表記の構文は非標準であり、Firefox 58以降では削除されています。将来の使用法については、&lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;Array.prototype.map&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../functions/arrow_functions&quot;&gt;矢印関数&lt;/a&gt;、および&lt;a href=&quot;spread_syntax&quot;&gt;スプレッド構文の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="574cf9211229dd7de993204fbc819629088b32dd" translate="yes" xml:space="preserve">
          <source>The array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown.</source>
          <target state="translated">値をコピーする配列。コピー元の配列からのすべての値がコピー先の配列にコピーされます。 ただし、コピー元の配列の長さとオフセットの長さがコピー先の配列の長さを超えない限り、その場合は例外が発生します。</target>
        </trans-unit>
        <trans-unit id="5d3ea3e65da8f7c4b65c1da2a62251e8c8e8b334" translate="yes" xml:space="preserve">
          <source>The array that &lt;code&gt;forEach()&lt;/code&gt; is being applied to.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; が適用される配列。</target>
        </trans-unit>
        <trans-unit id="518a56af12e1c2665fe6da5982dd5a9e68f5bc6c" translate="yes" xml:space="preserve">
          <source>The arrow function expression (=&amp;gt;)</source>
          <target state="translated">アロー関数式（=&amp;gt;）</target>
        </trans-unit>
        <trans-unit id="59183250f0677ed86b491a4145e3847b2edb3225" translate="yes" xml:space="preserve">
          <source>The attributes for the property being defined or modified.</source>
          <target state="translated">定義または変更されるプロパティの属性。</target>
        </trans-unit>
        <trans-unit id="f79e2a6915396dcde507e68f69aa0bcc1ad9f2b1" translate="yes" xml:space="preserve">
          <source>The base 10 logarithm of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定された数値の10を底とする対数。数値が負の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="19f44bd8b33b87013e304114f54f4d54ffa56d4d" translate="yes" xml:space="preserve">
          <source>The base 2 logarithm of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定された数値の2を底とする対数。数値が負の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="598eb94105d30e9010db45a9322f00161e0043ff" translate="yes" xml:space="preserve">
          <source>The base number.</source>
          <target state="translated">ベースとなる番号。</target>
        </trans-unit>
        <trans-unit id="9138e5420219b68a65111246e358ee019b383637" translate="yes" xml:space="preserve">
          <source>The basic assignment operator is equal (&lt;code&gt;=&lt;/code&gt;), which assigns the value of its right operand to its left operand. That is, &lt;code&gt;x = y&lt;/code&gt; assigns the value of &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;. The other assignment operators are usually shorthand for standard operations, as shown in the following definitions and examples.</source>
          <target state="translated">基本的な代入演算子は等号（ &lt;code&gt;=&lt;/code&gt; ）で、右のオペランドの値を左のオペランドに代入します。つまり、 &lt;code&gt;x = y&lt;/code&gt; は &lt;code&gt;y&lt;/code&gt; の値を &lt;code&gt;x&lt;/code&gt; に割り当てます。次の定義と例に示すように、他の代入演算子は通常、標準操作の省略形です。</target>
        </trans-unit>
        <trans-unit id="064d3957a78ce04301d5080c985ea903ba7311e2" translate="yes" xml:space="preserve">
          <source>The bitwise AND assignment operator uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Bitwise_AND&quot;&gt;bitwise AND operator&lt;/a&gt; for more details.</source>
          <target state="translated">ビットごとのAND代入演算子は、両方のオペランドのバイナリ表現を使用し、それらに対してビットごとのAND演算を実行して、結果を変数に割り当てます。詳細については、&lt;a href=&quot;bitwise_operators#Bitwise_AND&quot;&gt;ビットごとのAND演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="740026f0cc3692131272c79998e3dd563a72e7a0" translate="yes" xml:space="preserve">
          <source>The bitwise AND operation only yields 1, if both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are 1. The truth table for the AND operation is:</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; の両方が1の場合、ビット単位のAND演算は1のみを生成します。AND演算の真理値表は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d2f6914a63e091d61d1a3d787cf628bb0b651f2b" translate="yes" xml:space="preserve">
          <source>The bitwise OR assignment operator uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Bitwise_OR&quot;&gt;bitwise OR operator&lt;/a&gt; for more details.</source>
          <target state="translated">ビットごとのOR代入演算子は、両方のオペランドのバイナリ表現を使用し、それらに対してビットごとのOR演算を実行して、結果を変数に割り当てます。詳細については、&lt;a href=&quot;bitwise_operators#Bitwise_OR&quot;&gt;ビットごとのOR演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e346339363a3470fe9e3b74cc1f4d1f99862ea69" translate="yes" xml:space="preserve">
          <source>The bitwise OR operation yields 1, if either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; are 1. The truth table for the OR operation is:</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; または &lt;code&gt;b&lt;/code&gt; のいずれかが1の場合、ビット単位のOR演算は1になります。OR演算の真理値表は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="867db60d4f73f82b6e6d70b093e9389fd0ce51de" translate="yes" xml:space="preserve">
          <source>The bitwise XOR assignment operator uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;bitwise XOR operator&lt;/a&gt; for more details.</source>
          <target state="translated">ビットごとのXOR代入演算子は、両方のオペランドのバイナリ表現を使用し、それらに対してビットごとのXOR演算を実行して、結果を変数に割り当てます。詳細については、&lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;ビットごとのXOR演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f2136d7ce96d0b55459d54b5b473e1285c2c9cfa" translate="yes" xml:space="preserve">
          <source>The bitwise XOR operation yields 1, if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are different. The truth table for the XOR operation is:</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が異なる場合、ビット単位のXOR演算は1を返します。XOR演算の真理値表は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9c276658178589b2b39f0ac029ac097652b8b966" translate="yes" xml:space="preserve">
          <source>The bitwise logical operators are often used to create, manipulate, and read sequences of &lt;em&gt;flags&lt;/em&gt;, which are like binary variables. Variables could be used instead of these sequences, but binary flags take much less memory (by a factor of 32).</source>
          <target state="translated">ビット単位の論理演算子は、バイナリ変数のような&lt;em&gt;フラグの&lt;/em&gt;シーケンスを作成、操作、および読み取るためによく使用されます。これらのシーケンスの代わりに変数を使用することもできますが、バイナリフラグのメモリははるかに少なくなります（32倍）。</target>
        </trans-unit>
        <trans-unit id="48f10e0cc5e63026f354f72ce42f1b440b6efc91" translate="yes" xml:space="preserve">
          <source>The bitwise shift operators take two operands: the first is a quantity to be shifted, and the second specifies the number of bit positions by which the first operand is to be shifted. The direction of the shift operation is controlled by the operator used.</source>
          <target state="translated">ビット単位のシフト演算子は、2つのオペランドを取ります。シフト演算の方向は、使用される演算子によって制御されます。</target>
        </trans-unit>
        <trans-unit id="175ebbaf313d101be1d46496e89b9a5e9de11c06" translate="yes" xml:space="preserve">
          <source>The block statement is often called &lt;strong&gt;compound statement&lt;/strong&gt; in other languages. It allows you to use multiple statements where JavaScript expects only one statement. Combining statements into blocks is a common practice in JavaScript. The opposite behavior is possible using an &lt;a href=&quot;empty&quot;&gt;empty statement&lt;/a&gt;, where you provide no statement, although one is required.</source>
          <target state="translated">ブロックステートメントは、他の言語ではしばしば&lt;strong&gt;複合ステートメント&lt;/strong&gt;と呼ばれます。これにより、JavaScriptが1つのステートメントのみを期待する場合に、複数のステートメントを使用できます。ステートメントをブロックに結合することは、JavaScriptでは一般的な方法です。&lt;a href=&quot;empty&quot;&gt;空のステートメント&lt;/a&gt;を使用すると、反対の動作が可能になります。空のステートメントを指定すると、ステートメントは必要ありませんが、指定しません。</target>
        </trans-unit>
        <trans-unit id="7477e48593995ef9da932d151626c02fe6996b24" translate="yes" xml:space="preserve">
          <source>The body of a class is executed in &lt;a href=&quot;strict_mode&quot;&gt;strict mode&lt;/a&gt;, i.e., code written here is subject to stricter syntax for increased performance, some otherwise silent errors will be thrown, and certain keywords are reserved for future versions of ECMAScript.</source>
          <target state="translated">クラスの本体は&lt;a href=&quot;strict_mode&quot;&gt;strictモード&lt;/a&gt;で実行されます。つまり、ここで記述されたコードは、パフォーマンスを向上させるためにより厳密な構文に従います。そうでない場合はサイレントエラーがスローされ、特定のキーワードはECMAScriptの将来のバージョン用に予約されています。</target>
        </trans-unit>
        <trans-unit id="4bca9151f6cc6d585fadc8a648f58c470c08c10c" translate="yes" xml:space="preserve">
          <source>The body of a class is the part that is in curly brackets &lt;code&gt;{}&lt;/code&gt;. This is where you define class members, such as methods or constructor.</source>
          <target state="translated">クラスの本体は、中括弧 &lt;code&gt;{}&lt;/code&gt; で囲まれた部分です。ここで、メソッドやコンストラクタなどのクラスメンバーを定義します。</target>
        </trans-unit>
        <trans-unit id="ebf69735072234ebcbd50f368e02a05de91363f5" translate="yes" xml:space="preserve">
          <source>The brackets may look correct at first, but note how the &lt;code&gt;||&lt;/code&gt; is outside the brackets. Correct would be putting brackets around the &lt;code&gt;||&lt;/code&gt;:</source>
          <target state="translated">ブラケットは最初は正しいように見えるかもしれませんが、 &lt;code&gt;||&lt;/code&gt; 括弧の外にあります。 &lt;code&gt;||&lt;/code&gt; を括弧で囲みます。：</target>
        </trans-unit>
        <trans-unit id="a60abbe84992cc75d4e2129371f5adf4277c742a" translate="yes" xml:space="preserve">
          <source>The byte length of the new &lt;code&gt;ArrayBuffer&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトのバイト長。</target>
        </trans-unit>
        <trans-unit id="c21c288ef2e0b85c532a0aaaba3bb8ac28da056c" translate="yes" xml:space="preserve">
          <source>The call to the &lt;code&gt;reduceRight&lt;/code&gt; callback would look something like this:</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; コールバックの呼び出しは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="96f6077747036c2b9f4ce1ca2d356c8f847aea6d" translate="yes" xml:space="preserve">
          <source>The call to the reduceRight &lt;code&gt;callback&lt;/code&gt; would look something like this:</source>
          <target state="translated">reduceRight &lt;code&gt;callback&lt;/code&gt; の呼び出しは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="61dd799b0f0b49b745fa73d43d16c56e02fb34fc" translate="yes" xml:space="preserve">
          <source>The callback would be invoked four times, with the arguments and return values in each call being as follows:</source>
          <target state="translated">コールバックは4回呼び出され、各コールの引数と戻り値は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="529358e5ae65198672839644ebda30bb0834f61a" translate="yes" xml:space="preserve">
          <source>The capturing groups are numbered according to the order of left parentheses of capturing groups, starting from 1. The matched substring can be recalled from the resulting array's elements &lt;code&gt;[1], ..., [n]&lt;/code&gt; or from the predefined &lt;code&gt;RegExp&lt;/code&gt; object's properties &lt;code&gt;$1, ..., $9&lt;/code&gt;.</source>
          <target state="translated">キャプチャグループには、キャプチャグループの左括弧の順序に従って、1から番号が付けられます。一致した部分文字列は、結果の配列の要素 &lt;code&gt;[1], ..., [n]&lt;/code&gt; または事前定義された &lt;code&gt;RegExp&lt;/code&gt; オブジェクトのプロパティ &lt;code&gt;$1, ..., $9&lt;/code&gt; から呼び出すことができます。、...、9ドル。</target>
        </trans-unit>
        <trans-unit id="eea4a7d34afcf6a20ca9f68e6a0423534999cad7" translate="yes" xml:space="preserve">
          <source>The characters to be searched for at the end of this string.</source>
          <target state="translated">この文字列の最後に検索する文字。</target>
        </trans-unit>
        <trans-unit id="ea4040c6f18cef23c2d1fe587d1104e905e7f6ab" translate="yes" xml:space="preserve">
          <source>The characters to be searched for at the start of this string.</source>
          <target state="translated">この文字列の先頭で検索する文字。</target>
        </trans-unit>
        <trans-unit id="b47a75f9e191f52f785a5588c08b45fa6d1cf028" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;string/tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列内の文字は、現在のロケールを考慮して小文字に変換されます。ほとんどの言語では、これは&lt;a href=&quot;string/tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt;と同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="02a4044b5eff1ebaa85a95b61d51842f7688126c" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列内の文字は、現在のロケールを考慮して小文字に変換されます。ほとんどの言語では、これは&lt;a href=&quot;tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt;と同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="bb9149f43ab1f76f894c71b38c8bcdfb7b581734" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;string/touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列内の文字は、現在のロケールを考慮して大文字に変換されます。ほとんどの言語では、これは&lt;a href=&quot;string/touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt;と同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="efa62672806348552a404536b413669fee7e627a" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列内の文字は、現在のロケールを考慮して大文字に変換されます。ほとんどの言語では、これは&lt;a href=&quot;touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt;と同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="4c1ed43d7a20e3b448e88650183e95808a68a1b7" translate="yes" xml:space="preserve">
          <source>The class body of a class declaration is executed in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. The constructor property is optional.</source>
          <target state="translated">クラス宣言のクラス本体は、&lt;a href=&quot;../strict_mode&quot;&gt;strictモードで&lt;/a&gt;実行されます。コンストラクターのプロパティーはオプションです。</target>
        </trans-unit>
        <trans-unit id="04bd176ecf0b4c0d2e361fed92486d9bb741b211" translate="yes" xml:space="preserve">
          <source>The code above may seem inefficiently slow because of the triple nested function, but let's analyse the benefits of the above efficient method:</source>
          <target state="translated">上記のコードは、トリプルネストされた関数のため、効率が悪いように見えるかもしれませんが、上記の効率的な方法のメリットを分析してみましょう。</target>
        </trans-unit>
        <trans-unit id="27b06f1e2d79ed3ea44e8951423a811c3379ede8" translate="yes" xml:space="preserve">
          <source>The code above serves as an example for substring operations. If you need to replace substrings, most of the time you will want to use &lt;a href=&quot;replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">上記のコードは、部分文字列操作の例として機能します。サブストリングを置き換える必要がある場合は、ほとんどの場合、&lt;a href=&quot;replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="29efbb3fdcfaf150956a6e65df3297511df904b2" translate="yes" xml:space="preserve">
          <source>The code below shows how to import from a secondary module to assist in processing an AJAX JSON request.</source>
          <target state="translated">以下のコードはAJAX JSONリクエストの処理を支援するためにセカンダリモジュールからインポートする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="f84b0cd589932cf33c346a00c77f36d47f4be22a" translate="yes" xml:space="preserve">
          <source>The comma operator allows multiple expressions to be evaluated in a single statement and returns the result of the last expression.</source>
          <target state="translated">カンマ演算子を使用すると、複数の式を単一の文で評価し、最後の式の結果を返すことができます。</target>
        </trans-unit>
        <trans-unit id="1250480c705913bbdc22c071498ae62f28af5d1a" translate="yes" xml:space="preserve">
          <source>The comma operator is fully different from the comma within arrays, objects, and function arguments and parameters.</source>
          <target state="translated">カンマ演算子は、配列、オブジェクト、関数の引数やパラメータ内のカンマとは完全に異なります。</target>
        </trans-unit>
        <trans-unit id="7fab18439a7793e4c9d265e0a1eb2b9a108df7ab" translate="yes" xml:space="preserve">
          <source>The completion value of evaluating the given code. If the completion value is empty, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定されたコードの評価の完了値。完了値が空の場合、&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="0621346efbf3c869cb91624fd5861f953bb9a30a" translate="yes" xml:space="preserve">
          <source>The conditional operator returns one of two values based on the logical value of the condition.</source>
          <target state="translated">条件演算子は、条件の論理値に基づいて 2 つの値のうち 1 つを返します。</target>
        </trans-unit>
        <trans-unit id="fba8e0ecfce285b4bc6ff7ab720824ece9546a9f" translate="yes" xml:space="preserve">
          <source>The console will warn &quot;unreachable code after return statement&quot;.</source>
          <target state="translated">コンソールは「return文の後に到達不可能なコード」を警告します。</target>
        </trans-unit>
        <trans-unit id="6e123d397cc379ed5365e7a4deebd0d4e9c23f0d" translate="yes" xml:space="preserve">
          <source>The constant's name, which can be any legal &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;identifier&lt;/a&gt;.</source>
          <target state="translated">定数の名前。任意の有効な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;識別子に&lt;/a&gt;することができます。</target>
        </trans-unit>
        <trans-unit id="0da19f405b29faa24595e62c88e9d6fc4e1d0aa7" translate="yes" xml:space="preserve">
          <source>The constant's value; this can be any legal &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;expression&lt;/a&gt;, including a function expression.</source>
          <target state="translated">定数の値。これは、関数式を含む任意の有効な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;式に&lt;/a&gt;することができます。</target>
        </trans-unit>
        <trans-unit id="fb6c865a9918ebbc467c3613c73d166c77549f56" translate="yes" xml:space="preserve">
          <source>The constructor function &lt;em&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/em&gt; is called with the specified arguments, and with &lt;code&gt;&lt;a href=&quot;this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; bound to the newly created object. &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; is equivalent to &lt;code&gt;new &lt;/code&gt;&lt;em&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/em&gt;&lt;code&gt;()&lt;/code&gt;, i.e. if no argument list is specified, &lt;em&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/em&gt; is called without arguments.</source>
          <target state="translated">コンストラクター関数&lt;em&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;/em&gt;は、指定された引数を使用して呼び出され、 &lt;code&gt;&lt;a href=&quot;this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; が新しく作成されたオブジェクトにバインドされます。 &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; は &lt;code&gt;new &lt;/code&gt; &lt;em&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;/em&gt; &lt;code&gt;()&lt;/code&gt; と同等です。つまり、引数リストが指定されていない場合、&lt;em&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;/em&gt;は引数なしで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8a169aedbb3ba1ad7d6dfd37dd0fae85249dc777" translate="yes" xml:space="preserve">
          <source>The constructor function that is used to create derived objects.</source>
          <target state="translated">派生オブジェクトを作成する際に使用するコンストラクタ関数です。</target>
        </trans-unit>
        <trans-unit id="982b985b74049b6033e81bffd9464c5eb31a7a91" translate="yes" xml:space="preserve">
          <source>The constructor of the regular expression object, for example, &lt;code&gt;new RegExp('ab+c')&lt;/code&gt;, provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.</source>
          <target state="translated">正規表現オブジェクトのコンストラクター &lt;code&gt;new RegExp('ab+c')&lt;/code&gt; 例：new RegExp（ 'ab + c'））は、正規表現のランタイムコンパイルを提供します。正規表現パターンが変更されることがわかっている場合、またはパターンが不明で、ユーザー入力などの別のソースから取得している場合は、コンストラクター関数を使用します。</target>
        </trans-unit>
        <trans-unit id="416fbf4bb9cd00c0ca84cc3b37fc7b52c1bbf60f" translate="yes" xml:space="preserve">
          <source>The constructor that was originally called, &lt;code&gt;p&lt;/code&gt; above.</source>
          <target state="translated">最初に呼び出されたコンストラクタ、上記の &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f0c8a18e529cda55e6b202394037a0f7a759263" translate="yes" xml:space="preserve">
          <source>The constructor whose prototype should be used. See also the &lt;code&gt;&lt;a href=&quot;../../operators/new.target&quot;&gt;new.target&lt;/a&gt;&lt;/code&gt; operator. If &lt;code&gt;newTarget&lt;/code&gt; is not present, it is &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">プロトタイプを使用する必要があるコンストラクター。 &lt;code&gt;&lt;a href=&quot;../../operators/new.target&quot;&gt;new.target&lt;/a&gt;&lt;/code&gt; 演算子も参照してください。 &lt;code&gt;newTarget&lt;/code&gt; が存在しない場合は、 &lt;code&gt;target&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="013d2f56a045b9e0a7a2b73d84c720cef68dd7ca" translate="yes" xml:space="preserve">
          <source>The correct function name is &lt;code&gt;getElementByI&lt;strong&gt;d&lt;/strong&gt;&lt;/code&gt;:</source>
          <target state="translated">正しい関数名は &lt;code&gt;getElementByI&lt;strong&gt;d&lt;/strong&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7de3945364d45317b571a832343df34f694f7d73" translate="yes" xml:space="preserve">
          <source>The cosine of the given number.</source>
          <target state="translated">与えられた数の余弦。</target>
        </trans-unit>
        <trans-unit id="1c930f93fb8868cc6815569cb4309a14122dc34d" translate="yes" xml:space="preserve">
          <source>The cube root of the given number.</source>
          <target state="translated">与えられた数の立方根。</target>
        </trans-unit>
        <trans-unit id="c114c8f5d2e6f7f010683b95d33e20f9c1b64386" translate="yes" xml:space="preserve">
          <source>The curly brackets look correct at a first glance, but this code snippet is missing a &lt;code&gt;{&lt;/code&gt; after the first &lt;code&gt;if&lt;/code&gt; statement. Correct would be:</source>
          <target state="translated">中かっこは一見正しいように見えますが、このコードスニペットには最初の &lt;code&gt;if&lt;/code&gt; ステートメントの後に &lt;code&gt;{&lt;/code&gt; がありません。正しいでしょう：</target>
        </trans-unit>
        <trans-unit id="5f5245cf8dfef36fe67c21f6ce9d68b1136ece88" translate="yes" xml:space="preserve">
          <source>The currency string, such as the symbols &quot;$&quot; and &quot;&amp;euro;&quot; or the name &quot;Dollar&quot;, &quot;Euro&quot; depending on how &lt;code&gt;currencyDisplay&lt;/code&gt; is specified.</source>
          <target state="translated">こうした記号「$」などの通貨文字列、および「&amp;euro;」または名称「ドル」、「ユーロ」方法に応じ &lt;code&gt;currencyDisplay&lt;/code&gt; が指定されています。</target>
        </trans-unit>
        <trans-unit id="b19ba0bd00ac262399d753d908b7d49bd67d4d73" translate="yes" xml:space="preserve">
          <source>The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as &lt;code&gt;&quot;USD&quot;&lt;/code&gt; for the US dollar, &lt;code&gt;&quot;EUR&quot;&lt;/code&gt; for the euro, or &lt;code&gt;&quot;CNY&quot;&lt;/code&gt; for the Chinese RMB &amp;mdash; see the &lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;Current currency &amp;amp; funds code list&lt;/a&gt;. There is no default value; if the &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;&quot;currency&quot;&lt;/code&gt;, the &lt;code&gt;currency&lt;/code&gt; property must be provided.</source>
          <target state="translated">通貨フォーマットで使用する通貨。可能な値はISO 4217通貨コードです。たとえば、米ドルは &lt;code&gt;&quot;USD&quot;&lt;/code&gt; 、ユーロは &lt;code&gt;&quot;EUR&quot;&lt;/code&gt; 、中国人民元は &lt;code&gt;&quot;CNY&quot;&lt;/code&gt; です。&lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;現在の通貨と資金コードのリストを&lt;/a&gt;ご覧ください。デフォルト値はありません。場合 &lt;code&gt;style&lt;/code&gt; ある &lt;code&gt;&quot;currency&quot;&lt;/code&gt; 、 &lt;code&gt;currency&lt;/code&gt; プロパティが提供されなければなりません。</target>
        </trans-unit>
        <trans-unit id="5dc9e50d81823798a643f009d726e60aa602bf91" translate="yes" xml:space="preserve">
          <source>The current day of month will have an impact on the behaviour of this method. Conceptually it will add the number of days given by the current day of the month to the 1st day of the new month specified as the parameter, to return the new date. For example, if the current value is 31st August 2016, calling setMonth with a value of 1 will return 2nd March 2016. This is because in 2016 February had 29 days.</source>
          <target state="translated">現在の月の曜日は、このメソッドの動作に影響を与えます。概念的には、現在の月の日によって与えられた日数を、パラメータとして指定された新しい月の1日に加算して、新しい日付を返します。例えば、現在の値が2016年8月31日の場合、値1を指定してsetMonthを呼び出すと、2016年3月2日を返します。これは、2016年の2月は29日だったからです。</target>
        </trans-unit>
        <trans-unit id="70d81a6aba37ff18bd5d8c2ff73ec50a431f3bde" translate="yes" xml:space="preserve">
          <source>The current element being processed in the array.</source>
          <target state="translated">配列内で処理されている現在の要素.</target>
        </trans-unit>
        <trans-unit id="524f1003256858d5c9cdfa90bf0c2de1c7abe3e7" translate="yes" xml:space="preserve">
          <source>The current element being processed in the typed array.</source>
          <target state="translated">型付き配列の中で処理されている現在の要素。</target>
        </trans-unit>
        <trans-unit id="c60f4c692eb4dfbdfed4ca0839000a6e47bd0087" translate="yes" xml:space="preserve">
          <source>The data type &lt;strong&gt;symbol&lt;/strong&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive data type&lt;/a&gt;.</source>
          <target state="translated">データ型&lt;strong&gt;シンボル&lt;/strong&gt;は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;プリミティブデータ型&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="aa4fccd524441cf00caefa27a863039b3cf91544" translate="yes" xml:space="preserve">
          <source>The date and time formats can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">日付と時刻の形式は、 &lt;code&gt;options&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="666a0d44dc5f74d5cba4609d254e995f1bf62311" translate="yes" xml:space="preserve">
          <source>The date time string may be in a simplified &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; format. For example, &lt;code&gt;&quot;2011-10-10&quot;&lt;/code&gt; (just date) or &lt;code&gt;&quot;2011-10-10T14:48:00&quot;&lt;/code&gt; (date and time) can be passed and parsed. Where the string is ISO 8601 date only, the UTC time zone is used to interpret arguments. If the string is date and time in &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; format, it will be treated as local.</source>
          <target state="translated">日時文字列は、簡略化された&lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt;形式にすることができます。たとえば、 &lt;code&gt;&quot;2011-10-10&quot;&lt;/code&gt; （日付のみ）または &lt;code&gt;&quot;2011-10-10T14:48:00&quot;&lt;/code&gt; （日付と時刻）を渡して解析できます。文字列がISO 8601日付のみの場合、UTCタイムゾーンが引数の解釈に使用されます。文字列が&lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt;形式の日時の場合、ローカルとして扱われます。</target>
        </trans-unit>
        <trans-unit id="d130d221e393af90c0ed6eeecc502bde90336a08" translate="yes" xml:space="preserve">
          <source>The date to format.</source>
          <target state="translated">フォーマットする日付。</target>
        </trans-unit>
        <trans-unit id="f108ef11ec4436baa6c0f00ae9e1b84307280093" translate="yes" xml:space="preserve">
          <source>The decimal separator string (&quot;.&quot;).</source>
          <target state="translated">10進数の区切り文字列(&quot;.</target>
        </trans-unit>
        <trans-unit id="910c3fbe938cfd9b387a32e9bc34f0a45b870d47" translate="yes" xml:space="preserve">
          <source>The decrement operator decrements (subtracts one from) its operand and returns a value.</source>
          <target state="translated">デクリメント演算子は、そのオペランドをデクリメント(減算)して値を返します。</target>
        </trans-unit>
        <trans-unit id="490855b400d057b93a21637883df08ab89c24f3f" translate="yes" xml:space="preserve">
          <source>The default argument is evaluated at call time, so unlike e.g. Python, a new object is created each time the function is called.</source>
          <target state="translated">デフォルトの引数は呼び出し時に評価されるので、Pythonなどとは異なり、関数が呼び出されるたびに新しいオブジェクトが作成されます。</target>
        </trans-unit>
        <trans-unit id="60352eea3410e84a3191b72431afaa8b6d3183fe" translate="yes" xml:space="preserve">
          <source>The default array properties that are excluded from &lt;code&gt;with&lt;/code&gt; bindings are: copyWithin, entries, fill, find, findIndex, includes, keys, and values.</source>
          <target state="translated">除外されているデフォルトの配列プロパティ &lt;code&gt;with&lt;/code&gt; バインディングは、以下のとおりです。copyWithinは、エントリは、塗りつぶし、見つける、findIndexは、キー、および値は、含まれています。</target>
        </trans-unit>
        <trans-unit id="5d2e5c202585ddc67e01c8a15ad6c14853b1024b" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&quot;variant&quot;&lt;/code&gt; for usage &lt;code&gt;&quot;sort&quot;&lt;/code&gt;; it's locale dependent for usage &lt;code&gt;&quot;search&quot;&lt;/code&gt;.</source>
          <target state="translated">使用法 &lt;code&gt;&quot;sort&quot;&lt;/code&gt; のデフォルトは &lt;code&gt;&quot;variant&quot;&lt;/code&gt; です。これは、使用法 &lt;code&gt;&quot;search&quot;&lt;/code&gt; のロケールに依存します。</target>
        </trans-unit>
        <trans-unit id="575ea9e4c460d8bcd17e3b3e10695e0d5c392b70" translate="yes" xml:space="preserve">
          <source>The default line ending varies depending on the platform (Unix, Windows, etc.). The line splitting provided in this example works on all platforms.</source>
          <target state="translated">デフォルトの行末はプラットフォーム(Unix、Windowsなど)によって異なります。この例で提供されている行分割は、すべてのプラットフォームで動作します。</target>
        </trans-unit>
        <trans-unit id="51d5bc9828c9f3e697bdef77251371c861406400" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if the &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, and &lt;code&gt;second&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">各日時コンポーネントプロパティのデフォルト値は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;ですが、 &lt;code&gt;hour&lt;/code&gt; 、 &lt;code&gt;minute&lt;/code&gt; 、 &lt;code&gt;second&lt;/code&gt; プロパティがすべて&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合、 &lt;code&gt;hour&lt;/code&gt; 、 &lt;code&gt;minute&lt;/code&gt; 、 &lt;code&gt;second&lt;/code&gt; は &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="4ddf17b02e4292879e3db354784c90cfc09a8e02" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if the &lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">各日時コンポーネントプロパティのデフォルト値は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;ですが、 &lt;code&gt;weekday&lt;/code&gt; 、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt; プロパティがすべて&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、および &lt;code&gt;day&lt;/code&gt; は &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="50ec5acd3f905b8f0cc746b02ed2067efd52b285" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if the &lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, and &lt;code&gt;second&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">各日時コンポーネントプロパティのデフォルト値は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;ですが、 &lt;code&gt;weekday&lt;/code&gt; 、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt; 、 &lt;code&gt;hour&lt;/code&gt; 、 &lt;code&gt;minute&lt;/code&gt; 、 &lt;code&gt;second&lt;/code&gt; プロパティがすべて&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt; 、 &lt;code&gt;hour&lt;/code&gt; 、 &lt;code&gt;minute&lt;/code&gt; 、 &lt;code&gt;second&lt;/code&gt; は、 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df60473a24d4fcd4ef04c265bb72340d1de6ef6c" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if all component properties are &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">各日時コンポーネントプロパティのデフォルト値は&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;ですが、すべてのコンポーネントプロパティが&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; の&lt;/a&gt;場合、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、および &lt;code&gt;day&lt;/code&gt; は &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="2b0122a05c7a89cab56eaaa6e72bda4166aef309" translate="yes" xml:space="preserve">
          <source>The deprecated &lt;code&gt;&lt;strong&gt;compile&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;()&lt;/code&gt; method is used to (re-)compile a regular expression during execution of a script. It is basically the same as the &lt;code&gt;RegExp&lt;/code&gt; constructor.</source>
          <target state="translated">非推奨の &lt;code&gt;&lt;strong&gt;compile&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;()&lt;/code&gt; メソッドは、スクリプトの実行中に正規表現を（再）コンパイルするために使用されます。基本的には &lt;code&gt;RegExp&lt;/code&gt; コンストラクタと同じです。</target>
        </trans-unit>
        <trans-unit id="1a6e3caec01441368ab687b0ffe79769141bf583" translate="yes" xml:space="preserve">
          <source>The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.</source>
          <target state="translated">入れ子になった配列構造体を平坦化する深さを指定する深さレベル。デフォルトは 1 です。</target>
        </trans-unit>
        <trans-unit id="6a1ffc0dfd620e5610e05b3f9fb111a07803fd2a" translate="yes" xml:space="preserve">
          <source>The descriptor for the property being defined or modified.</source>
          <target state="translated">定義または変更されるプロパティのディスクリプタ。</target>
        </trans-unit>
        <trans-unit id="d8912c766c52dc003027b1c9513ec42e96773a76" translate="yes" xml:space="preserve">
          <source>The destructuring assignment uses similar syntax, but on the left-hand side of the assignment to define what values to unpack from the sourced variable.</source>
          <target state="translated">デストラクチャリング代入は同様の構文を使用しますが、代入の左側でソース変数からアンパックする値を定義します。</target>
        </trans-unit>
        <trans-unit id="aa3175f58177aea6864d139aca99112779859078" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;&lt;strong&gt;Array.of()&lt;/strong&gt;&lt;/code&gt; and the &lt;code&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/code&gt; constructor is in the handling of integer arguments: &lt;code&gt;&lt;strong&gt;Array.of(7)&lt;/strong&gt;&lt;/code&gt; creates an array with a single element, &lt;code&gt;7&lt;/code&gt;, whereas &lt;code&gt;&lt;strong&gt;Array(7)&lt;/strong&gt;&lt;/code&gt; creates an empty array with a &lt;code&gt;length&lt;/code&gt; property of 7 (&lt;strong&gt;Note:&lt;/strong&gt; this implies an array of &lt;code&gt;7&lt;/code&gt; empty slots, not slots with actual &lt;code&gt;undefined&lt;/code&gt; values).</source>
          <target state="translated">差 &lt;code&gt;&lt;strong&gt;Array.of()&lt;/strong&gt;&lt;/code&gt; および &lt;code&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/code&gt; コンストラクタは整数の引数の取り扱いである。 &lt;code&gt;&lt;strong&gt;Array.of(7)&lt;/strong&gt;&lt;/code&gt; は、単一の要素を持つ配列を作成し &lt;code&gt;7&lt;/code&gt; 一方、 &lt;code&gt;&lt;strong&gt;Array(7)&lt;/strong&gt;&lt;/code&gt; と、空の配列を作成し &lt;code&gt;length&lt;/code&gt; のプロパティを7（&lt;strong&gt;注：&lt;/strong&gt;これは、実際の &lt;code&gt;undefined&lt;/code&gt; 値を持つスロットではなく、 &lt;code&gt;7&lt;/code&gt; つの空のスロットの配列を意味します）。</target>
        </trans-unit>
        <trans-unit id="3480a79be927bbb5f14ae973492e695c7b92b89e" translate="yes" xml:space="preserve">
          <source>The display name of the function.</source>
          <target state="translated">機能の表示名です。</target>
        </trans-unit>
        <trans-unit id="bceca5f189abd8f44b0e66132ffed15f1fbbb42b" translate="yes" xml:space="preserve">
          <source>The division assignment operator &lt;strong&gt;divides&lt;/strong&gt; a variable by the value of the right operand and assigns the result to the variable. See the &lt;a href=&quot;arithmetic_operators#Division&quot;&gt;division operator&lt;/a&gt; for more details.</source>
          <target state="translated">除算代入演算子&lt;strong&gt;は&lt;/strong&gt;、変数を右側のオペランドの値で&lt;strong&gt;除算&lt;/strong&gt;し、結果を変数に代入します。詳細については、&lt;a href=&quot;arithmetic_operators#Division&quot;&gt;除算演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9f7cc1394d79a2c585ebb42aab308a2519ba5bda" translate="yes" xml:space="preserve">
          <source>The division operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.</source>
          <target state="translated">除算演算子は、左の演算子が配当、右の演算子が除数となるように、その演算子の商を生成します。</target>
        </trans-unit>
        <trans-unit id="702e5e606f58d4f03d2c9bb6f52b7860f6794ad9" translate="yes" xml:space="preserve">
          <source>The dot operator (&lt;code&gt;.&lt;/code&gt;) is used for &lt;a href=&quot;../operators/property_accessors&quot;&gt;property access&lt;/a&gt;. You will have to specify the name of the property that you want to access. For computed property access, you might need to change your property access from using a dot to using square brackets. These will allow you to compute an expression. Maybe you intended to do concatenation instead? A plus operator (&lt;code&gt;+&lt;/code&gt;) is needed in that case. Please see the examples below.</source>
          <target state="translated">&lt;a href=&quot;../operators/property_accessors&quot;&gt;プロパティへのアクセスに&lt;/a&gt;は、ドット演算子（ &lt;code&gt;.&lt;/code&gt; ）が使用されます。アクセスするプロパティの名前を指定する必要があります。計算されたプロパティアクセスの場合、プロパティアクセスをドットの使用から角括弧の使用に変更する必要がある場合があります。これらにより、式を計算できます。代わりに連結を行うつもりでしたか？その場合、プラス演算子（ &lt;code&gt;+&lt;/code&gt; ）が必要です。以下の例をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b463ff929e9917b779b4e606caf8f57bb7992205" translate="yes" xml:space="preserve">
          <source>The element associated with the specified key in the &lt;code&gt;WeakMap&lt;/code&gt; object. If the key can't be found, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; オブジェクト内の指定されたキーに関連付けられている要素。キーが見つからない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="c984bdef63710214dd443ae7be9a3a7a954b51b3" translate="yes" xml:space="preserve">
          <source>The element to search for.</source>
          <target state="translated">検索対象となる要素。</target>
        </trans-unit>
        <trans-unit id="61dfe96ca0e23c5dcafb50b3016bc202759318e2" translate="yes" xml:space="preserve">
          <source>The elements interval to fill is [&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;).</source>
          <target state="translated">埋める要素の間隔は[ &lt;code&gt;start&lt;/code&gt; 、 &lt;code&gt;end&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="6b2f71b15736679a743df6338568998902eadb28" translate="yes" xml:space="preserve">
          <source>The elements of the array are converted to strings using their &lt;code&gt;toLocaleString&lt;/code&gt; methods.</source>
          <target state="translated">配列の要素は、 &lt;code&gt;toLocaleString&lt;/code&gt; メソッドを使用して文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="976857b63ffa0fa8b49868356a30331d1c7ead7f" translate="yes" xml:space="preserve">
          <source>The elements to add to the array, beginning at the &lt;code&gt;start&lt;/code&gt; index. If you don't specify any elements, &lt;code&gt;splice()&lt;/code&gt; will only remove elements from the array.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; インデックスから始まる、配列に追加する要素。要素を指定しない場合、 &lt;code&gt;splice()&lt;/code&gt; は配列から要素のみを削除します。</target>
        </trans-unit>
        <trans-unit id="1e3edd07e7b05dfcea108ea0bcdc3aa9e974a7a9" translate="yes" xml:space="preserve">
          <source>The elements to add to the end of the array.</source>
          <target state="translated">配列の末尾に追加する要素。</target>
        </trans-unit>
        <trans-unit id="08d8d77140911a1a18dc3282b0bb04677e86f944" translate="yes" xml:space="preserve">
          <source>The elements to add to the front of the array.</source>
          <target state="translated">配列の先頭に追加する要素。</target>
        </trans-unit>
        <trans-unit id="964309413cb886b8ad9a40d1f14f5d85eb64b4e5" translate="yes" xml:space="preserve">
          <source>The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. The opposite behavior, where you want multiple statements, but JavaScript only allows a single one, is possible using a&lt;a href=&quot;block&quot;&gt; block statement&lt;/a&gt;; it combines several statements into a single one.</source>
          <target state="translated">空のステートメントはセミコロン（;）で、JavaScript構文で必要な場合でもステートメントが実行されないことを示します。複数のステートメントが必要ですが、JavaScriptでは1つしか許可されないという反対の動作は、&lt;a href=&quot;block&quot;&gt;ブロックステートメント&lt;/a&gt;を使用して可能です。複数のステートメントを1つのステートメントに結合します。</target>
        </trans-unit>
        <trans-unit id="1e66a9d24a75b87f328012bbcd3828a1b25f0042" translate="yes" xml:space="preserve">
          <source>The empty statement is sometimes used with loop statements. See the following example with an empty loop body:</source>
          <target state="translated">空文はループ文と一緒に使われることがあります。次の例では、空のループ本体を使用しています。</target>
        </trans-unit>
        <trans-unit id="a5e729cba7ea56759d3b8069fa2efa9020b6cc62" translate="yes" xml:space="preserve">
          <source>The end of the generator function is reached; in this case, execution of the generator ends and an &lt;code&gt;IteratorResult&lt;/code&gt; is returned to the caller in which the &lt;code&gt;value&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ジェネレータ関数の終わりに達しました。この場合、ジェネレーターの実行は終了し、 &lt;code&gt;value&lt;/code&gt; が&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;done&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; である呼び出し元に &lt;code&gt;IteratorResult&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="1fbca4f8f7dbe7cb1b69857d4c5fefd4afb8e501" translate="yes" xml:space="preserve">
          <source>The equality operator converts the operands if they are &lt;strong&gt;not of the same type&lt;/strong&gt;, then applies strict comparison. If &lt;strong&gt;both operands are objects&lt;/strong&gt;, then JavaScript compares internal references which are equal when operands refer to the same object in memory.</source>
          <target state="translated">等価演算子は、オペランド&lt;strong&gt;が同じタイプ&lt;/strong&gt;で&lt;strong&gt;ない&lt;/strong&gt;場合にオペランドを変換し、厳密な比較を適用します。場合&lt;strong&gt;、両方のオペランドがオブジェクトである&lt;/strong&gt;場合、JavaScriptはオペランドがメモリ内の同じオブジェクトを参照したときに等しい内部参照とを比較します。</target>
        </trans-unit>
        <trans-unit id="9e78bc7c4d863ae5f10706cc11d89d0d5f18cb90" translate="yes" xml:space="preserve">
          <source>The example below shows how to implement a self-archiving object. When &lt;code&gt;temperature&lt;/code&gt; property is set, the &lt;code&gt;archive&lt;/code&gt; array gets a log entry.</source>
          <target state="translated">以下の例は、自己アーカイブオブジェクトの実装方法を示しています。とき &lt;code&gt;temperature&lt;/code&gt; プロパティが設定され、 &lt;code&gt;archive&lt;/code&gt; のアレイは、ログエントリを取得します。</target>
        </trans-unit>
        <trans-unit id="2faf576348d1b75c7c5750450ed07e4e5aa37c08" translate="yes" xml:space="preserve">
          <source>The example below shows how to set getter for a property. It doesn't specify a &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt;, so a &lt;code&gt;TypeError&lt;/code&gt; will be thrown upon trying to set the &lt;code&gt;temperature&lt;/code&gt; property to &lt;code&gt;30&lt;/code&gt;. For more details see also the &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="translated">以下の例は、プロパティのゲッターを設定する方法を示しています。これは、指定されていません&lt;a href=&quot;../functions/set&quot;&gt;セッター&lt;/a&gt;ので、 &lt;code&gt;TypeError&lt;/code&gt; 設定しようとするとスローされます &lt;code&gt;temperature&lt;/code&gt; にプロパティを &lt;code&gt;30&lt;/code&gt; 。詳細については、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;ページも参照してください。</target>
        </trans-unit>
        <trans-unit id="a543c742aa81833c02ea279d11b67484a1b79a93" translate="yes" xml:space="preserve">
          <source>The examples below are throwing strings. This is considered bad practice. Always throw an instance of &lt;a href=&quot;../error&quot;&gt;Error&lt;/a&gt;. Otherwise the part doing the catching would have to make checks to see if the argument was a string or an error, and you might lose valuable information like stack traces</source>
          <target state="translated">以下の例は文字列をスローしています。これは悪い習慣だと考えられています。常に&lt;a href=&quot;../error&quot;&gt;Errorの&lt;/a&gt;インスタンスをスローします。そうでない場合、キャッチを行う部分は、引数が文字列かエラーかを確認する必要があり、スタックトレースなどの貴重な情報が失われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="bb1bcdbffff91b9c3ff449f3a1db34d1c49b45ab" translate="yes" xml:space="preserve">
          <source>The exception identifier</source>
          <target state="translated">例外識別子</target>
        </trans-unit>
        <trans-unit id="ce80bced1d577c0ec07cff7172c9496c59661560" translate="yes" xml:space="preserve">
          <source>The exception to throw. For debugging purposes, it is useful to make it an &lt;code&gt;instanceof&lt;/code&gt;&lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スローする例外。デバッグの目的で、それを&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;instanceof&lt;/code&gt; にすることは有用です。</target>
        </trans-unit>
        <trans-unit id="54ac630246e15feb3e415b9e4a0af2998597121e" translate="yes" xml:space="preserve">
          <source>The expected value to test .</source>
          <target state="translated">テストする期待値。</target>
        </trans-unit>
        <trans-unit id="2746092c21a3490e05af5310de9a2a714ec48b94" translate="yes" xml:space="preserve">
          <source>The experimental pipeline operator &lt;code&gt;|&amp;gt;&lt;/code&gt; (currently at stage 1) allows the creation of chained function calls in a readable manner. Basically, the pipeline operator provides syntactic sugar on a function call with a single argument allowing you to write</source>
          <target state="translated">実験的なパイプライン演算子 &lt;code&gt;|&amp;gt;&lt;/code&gt; （現在はステージ1）では、チェーンされた関数呼び出しを読み取り可能な方法で作成できます。基本的に、パイプライン演算子は、単一の引数を使用して関数呼び出しに構文糖を提供し、</target>
        </trans-unit>
        <trans-unit id="8f1e08828c1c1c64a2e274d4ee8e4d2a3195e57a" translate="yes" xml:space="preserve">
          <source>The exponent used to raise the &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; を上げるために使用される指数。</target>
        </trans-unit>
        <trans-unit id="ec4a21ddf5867a520cbd03423b51cdda85a33100" translate="yes" xml:space="preserve">
          <source>The exponentiation assignment operator evaluates to the result of raising first operand to the &lt;strong&gt;power&lt;/strong&gt; second operand. See the &lt;a href=&quot;arithmetic_operators#Exponentiation&quot;&gt;exponentiation operator&lt;/a&gt; for more details.</source>
          <target state="translated">べき乗代入演算子は第1オペランドを上げる結果と評価&lt;strong&gt;電力&lt;/strong&gt;第二オペランド。詳細については、&lt;a href=&quot;arithmetic_operators#Exponentiation&quot;&gt;指数演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a4176a32312ff185a693c46e64c016529338241a" translate="yes" xml:space="preserve">
          <source>The exponentiation operator returns the result of raising first operand to the power second operand. that is, &lt;code&gt;var1&lt;/code&gt;&lt;sup&gt;&lt;code&gt;var2&lt;/code&gt;&lt;/sup&gt;, in the preceding statement, where &lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt; are variables. Exponentiation operator is right associative. &lt;code&gt;a ** b ** c&lt;/code&gt; is equal to &lt;code&gt;a ** (b ** c)&lt;/code&gt;.</source>
          <target state="translated">指数演算子は、第1オペランドを第2オペランドで累乗した結果を返します。つまり、前のステートメントの &lt;code&gt;var1&lt;/code&gt; &lt;sup&gt; &lt;code&gt;var2&lt;/code&gt; で&lt;/sup&gt;、 &lt;code&gt;var1&lt;/code&gt; と &lt;code&gt;var2&lt;/code&gt; は変数です。べき乗演算子は右結合です。 &lt;code&gt;a ** b ** c&lt;/code&gt; は &lt;code&gt;a ** (b ** c)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="d0ff10bc03a45ce0e9291e3e6951c8f6cb0e9efe" translate="yes" xml:space="preserve">
          <source>The expression after the &lt;code&gt;yield&lt;/code&gt; keyword is optional and omitting it no longer throws a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;function* countAppleSales() { yield; }&lt;/code&gt;</source>
          <target state="translated">後に発現 &lt;code&gt;yield&lt;/code&gt; キーワードはオプションで、それはもはやスロー省略されていない&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;： &lt;code&gt;function* countAppleSales() { yield; }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6688448e60de73657152c36c5e46b89ebe52ab99" translate="yes" xml:space="preserve">
          <source>The expression closure syntax is a shorthand for writing simple function.</source>
          <target state="translated">式クロージャ構文は、単純な関数を書くための略語です。</target>
        </trans-unit>
        <trans-unit id="96688ce440f140a42b107e921ec490d12daf7cab" translate="yes" xml:space="preserve">
          <source>The expression to throw.</source>
          <target state="translated">投げる表現。</target>
        </trans-unit>
        <trans-unit id="520c80691ea2d4a4e974359ab8a8851d7f401d54" translate="yes" xml:space="preserve">
          <source>The expression which returns an iterable object.</source>
          <target state="translated">イテレート可能なオブジェクトを返す式。</target>
        </trans-unit>
        <trans-unit id="a8bb2c9604319c8bb786e0cb1b99192e83f0a82e" translate="yes" xml:space="preserve">
          <source>The expression whose value is to be returned. If omitted, &lt;code&gt;undefined&lt;/code&gt; is returned instead.</source>
          <target state="translated">値が返される式。省略すると、代わりに &lt;code&gt;undefined&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="6faf3645812e98e818a8b880cea16c9a0cd2b180" translate="yes" xml:space="preserve">
          <source>The first example creates a class called &lt;code&gt;Square&lt;/code&gt; from a class called &lt;code&gt;Polygon&lt;/code&gt;. This example is extracted from this &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;(source)&lt;/a&gt;.</source>
          <target state="translated">最初の例では、 &lt;code&gt;Polygon&lt;/code&gt; というクラスから &lt;code&gt;Square&lt;/code&gt; というクラスを作成します。この例は、この&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;ライブデモ&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;（ソース）&lt;/a&gt;から抜粋したものです。</target>
        </trans-unit>
        <trans-unit id="6023d482470ad1c2cdb57b2bfef6b50e5f030b1f" translate="yes" xml:space="preserve">
          <source>The first index of the element in the array; &lt;strong&gt;-1&lt;/strong&gt; if not found.</source>
          <target state="translated">配列内の要素の最初のインデックス。見つからない場合は&lt;strong&gt;-1&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="5f839bd6e11cf838ef3faf30d60b9b58c1b93524" translate="yes" xml:space="preserve">
          <source>The first time the callback is called, &lt;code&gt;accumulator&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If &lt;code&gt;initialValue&lt;/code&gt; is provided in the call to &lt;code&gt;reduce()&lt;/code&gt;, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt;, and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the first value in the array. If no &lt;code&gt;initialValue&lt;/code&gt; is provided, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to the first value in the array, and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second.</source>
          <target state="translated">コールバックが初めて呼び出されたとき、 &lt;code&gt;accumulator&lt;/code&gt; と &lt;code&gt;currentValue&lt;/code&gt; は2つの値のいずれかになります。 &lt;code&gt;reduce()&lt;/code&gt; の呼び出しで &lt;code&gt;initialValue&lt;/code&gt; が提供されている場合、 &lt;code&gt;accumulator&lt;/code&gt; は &lt;code&gt;initialValue&lt;/code&gt; に等しくなり、 &lt;code&gt;currentValue&lt;/code&gt; は配列の最初の値に等しくなります。 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、 &lt;code&gt;accumulator&lt;/code&gt; は配列の最初の値と等しくなり、 &lt;code&gt;currentValue&lt;/code&gt; は2番目の値と等しくなります。</target>
        </trans-unit>
        <trans-unit id="b780c1625556bb97e02bb2df7f774177e170222b" translate="yes" xml:space="preserve">
          <source>The first time the callback is called, &lt;code&gt;previousValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If &lt;code&gt;initialValue&lt;/code&gt; is provided in the call to &lt;code&gt;reduce&lt;/code&gt;, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the first value in the typed array. If no &lt;code&gt;initialValue&lt;/code&gt; was provided, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to the first value in the typed array and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second.</source>
          <target state="translated">コールバックが初めて呼び出されたとき、 &lt;code&gt;previousValue&lt;/code&gt; と &lt;code&gt;currentValue&lt;/code&gt; は2つの値のいずれかになります。場合 &lt;code&gt;initialValue&lt;/code&gt; 呼び出しで提供される &lt;code&gt;reduce&lt;/code&gt; し、 &lt;code&gt;previousValue&lt;/code&gt; はに等しくなり &lt;code&gt;initialValue&lt;/code&gt; と &lt;code&gt;currentValue&lt;/code&gt; は型付けされた配列の最初の値に等しくなります。 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、 &lt;code&gt;previousValue&lt;/code&gt; は型付き配列の最初の値と等しくなり、 &lt;code&gt;currentValue&lt;/code&gt; は2番目の値と等しくなります。</target>
        </trans-unit>
        <trans-unit id="70ea80c0a2f8772cd47bde2d54d604e56483dbc4" translate="yes" xml:space="preserve">
          <source>The first time the function is called, the &lt;code&gt;accumulator&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If an &lt;code&gt;initialValue&lt;/code&gt; was provided in the call to &lt;code&gt;reduceRight&lt;/code&gt;, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the last value in the array. If no &lt;code&gt;initialValue&lt;/code&gt; was provided, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to the last value in the array and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second-to-last value.</source>
          <target state="translated">関数が初めて呼び出されるとき、 &lt;code&gt;accumulator&lt;/code&gt; と &lt;code&gt;currentValue&lt;/code&gt; は2つの値のいずれかになります。場合 &lt;code&gt;initialValue&lt;/code&gt; 呼び出しで提供された &lt;code&gt;reduceRight&lt;/code&gt; 、その後 &lt;code&gt;accumulator&lt;/code&gt; に等しくなり &lt;code&gt;initialValue&lt;/code&gt; と &lt;code&gt;currentValue&lt;/code&gt; は配列の最後の値に等しくなります。 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、 &lt;code&gt;accumulator&lt;/code&gt; は配列の最後の値に等しくなり、 &lt;code&gt;currentValue&lt;/code&gt; は最後から2番目の値に等しくなります。</target>
        </trans-unit>
        <trans-unit id="fcd4413a46ca7b4a40f9a396ef6da68bf067bd4c" translate="yes" xml:space="preserve">
          <source>The first time the function is called, the &lt;code&gt;previousValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If an &lt;code&gt;initialValue&lt;/code&gt; was provided in the call to &lt;code&gt;reduceRight&lt;/code&gt;, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the last value in the typed array. If no &lt;code&gt;initialValue&lt;/code&gt; was provided, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to the last value in the typed array and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second-to-last value.</source>
          <target state="translated">関数が初めて呼び出されるとき、 &lt;code&gt;previousValue&lt;/code&gt; と &lt;code&gt;currentValue&lt;/code&gt; は2つの値のいずれかになります。場合 &lt;code&gt;initialValue&lt;/code&gt; 呼び出しで提供された &lt;code&gt;reduceRight&lt;/code&gt; 、次いで &lt;code&gt;previousValue&lt;/code&gt; はに等しくなり &lt;code&gt;initialValue&lt;/code&gt; と &lt;code&gt;currentValue&lt;/code&gt; は型付けされた配列の最後の値に等しくなります。 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、 &lt;code&gt;previousValue&lt;/code&gt; は型付き配列の最後の値に等しくなり、 &lt;code&gt;currentValue&lt;/code&gt; は最後から2番目の値に等しくなります。</target>
        </trans-unit>
        <trans-unit id="e3e25923e75e57fe4c8cd666578c83d081cde684" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
          <target state="translated">比較する最初の値。</target>
        </trans-unit>
        <trans-unit id="9b15ba4c6a8fb0f073e1bccafbc57018dbc9e83f" translate="yes" xml:space="preserve">
          <source>The first way is the &lt;code&gt;//&lt;/code&gt; comment; this makes all text following it on the same line into a comment. For example:</source>
          <target state="translated">最初の方法は &lt;code&gt;//&lt;/code&gt; コメントです。これにより、同じ行に続くすべてのテキストがコメントになります。例えば：</target>
        </trans-unit>
        <trans-unit id="9eb49b60e3be5a52747d92e8a22a6d16279f2fe8" translate="yes" xml:space="preserve">
          <source>The fixed version:</source>
          <target state="translated">確定版です。</target>
        </trans-unit>
        <trans-unit id="c8c39436f5730eb348e872deaf1fa667ab721807" translate="yes" xml:space="preserve">
          <source>The flat method removes empty slots in arrays:</source>
          <target state="translated">フラットメソッドは、配列内の空のスロットを削除します。</target>
        </trans-unit>
        <trans-unit id="6b0d4d52f56cccbfbab6df299402dd57a39fb92c" translate="yes" xml:space="preserve">
          <source>The following (contrived) example updates an object's properties from each entry in the array:</source>
          <target state="translated">次の例は、配列の各エントリからオブジェクトのプロパティを更新します。</target>
        </trans-unit>
        <trans-unit id="637b63e14680d42936462840375bb75b4e4b3acf" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;for&lt;/code&gt; cycle calculates the offset position of a node in the &lt;em&gt;[final-expression]&lt;/em&gt; section, and therefore it does not require the use of a &lt;code&gt;statement&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement&lt;/code&gt; section, a semicolon is used instead.</source>
          <target state="translated">次の &lt;code&gt;for&lt;/code&gt; サイクルは、&lt;em&gt;[final-expression]&lt;/em&gt;セクション内のノードのオフセット位置を計算するため、 &lt;code&gt;statement&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement&lt;/code&gt; セクションを使用する必要がなく、代わりにセミコロンが使用されます。</target>
        </trans-unit>
        <trans-unit id="60d614556ee4f8fb1680ea3ab2ac38d5027c5e26" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;for&lt;/code&gt; statement starts by declaring the variable &lt;code&gt;i&lt;/code&gt; and initializing it to &lt;code&gt;0&lt;/code&gt;. It checks that &lt;code&gt;i&lt;/code&gt; is less than nine, performs the two succeeding statements, and increments &lt;code&gt;i&lt;/code&gt; by 1 after each pass through the loop.</source>
          <target state="translated">次の &lt;code&gt;for&lt;/code&gt; ステートメントは、変数 &lt;code&gt;i&lt;/code&gt; を宣言して &lt;code&gt;0&lt;/code&gt; に初期化することから始まります。 &lt;code&gt;i&lt;/code&gt; が9未満であることを確認し、後続の2つのステートメントを実行し、ループを通過するたびに &lt;code&gt;i&lt;/code&gt; を1 ずつインクリメントします。</target>
        </trans-unit>
        <trans-unit id="c13b20cee0f661617bd8015d0c1f583881d10e96" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;while&lt;/code&gt; loop iterates as long as &lt;code&gt;n&lt;/code&gt; is less than three.</source>
          <target state="translated">次の &lt;code&gt;while&lt;/code&gt; ループは、 &lt;code&gt;n&lt;/code&gt; が3未満である限り繰り返されます。</target>
        </trans-unit>
        <trans-unit id="bd682eef69193f4fdb44336fd479f91bb7ada667" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;with&lt;/code&gt; statement specifies that the &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object is the default object. The statements following the &lt;code&gt;with&lt;/code&gt; statement refer to the &lt;a href=&quot;../global_objects/math/pi&quot;&gt;&lt;code&gt;PI&lt;/code&gt;&lt;/a&gt; property and the &lt;a href=&quot;../global_objects/math/cos&quot;&gt;&lt;code&gt;cos&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/math/sin&quot;&gt;&lt;code&gt;sin&lt;/code&gt;&lt;/a&gt; methods, without specifying an object. JavaScript assumes the &lt;code&gt;Math&lt;/code&gt; object for these references.</source>
          <target state="translated">次の &lt;code&gt;with&lt;/code&gt; ステートメントは、&lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;オブジェクトがデフォルトのオブジェクトであることを指定しています。 &lt;code&gt;with&lt;/code&gt; ステートメントに続くステートメントは、オブジェクトを指定せずに、&lt;a href=&quot;../global_objects/math/pi&quot;&gt; &lt;code&gt;PI&lt;/code&gt; &lt;/a&gt;プロパティと&lt;a href=&quot;../global_objects/math/cos&quot;&gt; &lt;code&gt;cos&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../global_objects/math/sin&quot;&gt; &lt;code&gt;sin&lt;/code&gt; &lt;/a&gt;メソッドを参照します。JavaScriptはこれらの参照に対して &lt;code&gt;Math&lt;/code&gt; オブジェクトを想定しています。</target>
        </trans-unit>
        <trans-unit id="5b9e90596ec38fff87485beade9e5f8deb49143a" translate="yes" xml:space="preserve">
          <source>The following are only reserved when they are found in module code:</source>
          <target state="translated">以下はモジュールコードにある場合のみ予約されています。</target>
        </trans-unit>
        <trans-unit id="c0c352e275f96b24c86f4d19b3dc013b58dfed6e" translate="yes" xml:space="preserve">
          <source>The following are only reserved when they are found in strict mode code:</source>
          <target state="translated">以下は、厳密なモードコードで見つかった場合のみ予約されます。</target>
        </trans-unit>
        <trans-unit id="94a1f4c078dadf907ee9c9a9ba75dd45389036ba" translate="yes" xml:space="preserve">
          <source>The following are reserved as future keywords by older ECMAScript specifications (ECMAScript 1 till 3).</source>
          <target state="translated">以下は、旧ECMAScript仕様(ECMAScript 1~3)で将来のキーワードとして予約されています。</target>
        </trans-unit>
        <trans-unit id="14042eda201db9dbf94f4c7e43f79039471fa58d" translate="yes" xml:space="preserve">
          <source>The following are reserved as future keywords by the ECMAScript specification. They have no special functionality at present, but they might at some future time, so they cannot be used as identifiers.</source>
          <target state="translated">以下は、ECMAScript仕様で将来のキーワードとして予約されています。これらは現在のところ特別な機能を持っていませんが、将来的にはあるかもしれないので、識別子として使用することはできません。</target>
        </trans-unit>
        <trans-unit id="a4e1da54087efaf8adb80147425713d13e38e3f4" translate="yes" xml:space="preserve">
          <source>The following assigns the &lt;code&gt;toString()&lt;/code&gt; value of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object to &lt;code&gt;myVar&lt;/code&gt;:</source>
          <target state="translated">次の例では、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;toString()&lt;/code&gt; 値を &lt;code&gt;myVar&lt;/code&gt; に割り当てています。</target>
        </trans-unit>
        <trans-unit id="c08ac54043b648876203b3e3803e638644ac0bbc" translate="yes" xml:space="preserve">
          <source>The following code also uses &lt;code&gt;break&lt;/code&gt; statements with labeled blocks but generates a Syntax Error because its &lt;code&gt;break&lt;/code&gt; statement is within &lt;code&gt;block_1&lt;/code&gt; but references &lt;code&gt;block_2&lt;/code&gt;. A &lt;code&gt;break&lt;/code&gt; statement must always be nested within any label it references.</source>
          <target state="translated">次のコードは、また、使用して &lt;code&gt;break&lt;/code&gt; ラベルされたブロックとの声明をするが、そのため、構文エラーを発生させる &lt;code&gt;break&lt;/code&gt; 文は内にある &lt;code&gt;block_1&lt;/code&gt; が、参照 &lt;code&gt;block_2&lt;/code&gt; 。 &lt;code&gt;break&lt;/code&gt; ステートメントは常にそれが参照する任意のラベル内にネストされなければなりません。</target>
        </trans-unit>
        <trans-unit id="bc61c85b553d7e6d7463201fbcc2c38c73015b80" translate="yes" xml:space="preserve">
          <source>The following code concatenates nested arrays and demonstrates retention of references:</source>
          <target state="translated">次のコードは、入れ子になった配列を連結し、参照を保持することを示しています。</target>
        </trans-unit>
        <trans-unit id="721189f7a2b285c23287b114247606fc04335c83" translate="yes" xml:space="preserve">
          <source>The following code concatenates three arrays:</source>
          <target state="translated">次のコードは3つの配列を連結しています。</target>
        </trans-unit>
        <trans-unit id="88e4d6b9479b0ed44364219826710b43fc799fde" translate="yes" xml:space="preserve">
          <source>The following code concatenates three values to an array:</source>
          <target state="translated">次のコードは、3 つの値を配列に連結します。</target>
        </trans-unit>
        <trans-unit id="d88678328d1fce2a8f610a73f6b66390f32726cb" translate="yes" xml:space="preserve">
          <source>The following code concatenates two arrays:</source>
          <target state="translated">次のコードは2つの配列を連結しています。</target>
        </trans-unit>
        <trans-unit id="110cf46adcf71aba1fd2a9d72394b04b71419aa9" translate="yes" xml:space="preserve">
          <source>The following code creates a &lt;code&gt;Function&lt;/code&gt; object that takes two arguments.</source>
          <target state="translated">次のコードは、2つの引数を取る &lt;code&gt;Function&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="a9849a78b721a404fa7122bbef9cb4e417ecb54b" translate="yes" xml:space="preserve">
          <source>The following code creates a copy of a given object. There are different ways to create a copy of an object; the following is just one way and is presented to explain how &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; works by using ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; meta property functions.</source>
          <target state="translated">次のコードは、指定されたオブジェクトのコピーを作成します。オブジェクトのコピーを作成する方法はいくつかあります。以下は1つの方法であり、ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; メタプロパティ関数を使用して &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; がどのように機能するかを説明するために提示されています。</target>
        </trans-unit>
        <trans-unit id="71484bb1315e7ead24501719aa5731a2deb6cc7d" translate="yes" xml:space="preserve">
          <source>The following code creates an object type &lt;code&gt;Car&lt;/code&gt; and an instance of that object type, &lt;code&gt;mycar&lt;/code&gt;. The &lt;code&gt;instanceof&lt;/code&gt; operator demonstrates that the &lt;code&gt;mycar&lt;/code&gt; object is of type &lt;code&gt;Car&lt;/code&gt; and of type &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">次のコードは、オブジェクトタイプ &lt;code&gt;Car&lt;/code&gt; とそのオブジェクトタイプ &lt;code&gt;mycar&lt;/code&gt; のインスタンスを作成します。 &lt;code&gt;instanceof&lt;/code&gt; はオペレータは、ことを示して &lt;code&gt;mycar&lt;/code&gt; オブジェクトのタイプがある &lt;code&gt;Car&lt;/code&gt; と型の &lt;code&gt;Object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22f1f0dc224fbf380d776e34e3dd118d0155b6b5" translate="yes" xml:space="preserve">
          <source>The following code creates and assigns &lt;code&gt;dogToString()&lt;/code&gt; to override the default &lt;code&gt;toString()&lt;/code&gt; method. This function generates a string containing the name, breed, color, and sex of the object, in the form &quot;&lt;code&gt;property = value;&lt;/code&gt;&quot;.</source>
          <target state="translated">次のコードは、 &lt;code&gt;dogToString()&lt;/code&gt; を作成して割り当て、デフォルトの &lt;code&gt;toString()&lt;/code&gt; メソッドをオーバーライドします。この関数は、オブジェクトの名前、品種、色、および性別を含む文字列を「 &lt;code&gt;property = value;&lt;/code&gt; 」の形式で生成します。</target>
        </trans-unit>
        <trans-unit id="f9ae4575b00eb655fe2bc58c8c2ed78bc0bf00a2" translate="yes" xml:space="preserve">
          <source>The following code creates the &lt;code&gt;myFish&lt;/code&gt; array containing four elements, then removes its last element.</source>
          <target state="translated">次のコードは、4つの要素を含む &lt;code&gt;myFish&lt;/code&gt; 配列を作成し、最後の要素を削除します。</target>
        </trans-unit>
        <trans-unit id="8ee25846ad2f6848444fd67100bb8495aeb28612" translate="yes" xml:space="preserve">
          <source>The following code creates the &lt;code&gt;sports&lt;/code&gt; array containing two elements, then appends two elements to it. The &lt;code&gt;total&lt;/code&gt; variable contains the new length of the array.</source>
          <target state="translated">次のコードは、2つの要素を含む &lt;code&gt;sports&lt;/code&gt; 配列を作成し、それに2つの要素を追加します。 &lt;code&gt;total&lt;/code&gt; 変数は、配列の新しい長さが含まれています。</target>
        </trans-unit>
        <trans-unit id="5413c9f47f7525067295e645eb7a51acc99bc3ba" translate="yes" xml:space="preserve">
          <source>The following code declares a function that returns the total amount of sales, when given the number of units sold of products &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">次のコードは、製品の販売数 &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;c&lt;/code&gt; が指定された場合に、販売の合計金額を返す関数を宣言しています。</target>
        </trans-unit>
        <trans-unit id="6ac5f417776932fa98a727d7e5e02064aafd61d7" translate="yes" xml:space="preserve">
          <source>The following code defines the &lt;code&gt;Dog&lt;/code&gt; object type and creates &lt;code&gt;theDog&lt;/code&gt;, an object of type &lt;code&gt;Dog&lt;/code&gt;:</source>
          <target state="translated">次のコードは、定義 &lt;code&gt;Dog&lt;/code&gt; オブジェクト・タイプを作成し、 &lt;code&gt;theDog&lt;/code&gt; 、タイプのオブジェクト &lt;code&gt;Dog&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="bfb04ee46c737543b1cf531796942fcab6e602ea" translate="yes" xml:space="preserve">
          <source>The following code displays the &lt;code&gt;myFish&lt;/code&gt; array before and after removing its first element. It also displays the removed element:</source>
          <target state="translated">次のコードは、最初の要素を削除する前後の &lt;code&gt;myFish&lt;/code&gt; 配列を表示します。削除された要素も表示されます。</target>
        </trans-unit>
        <trans-unit id="ffdac7d52063387499a1184a4731dd0d49cf9966" translate="yes" xml:space="preserve">
          <source>The following code divides two numeric values. If the result is greater than or equal to &lt;code&gt;MIN_VALUE&lt;/code&gt;, the &lt;code&gt;func1&lt;/code&gt; function is called; otherwise, the &lt;code&gt;func2&lt;/code&gt; function is called.</source>
          <target state="translated">次のコードは、2つの数値を除算します。結果が &lt;code&gt;MIN_VALUE&lt;/code&gt; 以上の場合、 &lt;code&gt;func1&lt;/code&gt; 関数が呼び出されます。それ以外の場合は、 &lt;code&gt;func2&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4aebfbac775644f52742648c8188228c29aec3c2" translate="yes" xml:space="preserve">
          <source>The following code improperly initializes the proxy. The &lt;code&gt;target&lt;/code&gt; in Proxy initialization must itself be a valid constructor for the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">次のコードは、プロキシを不適切に初期化します。プロキシ初期化の &lt;code&gt;target&lt;/code&gt; 自体が、 &lt;code&gt;new&lt;/code&gt; 演算子の有効なコンストラクタである必要があります。</target>
        </trans-unit>
        <trans-unit id="ac713b40525625199d7a101c2127f6d4f76c80da" translate="yes" xml:space="preserve">
          <source>The following code is the declaration of an example generator function.</source>
          <target state="translated">以下のコードは、ジェネレータ関数の例の宣言です。</target>
        </trans-unit>
        <trans-unit id="1b2d53d50b851e948adb1e6d5da2847f3cf5987b" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in a &lt;code&gt;Set&lt;/code&gt; object:</source>
          <target state="translated">次のコードは、 &lt;code&gt;Set&lt;/code&gt; オブジェクトの各要素の行を記録します。</target>
        </trans-unit>
        <trans-unit id="0cbf9e164e68b93693f30543959a7f06e0dec2e9" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in a typed array:</source>
          <target state="translated">以下のコードでは、型付き配列の各要素の行をログに記録しています。</target>
        </trans-unit>
        <trans-unit id="9572c259a051431f4f450301d23fc521a93a28a7" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in an &lt;code&gt;Map&lt;/code&gt; object:</source>
          <target state="translated">次のコードは、 &lt;code&gt;Map&lt;/code&gt; オブジェクトの各要素の行を記録します。</target>
        </trans-unit>
        <trans-unit id="05e676495dcfad5f9d42d6c2de9e3bca1f4630c4" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in an array:</source>
          <target state="translated">以下のコードでは、配列の各要素ごとに行をログに記録しています。</target>
        </trans-unit>
        <trans-unit id="555c0c32448becb397f810790a2420788ccadd71" translate="yes" xml:space="preserve">
          <source>The following code multiplies two numeric values. If the result is less than or equal to &lt;code&gt;MAX_VALUE&lt;/code&gt;, the &lt;code&gt;func1&lt;/code&gt; function is called; otherwise, the &lt;code&gt;func2&lt;/code&gt; function is called.</source>
          <target state="translated">次のコードは、2つの数値を乗算します。結果が &lt;code&gt;MAX_VALUE&lt;/code&gt; 以下の場合、 &lt;code&gt;func1&lt;/code&gt; 関数が呼び出されます。それ以外の場合は、 &lt;code&gt;func2&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1dad9ae9491ee1eb3386f8bbf689412c9a122c35" translate="yes" xml:space="preserve">
          <source>The following code prints the values of the diagonal elements in the array:</source>
          <target state="translated">次のコードは、配列の対角線要素の値を表示します。</target>
        </trans-unit>
        <trans-unit id="446e09962f6db0b1d8da76d9107b976aea69c91f" translate="yes" xml:space="preserve">
          <source>The following code shows examples of the &lt;code&gt;!&lt;/code&gt; (logical NOT) operator.</source>
          <target state="translated">次のコードは、 &lt;code&gt;!&lt;/code&gt; （論理NOT）演算子。</target>
        </trans-unit>
        <trans-unit id="657425e8ce502911d7f0c1f47f8e38c9591acb40" translate="yes" xml:space="preserve">
          <source>The following code shows examples of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (logical AND) operator.</source>
          <target state="translated">次のコードは、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; （論理AND）演算子の例を示しています。</target>
        </trans-unit>
        <trans-unit id="087b529d19673cc07b3d2ea0403068125326b88d" translate="yes" xml:space="preserve">
          <source>The following code shows examples of the &lt;code&gt;||&lt;/code&gt; (logical OR) operator.</source>
          <target state="translated">次のコードは、 &lt;code&gt;||&lt;/code&gt; の例を示しています。（論理OR）演算子。</target>
        </trans-unit>
        <trans-unit id="6128024108440d20cd751bb31df0569a7704752f" translate="yes" xml:space="preserve">
          <source>The following code shows how map works when a function requiring one argument is used with it. The argument will automatically be assigned from each element of the array as map loops through the original array.</source>
          <target state="translated">次のコードは、1 つの引数を必要とする関数を使用した場合の map の動作を示しています。引数は、map が元の配列をループする際に、配列の各要素から自動的に代入されます。</target>
        </trans-unit>
        <trans-unit id="93cbd7a9b13ccbb2681320f45c12dc3e14c7a3b6" translate="yes" xml:space="preserve">
          <source>The following code shows how map works when a function requiring one argument is used with it. The argument will automatically be assigned to each element of the typed array as map loops through the original typed array.</source>
          <target state="translated">次のコードは、1 つの引数を必要とする関数を使用した場合の map の動作を示しています。引数は、型付き配列の各要素に自動的に代入され、元の型付き配列をループするようになります。</target>
        </trans-unit>
        <trans-unit id="23544ad4adcdcbd6a5e3021ebfaf4350ede55f3a" translate="yes" xml:space="preserve">
          <source>The following code takes a typed array and creates a new typed array containing the square roots of the numbers in the first typed array.</source>
          <target state="translated">以下のコードは,型付き配列を受け取り,最初の型付き配列に含まれる数値の平方根を含む新しい型付き配列を作成します.</target>
        </trans-unit>
        <trans-unit id="91dfb78c282609f0ca90e823f00a7c1bcabc053d" translate="yes" xml:space="preserve">
          <source>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.</source>
          <target state="translated">次のコードは、数値の配列を取り、最初の配列に含まれる数値の平方根を含む新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="990fbd2a82909cc731cb6de1db1e4e7e5988d7ca" translate="yes" xml:space="preserve">
          <source>The following code takes an array of objects and creates a new array containing the newly reformatted objects.</source>
          <target state="translated">以下のコードは、オブジェクトの配列を取り、新たに再フォーマットされたオブジェクトを含む新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="b6a73ccf50bc94f930d475afad31b662aad507c8" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のコードは、&lt;a href=&quot;../../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;トラップします。</target>
        </trans-unit>
        <trans-unit id="a4ae609986c2bf700187679a0155e67f383001d4" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のコードは、&lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; を&lt;/a&gt;トラップします。</target>
        </trans-unit>
        <trans-unit id="d7fbdba357c15d5ef4893b679bc519284fa94e89" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のコードは、&lt;a href=&quot;../../object/getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; を&lt;/a&gt;トラップします。</target>
        </trans-unit>
        <trans-unit id="2316ce910c2a16a8f31a8d35f44ce184b5d5110b" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のコードは、&lt;a href=&quot;../../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; を&lt;/a&gt;トラップします。</target>
        </trans-unit>
        <trans-unit id="f43f449540c9caa7886889ce45d41a2cbc1b2b1d" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のコードは、&lt;a href=&quot;../../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; を&lt;/a&gt;トラップします。</target>
        </trans-unit>
        <trans-unit id="36b83b244b13ce0e00fbb489c5813644ab6b0abf" translate="yes" xml:space="preserve">
          <source>The following code traps a function call.</source>
          <target state="translated">以下のコードは、関数呼び出しをトラップしています。</target>
        </trans-unit>
        <trans-unit id="4ee4a393b6cbc0d511ffdc59d8483abe6e9b1be3" translate="yes" xml:space="preserve">
          <source>The following code traps getting a property value.</source>
          <target state="translated">以下のコードは、プロパティ値の取得をトラップしています。</target>
        </trans-unit>
        <trans-unit id="ab8ce6ea525ee3a1bd25238d16dafa8cfd2ab091" translate="yes" xml:space="preserve">
          <source>The following code traps setting a property value.</source>
          <target state="translated">以下のコードは、プロパティ値の設定をトラップしています。</target>
        </trans-unit>
        <trans-unit id="4a3d5a01f344846da6a7dad4757ca86f93853d89" translate="yes" xml:space="preserve">
          <source>The following code traps the &lt;a href=&quot;../../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">次のコードは、&lt;a href=&quot;../../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;演算子をトラップします。</target>
        </trans-unit>
        <trans-unit id="e483290e7f76f08d2648b23c16bc2204b6ff38ba" translate="yes" xml:space="preserve">
          <source>The following code traps the &lt;a href=&quot;../../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">次のコードは、&lt;a href=&quot;../../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子をトラップします。</target>
        </trans-unit>
        <trans-unit id="25504055279ad082d3562335a453315f18588211" translate="yes" xml:space="preserve">
          <source>The following code traps the &lt;a href=&quot;../../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">次のコードは、&lt;a href=&quot;../../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子をトラップします。</target>
        </trans-unit>
        <trans-unit id="79f411fcb5d68a6edc77d42c81be12111b8fbca2" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;break&lt;/code&gt; statements with labeled blocks. A &lt;code&gt;break&lt;/code&gt; statement must be nested within any label it references. Notice that &lt;code&gt;inner_block&lt;/code&gt; is nested within &lt;code&gt;outer_block&lt;/code&gt;.</source>
          <target state="translated">次のコードは、ラベル付きブロックのある &lt;code&gt;break&lt;/code&gt; ステートメントを使用しています。 &lt;code&gt;break&lt;/code&gt; ステートメントは、それが参照する任意のラベル内にネストされなければなりません。ことに注意してください &lt;code&gt;inner_block&lt;/code&gt; が内にネストされ &lt;code&gt;outer_block&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a5972c72258c23f426a231b566e63137af62bd5" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;instanceof&lt;/code&gt; to demonstrate that &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt; objects are also of type &lt;code&gt;Object&lt;/code&gt; (they are derived from &lt;code&gt;Object&lt;/code&gt;).</source>
          <target state="translated">次のコードは、 &lt;code&gt;instanceof&lt;/code&gt; を使用して、 &lt;code&gt;String&lt;/code&gt; オブジェクトと &lt;code&gt;Date&lt;/code&gt; オブジェクトも &lt;code&gt;Object&lt;/code&gt; 型であることを示しています（これらは &lt;code&gt;Object&lt;/code&gt; から派生しています）。</target>
        </trans-unit>
        <trans-unit id="ef022a2af0822c75bf6d97a3907794c965929c70" translate="yes" xml:space="preserve">
          <source>The following code violates an invariant.</source>
          <target state="translated">以下のコードは不変量に違反しています。</target>
        </trans-unit>
        <trans-unit id="2cccfb58d874a9ff644e87a991d031d323732fb2" translate="yes" xml:space="preserve">
          <source>The following code violates the invariant.</source>
          <target state="translated">以下のコードは、不変に違反しています。</target>
        </trans-unit>
        <trans-unit id="be65d173a4ebcaa7bda004853274c64fd29e4be8" translate="yes" xml:space="preserve">
          <source>The following code was used to check the value of &lt;code&gt;arguments.caller&lt;/code&gt; in a function, but doesn't work anymore.</source>
          <target state="translated">次のコードは、関数の &lt;code&gt;arguments.caller&lt;/code&gt; の値をチェックするために使用されましたが、機能しなくなりました。</target>
        </trans-unit>
        <trans-unit id="f66a2585b75f449626494103e61d755dfb30114c" translate="yes" xml:space="preserve">
          <source>The following code will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次のコードは&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします：</target>
        </trans-unit>
        <trans-unit id="7814b38c4660f2f789f848f5e4d62c2ad7b2f22d" translate="yes" xml:space="preserve">
          <source>The following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the &lt;a href=&quot;../array/keys&quot;&gt;&lt;code&gt;Array.prototype.keys()&lt;/code&gt;&lt;/a&gt; method was introduced. That means that inside &lt;code&gt;with&lt;/code&gt; environment &quot;keys&quot; would now be the method and not the variable. That's when the &lt;code&gt;unscopable&lt;/code&gt;s symbol was introduced. A built-in &lt;code&gt;unscopables&lt;/code&gt; setting is implemented as &lt;a href=&quot;../array/@@unscopables&quot;&gt;&lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt;&lt;/a&gt; to prevent that some of the Array methods are being scoped into the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">次のコードはES5以下で正常に動作します。ただし、ECMAScript 2015以降では、&lt;a href=&quot;../array/keys&quot;&gt; &lt;code&gt;Array.prototype.keys()&lt;/code&gt; &lt;/a&gt;メソッドが導入されました。つまり &lt;code&gt;with&lt;/code&gt; 環境内の「キー」はメソッドではなく変数になるということです。これは、 &lt;code&gt;unscopable&lt;/code&gt; のsシンボルが導入されたときです。組み込みの &lt;code&gt;unscopables&lt;/code&gt; 設定は&lt;a href=&quot;../array/@@unscopables&quot;&gt; &lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt; &lt;/a&gt;として実装され、一部のArrayメソッドが &lt;code&gt;with&lt;/code&gt; ステートメントにスコープされないようにします。</target>
        </trans-unit>
        <trans-unit id="65ed457c8a763018d44cf10f276cc37398e395c2" translate="yes" xml:space="preserve">
          <source>The following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Array.prototype.keys()&lt;/code&gt;&lt;/a&gt; method was introduced. That means that inside &lt;code&gt;with&lt;/code&gt; environments, &quot;keys&quot; would now be the method and not the variable. This is where now the built-in &lt;code&gt;@@unscopables&lt;/code&gt;&lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt; symbol property comes into play and prevents that some of the Array methods are being scoped into the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">次のコードはES5以下で正常に動作します。ただし、ECMAScript 2015以降では、&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Array.prototype.keys()&lt;/code&gt; &lt;/a&gt;メソッドが導入されました。つまり &lt;code&gt;with&lt;/code&gt; 環境の内部では、「キー」がメソッドではなく変数になるということです。ここで、組み込みの &lt;code&gt;@@unscopables&lt;/code&gt; &lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt; シンボルプロパティが機能し、一部のArrayメソッドが &lt;code&gt;with&lt;/code&gt; ステートメントにスコープされないようにします。</target>
        </trans-unit>
        <trans-unit id="cb142fc147e63e6c8e71931fb3e4597a4a15e0f3" translate="yes" xml:space="preserve">
          <source>The following composite operation involving Booleans:</source>
          <target state="translated">ブーリアンを含む次のような合成操作を行います。</target>
        </trans-unit>
        <trans-unit id="f56868c1c01d0df57c3b0204e374f8e3a30a51f9" translate="yes" xml:space="preserve">
          <source>The following comprehension takes an array of numbers and creates a new array of the double of each of those numbers.</source>
          <target state="translated">以下の理解度は、数値の配列を取り、それらの数値のそれぞれの倍数の新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="8c8184ab9029406f0c35972bd8af1634a5c88cd5" translate="yes" xml:space="preserve">
          <source>The following creates a chess board as a two-dimensional array of strings. The first move is made by copying the 'p' in (6,4) to (4,4). The old position (6,4) is made blank.</source>
          <target state="translated">以下は、チェス盤を文字列の二次元配列として作成します。最初の手は、(6,4)の'p'を(4,4)にコピーします。古い位置(6,4)は空白にします。</target>
        </trans-unit>
        <trans-unit id="22448211d9daeba006917d76dca51732108327f5" translate="yes" xml:space="preserve">
          <source>The following encodes &lt;code&gt;~314&lt;/code&gt;, i.e. the ones' complement of &lt;code&gt;314&lt;/code&gt;:</source>
          <target state="translated">以下は &lt;code&gt;~314&lt;/code&gt; エンコードします。つまり、 &lt;code&gt;314&lt;/code&gt; の補数です。</target>
        </trans-unit>
        <trans-unit id="17470c9f776b2250318b28cf1d1ffc7e6f3a5e08" translate="yes" xml:space="preserve">
          <source>The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;view it live also&lt;/a&gt;) fetches and instantiates the loaded memory.wasm byte code using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method, while importing the memory created in the line above. It then stores some values in that memory, then exports a function and uses it to sum some values.</source>
          <target state="translated">次の例（GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt;を参照し、&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;ライブ&lt;/a&gt;で表示する）は、上記の行で作成されたメモリをインポートしながら、&lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用してロードされたmemory.wasmバイトコードをフェッチしてインスタンス化します。次に、そのメモリにいくつかの値を格納し、関数をエクスポートし、それを使用していくつかの値を合計します。</target>
        </trans-unit>
        <trans-unit id="981dbbb700347ec94c9580cfc5638be5b3b0be36" translate="yes" xml:space="preserve">
          <source>The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.html&quot;&gt;table.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table.html&quot;&gt;view it live&lt;/a&gt; also) compiles and instantiates the loaded table.wasm byte code using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method. It then retrieves the references stored in the exported table.</source>
          <target state="translated">次の例（GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.html&quot;&gt;table.html&lt;/a&gt;を参照し、&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table.html&quot;&gt;ライブ&lt;/a&gt;で表示する）は、&lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、ロードされたtable.wasmバイトコードをコンパイルおよびインスタンス化します。次に、エクスポートされたテーブルに格納されている参照を取得します。</target>
        </trans-unit>
        <trans-unit id="7f7270c5a457873286226e276262e42332f056a3" translate="yes" xml:space="preserve">
          <source>The following example (see imports.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/imports.html&quot;&gt;source code&lt;/a&gt;; &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/imports.html&quot;&gt;see it live also&lt;/a&gt;) compiles the loaded simple.wasm module. This module is then queried for its imports.</source>
          <target state="translated">次の例（imports.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/imports.html&quot;&gt;ソースコードを&lt;/a&gt;&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/imports.html&quot;&gt;参照してください&lt;/a&gt;。また、ライブで参照してください）は、ロードされたsimple.wasmモジュールをコンパイルします。このモジュールは、そのインポートについて照会されます。</target>
        </trans-unit>
        <trans-unit id="8be40e21a9e877159efe0525f36b240712dbcbd2" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/compile-streaming.html&quot;&gt;compile-streaming.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/compile-streaming.html&quot;&gt;view it live&lt;/a&gt; also) directly streams a .wasm module from an underlying source then compiles it to a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object. Because the &lt;code&gt;compileStreaming()&lt;/code&gt; function accepts a promise for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object, you can directly pass it a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt;&lt;/a&gt; call, and it will pass the response into the function when it fulfills.</source>
          <target state="translated">次の例（GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/compile-streaming.html&quot;&gt;compile-streaming.html&lt;/a&gt;デモを参照し、&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/compile-streaming.html&quot;&gt;ライブ&lt;/a&gt;で表示する）は、基になるソースから.wasmモジュールを直接ストリーミングしてから、&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;オブジェクトにコンパイルします。ので &lt;code&gt;compileStreaming()&lt;/code&gt; 関数は、のために約束受け入れる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;オブジェクトを、あなたが直接それを渡すことができます&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt; &lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt; &lt;/a&gt;の呼び出しを、それが満たしたときにそれが機能に応答を渡します。</target>
        </trans-unit>
        <trans-unit id="8fbc142b33431162d5fa601429ab3ef586de33d3" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;view it live&lt;/a&gt; also) compiles the loaded simple.wasm byte code using the &lt;a href=&quot;../compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">次の例（GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt;デモを参照し、&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;ライブ&lt;/a&gt;で表示する）は、&lt;a href=&quot;../compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用してロードされたsimple.wasmバイトコードをコンパイルし、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage（）&lt;/a&gt;を使用して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;ワーカーに&lt;/a&gt;送信します。</target>
        </trans-unit>
        <trans-unit id="a4be8e69110269721fd01b14c26ce7095dc1f463" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;view it live&lt;/a&gt; also) compiles the loaded simple.wasm byte code using the &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">次の例（GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt;デモを参照し、&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;ライブ&lt;/a&gt;で表示する）は、&lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用してロードされたsimple.wasmバイトコードをコンパイルし、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage（）&lt;/a&gt;を使用して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;ワーカーに&lt;/a&gt;送信します。</target>
        </trans-unit>
        <trans-unit id="55ed400983182592d2bee361ee8810fd4e6d4f77" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;view it live&lt;/a&gt; also) directly streams a .wasm module from an underlying source then compiles and instantiates it, the promise fulfilling with a &lt;code&gt;ResultObject&lt;/code&gt;. Because the &lt;code&gt;instantiateStreaming()&lt;/code&gt; function accepts a promise for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object, you can directly pass it a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt;&lt;/a&gt; call, and it will pass the response into the function when it fulfills.</source>
          <target state="translated">次の例（GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt;デモを参照し、&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;ライブ&lt;/a&gt;で表示する）は、基礎となるソースから.wasmモジュールを直接ストリーミングしてから、コンパイルしてインスタンス化し、 &lt;code&gt;ResultObject&lt;/code&gt; でプロミスを実現します。ので &lt;code&gt;instantiateStreaming()&lt;/code&gt; 関数は、のために約束受け入れる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;オブジェクトを、あなたが直接それを渡すことができます&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt; &lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt; &lt;/a&gt;の呼び出しを、それが満たしたときにそれが機能に応答を渡します。</target>
        </trans-unit>
        <trans-unit id="074b310b066d2912c353138074d2c4298ef9da96" translate="yes" xml:space="preserve">
          <source>The following example (see table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;source code&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;live version&lt;/a&gt;) creates a new WebAssembly Table instance with an initial size of 2 elements. We then print out the table length and contents of the two indexes (retrieved via &lt;a href=&quot;table/get&quot;&gt;&lt;code&gt;Table.prototype.get()&lt;/code&gt;&lt;/a&gt; to show that the length is two and both elements are &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例（table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;ソースコード&lt;/a&gt;と&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;ライブバージョンを&lt;/a&gt;参照）は、初期サイズが2要素の新しいWebAssembly Tableインスタンスを作成します。次に、テーブルの長さと2つのインデックスの内容を出力します（&lt;a href=&quot;table/get&quot;&gt; &lt;code&gt;Table.prototype.get()&lt;/code&gt; で&lt;/a&gt;取得して、長さが2で、両方の要素が&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; である&lt;/a&gt;ことを示します）。</target>
        </trans-unit>
        <trans-unit id="51d5684213f352c1a7b4119e2be51a68e2b42266" translate="yes" xml:space="preserve">
          <source>The following example (see table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;source code&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;live version&lt;/a&gt;) creates a new WebAssembly Table instance with an initial size of 2 references. We then print out the table length and contents of the two indexes (retrieved via &lt;a href=&quot;get&quot;&gt;&lt;code&gt;Table.prototype.get()&lt;/code&gt;&lt;/a&gt;) to show that the length is two, and the indexes currently contain no function references (they currently return &lt;a href=&quot;../../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">次の例（table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;ソースコード&lt;/a&gt;と&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;ライブバージョンを&lt;/a&gt;参照）は、初期サイズが2参照の新しいWebAssembly Tableインスタンスを作成します。次に、テーブルの長さと2つのインデックスの内容（&lt;a href=&quot;get&quot;&gt; &lt;code&gt;Table.prototype.get()&lt;/code&gt; で&lt;/a&gt;取得）を出力して、長さが2であり、インデックスに現在関数参照が含まれていない（現在&lt;a href=&quot;../../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返している）ことを示します。</target>
        </trans-unit>
        <trans-unit id="e90898c64d263a3ab47f788727fb41a2af7847f1" translate="yes" xml:space="preserve">
          <source>The following example (see the custom-section.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/other-examples/custom-section.html&quot;&gt;source&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/other-examples/custom-section.html&quot;&gt;live example&lt;/a&gt;) compiles the loaded simple-name-section.wasm byte code.</source>
          <target state="translated">次の例は、（カスタムsection.html参照&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/other-examples/custom-section.html&quot;&gt;元&lt;/a&gt;と&lt;a href=&quot;https://mdn.github.io/webassembly-examples/other-examples/custom-section.html&quot;&gt;実際の例を&lt;/a&gt;）ロードされたシンプルな名-section.wasmのバイトコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="8925708cf4fd51b195340d4fd06ff264de3c4d2c" translate="yes" xml:space="preserve">
          <source>The following example (see the validate.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/validate.html&quot;&gt;source code&lt;/a&gt;, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/validate.html&quot;&gt;see it live too&lt;/a&gt;) fetches a .wasm module and converts it into a typed array. The &lt;code&gt;validate()&lt;/code&gt; method is then used to check whether the module is valid.</source>
          <target state="translated">次の例（validate.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/validate.html&quot;&gt;ソースコード&lt;/a&gt;&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/validate.html&quot;&gt;とライブライブ&lt;/a&gt;を参照）は、.wasmモジュールをフェッチし、型付き配列に変換します。次に、 &lt;code&gt;validate()&lt;/code&gt; メソッドを使用して、モジュールが有効かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="67dcad8447c089842b32b6c84f713c3990f8a460" translate="yes" xml:space="preserve">
          <source>The following example assigns the day portion of the current date to the variable &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">次の例では、現在の日付の日の部分を変数 &lt;code&gt;day&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="329ba32469ae5d1cee5124ac53f13a8d2e5ee8c4" translate="yes" xml:space="preserve">
          <source>The following example assigns the four-digit value of the current year to the variable &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">次の例では、現在の年の4桁の値を変数 &lt;code&gt;year&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="42327da23d2132b0665c321f6e511d64099c2105" translate="yes" xml:space="preserve">
          <source>The following example assigns the hours portion of the current time to the variable &lt;code&gt;hours&lt;/code&gt;.</source>
          <target state="translated">次の例では、現在の時間の時間部分を変数 &lt;code&gt;hours&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="f5cf3c20aaeef2c685c52ccdf2761f9b637b94e2" translate="yes" xml:space="preserve">
          <source>The following example assigns the milliseconds portion of the current time to the variable &lt;code&gt;milliseconds&lt;/code&gt;.</source>
          <target state="translated">次の例では、現在の時刻のミリ秒の部分を変数 &lt;code&gt;milliseconds&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="93f95efff30459ece8c91e6f0e8eea1145c0f574" translate="yes" xml:space="preserve">
          <source>The following example assigns the milliseconds portion of the current time to the variable &lt;code&gt;milliseconds&lt;/code&gt;:</source>
          <target state="translated">次の例では、現在の時刻のミリ秒の部分を変数 &lt;code&gt;milliseconds&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="078d56fd7b9b4ca87d573476a1b430aaf18cc0df" translate="yes" xml:space="preserve">
          <source>The following example assigns the minutes portion of the current time to the variable &lt;code&gt;minutes&lt;/code&gt;.</source>
          <target state="translated">次の例では、現在の時間の分の部分を変数 &lt;code&gt;minutes&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="3fade3624fc5f764985a36f92a2d97d640c27075" translate="yes" xml:space="preserve">
          <source>The following example assigns the month portion of the current date to the variable &lt;code&gt;month&lt;/code&gt;.</source>
          <target state="translated">次の例では、現在の日付の月の部分を変数 &lt;code&gt;month&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="ac4df3ac8ffa391b3525c78b9876dbb78d6bd995" translate="yes" xml:space="preserve">
          <source>The following example assigns the seconds portion of the current time to the variable &lt;code&gt;seconds&lt;/code&gt;.</source>
          <target state="translated">次の例では、現在の時刻の秒の部分を変数 &lt;code&gt;seconds&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="343545b7b29be8cda1dcf0cbd75601808cd0809f" translate="yes" xml:space="preserve">
          <source>The following example assigns the weekday portion of the current date to the variable &lt;code&gt;weekday&lt;/code&gt;.</source>
          <target state="translated">次の例では、現在の日付の平日の部分を変数 &lt;code&gt;weekday&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="767d60c06ca1ff299270f38eff52362c32dbcb7c" translate="yes" xml:space="preserve">
          <source>The following example combines strings into a new string.</source>
          <target state="translated">次の例では、文字列を新しい文字列に結合しています。</target>
        </trans-unit>
        <trans-unit id="ce1f80f7ce973aac6a68718ef1d5ef4c0a63d97a" translate="yes" xml:space="preserve">
          <source>The following example compiles the loaded simple.wasm byte code using the &lt;code&gt;compile()&lt;/code&gt; function and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;compile()&lt;/code&gt; 関数を使用してロードされたsimple.wasmバイトコードをコンパイルし、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage（）&lt;/a&gt;を使用してそれを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;ワーカーに&lt;/a&gt;送信します。</target>
        </trans-unit>
        <trans-unit id="46c1aae55651ebc7d95593ee71eb5a2d80993538" translate="yes" xml:space="preserve">
          <source>The following example converts the &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object to a numerical value using &lt;code&gt;Number&lt;/code&gt; as a function:</source>
          <target state="translated">次の例では、 &lt;code&gt;Number&lt;/code&gt; を関数として使用して、&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトを数値に変換します。</target>
        </trans-unit>
        <trans-unit id="f3d3d920082d0c9559583ab75e2b0ed8ba94a88c" translate="yes" xml:space="preserve">
          <source>The following example creates a new WebAssembly Memory instance with an initial size of 1 page (64KiB), and a maximum size of 10 pages (640KiB).</source>
          <target state="translated">次の例では、初期サイズが 1 ページ (64KiB)、最大サイズが 10 ページ (640KiB)の新しい WebAssembly メモリ インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="40392ebf224f08b9413114ec5e26a7d27a004ce6" translate="yes" xml:space="preserve">
          <source>The following example creates a new WebAssembly Table instance with an initial size of 2 and a maximum size of 10.</source>
          <target state="translated">次の例では、初期サイズが 2、最大サイズが 10 の新しい WebAssembly Table インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="987625d9a34f6b1500f4c39852a2fcd13e8078e4" translate="yes" xml:space="preserve">
          <source>The following example creates a prototype, &lt;code&gt;Tree&lt;/code&gt;, and an object of that type, &lt;code&gt;theTree&lt;/code&gt;. The example then displays the &lt;code&gt;constructor&lt;/code&gt; property for the object &lt;code&gt;theTree&lt;/code&gt;.</source>
          <target state="translated">次の例では、プロトタイプ &lt;code&gt;Tree&lt;/code&gt; と、そのタイプのオブジェクト &lt;code&gt;theTree&lt;/code&gt; を作成します。次に、オブジェクト &lt;code&gt;theTree&lt;/code&gt; の &lt;code&gt;constructor&lt;/code&gt; プロパティを表示します。</target>
        </trans-unit>
        <trans-unit id="3e024257f78c408de5dbe3924322f58fda0791ae" translate="yes" xml:space="preserve">
          <source>The following example creates an array &lt;code&gt;a&lt;/code&gt;, containing three elements, then reverses the array. The call to &lt;code&gt;reverse()&lt;/code&gt; returns a reference to the reversed array &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">次の例では、3つの要素を含む配列 &lt;code&gt;a&lt;/code&gt; を作成し、その配列を逆にします。 &lt;code&gt;reverse()&lt;/code&gt; への呼び出しは、反転された配列 &lt;code&gt;a&lt;/code&gt; への参照を返します。</target>
        </trans-unit>
        <trans-unit id="8e7ccf2c333889f3e25b5af825d678cedd99f53b" translate="yes" xml:space="preserve">
          <source>The following example creates an array, &lt;code&gt;a&lt;/code&gt;, with three elements, then joins the array four times: using the default separator, then a comma and a space, then a plus and an empty string.</source>
          <target state="translated">次の例では、3つの要素を持つ配列 &lt;code&gt;a&lt;/code&gt; を作成し、その配列を4回結合します。デフォルトのセパレーター、コンマとスペース、プラス記号と空の文字列を使用します。</target>
        </trans-unit>
        <trans-unit id="94ed75046a42e69d01d296a24ea2163f50def55f" translate="yes" xml:space="preserve">
          <source>The following example creates an array, &lt;code&gt;msgArray&lt;/code&gt;, with a length of 0, then assigns values to &lt;code&gt;msgArray[0]&lt;/code&gt; and &lt;code&gt;msgArray[99]&lt;/code&gt;, changing the length of the array to 100.</source>
          <target state="translated">次の例では、長さが0の配列 &lt;code&gt;msgArray&lt;/code&gt; を作成し、値を &lt;code&gt;msgArray[0]&lt;/code&gt; および &lt;code&gt;msgArray[99]&lt;/code&gt; に割り当てて、配列の長さを100に変更します。</target>
        </trans-unit>
        <trans-unit id="acec17eec6a860d29cc75e011e0974ef6eecfdad" translate="yes" xml:space="preserve">
          <source>The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function.</source>
          <target state="translated">次の例では,4 つの配列を作成し,元の配列を表示した後,ソートされた配列を表示します.数値配列は,比較関数を使用せずにソートされ,次に比較関数を使用してソートされます.</target>
        </trans-unit>
        <trans-unit id="6ac6d9979086fed726d30810239f0df73d45c5df" translate="yes" xml:space="preserve">
          <source>The following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function logs messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.</source>
          <target state="translated">次の例は、指定した区切り文字を用いて文字列を文字列の配列に分割する関数を定義しています。文字列を分割した後,関数は,元の文字列(分割前),使用した区切り文字,配列の要素数,配列の各要素を示すメッセージをログに記録します.</target>
        </trans-unit>
        <trans-unit id="92b53dacb75ae1e45d107fe4e0d1af48934e0a9c" translate="yes" xml:space="preserve">
          <source>The following example defines a function, which, in turn, defines and returns a factorial function. This example isn't very practical, and there are nearly no cases where the same result cannot be achieved with &lt;a href=&quot;../../operators/function&quot;&gt;named function expressions&lt;/a&gt;.</source>
          <target state="translated">次の例では、関数を定義し、次に、階乗関数を定義して返します。この例はあまり実用的ではなく、&lt;a href=&quot;../../operators/function&quot;&gt;名前付き関数式で&lt;/a&gt;同じ結果が得られないケースはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="ab0f8b17dc95108d00ead468122ed886ad0787e7" translate="yes" xml:space="preserve">
          <source>The following example defines an unnamed function and assigns it to &lt;code&gt;x&lt;/code&gt;. The function returns the square of its argument:</source>
          <target state="translated">次の例では、名前のない関数を定義し、それを &lt;code&gt;x&lt;/code&gt; に割り当てています。関数は引数の2乗を返します。</target>
        </trans-unit>
        <trans-unit id="4f8ffa34b31c533441565020a3902f90686081d1" translate="yes" xml:space="preserve">
          <source>The following example defines an unnamed generator function and assigns it to &lt;code&gt;x&lt;/code&gt;. The function yields the square of its argument:</source>
          <target state="translated">次の例では、名前のないジェネレーター関数を定義し、それを &lt;code&gt;x&lt;/code&gt; に割り当てています。関数は引数の2乗を生成します。</target>
        </trans-unit>
        <trans-unit id="7ca6fb2df23581f1f3ea75626e31d34e85d25092" translate="yes" xml:space="preserve">
          <source>The following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; method displays 19. But because the &lt;code&gt;indexOf()&lt;/code&gt; method is case sensitive, the string &lt;code&gt;&quot;cheddar&quot;&lt;/code&gt; is not found in &lt;code&gt;myCapString&lt;/code&gt;, so the second &lt;code&gt;console.log()&lt;/code&gt; method displays -1.</source>
          <target state="translated">次の例では、2つの文字列変数を定義しています。2番目の文字列に大文字が含まれていることを除いて、変数には同じ文字列が含まれています。最初の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;メソッドは19を表示します。ただし、 &lt;code&gt;indexOf()&lt;/code&gt; メソッドは大文字と小文字を区別するため、 &lt;code&gt;myCapString&lt;/code&gt; に文字列 &lt;code&gt;&quot;cheddar&quot;&lt;/code&gt; cheddar &quot;が見つからないため、2番目の &lt;code&gt;console.log()&lt;/code&gt; メソッドは-1を表示します。</target>
        </trans-unit>
        <trans-unit id="547d34e148fee3b5c81ff45fb75c1ba9349a6db8" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how constants behave. Try this in your browser console.</source>
          <target state="translated">次の例は、定数がどのように動作するかを示しています。ブラウザのコンソールで試してみてください。</target>
        </trans-unit>
        <trans-unit id="98ff2a6ba484f518866c30fcdddf29c37ad2fdc0" translate="yes" xml:space="preserve">
          <source>The following example demonstrates several things:</source>
          <target state="translated">以下の例は、いくつかのことを示しています。</target>
        </trans-unit>
        <trans-unit id="4acb5dc736da7509eb051a3f3fb33a2adf5a1511" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:</source>
          <target state="translated">次の例では、文字列が別の文字列の前、後、または同じレベルで発生した場合の異なる可能性のある結果を示しています。</target>
        </trans-unit>
        <trans-unit id="76991b080a89f297062fcd2b209588b4476dff9d" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the enumerability of user-defined vs. built-in properties:</source>
          <target state="translated">以下の例は、ユーザー定義プロパティとビルトインプロパティの列挙性を示しています。</target>
        </trans-unit>
        <trans-unit id="535735172236e9bfa62c1b8539c90dbbb7bcde3f" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the global and ignore case flags with &lt;code&gt;match()&lt;/code&gt;. All letters A through E and a through e are returned, each its own element in the array.</source>
          <target state="translated">次の例は、 &lt;code&gt;match()&lt;/code&gt; での大域フラグと無視フラグの使用を示しています。AからEおよびaからeのすべての文字が返され、それぞれが配列内の独自の要素になります。</target>
        </trans-unit>
        <trans-unit id="cabe28f20b2239beb68252e8521440dc3608037d" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this behaviour:</source>
          <target state="translated">次の例は、この動作を示しています。</target>
        </trans-unit>
        <trans-unit id="f1a20b08e6b9a8caed404a5a3d2e883966a78b3f" translate="yes" xml:space="preserve">
          <source>The following example determines whether the &lt;code&gt;o&lt;/code&gt; object contains a property named &lt;code&gt;prop&lt;/code&gt;:</source>
          <target state="translated">次の例では、 &lt;code&gt;o&lt;/code&gt; オブジェクトに &lt;code&gt;prop&lt;/code&gt; という名前のプロパティが含まれているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="b86a1dde5df429b8d830bc2153042ec3baf37734" translate="yes" xml:space="preserve">
          <source>The following example differentiates between direct properties and properties inherited through the prototype chain:</source>
          <target state="translated">以下の例では、直接プロパティとプロトタイプチェーンを介して継承されるプロパティを区別しています。</target>
        </trans-unit>
        <trans-unit id="e28904a6f35eeb800c143e3dee50dcff00bd1737" translate="yes" xml:space="preserve">
          <source>The following example displays characters at different locations in the string &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt;:</source>
          <target state="translated">次の例では、文字列 &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt; さまざまな場所にある文字を表示します。</target>
        </trans-unit>
        <trans-unit id="a5458354badab7ff4adbcb6d487cdf785f3f80ce" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;' foo'&lt;/code&gt;:</source>
          <target state="translated">次の例では、小文字の文字列 &lt;code&gt;' foo'&lt;/code&gt; 表示します。</target>
        </trans-unit>
        <trans-unit id="0bfcf6eed9257eea6ea96db09db7d70185bcca9b" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;'foo '&lt;/code&gt;:</source>
          <target state="translated">次の例では、小文字の文字列 &lt;code&gt;'foo '&lt;/code&gt; 表示します。</target>
        </trans-unit>
        <trans-unit id="5f7e0cd9f847bc1e944b777e688a83943d4b275d" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;'foo'&lt;/code&gt;:</source>
          <target state="translated">次の例では、小文字の文字列 &lt;code&gt;'foo'&lt;/code&gt; 表示しています。</target>
        </trans-unit>
        <trans-unit id="3de0baed5bb079a0ffbb4bf89fc9d1cfda35e9f0" translate="yes" xml:space="preserve">
          <source>The following example displays the string value of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">次の例は、&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトの文字列値を表示します。</target>
        </trans-unit>
        <trans-unit id="b52750760089a6c0542b8391fd7147e5b5454c38" translate="yes" xml:space="preserve">
          <source>The following example displays the string value of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">次の例では、&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトの文字列値を表示します。</target>
        </trans-unit>
        <trans-unit id="18561723849ba2c212dfe8fbd1d0094dd72468e7" translate="yes" xml:space="preserve">
          <source>The following example displays the word &quot;MDN&quot; as a hypertext link that returns the user to the Mozilla Developer Network.</source>
          <target state="translated">次の例では、&quot;MDN &quot;という単語を、ユーザーをMozilla Developer Networkに戻すハイパーテキストリンクとして表示しています。</target>
        </trans-unit>
        <trans-unit id="36f1186c333290c25b528c1d31b9417d9e9b895a" translate="yes" xml:space="preserve">
          <source>The following example finds an element in the array that is a prime number (or returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no prime number).</source>
          <target state="translated">次の例では、素数である配列内の要素を検索します（または、素数が&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合はundefinedを返します）。</target>
        </trans-unit>
        <trans-unit id="a71e655d2f693b29caaacf6e44d06930198e94b3" translate="yes" xml:space="preserve">
          <source>The following example finds an element in the typed array that is a prime number (or returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no prime number).</source>
          <target state="translated">次の例では、型付き配列で素数である（または素数が&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合はundefinedを返す）要素を検索します。</target>
        </trans-unit>
        <trans-unit id="123a7cc3c410ee8833d83619d1741b726a071c58" translate="yes" xml:space="preserve">
          <source>The following example finds the index of a fruit using an arrow function:</source>
          <target state="translated">次の例では、矢印関数を使って果物のインデックスを見つけます。</target>
        </trans-unit>
        <trans-unit id="c3043c7e35e655f7354b6f1b8d8089ebb3dcfa97" translate="yes" xml:space="preserve">
          <source>The following example finds the index of an element in the typed array that is a prime number (or returns -1 if there is no prime number).</source>
          <target state="translated">次の例は,型付き配列の中から素数である要素のインデックスを求めます(素数がない場合は -1 を返します).</target>
        </trans-unit>
        <trans-unit id="9921b6dcf2965ab71a7bbbf0b7bd58d30abfff93" translate="yes" xml:space="preserve">
          <source>The following example joins array-like object (&lt;code&gt;&lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;&lt;/code&gt;), by calling &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Array.prototype.join&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;Array.prototype.join&lt;/code&gt; で&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; &lt;/a&gt;を呼び出して、配列のようなオブジェクト（ &lt;code&gt;&lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;&lt;/code&gt; ）を結合しています。</target>
        </trans-unit>
        <trans-unit id="e4a6eb7e50a75d3ce30d69979c6deb4427e65027" translate="yes" xml:space="preserve">
          <source>The following example logs &quot;one&quot;, &quot;two&quot;, &quot;four&quot;. When the entry containing the value &quot;two&quot; is reached, the first entry of the whole array is shifted off, which results in all remaining entries moving up one position. Because element &quot;four&quot; is now at an earlier position in the array, &quot;three&quot; will be skipped. &lt;code&gt;forEach()&lt;/code&gt; does not make a copy of the array before iterating.</source>
          <target state="translated">次の例では、「1」、「2」、「4」をログに記録します。値「2」を含むエントリに到達すると、配列全体の最初のエントリがシフトオフされ、残りのすべてのエントリが1つ上の位置に移動します。要素「4」は配列の前の位置にあるため、「3」はスキップされます。 &lt;code&gt;forEach()&lt;/code&gt; は、反復する前に配列のコピーを作成しません。</target>
        </trans-unit>
        <trans-unit id="40e228d899d08f05aeecc38dce80833d2bd90269" translate="yes" xml:space="preserve">
          <source>The following example logs a message which depends on the success of the test:</source>
          <target state="translated">次の例では、テストの成功に依存するメッセージをログに記録しています。</target>
        </trans-unit>
        <trans-unit id="1d7aef234432711a2e9c30b19e8ad50d7434e224" translate="yes" xml:space="preserve">
          <source>The following example opens a file and then executes statements that use the file (server-side JavaScript allows you to access files). If an exception is thrown while the file is open, the &lt;code&gt;finally&lt;/code&gt; clause closes the file before the script fails. The code in &lt;code&gt;finally&lt;/code&gt; also executes upon explicitly returning from &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt; block.</source>
          <target state="translated">次の例では、ファイルを開き、そのファイルを使用するステートメントを実行します（サーバー側のJavaScriptではファイルにアクセスできます）。ファイルが開いている間に例外がスローされた場合、 &lt;code&gt;finally&lt;/code&gt; 句はスクリプトが失敗する前にファイルを閉じます。 &lt;code&gt;finally&lt;/code&gt; のコードは、 &lt;code&gt;try&lt;/code&gt; または &lt;code&gt;catch&lt;/code&gt; ブロックから明示的に戻ったときにも実行されます。</target>
        </trans-unit>
        <trans-unit id="0b446e3f60ff448f09a2a16a2121c515e355b2ea" translate="yes" xml:space="preserve">
          <source>The following example provides the special encoding required within UTF-8 &lt;code&gt;Content-Disposition&lt;/code&gt; and &lt;code&gt;Link&lt;/code&gt; server response header parameters (e.g., UTF-8 filenames):</source>
          <target state="translated">次の例は、UTF-8 &lt;code&gt;Content-Disposition&lt;/code&gt; および &lt;code&gt;Link&lt;/code&gt; サーバーの応答ヘッダーパラメーター（UTF-8ファイル名など）内で必要な特別なエンコーディングを示しています。</target>
        </trans-unit>
        <trans-unit id="8f6d94ed30d3e9137ae631064c77221c72decf99" translate="yes" xml:space="preserve">
          <source>The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C.</source>
          <target state="translated">次の例では、華氏度を同等の摂氏度に置き換えています。この関数は、C で終わる摂氏数を返します。例えば、入力された数値が 212F の場合、この関数は 100C を返します。数値が0Fの場合、この関数は-17.7777777777777778Cを返します。</target>
        </trans-unit>
        <trans-unit id="933f02ade97f0adfd5b355b0f382856566007dbf" translate="yes" xml:space="preserve">
          <source>The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string &lt;code&gt;'Brave New World'&lt;/code&gt; to &lt;code&gt;'Brave New Web'&lt;/code&gt;.</source>
          <target state="translated">次の例では、文字列内の部分文字列を置き換えます。個々の文字と部分文字列の両方を置き換えます。例の最後の関数呼び出しは、文字列 &lt;code&gt;'Brave New World'&lt;/code&gt; を &lt;code&gt;'Brave New Web'&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="93f8e958f94323ef8dc0f42259773df78c457ee2" translate="yes" xml:space="preserve">
          <source>The following example returns 65, the Unicode value for A.</source>
          <target state="translated">次の例は、A の Unicode 値 65 を返します。</target>
        </trans-unit>
        <trans-unit id="90c5cda0c96e649f69caa007d659268d33f22c88" translate="yes" xml:space="preserve">
          <source>The following example returns &lt;code&gt;224&lt;/code&gt;:</source>
          <target state="translated">次の例は &lt;code&gt;224&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="24de5fa4059fba34b62190fb50374f94f80ed5c0" translate="yes" xml:space="preserve">
          <source>The following example returns &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">次の例は &lt;code&gt;NaN&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="eb4b71ecc767d2d15324f41767df1acba8db96b8" translate="yes" xml:space="preserve">
          <source>The following example returns the index of an element in the array that is a prime number, or -1 if there is no prime number.</source>
          <target state="translated">次の例は、素数である配列の要素のインデックスを返し、素数がない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="083a6a8c3e4bb9a9632eb9fe92d73307b122fa08" translate="yes" xml:space="preserve">
          <source>The following example returns the string &quot;ABC&quot;.</source>
          <target state="translated">次の例では、文字列「ABC」を返します。</target>
        </trans-unit>
        <trans-unit id="82cdc405f088054aabe6122997be993169860e4c" translate="yes" xml:space="preserve">
          <source>The following example searches a string with 2 different regex objects to show a successful search (positive value) vs. an unsuccessful search (-1)</source>
          <target state="translated">以下の例では、2つの異なる正規表現オブジェクトで文字列を検索し、検索が成功した場合(正の値)と失敗した場合(-1)を表示しています。</target>
        </trans-unit>
        <trans-unit id="8d7630dc749db4775b009b43ad2cba5bd2e12024" translate="yes" xml:space="preserve">
          <source>The following example sets &lt;code&gt;count&lt;/code&gt; to the number of occurrences of the letter &lt;code&gt;e&lt;/code&gt; in the string &lt;code&gt;str&lt;/code&gt;:</source>
          <target state="translated">次の例では、 &lt;code&gt;count&lt;/code&gt; を文字列 &lt;code&gt;str&lt;/code&gt; 内の文字 &lt;code&gt;e&lt;/code&gt; の出現回数に設定します。</target>
        </trans-unit>
        <trans-unit id="11e92c9c5fada2aa828677183258974748dd4cfa" translate="yes" xml:space="preserve">
          <source>The following example shortens the array &lt;code&gt;numbers&lt;/code&gt; to a length of 3 if the current length is greater than 3.</source>
          <target state="translated">次の例では、現在の長さが3より大きい場合、配列 &lt;code&gt;numbers&lt;/code&gt; を3の長さに短縮します。</target>
        </trans-unit>
        <trans-unit id="716fdf3d5254acc41f4ed6f3a01cae908d494b0b" translate="yes" xml:space="preserve">
          <source>The following example shows a &lt;a href=&quot;while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; loop that has a &lt;code&gt;continue&lt;/code&gt; statement that executes when the value of &lt;code&gt;i&lt;/code&gt; is 3. Thus, &lt;code&gt;n&lt;/code&gt; takes on the values 1, 3, 7, and 12.</source>
          <target state="translated">次の例は、 &lt;code&gt;i&lt;/code&gt; の値が3のときに実行される &lt;code&gt;continue&lt;/code&gt; ステートメントを持つ&lt;a href=&quot;while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;ループを示しています。したがって、 &lt;code&gt;n&lt;/code&gt; は値1、3、7、および12をとります。</target>
        </trans-unit>
        <trans-unit id="2005d00ce0209b5fceaa8ac912192339ee89a7e4" translate="yes" xml:space="preserve">
          <source>The following example shows a new global instance being created using the &lt;code&gt;WebAssembly.Global()&lt;/code&gt; constructor. It is being defined as a mutable &lt;code&gt;i32&lt;/code&gt; type, with a value of 0.</source>
          <target state="translated">次の例は、 &lt;code&gt;WebAssembly.Global()&lt;/code&gt; コンストラクターを使用して作成される新しいグローバルインスタンスを示しています。これは、値が0の可変 &lt;code&gt;i32&lt;/code&gt; タイプとして定義されています。</target>
        </trans-unit>
        <trans-unit id="0c7266a2391590ed65c478f38c97fa18c57a2cf6" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and an error that is thrown using the &lt;code&gt;throw&lt;/code&gt; method. An error can be caught by a &lt;code&gt;&lt;a href=&quot;../../statements/try...catch&quot;&gt;try...catch&lt;/a&gt;&lt;/code&gt; block as usual.</source>
          <target state="translated">次の例は、単純なジェネレータと、 &lt;code&gt;throw&lt;/code&gt; メソッドを使用してスローされるエラーを示しています。エラーは通常どおり &lt;code&gt;&lt;a href=&quot;../../statements/try...catch&quot;&gt;try...catch&lt;/a&gt;&lt;/code&gt; ブロックでキャッチできます。</target>
        </trans-unit>
        <trans-unit id="1f7f361180b31b6042d618b49166807c6f929d75" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and the &lt;code&gt;return&lt;/code&gt; method.</source>
          <target state="translated">次の例は、単純なジェネレータと &lt;code&gt;return&lt;/code&gt; メソッドを示しています。</target>
        </trans-unit>
        <trans-unit id="b72df2105ef3ff7ff1bfba2b4454bda5b2038cff" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and the object that the &lt;code&gt;next&lt;/code&gt; method returns:</source>
          <target state="translated">次の例は、単純なジェネレータと、 &lt;code&gt;next&lt;/code&gt; メソッドが返すオブジェクトを示しています。</target>
        </trans-unit>
        <trans-unit id="ecc6be9816c449546ff2ea6de11e640bab27e489" translate="yes" xml:space="preserve">
          <source>The following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.</source>
          <target state="translated">次の例は、関数が呼び出されたときにデバッガを呼び出すために、デバッガ文が挿入されているコードを示しています。</target>
        </trans-unit>
        <trans-unit id="38d40650a327908143a9507b756e781dad6e3669" translate="yes" xml:space="preserve">
          <source>The following example shows example usage of &lt;code&gt;Math.ceil()&lt;/code&gt;.</source>
          <target state="translated">次の例は、 &lt;code&gt;Math.ceil()&lt;/code&gt; の使用例を示しています。</target>
        </trans-unit>
        <trans-unit id="6aef66a7fd07b717af62aec60881c68c4a467ffc" translate="yes" xml:space="preserve">
          <source>The following example shows how to iterate over the properties of an object without executing on inherited properties. Note that the &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that &lt;code&gt;hasOwnProperty&lt;/code&gt; itself is confined strictly to enumerable items (as with &lt;a href=&quot;getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">次の例は、継承されたプロパティを実行せずにオブジェクトのプロパティを反復処理する方法を示しています。なお、&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; 1がそのループに示す非可算のプロパティの欠如に基づいて仮定するべきではありませんので、ループすでにのみ、列挙の項目を反復される &lt;code&gt;hasOwnProperty&lt;/code&gt; を自身がして（可算の項目に厳密に限定されている&lt;a href=&quot;getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; )&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="05588cf5df11a1b0b917f7765e24afc5d0c27049" translate="yes" xml:space="preserve">
          <source>The following example shows how to modify constructor value of generic objects. Only &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;&quot;test&quot;&lt;/code&gt; will not be affected as they have read-only native constructors. This example shows that it is not always safe to rely on the &lt;code&gt;constructor&lt;/code&gt; property of an object.</source>
          <target state="translated">次の例は、汎用オブジェクトのコンストラクター値を変更する方法を示しています。読み取り専用のネイティブコンストラクターがあるため、 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; および &lt;code&gt;&quot;test&quot;&lt;/code&gt; のみが影響を受けません。この例は、オブジェクトの &lt;code&gt;constructor&lt;/code&gt; プロパティに依存することが常に安全であるとは限らないことを示しています。</target>
        </trans-unit>
        <trans-unit id="512794980e61d7b8e7fce733381b52be22b2f50f" translate="yes" xml:space="preserve">
          <source>The following example shows how to recompile a regular expression with a new pattern and a new flag.</source>
          <target state="translated">次の例は、新しいパターンと新しいフラグを持つ正規表現を再コンパイルする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="16a9e7677db754327f388f87c25488c6eafb7c04" translate="yes" xml:space="preserve">
          <source>The following example shows the difference between a &lt;code&gt;for...of&lt;/code&gt; loop and a &lt;code&gt;for...in&lt;/code&gt; loop when used with an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例は、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;使用した場合の &lt;code&gt;for...of&lt;/code&gt; ループと &lt;code&gt;for...in&lt;/code&gt; ループの違いを示しています。</target>
        </trans-unit>
        <trans-unit id="cb030f0bc0c064aa49218c4bc53dbe7177787ab2" translate="yes" xml:space="preserve">
          <source>The following example shows the minimum and maximum integer values that can be represented as &lt;code&gt;Number&lt;/code&gt; object (for details, refer to ECMAScript standard, chapter &lt;em&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6 The Number Type&lt;/a&gt;&lt;/em&gt;):</source>
          <target state="translated">次の例は、 &lt;code&gt;Number&lt;/code&gt; オブジェクトとして表現できる最小および最大の整数値を示しています（詳細については、ECMAScript標準の&lt;em&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6&lt;/a&gt;&lt;/em&gt;章&lt;em&gt;「数値型」を&lt;/em&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="8b668e0e307c5ee65cb2f062aacbf2cbff673850" translate="yes" xml:space="preserve">
          <source>The following example shows the use of &lt;code&gt;propertyIsEnumerable&lt;/code&gt; on objects and arrays:</source>
          <target state="translated">次の例は、オブジェクトと配列での &lt;code&gt;propertyIsEnumerable&lt;/code&gt; の使用を示しています。</target>
        </trans-unit>
        <trans-unit id="f585c8845f1eff70fb70f7c28ef793920b1cf083" translate="yes" xml:space="preserve">
          <source>The following example takes a string pattern and converts it into an array of objects.</source>
          <target state="translated">次の例では、文字列パターンを取り、それをオブジェクトの配列に変換しています。</target>
        </trans-unit>
        <trans-unit id="526ac138e4fc7f1b7bcc8fdaa130fb0ea5e63515" translate="yes" xml:space="preserve">
          <source>The following example tests an input string for a U.S. zip code. If the zip code uses an invalid format, the throw statement throws an exception by creating an object of type &lt;code&gt;ZipCodeFormatException&lt;/code&gt;.</source>
          <target state="translated">次の例では、米国の郵便番号の入力文字列をテストします。郵便番号が無効なフォーマットを使用している場合、throwステートメントは、タイプ &lt;code&gt;ZipCodeFormatException&lt;/code&gt; のオブジェクトを作成することによって例外をスローします。</target>
        </trans-unit>
        <trans-unit id="4dc1382682a3dc481d70442f3a24f55d37812838" translate="yes" xml:space="preserve">
          <source>The following example tests whether all elements in the array are bigger than 10.</source>
          <target state="translated">次の例では、配列のすべての要素が10よりも大きいかどうかをテストしています。</target>
        </trans-unit>
        <trans-unit id="013658f9ea00d8fe11ae283ad06c24b51bcc9655" translate="yes" xml:space="preserve">
          <source>The following example tests whether all elements in the typed array are bigger than 10.</source>
          <target state="translated">次の例では,型付き配列のすべての要素が10よりも大きいかどうかをテストしています.</target>
        </trans-unit>
        <trans-unit id="810860b8f4faa61dd02c1765fe41a001722d2b62" translate="yes" xml:space="preserve">
          <source>The following example tests whether any element in the array is bigger than 10.</source>
          <target state="translated">次の例では、配列内の要素が10より大きいかどうかをテストしています。</target>
        </trans-unit>
        <trans-unit id="5b1e373ef2933c1c4d588de3f2529dcb712e28b7" translate="yes" xml:space="preserve">
          <source>The following example tests whether any element in the typed array is bigger than 10.</source>
          <target state="translated">次の例では,型付き配列の要素が10よりも大きいかどうかをテストしています.</target>
        </trans-unit>
        <trans-unit id="44133647ac3e03eff2080839e68c70a985445297" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;a href=&quot;indexof&quot;&gt;&lt;code&gt;indexOf()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;lastIndexOf()&lt;/code&gt; to locate values in the string &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt;.</source>
          <target state="translated">次の例では、&lt;a href=&quot;indexof&quot;&gt; &lt;code&gt;indexOf()&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;lastIndexOf()&lt;/code&gt; を使用して、文字列 &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt; 内の値を検索します。</target>
        </trans-unit>
        <trans-unit id="8706b2456fc38fbc87d8e44f1573948714487850" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;eval()&lt;/code&gt; to evaluate the string &lt;code&gt;str&lt;/code&gt;. This string consists of JavaScript statements that open an alert dialog box and assign &lt;code&gt;z&lt;/code&gt; a value of 42 if &lt;code&gt;x&lt;/code&gt; is five, and assigns 0 to &lt;code&gt;z&lt;/code&gt; otherwise. When the second statement is executed, &lt;code&gt;eval()&lt;/code&gt; will cause these statements to be performed, and it will also evaluate the set of statements and return the value that is assigned to &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;eval()&lt;/code&gt; を使用して文字列 &lt;code&gt;str&lt;/code&gt; を評価します。この文字列は、アラートダイアログボックスを開き、 &lt;code&gt;x&lt;/code&gt; が5の場合 &lt;code&gt;z&lt;/code&gt; に42の値を割り当て、それ以外の場合は0を &lt;code&gt;z&lt;/code&gt; に割り当てるJavaScriptステートメントで構成されます。2番目のステートメントが実行されると、 &lt;code&gt;eval()&lt;/code&gt; はこれらのステートメントを実行させ、ステートメントのセットを評価して、 &lt;code&gt;z&lt;/code&gt; に割り当てられた値を返します。</target>
        </trans-unit>
        <trans-unit id="83750d81b6626f0f19b9c906f35d785ebdddf04c" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered array that has all elements with values less than 10 removed.</source>
          <target state="translated">次の例では、 &lt;code&gt;filter()&lt;/code&gt; を使用して、値が10未満のすべての要素が削除されたフィルター済み配列を作成します。</target>
        </trans-unit>
        <trans-unit id="eca07736cd4beef1170a4d86fc01b7db4d3548e8" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered json of all elements with non-zero, numeric &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;filter()&lt;/code&gt; を使用して、ゼロ以外の数値 &lt;code&gt;id&lt;/code&gt; を持つすべての要素のフィルターされたjsonを作成します。</target>
        </trans-unit>
        <trans-unit id="c51b4796506339dc0c87c3cab6544c7dba551328" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered typed array that has all elements with values less than 10 removed.</source>
          <target state="translated">次の例では、 &lt;code&gt;filter()&lt;/code&gt; を使用して、値が10未満のすべての要素が削除されたフィルター済みの型付き配列を作成します。</target>
        </trans-unit>
        <trans-unit id="d105cc6b7d41842946081721deaa55136ba97875" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;indexOf()&lt;/code&gt; to locate values in an array.</source>
          <target state="translated">次の例では、 &lt;code&gt;indexOf()&lt;/code&gt; を使用して配列内の値を検索します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
