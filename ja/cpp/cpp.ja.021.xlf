<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="fc3b6bc12209467d6e9ff3af29b87f5253e0c47e" translate="yes" xml:space="preserve">
          <source>The base class version of the function returns the value returned by &lt;code&gt;&lt;a href=&quot;underflow&quot;&gt;underflow()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数の基本クラスバージョンは、 &lt;code&gt;&lt;a href=&quot;underflow&quot;&gt;underflow()&lt;/a&gt;&lt;/code&gt; によって返された値を返します。</target>
        </trans-unit>
        <trans-unit id="b1d208bfa2329a65807001e6d36d39a0f1677250" translate="yes" xml:space="preserve">
          <source>The base class version returns &lt;code&gt;​0​&lt;/code&gt;, which has the meaning of &quot;unsure if there are characters available in the associated sequence&quot;.</source>
          <target state="translated">基本クラスのバージョンを返します &lt;code&gt;​0​&lt;/code&gt; 「に関連するシーケンスで利用可能な文字がある場合はわからない」の意味を持っています、。</target>
        </trans-unit>
        <trans-unit id="65be7b19f119502c0eb14febca8650a896002b94" translate="yes" xml:space="preserve">
          <source>The base engine is initialized as if by its default constructor.</source>
          <target state="translated">ベースエンジンはデフォルトのコンストラクタであるかのように初期化されます。</target>
        </trans-unit>
        <trans-unit id="d2f48c59a2026f01e1913fb4af0ac9ade58b0ac5" translate="yes" xml:space="preserve">
          <source>The base engine is initialized with &lt;code&gt;q&lt;/code&gt;.</source>
          <target state="translated">ベースエンジンは &lt;code&gt;q&lt;/code&gt; で初期化されます。</target>
        </trans-unit>
        <trans-unit id="3807d81685568779c783145cd5e183ce61fc3a1c" translate="yes" xml:space="preserve">
          <source>The base engine is initialized with &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">ベースエンジンは &lt;code&gt;s&lt;/code&gt; で初期化されます。</target>
        </trans-unit>
        <trans-unit id="ebf5c9f5b0b3f9e2e22420142fce565a3b32cfbc" translate="yes" xml:space="preserve">
          <source>The base iterator refers to the element that is next (from the &lt;code&gt;std::reverse_iterator::iterator_type&lt;/code&gt; perspective) to the element the &lt;code&gt;reverse_iterator&lt;/code&gt; is currently pointing to. That is &lt;code&gt;&amp;amp;*(rit.base() - 1) == &amp;amp;*rit&lt;/code&gt;.</source>
          <target state="translated">基本イテレーターは、 &lt;code&gt;reverse_iterator&lt;/code&gt; が現在指しているエレメントの（ &lt;code&gt;std::reverse_iterator::iterator_type&lt;/code&gt; 観点から）次のエレメントを参照します。それは &lt;code&gt;&amp;amp;*(rit.base() - 1) == &amp;amp;*rit&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="04894fdb5441816fc37a586ae5bb96e48ec6f568" translate="yes" xml:space="preserve">
          <source>The begin iterator is not decrementable and the behavior is undefined if &lt;code&gt;--container.begin()&lt;/code&gt; is evaluated.</source>
          <target state="translated">&lt;code&gt;--container.begin()&lt;/code&gt; の場合、開始反復子は減分できず、動作は未定義です。が評価された。</target>
        </trans-unit>
        <trans-unit id="03aff1e4e14290c56daca1d059d5794d57d8f115" translate="yes" xml:space="preserve">
          <source>The behavior is &lt;a href=&quot;language/ub&quot;&gt;undefined&lt;/a&gt; if the calls to functions in this library introduce a</source>
          <target state="translated">動作がされ&lt;a href=&quot;language/ub&quot;&gt;未定義&lt;/a&gt;このライブラリの関数の呼び出しが導入した場合</target>
        </trans-unit>
        <trans-unit id="b94ed51c2a7132f52ba92dc74b4b5db56131e5d8" translate="yes" xml:space="preserve">
          <source>The behavior is also implementation-defined (rather than undefined) if the glvalue contains a pointer value that was invalidated.</source>
          <target state="translated">glvalueに無効化されたポインタ値が含まれている場合の動作も実装で定義されています(未定義ではなく)。</target>
        </trans-unit>
        <trans-unit id="d32d3770c8427099c568e7f5878b1512fe78f9b0" translate="yes" xml:space="preserve">
          <source>The behavior is also undefined if &lt;code&gt;hash_function()&lt;/code&gt; and &lt;code&gt;key_eq()&lt;/code&gt; do(until C++20)&lt;code&gt;key_eq()&lt;/code&gt; does(since C++20) not have the same behavior on &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; or if &lt;code&gt;operator==&lt;/code&gt; for &lt;code&gt;Key&lt;/code&gt; is not a refinement of the partition into equivalent-key groups introduced by &lt;code&gt;key_eq()&lt;/code&gt; (that is, if two elements that compare equal using &lt;code&gt;operator==&lt;/code&gt; fall into different partitions).</source>
          <target state="translated">場合の動作も定義されていません &lt;code&gt;hash_function()&lt;/code&gt; と &lt;code&gt;key_eq()&lt;/code&gt; を行う（までC ++ 20） &lt;code&gt;key_eq()&lt;/code&gt; （C ++ 20以降）に同じ動作を持っていない &lt;code&gt;lhs&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; 場合や、 &lt;code&gt;operator==&lt;/code&gt; のために &lt;code&gt;Key&lt;/code&gt; ありません &lt;code&gt;key_eq()&lt;/code&gt; によって導入された等価キーグループへのパーティションの改良（つまり、 &lt;code&gt;operator==&lt;/code&gt; を使用して等しい2つの要素が等しい場合異なるパーティションに分類される場合）。</target>
        </trans-unit>
        <trans-unit id="e8fd329b7e8ee3bfdaf431a851607c95c9f9bfb8" translate="yes" xml:space="preserve">
          <source>The behavior is as follows:</source>
          <target state="translated">挙動は以下のようになっています。</target>
        </trans-unit>
        <trans-unit id="7eea08832bb23fb78c997d9dfc59bf05fa204a8d" translate="yes" xml:space="preserve">
          <source>The behavior is non-deterministic if &lt;code&gt;binary_op&lt;/code&gt; is not associative or not commutative.</source>
          <target state="translated">&lt;code&gt;binary_op&lt;/code&gt; の場合、動作は非決定的ですが連想的または可でない。</target>
        </trans-unit>
        <trans-unit id="07f39a83d0e9e90b80ce955a114fea2806db89fa" translate="yes" xml:space="preserve">
          <source>The behavior is non-deterministic if &lt;code&gt;binary_op&lt;/code&gt;/&lt;code&gt;binary_op2&lt;/code&gt; is not associative or not commutative.</source>
          <target state="translated">&lt;code&gt;binary_op&lt;/code&gt; / &lt;code&gt;binary_op2&lt;/code&gt; が連想的または可換的でない場合、動作は非決定的です。</target>
        </trans-unit>
        <trans-unit id="7236e1de843ba22b290511e64b6b85d4a7183b5b" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;a href=&quot;../future/valid&quot;&gt;&lt;code&gt;valid()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;== false&lt;/code&gt; before the call to this function.</source>
          <target state="translated">この関数の呼び出し前に&lt;a href=&quot;../future/valid&quot;&gt; &lt;code&gt;valid()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;== false&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="06568324069c072f68418be5d52202edbce2a0f2" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;a href=&quot;valid&quot;&gt;&lt;code&gt;valid()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;== false&lt;/code&gt; before the call to this function.</source>
          <target state="translated">&lt;a href=&quot;valid&quot;&gt; &lt;code&gt;valid()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;== false&lt;/code&gt; 場合の動作は未定義ですこの関数の呼び出し前に。</target>
        </trans-unit>
        <trans-unit id="324200d2b8e9375f7586ca7351ca997ba0cea540" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;*this&lt;/code&gt; does not contain a value.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; の場合の動作は未定義です値が含まれていない。</target>
        </trans-unit>
        <trans-unit id="c19a694085eaee2a80ad969fe60b2ac2a9024625" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;*this&lt;/code&gt; is the end iterator.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; の場合の動作は未定義ですが終了反復子である。</target>
        </trans-unit>
        <trans-unit id="7a471c0f8892871ea303ee0c08e508e5150eccd3" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt; is zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt; の場合の動作は未定義ですがゼロの。</target>
        </trans-unit>
        <trans-unit id="476c74c56a725e606183d893014a83fc4be3c687" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;&lt;a href=&quot;remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is an incomplete type and not (possibly cv-qualified) &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; が不完全な型であり、（おそらくcv修飾されている） &lt;code&gt;void&lt;/code&gt; ではない場合の動作は未定義です。。</target>
        </trans-unit>
        <trans-unit id="1ef784ec6729fb716d0e83738d463a642f5a064e" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;&lt;a href=&quot;remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is an incomplete type other than (possibly cv-qualified) &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; が（おそらくcv修飾された） &lt;code&gt;void&lt;/code&gt; 以外の不完全な型である場合の動作は未定義です。。</target>
        </trans-unit>
        <trans-unit id="3512a4717910c6e0ec680f0e9ee0792822982829" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;&lt;a href=&quot;valid&quot;&gt;valid()&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; before the call to this function.</source>
          <target state="translated">この関数の呼び出し前に &lt;code&gt;&lt;a href=&quot;valid&quot;&gt;valid()&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="d9de1ac8e09598bd1314c36343d514e145b20e5a" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;Allocator&lt;/code&gt; does not propagate on swap and the allocators of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; are unequal.</source>
          <target state="translated">&lt;code&gt;Allocator&lt;/code&gt; がswapで伝播せず、 &lt;code&gt;*this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; のアロケーターが等しくない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="e1eb022d90c2587b502830f55c339645ff1ae6db" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;Key&lt;/code&gt; is not &lt;a href=&quot;../../named_req/equalitycomparable&quot;&gt;EqualityComparable&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; が&lt;a href=&quot;../../named_req/equalitycomparable&quot;&gt;EqualityComparable&lt;/a&gt;でない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="735ab6f78eae524da546644a47d6f981e069b743" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;Key&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt; are not &lt;a href=&quot;../../named_req/equalitycomparable&quot;&gt;EqualityComparable&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; が&lt;a href=&quot;../../named_req/equalitycomparable&quot;&gt;EqualityComparableで&lt;/a&gt;ない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="82a17b18b659f4ccc9ce4566182a3cc7f42114d5" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;Len == 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Len == 0&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="59a8e068249dac51d245ed2c490d5c1490704809" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;T&lt;/code&gt; is an incomplete type other than (possibly cv-qualified) &lt;code&gt;void&lt;/code&gt; or array of unknown bound.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が（おそらくcv修飾された） &lt;code&gt;void&lt;/code&gt; 以外の不完全な型である場合の動作は未定義です。または未知の境界の配列。</target>
        </trans-unit>
        <trans-unit id="0a1770e1354089d9317ac474ffc747e7d82a8c14" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;a&amp;gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a&amp;gt;b&lt;/code&gt; の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="3b63ea882cbcdea68d7571db64ae9203a71aaf73" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;base.size() != exp.size()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;base.size() != exp.size()&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="67d354f1293c1b737ce0d288b1b9be686bda37d3" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;binary_op&lt;/code&gt; modifies any element or invalidates any iterator in [first; last], including the end iterator.</source>
          <target state="translated">&lt;code&gt;binary_op&lt;/code&gt; が要素を変更したり、[first;内のイテレータを無効にしたりした場合の動作は未定義です。最後]、終了反復子を含みます。</target>
        </trans-unit>
        <trans-unit id="469e1d9d1c4068bbf6e1c2e697e7ffac8b8ba7f6" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;d_last&lt;/code&gt; is within &lt;code&gt;(first, last]&lt;/code&gt;. &lt;a href=&quot;move&quot;&gt; std::move&lt;/a&gt; must be used instead of &lt;code&gt;std::move_backward&lt;/code&gt; in that case.</source>
          <target state="translated">場合の動作は未定義である &lt;code&gt;d_last&lt;/code&gt; が範囲内である &lt;code&gt;(first, last]&lt;/code&gt; 。&lt;a href=&quot;move&quot;&gt;STD ::移動が&lt;/a&gt;代わりに使用されなければならない &lt;code&gt;std::move_backward&lt;/code&gt; その場合には。</target>
        </trans-unit>
        <trans-unit id="6a69976aa807aa840671bdf8c84727126ce414a6" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;d_last&lt;/code&gt; is within &lt;code&gt;(first, last]&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;copy&quot;&gt;std::copy&lt;/a&gt;&lt;/code&gt; must be used instead of &lt;code&gt;std::copy_backward&lt;/code&gt; in that case.</source>
          <target state="translated">場合の動作は未定義である &lt;code&gt;d_last&lt;/code&gt; は内にある &lt;code&gt;(first, last]&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;copy&quot;&gt;std::copy&lt;/a&gt;&lt;/code&gt; 代わりに使用されなければならない &lt;code&gt;std::copy_backward&lt;/code&gt; その場合には。</target>
        </trans-unit>
        <trans-unit id="47d791dc5191e81ae3d09e89daf7bf07163ce6b8" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; are iterators into &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; が &lt;code&gt;*this&lt;/code&gt; へのイテレータである場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="c6f3ff6f9cbc2b439afb2795f2f721f59948f3bf" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;g&lt;/code&gt; has volatile-qualified type.</source>
          <target state="translated">&lt;code&gt;g&lt;/code&gt; がvolatile修飾型の場合の動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="2e9b7d5ca68b1370aed4912faec1a4760bc6179d" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;get() == nullptr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get() == nullptr&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="6f4c18e6c7b6aea27fce5ed64368841d49ce9361" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;get_allocator() != source.get_allocator()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get_allocator() != source.get_allocator()&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="6eab0581058a4c2b12e5109fd370a8ece52140ed" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;i.result != std::chrono::local_info::ambiguous&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;i.result != std::chrono::local_info::ambiguous&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="200bd29a30796e7a2a3ff517a5b5bad4ed78c850" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;i.result != std::chrono::local_info::nonexistent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;i.result != std::chrono::local_info::nonexistent&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="df9572d7c8906a33d2e15c5a66892b297a9356be" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;last&lt;/code&gt; is not reachable from &lt;code&gt;first&lt;/code&gt; by (possibly repeatedly) incrementing &lt;code&gt;first&lt;/code&gt;.</source>
          <target state="translated">場合の動作は未定義である &lt;code&gt;last&lt;/code&gt; から到達できない &lt;code&gt;first&lt;/code&gt; インクリメント（おそらく繰り返し）によって &lt;code&gt;first&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="464b76a8eef218307890a469421e1b605b19821f" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;lhs&lt;/code&gt; or &lt;code&gt;rhs&lt;/code&gt; are not pointers to null-terminated strings.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; または &lt;code&gt;rhs&lt;/code&gt; がnullで終了する文字列へのポインターでない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="b44460391a952d80167639892da39becaef08fba" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;lhs&lt;/code&gt; or &lt;code&gt;rhs&lt;/code&gt; are not pointers to null-terminated wide strings.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; または &lt;code&gt;rhs&lt;/code&gt; の場合の動作は未定義ですがnullで終了するワイド文字列へのポインターで。</target>
        </trans-unit>
        <trans-unit id="2cbc83b4c31a10cebd8ea7ff74d24d3b67882e3e" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;m&lt;/code&gt; is destroyed before the &lt;code&gt;lock_guard&lt;/code&gt; object is.</source>
          <target state="translated">&lt;code&gt;lock_guard&lt;/code&gt; オブジェクトが破棄される前に &lt;code&gt;m&lt;/code&gt; が破棄された場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="07f9df56c1dbfe24c25522fd1a56bdba0c1947fd" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;m&lt;/code&gt; is destroyed before the &lt;code&gt;scoped_lock&lt;/code&gt; object is.</source>
          <target state="translated">&lt;code&gt;scoped_lock&lt;/code&gt; オブジェクトが破棄される前に &lt;code&gt;m&lt;/code&gt; が破棄された場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="1433c58daafe2f6adc50c6512f38c69c4063319e" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;n &amp;gt; size()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n &amp;gt; size()&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="6e976404215147707f2898a7fda666454bbfd437" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;r&lt;/code&gt; is negative or NaN, or if &lt;code&gt;theta&lt;/code&gt; is infinite.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; が負またはNaNの場合、または &lt;code&gt;theta&lt;/code&gt; が無限の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="ad1c12decd3487f7e9d9505be86f84f4573eda77" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;size() != v.size()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;size() != v.size()&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="328698c40f8c76810b54bff78f2c1e778e3afda9" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;unary_op&lt;/code&gt;, &lt;code&gt;binary_op&lt;/code&gt;, &lt;code&gt;binary_op1&lt;/code&gt;, or &lt;code&gt;binary_op2&lt;/code&gt; modifies any element or invalidates any iterator in the input ranges, including their end iterators.</source>
          <target state="translated">&lt;code&gt;unary_op&lt;/code&gt; 、 &lt;code&gt;binary_op&lt;/code&gt; 、 &lt;code&gt;binary_op1&lt;/code&gt; 、または &lt;code&gt;binary_op2&lt;/code&gt; の場合の動作は未定義です。要素を変更したり、終了反復子を含む入力範囲内の反復子を無効。</target>
        </trans-unit>
        <trans-unit id="48b55273057377763eaf4481f69ee31839fd7bf3" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;x.size() != y.size()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x.size() != y.size()&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="6ef58144c8fcfd8d89e4718f215607421aaf5e1d" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if &lt;code&gt;|m|&lt;/code&gt;, &lt;code&gt;|n|&lt;/code&gt;, or the least common multiple of &lt;code&gt;|m|&lt;/code&gt; and &lt;code&gt;|n|&lt;/code&gt; is not representable as a value of type &lt;code&gt;&lt;a href=&quot;../types/common_type&quot;&gt;std::common_type_t&lt;/a&gt;&amp;lt;M, N&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;|m|&lt;/code&gt; 場合の動作は未定義です。、 &lt;code&gt;|n|&lt;/code&gt; 、または &lt;code&gt;|m|&lt;/code&gt; 最小公倍数 と &lt;code&gt;|n|&lt;/code&gt; 型 &lt;code&gt;&lt;a href=&quot;../types/common_type&quot;&gt;std::common_type_t&lt;/a&gt;&amp;lt;M, N&amp;gt;&lt;/code&gt; 値として表現できません。</target>
        </trans-unit>
        <trans-unit id="e848deb0f28b1b253878c2a2ace5cb1ba25e1fa0" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if after &lt;code&gt;std::free&lt;/code&gt; returns, an access is made through the pointer &lt;code&gt;ptr&lt;/code&gt; (unless another allocation function happened to result in a pointer value equal to &lt;code&gt;ptr&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;std::free&lt;/code&gt; が返された後、ポインター &lt;code&gt;ptr&lt;/code&gt; を介してアクセスが行われた場合の動作は未定義です（別の割り当て関数が &lt;code&gt;ptr&lt;/code&gt; と等しいポインター値になった場合を除く）。</target>
        </trans-unit>
        <trans-unit id="382731f74485efa9af2996234b21df03cf6b975e" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if alignment is not a power of two.</source>
          <target state="translated">アラインメントが2の累乗でない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="d06e069b4a8563c91c2582a692292a002622d32d" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if any member function other than the destructor, the copy-assignment operator, the move-assignment operator, or &lt;code&gt;valid&lt;/code&gt; is called on a &lt;code&gt;shared_future &lt;/code&gt; that does not refer to shared state (although implementations are encouraged to throw &lt;code&gt;&lt;a href=&quot;../future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; indicating &lt;code&gt;no_state&lt;/code&gt; in this case). It is valid to move or copy from a shared_future object for which &lt;code&gt;valid()&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デストラクタ、コピー割り当て演算子、移動割り当て演算子、または &lt;code&gt;valid&lt;/code&gt; 以外のメンバー関数が共有状態を参照しない &lt;code&gt;shared_future &lt;/code&gt; で呼び出された場合の動作は未定義です（ただし、実装では &lt;code&gt;&lt;a href=&quot;../future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; をスローすることをお勧めします）この場合、 &lt;code&gt;no_state&lt;/code&gt; を示します）。 &lt;code&gt;valid()&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; であるshared_futureオブジェクトから移動またはコピーすることは有効です。</target>
        </trans-unit>
        <trans-unit id="cc5d01f26b171ac39957879df053b774c1281eb1" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if any member function other than the destructor, the move-assignment operator, or &lt;code&gt;valid&lt;/code&gt; is called on a &lt;code&gt;future &lt;/code&gt; that does not refer to shared state (although implementations are encouraged to throw &lt;code&gt;&lt;a href=&quot;../future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; indicating &lt;code&gt;no_state&lt;/code&gt; in this case). It is valid to move from a future object for which &lt;code&gt;valid()&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デストラクタ、ムーブ代入演算子以外、または任意のメンバ関数場合の動作は未定義である &lt;code&gt;valid&lt;/code&gt; 上で呼び出され &lt;code&gt;future &lt;/code&gt; 共有状態を指すものではない（実装をスローすることが奨励されているが &lt;code&gt;&lt;a href=&quot;../future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; 示す &lt;code&gt;no_state&lt;/code&gt; をこのケースで） 。 &lt;code&gt;valid()&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; である将来のオブジェクトから移動することは有効です。</target>
        </trans-unit>
        <trans-unit id="62628ae7a2e9ed6f36760144718a5aa1f461c465" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if any member of &lt;code&gt;*time_ptr&lt;/code&gt; is outside its normal range.</source>
          <target state="translated">&lt;code&gt;*time_ptr&lt;/code&gt; のいずれかのメンバーが通常の範囲外にある場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="7b08c4eddc360f739319b35a38b8c070e8e78766" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if any of the values in &lt;code&gt;v&lt;/code&gt; is computed during the assignment and depends on any of the values in &lt;code&gt;*this&lt;/code&gt;, that is, the expression on the right side of the assignment refers to a variable in the left side of the assignment.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; の値のいずれかが割り当て中に計算され、 &lt;code&gt;*this&lt;/code&gt; の値のいずれかに依存する場合、つまり、割り当ての右側の式が割り当ての左側の変数を参照する場合の動作は未定義です。。</target>
        </trans-unit>
        <trans-unit id="d9d5b90cd8c93c2f355de5aef5abe9774372544d" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if any signal handler performs any of the following:</source>
          <target state="translated">シグナルハンドラが以下のいずれかを実行した場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="3f419695a80fdd6f9b48c829076db22a0d882bf7" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if any value in &lt;code&gt;submatches&lt;/code&gt; is less than &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;submatches&lt;/code&gt; いずれかの値が &lt;code&gt;-1&lt;/code&gt; 未満の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="4d24b4310a27da92c3b82ad83df3a91418db2bf1" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if copied character ranges overlap, i.e. &lt;code&gt;src&lt;/code&gt; is in [&lt;code&gt;dest&lt;/code&gt;, &lt;code&gt;dest + count&lt;/code&gt;).</source>
          <target state="translated">コピーされた文字範囲が重複する場合、つまり &lt;code&gt;src&lt;/code&gt; が[ &lt;code&gt;dest&lt;/code&gt; 、 &lt;code&gt;dest + count&lt;/code&gt; 場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="6683df606df41a9fba0766574236a56020142574" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if either &lt;code&gt;Offset&lt;/code&gt; or &lt;code&gt;Count&lt;/code&gt; is out of range. This happens if.</source>
          <target state="translated">&lt;code&gt;Offset&lt;/code&gt; または &lt;code&gt;Count&lt;/code&gt; が範囲外の場合の動作は未定義です。これは場合に起こります。</target>
        </trans-unit>
        <trans-unit id="3d55697ed5f2c15128a892f22aa16ff4ee37bf2b" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if more than one replacement is provided in the program for any of the replaceable allocation function, or if a replacement is defined with the &lt;code&gt;inline&lt;/code&gt; specifier. The program is ill-formed if a replacement is defined in namespace other than global namespace, or if it is defined as a static non-member function at global scope.</source>
          <target state="translated">プログラムで置き換え可能な割り当て関数のいずれかに対して複数の置き換えが提供されている場合、または置き換えが &lt;code&gt;inline&lt;/code&gt; 指定子で定義されている場合の動作は未定義です。置換がグローバル名前空間以外の名前空間で定義されている場合、またはグローバルスコープで静的な非メンバー関数として定義されている場合、プログラムの形式は正しくありません。</target>
        </trans-unit>
        <trans-unit id="038cb1cc5613100b7d719c178ef2592ef2ae999d" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if more than one replacement is provided in the program or if a replacement is defined with the &lt;code&gt;inline&lt;/code&gt; specifier, the program is ill-formed if a replacement is defined in namespace other than global namespace, or if it is defined as a static non-member function at global scope.</source>
          <target state="translated">プログラムで複数の置換が提供されている場合、または置換が &lt;code&gt;inline&lt;/code&gt; 指定子で定義されている場合、置換がグローバル名前空間以外の名前空間で定義されている場合、またはそれがグローバルスコープでの静的な非メンバー関数。</target>
        </trans-unit>
        <trans-unit id="a20a9dd22a45ec31e734ddcf820693b4431349ff" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the &lt;code&gt;dest&lt;/code&gt; array is not large enough. The behavior is undefined if &lt;code&gt;dest&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt; overlap.</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; 配列が十分に大きくない場合の動作は未定義です。 &lt;code&gt;dest&lt;/code&gt; と &lt;code&gt;src&lt;/code&gt; が重複する場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="c627b5e29de481b45829af3c304be965f578d75f" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the &lt;code&gt;dest&lt;/code&gt; array is not large enough. The behavior is undefined if the strings overlap.</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; 配列が十分に大きくない場合の動作は未定義です。文字列が重複する場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="e672d6612cb2434a04c81125a1da0fb7697ed68f" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the array is not already partitioned in ascending order with respect to key, according to the same criterion that &lt;code&gt;comp&lt;/code&gt; uses.</source>
          <target state="translated">&lt;code&gt;comp&lt;/code&gt; が使用するのと同じ基準に従って、配列がキーに関して昇順でまだ分割されていない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="eaab6c269f8944718df63cc4ed6bf2f8b08bc9eb" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the calendar year indicated by &lt;code&gt;time_ptr-&amp;gt;tm_year&lt;/code&gt; has more than 4 digits or is less than the year 1000.</source>
          <target state="translated">&lt;code&gt;time_ptr-&amp;gt;tm_year&lt;/code&gt; で示される暦年が4桁を超えるか、1000年未満の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="107f0ca619ed1641b4b32723442cde5cad358fd0" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the calling thread already owns the mutex (except if m is &lt;code&gt;&lt;a href=&quot;../thread/recursive_mutex&quot;&gt;std::recursive_mutex&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../thread/recursive_timed_mutex&quot;&gt;std::recursive_timed_mutex&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">呼び出しスレッドがすでにミューテックスを所有している場合の動作は未定義です（mが &lt;code&gt;&lt;a href=&quot;../thread/recursive_mutex&quot;&gt;std::recursive_mutex&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../thread/recursive_timed_mutex&quot;&gt;std::recursive_timed_mutex&lt;/a&gt;&lt;/code&gt; 場合を除く）</target>
        </trans-unit>
        <trans-unit id="9597012e6d1c284aaae1be16fd72723a227375b3" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the calling thread already owns the mutex (except if m is &lt;code&gt;&lt;a href=&quot;../thread/recursive_timed_mutex&quot;&gt;std::recursive_timed_mutex&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">呼び出しスレッドがすでにミューテックスを所有している場合の動作は未定義です（mが &lt;code&gt;&lt;a href=&quot;../thread/recursive_timed_mutex&quot;&gt;std::recursive_timed_mutex&lt;/a&gt;&lt;/code&gt; 場合を除く）。</target>
        </trans-unit>
        <trans-unit id="e25ed56c543893145387cece9238aaefbb7962a5" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the calling thread already owns the mutex in any mode</source>
          <target state="translated">呼び出し側のスレッドが既にどのモードでもミューテックスを所有している場合、この動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="455f5ecf93a29b785f85a3650b334e47e270bc5d" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the calling thread already owns the mutex in any mode.</source>
          <target state="translated">呼び出したスレッドがどのモードでも既にミューテックスを所有している場合、この動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="bf93000628919e2e36b8899ced4ef2e9aa80147b" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the calling thread does not own the mutex.</source>
          <target state="translated">呼び出し元のスレッドがミューテックスを所有していない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="e6f8ed0e1bf41e45825ee88de1ec4684196a97f1" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the catch-clause of a function-try-block used on a constructor or a destructor accesses a base or a non-static member of the object.</source>
          <target state="translated">コンストラクタやデストラクタで使用されている function-try-block のキャッチフレーズが、オブジェクトの基底または非静的メンバにアクセスした場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="10ffe7d432f0c823f0efa899069f10112e24be9a" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the destination array is not large enough for the contents of both &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; and the terminating null character.</source>
          <target state="translated">コピー先の配列が &lt;code&gt;src&lt;/code&gt; と &lt;code&gt;dest&lt;/code&gt; の両方の内容および終端のnull文字に対して十分な大きさでない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="75927258cde7082c64c027c4137cbfc360391f60" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the destination array is not large enough for the contents of both &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; and the terminating null wide character.</source>
          <target state="translated">コピー先の配列が &lt;code&gt;str&lt;/code&gt; と &lt;code&gt;dest&lt;/code&gt; の両方の内容と終端のnullワイド文字に対して十分な大きさでない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="de04579470349e59afe3e218735c91270b339460" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the destination range overlaps either of the input ranges (the input ranges may overlap each other).</source>
          <target state="translated">宛先範囲が入力範囲のいずれかと重なっている場合(入力範囲は互いに重なっている可能性があります)、この動作は不定です。</target>
        </trans-unit>
        <trans-unit id="a37e086cae0a28fd2aae005d5f6cf8a3dd482110" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the input and output ranges overlap in any way.</source>
          <target state="translated">入力範囲と出力範囲が何らかの形で重なっている場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="b4fe485020cbf1d9a076309617005f2501c31bbb" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the input range overlaps either of the output ranges.</source>
          <target state="translated">入力範囲がどちらかの出力範囲と重なっている場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="5ebe26f9bedb970f8dfbe805816ca874ada90946" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the iterator is end-of-sequence iterator.</source>
          <target state="translated">この動作は、イテレータが連続終了イテレータの場合は未定義です。</target>
        </trans-unit>
        <trans-unit id="1c2d58529416e22c80b57ff0a56588fb399c9711" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the iterator is end-of-stream iterator.</source>
          <target state="translated">イテレータがストリーム終了イテレータの場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="cd152c1ef8ff8aa5b3b3aae81e6c153ee0d2ce45" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the memory area referred to by &lt;code&gt;ptr&lt;/code&gt; has already been deallocated, that is, &lt;code&gt;std::free&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;realloc&quot;&gt;std::realloc&lt;/a&gt;&lt;/code&gt; has already been called with &lt;code&gt;ptr&lt;/code&gt; as the argument and no calls to &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;aligned_alloc&quot;&gt;std::aligned_alloc&lt;/a&gt;&lt;/code&gt;(since C++17), or &lt;code&gt;&lt;a href=&quot;realloc&quot;&gt;std::realloc&lt;/a&gt;&lt;/code&gt; resulted in a pointer equal to &lt;code&gt;ptr&lt;/code&gt; afterwards.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; によって参照されるメモリ領域がすでに割り当て解除されている場合、つまり &lt;code&gt;std::free&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;realloc&quot;&gt;std::realloc&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;ptr&lt;/code&gt; を引数としてすでに呼び出されており、 &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;aligned_alloc&quot;&gt;std::aligned_alloc&lt;/a&gt;&lt;/code&gt; （C ++ 17以降）、または &lt;code&gt;&lt;a href=&quot;realloc&quot;&gt;std::realloc&lt;/a&gt;&lt;/code&gt; 結果、ポインターは後で &lt;code&gt;ptr&lt;/code&gt; に等しくなりました。</target>
        </trans-unit>
        <trans-unit id="a3b10348058d0a2ba715c0cfc12ae65b467b766d" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the mode is not one of the strings listed above. Some implementations define additional supported modes (e.g. &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/yeby3zcb.aspx&quot;&gt;Windows&lt;/a&gt;).</source>
          <target state="translated">モードが上記の文字列のいずれでもない場合の動作は未定義です。一部の実装では、サポートされる追加のモードが定義されています（&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/yeby3zcb.aspx&quot;&gt;Windowsなど&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="da1bb7b6150b3145c9cf5771803ad15255ccd6ca" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the mutex is owned by any thread or if any thread terminates while holding any ownership of the mutex.</source>
          <target state="translated">この動作は、ミューテックスがどのスレッドにも所有されている場合や、ミューテックスの所有権を保持している間にスレッドが終了した場合には定義されません。</target>
        </trans-unit>
        <trans-unit id="8a736eddc553ced80be2216fe88e77227b189294" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the path has no filename component (&lt;a href=&quot;has_path&quot;&gt;&lt;code&gt;has_filename&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">パスにファイル名コンポーネントがない場合の動作は未定義です（&lt;a href=&quot;has_path&quot;&gt; &lt;code&gt;has_filename&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;false&lt;/code&gt; を返します）。</target>
        </trans-unit>
        <trans-unit id="4e88a36bd0409a39cc3f312c7891e7e04c61f4ec" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the specified sequence of increments or decrements would require that a non-incrementable iterator (such as the past-the-end iterator) is incremented, or that a non-decrementable iterator (such as the front iterator or the singular iterator) is decremented.</source>
          <target state="translated">指定されたインクリメントまたはデクリメントのシーケンスが、インクリメント不可能なイテレータ(過去の終わりのイテレータなど)をインクリメントしたり、デクリメント不可能なイテレータ(前のイテレータや特異なイテレータなど)をデクリメントしたりすることを必要とする場合、この動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="fefc04e4dd8c7088f908a5a38768eb505eba3844" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the stored pointer is null or if &lt;code&gt;idx&lt;/code&gt; is negative.</source>
          <target state="translated">格納されたポインタがnullの場合、または &lt;code&gt;idx&lt;/code&gt; が負の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="07d8fb77eabde35598fe8c80befa5c3efd1b6afe" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the strings overlap.</source>
          <target state="translated">文字列が重なった場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="467de494ac1ab3cfba0347a44deafd4ffc902185" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the time zone pointer (initialized as described above) does not refer to a time zone.</source>
          <target state="translated">タイムゾーンポインタ(上記のように初期化されている)がタイムゾーンを参照していない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="e4f6e5fd0799a493d3ed5fbd1465ab009b4ab908" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the value of &lt;code&gt;ch&lt;/code&gt; is not representable as &lt;code&gt;unsigned char&lt;/code&gt; and is not equal to &lt;code&gt;&lt;a href=&quot;../../io/c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ch&lt;/code&gt; の値が &lt;code&gt;unsigned char&lt;/code&gt; として表現できず、 &lt;code&gt;&lt;a href=&quot;../../io/c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; と等しくない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="46390890d024c2fe54bd86ac81e354e42a17be4a" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the value of &lt;code&gt;ch&lt;/code&gt; is not representable as &lt;code&gt;unsigned char&lt;/code&gt; or is not equal to &lt;code&gt;&lt;a href=&quot;../../io/c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ch&lt;/code&gt; の値が &lt;code&gt;unsigned char&lt;/code&gt; として表現できない場合、または &lt;code&gt;&lt;a href=&quot;../../io/c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; と等しくない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="be24c4852e2e843d7e203b20ddb3314d5ddf20fe" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the value of &lt;code&gt;lo&lt;/code&gt; is greater than &lt;code&gt;hi&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lo&lt;/code&gt; の値が &lt;code&gt;hi&lt;/code&gt; より大きい場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="4523c55aa073bbcabcbf7211d98894138b5c4a1e" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the value of &lt;code&gt;ptr&lt;/code&gt; does not equal a value returned earlier by &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;aligned_alloc&quot;&gt;std::aligned_alloc&lt;/a&gt;&lt;/code&gt;(since C++17), or &lt;code&gt;&lt;a href=&quot;realloc&quot;&gt;std::realloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; の値が &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc&lt;/a&gt;&lt;/code&gt; によって以前に返された値と等しくない場合の動作は未定義です。、 &lt;code&gt;&lt;a href=&quot;aligned_alloc&quot;&gt;std::aligned_alloc&lt;/a&gt;&lt;/code&gt; （C ++ 17以降）、または &lt;code&gt;&lt;a href=&quot;realloc&quot;&gt;std::realloc&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="adacf118e6e6367d1ffb7672550f2db2bee36eb9" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if the value of the pointer &lt;code&gt;stream&lt;/code&gt; is used after &lt;code&gt;fclose&lt;/code&gt; returns.</source>
          <target state="translated">&lt;code&gt;fclose&lt;/code&gt; が戻った後にポインター &lt;code&gt;stream&lt;/code&gt; 値が使用された場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="d4fc5e3be71e180961358ca48ec87dd4644a1d35" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if there is no null character in the wide character array pointed to by &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; が指すワイド文字配列にnull文字がない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="ca13d3610cc8acabf5605d3450cc86e88d5a1571" translate="yes" xml:space="preserve">
          <source>The behavior is undefined unless &lt;code&gt;pred_.has_value()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pred_.has_value()&lt;/code&gt; でない限り、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="9674318ad2388398bc699c0f1e758e7d7459f5e2" translate="yes" xml:space="preserve">
          <source>The behavior is undefined unless &lt;code&gt;ready() == true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ready() == true&lt;/code&gt; ない限り、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="406f2fe80d5a065bb971ef51da29f2af631a441d" translate="yes" xml:space="preserve">
          <source>The behavior is undefined unless lvalues of type &lt;code&gt;T_i&lt;/code&gt; are &lt;a href=&quot;../../named_req/swappable&quot;&gt;Swappable&lt;/a&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types...&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;T_i&lt;/code&gt; の左辺値が&lt;a href=&quot;../../named_req/swappable&quot;&gt;スワップ可能で&lt;/a&gt;あり、 &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; が &lt;code&gt;Types...&lt;/code&gt; 内のすべての &lt;code&gt;T_i&lt;/code&gt; に対して &lt;code&gt;true&lt;/code&gt; でない限り、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="917418d84788b1fdd126a7e96c4addb503f82edf" translate="yes" xml:space="preserve">
          <source>The behavior may be undefined for the values of time_t that result in the string longer than 25 characters (e.g. year 10000).</source>
          <target state="translated">time_tの値が25文字よりも長い文字列(例えば10000年)になると、この動作は未定義になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2f2a15c80a11a41121cee37ced35f06f62fddb0b" translate="yes" xml:space="preserve">
          <source>The behavior of (3) when &lt;code&gt;!this-&amp;gt;ok()&lt;/code&gt; is not currently defined. It likely will be defined to return some invalid day in that case (such as &lt;code&gt;&lt;a href=&quot;../day&quot;&gt;std::chrono::day&lt;/a&gt;(0)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;!this-&amp;gt;ok()&lt;/code&gt; が現在定義されていない場合の（3）の動作。その場合は、無効な日を返すように定義されている可能性があります（ &lt;code&gt;&lt;a href=&quot;../day&quot;&gt;std::chrono::day&lt;/a&gt;(0)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e5b4ba4a6d915fb2e3df2c635049c6d76bc1457c" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;format&lt;/code&gt; is undefined if &lt;code&gt;ready() != true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ready() != true&lt;/code&gt; 場合、 &lt;code&gt;format&lt;/code&gt; の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="ca203a86e906eeb394e7069d318a97c64eebac21" translate="yes" xml:space="preserve">
          <source>The behavior of a program is undefined if a &lt;code&gt;mutex&lt;/code&gt; is destroyed while still owned by any threads, or a thread terminates while owning a &lt;code&gt;mutex&lt;/code&gt;. The &lt;code&gt;mutex&lt;/code&gt; class satisfies all requirements of &lt;a href=&quot;../named_req/mutex&quot;&gt;Mutex&lt;/a&gt; and &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">スレッドが所有している間に &lt;code&gt;mutex&lt;/code&gt; が破棄された場合、または &lt;code&gt;mutex&lt;/code&gt; を所有しているときにスレッドが終了した場合のプログラムの動作は未定義です。 &lt;code&gt;mutex&lt;/code&gt; クラスを満たすのすべての要件&lt;a href=&quot;../named_req/mutex&quot;&gt;ミューテックス&lt;/a&gt;と&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d637b696daf6b97a6b242ae05bf8fc254c5c107d" translate="yes" xml:space="preserve">
          <source>The behavior of a program is undefined if a &lt;code&gt;recursive_mutex&lt;/code&gt; is destroyed while still owned by some thread. The &lt;code&gt;recursive_mutex&lt;/code&gt; class satisfies all requirements of &lt;a href=&quot;../named_req/mutex&quot;&gt;Mutex&lt;/a&gt; and &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">あるスレッドがまだ所有しているときに &lt;code&gt;recursive_mutex&lt;/code&gt; が破棄された場合のプログラムの動作は未定義です。 &lt;code&gt;recursive_mutex&lt;/code&gt; のクラスを満たすのすべての要件&lt;a href=&quot;../named_req/mutex&quot;&gt;ミューテックス&lt;/a&gt;と&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d49cad771a61588b17892aad75be8c0152d1db33" translate="yes" xml:space="preserve">
          <source>The behavior of a program that adds specializations for &lt;code&gt;is_clock&lt;/code&gt; is undefined.</source>
          <target state="translated">&lt;code&gt;is_clock&lt;/code&gt; の特殊化を追加するプログラムの動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="c62ef06b85f3980f7319fc86df63b92629337cbc" translate="yes" xml:space="preserve">
          <source>The behavior of a program that adds specializations for &lt;code&gt;std::is_execution_policy&lt;/code&gt; is undefined.</source>
          <target state="translated">&lt;code&gt;std::is_execution_policy&lt;/code&gt; 特殊化を追加するプログラムの動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="8f078fbe14df7a291d872a9486b4bd6555ed5825" translate="yes" xml:space="preserve">
          <source>The behavior of a program that attempts to compare a &lt;code&gt;partial_ordering&lt;/code&gt; with anything other than the integer literal &lt;code&gt;​0​&lt;/code&gt; is undefined.</source>
          <target state="translated">試みは比較すること、プログラムの動作 &lt;code&gt;partial_ordering&lt;/code&gt; を整数リテラル以外で &lt;code&gt;​0​&lt;/code&gt; 定義されていません。</target>
        </trans-unit>
        <trans-unit id="b7ee937b20b027f674ae8d49d4264fc5e59233e5" translate="yes" xml:space="preserve">
          <source>The behavior of a program that attempts to compare a &lt;code&gt;strong_equality&lt;/code&gt; with anything other than the integer literal &lt;code&gt;​0​&lt;/code&gt; is undefined.</source>
          <target state="translated">試みは比較すること、プログラムの動作 &lt;code&gt;strong_equality&lt;/code&gt; を整数リテラル以外で &lt;code&gt;​0​&lt;/code&gt; 定義されていません。</target>
        </trans-unit>
        <trans-unit id="b1b3bcf18493a49d0f0a3e38ba5ff9aa51112925" translate="yes" xml:space="preserve">
          <source>The behavior of a program that attempts to compare a &lt;code&gt;strong_ordering&lt;/code&gt; with anything other than the integer literal &lt;code&gt;​0​&lt;/code&gt; is undefined.</source>
          <target state="translated">試みは比較すること、プログラムの動作 &lt;code&gt;strong_ordering&lt;/code&gt; を整数リテラル以外で &lt;code&gt;​0​&lt;/code&gt; 定義されていません。</target>
        </trans-unit>
        <trans-unit id="0d61242b78813c2cd2a1388ea1adcd3850a86e08" translate="yes" xml:space="preserve">
          <source>The behavior of a program that attempts to compare a &lt;code&gt;weak_equality&lt;/code&gt; with anything other than the integer literal &lt;code&gt;​0​&lt;/code&gt; is undefined.</source>
          <target state="translated">試みは比較すること、プログラムの動作 &lt;code&gt;weak_equality&lt;/code&gt; を整数リテラル以外で &lt;code&gt;​0​&lt;/code&gt; 定義されていません。</target>
        </trans-unit>
        <trans-unit id="f409f18748c9c4847731aabfeae21ea3a47fd063" translate="yes" xml:space="preserve">
          <source>The behavior of a program that attempts to compare a &lt;code&gt;weak_ordering&lt;/code&gt; with anything other than the integer literal &lt;code&gt;​0​&lt;/code&gt; is undefined.</source>
          <target state="translated">試みは比較すること、プログラムの動作 &lt;code&gt;weak_ordering&lt;/code&gt; を整数リテラル以外で &lt;code&gt;​0​&lt;/code&gt; 定義されていません。</target>
        </trans-unit>
        <trans-unit id="5b94d39763b7ebd91bb01eceb89eba346e398751" translate="yes" xml:space="preserve">
          <source>The behavior of every builtin compound-assignment expression &lt;code&gt;E1 op= E2&lt;/code&gt; (where E1 is a modifiable lvalue expression and E2 is an rvalue expression or a</source>
          <target state="translated">すべての組み込み複合割り当て式の動作 &lt;code&gt;E1 op= E2&lt;/code&gt; （E1は変更可能な左辺値式であり、E2は右辺値式または</target>
        </trans-unit>
        <trans-unit id="e6954be3777df41717ca04669e7dc00a5a0665f5" translate="yes" xml:space="preserve">
          <source>The behavior of the &lt;code&gt;&lt;a href=&quot;../utility/variadic/va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt; macro is undefined if the last parameter before the ellipsis has reference type, or has type that is not compatible with the type that results from default argument promotions.</source>
          <target state="translated">省略記号の前の最後のパラメーターに参照型がある場合、またはデフォルトの引数の昇格から生じる型と互換性のない型がある場合、 &lt;code&gt;&lt;a href=&quot;../utility/variadic/va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt; マクロの動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="8074475f951313711bd97c915bb6378866643af6" translate="yes" xml:space="preserve">
          <source>The behavior of the program is undefined if any of the three pragmas above appear in any context other than outside all external declarations or preceding all explicit declarations and statements inside a compound statement.</source>
          <target state="translated">上記の3つのプラグマのいずれかが、すべての外部宣言の外側、または複合文の中のすべての明示的な宣言と文の前以外のコンテキストに現れた場合、プログラムの動作は不定です。</target>
        </trans-unit>
        <trans-unit id="9bc2f5dca6b44b3d5ac638731b105153f018e41b" translate="yes" xml:space="preserve">
          <source>The behavior of these functions is undefined unless the corresponding cast from &lt;code&gt;U*&lt;/code&gt; to &lt;code&gt;T*&lt;/code&gt; is well formed:</source>
          <target state="translated">これらの関数の動作は、対応する &lt;code&gt;U*&lt;/code&gt; から &lt;code&gt;T*&lt;/code&gt; へのキャストが適切に形成されていない限り、未定義です。</target>
        </trans-unit>
        <trans-unit id="09e007f07c00729f2bd588f5cb9fcab293788a91" translate="yes" xml:space="preserve">
          <source>The behavior of these functions is undefined unless:</source>
          <target state="translated">これらの関数の動作は、以下の場合を除いて未定義です。</target>
        </trans-unit>
        <trans-unit id="2d1872e5d43013c5012c32fbca7899bc44f2512b" translate="yes" xml:space="preserve">
          <source>The behavior of this function is equivalent to &lt;code&gt;&lt;a href=&quot;log&quot;&gt;std::log&lt;/a&gt;(z)/&lt;a href=&quot;../math/log&quot;&gt;std::log&lt;/a&gt;(T(10))&lt;/code&gt;.</source>
          <target state="translated">この関数の動作は &lt;code&gt;&lt;a href=&quot;log&quot;&gt;std::log&lt;/a&gt;(z)/&lt;a href=&quot;../math/log&quot;&gt;std::log&lt;/a&gt;(T(10))&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="e78658dc32dbfdd3ab57b055b36ff50a24fbe1eb" translate="yes" xml:space="preserve">
          <source>The behavior of this function is highly implementation-specific. For example, when used with &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::ifstream&lt;/a&gt;&lt;/code&gt;, some library implementations fill the underlying filebuf with data as soon as the file is opened (and readsome() on such implementations reads data, potentially, but not necessarily, the entire file), while other implementations only read from file when an actual input operation is requested (and readsome() issued after file opening never extracts any characters). Likewise, a call to &lt;code&gt;&lt;a href=&quot;../cin&quot;&gt;std::cin&lt;/a&gt;.readsome()&lt;/code&gt; may return all pending unprocessed console input, or may always return zero and extract no characters.</source>
          <target state="translated">この関数の動作は、実装によって大きく異なります。たとえば、 &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::ifstream&lt;/a&gt;&lt;/code&gt; と一緒に使用すると、一部のライブラリ実装は、ファイルが開かれるとすぐに基礎となるfilebufにデータを入力します（そのような実装のreadsome（）はデータを読み取る可能性がありますが、必ずしもファイル全体を読み取る必要はありません）。他の実装では、実際の入力操作が要求されたときにのみファイルから読み取ります（ファイルを開いた後に発行されたreadsome（）は文字を抽出しません）。同様に、 &lt;code&gt;&lt;a href=&quot;../cin&quot;&gt;std::cin&lt;/a&gt;.readsome()&lt;/code&gt; 呼び出すと、保留中の未処理のコンソール入力がすべて返されるか、常にゼロが返されて文字が抽出されない場合があります。</target>
        </trans-unit>
        <trans-unit id="758a6e7c6a9e16cd02a8726a32f107929f57f9bd" translate="yes" xml:space="preserve">
          <source>The behaviour is undefined when the two arguments are valarrays with different sizes.</source>
          <target state="translated">2つの引数が異なるサイズのvalarraysである場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="c08434d32154e6b925a05a299485361cd8506034" translate="yes" xml:space="preserve">
          <source>The binary additive arithmetic operator expressions have the form.</source>
          <target state="translated">二進法の加法演算子の式は形式を持っています。</target>
        </trans-unit>
        <trans-unit id="7176da4edb44fdfb24d715e7d3669be25b36085b" translate="yes" xml:space="preserve">
          <source>The binary multiplicative arithmetic operator expressions have the form.</source>
          <target state="translated">二項の乗算演算子式は、形式を有している。</target>
        </trans-unit>
        <trans-unit id="d1d70c467c5191ec0088e791afe7de4cb3b6b3ea" translate="yes" xml:space="preserve">
          <source>The binary operator % yields the remainder of the integer division of the first operand by the second (after usual arithmetic conversions; note that the operand types must be integral types). If the quotient &lt;code&gt;a/b&lt;/code&gt; is representable in the result type, &lt;code&gt;(a/b)*b + a%b == a&lt;/code&gt;. If the second operand is zero, the behavior is undefined. If the quotient &lt;code&gt;a/b&lt;/code&gt; is not representable in the result type, the behavior of both &lt;code&gt;a/b&lt;/code&gt; and &lt;code&gt;a%b&lt;/code&gt; is undefined (that means &lt;code&gt;INT_MIN%-1&lt;/code&gt; is undefined on 2's complement systems).</source>
          <target state="translated">二項演算子％は、最初のオペランドを2番目のオペランドで除算した剰余を生成します（通常の算術変換の後、オペランドの型は整数型でなければならないことに注意してください）。商 &lt;code&gt;a/b&lt;/code&gt; が結果の型で表現できる場合、 &lt;code&gt;(a/b)*b + a%b == a&lt;/code&gt; 。 2番目のオペランドがゼロの場合、動作は未定義です。商 &lt;code&gt;a/b&lt;/code&gt; が結果タイプで表現できない場合、a &lt;code&gt;a/b&lt;/code&gt; と &lt;code&gt;a%b&lt;/code&gt; の両方の動作は定義されていません（つまり、2の補数システムでは &lt;code&gt;INT_MIN%-1&lt;/code&gt; が定義されていません）。</target>
        </trans-unit>
        <trans-unit id="90b1bb5e76b233c8735f62c8c50b711347fc46d8" translate="yes" xml:space="preserve">
          <source>The binary operator * performs multiplication of its operands (after usual arithmetic conversions), except that, for floating-point multiplication,</source>
          <target state="translated">2進演算子*は、浮動小数点の乗算の場合を除き、そのオペランドの乗算を行います(通常の算術変換後)。</target>
        </trans-unit>
        <trans-unit id="d7a4dafd592df3f084192d6d03e8e8be221a2756" translate="yes" xml:space="preserve">
          <source>The binary operator / divides the first operand by the second (after usual arithmetic conversions).</source>
          <target state="translated">2進演算子/は、第1オペランドを第2オペランドで除算します(通常の算術変換後)。</target>
        </trans-unit>
        <trans-unit id="c4683b3a303b5dfbbf64b647e53044a1b9f6fca7" translate="yes" xml:space="preserve">
          <source>The binary predicate type must define two member types, &lt;code&gt;first_argument_type&lt;/code&gt; and &lt;code&gt;second_argument_type&lt;/code&gt;, that are convertible to the predicate's parameter types. The function objects obtained from &lt;code&gt;&lt;a href=&quot;../../memory/owner_less&quot;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;std::ref&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;std::cref&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;plus&quot;&gt;std::plus&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;minus&quot;&gt;std::minus&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;multiplies&quot;&gt;std::multiplies&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;divides&quot;&gt;std::divides&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;modulus&quot;&gt;std::modulus&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;equal_to&quot;&gt;std::equal_to&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;not_equal_to&quot;&gt;std::not_equal_to&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;greater&quot;&gt;std::greater&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;less&quot;&gt;std::less&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;greater_equal&quot;&gt;std::greater_equal&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;less_equal&quot;&gt;std::less_equal&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;logical_not&quot;&gt;std::logical_not&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;logical_or&quot;&gt;std::logical_or&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;bit_and&quot;&gt;std::bit_and&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;bit_or&quot;&gt;std::bit_or&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;std::bit_xor&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mem_fn&quot;&gt;std::mem_fn&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../container/map/value_comp&quot;&gt;std::map::value_comp&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../container/multimap/value_comp&quot;&gt;std::multimap::value_comp&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;, or from a call to &lt;code&gt;&lt;a href=&quot;not2&quot;&gt;std::not2&lt;/a&gt;&lt;/code&gt; have these types defined, as are function objects derived from the deprecated &lt;code&gt;&lt;a href=&quot;binary_function&quot;&gt;std::binary_function&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">バイナリ述語型は、述語のパラメーター型に変換可能な2つのメンバー型 &lt;code&gt;first_argument_type&lt;/code&gt; および &lt;code&gt;second_argument_type&lt;/code&gt; を定義する必要があります。 &lt;code&gt;&lt;a href=&quot;../../memory/owner_less&quot;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;std::ref&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;std::cref&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;plus&quot;&gt;std::plus&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;minus&quot;&gt;std::minus&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;multiplies&quot;&gt;std::multiplies&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;divides&quot;&gt;std::divides&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;modulus&quot;&gt;std::modulus&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;equal_to&quot;&gt;std::equal_to&lt;/a&gt;&lt;/code&gt; 、から取得された関数オブジェクト &lt;code&gt;&lt;a href=&quot;not_equal_to&quot;&gt;std::not_equal_to&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;greater&quot;&gt;std::greater&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;less&quot;&gt;std::less&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;greater_equal&quot;&gt;std::greater_equal&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;less_equal&quot;&gt;std::less_equal&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;logical_not&quot;&gt;std::logical_not&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;logical_or&quot;&gt;std::logical_or&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;bit_and&quot;&gt;std::bit_and&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;bit_or&quot;&gt;std::bit_or&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;std::bit_xor&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;mem_fn&quot;&gt;std::mem_fn&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../container/map/value_comp&quot;&gt;std::map::value_comp&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../container/multimap/value_comp&quot;&gt;std::multimap::value_comp&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;not2&quot;&gt;std::not2&lt;/a&gt;&lt;/code&gt; 呼び出しには、これらの型が定義されており、非推奨の &lt;code&gt;&lt;a href=&quot;binary_function&quot;&gt;std::binary_function&lt;/a&gt;&lt;/code&gt; から派生した関数オブジェクトも同様です。</target>
        </trans-unit>
        <trans-unit id="3e74ca064fe8afd8f7fd74a0aad91022a0b4b633" translate="yes" xml:space="preserve">
          <source>The binary predicate type must define two member types, &lt;code&gt;first_argument_type&lt;/code&gt; and &lt;code&gt;second_argument_type&lt;/code&gt;, that are convertible to the predicate's parameter types. The function objects obtained from &lt;code&gt;&lt;a href=&quot;../../memory/owner_less&quot;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;std::ref&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;std::cref&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;plus&quot;&gt;std::plus&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;minus&quot;&gt;std::minus&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;multiplies&quot;&gt;std::multiplies&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;divides&quot;&gt;std::divides&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;modulus&quot;&gt;std::modulus&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;equal_to&quot;&gt;std::equal_to&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;not_equal_to&quot;&gt;std::not_equal_to&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;greater&quot;&gt;std::greater&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;less&quot;&gt;std::less&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;greater_equal&quot;&gt;std::greater_equal&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;less_equal&quot;&gt;std::less_equal&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;logical_not&quot;&gt;std::logical_not&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;logical_or&quot;&gt;std::logical_or&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;bit_and&quot;&gt;std::bit_and&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;bit_or&quot;&gt;std::bit_or&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;std::bit_xor&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mem_fn&quot;&gt;std::mem_fn&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;std::map::value_comp&lt;/code&gt;, &lt;code&gt;std::multimap::value_comp&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;, or from another call to &lt;code&gt;std::not2&lt;/code&gt; have these types defined, as are function objects derived from the deprecated &lt;code&gt;&lt;a href=&quot;binary_function&quot;&gt;std::binary_function&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">バイナリ述語型は、述語のパラメーター型に変換可能な2つのメンバー型 &lt;code&gt;first_argument_type&lt;/code&gt; および &lt;code&gt;second_argument_type&lt;/code&gt; を定義する必要があります。 &lt;code&gt;&lt;a href=&quot;../../memory/owner_less&quot;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;std::ref&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;std::cref&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;plus&quot;&gt;std::plus&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;minus&quot;&gt;std::minus&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;multiplies&quot;&gt;std::multiplies&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;divides&quot;&gt;std::divides&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;modulus&quot;&gt;std::modulus&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;equal_to&quot;&gt;std::equal_to&lt;/a&gt;&lt;/code&gt; 、から取得された関数オブジェクト &lt;code&gt;&lt;a href=&quot;not_equal_to&quot;&gt;std::not_equal_to&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;greater&quot;&gt;std::greater&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;less&quot;&gt;std::less&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;greater_equal&quot;&gt;std::greater_equal&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;less_equal&quot;&gt;std::less_equal&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;logical_not&quot;&gt;std::logical_not&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;logical_or&quot;&gt;std::logical_or&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;bit_and&quot;&gt;std::bit_and&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;bit_or&quot;&gt;std::bit_or&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;std::bit_xor&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;mem_fn&quot;&gt;std::mem_fn&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;std::map::value_comp&lt;/code&gt; 、 &lt;code&gt;std::multimap::value_comp&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; 、または別の &lt;code&gt;std::not2&lt;/code&gt; 呼び出しには、これらの型が定義されており、非推奨の &lt;code&gt;&lt;a href=&quot;binary_function&quot;&gt;std::binary_function&lt;/a&gt;&lt;/code&gt; から派生した関数オブジェクトも同様です。</target>
        </trans-unit>
        <trans-unit id="effff8b4f81bd6ea12cc6ac7cfd98223d06e7f20" translate="yes" xml:space="preserve">
          <source>The bitmask representing the character classification determined by the given character class, or &lt;code&gt;char_class_type()&lt;/code&gt; if the class is unknown.</source>
          <target state="translated">指定された文字クラスによって決定される文字分類を表すビットマスク。クラスが不明な場合は &lt;code&gt;char_class_type()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="100851a34642290acbb870e0a5584e24eb5ee801" translate="yes" xml:space="preserve">
          <source>The bitmask type supports a finite number of bitmask elements, which are distinct non-zero values of the bitmask type, such that, for any pair Ci and Cj, &lt;code&gt;Ci &amp;amp; Ci&lt;/code&gt; is nonzero and &lt;code&gt;Ci &amp;amp; Cj&lt;/code&gt; is zero. In addition, the value &lt;code&gt;0&lt;/code&gt; is used to represent an empty bitmask, with no values set.</source>
          <target state="translated">ビットマスクタイプは、ビットマスクタイプの有限の非ゼロ値である有限数のビットマスク要素をサポートします。そのため、CiとCjのペアでは、 &lt;code&gt;Ci &amp;amp; Ci&lt;/code&gt; は非ゼロであり、 &lt;code&gt;Ci &amp;amp; Cj&lt;/code&gt; はゼロです。さらに、値 &lt;code&gt;0&lt;/code&gt; は、値が設定されていない空のビットマスクを表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="c9b53aa8540cf3072f1caa4828d4f3227016694d" translate="yes" xml:space="preserve">
          <source>The bitwise arithmetic operator expressions have the form.</source>
          <target state="translated">ビット単位の算術演算子式は、形式を持っています。</target>
        </trans-unit>
        <trans-unit id="369d078387439db964ec186ce1ea0b0074753233" translate="yes" xml:space="preserve">
          <source>The bitwise operators &lt;code&gt;operator&amp;amp;&lt;/code&gt;, &lt;code&gt;operator|&lt;/code&gt;, &lt;code&gt;operator^&lt;/code&gt;, &lt;code&gt;operator~&lt;/code&gt;, &lt;code&gt;operator&amp;amp;=&lt;/code&gt;, &lt;code&gt;operator|=&lt;/code&gt;, and &lt;code&gt;operator^=&lt;/code&gt; are defined for values of the bitmask type and have the same semantics as the corresponding built-in operators on unsigned integers would have if the bitmask elements were the distinct integer powers of two.</source>
          <target state="translated">ビットごとの演算子 &lt;code&gt;operator&amp;amp;&lt;/code&gt; 、 &lt;code&gt;operator|&lt;/code&gt; 、 &lt;code&gt;operator^&lt;/code&gt; 、 &lt;code&gt;operator~&lt;/code&gt; 、 &lt;code&gt;operator&amp;amp;=&lt;/code&gt; 、 &lt;code&gt;operator|=&lt;/code&gt; 、 &lt;code&gt;operator^=&lt;/code&gt; はビットマスク型の値に対して定義され、ビットマスク要素が異なる場合の符号なし整数の対応する組み込み演算子と同じセマンティクスを持っています2の整数乗。</target>
        </trans-unit>
        <trans-unit id="b023ae87ef451cdf626ad0291435d5b825d5fd03" translate="yes" xml:space="preserve">
          <source>The bitwise shift operator expressions have the form.</source>
          <target state="translated">ビット単位のシフト演算子の式は、形式を持っています。</target>
        </trans-unit>
        <trans-unit id="7ca1ed96156947db52e3afd7acb31f7ff0f939a2" translate="yes" xml:space="preserve">
          <source>The body of a &lt;a href=&quot;function&quot;&gt;function definition&lt;/a&gt; of any constructor, before the opening brace of the compound statement, may include the</source>
          <target state="translated">複合ステートメントの開始中括弧の前に、コンストラクターの&lt;a href=&quot;function&quot;&gt;関数定義&lt;/a&gt;の本体に、</target>
        </trans-unit>
        <trans-unit id="7060cde55d88c14aaece02d89a680f9d4f458298" translate="yes" xml:space="preserve">
          <source>The body of a switch statement may have an arbitrary number of &lt;code&gt;case:&lt;/code&gt; labels, as long as the values of all constant_expressions are unique (after conversions/promotions). At most one &lt;code&gt;default:&lt;/code&gt; label may be present (although nested switch statements may use their own &lt;code&gt;default:&lt;/code&gt; labels or have &lt;code&gt;case:&lt;/code&gt; labels whose constants are identical to the ones used in the enclosing switch).</source>
          <target state="translated">switchステートメントの本文には、すべてのconstant_expressionsの値が一意である限り（変換/昇格後）、 &lt;code&gt;case:&lt;/code&gt; ラベルの数は任意です。最大で1つの &lt;code&gt;default:&lt;/code&gt; ラベルが存在する可能性があります（ただし、入れ子のswitchステートメントは独自の &lt;code&gt;default:&lt;/code&gt; ラベルを使用する &lt;code&gt;case:&lt;/code&gt; 定数が外側のスイッチで使用されるものと同じラベルを持つ場合があります）。</target>
        </trans-unit>
        <trans-unit id="fd894a48420a86ae1a785a1f4f06ed146adeaad1" translate="yes" xml:space="preserve">
          <source>The body of the main function</source>
          <target state="translated">主な機能の本体</target>
        </trans-unit>
        <trans-unit id="4d4e808b1a94155a447d2ba6b8aae0ce2aed1e13" translate="yes" xml:space="preserve">
          <source>The boolean logic operators, &lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;operator||&lt;/code&gt;. Unlike the built-in versions, the overloads cannot implement short-circuit evaluation. Also unlike the built-in versions, they do not sequence their left operand before the right one.(until C++17) In the standard library, these operators are only overloaded for &lt;code&gt;&lt;a href=&quot;../numeric/valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ブール論理演算子、 &lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt; および &lt;code&gt;operator||&lt;/code&gt; 。組み込みバージョンとは異なり、オーバーロードは短絡評価を実装できません。また、組み込みバージョンとは異なり、左のオペランドを右のオペランドの前に &lt;code&gt;&lt;a href=&quot;../numeric/valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt; しません。（C ++ 17まで）標準ライブラリでは、これらの演算子はstd :: valarrayに対してのみオーバーロードされます。</target>
        </trans-unit>
        <trans-unit id="be9b5d4b5d4c705cb17f7416c8fc4ab7e8cb9ee5" translate="yes" xml:space="preserve">
          <source>The boolean result of the comparison as described above.</source>
          <target state="translated">上記のような比較のブーリアン結果。</target>
        </trans-unit>
        <trans-unit id="ecf2e3902eed13149644949cf013da30e0846854" translate="yes" xml:space="preserve">
          <source>The braces of the language specification do not establish a scope.</source>
          <target state="translated">言語仕様書の中括弧はスコープを設定していない。</target>
        </trans-unit>
        <trans-unit id="ea016ec910e6873dfc79ae24437a3c519704144a" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;operator&amp;gt;&lt;/code&gt; for floating-point numbers may set &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; if one or both of the arguments is NaN. This function is a &quot;quiet&quot; version of &lt;code&gt;operator&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">浮動小数点数の組み込み &lt;code&gt;operator&amp;gt;&lt;/code&gt; は、引数の一方または両方がNaNの場合、 &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; を設定する場合があります。この関数は &lt;code&gt;operator&amp;gt;&lt;/code&gt; の「静かな」バージョンです。</target>
        </trans-unit>
        <trans-unit id="4bd808c844289be1c901eea1e57131ddc87294a7" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;operator&amp;gt;=&lt;/code&gt; for floating-point numbers may raise &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; if one or both of the arguments is NaN. This function is a &quot;quiet&quot; version of &lt;code&gt;operator&amp;gt;=&lt;/code&gt;.</source>
          <target state="translated">浮動小数点数の組み込み &lt;code&gt;operator&amp;gt;=&lt;/code&gt; は、引数の一方または両方がNaNの場合、 &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; を発生させる可能性があります。この関数は &lt;code&gt;operator&amp;gt;=&lt;/code&gt; の「静かな」バージョンです。</target>
        </trans-unit>
        <trans-unit id="63fa125b7f1d723b624671e912e92993b1585ff7" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;operator&amp;lt;&lt;/code&gt; and &lt;code&gt;operator&amp;gt;&lt;/code&gt; for floating-point numbers may raise &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; if one or both of the arguments is NaN. This function is a &quot;quiet&quot; version of the expression &lt;code&gt;x &amp;lt; y || x &amp;gt; y&lt;/code&gt;.</source>
          <target state="translated">浮動小数点数の組み込み &lt;code&gt;operator&amp;lt;&lt;/code&gt; および &lt;code&gt;operator&amp;gt;&lt;/code&gt; は、引数の一方または両方がNaNの場合、 &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; を発生させる可能性があります。この関数は、式 &lt;code&gt;x &amp;lt; y || x &amp;gt; y&lt;/code&gt; 「静かな」バージョンです。x&amp;gt; y。</target>
        </trans-unit>
        <trans-unit id="ac907543c60c06a9a51c071f27b11749c7308d57" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;operator&amp;lt;&lt;/code&gt; for floating-point numbers may raise &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; if one or both of the arguments is NaN. This function is a &quot;quiet&quot; version of &lt;code&gt;operator&amp;lt;&lt;/code&gt;.</source>
          <target state="translated">引数の一方または両方がNaNの場合、浮動小数点数の組み込み &lt;code&gt;operator&amp;lt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; を発生させることがあります。この関数は、 &lt;code&gt;operator&amp;lt;&lt;/code&gt; 「静かな」バージョンです。</target>
        </trans-unit>
        <trans-unit id="55246b361f4bd424491e57d0679d399ec77fce75" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;operator&amp;lt;=&lt;/code&gt; for floating-point numbers may raise &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; if one or both of the arguments is NaN. This function is a &quot;quiet&quot; version of &lt;code&gt;operator&amp;lt;=&lt;/code&gt;.</source>
          <target state="translated">浮動小数点数の組み込み &lt;code&gt;operator&amp;lt;=&lt;/code&gt; は、引数の一方または両方がNaNの場合、 &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; を発生させる可能性があります。この関数は、 &lt;code&gt;operator&amp;lt;=&lt;/code&gt; 「静かな」バージョンです。</target>
        </trans-unit>
        <trans-unit id="8f5fbdb85b383f1652e18638359a36e108ea3a07" translate="yes" xml:space="preserve">
          <source>The built-in subscript expression &lt;code&gt;E1[E2]&lt;/code&gt; is exactly identical to the expression &lt;code&gt;*(E1 + E2)&lt;/code&gt; except &lt;a href=&quot;eval_order&quot;&gt;evaluation order&lt;/a&gt;(since C++17), that is, the pointer operand (which may be a result of array-to-pointer conversion, and which must point to an element of some array or one past the end) is adjusted to point to another element of the same array, following the rules of &lt;a href=&quot;operator_arithmetic&quot;&gt;pointer arithmetics&lt;/a&gt;, and is then dereferenced.</source>
          <target state="translated">組み込みの添え字式 &lt;code&gt;E1[E2]&lt;/code&gt; は、&lt;a href=&quot;eval_order&quot;&gt;評価順序&lt;/a&gt;（C ++ 17以降）、つまりポインタオペランド（配列からの結果である可能性がある &lt;code&gt;*(E1 + E2)&lt;/code&gt; を除いて、式*（E1 + E2）とまったく同じです。ポインタ変換、およびある配列の要素を指す必要がある、または最後を過ぎたポインタ変換）は、&lt;a href=&quot;operator_arithmetic&quot;&gt;ポインタ演算&lt;/a&gt;の規則に従って、同じ配列の別の要素を指すように調整され、逆参照されます。</target>
        </trans-unit>
        <trans-unit id="dad1ba0648301ebf8046390e4a32c1f9873801f7" translate="yes" xml:space="preserve">
          <source>The built-in unary plus operator returns the value of its operand. The only situation where it is not a no-op is when the operand has integral type or unscoped enumeration type, which is changed by integral promotion, e.g, it converts &lt;code&gt;char&lt;/code&gt; to &lt;code&gt;int&lt;/code&gt; or if the operand is subject to lvalue-to-rvalue, array-to-pointer, or function-to-pointer conversion.</source>
          <target state="translated">組み込みの単項プラス演算子は、そのオペランドの値を返します。no-opではない唯一の状況は、オペランドが整数型またはスコープなし列挙型であり、整数昇格によって変更された場合です。たとえば、 &lt;code&gt;char&lt;/code&gt; を &lt;code&gt;int&lt;/code&gt; に変換する場合や、オペランドが左辺値から右辺値に依存する場合配列からポインターへの変換、または関数からポインターへの変換。</target>
        </trans-unit>
        <trans-unit id="04d132ee6ec1ba9ecfd11952d40819b6ddf5709f" translate="yes" xml:space="preserve">
          <source>The builtin unary minus operator calculates the negative of its promoted operand. For unsigned &lt;code&gt;a&lt;/code&gt;, the value of &lt;code&gt;-a&lt;/code&gt; is 2b</source>
          <target state="translated">組み込みの単項マイナス演算子は、昇格されたオペランドの負の値を計算します。符号なし &lt;code&gt;a&lt;/code&gt; の場合、 &lt;code&gt;-a&lt;/code&gt; の値は2bです。</target>
        </trans-unit>
        <trans-unit id="5b0dd408f6ab2c6addd6c06732e19880156ebd2e" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;std::nan(&quot;&quot;)&lt;/code&gt; is equivalent to the call &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(&quot;NAN()&quot;, (char**)nullptr);&lt;/code&gt;.</source>
          <target state="translated">コール &lt;code&gt;std::nan(&quot;&quot;)&lt;/code&gt; のコールと等価である &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(&quot;NAN()&quot;, (char**)nullptr);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7567df6e5bfc77fb6213d590212bee2233bcb69a" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;std::nan(&quot;n-char-sequence&quot;)&lt;/code&gt;, where &lt;code&gt;n-char-sequence&lt;/code&gt; is a sequence of digits, Latin letters, and underscores, is equivalent to the call &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(&quot;NAN(n-char-sequence)&quot;, (char**)nullptr);&lt;/code&gt;.</source>
          <target state="translated">呼び出し &lt;code&gt;std::nan(&quot;n-char-sequence&quot;)&lt;/code&gt; は、 &lt;code&gt;n-char-sequence&lt;/code&gt; が数字、ラテン文字、およびアンダースコアのシーケンスであり、呼び出し &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(&quot;NAN(n-char-sequence)&quot;, (char**)nullptr);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3bb18577641139ae5227c7592e36b1c655fd5a87" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;std::nan(&quot;string&quot;)&lt;/code&gt;, where &lt;code&gt;string&lt;/code&gt; is neither an n-char-sequence nor an empty string, is equivalent to the call &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(&quot;NAN&quot;, (char**)nullptr);&lt;/code&gt;.</source>
          <target state="translated">呼び出し &lt;code&gt;std::nan(&quot;string&quot;)&lt;/code&gt; は、 &lt;code&gt;string&lt;/code&gt; がn-char-sequenceでも空の文字列でもない場合、呼び出し &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(&quot;NAN&quot;, (char**)nullptr);&lt;/code&gt; と同等です。。</target>
        </trans-unit>
        <trans-unit id="b5ff4abb5e0ea3aa7864a0b18b7e95fdf8974f33" translate="yes" xml:space="preserve">
          <source>The call is equivalent to &lt;code&gt;(*this)[n].length()&lt;/code&gt;.</source>
          <target state="translated">呼び出しは &lt;code&gt;(*this)[n].length()&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="cd2e2ab41b6da2e04d11a8d565e0c040634df556" translate="yes" xml:space="preserve">
          <source>The call is equivalent to &lt;code&gt;string_type((*this)[n])&lt;/code&gt;;</source>
          <target state="translated">この呼び出しは &lt;code&gt;string_type((*this)[n])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="f8539f22fc056117494fbef42d83b731614e0acf" translate="yes" xml:space="preserve">
          <source>The call modifies the pending recursion flag on the iterator in such a way that the next time &lt;a href=&quot;increment&quot;&gt;&lt;code&gt;increment&lt;/code&gt;&lt;/a&gt; is called, the iterator will advance within the current directly even if it is currently referring to a subdirectory that hasn't been visited.</source>
          <target state="translated">この呼び出しは、次に&lt;a href=&quot;increment&quot;&gt; &lt;code&gt;increment&lt;/code&gt; &lt;/a&gt;が呼び出されるように、イテレータの保留中の再帰フラグを変更します。イテレータは、現在アクセスされていないサブディレクトリを参照している場合でも、現在の内部で直接進みます。</target>
        </trans-unit>
        <trans-unit id="534dac31ce734bf4cbcd27cdcaefba61f04409b9" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;&lt;a href=&quot;../memory/new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt; can be optimized out (even if custom allocator is used) if.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../memory/new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt; の呼び出しは、最適化できます（カスタムアロケーターが使用されている場合でも）。</target>
        </trans-unit>
        <trans-unit id="9f89a83188d1d3b695f6bf3795b5c9bc24c27ae3" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;&lt;a href=&quot;freeze&quot;&gt;freeze()&lt;/a&gt;&lt;/code&gt; guarantees that the returned pointer remains valid until the next explicit call to &lt;code&gt;freeze(false)&lt;/code&gt;: otherwise (on a dynamic buffer) any output operation could trigger buffer reallocation which would invalidate the pointer. It also causes a memory leak in the destructor of &lt;code&gt;std::strstreambuf&lt;/code&gt;, unless &lt;code&gt;freeze(false)&lt;/code&gt; is called before the buffer (or, more commonly, the &lt;code&gt;&lt;a href=&quot;../strstream&quot;&gt;std::strstream&lt;/a&gt;&lt;/code&gt; that manages it) is destroyed.</source>
          <target state="translated">呼び出し &lt;code&gt;&lt;a href=&quot;freeze&quot;&gt;freeze()&lt;/a&gt;&lt;/code&gt; 返されたポインタをする次の明示的な呼び出しまで有効のままであることを保証 &lt;code&gt;freeze(false)&lt;/code&gt; そうでない場合（動的バッファ上の）任意の出力操作はポインタが無効になり、再割り当てバッファ引き起こす可能性：。また、バッファ（または、より一般的には、それを管理する &lt;code&gt;&lt;a href=&quot;../strstream&quot;&gt;std::strstream&lt;/a&gt;&lt;/code&gt; ）が破棄される前に &lt;code&gt;freeze(false)&lt;/code&gt; が呼び出されない限り、 &lt;code&gt;std::strstreambuf&lt;/code&gt; デストラクタでメモリリークが発生します。</target>
        </trans-unit>
        <trans-unit id="e94bc704a1f2a718446c9b31af0e5fa96d1fb293" translate="yes" xml:space="preserve">
          <source>The call to the class-specific &lt;code&gt;T::operator delete&lt;/code&gt; on a polymorphic class is the only case where a static member function is called through dynamic dispatch.</source>
          <target state="translated">ポリモーフィッククラスに対するクラス固有の &lt;code&gt;T::operator delete&lt;/code&gt; の呼び出しは、静的メンバー関数が動的ディスパッチを通じて呼び出される唯一のケースです。</target>
        </trans-unit>
        <trans-unit id="efdb0b51b48b9bcd6bb30a4d0b0da24f53593e93" translate="yes" xml:space="preserve">
          <source>The callbacks are called in the reverse order of registration (in other words, &lt;code&gt;register_callback()&lt;/code&gt; pushes a callback pair on the callback stack). If &lt;code&gt;register_callback()&lt;/code&gt; is called from within a callback function to add a new callback, the new callback is only called on the next event.</source>
          <target state="translated">コールバックは登録の逆の順序で呼び出されます（つまり、 &lt;code&gt;register_callback()&lt;/code&gt; はコールバックペアをコールバックスタックにプッシュします）。場合 &lt;code&gt;register_callback()&lt;/code&gt; は、新しいコールバックを追加するために、コールバック関数内から呼び出され、新しいコールバックが唯一の次のイベントに呼ばれています。</target>
        </trans-unit>
        <trans-unit id="2f897118aebcd041bc3c35c8035c63c94fdfec84" translate="yes" xml:space="preserve">
          <source>The canonical copy-assignment operator is expected to &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c62-make-copy-assignment-safe-for-self-assignment&quot;&gt;perform no action on self-assignment&lt;/a&gt;, and to return the lhs by reference:</source>
          <target state="translated">正規のコピー代入演算子は&lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c62-make-copy-assignment-safe-for-self-assignment&quot;&gt;、自己代入に対して何のアクションも実行せず&lt;/a&gt;、参照によってlhsを返すことが期待されています。</target>
        </trans-unit>
        <trans-unit id="ec5078dd7a065edc2083fa12ace4434f4c0077ba" translate="yes" xml:space="preserve">
          <source>The canonical move assignment is expected to &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c64-a-move-operation-should-move-and-leave-its-source-in-a-valid-state&quot;&gt;leave the moved-from object in valid state&lt;/a&gt; (that is, a state with class invariants intact), and either &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c65-make-move-assignment-safe-for-self-assignment&quot;&gt;do nothing&lt;/a&gt; or at least leave the object in a valid state on self-assignment, and return the lhs by reference to non-const, and be noexcept:</source>
          <target state="translated">正規の移動割り当てでは&lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c64-a-move-operation-should-move-and-leave-its-source-in-a-valid-state&quot;&gt;、移動元のオブジェクトを有効な状態&lt;/a&gt;（つまり、クラスの不変条件がそのままの状態）のままにし、自己割り当て時に&lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c65-make-move-assignment-safe-for-self-assignment&quot;&gt;何&lt;/a&gt;もしないか、少なくともオブジェクトを有効な状態のままにして、 lhsは非constを参照し、noexceptになります。</target>
        </trans-unit>
        <trans-unit id="28df12d743e66354dc16272de0483a1adb821f60" translate="yes" xml:space="preserve">
          <source>The captures is a comma-separated list of zero or more</source>
          <target state="translated">キャプチャは、カンマで区切られたリストで、0個以上の</target>
        </trans-unit>
        <trans-unit id="13cf37550f6560dbfd18d33f41b7e0c3128acf14" translate="yes" xml:space="preserve">
          <source>The case where the argument is infinite is not specified to be a domain error in C (to which C++ defers), but it is defined as a &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/sin.html&quot;&gt;domain error in POSIX&lt;/a&gt;.</source>
          <target state="translated">引数が無限大の場合は、Cではドメインエラーであるとは指定されていません（C ++はこれに依存します）が&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/sin.html&quot;&gt;、POSIXではドメインエラー&lt;/a&gt;として定義されています。</target>
        </trans-unit>
        <trans-unit id="d7f85d60c57cf322439b1e5b7790bc83208f4f5b" translate="yes" xml:space="preserve">
          <source>The case where the argument is infinite is not specified to be a domain error in C (to which C++ defers), but it is defined as a &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/tan.html&quot;&gt;domain error in POSIX&lt;/a&gt;.</source>
          <target state="translated">引数が無限大の場合は、Cではドメインエラーであるとは指定されていません（C ++はこれに依存します）が&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/tan.html&quot;&gt;、POSIXではドメインエラー&lt;/a&gt;として定義されています。</target>
        </trans-unit>
        <trans-unit id="8e0a943ad67969e22cbc79ab2e94f2ba315815da" translate="yes" xml:space="preserve">
          <source>The case where the argument is infinite is not specified to be a domain error in C, but it is defined as a &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/cos.html&quot;&gt;domain error in POSIX&lt;/a&gt;.</source>
          <target state="translated">引数が無限大の場合は、Cではドメインエラーとして指定されていませんが&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/cos.html&quot;&gt;、POSIXではドメインエラー&lt;/a&gt;として定義されています。</target>
        </trans-unit>
        <trans-unit id="ef5aa9b2785befe3ac51560ee601e2aaa94d1a31" translate="yes" xml:space="preserve">
          <source>The case-insensitive comparison for the non-whitespace non-&lt;code&gt;'%'&lt;/code&gt; characters in the format string, the &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; facet of the locale provided by &lt;code&gt;str&lt;/code&gt; is typically, but not necessarily, used.</source>
          <target state="translated">書式文字列の空白以外の非 &lt;code&gt;'%'&lt;/code&gt; 文字の大文字と小文字を区別しない比較では、 &lt;code&gt;str&lt;/code&gt; によって提供されるロケールの &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; ファセットが通常使用されますが、必ずしも使用されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="9313e91b45e2be0a3799d16fb75da830d5892cc8" translate="yes" xml:space="preserve">
          <source>The case-insensitive comparison key for &lt;code&gt;c&lt;/code&gt; in the currently imbued locale.</source>
          <target state="translated">現在組み込まれているロケールでの &lt;code&gt;c&lt;/code&gt; の大文字と小文字を区別しない比較キー。</target>
        </trans-unit>
        <trans-unit id="67cdfac77816d6a726c77e23a3f364e8d4647a48" translate="yes" xml:space="preserve">
          <source>The catch-all clause &lt;code&gt;catch (...)&lt;/code&gt; matches exceptions of any type. If present, it has to be the last catch clause in the handler-seq. Catch-all block may be used to ensure that no uncaught exceptions can possibly escape from a function that offers &lt;a href=&quot;exceptions&quot;&gt;nothrow exception guarantee&lt;/a&gt;.</source>
          <target state="translated">catch-all句 &lt;code&gt;catch (...)&lt;/code&gt; は、あらゆるタイプの例外に一致します。存在する場合は、handler-seqの最後のcatch句でなければなりません。キャッチオールブロックを使用して、キャッチされない例外が&lt;a href=&quot;exceptions&quot;&gt;nothrow例外保証&lt;/a&gt;を提供する関数からエスケープされないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="25bc4efefc84d37cdf5da26ff6ceab175e1c6aaf" translate="yes" xml:space="preserve">
          <source>The character array and single character overloads of &lt;a href=&quot;../basic_istream/operator_gtgt2&quot;&gt;&lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt; if they fail to extract any characters.</source>
          <target state="translated">文字配列および&lt;a href=&quot;../basic_istream/operator_gtgt2&quot;&gt; &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; &lt;/a&gt;単一文字のオーバーロード。文字の抽出に失敗した場合。</target>
        </trans-unit>
        <trans-unit id="a48f4e44be4acbc878599ffe7694d1a4bc87d3cc" translate="yes" xml:space="preserve">
          <source>The character extraction overloads of &lt;a href=&quot;../basic_istream/operator_gtgt2&quot;&gt;&lt;code&gt;operator&amp;gt;&amp;gt;std::basic_istream&lt;/code&gt;&lt;/a&gt;, if the end of the stream is reached before the limit (if any) on the number of characters to be extracted.</source>
          <target state="translated">抽出される文字数の制限（ある場合）の前にストリームの終わりに達した場合、&lt;a href=&quot;../basic_istream/operator_gtgt2&quot;&gt; &lt;code&gt;operator&amp;gt;&amp;gt;std::basic_istream&lt;/code&gt; &lt;/a&gt;の文字抽出オーバーロード。</target>
        </trans-unit>
        <trans-unit id="65d8f3b0f6e704d789a5d4f4bd154ae73e6fa9c4" translate="yes" xml:space="preserve">
          <source>The character representation and encoding in the controlled sequence may be different from the character representations in the associated sequence, in which case a &lt;code&gt;&lt;a href=&quot;../locale/codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; locale facet is typically used to perform the conversion. Common examples are UTF-8 (or other multibyte) files accessed through &lt;code&gt;&lt;a href=&quot;basic_fstream&quot;&gt;std::wfstream&lt;/a&gt;&lt;/code&gt; objects: the controlled sequence consists of &lt;code&gt;wchar_t&lt;/code&gt; characters, but the associated sequence consists of bytes.</source>
          <target state="translated">制御されたシーケンスの文字表現とエンコーディングは、関連するシーケンスの文字表現とは異なる場合があります。その場合、変換を実行するために &lt;code&gt;&lt;a href=&quot;../locale/codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; ロケールファセットが通常使用されます。一般的な例は、 &lt;code&gt;&lt;a href=&quot;basic_fstream&quot;&gt;std::wfstream&lt;/a&gt;&lt;/code&gt; オブジェクトを通じてアクセスされるUTF-8（または他のマルチバイト）ファイルです。制御シーケンスは &lt;code&gt;wchar_t&lt;/code&gt; 文字で構成されますが、関連するシーケンスはバイトで構成されます。</target>
        </trans-unit>
        <trans-unit id="926a2b9c5d9e0f6df7a1c8599b95afbe627a76bc" translate="yes" xml:space="preserve">
          <source>The character stream that was operated on, e.g. &lt;code&gt;os&lt;/code&gt; or &lt;code&gt;is&lt;/code&gt;.</source>
          <target state="translated">操作された文字ストリーム（例： &lt;code&gt;os&lt;/code&gt; または &lt;code&gt;is&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="9a135798382138f1d168ced859370bfbbb31e66a" translate="yes" xml:space="preserve">
          <source>The character to use as decimal point character is determined by the numpunct facet of the locale imbued in the stream at the time of output, as described in &lt;code&gt;&lt;a href=&quot;../../locale/num_put/put&quot;&gt;std::num_put::put&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../locale/num_put/put&quot;&gt;std::num_put::put&lt;/a&gt;&lt;/code&gt; 説明されているように、小数点文字として使用する文字は、出力時にストリームに組み込まれたロケールのnumpunctファセットによって決定されます。</target>
        </trans-unit>
        <trans-unit id="29a30c51583aaf8336af6480761031b5d4dd3ee7" translate="yes" xml:space="preserve">
          <source>The character types &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;char8_t&lt;/code&gt;(since C++20), &lt;code&gt;char16_t&lt;/code&gt;, &lt;code&gt;char32_t&lt;/code&gt;, and &lt;code&gt;wchar_t&lt;/code&gt;;</source>
          <target state="translated">文字タイプ &lt;code&gt;char&lt;/code&gt; 、 &lt;code&gt;char8_t&lt;/code&gt; （C ++ 20以降）、 &lt;code&gt;char16_t&lt;/code&gt; 、 &lt;code&gt;char32_t&lt;/code&gt; 、および &lt;code&gt;wchar_t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de5230b19ff6d3b6862f39e1e4b2ca7bccdab9a8" translate="yes" xml:space="preserve">
          <source>The characters &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt; are invariant under ISO-646, but alternatives are provided for the tokens that use these characters anyway to accomodate even more restrictive historical charsets.</source>
          <target state="translated">文字 &lt;code&gt;&amp;amp;&lt;/code&gt; と &lt;code&gt;!&lt;/code&gt; ISO-646の下では不変ですが、これらの文字を使用して、さらに制限の厳しい履歴文字セットに対応するトークンの代替が提供されています。</target>
        </trans-unit>
        <trans-unit id="b214f3ed1bb00f84b126e636c023f9506df83f29" translate="yes" xml:space="preserve">
          <source>The characters of the C-strings pointed to by &lt;code&gt;grouping&lt;/code&gt; and &lt;code&gt;mon_grouping&lt;/code&gt; are interpreted according to their numeric values. When the terminating &lt;code&gt;'\0'&lt;/code&gt; is encountered, the last value seen is assumed to repeat for the remainder of digits. If &lt;code&gt;&lt;a href=&quot;../types/climits&quot;&gt;CHAR_MAX&lt;/a&gt;&lt;/code&gt; is encountered, no further digits are grouped. the typical grouping of three digits at a time is &lt;code&gt;&quot;\003&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;grouping&lt;/code&gt; および &lt;code&gt;mon_grouping&lt;/code&gt; が指すC文字列の文字は、それらの数値に従って解釈されます。終了時に &lt;code&gt;'\0'&lt;/code&gt; 検出され、最後に見られた値は、残りの桁で繰り返すように想定されます。場合 &lt;code&gt;&lt;a href=&quot;../types/climits&quot;&gt;CHAR_MAX&lt;/a&gt;&lt;/code&gt; が検出され、それ以上の数字がグループ化されていません。一度に3桁の一般的なグループは &lt;code&gt;&quot;\003&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="50e61c5054d2f85ac64df9adcc0316f25e4682e2" translate="yes" xml:space="preserve">
          <source>The choice of which engine to use involves a number of tradeoffs: the linear congruential engine is moderately fast and has a very small storage requirement for state. The lagged Fibonacci generators are very fast even on processors without advanced arithmetic instruction sets, at the expense of greater state storage and sometimes less desirable spectral characteristics. The Mersenne twister is slower and has greater state storage requirements but with the right parameters has the longest non-repeating sequence with the most desirable spectral characteristics (for a given definition of desirable).</source>
          <target state="translated">どのエンジンを使用するかの選択には、いくつかのトレードオフが含まれます:線形の合力エンジンは適度に高速で、ステートのストレージ要件が非常に小さい。遅れたフィボナッチ発生器は、高度な演算命令セットを持たないプロセッサでも非常に高速ですが、ステートストレージが大きくなり、時には望ましくないスペクトル特性を持つこともあります。メルセンヌ・ツイスターは、より遅く、より大きな状態記憶要件を持ちますが、適切なパラメータでは、最も望ましいスペクトル特性を持つ最長の非繰返しシーケンスを持ちます(望ましいの定義が与えられている場合)。</target>
        </trans-unit>
        <trans-unit id="389756ed6e9c288a5d7721af8a052706a08051ec" translate="yes" xml:space="preserve">
          <source>The choices made by each implementation about the sizes of the fundamental types are collectively known as</source>
          <target state="translated">基本的な型のサイズについて各実装で選択されたものは、総称して</target>
        </trans-unit>
        <trans-unit id="40ffe543c1f7cc269e00940b5664a9591d581f02" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;any&lt;/code&gt; describes a type-safe container for single values of any type.</source>
          <target state="translated">クラス &lt;code&gt;any&lt;/code&gt; は、任意の型の単一の値の型保証コンテナを記述します。</target>
        </trans-unit>
        <trans-unit id="343de7297b1a09b656158540d019c5105d45a580" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;basic_streambuf&lt;/code&gt; controls input and output to a character sequence. It includes and provides access to.</source>
          <target state="translated">&lt;code&gt;basic_streambuf&lt;/code&gt; クラスは、文字シーケンスへの入力と出力を制御します。それが含まれ、アクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="fc3b7d04e5b01d17ca16c3dd7eb6a668493520a7" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;contract_violation&lt;/code&gt; describes information about a &lt;a href=&quot;../language/attributes/contract&quot;&gt;contract violation&lt;/a&gt;. It is generated by a C++ implementation and passed to a contract violation handler when a contract violation is detected.</source>
          <target state="translated">クラス &lt;code&gt;contract_violation&lt;/code&gt; はに関する情報を説明し&lt;a href=&quot;../language/attributes/contract&quot;&gt;、契約違反を&lt;/a&gt;。これはC ++実装によって生成され、コントラクト違反が検出されたときにコントラクト違反ハンドラに渡されます。</target>
        </trans-unit>
        <trans-unit id="0933dd797b634fb57481e64c84a2e2ad46d4ec11" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;contract_violation&lt;/code&gt; is used by the implementation to report information about a contract violation to the violation handler.</source>
          <target state="translated">&lt;code&gt;contract_violation&lt;/code&gt; は、contract_violationクラスを使用して、契約違反に関する情報を違反ハンドラーに報告します。</target>
        </trans-unit>
        <trans-unit id="3d108383c7a03d1c8ed761859ac19042a6996b74" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;day&lt;/code&gt; represents a day in a month. Its normal range is [1, 31], but it may hold any number in [0, 255].</source>
          <target state="translated">クラス &lt;code&gt;day&lt;/code&gt; は、月の日を表します。通常の範囲は[1、31]ですが、[0、255]の任意の数値を保持できます。</target>
        </trans-unit>
        <trans-unit id="fb1865a269f77db6239124ab3f4f7037e783663b" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;ios_base&lt;/code&gt; is a multipurpose class that serves as the base class for all I/O stream classes. It maintains several kinds of data:</source>
          <target state="translated">クラス &lt;code&gt;ios_base&lt;/code&gt; は、すべてのI / Oストリームクラスの基本クラスとして機能する多目的クラスです。それはいくつかの種類のデータを維持します：</target>
        </trans-unit>
        <trans-unit id="f3ae56fc04b1b726fbae27b7509b3c5a19f45554" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;istrstream&lt;/code&gt; implements input operations on array-backed streams. It essentially wraps a raw array I/O device implementation (&lt;code&gt;&lt;a href=&quot;strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;) into the higher-level interface of &lt;code&gt;&lt;a href=&quot;basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;istrstream&lt;/code&gt; クラスは、配列で裏付けられたストリームに入力操作を実装します。これは基本的に、生の配列I / Oデバイス実装（ &lt;code&gt;&lt;a href=&quot;strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; ）を &lt;code&gt;&lt;a href=&quot;basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt; 上位レベルのインターフェースにラップします。</target>
        </trans-unit>
        <trans-unit id="d68c9d9976237e7bad1d9c374222a16482710351" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;leap&lt;/code&gt; represents the date and time of a leap second insertion.</source>
          <target state="translated">クラス &lt;code&gt;leap&lt;/code&gt; は、うるう秒の挿入の日時を表します。</target>
        </trans-unit>
        <trans-unit id="abf01ffffb7311c0e4b841a0f6111a62e524be1c" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;link&lt;/code&gt; represents an alternative name for a time zone.</source>
          <target state="translated">クラス &lt;code&gt;link&lt;/code&gt; は、タイムゾーンの代替名を表します。</target>
        </trans-unit>
        <trans-unit id="83b88fa0a429df9a4f0587056fe07f11f7518785" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;local_info&lt;/code&gt; describes the result of converting a &lt;code&gt;std::chrono::local_time&lt;/code&gt; to a &lt;code&gt;std::chrono::sys_time&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;local_info&lt;/code&gt; は、 &lt;code&gt;std::chrono::local_time&lt;/code&gt; を &lt;code&gt;std::chrono::sys_time&lt;/code&gt; に変換した結果を記述します。</target>
        </trans-unit>
        <trans-unit id="9c75928d0fbd7736eb6e55c560a45d617e4a37b4" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;local_t&lt;/code&gt; is a pseudo-clock that is used as the first template argument to &lt;code&gt;&lt;a href=&quot;time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; to indicate that the time point represents local time with respect of a not-yet-specified time zone. &lt;code&gt;local_time&lt;/code&gt; supports streaming and the full set of time point arithmetic.</source>
          <target state="translated">&lt;code&gt;local_t&lt;/code&gt; クラスは、 &lt;code&gt;&lt;a href=&quot;time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; への最初のテンプレート引数として使用される疑似クロックであり、時刻ポイントがまだ指定されていないタイムゾーンに関してローカル時刻を表すことを示します。 &lt;code&gt;local_time&lt;/code&gt; は、ストリーミングと、すべての時点計算のセットをサポートしています。</target>
        </trans-unit>
        <trans-unit id="85fde950b1bc4e1c3294d21a994f67ff82dbbb5c" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;lock_guard&lt;/code&gt; is a mutex wrapper that provides a convenient &lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;RAII-style&lt;/a&gt; mechanism for owning a mutex for the duration of a scoped block.</source>
          <target state="translated">クラス &lt;code&gt;lock_guard&lt;/code&gt; は、スコープ付きブロックの期間中ミューテックスを所有するための便利な&lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;RAIIスタイルの&lt;/a&gt;メカニズムを提供するミューテックスラッパーです。</target>
        </trans-unit>
        <trans-unit id="5e3e91707414ba3f649b0438a0caa5eecbc19288" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;month&lt;/code&gt; represents a month in a year. Its normal range is [1, 12], but it may hold any number in [0, 255]. Twelve named constants are predefined in the &lt;code&gt;std::chrono&lt;/code&gt; namespace for the twelve months of the year.</source>
          <target state="translated">クラス &lt;code&gt;month&lt;/code&gt; は、年の月を表します。通常の範囲は[1、12]ですが、[0、255]の任意の数値を保持できます。12の名前付き定数が &lt;code&gt;std::chrono&lt;/code&gt; 名前空間で12か月間事前定義されています。</target>
        </trans-unit>
        <trans-unit id="1be877235dcb20278d04c1100fddd27e40cf1b12" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;month_day&lt;/code&gt; represents a specific day of a specific month, of some yet to be specified year.</source>
          <target state="translated">&lt;code&gt;month_day&lt;/code&gt; クラスは、特定の月の特定の日を表します。</target>
        </trans-unit>
        <trans-unit id="27d369a1177433899c27498902657b823de0b4a1" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;month_day_last&lt;/code&gt; represents the last day of a specific month, of some yet to be specified year.</source>
          <target state="translated">&lt;code&gt;month_day_last&lt;/code&gt; クラスは、特定の月のいくつかのまだ指定されていない最後の日を表します。</target>
        </trans-unit>
        <trans-unit id="a02c9e9c27d118fe7b2b716108aa5426e365f9ab" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;month_weekday&lt;/code&gt; represents the n-th weekday of a specific month, of some yet to be specified year.</source>
          <target state="translated">&lt;code&gt;month_weekday&lt;/code&gt; クラスは、特定の月の、まだ指定されていない年のn番目の曜日を表します。</target>
        </trans-unit>
        <trans-unit id="44105f2554e4f171648141fde22e5433de042035" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;month_weekday_last&lt;/code&gt; represents the last weekday of a specific month, of some yet to be specified year.</source>
          <target state="translated">&lt;code&gt;month_weekday_last&lt;/code&gt; クラスは、特定の月のいくつかのまだ指定されていない最後の平日を表します。</target>
        </trans-unit>
        <trans-unit id="1f2c0f32bd49d3aa755a1b9b297f856980dea582" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;ostrstream&lt;/code&gt; implements output operations on array-backed streams. It essentially wraps a raw array I/O device implementation (&lt;code&gt;&lt;a href=&quot;strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;) into the higher-level interface of &lt;code&gt;&lt;a href=&quot;basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;ostrstream&lt;/code&gt; は、配列に基づくストリームで出力操作を実装します。これは基本的に、生の配列I / Oデバイス実装（ &lt;code&gt;&lt;a href=&quot;strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; ）を &lt;code&gt;&lt;a href=&quot;basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt; 上位レベルのインターフェースにラップします。</target>
        </trans-unit>
        <trans-unit id="769240ff129de8435a169aeae14402f048004721" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;scoped_lock&lt;/code&gt; is a mutex wrapper that provides a convenient &lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;RAII-style&lt;/a&gt; mechanism for owning one or more mutexes for the duration of a scoped block.</source>
          <target state="translated">&lt;code&gt;scoped_lock&lt;/code&gt; クラスは、スコープ付きブロックの期間中に1つ以上のミューテックスを所有するための便利な&lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;RAIIスタイルの&lt;/a&gt;メカニズムを提供するミューテックスラッパーです。</target>
        </trans-unit>
        <trans-unit id="c6811a8286c51846f2769a21dff0527daa3ee835" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;shared_lock&lt;/code&gt; is a general-purpose shared mutex ownership wrapper allowing deferred locking, timed locking and transfer of lock ownership. Locking a &lt;code&gt;shared_lock&lt;/code&gt; locks the associated shared mutex in shared mode (to lock it in exclusive mode, &lt;code&gt;&lt;a href=&quot;unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt; can be used).</source>
          <target state="translated">クラス &lt;code&gt;shared_lock&lt;/code&gt; は、遅延共有ロック、時限ロック、およびロック所有権の転送を可能にする汎用共有ミューテックス所有権ラッパーです。ロック &lt;code&gt;shared_lock&lt;/code&gt; を共有モードに関連する共有ミューテックスをロック（排他モードにロックするために、 &lt;code&gt;&lt;a href=&quot;unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt; 使用することができます）。</target>
        </trans-unit>
        <trans-unit id="4a04136447f2a3087a3adb2c5a6a7425d2efc14b" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::basic_ios&lt;/code&gt; provides facilities for interfacing with objects that have &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; interface. Several &lt;code&gt;std::basic_ios&lt;/code&gt; objects can refer to one actual &lt;code&gt;std::basic_streambuf&lt;/code&gt; object.</source>
          <target state="translated">クラス &lt;code&gt;std::basic_ios&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; インターフェースを持つオブジェクトとのインターフェース機能を提供します。いくつかの &lt;code&gt;std::basic_ios&lt;/code&gt; オブジェクトは、1つの実際の &lt;code&gt;std::basic_streambuf&lt;/code&gt; オブジェクトを参照できます。</target>
        </trans-unit>
        <trans-unit id="97c6fc6eb4b60c014d29122cfc63ff1263ce47ce" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::codecvt_base&lt;/code&gt; provides the conversion status constants which are inherited and used by the &lt;code&gt;&lt;a href=&quot;codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; facets.</source>
          <target state="translated">クラス &lt;code&gt;std::codecvt_base&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; ファセットによって継承および使用される変換ステータス定数を提供します。</target>
        </trans-unit>
        <trans-unit id="d9ae791d8d2658200164a1dd8dfceee3dc1247dc" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::condition_variable&lt;/code&gt; is a &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;. It is not &lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;, &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;, &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;, or &lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;.</source>
          <target state="translated">クラス &lt;code&gt;std::condition_variable&lt;/code&gt; は&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;です。それはない&lt;a href=&quot;../named_req/copyconstructible&quot;&gt;コピーコンストラクト&lt;/a&gt;、&lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;、&lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;、または&lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="88ef9662f4f2d2a563f792987ec222a76d7e5cb8" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::condition_variable_any&lt;/code&gt; is a &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;. It is not &lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;, &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;, &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;, or &lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;.</source>
          <target state="translated">クラス &lt;code&gt;std::condition_variable_any&lt;/code&gt; は&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;です。それはない&lt;a href=&quot;../named_req/copyconstructible&quot;&gt;コピーコンストラクト&lt;/a&gt;、&lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;、&lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;、または&lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f4367df265d7c6ec7ea71f793499b528dbf39047" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::ctype_base&lt;/code&gt; lists the character classification categories which are inherited by the &lt;code&gt;&lt;a href=&quot;ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facets.</source>
          <target state="translated">クラス &lt;code&gt;std::ctype_base&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; ファセットによって継承される文字分類カテゴリをリストします。</target>
        </trans-unit>
        <trans-unit id="ba06b286ffcbc23cbd4bfc450a7db3ee5ce16c7a" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::filesystem::filesystem_error&lt;/code&gt; defines an exception object that is thrown on failure by the throwing overloads of the functions in the filesystem library.</source>
          <target state="translated">クラス &lt;code&gt;std::filesystem::filesystem_error&lt;/code&gt; は、ファイルシステムライブラリ内の関数のオーバーロードをスローすることにより、失敗時にスローされる例外オブジェクトを定義します。</target>
        </trans-unit>
        <trans-unit id="5e0154cf7a71928c2d8b4fa91dfe5c5d79f98fa8" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::future_error&lt;/code&gt; defines an exception object that is thrown on failure by the functions in the thread library that deal with asynchronous execution and shared states (&lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt;, etc). Similar to &lt;code&gt;&lt;a href=&quot;../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt;, this exception carries an error code compatible with &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;std::future_error&lt;/code&gt; は、非同期実行と共有状態を処理するスレッドライブラリ内の関数（ &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt; など）によって失敗時にスローされる例外オブジェクトを定義します。 &lt;code&gt;&lt;a href=&quot;../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt; と同様に、この例外には &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; と互換性のあるエラーコードが含まれます。</target>
        </trans-unit>
        <trans-unit id="ad146a3cfff3f9b13f932bc525af9165bd2add0a" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::ios_base::failure&lt;/code&gt; defines an exception object that is thrown on failure by the functions in the Input/Output library.</source>
          <target state="translated">クラス &lt;code&gt;std::ios_base::failure&lt;/code&gt; は、入力/出力ライブラリの関数によって失敗時にスローされる例外オブジェクトを定義します。</target>
        </trans-unit>
        <trans-unit id="0a418ed2810a4fe8c19866d4e7bae5bd608b69ce" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::lconv&lt;/code&gt; contains numeric and monetary formatting rules as defined by a C locale. Objects of this struct may be obtained with &lt;code&gt;&lt;a href=&quot;localeconv&quot;&gt;std::localeconv&lt;/a&gt;&lt;/code&gt;. The members of &lt;code&gt;std::lconv&lt;/code&gt; are values of type &lt;code&gt;char&lt;/code&gt; and of type &lt;code&gt;char*&lt;/code&gt;. Each &lt;code&gt;char*&lt;/code&gt; member except &lt;code&gt;decimal_point&lt;/code&gt; may be pointing at a null character (that is, at an empty C-string). The members of type &lt;code&gt;char&lt;/code&gt; are all non-negative numbers, any of which may be &lt;code&gt;&lt;a href=&quot;../types/climits&quot;&gt;CHAR_MAX&lt;/a&gt;&lt;/code&gt; if the corresponding value is not available in the current C locale.</source>
          <target state="translated">クラス &lt;code&gt;std::lconv&lt;/code&gt; は、Cロケールで定義されている数値および通貨のフォーマットルールが含まれています。この構造体のオブジェクトは &lt;code&gt;&lt;a href=&quot;localeconv&quot;&gt;std::localeconv&lt;/a&gt;&lt;/code&gt; 取得できます。 &lt;code&gt;std::lconv&lt;/code&gt; のメンバーは、 &lt;code&gt;char&lt;/code&gt; 型と &lt;code&gt;char*&lt;/code&gt; 型の値です。を除く各 &lt;code&gt;char*&lt;/code&gt; メンバー &lt;code&gt;decimal_point&lt;/code&gt; は、null文字（つまり、空のC文字列）を指している場合があります。 &lt;code&gt;char&lt;/code&gt; 型のメンバーはすべて負でない数値であり、対応する値が現在のCロケールで使用できない場合、そのいずれかが &lt;code&gt;&lt;a href=&quot;../types/climits&quot;&gt;CHAR_MAX&lt;/a&gt;&lt;/code&gt; になることがあります。</target>
        </trans-unit>
        <trans-unit id="d0406c5e2f8f02bc0cdae46eef28c4cdd8a5777f" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::locale::id&lt;/code&gt; provides implementation-specific identification of a locale facet. Each class derived from &lt;code&gt;&lt;a href=&quot;facet&quot;&gt;std::locale::facet&lt;/a&gt;&lt;/code&gt; must have a public static member named &lt;code&gt;id&lt;/code&gt; of type &lt;code&gt;std::locale::id&lt;/code&gt; and each &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object maintains a list of facets it implements, indexed by their &lt;code&gt;id&lt;/code&gt;s.</source>
          <target state="translated">クラス &lt;code&gt;std::locale::id&lt;/code&gt; は、ロケールファセットの実装固有の識別を提供します。派生した各クラス &lt;code&gt;&lt;a href=&quot;facet&quot;&gt;std::locale::facet&lt;/a&gt;&lt;/code&gt; 名前のパブリック静的メンバー持っている必要があり &lt;code&gt;id&lt;/code&gt; 型の &lt;code&gt;std::locale::id&lt;/code&gt; とそれぞれ &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; オブジェクトはファセットのリストを維持し、それを実装し、そのことにより、インデックス付け &lt;code&gt;id&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="cdf91a0e81751be421b2176d042a5260df6ec784" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::messages_base&lt;/code&gt; provides a type definition which is inherited and used by the &lt;code&gt;&lt;a href=&quot;messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt; facets.</source>
          <target state="translated">クラス &lt;code&gt;std::messages_base&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt; ファセットによって継承および使用される型定義を提供します。</target>
        </trans-unit>
        <trans-unit id="a6d1424f3444c8e56160a47686df975e8d4653aa" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::money_base&lt;/code&gt; provides constants which are inherited and used by the &lt;code&gt;&lt;a href=&quot;moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; facets.</source>
          <target state="translated">クラス &lt;code&gt;std::money_base&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; ファセットによって継承および使用される定数を提供します。</target>
        </trans-unit>
        <trans-unit id="8cf7e0952b844bfd5add19a1d11fb8b44f736538" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::once_flag&lt;/code&gt; is a helper structure for &lt;code&gt;&lt;a href=&quot;call_once&quot;&gt;std::call_once&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;std::once_flag&lt;/code&gt; のためのヘルパー構造である &lt;code&gt;&lt;a href=&quot;call_once&quot;&gt;std::call_once&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5643e960d4858b6091b7d6543cf83a75143fd7d" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::pmr::memory_resource&lt;/code&gt; is an abstract interface to an unbounded set of classes encapsulating memory resources.</source>
          <target state="translated">クラス &lt;code&gt;std::pmr::memory_resource&lt;/code&gt; は、メモリリソースをカプセル化する無制限のクラスのセットへの抽象インターフェースです。</target>
        </trans-unit>
        <trans-unit id="943f3d426461d3dce2b925bcd3c4394d9a659d70" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::pmr::monotonic_buffer_resource&lt;/code&gt; is a special-purpose memory resource class that releases the allocated memory only when the resource is destroyed. It is intended for very fast memory allocations in situations where memory is used to build up a few objects and then is released all at once.</source>
          <target state="translated">クラス &lt;code&gt;std::pmr::monotonic_buffer_resource&lt;/code&gt; は、リソースが破棄された場合にのみ割り当てられたメモリを解放する特殊用途のメモリリソースクラスです。これは、いくつかのオブジェクトを構築するためにメモリが使用され、一度にすべて解放される状況での非常に高速なメモリ割り当てを目的としています。</target>
        </trans-unit>
        <trans-unit id="33dea3b4b913a14a5256d070fe38c44fa588bc34" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::pmr::synchronized_pool_resource&lt;/code&gt; is a general-purpose memory resource class with the following properties:</source>
          <target state="translated">クラス &lt;code&gt;std::pmr::synchronized_pool_resource&lt;/code&gt; は、次のプロパティを持つ汎用メモリリソースクラスです。</target>
        </trans-unit>
        <trans-unit id="027578ac1b5d02b14a361542f6c39eac7ac5db51" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::pmr::unsynchronized_pool_resource&lt;/code&gt; is a general-purpose memory resource class with the following properties:</source>
          <target state="translated">クラス &lt;code&gt;std::pmr::unsynchronized_pool_resource&lt;/code&gt; は、次のプロパティを持つ汎用メモリリソースクラスです。</target>
        </trans-unit>
        <trans-unit id="450a8b0e0258e20a57c1fc8d5cc34c4deaa0f733" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;std::time_base&lt;/code&gt; provides the date order constants which are inherited by the &lt;code&gt;&lt;a href=&quot;time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; facets.</source>
          <target state="translated">クラス &lt;code&gt;std::time_base&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; ファセットによって継承される日付順序定数を提供します。</target>
        </trans-unit>
        <trans-unit id="79d8e7749b4e29f198a0e5858155e9704c6f9c0d" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;strstream&lt;/code&gt; implements input and output operations on array-backed streams. It essentially wraps a raw array I/O device implementation (&lt;code&gt;&lt;a href=&quot;strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;) into the higher-level interface of &lt;code&gt;&lt;a href=&quot;basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;strstream&lt;/code&gt; は、配列に基づくストリームで入出力操作を実装します。これは基本的に、生の配列I / Oデバイス実装（ &lt;code&gt;&lt;a href=&quot;strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; ）を &lt;code&gt;&lt;a href=&quot;basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt; 上位レベルのインターフェースにラップします。</target>
        </trans-unit>
        <trans-unit id="476561dd0cc52ac621dba8650897d75d20ccf296" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;sys_info&lt;/code&gt; describes time zone information associated with a time zone at a particular point in time (represented as either a &lt;code&gt;std::chrono::sys_time&lt;/code&gt; or a &lt;code&gt;std::chrono::local_time&lt;/code&gt;). This is a low-level data structure typically not used directly by user code.</source>
          <target state="translated">クラス &lt;code&gt;sys_info&lt;/code&gt; は、特定の時点のタイムゾーンに関連付けられたタイムゾーン情報を記述します（ &lt;code&gt;std::chrono::sys_time&lt;/code&gt; または &lt;code&gt;std::chrono::local_time&lt;/code&gt; として表されます）。これは低レベルのデータ構造であり、通常、ユーザーコードでは直接使用されません。</target>
        </trans-unit>
        <trans-unit id="f600d7fa13ee6ce89183cf7a00b0eb82822e5acf" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;thread::id&lt;/code&gt; is a lightweight, trivially copyable class that serves as a unique identifier of &lt;code&gt;&lt;a href=&quot;../thread&quot;&gt;std::thread&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">クラス &lt;code&gt;thread::id&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../thread&quot;&gt;std::thread&lt;/a&gt;&lt;/code&gt; オブジェクトの一意の識別子として機能する軽量で自明なコピー可能なクラスです。</target>
        </trans-unit>
        <trans-unit id="2a728f613fc7e5144eda285d5079bb6d95a187b5" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;thread&lt;/code&gt; represents &lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_(computing)&quot;&gt;a single thread of execution&lt;/a&gt;. Threads allow multiple functions to execute concurrently.</source>
          <target state="translated">クラス &lt;code&gt;thread&lt;/code&gt; は&lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_(computing)&quot;&gt;、単一の実行&lt;/a&gt;スレッドを表します。スレッドを使用すると、複数の関数を同時に実行できます。</target>
        </trans-unit>
        <trans-unit id="ef52a5afa98a54aad697e77e7c88eec364695c1f" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;time_zone&lt;/code&gt; represents all time zone transitions for a specific geographic area.</source>
          <target state="translated">クラス &lt;code&gt;time_zone&lt;/code&gt; は、特定の地理的領域のすべてのタイムゾーン遷移を表します。</target>
        </trans-unit>
        <trans-unit id="9fc764d5e8685dc9a3d7e91f0a64416a46a20991" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;type_info&lt;/code&gt; holds implementation-specific information about a type, including the name of the type and means to compare two types for equality or collating order. This is the class returned by the &lt;a href=&quot;../language/typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;type_info&lt;/code&gt; クラスは、型の名前や、2つの型が等しいか照合順序かを比較する手段など、型に関する実装固有の情報を保持します。これは、&lt;a href=&quot;../language/typeid&quot;&gt; &lt;code&gt;typeid&lt;/code&gt; &lt;/a&gt;演算子によって返されるクラスです。</target>
        </trans-unit>
        <trans-unit id="abf3f8441b03d07062b86fafd99c0d60e1b784bb" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;tzdb&lt;/code&gt; represents a copy of the &lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANA time zone database&lt;/a&gt;. Users cannot construct a &lt;code&gt;tzdb&lt;/code&gt; and can only obtain read-only access to one via the free functions &lt;code&gt;std::chrono::get_tzdb_list&lt;/code&gt; and &lt;code&gt;std::chrono::get_tzdb&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;tzdb&lt;/code&gt; は、&lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANAタイムゾーンデータベースの&lt;/a&gt;コピーを表します。ユーザーは &lt;code&gt;tzdb&lt;/code&gt; を構築できず、無料の関数 &lt;code&gt;std::chrono::get_tzdb_list&lt;/code&gt; および &lt;code&gt;std::chrono::get_tzdb&lt;/code&gt; への読み取り専用アクセスのみを取得できます。</target>
        </trans-unit>
        <trans-unit id="f0a8116ecd0276d23a4e127fc68adb47ce5aa791" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;unique_lock&lt;/code&gt; is a general-purpose mutex ownership wrapper allowing deferred locking, time-constrained attempts at locking, recursive locking, transfer of lock ownership, and use with condition variables.</source>
          <target state="translated">&lt;code&gt;unique_lock&lt;/code&gt; クラスは、遅延ロック、時間制限のあるロック試行、再帰的ロック、ロック所有権の転送、および条件変数での使用を可能にする汎用mutex所有権ラッパーです。</target>
        </trans-unit>
        <trans-unit id="0e2099ee784c8c8681479bd233caa16863f4c2a7" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;unique_lock&lt;/code&gt; is movable, but not copyable -- it meets the requirements of &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt; and &lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt; but not of &lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; or &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;unique_lock&lt;/code&gt; クラスは移動可能ですが、コピー可能ではありません。これは、&lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;および&lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignableの&lt;/a&gt;要件を満たしていますが、&lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;または&lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;の要件を満たしていません。</target>
        </trans-unit>
        <trans-unit id="cc857ea58c2bf22f34372b5a5a3fb53ce6834f5a" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;unique_lock&lt;/code&gt; meets the &lt;a href=&quot;../named_req/basiclockable&quot;&gt;BasicLockable&lt;/a&gt; requirements. If &lt;b&gt;Mutex&lt;/b&gt; meets the &lt;a href=&quot;../named_req/lockable&quot;&gt;Lockable&lt;/a&gt; requirements, &lt;code&gt;unique_lock&lt;/code&gt; also meets the &lt;a href=&quot;../named_req/lockable&quot;&gt;Lockable&lt;/a&gt; requirements (ex.: can be used in &lt;code&gt;&lt;a href=&quot;lock&quot;&gt;std::lock&lt;/a&gt;&lt;/code&gt;); if &lt;b&gt;Mutex&lt;/b&gt; meets the &lt;a href=&quot;../named_req/timedlockable&quot;&gt;TimedLockable&lt;/a&gt; requirements, &lt;code&gt;unique_lock&lt;/code&gt; also meets the &lt;a href=&quot;../named_req/timedlockable&quot;&gt;TimedLockable&lt;/a&gt; requirements.</source>
          <target state="translated">クラス &lt;code&gt;unique_lock&lt;/code&gt; は、&lt;a href=&quot;../named_req/basiclockable&quot;&gt;BasicLockable&lt;/a&gt;要件を満たしています。場合&lt;b&gt;ミューテックスが&lt;/b&gt;満たす&lt;a href=&quot;../named_req/lockable&quot;&gt;ロック可能&lt;/a&gt;要件を、 &lt;code&gt;unique_lock&lt;/code&gt; のにも適合している&lt;a href=&quot;../named_req/lockable&quot;&gt;ロック可能&lt;/a&gt;要件（例：で使用することができる &lt;code&gt;&lt;a href=&quot;lock&quot;&gt;std::lock&lt;/a&gt;&lt;/code&gt; ）。&lt;b&gt;Mutex&lt;/b&gt;が&lt;a href=&quot;../named_req/timedlockable&quot;&gt;TimedLockable&lt;/a&gt;要件を満たしている場合、 &lt;code&gt;unique_lock&lt;/code&gt; も&lt;a href=&quot;../named_req/timedlockable&quot;&gt;TimedLockable&lt;/a&gt;要件を満たしています。</target>
        </trans-unit>
        <trans-unit id="032091a049e7d6f3c4a2dbc349c7148ff098a4d1" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;weekday&lt;/code&gt; represent a day of the week in the Gregorian calendar. Its normal range is [0, 6], for Sunday through Saturday, but it can hold any value in the range [0, 255]. Seven named constants are predefined in the &lt;code&gt;std::chrono&lt;/code&gt; namespace for the seven days of the week.</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; クラスは、グレゴリオ暦の曜日を表します。通常の範囲は、日曜日から土曜日までは[0、6]ですが、[0、255]の範囲の任意の値を保持できます。 &lt;code&gt;std::chrono&lt;/code&gt; 名前空間では、7つの名前付き定数が7日間定義されています。</target>
        </trans-unit>
        <trans-unit id="56265c3dc95ef84c57c1c665e4e92d0394b639f7" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;weekday_indexed&lt;/code&gt; combines a &lt;a href=&quot;weekday&quot;&gt;&lt;code&gt;weekday&lt;/code&gt;&lt;/a&gt;, representing a day of the week in the Gregorian calendar, with a small index</source>
          <target state="translated">クラス &lt;code&gt;weekday_indexed&lt;/code&gt; は、グレゴリオ暦の曜日を表す&lt;a href=&quot;weekday&quot;&gt; &lt;code&gt;weekday&lt;/code&gt; &lt;/a&gt;と小さなインデックスを組み合わせたものです</target>
        </trans-unit>
        <trans-unit id="8e2bcc4575bcf6a86b21ec2403cfb210002249df" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;weekday_last&lt;/code&gt; represents the last weekday of some month.</source>
          <target state="translated">&lt;code&gt;weekday_last&lt;/code&gt; クラスは、ある月の最後の平日を表します。</target>
        </trans-unit>
        <trans-unit id="b53e49ba5644235f4f447898a7a3e502042d68b4" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;year&lt;/code&gt; represents a year in the &lt;a href=&quot;https://en.wikipedia.org/wiki/proleptic_Gregorian_calendar&quot;&gt;proleptic Gregorian calendar&lt;/a&gt;. Its range is [-32767, 32767].</source>
          <target state="translated">クラス &lt;code&gt;year&lt;/code&gt; は、&lt;a href=&quot;https://en.wikipedia.org/wiki/proleptic_Gregorian_calendar&quot;&gt;前兆のグレゴリオ暦の&lt;/a&gt;年を表します。その範囲は[-32767、32767]です。</target>
        </trans-unit>
        <trans-unit id="fea87e23deabaacc9943a26e2ca0a144201292df" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;year_month&lt;/code&gt; represents a specific month of a specific year, but with an unspecified day. It is a field-based time point, with a resolution of &lt;code&gt;std::chrono::months&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;year_month&lt;/code&gt; クラスは、特定の年の特定の月を表しますが、日は指定されていません。これはフィールドベースのタイムポイントであり、解像度は &lt;code&gt;std::chrono::months&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="72fdd2f49c8ec1c2127c97fefc1c830ce24e4a83" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;year_month_day&lt;/code&gt; represents a specific year, month, and day. It is a field-based time point, with a resolution of &lt;code&gt;std::chrono::days&lt;/code&gt;. &lt;code&gt;std::chrono::years&lt;/code&gt;- and &lt;code&gt;std::chrono::months&lt;/code&gt;-oriented arithmetic are supported directly. An implicit conversion to and from &lt;code&gt;std::chrono::sys_days&lt;/code&gt; allows &lt;code&gt;std::chrono::days&lt;/code&gt;-oriented arithmetic to be performed efficiently.</source>
          <target state="translated">&lt;code&gt;year_month_day&lt;/code&gt; クラスは、特定の年、月、日を表します。これは、 &lt;code&gt;std::chrono::days&lt;/code&gt; 解像度を持つフィールドベースの時点です。 &lt;code&gt;std::chrono::years&lt;/code&gt; と &lt;code&gt;std::chrono::months&lt;/code&gt; months-指向の演算が直接サポートされています。 &lt;code&gt;std::chrono::sys_days&lt;/code&gt; との間の暗黙的な変換により、 &lt;code&gt;std::chrono::days&lt;/code&gt; 指向の演算を効率的に実行できます。</target>
        </trans-unit>
        <trans-unit id="5375b9000c2f6d65598dc8525258ea0b2b967f7b" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;year_month_day_last&lt;/code&gt; represents the last day of a specific year and month. It is a field-based time point, with a resolution of &lt;code&gt;std::chrono::days&lt;/code&gt;, subject to the limit that it can only represent the last day of a month.</source>
          <target state="translated">&lt;code&gt;year_month_day_last&lt;/code&gt; クラスは、特定の年と月の最後の日を表します。これはフィールドベースのタイムポイントであり、解像度は &lt;code&gt;std::chrono::days&lt;/code&gt; であり、月の最終日しか表すことができないという制限があります。</target>
        </trans-unit>
        <trans-unit id="6e1c7f2658d8bf0200e0114c2b5f71f556a17286" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;year_month_weekday&lt;/code&gt; represents the n-th weekday of a specific year and month. It is a field-based time point, with a resolution of &lt;code&gt;std::chrono::days&lt;/code&gt;. &lt;code&gt;std::chrono::years&lt;/code&gt;- and &lt;code&gt;std::chrono::months&lt;/code&gt;-oriented arithmetic are supported directly. An implicit conversion to and from &lt;code&gt;std::chrono::sys_days&lt;/code&gt; allows &lt;code&gt;std::chrono::days&lt;/code&gt;-oriented arithmetic to be performed efficiently.</source>
          <target state="translated">クラス &lt;code&gt;year_month_weekday&lt;/code&gt; は、特定の年と月のn番目の曜日を表します。これは、 &lt;code&gt;std::chrono::days&lt;/code&gt; 解像度を持つフィールドベースの時点です。 &lt;code&gt;std::chrono::years&lt;/code&gt; と &lt;code&gt;std::chrono::months&lt;/code&gt; months-指向の演算が直接サポートされています。 &lt;code&gt;std::chrono::sys_days&lt;/code&gt; との間の暗黙的な変換により、 &lt;code&gt;std::chrono::days&lt;/code&gt; 指向の演算を効率的に実行できます。</target>
        </trans-unit>
        <trans-unit id="0cbf6f6b92958e9c9f7ec51c3bde2113037a04ef" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;year_month_weekday_last&lt;/code&gt; represents the last weekday of a specific year and month. It is a field-based time point, with a resolution of &lt;code&gt;std::chrono::days&lt;/code&gt;, except that it is limited to pointing to the last weekday of a year and month. &lt;code&gt;std::chrono::years&lt;/code&gt;- and &lt;code&gt;std::chrono::months&lt;/code&gt;-oriented arithmetic are supported directly. An implicit conversion to &lt;code&gt;std::chrono::sys_days&lt;/code&gt; allows &lt;code&gt;std::chrono::days&lt;/code&gt;-oriented arithmetic to be performed efficiently.</source>
          <target state="translated">&lt;code&gt;year_month_weekday_last&lt;/code&gt; クラスは、特定の年と月の最後の平日を表します。これはフィールドベースのタイムポイントであり、解像度は &lt;code&gt;std::chrono::days&lt;/code&gt; ですが、年と月の最後の平日を指すように制限されています。 &lt;code&gt;std::chrono::years&lt;/code&gt; と &lt;code&gt;std::chrono::months&lt;/code&gt; months-指向の演算が直接サポートされています。 &lt;code&gt;std::chrono::sys_days&lt;/code&gt; への暗黙的な変換により、 &lt;code&gt;std::chrono::days&lt;/code&gt; 指向の算術を効率的に実行できます。</target>
        </trans-unit>
        <trans-unit id="b726267cecb9466b6b380f41a9832d612ade7092" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;zoned_time&lt;/code&gt; represents a logical pairing of a time zone and a &lt;code&gt;&lt;a href=&quot;time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; whose resolution is &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;zoned_time&lt;/code&gt; は、タイムゾーンと、解像度が &lt;code&gt;Duration&lt;/code&gt; である &lt;code&gt;&lt;a href=&quot;time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; 論理ペアを表します。</target>
        </trans-unit>
        <trans-unit id="f0cab7e0f7bb1c93af1cb9a4666997517ff2fba1" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;zoned_traits&lt;/code&gt; provides a way to customize the behavior of the constructors of &lt;code&gt;std::chrono::zoned_time&lt;/code&gt; with custom time zone pointer types. In particular, it allows such types to specify the default time zone to use and the mapping of a time zone's name to the corresponding time zone pointer. It is acceptable for custom time zone pointer types to not support either operation, in which case the corresponding constructors of &lt;code&gt;zoned_time&lt;/code&gt; will not participate in overload resolution.</source>
          <target state="translated">&lt;code&gt;zoned_traits&lt;/code&gt; クラスは、カスタムタイムゾーンポインタータイプを &lt;code&gt;std::chrono::zoned_time&lt;/code&gt; してstd :: chrono :: zoned_timeのコンストラクターの動作をカスタマイズする方法を提供します。特に、このタイプでは、使用するデフォルトのタイムゾーンと、タイムゾーンの名前から対応するタイムゾーンポインターへのマッピングを指定できます。カスタムタイムゾーンポインタータイプがどちらの操作もサポートしないことは許容されます。その場合、 &lt;code&gt;zoned_time&lt;/code&gt; の対応するコンストラクターはオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="1fce24bd397b3fc59d265ef9283b0603741ea9e6" translate="yes" xml:space="preserve">
          <source>The class defines the following types:</source>
          <target state="translated">このクラスは以下の型を定義しています。</target>
        </trans-unit>
        <trans-unit id="c1d42e272c367b02bb7a725757feee6591362aaf" translate="yes" xml:space="preserve">
          <source>The class in the return type of &lt;code&gt;Derived::f&lt;/code&gt; must be either &lt;code&gt;Derived&lt;/code&gt; itself, or must be a &lt;a href=&quot;incomplete_type&quot;&gt;complete type&lt;/a&gt; at the point of declaration of &lt;code&gt;Derived::f&lt;/code&gt;.</source>
          <target state="translated">戻り値の型でクラス &lt;code&gt;Derived::f&lt;/code&gt; どちらかしなければならない &lt;code&gt;Derived&lt;/code&gt; 自体を、またはでなければならない&lt;a href=&quot;incomplete_type&quot;&gt;完全な型&lt;/a&gt;の宣言の時点での &lt;code&gt;Derived::f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23aa8c737cd141728071f9055d6ef22275b56310" translate="yes" xml:space="preserve">
          <source>The class keys &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; are indistinguishable in C++, except that the default &lt;a href=&quot;access&quot;&gt;access mode&lt;/a&gt; and default &lt;a href=&quot;derived_class&quot;&gt;inheritance mode&lt;/a&gt; are &lt;code&gt;public&lt;/code&gt; if class declaration uses the &lt;code&gt;struct&lt;/code&gt; class-key and &lt;code&gt;private&lt;/code&gt; if the class declaration uses the &lt;code&gt;class&lt;/code&gt; class-key. Both &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;struct&lt;/code&gt; can be used in a &lt;a href=&quot;class&quot;&gt;class definition&lt;/a&gt;.</source>
          <target state="translated">クラスキーの &lt;code&gt;struct&lt;/code&gt; と &lt;code&gt;class&lt;/code&gt; デフォルトことを除いて、C ++で区別できない&lt;a href=&quot;access&quot;&gt;アクセスモード&lt;/a&gt;と、デフォルト&lt;a href=&quot;derived_class&quot;&gt;の継承モードが&lt;/a&gt;ある &lt;code&gt;public&lt;/code&gt; クラス宣言が使用している場合、 &lt;code&gt;struct&lt;/code&gt; 、クラスキーと &lt;code&gt;private&lt;/code&gt; クラス宣言を使用している場合は &lt;code&gt;class&lt;/code&gt; クラスキーを。 &lt;code&gt;class&lt;/code&gt; と &lt;code&gt;struct&lt;/code&gt; 両方をクラス&lt;a href=&quot;class&quot;&gt;定義で&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="1586b1dc4e3f7b882ff5d87af7c14b4d7906a5ea" translate="yes" xml:space="preserve">
          <source>The class satisfies the requirements of &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt; and &lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;, but not the requirements of either &lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; or &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">クラスは、&lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;および&lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;の要件を満たしますが、&lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;または&lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignableの&lt;/a&gt;要件を満たしません。</target>
        </trans-unit>
        <trans-unit id="976424624ce0eeeaf2ff5fa550e55aefe6c4b670" translate="yes" xml:space="preserve">
          <source>The class specifier for a union declaration is similar to &lt;a href=&quot;class&quot;&gt;class or struct&lt;/a&gt; declaration:</source>
          <target state="translated">共用体宣言のクラス指定子は、&lt;a href=&quot;class&quot;&gt;クラスまたは構造体&lt;/a&gt;宣言に似ています。</target>
        </trans-unit>
        <trans-unit id="355599287a2d30891deccc040199bf8dd47ddb92" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_common_reference&lt;/code&gt; is a customization point that allows users to influence the result of &lt;code&gt;common_reference&lt;/code&gt; for user-defined types (typically proxy references). The primary template is empty.</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_common_reference&lt;/code&gt; は、ユーザーがユーザー定義型（通常はプロキシ参照）の &lt;code&gt;common_reference&lt;/code&gt; の結果に影響を与えることができるカスタマイズポイントです。プライマリテンプレートが空です。</target>
        </trans-unit>
        <trans-unit id="2dc44e02a34b25badf679ff2fa5512678041ec5e" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_fstream&lt;/code&gt; implements high-level input/output operations on file based streams. It interfaces a file-based streambuffer (&lt;code&gt;&lt;a href=&quot;basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;) with the high-level interface of (&lt;code&gt;&lt;a href=&quot;basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_fstream&lt;/code&gt; は、ファイルベースのストリームに高レベルの入出力操作を実装します。これは、インタフェースファイルベースのストリームバッファ（ &lt;code&gt;&lt;a href=&quot;basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt; ）（高レベルのインタフェースを備えた &lt;code&gt;&lt;a href=&quot;basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="038c0fe0b240f396bce88928ba29e4ed89f41c35" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_ifstream&lt;/code&gt; implements high-level input operations on file based streams. It interfaces a file-based streambuffer (&lt;code&gt;&lt;a href=&quot;basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;) with the high-level interface of (&lt;code&gt;&lt;a href=&quot;basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_ifstream&lt;/code&gt; は、ファイルベースのストリームに高レベルの入力操作を実装します。これは、インタフェースファイルベースのストリームバッファ（ &lt;code&gt;&lt;a href=&quot;basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt; ）（高レベルのインタフェースを備えた &lt;code&gt;&lt;a href=&quot;basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f70957a917c7c6e79e4b69f46be0693edc917904" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_iostream&lt;/code&gt; provides support for high level input/output operations on streams. The supported operations include sequential reading or writing and formatting. This functionality is implemented over the interface provided by the &lt;code&gt;basic_streambuf&lt;/code&gt; class. It is accessed through &lt;code&gt;basic_ios&lt;/code&gt; class.</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_iostream&lt;/code&gt; は、ストリームに対する高レベルの入出力操作をサポートします。サポートされる操作には、順次読み取りまたは書き込みとフォーマットが含まれます。この機能は、 &lt;code&gt;basic_streambuf&lt;/code&gt; クラスによって提供されるインターフェースを介して実装されます。 &lt;code&gt;basic_ios&lt;/code&gt; クラスを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="6f48eb60dadf7531f652d15977856f83c57372f1" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_istream&lt;/code&gt; provides support for high level input operations on character streams. The supported operations include formatted input (e.g. integer values or whitespace-separated characters and characters strings) and unformatted input (e.g. raw characters and character arrays). This functionality is implemented in terms of the interface provided by the underlying &lt;code&gt;basic_streambuf&lt;/code&gt; class, accessed through the &lt;code&gt;basic_ios&lt;/code&gt; base class. The only non-inherited data member of &lt;code&gt;basic_istream&lt;/code&gt;, in most implementations, is the value returned by &lt;a href=&quot;basic_istream/gcount&quot;&gt;&lt;code&gt;basic_istream::gcount()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_istream&lt;/code&gt; は、文字ストリームに対する高レベルの入力操作をサポートします。サポートされている操作には、フォーマットされた入力（整数値や空白で区切られた文字や文字列など）とフォーマットされていない入力（生の文字や文字配列など）があります。この機能は、 &lt;code&gt;basic_ios&lt;/code&gt; 基本クラスを通じてアクセスされる、基礎となる &lt;code&gt;basic_streambuf&lt;/code&gt; クラスによって提供されるインターフェースに関して実装されます。ほとんどの実装では、 &lt;code&gt;basic_istream&lt;/code&gt; の唯一の非継承データメンバーは、&lt;a href=&quot;basic_istream/gcount&quot;&gt; &lt;code&gt;basic_istream::gcount()&lt;/code&gt; &lt;/a&gt;によって返される値です。</target>
        </trans-unit>
        <trans-unit id="91ba0965e9c562f3a8c3efae66ebf65ef188a7a8" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_ofstream&lt;/code&gt; implements high-level output operations on file based streams. It interfaces a file-based streambuffer (&lt;code&gt;&lt;a href=&quot;basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;) with the high-level interface of (&lt;code&gt;&lt;a href=&quot;basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_ofstream&lt;/code&gt; は、ファイルベースのストリームに高レベルの出力操作を実装します。これは、インタフェースファイルベースのストリームバッファ（ &lt;code&gt;&lt;a href=&quot;basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt; ）（高レベルのインタフェースを備えた &lt;code&gt;&lt;a href=&quot;basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="058993ab90ece7b9a84ecbfb0f86f82f2260e21f" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_ostream&lt;/code&gt; provides support for high level output operations on character streams. The supported operations include formatted output (e.g. integer values) and unformatted output (e.g. raw characters and character arrays). This functionality is implemented in terms of the interface provided by the &lt;code&gt;basic_streambuf&lt;/code&gt; class, accessed through the &lt;code&gt;basic_ios&lt;/code&gt; base class. In typical implementations, &lt;code&gt;basic_ostream&lt;/code&gt; has no non-inherited data members.</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_ostream&lt;/code&gt; は、文字ストリームに対する高レベルの出力操作をサポートします。サポートされている操作には、フォーマットされた出力（例：整数値）とフォーマットされていない出力（例：生の文字と文字配列）があります。この機能は、 &lt;code&gt;basic_ios&lt;/code&gt; 基本クラスを通じてアクセスされる、 &lt;code&gt;basic_streambuf&lt;/code&gt; クラスによって提供されるインターフェースに関して実装されます。典型的な実装では、 &lt;code&gt;basic_ostream&lt;/code&gt; には非継承データメンバーはありません。</target>
        </trans-unit>
        <trans-unit id="0e7e639aa5c9b05b5996b19220f4281108f4b3af" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_regex&lt;/code&gt; provides a general framework for holding regular expressions.</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_regex&lt;/code&gt; は、正規表現を保持するための一般的なフレームワークを提供します。</target>
        </trans-unit>
        <trans-unit id="b81da74022682d007286a821128a6af2b9668a8d" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_string&lt;/code&gt; stores and manipulates sequences of &lt;a href=&quot;../language/types#Character_types&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;-like objects, which are non-array objects of &lt;a href=&quot;../named_req/trivialtype&quot;&gt;trivial&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;standard-layout&lt;/a&gt; type. The class is dependent neither on the character type nor on the nature of operations on that type. The definitions of the operations are supplied via the &lt;code&gt;Traits&lt;/code&gt; template parameter - a specialization of &lt;code&gt;&lt;a href=&quot;char_traits&quot;&gt;std::char_traits&lt;/a&gt;&lt;/code&gt; or a compatible traits class. &lt;code&gt;Traits::char_type&lt;/code&gt; and &lt;code&gt;CharT&lt;/code&gt; must name the same type; otherwise the program is ill-formed.</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_string&lt;/code&gt; は、&lt;a href=&quot;../named_req/trivialtype&quot;&gt;簡単な&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;標準レイアウト&lt;/a&gt;タイプの非配列オブジェクトである&lt;a href=&quot;../language/types#Character_types&quot;&gt; &lt;code&gt;char&lt;/code&gt; の&lt;/a&gt;ようなオブジェクトのシーケンスを格納および操作します。クラスは、文字型にも、その型に対する操作の性質にも依存しません。操作の定義は、 &lt;code&gt;Traits&lt;/code&gt; テンプレートパラメーター &lt;code&gt;&lt;a href=&quot;char_traits&quot;&gt;std::char_traits&lt;/a&gt;&lt;/code&gt; または互換性のあるトレイトクラスを介して提供されます。 &lt;code&gt;Traits::char_type&lt;/code&gt; と &lt;code&gt;CharT&lt;/code&gt; は同じ型の名前でなければなりません。そうでない場合、プログラムの形式が正しくありません。</target>
        </trans-unit>
        <trans-unit id="3529e9d1493b34a499972b62e42372d741fea4ca" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;basic_string_view&lt;/code&gt; describes an object that can refer to a constant contiguous sequence of &lt;code&gt;char&lt;/code&gt;-like objects with the first element of the sequence at position zero.</source>
          <target state="translated">クラステンプレート &lt;code&gt;basic_string_view&lt;/code&gt; は、シーケンスの最初の要素が位置0にある &lt;code&gt;char&lt;/code&gt; のようなオブジェクトの一定の連続したシーケンスを参照できるオブジェクトを記述します。</target>
        </trans-unit>
        <trans-unit id="7507c73a003171ab458d8f695b3576c9147c0031" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;bitset&lt;/code&gt; represents a fixed-size sequence of &lt;code&gt;N&lt;/code&gt; bits. Bitsets can be manipulated by standard logic operators and converted to and from strings and integers.</source>
          <target state="translated">クラステンプレートのビット &lt;code&gt;bitset&lt;/code&gt; は、 &lt;code&gt;N&lt;/code&gt; ビットの固定サイズのシーケンスを表します。ビットセットは、標準の論理演算子で操作したり、文字列や整数との間で変換したりできます。</target>
        </trans-unit>
        <trans-unit id="4d6cbadd3e49e177a9f79321e48eb0992ca418a2" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;span&lt;/code&gt; describes an object that can refer to a contiguous sequence of objects with the first element of the sequence at position zero. A &lt;code&gt;span&lt;/code&gt; can either have a</source>
          <target state="translated">クラステンプレート &lt;code&gt;span&lt;/code&gt; は、シーケンスの最初の要素が位置0にあるオブジェクトの連続したシーケンスを参照できるオブジェクトを記述します。 &lt;code&gt;span&lt;/code&gt; どちらか持つことができます</target>
        </trans-unit>
        <trans-unit id="23d03690a372ed970025d8a63d898a73cc806a78" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::basic_istringstream&lt;/code&gt; implements input operations on memory (&lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;) based streams. It essentially wraps a raw string device implementation (&lt;code&gt;&lt;a href=&quot;basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt;) into a higher-level interface (&lt;code&gt;&lt;a href=&quot;basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt;). The complete interface to unique &lt;code&gt;std::basic_stringbuf&lt;/code&gt; members is provided.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::basic_istringstream&lt;/code&gt; 、メモリ（ &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; ）ベースのストリームに入力操作を実装します。それは本質的に生の文字列デバイス実装（ &lt;code&gt;&lt;a href=&quot;basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt; ）をより高いレベルのインターフェース（ &lt;code&gt;&lt;a href=&quot;basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt; ）にラップします。一意の &lt;code&gt;std::basic_stringbuf&lt;/code&gt; メンバーへの完全なインターフェースが提供されます。</target>
        </trans-unit>
        <trans-unit id="caadefd6d3470a314eb57d7f6f435dad008491e3" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::basic_ostringstream&lt;/code&gt; implements output operations on memory (&lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;) based streams. It essentially wraps a raw string device implementation (&lt;code&gt;&lt;a href=&quot;basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt;) into a higher-level interface (&lt;code&gt;&lt;a href=&quot;basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;). The complete interface to unique &lt;code&gt;std::basic_stringbuf&lt;/code&gt; members is provided.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::basic_ostringstream&lt;/code&gt; 、メモリ（ &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; ）ベースのストリームに出力操作を実装します。これは基本的に、生の文字列デバイス実装（ &lt;code&gt;&lt;a href=&quot;basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt; ）を上位レベルのインターフェース（ &lt;code&gt;&lt;a href=&quot;basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt; ）にラップします。一意の &lt;code&gt;std::basic_stringbuf&lt;/code&gt; メンバーへの完全なインターフェースが提供されます。</target>
        </trans-unit>
        <trans-unit id="ac98e5b30fb10492d8969c7963b1fe1e68e40896" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::basic_osyncstream&lt;/code&gt; is a convenience wrapper for &lt;a href=&quot;basic_syncbuf&quot;&gt;&lt;code&gt;std::basic_syncbuf&lt;/code&gt;&lt;/a&gt;. It provides a mechanism to synchronize threads writing to the same stream.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::basic_osyncstream&lt;/code&gt; のための便利なラッパーである&lt;a href=&quot;basic_syncbuf&quot;&gt; &lt;code&gt;std::basic_syncbuf&lt;/code&gt; &lt;/a&gt;。同じストリームに書き込むスレッドを同期するメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="bee08bb9ce8d30333290b0627f454f47f97b513c" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::basic_stringstream&lt;/code&gt; implements input/output operations on memory (&lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;) based streams. It essentially wraps a raw string device implementation (&lt;code&gt;&lt;a href=&quot;basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt;) into a higher-level interface (&lt;code&gt;&lt;a href=&quot;basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt;). The complete interface to unique &lt;code&gt;std::basic_stringbuf&lt;/code&gt; members is provided.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::basic_stringstream&lt;/code&gt; 、メモリ（ &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; ）ベースのストリームで入出力操作を実装します。これは基本的に、生の文字列デバイス実装（ &lt;code&gt;&lt;a href=&quot;basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt; ）を上位レベルのインターフェース（ &lt;code&gt;&lt;a href=&quot;basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt; ）にラップします。一意の &lt;code&gt;std::basic_stringbuf&lt;/code&gt; メンバーへの完全なインターフェースが提供されます。</target>
        </trans-unit>
        <trans-unit id="aaa9f8a35a71bdecd961c1c3379e795b83b36290" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::common_comparison_category&lt;/code&gt; provides an alias (as the member typedef &lt;code&gt;type&lt;/code&gt;) for the strongest comparison category to which all of the template arguments &lt;code&gt;Ts...&lt;/code&gt; can be converted.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::common_comparison_category&lt;/code&gt; は、すべてのテンプレート引数 &lt;code&gt;Ts...&lt;/code&gt; を変換できる最強の比較カテゴリのエイリアスを（メンバーtypedef &lt;code&gt;type&lt;/code&gt; として）提供します。</target>
        </trans-unit>
        <trans-unit id="f74e8175eba48e378e9ab6cf198ec8d71e58b039" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::future&lt;/code&gt; provides a mechanism to access the result of asynchronous operations:</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::future&lt;/code&gt; は、非同期操作の結果にアクセスするためのメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="b7a4e20b605046d0489bd9d4193b2c75bc21bd0c" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::integer_sequence&lt;/code&gt; represents a compile-time sequence of integers. When used as an argument to a &lt;a href=&quot;../language/function_template&quot;&gt;function template&lt;/a&gt;, the &lt;a href=&quot;../language/parameter_pack&quot;&gt;parameter pack&lt;/a&gt;&lt;code&gt;Ints&lt;/code&gt; can be deduced and used in pack expansion.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::integer_sequence&lt;/code&gt; は、整数のコンパイル時シーケンスを表します。&lt;a href=&quot;../language/function_template&quot;&gt;関数テンプレートの&lt;/a&gt;引数として使用すると、&lt;a href=&quot;../language/parameter_pack&quot;&gt;パラメーターパックの&lt;/a&gt; &lt;code&gt;Ints&lt;/code&gt; を推定してパック展開で使用できます。</target>
        </trans-unit>
        <trans-unit id="639e2365e83d6e0a1ce1cee5cea25487d0336a45" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::match_results&lt;/code&gt; holds a collection of character sequences that represent the result of a regular expression match.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::match_results&lt;/code&gt; は、正規表現の一致の結果を表す文字シーケンスのコレクションを保持します。</target>
        </trans-unit>
        <trans-unit id="5cd218e9c79d048cdc2f4bfc83a128d5a613b938" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::optional&lt;/code&gt; manages an</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::optional&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="7b795144302fc0eec8c45d022d69b16abf2a0f04" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::packaged_task&lt;/code&gt; wraps any &lt;a href=&quot;../named_req/callable&quot;&gt;Callable&lt;/a&gt; target (function, lambda expression, bind expression, or another function object) so that it can be invoked asynchronously. Its return value or exception thrown is stored in a shared state which can be accessed through &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::packaged_task&lt;/code&gt; 、&lt;a href=&quot;../named_req/callable&quot;&gt;呼び出し可能な&lt;/a&gt;ターゲット（関数、ラムダ式、バインド式、または別の関数オブジェクト）をラップして、非同期で呼び出すことができるようにします。スローされた戻り値または例外は、 &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; オブジェクトを通じてアクセスできる共有状態に格納されます。</target>
        </trans-unit>
        <trans-unit id="d1f55e890f3d93b7c69638340290c189f4316224" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::pmr::polymorphic_allocator&lt;/code&gt; is an &lt;a href=&quot;../named_req/allocator&quot;&gt;Allocator&lt;/a&gt; whose allocation behavior depends on the memory resource it is constructed with. Thus, different instances of &lt;code&gt;polymorphic_allocator&lt;/code&gt; can exhibit entirely different allocation behavior. This runtime polymorphism allows objects using &lt;code&gt;polymorphic_allocator&lt;/code&gt; to behave as if they used different allocator types at run time despite the identical static allocator type.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::pmr::polymorphic_allocator&lt;/code&gt; ある&lt;a href=&quot;../named_req/allocator&quot;&gt;アロケータ&lt;/a&gt;その配分行動、それはで構成されているメモリリソースに依存します。したがって、 &lt;code&gt;polymorphic_allocator&lt;/code&gt; の異なるインスタンスは、まったく異なる割り当て動作を示す可能性があります。このランタイムポリモーフィズムにより、 &lt;code&gt;polymorphic_allocator&lt;/code&gt; を使用するオブジェクトは、静的アロケータータイプが同じであるにもかかわらず、実行時に異なるアロケータータイプを使用するかのように動作します。</target>
        </trans-unit>
        <trans-unit id="64a4aa64274c3e4ddf9c6f8ea707cabe8df1697d" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::promise&lt;/code&gt; provides a facility to store a value or an exception that is later acquired asynchronously via a &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; object created by the &lt;code&gt;std::promise&lt;/code&gt; object. Note that the &lt;code&gt;std::promise&lt;/code&gt; object is meant to be used only once.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::promise&lt;/code&gt; は、後で &lt;code&gt;std::promise&lt;/code&gt; オブジェクトによって作成された &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; オブジェクトを介して非同期で取得される値または例外を格納する機能を提供します。注意 &lt;code&gt;std::promise&lt;/code&gt; オブジェクトは一度だけ使用されることを意味しています。</target>
        </trans-unit>
        <trans-unit id="048062dc3b140831e39899a4170ae57a0e64b713" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::ratio&lt;/code&gt; and associated templates provide compile-time rational arithmetic support. Each instantiation of this template exactly represents any finite rational number.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::ratio&lt;/code&gt; および関連するテンプレートは、コンパイル時の有理算術サポートを提供します。このテンプレートの各インスタンス化は、有限の有理数を正確に表します。</target>
        </trans-unit>
        <trans-unit id="b714fec242cc94f139481788fee6d47f6bf712bd" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::ratio&lt;/code&gt; provides &lt;a href=&quot;../ratio&quot;&gt;compile-time rational arithmetic&lt;/a&gt; support. Each instantiation of this template exactly represents any finite rational number as long as its numerator &lt;code&gt;Num&lt;/code&gt; and denominator &lt;code&gt;Denom&lt;/code&gt; are representable as compile-time constants of type &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt;. In addition, &lt;code&gt;Denom&lt;/code&gt; may not be zero and may not be equal to the most negative value.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::ratio&lt;/code&gt; は、&lt;a href=&quot;../ratio&quot;&gt;コンパイル時の有理算術&lt;/a&gt;サポートを提供します。このテンプレートの各インスタンス化は、分子 &lt;code&gt;Num&lt;/code&gt; および分母 &lt;code&gt;Denom&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; 型のコンパイル時定数として表現できる限り、任意の有限有理数を正確に表します。さらに、 &lt;code&gt;Denom&lt;/code&gt; はゼロではなく、最も負の値と等しくない場合があります。</target>
        </trans-unit>
        <trans-unit id="8c48d82d4f5c30984ee05d53392aeeb13cd9e2bc" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::shared_future&lt;/code&gt; provides a mechanism to access the result of asynchronous operations, similar to &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt;, except that multiple threads are allowed to wait for the same shared state. Unlike &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt;, which is only moveable (so only one instance can refer to any particular asynchronous result), &lt;code&gt;std::shared_future&lt;/code&gt; is copyable and multiple shared future objects may refer to the same shared state.</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::shared_future&lt;/code&gt; は、複数のスレッドが同じ共有状態を待機できることを除いて、 &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; と同様に、非同期操作の結果にアクセスするメカニズムを提供します。移動のみ可能な &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; とは異なり（したがって、1つのインスタンスのみが特定の非同期結果を参照できます）、 &lt;code&gt;std::shared_future&lt;/code&gt; はコピー可能であり、複数の将来の共有オブジェクトが同じ共有状態を参照する場合があります。</target>
        </trans-unit>
        <trans-unit id="1750b83514f87a70ecb7f6d559c2d4086197e2c5" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;std::variant&lt;/code&gt; represents a type-safe &lt;a href=&quot;../language/union&quot;&gt;union&lt;/a&gt;. An instance of &lt;code&gt;std::variant&lt;/code&gt; at any given time either holds a value of one of its alternative types, or in the case of error - no value (this state is hard to achieve, see &lt;a href=&quot;variant/valueless_by_exception&quot;&gt;&lt;code&gt;valueless_by_exception&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">クラステンプレート &lt;code&gt;std::variant&lt;/code&gt; は、タイプセーフな&lt;a href=&quot;../language/union&quot;&gt;共用&lt;/a&gt;体を表します。 &lt;code&gt;std::variant&lt;/code&gt; のインスタンスは常に、代替タイプの1つの値を保持するか、エラーの場合は値を保持しません（この状態を達成するのは困難です&lt;a href=&quot;variant/valueless_by_exception&quot;&gt; &lt;code&gt;valueless_by_exception&lt;/code&gt; &lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="df780d19352ca77a9e81e07d0081e62704dfbeba" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;sub_match&lt;/code&gt; is used by the regular expression engine to denote sequences of characters matched by marked sub-expressions. A match is a &lt;code&gt;[begin, end)&lt;/code&gt; pair within the target range matched by the regular expression, but with additional observer functions to enhance code clarity.</source>
          <target state="translated">クラステンプレート &lt;code&gt;sub_match&lt;/code&gt; は、正規表現エンジンによって使用され、マークされたサブ表現と一致する文字のシーケンスを示します。一致は、正規表現によって一致したターゲット範囲内の &lt;code&gt;[begin, end)&lt;/code&gt; ペアですが、コードの明確性を高めるための追加のオブザーバー関数を備えています。</target>
        </trans-unit>
        <trans-unit id="ac9704077992d9fc373489a50f4bbca360b3bf54" translate="yes" xml:space="preserve">
          <source>The class template &lt;code&gt;time_of_day&lt;/code&gt; splits a &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; representing time since midnight into a &quot;broken down&quot; time such as</source>
          <target state="translated">クラステンプレート &lt;code&gt;time_of_day&lt;/code&gt; 分割A &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; などの「分解」の時間に深夜からの経過時間を表します</target>
        </trans-unit>
        <trans-unit id="3eb1fefb52f9b56042037b5cf5dfd0d4fbe27478" translate="yes" xml:space="preserve">
          <source>The class template acts as a wrapper to the underlying container - only a specific set of functions is provided. The queue pushes the elements on the back of the underlying container and pops them from the front.</source>
          <target state="translated">クラステンプレートは、基礎となるコンテナへのラッパーとして機能します-関数の特定のセットのみが提供されます。キューは、基礎となるコンテナの背面にある要素をプッシュし、前面からそれらをポップします。</target>
        </trans-unit>
        <trans-unit id="66376115affc65d77a1dba188bf784079f132234" translate="yes" xml:space="preserve">
          <source>The class template acts as a wrapper to the underlying container - only a specific set of functions is provided. The stack pushes and pops the element from the back of the underlying container, known as the top of the stack.</source>
          <target state="translated">クラステンプレートは、基礎となるコンテナへのラッパーとして機能します-特定の関数セットのみが提供されます。スタックは、スタックの先頭と呼ばれる、基礎となるコンテナの後ろから要素をプッシュしたりポップしたりします。</target>
        </trans-unit>
        <trans-unit id="913d33504f86e60b7d594711e133632d799e9139" translate="yes" xml:space="preserve">
          <source>The class type &lt;code&gt;std::partial_ordering&lt;/code&gt; is the result type of a &lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;three-way comparison&lt;/a&gt; that.</source>
          <target state="translated">クラス型 &lt;code&gt;std::partial_ordering&lt;/code&gt; は、&lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;3者間比較の&lt;/a&gt;結果型です。</target>
        </trans-unit>
        <trans-unit id="5f8fd1cd051ed62f4aae2af2ef778e18fa5deae5" translate="yes" xml:space="preserve">
          <source>The class type &lt;code&gt;std::strong_equality&lt;/code&gt; is the result type of a &lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;three-way comparison&lt;/a&gt; that.</source>
          <target state="translated">クラス型 &lt;code&gt;std::strong_equality&lt;/code&gt; は、&lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;3者間比較の&lt;/a&gt;結果型です。</target>
        </trans-unit>
        <trans-unit id="f0b391e8b1d2924cc2df0c071f824a13535a3913" translate="yes" xml:space="preserve">
          <source>The class type &lt;code&gt;std::strong_ordering&lt;/code&gt; is the result type of a &lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;three-way comparison&lt;/a&gt; that.</source>
          <target state="translated">クラス型 &lt;code&gt;std::strong_ordering&lt;/code&gt; は、&lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;3者間比較の&lt;/a&gt;結果型です。</target>
        </trans-unit>
        <trans-unit id="94948fee4206e5a063212825c1a5dba324d74bc2" translate="yes" xml:space="preserve">
          <source>The class type &lt;code&gt;std::weak_equality&lt;/code&gt; is the result type of a &lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;three-way comparison&lt;/a&gt; that.</source>
          <target state="translated">クラス型 &lt;code&gt;std::weak_equality&lt;/code&gt; は、&lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;3者間比較の&lt;/a&gt;結果型です。</target>
        </trans-unit>
        <trans-unit id="1ee17c787dc83810d3b5069706ce3e57df0497ff" translate="yes" xml:space="preserve">
          <source>The class type &lt;code&gt;std::weak_ordering&lt;/code&gt; is the result type of a &lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;three-way comparison&lt;/a&gt; that.</source>
          <target state="translated">クラス型 &lt;code&gt;std::weak_ordering&lt;/code&gt; は、&lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;3者間比較の&lt;/a&gt;結果型です。</target>
        </trans-unit>
        <trans-unit id="4701d5b65a3e69267b74f3e15bd5072a48820566" translate="yes" xml:space="preserve">
          <source>The class-key or &lt;code&gt;enum&lt;/code&gt; keyword present in the elaborated-type-specifier must agree in kind with the declaration to which the name in the elaborated-type-specifier refers.</source>
          <target state="translated">elaborated-type-specifierにあるclass-keyまたは &lt;code&gt;enum&lt;/code&gt; キーワードは、elaborated-type-specifierの名前が参照する宣言と同じ種類で一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="24f685345d705e67dcaed28004c42cbbe5fa66c7" translate="yes" xml:space="preserve">
          <source>The class-name or enum-name in the elaborated type specifier may either be a simple identifier or be a &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified-id&lt;/a&gt;. The name is looked up using &lt;a href=&quot;unqualified_lookup&quot;&gt;unqualified name lookup&lt;/a&gt; or &lt;a href=&quot;qualified_lookup&quot;&gt;qualified name lookup&lt;/a&gt;, depending on their appearance. But in either case, non-type names are not considered.</source>
          <target state="translated">エラボレートされた型指定子のクラス名または列挙名は、単純な識別子または&lt;a href=&quot;name#Qualified_identifiers&quot;&gt;修飾IDの&lt;/a&gt;いずれかです。名前は、外観に応じて、&lt;a href=&quot;unqualified_lookup&quot;&gt;非修飾名検索&lt;/a&gt;または&lt;a href=&quot;qualified_lookup&quot;&gt;修飾名検索&lt;/a&gt;を使用して検索されます。ただし、どちらの場合でも、非タイプ名は考慮されません。</target>
        </trans-unit>
        <trans-unit id="354603554cb293c18da720435d03777c84dbb5f8" translate="yes" xml:space="preserve">
          <source>The classes listed in the base-clause are direct base classes. Their bases are indirect base classes. The same class cannot be specified as a direct base class more than once, but the same class can be both direct and indirect base class.</source>
          <target state="translated">ベース句に記載されているクラスは、直接的なベースクラスです。その基底は間接基底クラスです。同じクラスを複数回直接基底クラスとして指定することはできませんが、同じクラスは直接基底クラスと間接基底クラスの両方を兼ねることができます。</target>
        </trans-unit>
        <trans-unit id="1cea83cbd5791acb1de079b9452c000b451656d7" translate="yes" xml:space="preserve">
          <source>The classification returned for the string &lt;code&gt;&quot;w&quot;&lt;/code&gt; may be exactly the same as &lt;code&gt;&quot;alnum&quot;&lt;/code&gt;, in which case &lt;code&gt;&lt;a href=&quot;isctype&quot;&gt;isctype()&lt;/a&gt;&lt;/code&gt; adds '_' explicitly.</source>
          <target state="translated">文字列 &lt;code&gt;&quot;w&quot;&lt;/code&gt; に対して返される分類は &lt;code&gt;&quot;alnum&quot;&lt;/code&gt; とまったく同じになる場合があります。その場合、 &lt;code&gt;&lt;a href=&quot;isctype&quot;&gt;isctype()&lt;/a&gt;&lt;/code&gt; は明示的に '_'を追加します。</target>
        </trans-unit>
        <trans-unit id="3f685e71298d6329f3079585486868fc8d36b2af" translate="yes" xml:space="preserve">
          <source>The clock &lt;code&gt;std::chrono::gps_clock&lt;/code&gt; is a &lt;a href=&quot;../named_req/clock&quot;&gt;Clock&lt;/a&gt; that represents Global Positioning System (GPS) time. It measures time since 00:00:00, 6 January 1980 UTC.</source>
          <target state="translated">クロック &lt;code&gt;std::chrono::gps_clock&lt;/code&gt; は、全地球測位システム（GPS）の時刻を表す&lt;a href=&quot;../named_req/clock&quot;&gt;クロック&lt;/a&gt;です。これは、1980年1月6日UTCの00:00:00からの時間を測定します。</target>
        </trans-unit>
        <trans-unit id="bfee064193b9d48bafa8ff6f66cf6b7aa290e331" translate="yes" xml:space="preserve">
          <source>The clock &lt;code&gt;std::chrono::tai_clock&lt;/code&gt; is a &lt;a href=&quot;../named_req/clock&quot;&gt;Clock&lt;/a&gt; that represents International Atomic Time (TAI). It measures time since 00:00:00, 1 January 1958, and is offset 10 seconds ahead of UTC at that date (i.e., its epoch, 1958-01-01 00:00:00 TAI, is 1957-12-31 23:59:50 UTC).</source>
          <target state="translated">クロック &lt;code&gt;std::chrono::tai_clock&lt;/code&gt; は、国際原子時（TAI）を表す&lt;a href=&quot;../named_req/clock&quot;&gt;クロック&lt;/a&gt;です。これは、1958年1月1日00:00:00からの時間を測定し、その日付のUTCより10秒進んでいます（つまり、そのエポック1958-01-01 00:00:00 TAIは1957-12-31 23です） ：59：50 UTC）。</target>
        </trans-unit>
        <trans-unit id="e01eb84e78303a21a91228ca5b6543a355d6076f" translate="yes" xml:space="preserve">
          <source>The clock &lt;code&gt;std::chrono::utc_clock&lt;/code&gt; is a &lt;a href=&quot;../named_req/clock&quot;&gt;Clock&lt;/a&gt; that represents Coordinated Universal Time (UTC). It measures time since 00:00:00 UTC, Thursday, 1 January 1970, including leap seconds.</source>
          <target state="translated">クロック &lt;code&gt;std::chrono::utc_clock&lt;/code&gt; は、協定世界時（UTC）を表す&lt;a href=&quot;../named_req/clock&quot;&gt;クロック&lt;/a&gt;です。1970年1月1日木曜日の00:00:00 UTC以降の時間を、うるう秒を含めて測定します。</target>
        </trans-unit>
        <trans-unit id="2ce385b63b923a15e64d2067b2f70b70f476178d" translate="yes" xml:space="preserve">
          <source>The clock tied to &lt;code&gt;sleep_time&lt;/code&gt; is used, which means that adjustments of the clock are taken into account. Thus, the duration of the block might, but might not, be less or more than &lt;code&gt;sleep_time - Clock::now()&lt;/code&gt; at the time of the call, depending on the direction of the adjustment. The function also may block for longer than until after &lt;code&gt;sleep_time&lt;/code&gt; has been reached due to scheduling or resource contention delays.</source>
          <target state="translated">縛らクロック &lt;code&gt;sleep_time&lt;/code&gt; クロックの調整は考慮されていることを意味し、使用されています。したがって、ブロックの継続時間は、調整の方向に応じて、呼び出し時の &lt;code&gt;sleep_time - Clock::now()&lt;/code&gt; より短い場合と長い場合があります。この関数は、スケジューリングまたはリソース競合の遅延により、 &lt;code&gt;sleep_time&lt;/code&gt; に到達するまでよりも長くブロックする場合もあります。</target>
        </trans-unit>
        <trans-unit id="fa793d7c160acf63000dc75ea7f5469cf01bff40" translate="yes" xml:space="preserve">
          <source>The clock tied to &lt;code&gt;timeout_time&lt;/code&gt; is used, which is not required to be a monotonic clock.There are no guarantees regarding the behavior of this function if the clock is adjusted discontinuously, but the existing implementations convert &lt;code&gt;timeout_time&lt;/code&gt; from &lt;code&gt;Clock&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../../chrono/system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&lt;/code&gt; and delegate to POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_cond_timedwait.html&quot;&gt;pthread_cond_timedwait&lt;/a&gt; so that the wait honors ajustments to the system clock, but not to the the user-provided &lt;code&gt;Clock&lt;/code&gt;. In any case, the function also may wait for longer than until after &lt;code&gt;timeout_time&lt;/code&gt; has been reached due to scheduling or resource contention delays.</source>
          <target state="translated">&lt;code&gt;timeout_time&lt;/code&gt; に関連付けられたクロックが使用されますが、これは単調クロックである必要はありません。クロックが不連続に調整されている場合、この関数の動作に関する保証はありませんが、既存の実装では、 &lt;code&gt;timeout_time&lt;/code&gt; を &lt;code&gt;Clock&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../../chrono/system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&lt;/code&gt; 変換します。system_clockおよびPOSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_cond_timedwait.html&quot;&gt;pthread_cond_timedwaitに&lt;/a&gt;委任します。これにより、待機はシステムクロックへの調整を尊重しますが、ユーザーが提供した &lt;code&gt;Clock&lt;/code&gt; は尊重しません。いずれの場合も、関数は、スケジューリングまたはリソース競合の遅延により、 &lt;code&gt;timeout_time&lt;/code&gt; に到達するまでよりも長く待機する場合があります。</target>
        </trans-unit>
        <trans-unit id="b7c4bc050b740626dbf1fc8c06b8c652935eaf67" translate="yes" xml:space="preserve">
          <source>The clock tied to &lt;code&gt;timeout_time&lt;/code&gt; is used, which means that adjustments of the clock are taken into account. Thus, the maximum duration of the block might, but might not, be less or more than &lt;code&gt;timeout_time - Clock::now()&lt;/code&gt; at the time of the call, depending on the direction of the adjustment. The function also may block for longer than until after &lt;code&gt;timeout_time&lt;/code&gt; has been reached due to scheduling or resource contention delays.</source>
          <target state="translated">&lt;code&gt;timeout_time&lt;/code&gt; に関連付けられたクロックが使用されます。つまり、クロックの調整が考慮されます。したがって、調整の方向に応じて、ブロックの最大継続時間は、呼び出し時の &lt;code&gt;timeout_time - Clock::now()&lt;/code&gt; よりも短い場合と長い場合があります。この関数は、スケジューリングまたはリソース競合の遅延により、 &lt;code&gt;timeout_time&lt;/code&gt; に到達するまでよりも長くブロックする場合もあります。</target>
        </trans-unit>
        <trans-unit id="894b1ae7ddba598ccce40d8b0f190492deb2041a" translate="yes" xml:space="preserve">
          <source>The code samples on this wiki &lt;a href=&quot;http://www.stroustrup.com/3rd_code.html&quot;&gt;follow Bjarne Stroustrup&lt;/a&gt; and &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rio-endl&quot;&gt;The C++ Core Guidelines&lt;/a&gt; in flushing the standard output only where necessary.</source>
          <target state="translated">このWikiのコードサンプルは、&lt;a href=&quot;http://www.stroustrup.com/3rd_code.html&quot;&gt;Bjarne Stroustrup&lt;/a&gt;および&lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rio-endl&quot;&gt;C ++コアガイドライン&lt;/a&gt;に従って、必要な場合にのみ標準出力をフラッシュします。</target>
        </trans-unit>
        <trans-unit id="3cc9e60597f252bb86bd1f42cb5d3cd1cfb8cda0" translate="yes" xml:space="preserve">
          <source>The collation key for the character sequence &lt;code&gt;[first, last)&lt;/code&gt; in the currently imbued locale.</source>
          <target state="translated">現在組み込まれているロケールの文字シーケンス &lt;code&gt;[first, last)&lt;/code&gt; の照合キー。</target>
        </trans-unit>
        <trans-unit id="b22d59729b28540e2c261fa1622c17f430bc0333" translate="yes" xml:space="preserve">
          <source>The combination is valid if &lt;code&gt;month()&lt;/code&gt; represents a valid month (&lt;code&gt;month().ok() == true&lt;/code&gt;), &lt;code&gt;unsigned{day()} &amp;gt;= 1&lt;/code&gt;, and &lt;code&gt;unsigned{day()} &amp;lt;= D&lt;/code&gt;, where D is the number of days in the month represented by &lt;code&gt;month()&lt;/code&gt;. The number of days in February is considered to be 29.</source>
          <target state="translated">&lt;code&gt;month()&lt;/code&gt; が有効な月（ &lt;code&gt;month().ok() == true&lt;/code&gt; ）、 &lt;code&gt;unsigned{day()} &amp;gt;= 1&lt;/code&gt; 、および &lt;code&gt;unsigned{day()} &amp;lt;= D&lt;/code&gt; 表す場合、組み合わせは有効です。ここで、Dは表される月の日数 &lt;code&gt;month()&lt;/code&gt; 。2月の日数は29日と見なされます。</target>
        </trans-unit>
        <trans-unit id="299149b66129ea51f7209f65e5c9c8a104c2e60d" translate="yes" xml:space="preserve">
          <source>The comma in various comma-separated lists, such as function argument lists (&lt;code&gt;f(a, b, c)&lt;/code&gt;) and initializer lists &lt;code&gt;int a[] = {1,2,3}&lt;/code&gt;, is not the comma operator. If the comma operator needs to be used in such contexts, it has to be parenthesized: &lt;code&gt;f(a, (n++, n+b), c)&lt;/code&gt;.</source>
          <target state="translated">関数の引数リスト（ &lt;code&gt;f(a, b, c)&lt;/code&gt; ）やイニシャライザリスト &lt;code&gt;int a[] = {1,2,3}&lt;/code&gt; など、さまざまなコンマ区切りリストのコンマは、コンマ演算子ではありません。このようなコンテキストでコンマ演算子を使用する必要がある場合は、括弧で囲む必要があります： &lt;code&gt;f(a, (n++, n+b), c)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d488bf849908d324aa3b6792f690387cae01a82" translate="yes" xml:space="preserve">
          <source>The comma operator expressions have the form.</source>
          <target state="translated">カンマ演算子の式は次のような形をしています。</target>
        </trans-unit>
        <trans-unit id="1d08ab7bae20cdd9d29de0eca78f0d5770cf98f4" translate="yes" xml:space="preserve">
          <source>The comma operator is not overloaded by any class in the standard library. The boost library uses &lt;code&gt;operator,&lt;/code&gt; in &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/assign/doc/index.html#intro&quot;&gt;boost.assign&lt;/a&gt;, boost.spirit, and other libraries. The database access library &lt;a href=&quot;http://soci.sourceforge.net/doc.html&quot;&gt;SOCI&lt;/a&gt; also overloads &lt;code&gt;operator,&lt;/code&gt;.</source>
          <target state="translated">カンマ演算子は、標準ライブラリのクラスによってオーバーロードされません。 boostライブラリは、&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/assign/doc/index.html#intro&quot;&gt;boost.assign&lt;/a&gt;、boost.spirit、およびその他のライブラリで &lt;code&gt;operator,&lt;/code&gt; 使用します。データベースアクセスライブラリ&lt;a href=&quot;http://soci.sourceforge.net/doc.html&quot;&gt;SOCI&lt;/a&gt;は &lt;code&gt;operator,&lt;/code&gt; もオーバーロードします。</target>
        </trans-unit>
        <trans-unit id="c800df5ac9c3f57a71dd8a0a1e138f4bcc97b764" translate="yes" xml:space="preserve">
          <source>The comma operator, &lt;code&gt;operator,&lt;/code&gt;. Unlike the built-in version, the overloads do not sequence their left operand before the right one.(until C++17) Because this operator may be overloaded, generic libraries use expressions such as &lt;code&gt;a,void(),b&lt;/code&gt; instead of &lt;code&gt;a,b&lt;/code&gt; to sequence execution of expressions of user-defined types. The boost library uses &lt;code&gt;operator,&lt;/code&gt; in &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/assign/doc/index.html#intro&quot;&gt;boost.assign&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/spirit/blob/develop/include/boost/spirit/home/qi/string/symbols.hpp#L317&quot;&gt;boost.spirit&lt;/a&gt;, and other libraries. The database access library &lt;a href=&quot;http://soci.sourceforge.net/doc.html&quot;&gt;SOCI&lt;/a&gt; also overloads &lt;code&gt;operator,&lt;/code&gt;.</source>
          <target state="translated">カンマ演算子 &lt;code&gt;operator,&lt;/code&gt; 。内蔵されたバージョンとは異なり、オーバーロードは、右の1の前に自分の左オペランドの配列を決定していない。（C ++ 17になるまで）この演算子がオーバーロードすることができるので、汎用的なライブラリのような表現を使用 &lt;code&gt;a,void(),b&lt;/code&gt; の代わりに &lt;code&gt;a,b&lt;/code&gt; ユーザー定義型の式の実行を順序付けます。 boostライブラリは、&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/assign/doc/index.html#intro&quot;&gt;boost.assign&lt;/a&gt;、&lt;a href=&quot;https://github.com/boostorg/spirit/blob/develop/include/boost/spirit/home/qi/string/symbols.hpp#L317&quot;&gt;boost.spirit&lt;/a&gt;、およびその他のライブラリーの &lt;code&gt;operator,&lt;/code&gt; 使用します。データベースアクセスライブラリ&lt;a href=&quot;http://soci.sourceforge.net/doc.html&quot;&gt;SOCI&lt;/a&gt;は &lt;code&gt;operator,&lt;/code&gt; もオーバーロードします。</target>
        </trans-unit>
        <trans-unit id="1b6cb0170adc4e3800c9ced00cfa4ccffb490a90" translate="yes" xml:space="preserve">
          <source>The common type of two &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; types is a &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; with the same clock as the two types and the &lt;code&gt;&lt;a href=&quot;../../types/common_type&quot;&gt;std::common_type&lt;/a&gt;&lt;/code&gt; of their durations.</source>
          <target state="translated">2つの &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; タイプの一般的なタイプは、2つのタイプと同じクロックとその持続時間の &lt;code&gt;&lt;a href=&quot;../../types/common_type&quot;&gt;std::common_type&lt;/a&gt;&lt;/code&gt; を持つ &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="098b2560bc5964f50659e0ba25d611da3936a573" translate="yes" xml:space="preserve">
          <source>The common workaround for such a catch-all statement is a type-dependent expression that is always false:</source>
          <target state="translated">このようなキャッチオール文の一般的な回避策は、型に依存した式で常に false であることです。</target>
        </trans-unit>
        <trans-unit id="c070c65d4a405765e86ab073670268a7d75d353d" translate="yes" xml:space="preserve">
          <source>The comparison and copying are bitwise (similar to &lt;code&gt;&lt;a href=&quot;../../string/byte/memcmp&quot;&gt;std::memcmp&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../string/byte/memcpy&quot;&gt;std::memcpy&lt;/a&gt;&lt;/code&gt;); no constructor, assignment operator, or comparison operator are used.</source>
          <target state="translated">比較とコピーはビット単位です（ &lt;code&gt;&lt;a href=&quot;../../string/byte/memcmp&quot;&gt;std::memcmp&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../../string/byte/memcpy&quot;&gt;std::memcpy&lt;/a&gt;&lt;/code&gt; と同様）。コンストラクタ、代入演算子、比較演算子は使用されません。</target>
        </trans-unit>
        <trans-unit id="dcdbc3a3503f2cf19021453e0957f700ee34d892" translate="yes" xml:space="preserve">
          <source>The comparison between &lt;code&gt;e.code()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc::stream&lt;/a&gt;&lt;/code&gt; compiles because &lt;code&gt;&lt;a href=&quot;../../error/error_code/is_error_code_enum&quot;&gt;std::is_error_code_enum&lt;/a&gt;&amp;lt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc&lt;/a&gt;&amp;gt;::value == true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../error/error_code/is_error_code_enum&quot;&gt;std::is_error_code_enum&lt;/a&gt;&amp;lt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc&lt;/a&gt;&amp;gt;::value == true&lt;/code&gt; &amp;lt; &lt;a href=&quot;../io_errc&quot;&gt;std :: io_errc&lt;/a&gt; &amp;gt; :: value == trueであるため、 &lt;code&gt;e.code()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc::stream&lt;/a&gt;&lt;/code&gt; の比較はコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="607651bcf9bec45c6eb29bfa73daf4c7cc4835c3" translate="yes" xml:space="preserve">
          <source>The comparison key for &lt;code&gt;c&lt;/code&gt; in the currently imbued locale.</source>
          <target state="translated">現在組み込まれているロケールの &lt;code&gt;c&lt;/code&gt; の比較キー。</target>
        </trans-unit>
        <trans-unit id="a35040839a2bde1c52ffbdf3b521c8b7486fbb42" translate="yes" xml:space="preserve">
          <source>The comparison object with which &lt;code&gt;a&lt;/code&gt; was constructed is returned.</source>
          <target state="translated">が構築され &lt;code&gt;a&lt;/code&gt; 比較オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="3654e010cde366f1228cb35ead854e1d709174b5" translate="yes" xml:space="preserve">
          <source>The compiler is allowed,</source>
          <target state="translated">コンパイラは許可されています。</target>
        </trans-unit>
        <trans-unit id="5b0c78bd02c55f195510bbc68ddc1d3066960669" translate="yes" xml:space="preserve">
          <source>The compiler is permitted to initialize other static and thread-local objects using constant initialization, if it can guarantee that the value would be the same as if the standard order of initialization was followed.</source>
          <target state="translated">コンパイラは、標準的な初期化の順序に従った場合と同じ値になることを保証できる場合、定数初期化を使用して他の静的オブジェクトやスレッドローカルオブジェクトを初期化することが許可されています。</target>
        </trans-unit>
        <trans-unit id="3509d6757108bb243a4a74c41da1164b451bd842" translate="yes" xml:space="preserve">
          <source>The compilers are allowed to initialize dynamically-initialized variables as part of static initialization (essentially, at compile time), if the following conditions are both true:</source>
          <target state="translated">コンパイラは、以下の条件が両方とも真であれば、静的初期化の一部として(基本的にはコンパイル時に)動的に初期化された変数を初期化することができます。</target>
        </trans-unit>
        <trans-unit id="7f422b0910e780df0e194f38bdd5cbabced51f14" translate="yes" xml:space="preserve">
          <source>The completion of the invocation of the constructor</source>
          <target state="translated">コンストラクタの呼び出しの完了</target>
        </trans-unit>
        <trans-unit id="50acdbb041b7c9bfeb40868b8f7d12c5991ab7bb" translate="yes" xml:space="preserve">
          <source>The completion of the thread identified by &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; で識別されるスレッドの完了</target>
        </trans-unit>
        <trans-unit id="473d434a9b1e1fa3c3fa95983b0cf370022ebc41" translate="yes" xml:space="preserve">
          <source>The complex conjugate of &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; の複素共役。</target>
        </trans-unit>
        <trans-unit id="82c5651398368fa9194c75ad0cd42b27eaccd0a5" translate="yes" xml:space="preserve">
          <source>The complex exponential function ez</source>
          <target state="translated">複素指数関数 ez</target>
        </trans-unit>
        <trans-unit id="0ec6bf51db38b2ef988daa5b51588addb599916a" translate="yes" xml:space="preserve">
          <source>The complexity (efficiency) of common operations on deques is as follows:</source>
          <target state="translated">デケの共通演算の複雑さ(効率性)は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6b6af511fdc68030780724ffc1d216fb7505882d" translate="yes" xml:space="preserve">
          <source>The complexity (efficiency) of common operations on vectors is as follows:</source>
          <target state="translated">ベクトルに対する一般的な演算の複雑さ(効率性)は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5019eb24db55cd605bd07c28cf8b2f307a537737" translate="yes" xml:space="preserve">
          <source>The complexity is constant (that is, the implementation cannot actually execute the while loop shown in operational semantics)</source>
          <target state="translated">複雑さは一定である(つまり,実装は運用意味論で示されているwhileループを実際に実行できない).</target>
        </trans-unit>
        <trans-unit id="f931e366fe99b22ec5e943477363a16341bd0215" translate="yes" xml:space="preserve">
          <source>The complexity of each function of &lt;code&gt;A&lt;/code&gt; does not exceed the complexity of the function of &lt;code&gt;B&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; の各関数の複雑さは、 &lt;code&gt;B&lt;/code&gt; の関数の複雑さを超えない</target>
        </trans-unit>
        <trans-unit id="83199838a945008228f4ecf7f4a77c745b15a0ca" translate="yes" xml:space="preserve">
          <source>The compound assignment expressions have the form.</source>
          <target state="translated">複合代入式は形式を持っています。</target>
        </trans-unit>
        <trans-unit id="28d0b992d873a598f8d887391cbb97b4c70fe2c0" translate="yes" xml:space="preserve">
          <source>The compound-statement in an atomic block is not allowed to execute any expression or statement or call any function that isn't &lt;code&gt;transaction_safe&lt;/code&gt; (this is a compile time error).</source>
          <target state="translated">アトミックブロック内の複合ステートメントは、式やステートメントの実行、 &lt;code&gt;transaction_safe&lt;/code&gt; でない関数の呼び出しは許可されていません（これはコンパイル時エラーです）。</target>
        </trans-unit>
        <trans-unit id="e4619f547f6df26fd02d4616e6152f98c9f6a5de" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;&lt;a href=&quot;convertibleto&quot;&gt;ConvertibleTo&lt;/a&gt;&amp;lt;From, To&amp;gt;&lt;/code&gt; specifies that an expression of the type and value category specified by &lt;code&gt;From&lt;/code&gt; can be implicitly and explicitly converted to the type &lt;code&gt;To&lt;/code&gt;, and the two forms of conversion are equivalent.</source>
          <target state="translated">コンセプト &lt;code&gt;&lt;a href=&quot;convertibleto&quot;&gt;ConvertibleTo&lt;/a&gt;&amp;lt;From, To&amp;gt;&lt;/code&gt; 指定はで指定された型と値カテゴリの発現こと &lt;code&gt;From&lt;/code&gt; 暗黙的および明示的に型に変換することができ &lt;code&gt;To&lt;/code&gt; 、変換の2つの形式は等価です。</target>
        </trans-unit>
        <trans-unit id="73226dcacd9920f3975d9f5342300c70194c4e84" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;&lt;a href=&quot;derivedfrom&quot;&gt;DerivedFrom&lt;/a&gt;&amp;lt;Derived, Base&amp;gt;&lt;/code&gt; is satisfied if and only if &lt;code&gt;Base&lt;/code&gt; is a class type that is either &lt;code&gt;Derived&lt;/code&gt; or a public and unambiguous base of &lt;code&gt;Derived&lt;/code&gt;, ignoring cv-qualifiers.</source>
          <target state="translated">概念 &lt;code&gt;&lt;a href=&quot;derivedfrom&quot;&gt;DerivedFrom&lt;/a&gt;&amp;lt;Derived, Base&amp;gt;&lt;/code&gt; 場合にのみ満たされる &lt;code&gt;Base&lt;/code&gt; がいずれかであるクラス型である &lt;code&gt;Derived&lt;/code&gt; 又は公衆及び明確な塩基 &lt;code&gt;Derived&lt;/code&gt; CV-修飾子を無視し、。</target>
        </trans-unit>
        <trans-unit id="865542a66c716385b69d90d41b457244ea2ccb89" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;&lt;a href=&quot;integral&quot;&gt;Integral&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is satisfied if and only if &lt;code&gt;T&lt;/code&gt; is an integral type.</source>
          <target state="translated">概念 &lt;code&gt;&lt;a href=&quot;integral&quot;&gt;Integral&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; が整数型である場合にのみ満たされます。</target>
        </trans-unit>
        <trans-unit id="13ea350d4b197e122799acfa74b35c5e7b7ca18a" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Assignable&amp;lt;LHS, RHS&amp;gt;&lt;/code&gt; specifies that an expression of the type and value category specified by &lt;code&gt;RHS&lt;/code&gt; can be assigned to an lvalue expression whose type is specified by &lt;code&gt;LHS&lt;/code&gt;.</source>
          <target state="translated">コンセプト &lt;code&gt;Assignable&amp;lt;LHS, RHS&amp;gt;&lt;/code&gt; で指定された型と値カテゴリの発現することを指定し &lt;code&gt;RHS&lt;/code&gt; は、その種類によって指定された左辺値式に代入することができ &lt;code&gt;LHS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af0568be2065f59b0b5a35861c61e4b6efdd42af" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Boolean&amp;lt;B&amp;gt;&lt;/code&gt; specifies the requirements for a type usable in Boolean contexts. For &lt;code&gt;Boolean&lt;/code&gt; to be satisfied, the logical operators must have the usual behavior (including short-circuiting). More precisely, given.</source>
          <target state="translated">概念 &lt;code&gt;Boolean&amp;lt;B&amp;gt;&lt;/code&gt; は、ブールコンテキストで使用可能なタイプの要件を指定します。 &lt;code&gt;Boolean&lt;/code&gt; 満たすべき、論理演算子は、（短絡を含む）の通常の動作を持っている必要があります。より正確には、与えられた。</target>
        </trans-unit>
        <trans-unit id="78c647d18f5fd078ec4a60d8ccae3148788df8c2" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Common&amp;lt;T, U&amp;gt;&lt;/code&gt; specifies that two types &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; share a</source>
          <target state="translated">&lt;code&gt;Common&amp;lt;T, U&amp;gt;&lt;/code&gt; の概念は、2つのタイプ &lt;code&gt;T&lt;/code&gt; と &lt;code&gt;U&lt;/code&gt; が</target>
        </trans-unit>
        <trans-unit id="602d9341f66432b56381f5712bb7c785a9ba46e4" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;CommonReference&amp;lt;T, U&amp;gt;&lt;/code&gt; specifies that two types &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; share a</source>
          <target state="translated">&lt;code&gt;CommonReference&amp;lt;T, U&amp;gt;&lt;/code&gt; の概念は、2つのタイプ &lt;code&gt;T&lt;/code&gt; と &lt;code&gt;U&lt;/code&gt; が</target>
        </trans-unit>
        <trans-unit id="bec7861bd36d28545110eeed67204481cd958f23" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;CopyConstructible&lt;/code&gt; is satisfied if &lt;code&gt;T&lt;/code&gt; is an lvalue reference type, or if it is a &lt;a href=&quot;moveconstructible&quot;&gt;&lt;code&gt;MoveConstructible&lt;/code&gt;&lt;/a&gt; object type where an object of that type can constructed from a (possibly const) lvalue or const rvalue of that type in both direct- and copy-initialization contexts with the usual semantics (a copy is constructed with the source unchanged).</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が左辺値参照型である場合、またはTが&lt;a href=&quot;moveconstructible&quot;&gt; &lt;code&gt;MoveConstructible&lt;/code&gt; &lt;/a&gt;オブジェクト型であり、その型のオブジェクトが直接およびコピー初期化の両方でその型の（おそらくconst）左辺値またはconst右辺値から構築できる場合、コンセプト &lt;code&gt;CopyConstructible&lt;/code&gt; は満たされます。通常のセマンティクスを持つコンテキスト（ソースは変更されずにコピーが作成されます）。</target>
        </trans-unit>
        <trans-unit id="f8022dc06d0404b06b8689521dec182dfcfe8dc9" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Copyable&amp;lt;T&amp;gt;&lt;/code&gt; specifies that &lt;code&gt;T&lt;/code&gt; is an &lt;a href=&quot;movable&quot;&gt;&lt;code&gt;Movable&lt;/code&gt;&lt;/a&gt; object type that can also copied (that is, it supports copy construction and copy assignment).</source>
          <target state="translated">コンセプト &lt;code&gt;Copyable&amp;lt;T&amp;gt;&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; が、コピーも可能な&lt;a href=&quot;movable&quot;&gt; &lt;code&gt;Movable&lt;/code&gt; &lt;/a&gt;オブジェクトタイプであることを指定します（つまり、コピーの構築とコピーの割り当てをサポートしています）。</target>
        </trans-unit>
        <trans-unit id="1ef21317d90ede51d217d9c162660b2f0fa040e8" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Destructible&lt;/code&gt; specifies the concept of all types whose instances can safely be destroyed at the end of their lifetime (including reference types).</source>
          <target state="translated">コンセプト &lt;code&gt;Destructible&lt;/code&gt; インスタンス安全に（参照型を含む）、生涯の終わりに破壊することができ、すべてのタイプの概念を指定します。</target>
        </trans-unit>
        <trans-unit id="19adc5ade33dedda46791b5120a34278e3e9fb8d" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Movable&amp;lt;T&amp;gt;&lt;/code&gt; specifies that &lt;code&gt;T&lt;/code&gt; is an object type that can moved (that is, it can be move constructed, move assigned, and lvalues of type &lt;code&gt;T&lt;/code&gt; can be swapped).</source>
          <target state="translated">概念 &lt;code&gt;Movable&amp;lt;T&amp;gt;&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; が移動可能なオブジェクト型であることを指定します（つまり、移動構築、移動割り当て、 &lt;code&gt;T&lt;/code&gt; 型の左辺値の交換が可能です）。</target>
        </trans-unit>
        <trans-unit id="72b44024301ed4034c4cb4c443a0a34d71d631f0" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;MoveConstructible&lt;/code&gt; is satisfied if &lt;code&gt;T&lt;/code&gt; is a reference type, or if it is an object type where an object of that type can constructed from an rvalue of that type in both direct- and copy-initialization contexts, with the usual semantics.</source>
          <target state="translated">&lt;code&gt;MoveConstructible&lt;/code&gt; の概念は、 &lt;code&gt;T&lt;/code&gt; が参照型である場合、または直接型とコピー初期化コンテキストの両方で、その型の右辺値から通常のセマンティクスでその型のオブジェクトを構築できるオブジェクト型である場合に満たされます。</target>
        </trans-unit>
        <trans-unit id="03dbedcdf06a326e5298663f07ce7d9595b129c3" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Predicate&amp;lt;F, Args...&amp;gt;&lt;/code&gt; specifies that &lt;code&gt;F&lt;/code&gt; is a predicate that accepts arguments whose types and value categories are encoded by &lt;code&gt;Args...&lt;/code&gt;, i.e., it can be invoked with these arguments to produce a &lt;a href=&quot;boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; result.</source>
          <target state="translated">概念 &lt;code&gt;Predicate&amp;lt;F, Args...&amp;gt;&lt;/code&gt; は、 &lt;code&gt;F&lt;/code&gt; が、型と値のカテゴリーが &lt;code&gt;Args...&lt;/code&gt; によってエンコードされる引数を受け入れる述語であることを指定します。つまり、これらの引数を使用して呼び出して&lt;a href=&quot;boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;結果を生成できます。</target>
        </trans-unit>
        <trans-unit id="a9b1aa8e76324363f4f2bf6abad7b7072fe22a3f" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Relation&amp;lt;R, T, U&amp;gt;&lt;/code&gt; specifies that &lt;code&gt;R&lt;/code&gt; defines a binary relation over the set of expressions whose type and value category are those encoded by either &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;U&lt;/code&gt;.</source>
          <target state="translated">概念 &lt;code&gt;Relation&amp;lt;R, T, U&amp;gt;&lt;/code&gt; は、 &lt;code&gt;R&lt;/code&gt; が、タイプまたは値のカテゴリーが &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;U&lt;/code&gt; のいずれかによってエンコードされたものである式のセットに対してバイナリ関係を定義することを指定します。</target>
        </trans-unit>
        <trans-unit id="6513199fc6b4ce22136fcd67141b170c7b741fee" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Same&amp;lt;T, U&amp;gt;&lt;/code&gt; is satisfied if and only if &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; denote the same type.</source>
          <target state="translated">概念 &lt;code&gt;Same&amp;lt;T, U&amp;gt;&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; と &lt;code&gt;U&lt;/code&gt; が同じ型を表す場合にのみ満たされます。</target>
        </trans-unit>
        <trans-unit id="3583800434e81c6a76cacf78f829171638922ff7" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;SignedIntegral&amp;lt;T&amp;gt;&lt;/code&gt; is satisfied if and only if &lt;code&gt;T&lt;/code&gt; is an integral type and &lt;code&gt;&lt;a href=&quot;../types/is_signed&quot;&gt;std::is_signed_v&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が整数型で &lt;code&gt;&lt;a href=&quot;../types/is_signed&quot;&gt;std::is_signed_v&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; &amp;lt;T&amp;gt;が &lt;code&gt;true&lt;/code&gt; の場合にのみ、 &lt;code&gt;SignedIntegral&amp;lt;T&amp;gt;&lt;/code&gt; の概念が満たされます。</target>
        </trans-unit>
        <trans-unit id="672ac5210d2625c6df97d19ab0eb50738d77147b" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;StrictWeakOrder&amp;lt;R, T, U&amp;gt;&lt;/code&gt; specifies that the &lt;a href=&quot;relation&quot;&gt;&lt;code&gt;Relation&lt;/code&gt;&lt;/a&gt;&lt;code&gt;R&lt;/code&gt; imposes a strict weak ordering on its arguments. A relation &lt;code&gt;r&lt;/code&gt; is a strict weak ordering if.</source>
          <target state="translated">概念 &lt;code&gt;StrictWeakOrder&amp;lt;R, T, U&amp;gt;&lt;/code&gt; は、&lt;a href=&quot;relation&quot;&gt; &lt;code&gt;Relation&lt;/code&gt; &lt;/a&gt; &lt;code&gt;R&lt;/code&gt; がその引数に厳密な弱い順序付けを課すことを指定しています。関係 &lt;code&gt;r&lt;/code&gt; は厳密な弱い順序付けのifです。</target>
        </trans-unit>
        <trans-unit id="e363b8f4b98e412296c9f75273fb6e09dac047cd" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;Swappable&amp;lt;T&amp;gt;&lt;/code&gt; specifies that lvalues of type &lt;code&gt;T&lt;/code&gt; are swappable.</source>
          <target state="translated">コンセプト &lt;code&gt;Swappable&amp;lt;T&amp;gt;&lt;/code&gt; は、タイプ &lt;code&gt;T&lt;/code&gt; の左辺値がスワップ可能であることを指定します。</target>
        </trans-unit>
        <trans-unit id="11f94864e3389b850713fed5e46729da9b5a87f2" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;SwappableWith&amp;lt;T, U&amp;gt;&lt;/code&gt; specifies that expressions of the type and value category encoded by &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; are swappable with each other. &lt;code&gt;SwappableWith&amp;lt;T, U&amp;gt;&lt;/code&gt; is satisfied only if a call to &lt;code&gt;&lt;a href=&quot;../utility/ranges/swap&quot;&gt;ranges::swap&lt;/a&gt;(t, u)&lt;/code&gt; exchanges the value of &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt;, that is, given distinct objects &lt;code&gt;t2&lt;/code&gt; equal to &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;u2&lt;/code&gt; equal to &lt;code&gt;u&lt;/code&gt;, after evaluating either &lt;code&gt;&lt;a href=&quot;../utility/ranges/swap&quot;&gt;ranges::swap&lt;/a&gt;(t, u)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../utility/ranges/swap&quot;&gt;ranges::swap&lt;/a&gt;(u, t)&lt;/code&gt;, &lt;code&gt;t2&lt;/code&gt; is equal to &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;u2&lt;/code&gt; is equal to &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">コンセプト &lt;code&gt;SwappableWith&amp;lt;T, U&amp;gt;&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; と &lt;code&gt;U&lt;/code&gt; によってエンコードされたタイプと値のカテゴリーの式が互いに交換可能であることを指定します。 &lt;code&gt;SwappableWith&amp;lt;T, U&amp;gt;&lt;/code&gt; 満たされている場合のみに呼 &lt;code&gt;&lt;a href=&quot;../utility/ranges/swap&quot;&gt;ranges::swap&lt;/a&gt;(t, u)&lt;/code&gt; 交換の値 &lt;code&gt;t&lt;/code&gt; と &lt;code&gt;u&lt;/code&gt; 、ある与えられた別個のオブジェクト &lt;code&gt;t2&lt;/code&gt; に等しく &lt;code&gt;t&lt;/code&gt; および &lt;code&gt;u2&lt;/code&gt; に等しい &lt;code&gt;u&lt;/code&gt; のいずれかで評価した後、 &lt;code&gt;&lt;a href=&quot;../utility/ranges/swap&quot;&gt;ranges::swap&lt;/a&gt;(t, u)&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../utility/ranges/swap&quot;&gt;ranges::swap&lt;/a&gt;(u, t)&lt;/code&gt; 、 &lt;code&gt;t2&lt;/code&gt; は &lt;code&gt;u&lt;/code&gt; および &lt;code&gt;u2&lt;/code&gt; と等しいは &lt;code&gt;t&lt;/code&gt; に等しい。</target>
        </trans-unit>
        <trans-unit id="efaf725ce3f251ac1fc637f5047af514790e0f15" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;UniformRandomBitGenerator &amp;lt;G&amp;gt;&lt;/code&gt; specifies that &lt;code&gt;G&lt;/code&gt; is the type of a uniform random bit generator, that is, objects of type &lt;code&gt;G&lt;/code&gt; is a function object returning unsigned integer values such that each value in the range of possible results has (ideally) equal probability of being returned.</source>
          <target state="translated">概念 &lt;code&gt;UniformRandomBitGenerator &amp;lt;G&amp;gt;&lt;/code&gt; は、 &lt;code&gt;G&lt;/code&gt; が均一ランダムビットジェネレーターのタイプであることを指定します。つまり、タイプ &lt;code&gt;G&lt;/code&gt; のオブジェクトは、可能な結果の範囲内の各値が（理想的には）等しい確率を持つように符号なし整数値を返す関数オブジェクトです。返されます。</target>
        </trans-unit>
        <trans-unit id="eff4121d5e5fbc13e5baa52e82079db0250b8a88" translate="yes" xml:space="preserve">
          <source>The concept &lt;code&gt;UnsignedIntegral&amp;lt;T&amp;gt;&lt;/code&gt; is satisfied if and only if &lt;code&gt;T&lt;/code&gt; is an integral type and &lt;code&gt;&lt;a href=&quot;../types/is_signed&quot;&gt;std::is_signed_v&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">概念 &lt;code&gt;UnsignedIntegral&amp;lt;T&amp;gt;&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; が整数型で &lt;code&gt;&lt;a href=&quot;../types/is_signed&quot;&gt;std::is_signed_v&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合にのみ満たされます。</target>
        </trans-unit>
        <trans-unit id="f8cc50209d2b8940fe4165236386b68230d84785" translate="yes" xml:space="preserve">
          <source>The concepts library provides definitions of fundamental library concepts that can be used to perform compile-time validation of template arguments and perform function dispatch based on properties of types. These concepts provide a foundation for equational reasoning in programs.</source>
          <target state="translated">概念ライブラリは、テンプレート引数のコンパイル時検証や型のプロパティに基づく関数ディスパッチの実行に使用できる基本的なライブラリ概念の定義を提供します。これらの概念は、プログラムにおける方程式推論の基礎を提供します。</target>
        </trans-unit>
        <trans-unit id="a1026c23f30aa7af3fc22b86cb9c76b42c7b444b" translate="yes" xml:space="preserve">
          <source>The conditional operator expressions have the form.</source>
          <target state="translated">条件演算子の式は形式を持っています。</target>
        </trans-unit>
        <trans-unit id="953755a8477688f5085d4c79e1c4af3fc99f75be" translate="yes" xml:space="preserve">
          <source>The conditional preprocessing block starts with &lt;code&gt;#if&lt;/code&gt;, &lt;code&gt;#ifdef&lt;/code&gt; or &lt;code&gt;#ifndef&lt;/code&gt; directive, then optionally includes any number of &lt;code&gt;#elif&lt;/code&gt; directives, then optionally includes at most one &lt;code&gt;#else&lt;/code&gt; directive and is terminated with &lt;code&gt;#endif&lt;/code&gt; directive. Any inner conditional preprocessing blocks are processed separately.</source>
          <target state="translated">条件付き前処理ブロック開始 &lt;code&gt;#if&lt;/code&gt; 、 &lt;code&gt;#ifdef&lt;/code&gt; 命令または &lt;code&gt;#ifndef&lt;/code&gt; の指令は、その後、必要に応じて任意の数含む &lt;code&gt;#elif&lt;/code&gt; の指令は、必要に応じて最大1つの含む &lt;code&gt;#else&lt;/code&gt; ディレクティブとで終端さ &lt;code&gt;#endif&lt;/code&gt; ディレクティブ。内部の条件付き前処理ブロックは個別に処理されます。</target>
        </trans-unit>
        <trans-unit id="fb4592b00b29b26bf69b048922d6dcb4a6c4ba74" translate="yes" xml:space="preserve">
          <source>The conditions when this function may be used and the way in which the provided buffer is used is implementation-defined.</source>
          <target state="translated">本関数が使用できる条件や、提供されるバッファの使用方法は実装で定義されています。</target>
        </trans-unit>
        <trans-unit id="eb4425137d23b5e3e31f870582e2292af2902e6c" translate="yes" xml:space="preserve">
          <source>The conjunction of two constraints is formed by using the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator in the constraint expression:</source>
          <target state="translated">2つの制約の結合は、制約式で &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 演算子を使用して形成されます。</target>
        </trans-unit>
        <trans-unit id="f3c47b5b57a2b95648e4ae3ef6e312fe9cd89e65" translate="yes" xml:space="preserve">
          <source>The constant &lt;code&gt;std::piecewise_construct&lt;/code&gt; is an instance of an empty struct tag type &lt;code&gt;&lt;a href=&quot;piecewise_construct_t&quot;&gt;std::piecewise_construct_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">定数 &lt;code&gt;std::piecewise_construct&lt;/code&gt; は、空の構造体タグタイプ &lt;code&gt;&lt;a href=&quot;piecewise_construct_t&quot;&gt;std::piecewise_construct_t&lt;/a&gt;&lt;/code&gt; インスタンスです。</target>
        </trans-unit>
        <trans-unit id="b70f496a1d51e8442a69fb3ba6e8a15e510ec9cc" translate="yes" xml:space="preserve">
          <source>The constraint associated with a declaration are determined by &lt;a href=&quot;constraints#Constraint_normalization&quot;&gt;normalizing&lt;/a&gt; a logical AND expression whose operands are in the following order:</source>
          <target state="translated">宣言に関連付けられた制約は、オペランドが次の順序になっている論理AND式を&lt;a href=&quot;constraints#Constraint_normalization&quot;&gt;正規化&lt;/a&gt;することによって決定されます。</target>
        </trans-unit>
        <trans-unit id="0a102d1707fb829c6a783c3fe78ff549237860bd" translate="yes" xml:space="preserve">
          <source>The constraints on &lt;code&gt;nullopt_t&lt;/code&gt;'s constructors exist to support both &lt;code&gt;op = {};&lt;/code&gt; and &lt;code&gt;op = nullopt;&lt;/code&gt; as the syntax for disengaging an optional object.</source>
          <target state="translated">&lt;code&gt;nullopt_t&lt;/code&gt; のコンストラクターに対する制約は、両方の &lt;code&gt;op = {};&lt;/code&gt; をサポートするために存在します。および &lt;code&gt;op = nullopt;&lt;/code&gt; オプションのオブジェクトを解放するための構文として。</target>
        </trans-unit>
        <trans-unit id="be930e842260d797cc680f8145491945ea7d3d77" translate="yes" xml:space="preserve">
          <source>The constructed &lt;code&gt;T&lt;/code&gt; object.</source>
          <target state="translated">構築された &lt;code&gt;T&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="eefc9886b95543e22010deacfaa6ae6c51c567c6" translate="yes" xml:space="preserve">
          <source>The constructed optional object.</source>
          <target state="translated">構築されたオプションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="d684d3c8e5eece4b15ad75f687ca9ca6f533a06e" translate="yes" xml:space="preserve">
          <source>The constructor and the copy assignment operator from &lt;code&gt;auto_ptr_ref&lt;/code&gt; is provided to allow copy-constructing and assigning &lt;code&gt;&lt;a href=&quot;../auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt; from nameless temporaries. Since its copy constructor and copy assignment operator take the argument as non-const reference, they cannot bind rvalue arguments directly. However, a &lt;a href=&quot;operator_auto_ptr&quot;&gt;user-defined conversion&lt;/a&gt; can be executed (which releases the original auto_ptr), followed by a call to the constructor or copy-assignment operator that take &lt;code&gt;auto_ptr_ref&lt;/code&gt; by value. This is an early implementation of &lt;a href=&quot;../../utility/move&quot;&gt;move semantics&lt;/a&gt;.</source>
          <target state="translated">名前のない一時 &lt;code&gt;&lt;a href=&quot;../auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt; からstd :: auto_ptrをコピー構築して割り当てることができるように、 &lt;code&gt;auto_ptr_ref&lt;/code&gt; からのコンストラクターとコピー割り当て演算子が提供されています。コピーコンストラクターとコピー代入演算子は引数を非const参照として受け取るため、右辺値引数を直接バインドすることはできません。ただし、&lt;a href=&quot;operator_auto_ptr&quot;&gt;ユーザー定義の変換&lt;/a&gt;（元のauto_ptrを解放する）を実行してから、値によって &lt;code&gt;auto_ptr_ref&lt;/code&gt; を取るコンストラクターまたはコピー割り当て演算子を呼び出すことができます。これは、&lt;a href=&quot;../../utility/move&quot;&gt;移動セマンティクスの&lt;/a&gt;初期の実装です。</target>
        </trans-unit>
        <trans-unit id="a88b24b86cbbedb529370f293289727d15460bac" translate="yes" xml:space="preserve">
          <source>The constructor and the copy assignment operator from &lt;code&gt;auto_ptr_ref&lt;/code&gt; is provided to allow copy-constructing and assigning &lt;code&gt;&lt;a href=&quot;../auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt; from nameless temporaries. Since its copy constructor and copy assignment operator take the argument as non-const reference, they cannot bind rvalue arguments directly. However, a &lt;strong&gt;user-defined conversion&lt;/strong&gt; can be executed (which releases the original auto_ptr), followed by a call to the constructor or copy-assignment operator that take &lt;code&gt;auto_ptr_ref&lt;/code&gt; by value. This is an early implementation of &lt;a href=&quot;../../utility/move&quot;&gt;move semantics&lt;/a&gt;.</source>
          <target state="translated">名前のない一時 &lt;code&gt;&lt;a href=&quot;../auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt; からstd :: auto_ptrをコピー構築して割り当てることができるように、 &lt;code&gt;auto_ptr_ref&lt;/code&gt; からのコンストラクターとコピー割り当て演算子が提供されています。コピーコンストラクターとコピー代入演算子は引数を非const参照として受け取るため、右辺値引数を直接バインドすることはできません。ただし、&lt;strong&gt;ユーザー定義の変換&lt;/strong&gt;（元のauto_ptrを解放する）を実行してから、値によって &lt;code&gt;auto_ptr_ref&lt;/code&gt; を取るコンストラクターまたはコピー割り当て演算子を呼び出すことができます。これは、&lt;a href=&quot;../../utility/move&quot;&gt;移動セマンティクスの&lt;/a&gt;初期の実装です。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e8f96a3d02cb90d6715ab5ee42669b5a65f12ea9" translate="yes" xml:space="preserve">
          <source>The constructor is &lt;code&gt;explicit&lt;/code&gt; if and only if &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;U1&amp;amp;&amp;amp;, T0&amp;gt;::value&lt;/code&gt; or &lt;code&gt;std::convertible&amp;lt;U2&amp;amp;&amp;amp;, T1&amp;gt;::value&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;U1&amp;amp;&amp;amp;, T0&amp;gt;::value&lt;/code&gt; &amp;lt;U1 &amp;amp;&amp;amp;、T0&amp;gt; :: valueまたは &lt;code&gt;std::convertible&amp;lt;U2&amp;amp;&amp;amp;, T1&amp;gt;::value&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合にのみ、コンストラクターは &lt;code&gt;explicit&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="01f5f9ea7415bf4964b071d1eb2b717e453d8da5" translate="yes" xml:space="preserve">
          <source>The constructor is &lt;code&gt;explicit&lt;/code&gt; if and only if &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;Ui&amp;amp;&amp;amp;, Ti&amp;gt;::value&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; for at least one &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;Ui&amp;amp;&amp;amp;, Ti&amp;gt;::value&lt;/code&gt; &amp;lt;Ui &amp;amp;&amp;amp;、Ti&amp;gt; :: valueが少なくとも1つの &lt;code&gt;i&lt;/code&gt; について &lt;code&gt;false&lt;/code&gt; である場合にのみ、コンストラクターは &lt;code&gt;explicit&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fe1411ae2f665498529ac31d9d3be15d2754663c" translate="yes" xml:space="preserve">
          <source>The constructor is &lt;code&gt;explicit&lt;/code&gt; if and only if &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;const U1&amp;amp;, T0&amp;gt;::value&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;const U2&amp;amp;, T1&amp;gt;::value&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;const U1&amp;amp;, T0&amp;gt;::value&lt;/code&gt; &amp;lt;const U1＆、T0&amp;gt; :: valueまたは &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;const U2&amp;amp;, T1&amp;gt;::value&lt;/code&gt; &amp;lt;const U2＆、T1&amp;gt; :: valueが &lt;code&gt;false&lt;/code&gt; の場合にのみ、コンストラクターは &lt;code&gt;explicit&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cc9d995835de11c6c787cb53fba8d8c3e9580158" translate="yes" xml:space="preserve">
          <source>The constructor is &lt;code&gt;explicit&lt;/code&gt; if and only if &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;const Ui&amp;amp;, Ti&amp;gt;::value&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; for at least one &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible&lt;/a&gt;&amp;lt;const Ui&amp;amp;, Ti&amp;gt;::value&lt;/code&gt; &amp;lt;const Ui＆、Ti&amp;gt; :: valueが少なくとも1つの &lt;code&gt;i&lt;/code&gt; に対して &lt;code&gt;false&lt;/code&gt; である場合にのみ、コンストラクターは &lt;code&gt;explicit&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c239dd429fef286118a0c7a58dcc760a8076f974" translate="yes" xml:space="preserve">
          <source>The constructor is &lt;code&gt;explicit&lt;/code&gt; if and only if &lt;code&gt;Ti&lt;/code&gt; is not implicitly default-constructible for at least one &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">コンストラクターが &lt;code&gt;explicit&lt;/code&gt; は、少なくとも1つの &lt;code&gt;i&lt;/code&gt; について &lt;code&gt;Ti&lt;/code&gt; が暗黙的にデフォルトで構築可能でない場合に限ります。</target>
        </trans-unit>
        <trans-unit id="4f909c3f83a20755845619fc1848878079ea4072" translate="yes" xml:space="preserve">
          <source>The constructor is not user-provided (i.e., is implicitly-defined or defaulted on its first declaration)</source>
          <target state="translated">コンストラクタはユーザが提供するものではありません (つまり、最初の宣言時に暗黙的に定義されているか、デフォルトになっています)。</target>
        </trans-unit>
        <trans-unit id="514317104edd617f7cd6ce3cacd4b37307e546c0" translate="yes" xml:space="preserve">
          <source>The constructor of the element is called with exactly the same arguments as supplied to the function, forwarded with &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;.</source>
          <target state="translated">要素のコンストラクターは、 &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; で転送され、関数に提供されたものとまったく同じ引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b0604af6f2180e7068eb4f4536ff23e9db48698f" translate="yes" xml:space="preserve">
          <source>The constructor of the element type (&lt;code&gt;value_type&lt;/code&gt;, that is, &lt;code&gt;&lt;a href=&quot;../../utility/pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;) is called with exactly the same arguments as supplied to the function, forwarded with &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;.</source>
          <target state="translated">要素タイプのコンストラクター（ &lt;code&gt;value_type&lt;/code&gt; 、つまり &lt;code&gt;&lt;a href=&quot;../../utility/pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt; ）は、関数に提供されたものとまったく同じ引数で呼び出され、 &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; で転送されます。 。。</target>
        </trans-unit>
        <trans-unit id="14d17adea26e85b2515064aa28520a083e866af7" translate="yes" xml:space="preserve">
          <source>The constructors (14,16) accept a &lt;code&gt;std::chrono::choose&lt;/code&gt; parameter, but that parameter has no effect.</source>
          <target state="translated">コンストラクター（14、16）は &lt;code&gt;std::chrono::choose&lt;/code&gt; パラメーターを受け入れますが、そのパラメーターは効果がありません。</target>
        </trans-unit>
        <trans-unit id="ecfd8f32fcd60ed391f596bc6ee25cc4c6697d5c" translate="yes" xml:space="preserve">
          <source>The constructors of &lt;code&gt;&lt;a href=&quot;../basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; that takes a filename argument, if the file cannot be opened.</source>
          <target state="translated">コンストラクタ &lt;code&gt;&lt;a href=&quot;../basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; 、と &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; ファイルを開くことができない場合は、ファイル名の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="aeb37a2c7445e4497668ad31fcdc968770634864" translate="yes" xml:space="preserve">
          <source>The constructors of &lt;code&gt;&lt;a href=&quot;../istrstream&quot;&gt;std::istrstream&lt;/a&gt;&lt;/code&gt; do not create the underlying &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; in dynamically allocated mode, so the memory leaks that are possible with &lt;code&gt;&lt;a href=&quot;../ostrstream/~ostrstream&quot;&gt;std::ostrstream::~ostrstream&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../strstream/~strstream&quot;&gt;std::strstream::~strstream&lt;/a&gt;&lt;/code&gt; do not apply.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../istrstream&quot;&gt;std::istrstream&lt;/a&gt;&lt;/code&gt; のコンストラクターは動的に割り当てられたモードで基になる &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; 作成しないため、 &lt;code&gt;&lt;a href=&quot;../ostrstream/~ostrstream&quot;&gt;std::ostrstream::~ostrstream&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../strstream/~strstream&quot;&gt;std::strstream::~strstream&lt;/a&gt;&lt;/code&gt; 〜strstreamで発生する可能性のあるメモリリークは適用されません。</target>
        </trans-unit>
        <trans-unit id="d9c0b9aa6a8db5a697c059464e94148ae13b0c2c" translate="yes" xml:space="preserve">
          <source>The container manages the storage space that is allocated for its elements and provides member functions to access them, either directly or through iterators (objects with properties similar to pointers).</source>
          <target state="translated">コンテナは、その要素に割り当てられたストレージ空間を管理し、直接またはイテレータ(ポインタに似たプロパティを持つオブジェクト)を介してそれらにアクセスするためのメンバ関数を提供します。</target>
        </trans-unit>
        <trans-unit id="78f3618b6465868448ddccdd694c5e1c8cbbf120" translate="yes" xml:space="preserve">
          <source>The contents of two unordered containers &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are equal if the following conditions hold:</source>
          <target state="translated">次の条件が満たされている場合、2つの順序付けられていないコンテナー &lt;code&gt;lhs&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の内容は等しくなります。</target>
        </trans-unit>
        <trans-unit id="6328d65cc72658c8384891f87389511f792722f0" translate="yes" xml:space="preserve">
          <source>The control block is a dynamically-allocated object that holds:</source>
          <target state="translated">コントロールブロックは、動的に割り当てられたオブジェクトであり、保持します。</target>
        </trans-unit>
        <trans-unit id="dabf7c953c7e4ef8b33706dcb060c8334571b8bb" translate="yes" xml:space="preserve">
          <source>The controlled character sequence is an array of &lt;code&gt;CharT&lt;/code&gt; which, at all times, represents a subsequence, or a &quot;window&quot; into the associated character sequence. Its state is described by three pointers:</source>
          <target state="translated">制御された文字シーケンスは &lt;code&gt;CharT&lt;/code&gt; の配列であり、常に、サブシーケンス、または関連する文字シーケンスへの「ウィンドウ」を表します。その状態は、3つのポインターによって記述されます。</target>
        </trans-unit>
        <trans-unit id="26cfcc6f2a939bd6cff12f0bbc7b5ff915a1d154" translate="yes" xml:space="preserve">
          <source>The conversion function (3) is provided so that APIs that accept &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; file names can use pathnames with no changes to code.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; ファイル名を受け入れるAPIがコードを変更せずにパス名を使用できるように、変換関数（3）が提供されています。</target>
        </trans-unit>
        <trans-unit id="8b236ef4c5579332c47d6d813a0a9ffeca01e240" translate="yes" xml:space="preserve">
          <source>The conversion specifiers &lt;code&gt;lc&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, and &lt;code&gt;l[&lt;/code&gt; perform multibyte-to-wide character conversion as if by calling &lt;a href=&quot;../../string/multibyte/mbrtowc&quot;&gt;&lt;code&gt;mbrtowc()&lt;/code&gt;&lt;/a&gt; with an &lt;a href=&quot;../../string/multibyte/mbstate_t&quot;&gt;&lt;code&gt;mbstate_t&lt;/code&gt;&lt;/a&gt; object initialized to zero before the first character is converted.</source>
          <target state="translated">変換指定子 &lt;code&gt;lc&lt;/code&gt; 、 &lt;code&gt;ls&lt;/code&gt; 、および &lt;code&gt;l[&lt;/code&gt; は、最初の文字が変換される前に&lt;a href=&quot;../../string/multibyte/mbstate_t&quot;&gt; &lt;code&gt;mbstate_t&lt;/code&gt; &lt;/a&gt;オブジェクトをゼロに初期化して&lt;a href=&quot;../../string/multibyte/mbrtowc&quot;&gt; &lt;code&gt;mbrtowc()&lt;/code&gt; &lt;/a&gt;を呼び出すかのように、マルチバイトからワイド文字への変換を実行します。</target>
        </trans-unit>
        <trans-unit id="03ad1fb8a3c33fbbff42de235e51664745451da8" translate="yes" xml:space="preserve">
          <source>The conversion specifiers &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; always store the null terminator in addition to the matched characters. The size of the destination array must be at least one greater than the specified field width. The use of &lt;code&gt;%s&lt;/code&gt; or &lt;code&gt;%[&lt;/code&gt;, without specifying the destination array size, is as unsafe as &lt;code&gt;&lt;a href=&quot;gets&quot;&gt;std::gets&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">変換指定子 &lt;code&gt;s&lt;/code&gt; および &lt;code&gt;[&lt;/code&gt; は、一致した文字に加えて、常にnullターミネーターを格納します。宛先配列のサイズは、指定されたフィールド幅より少なくとも1大きくなければなりません。宛先配列サイズを指定せずに &lt;code&gt;%s&lt;/code&gt; または &lt;code&gt;%[&lt;/code&gt; を使用すると、 &lt;code&gt;&lt;a href=&quot;gets&quot;&gt;std::gets&lt;/a&gt;&lt;/code&gt; と同じくらい安全ではありません。</target>
        </trans-unit>
        <trans-unit id="ac471b8f3e3680d0aea88efb3834381526f7e2d3" translate="yes" xml:space="preserve">
          <source>The conversions &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; output &lt;code&gt;INF&lt;/code&gt;, &lt;code&gt;INFINITY&lt;/code&gt;, &lt;code&gt;NAN&lt;/code&gt; instead.</source>
          <target state="translated">変換 &lt;code&gt;F&lt;/code&gt; 、 &lt;code&gt;E&lt;/code&gt; 、 &lt;code&gt;G&lt;/code&gt; 、 &lt;code&gt;A&lt;/code&gt; は、代わりに &lt;code&gt;INF&lt;/code&gt; 、 &lt;code&gt;INFINITY&lt;/code&gt; 、 &lt;code&gt;NAN&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="ddff1bdc6fe2f15d06629502821413709da3be1a" translate="yes" xml:space="preserve">
          <source>The copy assignment operator for class &lt;code&gt;T&lt;/code&gt; is trivial if all of the following is true:</source>
          <target state="translated">クラス &lt;code&gt;T&lt;/code&gt; のコピー代入演算子は、次のすべてが当てはまる場合は簡単です。</target>
        </trans-unit>
        <trans-unit id="3cf1f689dd70b42e124541368f97c7780c6e3e34" translate="yes" xml:space="preserve">
          <source>The copy assignment operator is called whenever selected by &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;, e.g. when an object appears on the left side of an assignment expression.</source>
          <target state="translated">コピー代入演算子は、オブジェクトが代入式の左側にある場合など、&lt;a href=&quot;overload_resolution&quot;&gt;オーバーロード解決&lt;/a&gt;によって選択されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="759dc17da3835f27b9a0abba76c5a7f15c67c981" translate="yes" xml:space="preserve">
          <source>The copy assignment operator is defined as deleted (and the move assignment operator is not declared). Closure types are not &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">コピー代入演算子は削除済みとして定義されています（そして移動代入演算子は宣言されていません）。クロージャタイプは&lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignableで&lt;/a&gt;はありません。</target>
        </trans-unit>
        <trans-unit id="3d5feaf369ec23df58930d6d9b201805ada42f07" translate="yes" xml:space="preserve">
          <source>The copy constructor and the move constructor are implicitly-declared(until C++14)declared as defaulted(since C++14) and may be implicitly-defined according to the usual rules for &lt;a href=&quot;copy_constructor&quot;&gt;copy constructors&lt;/a&gt; and &lt;a href=&quot;move_constructor&quot;&gt;move constructors&lt;/a&gt;.</source>
          <target state="translated">コピーコンストラクターと移動コンストラクターは、暗黙的に宣言され（C ++ 14まで）、デフォルトとして宣言され（C ++ 14以降）、&lt;a href=&quot;copy_constructor&quot;&gt;コピーコンストラクター&lt;/a&gt;と&lt;a href=&quot;move_constructor&quot;&gt;移動コンストラク&lt;/a&gt;ターの通常の規則に従って暗黙的に定義されます。</target>
        </trans-unit>
        <trans-unit id="a1fbbb2f2a9873d3581231edb6a3bf3f2f9295e5" translate="yes" xml:space="preserve">
          <source>The copy constructor for class &lt;code&gt;T&lt;/code&gt; is trivial if all of the following are true:</source>
          <target state="translated">クラス &lt;code&gt;T&lt;/code&gt; のコピーコンストラクターは、次のすべてが当てはまる場合は簡単です。</target>
        </trans-unit>
        <trans-unit id="5a61f82e1090e197177cd4889d3439e454755975" translate="yes" xml:space="preserve">
          <source>The copy constructor is called whenever an object is &lt;a href=&quot;initialization&quot;&gt;initialized&lt;/a&gt; (by &lt;a href=&quot;direct_initialization&quot;&gt;direct-initialization&lt;/a&gt; or &lt;a href=&quot;copy_initialization&quot;&gt;copy-initialization&lt;/a&gt;) from another object of the same type (unless &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt; selects a better match or the call is &lt;a href=&quot;copy_elision&quot;&gt;elided&lt;/a&gt;), which includes.</source>
          <target state="translated">コピーコンストラクターは、オブジェクトが同じタイプの別のオブジェクトから（&lt;a href=&quot;direct_initialization&quot;&gt;直接初期化&lt;/a&gt;または&lt;a href=&quot;copy_initialization&quot;&gt;コピー&lt;/a&gt;初期化によって）&lt;a href=&quot;initialization&quot;&gt;初期化さ&lt;/a&gt;れるたびに呼び出されます（&lt;a href=&quot;overload_resolution&quot;&gt;オーバーロードの解決&lt;/a&gt;により適切な一致が選択されるか、呼び出しが&lt;a href=&quot;copy_elision&quot;&gt;省略される&lt;/a&gt;場合を除く）。</target>
        </trans-unit>
        <trans-unit id="8507794644c0362a07d03e6394dd36e5ccb79ce2" translate="yes" xml:space="preserve">
          <source>The copy deduction candidate is preferred over all other function templates implicitly generated from a constructor or constructor template.</source>
          <target state="translated">コピー控除候補は、コンストラクタまたはコンストラクタテンプレートから暗黙的に生成される他のすべての関数テンプレートよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="747997a874ad1f7bc25037668246d169dc11dcd1" translate="yes" xml:space="preserve">
          <source>The copy of the underlying string returned by &lt;code&gt;str&lt;/code&gt; is a temporary object that will be destructed at the end of the expression, so directly calling &lt;a href=&quot;../../string/basic_string/c_str&quot;&gt;&lt;code&gt;c_str()&lt;/code&gt;&lt;/a&gt; on the result of &lt;code&gt;str()&lt;/code&gt; (for example in &lt;code&gt;auto *ptr = out.str().c_str();&lt;/code&gt;) results in a dangling pointer.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; によって返される基になる文字列のコピーは、式の最後で破棄される一時オブジェクトであるため、 &lt;code&gt;str()&lt;/code&gt; の結果に対して&lt;a href=&quot;../../string/basic_string/c_str&quot;&gt; &lt;code&gt;c_str()&lt;/code&gt; &lt;/a&gt;を直接呼び出します（たとえば、 &lt;code&gt;auto *ptr = out.str().c_str();&lt;/code&gt; ）はぶら下がりポインタになります。</target>
        </trans-unit>
        <trans-unit id="60d00a31f5602765e3302a63438e51d4f9449061" translate="yes" xml:space="preserve">
          <source>The copy-initialization of the result of the function call is &lt;a href=&quot;eval_order&quot;&gt;sequenced-before&lt;/a&gt; the destruction of all temporaries at the end of expression, which, in turn, is</source>
          <target state="translated">関数呼び出しの結果のコピー初期化は、式の最後ですべての一時オブジェクトが破棄さ&lt;a href=&quot;eval_order&quot;&gt;れる前にシーケンス化さ&lt;/a&gt;れます。</target>
        </trans-unit>
        <trans-unit id="fa429f3126d475d851da7e1318884700c1618d55" translate="yes" xml:space="preserve">
          <source>The coroutine is suspended (its coroutine state is populated with local variables and current suspension point).</source>
          <target state="translated">コアーチンがサスペンドされています(コアーチンの状態はローカル変数と現在のサスペンドポイントを使用して設定されています)。</target>
        </trans-unit>
        <trans-unit id="f93ab229d575b110c0f62720474d6f4ce532847b" translate="yes" xml:space="preserve">
          <source>The correct conversion specifications for the &lt;a href=&quot;../../types/integer&quot;&gt;fixed-width integer types&lt;/a&gt; (&lt;code&gt;int8_t&lt;/code&gt;, etc) are defined in the header &lt;a href=&quot;../../types/integer&quot;&gt;&amp;lt;cinttypes&amp;gt;&lt;/a&gt; (although &lt;a href=&quot;../../types/integer&quot;&gt;&lt;code&gt;SCNdMAX&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../types/integer&quot;&gt;&lt;code&gt;SCNuMAX&lt;/code&gt;&lt;/a&gt;, etc is synonymous with &lt;code&gt;%jd&lt;/code&gt;, &lt;code&gt;%ju&lt;/code&gt;, etc).</source>
          <target state="translated">&lt;a href=&quot;../../types/integer&quot;&gt;固定幅の整数型&lt;/a&gt;（ &lt;code&gt;int8_t&lt;/code&gt; など）の正しい変換仕様は、ヘッダー&lt;a href=&quot;../../types/integer&quot;&gt;&amp;lt;cinttypes&amp;gt;で&lt;/a&gt;定義されています（ただし、&lt;a href=&quot;../../types/integer&quot;&gt; &lt;code&gt;SCNdMAX&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../types/integer&quot;&gt; &lt;code&gt;SCNuMAX&lt;/code&gt; &lt;/a&gt;などは &lt;code&gt;%jd&lt;/code&gt; 、 &lt;code&gt;%ju&lt;/code&gt; などと同義です）。</target>
        </trans-unit>
        <trans-unit id="15db9249b70354b71fe537b88d8394bd5d81be93" translate="yes" xml:space="preserve">
          <source>The correct conversion specifications for the fixed-width character types (&lt;code&gt;int8_t&lt;/code&gt;, etc) are defined in the header &lt;a href=&quot;../../types/integer&quot;&gt;&amp;lt;cinttypes&amp;gt;&lt;/a&gt; (although &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;PRIdMAX&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;PRIuMAX&lt;/a&gt;&lt;/code&gt;, etc is synonymous with &lt;code&gt;%jd&lt;/code&gt;, &lt;code&gt;%ju&lt;/code&gt;, etc).</source>
          <target state="translated">固定幅の文字タイプ（ &lt;code&gt;int8_t&lt;/code&gt; など）の正しい変換指定は、ヘッダー&lt;a href=&quot;../../types/integer&quot;&gt;&amp;lt;cinttypes&amp;gt;で&lt;/a&gt;定義されています（ただし、 &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;PRIdMAX&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;PRIuMAX&lt;/a&gt;&lt;/code&gt; などは &lt;code&gt;%jd&lt;/code&gt; 、 &lt;code&gt;%ju&lt;/code&gt; などと同義です）。</target>
        </trans-unit>
        <trans-unit id="5bd87815b2a9528ae12a41f936a8bbc8434e62a1" translate="yes" xml:space="preserve">
          <source>The correct length of the buffer that can receive the entire transformed string is &lt;code&gt;1+std::strxfrm(nullptr, src, 0)&lt;/code&gt;.</source>
          <target state="translated">変換された文字列全体を受け取ることができるバッファーの正しい長さは &lt;code&gt;1+std::strxfrm(nullptr, src, 0)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ab2bb50ec090349b366ef17811496ea35381fbec" translate="yes" xml:space="preserve">
          <source>The correct length of the buffer that can receive the entire transformed string is &lt;code&gt;1+std::wcsxfrm(&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;, src, 0)&lt;/code&gt;.</source>
          <target state="translated">変換された文字列全体を受け取ることができるバッファーの正しい長さは &lt;code&gt;1+std::wcsxfrm(&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;, src, 0)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2f06dc76e6d4b421ddcd6b60d3ed2303369b4928" translate="yes" xml:space="preserve">
          <source>The correct result can be represented as &lt;code&gt;int&lt;/code&gt; on all known implementations. For overflow to occur, &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;INT_MAX&lt;/a&gt;&lt;/code&gt; must be less than &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LDBL_MAX_EXP&lt;/a&gt;*log2(&lt;a href=&quot;../../types/climits&quot;&gt;FLT_RADIX&lt;/a&gt;)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;INT_MIN&lt;/a&gt;&lt;/code&gt; must be greater than &lt;code&gt;LDBL_MIN_EXP-&lt;a href=&quot;../../types/climits&quot;&gt;LDBL_MANT_DIG&lt;/a&gt;)*log2(&lt;a href=&quot;../../types/climits&quot;&gt;FLT_RADIX&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">正しい結果は、すべての既知の実装で &lt;code&gt;int&lt;/code&gt; として表すことができます。オーバーフローが発生するには、 &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;INT_MAX&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LDBL_MAX_EXP&lt;/a&gt;*log2(&lt;a href=&quot;../../types/climits&quot;&gt;FLT_RADIX&lt;/a&gt;)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;INT_MIN&lt;/a&gt;&lt;/code&gt; か、INT_MINが &lt;code&gt;LDBL_MIN_EXP-&lt;a href=&quot;../../types/climits&quot;&gt;LDBL_MANT_DIG&lt;/a&gt;)*log2(&lt;a href=&quot;../../types/climits&quot;&gt;FLT_RADIX&lt;/a&gt;)&lt;/code&gt; より大きい必要があります。</target>
        </trans-unit>
        <trans-unit id="f7284c934a898f61fc7b831e55a0c35b87058795" translate="yes" xml:space="preserve">
          <source>The corresponding type/type templates &lt;code&gt;std::in_place_t&lt;/code&gt;, &lt;code&gt;std::in_place_type_t&lt;/code&gt; and &lt;code&gt;std::in_place_index_t&lt;/code&gt; can be used in the constructor's parameter list to match the intended tag.</source>
          <target state="translated">対応するタイプ/タイプテンプレート &lt;code&gt;std::in_place_t&lt;/code&gt; 、 &lt;code&gt;std::in_place_type_t&lt;/code&gt; および &lt;code&gt;std::in_place_index_t&lt;/code&gt; をコンストラクターのパラメーターリストで使用して、目的のタグと一致させることができます。</target>
        </trans-unit>
        <trans-unit id="942cf9ae9a6d3badc39db24111513090bfb3dd85" translate="yes" xml:space="preserve">
          <source>The cosine is an entire function on the complex plane, and has no branch cuts.  Mathematical definition of the cosine is cos z =</source>
          <target state="translated">余弦は複素平面上の関数全体であり、枝切りを持たない。余弦の数学的定義は cos z=cos</target>
        </trans-unit>
        <trans-unit id="927374ff66f57aae8836497c2fe39e3cbac93b0e" translate="yes" xml:space="preserve">
          <source>The count and order of floating-point exceptions can be changed by optimization as long as the state as observed by the next floating-point operation is as if no optimization took place:</source>
          <target state="translated">次の浮動小数点演算で観測される状態が、最適化が行われなかった場合と同じである限り、浮動小数点例外の数と順序は最適化によって変更することができます。</target>
        </trans-unit>
        <trans-unit id="7d17f1800fe564bddef91d5783b748d674aa9406" translate="yes" xml:space="preserve">
          <source>The creator of the asynchronous operation can then use a variety of methods to query, wait for, or extract a value from the &lt;code&gt;std::future&lt;/code&gt;. These methods may block if the asynchronous operation has not yet provided a value.</source>
          <target state="translated">非同期操作の作成者は、さまざまなメソッドを使用して、 &lt;code&gt;std::future&lt;/code&gt; 値を照会、待機、または抽出できます。非同期操作がまだ値を提供していない場合、これらのメソッドはブロックする可能性があります。</target>
        </trans-unit>
        <trans-unit id="92bfef5342feb04a9c90c296a397274c28f936b5" translate="yes" xml:space="preserve">
          <source>The currency input manipulator &lt;code&gt;&lt;a href=&quot;../manip/get_money&quot;&gt;std::get_money&lt;/a&gt;&lt;/code&gt; (technically, &lt;a href=&quot;../../locale/money_get/get&quot;&gt;&lt;code&gt;money_get::get&lt;/code&gt;&lt;/a&gt; it calls), if the input cannot be unambiguously parsed as a monetary value according to the locale rules.</source>
          <target state="translated">通貨入力マニピュレーター &lt;code&gt;&lt;a href=&quot;../manip/get_money&quot;&gt;std::get_money&lt;/a&gt;&lt;/code&gt; （技術的には&lt;a href=&quot;../../locale/money_get/get&quot;&gt; &lt;code&gt;money_get::get&lt;/code&gt; &lt;/a&gt;が呼び出します）。ロケール規則に従って入力を金額として明確に解析できない場合。</target>
        </trans-unit>
        <trans-unit id="60d7384005cbe496491d405e29d20256cd29de8c" translate="yes" xml:space="preserve">
          <source>The currency units are assumed to be the smallest non-fractional units of the currency: cents in the U.S, yen in Japan.</source>
          <target state="translated">通貨の単位は、米国ではセント、日本では円というように、端数ではない最小単位を想定しています。</target>
        </trans-unit>
        <trans-unit id="d4158a75280f5053658832132f5cd7d688bb28fb" translate="yes" xml:space="preserve">
          <source>The currency units are assumed to be the smallest non-fractional units of the currency: cents in the U.S, yen in Japan. Thus, the input sequence &lt;code&gt;&quot;$1,056.23&quot;&lt;/code&gt; in a U.S. locale produces the number &lt;code&gt;105623.0&lt;/code&gt; in &lt;code&gt;units&lt;/code&gt; or a string &lt;code&gt;&quot;105623&quot;&lt;/code&gt; in &lt;code&gt;digits&lt;/code&gt;.</source>
          <target state="translated">通貨単位は、通貨の非小数単位（米国ではセント、日本では円）の最小単位と見なされます。したがって、米国のロケールでの入力シーケンス &lt;code&gt;&quot;$1,056.23&quot;&lt;/code&gt; は、 &lt;code&gt;units&lt;/code&gt; &lt;code&gt;105623.0&lt;/code&gt; の数字、または &lt;code&gt;digits&lt;/code&gt; &lt;code&gt;&quot;105623&quot;&lt;/code&gt; の文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="333d83e6dc8a3ed3cddeaf85bad80a985040ae63" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;../fenv/fe_round&quot;&gt;rounding mode&lt;/a&gt; has no effect.</source>
          <target state="translated">現在の&lt;a href=&quot;../fenv/fe_round&quot;&gt;丸めモード&lt;/a&gt;は影響しません。</target>
        </trans-unit>
        <trans-unit id="9dbf260b47d386ab70f9b32ae1d1e7e30e36d36b" translate="yes" xml:space="preserve">
          <source>The current conversion state.</source>
          <target state="translated">現在の変換状態です。</target>
        </trans-unit>
        <trans-unit id="270d038a0d8b5445d8fe511402abe8b8a19d1179" translate="yes" xml:space="preserve">
          <source>The current execution agent should hold the lock &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">現在の実行エージェントはロック &lt;code&gt;m&lt;/code&gt; を保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ddd134a5cf65243121b9adc3ce8ef2cf27721d8" translate="yes" xml:space="preserve">
          <source>The current fill character may be obtained with &lt;code&gt;&lt;a href=&quot;../basic_ios/fill&quot;&gt;std::ostream::fill&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のフィル文字は &lt;code&gt;&lt;a href=&quot;../basic_ios/fill&quot;&gt;std::ostream::fill&lt;/a&gt;&lt;/code&gt; で取得できます。</target>
        </trans-unit>
        <trans-unit id="7889788802b761b8ce955626e89d30674dbd0e9c" translate="yes" xml:space="preserve">
          <source>The current locale associated with the regular expression.</source>
          <target state="translated">正規表現に関連付けられた現在のロケール。</target>
        </trans-unit>
        <trans-unit id="838b6a57f873b1fccedf43d2b0bf89f6151e0997" translate="yes" xml:space="preserve">
          <source>The current locale of the traits object.</source>
          <target state="translated">形質オブジェクトの現在のロケール。</target>
        </trans-unit>
        <trans-unit id="a3636f5f0c0e84e9153d12d1e93ae93fb45d2fd6" translate="yes" xml:space="preserve">
          <source>The current object (&lt;code&gt;*this&lt;/code&gt;) can be implicitly captured if either capture default is present. If implicitly captured, it is always captured by reference, even if the capture default is &lt;code&gt;=&lt;/code&gt;. The implicit capture of &lt;code&gt;*this&lt;/code&gt; when the capture default is &lt;code&gt;=&lt;/code&gt; is deprecated.(since C++20).</source>
          <target state="translated">現在のオブジェクト（ &lt;code&gt;*this&lt;/code&gt; ）は、どちらかのキャプチャのデフォルトが存在する場合、暗黙的にキャプチャできます。暗黙的にキャプチャーされる場合、キャプチャーのデフォルトが &lt;code&gt;=&lt;/code&gt; であっても、常に参照によってキャプチャーされます。キャプチャのデフォルトが &lt;code&gt;=&lt;/code&gt; の場合の &lt;code&gt;*this&lt;/code&gt; の暗黙的なキャプチャは非推奨です（C ++ 20以降）。</target>
        </trans-unit>
        <trans-unit id="ad54e387479c8cb969d50cc66d7fa3a22bc9d706" translate="yes" xml:space="preserve">
          <source>The current path as returned by many operating systems is a dangerous global variable. It may be changed unexpectedly by third-party or system library functions, or by another thread.</source>
          <target state="translated">多くのオペレーティングシステムが返す現在のパスは、危険なグローバル変数です。サードパーティやシステムライブラリの関数、あるいは別のスレッドによって不意に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8a32812c167e23e9a138bf52141f02726895565b" translate="yes" xml:space="preserve">
          <source>The current position of the get pointer on success, &lt;code&gt;pos_type(-1)&lt;/code&gt; on failure.</source>
          <target state="translated">成功した場合は取得ポインタの現在の位置、失敗した場合は &lt;code&gt;pos_type(-1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dcd990c0fc482fb45b1d3492d0748ec8b63e5c22" translate="yes" xml:space="preserve">
          <source>The current rounding mode affects the following:</source>
          <target state="translated">現在の丸めモードは以下に影響します。</target>
        </trans-unit>
        <trans-unit id="430695fef50ce6b9934160789eacb1237ee74fd7" translate="yes" xml:space="preserve">
          <source>The current rounding mode does NOT affect the following:</source>
          <target state="translated">現在の丸めモードは以下には影響しません。</target>
        </trans-unit>
        <trans-unit id="2a0cc9de998b3b2b254e8bf7182d9e5712a8d0e5" translate="yes" xml:space="preserve">
          <source>The current rounding mode, reflecting the effects of the most recent &lt;code&gt;fesetround&lt;/code&gt;, can also be queried with &lt;code&gt;&lt;a href=&quot;../../types/climits/flt_rounds&quot;&gt;FLT_ROUNDS&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最新の &lt;code&gt;fesetround&lt;/code&gt; の効果を反映する現在の丸めモードは、 &lt;code&gt;&lt;a href=&quot;../../types/climits/flt_rounds&quot;&gt;FLT_ROUNDS&lt;/a&gt;&lt;/code&gt; でも照会できます。</target>
        </trans-unit>
        <trans-unit id="c59c1acaef9b3f40eb4278b9627af71fb04d4d02" translate="yes" xml:space="preserve">
          <source>The current value if &lt;code&gt;*this&lt;/code&gt; has a value, or &lt;code&gt;default_value&lt;/code&gt; otherwise.</source>
          <target state="translated">もし現在の値 &lt;code&gt;*this&lt;/code&gt; 値を持っている、または &lt;code&gt;default_value&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="a689e4fd251e8da5a9a254dcb9427a1223639603" translate="yes" xml:space="preserve">
          <source>The current value of the atomic variable.</source>
          <target state="translated">原子変数の現在値。</target>
        </trans-unit>
        <trans-unit id="6c7d8a7a94fc01bbb7eea5c0e317c1703f34fd70" translate="yes" xml:space="preserve">
          <source>The current value of the referenced object.</source>
          <target state="translated">参照されるオブジェクトの現在の値。</target>
        </trans-unit>
        <trans-unit id="26235287e585eec8570ed00a3d99c3482814f00a" translate="yes" xml:space="preserve">
          <source>The current working directory is the directory, associated with the process, that is used as the starting location in pathname resolution for relative paths.</source>
          <target state="translated">現在の作業ディレクトリは、プロセスに関連付けられたディレクトリで、相対パスのパス名解決の開始位置として使用されます。</target>
        </trans-unit>
        <trans-unit id="6c2e989156adf075647db2bbb3a0ace08ea4fdf8" translate="yes" xml:space="preserve">
          <source>The currently installed</source>
          <target state="translated">現在インストールされている</target>
        </trans-unit>
        <trans-unit id="4f2c122b6d6e472425a6c170dde1110ad507b7a0" translate="yes" xml:space="preserve">
          <source>The currently installed &lt;code&gt;&lt;a href=&quot;terminate_handler&quot;&gt;std::terminate_handler&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在インストールされている &lt;code&gt;&lt;a href=&quot;terminate_handler&quot;&gt;std::terminate_handler&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b4bd18550ac3d44de3e81a240bd6b990bb8c28e" translate="yes" xml:space="preserve">
          <source>The currently installed &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在インストールされている &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a322ed62540daa71393f9a489dc06b4e4497bec8" translate="yes" xml:space="preserve">
          <source>The custom streambuf classes that do not use the get area and do not set the get area pointers in basic_streambuf are required to override this function.</source>
          <target state="translated">取得領域を使用せず、basic_streambuf に取得領域ポインタを設定しないカスタム streambuf クラスは、この関数をオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="7e2014e10ac3def5949d4073de444574acf0086c" translate="yes" xml:space="preserve">
          <source>The cv-T templates (3-5) are SFINAE-friendly: if &lt;code&gt;std::tuple_size&amp;lt;T&amp;gt;::value&lt;/code&gt; is ill-formed when treated as an unevaluated operand, (3-5) do not provide the member &lt;code&gt;value&lt;/code&gt;. Access checking is performed as if in a context unrelated to &lt;code&gt;tuple_size&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt;. Only the validity of the immediate context of the expression is considered. This allows.</source>
          <target state="translated">cv-Tテンプレート（3-5）はSFINAEに対応してい &lt;code&gt;value&lt;/code&gt; 。未評価のオペランドとして扱われるときに &lt;code&gt;std::tuple_size&amp;lt;T&amp;gt;::value&lt;/code&gt; ない場合、（3-5）メンバーの値を指定しないでください。アクセスチェックは、 &lt;code&gt;tuple_size&lt;/code&gt; と &lt;code&gt;T&lt;/code&gt; に関係のないコンテキストの場合と同様に実行されます。式の直接のコンテキストの有効性のみが考慮されます。これは可能です。</target>
        </trans-unit>
        <trans-unit id="afe86358b8ce8ed3f21d2c8bdc99573b37f7b88a" translate="yes" xml:space="preserve">
          <source>The day value stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; に格納されている日の値。</target>
        </trans-unit>
        <trans-unit id="5a9a7ddae9e9233b0fb8ad54cb826d1d5361ecfc" translate="yes" xml:space="preserve">
          <source>The deallocation function's name is &lt;a href=&quot;lookup&quot;&gt;looked up&lt;/a&gt; in the scope of the dynamic type of the object pointed to by expression, which means class-specific deallocation functions, if present, are found before the global ones. If &lt;code&gt;::&lt;/code&gt; is present in the &lt;code&gt;delete&lt;/code&gt; expression, only the global namespace is examined by this lookup.</source>
          <target state="translated">割り当て解除関数の名前は、式が指すオブジェクトの動的タイプのスコープ内で&lt;a href=&quot;lookup&quot;&gt;検索さ&lt;/a&gt;れます。これは、クラス固有の割り当て解除関数が存在する場合、グローバル関数の前にあることを意味します。 &lt;code&gt;::&lt;/code&gt; が &lt;code&gt;delete&lt;/code&gt; 式に存在する場合、グローバルネームスペースのみがこのルックアップによって検査されます。</target>
        </trans-unit>
        <trans-unit id="ee3d0e0dfebc3a5c800bd21f9ce6cc65f9cb2736" translate="yes" xml:space="preserve">
          <source>The decimal value &lt;code&gt;0.1&lt;/code&gt; cannot be represented by a binary floating-point type. When stored in an IEEE-745 &lt;code&gt;double&lt;/code&gt;, it falls between 0x1.9999999999999*2-4</source>
          <target state="translated">10進値 &lt;code&gt;0.1&lt;/code&gt; は、2進浮動小数点型では表現できません。IEEE-745 &lt;code&gt;double&lt;/code&gt; に格納すると、0x1.9999999999999 * 2-4の範囲になります。</target>
        </trans-unit>
        <trans-unit id="438a3580e45d17ab77478ad47bf10a993c0cab45" translate="yes" xml:space="preserve">
          <source>The declaration inside the class body is not a definition and may declare the member to be of &lt;a href=&quot;incomplete_type&quot;&gt;incomplete type&lt;/a&gt; (other than &lt;code&gt;void&lt;/code&gt;), including the type in which the member is declared:</source>
          <target state="translated">クラス本体内の宣言は定義ではなく、メンバーが宣言されている型を含め、メンバーが&lt;a href=&quot;incomplete_type&quot;&gt;不完全な型&lt;/a&gt;（ &lt;code&gt;void&lt;/code&gt; 以外）であると宣言する場合があります。</target>
        </trans-unit>
        <trans-unit id="940a93324f0b867fc22c005f3cbb33931f332b0f" translate="yes" xml:space="preserve">
          <source>The declared type of an array object might be an array of incomplete class type and therefore incomplete; if the class type is completed later on in the translation unit, the array type becomes complete; the array type at those two points is the same type.</source>
          <target state="translated">配列オブジェクトの宣言された型は、不完全なクラス型の配列であり、したがって不完全であるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d1ac1b1b8d3a334743e1a9098fcb2cea503e3b4c" translate="yes" xml:space="preserve">
          <source>The declared type of an array object might be an array of unknown bound and therefore be incomplete at one point in a translation unit and complete later on; the array types at those two points (&quot;array of unknown bound of &lt;code&gt;T&lt;/code&gt;&quot; and &quot;array of &lt;code&gt;N&lt;/code&gt;&lt;code&gt;T&lt;/code&gt;&quot;) are different types.</source>
          <target state="translated">配列オブジェクトの宣言された型は、境界が不明な配列である可能性があるため、変換単位のある時点で不完全であり、後で完了します。これらの2点の配列タイプ（「 &lt;code&gt;T&lt;/code&gt; の未知の境界の配列」と「 &lt;code&gt;N&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; の配列」）は異なるタイプです。</target>
        </trans-unit>
        <trans-unit id="18785b0480ebbad388b964ef9874663bccf996c2" translate="yes" xml:space="preserve">
          <source>The deduced types &lt;code&gt;V1&lt;/code&gt; and &lt;code&gt;V2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;T1&amp;gt;::type&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;T2&amp;gt;::type&lt;/code&gt; (the usual type transformations applied to arguments of functions passed by value) unless application of &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&lt;/code&gt; results in &lt;code&gt;&lt;a href=&quot;../functional/reference_wrapper&quot;&gt;std::reference_wrapper&lt;/a&gt;&amp;lt;X&amp;gt;&lt;/code&gt; for some type &lt;code&gt;X&lt;/code&gt;, in which case the deduced type is &lt;code&gt;X&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">推論された型 &lt;code&gt;V1&lt;/code&gt; および &lt;code&gt;V2&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&lt;/code&gt; 結果が適用されない限り、 &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;T1&amp;gt;::type&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;T2&amp;gt;::type&lt;/code&gt; （値によって渡される関数の引数に適用される通常の型変換）です。中 &lt;code&gt;&lt;a href=&quot;../functional/reference_wrapper&quot;&gt;std::reference_wrapper&lt;/a&gt;&amp;lt;X&amp;gt;&lt;/code&gt; &amp;lt;X&amp;gt;いくつかのタイプのための &lt;code&gt;X&lt;/code&gt; 推定されるタイプがある場合には、 &lt;code&gt;X&amp;amp;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e02493aa58b5b2fea63d5d88e4dcf79d58481e1" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;operator&amp;lt;&lt;/code&gt; is not defined for weak pointers, and may wrongly consider two shared pointers for the same object non-equivalent (see &lt;a href=&quot;shared_ptr/owner_before&quot;&gt;&lt;code&gt;shared_ptr::owner_before&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">デフォルトの &lt;code&gt;operator&amp;lt;&lt;/code&gt; はウィークポインターに対して定義されておらず、同じオブジェクトの2つの共有ポインターが同等でないと誤って見なす可能性があります（&lt;a href=&quot;shared_ptr/owner_before&quot;&gt; &lt;code&gt;shared_ptr::owner_before&lt;/code&gt; &lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="29a0f4f44719826deb8dc0997c1c24058144c7cf" translate="yes" xml:space="preserve">
          <source>The default allocator satisfies &lt;a href=&quot;../named_req/allocator#Allocator_completeness_requirements&quot;&gt;allocator completeness requirements&lt;/a&gt;.</source>
          <target state="translated">デフォルトのアロケータは、&lt;a href=&quot;../named_req/allocator#Allocator_completeness_requirements&quot;&gt;アロケータの完全性要件を満たしています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4141e9de4e7f5923913eec75a044f8b9df31d8c8" translate="yes" xml:space="preserve">
          <source>The default arguments are not part of the function type.</source>
          <target state="translated">デフォルトの引数は関数型の一部ではありません。</target>
        </trans-unit>
        <trans-unit id="193be4dab5a8464a5f47fc22f793c70a383f5c19" translate="yes" xml:space="preserve">
          <source>The default base class version of this function does nothing and returns &lt;code&gt;Traits::eof()&lt;/code&gt; in all situations. This function is overridden by the derived classes: &lt;a href=&quot;../basic_stringbuf/pbackfail&quot;&gt;&lt;code&gt;basic_stringbuf::pbackfail&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../basic_filebuf/pbackfail&quot;&gt;&lt;code&gt;basic_filebuf::pbackfail&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../strstreambuf/pbackfail&quot;&gt;&lt;code&gt;strstreambuf::pbackfail&lt;/code&gt;&lt;/a&gt;, and is expected to be overridden by user-defined and third-party library stream classes.</source>
          <target state="translated">この関数のデフォルトの基本クラスバージョンは何もせず、すべての状況で &lt;code&gt;Traits::eof()&lt;/code&gt; を返します。この関数は、派生クラス&lt;a href=&quot;../basic_stringbuf/pbackfail&quot;&gt; &lt;code&gt;basic_stringbuf::pbackfail&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../basic_filebuf/pbackfail&quot;&gt; &lt;code&gt;basic_filebuf::pbackfail&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../strstreambuf/pbackfail&quot;&gt; &lt;code&gt;strstreambuf::pbackfail&lt;/code&gt; &lt;/a&gt;によってオーバーライドされ、ユーザー定義およびサードパーティのライブラリストリームクラスによってオーバーライドされることが期待されています。</target>
        </trans-unit>
        <trans-unit id="8be97a2a7f2ed1505287b3fbafa565875f570ad4" translate="yes" xml:space="preserve">
          <source>The default behavior of all atomic operations in the library provides for</source>
          <target state="translated">ライブラリ内のすべてのアトミック操作のデフォルトの動作は</target>
        </trans-unit>
        <trans-unit id="6c0727e16ebccb104329148ed9efcf925fc019d2" translate="yes" xml:space="preserve">
          <source>The default behavior when copying directories is the non-recursive copy: the files are copied, but not the subdirectories:</source>
          <target state="translated">ディレクトリをコピーするときのデフォルトの動作は、再帰的ではないコピーです:ファイルはコピーされますが、サブディレクトリはコピーされません。</target>
        </trans-unit>
        <trans-unit id="41ed6266dfe4ccf36594ee86ce0193a99a4725f3" translate="yes" xml:space="preserve">
          <source>The default buffer size &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;BUFSIZ&lt;/a&gt;&lt;/code&gt; is expected to be the most efficient buffer size for file I/O on the implementation, but POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/fstat.html&quot;&gt;fstat&lt;/a&gt; often provides a better estimate.</source>
          <target state="translated">デフォルトのバッファーサイズ &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;BUFSIZ&lt;/a&gt;&lt;/code&gt; は、実装時のファイルI / Oの最も効率的なバッファーサイズであると予想されますが、POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/fstat.html&quot;&gt;fstat&lt;/a&gt;は、より適切な見積もりを提供します。</target>
        </trans-unit>
        <trans-unit id="40fb0d322cfae3c7c913c1207e551679519632db" translate="yes" xml:space="preserve">
          <source>The default constructor for class &lt;code&gt;T&lt;/code&gt; is trivial (i.e. performs no action) if all of the following is true:</source>
          <target state="translated">次のすべてに該当する場合、クラス &lt;code&gt;T&lt;/code&gt; のデフォルトのコンストラクタは簡単です（つまり、アクションを実行しません）。</target>
        </trans-unit>
        <trans-unit id="53354add7be5ca66a4d2ad5f4e234eb66514dd9e" translate="yes" xml:space="preserve">
          <source>The default constructor is implicitly deleted.</source>
          <target state="translated">デフォルトのコンストラクタは暗黙のうちに削除されます。</target>
        </trans-unit>
        <trans-unit id="b24fb4c8cd27ffea47b12b41d3f765329cbc2ae5" translate="yes" xml:space="preserve">
          <source>The default error condition for the current error value.</source>
          <target state="translated">現在のエラー値のデフォルトのエラー条件。</target>
        </trans-unit>
        <trans-unit id="fce8e9993c66d49e40a3975ae3f5de563116be62" translate="yes" xml:space="preserve">
          <source>The default format, returned by the standard specializations of &lt;code&gt;&lt;a href=&quot;moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;{symbol, sign, none, value}&lt;/code&gt;</source>
          <target state="translated">標準的な特殊化によって返されたデフォルトフォーマット、 &lt;code&gt;&lt;a href=&quot;moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; ある &lt;code&gt;{symbol, sign, none, value}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="464a94cd50a559a4c8980f122d2681b9028dc369" translate="yes" xml:space="preserve">
          <source>The default implementation throws &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;. The user can install his own</source>
          <target state="translated">デフォルトの実装は &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; スローします。ユーザーは自分でインストールできます</target>
        </trans-unit>
        <trans-unit id="aa5a89dde13e753c4365b630f7ff4e96f11b95d8" translate="yes" xml:space="preserve">
          <source>The default operator&amp;lt;=&amp;gt; performs lexicographical comparison by successively comparing the base (left-to-right depth-first) and then non-static member (in declaration order) subobjects of T to compute &amp;lt;=&amp;gt;, recursively expanding array members (in order of increasing subscript), and stopping early when a not-equal result is found, that is:</source>
          <target state="translated">デフォルトの演算子&amp;lt;=&amp;gt;は、ベース（左から右の深さ優先）と非静的メンバー（宣言順）のサブオブジェクトを順に比較して辞書式比較を実行し、&amp;lt;=&amp;gt;を計算し、配列メンバー（添え字の昇順）、等しくない結果が見つかったときに早期に停止します。</target>
        </trans-unit>
        <trans-unit id="934ba14e25c2c69432aed545fd6f3960918b1e13" translate="yes" xml:space="preserve">
          <source>The default precision, as established by &lt;code&gt;&lt;a href=&quot;../basic_ios/init&quot;&gt;std::basic_ios::init&lt;/a&gt;&lt;/code&gt;, is 6.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../basic_ios/init&quot;&gt;std::basic_ios::init&lt;/a&gt;&lt;/code&gt; によって確立されるデフォルトの精度は6です。</target>
        </trans-unit>
        <trans-unit id="5f21b7a8c1842336105782e7b228650bb7d62be6" translate="yes" xml:space="preserve">
          <source>The default template argument is implicitly instantiated when the value of that default argument is needed, except if the template is used to name a function:</source>
          <target state="translated">デフォルトのテンプレート引数は、テンプレートが関数名に使用されている場合を除き、そのデフォルト引数の値が必要なときに暗黙的にインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="6f94b9099a67a8b7153f8eb5fa084e3e3d0d2916" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;Align&lt;/code&gt; is the most stringent (the largest) alignment requirement for any object whose size is at most &lt;code&gt;Len&lt;/code&gt;. If the default value is not used, &lt;code&gt;Align&lt;/code&gt; must be the value of &lt;code&gt;alignof(T)&lt;/code&gt; for some type &lt;code&gt;T&lt;/code&gt;, or the behavior is undefined.</source>
          <target state="translated">&lt;code&gt;Align&lt;/code&gt; のデフォルト値は、サイズが最大で &lt;code&gt;Len&lt;/code&gt; のオブジェクトの最も厳しい（最大の）配置要件です。デフォルト値が使用されていない場合は、 &lt;code&gt;Align&lt;/code&gt; の値でなければなりません &lt;code&gt;alignof(T)&lt;/code&gt; 、いくつかのタイプの &lt;code&gt;T&lt;/code&gt; 、または動作が定義されていません。</target>
        </trans-unit>
        <trans-unit id="32242f67a115d2cb73f7cc2aae6abcb227097b42" translate="yes" xml:space="preserve">
          <source>The default, non-specialized, &lt;code&gt;allocator_traits&lt;/code&gt; contains the following members:</source>
          <target state="translated">特殊化されていないデフォルトの &lt;code&gt;allocator_traits&lt;/code&gt; には、次のメンバーが含まれています。</target>
        </trans-unit>
        <trans-unit id="08db4badb19637e5c90fde67592f886560c377c6" translate="yes" xml:space="preserve">
          <source>The default-constructed &lt;code&gt;std::istream_iterator&lt;/code&gt; is known as the</source>
          <target state="translated">デフォルトで構築された &lt;code&gt;std::istream_iterator&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="a6a84857860a6d8c7cf3bb60aa439a703f3cc543" translate="yes" xml:space="preserve">
          <source>The default-constructed &lt;code&gt;std::istreambuf_iterator&lt;/code&gt; is known as the</source>
          <target state="translated">デフォルトで構築された &lt;code&gt;std::istreambuf_iterator&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="e7c78c2f8446abe7827d7e9f5d4effa429c3448d" translate="yes" xml:space="preserve">
          <source>The default-constructed &lt;code&gt;std::negative_binomial_distribution&lt;/code&gt; is equivalent to the default-constructed &lt;code&gt;&lt;a href=&quot;../geometric_distribution&quot;&gt;std::geometric_distribution&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">デフォルトで構築された &lt;code&gt;std::negative_binomial_distribution&lt;/code&gt; は、デフォルトで構築された &lt;code&gt;&lt;a href=&quot;../geometric_distribution&quot;&gt;std::geometric_distribution&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="b0958dd627dea2d882852fe149df4d3a5f23bcd6" translate="yes" xml:space="preserve">
          <source>The default-constructed &lt;code&gt;std::regex_iterator&lt;/code&gt; is the end-of-sequence iterator. When a valid &lt;code&gt;std::regex_iterator&lt;/code&gt; is incremented after reaching the last match (&lt;code&gt;&lt;a href=&quot;regex_search&quot;&gt;std::regex_search&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;), it becomes equal to the end-of-sequence iterator. Dereferencing or incrementing it further invokes undefined behavior.</source>
          <target state="translated">デフォルトで構築された &lt;code&gt;std::regex_iterator&lt;/code&gt; は、シーケンスの終わりのイテレーターです。有効な &lt;code&gt;std::regex_iterator&lt;/code&gt; が最後の一致に達した後にインクリメントされると（ &lt;code&gt;&lt;a href=&quot;regex_search&quot;&gt;std::regex_search&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返す）、シーケンスの終わりのイテレーターと等しくなります。それを逆参照またはインクリメントすると、未定義の動作がさらに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a6e5505129068a171635aca553122e602560750a" translate="yes" xml:space="preserve">
          <source>The default-constructed &lt;code&gt;std::regex_token_iterator&lt;/code&gt; is the end-of-sequence iterator. When a valid &lt;code&gt;std::regex_token_iterator&lt;/code&gt; is incremented after reaching the last submatch of the last match, it becomes equal to the end-of-sequence iterator. Dereferencing or incrementing it further invokes undefined behavior.</source>
          <target state="translated">デフォルトで構築された &lt;code&gt;std::regex_token_iterator&lt;/code&gt; は、シーケンスの終わりのイテレーターです。有効な &lt;code&gt;std::regex_token_iterator&lt;/code&gt; が、最後のマッチの最後のサブマッチに達した後にインクリメントされると、シーケンスの終わりのイテレーターと等しくなります。それを逆参照またはインクリメントすると、未定義の動作がさらに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="af4d20797ae40eebe6bfcf29080bace8b370e336" translate="yes" xml:space="preserve">
          <source>The default-initialized &lt;code&gt;&lt;a href=&quot;../atomic&quot;&gt;std::atomic&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; does not contain a &lt;code&gt;T&lt;/code&gt; object, and its only valid uses are destruction and initialization by &lt;code&gt;&lt;a href=&quot;../atomic_init&quot;&gt;std::atomic_init&lt;/a&gt;&lt;/code&gt;, see &lt;a href=&quot;http://wg21.link/lwg2334&quot;&gt;LWG 2334&lt;/a&gt;.</source>
          <target state="translated">デフォルトの初期化 &lt;code&gt;&lt;a href=&quot;../atomic&quot;&gt;std::atomic&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 含まれていない &lt;code&gt;T&lt;/code&gt; のオブジェクトを、その唯一の有効な用途はによって破壊され、初期化されている &lt;code&gt;&lt;a href=&quot;../atomic_init&quot;&gt;std::atomic_init&lt;/a&gt;&lt;/code&gt; 、参照&lt;a href=&quot;http://wg21.link/lwg2334&quot;&gt;LWG 2334&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6ddd15f3710b0463f2d6c635ce575542649ee4a4" translate="yes" xml:space="preserve">
          <source>The defaulted operator&amp;lt;=&amp;gt; is implicitly deleted and returns &lt;code&gt;void&lt;/code&gt; if not all base and member subobjects have a compiler-generated or user-declared operator&amp;lt;=&amp;gt; declared in their scope (i.e., as a nonstatic member or as a friend) whose result is one of the std:: comparison category types.</source>
          <target state="translated">デフォルトのoperator &amp;lt;=&amp;gt;は暗黙的に削除され、すべてのベースおよびメンバーサブオブジェクトのスコープで（つまり、非静的メンバーまたはフレンドとして）コンパイラー生成またはユーザー宣言のoperator &amp;lt;=&amp;gt;が宣言されていない場合、その結果は &lt;code&gt;void&lt;/code&gt; を返します std ::比較カテゴリタイプの1つです。</target>
        </trans-unit>
        <trans-unit id="754f96ac6dbea3e27f6af69cc55f56ae1f6bb28c" translate="yes" xml:space="preserve">
          <source>The definition of a concept has the form.</source>
          <target state="translated">概念の定義には形があります。</target>
        </trans-unit>
        <trans-unit id="b026fa7b764c3afd596b6b85c52798554c6dc752" translate="yes" xml:space="preserve">
          <source>The definition of a pure virtual function may be provided (and must be provided if the pure virtual is the &lt;a href=&quot;destructor&quot;&gt;destructor&lt;/a&gt;): the member functions of the derived class are free to call the abstract base's pure virtual function using qualified function id. This definition must be provided outside of the class body (the syntax of a function declaration doesn't allow both the pure specifier &lt;code&gt;= 0&lt;/code&gt; and a function body).</source>
          <target state="translated">純粋仮想関数の定義を提供できます（純粋仮想が&lt;a href=&quot;destructor&quot;&gt;デストラクタの&lt;/a&gt;場合は提供する必要があります）。派生クラスのメンバー関数は、修飾された関数IDを使用して抽象ベースの純粋仮想関数を自由に呼び出すことができます。この定義は、クラス本体の外部で提供する必要があります（関数宣言の構文では、純粋な指定子 &lt;code&gt;= 0&lt;/code&gt; と関数本体の両方を許可していません）。</target>
        </trans-unit>
        <trans-unit id="2639f4da4854a71548a7d1bcd7dfbc226f8a2700" translate="yes" xml:space="preserve">
          <source>The definition of a template must be visible at the point of implicit instantiation, which is why template libraries typically provide all template definitions in the headers (e.g. &lt;a href=&quot;http://www.boost.org/doc/libs/release/more/getting_started/unix-variants.html#header-only-libraries&quot;&gt;most boost libraries are header-only&lt;/a&gt;).</source>
          <target state="translated">テンプレートの定義は、暗黙のインスタンス化の時点で可視である必要があります。これが、テンプレートライブラリが通常すべてのテンプレート定義をヘッダーに提供する理由です（たとえば、&lt;a href=&quot;http://www.boost.org/doc/libs/release/more/getting_started/unix-variants.html#header-only-libraries&quot;&gt;ほとんどのboostライブラリはヘッダーのみです&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="627832562bf8dd374b20ff048dfc37aaca313b99" translate="yes" xml:space="preserve">
          <source>The definition of the macro &lt;code&gt;assert&lt;/code&gt; depends on another macro, &lt;code&gt;NDEBUG&lt;/code&gt;, which is not defined by the standard library.</source>
          <target state="translated">マクロ &lt;code&gt;assert&lt;/code&gt; の定義は、標準ライブラリで定義されていない別のマクロ &lt;code&gt;NDEBUG&lt;/code&gt; に依存しています。</target>
        </trans-unit>
        <trans-unit id="23e5c381bb2167a3dc5b2cd8a40fc1bcd4a9a8f5" translate="yes" xml:space="preserve">
          <source>The delete expression looks for appropriate deallocation function's name starting from the class scope (array form looks in the scope of the array element class) and proceeds to the global scope if no members are found as usual. Note, that as per &lt;a href=&quot;../../language/lookup&quot;&gt;name lookup rules&lt;/a&gt;, any deallocation functions declared in class scope hides all global deallocation functions.</source>
          <target state="translated">削除式は、クラススコープから始まる適切な割り当て解除関数の名前を検索し（配列フォームは配列要素クラスのスコープを検索）、通常どおりメンバーが見つからない場合はグローバルスコープに進みます。&lt;a href=&quot;../../language/lookup&quot;&gt;名前の検索規則に従って&lt;/a&gt;、クラススコープで宣言された割り当て解除関数はすべてのグローバル割り当て解除関数を非表示にすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a6dd83f7a9eb5844a97acba85f2085f664257285" translate="yes" xml:space="preserve">
          <source>The deleted definition of a function must be the first declaration in a translation unit: a previously-declared function cannot be redeclared as deleted:</source>
          <target state="translated">関数の削除された定義は、翻訳ユニットの最初の宣言でなければなりません:以前に宣言された関数を削除して再宣言することはできません。</target>
        </trans-unit>
        <trans-unit id="79625de2d4737ec271475c5f2652df74da1cc9e6" translate="yes" xml:space="preserve">
          <source>The deleted implicitly-declared move constructor is ignored by &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt; (otherwise it would prevent copy-initialization from rvalue).</source>
          <target state="translated">削除された暗黙的に宣言された移動コンストラクターは、&lt;a href=&quot;overload_resolution&quot;&gt;オーバーロードの解決&lt;/a&gt;によって無視されます（そうしないと、右辺値からのコピーの初期化が妨げられます）。</target>
        </trans-unit>
        <trans-unit id="a4c65324c4875d15514b8e9ecd9c933b7a537755" translate="yes" xml:space="preserve">
          <source>The deprecated stream buffer &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; or the boost.IOStreams device &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/iostreams/doc/classes/array.html#array&quot;&gt;&lt;code&gt;boost::basic_array&lt;/code&gt;&lt;/a&gt; may be used to implement I/O buffering over a user-provided char array in portable manner.</source>
          <target state="translated">非推奨のストリームバッファー &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; またはboost.IOStreamsデバイスの&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/iostreams/doc/classes/array.html#array&quot;&gt; &lt;code&gt;boost::basic_array&lt;/code&gt; &lt;/a&gt;を使用して、ユーザーが指定したchar配列に対してポータブルな方法でI / Oバッファリングを実装できます。</target>
        </trans-unit>
        <trans-unit id="d24d6075064d8a50287cbe8ac1382cdf84e9445f" translate="yes" xml:space="preserve">
          <source>The dereference operator &lt;code&gt;&lt;a href=&quot;operator_star_&quot;&gt;operator*()&lt;/a&gt;&lt;/code&gt; does not check if this optional contains a value, which may be more efficient than &lt;code&gt;value()&lt;/code&gt;.</source>
          <target state="translated">間接参照演算子 &lt;code&gt;&lt;a href=&quot;operator_star_&quot;&gt;operator*()&lt;/a&gt;&lt;/code&gt; は、このオプションが値を含んでいるかどうかをチェックしません。 &lt;code&gt;value()&lt;/code&gt; はvalue（）よりも効率的かもしれません。</target>
        </trans-unit>
        <trans-unit id="1e8797256c4b2164a537ac90920cb706eff3148b" translate="yes" xml:space="preserve">
          <source>The description above summarizes C++14; the C++11 phrasing required this function to return true for &lt;code&gt;'_'&lt;/code&gt; in all cases (&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2018&quot;&gt;LWG issue 2018&lt;/a&gt;).</source>
          <target state="translated">上記の説明はC ++ 14を要約したものです。C ++ 11の表現では、この関数がすべての場合に &lt;code&gt;'_'&lt;/code&gt; に対してtrueを返す必要がありました（&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2018&quot;&gt;LWG発行2018&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="aeb40399c9bd04128464837d331638d1fc355f39" translate="yes" xml:space="preserve">
          <source>The description is formed by concatenating the following components:</source>
          <target state="translated">記述は、以下の構成要素を連結して形成される。</target>
        </trans-unit>
        <trans-unit id="fbcd77025b866b3c4c83a4d439bb95c7cee206f7" translate="yes" xml:space="preserve">
          <source>The destination byte string must have enough space for the contents of both &lt;code&gt;dest&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt; plus the terminating null character, except that the size of &lt;code&gt;src&lt;/code&gt; is limited to &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">先のバイト列は、両方の内容のための十分なスペース持っている必要があります &lt;code&gt;dest&lt;/code&gt; および &lt;code&gt;src&lt;/code&gt; 、プラス終端のNULL文字のサイズことを除いて &lt;code&gt;src&lt;/code&gt; これらに限定されている &lt;code&gt;count&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f996269c6c91d048a969204e9f5beea30d4fbab2" translate="yes" xml:space="preserve">
          <source>The destructor for a block-scope static variable &lt;a href=&quot;../utility/program/exit&quot;&gt;is called at program exit&lt;/a&gt;, but only if the initialization took place successfully.</source>
          <target state="translated">ブロックスコープの静的変数のデストラクタは、&lt;a href=&quot;../utility/program/exit&quot;&gt;プログラムの終了時に呼び出され&lt;/a&gt;ますが、初期化が正常に行われた場合のみです。</target>
        </trans-unit>
        <trans-unit id="075f75c9eecc69c36093fa569ae42f26ebb2974f" translate="yes" xml:space="preserve">
          <source>The destructor for class &lt;code&gt;T&lt;/code&gt; is trivial if all of the following is true:</source>
          <target state="translated">クラス &lt;code&gt;T&lt;/code&gt; のデストラクタは、次のすべてが当てはまる場合は簡単です。</target>
        </trans-unit>
        <trans-unit id="f86d1d85f514080fcb96ed20ed8238a17c06c287" translate="yes" xml:space="preserve">
          <source>The destructor is called whenever an object's &lt;a href=&quot;lifetime&quot;&gt;lifetime&lt;/a&gt; ends, which includes.</source>
          <target state="translated">デストラクタは、オブジェクトの&lt;a href=&quot;lifetime&quot;&gt;ライフタイムが&lt;/a&gt;終了するたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="54eb2596b68b59e708441b4aa090a04eba62c0f7" translate="yes" xml:space="preserve">
          <source>The destructor is implicitly-declared.</source>
          <target state="translated">デストラクタは暗黙のうちに宣言されています。</target>
        </trans-unit>
        <trans-unit id="c0a4e9e001abc2037d151b9845f28ea4fc930aa5" translate="yes" xml:space="preserve">
          <source>The destructor is not user-provided (meaning, it is either implicitly declared, or explicitly defined as defaulted on its first declaration)</source>
          <target state="translated">デストラクタはユーザが提供するものではありません(つまり、暗黙のうちに宣言されているか、明示的に最初の宣言時にデフォルトとして定義されているかのどちらかです)。</target>
        </trans-unit>
        <trans-unit id="3a8e566468b65a1ebf9ff0b029900480496f2b3f" translate="yes" xml:space="preserve">
          <source>The destructor is not virtual (that is, the base class destructor is not virtual)</source>
          <target state="translated">デストラクタは仮想ではありません(つまり、基底クラスのデストラクタは仮想ではありません)。</target>
        </trans-unit>
        <trans-unit id="458261b035739931db108ba91cd4532638391cea" translate="yes" xml:space="preserve">
          <source>The destructor may also be called directly, e.g. to destroy an object that was constructed using &lt;a href=&quot;new&quot;&gt;placement-new&lt;/a&gt; or through an allocator member function such as &lt;a href=&quot;../memory/allocator/destroy&quot;&gt;&lt;code&gt;std::allocator::destroy()&lt;/code&gt;&lt;/a&gt;, to destroy an object that was constructed through the allocator. Note that calling a destructor directly for an ordinary object, such as a local variable, invokes undefined behavior when the destructor is called again, at the end of scope.</source>
          <target state="translated">デストラクタを直接呼び出すこともできます。たとえば、&lt;a href=&quot;new&quot;&gt;placement-new&lt;/a&gt;を使用して、または&lt;a href=&quot;../memory/allocator/destroy&quot;&gt; &lt;code&gt;std::allocator::destroy()&lt;/code&gt; &lt;/a&gt;などのアロケータメンバー関数を介して構築されたオブジェクトを破棄したり、アロケータを介して構築されたオブジェクトを破棄したりできます。ローカル変数などの通常のオブジェクトに対して直接デストラクタを呼び出すと、スコープの最後でデストラクタが再度呼び出されたときに未定義の動作が呼び出されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4502fcacc22944b0b09432612438be8c0275b298" translate="yes" xml:space="preserve">
          <source>The destructor of &lt;code&gt;shared_ptr&lt;/code&gt; decrements the number of shared owners of the control block. If that counter reaches zero, the control block calls the destructor of the managed object. The control block does not deallocate itself until the &lt;code&gt;&lt;a href=&quot;weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt; counter reaches zero as well.</source>
          <target state="translated">&lt;code&gt;shared_ptr&lt;/code&gt; のデストラクタは、制御ブロックの共有所有者の数を減らします。そのカウンターがゼロに達すると、制御ブロックは管理対象オブジェクトのデストラクターを呼び出します。制御ブロックは、 &lt;code&gt;&lt;a href=&quot;weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt; カウンターもゼロに達するまで、割り当てを解除しません。</target>
        </trans-unit>
        <trans-unit id="0917c40d42cac062339108eed6e37cece182eea8" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;&lt;a href=&quot;mem_fun&quot;&gt;std::mem_fun&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;std::mem_fun_ref&lt;/code&gt; is that the former produces an function wrapper that expects a pointer to an object, whereas the latter -- a reference.</source>
          <target state="translated">差 &lt;code&gt;&lt;a href=&quot;mem_fun&quot;&gt;std::mem_fun&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;std::mem_fun_ref&lt;/code&gt; 参照-前者は後者はオブジェクトへのポインタを、期待関数ラッパーを生成することです。</target>
        </trans-unit>
        <trans-unit id="6058d52ad00c0746ec1ad1da1557fe0705689144" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;std::mem_fun&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mem_fun_ref&quot;&gt;std::mem_fun_ref&lt;/a&gt;&lt;/code&gt; is that the former produces an function wrapper that expects a pointer to an object, whereas the latter -- a reference.</source>
          <target state="translated">差 &lt;code&gt;std::mem_fun&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;mem_fun_ref&quot;&gt;std::mem_fun_ref&lt;/a&gt;&lt;/code&gt; 参照-前者は後者はオブジェクトへのポインタを、期待関数ラッパーを生成することです。</target>
        </trans-unit>
        <trans-unit id="5ba8b4357f540030cba655d1013e93e28d93026b" translate="yes" xml:space="preserve">
          <source>The difference in the end of lifetime rules between non-class objects (end of storage duration) and class objects (reverse order of construction) matters in the following example:</source>
          <target state="translated">以下の例では、ノンクラスオブジェクト(保存期間の終了)とクラスオブジェクト(構築順序の逆)の寿命終了ルールの違いが問題になります。</target>
        </trans-unit>
        <trans-unit id="0bf7172e6a4bcef6e12a87186821457084696b5a" translate="yes" xml:space="preserve">
          <source>The direct assignment expressions have the form.</source>
          <target state="translated">直接代入式には、次のような形式があります。</target>
        </trans-unit>
        <trans-unit id="c0b53b64cd7da1a6979740160933c02e8651b8c0" translate="yes" xml:space="preserve">
          <source>The direct assignment operator expects a modifiable lvalue as its left operand and an rvalue expression or a</source>
          <target state="translated">直接代入演算子は、修飾可能なlvalueを左オペランドとして、rvalue式または</target>
        </trans-unit>
        <trans-unit id="a55407eeb2aba5e6786966e2fad86845a4f5e832" translate="yes" xml:space="preserve">
          <source>The directory is not a symlink or following symlinks is enabled, i.e., at least one of the following is true:</source>
          <target state="translated">ディレクトリがシンボリックリンクでないか、シンボリックリンクに従うことが有効になっている。</target>
        </trans-unit>
        <trans-unit id="011ff0f04cb6429bed2a06b5971e01124d4494fd" translate="yes" xml:space="preserve">
          <source>The discard input function &lt;a href=&quot;../basic_istream/ignore&quot;&gt;&lt;code&gt;basic_istream::ignore&lt;/code&gt;&lt;/a&gt;, when reaching the end of the stream before reaching the specified delimiter character.</source>
          <target state="translated">指定された区切り文字に到達する前にストリームの最後に到達した場合、入力破棄関数&lt;a href=&quot;../basic_istream/ignore&quot;&gt; &lt;code&gt;basic_istream::ignore&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="521ac03ae5bf197fd5b4f4ddbf6b50c2626b2ab0" translate="yes" xml:space="preserve">
          <source>The discarded statement can &lt;a href=&quot;definition#One_Definition_Rule&quot;&gt;odr-use&lt;/a&gt; a variable that is not defined.</source>
          <target state="translated">破棄されたステートメントは、定義されていない変数を&lt;a href=&quot;definition#One_Definition_Rule&quot;&gt;使用&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="9e134b488338708adbe35dc6f4d20bf7cd200123" translate="yes" xml:space="preserve">
          <source>The disjunction of two constraints is formed by using the &lt;code&gt;||&lt;/code&gt; operator in the constraint expression.</source>
          <target state="translated">&lt;code&gt;||&lt;/code&gt; を使用すると、2つの制約の分離が形成されます。制約式の演算子。</target>
        </trans-unit>
        <trans-unit id="68f41be33670c3565e52cb96e38022893aa1cdef" translate="yes" xml:space="preserve">
          <source>The distinction between &lt;a href=&quot;relation&quot;&gt;&lt;code&gt;Relation&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;StrictWeakOrder&lt;/code&gt; is purely semantic.</source>
          <target state="translated">区別&lt;a href=&quot;relation&quot;&gt; &lt;code&gt;Relation&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;StrictWeakOrder&lt;/code&gt; は純粋にセマンティックです。</target>
        </trans-unit>
        <trans-unit id="6196af8746fbee30da31e07deacfea4e0569daa7" translate="yes" xml:space="preserve">
          <source>The distinction between &lt;code&gt;Invocable&lt;/code&gt; and &lt;code&gt;RegularInvocable&lt;/code&gt; is purely semantic.</source>
          <target state="translated">区別 &lt;code&gt;Invocable&lt;/code&gt; と &lt;code&gt;RegularInvocable&lt;/code&gt; は純粋にセマンティックです。</target>
        </trans-unit>
        <trans-unit id="afbbb8042504013c96b3b97edfed1ef91e7ace3c" translate="yes" xml:space="preserve">
          <source>The distribution parameters:</source>
          <target state="translated">分布パラメータです。</target>
        </trans-unit>
        <trans-unit id="81279522f7d541e3070aa500c24fe78eefb6c24f" translate="yes" xml:space="preserve">
          <source>The double version of fmod behaves as if implemented as follows.</source>
          <target state="translated">ダブルバージョンのfmodは、以下のように実装されている場合と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="2aa9913a5b5973e9bcc32bc90f31f144ec91b2db" translate="yes" xml:space="preserve">
          <source>The duration of the return type is computed from &lt;code&gt;Duration&lt;/code&gt; in an unspecified manner.</source>
          <target state="translated">戻り型の持続時間から計算される &lt;code&gt;Duration&lt;/code&gt; 不特定の方法で。</target>
        </trans-unit>
        <trans-unit id="224a26be1cb2ca8b761f6b43c3bd250d6ddf7cac" translate="yes" xml:space="preserve">
          <source>The duration type of the clock.</source>
          <target state="translated">クロックの継続時間タイプ。</target>
        </trans-unit>
        <trans-unit id="5cdb764bc7295c1f4d084bc026f3ec18853785af" translate="yes" xml:space="preserve">
          <source>The effect is &lt;code&gt;!(p == np)&lt;/code&gt;.</source>
          <target state="translated">効果は &lt;code&gt;!(p == np)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b46cc14cb598fc30b7c672fded9952f55c605bae" translate="yes" xml:space="preserve">
          <source>The effect is &lt;code&gt;!(p == q)&lt;/code&gt;.</source>
          <target state="translated">効果は &lt;code&gt;!(p == q)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="28ea249af8424387a5c1cccdc0914e50e0d1b9da" translate="yes" xml:space="preserve">
          <source>The effect is &lt;code&gt;(p == Type())&lt;/code&gt;.</source>
          <target state="translated">効果は &lt;code&gt;(p == Type())&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4957aeb2112ce48fb45bc468858b3884a27fb1d1" translate="yes" xml:space="preserve">
          <source>The effect of instantiating the template &lt;code&gt;complex&lt;/code&gt; for any other type is unspecified.</source>
          <target state="translated">他のタイプのテンプレート &lt;code&gt;complex&lt;/code&gt; をインスタンス化する効果は規定されていません。</target>
        </trans-unit>
        <trans-unit id="623c86df314fad3dc454b46a30107d29e49dbd7f" translate="yes" xml:space="preserve">
          <source>The effect on &lt;code&gt;state&lt;/code&gt; is deliberately unspecified. In standard facets, it is used to maintain shift state like when calling &lt;code&gt;&lt;a href=&quot;../../string/multibyte/mbsrtowcs&quot;&gt;std::mbsrtowcs&lt;/a&gt;&lt;/code&gt;, and is therefore updated to reflect the conversion state after the last processed external character, but a user-defined facet is free to use it to maintain any other state, e.g. count the number of special characters encountered.</source>
          <target state="translated">&lt;code&gt;state&lt;/code&gt; の影響は意図的に指定されていません。標準のファセットでは、 &lt;code&gt;&lt;a href=&quot;../../string/multibyte/mbsrtowcs&quot;&gt;std::mbsrtowcs&lt;/a&gt;&lt;/code&gt; 呼び出すときのようにシフト状態を維持するために使用されるため、最後に処理された外部文字の後の変換状態を反映するように更新されますが、ユーザー定義のファセットは他のファセットを維持するために自由に使用できます状態、例えば、遭遇した特殊文字の数を数える。</target>
        </trans-unit>
        <trans-unit id="5d718ad3720c90a52928fc5cdcd648882bb8be80" translate="yes" xml:space="preserve">
          <source>The effect on &lt;code&gt;state&lt;/code&gt; is deliberately unspecified. In standard facets, it is used to maintain shift state like when calling &lt;code&gt;&lt;a href=&quot;../../string/multibyte/wcsrtombs&quot;&gt;std::wcsrtombs&lt;/a&gt;&lt;/code&gt;, and is therefore updated to reflect the shift state after the last successfully converted character, but a user-defined facet is free to use it to maintain any other state, e.g. count the number of special characters encountered.</source>
          <target state="translated">&lt;code&gt;state&lt;/code&gt; の影響は意図的に指定されていません。標準のファセットでは、 &lt;code&gt;&lt;a href=&quot;../../string/multibyte/wcsrtombs&quot;&gt;std::wcsrtombs&lt;/a&gt;&lt;/code&gt; 呼び出すときのようにシフト状態を維持するために使用されるため、最後に正常に変換された文字の後のシフト状態を反映するように更新されますが、ユーザー定義のファセットを使用して、他のファセットを維持できます。状態、例えば、遭遇した特殊文字の数を数える。</target>
        </trans-unit>
        <trans-unit id="17b2cdc08f47b7a5ed5d20adf3ef19dc26f9c333" translate="yes" xml:space="preserve">
          <source>The effective length of the initializing string is min(&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;str.size() - pos&lt;/code&gt;).</source>
          <target state="translated">初期化文字列の有効な長さはmin（ &lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;str.size() - pos&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="699e483e2e3f60481d244140e88ca2195f9ab9a1" translate="yes" xml:space="preserve">
          <source>The effective options that affect the directory iteration.</source>
          <target state="translated">ディレクトリのイテレーションに影響を与える有効なオプション。</target>
        </trans-unit>
        <trans-unit id="277b731069d198539b3fe68887f4d3154302a386" translate="yes" xml:space="preserve">
          <source>The effects depend on &lt;code&gt;prms&lt;/code&gt; and &lt;code&gt;opts&lt;/code&gt; as follows:</source>
          <target state="translated">効果は、 &lt;code&gt;prms&lt;/code&gt; と &lt;code&gt;opts&lt;/code&gt; に次のように依存します。</target>
        </trans-unit>
        <trans-unit id="8651d51c2038a7579ed581306ab93549a57e3f4f" translate="yes" xml:space="preserve">
          <source>The effects of &lt;code&gt;notify_one()&lt;/code&gt;/&lt;code&gt;notify_all()&lt;/code&gt; and each of the three atomic parts of &lt;code&gt;wait()&lt;/code&gt;/&lt;code&gt;wait_for()&lt;/code&gt;/&lt;code&gt;wait_until()&lt;/code&gt; (unlock+wait, wakeup, and lock) take place in a single total order that can be viewed as &lt;a href=&quot;../../atomic/memory_order#Modification_order&quot;&gt;modification order&lt;/a&gt; of an atomic variable: the order is specific to this individual condition_variable. This makes it impossible for &lt;code&gt;notify_one()&lt;/code&gt; to, for example, be delayed and unblock a thread that started waiting just after the call to &lt;code&gt;notify_one()&lt;/code&gt; was made.</source>
          <target state="translated">&lt;code&gt;notify_one()&lt;/code&gt; / &lt;code&gt;notify_all()&lt;/code&gt; および &lt;code&gt;wait()&lt;/code&gt; / &lt;code&gt;wait_for()&lt;/code&gt; / &lt;code&gt;wait_until()&lt;/code&gt; （ロック解除+待機、ウェイクアップ、およびロック）の3つのアトミック部分のそれぞれの影響は、表示できる単一の合計順序で発生しますアトミック変数の&lt;a href=&quot;../../atomic/memory_order#Modification_order&quot;&gt;変更順序&lt;/a&gt;として：順序はこの個々のcondition_variableに固有です。これにより、例えば、 &lt;code&gt;notify_one()&lt;/code&gt; が遅延し、 &lt;code&gt;notify_one()&lt;/code&gt; が呼び出された直後に待機を開始したスレッドのブロックを解除できなくなります。</target>
        </trans-unit>
        <trans-unit id="cea82bd2c1a6a4cca1c94310f4ea304a94ebd7ff" translate="yes" xml:space="preserve">
          <source>The effects of aggregate initialization are:</source>
          <target state="translated">集計初期化の効果は</target>
        </trans-unit>
        <trans-unit id="bc76e5e9dce364815385c8038fa8f3aefe16ecdf" translate="yes" xml:space="preserve">
          <source>The effects of calling &lt;code&gt;&lt;a href=&quot;what&quot;&gt;what()&lt;/a&gt;&lt;/code&gt; after assignment are implementation-defined.</source>
          <target state="translated">割り当て後に &lt;code&gt;&lt;a href=&quot;what&quot;&gt;what()&lt;/a&gt;&lt;/code&gt; を呼び出すことによる影響は、実装によって定義されます。</target>
        </trans-unit>
        <trans-unit id="acd2e1f2f8f283f58add15a5b6c96ad1a4bcb99f" translate="yes" xml:space="preserve">
          <source>The effects of constant initialization are the same as the effects of the corresponding initialization, except that it's guaranteed that it is complete before any other initialization of a static or thread-local object begins, and it may be performed at compile time.</source>
          <target state="translated">定数初期化の効果は、静的オブジェクトやスレッドローカルオブジェクトの他の初期化が始まる前に完了することが保証されていることを除けば、対応する初期化の効果と同じであり、コンパイル時に実行することができます。</target>
        </trans-unit>
        <trans-unit id="fd953e7070aa0f66ff080c912887c4f952047292" translate="yes" xml:space="preserve">
          <source>The effects of copy initialization are:</source>
          <target state="translated">コピー初期化の効果は</target>
        </trans-unit>
        <trans-unit id="8cfd1ee4ebd1bc33a0bf9c72eb9dc0e4d68febcc" translate="yes" xml:space="preserve">
          <source>The effects of default initialization are:</source>
          <target state="translated">デフォルトの初期化の効果は</target>
        </trans-unit>
        <trans-unit id="300fd423eca4b27e42f83cdb8460a3c248ebfebe" translate="yes" xml:space="preserve">
          <source>The effects of direct initialization are:</source>
          <target state="translated">直接初期化の効果があります。</target>
        </trans-unit>
        <trans-unit id="9e5f022b0bc5e850d42cbc2251aad303b760f429" translate="yes" xml:space="preserve">
          <source>The effects of list initialization of an object of type &lt;code&gt;T&lt;/code&gt; are:</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; のオブジェクトのリスト初期化の効果は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2eaca7ff0b6d0f7e2ebdd251f120ac2cb16cff4c" translate="yes" xml:space="preserve">
          <source>The effects of reference initialization are:</source>
          <target state="translated">参照初期化の効果は</target>
        </trans-unit>
        <trans-unit id="2ef623c3b922339a0463a696882fce40deb3b9ed" translate="yes" xml:space="preserve">
          <source>The effects of value initialization are:</source>
          <target state="translated">値の初期化の効果は</target>
        </trans-unit>
        <trans-unit id="94b39a5092913a72e71cf3cf80c6764db966ebde" translate="yes" xml:space="preserve">
          <source>The effects of zero initialization are:</source>
          <target state="translated">初期化ゼロの効果は</target>
        </trans-unit>
        <trans-unit id="b777ed6b6b0f7899c139e22dde69591cc29e1364" translate="yes" xml:space="preserve">
          <source>The element erased and &lt;code&gt;&lt;a href=&quot;vector/end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">要素が消去され、 &lt;code&gt;&lt;a href=&quot;vector/end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="504403fec65bb2b27f30b2f09751e05f4b0a4e02" translate="yes" xml:space="preserve">
          <source>The element pointed at by &lt;code&gt;nth&lt;/code&gt; is changed to whatever element would occur in that position if &lt;code&gt;[first, last)&lt;/code&gt; were sorted.</source>
          <target state="translated">&lt;code&gt;nth&lt;/code&gt; が指す要素は、 &lt;code&gt;[first, last)&lt;/code&gt; がソートされた場合、その位置で発生する要素に変更されます。</target>
        </trans-unit>
        <trans-unit id="2a7750b37bfc65c5e0dc0c0f0394afa5d519ab06" translate="yes" xml:space="preserve">
          <source>The elements are stored contiguously, which means that elements can be accessed not only through iterators, but also using offsets to regular pointers to elements. This means that a pointer to an element of a vector may be passed to any function that expects a pointer to an element of an array.</source>
          <target state="translated">要素は連続して格納されているので、イテレータだけでなく、要素への通常のポインタへのオフセットを使用して、要素にアクセスすることができることを意味します。つまり、ベクトルの要素へのポインタは、配列の要素へのポインタを期待する任意の関数に渡される可能性があります。</target>
        </trans-unit>
        <trans-unit id="d1207730233ddeaf76dad20caba05dddb264714c" translate="yes" xml:space="preserve">
          <source>The elements of &lt;code&gt;u&lt;/code&gt; are the same or copies of those of &lt;code&gt;rv&lt;/code&gt; and &lt;code&gt;u.get_allocator() == m&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; の要素は、 &lt;code&gt;rv&lt;/code&gt; および &lt;code&gt;u.get_allocator() == m&lt;/code&gt; の要素と同じか、それらのコピーです。</target>
        </trans-unit>
        <trans-unit id="df8c067b5e64d3ba4b18a9f63de6869977f7971d" translate="yes" xml:space="preserve">
          <source>The elements of a &lt;code&gt;basic_string&lt;/code&gt; are stored contiguously, that is, for a basic_string &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;&amp;amp;*(s.begin() + n) == &amp;amp;*s.begin() + n&lt;/code&gt; for any n in &lt;code&gt;[0, s.size())&lt;/code&gt;, or, equivalently, a pointer to &lt;code&gt;s[0]&lt;/code&gt; can be passed to functions that expect a pointer to the first element of a &lt;code&gt;CharT[]&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;basic_string&lt;/code&gt; の要素は連続して格納されます。つまり、basic_string &lt;code&gt;s&lt;/code&gt; の場合、 &lt;code&gt;&amp;amp;*(s.begin() + n) == &amp;amp;*s.begin() + n&lt;/code&gt; は、 &lt;code&gt;[0, s.size())&lt;/code&gt; 、または同等に、 &lt;code&gt;s[0]&lt;/code&gt; へのポインタは、 &lt;code&gt;CharT[]&lt;/code&gt; 配列の最初の要素へのポインタを期待する関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="ac289e119568e88c907585f65cab5b2cc4a5e484" translate="yes" xml:space="preserve">
          <source>The ellipsis is not a parameter, and so can follow a parameter with a default argument.</source>
          <target state="translated">省略記号はパラメータではないので、デフォルトの引数でパラメータの後に続くことができます。</target>
        </trans-unit>
        <trans-unit id="ddf4a253a4692830a136c72cdc4bb9d21f26c186" translate="yes" xml:space="preserve">
          <source>The ellipsis that indicates &lt;a href=&quot;variadic_arguments&quot;&gt;variadic arguments&lt;/a&gt; need not be preceded by a comma, even if it follows the ellipsis that indicates a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; expansion, so the following function templates are exactly the same:</source>
          <target state="translated">示し省略記号&lt;a href=&quot;variadic_arguments&quot;&gt;可変長引数は&lt;/a&gt;、それが示す省略記号以下の場合でも、コンマが先行する必要はない&lt;a href=&quot;parameter_pack&quot;&gt;パラメータパックの&lt;/a&gt;展開を、その次の関数テンプレートはまったく同じです。</target>
        </trans-unit>
        <trans-unit id="aa2446394f875d97130f6ebb30e3ce4bdc1750f8" translate="yes" xml:space="preserve">
          <source>The empty member subobjects are permitted to be optimized out just like the empty bases if they use the attribute &lt;code&gt;[[&lt;a href=&quot;attributes/no_unique_address&quot;&gt;no_unique_address&lt;/a&gt;]]&lt;/code&gt;. Taking the address of such member results in an address that may equal the address of some other member of the same object.</source>
          <target state="translated">属性 &lt;code&gt;[[&lt;a href=&quot;attributes/no_unique_address&quot;&gt;no_unique_address&lt;/a&gt;]]&lt;/code&gt; を使用する場合、空のメンバーサブオブジェクトは、空のベースと同様に最適化されます。そのようなメンバーのアドレスを取得すると、同じオブジェクトの他のメンバーのアドレスと同じになる可能性のあるアドレスになります。</target>
        </trans-unit>
        <trans-unit id="0805662b123722b3c340392f4fa64cbab3149ec8" translate="yes" xml:space="preserve">
          <source>The encoding of calendar time in &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; is unspecified, but most systems conform to &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/time.html&quot;&gt;POSIX specification&lt;/a&gt; and return a value of integral type holding the number of seconds since &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15&quot;&gt;the Epoch&lt;/a&gt;. Implementations in which &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; is a 32-bit signed integer (many historical implementations) fail in the year &lt;a href=&quot;https://en.wikipedia.org/wiki/Year_2038_problem&quot;&gt;2038&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; でのカレンダー時間のエンコーディングは指定されていませんが、ほとんどのシステムは&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/time.html&quot;&gt;POSIX仕様に&lt;/a&gt;準拠して&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15&quot;&gt;おり、Epoch&lt;/a&gt;からの秒数を保持する整数型の値を返します。ここでの実装 &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; 32ビット符号付き整数（多くの歴史的な実装）年に失敗している&lt;a href=&quot;https://en.wikipedia.org/wiki/Year_2038_problem&quot;&gt;2038&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d69a36e6f924ee7e47c55de6af52a07646156a5f" translate="yes" xml:space="preserve">
          <source>The encoding of narrow multibyte string literals (1) and wide string literals (2) is implementation-defined. For example, gcc selects them with the &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Invocation.html&quot;&gt;commandline options&lt;/a&gt;&lt;code&gt;-fexec-charset&lt;/code&gt; and &lt;code&gt;-fwide-exec-charset&lt;/code&gt;.</source>
          <target state="translated">ナローマルチバイト文字列リテラル（1）とワイド文字列リテラル（2）のエンコーディングは実装定義です。たとえば、gccは&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Invocation.html&quot;&gt;コマンドラインオプション&lt;/a&gt; &lt;code&gt;-fexec-charset&lt;/code&gt; と &lt;code&gt;-fwide-exec-charset&lt;/code&gt; でそれらを選択します。</target>
        </trans-unit>
        <trans-unit id="2cd9b9debf1ab95431b525333881e105361a6688" translate="yes" xml:space="preserve">
          <source>The end of the range of objects (i.e., &lt;code&gt;&lt;a href=&quot;../iterator/next&quot;&gt;std::next&lt;/a&gt;(first, n)&lt;/code&gt;).</source>
          <target state="translated">オブジェクトの範囲の終わり（つまり、 &lt;code&gt;&lt;a href=&quot;../iterator/next&quot;&gt;std::next&lt;/a&gt;(first, n)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2f8f7e87af18baac3cc0b054b1043648021aefcc" translate="yes" xml:space="preserve">
          <source>The end of the range of objects that has been destroyed (i.e., &lt;code&gt;&lt;a href=&quot;../iterator/next&quot;&gt;std::next&lt;/a&gt;(first, n)&lt;/code&gt;).</source>
          <target state="translated">破棄されたオブジェクトの範囲の終わり（つまり、 &lt;code&gt;&lt;a href=&quot;../iterator/next&quot;&gt;std::next&lt;/a&gt;(first, n)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="52cec00cfb7299f67b1921b3ec8b84d001978a8b" translate="yes" xml:space="preserve">
          <source>The entropy of the Linux kernel device /dev/urandom may be obtained using &lt;a href=&quot;http://man7.org/linux/man-pages/man4/random.4.html&quot;&gt;ioctl RNDGETENTCNT&lt;/a&gt; - that's what &lt;code&gt;std::random_device::entropy()&lt;/code&gt; in &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/master/libstdc%20%20-v3/src/c%20%2011/random.cc#L188&quot;&gt;GNU libstdc++&lt;/a&gt; uses as of version 8.1.</source>
          <target state="translated">Linuxカーネルのデバイスのエントロピーは/ dev / urandomが使用して得ることができる&lt;a href=&quot;http://man7.org/linux/man-pages/man4/random.4.html&quot;&gt;のioctl RNDGETENTCNTを&lt;/a&gt; -それの何 &lt;code&gt;std::random_device::entropy()&lt;/code&gt; で&lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/master/libstdc%20%20-v3/src/c%20%2011/random.cc#L188&quot;&gt;GNUのlibstdc ++&lt;/a&gt;バージョン8.1のような用途。</target>
        </trans-unit>
        <trans-unit id="b526caf3120cb6234f9fb955ff6f445025db5cc0" translate="yes" xml:space="preserve">
          <source>The eofbit</source>
          <target state="translated">エオビット</target>
        </trans-unit>
        <trans-unit id="ac8151f7dedb19c9e673caee7e6961ae4483df11" translate="yes" xml:space="preserve">
          <source>The eofbit is set by the following standard library functions:</source>
          <target state="translated">eofbitは以下の標準ライブラリ関数によって設定されます。</target>
        </trans-unit>
        <trans-unit id="de46a90499c7bf50e36a789596077d479893b896" translate="yes" xml:space="preserve">
          <source>The epoch of &lt;code&gt;system_clock&lt;/code&gt; is unspecified, but most implementations use Unix Time (i.e., time since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970, not counting leap seconds).</source>
          <target state="translated">&lt;code&gt;system_clock&lt;/code&gt; のエポックは指定されていませんが、ほとんどの実装ではUnix時間（つまり、1970年1月1日木曜日の00:00:00協定世界時（UTC）からの時間、うるう秒は数えません）を使用します。</target>
        </trans-unit>
        <trans-unit id="a8dec4a6976c27fa3b8702243578d25bc0de8846" translate="yes" xml:space="preserve">
          <source>The equals sign, &lt;code&gt;=&lt;/code&gt;, in copy-initialization of a named variable is not related to the assignment operator. Assignment operator overloads have no effect on copy-initialization.</source>
          <target state="translated">名前付き変数のコピー初期化における等号 &lt;code&gt;=&lt;/code&gt; は、代入演算子とは関係ありません。代入演算子のオーバーロードは、コピーの初期化には影響しません。</target>
        </trans-unit>
        <trans-unit id="15a184fedc7147e932e8edb9e4f5e96b3f3233d2" translate="yes" xml:space="preserve">
          <source>The error category of the error value.</source>
          <target state="translated">エラー値のエラーカテゴリ。</target>
        </trans-unit>
        <trans-unit id="4bd988f5880ebd48c3253a6fa8738b28e0bda0e2" translate="yes" xml:space="preserve">
          <source>The error condition for the given error code.</source>
          <target state="translated">与えられたエラーコードのエラー条件。</target>
        </trans-unit>
        <trans-unit id="c81d179fd5ebd08285d4630b0d42bf847c0180df" translate="yes" xml:space="preserve">
          <source>The error message corresponding to the current error value and category.</source>
          <target state="translated">現在のエラー値とカテゴリに対応するエラーメッセージ。</target>
        </trans-unit>
        <trans-unit id="88a06ff6d6b5a3ba4276cee42336251cadd1cd73" translate="yes" xml:space="preserve">
          <source>The exact behavior of this function depends on the implementation, in particular on the mechanics of the OS scheduler in use and the state of the system. For example, a first-in-first-out realtime scheduler (&lt;code&gt;SCHED_FIFO&lt;/code&gt; in Linux) would suspend the current thread and put it on the back of the queue of the same-priority threads that are ready to run (and if there are no other threads at the same priority, &lt;code&gt;yield&lt;/code&gt; has no effect).</source>
          <target state="translated">この関数の正確な動作は、実装、特に使用中のOSスケジューラのメカニズムとシステムの状態に依存します。たとえば、 &lt;code&gt;SCHED_FIFO&lt;/code&gt; リアルタイムスケジューラ（LinuxではSCHED_FIFO）は、現在のスレッドを中断し、実行の準備ができている同じ優先順位のスレッドのキューの後ろに配置します（他にスレッドがない場合）。同じ優先度のスレッド、 &lt;code&gt;yield&lt;/code&gt; は影響しません）。</target>
        </trans-unit>
        <trans-unit id="9f75932905b2632bba207dcff21589878a43b6dd" translate="yes" xml:space="preserve">
          <source>The exact effects this modifier has on the input and output vary between the individual I/O functions and are described at each &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; overload page individually.</source>
          <target state="translated">この修飾子が入力と出力に与える正確な影響は、個々のI / O関数間で異なり、各 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; および &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; オーバーロードページで個別に説明されています。</target>
        </trans-unit>
        <trans-unit id="363ac40b1d368630d3800a01855367f3dc4f5212" translate="yes" xml:space="preserve">
          <source>The exact number of &lt;code&gt;externT&lt;/code&gt; characters that correspond to one &lt;code&gt;internT&lt;/code&gt; character, if constant. &lt;code&gt;​0​&lt;/code&gt; if the number varies, &lt;code&gt;-1&lt;/code&gt; if the encoding is state-dependent.</source>
          <target state="translated">定数の場合、1つの &lt;code&gt;internT&lt;/code&gt; 文字に対応する &lt;code&gt;externT&lt;/code&gt; 文字の正確な数。 &lt;code&gt;​0​&lt;/code&gt; 数が変化する場合、 &lt;code&gt;-1&lt;/code&gt; エンコーディングが状態依存である場合。</target>
        </trans-unit>
        <trans-unit id="c0584bcc519f595df1d83656ff4d78467c1471a6" translate="yes" xml:space="preserve">
          <source>The example output corresponds to a system with 64-bit pointers and 32-bit int.</source>
          <target state="translated">出力例は、64ビットのポインタと32ビットのintを持つシステムに対応しています。</target>
        </trans-unit>
        <trans-unit id="401671dabc741fba713d9a3372e1229c26569984" translate="yes" xml:space="preserve">
          <source>The example showing output using one of the implementations where type_info::name returns full type names; filter through c++filt -t if using gcc or similar.</source>
          <target state="translated">type_info::name が完全な型名を返す実装の一つを用いた出力例。</target>
        </trans-unit>
        <trans-unit id="962d766aea512badcd93d36a0bad74875b6df8a3" translate="yes" xml:space="preserve">
          <source>The exception object</source>
          <target state="translated">例外オブジェクト</target>
        </trans-unit>
        <trans-unit id="5c7c457a1a95d00590ff16b4e63c341c098fe660" translate="yes" xml:space="preserve">
          <source>The exception object is a temporary object in unspecified storage that is constructed by the &lt;code&gt;throw&lt;/code&gt; expression.</source>
          <target state="translated">例外オブジェクトは、 &lt;code&gt;throw&lt;/code&gt; 式によって構築される、未指定のストレージ内の一時オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="5cc701cf4530a2100ddf04f27b306c1857719210" translate="yes" xml:space="preserve">
          <source>The exception object persists until the last catch clause exits other than by rethrowing (if not by rethrowing, it is destroyed immediately after the destruction of the catch clause's parameter), or until the last &lt;code&gt;&lt;a href=&quot;../error/exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt; that references this object is destroyed (in which case the exception object is destroyed just before the destructor of &lt;code&gt;&lt;a href=&quot;../error/exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt; returns.</source>
          <target state="translated">例外オブジェクトは、最後のcatch句が再スロー以外の方法で終了するまで（再スローでない場合は、catch句のパラメーターの破棄の直後に破棄されます）、またはこのオブジェクトを参照する最後の &lt;code&gt;&lt;a href=&quot;../error/exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt; が破棄されるまで（その場合、例外オブジェクトは &lt;code&gt;&lt;a href=&quot;../error/exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt; デストラクタが戻る直前に破棄されます。</target>
        </trans-unit>
        <trans-unit id="ff78e6b3502b4c2e9d34931f4c9b1d395e28c19a" translate="yes" xml:space="preserve">
          <source>The exception object referenced by an &lt;code&gt;std::exception_ptr&lt;/code&gt; remains valid as long as there remains at least one &lt;code&gt;std::exception_ptr&lt;/code&gt; that is referencing it: &lt;code&gt;std::exception_ptr&lt;/code&gt; is a shared-ownership smart pointer (note; this is in addition to the usual &lt;a href=&quot;../language/throw#The_exception_object&quot;&gt;exception object lifetime rules&lt;/a&gt;).</source>
          <target state="translated">で参照される例外オブジェクト &lt;code&gt;std::exception_ptr&lt;/code&gt; 長いが残っているとしてとして有効なまま少なくとも一つ &lt;code&gt;std::exception_ptr&lt;/code&gt; それ参照していること： &lt;code&gt;std::exception_ptr&lt;/code&gt; 、共有所有権スマートポインタ（ノートですが、これは通常のに加えています&lt;a href=&quot;../language/throw#The_exception_object&quot;&gt;例外オブジェクトのライフタイムルール&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3379e35c976ab98276fbc9adebb12a934ec3523e" translate="yes" xml:space="preserve">
          <source>The exception specification of a function template specialization is not instantiated along with the function declaration; it is instantiated only when</source>
          <target state="translated">関数テンプレートの特殊化の例外指定は,関数宣言と一緒にインスタンス化されることはありません.</target>
        </trans-unit>
        <trans-unit id="d467a68666ede11b7e2477936d7c13019488c0c3" translate="yes" xml:space="preserve">
          <source>The exception-specification of an implicitly-declared special member function is also evaluated only when needed (in particular, implicit declaration of a member function of a derived class does not require the exception-specification of a base member function to be instantiated).</source>
          <target state="translated">また、暗黙的に宣言された特殊なメンバ関数の例外指定も、必要なときだけ評価されます(特に、派生クラスのメンバ関数の暗黙的な宣言では、基底メンバ関数の例外指定をインスタンス化する必要はありません)。</target>
        </trans-unit>
        <trans-unit id="52bc008473e81b69c43ce4bc76d889cc48c6a5a6" translate="yes" xml:space="preserve">
          <source>The exceptions used for transaction cancellation in &lt;code&gt;atomic_cancel&lt;/code&gt; blocks are &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../memory/new/bad_array_new_length&quot;&gt;std::bad_array_new_length&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/bad_cast&quot;&gt;std::bad_cast&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/bad_typeid&quot;&gt;std::bad_typeid&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../error/bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../error/exception&quot;&gt;std::exception&lt;/a&gt;&lt;/code&gt; and all standard library exceptions derived from it, and the special exception type &lt;a href=&quot;../error/tx_exception&quot;&gt;&lt;code&gt;std::tx_exception&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;atomic_cancel&lt;/code&gt; ブロックでトランザクションのキャンセルに使用される例外は、 &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../memory/new/bad_array_new_length&quot;&gt;std::bad_array_new_length&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../types/bad_cast&quot;&gt;std::bad_cast&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../types/bad_typeid&quot;&gt;std::bad_typeid&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../error/bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../error/exception&quot;&gt;std::exception&lt;/a&gt;&lt;/code&gt; 、およびそこから派生するすべての標準ライブラリ例外です。特別な例外タイプ&lt;a href=&quot;../error/tx_exception&quot;&gt; &lt;code&gt;std::tx_exception&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="021d4e86fa7831da29ef94f71f0da79f3c93fbf7" translate="yes" xml:space="preserve">
          <source>The execution environment is modified such that when the current thread exits, the condition variable &lt;code&gt;cond&lt;/code&gt; is notified as if by:</source>
          <target state="translated">現在のスレッドが終了すると、条件変数 &lt;code&gt;cond&lt;/code&gt; が次のように通知されるように、実行環境が変更されます。</target>
        </trans-unit>
        <trans-unit id="db529544bc767c723bb5ca98f064de4db37dda1a" translate="yes" xml:space="preserve">
          <source>The expected way to make a program-defined type swappable is to provide a non-member function swap in the same namespace as the type: see &lt;a href=&quot;../named_req/swappable&quot;&gt;Swappable&lt;/a&gt; for details.</source>
          <target state="translated">プログラムで定義された型をスワップ可能にするための予想される方法は、型と同じ名前空間で非メンバー関数スワップを提供することです。詳細については、&lt;a href=&quot;../named_req/swappable&quot;&gt;スワップ可能&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="94a70ade5760a29591766576307fbe5ce110f9d8" translate="yes" xml:space="preserve">
          <source>The explicit specialization &lt;a href=&quot;ctype_byname_char&quot;&gt;&lt;code&gt;std::ctype_byname&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/a&gt; was listed as a separate entry in the header file &lt;code&gt;&amp;lt;locale&amp;gt;&lt;/code&gt; until C++11. it was removed in C++11 as &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1298&quot;&gt;defect #1298&lt;/a&gt;, but it remains a required specialization, just like &lt;code&gt;std::ctype_byname&amp;lt;wchar_t&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">明示的な特殊化&lt;a href=&quot;ctype_byname_char&quot;&gt; &lt;code&gt;std::ctype_byname&amp;lt;char&amp;gt;&lt;/code&gt; &lt;/a&gt;は、C ++ 11までは、ヘッダーファイル &lt;code&gt;&amp;lt;locale&amp;gt;&lt;/code&gt; の個別のエントリとしてリストされていました。C ++ 11では&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1298&quot;&gt;欠陥＃1298&lt;/a&gt;として削除されましたが、 &lt;code&gt;std::ctype_byname&amp;lt;wchar_t&amp;gt;&lt;/code&gt; 同様に、必須の特殊化のままです。</target>
        </trans-unit>
        <trans-unit id="4768ebf182c67445a2d9702650a0be943a487f1b" translate="yes" xml:space="preserve">
          <source>The explicit specialization for &lt;code&gt;void&lt;/code&gt; lacks the member typedefs &lt;code&gt;reference&lt;/code&gt;, &lt;code&gt;const_reference&lt;/code&gt;, &lt;code&gt;size_type&lt;/code&gt; and &lt;code&gt;difference_type&lt;/code&gt;. This specialization declares no member functions.</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; の明示的な特殊化には、メンバーの &lt;code&gt;const_reference&lt;/code&gt; &lt;code&gt;reference&lt;/code&gt; 、const_reference、 &lt;code&gt;size_type&lt;/code&gt; 、および &lt;code&gt;difference_type&lt;/code&gt; がありません。この特殊化では、メンバー関数は宣言されていません。</target>
        </trans-unit>
        <trans-unit id="75f7b6ca4ed9628e0d043baf2085e3225cacadad" translate="yes" xml:space="preserve">
          <source>The explicit specifier may only appear within the decl-specifier-seq of the declaration of a constructor  or conversion function(since C++11) within its class definition.</source>
          <target state="translated">明示的な指定子は、そのクラス定義内のコンストラクタまたは変換関数(C++11 以降)の宣言の decl-specifier-seq 内でのみ出現します。</target>
        </trans-unit>
        <trans-unit id="3afa03179e588e1c757bb671479e9343d010308a" translate="yes" xml:space="preserve">
          <source>The exponent contains at least two digits, more digits are used only if necessary. If the value is &lt;code&gt;​0​&lt;/code&gt;, the exponent is also &lt;code&gt;​0​&lt;/code&gt;.</source>
          <target state="translated">指数には少なくとも2桁が含まれます。それ以上の桁は必要な場合にのみ使用されます。値がある場合は &lt;code&gt;​0​&lt;/code&gt; 、指数もある &lt;code&gt;​0​&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bbac353ed3f45f6cc4a964a51c439a96d66dd22" translate="yes" xml:space="preserve">
          <source>The exponent has the form.</source>
          <target state="translated">指数は形を持っています。</target>
        </trans-unit>
        <trans-unit id="04028f66e9c71c2bd75f830dc82f30f80377d676" translate="yes" xml:space="preserve">
          <source>The exponential function is an</source>
          <target state="translated">指数関数は</target>
        </trans-unit>
        <trans-unit id="b026107f975051acf342b103e1b444c59a6178c7" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;(void)*i, *i&lt;/code&gt; is equivalent to &lt;code&gt;*i&lt;/code&gt;.</source>
          <target state="translated">表現 &lt;code&gt;(void)*i, *i&lt;/code&gt; と同等です &lt;code&gt;*i&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f256b2d48cb6167100795f513339752f484b361c" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;&lt;a href=&quot;../utility/tuple/tuple_size&quot;&gt;std::tuple_size&lt;/a&gt;&amp;lt;E&amp;gt;::value&lt;/code&gt; must be a well-formed integer constant expression, and the number of identifiers must equal &lt;code&gt;&lt;a href=&quot;../utility/tuple/tuple_size&quot;&gt;std::tuple_size&lt;/a&gt;&amp;lt;E&amp;gt;::value&lt;/code&gt;.</source>
          <target state="translated">式 &lt;code&gt;&lt;a href=&quot;../utility/tuple/tuple_size&quot;&gt;std::tuple_size&lt;/a&gt;&amp;lt;E&amp;gt;::value&lt;/code&gt; は整形式の整数定数式でなければならず、識別子の数は &lt;code&gt;&lt;a href=&quot;../utility/tuple/tuple_size&quot;&gt;std::tuple_size&lt;/a&gt;&amp;lt;E&amp;gt;::value&lt;/code&gt; と等しくなければなりません。</target>
        </trans-unit>
        <trans-unit id="83669166fa2ba44ae88683185916f1e865fbe4db" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;E1-&amp;gt;*E2&lt;/code&gt; is exactly equivalent to &lt;code&gt;(*E1).*E2&lt;/code&gt; for built-in types; that is why the following rules address only &lt;code&gt;E1.*E2&lt;/code&gt;.</source>
          <target state="translated">式 &lt;code&gt;E1-&amp;gt;*E2&lt;/code&gt; は、組み込み型の &lt;code&gt;(*E1).*E2&lt;/code&gt; とまったく同じです。そのため、以下のルールは &lt;code&gt;E1.*E2&lt;/code&gt; のみを扱います。</target>
        </trans-unit>
        <trans-unit id="1be99cdcd2e8a79ac63dcdfecfbecf43da1ffdc5" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;E1-&amp;gt;E2&lt;/code&gt; is exactly equivalent to &lt;code&gt;(*E1).E2&lt;/code&gt; for built-in types; that is why the following rules address only &lt;code&gt;E1.E2&lt;/code&gt;.</source>
          <target state="translated">式 &lt;code&gt;E1-&amp;gt;E2&lt;/code&gt; は、組み込み型の &lt;code&gt;(*E1).E2&lt;/code&gt; とまったく同じです。そのため、以下のルールは &lt;code&gt;E1.E2&lt;/code&gt; のみを扱います。</target>
        </trans-unit>
        <trans-unit id="8662b895e8848a9d54fb30016c007f413c93e39b" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;E&lt;/code&gt; as well as all expressions &lt;code&gt;A1&lt;/code&gt;, &lt;code&gt;A2&lt;/code&gt;, &lt;code&gt;A3&lt;/code&gt;, etc, provided as arguments are evaluated in arbitrary order, &lt;a href=&quot;eval_order&quot;&gt;unsequenced&lt;/a&gt; with respect to each other.</source>
          <target state="translated">引数として指定された式 &lt;code&gt;E&lt;/code&gt; とすべての式 &lt;code&gt;A1&lt;/code&gt; 、 &lt;code&gt;A2&lt;/code&gt; 、 &lt;code&gt;A3&lt;/code&gt; などは、&lt;a href=&quot;eval_order&quot;&gt;相互に順序付け&lt;/a&gt;られていない任意の順序で評価されます。</target>
        </trans-unit>
        <trans-unit id="ded81f4b1365cdf6b2376a723a760568d868d21a" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;E&lt;/code&gt; is sequenced before each of the expressions &lt;code&gt;A1&lt;/code&gt;, &lt;code&gt;A2&lt;/code&gt;, &lt;code&gt;A3&lt;/code&gt; as well as default arguments, if any. The argument expressions are evaluated in arbitrary order, &lt;a href=&quot;eval_order&quot;&gt;indeterminately sequenced&lt;/a&gt; with respect to each other.</source>
          <target state="translated">式 &lt;code&gt;E&lt;/code&gt; は、式 &lt;code&gt;A1&lt;/code&gt; 、 &lt;code&gt;A2&lt;/code&gt; 、 &lt;code&gt;A3&lt;/code&gt; 、およびデフォルトの引数（ある場合）のそれぞれの前にシーケンスされます。引数式は任意の順序で評価され、相互に&lt;a href=&quot;eval_order&quot;&gt;不確定に順序付けられます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="539ec12c5f5ccb719489a32d4374a893502f671b" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;assert(E)&lt;/code&gt; is guaranteed to be a &lt;a href=&quot;../language/constant_expression&quot;&gt;constant subexpression&lt;/a&gt;, if either.</source>
          <target state="translated">式 &lt;code&gt;assert(E)&lt;/code&gt; は、&lt;a href=&quot;../language/constant_expression&quot;&gt;定数部分式&lt;/a&gt;（ある場合）であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="586336445cf8edc1ea53dc0a3ef96aa12ea46aed" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;is &amp;gt;&amp;gt; manip&lt;/code&gt; is an lvalue of type &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; with the value &lt;code&gt;is&lt;/code&gt;.</source>
          <target state="translated">式 &lt;code&gt;is &amp;gt;&amp;gt; manip&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; タイプの左辺値で、値 &lt;code&gt;is&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="82b1761cea5dd130f7d4e710d4bd26b38bbad074" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.lock()&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.lock()&lt;/code&gt; には次のプロパティがあります</target>
        </trans-unit>
        <trans-unit id="7709fdad1bfa0b92b4b386c5e0f181e6a9f690a9" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.lock_shared()&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.lock_shared()&lt;/code&gt; には次のプロパティがあります</target>
        </trans-unit>
        <trans-unit id="240415ee5368f9c965c95afc5cc3939b7c0c29ea" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.try_lock()&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.try_lock()&lt;/code&gt; には次のプロパティがあります</target>
        </trans-unit>
        <trans-unit id="fe6f73c5bba66f05a94b9e2020b01d0a71bf84af" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.try_lock_for(duration)&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.try_lock_for(duration)&lt;/code&gt; には、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="af3f262075eaf71da5ad7ff342912b9553daa93f" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.try_lock_shared()&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.try_lock_shared()&lt;/code&gt; には次のプロパティがあります</target>
        </trans-unit>
        <trans-unit id="a44765748c4d628f81874d40f8b3a638d007d340" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.try_lock_shared_for(duration)&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.try_lock_shared_for(duration)&lt;/code&gt; には、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="124bf2cd9e34ad42e934027eaeae6a4a74ab1f4b" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.try_lock_shared_until(time_point)&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.try_lock_shared_until(time_point)&lt;/code&gt; には、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="d57532bbb3aad50e57871e8a34a148c07fd1835b" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.try_lock_until(time_point)&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.try_lock_until(time_point)&lt;/code&gt; には、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="2ccc23f32ac0eccf9b8dd11159afbf1ff8524278" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.unlock()&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.unlock()&lt;/code&gt; には次のプロパティがあります</target>
        </trans-unit>
        <trans-unit id="6fc0acaec7b5396f8450b18e802131519692dde8" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;m.unlock_shared()&lt;/code&gt; has the following properties</source>
          <target state="translated">式 &lt;code&gt;m.unlock_shared()&lt;/code&gt; には次のプロパティがあります</target>
        </trans-unit>
        <trans-unit id="91b7fbd840ec23a67a46bd4f51655418edf1d142" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;offsetof(type, member)&lt;/code&gt; is never &lt;a href=&quot;../language/dependent_name#Dependent_types&quot;&gt;type-dependent&lt;/a&gt; and it is value-dependent if and only if type is dependent.</source>
          <target state="translated">式 &lt;code&gt;offsetof(type, member)&lt;/code&gt; は&lt;a href=&quot;../language/dependent_name#Dependent_types&quot;&gt;タイプに依存せ&lt;/a&gt;ず、タイプが依存している場合にのみ値に依存します。</target>
        </trans-unit>
        <trans-unit id="54b4ee5d238ac3437ac1265bf827a66c59c6ad6e" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;p(v)&lt;/code&gt; must be convertible to &lt;code&gt;bool&lt;/code&gt; for every argument &lt;code&gt;v&lt;/code&gt; of type (possibly const) &lt;code&gt;T&lt;/code&gt;, regardless of &lt;a href=&quot;../../language/value_category&quot;&gt;value category&lt;/a&gt;, and must not modify &lt;code&gt;v&lt;/code&gt;. Thus, a parameter type of &lt;code&gt;T&amp;amp;&lt;/code&gt;is not allowed, nor is &lt;code&gt;T&lt;/code&gt; unless for &lt;code&gt;T&lt;/code&gt; a move is equivalent to a copy(since C++11). ​</source>
          <target state="translated">式 &lt;code&gt;p(v)&lt;/code&gt; は、&lt;a href=&quot;../../language/value_category&quot;&gt;値category&lt;/a&gt;に関係なく、タイプ（おそらくconst） &lt;code&gt;T&lt;/code&gt; の引数 &lt;code&gt;v&lt;/code&gt; ごとに &lt;code&gt;bool&lt;/code&gt; に変換可能でなければならず、 &lt;code&gt;v&lt;/code&gt; を変更してはなりません。したがって、パラメータのタイプ &lt;code&gt;T&amp;amp;&lt;/code&gt; が許可されていない、またある &lt;code&gt;T&lt;/code&gt; はためない限り、 &lt;code&gt;T&lt;/code&gt; 動きがコピーと等価である（C ++ 11以降）。</target>
        </trans-unit>
        <trans-unit id="31766904edca7191420c344c843fc6cc68843556" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;p(v)&lt;/code&gt; must be convertible to &lt;code&gt;bool&lt;/code&gt; for every argument &lt;code&gt;v&lt;/code&gt; of type (possibly const) &lt;code&gt;VT&lt;/code&gt;, where &lt;code&gt;VT&lt;/code&gt; is the value type of &lt;code&gt;BidirIt&lt;/code&gt;, regardless of &lt;a href=&quot;../language/value_category&quot;&gt;value category&lt;/a&gt;, and must not modify &lt;code&gt;v&lt;/code&gt;. Thus, a parameter type of &lt;code&gt;VT&amp;amp;&lt;/code&gt;is not allowed, nor is &lt;code&gt;VT&lt;/code&gt; unless for &lt;code&gt;VT&lt;/code&gt; a move is equivalent to a copy(since C++11). ​</source>
          <target state="translated">式 &lt;code&gt;p(v)&lt;/code&gt; に変換可能でなければならない &lt;code&gt;bool&lt;/code&gt; すべての引数のために &lt;code&gt;v&lt;/code&gt; （おそらくCONST）タイプの &lt;code&gt;VT&lt;/code&gt; 、 &lt;code&gt;VT&lt;/code&gt; は、の値型である &lt;code&gt;BidirIt&lt;/code&gt; にかかわらず、&lt;a href=&quot;../language/value_category&quot;&gt;値カテゴリ&lt;/a&gt;、および変更してはなりません &lt;code&gt;v&lt;/code&gt; 。このように、パラメータタイプ &lt;code&gt;VT&amp;amp;&lt;/code&gt; が許さ、またされないが、 &lt;code&gt;VT&lt;/code&gt; のためのない限り、 &lt;code&gt;VT&lt;/code&gt; 動きは（C ++ 11以降）のコピーと等価です。</target>
        </trans-unit>
        <trans-unit id="e393e02be8964600ac69d24291a03db73c323fd4" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;p(v)&lt;/code&gt; must be convertible to &lt;code&gt;bool&lt;/code&gt; for every argument &lt;code&gt;v&lt;/code&gt; of type (possibly const) &lt;code&gt;VT&lt;/code&gt;, where &lt;code&gt;VT&lt;/code&gt; is the value type of &lt;code&gt;ForwardIt&lt;/code&gt;, regardless of &lt;a href=&quot;../language/value_category&quot;&gt;value category&lt;/a&gt;, and must not modify &lt;code&gt;v&lt;/code&gt;. Thus, a parameter type of &lt;code&gt;VT&amp;amp;&lt;/code&gt;is not allowed, nor is &lt;code&gt;VT&lt;/code&gt; unless for &lt;code&gt;VT&lt;/code&gt; a move is equivalent to a copy(since C++11). ​</source>
          <target state="translated">式 &lt;code&gt;p(v)&lt;/code&gt; に変換可能でなければならない &lt;code&gt;bool&lt;/code&gt; すべての引数のために &lt;code&gt;v&lt;/code&gt; （おそらくCONST）タイプの &lt;code&gt;VT&lt;/code&gt; 、 &lt;code&gt;VT&lt;/code&gt; は、の値型である &lt;code&gt;ForwardIt&lt;/code&gt; にかかわらず、&lt;a href=&quot;../language/value_category&quot;&gt;値カテゴリ&lt;/a&gt;、および変更してはなりません &lt;code&gt;v&lt;/code&gt; 。このように、パラメータタイプ &lt;code&gt;VT&amp;amp;&lt;/code&gt; が許さ、またされないが、 &lt;code&gt;VT&lt;/code&gt; のためのない限り、 &lt;code&gt;VT&lt;/code&gt; 動きは（C ++ 11以降）のコピーと等価です。</target>
        </trans-unit>
        <trans-unit id="038e567c0ca54f7778dee012a53f5c496d7dec7b" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;p(v)&lt;/code&gt; must be convertible to &lt;code&gt;bool&lt;/code&gt; for every argument &lt;code&gt;v&lt;/code&gt; of type (possibly const) &lt;code&gt;VT&lt;/code&gt;, where &lt;code&gt;VT&lt;/code&gt; is the value type of &lt;code&gt;InputIt&lt;/code&gt;, regardless of &lt;a href=&quot;../language/value_category&quot;&gt;value category&lt;/a&gt;, and must not modify &lt;code&gt;v&lt;/code&gt;. Thus, a parameter type of &lt;code&gt;VT&amp;amp;&lt;/code&gt;is not allowed, nor is &lt;code&gt;VT&lt;/code&gt; unless for &lt;code&gt;VT&lt;/code&gt; a move is equivalent to a copy(since C++11). ​</source>
          <target state="translated">式 &lt;code&gt;p(v)&lt;/code&gt; に変換可能でなければならない &lt;code&gt;bool&lt;/code&gt; すべての引数のために &lt;code&gt;v&lt;/code&gt; （おそらくCONST）タイプの &lt;code&gt;VT&lt;/code&gt; 、 &lt;code&gt;VT&lt;/code&gt; は、の値型である &lt;code&gt;InputIt&lt;/code&gt; にかかわらず、&lt;a href=&quot;../language/value_category&quot;&gt;値カテゴリ&lt;/a&gt;、および変更してはなりません &lt;code&gt;v&lt;/code&gt; 。このように、パラメータタイプ &lt;code&gt;VT&amp;amp;&lt;/code&gt; が許さ、またされないが、 &lt;code&gt;VT&lt;/code&gt; のためのない限り、 &lt;code&gt;VT&lt;/code&gt; 動きは（C ++ 11以降）のコピーと等価です。</target>
        </trans-unit>
        <trans-unit id="a33910922f5c49214aa40d9e9c70599d437ee4ab" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;pred(v)&lt;/code&gt; must be convertible to &lt;code&gt;bool&lt;/code&gt; for every argument &lt;code&gt;v&lt;/code&gt; of type (possibly const) &lt;code&gt;CharT&lt;/code&gt;, regardless of &lt;a href=&quot;../../language/value_category&quot;&gt;value category&lt;/a&gt;, and must not modify &lt;code&gt;v&lt;/code&gt;. Thus, a parameter type of &lt;code&gt;CharT&amp;amp;&lt;/code&gt;is not allowed, nor is &lt;code&gt;CharT&lt;/code&gt; unless for &lt;code&gt;CharT&lt;/code&gt; a move is equivalent to a copy(since C++11). ​</source>
          <target state="translated">式 &lt;code&gt;pred(v)&lt;/code&gt; は、&lt;a href=&quot;../../language/value_category&quot;&gt;値category&lt;/a&gt;に関係なく、 &lt;code&gt;CharT&lt;/code&gt; 型（おそらくconst）の引数 &lt;code&gt;v&lt;/code&gt; ごとに &lt;code&gt;bool&lt;/code&gt; に変換可能でなければならず、 &lt;code&gt;v&lt;/code&gt; を変更してはなりません。したがって、 &lt;code&gt;CharT&amp;amp;&lt;/code&gt; のパラメーター・タイプは許可されません &lt;code&gt;CharT&lt;/code&gt; 場合、移動がコピーと同等でない限り（C ++ 11以降）、 &lt;code&gt;CharT&lt;/code&gt; も許可されません。</target>
        </trans-unit>
        <trans-unit id="fb551a5e288558f389d83fdd483dcaf1a86f0f36" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;pred(v)&lt;/code&gt; must be convertible to &lt;code&gt;bool&lt;/code&gt; for every argument &lt;code&gt;v&lt;/code&gt; of type (possibly const) &lt;code&gt;T&lt;/code&gt;, regardless of &lt;a href=&quot;../../language/value_category&quot;&gt;value category&lt;/a&gt;, and must not modify &lt;code&gt;v&lt;/code&gt;. Thus, a parameter type of &lt;code&gt;T&amp;amp;&lt;/code&gt;is not allowed, nor is &lt;code&gt;T&lt;/code&gt; unless for &lt;code&gt;T&lt;/code&gt; a move is equivalent to a copy(since C++11). ​</source>
          <target state="translated">式 &lt;code&gt;pred(v)&lt;/code&gt; は、&lt;a href=&quot;../../language/value_category&quot;&gt;値category&lt;/a&gt;に関係なく、タイプ（おそらくconst） &lt;code&gt;T&lt;/code&gt; の引数 &lt;code&gt;v&lt;/code&gt; ごとに &lt;code&gt;bool&lt;/code&gt; に変換可能でなければならず、 &lt;code&gt;v&lt;/code&gt; を変更してはなりません。したがって、パラメータのタイプ &lt;code&gt;T&amp;amp;&lt;/code&gt; が許可されていない、またある &lt;code&gt;T&lt;/code&gt; はためない限り、 &lt;code&gt;T&lt;/code&gt; 動きがコピーと等価である（C ++ 11以降）。</target>
        </trans-unit>
        <trans-unit id="1ebb390410881cd226a720f655f581e413a7c60b" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;pred(v)&lt;/code&gt; must be convertible to &lt;code&gt;bool&lt;/code&gt; for every argument &lt;code&gt;v&lt;/code&gt; of type (possibly const) &lt;code&gt;VT&lt;/code&gt;, where &lt;code&gt;VT&lt;/code&gt; is the value type of &lt;code&gt;InputIt&lt;/code&gt;, regardless of &lt;a href=&quot;../language/value_category&quot;&gt;value category&lt;/a&gt;, and must not modify &lt;code&gt;v&lt;/code&gt;. Thus, a parameter type of &lt;code&gt;VT&amp;amp;&lt;/code&gt;is not allowed, nor is &lt;code&gt;VT&lt;/code&gt; unless for &lt;code&gt;VT&lt;/code&gt; a move is equivalent to a copy(since C++11). ​</source>
          <target state="translated">表現 &lt;code&gt;pred(v)&lt;/code&gt; に変換可能でなければならない &lt;code&gt;bool&lt;/code&gt; すべての引数のために &lt;code&gt;v&lt;/code&gt; （おそらくCONST）タイプの &lt;code&gt;VT&lt;/code&gt; 、 &lt;code&gt;VT&lt;/code&gt; は、の値型である &lt;code&gt;InputIt&lt;/code&gt; にかかわらず、&lt;a href=&quot;../language/value_category&quot;&gt;値カテゴリ&lt;/a&gt;、および変更してはなりません &lt;code&gt;v&lt;/code&gt; 。このように、パラメータタイプ &lt;code&gt;VT&amp;amp;&lt;/code&gt; が許さ、またされないが、 &lt;code&gt;VT&lt;/code&gt; のためのない限り、 &lt;code&gt;VT&lt;/code&gt; 動きは（C ++ 11以降）のコピーと等価です。</target>
        </trans-unit>
        <trans-unit id="82491c755cffe0cddbb70822fc6e26fa330c289b" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;q(v)&lt;/code&gt; must be convertible to &lt;code&gt;bool&lt;/code&gt; for every argument &lt;code&gt;v&lt;/code&gt; of type (possibly const) &lt;code&gt;VT&lt;/code&gt;, where &lt;code&gt;VT&lt;/code&gt; is the value type of &lt;code&gt;InputIt&lt;/code&gt;, regardless of &lt;a href=&quot;../language/value_category&quot;&gt;value category&lt;/a&gt;, and must not modify &lt;code&gt;v&lt;/code&gt;. Thus, a parameter type of &lt;code&gt;VT&amp;amp;&lt;/code&gt;is not allowed, nor is &lt;code&gt;VT&lt;/code&gt; unless for &lt;code&gt;VT&lt;/code&gt; a move is equivalent to a copy(since C++11). ​</source>
          <target state="translated">表現 &lt;code&gt;q(v)&lt;/code&gt; に変換可能でなければならない &lt;code&gt;bool&lt;/code&gt; すべての引数のために &lt;code&gt;v&lt;/code&gt; （おそらくCONST）タイプの &lt;code&gt;VT&lt;/code&gt; 、 &lt;code&gt;VT&lt;/code&gt; は、の値型である &lt;code&gt;InputIt&lt;/code&gt; にかかわらず、&lt;a href=&quot;../language/value_category&quot;&gt;値カテゴリ&lt;/a&gt;、および変更してはなりません &lt;code&gt;v&lt;/code&gt; 。このように、パラメータタイプ &lt;code&gt;VT&amp;amp;&lt;/code&gt; が許さ、またされないが、 &lt;code&gt;VT&lt;/code&gt; のためのない限り、 &lt;code&gt;VT&lt;/code&gt; 動きは（C ++ 11以降）のコピーと等価です。</target>
        </trans-unit>
        <trans-unit id="49bc73e62fcd530ece5b0830e6bbd0253365d4cb" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;std::addressof(E)&lt;/code&gt; is a &lt;a href=&quot;../language/constant_expression&quot;&gt;constant subexpression&lt;/a&gt;, if &lt;code&gt;E&lt;/code&gt; is an lvalue constant subexpression.</source>
          <target state="translated">表現 &lt;code&gt;std::addressof(E)&lt;/code&gt; ある&lt;a href=&quot;../language/constant_expression&quot;&gt;一定の部分式の&lt;/a&gt;場合、 &lt;code&gt;E&lt;/code&gt; は左辺値に一定の部分式です。</target>
        </trans-unit>
        <trans-unit id="67b8cc9f01423f287b7ad35827c5e57ad0c313d1" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;v.~T()&lt;/code&gt; also must be valid, and, for lvalue &lt;code&gt;v&lt;/code&gt;, the expression &lt;code&gt;&amp;amp;v&lt;/code&gt; must have the type &lt;code&gt;T*&lt;/code&gt; or &lt;code&gt;const T*&lt;/code&gt; and must evaluate to the address of &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">式 &lt;code&gt;v.~T()&lt;/code&gt; も有効である必要があり、lvalue &lt;code&gt;v&lt;/code&gt; の場合、式 &lt;code&gt;&amp;amp;v&lt;/code&gt; のタイプは &lt;code&gt;T*&lt;/code&gt; または &lt;code&gt;const T*&lt;/code&gt; である必要があり、 &lt;code&gt;v&lt;/code&gt; のアドレスに評価される必要があります。</target>
        </trans-unit>
        <trans-unit id="665d7a4f577c4f3d78f96aba7a62ab512332346a" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;view::all(E)&lt;/code&gt; is expression-equivalent (has the same effect) to:</source>
          <target state="translated">式 &lt;code&gt;view::all(E)&lt;/code&gt; は、式と同等です（同じ効果があります）。</target>
        </trans-unit>
        <trans-unit id="904e92ad60024ca361e2c692f767879d8474a6f3" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;x - trunc(x/y)*y&lt;/code&gt; may not equal &lt;code&gt;fmod(x,y)&lt;/code&gt; when the rounding of x/y to initialize the argument of trunc loses too much precision (example: x = 30.508474576271183309, y = 6.1016949152542370172).</source>
          <target state="translated">式 &lt;code&gt;x - trunc(x/y)*y&lt;/code&gt; は、truncの引数を初期化するためのx / yの丸めがあまりにも精度を失う場合（例：x = 30.508474576271183309、y = 6.1016949152542370172） &lt;code&gt;fmod(x,y)&lt;/code&gt; と等しくない場合があります。</target>
        </trans-unit>
        <trans-unit id="aa55e431a2c4565661fa1dcb2e324fbc7374b6b2" translate="yes" xml:space="preserve">
          <source>The expression in a contract attribute, contextually converted to &lt;code&gt;bool&lt;/code&gt;, is called its</source>
          <target state="translated">コンテキスト属性で &lt;code&gt;bool&lt;/code&gt; に変換された契約属性の式は、</target>
        </trans-unit>
        <trans-unit id="fd397bb5ad1c715271d852321a59468dac4bf8e0" translate="yes" xml:space="preserve">
          <source>The expression in the middle of the conditional operator (between &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt;) is parsed as if parenthesized: its precedence relative to &lt;code&gt;?:&lt;/code&gt; is ignored.</source>
          <target state="translated">条件演算子の中間にある式（ &lt;code&gt;?&lt;/code&gt; と &lt;code&gt;:&lt;/code&gt; の間）は、括弧で囲まれているかのように解析され &lt;code&gt;?:&lt;/code&gt; に対する優先順位は無視されます。</target>
        </trans-unit>
        <trans-unit id="885bd0a86f7344aa7addd208200ed06b9ca1b776" translate="yes" xml:space="preserve">
          <source>The expression in the requires-clause of (2) is equivalent to &lt;code&gt;&lt;a href=&quot;../concepts/convertibleto&quot;&gt;ConvertibleTo&lt;/a&gt;&amp;lt;T, R&amp;amp;&amp;gt; &amp;amp;&amp;amp; requires { FUN(declval&amp;lt;T&amp;gt;()); }&lt;/code&gt;, where the exposition-only functions &lt;code&gt;FUN&lt;/code&gt; are declared as &lt;code&gt;void FUN(R&amp;amp;); void FUN(R&amp;amp;&amp;amp;) = delete;&lt;/code&gt;.</source>
          <target state="translated">（2）の &lt;code&gt;&lt;a href=&quot;../concepts/convertibleto&quot;&gt;ConvertibleTo&lt;/a&gt;&amp;lt;T, R&amp;amp;&amp;gt; &amp;amp;&amp;amp; requires { FUN(declval&amp;lt;T&amp;gt;()); }&lt;/code&gt; -clauseの式は、&lt;a href=&quot;../concepts/convertibleto&quot;&gt;ConvertibleTo&lt;/a&gt; &amp;lt;T、R＆&amp;gt; &amp;amp;&amp;amp; require {FUN（declval &amp;lt;T&amp;gt;（））;と同等です。}、博覧会専用機能場所 &lt;code&gt;FUN&lt;/code&gt; として宣言されている &lt;code&gt;void FUN(R&amp;amp;); void FUN(R&amp;amp;&amp;amp;) = delete;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a21b0ee768bd9b327d1cbd0968cf627a511e659" translate="yes" xml:space="preserve">
          <source>The expression is a constant expression.</source>
          <target state="translated">式は定数式です。</target>
        </trans-unit>
        <trans-unit id="f16e21d3bd144a8899aed1761dfc3082f965b05a" translate="yes" xml:space="preserve">
          <source>The expression may contain unary operators in form &lt;code&gt;defined&lt;/code&gt;identifier or &lt;code&gt;defined (&lt;/code&gt;identifier&lt;code&gt;)&lt;/code&gt;. The result is &lt;code&gt;1&lt;/code&gt; if the identifier was &lt;a href=&quot;replace&quot;&gt;defined as a macro name&lt;/a&gt; or the identifier is &lt;a href=&quot;include&quot;&gt;&lt;code&gt;__has_include&lt;/code&gt;&lt;/a&gt;(since C++17), otherwise the result is &lt;code&gt;​0​&lt;/code&gt;.</source>
          <target state="translated">式には、 &lt;code&gt;defined&lt;/code&gt; 識別子または &lt;code&gt;defined (&lt;/code&gt; 識別子 &lt;code&gt;)&lt;/code&gt; の形式の単項演算子を含めることができます。結果は &lt;code&gt;1&lt;/code&gt; 識別子がされた場合&lt;a href=&quot;replace&quot;&gt;、マクロ名として定義され&lt;/a&gt;、または識別子である&lt;a href=&quot;include&quot;&gt; &lt;code&gt;__has_include&lt;/code&gt; &lt;/a&gt;（C ++ 17以降）そうでなければ結果は、 &lt;code&gt;​0​&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d339ba0adac2cf4ba186cd532857e945e9343eb" translate="yes" xml:space="preserve">
          <source>The expression must have one of the following forms:</source>
          <target state="translated">式は以下のいずれかの形式を持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="231710b26e93a7d7764beca9620416f5a77ff691" translate="yes" xml:space="preserve">
          <source>The expression returns an object such that.</source>
          <target state="translated">式は、次のようなオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="ea44ea7b24f7bd77e7c8cf33597bd8e37a6afe92" translate="yes" xml:space="preserve">
          <source>The expression that names the function can be.</source>
          <target state="translated">関数の名前を付ける式は、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="eab260347bde3009ca03d9d6783a162cf2a08d29" translate="yes" xml:space="preserve">
          <source>The expressions &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;(static_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;(dynamic_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;(const_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt; might seem to have the same effect, but they all will likely result in undefined behavior, attempting to delete the same object twice!</source>
          <target state="translated">式 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;(static_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;(dynamic_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;(const_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt; は同じ効果があるように見えるかもしれませんが、同じオブジェクトを2回削除しようとすると、すべてが未定義の動作になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="cc5889de51b88f428e940c2673c3fc359f09fa6e" translate="yes" xml:space="preserve">
          <source>The expressions &lt;code&gt;T::is_steady&lt;/code&gt; and &lt;code&gt;T::now()&lt;/code&gt; are each well-formed when treated as an unevaluated operand.</source>
          <target state="translated">式 &lt;code&gt;T::is_steady&lt;/code&gt; および &lt;code&gt;T::now()&lt;/code&gt; は、未評価のオペランドとして扱われる場合、それぞれ整形式です。</target>
        </trans-unit>
        <trans-unit id="34901c71cab528a05d379570e30475cde56abe27" translate="yes" xml:space="preserve">
          <source>The expressions &lt;code&gt;a.mf&lt;/code&gt; and &lt;code&gt;p-&amp;gt;mf&lt;/code&gt;, where &lt;code&gt;mf&lt;/code&gt; is a &lt;a href=&quot;member_functions&quot;&gt;non-static member function&lt;/a&gt;, and the expressions &lt;code&gt;a.*pmf&lt;/code&gt; and &lt;code&gt;p-&amp;gt;*pmf&lt;/code&gt;, where &lt;code&gt;pmf&lt;/code&gt; is a &lt;a href=&quot;pointer#Pointers_to_member_functions&quot;&gt;pointer to member function&lt;/a&gt;, are classified as prvalue expressions, but they cannot be used to initialize references, as function arguments, or for any purpose at all, except as the left-hand argument of the function call operator, e.g. &lt;code&gt;(p-&amp;gt;*pmf)(args)&lt;/code&gt;.</source>
          <target state="translated">式 &lt;code&gt;a.mf&lt;/code&gt; および &lt;code&gt;p-&amp;gt;mf&lt;/code&gt; 、ここで &lt;code&gt;mf&lt;/code&gt; は&lt;a href=&quot;member_functions&quot;&gt;非静的メンバー関数&lt;/a&gt;、および式 &lt;code&gt;a.*pmf&lt;/code&gt; および &lt;code&gt;p-&amp;gt;*pmf&lt;/code&gt; 、ここで &lt;code&gt;pmf&lt;/code&gt; は&lt;a href=&quot;pointer#Pointers_to_member_functions&quot;&gt;メンバー関数へ&lt;/a&gt;のポインターは、prvalue式として分類されます。 &lt;code&gt;(p-&amp;gt;*pmf)(args)&lt;/code&gt; のように、関数呼び出し演算子の左側の引数として以外は、関数の引数として、または任意の目的で参照を初期化するために使用することはできません。</target>
        </trans-unit>
        <trans-unit id="9cca2c19bac42464027e1a3c56fa7393e2441fac" translate="yes" xml:space="preserve">
          <source>The expressions that can be moved from are called &quot;rvalue expressions&quot;. Both prvalues and xvalues are rvalue expressions.</source>
          <target state="translated">ここから移動できる式を「rvalue式」と呼びます。prvaluesもxvaluesもrvalue式です。</target>
        </trans-unit>
        <trans-unit id="b3811de048b8c0719daab80a97fd886fb125015a" translate="yes" xml:space="preserve">
          <source>The expressions that have identity are called &quot;glvalue expressions&quot; (glvalue stands for &quot;generalized lvalue&quot;). Both lvalues and xvalues are glvalue expressions.</source>
          <target state="translated">同一性を持つ式を「glvalue式」と呼びます(glvalueは「一般化されたlvalue」の略です)。lvalueもxvalueもglvalue式です。</target>
        </trans-unit>
        <trans-unit id="55676a08069cb5f513f31726af6380f2a1648ac0" translate="yes" xml:space="preserve">
          <source>The extension as returned by this function includes a period to make it possible to distinguish the file that ends with a period (function returns &lt;code&gt;&quot;.&quot;&lt;/code&gt;) from a file with no extension (function returns &lt;code&gt;&quot;&quot;&lt;/code&gt;).</source>
          <target state="translated">この関数が返す拡張子にはピリオドが含まれ、ピリオドで終わるファイル（関数は &lt;code&gt;&quot;.&quot;&lt;/code&gt; 返す）と拡張子のないファイル（関数は &lt;code&gt;&quot;&quot;&lt;/code&gt; を返す）を区別できるようにします。</target>
        </trans-unit>
        <trans-unit id="13bea24b4a4e8e50405556b05a63f04b74e94e6c" translate="yes" xml:space="preserve">
          <source>The extension of the current pathname or an empty path if there's no extension.</source>
          <target state="translated">現在のパス名の拡張子、または拡張子がない場合は空のパス。</target>
        </trans-unit>
        <trans-unit id="f3ad5e575ce7611c83adc14804313b5885a8f1e2" translate="yes" xml:space="preserve">
          <source>The extent &lt;code&gt;E&lt;/code&gt; of the span returned by (1) is determined as follows:</source>
          <target state="translated">（1）によって返されるスパンの範囲 &lt;code&gt;E&lt;/code&gt; は、次のように決定されます。</target>
        </trans-unit>
        <trans-unit id="21ef62f13c61e48aa5fc7ae1f2fc5e8fd87da3dd" translate="yes" xml:space="preserve">
          <source>The extraction operation in &lt;code&gt;in &amp;gt;&amp;gt; get_money(mon, intl)&lt;/code&gt; behaves as a &lt;a href=&quot;../../named_req/formattedinputfunction&quot;&gt;FormattedInputFunction&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;in &amp;gt;&amp;gt; get_money(mon, intl)&lt;/code&gt; の抽出操作は、&lt;a href=&quot;../../named_req/formattedinputfunction&quot;&gt;FormattedInputFunction&lt;/a&gt;として動作します。</target>
        </trans-unit>
        <trans-unit id="8997cdfb4c9592dee5dc60e1be61905e38917e65" translate="yes" xml:space="preserve">
          <source>The extraction operators of all &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistributions&lt;/a&gt;, if bad input is encountered.</source>
          <target state="translated">不正な入力が検出された場合の、すべての&lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistributions&lt;/a&gt;の抽出演算子。</target>
        </trans-unit>
        <trans-unit id="c6f16b18faa3bc7f8569c2fec0b657e8169e9ecf" translate="yes" xml:space="preserve">
          <source>The extraction operators of all &lt;a href=&quot;../../named_req/randomnumberengine&quot;&gt;RandomNumberEngines&lt;/a&gt;, if bad input is encountered.</source>
          <target state="translated">不正な入力が検出された場合の、すべての&lt;a href=&quot;../../named_req/randomnumberengine&quot;&gt;RandomNumberEngines&lt;/a&gt;の抽出演算子。</target>
        </trans-unit>
        <trans-unit id="9d05fc65ffd95b0140790a558b6a89968ddea9e7" translate="yes" xml:space="preserve">
          <source>The facet &lt;code&gt;std::moneypunct&lt;/code&gt; encapsulates monetary value format preferences. Stream I/O manipulators &lt;code&gt;&lt;a href=&quot;../io/manip/get_money&quot;&gt;std::get_money&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../io/manip/put_money&quot;&gt;std::put_money&lt;/a&gt;&lt;/code&gt; use &lt;code&gt;std::moneypunct&lt;/code&gt; through &lt;code&gt;&lt;a href=&quot;money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; for parsing monetary value input and formatting monetary value output.</source>
          <target state="translated">ファセット &lt;code&gt;std::moneypunct&lt;/code&gt; は、金額の値の形式設定をカプセル化します。ストリームI / Oマニピュレーター &lt;code&gt;&lt;a href=&quot;../io/manip/get_money&quot;&gt;std::get_money&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../io/manip/put_money&quot;&gt;std::put_money&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;std::moneypunct&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; 、金額の入力を解析し、金額の出力をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="ea98fc46164fdd46a66b2e0e45e334aa270845d4" translate="yes" xml:space="preserve">
          <source>The facet &lt;code&gt;std::numpunct&lt;/code&gt; encapsulates numeric punctuation preferences. Stream I/O operations use &lt;code&gt;std::numpunct&lt;/code&gt; through &lt;code&gt;&lt;a href=&quot;num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt; for parsing numeric input and formatting numeric output.</source>
          <target state="translated">ファセット &lt;code&gt;std::numpunct&lt;/code&gt; は、数字の句読点の設定をカプセル化します。ストリームI / O操作では、数値入力の解析と数値出力のフォーマットに &lt;code&gt;std::numpunct&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="58b1988e5fdc61555470b365aef2ee1b1f8c685c" translate="yes" xml:space="preserve">
          <source>The facets &lt;code&gt;&lt;a href=&quot;codecvt_utf8&quot;&gt;std::codecvt_utf8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;codecvt_utf16&quot;&gt;std::codecvt_utf16&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt; accept an optional value of type &lt;code&gt;std::codecvt_mode&lt;/code&gt; as a template argument, which specifies optional features of the unicode string conversion.</source>
          <target state="translated">ファセット &lt;code&gt;&lt;a href=&quot;codecvt_utf8&quot;&gt;std::codecvt_utf8&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;codecvt_utf16&quot;&gt;std::codecvt_utf16&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt; は、テンプレート引数として &lt;code&gt;std::codecvt_mode&lt;/code&gt; タイプのオプションの値を受け入れます。これは、ユニコード文字列変換のオプション機能を指定します。</target>
        </trans-unit>
        <trans-unit id="21a8e0fce58e2da39234e8680e0b14336ba0b8ac" translate="yes" xml:space="preserve">
          <source>The failbit</source>
          <target state="translated">フェイルビット</target>
        </trans-unit>
        <trans-unit id="18566aa84f9e67e30bdc8f0bbe052925c5246031" translate="yes" xml:space="preserve">
          <source>The failbit is set by the following standard library functions:</source>
          <target state="translated">フェイルビットは以下の標準ライブラリ関数によって設定されます。</target>
        </trans-unit>
        <trans-unit id="f16334c667365ad2f6c42f2b1d2344131a47226b" translate="yes" xml:space="preserve">
          <source>The fictional constructors for the purpose of overload resolution (described above) are explicit if they correspond to an implicitly-generated deduction guide formed from an explicit constructor or to a user-defined deduction guide that uses the keyword &lt;code&gt;explicit&lt;/code&gt;. As always, such constructors are ignored in copy-initialization context:</source>
          <target state="translated">オーバーロード解決のための架空のコンストラクター（上記を参照）は、明示的なコンストラクターから形成された暗黙的に生成される演繹ガイド、またはキーワード &lt;code&gt;explicit&lt;/code&gt; を使用するユーザー定義の演繹ガイドに対応する場合、明示的です。いつものように、そのようなコンストラクタはコピー初期化コンテキストでは無視されます：</target>
        </trans-unit>
        <trans-unit id="eafa07d54f48e5fabf0fb077805403e664068140" translate="yes" xml:space="preserve">
          <source>The field width before the call to the function.</source>
          <target state="translated">関数を呼び出す前のフィールドの幅。</target>
        </trans-unit>
        <trans-unit id="2f2ded8c6ec6225067551f261401ae1283fdd943" translate="yes" xml:space="preserve">
          <source>The file is opened as a binary file for update (as by &lt;code&gt;&lt;a href=&quot;fopen&quot;&gt;std::fopen&lt;/a&gt;&lt;/code&gt; with access mode &lt;code&gt;&quot;wb+&quot;&lt;/code&gt;). At least &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;TMP_MAX&lt;/a&gt;&lt;/code&gt; files may be opened during the lifetime of a program (this limit may be shared with &lt;code&gt;&lt;a href=&quot;tmpnam&quot;&gt;std::tmpnam&lt;/a&gt;&lt;/code&gt; and may be further limited by &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;FOPEN_MAX&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">ファイルは、更新用のバイナリファイルとして開かれます（アクセスモード &lt;code&gt;&quot;wb+&quot;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;fopen&quot;&gt;std::fopen&lt;/a&gt;&lt;/code&gt; によって）。プログラムの存続期間中に少なくとも &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;TMP_MAX&lt;/a&gt;&lt;/code&gt; ファイルを開くことができます（この制限は &lt;code&gt;&lt;a href=&quot;tmpnam&quot;&gt;std::tmpnam&lt;/a&gt;&lt;/code&gt; と共有される場合があり、 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;FOPEN_MAX&lt;/a&gt;&lt;/code&gt; によってさらに制限される場合があります）。</target>
        </trans-unit>
        <trans-unit id="6ac41de8ef3462b9d25a0be25782c2d9eb8467a9" translate="yes" xml:space="preserve">
          <source>The file is opened as if by calling &lt;code&gt;&lt;a href=&quot;../c/fopen&quot;&gt;std::fopen&lt;/a&gt;&lt;/code&gt; with the second argument (&lt;code&gt;mode&lt;/code&gt;) determined as follows:</source>
          <target state="translated">ファイルは、次のように決定された2番目の引数（ &lt;code&gt;mode&lt;/code&gt; ）を指定して &lt;code&gt;&lt;a href=&quot;../c/fopen&quot;&gt;std::fopen&lt;/a&gt;&lt;/code&gt; を呼び出すかのように開かれます。</target>
        </trans-unit>
        <trans-unit id="713295cf62f82f602674e62dd30e404b198ed140" translate="yes" xml:space="preserve">
          <source>The file status (a &lt;code&gt;&lt;a href=&quot;file_status&quot;&gt;file_status&lt;/a&gt;&lt;/code&gt; object).</source>
          <target state="translated">ファイルのステータス（ &lt;code&gt;&lt;a href=&quot;file_status&quot;&gt;file_status&lt;/a&gt;&lt;/code&gt; オブジェクト）。</target>
        </trans-unit>
        <trans-unit id="769141f7f9b5a5142e1255a4ab88fe7d4db964a7" translate="yes" xml:space="preserve">
          <source>The file's user group has execute/search permission</source>
          <target state="translated">ファイルのユーザグループには実行/検索権限があります。</target>
        </trans-unit>
        <trans-unit id="70bc69312668a45ccd09783b9c8fded122da0f78" translate="yes" xml:space="preserve">
          <source>The file's user group has read permission</source>
          <target state="translated">ファイルのユーザーグループは、読み取り権限を持っています。</target>
        </trans-unit>
        <trans-unit id="2b12b2de176ac00b49030d0c10f4d9c793a3623c" translate="yes" xml:space="preserve">
          <source>The file's user group has read, write, and execute/search permissions</source>
          <target state="translated">ファイルのユーザグループには、読み取り、書き込み、実行/検索のパーミッションがあります。</target>
        </trans-unit>
        <trans-unit id="508ebbae7fd4ffdc0936fb88a642dca72e49df4d" translate="yes" xml:space="preserve">
          <source>The file's user group has write permission</source>
          <target state="translated">ファイルのユーザーグループには書き込み権限があります。</target>
        </trans-unit>
        <trans-unit id="86f9ab3f6b7423cdeedf82917cbf947c4e1cc032" translate="yes" xml:space="preserve">
          <source>The filename identified by the path.</source>
          <target state="translated">パスで識別されるファイル名。</target>
        </trans-unit>
        <trans-unit id="733546e14fff65a40e6ce4f6ae3b5c334093f0a7" translate="yes" xml:space="preserve">
          <source>The filesystem information (a &lt;a href=&quot;space_info&quot;&gt;space_info&lt;/a&gt; object).</source>
          <target state="translated">ファイルシステム情報（&lt;a href=&quot;space_info&quot;&gt;space_info&lt;/a&gt;オブジェクト）。</target>
        </trans-unit>
        <trans-unit id="043742725d326d5a9ca6387b893c4cbc6e5566e1" translate="yes" xml:space="preserve">
          <source>The filesystem library facilities may be unavailable if a hierarchical file system is not accessible to the implementation, or if it does not provide the necessary capabilities. Some features may not be available if they are not supported by the underlying file system (e.g. the FAT filesystem lacks symbolic links and forbids multiple hardlinks). In those cases, errors must be reported.</source>
          <target state="translated">階層型ファイルシステムが実装にアクセスできない場合や、必要な機能を提供していない場合には、ファイルシステムライブラリの機能が利用できないことがあります。いくつかの機能は、基盤となるファイルシステムがサポートしていない場合には利用できないかもしれません (例えば、FAT ファイルシステムはシンボリックリンクを欠いており、複数のハードリンクを禁止しています)。そのような場合は、エラーを報告しなければなりません。</target>
        </trans-unit>
        <trans-unit id="25654428d5eeb26f93fee804e58fcb777e86a34e" translate="yes" xml:space="preserve">
          <source>The filesystem library was originally developed as &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/filesystem/doc/index.htm&quot;&gt;boost.filesystem&lt;/a&gt;, was published as &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/fs&quot;&gt;the technical specification ISO/IEC TS 18822:2015&lt;/a&gt;, and finally merged to ISO C++ as of C++17. The boost implementation is currently available on more compilers and platforms than the C++17 library.</source>
          <target state="translated">ファイルシステムライブラリは、最初は&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/filesystem/doc/index.htm&quot;&gt;boost.filesystem&lt;/a&gt;として開発され&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/fs&quot;&gt;、技術仕様ISO / IEC TS 18822：2015&lt;/a&gt;として公開され、最後にC ++ 17の時点でISO C ++にマージされました。現在、ブースト実装は、C ++ 17ライブラリよりも多くのコンパイラとプラットフォームで利用できます。</target>
        </trans-unit>
        <trans-unit id="eafb9282f9f742fde3db1064d82179ea3b8c2de9" translate="yes" xml:space="preserve">
          <source>The final value of &lt;code&gt;acc&lt;/code&gt; as described above.</source>
          <target state="translated">上記の &lt;code&gt;acc&lt;/code&gt; の最終値。</target>
        </trans-unit>
        <trans-unit id="5e8e4ef756882f2ecb926b4da6aad7ade4184995" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;count&lt;/code&gt; characters of the transformed string are written to destination, including the terminating null character, and the length of the full transformed string is returned, excluding the terminating null character.</source>
          <target state="translated">変換された文字列の最初の &lt;code&gt;count&lt;/code&gt; 個の文字が終端のnull文字を含めて宛先に書き込まれ、変換された文字列全体の長さが返されます（終了のnull文字を除く）。</target>
        </trans-unit>
        <trans-unit id="4328e7f9e3a9a13684496bc48cded7c2545d55e5" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;sub_match&lt;/code&gt; (index 0) contained in a &lt;code&gt;match_result&lt;/code&gt; always represents the full match within a target sequence made by a regex, and subsequent &lt;code&gt;sub_match&lt;/code&gt;es represent sub-expression matches corresponding in sequence to the left parenthesis delimiting the sub-expression in the regex.</source>
          <target state="translated">最初 &lt;code&gt;sub_match&lt;/code&gt; に含まれる（インデックス0） &lt;code&gt;match_result&lt;/code&gt; は常に正規表現製標的配列内の完全な一致を示し、その後の &lt;code&gt;sub_match&lt;/code&gt; の ESは、正規表現で部分式を区切る左括弧に順次対応するサブ表現の一致を表します。</target>
        </trans-unit>
        <trans-unit id="d51ed3d9e41b13a5f5ede9888191304e6306505d" translate="yes" xml:space="preserve">
          <source>The first bit of the bitset corresponds to the least significant digit of the number and the last bit corresponds to the most significant digit.</source>
          <target state="translated">ビットセットの最初のビットは数字の最下位の桁に対応し、最後のビットは最上位の桁に対応します。</target>
        </trans-unit>
        <trans-unit id="87900467b85ef3761625a54c72c300b0d56a1c5f" translate="yes" xml:space="preserve">
          <source>The first character in</source>
          <target state="translated">の最初の文字が</target>
        </trans-unit>
        <trans-unit id="4655a7d7dda81fdaacd44983c104e6b51909f569" translate="yes" xml:space="preserve">
          <source>The first choice that satisfies the requirements of the respective cast operator is selected, even if it cannot be compiled (see example). If the cast can be interpreted in more than one way as &lt;code&gt;static_cast&lt;/code&gt; followed by a &lt;code&gt;const_cast&lt;/code&gt;, it cannot be compiled.</source>
          <target state="translated">コンパイルできない場合でも、それぞれのキャスト演算子の要件を満たす最初の選択肢が選択されます（例を参照）。キャストが複数の方法で解釈できる場合 &lt;code&gt;static_cast&lt;/code&gt; 続い &lt;code&gt;const_cast&lt;/code&gt; を、それはコンパイルすることはできません。</target>
        </trans-unit>
        <trans-unit id="f54508384b9cd8ec3f1662178af12ad22007b3fc" translate="yes" xml:space="preserve">
          <source>The first declaration of a function must specify all contract conditions (if any) of the function. Subsequent redeclarations must either specify no contract conditions or the same list of contract conditions; no diagnostic is required if corresponding conditions will always evaluate to the same value. If the same function is declared in two different translation units, the list of contract conditions shall be the same; no diagnostic is required.</source>
          <target state="translated">関数の最初の宣言では、その関数のすべての契約条件(もしあれば)を指定しなければなりません。それ以降の再宣言では、契約条件を指定しないか、同じ契約条件のリストを指定しなければならない。同じ関数が2つの異なる翻訳単位で宣言されている場合、契約条件のリストは同じでなければならない。</target>
        </trans-unit>
        <trans-unit id="eb9460452be12a6ef732fc7e63d7c1246d008e71" translate="yes" xml:space="preserve">
          <source>The first declaration of the function must specify this attribute if any declaration specifies it. If a function is declared with &lt;code&gt;[[&lt;strong&gt;noreturn&lt;/strong&gt;]]&lt;/code&gt; in one translation unit, and the same function is declared without &lt;code&gt;[[&lt;strong&gt;noreturn&lt;/strong&gt;]]&lt;/code&gt; in another translation unit, the program is ill-formed; no diagnostic required.</source>
          <target state="translated">関数の最初の宣言では、宣言で指定されている場合はこの属性を指定する必要があります。関数が &lt;code&gt;[[&lt;strong&gt;noreturn&lt;/strong&gt;]]&lt;/code&gt; して1つの変換単位で宣言され、同じ関数が &lt;code&gt;[[&lt;strong&gt;noreturn&lt;/strong&gt;]]&lt;/code&gt; を指定せずに別の変換単位で宣言されている場合、プログラムの形式は正しくありません。診断は必要ありません。</target>
        </trans-unit>
        <trans-unit id="55a8fcb384ef46460f279aa40b2cbfd4005f7ca4" translate="yes" xml:space="preserve">
          <source>The first dimension of zero is acceptable, and the allocation function is called.</source>
          <target state="translated">ゼロの1次元目を許容し、割り当て関数を呼び出す。</target>
        </trans-unit>
        <trans-unit id="b01b52628d903b5a8752c89193d50414f41bb7df" translate="yes" xml:space="preserve">
          <source>The first few Legendre polynomials are:</source>
          <target state="translated">最初のいくつかのレジェンドレの多項式は</target>
        </trans-unit>
        <trans-unit id="667b730cf08aa006a135d605773de9d08b22a256" translate="yes" xml:space="preserve">
          <source>The first few are:</source>
          <target state="translated">最初の数人は</target>
        </trans-unit>
        <trans-unit id="565d7c02d665f0e34f4688a944d25092dc5069f3" translate="yes" xml:space="preserve">
          <source>The first few associated Legendre polynomials are:</source>
          <target state="translated">最初のいくつかの関連するレジェンドレ多項式は</target>
        </trans-unit>
        <trans-unit id="59d42cf5c59ef03d9f21e976e9211c12f3707cda" translate="yes" xml:space="preserve">
          <source>The first hexadecimal digit is not &lt;code&gt;0&lt;/code&gt; if the argument is a normalized floating point value. If the value is &lt;code&gt;​0​&lt;/code&gt;, the exponent is also &lt;code&gt;​0​&lt;/code&gt;.</source>
          <target state="translated">引数が正規化された浮動小数点値の場合、最初の16進数は &lt;code&gt;0&lt;/code&gt; ではありません。値がある場合は &lt;code&gt;​0​&lt;/code&gt; 、指数もある &lt;code&gt;​0​&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5b57b07c6d8c22dee48b2696636cbb5d4d9965f" translate="yes" xml:space="preserve">
          <source>The first mismatching element defines which range is lexicographically</source>
          <target state="translated">最初のミスマッチ要素は、どの範囲が辞書的にどの範囲であるかを定義します。</target>
        </trans-unit>
        <trans-unit id="85aefccf8c9b3c2cd0c976b63196e9f569cb09b9" translate="yes" xml:space="preserve">
          <source>The first of the following that applies:</source>
          <target state="translated">次のいずれかに該当するもののうち、最初のもの。</target>
        </trans-unit>
        <trans-unit id="6410b256258044cf5d55a9090da038f2bcd0e444" translate="yes" xml:space="preserve">
          <source>The first operand of both operators is evaluated even if it is not necessary (e.g. when the second operand names a static member).</source>
          <target state="translated">両方の演算子の最初のオペランドは、不要な場合でも評価されます(2番目のオペランドが静的メンバを指定する場合など)。</target>
        </trans-unit>
        <trans-unit id="df485b1c8b6435c21120b67dccdfb9636e9183ea" translate="yes" xml:space="preserve">
          <source>The first operand of the conditional operator is evaluated and &lt;a href=&quot;implicit_cast&quot;&gt;contextually converted&lt;/a&gt; to &lt;code&gt;bool&lt;/code&gt;. After both the value evaluation and all side effects of the first operand are completed, if the result was &lt;code&gt;true&lt;/code&gt;, the second operand is evaluated. If the result was &lt;code&gt;false&lt;/code&gt;, the third operand is evaluated.</source>
          <target state="translated">条件演算子の最初のオペランドが評価され、&lt;a href=&quot;implicit_cast&quot;&gt;状況に応じ&lt;/a&gt;て &lt;code&gt;bool&lt;/code&gt; に変換されます。最初のオペランドの値の評価とすべての副作用の両方が完了した後、結果が &lt;code&gt;true&lt;/code&gt; の場合、2番目のオペランドが評価されます。結果が &lt;code&gt;false&lt;/code&gt; の場合、3番目のオペランドが評価されます。</target>
        </trans-unit>
        <trans-unit id="44633ae931db3c64d32820feb99f04264ea39dd8" translate="yes" xml:space="preserve">
          <source>The first overload is called when only the format string is passed and there is no parameter expansion.</source>
          <target state="translated">最初のオーバーロードは、フォーマット文字列のみが渡され、パラメータの展開がない場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="afa25bc7ebcd1dfe0877a490b5e734c564901f7c" translate="yes" xml:space="preserve">
          <source>The first version initializes new characters to &lt;code&gt;CharT()&lt;/code&gt;, the second version initializes new characters to &lt;code&gt;ch&lt;/code&gt;.</source>
          <target state="translated">最初のバージョンは新しい文字を &lt;code&gt;CharT()&lt;/code&gt; に初期化し、2番目のバージョンは新しい文字を &lt;code&gt;ch&lt;/code&gt; に初期化します。</target>
        </trans-unit>
        <trans-unit id="95875c290364c0a010e6be578275da15929396a0" translate="yes" xml:space="preserve">
          <source>The first version is an implicit conversion, the second one is explicit.</source>
          <target state="translated">最初のバージョンは暗黙の変換、2番目のバージョンは明示的な変換です。</target>
        </trans-unit>
        <trans-unit id="4aa20401aee62fc4db9195034b5ac4c80d183a7a" translate="yes" xml:space="preserve">
          <source>The first version is equivalent to &lt;code&gt;getline(s, count, widen('\n'))&lt;/code&gt;.</source>
          <target state="translated">最初のバージョンは &lt;code&gt;getline(s, count, widen('\n'))&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="c0a5661e270139bd14512e2492907446f45e122d" translate="yes" xml:space="preserve">
          <source>The first version of the function uses &lt;code&gt;operator&amp;lt;&lt;/code&gt; to compare the elements, the second uses the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">関数の最初のバージョンは &lt;code&gt;operator&amp;lt;&lt;/code&gt; を使用して要素を比較し、2番目のバージョンは指定された比較関数 &lt;code&gt;comp&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ba9ee638dac0b17d1eff10cf111fdc719b994440" translate="yes" xml:space="preserve">
          <source>The first version uses &lt;code&gt;operator&amp;lt;&lt;/code&gt; to compare the elements, the second version uses the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">最初のバージョンは &lt;code&gt;operator&amp;lt;&lt;/code&gt; を使用して要素を比較し、2番目のバージョンは指定された比較関数 &lt;code&gt;comp&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b00a2e1db9ea8753c669bcafceebdf4e5001f0a2" translate="yes" xml:space="preserve">
          <source>The first version uses the associated parameter set, the second version uses &lt;code&gt;params&lt;/code&gt;. The associated parameter set is not modified.</source>
          <target state="translated">最初のバージョンは関連するパラメーターセットを使用し、2番目のバージョンは &lt;code&gt;params&lt;/code&gt; を使用します。関連するパラメータセットは変更されません。</target>
        </trans-unit>
        <trans-unit id="ea51a875efb11ad49d51139f65a4fbab7c5f7404" translate="yes" xml:space="preserve">
          <source>The floating point conversion functions convert infinity to &lt;code&gt;inf&lt;/code&gt; or &lt;code&gt;infinity&lt;/code&gt;. Which one is used is implementation defined.</source>
          <target state="translated">浮動小数点変換関数は、無限大を &lt;code&gt;inf&lt;/code&gt; または &lt;code&gt;infinity&lt;/code&gt; に変換します。どちらを使用するかは実装定義です。</target>
        </trans-unit>
        <trans-unit id="09b597147660929213aeb7af0d263130200afccc" translate="yes" xml:space="preserve">
          <source>The floating-point environment access and modification is only meaningful when &lt;a href=&quot;../preprocessor/impl&quot;&gt;&lt;code&gt; #pragma STDC FENV_ACCESS&lt;/code&gt;&lt;/a&gt; is supported and is set to &lt;code&gt;ON&lt;/code&gt;. Otherwise the implementation is free to assume that floating-point control modes are always the default ones and that floating-point status flags are never tested or modified. In practice, few current compilers, such as HP aCC, Oracle Studio, or IBM XL, support the &lt;code&gt;#pragma&lt;/code&gt; explicitly, but most compilers allow meaningful access to the floating-point environment anyway.</source>
          <target state="translated">浮動小数点環境のアクセスと変更は、&lt;a href=&quot;../preprocessor/impl&quot;&gt; &lt;code&gt; #pragma STDC FENV_ACCESS&lt;/code&gt; &lt;/a&gt;がサポートされ、 &lt;code&gt;ON&lt;/code&gt; に設定されている場合にのみ意味があります。それ以外の場合、実装は、浮動小数点制御モードが常にデフォルトのモードであり、浮動小数点ステータスフラグはテストまたは変更されないことを自由に想定できます。実際には、HP aCC、Oracle Studio、IBM XLなどの現在のコンパイラーは &lt;code&gt;#pragma&lt;/code&gt; を明示的にサポートしていませんが、ほとんどのコンパイラーはとにかく浮動小数点環境への意味のあるアクセスを許可しています。</target>
        </trans-unit>
        <trans-unit id="d88a487f9a81a8c43facb1ab36c14a9792a2394f" translate="yes" xml:space="preserve">
          <source>The floating-point environment is the set of floating-point status flags and control modes supported by the implementation. It is thread-local, each thread inherits the initial state of its floating-point environment from the parent thread. Floating-point operations modify the floating-point status flags to indicate abnormal results or auxiliary information. The state of floating-point control modes affects the outcomes of some floating-point operations.</source>
          <target state="translated">浮動小数点環境は、実装でサポートされている浮動小数点ステータスフラグと制御モードのセットです。スレッドローカルであり、各スレッドは親スレッドから浮動小数点環境の初期状態を継承します。浮動小数点演算は、異常な結果や補助情報を示すために浮動小数点状態フラグを修正します。浮動小数点制御モードの状態は、いくつかの浮動小数点演算の結果に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="b5512f3fb37483c2ac0de738d3e042411a6ef7a1" translate="yes" xml:space="preserve">
          <source>The floating-point exceptions are not related to the C++ exceptions. When a floating-point operation raises a floating-point exception, the status of the floating-point environment changes, which can be tested with &lt;code&gt;&lt;a href=&quot;fenv/fetestexcept&quot;&gt;std::fetestexcept&lt;/a&gt;&lt;/code&gt;, but the execution of a C++ program on most implementations continues uninterrupted.</source>
          <target state="translated">浮動小数点例外は、C ++例外とは関係ありません。浮動小数点演算で浮動小数点例外が発生すると、浮動小数点環境のステータスが変化します。これは &lt;code&gt;&lt;a href=&quot;fenv/fetestexcept&quot;&gt;std::fetestexcept&lt;/a&gt;&lt;/code&gt; でテストできますが、ほとんどの実装でのC ++プログラムの実行は中断されません。</target>
        </trans-unit>
        <trans-unit id="1f30dcca8094f65496cbe7b9cb343a1867b9353f" translate="yes" xml:space="preserve">
          <source>The floating-point remainder of the division operation &lt;code&gt;x/y&lt;/code&gt; calculated by this function is exactly the value &lt;code&gt;x - n*y&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;x/y&lt;/code&gt; with its fractional part truncated.</source>
          <target state="translated">この関数によって計算される除算演算 &lt;code&gt;x/y&lt;/code&gt; の浮動小数点剰余は、正確に値 &lt;code&gt;x - n*y&lt;/code&gt; 。ここで、 &lt;code&gt;n&lt;/code&gt; は小数部が切り捨てられた &lt;code&gt;x/y&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4e3cc83866f6c3e25d14af7dc8655c91815c1a49" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../types#Type_properties&quot;&gt;type properties&lt;/a&gt; all satisfy &lt;strong&gt;UnaryTypeTrait&lt;/strong&gt;.</source>
          <target state="translated">次の&lt;a href=&quot;../types#Type_properties&quot;&gt;タイププロパティは&lt;/a&gt;すべて&lt;strong&gt;UnaryTypeTraitを&lt;/strong&gt;満たし&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c6933bfa65ffad8899ab7c8d9bdf9518aad67471" translate="yes" xml:space="preserve">
          <source>The following Unicode character ranges are allowed in identifiers:</source>
          <target state="translated">識別子では、以下の Unicode 文字範囲が許可されています。</target>
        </trans-unit>
        <trans-unit id="ce299bcc84d68ff1aba24c28b4e197eaad883716" translate="yes" xml:space="preserve">
          <source>The following Unicode character ranges are not allowed to begin an identifier:</source>
          <target state="translated">以下の Unicode 文字範囲は、識別子の先頭に使用できません。</target>
        </trans-unit>
        <trans-unit id="715611d9963a8924bbf3fe5d5a3d4258306a6df4" translate="yes" xml:space="preserve">
          <source>The following additional macro names may be predefined by the implementations.</source>
          <target state="translated">以下の追加マクロ名は、実装によってあらかじめ定義されている場合があります。</target>
        </trans-unit>
        <trans-unit id="e24798a70fec6c195e663fa63cc0f808e58ff2b3" translate="yes" xml:space="preserve">
          <source>The following algorithm is used (adapted from the initialization sequence of the Mersenne Twister generator by &lt;a href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html&quot;&gt;Makoto Matsumoto and Takuji Nishimura&lt;/a&gt;, incorporating the improvements made by &lt;a href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/M062821.pdf&quot;&gt;Mutsuo Saito in 2007&lt;/a&gt;).</source>
          <target state="translated">次のアルゴリズムが使用されます（&lt;a href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html&quot;&gt;松本誠と西村拓司&lt;/a&gt;によるMersenne Twisterジェネレーターの初期化シーケンスから適応され、&lt;a href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/M062821.pdf&quot;&gt;2007年に斎藤睦夫&lt;/a&gt;によって行われた改良が組み込まれています）。</target>
        </trans-unit>
        <trans-unit id="2314e69040372621d3d5adf2b163840d6d43e0d3" translate="yes" xml:space="preserve">
          <source>The following aspects of the preprocessor can be controlled:</source>
          <target state="translated">プリプロセッサの次のような側面を制御することができます。</target>
        </trans-unit>
        <trans-unit id="74706a2fb1fc7153905dea134481e83cf2e40ad9" translate="yes" xml:space="preserve">
          <source>The following auxiliary types are defined:</source>
          <target state="translated">以下の補助タイプが定義されています。</target>
        </trans-unit>
        <trans-unit id="d1942c772e8a48f22736696ffec9a1f67d5b278c" translate="yes" xml:space="preserve">
          <source>The following behavior-changing defect reports were applied retroactively to previously published C++ standards.</source>
          <target state="translated">以下の動作を変更する欠陥レポートが、以前に公開された C++標準に遡って適用されました。</target>
        </trans-unit>
        <trans-unit id="d05b783a3d925110f2634b9ba6635b8a281741d7" translate="yes" xml:space="preserve">
          <source>The following character classes are always recognized, in both narrow and wide character forms, and the classifications returned (with &lt;code&gt;icase == false&lt;/code&gt;) correspond to the matching classifications obtained by the &lt;code&gt;&lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet of the imbued locale, as follows:</source>
          <target state="translated">以下の文字クラスは常に、ナローとワイドの両方の文字形式で認識され、返される分類（ &lt;code&gt;icase == false&lt;/code&gt; ）は、次のように、組み込みロケールの &lt;code&gt;&lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; ファセットによって取得される一致する分類に対応します。</target>
        </trans-unit>
        <trans-unit id="bf5ea285c72c7d87a0b9f0ab566e300cf0d96f2e" translate="yes" xml:space="preserve">
          <source>The following chart contains all 128 ASCII decimal &lt;b&gt;(dec)&lt;/b&gt;, octal &lt;b&gt;(oct)&lt;/b&gt;, hexadecimal &lt;b&gt;(hex)&lt;/b&gt; and character &lt;b&gt;(ch)&lt;/b&gt; codes.</source>
          <target state="translated">次のチャートには、128個のASCII 10進数&lt;b&gt;（dec）&lt;/b&gt;、8進数&lt;b&gt;（oct）&lt;/b&gt;、16進数&lt;b&gt;（hex）&lt;/b&gt;、および文字&lt;b&gt;（ch）の&lt;/b&gt;コードがすべて含まれています。</target>
        </trans-unit>
        <trans-unit id="c747583390a9820664d5aa67d943444234016ea2" translate="yes" xml:space="preserve">
          <source>The following class of the standard library is an error condition enum: &lt;code&gt;&lt;a href=&quot;../errc&quot;&gt;std::errc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">標準ライブラリの次のクラスは、エラー条件列挙型です： &lt;code&gt;&lt;a href=&quot;../errc&quot;&gt;std::errc&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8364204eadf48b5388b1f4de9301dfb37e2a396" translate="yes" xml:space="preserve">
          <source>The following classes of the standard library are an error code enum:</source>
          <target state="translated">標準ライブラリの以下のクラスはエラーコードの列挙です。</target>
        </trans-unit>
        <trans-unit id="8732ed855c5d920731ff99c5c10a7b6ebb60e4fe" translate="yes" xml:space="preserve">
          <source>The following code at first replaces all occurrences of &lt;code&gt;8&lt;/code&gt; with &lt;code&gt;88&lt;/code&gt; in a vector of integers. Then it replaces all values less than &lt;code&gt;5&lt;/code&gt; with 55.</source>
          <target state="translated">次のコードは、最初に、整数のベクトル内のすべての &lt;code&gt;8&lt;/code&gt; を &lt;code&gt;88&lt;/code&gt; に置き換えます。次に、 &lt;code&gt;5&lt;/code&gt; 未満のすべての値を55 に置き換えます。</target>
        </trans-unit>
        <trans-unit id="82f830d3ac2fe040b835d20a0c75f5f9921a6510" translate="yes" xml:space="preserve">
          <source>The following code is an implementation of merge sort.</source>
          <target state="translated">以下のコードはマージソートの実装です。</target>
        </trans-unit>
        <trans-unit id="f2984910c4f4c900817f0230094b1cf9623f27d6" translate="yes" xml:space="preserve">
          <source>The following code moves thread objects (which themselves are not copyable) from one container to another.</source>
          <target state="translated">以下のコードは、スレッドオブジェクト(それ自体はコピーできません)をあるコンテナから別のコンテナに移動させます。</target>
        </trans-unit>
        <trans-unit id="3d1d996516f45090f4b4bb31b8fbcff81de4e254" translate="yes" xml:space="preserve">
          <source>The following code outputs a string while erasing the spaces on the fly.</source>
          <target state="translated">以下のコードは、その場でスペースを消去しながら文字列を出力します。</target>
        </trans-unit>
        <trans-unit id="6681c260a962e645895e071bac822e36d3efd9cf" translate="yes" xml:space="preserve">
          <source>The following code prints all six permutations of the string &quot;abc&quot; in reverse order.</source>
          <target state="translated">次のコードは、文字列 &quot;abc&quot; の 6 つの組み合わせをすべて逆順に表示します。</target>
        </trans-unit>
        <trans-unit id="1e98cb5078430d68744bd2c66d23b0ba09341ee5" translate="yes" xml:space="preserve">
          <source>The following code prints all three permutations of the string &quot;aba&quot;</source>
          <target state="translated">次のコードは、文字列 &quot;ba&quot; の 3 つの組み合わせをすべて表示します。</target>
        </trans-unit>
        <trans-unit id="7d753163245e6f077f885c57e9d563d585a1f2a3" translate="yes" xml:space="preserve">
          <source>The following code randomly shuffles the integers 1..10:</source>
          <target state="translated">以下のコードは整数1...10をランダムにシャッフルします。</target>
        </trans-unit>
        <trans-unit id="96fdf8bcc92fd6fc1514e41f0d3d41b7c151059a" translate="yes" xml:space="preserve">
          <source>The following code redirects &lt;code&gt;stdout&lt;/code&gt; to a file.</source>
          <target state="translated">次のコードは、 &lt;code&gt;stdout&lt;/code&gt; をファイルにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="1bf8e44086be369b39f43315df08ec560ee7a479" translate="yes" xml:space="preserve">
          <source>The following code removes all spaces from a string by shifting all non-space characters to the left and then erasing the extra. This is an example of &lt;a href=&quot;https://en.wikipedia.org/wiki/Erase-remove_idiom&quot;&gt;erase-remove idiom&lt;/a&gt;.</source>
          <target state="translated">次のコードは、スペース以外のすべての文字を左にシフトし、余分な文字を消去することにより、文字列からすべてのスペースを削除します。これは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Erase-remove_idiom&quot;&gt;erase-removeイディオムの&lt;/a&gt;例です。</target>
        </trans-unit>
        <trans-unit id="9be8c7e04c9b3934c9c5ede040503539ce05a2fe" translate="yes" xml:space="preserve">
          <source>The following code searches for any of specified integers in a vector of integers:</source>
          <target state="translated">以下のコードは、整数のベクトルの中から指定された整数のいずれかを検索します。</target>
        </trans-unit>
        <trans-unit id="00e613fa44e8f8f364e737178e8c427efa44a732" translate="yes" xml:space="preserve">
          <source>The following code shows how to specialize the &lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; template for a custom class.</source>
          <target state="translated">次のコードは、カスタムクラスの &lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; テンプレートを特化する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="23ddc096f3f59b5526632dcad35827175dfd931c" translate="yes" xml:space="preserve">
          <source>The following code shows one possible output of a hash function used on a string:</source>
          <target state="translated">以下のコードは、文字列に使用されるハッシュ関数の出力の1つの可能性を示しています。</target>
        </trans-unit>
        <trans-unit id="2bae909517e9a54627909804e4056eeb94460b31" translate="yes" xml:space="preserve">
          <source>The following code shows one possible output of a hash function used on several bitsets:</source>
          <target state="translated">以下のコードは、いくつかのビットセットで使用されるハッシュ関数の出力の1つの可能性を示しています。</target>
        </trans-unit>
        <trans-unit id="61f8a465316f532cbe57d8d9926e5d98dcebc6f3" translate="yes" xml:space="preserve">
          <source>The following code shows several examples (both valid and invalid) of how to construct durations:</source>
          <target state="translated">以下のコードは、持続時間を構築する方法のいくつかの例を示しています(有効な場合と無効な場合があります)。</target>
        </trans-unit>
        <trans-unit id="658a27868658d811802dfd09763d67bfdebbe052" translate="yes" xml:space="preserve">
          <source>The following code shows several usage cases of the</source>
          <target state="translated">以下のコードは</target>
        </trans-unit>
        <trans-unit id="75667b2fdd4a0d1d95649b65bd0a58cfcd96e3fd" translate="yes" xml:space="preserve">
          <source>The following code shows the creation of function objects with a placeholder argument.</source>
          <target state="translated">次のコードは、プレースホルダ引数を持つ関数オブジェクトの作成を示しています。</target>
        </trans-unit>
        <trans-unit id="b44e4d7ca655051be7c514be24da563a5ff68434" translate="yes" xml:space="preserve">
          <source>The following code sorts a vector of integers and copies them into a smaller and a larger vector.</source>
          <target state="translated">以下のコードは、整数のベクトルをソートし、小さいベクトルと大きいベクトルにコピーします。</target>
        </trans-unit>
        <trans-unit id="daf4007146a4b83bcf3ac266d29e581ec3798877" translate="yes" xml:space="preserve">
          <source>The following code sorts an array of integers using &lt;code&gt;qsort()&lt;/code&gt;.</source>
          <target state="translated">次のコードは、 &lt;code&gt;qsort()&lt;/code&gt; を使用して整数の配列をソートします。</target>
        </trans-unit>
        <trans-unit id="8207a8457c0eb26818d87ab569977e36158d049b" translate="yes" xml:space="preserve">
          <source>The following code uses  to assign one &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、ある &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&lt;/code&gt; を別のstd :: dequeに割り当てるために使用します。</target>
        </trans-unit>
        <trans-unit id="c1863f15396f1a247bc85cbf9db816e62ce9021f" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;assign&lt;/code&gt; to add several characters to a &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードでは、 &lt;code&gt;assign&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; いくつかの文字を追加しています。</target>
        </trans-unit>
        <trans-unit id="95d74893928f5f4c485a639c2902038749eb9c54" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;assign&lt;/code&gt; to add several characters to a &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードでは、 &lt;code&gt;assign&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; いくつかの文字を追加しています。</target>
        </trans-unit>
        <trans-unit id="aab485e9100b3af1ee0f47fb24b070b518f62792" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;assign&lt;/code&gt; to add several characters to a &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードでは、 &lt;code&gt;assign&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; いくつかの文字を追加しています。</target>
        </trans-unit>
        <trans-unit id="ab47a7e2c6f0556c41e8da5e3e196e2efc53d9ef" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;assign&lt;/code&gt; to add several characters to a &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードでは、 &lt;code&gt;assign&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; いくつかの文字を追加しています。</target>
        </trans-unit>
        <trans-unit id="f62b42a1746d9980942772d9163dc2de66ef406c" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;back&lt;/code&gt; to display the last element of a &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; &amp;lt;char&amp;gt;の最後の要素を表示するために &lt;code&gt;back&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="9cccf7b603d69142f3f75f0954199fe1de7e3ac2" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;back&lt;/code&gt; to display the last element of a &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;back&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; の最後の要素を表示します。</target>
        </trans-unit>
        <trans-unit id="f205cab6f9ab5cee8032e77137686863714505e7" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;back&lt;/code&gt; to display the last element of a &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;back&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; の最後の要素を表示します。</target>
        </trans-unit>
        <trans-unit id="6845338e9d3aecd8c4ee707b50d5f94ca1fb1f7c" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;back&lt;/code&gt; to display the last element of a &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;back&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; の最後の要素を表示します。</target>
        </trans-unit>
        <trans-unit id="181361b9a1f17c4f72ca736bc8ef522c9e95ed79" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;emplace_back&lt;/code&gt; to append an object of type &lt;code&gt;President&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&lt;/code&gt;. It demonstrates how &lt;code&gt;emplace_back&lt;/code&gt; forwards parameters to the &lt;code&gt;President&lt;/code&gt; constructor and shows how using &lt;code&gt;emplace_back&lt;/code&gt; avoids the extra copy or move operation required when using &lt;code&gt;push_back&lt;/code&gt;.</source>
          <target state="translated">次のコードの使用は &lt;code&gt;emplace_back&lt;/code&gt; 型のオブジェクト追加する &lt;code&gt;President&lt;/code&gt; する &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&lt;/code&gt; 。これは、方法を示し &lt;code&gt;emplace_back&lt;/code&gt; の転送用にパラメータ &lt;code&gt;President&lt;/code&gt; 方法を使用して、コンストラクタやショー &lt;code&gt;emplace_back&lt;/code&gt; を使用している場合、余分なコピーや移動操作が必要な回避 &lt;code&gt;push_back&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="560056d34fecac1f14913fb6ef39172e1f3a8404" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;emplace_back&lt;/code&gt; to append an object of type &lt;code&gt;President&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt;. It demonstrates how &lt;code&gt;emplace_back&lt;/code&gt; forwards parameters to the &lt;code&gt;President&lt;/code&gt; constructor and shows how using &lt;code&gt;emplace_back&lt;/code&gt; avoids the extra copy or move operation required when using &lt;code&gt;push_back&lt;/code&gt;.</source>
          <target state="translated">次のコードの使用は &lt;code&gt;emplace_back&lt;/code&gt; 型のオブジェクト追加する &lt;code&gt;President&lt;/code&gt; する &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt; 。これは、方法を示し &lt;code&gt;emplace_back&lt;/code&gt; のに転送パラメータを &lt;code&gt;President&lt;/code&gt; 使用方法コンストラクタやショー &lt;code&gt;emplace_back&lt;/code&gt; が使用している場合、余分なコピーや移動操作が必要な回避 &lt;code&gt;push_back&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4425e3c307c08594ad5519abfe04eb3fb4befe7" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;emplace_back&lt;/code&gt; to append an object of type &lt;code&gt;President&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt;. It demonstrates how &lt;code&gt;emplace_back&lt;/code&gt; forwards parameters to the &lt;code&gt;President&lt;/code&gt; constructor and shows how using &lt;code&gt;emplace_back&lt;/code&gt; avoids the extra copy or move operation required when using &lt;code&gt;push_back&lt;/code&gt;.</source>
          <target state="translated">次のコードの使用は &lt;code&gt;emplace_back&lt;/code&gt; 型のオブジェクト追加する &lt;code&gt;President&lt;/code&gt; する &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; 。これは、方法を示し &lt;code&gt;emplace_back&lt;/code&gt; のに転送パラメータを &lt;code&gt;President&lt;/code&gt; 使用方法コンストラクタやショー &lt;code&gt;emplace_back&lt;/code&gt; が使用している場合、余分なコピーや移動操作が必要な回避 &lt;code&gt;push_back&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42ffd2d1ac0d4cdbb96f92d96f0af6eceac098a6" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt; に要素が含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="78b999536bab5616600c00c9f174f27cb2f50623" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; に要素が含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="59facc6b748c2accf7feefc7cae0fe5350c31737" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードでは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; かどうかを確認しています &amp;lt;int&amp;gt;に要素が含まれているかます。</target>
        </trans-unit>
        <trans-unit id="294f922f24787de54a6841b0efc9bdf721c127dd" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードでは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; &amp;lt;int&amp;gt;かどうかを確認していますに要素が含まれているかます。</target>
        </trans-unit>
        <trans-unit id="9834b56eb9cb58a559e764fc7ffc0967e672148e" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../map&quot;&gt;std::map&lt;/a&gt;&amp;lt;int, int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../map&quot;&gt;std::map&lt;/a&gt;&amp;lt;int, int&amp;gt;&lt;/code&gt; &amp;lt;int、int&amp;gt;かどうかを確認しますに要素が含まれているかます。</target>
        </trans-unit>
        <trans-unit id="32e8f5c6c4b354a661cc73535a2faecf185c9a07" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../multimap&quot;&gt;std::multimap&lt;/a&gt;&amp;lt;int, int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../multimap&quot;&gt;std::multimap&lt;/a&gt;&amp;lt;int, int&amp;gt;&lt;/code&gt; &amp;lt;int、int&amp;gt;かどうかを確認しますに要素が含まれているかます。</target>
        </trans-unit>
        <trans-unit id="d66087b7ce968da2dce5b4a9be6a4e7989f061d4" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../multiset&quot;&gt;std::multiset&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../multiset&quot;&gt;std::multiset&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; &amp;lt;int&amp;gt;かどうかを確認しますに要素が含まれているかます。</target>
        </trans-unit>
        <trans-unit id="e5970161de20c21ad18db82f592f9531ae65f88f" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../set&quot;&gt;std::set&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../set&quot;&gt;std::set&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; に要素が含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="ead28da2630b4b786759d7d27b9535ed0faee763" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&amp;lt;int,int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&amp;lt;int,int&amp;gt;&lt;/code&gt; に要素が含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="4bb497a58f9b0aa09af57ea73a4d4104f4c40c62" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&amp;lt;int,int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードでは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&amp;lt;int,int&amp;gt;&lt;/code&gt; に要素が含まれているかどうかを確認しています。</target>
        </trans-unit>
        <trans-unit id="4c701030fc833aaa761e308e0a3b2858930654aa" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; に要素が含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="b5b62fd05d0981de0d7ddc30e16bfe35ea915307" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;empty&lt;/code&gt; to check if a &lt;code&gt;&lt;a href=&quot;../unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; contains any elements:</source>
          <target state="translated">次のコードは、 &lt;code&gt;empty&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; に要素が含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="7f2775ed77c855a7770c1ec51b1677400d10b019" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;equal()&lt;/code&gt; to test if a string is a palindrome.</source>
          <target state="translated">次のコードは &lt;code&gt;equal()&lt;/code&gt; を使用していますを、文字列が回文かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="fea7ab922e2504722617e162b2f67cfa179108d6" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;fill()&lt;/code&gt; to set all of the elements of a vector of integers to -1:</source>
          <target state="translated">次のコードは、 &lt;code&gt;fill()&lt;/code&gt; を使用して、整数のベクトルのすべての要素を-1に設定します。</target>
        </trans-unit>
        <trans-unit id="c6a0b1c51a1296d332287bfef1bfd6aada8a81aa" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;fill_n()&lt;/code&gt; to assign -1 to the first half of a vector of integers:</source>
          <target state="translated">次のコードは、 &lt;code&gt;fill_n()&lt;/code&gt; を使用して、整数のベクトルの前半に-1を割り当てます。</target>
        </trans-unit>
        <trans-unit id="ba3ba8d8b2c1786295ffc6e4eb81877ea4072154" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;find_end()&lt;/code&gt; to search for two different sequences of numbers.</source>
          <target state="translated">次のコードは、 &lt;code&gt;find_end()&lt;/code&gt; を使用して、2つの異なる数列を検索します。</target>
        </trans-unit>
        <trans-unit id="3f4de8e6160f6bc5ca86d1c19be35c2833a64af5" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;front&lt;/code&gt; to display the first element of a &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&amp;lt;char, 6&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;front&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&amp;lt;char, 6&amp;gt;&lt;/code&gt; の最初の要素を表示します。</target>
        </trans-unit>
        <trans-unit id="82e4c5cd2f628e39e7cb8f9caf2d4b2dace79288" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;front&lt;/code&gt; to display the first element of a &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;front&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; の最初の要素を表示します。</target>
        </trans-unit>
        <trans-unit id="3bd292b4d7a1c8b57da39f8790a4ed7a5cf20de6" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;front&lt;/code&gt; to display the first element of a &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;front&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; &amp;lt;char&amp;gt;の最初の要素を表示します。</target>
        </trans-unit>
        <trans-unit id="a3c90736d0346e9d8a75c6171b1a5fe1b4f51a2f" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;front&lt;/code&gt; to display the first element of a &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;front&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; の最初の要素を表示します。</target>
        </trans-unit>
        <trans-unit id="a09b7805d327d7fc1ba23779c627f69766f10185" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;front&lt;/code&gt; to display the first element of a &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;front&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; の最初の要素を表示します。</target>
        </trans-unit>
        <trans-unit id="5961fd51065a540e74bed600b8b1a3dcf70175ce" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して、ある &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt; を別のstd :: forward_listに割り当てます。</target>
        </trans-unit>
        <trans-unit id="53bde90bfe9c57282e5b87b39fc52aecdfb30b41" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して、ある &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt; を別のstd :: listに割り当てます。</target>
        </trans-unit>
        <trans-unit id="6ecfed2f177677006eecac7d76dc0ccfb909392d" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して、ある &lt;code&gt;&lt;a href=&quot;../map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt; を別のstd :: mapに割り当てます。</target>
        </trans-unit>
        <trans-unit id="67523d3393b7310a0aa9cf3cffcd550ccc4b84b4" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../multimap&quot;&gt;std::multimap&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して1つの &lt;code&gt;&lt;a href=&quot;../multimap&quot;&gt;std::multimap&lt;/a&gt;&lt;/code&gt; を割り当てますを別のにます。</target>
        </trans-unit>
        <trans-unit id="902214c8855d223d0e77f4fe9591426f8944e7d1" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../multiset&quot;&gt;std::multiset&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して、ある &lt;code&gt;&lt;a href=&quot;../multiset&quot;&gt;std::multiset&lt;/a&gt;&lt;/code&gt; を別のstd :: multisetに割り当てます。</target>
        </trans-unit>
        <trans-unit id="6f51f792b41f543ab45cee3397a81737d84a525a" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して、ある &lt;code&gt;&lt;a href=&quot;../set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt; を別のstd :: setに割り当てます。</target>
        </trans-unit>
        <trans-unit id="385dce21a913489614b538e5e7c84c1f9be175a3" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して、ある &lt;code&gt;&lt;a href=&quot;../unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt; を別のstd :: unordered_mapに割り当てます。</target>
        </trans-unit>
        <trans-unit id="99cdd8e5c063b51f08dfcfd0a38ebfab272716c1" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して、ある &lt;code&gt;&lt;a href=&quot;../unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt; を別のstd :: unordered_multimapに割り当てます。</target>
        </trans-unit>
        <trans-unit id="0149eb1d951922170f2c79dabe74381632a6cee0" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して、ある &lt;code&gt;&lt;a href=&quot;../unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt; を別のstd :: unordered_multisetに割り当てます。</target>
        </trans-unit>
        <trans-unit id="15fc8c2fb14c7949092eae56b799189af05c13de" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して1つの &lt;code&gt;&lt;a href=&quot;../unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt; を割り当てますを別のにます。</target>
        </trans-unit>
        <trans-unit id="a40867c60315bc089e9e83e842ecb1acbe656608" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator=&lt;/code&gt; to assign one &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; to another:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator=&lt;/code&gt; を使用して、ある &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; を別のstd :: vectorに割り当てます。</target>
        </trans-unit>
        <trans-unit id="66dd3415186bd6ecc44b88aeada97fe8a4f6f307" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator[]&lt;/code&gt; to read from and write to a &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator[]&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; 読み取りと書き込みを行います。</target>
        </trans-unit>
        <trans-unit id="2790a3c9be04ca78b6550876913d5ef5ccbde5ef" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator[]&lt;/code&gt; to read from and write to a &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator[]&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; 読み取りと書き込みを行います。</target>
        </trans-unit>
        <trans-unit id="639c4fe277604645d83fc40a5acf3052f4f02544" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;operator[]&lt;/code&gt; to read from and write to a &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;operator[]&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; 読み取りと書き込みを行います。</target>
        </trans-unit>
        <trans-unit id="f48eaa9496b991bd3d0eb50c0836a412f6fe8933" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt; 要素数を表示します。</target>
        </trans-unit>
        <trans-unit id="5558ee4a0bde449bbea05f3ff4c4921ae478d58d" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&lt;/code&gt; 要素数を表示します。</target>
        </trans-unit>
        <trans-unit id="ab3123f588ec261d38605e05eb8a58184a794dc2" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt; 要素数を表示します。</target>
        </trans-unit>
        <trans-unit id="9c9cd102e7dd740e049c929043487fbf656d9927" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt; 要素数を表示します。</target>
        </trans-unit>
        <trans-unit id="4923520809b85ccd4900db40956492eb829ff259" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../multimap&quot;&gt;std::multimap&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../multimap&quot;&gt;std::multimap&lt;/a&gt;&lt;/code&gt; 要素数を表示します。</target>
        </trans-unit>
        <trans-unit id="367093cd12e46fd60d907dd8481b0dff622fb306" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../multiset&quot;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../multiset&quot;&gt;std::multiset&lt;/a&gt;&lt;/code&gt; 内の要素の数を表示します。</target>
        </trans-unit>
        <trans-unit id="9fdc7fc1496d0cd337e08b671bd8ed8e02598dd4" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../set&quot;&gt;std::set&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../set&quot;&gt;std::set&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; の要素数を表示します。</target>
        </trans-unit>
        <trans-unit id="4f74be33ecfdae4375ef0773c434b5c706ea378e" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt; 要素数を表示します。</target>
        </trans-unit>
        <trans-unit id="fb705db53382014a2ea445c532a9ebee11475d22" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt; 内の要素の数を表示します。</target>
        </trans-unit>
        <trans-unit id="0d65c5a16544be53346eefb8fd2d37698a127969" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; の要素数を表示します。</target>
        </trans-unit>
        <trans-unit id="548853a7a6bceff6cb33b2b7379b7d3917031bee" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; の要素数を表示します。</target>
        </trans-unit>
        <trans-unit id="4104db0b3e3262de82ab7e2b4688216bdb5503fa" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;size&lt;/code&gt; to display the number of elements in a &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;size&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt; &amp;lt;int&amp;gt;の要素数を表示します。。</target>
        </trans-unit>
        <trans-unit id="1cc0cc8f9e7d02f4ffe69f8908f54fbe730ba21f" translate="yes" xml:space="preserve">
          <source>The following code uses copy to both copy the contents of one vector to another and to display the resulting vector:</source>
          <target state="translated">以下のコードでは、あるベクトルの内容を別のベクトルにコピーし、その結果のベクトルを表示するために copy を使用しています。</target>
        </trans-unit>
        <trans-unit id="68bb58bde9d239bfa5b3f88d2d2c7df862b599f9" translate="yes" xml:space="preserve">
          <source>The following code uses transform to convert a string in place to uppercase using the toupper function and then transforms each char to its ordinal value:</source>
          <target state="translated">次のコードは、トランスフォームを使用して、toupper関数を使用してプレース内の文字列を大文字に変換し、各文字をその序数値に変換しています。</target>
        </trans-unit>
        <trans-unit id="a3c25657b5cd7f5592c99855d3ec7267e6fe484c" translate="yes" xml:space="preserve">
          <source>The following constants are also defined:</source>
          <target state="translated">また、以下の定数も定義されています。</target>
        </trans-unit>
        <trans-unit id="c4925dbfe1aa827f2041e1033ebe0a6005a26692" translate="yes" xml:space="preserve">
          <source>The following constants denoting individual bits are defined by the standard library:</source>
          <target state="translated">個々のビットを表す以下の定数は、標準ライブラリで定義されています。</target>
        </trans-unit>
        <trans-unit id="10bb2a7b9ba858f9e871c57ccba765a9f92f8560" translate="yes" xml:space="preserve">
          <source>The following contexts require a</source>
          <target state="translated">以下のコンテキストでは</target>
        </trans-unit>
        <trans-unit id="009d4588e5ae326cecee174c71b20e5192d349ff" translate="yes" xml:space="preserve">
          <source>The following contexts require an</source>
          <target state="translated">以下のコンテキストでは</target>
        </trans-unit>
        <trans-unit id="a8be823b41f88b6bb5fe26fd40c903501eb8b33d" translate="yes" xml:space="preserve">
          <source>The following conversion specifiers are available:</source>
          <target state="translated">以下の変換指定子が利用できます。</target>
        </trans-unit>
        <trans-unit id="5c003d2f36ae5692bd45f365d1d7025783a9c1c9" translate="yes" xml:space="preserve">
          <source>The following copy prints a vector, replacing all values over 5 with 99 on the fly.</source>
          <target state="translated">以下のコピーは、5以上のすべての値を99に置き換えてベクトルを印刷します。</target>
        </trans-unit>
        <trans-unit id="7ac588dfc54923ad58981e4ced20fbb675e510c8" translate="yes" xml:space="preserve">
          <source>The following declarations also declare exactly the same function.</source>
          <target state="translated">以下の宣言も全く同じ関数を宣言しています。</target>
        </trans-unit>
        <trans-unit id="0e1e782882f70b3f7f134569ed77e2b2acd81be7" translate="yes" xml:space="preserve">
          <source>The following entities are not objects: value, reference, function, enumerator, type, non-static class member, bit-field, template, class or function template specialization, namespace, parameter pack, and &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">次のエンティティはオブジェクトではありません：値、参照、関数、列挙子、型、非静的クラスメンバー、ビットフィールド、テンプレート、クラスまたは関数テンプレートの特殊化、名前空間、パラメーターパック、および &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e39d176344c3e85e78002c68d7e8e5b51e271c28" translate="yes" xml:space="preserve">
          <source>The following enumerators are also defined:</source>
          <target state="translated">また、以下の列挙子も定義されています。</target>
        </trans-unit>
        <trans-unit id="9d7f6bc390ae3470d1ec7b1d1db9a94c08fbbca3" translate="yes" xml:space="preserve">
          <source>The following escape sequences are available (extra escape sequences may be provided with implementation-defined semantics):</source>
          <target state="translated">以下のエスケープシーケンスが利用可能です(追加のエスケープシーケンスは、実装定義のセマンティクスで提供される場合があります)。</target>
        </trans-unit>
        <trans-unit id="a3edf11648f50f67dc38400fbf749312a8a6023f" translate="yes" xml:space="preserve">
          <source>The following example applies &lt;code&gt;&lt;a href=&quot;random_shuffle&quot;&gt;std::shuffle&lt;/a&gt;&lt;/code&gt; to a vector of &lt;code&gt;&lt;a href=&quot;../container/list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt; iterators since &lt;code&gt;&lt;a href=&quot;random_shuffle&quot;&gt;std::shuffle&lt;/a&gt;&lt;/code&gt; cannot be applied to a &lt;code&gt;&lt;a href=&quot;../container/list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt; directly. &lt;code&gt;std::iota&lt;/code&gt; is used to populate both containers.</source>
          <target state="translated">次の例では、 &lt;code&gt;&lt;a href=&quot;random_shuffle&quot;&gt;std::shuffle&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../container/list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt; 直接適用できないため、 &lt;code&gt;&lt;a href=&quot;random_shuffle&quot;&gt;std::shuffle&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../container/list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt; イテレータのベクトルに適用します。 &lt;code&gt;std::iota&lt;/code&gt; を使用して、両方のコンテナーを設定します。</target>
        </trans-unit>
        <trans-unit id="98227c78e55a55bae11e8faaf05e67543f156c99" translate="yes" xml:space="preserve">
          <source>The following example calculates the probability that a normal variate is on the interval (x1, x2).</source>
          <target state="translated">以下の例では、正規変量が区間(x1,x2)上にある確率を計算しています。</target>
        </trans-unit>
        <trans-unit id="666096a94f3ce76da429785aaa9438c9e1071127" translate="yes" xml:space="preserve">
          <source>The following example changes the string representations of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;false&lt;/code&gt; の文字列表現を変更します。</target>
        </trans-unit>
        <trans-unit id="50c6037577b844c05a202750d8ccfe295c1ce7a2" translate="yes" xml:space="preserve">
          <source>The following example demonstrated retrieval of messages: on a typical GNU/Linux system it reads from &lt;code&gt;/usr/share/locale/de/LC_MESSAGES/sed.mo&lt;/code&gt;.</source>
          <target state="translated">次の例は、メッセージの取得を示して &lt;code&gt;/usr/share/locale/de/LC_MESSAGES/sed.mo&lt;/code&gt; 。典型的なGNU / Linuxシステムでは、/usr/share/locale/de/LC_MESSAGES/ sed.moから読み取ります。</target>
        </trans-unit>
        <trans-unit id="ff5128c9a45dbdfe7028be5b5809eefa99fbcd68" translate="yes" xml:space="preserve">
          <source>The following example demonstrates consuming the UTF-8 BOM.</source>
          <target state="translated">以下の例では、UTF-8 BOM を消費しています。</target>
        </trans-unit>
        <trans-unit id="e84fe7b382f35acf36a0571545a93eb16f150929" translate="yes" xml:space="preserve">
          <source>The following example demonstrates decoding of UTF-16le file on a system with 32-bit &lt;code&gt;wchar_t&lt;/code&gt;. On a system with 16-bit &lt;code&gt;wchar_t&lt;/code&gt;, decoding of the third character will fail because &lt;code&gt;std::codecvt_utf16&amp;lt;char16_t&amp;gt;&lt;/code&gt; produces UCS2, not UTF-16.</source>
          <target state="translated">次の例は、32ビットの &lt;code&gt;wchar_t&lt;/code&gt; を使用するシステムでのUTF-16leファイルのデコードを示しています。16ビットの &lt;code&gt;wchar_t&lt;/code&gt; を備えたシステムでは、 &lt;code&gt;std::codecvt_utf16&amp;lt;char16_t&amp;gt;&lt;/code&gt; がUTF-16ではなくUCS2を生成するため、3番目の文字のデコードは失敗します。</target>
        </trans-unit>
        <trans-unit id="4e02d0927ca40ac3f20330707ae5d9dc6a060343" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use &lt;code&gt;destroy&lt;/code&gt; to destroy a contiguous sequence of elements.</source>
          <target state="translated">次の例は、destroy を使用 &lt;code&gt;destroy&lt;/code&gt; て、連続する要素のシーケンスを破棄する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a18cbf051d93d448e8ae3290a9d188e70f5dbde2" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use &lt;code&gt;destroy_at&lt;/code&gt; to destroy a contiguous sequence of elements.</source>
          <target state="translated">次の例は、 &lt;code&gt;destroy_at&lt;/code&gt; を使用して、連続する要素のシーケンスを破棄する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="6b7aaae085caf053cea47938c13ce2e0d54c864d" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use &lt;code&gt;destroy_n&lt;/code&gt; to destroy a contiguous sequence of elements.</source>
          <target state="translated">次の例は、 &lt;code&gt;destroy_n&lt;/code&gt; を使用して、連続する要素のシーケンスを破棄する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="9c3768a533bb5638c1a2aba447121ead46ba7e0c" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use &lt;code&gt;getline&lt;/code&gt; function to read user's input and how to process file line by line.</source>
          <target state="translated">次の例は、 &lt;code&gt;getline&lt;/code&gt; 関数を使用してユーザーの入力を読み取る方法と、ファイルを1行ずつ処理する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4ca2bda89b867388cbda9ab2651ddb4a53f60b3b" translate="yes" xml:space="preserve">
          <source>The following example demonstrates katakana to hiragana character mapping.</source>
          <target state="translated">以下の例では、カタカナとひらがなの文字マッピングを実演しています。</target>
        </trans-unit>
        <trans-unit id="b4511608a2770fc85ea2f394bd1d3db73c33a057" translate="yes" xml:space="preserve">
          <source>The following example demonstrates modification of a ctype other than ctype&amp;lt;char&amp;gt; to tokenize a CSV file.</source>
          <target state="translated">次の例は、CSVファイルをトークン化するためのctype &amp;lt;char&amp;gt;以外のctypeの変更を示しています。</target>
        </trans-unit>
        <trans-unit id="078c0b9a910cb8db45f22ea2c4a03201e8aa21ba" translate="yes" xml:space="preserve">
          <source>The following example demonstrates modification of ctype&amp;lt;char&amp;gt; to tokenize comma-separated values.</source>
          <target state="translated">次の例は、ctype &amp;lt;char&amp;gt;を変更して、コンマ区切り値をトークン化する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="8b17a6f2b425709208fee4f7a7f2a985fd938dea" translate="yes" xml:space="preserve">
          <source>The following example demonstrates several usage cases of the &lt;code&gt;try-catch&lt;/code&gt; block.</source>
          <target state="translated">次の例は、 &lt;code&gt;try-catch&lt;/code&gt; ブロックのいくつかの使用例を示しています。</target>
        </trans-unit>
        <trans-unit id="141f9a87f972b72d51d5a0ba28295a6e60590f32" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the difference between UCS2/UTF-8 and UTF-16/UTF-8 conversions: the third character in the string is not a valid UCS2 character.</source>
          <target state="translated">以下の例は、 UCS2/UTF-8 と UTF-16/UTF-8 の変換の違いを示しています:文字列内の 3 番目のキ ャ ラ ク タ は有効な UCS2 キ ャ ラ ク タ ではあ り ません。</target>
        </trans-unit>
        <trans-unit id="0e740ba5761f5d0fc3a5448029e3ada9277de668" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of several alternative tokens.</source>
          <target state="translated">次の例は、いくつかの代替トークンの使用を示しています。</target>
        </trans-unit>
        <trans-unit id="525e8da92611859f7cb6e873db8315e5c79ce00d" translate="yes" xml:space="preserve">
          <source>The following example demonstrates transitive release-acquire ordering across three threads.</source>
          <target state="translated">次の例では、3 つのスレッドにまたがって遷移的な解放-取得順序を示しています。</target>
        </trans-unit>
        <trans-unit id="27a99f499965d3b5b1abd95cc23d4ad4577e382c" translate="yes" xml:space="preserve">
          <source>The following example finds an integer in a vector of integers.</source>
          <target state="translated">次の例では、整数のベクトルから整数を見つけます。</target>
        </trans-unit>
        <trans-unit id="c6952fc0a4da511b0019b46a13739b85c1e7dc7a" translate="yes" xml:space="preserve">
          <source>The following example iterates over a vector (which has random-access iterators) in reverse.</source>
          <target state="translated">以下の例では,ベクトル(ランダムアクセスイテレータを持つ)を逆に反復処理しています.</target>
        </trans-unit>
        <trans-unit id="c0d39d8f73419ea04197a0669261855783ae02e7" translate="yes" xml:space="preserve">
          <source>The following example shows a general-purpose &lt;code&gt;reverse()&lt;/code&gt; implementation for bidirectional iterators.</source>
          <target state="translated">次の例は、双方向反復子の汎用的な &lt;code&gt;reverse()&lt;/code&gt; 実装を示しています。</target>
        </trans-unit>
        <trans-unit id="4ac23324e2b3e1f0d4e6b0af6616bc5580fd14c5" translate="yes" xml:space="preserve">
          <source>The following example shows how &lt;code&gt;&lt;a href=&quot;../function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; can passed to other functions by value. Also, it shows how &lt;code&gt;&lt;a href=&quot;../function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; can store lambdas.</source>
          <target state="translated">次の例は、 &lt;code&gt;&lt;a href=&quot;../function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; を値によって他の関数に渡す方法を示しています。また、 &lt;code&gt;&lt;a href=&quot;../function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; がラムダを格納する方法も示しています。</target>
        </trans-unit>
        <trans-unit id="4b3f122aad33f6a6f2d52154068219af931dc3b5" translate="yes" xml:space="preserve">
          <source>The following example shows how to construct a minimal custom facet.</source>
          <target state="translated">以下の例では、最小限のカスタムファセットを構築する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c489729f6cc12480a1e704d11ab55d5a5e4ff36c" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement a &lt;a href=&quot;../named_req/inputiterator&quot;&gt;input iterator&lt;/a&gt; by inheriting from std::iterator.</source>
          <target state="translated">次の例は、std :: iteratorから継承して&lt;a href=&quot;../named_req/inputiterator&quot;&gt;入力イテレーター&lt;/a&gt;を実装する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="00fbc8b63043ae05ad9ff507b2e2e1e05b1fb9f8" translate="yes" xml:space="preserve">
          <source>The following example shows several different ways to print the same result.</source>
          <target state="translated">以下の例では、同じ結果を印刷するためのいくつかの異なる方法を示しています。</target>
        </trans-unit>
        <trans-unit id="db4258721a69c60754a36e4c48d778d9b956ad0e" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;ignore&lt;/code&gt; to skip over non-numeric input:</source>
          <target state="translated">次の例では、 &lt;code&gt;ignore&lt;/code&gt; を使用して非数値入力をスキップしています。</target>
        </trans-unit>
        <trans-unit id="48f63f57617ec5b257434de8bf0aa890cfb1d5c0" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;lock&lt;/code&gt; to re-acquire a mutex that was unlocked.</source>
          <target state="translated">次の例では、 &lt;code&gt;lock&lt;/code&gt; を使用して、ロック解除されたミューテックスを再取得します。</target>
        </trans-unit>
        <trans-unit id="6df31ab75eb69c1e85b8009a04ecbf6f2d0fe62d" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;std::lock&lt;/code&gt; to lock pairs of mutexes without deadlock.</source>
          <target state="translated">次の例では、 &lt;code&gt;std::lock&lt;/code&gt; を使用して、デッドロックなしでミューテックスのペアをロックします。</target>
        </trans-unit>
        <trans-unit id="802383492a3e9cbc679f149ac14f49c1c655dba8" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;std::scoped_lock&lt;/code&gt; to lock pairs of mutexes without deadlock and is RAII-style.</source>
          <target state="translated">次の例では、 &lt;code&gt;std::scoped_lock&lt;/code&gt; を使用して、デッドロックなしでミューテックスのペアをロックします。これはRAIIスタイルです。</target>
        </trans-unit>
        <trans-unit id="f0f63a8f264e006ef2327ae019fc8c811058c3ed" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;std::try_lock&lt;/code&gt; to periodically tally and reset counters running in separate threads.</source>
          <target state="translated">次の例では、 &lt;code&gt;std::try_lock&lt;/code&gt; を使用して、別々のスレッドで実行されているカウンターを定期的に集計してリセットします。</target>
        </trans-unit>
        <trans-unit id="eff076fbccafc4a939e632f3fce93d003c8fe78d" translate="yes" xml:space="preserve">
          <source>The following example uses a &lt;a href=&quot;../language/lambda&quot;&gt;lambda function&lt;/a&gt; to increment all of the elements of a vector and then uses an overloaded &lt;code&gt;operator()&lt;/code&gt; in a functor to compute their sum. Note that to compute the sum, it is recommended to use the dedicated algorithm &lt;code&gt;&lt;a href=&quot;accumulate&quot;&gt;std::accumulate&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次の例では、&lt;a href=&quot;../language/lambda&quot;&gt;ラムダ関数&lt;/a&gt;を使用してベクトルのすべての要素をインクリメントし、ファンクターでオーバーロードされた &lt;code&gt;operator()&lt;/code&gt; を使用してそれらの合計を計算します。合計を計算するには、専用のアルゴリズム &lt;code&gt;&lt;a href=&quot;accumulate&quot;&gt;std::accumulate&lt;/a&gt;&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c75ec5cddf22740a53ef00331402bec8899fda7a" translate="yes" xml:space="preserve">
          <source>The following examples reads a UTF-8 file using a locale which implements UTF-8 conversion in codecvt&amp;lt;wchar_t, char, mbstate_t&amp;gt; and converts a UTF-8 string to UTF-16 using one of the standard specializations of std::codecvt.</source>
          <target state="translated">次の例では、codecvt &amp;lt;wchar_t、char、mbstate_t&amp;gt;でUTF-8変換を実装するロケールを使用してUTF-8ファイルを読み取り、std :: codecvtの標準的な特殊化の1つを使用してUTF-8文字列をUTF-16に変換します。</target>
        </trans-unit>
        <trans-unit id="c9f2c0d0c86490d721317d3b74a3d0462b3f18c0" translate="yes" xml:space="preserve">
          <source>The following expression errors are SFINAE errors.</source>
          <target state="translated">以下の表現エラーは SFINAE エラーです。</target>
        </trans-unit>
        <trans-unit id="debd1fa4309eddd6e405115f2b5cff736db118cc" translate="yes" xml:space="preserve">
          <source>The following expressions (including conversions to the destination type) are</source>
          <target state="translated">以下の表現(宛先型への変換を含む)は</target>
        </trans-unit>
        <trans-unit id="4b29cd54e8090d2fef4b2a1c4b62fa012ef80e95" translate="yes" xml:space="preserve">
          <source>The following expressions are</source>
          <target state="translated">以下のような表現があります。</target>
        </trans-unit>
        <trans-unit id="e8528d23bc1b32037866d01f10a31c7d73bc36bb" translate="yes" xml:space="preserve">
          <source>The following expressions are type-dependent.</source>
          <target state="translated">以下の表現は型に依存します。</target>
        </trans-unit>
        <trans-unit id="db57d5666845e6ff4a0f3b55b955fc5079d79e08" translate="yes" xml:space="preserve">
          <source>The following expressions are well-formed and have the following meaning for any BitmaskType:</source>
          <target state="translated">以下の表現はよくできていて、任意のBitmaskTypeに対して以下の意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="22d4ffd3d50c3b5b2098cbfee0ae837d04064a61" translate="yes" xml:space="preserve">
          <source>The following expressions must be valid and have their specified effects for all sequence containers except &lt;code&gt;&lt;a href=&quot;../container/array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次の式は有効であり、 &lt;code&gt;&lt;a href=&quot;../container/array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt; を除くすべてのシーケンスコンテナーに対して指定された効果を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="d5e8ec34037bfee2a2de96690accfd13ec9641c0" translate="yes" xml:space="preserve">
          <source>The following expressions must be valid and have their specified effects for the sequence containers named:</source>
          <target state="translated">以下の式は有効であり、指定されたシーケンスコンテナに対して指定された効果を持つものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="c10e7ec520abefe3e72402cd7464b805bd2ced61" translate="yes" xml:space="preserve">
          <source>The following expressions must be valid and have their specified effects.</source>
          <target state="translated">以下の式が有効で、指定された効果を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="49a148a069facd683ffc1bc478747dac3ca7105d" translate="yes" xml:space="preserve">
          <source>The following expressions must be valid and have their specified effects:</source>
          <target state="translated">以下の式が有効で、指定された効果を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="2720aede3cc4a9514ba4f52fbf8bdb672820ebe6" translate="yes" xml:space="preserve">
          <source>The following expressions must be valid:</source>
          <target state="translated">以下の式が有効でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2cfaf8e14e19bf31aee96ca79b4b825e2d169ca6" translate="yes" xml:space="preserve">
          <source>The following floating-point error conditions are recognized:</source>
          <target state="translated">以下の浮動小数点エラー状態が認識されます。</target>
        </trans-unit>
        <trans-unit id="bd4f90abfd9c4aaea62c390400d56b7eb617f8af" translate="yes" xml:space="preserve">
          <source>The following format specifiers are available:</source>
          <target state="translated">以下のフォーマット指定子が利用可能です。</target>
        </trans-unit>
        <trans-unit id="f42b11d97e9492ead1c1556f379edfec7ce6efa2" translate="yes" xml:space="preserve">
          <source>The following four requirements are guaranteed for all atomic operations:</source>
          <target state="translated">すべての原子操作について、以下の4つの要件が保証されています。</target>
        </trans-unit>
        <trans-unit id="a92b77d52f08f57ee17ef460d2687879e298a2ce" translate="yes" xml:space="preserve">
          <source>The following functions are required to be thread-safe:</source>
          <target state="translated">スレッドセーフにするためには、以下の機能が必要です。</target>
        </trans-unit>
        <trans-unit id="f2eb935e6113cc619832488518231a86dfe2f850" translate="yes" xml:space="preserve">
          <source>The following functions clear &lt;code&gt;eofbit&lt;/code&gt; as a side-effect:</source>
          <target state="translated">次の関数は、副作用として &lt;code&gt;eofbit&lt;/code&gt; をクリアします。</target>
        </trans-unit>
        <trans-unit id="c5a591d9fa5638aac9fa2b83e82338a91618a78a" translate="yes" xml:space="preserve">
          <source>The following functions manage program termination and resource cleanup.</source>
          <target state="translated">以下の機能は、プログラムの終了とリソースのクリーンアップを管理します。</target>
        </trans-unit>
        <trans-unit id="8e986edc251497f629cc52507f22f7c5c5651a39" translate="yes" xml:space="preserve">
          <source>The following functions set &lt;code&gt;gcount()&lt;/code&gt; to zero:</source>
          <target state="translated">次の関数は、 &lt;code&gt;gcount()&lt;/code&gt; をゼロに設定します。</target>
        </trans-unit>
        <trans-unit id="7e751c77b395f08a05df0faafe34cc44b0980610" translate="yes" xml:space="preserve">
          <source>The following functions should not be called from multiple threads without synchronization with the &lt;code&gt;std::mbstate_t*&lt;/code&gt; argument of &lt;code&gt;NULL&lt;/code&gt; due to possible data races: &lt;code&gt;&lt;a href=&quot;mbrlen&quot;&gt;std::mbrlen&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mbrtowc&quot;&gt;std::mbrtowc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mbsrtowcs&quot;&gt;std::mbsrtowcs&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mbtowc&quot;&gt;std::mbtowc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;wcrtomb&quot;&gt;std::wcrtomb&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;wcsrtombs&quot;&gt;std::wcsrtombs&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;wctomb&quot;&gt;std::wctomb&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">データの競合が発生する可能性があるため、次の関数を &lt;code&gt;NULL&lt;/code&gt; の &lt;code&gt;std::mbstate_t*&lt;/code&gt; 引数と同期せずに複数のスレッドから呼び出さないでください： &lt;code&gt;&lt;a href=&quot;mbrlen&quot;&gt;std::mbrlen&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;mbrtowc&quot;&gt;std::mbrtowc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;mbsrtowcs&quot;&gt;std::mbsrtowcs&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;mbtowc&quot;&gt;std::mbtowc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;wcrtomb&quot;&gt;std::wcrtomb&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;wcsrtombs&quot;&gt;std::wcsrtombs&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;wctomb&quot;&gt;std::wctomb&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e06fb004ab640fd2985e53f52dd0e0eaabd0f761" translate="yes" xml:space="preserve">
          <source>The following implicit conversions are classified as integral promotions:</source>
          <target state="translated">以下の暗黙の変換は、インテグラルプロモーションに分類されます。</target>
        </trans-unit>
        <trans-unit id="9e4bf6b07ece0b87ef0e771b79b6cc4bd8a6bfce" translate="yes" xml:space="preserve">
          <source>The following is an implementation of selection sort in C++</source>
          <target state="translated">以下は,C++での選択ソートの実装です.</target>
        </trans-unit>
        <trans-unit id="dfac99e333eaa05ebfa778080027d41f55d75c0f" translate="yes" xml:space="preserve">
          <source>The following limitations apply when instantiating templates that have non-type template parameters:</source>
          <target state="translated">テンプレート・パラメータが非タイプのテンプレートをインスタンス化する際には、以下の制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="52747f8b268619d42bfc41249c2443bf02dfb375" translate="yes" xml:space="preserve">
          <source>The following limitations are imposed on the user-defined function that is installed as a signal handler.</source>
          <target state="translated">シグナルハンドラとしてインストールされているユーザ定義関数には、以下のような制限が課せられています。</target>
        </trans-unit>
        <trans-unit id="da00c82b7d244792f2030f45189b70e1b1b1f2b3" translate="yes" xml:space="preserve">
          <source>The following linkages are recognized:</source>
          <target state="translated">以下のような連携が認められています。</target>
        </trans-unit>
        <trans-unit id="fb4eace7ff5070309972db02437a21ee5af036eb" translate="yes" xml:space="preserve">
          <source>The following literal operators are defined in the standard library.</source>
          <target state="translated">標準ライブラリでは、以下のリテラル演算子が定義されています。</target>
        </trans-unit>
        <trans-unit id="3723b425362ea4e4ce5828175ffab15f68e3131b" translate="yes" xml:space="preserve">
          <source>The following macro names are predefined in every translation unit.</source>
          <target state="translated">以下のマクロ名は、翻訳単位ごとに定義されています。</target>
        </trans-unit>
        <trans-unit id="7566f7a8132ec521da8d18bb6126376034375f24" translate="yes" xml:space="preserve">
          <source>The following macros are defined if the header &lt;a href=&quot;header/version&quot;&gt;&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/a&gt; or any of the corresponding headers in the table below is included. Each macro expands to an integer literal corresponding to the year and month when the corresponding feature has been included in the working draft.</source>
          <target state="translated">次のマクロは、ヘッダー&lt;a href=&quot;header/version&quot;&gt; &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; &lt;/a&gt;または下の表の対応するヘッダーのいずれかが含まれている場合に定義されます。各マクロは、対応する機能が草案に含まれている場合、年と月に対応する整数リテラルに展開されます。</target>
        </trans-unit>
        <trans-unit id="f28817cf6a958f651285ad92987ad551f3b3afb7" translate="yes" xml:space="preserve">
          <source>The following macros are predefined in every translation unit.</source>
          <target state="translated">以下のマクロは、各翻訳単位であらかじめ定義されています。</target>
        </trans-unit>
        <trans-unit id="73f1c16628c0db204aa1806bf2fd9e91da1c732d" translate="yes" xml:space="preserve">
          <source>The following macros are predefined in every translation unit. Each macro expands to an integer literal corresponding to the year and month when the corresponding feature has been included in the working draft.</source>
          <target state="translated">以下のマクロは、各翻訳ユニットで定義されています。各マクロは、対応する機能が作業草案に含まれている年と月に対応する整数リテラルに展開します。</target>
        </trans-unit>
        <trans-unit id="f9955df6599697e69b7429b076ab09c2a61cf784" translate="yes" xml:space="preserve">
          <source>The following member functions of &lt;code&gt;basic_istream&lt;/code&gt; change the value of subsequent &lt;code&gt;gcount()&lt;/code&gt; calls:</source>
          <target state="translated">次の &lt;code&gt;basic_istream&lt;/code&gt; のメンバー関数は、後続の &lt;code&gt;gcount()&lt;/code&gt; 呼び出しの値を変更します。</target>
        </trans-unit>
        <trans-unit id="8a52166fa732f6828cff4533ced933f75480e1dc" translate="yes" xml:space="preserve">
          <source>The following operators are rarely overloaded:</source>
          <target state="translated">以下の演算子は、ほとんどオーバーロードされることはありません。</target>
        </trans-unit>
        <trans-unit id="48a3fa74fdd466282026b295d2a93a127b87ec93" translate="yes" xml:space="preserve">
          <source>The following overloads are already provided by the standard library:</source>
          <target state="translated">以下のオーバーロードは標準ライブラリで既に提供されています。</target>
        </trans-unit>
        <trans-unit id="eba554740f58545a1e58d6b4c2dd64ed7fb45704" translate="yes" xml:space="preserve">
          <source>The following program demonstrates usage of a custom deleter.</source>
          <target state="translated">以下のプログラムは、カスタム削除器の使用法を示しています。</target>
        </trans-unit>
        <trans-unit id="062d4ad02d97a54508cb3a86208e3c3ee3d3ffdf" translate="yes" xml:space="preserve">
          <source>The following program is an example of an efficient type-value mapping without using &lt;code&gt;&lt;a href=&quot;../type_index&quot;&gt;std::type_index&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次のプログラムは、 &lt;code&gt;&lt;a href=&quot;../type_index&quot;&gt;std::type_index&lt;/a&gt;&lt;/code&gt; を使用しない効率的な型と値のマッピングの例です。</target>
        </trans-unit>
        <trans-unit id="8220c0fdbfef735a987a41da0ffe4823652db8b9" translate="yes" xml:space="preserve">
          <source>The following program is an example of an efficient type-value mapping.</source>
          <target state="translated">以下のプログラムは、効率的な型-値のマッピングの例です。</target>
        </trans-unit>
        <trans-unit id="9ff275c825fa1a87d99185f365a34ebec03469ef" translate="yes" xml:space="preserve">
          <source>The following properties of bit fields are</source>
          <target state="translated">ビットフィールドの以下のプロパティは</target>
        </trans-unit>
        <trans-unit id="af27c3abc588bea4e2ff429143c89f2d428493c5" translate="yes" xml:space="preserve">
          <source>The following restrictions apply to the argument-list of a partial template specialization:</source>
          <target state="translated">部分テンプレート特化の引数リストには、以下の制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="f68aa4529e49ad56663b01e62f1f4c387b78a88c" translate="yes" xml:space="preserve">
          <source>The following rules apply to container construction.</source>
          <target state="translated">コンテナ工事には、以下のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="718963b68f3a3480ccecd7e291d7071c83c72a08" translate="yes" xml:space="preserve">
          <source>The following specializations are already provided by the standard library:</source>
          <target state="translated">標準ライブラリでは、以下のような特殊化がすでに提供されています。</target>
        </trans-unit>
        <trans-unit id="0031259c1c38cc60cd2a07e684b6afb30571b854" translate="yes" xml:space="preserve">
          <source>The following specializations of &lt;code&gt;&lt;a href=&quot;io/fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt; are provided:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;io/fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt; の次の特殊化が提供されています。</target>
        </trans-unit>
        <trans-unit id="2d2dff1f1d7ffe563611f49b118f00cc7cde933f" translate="yes" xml:space="preserve">
          <source>The following specializations of &lt;code&gt;std::fpos&lt;/code&gt; are provided:</source>
          <target state="translated">&lt;code&gt;std::fpos&lt;/code&gt; の次の特殊化が提供されています。</target>
        </trans-unit>
        <trans-unit id="a8ac2376ba64e555f426367b2c168767a8b9fd8a" translate="yes" xml:space="preserve">
          <source>The following specifiers are recognized, but will cause &lt;code&gt;&lt;a href=&quot;../../io/ios_base/iostate&quot;&gt;std::ios_base::failbit&lt;/a&gt;&lt;/code&gt; to be set in &lt;code&gt;os&lt;/code&gt;:</source>
          <target state="translated">次の指定子は認識されますが、 &lt;code&gt;&lt;a href=&quot;../../io/ios_base/iostate&quot;&gt;std::ios_base::failbit&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;os&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="b43c06e0b038d4f78fc60acbdf6be989d5c2205c" translate="yes" xml:space="preserve">
          <source>The following standalone (locale-independent) specializations are provided by the standard library:</source>
          <target state="translated">標準ライブラリでは、以下のスタンドアロン (ロケールに依存しない)特殊化が提供されています。</target>
        </trans-unit>
        <trans-unit id="87098482f1ab90910e6cdda0d45338fd298ac8e6" translate="yes" xml:space="preserve">
          <source>The following standard functions are declared with &lt;code&gt;nodiscard&lt;/code&gt; attribute:</source>
          <target state="translated">以下の標準関数は、 &lt;code&gt;nodiscard&lt;/code&gt; 属性で宣言されています。</target>
        </trans-unit>
        <trans-unit id="9dcab3d2651c2d4be25e4e3aa77f3fa98e464574" translate="yes" xml:space="preserve">
          <source>The following standard functions are declared with &lt;code&gt;noreturn&lt;/code&gt; attribute:</source>
          <target state="translated">以下の標準関数は、 &lt;code&gt;noreturn&lt;/code&gt; 属性で宣言されています。</target>
        </trans-unit>
        <trans-unit id="32a68a66d872c6f3299adc5cd097f3da4b4588ff" translate="yes" xml:space="preserve">
          <source>The following standard library class templates also satisfy &lt;strong&gt;TransformationTrait&lt;/strong&gt;.</source>
          <target state="translated">次の標準ライブラリクラステンプレートも&lt;strong&gt;TransformationTraitを&lt;/strong&gt;満たしています。</target>
        </trans-unit>
        <trans-unit id="1e1e8e6153d4fa33a939b2ff78c2e8172ebd314a" translate="yes" xml:space="preserve">
          <source>The following standard library class templates also satisfy &lt;strong&gt;UnaryTypeTrait&lt;/strong&gt;.</source>
          <target state="translated">次の標準ライブラリクラステンプレートも&lt;strong&gt;UnaryTypeTraitを&lt;/strong&gt;満たしてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8ae071fe8c66c1cf7bd341b1a4ee6d758adbce1a" translate="yes" xml:space="preserve">
          <source>The following standard library class templates satisfy &lt;strong&gt;BinaryTypeTrait&lt;/strong&gt;.</source>
          <target state="translated">次の標準ライブラリクラステンプレートは&lt;strong&gt;BinaryTypeTraitを&lt;/strong&gt;満たしてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="007099bda9fb475467acdd87b9f40e88aa090101" translate="yes" xml:space="preserve">
          <source>The following standard library components satisfy RandomNumberDistribution.</source>
          <target state="translated">以下の標準ライブラリコンポーネントは、RandomNumberDistributionを満たしています。</target>
        </trans-unit>
        <trans-unit id="efaebbc35931a2d154d67a161bd61f11506f8352" translate="yes" xml:space="preserve">
          <source>The following standard library components satisfy the Allocator requirements:</source>
          <target state="translated">以下の標準ライブラリコンポーネントは、Allocatorの要件を満たしています。</target>
        </trans-unit>
        <trans-unit id="eb594915ced822ef9c987893a74e5ec96ad031fe" translate="yes" xml:space="preserve">
          <source>The following standard library facilities expect a BinaryPredicate which isn't a &lt;a href=&quot;compare&quot;&gt;Compare&lt;/a&gt; type.</source>
          <target state="translated">次の標準ライブラリ機能は、&lt;a href=&quot;compare&quot;&gt;比較&lt;/a&gt;タイプではないBinaryPredicateを想定しています。</target>
        </trans-unit>
        <trans-unit id="d463c552ce3946c66f46834829e62a11e51b3305" translate="yes" xml:space="preserve">
          <source>The following standard library facilities expect a Compare type.</source>
          <target state="translated">以下の標準的な図書館施設は、Compareタイプを想定しています。</target>
        </trans-unit>
        <trans-unit id="c52f727d02e5c3f4bd6ca4b1192af1099ef5f182" translate="yes" xml:space="preserve">
          <source>The following standard library facilities expect a UniformRandomBitGenerator type.</source>
          <target state="translated">以下の標準ライブラリ施設は、UniformRandomBitGenerator型を期待しています。</target>
        </trans-unit>
        <trans-unit id="eaa1be259b57b9bea0023a6acb3d8b45f5225eae" translate="yes" xml:space="preserve">
          <source>The following standard library facilities satisfy &lt;a href=&quot;uniformrandombitgenerator&quot;&gt;UniformRandomBitGenerator&lt;/a&gt; but not RandomNumberEngine:</source>
          <target state="translated">次の標準ライブラリ機能は、&lt;a href=&quot;uniformrandombitgenerator&quot;&gt;UniformRandomBitGeneratorを&lt;/a&gt;満たしますが、RandomNumberEngineを満たしません。</target>
        </trans-unit>
        <trans-unit id="e54e88fbec814c021ca405eb128168a763988d48" translate="yes" xml:space="preserve">
          <source>The following standard library facilities satisfy &lt;strong&gt;RandomNumberEngineAdaptor&lt;/strong&gt;:</source>
          <target state="translated">次の標準ライブラリ機能は、&lt;strong&gt;RandomNumberEngineAdaptorを&lt;/strong&gt;満たしてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="bbcaf65a4722d7dc301ad7f848b0a0e5b87a75cd" translate="yes" xml:space="preserve">
          <source>The following standard library facilities satisfy RandomNumberEngine:</source>
          <target state="translated">以下の標準ライブラリ機能はRandomNumberEngineを満たしています。</target>
        </trans-unit>
        <trans-unit id="8197cbcbf90d11a014c985a28b2629f3b2e0d799" translate="yes" xml:space="preserve">
          <source>The following standard library facilities satisfy UniformRandomBitGenerator without additionally satisfying &lt;a href=&quot;randomnumberengine&quot;&gt;RandomNumberEngine&lt;/a&gt;:</source>
          <target state="translated">次の標準ライブラリ機能は、RandomNumberEngineをさらに満たすことなくUniformRandomBitGeneratorを満たし&lt;a href=&quot;randomnumberengine&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="52a9199352069fc95f2faa18ac7f0b0ffb0b610e" translate="yes" xml:space="preserve">
          <source>The following standard library functions are &lt;strong&gt;FormattedInputFunctions&lt;/strong&gt;.</source>
          <target state="translated">次の標準ライブラリ関数は&lt;strong&gt;FormattedInputFunctions&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="110375b0fdd2a6ce27bc319d8fa22f578ddce865" translate="yes" xml:space="preserve">
          <source>The following standard library functions are &lt;strong&gt;FormattedOutputFunctions&lt;/strong&gt;.</source>
          <target state="translated">次の標準ライブラリ関数は&lt;strong&gt;FormattedOutputFunctions&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="90e3e6b7b01ca606fc88d527e8457cddf02887d1" translate="yes" xml:space="preserve">
          <source>The following standard library functions are &lt;strong&gt;UnformattedInputFunctions&lt;/strong&gt;.</source>
          <target state="translated">次の標準ライブラリ関数は&lt;strong&gt;UnformattedInputFunctions&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="d5b69d90b769dd1b2f532dc9339b7db1e70233cd" translate="yes" xml:space="preserve">
          <source>The following standard library functions are &lt;strong&gt;UnformattedOutputFunctions&lt;/strong&gt;.</source>
          <target state="translated">次の標準ライブラリ関数は&lt;strong&gt;UnformattedOutputFunctions&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="9d13f7fc713bbd7fbb501cfb262722eda5bd2609" translate="yes" xml:space="preserve">
          <source>The following standard library iterators are output iterators that are not forward iterators:</source>
          <target state="translated">以下の標準ライブラリのイテレータは、前方イテレータではない出力イテレータです。</target>
        </trans-unit>
        <trans-unit id="798f4cbd9dba6c81e1c0811a4318bb2610b1288b" translate="yes" xml:space="preserve">
          <source>The following standard library types are &lt;strong&gt;ConstexprIterators&lt;/strong&gt;.</source>
          <target state="translated">次の標準ライブラリタイプは&lt;strong&gt;ConstexprIterators&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="e1774bde3d09ff1b66341e950d51e21a1688d8fd" translate="yes" xml:space="preserve">
          <source>The following standard library types are &lt;strong&gt;LegacyContiguousIterators&lt;/strong&gt;.</source>
          <target state="translated">次の標準ライブラリタイプは&lt;strong&gt;LegacyContiguousIterators&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="9822d186557d4ec43def3a5bb298d63e3e55ca3a" translate="yes" xml:space="preserve">
          <source>The following standard library types satisfy &lt;strong&gt;Mutex&lt;/strong&gt;:</source>
          <target state="translated">次の標準ライブラリタイプは、&lt;strong&gt;Mutexを&lt;/strong&gt;満たしています。</target>
        </trans-unit>
        <trans-unit id="3839c6b1e2941f810663e37c07c9bd57f5137bf2" translate="yes" xml:space="preserve">
          <source>The following standard library types satisfy &lt;strong&gt;SharedMutex&lt;/strong&gt;:</source>
          <target state="translated">次の標準ライブラリタイプは&lt;strong&gt;SharedMutexを&lt;/strong&gt;満たし&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4af656071a5eee92d3b738c09cb8b1788943c228" translate="yes" xml:space="preserve">
          <source>The following standard library types satisfy &lt;strong&gt;SharedTimedMutex&lt;/strong&gt;:</source>
          <target state="translated">次の標準ライブラリタイプは&lt;strong&gt;SharedTimedMutexを&lt;/strong&gt;満たし&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e75c35170e3fc67641a033c6b52eb7c81d48b3ee" translate="yes" xml:space="preserve">
          <source>The following standard library types satisfy &lt;strong&gt;TimedMutex&lt;/strong&gt;:</source>
          <target state="translated">次の標準ライブラリタイプは&lt;strong&gt;TimedMutexを&lt;/strong&gt;満たしてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1377bfafdad89d2d5786eb764cf76e00e525017f" translate="yes" xml:space="preserve">
          <source>The following standard library types satisfy BitmaskType:</source>
          <target state="translated">BitmaskTypeを満たす標準ライブラリタイプは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f47359b7f5be953e5e8316b3b16c4cfd96c74539" translate="yes" xml:space="preserve">
          <source>The following table lists the precedence and associativity of C++ operators. Operators are listed top to bottom, in descending precedence.</source>
          <target state="translated">次の表に、C++演算子の優先順位と連想性を示します。演算子は、上から順に優先順位の高い順に並べられています。</target>
        </trans-unit>
        <trans-unit id="869cf0a93a08ae4a865cdd25ae31955da4b9045e" translate="yes" xml:space="preserve">
          <source>The following table provides a reference for the limits of common numeric representations.</source>
          <target state="translated">一般的な数値表現の限界については、以下の表を参考にしてください。</target>
        </trans-unit>
        <trans-unit id="075cede2e87300a32b00122d0c950fe1bd6c8667" translate="yes" xml:space="preserve">
          <source>The following table shows the value of &lt;code&gt;basic_ios&lt;/code&gt; accessors (&lt;a href=&quot;../basic_ios/good&quot;&gt;&lt;code&gt;good()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../basic_ios/fail&quot;&gt;&lt;code&gt;fail()&lt;/code&gt;&lt;/a&gt;, etc.) for all possible combinations of &lt;strong&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/strong&gt; flags:</source>
          <target state="translated">次の表は、&lt;strong&gt; &lt;code&gt;ios_base::iostate&lt;/code&gt; &lt;/strong&gt;フラグの可能なすべての組み合わせに対する &lt;code&gt;basic_ios&lt;/code&gt; アクセサー（&lt;a href=&quot;../basic_ios/good&quot;&gt; &lt;code&gt;good()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../basic_ios/fail&quot;&gt; &lt;code&gt;fail()&lt;/code&gt; &lt;/a&gt;など）の値を示しています。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="99ea509caafeb125e6fd07be315f0d67081751c9" translate="yes" xml:space="preserve">
          <source>The following table shows the value of &lt;code&gt;basic_ios&lt;/code&gt; accessors (&lt;a href=&quot;good&quot;&gt;&lt;code&gt;good()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;fail&quot;&gt;&lt;code&gt;fail()&lt;/code&gt;&lt;/a&gt;, etc.) for all possible combinations of &lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/a&gt; flags:</source>
          <target state="translated">次の表は、&lt;a href=&quot;../ios_base/iostate&quot;&gt; &lt;code&gt;ios_base::iostate&lt;/code&gt; &lt;/a&gt;フラグの可能なすべての組み合わせに対する &lt;code&gt;basic_ios&lt;/code&gt; アクセサー（&lt;a href=&quot;good&quot;&gt; &lt;code&gt;good()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;fail&quot;&gt; &lt;code&gt;fail()&lt;/code&gt; &lt;/a&gt;など）の値を示しています。</target>
        </trans-unit>
        <trans-unit id="745f79dd59ed6342386b7151436e3f17242c02d9" translate="yes" xml:space="preserve">
          <source>The following table shows the value of &lt;code&gt;basic_ios&lt;/code&gt; accessors (&lt;a href=&quot;good&quot;&gt;&lt;code&gt;good()&lt;/code&gt;&lt;/a&gt;, &lt;strong&gt;&lt;code&gt;fail()&lt;/code&gt;&lt;/strong&gt;, etc.) for all possible combinations of &lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/a&gt; flags:</source>
          <target state="translated">次の表は、&lt;a href=&quot;../ios_base/iostate&quot;&gt; &lt;code&gt;ios_base::iostate&lt;/code&gt; &lt;/a&gt;フラグの可能なすべての組み合わせに対する &lt;code&gt;basic_ios&lt;/code&gt; アクセサー（&lt;a href=&quot;good&quot;&gt; &lt;code&gt;good()&lt;/code&gt; &lt;/a&gt;、&lt;strong&gt; &lt;code&gt;fail()&lt;/code&gt; &lt;/strong&gt;など）の値を示しています。</target>
        </trans-unit>
        <trans-unit id="baa16009a2a3e8d14cfb3decd4d046c7405e0c14" translate="yes" xml:space="preserve">
          <source>The following table shows the value of &lt;code&gt;basic_ios&lt;/code&gt; accessors (&lt;strong&gt;&lt;code&gt;good()&lt;/code&gt;&lt;/strong&gt;, &lt;a href=&quot;fail&quot;&gt;&lt;code&gt;fail()&lt;/code&gt;&lt;/a&gt;, etc.) for all possible combinations of &lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/a&gt; flags:</source>
          <target state="translated">次の表は、&lt;a href=&quot;../ios_base/iostate&quot;&gt; &lt;code&gt;ios_base::iostate&lt;/code&gt; &lt;/a&gt;フラグの可能なすべての組み合わせに対する &lt;code&gt;basic_ios&lt;/code&gt; アクセサー（&lt;strong&gt; &lt;code&gt;good()&lt;/code&gt; &lt;/strong&gt;、&lt;a href=&quot;fail&quot;&gt; &lt;code&gt;fail()&lt;/code&gt; &lt;/a&gt;など）の値を示しています。</target>
        </trans-unit>
        <trans-unit id="a901e9b7792340a20dc3a26c920d9911c931da64" translate="yes" xml:space="preserve">
          <source>The following table summarizes all available integer types and their properties:</source>
          <target state="translated">以下の表は、利用可能なすべての整数型とそのプロパティをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="acc57bf9778baf29a073665323a0c5976c6a1f23" translate="yes" xml:space="preserve">
          <source>The following three-character groups (trigraphs) are &lt;a href=&quot;translation_phases&quot;&gt;parsed before comments and string literals are recognized&lt;/a&gt;, and each appearance of a trigraph is replaced by the corresponding primary character:</source>
          <target state="translated">次の3文字のグループ（トリグラフ）は&lt;a href=&quot;translation_phases&quot;&gt;、コメントと文字列リテラルが認識される前に解析され&lt;/a&gt;、トリグラフの各外観は、対応するプライマリ文字に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="1a2dbbb940f65a4c22cd1d407d67021cc73fac74" translate="yes" xml:space="preserve">
          <source>The following tokens are recognized by the &lt;a href=&quot;preprocessor&quot;&gt;preprocessor&lt;/a&gt;</source>
          <target state="translated">次のトークンは&lt;a href=&quot;preprocessor&quot;&gt;プリプロセッサ&lt;/a&gt;によって認識されます</target>
        </trans-unit>
        <trans-unit id="08cdd10ea2ca9c43a4ad2477073dc522db53c06e" translate="yes" xml:space="preserve">
          <source>The following tokens are recognized by the &lt;a href=&quot;preprocessor&quot;&gt;preprocessor&lt;/a&gt; when in context of a preprocessor directive:</source>
          <target state="translated">次のトークンは、プリプロセッサディレクティブのコンテキストで&lt;a href=&quot;preprocessor&quot;&gt;プリプロセッサ&lt;/a&gt;によって認識されます。</target>
        </trans-unit>
        <trans-unit id="15f4805e7fc03f03ec8693800bb74acd46b9bd71" translate="yes" xml:space="preserve">
          <source>The following type aliases define the random number engine with two commonly used parameter sets:</source>
          <target state="translated">以下の型のエイリアスは、一般的に使用される2つのパラメータセットを持つ乱数エンジンを定義します。</target>
        </trans-unit>
        <trans-unit id="d2a02b2530d19cf2a9fd0c63e8f36bcf3e4d4b7d" translate="yes" xml:space="preserve">
          <source>The following type errors are SFINAE errors:</source>
          <target state="translated">以下のタイプのエラーは SFINAE エラーです。</target>
        </trans-unit>
        <trans-unit id="08cef6066b25127cfb360b58024871a2ef93ea56" translate="yes" xml:space="preserve">
          <source>The following typedef defines the random number engine with one commonly used parameter set:</source>
          <target state="translated">以下のtypedefは,一般的に使用される1つのパラメータセットを持つ乱数エンジンを定義しています.</target>
        </trans-unit>
        <trans-unit id="0628e731210af7f1451f479c8ea0eaea15b93ed0" translate="yes" xml:space="preserve">
          <source>The following typedefs define the random number engine with two commonly used parameter sets:</source>
          <target state="translated">以下の型定義は,一般的に使用される2つのパラメータセットを持つ乱数エンジンを定義します.</target>
        </trans-unit>
        <trans-unit id="1f6a99951a06b5fd8ea85e437236c5467963a19e" translate="yes" xml:space="preserve">
          <source>The following typedefs for common character types are provided:</source>
          <target state="translated">一般的な文字型については、以下のようなタイプデフが用意されています。</target>
        </trans-unit>
        <trans-unit id="67202458185ead27be9490dca90a497de75d4077" translate="yes" xml:space="preserve">
          <source>The following types are</source>
          <target state="translated">以下のような種類があります。</target>
        </trans-unit>
        <trans-unit id="8767b4d8ec3caedfe52318cc0d33202d47bee690" translate="yes" xml:space="preserve">
          <source>The following types are dependent types:</source>
          <target state="translated">依存型には以下のようなタイプがあります。</target>
        </trans-unit>
        <trans-unit id="9f298f8c48595121567682959a89caa583d0e719" translate="yes" xml:space="preserve">
          <source>The following types in the standard library satisfy these requirements:</source>
          <target state="translated">標準ライブラリの以下のタイプは、これらの要件を満たしています。</target>
        </trans-unit>
        <trans-unit id="d86187cf064bf2fed80acd4d6548d022ed06c4ab" translate="yes" xml:space="preserve">
          <source>The following types must satisfy NullablePointer:</source>
          <target state="translated">以下の型はNullablePointerを満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="05263cedaa87adae4404e0d5d0d5c6012425b488" translate="yes" xml:space="preserve">
          <source>The following values of &lt;code&gt;str&lt;/code&gt; are supported in all C locales:</source>
          <target state="translated">次の &lt;code&gt;str&lt;/code&gt; の値は、すべてのCロケールでサポートされています。</target>
        </trans-unit>
        <trans-unit id="df8deaac6bb5ac34b75ff8d33e606b718c268c59" translate="yes" xml:space="preserve">
          <source>The following variables are also initialized to the same value:</source>
          <target state="translated">以下の変数も同じ値に初期化されています。</target>
        </trans-unit>
        <trans-unit id="5c29167a05bd707a804eef66e8a46280899a02a0" translate="yes" xml:space="preserve">
          <source>The following variables are initialized to the same value:</source>
          <target state="translated">以下の変数は同じ値に初期化されています。</target>
        </trans-unit>
        <trans-unit id="c115c3bcc9fbadc3a57b3f9c0400462a69bdd2ad" translate="yes" xml:space="preserve">
          <source>The formal definition ensures that:</source>
          <target state="translated">形式的な定義は、それを保証します。</target>
        </trans-unit>
        <trans-unit id="fc058be4fe81eec42326824dea95a8995ba79311" translate="yes" xml:space="preserve">
          <source>The formal parameter of the catch clause (type-specifier-seq and declarator or type-specifier-seq and abstract-declarator) determines which types of exceptions cause this catch clause to be entered. It cannot be an &lt;a href=&quot;reference&quot;&gt;rvalue reference type&lt;/a&gt;, &lt;a href=&quot;abstract_class&quot;&gt;abstract class&lt;/a&gt;, &lt;a href=&quot;incomplete_type&quot;&gt;incomplete type&lt;/a&gt;, or pointer to incomplete type (except that pointers to (possibly &lt;a href=&quot;cv&quot;&gt;cv&lt;/a&gt;-qualified) &lt;code&gt;void&lt;/code&gt; are allowed). If the type of the formal parameter is array type or function type, it is treated as the corresponding pointer type (similar to a &lt;a href=&quot;function&quot;&gt;function declaration&lt;/a&gt;).</source>
          <target state="translated">catch句の仮パラメーター（type-specifier-seqとdeclarator、またはtype-specifier-seqとabstract-declarator）は、このcatch句に入る例外のタイプを決定します。これは、&lt;a href=&quot;reference&quot;&gt;右辺値参照型&lt;/a&gt;、&lt;a href=&quot;abstract_class&quot;&gt;抽象クラス&lt;/a&gt;、&lt;a href=&quot;incomplete_type&quot;&gt;不完全型&lt;/a&gt;、または不完全型へのポインタ（（おそらく&lt;a href=&quot;cv&quot;&gt;cv&lt;/a&gt;修飾された） &lt;code&gt;void&lt;/code&gt; へのポインタが許可されている場合を除いて）にはできません。仮パラメーターの型が配列型または関数型の場合は、対応するポインター型として扱われます（&lt;a href=&quot;function&quot;&gt;関数宣言&lt;/a&gt;と同様）。</target>
        </trans-unit>
        <trans-unit id="8c84fba53b093effe5342ab55502a277a5ffaba5" translate="yes" xml:space="preserve">
          <source>The format of &lt;code&gt;filename&lt;/code&gt; is implementation-defined, and does not necessarily refer to a file (e.g. it may be the console or another device accessible through filesystem API). On platforms that support them, &lt;code&gt;filename&lt;/code&gt; may include absolute or relative filesystem path.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; の形式は実装定義であり、必ずしもファイルを指すとは限りません（たとえば、ファイルシステムAPIを介してアクセス可能なコンソールまたは別のデバイスである場合があります）。それらをサポートするプラットフォームでは、 &lt;code&gt;filename&lt;/code&gt; に絶対または相対ファイルシステムパスを含めることができます。</target>
        </trans-unit>
        <trans-unit id="19e13fb520e9b9f29460d58a00f41c09337dc08f" translate="yes" xml:space="preserve">
          <source>The format of floating-point values is as follows:</source>
          <target state="translated">浮動小数点値のフォーマットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a0add987dacb96215da068df8fc467e3a8d4b58c" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/byte/strtof&quot;&gt;&lt;code&gt;strtof()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">数値の形式は、&lt;a href=&quot;../../string/byte/strtof&quot;&gt; &lt;code&gt;strtof()&lt;/code&gt; で&lt;/a&gt;想定されているものと同じです。です。</target>
        </trans-unit>
        <trans-unit id="c7a581065d0c8c103e51ec546cb2d29946e0e282" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/byte/strtol&quot;&gt;&lt;code&gt;strtol()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;10&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument.</source>
          <target state="translated">数値の形式は、 &lt;code&gt;base&lt;/code&gt; 値 &lt;code&gt;10&lt;/code&gt; を指定した&lt;a href=&quot;../../string/byte/strtol&quot;&gt; &lt;code&gt;strtol()&lt;/code&gt; &lt;/a&gt;で想定されているものと同じです。引数のです。</target>
        </trans-unit>
        <trans-unit id="de50d9c89fd0c551d172e90d35e19763d28aebed" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/byte/strtol&quot;&gt;&lt;code&gt;strtol()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;​0​&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument (base is determined by the first characters parsed).</source>
          <target state="translated">予想されるように数値の形式は同じである&lt;a href=&quot;../../string/byte/strtol&quot;&gt; &lt;code&gt;strtol()&lt;/code&gt; &lt;/a&gt;値と &lt;code&gt;​0​&lt;/code&gt; のための &lt;code&gt;base&lt;/code&gt; 引数（ベースの解析最初の文字によって決定されます）。</target>
        </trans-unit>
        <trans-unit id="f009580f6110aee4f2a9398c68d1bf94787198b5" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/byte/strtoul&quot;&gt;&lt;code&gt;strtoul()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;10&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument.</source>
          <target state="translated">予想されるように数値の形式は同じである&lt;a href=&quot;../../string/byte/strtoul&quot;&gt; &lt;code&gt;strtoul()&lt;/code&gt; &lt;/a&gt;値と &lt;code&gt;10&lt;/code&gt; のための &lt;code&gt;base&lt;/code&gt; 引数のです。</target>
        </trans-unit>
        <trans-unit id="48ec45a6a03f7559d556421a2a44ac148d321b20" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/byte/strtoul&quot;&gt;&lt;code&gt;strtoul()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;16&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument.</source>
          <target state="translated">数値の形式は、 &lt;code&gt;base&lt;/code&gt; 引数の値が &lt;code&gt;16&lt;/code&gt; の&lt;a href=&quot;../../string/byte/strtoul&quot;&gt; &lt;code&gt;strtoul()&lt;/code&gt; &lt;/a&gt;で想定されているものと同じです。</target>
        </trans-unit>
        <trans-unit id="bb05ad1877111e85c5dfa1d9f5bf199cff8a0c43" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/byte/strtoul&quot;&gt;&lt;code&gt;strtoul()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;8&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument.</source>
          <target state="translated">数値の形式は、 &lt;code&gt;base&lt;/code&gt; 引数の値が &lt;code&gt;8&lt;/code&gt; の&lt;a href=&quot;../../string/byte/strtoul&quot;&gt; &lt;code&gt;strtoul()&lt;/code&gt; &lt;/a&gt;で想定されているものと同じです。</target>
        </trans-unit>
        <trans-unit id="f5976eb1d0b6e29b5c32d55d187559f6ff886126" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/wide/wcstof&quot;&gt;&lt;code&gt;wcstof()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">数値の形式は、&lt;a href=&quot;../../string/wide/wcstof&quot;&gt; &lt;code&gt;wcstof()&lt;/code&gt; で&lt;/a&gt;期待されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="fecd04092122729704233da78da7584029c1baf0" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/wide/wcstol&quot;&gt;&lt;code&gt;wcstol()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;10&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument.</source>
          <target state="translated">数値の形式は、 &lt;code&gt;base&lt;/code&gt; 引数の値が &lt;code&gt;10&lt;/code&gt; の&lt;a href=&quot;../../string/wide/wcstol&quot;&gt; &lt;code&gt;wcstol()&lt;/code&gt; &lt;/a&gt;で期待されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="5bb104d61d7e8e7ed04a16c3daae6cd68cca3601" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/wide/wcstol&quot;&gt;&lt;code&gt;wcstol()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;​0​&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument (base is determined by the first characters parsed).</source>
          <target state="translated">予想されるように数値の形式は同じである&lt;a href=&quot;../../string/wide/wcstol&quot;&gt; &lt;code&gt;wcstol()&lt;/code&gt; &lt;/a&gt;値と &lt;code&gt;​0​&lt;/code&gt; のための &lt;code&gt;base&lt;/code&gt; 引数（ベースの解析最初の文字によって決定されます）。</target>
        </trans-unit>
        <trans-unit id="90f5746e8bc2a7796c8836cbdbee3ca457ca3f47" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/wide/wcstoul&quot;&gt;&lt;code&gt;wcstoul()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;10&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument.</source>
          <target state="translated">数値の形式は、 &lt;code&gt;base&lt;/code&gt; 引数の値が &lt;code&gt;10&lt;/code&gt; の&lt;a href=&quot;../../string/wide/wcstoul&quot;&gt; &lt;code&gt;wcstoul()&lt;/code&gt; &lt;/a&gt;で期待されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="c174dea8f8ac6d3123fee439903c3ea47dd4f027" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/wide/wcstoul&quot;&gt;&lt;code&gt;wcstoul()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;16&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument.</source>
          <target state="translated">数値の形式は、&lt;a href=&quot;../../string/wide/wcstoul&quot;&gt; &lt;code&gt;wcstoul()&lt;/code&gt; &lt;/a&gt;で想定されているものと同じであり、 &lt;code&gt;base&lt;/code&gt; は値 &lt;code&gt;16&lt;/code&gt; です。引数のです。</target>
        </trans-unit>
        <trans-unit id="f5eb1aae953e6c6c5362653e5973307871541db0" translate="yes" xml:space="preserve">
          <source>The format of the number is the same as expected by &lt;a href=&quot;../../string/wide/wcstoul&quot;&gt;&lt;code&gt;wcstoul()&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;8&lt;/code&gt; for the &lt;code&gt;base&lt;/code&gt; argument.</source>
          <target state="translated">数値の形式は、&lt;a href=&quot;../../string/wide/wcstoul&quot;&gt; &lt;code&gt;wcstoul()&lt;/code&gt; &lt;/a&gt;で想定されているものと同じであり、 &lt;code&gt;base&lt;/code&gt; は値 &lt;code&gt;8&lt;/code&gt; です。引数のです。</target>
        </trans-unit>
        <trans-unit id="3d9e18bdb76f0cfc72cfc7220ca845cba830ae2b" translate="yes" xml:space="preserve">
          <source>The format string consists of ordinary multibyte characters (except &lt;code&gt;%&lt;/code&gt;), which are copied unchanged into the output stream, and conversion specifications. Each conversion specification has the following format:</source>
          <target state="translated">書式文字列は、出力ストリームに変更されずにコピーされる通常のマルチバイト文字（ &lt;code&gt;%&lt;/code&gt; を除く）と変換仕様で構成されます。各変換仕様の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="978f5198d804b9a4148d59f23d49bd19f235af7b" translate="yes" xml:space="preserve">
          <source>The format string consists of ordinary wide characters (except &lt;code&gt;%&lt;/code&gt;), which are copied unchanged into the output stream, and conversion specifications. Each conversion specification has the following format:</source>
          <target state="translated">フォーマット文字列は、出力ストリームに変更なしでコピーされる通常のワイド文字（ &lt;code&gt;%&lt;/code&gt; を除く）と変換仕様で構成されます。各変換仕様の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="77ae2a1ebbf9dfc51f6f5d5f89c9ab7a18fe650c" translate="yes" xml:space="preserve">
          <source>The format string consists of zero or more conversion specifiers and ordinary characters (except &lt;code&gt;%&lt;/code&gt;). All ordinary characters, including the terminating null character, are copied to the output string without modification. Each conversion specification begins with &lt;code&gt;%&lt;/code&gt; character, optionally followed by &lt;code&gt;E&lt;/code&gt; or &lt;code&gt;O&lt;/code&gt; modifier (ignored if unsupported by the locale), followed by the character that determines the behavior of the specifier. The following format specifiers are available:</source>
          <target state="translated">書式文字列は、0個以上の変換指定子と通常の文字（ &lt;code&gt;%&lt;/code&gt; を除く）で構成されます。終了ヌル文字を含むすべての通常の文字は、変更されずに出力文字列にコピーされます。各変換仕様は &lt;code&gt;%&lt;/code&gt; 文字で始まり、オプションで &lt;code&gt;E&lt;/code&gt; または &lt;code&gt;O&lt;/code&gt; 修飾子（ロケールでサポートされていない場合は無視されます）が続き、その後に指定子の動作を決定する文字が続きます。次のフォーマット指定子を使用できます。</target>
        </trans-unit>
        <trans-unit id="f2ac326d01048c042fad765ae54487eb3b38a164" translate="yes" xml:space="preserve">
          <source>The format string consists of zero or more conversion specifiers and ordinary characters. All ordinary characters, excluding the terminating null character, are written into the output stream without modification. Each unmodified conversion specifier begins with a &lt;code&gt;%&lt;/code&gt; character followed by a character that determines the behavior of the specifier. Some conversion specifiers have a modified form in which an &lt;code&gt;E&lt;/code&gt; or &lt;code&gt;O&lt;/code&gt; modifier character is inserted after the &lt;code&gt;%&lt;/code&gt; character. Each conversion specifier is replaced by appropriate characters in the output as described below.</source>
          <target state="translated">書式文字列は、0個以上の変換指定子と通常の文字で構成されます。終了ヌル文字を除くすべての通常の文字は、変更されずに出力ストリームに書き込まれます。変更されていない各変換指定子は、 &lt;code&gt;%&lt;/code&gt; 文字で始まり、その後に指定子の動作を決定する文字が続きます。一部の変換指定子には、 &lt;code&gt;E&lt;/code&gt; または &lt;code&gt;O&lt;/code&gt; 修飾子文字が &lt;code&gt;%&lt;/code&gt; の後に挿入された変更された形式があります文字のます。以下に説明するように、各変換指定子は出力で適切な文字に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="3945cb192e1c3a5530627de4981979e1dedb2322" translate="yes" xml:space="preserve">
          <source>The format string consists of zero or more conversion specifiers and ordinary characters. Each ordinary character, excluding whitespace characters and the terminating null character, matches one identical character from the input stream, or causes the function to fail if the next character on the stream does not compare equal.</source>
          <target state="translated">フォーマット文字列は,0個以上の変換指定子と通常の文字から構成されます。空白文字と終端のヌル文字を除く各通常文字は,入力ストリームから1つの同一の文字と一致するか,ストリーム上の次の文字が等しくない場合に関数を失敗させます。</target>
        </trans-unit>
        <trans-unit id="ae378d353693d1c7d74c4fd94775d83dcaefd506" translate="yes" xml:space="preserve">
          <source>The format string consists of zero or more conversion specifiers, whitespace characters, and ordinary characters (except &lt;code&gt;%&lt;/code&gt;). Each ordinary character is expected to match one character in the input stream in case-insensitive comparison. Each whitespace character matches arbitrary whitespace in the input string. Each conversion specification begins with &lt;code&gt;%&lt;/code&gt; character, optionally followed by &lt;code&gt;E&lt;/code&gt; or &lt;code&gt;O&lt;/code&gt; modifier (ignored if unsupported by the locale), followed by the character that determines the behavior of the specifier. The format specifiers match the POSIX function &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/strptime.html&quot;&gt;strptime()&lt;/a&gt;:</source>
          <target state="translated">書式文字列は、0個以上の変換指定子、空白文字、および通常の文字（ &lt;code&gt;%&lt;/code&gt; を除く）で構成されます。大文字と小文字を区別しない比較では、通常の各文字が入力ストリームの1文字と一致することが期待されます。各空白文字は、入力文字列の任意の空白と一致します。各変換仕様は &lt;code&gt;%&lt;/code&gt; 文字で始まり、オプションで &lt;code&gt;E&lt;/code&gt; または &lt;code&gt;O&lt;/code&gt; 修飾子（ロケールでサポートされていない場合は無視されます）が続き、その後に指定子の動作を決定する文字が続きます。形式指定子は、POSIX関数&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/strptime.html&quot;&gt;strptime（）と&lt;/a&gt;一致します。</target>
        </trans-unit>
        <trans-unit id="5d35574333561b6d7197206a894209f7b4dca21b" translate="yes" xml:space="preserve">
          <source>The format string consists of.</source>
          <target state="translated">フォーマット文字列は、次のように構成されています。</target>
        </trans-unit>
        <trans-unit id="f557203d9607d6c00cf9156c3eb7b68888a42acd" translate="yes" xml:space="preserve">
          <source>The formatting &lt;code&gt;&lt;a href=&quot;../money_base&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; used by this function is always &lt;code&gt;mp.neg_format()&lt;/code&gt;.</source>
          <target state="translated">この関数で使用されるフォーマット &lt;code&gt;&lt;a href=&quot;../money_base&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; は常に &lt;code&gt;mp.neg_format()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="36de08c85d1411e27803f51f67e99c60bb0859a9" translate="yes" xml:space="preserve">
          <source>The friend declaration appears in a &lt;a href=&quot;class&quot;&gt;class body&lt;/a&gt; and grants a function or another class access to private and protected members of the class where the friend declaration appears.</source>
          <target state="translated">フレンド宣言は&lt;a href=&quot;class&quot;&gt;クラス本体に&lt;/a&gt;表示されます関数または別のクラスプライベートおよび保護されたメンバーへのアクセスを許可します。</target>
        </trans-unit>
        <trans-unit id="f1e777bed230647173e4ad51c340e8839794d4c2" translate="yes" xml:space="preserve">
          <source>The full contents of a floating-point exception flag is not necessarily a boolean value indicating whether the exception is raised or cleared. For example, it may be a struct which includes the boolean status and the address of the code that triggered the exception. These functions obtain all such content and obtain/store it in &lt;code&gt;flagp&lt;/code&gt; in implementation-defined format.</source>
          <target state="translated">浮動小数点例外フラグの完全な内容は、例外が発生するかクリアされるかを示すブール値であるとは限りません。たとえば、ブールステータスと例外をトリガーしたコードのアドレスを含む構造体である場合があります。これらの関数は、このようなコンテンツをすべて取得し、実装定義の形式で &lt;code&gt;flagp&lt;/code&gt; に取得/保存します。</target>
        </trans-unit>
        <trans-unit id="3f3faeb997d1ed337e80e4abb047a6ba3e3e7ebc" translate="yes" xml:space="preserve">
          <source>The full path the directory entry refers to.</source>
          <target state="translated">ディレクトリエントリが参照するフルパス。</target>
        </trans-unit>
        <trans-unit id="3d6b6fb5d314fe36dd9f31283cfc562903b69b1f" translate="yes" xml:space="preserve">
          <source>The function (or member) name specified by &lt;code&gt;E&lt;/code&gt; can be overloaded, &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt; rules used to decide which overload is to be called.</source>
          <target state="translated">&lt;code&gt;E&lt;/code&gt; で指定された関数（またはメンバー）名は、&lt;a href=&quot;overload_resolution&quot;&gt;オーバーロード&lt;/a&gt;可能で、オーバーロード解決どのオーバーロードを呼び出すかを決定するために使用される規則。</target>
        </trans-unit>
        <trans-unit id="e82b0b07e6f429ee9f9368f05dad9fa0ba43d37a" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;TC::now()&lt;/code&gt; does not throw exceptions.</source>
          <target state="translated">関数 &lt;code&gt;TC::now()&lt;/code&gt; は例外をスローしません。</target>
        </trans-unit>
        <trans-unit id="0e4cb90e10ef6ef7003e78c1e00b67a01ecdf0f5" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;canonical()&lt;/code&gt; is modeled after the POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/realpath.html&quot;&gt;realpath&lt;/a&gt;.</source>
          <target state="translated">関数 &lt;code&gt;canonical()&lt;/code&gt; はPOSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/realpath.html&quot;&gt;realpathを&lt;/a&gt;モデルにしていますます。</target>
        </trans-unit>
        <trans-unit id="83d5158312c85ad69a25e7f6c7b3eb92ed2aac66" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;std::frexp&lt;/code&gt;, together with its dual, &lt;code&gt;&lt;a href=&quot;ldexp&quot;&gt;std::ldexp&lt;/a&gt;&lt;/code&gt;, can be used to manipulate the representation of a floating-point number without direct bit manipulations.</source>
          <target state="translated">関数 &lt;code&gt;std::frexp&lt;/code&gt; とそのデュアル &lt;code&gt;&lt;a href=&quot;ldexp&quot;&gt;std::ldexp&lt;/a&gt;&lt;/code&gt; 、直接ビット操作することなく、浮動小数点数の表現を操作するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="7a6d7907ee719b354792f98bec95c1316c2a0690" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;std::ldexp&lt;/code&gt; (&quot;load exponent&quot;), together with its dual, &lt;code&gt;&lt;a href=&quot;frexp&quot;&gt;std::frexp&lt;/a&gt;&lt;/code&gt;, can be used to manipulate the representation of a floating-point number without direct bit manipulations.</source>
          <target state="translated">関数 &lt;code&gt;std::ldexp&lt;/code&gt; （ &quot;load exponent&quot;）とそのデュアル &lt;code&gt;&lt;a href=&quot;frexp&quot;&gt;std::frexp&lt;/a&gt;&lt;/code&gt; 、ビットを直接操作せずに浮動小数点数の表現を操作できます。</target>
        </trans-unit>
        <trans-unit id="57c5dfaac85f79a223adb7359ed5cef42e000f8a" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;weakly_canonical()&lt;/code&gt; was introduced to simplify operational semantics of &lt;a href=&quot;relative&quot;&gt;&lt;code&gt;relative()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">関数 &lt;code&gt;weakly_canonical()&lt;/code&gt; は、&lt;a href=&quot;relative&quot;&gt; &lt;code&gt;relative()&lt;/code&gt; の&lt;/a&gt;操作セマンティクスを簡素化するために導入されました。</target>
        </trans-unit>
        <trans-unit id="65499eb81228ba91e476f471dc5abca02679437e" translate="yes" xml:space="preserve">
          <source>The function accepts (and does nothing with) the null pointer to reduce the amount of special-casing. Whether allocation succeeds or not, the pointer returned by an allocation function can be passed to &lt;code&gt;std::free&lt;/code&gt;.</source>
          <target state="translated">この関数は、特殊なケースの量を減らすために、nullポインターを受け入れます（何もしません）。割り当てが成功したかどうかにかかわらず、割り当て関数から返されたポインタは &lt;code&gt;std::free&lt;/code&gt; 渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2446536a1064ed7b3941beeb277b791515eaa68b" translate="yes" xml:space="preserve">
          <source>The function body is a &lt;a href=&quot;statements#Compound_statements&quot;&gt;compound statement&lt;/a&gt; (sequence of zero or more statements surrounded by a pair of curly braces), which is executed when the function call is made.</source>
          <target state="translated">関数本体は、&lt;a href=&quot;statements#Compound_statements&quot;&gt;複合ステートメント&lt;/a&gt;（中括弧のペアで囲まれた0個以上のステートメントのシーケンス）であり、関数呼び出しが行われたときに実行されます。</target>
        </trans-unit>
        <trans-unit id="c3d08aba422a7497ce575560818de2b5e3664ee2" translate="yes" xml:space="preserve">
          <source>The function call expressions have the form.</source>
          <target state="translated">関数呼び出し式は、形式を持っています。</target>
        </trans-unit>
        <trans-unit id="ef5f5323e424bfd7a1f80cd467bc80719cc4bc17" translate="yes" xml:space="preserve">
          <source>The function called by a user-defined literal is known as</source>
          <target state="translated">ユーザー定義リテラルによって呼び出される関数は</target>
        </trans-unit>
        <trans-unit id="21d35ce53dec97b605e35fbf4bfeaf3e6b25267e" translate="yes" xml:space="preserve">
          <source>The function calls &lt;code&gt;&lt;a href=&quot;sbumpc&quot;&gt;sbumpc()&lt;/a&gt;&lt;/code&gt; to advance the input sequence. If that function returns &lt;code&gt;Traits::eof()&lt;/code&gt; meaning that input sequence has been exhausted and &lt;code&gt;&lt;a href=&quot;uflow&quot;&gt;uflow()&lt;/a&gt;&lt;/code&gt; could not retrieve more data, &lt;code&gt;Traits::eof()&lt;/code&gt; is returned. Otherwise &lt;code&gt;&lt;a href=&quot;sgetc&quot;&gt;sgetc()&lt;/a&gt;&lt;/code&gt; is called in order to read the character.</source>
          <target state="translated">関数は &lt;code&gt;&lt;a href=&quot;sbumpc&quot;&gt;sbumpc()&lt;/a&gt;&lt;/code&gt; を呼び出して、入力シーケンスを進めます。その関数が &lt;code&gt;Traits::eof()&lt;/code&gt; 返し、入力シーケンスが使い果たされ、 &lt;code&gt;&lt;a href=&quot;uflow&quot;&gt;uflow()&lt;/a&gt;&lt;/code&gt; がそれ以上データを取得できなかった場合、 &lt;code&gt;Traits::eof()&lt;/code&gt; が返されます。それ以外の場合は &lt;code&gt;&lt;a href=&quot;sgetc&quot;&gt;sgetc()&lt;/a&gt;&lt;/code&gt; 、文字を読み取るためにが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e8f1319f9d6ef5782692a77b9fd4057196ea681b" translate="yes" xml:space="preserve">
          <source>The function can be implemented with the return type different from &lt;code&gt;&lt;a href=&quot;../valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt;. In this case, the replacement type has the following properties:</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;../valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt; とは異なる戻り値の型で実装できます。この場合、置換タイプには次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="c822a40a4534bfa3e5439e5ab35928c6a3a344b3" translate="yes" xml:space="preserve">
          <source>The function can be used only if &lt;code&gt;operator&amp;lt;&lt;/code&gt; is defined for type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">この関数は、タイプ &lt;code&gt;T&lt;/code&gt; に &lt;code&gt;operator&amp;lt;&lt;/code&gt; が定義されている場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="882d329b93dcad39ff502adfce6844369dd33e8b" translate="yes" xml:space="preserve">
          <source>The function can be used only if &lt;code&gt;operator+=&lt;/code&gt; is defined for type &lt;code&gt;T&lt;/code&gt;. If the &lt;code&gt;std::valarray&lt;/code&gt; is empty, the behavior is undefined. The order in which the elements are processed by this function is unspecified.</source>
          <target state="translated">この関数は、タイプ &lt;code&gt;T&lt;/code&gt; に &lt;code&gt;operator+=&lt;/code&gt; が定義されている場合にのみ使用できます。 &lt;code&gt;std::valarray&lt;/code&gt; 場合空で、動作は未定義です。この関数が要素を処理する順序は指定されていません。</target>
        </trans-unit>
        <trans-unit id="91f7fe88eabe258e81ae01d0f690791e30dabd0d" translate="yes" xml:space="preserve">
          <source>The function does not participate in overload resolution unless &lt;code&gt;ToDuration&lt;/code&gt; is an instance of &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ToDuration&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; インスタンスでない限り、関数はオーバーロード解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="b0d7738f85da6ab4917bf056d0bb5e776378bfa8" translate="yes" xml:space="preserve">
          <source>The function does not participate in the overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;Rep&amp;gt;::is_signed&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;Rep&amp;gt;::is_signed&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; でない限り、関数はオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="3f53989ed7fe6b85b91be67846d454e5a5091efc" translate="yes" xml:space="preserve">
          <source>The function does not participate in the overload resolution unless &lt;code&gt;ToDuration&lt;/code&gt; is an instance of &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../treat_as_floating_point&quot;&gt;std::chrono::treat_as_floating_point&lt;/a&gt;&amp;lt;typename ToDuration::rep&amp;gt;::value&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ToDuration&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; インスタンスであり、 &lt;code&gt;&lt;a href=&quot;../treat_as_floating_point&quot;&gt;std::chrono::treat_as_floating_point&lt;/a&gt;&amp;lt;typename ToDuration::rep&amp;gt;::value&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; でない限り、関数はオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="2bf9d721422f351f851c897408c2ce6f0621c92c" translate="yes" xml:space="preserve">
          <source>The function does not participate in the overload resolution unless &lt;code&gt;ToDuration&lt;/code&gt; is an instance of &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ToDuration&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; インスタンスでない限り、関数はオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="38127f74fcf3c7345c5f5fdb8dc95f19e70fd613" translate="yes" xml:space="preserve">
          <source>The function does not participate in the overload resolution unless &lt;code&gt;ToDuration&lt;/code&gt; is an specialization of &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../treat_as_floating_point&quot;&gt;std::chrono::treat_as_floating_point&lt;/a&gt;&amp;lt;typename ToDuration::rep&amp;gt;::value&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ToDuration&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 特殊化であり、 &lt;code&gt;&lt;a href=&quot;../treat_as_floating_point&quot;&gt;std::chrono::treat_as_floating_point&lt;/a&gt;&amp;lt;typename ToDuration::rep&amp;gt;::value&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; でない限り、関数はオーバーロード解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="4dd86d349303d51526c774f537efd9b40b552f98" translate="yes" xml:space="preserve">
          <source>The function does not participate in the overload resolution unless &lt;code&gt;ToDuration&lt;/code&gt; is an specialization of &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ToDuration&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 特殊化でない限り、関数はオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="126f425397cb45dc94e0836b07e8eefad9995278" translate="yes" xml:space="preserve">
          <source>The function does not support localization, and the newline character cannot be removed.</source>
          <target state="translated">この関数はローカライズをサポートしておらず、改行文字を削除することはできません。</target>
        </trans-unit>
        <trans-unit id="072cec0bee6f6155df5b228611698b2538fe2d6d" translate="yes" xml:space="preserve">
          <source>The function does not support localization.</source>
          <target state="translated">この機能はローカライズをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="b9ca2d431e6b4c994632d537c675b64adb91091c" translate="yes" xml:space="preserve">
          <source>The function drops any effects from previous calls to &lt;code&gt;ungetc&lt;/code&gt;.</source>
          <target state="translated">この関数は、以前の &lt;code&gt;ungetc&lt;/code&gt; の呼び出しからの影響をすべて削除します。</target>
        </trans-unit>
        <trans-unit id="23ccd8cd43cb3d597e337e15d54fe5c87828b3ec" translate="yes" xml:space="preserve">
          <source>The function has mathematical poles at &amp;pi;(1/2 + n); however no common floating-point representation is able to represent &amp;pi;/2 exactly, thus there is no value of the argument for which a pole error occurs.</source>
          <target state="translated">関数には、&amp;pi;（1/2 + n）に数学的な極があります。ただし、一般的な浮動小数点表現では&amp;pi;/ 2を正確に表現できないため、極エラーが発生する引数の値はありません。</target>
        </trans-unit>
        <trans-unit id="af880fe541df16b2fd4a74d41e9903882d62887d" translate="yes" xml:space="preserve">
          <source>The function is continuous onto the branch cut taking into account the sign of imaginary part</source>
          <target state="translated">関数は虚部の符号を考慮して分岐部に連続しています。</target>
        </trans-unit>
        <trans-unit id="064517df7162e7c80b05f70d0c1d72dcf596b5e9" translate="yes" xml:space="preserve">
          <source>The function is equivalent to &lt;code&gt;&lt;a href=&quot;fseek&quot;&gt;std::fseek&lt;/a&gt;(stream, 0, &lt;a href=&quot;../c&quot;&gt;SEEK_SET&lt;/a&gt;);&lt;/code&gt;, except that end-of-file and error indicators are cleared.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;fseek&quot;&gt;std::fseek&lt;/a&gt;(stream, 0, &lt;a href=&quot;../c&quot;&gt;SEEK_SET&lt;/a&gt;);&lt;/code&gt; と同等です。。ただし、ファイルの終わりとエラーのインジケータがクリアされる点が異なります。</target>
        </trans-unit>
        <trans-unit id="75e35cecac837fab428a324853818b53ded0ac11" translate="yes" xml:space="preserve">
          <source>The function is named after the integer function ⍳ from the programming language APL. It was one of the &lt;a href=&quot;http://www.sgi.com/tech/stl/iota.html&quot;&gt;STL components&lt;/a&gt; that were not included in C++98, but eventually made it into the standard library in C++11.</source>
          <target state="translated">この関数は、プログラミング言語APLの整数関数afterにちなんで名付けられています。これは、C ++ 98に含まれていない&lt;a href=&quot;http://www.sgi.com/tech/stl/iota.html&quot;&gt;STLコンポーネントの&lt;/a&gt; 1つでしたが、最終的にはC ++ 11の標準ライブラリに組み込まれました。</target>
        </trans-unit>
        <trans-unit id="e9eb4c7699e43ce8f08f56257eff79ffdcf27b49" translate="yes" xml:space="preserve">
          <source>The function is not required to be defined for |x|&amp;gt;1</source>
          <target state="translated">| x |&amp;gt; 1に対して関数を定義する必要はありません</target>
        </trans-unit>
        <trans-unit id="b0d406efcda5923258fa6e7ba435edf7afdbb66b" translate="yes" xml:space="preserve">
          <source>The function is only required to be defined where both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are greater than zero, and is allowed to report a domain error otherwise.</source>
          <target state="translated">関数は、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の両方がゼロより大きい場合にのみ定義する必要があり、そうでない場合はドメインエラーを報告できます。</target>
        </trans-unit>
        <trans-unit id="6034c35371ebcc562e4d00c27057a576e4fdd7db" translate="yes" xml:space="preserve">
          <source>The function may update &lt;code&gt;gptr&lt;/code&gt;, &lt;code&gt;egptr&lt;/code&gt; and &lt;code&gt;eback&lt;/code&gt; pointers to define the location of newly loaded data (if any). On failure, the function ensures that either &lt;code&gt;gptr() == nullptr&lt;/code&gt; or &lt;code&gt;gptr() == egptr&lt;/code&gt;.</source>
          <target state="translated">関数は &lt;code&gt;gptr&lt;/code&gt; 、 &lt;code&gt;egptr&lt;/code&gt; および &lt;code&gt;eback&lt;/code&gt; ポインターを更新して、新しくロードされたデータ（存在する場合）の場所を定義します。失敗した場合、関数は &lt;code&gt;gptr() == nullptr&lt;/code&gt; または &lt;code&gt;gptr() == egptr&lt;/code&gt; いずれかを保証します。</target>
        </trans-unit>
        <trans-unit id="e7a7a46183956d552300dee684d15128ebe48ebf" translate="yes" xml:space="preserve">
          <source>The function may update &lt;code&gt;pptr&lt;/code&gt;, &lt;code&gt;epptr&lt;/code&gt; and &lt;code&gt;pbase&lt;/code&gt; pointers to define the location to write more data. On failure, the function ensures that either &lt;code&gt;pptr() == nullptr&lt;/code&gt; or &lt;code&gt;pptr() == epptr&lt;/code&gt;.</source>
          <target state="translated">更新することができる機能 &lt;code&gt;pptr&lt;/code&gt; 、 &lt;code&gt;epptr&lt;/code&gt; および &lt;code&gt;pbase&lt;/code&gt; ポインタは、より多くのデータを書き込むために位置を定義します。失敗した場合、関数は &lt;code&gt;pptr() == nullptr&lt;/code&gt; または &lt;code&gt;pptr() == epptr&lt;/code&gt; いずれかを保証します。</target>
        </trans-unit>
        <trans-unit id="15af0ce237ff3b3144c6a868b8ee125006a14e71" translate="yes" xml:space="preserve">
          <source>The function modifies static storage and is not thread-safe.</source>
          <target state="translated">この関数は静的ストレージを変更し、スレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="ab3db171e79e2989a832c6ee9c99d6df12884a1d" translate="yes" xml:space="preserve">
          <source>The function modifies the pointer only if it would be possible to fit the wanted number of bytes aligned by the given alignment into the buffer. If the buffer is too small, the function does nothing and returns &lt;code&gt;nullptr&lt;/code&gt;.</source>
          <target state="translated">関数は、指定された配置によって配置された必要なバイト数をバッファーに収めることができる場合にのみ、ポインターを変更します。バッファが小さすぎる場合、関数は何もせず &lt;code&gt;nullptr&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bc27df1dece75c7950d8306c4124d7ab25b1a17f" translate="yes" xml:space="preserve">
          <source>The function must not modify the objects passed to it and must return consistent results when called for the same objects, regardless of their positions in the array.</source>
          <target state="translated">この関数は、渡されたオブジェクトを変更してはいけません。また、同じオブジェクトに対して呼び出された場合は、配列内の位置に関係なく一貫した結果を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="6f186c1fa81fe391780ded04d401cc94118bdba5" translate="yes" xml:space="preserve">
          <source>The function name stands for &quot;complementary span&quot;</source>
          <target state="translated">関数名は &quot;complementary span &quot;の略です。</target>
        </trans-unit>
        <trans-unit id="db20681f76479d1a2df4829db6ccf4a0a080e0ef" translate="yes" xml:space="preserve">
          <source>The function name stands for &quot;new scalb&quot;, where &lt;code&gt;scalb&lt;/code&gt; was an older non-standard function whose second argument had floating-point type.</source>
          <target state="translated">関数名は「新しいscalb」を表します。ここで、 &lt;code&gt;scalb&lt;/code&gt; は2番目の引数が浮動小数点型の古い非標準関数でした。</target>
        </trans-unit>
        <trans-unit id="c9dcfedf49fa204154f0431b2673a0daebcd06a5" translate="yes" xml:space="preserve">
          <source>The function object &lt;code&gt;pred&lt;/code&gt; shall not apply any non-constant function through the dereferenced iterator. This function object may be a pointer to function or an object of a type with an appropriate function call operator.</source>
          <target state="translated">関数オブジェクト &lt;code&gt;pred&lt;/code&gt; は、間接参照されたイテレータを通じて非定数関数を適用しません。この関数オブジェクトは、関数へのポインター、または適切な関数呼び出し演算子を持つ型のオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="fec4de0270a6f3097d68f50b43e7edfb64e10dc9" translate="yes" xml:space="preserve">
          <source>The function parameters that do not participate in template argument deduction (e.g. if the corresponding template arguments are explicitly specified) are subject to implicit conversions to the type of the corresponding function parameter (as in the usual &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;).</source>
          <target state="translated">テンプレート引数の推定に参加しない関数パラメーター（対応するテンプレート引数が明示的に指定されている場合など）は、対応する関数パラメーターの型への暗黙的な変換の対象になります（通常の&lt;a href=&quot;overload_resolution&quot;&gt;オーバーロード解決と&lt;/a&gt;同様）。</target>
        </trans-unit>
        <trans-unit id="7eeb93d2b7dca68685dc425373a6764fb01e3729" translate="yes" xml:space="preserve">
          <source>The function provides no means to prevent buffer overflow of the destination array, given sufficiently long input string. &lt;code&gt;std::gets&lt;/code&gt; was deprecated in C++11 and removed from C++14.</source>
          <target state="translated">この関数は、十分に長い入力文字列が与えられた場合、宛先配列のバッファオーバーフローを防止する手段を提供しません。 &lt;code&gt;std::gets&lt;/code&gt; はC ++ 11で廃止され、C ++ 14から削除されました。</target>
        </trans-unit>
        <trans-unit id="fa9dad8347dfb2e0d670a4af83e853b0527c897a" translate="yes" xml:space="preserve">
          <source>The function template &lt;code&gt;bind&lt;/code&gt; generates a forwarding call wrapper for &lt;code&gt;f&lt;/code&gt;. Calling this wrapper is equivalent to invoking &lt;code&gt;f&lt;/code&gt; with some of its arguments bound to &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">関数テンプレート &lt;code&gt;bind&lt;/code&gt; は、 &lt;code&gt;f&lt;/code&gt; の転送呼び出しラッパーを生成します。このラッパーを呼び出すことは、引数の一部を &lt;code&gt;args&lt;/code&gt; にバインドして &lt;code&gt;f&lt;/code&gt; を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="1b74686fedbb22b834206589460eadd916d0aa6c" translate="yes" xml:space="preserve">
          <source>The function template &lt;code&gt;bind_front&lt;/code&gt; generates a forwarding call wrapper for &lt;code&gt;f&lt;/code&gt;. Calling this wrapper is equivalent to invoking &lt;code&gt;f&lt;/code&gt; with its first &lt;code&gt;sizeof...(Args)&lt;/code&gt; parameters bound to &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">関数テンプレート &lt;code&gt;bind_front&lt;/code&gt; は、 &lt;code&gt;f&lt;/code&gt; の転送呼び出しラッパーを生成しますます。このラッパーを呼び出すことは、最初の &lt;code&gt;sizeof...(Args)&lt;/code&gt; パラメーターを &lt;code&gt;args&lt;/code&gt; にバインドして &lt;code&gt;f&lt;/code&gt; を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="a42b57be9690e30b4d127d5c56b2e136867973a2" translate="yes" xml:space="preserve">
          <source>The function templates #1 and #3 have different signatures and are distinct templates. Nonetheless, #2 and #4, despite being instantiations of different function templates, have the same mangled name &lt;a href=&quot;https://github.com/itanium-cxx-abi/cxx-abi/issues/20&quot;&gt;in the Itanium C++ ABI&lt;/a&gt; (&lt;code&gt;_Z4funcI1XLi0EEvv&lt;/code&gt;), meaning that the linker will erroneously consider them to be the same entity.</source>
          <target state="translated">関数テンプレート＃1と＃3はシグネチャが異なり、異なるテンプレートです。それにもかかわらず、＃2と＃4は、異なる関数テンプレートのインスタンス化であるにもかかわらず&lt;a href=&quot;https://github.com/itanium-cxx-abi/cxx-abi/issues/20&quot;&gt;、Itanium C ++ ABI&lt;/a&gt;（ &lt;code&gt;_Z4funcI1XLi0EEvv&lt;/code&gt; ）で同じ符号化された名前を持ちます。つまり、リンカーはそれらを誤って同じエンティティと見なします。</target>
        </trans-unit>
        <trans-unit id="1661ab084a02d0a0b4022e49867df5380e8a9ad8" translate="yes" xml:space="preserve">
          <source>The function templates are then ranked as if for &lt;a href=&quot;function_template#Function_template_overloading&quot;&gt;function template overloading&lt;/a&gt;.</source>
          <target state="translated">関数テンプレートは、&lt;a href=&quot;function_template#Function_template_overloading&quot;&gt;関数テンプレートのオーバーロードの&lt;/a&gt;場合と同様にランク付けされます。</target>
        </trans-unit>
        <trans-unit id="7c3559ff21a7ec0a87fd87249ee0c6ee1ced4a14" translate="yes" xml:space="preserve">
          <source>The function then returns the pointer to the beginning of the token</source>
          <target state="translated">その後、この関数はトークンの先頭へのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="4126da2324b4eb270d68c514e43af8301f52dd63" translate="yes" xml:space="preserve">
          <source>The function to calculate the result has not been started yet</source>
          <target state="translated">結果を計算する関数はまだ起動していません。</target>
        </trans-unit>
        <trans-unit id="eb957ebe7149eefbfbfc9fa1905a6cdb297d02f9" translate="yes" xml:space="preserve">
          <source>The function type of the function template is &lt;code&gt;P&lt;/code&gt;. The &lt;a href=&quot;overloaded_address&quot;&gt;target type&lt;/a&gt; is the type of &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">関数テンプレートの関数タイプは &lt;code&gt;P&lt;/code&gt; です。の&lt;a href=&quot;overloaded_address&quot;&gt;ターゲット・タイプは&lt;/a&gt;のタイプである &lt;code&gt;A&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d62041d0f93824e7e4927764fa5aa1df2523bc0c" translate="yes" xml:space="preserve">
          <source>The function-call operator is always &lt;code&gt;constexpr&lt;/code&gt; if it satisfies the requirements of a &lt;a href=&quot;constexpr&quot;&gt;constexpr function&lt;/a&gt;. It is also constexpr if the keyword constexpr was used in the lambda declaration.</source>
          <target state="translated">関数呼び出し演算子は常に &lt;code&gt;constexpr&lt;/code&gt; です、&lt;a href=&quot;constexpr&quot;&gt;constexpr関数の&lt;/a&gt;要件を満たす場合、です。キーワードconstexprがラムダ宣言で使用された場合もconstexprです。</target>
        </trans-unit>
        <trans-unit id="90237372df253176f7201dadf305ca2efdb82ba0" translate="yes" xml:space="preserve">
          <source>The function-call operator is an &lt;a href=&quot;consteval&quot;&gt;immediate function&lt;/a&gt; if the keyword &lt;code&gt;consteval&lt;/code&gt; was used in the lambda expression.</source>
          <target state="translated">関数呼び出し演算子は&lt;a href=&quot;consteval&quot;&gt;即時関数です&lt;/a&gt;キーワード &lt;code&gt;consteval&lt;/code&gt; がラムダ式で使用された場合、です。</target>
        </trans-unit>
        <trans-unit id="18222cb267ac69f3312ca400b95bb5960956fbce" translate="yes" xml:space="preserve">
          <source>The function-call operators of T are obtained by ordinary &lt;a href=&quot;lookup&quot;&gt;lookup&lt;/a&gt; of the name &lt;code&gt;operator()&lt;/code&gt; in the context of the expression &lt;code&gt;(E).operator()&lt;/code&gt;, and every declaration found is added to the set of candidate functions.</source>
          <target state="translated">Tの関数呼び出し演算子は、名前 &lt;code&gt;operator()&lt;/code&gt; の通常の&lt;a href=&quot;lookup&quot;&gt;検索&lt;/a&gt;によって取得されます。、式 &lt;code&gt;(E).operator()&lt;/code&gt; のコンテキストでれ、見つかったすべての宣言が候補関数のセットに追加されます。</target>
        </trans-unit>
        <trans-unit id="5f03f8854c3dadb42ebc1a2f13e6f98271799bab" translate="yes" xml:space="preserve">
          <source>The function-like entities described on this page are</source>
          <target state="translated">このページに記載されている機能的なエンティティは</target>
        </trans-unit>
        <trans-unit id="c90c3720bc6cd842ff45d50c455cbeb05ef64826" translate="yes" xml:space="preserve">
          <source>The function-try-block is one of the alternative syntax forms for function-body, which is a part of &lt;a href=&quot;function&quot;&gt;function definition&lt;/a&gt;.</source>
          <target state="translated">function-try-blockは、function-bodyの代替構文形式の1つです。これは、 &lt;a href=&quot;function&quot;&gt;関数定義の&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7d70566d5bc405ba10ba5bb68262596374bff760" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;&lt;a href=&quot;expm1&quot;&gt;std::expm1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;std::log1p&lt;/code&gt; are useful for financial calculations, for example, when calculating small daily interest rates: (1+x)n</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;expm1&quot;&gt;std::expm1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;std::log1p&lt;/code&gt; は、たとえば、毎日の小さな金利を計算するときの財務計算に役立ちます：（1 + x）n</target>
        </trans-unit>
        <trans-unit id="ce063565abd09222888790e9a9d67e9d39a935ae" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;std::expm1&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;log1p&quot;&gt;std::log1p&lt;/a&gt;&lt;/code&gt; are useful for financial calculations, for example, when calculating small daily interest rates: (1+x)n</source>
          <target state="translated">関数 &lt;code&gt;std::expm1&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;log1p&quot;&gt;std::log1p&lt;/a&gt;&lt;/code&gt; は、たとえば、毎日の小さな金利を計算するときの財務計算に役立ちます：（1 + x）n</target>
        </trans-unit>
        <trans-unit id="7d057934f5d91a8d0d5efe334eb2fd28c09a314a" translate="yes" xml:space="preserve">
          <source>The functions may be called concurrently with the destruction of the objects with static storage duration and with each other, maintaining the guarantee that if registration of A was sequenced-before the registration of B, then the call to B is sequenced-before the call to A, same applies to the sequencing between static object constructors and calls to &lt;code&gt;atexit&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数は、静的な保存期間を持つオブジェクトの破棄と同時に、または互いに呼び出すことができ、Aの登録がBの登録の前にシーケンス化されている場合、Bへの呼び出しは、 A、同じことが静的オブジェクトコンストラクターと &lt;code&gt;atexit&lt;/code&gt; の呼び出しの間のシーケンスにも当てはまります &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="3db16cc57db5dbc928e64b1b6ac3975c579a8b6a" translate="yes" xml:space="preserve">
          <source>The functions sets the pointer pointed to by &lt;code&gt;endptr&lt;/code&gt; to point to the character past the last character interpreted. If &lt;code&gt;endptr&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;, it is ignored.</source>
          <target state="translated">関数は、 &lt;code&gt;endptr&lt;/code&gt; が指すポインターを、解釈された最後の文字を過ぎた文字を指すように設定します。 &lt;code&gt;endptr&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; の場合、無視されます。</target>
        </trans-unit>
        <trans-unit id="79e95f56658767e1e470d9215d4b6600bf8174e3" translate="yes" xml:space="preserve">
          <source>The functions sets the pointer pointed to by &lt;code&gt;endptr&lt;/code&gt; to point to the wide character past the last character interpreted. If &lt;code&gt;endptr&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;, it is ignored.</source>
          <target state="translated">関数は、 &lt;code&gt;endptr&lt;/code&gt; が指すポインターを、解釈された最後の文字を超えたワイド文字を指すように設定します。 &lt;code&gt;endptr&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; の場合、無視されます。</target>
        </trans-unit>
        <trans-unit id="69ad6824d6f8c048fddeb1809adb4e0dadf9dc71" translate="yes" xml:space="preserve">
          <source>The functions sets the pointer pointed to by &lt;code&gt;str_end&lt;/code&gt; to point to the character past the last character interpreted. If &lt;code&gt;str_end&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;, it is ignored.</source>
          <target state="translated">関数は、 &lt;code&gt;str_end&lt;/code&gt; が指すポインターを、解釈された最後の文字を過ぎた文字を指すように設定します。 &lt;code&gt;str_end&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; の場合、無視されます。</target>
        </trans-unit>
        <trans-unit id="9c7ec7a3aab98e1d97256af5eb3cd5dd8ac9ef4b" translate="yes" xml:space="preserve">
          <source>The functions sets the pointer pointed to by &lt;code&gt;str_end&lt;/code&gt; to point to the wide character past the last character interpreted. If &lt;code&gt;str_end&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;, it is ignored.</source>
          <target state="translated">関数は、 &lt;code&gt;str_end&lt;/code&gt; が指すポインターを、解釈された最後の文字を超えたワイド文字を指すように設定します。 &lt;code&gt;str_end&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; の場合、無視されます。</target>
        </trans-unit>
        <trans-unit id="f29db516e7cae858024d84b5b0bd244f31b9db50" translate="yes" xml:space="preserve">
          <source>The functions that accept rvalue reference parameters (including &lt;a href=&quot;../language/move_constructor&quot;&gt;move constructors&lt;/a&gt;, &lt;a href=&quot;../language/move_operator&quot;&gt;move assignment operators&lt;/a&gt;, and regular member functions such as &lt;code&gt;&lt;a href=&quot;../container/vector/push_back&quot;&gt;std::vector::push_back&lt;/a&gt;&lt;/code&gt;) are selected, by &lt;a href=&quot;../language/overload_resolution&quot;&gt;overload resolution&lt;/a&gt;, when called with &lt;a href=&quot;../language/value_category&quot;&gt;rvalue&lt;/a&gt; arguments (either &lt;a href=&quot;../language/value_category&quot;&gt;prvalues&lt;/a&gt; such as a temporary objects or &lt;a href=&quot;../language/value_category&quot;&gt;xvalues&lt;/a&gt; such as the one produced by &lt;code&gt;std::move&lt;/code&gt;). If the argument identifies a resource-owning object, these overloads have the option, but aren't required, to</source>
          <target state="translated">右辺値参照パラメーターを受け入れる関数（&lt;a href=&quot;../language/move_constructor&quot;&gt;移動コンストラクター&lt;/a&gt;、&lt;a href=&quot;../language/move_operator&quot;&gt;移動代入演算子&lt;/a&gt;、および通常のメンバー関数など） &lt;code&gt;&lt;a href=&quot;../container/vector/push_back&quot;&gt;std::vector::push_back&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../language/value_category&quot;&gt;値&lt;/a&gt;引数（一時オブジェクトなどの&lt;a href=&quot;../language/value_category&quot;&gt; prvalues）を&lt;/a&gt;指定して呼び出されると、&lt;a href=&quot;../language/overload_resolution&quot;&gt;オーバーロード解決&lt;/a&gt;によって選択されますまたは &lt;code&gt;std::move&lt;/code&gt; によって生成されるような&lt;a href=&quot;../language/value_category&quot;&gt; xvalues&lt;/a&gt;）。引数がリソース所有オブジェクトを識別する場合、これらのオーバーロードにはオプションがありますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="e09608bd7873c020fdfa17e45a1cb9324cfb8735" translate="yes" xml:space="preserve">
          <source>The functions underflow() and overflow()/sync() perform the actual I/O between the file and the get and put areas of the buffer. When &lt;code&gt;CharT&lt;/code&gt; is not &lt;code&gt;char&lt;/code&gt;, most implementations store multibyte characters in the file and a &lt;code&gt;&lt;a href=&quot;../locale/codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; facet is used to perform wide/multibyte character conversion.</source>
          <target state="translated">関数underflow（）およびoverflow（）/ sync（）は、ファイルとバッファのgetおよびput領域の間で実際のI / Oを実行します。 &lt;code&gt;CharT&lt;/code&gt; が &lt;code&gt;char&lt;/code&gt; でない場合、ほとんどの実装はマルチバイト文字をファイルに格納し、 &lt;code&gt;&lt;a href=&quot;../locale/codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; ファセットを使用してワイド/マルチバイト文字変換を実行します。</target>
        </trans-unit>
        <trans-unit id="bffe0d58cdd89a2176e51e07265897958db537f6" translate="yes" xml:space="preserve">
          <source>The functions will be called during the destruction of the static objects, in reverse order: if A was registered before B, then the call to B is made before the call to A. Same applies to the ordering between static object constructors and the calls to &lt;code&gt;atexit&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数は、静的オブジェクトの破棄中に逆の順序で呼び出されます。AがBの前に登録されている場合、Bの呼び出しはAの呼び出しの前に行われます。静的オブジェクトコンストラクターと次の呼び出しの間の順序にも同じことが当てはまります。 &lt;code&gt;atexit&lt;/code&gt; ： &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="aed96e855f7e3173d3f85e69b959cd5f429e28d2" translate="yes" xml:space="preserve">
          <source>The generated random number.</source>
          <target state="translated">生成された乱数。</target>
        </trans-unit>
        <trans-unit id="7e36dee47d5123274fbbdd384f8394bc9448d978" translate="yes" xml:space="preserve">
          <source>The generation of the implicitly-defined copy assignment operator is deprecated(since C++11) if &lt;code&gt;T&lt;/code&gt; has a user-declared destructor or user-declared copy constructor.</source>
          <target state="translated">暗黙的に定義されたコピー代入演算子の生成は（C ++ 11以降）非推奨です。 &lt;code&gt;T&lt;/code&gt; にユーザー宣言のデストラクタまたはユーザー宣言のコピーコンストラクタがある。</target>
        </trans-unit>
        <trans-unit id="9e1eed93866aa0d0e35d2a62d35e689f1a41f754" translate="yes" xml:space="preserve">
          <source>The generation of the implicitly-defined copy constructor is deprecated if &lt;code&gt;T&lt;/code&gt; has a user-defined destructor or user-defined copy assignment operator.</source>
          <target state="translated">暗黙的に定義されたコピーコンストラクタの生成は、 &lt;code&gt;T&lt;/code&gt; にユーザー定義のデストラクタまたはユーザー定義のコピー代入演算子がある。</target>
        </trans-unit>
        <trans-unit id="4f4aa88d036bf2efbab8a357c041b989e684ecb4" translate="yes" xml:space="preserve">
          <source>The generic template and two template specializations each contain a single version of &lt;code&gt;get&lt;/code&gt;. The three versions of &lt;code&gt;get&lt;/code&gt; differ only in the return type.</source>
          <target state="translated">汎用テンプレートと2つのテンプレート特殊化には、それぞれ1つのバージョンの &lt;code&gt;get&lt;/code&gt; が含まれています。 &lt;code&gt;get&lt;/code&gt; の3つのバージョンは、戻り値の型のみが異なります。</target>
        </trans-unit>
        <trans-unit id="7aac1cf4d4dcf6d2df58133c2a7081efc8452b18" translate="yes" xml:space="preserve">
          <source>The global objects &lt;code&gt;std::cerr&lt;/code&gt; and &lt;code&gt;std::wcerr&lt;/code&gt; control output to a stream buffer of implementation-defined type (derived from &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::streambuf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::wstreambuf&lt;/a&gt;&lt;/code&gt;, respectively), associated with the standard C error output stream &lt;code&gt;&lt;a href=&quot;c&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">グローバルオブジェクト &lt;code&gt;std::cerr&lt;/code&gt; および &lt;code&gt;std::wcerr&lt;/code&gt; は、実装定義型のストリームバッファーへの出力を制御します（ &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::streambuf&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::wstreambuf&lt;/a&gt;&lt;/code&gt; から派生）は、標準Cエラー出力ストリーム &lt;code&gt;&lt;a href=&quot;c&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; に関連付けられている、それぞれ。</target>
        </trans-unit>
        <trans-unit id="4cdce0c44ee46c553e1a9e5502ff67dca5ca8589" translate="yes" xml:space="preserve">
          <source>The global objects &lt;code&gt;std::cin&lt;/code&gt; and &lt;code&gt;std::wcin&lt;/code&gt; control input from a stream buffer of implementation-defined type (derived from &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::streambuf&lt;/a&gt;&lt;/code&gt;), associated with the standard C input stream &lt;code&gt;&lt;a href=&quot;c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">グローバルオブジェクト &lt;code&gt;std::cin&lt;/code&gt; および &lt;code&gt;std::wcin&lt;/code&gt; は、実装定義型のストリームバッファーからの入力を制御します（ &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::streambuf&lt;/a&gt;&lt;/code&gt; から派生）は、標準C入力ストリーム &lt;code&gt;&lt;a href=&quot;c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; に関連付けられた、。</target>
        </trans-unit>
        <trans-unit id="461aa84897b843038a6471036df9b6bfd2e5db28" translate="yes" xml:space="preserve">
          <source>The global objects &lt;code&gt;std::clog&lt;/code&gt; and &lt;code&gt;std::wclog&lt;/code&gt; control output to a stream buffer of implementation-defined type (derived from &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::streambuf&lt;/a&gt;&lt;/code&gt;), associated with the standard C output stream &lt;code&gt;&lt;a href=&quot;c&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt;, but, unlike &lt;code&gt;&lt;a href=&quot;cerr&quot;&gt;std::cerr&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;cerr&quot;&gt;std::wcerr&lt;/a&gt;&lt;/code&gt;, these streams are not automatically flushed and not automatically tie()'d with cout.</source>
          <target state="translated">グローバルオブジェクト &lt;code&gt;std::clog&lt;/code&gt; および &lt;code&gt;std::wclog&lt;/code&gt; は、標準C出力ストリーム &lt;code&gt;&lt;a href=&quot;c&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; に関連付けられている、実装定義型（ &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::streambuf&lt;/a&gt;&lt;/code&gt; から派生）のストリームバッファーへの出力を制御しますが、 &lt;code&gt;&lt;a href=&quot;cerr&quot;&gt;std::cerr&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;cerr&quot;&gt;std::wcerr&lt;/a&gt;&lt;/code&gt; とは異なります:: wcerr、これらのストリームは自動的にフラッシュされず、coutで自動的にtie（）されません。</target>
        </trans-unit>
        <trans-unit id="f5f98bba6559b17ed7e6d131e3611a81638ab812" translate="yes" xml:space="preserve">
          <source>The global objects &lt;code&gt;std::cout&lt;/code&gt; and &lt;code&gt;std::wcout&lt;/code&gt; control output to a stream buffer of implementation-defined type (derived from &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::streambuf&lt;/a&gt;&lt;/code&gt;), associated with the standard C output stream &lt;code&gt;&lt;a href=&quot;c&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">グローバルオブジェクト &lt;code&gt;std::cout&lt;/code&gt; および &lt;code&gt;std::wcout&lt;/code&gt; は、標準C出力ストリーム &lt;code&gt;&lt;a href=&quot;c&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; に関連付けられた、実装定義型（ &lt;code&gt;&lt;a href=&quot;basic_streambuf&quot;&gt;std::streambuf&lt;/a&gt;&lt;/code&gt; から派生）のストリームバッファーへの出力を制御します。。</target>
        </trans-unit>
        <trans-unit id="70f50373a3f6e5f0380c536e396a13926eb96f45" translate="yes" xml:space="preserve">
          <source>The goto statement transfers control to the location specified by &lt;a href=&quot;statements#Labels&quot;&gt;label&lt;/a&gt;. The goto statement must be in the same function as the label it is referring, it may appear before or after the label.</source>
          <target state="translated">gotoステートメントは、&lt;a href=&quot;statements#Labels&quot;&gt;labelで&lt;/a&gt;指定された場所に制御を移します。gotoステートメントは、参照しているラベルと同じ関数内にある必要があります。ラベルの前または後に表示できます。</target>
        </trans-unit>
        <trans-unit id="9203ba2e1b9acd8459fc296135b185d6bdec6014" translate="yes" xml:space="preserve">
          <source>The groups are stored as binary values: three-digit group is &lt;code&gt;'\3'&lt;/code&gt;, and 51-digit group is &lt;code&gt;'3'&lt;/code&gt;. The character at index zero of the returned string holds the number of digits in the rightmost group. The character at index 1 holds the number of digits in the second group from the right, etc. The grouping indicated by the last character in the returned string is reused to group all remaining digits in the (left part of) the number.</source>
          <target state="translated">グループはバイナリ値として保存されます。3桁のグループは &lt;code&gt;'\3'&lt;/code&gt; で、51桁のグループは &lt;code&gt;'3'&lt;/code&gt; です。返される文字列のインデックス0の文字は、右端のグループの桁数を保持します。インデックス1の文字は、右から2番目のグループの桁数を保持します。返された文字列の最後の文字が示すグループは、番号の（左側の）残りのすべての桁をグループ化するために再利用されます。</target>
        </trans-unit>
        <trans-unit id="377e30e67488234928e5265aef21fdf60f228f58" translate="yes" xml:space="preserve">
          <source>The guarantee that &lt;code&gt;std::from_chars&lt;/code&gt; can recover every floating-point value formatted by &lt;a href=&quot;to_chars&quot;&gt;&lt;code&gt;std::to_chars&lt;/code&gt;&lt;/a&gt; exactly is only provided if both functions are from the same implementation.</source>
          <target state="translated">&lt;code&gt;std::from_chars&lt;/code&gt; が&lt;a href=&quot;to_chars&quot;&gt; &lt;code&gt;std::to_chars&lt;/code&gt; &lt;/a&gt;によってフォーマットされたすべての浮動小数点値を回復できることの保証両方の機能は同じ実装からであれば、正確にのみ提供されます。</target>
        </trans-unit>
        <trans-unit id="6a78268c72fa332949b19e97ea94c6bd065b9550" translate="yes" xml:space="preserve">
          <source>The guarantee that &lt;code&gt;std::from_chars&lt;/code&gt; can recover every floating-point value formatted by &lt;code&gt;to_chars&lt;/code&gt; exactly is only provided if both functions are from the same implementation.</source>
          <target state="translated">&lt;code&gt;std::from_chars&lt;/code&gt; が &lt;code&gt;to_chars&lt;/code&gt; によってフォーマットされたすべての浮動小数点値を回復できることの保証両方の機能は同じ実装からであれば、正確にのみ設けられています。</target>
        </trans-unit>
        <trans-unit id="bb6a61b9c44ca51fc2d67b8e734fd60e0f744ad5" translate="yes" xml:space="preserve">
          <source>The hash code of the associated &lt;code&gt;type_info&lt;/code&gt; object.</source>
          <target state="translated">関連する &lt;code&gt;type_info&lt;/code&gt; オブジェクトのハッシュコード。</target>
        </trans-unit>
        <trans-unit id="b862a5e504b0376ea8c84c346ba305c970071424" translate="yes" xml:space="preserve">
          <source>The hash function.</source>
          <target state="translated">ハッシュ関数です。</target>
        </trans-unit>
        <trans-unit id="3937832fedbe42cd580633aa32952bacd6b0b437" translate="yes" xml:space="preserve">
          <source>The hash value that respects collation order.</source>
          <target state="translated">照合順序を考慮したハッシュ値。</target>
        </trans-unit>
        <trans-unit id="e822b844b21e9499cc3d98cbf3f05f1abdf07e6d" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;../header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt; provides a set of concepts and related utility templates designed to ease constraining common algorithm operations.</source>
          <target state="translated">ヘッダー&lt;a href=&quot;../header/iterator&quot;&gt; &lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt; &lt;/a&gt;は、一般的なアルゴリズム操作の制約を容易にするために設計された一連の概念と関連するユーティリティテンプレートを提供します。</target>
        </trans-unit>
        <trans-unit id="32774d695cdea646f90e7d021305a854ad71bc9b" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;../header/typeinfo&quot;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt; must be included before using &lt;code&gt;typeid&lt;/code&gt; (if the header is not included, every use of the keyword &lt;code&gt;typeid&lt;/code&gt; makes the program ill-formed.).</source>
          <target state="translated">&lt;code&gt;typeid&lt;/code&gt; を使用する前に、ヘッダー&lt;a href=&quot;../header/typeinfo&quot;&gt;&amp;lt;typeinfo&amp;gt;を&lt;/a&gt;含める必要があります（ヘッダーが含まれていない場合、キーワード &lt;code&gt;typeid&lt;/code&gt; を使用するたびに、プログラムの形式が正しくありません）。</target>
        </trans-unit>
        <trans-unit id="39e45883b37cb57381dea376201d7779a8f05664" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;header/bit&quot;&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;&lt;/a&gt; provides several function templates to access, manipulate, and process individual bits and bit sequences.</source>
          <target state="translated">ヘッダー&lt;a href=&quot;header/bit&quot;&gt; &lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt; &lt;/a&gt;は、個々のビットおよびビットシーケンスにアクセス、操作、および処理するためのいくつかの関数テンプレートを提供します。</target>
        </trans-unit>
        <trans-unit id="c204ad70977b9fc2b727eaecd4f753ba2d1dc617" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;header/cfenv&quot;&gt;&lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt;&lt;/a&gt; defines &lt;a href=&quot;numeric/fenv&quot;&gt;flags and functions related to exceptional floating-point state&lt;/a&gt;, such as overflow and division by zero.</source>
          <target state="translated">ヘッダー&lt;a href=&quot;header/cfenv&quot;&gt; &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt; &lt;/a&gt;は、オーバーフローやゼロ除算などの&lt;a href=&quot;numeric/fenv&quot;&gt;例外的な浮動小数点状態&lt;/a&gt;に関連するフラグと関数を定義します。</target>
        </trans-unit>
        <trans-unit id="0cbc07e97f0d93b88b9c5ece9e00510e37bf2c6a" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;header/cmath&quot;&gt;&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;&lt;/a&gt; also provides several mathematical special functions such as &lt;code&gt;&lt;a href=&quot;numeric/special_math/beta&quot;&gt;std::beta&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;numeric/special_math/hermite&quot;&gt;std::hermite&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;numeric/special_math/cyl_bessel_i&quot;&gt;std::cyl_bessel_i&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ヘッダー&lt;a href=&quot;header/cmath&quot;&gt; &lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;&lt;a href=&quot;numeric/special_math/beta&quot;&gt;std::beta&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;numeric/special_math/hermite&quot;&gt;std::hermite&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;numeric/special_math/cyl_bessel_i&quot;&gt;std::cyl_bessel_i&lt;/a&gt;&lt;/code&gt; などのいくつかの数学的な特殊関数も提供します。</target>
        </trans-unit>
        <trans-unit id="5f4dd67444c139abdd3f7b0de3e2b42f5e337403" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;header/cmath&quot;&gt;&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;&lt;/a&gt; provides &lt;a href=&quot;numeric/math&quot;&gt;standard C library mathematical functions&lt;/a&gt; such as &lt;code&gt;&lt;a href=&quot;numeric/math/fabs&quot;&gt;std::fabs&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;numeric/math/sqrt&quot;&gt;std::sqrt&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;numeric/math/sin&quot;&gt;std::sin&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ヘッダー&lt;a href=&quot;header/cmath&quot;&gt; &lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;&lt;a href=&quot;numeric/math/fabs&quot;&gt;std::fabs&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;numeric/math/sqrt&quot;&gt;std::sqrt&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;numeric/math/sin&quot;&gt;std::sin&lt;/a&gt;&lt;/code&gt; などの&lt;a href=&quot;numeric/math&quot;&gt;標準Cライブラリ数学関数を&lt;/a&gt;提供します。</target>
        </trans-unit>
        <trans-unit id="743b06117d162324a98c31415f3c294f57b66ed9" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt; provides a set of concepts and related utilities designed to ease constraining common algorithm operations.</source>
          <target state="translated">ヘッダー&lt;a href=&quot;header/iterator&quot;&gt; &lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt; &lt;/a&gt;は、一般的なアルゴリズム操作の制約を容易にするために設計された一連の概念と関連ユーティリティを提供します。</target>
        </trans-unit>
        <trans-unit id="508d20b6cea54c392d295d11726346c65aa4b0b3" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;header/numeric&quot;&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;&lt;/a&gt; provides numeric algorithms below:</source>
          <target state="translated">ヘッダー&lt;a href=&quot;header/numeric&quot;&gt; &lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt; &lt;/a&gt;は、以下の数値アルゴリズムを提供します。</target>
        </trans-unit>
        <trans-unit id="ba440bf8e1f8c37da5221f67c871d6fb13769ff0" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;header/random&quot;&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;&lt;/a&gt; defines &lt;a href=&quot;numeric/random&quot;&gt;pseudo-random number generators and numerical distributions&lt;/a&gt;. The header &lt;a href=&quot;header/cstdlib&quot;&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;&lt;/a&gt; also includes C-style random number generation via &lt;code&gt;&lt;a href=&quot;numeric/random/srand&quot;&gt;std::srand&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;numeric/random/rand&quot;&gt;std::rand&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ヘッダー&lt;a href=&quot;header/random&quot;&gt; &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;numeric/random&quot;&gt;疑似乱数ジェネレーターと数値分布を&lt;/a&gt;定義します。ヘッダー&lt;a href=&quot;header/cstdlib&quot;&gt; &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; &lt;/a&gt;には、 &lt;code&gt;&lt;a href=&quot;numeric/random/srand&quot;&gt;std::srand&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;numeric/random/rand&quot;&gt;std::rand&lt;/a&gt;&lt;/code&gt; によるCスタイルの乱数生成も含まれています。</target>
        </trans-unit>
        <trans-unit id="dd8e217a3115bdf6060d0de317017567a06a41d7" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;header/ratio&quot;&gt;&lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt;&lt;/a&gt; provides &lt;a href=&quot;numeric/ratio&quot;&gt;types and functions for manipulating and storing compile-time ratios&lt;/a&gt;.</source>
          <target state="translated">ヘッダー&lt;a href=&quot;header/ratio&quot;&gt; &lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;numeric/ratio&quot;&gt;、コンパイル時の比率を操作および保存するためのタイプと関数を&lt;/a&gt;提供します。</target>
        </trans-unit>
        <trans-unit id="218920ec6c8d077db4c2f0630d45c58c68f68e0c" translate="yes" xml:space="preserve">
          <source>The header &lt;a href=&quot;header/version&quot;&gt;&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/a&gt; supplies implementation-dependent information about the C++ standard library (such as the version number and release date. It also defines the &lt;a href=&quot;utility/feature_test&quot;&gt;library feature-test macros&lt;/a&gt;.</source>
          <target state="translated">ヘッダー&lt;a href=&quot;header/version&quot;&gt; &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; &lt;/a&gt;は、C ++標準ライブラリに関する実装依存の情報（バージョン番号やリリース日など）を提供します。また、&lt;a href=&quot;utility/feature_test&quot;&gt;ライブラリの機能テストマクロ&lt;/a&gt;も定義します。</target>
        </trans-unit>
        <trans-unit id="bf5126087a87a6889e7920c9e1157d0b23d15572" translate="yes" xml:space="preserve">
          <source>The header &lt;code&gt;&amp;lt;exception&amp;gt;&lt;/code&gt; provides several classes and functions related to exception handling in C++ programs.</source>
          <target state="translated">ヘッダー &lt;code&gt;&amp;lt;exception&amp;gt;&lt;/code&gt; は、C ++プログラムでの例外処理に関連するいくつかのクラスと関数を提供します。</target>
        </trans-unit>
        <trans-unit id="bc6caf28cb4847d14f957dc4f821e46a30b84457" translate="yes" xml:space="preserve">
          <source>The header &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; behaves as if it defines (directly or indirectly) an instance of &lt;code&gt;std::ios_base::Init&lt;/code&gt; with static storage duration: this makes it safe to access the standard I/O streams in the constructors and destructors of static objects with &lt;a href=&quot;../../language/initialization#Non-local_variables&quot;&gt;ordered initialization&lt;/a&gt; (as long as &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt; is included in the translation unit before these objects were defined).</source>
          <target state="translated">ヘッダー &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; は、静的ストレージ期間を持つ &lt;code&gt;std::ios_base::Init&lt;/code&gt; インスタンスを（直接的または間接的に）定義するかのように動作します。これにより、静的オブジェクトのコンストラクターおよびデストラクタ内の標準I / Oストリームに安全にアクセスできます。&lt;a href=&quot;../../language/initialization#Non-local_variables&quot;&gt;順序付け初期化&lt;/a&gt;（限り &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt; これらのオブジェクトが定義される前に、翻訳単位に含まれます）。</target>
        </trans-unit>
        <trans-unit id="fd4ecbc573accaaae87826b6f734bf136d186983" translate="yes" xml:space="preserve">
          <source>The header &lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt; defines types and functions used to report error conditions originating from the operating system, streams I/O, &lt;code&gt;&lt;a href=&quot;thread/future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt;, or other low-level APIs.</source>
          <target state="translated">ヘッダー &lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt; は、オペレーティングシステム、ストリームI / O、 &lt;code&gt;&lt;a href=&quot;thread/future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; 、またはその他の低レベルAPIに起因するエラー状態を報告するために使用されるタイプと関数を定義します。</target>
        </trans-unit>
        <trans-unit id="57e8428ad704374a45b4d8a73edeba81162f1a2e" translate="yes" xml:space="preserve">
          <source>The headers &lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt; are meaningless in C++ because the macros they provide in C are language keywords in C++.</source>
          <target state="translated">ヘッダー &lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt; は、C ++で提供されるマクロがC ++の言語キーワードであるため、C ++では無意味です。</target>
        </trans-unit>
        <trans-unit id="7e08bc9e99ec8f39019e1085b8cf1191154179ba" translate="yes" xml:space="preserve">
          <source>The headers &lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tgmath.h&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt; do not contain any content from the C standard library and instead merely include other headers from the C++ standard library. The use of all these headers is deprecated in C++.</source>
          <target state="translated">ヘッダー &lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;tgmath.h&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt; には、C標準ライブラリのコンテンツは含まれず、代わりにC ++標準ライブラリの他のヘッダーが含まれています。これらすべてのヘッダーの使用は、C ++では推奨されていません。</target>
        </trans-unit>
        <trans-unit id="9d743155eef03d9de2f708dc85802d31a16ee771" translate="yes" xml:space="preserve">
          <source>The hexadecimal floating-point literals were not part of C++ until C++17, although they can be parsed and printed by the I/O functions since C++11: both C++ I/O streams when &lt;code&gt;&lt;a href=&quot;../io/manip/fixed&quot;&gt;std::hexfloat&lt;/a&gt;&lt;/code&gt; is enabled and the C I/O streams: &lt;code&gt;&lt;a href=&quot;../io/c/fprintf&quot;&gt;std::printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../io/c/fscanf&quot;&gt;std::scanf&lt;/a&gt;&lt;/code&gt;, etc. See &lt;code&gt;&lt;a href=&quot;../string/byte/strtof&quot;&gt;std::strtof&lt;/a&gt;&lt;/code&gt; for the format description.</source>
          <target state="translated">16進浮動小数点リテラルは、C ++ 17まではC ++の一部ではありませんでしたが、C ++ 11以降は、I / O関数によって解析および出力できます &lt;code&gt;&lt;a href=&quot;../io/manip/fixed&quot;&gt;std::hexfloat&lt;/a&gt;&lt;/code&gt; が有効で、 CI / Oストリーム： &lt;code&gt;&lt;a href=&quot;../io/c/fprintf&quot;&gt;std::printf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../io/c/fscanf&quot;&gt;std::scanf&lt;/a&gt;&lt;/code&gt; などを参照の &lt;code&gt;&lt;a href=&quot;../string/byte/strtof&quot;&gt;std::strtof&lt;/a&gt;&lt;/code&gt; 形式の説明のため。</target>
        </trans-unit>
        <trans-unit id="2bcfe16e4a34071ba0fe16d4ac0cbe3af5aafda3" translate="yes" xml:space="preserve">
          <source>The hinted insert (3,4) does not return a boolean in order to be signature-compatible with positional insert on sequential containers, such as &lt;code&gt;&lt;a href=&quot;../vector/insert&quot;&gt;std::vector::insert&lt;/a&gt;&lt;/code&gt;. This makes it possible to create generic inserters such as &lt;code&gt;&lt;a href=&quot;../../iterator/inserter&quot;&gt;std::inserter&lt;/a&gt;&lt;/code&gt;. One way to check success of a hinted insert is to compare &lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt; before and after.</source>
          <target state="translated">ヒント付き挿入（3,4）は、 &lt;code&gt;&lt;a href=&quot;../vector/insert&quot;&gt;std::vector::insert&lt;/a&gt;&lt;/code&gt; などの順次コンテナでの位置挿入とシグネチャ互換にするためにブール値を返しません。これにより、 &lt;code&gt;&lt;a href=&quot;../../iterator/inserter&quot;&gt;std::inserter&lt;/a&gt;&lt;/code&gt; などの汎用インサーターを作成できます。ヒントのある挿入が成功したかどうかを確認する1つの方法は、前後で&lt;a href=&quot;size&quot;&gt;size（）&lt;/a&gt;を比較することです。</target>
        </trans-unit>
        <trans-unit id="25af4f74a579fcba3c500fb626cf10f9c5227e2b" translate="yes" xml:space="preserve">
          <source>The hinted insert (4-6) does not return a boolean in order to be signature-compatible with positional insert on sequential containers, such as &lt;code&gt;&lt;a href=&quot;../vector/insert&quot;&gt;std::vector::insert&lt;/a&gt;&lt;/code&gt;. This makes it possible to create generic inserters such as &lt;code&gt;&lt;a href=&quot;../../iterator/inserter&quot;&gt;std::inserter&lt;/a&gt;&lt;/code&gt;. One way to check success of a hinted insert is to compare &lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt; before and after.</source>
          <target state="translated">ヒント付き挿入（4-6）は、 &lt;code&gt;&lt;a href=&quot;../vector/insert&quot;&gt;std::vector::insert&lt;/a&gt;&lt;/code&gt; などの順次コンテナでの位置挿入と署名互換にするためにブール値を返しません。これにより、 &lt;code&gt;&lt;a href=&quot;../../iterator/inserter&quot;&gt;std::inserter&lt;/a&gt;&lt;/code&gt; などの汎用インサーターを作成できます。ヒントのある挿入が成功したかどうかを確認する1つの方法は、前後で&lt;a href=&quot;size&quot;&gt;size（）&lt;/a&gt;を比較することです。</target>
        </trans-unit>
        <trans-unit id="60466cfba360b12a497fdcbd2421cdfcee028890" translate="yes" xml:space="preserve">
          <source>The identifier &lt;code&gt;override&lt;/code&gt;, if used, appears immediately after the &lt;a href=&quot;function&quot;&gt;declarator&lt;/a&gt; in the syntax of a member function declaration or a member function definition inside a class definition.</source>
          <target state="translated">識別子の &lt;code&gt;override&lt;/code&gt; が使用されている場合、メンバー関数宣言の構文またはクラス定義内のメンバー関数定義の&lt;a href=&quot;function&quot;&gt;宣言子の&lt;/a&gt;直後に表示されます。</target>
        </trans-unit>
        <trans-unit id="855cd3f29b0c4d0647de6b78163ac3dde4862c47" translate="yes" xml:space="preserve">
          <source>The identifier in any capture without an initializer (other than the &lt;code&gt;this&lt;/code&gt;-capture) is looked up using usual &lt;a href=&quot;lookup&quot;&gt;unqualified name lookup&lt;/a&gt; in the</source>
          <target state="translated">イニシャライザなしのキャプチャの識別子（ &lt;code&gt;this&lt;/code&gt; -capture 以外）は、通常の&lt;a href=&quot;lookup&quot;&gt;非修飾名検索&lt;/a&gt;を使用して検索されます。</target>
        </trans-unit>
        <trans-unit id="e9e7a102d6df5884074f2499d6bb5f69817edee5" translate="yes" xml:space="preserve">
          <source>The identifier then becomes the name of an lvalue that refers to the object bound to said variable.</source>
          <target state="translated">識別子は、この変数にバインドされたオブジェクトを参照する lvalue の名前になります。</target>
        </trans-unit>
        <trans-unit id="822a7edda6406f5fc42188900a3b551e64031aa7" translate="yes" xml:space="preserve">
          <source>The immediate input function &lt;a href=&quot;../basic_istream/readsome&quot;&gt;&lt;code&gt;basic_istream::readsome&lt;/code&gt;&lt;/a&gt;, if &lt;a href=&quot;../basic_streambuf/in_avail&quot;&gt;&lt;code&gt;basic_streambuf::in_avail&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;-1&lt;/code&gt;</source>
          <target state="translated">即時入力関数&lt;a href=&quot;../basic_istream/readsome&quot;&gt; &lt;code&gt;basic_istream::readsome&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;../basic_streambuf/in_avail&quot;&gt; &lt;code&gt;basic_streambuf::in_avail&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;-1&lt;/code&gt; を返す場合）</target>
        </trans-unit>
        <trans-unit id="dc1a01ff9f1f5abac042b758d317c3db71ae72ed" translate="yes" xml:space="preserve">
          <source>The implementation is guaranteed to support the registration of at least &lt;code&gt;32&lt;/code&gt; functions. The exact limit is implementation-defined.</source>
          <target state="translated">実装は、少なくとも &lt;code&gt;32&lt;/code&gt; 個の関数の登録をサポートすることが保証されています。正確な制限は実装定義です。</target>
        </trans-unit>
        <trans-unit id="d765572265bbb1c2ba3ca90d43753fb5f543201a" translate="yes" xml:space="preserve">
          <source>The implementation is required to ensure that the</source>
          <target state="translated">を確保するための実装が求められています。</target>
        </trans-unit>
        <trans-unit id="f14c981912c9ec5ad33b5a6c478bfe2e9cbdf180" translate="yes" xml:space="preserve">
          <source>The implementation may define additional macro constants in &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt; to identify additional floating-point exceptions. All such constants begin with &lt;code&gt;FE_&lt;/code&gt; followed by at least one uppercase letter.</source>
          <target state="translated">実装では、 &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt; で追加のマクロ定数を定義して、追加の浮動小数点例外を識別できます。このような定数はすべて &lt;code&gt;FE_&lt;/code&gt; で始まり、その後に少なくとも1つの大文字が続きます。</target>
        </trans-unit>
        <trans-unit id="22e5ff471a91c192911b7ddaa27337e54bd023f9" translate="yes" xml:space="preserve">
          <source>The implementation may extend the behavior of the first overload of &lt;code&gt;std::async&lt;/code&gt; by enabling additional (implementation-defined) bits in the default launch policy.</source>
          <target state="translated">実装は、デフォルトの起動ポリシーで追加の（実装定義）ビットを有効にすることにより、 &lt;code&gt;std::async&lt;/code&gt; 最初のオーバーロードの動作を拡張できます。</target>
        </trans-unit>
        <trans-unit id="66f2e43503845c9ed791a5293976886ce8971522" translate="yes" xml:space="preserve">
          <source>The implementation may meet the requirements without creating a temporary &lt;code&gt;shared_ptr&lt;/code&gt; object.</source>
          <target state="translated">実装は、一時的な &lt;code&gt;shared_ptr&lt;/code&gt; オブジェクトを作成せずに要件を満たす場合があります。</target>
        </trans-unit>
        <trans-unit id="64697b003de59849a6866340318f593ae74fc065" translate="yes" xml:space="preserve">
          <source>The implementation may meet the requirements without creating a temporary &lt;code&gt;weak_ptr&lt;/code&gt; object.</source>
          <target state="translated">実装は、一時的な &lt;code&gt;weak_ptr&lt;/code&gt; オブジェクトを作成せずに要件を満たす場合があります。</target>
        </trans-unit>
        <trans-unit id="7b237d3793f32597e507f67af416d68948b4ad9d" translate="yes" xml:space="preserve">
          <source>The implementation may support other date formats besides the ones required by the standard.</source>
          <target state="translated">実装は,標準で要求される日付フォーマット以外にも,他の日付フォーマットをサポートしてもよい。</target>
        </trans-unit>
        <trans-unit id="12a35a278ea92405afc482e169257edd666c8c44" translate="yes" xml:space="preserve">
          <source>The implementation shall provide sufficient additional &lt;code&gt;constexpr&lt;/code&gt; and &lt;code&gt;noexcept&lt;/code&gt; overloads of these functions so that a &lt;code&gt;basic_string_view&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt; object &lt;code&gt;sv&lt;/code&gt; may be compared to another object &lt;code&gt;t&lt;/code&gt; with an implicit conversion to &lt;code&gt;basic_string_view&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;, with semantics identical to comparing &lt;code&gt;sv&lt;/code&gt; and &lt;code&gt;basic_string_view&amp;lt;CharT,Traits&amp;gt;(t)&lt;/code&gt;.</source>
          <target state="translated">実装は、十分な追加提供しなければならない &lt;code&gt;constexpr&lt;/code&gt; のと &lt;code&gt;noexcept&lt;/code&gt; ように、これらの関数のオーバーロードを &lt;code&gt;basic_string_view&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt; オブジェクトの &lt;code&gt;sv&lt;/code&gt; 別のオブジェクトと比較することができる &lt;code&gt;t&lt;/code&gt; への暗黙的な変換と &lt;code&gt;basic_string_view&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt; 比較と同じセマンティクスで、 &lt;code&gt;sv&lt;/code&gt; と &lt;code&gt;basic_string_view&amp;lt;CharT,Traits&amp;gt;(t)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8fa4c86d6d639e7f910fb3c11363bc126fb0186" translate="yes" xml:space="preserve">
          <source>The implementations are encouraged to detect the case when &lt;code&gt;&lt;a href=&quot;valid&quot;&gt;valid()&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; before the call and throw a &lt;code&gt;&lt;a href=&quot;../future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; with an error condition of &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc::no_state&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実装は場合を検出することが推奨されている &lt;code&gt;&lt;a href=&quot;valid&quot;&gt;valid()&lt;/a&gt;&lt;/code&gt; ある &lt;code&gt;false&lt;/code&gt; 呼び出し前と投げる &lt;code&gt;&lt;a href=&quot;../future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; のエラー状態で &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc::no_state&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ef09408705d9954ea1018c6860f6e1b66768503" translate="yes" xml:space="preserve">
          <source>The implementations are encouraged to detect the case when &lt;code&gt;valid == false&lt;/code&gt; before the call and throw a &lt;a href=&quot;../future_error&quot;&gt;&lt;code&gt;future_error&lt;/code&gt;&lt;/a&gt; with an error condition of &lt;a href=&quot;../future_errc&quot;&gt;&lt;code&gt;future_errc::no_state&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実装では、呼び出しの前に &lt;code&gt;valid == false&lt;/code&gt; 場合を検出し、&lt;a href=&quot;../future_errc&quot;&gt; &lt;code&gt;future_errc::no_state&lt;/code&gt; &lt;/a&gt;エラー条件でfuture_errorをスローすることが&lt;a href=&quot;../future_error&quot;&gt; &lt;code&gt;future_error&lt;/code&gt; &lt;/a&gt;れています。</target>
        </trans-unit>
        <trans-unit id="46992c68e68dfb44f3f1d1f0f1a081b8b330576b" translate="yes" xml:space="preserve">
          <source>The implementations are encouraged to detect the case when &lt;code&gt;valid == false&lt;/code&gt; before the call and throw a &lt;code&gt;&lt;a href=&quot;../future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; with an error condition of &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc::no_state&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実装では、呼び出しの前に &lt;code&gt;valid == false&lt;/code&gt; あるケースを検出し、 &lt;code&gt;&lt;a href=&quot;../future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; のエラー条件で &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc::no_state&lt;/a&gt;&lt;/code&gt; をスローすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="30a185593e3d55839d1d436fbf8fa472dc5d96a9" translate="yes" xml:space="preserve">
          <source>The implementations in &lt;a href=&quot;http://llvm.org/svn/llvm-project/libcxx/trunk/src/random.cpp&quot;&gt;libc++&lt;/a&gt; and &lt;a href=&quot;http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc%20%20-v3/src/c%20%2011/random.cc?view=markup#l77&quot;&gt;libstdc++&lt;/a&gt; expect &lt;code&gt;token&lt;/code&gt; to be the name of a character device that produces random numbers when read from, with the default value &lt;code&gt;&quot;/dev/urandom&quot;&lt;/code&gt;, although where the CPU instruction RDRND is available, libstdc++ uses that as the default.</source>
          <target state="translated">&lt;a href=&quot;http://llvm.org/svn/llvm-project/libcxx/trunk/src/random.cpp&quot;&gt;libc ++&lt;/a&gt;と&lt;a href=&quot;http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc%20%20-v3/src/c%20%2011/random.cc?view=markup#l77&quot;&gt;libstdc ++&lt;/a&gt;の実装は、 &lt;code&gt;token&lt;/code&gt; が読み取られたときに乱数を生成する文字デバイスの名前であると想定し、デフォルト値は &lt;code&gt;&quot;/dev/urandom&quot;&lt;/code&gt; ですが、CPU命令RDRNDが利用可能な場合、libstdc ++はそれをデフォルトとして使用します。</target>
        </trans-unit>
        <trans-unit id="1e1bd066a7f11748e7bb0264fc2e8c480f468bd7" translate="yes" xml:space="preserve">
          <source>The implicitly-declared (or defaulted on its first declaration) copy assignment operator has an exception specification as described in &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt;(until C++17)&lt;a href=&quot;noexcept_spec&quot;&gt;exception specification&lt;/a&gt;(since C++17).</source>
          <target state="translated">暗黙的に宣言された（または最初の宣言でデフォルトが設定された）コピー割り当て演算子には、&lt;a href=&quot;except_spec&quot;&gt;動的例外仕様&lt;/a&gt;（C ++ 17まで）&lt;a href=&quot;noexcept_spec&quot;&gt;例外仕様&lt;/a&gt;（C ++ 17以降）で説明されている例外仕様があります。</target>
        </trans-unit>
        <trans-unit id="94f03f3d0e083d8f05c0d3d27ca9e6043e7f1447" translate="yes" xml:space="preserve">
          <source>The implicitly-declared (or defaulted on its first declaration) copy constructor has an exception specification as described in &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt;(until C++17)&lt;a href=&quot;noexcept_spec&quot;&gt;exception specification&lt;/a&gt;(since C++17).</source>
          <target state="translated">暗黙的に宣言された（または最初の宣言でデフォルトが設定された）コピーコンストラクターには、&lt;a href=&quot;except_spec&quot;&gt;動的例外仕様&lt;/a&gt;（C ++ 17まで）&lt;a href=&quot;noexcept_spec&quot;&gt;例外仕様&lt;/a&gt;（C ++ 17以降）で説明されている例外仕様があります。</target>
        </trans-unit>
        <trans-unit id="c3a2dc4c3c835b9d7e3746bb1d579e66f0b3d256" translate="yes" xml:space="preserve">
          <source>The implicitly-declared (or defaulted on its first declaration) default constructor has an exception specification as described in &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt;(until C++17)&lt;a href=&quot;noexcept_spec&quot;&gt;exception specification&lt;/a&gt;(since C++17).</source>
          <target state="translated">暗黙的に宣言された（または最初の宣言でデフォルトが設定された）デフォルトコンストラクターには、&lt;a href=&quot;except_spec&quot;&gt;動的例外仕様&lt;/a&gt;（C ++ 17まで）&lt;a href=&quot;noexcept_spec&quot;&gt;例外仕様&lt;/a&gt;（C ++ 17以降）で説明されている例外仕様があります。</target>
        </trans-unit>
        <trans-unit id="ad35568398ddbdf1c5594f6799a40acc879779b5" translate="yes" xml:space="preserve">
          <source>The implicitly-declared (or defaulted on its first declaration) move assignment operator has an exception specification as described in &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt;(until C++17)&lt;a href=&quot;noexcept_spec&quot;&gt;exception specification&lt;/a&gt;(since C++17).</source>
          <target state="translated">暗黙的に宣言された（または最初の宣言でデフォルトが設定された）移動割り当て演算子には、&lt;a href=&quot;except_spec&quot;&gt;動的例外仕様&lt;/a&gt;（C ++ 17まで）&lt;a href=&quot;noexcept_spec&quot;&gt;例外仕様&lt;/a&gt;（C ++ 17以降）で説明されている例外仕様があります。</target>
        </trans-unit>
        <trans-unit id="3deae4df87e12fce8a01835c91a2ac9242a339b1" translate="yes" xml:space="preserve">
          <source>The implicitly-declared (or defaulted on its first declaration) move constructor has an exception specification as described in &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt;(until C++17)&lt;a href=&quot;noexcept_spec&quot;&gt;exception specification&lt;/a&gt;(since C++17).</source>
          <target state="translated">暗黙的に宣言された（または最初の宣言でデフォルトが設定された）移動コンストラクターには、&lt;a href=&quot;except_spec&quot;&gt;動的例外仕様&lt;/a&gt;（C ++ 17まで）&lt;a href=&quot;noexcept_spec&quot;&gt;例外仕様&lt;/a&gt;（C ++ 17以降）で説明されている例外仕様があります。</target>
        </trans-unit>
        <trans-unit id="3213a8544ac4c22b0682928a2ce16724be0fb301" translate="yes" xml:space="preserve">
          <source>The implicitly-declared copy constructor for class &lt;code&gt;T&lt;/code&gt; is undefined if any of the following conditions are true:</source>
          <target state="translated">次の条件のいずれかに該当する場合、クラス &lt;code&gt;T&lt;/code&gt; の暗黙的に宣言されたコピーコンストラクターは未定義です。</target>
        </trans-unit>
        <trans-unit id="6fae264774979621faa26711431abb58dbca09db" translate="yes" xml:space="preserve">
          <source>The implicitly-declared destructor is virtual (because the base class has a virtual destructor) and the lookup for the deallocation function (&lt;code&gt;&lt;a href=&quot;../memory/new/operator_delete&quot;&gt;operator delete&lt;/a&gt;()&lt;/code&gt; results in a call to ambiguous, deleted, or inaccessible function.</source>
          <target state="translated">暗黙的に宣言されたデストラクタは仮想であり（基本クラスには仮想デストラクタがあるため）、割り当て解除関数の検索（ &lt;code&gt;&lt;a href=&quot;../memory/new/operator_delete&quot;&gt;operator delete&lt;/a&gt;()&lt;/code&gt; の結果、あいまいな関数、削除された関数、またはアクセスできない関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="50ffc691488ff90f9bb81089da927863779b099a" translate="yes" xml:space="preserve">
          <source>The implicitly-declared or defaulted copy constructor for class &lt;code&gt;T&lt;/code&gt; is defined as</source>
          <target state="translated">クラス &lt;code&gt;T&lt;/code&gt; の暗黙的に宣言された、またはデフォルトのコピーコンストラクタは、次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="08afe67b1a14690a725702d4c692f1dc10c64e2f" translate="yes" xml:space="preserve">
          <source>The implicitly-declared or defaulted default constructor for class &lt;code&gt;T&lt;/code&gt; is  undefined (until C++11)defined as deleted(since C++11) if any of the following is true:</source>
          <target state="translated">次のいずれかに該当する場合、クラス &lt;code&gt;T&lt;/code&gt; の暗黙的に宣言またはデフォルト設定されているデフォルトコンストラクターは、（C ++ 11以降）削除済みとして定義され、未定義です。</target>
        </trans-unit>
        <trans-unit id="65cafdb084858cf182d0ce28289e802bf9e83822" translate="yes" xml:space="preserve">
          <source>The implicitly-declared or defaulted destructor for class &lt;code&gt;T&lt;/code&gt; is  undefined (until C++11)defined as</source>
          <target state="translated">クラス &lt;code&gt;T&lt;/code&gt; の暗黙的に宣言された、またはデフォルトのデストラクタは、次のように定義されていません（C ++ 11まで）</target>
        </trans-unit>
        <trans-unit id="e8b5ed6dfa8b272f8c00f443dfeac236e2515204" translate="yes" xml:space="preserve">
          <source>The implicitly-declared or defaulted move assignment operator for class &lt;code&gt;T&lt;/code&gt; is defined as</source>
          <target state="translated">クラス &lt;code&gt;T&lt;/code&gt; の暗黙的に宣言された、またはデフォルトの移動代入演算子は、次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="4ce2934ef2171aeb2c0ad6a343b987738915dab2" translate="yes" xml:space="preserve">
          <source>The implicitly-declared or defaulted move constructor for class &lt;code&gt;T&lt;/code&gt; is defined as</source>
          <target state="translated">クラス &lt;code&gt;T&lt;/code&gt; の暗黙的に宣言された、またはデフォルトの移動コンストラクタは、次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="ad92a1e56a9451101a860f2143c244760ecd26c4" translate="yes" xml:space="preserve">
          <source>The implicitly-defined special member functions are typically incorrect if the class is managing a resource whose handle is an object of non-class type (raw pointer, POSIX file descriptor, etc), whose destructor does nothing and copy constructor/assignment operator performs a &quot;shallow copy&quot; (copy the value of the handle, without duplicating the underlying resource).</source>
          <target state="translated">暗黙的に定義された特別なメンバ関数は、クラスがリソースを管理していて、そのハンドルが非クラス型のオブジェクト (生ポインタ、POSIX ファイル記述子など)で、そのデストラクタが何もせず、コピーコンストラクタ/割り当て演算子が &quot;浅いコピー&quot; (基礎となるリソースを複製せずにハンドルの値をコピーすること)を実行する場合には、典型的には正しくありません。</target>
        </trans-unit>
        <trans-unit id="192f6f2391fc950f581ebc15e6c0166986a4e41a" translate="yes" xml:space="preserve">
          <source>The implicitly-generated member functions and any member function declared as defaulted on its first declaration are inline just like any other function defined inside a class definition.</source>
          <target state="translated">暗黙的に生成されたメンバ関数と、その最初の宣言でデフォルトとして宣言された任意のメンバ関数は、クラス定義内で定義された他の関数と同じようにインラインになります。</target>
        </trans-unit>
        <trans-unit id="d43d2eaebfe91ea20d3c9ee4934fb21de74d02b4" translate="yes" xml:space="preserve">
          <source>The implied &lt;code&gt;lk.unlock&lt;/code&gt; is</source>
          <target state="translated">暗黙の &lt;code&gt;lk.unlock&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="34929ac211f53c3511c4b293c3b116cd7ed0a254" translate="yes" xml:space="preserve">
          <source>The index stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; に格納されているインデックス。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
