<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="e49e9f39572d1033a19aeb243a49b9e378d309f2" translate="yes" xml:space="preserve">
          <source>Initializes the internal instance of the comparator to &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">コンパレータの内部インスタンスを &lt;code&gt;c&lt;/code&gt; に初期化します。</target>
        </trans-unit>
        <trans-unit id="a51259c3c84f8a09271df7eb1d4694a4b3224cee" translate="yes" xml:space="preserve">
          <source>Initializes the iterator to point to the same value as &lt;code&gt;it&lt;/code&gt; points.</source>
          <target state="translated">イテレータを初期化して、 &lt;code&gt;it&lt;/code&gt; 指すのと同じ値を指すようにします。</target>
        </trans-unit>
        <trans-unit id="398735e9fedddd7f0aacad1eb358f7b46a4ac840" translate="yes" xml:space="preserve">
          <source>Injected class name</source>
          <target state="translated">インジェクションされたクラス名</target>
        </trans-unit>
        <trans-unit id="7bb9ce0cdba5a821d492b917cf5fb720a0f90bd9" translate="yes" xml:space="preserve">
          <source>Inline assembly</source>
          <target state="translated">インラインアセンブリ</target>
        </trans-unit>
        <trans-unit id="4f9c73f65355a3ed7fedd216f2992cf3deebb61c" translate="yes" xml:space="preserve">
          <source>Inline assembly for Itanium-based HP-UX</source>
          <target state="translated">Itanium ベースの HP-UX 用インラインアセンブリ</target>
        </trans-unit>
        <trans-unit id="e51e51dc5c1aa8a193565e7fce22f1c142ed7d5c" translate="yes" xml:space="preserve">
          <source>Inline const variables at namespace scope have &lt;a href=&quot;storage_duration&quot;&gt;external linkage&lt;/a&gt; by default (unlike the non-inline non-volatile const-qualified variables).</source>
          <target state="translated">名前空間スコープのインラインconst変数には、デフォルトで&lt;a href=&quot;storage_duration&quot;&gt;外部リンケージ&lt;/a&gt;があります（非インラインの非揮発性のconst修飾変数とは異なります）。</target>
        </trans-unit>
        <trans-unit id="49bfb486d3b3c3cb304f4493385555eb5b8a098a" translate="yes" xml:space="preserve">
          <source>Inline namespaces</source>
          <target state="translated">インラインの名前空間</target>
        </trans-unit>
        <trans-unit id="00b64c52a93228b3beba41ea40e5bd41acc77e53" translate="yes" xml:space="preserve">
          <source>Inline variables</source>
          <target state="translated">インライン変数</target>
        </trans-unit>
        <trans-unit id="7be4e5da3a5437427b26df1ed281ec5d61782f49" translate="yes" xml:space="preserve">
          <source>Inline variables eliminate the main obstacle to packaging C++ code as header-only libraries.</source>
          <target state="translated">インライン変数は、C++コードをヘッダのみのライブラリとしてパッケージ化する際の主な障害を取り除きます。</target>
        </trans-unit>
        <trans-unit id="b568d47f2e244743b1fd7472db836ef9769c21f8" translate="yes" xml:space="preserve">
          <source>Input</source>
          <target state="translated">Input</target>
        </trans-unit>
        <trans-unit id="c05e081250483115acb3291c729e966cb6237c5d" translate="yes" xml:space="preserve">
          <source>Input/Output</source>
          <target state="translated">Input/Output</target>
        </trans-unit>
        <trans-unit id="249f397392db7fe682a1d1ecc1a52c8e40ceb983" translate="yes" xml:space="preserve">
          <source>Input/output</source>
          <target state="translated">Input/output</target>
        </trans-unit>
        <trans-unit id="cb5679ee6b70828884e48e829adaa69eeff5975a" translate="yes" xml:space="preserve">
          <source>Input/output library</source>
          <target state="translated">入出力ライブラリ</target>
        </trans-unit>
        <trans-unit id="23a1c2b90e7720bee1275126fc61ab157f7fb4f4" translate="yes" xml:space="preserve">
          <source>Input/output manipulators</source>
          <target state="translated">入出力マニピュレータ</target>
        </trans-unit>
        <trans-unit id="2dd11dbfca0e0084817673f0057830adc2def0af" translate="yes" xml:space="preserve">
          <source>InputIterator</source>
          <target state="translated">InputIterator</target>
        </trans-unit>
        <trans-unit id="5ce3b480664c159e1d12685b429698048d6ea3d0" translate="yes" xml:space="preserve">
          <source>InputRange</source>
          <target state="translated">InputRange</target>
        </trans-unit>
        <trans-unit id="2626e21603d8fe73a7e6ad428ec1925d9f5ce790" translate="yes" xml:space="preserve">
          <source>Insert an object of type &lt;code&gt;T&lt;/code&gt;, constructed with &lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)&lt;/code&gt; before &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; の前に &lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)&lt;/code&gt; &amp;lt;Args&amp;gt;（args）で構築されたタイプ &lt;code&gt;T&lt;/code&gt; のオブジェクトを挿入します</target>
        </trans-unit>
        <trans-unit id="bd0f39cfbd64e0b854da8b25dafdd19e3e5f4946" translate="yes" xml:space="preserve">
          <source>Insertion caused rehash</source>
          <target state="translated">挿入による蒸し返し</target>
        </trans-unit>
        <trans-unit id="dd68ac29c94054b522d28e6c6323109f3d58ed57" translate="yes" xml:space="preserve">
          <source>Insertion changed capacity</source>
          <target state="translated">挿入容量の変更</target>
        </trans-unit>
        <trans-unit id="90792df8b1ed4fcb7ea818e84aee0085187c66dc" translate="yes" xml:space="preserve">
          <source>Insertion or removal of elements - linear O(n)</source>
          <target state="translated">要素の挿入または除去-線形O(n)</target>
        </trans-unit>
        <trans-unit id="8dd87d390aed8473e28b99fc188dddac51d8f873" translate="yes" xml:space="preserve">
          <source>Insertion or removal of elements - linear in the distance to the end of the vector O(n)</source>
          <target state="translated">要素の挿入または除去-ベクトルO(n)の終端までの距離が直線的</target>
        </trans-unit>
        <trans-unit id="a9f7998ac9050fd1635baf4429d529d9a7bb0521" translate="yes" xml:space="preserve">
          <source>Insertion or removal of elements at the end - amortized constant O(1)</source>
          <target state="translated">末端の要素の挿入・除去-償却定数 O(1)</target>
        </trans-unit>
        <trans-unit id="89dc0ff756b3d85bb1be7c9942ebc7011ccf494e" translate="yes" xml:space="preserve">
          <source>Insertion or removal of elements at the end or beginning - constant O(1)</source>
          <target state="translated">終わりまたは始まりでの要素の挿入または除去-定数 O(1)</target>
        </trans-unit>
        <trans-unit id="40dbe6b4bec47b9cf461b0137ff76c424defca97" translate="yes" xml:space="preserve">
          <source>Inserts &lt;code&gt;n&lt;/code&gt; copies of &lt;code&gt;t&lt;/code&gt; before &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; の前に &lt;code&gt;t&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; コピーを挿入します</target>
        </trans-unit>
        <trans-unit id="c32005ed652dab6de9fb37a37722957c3e2724e8" translate="yes" xml:space="preserve">
          <source>Inserts &lt;code&gt;value&lt;/code&gt; into the associated stream, then inserts the delimiter, if one was specified at construction time.</source>
          <target state="translated">インサート &lt;code&gt;value&lt;/code&gt; 一方が構築時に指定された場合、関連するストリームには、その後、区切り文字を挿入します。</target>
        </trans-unit>
        <trans-unit id="459fe20a1ffd7a6cd82618f9958505d8f6d74257" translate="yes" xml:space="preserve">
          <source>Inserts a character or a character string.</source>
          <target state="translated">文字または文字列を挿入します。</target>
        </trans-unit>
        <trans-unit id="1292e82dd313319fd90a6127a6a0b0fa41ee3b4b" translate="yes" xml:space="preserve">
          <source>Inserts a copy of &lt;code&gt;rv&lt;/code&gt; before &lt;code&gt;p&lt;/code&gt;, possibly using move semantics</source>
          <target state="translated">&lt;code&gt;rv&lt;/code&gt; のコピーを &lt;code&gt;p&lt;/code&gt; の前に挿入します。おそらく移動セマンティクスを使用します</target>
        </trans-unit>
        <trans-unit id="080a7d3105b387ca72b759dd0ac8cbe8daf7bece" translate="yes" xml:space="preserve">
          <source>Inserts a copy of &lt;code&gt;t&lt;/code&gt; before &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; の前に &lt;code&gt;t&lt;/code&gt; のコピーを挿入します</target>
        </trans-unit>
        <trans-unit id="dddeb94b4972c7384daa43582f102c411ce2464e" translate="yes" xml:space="preserve">
          <source>Inserts a new element into a position after the specified position in the container. The element is constructed in-place, i.e. no copy or move operations are performed. The constructor of the element is called with exactly the same arguments, as supplied to the function.</source>
          <target state="translated">新しい要素を、コンテナ内の指定された位置の後の位置に挿入します。要素はその場で構築され、コピーや移動の操作は行われません。要素のコンストラクタは、関数に与えられた引数と全く同じ引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ca770757036e4fe2be6c21dfdc40521b78bb495b" translate="yes" xml:space="preserve">
          <source>Inserts a new element into the container as close as possible to the position just before &lt;code&gt;hint&lt;/code&gt;. The element is constructed in-place, i.e. no copy or move operations are performed.</source>
          <target state="translated">&lt;code&gt;hint&lt;/code&gt; 直前の位置にできるだけ近い新しい要素をコンテナに挿入します。要素はインプレースで構築されます。つまり、コピーまたは移動操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="0c894839e77e9ab81555b68a4eab970743f5cf11" translate="yes" xml:space="preserve">
          <source>Inserts a new element into the container constructed in-place with the given &lt;code&gt;args&lt;/code&gt; .</source>
          <target state="translated">指定された &lt;code&gt;args&lt;/code&gt; でインプレースで構築されたコンテナーに新しい要素を挿入します。</target>
        </trans-unit>
        <trans-unit id="2ebf2c045edb5580cda64f0fcb67ffe1f644265e" translate="yes" xml:space="preserve">
          <source>Inserts a new element into the container constructed in-place with the given &lt;code&gt;args&lt;/code&gt; if there is no element with the key in the container.</source>
          <target state="translated">指定された &lt;code&gt;args&lt;/code&gt; でインプレースで構築されたコンテナに新しい要素を挿入しますコンテナ内にキーを持つ要素がない場合ます。</target>
        </trans-unit>
        <trans-unit id="764a3843820016f0a301fc81d7090ba832667367" translate="yes" xml:space="preserve">
          <source>Inserts a new element into the container directly before &lt;code&gt;pos&lt;/code&gt;. The element is constructed through &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits/construct&quot;&gt;std::allocator_traits::construct&lt;/a&gt;&lt;/code&gt;, which typically uses placement-new to construct the element in-place at a location provided by the container. The arguments &lt;code&gt;args...&lt;/code&gt; are forwarded to the constructor as &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;.</source>
          <target state="translated">コンテナーの &lt;code&gt;pos&lt;/code&gt; の直前に新しい要素を挿入します。要素は &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits/construct&quot;&gt;std::allocator_traits::construct&lt;/a&gt;&lt;/code&gt; constructを介して構築されます。これは通常、placement-newを使用して、コンテナによって提供される場所に要素をインプレースで構築します。引数 &lt;code&gt;args...&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; としてコンストラクターに転送されます。</target>
        </trans-unit>
        <trans-unit id="9cf81cb318be0807a9f9dfa69a27e14ef4b04921" translate="yes" xml:space="preserve">
          <source>Inserts a new element to the beginning of the container. The element is constructed through &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits/construct&quot;&gt;std::allocator_traits::construct&lt;/a&gt;&lt;/code&gt;, which typically uses placement-new to construct the element in-place at the location provided by the container. The arguments &lt;code&gt;args...&lt;/code&gt; are forwarded to the constructor as &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;.</source>
          <target state="translated">コンテナの先頭に新しい要素を挿入します。要素は &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits/construct&quot;&gt;std::allocator_traits::construct&lt;/a&gt;&lt;/code&gt; constructを介して構築されます。これは通常、placement-newを使用して、コンテナによって提供される場所に要素をインプレースで構築します。引数 &lt;code&gt;args...&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; としてコンストラクターに転送されます。</target>
        </trans-unit>
        <trans-unit id="de2a91ea3a0922ba9fd2c6820a52603ceaf2bfd4" translate="yes" xml:space="preserve">
          <source>Inserts a new element to the container as close as possible to the position just before &lt;code&gt;hint&lt;/code&gt;. The element is constructed in-place, i.e. no copy or move operations are performed.</source>
          <target state="translated">&lt;code&gt;hint&lt;/code&gt; 直前の位置にできるだけ近い新しい要素をコンテナに挿入します。要素はインプレースで構築されます。つまり、コピーまたは移動操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="d62b4192e275e6e5464e704bf2f2c06f78857362" translate="yes" xml:space="preserve">
          <source>Inserts a new element to the container, using &lt;code&gt;hint&lt;/code&gt; as a suggestion where the element should go. The element is constructed in-place, i.e. no copy or move operations are performed.</source>
          <target state="translated">要素の移動先の &lt;code&gt;hint&lt;/code&gt; としてヒントを使用して、コンテナに新しい要素を挿入します。要素はインプレースで構築されます。つまり、コピーまたは移動操作は実行されません。</target>
        </trans-unit>
        <trans-unit id="06b953e63c9c91232d7dddd7cd152b54414e60b1" translate="yes" xml:space="preserve">
          <source>Inserts a newline character into the output sequence &lt;code&gt;os&lt;/code&gt; and flushes it as if by calling &lt;code&gt;os.put(os.widen('\n'))&lt;/code&gt; followed by &lt;code&gt;os.flush()&lt;/code&gt;.</source>
          <target state="translated">改行文字を出力シーケンス &lt;code&gt;os&lt;/code&gt; に挿入し、 &lt;code&gt;os.put(os.widen('\n'))&lt;/code&gt; 続いて &lt;code&gt;os.flush()&lt;/code&gt; を呼び出すかのようにフラッシュします。</target>
        </trans-unit>
        <trans-unit id="5f4e0eed677f446544f8308f60d7118157395fd2" translate="yes" xml:space="preserve">
          <source>Inserts a null character into the output sequence &lt;code&gt;os&lt;/code&gt; as if by calling &lt;code&gt;os.put(CharT())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os.put(CharT())&lt;/code&gt; を呼び出すのと同じように、出力シーケンス &lt;code&gt;os&lt;/code&gt; に null文字を挿入します。</target>
        </trans-unit>
        <trans-unit id="3be6541a3cdc8be869ffb1e36075af35ad2d9e5f" translate="yes" xml:space="preserve">
          <source>Inserts a textual representation of &lt;code&gt;d&lt;/code&gt; into &lt;code&gt;os&lt;/code&gt;. The behavior is undefined if &lt;code&gt;CharT&lt;/code&gt; is neither &lt;code&gt;char&lt;/code&gt; or &lt;code&gt;wchar_t&lt;/code&gt;, or if &lt;code&gt;Rep&lt;/code&gt; is neither a floating-point type nor a integral type with conversion rank equal to or greater than &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;d&lt;/code&gt; のテキスト表現を &lt;code&gt;os&lt;/code&gt; に挿入します。 &lt;code&gt;CharT&lt;/code&gt; が &lt;code&gt;char&lt;/code&gt; でも &lt;code&gt;wchar_t&lt;/code&gt; でもない場合、または &lt;code&gt;Rep&lt;/code&gt; が浮動小数点型でも、変換ランクが &lt;code&gt;short&lt;/code&gt; 以上の整数型でもない場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="3b309639bb23b684cc4e6d27b3891dbc4686b983" translate="yes" xml:space="preserve">
          <source>Inserts a textual representation of &lt;code&gt;r&lt;/code&gt; into &lt;code&gt;os&lt;/code&gt;. The exact format is unspecified.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; のテキスト表現を &lt;code&gt;os&lt;/code&gt; に挿入します。正確な形式は指定されていません。</target>
        </trans-unit>
        <trans-unit id="16b3b45d0513a34bfe5cb9a485fed3fcd636a919" translate="yes" xml:space="preserve">
          <source>Inserts characters into the string.</source>
          <target state="translated">文字列に文字を挿入します。</target>
        </trans-unit>
        <trans-unit id="0b8fe07029996680c6a7a04171ab4c8c1f427b51" translate="yes" xml:space="preserve">
          <source>Inserts copies of elements in &lt;code&gt;[i, j)&lt;/code&gt; before &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[i, j)&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; の前に要素のコピーを挿入します</target>
        </trans-unit>
        <trans-unit id="4f550772dfe95225e7aadcf101fd0fcec8c748a7" translate="yes" xml:space="preserve">
          <source>Inserts data into the stream.</source>
          <target state="translated">ストリームにデータを挿入します。</target>
        </trans-unit>
        <trans-unit id="eba77933a2e344cf988fd3ca6a623ff9d2ff92d0" translate="yes" xml:space="preserve">
          <source>Inserts element(s) into the container, if the container doesn't already contain an element with an equivalent key.</source>
          <target state="translated">コンテナに等価なキーを持つ要素がまだ含まれていない場合に、コンテナに要素を挿入します。</target>
        </trans-unit>
        <trans-unit id="ccd9e30db577ad68c0e1422c4c4a79f885e3e582" translate="yes" xml:space="preserve">
          <source>Inserts element(s) into the container.</source>
          <target state="translated">コンテナに要素を挿入します。</target>
        </trans-unit>
        <trans-unit id="1a4eb8d141fa15817e7fa53f7d0ceee266ac871a" translate="yes" xml:space="preserve">
          <source>Inserts elements after the specified position in the container.</source>
          <target state="translated">コンテナ内の指定した位置の後に要素を挿入します。</target>
        </trans-unit>
        <trans-unit id="8ad0a7fe7ffe735c0e8d1f3247c2284b472ecf85" translate="yes" xml:space="preserve">
          <source>Inserts elements at the specified location in the container.</source>
          <target state="translated">コンテナ内の指定した位置に要素を挿入します。</target>
        </trans-unit>
        <trans-unit id="e3538cf079d871f7078cd6d2626f91c5fe3217d1" translate="yes" xml:space="preserve">
          <source>Inserts or extracts a bitset from a character stream.</source>
          <target state="translated">文字ストリームからビットセットを挿入または抽出します。</target>
        </trans-unit>
        <trans-unit id="436cbc44494163237fbc2dae7c0dbecac89e17a0" translate="yes" xml:space="preserve">
          <source>Inserts the element at the position &lt;code&gt;last-1&lt;/code&gt; into the</source>
          <target state="translated">位置に要素を挿入 &lt;code&gt;last-1&lt;/code&gt; に</target>
        </trans-unit>
        <trans-unit id="de7c44cdab798ba02a3b54672adb89734e298e3e" translate="yes" xml:space="preserve">
          <source>Inserts the given value &lt;code&gt;value&lt;/code&gt; to the container.</source>
          <target state="translated">指定された値 &lt;code&gt;value&lt;/code&gt; をコンテナに挿入します。</target>
        </trans-unit>
        <trans-unit id="da42294637fdcfd28f56598c14c33d9cc2c56bd5" translate="yes" xml:space="preserve">
          <source>Inserts the value of the pointer managed by &lt;code&gt;p&lt;/code&gt; into the output stream &lt;code&gt;os&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; が管理するポインターの値を出力ストリーム &lt;code&gt;os&lt;/code&gt; に挿入します。</target>
        </trans-unit>
        <trans-unit id="27f20e401e741fb3278e97286227b847ff4a5a37" translate="yes" xml:space="preserve">
          <source>Inserts the value of the pointer stored in ptr into the output stream os.</source>
          <target state="translated">ptr に格納されているポインタの値を出力ストリーム os に挿入します。</target>
        </trans-unit>
        <trans-unit id="cc4361d50be18c5e552170a7006899011cb13d66" translate="yes" xml:space="preserve">
          <source>Inside a &lt;a href=&quot;../language/constraints&quot;&gt; requirements&lt;/a&gt; for type requirements (since C++20)</source>
          <target state="translated">型要件の&lt;a href=&quot;../language/constraints&quot;&gt;要件の&lt;/a&gt;内部（C ++ 20以降）</target>
        </trans-unit>
        <trans-unit id="600f1274eac8f378c8f16ed6ad8ee46ff4edfb74" translate="yes" xml:space="preserve">
          <source>Inside a class definition, the keyword &lt;a href=&quot;../keywords/static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; declares members that are not bound to class instances.</source>
          <target state="translated">クラス定義内で、キーワード&lt;a href=&quot;../keywords/static&quot;&gt; &lt;code&gt;static&lt;/code&gt; &lt;/a&gt;はクラスインスタンスにバインドされていないメンバーを宣言します。</target>
        </trans-unit>
        <trans-unit id="03675817cd2b928d6905ad0345e0c7efd3baeea5" translate="yes" xml:space="preserve">
          <source>Inside a declaration or a definition of a template, &lt;code&gt;typename&lt;/code&gt; can be used to declare that a &lt;a href=&quot;../language/dependent_name&quot;&gt;dependent qualified name&lt;/a&gt; is a type.</source>
          <target state="translated">テンプレートの宣言または定義の中で、 &lt;code&gt;typename&lt;/code&gt; を使用して、&lt;a href=&quot;../language/dependent_name&quot;&gt;従属修飾名&lt;/a&gt;がタイプであることを宣言できます。</target>
        </trans-unit>
        <trans-unit id="c75e28d40b1ee1647f206ce29f91a72118f77dcb" translate="yes" xml:space="preserve">
          <source>Inside a declaration or a definition of a template,(until C++11)&lt;code&gt;typename&lt;/code&gt; can be used before a non-dependent qualified type name. It has no effect in this case.</source>
          <target state="translated">テンプレートの宣言または定義内では、（C ++ 11まで） &lt;code&gt;typename&lt;/code&gt; を非依存の修飾型名の前に使用できます。この場合、効果はありません。</target>
        </trans-unit>
        <trans-unit id="6cd46b31dc66a09cb27a8b94558ff90367369cb8" translate="yes" xml:space="preserve">
          <source>Inside a template definition, &lt;code&gt;template&lt;/code&gt; can be used to declare that a &lt;a href=&quot;../language/dependent_name&quot;&gt;dependent name&lt;/a&gt; is a template.</source>
          <target state="translated">テンプレート定義内では、 &lt;code&gt;template&lt;/code&gt; を使用して、&lt;a href=&quot;../language/dependent_name&quot;&gt;依存名&lt;/a&gt;がテンプレートであることを宣言できます。</target>
        </trans-unit>
        <trans-unit id="350b4808c73cf8468a6f363916c30c4a397b3dc5" translate="yes" xml:space="preserve">
          <source>Inside class definition</source>
          <target state="translated">クラス定義の内部</target>
        </trans-unit>
        <trans-unit id="6b5698bf0daa42ff37c1cd0dca09d5b7656e92d2" translate="yes" xml:space="preserve">
          <source>Inside the definition of a &lt;a href=&quot;templates&quot;&gt;template&lt;/a&gt; (both &lt;a href=&quot;class_template&quot;&gt;class template&lt;/a&gt; and &lt;a href=&quot;function_template&quot;&gt;function template&lt;/a&gt;), the meaning of some constructs may differ from one instantiation to another. In particular, types and expressions may depend on types of type template parameters and values of non-type template parameters.</source>
          <target state="translated">&lt;a href=&quot;templates&quot;&gt;テンプレート&lt;/a&gt;の定義（&lt;a href=&quot;class_template&quot;&gt;クラステンプレート&lt;/a&gt;と&lt;a href=&quot;function_template&quot;&gt;関数テンプレートの&lt;/a&gt;両方）内では、一部の構成要素の意味はインスタンス化ごとに異なる場合があります。特に、型と式は、型テンプレートパラメーターの型と非型テンプレートパラメーターの値に依存する場合があります。</target>
        </trans-unit>
        <trans-unit id="29bb12e4f618840806749020bc50cf4a005ce46d" translate="yes" xml:space="preserve">
          <source>Inspects the declared type of an entity or the type and value category of an expression.</source>
          <target state="translated">エンティティの宣言された型、または式の型と値のカテゴリを検査します。</target>
        </trans-unit>
        <trans-unit id="55e8d92a13e25eb28d03d82349c3f32ae5b1856b" translate="yes" xml:space="preserve">
          <source>Instances of this class may also hold the special distinct value that does not represent any thread. Once a thread has finished, the value of &lt;code&gt;std::thread::id&lt;/code&gt; may be reused by another thread.</source>
          <target state="translated">このクラスのインスタンスは、スレッドを表さない特別な個別の値を保持する場合もあります。スレッドが終了すると、 &lt;code&gt;std::thread::id&lt;/code&gt; 値は別のスレッドで再利用できます。</target>
        </trans-unit>
        <trans-unit id="0323fe82517b3deef4dcc33c2202e8572f5af700" translate="yes" xml:space="preserve">
          <source>Instead of being defined by specific types, each category of iterator is defined by the operations that can be performed on it. This definition means that any type that supports the necessary operations can be used as an iterator -- for example, a pointer supports all of the operations required by &lt;a href=&quot;named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;, so a pointer can be used anywhere a &lt;a href=&quot;named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt; is expected.</source>
          <target state="translated">イテレーターの各カテゴリーは、特定のタイプによって定義されるのではなく、イテレーターで実行できる操作によって定義されます。この定義は、必要な操作をサポートする任意の型をイテレーターとして使用できることを意味します。たとえば、ポインターは&lt;a href=&quot;named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIteratorが&lt;/a&gt;必要とするすべての操作をサポートするため、ポインターは&lt;a href=&quot;named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;が期待される場所であればどこでも使用できます。</target>
        </trans-unit>
        <trans-unit id="b12082e6b05d3b9bc176ff98ba66b29e9e0b12fe" translate="yes" xml:space="preserve">
          <source>Instead of creating copies of files, create hardlinks that resolve to the same files as the originals</source>
          <target state="translated">ファイルのコピーを作成する代わりに、オリジナルと同じファイルに解決するハードリンクを作成します。</target>
        </trans-unit>
        <trans-unit id="78afece0e04a5cf908cc483529a4871648680f1b" translate="yes" xml:space="preserve">
          <source>Instead of creating copies of files, create symlinks pointing to the originals. Note: the source path must be an absolute path unless the destination path is in the current directory.</source>
          <target state="translated">ファイルのコピーを作成する代わりに、元のファイルを指すシンボリックリンクを作成します。注意:コピー元のパスは、コピー先のパスがカレントディレクトリ内にない限り、絶対パスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="cfaebf91cdac75d382847870cf98c644ae8839f0" translate="yes" xml:space="preserve">
          <source>Instead of using the overload (2) together with new, it is often a better idea to use &lt;code&gt;&lt;a href=&quot;make_unique&quot;&gt;std::make_unique&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オーバーロード（2）をnewと一緒に使用する代わりに、 &lt;code&gt;&lt;a href=&quot;make_unique&quot;&gt;std::make_unique&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="15df2d5892f1c21a31c35b32a3d847ba47bdff20" translate="yes" xml:space="preserve">
          <source>Instructs the regular expression engine to make matching faster, with the potential cost of making construction slower. For example, this might mean converting a non-deterministic FSA to a deterministic FSA.</source>
          <target state="translated">正規表現エンジンに、構築を遅くするという潜在的なコストをかけて、マッチングを高速化するよう指示します。例えば、これは非決定論的FSAを決定論的FSAに変換することを意味します。</target>
        </trans-unit>
        <trans-unit id="d29911b1bd2caeb5ec80c99646811291a26cf594" translate="yes" xml:space="preserve">
          <source>IntType</source>
          <target state="translated">IntType</target>
        </trans-unit>
        <trans-unit id="876569ad85ebaf17d9149dea5706aba22e882fe8" translate="yes" xml:space="preserve">
          <source>Integer types</source>
          <target state="translated">整数型</target>
        </trans-unit>
        <trans-unit id="d19f3662fc5d3aa69996dfa0c88356fda0d60fc4" translate="yes" xml:space="preserve">
          <source>Integer value corresponding to the contents of &lt;code&gt;str&lt;/code&gt; on success. If the converted value falls out of range of corresponding return type, range error occurs and &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LONG_MAX&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LONG_MIN&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LLONG_MAX&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LLONG_MIN&lt;/a&gt;&lt;/code&gt; is returned. If no conversion can be performed, &lt;code&gt;​0​&lt;/code&gt; is returned.</source>
          <target state="translated">成功時に &lt;code&gt;str&lt;/code&gt; の内容に対応する整数値。変換された値が対応する戻り値の型の範囲外の場合、範囲エラーが発生し、 &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LONG_MAX&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LONG_MIN&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LLONG_MAX&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;LLONG_MIN&lt;/a&gt;&lt;/code&gt; が返されます。変換が行われなかっできる場合は、 &lt;code&gt;​0​&lt;/code&gt; 返されます。</target>
        </trans-unit>
        <trans-unit id="1da9ae4426444f430bd1d7493a5b5250c7cfec29" translate="yes" xml:space="preserve">
          <source>Integer value corresponding to the contents of &lt;code&gt;str&lt;/code&gt; on success. If the converted value falls out of range of corresponding return type, range error occurs and &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;ULONG_MAX&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;ULLONG_MAX&lt;/a&gt;&lt;/code&gt; is returned. If no conversion can be performed, &lt;code&gt;​0​&lt;/code&gt; is returned.</source>
          <target state="translated">成功時に &lt;code&gt;str&lt;/code&gt; の内容に対応する整数値。変換された値が対応する戻り値の型の範囲外の場合、範囲エラーが発生し、 &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;ULONG_MAX&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;ULLONG_MAX&lt;/a&gt;&lt;/code&gt; が返されます。変換が行われなかっできる場合は、 &lt;code&gt;​0​&lt;/code&gt; 返されます。</target>
        </trans-unit>
        <trans-unit id="52e4539e8037f8f852f5856d00606b776679d442" translate="yes" xml:space="preserve">
          <source>Integer value corresponding to the contents of &lt;code&gt;str&lt;/code&gt; on success. If the converted value falls out of range of corresponding return type, range error occurs and &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;INTMAX_MAX&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;INTMAX_MIN&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;UINTMAX_MAX&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;​0​&lt;/code&gt; is returned, as appropriate. If no conversion can be performed, &lt;code&gt;​0​&lt;/code&gt; is returned.</source>
          <target state="translated">成功時に &lt;code&gt;str&lt;/code&gt; の内容に対応する整数値。変換された値が戻り型の対応の範囲外になった場合、範囲エラーが発生し &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;INTMAX_MAX&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;INTMAX_MIN&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;UINTMAX_MAX&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;​0​&lt;/code&gt; 適宜、戻されます。変換が行われなかっできる場合は、 &lt;code&gt;​0​&lt;/code&gt; 返されます。</target>
        </trans-unit>
        <trans-unit id="21098bb738833ee0f4f792151a59d559da8ec6b0" translate="yes" xml:space="preserve">
          <source>Integer value corresponding to the contents of &lt;code&gt;str&lt;/code&gt; on success. If the converted value falls out of range of corresponding return type, the return value is undefined. If no conversion can be performed, &lt;code&gt;​0​&lt;/code&gt; is returned.</source>
          <target state="translated">成功時に &lt;code&gt;str&lt;/code&gt; の内容に対応する整数値。変換された値が対応する戻り値の型の範囲外の場合、戻り値は未定義です。変換が行われなかっできる場合は、 &lt;code&gt;​0​&lt;/code&gt; 返されます。</target>
        </trans-unit>
        <trans-unit id="e3b59c9f1c26e320e172cac39695e68589e740a0" translate="yes" xml:space="preserve">
          <source>Integral</source>
          <target state="translated">Integral</target>
        </trans-unit>
        <trans-unit id="b825f7aa91a4416d2a86fdbf6d9049ea6b2d615d" translate="yes" xml:space="preserve">
          <source>Integral constant expression</source>
          <target state="translated">積分定数式</target>
        </trans-unit>
        <trans-unit id="1f4e6183969d6ec80ad6d2f378b3a85f029c653b" translate="yes" xml:space="preserve">
          <source>Integral conversions</source>
          <target state="translated">積分変換</target>
        </trans-unit>
        <trans-unit id="320e2752aea495aec73f84035d1bb6ef868679ad" translate="yes" xml:space="preserve">
          <source>Integral promotion</source>
          <target state="translated">インテグラルプロモーション</target>
        </trans-unit>
        <trans-unit id="270f2235f730fd6efca2aa9d17f0dc702810f771" translate="yes" xml:space="preserve">
          <source>Intel C++ Inline Assembly</source>
          <target state="translated">インテル C++インラインアセンブリ</target>
        </trans-unit>
        <trans-unit id="48e94a1cde254c1213e9904ae2fa6aec7a82e049" translate="yes" xml:space="preserve">
          <source>Inter-thread happens-before</source>
          <target state="translated">スレッド間で発生する前に</target>
        </trans-unit>
        <trans-unit id="fbefd7a4bdb4b3775050f8fe665496f4fc106f7d" translate="yes" xml:space="preserve">
          <source>Inter-thread synchronization and memory ordering determine how</source>
          <target state="translated">スレッド間の同期化とメモリの順序付けが、どのように</target>
        </trans-unit>
        <trans-unit id="e341892f1cc87078f7d5e926c1138ccb82e90235" translate="yes" xml:space="preserve">
          <source>Internal Compiler Error</source>
          <target state="translated">内部コンパイラエラー</target>
        </trans-unit>
        <trans-unit id="8db0e387b648322ee87a237498c06354600d50c6" translate="yes" xml:space="preserve">
          <source>Internal extensible array</source>
          <target state="translated">内部拡張可能な配列</target>
        </trans-unit>
        <trans-unit id="3eec2f184115efd5c87c5ee6ebf0d6b3a9c071ab" translate="yes" xml:space="preserve">
          <source>Internally, a locale object is implemented as-if it is a reference-counted pointer to an array (indexed by &lt;code&gt;&lt;a href=&quot;locale/id&quot;&gt;std::locale::id&lt;/a&gt;&lt;/code&gt;) of reference-counted pointers to facets: copying a locale only copies one pointer and increments several reference counts. To maintain the standard C++ library thread safety guarantees (operations on different objects are always thread-safe), both the locale reference count and each facet reference count are updated in thread-safe manner, similar to &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">内部的には、ロケールオブジェクトは、ファセットへの参照カウントポインターの配列（ &lt;code&gt;&lt;a href=&quot;locale/id&quot;&gt;std::locale::id&lt;/a&gt;&lt;/code&gt; インデックス付けされた）への参照カウントポインターである場合と同様に実装されます。カウント。標準C ++ライブラリのスレッドセーフティを維持するため（さまざまなオブジェクトに対する操作は常にスレッドセーフです）、ロケール参照カウントと各ファセット参照カウントの両方が &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; と同様にスレッドセーフな方法で更新されます。</target>
        </trans-unit>
        <trans-unit id="9dac1e92729539ac11d8cad38e7bddd13ef84d39" translate="yes" xml:space="preserve">
          <source>Internally, the character is converted to &lt;code&gt;unsigned char&lt;/code&gt; just before being written.</source>
          <target state="translated">内部的には、文字は書き込まれる直前に &lt;code&gt;unsigned char&lt;/code&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="1a300aede5a38ab0ed12e3cbf6171db92a06f041" translate="yes" xml:space="preserve">
          <source>Internally, the elements are not sorted in any particular order, but organized into buckets. Which bucket an element is placed into depends entirely on the hash of its key. This allows fast access to individual elements, since once the hash is computed, it refers to the exact bucket the element is placed into.</source>
          <target state="translated">内部的には、要素は特定の順序でソートされるのではなく、バケットに整理されています。どのバケットに要素が配置されるかは、そのキーのハッシュに完全に依存します。これにより、ハッシュが計算されると、その要素がどのバケットに置かれているかが正確に分かるので、個々の要素に素早くアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="8e3d09a97f93ab12396f4f53a23484c5868af0eb" translate="yes" xml:space="preserve">
          <source>Internally, the elements are not sorted in any particular order, but organized into buckets. Which bucket an element is placed into depends entirely on the hash of its value. This allows fast access to individual elements, since once a hash is computed, it refers to the exact bucket the element is placed into.</source>
          <target state="translated">内部的には、要素は特定の順序でソートされるのではなく、バケットに整理されています。どのバケットに要素が配置されるかは、その値のハッシュに完全に依存します。これにより、一度ハッシュが計算されると、その要素が置かれたバケットを正確に参照するので、個々の要素への高速なアクセスが可能になります。</target>
        </trans-unit>
        <trans-unit id="1d351577d1e15db8313b9f13fd0274b045e4b3f2" translate="yes" xml:space="preserve">
          <source>Internally, the elements are not sorted in any particular order, but organized into buckets. Which bucket an element is placed into depends entirely on the hash of its value. This allows fast access to individual elements, since once hash is computed, it refers to the exact bucket the element is placed into.</source>
          <target state="translated">内部的には、要素は特定の順序でソートされるのではなく、バケットに整理されています。どのバケットに要素が配置されるかは、その値のハッシュに完全に依存します。これにより、一度ハッシュが計算されると、その要素が置かれたバケットを正確に参照することができるので、個々の要素に素早くアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="4000ac517f025eca6a922c089403bb09186f8d96" translate="yes" xml:space="preserve">
          <source>International monetary numeric formatting parameters</source>
          <target state="translated">国際通貨数値フォーマットパラメータ</target>
        </trans-unit>
        <trans-unit id="a8ae931d734dc08b103a3cda5b6a5d402a381387" translate="yes" xml:space="preserve">
          <source>Interpolation operations</source>
          <target state="translated">補間操作</target>
        </trans-unit>
        <trans-unit id="0f1ee1e93c2e9e3ff3649d6745a31dd59c9090f7" translate="yes" xml:space="preserve">
          <source>Interprets a floating point value in a byte string pointed to by &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; が指すバイト文字列の浮動小数点値を解釈します。</target>
        </trans-unit>
        <trans-unit id="c521564a7a070d90bbed7e76e298ba2e2b938b7a" translate="yes" xml:space="preserve">
          <source>Interprets a floating point value in a string &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;str&lt;/code&gt; の浮動小数点値を解釈します。</target>
        </trans-unit>
        <trans-unit id="bc48cbadb6a84efbed23317d93156122ffd8c740" translate="yes" xml:space="preserve">
          <source>Interprets a floating point value in a wide string pointed to by &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; が指すワイド文字列の浮動小数点値を解釈します。</target>
        </trans-unit>
        <trans-unit id="ad9f4a5a657fd23f774f0701ca42e9ed82c97178" translate="yes" xml:space="preserve">
          <source>Interprets a signed integer value in the string &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;str&lt;/code&gt; の符号付き整数値を解釈します。</target>
        </trans-unit>
        <trans-unit id="9a608036eb59f94001912ca3733a0c15c944b183" translate="yes" xml:space="preserve">
          <source>Interprets an integer value in a byte string pointed to by &lt;code&gt;nptr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nptr&lt;/code&gt; が指すバイト文字列の整数値を解釈します。</target>
        </trans-unit>
        <trans-unit id="566cf8ed0ac571b4f2aa3ca75d488875487baeb4" translate="yes" xml:space="preserve">
          <source>Interprets an integer value in a byte string pointed to by &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; が指すバイト文字列の整数値を解釈します。</target>
        </trans-unit>
        <trans-unit id="cc2bd5d023e90da3e1640fc0f66845e22f6c8508" translate="yes" xml:space="preserve">
          <source>Interprets an integer value in a wide string pointed to by &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; が指すワイド文字列の整数値を解釈します。</target>
        </trans-unit>
        <trans-unit id="042a224facaad3cdf57ba7458290bd20ddbab9ab" translate="yes" xml:space="preserve">
          <source>Interprets an unsigned integer value in a byte string pointed to by &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; が指すバイト文字列の符号なし整数値を解釈します。</target>
        </trans-unit>
        <trans-unit id="65b433c8b60cb3b8c5443581467dc0f6ae5b6523" translate="yes" xml:space="preserve">
          <source>Interprets an unsigned integer value in a wide string pointed to by &lt;code&gt;nptr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nptr&lt;/code&gt; が指すワイド文字列内の符号なし整数値を解釈します。</target>
        </trans-unit>
        <trans-unit id="148c33b3cec53bcad46f4795046e389f68465431" translate="yes" xml:space="preserve">
          <source>Interprets an unsigned integer value in a wide string pointed to by &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; が指すワイド文字列の符号なし整数値を解釈します。</target>
        </trans-unit>
        <trans-unit id="aabb8c7d3ca13ab71a2338fd76d6fca5fd94220c" translate="yes" xml:space="preserve">
          <source>Interprets an unsigned integer value in the string &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;str&lt;/code&gt; の符号なし整数値を解釈します。</target>
        </trans-unit>
        <trans-unit id="9aa738055f64e3e6394c5784c7988113147a1c1a" translate="yes" xml:space="preserve">
          <source>Interrupted function</source>
          <target state="translated">割り込み機能</target>
        </trans-unit>
        <trans-unit id="dded3e7aba46e073c03bff678699e36b51e2c4a9" translate="yes" xml:space="preserve">
          <source>Introduces a name that is defined elsewhere into the declarative region where this using-declaration appears.</source>
          <target state="translated">他の場所で定義されている名前を、この使用宣言が出現する宣言領域に導入します。</target>
        </trans-unit>
        <trans-unit id="d63eba892386df3bd9064d08a9292099f5ee5b9f" translate="yes" xml:space="preserve">
          <source>Introduces implementation-defined attributes for types, objects, code, etc.  &lt;code&gt;[[&lt;/code&gt;</source>
          <target state="translated">タイプ、オブジェクト、コードなどの実装定義属性を紹介します。 &lt;code&gt;[[&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45ff4427a9f1fb0c18cbcdf6b26d6a2d22f2df2f" translate="yes" xml:space="preserve">
          <source>Invalid argument</source>
          <target state="translated">無効な引数</target>
        </trans-unit>
        <trans-unit id="1383c7b39080e5234bcaae9c303e96b402357694" translate="yes" xml:space="preserve">
          <source>Invalid non-zero alignments, such as &lt;code&gt;alignas(3)&lt;/code&gt; are ill-formed.</source>
          <target state="translated">&lt;code&gt;alignas(3)&lt;/code&gt; などの無効なゼロ以外の配置は、形式が正しくありません。</target>
        </trans-unit>
        <trans-unit id="86c96ba7411037b346432868bfdb3e867290952c" translate="yes" xml:space="preserve">
          <source>Invalid scalar</source>
          <target state="translated">無効なスカラ</target>
        </trans-unit>
        <trans-unit id="b6b99ba962e359de15e0e27fd677ea67331c95bc" translate="yes" xml:space="preserve">
          <source>Invalid seek</source>
          <target state="translated">無効なシーク</target>
        </trans-unit>
        <trans-unit id="41fc9b91f0fee77d14d8c449a0016aae8b1ef082" translate="yes" xml:space="preserve">
          <source>Invalidated</source>
          <target state="translated">Invalidated</target>
        </trans-unit>
        <trans-unit id="5184a57889a8a3581992c2997ad61b14585f2ce0" translate="yes" xml:space="preserve">
          <source>Invalidates any references, pointers, or iterators referring to contained elements. Any past-the-end iterator remains valid.</source>
          <target state="translated">含まれる要素を参照している参照、ポインタ、またはイテレータを無効にします。過去の終わりのイテレータはすべて有効です。</target>
        </trans-unit>
        <trans-unit id="7c48efeaf38e5bc872433889acf9dca25ee7978e" translate="yes" xml:space="preserve">
          <source>Invalidates any references, pointers, or iterators referring to contained elements. Any past-the-end iterators are also invalidated.</source>
          <target state="translated">含まれる要素を参照している参照、ポインタ、イテレータを無効にします。過去の終わりのイテレータも無効になります。</target>
        </trans-unit>
        <trans-unit id="84523b9994334aa4168c1ce7715701ecd8e7c500" translate="yes" xml:space="preserve">
          <source>Invalidates any references, pointers, or iterators referring to contained elements. May also invalidate past-the-end iterators.</source>
          <target state="translated">含まれる要素を参照している参照、ポインタ、イテレータを無効にします。また、過去の終わりのイテレータを無効にすることもあります。</target>
        </trans-unit>
        <trans-unit id="900eb067daacf1fc2f277185d1c086ea7646a1aa" translate="yes" xml:space="preserve">
          <source>Invalidates iterators and references at or after the point of the erase, including the &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; iterator.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; イテレーターを含め、消去の時点以降のイテレーターと参照を無効にします。</target>
        </trans-unit>
        <trans-unit id="57cfa38621b674967383a26be5a5ea85e99b30e4" translate="yes" xml:space="preserve">
          <source>Invalidation notes</source>
          <target state="translated">無効化の注意点</target>
        </trans-unit>
        <trans-unit id="4b1ed8b8c1a0fe2800fdf2738e1f7cc4d2d7cef2" translate="yes" xml:space="preserve">
          <source>Inverse cosine (or arc cosine) is a multivalued function and requires a branch cut on the complex plane. The branch cut is conventionally placed at the line segments (-&amp;infin;,-1) and (1,&amp;infin;) of the real axis.  The mathematical definition of the principal value of arc cosine is acos z =</source>
          <target state="translated">逆余弦（または逆余弦）は多値関数であり、複素平面上に分岐カットが必要です。分岐カットは、通常、実軸の線分（-&amp;infin;、-1）および（1、&amp;infin;）に配置されます。アークコサインの主要な値の数学的定義は、acos z =</target>
        </trans-unit>
        <trans-unit id="92db73712a1ea6cdea29021a66a4e0d10b6b003b" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic cosine is a multivalued function and requires a branch cut on the complex plane. The branch cut is conventionally placed at the line segment (-&amp;infin;,+1) of the real axis.</source>
          <target state="translated">逆双曲線余弦は多値関数であり、複素平面での分岐カットが必要です。分岐カットは、通常、実軸の線分（-&amp;infin;、+ 1）に配置されます。</target>
        </trans-unit>
        <trans-unit id="3ff0648a78636309b1cc12a67a5c7841a27e8966" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic sine is a multivalued function and requires a branch cut on the complex plane. The branch cut is conventionally placed at the line segments (-</source>
          <target state="translated">逆双曲サインは多値関数であり、複素平面上での枝切りを必要とします。分岐点は従来は線分(-)に配置されていました。</target>
        </trans-unit>
        <trans-unit id="60cf8f72dc186c6f4b4743734e8e8ed4cb1bd30a" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic tangent is a multivalued function and requires a branch cut on the complex plane. The branch cut is conventionally placed at the line segmentd (-&amp;infin;,-1] and [+1,+&amp;infin;) of the real axis.  The mathematical definition of the principal value of the inverse hyperbolic tangent is atanh z =</source>
          <target state="translated">逆双曲線正接は多値関数であり、複素平面での分岐カットが必要です。ブランチカットは、通常、実軸のセグメント化されたライン（-&amp;infin;、-1]および[+ 1、+&amp;infin;）に配置されます。逆双曲線正接の主値の数学的な定義は、tanz =</target>
        </trans-unit>
        <trans-unit id="ff28b3449f26b28c2a2ed73fffb64ba03b0e2959" translate="yes" xml:space="preserve">
          <source>Inverse sine (or arc sine) is a multivalued function and requires a branch cut on the complex plane. The branch cut is conventionally placed at the line segments (-&amp;infin;,-1) and (1,&amp;infin;) of the real axis.</source>
          <target state="translated">逆正弦（または逆正弦）は多値関数であり、複素平面上に分岐カットが必要です。分岐カットは、通常、実軸の線分（-&amp;infin;、-1）および（1、&amp;infin;）に配置されます。</target>
        </trans-unit>
        <trans-unit id="8a394149a1f48f15fcf530168253dbecfeb4322f" translate="yes" xml:space="preserve">
          <source>Inverse tangent (or arc tangent) is a multivalued function and requires a branch cut on the complex plane. The branch cut is conventionally placed at the line segments (-&amp;infin;i,-i) and (+i,+&amp;infin;i) of the imaginary axis.  The mathematical definition of the principal value of inverse tangent is atan z = -</source>
          <target state="translated">逆正接（または逆正接）は多値関数であり、複雑な平面での分岐カットが必要です。分岐カットは、通常、仮想軸の線分（-&amp;infin;i、-i）および（+ i、+&amp;infin;i）に配置されます。逆正接の主値の数学的定義は、tan z =-</target>
        </trans-unit>
        <trans-unit id="e22b4961b86c756eeda2aa9b446c8173116dbbc7" translate="yes" xml:space="preserve">
          <source>Inverts the referenced bit.</source>
          <target state="translated">参照されるビットを反転させます。</target>
        </trans-unit>
        <trans-unit id="08fcf3f000c798d1019b77985f2565bd9131f8e3" translate="yes" xml:space="preserve">
          <source>InvocableRegularInvocable</source>
          <target state="translated">InvocableRegularInvocable</target>
        </trans-unit>
        <trans-unit id="d4f9cb47dbcc2422f0bd9a0424a0965a711f4fe4" translate="yes" xml:space="preserve">
          <source>Invoke the &lt;a href=&quot;../../named_req/callable&quot;&gt;Callable&lt;/a&gt; object &lt;code&gt;f&lt;/code&gt; with the parameters &lt;code&gt;args&lt;/code&gt;. As by &lt;code&gt;INVOKE(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f), &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...)&lt;/code&gt;.</source>
          <target state="translated">呼び出し&lt;a href=&quot;../../named_req/callable&quot;&gt;呼び出し可能&lt;/a&gt;オブジェクト &lt;code&gt;f&lt;/code&gt; パラメータと &lt;code&gt;args&lt;/code&gt; 。などによる &lt;code&gt;INVOKE(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f), &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43a887b06ff69b20968832ea3de0f894899ed0b1" translate="yes" xml:space="preserve">
          <source>Invoke the &lt;a href=&quot;../named_req/callable&quot;&gt;Callable&lt;/a&gt; object &lt;code&gt;f&lt;/code&gt; with a tuple of arguments.</source>
          <target state="translated">引数のタプルを使用して&lt;a href=&quot;../named_req/callable&quot;&gt;Callable&lt;/a&gt;オブジェクト &lt;code&gt;f&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a0f26292e2434ecd2054e3f89ad01624a3592aac" translate="yes" xml:space="preserve">
          <source>Invokes &lt;code&gt;b.seed()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b.seed()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="533e38b5b781a7cf4c13a2c009ad69bee4e181ab" translate="yes" xml:space="preserve">
          <source>Invokes &lt;code&gt;b.seed(q)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b.seed(q)&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="c8de535373bc28162e3e7e5c533ad8d22bcee959" translate="yes" xml:space="preserve">
          <source>Invokes &lt;code&gt;b.seed(s)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b.seed(s)&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="43efae5b116e5f3d09b4e59697f462efb6558f1d" translate="yes" xml:space="preserve">
          <source>Invokes implementation-defined behaviour if not &lt;code&gt;&lt;a href=&quot;../io/streamoff&quot;&gt;std::streamoff&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;X&lt;/code&gt; is used as the traits template parameter in input/output classes.</source>
          <target state="translated">実装定義の振る舞い呼び出した場合ではない &lt;code&gt;&lt;a href=&quot;../io/streamoff&quot;&gt;std::streamoff&lt;/a&gt;&lt;/code&gt; とき &lt;code&gt;X&lt;/code&gt; は、入力/出力クラスに特性テンプレートパラメータとして使用されます。</target>
        </trans-unit>
        <trans-unit id="fed12ee3ef79fc236fc9bb3fd94d2fb99592217c" translate="yes" xml:space="preserve">
          <source>Invokes implementation-defined behaviour if this type is not &lt;code&gt;&lt;a href=&quot;../io/fpos&quot;&gt;std::streampos&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;X&lt;/code&gt; is used as the traits template parameter in input/output classes</source>
          <target state="translated">入力/出力クラスの特性テンプレートパラメータとして &lt;code&gt;X&lt;/code&gt; が使用されているときに、この型が &lt;code&gt;&lt;a href=&quot;../io/fpos&quot;&gt;std::streampos&lt;/a&gt;&lt;/code&gt; ない場合、実装定義の動作を呼び出します</target>
        </trans-unit>
        <trans-unit id="10839e4e143f807b60e96a2d95d532d052d717e3" translate="yes" xml:space="preserve">
          <source>Invokes the stored callable function target with the parameters &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; 使用して、格納されている呼び出し可能な関数ターゲットを呼び出します。</target>
        </trans-unit>
        <trans-unit id="b3c06b4bbdf7388ea26ca66d81ec0d37bcc14b0f" translate="yes" xml:space="preserve">
          <source>Invoking over Incomplete Types</source>
          <target state="translated">不完全な型に対する呼び出し</target>
        </trans-unit>
        <trans-unit id="d82b06adf1a876d702b6a3905d8d56b51827e40e" translate="yes" xml:space="preserve">
          <source>Is a directory</source>
          <target state="translated">ディレクトリは</target>
        </trans-unit>
        <trans-unit id="3dfd81af531e4d3b7128a14d5c41e637a26dc974" translate="yes" xml:space="preserve">
          <source>It can also be called using member function call syntax:</source>
          <target state="translated">メンバ関数呼び出し構文を使用して呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="09e1f9f748059f808777769884d3dc5b93769167" translate="yes" xml:space="preserve">
          <source>It can also be used to detect validity of an expression:</source>
          <target state="translated">また、表現の妥当性を検出するためにも使用することができる。</target>
        </trans-unit>
        <trans-unit id="3ee5198972c83e32aa4a5a28496aa84dc1d7e5c4" translate="yes" xml:space="preserve">
          <source>It can be used to specify additional constraints in terms of local parameters. The constraint-expression must be satisfied by the substituted template arguments, if any. Substitution of template arguments into a nested requirement causes substitution into the constraint-expression only to the extent needed to determine whether the constraint-expression is satisfied.</source>
          <target state="translated">これは、ローカル・パラメータの観点から追加の制約を指定するために使用することができます。制約式は、置換されたテンプレート引数があれば、それによって満たされなければなりません。テンプレート引数を入れ子にした要件に置き換えると、制約式が満たされているかどうかを判断するために必要な範囲でのみ、制約式に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="619583a1fc7588b9b8e425ca17f621a35be87edb" translate="yes" xml:space="preserve">
          <source>It can be used with a named variable:</source>
          <target state="translated">名前付き変数と一緒に使うことができます。</target>
        </trans-unit>
        <trans-unit id="dc95ed9cfcbc19e43b1a73cbe3345e11d2c4b4b0" translate="yes" xml:space="preserve">
          <source>It can be used within a function template's &lt;a href=&quot;noexcept_spec&quot;&gt; noexcept specifier&lt;/a&gt; to declare that the function will throw exceptions for some types but not others.</source>
          <target state="translated">関数テンプレートの&lt;a href=&quot;noexcept_spec&quot;&gt;noexcept指定子&lt;/a&gt;内で使用して、関数が一部のタイプでは例外をスローし、他のタイプでは例外をスローしないことを宣言できます。</target>
        </trans-unit>
        <trans-unit id="1095ba2835f4490f22e5cd2104e56ec80a11aef2" translate="yes" xml:space="preserve">
          <source>It consists of a collection of</source>
          <target state="translated">のコレクションで構成されています。</target>
        </trans-unit>
        <trans-unit id="a6dfca72e61bb66f5282dc9be56b501edd0e1c20" translate="yes" xml:space="preserve">
          <source>It consists of a count of ticks of type &lt;code&gt;Rep&lt;/code&gt; and a tick period, where the tick period is a compile-time rational constant representing the number of seconds from one tick to the next.</source>
          <target state="translated">これは、タイプ &lt;code&gt;Rep&lt;/code&gt; のティックのカウントとティック期間で構成されます。ティック期間は、1つのティックから次のティックまでの秒数を表すコンパイル時の有理定数です。</target>
        </trans-unit>
        <trans-unit id="8fe8176ea54439a7ccb802fb9944ca38d007f40a" translate="yes" xml:space="preserve">
          <source>It has the same &lt;a href=&quot;access&quot;&gt;access&lt;/a&gt; as the corresponding base constructor. It is &lt;code&gt;constexpr&lt;/code&gt; if the user-defined constructor would have satisfied &lt;code&gt;constexpr&lt;/code&gt; constructor requirements. It is deleted if the corresponding base constructor is deleted or if a defaulted default constructor would be deleted (except that the construction of the base whose constructor is being inherited doesn't count). An inheriting constructor cannot be explicitly instantiated or explicitly specialized.</source>
          <target state="translated">これは、対応する基本コンストラクターと同じ&lt;a href=&quot;access&quot;&gt;アクセス権&lt;/a&gt;を持っています。ユーザー定義コンストラクターが &lt;code&gt;constexpr&lt;/code&gt; コンストラクターの要件を満たしている場合、それは &lt;code&gt;constexpr&lt;/code&gt; です。対応するベースコンストラクターが削除された場合、またはデフォルトのデフォルトコンストラクターが削除された場合は削除されます（コンストラクターが継承されているベースの構築はカウントされません）。継承するコンストラクターを明示的にインスタンス化したり、明示的に特殊化したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="0ac2d8ef890218e1971697be578d263616be6031" translate="yes" xml:space="preserve">
          <source>It indicates that a the function definition should be optimized for invocation from a &lt;code&gt;synchronized&lt;/code&gt; statement. In particular, it avoids serializing synchronized blocks that make a call to a function that is transaction-safe for the majority of calls, but not for all calls (e.g. hash table insertion that may have to rehash, allocator that may have to request a new block, a simple function that may rarely log).</source>
          <target state="translated">これは、 &lt;code&gt;synchronized&lt;/code&gt; ステートメントからの呼び出しのために関数定義を最適化する必要があることを示しています。特に、大部分の呼び出しではトランザクションセーフであるが、すべての呼び出しではない関数への呼び出しを行う同期ブロックのシリアル化を回避します（たとえば、再ハッシュが必要なハッシュテーブルの挿入、新しいハッシュを要求する必要があるアロケータ）ブロック、まれにログに記録される可能性がある単純な関数）。</target>
        </trans-unit>
        <trans-unit id="31f0bb20de8e96b8260678ddcc2cec2269507d64" translate="yes" xml:space="preserve">
          <source>It is a non-binding request to reduce &lt;code&gt;&lt;a href=&quot;capacity&quot;&gt;capacity()&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt;. It depends on the implementation if the request is fulfilled.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;capacity&quot;&gt;capacity()&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; に減らすことは、拘束力のない要求です。要求が満たされるかどうかは実装に依存します。</target>
        </trans-unit>
        <trans-unit id="2d5740434b4376cbb133c18052ef3ec7113f5eaf" translate="yes" xml:space="preserve">
          <source>It is a non-binding request to reduce &lt;code&gt;&lt;a href=&quot;capacity&quot;&gt;capacity()&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt;. It depends on the implementation whether the request is fulfilled.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;capacity&quot;&gt;capacity()&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; に減らすことは、拘束力のない要求です。要求が満たされるかどうかは実装に依存します。</target>
        </trans-unit>
        <trans-unit id="4b00903590e8f552a1ace12bc5841762223d788d" translate="yes" xml:space="preserve">
          <source>It is a non-binding request to reduce the memory usage without changing the size of the sequence. It depends on the implementation whether the request is fulfilled.</source>
          <target state="translated">シーケンスのサイズを変更せずにメモリ使用量を減らすための非バインディング要求です。リクエストが満たされるかどうかは実装に依存します。</target>
        </trans-unit>
        <trans-unit id="d97fe75aaa98f7e001c2ef2b3b758e21ceb5c984" translate="yes" xml:space="preserve">
          <source>It is allowed for the same declaration to be found more than once:</source>
          <target state="translated">同じ宣言が複数回見られることが認められています。</target>
        </trans-unit>
        <trans-unit id="7acda9ca39c15e684583b5939db44164abbca690" translate="yes" xml:space="preserve">
          <source>It is an error if &lt;code&gt;p&lt;/code&gt; does not refer to a symbolic link.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; がシンボリックリンクを参照していない場合はエラーになります。</target>
        </trans-unit>
        <trans-unit id="4ac6d6c59239a9e9a0945510352b875d15d0c303" translate="yes" xml:space="preserve">
          <source>It is equivalent to.</source>
          <target state="translated">に相当します。</target>
        </trans-unit>
        <trans-unit id="dd397495d30164a47687cc68d3ee3debb8de228e" translate="yes" xml:space="preserve">
          <source>It is implementation-defined whether &lt;code&gt;rand()&lt;/code&gt; is thread-safe.</source>
          <target state="translated">&lt;code&gt;rand()&lt;/code&gt; がスレッドセーフかどうかは、実装によって定義されます。</target>
        </trans-unit>
        <trans-unit id="84efe53047a466556350dca48b226733f419c2a9" translate="yes" xml:space="preserve">
          <source>It is implementation-defined whether any &lt;a href=&quot;../language/objects#Alignment&quot;&gt;extended alignment&lt;/a&gt; is supported.</source>
          <target state="translated">&lt;a href=&quot;../language/objects#Alignment&quot;&gt;拡張アラインメント&lt;/a&gt;がサポートされているかどうかは、実装定義です。</target>
        </trans-unit>
        <trans-unit id="f3b9b360dbecc9ae1960b9e40b3f44904781af81" translate="yes" xml:space="preserve">
          <source>It is implementation-defined whether dynamic initialization happens-before the first statement of the main function (for statics) or the initial function of the thread (for thread-locals), or deferred to happen after.</source>
          <target state="translated">動的な初期化は、メイン関数(静的な場合)やスレッドの初期関数(スレッドローカルな場合)の最初のステートメントの前に行われるのか、それとも後に行われるように延期されるのかは、実装で定義されています。</target>
        </trans-unit>
        <trans-unit id="61a3a1813d80165d2df5ab50673ad21ec5aecc5a" translate="yes" xml:space="preserve">
          <source>It is implementation-defined which scalar types satisfy this trait, but unsigned(until C++20) integer types that do not use padding bits are guaranteed to have unique object representations.</source>
          <target state="translated">どのスカラー型がこの特性を満たすかは実装で定義されていますが、パディングビットを使用しない unsigned(C++20 まで)整数型は、一意のオブジェクト表現を持つことが保証されています。</target>
        </trans-unit>
        <trans-unit id="f452c9b19e8125eb753da2303a095249683e2189" translate="yes" xml:space="preserve">
          <source>It is important to remember this rule while ordering the header files of a translation unit. For more examples of the interplay between function overloads and function specializations, expand below:</source>
          <target state="translated">翻訳ユニットのヘッダファイルを順番に並べる際には、このルールを覚えておくことが重要です。関数のオーバーロードと関数の特殊化の間の相互作用のより多くの例については、以下に展開します。</target>
        </trans-unit>
        <trans-unit id="84f7f9e6e1a9d37badb5dd8311ca6a0bc6dbdb31" translate="yes" xml:space="preserve">
          <source>It is intended that &lt;code&gt;Copyable&amp;lt;T&amp;gt;&lt;/code&gt; also requires &lt;code&gt;std::&lt;a href=&quot;assignable&quot;&gt;Assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;gt;&lt;/code&gt; (assignment from const rvalue) and &lt;code&gt;std::&lt;a href=&quot;assignable&quot;&gt;Assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;gt;&lt;/code&gt; (assignment from non-const lvalue) to be satisfied.</source>
          <target state="translated">&lt;code&gt;Copyable&amp;lt;T&amp;gt;&lt;/code&gt; には、 &lt;code&gt;std::&lt;a href=&quot;assignable&quot;&gt;Assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;gt;&lt;/code&gt; （const rvalueからの割り当て）および &lt;code&gt;std::&lt;a href=&quot;assignable&quot;&gt;Assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;gt;&lt;/code&gt; （非const lvalueからの割り当て）も満たす必要があることを意図しています。</target>
        </trans-unit>
        <trans-unit id="e89c6edc67ab990f4dbf2f94411a54a2785ae48a" translate="yes" xml:space="preserve">
          <source>It is legal to pass a pointer to a &lt;code&gt;va_list&lt;/code&gt; object to another function and then use that object after the function returns.</source>
          <target state="translated">&lt;code&gt;va_list&lt;/code&gt; オブジェクトへのポインタを別の関数に渡し、関数が戻った後にそのオブジェクトを使用することは正当です。</target>
        </trans-unit>
        <trans-unit id="600fa81257e98fe2222f530f6041ece9a9c792cf" translate="yes" xml:space="preserve">
          <source>It is not guaranteed that immediately after setting the write time, the value returned by (1) is the same as what was passed as the argument to (2) because the file system's time may be more granular than &lt;code&gt;file_time_type&lt;/code&gt;.</source>
          <target state="translated">ファイルシステムの時間は &lt;code&gt;file_time_type&lt;/code&gt; よりも細かい場合があるため、書き込み時間を設定した直後に、（1）から返される値が（2）に引数として渡された値と同じであるとは限りません。</target>
        </trans-unit>
        <trans-unit id="19e7f91c42b80c040f054b6d4d2717f7558a91ea" translate="yes" xml:space="preserve">
          <source>It is not possible to change the precedence, grouping, or number of operands of operators.</source>
          <target state="translated">演算子の優先順位、グループ化、オペランドの数を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="d6f058ae02644804095fa603da188cdda6b78a90" translate="yes" xml:space="preserve">
          <source>It is not possible to query the current output format.</source>
          <target state="translated">現在の出力形式を問い合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="ab4860699c3e4136650eba42ced4751e96f60a0f" translate="yes" xml:space="preserve">
          <source>It is not user-provided (meaning, it is implicitly-defined or defaulted);</source>
          <target state="translated">ユーザーが提供するものではありません(暗黙のうちに定義されているか、デフォルトであることを意味します)。</target>
        </trans-unit>
        <trans-unit id="97be44c3bf3295b1767f75794d7dfeb5ea6fcc99" translate="yes" xml:space="preserve">
          <source>It is only safe to invoke the destructor if all threads have been notified. It is not required that they have exited their respective wait functions: some threads may still be waiting to reacquire the associated lock, or may be waiting to be scheduled to run after reacquiring it.</source>
          <target state="translated">すべてのスレッドが通知されている場合にのみ、 デストラクタを起動するのが安全です。スレッドの中には、関連するロックを再取得するためにまだ待っているものや、 ロックを再取得した後に実行するようにスケジューリングされるのを待っているものがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e70768e4115e7101bd5fd956648b5b4a1a7b7407" translate="yes" xml:space="preserve">
          <source>It is permitted to call &lt;code&gt;shared_from_this&lt;/code&gt; only on a previously shared object, i.e. on an object managed by &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; (in particular, &lt;code&gt;shared_from_this&lt;/code&gt; cannot be called during construction of &lt;code&gt;*this&lt;/code&gt;).</source>
          <target state="translated">呼び出すことが許可されている &lt;code&gt;shared_from_this&lt;/code&gt; をのみによって管理されたオブジェクトの以前の共有オブジェクト、つまり上 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; （特に、 &lt;code&gt;shared_from_this&lt;/code&gt; は、建設中に呼び出すことはできません &lt;code&gt;*this&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e237c9465035935c40984d4ba69fc9854677f449" translate="yes" xml:space="preserve">
          <source>It is permitted to call &lt;code&gt;shared_from_this&lt;/code&gt; only on a previously shared object, i.e. on an object managed by &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. Otherwise the behavior is undefined(until C++17)&lt;code&gt;&lt;a href=&quot;bad_weak_ptr&quot;&gt;std::bad_weak_ptr&lt;/a&gt;&lt;/code&gt; is thrown (by the shared_ptr constructor from a default-constructed &lt;code&gt;weak_this&lt;/code&gt;)(since C++17).</source>
          <target state="translated">以前に共有されたオブジェクト、つまり &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; &amp;lt;T&amp;gt;によって管理されているオブジェクトに対してのみ、 &lt;code&gt;shared_from_this&lt;/code&gt; を呼び出すことができます。そうでない場合、動作は未定義です（C ++ 17まで） &lt;code&gt;&lt;a href=&quot;bad_weak_ptr&quot;&gt;std::bad_weak_ptr&lt;/a&gt;&lt;/code&gt; がスローされます（デフォルトで作成された &lt;code&gt;weak_this&lt;/code&gt; からのshared_ptrコンストラクターによって）（C ++ 17以降）。</target>
        </trans-unit>
        <trans-unit id="87374d898360b164d7d485ca958f9b4f6331b966" translate="yes" xml:space="preserve">
          <source>It is permitted to form references to references through type manipulations in templates or typedefs, in which case the</source>
          <target state="translated">テンプレートや型定義ファイルの型操作によって参照への参照を形成することが許可されています。</target>
        </trans-unit>
        <trans-unit id="c212dba4876364523e05a1fc0269ee84b6e501a5" translate="yes" xml:space="preserve">
          <source>It is possible to construct &lt;code&gt;std::gslice&lt;/code&gt; objects that select some indices more than once: if the above example used the strides &lt;code&gt;{1,1,1} &lt;/code&gt;, the indices would have been &lt;code&gt;{3, 4, 5, 4, 5, 6, ...} &lt;/code&gt;. Such gslices may only be used as arguments to the const version of &lt;code&gt;std::valarray::operator[]&lt;/code&gt;, otherwise the behavior is undefined.</source>
          <target state="translated">それが構築することが可能である &lt;code&gt;std::gslice&lt;/code&gt; 複数回いくつかの指標を選択したオブジェクトを上記の例では、ストライド使用される場合 &lt;code&gt;{1,1,1} &lt;/code&gt; 、インデックスがあったであろう &lt;code&gt;{3, 4, 5, 4, 5, 6, ...} &lt;/code&gt; 。このようなgslicesは、 &lt;code&gt;std::valarray::operator[]&lt;/code&gt; のconstバージョンへの引数としてのみ使用できます。それ以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="4ede96757c156e593ca1e3cea610558948eb5cc8" translate="yes" xml:space="preserve">
          <source>It is possible to execute &lt;code&gt;delete this;&lt;/code&gt;, if the program can guarantee that the object was allocated by &lt;code&gt;new&lt;/code&gt;, however, this renders every pointer to the deallocated object invalid, including the &lt;code&gt;this&lt;/code&gt; pointer itself: after &lt;code&gt;delete this;&lt;/code&gt; returns, such member function cannot refer to a member of a class (since this involves an implicit dereference of &lt;code&gt;this&lt;/code&gt;) and no other member function may be called. This is used, for example, in the member function of the control block of &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; responsible for decrementing the reference count, when the last reference to the managed object goes out of scope.</source>
          <target state="translated">これを &lt;code&gt;delete this;&lt;/code&gt; ことが可能です。ただし、プログラムがオブジェクトが &lt;code&gt;new&lt;/code&gt; によって割り当てられたことを保証できる場合、これにより、割り当て解除されたオブジェクトへのすべてのポインタが &lt;code&gt;this&lt;/code&gt; ポインタ自体を含めて無効になります &lt;code&gt;delete this;&lt;/code&gt; （これは暗黙の参照解除を伴うので戻って、このようなメンバー関数は、クラスのメンバを参照することはできません &lt;code&gt;this&lt;/code&gt; ）および他のメンバ関数が呼び出されなくてもよいです。これは、たとえば、管理対象オブジェクトへの最後の参照がスコープ外になったときに、参照カウントをデクリメントする &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 制御ブロックのメンバー関数で使用されます。</target>
        </trans-unit>
        <trans-unit id="4f49e2aea7f63f794694b0764f8e62bb0888805b" translate="yes" xml:space="preserve">
          <source>It is safe, and in fact, preferable in generic code, to use deduction to forwarding reference, &lt;code&gt;for (auto&amp;amp;&amp;amp; var : sequence)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;for (auto&amp;amp;&amp;amp; var : sequence)&lt;/code&gt; 、転送参照への演繹を使用することは、安全であり、実際、一般的なコードでは望ましいことです。</target>
        </trans-unit>
        <trans-unit id="6f58e92744c1e3c6d83adcd0474626686db527bd" translate="yes" xml:space="preserve">
          <source>It is said that a converting constructor specifies an implicit conversion from the types of its arguments (if any) to the type of its class. Note that non-explicit &lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion function&lt;/a&gt; also specifies an implicit conversion.</source>
          <target state="translated">変換コンストラクターは、その引数のタイプ（存在する場合）からそのクラスのタイプへの暗黙的な変換を指定すると言われています。非明示的な&lt;a href=&quot;cast_operator&quot;&gt;ユーザー定義の変換関数&lt;/a&gt;も暗黙的な変換を指定することに注意してください。</target>
        </trans-unit>
        <trans-unit id="edfaaadef05ca0b8cdce0f012fc27fee94079175" translate="yes" xml:space="preserve">
          <source>It is the programmer's responsibility to ensure that &lt;code&gt;std::string_view&lt;/code&gt; does not outlive the pointed-to character array:</source>
          <target state="translated">&lt;code&gt;std::string_view&lt;/code&gt; がポイントされた文字配列よりも長く存続しないようにするのは、プログラマーの責任です。</target>
        </trans-unit>
        <trans-unit id="a4d949d7d8bd7c5ac1b3559c799fce0b606f5cea" translate="yes" xml:space="preserve">
          <source>It is the programmer's responsibility to ensure that the &lt;code&gt;&lt;a href=&quot;basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt; object passed to the iterator's constructor outlives the iterator. Because the iterator stores a &lt;code&gt;&lt;a href=&quot;regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&lt;/code&gt; which stores a pointer to the regex, incrementing the iterator after the regex was destroyed results in undefined behavior.</source>
          <target state="translated">イテレーターのコンストラクターに渡された &lt;code&gt;&lt;a href=&quot;basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt; オブジェクトがイテレーターよりも長く存続するようにするのは、プログラマーの責任です。イテレーターは正規表現へのポインターを格納する &lt;code&gt;&lt;a href=&quot;regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&lt;/code&gt; を格納するため、正規表現が破棄された後にイテレーターをインクリメントすると、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="5d0ef4a8a26d0c98d105421ede3ede0ed4125959" translate="yes" xml:space="preserve">
          <source>It is the programmer's responsibility to ensure that the &lt;code&gt;&lt;a href=&quot;basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt; object passed to the iterator's constructor outlives the iterator. Because the iterator stores a pointer to the regex, incrementing the iterator after the regex was destroyed accesses a dangling pointer.</source>
          <target state="translated">イテレーターのコンストラクターに渡された &lt;code&gt;&lt;a href=&quot;basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt; オブジェクトがイテレーターよりも長く存続するようにするのは、プログラマーの責任です。イテレータは正規表現へのポインタを格納するため、正規表現が破棄された後にイテレータをインクリメントすると、ダングリングポインタにアクセスします。</target>
        </trans-unit>
        <trans-unit id="8ae84d20cf6f06aca28cb06cdba2bd625fad38b1" translate="yes" xml:space="preserve">
          <source>It is undefined behavior to reuse storage that is or was occupied by a const complete object of static, thread-local, or automatic storage duration because such objects may be stored in read-only memory.</source>
          <target state="translated">静的、スレッドローカル、または自動ストレージ期間のconst完全オブジェクトによって占有されている、または占有されていたストレージを再利用することは、定義されていない動作です。</target>
        </trans-unit>
        <trans-unit id="48d04478371a33f8869a2e04a1a90a78036dbfec" translate="yes" xml:space="preserve">
          <source>It is unspecified how the implementation makes these adjustments. This means that a compiler may call an implementation-specific search function, in which case a user-defined specialization of &lt;code&gt;regex_search&lt;/code&gt; will not be called.</source>
          <target state="translated">実装がこれらの調整を行う方法は不定です。これは、コンパイラーが実装固有の検索関数を呼び出す可能性があることを意味します。この場合、ユーザー定義の &lt;code&gt;regex_search&lt;/code&gt; の特殊化は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="f7589f89a7b5d81e1f9bfdc1b0ceb532d0fc8435" translate="yes" xml:space="preserve">
          <source>It is unspecified when the past-the-end iterator is invalidated.</source>
          <target state="translated">過去終了イテレータが無効になった場合は不定です。</target>
        </trans-unit>
        <trans-unit id="326b1cd1f8d02d7684396bd886d2e1c17251cc10" translate="yes" xml:space="preserve">
          <source>It is unspecified whether &lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt; is actually included when the standard library functions perform the swap, so the user-provided &lt;code&gt;swap()&lt;/code&gt; should not expect it to be included.</source>
          <target state="translated">標準ライブラリ関数がスワップを実行するときに &lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt; が実際に含まれるかどうかは指定されていないため、ユーザー提供の &lt;code&gt;swap()&lt;/code&gt; が含まれることを期待すべきではありません。</target>
        </trans-unit>
        <trans-unit id="c08baf030a373796ca075a1cddf067e089df15bb" translate="yes" xml:space="preserve">
          <source>It is unspecified whether library versions of &lt;code&gt;operator new&lt;/code&gt; make any calls to &lt;code&gt;&lt;a href=&quot;../c/malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt;or &lt;code&gt;&lt;a href=&quot;../c/aligned_alloc&quot;&gt;std::aligned_alloc&lt;/a&gt;&lt;/code&gt;(since C++17).</source>
          <target state="translated">&lt;code&gt;operator new&lt;/code&gt; のライブラリバージョンが &lt;code&gt;&lt;a href=&quot;../c/malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../c/aligned_alloc&quot;&gt;std::aligned_alloc&lt;/a&gt;&lt;/code&gt; 呼び出すかどうかは指定されていません（C ++ 17以降）。</target>
        </trans-unit>
        <trans-unit id="a4ad188c2e57b182fa5e3f165eb2ba5d04005026" translate="yes" xml:space="preserve">
          <source>It is unspecified whether the destructor for the object referred to by &lt;code&gt;typeid&lt;/code&gt; is executed at the end of the program.</source>
          <target state="translated">&lt;code&gt;typeid&lt;/code&gt; によって参照されるオブジェクトのデストラクタがプログラムの最後に実行されるかどうかは指定されていません。</target>
        </trans-unit>
        <trans-unit id="ba80c2d544e0bc888b885567b5eaf901bde4dfd1" translate="yes" xml:space="preserve">
          <source>It is unspecified whether virtual base class subobjects that are accessible through more than one path in the inheritance lattice, are assigned more than once by the implicitly-defined copy assignment operator (same applies to &lt;a href=&quot;move_operator&quot;&gt;move assignment&lt;/a&gt;).</source>
          <target state="translated">継承ラティス内の複数のパスを介してアクセス可能な仮想基本クラスサブオブジェクトが、暗黙的に定義されたコピー割り当て演算子によって複数回割り当てられるかどうかは指定されていません（&lt;a href=&quot;move_operator&quot;&gt;移動割り当て&lt;/a&gt;と同じです）。</target>
        </trans-unit>
        <trans-unit id="95593cbb778289249ae714a71b756ce2cf19a0ff" translate="yes" xml:space="preserve">
          <source>It is unspecified whether virtual base class subobjects that are accessible through more than one path in the inheritance lattice, are assigned more than once by the implicitly-defined move assignment operator (same applies to &lt;a href=&quot;as_operator&quot;&gt;copy assignment&lt;/a&gt;).</source>
          <target state="translated">継承ラティス内の複数のパスを介してアクセス可能な仮想基本クラスサブオブジェクトが、暗黙的に定義された移動割り当て演算子によって複数回割り当てられるかどうかは指定されていません（&lt;a href=&quot;as_operator&quot;&gt;コピー割り当てにも&lt;/a&gt;同じことが当てはまります）。</target>
        </trans-unit>
        <trans-unit id="923b1d52d8265df676c6882541dea0ee1c7e5835" translate="yes" xml:space="preserve">
          <source>It is unspecified whether virtual base subobjects are compared more than once.</source>
          <target state="translated">仮想ベースのサブオブジェクトが複数回比較されるかどうかは不明です。</target>
        </trans-unit>
        <trans-unit id="b0253dc9c61d1b681c7e56bf36a208e187bd7459" translate="yes" xml:space="preserve">
          <source>It is up to the program to ensure that the alignment assumption actually holds. A call to &lt;code&gt;assume_aligned&lt;/code&gt; does not cause the compiler to verify or enforce this.</source>
          <target state="translated">アラインメントの仮定が実際に満たされるようにするのはプログラムの責任です。 &lt;code&gt;assume_aligned&lt;/code&gt; を呼び出しても、コンパイラーはこれを検証または強制しません。</target>
        </trans-unit>
        <trans-unit id="c454768f7ee08c8dd39602a9d383338c66d1c6a9" translate="yes" xml:space="preserve">
          <source>It is used to represent offsets from stream positions (values of type &lt;code&gt;&lt;a href=&quot;fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt;). A &lt;code&gt;std::streamoff&lt;/code&gt; value of &lt;code&gt;-1&lt;/code&gt; is also used to represent error conditions by some of the I/O library functions.</source>
          <target state="translated">ストリーム位置からのオフセット（型 &lt;code&gt;&lt;a href=&quot;fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt; 値）を表すために使用されます。 &lt;code&gt;std::streamoff&lt;/code&gt; の値が &lt;code&gt;-1&lt;/code&gt; また、I / Oライブラリの機能の一部でエラー状態を表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="dc825523729ab0100d6865928993fc1eba1d20c0" translate="yes" xml:space="preserve">
          <source>It may be thrown by the member functions of &lt;code&gt;&lt;a href=&quot;../../utility/bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;, by &lt;code&gt;&lt;a href=&quot;../../string/basic_string/stol&quot;&gt;std::stoi&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../string/basic_string/stof&quot;&gt;std::stod&lt;/a&gt;&lt;/code&gt; families of functions, and by the bounds-checked member access functions (e.g. &lt;code&gt;&lt;a href=&quot;../../container/vector/at&quot;&gt;std::vector::at&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../container/map/at&quot;&gt;std::map::at&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../utility/bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; のメンバー関数、std :: &lt;code&gt;&lt;a href=&quot;../../string/basic_string/stol&quot;&gt;std::stoi&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../../string/basic_string/stof&quot;&gt;std::stod&lt;/a&gt;&lt;/code&gt; ファミリーの関数、および境界チェックされたメンバーアクセス関数（例： &lt;code&gt;&lt;a href=&quot;../../container/vector/at&quot;&gt;std::vector::at&lt;/a&gt;&lt;/code&gt; :)によってスローされます。atおよび &lt;code&gt;&lt;a href=&quot;../../container/map/at&quot;&gt;std::map::at&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e6c4c0849336c6395a555e7802361736a0a0c377" translate="yes" xml:space="preserve">
          <source>It may not be monotonic: on most systems, the system time can be adjusted at any moment. It is the only C++ clock that has the ability to map its time points to C-style time, and, therefore, to be displayed(until C++20).</source>
          <target state="translated">単調ではないかもしれません:ほとんどのシステムでは、システム時刻はいつでも調整できます。これは、その時間ポイントを C スタイルの時間にマップする機能を持つ唯一の C++クロックであり、そのため表示することができます(C++20 まで)。</target>
        </trans-unit>
        <trans-unit id="4ff81608e3ae9cd2b8502e188922f1126aed8496" translate="yes" xml:space="preserve">
          <source>It must have a &lt;code&gt;constexpr&lt;/code&gt; constructor that takes some implementation-defined literal type.</source>
          <target state="translated">それは持っている必要があります &lt;code&gt;constexpr&lt;/code&gt; ののいくつかの実装定義リテラルの型を取るコンストラクタを。</target>
        </trans-unit>
        <trans-unit id="a342065b388bf8640367f4a9dd97692d21114f7f" translate="yes" xml:space="preserve">
          <source>It owns the allocated memory and frees it on destruction, even if &lt;code&gt;deallocate&lt;/code&gt; has not been called for some of the allocated blocks.</source>
          <target state="translated">割り当てられたブロックの一部で &lt;code&gt;deallocate&lt;/code&gt; が呼び出されていなくても、割り当てられたメモリを所有し、破棄時に解放します。</target>
        </trans-unit>
        <trans-unit id="747d8a8f672f5ac61ae339d4eb41b3ce9338913c" translate="yes" xml:space="preserve">
          <source>It provides a way to seed a large number of random number engines or to seed a generator that requires a lot of entropy, given a small seed or a poorly distributed initial seed sequence.</source>
          <target state="translated">それは、多数の乱数エンジンをシードする方法を提供するか、または、小さなシードまたは貧弱に分布した初期シードシーケンスを与えられて、多くのエントロピーを必要とするジェネレータをシードする方法を提供します。</target>
        </trans-unit>
        <trans-unit id="85a990d0ad9f04a8b78c0432369377fa53e60519" translate="yes" xml:space="preserve">
          <source>It provides the guarantee that all output made to the same final destination buffer (std::cout in the examples above) will be free of data races and will not be interleaved or garbled in any way, as long as every write to the that final destination buffer is made through (possibly different) instances of &lt;code&gt;std::basic_osyncstream&lt;/code&gt;.</source>
          <target state="translated">同じ最終宛先バッファー（上記の例ではstd :: cout）に対して行われるすべての出力にデータ競合がなく、その最終へのすべての書き込みがある限り、インターリーブまたは文字化けしないことが保証されます。宛先バッファは &lt;code&gt;std::basic_osyncstream&lt;/code&gt; （おそらく異なる）インスタンスを介して作成されます。</target>
        </trans-unit>
        <trans-unit id="0cdae659e4031c70f43c202403b0e9b266332015" translate="yes" xml:space="preserve">
          <source>It returns the iterator itself, which makes it possible to use code such as &lt;code&gt;*iter = value&lt;/code&gt; to output (insert) the value into the underlying container.</source>
          <target state="translated">イテレータ自体を返すため、 &lt;code&gt;*iter = value&lt;/code&gt; などのコードを使用して、基になるコンテナに値を出力（挿入）できます。</target>
        </trans-unit>
        <trans-unit id="4e71ff091467aa53e4a20b3c8e2eb730c31146dd" translate="yes" xml:space="preserve">
          <source>It returns the iterator itself, which makes it possible to use code such as &lt;code&gt;*iter = value&lt;/code&gt; to output (insert) the value into the underlying stream.</source>
          <target state="translated">イテレータ自体を返すため、 &lt;code&gt;*iter = value&lt;/code&gt; などのコードを使用して、基になるストリームに値を出力（挿入）できます。</target>
        </trans-unit>
        <trans-unit id="3bcdb39cfdb013b01f34aa6003e5bc508f218b9f" translate="yes" xml:space="preserve">
          <source>It's unspecified if these functions zero out the fields in &lt;code&gt;*t&lt;/code&gt; that they do not set directly: portable programs should initialize every field to zero before calling &lt;code&gt;get()&lt;/code&gt;.</source>
          <target state="translated">これらの関数が &lt;code&gt;*t&lt;/code&gt; のフィールドをゼロに設定するかどうかは、直接設定されないため規定されていません。移植可能なプログラムは、 &lt;code&gt;get()&lt;/code&gt; を呼び出す前にすべてのフィールドをゼロに初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="091b8d78ec3176b66348479ab0a7eba113756aa7" translate="yes" xml:space="preserve">
          <source>Iter</source>
          <target state="translated">Iter</target>
        </trans-unit>
        <trans-unit id="eaad30c6c7239ee4988afc79198142d6357df99b" translate="yes" xml:space="preserve">
          <source>Iteration statements</source>
          <target state="translated">反復文</target>
        </trans-unit>
        <trans-unit id="3e6a261991d848c9d7f1a6f775a1646474ac0d8e" translate="yes" xml:space="preserve">
          <source>Iteration statements repeatedly execute some code.</source>
          <target state="translated">イテレーション文は、いくつかのコードを繰り返し実行します。</target>
        </trans-unit>
        <trans-unit id="bae8809b2429231a50c28ba87cecc038aac88855" translate="yes" xml:space="preserve">
          <source>Iterator</source>
          <target state="translated">Iterator</target>
        </trans-unit>
        <trans-unit id="4dee12b442c04cdb4820f91dbc5c57a6bfcea0f2" translate="yes" xml:space="preserve">
          <source>Iterator adaptors</source>
          <target state="translated">イテレータアダプタ</target>
        </trans-unit>
        <trans-unit id="4d118461fd53be5789511318e9a62fde653cd961" translate="yes" xml:space="preserve">
          <source>Iterator associated types</source>
          <target state="translated">イテレータに関連する型</target>
        </trans-unit>
        <trans-unit id="7dfb7f0ff3c8f35daf7e4c6ffdf06bc0e90e799b" translate="yes" xml:space="preserve">
          <source>Iterator categories</source>
          <target state="translated">イテレータカテゴリ</target>
        </trans-unit>
        <trans-unit id="4f31e7d075beed31a4d019c7620a3efff3cce0c6" translate="yes" xml:space="preserve">
          <source>Iterator category</source>
          <target state="translated">イテレータカテゴリ</target>
        </trans-unit>
        <trans-unit id="45c0e163119730d64e4e88a9e88e486c24564923" translate="yes" xml:space="preserve">
          <source>Iterator category tags carry information that can be used to select the most efficient algorithms for the specific requirement set that is implied by the category.</source>
          <target state="translated">イテレータカテゴリタグには、カテゴリによって暗示される特定の要件セットに対して最も効率的なアルゴリズムを選択するために使用できる情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="1f22a4cac482679567538d501753a8d2f46eb0e0" translate="yes" xml:space="preserve">
          <source>Iterator concepts</source>
          <target state="translated">イテレータの概念</target>
        </trans-unit>
        <trans-unit id="740d1be15d7c47c82fc9496173a7a69a59de33d0" translate="yes" xml:space="preserve">
          <source>Iterator customization points</source>
          <target state="translated">イテレータのカスタマイズポイント</target>
        </trans-unit>
        <trans-unit id="e2f44595e956bf36ac4508978a8443a14cf70b6e" translate="yes" xml:space="preserve">
          <source>Iterator following the last removed element. If the iterator &lt;code&gt;pos&lt;/code&gt; refers to the last element, the &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; iterator is returned.</source>
          <target state="translated">最後に削除された要素に続くイテレータ。イテレータ &lt;code&gt;pos&lt;/code&gt; が最後の要素を参照している場合、 &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; イテレータが返されます。</target>
        </trans-unit>
        <trans-unit id="0451248583f78c974b012649cf5f233b3518219f" translate="yes" xml:space="preserve">
          <source>Iterator in the destination range, pointing at the last element moved.</source>
          <target state="translated">移動先の範囲内のイテレータで、最後に移動した要素を指します。</target>
        </trans-unit>
        <trans-unit id="40bd84a12b0a1ba291337eb5470a260a83e5f5e0" translate="yes" xml:space="preserve">
          <source>Iterator in the destination range, pointing past the last element copied if &lt;code&gt;count&amp;gt;0&lt;/code&gt; or &lt;code&gt;result&lt;/code&gt; otherwise.</source>
          <target state="translated">場合はコピーされた最後の要素を過ぎ指し先の範囲のイテレータ、 &lt;code&gt;count&amp;gt;0&lt;/code&gt; または &lt;code&gt;result&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="ca76fdc86a85ddcf65acd3db20c917b98cafb8cc" translate="yes" xml:space="preserve">
          <source>Iterator invalidation</source>
          <target state="translated">イテレータの無効化</target>
        </trans-unit>
        <trans-unit id="281878789a9bcc6f2d63b03ac4ff75d8b3e62807" translate="yes" xml:space="preserve">
          <source>Iterator library</source>
          <target state="translated">イテレータライブラリ</target>
        </trans-unit>
        <trans-unit id="03896d2a57195b9fd730686c9c0802a354747640" translate="yes" xml:space="preserve">
          <source>Iterator one past the last element assigned if &lt;code&gt;count &amp;gt; 0&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;count &amp;gt; 0&lt;/code&gt; 場合、割り当てられた最後の要素の1つ前のイテレータ。それ以外の場合は &lt;code&gt;first&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="daf74fe0d4457d50bd01e94a09fc1b13a7e9ff50" translate="yes" xml:space="preserve">
          <source>Iterator one past the last element assigned if &lt;code&gt;count&amp;gt;0&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;count&amp;gt;0&lt;/code&gt; の場合、割り当てられた最後の要素の1つ後のイテレータ。それ以外の場合は &lt;code&gt;first&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2663ac3786b007e1d7f5bd8a7c0213e70730b1d7" translate="yes" xml:space="preserve">
          <source>Iterator operations</source>
          <target state="translated">イテレータ操作</target>
        </trans-unit>
        <trans-unit id="f4dd65c96326a21c8c14e8530698df94d1156bd2" translate="yes" xml:space="preserve">
          <source>Iterator operations (e.g. incrementing an iterator) read, but do not modify the underlying container, and may be executed concurrently with operations on other iterators on the same container, with the const member functions, or reads from the elements. Container operations that invalidate any iterators modify the container and cannot be executed concurrently with any operations on existing iterators even if those iterators are not invalidated.</source>
          <target state="translated">イテレータ操作(イテレータのインクリメントなど)は読み込みますが、その下にあるコンテナを変更することはなく、同じコンテナ上の他のイテレータに対する操作、const メンバ関数、または要素からの読み込みと同時に実行できます。任意のイテレータを無効にするコンテナ操作はコンテナを変更し、それらのイテレータが無効になっていなくても、既存のイテレータに対する操作と同時に実行することはできません。</target>
        </trans-unit>
        <trans-unit id="d40f4ce641e0ed75eeba005dc0c9d3144fe2cd68" translate="yes" xml:space="preserve">
          <source>Iterator past the end of the constructed range.</source>
          <target state="translated">構築された範囲の終わりを過ぎたイテレータ。</target>
        </trans-unit>
        <trans-unit id="13fa518a2303933b7f035ca34918a1466f897682" translate="yes" xml:space="preserve">
          <source>Iterator pointing one past the last character in &lt;code&gt;[beg, end)&lt;/code&gt; that was parsed successfully.</source>
          <target state="translated">正常に解析された &lt;code&gt;[beg, end)&lt;/code&gt; の最後の文字の1つ前を指すイテレータ。</target>
        </trans-unit>
        <trans-unit id="8307d2d53c29a25c0e984348242a9471e3ee81a1" translate="yes" xml:space="preserve">
          <source>Iterator pointing one past the last character in &lt;code&gt;[beg, end)&lt;/code&gt; that was recognized as a part of a valid date.</source>
          <target state="translated">有効な日付の一部として認識された、 &lt;code&gt;[beg, end)&lt;/code&gt; の最後の文字の1つ前を指すイテレータ。</target>
        </trans-unit>
        <trans-unit id="f64d4fa39c12455a17caddb09b8107c7a4df881a" translate="yes" xml:space="preserve">
          <source>Iterator pointing one past the last character in &lt;code&gt;[beg, end)&lt;/code&gt; that was recognized as a part of a valid month name.</source>
          <target state="translated">有効な月名の一部として認識された、 &lt;code&gt;[beg, end)&lt;/code&gt; の最後の文字の1つ後ろを指すイテレータ。</target>
        </trans-unit>
        <trans-unit id="31e9b344102f3edc337a21ee322aadf820b9757e" translate="yes" xml:space="preserve">
          <source>Iterator pointing one past the last character in &lt;code&gt;[beg, end)&lt;/code&gt; that was recognized as a part of a valid weekname.</source>
          <target state="translated">有効な週名の一部として認識された、 &lt;code&gt;[beg, end)&lt;/code&gt; の最後の文字の1つ後ろを指すイテレーター。</target>
        </trans-unit>
        <trans-unit id="31207a4529bcf9380d04c9069cc1655551460207" translate="yes" xml:space="preserve">
          <source>Iterator pointing one past the last character in &lt;code&gt;[beg, end)&lt;/code&gt; that was recognized as a part of a valid year.</source>
          <target state="translated">有効な年の一部として認識された、 &lt;code&gt;[beg, end)&lt;/code&gt; の最後の文字の1つ前を指すイテレータ。</target>
        </trans-unit>
        <trans-unit id="7f09da5861ec2d1af9b0e94d0a6f97c745163842" translate="yes" xml:space="preserve">
          <source>Iterator pointing one past the last character that was produced .</source>
          <target state="translated">最後に生成された文字を 1 つ前に指すイテレータです。</target>
        </trans-unit>
        <trans-unit id="2cbfd446fa55ac919f1565a7433ab297897ff7cd" translate="yes" xml:space="preserve">
          <source>Iterator pointing to the emplaced element.</source>
          <target state="translated">配置された要素を指すイテレータ。</target>
        </trans-unit>
        <trans-unit id="3f31d65a0a3b3c0a3916fdb12c528f4639b09cbb" translate="yes" xml:space="preserve">
          <source>Iterator pointing to the first element that is</source>
          <target state="translated">である最初の要素を指すイテレータ。</target>
        </trans-unit>
        <trans-unit id="be0840eb05b1b352b3e742ca7bea27adaa5d7b17" translate="yes" xml:space="preserve">
          <source>Iterator pointing to the first element that is not</source>
          <target state="translated">ではない最初の要素を指すイテレータ</target>
        </trans-unit>
        <trans-unit id="e185fa2c4bb3e71229767b9d27a937494c54ba69" translate="yes" xml:space="preserve">
          <source>Iterator primitives</source>
          <target state="translated">イテレータ・プリミティブ</target>
        </trans-unit>
        <trans-unit id="10484316b5b2a8004d6321237a6c2d261f03e5f9" translate="yes" xml:space="preserve">
          <source>Iterator tags</source>
          <target state="translated">イテレータタグ</target>
        </trans-unit>
        <trans-unit id="ae607ca99d952a6e9f09c84027726aaa7bfec65b" translate="yes" xml:space="preserve">
          <source>Iterator to an element with key equivalent to &lt;code&gt;key&lt;/code&gt;. If no such element is found, past-the-end (see &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt;) iterator is returned.</source>
          <target state="translated">鍵と同等の持つ要素へのイテレータ &lt;code&gt;key&lt;/code&gt; 。そのような要素が見つからない場合、過去の終わり（ &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; を参照）反復子が返されます。</target>
        </trans-unit>
        <trans-unit id="9278ea56b5788d570f426ec7cbcb9a565e893cd1" translate="yes" xml:space="preserve">
          <source>Iterator to one past the last element of &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; の最後の要素を1つ過去のイテレータ</target>
        </trans-unit>
        <trans-unit id="b813a67f31fb479727b79b93d1bb1438b02ec92e" translate="yes" xml:space="preserve">
          <source>Iterator to one past the last value in the numeric array.</source>
          <target state="translated">数値配列の最後の値を 1 つ前に進めるイテレータ。</target>
        </trans-unit>
        <trans-unit id="b07ec936a0496c6833779c2921debff842152dd7" translate="yes" xml:space="preserve">
          <source>Iterator to the beginning of last occurrence of the sequence &lt;code&gt;[s_first, s_last)&lt;/code&gt; in range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">範囲 &lt;code&gt;[first, last)&lt;/code&gt; 内のシーケンス &lt;code&gt;[s_first, s_last)&lt;/code&gt; の最後の出現の先頭へのイテレーター。</target>
        </trans-unit>
        <trans-unit id="cea2fc59b7d3bb9197c3cb893d4095461e65324e" translate="yes" xml:space="preserve">
          <source>Iterator to the beginning of the found sequence in the range &lt;code&gt;[first, last)&lt;/code&gt;. If no such sequence is found, &lt;code&gt;last&lt;/code&gt; is returned.</source>
          <target state="translated">範囲 &lt;code&gt;[first, last)&lt;/code&gt; 見つかったシーケンスの先頭へのイテレーター。そのようなシーケンスが見つからない場合、 &lt;code&gt;last&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b99865a2f5ee2de11db467c05b05ecda3a38125e" translate="yes" xml:space="preserve">
          <source>Iterator to the element before the first element.</source>
          <target state="translated">最初の要素の前の要素へのイテレータ。</target>
        </trans-unit>
        <trans-unit id="aacd4e93e79a35d8d4d88a56fccd361ca76b515c" translate="yes" xml:space="preserve">
          <source>Iterator to the element following the last element.</source>
          <target state="translated">最後の要素に続く要素へのイテレータ。</target>
        </trans-unit>
        <trans-unit id="d47c96b870ac902b9cfccfbc43f02d3063565e47" translate="yes" xml:space="preserve">
          <source>Iterator to the element past the last element copied.</source>
          <target state="translated">最後にコピーされた要素の前の要素へのイテレータ。</target>
        </trans-unit>
        <trans-unit id="96509680368807f6fc1a0194dd4883b178732836" translate="yes" xml:space="preserve">
          <source>Iterator to the element past the last element exchanged in the range beginning with &lt;code&gt;first2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;first2&lt;/code&gt; で始まる範囲で交換された最後の要素を過ぎた要素へのイテレータ。</target>
        </trans-unit>
        <trans-unit id="7a39ffa9063e11b7b654f129a912184da2ac6267" translate="yes" xml:space="preserve">
          <source>Iterator to the element past the last element moved.</source>
          <target state="translated">最後に移動した要素の前の要素へのイテレータ。</target>
        </trans-unit>
        <trans-unit id="1b5d7dd5569e766929089fcefe6c58bc9d731aa5" translate="yes" xml:space="preserve">
          <source>Iterator to the element past the last element written.</source>
          <target state="translated">最後に書かれた要素の前の要素へのイテレータ。</target>
        </trans-unit>
        <trans-unit id="6bea32d087ab585bed1f7fe96375cf86af1211fa" translate="yes" xml:space="preserve">
          <source>Iterator to the element past the last sub-match.</source>
          <target state="translated">最後のサブマッチを過ぎた要素へのイテレータ。</target>
        </trans-unit>
        <trans-unit id="60a6218c749d504f60e9f3fa5bf31fa53f0671ac" translate="yes" xml:space="preserve">
          <source>Iterator to the first element in the range &lt;code&gt;[first, last)&lt;/code&gt; that is equal to an element from the range &lt;code&gt;[s_first; s_last)&lt;/code&gt;. If no such element is found, &lt;code&gt;last&lt;/code&gt; is returned.</source>
          <target state="translated">範囲 &lt;code&gt;[first, last)&lt;/code&gt; の最初の要素へのイテレータ &lt;code&gt;[s_first; s_last)&lt;/code&gt; は範囲[s_first;の要素に等しい s_last）。そのような要素が見つからない場合、 &lt;code&gt;last&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="744169b8a1b971b02107d9fd30c4e5ed51e12ef8" translate="yes" xml:space="preserve">
          <source>Iterator to the first element of &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">の最初の要素へのイテレータ &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5fdfe83ec17cb438ffef8507e749f160d782415" translate="yes" xml:space="preserve">
          <source>Iterator to the first element of the second group.</source>
          <target state="translated">第2グループの最初の要素へのイテレータ。</target>
        </trans-unit>
        <trans-unit id="1cbe4199bf321f6884c70afda2be99aff476ac84" translate="yes" xml:space="preserve">
          <source>Iterator to the first element satisfying the condition or &lt;code&gt;last&lt;/code&gt; if no such element is found.</source>
          <target state="translated">条件を満たす最初の要素へのイテレータ、またはそのような要素が見つからない場合は &lt;code&gt;last&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4b75fadcd5e3ebde98aa445d8daad03877fd6a8" translate="yes" xml:space="preserve">
          <source>Iterator to the first element.</source>
          <target state="translated">最初の要素へのイテレータ。</target>
        </trans-unit>
        <trans-unit id="55aa966d43052a99cbd2f2b66a9a360393c342eb" translate="yes" xml:space="preserve">
          <source>Iterator to the first sub-match.</source>
          <target state="translated">最初のサブマッチへのイテレータ。</target>
        </trans-unit>
        <trans-unit id="5580fefb10d0046c754d643bd5733ccca8b1345e" translate="yes" xml:space="preserve">
          <source>Iterator to the first value in the numeric array.</source>
          <target state="translated">数値配列の最初の値に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="ea592c537962f37901180bcbeecea954bf89d9fa" translate="yes" xml:space="preserve">
          <source>Iterator to the greatest element in the range &lt;code&gt;[first, last)&lt;/code&gt;. If several elements in the range are equivalent to the greatest element, returns the iterator to the first such element. Returns &lt;code&gt;last&lt;/code&gt; if the range is empty.</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 範囲で最大の要素へのイテレータ。範囲内のいくつかの要素が最大の要素と同等である場合、反復子を最初のそのような要素に返します。範囲が空の場合、 &lt;code&gt;last&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cab09d343a65548dadf0705016f36b2bc1aec5ff" translate="yes" xml:space="preserve">
          <source>Iterator to the smallest element in the range &lt;code&gt;[first, last)&lt;/code&gt;. If several elements in the range are equivalent to the smallest element, returns the iterator to the first such element. Returns &lt;code&gt;last&lt;/code&gt; if the range is empty.</source>
          <target state="translated">範囲 &lt;code&gt;[first, last)&lt;/code&gt; の最小要素へのイテレータ。範囲内のいくつかの要素が最小の要素と同等である場合、イテレータを最初のそのような要素に返します。範囲が空の場合、 &lt;code&gt;last&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="909a5f0dfd8c3a4ef79cd1458e2b5fb136ad7fae" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">Iterators</target>
        </trans-unit>
        <trans-unit id="162032b2b677de764fe8e5f27091a7c4e6a44150" translate="yes" xml:space="preserve">
          <source>Iterators and references to the erased element are invalidated. If the element is the last element in the container, the past-the-end iterator is also invalidated. Other references and iterators are not affected.</source>
          <target state="translated">消去された要素へのイテレータや参照は無効になります。その要素がコンテナ内の最後の要素である場合、過去終了イテレータも無効になります。他の参照やイテレータは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="e582a97f0f7104a2e13358f17facd4235fcb6d40" translate="yes" xml:space="preserve">
          <source>Iterators and references to the erased element are invalidated. It is unspecified whether the past-the-end iterator is invalidated if the element is the last element in the container. Other references and iterators are not affected.</source>
          <target state="translated">消去された要素へのイテレータや参照は無効になります。その要素がコンテナ内の最後の要素である場合に、過去終了イテレータが無効になるかどうかは不定です。他の参照やイテレータは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="4c5b6d9e93629888dbe6bf92a0305e9d1ac53f56" translate="yes" xml:space="preserve">
          <source>Iterators and references to the erased element are invalidated. It is unspecified whether the past-the-end iterator is invalidated. Other references and iterators are not affected.</source>
          <target state="translated">消去された要素へのイテレータや参照は無効になります。過去終了イテレータが無効になるかどうかは不定です。他の参照やイテレータは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="420aea18856c45985924dcd36529cee071e75fd3" translate="yes" xml:space="preserve">
          <source>Iterators and references to the erased element are invalidated. The past-the-end iterator is also invalidated. Other references and iterators are not affected.</source>
          <target state="translated">消去された要素へのイテレータや参照は無効になります。過去終了イテレータも無効になります。その他の参照やイテレータは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="f88e8afffd84ac565f746527f36f9909c4f45150" translate="yes" xml:space="preserve">
          <source>Iterators are not dereferenceable if.</source>
          <target state="translated">イテレータは、もしあれば参照を解除することはできません。</target>
        </trans-unit>
        <trans-unit id="05eeb7b671baac73a3dc80180a6545670e55373f" translate="yes" xml:space="preserve">
          <source>Iterators for which the behavior of the expression &lt;code&gt;*i&lt;/code&gt; is defined are called</source>
          <target state="translated">式 &lt;code&gt;*i&lt;/code&gt; の動作が定義されているイテレータが呼び出されます</target>
        </trans-unit>
        <trans-unit id="6d7e7b94342bc88f5dc26254b6ed839ec8bfb385" translate="yes" xml:space="preserve">
          <source>Iterators library</source>
          <target state="translated">イテレータライブラリ</target>
        </trans-unit>
        <trans-unit id="7987698c6d69adbd970dfb91d269e601291f3c2e" translate="yes" xml:space="preserve">
          <source>Iterators that fall into one of the above categories and also meet the requirements of &lt;a href=&quot;named_req/contiguousiterator&quot;&gt;LegacyContiguousIterator&lt;/a&gt; are called contiguous iterators.</source>
          <target state="translated">上記のカテゴリのいずれかに分類され、かつ&lt;a href=&quot;named_req/contiguousiterator&quot;&gt;LegacyContiguousIterator&lt;/a&gt;の要件も満たすイテレーターは、連続イテレーターと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c0510377d9129680624a5c7430c75a54b51eeddb" translate="yes" xml:space="preserve">
          <source>Iterators that fall into one of the above categories and also meet the requirements of &lt;a href=&quot;named_req/outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt; are called mutable iterators.</source>
          <target state="translated">上記のカテゴリのいずれかに分類され、かつ&lt;a href=&quot;named_req/outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt;の要件も満たすイテレーターは、可変イテレーターと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="273fff5103ab0399a739b1cec1bc3d252efc223f" translate="yes" xml:space="preserve">
          <source>JAPANESE INDUSTRIAL STANDARD SYMBOL - IDEOGRAPHIC NUMBER ZERO</source>
          <target state="translated">日本工業規格記号-図形番号ゼロ</target>
        </trans-unit>
        <trans-unit id="6c943af0faee20a16a4d1c5eaf93012533909700" translate="yes" xml:space="preserve">
          <source>Jacobi amplitude (a value of floating-point or integral type, measured in radians)</source>
          <target state="translated">ヤコビ振幅</target>
        </trans-unit>
        <trans-unit id="bdfb777e0387993e2e3d113ac36512201456491d" translate="yes" xml:space="preserve">
          <source>Jump statements</source>
          <target state="translated">ジャンプ文</target>
        </trans-unit>
        <trans-unit id="bb520de1f12d4fa9ce54eeee10e58e891322ab58" translate="yes" xml:space="preserve">
          <source>Jump statements unconditionally transfer flow control.</source>
          <target state="translated">ジャンプ文は、フロー制御を無条件に転送します。</target>
        </trans-unit>
        <trans-unit id="dcbf88c31714264b514798a7ba1a0f7ac134056f" translate="yes" xml:space="preserve">
          <source>Just as with a traditional loop, a &lt;a href=&quot;break&quot;&gt; break statement&lt;/a&gt; can be used to exit the loop early and a &lt;a href=&quot;continue&quot;&gt; continue statement&lt;/a&gt; can be used to restart the loop with the next element.</source>
          <target state="translated">従来のループと同様に、&lt;a href=&quot;break&quot;&gt;breakステートメント&lt;/a&gt;を使用してループを早期に終了し、&lt;a href=&quot;continue&quot;&gt;continueステートメント&lt;/a&gt;を使用してループを次の要素から再開できます。</target>
        </trans-unit>
        <trans-unit id="36d6db48eace81a33b705adbb64b285f0559048e" translate="yes" xml:space="preserve">
          <source>Just before becoming the end-of-sequence iterator, a &lt;code&gt;std::regex_token_iterator&lt;/code&gt; may become a</source>
          <target state="translated">シーケンスの終わりのイテレータになる直前に、 &lt;code&gt;std::regex_token_iterator&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="c59dd0c7462928fa236b7f578176acd87d90eab2" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;std::packaged_task&lt;/code&gt; is a polymorphic, allocator-aware container: the stored callable target may be allocated on heap or with a provided allocator.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; と同じように、 &lt;code&gt;std::packaged_task&lt;/code&gt; は、ポリモーフィックなアロケータ認識コンテナです。格納された呼び出し可能なターゲットは、ヒープ上または提供されたアロケータを使用して割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="31d4b9f30362c85a4f4a427bba244a69e9b807a9" translate="yes" xml:space="preserve">
          <source>Just like in &lt;a href=&quot;classes&quot;&gt;struct&lt;/a&gt; declaration, the default member access in a union is &lt;a href=&quot;access&quot;&gt;public&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;classes&quot;&gt;構造体&lt;/a&gt;宣言と同様に、共用体のデフォルトのメンバーアクセスは&lt;a href=&quot;access&quot;&gt;public&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="74e2c21175f1eb09564bc31283c20889926ace69" translate="yes" xml:space="preserve">
          <source>Just like with members of primary templates, they only need to be defined if used in the program.</source>
          <target state="translated">プライマリテンプレートのメンバーと同じように、プログラム内で使用される場合にのみ定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="0f2005c51f34f60847d9627b7dadf8093b2d0c22" translate="yes" xml:space="preserve">
          <source>K), GNSUM(op, a</source>
          <target state="translated">K)、GNSUM(op,a)</target>
        </trans-unit>
        <trans-unit id="237e3ecc9a063e55a6f9fd6d2f03d4b8adf12c9a" translate="yes" xml:space="preserve">
          <source>K), GSUM(op, b</source>
          <target state="translated">K)、GSUM(op,b)</target>
        </trans-unit>
        <trans-unit id="7e6d3d8f6e5c6078631d54fbfd4b0dea03e2e179" translate="yes" xml:space="preserve">
          <source>Keep the existing file, without reporting an error.</source>
          <target state="translated">エラーを報告せずに、既存のファイルを保持します。</target>
        </trans-unit>
        <trans-unit id="f530db58b3e5088dc7412c6d2298ba3f8456bdeb" translate="yes" xml:space="preserve">
          <source>Keywords</source>
          <target state="translated">Keywords</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="6f7fcc18225d37208291e381d4c7a5f47bd1ba73" translate="yes" xml:space="preserve">
          <source>LANGUAGE TAG (U+E0001) - VARIATION SELECTOR-256 (U+E01EF)</source>
          <target state="translated">言語タグ (U+E0001)-変形選択子-256 (U+E01EF)</target>
        </trans-unit>
        <trans-unit id="503ecf5371128a4d54cb093dfb32e39ad03cc18f" translate="yes" xml:space="preserve">
          <source>LATIN CAPITAL LETTER A WITH GRAVE - LATIN CAPITAL LETTER O WITH DIAERESIS</source>
          <target state="translated">墓のあるラテン文字A-ダイアレシスのあるラテン文字O</target>
        </trans-unit>
        <trans-unit id="cb668f2f6c1dafcf47fe99fa01b751c3e0263d0b" translate="yes" xml:space="preserve">
          <source>LATIN CAPITAL LETTER O WITH STROKE - LATIN SMALL LETTER O WITH DIAERESIS</source>
          <target state="translated">LATIN CAPITAL LETTER O WITH STROKE-LATIN SMALL LETTER O WITH DIAERESIS</target>
        </trans-unit>
        <trans-unit id="b2be5f99f56a223f3c293b996a761c0efa14627e" translate="yes" xml:space="preserve">
          <source>LATIN SMALL LETTER O WITH STROKE - CANADIAN SYLLABICS BLACKFOOT W</source>
          <target state="translated">LATIN SMALL LETTER O WITH STROKE-CANADIAN SYLLABICS BLACKFOOT W</target>
        </trans-unit>
        <trans-unit id="b4da84710b41fc09dd78f93b82fe6010bab5fd27" translate="yes" xml:space="preserve">
          <source>LC_ALLLC_COLLATELC_CTYPELC_MONETARYLC_NUMERICLC_TIME</source>
          <target state="translated">LC_ALLLC_COLLATELC_CTYPELC_MONETARYLC_NUMERICLC_TIME</target>
        </trans-unit>
        <trans-unit id="823feb18075201a2009bf899a2b4bee49397d8df" translate="yes" xml:space="preserve">
          <source>LC_TIME</source>
          <target state="translated">LC_TIME</target>
        </trans-unit>
        <trans-unit id="3fd1097fbc5a624096c5064ce332869e38dcdca6" translate="yes" xml:space="preserve">
          <source>LEFT-TO-RIGHT EMBEDDING - RIGHT-TO-LEFT OVERRIDE</source>
          <target state="translated">左から右へのエンベデッド-右から左へのオーバーライド</target>
        </trans-unit>
        <trans-unit id="0ada04f560eef4501438475ec6acb0a8112461d2" translate="yes" xml:space="preserve">
          <source>LINEAR B SYLLABLE B008 A - CHEESE WEDGE (U+1F9C0)</source>
          <target state="translated">リニア B シラブル B008 A-チーズウェッジ (U+1F9C0)</target>
        </trans-unit>
        <trans-unit id="65a740810ab447ffb984bd6fdf5448611bcca5d2" translate="yes" xml:space="preserve">
          <source>LLP64</source>
          <target state="translated">LLP64</target>
        </trans-unit>
        <trans-unit id="7ec33462cf14446f400924757e3fbb4271e0e95e" translate="yes" xml:space="preserve">
          <source>LLVM libc++ stores 1 less member: it maintains the rdbuf pointer as a void* member of ios_base.</source>
          <target state="translated">LLVM libc++は 1 つ少ないメンバを格納します:それは ios_base の void*メンバとして rdbuf ポインタを保持します。</target>
        </trans-unit>
        <trans-unit id="bee2cfeb49f65a60be1386935bbd919b5ec97964" translate="yes" xml:space="preserve">
          <source>LP32</source>
          <target state="translated">LP32</target>
        </trans-unit>
        <trans-unit id="6cb8b2a9a5c6dacaca21f4343040021510d35c97" translate="yes" xml:space="preserve">
          <source>LP64</source>
          <target state="translated">LP64</target>
        </trans-unit>
        <trans-unit id="886ea7c4764552dcb2bbbe1db0b81daf2c0b4980" translate="yes" xml:space="preserve">
          <source>LWG 103</source>
          <target state="translated">LWG 103</target>
        </trans-unit>
        <trans-unit id="9de8fb82db7ea881cdd4818eeacc5cb88103d780" translate="yes" xml:space="preserve">
          <source>LWG 2021</source>
          <target state="translated">LWG 2021</target>
        </trans-unit>
        <trans-unit id="706cd71dbc70f54b74c9e4ca12893e72483f65ac" translate="yes" xml:space="preserve">
          <source>LWG 2048</source>
          <target state="translated">LWG2048</target>
        </trans-unit>
        <trans-unit id="389f244b561a8b2e450ab0c1b620aab9c04f7844" translate="yes" xml:space="preserve">
          <source>LWG 2063</source>
          <target state="translated">エルウエーグ2063</target>
        </trans-unit>
        <trans-unit id="31dc00d2b0f8ffb9c931311abf894031771bb886" translate="yes" xml:space="preserve">
          <source>LWG 2067</source>
          <target state="translated">エルウエーグ2067</target>
        </trans-unit>
        <trans-unit id="deb8bac4bda6e7ac7927ac3f217096d074e4651c" translate="yes" xml:space="preserve">
          <source>LWG 2101</source>
          <target state="translated">エルウエーグ2101</target>
        </trans-unit>
        <trans-unit id="96c382be88841f29be2b8476fd6eff0e02b692b5" translate="yes" xml:space="preserve">
          <source>LWG 2111</source>
          <target state="translated">エルウエーグ2111</target>
        </trans-unit>
        <trans-unit id="d6e902d68f062e389836f2f573f3f247e27c9102" translate="yes" xml:space="preserve">
          <source>LWG 2141</source>
          <target state="translated">エルウエーグ2141</target>
        </trans-unit>
        <trans-unit id="723eb1c8bcf878531e1514ce67bc69259241d3c4" translate="yes" xml:space="preserve">
          <source>LWG 2193</source>
          <target state="translated">エルウエーグ2193</target>
        </trans-unit>
        <trans-unit id="810962e6457ba64d5c3482fefe25972a3420fcff" translate="yes" xml:space="preserve">
          <source>LWG 2231</source>
          <target state="translated">エルウエーグ2231</target>
        </trans-unit>
        <trans-unit id="07b5419b2eca5506d8ab14a0d772cee5a0b24141" translate="yes" xml:space="preserve">
          <source>LWG 2316</source>
          <target state="translated">エルウエーグ2316</target>
        </trans-unit>
        <trans-unit id="234d204a978e35929b3a3e894af0d8b867af1065" translate="yes" xml:space="preserve">
          <source>LWG 2377</source>
          <target state="translated">エルウエーグ2377</target>
        </trans-unit>
        <trans-unit id="0de14022bde80593834d413238d25e72ecbcc411" translate="yes" xml:space="preserve">
          <source>LWG 2396</source>
          <target state="translated">エルウエーグ2396</target>
        </trans-unit>
        <trans-unit id="98c9816aa981f67350096307bddd08234109379b" translate="yes" xml:space="preserve">
          <source>LWG 2408</source>
          <target state="translated">LWG 2408</target>
        </trans-unit>
        <trans-unit id="88897052b0b54ca7be3e73d84b0b00921d9e552c" translate="yes" xml:space="preserve">
          <source>LWG 2420</source>
          <target state="translated">エルウエーグ2420</target>
        </trans-unit>
        <trans-unit id="4df86d5ce11e282b81c2bbb5175527f98652fcef" translate="yes" xml:space="preserve">
          <source>LWG 2422</source>
          <target state="translated">エルウエーグ2422</target>
        </trans-unit>
        <trans-unit id="84b18947260bfe1f0a5996d405140bb230ae0767" translate="yes" xml:space="preserve">
          <source>LWG 2441</source>
          <target state="translated">エルウエーグ2441</target>
        </trans-unit>
        <trans-unit id="cbfcae2a308f80ed1c6f7b0aa1df94fb40aaf739" translate="yes" xml:space="preserve">
          <source>LWG 2442</source>
          <target state="translated">エルウエーグ2442</target>
        </trans-unit>
        <trans-unit id="39d7d59672fbad6538e7af83c470ceced5e98772" translate="yes" xml:space="preserve">
          <source>LWG 2444</source>
          <target state="translated">エルウエーグ2444</target>
        </trans-unit>
        <trans-unit id="64c015ca6fb365162de4d9802c96ff79810e3eba" translate="yes" xml:space="preserve">
          <source>LWG 2456</source>
          <target state="translated">エルウエーグ2456</target>
        </trans-unit>
        <trans-unit id="479bc2ddf5e751a671056d086c6f5edd270c71fa" translate="yes" xml:space="preserve">
          <source>LWG 2458</source>
          <target state="translated">エルウエーグ2458</target>
        </trans-unit>
        <trans-unit id="1edc38665e8899d906240e69ba2477977706ba89" translate="yes" xml:space="preserve">
          <source>LWG 2459</source>
          <target state="translated">エルウエーグ2459</target>
        </trans-unit>
        <trans-unit id="6be2a0368db7a8aa977aee824cc855ad8d6cb8b3" translate="yes" xml:space="preserve">
          <source>LWG 2460</source>
          <target state="translated">エルウエーグ2460</target>
        </trans-unit>
        <trans-unit id="40c67758d05b4454663ae12087f93b2294a7887e" translate="yes" xml:space="preserve">
          <source>LWG 2485</source>
          <target state="translated">エルウエーグ2485</target>
        </trans-unit>
        <trans-unit id="ef5117f94807e8fa3fd3d6d510e7ee4f699f4b23" translate="yes" xml:space="preserve">
          <source>LWG 2510</source>
          <target state="translated">エルウエーグ2510</target>
        </trans-unit>
        <trans-unit id="5f130db76eea1dbe14493e67e4a16dbe505a9e2e" translate="yes" xml:space="preserve">
          <source>LWG 2550</source>
          <target state="translated">エルウエーグ2550</target>
        </trans-unit>
        <trans-unit id="ca02fd1a836a738f855f4be277ea46227c2c6ff3" translate="yes" xml:space="preserve">
          <source>LWG 2554</source>
          <target state="translated">エルウエーグ2554</target>
        </trans-unit>
        <trans-unit id="41e9bbe3caae10f06305c082750ab7abc56ee095" translate="yes" xml:space="preserve">
          <source>LWG 2556</source>
          <target state="translated">エルウエーグ2556</target>
        </trans-unit>
        <trans-unit id="a7fa4024fcd73ba7048d1081eb12cb834158b7ab" translate="yes" xml:space="preserve">
          <source>LWG 2597</source>
          <target state="translated">エルウエーグ2597</target>
        </trans-unit>
        <trans-unit id="f677e3426681f881a680fe99e83000652b32a988" translate="yes" xml:space="preserve">
          <source>LWG 2682</source>
          <target state="translated">エルウエーグ2682</target>
        </trans-unit>
        <trans-unit id="81d82ea92f45eea83f18af5577cc2d919bfe90d4" translate="yes" xml:space="preserve">
          <source>LWG 270</source>
          <target state="translated">LWG 270</target>
        </trans-unit>
        <trans-unit id="8e573b1dfb07e6658a7360ffdc338e9b3f93b49f" translate="yes" xml:space="preserve">
          <source>LWG 2735</source>
          <target state="translated">エルウエーグ2735</target>
        </trans-unit>
        <trans-unit id="227dbdd98899cadd424a56e2f7d7d6a78f38856f" translate="yes" xml:space="preserve">
          <source>LWG 2739</source>
          <target state="translated">エルウエーグ2739</target>
        </trans-unit>
        <trans-unit id="9eb33f94aa6faf46b0eb2f66260ee186604d4a50" translate="yes" xml:space="preserve">
          <source>LWG 2782</source>
          <target state="translated">エルウエーグ2782</target>
        </trans-unit>
        <trans-unit id="d920e722f9f2beb6d3d46c97d699d7aca6281fdd" translate="yes" xml:space="preserve">
          <source>LWG 2783</source>
          <target state="translated">エルウエーグ2783</target>
        </trans-unit>
        <trans-unit id="63dbc60824b85913f49c89b16c9025b3daf3402a" translate="yes" xml:space="preserve">
          <source>LWG 2843</source>
          <target state="translated">エルウエーグ2843</target>
        </trans-unit>
        <trans-unit id="fdaad41a94231184e89d21323eb4df5beb258d0e" translate="yes" xml:space="preserve">
          <source>LWG 2870</source>
          <target state="translated">エルウエーグ2870</target>
        </trans-unit>
        <trans-unit id="63de5c8018c8f07659e2254629b4ebfecbdf0e68" translate="yes" xml:space="preserve">
          <source>LWG 2901</source>
          <target state="translated">エルウエーグ2901</target>
        </trans-unit>
        <trans-unit id="65a38639ef5dfa6b953951bf416dbef1b06d2565" translate="yes" xml:space="preserve">
          <source>LWG 2935</source>
          <target state="translated">エルウエーグ2935</target>
        </trans-unit>
        <trans-unit id="8df8d07f79de7eff959bd46fc88293ce52ce6252" translate="yes" xml:space="preserve">
          <source>LWG 2936</source>
          <target state="translated">エルウエーグ2936</target>
        </trans-unit>
        <trans-unit id="6af1a8a4fbc321bb616e82f22c084066312fc066" translate="yes" xml:space="preserve">
          <source>LWG 2937</source>
          <target state="translated">エルウエーグ2937</target>
        </trans-unit>
        <trans-unit id="620d7168575a023def1c823681197877ef6db868" translate="yes" xml:space="preserve">
          <source>LWG 2942</source>
          <target state="translated">エルウエーグ2942</target>
        </trans-unit>
        <trans-unit id="6ec364c67d40cf80dd78cca2c8063943882a4782" translate="yes" xml:space="preserve">
          <source>LWG 2945</source>
          <target state="translated">エルウエーグ2945</target>
        </trans-unit>
        <trans-unit id="584b1cd1ca53e0a10c9c53d113a6c1b03f94da27" translate="yes" xml:space="preserve">
          <source>LWG 2946</source>
          <target state="translated">エルウエーグ2946</target>
        </trans-unit>
        <trans-unit id="2092ab29c8ec4efb56008c5dbf84dd1a89910f85" translate="yes" xml:space="preserve">
          <source>LWG 2955</source>
          <target state="translated">エルウエーグ2955</target>
        </trans-unit>
        <trans-unit id="db6b4c474d2b187cadd86c637f7b9a707deded5a" translate="yes" xml:space="preserve">
          <source>LWG 2956</source>
          <target state="translated">エルウエーグ2956</target>
        </trans-unit>
        <trans-unit id="6651b628d955dbc375211fd9965b95e7828c0930" translate="yes" xml:space="preserve">
          <source>LWG 2969</source>
          <target state="translated">エルウエーグ2969</target>
        </trans-unit>
        <trans-unit id="f25beb31bbd789f502c7039a906832b4193e490b" translate="yes" xml:space="preserve">
          <source>LWG 2974</source>
          <target state="translated">エルウエーグ2974</target>
        </trans-unit>
        <trans-unit id="03b6470838ea079e5b35bdd7f4c0a4324f5be97c" translate="yes" xml:space="preserve">
          <source>LWG 2975</source>
          <target state="translated">エルウエーグ2975</target>
        </trans-unit>
        <trans-unit id="00b1711427feb1cdc052a19c3dd5ba1f5d784d54" translate="yes" xml:space="preserve">
          <source>LWG 2979</source>
          <target state="translated">エルウエーグ2979</target>
        </trans-unit>
        <trans-unit id="03245fa5249a80c9e88d330bdbed3d5b0efd3c1a" translate="yes" xml:space="preserve">
          <source>LWG 2980</source>
          <target state="translated">エルウエーグ2980</target>
        </trans-unit>
        <trans-unit id="8e27ede83edeebcb833e56711cf9e85bad9f6a81" translate="yes" xml:space="preserve">
          <source>LWG 2981</source>
          <target state="translated">エルウエーグ2981</target>
        </trans-unit>
        <trans-unit id="3094306bb363791eae0c331ba69cdfa31cd03bd2" translate="yes" xml:space="preserve">
          <source>LWG 2989</source>
          <target state="translated">エルウエーグ2989</target>
        </trans-unit>
        <trans-unit id="b88afb71ca72f3a5b4d7ca39bd5f6d7740d1ca6c" translate="yes" xml:space="preserve">
          <source>LWG 2993</source>
          <target state="translated">エルウエーグ2993</target>
        </trans-unit>
        <trans-unit id="d940e3b0bc4c6c07c3b76d624ad35c4b1995863f" translate="yes" xml:space="preserve">
          <source>LWG 3000</source>
          <target state="translated">エルウエーグ3000</target>
        </trans-unit>
        <trans-unit id="4efd58af92ed99b44892eea2a6474d567bd785e3" translate="yes" xml:space="preserve">
          <source>LWG 3001</source>
          <target state="translated">LWG 3001</target>
        </trans-unit>
        <trans-unit id="1061d475efae99eb0cd73389f5cc7edb38d2b547" translate="yes" xml:space="preserve">
          <source>LWG 3012</source>
          <target state="translated">LWG 3012</target>
        </trans-unit>
        <trans-unit id="0007b14636a9f8886845093dd4fceab33f240906" translate="yes" xml:space="preserve">
          <source>LWG 3013</source>
          <target state="translated">エルウエーグ3013</target>
        </trans-unit>
        <trans-unit id="66844fe2413d66059e9dfcdf2de2b069f47bdc1a" translate="yes" xml:space="preserve">
          <source>LWG 3014</source>
          <target state="translated">エルウエーグ3014</target>
        </trans-unit>
        <trans-unit id="c6e63f6d84c4a00806bd3c82b03223958cc3e8ef" translate="yes" xml:space="preserve">
          <source>LWG 3024</source>
          <target state="translated">エルウエーグ3024</target>
        </trans-unit>
        <trans-unit id="d4a638b7c5508bb67a4aa7d1d18ad719debb7ef5" translate="yes" xml:space="preserve">
          <source>LWG 3025</source>
          <target state="translated">エルウエーグ3025</target>
        </trans-unit>
        <trans-unit id="633b0245721ec6f09845623cc66b7d4cd4a42726" translate="yes" xml:space="preserve">
          <source>LWG 3065</source>
          <target state="translated">エルウエーグ3065</target>
        </trans-unit>
        <trans-unit id="172b1343747b38d1683b7b9b0e7208f82799b40e" translate="yes" xml:space="preserve">
          <source>LWG 3074</source>
          <target state="translated">エルウエーグ3074</target>
        </trans-unit>
        <trans-unit id="fec86e1855b1d157821d7f496304297f01df2663" translate="yes" xml:space="preserve">
          <source>LWG 3075</source>
          <target state="translated">エルウエーグ3075</target>
        </trans-unit>
        <trans-unit id="ad4916674d38c8cbc53c0d10cb3a10d32caa2e0f" translate="yes" xml:space="preserve">
          <source>LWG 3076</source>
          <target state="translated">エルウエーグ3076</target>
        </trans-unit>
        <trans-unit id="3e2a83c594fad4b9e122e8313412c496da714783" translate="yes" xml:space="preserve">
          <source>LWG 3096</source>
          <target state="translated">エルウエーグ3096</target>
        </trans-unit>
        <trans-unit id="b8a6836406e247baec45da221ee2d125a3cbeda4" translate="yes" xml:space="preserve">
          <source>L_tmpnam</source>
          <target state="translated">L_tmpnam</target>
        </trans-unit>
        <trans-unit id="2228985493d9e43e461c7be5525529248735ad9c" translate="yes" xml:space="preserve">
          <source>Labels</source>
          <target state="translated">Labels</target>
        </trans-unit>
        <trans-unit id="ef93e00ee616b79b01a6a513b42f7bef6875e5e6" translate="yes" xml:space="preserve">
          <source>Labels (&lt;a href=&quot;goto&quot;&gt;goto targets&lt;/a&gt;, &lt;code&gt;case&lt;/code&gt; labels, and &lt;code&gt;default:&lt;/code&gt;) appearing in a substatement of a constexpr if can only be referenced (by &lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt; or &lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;) in the same substatement.</source>
          <target state="translated">constexprのサブステートメントに表示されるラベル（&lt;a href=&quot;goto&quot;&gt;gotoターゲット&lt;/a&gt;、 &lt;code&gt;case&lt;/code&gt; ラベル、および &lt;code&gt;default:&lt;/code&gt; ：）は、同じサブステートメントで（&lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt;または&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;によって）のみ参照できる場合。</target>
        </trans-unit>
        <trans-unit id="4192545e02bafef39c99c48279c9d025ce9cc37d" translate="yes" xml:space="preserve">
          <source>Laguerre polynomials</source>
          <target state="translated">多項式ラゲール</target>
        </trans-unit>
        <trans-unit id="a7a791f6abd60dc5a353ea53ddfb3ee7c9745d37" translate="yes" xml:space="preserve">
          <source>Lambda capture</source>
          <target state="translated">ラムダキャプチャ</target>
        </trans-unit>
        <trans-unit id="1d382614f838c28eb61834675bae6d432fff0445" translate="yes" xml:space="preserve">
          <source>Lambda capture of *this by value as [=,*this]</source>
          <target state="translated">値による *this のラムダキャプチャを [=,*this]とします。</target>
        </trans-unit>
        <trans-unit id="7bd97cf3e71e6cfe2f11b11baf163207e4fee010" translate="yes" xml:space="preserve">
          <source>Lambda captures</source>
          <target state="translated">ラムダキャプチャ</target>
        </trans-unit>
        <trans-unit id="ad760081fe95ad36f1148cf3a82266f36a17d08b" translate="yes" xml:space="preserve">
          <source>Lambda expressions</source>
          <target state="translated">ラムダ式</target>
        </trans-unit>
        <trans-unit id="29608c2c063008f0167b6a128fd16e27d0f6f38e" translate="yes" xml:space="preserve">
          <source>Lambda expressions (since C++11)</source>
          <target state="translated">ラムダ式(C++11以降</target>
        </trans-unit>
        <trans-unit id="b7d5884df6b1a928d6d7c3491a4a743a3e414bb2" translate="yes" xml:space="preserve">
          <source>Lambda-expressions are not allowed in &lt;a href=&quot;expressions#Unevaluated_expressions&quot;&gt;unevaluated expressions&lt;/a&gt;, &lt;a href=&quot;template_parameters&quot;&gt;template arguments&lt;/a&gt;, &lt;a href=&quot;type_alias&quot;&gt;alias declarations&lt;/a&gt;, &lt;a href=&quot;typedef&quot;&gt;typedef declarations&lt;/a&gt;, and anywhere in a function (or function template) declaration except the function body and the function's &lt;a href=&quot;default_arguments&quot;&gt;default arguments&lt;/a&gt;.</source>
          <target state="translated">ラムダ式は、&lt;a href=&quot;expressions#Unevaluated_expressions&quot;&gt;未評価の式&lt;/a&gt;、&lt;a href=&quot;template_parameters&quot;&gt;テンプレート引数&lt;/a&gt;、&lt;a href=&quot;type_alias&quot;&gt;エイリアス宣言&lt;/a&gt;、&lt;a href=&quot;typedef&quot;&gt;typedef宣言&lt;/a&gt;、および関数本体（または関数テンプレート）宣言内の関数本体と関数の&lt;a href=&quot;default_arguments&quot;&gt;デフォルト引数&lt;/a&gt;を除いて許可されていません。</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="677b369051c8d8b22e38c70e8f452a88713342b3" translate="yes" xml:space="preserve">
          <source>Language feature-testing macros</source>
          <target state="translated">言語機能テストマクロ</target>
        </trans-unit>
        <trans-unit id="2c4c5fa97a894aab5c689757f00ca2ff05f31ca9" translate="yes" xml:space="preserve">
          <source>Language features</source>
          <target state="translated">言語の特徴</target>
        </trans-unit>
        <trans-unit id="9ca65a6a550090403c1994a3813c60f37d61983a" translate="yes" xml:space="preserve">
          <source>Language linkage</source>
          <target state="translated">言語連携</target>
        </trans-unit>
        <trans-unit id="b4444821bc7114c255e706d9193016c8234ee05f" translate="yes" xml:space="preserve">
          <source>Language specifications can only appear in &lt;a href=&quot;scope#Namespace_scope&quot;&gt;namespace scope&lt;/a&gt;.</source>
          <target state="translated">言語仕様は&lt;a href=&quot;scope#Namespace_scope&quot;&gt;名前空間スコープで&lt;/a&gt;のみ表示できます。</target>
        </trans-unit>
        <trans-unit id="e794492ee652fe942ec624908ae4ef64d0ff8202" translate="yes" xml:space="preserve">
          <source>Language support</source>
          <target state="translated">言語サポート</target>
        </trans-unit>
        <trans-unit id="cc8615e79210c7c7a5e9fe165da74603db62e518" translate="yes" xml:space="preserve">
          <source>Language support libraries provide classes and functions that interact closely with language features and support common language idioms.</source>
          <target state="translated">言語サポートライブラリは、言語機能と密接に相互作用し、一般的な言語イディオムをサポートするクラスや関数を提供します。</target>
        </trans-unit>
        <trans-unit id="972ad8d8a50397ba8c02433ed8f048eeb4074b85" translate="yes" xml:space="preserve">
          <source>Layout</source>
          <target state="translated">Layout</target>
        </trans-unit>
        <trans-unit id="5c7c4bf8885640694e2c9d84d334b33834362e92" translate="yes" xml:space="preserve">
          <source>Leap seconds are not inserted into GPS. Thus, every time a leap second is inserted into UTC, UTC falls another second behind GPS. As of December 2017, UTC is 18 seconds behind GPS, reflecting the 18 leap seconds inserted between 1980 and 2017. Thus, 2018-01-01 00:00:00 UTC is equivalent to 2018-01-01 00:00:18 GPS. GPS is a constant 19 seconds behind &lt;a href=&quot;tai_clock&quot;&gt;TAI&lt;/a&gt;.</source>
          <target state="translated">うるう秒はGPSに挿入されません。したがって、うるう秒がUTCに挿入されるたびに、UTCはGPSに1秒遅れます。2017年12月の時点で、UTCはGPSから18秒遅れており、1980年から2017年の間に挿入された18うるう秒を反映しています。したがって、2018-01-01 00:00:00 UTCは2018-01-01 00:00:18 GPSと同等です。 。GPSは&lt;a href=&quot;tai_clock&quot;&gt;TAIから&lt;/a&gt;常に19秒遅れています。</target>
        </trans-unit>
        <trans-unit id="611855b599edd2fe82347140d615a27b9df0aac3" translate="yes" xml:space="preserve">
          <source>Leap seconds are not inserted into TAI. Thus, every time a leap second is inserted into UTC, UTC falls another second behind TAI. As of December 2017, UTC is 37 seconds behind TAI, reflecting the 10-second initial offset and the 27 leap seconds inserted between 1958 and 2017. Thus, 2018-01-01 00:00:00 UTC is equivalent to 2018-01-01 00:00:37 TAI.</source>
          <target state="translated">うるう秒はTAIには挿入されません。したがって、UTCにうるう秒が挿入されるたびに、UTCはTAIよりさらに1秒遅れます。2017年12月現在、UTCは10秒の初期オフセットと1958年から2017年の間に挿入された27のうるう秒を反映して、TAIより37秒遅れています。したがって、2018-01-01 00:00:00 UTCは、2018-01-01 00:00:37 TAIに相当します。</target>
        </trans-unit>
        <trans-unit id="bf56ec55d59d151077b04a3c3b2a260fcafe6e19" translate="yes" xml:space="preserve">
          <source>Leaves the &lt;code&gt;&lt;a href=&quot;capacity&quot;&gt;capacity()&lt;/a&gt;&lt;/code&gt; of the vector unchanged (note: the standard's restriction on the changes to capacity is in the specification of &lt;code&gt;vector::reserve&lt;/code&gt;, see &lt;a href=&quot;http://stackoverflow.com/a/18467916&quot;&gt;[1]&lt;/a&gt;).</source>
          <target state="translated">ベクトルの &lt;code&gt;&lt;a href=&quot;capacity&quot;&gt;capacity()&lt;/a&gt;&lt;/code&gt; を変更しません（注：容量の変更に関する標準の制限は &lt;code&gt;vector::reserve&lt;/code&gt; 仕様にあります。&lt;a href=&quot;http://stackoverflow.com/a/18467916&quot;&gt;[1]を&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="741a41d00730604d24e69761626a739d511f27fa" translate="yes" xml:space="preserve">
          <source>Leaving a synchronized block by any means (reaching the end, executing goto, break, continue, or return, or throwing an exception) exits the block and synchronizes-with the next block in the single total order if the exited block was an outer block. The behavior is undefined if &lt;code&gt;&lt;a href=&quot;../utility/program/longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; is used to exit a synchronized block.</source>
          <target state="translated">何らかの方法で同期ブロックを離れると（終了に到達する、goto、break、continue、returnを実行する、または例外をスローする）、ブロックが終了し、終了したブロックが外部ブロックである場合、単一の合計順序で次のブロックと同期します。 。 &lt;code&gt;&lt;a href=&quot;../utility/program/longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; を使用して同期ブロックを終了する場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="31d6213c56c41b4cc125420dcc2b33093d12c123" translate="yes" xml:space="preserve">
          <source>Leaving an atomic block by any means other than exception (reaching the end, goto, break, continue, return) commits the transaction. The behavior is undefined if &lt;code&gt;&lt;a href=&quot;../utility/program/longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; is used to exit an atomic block.</source>
          <target state="translated">例外以外の手段（アトミックブロックの終了、到達、中断、続行、復帰）でアトミックブロックを離れると、トランザクションがコミットされます。 &lt;code&gt;&lt;a href=&quot;../utility/program/longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; を使用してアトミックブロックを終了する場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="bdffb77ae44e48c63c181cf7541184b7bfe75b59" translate="yes" xml:space="preserve">
          <source>Left-to-right</source>
          <target state="translated">Left-to-right</target>
        </trans-unit>
        <trans-unit id="f644f1aaae2b85733ad956d52e9d411a359c5caf" translate="yes" xml:space="preserve">
          <source>LegacyBidirectionalIterator</source>
          <target state="translated">LegacyBidirectionalIterator</target>
        </trans-unit>
        <trans-unit id="c4a5b29b136f2ede2a2531477e7bb3c2ca5abf2b" translate="yes" xml:space="preserve">
          <source>LegacyBidirectionalIterator is a LegacyBidirectionalIterator that additionally satisfies the &lt;a href=&quot;outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt; requirements.</source>
          <target state="translated">LegacyBidirectionalIteratorは、さらに&lt;a href=&quot;outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt;要件を満たすLegacyBidirectionalIteratorです。</target>
        </trans-unit>
        <trans-unit id="c0fa292844214f93eb7bc4d960957ba473ff303f" translate="yes" xml:space="preserve">
          <source>LegacyContiguousIterator</source>
          <target state="translated">LegacyContiguousIterator</target>
        </trans-unit>
        <trans-unit id="abba9ce1b1082ec030ac0427b7a1d0e517041d2c" translate="yes" xml:space="preserve">
          <source>LegacyForwardIterator</source>
          <target state="translated">LegacyForwardIterator</target>
        </trans-unit>
        <trans-unit id="096905dbdfa46128b8feb9520f8a815491bb23e6" translate="yes" xml:space="preserve">
          <source>LegacyForwardIterator is a LegacyForwardIterator that additionally satisfies the &lt;a href=&quot;outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt; requirements.</source>
          <target state="translated">LegacyForwardIteratorは、さらに&lt;a href=&quot;outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt;要件を満たすLegacyForwardIteratorです。</target>
        </trans-unit>
        <trans-unit id="9bdad701a59fe021a9f0ea8f1e2907f8e0e60476" translate="yes" xml:space="preserve">
          <source>LegacyInputIterator</source>
          <target state="translated">LegacyInputIterator</target>
        </trans-unit>
        <trans-unit id="585fe456965ba38488a01543309716171330d718" translate="yes" xml:space="preserve">
          <source>LegacyIterator</source>
          <target state="translated">LegacyIterator</target>
        </trans-unit>
        <trans-unit id="3cdb555f844cd2dc50f1ef7c5652c1f890df1f87" translate="yes" xml:space="preserve">
          <source>LegacyIterator is the base set of requirements used by other iterator types: &lt;a href=&quot;inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;, &lt;a href=&quot;outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt;, &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;, &lt;a href=&quot;bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;, and &lt;a href=&quot;randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;. Iterators can be thought of as an abstraction of pointers.</source>
          <target state="translated">LegacyIteratorは、他のイテレータータイプで使用される要件の基本セットです：&lt;a href=&quot;inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;、&lt;a href=&quot;outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt;、&lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;、&lt;a href=&quot;bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;、および&lt;a href=&quot;randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;。イテレータは、ポインタの抽象化と考えることができます。</target>
        </trans-unit>
        <trans-unit id="6e768ef221583d1c5e44ef0573554b7ccf685e09" translate="yes" xml:space="preserve">
          <source>LegacyOutputIterator</source>
          <target state="translated">LegacyOutputIterator</target>
        </trans-unit>
        <trans-unit id="8fa47f5539d2203c38a39fce4c4b0ef195c146d3" translate="yes" xml:space="preserve">
          <source>LegacyRandomAccessIterator</source>
          <target state="translated">LegacyRandomAccessIterator</target>
        </trans-unit>
        <trans-unit id="742f0b2803ca04b5223bb318425b08421d148103" translate="yes" xml:space="preserve">
          <source>LegacyRandomAccessIterator is a LegacyRandomAccessIterator that additionally satisfies the &lt;a href=&quot;outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt; requirements.</source>
          <target state="translated">LegacyRandomAccessIteratorは、さらに&lt;a href=&quot;outputiterator&quot;&gt;LegacyOutputIterator&lt;/a&gt;要件を満たすLegacyRandomAccessIteratorです。</target>
        </trans-unit>
        <trans-unit id="5846955db6bef539707c3590c701613c5f0cf50f" translate="yes" xml:space="preserve">
          <source>Legend</source>
          <target state="translated">Legend</target>
        </trans-unit>
        <trans-unit id="5d59dd3a73ef773d7095755185b08a856862f59c" translate="yes" xml:space="preserve">
          <source>Legendre polynomials</source>
          <target state="translated">多項式凡例</target>
        </trans-unit>
        <trans-unit id="7906417f7e9cebe12726504e25b8c0b72bf1f772" translate="yes" xml:space="preserve">
          <source>LessThanComparable</source>
          <target state="translated">LessThanComparable</target>
        </trans-unit>
        <trans-unit id="274ae48acc8830f71730c0873d33a6285228a9de" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;CMP(x,y)&lt;/code&gt; be &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;x &amp;gt; y&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;x &amp;lt; y&lt;/code&gt;, and &lt;code&gt;0&lt;/code&gt; otherwise. For any &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, the product of &lt;code&gt;CMP(lerp(a, b, t2), lerp(a, b, t1))&lt;/code&gt;, &lt;code&gt;CMP(t2, t1)&lt;/code&gt;, and &lt;code&gt;CMP(b, a)&lt;/code&gt; is non-negative. (That is, &lt;code&gt;lerp&lt;/code&gt; is monotonic.).</source>
          <target state="translated">LET &lt;code&gt;CMP(x,y)&lt;/code&gt; とすることが &lt;code&gt;1&lt;/code&gt; ならば &lt;code&gt;x &amp;gt; y&lt;/code&gt; 、 &lt;code&gt;-1&lt;/code&gt; であれば &lt;code&gt;x &amp;lt; y&lt;/code&gt; および &lt;code&gt;0&lt;/code&gt; それ以外の場合。任意の &lt;code&gt;t1&lt;/code&gt; および &lt;code&gt;t2&lt;/code&gt; について、 &lt;code&gt;CMP(lerp(a, b, t2), lerp(a, b, t1))&lt;/code&gt; 、 &lt;code&gt;CMP(t2, t1)&lt;/code&gt; 、および &lt;code&gt;CMP(b, a)&lt;/code&gt; の積は負ではありません。（つまり、 &lt;code&gt;lerp&lt;/code&gt; は単調です。）</target>
        </trans-unit>
        <trans-unit id="12941d0eb9ed4aeacc52d5f00426e066fee74e7d" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;P&lt;/code&gt; equal the precision if nonzero, &lt;code&gt;6&lt;/code&gt; if the precision is not specified, or &lt;code&gt;1&lt;/code&gt; if the precision is &lt;code&gt;​0​&lt;/code&gt;. Then, if a conversion with style &lt;code&gt;E&lt;/code&gt; would have an exponent of &lt;code&gt;X&lt;/code&gt;:</source>
          <target state="translated">LET &lt;code&gt;P&lt;/code&gt; は、ゼロ以外の場合は精密に等しく &lt;code&gt;6&lt;/code&gt; 精度が指定されているかどうか &lt;code&gt;1&lt;/code&gt; 精度であれば &lt;code&gt;​0​&lt;/code&gt; 。次に、スタイル &lt;code&gt;E&lt;/code&gt; の変換の指数が &lt;code&gt;X&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="1d96618afd4263ec0d73d199a2618f5e147e9e73" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;U&lt;/code&gt; be &lt;code&gt;&lt;a href=&quot;../../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/remove_reference&quot;&gt;std::remove_reference_t&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">してみましょう &lt;code&gt;U&lt;/code&gt; BE &lt;code&gt;&lt;a href=&quot;../../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/remove_reference&quot;&gt;std::remove_reference_t&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32d8483331780e895e2e6534b1cf368ac9e20d64" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;Y&lt;/code&gt; be &lt;code&gt;typename &lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;::element_type&lt;/code&gt;, then the resulting &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;'s stored pointer will be obtained by evaluating, respectively:</source>
          <target state="translated">LET &lt;code&gt;Y&lt;/code&gt; はである &lt;code&gt;typename &lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;::element_type&lt;/code&gt; 、次いで得られた &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; の格納されたポインタは、それぞれ、評価することによって得られるであろう。</target>
        </trans-unit>
        <trans-unit id="7bf1f858e1bdfaa71eed61b027d72a6d348da6cc" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;fn&lt;/code&gt; be the call wrapper returned by a call to &lt;code&gt;std::mem_fn&lt;/code&gt; with a pointer to member &lt;code&gt;pm&lt;/code&gt;. Then the expression &lt;code&gt;fn(t, a2, ..., aN)&lt;/code&gt; is equivalent to &lt;code&gt;INVOKE(pm, t, a2, ..., aN)&lt;/code&gt;, where</source>
          <target state="translated">してみましょう &lt;code&gt;fn&lt;/code&gt; への呼び出しによって返されたコールのラッパーなる &lt;code&gt;std::mem_fn&lt;/code&gt; メンバーへのポインタで &lt;code&gt;pm&lt;/code&gt; 。次に、式 &lt;code&gt;fn(t, a2, ..., aN)&lt;/code&gt; は &lt;code&gt;INVOKE(pm, t, a2, ..., aN)&lt;/code&gt; と同等です。ここで、</target>
        </trans-unit>
        <trans-unit id="4affff119284bd8c17502a7b4ba9cddc4335375c" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;since_midnight&lt;/code&gt; be the stored duration:</source>
          <target state="translated">してみましょう &lt;code&gt;since_midnight&lt;/code&gt; が保存された期間であることが：</target>
        </trans-unit>
        <trans-unit id="81727cefad0e4f620e16d3a8ef618ac5d109ea3a" translate="yes" xml:space="preserve">
          <source>Let's consider now those cases employing argument-dependent lookup (i.e., we use the more common call format &lt;code&gt;f(t)&lt;/code&gt;).</source>
          <target state="translated">次に、引数に依存するルックアップを使用するケースを考えてみましょう（つまり、より一般的な呼び出し形式 &lt;code&gt;f(t)&lt;/code&gt; を使用します）。</target>
        </trans-unit>
        <trans-unit id="41a116dfc9200f26422a8e9d5e49911e4bc90a0d" translate="yes" xml:space="preserve">
          <source>Letters in the integer literals are case-insensitive: &lt;code&gt;0xDeAdBeEfU&lt;/code&gt; and &lt;code&gt;0XdeadBEEFu&lt;/code&gt; represent the same number (one exception is the long-long-suffix, which is either &lt;code&gt;ll&lt;/code&gt; or &lt;code&gt;LL&lt;/code&gt;, never &lt;code&gt;lL&lt;/code&gt; or &lt;code&gt;Ll&lt;/code&gt;).</source>
          <target state="translated">整数リテラルの文字は大文字と小文字を区別し &lt;code&gt;0xDeAdBeEfU&lt;/code&gt; ん。0xDeAdBeEfUと &lt;code&gt;0XdeadBEEFu&lt;/code&gt; は同じ番号を表します（1つの例外はlong-long-suffixであり、 &lt;code&gt;ll&lt;/code&gt; または &lt;code&gt;LL&lt;/code&gt; であり、 &lt;code&gt;lL&lt;/code&gt; または &lt;code&gt;Ll&lt;/code&gt; ではありません）。</target>
        </trans-unit>
        <trans-unit id="4e3f5ccac8e611393a344b1488ebf8b88e0bab4b" translate="yes" xml:space="preserve">
          <source>Lexicographical comparison is a operation with the following properties:</source>
          <target state="translated">辞書的比較は、次のような性質を持つ操作です。</target>
        </trans-unit>
        <trans-unit id="7273c76d82ab971497c1735a342d6d033382649f" translate="yes" xml:space="preserve">
          <source>Lexicographically compares two ranges &lt;code&gt;[first1, last1)&lt;/code&gt; and &lt;code&gt;[first2, last2)&lt;/code&gt; using three-way comparison and produces a result of the strongest applicable comparison category type.</source>
          <target state="translated">3者間比較を使用して &lt;code&gt;[first2, last2)&lt;/code&gt; 辞書順で2つの範囲 &lt;code&gt;[first1, last1)&lt;/code&gt; と[first2、last2）を比較し、最も強い適用可能な比較カテゴリタイプの結果を生成します。</target>
        </trans-unit>
        <trans-unit id="67a093b5f3afa1ec9d50b3d089465752e5b76f7f" translate="yes" xml:space="preserve">
          <source>Library Fundamentals TS</source>
          <target state="translated">図書館ファンダメンタルズTS</target>
        </trans-unit>
        <trans-unit id="6b5e123be926567d010847ac064936336ad593ea" translate="yes" xml:space="preserve">
          <source>Library Fundamentals TS v2</source>
          <target state="translated">ライブラリファンダメンタルズTS v2</target>
        </trans-unit>
        <trans-unit id="e2667d1d4071efd5b07b3f89a3f29b6be4e37f9e" translate="yes" xml:space="preserve">
          <source>Library feature-test macros</source>
          <target state="translated">ライブラリ機能テストマクロ</target>
        </trans-unit>
        <trans-unit id="d181f5a9fb0d9e7127fc14e913193f77a0078f2d" translate="yes" xml:space="preserve">
          <source>Library feature-test macros (C++20)</source>
          <target state="translated">ライブラリ機能テストマクロ(C++20</target>
        </trans-unit>
        <trans-unit id="1ca30982b1bbf9fa6a34598686144ccd0b751409" translate="yes" xml:space="preserve">
          <source>Library features</source>
          <target state="translated">図書館の特徴</target>
        </trans-unit>
        <trans-unit id="09e12a24dc663d40201c5b3eab12424fb6edc742" translate="yes" xml:space="preserve">
          <source>Library support</source>
          <target state="translated">図書館サポート</target>
        </trans-unit>
        <trans-unit id="08957d8442d6c53a0376743b1046564066c5beb9" translate="yes" xml:space="preserve">
          <source>Library types</source>
          <target state="translated">図書館の種類</target>
        </trans-unit>
        <trans-unit id="541a37e25273e2d6d7d8ea77a193f781a3f90323" translate="yes" xml:space="preserve">
          <source>Library-wide</source>
          <target state="translated">Library-wide</target>
        </trans-unit>
        <trans-unit id="e791557e003ef45d34d52d1fde8fc7381122402d" translate="yes" xml:space="preserve">
          <source>Library-wide definitions</source>
          <target state="translated">図書館全体の定義</target>
        </trans-unit>
        <trans-unit id="8d05a85e0ee31a873e2f15997f3ffa7b057cefff" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.</source>
          <target state="translated">クリエイティブ・コモンズ表示-継承ライセンスv3.0の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="8d33f31baff91c27917dcfcd7222cc394cee13fd" translate="yes" xml:space="preserve">
          <source>Lifetime</source>
          <target state="translated">Lifetime</target>
        </trans-unit>
        <trans-unit id="fcab1aea1859e79acfdb16f5548fc5e8f346103c" translate="yes" xml:space="preserve">
          <source>Lifetime management overhead: pImpl (as well as OO factory) place the implementation object on the heap, which imposes significant runtime overhead at construction and destruction. This may be partially offset by custom allocators, since allocation size for pImpl (but not OO factory) is known at compile time.</source>
          <target state="translated">ライフタイム管理のオーバーヘッド:pImpl (OO factoryと同様に)は実装オブジェクトをヒープ上に配置しますが、これは構築時と破壊時に大きなランタイムオーバーヘッドをもたらします。これは、コンパイル時に pImpl (OO factory ではありません)のアロケーションサイズが既知であるため、カスタムアロケータによって部分的に相殺される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ce83a9e6e299b9deac4e3b17e7674a70743eba46" translate="yes" xml:space="preserve">
          <source>Lifetime of a &lt;a href=&quot;reference&quot;&gt;reference&lt;/a&gt; is exactly its storage duration.</source>
          <target state="translated">&lt;a href=&quot;reference&quot;&gt;参照の&lt;/a&gt;ライフタイムは、まさにその保存期間です。</target>
        </trans-unit>
        <trans-unit id="aa1c59351fb4e3a194ae9298bc34b5f343ca9a77" translate="yes" xml:space="preserve">
          <source>Lifetime of a member of a &lt;a href=&quot;union&quot;&gt;union&lt;/a&gt; begins when that member is made active</source>
          <target state="translated">&lt;a href=&quot;union&quot;&gt;組合&lt;/a&gt;員の有効期間は、その組合員がアクティブになったときに始まります。</target>
        </trans-unit>
        <trans-unit id="bfaa411f86a50808036a50484d4f059e87177ec8" translate="yes" xml:space="preserve">
          <source>Lifetime of a temporary</source>
          <target state="translated">一時的な寿命</target>
        </trans-unit>
        <trans-unit id="b06c7b4fe84d7d3832ffd284a1596b4ff15c6d2b" translate="yes" xml:space="preserve">
          <source>Lifetime of an object is equal to or is nested within the lifetime of its storage, see &lt;a href=&quot;storage_duration&quot;&gt;storage duration&lt;/a&gt;.</source>
          <target state="translated">オブジェクトの&lt;a href=&quot;storage_duration&quot;&gt;存続期間&lt;/a&gt;は、ストレージの存続期間に等しいか、ネストされます。ストレージ期間を参照してください。</target>
        </trans-unit>
        <trans-unit id="51e3b5d26b2a87dc97df037e11067c891e623490" translate="yes" xml:space="preserve">
          <source>Lifetimes of member objects and base subobjects begin and end following &lt;a href=&quot;constructor#Initialization_order&quot;&gt;class initialization order&lt;/a&gt;.</source>
          <target state="translated">メンバーオブジェクトと基本サブオブジェクトのライフタイムは、&lt;a href=&quot;constructor#Initialization_order&quot;&gt;クラスの初期化順序&lt;/a&gt;に従って開始および終了します。</target>
        </trans-unit>
        <trans-unit id="1332053b53e77535f34952c3e92e4a52a83ed6ef" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;make_shared&quot;&gt;std::make_shared&lt;/a&gt;&lt;/code&gt;, this function typically performs only one allocation, and places both the &lt;code&gt;T&lt;/code&gt; object and the control block in the allocated memory block (the standard recommends but does not require this, all known implementations do this). A copy of &lt;code&gt;alloc&lt;/code&gt; is stored as part of the control block so that it can be used to deallocate it once both shared and weak reference counts reach zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;make_shared&quot;&gt;std::make_shared&lt;/a&gt;&lt;/code&gt; と同様に、この関数は通常1つの割り当てのみを実行し、割り当てられたメモリブロックに &lt;code&gt;T&lt;/code&gt; オブジェクトと制御ブロックの両方を配置します（標準ではこれを推奨していますが、必須ではありません。すべての既知の実装でこれが行われます）。 &lt;code&gt;alloc&lt;/code&gt; のコピーは制御ブロックの一部として保存されるため、共有参照カウントと弱い参照カウントの両方がゼロに達したときに割り当てを解除するために使用できます。</target>
        </trans-unit>
        <trans-unit id="fb0723405e133e81ce558a6f85e371f734d41854" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;, a typical implementation of &lt;code&gt;weak_ptr&lt;/code&gt; stores two pointers:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; と同様に、 &lt;code&gt;weak_ptr&lt;/code&gt; の一般的な実装は2つのポインタを格納します。</target>
        </trans-unit>
        <trans-unit id="70ffb5a0c307ec17f33f7f7369b3ef25ef794da7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;unsigned char&lt;/code&gt;, it can be used to access raw memory occupied by other objects (&lt;a href=&quot;../language/objects&quot;&gt;object representation&lt;/a&gt;), but unlike those types, it is not a character type and is not an arithmetic type. A byte is only a collection of bits, and the only operators defined for it are the bitwise ones.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; や &lt;code&gt;unsigned char&lt;/code&gt; と同様に、他のオブジェクト（&lt;a href=&quot;../language/objects&quot;&gt;オブジェクト表現&lt;/a&gt;）が占有するrawメモリにアクセスするために使用できますが、これらの型とは異なり、文字型ではなく、算術型ではありません。バイトはビットのコレクションにすぎず、バイトに対して定義されている演算子はビット単位のものだけです。</target>
        </trans-unit>
        <trans-unit id="a0e7b4ff05a45ce92b546002d8fc2f4e84c6ea38" translate="yes" xml:space="preserve">
          <source>Like a hard link, a symbolic link allows a file to have multiple logical names. The presence of a hard link guarantees the existence of a file, even after the original name has been removed. A symbolic link provides no such assurance; in fact, the file named by the &lt;code&gt;target&lt;/code&gt; argument need not exist when the link is created. A symbolic link can cross file system boundaries.</source>
          <target state="translated">ハードリンクと同様に、シンボリックリンクを使用すると、ファイルに複数の論理名を付けることができます。ハードリンクの存在は、元の名前が削除された後でも、ファイルの存在を保証します。シンボリックリンクはそのような保証を提供しません。実際、リンクが作成されるときに、 &lt;code&gt;target&lt;/code&gt; 引数で指定されたファイルが存在している必要はありません。シンボリックリンクは、ファイルシステムの境界を越えることができます。</target>
        </trans-unit>
        <trans-unit id="8cc2c9ed197596f0e8ca54e8df4a5e29bc4bbde4" translate="yes" xml:space="preserve">
          <source>Like a reference, a structured binding is an alias to an existing object. Unlike a reference, the type of a structured binding does not have to be a reference type.</source>
          <target state="translated">参照と同様に、構造化バインディングは、既存のオブジェクトのエイリアスです。参照とは異なり、構造化バインディングの型は参照型である必要はありません。</target>
        </trans-unit>
        <trans-unit id="067a7fb7f8bc363ab9405d15f7f42f52d531593e" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::isalnum&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; の&lt;/a&gt;他のすべての関数と同様に、引数の値が &lt;code&gt;unsigned char&lt;/code&gt; として表せず、 &lt;code&gt;EOF&lt;/code&gt; と等しくない場合の &lt;code&gt;std::isalnum&lt;/code&gt; isalnumの動作は未定義です。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f83c5788970238d8dce9e165785dcf50fdef59c" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::isalpha&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">他のすべての機能と同じように&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; &lt;/a&gt;、の行動 &lt;code&gt;std::isalpha&lt;/code&gt; 引数の値がどちらとして表現可能であれば定義されていない &lt;code&gt;unsigned char&lt;/code&gt; 型も等しく &lt;code&gt;EOF&lt;/code&gt; 。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="02650958be1dd2146a9becd39224244d381efde4" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::isblank&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; の&lt;/a&gt;他のすべての関数と同様に、引数の値が &lt;code&gt;unsigned char&lt;/code&gt; として表せず、 &lt;code&gt;EOF&lt;/code&gt; と等しくない場合の &lt;code&gt;std::isblank&lt;/code&gt; 動作は未定義です。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="0340210c2f7ce33d0ebf0f6392410ac886edccce" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::iscntrl&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">他のすべての機能と同様に&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; &lt;/a&gt;、の行動 &lt;code&gt;std::iscntrl&lt;/code&gt; IS未定義の引数の値がどちらとして表現可能であれば &lt;code&gt;unsigned char&lt;/code&gt; 型も等しく &lt;code&gt;EOF&lt;/code&gt; 。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="2dd464fdeabb59a1a5f506eb7ecd2b3abdac9a22" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::isdigit&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; の&lt;/a&gt;他のすべての関数と同様に、引数の値が &lt;code&gt;unsigned char&lt;/code&gt; として表せず、 &lt;code&gt;EOF&lt;/code&gt; と等しくない場合の &lt;code&gt;std::isdigit&lt;/code&gt; 動作は未定義です。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="7dda039594fc889284a6c61532474b72fdbd1f81" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::isgraph&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; の&lt;/a&gt;他のすべての関数と同様に、引数の値が &lt;code&gt;unsigned char&lt;/code&gt; として表現できないか、 &lt;code&gt;EOF&lt;/code&gt; と等しくない場合の &lt;code&gt;std::isgraph&lt;/code&gt; 動作は未定義です。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="e6241819c2a6db7cd413177f3e7eb9b7229e9f1f" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::islower&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; の&lt;/a&gt;他のすべての関数と同様に、引数の値が &lt;code&gt;unsigned char&lt;/code&gt; として表せず、 &lt;code&gt;EOF&lt;/code&gt; と等しくない場合の &lt;code&gt;std::islower&lt;/code&gt; 動作は未定義です。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="7ccc47ed9fcd07aec0dbec6222f54d9803cf130c" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::isprint&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">他のすべての機能と同じように&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; &lt;/a&gt;、の行動 &lt;code&gt;std::isprint&lt;/code&gt; 引数の値がどちらとして表現可能であれば定義されていない &lt;code&gt;unsigned char&lt;/code&gt; 型も等しく &lt;code&gt;EOF&lt;/code&gt; 。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="411696ff296361e95ad61309fa87bc8c79319127" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::ispunct&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">他のすべての機能と同じように&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; &lt;/a&gt;、の行動 &lt;code&gt;std::ispunct&lt;/code&gt; 引数の値がどちらとして表現可能であれば定義されていない &lt;code&gt;unsigned char&lt;/code&gt; 型も等しく &lt;code&gt;EOF&lt;/code&gt; 。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2bc2b3471f087c8466e836925f03b3603558f3f" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::isspace&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">他のすべての機能と同じように&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; &lt;/a&gt;、の行動 &lt;code&gt;std::isspace&lt;/code&gt; 引数の値がどちらとして表現可能であれば定義されていない &lt;code&gt;unsigned char&lt;/code&gt; 型も等しく &lt;code&gt;EOF&lt;/code&gt; 。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="395c220484621ffd75d1964f6130a00ce4ddab49" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::isupper&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; の&lt;/a&gt;他のすべての関数と同様に、引数の値が &lt;code&gt;unsigned char&lt;/code&gt; として表現できないか、 &lt;code&gt;EOF&lt;/code&gt; と等しくない場合の &lt;code&gt;std::isupper&lt;/code&gt; 動作は未定義です。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb2c7e80bd4929826427f19fc7c64d9e9ff5d018" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::isxdigit&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; の&lt;/a&gt;他のすべての関数と同様に、引数の値が &lt;code&gt;unsigned char&lt;/code&gt; として表せず、 &lt;code&gt;EOF&lt;/code&gt; と等しくない場合の &lt;code&gt;std::isxdigit&lt;/code&gt; 動作は未定義です。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="ff408cea9c029c8dab319c58cbd0c36f0d4045fe" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::tolower&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; の&lt;/a&gt;他のすべての関数と同様に、引数の値が &lt;code&gt;unsigned char&lt;/code&gt; として表せず、 &lt;code&gt;EOF&lt;/code&gt; と等しくない場合の &lt;code&gt;std::tolower&lt;/code&gt; 動作は未定義です。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="c3e68c1eaec4b4e283489b5c67ab059adf32011f" translate="yes" xml:space="preserve">
          <source>Like all other functions from &lt;a href=&quot;../../header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt;, the behavior of &lt;code&gt;std::toupper&lt;/code&gt; is undefined if the argument's value is neither representable as &lt;code&gt;unsigned char&lt;/code&gt; nor equal to &lt;code&gt;EOF&lt;/code&gt;. To use these functions safely with plain &lt;code&gt;char&lt;/code&gt;s (or &lt;code&gt;signed char&lt;/code&gt;s), the argument should first be converted to &lt;code&gt;unsigned char&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../header/cctype&quot;&gt; &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt; の&lt;/a&gt;他のすべての関数と同様に、引数の値が &lt;code&gt;unsigned char&lt;/code&gt; として表せず、 &lt;code&gt;EOF&lt;/code&gt; と等しくない場合の &lt;code&gt;std::toupper&lt;/code&gt; toupperの動作は未定義です。これらの関数をプレーンな &lt;code&gt;char&lt;/code&gt; （または &lt;code&gt;signed char&lt;/code&gt; ）で安全に使用するには、まず引数を &lt;code&gt;unsigned char&lt;/code&gt; に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="277019aab45ab5f935fb6e92f8f5746e4c25daa8" translate="yes" xml:space="preserve">
          <source>Like any template declaration, an alias template can only be declared at class scope or namespace scope.</source>
          <target state="translated">他のテンプレート宣言と同様に、エイリアス・テンプレートはクラス・スコープまたはネームスペース・スコープでのみ宣言できます。</target>
        </trans-unit>
        <trans-unit id="ca47c4b0c6ddc7644bfef7979156876bc8446bd5" translate="yes" xml:space="preserve">
          <source>Like class prvalues, array prvalues convert to xvalues by &lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;temporary materialization&lt;/a&gt; when evaluated.</source>
          <target state="translated">クラスprvaluesと同様に、配列prvaluesは、評価時に&lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;一時的な実体&lt;/a&gt;化によってxvaluesに変換されます。</target>
        </trans-unit>
        <trans-unit id="0347742fa713e18c4beb5d442719947cba761472" translate="yes" xml:space="preserve">
          <source>Like language references, constness is shallow for &lt;code&gt;atomic_ref&lt;/code&gt; - it is possible to modify the referenced value through a &lt;code&gt;const&lt;/code&gt;&lt;code&gt;atomic_ref&lt;/code&gt; object.</source>
          <target state="translated">言語リファレンスと同様に、const性は浅いです &lt;code&gt;atomic_ref&lt;/code&gt; -介して参照値を変更することが可能である &lt;code&gt;const&lt;/code&gt; &lt;code&gt;atomic_ref&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="7a2c18bbb70b4975f8de70e1d0f45d8ebbaac4a9" translate="yes" xml:space="preserve">
          <source>Like other classes, class templates have an injected-class-name. The injected-class-name can be used as a template-name or a type-name.</source>
          <target state="translated">他のクラスと同様に、クラス・テンプレートには注入されたクラス名があります。注入されたクラス名はテンプレート名または型名として使用することができます。</target>
        </trans-unit>
        <trans-unit id="7a6e90ef50926b9b7275d89708dfc849a157f540" translate="yes" xml:space="preserve">
          <source>Like other members, injected-class-names are inherited. In the presence of private or protected inheritance, the injected-class-name of an indirect base class might end up being inaccessible in a derived class.</source>
          <target state="translated">他のメンバーと同様に、注入されたクラス名は継承されます。プライベート継承や保護された継承がある場合、間接的な基底クラスの injected-class-name は派生クラスではアクセスできなくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f6f1d175f286f2d5f07aef906a2e3bc134ab3f16" translate="yes" xml:space="preserve">
          <source>Like other streambuf classes, &lt;code&gt;std::basic_syncbuf&lt;/code&gt; is normally only accessed through the corresponding stream, &lt;a href=&quot;basic_osyncstream&quot;&gt;&lt;code&gt;std::osyncstream&lt;/code&gt;&lt;/a&gt;, not directly.</source>
          <target state="translated">他のstreambufクラスと同様に、 &lt;code&gt;std::basic_syncbuf&lt;/code&gt; は通常、直接ではなく、対応するストリーム&lt;a href=&quot;basic_osyncstream&quot;&gt; &lt;code&gt;std::osyncstream&lt;/code&gt; &lt;/a&gt;介してのみアクセスされます。</target>
        </trans-unit>
        <trans-unit id="bd2d3509f0729065894ca6384a10fe999c819fe7" translate="yes" xml:space="preserve">
          <source>Likewise, function-try-block of the &lt;a href=&quot;main_function&quot;&gt;main() function&lt;/a&gt; does not catch the exceptions thrown from the constructors and destructors of &lt;a href=&quot;storage_duration&quot;&gt;static&lt;/a&gt; objects (except for the constructors of function-local statics).</source>
          <target state="translated">同様に、&lt;a href=&quot;main_function&quot;&gt;main（）関数の&lt;/a&gt; function-try-blockは、&lt;a href=&quot;storage_duration&quot;&gt;静的&lt;/a&gt;オブジェクトのコンストラクタとデストラクタからスローされた例外をキャッチしません（関数ローカル静的のコンストラクタを除く）。</target>
        </trans-unit>
        <trans-unit id="ab6af34df8147c6b3a0969fea41e698ff89bc410" translate="yes" xml:space="preserve">
          <source>Likewise, the 16-digit string &lt;code&gt;9007199254740993&lt;/code&gt; does not survive text-&amp;gt;double-&amp;gt;text roundtrip, becoming &lt;code&gt;9007199254740992&lt;/code&gt;: the 64-bit IEEE 754 type double guarantees this roundtrip only for 15 decimal digits.</source>
          <target state="translated">同様に、16桁の文字列 &lt;code&gt;9007199254740993&lt;/code&gt; は、text-&amp;gt; double- &amp;gt; text ラウンドトリップを通過せず、 &lt;code&gt;9007199254740992&lt;/code&gt; になります。64ビットIEEE 754タイプのdoubleは、このラウンドトリップを15桁の10進数でのみ保証します。</target>
        </trans-unit>
        <trans-unit id="28d080135c0996528be81f65c40eb528ec429cbe" translate="yes" xml:space="preserve">
          <source>Likewise, the inequality operator is typically implemented in terms of &lt;code&gt;operator==&lt;/code&gt;:</source>
          <target state="translated">同様に、不等式演算子は通常、 &lt;code&gt;operator==&lt;/code&gt; に関して実装されます。</target>
        </trans-unit>
        <trans-unit id="9d8bc984a49e87697786db72d2563a91679f73c6" translate="yes" xml:space="preserve">
          <source>Limits of floating point types</source>
          <target state="translated">浮動小数点型の限界</target>
        </trans-unit>
        <trans-unit id="68c715c0e0c866487981ad26eed257940f23ee03" translate="yes" xml:space="preserve">
          <source>Limits of integer types</source>
          <target state="translated">整数型の限界</target>
        </trans-unit>
        <trans-unit id="15ff631ff253c68efadbbe156b2dbda674f664c6" translate="yes" xml:space="preserve">
          <source>Limits of other integer types</source>
          <target state="translated">他の整数型の限界</target>
        </trans-unit>
        <trans-unit id="af502f2b37eea07ed9083c7daf40f34553f6fccd" translate="yes" xml:space="preserve">
          <source>Linear</source>
          <target state="translated">Linear</target>
        </trans-unit>
        <trans-unit id="d663d9eccd3592374d465e1969446c41d66c8a96" translate="yes" xml:space="preserve">
          <source>Linear in &lt;code&gt;&lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first,last)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first,last)&lt;/code&gt; 線形。</target>
        </trans-unit>
        <trans-unit id="5ee30c8aafcff81625dfef38a2177634d49c1eed" translate="yes" xml:space="preserve">
          <source>Linear in &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 線形。</target>
        </trans-unit>
        <trans-unit id="dd2f30444814df4f83cd7413476e4b0fd89443cb" translate="yes" xml:space="preserve">
          <source>Linear in &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; の線形。</target>
        </trans-unit>
        <trans-unit id="b7bbb05054f896c8a5f8b773dacbef4017beeded" translate="yes" xml:space="preserve">
          <source>Linear in &lt;code&gt;rcount&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rcount&lt;/code&gt; の線形。</target>
        </trans-unit>
        <trans-unit id="1a961c5a00bbaee66696314d28a309bcc73bf9a0" translate="yes" xml:space="preserve">
          <source>Linear in size of the container.</source>
          <target state="translated">容器の大きさが直線的。</target>
        </trans-unit>
        <trans-unit id="47e94bceda1e4178a1dbb6f4ff6dcd1259ef8d37" translate="yes" xml:space="preserve">
          <source>Linear in the difference between the current size and &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">現在のサイズと &lt;code&gt;count&lt;/code&gt; の差の線形。</target>
        </trans-unit>
        <trans-unit id="c0ba0eb11bb040b4fe1f3679f71ea7620138693f" translate="yes" xml:space="preserve">
          <source>Linear in the difference between the current size and &lt;code&gt;count&lt;/code&gt;. Additional complexity possible due to list traversal to reach the first element to erase/the end position to insert.</source>
          <target state="translated">現在のサイズと &lt;code&gt;count&lt;/code&gt; の差の線形。リストトラバーサルが消去する最初の要素/挿入する終了位置に到達するため、さらに複雑になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="baaef666d55118a41c333430f0a97ec79990b1cb" translate="yes" xml:space="preserve">
          <source>Linear in the difference between the current size and &lt;code&gt;count&lt;/code&gt;. Additional complexity possible due to reallocation if capacity is less than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">現在のサイズと &lt;code&gt;count&lt;/code&gt; の差の線形。容量が &lt;code&gt;count&lt;/code&gt; より少ない場合は、再割り当てによりさらに複雑になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="61fc9e3129ac082fe227ebd6080874ba58bf854d" translate="yes" xml:space="preserve">
          <source>Linear in the distance between &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; 間の距離で線形。</target>
        </trans-unit>
        <trans-unit id="5120f8d10505c4347d98aef0265d53cc5b14811e" translate="yes" xml:space="preserve">
          <source>Linear in the distance between &lt;code&gt;pos&lt;/code&gt; and end of the container.</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; とコンテナーの端の間の距離に線形。</target>
        </trans-unit>
        <trans-unit id="e00c01e410d339ff063543b8db6c55336a7eb35e" translate="yes" xml:space="preserve">
          <source>Linear in the length of the underlying character sequence.</source>
          <target state="translated">下位の文字列の長さが直線的。</target>
        </trans-unit>
        <trans-unit id="daef509e105270395b1f8ee55aa3597f2d32c098" translate="yes" xml:space="preserve">
          <source>Linear in the lesser of the distances between &lt;code&gt;pos&lt;/code&gt; and either of the ends of the container.</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; とコンテナのいずれかの端との間の距離の短い方で線形。</target>
        </trans-unit>
        <trans-unit id="f9e42220f12301a5a104063cb40d7e22a40f20c0" translate="yes" xml:space="preserve">
          <source>Linear in the number of sub-matches.</source>
          <target state="translated">サブマッチの数はリニア。</target>
        </trans-unit>
        <trans-unit id="c5ddd8aed976c4d32ca29544bac6a99205868cfe" translate="yes" xml:space="preserve">
          <source>Linear in the size of the bucket &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">バケット &lt;code&gt;n&lt;/code&gt; のサイズは線形。</target>
        </trans-unit>
        <trans-unit id="320de548d4905427a59ae55bf65f8ed7ea812394" translate="yes" xml:space="preserve">
          <source>Linear in the size of the container adaptor.</source>
          <target state="translated">コンテナアダプタのサイズでリニア。</target>
        </trans-unit>
        <trans-unit id="58a053e51fd6f7ec6e1969382ddb0c636fee3c4d" translate="yes" xml:space="preserve">
          <source>Linear in the size of the container, i.e., the number of elements.</source>
          <target state="translated">コンテナのサイズ、すなわち要素の数がリニアになります。</target>
        </trans-unit>
        <trans-unit id="9e42d6edd168f206c67991730a76dd86d7fd13ac" translate="yes" xml:space="preserve">
          <source>Linear in the size of the container.</source>
          <target state="translated">容器の大きさはリニア。</target>
        </trans-unit>
        <trans-unit id="d098f3f0fdf3fe294ef9db9875c8f3ba39748928" translate="yes" xml:space="preserve">
          <source>Linear in the size of the numeric array.</source>
          <target state="translated">数値配列のサイズをリニアにします。</target>
        </trans-unit>
        <trans-unit id="39f6b3d4e54ae45f608cfae2731dfa12f1a130f4" translate="yes" xml:space="preserve">
          <source>Linear in the size of the string</source>
          <target state="translated">文字列のサイズがリニア</target>
        </trans-unit>
        <trans-unit id="d34b2255c2e995e02e21a14b3a4851ac5882aba2" translate="yes" xml:space="preserve">
          <source>Linear in the size of the string, although existing implementations operate in constant time.</source>
          <target state="translated">既存の実装は一定時間で動作しますが、文字列のサイズはリニアです。</target>
        </trans-unit>
        <trans-unit id="2f4742601a668a97966b78c0c256da0091787c9f" translate="yes" xml:space="preserve">
          <source>Linear in the size of the string.</source>
          <target state="translated">文字列のサイズをリニアにします。</target>
        </trans-unit>
        <trans-unit id="d504b6d983be80c3da82ac77491361a106de8dd6" translate="yes" xml:space="preserve">
          <source>Linear in the size of the strings.</source>
          <target state="translated">文字列のサイズがリニア。</target>
        </trans-unit>
        <trans-unit id="c67c2146b42dc18f8ac7602e8c37c39d0d1a88f4" translate="yes" xml:space="preserve">
          <source>Linear in the size of the views.</source>
          <target state="translated">ビューの大きさでリニア。</target>
        </trans-unit>
        <trans-unit id="353a3b1efc1c504f1131664f1c9da4bb8225908a" translate="yes" xml:space="preserve">
          <source>Linear interpolation</source>
          <target state="translated">直線補間</target>
        </trans-unit>
        <trans-unit id="2eb90c9fc96f9c707142bd2df66bbb959c695585" translate="yes" xml:space="preserve">
          <source>Linear.</source>
          <target state="translated">Linear.</target>
        </trans-unit>
        <trans-unit id="bd2f979972802ff1d01a873d1a8e13284150ffe8" translate="yes" xml:space="preserve">
          <source>Linear: the number of calls to the destructor of T is the same as the number of elements erased, the assignment operator of T is called the number of times equal to the number of elements in the vector after the erased elements.</source>
          <target state="translated">線形:Tのデストラクタへの呼び出し回数は消去された要素の数と同じで、Tの代入演算子は消去された要素の後のベクトルの要素数に等しい回数だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4ee1b770c5760a0a6cf5b30f78ae338fd8baa73a" translate="yes" xml:space="preserve">
          <source>Linear: the number of calls to the destructor of T is the same as the number of elements erased, the number of calls to the assignment operator of T is no more than the lesser of the number of elements before the erased elements and the number of elements after the erased elements.</source>
          <target state="translated">線形:Tのデストラクタへの呼び出し回数は消去された要素の数と同じであり、Tの代入演算子への呼び出し回数は消去された要素の前の要素の数と消去された要素の後の要素の数のいずれか小さい方以下である。</target>
        </trans-unit>
        <trans-unit id="8f51211d5882b7b1d7f5bacb8c562304994eec22" translate="yes" xml:space="preserve">
          <source>Link has been severed</source>
          <target state="translated">リンクが切れました</target>
        </trans-unit>
        <trans-unit id="b27dc31140950c016978fcb4c144b7b2d3cbc47c" translate="yes" xml:space="preserve">
          <source>Linkage</source>
          <target state="translated">Linkage</target>
        </trans-unit>
        <trans-unit id="55ecf80e85b7d19bbe4096b1255534070ebf5b46" translate="yes" xml:space="preserve">
          <source>Linkage specification</source>
          <target state="translated">リンケージ仕様</target>
        </trans-unit>
        <trans-unit id="44da027a7d61f0dfd1784a90d378229ab9cfb71e" translate="yes" xml:space="preserve">
          <source>List initialization is performed in the following situations:</source>
          <target state="translated">リストの初期化は以下のような状況で行われます。</target>
        </trans-unit>
        <trans-unit id="7094bd5e681efcce9038e6d995bf2d060fc85079" translate="yes" xml:space="preserve">
          <source>List operations</source>
          <target state="translated">リスト操作</target>
        </trans-unit>
        <trans-unit id="00863cc84a92ec056c8a5802850de22482d7a20f" translate="yes" xml:space="preserve">
          <source>List-initialization</source>
          <target state="translated">List-initialization</target>
        </trans-unit>
        <trans-unit id="54a3b43bb92df32d485a7093803f903e36c579fd" translate="yes" xml:space="preserve">
          <source>Lists the exceptions that a function might directly or indirectly throw.</source>
          <target state="translated">関数が直接または間接的に投げる可能性のある例外をリストアップします。</target>
        </trans-unit>
        <trans-unit id="88f0bff43cf350627f446597dc555fcbb10deccb" translate="yes" xml:space="preserve">
          <source>Literal constant expression</source>
          <target state="translated">リテラル定数式</target>
        </trans-unit>
        <trans-unit id="a7c8f6e22e4cf98d224c691373983e8bb4a14cd5" translate="yes" xml:space="preserve">
          <source>Literal operators</source>
          <target state="translated">リテラル演算子</target>
        </trans-unit>
        <trans-unit id="793829f43d6401d24000acee9b0edc1896c5c837" translate="yes" xml:space="preserve">
          <source>Literal type that extends string literals:</source>
          <target state="translated">文字列リテラルを拡張したリテラル型。</target>
        </trans-unit>
        <trans-unit id="2304c62e8f7798124c1dc52b057e7762191e4112" translate="yes" xml:space="preserve">
          <source>LiteralType</source>
          <target state="translated">LiteralType</target>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="b85acf10db8d6b17de3526edb467be756ff163a4" translate="yes" xml:space="preserve">
          <source>Literals are the tokens of a C++ program that represent constant values embedded in the source code.</source>
          <target state="translated">リテラルは、ソース コードに埋め込まれた定数値を表す C++プログラムのトークンです。</target>
        </trans-unit>
        <trans-unit id="207b5847d31f577b34ce5944ce67366ee6a9f77d" translate="yes" xml:space="preserve">
          <source>Loads the data from locations, defined by &lt;code&gt;vlist&lt;/code&gt;,, converts them to wide string equivalents and writes the results to a variety of sinks.</source>
          <target state="translated">&lt;code&gt;vlist&lt;/code&gt; で定義された場所からデータを読み込み、それらを同等のワイド文字列に変換して、結果をさまざまなシンクに書き込みます。</target>
        </trans-unit>
        <trans-unit id="306845665660271f5edceb9cf305119d107a9b6d" translate="yes" xml:space="preserve">
          <source>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks.</source>
          <target state="translated">指定された場所からデータをロードし、文字列に相当するものに変換し、その結果をさまざまなシンクに書き込みます。</target>
        </trans-unit>
        <trans-unit id="b98547f12140b861f02fc92da40524e3b426e7b6" translate="yes" xml:space="preserve">
          <source>Loads the data from the given locations, converts them to wide string equivalents and writes the results to a variety of sinks.</source>
          <target state="translated">指定された場所からデータをロードし、ワイド文字列に変換し、その結果をさまざまなシンクに書き込みます。</target>
        </trans-unit>
        <trans-unit id="7bea89bc2ce48c930dc7395bbdbef3f7216a1506" translate="yes" xml:space="preserve">
          <source>Loads the data from the locations, defined by &lt;code&gt;vlist&lt;/code&gt;, converts them to character string equivalents and writes the results to a variety of sinks.</source>
          <target state="translated">&lt;code&gt;vlist&lt;/code&gt; で定義された場所からデータを読み込み、それらを同等の文字列に変換して、結果をさまざまなシンクに書き込みます。</target>
        </trans-unit>
        <trans-unit id="3efe7e57b877b99e83abee299be618072a6caad5" translate="yes" xml:space="preserve">
          <source>Loads the execution context &lt;code&gt;env&lt;/code&gt; saved by a previous call to &lt;code&gt;&lt;a href=&quot;setjmp&quot;&gt;setjmp&lt;/a&gt;&lt;/code&gt;. This function does not return. Control is transferred to the call site of the macro &lt;code&gt;&lt;a href=&quot;setjmp&quot;&gt;setjmp&lt;/a&gt;&lt;/code&gt; that set up &lt;code&gt;env&lt;/code&gt;. That &lt;code&gt;&lt;a href=&quot;setjmp&quot;&gt;setjmp&lt;/a&gt;&lt;/code&gt; then returns the value, passed as the &lt;code&gt;status&lt;/code&gt;.</source>
          <target state="translated">前回の &lt;code&gt;&lt;a href=&quot;setjmp&quot;&gt;setjmp&lt;/a&gt;&lt;/code&gt; の呼び出しで保存された実行コンテキスト &lt;code&gt;env&lt;/code&gt; をロードします。この関数は戻りません。制御は、 &lt;code&gt;env&lt;/code&gt; を設定するマクロ &lt;code&gt;&lt;a href=&quot;setjmp&quot;&gt;setjmp&lt;/a&gt;&lt;/code&gt; の呼び出しサイトに移されます。その &lt;code&gt;&lt;a href=&quot;setjmp&quot;&gt;setjmp&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;status&lt;/code&gt; として渡された値を返します。</target>
        </trans-unit>
        <trans-unit id="f3f3766d936a084f7885a89b74bff964f93af54b" translate="yes" xml:space="preserve">
          <source>Local classes</source>
          <target state="translated">ローカルクラス</target>
        </trans-unit>
        <trans-unit id="4aae5a412706d04afcfacf152e9fb5c7502dd7b9" translate="yes" xml:space="preserve">
          <source>Local classes cannot define &lt;a href=&quot;friend&quot;&gt;friend functions&lt;/a&gt; inside the class definition</source>
          <target state="translated">ローカルクラスはクラス定義内で&lt;a href=&quot;friend&quot;&gt;フレンド関数&lt;/a&gt;を定義できません</target>
        </trans-unit>
        <trans-unit id="537fd817534a9d16da0662978fafc67944474038" translate="yes" xml:space="preserve">
          <source>Local classes cannot have &lt;a href=&quot;friend#Template_friends&quot;&gt;friend templates&lt;/a&gt;</source>
          <target state="translated">ローカルクラスは&lt;a href=&quot;friend#Template_friends&quot;&gt;友達テンプレートを&lt;/a&gt;持つことができません</target>
        </trans-unit>
        <trans-unit id="25934a3163283e7417a8ccb81533f8c6db7c89fa" translate="yes" xml:space="preserve">
          <source>Local classes other than &lt;a href=&quot;lambda&quot;&gt;closure types&lt;/a&gt;(since C++14) cannot have member templates</source>
          <target state="translated">&lt;a href=&quot;lambda&quot;&gt;クロージャータイプ&lt;/a&gt;以外のローカルクラス（C ++ 14以降）はメンバーテンプレートを持つことができません</target>
        </trans-unit>
        <trans-unit id="0b64c37e179f49fcbc2cadc0fb2d42cd79c4fdd9" translate="yes" xml:space="preserve">
          <source>Local monetary numeric formatting parameters</source>
          <target state="translated">ローカル通貨数値フォーマットパラメータ</target>
        </trans-unit>
        <trans-unit id="9ac34b8bf1cd18f9b339db9b7d7bfbe70142b73d" translate="yes" xml:space="preserve">
          <source>Local variables are not allowed in default arguments  unless used in unevaluated context(since C++14):</source>
          <target state="translated">ローカル変数は、評価されないコンテキストで使用されない限り、デフォルトの引数では使用できません(C++14以降)。</target>
        </trans-unit>
        <trans-unit id="8970f0e691a0a23a47517698017c997507efd496" translate="yes" xml:space="preserve">
          <source>Locale</source>
          <target state="translated">Locale</target>
        </trans-unit>
        <trans-unit id="6c3524ddb4dbd6e55cdddfdad87f91e490674af0" translate="yes" xml:space="preserve">
          <source>Locale-independent unicode conversion facets</source>
          <target state="translated">ロケールに依存しないユニコード変換ファセット</target>
        </trans-unit>
        <trans-unit id="9e57020d7e664c3bc1f3a56095434c59ad016632" translate="yes" xml:space="preserve">
          <source>Locale-specific facet categories</source>
          <target state="translated">局所特異的なファセットカテゴリ</target>
        </trans-unit>
        <trans-unit id="a222060e32289bf6910ac4a07a10733be500bd99" translate="yes" xml:space="preserve">
          <source>Locales</source>
          <target state="translated">Locales</target>
        </trans-unit>
        <trans-unit id="3a0f6d00aea8688a68e6b8a0597983687499bda4" translate="yes" xml:space="preserve">
          <source>Locales and facets</source>
          <target state="translated">ロケールとファセット</target>
        </trans-unit>
        <trans-unit id="d2ba11823ed33de4da4e31b0eebe19082e18127d" translate="yes" xml:space="preserve">
          <source>Localization library</source>
          <target state="translated">ローカライズライブラリ</target>
        </trans-unit>
        <trans-unit id="c07f512f68e601c83a418f3dad591a2645430943" translate="yes" xml:space="preserve">
          <source>Localization utilities</source>
          <target state="translated">ローカライズユーティリティ</target>
        </trans-unit>
        <trans-unit id="dc8dbeb23836a69ebeafc222497183282817c913" translate="yes" xml:space="preserve">
          <source>Localizations</source>
          <target state="translated">Localizations</target>
        </trans-unit>
        <trans-unit id="d71da9d4cb1a804d59d89b1825a9880a0942d7ab" translate="yes" xml:space="preserve">
          <source>Locates the first character in the character array &lt;code&gt;[beg, end)&lt;/code&gt; that does not satisfy the classification mask &lt;code&gt;m&lt;/code&gt;, that is, the first character &lt;code&gt;c&lt;/code&gt; such that &lt;code&gt;table()[(unsigned char)c] &amp;amp; m&lt;/code&gt; would return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">文字配列 &lt;code&gt;[beg, end)&lt;/code&gt; で、分類マスク &lt;code&gt;m&lt;/code&gt; を満たさない最初の文字、つまり &lt;code&gt;table()[(unsigned char)c] &amp;amp; m&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返すような最初の文字 &lt;code&gt;c&lt;/code&gt; を見つけます。</target>
        </trans-unit>
        <trans-unit id="357cdcce80e8002095e52999c10401e1457183fd" translate="yes" xml:space="preserve">
          <source>Locates the first character in the character array &lt;code&gt;[beg, end)&lt;/code&gt; that satisfies the classification mask &lt;code&gt;m&lt;/code&gt;, that is, the first character &lt;code&gt;c&lt;/code&gt; such that &lt;code&gt;table()[(unsigned char) c] &amp;amp; m&lt;/code&gt; would return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">文字配列 &lt;code&gt;[beg, end)&lt;/code&gt; で、分類マスク &lt;code&gt;m&lt;/code&gt; 、つまり &lt;code&gt;table()[(unsigned char) c] &amp;amp; m&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返すような最初の文字 &lt;code&gt;c&lt;/code&gt; を満たす最初の文字を見つけます。</target>
        </trans-unit>
        <trans-unit id="31e9f816605eb9508f673fc28eb1f9b42210f44e" translate="yes" xml:space="preserve">
          <source>Locates the first occurrence of wide character &lt;code&gt;ch&lt;/code&gt; in the initial &lt;code&gt;count&lt;/code&gt; wide characters of the wide character array pointed to by &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; が指すワイド文字配列の最初の &lt;code&gt;count&lt;/code&gt; ワイド文字の中の最初のワイド文字 &lt;code&gt;ch&lt;/code&gt; を見つけます。</target>
        </trans-unit>
        <trans-unit id="14fbab694e4672e756dc11003aa78ae825a8fc71" translate="yes" xml:space="preserve">
          <source>Lock freedom</source>
          <target state="translated">ロックの自由度</target>
        </trans-unit>
        <trans-unit id="ee78ba28c676d3bfd6bbd0d0ac4dc1adaedada08" translate="yes" xml:space="preserve">
          <source>Lockable</source>
          <target state="translated">Lockable</target>
        </trans-unit>
        <trans-unit id="d1d6079f6b5f44c82f4e240cfc0156faa4fc5b60" translate="yes" xml:space="preserve">
          <source>Locking</source>
          <target state="translated">Locking</target>
        </trans-unit>
        <trans-unit id="89301c33d91c56fca51d422389610ec0003774ae" translate="yes" xml:space="preserve">
          <source>Locks the associated mutex in shared mode. Effectively calls &lt;code&gt;mutex()-&amp;gt;lock_shared()&lt;/code&gt;.</source>
          <target state="translated">関連付けられたミューテックスを共有モードでロックします。効果的に &lt;code&gt;mutex()-&amp;gt;lock_shared()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="0e4c226b5fbb2b899205fcb0ab7e1977150757b6" translate="yes" xml:space="preserve">
          <source>Locks the associated mutex. Effectively calls &lt;code&gt;mutex()-&amp;gt;lock()&lt;/code&gt;.</source>
          <target state="translated">関連するミューテックスをロックします。効果的に &lt;code&gt;mutex()-&amp;gt;lock()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bdeef0016a6ddc17439dd3082bbe560063b4040e" translate="yes" xml:space="preserve">
          <source>Locks the given &lt;a href=&quot;../named_req/lockable&quot;&gt;Lockable&lt;/a&gt; objects &lt;code&gt;lock1&lt;/code&gt;, &lt;code&gt;lock2&lt;/code&gt;, &lt;code&gt;...&lt;/code&gt;, &lt;code&gt;lockn&lt;/code&gt; using a deadlock avoidance algorithm to avoid deadlock.</source>
          <target state="translated">ロック与えられた&lt;a href=&quot;../named_req/lockable&quot;&gt;ロック可能では&lt;/a&gt;オブジェクト &lt;code&gt;lock1&lt;/code&gt; 、 &lt;code&gt;lock2&lt;/code&gt; 、 &lt;code&gt;...&lt;/code&gt; 、 &lt;code&gt;lockn&lt;/code&gt; デッドロックを回避するために、デッドロック回避のアルゴリズムを使用して。</target>
        </trans-unit>
        <trans-unit id="07953af6eaa80da971053dc23bda5d5c2a2e5a5c" translate="yes" xml:space="preserve">
          <source>Locks the mutex. If another thread has already locked the mutex, a call to &lt;code&gt;lock&lt;/code&gt; will block execution until the lock is acquired.</source>
          <target state="translated">ミューテックスをロックします。別のスレッドがすでにミューテックスをロックしている場合、 &lt;code&gt;lock&lt;/code&gt; を呼び出すと、ロックが取得されるまで実行がブロックされます。</target>
        </trans-unit>
        <trans-unit id="9b108190806dbf643b285b25368b99531689061b" translate="yes" xml:space="preserve">
          <source>Logarithmic in the size of the container in general, but amortized constant if the new element is inserted just before &lt;code&gt;hint&lt;/code&gt;.</source>
          <target state="translated">コンテナーのサイズは通常対数ですが、 &lt;code&gt;hint&lt;/code&gt; 直前に新しい要素が挿入された場合は定数を償却します。</target>
        </trans-unit>
        <trans-unit id="e9067460d73ae825ba6714018f7615492aa47865" translate="yes" xml:space="preserve">
          <source>Logarithmic in the size of the container plus linear in the number of the elements found.</source>
          <target state="translated">容器の大きさの対数と、検出された要素の数の線形。</target>
        </trans-unit>
        <trans-unit id="5e5188bc43c4d9b70c9cf627bba80326dacae4d7" translate="yes" xml:space="preserve">
          <source>Logarithmic in the size of the container.</source>
          <target state="translated">容器の大きさで対数。</target>
        </trans-unit>
        <trans-unit id="73b7130da3c78f3712cf8aced2ce52c3b3bb17f4" translate="yes" xml:space="preserve">
          <source>Logarithmic number of comparisons plus the complexity of &lt;code&gt;Container::emplace_back&lt;/code&gt;.</source>
          <target state="translated">比較の対数と &lt;code&gt;Container::emplace_back&lt;/code&gt; 複雑さ。</target>
        </trans-unit>
        <trans-unit id="58b1b6caf7fe5a42c100cf12c95e7a3c6866c24d" translate="yes" xml:space="preserve">
          <source>Logarithmic number of comparisons plus the complexity of &lt;code&gt;Container::pop_back&lt;/code&gt;.</source>
          <target state="translated">比較の対数と &lt;code&gt;Container::pop_back&lt;/code&gt; 複雑さ。</target>
        </trans-unit>
        <trans-unit id="1c3cf65301fe13dbcf804ac556fa2da47b162343" translate="yes" xml:space="preserve">
          <source>Logarithmic number of comparisons plus the complexity of &lt;code&gt;Container::push_back&lt;/code&gt;.</source>
          <target state="translated">比較の対数と &lt;code&gt;Container::push_back&lt;/code&gt; 複雑さ。</target>
        </trans-unit>
        <trans-unit id="c5d5c5fb2a8798e4f962780fba63386de96b07b6" translate="yes" xml:space="preserve">
          <source>Logical AND</source>
          <target state="translated">論理 AND</target>
        </trans-unit>
        <trans-unit id="e9b0aefdf7ed2c67abbfc572bbc5743979450674" translate="yes" xml:space="preserve">
          <source>Logical OR</source>
          <target state="translated">論理和</target>
        </trans-unit>
        <trans-unit id="ab411408fbd29ad68b53700b2e7826c03e6703f0" translate="yes" xml:space="preserve">
          <source>Logical operations</source>
          <target state="translated">論理演算</target>
        </trans-unit>
        <trans-unit id="4654c9b2b818a080fc48b5bd5a47f40691d6eb0d" translate="yes" xml:space="preserve">
          <source>Logical operator type traits</source>
          <target state="translated">論理演算子型の特徴</target>
        </trans-unit>
        <trans-unit id="a5da835bb3de6e8855950138a28dea23921e5aaa" translate="yes" xml:space="preserve">
          <source>Logical operators</source>
          <target state="translated">論理演算子</target>
        </trans-unit>
        <trans-unit id="7015ab4fc4ea24735dbe884238cc1b54bf915eca" translate="yes" xml:space="preserve">
          <source>Lookup</source>
          <target state="translated">Lookup</target>
        </trans-unit>
        <trans-unit id="9df7d9cefaf31feb4f6b24d79bad8d071fcb03de" translate="yes" xml:space="preserve">
          <source>Lookup rules</source>
          <target state="translated">ルックアップルール</target>
        </trans-unit>
        <trans-unit id="cab4a2117d8f9c8117e26920652c300561edd076" translate="yes" xml:space="preserve">
          <source>Low level memory management</source>
          <target state="translated">低レベルのメモリ管理</target>
        </trans-unit>
        <trans-unit id="bd3740e01fb4f11441f7e643cef68b3881c9e618" translate="yes" xml:space="preserve">
          <source>Low-level memory management utilities</source>
          <target state="translated">低レベルのメモリ管理ユーティリティ</target>
        </trans-unit>
        <trans-unit id="3769a18de297ff08768c9476ca9be5fa9f7cb3ea" translate="yes" xml:space="preserve">
          <source>Lowercase version of &lt;code&gt;ch&lt;/code&gt; or unmodified &lt;code&gt;ch&lt;/code&gt; if no lowercase version is listed in the current C locale.</source>
          <target state="translated">小文字バージョンの &lt;code&gt;ch&lt;/code&gt; 、または現在のCロケールに小文字バージョンがリストされていない場合は変更されていない &lt;code&gt;ch&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="befc5b417a1ee8ed446b10341ff5e771b51fffbc" translate="yes" xml:space="preserve">
          <source>Lvalue and rvalue references</source>
          <target state="translated">Lvalue と rvalue を参照します。</target>
        </trans-unit>
        <trans-unit id="3327811a28b6dc92897c7bd726a6ee4cb5edaa0f" translate="yes" xml:space="preserve">
          <source>Lvalue references</source>
          <target state="translated">L値参照</target>
        </trans-unit>
        <trans-unit id="a213708ed1a0d723b5b6a805c274cf9bff5d1146" translate="yes" xml:space="preserve">
          <source>Lvalue references can be used to alias an existing object (optionally with different cv-qualification):</source>
          <target state="translated">Lvalue 参照は,既存のオブジェクトの別名として利用することができます(オプションで,異なる cv-qualification を指定することもできます).</target>
        </trans-unit>
        <trans-unit id="08f35d31d723fb0a56bd4bcfd14b0053b8eb609f" translate="yes" xml:space="preserve">
          <source>Lvalue to rvalue conversion</source>
          <target state="translated">L値からr値への変換</target>
        </trans-unit>
        <trans-unit id="43e928199e03709bb299f1077cb46f632464d9e4" translate="yes" xml:space="preserve">
          <source>Lvalue to rvalue conversion (e.g. function call to a function that takes a value).</source>
          <target state="translated">Lvalueからrvalueへの変換(値を取る関数呼び出しなど)。</target>
        </trans-unit>
        <trans-unit id="41bc669bb535a7e446d5f35250e723d4b222463a" translate="yes" xml:space="preserve">
          <source>M, ..., a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de4e334f963f744c52ad0d25e83c8a8e959ae90" translate="yes" xml:space="preserve">
          <source>M, ..., b</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06f1b8f093c7cc11caa03599d07adbc807edfe6" translate="yes" xml:space="preserve">
          <source>MACRON</source>
          <target state="translated">MACRON</target>
        </trans-unit>
        <trans-unit id="850947f3d010de98ad370f2f73bc49ca69c2b7c5" translate="yes" xml:space="preserve">
          <source>MATH_ERRNO</source>
          <target state="translated">MATH_ERRNO</target>
        </trans-unit>
        <trans-unit id="74b7d4ceae8b4d3f14a2b48ce0dd4a45027ad623" translate="yes" xml:space="preserve">
          <source>MATH_ERRNO, MATH_ERREXCEPT, math_errhandling</source>
          <target state="translated">MATH_ERRNO,MATH_ERREXCEPT,math_errhandling</target>
        </trans-unit>
        <trans-unit id="0b26b4988457eebaa5d41abd9af85e69645b9b63" translate="yes" xml:space="preserve">
          <source>MB_CUR_MAX</source>
          <target state="translated">MB_CUR_MAX</target>
        </trans-unit>
        <trans-unit id="6bfcb6f4e22f270971b8066d4c18f2a3c153409a" translate="yes" xml:space="preserve">
          <source>MB_LEN_MAX</source>
          <target state="translated">MB_LEN_MAX</target>
        </trans-unit>
        <trans-unit id="a3de7ac6ae1a36761d2bb7db4fb097d2d59a0d43" translate="yes" xml:space="preserve">
          <source>MIDDLE DOT - MASCULINE ORDINAL INDICATOR</source>
          <target state="translated">MIDDLE DOT-MASCULINE ORDINAL INDICATOR</target>
        </trans-unit>
        <trans-unit id="0beb871a186f42594bcfbcc8916c8146ec93832e" translate="yes" xml:space="preserve">
          <source>MOESI protocol</source>
          <target state="translated">MOESIプロトコル</target>
        </trans-unit>
        <trans-unit id="1240ae02c583b36398d148ddc49074ea0ee43ffd" translate="yes" xml:space="preserve">
          <source>MSVC function &lt;code&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/e9b52ceh.aspx&quot;&gt;_control87()&lt;/a&gt;&lt;/code&gt; enables trapping of the floating-point exceptions, which generates a hardware exception, which can be converted to C++ exceptions with &lt;code&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/5z4bw5h5.aspx&quot;&gt;_set_se_translator&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">MSVC関数 &lt;code&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/e9b52ceh.aspx&quot;&gt;_control87()&lt;/a&gt;&lt;/code&gt; は、浮動小数点例外のトラップを有効にし &lt;code&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/5z4bw5h5.aspx&quot;&gt;_set_se_translator&lt;/a&gt;&lt;/code&gt; 。これにより、ハードウェア例外が生成され、_set_se_translatorを使用してC ++例外に変換できます。</target>
        </trans-unit>
        <trans-unit id="b9d6fc761949b6e88739a8a2fe091585d2e12ec1" translate="yes" xml:space="preserve">
          <source>Macro (and function) that saves (and jumps) to an execution context</source>
          <target state="translated">実行コンテキストに保存(ジャンプ)するマクロ(および関数</target>
        </trans-unit>
        <trans-unit id="54b23dc205b8e1437102e969e0df1e0a65dc7096" translate="yes" xml:space="preserve">
          <source>Macro Constants</source>
          <target state="translated">マクロ定数</target>
        </trans-unit>
        <trans-unit id="fc1086b9f1dd6c6f26d36bd306a911dfb2aafce8" translate="yes" xml:space="preserve">
          <source>Macro constants</source>
          <target state="translated">マクロ定数</target>
        </trans-unit>
        <trans-unit id="2f38b57c7b725c5c9e818e78c55ee7bbba8563a8" translate="yes" xml:space="preserve">
          <source>Macro containing the last error number</source>
          <target state="translated">最後のエラー番号を含むマクロ</target>
        </trans-unit>
        <trans-unit id="5b3a11a44726526a8271fd69a51140ab465210aa" translate="yes" xml:space="preserve">
          <source>Macro name</source>
          <target state="translated">マクロ名</target>
        </trans-unit>
        <trans-unit id="899bd694d29ace1be956ab35177075021977560b" translate="yes" xml:space="preserve">
          <source>Macros</source>
          <target state="translated">Macros</target>
        </trans-unit>
        <trans-unit id="f314f8acf113225093359e0691186dc638458d3f" translate="yes" xml:space="preserve">
          <source>Macros for data types</source>
          <target state="translated">データ型のマクロ</target>
        </trans-unit>
        <trans-unit id="ac71fe79e397b89328648d619d9408673bd60d02" translate="yes" xml:space="preserve">
          <source>Main classes</source>
          <target state="translated">主なクラス</target>
        </trans-unit>
        <trans-unit id="e4ac70ee360a262794e6e975e302e13279210903" translate="yes" xml:space="preserve">
          <source>Main function</source>
          <target state="translated">主な機能</target>
        </trans-unit>
        <trans-unit id="99859e4cd4b9cce2f83ab42dc587698a3602b044" translate="yes" xml:space="preserve">
          <source>Maintenance overhead</source>
          <target state="translated">維持管理費</target>
        </trans-unit>
        <trans-unit id="b74e5fa51321d77a94a62fd68d1ad7b564b98a8d" translate="yes" xml:space="preserve">
          <source>Make &lt;a href=&quot;language/noexcept_spec&quot;&gt;exception specifications&lt;/a&gt; be part of the type system</source>
          <target state="translated">メイクの&lt;a href=&quot;language/noexcept_spec&quot;&gt;例外仕様は、&lt;/a&gt;型システムの一部であります</target>
        </trans-unit>
        <trans-unit id="6c08c5931ae98077d74c2fcd13d3f199daa1d289" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;f&lt;/code&gt; the new global &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt; and returns the previously installed &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">作り &lt;code&gt;f&lt;/code&gt; の新しいグローバル &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt; 戻り、以前にインストール &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65917fbeb3c6129587b44cf1b845bea5476e82d9" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;f&lt;/code&gt; the new global terminate handler function and returns the previously installed &lt;code&gt;&lt;a href=&quot;terminate_handler&quot;&gt;std::terminate_handler&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">MAKES &lt;code&gt;f&lt;/code&gt; 新しいグローバル終了ハンドラ関数と、以前にインストールし返す &lt;code&gt;&lt;a href=&quot;terminate_handler&quot;&gt;std::terminate_handler&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b87d9c9486d3bcd72b7d0fe8b4ab7ceb6d812eec" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;new_p&lt;/code&gt; the new global new-handler function and returns the previously installed new-handler.</source>
          <target state="translated">MAKESは &lt;code&gt;new_p&lt;/code&gt; 新しいグローバル新しいハンドラ関数を、以前にインストールされた新しいハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="ec8c940401a44da0f32dd9b030215fd134a7013f" translate="yes" xml:space="preserve">
          <source>Makes the most recently extracted character available again.</source>
          <target state="translated">直近で抽出された文字を再び利用可能にします。</target>
        </trans-unit>
        <trans-unit id="96fe058e3a49999026b621bd5db51a5c913b4002" translate="yes" xml:space="preserve">
          <source>Making &lt;code&gt;&lt;a href=&quot;memory/owner_less&quot;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt; more flexible (&lt;a href=&quot;memory/owner_less_void&quot;&gt;&lt;code&gt;std::owner_less&amp;lt;void&amp;gt;&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;memory/owner_less&quot;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt; より柔軟な（&lt;a href=&quot;memory/owner_less_void&quot;&gt; &lt;code&gt;std::owner_less&amp;lt;void&amp;gt;&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="0c16d51463aefe216e81a0bd813cbff2e451ca3d" translate="yes" xml:space="preserve">
          <source>Making a virtual call to a pure virtual function from a constructor or the destructor of the abstract class is undefined behavior (regardless of whether it has a definition or not).</source>
          <target state="translated">抽象クラスのコンストラクタやデストラクタから純粋な仮想関数を仮想的に呼び出すことは、定義されていない動作です(定義があるかどうかに関わらず)。</target>
        </trans-unit>
        <trans-unit id="6b8f8ae2577f5b38158790bbc573b214aa51aaaa" translate="yes" xml:space="preserve">
          <source>Making non-modifying sequence operations more robust (two-range overloads for &lt;code&gt;&lt;a href=&quot;algorithm/mismatch&quot;&gt;std::mismatch&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;algorithm/equal&quot;&gt;std::equal&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;algorithm/is_permutation&quot;&gt;std::is_permutation&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">非変更シーケンス操作をより堅牢にする（ &lt;code&gt;&lt;a href=&quot;algorithm/mismatch&quot;&gt;std::mismatch&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;algorithm/equal&quot;&gt;std::equal&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;algorithm/is_permutation&quot;&gt;std::is_permutation&lt;/a&gt;&lt;/code&gt; 2つの範囲のオーバーロード）</target>
        </trans-unit>
        <trans-unit id="093902494fcace52d152c76c43c81becca401b50" translate="yes" xml:space="preserve">
          <source>Manages format flags.</source>
          <target state="translated">フォーマットフラグを管理します。</target>
        </trans-unit>
        <trans-unit id="9b66e0ff5e969314f7b51fc9d7ca3a9cf4a3c17f" translate="yes" xml:space="preserve">
          <source>Manages the associated distribution parameter set.</source>
          <target state="translated">関連する分布パラメータセットを管理します。</target>
        </trans-unit>
        <trans-unit id="f62964b0cba3090f15f7c7c169b11e039cc6021f" translate="yes" xml:space="preserve">
          <source>Manages the associated stream buffer.</source>
          <target state="translated">関連するストリームバッファを管理します。</target>
        </trans-unit>
        <trans-unit id="aa5c32a8e138595d4766f2b368480e3dea10b879" translate="yes" xml:space="preserve">
          <source>Manages the contents of the underlying string object.</source>
          <target state="translated">下位の文字列オブジェクトの内容を管理します。</target>
        </trans-unit>
        <trans-unit id="57d385100206298ef30b732a8a74a273e12fee69" translate="yes" xml:space="preserve">
          <source>Manages the file position state.</source>
          <target state="translated">ファイルの位置状態を管理します。</target>
        </trans-unit>
        <trans-unit id="4b0c6baba7868d541df5a1d3ef12c5d69bb016de" translate="yes" xml:space="preserve">
          <source>Manages the fill character used to pad the output conversions to the specified field width.</source>
          <target state="translated">指定されたフィールド幅に出力変換をパッドするために使用される塗りつぶし文字を管理します。</target>
        </trans-unit>
        <trans-unit id="fc74e82d452fdfbe907a8fe1326c0b7d7df02587" translate="yes" xml:space="preserve">
          <source>Manages the floating-point rounding direction.</source>
          <target state="translated">浮動小数点の丸め方向を管理します。</target>
        </trans-unit>
        <trans-unit id="0e6eaddb68bc270047cd5aa7f3b44d9637620333" translate="yes" xml:space="preserve">
          <source>Manages the maximum load factor (number of elements per bucket). The container automatically increases the number of buckets if the load factor exceeds this threshold.</source>
          <target state="translated">最大負荷率(バケットあたりの要素数)を管理します。コンテナは、負荷率がこのしきい値を超えると自動的にバケットの数を増やします。</target>
        </trans-unit>
        <trans-unit id="daa55aac6e6edc66679c2eb334f89dce6b539bde" translate="yes" xml:space="preserve">
          <source>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain input operations.</source>
          <target state="translated">特定の出力操作で生成する最小文字数と、特定の入力操作で生成する最大文字数を管理します。</target>
        </trans-unit>
        <trans-unit id="9111786b8ae1322461661a6b8d566d1d3675a5ed" translate="yes" xml:space="preserve">
          <source>Manages the precision (i.e. how many digits are generated) of floating point output performed by &lt;code&gt;&lt;a href=&quot;../../locale/num_put/put&quot;&gt;std::num_put::do_put&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../locale/num_put/put&quot;&gt;std::num_put::do_put&lt;/a&gt;&lt;/code&gt; によって実行される浮動小数点出力の精度（つまり、生成される桁数）を管理します。</target>
        </trans-unit>
        <trans-unit id="887d2a92b7896a60b0850785e37481b9b04bbad8" translate="yes" xml:space="preserve">
          <source>Manages the status of the floating-point environment.</source>
          <target state="translated">浮動小数点環境の状態を管理します。</target>
        </trans-unit>
        <trans-unit id="25d259883659a20164c7acf68339bc48d8362b03" translate="yes" xml:space="preserve">
          <source>Manages the tied stream. A tied stream is an output stream which is synchronized with the sequence controlled by the stream buffer (&lt;code&gt;&lt;a href=&quot;rdbuf&quot;&gt;rdbuf()&lt;/a&gt;&lt;/code&gt;), that is, &lt;code&gt;flush()&lt;/code&gt; is called on the tied stream before any input/output operation on &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">結合ストリームを管理します。結合ストリームは、ストリームバッファー（ &lt;code&gt;&lt;a href=&quot;rdbuf&quot;&gt;rdbuf()&lt;/a&gt;&lt;/code&gt; ）によって制御されるシーケンスと同期する出力ストリームです。つまり、 &lt;code&gt;*this&lt;/code&gt; での入出力操作の前に、結合ストリームで &lt;code&gt;flush()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e42c0bcf36c095bb9efb82dcb299ae099631d5a9" translate="yes" xml:space="preserve">
          <source>Manipulators</source>
          <target state="translated">Manipulators</target>
        </trans-unit>
        <trans-unit id="aa5986c6a9620c6b6e1856b7e2e600fe262ff7db" translate="yes" xml:space="preserve">
          <source>Manipulators are helper functions that make it possible to control input/output streams using &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; or &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">マニピュレーターは、 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; または &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; を使用して入出力ストリームを制御できるようにするヘルパー関数です。</target>
        </trans-unit>
        <trans-unit id="0ce8863df9e71406305b90f9ea018e8bb9b2e809" translate="yes" xml:space="preserve">
          <source>Many classes in the standard library overload &lt;code&gt;operator()&lt;/code&gt; to be used as function objects.</source>
          <target state="translated">標準ライブラリの多くのクラスは、関数オブジェクトとして使用される &lt;code&gt;operator()&lt;/code&gt; をオーバーロードします。</target>
        </trans-unit>
        <trans-unit id="0edc88ddffd739223885d2fe9cd8f80ed597ff78" translate="yes" xml:space="preserve">
          <source>Many compilers also implement the non-standard &lt;a href=&quot;impl&quot;&gt;&lt;code&gt;pragma&lt;/code&gt;&lt;/a&gt;&lt;code&gt;#pragma once&lt;/code&gt; with similar effects: it disables processing of a file if the same file (where file identity is determined in OS-specific way) has already been included.</source>
          <target state="translated">多くのコンパイラーは、非標準&lt;a href=&quot;impl&quot;&gt; &lt;code&gt;pragma&lt;/code&gt; &lt;/a&gt; &lt;code&gt;#pragma once&lt;/code&gt; 実装して同様の効果をもたらします。同じファイル（ファイルIDはOS固有の方法で決定される）がすでに含まれている場合、ファイルの処理を無効にします。</target>
        </trans-unit>
        <trans-unit id="6f405e95e132707ef26ac64e6bc3fe82236e30e2" translate="yes" xml:space="preserve">
          <source>Many compilers issue &quot;strict aliasing&quot; warnings in such cases, even though technically such constructs run afoul of something other than the paragraph commonly known as the &quot;strict aliasing rule&quot;.</source>
          <target state="translated">多くのコンパイラはこのような場合に「厳密なエイリアシング」の警告を出しますが、技術的には「厳密なエイリアシングルール」として一般的に知られている段落以外の何かに違反しているにもかかわらずです。</target>
        </trans-unit>
        <trans-unit id="e9f40adecaac3afe40b8b2e36b992f8de08d6cdf" translate="yes" xml:space="preserve">
          <source>Many implementations also provide &lt;a href=&quot;https://en.wikipedia.org/wiki/Total_order#Strict_total_order&quot;&gt;strict total ordering&lt;/a&gt; of pointers of random origin, e.g. if they are implemented as addresses within continuous virtual address space. Those implementations that do not (e.g. where not all bits of the pointer are part of a memory address and have to be ignored for comparison, or an additional calculation is required or otherwise pointer and integer is not a 1 to 1 relationship), provide a specialization of &lt;code&gt;&lt;a href=&quot;../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&lt;/code&gt; for pointers that has that guarantee. This makes it possible to use all pointers of random origin as keys in standard associative containers such as &lt;code&gt;&lt;a href=&quot;../container/set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../container/map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">多くの実装は、ランダムな原点のポインタの&lt;a href=&quot;https://en.wikipedia.org/wiki/Total_order#Strict_total_order&quot;&gt;厳密な合計順序&lt;/a&gt;も提供します。たとえば、それらが連続した仮想アドレス空間内のアドレスとして実装されている場合です。そうでない実装（たとえば、ポインタのすべてのビットがメモリアドレスの一部ではなく、比較のために無視する必要がある場合、または追加の計算が必要な場合、またはポインタと整数が1対1の関係ではない場合）は、 &lt;code&gt;&lt;a href=&quot;../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&lt;/code&gt; 特殊化は、それが保証されているポインタには適していません。これにより、 &lt;code&gt;&lt;a href=&quot;../container/set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../container/map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt; などの標準的な連想コンテナで、ランダムな原点のすべてのポインタをキーとして使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="6df4f43ab58f853f38804bd87ed02d4813b8bfca" translate="yes" xml:space="preserve">
          <source>Many implementations do not update the get area in &lt;code&gt;seekpos()&lt;/code&gt;, delegating to &lt;code&gt;&lt;a href=&quot;../basic_streambuf/underflow&quot;&gt;underflow()&lt;/a&gt;&lt;/code&gt; that is called by the next &lt;code&gt;&lt;a href=&quot;../basic_streambuf/sgetc&quot;&gt;sgetc()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">多くの実装は &lt;code&gt;seekpos()&lt;/code&gt; の get領域を更新せず、次の &lt;code&gt;&lt;a href=&quot;../basic_streambuf/sgetc&quot;&gt;sgetc()&lt;/a&gt;&lt;/code&gt; によって呼び出される &lt;code&gt;&lt;a href=&quot;../basic_streambuf/underflow&quot;&gt;underflow()&lt;/a&gt;&lt;/code&gt; に委譲します。</target>
        </trans-unit>
        <trans-unit id="f68fed89e22619f36d034e4ae6b5e591f90adb28" translate="yes" xml:space="preserve">
          <source>Many low-level OS APIs for directory traversal retrieve file attributes along with the next directory entry. The constructors and the non-const member functions of &lt;code&gt;directory_iterator&lt;/code&gt; store these attributes, if any, in the pointed-to &lt;a href=&quot;../directory_entry&quot;&gt;&lt;code&gt;directory_entry&lt;/code&gt;&lt;/a&gt; without calling &lt;a href=&quot;refresh&quot;&gt;&lt;code&gt;directory_entry::refresh&lt;/code&gt;&lt;/a&gt;, which makes it possible to examine the attributes of the directory entries as they are being iterated over, without making additional system calls.</source>
          <target state="translated">ディレクトリトラバーサル用の多くの低レベルOS APIは、次のディレクトリエントリとともにファイル属性を取得します。コンストラクタとの非constメンバ関数 &lt;code&gt;directory_iterator&lt;/code&gt; の店これらの属性があれば、尖った-の中&lt;a href=&quot;../directory_entry&quot;&gt; &lt;code&gt;directory_entry&lt;/code&gt; &lt;/a&gt;呼び出さず&lt;a href=&quot;refresh&quot;&gt; &lt;code&gt;directory_entry::refresh&lt;/code&gt; &lt;/a&gt;彼らは繰り返し処理されているとして、それが可能なディレクトリエントリの属性を調べることになり、追加のシステムコールを行うことなく。</target>
        </trans-unit>
        <trans-unit id="039f47ebbed9ac7270772eb78d294ff20051a865" translate="yes" xml:space="preserve">
          <source>Many low-level OS APIs for directory traversal retrieve file attributes along with the next directory entry. The constructors and the non-const member functions of &lt;code&gt;directory_iterator&lt;/code&gt; store these attributes, if any, in the pointed-to &lt;a href=&quot;../directory_entry&quot;&gt;&lt;code&gt;directory_entry&lt;/code&gt;&lt;/a&gt; without calling &lt;strong&gt;&lt;code&gt;directory_entry::refresh&lt;/code&gt;&lt;/strong&gt;, which makes it possible to examine the attributes of the directory entries as they are being iterated over, without making additional system calls.</source>
          <target state="translated">ディレクトリトラバーサル用の多くの低レベルOS APIは、次のディレクトリエントリとともにファイル属性を取得します。コンストラクタとの非constメンバ関数 &lt;code&gt;directory_iterator&lt;/code&gt; の店これらの属性があれば、尖った-の中&lt;a href=&quot;../directory_entry&quot;&gt; &lt;code&gt;directory_entry&lt;/code&gt; &lt;/a&gt;呼び出さず&lt;strong&gt; &lt;code&gt;directory_entry::refresh&lt;/code&gt; &lt;/strong&gt;彼らは繰り返し処理されているとして、それが可能なディレクトリエントリの属性を調べることになり、追加のシステムコールを行うことなく。</target>
        </trans-unit>
        <trans-unit id="3ed89c2f28cb830995daa3a7b4042d44d35eeacb" translate="yes" xml:space="preserve">
          <source>Many low-level OS APIs for directory traversal retrieve file attributes along with the next directory entry. The constructors and the non-const member functions of &lt;code&gt;directory_iterator&lt;/code&gt; store these attributes, if any, in the pointed-to &lt;a href=&quot;directory_entry&quot;&gt;&lt;code&gt;directory_entry&lt;/code&gt;&lt;/a&gt; without calling &lt;a href=&quot;directory_entry/refresh&quot;&gt;&lt;code&gt;directory_entry::refresh&lt;/code&gt;&lt;/a&gt;, which makes it possible to examine the attributes of the directory entries as they are being iterated over, without making additional system calls.</source>
          <target state="translated">ディレクトリトラバーサル用の多くの低レベルOS APIは、次のディレクトリエントリとともにファイル属性を取得します。コンストラクタとの非constメンバ関数 &lt;code&gt;directory_iterator&lt;/code&gt; の店これらの属性があれば、尖った-の中&lt;a href=&quot;directory_entry&quot;&gt; &lt;code&gt;directory_entry&lt;/code&gt; &lt;/a&gt;呼び出さず&lt;a href=&quot;directory_entry/refresh&quot;&gt; &lt;code&gt;directory_entry::refresh&lt;/code&gt; &lt;/a&gt;彼らは繰り返し処理されているとして、それが可能なディレクトリエントリの属性を調べることになり、追加のシステムコールを行うことなく。</target>
        </trans-unit>
        <trans-unit id="e5aebdb8c7063bd86b2ac2bb9180c0f2ca620fad" translate="yes" xml:space="preserve">
          <source>Many standard library functions (for example, many algorithms) expect their arguments to satisfy Swappable, which means that any time the standard library performs a swap, it uses the equivalent of &lt;code&gt;using &lt;a href=&quot;../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;; swap(t, u);&lt;/code&gt;.</source>
          <target state="translated">多くの標準ライブラリ関数（たとえば、多くのアルゴリズム）は、引数がSwappableを満たすことを期待しています。つまり、標準ライブラリがスワップを実行するときは常に、 &lt;code&gt;using &lt;a href=&quot;../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;; swap(t, u);&lt;/code&gt; を使用するのと同等の機能を使用します。swap（t、u）; 。</target>
        </trans-unit>
        <trans-unit id="5121f00841245e1a12c2ae4fef43200d5c0249fe" translate="yes" xml:space="preserve">
          <source>Many standard library functions expect their arguments to satisfy ValueSwappable, which means that any time the standard library performs a swap, it uses the equivalent of &lt;code&gt;using &lt;a href=&quot;../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;; swap(*iter1, *iter2);&lt;/code&gt;.</source>
          <target state="translated">多くの標準ライブラリ関数は、引数がValueSwappableを満たすことを期待しています。つまり、標準ライブラリがスワップを実行するときは常に、 &lt;code&gt;using &lt;a href=&quot;../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;; swap(*iter1, *iter2);&lt;/code&gt; を使用するのと同等の機能を使用します。swap（* iter1、* iter2）; 。</target>
        </trans-unit>
        <trans-unit id="afe6902aeefe49078fe8050bd00528c238507028" translate="yes" xml:space="preserve">
          <source>Maps the wide character &lt;code&gt;wc&lt;/code&gt; using the current C locale's LC_CTYPE mapping category identified by &lt;code&gt;desc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;desc&lt;/code&gt; で識別される現在のCロケールのLC_CTYPEマッピングカテゴリを使用して、ワイド文字 &lt;code&gt;wc&lt;/code&gt; をマップします。</target>
        </trans-unit>
        <trans-unit id="4077ecc006514db344c55f8c4fad2c745c0130ce" translate="yes" xml:space="preserve">
          <source>Marks a declaration, a group of declarations, or another module as exported by the current module.</source>
          <target state="translated">宣言、宣言のグループ、または現在のモジュールがエクスポートした別のモジュールをマークします。</target>
        </trans-unit>
        <trans-unit id="b756154598ee707bf908cd000d9935386991975f" translate="yes" xml:space="preserve">
          <source>Matches a literal &lt;code&gt;%&lt;/code&gt; character.</source>
          <target state="translated">リテラル &lt;code&gt;%&lt;/code&gt; 文字と一致します。</target>
        </trans-unit>
        <trans-unit id="72f947b49a5a8e988f9298c168a0e3f58111d4e5" translate="yes" xml:space="preserve">
          <source>Matches one whitespace character.</source>
          <target state="translated">空白文字1文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="fcfacbcdbc0dc12100a2ddcea744584b78974f4f" translate="yes" xml:space="preserve">
          <source>Matches zero or one whitespace character.</source>
          <target state="translated">0文字または1文字の空白文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="a188c6effe4bde401e7ad28544fc6e87a9daffac" translate="yes" xml:space="preserve">
          <source>Matching of &lt;a href=&quot;language/template_parameters#Template_template_arguments&quot;&gt;template template-arguments&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;language/template_parameters#Template_template_arguments&quot;&gt;テンプレートtemplate-argumentsの&lt;/a&gt;マッチング</target>
        </trans-unit>
        <trans-unit id="20eb57cf8e0dada9d1ba105b859145de9af95dd7" translate="yes" xml:space="preserve">
          <source>Mathematical definition of hyperbolic cosine is cosh z =</source>
          <target state="translated">双曲余弦の数学的定義は、cosh z=cosh</target>
        </trans-unit>
        <trans-unit id="26750d755fd0345482bcbffe431aa399db954d60" translate="yes" xml:space="preserve">
          <source>Mathematical definition of hyperbolic sine is sinh z =</source>
          <target state="translated">双曲サインの数学的定義は sinh z=sinh</target>
        </trans-unit>
        <trans-unit id="e84aec3fc0130942848a9f7d933b06ea09b78dbd" translate="yes" xml:space="preserve">
          <source>Mathematical definition of hyperbolic tangent is tanh z =</source>
          <target state="translated">双曲正接の数学的定義は tanh z=です。</target>
        </trans-unit>
        <trans-unit id="cdb41af16e4d375b018b261d1a2817a89b9975b7" translate="yes" xml:space="preserve">
          <source>Mathematical functions and types</source>
          <target state="translated">数学関数と種類</target>
        </trans-unit>
        <trans-unit id="e69584469298924788f58d14e045618717167ab1" translate="yes" xml:space="preserve">
          <source>Mathematical special functions</source>
          <target state="translated">数学的特殊関数</target>
        </trans-unit>
        <trans-unit id="86c50200efef0be47369777679929f798cf2e81a" translate="yes" xml:space="preserve">
          <source>Mathematical special functions for C++17</source>
          <target state="translated">C++のための数学的特殊関数17</target>
        </trans-unit>
        <trans-unit id="5d307dd0d56fc9ce2efcd46807c5cc26c88385c1" translate="yes" xml:space="preserve">
          <source>Mathematics argument out of domain of function</source>
          <target state="translated">関数の領域外の数学引数</target>
        </trans-unit>
        <trans-unit id="f8777efcd5a7cb7cda3c0f39eeda95994a1a15e9" translate="yes" xml:space="preserve">
          <source>Maxcode</source>
          <target state="translated">Maxcode</target>
        </trans-unit>
        <trans-unit id="d3dc367122aa7293e5afbfae55b89a3439308677" translate="yes" xml:space="preserve">
          <source>Maximum number of buckets.</source>
          <target state="translated">バケツの最大数。</target>
        </trans-unit>
        <trans-unit id="149a459f54b376ce18459ec98c8686438b039d4d" translate="yes" xml:space="preserve">
          <source>Maximum number of characters.</source>
          <target state="translated">最大文字数です。</target>
        </trans-unit>
        <trans-unit id="40479cd9e5c70abfcec7f229a5343100ee1e982b" translate="yes" xml:space="preserve">
          <source>Maximum number of elements.</source>
          <target state="translated">要素の最大数。</target>
        </trans-unit>
        <trans-unit id="74c9f71fbcac6b3790990dc6749cb13cfcb51bec" translate="yes" xml:space="preserve">
          <source>Maximum number of submatches.</source>
          <target state="translated">サブマッチの最大数。</target>
        </trans-unit>
        <trans-unit id="c386253a5eac67332c4d54f0c89f27e31946d1fa" translate="yes" xml:space="preserve">
          <source>May also throw &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if additional memory required for internal data structures cannot be allocated.</source>
          <target state="translated">内部データ構造に必要な追加のメモリを割り当てることができない場合、 &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; スローすることもあります。</target>
        </trans-unit>
        <trans-unit id="3b12ceeda37fe6a0712324b0b075665414e87d72" translate="yes" xml:space="preserve">
          <source>May appear in the declaration of a non-static &lt;a href=&quot;data_members&quot;&gt;class members&lt;/a&gt; of non-reference non-const type:</source>
          <target state="translated">非参照非const型の非静的&lt;a href=&quot;data_members&quot;&gt;クラスメンバー&lt;/a&gt;の宣言に表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="b266289267f1b69728db3ede6cf1835744b3fe8f" translate="yes" xml:space="preserve">
          <source>May be compiled as (&lt;a href=&quot;https://gcc.godbolt.org/z/6itUO1&quot;&gt;demo&lt;/a&gt;).</source>
          <target state="translated">（&lt;a href=&quot;https://gcc.godbolt.org/z/6itUO1&quot;&gt;demo&lt;/a&gt;）としてコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="6c7f6ea88007fac3556846ed6f0bd902e3dfa12f" translate="yes" xml:space="preserve">
          <source>May be compiled as (&lt;a href=&quot;https://godbolt.org/z/QYZvsl&quot;&gt;demo&lt;/a&gt;).</source>
          <target state="translated">（&lt;a href=&quot;https://godbolt.org/z/QYZvsl&quot;&gt;demo&lt;/a&gt;）としてコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="70f7c1e91932b1a70687c4ebae101b3db1ba5098" translate="yes" xml:space="preserve">
          <source>May be compiled as (&lt;a href=&quot;https://godbolt.org/z/e2bC84&quot;&gt;demo&lt;/a&gt;).</source>
          <target state="translated">（&lt;a href=&quot;https://godbolt.org/z/e2bC84&quot;&gt;demo&lt;/a&gt;）としてコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="17b2c58fc2da61849ab101eba953459e4980b963" translate="yes" xml:space="preserve">
          <source>May only be applied to a &lt;a href=&quot;../statements#Expression_statements&quot;&gt;null statement&lt;/a&gt; to create a</source>
          <target state="translated">&lt;a href=&quot;../statements#Expression_statements&quot;&gt;nullステートメント&lt;/a&gt;にのみ適用して、</target>
        </trans-unit>
        <trans-unit id="5b24b967e2517fdf19db9e1d07428b9424c7e88d" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt;, may also propagate exceptions thrown by &lt;a href=&quot;../unique_lock/lock&quot;&gt;&lt;code&gt;lock.lock()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../unique_lock/unlock&quot;&gt;&lt;code&gt;lock.unlock()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt; スローする場合があります。また、&lt;a href=&quot;../unique_lock/lock&quot;&gt; &lt;code&gt;lock.lock()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../unique_lock/unlock&quot;&gt; &lt;code&gt;lock.unlock()&lt;/code&gt; &lt;/a&gt;によってスローされた例外を伝播する場合もあります。</target>
        </trans-unit>
        <trans-unit id="82f82cbc23b684cfee57e315e7faddcf81a5e024" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt;, may also propagate exceptions thrown by &lt;code&gt;lock.lock()&lt;/code&gt; or &lt;code&gt;lock.unlock()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt; スローする場合があります。また、 &lt;code&gt;lock.lock()&lt;/code&gt; または &lt;code&gt;lock.unlock()&lt;/code&gt; によってスローされた例外を伝播する場合もあります。</target>
        </trans-unit>
        <trans-unit id="2c170df4323127a54ff75977e5aea172641a66b1" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; if an exception is thrown during output.</source>
          <target state="translated">出力中に例外がスローされると、 &lt;code&gt;&lt;a href=&quot;../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; スローする場合があります。</target>
        </trans-unit>
        <trans-unit id="9537e9cfb9ff89dce06742cc44b6f80d289fe969" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; on stream errors.</source>
          <target state="translated">ストリームエラーで &lt;code&gt;&lt;a href=&quot;../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; をスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="74e16b22a77e8236ce676f4f2f124c10d8901a2b" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; コンストラクターから &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; をスローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="cab3d4a6660b25cecf735f777424ba412487e934" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::wstring&lt;/a&gt;&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::wstring&lt;/a&gt;&lt;/code&gt; コンストラクターから &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; をスローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="962f83e06ea50e04d31c9f8437b97c5191adb569" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; from the the &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; コンストラクターから &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; をスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="6f18fce82e50be7509279d8759683168fd690cfd" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if memory allocation fails.</source>
          <target state="translated">メモリの割り当てに失敗した場合、 &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; スローすることがあります。</target>
        </trans-unit>
        <trans-unit id="eb0efb1fe6c128b1e051773ebaffa4603c205e9c" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; スローする場合があります。</target>
        </trans-unit>
        <trans-unit id="3ba6e5262639e253495b627007f9b05da37e203d" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;exceptions()&amp;amp;badbit!=0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exceptions()&amp;amp;badbit!=0&lt;/code&gt; の場合、 &lt;code&gt;&lt;a href=&quot;../ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; スローすることがあります。</target>
        </trans-unit>
        <trans-unit id="f1533fcb442ebdf84b8b8136c017750a808b170e" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; in case of failure, if &lt;code&gt;exceptions() &amp;amp; failbit != 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exceptions() &amp;amp; failbit != 0&lt;/code&gt; 場合、失敗すると &lt;code&gt;&lt;a href=&quot;../ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; スローすることがあります。</target>
        </trans-unit>
        <trans-unit id="aaa5c6b529feaa58739bd67ba50e2fb2001b4fb7" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; スローする場合があります。</target>
        </trans-unit>
        <trans-unit id="88e82c73c9f5acd5341c52abeb46b516d79c0a4c" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if the system cannot allocate memory required to track reachable objects.</source>
          <target state="translated">到達可能なオブジェクトの追跡に必要なメモリをシステムが割り当てられない場合、 &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; スローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="50334b4e66ee014f5ce48f4fae49d65f13d9afac" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; or any exception thrown by the constructor of &lt;code&gt;T&lt;/code&gt;. If an exception is thrown, the functions have no effect. If an exception is thrown during the construction of the array, already-initialized elements are destroyed in reverse order.(since C++20).</source>
          <target state="translated">投げること &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; かのコンストラクタによってスローされた例外 &lt;code&gt;T&lt;/code&gt; を。例外がスローされた場合、関数は効果がありません。配列の構築中に例外がスローされた場合、初期化済みの要素は逆の順序で破棄されます（C ++ 20以降）。</target>
        </trans-unit>
        <trans-unit id="fdfbbb46059a0d2dcd9098fe9a358cdc6c64a4b0" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; or any exception thrown by the constructor of &lt;code&gt;T&lt;/code&gt;. If an exception is thrown, this function has no effect.</source>
          <target state="translated">投げること &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; かのコンストラクタによってスローされた例外 &lt;code&gt;T&lt;/code&gt; を。例外がスローされた場合、この関数は効果がありません。</target>
        </trans-unit>
        <trans-unit id="3490986d7e9db538d6473a2861a95a9c29b566de" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; when setting the badbit.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; 設定時にstd :: ios_base :: failureをスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="55d3334b217863c436b19298f8ac48b6aa3046e7" translate="yes" xml:space="preserve">
          <source>May throw &lt;code&gt;&lt;a href=&quot;regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; to indicate an &lt;a href=&quot;error_type&quot;&gt;error condition&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;error_type&quot;&gt;エラー状態&lt;/a&gt;を示すために &lt;code&gt;&lt;a href=&quot;regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; をスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="a2aac967544933ac46c56aad850b11b876e778a6" translate="yes" xml:space="preserve">
          <source>May throw any exception thrown by the constructor of &lt;code&gt;T&lt;/code&gt;, typically including &lt;code&gt;&lt;a href=&quot;new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のコンストラクターによってスローされた例外をスローする可能性があり、通常は &lt;code&gt;&lt;a href=&quot;new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; を含みます。</target>
        </trans-unit>
        <trans-unit id="295aca95b34c6da649adb7e8f83289b1503b3665" translate="yes" xml:space="preserve">
          <source>May throw any exceptions thrown by &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;Allocator&amp;gt;::allocate()&lt;/code&gt;, such as &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; など、std :: &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;Allocator&amp;gt;::allocate()&lt;/code&gt; によってスローされた例外をスローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="1d89ff13f4c0ab3dc3033aad665ca0c8a7d4a1d6" translate="yes" xml:space="preserve">
          <source>May throw any exceptions thrown by the call to &lt;code&gt;allocate_object&lt;/code&gt; or the constructor of &lt;code&gt;U&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;allocate_object&lt;/code&gt; への呼び出しまたは &lt;code&gt;U&lt;/code&gt; のコンストラクターによってスローされた例外をスローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="cdf7c3ace6d1c50a2a552ed9dfc67f2851b5de5c" translate="yes" xml:space="preserve">
          <source>May throw any exceptions thrown by the call to &lt;code&gt;resource()-&amp;gt;allocate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;resource()-&amp;gt;allocate&lt;/code&gt; の呼び出しによってスローされた例外をスローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="014505538b8bc36d85ed833b2d3a182aea673970" translate="yes" xml:space="preserve">
          <source>Meaningless C headers</source>
          <target state="translated">意味のない C ヘッダ</target>
        </trans-unit>
        <trans-unit id="6853c98a6f4358bbfed1b3b9c81d308649299b0f" translate="yes" xml:space="preserve">
          <source>Member</source>
          <target state="translated">Member</target>
        </trans-unit>
        <trans-unit id="d880b0db33396f09e94ad458e37bf499710140d0" translate="yes" xml:space="preserve">
          <source>Member access</source>
          <target state="translated">会員アクセス</target>
        </trans-unit>
        <trans-unit id="b14800487e886a905875d25619be005b0bb88353" translate="yes" xml:space="preserve">
          <source>Member access does not affect visibility: names of private and privately-inherited members are visible and considered by overload resolution, implicit conversions to inaccessible base classes are still considered, etc. Member access check is the last step after any given language construct is interpreted. The intent of this rule is that replacing any &lt;code&gt;private&lt;/code&gt; with &lt;code&gt;public&lt;/code&gt; never alters the behavior of the program.</source>
          <target state="translated">メンバーアクセスは可視性に影響しません。プライベートメンバーとプライベートに継承されたメンバーの名前は表示され、オーバーロードの解決によって考慮されます。アクセスできない基本クラスへの暗黙的な変換も考慮されます。メンバーアクセスチェックは、特定の言語構成が解釈された後の最後のステップです。このルールの意図は、 &lt;code&gt;private&lt;/code&gt; を &lt;code&gt;public&lt;/code&gt; 、プログラムの動作が変更されることはないということです。</target>
        </trans-unit>
        <trans-unit id="cf9ba14f65379b3cac2135b4415ee8ccd2ae4dbf" translate="yes" xml:space="preserve">
          <source>Member access operators</source>
          <target state="translated">会員アクセスオペレータ</target>
        </trans-unit>
        <trans-unit id="0dbd252428ccbd0d975da572dc34df0626898460" translate="yes" xml:space="preserve">
          <source>Member alias templates</source>
          <target state="translated">メンバーのエイリアステンプレート</target>
        </trans-unit>
        <trans-unit id="c618f84bc8f235803205b6351cb60f5fe7b25f6f" translate="yes" xml:space="preserve">
          <source>Member classes</source>
          <target state="translated">メンバークラス</target>
        </trans-unit>
        <trans-unit id="53b558837f61bee946a0dd1ce0e5906eb1fbb225" translate="yes" xml:space="preserve">
          <source>Member constant</source>
          <target state="translated">メンバー定数</target>
        </trans-unit>
        <trans-unit id="11178f71158bbe4d9b5ae241f21a139cf3506414" translate="yes" xml:space="preserve">
          <source>Member constants</source>
          <target state="translated">メンバー定数</target>
        </trans-unit>
        <trans-unit id="14511f9334df9fc1bdabba7170aa8468f6d02cfd" translate="yes" xml:space="preserve">
          <source>Member function</source>
          <target state="translated">メンバー機能</target>
        </trans-unit>
        <trans-unit id="e7d2a79cda830630ecf28efb73b93f5d64c726ea" translate="yes" xml:space="preserve">
          <source>Member function &lt;code&gt;operator()&lt;/code&gt;</source>
          <target state="translated">メンバー機能 &lt;code&gt;operator()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d34638b7646acd7bec35ca244b9f93a8a851424" translate="yes" xml:space="preserve">
          <source>Member function definition</source>
          <target state="translated">メンバー関数の定義</target>
        </trans-unit>
        <trans-unit id="08497771fff890fda9af78587c591fe51ef91e55" translate="yes" xml:space="preserve">
          <source>Member function table</source>
          <target state="translated">メンバー関数表</target>
        </trans-unit>
        <trans-unit id="55bb0b5562e8411fcb96bbac022a9f6ac7ea4d1b" translate="yes" xml:space="preserve">
          <source>Member function templates</source>
          <target state="translated">メンバー関数のテンプレート</target>
        </trans-unit>
        <trans-unit id="b217f7514e4e69fd38aa7c54a821e91e41f619c3" translate="yes" xml:space="preserve">
          <source>Member functions</source>
          <target state="translated">メンバー機能</target>
        </trans-unit>
        <trans-unit id="980cb8724fcd1049e2076cf5101d5771adc84b3d" translate="yes" xml:space="preserve">
          <source>Member functions (including virtual member functions) can be called from member initializers, but the behavior is undefined if not all direct bases are initialized at that point.</source>
          <target state="translated">メンバ関数(仮想メンバ関数を含む)は、メンバ初期化子から呼び出すことができますが、その時点ですべてのダイレクトベースが初期化されていない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="de7182652ce370c94f7c684b95c200a783818dee" translate="yes" xml:space="preserve">
          <source>Member functions of a local class have no linkage</source>
          <target state="translated">ローカルクラスのメンバ関数にはリンクがない</target>
        </trans-unit>
        <trans-unit id="d5d511dbaf6e4bdbdd2335cea43d07a07ffcc20d" translate="yes" xml:space="preserve">
          <source>Member functions of a local class have to be defined entirely inside the class body</source>
          <target state="translated">ローカルクラスのメンバ関数は、クラス本体の中で完全に定義されなければなりません。</target>
        </trans-unit>
        <trans-unit id="0656eb615cbde62fa5517f8cf8a8d9f0cd48715c" translate="yes" xml:space="preserve">
          <source>Member initialization</source>
          <target state="translated">メンバーの初期化</target>
        </trans-unit>
        <trans-unit id="0b96269b9ecb978e0c0b9cfaf7fa59a36ac1af38" translate="yes" xml:space="preserve">
          <source>Member initializers and aggregates</source>
          <target state="translated">メンバのイニシャライザとアグリゲート</target>
        </trans-unit>
        <trans-unit id="19bedac337c4148b66c642456a9ebdfc9f5a6c88" translate="yes" xml:space="preserve">
          <source>Member lifetime</source>
          <target state="translated">メンバーの寿命</target>
        </trans-unit>
        <trans-unit id="d2fbdd7c0d6a0fe8e113aa296a28047ef253149d" translate="yes" xml:space="preserve">
          <source>Member name</source>
          <target state="translated">メンバー名</target>
        </trans-unit>
        <trans-unit id="74fa726e3f14b875e371e46176a78863344d0e2a" translate="yes" xml:space="preserve">
          <source>Member name lookup</source>
          <target state="translated">メンバー名検索</target>
        </trans-unit>
        <trans-unit id="fde74c71ca6b1383761e00548de51dddc150302d" translate="yes" xml:space="preserve">
          <source>Member object</source>
          <target state="translated">メンバーオブジェクト</target>
        </trans-unit>
        <trans-unit id="d4037494affff8e1187b4614057e3d3856936fa0" translate="yes" xml:space="preserve">
          <source>Member objects</source>
          <target state="translated">メンバーオブジェクト</target>
        </trans-unit>
        <trans-unit id="7c1c4577121db570224d4e6d1b453b5fee33ebf0" translate="yes" xml:space="preserve">
          <source>Member of a class template outside of template</source>
          <target state="translated">テンプレート外のクラステンプレートのメンバ</target>
        </trans-unit>
        <trans-unit id="fcf850420e837ff3777a4510c350a70dc493bb17" translate="yes" xml:space="preserve">
          <source>Member of object</source>
          <target state="translated">オブジェクトのメンバー</target>
        </trans-unit>
        <trans-unit id="4300f5098631ebd1c4cf89699b5b4370fc4f18ee" translate="yes" xml:space="preserve">
          <source>Member or a member template may be nested within many enclosing class templates. In an explicit specialization for such a member, there's a &lt;code&gt;template&amp;lt;&amp;gt;&lt;/code&gt; for every enclosing class template that is explicitly specialized.</source>
          <target state="translated">メンバーまたはメンバーテンプレートは、多くの包含クラステンプレート内にネストできます。そのようなメンバーの明示的な専門分野では、 &lt;code&gt;template&amp;lt;&amp;gt;&lt;/code&gt; すべての包含クラステンプレートにtemplate &amp;lt;&amp;gt;があります。</target>
        </trans-unit>
        <trans-unit id="f2fae0c7a45f97c1ebd785be8d844ad4e439ae3c" translate="yes" xml:space="preserve">
          <source>Member specification</source>
          <target state="translated">メンバー仕様</target>
        </trans-unit>
        <trans-unit id="87b9dbba6959e8f157ca46a3351b964abfdee42b" translate="yes" xml:space="preserve">
          <source>Member templates</source>
          <target state="translated">メンバーテンプレート</target>
        </trans-unit>
        <trans-unit id="d7ae56afa08fe3824c2cd242b7909d3e66c1ecc3" translate="yes" xml:space="preserve">
          <source>Member type</source>
          <target state="translated">メンバータイプ</target>
        </trans-unit>
        <trans-unit id="55c0692816e400cc9f1e8bcd75e4a14f74352890" translate="yes" xml:space="preserve">
          <source>Member type &lt;code&gt;result_type&lt;/code&gt;</source>
          <target state="translated">会員タイプ &lt;code&gt;result_type&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22c15de225ed427b7d10b0a6ea94574676a92b6e" translate="yes" xml:space="preserve">
          <source>Member types</source>
          <target state="translated">メンバーの種類</target>
        </trans-unit>
        <trans-unit id="2a9c2afdee2bf076807c340c63de865c0262cc04" translate="yes" xml:space="preserve">
          <source>Member types and constants</source>
          <target state="translated">メンバーの型と定数</target>
        </trans-unit>
        <trans-unit id="8e74c7d99d2202da874a715a8b5fbfbc2b8cb4db" translate="yes" xml:space="preserve">
          <source>Member variable templates</source>
          <target state="translated">メンバー変数のテンプレート</target>
        </trans-unit>
        <trans-unit id="1cb449c1126609b4b41e1d87f65f0d7cd19b49b9" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">Members</target>
        </trans-unit>
        <trans-unit id="84f16231bc3f47eb66803d5355786879bfe2e29d" translate="yes" xml:space="preserve">
          <source>Members identical to std::optional</source>
          <target state="translated">std::optional と同じメンバー</target>
        </trans-unit>
        <trans-unit id="8441142a0e7debda365fc2602acee6048f15bbbe" translate="yes" xml:space="preserve">
          <source>Members of &lt;a href=&quot;union&quot;&gt;anonymous unions&lt;/a&gt; cannot be captured.</source>
          <target state="translated">のメンバー &lt;a href=&quot;union&quot;&gt;匿名組合の&lt;/a&gt;捕獲できません。</target>
        </trans-unit>
        <trans-unit id="02c67b9d74374d2cbad42e0e00560d1e26c88740" translate="yes" xml:space="preserve">
          <source>Members of an anonymous union are injected in the enclosing scope (and must not conflict with other names declared there).</source>
          <target state="translated">匿名組合のメンバは、囲みのスコープに注入されます(そこで宣言された他の名前と衝突してはいけません)。</target>
        </trans-unit>
        <trans-unit id="b8b5ab3d00ea4a372f20b27f763c84738411ec47" translate="yes" xml:space="preserve">
          <source>Members of an inline namespace are treated as if they are members of the enclosing namespace in many situations (listed below). This property is transitive: if a namespace N contains an inline namespace M, which in turn contains an inline namespace O, then the members of O can be used as though they were members of M or N.</source>
          <target state="translated">インライン名前空間のメンバは、多くの場合 (以下に列挙します)、囲んでいる名前空間のメンバであるかのように扱われます。このプロパティは遷移的です。名前空間 N がインライン名前空間 M を含み、その名前空間がインライン名前空間 O を含む場合、O のメンバは M または N のメンバであるかのように使用できます。</target>
        </trans-unit>
        <trans-unit id="8586c2e60536f02fc22562f8abc3249a46b2b677" translate="yes" xml:space="preserve">
          <source>Members of array type cannot deduce their size from member initializers:</source>
          <target state="translated">配列型のメンバは、メンバのイニシャライザからサイズを推測することはできません。</target>
        </trans-unit>
        <trans-unit id="7ab44845744014b08b5a156f5657ab462609baf4" translate="yes" xml:space="preserve">
          <source>Members of partial specializations</source>
          <target state="translated">部分的な専門分野のメンバー</target>
        </trans-unit>
        <trans-unit id="208131f2e00ae33985ce221300cd22605d845623" translate="yes" xml:space="preserve">
          <source>Members of partial specializations are not related to the members of the primary template.</source>
          <target state="translated">部分的な専門化のメンバーは、主なテンプレートのメンバーとは関係ありません。</target>
        </trans-unit>
        <trans-unit id="856df469166bb63fb5a5f500f0b2fd7e30149e12" translate="yes" xml:space="preserve">
          <source>Members of specializations</source>
          <target state="translated">専門分野のメンバー</target>
        </trans-unit>
        <trans-unit id="177c4eb396c6113e03b1ec47971bf87273b4f749" translate="yes" xml:space="preserve">
          <source>Members of the current instantiation may be both dependent and non-dependent.</source>
          <target state="translated">現在のインスタンシエーションのメンバーは、依存している場合と依存していない場合の両方があります。</target>
        </trans-unit>
        <trans-unit id="9e686f3fba635d862001096dc688423be262661a" translate="yes" xml:space="preserve">
          <source>Members of unknown specialization are always dependent, and are looked up and bound at the point of instantiation as all dependent names (see above).</source>
          <target state="translated">不明な専門化のメンバーは常に依存しており、すべての依存名としてインスタンス化の時点で検索され、バインドされます(上記参照)。</target>
        </trans-unit>
        <trans-unit id="b61b70edbe3a97caa2ecb5ac100b7aca209a1cba" translate="yes" xml:space="preserve">
          <source>Memory allocation</source>
          <target state="translated">メモリの割り当て</target>
        </trans-unit>
        <trans-unit id="c839b2598611d3f060e76b276a742153340abc1c" translate="yes" xml:space="preserve">
          <source>Memory is released back to the upstream resource even if &lt;code&gt;deallocate&lt;/code&gt; has not been called for some of the allocated blocks.</source>
          <target state="translated">メモリが解放されても、上流のリソースに解放されます。 &lt;code&gt;deallocate&lt;/code&gt; 割り当てられたブロックの一部に対して割り当て解除が呼び出されなかったます。</target>
        </trans-unit>
        <trans-unit id="bdea69651115220379a7626fdc86765943dcd523" translate="yes" xml:space="preserve">
          <source>Memory leaks</source>
          <target state="translated">メモリリーク</target>
        </trans-unit>
        <trans-unit id="f8b9af79a08c4c809a8587ce76e5d96c65e611a2" translate="yes" xml:space="preserve">
          <source>Memory location</source>
          <target state="translated">メモリの位置</target>
        </trans-unit>
        <trans-unit id="1c5536b98ab016fe61807564b4a34c80211a7613" translate="yes" xml:space="preserve">
          <source>Memory management</source>
          <target state="translated">メモリ管理</target>
        </trans-unit>
        <trans-unit id="ab97ff6f2dba5d3f1cd5aeb9b43d517c7ff39baa" translate="yes" xml:space="preserve">
          <source>Memory model</source>
          <target state="translated">メモリモデル</target>
        </trans-unit>
        <trans-unit id="9c23e8bd787dd8370f724a94edc52271e09548bc" translate="yes" xml:space="preserve">
          <source>Memory model and data races</source>
          <target state="translated">メモリモデルとデータレース</target>
        </trans-unit>
        <trans-unit id="6b03cc66f3ec38d27d0315d16067b31e093e9aea" translate="yes" xml:space="preserve">
          <source>Memory order</source>
          <target state="translated">メモリオーダー</target>
        </trans-unit>
        <trans-unit id="650d40654b9659dd0612cce810ff5fea98b79081" translate="yes" xml:space="preserve">
          <source>Memory resources</source>
          <target state="translated">メモリリソース</target>
        </trans-unit>
        <trans-unit id="4203c5ba750ba970dd9f023b43c81a0fd337c099" translate="yes" xml:space="preserve">
          <source>Memory resources implement memory allocation strategies that can be used by &lt;code&gt;&lt;a href=&quot;memory/polymorphic_allocator&quot;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メモリリソースは、 &lt;code&gt;&lt;a href=&quot;memory/polymorphic_allocator&quot;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt; で使用できるメモリ割り当て戦略を実装します。</target>
        </trans-unit>
        <trans-unit id="a26524a9138484663e1a18b861e087f36fe4484a" translate="yes" xml:space="preserve">
          <source>Memory synchronization ordering</source>
          <target state="translated">メモリ同期命令</target>
        </trans-unit>
        <trans-unit id="813e99320a4c03b9ad6cec6f1e925a0b781749db" translate="yes" xml:space="preserve">
          <source>Mergeable</source>
          <target state="translated">Mergeable</target>
        </trans-unit>
        <trans-unit id="e8960ff445c6c6fffe8acbabe2366e4cbf4abc97" translate="yes" xml:space="preserve">
          <source>Merges two consecutive sorted ranges &lt;code&gt;[first, middle)&lt;/code&gt; and &lt;code&gt;[middle, last)&lt;/code&gt; into one sorted range &lt;code&gt;[first, last)&lt;/code&gt;. For equivalent elements in the original two ranges, the elements from the first range (preserving their original order) precede the elements from the second range (preserving their original order).</source>
          <target state="translated">2つの連続するソートされた範囲 &lt;code&gt;[first, middle)&lt;/code&gt; と &lt;code&gt;[middle, last)&lt;/code&gt; を1つのソートされた範囲 &lt;code&gt;[first, last)&lt;/code&gt; マージします。元の2つの範囲の同等の要素の場合、最初の範囲の要素（元の順序を維持）が2番目の範囲の要素（元の順序を維持）の前にあります。</target>
        </trans-unit>
        <trans-unit id="348e4e60780310e575bfb01a962f7cd5abae550b" translate="yes" xml:space="preserve">
          <source>Merges two sorted lists into one. The lists should be sorted into ascending order.</source>
          <target state="translated">ソートされた2つのリストを1つに統合します。リストは昇順に並べ替える必要があります。</target>
        </trans-unit>
        <trans-unit id="62e4dd6599b3076f4c7e24d143d22cfe633e9e61" translate="yes" xml:space="preserve">
          <source>Merges two sorted ranges &lt;code&gt;[first1, last1)&lt;/code&gt; and &lt;code&gt;[first2, last2)&lt;/code&gt; into one sorted range beginning at &lt;code&gt;d_first&lt;/code&gt;.</source>
          <target state="translated">2つのソートされた範囲 &lt;code&gt;[first1, last1)&lt;/code&gt; および &lt;code&gt;[first2, last2)&lt;/code&gt; を、d_firstで始まる1つのソートされた範囲に &lt;code&gt;d_first&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="be990907531784c554a9a73c087e598fb1ce6368" translate="yes" xml:space="preserve">
          <source>Message too large</source>
          <target state="translated">メッセージが大きすぎる</target>
        </trans-unit>
        <trans-unit id="461fdb47a2520c8a10c99484faf4d44d448c8df5" translate="yes" xml:space="preserve">
          <source>Metafunctions and detection idiom</source>
          <target state="translated">メタファンクションと検出の熟語</target>
        </trans-unit>
        <trans-unit id="07195d88dee403459dfced037630ce1c768e14de" translate="yes" xml:space="preserve">
          <source>Metaprogramming and type traits</source>
          <target state="translated">メタプログラミングと型の特徴</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="932b125ec81f14231f7250288b48b92b461a8de5" translate="yes" xml:space="preserve">
          <source>Methods and operators</source>
          <target state="translated">メソッドと演算子</target>
        </trans-unit>
        <trans-unit id="67dd111ccc6d0d86efc4c55e49ca364b9cb96922" translate="yes" xml:space="preserve">
          <source>Microsoft Visual Studio stores just those three members.</source>
          <target state="translated">Microsoft Visual Studio には、この 3 つのメンバーだけが保存されています。</target>
        </trans-unit>
        <trans-unit id="47dddb5186287e21994356577aa0866b4c1d8ea3" translate="yes" xml:space="preserve">
          <source>Microsoft also extends the specification of fflush by defining its effects on an input stream: in Visual Studio 2013 and prior, it &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/9yky46tz(v=vs.120)&quot;&gt;discarded the input buffer&lt;/a&gt;, in Visual Studio 2015 and newer, it &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/9yky46tz.aspx&quot;&gt;has no effect, buffers are retained&lt;/a&gt;.</source>
          <target state="translated">Microsoftはまた、入力ストリームへの影響を定義することによってfflushの仕様を拡張します。VisualStudio 2013以前で&lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/9yky46tz(v=vs.120)&quot;&gt;は、入力バッファーを破棄し、&lt;/a&gt; Visual Studio 2015以降で&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/9yky46tz.aspx&quot;&gt;は効果がなく、バッファーは保持され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b1e6ca7ba44f07ef77ced3289ef9027ae3985768" translate="yes" xml:space="preserve">
          <source>Minimal incomplete type support for standard containers</source>
          <target state="translated">標準コンテナのための最小限の不完全な型サポート</target>
        </trans-unit>
        <trans-unit id="039230108efa19823a7b4883634eb496fa5690f9" translate="yes" xml:space="preserve">
          <source>Minimum/maximum operations</source>
          <target state="translated">最小限/最大限のオペレーション</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="9f352649528dbc4b941a3c142ba8ef1c7ced2ff5" translate="yes" xml:space="preserve">
          <source>Miscellaneous algorithms and math</source>
          <target state="translated">その他のアルゴリズムと数学</target>
        </trans-unit>
        <trans-unit id="7d1b5fe97a66d6423d5658882ed141e544353f5f" translate="yes" xml:space="preserve">
          <source>Miscellaneous transformations</source>
          <target state="translated">その他の変換</target>
        </trans-unit>
        <trans-unit id="acace02a8a5c263c4d1a277ad3914f44e1003ded" translate="yes" xml:space="preserve">
          <source>Miscellanous</source>
          <target state="translated">Miscellanous</target>
        </trans-unit>
        <trans-unit id="b2168739b0a770dbc449ab787b7f9985648b3334" translate="yes" xml:space="preserve">
          <source>Mixed categories</source>
          <target state="translated">混合カテゴリ</target>
        </trans-unit>
        <trans-unit id="781cc7f1a888cc264c3daec6aa247cc3fa4f8d16" translate="yes" xml:space="preserve">
          <source>Mixing &lt;code&gt;auto&lt;/code&gt; variables and functions in one declaration, as in &lt;code&gt;auto f() -&amp;gt; int, i = 0;&lt;/code&gt; is not allowed.</source>
          <target state="translated">&lt;code&gt;auto f() -&amp;gt; int, i = 0;&lt;/code&gt; ように、1つの宣言で &lt;code&gt;auto&lt;/code&gt; 変数と関数を混在させる。許可されていません。</target>
        </trans-unit>
        <trans-unit id="a7b93d2128e820f861fc8dfccd9f5521e89ad21f" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="translated">Mode</target>
        </trans-unit>
        <trans-unit id="c8d28082b4fc6c7b86480f164e10796d9ee93fa2" translate="yes" xml:space="preserve">
          <source>Modification of the element denoted by this iterator is permitted, but results in undefined behavior if the resulting value does not satisfy the filter's predicate.</source>
          <target state="translated">このイテレータで表される要素の変更は許可されていますが、結果として得られる値がフィルタの述語を満たさない場合は未定義の動作となります。</target>
        </trans-unit>
        <trans-unit id="fde60483a8643008b46b560bb3120711a8d791b9" translate="yes" xml:space="preserve">
          <source>Modification order</source>
          <target state="translated">変更命令</target>
        </trans-unit>
        <trans-unit id="f7d91c2034d3989f0f9d751cdc240eeaa5a1f0bd" translate="yes" xml:space="preserve">
          <source>Modified first or last element</source>
          <target state="translated">変更された最初の要素または最後の要素</target>
        </trans-unit>
        <trans-unit id="5ae95629e2c8d41b6f08c30afaaf87f67a8aeb67" translate="yes" xml:space="preserve">
          <source>Modified middle only</source>
          <target state="translated">ミドルのみの変更</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="4ab3cf9c369166302907228f36238db8a9f5670f" translate="yes" xml:space="preserve">
          <source>Modifies the default formatting for floating-point input/output.</source>
          <target state="translated">浮動小数点入出力のデフォルトの書式設定を変更します。</target>
        </trans-unit>
        <trans-unit id="15f0dab11aac15b6b8ac3cdd786afb259b8c6d63" translate="yes" xml:space="preserve">
          <source>Modifies the default numeric base for integer I/O.</source>
          <target state="translated">整数I/Oのデフォルトの数値ベースを変更します。</target>
        </trans-unit>
        <trans-unit id="e948b2b964fb2481f64aff925d09ed89d0d5aac5" translate="yes" xml:space="preserve">
          <source>Modifies the default positioning of the fill characters. &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; apply to any output, &lt;code&gt;internal&lt;/code&gt; applies to integer, floating-point, and monetary output. Has no effect on input.</source>
          <target state="translated">フィル文字のデフォルトの位置を変更します。 &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;right&lt;/code&gt; はすべての出力に適用され、 &lt;code&gt;internal&lt;/code&gt; は整数、浮動小数点、および通貨出力に適用されます。入力には影響しません。</target>
        </trans-unit>
        <trans-unit id="4f0803b14853f0ca1c462262bd06651312d6fd2a" translate="yes" xml:space="preserve">
          <source>Modifies the integer type. Can be mixed in any order. Only one of each group can be present in type name.</source>
          <target state="translated">整数型を変更します。任意の順序で混合することができます。型名には各グループのうち1つだけを指定することができます。</target>
        </trans-unit>
        <trans-unit id="d554ea1e6c13dd8a9b9dcc293f7edfd4d7e0bab2" translate="yes" xml:space="preserve">
          <source>Modifies the point in time &lt;code&gt;*this&lt;/code&gt; represents by one tick of the &lt;code&gt;duration&lt;/code&gt;.</source>
          <target state="translated">時点を変更します。 &lt;code&gt;*this&lt;/code&gt; は &lt;code&gt;duration&lt;/code&gt; 1ティックを表します。</target>
        </trans-unit>
        <trans-unit id="ac257bedb96e8a5ed9f2d761616b185ecd321a9f" translate="yes" xml:space="preserve">
          <source>Modifies the time point &lt;code&gt;*this&lt;/code&gt; represents by the duration &lt;code&gt;dy&lt;/code&gt; or &lt;code&gt;dm&lt;/code&gt;.</source>
          <target state="translated">時点を変更します &lt;code&gt;*this&lt;/code&gt; は、期間 &lt;code&gt;dy&lt;/code&gt; または &lt;code&gt;dm&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="0109c0f778cd7e5d5f58cdb0bef696d2ed4bfbeb" translate="yes" xml:space="preserve">
          <source>Modifies the time point by the given duration.</source>
          <target state="translated">指定された時間でタイムポイントを変更します。</target>
        </trans-unit>
        <trans-unit id="b99643bd9f016aabf23ffef5df0d85745e624465" translate="yes" xml:space="preserve">
          <source>Modifying sequence operations</source>
          <target state="translated">シーケンス操作の変更</target>
        </trans-unit>
        <trans-unit id="2b3cc44d73da07886ee8baef1ee867321f0ada02" translate="yes" xml:space="preserve">
          <source>Modifying the object references through the returned pointer is undefined behavior.</source>
          <target state="translated">返されたポインタを介してオブジェクト参照を変更することは未定義の動作です。</target>
        </trans-unit>
        <trans-unit id="ebfc8aea76355cffda7dc26e5f6ffed8b15e2998" translate="yes" xml:space="preserve">
          <source>Modifying the string returned by &lt;code&gt;getenv&lt;/code&gt; invokes undefined behavior.</source>
          <target state="translated">&lt;code&gt;getenv&lt;/code&gt; によって返された文字列を変更すると、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="5c27456bde155168271b9f0d0a03593e3d004434" translate="yes" xml:space="preserve">
          <source>Modules (since C++20)</source>
          <target state="translated">モジュール(C++20以降</target>
        </trans-unit>
        <trans-unit id="87aa2b5a478fd2bc39c2606c02ad3374b1b33a57" translate="yes" xml:space="preserve">
          <source>Modules are orthogonal to &lt;a href=&quot;namespace&quot;&gt;namespaces&lt;/a&gt;.</source>
          <target state="translated">モジュールは&lt;a href=&quot;namespace&quot;&gt;名前空間に&lt;/a&gt;直交しています。</target>
        </trans-unit>
        <trans-unit id="15b644db7c27b8824e56787512daf5e002e08b35" translate="yes" xml:space="preserve">
          <source>Modules help divide large amounts of code into logical parts.</source>
          <target state="translated">モジュールは、大量のコードを論理的な部分に分割するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ba486ce8a0bc9ff868847c4d17e3966a68af4067" translate="yes" xml:space="preserve">
          <source>Monetary numeric formatting parameters</source>
          <target state="translated">数値フォーマットパラメータ</target>
        </trans-unit>
        <trans-unit id="082bc378cd60e17a38d99898b21955299c5b60c8" translate="yes" xml:space="preserve">
          <source>Month</source>
          <target state="translated">Month</target>
        </trans-unit>
        <trans-unit id="8a88993f3238117d849d456cb7e4e84ee89d728a" translate="yes" xml:space="preserve">
          <source>Month, day, year (american) order</source>
          <target state="translated">月日年順</target>
        </trans-unit>
        <trans-unit id="d08db9b01ebe6924d7a1bf996c9b0ed0b4fab126" translate="yes" xml:space="preserve">
          <source>More formally, &lt;code&gt;nth_element&lt;/code&gt; partially sorts the range &lt;code&gt;[first, last)&lt;/code&gt; in ascending order so that the condition &lt;code&gt;!(*j &amp;lt; *i)&lt;/code&gt; (for (1-2), or &lt;code&gt;comp(*j, *i) == false&lt;/code&gt; for (3-4)) is met for any &lt;code&gt;i&lt;/code&gt; in the range &lt;code&gt;[first, nth)&lt;/code&gt; and for any &lt;code&gt;j&lt;/code&gt; in the range &lt;code&gt;[nth, last)&lt;/code&gt;. The element placed in the &lt;code&gt;nth&lt;/code&gt; position is exactly the element that would occur in this position if the range was fully sorted.</source>
          <target state="translated">より正式には、 &lt;code&gt;nth_element&lt;/code&gt; は範囲 &lt;code&gt;[first, last)&lt;/code&gt; を昇順で部分的に並べ替え、条件 &lt;code&gt;!(*j &amp;lt; *i)&lt;/code&gt; （for（1-2）、または &lt;code&gt;comp(*j, *i) == false&lt;/code&gt; for（ 3-4））いずれかのために満たされる &lt;code&gt;i&lt;/code&gt; の範囲内の &lt;code&gt;[first, nth)&lt;/code&gt; 及び任意用 &lt;code&gt;j&lt;/code&gt; 範囲の &lt;code&gt;[nth, last)&lt;/code&gt; 。 &lt;code&gt;nth&lt;/code&gt; 位置に配置された要素は、範囲が完全にソートされた場合にこの位置で発生する要素とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="8ad85aba1e03e90f4ea308da91cb434da83f1201" translate="yes" xml:space="preserve">
          <source>More generally, a declaration that appears in any namespace scope and introduces a name using an unqualified identifier always introduces a member into the namespace it's in and not to any other namespace. The exceptions are explicit instantiations and explicit specializations of a primary template that is defined in an inline namespace: because they do not introduce a new name, they may use unqualified-id in an enclosing namespace.</source>
          <target state="translated">より一般的には、任意のネームスペース・スコープに出現し、非修飾識別子を使用して名前を導入する宣言は、常にそのメンバをそれが存在するネームスペースに導入し、他のネームスペースには導入しません。例外は、インライン名前空間で定義されているプライマリ・テンプレートの明示的なインスタンス化と明示的な特殊化です。</target>
        </trans-unit>
        <trans-unit id="aced5c6bdae8930320b0a84e8806de43ea20de7e" translate="yes" xml:space="preserve">
          <source>More importantly, when a function has both rvalue reference and lvalue reference &lt;a href=&quot;overload_resolution&quot;&gt;overloads&lt;/a&gt;, the rvalue reference overload binds to rvalues (including both prvalues and xvalues), while the lvalue reference overload binds to lvalues:</source>
          <target state="translated">さらに重要なことに、関数が右辺値参照と左辺値参照の両方の&lt;a href=&quot;overload_resolution&quot;&gt;オーバーロードを持つ&lt;/a&gt;場合、右辺値参照のオーバーロードは右辺値（prvaluesとxvaluesの両方を含む）にバインドし、左辺値の参照オーバーロードは左辺値にバインドします。</target>
        </trans-unit>
        <trans-unit id="042cb75d428b075638d2d6b2981b93fb7100eec4" translate="yes" xml:space="preserve">
          <source>More precisely,</source>
          <target state="translated">より正確には</target>
        </trans-unit>
        <trans-unit id="12d2d8c92f9d4fd32f5f1106d05e584341d60749" translate="yes" xml:space="preserve">
          <source>More precisely, if &lt;code&gt;T&lt;/code&gt; is an object type, then &lt;code&gt;CopyConstructible&amp;lt;T&amp;gt;&lt;/code&gt; is satisfied only if given.</source>
          <target state="translated">より正確には、 &lt;code&gt;T&lt;/code&gt; がオブジェクト型の場合、 &lt;code&gt;CopyConstructible&amp;lt;T&amp;gt;&lt;/code&gt; は指定された場合にのみ満たされます。</target>
        </trans-unit>
        <trans-unit id="390ebcb02784fc921ce7255ea43ab7b5c0c22766" translate="yes" xml:space="preserve">
          <source>More precisely, if &lt;code&gt;T&lt;/code&gt; is an object type, then &lt;code&gt;MoveConstructible&amp;lt;T&amp;gt;&lt;/code&gt; is satisfied only if given.</source>
          <target state="translated">より正確には、 &lt;code&gt;T&lt;/code&gt; がオブジェクト型の場合、 &lt;code&gt;MoveConstructible&amp;lt;T&amp;gt;&lt;/code&gt; は指定された場合にのみ満たされます。</target>
        </trans-unit>
        <trans-unit id="abf4cfe7b468de981e652ab471007fe1cf184911" translate="yes" xml:space="preserve">
          <source>Moreover, if a class is</source>
          <target state="translated">さらに、クラスが</target>
        </trans-unit>
        <trans-unit id="155edc9b15c11dc21e1b4548edbad4e1215c059f" translate="yes" xml:space="preserve">
          <source>Moreover, the specialization has to be more specialized than the primary template.</source>
          <target state="translated">しかも、一次テンプレートよりも専門性が高くなければなりません。</target>
        </trans-unit>
        <trans-unit id="efb9a37b6f75f2498f990faf5ad9f0869a407c15" translate="yes" xml:space="preserve">
          <source>Most algorithms have overloads that accept execution policies. The standard library algorithms support several &lt;a href=&quot;algorithm/execution_policy_tag_t&quot;&gt;execution policies&lt;/a&gt;, and the library provides corresponding execution policy types and objects. Users may select an execution policy statically by invoking a parallel algorithm with an &lt;a href=&quot;algorithm/execution_policy_tag&quot;&gt;execution policy object&lt;/a&gt; of the corresponding type.</source>
          <target state="translated">ほとんどのアルゴリズムには、実行ポリシーを受け入れるオーバーロードがあります。標準ライブラリアルゴリズムはいくつかの&lt;a href=&quot;algorithm/execution_policy_tag_t&quot;&gt;実行ポリシーを&lt;/a&gt;サポートし、ライブラリは対応する実行ポリシータイプとオブジェクトを提供します。ユーザーは、対応するタイプの&lt;a href=&quot;algorithm/execution_policy_tag&quot;&gt;実行ポリシーオブジェクト&lt;/a&gt;を使用して並列アルゴリズムを呼び出すことにより、実行ポリシーを静的に選択できます。</target>
        </trans-unit>
        <trans-unit id="cc6a96c2bf79396b900217be397fde454fb98507" translate="yes" xml:space="preserve">
          <source>Most concepts in the standard library impose both syntactic and semantic requirements. In general, only the syntactic requirements can be checked by the compiler. If a semantic requirement is not met at the point of use, the program is ill-formed, no diagnostic required.</source>
          <target state="translated">標準ライブラリのほとんどの概念は、構文的な要件と意味的な要件の両方を課しています。一般的には、構文的な要件だけがコンパイラによってチェックされます。使用時にセマンティック要件が満たされていない場合、プログラムは不定形であり、診断の必要はありません。</target>
        </trans-unit>
        <trans-unit id="781816a1d277bbc9eb1433baedd102171fdafd77" translate="yes" xml:space="preserve">
          <source>Most containers have at least several member functions in common, and share functionalities. Which container is the best for the particular application depends not only on the offered functionality, but also on its efficiency for different workloads.</source>
          <target state="translated">ほとんどのコンテナは、少なくともいくつかのメンバー機能を共通に持ち、機能を共有しています。どのコンテナが特定のアプリケーションに最適かは、提供される機能だけでなく、異なるワークロードに対する効率性にも依存します。</target>
        </trans-unit>
        <trans-unit id="e62a8c15144afd6bef7aa39651c138fe6e1aae25" translate="yes" xml:space="preserve">
          <source>Most multibyte character encodings use single-byte codes to represent the characters from the ASCII character set. This function may be used to convert such characters to &lt;code&gt;wchar_t&lt;/code&gt;.</source>
          <target state="translated">ほとんどのマルチバイト文字エンコーディングは、シングルバイトコードを使用して、ASCII文字セットの文字を表します。この関数は、そのような文字を &lt;code&gt;wchar_t&lt;/code&gt; に変換するために使用できます。</target>
        </trans-unit>
        <trans-unit id="2c598cbf439c8837b1ca206b16302fc6a8e671f8" translate="yes" xml:space="preserve">
          <source>Most of the classes are templated, so they can be adapted to any basic character type. Separate typedefs are provided for the most common basic character types (&lt;code&gt;char&lt;/code&gt; and &lt;code&gt;wchar_t&lt;/code&gt;). The classes are organized into the following hierarchy:</source>
          <target state="translated">ほとんどのクラスはテンプレート化されているため、あらゆる基本的な文字タイプに適合させることができます。最も一般的な基本的な文字タイプ（ &lt;code&gt;char&lt;/code&gt; および &lt;code&gt;wchar_t&lt;/code&gt; ）には、個別のtypedefが用意されています。クラスは次の階層に編成されています。</target>
        </trans-unit>
        <trans-unit id="096ace82e91d90831e1c4645b3d45c6185c05537" translate="yes" xml:space="preserve">
          <source>Most statements in a typical C++ program are expression statements, such as assignments or function calls.</source>
          <target state="translated">典型的な C++プログラム内のステートメントのほとんどは、代入や関数呼び出しなどの式ステートメントです。</target>
        </trans-unit>
        <trans-unit id="a2333535991c67ef2e86e131a8535fb756804d7f" translate="yes" xml:space="preserve">
          <source>Movable</source>
          <target state="translated">Movable</target>
        </trans-unit>
        <trans-unit id="0a9ed9691d6eeb1d4822ae73e0c5eadefaad241c" translate="yes" xml:space="preserve">
          <source>Move assignment operator</source>
          <target state="translated">移動代入演算子</target>
        </trans-unit>
        <trans-unit id="47bc76102bfdfe08b85837682799b53a220e67af" translate="yes" xml:space="preserve">
          <source>Move assignment operator. Replaces the contents with those of &lt;code&gt;other&lt;/code&gt; using move semantics.</source>
          <target state="translated">代入演算子を移動します。移動セマンティクスを使用して、コンテンツを &lt;code&gt;other&lt;/code&gt; コンテンツに置き換えます。</target>
        </trans-unit>
        <trans-unit id="9faeffa8862f7a244a0700c0596d5af7fc217adc" translate="yes" xml:space="preserve">
          <source>Move assignment operators typically &quot;steal&quot; the resources held by the argument (e.g. pointers to dynamically-allocated objects, file descriptors, TCP sockets, I/O streams, running threads, etc.), rather than make copies of them, and leave the argument in some valid but otherwise indeterminate state. For example, move-assigning from a &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; or from a &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; may result in the argument being left empty. This is not, however, a guarantee. A move assignment is less, not more restrictively defined than ordinary assignment; where ordinary assignment must leave two copies of data at completion, move assignment is required to leave only one.</source>
          <target state="translated">移動割り当て演算子は通常、コピーを作成するのではなく、引数が保持するリソース（動的に割り当てられたオブジェクトへのポインター、ファイル記述子、TCPソケット、I / Oストリーム、実行中のスレッドなど）を「盗み取り」、引数は有効ですが、それ以外は不確定な状態です。たとえば、 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; からmove-assigningを実行すると、引数が空のままになる場合があります。ただし、これは保証ではありません。移動割り当ては、通常の割り当てよりも限定的ではなく、少なくなります。通常の割り当てでは、完了時にデータのコピーを2つ残しておく必要がありますが、移動割り当てでは、1つだけ残しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="389a7c6fdc797b8f1865d27d1759a2d438b0f975" translate="yes" xml:space="preserve">
          <source>Move assigns the file stream &lt;code&gt;other&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;, effectively move-assigning both the &lt;code&gt;&lt;a href=&quot;../basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt; base class and the associated &lt;code&gt;&lt;a href=&quot;../basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Moveはファイルストリーム &lt;code&gt;other&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; に割り当て、 &lt;code&gt;&lt;a href=&quot;../basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt; 基本クラスと関連する &lt;code&gt;&lt;a href=&quot;../basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt; 両方を効果的に移動割り当てます。</target>
        </trans-unit>
        <trans-unit id="24f428bf7dd6f1e0c847ba71b49720a8f401e750" translate="yes" xml:space="preserve">
          <source>Move assigns the file stream &lt;code&gt;other&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;, effectively move-assigning both the &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt; base class and the associated &lt;code&gt;&lt;a href=&quot;../basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Moveはファイルストリーム &lt;code&gt;other&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; に割り当て、 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt; 基本クラスと関連する &lt;code&gt;&lt;a href=&quot;../basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt; 両方を効果的に移動割り当てます。</target>
        </trans-unit>
        <trans-unit id="16356f1d24da83c00f7fba21a216c445c97ce389" translate="yes" xml:space="preserve">
          <source>Move assigns the file stream &lt;code&gt;other&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;, effectively move-assigning both the &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt; base class and the associated &lt;code&gt;&lt;a href=&quot;../basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Moveはファイルストリーム &lt;code&gt;other&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; に割り当て、 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt; 基本クラスと関連する &lt;code&gt;&lt;a href=&quot;../basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt; 両方を効果的に移動割り当てます。</target>
        </trans-unit>
        <trans-unit id="33ed75bd9ae7d7e710f7cb59e2701e5a3f320cb2" translate="yes" xml:space="preserve">
          <source>Move assigns the string stream &lt;code&gt;other&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;, effectively move-assigning both the &lt;code&gt;&lt;a href=&quot;../basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt; base class and the associated &lt;code&gt;&lt;a href=&quot;../basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Moveは文字列ストリーム &lt;code&gt;other&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; に割り当て、 &lt;code&gt;&lt;a href=&quot;../basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt; 基本クラスと関連する &lt;code&gt;&lt;a href=&quot;../basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt; 両方を効果的に移動割り当てます。</target>
        </trans-unit>
        <trans-unit id="8b304cb7e35b160ac11b6e6da6fcb29cbf8bd2ea" translate="yes" xml:space="preserve">
          <source>Move assigns the string stream &lt;code&gt;other&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;, effectively move-assigning both the &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt; base class and the associated &lt;code&gt;&lt;a href=&quot;../basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Moveは文字列ストリーム &lt;code&gt;other&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; に割り当て、 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt; 基本クラスと関連する &lt;code&gt;&lt;a href=&quot;../basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt; 両方を効果的に移動割り当てします。</target>
        </trans-unit>
        <trans-unit id="49accf919a08e0856fd5c2205f087017e46e4554" translate="yes" xml:space="preserve">
          <source>Move assigns the string stream &lt;code&gt;other&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;, effectively move-assigning both the &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt; base class and the associated &lt;code&gt;&lt;a href=&quot;../basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Moveは文字列ストリーム &lt;code&gt;other&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; に割り当て、 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt; 基本クラスと関連する &lt;code&gt;&lt;a href=&quot;../basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt; 両方を効果的に移動割り当てます。</target>
        </trans-unit>
        <trans-unit id="f3459363ce95b7b8d213432c0b3912511b7bb422" translate="yes" xml:space="preserve">
          <source>Move constructor</source>
          <target state="translated">コンストラクタの移動</target>
        </trans-unit>
        <trans-unit id="dabcb34f032395075663b5ab1b4ca93fa1b421af" translate="yes" xml:space="preserve">
          <source>Move constructor of &lt;code&gt;A&lt;/code&gt; must not throw exceptions</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; の移動コンストラクターは例外をスローしてはなりません</target>
        </trans-unit>
        <trans-unit id="76c87719ef4631d051ec31847319db90f2a38c3c" translate="yes" xml:space="preserve">
          <source>Move constructors</source>
          <target state="translated">コンストラクタの移動</target>
        </trans-unit>
        <trans-unit id="2a326707754a17c67859bb0d4a68df79e51ee6cb" translate="yes" xml:space="preserve">
          <source>Move constructors are usually noexcept, since otherwise they are unusable in any code that provides strong exception guarantee.</source>
          <target state="translated">移動コンストラクタは通常 noexcept となりますが、それ以外の場合は強力な例外保証を提供するコードでは使用できません。</target>
        </trans-unit>
        <trans-unit id="81267231da879e100dbc03825b8c3e0a2957c4a3" translate="yes" xml:space="preserve">
          <source>Move constructors obtain their instances of allocators by move-constructing from the allocator belonging to the old container.</source>
          <target state="translated">移動コンストラクタは、古いコンテナに属するアロケータから移動コンストラクタを作成してアロケータのインスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="137fb2f17f31808cc157fa054ef5ad4347edeebc" translate="yes" xml:space="preserve">
          <source>Move constructors typically &quot;steal&quot; the resources held by the argument (e.g. pointers to dynamically-allocated objects, file descriptors, TCP sockets, I/O streams, running threads, etc.) rather than make copies of them, and leave the argument in some valid but otherwise indeterminate state. For example, moving from a &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; or from a &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; may result in the argument being left empty. However, this behavior should not be relied upon. For some types, such as &lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;, the moved-from state is fully specified.</source>
          <target state="translated">ムーブコンストラクターは通常、コピーを作成するのではなく、引数が保持するリソース（動的に割り当てられたオブジェクトへのポインター、ファイル記述子、TCPソケット、I / Oストリーム、実行中のスレッドなど）を「盗み取り」、引数を残します一部は有効ですが、それ以外は不確定な状態です。たとえば、 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; から移動すると、引数が空のままになる場合があります。ただし、この動作に依存しないでください。 &lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt; などの一部のタイプでは、移動元の状態が完全に指定されています。</target>
        </trans-unit>
        <trans-unit id="a87e8b5e582f2bbe391df33ee67064ce26cb64b8" translate="yes" xml:space="preserve">
          <source>Move semantics make it possible to safely transfer resource ownership between objects, across scopes, and in and out of threads, while maintaining resource safety.</source>
          <target state="translated">Move セマンティクスでは、リソースの安全性を維持しながら、オブジェクト間、スコープ間、スレッドの内外でリソースの所有権を安全に移転することができます。</target>
        </trans-unit>
        <trans-unit id="539161ece173c055968a1a1de35756020b668502" translate="yes" xml:space="preserve">
          <source>Move-assignment will replace the allocator only if &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合にのみ、移動割り当てによってアロケーターが置き換えられます</target>
        </trans-unit>
        <trans-unit id="2a2b02d69358e93089fbaa89a49b928011b4e236" translate="yes" xml:space="preserve">
          <source>Move-assigns a synchronized output stream:</source>
          <target state="translated">Move-同期化された出力ストリームを割り当てます。</target>
        </trans-unit>
        <trans-unit id="729a0dfe5f81eedccb7e27b2fac2b5add97556cb" translate="yes" xml:space="preserve">
          <source>MoveAssignable</source>
          <target state="translated">MoveAssignable</target>
        </trans-unit>
        <trans-unit id="502c9efbaad373888b5ccbb225e0b2b8dcc695c1" translate="yes" xml:space="preserve">
          <source>MoveConstructible</source>
          <target state="translated">MoveConstructible</target>
        </trans-unit>
        <trans-unit id="47b28d1ca8cc2963e3c114ddac02f3738d7266e5" translate="yes" xml:space="preserve">
          <source>MoveInsertable</source>
          <target state="translated">MoveInsertable</target>
        </trans-unit>
        <trans-unit id="0cba8c550dfeac021edea6a142972a2b3c4254ac" translate="yes" xml:space="preserve">
          <source>Moves elements from another &lt;code&gt;forward_list&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">要素を別の &lt;code&gt;forward_list&lt;/code&gt; から &lt;code&gt;*this&lt;/code&gt; に移動します。</target>
        </trans-unit>
        <trans-unit id="f642e2f2760b86f5ae81c771704418f0a85fea71" translate="yes" xml:space="preserve">
          <source>Moves or renames the filesystem object identified by &lt;code&gt;old_p&lt;/code&gt; to &lt;code&gt;new_p&lt;/code&gt; as if by the POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/rename.html&quot;&gt;rename&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;old_p&lt;/code&gt; で識別されたファイルシステムオブジェクトを、POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/rename.html&quot;&gt;renameの&lt;/a&gt;ように &lt;code&gt;new_p&lt;/code&gt; に移動または名前変更します。</target>
        </trans-unit>
        <trans-unit id="78f6470d9b55060017967677bfa10f722a11ccd6" translate="yes" xml:space="preserve">
          <source>Moves the elements from the range &lt;code&gt;[first, last)&lt;/code&gt;, to another range ending at &lt;code&gt;d_last&lt;/code&gt;. The elements are moved in reverse order (the last element is moved first), but their relative order is preserved.</source>
          <target state="translated">要素を範囲 &lt;code&gt;[first, last)&lt;/code&gt; から &lt;code&gt;d_last&lt;/code&gt; で終わる別の範囲に移動します。要素は逆の順序で移動します（最後の要素が最初に移動します）が、それらの相対的な順序は保持されます。</target>
        </trans-unit>
        <trans-unit id="502b5aeda54563820fc7b31c565eaaa6bcbf6e12" translate="yes" xml:space="preserve">
          <source>Moves the end of the view back by &lt;code&gt;n&lt;/code&gt; characters.</source>
          <target state="translated">ビューの終わりを &lt;code&gt;n&lt;/code&gt; 文字分戻します。</target>
        </trans-unit>
        <trans-unit id="e55336fdb98f11cedfd0e48efbdbb786db1d30e0" translate="yes" xml:space="preserve">
          <source>Moves the file position indicator to the beginning of the given file stream.</source>
          <target state="translated">ファイル位置インジケーターを指定されたファイルストリームの先頭に移動します。</target>
        </trans-unit>
        <trans-unit id="2fd746e8e68c6c51da4d2e5d3dd279e473ac3ff3" translate="yes" xml:space="preserve">
          <source>Moves the iterator one level up in the directory hierarchy. Invalidates all copies of the previous value of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">イテレータをディレクトリ階層で1レベル上に移動します。 &lt;code&gt;*this&lt;/code&gt; の以前の値のすべてのコピーを無効にします。</target>
        </trans-unit>
        <trans-unit id="725b5a475515852bdc56678fa33e316b36e459ef" translate="yes" xml:space="preserve">
          <source>Moves the start of the view forward by &lt;code&gt;n&lt;/code&gt; characters.</source>
          <target state="translated">ビューの先頭を &lt;code&gt;n&lt;/code&gt; 文字分前方に移動します。</target>
        </trans-unit>
        <trans-unit id="7135dfbadfa84a70be0103c96edea84447561b3b" translate="yes" xml:space="preserve">
          <source>Multibyte/wide character conversion</source>
          <target state="translated">マルチバイト/ワイド文字変換</target>
        </trans-unit>
        <trans-unit id="737f5043d52ad9a5bf99e386e8ced8ff5c737ec0" translate="yes" xml:space="preserve">
          <source>Multibyte/wide character conversions</source>
          <target state="translated">マルチバイト/ワイド文字変換</target>
        </trans-unit>
        <trans-unit id="b816bfbe5973e3f1a932359a517a19fd4cc2d3aa" translate="yes" xml:space="preserve">
          <source>Multicharacter literals were inherited by C from the B programming language. Although not specified by the C or C++ standard, compilers implement multicharacter literals as specified in B: the values of each char in the literal initialize successive bytes of the resulting integer, in big-endian zero-padded right-adjusted order, e.g. the value of &lt;code&gt;'\1'&lt;/code&gt; is &lt;code&gt;0x00000001&lt;/code&gt; and the value of &lt;code&gt;'\1\2\3\4'&lt;/code&gt; is &lt;code&gt;0x01020304&lt;/code&gt;.</source>
          <target state="translated">複数文字リテラルは、Bプログラミング言語からCに継承されました。CまたはC ++標準では指定されていませんが、コンパイラはBで指定されているように複数文字リテラルを実装します。リテラルの各文字の値は、ビッグエンディアンのゼロ詰めされた右揃えの順序で、結果の整数の連続するバイトを初期化します。 &lt;code&gt;'\1'&lt;/code&gt; であり、 &lt;code&gt;0x00000001&lt;/code&gt; のとの値 &lt;code&gt;'\1\2\3\4'&lt;/code&gt; である &lt;code&gt;0x01020304&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00762e90f2d0e1fc656e0809cb403c7716fbb355" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays</source>
          <target state="translated">多次元配列</target>
        </trans-unit>
        <trans-unit id="cf133c71b3c2efeaae5de6091eefa30415ff9388" translate="yes" xml:space="preserve">
          <source>Multimap is an associative container that contains a sorted list of key-value pairs, while permitting multiple entries with the same key. Sorting is done according to the comparison function &lt;code&gt;Compare&lt;/code&gt;, applied to the keys. Search, insertion, and removal operations have logarithmic complexity.</source>
          <target state="translated">マルチマップは、キーと値のペアのソートされたリストを含む連想コンテナであり、同じキーを持つ複数のエントリを許可します。ソートは、キーに適用される比較関数 &lt;code&gt;Compare&lt;/code&gt; に従って行われます。検索、挿入、および削除の操作は、対数的に複雑です。</target>
        </trans-unit>
        <trans-unit id="d93c4759f084c66474a537bb4779321a39600e76" translate="yes" xml:space="preserve">
          <source>Multipass guarantee</source>
          <target state="translated">マルチパス保証</target>
        </trans-unit>
        <trans-unit id="8b79533d9d6f933b934e06befaa830db21925807" translate="yes" xml:space="preserve">
          <source>Multiple adjacent bit fields are usually packed together (although this behavior is implementation-defined):</source>
          <target state="translated">複数の隣接するビットフィールドは通常一緒にパックされます(この動作は実装で定義されていますが)。</target>
        </trans-unit>
        <trans-unit id="8aba9a4022dc2b5b9217a1e0bae22b4f22da6f84" translate="yes" xml:space="preserve">
          <source>Multiple copy elisions may be chained to eliminate multiple copies.</source>
          <target state="translated">複数のコピーエリジョンを連鎖させて、複数のコピーを排除してもよい。</target>
        </trans-unit>
        <trans-unit id="ba8252d9e78468463f91fd69124355d767e70b19" translate="yes" xml:space="preserve">
          <source>Multiple functions in the same scope may have the same name, as long as their parameter lists and, for member functions, cv/ref qualifications are different. This is known as &lt;a href=&quot;overload_resolution&quot;&gt;function overloading&lt;/a&gt;. Function declarations that differ only in the return type and the noexcept specification(since C++17) cannot be overloaded.</source>
          <target state="translated">同じスコープ内の複数の関数は、それらのパラメーターリスト、およびメンバー関数の場合はcv / ref修飾が異なる限り、同じ名前を持つことができます。これは、&lt;a href=&quot;overload_resolution&quot;&gt;関数のオーバーロード&lt;/a&gt;と呼ばれます。戻りの型とnoexcept仕様のみが異なる関数宣言（C ++ 17以降）はオーバーロードできません。</target>
        </trans-unit>
        <trans-unit id="19da41d50ad4d265081c36d7f4e65700ca15e75b" translate="yes" xml:space="preserve">
          <source>Multiple namespace blocks with the same name are allowed. All declarations within those blocks are declared in the named scope.</source>
          <target state="translated">同じ名前の複数の名前空間ブロックを使用することができます。それらのブロック内での宣言はすべて、名前付きスコープで宣言されます。</target>
        </trans-unit>
        <trans-unit id="0ad5548e15a3586c8d471050a4ce94a8e1a22844" translate="yes" xml:space="preserve">
          <source>Multiple overloads of &lt;code&gt;f()&lt;/code&gt; declared before the</source>
          <target state="translated">の前に宣言された &lt;code&gt;f()&lt;/code&gt; の複数のオーバーロード</target>
        </trans-unit>
        <trans-unit id="7732a546fbb87f09193f1be1a7646b62b57f3a87" translate="yes" xml:space="preserve">
          <source>Multiple threads may use &lt;code&gt;fetch_sub&lt;/code&gt; to concurrently process an indexed container.</source>
          <target state="translated">複数のスレッドが &lt;code&gt;fetch_sub&lt;/code&gt; を使用して、インデックス付きコンテナを同時に処理する場合があります。</target>
        </trans-unit>
        <trans-unit id="98b77f5ad932fcd3f371127c2c40dc5f446e3196" translate="yes" xml:space="preserve">
          <source>Multiplication of the largest subnormal number by the number one machine epsilon greater than 1.0 gives the tiny value 0x0.fffffffffffff8p-1022 before rounding, but normal value 1p-1022 after rounding. The implementation used to execute this test (IBM Power7) detects tinyness before rounding.</source>
          <target state="translated">最大の亜正規数と1.0より大きいマシンイプシロン数を乗算すると、丸め前には小さな値0x0.ffffffffffff8p-1022が得られますが、丸め後には通常の値1p-1022が得られます。このテストを実行するために使用された実装(IBM Power7)は、丸めの前にちっぽけさを検出します。</target>
        </trans-unit>
        <trans-unit id="3385a32109aa5346add0ca1e71e6f6b9c5a102b4" translate="yes" xml:space="preserve">
          <source>Multiplication, division, and remainder</source>
          <target state="translated">掛け算・割り算・余り</target>
        </trans-unit>
        <trans-unit id="2e1863d77d06e578e88a57a55375c7c7a23d1f8f" translate="yes" xml:space="preserve">
          <source>Multiplicative operators</source>
          <target state="translated">乗算演算子</target>
        </trans-unit>
        <trans-unit id="4ababc1f5e400d86b62ba5912633f6b986ca9b90" translate="yes" xml:space="preserve">
          <source>Must return a &lt;code&gt;Type&amp;amp;&lt;/code&gt;, and afterwards, &lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;nullptr&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Type&amp;amp;&lt;/code&gt; を返す必要があり、その後、 &lt;code&gt;p&lt;/code&gt; は &lt;code&gt;nullptr&lt;/code&gt; と同等</target>
        </trans-unit>
        <trans-unit id="b01214e920406c4416e08d1f978fb4406baa93f9" translate="yes" xml:space="preserve">
          <source>Must return a value that is contextually convertible to bool.</source>
          <target state="translated">コンテキスト的に bool に変換可能な値を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="8d217e2a97fe63fa480adebe696bb142ffa30b17" translate="yes" xml:space="preserve">
          <source>Mutable is used to specify that the member does not affect the externally visible state of the class (as often used for mutexes, memo caches, lazy evaluation, and access instrumentation).</source>
          <target state="translated">Mutable は、そのメンバがクラスの外部から見える状態に影響を与えないことを指定するために使用されます (ミューテックス、メモキャッシュ、遅延評価、アクセス・インストルメンテーションでよく使用されます)。</target>
        </trans-unit>
        <trans-unit id="bd2b0f087b02e413546a53c4f93f4cdf1581cc30" translate="yes" xml:space="preserve">
          <source>Mutex</source>
          <target state="translated">Mutex</target>
        </trans-unit>
        <trans-unit id="bcf81f2350a4ddaf862acb054f396be56471328b" translate="yes" xml:space="preserve">
          <source>Mutex, the sole type in &lt;code&gt;MutexTypes...&lt;/code&gt;</source>
          <target state="translated">Mutex、 &lt;code&gt;MutexTypes...&lt;/code&gt; の唯一の型...</target>
        </trans-unit>
        <trans-unit id="623593159179e7d5bbf03c1ec57146a2c9e50ba8" translate="yes" xml:space="preserve">
          <source>MutexTypes</source>
          <target state="translated">MutexTypes</target>
        </trans-unit>
        <trans-unit id="bd89464f515bc7c1945f885ef807721ee91c256b" translate="yes" xml:space="preserve">
          <source>Mutual exclusion</source>
          <target state="translated">相互排除</target>
        </trans-unit>
        <trans-unit id="07e8ae8c3cca7c116c9e3ce24998de394a271a66" translate="yes" xml:space="preserve">
          <source>Mutual exclusion algorithms prevent multiple threads from simultaneously accessing shared resources. This prevents data races and provides support for synchronization between threads.</source>
          <target state="translated">相互排除アルゴリズムは、複数のスレッドが共有リソースに同時にアクセスすることを防ぎます。これにより、データ競合を防ぎ、スレッド間の同期化をサポートします。</target>
        </trans-unit>
        <trans-unit id="353bddf63f102523e0e94e44ec2f4291ad09b7ae" translate="yes" xml:space="preserve">
          <source>Mutual exclusion locks, such as &lt;code&gt;&lt;a href=&quot;../thread/mutex&quot;&gt;std::mutex&lt;/a&gt;&lt;/code&gt; or &lt;a href=&quot;atomic_flag&quot;&gt;atomic spinlock&lt;/a&gt;, are an example of release-acquire synchronization: when the lock is released by thread A and acquired by thread B, everything that took place in the critical section (before the release) in the context of thread A has to be visible to thread B (after the acquire) which is executing the same critical section.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../thread/mutex&quot;&gt;std::mutex&lt;/a&gt;&lt;/code&gt; や&lt;a href=&quot;atomic_flag&quot;&gt;atomic spinlock&lt;/a&gt;などの相互排他ロックは、解放と取得の同期の例です。ロックがスレッドAによって解放され、スレッドBによって取得された場合、クリティカルセクションで発生したすべてのこと（リリース前）スレッドAのコンテキストでは、同じクリティカルセクションを実行しているスレッドB（取得後）から見える必要があります。</target>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="ba50285183f637f345b41123255cc7bf40eee6e3" translate="yes" xml:space="preserve">
          <source>N applications of &lt;code&gt;operator/=(path(&quot;..&quot;))&lt;/code&gt;, followed by</source>
          <target state="translated">&lt;code&gt;operator/=(path(&quot;..&quot;))&lt;/code&gt; の N個のアプリケーション、その後に続く</target>
        </trans-unit>
        <trans-unit id="55893568e7cbf1b7a6b29a66a2452f93270c34d9" translate="yes" xml:space="preserve">
          <source>N may be any permutation of a1, ..., aN and</source>
          <target state="translated">Nはa1,...,aNの任意の並べ替えであり</target>
        </trans-unit>
        <trans-unit id="1250d9586efc9d80cc6c7239aa2177dcff4d7295" translate="yes" xml:space="preserve">
          <source>N op I))))</source>
          <target state="translated">N at I))))</target>
        </trans-unit>
        <trans-unit id="7f15122e3dfe9680a6663ac72323d5f09c66970e" translate="yes" xml:space="preserve">
          <source>N&amp;minus;1 op (E</source>
          <target state="translated">N&amp;minus;1 op（E</target>
        </trans-unit>
        <trans-unit id="8613cc7937238f206e33227381780a70bc3d7fb9" translate="yes" xml:space="preserve">
          <source>N)</source>
          <target state="translated">N)</target>
        </trans-unit>
        <trans-unit id="8b19c15f1ccf07bf3626b4a8b2548d375ec3fa3f" translate="yes" xml:space="preserve">
          <source>N) is defined as follows:</source>
          <target state="translated">n)は以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="a100c474d11fd67b64c08abc7f23a4a2f4cc1e66" translate="yes" xml:space="preserve">
          <source>N)) for any K where 1 &amp;lt; K+1 = M &amp;le; N</source>
          <target state="translated">N））1 &amp;lt;K + 1 = M&amp;le;NのKの場合</target>
        </trans-unit>
        <trans-unit id="77952d1fe50f676e5e862f5a754bb0d05488449e" translate="yes" xml:space="preserve">
          <source>N)) where</source>
          <target state="translated">N))ここで</target>
        </trans-unit>
        <trans-unit id="d983d30d3a24dc6620175e14187869fa136530fc" translate="yes" xml:space="preserve">
          <source>N)))</source>
          <target state="translated">N)))</target>
        </trans-unit>
        <trans-unit id="31329860809c98077449f6ad92ec9504b89cb28b" translate="yes" xml:space="preserve">
          <source>N*log(size()+N)), where N is &lt;code&gt;source.size()&lt;/code&gt;.</source>
          <target state="translated">N * log（size（）+ N））、ここでNは &lt;code&gt;source.size()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c264d85396033becba7559b9702cd4354a3b890f" translate="yes" xml:space="preserve">
          <source>N-1 op E</source>
          <target state="translated">E上のN-1</target>
        </trans-unit>
        <trans-unit id="39b94b742092e3ba7ac4ebd9524bb1c81f255b00" translate="yes" xml:space="preserve">
          <source>N3922</source>
          <target state="translated">N3922</target>
        </trans-unit>
        <trans-unit id="3978b69456fb978edbba4310d37fe1c6ecb893f4" translate="yes" xml:space="preserve">
          <source>N4387</source>
          <target state="translated">N4387</target>
        </trans-unit>
        <trans-unit id="c44f384c13dc675d729b43652997307ca17e8a2b" translate="yes" xml:space="preserve">
          <source>N&lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">N&lt;sup&gt;2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="d82a19a46f2f7da0f84cb56740a41e0148eda5c1" translate="yes" xml:space="preserve">
          <source>NAN</source>
          <target state="translated">NAN</target>
        </trans-unit>
        <trans-unit id="f0d1c3c27252776cf6fab5b297dd84293196ad68" translate="yes" xml:space="preserve">
          <source>NRVO</source>
          <target state="translated">NRVO</target>
        </trans-unit>
        <trans-unit id="3ad6166ad6b1dfdf3797d9216ac661a1daea38f8" translate="yes" xml:space="preserve">
          <source>NRVO was mandatory in constant expressions</source>
          <target state="translated">定数式ではNRVOが必須だった</target>
        </trans-unit>
        <trans-unit id="065e03753f6454aa1d90a1883ea3bf51044f5c10" translate="yes" xml:space="preserve">
          <source>NTTP</source>
          <target state="translated">NTTP</target>
        </trans-unit>
        <trans-unit id="85476691293312e0eddef863daabeefe9aa5acfc" translate="yes" xml:space="preserve">
          <source>NUL-terminated.</source>
          <target state="translated">NUL-terminated.</target>
        </trans-unit>
        <trans-unit id="eef19c54306daa69eda49c0272623bdb5e2b341f" translate="yes" xml:space="preserve">
          <source>NULL</source>
          <target state="translated">NULL</target>
        </trans-unit>
        <trans-unit id="7929777f461a9c2e7071443c14f9e07d070abdd6" translate="yes" xml:space="preserve">
          <source>NaN values never compare equal to themselves or to other NaN values. Copying a NaN is not required, by IEEE-754, to preserve its bit representation (sign and &lt;a href=&quot;nan.2&quot;&gt;payload&lt;/a&gt;), though most implementation do.</source>
          <target state="translated">NaN値は、それ自体または他のNaN値と比較されることはありません。IEEE-754ではNaNをコピーする必要はありませんが、ほとんどの実装ではそうですが、ビット表現（符号と&lt;a href=&quot;nan.2&quot;&gt;ペイロード&lt;/a&gt;）を保持します。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="e11bc388c83c1b8b82ae73a235837ab0ef1b8869" translate="yes" xml:space="preserve">
          <source>Name lookup</source>
          <target state="translated">名前検索</target>
        </trans-unit>
        <trans-unit id="b6bc7d50b342a34806ee88ab2690eb319c435c81" translate="yes" xml:space="preserve">
          <source>Name lookup and binding are different for</source>
          <target state="translated">名前の検索とバインディングは</target>
        </trans-unit>
        <trans-unit id="480387aa2ed9cd405fb53a80e0ad8ef0f482feba" translate="yes" xml:space="preserve">
          <source>Name lookup is the procedure by which a &lt;a href=&quot;name&quot;&gt;name&lt;/a&gt;, when encountered in a program, is associated with the &lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; that introduced it.</source>
          <target state="translated">名前のルックアップは、プログラムで遭遇したときに、その&lt;a href=&quot;name&quot;&gt;名前&lt;/a&gt;を導入した&lt;a href=&quot;declarations&quot;&gt;宣言に&lt;/a&gt;名前を関連付ける手順です。</target>
        </trans-unit>
        <trans-unit id="5ca9e948abdb518c09be2641fab9cc9d573e48a4" translate="yes" xml:space="preserve">
          <source>Name lookup rules make it impractical to declare operators in global or user-defined namespace that operate on types from the std namespace, e.g. a custom &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;operator+&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; or for &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; (unless the element types of the vector/pair are user-defined types, which would add their namespace to ADL). Such operators would not be looked up from template instantiations, such as the standard library algorithms. See &lt;a href=&quot;dependent_name&quot;&gt;dependent names&lt;/a&gt; for further details.</source>
          <target state="translated">名前のルックアップ規則はSTD名前空間の種類、例えばAカスタムで動作するグローバルまたはユーザー定義の名前空間で宣言事業者に、それは非現実的 &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;operator+&lt;/code&gt; のため &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; またはのため &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; の要素タイプがない限り（ベクター/ペアはユーザー定義型であり、ADLに名前空間が追加されます）。このような演算子は、標準ライブラリアルゴリズムなどのテンプレートのインスタンス化から検索されません。詳細については、&lt;a href=&quot;dependent_name&quot;&gt;依存名&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3013f39113916e6419f8088ed3c67869df636b9d" translate="yes" xml:space="preserve">
          <source>Named Return Value Optimization</source>
          <target state="translated">命名された収益価値の最適化</target>
        </trans-unit>
        <trans-unit id="f44438b5a472bd21faa49423e23b1eb88ebdfc5f" translate="yes" xml:space="preserve">
          <source>Named requirements</source>
          <target state="translated">指定された要件</target>
        </trans-unit>
        <trans-unit id="5d20b518c977a68ada4a25be86f69791473df0e8" translate="yes" xml:space="preserve">
          <source>Named sets of such requirements are called</source>
          <target state="translated">このような要件の名前付きセットは、以下のように呼ばれます。</target>
        </trans-unit>
        <trans-unit id="3feb744677b698e301be638132eacb767a8d61ef" translate="yes" xml:space="preserve">
          <source>Named sockets are UNIX domain sockets constructed with &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html&quot;&gt;socket&lt;/a&gt; and &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html&quot;&gt;bind&lt;/a&gt; POSIX APIs, which may be used for advanced interprocess communication. In particular, they may be used to transport open file descriptors from one running process to another.</source>
          <target state="translated">名前付きソケットは、&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html&quot;&gt;ソケット&lt;/a&gt;および&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html&quot;&gt;バインド&lt;/a&gt; POSIX APIで構築されたUNIXドメインソケットであり、高度なプロセス間通信に使用できます。特に、開いているファイル記述子を実行中のプロセスから別のプロセスに転送するために使用できます。</target>
        </trans-unit>
        <trans-unit id="2b7c08c3ab75f37e2da656c1aab228f5f3a793b1" translate="yes" xml:space="preserve">
          <source>Names</source>
          <target state="translated">Names</target>
        </trans-unit>
        <trans-unit id="c9b864b84da76323cdde2ab3f20373514e5220f1" translate="yes" xml:space="preserve">
          <source>Names and identifiers</source>
          <target state="translated">名前と識別子</target>
        </trans-unit>
        <trans-unit id="5dba54e935821f929da3325c377d095d8e0b34ed" translate="yes" xml:space="preserve">
          <source>Names at the top-level namespace scope (file scope in C) that are &lt;code&gt;const&lt;/code&gt; and not &lt;code&gt;extern&lt;/code&gt; have external linkage in C, but internal linkage in C++.</source>
          <target state="translated">最上位の名前空間スコープ（Cのファイルスコープ）の名前で、 &lt;code&gt;const&lt;/code&gt; で &lt;code&gt;extern&lt;/code&gt; ではない名前には、Cでは外部リンケージがありますが、C ++では内部リンケージがあります。</target>
        </trans-unit>
        <trans-unit id="3063d4cd8cda973d2c9e30f2ca7be83f7c01f92d" translate="yes" xml:space="preserve">
          <source>Names encountered in a program are associated with the declarations that introduced them using &lt;a href=&quot;lookup&quot;&gt;name lookup&lt;/a&gt;. Each name is only valid within a part of the program called its &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;. Some names have &lt;a href=&quot;storage_duration&quot;&gt;linkage&lt;/a&gt; which makes them refer to the same entities when they appear in different scopes or translation units.</source>
          <target state="translated">プログラムで検出された名前は、&lt;a href=&quot;lookup&quot;&gt;名前検索&lt;/a&gt;を使用してそれらを導入した宣言に関連付けられています。各名前は、その&lt;a href=&quot;scope&quot;&gt;スコープ&lt;/a&gt;と呼ばれるプログラムの一部内でのみ有効です。一部の名前には&lt;a href=&quot;storage_duration&quot;&gt;リンケージが&lt;/a&gt;あり、それらが異なるスコープまたは翻訳単位にある場合に同じエンティティを参照します。</target>
        </trans-unit>
        <trans-unit id="8a9aa2bab33fd05a2da5d335efe4a2e09b164f3c" translate="yes" xml:space="preserve">
          <source>Names introduced by &lt;a href=&quot;friend&quot;&gt;friend&lt;/a&gt; declarations within a non-local class X become members of the innermost enclosing namespace of X, but they do not become visible to ordinary &lt;a href=&quot;lookup&quot;&gt;name lookup&lt;/a&gt; (neither &lt;a href=&quot;unqualified_lookup&quot;&gt;unqualified&lt;/a&gt; nor &lt;a href=&quot;qualified_lookup&quot;&gt;qualified&lt;/a&gt;) unless a matching declaration is provided at namespace scope, either before or after the class definition. Such name may be found through &lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt; which considers both namespaces and classes.</source>
          <target state="translated">非ローカルクラスX内の&lt;a href=&quot;friend&quot;&gt;フレンド&lt;/a&gt;宣言によって導入された名前は、Xの最も内側の囲んでいる名前空間のメンバーになりますが、通常の&lt;a href=&quot;lookup&quot;&gt;名前検索では&lt;/a&gt;表示されません、名前空間スコープで一致する宣言が提供されていない限り、（&lt;a href=&quot;unqualified_lookup&quot;&gt;非修飾で&lt;/a&gt;も&lt;a href=&quot;qualified_lookup&quot;&gt;修飾で&lt;/a&gt;もない）またはクラス定義の後。このような名前は、名前空間とクラスの両方を考慮した&lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt;を通じて見つけることができます。</target>
        </trans-unit>
        <trans-unit id="c1935b005dc184ad84620c13afec466318085ca9" translate="yes" xml:space="preserve">
          <source>Names introduced into a namespace scope by a using-declaration can be used just like any other names, including qualified lookup from other scopes:</source>
          <target state="translated">使用宣言によって名前空間スコープに導入された名前は、他のスコープからの修飾検索を含め、他の名前と同様に使用することができます。</target>
        </trans-unit>
        <trans-unit id="abc354041c1ad60236f2a24daaf11e19bd038ee8" translate="yes" xml:space="preserve">
          <source>Names of &lt;a href=&quot;../language/reference&quot;&gt;rvalue reference&lt;/a&gt; variables are &lt;a href=&quot;../language/value_category&quot;&gt;lvalues&lt;/a&gt; and have to be converted to &lt;a href=&quot;../language/value_category&quot;&gt;xvalues&lt;/a&gt; to be bound to the function overloads that accept rvalue reference parameters, which is why &lt;a href=&quot;../language/move_constructor&quot;&gt;move constructors&lt;/a&gt; and &lt;a href=&quot;../language/move_operator&quot;&gt;move assignment operators&lt;/a&gt; typically use &lt;code&gt;std::move&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../language/reference&quot;&gt;右辺値参照&lt;/a&gt;変数の名前は&lt;a href=&quot;../language/value_category&quot;&gt;左辺値で&lt;/a&gt;あり、右辺値参照パラメータを受け入れる関数オーバーロードにバインドするには、&lt;a href=&quot;../language/value_category&quot;&gt;x &lt;/a&gt;値に変換する必要があります。これが理由です。&lt;a href=&quot;../language/move_constructor&quot;&gt;移動コンストラクター&lt;/a&gt;と&lt;a href=&quot;../language/move_operator&quot;&gt;移動代入演算子が&lt;/a&gt;通常 &lt;code&gt;std::move&lt;/code&gt; 使用するです。</target>
        </trans-unit>
        <trans-unit id="db1e5452b458ffc1ce5b7de086a71fa73749c0e6" translate="yes" xml:space="preserve">
          <source>Names of &lt;code&gt;thread_local&lt;/code&gt; variables with internal or external linkage referred from different scopes may refer to the same or to different instances depending on whether the code is executing in the same or in different threads.</source>
          <target state="translated">異なるスコープから参照される内部または外部リンケージを持つ &lt;code&gt;thread_local&lt;/code&gt; 変数の名前は、コードが同じスレッドで実行されているか別のスレッドで実行されているかに応じて、同じインスタンスまたは異なるインスタンスを参照します。</target>
        </trans-unit>
        <trans-unit id="e8dae2c410db83e5bd98bf3a1359488efbedbb6b" translate="yes" xml:space="preserve">
          <source>Names of any class members can only be used in four contexts:</source>
          <target state="translated">任意のクラス・メンバーの名前は、4 つのコンテキストでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="b43957c55d7ffebeb7c1698dd30daec7bfa5f9cc" translate="yes" xml:space="preserve">
          <source>Names that appear in expression-list or brace-init-list are evaluated in scope of the constructor:</source>
          <target state="translated">expression-list や brace-init-list に含まれる名前は、コンストラクタのスコープで評価されます。</target>
        </trans-unit>
        <trans-unit id="68a7b15b97ad42eb5d4cb110e1e2208e8db49ff3" translate="yes" xml:space="preserve">
          <source>Namespace &lt;code&gt;std::regex_constants&lt;/code&gt;</source>
          <target state="translated">名前空間 &lt;code&gt;std::regex_constants&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69aee25fb2b7251f96c077bac9928b36b2f0092d" translate="yes" xml:space="preserve">
          <source>Namespace alias</source>
          <target state="translated">名前空間エイリアス</target>
        </trans-unit>
        <trans-unit id="15feeecb0e0bd445b4ec4c17a571fe55224d4791" translate="yes" xml:space="preserve">
          <source>Namespace aliases</source>
          <target state="translated">名前空間エイリアス</target>
        </trans-unit>
        <trans-unit id="9d3514105c3b51acfe33dab56a9ad9112ffd5783" translate="yes" xml:space="preserve">
          <source>Namespace aliases allow the programmer to define an alternate name for a namespace.</source>
          <target state="translated">名前空間エイリアスを使用すると、プログラマは名前空間の代替名を定義することができます。</target>
        </trans-unit>
        <trans-unit id="e8ea1a0aa60760b378411518c66664dc0aebf042" translate="yes" xml:space="preserve">
          <source>Namespace declaration</source>
          <target state="translated">名前空間宣言</target>
        </trans-unit>
        <trans-unit id="1a0de11ba24e7fe94cf87f5c813cc5958139da55" translate="yes" xml:space="preserve">
          <source>Namespace definition</source>
          <target state="translated">名前空間の定義</target>
        </trans-unit>
        <trans-unit id="7abe5aadb217584bf97533759728f989dd4a7122" translate="yes" xml:space="preserve">
          <source>Namespace definitions are only allowed at namespace scope, including the global scope.</source>
          <target state="translated">名前空間の定義は、グローバルスコープを含む名前空間スコープでのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="b2fb3696d13cbe0ff41f03594167b5ebd95c58c5" translate="yes" xml:space="preserve">
          <source>Namespace members</source>
          <target state="translated">名前空間のメンバー</target>
        </trans-unit>
        <trans-unit id="6ef4650b141111ec251678ed3bf718413e6ab572" translate="yes" xml:space="preserve">
          <source>Namespace scope</source>
          <target state="translated">名前空間スコープ</target>
        </trans-unit>
        <trans-unit id="98cc70f9e7340456a64ac9fdf7b1eede2f30a8e3" translate="yes" xml:space="preserve">
          <source>Namespace-scope anonymous unions must be declared static unless they appear in an unnamed namespace.</source>
          <target state="translated">名前空間スコープ匿名組合は、名前のない名前空間に現れない限り、静的に宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="be09a63bd1995e99cd22064cdc39a4bae464033d" translate="yes" xml:space="preserve">
          <source>Namespaces</source>
          <target state="translated">Namespaces</target>
        </trans-unit>
        <trans-unit id="6ade31b5444def27ab30c5c64abc17a78b593fc9" translate="yes" xml:space="preserve">
          <source>Namespaces provide a method for preventing name conflicts in large projects.</source>
          <target state="translated">名前空間は、大規模プロジェクトでの名前の競合を防ぐための方法を提供します。</target>
        </trans-unit>
        <trans-unit id="8655490bdfd99b50e55540721bde65050a10ca66" translate="yes" xml:space="preserve">
          <source>Narrow and wide orientation</source>
          <target state="translated">狭くて広い方向</target>
        </trans-unit>
        <trans-unit id="d6f5cbdcb5ba2c44829f73b263418c7c018a552d" translate="yes" xml:space="preserve">
          <source>Narrow character</source>
          <target state="translated">狭義の文字</target>
        </trans-unit>
        <trans-unit id="00612e7ff2b16d807e5421756762dc8ce833f708" translate="yes" xml:space="preserve">
          <source>Narrow/multibyte character</source>
          <target state="translated">ナロー/マルチバイト文字</target>
        </trans-unit>
        <trans-unit id="02ec8760336fb09c698a2687c11d370174266ee2" translate="yes" xml:space="preserve">
          <source>Narrowing conversions</source>
          <target state="translated">狭義の変換</target>
        </trans-unit>
        <trans-unit id="aa2311a58a83585cb18d67d0ab7bfd5d14fb5130" translate="yes" xml:space="preserve">
          <source>Narrowing is always successful and is always reversible (by calling &lt;code&gt;&lt;a href=&quot;widen&quot;&gt;widen()&lt;/a&gt;&lt;/code&gt;) for all characters from the basic source character set (latin letters, digits, and punctuations required to write a C++ program).</source>
          <target state="translated">絞り込みは常に成功し、常に元に戻すことができます（ &lt;code&gt;&lt;a href=&quot;widen&quot;&gt;widen()&lt;/a&gt;&lt;/code&gt; し、基本ソース文字セットのすべての文字（ラテン文字、数字、およびC ++プログラムの記述に必要な句読点）に対して widen（）を）です。</target>
        </trans-unit>
        <trans-unit id="d58074e0c552f383bd0ec261612a709f3413f4a1" translate="yes" xml:space="preserve">
          <source>Narrowing of any digit character guarantees that if the result is subtracted from the character literal &lt;code&gt;'0'&lt;/code&gt;, the difference equals the digit value of the original character.</source>
          <target state="translated">数字を狭めると、結果が文字リテラルから差し引かれることが保証されます &lt;code&gt;'0'&lt;/code&gt; 、その差が元の文字の数字の値と等しくなるます。</target>
        </trans-unit>
        <trans-unit id="8dbe486ad6ba7275ed9b6d093c1f795836a5e22a" translate="yes" xml:space="preserve">
          <source>Narrowing, if successful, preserves all character classification categories known to &lt;code&gt;&lt;a href=&quot;is&quot;&gt;is()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">絞り込みに成功した場合、 &lt;code&gt;&lt;a href=&quot;is&quot;&gt;is()&lt;/a&gt;&lt;/code&gt; に認識されているすべての文字分類カテゴリが保持されます。</target>
        </trans-unit>
        <trans-unit id="6a4742e8a9730fb2d9ea65a3e7a57cdd49ba4360" translate="yes" xml:space="preserve">
          <source>Narrows a wide character &lt;code&gt;c&lt;/code&gt; if its multibyte character equivalent in the initial shift state is a single byte.</source>
          <target state="translated">ワイド文字 &lt;code&gt;c&lt;/code&gt; を、最初のシフト状態で対応するマルチバイト文字が1バイトの場合は、それを狭めます。</target>
        </trans-unit>
        <trans-unit id="e856674ce1f8ad1d8b857f019d9b05cec7538227" translate="yes" xml:space="preserve">
          <source>Native handle</source>
          <target state="translated">ネイティブハンドル</target>
        </trans-unit>
        <trans-unit id="db030e0b7158dfda8f21b860c6287b6a5341fd7b" translate="yes" xml:space="preserve">
          <source>Native pathname format</source>
          <target state="translated">ネイティブパス名フォーマット</target>
        </trans-unit>
        <trans-unit id="ca5b116732b30e4ee615a6e0c70fc845595ecbca" translate="yes" xml:space="preserve">
          <source>Nearest integer floating point operations</source>
          <target state="translated">近い整数の浮動小数点演算</target>
        </trans-unit>
        <trans-unit id="dfaab505f47d58982ff129c9d7d12a74d6eb3cc8" translate="yes" xml:space="preserve">
          <source>Negative value if &lt;code&gt;lhs&lt;/code&gt; appears before &lt;code&gt;rhs&lt;/code&gt; in lexicographical order.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; が辞書式順序で &lt;code&gt;rhs&lt;/code&gt; の前にある場合は負の値。</target>
        </trans-unit>
        <trans-unit id="87491531316873a8136087161a4d5513bf956b22" translate="yes" xml:space="preserve">
          <source>Negative value if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; が負の場合は負の値</target>
        </trans-unit>
        <trans-unit id="273543511f403081caee3e55984dd6ca3f79876b" translate="yes" xml:space="preserve">
          <source>Negative value if &lt;code&gt;s1&lt;/code&gt; is</source>
          <target state="translated">負の値 &lt;code&gt;s1&lt;/code&gt; がは</target>
        </trans-unit>
        <trans-unit id="ceca0034b729fc521079379a02d62ac4de8dc88a" translate="yes" xml:space="preserve">
          <source>Negative value if the first differing byte (reinterpreted as &lt;code&gt;unsigned char&lt;/code&gt;) in &lt;code&gt;lhs&lt;/code&gt; is less than the corresponding byte in &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; の最初の異なるバイト（ &lt;code&gt;unsigned char&lt;/code&gt; として再解釈された）が &lt;code&gt;rhs&lt;/code&gt; の対応するバイトより小さい場合は負の値。</target>
        </trans-unit>
        <trans-unit id="282e0a77a7206269a1ec03af267a85cf22416793" translate="yes" xml:space="preserve">
          <source>Negative value if the value of the first differing wide character in &lt;code&gt;lhs&lt;/code&gt; is less than the value of the corresponding wide character in &lt;code&gt;rhs&lt;/code&gt;: &lt;code&gt;lhs&lt;/code&gt; precedes &lt;code&gt;rhs&lt;/code&gt; in lexicographical order.</source>
          <target state="translated">負の値の最初の異なるワイド文字の値ならば &lt;code&gt;lhs&lt;/code&gt; 、対応するワイド文字の値よりも小さい &lt;code&gt;rhs&lt;/code&gt; ： &lt;code&gt;lhs&lt;/code&gt; 先行の &lt;code&gt;rhs&lt;/code&gt; 辞書式順序インチ</target>
        </trans-unit>
        <trans-unit id="f8dce9bcbeee998252a5f32963f3424cf3f7e0d3" translate="yes" xml:space="preserve">
          <source>Negators</source>
          <target state="translated">Negators</target>
        </trans-unit>
        <trans-unit id="f7a7b461a2da4ad85b1265cf9c4d04f21c5ffddb" translate="yes" xml:space="preserve">
          <source>Nested allocator class</source>
          <target state="translated">入れ子になったアロケータクラス</target>
        </trans-unit>
        <trans-unit id="25e8c5172b7e5d7b584594533302eddfd95e8bc0" translate="yes" xml:space="preserve">
          <source>Nested class declarations obey &lt;a href=&quot;access&quot;&gt;member access&lt;/a&gt; specifiers, a private member class cannot be named outside the scope of the enclosing class, although objects of that class may be manipulated:</source>
          <target state="translated">ネストされたクラス宣言は従います &lt;a href=&quot;access&quot;&gt;メンバーアクセス&lt;/a&gt;指定子にます。プライベートメンバークラスは、そのクラスのオブジェクトを操作することはできますが、外側のクラスのスコープ外では指定できません。</target>
        </trans-unit>
        <trans-unit id="65046fcf73f5e6ac3773f70ea1badbd965d975c0" translate="yes" xml:space="preserve">
          <source>Nested classes</source>
          <target state="translated">入れ子になったクラス</target>
        </trans-unit>
        <trans-unit id="1b5839fbae7339935c12e6b4b66fd2e922b275ad" translate="yes" xml:space="preserve">
          <source>Nested classes can be forward-declared and later defined, either within the same enclosing class body, or outside of it:</source>
          <target state="translated">入れ子になったクラスは、前方に宣言して後から定義することができます。</target>
        </trans-unit>
        <trans-unit id="64808f48e8bd759c2c2b1d7832534e1bd54d3712" translate="yes" xml:space="preserve">
          <source>Nested requirements</source>
          <target state="translated">入れ子になった要件</target>
        </trans-unit>
        <trans-unit id="ea849e260b8735345217e4f53f113c9fcde5b394" translate="yes" xml:space="preserve">
          <source>Network is down</source>
          <target state="translated">ネットワークがダウンしています</target>
        </trans-unit>
        <trans-unit id="72752d57c3c282cc523b7154bbf54840e4683a46" translate="yes" xml:space="preserve">
          <source>Network unreachable</source>
          <target state="translated">ネットワークに接続できない</target>
        </trans-unit>
        <trans-unit id="80c3052d33ccdee15ffaaa110c5c39072495fe63" translate="yes" xml:space="preserve">
          <source>Never</source>
          <target state="translated">Never</target>
        </trans-unit>
        <trans-unit id="3c4e963fe5e99296e8a4ab9dc3cfa9311f0e21c6" translate="yes" xml:space="preserve">
          <source>New operators such as &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;amp;|&lt;/code&gt; cannot be created.</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 、またはなどの新しい演算子 &lt;code&gt;&amp;amp;|&lt;/code&gt; 作成できません。</target>
        </trans-unit>
        <trans-unit id="ede4611858dc430c3ea6396ebc14993ab64f79d1" translate="yes" xml:space="preserve">
          <source>New-expressions are allowed to elide or combine allocations made through replaceable allocation functions. In case of elision, the storage may be provided by the compiler without making the call to an allocation function (this also permits optimizing out unused new-expression). In case of combining, the allocation made by a new-expression E1 may be extended to provide additional storage for another new-expression E2 if all of the following is true:</source>
          <target state="translated">新式は、置換可能なアロケーション関数を介して行われたアロケーションを省略したり、結合したりすることができます。省略の場合は、割り当て関数を呼び出すことなく、コンパイラがストレージを提供することができます(これにより、未使用の新式を最適化することもできます)。結合の場合、以下のすべてが真であれば、ある新式E1による割り当てを拡張して、別の新式E2のために追加のストレージを提供することができます。</target>
        </trans-unit>
        <trans-unit id="493d0f0040b36ea8241324dced2e890dfb4b6119" translate="yes" xml:space="preserve">
          <source>Newer &quot;Minimum standard&quot;, recommended by Park, Miller, and Stockmeyer in 1993.</source>
          <target state="translated">1993年にパーク、ミラー、ストックマイヤーが推奨した新しい「最低基準」。</target>
        </trans-unit>
        <trans-unit id="79ac146d5b7ee7fd72cce1790f7da1b8a2f032a2" translate="yes" xml:space="preserve">
          <source>Newlines are kept, and it's unspecified whether non-newline whitespace sequences may be collapsed into single space characters.</source>
          <target state="translated">改行は保持され、非改行の空白文字列が単一のスペース文字に折りたたまれてもよいかどうかは不明です。</target>
        </trans-unit>
        <trans-unit id="de67bdd002151bf79b109ea669e76942392196e1" translate="yes" xml:space="preserve">
          <source>Niebloids</source>
          <target state="translated">Niebloids</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="f130b9c617343f8c039eb502e65e2bfe55e02212" translate="yes" xml:space="preserve">
          <source>No STREAM resources</source>
          <target state="translated">STREAMのリソースはありません。</target>
        </trans-unit>
        <trans-unit id="7dd7bd839e3806d4920233a25bbd072dba9f30a1" translate="yes" xml:space="preserve">
          <source>No additional synchronization guarantees other than what's already provided by shared state.</source>
          <target state="translated">共有状態で既に提供されているもの以外の追加の同期保証はありません。</target>
        </trans-unit>
        <trans-unit id="6bcc62e49c9ca3ab05ca96f0f3e27fde373feffa" translate="yes" xml:space="preserve">
          <source>No bounds checking is performed: the behavior is undefined if &lt;code&gt;pos &amp;gt;= size()&lt;/code&gt;.</source>
          <target state="translated">境界チェックは実行されません。動作は未定義です。 &lt;code&gt;pos &amp;gt;= size()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e792e65ee8a80fd8989ad1b66325f180ccd8b365" translate="yes" xml:space="preserve">
          <source>No buffer space available</source>
          <target state="translated">利用可能なバッファスペースがない</target>
        </trans-unit>
        <trans-unit id="099e11888438840a8566c983d5b1e6de2dad8524" translate="yes" xml:space="preserve">
          <source>No child processes</source>
          <target state="translated">子プロセスなし</target>
        </trans-unit>
        <trans-unit id="8959031a2aef1c7c15f7657b554e13b4559478e9" translate="yes" xml:space="preserve">
          <source>No destructors for automatic objects are called. If replacing of &lt;code&gt;std::longjmp&lt;/code&gt; with &lt;code&gt;throw&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;setjmp&quot;&gt;setjmp&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;catch&lt;/code&gt; would execute a non-trivial destructor for any automatic object, the behavior of such &lt;code&gt;std::longjmp&lt;/code&gt; is undefined.</source>
          <target state="translated">自動オブジェクトのデストラクタは呼び出されません。 &lt;code&gt;std::longjmp&lt;/code&gt; を &lt;code&gt;throw&lt;/code&gt; に、 &lt;code&gt;&lt;a href=&quot;setjmp&quot;&gt;setjmp&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;catch&lt;/code&gt; に置き換えると、自動オブジェクトに対して重要なデストラクタが実行される場合、そのような動作 &lt;code&gt;std::longjmp&lt;/code&gt; は定義されていません。</target>
        </trans-unit>
        <trans-unit id="b7ad248d7445e862eb6d5aac0fef62ca217cfdbf" translate="yes" xml:space="preserve">
          <source>No elements are copied or moved, only the internal pointers of the container nodes are repointed. All pointers and references to the transferred elements remain valid, but now refer into &lt;code&gt;*this&lt;/code&gt;, not into &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">要素のコピーや移動は行われず、コンテナノードの内部ポインタのみが再ポイントされます。転送された要素へのすべてのポインタと参照は有効なままですが、今では &lt;code&gt;source&lt;/code&gt; ではなく &lt;code&gt;*this&lt;/code&gt; を参照しています。</target>
        </trans-unit>
        <trans-unit id="a9ae4f5756c09ebfc4d7b62cc8ca55e5eb9ed890" translate="yes" xml:space="preserve">
          <source>No elements are copied or moved, only the internal pointers of the container nodes are repointed. All pointers and references to the transferred elements remain valid, but now refer into &lt;code&gt;*this&lt;/code&gt;, not into &lt;code&gt;source&lt;/code&gt;. Iterators referring to the transferred elements and all iterators referring to &lt;code&gt;*this&lt;/code&gt; are invalidated.</source>
          <target state="translated">要素のコピーや移動は行われず、コンテナノードの内部ポインタのみが再ポイントされます。転送された要素へのすべてのポインタと参照は有効なままですが、今では &lt;code&gt;source&lt;/code&gt; ではなく &lt;code&gt;*this&lt;/code&gt; を参照しています。転送された要素を参照する反復子と &lt;code&gt;*this&lt;/code&gt; を参照するすべての反復子は無効になります。</target>
        </trans-unit>
        <trans-unit id="cc3224dd2db8f1be53245ed8d7053751754bb987" translate="yes" xml:space="preserve">
          <source>No elements are copied or moved, only the internal pointers of the list nodes are re-pointed. The behavior is undefined if: &lt;code&gt;get_allocator() != other.get_allocator()&lt;/code&gt;. No iterators or references become invalidated, the iterators to moved elements remain valid, but now refer into &lt;code&gt;*this&lt;/code&gt;, not into &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">要素のコピーや移動は行われず、リストノードの内部ポインターのみが再ポイントされます。 &lt;code&gt;get_allocator() != other.get_allocator()&lt;/code&gt; 場合、動作は未定義です。イテレータや参照が無効になることはありません。移動した要素へのイテレータは有効なままですが、 &lt;code&gt;*this&lt;/code&gt; を参照し、 &lt;code&gt;other&lt;/code&gt; は参照しません。</target>
        </trans-unit>
        <trans-unit id="a446797facd648759f6798d6324eb89c747b63a0" translate="yes" xml:space="preserve">
          <source>No elements are copied. &lt;code&gt;pos&lt;/code&gt; must be either a deferenceable valid iterator into &lt;code&gt;*this&lt;/code&gt; or the &lt;code&gt;&lt;a href=&quot;before_begin&quot;&gt;before_begin()&lt;/a&gt;&lt;/code&gt; iterator (in particular, &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; is not a valid argument for &lt;code&gt;pos&lt;/code&gt;). The behavior is undefined if &lt;code&gt;get_allocator() != other.get_allocator()&lt;/code&gt;. No iterators or references become invalidated, the iterators to the moved elements now refer into &lt;code&gt;*this&lt;/code&gt;, not into &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">要素はコピーされません。 &lt;code&gt;pos&lt;/code&gt; は、 &lt;code&gt;*this&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;before_begin&quot;&gt;before_begin()&lt;/a&gt;&lt;/code&gt; イテレータへの遅延可能な有効なイテレータである必要があります（特に、 &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;pos&lt;/code&gt; の有効な引数ではありません）。 &lt;code&gt;get_allocator() != other.get_allocator()&lt;/code&gt; 場合の動作は未定義です。イテレータや参照が無効になることはありません。移動した要素へのイテレータは &lt;code&gt;*this&lt;/code&gt; を参照し、 &lt;code&gt;other&lt;/code&gt; を参照しません。</target>
        </trans-unit>
        <trans-unit id="978b5fdcd4067d166cd18666eaf43106a672a214" translate="yes" xml:space="preserve">
          <source>No elements are copied. The container &lt;code&gt;other&lt;/code&gt; becomes empty after the operation. The function does nothing if &lt;code&gt;other&lt;/code&gt; refers to the same object as &lt;code&gt;*this&lt;/code&gt;. If &lt;code&gt;get_allocator() != other.get_allocator()&lt;/code&gt;, the behavior is undefined. No iterators or references become invalidated, except that the iterators of moved elements now refer into &lt;code&gt;*this&lt;/code&gt;, not into &lt;code&gt;other&lt;/code&gt;. The first version uses &lt;code&gt;operator&amp;lt;&lt;/code&gt; to compare the elements, the second version uses the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">要素はコピーされません。操作後、 &lt;code&gt;other&lt;/code&gt; のコンテナは空になります。 &lt;code&gt;other&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; と同じオブジェクトを参照している場合、関数は何もしません。場合 &lt;code&gt;get_allocator() != other.get_allocator()&lt;/code&gt; 、動作は未定義です。移動された要素のイテレーターが &lt;code&gt;*this&lt;/code&gt; を参照し、 &lt;code&gt;other&lt;/code&gt; を参照しないことを除いて、イテレーターまたは参照が無効になることはありません。最初のバージョンは &lt;code&gt;operator&amp;lt;&lt;/code&gt; を使用して要素を比較し、2番目のバージョンは指定された比較関数 &lt;code&gt;comp&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="33c009594b3195a5bb52e9fdad9192860556ce8f" translate="yes" xml:space="preserve">
          <source>No error handling is provided.</source>
          <target state="translated">エラー処理は行っておりません。</target>
        </trans-unit>
        <trans-unit id="28c5e59b3d63ffc5b9d7540093341094dbb13312" translate="yes" xml:space="preserve">
          <source>No exception guarantee</source>
          <target state="translated">例外保証なし</target>
        </trans-unit>
        <trans-unit id="7ac0af2975990c59513f60a1a093382d7154812e" translate="yes" xml:space="preserve">
          <source>No exception guarantees.</source>
          <target state="translated">例外保証はありません。</target>
        </trans-unit>
        <trans-unit id="01117481b3d9ae41aba5fe6ef84e04f5a4c5d0b0" translate="yes" xml:space="preserve">
          <source>No floating-point exceptions are raised.</source>
          <target state="translated">浮動小数点の例外は発生しません。</target>
        </trans-unit>
        <trans-unit id="27c305e8361baccf3aa84e67d136b7c16d0792aa" translate="yes" xml:space="preserve">
          <source>No implementation of denormalization loss mechanism exists (accuracy loss is detected after rounding, as inexact result), and this option was removed in the 2008 revision of IEEE Std 754.</source>
          <target state="translated">非正規化損失機構は実装されておらず(丸め後に不正確な結果として精度損失が検出される)、このオプションはIEEE Std 754の2008年の改訂で削除されました。</target>
        </trans-unit>
        <trans-unit id="5aa7c85fbdea938586d76241fe2d22b985858d08" translate="yes" xml:space="preserve">
          <source>No implicit conversions are used. Multiplications and divisions are avoided where possible, if it is known at compile time that one or more parameters are &lt;code&gt;1&lt;/code&gt;. Computations are done in the widest type available and converted, as if by &lt;a href=&quot;../../language/static_cast&quot;&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/a&gt;, to the result type only when finished.</source>
          <target state="translated">暗黙的な変換は使用されません。コンパイル時に1つ以上のパラメーターが &lt;code&gt;1&lt;/code&gt; であることがわかっている場合、乗算と除算は可能な限り回避されます。計算は、&lt;a href=&quot;../../language/static_cast&quot;&gt; &lt;code&gt;static_cast&lt;/code&gt; の&lt;/a&gt;場合と同様に、使用可能な最も広い型で行われ、終了時にのみ結果型に変換されます。</target>
        </trans-unit>
        <trans-unit id="16941a37d8867c9031785f74d58aab34ae39bbe3" translate="yes" xml:space="preserve">
          <source>No input is consumed. Does not increment the assignment count. If the specifier has assignment-suppressing operator defined, the behavior is undefined.</source>
          <target state="translated">入力は消費されません。代入カウントをインクリメントしません。指定子に代入抑制演算子が定義されている場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="3a1759338e75b29dd2433ed5ae0e932e1055ce49" translate="yes" xml:space="preserve">
          <source>No iterators or references are invalidated.</source>
          <target state="translated">イテレータや参照が無効になることはありません。</target>
        </trans-unit>
        <trans-unit id="d8d14843587c4b84edf4a3f7ec903f17372ac7fe" translate="yes" xml:space="preserve">
          <source>No iterators or references are invalidated. If the insertion is successful, pointers and references to the element obtained while it is held in the node handle are invalidated, and pointers and references obtained to that element before it was extracted become valid.(since C++17).</source>
          <target state="translated">イテレータや参照は無効になりません。挿入に成功した場合、ノード ハンドルに保持されている間に取得した要素へのポインタや参照は無効となり、抽出前に取得したその要素へのポインタや参照が有効になります(C++17以降)。</target>
        </trans-unit>
        <trans-unit id="d308b24d0fb713458b816d0159d58e7ea3e45701" translate="yes" xml:space="preserve">
          <source>No iterators or references except for &lt;code&gt;&lt;a href=&quot;back&quot;&gt;back()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; are invalidated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;back&quot;&gt;back()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt; 以外のイテレータまたは参照は無効化されません。</target>
        </trans-unit>
        <trans-unit id="5422716090d87b1a9bb481371f7e3eae51361a05" translate="yes" xml:space="preserve">
          <source>No locks are unlocked. If the &lt;code&gt;*this&lt;/code&gt; held ownership of the associated mutex prior to the call, the caller is now responsible to unlock the mutex.</source>
          <target state="translated">ロックは解除されません。 &lt;code&gt;*this&lt;/code&gt; が呼び出しの前に関連するミューテックスの所有権を保持していた場合、呼び出し元はミューテックスのロックを解除する責任があります。</target>
        </trans-unit>
        <trans-unit id="ac84bf2f78b29d7fcdb0dbd9e9503065301a53a2" translate="yes" xml:space="preserve">
          <source>No locks available</source>
          <target state="translated">ロックなし</target>
        </trans-unit>
        <trans-unit id="381f7bc519ceab8bc45e158d6b0f429e333c0200" translate="yes" xml:space="preserve">
          <source>No message is available on the STREAM head read queue</source>
          <target state="translated">STREAMヘッドリードキューにはメッセージがありません。</target>
        </trans-unit>
        <trans-unit id="91f453678cd5746e8528746890ea37b5fac6dc46" translate="yes" xml:space="preserve">
          <source>No message of the desired type</source>
          <target state="translated">希望するタイプのメッセージがない</target>
        </trans-unit>
        <trans-unit id="37b08a60922b858a9604d849887893346bfde089" translate="yes" xml:space="preserve">
          <source>No objects of an abstract class can be created (except for base subobjects of a class derived from it) and no non-static data members of an abstract class can be declared.</source>
          <target state="translated">抽象クラスのオブジェクトを作成することはできず(派生クラスの基底サブオブジェクトを除く)、抽象クラスの非静的データメンバを宣言することはできません。</target>
        </trans-unit>
        <trans-unit id="5660b7f3a9839ebf50cdbe240cacab561f281a5b" translate="yes" xml:space="preserve">
          <source>No operation on &lt;code&gt;T&lt;/code&gt; may throw exceptions</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; での操作は例外をスローしません</target>
        </trans-unit>
        <trans-unit id="688c5cf8450e6add0cb9bfd6566b0f5311cec7d6" translate="yes" xml:space="preserve">
          <source>No operation on CharTraits may throw an exception.</source>
          <target state="translated">CharTraitsに対する操作は、例外をスローすることはできません。</target>
        </trans-unit>
        <trans-unit id="8bba5934c5f1505069793e1ae2d88d8773a949b4" translate="yes" xml:space="preserve">
          <source>No operations on &lt;code&gt;rdbuf&lt;/code&gt; are performed, it is not destroyed.</source>
          <target state="translated">&lt;code&gt;rdbuf&lt;/code&gt; に対する操作は実行されず、破棄されません。</target>
        </trans-unit>
        <trans-unit id="39b7ac70e8fa06bebbf0fa82ec010f60f7998782" translate="yes" xml:space="preserve">
          <source>No operations result in undefined behavior even if the result is not representable in the floating-point type. The &lt;a href=&quot;../numeric/fenv&quot;&gt;floating-point environment&lt;/a&gt; in effect may be different from the calling thread's floating-point environment.</source>
          <target state="translated">結果が浮動小数点型で表現できない場合でも、演算は未定義の動作を引き起こしません。の&lt;a href=&quot;../numeric/fenv&quot;&gt;&lt;/a&gt;実際浮動小数点環境は、呼び出し側のスレッドの浮動小数点環境とは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="30f41755057b6f0132b02f8a71ec4aacdc850b8c" translate="yes" xml:space="preserve">
          <source>No other guarantees are given: &lt;code&gt;type_info&lt;/code&gt; objects referring to different types may have the same hash_code (although the standard recommends that implementations avoid this as much as possible), and hash_code for the same type can change between invocations of the same program.</source>
          <target state="translated">他の保証はありません： &lt;code&gt;type_info&lt;/code&gt; 異なるタイプを参照するオブジェクトは同じhash_codeを持つ可能性があります（ただし、標準では実装がこれをできるだけ回避することが推奨されています）。同じタイプのhash_codeは、同じプログラムの呼び出し間で変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="322acb8429963c10047b143680a1950d4bd9247f" translate="yes" xml:space="preserve">
          <source>No rehash</source>
          <target state="translated">蒸し返さない</target>
        </trans-unit>
        <trans-unit id="5c0580667d6055e92a026b8c67fa943060b2c89d" translate="yes" xml:space="preserve">
          <source>No space left on device</source>
          <target state="translated">デバイス上に空きスペースがありません</target>
        </trans-unit>
        <trans-unit id="f5bda103975f1ed8b7e62cc1ddfedf773ba82168" translate="yes" xml:space="preserve">
          <source>No standard library classes overload &lt;code&gt;operator&amp;amp;&lt;/code&gt;. The best known example of overloaded &lt;code&gt;operator&amp;amp;&lt;/code&gt; is the Microsoft COM class &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/31k6d0k7(v=vs.100).aspx&quot;&gt;CComPtr&lt;/a&gt;, although it can also appear in EDSLs such as &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/reference/operator/and_predicate.html&quot;&gt;boost.spirit&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;operator&amp;amp;&lt;/code&gt; をオーバーロードする標準ライブラリクラスはありません。オーバーロードの最もよく知られた例 &lt;code&gt;operator&amp;amp;&lt;/code&gt; マイクロソフトCOMクラスである&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/31k6d0k7(v=vs.100).aspx&quot;&gt;CComPtr&lt;/a&gt;、それはまたのようなEDSLsに現れることができますが&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/reference/operator/and_predicate.html&quot;&gt;boost.spirit&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c3730b32641a416a0101a6ab408d2f1bf6fbefbb" translate="yes" xml:space="preserve">
          <source>No standard library classes overload &lt;code&gt;operator-&amp;gt;*&lt;/code&gt;. It was suggested that it could be part of &lt;a href=&quot;http://www.aristeia.com/Papers/DDJ_Oct_1999.pdf&quot;&gt;smart pointer interface&lt;/a&gt;, and in fact is used in that capacity by actors in &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/phoenix/doc/html/phoenix/modules/operator.html#phoenix.modules.operator.member_pointer_operator&quot;&gt;boost.phoenix&lt;/a&gt;, but is more common in EDSLs such as &lt;a href=&quot;https://github.com/schlangster/cpp.react/blob/master/include/react/Signal.h#L557&quot;&gt;cpp.react&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;operator-&amp;gt;*&lt;/code&gt; をオーバーロードする標準ライブラリクラスはありません。これは、&lt;a href=&quot;http://www.aristeia.com/Papers/DDJ_Oct_1999.pdf&quot;&gt;スマートポインターインターフェイスの&lt;/a&gt;一部である可能性があることが示唆されており、実際には、その能力で&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/phoenix/doc/html/phoenix/modules/operator.html#phoenix.modules.operator.member_pointer_operator&quot;&gt;boost.phoenixの&lt;/a&gt;アクターによって使用されますが、cpp.reactなどのEDSLではより一般的&lt;a href=&quot;https://github.com/schlangster/cpp.react/blob/master/include/react/Signal.h#L557&quot;&gt;です&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c452b421f09b5f774d7c473f3c923ba511bb779a" translate="yes" xml:space="preserve">
          <source>No standard library components throw this exception directly, but the exception types &lt;code&gt;&lt;a href=&quot;../invalid_argument/invalid_argument&quot;&gt;std::invalid_argument&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../domain_error/domain_error&quot;&gt;std::domain_error&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../length_error/length_error&quot;&gt;std::length_error&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../thread/future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt;, and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/optional/bad_optional_access&quot;&gt;&lt;code&gt;std::experimental::bad_optional_access&lt;/code&gt;&lt;/a&gt; are derived from &lt;code&gt;std::logic_error&lt;/code&gt;.</source>
          <target state="translated">標準ライブラリコンポーネントはこの例外を直接スローしませんが、例外タイプ &lt;code&gt;&lt;a href=&quot;../invalid_argument/invalid_argument&quot;&gt;std::invalid_argument&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../domain_error/domain_error&quot;&gt;std::domain_error&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../length_error/length_error&quot;&gt;std::length_error&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../thread/future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; 、および&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/optional/bad_optional_access&quot;&gt; &lt;code&gt;std::experimental::bad_optional_access&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;std::logic_error&lt;/code&gt; から派生します:: logic_error。</target>
        </trans-unit>
        <trans-unit id="e5feee0204f5532e0cb04d5be298f4c467c05e6f" translate="yes" xml:space="preserve">
          <source>No such device</source>
          <target state="translated">そのような装置はありません。</target>
        </trans-unit>
        <trans-unit id="112765ee706d5c7ea20d7309d6bf892b8a5aa7eb" translate="yes" xml:space="preserve">
          <source>No such device or address</source>
          <target state="translated">そのようなデバイスやアドレスはありません</target>
        </trans-unit>
        <trans-unit id="8a6cb568f806ffae868a77b519003a5df95ec0c3" translate="yes" xml:space="preserve">
          <source>No such file or directory</source>
          <target state="translated">そのようなファイルやディレクトリはありません</target>
        </trans-unit>
        <trans-unit id="0cf4a772e5ca24befae7ddee66e425eeaa8130aa" translate="yes" xml:space="preserve">
          <source>No such process</source>
          <target state="translated">そのようなプロセスはありません。</target>
        </trans-unit>
        <trans-unit id="51afe8b5357b395f47bb995df1b5a1817ab26c4d" translate="yes" xml:space="preserve">
          <source>No synchronization is performed on &lt;code&gt;*this&lt;/code&gt; itself. Concurrently calling &lt;code&gt;join()&lt;/code&gt; on the same &lt;code&gt;std::thread&lt;/code&gt; object from multiple threads constitutes a data race that results in undefined behavior.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 自体では同期は実行されません。同じ &lt;code&gt;std::thread&lt;/code&gt; &lt;code&gt;join()&lt;/code&gt; を同時に呼び出す複数のスレッドからオブジェクトで、データ競合が発生し、動作が未定義になります。</target>
        </trans-unit>
        <trans-unit id="eaf5691256d788fca544a00424ef1dbd69a94a0c" translate="yes" xml:space="preserve">
          <source>No thread of execution can execute forever without performing any of these observable behaviors.</source>
          <target state="translated">どの実行スレッドも、これらの観測可能な動作のいずれかを実行せずに永遠に実行することはできません。</target>
        </trans-unit>
        <trans-unit id="51ce94a08f32b6f7fcb28091d8b532060cbfa20d" translate="yes" xml:space="preserve">
          <source>No two &lt;code&gt;std::thread&lt;/code&gt; objects may represent the same thread of execution; &lt;code&gt;std::thread&lt;/code&gt; is not &lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; or &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;, although it is &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt; and &lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;.</source>
          <target state="translated">2つの &lt;code&gt;std::thread&lt;/code&gt; オブジェクトが同じ実行スレッドを表すことはありません。 &lt;code&gt;std::thread&lt;/code&gt; は、&lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;および&lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;ですが、&lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;または&lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;ではありません。</target>
        </trans-unit>
        <trans-unit id="804c5f74b28622a4b2a0f90a5b277bb65301ed88" translate="yes" xml:space="preserve">
          <source>No worse than &lt;code&gt;D(p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;D(p)&lt;/code&gt; より悪くない</target>
        </trans-unit>
        <trans-unit id="76729f98c40c7c41af8e621a5b4c7b2e9f9b3181" translate="yes" xml:space="preserve">
          <source>No-op</source>
          <target state="translated">No-op</target>
        </trans-unit>
        <trans-unit id="2eeab908fdb03f61dd6d476701ea077b183eb4f9" translate="yes" xml:space="preserve">
          <source>Node handle</source>
          <target state="translated">ノードハンドル</target>
        </trans-unit>
        <trans-unit id="63d3cbf066d6b70ce554e14180365e2160212c1f" translate="yes" xml:space="preserve">
          <source>Non-Type Template Parameter</source>
          <target state="translated">非タイプのテンプレートパラメータ</target>
        </trans-unit>
        <trans-unit id="131454f192bda865498e00766f035a28632413af" translate="yes" xml:space="preserve">
          <source>Non-arithmetic standard types, such as &lt;code&gt;&lt;a href=&quot;../numeric/complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;, do not have specializations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../numeric/complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; などの非算術標準型には、特殊化はありません。</target>
        </trans-unit>
        <trans-unit id="e16edd1a8ead71ead036958c96f63d64e1cad402" translate="yes" xml:space="preserve">
          <source>Non-class initialization by conversion</source>
          <target state="translated">変換によるノンクラス初期化</target>
        </trans-unit>
        <trans-unit id="57af4dfe1c82766c2d3325c85ca81aeebc36e716" translate="yes" xml:space="preserve">
          <source>Non-const objects of &lt;a href=&quot;../language/type-id&quot;&gt;non-class object type&lt;/a&gt; are always DefaultConstructible.</source>
          <target state="translated">非&lt;a href=&quot;../language/type-id&quot;&gt;クラスオブジェクトタイプの非&lt;/a&gt; constオブジェクトは常にDefaultConstructibleです。</target>
        </trans-unit>
        <trans-unit id="a634fefc8533672f8e62b4313c782330b46545a5" translate="yes" xml:space="preserve">
          <source>Non-deduced contexts</source>
          <target state="translated">控除されていないコンテクスト</target>
        </trans-unit>
        <trans-unit id="0002587e7cb30b67fd81951d9ae8cda26ba73cdb" translate="yes" xml:space="preserve">
          <source>Non-dependent names are looked up and bound at the point of template definition. This binding holds even if at the point of template instantiation there is a better match:</source>
          <target state="translated">このバインディングは、テンプレートのインスタンス化の時点でより良いマッチがあったとしても保持されます。</target>
        </trans-unit>
        <trans-unit id="c7d0067c22de80df34d67b96a56dabdfed7a712d" translate="yes" xml:space="preserve">
          <source>Non-deterministic random numbers</source>
          <target state="translated">非決定論的乱数</target>
        </trans-unit>
        <trans-unit id="193bc621c98ae221eaef288f8d181a1b34a9f35d" translate="yes" xml:space="preserve">
          <source>Non-local jumps</source>
          <target state="translated">非ローカルジャンプ</target>
        </trans-unit>
        <trans-unit id="01a214a8836052541e6c41001c2b2b270d5a1cd8" translate="yes" xml:space="preserve">
          <source>Non-local jumps (since C++17)</source>
          <target state="translated">非局所的なジャンプ(C++17 以降</target>
        </trans-unit>
        <trans-unit id="dec1e29ac7d84378519bcaa827463c8c2f2c9c7f" translate="yes" xml:space="preserve">
          <source>Non-local variables</source>
          <target state="translated">非局所変数</target>
        </trans-unit>
        <trans-unit id="e0ac4e5f77dc0b425643f6fa7e6eb9674247cdd6" translate="yes" xml:space="preserve">
          <source>Non-member &lt;code&gt;size()&lt;/code&gt; and more (&lt;a href=&quot;iterator#Container_access&quot;&gt;uniform container access&lt;/a&gt;)</source>
          <target state="translated">非メンバー &lt;code&gt;size()&lt;/code&gt; 以上（&lt;a href=&quot;iterator#Container_access&quot;&gt;均一コンテナーアクセス&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="77225e369b0a6bfc776d499bf8518c84b4d59e95" translate="yes" xml:space="preserve">
          <source>Non-member constant</source>
          <target state="translated">非会員定数</target>
        </trans-unit>
        <trans-unit id="59e636cfd809ec1f38ae470219cafdf01564707e" translate="yes" xml:space="preserve">
          <source>Non-member function definition</source>
          <target state="translated">非会員機能の定義</target>
        </trans-unit>
        <trans-unit id="6a2cadc67754d231f05b3049b4f273edbe87850d" translate="yes" xml:space="preserve">
          <source>Non-member functions</source>
          <target state="translated">非会員機能</target>
        </trans-unit>
        <trans-unit id="1981182781d0c0c8ddf46c59ce8607e42a1c2169" translate="yes" xml:space="preserve">
          <source>Non-member functions and static member functions cannot be virtual.</source>
          <target state="translated">非メンバ関数や静的メンバ関数は仮想化できません。</target>
        </trans-unit>
        <trans-unit id="f854b164fda5f4ffb460a665e554c7cdc013fe23" translate="yes" xml:space="preserve">
          <source>Non-member operations</source>
          <target state="translated">非会員事業</target>
        </trans-unit>
        <trans-unit id="a37fc8f74680b36401aa70e0c83de69c7fa10f1d" translate="yes" xml:space="preserve">
          <source>Non-member operators</source>
          <target state="translated">非会員事業者</target>
        </trans-unit>
        <trans-unit id="1475621b74c957eb14a116758de8df980d889f81" translate="yes" xml:space="preserve">
          <source>Non-member-functions</source>
          <target state="translated">Non-member-functions</target>
        </trans-unit>
        <trans-unit id="fbab4561d75300d2b2c80ff6d943e3a7d0a82eb1" translate="yes" xml:space="preserve">
          <source>Non-modifying sequence operations</source>
          <target state="translated">シーケンス操作を変更しない</target>
        </trans-unit>
        <trans-unit id="28af95d5aac585ab47289daeae8748e967982758" translate="yes" xml:space="preserve">
          <source>Non-monetary numeric formatting parameters</source>
          <target state="translated">非金銭的な数値フォーマットパラメータ</target>
        </trans-unit>
        <trans-unit id="56bf8a2db4b645a79c4849be1f959268b928c0e2" translate="yes" xml:space="preserve">
          <source>Non-negative value representing the number of arguments passed to the program from the environment in which the program is run.</source>
          <target state="translated">プログラムが実行される環境からプログラムに渡される引数の数を表す非負の値。</target>
        </trans-unit>
        <trans-unit id="4f05009d4f6345c348926ebe58680e8042ef9eb2" translate="yes" xml:space="preserve">
          <source>Non-numeric parallel algorithms</source>
          <target state="translated">非数値並列アルゴリズム</target>
        </trans-unit>
        <trans-unit id="e0e9dd37e4f222acb8519a3d015eb06183e829e7" translate="yes" xml:space="preserve">
          <source>Non-object types (function types, reference types, and the (possibly cv-qualified) type &lt;code&gt;void&lt;/code&gt;) as well as the const non-object types are never DefaultConstructible.</source>
          <target state="translated">非オブジェクト型（関数型、参照型、および（場合によってはcv修飾された）型 &lt;code&gt;void&lt;/code&gt; ）とconst非オブジェクト型がDefaultConstructibleになることはありません。</target>
        </trans-unit>
        <trans-unit id="72624912ab07ac9814916ad08bbf7c1a7f1d9b97" translate="yes" xml:space="preserve">
          <source>Non-standard pragmas</source>
          <target state="translated">非標準的なプラグマ</target>
        </trans-unit>
        <trans-unit id="67c030b24b4447ce9a208ec6bf7c6453aeb6d4ed" translate="yes" xml:space="preserve">
          <source>Non-static class members are not allowed in default arguments (even if they are not evaluated), except when used to form a pointer-to-member or in a member access expression.</source>
          <target state="translated">非静的クラス・メンバは、ポインタ・ツー・メンバを形成するために使用される場合やメンバ・アクセス式の中で使用される場合を除き、デフォルトの引数では(評価されない場合でも)許可されません。</target>
        </trans-unit>
        <trans-unit id="7b3b4c6e0f76c747291b71baa42adf9363205e5f" translate="yes" xml:space="preserve">
          <source>Non-static data member initializers</source>
          <target state="translated">非静的データメンバの初期化子</target>
        </trans-unit>
        <trans-unit id="82ffce2533e7cb4144834ecebcada6cbf62a32a3" translate="yes" xml:space="preserve">
          <source>Non-static data members</source>
          <target state="translated">非静的データメンバ</target>
        </trans-unit>
        <trans-unit id="429e9bd820e6e760918774cb1a80cbbdf85d1202" translate="yes" xml:space="preserve">
          <source>Non-static data members are declared in a &lt;a href=&quot;class&quot;&gt;member specification&lt;/a&gt; of a class.</source>
          <target state="translated">非静的データメンバーは、クラスの&lt;a href=&quot;class&quot;&gt;メンバー仕様&lt;/a&gt;で宣言されます。</target>
        </trans-unit>
        <trans-unit id="a557653ca070903eb6d0ecb1be833a86a7125c06" translate="yes" xml:space="preserve">
          <source>Non-static data members can be initialized with &lt;a href=&quot;constructor&quot;&gt;member initializer list&lt;/a&gt; or with a &lt;a href=&quot;data_members#Member_initialization&quot;&gt;default member initializer&lt;/a&gt;.</source>
          <target state="translated">非静的データメンバーは、&lt;a href=&quot;constructor&quot;&gt;メンバー初期化子リスト&lt;/a&gt;または&lt;a href=&quot;data_members#Member_initialization&quot;&gt;デフォルトのメンバー初期化子で初期化できます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f1ff37a919c81ad44761ffc5196c56fd12193602" translate="yes" xml:space="preserve">
          <source>Non-static data members may be initialized in one of two ways:</source>
          <target state="translated">非静的データ・メンバは、2 つの方法のいずれかで初期化することができます。</target>
        </trans-unit>
        <trans-unit id="60e135e70fdb9fffd2375fcf2fa64e5f06790ed3" translate="yes" xml:space="preserve">
          <source>Non-static member functions</source>
          <target state="translated">非静電メンバー機能</target>
        </trans-unit>
        <trans-unit id="5ea2bb60fa201005528d763f9a4f9a18851ffb11" translate="yes" xml:space="preserve">
          <source>Non-throwing functions are permitted to call potentially-throwing functions. Whenever an exception is thrown and the search for a handler encounters the outermost block of a non-throwing function, the function &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; is called:</source>
          <target state="translated">スローされない関数は、スローされる可能性のある関数を呼び出すことができます。例外がスローされ、ハンドラーの検索でスローされない関数の最も外側のブロックが検出されると、関数 &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9fc36be3365ccaa7b2028fe88ec27f928347e481" translate="yes" xml:space="preserve">
          <source>Non-type template parameter</source>
          <target state="translated">非タイプテンプレートパラメータ</target>
        </trans-unit>
        <trans-unit id="0dd624c0e8193d104c32f57b56d08f0f423311e4" translate="yes" xml:space="preserve">
          <source>Non-type template parameters</source>
          <target state="translated">非タイプテンプレートパラメータ</target>
        </trans-unit>
        <trans-unit id="6c303eeb1f56f9859275af67790a5c55d923343b" translate="yes" xml:space="preserve">
          <source>Non-virtual destructor which decrements reference counts of all facets held by &lt;code&gt;*this&lt;/code&gt;. Those facets whose reference count becomes zero are deleted.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; が保持するすべてのファセットの参照カウントをデクリメントする非仮想デストラクタ。参照カウントがゼロになるファセットは削除されます。</target>
        </trans-unit>
        <trans-unit id="e14291ab8fc0194e73bb2a7c3aecd76d1ac5ba40" translate="yes" xml:space="preserve">
          <source>Non-zero if the character &lt;code&gt;ch&lt;/code&gt; has the property identified by &lt;code&gt;desc&lt;/code&gt; in LC_CTYPE facet of the current C locale, zero otherwise.</source>
          <target state="translated">文字 &lt;code&gt;ch&lt;/code&gt; が現在のCロケールのLC_CTYPEファセットの &lt;code&gt;desc&lt;/code&gt; で識別されるプロパティを持っている場合はゼロ以外、それ以外の場合はゼロ。</target>
        </trans-unit>
        <trans-unit id="ed25aaf0819721d97337792395dad2f8b5b2eba5" translate="yes" xml:space="preserve">
          <source>Non-zero value if a non-local jump was just performed. The return value is the same as passed to &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">非ローカルジャンプが実行されたばかりの場合は、ゼロ以外の値。戻り値は &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; 渡されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="900ee6797efd5e52fdc75d73717ea25ebb3e309c" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character can be printed, zero otherwise.</source>
          <target state="translated">文字を印刷できる場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="00f11f572546e4bec188a078d2a9e68b51039891" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character has a graphical representation character, zero otherwise.</source>
          <target state="translated">グラフィカルな表現の文字を持っている場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="f0a7dd58e4b2983a42eee0bbc242681d141522e1" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is a blank character, zero otherwise.</source>
          <target state="translated">文字が空白文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="573c2f1c1338c5749b009db6f886cc21167460ad" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is a control character, zero otherwise.</source>
          <target state="translated">文字が制御文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="645b6766f8a577c38101f8fb20cfb58a2045c32e" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is a lowercase letter, zero otherwise.</source>
          <target state="translated">文字が小文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="5f0261c6f4c85b95254a513c02aebf02ec699cc6" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is a numeric character, zero otherwise.</source>
          <target state="translated">文字が数値の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="f91aea7f894e54ec23e392ad63a4306e917989bd" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is a punctuation character, zero otherwise.</source>
          <target state="translated">文字が句読点文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="e557296858a7842a41ea087ef4dc7cb9964a42bf" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is a whitespace character, zero otherwise.</source>
          <target state="translated">文字が空白文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="739526fe168a72c3c1f6dcbbb361462f93f70e5d" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is an alphabetic character, zero otherwise.</source>
          <target state="translated">文字がアルファベット文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="4e542ca374323f362fab4f69485d18e59e7d40ec" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is an alphanumeric character, &lt;code&gt;0&lt;/code&gt; otherwise.</source>
          <target state="translated">文字が英数字の場合はゼロ以外の値、 &lt;code&gt;0&lt;/code&gt; それ以外の場合 0。</target>
        </trans-unit>
        <trans-unit id="d4c4a5067b4fe1c0dcec7c0fdd14829018a9fafe" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is an hexadecimal numeric character, zero otherwise.</source>
          <target state="translated">文字が16進数の数値の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="eb103ab4ed106f58e123123deeaecdec23cd1314" translate="yes" xml:space="preserve">
          <source>Non-zero value if the character is an uppercase letter, zero otherwise.</source>
          <target state="translated">文字が大文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="01bce746578de779ccced60e366fe7c795db125a" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character can be printed, zero otherwise.</source>
          <target state="translated">ワイドキャラクタを印刷できる場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="812d84021000de30e2a91876134da9368a351dc2" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character has a graphical representation character, zero otherwise.</source>
          <target state="translated">ワイドキャラクタがグラフィカルな表現キャラクタを持っている場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="cb1372e77fe4776ddfb1faee5c4f46be510836ae" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is a alphabetic character, &lt;code&gt;0&lt;/code&gt; otherwise.</source>
          <target state="translated">ワイド文字がアルファベット文字の場合はゼロ以外の値、それ以外の場合は &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6061e0221ac50001f9c505509407314da40799b9" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is a alphanumeric character, zero otherwise.</source>
          <target state="translated">ワイド文字が英数字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="c1ee7958639648ee011e8faa7e9ae18330b62fbb" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is a blank character, zero otherwise.</source>
          <target state="translated">ワイド文字がブランク文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="fc06c5d778a941c31c4589906a0d0c89c4244147" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is a control character, zero otherwise.</source>
          <target state="translated">ワイド文字が制御文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="764367d8a927867322e0b363e253e0c2282b8d92" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is a hexadecimal numeric character, zero otherwise.</source>
          <target state="translated">ワイドキャラクタが16進数の数値キャラクタの場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="cf5849ae23f0e34f5e3d8fde24b1da25b1eb7db3" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is a punctuation character, zero otherwise.</source>
          <target state="translated">ワイド文字が句読点文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="b9704dceccf4f8acbf2dca35e962fbe869f3c4c3" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is a whitespace character, zero otherwise.</source>
          <target state="translated">ワイド文字が空白文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="bd6da9a6888802869d6bd527adae2e52402fbd0a" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is an lowercase letter, zero otherwise.</source>
          <target state="translated">ワイド文字が小文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="c907aa58db4cbc21247085765be4eb83901ffdcd" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is an numeric character, zero otherwise.</source>
          <target state="translated">ワイド文字が数値文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="3326d07c04286a9aab352ed3d2e8d2c4220c3858" translate="yes" xml:space="preserve">
          <source>Non-zero value if the wide character is an uppercase letter, zero otherwise.</source>
          <target state="translated">ワイド文字が大文字の場合は0以外の値、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="45c4e674ec8e128e5827a4427066da448a1c18d3" translate="yes" xml:space="preserve">
          <source>None except from those thrown by &lt;code&gt;g&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;g&lt;/code&gt; によってスローされたものを除いて、何もありません。</target>
        </trans-unit>
        <trans-unit id="291b0c7cdd1cd2f30b38c8acf1f3519f6f1e8453" translate="yes" xml:space="preserve">
          <source>None if &lt;code&gt;R&lt;/code&gt; is &lt;code&gt;void&lt;/code&gt;. Otherwise the return value of the invocation of the stored callable object.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; の場合はなし。それ以外の場合は、格納されている呼び出し可能オブジェクトの呼び出しの戻り値。</target>
        </trans-unit>
        <trans-unit id="b62c9d624342fedcffc85456d3f1a3331a66a326" translate="yes" xml:space="preserve">
          <source>None of the above</source>
          <target state="translated">上記のどれもありません。</target>
        </trans-unit>
        <trans-unit id="9d2e2d595b0c560a7b570396b104178ffe3277d9" translate="yes" xml:space="preserve">
          <source>None of the above, and &lt;code&gt;Period::type::den == 1&lt;/code&gt;</source>
          <target state="translated">上記のいずれでもない、および &lt;code&gt;Period::type::den == 1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a589ddc9895462a9d8fd73706c77721255a65a50" translate="yes" xml:space="preserve">
          <source>None of the base class subobjects has the same type as</source>
          <target state="translated">基底クラスのサブオブジェクトは、どれも</target>
        </trans-unit>
        <trans-unit id="76849f7419e425f17796e308475153176e779728" translate="yes" xml:space="preserve">
          <source>None of the operations that this type performs may throw exceptions.</source>
          <target state="translated">この型が実行する操作は、例外をスローすることはできません。</target>
        </trans-unit>
        <trans-unit id="7737266769d26daac93897b61511afe36c739888" translate="yes" xml:space="preserve">
          <source>None of them is visible to &lt;a href=&quot;../../language/adl&quot;&gt;argument-dependent lookup&lt;/a&gt;.</source>
          <target state="translated">それらのどれも、&lt;a href=&quot;../../language/adl&quot;&gt;引数に依存するルックアップ&lt;/a&gt;からは見えません。</target>
        </trans-unit>
        <trans-unit id="9a9707be07da6862114abd49d2570046d4810ca5" translate="yes" xml:space="preserve">
          <source>None.</source>
          <target state="translated">None.</target>
        </trans-unit>
        <trans-unit id="e41522575cac39436c3fc97bd13ee916aa474396" translate="yes" xml:space="preserve">
          <source>Nonmember functions</source>
          <target state="translated">非会員機能</target>
        </trans-unit>
        <trans-unit id="65f79424cda26fe35b6c2bd0f1a4711239294dfb" translate="yes" xml:space="preserve">
          <source>Nonzero value if the end of the stream has been reached, otherwise &lt;code&gt;​0​&lt;/code&gt;.</source>
          <target state="translated">ストリームの終わりに達した場合はゼロ以外の値、それ以外の場合は &lt;code&gt;​0​&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2a9098a34d521b830e5b13b1b8cab6cf947a729" translate="yes" xml:space="preserve">
          <source>Nonzero value if the file stream has errors occurred, &lt;code&gt;​0​&lt;/code&gt; otherwise.</source>
          <target state="translated">ファイルストリームにエラーがある場合はゼロ以外の値は、発生した &lt;code&gt;​0​&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="513a9abfd12198793750b53e382040f188c9d2eb" translate="yes" xml:space="preserve">
          <source>Normal distributions</source>
          <target state="translated">正規分布</target>
        </trans-unit>
        <trans-unit id="6c9403a20690f80dd4e4adf3a6c50d76d41a8e51" translate="yes" xml:space="preserve">
          <source>Normalizing the year and month can be done by adding (or subtracting) zero &lt;code&gt;std::chrono::months&lt;/code&gt;:</source>
          <target state="translated">年と月の正規化は、ゼロ &lt;code&gt;std::chrono::months&lt;/code&gt; 追加（または減算）することで実行できます。</target>
        </trans-unit>
        <trans-unit id="bd32a0f3c08e40f14034c6ef61d17985bcb3f5db" translate="yes" xml:space="preserve">
          <source>Normally called by the destructor of the owning &lt;code&gt;std::basic_osyncstream&lt;/code&gt; or by &lt;a href=&quot;../basic_osyncstream/emit&quot;&gt;&lt;code&gt;std::basic_osyncstream::emit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、所有する &lt;code&gt;std::basic_osyncstream&lt;/code&gt; または&lt;a href=&quot;../basic_osyncstream/emit&quot;&gt; &lt;code&gt;std::basic_osyncstream::emit&lt;/code&gt; &lt;/a&gt;によって呼び出されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
