<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="julia">
    <body>
      <group id="julia">
        <trans-unit id="2b8b860273fadee80a14a245e363252e7586c6b6" translate="yes" xml:space="preserve">
          <source>Rotate matrix &lt;code&gt;A&lt;/code&gt; left 90 degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebd2dfc92f1a10f6f4e237c7fc445cdb4617d73" translate="yes" xml:space="preserve">
          <source>Rotate matrix &lt;code&gt;A&lt;/code&gt; right 90 degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950b301d09028005b37b1f75d558be3a58a244b4" translate="yes" xml:space="preserve">
          <source>Round &lt;code&gt;x&lt;/code&gt; down to the nearest multiple of &lt;code&gt;precision&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;precision&lt;/code&gt; are different subtypes of &lt;code&gt;Period&lt;/code&gt;, the return value will have the same type as &lt;code&gt;precision&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806aa1dd5d26e647dfb32803022c1110cbc922aa" translate="yes" xml:space="preserve">
          <source>Round &lt;code&gt;x&lt;/code&gt; to the nearest multiple of &lt;code&gt;precision&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;precision&lt;/code&gt; are different subtypes of &lt;code&gt;Period&lt;/code&gt;, the return value will have the same type as &lt;code&gt;precision&lt;/code&gt;. By default (&lt;code&gt;RoundNearestTiesUp&lt;/code&gt;), ties (e.g., rounding 90 minutes to the nearest hour) will be rounded up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184e5e48161d2b10a91739f550bbdc76e1f4eb73" translate="yes" xml:space="preserve">
          <source>Round &lt;code&gt;x&lt;/code&gt; up to the nearest multiple of &lt;code&gt;precision&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;precision&lt;/code&gt; are different subtypes of &lt;code&gt;Period&lt;/code&gt;, the return value will have the same type as &lt;code&gt;precision&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5bfdfdba4fc645c56ae53dd1aadff188a1e991" translate="yes" xml:space="preserve">
          <source>Round Pushpin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905cc3792492961c10eb158788a7c9f956d57aa5" translate="yes" xml:space="preserve">
          <source>Rounding</source>
          <target state="translated">Rounding</target>
        </trans-unit>
        <trans-unit id="be96a1f11db59080b63a2fcfc27308c360b380f7" translate="yes" xml:space="preserve">
          <source>Rounding Epoch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c2b98882f2f4377a32a58791d08312dae0971f" translate="yes" xml:space="preserve">
          <source>Rounding Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ee26d323ca3a1b3b01ce20f74f98a37ba2d8a9" translate="yes" xml:space="preserve">
          <source>Rounding functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3adc86da984154dd80b4cf259ef82aed4844823a" translate="yes" xml:space="preserve">
          <source>Rounding modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70e8713f24bf68dd8a7a2e18c3e215245ce7705" translate="yes" xml:space="preserve">
          <source>Rounding should generally behave as expected, but there are a few cases in which the expected behaviour is not obvious.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e48c77f6816bb1004201172f0b0b5bc9075927a" translate="yes" xml:space="preserve">
          <source>Rounding to a &lt;code&gt;precision&lt;/code&gt; of &lt;code&gt;Month&lt;/code&gt;s or &lt;code&gt;Year&lt;/code&gt;s is not supported, as these &lt;code&gt;Period&lt;/code&gt;s are of inconsistent length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969bf8e59f53f9cabeb55d7c91e9650222afdb17" translate="yes" xml:space="preserve">
          <source>Rounding to specified digits in bases other than 2 can be inexact when operating on binary floating point numbers. For example, the &lt;a href=&quot;../numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt; value represented by &lt;code&gt;1.15&lt;/code&gt; is actually &lt;em&gt;less&lt;/em&gt; than 1.15, yet will be rounded to 1.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54eb3aeea6371c9c20709bc0ea92d5e22b108fb0" translate="yes" xml:space="preserve">
          <source>Rounding.RoundDown</source>
          <target state="translated">Rounding.RoundDown</target>
        </trans-unit>
        <trans-unit id="d2bf77d7c19e98c3b1f72c072e694a730b8fa460" translate="yes" xml:space="preserve">
          <source>Rounding.RoundFromZero</source>
          <target state="translated">Rounding.RoundFromZero</target>
        </trans-unit>
        <trans-unit id="43e6178f500b01c619da462b42c437c448078f40" translate="yes" xml:space="preserve">
          <source>Rounding.RoundNearest</source>
          <target state="translated">Rounding.RoundNearest</target>
        </trans-unit>
        <trans-unit id="af0407e47872ee12bbfff1b20bc1bb5ddbae7673" translate="yes" xml:space="preserve">
          <source>Rounding.RoundNearestTiesAway</source>
          <target state="translated">Rounding.RoundNearestTiesAway</target>
        </trans-unit>
        <trans-unit id="e4c02ce6201fe9f4eab7b951ae79893dabcf43be" translate="yes" xml:space="preserve">
          <source>Rounding.RoundNearestTiesUp</source>
          <target state="translated">Rounding.RoundNearestTiesUp</target>
        </trans-unit>
        <trans-unit id="1b154fffd613d1a1b65672f2536d2853c3544084" translate="yes" xml:space="preserve">
          <source>Rounding.RoundToZero</source>
          <target state="translated">Rounding.RoundToZero</target>
        </trans-unit>
        <trans-unit id="87c748ce95ae6ebcd643a8d33032fa12cca26beb" translate="yes" xml:space="preserve">
          <source>Rounding.RoundUp</source>
          <target state="translated">Rounding.RoundUp</target>
        </trans-unit>
        <trans-unit id="327c072adb750d94ab40bd93ee140a3f4642f6bd" translate="yes" xml:space="preserve">
          <source>Rounding.RoundingMode</source>
          <target state="translated">Rounding.RoundingMode</target>
        </trans-unit>
        <trans-unit id="270444162e3b213d099a0132ad3d49d8ccc44ab7" translate="yes" xml:space="preserve">
          <source>Rounding.get_zero_subnormals()</source>
          <target state="translated">Rounding.get_zero_subnormals()</target>
        </trans-unit>
        <trans-unit id="d57e060058d0137ed08c24c6ef359c75f33e3748" translate="yes" xml:space="preserve">
          <source>Rounding.rounding()</source>
          <target state="translated">Rounding.rounding()</target>
        </trans-unit>
        <trans-unit id="37a536732f4d85663e2def5247de385a0549ab6d" translate="yes" xml:space="preserve">
          <source>Rounding.set_zero_subnormals()</source>
          <target state="translated">Rounding.set_zero_subnormals()</target>
        </trans-unit>
        <trans-unit id="295b01c2ce51fdb5422753f746bc07507fc7b6ec" translate="yes" xml:space="preserve">
          <source>Rounding.setrounding()</source>
          <target state="translated">Rounding.setrounding()</target>
        </trans-unit>
        <trans-unit id="6295c23044627b9a4ba44ac28d83a702dacf38d9" translate="yes" xml:space="preserve">
          <source>Rounds away from zero. This rounding mode may only be used with &lt;code&gt;T == BigFloat&lt;/code&gt; inputs to &lt;code&gt;round&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad9a187e74912fc9825345d9016ef6ee1d99385" translate="yes" xml:space="preserve">
          <source>Rounds the number &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fcd8d8e848e436ee74afc696a2bb0930457434b" translate="yes" xml:space="preserve">
          <source>Rounds to nearest integer, with ties rounded away from zero (C/C++ &lt;code&gt;round&lt;/code&gt; behaviour).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba24e7fa3489d47e6d5edab2a8d36853a326cb93" translate="yes" xml:space="preserve">
          <source>Rounds to nearest integer, with ties rounded toward positive infinity (Java/JavaScript &lt;code&gt;round&lt;/code&gt; behaviour).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b9a685a83d4fcea882d5d2634e866d9970a8a0" translate="yes" xml:space="preserve">
          <source>Rowboat</source>
          <target state="translated">Rowboat</target>
        </trans-unit>
        <trans-unit id="d1a1af1556979f617e5e03ffbb0eee30d6be2ed7" translate="yes" xml:space="preserve">
          <source>Rugby Football</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4daedafb698af91ce57f897e4ef954df406e38" translate="yes" xml:space="preserve">
          <source>Rule-Delayed</source>
          <target state="translated">Rule-Delayed</target>
        </trans-unit>
        <trans-unit id="677035a79de122b29aedffede8d6fcee9d905086" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;command&lt;/code&gt; and return the resulting output as a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622a683f95bf94d9769a85c750a71becde12400d" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;command&lt;/code&gt; and return the resulting output as an array of bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ea59daecbfee665ec57793ab03cc61d6a28804" translate="yes" xml:space="preserve">
          <source>Run a command object, constructed with backticks (see the &lt;a href=&quot;../../manual/running-external-programs/index#Running-External-Programs-1&quot;&gt;Running External Programs&lt;/a&gt; section in the manual), and tell whether it was successful (exited with a code of 0). An exception is raised if the process cannot be started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21540938e84c1e5bee00d9247380e6601f916473" translate="yes" xml:space="preserve">
          <source>Run a command object, constructed with backticks (see the &lt;a href=&quot;../../manual/running-external-programs/index#Running-External-Programs-1&quot;&gt;Running External Programs&lt;/a&gt; section in the manual). Throws an error if anything goes wrong, including the process exiting with a non-zero status (when &lt;code&gt;wait&lt;/code&gt; is true).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392d04338114e2da8d2a8dbf42b3d0e93c331b23" translate="yes" xml:space="preserve">
          <source>Run analysis on the branches pointed to by the annotated branch tips &lt;code&gt;anns&lt;/code&gt; and determine under what circumstances they can be merged. For instance, if &lt;code&gt;anns[1]&lt;/code&gt; is simply an ancestor of &lt;code&gt;ann[2]&lt;/code&gt;, then &lt;code&gt;merge_analysis&lt;/code&gt; will report that a fast-forward merge is possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53957a2626efa755cb71cbcaf590ac07586ae3c" translate="yes" xml:space="preserve">
          <source>Run multiple iterators at the same time, until any of them is exhausted. The value type of the &lt;code&gt;zip&lt;/code&gt; iterator is a tuple of values of its subiterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eaa503fbb21f406157a7922dcfaa0df92ef7141" translate="yes" xml:space="preserve">
          <source>Run processes on hosts listed in &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ae5e3513b47255ad0917186f4421b3881b0bdb" translate="yes" xml:space="preserve">
          <source>Run some code when a given block of code exits, regardless of how it exits. For example, here is how we can guarantee that an opened file is closed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0da77563384f850ca0a82f39e1765ffd4b9d0c" translate="yes" xml:space="preserve">
          <source>Run the Julia unit tests listed in &lt;code&gt;tests&lt;/code&gt;, which can be either a string or an array of strings, using &lt;code&gt;ncores&lt;/code&gt; processors. If &lt;code&gt;exit_on_error&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, when one test fails, all remaining tests in other files will still be run; they are otherwise discarded, when &lt;code&gt;exit_on_error == true&lt;/code&gt;. If a seed is provided via the keyword argument, it is used to seed the global RNG in the context where the tests are run; otherwise the seed is chosen randomly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb283f9deed250350312ec1e645d53db1070536" translate="yes" xml:space="preserve">
          <source>Run the function &lt;code&gt;f&lt;/code&gt; while redirecting &lt;a href=&quot;#Base.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;stream&lt;/code&gt;. Upon completion, &lt;a href=&quot;#Base.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; is restored to its prior setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f600ac757eb4b9138ee9db7039bb184ba38f6de" translate="yes" xml:space="preserve">
          <source>Run the function &lt;code&gt;f&lt;/code&gt; while redirecting &lt;a href=&quot;#Base.stdin&quot;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;stream&lt;/code&gt;. Upon completion, &lt;a href=&quot;#Base.stdin&quot;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt; is restored to its prior setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0351e0a53e15d8f8aae4a96e3ee82a6dd05991cf" translate="yes" xml:space="preserve">
          <source>Run the function &lt;code&gt;f&lt;/code&gt; while redirecting &lt;a href=&quot;#Base.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;stream&lt;/code&gt;. Upon completion, &lt;a href=&quot;#Base.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; is restored to its prior setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d854c4800a2131af35c9126e669d3443f76b7d31" translate="yes" xml:space="preserve">
          <source>Run the functions once to JIT-compile and &lt;a href=&quot;../../base/base/index#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt; them on the second run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2e3ae79ba6ce08eade8f39b998b24f9437d97b" translate="yes" xml:space="preserve">
          <source>Runner</source>
          <target state="translated">Runner</target>
        </trans-unit>
        <trans-unit id="287388d345c5d78805bb6282645b45a627346240" translate="yes" xml:space="preserve">
          <source>Running External Programs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecff862fe5fa6f9e0f453572ed9b4a9d25adc4c2" translate="yes" xml:space="preserve">
          <source>Running Shirt With Sash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c6a6acaece807a75f148182b2d5c092bbabc24" translate="yes" xml:space="preserve">
          <source>Running a Julia script using &lt;code&gt;julia file.jl&lt;/code&gt; does not throw &lt;a href=&quot;../../base/base/index#Core.InterruptException&quot;&gt;&lt;code&gt;InterruptException&lt;/code&gt;&lt;/a&gt; when you try to terminate it with CTRL-C (SIGINT). To run a certain code before terminating a Julia script, which may or may not be caused by CTRL-C, use &lt;a href=&quot;../../base/base/index#Base.atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt;. Alternatively, you can use &lt;code&gt;julia -e 'include(popfirst!(ARGS))' file.jl&lt;/code&gt; to execute a script while being able to catch &lt;code&gt;InterruptException&lt;/code&gt; in the &lt;a href=&quot;../../base/base/index#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfd784f10b394f7b55209e356417c693e165b67" translate="yes" xml:space="preserve">
          <source>S (scalar)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9faed964fef80190696bb2b0b98ed45cb7120c93" translate="yes" xml:space="preserve">
          <source>SHA</source>
          <target state="translated">SHA</target>
        </trans-unit>
        <trans-unit id="dd648df182bf0b8afb6b7ceae7e96b0cdb483768" translate="yes" xml:space="preserve">
          <source>SIMD Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50748d0a84ba280de7f56d8272daee91e4d5253c" translate="yes" xml:space="preserve">
          <source>SIMD Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914da123e62e97d0004b2aac660754b9b2fa0fed" translate="yes" xml:space="preserve">
          <source>SSH agent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f451485dfae3e33a1d33d7b2baba5ed5b99a56b5" translate="yes" xml:space="preserve">
          <source>SSH credential type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a38aa4ccb16a97976111c679a1bb135996579cd" translate="yes" xml:space="preserve">
          <source>SSH private/public key pair</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950615819f3a7970b3e5eaf04967ce0a92bb2835" translate="yes" xml:space="preserve">
          <source>ST</source>
          <target state="translated">ST</target>
        </trans-unit>
        <trans-unit id="4152ec29594e45891b3c2684137ab38242194d18" translate="yes" xml:space="preserve">
          <source>SY</source>
          <target state="translated">SY</target>
        </trans-unit>
        <trans-unit id="15389534299e2f41d379bccb60706c01df5df279" translate="yes" xml:space="preserve">
          <source>Sagittarius</source>
          <target state="translated">Sagittarius</target>
        </trans-unit>
        <trans-unit id="13ee51f8475ed2e72105d3864ebb527945438e2c" translate="yes" xml:space="preserve">
          <source>Sailboat</source>
          <target state="translated">Sailboat</target>
        </trans-unit>
        <trans-unit id="717c3de983418f0186833bf28354da1db871690d" translate="yes" xml:space="preserve">
          <source>Sake Bottle And Cup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea59232ad9913567d0ee40418c2b198945989908" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#LinearAlgebra.eigen&quot;&gt;&lt;code&gt;eigen&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt; (and &lt;code&gt;B&lt;/code&gt;), instead of creating a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8daead1b30e7469b9fd87289f386ab9632100126" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#LinearAlgebra.eigvals&quot;&gt;&lt;code&gt;eigvals&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt; (and &lt;code&gt;B&lt;/code&gt;), instead of creating copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06dba0a7b0e585c2c02717d21afb94c89090713e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#LinearAlgebra.eigvals&quot;&gt;&lt;code&gt;eigvals&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy. &lt;code&gt;irange&lt;/code&gt; is a range of eigenvalue &lt;em&gt;indices&lt;/em&gt; to search for - for instance, the 2nd to 8th eigenvalues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea08d0db8d0d7267dd0f75389ad0ea2916758d9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#LinearAlgebra.eigvals&quot;&gt;&lt;code&gt;eigvals&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy. &lt;code&gt;vl&lt;/code&gt; is the lower bound of the interval to search for eigenvalues, and &lt;code&gt;vu&lt;/code&gt; is the upper bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265d915fed003ba423e62d225c93d8b44f0a8e18" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#LinearAlgebra.eigvals&quot;&gt;&lt;code&gt;eigvals&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy. The &lt;code&gt;permute&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt;, and &lt;code&gt;sortby&lt;/code&gt; keywords are the same as for &lt;a href=&quot;#LinearAlgebra.eigen&quot;&gt;&lt;code&gt;eigen&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0381c1aa5b451a012dd602cff00800b00c4de7b9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#LinearAlgebra.ldlt&quot;&gt;&lt;code&gt;ldlt&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;S&lt;/code&gt;, instead of creating a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feaa4e11d9d12c3ad23ecefe3c12ad5237471593" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#LinearAlgebra.ordschur&quot;&gt;&lt;code&gt;ordschur&lt;/code&gt;&lt;/a&gt; but overwrites the factorization &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0838af9d7f1512c150754e9bf4d9114982dd457" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#LinearAlgebra.schur&quot;&gt;&lt;code&gt;schur&lt;/code&gt;&lt;/a&gt; but uses the input argument &lt;code&gt;A&lt;/code&gt; as workspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89aaaa67b8fa0885f5cee679b54b29af0cfc758" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#LinearAlgebra.schur&quot;&gt;&lt;code&gt;schur&lt;/code&gt;&lt;/a&gt; but uses the input matrices &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; as workspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182610b60f6bd254f9d251e6a9bbbe2730b6aeb1" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;ordschur&lt;/code&gt; but overwrites the factorization &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17aa483f2d864af6421602c9f10a6164ddd4c1bb" translate="yes" xml:space="preserve">
          <source>Satellite Antenna</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c14ab20f3a9f832ead5de7b2b092a81c847db8e" translate="yes" xml:space="preserve">
          <source>Saturn</source>
          <target state="translated">Saturn</target>
        </trans-unit>
        <trans-unit id="fa1d57477c9bf7b5e613986063d1c4cf2cb6afd4" translate="yes" xml:space="preserve">
          <source>Saxophone</source>
          <target state="translated">Saxophone</target>
        </trans-unit>
        <trans-unit id="0f7d51ed8f67b928b5896485500920538c12e9a8" translate="yes" xml:space="preserve">
          <source>Say we are working on &lt;code&gt;Example&lt;/code&gt; and feel it needs new functionality. How can we modify the source code? We can use &lt;code&gt;develop&lt;/code&gt; to set up a git clone of the &lt;code&gt;Example&lt;/code&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f766369c7c6d28d7f913ae7c464c72574527be10" translate="yes" xml:space="preserve">
          <source>Say we have a change of heart and decide the world is not ready for such elegant code. We can tell Pkg to stop using the local clone and use a registered version instead. We do this with &lt;code&gt;free&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a45ec107beea3f02d170cc99ef551698446a7e" translate="yes" xml:space="preserve">
          <source>Scalar and array methods for &lt;code&gt;Die&lt;/code&gt; now work as expected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf5b1a72d1f6a14750fa5c27cf3a159162de8fe" translate="yes" xml:space="preserve">
          <source>Scalar types generally do not need to implement &lt;code&gt;isequal&lt;/code&gt; separate from &lt;code&gt;==&lt;/code&gt;, unless they represent floating-point numbers amenable to a more efficient implementation than that provided as a generic fallback (based on &lt;code&gt;isnan&lt;/code&gt;, &lt;code&gt;signbit&lt;/code&gt;, and &lt;code&gt;==&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791a17debdf37cca0d308cbbb073ed4cd26cabeb" translate="yes" xml:space="preserve">
          <source>Scalar values passed to these functions are treated as 1-element arrays. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62da9aca67ae9c4653f09445efdd2e680e491491" translate="yes" xml:space="preserve">
          <source>Scale an array &lt;code&gt;A&lt;/code&gt; by a scalar &lt;code&gt;b&lt;/code&gt; overwriting &lt;code&gt;A&lt;/code&gt; in-place. Use &lt;a href=&quot;#LinearAlgebra.lmul!&quot;&gt;&lt;code&gt;lmul!&lt;/code&gt;&lt;/a&gt; to multiply scalar from left. The scaling operation respects the semantics of the multiplication &lt;code&gt;*&lt;/code&gt; between an element of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. In particular, this also applies to multiplication involving non-finite numbers such as &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;&amp;plusmn;Inf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a716a0be007c71f3fe14d959e010d368190ea52a" translate="yes" xml:space="preserve">
          <source>Scale an array &lt;code&gt;B&lt;/code&gt; by a scalar &lt;code&gt;a&lt;/code&gt; overwriting &lt;code&gt;B&lt;/code&gt; in-place. Use &lt;a href=&quot;#LinearAlgebra.rmul!&quot;&gt;&lt;code&gt;rmul!&lt;/code&gt;&lt;/a&gt; to multiply scalar from right. The scaling operation respects the semantics of the multiplication &lt;code&gt;*&lt;/code&gt; between &lt;code&gt;a&lt;/code&gt; and an element of &lt;code&gt;B&lt;/code&gt;. In particular, this also applies to multiplication involving non-finite numbers such as &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;&amp;plusmn;Inf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1429a72540c69e025c517fcc5b792419c88cd1a" translate="yes" xml:space="preserve">
          <source>Scheduling</source>
          <target state="translated">Scheduling</target>
        </trans-unit>
        <trans-unit id="f2f3d66a7978c2077c56d962072c4cdd6cd95d44" translate="yes" xml:space="preserve">
          <source>School</source>
          <target state="translated">School</target>
        </trans-unit>
        <trans-unit id="2a39f047b76d67db0e509a993c55f9fb06c25a06" translate="yes" xml:space="preserve">
          <source>School Satchel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677c5f0e49b94db0582e40e7ee93f9698661288b" translate="yes" xml:space="preserve">
          <source>Scientific computing has traditionally required the highest performance, yet domain experts have largely moved to slower dynamic languages for daily work. We believe there are many good reasons to prefer dynamic languages for these applications, and we do not expect their use to diminish. Fortunately, modern language design and compiler techniques make it possible to mostly eliminate the performance trade-off and provide a single environment productive enough for prototyping and efficient enough for deploying performance-intensive applications. The Julia programming language fills this role: it is a flexible dynamic language, appropriate for scientific and numerical computing, with performance comparable to traditional statically-typed languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b7a5a3a3b61bf4ebf06442e1baf81fd734895d" translate="yes" xml:space="preserve">
          <source>Scope blocks it may be nested in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35009da72015651823ba955de229a9c26358f75" translate="yes" xml:space="preserve">
          <source>Scope constructs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4019fe9df26ea6cd31ac0f0123965e6bd1fb0a" translate="yes" xml:space="preserve">
          <source>Scope of Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d50ba5e0801158bc4e9d2f3ce31b46683bf4fca" translate="yes" xml:space="preserve">
          <source>Scope type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8534689f08116a6505e07e1a1106bfbfda456949" translate="yes" xml:space="preserve">
          <source>Scorpius</source>
          <target state="translated">Scorpius</target>
        </trans-unit>
        <trans-unit id="41e1ad7e7eb186cac0e0cf13c3c611d9251f8684" translate="yes" xml:space="preserve">
          <source>Script Capital B / Script B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fe65bec65958cd004dd14b90865a203d9638a0" translate="yes" xml:space="preserve">
          <source>Script Capital E / Script E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0711e58928da7fd7868be638a65c8cf61a323c39" translate="yes" xml:space="preserve">
          <source>Script Capital F / Script F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac69e2c5378a84f8bc473ac87eee425f9f721f72" translate="yes" xml:space="preserve">
          <source>Script Capital H / Script H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7486fc60b92e6fd189e22369494d35a1996eb0" translate="yes" xml:space="preserve">
          <source>Script Capital I / Script I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1988152ec0a97c198b6713988141842f3919db2" translate="yes" xml:space="preserve">
          <source>Script Capital L / Script L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8399e86cc6d85dfd595bf6ce16b2d04c511c9c" translate="yes" xml:space="preserve">
          <source>Script Capital M / Script M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff25a44167e25f0eb471934d9ea970b95046b5d5" translate="yes" xml:space="preserve">
          <source>Script Capital P / Script P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da6341df19efc1aee5d2a24a21146f393ddcbb3" translate="yes" xml:space="preserve">
          <source>Script Capital R / Script R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c632c9adf490c67c984203956d8b6aa611f0b588" translate="yes" xml:space="preserve">
          <source>Script Small E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f653841327845e894cd6c2a178b8e41919e2dd5" translate="yes" xml:space="preserve">
          <source>Script Small G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad0afbe2accac4bcb8244470271e399bf401302" translate="yes" xml:space="preserve">
          <source>Script Small L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f8873d0630052c428809604d870c109d20818a" translate="yes" xml:space="preserve">
          <source>Script Small O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7522becbe814d8b8cbc378f8930c8ca68bb2b8b5" translate="yes" xml:space="preserve">
          <source>Scripting</source>
          <target state="translated">Scripting</target>
        </trans-unit>
        <trans-unit id="090a3c807816bef76a7b19c9a37c7de92b0eaa5e" translate="yes" xml:space="preserve">
          <source>Scroll</source>
          <target state="translated">Scroll</target>
        </trans-unit>
        <trans-unit id="db7fb58ed2068561486de267505366fef6e7c85a" translate="yes" xml:space="preserve">
          <source>Search for all matches of a the regular expression &lt;code&gt;r&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; and return a iterator over the matches. If overlap is &lt;code&gt;true&lt;/code&gt;, the matching sequences are allowed to overlap indices in the original string, otherwise they must be from distinct character ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bb0f78698e938b4e678bb6645d512753fb1fb5" translate="yes" xml:space="preserve">
          <source>Search for the first match of the regular expression &lt;code&gt;r&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; and return a &lt;code&gt;RegexMatch&lt;/code&gt; object containing the match, or nothing if the match failed. The matching substring can be retrieved by accessing &lt;code&gt;m.match&lt;/code&gt; and the captured sequences can be retrieved by accessing &lt;code&gt;m.captures&lt;/code&gt; The optional &lt;code&gt;idx&lt;/code&gt; argument specifies an index at which to start the search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637781ec5a7ab95361dcf986fb8a58fdf15f627f" translate="yes" xml:space="preserve">
          <source>Search for the given pattern &lt;code&gt;pat&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;, and replace each occurrence with &lt;code&gt;r&lt;/code&gt;. If &lt;code&gt;count&lt;/code&gt; is provided, replace at most &lt;code&gt;count&lt;/code&gt; occurrences. &lt;code&gt;pat&lt;/code&gt; may be a single character, a vector or a set of characters, a string, or a regular expression. If &lt;code&gt;r&lt;/code&gt; is a function, each occurrence is replaced with &lt;code&gt;r(s)&lt;/code&gt; where &lt;code&gt;s&lt;/code&gt; is the matched substring (when &lt;code&gt;pat&lt;/code&gt;is a &lt;code&gt;Regex&lt;/code&gt; or &lt;code&gt;AbstractString&lt;/code&gt;) or character (when &lt;code&gt;pat&lt;/code&gt; is an &lt;code&gt;AbstractChar&lt;/code&gt; or a collection of &lt;code&gt;AbstractChar&lt;/code&gt;). If &lt;code&gt;pat&lt;/code&gt; is a regular expression and &lt;code&gt;r&lt;/code&gt; is a &lt;a href=&quot;#Base.SubstitutionString&quot;&gt;&lt;code&gt;SubstitutionString&lt;/code&gt;&lt;/a&gt;, then capture group references in &lt;code&gt;r&lt;/code&gt; are replaced with the corresponding matched text. To remove instances of &lt;code&gt;pat&lt;/code&gt; from &lt;code&gt;string&lt;/code&gt;, set &lt;code&gt;r&lt;/code&gt; to the empty &lt;code&gt;String&lt;/code&gt; (&lt;code&gt;&quot;&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293114936c88e497eae9d6957ea3a8908cde868e" translate="yes" xml:space="preserve">
          <source>Search modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2df4bf4e12e083ead8baa3c93c69a8f824dced" translate="yes" xml:space="preserve">
          <source>Search through all documentation for a string, ignoring case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de09f97fa8ce64167ae88469c1b7f2289aab9aa" translate="yes" xml:space="preserve">
          <source>Searches for the first library in &lt;code&gt;names&lt;/code&gt; in the paths in the &lt;code&gt;locations&lt;/code&gt; list, &lt;code&gt;DL_LOAD_PATH&lt;/code&gt;, or system library paths (in that order) which can successfully be dlopen'd. On success, the return value will be one of the names (potentially prefixed by one of the paths in locations). This string can be assigned to a &lt;code&gt;global const&lt;/code&gt; and used as the library name in future &lt;code&gt;ccall&lt;/code&gt;'s. On failure, it returns the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90b325aefc2f01d6543c649701c32d153279d4e" translate="yes" xml:space="preserve">
          <source>Seat</source>
          <target state="translated">Seat</target>
        </trans-unit>
        <trans-unit id="0f19cf9c383911df183d2bc7f7caa1efd81cfca3" translate="yes" xml:space="preserve">
          <source>Second, the logging tools allow you to attach arbitrary data to each event as a set of key&amp;ndash;value pairs. This allows you to capture local variables and other program state for later analysis. For example, to attach the local array variable &lt;code&gt;A&lt;/code&gt; and the sum of a vector &lt;code&gt;v&lt;/code&gt; as the key &lt;code&gt;s&lt;/code&gt; you can use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1bb223f770feacc7f2668280d1695ba99995faf" translate="yes" xml:space="preserve">
          <source>Section Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7dcd27d484b4dde83cb1112ae7e70ce1fa2b9c" translate="yes" xml:space="preserve">
          <source>Securing and encrypting all worker-worker traffic (via SSH) or encrypting individual messages can be done via a custom &lt;code&gt;ClusterManager&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f96c1a12bbdb27eca16c567fc9b563801fadd07" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Base.@cfunction&quot;&gt;&lt;code&gt;@cfunction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275ab99bb10dc43bd9dbb24eef97c59656c64b47" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Base.Dict&quot;&gt;&lt;code&gt;Dict&lt;/code&gt;&lt;/a&gt; for further help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fc0275909fbed6ae121a77adb21b4a57ce0738" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Base.Dict&quot;&gt;&lt;code&gt;Dict&lt;/code&gt;&lt;/a&gt; for further help. Note, unlike &lt;a href=&quot;#Base.Dict&quot;&gt;&lt;code&gt;Dict&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;WeakKeyDict&lt;/code&gt; does not convert keys on insertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674e2f3eb00fee7d462886f8245314f27d7bd4e1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Dates.DateFormat&quot;&gt;&lt;code&gt;DateFormat&lt;/code&gt;&lt;/a&gt; for details about format specifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792e670fa282d3ddddd002e27f92f7c55fcc0eb2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Dates.DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Dates.format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; for how to use a DateFormat object to parse and write Date strings respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786a33088a4360d003461effb7c879323c181090" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../manual/calling-c-and-fortran-code/index#Calling-C-and-Fortran-Code-1&quot;&gt;manual section on ccall and cfunction usage&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b095f2ddbc41168b82f08491ceaa5b7df199439c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../manual/metaprogramming/index#Metaprogramming-1&quot;&gt;Metaprogramming&lt;/a&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79713e878f38e64f4d40d7e48e10e9cf6300304" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../manual/performance-tips/index#man-code-warntype-1&quot;&gt;&lt;code&gt;@code_warntype&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5a32c0449bdc3c87acddc3d6f068625871e821" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../collections/index#Base.filter&quot;&gt;&lt;code&gt;Base.filter&lt;/code&gt;&lt;/a&gt; for an eager implementation of filtering for arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2be53f6bbe7616da54baa7fe93ed744952d2b4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../conversion-and-promotion/index#conversion-and-promotion-1&quot;&gt;Conversion and Promotion&lt;/a&gt; for how to define your own conversions and promotions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db0f1fab286c74406d5e9c9b0b5d6492fbdc8b8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../math/index#Base.Rounding.RoundingMode&quot;&gt;&lt;code&gt;RoundingMode&lt;/code&gt;&lt;/a&gt; for available modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f044def63776222dd2697f4f2ad2d08a4614a8e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../math/index#Base.Rounding.RoundingMode&quot;&gt;&lt;code&gt;RoundingMode&lt;/code&gt;&lt;/a&gt; for available rounding modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97e7c9f6b84e71b545f4320e1e3d7242961f10c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../types/index#man-custom-pretty-printing-1&quot;&gt;Custom pretty-printing&lt;/a&gt; for more information on how to implement display methods for custom types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071703c7a6e6c969a977bf3190279edee58875b0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../variables-and-scoping/index#scope-of-variables-1&quot;&gt;Scope of Variables&lt;/a&gt; for a detailed explanation of variable scope and how it works in Julia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789539b6ca7527ebb8b1ac6650fb2eb5fc196868" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;Profile.print([io], data)&lt;/code&gt; for an explanation of the valid keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe2d332cfea5b1081a5a60672495a4a6c35ae1e" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;Regex&lt;/code&gt; if interpolation is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3324fe378a2a771dba0759ba8126f01396e40df0" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;test/llvmcall.jl&lt;/code&gt; for usage examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc231e6fb720a8d5655cf18b59a54162a167de5" translate="yes" xml:space="preserve">
          <source>See Hwloc.jl or CpuId.jl for extended information, including number of physical cores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a718b79899eb48c66761d32ebd20618db79de9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.:&amp;gt;&amp;gt;&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.:&amp;gt;&amp;gt;&amp;gt;&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d454d6f7a494ff37faff3bcd2c6675410367342" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.:&amp;gt;&amp;gt;&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.:&amp;lt;&amp;lt;&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c29d5d293c80ebaeaeceb3f6c5d92ccc437ae1" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.:&amp;gt;&amp;gt;&amp;gt;&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.:&amp;lt;&amp;lt;&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4348c2534e584b41e7aa2268f9db1051c93e0a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.@isdefined&quot;&gt;&lt;code&gt;@isdefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d17bf52da4472e7cf4a40b35f110d5db8d4cd79" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@timed&quot;&gt;&lt;code&gt;@timed&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@elapsed&quot;&gt;&lt;code&gt;@elapsed&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#Base.@allocated&quot;&gt;&lt;code&gt;@allocated&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca60131a519abb297327d80b320bec7bc1472a5" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@timev&quot;&gt;&lt;code&gt;@timev&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@elapsed&quot;&gt;&lt;code&gt;@elapsed&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#Base.@allocated&quot;&gt;&lt;code&gt;@allocated&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64133a5298d8d63328bbd47744827b597dc6ae93" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@timev&quot;&gt;&lt;code&gt;@timev&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@timed&quot;&gt;&lt;code&gt;@timed&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#Base.@allocated&quot;&gt;&lt;code&gt;@allocated&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5140cdc4fb3814d2110cf6027ae55cc72867cb5f" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@timev&quot;&gt;&lt;code&gt;@timev&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@timed&quot;&gt;&lt;code&gt;@timed&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#Base.@elapsed&quot;&gt;&lt;code&gt;@elapsed&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed89d18ae7ccd9927626b4ddd344049cc30a2445" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.@timev&quot;&gt;&lt;code&gt;@timev&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@timed&quot;&gt;&lt;code&gt;@timed&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.@elapsed&quot;&gt;&lt;code&gt;@elapsed&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#Base.@allocated&quot;&gt;&lt;code&gt;@allocated&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25941a6418af661d5e48efaaeafa7f3e87ad967a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.Broadcast.DefaultArrayStyle&quot;&gt;&lt;code&gt;Broadcast.DefaultArrayStyle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3481dcbfd5c4c172ed779879996a33cc249d1945" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.Sort.sortperm!&quot;&gt;&lt;code&gt;sortperm!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591f16ab565ed5546122ea02b2e38e2fffa3ec55" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.Threads.Mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; for a more efficient version on one core or if the lock may be held for a considerable length of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc7f75ae57a2aad1dfd248c675703a8a9259f81" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.Threads.SpinLock&quot;&gt;&lt;code&gt;SpinLock&lt;/code&gt;&lt;/a&gt; for a lighter-weight lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc71aad08e8c98cabd0442565c6dd2e41b4dbb1" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.cconvert&quot;&gt;&lt;code&gt;cconvert&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1d9f9d95b50106cfdb5c874a8450f49671d1f5" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.checkindex&quot;&gt;&lt;code&gt;checkindex&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eace222b286d1def2aa30f38af1ced1256d9c1f2" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.circshift!&quot;&gt;&lt;code&gt;circshift!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06dc4d7c98e2191f67ae749c4f0097c2bfdf790" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.circshift&quot;&gt;&lt;code&gt;circshift&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0d9550fdd8ee71e8aa673ab6b670ab3f1697bb" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.endswith&quot;&gt;&lt;code&gt;endswith&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d47ddf4eb990d7c0bbecd855f69116225d8369" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.hasmethod&quot;&gt;&lt;code&gt;hasmethod&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e429e084b191e4be4e5a01296775582fae906e9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.invpermute!&quot;&gt;&lt;code&gt;invpermute!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511fa7b75b098aae411718ef294f18083bb9b5e9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.mark&quot;&gt;&lt;code&gt;mark&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.reset&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.ismarked&quot;&gt;&lt;code&gt;ismarked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ae084192f6aaa04c5a5c856a3a8e1eac833bc1" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.mark&quot;&gt;&lt;code&gt;mark&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.unmark&quot;&gt;&lt;code&gt;unmark&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.ismarked&quot;&gt;&lt;code&gt;ismarked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322845dfd2d3723ca345c0963ccae210847ddcaa" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.mark&quot;&gt;&lt;code&gt;mark&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.unmark&quot;&gt;&lt;code&gt;unmark&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.reset&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c194f0eadd7da66c8cab29dfe610cd9cae16589" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.nextpow&quot;&gt;&lt;code&gt;nextpow&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3239fcd99c5e3b5ec7c9bee0d66617b3b6b29fbd" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.occursin&quot;&gt;&lt;code&gt;occursin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.endswith&quot;&gt;&lt;code&gt;endswith&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8198007bdf991c0ecf7b1b4205162a83c0402a49" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.occursin&quot;&gt;&lt;code&gt;occursin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.startswith&quot;&gt;&lt;code&gt;startswith&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61a066a0cab6a67484624c5eb9e74a95b175398" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.permutedims&quot;&gt;&lt;code&gt;permutedims&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bfc81938b998357cdc969e82dffed2d70756b6" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.prevpow&quot;&gt;&lt;code&gt;prevpow&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a31ddd56f289ff3b0dc38fd27ab0bfbef323ce7" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.print&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt;, which writes un-decorated representations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca4d336aacdbb9ce70bc56f3dcebfe140769ce8" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.propertynames&quot;&gt;&lt;code&gt;propertynames&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.getproperty&quot;&gt;&lt;code&gt;getproperty&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626262d12f237a3584c86d9f449a9e529696336b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.propertynames&quot;&gt;&lt;code&gt;propertynames&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.setproperty!&quot;&gt;&lt;code&gt;setproperty!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546010050fad0a055f0aaf0044c7a389cf3ce343" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.replace!&quot;&gt;&lt;code&gt;replace!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8a38a5e3fdcd6b0effc4e7eded96f0bcc18d95" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.reshape&quot;&gt;&lt;code&gt;reshape&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd818985e8150459161d3af431c887b8a65d48c2" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.rsplit&quot;&gt;&lt;code&gt;rsplit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4123b29d50bfc0b2f1678af9d868e0e309e1dac" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;, and the manual chapter on &lt;a href=&quot;https://docs.julialang.org/en/v1.2.0/devdocs/offset-arrays/#man-custom-indices-1&quot;&gt;arrays with custom indices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7931bd7597049bdaa6d8830455b632236d46c9e3" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.startswith&quot;&gt;&lt;code&gt;startswith&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c12ade8f0d2268fdba0a34b790cecf9ecc81f9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base.unmark&quot;&gt;&lt;code&gt;unmark&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.reset&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.ismarked&quot;&gt;&lt;code&gt;ismarked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10bb6038f2b83b168cf0bcefa233ab46f85c7dc" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base64.base64decode&quot;&gt;&lt;code&gt;base64decode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f218b0144bcdeb697b2182d5a40c2b8a934492d" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Base64.base64encode&quot;&gt;&lt;code&gt;base64encode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1834bed124a88683cd03fa4a78d53295067d3704" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Core.applicable&quot;&gt;&lt;code&gt;applicable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ea1c0e586a9935ec4fcebeda5c32bd99fe6acd" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Core.isdefined&quot;&gt;&lt;code&gt;isdefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0ec7b24902226017c861d7f59b49ab28269035" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Distributed.cluster_cookie-Tuple%7B%7D&quot;&gt;&lt;code&gt;cluster_cookie&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d57b2c84aa16cc8cd811c1f423605fd6439e5e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#LibGit2.gitdir&quot;&gt;&lt;code&gt;gitdir&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#LibGit2.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98794db33a0c1d1e4e21853fb0398e9ed50ba39e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#LibGit2.gitdir&quot;&gt;&lt;code&gt;gitdir&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f7663da94a45031e1a4b100cde284d7a38f130" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#LibGit2.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb79b8e031dd8e377fd0d72de6e793881008e5b6" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Test.@test_nowarn&quot;&gt;&lt;code&gt;@test_nowarn&lt;/code&gt;&lt;/a&gt; to check for the absence of error output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c323fc04115752b9b9daebd2d432612902c79e6a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Distributed.remotecall-Tuple%7BAny,Integer,Vararg%7BAny,N%7D%20where%20N%7D&quot;&gt;&lt;code&gt;remotecall&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec42aecf7213ae547d3bf107ad3100cdcb4fccd1" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../faq/index#man-scripting-1&quot;&gt;Scripting&lt;/a&gt; for more information on writing Julia scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f47ce45a072be5122a1e211b794fe243b906175" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../math/index#Base.conj&quot;&gt;&lt;code&gt;conj&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fefbeb41111f063fe7a151bc207382aa3f2dda6" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;fetch&lt;/code&gt; and &lt;a href=&quot;#Distributed.remotecall-Tuple%7BAny,Integer,Vararg%7BAny,N%7D%20where%20N%7D&quot;&gt;&lt;code&gt;remotecall&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df3f7c92ea85ba3e4be151d3cc39cb5a04f57a7" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;../../manual/functions/index#man-vectorized-1&quot;&gt;dot syntax for vectorizing functions&lt;/a&gt;; for example, &lt;code&gt;f.(args...)&lt;/code&gt; implicitly calls &lt;code&gt;broadcast(f, args...)&lt;/code&gt;. Rather than relying on &quot;vectorized&quot; methods of functions like &lt;code&gt;sin&lt;/code&gt; to operate on arrays, you should use &lt;code&gt;sin.(a)&lt;/code&gt; to vectorize via &lt;code&gt;broadcast&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04eb7394a03110049f596e87f31ad15e6d3716e4" translate="yes" xml:space="preserve">
          <source>See also the closures in the examples in the next two sections. A variable, such as &lt;code&gt;x&lt;/code&gt; in the first example and &lt;code&gt;state&lt;/code&gt; in the second, that is inherited from the enclosing scope by the inner function is sometimes called a &lt;em&gt;captured&lt;/em&gt; variable. Captured variables can present performance challenges discussed in &lt;a href=&quot;../performance-tips/index#man-performance-tips-1&quot;&gt;performance tips&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9870bd6f04d3bb2ac86282c451c05e3b9e1d7d1" translate="yes" xml:space="preserve">
          <source>See also the discussion under &lt;a href=&quot;../types/index#Parametric-Types-1&quot;&gt;Parametric Types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8dcc6ec60030d0babf90bcc4be4d0762f6ab0ba" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.:%5E-Tuple%7BAbstractString,Integer%7D&quot;&gt;&lt;code&gt;^&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b29eed4ebc82a101850d7dfee74f5511f27a99e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.Dict&quot;&gt;&lt;code&gt;Dict&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c3130ccc806927d18995d1b47f95ebcdacd10f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.Filesystem.basename&quot;&gt;&lt;code&gt;basename&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac8c31749c0f85425027ad374d8edb75ee1dc79" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.Filesystem.dirname&quot;&gt;&lt;code&gt;dirname&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2b408bb40653147927f8086969123c66eaee9e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.Filesystem.isdir&quot;&gt;&lt;code&gt;isdir&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.Filesystem.ispath&quot;&gt;&lt;code&gt;ispath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3e0931ded51112cd4473036bc8dce573787583" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.Filesystem.isfile&quot;&gt;&lt;code&gt;isfile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.Filesystem.ispath&quot;&gt;&lt;code&gt;ispath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965dfa6104c44b63616f2b593a4a753a8757dd2a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.PermutedDimsArrays.PermutedDimsArray&quot;&gt;&lt;code&gt;PermutedDimsArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5d6e6888bb3664721e6bc730b20767950adb25" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.Unicode.lowercasefirst&quot;&gt;&lt;code&gt;lowercasefirst&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.Unicode.uppercase&quot;&gt;&lt;code&gt;uppercase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.Unicode.lowercase&quot;&gt;&lt;code&gt;lowercase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.Unicode.titlecase&quot;&gt;&lt;code&gt;titlecase&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a367516aa48133edde6344d09b845bf466d94cb" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.Unicode.uppercasefirst&quot;&gt;&lt;code&gt;uppercasefirst&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.Unicode.uppercase&quot;&gt;&lt;code&gt;uppercase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.Unicode.lowercase&quot;&gt;&lt;code&gt;lowercase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.Unicode.titlecase&quot;&gt;&lt;code&gt;titlecase&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4396f9be9f85e7ed0306eb6f8165ab60ca77df" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.codeunit&quot;&gt;&lt;code&gt;codeunit&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../arrays/index#Base.checkbounds&quot;&gt;&lt;code&gt;checkbounds&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.sizeof-Tuple%7BAbstractString%7D&quot;&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../collections/index#Base.length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../collections/index#Base.lastindex&quot;&gt;&lt;code&gt;lastindex&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19cc4beef368bdc5df1550dbb7096ac8e1188a9" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.fld1&quot;&gt;&lt;code&gt;fld1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.fldmod1&quot;&gt;&lt;code&gt;fldmod1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372f0d2d6b818ed6fffc516a0aa33be777467bfa" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.fld1&quot;&gt;&lt;code&gt;fld1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.mod1&quot;&gt;&lt;code&gt;mod1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0edc1820de7d410a7abb77770db8e14728ffc5f2" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.isvalid-Tuple%7BAny%7D&quot;&gt;&lt;code&gt;isvalid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.ncodeunits-Tuple%7BAbstractString%7D&quot;&gt;&lt;code&gt;ncodeunits&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../collections/index#Base.lastindex&quot;&gt;&lt;code&gt;lastindex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.thisind&quot;&gt;&lt;code&gt;thisind&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.nextind&quot;&gt;&lt;code&gt;nextind&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.prevind&quot;&gt;&lt;code&gt;prevind&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c25f052ea265f23f6ec71eb5b83afe4f668c565" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.mod1&quot;&gt;&lt;code&gt;mod1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.fldmod1&quot;&gt;&lt;code&gt;fldmod1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d7d765bd5b730362d63ed8df059cc1c3736527" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.ncodeunits-Tuple%7BAbstractString%7D&quot;&gt;&lt;code&gt;ncodeunits&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c379b3fcc43f99e63dffffc77d22989886885857" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.ncodeunits-Tuple%7BAbstractString%7D&quot;&gt;&lt;code&gt;ncodeunits&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../arrays/index#Base.checkbounds&quot;&gt;&lt;code&gt;checkbounds&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6d48a2f584facdaf77a78197e691a8506c1dea" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.permutedims&quot;&gt;&lt;code&gt;permutedims&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1241ddfcbaddaec4c4255cfc37bd9a3d46b4d500" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.pointer_from_objref&quot;&gt;&lt;code&gt;pointer_from_objref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63126489b1640dc0a6c082618e46b1be25fb4dd" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Base.unsafe_pointer_to_objref&quot;&gt;&lt;code&gt;unsafe_pointer_to_objref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89be1229ebd2784f1519296a1e5dc98f31928add" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#LinearAlgebra.Givens&quot;&gt;&lt;code&gt;LinearAlgebra.Givens&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bced76296e593d465226739091ce7ac026be0dbc" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#LinearAlgebra.diagm&quot;&gt;&lt;code&gt;diagm&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1eab714aa4459544e571400bdbf3baf8d2e8183" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#LinearAlgebra.givens&quot;&gt;&lt;code&gt;givens&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5844345435d6ffbfc2aea4c9998fd4893b734cf" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#SparseArrays.permute&quot;&gt;&lt;code&gt;permute&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd491bc2c601f562fbe1bcf5e5ce8f29bd028ff" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../../manual/environment-variables/index#JULIA_DEPOT_PATH-1&quot;&gt;&lt;code&gt;JULIA_DEPOT_PATH&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../manual/code-loading/index#Code-Loading-1&quot;&gt;Code Loading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac053f800be90a3a84e26dff324d4232bc3cd3e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../../manual/environment-variables/index#JULIA_LOAD_PATH-1&quot;&gt;&lt;code&gt;JULIA_LOAD_PATH&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../manual/environment-variables/index#JULIA_PROJECT-1&quot;&gt;&lt;code&gt;JULIA_PROJECT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../manual/environment-variables/index#JULIA_DEPOT_PATH-1&quot;&gt;&lt;code&gt;JULIA_DEPOT_PATH&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../manual/code-loading/index#Code-Loading-1&quot;&gt;Code Loading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ace7da9ac64fc032e3ebaabf3fa3ea1285dc401" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../arrays/index#Base.IndexStyle&quot;&gt;&lt;code&gt;IndexStyle&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;axes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63f31893c4b48d05459259b1ae6a19a265e3e2d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../arrays/index#Base.mapslices&quot;&gt;&lt;code&gt;mapslices&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e703418794ce3982518fa24044c3ee1236ffd397" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../arrays/index#Base.repeat&quot;&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debc74ee7d7c3eccb999c43bf28dbfb20cf5026c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../collections/index#Base.getindex&quot;&gt;&lt;code&gt;getindex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../collections/index#Base.iterate&quot;&gt;&lt;code&gt;iterate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.thisind&quot;&gt;&lt;code&gt;thisind&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.nextind&quot;&gt;&lt;code&gt;nextind&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.prevind&quot;&gt;&lt;code&gt;prevind&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../collections/index#Base.length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace707077a597ba91db1f5576fdadfc3875ac6eb" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../parallel/index#Base.sleep&quot;&gt;&lt;code&gt;sleep&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c71f9962e7c25edb7c40020a5d633a158a3504d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#stdlib-dates-api-1&quot;&gt;API reference&lt;/a&gt; for additional information on methods exported from the &lt;code&gt;Dates&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bd2b598e3d0f27674e80b34bfa8e04b8b4f934" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../base/io-network/index#Base.IOContext&quot;&gt;&lt;code&gt;IOContext&lt;/code&gt;&lt;/a&gt; documentation for a list of common properties which can be used to adjust printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f31d495cd76d606ed7dc1511958bebef6b614" translate="yes" xml:space="preserve">
          <source>See the manual chapter on &lt;a href=&quot;../../manual/metaprogramming/index#Metaprogramming-1&quot;&gt;Metaprogramming&lt;/a&gt; and the developer documentation &lt;a href=&quot;https://docs.julialang.org/en/v1.2.0/devdocs/ast/#Julia-ASTs-1&quot;&gt;Julia ASTs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ac8dbc32e4045b5e0187a9ae6369660d8e9bf2" translate="yes" xml:space="preserve">
          <source>See the manual section on &lt;a href=&quot;../../manual/types/index#Composite-Types-1&quot;&gt;Composite Types&lt;/a&gt; for more details, such as how to define constructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe32ac08e91050c27dd3a7365ae4d74571e1f1ac" translate="yes" xml:space="preserve">
          <source>See the manual section on &lt;a href=&quot;../../manual/types/index#Tuple-Types-1&quot;&gt;Tuple Types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76bfbf056967a745f57a50a8623442154716704e" translate="yes" xml:space="preserve">
          <source>See warning in the documentation for &lt;code&gt;free&lt;/code&gt; regarding only using this on memory originally obtained from &lt;code&gt;malloc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84989395cf9ab77848e80bcdb208e8dfb0c76eef" translate="yes" xml:space="preserve">
          <source>See-No-Evil Monkey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd59bd26f6a8da5acf378a8eae2e9bf4703bfeb" translate="yes" xml:space="preserve">
          <source>See? No problem. That's the correct midpoint between 2^62 and 2^63, despite the fact that &lt;code&gt;n + 2n&lt;/code&gt; is -4611686018427387904. Now try it in Matlab:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2934a640b3fd08d77bd1f6ffe26d0731470ee10b" translate="yes" xml:space="preserve">
          <source>Seedling</source>
          <target state="translated">Seedling</target>
        </trans-unit>
        <trans-unit id="2533a3332969a9aa67ade180ca5aa6df28b68b43" translate="yes" xml:space="preserve">
          <source>Seek a stream relative to the current position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76927d1d3d48984aa0450625e13d7a7a4d82568b" translate="yes" xml:space="preserve">
          <source>Seek a stream to its beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea37da4f598ad94c4bb5b76c2010e6ae8a006048" translate="yes" xml:space="preserve">
          <source>Seek a stream to its end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2396081c853240984bd992eddb62faa8dadb1413" translate="yes" xml:space="preserve">
          <source>Seek a stream to the given position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44986cef8a397dae061d979c2eb0f5062a727e3b" translate="yes" xml:space="preserve">
          <source>Segment</source>
          <target state="translated">Segment</target>
        </trans-unit>
        <trans-unit id="00d7b9a3151a57950ab56865a9497e7f61f70175" translate="yes" xml:space="preserve">
          <source>Selecting an appropriate output array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad55c6251d199d56464938d4dc72417d6ce214f4" translate="yes" xml:space="preserve">
          <source>Selecting an appropriate output array for the given set of arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4071861eec60fb0fb17c226591da595711fe36e" translate="yes" xml:space="preserve">
          <source>Selecting an efficient implementation for the given set of arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d197df5813d6312f4c4257bc7fc0a709546877f0" translate="yes" xml:space="preserve">
          <source>Selects one value from &lt;code&gt;A&lt;/code&gt; for each unique value produced by &lt;code&gt;f&lt;/code&gt; applied to elements of &lt;code&gt;A&lt;/code&gt; , then return the modified A.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb881ab1cd188ae66aa99c3dc8228baeb938bc3" translate="yes" xml:space="preserve">
          <source>Semaphore</source>
          <target state="translated">Semaphore</target>
        </trans-unit>
        <trans-unit id="0131593607e6acdcd902799597864f0a4f8afbf6" translate="yes" xml:space="preserve">
          <source>Semidirect Product With Bottom Closed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00dd390299200af6e9df5fa7f9f40aba02c5055" translate="yes" xml:space="preserve">
          <source>Send &lt;code&gt;msg&lt;/code&gt; over &lt;code&gt;socket&lt;/code&gt; to &lt;code&gt;host:port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36652d295d2b9437f13de23cbc4aa42ebf428678" translate="yes" xml:space="preserve">
          <source>Send a printed form of &lt;code&gt;x&lt;/code&gt; to the operating system clipboard (&quot;copy&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8ce670d11718c8c7b553c7cf78dafb5a0200b2" translate="yes" xml:space="preserve">
          <source>Send a signal to a process. The default is to terminate the process. Returns successfully if the process has already exited, but throws an error if killing the process failed for other reasons (e.g. insufficient permissions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa97b4c65e150c8eed6ded51bb443e9c0fdbd9e" translate="yes" xml:space="preserve">
          <source>Sending messages and moving data constitute most of the overhead in a distributed program. Reducing the number of messages and the amount of data sent is critical to achieving performance and scalability. To this end, it is important to understand the data movement performed by Julia's various distributed programming constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278c9500bca1655d88c43525dc1c0196747f87d7" translate="yes" xml:space="preserve">
          <source>Sending messages to a process is done directly from any Julia task&amp;ndash;not just communication tasks&amp;ndash;again, via the appropriate &lt;code&gt;IO&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2b4b45eddf912f5006a7337adf62b5246fd7a0" translate="yes" xml:space="preserve">
          <source>Separate convert and kernel logic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19e61058924fd153ddce51f57ff81ea70a6ff61" translate="yes" xml:space="preserve">
          <source>Separate kernel functions (aka, function barriers)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a83ceaa4d52d467b05bca4cb79f30acd4d8454" translate="yes" xml:space="preserve">
          <source>Sequential iteration is implemented by the &lt;a href=&quot;#Base.iterate&quot;&gt;&lt;code&gt;iterate&lt;/code&gt;&lt;/a&gt; function. The general &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8e1a93dd49dafea58241752a0e2eebf4445cc1" translate="yes" xml:space="preserve">
          <source>Sequential iteration is implemented by the &lt;a href=&quot;../../base/collections/index#Base.iterate&quot;&gt;&lt;code&gt;iterate&lt;/code&gt;&lt;/a&gt; function. Instead of mutating objects as they are iterated over, Julia iterators may keep track of the iteration state externally from the object. The return value from iterate is always either a tuple of a value and a state, or &lt;code&gt;nothing&lt;/code&gt; if no elements remain. The state object will be passed back to the iterate function on the next iteration and is generally considered an implementation detail private to the iterable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89282363da677473acdbf45f0831bde9f4d3b6c4" translate="yes" xml:space="preserve">
          <source>Serialization</source>
          <target state="translated">Serialization</target>
        </trans-unit>
        <trans-unit id="66b3413a9b4ec6cf9e61c4c82679d147538e747b" translate="yes" xml:space="preserve">
          <source>Serializing a &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; also serializes any data present in the channel. Deserializing it therefore effectively makes a copy of the original object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a191e12245bfe6cf8e0a067473bd74802ac847b" translate="yes" xml:space="preserve">
          <source>Sessions and the REPL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448ab73ba1c21e671e218fb91f2644c834f0c16f" translate="yes" xml:space="preserve">
          <source>Set</source>
          <target state="translated">Set</target>
        </trans-unit>
        <trans-unit id="29d49d68bc6e6e7a67f37b064f5896d91befff2c" translate="yes" xml:space="preserve">
          <source>Set &amp;lt;dir&amp;gt; as the home project/environment. The default @. option will search through parent directories until a Project.toml or JuliaProject.toml file is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78dff101035de02bb000a5f8e206286f30a2344f" translate="yes" xml:space="preserve">
          <source>Set Minus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4bea18fbf647474d4084d3c0b8e9a425c32b70" translate="yes" xml:space="preserve">
          <source>Set UDP socket options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f12f942730fcb183ef924676757d8d6116ca4df" translate="yes" xml:space="preserve">
          <source>Set both the fetch and push &lt;code&gt;url&lt;/code&gt; for &lt;code&gt;remote_name&lt;/code&gt; for the &lt;a href=&quot;#LibGit2.GitRepo&quot;&gt;&lt;code&gt;GitRepo&lt;/code&gt;&lt;/a&gt; or the git repository located at &lt;code&gt;path&lt;/code&gt;. Typically git repos use &lt;code&gt;&quot;origin&quot;&lt;/code&gt; as the remote name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f6f158a99c1f277ff80a8f91774d1f3f9f20cb" translate="yes" xml:space="preserve">
          <source>Set environment variables to use when running the given &lt;code&gt;command&lt;/code&gt;. &lt;code&gt;env&lt;/code&gt; is either a dictionary mapping strings to strings, an array of strings of the form &lt;code&gt;&quot;var=val&quot;&lt;/code&gt;, or zero or more &lt;code&gt;&quot;var&quot;=&amp;gt;val&lt;/code&gt; pair arguments. In order to modify (rather than replace) the existing environment, create &lt;code&gt;env&lt;/code&gt; by &lt;code&gt;copy(ENV)&lt;/code&gt; and then setting &lt;code&gt;env[&quot;var&quot;]=val&lt;/code&gt; as desired, or use &lt;code&gt;withenv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a1d068e3d8971774d30377661f039ad4e8dfc2" translate="yes" xml:space="preserve">
          <source>Set location of &lt;code&gt;julia&lt;/code&gt; executable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3510131f92f97e0d782ffe4ac8ea1f4e17664447" translate="yes" xml:space="preserve">
          <source>Set the &quot;mark&quot; in the editing region (and de-activate the region if it's active)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28728ae16dea5619b44fe7f8bee4e547449a754" translate="yes" xml:space="preserve">
          <source>Set the &quot;mark&quot; in the editing region and make the region &quot;active&quot;, i.e. highlighted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b2d0d4fcf4e22604551817fbcd216ffab20b92" translate="yes" xml:space="preserve">
          <source>Set the HEAD of &lt;code&gt;repo&lt;/code&gt; to the object pointed to by &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f30fa08c68e8f084fb5112891ac31d832c9e150" translate="yes" xml:space="preserve">
          <source>Set the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5862cf09f48a34d38810ce190ef8fa08ff366e48" translate="yes" xml:space="preserve">
          <source>Set the global logger to &lt;code&gt;logger&lt;/code&gt;, and return the previous global logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f308b920f5f549f20ba414e9be59f7e41c2b5bea" translate="yes" xml:space="preserve">
          <source>Set the number of threads the BLAS library should use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29920ea380bf681220c734f5f075fb5a90c90df7" translate="yes" xml:space="preserve">
          <source>Set the optimization level (default level is 2 if unspecified or 3 if used without a level)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea45fd0c01b6858158fa18c8c41e06f21ebd5145" translate="yes" xml:space="preserve">
          <source>Set the optional keyword argument &lt;code&gt;debuginfo&lt;/code&gt; by putting it before the function call, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe94844acf202f9c0ade596d1d0863c557df3c91" translate="yes" xml:space="preserve">
          <source>Set the passed cookie as the cluster cookie, then returns it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996e06fb620acbcbad11ced4062176fde853fa66" translate="yes" xml:space="preserve">
          <source>Set the precision (in bits) to be used for &lt;code&gt;T&lt;/code&gt; arithmetic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fd69f8e91dd51899c0564b7ca7eaa19a3fa53b" translate="yes" xml:space="preserve">
          <source>Set the process title. No-op on some operating systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90f4cb0139103f5a4fdbbc993715131f447003a" translate="yes" xml:space="preserve">
          <source>Set the rounding mode of floating point type &lt;code&gt;T&lt;/code&gt;, controlling the rounding of basic arithmetic functions (&lt;a href=&quot;../math/index#Base.:+&quot;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;a href=&quot;../math/index#Base.:/&quot;&gt;&lt;code&gt;/&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;sqrt&lt;/code&gt;) and type conversion. Other numerical functions may give incorrect or invalid values when using rounding modes other than the default &lt;a href=&quot;../math/index#Base.Rounding.RoundNearest&quot;&gt;&lt;code&gt;RoundNearest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5d963cbdae9aea9f927cfdd56d65463e923278" translate="yes" xml:space="preserve">
          <source>Set-Like Collections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03637a3281b25c62abaf1329135303db283e161c" translate="yes" xml:space="preserve">
          <source>Sets of definitions like the following are confusing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6947ee396a9d679500a412cd44a4b2697a1230" translate="yes" xml:space="preserve">
          <source>Sets the current head to the specified commit oid and optionally resets the index and working tree to match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="f96dd0c67fa73ab291c057e2e14a0df1300a9702" translate="yes" xml:space="preserve">
          <source>Several Julia values can be pushed at once using the &lt;code&gt;JL_GC_PUSH2&lt;/code&gt; , &lt;code&gt;JL_GC_PUSH3&lt;/code&gt; , &lt;code&gt;JL_GC_PUSH4&lt;/code&gt; , &lt;code&gt;JL_GC_PUSH5&lt;/code&gt; , and &lt;code&gt;JL_GC_PUSH6&lt;/code&gt; macros. To push an array of Julia values one can use the &lt;code&gt;JL_GC_PUSHARGS&lt;/code&gt; macro, which can be used as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af928633029a42d21800f86d727f01b5cadf57a8" translate="yes" xml:space="preserve">
          <source>Several additional restrictions are placed on the operations that can be done while precompiling code to help the user avoid other wrong-behavior situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93e49fa90ce37d5c6876608c48743a1f078e63c" translate="yes" xml:space="preserve">
          <source>Several standard functions like &lt;a href=&quot;../../base/strings/index#Base.chop&quot;&gt;&lt;code&gt;chop&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/strings/index#Base.chomp&quot;&gt;&lt;code&gt;chomp&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../base/strings/index#Base.strip&quot;&gt;&lt;code&gt;strip&lt;/code&gt;&lt;/a&gt; return a &lt;a href=&quot;../../base/strings/index#Base.SubString&quot;&gt;&lt;code&gt;SubString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcb071ef5f58e14c219843c64e6e7fc9ecaf5c5" translate="yes" xml:space="preserve">
          <source>Severity/verbosity of a log record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab8e5b0a0792357c9491abc1e1e4a4b5678856c" translate="yes" xml:space="preserve">
          <source>Shared Array support is available via module &lt;code&gt;SharedArrays&lt;/code&gt; which must be explicitly loaded on all participating workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2da0d622fbe44933bacf056b710dcb05aa5164" translate="yes" xml:space="preserve">
          <source>Shared Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d89842c110a65a93fb3e9a668f4b792bbe6a83" translate="yes" xml:space="preserve">
          <source>Shared Arrays and Distributed Garbage Collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8debce0c3bc86670fafaaed11703ec7d447586e1" translate="yes" xml:space="preserve">
          <source>Shared Arrays use system shared memory to map the same array across many processes. While there are some similarities to a &lt;a href=&quot;https://github.com/JuliaParallel/DistributedArrays.jl&quot;&gt;&lt;code&gt;DArray&lt;/code&gt;&lt;/a&gt;, the behavior of a &lt;a href=&quot;../../stdlib/sharedarrays/index#SharedArrays.SharedArray&quot;&gt;&lt;code&gt;SharedArray&lt;/code&gt;&lt;/a&gt; is quite different. In a &lt;a href=&quot;https://github.com/JuliaParallel/DistributedArrays.jl&quot;&gt;&lt;code&gt;DArray&lt;/code&gt;&lt;/a&gt;, each process has local access to just a chunk of the data, and no two processes share the same chunk; in contrast, in a &lt;a href=&quot;../../stdlib/sharedarrays/index#SharedArrays.SharedArray&quot;&gt;&lt;code&gt;SharedArray&lt;/code&gt;&lt;/a&gt; each &quot;participating&quot; process has access to the entire array. A &lt;a href=&quot;../../stdlib/sharedarrays/index#SharedArrays.SharedArray&quot;&gt;&lt;code&gt;SharedArray&lt;/code&gt;&lt;/a&gt; is a good choice when you want to have a large amount of data jointly accessible to two or more processes on the same machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912728fe61f515ab62934ca251cf4def66e656f9" translate="yes" xml:space="preserve">
          <source>Shared libraries and functions are referenced by a tuple of the form &lt;code&gt;(:function, &quot;library&quot;)&lt;/code&gt; or &lt;code&gt;(&quot;function&quot;, &quot;library&quot;)&lt;/code&gt; where &lt;code&gt;function&lt;/code&gt; is the C-exported function name. &lt;code&gt;library&lt;/code&gt; refers to the shared library name: shared libraries available in the (platform-specific) load path will be resolved by name, and if necessary a direct path may be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb929c20ee118d1648f10cf63973d3694f6b38dc" translate="yes" xml:space="preserve">
          <source>SharedArrays.SharedArray</source>
          <target state="translated">SharedArrays.SharedArray</target>
        </trans-unit>
        <trans-unit id="5fc5f1d1e7eb18a863d7414ae0ba350b16674a1d" translate="yes" xml:space="preserve">
          <source>SharedArrays.SharedMatrix</source>
          <target state="translated">SharedArrays.SharedMatrix</target>
        </trans-unit>
        <trans-unit id="3dbf0642e8e5b08c281c0f3961bea10b8ba7ef24" translate="yes" xml:space="preserve">
          <source>SharedArrays.SharedVector</source>
          <target state="translated">SharedArrays.SharedVector</target>
        </trans-unit>
        <trans-unit id="cc35980abe22a14f0f47ab472374a5283357bbc1" translate="yes" xml:space="preserve">
          <source>SharedArrays.indexpids()</source>
          <target state="translated">SharedArrays.indexpids()</target>
        </trans-unit>
        <trans-unit id="00192f4e6a25cd120b419d2533c26cb89edeae1c" translate="yes" xml:space="preserve">
          <source>SharedArrays.localindices()</source>
          <target state="translated">SharedArrays.localindices()</target>
        </trans-unit>
        <trans-unit id="d642e568596e6f9e6fb46dfc26aeea098db5703a" translate="yes" xml:space="preserve">
          <source>SharedArrays.sdata()</source>
          <target state="translated">SharedArrays.sdata()</target>
        </trans-unit>
        <trans-unit id="76663b8722e6a3d52ef030b5b9440383a53f5c90" translate="yes" xml:space="preserve">
          <source>Shaved Ice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02df9167bdb67c635b991f5ae1f7f708f35f0ecd" translate="yes" xml:space="preserve">
          <source>Sheep</source>
          <target state="translated">Sheep</target>
        </trans-unit>
        <trans-unit id="1648b09e7397f0e694477a89b4f0f3c2f1639320" translate="yes" xml:space="preserve">
          <source>Shell metacharacters, such as &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&lt;/code&gt;, need to be quoted (or escaped) inside of Julia's backticks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411430d5faea18a48223083d430d03ec02723be9" translate="yes" xml:space="preserve">
          <source>Shell mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a89e6d18fc62a345fef7e3ae72b85f06eee482c" translate="yes" xml:space="preserve">
          <source>Shift-Arrow Key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323d4fc7337134a2162bb67a7863b34b01f77eb8" translate="yes" xml:space="preserve">
          <source>Ship</source>
          <target state="translated">Ship</target>
        </trans-unit>
        <trans-unit id="9b62d709d134a9d3d0b2d41d0c7a4e9c6b73ef99" translate="yes" xml:space="preserve">
          <source>Shooting Star</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc28ceec7fbc599706ecf29a5a6dffa444c16a09" translate="yes" xml:space="preserve">
          <source>Short Rightwards Arrow Above Leftwards Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fde4569a2faa44c5ddeaabe546ab1be94f941e" translate="yes" xml:space="preserve">
          <source>Short-Circuit Evaluation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16194995605d6ee90ec8362ebec2339fee131c61" translate="yes" xml:space="preserve">
          <source>Short-circuit evaluation is quite similar to conditional evaluation. The behavior is found in most imperative programming languages having the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; boolean operators: in a series of boolean expressions connected by these operators, only the minimum number of expressions are evaluated as are necessary to determine the final boolean value of the entire chain. Explicitly, this means that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd236d3e884d27ae35594342e910bb0a3af9552" translate="yes" xml:space="preserve">
          <source>Short-circuiting boolean AND.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae11a365f3bb222f343bea5c896bc27e5b4b5c56" translate="yes" xml:space="preserve">
          <source>Short-circuiting boolean OR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63c57f4bb632446ad16abfbfaec70109fe6b488" translate="yes" xml:space="preserve">
          <source>Shortcake</source>
          <target state="translated">Shortcake</target>
        </trans-unit>
        <trans-unit id="13d857d690e61aa5d2c21bbca39ba2d225b916e2" translate="yes" xml:space="preserve">
          <source>Show a descriptive representation of an exception object &lt;code&gt;e&lt;/code&gt;. This method is used to display the exception after a call to &lt;a href=&quot;../base/index#Core.throw&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4882a44c113b7895b3f5753b35ef8afda29feed" translate="yes" xml:space="preserve">
          <source>Show a file using the default pager, optionally providing a starting line number. Returns to the &lt;code&gt;julia&lt;/code&gt; prompt when you quit the pager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2058ca083d1f36fe794e918744abb9b5929c90" translate="yes" xml:space="preserve">
          <source>Show an expression and result, returning the result. See also &lt;code&gt;show&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43576ed920f74159732c307b9698bf20b405fca" translate="yes" xml:space="preserve">
          <source>Show every part of the representation of a value. The depth of the output is truncated at &lt;code&gt;maxdepth&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fe6a176e8e2adbe870419929d33865588c87b5" translate="yes" xml:space="preserve">
          <source>Show every part of the representation of the given expression. Equivalent to &lt;a href=&quot;#Base.dump&quot;&gt;&lt;code&gt;dump(:(expr))&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4832baace2d518f59224e12643f64768fb2af2e1" translate="yes" xml:space="preserve">
          <source>Show the definition of a function using the default pager, optionally specifying a tuple of types to indicate which method to see.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c7ab6afc2f78e458626158eaa71e794282cc61" translate="yes" xml:space="preserve">
          <source>Show which files have changed in the git repository &lt;code&gt;repo&lt;/code&gt; between branches &lt;code&gt;branch1&lt;/code&gt; and &lt;code&gt;branch2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5463d324a16d0a6f3cc88c9bbf9479fb75dc6dc" translate="yes" xml:space="preserve">
          <source>Shower</source>
          <target state="translated">Shower</target>
        </trans-unit>
        <trans-unit id="2366cd0e6538aa1886ac114796240ce8779cfe89" translate="yes" xml:space="preserve">
          <source>Shuffle Product</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea3436088a360535a9d571ff9607783669733344" translate="yes" xml:space="preserve">
          <source>Side effects and mutable function arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4220634d39bb054925676f636fd8b0d06a202f" translate="yes" xml:space="preserve">
          <source>Sign and absolute value functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8dbaded4e6ce37a5bfa6e72c4d06fd92a77d90f" translate="yes" xml:space="preserve">
          <source>Signed?</source>
          <target state="translated">Signed?</target>
        </trans-unit>
        <trans-unit id="c235447096b8f7d2151ca5fe3290fd626e02337d" translate="yes" xml:space="preserve">
          <source>Silhouette Of Japan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d7df455d3db0ad995b979a499d31f8b8eee061" translate="yes" xml:space="preserve">
          <source>SimdLoop.@simd</source>
          <target state="translated">SimdLoop.@simd</target>
        </trans-unit>
        <trans-unit id="6f080959dd002556bacf012d8b5ccf52be3834b3" translate="yes" xml:space="preserve">
          <source>Similar Above Greater-Than Above Equals Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ae1034c198e10b7c671e0b0228242ecb161031" translate="yes" xml:space="preserve">
          <source>Similar Above Less-Than Above Equals Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a64ef5f565198e83693a5db32f94bc2b17951a1" translate="yes" xml:space="preserve">
          <source>Similar Minus Similar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b30f9014c9689fa8c4bf6c979c37e9059abe96d" translate="yes" xml:space="preserve">
          <source>Similar Or Greater-Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4660b04770bc0cfbcb3f4bb7ae952af3a9aea539" translate="yes" xml:space="preserve">
          <source>Similar Or Less-Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1a9a419122d67df4555d2738f2f12db073b787" translate="yes" xml:space="preserve">
          <source>Similar definitions exist for &lt;code&gt;AbstractString&lt;/code&gt;, &lt;a href=&quot;../../base/arrays/index#Core.AbstractArray&quot;&gt;&lt;code&gt;AbstractArray&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../base/collections/index#Base.AbstractDict&quot;&gt;&lt;code&gt;AbstractDict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9140282b9d999b7d6628367cce314f81a94758c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#Base.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt;, but starting from the end of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f85b46118bc97008e1bb1b0ff2763eb0271adf8" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#Libdl.dlopen&quot;&gt;&lt;code&gt;dlopen&lt;/code&gt;&lt;/a&gt;, except returns &lt;code&gt;C_NULL&lt;/code&gt; instead of raising errors. This method is now deprecated in favor of &lt;code&gt;dlopen(libfile::AbstractString [, flags::Integer]; throw_error=false)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa5b667ee208336befd004e52073217d8a7ce61" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;../math/index#Base.:==&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt;, except for the treatment of floating point numbers and of missing values. &lt;code&gt;isequal&lt;/code&gt; treats all floating-point &lt;code&gt;NaN&lt;/code&gt; values as equal to each other, treats &lt;code&gt;-0.0&lt;/code&gt; as unequal to &lt;code&gt;0.0&lt;/code&gt;, and &lt;a href=&quot;#Base.missing&quot;&gt;&lt;code&gt;missing&lt;/code&gt;&lt;/a&gt; as equal to &lt;code&gt;missing&lt;/code&gt;. Always returns a &lt;code&gt;Bool&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376a11ca732c35654209dc4520ce7e23f16bb65b" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;open(command, mode, stdio)&lt;/code&gt;, but calls &lt;code&gt;f(stream)&lt;/code&gt; on the resulting process stream, then closes the input stream and waits for the process to complete. Returns the value returned by &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95335ed440bfff85ce8538639cf5d28b28869bf7" translate="yes" xml:space="preserve">
          <source>Similarly, more than &lt;code&gt;N&lt;/code&gt; indices may be provided if all the indices beyond the dimensionality of the array are &lt;code&gt;1&lt;/code&gt; (or more generally are the first and only element of &lt;code&gt;axes(A, d)&lt;/code&gt; where &lt;code&gt;d&lt;/code&gt; is that particular dimension number). This allows vectors to be indexed like one-column matrices, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce17f01caba3e7fcf4e70553f21642d331d27ba" translate="yes" xml:space="preserve">
          <source>Similarly, the environment variable can be used to enable debug logging of modules, such as &lt;code&gt;Pkg&lt;/code&gt;, or module roots (see &lt;a href=&quot;../../base/base/index#Base.moduleroot&quot;&gt;&lt;code&gt;Base.moduleroot&lt;/code&gt;&lt;/a&gt;). To enable all debug logging, use the special value &lt;code&gt;all&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5feb803bbd01f737e0b7adde006f0c9ae2a90dfd" translate="yes" xml:space="preserve">
          <source>Similarly, you can completely override out-of-place broadcasting with a &lt;code&gt;copy(::Broadcasted)&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22f7716f4ba4a45fb97f76539f0af217ea85698" translate="yes" xml:space="preserve">
          <source>Simple blocks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0634da4a81121be3978ee9743ea4d65e34bf92d2" translate="yes" xml:space="preserve">
          <source>Simple unit testing can be performed with the &lt;code&gt;@test&lt;/code&gt; and &lt;code&gt;@test_throws&lt;/code&gt; macros:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa08ec2f745a5cc8c82ca5dcaaf00e59b1eb79d" translate="yes" xml:space="preserve">
          <source>Simplistic logger for logging all messages with level greater than or equal to &lt;code&gt;min_level&lt;/code&gt; to &lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59cec8ece150f09f30010bb66e54f9934915342c" translate="yes" xml:space="preserve">
          <source>Simultaneously compute the sine and cosine of &lt;code&gt;x&lt;/code&gt;, where the &lt;code&gt;x&lt;/code&gt; is in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117050eb680a739bd88cd0ff10dfac98e18ee085" translate="yes" xml:space="preserve">
          <source>Simultaneously return the &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;ceil&lt;/code&gt; of &lt;code&gt;Period&lt;/code&gt; at resolution &lt;code&gt;p&lt;/code&gt;. More efficient than calling both &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;ceil&lt;/code&gt; individually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf5a498d8c50bc560735315853859d694145dfc" translate="yes" xml:space="preserve">
          <source>Simultaneously return the &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;ceil&lt;/code&gt; of a &lt;code&gt;Date&lt;/code&gt; or &lt;code&gt;DateTime&lt;/code&gt; at resolution &lt;code&gt;p&lt;/code&gt;. More efficient than calling both &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;ceil&lt;/code&gt; individually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58e265cc33e1bfc34e37832ea4451c5590bc6e8" translate="yes" xml:space="preserve">
          <source>Simultaneously return the month and day parts of a &lt;code&gt;Date&lt;/code&gt; or &lt;code&gt;DateTime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cf560604a6ba7a2aae33c313d083a6f2006490" translate="yes" xml:space="preserve">
          <source>Simultaneously return the year and month parts of a &lt;code&gt;Date&lt;/code&gt; or &lt;code&gt;DateTime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae97fed5381ea26b6e6abad7ee87261748c9edae" translate="yes" xml:space="preserve">
          <source>Simultaneously return the year, month and day parts of a &lt;code&gt;Date&lt;/code&gt; or &lt;code&gt;DateTime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8547fb4926321d1494cdbce0f2ceee9efbf7e5" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;s are write-once and cached locally, the act of &lt;code&gt;fetch&lt;/code&gt;ing a &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; also updates reference tracking information on the node owning the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ee6044d8cc6590f25bd3589ed6d17b0a3d602d" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;A&lt;/code&gt; is not Hermitian, symmetric, triangular, tridiagonal, or bidiagonal, an LU factorization may be the best we can do. Compare with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8590456dae59c9c55a0997bfbb8fd6fa7be0129f" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;BitArray&lt;/code&gt;s can only store elements of type &lt;a href=&quot;../numbers/index#Core.Bool&quot;&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/a&gt;, however, if you request a different element type it will create a regular &lt;code&gt;Array&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4d2fe3817a161e2de0368df168942658b0d4f0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;Point{Float64}&lt;/code&gt; is not a subtype of &lt;code&gt;Point{Real}&lt;/code&gt;, the following method can't be applied to arguments of type &lt;code&gt;Point{Float64}&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8c5f05ad4ad7015ec7a84b6219593641a8df6b" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;end&lt;/code&gt; is always the last valid index into a collection, &lt;code&gt;end-1&lt;/code&gt; references an invalid byte index if the second-to-last character is multibyte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46a9a04675dd7f0971d0b0bb8a2a9005918879e" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;let&lt;/code&gt; introduces a new scope block, the inner local &lt;code&gt;x&lt;/code&gt; is a different variable than the outer local &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da26ce0d4fd8061bc4c596b5bb7480303f7806d" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;missing&lt;/code&gt; values propagate with standard mathematical operators, reduction functions return &lt;code&gt;missing&lt;/code&gt; when called on arrays which contain missing values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e9fbeef609ede02ed54371677baf9bc62b87b0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;where&lt;/code&gt; expressions nest, type variable bounds can refer to outer type variables. For example &lt;code&gt;Tuple{T,Array{S}} where S&amp;lt;:AbstractArray{T} where T&amp;lt;:Real&lt;/code&gt; refers to 2-tuples whose first element is some &lt;a href=&quot;../../base/numbers/index#Core.Real&quot;&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt;, and whose second element is an &lt;code&gt;Array&lt;/code&gt; of any kind of array whose element type contains the type of the first tuple element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c8adf6d75a260b753ed6fe0c4397e562c40405" translate="yes" xml:space="preserve">
          <source>Since adding dots to many operations and function calls in an expression can be tedious and lead to code that is difficult to read, the macro &lt;a href=&quot;../../base/arrays/index#Base.Broadcast.@__dot__&quot;&gt;&lt;code&gt;@.&lt;/code&gt;&lt;/a&gt; is provided to convert &lt;em&gt;every&lt;/em&gt; function call, operation, and assignment in an expression into the &quot;dotted&quot; version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b312b53d0cda8c6dd3d8fd64581d8450397ba2" translate="yes" xml:space="preserve">
          <source>Since all packages in a package directory environment are, by definition, subdirectories with the expected entry-point files, their &lt;code&gt;paths&lt;/code&gt; map entries always have this form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc19718772968a0122fac2080237f2738f827ca8" translate="yes" xml:space="preserve">
          <source>Since all processes have access to the underlying data, you do have to be careful not to set up conflicts. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13987a3a619bc16e0bb5aca3e4abeb0e4b831a19" translate="yes" xml:space="preserve">
          <source>Since expressions are just &lt;code&gt;Expr&lt;/code&gt; objects which can be constructed programmatically and then evaluated, it is possible to dynamically generate arbitrary code which can then be run using &lt;a href=&quot;../../base/base/index#Base.MainInclude.eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;. Here is a simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110ed2682710e43376be31b0bf6157aefc58b8dd" translate="yes" xml:space="preserve">
          <source>Since function definitions can be entered into interactive sessions, it is easy to compare these definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bdbe9bfa98f49634c56a92db843c8272b9af44d" translate="yes" xml:space="preserve">
          <source>Since higher-order functions are often called with anonymous functions, it is easy to conclude that this is desirable or even necessary. But any function can be passed directly, without being &quot;wrapped&quot; in an anonymous function. Instead of writing &lt;code&gt;map(x-&amp;gt;f(x), a)&lt;/code&gt;, write &lt;a href=&quot;../../base/collections/index#Base.map&quot;&gt;&lt;code&gt;map(f, a)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9153d556a788cc5c3bf5675d2d08285b0723d8" translate="yes" xml:space="preserve">
          <source>Since operations like this are very thin wrappers over the relevant BLAS functions, the reason for the discrepancy is very likely to be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9eab95014611591c1e11867f08e09682af79392" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;bar&lt;/code&gt; field is unconstrained in type, any value will do. However, the value for &lt;code&gt;baz&lt;/code&gt; must be convertible to &lt;code&gt;Int&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18762eaec13dffe610890e7b245164121553170b" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;begin&lt;/code&gt; construct does not introduce a new scope, it can be useful to use a zero-argument &lt;code&gt;let&lt;/code&gt; to just introduce a new scope block without creating any new bindings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9691cd750ab549f1aa85e16730bf72faa7585195" translate="yes" xml:space="preserve">
          <source>Since the abbreviated versions of the days are not loaded, trying to use the function &lt;code&gt;dayabbr&lt;/code&gt; will error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7de4b37b7839fb4e4caecedd9ee7340bcfaf9c" translate="yes" xml:space="preserve">
          <source>Since the body of the generated function is non-deterministic, its behavior, &lt;em&gt;and the behavior of all subsequent code&lt;/em&gt; is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99cb3fa338377dfe0890451715a8363d3b80ec9" translate="yes" xml:space="preserve">
          <source>Since the call to &lt;code&gt;f&lt;/code&gt; gets inlined, the loop body ends up being just a single &lt;code&gt;leaq&lt;/code&gt; instruction. Next, consider what happens if we make the number of loop iterations fixed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce1d8b90a6c407ede755123592746f6fea0e8ba" translate="yes" xml:space="preserve">
          <source>Since the decentralized naming problem is somewhat abstract, it may help to walk through a concrete scenario to understand the issue. Suppose you're developing an application called &lt;code&gt;App&lt;/code&gt;, which uses two packages: &lt;code&gt;Pub&lt;/code&gt; and &lt;code&gt;Priv&lt;/code&gt;. &lt;code&gt;Priv&lt;/code&gt; is a private package that you created, whereas &lt;code&gt;Pub&lt;/code&gt; is a public package that you use but don't control. When you created &lt;code&gt;Priv&lt;/code&gt;, there was no public package by the name &lt;code&gt;Priv&lt;/code&gt;. Subsequently, however, an unrelated package also named &lt;code&gt;Priv&lt;/code&gt; has been published and become popular. In fact, the &lt;code&gt;Pub&lt;/code&gt; package has started to use it. Therefore, when you next upgrade &lt;code&gt;Pub&lt;/code&gt; to get the latest bug fixes and features, &lt;code&gt;App&lt;/code&gt; will end up depending on two different packages named &lt;code&gt;Priv&lt;/code&gt;&amp;mdash;through no action of yours other than upgrading. &lt;code&gt;App&lt;/code&gt; has a direct dependency on your private &lt;code&gt;Priv&lt;/code&gt; package, and an indirect dependency, through &lt;code&gt;Pub&lt;/code&gt;, on the new public &lt;code&gt;Priv&lt;/code&gt; package. Since these two &lt;code&gt;Priv&lt;/code&gt; packages are different but are both required for &lt;code&gt;App&lt;/code&gt; to continue working correctly, the expression &lt;code&gt;import Priv&lt;/code&gt; must refer to different &lt;code&gt;Priv&lt;/code&gt; packages depending on whether it occurs in &lt;code&gt;App&lt;/code&gt;'s code or in &lt;code&gt;Pub&lt;/code&gt;'s code. To handle this, Julia's package loading mechanism distinguishes the two &lt;code&gt;Priv&lt;/code&gt; packages by their UUID and picks the correct one based on its context (the module that called &lt;code&gt;import&lt;/code&gt;). How this distinction works is determined by environments, as explained in the following sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc92a18a5a84297f47cf82987cd6ce3999df8a6" translate="yes" xml:space="preserve">
          <source>Since the function name is given by the signature, there is no need to start the documentation with &quot;The function &lt;code&gt;bar&lt;/code&gt;...&quot;: go straight to the point. Similarly, if the signature specifies the types of the arguments, mentioning them in the description is redundant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d379294528aa95d11e3ad08347fb984b7833bf8b" translate="yes" xml:space="preserve">
          <source>Since the primary environment is typically the environment of a project you're working on, while environments later in the stack contain additional tools, this is the right trade-off: it's better to break your development tools but keep the project working. When such incompatibilities occur, you'll typically want to upgrade your dev tools to versions that are compatible with the main project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73d328d6a19d96792839e51d764e72eb6b03b79" translate="yes" xml:space="preserve">
          <source>Since the regular expression &lt;code&gt;r&quot;^\s*(?:#|$)&quot;&lt;/code&gt; is compiled and inserted into the syntax tree when this code is parsed, the expression is only compiled once instead of each time the loop is executed. In order to accomplish this without macros, one would have to write this loop like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa10c64c2dd041fd4164e03b585c73c23c0a48ce" translate="yes" xml:space="preserve">
          <source>Since the type &lt;code&gt;Point{Float64}&lt;/code&gt; is a concrete type equivalent to &lt;code&gt;Point&lt;/code&gt; declared with &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;T&lt;/code&gt;, it can be applied as a constructor accordingly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ff90608e9e51505e781b7280ec8715287ed9ef" translate="yes" xml:space="preserve">
          <source>Since these are fairly small, simple expressions, they could easily be placed onto a single line, which is where the &lt;code&gt;(;)&lt;/code&gt; chain syntax comes in handy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c12d2751f6d726998fcff094b9321c46c42f942" translate="yes" xml:space="preserve">
          <source>Since types in Julia are themselves objects, ordinary functions can operate on them. Some functions that are particularly useful for working with or exploring types have already been introduced, such as the &lt;code&gt;&amp;lt;:&lt;/code&gt; operator, which indicates whether its left hand operand is a subtype of its right hand operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be674fbeb66a7e72863bcfb64f4b0701a7c5973" translate="yes" xml:space="preserve">
          <source>Since you can interpolate literal arrays, you can use this generative functionality without needing to create temporary array objects first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da42bdfc76721ff7081b177e7cfa3958efa84e4e" translate="yes" xml:space="preserve">
          <source>Sine Wave</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335f3680780ac1a1bedf97e6744b4c8a8d813887" translate="yes" xml:space="preserve">
          <source>Single High-Reversed-9 Quotation Mark / Single Reversed Comma Quotation Mark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf3aeea74aadb27b921706ec49564b035e402c6" translate="yes" xml:space="preserve">
          <source>Single Left-Pointing Angle Quotation Mark / Left Pointing Single Guillemet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f54e43e7b36b24df2938eef994713e70bd979c" translate="yes" xml:space="preserve">
          <source>Single Right-Pointing Angle Quotation Mark / Right Pointing Single Guillemet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca633f5d4206a1d937f8fe1ea8ed68ad1c0c691f" translate="yes" xml:space="preserve">
          <source>Singleton Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd33e9e36af2e55137469d3442620ee1b92fe440" translate="yes" xml:space="preserve">
          <source>Singleton type used in array initialization, indicating the array-constructor-caller would like an uninitialized array. See also &lt;a href=&quot;#Core.undef&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;, an alias for &lt;code&gt;UndefInitializer()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66123b7c4eff1050fe3a43f19b16ca1661efe69a" translate="yes" xml:space="preserve">
          <source>Singular value decomposition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf6477da73481aeeb14d405ed7b9376cc7a9c06" translate="yes" xml:space="preserve">
          <source>Six Pointed Black Star</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95980d96195d5a21b0ce29bdde1f925088886c2" translate="yes" xml:space="preserve">
          <source>Six Pointed Star With Middle Dot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0dce6652812e4fd04ad585e2acbca8de6e27a1" translate="yes" xml:space="preserve">
          <source>Size, in bytes, of the canonical binary representation of the given &lt;code&gt;DataType&lt;/code&gt;&lt;code&gt;T&lt;/code&gt;, if any. Size, in bytes, of object &lt;code&gt;obj&lt;/code&gt; if it is not &lt;code&gt;DataType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f65aede92ab2cbbe817d084d6c6f9d9b3dad31" translate="yes" xml:space="preserve">
          <source>Size, in bytes, of the string &lt;code&gt;str&lt;/code&gt;. Equal to the number of code units in &lt;code&gt;str&lt;/code&gt; multiplied by the size, in bytes, of one code unit in &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2167d13057f60b6d0c29cd243f97df3fa094db64" translate="yes" xml:space="preserve">
          <source>Skeel condition number $\kappa_S$ of the matrix &lt;code&gt;M&lt;/code&gt;, optionally with respect to the vector &lt;code&gt;x&lt;/code&gt;, as computed using the operator &lt;code&gt;p&lt;/code&gt;-norm. $\left\vert M \right\vert$ denotes the matrix of (entry wise) absolute values of $M$; $\left\vert M \right\vert_{ij} = \left\vert M_{ij} \right\vert$. Valid values for &lt;code&gt;p&lt;/code&gt; are &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;Inf&lt;/code&gt; (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2caf051ba27263b31db27cdb0229d6e7d3a024" translate="yes" xml:space="preserve">
          <source>Ski And Ski Boot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f9449524e69ac68261378d94645bda3e07655f3" translate="yes" xml:space="preserve">
          <source>Skip the rest of the current loop iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22198f7f6f1a28eb882a9d6de22f4fe5c904a78" translate="yes" xml:space="preserve">
          <source>Skipping Missing Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb525090eebed680fdb93f27acf97b008e16a7f" translate="yes" xml:space="preserve">
          <source>Skull</source>
          <target state="translated">Skull</target>
        </trans-unit>
        <trans-unit id="c7abf7aed8060866c15d2eb3529aa4d46bd4a6e3" translate="yes" xml:space="preserve">
          <source>Slanted Equal To Or Greater-Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cfddfabca43c1b99f3bbc0880fd390121b0d84" translate="yes" xml:space="preserve">
          <source>Slanted Equal To Or Greater-Than With Dot Inside</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b850a83e7d93338bc78c8e613b474a543041fa82" translate="yes" xml:space="preserve">
          <source>Slanted Equal To Or Less-Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fcdee5b4d60a7f8fab032d1e20226c62e6a474a" translate="yes" xml:space="preserve">
          <source>Slanted Equal To Or Less-Than With Dot Inside</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76cb41ca6bce3d27e201de85c7eee172652932ed" translate="yes" xml:space="preserve">
          <source>Sleeping Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b640ac8fba05ab3fe7e235e15f8b367c3ab4fbc" translate="yes" xml:space="preserve">
          <source>Sleeping Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959f5eeaed23b0a90129ce20ada0ab986be09dc0" translate="yes" xml:space="preserve">
          <source>Sleepy Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66f778307f7ef3e11930946299340765200aa68" translate="yes" xml:space="preserve">
          <source>Slice Of Pizza</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1ee3d271b50de35b1ed58286bae62bf4fc31bf" translate="yes" xml:space="preserve">
          <source>Sloping Large And</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820dc241bdb3282fe9a59f49d27f47a80fbddd6e" translate="yes" xml:space="preserve">
          <source>Sloping Large Or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a01dbd658789f56e137656bf2040fa1591a17f" translate="yes" xml:space="preserve">
          <source>Slot Machine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c5fae101040a815046deacf3ade1d53162b93b" translate="yes" xml:space="preserve">
          <source>Small Blue Diamond</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8018c17135d56a80160ff7c9f5aef7d9deebd5" translate="yes" xml:space="preserve">
          <source>Small Contains As Member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907ce0a0192315da0f312d7cc8340dffef77d8f3" translate="yes" xml:space="preserve">
          <source>Small Contains With Overbar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854d14aad81c57a2a6f337e3b9136bbba4ad50bf" translate="yes" xml:space="preserve">
          <source>Small Contains With Vertical Bar At End Of Horizontal Stroke</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b834747aefb59515c06c2f98720615af1128f187" translate="yes" xml:space="preserve">
          <source>Small Element Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4544ddafd264fb48b7080a8002874639b88afed1" translate="yes" xml:space="preserve">
          <source>Small Element Of With Overbar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a4bfba802d2052d85ce9d142a1736e120fb8a5" translate="yes" xml:space="preserve">
          <source>Small Element Of With Vertical Bar At End Of Horizontal Stroke</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bf9458d6282b6c7f753db4076ae209a9908eb9" translate="yes" xml:space="preserve">
          <source>Small Orange Diamond</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c7816f6f43bb0d35d822218464b7bcbe3b65cf" translate="yes" xml:space="preserve">
          <source>Small Tilde / Spacing Tilde</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da7882e5606be3550b92a220b380091bcd39d64" translate="yes" xml:space="preserve">
          <source>Small Vee With Underbar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5667b949b71407f0d5d0b51de24d7c298ec59a" translate="yes" xml:space="preserve">
          <source>Small functions are typically inlined automatically. By using &lt;code&gt;@noinline&lt;/code&gt; on small functions, auto-inlining can be prevented. This is shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e8206623e4c52e2eb8ae7181f6b27716ac9e5c" translate="yes" xml:space="preserve">
          <source>Small functions typically do not need the &lt;code&gt;@inline&lt;/code&gt; annotation, as the compiler does it automatically. By using &lt;code&gt;@inline&lt;/code&gt; on bigger functions, an extra nudge can be given to the compiler to inline it. This is shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1cf4c8ece1ea5c870afe61b060f8f3df4cfabb" translate="yes" xml:space="preserve">
          <source>Smaller Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5720f0696f38389c48b712536e76d9b4c6a597db" translate="yes" xml:space="preserve">
          <source>Smaller Than Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1250b86ff478d0623334652db0b24a36221fc65" translate="yes" xml:space="preserve">
          <source>Smallest integer larger than or equal to &lt;code&gt;x/y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5fdeb5c31ddeaa2d2d4e9933100bb41f92861ba" translate="yes" xml:space="preserve">
          <source>Smallest value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556d83fde76c0514eaae38016fe2c976803644cf" translate="yes" xml:space="preserve">
          <source>Smash Product</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945d8d4f656c99a4979eef33868e6a15e45935e0" translate="yes" xml:space="preserve">
          <source>Smile</source>
          <target state="translated">Smile</target>
        </trans-unit>
        <trans-unit id="adc7e7420ccf628105943d8ca64027e453023e4a" translate="yes" xml:space="preserve">
          <source>Smiling Cat Face With Heart-Shaped Eyes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef2af435c3b6bf566d9009f0fe9c59f2aa503b6" translate="yes" xml:space="preserve">
          <source>Smiling Cat Face With Open Mouth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd267358171df6ecb9f2153156887fd2477e3f1" translate="yes" xml:space="preserve">
          <source>Smiling Face With Halo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de53fe94a6435cc02a9e373ad4870a4123693d75" translate="yes" xml:space="preserve">
          <source>Smiling Face With Heart-Shaped Eyes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed243ea63b34c97f25e8714d90c67a47a34cb7df" translate="yes" xml:space="preserve">
          <source>Smiling Face With Horns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8785f691281820dd7c53437ebf143d1ace99452c" translate="yes" xml:space="preserve">
          <source>Smiling Face With Open Mouth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6b6762e36471fe450c59cfd8ac7795dc4f2ece" translate="yes" xml:space="preserve">
          <source>Smiling Face With Open Mouth And Cold Sweat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44499ea35d054da3ff7a5f9003787847c0211975" translate="yes" xml:space="preserve">
          <source>Smiling Face With Open Mouth And Smiling Eyes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffd7ab207657516be78bb59b9916cebe72add34" translate="yes" xml:space="preserve">
          <source>Smiling Face With Open Mouth And Tightly-Closed Eyes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7945921a3f393b4a44ae8c896b01a94c272d8413" translate="yes" xml:space="preserve">
          <source>Smiling Face With Smiling Eyes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43dfd9730e006bb21933ae3c476c32aeba70aab" translate="yes" xml:space="preserve">
          <source>Smiling Face With Sunglasses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af425a4e17b666c35247930e85314bb949b51007" translate="yes" xml:space="preserve">
          <source>Smirking Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca98254f17c74820483e77c3470525a859770c22" translate="yes" xml:space="preserve">
          <source>Smoking Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9404d283bda8febb429674c0fc98f38a99c88f43" translate="yes" xml:space="preserve">
          <source>Snail</source>
          <target state="translated">Snail</target>
        </trans-unit>
        <trans-unit id="90ec00c2b9ab0a18dd4535ea1d8d4b947564ae72" translate="yes" xml:space="preserve">
          <source>Snake</source>
          <target state="translated">Snake</target>
        </trans-unit>
        <trans-unit id="458113dba8ec5ecaec4a06819928465300f5a4c7" translate="yes" xml:space="preserve">
          <source>Snowboarder</source>
          <target state="translated">Snowboarder</target>
        </trans-unit>
        <trans-unit id="fda76b0bcc1e87cf259b1d1e3271d76f590fb5dd" translate="yes" xml:space="preserve">
          <source>Snowflake</source>
          <target state="translated">Snowflake</target>
        </trans-unit>
        <trans-unit id="4bd52782f10955a9d32b0da3335e3097dcd8fb1d" translate="yes" xml:space="preserve">
          <source>Snowman Without Snow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fd436e594c25fa4506890545e453c97c8c4a8e" translate="yes" xml:space="preserve">
          <source>So &lt;code&gt;DEPOT_PATH&lt;/code&gt; might be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae795f979652fb4677a43ef1d3e7bc7167832155" translate="yes" xml:space="preserve">
          <source>So far, we have referred only to registered packages. Pkg also supports working with unregistered packages. To add an unregistered package, specify a URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20598cfd75146a1ddecc2a039338738c781790e0" translate="yes" xml:space="preserve">
          <source>So now instead of getting a plain string in &lt;code&gt;msg_body&lt;/code&gt;, the macro is receiving a full expression that will need to be evaluated in order to display as expected. This can be spliced directly into the returned expression as an argument to the &lt;a href=&quot;../../base/strings/index#Base.string&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt; call; see &lt;a href=&quot;https://github.com/JuliaLang/julia/blob/master/base/error.jl&quot;&gt;&lt;code&gt;error.jl&lt;/code&gt;&lt;/a&gt; for the complete implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5792bbae14537954f39c73148ed88c6198b56a3d" translate="yes" xml:space="preserve">
          <source>So, the method body that will be used here doesn't include a loop at all - just indexing into the two tuples, multiplication and addition/subtraction. All the looping is performed compile-time, and we avoid looping during execution entirely. Thus, we only loop &lt;em&gt;once per type&lt;/em&gt;, in this case once per &lt;code&gt;N&lt;/code&gt; (except in edge cases where the function is generated more than once - see disclaimer above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6346920c32e19870ab341583f8aa9a111d37e27" translate="yes" xml:space="preserve">
          <source>So, we see that in the body of the generated function, &lt;code&gt;x&lt;/code&gt; is the &lt;em&gt;type&lt;/em&gt; of the passed argument, and the value returned by the generated function, is the result of evaluating the quoted expression we returned from the definition, now with the &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61d685b47d247d279d7395db20cb6d41be694d7" translate="yes" xml:space="preserve">
          <source>Soccer Ball</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508c36b3241ae34627fb1cadebb1f27b16e0f61a" translate="yes" xml:space="preserve">
          <source>Sockets</source>
          <target state="translated">Sockets</target>
        </trans-unit>
        <trans-unit id="09497c393d7994af101126c0db18eecc3f190954" translate="yes" xml:space="preserve">
          <source>Sockets.IPv4</source>
          <target state="translated">Sockets.IPv4</target>
        </trans-unit>
        <trans-unit id="93c245aaf47710851cb69a096762e960ec6944c4" translate="yes" xml:space="preserve">
          <source>Sockets.IPv6</source>
          <target state="translated">Sockets.IPv6</target>
        </trans-unit>
        <trans-unit id="a61989018ffab29508e451a84639d6653b5a8b6a" translate="yes" xml:space="preserve">
          <source>Sockets.connect()</source>
          <target state="translated">Sockets.connect()</target>
        </trans-unit>
        <trans-unit id="a3af15a17c87769e9b63901c1b956c6630e58afb" translate="yes" xml:space="preserve">
          <source>Soft Ice Cream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e46e866711af2eb98cb191a753a6f8137d4eb41" translate="yes" xml:space="preserve">
          <source>Software-Function Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d6488cde1a776dcb848484b1444e04f5f1bb42" translate="yes" xml:space="preserve">
          <source>Solidus With Overbar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602cdf9cc32ac8ade7b5cd787a8b8d2d14f7e3d3" translate="yes" xml:space="preserve">
          <source>Solve the equation &lt;code&gt;AB * X = B&lt;/code&gt;. &lt;code&gt;trans&lt;/code&gt; determines the orientation of &lt;code&gt;AB&lt;/code&gt;. It may be &lt;code&gt;N&lt;/code&gt; (no transpose), &lt;code&gt;T&lt;/code&gt; (transpose), or &lt;code&gt;C&lt;/code&gt; (conjugate transpose). &lt;code&gt;kl&lt;/code&gt; is the first subdiagonal containing a nonzero band, &lt;code&gt;ku&lt;/code&gt; is the last superdiagonal containing one, and &lt;code&gt;m&lt;/code&gt; is the first dimension of the matrix &lt;code&gt;AB&lt;/code&gt;. &lt;code&gt;ipiv&lt;/code&gt; is the vector of pivots returned from &lt;code&gt;gbtrf!&lt;/code&gt;. Returns the vector or matrix &lt;code&gt;X&lt;/code&gt;, overwriting &lt;code&gt;B&lt;/code&gt; in-place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5a0ceac11a73e9b08605a7833baabf071ca408" translate="yes" xml:space="preserve">
          <source>Solves &lt;code&gt;A * X = B&lt;/code&gt; (&lt;code&gt;trans = N&lt;/code&gt;), &lt;code&gt;transpose(A) * X = B&lt;/code&gt; (&lt;code&gt;trans = T&lt;/code&gt;), or &lt;code&gt;adjoint(A) * X = B&lt;/code&gt; (&lt;code&gt;trans = C&lt;/code&gt;) for (upper if &lt;code&gt;uplo = U&lt;/code&gt;, lower if &lt;code&gt;uplo = L&lt;/code&gt;) triangular matrix &lt;code&gt;A&lt;/code&gt;. If &lt;code&gt;diag = N&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; has non-unit diagonal elements. If &lt;code&gt;diag = U&lt;/code&gt;, all diagonal elements of &lt;code&gt;A&lt;/code&gt; are one. &lt;code&gt;B&lt;/code&gt; is overwritten with the solution &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2418fd57be1dd1f33310727bf23922b648ef30" translate="yes" xml:space="preserve">
          <source>Solves &lt;code&gt;A * X = B&lt;/code&gt; for positive-definite tridiagonal &lt;code&gt;A&lt;/code&gt; with diagonal &lt;code&gt;D&lt;/code&gt; and off-diagonal &lt;code&gt;E&lt;/code&gt; after computing &lt;code&gt;A&lt;/code&gt;'s LDLt factorization using &lt;code&gt;pttrf!&lt;/code&gt;. &lt;code&gt;B&lt;/code&gt; is overwritten with the solution &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961f756955f1149506c51f20c31acd4bc61322e6" translate="yes" xml:space="preserve">
          <source>Solves &lt;code&gt;A * X = B&lt;/code&gt; for positive-definite tridiagonal &lt;code&gt;A&lt;/code&gt;. &lt;code&gt;D&lt;/code&gt; is the diagonal of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt; is the off-diagonal. &lt;code&gt;B&lt;/code&gt; is overwritten with the solution &lt;code&gt;X&lt;/code&gt; and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482915836c9c4f9ab137a6159547b699643c39ea" translate="yes" xml:space="preserve">
          <source>Solves the Sylvester matrix equation &lt;code&gt;A * X +/- X * B = scale*C&lt;/code&gt; where &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are both quasi-upper triangular. If &lt;code&gt;transa = N&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; is not modified. If &lt;code&gt;transa = T&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; is transposed. If &lt;code&gt;transa = C&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; is conjugate transposed. Similarly for &lt;code&gt;transb&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;. If &lt;code&gt;isgn = 1&lt;/code&gt;, the equation &lt;code&gt;A * X + X * B = scale * C&lt;/code&gt; is solved. If &lt;code&gt;isgn = -1&lt;/code&gt;, the equation &lt;code&gt;A * X - X * B = scale * C&lt;/code&gt; is solved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b7b4dd8aa28fb121a28e9079769977e9e169fe" translate="yes" xml:space="preserve">
          <source>Solves the equation &lt;code&gt;A * X = B&lt;/code&gt; (&lt;code&gt;trans = N&lt;/code&gt;), &lt;code&gt;transpose(A) * X = B&lt;/code&gt; (&lt;code&gt;trans = T&lt;/code&gt;), or &lt;code&gt;adjoint(A) * X = B&lt;/code&gt; (&lt;code&gt;trans = C&lt;/code&gt;) using the &lt;code&gt;LU&lt;/code&gt; factorization computed by &lt;code&gt;gttrf!&lt;/code&gt;. &lt;code&gt;B&lt;/code&gt; is overwritten with the solution &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1096d0d9b663b2dc24f3a528d02546e5b92656cd" translate="yes" xml:space="preserve">
          <source>Solves the equation &lt;code&gt;A * X = B&lt;/code&gt; for a Hermitian matrix &lt;code&gt;A&lt;/code&gt; using the results of &lt;code&gt;sytrf!&lt;/code&gt;. If &lt;code&gt;uplo = U&lt;/code&gt;, the upper half of &lt;code&gt;A&lt;/code&gt; is stored. If &lt;code&gt;uplo = L&lt;/code&gt;, the lower half is stored. &lt;code&gt;B&lt;/code&gt; is overwritten by the solution &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e498dc21330bddebde04457ac1a27693382eb3f" translate="yes" xml:space="preserve">
          <source>Solves the equation &lt;code&gt;A * X = B&lt;/code&gt; for a symmetric matrix &lt;code&gt;A&lt;/code&gt; using the results of &lt;code&gt;sytrf!&lt;/code&gt;. If &lt;code&gt;uplo = U&lt;/code&gt;, the upper half of &lt;code&gt;A&lt;/code&gt; is stored. If &lt;code&gt;uplo = L&lt;/code&gt;, the lower half is stored. &lt;code&gt;B&lt;/code&gt; is overwritten by the solution &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdeefb649249fb23d2712e0df3568c23ccde7674" translate="yes" xml:space="preserve">
          <source>Solves the equation &lt;code&gt;A * X = B&lt;/code&gt; where &lt;code&gt;A&lt;/code&gt; is a tridiagonal matrix with &lt;code&gt;dl&lt;/code&gt; on the subdiagonal, &lt;code&gt;d&lt;/code&gt; on the diagonal, and &lt;code&gt;du&lt;/code&gt; on the superdiagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5441c65e637e677b88a32fa8c5ed325ae17210" translate="yes" xml:space="preserve">
          <source>Solves the equation &lt;code&gt;A * x = c&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is subject to the equality constraint &lt;code&gt;B * x = d&lt;/code&gt;. Uses the formula &lt;code&gt;||c - A*x||^2 = 0&lt;/code&gt; to solve. Returns &lt;code&gt;X&lt;/code&gt; and the residual sum-of-squares.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322b7b96a2beb939bed129deea687efa9e8a408b" translate="yes" xml:space="preserve">
          <source>Solves the linear equation &lt;code&gt;A * X = B&lt;/code&gt; (&lt;code&gt;trans = N&lt;/code&gt;), &lt;code&gt;transpose(A) * X = B&lt;/code&gt; (&lt;code&gt;trans = T&lt;/code&gt;), or &lt;code&gt;adjoint(A) * X = B&lt;/code&gt; (&lt;code&gt;trans = C&lt;/code&gt;) using the &lt;code&gt;LU&lt;/code&gt; factorization of &lt;code&gt;A&lt;/code&gt;. &lt;code&gt;fact&lt;/code&gt; may be &lt;code&gt;E&lt;/code&gt;, in which case &lt;code&gt;A&lt;/code&gt; will be equilibrated and copied to &lt;code&gt;AF&lt;/code&gt;; &lt;code&gt;F&lt;/code&gt;, in which case &lt;code&gt;AF&lt;/code&gt; and &lt;code&gt;ipiv&lt;/code&gt; from a previous &lt;code&gt;LU&lt;/code&gt; factorization are inputs; or &lt;code&gt;N&lt;/code&gt;, in which case &lt;code&gt;A&lt;/code&gt; will be copied to &lt;code&gt;AF&lt;/code&gt; and then factored. If &lt;code&gt;fact = F&lt;/code&gt;, &lt;code&gt;equed&lt;/code&gt; may be &lt;code&gt;N&lt;/code&gt;, meaning &lt;code&gt;A&lt;/code&gt; has not been equilibrated; &lt;code&gt;R&lt;/code&gt;, meaning &lt;code&gt;A&lt;/code&gt; was multiplied by &lt;code&gt;Diagonal(R)&lt;/code&gt; from the left; &lt;code&gt;C&lt;/code&gt;, meaning &lt;code&gt;A&lt;/code&gt; was multiplied by &lt;code&gt;Diagonal(C)&lt;/code&gt; from the right; or &lt;code&gt;B&lt;/code&gt;, meaning &lt;code&gt;A&lt;/code&gt; was multiplied by &lt;code&gt;Diagonal(R)&lt;/code&gt; from the left and &lt;code&gt;Diagonal(C)&lt;/code&gt; from the right. If &lt;code&gt;fact = F&lt;/code&gt; and &lt;code&gt;equed = R&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; the elements of &lt;code&gt;R&lt;/code&gt; must all be positive. If &lt;code&gt;fact = F&lt;/code&gt; and &lt;code&gt;equed = C&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; the elements of &lt;code&gt;C&lt;/code&gt; must all be positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c69627f249c12e2c466589041848990fdcd458" translate="yes" xml:space="preserve">
          <source>Solves the linear equation &lt;code&gt;A * X = B&lt;/code&gt; where &lt;code&gt;A&lt;/code&gt; is a square matrix using the &lt;code&gt;LU&lt;/code&gt; factorization of &lt;code&gt;A&lt;/code&gt;. &lt;code&gt;A&lt;/code&gt; is overwritten with its &lt;code&gt;LU&lt;/code&gt; factorization and &lt;code&gt;B&lt;/code&gt; is overwritten with the solution &lt;code&gt;X&lt;/code&gt;. &lt;code&gt;ipiv&lt;/code&gt; contains the pivoting information for the &lt;code&gt;LU&lt;/code&gt; factorization of &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa02b1e569f3b52ee09f64f205cbf7ac22ad2f8a" translate="yes" xml:space="preserve">
          <source>Solves the linear equation &lt;code&gt;A * X = B&lt;/code&gt;, &lt;code&gt;transpose(A) * X = B&lt;/code&gt;, or &lt;code&gt;adjoint(A) * X = B&lt;/code&gt; for square &lt;code&gt;A&lt;/code&gt;. Modifies the matrix/vector &lt;code&gt;B&lt;/code&gt; in place with the solution. &lt;code&gt;A&lt;/code&gt; is the &lt;code&gt;LU&lt;/code&gt; factorization from &lt;code&gt;getrf!&lt;/code&gt;, with &lt;code&gt;ipiv&lt;/code&gt; the pivoting information. &lt;code&gt;trans&lt;/code&gt; may be one of &lt;code&gt;N&lt;/code&gt; (no modification), &lt;code&gt;T&lt;/code&gt; (transpose), or &lt;code&gt;C&lt;/code&gt; (conjugate transpose).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fc33c562c6026409b94e4465a1b768a639c2d1" translate="yes" xml:space="preserve">
          <source>Solves the linear equation &lt;code&gt;A * X = B&lt;/code&gt;, &lt;code&gt;transpose(A) * X = B&lt;/code&gt;, or &lt;code&gt;adjoint(A) * X = B&lt;/code&gt; using a QR or LQ factorization. Modifies the matrix/vector &lt;code&gt;B&lt;/code&gt; in place with the solution. &lt;code&gt;A&lt;/code&gt; is overwritten with its &lt;code&gt;QR&lt;/code&gt; or &lt;code&gt;LQ&lt;/code&gt; factorization. &lt;code&gt;trans&lt;/code&gt; may be one of &lt;code&gt;N&lt;/code&gt; (no modification), &lt;code&gt;T&lt;/code&gt; (transpose), or &lt;code&gt;C&lt;/code&gt; (conjugate transpose). &lt;code&gt;gels!&lt;/code&gt; searches for the minimum norm/least squares solution. &lt;code&gt;A&lt;/code&gt; may be under or over determined. The solution is returned in &lt;code&gt;B&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b2aad45d07b70e1b7eefea74316913901b6e42" translate="yes" xml:space="preserve">
          <source>Some</source>
          <target state="translated">Some</target>
        </trans-unit>
        <trans-unit id="18e7950450bcdc2df2b421850941df544c601563" translate="yes" xml:space="preserve">
          <source>Some C libraries execute their callbacks from a different thread, and since Julia isn't thread-safe you'll need to take some extra precautions. In particular, you'll need to set up a two-layered system: the C callback should only &lt;em&gt;schedule&lt;/em&gt; (via Julia's event loop) the execution of your &quot;real&quot; callback. To do this, create an &lt;a href=&quot;../../base/base/index#Base.AsyncCondition&quot;&gt;&lt;code&gt;AsyncCondition&lt;/code&gt;&lt;/a&gt; object and &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; on it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="accd855ae9c245a0268a7ad03f11332d4d79b588" translate="yes" xml:space="preserve">
          <source>Some Examples of C Wrappers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b4369ed49ef1c6185b2dec984268180efbb436" translate="yes" xml:space="preserve">
          <source>Some Pkg output has been omitted in order to keep this guide focused. This will help maintain a good pace and not get bogged down in details. If you require more details, refer to subsequent sections of the Pkg manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9642ff7f1c06b9b2b2a560bab71d05aa4307ad4" translate="yes" xml:space="preserve">
          <source>Some Unicode characters are considered to be equivalent in identifiers. Different ways of entering Unicode combining characters (e.g., accents) are treated as equivalent (specifically, Julia identifiers are NFC-normalized). The Unicode characters &lt;code&gt;ɛ&lt;/code&gt; (U+025B: Latin small letter open e) and &lt;code&gt;&amp;micro;&lt;/code&gt; (U+00B5: micro sign) are treated as equivalent to the corresponding Greek letters, because the former are easily accessible via some input methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b74d50a9d56447cfbfebef4ab683bbb749969d1" translate="yes" xml:space="preserve">
          <source>Some are used by the cluster manager to add workers to an already-initialized host:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6936d460201eb752b719d1cb0e39015d14977133" translate="yes" xml:space="preserve">
          <source>Some collections follow a slightly different definition. For example, &lt;a href=&quot;#Base.Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;s check whether the item &lt;a href=&quot;../base/index#Base.isequal&quot;&gt;&lt;code&gt;isequal&lt;/code&gt;&lt;/a&gt; to one of the elements. &lt;a href=&quot;#Base.Dict&quot;&gt;&lt;code&gt;Dict&lt;/code&gt;&lt;/a&gt;s look for &lt;code&gt;key=&amp;gt;value&lt;/code&gt; pairs, and the key is compared using &lt;a href=&quot;../base/index#Base.isequal&quot;&gt;&lt;code&gt;isequal&lt;/code&gt;&lt;/a&gt;. To test for the presence of a key in a dictionary, use &lt;a href=&quot;#Base.haskey&quot;&gt;&lt;code&gt;haskey&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;k in keys(dict)&lt;/code&gt;. For these collections, the result is always a &lt;code&gt;Bool&lt;/code&gt; and never &lt;code&gt;missing&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee627c92fa6c7cd0763a522cf1890d5c606a003" translate="yes" xml:space="preserve">
          <source>Some constructors don't implement the concept of &quot;conversion&quot;. For example, &lt;code&gt;Timer(2)&lt;/code&gt; creates a 2-second timer, which is not really a &quot;conversion&quot; from an integer to a timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803a4f2ca130cbd59b02dffd805cac6e2844c6d2" translate="yes" xml:space="preserve">
          <source>Some fields are used by &lt;code&gt;SSHManager&lt;/code&gt; and similar managers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3237308b38aa7b9713be308d5fe79eea01cc6b17" translate="yes" xml:space="preserve">
          <source>Some fields are used by both &lt;code&gt;LocalManager&lt;/code&gt;s and &lt;code&gt;SSHManager&lt;/code&gt;s:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f033caa82390a5db2474ff86fecf227ebe43a2" translate="yes" xml:space="preserve">
          <source>Some functions are used only for their side effects, and do not need to return a value. In these cases, the convention is to return the value &lt;code&gt;nothing&lt;/code&gt;, which is just a singleton object of type &lt;code&gt;Nothing&lt;/code&gt;. This is an ordinary type with no fields; there is nothing special about it except for this convention, and that the REPL does not print anything for it. Some language constructs that would not otherwise have a value also yield &lt;code&gt;nothing&lt;/code&gt;, for example &lt;code&gt;if false; end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ec3a1daa89170c16c43175681b305a448b2771" translate="yes" xml:space="preserve">
          <source>Some functions need a large number of arguments, or have a large number of behaviors. Remembering how to call such functions can be difficult. Keyword arguments can make these complex interfaces easier to use and extend by allowing arguments to be identified by name instead of only by position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a021f743e68d12fb1ee0c33d82a729d4b90419ec" translate="yes" xml:space="preserve">
          <source>Some general notes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f741954a343279272ca15c0b9ded9975d8fc41" translate="yes" xml:space="preserve">
          <source>Some languages consider parsing strings as numbers or formatting numbers as strings to be conversions (many dynamic languages will even perform conversion for you automatically), however Julia does not: even though some strings can be parsed as numbers, most strings are not valid representations of numbers, and only a very limited subset of them are. Therefore in Julia the dedicated &lt;a href=&quot;../../base/numbers/index#Base.parse&quot;&gt;&lt;code&gt;parse&lt;/code&gt;&lt;/a&gt; function must be used to perform this operation, making it more explicit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214e8382a37259cb588b4ee9abe0c442fd78272a" translate="yes" xml:space="preserve">
          <source>Some of this documentation assumes some prior knowledge of the libgit2 API. For more information on some of the objects and methods referenced here, consult the upstream &lt;a href=&quot;https://libgit2.org/libgit2/#v0.25.1&quot;&gt;libgit2 API reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54130451e4cad0f85fcecc819a81bc537d6bce16" translate="yes" xml:space="preserve">
          <source>Some operations accumulate error. Parallelism will be easier if the reduction can be executed in groups. Future versions of Julia might change the algorithm. Note that the elements are not reordered if you use an ordered collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cd0e7d3234275b1087e50262353747a6158328" translate="yes" xml:space="preserve">
          <source>Some operations that should not be attempted include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4adece17b4fec5fcfd8c385744921128eb43bd42" translate="yes" xml:space="preserve">
          <source>Some other useful functions include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f54f5b3c99f340b73cfb15f10267dab16c9f0ed" translate="yes" xml:space="preserve">
          <source>Some run-time benchmarks comparing (1) type dispatch, (2) dictionary lookup, and (3) a &quot;switch&quot; statement can be found &lt;a href=&quot;https://groups.google.com/forum/#!msg/julia-users/jUMu9A3QKQQ/qjgVWr7vAwAJ&quot;&gt;on the mailing list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ef085a2f9ce600bbbbfb2e1bed3d8bc6eb17f9" translate="yes" xml:space="preserve">
          <source>Some variables, such as &lt;code&gt;JULIA_NUM_THREADS&lt;/code&gt; and &lt;code&gt;JULIA_PROJECT&lt;/code&gt;, need to be set before Julia starts, therefore adding these to &lt;code&gt;~/.julia/config/startup.jl&lt;/code&gt; is too late in the startup process. In Bash, environment variables can either be set manually by running, e.g., &lt;code&gt;export JULIA_NUM_THREADS=4&lt;/code&gt; before starting Julia, or by adding the same command to &lt;code&gt;-/.bashrc&lt;/code&gt; or &lt;code&gt;~/.bash_profile&lt;/code&gt; to set the variable each time Bash is started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee444b5b80848c6c78cd84f92b6658eb8e0e278" translate="yes" xml:space="preserve">
          <source>Sometimes IO output can benefit from the ability to pass contextual information into show methods. The &lt;a href=&quot;../../base/io-network/index#Base.IOContext&quot;&gt;&lt;code&gt;IOContext&lt;/code&gt;&lt;/a&gt; object provides this framework for associating arbitrary metadata with an IO object. For example, &lt;code&gt;:compact =&amp;gt; true&lt;/code&gt; adds a hinting parameter to the IO object that the invoked show method should print a shorter output (if applicable). See the &lt;a href=&quot;../../base/io-network/index#Base.IOContext&quot;&gt;&lt;code&gt;IOContext&lt;/code&gt;&lt;/a&gt; documentation for a list of common properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de75a9ea1a8f52ccba217533cb7babebea8e9fa4" translate="yes" xml:space="preserve">
          <source>Sometimes extra parentheses around the argument to &lt;code&gt;:&lt;/code&gt; are needed to avoid ambiguity in parsing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c23627cc67ebbf558800649b1e1e569121a3212" translate="yes" xml:space="preserve">
          <source>Sometimes it can be useful to write log events to a file. Here is an example of how to use a task-local and global logger to write information to a text file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fc841ff1c6a27a28afffbf09cee73ec979bcea" translate="yes" xml:space="preserve">
          <source>Sometimes it is convenient to have a single expression which evaluates several subexpressions in order, returning the value of the last subexpression as its value. There are two Julia constructs that accomplish this: &lt;code&gt;begin&lt;/code&gt; blocks and &lt;code&gt;(;)&lt;/code&gt; chains. The value of both compound expression constructs is that of the last subexpression. Here's an example of a &lt;code&gt;begin&lt;/code&gt; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56620b094ec8f556c8b69c2c405e239f1ac352de" translate="yes" xml:space="preserve">
          <source>Sometimes it is convenient to introduce a new name for an already expressible type. This can be done with a simple assignment statement. For example, &lt;code&gt;UInt&lt;/code&gt; is aliased to either &lt;a href=&quot;../../base/numbers/index#Core.UInt32&quot;&gt;&lt;code&gt;UInt32&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../base/numbers/index#Core.UInt64&quot;&gt;&lt;code&gt;UInt64&lt;/code&gt;&lt;/a&gt; as is appropriate for the size of pointers on the system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad59e9794373619992d578ee8912be50f350af70" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to get around this (for example, if you are implementing the above REPL). Fortunately, there is an easy solution: call the function using &lt;a href=&quot;../../base/base/index#Base.invokelatest&quot;&gt;&lt;code&gt;Base.invokelatest&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ec5ae55703e78dbc0c5cc53c73fb0d3ba26488" translate="yes" xml:space="preserve">
          <source>Sometimes the appropriate documentation for an instance of a type depends on the field values of that instance, rather than just on the type itself. In these cases, you can add a method to &lt;code&gt;Docs.getdoc&lt;/code&gt; for your custom type that returns the documentation on a per-instance basis. For instance,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd5e7d6de5c0dc94519e5486aa6e86dd4954864" translate="yes" xml:space="preserve">
          <source>Sometimes there are functions of related functionality. To increase discoverability please provide a short list of these in a &lt;code&gt;See also:&lt;/code&gt; paragraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4d5561161def6195d5194f31fa5c4fcd821426" translate="yes" xml:space="preserve">
          <source>Sometimes you can circumvent the need to allocate memory on each function call by preallocating the output. As a trivial example, compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0b8d7e533efab5b9ee3159523a84048de76275" translate="yes" xml:space="preserve">
          <source>Sometimes you can enable better optimization by promising certain program properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0d09beedee60e944d26f1b43e84706f19f6b22" translate="yes" xml:space="preserve">
          <source>Sometimes, coupled packages may engage in type piracy to separate features from definitions, especially when the packages were designed by collaborating authors, and when the definitions are reusable. For example, one package might provide some types useful for working with colors; another package could define methods for those types that enable conversions between color spaces. Another example might be a package that acts as a thin wrapper for some C code, which another package might then pirate to implement a higher-level, Julia-friendly API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77661187f200c339fe952e6097ead1eb6238d7d" translate="yes" xml:space="preserve">
          <source>Soon With Rightwards Arrow Above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d569f99537b107694c7970752efe7da8c08700" translate="yes" xml:space="preserve">
          <source>Sort a multidimensional array &lt;code&gt;A&lt;/code&gt; along the given dimension. See &lt;a href=&quot;#Base.sort!&quot;&gt;&lt;code&gt;sort!&lt;/code&gt;&lt;/a&gt; for a description of possible keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49aaac54c05c586ecaceb6a1169641434347e217" translate="yes" xml:space="preserve">
          <source>Sort slices of an array &lt;code&gt;A&lt;/code&gt;. The required keyword argument &lt;code&gt;dims&lt;/code&gt; must be either an integer or a tuple of integers. It specifies the dimension(s) over which the slices are sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f820310c7d31cb0603ba94e280e4c8da91c1f05" translate="yes" xml:space="preserve">
          <source>Sort the multidimensional array &lt;code&gt;A&lt;/code&gt; along dimension &lt;code&gt;dims&lt;/code&gt;. See &lt;a href=&quot;#Base.sort!&quot;&gt;&lt;code&gt;sort!&lt;/code&gt;&lt;/a&gt; for a description of possible keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628bbf164ef3c0ee4c1d772326c3bf82121649ca" translate="yes" xml:space="preserve">
          <source>Sort the vector &lt;code&gt;v&lt;/code&gt; in place. &lt;code&gt;QuickSort&lt;/code&gt; is used by default for numeric arrays while &lt;code&gt;MergeSort&lt;/code&gt; is used for other arrays. You can specify an algorithm to use via the &lt;code&gt;alg&lt;/code&gt; keyword (see Sorting Algorithms for available algorithms). The &lt;code&gt;by&lt;/code&gt; keyword lets you provide a function that will be applied to each element before comparison; the &lt;code&gt;lt&lt;/code&gt; keyword allows providing a custom &quot;less than&quot; function; use &lt;code&gt;rev=true&lt;/code&gt; to reverse the sorting order. These options are independent and can be used together in all possible combinations: if both &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;lt&lt;/code&gt; are specified, the &lt;code&gt;lt&lt;/code&gt; function is applied to the result of the &lt;code&gt;by&lt;/code&gt; function; &lt;code&gt;rev=true&lt;/code&gt; reverses whatever ordering specified via the &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;lt&lt;/code&gt; keywords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bac425ab03903595a8873222253b8881baebbd" translate="yes" xml:space="preserve">
          <source>Sort.InsertionSort</source>
          <target state="translated">Sort.InsertionSort</target>
        </trans-unit>
        <trans-unit id="2a111a827d3a5abf27917abc2860a80176943f18" translate="yes" xml:space="preserve">
          <source>Sort.MergeSort</source>
          <target state="translated">Sort.MergeSort</target>
        </trans-unit>
        <trans-unit id="a78241e2a3d60c1b3d21102a1673dc0be2fac8cf" translate="yes" xml:space="preserve">
          <source>Sort.PartialQuickSort</source>
          <target state="translated">Sort.PartialQuickSort</target>
        </trans-unit>
        <trans-unit id="80d3590d262b5b5f540460e9f42958b373826461" translate="yes" xml:space="preserve">
          <source>Sort.QuickSort</source>
          <target state="translated">Sort.QuickSort</target>
        </trans-unit>
        <trans-unit id="ec8909a287a6783fe8c87b79c50cd26c85d1e814" translate="yes" xml:space="preserve">
          <source>Sort.partialsort!()</source>
          <target state="translated">Sort.partialsort!()</target>
        </trans-unit>
        <trans-unit id="eb0c35b87294e928d79bced4c009a273e35af445" translate="yes" xml:space="preserve">
          <source>Sort.partialsort()</source>
          <target state="translated">Sort.partialsort()</target>
        </trans-unit>
        <trans-unit id="4a3fbcc2f7b99188a76ba6745b9168a7e05c9bc6" translate="yes" xml:space="preserve">
          <source>Sort.partialsortperm!()</source>
          <target state="translated">Sort.partialsortperm!()</target>
        </trans-unit>
        <trans-unit id="e21c9a7fbae8b1cbfa3bda5e5dd116e4a8ab1c05" translate="yes" xml:space="preserve">
          <source>Sort.partialsortperm()</source>
          <target state="translated">Sort.partialsortperm()</target>
        </trans-unit>
        <trans-unit id="fa86fb7740fd6005a884289dbebf9d4332f13399" translate="yes" xml:space="preserve">
          <source>Sort.searchsorted()</source>
          <target state="translated">Sort.searchsorted()</target>
        </trans-unit>
        <trans-unit id="da42de28aec648d5abe50e370f215f767f831dfe" translate="yes" xml:space="preserve">
          <source>Sort.searchsortedfirst()</source>
          <target state="translated">Sort.searchsortedfirst()</target>
        </trans-unit>
        <trans-unit id="fd04a80aed13a88166aa4f28164559747142dda0" translate="yes" xml:space="preserve">
          <source>Sort.searchsortedlast()</source>
          <target state="translated">Sort.searchsortedlast()</target>
        </trans-unit>
        <trans-unit id="447867fd9af3a88b75c856278215ce9acc6874e4" translate="yes" xml:space="preserve">
          <source>Sort.sortperm!()</source>
          <target state="translated">Sort.sortperm!()</target>
        </trans-unit>
        <trans-unit id="ee4a3e96cc4d820332f6ccddf07b6eb3a0a6a09f" translate="yes" xml:space="preserve">
          <source>Sorting Algorithms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cac70cbf75ffe99d0bf6f7f9cf7fc71bde9dc6" translate="yes" xml:space="preserve">
          <source>Sorting Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23933bead8b4928b2f573e31a4c9a93a9807be74" translate="yes" xml:space="preserve">
          <source>Sorting and Related Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6653ba6726ec72a4280d0688fb69e195c9b490a7" translate="yes" xml:space="preserve">
          <source>Source code can be displayed as a literal block using an indent of four spaces as shown in the following example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e195d03066231a519263fabd2bd88bb260f708" translate="yes" xml:space="preserve">
          <source>South East Arrow / Lower Right Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc67c3e88a0572179c47f890812b70daf43f5e6" translate="yes" xml:space="preserve">
          <source>South East Arrow And South West Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4808782150e0b50d8255e9b9171849c8d6d354bb" translate="yes" xml:space="preserve">
          <source>South East Arrow Crossing North East Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39de91141eba770376d20561538f5ebdf24b7dc6" translate="yes" xml:space="preserve">
          <source>South East Arrow With Hook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0811218fb2453e50471182ac8f88493885dddee4" translate="yes" xml:space="preserve">
          <source>South East Double Arrow / Lower Right Double Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da77335f983b20a47c77a9abdeb319a69cf0527b" translate="yes" xml:space="preserve">
          <source>South West Arrow / Lower Left Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7e209c0f8cc5a3a270a86798039488937a3d17" translate="yes" xml:space="preserve">
          <source>South West Arrow And North West Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97847b674b548d7f033bd0f86f44f91d0af28ab6" translate="yes" xml:space="preserve">
          <source>South West Arrow With Hook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8259660b795c27d8bf43608283b0bab8448b18" translate="yes" xml:space="preserve">
          <source>South West Double Arrow / Lower Left Double Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431f677005c5a1da3d931a8bced118f5324c9b96" translate="yes" xml:space="preserve">
          <source>Space-efficient &lt;code&gt;N&lt;/code&gt;-dimensional boolean array, using just one bit for each boolean value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe78ea401158dd5847c4090b8bb22477e510febf" translate="yes" xml:space="preserve">
          <source>Spaghetti</source>
          <target state="translated">Spaghetti</target>
        </trans-unit>
        <trans-unit id="2a507e71a668430610581ca7fe73b400c5462bca" translate="yes" xml:space="preserve">
          <source>Sparkle</source>
          <target state="translated">Sparkle</target>
        </trans-unit>
        <trans-unit id="65b0291f30731f0d407bd44b75f72450ee8117bc" translate="yes" xml:space="preserve">
          <source>Sparkles</source>
          <target state="translated">Sparkles</target>
        </trans-unit>
        <trans-unit id="ba3f8a837cadafc004e97bf1e1ee40e200825fca" translate="yes" xml:space="preserve">
          <source>Sparkling Heart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8be31e0e269cf0e2f547c7b7c6bb5a36922e7c" translate="yes" xml:space="preserve">
          <source>Sparse</source>
          <target state="translated">Sparse</target>
        </trans-unit>
        <trans-unit id="4c68431dee3b2643ed40a689b422c87cdc6c83e0" translate="yes" xml:space="preserve">
          <source>Sparse Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902682863a9a7cc330fd64e1e85a29c997927e87" translate="yes" xml:space="preserve">
          <source>Sparse Symmetric/Hermitian</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53277a62f870edf481233e0ba734c781b2543a3a" translate="yes" xml:space="preserve">
          <source>Sparse Vector Storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1302fba8710a2d610f4cb776973a18aa0bc2f56c" translate="yes" xml:space="preserve">
          <source>Sparse Vector and Matrix Constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d1b798757176683356d2c244f040ad06b9ed11" translate="yes" xml:space="preserve">
          <source>Sparse matrix operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e62cce93cebcb9c847faa112936383341e38303" translate="yes" xml:space="preserve">
          <source>Sparse vectors are stored in a close analog to compressed sparse column format for sparse matrices. In Julia, sparse vectors have the type &lt;a href=&quot;#SparseArrays.SparseVector&quot;&gt;&lt;code&gt;SparseVector{Tv,Ti}&lt;/code&gt;&lt;/a&gt; where &lt;code&gt;Tv&lt;/code&gt; is the type of the stored values and &lt;code&gt;Ti&lt;/code&gt; the integer type for the indices. The internal representation is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10fc7247280a59c6042e8b7e3848c87f40bab9ae" translate="yes" xml:space="preserve">
          <source>SparseArrays.AbstractSparseArray</source>
          <target state="translated">SparseArrays.AbstractSparseArray</target>
        </trans-unit>
        <trans-unit id="6149ebb08b80d17ee8fd54b50e50d522b66046d5" translate="yes" xml:space="preserve">
          <source>SparseArrays.AbstractSparseMatrix</source>
          <target state="translated">SparseArrays.AbstractSparseMatrix</target>
        </trans-unit>
        <trans-unit id="344111cd8f62e5b65d92db0c6dba2277761d84b0" translate="yes" xml:space="preserve">
          <source>SparseArrays.AbstractSparseVector</source>
          <target state="translated">SparseArrays.AbstractSparseVector</target>
        </trans-unit>
        <trans-unit id="efc5ded283978c9c49f6eedb2ad4be08e5fcf6f5" translate="yes" xml:space="preserve">
          <source>SparseArrays.SparseMatrixCSC</source>
          <target state="translated">SparseArrays.SparseMatrixCSC</target>
        </trans-unit>
        <trans-unit id="0191394e10b7b51a1b9ebf119c56edee4686d2c3" translate="yes" xml:space="preserve">
          <source>SparseArrays.SparseVector</source>
          <target state="translated">SparseArrays.SparseVector</target>
        </trans-unit>
        <trans-unit id="12c30913d53ff79a5899814d9d4da6f4ce79df8c" translate="yes" xml:space="preserve">
          <source>SparseArrays.blockdiag()</source>
          <target state="translated">SparseArrays.blockdiag()</target>
        </trans-unit>
        <trans-unit id="d192969dfb5ac3446328b51521582005446edd5b" translate="yes" xml:space="preserve">
          <source>SparseArrays.droptol!()</source>
          <target state="translated">SparseArrays.droptol!()</target>
        </trans-unit>
        <trans-unit id="4ddd549dc09d56f378a7249700343827ba8f5ee0" translate="yes" xml:space="preserve">
          <source>SparseArrays.dropzeros!()</source>
          <target state="translated">SparseArrays.dropzeros!()</target>
        </trans-unit>
        <trans-unit id="43c8a19dce16a062a2bd6f37e465e89325288848" translate="yes" xml:space="preserve">
          <source>SparseArrays.dropzeros()</source>
          <target state="translated">SparseArrays.dropzeros()</target>
        </trans-unit>
        <trans-unit id="b06106329265732b8668ee5a86f7346d4cf4eb50" translate="yes" xml:space="preserve">
          <source>SparseArrays.findnz()</source>
          <target state="translated">SparseArrays.findnz()</target>
        </trans-unit>
        <trans-unit id="3a30c4a4b0295afe3525cdd815910bdb79f33dd0" translate="yes" xml:space="preserve">
          <source>SparseArrays.issparse()</source>
          <target state="translated">SparseArrays.issparse()</target>
        </trans-unit>
        <trans-unit id="26dd853b5d2b72cfc363174114eb03327718f708" translate="yes" xml:space="preserve">
          <source>SparseArrays.nnz()</source>
          <target state="translated">SparseArrays.nnz()</target>
        </trans-unit>
        <trans-unit id="cbaa48dba779c301f3e6425a6ed701d49b4bd174" translate="yes" xml:space="preserve">
          <source>SparseArrays.nonzeros()</source>
          <target state="translated">SparseArrays.nonzeros()</target>
        </trans-unit>
        <trans-unit id="8c2eef1894bb96479874f0baa9f24dc86b9e0cf7" translate="yes" xml:space="preserve">
          <source>SparseArrays.nzrange()</source>
          <target state="translated">SparseArrays.nzrange()</target>
        </trans-unit>
        <trans-unit id="f02c63d634bc2341df093664f88b44cee182f2b3" translate="yes" xml:space="preserve">
          <source>SparseArrays.permute()</source>
          <target state="translated">SparseArrays.permute()</target>
        </trans-unit>
        <trans-unit id="9994dfce0e0d53e949999fc71c1fbb85c128fa40" translate="yes" xml:space="preserve">
          <source>SparseArrays.rowvals()</source>
          <target state="translated">SparseArrays.rowvals()</target>
        </trans-unit>
        <trans-unit id="3c0d5f4f4d6a4ebe3c070670b3425cfe6b6dd011" translate="yes" xml:space="preserve">
          <source>SparseArrays.sparse()</source>
          <target state="translated">SparseArrays.sparse()</target>
        </trans-unit>
        <trans-unit id="072b5b1a6e5075bf30396b55db010f555b208bdd" translate="yes" xml:space="preserve">
          <source>SparseArrays.sparsevec()</source>
          <target state="translated">SparseArrays.sparsevec()</target>
        </trans-unit>
        <trans-unit id="357dceaa1babdd8d001f14975c2d7bfde7ec7c9c" translate="yes" xml:space="preserve">
          <source>SparseArrays.spdiagm()</source>
          <target state="translated">SparseArrays.spdiagm()</target>
        </trans-unit>
        <trans-unit id="1a418272b25448553418a73da79a3250e4ab5011" translate="yes" xml:space="preserve">
          <source>SparseArrays.sprand()</source>
          <target state="translated">SparseArrays.sprand()</target>
        </trans-unit>
        <trans-unit id="f6899873b56d4b44424ff68c3a21bd2e7a9aa853" translate="yes" xml:space="preserve">
          <source>SparseArrays.sprandn()</source>
          <target state="translated">SparseArrays.sprandn()</target>
        </trans-unit>
        <trans-unit id="89d37ac77a223017766d5c1dc0743ccadb632bde" translate="yes" xml:space="preserve">
          <source>SparseArrays.spzeros()</source>
          <target state="translated">SparseArrays.spzeros()</target>
        </trans-unit>
        <trans-unit id="65f758fa14f2841831e187fb4600d65df5da8acc" translate="yes" xml:space="preserve">
          <source>Speak-No-Evil Monkey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c23b0d99698b57c5cb21fafcb8a8daf127386c6" translate="yes" xml:space="preserve">
          <source>Speaker</source>
          <target state="translated">Speaker</target>
        </trans-unit>
        <trans-unit id="705d8d8abff7410ad3f6e8ff0ad75a39a7764810" translate="yes" xml:space="preserve">
          <source>Speaker With Cancellation Stroke</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17bc850534be37bda5aa0f429269526f0757aada" translate="yes" xml:space="preserve">
          <source>Speaker With One Sound Wave</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba564bd49d77e24a6426e99e63da7caf3a90e03" translate="yes" xml:space="preserve">
          <source>Speaker With Three Sound Waves</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86064ae09b2046b53b3c962b3bba5aae14da258" translate="yes" xml:space="preserve">
          <source>Special Reference Syntax for ccall (deprecated):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e552d4b23e8c0dfe309d5166ff7dd844ec3d8ffe" translate="yes" xml:space="preserve">
          <source>Special Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf22f9af48decd354e6c72533954f8e011fb3722" translate="yes" xml:space="preserve">
          <source>Special comparison operators &lt;a href=&quot;../../base/base/index#Base.isequal&quot;&gt;&lt;code&gt;isequal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../base/base/index#Core.:===&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; are exceptions to the propagation rule: they always return a &lt;code&gt;Bool&lt;/code&gt; value, even in the presence of &lt;code&gt;missing&lt;/code&gt; values, considering &lt;code&gt;missing&lt;/code&gt; as equal to &lt;code&gt;missing&lt;/code&gt; and as different from any other value. They can therefore be used to test whether a value is &lt;code&gt;missing&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a11b16603b5e9e662bd9df261c5a29e4c2edb2" translate="yes" xml:space="preserve">
          <source>Special floating-point values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491dea01e74cbe6a8f18303a3dfe136bb0985746" translate="yes" xml:space="preserve">
          <source>Special function available to inner constructors which created a new object of the type. See the manual section on &lt;a href=&quot;../../manual/constructors/index#Inner-Constructor-Methods-1&quot;&gt;Inner Constructor Methods&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5cdb4d83d13dcb9044f5371c6dcdabd5610f8d" translate="yes" xml:space="preserve">
          <source>Special functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5f2086fb1aefbd2646d585987c8de44d38bec9" translate="yes" xml:space="preserve">
          <source>Special matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7ac96a3313ddf3aacd6d129c523757fc5c9d59" translate="yes" xml:space="preserve">
          <source>Special note for &lt;a href=&quot;#Base.Threads.Condition&quot;&gt;&lt;code&gt;Threads.Condition&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807c1988e26265a853afec2d4132ac7ad72ba269" translate="yes" xml:space="preserve">
          <source>Special top-level assignments, such as those performed by the &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;struct&lt;/code&gt; keywords, are constant by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49acba3ffb7180cd7efe38b435fb88fbe90f135f" translate="yes" xml:space="preserve">
          <source>Special values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d4e772087d117547d3c875b16094fd6c5367ad" translate="yes" xml:space="preserve">
          <source>Specialization can reset back to the default by using &lt;a href=&quot;#Base.@specialize&quot;&gt;&lt;code&gt;@specialize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f566326c354506f26000ed8233f0501a3e3957" translate="yes" xml:space="preserve">
          <source>Specializing array generation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc9f310613a35e0321de1b41f7988ba5d0e32c4" translate="yes" xml:space="preserve">
          <source>Specially formatted blocks, known as admonitions, can be used to highlight particular remarks. They can be defined using the following &lt;code&gt;!!!&lt;/code&gt; syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9edc08537474fa17034547ad3df899f1852699" translate="yes" xml:space="preserve">
          <source>Specifies what type should be used by &lt;a href=&quot;#Base.promote&quot;&gt;&lt;code&gt;promote&lt;/code&gt;&lt;/a&gt; when given values of types &lt;code&gt;type1&lt;/code&gt; and &lt;code&gt;type2&lt;/code&gt;. This function should not be called directly, but should have definitions added to it for new types as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc3d36947a7136e3a2113dc38c46242794c8bd5" translate="yes" xml:space="preserve">
          <source>Specify whether the file calling this function is precompilable, defaulting to &lt;code&gt;true&lt;/code&gt;. If a module or file is &lt;em&gt;not&lt;/em&gt; safely precompilable, it should call &lt;code&gt;__precompile__(false)&lt;/code&gt; in order to throw an error if Julia attempts to precompile it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7927b015411f60295ede2731d6f18ce21aea916" translate="yes" xml:space="preserve">
          <source>Specifying &lt;a href=&quot;../arrays/index#Base.IndexLinear&quot;&gt;&lt;code&gt;IndexLinear()&lt;/code&gt;&lt;/a&gt; ensures that &lt;code&gt;i&lt;/code&gt; will be an integer; specifying &lt;a href=&quot;../arrays/index#Base.IndexCartesian&quot;&gt;&lt;code&gt;IndexCartesian()&lt;/code&gt;&lt;/a&gt; ensures that &lt;code&gt;i&lt;/code&gt; will be a &lt;a href=&quot;../arrays/index#Base.IteratorsMD.CartesianIndex&quot;&gt;&lt;code&gt;CartesianIndex&lt;/code&gt;&lt;/a&gt;; specifying &lt;code&gt;IndexStyle(A)&lt;/code&gt; chooses whichever has been defined as the native indexing style for array &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f52ca843bb0d4555ed8506e7bd677c502e5edf" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;skipstart&lt;/code&gt; will ignore the corresponding number of initial lines from the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f925268770f775a772e79870e901cde32f015862" translate="yes" xml:space="preserve">
          <source>Specifying Network Topology (Experimental)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1783bf6940e9bae3e1be8ab7b9f5dc5bcd87f5a" translate="yes" xml:space="preserve">
          <source>Specifying the output element type &lt;code&gt;Type&lt;/code&gt; requires at least Julia 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36721aa351958a25c311833776e0d5d1e4c9f037" translate="yes" xml:space="preserve">
          <source>Spectral decomposition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04840d651fd24da8710cb498f30143dfcbf4c7a1" translate="yes" xml:space="preserve">
          <source>Speech Balloon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f9516f3a28b356979050a7232c52e8215b9197" translate="yes" xml:space="preserve">
          <source>Speedboat</source>
          <target state="translated">Speedboat</target>
        </trans-unit>
        <trans-unit id="aa9c4705414e9750cb328a611bcff5e53976f578" translate="yes" xml:space="preserve">
          <source>Spherical Angle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dde05ce4b9bb85d7303e960744f3d7629687e46" translate="yes" xml:space="preserve">
          <source>Spherical Angle Opening Left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43cb2828420569b945accb84efa2574b9428e04" translate="yes" xml:space="preserve">
          <source>Spherical Angle Opening Up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da481377677ccbb365ba217f567d2aff84ded7de" translate="yes" xml:space="preserve">
          <source>Spiral Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7b26f6e7add78d2d64b6f8da5121da617630a1" translate="yes" xml:space="preserve">
          <source>Splashing Sweat Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e169fff02bcaf3357592741c2b10b68b8ea84c21" translate="yes" xml:space="preserve">
          <source>Splatting interpolation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5d09875b417bfcf4922ca3b62e5dbd30e2f7f3" translate="yes" xml:space="preserve">
          <source>Splicing function arguments can be addictive. Instead of &lt;code&gt;[a..., b...]&lt;/code&gt;, use simply &lt;code&gt;[a; b]&lt;/code&gt;, which already concatenates arrays. &lt;code&gt;collect(a)&lt;/code&gt; is better than &lt;code&gt;[a...]&lt;/code&gt;, but since &lt;code&gt;a&lt;/code&gt; is already iterable it is often even better to leave it alone, and not convert it to an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b1d2076feaf10905464b7f6548b0edb09706f3" translate="yes" xml:space="preserve">
          <source>Split &lt;code&gt;str&lt;/code&gt; into an array of substrings on occurrences of the delimiter(s) &lt;code&gt;dlm&lt;/code&gt;. &lt;code&gt;dlm&lt;/code&gt; can be any of the formats allowed by &lt;a href=&quot;#Base.findnext-Tuple%7BAbstractString,AbstractString,Integer%7D&quot;&gt;&lt;code&gt;findnext&lt;/code&gt;&lt;/a&gt;'s first argument (i.e. as a string, regular expression or a function), or as a single character or collection of characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552cff858dace12624d60f56ac4457dbd1ac9e8f" translate="yes" xml:space="preserve">
          <source>Split a file path into all its path components. This is the opposite of &lt;code&gt;joinpath&lt;/code&gt;. Returns an array of substrings, one for each directory or file in the path, including the root directory if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6fc7020f463e86285ee0713db7a32f2d0e3af5" translate="yes" xml:space="preserve">
          <source>Split a path into a tuple of the directory name and file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe20d21d33b794a0e5254a53ad57d8fdde9160d" translate="yes" xml:space="preserve">
          <source>Spouting Whale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3574421ff2c27b1c548653317e189f7619773018" translate="yes" xml:space="preserve">
          <source>Square Cap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afeabb0e767646bdc20f645804b2c14888e1fb7" translate="yes" xml:space="preserve">
          <source>Square Cup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5efa51b8350ad9389b553c84848b0fcb077e49" translate="yes" xml:space="preserve">
          <source>Square Image Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0dd31fcd74a2ab73d04708b19433e554a050278" translate="yes" xml:space="preserve">
          <source>Square Image Of + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933827bdbbffda6c4b4de0fcda4f941442c599ab" translate="yes" xml:space="preserve">
          <source>Square Image Of Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39b71519d52a4df6d88bec6a7d846ccd1b51fef" translate="yes" xml:space="preserve">
          <source>Square Image Of Or Not Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa39bb4411eabaf3150628e3e5dd942959a63f80" translate="yes" xml:space="preserve">
          <source>Square Left Open Box Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687ad6aae405db4ae1dee6bf61405acf0e2e8299" translate="yes" xml:space="preserve">
          <source>Square Lozenge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98180a6362218af658e83a58830782963230b5aa" translate="yes" xml:space="preserve">
          <source>Square Original Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2860f9c12a607572c24b5ac4673755527d6bcf" translate="yes" xml:space="preserve">
          <source>Square Original Of + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9cb2cdf62a30027a7242f038fff93d42515109d" translate="yes" xml:space="preserve">
          <source>Square Original Of Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b49c0011f07887bb3cd77756fbf234939031d94" translate="yes" xml:space="preserve">
          <source>Square Original Of Or Not Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbc599844ab842c9b27fe76675248e8cedc0dbe" translate="yes" xml:space="preserve">
          <source>Square Right Open Box Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8743ae2bde50ddde8845601464be440209469ef2" translate="yes" xml:space="preserve">
          <source>Square Root</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ad262e395f61d487cf22d07bfc1768c2225d4c" translate="yes" xml:space="preserve">
          <source>Square With Bottom Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2181aa7d927b9fbbd456d46aba1d41e1803fc2d" translate="yes" xml:space="preserve">
          <source>Square With Diagonal Crosshatch Fill</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010d2a7c14fed4015e659a25512def842d8805ea" translate="yes" xml:space="preserve">
          <source>Square With Horizontal Fill</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff60ac41e97635d5249532521dc037acf45ed3e" translate="yes" xml:space="preserve">
          <source>Square With Left Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116c5c6cbd4c803a710f8ec9e341406a95d7dbbd" translate="yes" xml:space="preserve">
          <source>Square With Lower Left Diagonal Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715b61c773d044ee6ad12549c2454ce2fd5fe51a" translate="yes" xml:space="preserve">
          <source>Square With Lower Right Diagonal Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153b1047e2c4e2c2f93e4f4131b3f0faa80050e7" translate="yes" xml:space="preserve">
          <source>Square With Orthogonal Crosshatch Fill</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0142315df9ecfe9426932b42779b3bf33a6831" translate="yes" xml:space="preserve">
          <source>Square With Right Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c3339a275178b74b17f22aeafeedceccf7b092" translate="yes" xml:space="preserve">
          <source>Square With Top Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e2d42355f43da4aa12ba845e69a712d061f6bd" translate="yes" xml:space="preserve">
          <source>Square With Upper Left Diagonal Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c355c86222b70b3ac157c963624b10a57b746e" translate="yes" xml:space="preserve">
          <source>Square With Upper Left To Lower Right Fill</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d60871881d9b38104e1454412ee699337774e0" translate="yes" xml:space="preserve">
          <source>Square With Upper Right Diagonal Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1aa3458dede6c1b49f58dbd1c7b4d56ebb7e455" translate="yes" xml:space="preserve">
          <source>Square With Upper Right To Lower Left Fill</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb4e076fb16704d54cb19b69f2e371f2cf00254" translate="yes" xml:space="preserve">
          <source>Square With Vertical Fill</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb69521433b11d496282b6531f431774a498fa4" translate="yes" xml:space="preserve">
          <source>Squared Asterisk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c75edbac76c893f8d8241ac1a86cd7c19229bfa" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-5272</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3dbe1aed1961e070c9829d866ee3c09fdd9aa5" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-5408</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a63c6b7911e5c8d1b5fcf8acdce864966b37bfa" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-55B6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafeb3d86b3a5b762e9c662eddae591e5a5e6027" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-6307</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fbc80cec4ad05ec82add2c68c7c8cef6a08ec75" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-6708</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bbd4b1fc3f8ca39dc1f296c12ff36f5bc463802" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-6709</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d22c42fb77ed0710f5ac1879be4a6f36461d293" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-6E80</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1b001e1f5867266f30f91f6d5177400bf8afbd" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-7121</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f978dd3fedffe2e65c136bde41b210f53700f0c" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-7533</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13c4a90a4ebdda6c3add8469e4768c6173baf62" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-7981</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bef918f1f718ee550eb3ca43c47bbf8204b88f8" translate="yes" xml:space="preserve">
          <source>Squared Cjk Unified Ideograph-7A7A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde58510f7f91f7386694cb745375c688ffac3da" translate="yes" xml:space="preserve">
          <source>Squared Cl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edb01190ec1a9055d73f3022b74266562d5d0fe" translate="yes" xml:space="preserve">
          <source>Squared Cool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d43e327d7c2af059c90b013d9b40b3e1b6ab82" translate="yes" xml:space="preserve">
          <source>Squared Dot Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4cae3a89f0782e9fab09fcdc4ade1cf5235a3e" translate="yes" xml:space="preserve">
          <source>Squared Falling Diagonal Slash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef57422175ccadc3ed7a7476389fe48eea50049" translate="yes" xml:space="preserve">
          <source>Squared Free</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e8c3c7244ea85842e6e1452fb4d9001d2da7426" translate="yes" xml:space="preserve">
          <source>Squared Id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5202ba1f03da711da695f2dbbfed0adc4e50f6" translate="yes" xml:space="preserve">
          <source>Squared Katakana Koko</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef81a1474c9bc7ba557f667f735a98a7a30e5b40" translate="yes" xml:space="preserve">
          <source>Squared Katakana Sa</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d56ccd825e436fcb16f9df725ef7ceac6e7afe" translate="yes" xml:space="preserve">
          <source>Squared Minus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31c2282e159fee06cbcd80aa31eb49016f17bf0" translate="yes" xml:space="preserve">
          <source>Squared New</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611c40e04ea5681d3b523dbd07617bc0cfc7ed71" translate="yes" xml:space="preserve">
          <source>Squared Ng</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ad953aac7b46d4843f566e291f550dd31b1fe2" translate="yes" xml:space="preserve">
          <source>Squared Ok</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2048b178a1bcd09e49052a62d3edbac6b7f2c8dc" translate="yes" xml:space="preserve">
          <source>Squared Plus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4f2e0475a995d5e7e9229f7fd41f50a925f33a" translate="yes" xml:space="preserve">
          <source>Squared Rising Diagonal Slash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24678eadf5f7e2f41a8d71b6dedd01cd583cc55e" translate="yes" xml:space="preserve">
          <source>Squared Small Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8d805951b7dd01d0be411a53e8d00b1e416651" translate="yes" xml:space="preserve">
          <source>Squared Sos</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97a9ef68db2cf1f18b96f489b779c1d574acafd" translate="yes" xml:space="preserve">
          <source>Squared Times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775191b4526b92917f42605a808abe422580a59f" translate="yes" xml:space="preserve">
          <source>Squared Up With Exclamation Mark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f3182a012b1b6d673d3228ce51c58969d80438" translate="yes" xml:space="preserve">
          <source>Squared Vs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8f1043c1174e58afe9d953c96c944b9b9543e8" translate="yes" xml:space="preserve">
          <source>Squared absolute value of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fde0384c0fac41dc0b4c32171c8b572c0690a0" translate="yes" xml:space="preserve">
          <source>Stack Traces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b0ac4e01fbd59a3075de631236719f6f887dcf" translate="yes" xml:space="preserve">
          <source>Stack information representing execution context, with the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75694868f27643cc65da5059c54dcd8b6327e25" translate="yes" xml:space="preserve">
          <source>StackTraces</source>
          <target state="translated">StackTraces</target>
        </trans-unit>
        <trans-unit id="678e68d3843651231bb89046fbc5e7d3107802b0" translate="yes" xml:space="preserve">
          <source>Stacked environments allow for &lt;strong&gt;adding&lt;/strong&gt; tools to the primary environment. You can push an environment of development tools onto the end of the stack to make them available from the REPL and scripts, but not from inside packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3cbe030b95740f7683573cefeb15ba36909ef0" translate="yes" xml:space="preserve">
          <source>Standard C escape sequences (&lt;code&gt;\a&lt;/code&gt;, &lt;code&gt;\b&lt;/code&gt;, &lt;code&gt;\t&lt;/code&gt;, &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\v&lt;/code&gt;, &lt;code&gt;\f&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt;, &lt;code&gt;\e&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7ac1c04f61f3634812724e7b8f8229944e63e7" translate="yes" xml:space="preserve">
          <source>Standard Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd515806c9721da31f855b10b569363e7325842" translate="yes" xml:space="preserve">
          <source>Standard Julia Alias</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc014247a90e3e9471cd43027f6ed1dd5022323" translate="yes" xml:space="preserve">
          <source>Standard Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb4b58e37884ee3cf667303730545d24312d294" translate="yes" xml:space="preserve">
          <source>Standard Numeric Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814bb249d1a3ec815cc9661f4abbd87d1406269d" translate="yes" xml:space="preserve">
          <source>Standard comparison operations are defined for all the primitive numeric types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a6e8fca3df463e66b9fdd04f246670791f11b0" translate="yes" xml:space="preserve">
          <source>Standard equality and comparison operators follow the propagation rule presented above: if any of the operands is &lt;code&gt;missing&lt;/code&gt;, the result is &lt;code&gt;missing&lt;/code&gt;. Here are a few examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3818b5bf8738992ef169a27b1a0b6814acffd3" translate="yes" xml:space="preserve">
          <source>Standard functions to manipulate complex values are provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3f5d2992e483a089536ebae0c8c764d3b3ce39" translate="yes" xml:space="preserve">
          <source>Standard modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f030a2e0a97662a91cdedf91f229f8b839e395" translate="yes" xml:space="preserve">
          <source>Standard word size on the current machine, in bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63721e71b685d17610f3a4f7db5d918f0bdd543b" translate="yes" xml:space="preserve">
          <source>Standardise the path string &lt;code&gt;path&lt;/code&gt; to use POSIX separators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b369e571e9e5b06b43f8180a72eca85d52ef8e8f" translate="yes" xml:space="preserve">
          <source>Star Equals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db1a9984ad3fec6921c84f5ebaeae84716ec9a0" translate="yes" xml:space="preserve">
          <source>Star Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a489710595be3bf35f6d9092f935bd01bc68117" translate="yes" xml:space="preserve">
          <source>Start running &lt;code&gt;command&lt;/code&gt; asynchronously, and return a &lt;code&gt;process::IO&lt;/code&gt; object. If &lt;code&gt;read&lt;/code&gt; is true, then reads from the process come from the process's standard output and &lt;code&gt;other&lt;/code&gt; optionally specifies the process's standard input stream. If &lt;code&gt;write&lt;/code&gt; is true, then writes go to the process's standard input and &lt;code&gt;other&lt;/code&gt; optionally specifies the process's standard output stream. The process's standard error stream is connected to the current global &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7907936de06e301b74a3734257665164fffd4d40" translate="yes" xml:space="preserve">
          <source>Start some other operations that use &lt;code&gt;f(x)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ce458918d7a3f912a02e5ebabeaab6c7eae8eb" translate="yes" xml:space="preserve">
          <source>Start the &lt;a href=&quot;#LibGit2.GitRevWalker&quot;&gt;&lt;code&gt;GitRevWalker&lt;/code&gt;&lt;/a&gt;&lt;code&gt;walker&lt;/code&gt; at commit &lt;code&gt;cid&lt;/code&gt;. This function can be used to apply a function to all commits since a certain year, by passing the first commit of that year as &lt;code&gt;cid&lt;/code&gt; and then passing the resulting &lt;code&gt;w&lt;/code&gt; to &lt;a href=&quot;#LibGit2.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e67b5695308b7e929ca67d95fac3d5bc7882841" translate="yes" xml:space="preserve">
          <source>Start up with the given system image file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02b4c4e7bdcd8cd868fa3d24729b698d60a7b81" translate="yes" xml:space="preserve">
          <source>Starting and managing worker processes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424214698b544719f2dac18885901d9c51c86b29" translate="yes" xml:space="preserve">
          <source>Starts a new test set, or multiple test sets if a &lt;code&gt;for&lt;/code&gt; loop is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb8d8545ed6bf54e8370ad6d910c90fdb3d6473" translate="yes" xml:space="preserve">
          <source>Station</source>
          <target state="translated">Station</target>
        </trans-unit>
        <trans-unit id="2086b21f8f49274138c38d476bee317a84a8aecc" translate="yes" xml:space="preserve">
          <source>Statistics</source>
          <target state="translated">Statistics</target>
        </trans-unit>
        <trans-unit id="cccd690154011cb75b8b78f5362b9c3448ace5ee" translate="yes" xml:space="preserve">
          <source>Statue Of Liberty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f2aad70c54d1e78f565f1e7e1cc8657b7626bd" translate="yes" xml:space="preserve">
          <source>Steam Locomotive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84132d0949f51f7ad3457aace2ec2d9746e3d772" translate="yes" xml:space="preserve">
          <source>Steaming Bowl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7181cf49f1a014db3dc814669aed3b1f37f97bec" translate="yes" xml:space="preserve">
          <source>StepRange</source>
          <target state="translated">StepRange</target>
        </trans-unit>
        <trans-unit id="d4de892f01d18ba0a7dc54206b530b13a5df0482" translate="yes" xml:space="preserve">
          <source>StepRangeLen</source>
          <target state="translated">StepRangeLen</target>
        </trans-unit>
        <trans-unit id="66ef96342a9c1591dcca02b1bcf2a8ad36050c4b" translate="yes" xml:space="preserve">
          <source>Stop background tracking of changes for &lt;code&gt;path&lt;/code&gt;. It is not recommended to do this while another task is waiting for &lt;code&gt;watch_folder&lt;/code&gt; to return on the same path, as the result may be unpredictable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f74dc30404631755f435491944284f2207e653" translate="yes" xml:space="preserve">
          <source>Stop the program with an exit code. The default exit code is zero, indicating that the program completed successfully. In an interactive session, &lt;code&gt;exit()&lt;/code&gt; can be called with the keyboard shortcut &lt;code&gt;^D&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c796d1463d8d6af78eef29ebfb982bd9162d92" translate="yes" xml:space="preserve">
          <source>Store a set of values to the &lt;a href=&quot;#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt;. If the channel is full, blocks until space is available. Return the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138628def8f47aa36497ac90286c7030d07fbaef" translate="yes" xml:space="preserve">
          <source>Store a value of type &lt;code&gt;T&lt;/code&gt; to the address of the &lt;code&gt;i&lt;/code&gt;th element (1-indexed) starting at &lt;code&gt;p&lt;/code&gt;. This is equivalent to the C expression &lt;code&gt;p[i-1] = x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027a755010483789b615c3ac87b1317ced7c2a45" translate="yes" xml:space="preserve">
          <source>Store a value to a &lt;a href=&quot;#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;&lt;code&gt;rr&lt;/code&gt;. &lt;code&gt;Future&lt;/code&gt;s are write-once remote references. A &lt;code&gt;put!&lt;/code&gt; on an already set &lt;code&gt;Future&lt;/code&gt; throws an &lt;code&gt;Exception&lt;/code&gt;. All asynchronous remote calls return &lt;code&gt;Future&lt;/code&gt;s and set the value to the return value of the call upon completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b77e5353d0627ae778fd5b552e50a4ee9644898" translate="yes" xml:space="preserve">
          <source>Store the &lt;code&gt;payload&lt;/code&gt; credential for re-use in a future authentication. Should only be called when authentication was successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59aeef3224de89515b0e86228792a22810cad059" translate="yes" xml:space="preserve">
          <source>Store the given value at the given key or index within a collection. The syntax &lt;code&gt;a[i,j,...] = x&lt;/code&gt; is converted by the compiler to &lt;code&gt;(setindex!(a, x, i, j, ...); x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014ea264eda29a94d4ee059e8f0e09aefc553612" translate="yes" xml:space="preserve">
          <source>Store values from array &lt;code&gt;X&lt;/code&gt; within some subset of &lt;code&gt;A&lt;/code&gt; as specified by &lt;code&gt;inds&lt;/code&gt;. The syntax &lt;code&gt;A[inds...] = X&lt;/code&gt; is equivalent to &lt;code&gt;setindex!(A, X, inds...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d37f3c5406795e9bde809355a42bb73a9978e9" translate="yes" xml:space="preserve">
          <source>Stores the given string &lt;code&gt;substr&lt;/code&gt; as a &lt;code&gt;SubstitutionString&lt;/code&gt;, for use in regular expression substitutions. Most commonly constructed using the &lt;a href=&quot;#Base.@s_str&quot;&gt;&lt;code&gt;@s_str&lt;/code&gt;&lt;/a&gt; macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0357aea6ae7052b0cd8d6047bbcef904118ecf" translate="yes" xml:space="preserve">
          <source>Straight Ruler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f12e8ecd9d1d32998e3ffea80b8517675c6cbd3" translate="yes" xml:space="preserve">
          <source>Straightness</source>
          <target state="translated">Straightness</target>
        </trans-unit>
        <trans-unit id="393d46da8467a9e4437aa15a2eef178693e18f06" translate="yes" xml:space="preserve">
          <source>Strawberry</source>
          <target state="translated">Strawberry</target>
        </trans-unit>
        <trans-unit id="60973ecf7cdf487f0e9151f908a1c3b86305563e" translate="yes" xml:space="preserve">
          <source>Strictly Equivalent To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38ed77894b85abfb41222b10a343b6f585a77d8" translate="yes" xml:space="preserve">
          <source>Strided Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fe9f05b77705755f03233c3e7eb9322595abdc" translate="yes" xml:space="preserve">
          <source>StridedArray</source>
          <target state="translated">StridedArray</target>
        </trans-unit>
        <trans-unit id="bd2ef761fb501ff9ef81937eed42fe501a69e740" translate="yes" xml:space="preserve">
          <source>StridedMatrix</source>
          <target state="translated">StridedMatrix</target>
        </trans-unit>
        <trans-unit id="46ddb83dd680bb85309e669b74f8bc053d798ec5" translate="yes" xml:space="preserve">
          <source>StridedVecOrMat</source>
          <target state="translated">StridedVecOrMat</target>
        </trans-unit>
        <trans-unit id="e4c5d1008e5ca47417850fef718da4be6680b025" translate="yes" xml:space="preserve">
          <source>StridedVector</source>
          <target state="translated">StridedVector</target>
        </trans-unit>
        <trans-unit id="121a4522e99b2d3999de17bf38fc1bb5c439417a" translate="yes" xml:space="preserve">
          <source>String Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571ce02a70fa6c9530b71f404812adada5f798b1" translate="yes" xml:space="preserve">
          <source>String indices in Julia refer to code units (= bytes for UTF-8), the fixed-width building blocks that are used to encode arbitrary characters (code points). This means that not every index into a &lt;code&gt;String&lt;/code&gt; is necessarily a valid index for a character. If you index into a string at such an invalid byte index, an error is thrown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ef1e53095705023ec7e9feac375698bdbeffe5" translate="yes" xml:space="preserve">
          <source>String literals are delimited by double quotes or triple double quotes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5154f7ee3b03f88b8211977f6c7f45e6e215d0" translate="yes" xml:space="preserve">
          <source>String literals can be delimited with either &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; delimited literals can contain &lt;code&gt;&quot;&lt;/code&gt; characters without quoting it like &lt;code&gt;&quot;\&quot;&quot;&lt;/code&gt;. String literals can have values of other variables or expressions interpolated into them, indicated by &lt;code&gt;$variablename&lt;/code&gt; or &lt;code&gt;$(expression)&lt;/code&gt;, which evaluates the variable name or the expression in the context of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2666a29f2d3dd5ab507df0f15105c7cca7b05679" translate="yes" xml:space="preserve">
          <source>String macro used to parse a string to a &lt;a href=&quot;#Base.VersionNumber&quot;&gt;&lt;code&gt;VersionNumber&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2367222bba5c91ff02194877e2799fcfc6dc16" translate="yes" xml:space="preserve">
          <source>StringIndexError</source>
          <target state="translated">StringIndexError</target>
        </trans-unit>
        <trans-unit id="14d1f2546b36d439d82b2ef0f57773ba6cfc9755" translate="yes" xml:space="preserve">
          <source>Stringify &lt;code&gt;s&lt;/code&gt; and pad the resulting string on the left with &lt;code&gt;p&lt;/code&gt; to make it &lt;code&gt;n&lt;/code&gt; characters (code points) long. If &lt;code&gt;s&lt;/code&gt; is already &lt;code&gt;n&lt;/code&gt; characters long, an equal string is returned. Pad with spaces by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dee879ee9f6e53d2f84878f42b43ffb4e81c620" translate="yes" xml:space="preserve">
          <source>Stringify &lt;code&gt;s&lt;/code&gt; and pad the resulting string on the right with &lt;code&gt;p&lt;/code&gt; to make it &lt;code&gt;n&lt;/code&gt; characters (code points) long. If &lt;code&gt;s&lt;/code&gt; is already &lt;code&gt;n&lt;/code&gt; characters long, an equal string is returned. Pad with spaces by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="27fc05e2ce35495054f6f23e339d81c46dea0958" translate="yes" xml:space="preserve">
          <source>Strings are finite sequences of characters. Of course, the real trouble comes when one asks what a character is. The characters that English speakers are familiar with are the letters &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, etc., together with numerals and common punctuation symbols. These characters are standardized together with a mapping to integer values between 0 and 127 by the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; standard. There are, of course, many other characters used in non-English languages, including variants of the ASCII characters with accents and other modifications, related scripts such as Cyrillic and Greek, and scripts completely unrelated to ASCII and English, including Arabic, Chinese, Hebrew, Hindi, Japanese, and Korean. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode&quot;&gt;Unicode&lt;/a&gt; standard tackles the complexities of what exactly a character is, and is generally accepted as the definitive standard addressing this problem. Depending on your needs, you can either ignore these complexities entirely and just pretend that only ASCII characters exist, or you can write code that can handle any of the characters or encodings that one may encounter when handling non-ASCII text. Julia makes dealing with plain ASCII text simple and efficient, and handling Unicode is as simple and efficient as possible. In particular, you can write C-style string code to process ASCII strings, and they will work as expected, both in terms of performance and semantics. If such code encounters non-ASCII text, it will gracefully fail with a clear error message, rather than silently introducing corrupt results. When this happens, modifying the code to handle non-ASCII data is straightforward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9264bdea73f7d90a997f7102744f9feacede53" translate="yes" xml:space="preserve">
          <source>Strings in Julia can contain invalid UTF-8 code unit sequences. This convention allows to treat any byte sequence as a &lt;code&gt;String&lt;/code&gt;. In such situations a rule is that when parsing a sequence of code units from left to right characters are formed by the longest sequence of 8-bit code units that matches the start of one of the following bit patterns (each &lt;code&gt;x&lt;/code&gt; can be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6b5c7b7464a13a4bd9a10714601b47c64d7afa" translate="yes" xml:space="preserve">
          <source>Stripping of the newline is performed after the dedentation. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e52156f48fe5e18d9158e0bf380625b73585edb" translate="yes" xml:space="preserve">
          <source>Struct Type correspondences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0fc4c0f301fa1cd98fffd459f3e816f1d1be499" translate="yes" xml:space="preserve">
          <source>Stylistic Conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33a5e5c8ae43e574fef238ba024c611e060bc6a" translate="yes" xml:space="preserve">
          <source>SubString</source>
          <target state="translated">SubString</target>
        </trans-unit>
        <trans-unit id="1735d112eb1a073857a19694bff82f86c7249ae2" translate="yes" xml:space="preserve">
          <source>Subnormal numbers, formerly called &lt;a href=&quot;https://en.wikipedia.org/wiki/Denormal_number&quot;&gt;denormal numbers&lt;/a&gt;, are useful in many contexts, but incur a performance penalty on some hardware. A call &lt;a href=&quot;../../base/numbers/index#Base.Rounding.set_zero_subnormals&quot;&gt;&lt;code&gt;set_zero_subnormals(true)&lt;/code&gt;&lt;/a&gt; grants permission for floating-point operations to treat subnormal inputs or outputs as zeros, which may improve performance on some hardware. A call &lt;a href=&quot;../../base/numbers/index#Base.Rounding.set_zero_subnormals&quot;&gt;&lt;code&gt;set_zero_subnormals(false)&lt;/code&gt;&lt;/a&gt; enforces strict IEEE behavior for subnormal numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9237c454117d3b4f9ff2c5ff30dde934aadd6f87" translate="yes" xml:space="preserve">
          <source>Subscript Eight / Subscript Digit Eight</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba52e0566cd0a38176a108c741a02b773369b94f" translate="yes" xml:space="preserve">
          <source>Subscript Equals Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b3713419093bd5ef3c780fccac0baab312f553" translate="yes" xml:space="preserve">
          <source>Subscript Five / Subscript Digit Five</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199ac2ac3e680cebe0fc1b2bfe1d1e7f5aed0ce5" translate="yes" xml:space="preserve">
          <source>Subscript Four / Subscript Digit Four</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d406d549975b95e7e819e9179ff88c862b3bfa8" translate="yes" xml:space="preserve">
          <source>Subscript Left Parenthesis / Subscript Opening Parenthesis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ce2de59aae8e2e1c1f79872fd820e4cc87f4b3" translate="yes" xml:space="preserve">
          <source>Subscript Minus / Subscript Hyphen-Minus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577b8a494de3adb36134005360140a628ef6b4d4" translate="yes" xml:space="preserve">
          <source>Subscript Nine / Subscript Digit Nine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e9ed9eccefa65352d19462f0b537d0dddadc0f" translate="yes" xml:space="preserve">
          <source>Subscript One / Subscript Digit One</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bcaaa0826d4822ea8131400374d3309c9a7240e" translate="yes" xml:space="preserve">
          <source>Subscript Plus Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9c536a2536de4e96d577eb514197aca26a0343" translate="yes" xml:space="preserve">
          <source>Subscript Right Parenthesis / Subscript Closing Parenthesis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399fc9610401209e8828360a9909c90846a17709" translate="yes" xml:space="preserve">
          <source>Subscript Seven / Subscript Digit Seven</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3469665f379117ff5c39679d6093e3c3fa9f02" translate="yes" xml:space="preserve">
          <source>Subscript Six / Subscript Digit Six</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87a2f84a83c036f62a9ddc9464258420f5247f7" translate="yes" xml:space="preserve">
          <source>Subscript Three / Subscript Digit Three</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070e18f0e0fc06250de00d279adcc668d90db268" translate="yes" xml:space="preserve">
          <source>Subscript Two / Subscript Digit Two</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cadf24473f264b45f7a9892fa77aacff9741f8f" translate="yes" xml:space="preserve">
          <source>Subscript Zero / Subscript Digit Zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a1588bb3a0ff0c683d30f19c6f057f9ddfa1aa" translate="yes" xml:space="preserve">
          <source>Subsequences, permutations and shuffling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11ee5c6ad8ae244c9b52e6598da0116617c7867" translate="yes" xml:space="preserve">
          <source>Subset Above Subset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02369450366ff08b85893d6637369fa29eb45e4" translate="yes" xml:space="preserve">
          <source>Subset Above Superset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1064a609e34bd3975e5986db4b3b12d2431a95" translate="yes" xml:space="preserve">
          <source>Subset Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45c5fe31f767e593d8fc0b53fe13bcccb52d15b" translate="yes" xml:space="preserve">
          <source>Subset Of Above Almost Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2e37288f3a0a131199387906aa83eea5d90033" translate="yes" xml:space="preserve">
          <source>Subset Of Above Equals Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7120973aa2e62261f26f8d3bc8c0a236e23015c" translate="yes" xml:space="preserve">
          <source>Subset Of Above Equals Sign + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a5e56877bb630e39855b812ce6bf81d1a9397d" translate="yes" xml:space="preserve">
          <source>Subset Of Above Not Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b146f1eda2190f5187ab4511c496d759d35b0ce" translate="yes" xml:space="preserve">
          <source>Subset Of Above Tilde Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8c94cc3140a3c2d0e68f82aefd4339c446acd8" translate="yes" xml:space="preserve">
          <source>Subset Of Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7239311d2a2fb94f88e2f63464c2739a4f03da88" translate="yes" xml:space="preserve">
          <source>Subset Of Or Equal To With Dot Above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d55a499e9b605760fa7f48439194536c0d6c3aa" translate="yes" xml:space="preserve">
          <source>Subset Of With Not Equal To / Subset Of Or Not Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c061785b8cae371e317d7472e7660cc14a77f6" translate="yes" xml:space="preserve">
          <source>Subset Of With Not Equal To / Subset Of Or Not Equal To + Variation Selector-1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4d7361d965f9fd7bb4182ac9fb63b617dc4827" translate="yes" xml:space="preserve">
          <source>Subset With Dot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94f26b66eb38c2f4cedbbbf44cac159ab2f274c" translate="yes" xml:space="preserve">
          <source>Subset With Multiplication Sign Below</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95943f38615b243167e7e46a7cc4588af218f78a" translate="yes" xml:space="preserve">
          <source>Subset With Plus Sign Below</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a53b7272be1b2ec1f139c7470687452b9db9107" translate="yes" xml:space="preserve">
          <source>SubstitutionString</source>
          <target state="translated">SubstitutionString</target>
        </trans-unit>
        <trans-unit id="965303657df516e921368caa8ca36403d3db0e9e" translate="yes" xml:space="preserve">
          <source>Subtraction operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecab2082cd6b2644a4eedbfa5522237cff1d69ff" translate="yes" xml:space="preserve">
          <source>Subtype of &lt;a href=&quot;#Base.IndexStyle&quot;&gt;&lt;code&gt;IndexStyle&lt;/code&gt;&lt;/a&gt; used to describe arrays which are optimally indexed by a Cartesian index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366e9732cc2b0659cee59a67a6d30b581a73aaca" translate="yes" xml:space="preserve">
          <source>Subtype of &lt;a href=&quot;#Base.IndexStyle&quot;&gt;&lt;code&gt;IndexStyle&lt;/code&gt;&lt;/a&gt; used to describe arrays which are optimally indexed by one linear index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e92cd11b1471ce26a007ed60bbf7470092a84fc" translate="yes" xml:space="preserve">
          <source>Subtype operator: returns &lt;code&gt;true&lt;/code&gt; if and only if all values of type &lt;code&gt;T1&lt;/code&gt; are also of type &lt;code&gt;T2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6afa8e3c1c1fd3ab82b4da97360accfe909d1a9" translate="yes" xml:space="preserve">
          <source>Succeeds</source>
          <target state="translated">Succeeds</target>
        </trans-unit>
        <trans-unit id="56a6c5d7720e34385b68f0cb530741898b7206c8" translate="yes" xml:space="preserve">
          <source>Succeeds Above Almost Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0358d8792b735db2a62594aee461f9b7ad529507" translate="yes" xml:space="preserve">
          <source>Succeeds Above Equals Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c58f89de2523b860b0fb76b3972c369cd77dc12" translate="yes" xml:space="preserve">
          <source>Succeeds Above Not Almost Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d42f15a7702e11eb4d09ab2cc42685148fa61c" translate="yes" xml:space="preserve">
          <source>Succeeds Above Not Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f23a7b1dd190dd42ad30bafd57473cbe57d5d84" translate="yes" xml:space="preserve">
          <source>Succeeds Above Single-Line Equals Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf68ad34d5bb2f1403d6af24d63711db818359af" translate="yes" xml:space="preserve">
          <source>Succeeds Above Single-Line Equals Sign + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c6c6202539c00ca3e31c8719afede06922d1ca" translate="yes" xml:space="preserve">
          <source>Succeeds Above Single-Line Not Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c471cf8acc9aac08a44fad4978ff3f88a79cee5d" translate="yes" xml:space="preserve">
          <source>Succeeds But Not Equivalent To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc212c7520be81f6097c80c21092de2f0c2fb05f" translate="yes" xml:space="preserve">
          <source>Succeeds Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30fea29a2b6a3dff938b98c21704d968c09b1e2" translate="yes" xml:space="preserve">
          <source>Succeeds Or Equivalent To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da856b7cbf62aff303a61b5bee35e928ade612f" translate="yes" xml:space="preserve">
          <source>Succeeds Or Equivalent To + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1f2c63d7da26096b0ed331b59da82c50f2076f" translate="yes" xml:space="preserve">
          <source>Succeeds Under Relation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d84e087b466cc95aebf9e64592745ab867a8aa" translate="yes" xml:space="preserve">
          <source>Successfully finished executing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e453febd26d8b4b89cc63c9b22088970749b3d" translate="yes" xml:space="preserve">
          <source>Such a function should either check the operation to ensure it is safe, or have &lt;code&gt;unsafe&lt;/code&gt; somewhere in its name to alert callers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bea0574a65a636f8e2ce0cc1de987b8fbd8c80f" translate="yes" xml:space="preserve">
          <source>Such definitions correspond to methods whose type signatures are &lt;code&gt;UnionAll&lt;/code&gt; types (see &lt;a href=&quot;../types/index#UnionAll-Types-1&quot;&gt;UnionAll Types&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bca688d3007aabd88d8ccf76e53db717f51d37" translate="yes" xml:space="preserve">
          <source>Suggest that collection &lt;code&gt;s&lt;/code&gt; reserve capacity for at least &lt;code&gt;n&lt;/code&gt; elements. This can improve performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e0d6b55d3d39023e9fb987810cee60447a287e" translate="yes" xml:space="preserve">
          <source>Suggestion: fix the function, or if necessary annotate the return value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9230912b61ce9b77640f17424369d72a748ecc" translate="yes" xml:space="preserve">
          <source>Suggestion: make the return value type-stable, even if you have to annotate it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482c6f377ae837ac3c02149a6b4cdb4b1e23e80f" translate="yes" xml:space="preserve">
          <source>Suggestion: use arrays with better-defined types, or if necessary annotate the type of individual element accesses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3db1c6165abca162a29074e2ec4bfe74fe3f7ab" translate="yes" xml:space="preserve">
          <source>Suggestion: use concrete types like &lt;code&gt;Array{T,3}&lt;/code&gt; or &lt;code&gt;Array{T,N}&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is now a parameter of &lt;code&gt;ArrayContainer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e4711b72dd222829e242696915ebeeea1aa1eb" translate="yes" xml:space="preserve">
          <source>Sum elements of &lt;code&gt;A&lt;/code&gt; over the singleton dimensions of &lt;code&gt;r&lt;/code&gt;, and write results to &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4d78b1d6a6e74f97303d7d95544bc9a4fb52bf" translate="yes" xml:space="preserve">
          <source>Sum elements of an array over the given dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f606a3a34b5ca6b62e1eb740e74a1d4c5303ed5c" translate="yes" xml:space="preserve">
          <source>Sum of the absolute values of the first &lt;code&gt;n&lt;/code&gt; elements of array &lt;code&gt;X&lt;/code&gt; with stride &lt;code&gt;incx&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfec37391a017695975d7685c5a3872ea343978b" translate="yes" xml:space="preserve">
          <source>Sum the results of calling function &lt;code&gt;f&lt;/code&gt; on each element of &lt;code&gt;itr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d22dfde69ea28bc2dfc61a862226f883f8309e6" translate="yes" xml:space="preserve">
          <source>Summary of module usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d38f288ba66773283f63e72ee13d0499ac1e0f" translate="yes" xml:space="preserve">
          <source>Summation With Integral</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c98cab7866e606328c99289ed24e339393b5ab" translate="yes" xml:space="preserve">
          <source>Sun</source>
          <target state="translated">Sun</target>
        </trans-unit>
        <trans-unit id="8ab819d7fb578810e4192ca5e319c51b238df8b8" translate="yes" xml:space="preserve">
          <source>Sun Behind Cloud</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c10f59a19251f9e5351c9dbdfc352b72440c55" translate="yes" xml:space="preserve">
          <source>Sun With Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1480394fe36756f7374cefed997e5a148ea79d" translate="yes" xml:space="preserve">
          <source>Sunflower</source>
          <target state="translated">Sunflower</target>
        </trans-unit>
        <trans-unit id="fadf71c7ea92e6416fd6d89969f8e78a115cd3c1" translate="yes" xml:space="preserve">
          <source>Sunrise</source>
          <target state="translated">Sunrise</target>
        </trans-unit>
        <trans-unit id="c13e7e7e6a43c1df0effdcfaa21536a0595e7427" translate="yes" xml:space="preserve">
          <source>Sunrise Over Mountains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc250d8444720a5a7d1523fac30a584989bdc03" translate="yes" xml:space="preserve">
          <source>Sunset Over Buildings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc62316e6ffe4dd5a974bb8bf4af7453f1461891" translate="yes" xml:space="preserve">
          <source>Superscript Eight / Superscript Digit Eight</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2984f6c66b33f83e0e16ead40192c5b50e49cf" translate="yes" xml:space="preserve">
          <source>Superscript Equals Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f530ce4fcc88959736942111c035c02abc9ca1" translate="yes" xml:space="preserve">
          <source>Superscript Five / Superscript Digit Five</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8be90f97b084d838a7d6d1e18ec32b625807d5" translate="yes" xml:space="preserve">
          <source>Superscript Four / Superscript Digit Four</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8104c1f808e09a272812d284b7657523966b8320" translate="yes" xml:space="preserve">
          <source>Superscript Latin Small Letter I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3873ff02b0504dda05f79e624b41efb67e554a" translate="yes" xml:space="preserve">
          <source>Superscript Latin Small Letter N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49c2b620343b97769db798e8194ffd45b101c38" translate="yes" xml:space="preserve">
          <source>Superscript Left Parenthesis / Superscript Opening Parenthesis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17bfd468940dcf3c53f999a2120c6fbcb51d6209" translate="yes" xml:space="preserve">
          <source>Superscript Minus / Superscript Hyphen-Minus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dedb926f349b31470fd3ded8fd6d3253317b59" translate="yes" xml:space="preserve">
          <source>Superscript Nine / Superscript Digit Nine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1d4432ea38f74fd9fa77917a87ccc852606d50" translate="yes" xml:space="preserve">
          <source>Superscript One / Superscript Digit One</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a51f04374184578e4077d11e4b0bd2db582fe20" translate="yes" xml:space="preserve">
          <source>Superscript Plus Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dcd4903e2114dda6cfd1e4424b38b3da07f1b17" translate="yes" xml:space="preserve">
          <source>Superscript Right Parenthesis / Superscript Closing Parenthesis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7d1e2d4eb0cb8596203709e246dba9f1d6d8ed" translate="yes" xml:space="preserve">
          <source>Superscript Seven / Superscript Digit Seven</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ac40e1734bb8bc7c077a0aa61e26f0fc110954" translate="yes" xml:space="preserve">
          <source>Superscript Six / Superscript Digit Six</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0bf970eb2de9ba12e66a3e43afcfcff0b87019" translate="yes" xml:space="preserve">
          <source>Superscript Three / Superscript Digit Three</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffea356037ba164ab85b9712622454a944f84967" translate="yes" xml:space="preserve">
          <source>Superscript Two / Superscript Digit Two</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd9b378d4c67f16cb5641a483a19e85ae958d32" translate="yes" xml:space="preserve">
          <source>Superscript Zero / Superscript Digit Zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5299730570b04c01bc81123a7d814f44008382e" translate="yes" xml:space="preserve">
          <source>Superset Above Subset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f438ac9effe753a07f20646d2055c5b640cc28b" translate="yes" xml:space="preserve">
          <source>Superset Above Superset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70fd40e9b30b98f4c3a414cbc4a28968f4deba3b" translate="yes" xml:space="preserve">
          <source>Superset Beside And Joined By Dash With Subset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f126cc4d2696b2a22931bbb0511f554cf35e75" translate="yes" xml:space="preserve">
          <source>Superset Beside Subset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5324308b2a19e6ef5bf3173644670cde6bc3bf1c" translate="yes" xml:space="preserve">
          <source>Superset Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e65a8a930f9a4de2d0bc065a433e9a2f7a58e70" translate="yes" xml:space="preserve">
          <source>Superset Of Above Almost Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2c049156076047dfb0f245cb9aef1a1d8acd6c" translate="yes" xml:space="preserve">
          <source>Superset Of Above Equals Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d1f5c9dd4a4818b9da76db78be48a2999fc6c7" translate="yes" xml:space="preserve">
          <source>Superset Of Above Equals Sign + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7abc8894592f65f4082b7bead1e2eaea4e10516" translate="yes" xml:space="preserve">
          <source>Superset Of Above Not Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fc3ed9108472bb01f34c97fedf7d3c682b20f3" translate="yes" xml:space="preserve">
          <source>Superset Of Above Tilde Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6793928a2897b21b9b8a9c988bd915776f6556aa" translate="yes" xml:space="preserve">
          <source>Superset Of Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37351c13ef5db0f633546f313f29f730e7eb1c2b" translate="yes" xml:space="preserve">
          <source>Superset Of Or Equal To With Dot Above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d464cc0483da2fe7a879193c8e36244e8e1bea22" translate="yes" xml:space="preserve">
          <source>Superset Of With Not Equal To / Superset Of Or Not Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72fe67e26a73867ab1bdc4b605d4de39109d2faf" translate="yes" xml:space="preserve">
          <source>Superset Of With Not Equal To / Superset Of Or Not Equal To + Variation Selector-1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f2d3fe11ce786ca38d900162e82c19bd21ebc8" translate="yes" xml:space="preserve">
          <source>Superset Preceding Solidus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c6e85c05a369d89e0deb5a666ad7102f5882bb" translate="yes" xml:space="preserve">
          <source>Superset With Dot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24374026a1f59abc557771c964e49b46fa73f626" translate="yes" xml:space="preserve">
          <source>Superset With Multiplication Sign Below</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7860d68222b15737a778e67f5c15130e115ebb32" translate="yes" xml:space="preserve">
          <source>Superset With Plus Sign Below</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c92c6b48a91cf8c814469ee5dfe09a09dd531c2" translate="yes" xml:space="preserve">
          <source>Supertype for &lt;code&gt;N&lt;/code&gt;-dimensional arrays (or array-like types) with elements of type &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;#Core.Array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; and other types are subtypes of this. See the manual section on the &lt;a href=&quot;../../manual/interfaces/index#man-interface-array-1&quot;&gt;&lt;code&gt;AbstractArray&lt;/code&gt; interface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d3c24a79b67141166155993915039c8017ca24" translate="yes" xml:space="preserve">
          <source>Supertype for &lt;code&gt;N&lt;/code&gt;-dimensional sparse arrays (or array-like types) with elements of type &lt;code&gt;Tv&lt;/code&gt; and index type &lt;code&gt;Ti&lt;/code&gt;. &lt;a href=&quot;#SparseArrays.SparseMatrixCSC&quot;&gt;&lt;code&gt;SparseMatrixCSC&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#SparseArrays.SparseVector&quot;&gt;&lt;code&gt;SparseVector&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;SuiteSparse.CHOLMOD.Sparse&lt;/code&gt; are subtypes of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5496a616cf629a444cd0293bf842e64f94c3440e" translate="yes" xml:space="preserve">
          <source>Supertype for cluster managers, which control workers processes as a cluster. Cluster managers implement how workers can be added, removed and communicated with. &lt;code&gt;SSHManager&lt;/code&gt; and &lt;code&gt;LocalManager&lt;/code&gt; are subtypes of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fca78e485a73121ac591c6a84b271b8eafecc3" translate="yes" xml:space="preserve">
          <source>Supertype for dictionary-like types with keys of type &lt;code&gt;K&lt;/code&gt; and values of type &lt;code&gt;V&lt;/code&gt;. &lt;a href=&quot;#Base.Dict&quot;&gt;&lt;code&gt;Dict&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.IdDict&quot;&gt;&lt;code&gt;IdDict&lt;/code&gt;&lt;/a&gt; and other types are subtypes of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5413d4f644b54dba9b5a5ba1f33544aca17708" translate="yes" xml:space="preserve">
          <source>Supertype for one-dimensional arrays (or array-like types) with elements of type &lt;code&gt;T&lt;/code&gt;. Alias for &lt;a href=&quot;#Core.AbstractArray&quot;&gt;&lt;code&gt;AbstractArray{T,1}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79216e42fd6a5f0e00724330f8416b04cfb5c1c8" translate="yes" xml:space="preserve">
          <source>Supertype for one-dimensional sparse arrays (or array-like types) with elements of type &lt;code&gt;Tv&lt;/code&gt; and index type &lt;code&gt;Ti&lt;/code&gt;. Alias for &lt;code&gt;AbstractSparseArray{Tv,Ti,1}&lt;/code&gt;`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0608e4989266cc8544324838f3723e04585e2ddc" translate="yes" xml:space="preserve">
          <source>Supertype for ordinal ranges with elements of type &lt;code&gt;T&lt;/code&gt; with spacing(s) of type &lt;code&gt;S&lt;/code&gt;. The steps should be always-exact multiples of &lt;a href=&quot;../numbers/index#Base.oneunit&quot;&gt;&lt;code&gt;oneunit&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;T&lt;/code&gt; should be a &quot;discrete&quot; type, which cannot have values smaller than &lt;code&gt;oneunit&lt;/code&gt;. For example, &lt;code&gt;Integer&lt;/code&gt; or &lt;code&gt;Date&lt;/code&gt; types would qualify, whereas &lt;code&gt;Float64&lt;/code&gt; would not (since this type can represent values smaller than &lt;code&gt;oneunit(Float64)&lt;/code&gt;. &lt;a href=&quot;#Base.UnitRange&quot;&gt;&lt;code&gt;UnitRange&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.StepRange&quot;&gt;&lt;code&gt;StepRange&lt;/code&gt;&lt;/a&gt;, and other types are subtypes of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3168d6d184f8d8847323c11588981dd73b92c1" translate="yes" xml:space="preserve">
          <source>Supertype for random number generators such as &lt;a href=&quot;#Random.MersenneTwister&quot;&gt;&lt;code&gt;MersenneTwister&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Random.RandomDevice&quot;&gt;&lt;code&gt;RandomDevice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb4d37bdbb86f042afa15f8007727543f6e4570" translate="yes" xml:space="preserve">
          <source>Supertype for ranges with a step size of &lt;a href=&quot;../numbers/index#Base.oneunit&quot;&gt;&lt;code&gt;oneunit(T)&lt;/code&gt;&lt;/a&gt; with elements of type &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;#Base.UnitRange&quot;&gt;&lt;code&gt;UnitRange&lt;/code&gt;&lt;/a&gt; and other types are subtypes of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3330a7842eef3834e2ac65ebcfba97571d2bff" translate="yes" xml:space="preserve">
          <source>Supertype for ranges with elements of type &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;#Base.UnitRange&quot;&gt;&lt;code&gt;UnitRange&lt;/code&gt;&lt;/a&gt; and other types are subtypes of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a8473d57b426d15a6e8cda863eb65797c32e7b" translate="yes" xml:space="preserve">
          <source>Supertype for set-like types whose elements are of type &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;#Base.Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.BitSet&quot;&gt;&lt;code&gt;BitSet&lt;/code&gt;&lt;/a&gt; and other types are subtypes of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8b296506fd1ede340a41da56c505cd754211c8" translate="yes" xml:space="preserve">
          <source>Supertype for two-dimensional arrays (or array-like types) with elements of type &lt;code&gt;T&lt;/code&gt;. Alias for &lt;a href=&quot;#Core.AbstractArray&quot;&gt;&lt;code&gt;AbstractArray{T,2}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34927b830c031f7730d9555a9e40b9b4c855c9cf" translate="yes" xml:space="preserve">
          <source>Supertype for two-dimensional sparse arrays (or array-like types) with elements of type &lt;code&gt;Tv&lt;/code&gt; and index type &lt;code&gt;Ti&lt;/code&gt;. Alias for &lt;code&gt;AbstractSparseArray{Tv,Ti,2}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c443a804d58ab08b0d84b7e520f9b8eb8d018e6c" translate="yes" xml:space="preserve">
          <source>Supertype for worker pools such as &lt;a href=&quot;#Distributed.WorkerPool&quot;&gt;&lt;code&gt;WorkerPool&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Distributed.CachingPool&quot;&gt;&lt;code&gt;CachingPool&lt;/code&gt;&lt;/a&gt;. An &lt;code&gt;AbstractWorkerPool&lt;/code&gt; should implement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d68bab1171cabb0005ae6253be5e703755584f3" translate="yes" xml:space="preserve">
          <source>Supertype operator, equivalent to &lt;code&gt;T2 &amp;lt;: T1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899f3380952e2bbffc94145e13502d9ec32044b2" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;S&lt;/code&gt; as a tuple requires at least Julia 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ad165dcf10ccec505965483fdb39539b97ad49" translate="yes" xml:space="preserve">
          <source>Support for generating random numbers. Provides &lt;a href=&quot;#Base.rand&quot;&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.randn&quot;&gt;&lt;code&gt;randn&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Random.AbstractRNG&quot;&gt;&lt;code&gt;AbstractRNG&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Random.MersenneTwister&quot;&gt;&lt;code&gt;MersenneTwister&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#Random.RandomDevice&quot;&gt;&lt;code&gt;RandomDevice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77757b08770437bd2e1aba57654a95aeb930bc38" translate="yes" xml:space="preserve">
          <source>Support for raising &lt;code&gt;Irrational&lt;/code&gt; numbers (like &lt;code&gt;ℯ&lt;/code&gt;) to a matrix was added in Julia 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58eed85d3cc323a5691376298f1c642cf2b1d37" translate="yes" xml:space="preserve">
          <source>Support for sockets. Provides &lt;a href=&quot;#Sockets.IPAddr&quot;&gt;&lt;code&gt;IPAddr&lt;/code&gt;&lt;/a&gt; and subtypes, &lt;a href=&quot;#Sockets.TCPSocket&quot;&gt;&lt;code&gt;TCPSocket&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#Sockets.UDPSocket&quot;&gt;&lt;code&gt;UDPSocket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2939e6e868c92104a4525d3fccaa1aba7aae8117" translate="yes" xml:space="preserve">
          <source>Support for text-form month parsing is also supported through the &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; characters, for abbreviated and full-length month names, respectively. By default, only English month names are supported, so &lt;code&gt;u&lt;/code&gt; corresponds to &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, etc. And &lt;code&gt;U&lt;/code&gt; corresponds to &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, etc. Similar to other name=&amp;gt;value mapping functions &lt;a href=&quot;#Dates.dayname&quot;&gt;&lt;code&gt;dayname&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Dates.monthname&quot;&gt;&lt;code&gt;monthname&lt;/code&gt;&lt;/a&gt;, custom locales can be loaded by passing in the &lt;code&gt;locale=&amp;gt;Dict{String,Int}&lt;/code&gt; mapping to the &lt;code&gt;MONTHTOVALUEABBR&lt;/code&gt; and &lt;code&gt;MONTHTOVALUE&lt;/code&gt; dicts for abbreviated and full-name month names, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ead543b06b3114ff4517ccfb78c270d10ba62f9" translate="yes" xml:space="preserve">
          <source>Supported function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bb340858997c963a541d9d266aa13222b2691a" translate="yes" xml:space="preserve">
          <source>Supported index types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e43b4b805479242bd2902efea1301055ba43ee4" translate="yes" xml:space="preserve">
          <source>Suppose the value of &lt;code&gt;$JULIA_PKGRESOLVE_ACCURACY&lt;/code&gt; is &lt;code&gt;n&lt;/code&gt;. Then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7be91f5ab4298c1c8a406623d22bbbd1013933b" translate="yes" xml:space="preserve">
          <source>Suppose we want to stop execution immediately if the square root of a negative number is taken. To do this, we can define a fussy version of the &lt;code&gt;sqrt&lt;/code&gt; function that raises an error if its argument is negative:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96c947cf38137b5f6543819dd2cddf85dea85d1" translate="yes" xml:space="preserve">
          <source>Suppose we wanted to make the constructor call &lt;code&gt;Point(1,2.5)&lt;/code&gt; work by &quot;promoting&quot; the integer value &lt;code&gt;1&lt;/code&gt; to the floating-point value &lt;code&gt;1.0&lt;/code&gt;. The simplest way to achieve this is to define the following additional outer constructor method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec51423103ee76d239e2db02b64cd5e5d54bd6dd" translate="yes" xml:space="preserve">
          <source>Suppose you call a function like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e31f28cfa61c430f0678908e4c1e7dab7ebb3a5" translate="yes" xml:space="preserve">
          <source>Suppose you want to do something a bit more complicated and use the name of a file in the variable &lt;code&gt;file&lt;/code&gt; as an argument to a command. You can use &lt;code&gt;$&lt;/code&gt; for interpolation much as you would in a string literal (see &lt;a href=&quot;https://docs.julialang.org/en/v1.2.0/devdocs/ast/#Strings-1&quot;&gt;Strings&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a051e98d8d71e37b46dbe98d45c2cc9c61d69cca" translate="yes" xml:space="preserve">
          <source>Suppose you were willing to allocate a temporary for the computation (which would eliminate most of the point of making &lt;code&gt;*=&lt;/code&gt; work in-place); if you took advantage of the mutability of &lt;code&gt;x&lt;/code&gt;, then this function would behave differently for mutable vs. immutable inputs. In particular, for immutable &lt;code&gt;x&lt;/code&gt;, after the call you'd have (in general) &lt;code&gt;y != x&lt;/code&gt;, but for mutable &lt;code&gt;x&lt;/code&gt; you'd have &lt;code&gt;y == x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab646baedc9dd22f188651743d4f15248da82d7" translate="yes" xml:space="preserve">
          <source>Surface Integral</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17daa74b4ef9134312485788d9f1641a90336c0f" translate="yes" xml:space="preserve">
          <source>Surfer</source>
          <target state="translated">Surfer</target>
        </trans-unit>
        <trans-unit id="c8c7bd468d1aa59989cc45f0885429f1cf6ed2c3" translate="yes" xml:space="preserve">
          <source>Surround text that should be displayed as mathematics using $\LaTeX$ syntax with double backticks, &lt;code&gt;``&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a7b6e5715227886b18e3f8f91b9c36dfc5369e" translate="yes" xml:space="preserve">
          <source>Surround text that should be displayed exactly as written with single backticks, &lt;code&gt;`&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bffe5f5bc6bf97e1966b45cd2db4c1bcc58652" translate="yes" xml:space="preserve">
          <source>Surround words with one asterisk, &lt;code&gt;*&lt;/code&gt;, to display the enclosed text in italics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1145c55802eb89506200bd2ff9a16655c333b8" translate="yes" xml:space="preserve">
          <source>Surround words with two asterisks, &lt;code&gt;**&lt;/code&gt;, to display the enclosed text in boldface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e2d663550b8401fc89f3e8e446533086519e41" translate="yes" xml:space="preserve">
          <source>Sushi</source>
          <target state="translated">Sushi</target>
        </trans-unit>
        <trans-unit id="4b69a79697ed3f157a8f14b72eb302695d487ae6" translate="yes" xml:space="preserve">
          <source>Suspends execution for &lt;code&gt;s&lt;/code&gt; seconds. This function does not yield to Julia's scheduler and therefore blocks the Julia thread that it is running on for the duration of the sleep time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973888c30a491df5bbae163d9bc214c808d088f6" translate="yes" xml:space="preserve">
          <source>Suspension Railway</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d18f43d49f2f47456648385efbfe0cb4d0c149" translate="yes" xml:space="preserve">
          <source>Swimmer</source>
          <target state="translated">Swimmer</target>
        </trans-unit>
        <trans-unit id="3e44c920427e845df4958295eb8c3045b55fcfd5" translate="yes" xml:space="preserve">
          <source>Switch</source>
          <target state="translated">Switch</target>
        </trans-unit>
        <trans-unit id="a4abe2e6561ee4e0b3b06b8ee33d70d04583aff2" translate="yes" xml:space="preserve">
          <source>Switch to the given task. The first time a task is switched to, the task's function is called with no arguments. On subsequent switches, &lt;code&gt;arg&lt;/code&gt; is returned from the task's last call to &lt;code&gt;yieldto&lt;/code&gt;. This is a low-level call that only switches tasks, not considering states or scheduling in any way. Its use is discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8347671d999d16381b5c0feb325df8120cc6f75d" translate="yes" xml:space="preserve">
          <source>Switch to the scheduler to allow another scheduled task to run. A task that calls this function is still runnable, and will be restarted immediately if there are no other runnable tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="22ad664e9eb98b75a73333b2b2395fc4b52e6fc9" translate="yes" xml:space="preserve">
          <source>Symbols</source>
          <target state="translated">Symbols</target>
        </trans-unit>
        <trans-unit id="7ac5aec6d1effd8a82fbef4c4c88712086df0e89" translate="yes" xml:space="preserve">
          <source>Symmetric matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0921e5bff6794f52edd645b52ae45f6f732f4a" translate="yes" xml:space="preserve">
          <source>Symmetric real tridiagonal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca10a61f0da269816a5c9d408bb8aa1f417f179d" translate="yes" xml:space="preserve">
          <source>Symmetric tridiagonal matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="df02dad62c7357a982f0b8b91e3712d365096846" translate="yes" xml:space="preserve">
          <source>Syntax / Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6effb9dc1e87cae1ff2fb15208ededa0c5b6cc" translate="yes" xml:space="preserve">
          <source>Syntax Conflicts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3655179938bda8b64c156fa5a6ab6ed93c568007" translate="yes" xml:space="preserve">
          <source>Syntax Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b8645cb3d5d028f81e3ff546436dea1e75203f" translate="yes" xml:space="preserve">
          <source>Syringe</source>
          <target state="translated">Syringe</target>
        </trans-unit>
        <trans-unit id="eea5f6535cf1464538bf913c29432e06b44c8a00" translate="yes" xml:space="preserve">
          <source>Sys</source>
          <target state="translated">Sys</target>
        </trans-unit>
        <trans-unit id="5b15446e1a2df96945de25b580d31fd7781e5677" translate="yes" xml:space="preserve">
          <source>Sys.ARCH</source>
          <target state="translated">Sys.ARCH</target>
        </trans-unit>
        <trans-unit id="ea549709c8d36e5b671637c93ae8042e833fb6c7" translate="yes" xml:space="preserve">
          <source>Sys.BINDIR</source>
          <target state="translated">Sys.BINDIR</target>
        </trans-unit>
        <trans-unit id="cbd1d907a3f81eed0265ef8833d42ad375912b5f" translate="yes" xml:space="preserve">
          <source>Sys.CPU_THREADS</source>
          <target state="translated">Sys.CPU_THREADS</target>
        </trans-unit>
        <trans-unit id="15b4b8619f588da9848eb54f4bf8375e81de8ba4" translate="yes" xml:space="preserve">
          <source>Sys.KERNEL</source>
          <target state="translated">Sys.KERNEL</target>
        </trans-unit>
        <trans-unit id="ddf91742e9bfe2e15760cc0904b02e0241b87da2" translate="yes" xml:space="preserve">
          <source>Sys.MACHINE</source>
          <target state="translated">Sys.MACHINE</target>
        </trans-unit>
        <trans-unit id="796735660de3fec9cc6a7ccbfddbef088428a267" translate="yes" xml:space="preserve">
          <source>Sys.WORD_SIZE</source>
          <target state="translated">Sys.WORD_SIZE</target>
        </trans-unit>
        <trans-unit id="375901ce98140a171ed6632260dde67cf6259438" translate="yes" xml:space="preserve">
          <source>Sys.free_memory()</source>
          <target state="translated">Sys.free_memory()</target>
        </trans-unit>
        <trans-unit id="7fa56fc341a0cdcf2e078d2b91be8fdea785a838" translate="yes" xml:space="preserve">
          <source>Sys.get_process_title()</source>
          <target state="translated">Sys.get_process_title()</target>
        </trans-unit>
        <trans-unit id="39dc0ce5e6f1d0c9e651677c3e12e7f1757cbcba" translate="yes" xml:space="preserve">
          <source>Sys.isapple()</source>
          <target state="translated">Sys.isapple()</target>
        </trans-unit>
        <trans-unit id="03119912a2c03ee07527224e883b39a922bdadc4" translate="yes" xml:space="preserve">
          <source>Sys.isbsd()</source>
          <target state="translated">Sys.isbsd()</target>
        </trans-unit>
        <trans-unit id="22a24965517e80c9d1727c9f7fc5d84adf3ce605" translate="yes" xml:space="preserve">
          <source>Sys.isdragonfly()</source>
          <target state="translated">Sys.isdragonfly()</target>
        </trans-unit>
        <trans-unit id="27a4af1930d284707ac8426c9dfb34043828ecd1" translate="yes" xml:space="preserve">
          <source>Sys.isfreebsd()</source>
          <target state="translated">Sys.isfreebsd()</target>
        </trans-unit>
        <trans-unit id="a2965d91481a0bbc8f3ee0bd36632e37c4e173eb" translate="yes" xml:space="preserve">
          <source>Sys.islinux()</source>
          <target state="translated">Sys.islinux()</target>
        </trans-unit>
        <trans-unit id="a0e775e7d914f8aac6d1a328e138a3a3c3c2a11d" translate="yes" xml:space="preserve">
          <source>Sys.isnetbsd()</source>
          <target state="translated">Sys.isnetbsd()</target>
        </trans-unit>
        <trans-unit id="a4cd0ca152f09ceeda470eb8f4454f9c05f7de4e" translate="yes" xml:space="preserve">
          <source>Sys.isopenbsd()</source>
          <target state="translated">Sys.isopenbsd()</target>
        </trans-unit>
        <trans-unit id="44d1250110223056dac1d302e658cb39d616dc4b" translate="yes" xml:space="preserve">
          <source>Sys.isunix()</source>
          <target state="translated">Sys.isunix()</target>
        </trans-unit>
        <trans-unit id="1d8055070eda84bf6013fc0792786c9e9266c1f4" translate="yes" xml:space="preserve">
          <source>Sys.iswindows()</source>
          <target state="translated">Sys.iswindows()</target>
        </trans-unit>
        <trans-unit id="029e67926c34e0658c17d66ac464b0e6d925adb6" translate="yes" xml:space="preserve">
          <source>Sys.set_process_title()</source>
          <target state="translated">Sys.set_process_title()</target>
        </trans-unit>
        <trans-unit id="c06dd39312f9e01848f09c4e56f06f3a5d14a622" translate="yes" xml:space="preserve">
          <source>Sys.total_memory()</source>
          <target state="translated">Sys.total_memory()</target>
        </trans-unit>
        <trans-unit id="235f7cf2ef4a9196211511f0a01512f001e55ff9" translate="yes" xml:space="preserve">
          <source>Sys.windows_version()</source>
          <target state="translated">Sys.windows_version()</target>
        </trans-unit>
        <trans-unit id="bc0792d8dc81e8aa30b987246a5ce97c40cd6833" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="translated">System</target>
        </trans-unit>
        <trans-unit id="47e68638ef3b94e3c34563e1179f97e827fb9bec" translate="yes" xml:space="preserve">
          <source>SystemError</source>
          <target state="translated">SystemError</target>
        </trans-unit>
        <trans-unit id="14398aaa3709921f04833f4eb9d880847302976e" translate="yes" xml:space="preserve">
          <source>T-Shirt</source>
          <target state="translated">T-Shirt</target>
        </trans-unit>
        <trans-unit id="5e3f230d5d2963950b06367aa593d1b64588e341" translate="yes" xml:space="preserve">
          <source>TR</source>
          <target state="translated">TR</target>
        </trans-unit>
        <trans-unit id="eb8b89e8c468a2f2b0bf3f62ac7419a0270f3b4b" translate="yes" xml:space="preserve">
          <source>Tab completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b315a7c84a121cc5728c13d37733f905c0d329" translate="yes" xml:space="preserve">
          <source>Tab completion can also help completing fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d8de29ef10f4e4538a1cb749404c8f188732bc" translate="yes" xml:space="preserve">
          <source>Tab completion can help with investigation of the available methods matching the input arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec37058ab8c801341a2164838991c7b36baf606c" translate="yes" xml:space="preserve">
          <source>Tab completion sequence(s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193daf137ed8b89de36d47c3df5fd8f66c0e1d14" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="translated">Tables</target>
        </trans-unit>
        <trans-unit id="f6142c5e7f7b37b008f0934abccaace0a6f434f0" translate="yes" xml:space="preserve">
          <source>Take a raw file descriptor wrap it in a Julia-aware IO type, and take ownership of the fd handle. Call &lt;code&gt;open(Libc.dup(fd))&lt;/code&gt; to avoid the ownership capture of the original handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028c707e8657f2ad234b365e0bd3fd169e21c888" translate="yes" xml:space="preserve">
          <source>Take a snapshot of the current state of the repository &lt;code&gt;repo&lt;/code&gt;, storing the current HEAD, index, and any uncommitted work. The output &lt;code&gt;State&lt;/code&gt; can be used later during a call to &lt;a href=&quot;#LibGit2.restore&quot;&gt;&lt;code&gt;restore&lt;/code&gt;&lt;/a&gt; to return the repository to the snapshotted state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417b76383d90f18e7280ea7c153cd0ec7f4143f1" translate="yes" xml:space="preserve">
          <source>Take the expression &lt;code&gt;x&lt;/code&gt; and return an equivalent expression with all macros removed (expanded) for executing in module &lt;code&gt;m&lt;/code&gt;. The &lt;code&gt;recursive&lt;/code&gt; keyword controls whether deeper levels of nested macros are also expanded. This is demonstrated in the example below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28f2931bbad698b16249ed36b449a3b14fb39b6" translate="yes" xml:space="preserve">
          <source>Take the given &lt;code&gt;Date&lt;/code&gt; and return the number of days since the rounding epoch (&lt;code&gt;0000-01-01T00:00:00&lt;/code&gt;) as an &lt;a href=&quot;../../base/numbers/index#Core.Int64&quot;&gt;&lt;code&gt;Int64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c44da3302da9152e79b3157eb63204c185052ad" translate="yes" xml:space="preserve">
          <source>Take the given &lt;code&gt;DateTime&lt;/code&gt; and return the number of Julian calendar days since the julian epoch &lt;code&gt;-4713-11-24T12:00:00&lt;/code&gt; as a &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ce37312d945672925e211e70623bf1d7a6b2f2" translate="yes" xml:space="preserve">
          <source>Take the given &lt;code&gt;DateTime&lt;/code&gt; and return the number of milliseconds since the rounding epoch (&lt;code&gt;0000-01-01T00:00:00&lt;/code&gt;) as an &lt;a href=&quot;../../base/numbers/index#Core.Int64&quot;&gt;&lt;code&gt;Int64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90d8b1442620b2460ac29cdc4af299f9431cbe7" translate="yes" xml:space="preserve">
          <source>Take the given &lt;code&gt;DateTime&lt;/code&gt; and return the number of seconds since the unix epoch &lt;code&gt;1970-01-01T00:00:00&lt;/code&gt; as a &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e8457357f9105fd0f6a09d1e22e555734202d0" translate="yes" xml:space="preserve">
          <source>Take the inverse of &lt;code&gt;x&lt;/code&gt; modulo &lt;code&gt;m&lt;/code&gt;: &lt;code&gt;y&lt;/code&gt; such that $x y = 1 \pmod m$, with $div(x,y) = 0$. This is undefined for $m = 0$, or if $gcd(x,m) \neq 1$.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac65d0f278e58fa9f0d56cc7d33997e42273d3be" translate="yes" xml:space="preserve">
          <source>Take the number of Julian calendar days since epoch &lt;code&gt;-4713-11-24T12:00:00&lt;/code&gt; and return the corresponding &lt;code&gt;DateTime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651f47947b58a46afe82a3eb965d1ee5bbbb30a9" translate="yes" xml:space="preserve">
          <source>Take the number of Rata Die days since epoch &lt;code&gt;0000-12-31T00:00:00&lt;/code&gt; and return the corresponding &lt;code&gt;DateTime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4192143b648e1063359b65a375c87d5eaac8a3f" translate="yes" xml:space="preserve">
          <source>Take the number of days since the rounding epoch (&lt;code&gt;0000-01-01T00:00:00&lt;/code&gt;) and return the corresponding &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff629efbee246780761d817ac2092dd33354876" translate="yes" xml:space="preserve">
          <source>Take the number of milliseconds since the rounding epoch (&lt;code&gt;0000-01-01T00:00:00&lt;/code&gt;) and return the corresponding &lt;code&gt;DateTime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdec858b0f40b88512aa7f1bc4fef283de2775ca" translate="yes" xml:space="preserve">
          <source>Take the number of seconds since unix epoch &lt;code&gt;1970-01-01T00:00:00&lt;/code&gt; and convert to the corresponding &lt;code&gt;DateTime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cf08645b24660e17958eeaca8edbd4e94b3d71" translate="yes" xml:space="preserve">
          <source>Taken to its extreme, pre-allocation can make your code uglier, so performance measurements and some judgment may be required. However, for &quot;vectorized&quot; (element-wise) functions, the convenient syntax &lt;code&gt;x .= f.(y)&lt;/code&gt; can be used for in-place operations with fused loops and no temporary arrays (see the &lt;a href=&quot;../functions/index#man-vectorized-1&quot;&gt;dot syntax for vectorizing functions&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068e523ef955dcbff5853a974467b5a1dfd337be" translate="yes" xml:space="preserve">
          <source>Taken together, &lt;code&gt;whence&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; uniquely identify a reference across all workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9377a78118014a32619a7a3fae9e2c93076858" translate="yes" xml:space="preserve">
          <source>Takes a &lt;code&gt;StackTrace&lt;/code&gt; (a vector of &lt;code&gt;StackFrames&lt;/code&gt;) and a function name (a &lt;code&gt;Symbol&lt;/code&gt;) and removes the &lt;code&gt;StackFrame&lt;/code&gt; specified by the function name from the &lt;code&gt;StackTrace&lt;/code&gt; (also removing all frames above the specified function). Primarily used to remove &lt;code&gt;StackTraces&lt;/code&gt; functions from the &lt;code&gt;StackTrace&lt;/code&gt; prior to returning it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d364a68aa146d3f3bf91f5e5cefd025c8e63eb18" translate="yes" xml:space="preserve">
          <source>Takes one or two &lt;code&gt;BroadcastStyle&lt;/code&gt;s and combines them using &lt;a href=&quot;#Base.Broadcast.BroadcastStyle&quot;&gt;&lt;code&gt;BroadcastStyle&lt;/code&gt;&lt;/a&gt; to determine a common &lt;code&gt;BroadcastStyle&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5b4f7c8c50f94fb9b9fa5a4c40c9fc953fc239" translate="yes" xml:space="preserve">
          <source>Takes the expression &lt;code&gt;x&lt;/code&gt; and returns an equivalent expression in lowered form for executing in module &lt;code&gt;m&lt;/code&gt;. See also &lt;a href=&quot;#Base.code_lowered&quot;&gt;&lt;code&gt;code_lowered&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f75dfe8be08da7413ff205308db3988d48c238" translate="yes" xml:space="preserve">
          <source>Taking any locks: C code you call out to may use locks internally, (for example, it is not problematic to call &lt;code&gt;malloc&lt;/code&gt;, even though most implementations require locks internally) but don't attempt to hold or acquire any while executing Julia code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c204d1420d355840b7090b04468d71687143fa6" translate="yes" xml:space="preserve">
          <source>Tanabata Tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540da3c8235d6a0dd4fb058287e70d93a6ac769f" translate="yes" xml:space="preserve">
          <source>Tangerine</source>
          <target state="translated">Tangerine</target>
        </trans-unit>
        <trans-unit id="7e55dab266b437d3555af520a2b5749154eb13c2" translate="yes" xml:space="preserve">
          <source>Task states</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090ec5f560fc50377fcd95e5cda128e91b276e98" translate="yes" xml:space="preserve">
          <source>Tasks</source>
          <target state="translated">Tasks</target>
        </trans-unit>
        <trans-unit id="0b35cd483f5048f80cbf6983b2b06a9cd32bcd14" translate="yes" xml:space="preserve">
          <source>Tasks (aka Coroutines)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3ca43deba3d5d7f0127736b100d3e238341ae0" translate="yes" xml:space="preserve">
          <source>Tasks and events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eab10a59a1438147c2e463f755d257993fd8a07" translate="yes" xml:space="preserve">
          <source>Tasks are a control flow feature that allows computations to be suspended and resumed in a flexible manner. This feature is sometimes called by other names, such as symmetric coroutines, lightweight threads, cooperative multitasking, or one-shot continuations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb3658baf2d7e7d43b5b8f372fd5ca23bdc053a" translate="yes" xml:space="preserve">
          <source>Tasks have a &lt;code&gt;state&lt;/code&gt; field that describes their execution status. A &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt;&lt;code&gt;state&lt;/code&gt; is one of the following symbols:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e606e056ade44a820632a75114e5367860a0b9" translate="yes" xml:space="preserve">
          <source>Taurus</source>
          <target state="translated">Taurus</target>
        </trans-unit>
        <trans-unit id="82e2b91027511aadd8b52aa9401729c10793ba39" translate="yes" xml:space="preserve">
          <source>Taxi</source>
          <target state="translated">Taxi</target>
        </trans-unit>
        <trans-unit id="0a57f37badaa7ec48014346cc98c84cac7d2ade4" translate="yes" xml:space="preserve">
          <source>Teacup Without Handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e757d58b37dccc7e4c0b2a497f65a5ed9d48db3" translate="yes" xml:space="preserve">
          <source>Tear-Off Calendar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b36b5c8399292bab447511d6002f7a7d4e7be9ba" translate="yes" xml:space="preserve">
          <source>Technically, the &lt;code&gt;MIME&quot;mime&quot;&lt;/code&gt; macro defines a singleton type for the given &lt;code&gt;mime&lt;/code&gt; string, which allows us to exploit Julia's dispatch mechanisms in determining how to display objects of any given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8591fccea0433d35b0f909dc027997ba9cf40af" translate="yes" xml:space="preserve">
          <source>Telephone Receiver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdcfe42f30940ceb992fdf61a9d918ee098d622" translate="yes" xml:space="preserve">
          <source>Telephone Recorder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b83a241ff8a2dcd5e8a0e8480a8c3a13d035b9" translate="yes" xml:space="preserve">
          <source>Telescope</source>
          <target state="translated">Telescope</target>
        </trans-unit>
        <trans-unit id="a77b1903c8e3b2f68e74c12f0e476b3e4533624b" translate="yes" xml:space="preserve">
          <source>Television</source>
          <target state="translated">Television</target>
        </trans-unit>
        <trans-unit id="3024b128d3cb0369c884d0466a1f023cd5ca5d2d" translate="yes" xml:space="preserve">
          <source>Tells the compiler to apply the polyhedral optimizer Polly to a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c8638d126af0aea69ce9d89f262926c474dc0b" translate="yes" xml:space="preserve">
          <source>Tells the compiler to inline a function while retaining the caller's inbounds context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f664957d0ea8b87df32ae92b4fd24aa1a46ea0d6" translate="yes" xml:space="preserve">
          <source>Temporarily change the current working directory to &lt;code&gt;dir&lt;/code&gt;, apply function &lt;code&gt;f&lt;/code&gt; and finally return to the original directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5368df43ad530996bb634ca556da7a94b51b1f83" translate="yes" xml:space="preserve">
          <source>Temporarily protect the given objects from being garbage collected, even if they would otherwise be unreferenced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa6cf11b9fd650712f5d0d45e4ebbfbd3c41157" translate="yes" xml:space="preserve">
          <source>Tennis Racquet And Ball</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae12d19e86e1dd6bdd687f86d4bf2b6b0796fe8" translate="yes" xml:space="preserve">
          <source>Tent</source>
          <target state="translated">Tent</target>
        </trans-unit>
        <trans-unit id="e78f2b53804e241d64d7b89461c2a0d69af83b51" translate="yes" xml:space="preserve">
          <source>TerminalMenus</source>
          <target state="translated">TerminalMenus</target>
        </trans-unit>
        <trans-unit id="13fa61ab6513a29d350b01bb431ceafe6fa30f37" translate="yes" xml:space="preserve">
          <source>TerminalMenus is a submodule of the Julia REPL and enables small, low-profile interactive menus in the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2139b2bddeeaa577530e84c69430b174701f95a8" translate="yes" xml:space="preserve">
          <source>Test sets can also be nested:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905795e622786e111cc0f710b821ee73ef40ef36" translate="yes" xml:space="preserve">
          <source>Test that a factorization of a matrix succeeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b044b22b39c04d0d12ff81df1380d3e1a16e02ee" translate="yes" xml:space="preserve">
          <source>Test whether &lt;code&gt;A&lt;/code&gt; is lower triangular starting from the &lt;code&gt;k&lt;/code&gt;th superdiagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cf2b6626c76618b63816a9d2821ac9a2e3d9dd" translate="yes" xml:space="preserve">
          <source>Test whether &lt;code&gt;A&lt;/code&gt; is upper triangular starting from the &lt;code&gt;k&lt;/code&gt;th superdiagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98fd1b482df7fb574b54488f598a98d5212dc3a9" translate="yes" xml:space="preserve">
          <source>Test whether &lt;code&gt;n&lt;/code&gt; is a power of two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c9d85a5238374f74460ae2f5d8d739f24f5e58" translate="yes" xml:space="preserve">
          <source>Test whether &lt;code&gt;x&lt;/code&gt; is less than &lt;code&gt;y&lt;/code&gt;, according to a fixed total order. &lt;code&gt;isless&lt;/code&gt; is not defined on all pairs of values &lt;code&gt;(x, y)&lt;/code&gt;. However, if it is defined, it is expected to satisfy the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e089adb509ccd09b24baf13faa8a1eebdb92d73" translate="yes" xml:space="preserve">
          <source>Test whether &lt;code&gt;x&lt;/code&gt; is numerically equal to some integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129659df829e85df63605534482b69287911ce83" translate="yes" xml:space="preserve">
          <source>Test whether &lt;code&gt;x&lt;/code&gt; or all its elements are numerically equal to some real number including infinities and NaNs. &lt;code&gt;isreal(x)&lt;/code&gt; is true if &lt;code&gt;isequal(x, real(x))&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600f2a45d487a92b3e1acfc026b5358d6258b900" translate="yes" xml:space="preserve">
          <source>Test whether a character belongs to the ASCII character set, or whether this is true for all elements of a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3201c5d4b7bfd8db4e7a4f29a3f69497556eca" translate="yes" xml:space="preserve">
          <source>Test whether a character is a letter. A character is classified as a letter if it belongs to the Unicode general category Letter, i.e. a character whose category code begins with 'L'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b813a818e8d7c67e7e9a9f0231fbac7c47fefadd" translate="yes" xml:space="preserve">
          <source>Test whether a character is a valid hexadecimal digit. Note that this does not include &lt;code&gt;x&lt;/code&gt; (as in the standard &lt;code&gt;0x&lt;/code&gt; prefix).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0cacc8325a8d7f460c1842e48e751e6577dc0aa" translate="yes" xml:space="preserve">
          <source>Test whether a floating point number is not a number (NaN).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7419a87e49114034dc9b13f27d841429ec6cc7c" translate="yes" xml:space="preserve">
          <source>Test whether a floating point number is subnormal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab2650250d6d0753ef232f30dc775ab55d17e25" translate="yes" xml:space="preserve">
          <source>Test whether a matrix is Hermitian.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b9f1f281541be3d753c0180e9a9b9c68a4213c" translate="yes" xml:space="preserve">
          <source>Test whether a matrix is diagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10ee2b732be6df553fcdf2c02967046d343062a" translate="yes" xml:space="preserve">
          <source>Test whether a matrix is positive definite (and Hermitian) by trying to perform a Cholesky factorization of &lt;code&gt;A&lt;/code&gt;, overwriting &lt;code&gt;A&lt;/code&gt; in the process. See also &lt;a href=&quot;#LinearAlgebra.isposdef&quot;&gt;&lt;code&gt;isposdef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348072f52243282048adc6be8377b4069538c3e2" translate="yes" xml:space="preserve">
          <source>Test whether a matrix is positive definite (and Hermitian) by trying to perform a Cholesky factorization of &lt;code&gt;A&lt;/code&gt;. See also &lt;a href=&quot;#LinearAlgebra.isposdef!&quot;&gt;&lt;code&gt;isposdef!&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07adbca0475dd6e20bdd50fc2143d233a16e3c32" translate="yes" xml:space="preserve">
          <source>Test whether a matrix is symmetric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3599ca56d6716dfc1dda935750874c488e247ef1" translate="yes" xml:space="preserve">
          <source>Test whether a number is finite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73368aa2af01f69082a351e93d003d22094d90ad" translate="yes" xml:space="preserve">
          <source>Test whether a number is infinite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d5538dd4fb443f30fc719de96fea5e3c4be074" translate="yes" xml:space="preserve">
          <source>Test whether a vector is in sorted order. The &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;rev&lt;/code&gt; keywords modify what order is considered to be sorted just as they do for &lt;a href=&quot;#Base.sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042172a78d48aeda17bafb91d25140f851ffb91a" translate="yes" xml:space="preserve">
          <source>Test whether all elements of a boolean collection are &lt;code&gt;true&lt;/code&gt;, returning &lt;code&gt;false&lt;/code&gt; as soon as the first &lt;code&gt;false&lt;/code&gt; value in &lt;code&gt;itr&lt;/code&gt; is encountered (short-circuiting).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c60c5c1f0ceba07eb9c4e3e6adeed9269c406c" translate="yes" xml:space="preserve">
          <source>Test whether all values in &lt;code&gt;A&lt;/code&gt; along the singleton dimensions of &lt;code&gt;r&lt;/code&gt; are &lt;code&gt;true&lt;/code&gt;, and write results to &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3d64b16b12423728af4949449874717f8930e1" translate="yes" xml:space="preserve">
          <source>Test whether an I/O stream is at end-of-file. If the stream is not yet exhausted, this function will block to wait for more data if necessary, and then return &lt;code&gt;false&lt;/code&gt;. Therefore it is always safe to read one byte after seeing &lt;code&gt;eof&lt;/code&gt; return &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;eof&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; as long as buffered data is still available, even if the remote end of a connection is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e4f6b06e3064db079558e13017dc87dfe1fa0e" translate="yes" xml:space="preserve">
          <source>Test whether any elements of a boolean collection are &lt;code&gt;true&lt;/code&gt;, returning &lt;code&gt;true&lt;/code&gt; as soon as the first &lt;code&gt;true&lt;/code&gt; value in &lt;code&gt;itr&lt;/code&gt; is encountered (short-circuiting).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e348af6e654acbf2a94a256de0eb0dbfdadfb336" translate="yes" xml:space="preserve">
          <source>Test whether any values in &lt;code&gt;A&lt;/code&gt; along the singleton dimensions of &lt;code&gt;r&lt;/code&gt; are &lt;code&gt;true&lt;/code&gt;, and write results to &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd46b89139e604585bd7adc7fd76ca1664e06ca" translate="yes" xml:space="preserve">
          <source>Test whether evaluating &lt;code&gt;expr&lt;/code&gt; results in &lt;a href=&quot;../../base/io-network/index#Base.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; output that contains the &lt;code&gt;msg&lt;/code&gt; string or matches the &lt;code&gt;msg&lt;/code&gt; regular expression. If &lt;code&gt;msg&lt;/code&gt; is a boolean function, tests whether &lt;code&gt;msg(output)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;msg&lt;/code&gt; is a tuple or array, checks that the error output contains/matches each item in &lt;code&gt;msg&lt;/code&gt;. Returns the result of evaluating &lt;code&gt;expr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c503325cf6d409b8a3c8deb8bb14aeb0c9c653" translate="yes" xml:space="preserve">
          <source>Test whether evaluating &lt;code&gt;expr&lt;/code&gt; results in empty &lt;a href=&quot;../../base/io-network/index#Base.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; output (no warnings or other messages). Returns the result of evaluating &lt;code&gt;expr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb141979c927fd73f20cd08901b19019dd16fdc" translate="yes" xml:space="preserve">
          <source>Test whether string &lt;code&gt;a&lt;/code&gt; comes before string &lt;code&gt;b&lt;/code&gt; in alphabetical order (technically, in lexicographical order by Unicode code points).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1d2d0bea1baef660017807a8fc1e76d51825f5" translate="yes" xml:space="preserve">
          <source>Test whether the bits of &lt;code&gt;val&lt;/code&gt; indexed by &lt;code&gt;flag&lt;/code&gt; are set (&lt;code&gt;1&lt;/code&gt;) or unset (&lt;code&gt;0&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c61a2f3d90dc00f68f5e2ed78c218e3afa629e" translate="yes" xml:space="preserve">
          <source>Test whether the given array has a value associated with index &lt;code&gt;i&lt;/code&gt;. Return &lt;code&gt;false&lt;/code&gt; if the index is out of bounds, or has an undefined reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beda63ee049bff8ccbc0434c5189adc1f6390d8f" translate="yes" xml:space="preserve">
          <source>Test whether two strings are equal character by character (technically, Unicode code point by code point).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf06dc89873a4ef4739014da9b0503ac82ea142" translate="yes" xml:space="preserve">
          <source>Test-and-test-and-set spin locks are quickest up to about 30ish contending threads. If you have more contention than that, perhaps a lock is the wrong way to synchronize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d37dbc036f72363555168a219582cc080650c2c" translate="yes" xml:space="preserve">
          <source>Test.@inferred</source>
          <target state="translated">Test.@inferred</target>
        </trans-unit>
        <trans-unit id="67c3de69a1559a69f4d736c324dbd0345e8ce841" translate="yes" xml:space="preserve">
          <source>Test.@test</source>
          <target state="translated">Test.@test</target>
        </trans-unit>
        <trans-unit id="bd238279fd968d439f9885d950b9239d42041d37" translate="yes" xml:space="preserve">
          <source>Test.@test_broken</source>
          <target state="translated">Test.@test_broken</target>
        </trans-unit>
        <trans-unit id="77f427edbc1109c9ae775e8fe246045b182ad14f" translate="yes" xml:space="preserve">
          <source>Test.@test_deprecated</source>
          <target state="translated">Test.@test_deprecated</target>
        </trans-unit>
        <trans-unit id="5f31db08afdef0dd5283f2187bca919c2925c8f7" translate="yes" xml:space="preserve">
          <source>Test.@test_logs</source>
          <target state="translated">Test.@test_logs</target>
        </trans-unit>
        <trans-unit id="de547b50f8053308f0a2ee21b90aaae3dcceb9ad" translate="yes" xml:space="preserve">
          <source>Test.@test_nowarn</source>
          <target state="translated">Test.@test_nowarn</target>
        </trans-unit>
        <trans-unit id="615ef519b12005068f8a41a5b369ca5e1c35c1df" translate="yes" xml:space="preserve">
          <source>Test.@test_skip</source>
          <target state="translated">Test.@test_skip</target>
        </trans-unit>
        <trans-unit id="95afc1bc6b103ad5f46190e8654549af904b5ca5" translate="yes" xml:space="preserve">
          <source>Test.@test_throws</source>
          <target state="translated">Test.@test_throws</target>
        </trans-unit>
        <trans-unit id="9d03989391caa1d6637c00c4e3593a97718e2d0c" translate="yes" xml:space="preserve">
          <source>Test.@test_warn</source>
          <target state="translated">Test.@test_warn</target>
        </trans-unit>
        <trans-unit id="9c32cdd553427e36cbe90d4bd95ba370b53cfa1f" translate="yes" xml:space="preserve">
          <source>Test.@testset</source>
          <target state="translated">Test.@testset</target>
        </trans-unit>
        <trans-unit id="066c25bc74518d73302b5533ce6478389885f805" translate="yes" xml:space="preserve">
          <source>Test.finish()</source>
          <target state="translated">Test.finish()</target>
        </trans-unit>
        <trans-unit id="631cdc0a519d0e288b565285a0850351da1807ff" translate="yes" xml:space="preserve">
          <source>Test.get_testset()</source>
          <target state="translated">Test.get_testset()</target>
        </trans-unit>
        <trans-unit id="faa7d1071b0518cdce8349dea77288299aaf1de4" translate="yes" xml:space="preserve">
          <source>Test.get_testset_depth()</source>
          <target state="translated">Test.get_testset_depth()</target>
        </trans-unit>
        <trans-unit id="c13bc73ec3123a7311ed203c0f38cc895a803bbc" translate="yes" xml:space="preserve">
          <source>Test.record()</source>
          <target state="translated">Test.record()</target>
        </trans-unit>
        <trans-unit id="cfa7ab2b3a16142765d21a4e0e0bb623e5059861" translate="yes" xml:space="preserve">
          <source>Testing Base Julia</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4987ea8354d4ae570352dab5aa6d2a2a221c5e60" translate="yes" xml:space="preserve">
          <source>Testing log events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f285f003655f9f610bc2da7f8c3424ca3aeec50" translate="yes" xml:space="preserve">
          <source>Tests if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14917cac8a358ec6de88c1ed38efe9ab513ca635" translate="yes" xml:space="preserve">
          <source>Tests that the call expression &lt;code&gt;f(x)&lt;/code&gt; returns a value of the same type inferred by the compiler. It is useful to check for type stability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51e24e7a72028a134722e0d08788caab74f1323" translate="yes" xml:space="preserve">
          <source>Tests that the expression &lt;code&gt;ex&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;. Returns a &lt;code&gt;Pass&lt;/code&gt;&lt;code&gt;Result&lt;/code&gt; if it does, a &lt;code&gt;Fail&lt;/code&gt;&lt;code&gt;Result&lt;/code&gt; if it is &lt;code&gt;false&lt;/code&gt;, and an &lt;code&gt;Error&lt;/code&gt;&lt;code&gt;Result&lt;/code&gt; if it could not be evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b9894fca3ff1649ca921b070f540e392fa37b8" translate="yes" xml:space="preserve">
          <source>Tests that the expression &lt;code&gt;expr&lt;/code&gt; throws &lt;code&gt;exception&lt;/code&gt;. The exception may specify either a type, or a value (which will be tested for equality by comparing fields). Note that &lt;code&gt;@test_throws&lt;/code&gt; does not support a trailing keyword form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae181d6002e3e7b8e7869d12db427e89bc76200b" translate="yes" xml:space="preserve">
          <source>Tests whether a character belongs to the Unicode general category Punctuation, i.e. a character whose category code begins with 'P'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7a2ddabfc89454537a4dc9c09df6337da0be84" translate="yes" xml:space="preserve">
          <source>Tests whether a character is a control character. Control characters are the non-printing characters of the Latin-1 subset of Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61df5952425542bbe698c6186d9e662be2fad8c" translate="yes" xml:space="preserve">
          <source>Tests whether a character is a decimal digit (0-9).</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
