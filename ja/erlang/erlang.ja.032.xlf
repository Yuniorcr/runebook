<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="c745a240a8b09464690a74b0ded828b443277620" translate="yes" xml:space="preserve">
          <source>The driver names are returned as a list of strings rather than a list of atoms for historical reasons.</source>
          <target state="translated">ドライバ名は、歴史的な理由からアトムのリストではなく文字列のリストとして返されます。</target>
        </trans-unit>
        <trans-unit id="8c90e4dc558838312154093ae7e4d33a042314e8" translate="yes" xml:space="preserve">
          <source>The driver options for a specified driver name need always to be consistent, &lt;strong&gt;even when the driver is reloaded&lt;/strong&gt;, meaning that they are as much a part of the driver as the name.</source>
          <target state="translated">指定されたドライバー名のドライバーオプションは&lt;strong&gt;、ドライバーがリロードされた場合でも&lt;/strong&gt;、常に一貫している必要があります。つまり、それらは名前と同じくらいドライバーの一部です。</target>
        </trans-unit>
        <trans-unit id="ec7187710cb97de822c20a1794719f5b691ec563" translate="yes" xml:space="preserve">
          <source>The driver queue is available to queue output from the emulator to the driver (data from the driver to the emulator is queued by the emulator in normal Erlang message queues). This can be useful if the driver must wait for slow devices, and so on, and wants to yield back to the emulator. The driver queue is implemented as an &lt;code&gt;ErlIOVec&lt;/code&gt;.</source>
          <target state="translated">ドライバキューは、エミュレータからドライバへの出力をキューに入れるために使用できます（ドライバからエミュレータへのデータは、エミュレータによって通常のErlangメッセージキューに入れられます）。これは、ドライバーが遅いデバイスなどを待つ必要があり、エミュレーターに譲りたい場合に役立ちます。ドライバーキューは &lt;code&gt;ErlIOVec&lt;/code&gt; として実装されます。</target>
        </trans-unit>
        <trans-unit id="267e1ade55aca0a7989f62dc5c3745421b17592a" translate="yes" xml:space="preserve">
          <source>The driver structure contains the driver name and some 15 function pointers, which are called at different times by the emulator.</source>
          <target state="translated">ドライバ構造体には、ドライバ名と15個の関数ポインタが含まれており、これらはエミュレータによって異なるタイミングで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="777fa5f89808e7871ea95ba4af70a119a6124215" translate="yes" xml:space="preserve">
          <source>The driver structure is filled with the driver name and function pointers. It is returned from the special entry point, declared with the macro &lt;code&gt;DRIVER_INIT(&amp;lt;driver_name&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">ドライバー構造には、ドライバー名と関数ポインターが入力されます。マクロ &lt;code&gt;DRIVER_INIT(&amp;lt;driver_name&amp;gt;)&lt;/code&gt; で宣言された特別なエントリポイントから返されます。</target>
        </trans-unit>
        <trans-unit id="ca38a39e87b4ab492f8fbeb01d018493a1577466" translate="yes" xml:space="preserve">
          <source>The driver structure is similar for statically linked-in drivers and dynamically loaded. However, some of the fields are to be left empty (that is, initialized to NULL) in the different types of drivers. The first field (the &lt;code&gt;init&lt;/code&gt; function pointer) is always left blank in a dynamically loaded driver, see line 26. &lt;code&gt;NULL&lt;/code&gt; on line 37 is always to be there, the field is no longer used and is retained for backward compatibility. No timers are used in this driver, why no callback for timers is needed. The &lt;code&gt;outputv&lt;/code&gt; field (line 40) can be used to implement an interface similar to Unix &lt;code&gt;writev&lt;/code&gt; for output. The Erlang runtime system could previously not use &lt;code&gt;outputv&lt;/code&gt; for the distribution, but it can as from ERTS 5.7.2. As this driver was written before ERTS 5.7.2 it does not use the &lt;code&gt;outputv&lt;/code&gt; callback. Using the &lt;code&gt;outputv&lt;/code&gt; callback is preferred, as it reduces copying of data. (We will however use scatter/gather I/O internally in the driver.)</source>
          <target state="translated">ドライバー構造は、静的にリンクされたドライバーと同様に動的にロードされます。ただし、一部のフィールドは、さまざまなタイプのドライバーで空のままにする（つまり、NULLに初期化する）必要があります。動的に読み込まれるドライバーでは、最初のフィールド（ &lt;code&gt;init&lt;/code&gt; 関数ポインター）は常に空白のままです。26行目を参照してください。37行目の &lt;code&gt;NULL&lt;/code&gt; は常にそこにあり、フィールドは使用されなくなり、下位互換性のために保持されます。このドライバーではタイマーが使用されていないため、タイマーのコールバックは必要ありません。 &lt;code&gt;outputv&lt;/code&gt; のフィールド（ライン40）は、UNIXに似たインタフェースを実装するために使用することができる &lt;code&gt;writev&lt;/code&gt; 出力のために。 Erlangランタイムシステムは以前は &lt;code&gt;outputv&lt;/code&gt; を使用できませんでした配布用ですが、ERTS 5.7.2以降の場合もあります。このドライバーはERTS 5.7.2より前に作成されたため、 &lt;code&gt;outputv&lt;/code&gt; コールバックを使用しません。データのコピーを減らすため、 &lt;code&gt;outputv&lt;/code&gt; コールバックを使用することをお勧めします。（ただし、ドライバーの内部でスキャッター/ギャザーI / Oを使用します。）</target>
        </trans-unit>
        <trans-unit id="13e83e61fa641454caf4f4f17446cac682b522d1" translate="yes" xml:space="preserve">
          <source>The driver used for Erlang distribution is to implement a reliable, order maintaining, variable length packet-oriented protocol. All error correction, resending and such need to be implemented in the driver or by the underlying communications protocol. If the protocol is stream-oriented (as is the case with both TCP/IP and our streamed Unix domain sockets), some mechanism for packaging is needed. We will use the simple method of having a header of four bytes containing the length of the package in a big-endian 32-bit integer. As Unix domain sockets only can be used between processes on the same machine, we do not need to code the integer in some special endianess, but we will do it anyway because in most situation you need to do it. Unix domain sockets are reliable and order maintaining, so we do not need to implement resends and such in the driver.</source>
          <target state="translated">Erlangの配布に使われているドライバは、信頼性が高く、秩序を維持し、可変長のパケット指向プロトコルを実装しています。すべてのエラー訂正、再送などはドライバか基礎となる通信プロトコルで実装する必要があります。もしプロトコルがストリーム指向であれば(TCP/IPやUnixドメインソケットがそうであるように)、パッケージ化のためのメカニズムが必要になります。我々は、パッケージの長さをビッグエンディアン32ビット整数で含む4バイトのヘッダを持つという単純な方法を使用します。Unix ドメインソケットは同じマシン上のプロセス間でしか使用できないので、整数を特別なエンディアンでコード化する必要はありませんが、ほとんどの状況でそれを行う必要があるので、とにかくそれを行うことにします。Unix ドメインソケットは信頼性が高く、秩序が保たれているので、ドライバに再送などを実装する必要はありません。</target>
        </trans-unit>
        <trans-unit id="885a9c9f85b39e7698683efce0ff5bba88451a67" translate="yes" xml:space="preserve">
          <source>The driver was already loaded by another process or is in use by a living port, or both. The load by you is registered and a corresponding &lt;code&gt;try_unload&lt;/code&gt; is expected sometime in the future.</source>
          <target state="translated">ドライバは別のプロセスによって既にロードされているか、生きているポートによって使用されているか、またはその両方です。あなたによるロードが登録され、対応する &lt;code&gt;try_unload&lt;/code&gt; が将来いつか期待されます。</target>
        </trans-unit>
        <trans-unit id="380ea6d015cef2cddc2581f363be87321f771e9f" translate="yes" xml:space="preserve">
          <source>The driver was immediately unloaded, meaning that the driver name is now free to use by other drivers and, if the underlying OS permits it, the memory occupied by the driver object code is now reclaimed.</source>
          <target state="translated">ドライバはすぐにアンロードされました。これは、ドライバ名が他のドライバで自由に使用できるようになったことを意味しており、基盤となるOSがそれを許可している場合、ドライバオブジェクトコードが占有していたメモリが回収されることを意味します。</target>
        </trans-unit>
        <trans-unit id="e3da2e19322e3c6628d119e07b3e56934634eac8" translate="yes" xml:space="preserve">
          <source>The driver was loaded and is immediately usable.</source>
          <target state="translated">ドライバーが積まれていて、すぐに使えました。</target>
        </trans-unit>
        <trans-unit id="d864f9d9077463dec755426c28ec5da6f217e91e" translate="yes" xml:space="preserve">
          <source>The driver with the specified name is an Erlang statically linked-in driver, which cannot be manipulated with this API.</source>
          <target state="translated">指定された名前のドライバはErlangの静的リンクインドライバで、このAPIでは操作できません。</target>
        </trans-unit>
        <trans-unit id="f1eb9606d6f4220a244d8c3b7748d550c419a79a" translate="yes" xml:space="preserve">
          <source>The driver writer is to provide the memory for storing the monitor when calling &lt;code&gt;&lt;a href=&quot;#driver_monitor_process&quot;&gt;driver_monitor_process&lt;/a&gt;&lt;/code&gt;. The address of the data is not stored outside of the driver, so &lt;code&gt;ErlDrvMonitor&lt;/code&gt; can be used as any other data, it can be copied, moved in memory, forgotten, and so on.</source>
          <target state="translated">ドライバーライターは、 &lt;code&gt;&lt;a href=&quot;#driver_monitor_process&quot;&gt;driver_monitor_process&lt;/a&gt;&lt;/code&gt; を呼び出すときにモニターを格納するためのメモリを提供します。データのアドレスはドライバーの外部に保存されないため、 &lt;code&gt;ErlDrvMonitor&lt;/code&gt; は他のデータとして使用でき、コピー、メモリへの移動、忘れられたなどの可能性があります。</target>
        </trans-unit>
        <trans-unit id="4025b3383bc4889c1c9cd923cfef69764fc7fb73" translate="yes" xml:space="preserve">
          <source>The driver-defined handle that is passed in later calls to driver callbacks. Notice that the &lt;code&gt;&lt;a href=&quot;driver_entry#start&quot;&gt;driver start callback&lt;/a&gt;&lt;/code&gt; is not called for this new driver instance. The driver-defined handle is normally created in the &lt;code&gt;&lt;a href=&quot;driver_entry#start&quot;&gt;driver start callback&lt;/a&gt;&lt;/code&gt; when a port is created through &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ドライバーコールバックへの後の呼び出しで渡されるドライバー定義のハンドル。この新しいドライバーインスタンスでは、 &lt;code&gt;&lt;a href=&quot;driver_entry#start&quot;&gt;driver start callback&lt;/a&gt;&lt;/code&gt; が呼び出されないことに注意してください。ドライバーで定義されたハンドルは、通常、ポートが &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt; によって作成されたときに、 &lt;code&gt;&lt;a href=&quot;driver_entry#start&quot;&gt;driver start callback&lt;/a&gt;&lt;/code&gt; で作成されます。</target>
        </trans-unit>
        <trans-unit id="394034fd0da749c1d06ef57ce69c6215ae425eb2" translate="yes" xml:space="preserve">
          <source>The driver-entry structure used by Erlang drivers.</source>
          <target state="translated">Erlangドライバで使われるドライバエントリ構造。</target>
        </trans-unit>
        <trans-unit id="e67bdfbeb3c1793f1075c60e9dfc86106434ef3f" translate="yes" xml:space="preserve">
          <source>The dump is truncated.</source>
          <target state="translated">ダンプは切り捨てられています。</target>
        </trans-unit>
        <trans-unit id="58fd56942c22b98ca6dfc0e41f2fc24c62b5de4a" translate="yes" xml:space="preserve">
          <source>The dump is truncated. In this case, a warning is displayed in the status bar of the main window.</source>
          <target state="translated">ダンプが切り捨てられます。この場合、メインウィンドウのステータスバーに警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="26da6cb9d5e2b4d506bf3083a6055833ae7a4362" translate="yes" xml:space="preserve">
          <source>The durability property ensures that changes made to the DBMS by a transaction are permanent. Once a transaction is committed, all changes made to the database are durable, that is, they are written safely to disc and do not become corrupted and do not disappear.</source>
          <target state="translated">耐久性プロパティは、トランザクションによってDBMSに加えられた変更が永続的であることを保証します。トランザクションがコミットされると、データベースに加えられたすべての変更は耐久性があり、安全にディスクに書き込まれ、破損したり消えたりすることはありません。</target>
        </trans-unit>
        <trans-unit id="a7aa3c54478ccaa5bbddda8a5fe6086c5ab90507" translate="yes" xml:space="preserve">
          <source>The duration time is specified as &lt;code&gt;HHMMSS&lt;/code&gt;, for example, &lt;code&gt;-duration 012030&lt;/code&gt; or &lt;code&gt;{duration,&quot;012030&quot;}&lt;/code&gt;</source>
          <target state="translated">継続時間は &lt;code&gt;HHMMSS&lt;/code&gt; として指定されます（例： &lt;code&gt;-duration 012030&lt;/code&gt; または &lt;code&gt;{duration,&quot;012030&quot;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b34138fd668a3a91f262b3c8cc94e10c40614310" translate="yes" xml:space="preserve">
          <source>The dynamic engine is not supported in LibreSSL from version 2.2.1</source>
          <target state="translated">LibreSSL 2.2.1 以降では、動的エンジンはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="46cf93457fc198c7fc4b11e05da4141275628e59" translate="yes" xml:space="preserve">
          <source>The earlier factorial example can act as a counter-example. It is not tail-recursive, since a multiplication is done on the result of the recursive call to &lt;code&gt;fact(N-1)&lt;/code&gt;.</source>
          <target state="translated">以前の階乗の例は反例として機能できます。 &lt;code&gt;fact(N-1)&lt;/code&gt; の再帰呼び出しの結果に対して乗算が行われるため、末尾再帰ではありません。</target>
        </trans-unit>
        <trans-unit id="7471d512bedffa6e5e516b4425ff9cbeaebad94b" translate="yes" xml:space="preserve">
          <source>The easiest path is to mimic the &lt;code&gt;inet&lt;/code&gt; and &lt;code&gt;inet_tcp&lt;/code&gt; interfaces, but not much functionality in those modules needs to be implemented. In the example application, only a few of the usual interfaces are implemented, and they are much simplified.</source>
          <target state="translated">最も簡単な方法は、 &lt;code&gt;inet&lt;/code&gt; および &lt;code&gt;inet_tcp&lt;/code&gt; インターフェースを模倣することですが、これらのモジュールにそれほど多くの機能を実装する必要はありません。サンプルアプリケーションでは、通常のインターフェイスの一部のみが実装されており、大幅に簡素化されています。</target>
        </trans-unit>
        <trans-unit id="5a4e2857f3f8ff97859f4357e2a194c2963da6e0" translate="yes" xml:space="preserve">
          <source>The easiest way of using &lt;code&gt;ET&lt;/code&gt;, is to just use it as a graphical tool for displaying message sequence charts. In order to do that you need to first start a &lt;code&gt;Viewer&lt;/code&gt; (which by default starts a &lt;code&gt;Collector&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;ET&lt;/code&gt; を使用する最も簡単な方法は、メッセージシーケンスチャートを表示するためのグラフィカルツールとして使用することです。そのためには、まず &lt;code&gt;Viewer&lt;/code&gt; 起動する必要があります（デフォルトでは &lt;code&gt;Collector&lt;/code&gt; が起動されます）。</target>
        </trans-unit>
        <trans-unit id="3e2ec62c427c4d0d3ce97e74cc8645fe104a328c" translate="yes" xml:space="preserve">
          <source>The easiest way to start Crashdump Viewer is to use shell script &lt;code&gt;cdv&lt;/code&gt; with the full path to the Erlang crashdump as argument. The script is located in directory &lt;code&gt;priv&lt;/code&gt; of the Observer application. This starts the Crashdump Viewer GUI and loads the specified file. If no filename is specified, a file dialog is opened where the file can be selected.</source>
          <target state="translated">Crashdump Viewerを起動する最も簡単な方法は、引数としてErlangクラッシュダンプへのフルパスを &lt;code&gt;cdv&lt;/code&gt; したシェルスクリプトcdvを使用することです。スクリプトは、Observerアプリケーションの &lt;code&gt;priv&lt;/code&gt; ディレクトリにあります。これにより、Crashdump Viewer GUIが起動し、指定したファイルがロードされます。ファイル名が指定されていない場合、ファイルを選択できるファイルダイアログが開きます。</target>
        </trans-unit>
        <trans-unit id="55d0d417d785ac1626163667303a6253a1c8a917" translate="yes" xml:space="preserve">
          <source>The effect of (*THEN) is now confined to the inner subpattern. After a failure in C, matching moves to (*FAIL), which causes the whole subpattern to fail, as there are no more alternatives to try. In this case, matching does now backtrack into A.</source>
          <target state="translated">(*THEN)の効果は内側のサブパターンに限定されるようになりました。Cで失敗した後、マッチングは(*FAIL)に移行します。これでサブパターン全体が失敗します。この場合、マッチングはAにバックトラックします。</target>
        </trans-unit>
        <trans-unit id="f16407eee4518305b005b9dbecb5884bd7cbf3bc" translate="yes" xml:space="preserve">
          <source>The effect of combining &lt;code&gt;set_on_first_link&lt;/code&gt; with &lt;code&gt;set_on_link&lt;/code&gt; is the same as &lt;code&gt;set_on_first_link&lt;/code&gt; alone. Likewise for &lt;code&gt;set_on_spawn&lt;/code&gt; and &lt;code&gt;set_on_first_spawn&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set_on_first_link&lt;/code&gt; と &lt;code&gt;set_on_link&lt;/code&gt; を組み合わせた効果は、 &lt;code&gt;set_on_first_link&lt;/code&gt; のみの場合と同じです。同様に、 &lt;code&gt;set_on_spawn&lt;/code&gt; および &lt;code&gt;set_on_first_spawn&lt;/code&gt; の場合。</target>
        </trans-unit>
        <trans-unit id="fcb46e1d7474732484a66c32367c6751904b1bed" translate="yes" xml:space="preserve">
          <source>The effect of option &lt;code&gt;cache&lt;/code&gt; is that when generator &lt;code&gt;QH2'&lt;/code&gt; is run the first time, every answer is stored in an ETS table. When the next answer of &lt;code&gt;QH1&lt;/code&gt; is tried, answers to &lt;code&gt;QH2'&lt;/code&gt; are copied from the ETS table, which is very fast. As for option &lt;code&gt;unique&lt;/code&gt; the cost is a possibly substantial amount of RAM memory.</source>
          <target state="translated">オプション &lt;code&gt;cache&lt;/code&gt; の効果は、ジェネレーター &lt;code&gt;QH2'&lt;/code&gt; が初めて実行されるときに、すべての回答がETSテーブルに格納されることです。 &lt;code&gt;QH1&lt;/code&gt; の次の回答が試行されると、 &lt;code&gt;QH2'&lt;/code&gt; への回答がETSテーブルからコピーされます。これは非常に高速です。オプション &lt;code&gt;unique&lt;/code&gt; の場合、コストはおそらくかなりの量のRAMメモリです。</target>
        </trans-unit>
        <trans-unit id="46af5dbb6ad32f950d071087d55fd5eedd3a2dcc" translate="yes" xml:space="preserve">
          <source>The election process is modified as described in 5.6.4.</source>
          <target state="translated">5.6.4で述べたように、選挙プロセスが変更されます。</target>
        </trans-unit>
        <trans-unit id="cdd607a9ef230a55bb6d74140b011672a2b70ef4" translate="yes" xml:space="preserve">
          <source>The element in position &lt;code&gt;Pos&lt;/code&gt; in &lt;code&gt;Pattern&lt;/code&gt; must be bound. &lt;code&gt;Pos&lt;/code&gt; is an integer (&lt;code&gt;#record.Field&lt;/code&gt;) or an attribute name.</source>
          <target state="translated">位置にある要素 &lt;code&gt;Pos&lt;/code&gt; で &lt;code&gt;Pattern&lt;/code&gt; バインドする必要があります。 &lt;code&gt;Pos&lt;/code&gt; は整数（ &lt;code&gt;#record.Field&lt;/code&gt; ）または属性名です。</target>
        </trans-unit>
        <trans-unit id="c52c7c2c532d8015d87a1ff9dad023e4fb851308" translate="yes" xml:space="preserve">
          <source>The element to update is also the key.</source>
          <target state="translated">更新する要素も鍵になります。</target>
        </trans-unit>
        <trans-unit id="133139824edb56fee5c9537204f00d5c8e6d31f2" translate="yes" xml:space="preserve">
          <source>The element to update is not an integer.</source>
          <target state="translated">更新する要素は整数ではありません。</target>
        </trans-unit>
        <trans-unit id="6e2b6d90876d98adc6125d07f13d8d523ed72322" translate="yes" xml:space="preserve">
          <source>The embedded system and all the applications start automatically if the script file shown below is added to directory &lt;code&gt;/etc/rc3.d&lt;/code&gt;. The file must be owned and readable by &lt;code&gt;root&lt;/code&gt;. Its name cannot be arbitrarily assigned; the following name is recommended:</source>
          <target state="translated">以下に示すスクリプトファイルをディレクトリ &lt;code&gt;/etc/rc3.d&lt;/code&gt; に追加すると、組み込みシステムとすべてのアプリケーションが自動的に起動します。ファイルは &lt;code&gt;root&lt;/code&gt; が所有し、読み取り可能でなければなりません。その名前を任意に割り当てることはできません。次の名前をお勧めします。</target>
        </trans-unit>
        <trans-unit id="bad88f7a085d192e2f6cec49768a38f2903f8ae0" translate="yes" xml:space="preserve">
          <source>The emulator calls the driver in the following situations:</source>
          <target state="translated">エミュレータは以下のような状況でドライバを呼び出します。</target>
        </trans-unit>
        <trans-unit id="218b5d9983c658a4cef0aef4b47157f1b19f1a20" translate="yes" xml:space="preserve">
          <source>The emulator has been started with only one scheduler thread.</source>
          <target state="translated">エミュレータは1つのスケジューラースレッドだけで起動しています。</target>
        </trans-unit>
        <trans-unit id="00ecfc5e261b4531e61f24b2c4f3b8605c732361" translate="yes" xml:space="preserve">
          <source>The emulator has more than one scheduler thread, and no scheduler threads are blocked. That is, all available scheduler threads schedule Erlang processes and execute Erlang code.</source>
          <target state="translated">エミュレータには複数のスケジューラースレッドがあり、どのスケジューラースレッドもブロックされていません。つまり、利用可能なスケジューラースレッドはすべてErlangプロセスをスケジュールしてErlangコードを実行しています。</target>
        </trans-unit>
        <trans-unit id="d1335d1e55e250963f0d3ef76a97d106ea1aeeed" translate="yes" xml:space="preserve">
          <source>The emulator has more than one scheduler thread, but all normal scheduler threads except one are blocked. Notice that dirty schedulers are not blocked, and can schedule Erlang processes and execute native code.</source>
          <target state="translated">エミュレータには複数のスケジューラースレッドがありますが、1つ以外の通常のスケジューラースレッドはすべてブロックされています。ダーティスケジューラはブロックされておらず、Erlangプロセスをスケジュールしてネイティブコードを実行することができます。</target>
        </trans-unit>
        <trans-unit id="9e09f5c935221131fa5aa069cd7be0f9d773e6f4" translate="yes" xml:space="preserve">
          <source>The emulator has more than one scheduler thread, but all scheduler threads except one are blocked. That is, only one scheduler thread schedules Erlang processes and executes Erlang code.</source>
          <target state="translated">エミュレータには複数のスケジューラースレッドがありますが、1つを除いてすべてのスケジューラースレッドがブロックされています。つまり、1つのスケジューラースレッドだけがErlangプロセスをスケジュールしてErlangコードを実行しています。</target>
        </trans-unit>
        <trans-unit id="9414404aaefeb3f5826ea98674c66ad27f121727" translate="yes" xml:space="preserve">
          <source>The emulator probably uses more memory, and because garbage collections occur less frequently, huge binaries can be kept much longer.</source>
          <target state="translated">エミュレータはおそらくより多くのメモリを使用しており、ガベージコレクションの発生頻度が低いため、巨大なバイナリをより長く保存することができます。</target>
        </trans-unit>
        <trans-unit id="8c90a0c569f6e401278d0c92d5efb3209b403c33" translate="yes" xml:space="preserve">
          <source>The emulator refuses to load a driver that does not use the extended driver interface, to allow for 64-bit capable drivers, as incompatible type changes for the callbacks &lt;code&gt;&lt;a href=&quot;driver_entry#output&quot;&gt;output&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;driver_entry#control&quot;&gt;control&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;driver_entry#call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; were introduced in Erlang/OTP R15B. A driver written with the old types would compile with warnings and when called return garbage sizes to the emulator, causing it to read random memory and create huge incorrect result blobs.</source>
          <target state="translated">Erlang / OTP R15Bでコールバックの &lt;code&gt;&lt;a href=&quot;driver_entry#output&quot;&gt;output&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;driver_entry#control&quot;&gt;control&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;driver_entry#call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; の互換性のないタイプの変更が導入されたため、エミュレーターは64ビット対応のドライバーを可能にするために、拡張ドライバーインターフェイスを使用しないドライバーのロードを拒否します。古いタイプで作成されたドライバーは警告付きでコンパイルされ、呼び出されると、ガーベッジサイズがエミュレーターに返され、ランダムなメモリが読み取られ、巨大な不正な結果BLOBが作成されます。</target>
        </trans-unit>
        <trans-unit id="7a03fbfd7f6822486dc5e29a1dba526a017e4427" translate="yes" xml:space="preserve">
          <source>The emulator restart on Windows NT expects that the system is started using the &lt;code&gt;erlsrv&lt;/code&gt; program (as a service). Furthermore, the release handler expects that the service is named &lt;code&gt;NodeName&lt;/code&gt;_&lt;code&gt;Release&lt;/code&gt;, where &lt;code&gt;NodeName&lt;/code&gt; is the first part of the Erlang node name (up to, but not including the &quot;@&quot;) and &lt;code&gt;Release&lt;/code&gt; is the current release version. The release handler furthermore expects that a program like &lt;code&gt;start_erl.exe&lt;/code&gt; is specified as &quot;machine&quot; to &lt;code&gt;erlsrv&lt;/code&gt;. During upgrading with restart, a new service is registered and started. The new service is set to automatic and the old service is removed when the new release is made permanent.</source>
          <target state="translated">Windows NTでのエミュレータの再起動では、システムが &lt;code&gt;erlsrv&lt;/code&gt; プログラム（サービスとして）を使用して起動されることを想定しています。さらに、リリースハンドラーは、サービスの名前が &lt;code&gt;NodeName&lt;/code&gt; _ &lt;code&gt;Release&lt;/code&gt; であることを想定しています。ここで、 &lt;code&gt;NodeName&lt;/code&gt; はErlangノード名の最初の部分（ &quot;@&quot;を除く）であり、 &lt;code&gt;Release&lt;/code&gt; は現在のリリースバージョンです。リリースハンドラは、さらに、のようなプログラムと予想し &lt;code&gt;start_erl.exe&lt;/code&gt; がに「機械」として指定され &lt;code&gt;erlsrv&lt;/code&gt; 。再起動を伴うアップグレード中に、新しいサービスが登録され、開始されます。新しいサービスは自動に設定され、新しいリリースが永続化されると、古いサービスは削除されます。</target>
        </trans-unit>
        <trans-unit id="e59343153e5b1fe6b3e23daad5cd40c9373e3696" translate="yes" xml:space="preserve">
          <source>The encoder and decoder can also be run from the shell:</source>
          <target state="translated">エンコーダーとデコーダーはシェルからも実行できます。</target>
        </trans-unit>
        <trans-unit id="5524aa1d01a0ef49a1ac5386a1c63b808ac68425" translate="yes" xml:space="preserve">
          <source>The encoder callback interface is defined by the &lt;code&gt;megaco_encoder&lt;/code&gt; behaviour, see &lt;code&gt;&lt;a href=&quot;megaco_encoder&quot;&gt;megaco_encoder&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">エンコーダーコールバックインターフェイスは、 &lt;code&gt;megaco_encoder&lt;/code&gt; 動作によって定義されます &lt;code&gt;&lt;a href=&quot;megaco_encoder&quot;&gt;megaco_encoder&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="e115c3caf0848d64461367ca5e16e6bd2197d5d0" translate="yes" xml:space="preserve">
          <source>The encoding fails if &lt;code&gt;p&lt;/code&gt; is not a valid string in encoding &lt;code&gt;from_enc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;from_enc&lt;/code&gt; のエンコードで &lt;code&gt;p&lt;/code&gt; が有効な文字列でない場合、エンコードは失敗します。</target>
        </trans-unit>
        <trans-unit id="09633aa618d0dc8af3be96ad739582e309ef108d" translate="yes" xml:space="preserve">
          <source>The encoding of &lt;code&gt;Filename&lt;/code&gt; can be set by a comment as described in &lt;code&gt;epp(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; のエンコーディングは、 &lt;code&gt;epp(3)&lt;/code&gt; で説明されているようにコメントで設定できます。</target>
        </trans-unit>
        <trans-unit id="9ac74f2d9e4b6b15103658ee4d9051874ee9e500" translate="yes" xml:space="preserve">
          <source>The encoding of &lt;code&gt;Filename&lt;/code&gt; can be set by a comment, as described in &lt;code&gt;epp(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; のエンコーディングは、 &lt;code&gt;epp(3)&lt;/code&gt; で説明されているように、コメントで設定できます。</target>
        </trans-unit>
        <trans-unit id="3d77e867cd506d61a5b722d136e431c9f033298c" translate="yes" xml:space="preserve">
          <source>The encoding of each file can be specified using comments as described in the &lt;code&gt;epp(3)&lt;/code&gt; module.</source>
          <target state="translated">各ファイルのエンコーディングは、 &lt;code&gt;epp(3)&lt;/code&gt; モジュールで説明されているコメントを使用して指定できます。</target>
        </trans-unit>
        <trans-unit id="9e2118a8dc4b068a3e8e22ff922dd1be302891f7" translate="yes" xml:space="preserve">
          <source>The encoding rule to be used. The supported encoding rules are Basic Encoding Rules (BER), Packed Encoding Rules (PER) aligned, and PER unaligned. If the encoding rule option is omitted, &lt;code&gt;ber&lt;/code&gt; is the default.</source>
          <target state="translated">使用するエンコーディングルール。サポートされているエンコードルールは、基本エンコードルール（BER）、パックエンコードルール（PER）境界整列、およびPER境界整列なしです。エンコーディングルールオプションを省略した場合、デフォルトは &lt;code&gt;ber&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6f95e0e32837beadf0f93d78df4e27d5991fa179" translate="yes" xml:space="preserve">
          <source>The encoding specified by the above mentioned comment applies to the script itself. The encoding of the I/O-server, however, must be set explicitly as follows:</source>
          <target state="translated">上述のコメントで指定されたエンコーディングは、スクリプト自体に適用されます。ただし、I/O-serverのエンコーディングは、以下のように明示的に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d1c828e598776df003c2646b5bcedb28e057c204" translate="yes" xml:space="preserve">
          <source>The encoding_config of the megaco_erl_dist_encoder module may be one of these:</source>
          <target state="translated">megaco_erl_dist_encoderモジュールのencoding_configは、これらのいずれかであってもよい。</target>
        </trans-unit>
        <trans-unit id="f48fa03ddf781f161c43a06b94c0c75681b96550" translate="yes" xml:space="preserve">
          <source>The endianness specification can be either &lt;code&gt;big&lt;/code&gt;, &lt;code&gt;little&lt;/code&gt;, or &lt;code&gt;native&lt;/code&gt;. Native-endian means that the endian is resolved at load time, to be either big-endian or little-endian, depending on what is &quot;native&quot; for the CPU that the Erlang machine is run on.</source>
          <target state="translated">エンディアン仕様は、 &lt;code&gt;big&lt;/code&gt; 、 &lt;code&gt;little&lt;/code&gt; 、または &lt;code&gt;native&lt;/code&gt; いずれかです。ネイティブエンディアンとは、Erlangマシンが実行されているCPUの「ネイティブ」に応じて、エンディアンが読み込み時にビッグエンディアンまたはリトルエンディアンに解決されることを意味します。</target>
        </trans-unit>
        <trans-unit id="60e0f49d56e51cf1a5d46c013c216c0ae5dc1eb9" translate="yes" xml:space="preserve">
          <source>The entire contents of the cache will be deleted.</source>
          <target state="translated">キャッシュの内容は全て削除されます。</target>
        </trans-unit>
        <trans-unit id="a01a496ea7149df2179e8879a105341306c0f911" translate="yes" xml:space="preserve">
          <source>The entire operation is guaranteed to be &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomic and isolated&lt;/a&gt;&lt;/code&gt;, even when a list of objects is inserted.</source>
          <target state="translated">オブジェクトのリストが挿入された場合でも、操作全体が &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomic and isolated&lt;/a&gt;&lt;/code&gt; されていることが保証されています。</target>
        </trans-unit>
        <trans-unit id="e7a75cc762ec33088a0ac070865ceb613941ab44" translate="yes" xml:space="preserve">
          <source>The entire program is motorcycles2html.erl:</source>
          <target state="translated">プログラム全体はmotorcycles2html.erlです。</target>
        </trans-unit>
        <trans-unit id="ac7e661e53cfa83634f92105a4582a374de077bb" translate="yes" xml:space="preserve">
          <source>The entire tar file is compressed, as if it has been run through the &lt;code&gt;gzip&lt;/code&gt; program. To abide to the convention that a compressed tar file is to end in &quot;&lt;code&gt;.tar.gz&lt;/code&gt;&quot; or &quot;&lt;code&gt;.tgz&lt;/code&gt;&quot;, add the appropriate extension.</source>
          <target state="translated">tarファイル全体が、 &lt;code&gt;gzip&lt;/code&gt; プログラムで実行されたかのように圧縮されます。圧縮されたtarファイルが「 &lt;code&gt;.tar.gz&lt;/code&gt; 」または「 &lt;code&gt;.tgz&lt;/code&gt; 」で終わるという規則に準拠するには、適切な拡張子を追加します。</target>
        </trans-unit>
        <trans-unit id="e1f58ced4a1c7fafa8f4a838e0a3347b18963414" translate="yes" xml:space="preserve">
          <source>The entities involved in this model are the agent, which terminates the management protocol, and the resources, which is to be managed, that is, the actual application entities. The resources should in general have no knowledge of the management protocol used, and the agent should have no knowledge of the managed resources. This implies that a translation mechanism is needed, to translate the management operations to operations on the resources. This translation mechanism is usually called &lt;strong&gt;instrumentation&lt;/strong&gt; and the function that implements it is called &lt;strong&gt;instrumentation function&lt;/strong&gt;. The instrumentation functions are written for each combination of management protocol and resource to be managed. For example, if an application is to be managed by SNMP and HTTP, two sets of instrumentation functions are defined; one that maps SNMP requests to the resources, and one that, for example, generates an HTML page for some resources.</source>
          <target state="translated">このモデルに関係するエンティティは、管理プロトコルを終了するエージェントと、管理対象のリソース、つまり実際のアプリケーションエンティティです。一般に、リソースには使用される管理プロトコルの知識がなく、エージェントには管理対象リソースの知識がありません。これは、管理操作をリソースの操作に変換するために、変換メカニズムが必要であることを意味します。この変換メカニズムは通常、&lt;strong&gt;インストルメンテーション&lt;/strong&gt;と呼ばれ、それを実装する&lt;strong&gt;関数&lt;/strong&gt;は&lt;strong&gt;インストルメンテーション関数&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます。&lt;/strong&gt;。計測機能は、管理プロトコルと管理対象リソースの組み合わせごとに記述されます。たとえば、アプリケーションがSNMPとHTTPによって管理される場合、2組の計測機能が定義されます。1つはSNMP要求をリソースにマップするもので、もう1つはたとえば、一部のリソースのHTMLページを生成するものです。</target>
        </trans-unit>
        <trans-unit id="fc41ee140a0e19b3389932dacfd061ee5abd2931" translate="yes" xml:space="preserve">
          <source>The entry format in all files are Erlang terms, separated by a '&lt;strong&gt;.&lt;/strong&gt;' and a &lt;strong&gt;newline&lt;/strong&gt;. In the following sections, the formats of these terms are described. Comments may be specified as ordinary Erlang comments.</source>
          <target state="translated">すべてのファイルのエントリ形式は、 'で区切られたErlang用語&lt;strong&gt;です。&lt;/strong&gt;'と&lt;strong&gt;改行&lt;/strong&gt;。次のセクションでは、これらの用語の形式について説明します。コメントは通常のErlangコメントとして指定できます。</target>
        </trans-unit>
        <trans-unit id="cb54532373ef856c343b0b5dff86075c30ed3fbc" translate="yes" xml:space="preserve">
          <source>The entry point of the process, that is, what function was referenced in the &lt;code&gt;spawn&lt;/code&gt; or &lt;code&gt;spawn_link&lt;/code&gt; call that started the process.</source>
          <target state="translated">プロセスのエントリポイント、つまり、プロセスを開始した &lt;code&gt;spawn&lt;/code&gt; または &lt;code&gt;spawn_link&lt;/code&gt; 呼び出しで参照された関数。</target>
        </trans-unit>
        <trans-unit id="7f963220ca94e530caaeba1df441378f7d481672" translate="yes" xml:space="preserve">
          <source>The enumerated type is similar to an integer type, when defined with a set of predefined values. The difference is that an enumerated type can only have specified values, whereas an integer can have any value.</source>
          <target state="translated">列挙型は、事前に定義された値のセットで定義されている場合、整数型に似ています。違いは、整数型が任意の値を持つことができるのに対し、列挙型は指定された値しか持つことができないということです。</target>
        </trans-unit>
        <trans-unit id="a3be6551e42e26d4ead34f786dcb51c0272efaf5" translate="yes" xml:space="preserve">
          <source>The environment can also affect filename interpretation, if Erlang is started with flag &lt;code&gt;+fna&lt;/code&gt; (which is default from Erlang/OTP 17.0).</source>
          <target state="translated">Erlangがフラグ &lt;code&gt;+fna&lt;/code&gt; （Erlang / OTP 17.0のデフォルト）で開始されている場合、環境はファイル名の解釈にも影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="913d6ab5c0934539b281e92b0bf02bbbfef5d5f9" translate="yes" xml:space="preserve">
          <source>The environment of an Erlang machine started as a service contains two special variables:</source>
          <target state="translated">サービスとして起動したErlangマシンの環境には2つの特別な変数が含まれています。</target>
        </trans-unit>
        <trans-unit id="572b1efce0a6ff1c606a8d7cea991c683d1b2312" translate="yes" xml:space="preserve">
          <source>The environment of the calling process. Must be &lt;code&gt;NULL&lt;/code&gt; only if calling from a created thread.</source>
          <target state="translated">呼び出しプロセスの環境。作成されたスレッドから呼び出す場合のみ、 &lt;code&gt;NULL&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="08711127236c0db559a0b4dc910c12dabe3750d5" translate="yes" xml:space="preserve">
          <source>The environment of the calling process. Must not be &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">呼び出しプロセスの環境。 &lt;code&gt;NULL&lt;/code&gt; であってはなりません。</target>
        </trans-unit>
        <trans-unit id="cdd010a7cf9f07e2e5e5be6548225fb6c23b8fd6" translate="yes" xml:space="preserve">
          <source>The environment of the message term. Can be a process-independent environment allocated with &lt;code&gt;&lt;a href=&quot;#enif_alloc_env&quot;&gt;enif_alloc_env&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">メッセージ用語の環境。 &lt;code&gt;&lt;a href=&quot;#enif_alloc_env&quot;&gt;enif_alloc_env&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;NULL&lt;/code&gt; で割り当てられたプロセスに依存しない環境にすることができます。</target>
        </trans-unit>
        <trans-unit id="3da50f98e6b47c2b008dfdf790cd4b0c2b6bf64d" translate="yes" xml:space="preserve">
          <source>The environment of the message term. Must be a process-independent environment allocated with &lt;code&gt;&lt;a href=&quot;#enif_alloc_env&quot;&gt;enif_alloc_env&lt;/a&gt;&lt;/code&gt; or NULL.</source>
          <target state="translated">メッセージ用語の環境。 &lt;code&gt;&lt;a href=&quot;#enif_alloc_env&quot;&gt;enif_alloc_env&lt;/a&gt;&lt;/code&gt; またはNULLで割り当てられたプロセスに依存しない環境でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2fa8fc26b6ef033d7a364376d908df5f6b781167" translate="yes" xml:space="preserve">
          <source>The environment variable &lt;code&gt;ERL_EPMD_PORT&lt;/code&gt; can be used to indicate which logical cluster a C-node belongs to.</source>
          <target state="translated">環境変数 &lt;code&gt;ERL_EPMD_PORT&lt;/code&gt; を使用して、Cノードが属する論理クラスターを示すことができます。</target>
        </trans-unit>
        <trans-unit id="e087dc753b87601d38d03f83c1f1759586e203d5" translate="yes" xml:space="preserve">
          <source>The environment variable &lt;code&gt;HEART_BEAT_TIMEOUT&lt;/code&gt; can be used to configure the heart time-outs; it can be set in the operating system shell before Erlang is started or be specified at the command line:</source>
          <target state="translated">環境変数 &lt;code&gt;HEART_BEAT_TIMEOUT&lt;/code&gt; を使用して、ハートタイムアウトを構成できます。Erlangを起動する前にオペレーティングシステムのシェルで設定するか、コマンドラインで指定できます。</target>
        </trans-unit>
        <trans-unit id="6dd0dd179f2f7ae89d1e41f5898aa9a98a1d1adc" translate="yes" xml:space="preserve">
          <source>The environment variables can also be used to detect that we are running as a service and make port programs react correctly to the control events generated on logout (see the next section).</source>
          <target state="translated">環境変数は、サービスとして実行していることを検出したり、ログアウト時に発生する制御イベントにポートプログラムが正しく反応するようにするためにも使用できます(次のセクションを参照してください)。</target>
        </trans-unit>
        <trans-unit id="0155a47d2e3d28b9149121cf101f2c0d304723b6" translate="yes" xml:space="preserve">
          <source>The erl scheme is designed to mimic plain CGI, but without the extra overhead. An URL that calls an Erlang &lt;code&gt;erl&lt;/code&gt; function has the following syntax (regular expression):</source>
          <target state="translated">erlスキームはプレーンなCGIを模倣するように設計されていますが、余分なオーバーヘッドはありません。Erlang &lt;code&gt;erl&lt;/code&gt; 関数を呼び出すURLの構文は次のとおりです（正規表現）。</target>
        </trans-unit>
        <trans-unit id="9f146c11c8615922912cc793d4380f3827809366" translate="yes" xml:space="preserve">
          <source>The erlang connection process spawned by connect/2, will open a port to a c-process that handles the communication with the database through Microsoft's ODBC API. The erlang port will be kept open for exit signal propagation, if something goes wrong in the c-process and it exits we want know as mush as possible about the reason. The main communication with the c-process is done through sockets. The C-process consists of two threads, the supervisor thread and the database handler thread. The supervisor thread checks for shutdown messages on the supervisor socket and the database handler thread receives requests and sends answers on the database socket. If the database thread seems to hang on some database call, the erlang control process will send a shutdown message on the supervisor socket, in this case the c-process will exit. If the c-process crashes/exits it will bring the erlang-process down too and vice versa i.e. the connection is terminated.</source>
          <target state="translated">connect/2で生成されたerlang接続プロセスは、MicrosoftのODBC APIを使ってデータベースとの通信を処理するcプロセスにポートを開きます。もしcプロセスで何か問題が起きて終了した場合、その理由をできるだけ知りたいのです。cプロセスとの主な通信はソケットを介して行われます。cプロセスは、スーパーバイザースレッドとデータベースハンドラースレッドの2つのスレッドで構成されています。スーパーバイザースレッドはスーパーバイザソケットでシャットダウンメッセージをチェックし、データベースハンドラースレッドはリクエストを受信してデータベースソケットで回答を送信します。もしデータベーススレッドがデータベースコールでハングアップしているようであれば、erlangコントロールプロセスはスーパーバイザソケットにシャットダウンメッセージを送ります。この場合、c-processは終了します。もしc-processがクラッシュしたり終了したりすると、erlang-processもダウンしてしまいます。</target>
        </trans-unit>
        <trans-unit id="df7997d41de6ac2a1785cee171c352d42d04f93c" translate="yes" xml:space="preserve">
          <source>The error behavior differs, see below.</source>
          <target state="translated">エラーの挙動が異なりますので、下記を参照してください。</target>
        </trans-unit>
        <trans-unit id="011b09627444a05b2b15d34028f40a28dfdddfe0" translate="yes" xml:space="preserve">
          <source>The error descriptor defaults to &lt;code&gt;DefaultED&lt;/code&gt;, but can be overridden with an alternate one by returning &lt;code&gt;{reply,ED}&lt;/code&gt; or &lt;code&gt;{no_reply,ED}&lt;/code&gt; instead of &lt;code&gt;reply&lt;/code&gt; and &lt;code&gt;no_reply&lt;/code&gt; respectively.</source>
          <target state="translated">エラー記述子のデフォルトは &lt;code&gt;DefaultED&lt;/code&gt; ですが &lt;code&gt;{reply,ED}&lt;/code&gt; それぞれ &lt;code&gt;reply&lt;/code&gt; および &lt;code&gt;no_reply&lt;/code&gt; の代わりに{reply、ED}または &lt;code&gt;{no_reply,ED}&lt;/code&gt; 返すことにより、代替の記述子でオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="461fac531aaf141393d180babf97f72d93ada5dc" translate="yes" xml:space="preserve">
          <source>The error handling strategy and possible errors sources are described in the Erlang ODBC &lt;code&gt;&lt;a href=&quot;error_handling&quot;&gt;User's Guide.&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">エラー処理戦略と考えられるエラーソースについては、Erlang ODBC &lt;code&gt;&lt;a href=&quot;error_handling&quot;&gt;User's Guide.&lt;/a&gt;&lt;/code&gt; 説明されています。</target>
        </trans-unit>
        <trans-unit id="5d405471c43706742d66ca4dd53edcd35e7ff6cb" translate="yes" xml:space="preserve">
          <source>The error information is handled by Logger, which is part of the Kernel application.</source>
          <target state="translated">エラー情報はカーネルアプリケーションの一部であるLoggerで処理されます。</target>
        </trans-unit>
        <trans-unit id="9eb4cd48329bca9a99f8dc4cb317a0559bc9784e" translate="yes" xml:space="preserve">
          <source>The error message will look like this:</source>
          <target state="translated">エラーメッセージは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3061a1ab3e6a1d434208df5bfeb44852fc476d18" translate="yes" xml:space="preserve">
          <source>The error report module is configured using the directive &lt;code&gt;error_report_mod&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">エラー報告モジュールは、ディレクティブ &lt;code&gt;error_report_mod&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt; 。構成パラメーターを参照してください。</target>
        </trans-unit>
        <trans-unit id="36a00c6827ff6af3c91907db56029def4bf079b7" translate="yes" xml:space="preserve">
          <source>The errors and warnings are listed in the order in which they are encountered in the forms. The errors from one file can therefore be split into different entries in the list of errors.</source>
          <target state="translated">エラーと警告は、フォーム内で遭遇した順にリストアップされています。したがって、1つのファイルからのエラーは、エラーリストの異なるエントリに分割することができます。</target>
        </trans-unit>
        <trans-unit id="0e3460fc594164d8bbf96577fb24868bb714be37" translate="yes" xml:space="preserve">
          <source>The errors detected include:</source>
          <target state="translated">検出されたエラーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b62e06cf6a78a94894293a2f2fefb7491e659ccc" translate="yes" xml:space="preserve">
          <source>The escape \o must be followed by a sequence of octal digits, enclosed in braces. An error occurs if this is not the case. This escape is a recent addition to Perl; it provides way of specifying character code points as octal numbers greater than 0777, and it also allows octal numbers and back references to be unambiguously specified.</source>
          <target state="translated">escape \oは、中括弧で囲まれた8進数の数字のシーケンスに続いていなければなりません。これが正しくないとエラーになります。このエスケープはPerlに最近追加されたもので、文字コードポイントを 0777より大きい8進数で指定する方法を提供しています。</target>
        </trans-unit>
        <trans-unit id="e09cca6482e14cefd7789aca27e688d2b8fc2ae0" translate="yes" xml:space="preserve">
          <source>The escape sequence \K causes any previously matched characters not to be included in the final matched sequence. For example, the following pattern matches &quot;foobar&quot;, but reports that it has matched &quot;bar&quot;:</source>
          <target state="translated">エスケープシーケンス \K は、以前にマッチしたすべての文字を最終的なマッチしたシーケンスに含まないようにします。例えば、以下のパターンは「foobar」にマッチしますが、「bar」にマッチしたと報告します。</target>
        </trans-unit>
        <trans-unit id="1fdcd1532b972da832570c4e46f8a01588e3f319" translate="yes" xml:space="preserve">
          <source>The escape sequence \N behaves like a dot, except that it is not affected by option &lt;code&gt;PCRE_DOTALL&lt;/code&gt;. That is, it matches any character except one that signifies the end of a line. Perl also uses \N to match characters by name but PCRE does not support this.</source>
          <target state="translated">エスケープシーケンス\ Nは、オプション &lt;code&gt;PCRE_DOTALL&lt;/code&gt; の影響を受けないことを除いて、ドットのように動作します。つまり、行の終わりを示す文字以外のすべての文字に一致します。Perlは\ Nを使用して名前で文字を照合しますが、PCREはこれをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="9ac8458115fbc9af33358e4aea3bbde3c0be1319" translate="yes" xml:space="preserve">
          <source>The escape sequences allowed are the same as for Erlang strings:</source>
          <target state="translated">許可されるエスケープシーケンスはErlangの文字列と同じです。</target>
        </trans-unit>
        <trans-unit id="32812c856e631f3ed1dcd90e3601c5c2b3077c8f" translate="yes" xml:space="preserve">
          <source>The eval scheme can seriously threaten the integrity of the Erlang node housing a web server, for example:</source>
          <target state="translated">evalスキームは、例えばWebサーバを収容しているErlangノードの整合性を深刻に脅かす可能性があります。</target>
        </trans-unit>
        <trans-unit id="21baa0e66c42986302a436c2cc18ea33ca352672" translate="yes" xml:space="preserve">
          <source>The eval scheme is straight-forward and does not mimic the behavior of plain CGI. An URL that calls an Erlang &lt;code&gt;eval&lt;/code&gt; function has the following syntax:</source>
          <target state="translated">評価スキームは単純明快で、プレーンなCGIの動作を模倣していません。Erlang &lt;code&gt;eval&lt;/code&gt; 関数を呼び出すURLの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="10a18f07017de460e02711d1cf0600325f33b7fb" translate="yes" xml:space="preserve">
          <source>The evaluation of the query fails if the &lt;code&gt;qlc&lt;/code&gt; module cannot carry out the chosen join method. Defaults to &lt;code&gt;any&lt;/code&gt;, which means that some fast join method is used if possible.</source>
          <target state="translated">&lt;code&gt;qlc&lt;/code&gt; モジュールが選択された結合方法を実行できない場合、クエリの評価は失敗します。デフォルトは &lt;code&gt;any&lt;/code&gt; です。つまり、可能であれば、いくつかの高速結合方法が使用されます。</target>
        </trans-unit>
        <trans-unit id="fa8e9b7cfecc247f7bff705d3a3988485befc88c" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed (user) type application expression.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が &lt;code&gt;syntax_error&lt;/code&gt; 式（ユーザー）タイプのアプリケーション式を表していない場合、評価はsyntax_errorをスローします。</target>
        </trans-unit>
        <trans-unit id="4921b565820162e2c60edc6bea683451b957b890" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed &lt;code&gt;file&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式の &lt;code&gt;file&lt;/code&gt; 属性を表していない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="618ce4cbe8b9ff30f535342ccae4d3cf10b313ea" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed application expression.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が &lt;code&gt;syntax_error&lt;/code&gt; 式のアプリケーション式を表していない場合、評価はsyntax_errorをスローします。</target>
        </trans-unit>
        <trans-unit id="dc7fabf51da4bb4e7f1257e9d4dede7a0e536748" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed export attribute.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式のエクスポート属性を表していない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="0f66579024f348d7bb0f390e794429a5be199446" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed function definition.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式の関数定義を表していない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="5406ed8fb8fc38e89372ce85d6f56374209215a4" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed function name.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式の関数名を表していない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="30e8edf0d9aca5a1873eb5bed65e4d0bd6633e76" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed implicit fun.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; の場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローしますが整形式の暗黙のfunを表していないます。</target>
        </trans-unit>
        <trans-unit id="9cbc54914d2a7b46a8529bdd08a5e3617825c157" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed import attribute.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式のインポート属性を表していない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="1ce44851dc662379c8d2493f03d24234da3c175f" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed module attribute.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式のモジュール属性を表していない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="e9d8a2fbebf4113ef3337fce36bf9fbf369a6379" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed record declaration attribute.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式のレコード宣言属性を表していない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="bf9e76769c09ba06d5b9bf9c1944e2acfb2dfc1a" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed record field specifier.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式のレコードフィールド指定子を表していない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="ea05ee075bf7f2350e2fc6059b34cff5cb33b78c" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed type name.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が &lt;code&gt;syntax_error&lt;/code&gt; 式の型名を表していない場合、評価はsyntax_errorをスローします。</target>
        </trans-unit>
        <trans-unit id="363e188710c96a0d0d2f45cbb80bd88dddfe084d" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; does not represent a well-formed wild attribute.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式の野生属性を表していない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="223a63e0ec00c2810aadc750354eca2f59b6acb8" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; is not well-formed.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が整形式でない場合、評価は &lt;code&gt;syntax_error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="527c092490ea3417d05959de64ac4673c4e2242c" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if &lt;code&gt;Node&lt;/code&gt; represents a record expression that is not well-formed.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が &lt;code&gt;syntax_error&lt;/code&gt; 式ではないレコード式を表す場合、評価はsyntax_errorをスローします。</target>
        </trans-unit>
        <trans-unit id="78caee1b9d51c269ecfa277516c192bac800da86" translate="yes" xml:space="preserve">
          <source>The evaluation throws &lt;code&gt;syntax_error&lt;/code&gt; if an ill-formed Erlang construct is encountered.</source>
          <target state="translated">&lt;code&gt;syntax_error&lt;/code&gt; Erlangコンストラクトが検出されると、評価はsyntax_errorをスローします。</target>
        </trans-unit>
        <trans-unit id="e360281a65b675290b77c855abb3396feae48026" translate="yes" xml:space="preserve">
          <source>The event &lt;code&gt;user_unblock&lt;/code&gt; is not triggered when a user is removed from the block list explicitly using the &lt;code&gt;unblock_user&lt;/code&gt; function.</source>
          <target state="translated">ユーザーが &lt;code&gt;unblock_user&lt;/code&gt; 関数を使用して明示的にブロックリストから削除されても、イベント &lt;code&gt;user_unblock&lt;/code&gt; はトリガーされません。</target>
        </trans-unit>
        <trans-unit id="e9adf6f3e6bc9d678bcfcbf56c75783efdc79bfe" translate="yes" xml:space="preserve">
          <source>The event handler must be able to handle the events in this module, see section &lt;code&gt;&lt;a href=&quot;#events&quot;&gt;Events&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">イベントハンドラーは、このモジュールのイベントを処理できる必要があります。「 &lt;code&gt;&lt;a href=&quot;#events&quot;&gt;Events&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="07fadfa5cd3629d9138971bd824a14ddd43b2990" translate="yes" xml:space="preserve">
          <source>The event handler return values are defined in the description of &lt;code&gt;Module:StateName/3&lt;/code&gt; in the &lt;code&gt;gen_statem&lt;/code&gt; manual page, but here is a more readable list:</source>
          <target state="translated">イベントハンドラの戻り値は、 &lt;code&gt;gen_statem&lt;/code&gt; マニュアルページの &lt;code&gt;Module:StateName/3&lt;/code&gt; の説明で定義されていますが、より読みやすいリストを次に示します。</target>
        </trans-unit>
        <trans-unit id="9b5aab32f54b078cb1c0faaf00cf7eb4a19eec31" translate="yes" xml:space="preserve">
          <source>The event handler terminates abnormally and &lt;code&gt;gen_event&lt;/code&gt; logs an error. &lt;code&gt;Opt&lt;/code&gt; is set to the atom &lt;code&gt;terminate&lt;/code&gt; for this case.</source>
          <target state="translated">イベントハンドラーは異常終了し、 &lt;code&gt;gen_event&lt;/code&gt; はエラーをログに記録します。この場合、 &lt;code&gt;Opt&lt;/code&gt; はアトム &lt;code&gt;terminate&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="f7f89716df5f45b5490450ec2ac15b0b43b462e0" translate="yes" xml:space="preserve">
          <source>The event is handled by the default Logger handler.</source>
          <target state="translated">イベントはデフォルトの Logger ハンドラで処理されます。</target>
        </trans-unit>
        <trans-unit id="2545cd2dda316056d2647ebcf0c0876379df39a7" translate="yes" xml:space="preserve">
          <source>The event is handled by the default Logger handler. The log level can be changed to error or info, see &lt;code&gt;&lt;a href=&quot;#warning_map-0&quot;&gt;warning_map/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">イベントは、デフォルトのLoggerハンドラーによって処理されます。ログレベルはエラーまたは情報に変更できます &lt;code&gt;&lt;a href=&quot;#warning_map-0&quot;&gt;warning_map/0&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="836db6626acc8d2b63d4479e731dd11320410d43" translate="yes" xml:space="preserve">
          <source>The event is handled by:</source>
          <target state="translated">イベントを処理します。</target>
        </trans-unit>
        <trans-unit id="670f3a97ec79b1617d1253c86abd242fbfe96cb8" translate="yes" xml:space="preserve">
          <source>The event is made into a message and sent to the event manager. When the event is received, the event manager calls &lt;code&gt;handle_event(Event, State)&lt;/code&gt; for each installed event handler, in the same order as they were added. The function is expected to return a tuple &lt;code&gt;{ok,State1}&lt;/code&gt;, where &lt;code&gt;State1&lt;/code&gt; is a new value for the state of the event handler.</source>
          <target state="translated">イベントはメッセージになり、イベントマネージャに送信されます。イベントを受信すると、イベントマネージャーは &lt;code&gt;handle_event(Event, State)&lt;/code&gt; インストールされている各イベントハンドラーに対して、追加されたのと同じ順序でhandle_event（Event、State）を呼び出します。関数はタプル &lt;code&gt;{ok,State1}&lt;/code&gt; を返すことが期待されます。ここで、 &lt;code&gt;State1&lt;/code&gt; はイベントハンドラーの状態の新しい値です。</target>
        </trans-unit>
        <trans-unit id="b73ba2f2d96d9d903429f26f68141cab3925fb1c" translate="yes" xml:space="preserve">
          <source>The event is sent to the &lt;code&gt;gen_statem&lt;/code&gt;. When the event is received, the &lt;code&gt;gen_statem&lt;/code&gt; calls &lt;code&gt;StateName(cast, Event, Data)&lt;/code&gt;, which is expected to return a tuple &lt;code&gt;{next_state, NewStateName, NewData}&lt;/code&gt;, or &lt;code&gt;{next_state, NewStateName, NewData, Actions}&lt;/code&gt;. &lt;code&gt;StateName&lt;/code&gt; is the name of the current state and &lt;code&gt;NewStateName&lt;/code&gt; is the name of the next state to go to. &lt;code&gt;NewData&lt;/code&gt; is a new value for the server data of the &lt;code&gt;gen_statem&lt;/code&gt;, and &lt;code&gt;Actions&lt;/code&gt; is a list of actions to be performed by the &lt;code&gt;gen_statem&lt;/code&gt; engine.</source>
          <target state="translated">イベントは &lt;code&gt;gen_statem&lt;/code&gt; に送信されます。イベントを受け取ると、 &lt;code&gt;gen_statem&lt;/code&gt; は &lt;code&gt;StateName(cast, Event, Data)&lt;/code&gt; 呼び出します。これは、タプル &lt;code&gt;{next_state, NewStateName, NewData}&lt;/code&gt; または &lt;code&gt;{next_state, NewStateName, NewData, Actions}&lt;/code&gt; を返すことが期待されています。 &lt;code&gt;StateName&lt;/code&gt; は現在の状態の名前で、 &lt;code&gt;NewStateName&lt;/code&gt; は次に移動する状態の名前です。 &lt;code&gt;NewData&lt;/code&gt; は &lt;code&gt;gen_statem&lt;/code&gt; のサーバーデータの新しい値であり、 &lt;code&gt;Actions&lt;/code&gt; は &lt;code&gt;gen_statem&lt;/code&gt; エンジンによって実行されるアクションのリストです。</target>
        </trans-unit>
        <trans-unit id="482c8d79933fe33bda06c58901ec825b1db485ea" translate="yes" xml:space="preserve">
          <source>The event manager essentially maintains a list of &lt;code&gt;{Module, State}&lt;/code&gt; pairs, where each &lt;code&gt;Module&lt;/code&gt; is an event handler, and &lt;code&gt;State&lt;/code&gt; is the internal state of that event handler.</source>
          <target state="translated">イベントマネージャは、本質的にリスト維持 &lt;code&gt;{Module, State}&lt;/code&gt; 各ペア、 &lt;code&gt;Module&lt;/code&gt; イベントハンドラであり、および &lt;code&gt;State&lt;/code&gt; そのイベントハンドラの内部状態です。</target>
        </trans-unit>
        <trans-unit id="76d57c410515c44cc8bc28a8d09b64ef1f2639aa" translate="yes" xml:space="preserve">
          <source>The event manager terminates if it is part of a supervision tree and it is ordered by its supervisor to terminate. Even if it is &lt;strong&gt;not&lt;/strong&gt; part of a supervision tree, it terminates if it receives an &lt;code&gt;'EXIT'&lt;/code&gt; message from its parent.</source>
          <target state="translated">イベントマネージャは、監視ツリーの一部であり、スーパーバイザから終了するように指示された場合に終了します。監視ツリーの一部では&lt;strong&gt;ない&lt;/strong&gt;場合でも、親から &lt;code&gt;'EXIT'&lt;/code&gt; メッセージを受信すると終了します。</target>
        </trans-unit>
        <trans-unit id="c2ce4c38c0aa823b9e5e74e4d8bcd2d1c4f1111f" translate="yes" xml:space="preserve">
          <source>The event tracer framework is made up of four modules:</source>
          <target state="translated">イベントトレーサーフレームワークは4つのモジュールで構成されています。</target>
        </trans-unit>
        <trans-unit id="d0f7cae16de84ad2c9c39b99cb4c031af931d1d5" translate="yes" xml:space="preserve">
          <source>The event types are described in the next sections.</source>
          <target state="translated">イベントの種類については、次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="f1782c63eb3688ca0c9af0612dd19da36a393122" translate="yes" xml:space="preserve">
          <source>The events are also documented in &lt;code&gt;ct_event.erl&lt;/code&gt;. This module can serve as an example of what an event handler for the &lt;code&gt;Common Test&lt;/code&gt; event manager can look like.</source>
          <target state="translated">イベントは &lt;code&gt;ct_event.erl&lt;/code&gt; にも記載されています。このモジュールは、 &lt;code&gt;Common Test&lt;/code&gt; イベントマネージャのイベントハンドラがどのように見えるかの例として役立ちます。</target>
        </trans-unit>
        <trans-unit id="fa54bda16841cabde0c2e6fc00114e179e4c8c7f" translate="yes" xml:space="preserve">
          <source>The events are formatted with a function that is defined by the process that generated the event (with a call to &lt;code&gt;&lt;a href=&quot;#handle_debug-4&quot;&gt;handle_debug/4)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">イベントは、（ &lt;code&gt;&lt;a href=&quot;#handle_debug-4&quot;&gt;handle_debug/4)&lt;/a&gt;&lt;/code&gt; 呼び出して）イベントを生成したプロセスによって定義された関数でフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="e9d4c6263423994284ba2b9c6d7623abbea04412" translate="yes" xml:space="preserve">
          <source>The example &lt;code&gt;Subject&lt;/code&gt; field has one C, two CN and one O part. It is only the CN (Common Name) that is used by hostname verification. The two other (C and O) is not used here even when they contain a domain name like the O part. The C and O parts are defined elsewhere and meaningful only for other functions.</source>
          <target state="translated">例の &lt;code&gt;Subject&lt;/code&gt; フィールドには、1つのC、2つのCN、1つのOの部分があります。ホスト名検証で使用されるのはCN（共通名）のみです。他の2つ（CとO）は、O部分のようなドメイン名が含まれている場合でも、ここでは使用されません。CとOの部分は別の場所で定義されており、他の関数に対してのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="53789d2e92c1fda46d0fae07ec08f87e98bdd01d" translate="yes" xml:space="preserve">
          <source>The example I/O server stores characters in an ETS table, making up a fairly crude RAM file.</source>
          <target state="translated">例の I/O サーバは、文字を ETS テーブルに格納し、かなり粗雑な RAM ファイルを作成しています。</target>
        </trans-unit>
        <trans-unit id="3a18dec0331c54c7d131f7f05a54cda624c44be5" translate="yes" xml:space="preserve">
          <source>The example below sets up trace on the exported functions (default) of module &lt;code&gt;snmp_generic&lt;/code&gt; and all functions of module &lt;code&gt;snmp_generic_mnesia&lt;/code&gt;. With return values (which is default) and timestamps in both cases (which is also default):</source>
          <target state="translated">モジュールのエクスポート機能（デフォルト）上のトレース設定以下の例 &lt;code&gt;snmp_generic&lt;/code&gt; およびモジュールのすべての機能 &lt;code&gt;snmp_generic_mnesia&lt;/code&gt; 。両方の場合の戻り値（デフォルト）とタイムスタンプ（これもデフォルトです）を使用した場合：</target>
        </trans-unit>
        <trans-unit id="40ec67cee0f09e7e1f38061d74546bfcd1432fac" translate="yes" xml:space="preserve">
          <source>The example manager, &lt;code&gt;snmp_ex2_manager&lt;/code&gt;, is a simple example of how to implement an snmp manager using the manager component of the SNMP Development Toolkit.</source>
          <target state="translated">サンプルマネージャー &lt;code&gt;snmp_ex2_manager&lt;/code&gt; は、SNMP開発ツールキットのマネージャーコンポーネントを使用してsnmpマネージャーを実装する方法の簡単な例です。</target>
        </trans-unit>
        <trans-unit id="bfa0e44fefc9103dfe63a4cd1030807bc049d616" translate="yes" xml:space="preserve">
          <source>The example servers so far in this chapter print the full internal state in the error log, for example, when killed by an exit signal or because of an internal error. This state contains both the code lock code and which digits that remain to unlock.</source>
          <target state="translated">この章でこれまでに紹介したサーバの例では、例えば、終了信号によって強制終了された場合や内部エラーによって強制終了された場合などに、内部の完全な状態をエラー・ログに表示します。この状態には、コード・ロック・コードとロック解除のために残っている数字の両方が含まれています。</target>
        </trans-unit>
        <trans-unit id="266205b844f4f6e3267e956b4430b205e05dad6e" translate="yes" xml:space="preserve">
          <source>The example showed the background work that the shell performs just to interpret the first command line. Most work is done by &lt;code&gt;erl_eval&lt;/code&gt; and &lt;code&gt;orddict&lt;/code&gt;.</source>
          <target state="translated">この例は、シェルが最初のコマンドラインを解釈するためだけに実行するバックグラウンド作業を示しています。ほとんどの作業は &lt;code&gt;erl_eval&lt;/code&gt; と &lt;code&gt;orddict&lt;/code&gt; によって行われます。</target>
        </trans-unit>
        <trans-unit id="8f7ad9497d8d5ee7ec068f8bbaf412b434e2689f" translate="yes" xml:space="preserve">
          <source>The example shown can be found in the toolkit distribution.</source>
          <target state="translated">示された例は、ツールキットの配布物に記載されています。</target>
        </trans-unit>
        <trans-unit id="396a52ee352a84ef61ae01c6d40809962c1134e8" translate="yes" xml:space="preserve">
          <source>The example shown, &lt;strong&gt;ex2&lt;/strong&gt;, can be found in the toolkit distribution.</source>
          <target state="translated">示されている例&lt;strong&gt;ex2&lt;/strong&gt;は、ツールキットの配布に含まれています。</target>
        </trans-unit>
        <trans-unit id="ab7c4a3f89e04c623143e7c4c121106db17b0068" translate="yes" xml:space="preserve">
          <source>The example shows some details of how &lt;code&gt;lists:sort/1&lt;/code&gt; works. It used 6047 function calls in the module &lt;code&gt;lists_sort&lt;/code&gt; to complete the work.</source>
          <target state="translated">この例は、 &lt;code&gt;lists:sort/1&lt;/code&gt; がどのように機能するかの詳細を示しています。これは、 &lt;code&gt;lists_sort&lt;/code&gt; モジュールの6047関数呼び出しを使用して作業を完了しました。</target>
        </trans-unit>
        <trans-unit id="361c007ea7390ae514b7d7274e3225478c75cf81" translate="yes" xml:space="preserve">
          <source>The example specifies different algorithms in the two directions (client2server and server2client), for cipher but specifies the same algorithms for mac and compression in both directions. The kex (key exchange) is implicit but public_key is set explicitly.</source>
          <target state="translated">この例では、暗号については2方向(client2serverとserver2client)で異なるアルゴリズムを指定していますが、macと圧縮については両方向で同じアルゴリズムを指定しています。kex(鍵交換)は暗黙的に指定していますが、public_keyは明示的に設定しています。</target>
        </trans-unit>
        <trans-unit id="c97ac9647ab00e65e37eca74aa7e20c8819a73a3" translate="yes" xml:space="preserve">
          <source>The example specifies that:</source>
          <target state="translated">例ではそのように指定されています。</target>
        </trans-unit>
        <trans-unit id="839951ee6733677e5315d3af4eb38dc5514df04f" translate="yes" xml:space="preserve">
          <source>The example specifies the following:</source>
          <target state="translated">例では以下のように指定しています。</target>
        </trans-unit>
        <trans-unit id="5e9468869847362818e3653dadf86b7f55f088d1" translate="yes" xml:space="preserve">
          <source>The example tells us that &quot;Aktiebolaget LM Ericsson &amp;amp; Co&quot; was registered on a Monday (since the return value of the first command is 1), and that the &lt;code&gt;calendar&lt;/code&gt; module needed 9 function calls to calculate that.</source>
          <target state="translated">この例では、「Aktiebolaget LM Ericsson＆Co」が月曜日に登録され（最初のコマンドの戻り値が1であるため）、それを計算するために &lt;code&gt;calendar&lt;/code&gt; モジュールが9つの関数呼び出しを必要としたことがわかります。</target>
        </trans-unit>
        <trans-unit id="4ffa934118cebf3f90cde4787faaae21bba8d06a" translate="yes" xml:space="preserve">
          <source>The exec-option fun is called with the same number of parameters as the arity of the fun, and the result is returned to the client.</source>
          <target state="translated">exec-option fun は fun の arity と同じ数のパラメータで呼び出され、その結果がクライアントに返されます。</target>
        </trans-unit>
        <trans-unit id="b071e577cae1eeba87f1871188878bd3a2873b58" translate="yes" xml:space="preserve">
          <source>The exec-option has existed for a long time but has not previously been documented. The old definition and behaviour are retained but obey the rules 1-4 above if conflicting. The old and undocumented style should not be used in new programs.</source>
          <target state="translated">exec-optionは長い間存在していましたが、これまで文書化されていませんでした。古い定義と動作は保持されていますが、もし矛盾する場合は上記の1-4のルールに従ってください。古い文書化されていないスタイルは、新しいプログラムでは使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="b1895955082bfa77ca24a94c48e11688ebe85d9a" translate="yes" xml:space="preserve">
          <source>The exec-request is not evaluated and an error message is returned to the client.</source>
          <target state="translated">exec-requestは評価されず、エラーメッセージがクライアントに返されます。</target>
        </trans-unit>
        <trans-unit id="0c24b69b74e8713f113ddc4cb4727d97ca1bd44b" translate="yes" xml:space="preserve">
          <source>The executable name (also known as &lt;code&gt;argv[0]&lt;/code&gt;) is not to be specified in this list. The proper executable name is automatically used as &lt;code&gt;argv[0]&lt;/code&gt;, where applicable.</source>
          <target state="translated">実行可能ファイル名（別名 &lt;code&gt;argv[0]&lt;/code&gt; ）は、このリストでは指定されません。該当する場合、適切な実行可能ファイル名が自動的に &lt;code&gt;argv[0]&lt;/code&gt; として使用されます。</target>
        </trans-unit>
        <trans-unit id="7703497b2d1d6d7ae666f5086932193209c602a9" translate="yes" xml:space="preserve">
          <source>The execution of the match expression, when the runtime system decides whether a trace message is to be sent, is as follows:</source>
          <target state="translated">ランタイムシステムがトレースメッセージを送信するかどうかを決定する際のマッチ式の実行は、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f2a8e42abde3dd1496d089519cf10c81e1be53df" translate="yes" xml:space="preserve">
          <source>The execution time of the functions of this module is dominated by the time it takes to sort lists. When no sorting is needed, the execution time is in the worst case proportional to the sum of the sizes of the input arguments and the returned value. A few functions execute in constant time: &lt;code&gt;&lt;a href=&quot;#from_external-2&quot;&gt;from_external/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#is_empty_set-1&quot;&gt;is_empty_set/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#is_set-1&quot;&gt;is_set/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#is_sofs_set-1&quot;&gt;is_sofs_set/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#to_external-1&quot;&gt;to_external/1&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールの関数の実行時間は、リストのソートにかかる時間が支配的です。ソートが不要な場合、実行時間は最悪の場合、入力引数と戻り値のサイズの合計に比例します。一定の時間で実行されるいくつかの関数： &lt;code&gt;&lt;a href=&quot;#from_external-2&quot;&gt;from_external/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#is_empty_set-1&quot;&gt;is_empty_set/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#is_set-1&quot;&gt;is_set/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#is_sofs_set-1&quot;&gt;is_sofs_set/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#to_external-1&quot;&gt;to_external/1&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="420632c27cadb89b2f399b84682c82a68f0a0d31" translate="yes" xml:space="preserve">
          <source>The existing association argument &lt;code&gt;Assoc&lt;/code&gt; can be either a &lt;code&gt;&lt;a href=&quot;#record-sctp_assoc_change&quot;&gt;#sctp_assoc_change{}&lt;/a&gt;&lt;/code&gt; record as returned from, for example, &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#connect-5&quot;&gt;connect/*&lt;/a&gt;&lt;/code&gt;, or from a listening socket in active mode. It can also be just the field &lt;code&gt;assoc_id&lt;/code&gt; integer from such a record.</source>
          <target state="translated">既存の関連付け引数 &lt;code&gt;Assoc&lt;/code&gt; は、たとえば、 &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#connect-5&quot;&gt;connect/*&lt;/a&gt;&lt;/code&gt; 、またはアクティブモードのリスニングソケットから返される &lt;code&gt;&lt;a href=&quot;#record-sctp_assoc_change&quot;&gt;#sctp_assoc_change{}&lt;/a&gt;&lt;/code&gt; レコードのいずれかです。このようなレコードのフィールド &lt;code&gt;assoc_id&lt;/code&gt; 整数のみにすることもできます。</target>
        </trans-unit>
        <trans-unit id="78f8f6f791625c1c8fdb334b26d42632cd9d6c18" translate="yes" xml:space="preserve">
          <source>The exit reasons (such as &lt;code&gt;badarg&lt;/code&gt;) used by the runtime system are described in &lt;code&gt;Errors and Error Handling&lt;/code&gt;.</source>
          <target state="translated">ランタイムシステムで使用される終了理由（ &lt;code&gt;badarg&lt;/code&gt; など）については、 &lt;code&gt;Errors and Error Handling&lt;/code&gt; 説明しています。</target>
        </trans-unit>
        <trans-unit id="d5ae7040a803e376f91e7e700a11833b4ef1676c" translate="yes" xml:space="preserve">
          <source>The exit value can later be retrieved by another thread through &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_join&quot;&gt;erl_drv_thread_join&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">終了値は、後で &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_join&quot;&gt;erl_drv_thread_join&lt;/a&gt;&lt;/code&gt; を介して別のスレッドで取得できます。</target>
        </trans-unit>
        <trans-unit id="5fde359ee385d3e78714231ab869d10ea4d9e799" translate="yes" xml:space="preserve">
          <source>The exported function &lt;code&gt;f/1&lt;/code&gt; is deprecated. Nothing is said whether &lt;code&gt;f/1&lt;/code&gt; will be removed or not.</source>
          <target state="translated">エクスポートされた関数 &lt;code&gt;f/1&lt;/code&gt; は非推奨です。 &lt;code&gt;f/1&lt;/code&gt; が削除されるかどうかは何も言われていません。</target>
        </trans-unit>
        <trans-unit id="47e6598c7dcf7a2b613f4f2e9c2f96997e697806" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;Expr&lt;/code&gt; is evaluated and the patterns &lt;code&gt;Pattern&lt;/code&gt; are sequentially matched against the result. If a match succeeds and the optional guard sequence &lt;code&gt;GuardSeq&lt;/code&gt; is true, the corresponding &lt;code&gt;Body&lt;/code&gt; is evaluated.</source>
          <target state="translated">式 &lt;code&gt;Expr&lt;/code&gt; が評価され、パターン &lt;code&gt;Pattern&lt;/code&gt; が結果に対して順番に照合されます。一致が成功し、オプションのガードシーケンス &lt;code&gt;GuardSeq&lt;/code&gt; がtrueの場合、対応する &lt;code&gt;Body&lt;/code&gt; が評価されます。</target>
        </trans-unit>
        <trans-unit id="eb08adeb4f1b661f39b36975cfaf70cfc2a2ac3a" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;[X || X &amp;lt;- T, X &amp;lt; Pivot]&lt;/code&gt; is the list of all elements in &lt;code&gt;T&lt;/code&gt; that are less than &lt;code&gt;Pivot&lt;/code&gt;.</source>
          <target state="translated">式 &lt;code&gt;[X || X &amp;lt;- T, X &amp;lt; Pivot]&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; 内の &lt;code&gt;Pivot&lt;/code&gt; より小さいすべての要素のリストです。</target>
        </trans-unit>
        <trans-unit id="a1e90b9cd13dd08f75832cad1c6cf3f69ae835ff" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;record_info(fields, record_name)&lt;/code&gt; is processed by the Erlang preprocessor and returns a list of the record field names. With the record definition &lt;code&gt;-record(foo, {x,y,z}).&lt;/code&gt;, the expression &lt;code&gt;record_info(fields,foo)&lt;/code&gt; is expanded to the list &lt;code&gt;[x,y,z]&lt;/code&gt;. It is therefore possible for you to provide the attribute names or to use the &lt;code&gt;record_info/2&lt;/code&gt; notation.</source>
          <target state="translated">式 &lt;code&gt;record_info(fields, record_name)&lt;/code&gt; はErlangプリプロセッサーによって処理され、レコードフィールド名のリストを返します。レコード定義 &lt;code&gt;-record(foo, {x,y,z}).&lt;/code&gt; 、式 &lt;code&gt;record_info(fields,foo)&lt;/code&gt; はリスト &lt;code&gt;[x,y,z]&lt;/code&gt; ます。したがって、属性名を指定したり、 &lt;code&gt;record_info/2&lt;/code&gt; 表記を使用したりすることができます。</target>
        </trans-unit>
        <trans-unit id="46c25aa4f264a013c217a6e6c0cd1f11966c0297" translate="yes" xml:space="preserve">
          <source>The extended encodings are only supported on disk files (opened by function &lt;code&gt;file:open/2&lt;/code&gt;).</source>
          <target state="translated">拡張エンコーディングは、ディスクファイル（関数 &lt;code&gt;file:open/2&lt;/code&gt; で開く）でのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="2a6444a6ceb013adde9ead96d92efa55f0f4c658" translate="yes" xml:space="preserve">
          <source>The extended information written in the file footer to allow stronger verification during table loading from file, as specified to &lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt;. Notice that this function only tells &lt;strong&gt;which&lt;/strong&gt; information is present, not the values in the file footer. The value is a list containing one or more of the atoms &lt;code&gt;object_count&lt;/code&gt; and &lt;code&gt;md5sum&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt; に指定されているように、ファイルからのテーブルのロード中に強力な検証を可能にするために、ファイルフッターに書き込まれた拡張情報。この関数はファイルフッターの値ではなく、存在&lt;strong&gt;する&lt;/strong&gt;情報のみを通知することに注意し&lt;strong&gt;て&lt;/strong&gt;ください。値は、1つ以上のアトム &lt;code&gt;object_count&lt;/code&gt; および &lt;code&gt;md5sum&lt;/code&gt; を含むリストです。</target>
        </trans-unit>
        <trans-unit id="7699dc7022a8a1b6e975d2c9f7052dbc61739221" translate="yes" xml:space="preserve">
          <source>The extensible agent in this toolkit understands the SNMPv1, SNMPv2c and SNMPv3. Recall that SNMP consists of two separate parts, the MIB definition language (SMI), and the protocol. On the protocol level, the agent can be configured to speak v1, v2c, v3 or any combination of them at the same time, i.e. a v1 request gets an v1 reply, a v2c request gets a v2c reply, and a v3 request gets a v3 reply. On the MIB level, the MIB compiler can compile both SMIv1 and SMIv2 MIBs. Once compiled, any of the formats can be loaded into the agent, regardless of which protocol version the agent is configured to use. This means that the agent translates from v2 notifications to v1 traps, and vice versa. For example, v2 MIBs can be loaded into an agent that speaks v1 only. The procedures for the translation between the two protocols are described in RFC 1908 and RFC 2089.</source>
          <target state="translated">このツールキットの拡張可能なエージェントは、SNMPv1、SNMPv2c、SNMPv3を理解します。SNMPは、MIB定義言語(SMI)とプロトコルの2つの部分から構成されていることを覚えておいてください。プロトコルレベルでは、エージェントはv1、v2c、v3、またはそれらの任意の組み合わせを同時に話すように設定できます。MIB レベルでは、MIB コンパイラは SMIv1 と SMIv2 の両方の MIB をコンパイルできます。コンパイルされると、エージェントが使用するように構成されているプロトコル・バージョンに関係なく、いずれのフォーマットもエージェントにロードすることができます。これは、エージェントがv2通知からv1トラップに変換し、その逆も可能であることを意味します。例えば、v2 MIBは、v1のみを話すエージェントにロードすることができます。2つのプロトコル間の変換の手順は、RFC 1908とRFC 2089に記載されています。</target>
        </trans-unit>
        <trans-unit id="57de3f33cd01d18ece5f1f8bac4a92c384bb136f" translate="yes" xml:space="preserve">
          <source>The external program resides in another OS process than the Erlang runtime system. In some cases this is not acceptable. Consider, for example, drivers with very hard time requirements. It is therefore possible to write a program in C according to certain principles, and dynamically link it to the Erlang runtime system. This is called a &lt;strong&gt;linked-in driver&lt;/strong&gt;.</source>
          <target state="translated">外部プログラムは、Erlangランタイムシステムとは別のOSプロセスに存在します。これが受け入れられない場合もあります。たとえば、非常に困難な要件を持つドライバーを検討してください。したがって、特定の原則に従ってCでプログラムを記述し、それをErlangランタイムシステムに動的にリンクすることが可能です。これは&lt;strong&gt;リンクインドライバー&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="483a7ce8598855903aaac7d43e33a8b6a176d6b3" translate="yes" xml:space="preserve">
          <source>The external program resides in another OS process. By default, it reads from standard input (file descriptor 0) and writes to standard output (file descriptor 1). The external program is to terminate when the port is closed.</source>
          <target state="translated">外部プログラムは、別の OS プロセスに存在します。デフォルトでは、標準入力(ファイル記述子 0)から読み込み、標準出力(ファイル記述子 1)に書き込みます。外部プログラムは、ポートが閉じられたときに終了するようになっています。</target>
        </trans-unit>
        <trans-unit id="222a1e19175406b6aa7a82dcd2394935006c713e" translate="yes" xml:space="preserve">
          <source>The external term format is mainly used in the distribution mechanism of Erlang.</source>
          <target state="translated">外部用語フォーマットは主にErlangの配布機構で使われています。</target>
        </trans-unit>
        <trans-unit id="474968dd4f560dffd7389aa9ca6143617036ffea" translate="yes" xml:space="preserve">
          <source>The fact that (*PRUNE:NAME) remembers the name is useless to the Erlang programmer, as names cannot be retrieved.</source>
          <target state="translated">(*PRUNE:NAME)が名前を覚えているという事実はErlangプログラマにとっては無意味です。</target>
        </trans-unit>
        <trans-unit id="e08d6e43db0948fdcb04ad39ee35684175d7b088" translate="yes" xml:space="preserve">
          <source>The fact that (*THEN:NAME) remembers the name is useless to the Erlang programmer, as names cannot be retrieved.</source>
          <target state="translated">(*THEN:NAME)が名前を覚えているという事実はErlangプログラマにとっては意味がありません。</target>
        </trans-unit>
        <trans-unit id="a45ac2df0b9d463c5e0e5db641eebadc3836e7a0" translate="yes" xml:space="preserve">
          <source>The factor when calculating the new timer time (&lt;code&gt;wait_for&lt;/code&gt;).</source>
          <target state="translated">新しいタイマー時間（ &lt;code&gt;wait_for&lt;/code&gt; ）を計算するときの係数。</target>
        </trans-unit>
        <trans-unit id="3b32182822028d3d94853cdaecf2932942b85c07" translate="yes" xml:space="preserve">
          <source>The fastest selective decode is when the decoded type is a primitive type and not so deep in the structure of the top type. &lt;code&gt;selected_decode_Window2&lt;/code&gt; decodes a high constructed value, which explains why this operation is relatively slow.</source>
          <target state="translated">最高速の選択的デコードは、デコードされたタイプがプリミティブタイプであり、トップタイプの構造のそれほど深くない場合です。 &lt;code&gt;selected_decode_Window2&lt;/code&gt; は、構築された高い値をデコードします。これが、この操作が比較的遅い理由を説明しています。</target>
        </trans-unit>
        <trans-unit id="e539ae850e97a5a9057ff2bb6d6c8fcc08bab73d" translate="yes" xml:space="preserve">
          <source>The feature was added in Erlang 5.7.5/OTP R13B04.</source>
          <target state="translated">この機能はErlang 5.7.5/OTP R13B04で追加されました。</target>
        </trans-unit>
        <trans-unit id="a7d9b7c2c0bd1f2fc3f2c7d85835796c435f8f44" translate="yes" xml:space="preserve">
          <source>The field &lt;code&gt;data&lt;/code&gt; in &lt;code&gt;ModData&lt;/code&gt; is a list. This list is the list returned from the last call to &lt;code&gt;do/1&lt;/code&gt;.</source>
          <target state="translated">フィールドの &lt;code&gt;data&lt;/code&gt; で &lt;code&gt;ModData&lt;/code&gt; はリストです。このリストは、最後の &lt;code&gt;do/1&lt;/code&gt; 呼び出しから返されたリストです。</target>
        </trans-unit>
        <trans-unit id="6456be6965c0349e34f864167682f7b31ae172c8" translate="yes" xml:space="preserve">
          <source>The field width specifies the maximum line length. It defaults to 80. The precision specifies the initial indentation of the term. It defaults to the number of characters printed on this line in the &lt;strong&gt;same&lt;/strong&gt; call to &lt;code&gt;&lt;a href=&quot;#write-1&quot;&gt;write/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#format-1&quot;&gt;format/1,2,3&lt;/a&gt;&lt;/code&gt;. For example, using &lt;code&gt;T&lt;/code&gt; above:</source>
          <target state="translated">フィールド幅は行の最大長を指定します。デフォルトは80です。精度は、用語の最初のインデントを指定します。デフォルトは、 &lt;code&gt;&lt;a href=&quot;#write-1&quot;&gt;write/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#format-1&quot;&gt;format/1,2,3&lt;/a&gt;&lt;/code&gt; への&lt;strong&gt;同じ&lt;/strong&gt;呼び出しでこの行に出力される文字数です。たとえば、上記の &lt;code&gt;T&lt;/code&gt; を使用すると：</target>
        </trans-unit>
        <trans-unit id="45f234045151c357743a7016e59e80ebbcce1cad" translate="yes" xml:space="preserve">
          <source>The fields can be in any order, not necessarily the same order as in the record definition, and fields can be omitted. Omitted fields get their respective default value instead.</source>
          <target state="translated">フィールドは、レコード定義と同じ順序である必要はありませんが、任意の順序で指定することができ、フィールドを省略することもできます。省略されたフィールドは、代わりにそれぞれのデフォルト値を取得します。</target>
        </trans-unit>
        <trans-unit id="08c771e3c02df1bde386f66f03b2e079f068c16e" translate="yes" xml:space="preserve">
          <source>The fields in the structure are as follows:</source>
          <target state="translated">構造体のフィールドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4eaa6a16da05e6ff18f84c1ebcd0b7aefc5111a7" translate="yes" xml:space="preserve">
          <source>The fields of record &lt;code&gt;mod&lt;/code&gt; have the following meaning:</source>
          <target state="translated">レコード &lt;code&gt;mod&lt;/code&gt; のフィールドには次の意味があります。</target>
        </trans-unit>
        <trans-unit id="e9f5d2712650575f495813aa5945d3da6ac26a56" translate="yes" xml:space="preserve">
          <source>The fields referred to in the pattern can be given in any order.</source>
          <target state="translated">パターンで参照されるフィールドは、任意の順序で与えることができます。</target>
        </trans-unit>
        <trans-unit id="08db3122b6c1da4a657ae8cba808796dd5cb6b86" translate="yes" xml:space="preserve">
          <source>The fifth argument is the magic cookie.</source>
          <target state="translated">第五引数はマジッククッキーです。</target>
        </trans-unit>
        <trans-unit id="9f962ab964ce6cd051f2dbc6e617195062eacc4f" translate="yes" xml:space="preserve">
          <source>The figures in this section illustrate the steps involved in the development of an SNMP agent.</source>
          <target state="translated">このセクションでは、SNMPエージェントの開発手順を図で説明します。</target>
        </trans-unit>
        <trans-unit id="4cbdd4fa4fa7eb06d2c2cd3f4fc02cfd3c4c58d8" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;FileName&lt;/code&gt; is to be a plain text file and can contain comments and command-line arguments. A comment begins with a &lt;code&gt;#&lt;/code&gt; character and continues until the next end of line character. Backslash (\\) is used as quoting character. All command-line arguments accepted by &lt;code&gt;erl&lt;/code&gt; are allowed, also flag &lt;code&gt;-args_file FileName&lt;/code&gt;. Be careful not to cause circular dependencies between files containing flag &lt;code&gt;-args_file&lt;/code&gt;, though.</source>
          <target state="translated">ファイル &lt;code&gt;FileName&lt;/code&gt; はプレーンテキストファイルであり、コメントとコマンドライン引数を含めることができます。コメントは &lt;code&gt;#&lt;/code&gt; 文字で始まり、次の行末文字まで続きます。バックスラッシュ（\\）は引用文字として使用されます。 &lt;code&gt;erl&lt;/code&gt; が受け入れるすべてのコマンドライン引数が許可され、フラグ &lt;code&gt;-args_file FileName&lt;/code&gt; も許可されます。ただし、フラグ &lt;code&gt;-args_file&lt;/code&gt; を含むファイル間で循環依存を引き起こさないように注意してください。</target>
        </trans-unit>
        <trans-unit id="ef2a4ab9b2cbfd5981924e055242be9d6523c2f1" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;appl.erl&lt;/code&gt; is transferred from the remote to the local host. When the session is opened, the current directory at the remote host is &lt;code&gt;/home/guest&lt;/code&gt;, and &lt;code&gt;/home/fred&lt;/code&gt; at the local host. Before transferring the file, the current local directory is changed to &lt;code&gt;/home/eproj/examples&lt;/code&gt;, and the remote directory is set to &lt;code&gt;/home/guest/appl/examples&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;appl.erl&lt;/code&gt; ファイルがリモートからローカルホストに転送されます。セッションが開かれると、リモートホストのカレントディレクトリは &lt;code&gt;/home/guest&lt;/code&gt; 、および &lt;code&gt;/home/fred&lt;/code&gt; ローカルホストで。ファイルを転送する前に、現在のローカルディレクトリは &lt;code&gt;/home/eproj/examples&lt;/code&gt; に変更され、リモートディレクトリは &lt;code&gt;/home/guest/appl/examples&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="5712e30f3c91d1fa3a6c8c851828ea49909dab0b" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;ch_app.appup&lt;/code&gt;:</source>
          <target state="translated">ファイル &lt;code&gt;ch_app.appup&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ed1f252a17bd502cae6f65b494d7abad29887093" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;foo.DCD&lt;/code&gt; has been created. This file will eventually store all data that is written into the &lt;code&gt;foo&lt;/code&gt; table.</source>
          <target state="translated">ファイル &lt;code&gt;foo.DCD&lt;/code&gt; が作成されました。このファイルは、 &lt;code&gt;foo&lt;/code&gt; テーブルに書き込まれるすべてのデータを最終的に格納します。</target>
        </trans-unit>
        <trans-unit id="cef24f2335b5ba7f0dd2cc5fad1d52fb9d3d09b4" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;releases/FIRST/start.boot&lt;/code&gt; is a copy of our &lt;code&gt;mysystem.boot&lt;/code&gt;</source>
          <target state="translated">ファイル &lt;code&gt;releases/FIRST/start.boot&lt;/code&gt; 私たちのコピーである &lt;code&gt;mysystem.boot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2b8b8152527aa20a7d4a0566192d86d3094913d9" translate="yes" xml:space="preserve">
          <source>The file cannot be found in any of the directories in &lt;code&gt;Path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; のどのディレクトリにもファイルが見つかりません。</target>
        </trans-unit>
        <trans-unit id="fc7fabdf332059e44e2eb17eeef692885d373bdb" translate="yes" xml:space="preserve">
          <source>The file cannot be opened.</source>
          <target state="translated">ファイルを開くことができません。</target>
        </trans-unit>
        <trans-unit id="a9a0257416ae53879f4ba75c38e4782504676962" translate="yes" xml:space="preserve">
          <source>The file descriptor of the socket associated with the port.</source>
          <target state="translated">ポートに関連付けられたソケットのファイルディスクリプタ。</target>
        </trans-unit>
        <trans-unit id="8273bc28b08e309fc9dd43621c30c7519263c61b" translate="yes" xml:space="preserve">
          <source>The file does not exist.</source>
          <target state="translated">ファイルは存在しません。</target>
        </trans-unit>
        <trans-unit id="56db91f9bccb5529a0d13172d3cd82f3fa8e8d12" translate="yes" xml:space="preserve">
          <source>The file gets the same name on the local host.</source>
          <target state="translated">ファイルはローカルホスト上で同じ名前を取得します。</target>
        </trans-unit>
        <trans-unit id="116b44d8dffe981177c481cc8f3dc87f0f7f4c3e" translate="yes" xml:space="preserve">
          <source>The file gets the same name on the remote host.</source>
          <target state="translated">ファイルはリモートホスト上で同じ名前を取得します。</target>
        </trans-unit>
        <trans-unit id="51b34af4a175f2b4aa90381774d3f18723da3b3d" translate="yes" xml:space="preserve">
          <source>The file includes both version 1, 2 and version 3 messages.</source>
          <target state="translated">ファイルにはバージョン1、2、バージョン3のメッセージが含まれています。</target>
        </trans-unit>
        <trans-unit id="9a9625a98d2c47b406a8f7769a6753258132546c" translate="yes" xml:space="preserve">
          <source>The file is a directory and the user is not superuser.</source>
          <target state="translated">ファイルはディレクトリであり、ユーザーはスーパーユーザーではありません。</target>
        </trans-unit>
        <trans-unit id="b21cd2436d24bafe2e40702865abc3fbecc09148" translate="yes" xml:space="preserve">
          <source>The file is in both these cases then best processed using the &lt;code&gt;io&lt;/code&gt; module, as the functions in that module can handle code points beyond the ISO Latin-1 range.</source>
          <target state="translated">このモジュールの関数はISO Latin-1の範囲を超えるコードポイントを処理できるため、ファイルはどちらの場合も &lt;code&gt;io&lt;/code&gt; モジュールを使用して処理するのが最適です。</target>
        </trans-unit>
        <trans-unit id="b2eb2fd7e69007e3b27fc3504af5f6bbd478142a" translate="yes" xml:space="preserve">
          <source>The file is named &lt;code&gt;LocalFile&lt;/code&gt; on the local host.</source>
          <target state="translated">ファイルの名前は、ローカルホストでは &lt;code&gt;LocalFile&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1df462cd01acebe1ec004334e0f1a8efe5b7e5b1" translate="yes" xml:space="preserve">
          <source>The file is named &lt;code&gt;RemoteFile&lt;/code&gt; on the remote host.</source>
          <target state="translated">このファイルは、リモートホストでは &lt;code&gt;RemoteFile&lt;/code&gt; という名前です。</target>
        </trans-unit>
        <trans-unit id="03b686e18d29e8b42dc1dbee506d16c2eb2c5609" translate="yes" xml:space="preserve">
          <source>The file is not opened for reading.</source>
          <target state="translated">ファイルを開いて読むことはできません。</target>
        </trans-unit>
        <trans-unit id="0285680290f8aeb50ca6b7cbc6c042e3ad3dd657" translate="yes" xml:space="preserve">
          <source>The file is not opened for writing.</source>
          <target state="translated">書き込みのためにファイルを開いていません。</target>
        </trans-unit>
        <trans-unit id="e4982f438e094effbe19f49bddea5cc4009fdfdb" translate="yes" xml:space="preserve">
          <source>The file is opened for writing. It is created if it does not exist. Every write operation to a file opened with &lt;code&gt;append&lt;/code&gt; takes place at the end of the file.</source>
          <target state="translated">ファイルは書き込み用に開かれます。存在しない場合は作成されます。で開かれたファイルへのすべての書き込み操作 &lt;code&gt;append&lt;/code&gt; の最後に行われます。</target>
        </trans-unit>
        <trans-unit id="6d726a268237e91f14236fd6ff2803260e2e1532" translate="yes" xml:space="preserve">
          <source>The file is opened for writing. It is created if it does not exist. If the file exists and &lt;code&gt;write&lt;/code&gt; is not combined with &lt;code&gt;read&lt;/code&gt;, the file is truncated.</source>
          <target state="translated">ファイルは書き込み用に開かれます。存在しない場合は作成されます。ファイルが存在し、 &lt;code&gt;write&lt;/code&gt; が結合されていない場合 &lt;code&gt;read&lt;/code&gt; 場合、ファイルは切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="a197a2f03b6e053838765608c827205470531e6d" translate="yes" xml:space="preserve">
          <source>The file is opened for writing. It is created if it does not exist. If the file exists, &lt;code&gt;{error, eexist}&lt;/code&gt; is returned.</source>
          <target state="translated">ファイルは書き込み用に開かれます。存在しない場合は作成されます。ファイルが存在する場合、 &lt;code&gt;{error, eexist}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="1abdf85470ebe2b741440d62063d01b5682aba19" translate="yes" xml:space="preserve">
          <source>The file is opened in the requested mode. &lt;code&gt;IoDevice&lt;/code&gt; is a reference to the file and &lt;code&gt;FullName&lt;/code&gt; is the full name of the file.</source>
          <target state="translated">ファイルは要求されたモードで開かれます。 &lt;code&gt;IoDevice&lt;/code&gt; はファイルへの参照で &lt;code&gt;FullName&lt;/code&gt; 、FullNameはファイルの完全な名前です。</target>
        </trans-unit>
        <trans-unit id="7acf8ec21fa42c861a4f88f31a1e3b43a849b057" translate="yes" xml:space="preserve">
          <source>The file is opened in the requested mode. &lt;code&gt;IoDevice&lt;/code&gt; is a reference to the file.</source>
          <target state="translated">ファイルは要求されたモードで開かれます。 &lt;code&gt;IoDevice&lt;/code&gt; はファイルへの参照です。</target>
        </trans-unit>
        <trans-unit id="916ee7c748bb5e7a2bf22555efc9c7ba3e8e1d3f" translate="yes" xml:space="preserve">
          <source>The file is opened with another &lt;code&gt;encoding&lt;/code&gt; than &lt;code&gt;latin1&lt;/code&gt; and the data in the file cannot be translated to the byte-oriented data that this function returns.</source>
          <target state="translated">ファイルは &lt;code&gt;latin1&lt;/code&gt; 以外の &lt;code&gt;encoding&lt;/code&gt; で開かれ、ファイル内のデータは、この関数が返すバイト指向のデータに変換できません。</target>
        </trans-unit>
        <trans-unit id="af4cd6106424f7957ea5b09a69738ba162a42d0a" translate="yes" xml:space="preserve">
          <source>The file is opened with another &lt;code&gt;encoding&lt;/code&gt; than &lt;code&gt;latin1&lt;/code&gt; and the data on the file cannot be translated to the byte-oriented data that this function returns.</source>
          <target state="translated">ファイルは &lt;code&gt;latin1&lt;/code&gt; 以外の &lt;code&gt;encoding&lt;/code&gt; で開かれ、ファイルのデータは、この関数が返すバイト指向のデータに変換できません。</target>
        </trans-unit>
        <trans-unit id="f1447089fad09b9920a3125bbbcb71e40fcf03b8" translate="yes" xml:space="preserve">
          <source>The file is read and evaluated. &lt;code&gt;FullName&lt;/code&gt; is the full name of the file and &lt;code&gt;Value&lt;/code&gt; the value of the last expression.</source>
          <target state="translated">ファイルが読み取られ、評価されます。 &lt;code&gt;FullName&lt;/code&gt; はファイルのフルネームで、 &lt;code&gt;Value&lt;/code&gt; はは最後の式の値です。</target>
        </trans-unit>
        <trans-unit id="ab1ff8d4200f6f26fb7134240fe2228fd2ecd31d" translate="yes" xml:space="preserve">
          <source>The file is read and evaluated. &lt;code&gt;FullName&lt;/code&gt; is the full name of the file.</source>
          <target state="translated">ファイルが読み取られ、評価されます。 &lt;code&gt;FullName&lt;/code&gt; は、ファイルの完全な名前です。</target>
        </trans-unit>
        <trans-unit id="2975a465dfe23956015ba6c274ed78e16024bfa9" translate="yes" xml:space="preserve">
          <source>The file is read and evaluated. &lt;code&gt;Value&lt;/code&gt; is the value of the last expression.</source>
          <target state="translated">ファイルが読み取られ、評価されます。 &lt;code&gt;Value&lt;/code&gt; は最後の式の値です。</target>
        </trans-unit>
        <trans-unit id="e333fb72ddfdad9f98da967fd861cc9cecde73c6" translate="yes" xml:space="preserve">
          <source>The file is read by the application controller when an application is loaded/started. It is also used by the functions in &lt;code&gt;systools&lt;/code&gt;, for example when generating start scripts.</source>
          <target state="translated">このファイルは、アプリケーションがロード/開始されるときに、アプリケーションコントローラーによって読み取られます。 &lt;code&gt;systools&lt;/code&gt; の関数でも使用されます、起動スクリプトを生成するときなどます。</target>
        </trans-unit>
        <trans-unit id="d522dbd681f4cd878e0a0aeb3cbd943d113a8c38" translate="yes" xml:space="preserve">
          <source>The file is successfully read. &lt;code&gt;FullName&lt;/code&gt; is the full name of the file.</source>
          <target state="translated">ファイルは正常に読み取られました。 &lt;code&gt;FullName&lt;/code&gt; は、ファイルの完全な名前です。</target>
        </trans-unit>
        <trans-unit id="e117edda70b67ee50f9d2f7fce2e7996b73bd637" translate="yes" xml:space="preserve">
          <source>The file must be in &lt;code&gt;ssh-keygen moduli file format&lt;/code&gt;. The file is read when the daemon starts.</source>
          <target state="translated">ファイルは &lt;code&gt;ssh-keygen moduli file format&lt;/code&gt; 必要があります。デーモンの起動時にファイルが読み込まれます。</target>
        </trans-unit>
        <trans-unit id="80ee3eac8f806ec9cde470e2d7d3f7c22d220194" translate="yes" xml:space="preserve">
          <source>The file must be named &lt;code&gt;Rel.rel&lt;/code&gt;, where &lt;code&gt;Rel&lt;/code&gt; is a unique name.</source>
          <target state="translated">ファイルには、名前を付ける必要があります &lt;code&gt;Rel.rel&lt;/code&gt; 、 &lt;code&gt;Rel&lt;/code&gt; ユニークな名前です。</target>
        </trans-unit>
        <trans-unit id="7582f5f80d20de2502ad5d3c778be456df031796" translate="yes" xml:space="preserve">
          <source>The file must contain a single Erlang term, which is called an &lt;strong&gt;application specification&lt;/strong&gt;:</source>
          <target state="translated">ファイルには、&lt;strong&gt;アプリケーション仕様&lt;/strong&gt;と呼ばれる単一のErlang用語が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="d15a1263b243302ad1b99430abd18bc925e32e3e" translate="yes" xml:space="preserve">
          <source>The file must have one or more three-tuples &lt;code&gt;{Size=integer(),G=integer(),P=integer()}&lt;/code&gt; terminated by a dot. The file is read when the daemon starts.</source>
          <target state="translated">ファイルには、ドットで終了する1つ以上の3タプル &lt;code&gt;{Size=integer(),G=integer(),P=integer()}&lt;/code&gt; です。デーモンの起動時にファイルが読み取られます。</target>
        </trans-unit>
        <trans-unit id="56458bdbcf5690ec8658261e5325164ce2a2a111" translate="yes" xml:space="preserve">
          <source>The file name of the current module.</source>
          <target state="translated">現在のモジュールのファイル名。</target>
        </trans-unit>
        <trans-unit id="a5d1d6d598f59230fdf0a71188330092a7de64cf" translate="yes" xml:space="preserve">
          <source>The file name requirement on the engine dynamic library can differ between SSL versions.</source>
          <target state="translated">エンジン・ダイナミック・ライブラリに必要なファイル名は、SSLのバージョンによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="5cf117b829fc2877fe7b8ccf793bd866ee82bf7d" translate="yes" xml:space="preserve">
          <source>The file names consist of eight hexadecimal digits followed by &lt;code&gt;.rN&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer, e.g. &lt;code&gt;1a2b3c4d.r0&lt;/code&gt;. For the first version of the CRL, &lt;code&gt;N&lt;/code&gt; starts at zero, and for each new version, &lt;code&gt;N&lt;/code&gt; is incremented by one. The OpenSSL utility &lt;code&gt;c_rehash&lt;/code&gt; creates symlinks according to this pattern.</source>
          <target state="translated">ファイル名は、8桁の16進数とそれに続く &lt;code&gt;.rN&lt;/code&gt; で構成されます &lt;code&gt;N&lt;/code&gt; は整数です（例： &lt;code&gt;1a2b3c4d.r0&lt;/code&gt; )。CRLの最初のバージョンでは、 &lt;code&gt;N&lt;/code&gt; はゼロから始まり、新しいバージョンごとに &lt;code&gt;N&lt;/code&gt; は1ずつ増加します。OpenSSLユーティリティ &lt;code&gt;c_rehash&lt;/code&gt; は、このパターンに従ってシンボリックリンクを作成します。</target>
        </trans-unit>
        <trans-unit id="d7d30bf4111cf6d645a316a6236bd904ed813968" translate="yes" xml:space="preserve">
          <source>The file offset in the zip archive (used internally)</source>
          <target state="translated">zip アーカイブ内のファイルオフセット (内部で使用)</target>
        </trans-unit>
        <trans-unit id="98c7f36c4669e374fe284c2ff98a9ddaef5cf51f" translate="yes" xml:space="preserve">
          <source>The file permissions as the sum of the following bit values:</source>
          <target state="translated">以下のビット値の合計としてのファイルパーミッション。</target>
        </trans-unit>
        <trans-unit id="9515e875a26b329b033fd7640f399fd9edd7196e" translate="yes" xml:space="preserve">
          <source>The file privileges and ownership of the &lt;code&gt;mod_syslog&lt;/code&gt; utility must be modified.</source>
          <target state="translated">&lt;code&gt;mod_syslog&lt;/code&gt; のファイル特権と所有権ユーティリティ変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="e4f22a3c177173ba882d73ea3867a6b6cb6d9dc7" translate="yes" xml:space="preserve">
          <source>The file suffix of the incoming URL mapped into a &lt;code&gt;MimeType&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MimeType&lt;/code&gt; にマップされた着信URLのファイルサフィックス</target>
        </trans-unit>
        <trans-unit id="f4eba4c3a153db010c6d9b7a15465b2d5b3ce266" translate="yes" xml:space="preserve">
          <source>The file suffix of the incoming URL mapped into a &lt;code&gt;MimeType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MimeType&lt;/code&gt; にマップされた着信URLのファイルサフィックス。</target>
        </trans-unit>
        <trans-unit id="f294360a334b35b807188de18da95f7579b0fb4d" translate="yes" xml:space="preserve">
          <source>The file system on the other host has a different structure to the the master.</source>
          <target state="translated">もう一方のホストのファイルシステムは、マスターとは異なる構造になっています。</target>
        </trans-unit>
        <trans-unit id="c75ca2cbc895f2093ee4a98814185b1afc3a8e1a" translate="yes" xml:space="preserve">
          <source>The file system path to the directory where the driver object file is located. The filename of the object file (minus extension) must correspond to the driver name (used in parameter &lt;code&gt;Name&lt;/code&gt;) and the driver must identify itself with the same name. &lt;code&gt;Path&lt;/code&gt; can be provided as an &lt;strong&gt;iolist()&lt;/strong&gt;, meaning it can be a list of other &lt;code&gt;iolist()&lt;/code&gt;s, characters (8-bit integers), or binaries, all to be flattened into a sequence of characters.</source>
          <target state="translated">ドライバーオブジェクトファイルが配置されているディレクトリへのファイルシステムパス。オブジェクトファイルのファイル名（マイナスの拡張子）は（パラメーター &lt;code&gt;Name&lt;/code&gt; で使用される）ドライバー名に対応し、ドライバーは同じ名前で自身を識別する必要があります。 &lt;code&gt;Path&lt;/code&gt; は&lt;strong&gt;iolist（）&lt;/strong&gt;として提供できます。つまり、他の &lt;code&gt;iolist()&lt;/code&gt; 、文字（8ビット整数）、またはバイナリのリストであり、すべて文字のシーケンスにフラット化されます。</target>
        </trans-unit>
        <trans-unit id="bf2eb9cc34b90180610fbc75837cbfad30b948cc" translate="yes" xml:space="preserve">
          <source>The file trace driver expects a filename or a wrap files specification as parameter. A file is written with a high degree of buffering, why all trace messages are &lt;strong&gt;not&lt;/strong&gt; guaranteed to be saved in the file in case of a system crash. That is the price to pay for low tracing overhead.</source>
          <target state="translated">ファイルトレースドライバーは、パラメーターとしてファイル名またはラップファイルの指定を想定しています。ファイルは、すべてのトレース・メッセージがある理由バッファリング度の高い、と書かれ&lt;strong&gt;ていません&lt;/strong&gt;、システムがクラッシュした場合にファイルに保存されるとん。これは、トレースのオーバーヘッドを低く抑えるための代償です。</target>
        </trans-unit>
        <trans-unit id="083d3049caca9cb4909e07d982cf1c0a253eda8d" translate="yes" xml:space="preserve">
          <source>The file transfer type is set to the default of the FTP server when the session is opened. This is usually ASCCI mode.</source>
          <target state="translated">ファイル転送タイプは、セッションを開いたときのFTPサーバのデフォルトに設定されています。これは通常ASCCIモードです。</target>
        </trans-unit>
        <trans-unit id="d7d87c17221873fd0d28c7a0cf27f97994b73b47" translate="yes" xml:space="preserve">
          <source>The file used must be opened using the &lt;code&gt;raw&lt;/code&gt; flag, and the process calling &lt;code&gt;sendfile&lt;/code&gt; must be the controlling process of the socket. See &lt;code&gt;&lt;a href=&quot;gen_tcp#controlling_process-2&quot;&gt;gen_tcp:controlling_process/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用するファイルは &lt;code&gt;raw&lt;/code&gt; フラグを使用して開く必要があり、 &lt;code&gt;sendfile&lt;/code&gt; を呼び出すプロセスはソケットの制御プロセスでなければなりません。 &lt;code&gt;&lt;a href=&quot;gen_tcp#controlling_process-2&quot;&gt;gen_tcp:controlling_process/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c0739dac79b5f4f1aa7ca70031ae5a16c934c399" translate="yes" xml:space="preserve">
          <source>The file was read and evaluated.</source>
          <target state="translated">ファイルを読み込んで評価した。</target>
        </trans-unit>
        <trans-unit id="4e58a2f1e91ddce67de54ef340e3da2cb9cb63a1" translate="yes" xml:space="preserve">
          <source>The file was successfully read.</source>
          <target state="translated">ファイルの読み込みに成功しました。</target>
        </trans-unit>
        <trans-unit id="c72d65e1c03281b49322438db24cb3e3334edd0b" translate="yes" xml:space="preserve">
          <source>The file, which must exist, is opened for reading.</source>
          <target state="translated">存在しなければならないファイルを開いて読み込ませる。</target>
        </trans-unit>
        <trans-unit id="552bd26b6c475a1374de92e4954676c79da00420" translate="yes" xml:space="preserve">
          <source>The filename</source>
          <target state="translated">ファイル名</target>
        </trans-unit>
        <trans-unit id="26016e882c6ac80280490e30771a8dba2723ae37" translate="yes" xml:space="preserve">
          <source>The filename must be &lt;code&gt;syslog.conf.OTP&lt;/code&gt;. The path must be the same as the backup copy.</source>
          <target state="translated">ファイル名は &lt;code&gt;syslog.conf.OTP&lt;/code&gt; である必要があります。パスはバックアップコピーと同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="29478f77cee4c57798b46ebd0b4dff9c27a01cc8" translate="yes" xml:space="preserve">
          <source>The filename of the copy must be &lt;code&gt;syslog.conf.ORIG&lt;/code&gt;. The directory location is optional; usually it is &lt;code&gt;/etc&lt;/code&gt;. A simple way to do this is to issue the following command:</source>
          <target state="translated">コピーのファイル名は &lt;code&gt;syslog.conf.ORIG&lt;/code&gt; でなければなりません。ディレクトリの場所はオプションです。通常は &lt;code&gt;/etc&lt;/code&gt; ですです。これを行う簡単な方法は、次のコマンドを発行することです。</target>
        </trans-unit>
        <trans-unit id="5af1d694b8b3cdebbfc3c0f00daedcbcdd080514" translate="yes" xml:space="preserve">
          <source>The filename of the crashdump.</source>
          <target state="translated">クラッシュダンプのファイル名。</target>
        </trans-unit>
        <trans-unit id="f51e4a22a3fd6a63b9b7c7d8ef4afc50be94d9de" translate="yes" xml:space="preserve">
          <source>The filename translation mode can be read with function &lt;code&gt;file:native_name_encoding/0&lt;/code&gt;, which returns &lt;code&gt;latin1&lt;/code&gt; (bytewise encoding) or &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="translated">ファイル名変換モードは、関数 &lt;code&gt;file:native_name_encoding/0&lt;/code&gt; で読み取ることができます。これは、 &lt;code&gt;latin1&lt;/code&gt; （バイト単位のエンコード）または &lt;code&gt;utf8&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0bbf7541fe0325c793eec29d4cd8ad35ed00aa5e" translate="yes" xml:space="preserve">
          <source>The files are unzipped to memory or to file, depending on the options specified to function &lt;code&gt;&lt;a href=&quot;#zip_open-1&quot;&gt;zip_open/1,2&lt;/a&gt;&lt;/code&gt; when opening the archive.</source>
          <target state="translated">アーカイブを開くときに関数 &lt;code&gt;&lt;a href=&quot;#zip_open-1&quot;&gt;zip_open/1,2&lt;/a&gt;&lt;/code&gt; に指定されたオプションに応じて、ファイルはメモリまたはファイルに解凍されます。</target>
        </trans-unit>
        <trans-unit id="e8c783c92fcd9bf942dd424f42fc61d302ddafc6" translate="yes" xml:space="preserve">
          <source>The files are:</source>
          <target state="translated">ファイルは</target>
        </trans-unit>
        <trans-unit id="c0b32d670fd0928ee57d4da38842a479ce59c02a" translate="yes" xml:space="preserve">
          <source>The filter &lt;strong&gt;did not pass&lt;/strong&gt;, and the log event is immediately discarded.</source>
          <target state="translated">フィルター&lt;strong&gt;は通過せず&lt;/strong&gt;、ログイベントはすぐに破棄されます。</target>
        </trans-unit>
        <trans-unit id="2fec5992ce5b4648b9da53b9fca03126f14195c8" translate="yes" xml:space="preserve">
          <source>The filter &lt;strong&gt;passed&lt;/strong&gt;. The next handler filter, if any, is applied. If no more filters exist for this handler, the log event is forwarded to the handler callback.</source>
          <target state="translated">フィルターは&lt;strong&gt;通過しました&lt;/strong&gt;。次のハンドラーフィルターがあれば、それが適用されます。このハンドラにこれ以上フィルタが存在しない場合、ログイベントはハンドラコールバックに転送されます。</target>
        </trans-unit>
        <trans-unit id="c64e728f01227118a6f0a504e74466c80ec0c979" translate="yes" xml:space="preserve">
          <source>The filter &lt;strong&gt;passed&lt;/strong&gt;. The next primary filter, if any, is applied. If no more primary filters exist, the log event is forwarded to the handler part of Logger, where handler filters are applied.</source>
          <target state="translated">フィルターは&lt;strong&gt;通過しました&lt;/strong&gt;。次の1次フィルターがあれば、それが適用されます。プライマリフィルターが存在しない場合、ログイベントはLoggerのハンドラー部分に転送され、ハンドラーフィルターが適用されます。</target>
        </trans-unit>
        <trans-unit id="7f4778fe9a2d1bb2efd40561548fc65defaa0949" translate="yes" xml:space="preserve">
          <source>The filter compares the value of the &lt;code&gt;domain&lt;/code&gt; field in the log event's metadata (&lt;code&gt;Domain&lt;/code&gt;) against &lt;code&gt;MatchDomain&lt;/code&gt;. The filter matches if the value of &lt;code&gt;Compare&lt;/code&gt; is:</source>
          <target state="translated">フィルターは、ログイベントのメタデータ（ &lt;code&gt;Domain&lt;/code&gt; ）の &lt;code&gt;domain&lt;/code&gt; フィールドの値を &lt;code&gt;MatchDomain&lt;/code&gt; と比較します。 &lt;code&gt;Compare&lt;/code&gt; の値が次の場合、フィルターは一致します。</target>
        </trans-unit>
        <trans-unit id="fb57b499845a0930b0e37c62f80d02bcd2cb10f3" translate="yes" xml:space="preserve">
          <source>The filter compares the value of the event's log level (&lt;code&gt;Level&lt;/code&gt;) to &lt;code&gt;MatchLevel&lt;/code&gt; by calling &lt;code&gt;&lt;a href=&quot;logger#compare_levels-2&quot;&gt;logger:compare_levels(Level, MatchLevel)&lt;/a&gt;&lt;/code&gt;. The filter matches if the value of &lt;code&gt;Operator&lt;/code&gt; is:</source>
          <target state="translated">フィルターは、 &lt;code&gt;&lt;a href=&quot;logger#compare_levels-2&quot;&gt;logger:compare_levels(Level, MatchLevel)&lt;/a&gt;&lt;/code&gt; 呼び出して、イベントのログレベル（ &lt;code&gt;Level&lt;/code&gt; ）の値を &lt;code&gt;MatchLevel&lt;/code&gt; と比較します。フィルターは、 &lt;code&gt;Operator&lt;/code&gt; の値が次の場合に一致します。</target>
        </trans-unit>
        <trans-unit id="beafc4357de407d81ed4a70bb524b690f9b684ec" translate="yes" xml:space="preserve">
          <source>The filter fun is called with the log event as the first parameter, and the specified &lt;code&gt;filter_args()&lt;/code&gt; as the second parameter.</source>
          <target state="translated">フィルターfunは、最初のパラメーターとしてログイベントを、2番目のパラメーターとして指定された &lt;code&gt;filter_args()&lt;/code&gt; を使用して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="109bfa797ec0aa4b76af245de1501f0741f1a95b" translate="yes" xml:space="preserve">
          <source>The filter function can return &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;ignore&lt;/code&gt; or the (possibly modified) log event.</source>
          <target state="translated">フィルター関数は、 &lt;code&gt;stop&lt;/code&gt; 、 &lt;code&gt;ignore&lt;/code&gt; 、または（変更された可能性がある）ログイベントを返すことができます。</target>
        </trans-unit>
        <trans-unit id="fd11c27d7fbe5210f24b8d1e40d0d071f2e3ec4c" translate="yes" xml:space="preserve">
          <source>The filter has no knowledge of the log event. The next handler filter, if any, is applied. If no more filters exist for this handler, the value of the &lt;code&gt;filter_default&lt;/code&gt; configuration parameter for the handler specifies if the log event shall be discarded or forwarded to the handler callback.</source>
          <target state="translated">フィルターはログイベントを認識していません。次のハンドラーフィルターがあれば、それが適用されます。このハンドラーにフィルターがもう存在しない場合、ハンドラーの &lt;code&gt;filter_default&lt;/code&gt; 構成パラメーターの値は、ログイベントを破棄するか、ハンドラーコールバックに転送するかを指定します。</target>
        </trans-unit>
        <trans-unit id="ddc0b8589e411612b38fdd950c86be1e96f3d934" translate="yes" xml:space="preserve">
          <source>The filter has no knowledge of the log event. The next primary filter, if any, is applied. If no more primary filters exist, the value of the primary &lt;code&gt;filter_default&lt;/code&gt; configuration parameter specifies if the log event shall be discarded or forwarded to the handler part.</source>
          <target state="translated">フィルターはログイベントを認識していません。次の1次フィルターがあれば、それが適用されます。これ以上プライマリフィルターが存在しない場合、primary &lt;code&gt;filter_default&lt;/code&gt; 構成パラメーターの値は、ログイベントを破棄するか、ハンドラーパーツに転送するかを指定します。</target>
        </trans-unit>
        <trans-unit id="41d4a36552fad1262f02d4b7fdc2ca2fb3a329a9" translate="yes" xml:space="preserve">
          <source>The filter returns &lt;code&gt;ignore&lt;/code&gt; for all other log events.</source>
          <target state="translated">フィルターは、他のすべてのログイベントに対して &lt;code&gt;ignore&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dfb975166536b9370277fc5b05c55860c6bb1974" translate="yes" xml:space="preserve">
          <source>The final result is automatically compacted (compare &lt;code&gt;&lt;a href=&quot;#compact-1&quot;&gt;compact/1&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">最終的な結果は自動的に圧縮されます（compare &lt;code&gt;&lt;a href=&quot;#compact-1&quot;&gt;compact/1&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1526dc18038f8fccad4ff828c37ad6dc7b944d4a" translate="yes" xml:space="preserve">
          <source>The final use of backslash is for certain simple assertions. An assertion specifies a condition that must be met at a particular point in a match, without consuming any characters from the subject string. The use of subpatterns for more complicated assertions is described below. The following are the backslashed assertions:</source>
          <target state="translated">最後にバックスラッシュを使用するのは、特定の単純なアサーションです。アサーションは、マッチの特定の時点で満たす必要がある条件を指定します。より複雑なアサーションでのサブパターンの使用については、以下で説明します。以下に、バックスラッシュを使用したアサーションを示します。</target>
        </trans-unit>
        <trans-unit id="e6d536c130f15c0094632e977773d39a9eb1e1bc" translate="yes" xml:space="preserve">
          <source>The finish time can be specified as &lt;code&gt;HHMMSS&lt;/code&gt; and is then interpreted as a time today (or possibly tomorrow), but can also be specified as &lt;code&gt;YYMoMoDDHHMMSS&lt;/code&gt;, for example, &lt;code&gt;-until 071001120000&lt;/code&gt; or &lt;code&gt;{until,&quot;071001120000&quot;}&lt;/code&gt;. This means that the tests are executed and (if time allows) repeated, until 12 o'clock on the 1st of October 2007.</source>
          <target state="translated">終了時刻は &lt;code&gt;HHMMSS&lt;/code&gt; として指定でき、今日（またはおそらく明日）の時刻として解釈されますが、 &lt;code&gt;YYMoMoDDHHMMSS&lt;/code&gt; として指定することもできます（例： &lt;code&gt;-until 071001120000&lt;/code&gt; または &lt;code&gt;{until,&quot;071001120000&quot;}&lt;/code&gt; 。つまり、2007年10月1日の12時まで、テストが実行され（時間が許せば）繰り返されます。</target>
        </trans-unit>
        <trans-unit id="6e0ddb058b574885245c8e1eb45a6f332a495743" translate="yes" xml:space="preserve">
          <source>The first 4-bits segment of &lt;code&gt;Dgram&lt;/code&gt; is not equal to 4.</source>
          <target state="translated">&lt;code&gt;Dgram&lt;/code&gt; の最初の4ビットセグメントが4に等しくありません。</target>
        </trans-unit>
        <trans-unit id="8565b4f54aaccfcff566979872a65ab909534a87" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;[&lt;/code&gt; bracket is read as &quot;build the list&quot;.</source>
          <target state="translated">最初の &lt;code&gt;[&lt;/code&gt; ブラケットは、「リストを作成する」と解釈されます。</target>
        </trans-unit>
        <trans-unit id="97b9da02f0f552217d5f6a05e46d62406ee40ed2" translate="yes" xml:space="preserve">
          <source>The first and longest match is preferred to a shorter, which is illustrated by the following example:</source>
          <target state="translated">で例示されるように、第1の一致と最長の一致は、短い方が好ましい。</target>
        </trans-unit>
        <trans-unit id="6694406df610cd0f2b38fa2673a9cd35f9806c5a" translate="yes" xml:space="preserve">
          <source>The first argument is &lt;code&gt;{down,Vsn}&lt;/code&gt; if there is a downgrade, or &lt;code&gt;Vsn&lt;/code&gt; if there is a upgrade. The term &lt;code&gt;Vsn&lt;/code&gt; is fetched from the 'original' version of the module, that is, the version you are upgrading from, or downgrading to.</source>
          <target state="translated">最初の引数は、ダウングレードがある場合は &lt;code&gt;{down,Vsn}&lt;/code&gt; 、アップグレードがある場合は &lt;code&gt;Vsn&lt;/code&gt; です。 &lt;code&gt;Vsn&lt;/code&gt; という用語は、モジュールの「元の」バージョン、つまりアップグレード元またはダウングレード先のバージョンから取得されます。</target>
        </trans-unit>
        <trans-unit id="ce41fd29eb3e83bdeb71be9c3fb406a35efdd54a" translate="yes" xml:space="preserve">
          <source>The first argument is &lt;strong&gt;not&lt;/strong&gt; a problem. It is variable, but it is a variable in all clauses. The problem is the variable in the second argument, &lt;code&gt;Xs&lt;/code&gt;, in the middle clause. Because the variable can match anything, the compiler is not allowed to rearrange the clauses, but must generate code that matches them in the order written.</source>
          <target state="translated">最初の引数は問題ではあり&lt;strong&gt;ません&lt;/strong&gt;。変数ですが、すべての句で変数です。問題は、中央の節の2番目の引数 &lt;code&gt;Xs&lt;/code&gt; の変数です。変数は何にでも一致する可能性があるため、コンパイラーは節を再配置することはできませんが、記述された順序でそれらに一致するコードを生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="32cd604e114cd5b8cc3d471ee8e9bda4b1cee80b" translate="yes" xml:space="preserve">
          <source>The first argument is the host name.</source>
          <target state="translated">第一引数はホスト名です。</target>
        </trans-unit>
        <trans-unit id="d1c68fc721622601f7d260f14b31c96cc4eaab50" translate="yes" xml:space="preserve">
          <source>The first argument is the integer used to construct the node name.</source>
          <target state="translated">第1引数には、ノード名を構築するために使用される整数を指定します。</target>
        </trans-unit>
        <trans-unit id="f32a2498eb521e7ca9e58ea1c17356aedb30f6e1" translate="yes" xml:space="preserve">
          <source>The first argument is the internal state &lt;code&gt;State&lt;/code&gt;, passed from function &lt;code&gt;sys:handle_system_msg(Request, From, Parent, Module, Deb, State)&lt;/code&gt;, and called by the special process when a system message is received. In &lt;code&gt;ch4&lt;/code&gt;, the internal state is the set of available channels &lt;code&gt;Chs&lt;/code&gt;.</source>
          <target state="translated">最初の引数は内部状態 &lt;code&gt;State&lt;/code&gt; で、関数 &lt;code&gt;sys:handle_system_msg(Request, From, Parent, Module, Deb, State)&lt;/code&gt; から渡され、システムメッセージが受信されたときに特別なプロセスによって呼び出されます。で &lt;code&gt;ch4&lt;/code&gt; 、内部状態は、利用可能なチャネルのセットである &lt;code&gt;Chs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c12ca04f8508bcca65e776d0a609f335e9ddf7b5" translate="yes" xml:space="preserve">
          <source>The first argument is the name of the &lt;code&gt;gen_statem&lt;/code&gt; and must agree with the name used to start it. So, we use the same macro &lt;code&gt;?NAME&lt;/code&gt; as when starting. &lt;code&gt;{button,Digit}&lt;/code&gt; is the event content.</source>
          <target state="translated">最初の引数は &lt;code&gt;gen_statem&lt;/code&gt; の名前であり、それを開始するために使用された名前と一致する必要があります。したがって、起動時と同じマクロ &lt;code&gt;?NAME&lt;/code&gt; を使用します。 &lt;code&gt;{button,Digit}&lt;/code&gt; はイベントコンテンツです。</target>
        </trans-unit>
        <trans-unit id="aefd6aec912ef4431dbd33b887c26f8e830aec81" translate="yes" xml:space="preserve">
          <source>The first argument must be the name of the Erlang module as a C-identifier. It will be stringified by the macro.</source>
          <target state="translated">最初の引数はErlangモジュールの名前をC-identifierとして指定しなければなりません。マクロによって文字列化されます。</target>
        </trans-unit>
        <trans-unit id="6d796fe4c495cce6f5931a9ed26cf94f76f97e87" translate="yes" xml:space="preserve">
          <source>The first argument to &lt;code&gt;ttb:format/1,2&lt;/code&gt; specifies which binary log(s) to format. This is usually the name of a directory that &lt;code&gt;ttb&lt;/code&gt; created during log fetch. Unless option &lt;code&gt;disable_sort&lt;/code&gt; is provided, the logs from different files are always sorted according to time-stamp in traces.</source>
          <target state="translated">&lt;code&gt;ttb:format/1,2&lt;/code&gt; の最初の引数は、フォーマットするバイナリログを指定します。これは通常、ログのフェッチ中に &lt;code&gt;ttb&lt;/code&gt; が作成したディレクトリの名前です。オプション &lt;code&gt;disable_sort&lt;/code&gt; が指定されていない限り、さまざまなファイルのログは常にトレースのタイムスタンプに従ってソートされます。</target>
        </trans-unit>
        <trans-unit id="f1fc18bc1a4475d49a5401a7876f067a569b9a43" translate="yes" xml:space="preserve">
          <source>The first argument to these functions is the name of the test case. This value can be used with pattern matching in function clauses or conditional expressions to choose different initialization and cleanup routines for different test cases, or perform the same routine for many, or all, test cases.</source>
          <target state="translated">これらの関数の最初の引数は、テストケースの名前です。この値は、関数節や条件式のパターン・マッチングを使用して、異なるテスト・ケースに対して異なる初期化ルーチンやクリーンアップ・ルーチンを選択したり、多くの、またはすべてのテスト・ケースに対して同じルーチンを実行したりするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ecdfdb297a347255c9331f18e2ac5e6afd881831" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;code&gt;ch_sup&lt;/code&gt;, is the name of the callback module, that is, the module where the &lt;code&gt;init&lt;/code&gt; callback function is located.</source>
          <target state="translated">最初の引数 &lt;code&gt;ch_sup&lt;/code&gt; は、コールバックモジュールの名前です。つまり、 &lt;code&gt;init&lt;/code&gt; コールバック関数が配置されているモジュールです。</target>
        </trans-unit>
        <trans-unit id="283cb26772a001cdc7fe1371d58b95c0c89083e7" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;code&gt;{local, ch3}&lt;/code&gt;, specifies the name. The gen_server is then locally registered as &lt;code&gt;ch3&lt;/code&gt;.</source>
          <target state="translated">最初の引数 &lt;code&gt;{local, ch3}&lt;/code&gt; は名前を指定します。その後、gen_serverはローカルに &lt;code&gt;ch3&lt;/code&gt; として登録されます。</target>
        </trans-unit>
        <trans-unit id="d9747ca5abb30d92b09649a3fe92d54bbd6136b7" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;code&gt;{local,?NAME}&lt;/code&gt;, specifies the name. In this case, the &lt;code&gt;gen_statem&lt;/code&gt; is locally registered as &lt;code&gt;code_lock&lt;/code&gt; through the macro &lt;code&gt;?NAME&lt;/code&gt;.</source>
          <target state="translated">最初の引数 &lt;code&gt;{local,?NAME}&lt;/code&gt; は名前を指定します。この場合、 &lt;code&gt;gen_statem&lt;/code&gt; はマクロ &lt;code&gt;?NAME&lt;/code&gt; を介して &lt;code&gt;code_lock&lt;/code&gt; としてローカルに登録されます。</target>
        </trans-unit>
        <trans-unit id="81bf6f9dd47061daa5ebed0dbe0e76693e63afed" translate="yes" xml:space="preserve">
          <source>The first call to &lt;code&gt;enif_select&lt;/code&gt; for a specific OS &lt;code&gt;event&lt;/code&gt; will establish a relation between the event object and the containing resource. All subsequent calls for an &lt;code&gt;event&lt;/code&gt; must pass its containing resource as argument &lt;code&gt;obj&lt;/code&gt;. The relation is dissolved when &lt;code&gt;enif_select&lt;/code&gt; has been called with &lt;code&gt;mode&lt;/code&gt; as &lt;code&gt;ERL_NIF_SELECT_STOP&lt;/code&gt; and the corresponding &lt;code&gt;stop&lt;/code&gt; callback has returned. A resource can contain several event objects but one event object can only be contained within one resource. A resource will not be destructed until all its contained relations have been dissolved.</source>
          <target state="translated">特定のOS &lt;code&gt;event&lt;/code&gt; &lt;code&gt;enif_select&lt;/code&gt; への最初の呼び出しは、イベントオブジェクトとそれを含むリソースの間の関係を確立します。 &lt;code&gt;event&lt;/code&gt; に対する後続のすべての呼び出しは、それを含むリソースを引数 &lt;code&gt;obj&lt;/code&gt; として渡す必要があります。 &lt;code&gt;enif_select&lt;/code&gt; が &lt;code&gt;ERL_NIF_SELECT_STOP&lt;/code&gt; として &lt;code&gt;mode&lt;/code&gt; で呼び出され、対応する &lt;code&gt;stop&lt;/code&gt; コールバックが返されると、関係は解消されます。リソースには複数のイベントオブジェクトを含めることができますが、1つのイベントオブジェクトは1つのリソース内にのみ含めることができます。含まれているすべての関係が解消されるまで、リソースは破棄されません。</target>
        </trans-unit>
        <trans-unit id="2bd2696be64fe7162dc1485b1d2c990c6c549132" translate="yes" xml:space="preserve">
          <source>The first call to an interpreted function by this process. (&lt;code&gt;Module:Function/Arity&lt;/code&gt;)</source>
          <target state="translated">このプロセスによる解釈済み関数の最初の呼び出し。（ &lt;code&gt;Module:Function/Arity&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f928094b6da781dfbc891a4120343ae4cc293b55" translate="yes" xml:space="preserve">
          <source>The first case is when we have the identity-function (&lt;code&gt;SecName&lt;/code&gt; = &lt;code&gt;UserName&lt;/code&gt;).</source>
          <target state="translated">最初のケースは、identity関数（ &lt;code&gt;SecName&lt;/code&gt; = &lt;code&gt;UserName&lt;/code&gt; ）がある場合です。</target>
        </trans-unit>
        <trans-unit id="b0fbbc3247a8beb8eb5ac78e663feb3fa54615a2" translate="yes" xml:space="preserve">
          <source>The first element in the list is isolated and the list is split into two sublists.</source>
          <target state="translated">リストの最初の要素は分離され、リストは2つのサブリストに分割されます。</target>
        </trans-unit>
        <trans-unit id="014ba2d1758d0deccfe95265702308ef94fdf898" translate="yes" xml:space="preserve">
          <source>The first element of &lt;code&gt;Type_List&lt;/code&gt; is the top type of the encoded message. In &lt;code&gt;Element_List&lt;/code&gt;, it is followed by each of the component names that leads to selected type.</source>
          <target state="translated">&lt;code&gt;Type_List&lt;/code&gt; の最初の要素は、エンコードされたメッセージの最上位タイプです。 &lt;code&gt;Element_List&lt;/code&gt; 、それは、その選択されたタイプのリードコンポーネント名のそれぞれが続きます。</target>
        </trans-unit>
        <trans-unit id="dc44175b8c8ad2a17dc68dd4333970027d3739a1" translate="yes" xml:space="preserve">
          <source>The first element of a non-empty &lt;code&gt;Host-IP-Address&lt;/code&gt; list in &lt;code&gt;Svc&lt;/code&gt; provides the local IP address if an &lt;code&gt;ip&lt;/code&gt; option is not specified. The local address is either returned from&lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start/3&lt;/a&gt;&lt;/code&gt; or passed in a &lt;code&gt;connected&lt;/code&gt; message over the transport interface.</source>
          <target state="translated">&lt;code&gt;ip&lt;/code&gt; オプションが指定されていない場合、 &lt;code&gt;Svc&lt;/code&gt; の空でない &lt;code&gt;Host-IP-Address&lt;/code&gt; リストの最初の要素はローカルIPアドレスを提供します。ローカルアドレスは、 &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start/3&lt;/a&gt;&lt;/code&gt; から返されるか、トランスポートインターフェイスを介して &lt;code&gt;connected&lt;/code&gt; メッセージで渡されます。</target>
        </trans-unit>
        <trans-unit id="1fb0352349ee5a8c0a7eb65cc210b44843f0b004" translate="yes" xml:space="preserve">
          <source>The first element of the tuple that is sent is your own pid. This enables &lt;code&gt;my_server&lt;/code&gt; to reply. For more information about the primitives, see the &lt;code&gt;&lt;a href=&quot;erl_connect&quot;&gt;erl_connect&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">送信されるタプルの最初の要素は、独自のpidです。これにより、 &lt;code&gt;my_server&lt;/code&gt; が応答できるようになります。プリミティブの詳細については、 &lt;code&gt;&lt;a href=&quot;erl_connect&quot;&gt;erl_connect&lt;/a&gt;&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="35c3d22f06a7d30ce2b647923cf3347f78831669" translate="yes" xml:space="preserve">
          <source>The first field of a record is the second element of the tuple, which is the representation of the record.</source>
          <target state="translated">レコードの第1フィールドは、タプルの第2要素であり、レコードの表現である。</target>
        </trans-unit>
        <trans-unit id="2595903ccef1ec77d7c52522a5524a8e9b27b8b6" translate="yes" xml:space="preserve">
          <source>The first filter that the trace data is exposed for is the &lt;code&gt;Collector Filter&lt;/code&gt;. When a trace &lt;code&gt;Event&lt;/code&gt; is reported with &lt;code&gt;et_collector:report/2&lt;/code&gt; (or &lt;code&gt;et_collector:report_event/5,6&lt;/code&gt;) the first thing that happens, is that a message is sent to the &lt;code&gt;Collector&lt;/code&gt; process to fetch a handle that contains some useful stuff, such as the &lt;code&gt;Collector Filter Fun&lt;/code&gt; and an Ets table identifier. Then the &lt;code&gt;Collector Filter Fun&lt;/code&gt; is applied and if it returns &lt;code&gt;true&lt;/code&gt; (or &lt;code&gt;{true, NewEvent}&lt;/code&gt;), the &lt;code&gt;Event&lt;/code&gt; will be stored in an Ets table. As an optimization, subsequent calls to &lt;code&gt;et_collector:report&lt;/code&gt;-functions can use the handle directly instead of the &lt;code&gt;Collector Pid&lt;/code&gt;.</source>
          <target state="translated">トレースデータが公開される最初のフィルターは、 &lt;code&gt;Collector Filter&lt;/code&gt; です。トレース &lt;code&gt;Event&lt;/code&gt; が &lt;code&gt;et_collector:report/2&lt;/code&gt; （または &lt;code&gt;et_collector:report_event/5,6&lt;/code&gt; ）で報告されると、最初に発生するのは、メッセージが &lt;code&gt;Collector&lt;/code&gt; プロセスに送信され、次のようないくつかの有用なものを含むハンドルをフェッチすることです。 &lt;code&gt;Collector Filter Fun&lt;/code&gt; およびETSテーブル識別子。次に &lt;code&gt;Collector Filter Fun&lt;/code&gt; が適用され、それが &lt;code&gt;true&lt;/code&gt; （または &lt;code&gt;{true, NewEvent}&lt;/code&gt; ）を返す場合、 &lt;code&gt;Event&lt;/code&gt; はEtsテーブルに格納されます。最適化として、後続の呼び出し &lt;code&gt;et_collector:report&lt;/code&gt; -関数は、 &lt;code&gt;Collector Pid&lt;/code&gt; 代わりにハンドルを直接使用できます。</target>
        </trans-unit>
        <trans-unit id="e93729010b78d1e9fdfb6095e599e11dc46611ef" translate="yes" xml:space="preserve">
          <source>The first has the effect of clearing any previous inherits, the second of replacing a previous inherits of &lt;code&gt;Prev&lt;/code&gt; to one of &lt;code&gt;Mod&lt;/code&gt;. This allows the semantics of the input dictionary to be changed without modifying the file itself.</source>
          <target state="translated">1つ目は以前の継承をクリアする効果があり、2つ目は以前の継承の &lt;code&gt;Prev&lt;/code&gt; を &lt;code&gt;Mod&lt;/code&gt; の 1つに置き換える効果があります。これにより、ファイル自体を変更せずに入力辞書のセマンティクスを変更できます。</target>
        </trans-unit>
        <trans-unit id="ceb71912301094043ae2a458700ad5b6cfbe752e" translate="yes" xml:space="preserve">
          <source>The first implementation of DTrace probes for the Erlang virtual machine was presented at the &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/euc/08/&quot;&gt;2008 Erlang User Conference&lt;/a&gt;&lt;/code&gt;. That work, based on the Erlang/OTP R12 release, was discontinued due to what appears to be miscommunication with the original developers.</source>
          <target state="translated">Erlang仮想マシン用のDTraceプローブの最初の実装は、 &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/euc/08/&quot;&gt;2008 Erlang User Conference&lt;/a&gt;&lt;/code&gt; 発表されました。Erlang / OTP R12リリースに基づくその作業は、元の開発者との連絡ミスのように思われるため中止されました。</target>
        </trans-unit>
        <trans-unit id="3f97c49dffef8a26851ac783d21a876b74a6d528" translate="yes" xml:space="preserve">
          <source>The first instruction, &lt;code&gt;{selected_decode_Window1,['Window',status,buttonList,[1],number]}&lt;/code&gt; is described in the previous section.</source>
          <target state="translated">最初の命令 &lt;code&gt;{selected_decode_Window1,['Window',status,buttonList,[1],number]}&lt;/code&gt; は、前のセクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="e790f114bc8cf3a2ce28aebcfae1d5a3836f6a2d" translate="yes" xml:space="preserve">
          <source>The first is the current value.</source>
          <target state="translated">1つ目は現在の値です。</target>
        </trans-unit>
        <trans-unit id="314cc6cc859765f9b7338047d208d202513bf56d" translate="yes" xml:space="preserve">
          <source>The first level is at the UDP entry / exit point, i.e. immediately after the receipt of the message, before any message processing is done (accept_recv) and immediately before sending the message, after all message processing is done (accept_send).</source>
          <target state="translated">最初のレベルは、UDPのエントリ/エグジットポイント、すなわち、メッセージを受信した直後、メッセージ処理が行われる前(accept_recv)と、メッセージを送信する直前、すべてのメッセージ処理が行われた後(accept_send)にあります。</target>
        </trans-unit>
        <trans-unit id="c16552c0f99d14efe5fd0c93c7ebdd486a4076a9" translate="yes" xml:space="preserve">
          <source>The first level is at the transport entry / exit point, i.e. immediately after the receipt of the message before any message processing is done (accept_recv) and immediately before sending the message after all message processing is done (accept_send).</source>
          <target state="translated">最初のレベルは、トランスポートのエントリ/エグジットポイント、すなわち、いかなるメッセージ処理も行われる前のメッ セージの受信直後(accept_recv)と、すべてのメッセージ処理が行われた後のメッセージの送信直前(accept_send)である。</target>
        </trans-unit>
        <trans-unit id="bbb474799d3c2ceaecdb69173050f2d2cde6ff68" translate="yes" xml:space="preserve">
          <source>The first part matches an optional opening parenthesis, and if that character is present, sets it as the first captured substring. The second part matches one or more characters that are not parentheses. The third part is a conditional subpattern that tests whether the first set of parentheses matched or not. If they did, that is, if subject started with an opening parenthesis, the condition is true, and so the yes-pattern is executed and a closing parenthesis is required. Otherwise, as no-pattern is not present, the subpattern matches nothing. That is, this pattern matches a sequence of non-parentheses, optionally enclosed in parentheses.</source>
          <target state="translated">最初の部分は、オプションの開括弧にマッチし、その文字が存在する場合には、それを最初にキャプチャされた部分文字列として設定します。2番目の部分は、括弧ではない1つ以上の文字にマッチします。3番目の部分は条件付きのサブパターンで、最初の括弧のセットがマッチしたかどうかをテストします。一致した場合、つまり、件名が開括弧で始まっていれば、条件は真であり、したがって、yes-パターンが実行され、閉括弧が必要とされる。そうでなければ、no-patternが存在しないので、サブパターンは何もマッチしない。つまり、このパターンは、オプションで括弧で囲まれた非括弧のシーケンスにマッチする。</target>
        </trans-unit>
        <trans-unit id="f02f68659112d26dce19edf7fe8cbae93aa2769c" translate="yes" xml:space="preserve">
          <source>The first part of the 64 bit template is identical to the 32 bit one, but there are some environment variable differences:</source>
          <target state="translated">64ビットテンプレートの最初の部分は32ビットテンプレートと同じですが、環境変数の違いがあります。</target>
        </trans-unit>
        <trans-unit id="f65a1941d5d1778fd847b32c5e58a7ed60e551a2" translate="yes" xml:space="preserve">
          <source>The first part of the crash dump shows the following:</source>
          <target state="translated">クラッシュダンプの最初の部分には、以下のように表示されています。</target>
        </trans-unit>
        <trans-unit id="2cc97c1e58d4679396d3bf61c813a63a062816e6" translate="yes" xml:space="preserve">
          <source>The first part of the pattern is a DEFINE group inside which is a another group named &quot;byte&quot; is defined. This matches an individual component of an IPv4 address (a number &amp;lt; 256). When matching takes place, this part of the pattern is skipped, as DEFINE acts like a false condition. The remaining pattern uses references to the named group to match the four dot-separated components of an IPv4 address, insisting on a word boundary at each end.</source>
          <target state="translated">パターンの最初の部分は「バイト」という名前の別のグループが定義されているDEFINEグループです。これは、IPv4アドレス（256未満の数値）の個々のコンポーネントと一致します。マッチングが行われると、DEFINEが誤った条件のように機能するため、パターンのこの部分はスキップされます。残りのパターンは、名前付きグループへの参照を使用して、IPv4アドレスの4つのドットで区切られたコンポーネントを照合し、両端で単語の境界を主張します。</target>
        </trans-unit>
        <trans-unit id="7724368c62d5b897d69875d863fc670d000c0a9f" translate="yes" xml:space="preserve">
          <source>The first part of the reference number in ref &lt;code&gt;t&lt;/code&gt;. Use only for compatibility.</source>
          <target state="translated">ref &lt;code&gt;t&lt;/code&gt; の参照番号の最初の部分。互換性のためだけに使用してください。</target>
        </trans-unit>
        <trans-unit id="232ebbaa469296f40c7a1846dbf2fa546b56c045" translate="yes" xml:space="preserve">
          <source>The first part says that the factorial of 1 is 1.:</source>
          <target state="translated">最初の部分は1の階乗が1であることを示していますが......。</target>
        </trans-unit>
        <trans-unit id="dac65be594adc3151ec035f4511e37fe28d74a93" translate="yes" xml:space="preserve">
          <source>The first program contains some inadequacies regarding handling of nodes which disappear. These are corrected in a later version of the program.</source>
          <target state="translated">最初のプログラムには、消えてしまうノードの扱いにいくつかの不備があります。これらは後のバージョンのプログラムで修正されています。</target>
        </trans-unit>
        <trans-unit id="90106de27192d6ca833e750e4d48c96656c2317b" translate="yes" xml:space="preserve">
          <source>The first record attribute is the primary key, or key for short.</source>
          <target state="translated">最初のレコード属性は、主キー、略してキーです。</target>
        </trans-unit>
        <trans-unit id="3a82a7bb7498f5fc4876294f7dfadf942e9bd19c" translate="yes" xml:space="preserve">
          <source>The first state that is entered will get a state enter call with &lt;code&gt;OldState&lt;/code&gt; equal to the current state.</source>
          <target state="translated">入る最初の状態は、 &lt;code&gt;OldState&lt;/code&gt; が現在の状態と等しい状態のenter呼び出しを取得します。</target>
        </trans-unit>
        <trans-unit id="6086c2b9bf8be61602b6ebcc9d1ba07de24d3cb9" translate="yes" xml:space="preserve">
          <source>The first sublist contains all elements that are smaller than the first element in the list.</source>
          <target state="translated">最初のサブリストには、リストの最初の要素よりも小さいすべての要素が含まれています。</target>
        </trans-unit>
        <trans-unit id="7c16a3275bdd107763aa82124e29bdb96e0aa246" translate="yes" xml:space="preserve">
          <source>The first subsection will give a short background of the SSH protocol while later sections describes the implementation and provides some examples</source>
          <target state="translated">最初のサブセクションでは SSH プロトコルの簡単な背景を説明し、その後のセクションでは実装について説明し、いくつかの例を提供します。</target>
        </trans-unit>
        <trans-unit id="ea7284e31b879942988ef1c4ac5a9d9ef85d8089" translate="yes" xml:space="preserve">
          <source>The first test to run includes all suites for system &lt;code&gt;t1&lt;/code&gt;. Suites &lt;code&gt;t1B&lt;/code&gt; and &lt;code&gt;t1D&lt;/code&gt; are excluded from the test. Test cases &lt;code&gt;test3&lt;/code&gt; and &lt;code&gt;test4&lt;/code&gt; in &lt;code&gt;t1A&lt;/code&gt; and &lt;code&gt;test1&lt;/code&gt; case in &lt;code&gt;t1C&lt;/code&gt; are also excluded from the test.</source>
          <target state="translated">最初に実行するテストには、システム &lt;code&gt;t1&lt;/code&gt; のすべてのスイートが含まれています。スイート &lt;code&gt;t1B&lt;/code&gt; と &lt;code&gt;t1D&lt;/code&gt; はテストから除外されます。テストケース &lt;code&gt;test3&lt;/code&gt; 及び &lt;code&gt;test4&lt;/code&gt; で &lt;code&gt;t1A&lt;/code&gt; と &lt;code&gt;test1&lt;/code&gt; においてケース &lt;code&gt;t1C&lt;/code&gt; 、試験から除外されます。</target>
        </trans-unit>
        <trans-unit id="5ca5c4abe4913702f7baf25de35a02c261b509bb" translate="yes" xml:space="preserve">
          <source>The first thing &lt;code&gt;blend/2&lt;/code&gt; does is to calculate the resulting alpha channel:</source>
          <target state="translated">&lt;code&gt;blend/2&lt;/code&gt; が最初に行うことは、結果のアルファチャンネルを計算することです：</target>
        </trans-unit>
        <trans-unit id="39ceda5701132f42099520c75ed5fefa2f0ce8cf" translate="yes" xml:space="preserve">
          <source>The first thing you need to do, is to make sure you have an ODBC driver installed for the database that you want to access. Both the client machine where you plan to run your erlang node and the server machine running the database needs the the ODBC driver. (In some cases the client and the server may be the same machine).</source>
          <target state="translated">まず最初にしなければならないことは、アクセスしたいデータベースにODBCドライバがインストールされていることを確認することです。Erlangノードを実行するクライアントマシンとデータベースを実行するサーバーマシンの両方にODBCドライバが必要です。(クライアントとサーバが同じマシンである場合もあります)。</target>
        </trans-unit>
        <trans-unit id="2aae989cc7522942aff9cad7059abdf3f11420db" translate="yes" xml:space="preserve">
          <source>The first time &lt;code&gt;Fun&lt;/code&gt; is applied, &lt;code&gt;Acc0&lt;/code&gt; is the second argument. The next time &lt;code&gt;Fun&lt;/code&gt; is called, the return value from the previous call is used as the second argument. The term the last call to &lt;code&gt;Fun&lt;/code&gt; returns is the return value of the function &lt;code&gt;&lt;a href=&quot;mnesia#foldl-3&quot;&gt;mnesia:foldl/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mnesia#foldr-3&quot;&gt;mnesia:foldr/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; が最初に適用されるとき、 &lt;code&gt;Acc0&lt;/code&gt; が2番目の引数です。次に &lt;code&gt;Fun&lt;/code&gt; が呼び出されると、前の呼び出しからの戻り値が2番目の引数として使用されます。 &lt;code&gt;Fun&lt;/code&gt; の最後の呼び出しが返す用語は、関数 &lt;code&gt;&lt;a href=&quot;mnesia#foldl-3&quot;&gt;mnesia:foldl/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;mnesia#foldr-3&quot;&gt;mnesia:foldr/3&lt;/a&gt;&lt;/code&gt; の戻り値です。</target>
        </trans-unit>
        <trans-unit id="50b73034e77a90f94080fa89965c6eaf0283e9d6" translate="yes" xml:space="preserve">
          <source>The first time &lt;code&gt;bchunk/2&lt;/code&gt; is called, an initial continuation, the atom &lt;code&gt;start&lt;/code&gt;, must be provided.</source>
          <target state="translated">&lt;code&gt;bchunk/2&lt;/code&gt; が初めて呼び出されるとき、最初の継続であるアトム &lt;code&gt;start&lt;/code&gt; が提供されなければなりません。</target>
        </trans-unit>
        <trans-unit id="0c2f550699da636c0cd8e01902373a891091a02a" translate="yes" xml:space="preserve">
          <source>The first time &lt;code&gt;chunk()&lt;/code&gt; (or &lt;code&gt;bchunk()&lt;/code&gt;) is called, an initial continuation, the atom &lt;code&gt;start&lt;/code&gt;, must be provided. If a disk log process is running on the current node, terms are read from that log. Otherwise, an individual distributed log on some other node is chosen, if such a log exists.</source>
          <target state="translated">最初に &lt;code&gt;chunk()&lt;/code&gt; （または &lt;code&gt;bchunk()&lt;/code&gt; ）が呼び出されるときは、最初の継続であるアトム &lt;code&gt;start&lt;/code&gt; を指定する必要があります。現在のノードでディスクログプロセスが実行されている場合、用語はそのログから読み取られます。それ以外の場合、他のノード上の個別の分散ログが選択されます（そのようなログが存在する場合）。</target>
        </trans-unit>
        <trans-unit id="2ae42b9440fbcdcd3aef0e04e0d47cfcd6b93638" translate="yes" xml:space="preserve">
          <source>The first time &lt;code&gt;chunk()&lt;/code&gt; is called, an initial continuation returned from &lt;code&gt;open/1&lt;/code&gt; or &lt;code&gt;open/2&lt;/code&gt; must be provided.</source>
          <target state="translated">最初に &lt;code&gt;chunk()&lt;/code&gt; が呼び出されたとき、 &lt;code&gt;open/1&lt;/code&gt; または &lt;code&gt;open/2&lt;/code&gt; から返された最初の継続が提供されなければなりません。</target>
        </trans-unit>
        <trans-unit id="f24cb290ca20c81eb6b4416fabb904d4e10dd7ea" translate="yes" xml:space="preserve">
          <source>The first time &lt;code&gt;my_binary_to_list/1&lt;/code&gt; is called, a &lt;code&gt;&lt;a href=&quot;#match_context&quot;&gt;match context&lt;/a&gt;&lt;/code&gt; is created. The match context points to the first byte of the binary. 1 byte is matched out and the match context is updated to point to the second byte in the binary.</source>
          <target state="translated">&lt;code&gt;my_binary_to_list/1&lt;/code&gt; が初めて呼び出されたときに、 &lt;code&gt;&lt;a href=&quot;#match_context&quot;&gt;match context&lt;/a&gt;&lt;/code&gt; が作成されます。一致コンテキストは、バイナリの最初のバイトを指します。1バイトが一致し、バイナリの2番目のバイトを指すように一致コンテキストが更新されます。</target>
        </trans-unit>
        <trans-unit id="1823ded8e66bfbd9fc7ce09687bb9aaa31338fbb" translate="yes" xml:space="preserve">
          <source>The first time &lt;code&gt;save_scenario/0&lt;/code&gt; is called a server will be started. This server will save runtime scenarios. All saved scenarios can be removed by calling &lt;code&gt;&lt;a href=&quot;#make_config-0&quot;&gt;stop/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;save_scenario/0&lt;/code&gt; が初めて呼び出されたときにサーバーが起動されます。このサーバーは、ランタイムシナリオを保存します。保存されたすべてのシナリオは、 &lt;code&gt;&lt;a href=&quot;#make_config-0&quot;&gt;stop/0&lt;/a&gt;&lt;/code&gt; を呼び出すことによって削除できます。</target>
        </trans-unit>
        <trans-unit id="2da631291d48912dfb7f5e3e966ba2a0afa5f92f" translate="yes" xml:space="preserve">
          <source>The first time this function is called, &lt;code&gt;error_logger&lt;/code&gt; is added as a Logger handler, and the &lt;code&gt;error_logger&lt;/code&gt; process is started.</source>
          <target state="translated">この関数が初めて呼び出されたときに、 &lt;code&gt;error_logger&lt;/code&gt; がロガーハンドラーとして追加され、 &lt;code&gt;error_logger&lt;/code&gt; プロセスが開始されます。</target>
        </trans-unit>
        <trans-unit id="0ac2627c749c91f8bf457c1c48d430daa18c89a6" translate="yes" xml:space="preserve">
          <source>The first user &quot;sends&quot; the message in the example above by:</source>
          <target state="translated">最初のユーザーは、上の例のメッセージを「送信」します。</target>
        </trans-unit>
        <trans-unit id="03cb12d8f1c72fe9141e80abe570426dd8888741" translate="yes" xml:space="preserve">
          <source>The first value indicates the default &lt;code&gt;priv_dir&lt;/code&gt; behavior, that is, one private directory created per test run. The two latter values tell &lt;code&gt;Common Test&lt;/code&gt; to generate a unique test directory name per test case and execution. If the auto version is used, &lt;strong&gt;all&lt;/strong&gt; private directories are created automatically. This can become very inefficient for test runs with many test cases or repetitions, or both. Therefore, if the manual version is used instead, the test case must tell &lt;code&gt;Common Test&lt;/code&gt; to create &lt;code&gt;priv_dir&lt;/code&gt; when it needs it. It does this by calling the function &lt;code&gt;&lt;a href=&quot;ct#make_priv_dir-0&quot;&gt;ct:make_priv_dir/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最初の値は、デフォルトの &lt;code&gt;priv_dir&lt;/code&gt; 動作、つまり、テスト実行ごとに作成される1つのプライベートディレクトリを示します。後者の2つの値は、 &lt;code&gt;Common Test&lt;/code&gt; に、テストケースと実行ごとに一意のテストディレクトリ名を生成するように指示します。自動バージョンを使用すると、&lt;strong&gt;すべての&lt;/strong&gt;プライベートディレクトリが自動的に作成されます。これは、多くのテストケースまたは繰り返し、あるいはその両方を伴うテスト実行では非常に非効率になる可能性があります。したがって、代わりに手動バージョンを使用する場合、テストケースは、必要なときに &lt;code&gt;Common Test&lt;/code&gt; に &lt;code&gt;priv_dir&lt;/code&gt; を作成するように指示する必要があります。これは、関数 &lt;code&gt;&lt;a href=&quot;ct#make_priv_dir-0&quot;&gt;ct:make_priv_dir/0&lt;/a&gt;&lt;/code&gt; を呼び出すことによって行われます。</target>
        </trans-unit>
        <trans-unit id="5b7f2b74f4ad7fcb69baccbea779f423b38f85de" translate="yes" xml:space="preserve">
          <source>The first value is limited to the values 0, 1, or 2. The second value must be in the range 0..39 when the first value is 0 or 1.</source>
          <target state="translated">第1の値は、0、1、または2の値に制限されています。第2の値は、第1の値が0または1のとき、0〜39の範囲内になければなりません。</target>
        </trans-unit>
        <trans-unit id="76cac286407464f1a3cab30ae6ed03a1a8b426a4" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;-extra&lt;/code&gt; is treated in special way. Its scope ends at the end of the file. Arguments following an &lt;code&gt;-extra&lt;/code&gt; flag are moved on the command line into the &lt;code&gt;-extra&lt;/code&gt; section, that is, the end of the command line following after an &lt;code&gt;-extra&lt;/code&gt; flag.</source>
          <target state="translated">フラグ &lt;code&gt;-extra&lt;/code&gt; は特別な方法で処理されます。そのスコープはファイルの最後で終わります。 &lt;code&gt;-extra&lt;/code&gt; フラグに続く引数は、コマンドラインで &lt;code&gt;-extra&lt;/code&gt; セクションに移動します。つまり、 &lt;code&gt;-extra&lt;/code&gt; フラグの後に続くコマンドラインの終わりです。</target>
        </trans-unit>
        <trans-unit id="095fd71fa9f6ba7fe4c40943793a2bb698c7bbdc" translate="yes" xml:space="preserve">
          <source>The flag can also be set by the STDLIB application variable &lt;code&gt;shell_strings&lt;/code&gt;. Defaults to &lt;code&gt;true&lt;/code&gt;, which means that lists of integers are printed using the string syntax, when possible. Value &lt;code&gt;false&lt;/code&gt; means that no lists are printed using the string syntax.</source>
          <target state="translated">このフラグは、STDLIBアプリケーション変数 &lt;code&gt;shell_strings&lt;/code&gt; でも設定できます。デフォルトは &lt;code&gt;true&lt;/code&gt; です。これは、可能な場合、整数のリストが文字列構文を使用して出力されることを意味します。値 &lt;code&gt;false&lt;/code&gt; は、文字列構文を使用してリストが出力されないことを意味します。</target>
        </trans-unit>
        <trans-unit id="16ee325443e908603dacad16b814927c10a42e37" translate="yes" xml:space="preserve">
          <source>The flag field of an atom cache reference has the following format:</source>
          <target state="translated">アトムキャッシュ参照のフラグフィールドは、以下の形式になります。</target>
        </trans-unit>
        <trans-unit id="a080305c71ef71f1663e7718a0bc9d58d29dd1e8" translate="yes" xml:space="preserve">
          <source>The flags &lt;code&gt;dir&lt;/code&gt;, &lt;code&gt;suite&lt;/code&gt;, and &lt;code&gt;group/case&lt;/code&gt; can be combined. For example, to run &lt;code&gt;x_SUITE&lt;/code&gt; and &lt;code&gt;y_SUITE&lt;/code&gt; in directory &lt;code&gt;testdir&lt;/code&gt;, as follows:</source>
          <target state="translated">フラグ &lt;code&gt;dir&lt;/code&gt; 、 &lt;code&gt;suite&lt;/code&gt; 、および &lt;code&gt;group/case&lt;/code&gt; は組み合わせることができます。たとえば、ディレクトリ &lt;code&gt;testdir&lt;/code&gt; で &lt;code&gt;x_SUITE&lt;/code&gt; および &lt;code&gt;y_SUITE&lt;/code&gt; を実行するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="b93b96139f6762ecd80290edd696f2ed98f35890" translate="yes" xml:space="preserve">
          <source>The flags specific to the MIB compiler can be specified by using the &lt;code&gt;+&lt;/code&gt; syntax:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 構文を使用して、MIBコンパイラに固有のフラグを指定できます。</target>
        </trans-unit>
        <trans-unit id="428847ac69b6b0b0a5e6c4145d8ec6d570f6c395" translate="yes" xml:space="preserve">
          <source>The flex libraries. Without it, the flex powered codecs cannot be used.</source>
          <target state="translated">フレックスのライブラリです。これがないとフレックスパワードコーデックが使えません。</target>
        </trans-unit>
        <trans-unit id="c159710396ee724ac90ec79947b2b5b4c1587632" translate="yes" xml:space="preserve">
          <source>The flex scanner is written using a tool called &lt;strong&gt;flex&lt;/strong&gt;. In order to be able to compile the flex scanner driver, this tool has to be available.</source>
          <target state="translated">フレックススキャナはと呼ばれるツール使用して書かれている&lt;strong&gt;フレックスを&lt;/strong&gt;。フレックススキャナードライバーをコンパイルできるようにするには、このツールを使用できる必要があります。</target>
        </trans-unit>
        <trans-unit id="d7c4ca511a9bd4686762da41fca66fa99a0af1b0" translate="yes" xml:space="preserve">
          <source>The floating point generating functions in this module waste the lowest bits when converting from an integer so they avoid this snag.</source>
          <target state="translated">このモジュールの浮動小数点生成関数は、整数から変換する際に最下位ビットを無駄にしてしまうので、このスナッグを回避しています。</target>
        </trans-unit>
        <trans-unit id="c041ae86c5f8c7016b0e10add46c29cac233bc88" translate="yes" xml:space="preserve">
          <source>The floating point value of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; の浮動小数点値。</target>
        </trans-unit>
        <trans-unit id="e419b2fab0b36bcecd87f0c3d0efca53ec378a69" translate="yes" xml:space="preserve">
          <source>The focus of the Erlang reference manual is on the language itself, not the implementation of it. The language constructs are described in text and with examples rather than formally specified. This is to make the manual more readable. The Erlang reference manual is not intended as a tutorial.</source>
          <target state="translated">Erlangリファレンスマニュアルの焦点は言語そのものにあり、実装ではありません。言語の構造は正式に指定されたものではなく、テキストと例を使って説明されています。これはマニュアルをより読みやすくするためです。Erlangリファレンスマニュアルはチュートリアルではありません。</target>
        </trans-unit>
        <trans-unit id="14233773185c2d086e35c41f6b44cd3cb166311c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;#hs_data{}&lt;/code&gt; record fields need to be set unless otherwise stated:</source>
          <target state="translated">特に明記されていない限り、次の &lt;code&gt;#hs_data{}&lt;/code&gt; レコードフィールドを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="755882894d7fd28bede6b99ec073119565eb9367" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;MSAcc_Thread_State&lt;/code&gt;s are available. All states are exclusive, meaning that a thread cannot be in two states at once. So, if you add the numbers of all counters in a thread, you get the total runtime for that thread.</source>
          <target state="translated">次の &lt;code&gt;MSAcc_Thread_State&lt;/code&gt; を使用できます。すべての状態は排他的です。つまり、スレッドが同時に2つの状態になることはできません。したがって、スレッド内のすべてのカウンターの数を追加すると、そのスレッドの合計ランタイムが得られます。</target>
        </trans-unit>
        <trans-unit id="9f76f02eae75217eb2a5f3c4fb6a601b97548d9f" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;ct_hooks&lt;/code&gt; statement causes pretty printing of NETCONF traffic to separate logs for the connections named &lt;code&gt;nc_server1&lt;/code&gt; and &lt;code&gt;nc_server2&lt;/code&gt;. Any other connections are logged to default NETCONF log.</source>
          <target state="translated">次の &lt;code&gt;ct_hooks&lt;/code&gt; ステートメントは、NETCONFトラフィックを &lt;code&gt;nc_server1&lt;/code&gt; 、 &lt;code&gt;nc_server2&lt;/code&gt; およびnc_server2という名前の接続のログを分離します。その他の接続は、デフォルトのNETCONFログに記録されます。</target>
        </trans-unit>
        <trans-unit id="60898a22579d212b66c103e94e65e3704c005128" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;ct_hooks&lt;/code&gt; statement causes printing of Telnet traffic to separate logs for the connections &lt;code&gt;server1&lt;/code&gt; and &lt;code&gt;server2&lt;/code&gt;. Traffic for any other connections is logged in the default Telnet log.</source>
          <target state="translated">次の &lt;code&gt;ct_hooks&lt;/code&gt; ステートメントは、Telnetトラフィックを出力して、接続 &lt;code&gt;server1&lt;/code&gt; と &lt;code&gt;server2&lt;/code&gt; のログを分離します。他の接続のトラフィックは、デフォルトのTelnetログに記録されます。</target>
        </trans-unit>
        <trans-unit id="1bc4e72d8d4d5620576eec368f8680635ae64598" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;upgrade&lt;/code&gt; instruction is used for supervisors:</source>
          <target state="translated">次の &lt;code&gt;upgrade&lt;/code&gt; 手順は、スーパーバイザに使用されます。</target>
        </trans-unit>
        <trans-unit id="7721dfe03e9c154ea4e1c34f92eac19aef611c75" translate="yes" xml:space="preserve">
          <source>The following ASN.1 type is used for real numbers:</source>
          <target state="translated">実数には以下のASN.1型を使用します。</target>
        </trans-unit>
        <trans-unit id="da76d97e2e28f2e89ed233e203305a30d4111d61" translate="yes" xml:space="preserve">
          <source>The following BIFs, which are used to create processes, return values of this data type:</source>
          <target state="translated">プロセスの作成に使用される以下のBIFは、このデータ型の値を返します。</target>
        </trans-unit>
        <trans-unit id="ca462812b4b616c1a4a1c09a1f4a79f0f85f0e72" translate="yes" xml:space="preserve">
          <source>The following CTH logs information about a test run into a format parseable by &lt;code&gt;file:consult/1&lt;/code&gt; (in Kernel):</source>
          <target state="translated">次のCTHは、テスト実行に関する情報を &lt;code&gt;file:consult/1&lt;/code&gt; （カーネル内）で解析可能な形式で記録します。</target>
        </trans-unit>
        <trans-unit id="9e71ecc8d7cab4d72922ae4ed2e33319f8122346" translate="yes" xml:space="preserve">
          <source>The following I/O request is optional to implement and a client is to be prepared for an error return:</source>
          <target state="translated">以下のI/O要求は実装することは任意であり、クライアントはエラーリターンに備えておく必要があります。</target>
        </trans-unit>
        <trans-unit id="0827ebd08d8a02057148a27dc548b0eb839f8cf1" translate="yes" xml:space="preserve">
          <source>The following Item's are valid:</source>
          <target state="translated">以下のアイテムが有効です。</target>
        </trans-unit>
        <trans-unit id="8931f5659efe1bfa45e91bfba89a696d04a3885e" translate="yes" xml:space="preserve">
          <source>The following Kernel configuration parameters apply to Logger:</source>
          <target state="translated">次のカーネル構成パラメータは、ロガーに適用されます。</target>
        </trans-unit>
        <trans-unit id="9f963b53749dee80b3ebd6d93009cb72dd723e7e" translate="yes" xml:space="preserve">
          <source>The following Logger API functions can trigger this callback:</source>
          <target state="translated">次の Logger API 関数は、このコールバックをトリガすることができます。</target>
        </trans-unit>
        <trans-unit id="59d2e24198262f39e955cdd7b2bb38352780ad95" translate="yes" xml:space="preserve">
          <source>The following MIBs are built-ins of the Erlang SNMP compiler: SNMPv2-SMI, RFC-1215, RFC-1212, SNMPv2-TC, SNMPv2-CONF, and RFC1155-SMI. They cannot therefore be compiled separately.</source>
          <target state="translated">以下のMIBはErlang SNMPコンパイラのビルドインです。SNMPv2-SMI、RFC-1215、RFC-1212、SNMPv2-TC、SNMPv2-CONF、RFC1155-SMIです。したがって、これらを別々にコンパイルすることはできません。</target>
        </trans-unit>
        <trans-unit id="52d19d789c25255eed9a979999ac8863363f1228" translate="yes" xml:space="preserve">
          <source>The following MIBs are defined in the OTP system:</source>
          <target state="translated">OTP システムでは、以下の MIB が定義されています。</target>
        </trans-unit>
        <trans-unit id="f58c9a6d16d6a288dad320d6e8998be16e44721f" translate="yes" xml:space="preserve">
          <source>The following PEM file has only one entry, a private DSA key:</source>
          <target state="translated">以下のPEMファイルには、1つのエントリしかありません。</target>
        </trans-unit>
        <trans-unit id="0a1e06caf4405f8154436d98b0b535f1d1da5766" translate="yes" xml:space="preserve">
          <source>The following PEM file has only one entry, a private RSA key:</source>
          <target state="translated">以下のPEMファイルには、RSAの秘密鍵である1つのエントリしかありません。</target>
        </trans-unit>
        <trans-unit id="bf6e0ebe475e308588ade6bad38f0a1b0d7fad83" translate="yes" xml:space="preserve">
          <source>The following activity access contexts are currently supported:</source>
          <target state="translated">現在、以下のアクティビティアクセスコンテキストがサポートされています。</target>
        </trans-unit>
        <trans-unit id="9f7f3d9893eedee1a260cc5b49377b2f1f743ccc" translate="yes" xml:space="preserve">
          <source>The following algorithms are provided:</source>
          <target state="translated">以下のアルゴリズムが用意されています。</target>
        </trans-unit>
        <trans-unit id="390e0b5eb1e3b7230aad019d3e06855c658180f0" translate="yes" xml:space="preserve">
          <source>The following allocators are present:</source>
          <target state="translated">以下のアロケータが存在します。</target>
        </trans-unit>
        <trans-unit id="c4821bb8c6c116cef14beeab931818f4969279b8" translate="yes" xml:space="preserve">
          <source>The following are primitives, which do not contain other test sets as arguments:</source>
          <target state="translated">以下は、他のテストセットを引数に含まないプリミティブです。</target>
        </trans-unit>
        <trans-unit id="b988567cb4ebfa83309f7036c88dc38f105b9489" translate="yes" xml:space="preserve">
          <source>The following are reserved words in Erlang:</source>
          <target state="translated">以下はErlangの予約語です。</target>
        </trans-unit>
        <trans-unit id="23a58c2300ac41928639f29dbe01e89240b2ddfc" translate="yes" xml:space="preserve">
          <source>The following are some of the most important and attractive capabilities provided by Mnesia:</source>
          <target state="translated">ムネシアが提供している機能の中でも特に魅力的なものをご紹介します。</target>
        </trans-unit>
        <trans-unit id="446aea39bd6d645ca35077d4770c830fb9a617e9" translate="yes" xml:space="preserve">
          <source>The following are the fun clauses parameter lists:</source>
          <target state="translated">楽しい句のパラメータリストは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b9a2d4753855996ec68919109001bdcfdfab1176" translate="yes" xml:space="preserve">
          <source>The following are the horizontal space characters:</source>
          <target state="translated">横長のスペース文字は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5e7dca09b462b81dbf316dd39e6aa81ce86d2e59" translate="yes" xml:space="preserve">
          <source>The following are the main features of Trace Tool Builder:</source>
          <target state="translated">トレースツールビルダーの主な機能は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4e925277c492d9e6356d76bfacfb3ab772525403" translate="yes" xml:space="preserve">
          <source>The following are the most widely spread encodings:</source>
          <target state="translated">最も広く普及しているエンコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="1d30a8b8e3b663292a1ad0bd4a17fb0b5f2c8ae2" translate="yes" xml:space="preserve">
          <source>The following are the possible runtime errors:</source>
          <target state="translated">実行時に発生する可能性のあるエラーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="11e4ce827beb7d257dafdeafaf65224573e225ee" translate="yes" xml:space="preserve">
          <source>The following are the predefined sets of subpatterns:</source>
          <target state="translated">以下は、予め定義されたサブパターンのセットです。</target>
        </trans-unit>
        <trans-unit id="b8aeeeb29a22d61e4651a7f7c64491c002da04f2" translate="yes" xml:space="preserve">
          <source>The following are the supported class names:</source>
          <target state="translated">対応しているクラス名は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0ae73677bdb343efa75ef5239df98c3995eb5a45" translate="yes" xml:space="preserve">
          <source>The following are the vertical space characters:</source>
          <target state="translated">縦方向のスペース文字は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e13eea1a0552634ec49861dfedef83923f03fb36" translate="yes" xml:space="preserve">
          <source>The following argument is required:</source>
          <target state="translated">以下のような引数が必要です。</target>
        </trans-unit>
        <trans-unit id="b3fe3a25174fa0e4b7397791cbe163414c93cae5" translate="yes" xml:space="preserve">
          <source>The following behavior applies if &lt;code&gt;Reason&lt;/code&gt; is any term, except &lt;code&gt;normal&lt;/code&gt; or &lt;code&gt;kill&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; が &lt;code&gt;normal&lt;/code&gt; または &lt;code&gt;kill&lt;/code&gt; 以外の用語である場合、次の動作が適用されます。</target>
        </trans-unit>
        <trans-unit id="ed43b5794a433578fe75d6227c8f8fec9b973992" translate="yes" xml:space="preserve">
          <source>The following built-in handlers exist:</source>
          <target state="translated">以下の組み込みハンドラが存在します。</target>
        </trans-unit>
        <trans-unit id="e48df9c121f20b43e9189951e6b161ed4e78306b" translate="yes" xml:space="preserve">
          <source>The following built-in list types also exist, but they are expected to be rarely used. Hence, they have long names:</source>
          <target state="translated">以下の組み込みリスト型も存在しますが、ほとんど使われることはないと思われます。そのため、長い名前が付けられています。</target>
        </trans-unit>
        <trans-unit id="56efeb40efc4a8607cb2cf3d6a1bbfa58461fecd" translate="yes" xml:space="preserve">
          <source>The following call would create a table that is replicated on two nodes, has an extra index on attribute &lt;code&gt;y&lt;/code&gt;, and is of type &lt;code&gt;bag&lt;/code&gt;.</source>
          <target state="translated">次の呼び出しは、2つのノードで複製され、属性 &lt;code&gt;y&lt;/code&gt; に追加のインデックスを持ち、タイプ &lt;code&gt;bag&lt;/code&gt; のテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="b93cef34769b4ac84bcc58e1f7579a27e1900915" translate="yes" xml:space="preserve">
          <source>The following calls use the default client profile. Use the proxy &lt;code&gt;&quot;www-proxy.mycompany.com:8000&quot;&lt;/code&gt;, except from requests to localhost. This applies to all the following requests.</source>
          <target state="translated">次の呼び出しは、デフォルトのクライアントプロファイルを使用します。localhostへのリクエストを除いて、プロキシ &lt;code&gt;&quot;www-proxy.mycompany.com:8000&quot;&lt;/code&gt; を使用します。これは、以下のすべてのリクエストに適用されます。</target>
        </trans-unit>
        <trans-unit id="6ce6762a2b45b2a9419ebd342a2248363882b1ec" translate="yes" xml:space="preserve">
          <source>The following can be done from the shell:</source>
          <target state="translated">シェルからは以下のようなことができます。</target>
        </trans-unit>
        <trans-unit id="53f1ccb49a8a37c5657c1e09929d43e77df7e6d3" translate="yes" xml:space="preserve">
          <source>The following can help you estimate the buffer requirements for a term. Notice that this information is implementation-specific, and can change in future versions. If you are unsure, use &lt;code&gt;erl_term_len()&lt;/code&gt;.</source>
          <target state="translated">以下は、用語のバッファー要件を見積もるのに役立ちます。この情報は実装固有のものであり、将来のバージョンで変更される可能性があることに注意してください。不明な場合は、 &lt;code&gt;erl_term_len()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="0f875dcb652b105150192f44a7e364beec117361" translate="yes" xml:space="preserve">
          <source>The following capability flags are defined:</source>
          <target state="translated">以下のケイパビリティフラグが定義されています。</target>
        </trans-unit>
        <trans-unit id="b153457b0c6c74e16cf68b399d11c4fdbeda5276" translate="yes" xml:space="preserve">
          <source>The following capability identifiers, defined in RFC 4741 NETCONF Configuration Protocol, can be returned:</source>
          <target state="translated">RFC 4741 NETCONF Configuration Protocol で定義されている以下のケイパビリティ識別子を返すことができます。</target>
        </trans-unit>
        <trans-unit id="729ccfc9617ba57afc9d1a89abcf609beb87615d" translate="yes" xml:space="preserve">
          <source>The following causes an error at compile time:</source>
          <target state="translated">以下のような場合、コンパイル時にエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="46da2b6d47972d1cbb42e35ed601e935a7066068" translate="yes" xml:space="preserve">
          <source>The following changes are added:</source>
          <target state="translated">以下の変更点を追加しました。</target>
        </trans-unit>
        <trans-unit id="223954bbc5bf81b4921c410a25f0bd6051babb47" translate="yes" xml:space="preserve">
          <source>The following code adds a parser interface to the grammar:</source>
          <target state="translated">次のコードは、文法にパーサーインターフェースを追加します。</target>
        </trans-unit>
        <trans-unit id="132d723fbc5d22b21ca88cffc9fa6e6381b81134" translate="yes" xml:space="preserve">
          <source>The following code defines a function &lt;code&gt;pconst(X)&lt;/code&gt; in the module &lt;code&gt;funparse&lt;/code&gt;, which returns a fun that parses a list of tokens:</source>
          <target state="translated">次のコードは、モジュール &lt;code&gt;funparse&lt;/code&gt; で関数 &lt;code&gt;pconst(X)&lt;/code&gt; を定義しています。これは、トークンのリストを解析するfunを返します。</target>
        </trans-unit>
        <trans-unit id="56844778b2176882fb2364c894e6a3f1cbf9d20a" translate="yes" xml:space="preserve">
          <source>The following code exemplifies a search with a non-normalized data model. To find all employees at department &lt;code&gt;Dep&lt;/code&gt; with a salary higher than &lt;code&gt;Salary&lt;/code&gt;, use the following code:</source>
          <target state="translated">次のコードは、正規化されていないデータモデルを使用した検索の例です。 &lt;code&gt;Salary&lt;/code&gt; より高い給与を持つ部門 &lt;code&gt;Dep&lt;/code&gt; のすべての従業員を検索するには、次のコードを使用します。</target>
        </trans-unit>
        <trans-unit id="3cf0020bc55d0fa1c895bb9fac0126cb39735295" translate="yes" xml:space="preserve">
          <source>The following code fragment is a simple example of a client connecting to a server at port 5678, transferring a binary, and closing the connection:</source>
          <target state="translated">以下のコードは、クライアントがポート 5678 でサーバに接続し、バイナリを転送し、接続を閉じるシンプルな例です。</target>
        </trans-unit>
        <trans-unit id="aa22415381d6bc1bea3d2a6fcf7c7cf3cea03a9e" translate="yes" xml:space="preserve">
          <source>The following code illustrates how a &lt;code&gt;Mnesia&lt;/code&gt; table is converted to be a fragmented table and how more fragments are added later:</source>
          <target state="translated">次のコードは、 &lt;code&gt;Mnesia&lt;/code&gt; テーブルがフラグメント化されたテーブルに変換される方法と、フラグメントが後で追加される方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4edc8cb91e65e300012f8cc9f371bfd50b18952b" translate="yes" xml:space="preserve">
          <source>The following code is executed to achieve this:</source>
          <target state="translated">そのために以下のコードを実行します。</target>
        </trans-unit>
        <trans-unit id="bf087b2d7139054e72c10f87277f4e9105ae6aae" translate="yes" xml:space="preserve">
          <source>The following code is from the sample file &lt;code&gt;next_perm.cc&lt;/code&gt;. The driver entry looks like before, but also contains the callback &lt;code&gt;ready_async&lt;/code&gt;.</source>
          <target state="translated">次のコードは、サンプルファイル &lt;code&gt;next_perm.cc&lt;/code&gt; からのものです。ドライバエントリは以前と同じように見えますが、コールバック &lt;code&gt;ready_async&lt;/code&gt; も含まれています。</target>
        </trans-unit>
        <trans-unit id="fd629e06b526d07e792ece40b307e86e30aa4c96" translate="yes" xml:space="preserve">
          <source>The following code is slightly slower because the shape of the list of arguments is unknown at compile time.</source>
          <target state="translated">以下のコードは、コンパイル時に引数リストの形状が不明なため、若干動作が遅くなります。</target>
        </trans-unit>
        <trans-unit id="1c15d7bb6d9f5ccee5265bb8903dc3f1c45a0ae2" translate="yes" xml:space="preserve">
          <source>The following code is the Erlang part of the synchronous postgres driver, &lt;code&gt;pg_sync.erl&lt;/code&gt;:</source>
          <target state="translated">次のコードは、同期postgresドライバー &lt;code&gt;pg_sync.erl&lt;/code&gt; のErlang部分です。</target>
        </trans-unit>
        <trans-unit id="dca40145d4c0653ae61a32b900aff83a1d19f042" translate="yes" xml:space="preserve">
          <source>The following code reduces the search space and is more efficient:</source>
          <target state="translated">以下のコードは、検索スペースを削減し、より効率的な検索を実現します。</target>
        </trans-unit>
        <trans-unit id="d491fd2b65326bcc2d9548ada2c065f112cca208" translate="yes" xml:space="preserve">
          <source>The following code:</source>
          <target state="translated">以下のコードです。</target>
        </trans-unit>
        <trans-unit id="10e52292e9dee4a0e3fd6642d8202ab55d1217aa" translate="yes" xml:space="preserve">
          <source>The following command are directly available for indentation.</source>
          <target state="translated">インデントには以下のコマンドが直接利用できます。</target>
        </trans-unit>
        <trans-unit id="a54ee1055259696f0cf635190505ae13de7c7874" translate="yes" xml:space="preserve">
          <source>The following commands and functions are used to initiate the &lt;code&gt;Company&lt;/code&gt; database:</source>
          <target state="translated">次のコマンドと関数は、 &lt;code&gt;Company&lt;/code&gt; データベースを開始するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a32fdf2e9df498e6565b300a038b14cb68a1735d" translate="yes" xml:space="preserve">
          <source>The following compilers are supported:</source>
          <target state="translated">以下のコンパイラがサポートされています。</target>
        </trans-unit>
        <trans-unit id="8cfc763d98ab927b97e114c3d3db99c10685fbd5" translate="yes" xml:space="preserve">
          <source>The following configuration file causes raw logging of all NETCONF traffic in to one single text file:</source>
          <target state="translated">次の設定ファイルは、すべての NETCONF トラフィックの生のログを 1 つのテキストファイルに記録します。</target>
        </trans-unit>
        <trans-unit id="f14322549f377ad730735aaebaa29c12d04adf7a" translate="yes" xml:space="preserve">
          <source>The following configuration parameters can be used to change the default values for time interval and threshold:</source>
          <target state="translated">以下の設定パラメータを使用して、時間間隔としきい値のデフォルト値を変更することができます。</target>
        </trans-unit>
        <trans-unit id="193ce5872a1a6b1151ebfa805bdd3ed1418c9a2b" translate="yes" xml:space="preserve">
          <source>The following configuration parameters can be used to change the default values for time intervals and thresholds:</source>
          <target state="translated">以下の設定パラメータを使用して、時間間隔としきい値のデフォルト値を変更することができます。</target>
        </trans-unit>
        <trans-unit id="b8d3f81dcc2fefa92fa2bf61c616cec96c1c09f3" translate="yes" xml:space="preserve">
          <source>The following custom metadata keys have special meaning:</source>
          <target state="translated">以下のカスタムメタデータキーには特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="9245e4a9bd60ce63efee4dfb325d04bbf467167e" translate="yes" xml:space="preserve">
          <source>The following data types are used in the functions below:</source>
          <target state="translated">以下の関数では、以下のデータ型を使用します。</target>
        </trans-unit>
        <trans-unit id="48be2dc36e35956a8e3588aca9cfc84f77c588b6" translate="yes" xml:space="preserve">
          <source>The following data types are used in the functions for &lt;code&gt;public_key&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;public_key&lt;/code&gt; の関数では、次のデータ型が使用されます。</target>
        </trans-unit>
        <trans-unit id="cbde7c9ddb7eaf9bcf77f4db441bfdef5bb61047" translate="yes" xml:space="preserve">
          <source>The following data types are used in the functions for &lt;code&gt;ssl_session_cache_api&lt;/code&gt;:</source>
          <target state="translated">次のデータ型は、 &lt;code&gt;ssl_session_cache_api&lt;/code&gt; の関数で使用されます。</target>
        </trans-unit>
        <trans-unit id="5ae4ee24ac66de733888ad1963744fbfbce6e5f4" translate="yes" xml:space="preserve">
          <source>The following data types are used in the functions for SSL/TLS/DTLS:</source>
          <target state="translated">SSL/TLS/DTLSの機能では、以下のデータ型を使用しています。</target>
        </trans-unit>
        <trans-unit id="4f214626dc0835db98c5ea380264f0633bf284ba" translate="yes" xml:space="preserve">
          <source>The following data types are used in the functions for mod_esi:</source>
          <target state="translated">mod_esi の関数では、以下のデータ型を使用しています。</target>
        </trans-unit>
        <trans-unit id="79cd8536de4f9b5bd968aa07ab5a04ff86d91140" translate="yes" xml:space="preserve">
          <source>The following data types concern the DNS client:</source>
          <target state="translated">以下のデータタイプはDNSクライアントに関係します。</target>
        </trans-unit>
        <trans-unit id="59d37752ba97444275d3af617925c81e1b46edf9" translate="yes" xml:space="preserve">
          <source>The following data types concern the resolver:</source>
          <target state="translated">以下のデータ型がリゾルバに関係しています。</target>
        </trans-unit>
        <trans-unit id="5ceb88a84344840ee75edbb731e8eaf81fb9c735" translate="yes" xml:space="preserve">
          <source>The following data-types are used in the functions below:</source>
          <target state="translated">以下の関数では、以下のデータ型を使用しています。</target>
        </trans-unit>
        <trans-unit id="1484bd1263f6980852c4824bd6d929836444bb83" translate="yes" xml:space="preserve">
          <source>The following definitions are used in the SNMP User's Guide.</source>
          <target state="translated">SNMP ユーザーズガイドでは、以下の定義を使用しています。</target>
        </trans-unit>
        <trans-unit id="39b4ce09657d83e126a92760457f3f4da1a2f574" translate="yes" xml:space="preserve">
          <source>The following dialog within the Erlang shell illustrates the functionality of the Erlang ODBC interface. The table used in the example does not have any relevance to anything that exist in reality, it is just a simple example. The example was created using &lt;code&gt;sqlserver 7.0 with servicepack 1&lt;/code&gt; as database and the ODBC driver for &lt;code&gt;sqlserver&lt;/code&gt; with version &lt;code&gt;2000.80.194.00&lt;/code&gt;.</source>
          <target state="translated">Erlangシェル内の次のダイアログは、Erlang ODBCインターフェースの機能を示しています。例で使用されているテーブルは、実際に存在するものとは無関係であり、単なる例です。例を使用して作成された &lt;code&gt;sqlserver 7.0 with servicepack 1&lt;/code&gt; データベースなどとのODBCドライバ &lt;code&gt;sqlserver&lt;/code&gt; バージョンと &lt;code&gt;2000.80.194.00&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99bffcf83f746fcc6153881b4b1631f84352b58c" translate="yes" xml:space="preserve">
          <source>The following directory must exist in the system to run the manager:</source>
          <target state="translated">マネージャーを実行するには、以下のディレクトリがシステム内に存在している必要があります。</target>
        </trans-unit>
        <trans-unit id="b4067663f255bf23f8ace734d9a80cb7e8eb13f2" translate="yes" xml:space="preserve">
          <source>The following distinct values are recognised:</source>
          <target state="translated">以下のような明確な値が認識されています。</target>
        </trans-unit>
        <trans-unit id="5bbdb173d3c169abec87c3f3bd04716fdb1d1176" translate="yes" xml:space="preserve">
          <source>The following elements are always present in the list for both local and external funs:</source>
          <target state="translated">以下の要素は、ローカルファンと外部ファンの両方のリストに常に存在します。</target>
        </trans-unit>
        <trans-unit id="314e2c48845f15727630c647a2291eeb21cc401b" translate="yes" xml:space="preserve">
          <source>The following elements are only present in the list if &lt;code&gt;Fun&lt;/code&gt; is local:</source>
          <target state="translated">次の要素は、 &lt;code&gt;Fun&lt;/code&gt; がローカルの場合にのみリストに表示されます。</target>
        </trans-unit>
        <trans-unit id="f117ec12e436f6ca90db1a4bc190e20fe521a5b3" translate="yes" xml:space="preserve">
          <source>The following encoding modules are provided:</source>
          <target state="translated">以下のエンコーディングモジュールが用意されています。</target>
        </trans-unit>
        <trans-unit id="77da27c3c246440f97582892c2d759bcdbc2e044" translate="yes" xml:space="preserve">
          <source>The following environment variables are recognized by &lt;code&gt;run_erl&lt;/code&gt; and change the logging behavior. For more information, see the previous section.</source>
          <target state="translated">次の環境変数は &lt;code&gt;run_erl&lt;/code&gt; によって認識され、ロギング動作を変更します。詳細については、前のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="555e6e3612dc9741d46001a128eafcf81c3f1408" translate="yes" xml:space="preserve">
          <source>The following equalities hold for all sequences:</source>
          <target state="translated">すべてのシーケンスに対して以下の等式が成り立ちます。</target>
        </trans-unit>
        <trans-unit id="31645542bb6c8a8301b513644f9cd8b30b64cec9" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the basic functionality used to run the Erlang ASN.1 compiler.</source>
          <target state="translated">次の例はErlang ASN.1コンパイラを実行するための基本的な機能を示しています。</target>
        </trans-unit>
        <trans-unit id="80f9ad21016f571b21439d39ef29483bf86436fd" translate="yes" xml:space="preserve">
          <source>The following example generates all permutations of the elements in a list:</source>
          <target state="translated">次の例では、リスト内の要素のすべての組み合わせを生成します。</target>
        </trans-unit>
        <trans-unit id="c404080201f0735af63fd0d67d38459effaabe41" translate="yes" xml:space="preserve">
          <source>The following example illustrate how code can be divided into a generic and a specific part. Consider the following code (written in plain Erlang) for a simple server, which keeps track of a number of &quot;channels&quot;. Other processes can allocate and free the channels by calling the functions &lt;code&gt;alloc/0&lt;/code&gt; and &lt;code&gt;free/1&lt;/code&gt;, respectively.</source>
          <target state="translated">次の例は、コードを一般的な部分と特定の部分に分割する方法を示しています。単純なサーバー用の次のコード（プレーンErlangで記述）を検討してください。単純なサーバーは、いくつかの「チャネル」を追跡します。他のプロセスは、関数 &lt;code&gt;alloc/0&lt;/code&gt; および &lt;code&gt;free/1&lt;/code&gt; をそれぞれ呼び出すことにより、チャネルを割り当てたり解放したりできます。</target>
        </trans-unit>
        <trans-unit id="49ac7049a1dcc2d7a9ce14f9a85fbfcae1153db4" translate="yes" xml:space="preserve">
          <source>The following example illustrates a simple, functional parser that parses the grammar:</source>
          <target state="translated">次の例は、文法を解析するシンプルな関数型パーサーを示しています。</target>
        </trans-unit>
        <trans-unit id="8140848b7fdb3cf3311bc85e2c217120f0d742dd" translate="yes" xml:space="preserve">
          <source>The following example illustrates a situation in which we have an SNMP table that we wish to implement as a Mnesia table. The table stores information about employees at a company. Each employee is indexed with the department number and the name.</source>
          <target state="translated">以下の例は、Mnesiaテーブルとして実装したいSNMPテーブルがある場合の状況を示しています。このテーブルには、会社の従業員に関する情報が格納されています。各従業員には、部署番号と名前のインデックスが付けられています。</target>
        </trans-unit>
        <trans-unit id="e0bf2809ff12bfda2aa29b8a9ba782d668e893f5" translate="yes" xml:space="preserve">
          <source>The following example illustrates how this function and &lt;code&gt;proc_lib:start_link/3&lt;/code&gt; are used:</source>
          <target state="translated">次の例は、この関数と &lt;code&gt;proc_lib:start_link/3&lt;/code&gt; の使用方法を示しています。</target>
        </trans-unit>
        <trans-unit id="474a94a5e901e0dd50063b0b025da701b6e45408" translate="yes" xml:space="preserve">
          <source>The following example illustrates the difference between type &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;bag&lt;/code&gt;:</source>
          <target state="translated">次の例は、タイプ &lt;code&gt;set&lt;/code&gt; と &lt;code&gt;bag&lt;/code&gt; 違いを示しています。</target>
        </trans-unit>
        <trans-unit id="39a99dfd22c81e72385e303daaf447a32f1dcfba" translate="yes" xml:space="preserve">
          <source>The following example illustrates this idea:</source>
          <target state="translated">以下の例では、この考え方を説明します。</target>
        </trans-unit>
        <trans-unit id="0064c1a1c0bd35406debf90dd3f22d06ce617d65" translate="yes" xml:space="preserve">
          <source>The following example illustrates use of option &lt;code&gt;{active,once}&lt;/code&gt; and multiple accepts by implementing a server as a number of worker processes doing accept on a single listening socket. Function &lt;code&gt;start/2&lt;/code&gt; takes the number of worker processes and the port number on which to listen for incoming connections. If &lt;code&gt;LPort&lt;/code&gt; is specified as &lt;code&gt;0&lt;/code&gt;, an ephemeral port number is used, which is why the start function returns the actual port number allocated:</source>
          <target state="translated">次の例は、オプション &lt;code&gt;{active,once}&lt;/code&gt; 使用法と、単一の待機ソケットで受け入れを行う多数のワーカープロセスとしてサーバーを実装することによる複数受け入れを示しています。関数 &lt;code&gt;start/2&lt;/code&gt; は、ワーカープロセスの数と、着信接続をリッスンするポート番号を受け取ります。 &lt;code&gt;LPort&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; として指定されている場合、一時的なポート番号が使用されます。そのため、start関数は割り当てられた実際のポート番号を返します。</target>
        </trans-unit>
        <trans-unit id="86c0c5045f0b4867ff5d5e4af410f343d35c255f" translate="yes" xml:space="preserve">
          <source>The following example is a long dialog with the shell. Commands starting with &lt;code&gt;&amp;gt;&lt;/code&gt; are inputs to the shell. All other lines are output from the shell.</source>
          <target state="translated">次の例は、シェルの長いダイアログです。 &lt;code&gt;&amp;gt;&lt;/code&gt; で始まるコマンドは、シェルへの入力です。他のすべての行はシェルから出力されます。</target>
        </trans-unit>
        <trans-unit id="10240151e7e7d2b5c92ad81d3640bc34e05d9082" translate="yes" xml:space="preserve">
          <source>The following example is more complex:</source>
          <target state="translated">次の例は、より複雑です。</target>
        </trans-unit>
        <trans-unit id="2d992e491915820ad2afb49cfea9c8e41cff67a2" translate="yes" xml:space="preserve">
          <source>The following example is useful when new object code is to be loaded on all nodes in the network, and indicates some side effects that RPCs can produce:</source>
          <target state="translated">次の例は、ネットワーク内のすべてのノードに新しいオブジェクト・コードをロードする場合に有用であり、RPC が生成するいくつかの副作用を示しています。</target>
        </trans-unit>
        <trans-unit id="1bc5ca4ed5e654ab061544449ba776cebd53a7ec" translate="yes" xml:space="preserve">
          <source>The following example selects UTF-8 as default encoding:</source>
          <target state="translated">次の例では、デフォルトのエンコーディングとして UTF-8 を選択しています。</target>
        </trans-unit>
        <trans-unit id="51e5b893c5c0823be8635b7d769cf2d225ca2947" translate="yes" xml:space="preserve">
          <source>The following example shows a &quot;manual&quot; implementation of the EX1-MIB in Erlang. In this example, the values of the objects are stored in an Erlang server. The server has a 2-tuple as loop data, where the first element is the value of variable &lt;code&gt;myName&lt;/code&gt;, and the second is a sorted list of rows in the table &lt;code&gt;friendsTable&lt;/code&gt;. Each row is a 4-tuple.</source>
          <target state="translated">次の例は、ErlangでのEX1-MIBの「手動」実装を示しています。この例では、オブジェクトの値はErlangサーバーに格納されています。サーバーには2タプルがループデータとしてあり、最初の要素は変数 &lt;code&gt;myName&lt;/code&gt; の値で、2番目の要素はテーブル &lt;code&gt;friendsTable&lt;/code&gt; のソートされた行のリストです。各行は4タプルです。</target>
        </trans-unit>
        <trans-unit id="0dda83918f4c357871181a8e692213f82ec6620d" translate="yes" xml:space="preserve">
          <source>The following example shows a &lt;code&gt;manager.conf&lt;/code&gt; file:</source>
          <target state="translated">次の例は、 &lt;code&gt;manager.conf&lt;/code&gt; ファイルを示しています。</target>
        </trans-unit>
        <trans-unit id="3692690cff3bbc46fbe7542193823a072dbd398f" translate="yes" xml:space="preserve">
          <source>The following example shows a C program communicating with an Erlang program over a plain port with home made encoding:</source>
          <target state="translated">次の例は、プレーンポートを使ってErlangプログラムと通信しているC言語のプログラムを示しています。</target>
        </trans-unit>
        <trans-unit id="4d9615b54f64438d5e8028f7a0519b6178976cdb" translate="yes" xml:space="preserve">
          <source>The following example shows a process performing a certain action, and if this action is not completed within a certain limit, the process is killed:</source>
          <target state="translated">次の例では、プロセスが特定のアクションを実行し、このアクションが一定の制限時間内に完了しない場合、プロセスが終了することを示しています。</target>
        </trans-unit>
        <trans-unit id="1096089eeb70a3303a9760156d2d4be7631f7e69" translate="yes" xml:space="preserve">
          <source>The following example shows a simple pushbutton model for a toggling pushbutton implemented with &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;&lt;code&gt;state_functions&lt;/code&gt;. You can push the button and it replies if it went on or off, and you can ask for a count of how many times it has been pushed to switch on.</source>
          <target state="translated">次の例は、 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; &lt;code&gt;state_functions&lt;/code&gt; で実装されたトグルボタンの単純なプッシュボタンモデルを示してい&lt;strong&gt;ます&lt;/strong&gt;。ボタンを押すと、オンまたはオフになった場合に応答し、ボタンを押してオンにした回数を尋ねることができます。</target>
        </trans-unit>
        <trans-unit id="0dd42ec45016c93db472143966e5ca24703f9ed4" translate="yes" xml:space="preserve">
          <source>The following example shows a simple tool for &quot;debug tracing&quot;, that is, tracing of function calls with return values:</source>
          <target state="translated">次の例は、「デバッグ・トレース」、つまり戻り値を持つ関数呼び出しをトレースするためのシンプルなツールを示しています。</target>
        </trans-unit>
        <trans-unit id="19d3f1e8b5799f072b4359cce670be47936dfd69" translate="yes" xml:space="preserve">
          <source>The following example shows a slightly different solution:</source>
          <target state="translated">以下の例では、少し変わった解決策を示しています。</target>
        </trans-unit>
        <trans-unit id="5d4636c02ccef3bb3a01dfd35e9b59f4a603be21" translate="yes" xml:space="preserve">
          <source>The following example shows a test suite that uses configuration functions to open and close a log file for the test cases (an operation that is unnecessary and irrelevant to perform by each test case):</source>
          <target state="translated">以下の例では、設定機能を利用してテストケースのログファイルを開閉するテストスイート(各テストケースが行う必要のない無関係な操作)を示しています。</target>
        </trans-unit>
        <trans-unit id="e3b94c02f704d04153b1383ced31f3788f464a7b" translate="yes" xml:space="preserve">
          <source>The following example shows a transaction that raises the salary of certain employee numbers:</source>
          <target state="translated">以下の例では、特定の従業員番号の給料を上げる取引を行っています。</target>
        </trans-unit>
        <trans-unit id="f6d9b06dc36617a94b5e02afafc0ad8dfc4a0dad" translate="yes" xml:space="preserve">
          <source>The following example shows a valid &lt;code&gt;standard.conf&lt;/code&gt; file:</source>
          <target state="translated">次の例は、有効な &lt;code&gt;standard.conf&lt;/code&gt; ファイルを示しています。</target>
        </trans-unit>
        <trans-unit id="bace4401d809de6e0147dcd93d7d2ad50c7143ee" translate="yes" xml:space="preserve">
          <source>The following example shows an &lt;code&gt;agent.conf&lt;/code&gt; file:</source>
          <target state="translated">次の例は、 &lt;code&gt;agent.conf&lt;/code&gt; ファイルを示しています。</target>
        </trans-unit>
        <trans-unit id="847239863685661d182c63f6a400e539c34b547a" translate="yes" xml:space="preserve">
          <source>The following example shows an Erlang program communicating with a C program over a plain port with home made encoding:</source>
          <target state="translated">次の例は、ErlangプログラムがC言語のプログラムとプレーンポートを使って通信している様子を示しています。</target>
        </trans-unit>
        <trans-unit id="53825087d6b7108771ca3d6e0c8ef6217b528b80" translate="yes" xml:space="preserve">
          <source>The following example shows an implementation of a table which is stored in Mnesia, but with some checks performed at set-request operations.</source>
          <target state="translated">以下の例は、Mnesiaに格納されているテーブルの実装を示していますが、セットリクエスト操作の際にいくつかのチェックが行われます。</target>
        </trans-unit>
        <trans-unit id="595ffdab36e0d6fd3473bedf69696fe4094f27bb" translate="yes" xml:space="preserve">
          <source>The following example shows how &lt;code&gt;&lt;a href=&quot;mnesia#traverse_backup-4&quot;&gt;mnesia:traverse_backup&lt;/a&gt;&lt;/code&gt; can be used to rename a &lt;code&gt;db_node&lt;/code&gt; in a backup file:</source>
          <target state="translated">次の例は、 &lt;code&gt;&lt;a href=&quot;mnesia#traverse_backup-4&quot;&gt;mnesia:traverse_backup&lt;/a&gt;&lt;/code&gt; を使用して、バックアップファイル内の &lt;code&gt;db_node&lt;/code&gt; の名前を変更する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="9fa86a2eb1c462e43e94db58a5942b848857fdbd" translate="yes" xml:space="preserve">
          <source>The following example shows how a shared subterm can be created:</source>
          <target state="translated">以下の例では、共有サブタームを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="6776554b0d8b27d6e71dbb65c3430e626c70d4bf" translate="yes" xml:space="preserve">
          <source>The following example shows how it works. Assume the following specification is in file &lt;code&gt;PrimStrings.asn1&lt;/code&gt;:</source>
          <target state="translated">次の例は、その仕組みを示しています。次の仕様が &lt;code&gt;PrimStrings.asn1&lt;/code&gt; ファイルにあると想定します。</target>
        </trans-unit>
        <trans-unit id="d86195a9ba7fbeb4a3a2a88335f091528178a8bf" translate="yes" xml:space="preserve">
          <source>The following example shows how the &lt;code&gt;Erl_Interface&lt;/code&gt; library supports remote procedure calls:</source>
          <target state="translated">次の例は、 &lt;code&gt;Erl_Interface&lt;/code&gt; ライブラリがリモートプロシージャコールをサポートする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d2278792ed447b1b0474672cdb32370ece1d60bb" translate="yes" xml:space="preserve">
          <source>The following example shows how these tasks are performed:</source>
          <target state="translated">以下の例では、これらの作業がどのように行われるかを示しています。</target>
        </trans-unit>
        <trans-unit id="0eb710a17335cffa4195147f0b090692db507fb0" translate="yes" xml:space="preserve">
          <source>The following example shows how to access a record field:</source>
          <target state="translated">次の例では、レコードフィールドにアクセスする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="5dc0d07b42694dec0693419e5a61930ecf09e7b5" translate="yes" xml:space="preserve">
          <source>The following example shows how to calculate alpha blending using maps to reference color and alpha channels. Enter the code in a file named &lt;code&gt;color.erl&lt;/code&gt;):</source>
          <target state="translated">次の例は、参照カラーとアルファチャネルへのマップを使用してアルファブレンディングを計算する方法を示しています。 &lt;code&gt;color.erl&lt;/code&gt; という名前のファイルにコードを入力します。</target>
        </trans-unit>
        <trans-unit id="c239b66af7053b04b58eb08cb9f4bfdfc1ec12a9" translate="yes" xml:space="preserve">
          <source>The following example shows how to change all letters in &lt;code&gt;L&lt;/code&gt; to upper case and then count them.</source>
          <target state="translated">次の例は、 &lt;code&gt;L&lt;/code&gt; のすべての文字を大文字に変更してから数える方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a2b77ebb5034759887438d2b947908450b7a2b16" translate="yes" xml:space="preserve">
          <source>The following example shows how to find the length of a list. Enter the following code in a file named &lt;code&gt;tut4.erl&lt;/code&gt;):</source>
          <target state="translated">次の例は、リストの長さを見つける方法を示しています。 &lt;code&gt;tut4.erl&lt;/code&gt; という名前のファイルに次のコードを入力します。</target>
        </trans-unit>
        <trans-unit id="cabff7d830edf1695f519312aec99e8c8a4f83ba" translate="yes" xml:space="preserve">
          <source>The following example shows how to override properties in a scenario with deeply nested groups:</source>
          <target state="translated">次の例は、深く入れ子になったグループを持つシナリオでプロパティをオーバーライドする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="5c2ed5f4e4ba13285a99659d63cce80153eafd62" translate="yes" xml:space="preserve">
          <source>The following example shows how to print &quot;Hello World!&quot; in 5 seconds:</source>
          <target state="translated">次の例では、「Hello World!」を5秒で印刷する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="42718ac464a329f1e12022f8904c812c6a41cbb0" translate="yes" xml:space="preserve">
          <source>The following example shows how to reconstruct Erlang source code from the debug information in a BEAM file &lt;code&gt;Beam&lt;/code&gt;:</source>
          <target state="translated">次の例は、BEAMファイル &lt;code&gt;Beam&lt;/code&gt; のデバッグ情報からErlangソースコードを再構築する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="36d0968402854fd2204e4f8284f220657779d484" translate="yes" xml:space="preserve">
          <source>The following example shows how to set up a trace that is automatically stopped and formatted after 5 seconds:</source>
          <target state="translated">以下の例では、5秒後に自動的に停止してフォーマットされるトレースを設定しています。</target>
        </trans-unit>
        <trans-unit id="df6f58ee5cbd6c36262b198728ebe89b5c130696" translate="yes" xml:space="preserve">
          <source>The following example shows how to start an event manager and add an event handler to it by using the shell:</source>
          <target state="translated">以下の例では、シェルを使用してイベントマネージャを起動し、そこにイベントハンドラを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="5fc528ca550abf4d7a434c41bd619acd146ef168" translate="yes" xml:space="preserve">
          <source>The following example shows how to update a record:</source>
          <target state="translated">以下の例では、レコードを更新する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cbb352e84c7618cb263e59542ab972df29182936" translate="yes" xml:space="preserve">
          <source>The following example shows that the guard succeeds if &lt;code&gt;P&lt;/code&gt; is record of type &lt;code&gt;person&lt;/code&gt;:</source>
          <target state="translated">次の例は、 &lt;code&gt;P&lt;/code&gt; がタイプ &lt;code&gt;person&lt;/code&gt; のレコードである場合にガードが成功することを示しています。</target>
        </trans-unit>
        <trans-unit id="c27427b8d967e296729a0172b87b5c1cb7821f6e" translate="yes" xml:space="preserve">
          <source>The following example shows the basic use of &lt;code&gt;ttb&lt;/code&gt; from the Erlang shell. Default options are used both for starting the tracer and for formatting (the custom fetch directory is however provided). This gives a trace log named &lt;code&gt;Node-ttb&lt;/code&gt; in the newly created directory, where &lt;code&gt;Node&lt;/code&gt; is the node name. The default handler prints the formatted trace messages in the shell:</source>
          <target state="translated">次の例は、Erlangシェルからの &lt;code&gt;ttb&lt;/code&gt; の基本的な使用方法を示しています。デフォルトのオプションは、トレーサーの起動とフォーマットの両方に使用されます（ただし、カスタムフェッチディレクトリが提供されます）。これは、名前のトレースログ与え &lt;code&gt;Node-ttb&lt;/code&gt; 新しく作成したディレクトリで、 &lt;code&gt;Node&lt;/code&gt; ノード名です。デフォルトのハンドラは、フォーマットされたトレースメッセージをシェルに出力します。</target>
        </trans-unit>
        <trans-unit id="33c400b4d7bc90cf1fb4285d622a80e1394cc3a9" translate="yes" xml:space="preserve">
          <source>The following example shows the reports generated when a process crashes. The example process is a &lt;code&gt;permanent&lt;/code&gt; process supervised by the &lt;code&gt;test_sup&lt;/code&gt; supervisor. A division by zero is executed and the error is first reported by the faulty process. A crash report is generated, as the process was started using function &lt;code&gt;proc_lib:spawn/3&lt;/code&gt;. The supervisor generates a supervisor report showing the crashed process. A progress report is generated when the process is finally restarted.</source>
          <target state="translated">次の例は、プロセスがクラッシュしたときに生成されるレポートを示しています。サンプルプロセスは、 &lt;code&gt;test_sup&lt;/code&gt; スーパーバイザによって監視される &lt;code&gt;permanent&lt;/code&gt; プロセスです。ゼロによる除算が実行され、エラーは障害のあるプロセスによって最初に報告されます。関数 &lt;code&gt;proc_lib:spawn/3&lt;/code&gt; を使用してプロセスが開始されたため、クラッシュレポートが生成されます。スーパーバイザは、クラッシュしたプロセスを示すスーパーバイザレポートを生成します。プロセスが最終的に再起動されると、進捗レポートが生成されます。</target>
        </trans-unit>
        <trans-unit id="862f8553aec4c38b6ab11aac95b152a39de64479" translate="yes" xml:space="preserve">
          <source>The following example successfully constructs a bitstring of 7 bits, provided that all of X and Y are integers:</source>
          <target state="translated">次の例は、X と Y のすべてが整数である場合に、7 ビットのビット列を構築することに成功しています。</target>
        </trans-unit>
        <trans-unit id="b791c8b4e90272c4405c7aeae4b46da3f6bb6c8f" translate="yes" xml:space="preserve">
          <source>The following example test suite shows some tests of a database server:</source>
          <target state="translated">以下のテストスイートの例は、データベースサーバのテストをいくつか示しています。</target>
        </trans-unit>
        <trans-unit id="b6d5422eedcad9f5caa434fa7b207125a77682b5" translate="yes" xml:space="preserve">
          <source>The following example uses an explicit match specification to traverse the table:</source>
          <target state="translated">次の例では、明示的なマッチ指定を使用してテーブルをトラバースしています。</target>
        </trans-unit>
        <trans-unit id="03a4faf8451b45afff5a5b66483b40e3d0740248" translate="yes" xml:space="preserve">
          <source>The following example was run on OTP/R8 on Solaris 8, all OTP internals in this example are very version dependent.</source>
          <target state="translated">以下の例は、Solaris 8上のOTP/R8で実行されたものですが、この例のOTP内部はすべてバージョンに依存しています。</target>
        </trans-unit>
        <trans-unit id="46aa402444b6b984aa7f78159a16377f4c23a61a" translate="yes" xml:space="preserve">
          <source>The following example would match a simple Erlang integer or float and return a token which could be sent to the Erlang parser:</source>
          <target state="translated">次の例は単純なErlangの整数や浮動小数点にマッチして、Erlangパーサに送ることができるトークンを返します。</target>
        </trans-unit>
        <trans-unit id="1ed0171fcebc0acc5e68cccfc60c0381e6097256" translate="yes" xml:space="preserve">
          <source>The following examples assume that the current directory is the top of an Erlang/OTP installation.</source>
          <target state="translated">以下の例では、カレントディレクトリがErlang/OTPインストールの一番上にあると仮定しています。</target>
        </trans-unit>
        <trans-unit id="9e3429edd1596d9bb7aa13fb024e8021be184516" translate="yes" xml:space="preserve">
          <source>The following examples define simplified versions of a few Erlang data types:</source>
          <target state="translated">以下の例では、いくつかのErlangデータ型の簡略化されたバージョンを定義しています。</target>
        </trans-unit>
        <trans-unit id="f8bd6a0797d263a055952885390142cbff7bc575" translate="yes" xml:space="preserve">
          <source>The following examples illustrate a function that returns an error, and the method to retrieve more detailed error information:</source>
          <target state="translated">以下の例では、エラーを返す関数と、より詳細なエラー情報を取得する方法を説明する。</target>
        </trans-unit>
        <trans-unit id="02e03cbd265b56591c07a5d42abac6e2a5b935ba" translate="yes" xml:space="preserve">
          <source>The following examples illustrate how binaries are constructed, or matched, and how elements and tails are specified.</source>
          <target state="translated">以下の例では、バイナリがどのように構築されているか、あるいはマッチングされているか、要素と尾行がどのように指定されているかを説明しています。</target>
        </trans-unit>
        <trans-unit id="8d07d5eba80d244e874b251ee11faf436794868c" translate="yes" xml:space="preserve">
          <source>The following examples illustrate these rules:</source>
          <target state="translated">以下の例では、これらのルールを説明します。</target>
        </trans-unit>
        <trans-unit id="3f52213112fefdbc53dc8c9767c67e39d0c5dce9" translate="yes" xml:space="preserve">
          <source>The following examples show a dialogue with the Erlang shell. All the higher order functions discussed are exported from the module &lt;code&gt;lists&lt;/code&gt;.</source>
          <target state="translated">次の例は、Erlangシェルとの対話を示しています。説明されているすべての高次関数は、モジュール &lt;code&gt;lists&lt;/code&gt; からエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="4e3ffd9c68f42312446cc6dbf3d84bd42d447765" translate="yes" xml:space="preserve">
          <source>The following examples show parsers of the following type:</source>
          <target state="translated">以下の例では、以下のタイプのパーサを示しています。</target>
        </trans-unit>
        <trans-unit id="18a677a2dd5f46875b6af8f8c34c6eb70fbe49be" translate="yes" xml:space="preserve">
          <source>The following examples show the resulting C programs. First a C node server using short node names:</source>
          <target state="translated">以下の例では、その結果のCプログラムを示しています。まず、短いノード名を使ったC言語のノードサーバです。</target>
        </trans-unit>
        <trans-unit id="379499ad8751de711870d7f29677a3a780a463f0" translate="yes" xml:space="preserve">
          <source>The following examples show the two startup options:</source>
          <target state="translated">以下の例では、2つの起動オプションを示しています。</target>
        </trans-unit>
        <trans-unit id="f2e4438a8f07510d88683d4b04f8f84085bdfc63" translate="yes" xml:space="preserve">
          <source>The following examples use the utility function &lt;code&gt;&lt;a href=&quot;ssh#start-0&quot;&gt;ssh:start/0&lt;/a&gt;&lt;/code&gt; to start all needed applications (&lt;code&gt;crypto&lt;/code&gt;, &lt;code&gt;public_key&lt;/code&gt;, and &lt;code&gt;ssh&lt;/code&gt;). All examples are run in an Erlang shell, or in a bash shell, using &lt;strong&gt;openssh&lt;/strong&gt; to illustrate how the &lt;code&gt;ssh&lt;/code&gt; application can be used. The examples are run as the user &lt;code&gt;otptest&lt;/code&gt; on a local network where the user is authorized to log in over &lt;code&gt;ssh&lt;/code&gt; to the host &lt;strong&gt;tarlop&lt;/strong&gt;.</source>
          <target state="translated">次の例では、ユーティリティ関数 &lt;code&gt;&lt;a href=&quot;ssh#start-0&quot;&gt;ssh:start/0&lt;/a&gt;&lt;/code&gt; を使用して、必要なすべてのアプリケーション（ &lt;code&gt;crypto&lt;/code&gt; 、 &lt;code&gt;public_key&lt;/code&gt; 、および &lt;code&gt;ssh&lt;/code&gt; ）を起動します。すべての例は、Erlangシェルまたはbashシェルで実行され、&lt;strong&gt;openssh&lt;/strong&gt;を使用して &lt;code&gt;ssh&lt;/code&gt; アプリケーションの使用方法を示しています。例は、ユーザーがホスト&lt;strong&gt;tarlopに&lt;/strong&gt; &lt;code&gt;ssh&lt;/code&gt; 経由でログインすることを許可されているローカルネットワーク上でユーザー &lt;code&gt;otptest&lt;/code&gt; として実行されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5cd0b11976b5319f2006d2a53413541627fed4ce" translate="yes" xml:space="preserve">
          <source>The following executes &lt;code&gt;tc12&lt;/code&gt;&lt;strong&gt;only&lt;/strong&gt; in group &lt;code&gt;top1&lt;/code&gt;:</source>
          <target state="translated">以下の実行は、 &lt;code&gt;tc12&lt;/code&gt; &lt;strong&gt;のみ&lt;/strong&gt;のグループで &lt;code&gt;top1&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="88857e0adb91607265c1fd3c40132140d6d97f6c" translate="yes" xml:space="preserve">
          <source>The following executes one test for all cases and subgroups under &lt;code&gt;top1&lt;/code&gt;:</source>
          <target state="translated">以下は、 &lt;code&gt;top1&lt;/code&gt; の下のすべてのケースとサブグループに対して1つのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="25e14a4c0f0dd8657c260321ddf24593cbf2714d" translate="yes" xml:space="preserve">
          <source>The following executes only the test cases for &lt;code&gt;sub22&lt;/code&gt; and in reverse order compared to the group definition:</source>
          <target state="translated">以下は、 &lt;code&gt;sub22&lt;/code&gt; のテストケースのみを実行し、グループ定義とは逆の順序で実行します。</target>
        </trans-unit>
        <trans-unit id="9d59ae5da72969b4283c1cf98a39c82e69b73434" translate="yes" xml:space="preserve">
          <source>The following executes two tests, one for all cases and all subgroups under &lt;code&gt;top1&lt;/code&gt;, and one for all under &lt;code&gt;top2&lt;/code&gt;:</source>
          <target state="translated">以下を実行二つの試験、すべてのケースのためのものと下のすべてのサブグループ &lt;code&gt;top1&lt;/code&gt; 、および下のすべてのための1つの &lt;code&gt;top2&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="88efd1d16122c7dfa20482784039de0e7578cec9" translate="yes" xml:space="preserve">
          <source>The following executes two tests, one including all cases and subgroups under &lt;code&gt;sub12&lt;/code&gt;, and one with &lt;strong&gt;only&lt;/strong&gt; the test cases in &lt;code&gt;sub12&lt;/code&gt;:</source>
          <target state="translated">以下は2つのテストを実行します。1つは &lt;code&gt;sub12&lt;/code&gt; のすべてのケースとサブグループを含み、もう1つは &lt;code&gt;sub12&lt;/code&gt; のテストケース&lt;strong&gt;のみ&lt;/strong&gt;を含みます。</target>
        </trans-unit>
        <trans-unit id="1a7ba64d043b7996c073a0f4af0d073005f423a1" translate="yes" xml:space="preserve">
          <source>The following expression creates a new &lt;code&gt;Name&lt;/code&gt; record where the value of each field &lt;code&gt;FieldI&lt;/code&gt; is the value of evaluating the corresponding expression &lt;code&gt;ExprI&lt;/code&gt;:</source>
          <target state="translated">次の式は、各フィールド &lt;code&gt;FieldI&lt;/code&gt; の値が対応する式 &lt;code&gt;ExprI&lt;/code&gt; を評価した値である新しい &lt;code&gt;Name&lt;/code&gt; レコードを作成します。</target>
        </trans-unit>
        <trans-unit id="ae6de457c01e1fb1a3e00546eff8958609de12b0" translate="yes" xml:space="preserve">
          <source>The following expression returns the position of the specified field in the tuple representation of the record:</source>
          <target state="translated">以下の式は、レコードのタプル表現における指定されたフィールドの位置を返します。</target>
        </trans-unit>
        <trans-unit id="c58518dfed86937c32c0b6a021322cd7beecbd65" translate="yes" xml:space="preserve">
          <source>The following expression yields &lt;code&gt;true&lt;/code&gt;::</source>
          <target state="translated">次の式は &lt;code&gt;true&lt;/code&gt; を生成します ::</target>
        </trans-unit>
        <trans-unit id="dd1a2e6659306c0be27370e1c7239f7c64f5c457" translate="yes" xml:space="preserve">
          <source>The following expressions are translated equally:</source>
          <target state="translated">以下の表現は等しく訳されています。</target>
        </trans-unit>
        <trans-unit id="f600fa95580d128a5b55c2d2a3bd52715c966b7f" translate="yes" xml:space="preserve">
          <source>The following expressions yield &lt;code&gt;false&lt;/code&gt;, as variable &lt;code&gt;Broken&lt;/code&gt; contains a compiled match specification that has passed through external representation:</source>
          <target state="translated">変数 &lt;code&gt;Broken&lt;/code&gt; には、外部表現を通過したコンパイル済みの一致指定が含まれているため、次の式では &lt;code&gt;false&lt;/code&gt; が生成されます。</target>
        </trans-unit>
        <trans-unit id="b9eb1676778caddf159cfe9acf52d248a3850a31" translate="yes" xml:space="preserve">
          <source>The following fapply:</source>
          <target state="translated">次のようなファッピィです。</target>
        </trans-unit>
        <trans-unit id="f3d7d3c3deb0a0a629d81950bc6b6134511197b1" translate="yes" xml:space="preserve">
          <source>The following fields are not described in the ERTS User's Guide:</source>
          <target state="translated">以下のフィールドは、ERTS ユーザーズガイドには記載されていません。</target>
        </trans-unit>
        <trans-unit id="61d54bcd350d6740f125ef1579264955f1c65547" translate="yes" xml:space="preserve">
          <source>The following fields are used from the record, if they are specified:</source>
          <target state="translated">以下のフィールドが指定されている場合は、レコードから使用されます。</target>
        </trans-unit>
        <trans-unit id="579212e906c367c5e65524f9d589806b1a4dfd60" translate="yes" xml:space="preserve">
          <source>The following fields can exist for a process:</source>
          <target state="translated">プロセスには以下のフィールドが存在します。</target>
        </trans-unit>
        <trans-unit id="8cec82fe0d57eb1d23921e0d50a78837999069a1" translate="yes" xml:space="preserve">
          <source>The following fields typically must be specified by the sender:</source>
          <target state="translated">以下のフィールドは通常、送信者が指定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="08329a98a990baea9fd4cf44d504f845faefdaf6" translate="yes" xml:space="preserve">
          <source>The following figure shows a conceptual overview of Logger. The figure shows two log handlers, but any number of handlers can be installed.</source>
          <target state="translated">以下の図は、Loggerの概念的な概要を示しています。図では2つのログハンドラを示していますが、任意の数のハンドラをインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="0bef9dc10cd953efe4cb861873187dfba852609d" translate="yes" xml:space="preserve">
          <source>The following figure shows the bytes of a &lt;code&gt;Window:status&lt;/code&gt; message. The components &lt;code&gt;buttonList&lt;/code&gt; and &lt;code&gt;actions&lt;/code&gt; are excluded from decode. Only &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;enabled&lt;/code&gt; are decoded when &lt;code&gt;decode__Window_exclusive&lt;/code&gt; is called.</source>
          <target state="translated">次の図は、 &lt;code&gt;Window:status&lt;/code&gt; メッセージのバイトを示しています。コンポーネント &lt;code&gt;buttonList&lt;/code&gt; と &lt;code&gt;actions&lt;/code&gt; は、デコードから除外されます。 &lt;code&gt;decode__Window_exclusive&lt;/code&gt; が呼び出されると、 &lt;code&gt;state&lt;/code&gt; と &lt;code&gt;enabled&lt;/code&gt; のみがデコードされます。</target>
        </trans-unit>
        <trans-unit id="5e130f9f78c1692a150e4f0eeb068783cb173914" translate="yes" xml:space="preserve">
          <source>The following figure shows which components are in &lt;code&gt;TypeList&lt;/code&gt;&lt;code&gt;['Window',status,actions,possibleActions,[1],handle,number]&lt;/code&gt;:</source>
          <target state="translated">次の図は、 &lt;code&gt;TypeList&lt;/code&gt; &lt;code&gt;['Window',status,actions,possibleActions,[1],handle,number]&lt;/code&gt; あるコンポーネントを示しています。</target>
        </trans-unit>
        <trans-unit id="b445689ad7fd0436cd7641f643a07c0561a2fe9a" translate="yes" xml:space="preserve">
          <source>The following file includes two certificates:</source>
          <target state="translated">以下のファイルには、2つの証明書が含まれています。</target>
        </trans-unit>
        <trans-unit id="3db502e7fd49532c31554150f0c64ab687cd78ab" translate="yes" xml:space="preserve">
          <source>The following file types are defined in Erlang/OTP:</source>
          <target state="translated">以下のファイルタイプはErlang/OTPで定義されています。</target>
        </trans-unit>
        <trans-unit id="71254e9506c929f7f52ca316b3c356b831887b19" translate="yes" xml:space="preserve">
          <source>The following flags are available:</source>
          <target state="translated">以下のフラグが利用可能です。</target>
        </trans-unit>
        <trans-unit id="719ce2e093c09df2408e42a7406958a700ac71ea" translate="yes" xml:space="preserve">
          <source>The following flags are defined automatically and can be retrieved using this function:</source>
          <target state="translated">以下のフラグは自動的に定義され、この関数を使用して取得することができます。</target>
        </trans-unit>
        <trans-unit id="5fe356642f0df6916029c9299326bc02952f156d" translate="yes" xml:space="preserve">
          <source>The following flags are recognised:</source>
          <target state="translated">以下のフラグが認識されます。</target>
        </trans-unit>
        <trans-unit id="2791d823738fc796e3aff5cac56fe1c0dc58c276" translate="yes" xml:space="preserve">
          <source>The following flags are supported:</source>
          <target state="translated">以下のフラグがサポートされています。</target>
        </trans-unit>
        <trans-unit id="9a37b4b5f5db6694294b80fe420424b434a55049" translate="yes" xml:space="preserve">
          <source>The following flags are useful in special situations, such as rebuilding the OTP system:</source>
          <target state="translated">以下のフラグは、OTP システムの再構築などの特殊な状況で有用です。</target>
        </trans-unit>
        <trans-unit id="e3e7ff31b4722f8ae27b4760d8e2609571bf918c" translate="yes" xml:space="preserve">
          <source>The following flags can also be used with &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のフラグも &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="fe0b90a260b51ac7fbb2626eba5e49455fbc6475" translate="yes" xml:space="preserve">
          <source>The following four installation procedures require super user privilege:</source>
          <target state="translated">以下の4つのインストール手順では、スーパーユーザー権限が必要です。</target>
        </trans-unit>
        <trans-unit id="857a38dd46b2870a572b2281f80d819712f630b7" translate="yes" xml:space="preserve">
          <source>The following fun expressions are also allowed:</source>
          <target state="translated">また、以下のような楽しい表現も許されています。</target>
        </trans-unit>
        <trans-unit id="7e53e9cb8d584334c556a4497982894d55fd0779" translate="yes" xml:space="preserve">
          <source>The following function extracts a list of female employees from the database:</source>
          <target state="translated">以下の関数は、データベースから女性社員のリストを抽出します。</target>
        </trans-unit>
        <trans-unit id="504f3189fc42a4b1e4cebcb03cdadcfe20e2ff16" translate="yes" xml:space="preserve">
          <source>The following function extracts the names of the female employees stored in the database:</source>
          <target state="translated">以下の関数は、データベースに格納されている女性社員の名前を抽出します。</target>
        </trans-unit>
        <trans-unit id="e7ccfae3bc62070f3a6d6f25984d604af2dca20b" translate="yes" xml:space="preserve">
          <source>The following function must be exported from a &lt;code&gt;supervisor&lt;/code&gt; callback module.</source>
          <target state="translated">次の関数は、 &lt;code&gt;supervisor&lt;/code&gt; プログラムのコールバックモジュールからエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="07aad394cfc87e43c34047ccb79c6f62e522e12b" translate="yes" xml:space="preserve">
          <source>The following function takes a list of &lt;code&gt;person&lt;/code&gt; records and searches for the phone number of a person with a particular name:</source>
          <target state="translated">次の関数は、 &lt;code&gt;person&lt;/code&gt; レコードのリストを取得し、特定の名前の人の電話番号を検索します。</target>
        </trans-unit>
        <trans-unit id="d42b26451a776d64cc4668a7081444af7e2c2a1e" translate="yes" xml:space="preserve">
          <source>The following function, &lt;code&gt;add_one&lt;/code&gt;, adds one to every element in a list:</source>
          <target state="translated">次の関数 &lt;code&gt;add_one&lt;/code&gt; は、リスト内のすべての要素に1を追加します。</target>
        </trans-unit>
        <trans-unit id="fdcde9b058d15df816f05ecda9bd41f522994a81" translate="yes" xml:space="preserve">
          <source>The following function, &lt;code&gt;double&lt;/code&gt;, doubles every element in a list:</source>
          <target state="translated">次の関数 &lt;code&gt;double&lt;/code&gt; は、リスト内のすべての要素を2倍にします。</target>
        </trans-unit>
        <trans-unit id="4a3f4a02410e47e9c3849742c5727d2c0861cf66" translate="yes" xml:space="preserve">
          <source>The following functionally equivalent code writes 128 bytes per call to &lt;code&gt;&lt;a href=&quot;#write-2&quot;&gt;write/2&lt;/a&gt;&lt;/code&gt; and so does the same work in 0.08 seconds, which is roughly 30 times faster:</source>
          <target state="translated">次の機能的に同等のコードは、 &lt;code&gt;&lt;a href=&quot;#write-2&quot;&gt;write/2&lt;/a&gt;&lt;/code&gt; の呼び出しごとに128バイトを書き込むため、同じ処理を0.08秒で実行します。これは約30倍高速です。</target>
        </trans-unit>
        <trans-unit id="4851a85cacd7cea8fbbb07ff6c65612ebb17807b" translate="yes" xml:space="preserve">
          <source>The following functions are exported by the generated scanner.</source>
          <target state="translated">以下の関数は、生成されたスキャナによってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="5f67bcd3deeb0c90fe208811b94f6ecb50fdd70e" translate="yes" xml:space="preserve">
          <source>The following functions are inlined:</source>
          <target state="translated">以下の機能がインライン化されています。</target>
        </trans-unit>
        <trans-unit id="6e8f6071853dc23038c690be527eb7aed97d99f5" translate="yes" xml:space="preserve">
          <source>The following functions are mandatory:</source>
          <target state="translated">以下の機能は必須です。</target>
        </trans-unit>
        <trans-unit id="6ab66b86479cb4b8966432e55db73f7b8eac0221" translate="yes" xml:space="preserve">
          <source>The following functions are to be exported from a &lt;code&gt;gen_event&lt;/code&gt; callback module.</source>
          <target state="translated">次の関数は、 &lt;code&gt;gen_event&lt;/code&gt; コールバックモジュールからエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="eaf6f53e0685fd921f6065ec533398767638e814" translate="yes" xml:space="preserve">
          <source>The following functions are to be exported from a &lt;code&gt;gen_server&lt;/code&gt; callback module.</source>
          <target state="translated">次の関数は、 &lt;code&gt;gen_server&lt;/code&gt; コールバックモジュールからエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="baab9084b49f784e0a7049c6d9a71e4b999906d7" translate="yes" xml:space="preserve">
          <source>The following functions are to be exported from a &lt;code&gt;gen_statem&lt;/code&gt; callback module.</source>
          <target state="translated">以下の関数は、 &lt;code&gt;gen_statem&lt;/code&gt; コールバックモジュールからエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="f6d8fd0dedca27c09b82ec5cdf80b62654de4c23" translate="yes" xml:space="preserve">
          <source>The following functions are to be exported from a &lt;code&gt;ssh_client_channel&lt;/code&gt; callback module.</source>
          <target state="translated">以下の関数は、 &lt;code&gt;ssh_client_channel&lt;/code&gt; コールバックモジュールからエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="b8fd8927d0a9812c875db0dd32e79d269aceb81c" translate="yes" xml:space="preserve">
          <source>The following functions are to be exported from a &lt;code&gt;ssh_server_channel&lt;/code&gt; callback module.</source>
          <target state="translated">以下の関数は、 &lt;code&gt;ssh_server_channel&lt;/code&gt; コールバックモジュールからエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="e23fa44c13429a2fd437dba0988c988e7a312614" translate="yes" xml:space="preserve">
          <source>The following functions are to be exported from a formatter callback module.</source>
          <target state="translated">以下の関数は、フォーマッタのコールバックモジュールからエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="f3a0c7ead32b20d4fc3d927da2c12376abf896b9" translate="yes" xml:space="preserve">
          <source>The following functions are to be exported from a handler callback module.</source>
          <target state="translated">以下の関数は、ハンドラ・コールバック・モジュールからエクスポートします。</target>
        </trans-unit>
        <trans-unit id="324102d29dfa0e459c285f94eb4c3c3798cd41d3" translate="yes" xml:space="preserve">
          <source>The following functions are to be exported from an &lt;code&gt;application&lt;/code&gt; callback module.</source>
          <target state="translated">次の関数は、 &lt;code&gt;application&lt;/code&gt; コールバックモジュールからエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="623497a405a43189792a81522e86a8b9226d067f" translate="yes" xml:space="preserve">
          <source>The following functions are to be exported from an &lt;code&gt;erl_tracer&lt;/code&gt; callback module:</source>
          <target state="translated">次の関数は、 &lt;code&gt;erl_tracer&lt;/code&gt; コールバックモジュールからエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="64dc45bde2a752b8cec35e2e33de402f72f6cc40" translate="yes" xml:space="preserve">
          <source>The following functions are used for convenience.</source>
          <target state="translated">便宜上、以下の機能を使用しています。</target>
        </trans-unit>
        <trans-unit id="c872bca07adade7d8cc574c2485887affd6e5d83" translate="yes" xml:space="preserve">
          <source>The following functions are used to back up data, to install a backup as fallback, and for disaster recovery:</source>
          <target state="translated">データのバックアップ、フォールバックとしてのバックアップの導入、災害復旧のために以下の機能を使用します。</target>
        </trans-unit>
        <trans-unit id="02628df42092a5c994d8e891c4403f91bfbbbb66" translate="yes" xml:space="preserve">
          <source>The following functions are used when implementing a special process. This is an ordinary process, which does not use a standard behavior, but a process that understands the standard system messages.</source>
          <target state="translated">特殊な処理を実装する場合には、以下の関数を使用します。標準的な動作を使わない通常の処理で、標準的なシステムメッセージを理解した処理です。</target>
        </trans-unit>
        <trans-unit id="26b92712bb4c99562ee4a3caab022028754f5836" translate="yes" xml:space="preserve">
          <source>The following functions can be used to test upgrade and downgrade of single applications (instead of upgrading/downgrading an entire release). A script corresponding to the instructions in the &lt;code&gt;relup&lt;/code&gt; file is created on-the-fly, based on the &lt;code&gt;.appup&lt;/code&gt; file for the application, and evaluated exactly in the same way as &lt;code&gt;release_handler&lt;/code&gt; does.</source>
          <target state="translated">次の関数を使用して、（リリース全体をアップグレード/ダウングレードする代わりに）単一のアプリケーションのアップグレードとダウングレードをテストできます。 &lt;code&gt;relup&lt;/code&gt; ファイルの指示に対応するスクリプトは、アプリケーションの &lt;code&gt;.appup&lt;/code&gt; ファイルに基づいてオンザフライで作成され、 &lt;code&gt;release_handler&lt;/code&gt; とまったく同じ方法で評価されます。</target>
        </trans-unit>
        <trans-unit id="24d76d64ddf59c8af9a65858beb15de37d52e968" translate="yes" xml:space="preserve">
          <source>The following functions control the behavior of the internal counters.</source>
          <target state="translated">以下の関数は、内部カウンタの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="c8f7d8e59ac7e38340a3c25c101d522f5875e82c" translate="yes" xml:space="preserve">
          <source>The following functions define the callback interface for a CTH.</source>
          <target state="translated">以下の関数は、CTH のコールバックインタフェースを定義します。</target>
        </trans-unit>
        <trans-unit id="02a00b734983835a88dfd4ba08c110451f346e89" translate="yes" xml:space="preserve">
          <source>The following functions define the callback interface for a test suite.</source>
          <target state="translated">以下の関数は、テストスイートのコールバックインターフェースを定義します。</target>
        </trans-unit>
        <trans-unit id="647d81b837420325efd90808d2b34ee3893c58a1" translate="yes" xml:space="preserve">
          <source>The following functions describe the interface to &lt;code&gt;snmpa_local_db&lt;/code&gt;. Each function has a Mnesia equivalent. The argument &lt;code&gt;NameDb&lt;/code&gt; is a tuple &lt;code&gt;{Name, Db}&lt;/code&gt; where &lt;code&gt;Name&lt;/code&gt; is the symbolic name of the managed object (as defined in the MIB), and &lt;code&gt;Db&lt;/code&gt; is either &lt;code&gt;volatile&lt;/code&gt; or &lt;code&gt;persistent&lt;/code&gt;. &lt;code&gt;mnesia&lt;/code&gt; is not possible since all these functions are &lt;code&gt;snmpa_local_db&lt;/code&gt; specific.</source>
          <target state="translated">次の関数は、 &lt;code&gt;snmpa_local_db&lt;/code&gt; へのインターフェースを記述しています。各関数にはMnesiaと同等の機能があります。引数 &lt;code&gt;NameDb&lt;/code&gt; はタプル &lt;code&gt;{Name, Db}&lt;/code&gt; で、 &lt;code&gt;Name&lt;/code&gt; は管理対象オブジェクトのシンボル名（MIBで定義）であり、 &lt;code&gt;Db&lt;/code&gt; は &lt;code&gt;volatile&lt;/code&gt; または &lt;code&gt;persistent&lt;/code&gt; のいずれかです。これらの関数はすべて &lt;code&gt;snmpa_local_db&lt;/code&gt; 固有であるため、 &lt;code&gt;mnesia&lt;/code&gt; は使用できません。</target>
        </trans-unit>
        <trans-unit id="a1100a11b4b80e1ec32b674331fc67603b3198a3" translate="yes" xml:space="preserve">
          <source>The following functions in this module also exist and provides the same functionality in the &lt;code&gt;&lt;a href=&quot;sets&quot;&gt;sets(3)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ordsets&quot;&gt;ordsets(3)&lt;/a&gt;&lt;/code&gt; modules. That is, by only changing the module name for each call, you can try out different set representations.</source>
          <target state="translated">このモジュールには次の関数も存在し、 &lt;code&gt;&lt;a href=&quot;sets&quot;&gt;sets(3)&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ordsets&quot;&gt;ordsets(3)&lt;/a&gt;&lt;/code&gt; モジュールに同じ機能を提供します。つまり、呼び出しごとにモジュール名を変更するだけで、さまざまなセット表現を試すことができます。</target>
        </trans-unit>
        <trans-unit id="403a88e7d4193643f2441bbe4104eef783bcc30f" translate="yes" xml:space="preserve">
          <source>The following functions must be exported from a &lt;code&gt;mib-server&lt;/code&gt; data callback module:</source>
          <target state="translated">次の関数は、 &lt;code&gt;mib-server&lt;/code&gt; データコールバックモジュールからエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="211427edb5cce5619a96cf4257a0132f6686ca2a" translate="yes" xml:space="preserve">
          <source>The following functions must be exported from a &lt;code&gt;supervisor_bridge&lt;/code&gt; callback module.</source>
          <target state="translated">以下の関数は、 &lt;code&gt;supervisor_bridge&lt;/code&gt; コールバックモジュールからエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="5e7c33747a8a7210784ba4d3e34376c30cdfd02d" translate="yes" xml:space="preserve">
          <source>The following functions should be exported from a &lt;code&gt;megaco_edist_compress&lt;/code&gt; callback module:</source>
          <target state="translated">次の関数は、 &lt;code&gt;megaco_edist_compress&lt;/code&gt; コールバックモジュールからエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="1c2eb550d5e0fd353c08fabab97a3148ca0012e2" translate="yes" xml:space="preserve">
          <source>The following functions should be exported from a &lt;code&gt;megaco_encoder&lt;/code&gt; callback module:</source>
          <target state="translated">次の関数は、 &lt;code&gt;megaco_encoder&lt;/code&gt; コールバックモジュールからエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="36e94e447d27f2ba2ddd7dbee957d9efa47d84bf" translate="yes" xml:space="preserve">
          <source>The following functions should be exported from a &lt;code&gt;megaco_transport&lt;/code&gt; callback module:</source>
          <target state="translated">次の関数は、 &lt;code&gt;megaco_transport&lt;/code&gt; コールバックモジュールからエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="f8ee1e36bf47047325c371be3bfaa01a6b15fc9a" translate="yes" xml:space="preserve">
          <source>The following functions, &lt;code&gt;read_cmd()&lt;/code&gt; and &lt;code&gt;write_cmd()&lt;/code&gt;, from the &lt;code&gt;erl_comm.c&lt;/code&gt; example in &lt;code&gt;&lt;a href=&quot;c_port&quot;&gt;Ports&lt;/a&gt;&lt;/code&gt; can still be used for reading from and writing to the port:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;c_port&quot;&gt;Ports&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;erl_comm.c&lt;/code&gt; の例にある次の関数 &lt;code&gt;read_cmd()&lt;/code&gt; および &lt;code&gt;write_cmd()&lt;/code&gt; は、ポートの読み取りおよび書き込みに引き続き使用できます。</target>
        </trans-unit>
        <trans-unit id="0c0cc9a33559cd30dd7c5dee49a32a3678fc0996" translate="yes" xml:space="preserve">
          <source>The following general category property codes are supported:</source>
          <target state="translated">以下の一般的なカテゴリのプロパティコードがサポートされています。</target>
        </trans-unit>
        <trans-unit id="00b20eb40ed0d659393e7ede6b8509b03c2165e1" translate="yes" xml:space="preserve">
          <source>The following illustration shows how a system can look in runtime.</source>
          <target state="translated">次の図は、システムが実行時にどのように見えるかを示しています。</target>
        </trans-unit>
        <trans-unit id="d0fc102c368e541c6de8ef4f6fd846441148303d" translate="yes" xml:space="preserve">
          <source>The following information is given for each child specification/process:</source>
          <target state="translated">子仕様/工程ごとに以下の情報を記載しています。</target>
        </trans-unit>
        <trans-unit id="0cce2ff92e643403b8a8a43b7b39a2cc520dd904" translate="yes" xml:space="preserve">
          <source>The following information is returned for every application:</source>
          <target state="translated">申し込みごとに以下の情報が返ってきます。</target>
        </trans-unit>
        <trans-unit id="b3fbdd770d4e0e0bb91f42f7653cca9a0fa8d845" translate="yes" xml:space="preserve">
          <source>The following information is returned for every library module:</source>
          <target state="translated">ライブラリモジュールごとに以下の情報が返されます。</target>
        </trans-unit>
        <trans-unit id="b25c49ec2d0414911fc31e80509041b6c00e1677" translate="yes" xml:space="preserve">
          <source>The following information is returned for every release:</source>
          <target state="translated">リリースごとに以下の情報が返ってきます。</target>
        </trans-unit>
        <trans-unit id="d5e22fc9271f190429a4be85a97f17d1b778ca80" translate="yes" xml:space="preserve">
          <source>The following instructions are for building &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/download/otp_src_21.0.tar.gz&quot;&gt;the released source tar ball&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次の手順は &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/download/otp_src_21.0.tar.gz&quot;&gt;the released source tar ball&lt;/a&gt;&lt;/code&gt; をビルドするためのものです。</target>
        </trans-unit>
        <trans-unit id="9bb6feade4582730097dc79e92bae679305ea48e" translate="yes" xml:space="preserve">
          <source>The following is a checklist for rewriting a pre ERTS 5.9 driver, most important first:</source>
          <target state="translated">以下は、まず最も重要なERTS 5.9以前のドライバを書き換えるためのチェックリストです。</target>
        </trans-unit>
        <trans-unit id="3b1759541f1940201849307e8f98dd17638ad123" translate="yes" xml:space="preserve">
          <source>The following is a complete &lt;code&gt;Fun&lt;/code&gt; parameter for reading and writing on files using the &lt;code&gt;file&lt;/code&gt; module:</source>
          <target state="translated">以下は、 &lt;code&gt;file&lt;/code&gt; モジュールを使用してファイルの読み取りと書き込みを行うための完全な &lt;code&gt;Fun&lt;/code&gt; パラメータです。</target>
        </trans-unit>
        <trans-unit id="fc7d7129dd6f6c58173a187543c25f188276eaf0" translate="yes" xml:space="preserve">
          <source>The following is a complete list of event types and where they come from:</source>
          <target state="translated">イベントの種類とその由来は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c8a14f55bfff88da1be28bb766800640bcd62c50" translate="yes" xml:space="preserve">
          <source>The following is a list of the ANSI data types. For details turn to the ANSI standard documentation. Usage of other data types is of course possible, but you should be aware that this makes your application dependent on the database you are using at the moment.</source>
          <target state="translated">以下に ANSI データ型のリストを示します。詳細については、ANSI標準ドキュメントを参照してください。他のデータ型を使用することももちろん可能ですが、これはアプリケーションが現時点で使用しているデータベースに依存することになるので注意が必要です。</target>
        </trans-unit>
        <trans-unit id="9dffda4d1a563c216467972b2fef4d25fa28c442" translate="yes" xml:space="preserve">
          <source>The following is a rather unnatural example to show another exception:</source>
          <target state="translated">以下は、別の例外を示すためのやや不自然な例です。</target>
        </trans-unit>
        <trans-unit id="fc5496457b8761bac15ca387a14c23e2f06d56e0" translate="yes" xml:space="preserve">
          <source>The following is a shell session when running it:</source>
          <target state="translated">実行時のシェルセッションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="1c1afe341a3a40e5c215a483f55d3776b92db0f3" translate="yes" xml:space="preserve">
          <source>The following is a short program to show the workings of &lt;code&gt;if&lt;/code&gt;.</source>
          <target state="translated">以下は &lt;code&gt;if&lt;/code&gt; の仕組みを示す短いプログラムです。</target>
        </trans-unit>
        <trans-unit id="92e3b552e54cc6f54aad0df369b0b7192bcf382d" translate="yes" xml:space="preserve">
          <source>The following is a simple example of an FTP session, where the user &lt;code&gt;guest&lt;/code&gt; with password &lt;code&gt;password&lt;/code&gt; logs on to the remote host &lt;code&gt;erlang.org&lt;/code&gt;:</source>
          <target state="translated">以下は、FTPセッションの簡単な例です。ここでは、パスワードが &lt;code&gt;password&lt;/code&gt; のユーザー &lt;code&gt;guest&lt;/code&gt; がリモートホスト &lt;code&gt;erlang.org&lt;/code&gt; にログオンしています。</target>
        </trans-unit>
        <trans-unit id="af00308e7be83b75dde0c794afc64df924d05311" translate="yes" xml:space="preserve">
          <source>The following is a simpler example of a handler which logs to a file through one single process:</source>
          <target state="translated">1つの処理でファイルにログを記録するハンドラの簡単な例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="2985e72c56df70fad7f40fc868951b90ac475392" translate="yes" xml:space="preserve">
          <source>The following is a slightly more complicated example of an &lt;code&gt;.erlang.crypt&lt;/code&gt; providing one key for module &lt;code&gt;t&lt;/code&gt; and another key for all other modules:</source>
          <target state="translated">以下は、モジュール &lt;code&gt;t&lt;/code&gt; に 1つのキーと他のすべてのモジュールに別のキーを提供する &lt;code&gt;.erlang.crypt&lt;/code&gt; のもう少し複雑な例です。</target>
        </trans-unit>
        <trans-unit id="c2e759eba9876095f44fce0efab73cd548a24130" translate="yes" xml:space="preserve">
          <source>The following is a template example of how to create and return a resource object.</source>
          <target state="translated">以下は、リソースオブジェクトを作成して返す方法のテンプレート例です。</target>
        </trans-unit>
        <trans-unit id="407235d853511b8f33bb270ef89fc50a0d62af2a" translate="yes" xml:space="preserve">
          <source>The following is an easy way of obtaining a unique value to seed with:</source>
          <target state="translated">以下は、独自の値をシードで簡単に取得する方法です。</target>
        </trans-unit>
        <trans-unit id="559fe21097f15ddc3169882128ef5ed665f04654" translate="yes" xml:space="preserve">
          <source>The following is an example module to trace on:</source>
          <target state="translated">以下は、トレースするモジュールの例です。</target>
        </trans-unit>
        <trans-unit id="80aa757f4a9a7af17950895f0cec0bc27ec18d99" translate="yes" xml:space="preserve">
          <source>The following is an example of Erlang code that assigns values for the types in the previous list:</source>
          <target state="translated">以下は、前のリストの型に値を割り当てるErlangのコードの例です。</target>
        </trans-unit>
        <trans-unit id="d01528f16015b5f29f1097c6ec1da0702097e439" translate="yes" xml:space="preserve">
          <source>The following is an example of X509 certificates:</source>
          <target state="translated">以下は、X509証明書の例です。</target>
        </trans-unit>
        <trans-unit id="b27cba48368a69cfcb442391037a03176a6a6532" translate="yes" xml:space="preserve">
          <source>The following is an example of a callback module for a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor:</source>
          <target state="translated">以下は、 &lt;code&gt;simple_one_for_one&lt;/code&gt; スーパーバイザのコールバックモジュールの例です。</target>
        </trans-unit>
        <trans-unit id="1f30318b19c32d664f2f54026ca7ff0b8355f643" translate="yes" xml:space="preserve">
          <source>The following is an example of an &lt;code&gt;.erlang.crypt&lt;/code&gt; file that returns the same key for all modules:</source>
          <target state="translated">以下は、すべてのモジュールに対して同じキーを返す &lt;code&gt;.erlang.crypt&lt;/code&gt; ファイルの例です。</target>
        </trans-unit>
        <trans-unit id="beaf428bf8cc669201276ed3d29a25f483cbffc1" translate="yes" xml:space="preserve">
          <source>The following is an example of how the functions in the previous example can be rewritten if it is necessary to open multiple connections to the FTP server:</source>
          <target state="translated">FTPサーバへの接続を複数開く必要がある場合に、先ほどの例の関数を書き換えると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7f7272e68f14b299a421c24c15d68c41acc39f20" translate="yes" xml:space="preserve">
          <source>The following is an example of how to assert that the configuration data is available and can be used for an FTP session:</source>
          <target state="translated">設定データが利用可能であり、FTPセッションで利用できることを主張する場合の例を示します。</target>
        </trans-unit>
        <trans-unit id="006f54e284f6eaf59f32808c04b6087a85040dff" translate="yes" xml:space="preserve">
          <source>The following is an example of how to return the status from a group:</source>
          <target state="translated">グループからステータスを返す場合の例です。</target>
        </trans-unit>
        <trans-unit id="de8c4707aa64df488804045d788d163861ba1459" translate="yes" xml:space="preserve">
          <source>The following is an example session using it on Linux:</source>
          <target state="translated">以下はLinuxでのセッション例です。</target>
        </trans-unit>
        <trans-unit id="22fa03b054cca550539d61bd30740fe445725fe1" translate="yes" xml:space="preserve">
          <source>The following is an ordinary asynchronous request:</source>
          <target state="translated">以下は通常の非同期リクエストです。</target>
        </trans-unit>
        <trans-unit id="1617114c5fde90021a15fd0405960852bae70f6c" translate="yes" xml:space="preserve">
          <source>The following is an ordinary synchronous request:</source>
          <target state="translated">以下は通常の同期リクエストです。</target>
        </trans-unit>
        <trans-unit id="25cf5f91df4951ef8502f305f460dc3e467e107b" translate="yes" xml:space="preserve">
          <source>The following is another special sequence that can appear at the start of a pattern:</source>
          <target state="translated">以下に、図柄の開始時に出現する別の特殊なシーケンスを示す。</target>
        </trans-unit>
        <trans-unit id="25f3a545690924d83cc64312bc56248e3f69655a" translate="yes" xml:space="preserve">
          <source>The following is called when the application is stopped.</source>
          <target state="translated">アプリケーションの停止時には以下のように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a7bb8990a6d72dd204c6cca6df9719f6eb039d12" translate="yes" xml:space="preserve">
          <source>The following is the complete callback module file &lt;code&gt;pushbutton.erl&lt;/code&gt;:</source>
          <target state="translated">以下は、完全なコールバックモジュールファイル &lt;code&gt;pushbutton.erl&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eba1404bcd0f1c2d40b6a68a0e51cd8231cb108f" translate="yes" xml:space="preserve">
          <source>The following is the instruction for adding an application:</source>
          <target state="translated">アプリケーションの追加方法は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="eef8732ed7e4037c0a3fb4336a9e4dba89b8f906" translate="yes" xml:space="preserve">
          <source>The following is the instruction for removing an application:</source>
          <target state="translated">アプリケーションを削除する手順は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="314b2a42ea1284b836958c707ebdeebfb1e761a9" translate="yes" xml:space="preserve">
          <source>The following is the instruction for restarting an application:</source>
          <target state="translated">アプリケーションを再起動する手順は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="04b2d72b40a1cd44a0454da6f08a0b030bd3218c" translate="yes" xml:space="preserve">
          <source>The following is to be put in the Erlang node application configuration file to start a profile at application startup:</source>
          <target state="translated">アプリケーション起動時にプロファイルを起動するために、Erlangノードのアプリケーション設定ファイルに以下のように記述します。</target>
        </trans-unit>
        <trans-unit id="062b29997a05c71efe23ac3949d3086ab3d47473" translate="yes" xml:space="preserve">
          <source>The following is to be put in the Erlang node application configuration file to start an HTTP server at application startup:</source>
          <target state="translated">アプリケーション起動時にHTTPサーバを起動するために、Erlangノードのアプリケーション設定ファイルに以下のように記述します。</target>
        </trans-unit>
        <trans-unit id="d3155b2a460c30a139bad84db61b5cb13f89e622" translate="yes" xml:space="preserve">
          <source>The following items are returned:</source>
          <target state="translated">以下のものが返却されています。</target>
        </trans-unit>
        <trans-unit id="cd7738cf632ddaa8eb52ecadbb7505cd9d32c89a" translate="yes" xml:space="preserve">
          <source>The following items are valid:</source>
          <target state="translated">以下の項目が有効です。</target>
        </trans-unit>
        <trans-unit id="4561a64f009cfbd6722c632e8eb5a471d1923a59" translate="yes" xml:space="preserve">
          <source>The following list details the application versions that were part of OTP 17.0. If the normal part of an application version number compares as smaller than the corresponding application version in the list, the version number does not adhere to the version scheme introduced in OTP 17.0 and is to be considered as not having an order against versions used as of OTP 17.0.</source>
          <target state="translated">以下のリストは、OTP 17.0 の一部であるアプリケーションのバージョンの詳細です。アプリケーションのバージョン番号の正規部分が対応するアプリケーションのバージョンよりも小さい場合、そのバージョン番号は OTP 17.0 で導入されたバージョンスキームに準拠しておらず、OTP 17.0 の時点で使用されているバージョンに対して順番がないものとみなされます。</target>
        </trans-unit>
        <trans-unit id="f6f5aff715179f741e21746f788a0d571fc3772d" translate="yes" xml:space="preserve">
          <source>The following macro directives are supplied:</source>
          <target state="translated">以下のマクロディレクティブが提供されています。</target>
        </trans-unit>
        <trans-unit id="361a3fd4702c110455bbcea82ba2c037e63e708b" translate="yes" xml:space="preserve">
          <source>The following macros are defined:</source>
          <target state="translated">以下のマクロが定義されています。</target>
        </trans-unit>
        <trans-unit id="c28f5023d2a208f7eb90d1c1666a542586bef327" translate="yes" xml:space="preserve">
          <source>The following macros are predefined:</source>
          <target state="translated">以下のマクロが定義されています。</target>
        </trans-unit>
        <trans-unit id="bee950191de94f676ee96776b15e0ccba25dfb73" translate="yes" xml:space="preserve">
          <source>The following macros can be used for retrieving parts of Erlang terms. None of these do any type checking. Results are undefined if you pass an &lt;code&gt;ETERM*&lt;/code&gt; containing the wrong type. For example, passing a tuple to &lt;code&gt;ERL_ATOM_PTR()&lt;/code&gt; likely results in garbage.</source>
          <target state="translated">次のマクロは、Erlang用語の一部を取得するために使用できます。これらはいずれも型チェックを行いません。間違ったタイプを含む &lt;code&gt;ETERM*&lt;/code&gt; を渡した場合の結果は未定義です。たとえば、タプルを &lt;code&gt;ERL_ATOM_PTR()&lt;/code&gt; に渡すと、ガベージが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a6e5655e09259732c78235fc15eeeb16532c8c59" translate="yes" xml:space="preserve">
          <source>The following macros can make tests more compact and readable:</source>
          <target state="translated">以下のマクロを使用すると、テストをよりコンパクトにして読みやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="3ca8309f3b4453ebe12d39150b4c1a41828a11c5" translate="yes" xml:space="preserve">
          <source>The following matches &lt;code&gt;Expr1&lt;/code&gt;, a pattern, against &lt;code&gt;Expr2&lt;/code&gt;:</source>
          <target state="translated">以下は一致し &lt;code&gt;Expr1&lt;/code&gt; に対して、パターンを &lt;code&gt;Expr2&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b69739288091f88fd2e2b7df4c33b95efbcb7de9" translate="yes" xml:space="preserve">
          <source>The following matches any occurrence of &quot;foo&quot; that is not followed by &quot;bar&quot;:</source>
          <target state="translated">以下は、&quot;foo &quot;の後に &quot;bar &quot;が続いていないものが出現した場合に一致します。</target>
        </trans-unit>
        <trans-unit id="484da9e33049d8639a65d77742562fb2909ccd89" translate="yes" xml:space="preserve">
          <source>The following matches exactly eight digits:</source>
          <target state="translated">以下は正確には8桁の数字と一致します。</target>
        </trans-unit>
        <trans-unit id="a06f765490e0bde0129ff3bc5255ac6d9e037e52" translate="yes" xml:space="preserve">
          <source>The following matchings are performed:</source>
          <target state="translated">以下のようなマッチングを行います。</target>
        </trans-unit>
        <trans-unit id="10508667a9f0cb2b801a082330c255eed8059206" translate="yes" xml:space="preserve">
          <source>The following menu items apply to the currently selected process, provided it is stopped at a breakpoint (for details, see section &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process window&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">次のメニュー項目は、ブレークポイントで停止している場合に、現在選択されているプロセスに適用されます（詳細については、「 &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process window&lt;/a&gt;&lt;/code&gt; 参照してください）。</target>
        </trans-unit>
        <trans-unit id="012b9ddb6f5b2f9ff9b23f710bee122c826518c8" translate="yes" xml:space="preserve">
          <source>The following menu items apply to the currently selected process:</source>
          <target state="translated">以下のメニュー項目は、現在選択されているプロセスに適用されます。</target>
        </trans-unit>
        <trans-unit id="961db581de293dbe681aab0fe7f1fa5413883ae0" translate="yes" xml:space="preserve">
          <source>The following message is sent to fred's client:</source>
          <target state="translated">以下のメッセージがフレッドのクライアントに送信されます。</target>
        </trans-unit>
        <trans-unit id="040a3190564c92ea22bf0b64f131001c6c8e6bcc" translate="yes" xml:space="preserve">
          <source>The following message is sent to peter's client:</source>
          <target state="translated">ピーターのクライアントには、以下のようなメッセージが送られています。</target>
        </trans-unit>
        <trans-unit id="46e910fb5b7dc40614e76e8f199ed8c133275031" translate="yes" xml:space="preserve">
          <source>The following message is taken care of by the &lt;code&gt;ssh_client_channel&lt;/code&gt; behavior.</source>
          <target state="translated">次のメッセージは、 &lt;code&gt;ssh_client_channel&lt;/code&gt; 動作によって処理されます。</target>
        </trans-unit>
        <trans-unit id="568021cb728093af7ccf7e34bcf43fc6d465a610" translate="yes" xml:space="preserve">
          <source>The following message is taken care of by the &lt;code&gt;ssh_server_channel&lt;/code&gt; behavior.</source>
          <target state="translated">次のメッセージは、 &lt;code&gt;ssh_server_channel&lt;/code&gt; 動作によって処理されます。</target>
        </trans-unit>
        <trans-unit id="95574b85a29dc16b146c7d05b6e10a7f4673d155" translate="yes" xml:space="preserve">
          <source>The following message is used to report that a response to a request has been received. The only request an agent can send is an Inform-Request.</source>
          <target state="translated">以下のメッセージは、リクエストに対する応答が受信されたことを報告するために使用されます。エージェントが送信できるリクエストはInform-Requestのみです。</target>
        </trans-unit>
        <trans-unit id="0c7528a0e8b223caeddcbcb738daf3c373f6236b" translate="yes" xml:space="preserve">
          <source>The following options are accepted by &lt;code&gt;&lt;a href=&quot;#cursor-2&quot;&gt;cursor/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#eval-2&quot;&gt;eval/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#fold-4&quot;&gt;fold/4&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#info-2&quot;&gt;info/2&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次のオプションは、 &lt;code&gt;&lt;a href=&quot;#cursor-2&quot;&gt;cursor/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#eval-2&quot;&gt;eval/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#fold-4&quot;&gt;fold/4&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#info-2&quot;&gt;info/2&lt;/a&gt;&lt;/code&gt; で受け入れられます。</target>
        </trans-unit>
        <trans-unit id="61183e21017b0486797e22d4c6cd3d34960e2bbe" translate="yes" xml:space="preserve">
          <source>The following options are also available, but their use is not recommended (they are mostly for Dialyzer developers and internal debugging):</source>
          <target state="translated">以下のオプションも利用できますが、それらの使用は推奨されません (これらは主に Dialyzer の開発者や内部デバッグ用です)。</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">以下のようなオプションがあります。</target>
        </trans-unit>
        <trans-unit id="bd679e7b65020adaa7caadfb8cc5ecd8137541b1" translate="yes" xml:space="preserve">
          <source>The following options are client-specific or have a slightly different meaning in the client than in the server:</source>
          <target state="translated">以下のオプションはクライアント固有のものであるか、クライアントではサーバとは若干異なる意味を持っています。</target>
        </trans-unit>
        <trans-unit id="43fc95d7126c192227c57609b602277d7d9fc9c6" translate="yes" xml:space="preserve">
          <source>The following options are relevant for execution:</source>
          <target state="translated">以下のオプションは実行に関連しています。</target>
        </trans-unit>
        <trans-unit id="e08de76658d5ff2a86a979ad65f0c82faad76c53" translate="yes" xml:space="preserve">
          <source>The following options are server-specific or have a slightly different meaning in the server than in the client:</source>
          <target state="translated">以下のオプションは、サーバ固有のものであったり、サーバではクライアントとは若干異なる意味を持っています。</target>
        </trans-unit>
        <trans-unit id="05f80f80cb76aee8e2eb49065b6adb6528a602a4" translate="yes" xml:space="preserve">
          <source>The following options are valid for specifying an SSH/SFTP connection (that is, can be used as configuration elements):</source>
          <target state="translated">SSH/SFTP接続を指定する際には、以下のオプションが有効です(設定要素として使用できます)。</target>
        </trans-unit>
        <trans-unit id="64236fe6def7f266116ddf3fd4dbff2f206d4ac0" translate="yes" xml:space="preserve">
          <source>The following options can also be specified with the suite information list:</source>
          <target state="translated">また、スイート情報リストでは、以下のオプションを指定することができます。</target>
        </trans-unit>
        <trans-unit id="7f19a5edc418a6bcc2f47d78030913af7ccd1058" translate="yes" xml:space="preserve">
          <source>The following options can be used:</source>
          <target state="translated">以下のオプションを使用することができます。</target>
        </trans-unit>
        <trans-unit id="11c58ec5e85924908f7ac6436290b127a355d50e" translate="yes" xml:space="preserve">
          <source>The following options have the same meaning in the client and the server:</source>
          <target state="translated">以下のオプションは、クライアントとサーバで同じ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="cc3e03d64e601199200fd4b43567e38970933b0e" translate="yes" xml:space="preserve">
          <source>The following options modify the defaults for the extraction as follows:</source>
          <target state="translated">以下のオプションは、抽出のデフォルトを以下のように変更します。</target>
        </trans-unit>
        <trans-unit id="ce8906ae4045d2d535cd313e6ec00213370b53c4" translate="yes" xml:space="preserve">
          <source>The following options must be present:</source>
          <target state="translated">以下のオプションが存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a2f1d45ea56db7e397408b134364d0f8afeb1b3" translate="yes" xml:space="preserve">
          <source>The following output is shown:</source>
          <target state="translated">以下のように出力されます。</target>
        </trans-unit>
        <trans-unit id="1e25b43e0cc5f60f33a4f8cad836e1610d7400d5" translate="yes" xml:space="preserve">
          <source>The following pair is returned for halt logs opened in &lt;code&gt;read_write&lt;/code&gt; mode:</source>
          <target state="translated">次のペアは、 &lt;code&gt;read_write&lt;/code&gt; モードで開かれた停止ログに対して返されます。</target>
        </trans-unit>
        <trans-unit id="c33b12b3e0b9d36e7372996a4a7abaf00697933a" translate="yes" xml:space="preserve">
          <source>The following pairs are returned for all logs opened in &lt;code&gt;read_write&lt;/code&gt; mode:</source>
          <target state="translated">&lt;code&gt;read_write&lt;/code&gt; モードで開いたすべてのログに対して、次のペアが返されます。</target>
        </trans-unit>
        <trans-unit id="7611c3aa913240353c120613c97a195274c20308" translate="yes" xml:space="preserve">
          <source>The following pairs are returned for all logs:</source>
          <target state="translated">すべてのログに対して以下のペアが返されます。</target>
        </trans-unit>
        <trans-unit id="91a838c6cf493f03c500bbdbcdd502edf542e0fe" translate="yes" xml:space="preserve">
          <source>The following pairs are returned for wrap logs opened in &lt;code&gt;read_write&lt;/code&gt; mode:</source>
          <target state="translated">次のペアは、 &lt;code&gt;read_write&lt;/code&gt; モードで開かれたラップログに対して返されます。</target>
        </trans-unit>
        <trans-unit id="224537c90399cde228dbede4c53cbc30f714374c" translate="yes" xml:space="preserve">
          <source>The following parameters can be specified for each Erlang service:</source>
          <target state="translated">以下のパラメータはErlangサービスごとに指定できます。</target>
        </trans-unit>
        <trans-unit id="7561aff36c4e31e9b40cf0d53c766582f8727228" translate="yes" xml:space="preserve">
          <source>The following parameters represents the SNMP configuration files &lt;code&gt;context.conf&lt;/code&gt;, &lt;code&gt;standard.conf&lt;/code&gt;, &lt;code&gt;community.conf&lt;/code&gt;, &lt;code&gt;vacm.conf&lt;/code&gt;, &lt;code&gt;usm.conf&lt;/code&gt;, &lt;code&gt;notify.conf&lt;/code&gt;, &lt;code&gt;target_addr.conf&lt;/code&gt;, and &lt;code&gt;target_params.conf&lt;/code&gt;. Notice that all values in &lt;code&gt;agent.conf&lt;/code&gt; can be modified by the parameters listed above. All these configuration files have default values set by the &lt;code&gt;SNMP&lt;/code&gt; application. These values can be overridden by suppling a list of valid configuration values or a file located in the test suites data directory, which can produce a list of valid configuration values if you apply function &lt;code&gt;file:consult/1&lt;/code&gt; to the file.</source>
          <target state="translated">以下のパラメーターは、SNMP構成ファイル &lt;code&gt;context.conf&lt;/code&gt; 、 &lt;code&gt;standard.conf&lt;/code&gt; 、 &lt;code&gt;community.conf&lt;/code&gt; 、 &lt;code&gt;vacm.conf&lt;/code&gt; 、 &lt;code&gt;usm.conf&lt;/code&gt; 、 &lt;code&gt;notify.conf&lt;/code&gt; 、 &lt;code&gt;target_addr.conf&lt;/code&gt; 、および &lt;code&gt;target_params.conf&lt;/code&gt; を表しています。 &lt;code&gt;agent.conf&lt;/code&gt; のすべての値は、上記のパラメーターによって変更できることに注意してください。これらすべての構成ファイルには、 &lt;code&gt;SNMP&lt;/code&gt; アプリケーションによって設定されたデフォルト値があります。これらの値は、有効な構成値のリストまたはテストスイートのデータディレクトリにあるファイルを提供することで上書きできます。関数 &lt;code&gt;file:consult/1&lt;/code&gt; を適用すると、有効な構成値のリストを生成できます。 ファイルに。</target>
        </trans-unit>
        <trans-unit id="cf9b8bf83a4a013f2ea8d7a63a8c6eceb1e8ce5f" translate="yes" xml:space="preserve">
          <source>The following pattern matches &quot;foo&quot; preceded by three digits and any three characters that are not &quot;999&quot;:</source>
          <target state="translated">以下のパターンは、3桁の数字で始まる「foo」の前に「999」以外の3つの文字がある場合にマッチします。</target>
        </trans-unit>
        <trans-unit id="b6c387fc7cb1c2a0aaf335c75b4b32deefd1c2b6" translate="yes" xml:space="preserve">
          <source>The following picture gives an overview of the mechanism to select an MIB view:</source>
          <target state="translated">以下の図は、MIBビューを選択する仕組みの概要を示しています。</target>
        </trans-unit>
        <trans-unit id="343b7de69e7382fea1083cf8cb82178662515737" translate="yes" xml:space="preserve">
          <source>The following picture illustrates the idea:</source>
          <target state="translated">下の写真はその考えを示しています。</target>
        </trans-unit>
        <trans-unit id="4b30adf5dd015c5f072d818ec045884b44dff621" translate="yes" xml:space="preserve">
          <source>The following prerequisites is required for understanding the material in the &lt;code&gt;Event Tracer (ET)&lt;/code&gt; User's Guide:</source>
          <target state="translated">&lt;code&gt;Event Tracer (ET)&lt;/code&gt; ユーザーガイドの内容を理解するには、次の前提条件が必要です。</target>
        </trans-unit>
        <trans-unit id="f494d18baeb5626e63a43266d42eed96b8ed12a2" translate="yes" xml:space="preserve">
          <source>The following prerequisites is required for understanding the material in the Megaco User's Guide:</source>
          <target state="translated">メガコユーザーズガイドの資料を理解するためには、以下の前提条件が必要です。</target>
        </trans-unit>
        <trans-unit id="1cbd57540b48d0efa55b14338c8830cec00d8547" translate="yes" xml:space="preserve">
          <source>The following prerequisites is required for understanding the material in the Reltool User's Guide:</source>
          <target state="translated">Reltoolユーザーズガイドの資料を理解するためには、以下の前提条件が必要です。</target>
        </trans-unit>
        <trans-unit id="7e4d733e362ec6903442fab3ca35dcd536f3cdbe" translate="yes" xml:space="preserve">
          <source>The following prerequisites is required for understanding the material in the SNMP User's Guide:</source>
          <target state="translated">SNMP ユーザーズガイドの資料を理解するためには、以下の前提条件が必要です。</target>
        </trans-unit>
        <trans-unit id="fab1a3516c76bbdd3d05df3eae1d2f555b42050e" translate="yes" xml:space="preserve">
          <source>The following procedure does not require root privilege:</source>
          <target state="translated">以下の手順では、root 権限は必要ありません。</target>
        </trans-unit>
        <trans-unit id="a8602668ad76f501ac94f891d7bfbf36be343c4f" translate="yes" xml:space="preserve">
          <source>The following program illustrates the different ways of creating funs:</source>
          <target state="translated">以下のプログラムでは、様々な楽しみ方があることを説明しています。</target>
        </trans-unit>
        <trans-unit id="dbcee6e28420ee50b59b118c6bd9505eaeb1f3e3" translate="yes" xml:space="preserve">
          <source>The following program module creates and populates previously defined tables:</source>
          <target state="translated">以下のプログラム・モジュールは、以前に定義されたテーブルを作成して入力します。</target>
        </trans-unit>
        <trans-unit id="872226e20506f4791f4924b86b65d0e2ff5aeff1" translate="yes" xml:space="preserve">
          <source>The following queries are accepted from remote nodes:</source>
          <target state="translated">リモートノードからは以下のクエリを受け付けています。</target>
        </trans-unit>
        <trans-unit id="34fcb8ab715f637bf664ee99fb64aae24ae2711f" translate="yes" xml:space="preserve">
          <source>The following record definitions can be created:</source>
          <target state="translated">以下のレコード定義を作成することができます。</target>
        </trans-unit>
        <trans-unit id="7aba38102e6596c004eb1b74efe69102547563ee" translate="yes" xml:space="preserve">
          <source>The following records are generated because of type &lt;code&gt;Emb&lt;/code&gt;:</source>
          <target state="translated">タイプ &lt;code&gt;Emb&lt;/code&gt; のために、以下のレコードが生成されます。</target>
        </trans-unit>
        <trans-unit id="52b8b7242e195bbd29d16d5919c21b7b689163ef" translate="yes" xml:space="preserve">
          <source>The following records used by xmerl to save the parsed data are defined in &lt;code&gt;xmerl.hrl&lt;/code&gt;</source>
          <target state="translated">xmerlが解析済みデータを保存するために使用する以下のレコードは、xmerl.hrlで定義されてい &lt;code&gt;xmerl.hrl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d8a7943f947fe72299ad61ae324cdc2eb219124" translate="yes" xml:space="preserve">
          <source>The following representations control how and where tests are executed:</source>
          <target state="translated">以下の表現は、テストがどのように、どこで実行されるかを制御します。</target>
        </trans-unit>
        <trans-unit id="86bacadf1ea90a3c97d82c63773f210e42c2a214" translate="yes" xml:space="preserve">
          <source>The following representations specify fixture handling for test sets:</source>
          <target state="translated">以下の表現は、テストセットのフィクスチャ処理を指定します。</target>
        </trans-unit>
        <trans-unit id="010a5b84d478f42d2d6af978a84f08199f613d86" translate="yes" xml:space="preserve">
          <source>The following requirements apply to the &lt;code&gt;.app&lt;/code&gt; file for an included application:</source>
          <target state="translated">含まれているアプリケーションの &lt;code&gt;.app&lt;/code&gt; ファイルには、次の要件が適用されます。</target>
        </trans-unit>
        <trans-unit id="47012e55fe1825d2922f7d5fb219850e8c4ce7ee" translate="yes" xml:space="preserve">
          <source>The following runs a test executing &lt;code&gt;tc12&lt;/code&gt; in &lt;code&gt;top1&lt;/code&gt; and any subgroup under &lt;code&gt;top1&lt;/code&gt; where it can be found (&lt;code&gt;sub11&lt;/code&gt; and &lt;code&gt;sub121&lt;/code&gt;):</source>
          <target state="translated">以下は、実行テスト実行 &lt;code&gt;tc12&lt;/code&gt; における &lt;code&gt;top1&lt;/code&gt; と下任意の亜群 &lt;code&gt;top1&lt;/code&gt; 、それを見つけることができる（ &lt;code&gt;sub11&lt;/code&gt; と &lt;code&gt;sub121&lt;/code&gt; を）：</target>
        </trans-unit>
        <trans-unit id="0e90b96a7f25790f2708f620c0e643b1c7f52c18" translate="yes" xml:space="preserve">
          <source>The following script illustrates a modification where the node is given the name &lt;code&gt;cp1&lt;/code&gt;, and where the environment variables &lt;code&gt;HEART_COMMAND&lt;/code&gt; and &lt;code&gt;TERM&lt;/code&gt; have been added to the previous script:</source>
          <target state="translated">次のスクリプトは、ノードに &lt;code&gt;cp1&lt;/code&gt; という名前が付けられ、環境変数 &lt;code&gt;HEART_COMMAND&lt;/code&gt; および &lt;code&gt;TERM&lt;/code&gt; が前のスクリプトに追加されている変更を示しています。</target>
        </trans-unit>
        <trans-unit id="5db13a72ee33e776ce2ddcad2d3b2330d02936db" translate="yes" xml:space="preserve">
          <source>The following script illustrates the behaviour of the program:</source>
          <target state="translated">以下のスクリプトは、プログラムの動作を示しています。</target>
        </trans-unit>
        <trans-unit id="4cb6bb01c4a2fc6f1d31fffabe3ea35bf47bbd99" translate="yes" xml:space="preserve">
          <source>The following script illustrates the default behaviour of the program:</source>
          <target state="translated">次のスクリプトは、プログラムのデフォルトの動作を示しています。</target>
        </trans-unit>
        <trans-unit id="1730c3be7b670e5f6ed8dc96c7503a465a16bfb5" translate="yes" xml:space="preserve">
          <source>The following searches &lt;code&gt;top1&lt;/code&gt; and all its subgroups for &lt;code&gt;tc16&lt;/code&gt; resulting in that this test case executes in group &lt;code&gt;sub121&lt;/code&gt;:</source>
          <target state="translated">次の検索 &lt;code&gt;top1&lt;/code&gt; とのためにそのすべてのサブグループ &lt;code&gt;tc16&lt;/code&gt; をもたらすグループにこのテストケースが実行する &lt;code&gt;sub121&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="526a47fb0328941b790c466199e779b1931bd0e8" translate="yes" xml:space="preserve">
          <source>The following section describes the mandatory and optional test suite functions that &lt;code&gt;Common Test&lt;/code&gt; calls during test execution. For more details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter&quot;&gt;Writing Test Suites&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">次のセクションでは、テストの実行中に &lt;code&gt;Common Test&lt;/code&gt; が呼び出す必須およびオプションのテストスイート関数について説明します。詳細については、ユーザーガイドの「 &lt;code&gt;&lt;a href=&quot;write_test_chapter&quot;&gt;Writing Test Suites&lt;/a&gt;&lt;/code&gt; の記述」を参照してください。</target>
        </trans-unit>
        <trans-unit id="72c1a7ce03d50e78be89c8cc10dbc16d75c4a19c" translate="yes" xml:space="preserve">
          <source>The following sections contain reference material for the regular expressions used by this module. The information is based on the PCRE documentation, with changes where this module behaves differently to the PCRE library.</source>
          <target state="translated">以下のセクションには、このモジュールで使用される正規表現の参考資料が含まれています。情報は PCRE ドキュメントに基づいていますが、このモジュールが PCRE ライブラリとは異なる動作をする場合には変更があります。</target>
        </trans-unit>
        <trans-unit id="83810d4821d49c1738acda1b065dd05f79bc8cd1" translate="yes" xml:space="preserve">
          <source>The following sections deal with target systems with different requirements of functionality:</source>
          <target state="translated">以下のセクションでは、機能要件の異なるターゲットシステムを扱います。</target>
        </trans-unit>
        <trans-unit id="38eecd6e67f72292d41c686c8caab1a223f8a8a9" translate="yes" xml:space="preserve">
          <source>The following sections describe how the instrumentation functions should be defined in Erlang for the different operations. In the following, &lt;code&gt;RowIndex&lt;/code&gt; is a list of key values for the table, and &lt;code&gt;Column&lt;/code&gt; is a column number.</source>
          <target state="translated">次のセクションでは、さまざまな操作のために、Erlangで計測関数を定義する方法について説明します。以下では、 &lt;code&gt;RowIndex&lt;/code&gt; はテーブルのキー値のリストで、 &lt;code&gt;Column&lt;/code&gt; は列番号です。</target>
        </trans-unit>
        <trans-unit id="93b41da5ab42cf67eae696be1649b8c0efaf1bfc" translate="yes" xml:space="preserve">
          <source>The following sections describe how to use CTHs, when they are run, and how to manipulate the test results in a CTH.</source>
          <target state="translated">以下では、CTHの使用方法、実行時期、CTHでの試験結果の操作方法について説明します。</target>
        </trans-unit>
        <trans-unit id="31ea898329f4b3682826cd0bafcd93ad163d085b" translate="yes" xml:space="preserve">
          <source>The following sections describe sequential tracing and its most fundamental concepts.</source>
          <target state="translated">以下のセクションでは、シーケンシャルトレースとその最も基本的な概念について説明します。</target>
        </trans-unit>
        <trans-unit id="9600ad9c1d4332036b9e8528fa9289370114665e" translate="yes" xml:space="preserve">
          <source>The following sections describe some of the fields in the information tabs. These are fields that do not exist in the raw crashdump, or in some way differ from the fields in the raw crashdump. For details about other fields, see the &lt;code&gt;ERTS User's Guide&lt;/code&gt;, section &quot;How to interpret the Erlang crash dumps&quot;. That section can also be opened from the &lt;strong&gt;Help&lt;/strong&gt; menu in the main window. There are also links from the following sections to related information in &quot;How to interpret the Erlang crash dumps&quot;.</source>
          <target state="translated">次のセクションでは、情報タブのいくつかのフィールドについて説明します。これらは、未加工のクラッシュダンプに存在しないフィールドであるか、または未加工のクラッシュダンプのフィールドと何らかの点で異なります。その他のフィールドの詳細については、 &lt;code&gt;ERTS User's Guide&lt;/code&gt; 「Erlangクラッシュダンプの解釈方法」のセクションを参照してください。このセクションは、メインウィンドウの[ &lt;strong&gt;ヘルプ&lt;/strong&gt; ]メニューから開くこともできます。次のセクションから、「Erlangクラッシュダンプの解釈方法」の関連情報へのリンクもあります。</target>
        </trans-unit>
        <trans-unit id="e038c99195f68fa297f2e5f9e78c69595a14730e" translate="yes" xml:space="preserve">
          <source>The following sections describe the mandatory and optional CTH functions that &lt;code&gt;Common Test&lt;/code&gt; calls during test execution. For more details, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">次のセクションでは、テストの実行中に &lt;code&gt;Common Test&lt;/code&gt; が呼び出す必須およびオプションのCTH関数について説明します。詳細については、 『ユーザーズガイド』の「 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="8ca82394dc00f1e6d08913e914b59a46cf6c2484" translate="yes" xml:space="preserve">
          <source>The following sections describe the use of each metacharacter.</source>
          <target state="translated">以下では、各メタキャラクタの使用方法について説明します。</target>
        </trans-unit>
        <trans-unit id="57bd03425adcf43ca596408a2b02f2936cfeb5dd" translate="yes" xml:space="preserve">
          <source>The following sections describe these steps.</source>
          <target state="translated">以下では、これらの手順について説明します。</target>
        </trans-unit>
        <trans-unit id="ef3caea09c20221894e510d93d0376e9f32ba13c" translate="yes" xml:space="preserve">
          <source>The following sections show some examples of how to profile with Fprof. See also the reference manual &lt;code&gt;&lt;a href=&quot;fprof&quot;&gt;fprof(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次のセクションでは、Fprofでプロファイリングする方法の例をいくつか示します。リファレンスマニュアル &lt;code&gt;&lt;a href=&quot;fprof&quot;&gt;fprof(3)&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="98275a3598f57cab63cd60d26cf4b95397a5db2f" translate="yes" xml:space="preserve">
          <source>The following sections show some examples of profiling with &lt;code&gt;cprof&lt;/code&gt;. See also &lt;code&gt;&lt;a href=&quot;cprof&quot;&gt;cprof(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次のセクションでは、 &lt;code&gt;cprof&lt;/code&gt; を使用したプロファイリングの例をいくつか示します。 &lt;code&gt;&lt;a href=&quot;cprof&quot;&gt;cprof(3)&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="3346c4bffa9bbaca48b8099eae111ab7c83c1879" translate="yes" xml:space="preserve">
          <source>The following sections show some features of Xref, beginning with a module check and a predefined analysis. Then follow examples that can be skipped on the first reading; not all of the concepts used are explained, and it is assumed that the &lt;code&gt;&lt;a href=&quot;xref&quot;&gt;reference manual&lt;/a&gt;&lt;/code&gt; has been at least skimmed.</source>
          <target state="translated">次のセクションでは、モジュールチェックと定義済みの分析から始めて、外部参照のいくつかの機能を示します。次に、最初の読みでスキップできる例に従ってください。使用されているすべての概念が説明されているわけではありません。 &lt;code&gt;&lt;a href=&quot;xref&quot;&gt;reference manual&lt;/a&gt;&lt;/code&gt; は少なくともスキミングされていると想定されています。</target>
        </trans-unit>
        <trans-unit id="4f224d7ff4347a5d76be2a01609f9bb95ab48bc8" translate="yes" xml:space="preserve">
          <source>The following sequence of calls fails:</source>
          <target state="translated">以下の一連の呼び出しは失敗します。</target>
        </trans-unit>
        <trans-unit id="6f684598ccd6c3370add4d7675b782860903e544" translate="yes" xml:space="preserve">
          <source>The following sequence works, as the call to &lt;code&gt;repair_continuation/2&lt;/code&gt; reestablishes the (deliberately) invalidated continuation &lt;code&gt;Broken&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;repair_continuation/2&lt;/code&gt; への呼び出しが（意図的に）無効化された継続 &lt;code&gt;Broken&lt;/code&gt; を再確立すると、次のシーケンスが機能します。</target>
        </trans-unit>
        <trans-unit id="d8d34878ccc7af10841358fe32d20c8e85617519" translate="yes" xml:space="preserve">
          <source>The following session with the Erlang shell shows how to load the &lt;code&gt;FRUITS&lt;/code&gt; database:</source>
          <target state="translated">Erlangシェルを使用した次のセッションは、 &lt;code&gt;FRUITS&lt;/code&gt; データベースをロードする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1ca2b9cadd413c828114f5fdadb155510f45b89f" translate="yes" xml:space="preserve">
          <source>The following shell interaction starts &lt;code&gt;Mnesia&lt;/code&gt; and initializes the schema for the &lt;code&gt;Company&lt;/code&gt; database:</source>
          <target state="translated">次のシェルの相互作用は &lt;code&gt;Mnesia&lt;/code&gt; を起動し、 &lt;code&gt;Company&lt;/code&gt; データベースのスキーマを初期化します。</target>
        </trans-unit>
        <trans-unit id="3e56ec35aa2570200adfb4251b42d9a7a4dbc048" translate="yes" xml:space="preserve">
          <source>The following shows an example &lt;code&gt;.rel&lt;/code&gt; file with TLS added:</source>
          <target state="translated">次に、TLSが追加された &lt;code&gt;.rel&lt;/code&gt; ファイルの例を示します。</target>
        </trans-unit>
        <trans-unit id="e94749126c9966bcf63f22766109b91add03d6be" translate="yes" xml:space="preserve">
          <source>The following shows examples of how UTF-8 encoded binaries can be created and manipulated:</source>
          <target state="translated">以下に、UTF-8エンコードされたバイナリを作成して操作する方法の例を示します。</target>
        </trans-unit>
        <trans-unit id="53b230af1628e298070b4609c7e79b754d5b0d07" translate="yes" xml:space="preserve">
          <source>The following shows how the compiler can be called from the Erlang shell:</source>
          <target state="translated">以下はErlangシェルからコンパイラを呼び出す方法を示しています。</target>
        </trans-unit>
        <trans-unit id="729768340129de2ea35b78f26817f116e7bf52b6" translate="yes" xml:space="preserve">
          <source>The following simple code illustrates the relationship between the simplified access functions used in most of the examples and their more flexible counterparts:</source>
          <target state="translated">以下の簡単なコードは、ほとんどの例で使用されている簡略化されたアクセス関数と、それらのより柔軟性の高い関数との関係を示しています。</target>
        </trans-unit>
        <trans-unit id="b84b8caa8b26cb602514d1eab6fc03a38ae48762" translate="yes" xml:space="preserve">
          <source>The following small module is used in the subsequent example:</source>
          <target state="translated">その後の例では、以下のような小さなモジュールを使用しています。</target>
        </trans-unit>
        <trans-unit id="6b1dfc37e671a01a444893fce16128adaeffd6fa" translate="yes" xml:space="preserve">
          <source>The following steps are needed to get a running agent:</source>
          <target state="translated">実行中のエージェントを取得するには、以下の手順が必要です。</target>
        </trans-unit>
        <trans-unit id="bc08bddc5161d849d8adaf8a442d077969754d3f" translate="yes" xml:space="preserve">
          <source>The following steps are needed to get the manager running:</source>
          <target state="translated">マネージャーを起動させるには、以下の手順が必要です。</target>
        </trans-unit>
        <trans-unit id="fa6e913607cc215db5650f46601c1682dec9a4c4" translate="yes" xml:space="preserve">
          <source>The following tags appears in the list:</source>
          <target state="translated">リストには以下のタグが表示されます。</target>
        </trans-unit>
        <trans-unit id="59f95e04d57dcd84839504590aa3ea9df899aa69" translate="yes" xml:space="preserve">
          <source>The following tags have special meaning:</source>
          <target state="translated">以下のタグには特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="1e75dc33e0130efecbbf3b0c117aa1a4317b0d14" translate="yes" xml:space="preserve">
          <source>The following terms are allowed in a cover specification file:</source>
          <target state="translated">表紙仕様ファイルでは、以下の用語が認められています。</target>
        </trans-unit>
        <trans-unit id="082dcb2df904c716cc9a3e85c660d6af2e65ff42" translate="yes" xml:space="preserve">
          <source>The following top level &lt;code&gt;options&lt;/code&gt; are supported:</source>
          <target state="translated">次の最上位 &lt;code&gt;options&lt;/code&gt; がサポートされています。</target>
        </trans-unit>
        <trans-unit id="49a42c98aae1a012fca04ff4fc1c26473f67efa7" translate="yes" xml:space="preserve">
          <source>The following topics are included:</source>
          <target state="translated">以下のようなトピックが含まれています。</target>
        </trans-unit>
        <trans-unit id="05245f82bf6574a4a5eff794c54d89c9d6171eb9" translate="yes" xml:space="preserve">
          <source>The following topics are not treated in this section:</source>
          <target state="translated">以下のトピックは本項では扱いません。</target>
        </trans-unit>
        <trans-unit id="ab7564645416f18d8a1c44a537bed7227fcf3ddd" translate="yes" xml:space="preserve">
          <source>The following trace output is received during test:</source>
          <target state="translated">テスト中に以下のようなトレース出力を受信します。</target>
        </trans-unit>
        <trans-unit id="b466650d4111c63d9300f7fbae0b73cc83cacf0c" translate="yes" xml:space="preserve">
          <source>The following two Kernel configuration parameters affect the behavior of all sockets opened on an Erlang node:</source>
          <target state="translated">以下の2つのカーネル設定パラメータはErlangノード上で開かれたすべてのソケットの動作に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="4a11518ecf3b3d71056ddbfd18678d2117872201" translate="yes" xml:space="preserve">
          <source>The following two calls give the same result (but certainly not the same execution time):</source>
          <target state="translated">以下の2つの呼び出しは、同じ結果を与えます(しかし、確かに同じ実行時間ではありません)。</target>
        </trans-unit>
        <trans-unit id="5507869e7948c09fc8040111e6b2cadd35e4aff0" translate="yes" xml:space="preserve">
          <source>The following two directories must exist in the system to run the agent:</source>
          <target state="translated">エージェントを実行するためには、以下の2つのディレクトリがシステム内に存在している必要があります。</target>
        </trans-unit>
        <trans-unit id="113cb904554a59290d2e213118f8d8428037b8fb" translate="yes" xml:space="preserve">
          <source>The following two functions can be used to retrieve system information. For details, see the Reference Manual.</source>
          <target state="translated">システム情報を取得するには、以下の 2 つの機能を使用します。詳細は、リファレンスマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="71cd872babc8d6113efd7cead6cf75e880db8ea3" translate="yes" xml:space="preserve">
          <source>The following two functions manipulate indexes on existing tables:</source>
          <target state="translated">以下の2つの関数は、既存のテーブルのインデックスを操作します。</target>
        </trans-unit>
        <trans-unit id="706b90dd5c946a37fcc3ef255278e31f7c9293de" translate="yes" xml:space="preserve">
          <source>The following two notations are available for representation of &lt;code&gt;BIT STRING&lt;/code&gt; values in Erlang and as input to the encode functions:</source>
          <target state="translated">次の2つの表記法は、Erlang での &lt;code&gt;BIT STRING&lt;/code&gt; 値の表現、およびエンコード関数への入力として使用できます。</target>
        </trans-unit>
        <trans-unit id="9929e878110d22fef5c962cd4c16eef48be74d8c" translate="yes" xml:space="preserve">
          <source>The following two pairs of functions support this scenario:</source>
          <target state="translated">このシナリオをサポートするのは、以下の2組の関数です。</target>
        </trans-unit>
        <trans-unit id="09ba41aca160585c0b08fc3e3fe758e0deed5098" translate="yes" xml:space="preserve">
          <source>The following type definitions are used by more than one function in the FTP client API:</source>
          <target state="translated">以下の型定義は、FTPクライアントAPIで複数の関数で使用されています。</target>
        </trans-unit>
        <trans-unit id="9226ce7513015120a190ef4af2c57e38cf1718d8" translate="yes" xml:space="preserve">
          <source>The following values are allowed for &lt;code&gt;Key&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; には次の値を使用できます。</target>
        </trans-unit>
        <trans-unit id="6c84aa8502d90e7ba6f618344ec9f0990938b08f" translate="yes" xml:space="preserve">
          <source>The following verb causes a matching failure, forcing backtracking to occur. It is equivalent to (?!) but easier to read.</source>
          <target state="translated">次の動詞は、マッチングの失敗を引き起こし、バックトラッキングを強制的に発生させます。(?!)と同等ですが、読みやすいです。</target>
        </trans-unit>
        <trans-unit id="c74b31c10443669b849931e80db4cb844acc7e6d" translate="yes" xml:space="preserve">
          <source>The following verb causes a skip to the next innermost alternative when backtracking reaches it. That is, it cancels any further backtracking within the current alternative.</source>
          <target state="translated">次の動詞は、バックトラックが次の最も内側の代替手段に到達したときに、次の最も内側の代替手段にスキップさせる。つまり、現在の代替手段内でのそれ以上のバックトラックをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="3626ed56739d6ce7e205e1a6154059baf311b051" translate="yes" xml:space="preserve">
          <source>The following verb causes the match to fail at the current starting position in the subject if there is a later matching failure that causes backtracking to reach it:</source>
          <target state="translated">次の動詞は、主語の現在の開始位置に到達するためのバックトラックを引き起こすような後からのマッチング失敗があった場合、現在の開始位置でマッチングが失敗するようにします。</target>
        </trans-unit>
        <trans-unit id="20e32c99b23fb1cb8aa4ff4619bdeb76fe057cfe" translate="yes" xml:space="preserve">
          <source>The following verb, when specified without a name, is like (*PRUNE), except that if the pattern is unanchored, the &quot;bumpalong&quot; advance is not to the next character, but to the position in the subject where (*SKIP) was encountered.</source>
          <target state="translated">次の動詞は、名前なしで指定された場合、パターンがアンチョークされている場合、&quot;bumpalong &quot;の前進は次の文字ではなく、(*skip)に遭遇した主語の位置になることを除いて、(*prune)のようになります。</target>
        </trans-unit>
        <trans-unit id="56e82a4845f59e054a6c2a8f1874cfef875f8736" translate="yes" xml:space="preserve">
          <source>The following verb, which must not be followed by a name, causes the whole match to fail outright if there is a later matching failure that causes backtracking to reach it. Even if the pattern is unanchored, no further attempts to find a match by advancing the starting point take place.</source>
          <target state="translated">名前の後に続いてはいけない次の動詞は、後になってバックトラックしてそこに到達するようなマッチングの失敗があった場合、マッチ全体が完全に失敗する原因となります。パターンがアンアンカーされていない場合でも、開始点を進めてマッチを見つけようとする試みは行われません。</target>
        </trans-unit>
        <trans-unit id="4d2ee15663a5b3e2b4b9ab4b42fcb763860ca710" translate="yes" xml:space="preserve">
          <source>The following verbs act as soon as they are encountered. They must not be followed by a name.</source>
          <target state="translated">次の動詞は、遭遇するとすぐに行動します。これらの動詞の後に名前をつけてはいけません。</target>
        </trans-unit>
        <trans-unit id="6bc631f8808db5a059db58a11cb23a25b194b9bc" translate="yes" xml:space="preserve">
          <source>The following verbs do nothing when they are encountered. Matching continues with what follows, but if there is no subsequent match, causing a backtrack to the verb, a failure is forced. That is, backtracking cannot pass to the left of the verb. However, when one of these verbs appears inside an atomic group or an assertion that is true, its effect is confined to that group, as once the group has been matched, there is never any backtracking into it. In this situation, backtracking can &quot;jump back&quot; to the left of the entire atomic group or assertion. (Remember also, as stated above, that this localization also applies in subroutine calls.)</source>
          <target state="translated">以下の動詞は遭遇しても何もしません。マッチングは後続のものと継続しますが、後続のマッチがなく、動詞へのバックトラックを引き起こした場合は、失敗を余儀なくされます。つまり、バックトラックは動詞の左には通らないのです。しかし、これらの動詞のいずれかが原子群や真である主張の中に現れた場合、その効果はその群に限定され、一度一致してしまうとその群にバックトラックが入ることはありません。この状況では、バックトラックは原子グループやアサーション全体の左に「ジャンプバック」することができます。(上で述べたように、この局在化はサブルーチン呼び出しにも適用されることを覚えておいてください)。</target>
        </trans-unit>
        <trans-unit id="e618ac47f63af62ceb8671ae5e22050d8ff5aec4" translate="yes" xml:space="preserve">
          <source>The following warnings and restrictions apply to the funs used in with &lt;code&gt;ets:fun2ms/1&lt;/code&gt; and &lt;code&gt;dbg:fun2ms/1&lt;/code&gt;.</source>
          <target state="translated">次の警告と制限は、 &lt;code&gt;ets:fun2ms/1&lt;/code&gt; および &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; で使用されるファンに適用されます。</target>
        </trans-unit>
        <trans-unit id="58ed2789e1ec56e8739ba6ba58818f4844d3585c" translate="yes" xml:space="preserve">
          <source>The following will appear at the console on the node that started the trace client:</source>
          <target state="translated">トレースクライアントを起動したノードのコンソールに以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="4f6cfe143c1844487af6c9d7af979551cc8a56ef" translate="yes" xml:space="preserve">
          <source>The foreign key</source>
          <target state="translated">外部キー</target>
        </trans-unit>
        <trans-unit id="d5bbce337b986ce05bfb1074200a1cd8e6ba791d" translate="yes" xml:space="preserve">
          <source>The format and value of &lt;code&gt;FixationTime&lt;/code&gt; depends on &lt;code&gt;Item&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;FixationTime&lt;/code&gt; の形式と値は、 &lt;code&gt;Item&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="403056f7b6145ea80b76c6096562c79850393812" translate="yes" xml:space="preserve">
          <source>The format function is also optional. It is called by &lt;code&gt;&lt;a href=&quot;#info-1&quot;&gt;info/1,2&lt;/a&gt;&lt;/code&gt; to give feedback at runtime of how the query is to be evaluated. Try to give as good feedback as possible without showing too much details. In the example, at most seven objects of the table are shown. The format function handles two cases: &lt;code&gt;all&lt;/code&gt; means that all objects of the table are traversed; &lt;code&gt;{lookup,&amp;nbsp;1,&amp;nbsp;KeyValues}&lt;/code&gt; means that the lookup function is used for looking up key values.</source>
          <target state="translated">フォーマット機能もオプションです。これは &lt;code&gt;&lt;a href=&quot;#info-1&quot;&gt;info/1,2&lt;/a&gt;&lt;/code&gt; によって呼び出され、クエリの評価方法の実行時にフィードバックを提供します。詳細をあまり示さずに、できるだけ良いフィードバックを提供するようにしてください。この例では、テーブルの最大7つのオブジェクトが表示されます。format関数は2つのケースを処理します。 &lt;code&gt;all&lt;/code&gt; は、テーブルのすべてのオブジェクトがトラバースされることを意味します。 &lt;code&gt;{lookup,&amp;nbsp;1,&amp;nbsp;KeyValues}&lt;/code&gt; は、キー値を検索するために検索関数が使用されることを意味します。</target>
        </trans-unit>
        <trans-unit id="a28925d546a087448d542d4ec3fe58c4d1daac9b" translate="yes" xml:space="preserve">
          <source>The format is parsable with the standard Erlang parsing tools &lt;code&gt;erl_scan&lt;/code&gt; and &lt;code&gt;erl_parse&lt;/code&gt;, &lt;code&gt;file:consult/1&lt;/code&gt; or &lt;code&gt;io:read/2&lt;/code&gt;. The parse format is not explained here - it should be easy for the interested to try it out. Note that some flags to &lt;code&gt;analyse/1&lt;/code&gt; will affect the format.</source>
          <target state="translated">この形式は、標準のErlang解析ツール &lt;code&gt;erl_scan&lt;/code&gt; および &lt;code&gt;erl_parse&lt;/code&gt; 、 &lt;code&gt;file:consult/1&lt;/code&gt; consult / 1または &lt;code&gt;io:read/2&lt;/code&gt; で解析できます。解析形式についてはここでは説明しません-興味のある人は簡単に試すことができます。 &lt;code&gt;analyse/1&lt;/code&gt; へのいくつかのフラグはフォーマットに影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="dd5e5f8070fec3acf0e1ec232310a61ff03f8b85" translate="yes" xml:space="preserve">
          <source>The format of &lt;code&gt;Drive&lt;/code&gt; is invalid.</source>
          <target state="translated">&lt;code&gt;Drive&lt;/code&gt; のフォーマットが無効です。</target>
        </trans-unit>
        <trans-unit id="dbaf4dd1e5a91b60292984d5a8e1ea127c178da5" translate="yes" xml:space="preserve">
          <source>The format of &lt;code&gt;Listing&lt;/code&gt; depends on the operating system. On UNIX, it is typically produced from the output of the &lt;code&gt;ls -l&lt;/code&gt; shell command.</source>
          <target state="translated">&lt;code&gt;Listing&lt;/code&gt; の形式は、オペレーティングシステムによって異なります。UNIXでは、通常、 &lt;code&gt;ls -l&lt;/code&gt; シェルコマンドの出力から生成されます。</target>
        </trans-unit>
        <trans-unit id="3a8dac735cad80fa64163e77b01f6b5b6e6b931f" translate="yes" xml:space="preserve">
          <source>The format of &lt;code&gt;Listing&lt;/code&gt; is a stream of filenames where each filename is separated by &amp;lt;CRLF&amp;gt; or &amp;lt;NL&amp;gt;. Contrary to function &lt;code&gt;ls&lt;/code&gt;, the purpose of &lt;code&gt;nlist&lt;/code&gt; is to enable a program to process filename information automatically.</source>
          <target state="translated">&lt;code&gt;Listing&lt;/code&gt; のフォーマットはファイル名のストリームであり、各ファイル名は&amp;lt;CRLF&amp;gt;または&amp;lt;NL&amp;gt;で区切られています。関数 &lt;code&gt;ls&lt;/code&gt; とは異なり、 &lt;code&gt;nlist&lt;/code&gt; の目的は、プログラムがファイル名情報を自動的に処理できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="ca6bda514e36415bd8dfddbfd465c752506ba14c" translate="yes" xml:space="preserve">
          <source>The format of an audit trail log text item is as follows:</source>
          <target state="translated">監査証跡ログのテキスト項目のフォーマットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="44015ed1506dab2702bf874c622404e1cdd4a16b" translate="yes" xml:space="preserve">
          <source>The format of decoded messages and grouped AVPs in the &lt;code&gt;msg&lt;/code&gt; field of diameter_packet records and &lt;code&gt;value&lt;/code&gt; field of diameter_avp records respectively. If &lt;code&gt;record&lt;/code&gt; then a record whose definition is generated from the dictionary file in question. If &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;map&lt;/code&gt; then a &lt;code&gt;[Name | Avps]&lt;/code&gt; pair where &lt;code&gt;Avps&lt;/code&gt; is a list of AVP name/values pairs or a map keyed on AVP names respectively. If &lt;code&gt;none&lt;/code&gt; then the atom-value message name, or &lt;code&gt;undefined&lt;/code&gt; for a Grouped AVP. See also &lt;code&gt;&lt;a href=&quot;diameter_codec#message&quot;&gt;diameter_codec:message()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">デコードされたメッセージのフォーマットと、diameter_packetレコードの &lt;code&gt;msg&lt;/code&gt; フィールドとdiameter_avpレコードの &lt;code&gt;value&lt;/code&gt; フィールドのグループ化されたAVP 。if &lt;code&gt;record&lt;/code&gt; 場合、問題の辞書ファイルから定義が生成されるレコード。もし &lt;code&gt;list&lt;/code&gt; や &lt;code&gt;map&lt;/code&gt; 、次に &lt;code&gt;[Name | Avps]&lt;/code&gt; ペア。ここで、 &lt;code&gt;Avps&lt;/code&gt; は、AVPの名前と値のペアのリスト、またはAVP名をキーとするマップです。存在し &lt;code&gt;none&lt;/code&gt; 場合、アトム値メッセージ名、またはグループ化されたAVPに対して &lt;code&gt;undefined&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;diameter_codec#message&quot;&gt;diameter_codec:message()&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="317788b6344114efeaf6f36e9948bb10fc231c82" translate="yes" xml:space="preserve">
          <source>The format of file &lt;code&gt;.hosts.erlang&lt;/code&gt; must be one host name per line. The host names must be within quotes.</source>
          <target state="translated">ファイル &lt;code&gt;.hosts.erlang&lt;/code&gt; のフォーマットは、1行に1つのホスト名でなければなりません。ホスト名は引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="2487f5cf9c75d813920c0dba73a01025e41c80a7" translate="yes" xml:space="preserve">
          <source>The format of received events is not defined.</source>
          <target state="translated">受信したイベントのフォーマットは定義されていません。</target>
        </trans-unit>
        <trans-unit id="9bfd68e235d56611f777394a5db1608f345a2ba3" translate="yes" xml:space="preserve">
          <source>The format of the &lt;code&gt;otp_versions.table&lt;/code&gt; might be subject to changes during the OTP 17 release.</source>
          <target state="translated">&lt;code&gt;otp_versions.table&lt;/code&gt; のフォーマットは、OTP 17リリース中に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="689c1f8b385b83aa3589eb65a1746eb08236ca62" translate="yes" xml:space="preserve">
          <source>The format of the configuration file is found in the &lt;code&gt;syslog.conf(5)&lt;/code&gt; manual page, by issuing the command &lt;code&gt;man syslog.conf&lt;/code&gt;.</source>
          <target state="translated">構成ファイルのフォーマットは、 &lt;code&gt;syslog.conf(5)&lt;/code&gt; のマニュアルページで、 &lt;code&gt;man syslog.conf&lt;/code&gt; コマンドを発行することで確認できます。</target>
        </trans-unit>
        <trans-unit id="f9f90e37b89af3e970911fe6712a87407f263ba3" translate="yes" xml:space="preserve">
          <source>The format of the crash dump evolves between OTP releases. Some information described here may not apply to your version. A description like this will never be complete; it is meant as an explanation of the crash dump in general and as a help when trying to find application errors, not as a complete specification.</source>
          <target state="translated">クラッシュ・ダンプの形式は、OTP リリース間で変化します。ここで説明されている情報の中には、あなたのバージョンには適用されないものもあります。このような説明が完全であることはありません。これは、クラッシュダンプの一般的な説明と、アプリケーションのエラーを見つけようとするときの助けになることを意図したものであり、完全な仕様ではありません。</target>
        </trans-unit>
        <trans-unit id="eb9b12cb8d3ac8423ae8bea95db89eaec323992a" translate="yes" xml:space="preserve">
          <source>The format of the messages is one of the following, depending on if flag &lt;code&gt;timestamp&lt;/code&gt; of the trace token is set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">メッセージの形式は、トレーストークンのフラグ &lt;code&gt;timestamp&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; のどちらに設定されているかに応じて、次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="168262e7bb4ad03b8f9aa164f315f9eabe54fc52" translate="yes" xml:space="preserve">
          <source>The format of the node name is an atom &lt;code&gt;name@host&lt;/code&gt;. &lt;code&gt;name&lt;/code&gt; is the name given by the user. &lt;code&gt;host&lt;/code&gt; is the full host name if long names are used, or the first part of the host name if short names are used. &lt;code&gt;node()&lt;/code&gt; returns the name of the node.</source>
          <target state="translated">ノード名の形式は、アトム &lt;code&gt;name@host&lt;/code&gt; です。 &lt;code&gt;name&lt;/code&gt; は、ユーザーが指定した名前です。 &lt;code&gt;host&lt;/code&gt; は、長い名前が使用されている場合は完全なホスト名、短い名前が使用されている場合はホスト名の最初の部分です。 &lt;code&gt;node()&lt;/code&gt; はノードの名前を返します。</target>
        </trans-unit>
        <trans-unit id="e18dae497a998ac661c28b510144fccadd65f4ce" translate="yes" xml:space="preserve">
          <source>The format of the node status change messages depends on &lt;code&gt;Options&lt;/code&gt;. If &lt;code&gt;Options&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt;, which is the default, the format is as follows:</source>
          <target state="translated">ノードステータス変更メッセージのフォーマットは、 &lt;code&gt;Options&lt;/code&gt; によって異なります。 &lt;code&gt;Options&lt;/code&gt; がデフォルトの &lt;code&gt;[]&lt;/code&gt; の場合、形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="765472921ad5d1b4e5d1dc40a24f50b66dda836a" translate="yes" xml:space="preserve">
          <source>The format of the status message is as follows:</source>
          <target state="translated">ステータスメッセージのフォーマットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f119a1fe58fd91d2d32fa64f2417a092c14ccb82" translate="yes" xml:space="preserve">
          <source>The format of the text file is as follows:</source>
          <target state="translated">テキストファイルの形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4333a537987dd2c37f631936cd505a940685024b" translate="yes" xml:space="preserve">
          <source>The format stored in the &lt;code&gt;debug_info&lt;/code&gt; chunk. To retrieve particular code representation from the backend, &lt;code&gt;Backend:debug_info(Format, Module, Data, Opts)&lt;/code&gt; must be invoked. &lt;code&gt;Format&lt;/code&gt; is an atom, such as &lt;code&gt;erlang_v1&lt;/code&gt; for the Erlang Abstract Format or &lt;code&gt;core_v1&lt;/code&gt; for Core Erlang. &lt;code&gt;Module&lt;/code&gt; is the module represented by the beam file and &lt;code&gt;Data&lt;/code&gt; is the value stored in the debug info chunk. &lt;code&gt;Opts&lt;/code&gt; is any list of values supported by the &lt;code&gt;Backend&lt;/code&gt;. &lt;code&gt;Backend:debug_info/4&lt;/code&gt; must return &lt;code&gt;{ok, Code}&lt;/code&gt; or &lt;code&gt;{error, Term}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;debug_info&lt;/code&gt; チャンクに格納されているフォーマット。特定のコード表現をバックエンドから取得するには、 &lt;code&gt;Backend:debug_info(Format, Module, Data, Opts)&lt;/code&gt; 呼び出す必要があります。 &lt;code&gt;Format&lt;/code&gt; 等、原子 &lt;code&gt;erlang_v1&lt;/code&gt; アーラン抽象形式又はため &lt;code&gt;core_v1&lt;/code&gt; コアアーランため。 &lt;code&gt;Module&lt;/code&gt; はビームファイルで表されるモジュールで、 &lt;code&gt;Data&lt;/code&gt; はデバッグ情報チャンクに格納されている値です。 &lt;code&gt;Opts&lt;/code&gt; は、 &lt;code&gt;Backend&lt;/code&gt; サポートされている値のリストです。 &lt;code&gt;Backend:debug_info/4&lt;/code&gt; は &lt;code&gt;{ok, Code}&lt;/code&gt; または &lt;code&gt;{error, Term}&lt;/code&gt; 返す必要があります。</target>
        </trans-unit>
        <trans-unit id="f8e6ead11c3e1eac26901161b759833474cba3a4" translate="yes" xml:space="preserve">
          <source>The formatter information consist of a formatter module, &lt;code&gt;FModule&lt;/code&gt; and its configuration, &lt;code&gt;FConfig&lt;/code&gt;. &lt;code&gt;FModule&lt;/code&gt; must export the following function, which can be called by the handler:</source>
          <target state="translated">フォーマッタ情報はフォーマッタモジュールから成り、 &lt;code&gt;FModule&lt;/code&gt; 及びその構成、 &lt;code&gt;FConfig&lt;/code&gt; 。 &lt;code&gt;FModule&lt;/code&gt; は、ハンドラーから呼び出すことができる次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="d115f8a8e36f58c079d74b58f98933595ecc3ef9" translate="yes" xml:space="preserve">
          <source>The formatter information for a handler is set as a part of its configuration when the handler is added. It can also be changed during runtime with &lt;code&gt;&lt;a href=&quot;logger#set_handler_config-3&quot;&gt;logger:set_handler_config(HandlerId,formatter,{FModule,FConfig})&lt;/a&gt;&lt;/code&gt;, which overwrites the current formatter information, or with &lt;code&gt;&lt;a href=&quot;logger#update_formatter_config-2&quot;&gt;logger:update_formatter_config/2,3&lt;/a&gt;&lt;/code&gt;, which only modifies the formatter configuration.</source>
          <target state="translated">ハンドラーのフォーマッター情報は、ハンドラーの追加時にその構成の一部として設定されます。また、現在のフォーマッター情報を上書きする &lt;code&gt;&lt;a href=&quot;logger#set_handler_config-3&quot;&gt;logger:set_handler_config(HandlerId,formatter,{FModule,FConfig})&lt;/a&gt;&lt;/code&gt; 、またはフォーマッター構成のみを変更する &lt;code&gt;&lt;a href=&quot;logger#update_formatter_config-2&quot;&gt;logger:update_formatter_config/2,3&lt;/a&gt;&lt;/code&gt; を使用して、ランタイム中に変更することもできます。</target>
        </trans-unit>
        <trans-unit id="31df239ad5b8271efa81cda13e999773cde8976a" translate="yes" xml:space="preserve">
          <source>The formatter information is specified when adding the handler. The formatter configuration can be changed during runtime with &lt;code&gt;&lt;a href=&quot;logger#update_formatter_config-2&quot;&gt;logger:update_formatter_config/2,3&lt;/a&gt;&lt;/code&gt;, or the complete formatter information can be overwritten with, for instance, &lt;code&gt;&lt;a href=&quot;logger#set_handler_config-3&quot;&gt;logger:set_handler_config/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">フォーマッタ情報は、ハンドラを追加するときに指定されます。フォーマッター構成は、実行時に &lt;code&gt;&lt;a href=&quot;logger#update_formatter_config-2&quot;&gt;logger:update_formatter_config/2,3&lt;/a&gt;&lt;/code&gt; を使用して変更できます。または、完全なフォーマッター情報を、たとえば &lt;code&gt;&lt;a href=&quot;logger#set_handler_config-3&quot;&gt;logger:set_handler_config/3&lt;/a&gt;&lt;/code&gt; で上書きできます。</target>
        </trans-unit>
        <trans-unit id="b8f30a9a1bf44181155aa2e71449137d3512f394" translate="yes" xml:space="preserve">
          <source>The formatting succeeded.</source>
          <target state="translated">書式化に成功しました。</target>
        </trans-unit>
        <trans-unit id="10bd3287c5d5cb11c97ef91fb582e7bddc5c508a" translate="yes" xml:space="preserve">
          <source>The fourth argument &lt;code&gt;NULL&lt;/code&gt; is ignored. It was earlier used for the deprecated &lt;code&gt;reload&lt;/code&gt; callback which is no longer supported since OTP 20.</source>
          <target state="translated">4番目の引数 &lt;code&gt;NULL&lt;/code&gt; は無視されます。以前は、OTP 20以降サポートされなくなった非推奨の &lt;code&gt;reload&lt;/code&gt; コールバックに使用されていました。</target>
        </trans-unit>
        <trans-unit id="fd6d48968ca41cf916b0c1706ee59abd18b5be81" translate="yes" xml:space="preserve">
          <source>The fourth argument is a pointer to an &lt;code&gt;in_addr&lt;/code&gt; struct with the IP address of the host.</source>
          <target state="translated">4番目の引数は、ホストのIPアドレスを含む &lt;code&gt;in_addr&lt;/code&gt; 構造体へのポインターです。</target>
        </trans-unit>
        <trans-unit id="e236ba0b32b561d73bf0d206f0aebabfe0c3ba82" translate="yes" xml:space="preserve">
          <source>The fourth argument, &lt;code&gt;[]&lt;/code&gt;, is a list of options. For the available options, see &lt;code&gt;gen_statem:start_link/3&lt;/code&gt;.</source>
          <target state="translated">4番目の引数 &lt;code&gt;[]&lt;/code&gt; はオプションのリストです。使用可能なオプションについては、 &lt;code&gt;gen_statem:start_link/3&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0ce7182b37b9940508d39bc849560d216ed57126" translate="yes" xml:space="preserve">
          <source>The fourth argument, &lt;code&gt;[]&lt;/code&gt;, is a list of options. See the &lt;code&gt;gen_server(3)&lt;/code&gt; manual page for available options.</source>
          <target state="translated">4番目の引数 &lt;code&gt;[]&lt;/code&gt; はオプションのリストです。使用可能なオプションについては、 &lt;code&gt;gen_server(3)&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9100d905b13d1377220d70070d7d60982d6749a4" translate="yes" xml:space="preserve">
          <source>The framework consists of:</source>
          <target state="translated">フレームワークで構成されています。</target>
        </trans-unit>
        <trans-unit id="1c8d31fc362ef9b832d0b697fa5e6ecb8f8d5cf1" translate="yes" xml:space="preserve">
          <source>The full log entry is composed according to the &lt;code&gt;&lt;a href=&quot;#template&quot;&gt;template&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">完全なログエントリは、 &lt;code&gt;&lt;a href=&quot;#template&quot;&gt;template&lt;/a&gt;&lt;/code&gt; に従って構成されます。</target>
        </trans-unit>
        <trans-unit id="700f5d03995315807276176315f6bb17647929bf" translate="yes" xml:space="preserve">
          <source>The full name for the Solaris standard configuration file for &lt;code&gt;syslogd&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;syslogd&lt;/code&gt; の Solaris標準構成ファイルの完全名</target>
        </trans-unit>
        <trans-unit id="0e81e9ea5253fb51f8c99babc5aff5902bbe7489" translate="yes" xml:space="preserve">
          <source>The full name of the binary executable file is derived from the position of application &lt;code&gt;os_mon&lt;/code&gt; in the file system by adding &lt;code&gt;/priv/bin/mod_syslog&lt;/code&gt;. The generic full name of the binary executable file is thus:</source>
          <target state="translated">バイナリ実行可能ファイルの完全な名前は、 &lt;code&gt;/priv/bin/mod_syslog&lt;/code&gt; を追加することにより、ファイルシステム内のアプリケーション &lt;code&gt;os_mon&lt;/code&gt; の位置から取得されます。したがって、バイナリ実行可能ファイルの総称は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="563d73d181f3e9108cba87d81726b482ec3d260c" translate="yes" xml:space="preserve">
          <source>The full name of the minor log file (that is, the name of the file including the absolute directory path) can be read during execution of the test case. It comes as value in tuple &lt;code&gt;{tc_logfile,LogFileName}&lt;/code&gt; in the &lt;code&gt;Config&lt;/code&gt; list (which means it can also be read by a pre- or post &lt;code&gt;Common Test Hook&lt;/code&gt; function). Also, at the start of a test case, this data is sent with an event to any installed event handler. For details, see section &lt;code&gt;&lt;a href=&quot;event_handler_chapter#event_handling&quot;&gt;Event Handling&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">マイナーログファイルの完全な名前（つまり、絶対ディレクトリパスを含むファイルの名前）は、テストケースの実行中に読み取ることができます。これは、 &lt;code&gt;Config&lt;/code&gt; リストのタプル &lt;code&gt;{tc_logfile,LogFileName}&lt;/code&gt; 値として提供されます（つまり、事前または事後の &lt;code&gt;Common Test Hook&lt;/code&gt; 関数で読み取ることもできます）。また、テストケースの開始時に、このデータはインストールされているすべてのイベントハンドラーにイベントと共に送信されます。詳細については、「 &lt;code&gt;&lt;a href=&quot;event_handler_chapter#event_handling&quot;&gt;Event Handling&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="add619cb56fecf8eaa2173268a66512e2ca14e79" translate="yes" xml:space="preserve">
          <source>The full path to the &lt;code&gt;erlsrv.exe&lt;/code&gt;, which can be used to manipulate the service. This comes in handy when defining a heart command for your service.</source>
          <target state="translated">サービスの操作に使用できる &lt;code&gt;erlsrv.exe&lt;/code&gt; への絶対パス。これは、サービスのハートコマンドを定義するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="504f71220986791fe2ea8dea00b27516f0e65c24" translate="yes" xml:space="preserve">
          <source>The fun &lt;code&gt;F&lt;/code&gt; can be evaluated with the following syntax:</source>
          <target state="translated">fun &lt;code&gt;F&lt;/code&gt; は次の構文で評価できます。</target>
        </trans-unit>
        <trans-unit id="ae8ca975ecc3e8edf173345a968b651e47f611e5" translate="yes" xml:space="preserve">
          <source>The fun can have many clauses. Assume that we want to do the following:</source>
          <target state="translated">楽しみは、多くの節を持つことができます。次のようなことをしたいと仮定します。</target>
        </trans-unit>
        <trans-unit id="a7bc8a3f1e4f51084c68a1c0c777f1a27337cb3c" translate="yes" xml:space="preserve">
          <source>The fun has the following type specification:</source>
          <target state="translated">funには以下のような型指定があります。</target>
        </trans-unit>
        <trans-unit id="5f32b8a5a9bbfbf624a0644c5247fde5edb3a429" translate="yes" xml:space="preserve">
          <source>The fun is very restricted, it can take only a single parameter (the object to match): a sole variable or a tuple. It must use the &lt;code&gt;is_&lt;/code&gt; guard tests. Language constructs that have no representation in a match specification (&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;receive&lt;/code&gt;, and so on) are not allowed.</source>
          <target state="translated">楽しみは非常に制限されており、単一のパラメーター（一致するオブジェクト）のみを取ることができます：単一の変数またはタプル。 &lt;code&gt;is_&lt;/code&gt; guardテストを使用する必要があります。一致指定（ &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;case&lt;/code&gt; 、 &lt;code&gt;receive&lt;/code&gt; など）で表現を持たない言語構造は許可されません。</target>
        </trans-unit>
        <trans-unit id="71d9e7bf1fc41cd7eae3c3b2faa71bd3df3e1269" translate="yes" xml:space="preserve">
          <source>The fun must be defined as:</source>
          <target state="translated">楽しさを定義しなければなりません。</target>
        </trans-unit>
        <trans-unit id="07c9bc55442a1b08276f48311f68a88a3fb5ef18" translate="yes" xml:space="preserve">
          <source>The fun must be literally constructed inside the parameter list to the pseudo functions. The fun cannot be bound to a variable first and then passed to &lt;code&gt;ets:fun2ms/1&lt;/code&gt; or &lt;code&gt;dbg:fun2ms/1&lt;/code&gt;. For example, &lt;code&gt;ets:fun2ms(fun(A) -&amp;gt; A end)&lt;/code&gt; works, but not &lt;code&gt;F = fun(A) -&amp;gt; A end, ets:fun2ms(F)&lt;/code&gt;. The latter results in a compile-time error if the header is included, otherwise a runtime error.</source>
          <target state="translated">funは、疑似関数へのパラメーターリスト内で文字どおりに構築する必要があります。funを最初に変数にバインドしてから &lt;code&gt;ets:fun2ms/1&lt;/code&gt; または &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; に渡すことはできません。たとえば、 &lt;code&gt;ets:fun2ms(fun(A) -&amp;gt; A end)&lt;/code&gt; 機能しますが、 &lt;code&gt;F = fun(A) -&amp;gt; A end, ets:fun2ms(F)&lt;/code&gt; 。後者の場合、ヘッダーが含まれているとコンパイル時エラーが発生し、含まれていないとランタイムエラーになります。</target>
        </trans-unit>
        <trans-unit id="c2fc65e668d470b6dcc72f27bda164d6dff73c81" translate="yes" xml:space="preserve">
          <source>The fun must handle the following arguments:</source>
          <target state="translated">funは以下の引数を処理しなければなりません。</target>
        </trans-unit>
        <trans-unit id="737c0846a588f1657ff7845917aac0579f2be1af" translate="yes" xml:space="preserve">
          <source>The fun returns the root certificate and certificate chain that has signed the CRL.</source>
          <target state="translated">funは、CRLに署名したルート証明書と証明書チェーンを返します。</target>
        </trans-unit>
        <trans-unit id="efd695af69ad480c89612803c86acd8baa7d18ec" translate="yes" xml:space="preserve">
          <source>The fun should return:</source>
          <target state="translated">楽しさは戻ってくるはずです。</target>
        </trans-unit>
        <trans-unit id="d737e56a33d9100f6b6abcd80be538364e25ad0c" translate="yes" xml:space="preserve">
          <source>The fun uses the information in the distribution point to access the latest possible version of the CRL. If this fun is not specified, Public Key uses the default implementation:</source>
          <target state="translated">この関数は、配布ポイントの情報を使用してCRLの最新の可能なバージョンにアクセスします。このファンが指定されていない場合、公開鍵はデフォルトの実装を使用します。</target>
        </trans-unit>
        <trans-unit id="7f1a8e313c80aee065197a6cfd60c195f83fb231" translate="yes" xml:space="preserve">
          <source>The funcion &lt;code&gt;&lt;a href=&quot;mnesia#dirty_update_counter-2&quot;&gt;dirty_update_counter/2&lt;/a&gt;&lt;/code&gt; is performed as an atomic operation although it is not protected by a transaction. Therfore no table update is lost if two processes simultaneously execute the function &lt;code&gt;dirty_update_counter/2&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#dirty_update_counter-2&quot;&gt;dirty_update_counter/2&lt;/a&gt;&lt;/code&gt; は、トランザクションによって保護されていませんが、アトミック操作として実行されます。 &lt;code&gt;dirty_update_counter/2&lt;/code&gt; 、2つのプロセスが関数dirty_update_counter / 2を同時に実行しても、テーブルの更新は失われません。</target>
        </trans-unit>
        <trans-unit id="e0013b0c35bbaebef0c54217eeb1d56ac822fe5f" translate="yes" xml:space="preserve">
          <source>The function 'undefined' that has called &lt;code&gt;fprof:apply_start_stop/4&lt;/code&gt; is an unknown function because that call was not recorded in the trace. It was only recorded that the execution returned from &lt;code&gt;fprof:apply_start_stop/4&lt;/code&gt; to some other function above in the call stack, or that the process exited from there.</source>
          <target state="translated">&lt;code&gt;fprof:apply_start_stop/4&lt;/code&gt; を呼び出した関数「undefined」は、その呼び出しがトレースに記録されなかったため、不明な関数です。実行が &lt;code&gt;fprof:apply_start_stop/4&lt;/code&gt; から呼び出しスタック内の上記の他の関数に返されたこと、またはプロセスがそこから終了したことが記録されただけです。</target>
        </trans-unit>
        <trans-unit id="ae773ba648b2dd3111bf9ff1bd1ae44f3998a92d" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;#codec-2&quot;&gt;codec/2&lt;/a&gt;&lt;/code&gt; is used to compile a diameter &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;dictionary file&lt;/a&gt;&lt;/code&gt; into Erlang source. The resulting source implements the interface diameter requires to encode and decode the dictionary's messages and AVPs.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;#codec-2&quot;&gt;codec/2&lt;/a&gt;&lt;/code&gt; は、直径 &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;dictionary file&lt;/a&gt;&lt;/code&gt; をErlangソースにコンパイルするために使用されます。結果のソースは、辞書のメッセージとAVPをエンコードおよびデコードするために必要なインターフェースの直径を実装します。</target>
        </trans-unit>
        <trans-unit id="b1eeb1350e2bae25f92e23b1d2b563721196dfbc" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;#create_table-2&quot;&gt;mnesia:create_table(bar, [{attributes, 3.14}])&lt;/a&gt;&lt;/code&gt; returns the tuple &lt;code&gt;{aborted,Reason}&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; is the tuple &lt;code&gt;{bad_type,bar,3.14000}&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;#create_table-2&quot;&gt;mnesia:create_table(bar, [{attributes, 3.14}])&lt;/a&gt;&lt;/code&gt; は、タプル &lt;code&gt;{aborted,Reason}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Reason&lt;/code&gt; はタプル &lt;code&gt;{bad_type,bar,3.14000}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ab82066f7afa34b039ac973980ff4ef53ba41e38" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;#error_description-1&quot;&gt;mnesia:error_description(Reason)&lt;/a&gt;&lt;/code&gt; returns the term &lt;code&gt;{&quot;Bad type on some provided arguments&quot;,bar,3.14000}&lt;/code&gt;, which is an error description suitable for display.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;#error_description-1&quot;&gt;mnesia:error_description(Reason)&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;{&quot;Bad type on some provided arguments&quot;,bar,3.14000}&lt;/code&gt; という用語を返します。これは、表示に適したエラーの説明です。</target>
        </trans-unit>
        <trans-unit id="416085a9cc04b82b99ed7eea9c9814ce71342d35" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;#get_memory_data-0&quot;&gt;get_memory_data()&lt;/a&gt;&lt;/code&gt; can be used to retrieve the result of the latest periodic memory check.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;#get_memory_data-0&quot;&gt;get_memory_data()&lt;/a&gt;&lt;/code&gt; を使用して、最新の定期的なメモリチェックの結果を取得できます。</target>
        </trans-unit>
        <trans-unit id="d90d9bd2e78e7f66c786fdc154ab3630fd58d990" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;#subtrees-1&quot;&gt;subtrees/1&lt;/a&gt;&lt;/code&gt; and the constructor functions &lt;code&gt;&lt;a href=&quot;#make_tree-2&quot;&gt;make_tree/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#update_tree-2&quot;&gt;update_tree/2&lt;/a&gt;&lt;/code&gt; can be a great help if one wants to traverse a syntax tree, visiting all its subtrees, but treat nodes of the tree in a uniform way in most or all cases. Using these functions makes this simple, and also assures that your code is not overly sensitive to extensions of the syntax tree data type, because any node types not explicitly handled by your code can be left to a default case.</source>
          <target state="translated">機能の &lt;code&gt;&lt;a href=&quot;#subtrees-1&quot;&gt;subtrees/1&lt;/a&gt;&lt;/code&gt; およびコンストラクタ関数は、 &lt;code&gt;&lt;a href=&quot;#make_tree-2&quot;&gt;make_tree/2&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#update_tree-2&quot;&gt;update_tree/2&lt;/a&gt;&lt;/code&gt; は、ほとんどまたはすべてのケースで均一な方法で、1は、そのすべてのサブツリーを訪問し、構文木をトラバースしたい場合は大きな助けとなることができますが、ツリーの御馳走のノード。これらの関数を使用すると、これが簡単になり、コードで明示的に処理されないノードタイプをデフォルトのケースのままにすることができるため、コードが構文ツリーデータタイプの拡張に過度に敏感にならないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="4b9d557c07ad7843b1aa33917e03437c2191df84" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#activate_checkpoint-1&quot;&gt;mnesia:activate_checkpoint(Args)&lt;/a&gt;&lt;/code&gt; returns one of the following values:</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#activate_checkpoint-1&quot;&gt;mnesia:activate_checkpoint(Args)&lt;/a&gt;&lt;/code&gt; は、次のいずれかの値を返します。</target>
        </trans-unit>
        <trans-unit id="7829e947c9fda3671f982c368ab35a66949366af" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#all_keys-1&quot;&gt;mnesia:all_keys(Tab)&lt;/a&gt;&lt;/code&gt; returns all keys in a table.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#all_keys-1&quot;&gt;mnesia:all_keys(Tab)&lt;/a&gt;&lt;/code&gt; は、テーブル内のすべてのキーを返します。</target>
        </trans-unit>
        <trans-unit id="29d2bb31f2eb0b09a4594530fbd096f08be20052" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#backup-1&quot;&gt;mnesia:backup(Opaque [,Mod])&lt;/a&gt;&lt;/code&gt; activates a new checkpoint that covers all &lt;code&gt;Mnesia&lt;/code&gt; tables with maximum degree of redundancy and performs a backup. Maximum redundancy means that each table replica has a checkpoint retainer. Tables with property &lt;code&gt;local_contents&lt;/code&gt; are backed up as they look on the current node.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#backup-1&quot;&gt;mnesia:backup(Opaque [,Mod])&lt;/a&gt;&lt;/code&gt; は、すべての &lt;code&gt;Mnesia&lt;/code&gt; テーブルを最大の冗長度でカバーする新しいチェックポイントをアクティブ化し、バックアップを実行します。最大の冗長性とは、各テーブルレプリカにチェックポイント保持機能があることを意味します。プロパティが &lt;code&gt;local_contents&lt;/code&gt; のテーブルは、現在のノードを参照するときにバックアップされます。</target>
        </trans-unit>
        <trans-unit id="36376c0ad23644747aaadff922c6c829e1451912" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table(Name, ArgList)&lt;/a&gt;&lt;/code&gt; creates tables. When executing this function, it returns one of the following responses:</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table(Name, ArgList)&lt;/a&gt;&lt;/code&gt; はテーブルを作成します。この関数を実行すると、次のいずれかの応答が返されます。</target>
        </trans-unit>
        <trans-unit id="a1a6864b3dbbae165f2d507c1a853d0af094ec0c" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt; creates a brand new fragmented table, by setting table property &lt;code&gt;frag_properties&lt;/code&gt; to some proper values.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt; は、テーブルプロパティ &lt;code&gt;frag_properties&lt;/code&gt; をいくつかの適切な値に設定することにより、まったく新しいフラグメントテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="fd24999a16cc29e37c736949b94f5785cba2b786" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#delete_table-1&quot;&gt;mnesia:delete_table/1&lt;/a&gt;&lt;/code&gt; deletes a fragmented table including all its fragments. There must however not exist any other fragmented tables that refer to this table in their foreign key.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#delete_table-1&quot;&gt;mnesia:delete_table/1&lt;/a&gt;&lt;/code&gt; は、すべてのフラグメントを含むフラグメント化されたテーブルを削除します。ただし、外部キーでこのテーブルを参照する他の断片化されたテーブルがあってはなりません。</target>
        </trans-unit>
        <trans-unit id="30691173c7709ef9a4f3af204d9b1fcd4e7de68a" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables/1&lt;/a&gt;&lt;/code&gt; can be used to dump RAM table replicas to disc.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables/1&lt;/a&gt;&lt;/code&gt; を使用して、RAMテーブルのレプリカをディスクにダンプできます。</target>
        </trans-unit>
        <trans-unit id="9bca628c2f6585264d68c5ff447dbb6e315d490b" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#force_load_table-1&quot;&gt;mnesia:force_load_table(Tab)&lt;/a&gt;&lt;/code&gt; can be used to force load the table regardless of which table load mechanism that is activated.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#force_load_table-1&quot;&gt;mnesia:force_load_table(Tab)&lt;/a&gt;&lt;/code&gt; を使用すると、アクティブ化されているテーブルロードメカニズムに関係なく、テーブルを強制的にロードできます。</target>
        </trans-unit>
        <trans-unit id="4da340c660c7601de0e1ab6532b1b4defd72ac7f" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#info-0&quot;&gt;mnesia:info/0&lt;/a&gt;&lt;/code&gt; can now be used to print some system information even before &lt;code&gt;Mnesia&lt;/code&gt; is started. When &lt;code&gt;Mnesia&lt;/code&gt; is started, the function prints more information.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#info-0&quot;&gt;mnesia:info/0&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;Mnesia&lt;/code&gt; が起動する前でもシステム情報を印刷できるようになりました。とき &lt;code&gt;Mnesia&lt;/code&gt; が開始されると、関数はより多くの情報を出力します。</target>
        </trans-unit>
        <trans-unit id="60a3e9499c0d1ca23244a4d32bf0a317d6112fb3" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#install_fallback-2&quot;&gt;mnesia:install_fallback(Opaque, [Mod])&lt;/a&gt;&lt;/code&gt; installs a backup as fallback. It uses the backup module &lt;code&gt;Mod&lt;/code&gt;, or the default backup module, to access the backup media. The function returns &lt;code&gt;ok&lt;/code&gt; if successful, or &lt;code&gt;{error, Reason}&lt;/code&gt; if there is an error.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#install_fallback-2&quot;&gt;mnesia:install_fallback(Opaque, [Mod])&lt;/a&gt;&lt;/code&gt; は、バックアップをフォールバックとしてインストールします。これは、バックアップモジュール &lt;code&gt;Mod&lt;/code&gt; またはデフォルトのバックアップモジュールを使用して、バックアップメディアにアクセスします。関数は、成功した場合は &lt;code&gt;ok&lt;/code&gt; を返し、エラーがある場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="4f2ed7053b64d799ffc3ded34968b7ea59f0d544" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#lock-2&quot;&gt;mnesia:lock/2&lt;/a&gt;&lt;/code&gt; is intended to support table locks (as mentioned previously) but also for situations when locks need to be acquired regardless of how tables have been replicated:</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#lock-2&quot;&gt;mnesia:lock/2&lt;/a&gt;&lt;/code&gt; は、（前述のように）テーブルロックをサポートすることを目的としていますが、テーブルがどのように複製されたかに関係なくロックを取得する必要がある状況にも対応します。</target>
        </trans-unit>
        <trans-unit id="a04c9c87e126ea98a8324770baffee72b7c15012" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#match_object-3&quot;&gt;mnesia:match_object/3&lt;/a&gt;&lt;/code&gt; lacks some important features that &lt;code&gt;&lt;a href=&quot;mnesia#select-2&quot;&gt;mnesia:select/3&lt;/a&gt;&lt;/code&gt; have. For example, &lt;code&gt;mnesia:match_object/3&lt;/code&gt; can only return the matching records, and it cannot express constraints other than equality. To find the names of the male employees on the second floor:</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#match_object-3&quot;&gt;mnesia:match_object/3&lt;/a&gt;&lt;/code&gt; には、 &lt;code&gt;&lt;a href=&quot;mnesia#select-2&quot;&gt;mnesia:select/3&lt;/a&gt;&lt;/code&gt; にあるいくつかの重要な機能がありません。たとえば、 &lt;code&gt;mnesia:match_object/3&lt;/code&gt; は一致するレコードのみを返すことができ、等式以外の制約を表すことはできません。 2階の男性従業員の名前を検索するには：</target>
        </trans-unit>
        <trans-unit id="0917cc1d0fa48c8f542630d30c1cd7b2345a64a5" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-1&quot;&gt;mnesia:set_master_nodes(Nodes)&lt;/a&gt;&lt;/code&gt; sets master nodes for all tables. For each table it determines its replica nodes and starts &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-2&quot;&gt;mnesia:set_master_nodes(Tab, TabNodes)&lt;/a&gt;&lt;/code&gt; with those replica nodes that are included in the &lt;code&gt;Nodes&lt;/code&gt; list (that is, &lt;code&gt;TabNodes&lt;/code&gt; is the intersection of &lt;code&gt;Nodes&lt;/code&gt; and the replica nodes of the table). If the intersection is empty, the master node recovery mechanism for the particular table is reset and the normal load mechanism is used at the next restart.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-1&quot;&gt;mnesia:set_master_nodes(Nodes)&lt;/a&gt;&lt;/code&gt; は、すべてのテーブルのマスターノードを設定します。テーブルごとにレプリカノードを決定し、 &lt;code&gt;Nodes&lt;/code&gt; リストに含まれているレプリカノードで &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-2&quot;&gt;mnesia:set_master_nodes(Tab, TabNodes)&lt;/a&gt;&lt;/code&gt; を開始します（つまり、 &lt;code&gt;TabNodes&lt;/code&gt; は &lt;code&gt;Nodes&lt;/code&gt; とテーブルのレプリカノードの共通部分です）。交差が空の場合、特定のテーブルのマスターノード回復メカニズムがリセットされ、次の再起動時に通常のロードメカニズムが使用されます。</target>
        </trans-unit>
        <trans-unit id="3124976c6cc4afa58829120e681ccee3319f8f32" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt; is called on both nodes.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt; が両方のノードで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="362b910adc258b676d8a22204af77b93afeab4c8" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#stop-0&quot;&gt;mnesia:stop()&lt;/a&gt;&lt;/code&gt; stops &lt;code&gt;Mnesia&lt;/code&gt; on the node where the function is executed. The functions &lt;code&gt;mnesia:start/0&lt;/code&gt; and &lt;code&gt;mnesia:stop/0&lt;/code&gt; work on the &quot;local&quot; &lt;code&gt;Mnesia&lt;/code&gt; system. No functions start or stop a set of nodes.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#stop-0&quot;&gt;mnesia:stop()&lt;/a&gt;&lt;/code&gt; は、関数が実行されるノードで &lt;code&gt;Mnesia&lt;/code&gt; を停止します。関数 &lt;code&gt;mnesia:start/0&lt;/code&gt; および &lt;code&gt;mnesia:stop/0&lt;/code&gt; は、「ローカル」 &lt;code&gt;Mnesia&lt;/code&gt; システムで機能します。ノードのセットを開始または停止する関数はありません。</target>
        </trans-unit>
        <trans-unit id="5acaf5a283731e99e901e6928e2526a7dcf95f24" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info/2&lt;/a&gt;&lt;/code&gt; now understands item &lt;code&gt;frag_properties&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info/2&lt;/a&gt;&lt;/code&gt; は、アイテム &lt;code&gt;frag_properties&lt;/code&gt; を理解するようになりました。</target>
        </trans-unit>
        <trans-unit id="a1334bf42da6253566700391caa3cba76ccf9209" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;Callback:read_config/1&lt;/code&gt; is to be exported from the callback module to read configuration data, initially before the tests start, or as a result of data being reloaded during test execution. The input argument is the same as for function &lt;code&gt;check_parameter/1&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;Callback:read_config/1&lt;/code&gt; は、最初にテストが開始する前に、またはテスト実行中にデータが再ロードされた結果として、構成データを読み取るためにコールバックモジュールからエクスポートされます。入力引数は、関数 &lt;code&gt;check_parameter/1&lt;/code&gt; の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="7fbf758a3229cc65bafd27a8b6bc7ae6dded54d7" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;ModuleName:FunctionName()&lt;/code&gt; is called to produce a test set.</source>
          <target state="translated">関数 &lt;code&gt;ModuleName:FunctionName()&lt;/code&gt; が呼び出され、テストセットが作成されます。</target>
        </trans-unit>
        <trans-unit id="41ef4085ec8a8d22de70a87050ca088731db21f2" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;check_process_code/3&lt;/code&gt; returns the value &lt;code&gt;async&lt;/code&gt; immediately after the request has been sent. When the request has been processed, the process that called this function is passed a message on the form &lt;code&gt;{check_process_code, RequestId, CheckResult}&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;check_process_code/3&lt;/code&gt; は、リクエストが送信された直後に値 &lt;code&gt;async&lt;/code&gt; を返します。リクエストが処理されると、この関数を呼び出したプロセスには、 &lt;code&gt;{check_process_code, RequestId, CheckResult}&lt;/code&gt; という形式のメッセージが渡されます。</target>
        </trans-unit>
        <trans-unit id="2f6002fc8f958da3877d27d37d914957a73927e2" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;company:init/0&lt;/code&gt; creates the tables. Two tables are of type &lt;code&gt;bag&lt;/code&gt;. This is the &lt;code&gt;manager&lt;/code&gt; relation as well the &lt;code&gt;in_proj&lt;/code&gt; relation. This is interpreted as: an employee can be manager over several departments, and an employee can participate in several projects. However, the &lt;code&gt;at_dep&lt;/code&gt; relation is &lt;code&gt;set&lt;/code&gt;, as an employee can only work in one department. In this data model, there are examples of relations that are 1-to-1 (&lt;code&gt;set&lt;/code&gt;) and 1-to-many (&lt;code&gt;bag&lt;/code&gt;).</source>
          <target state="translated">関数 &lt;code&gt;company:init/0&lt;/code&gt; はテーブルを作成します。2つのテーブルは &lt;code&gt;bag&lt;/code&gt; タイプです。これは、 &lt;code&gt;manager&lt;/code&gt; 関係と &lt;code&gt;in_proj&lt;/code&gt; 関係です。これは次のように解釈されます。従業員は複数の部門のマネージャーになることができ、従業員は複数のプロジェクトに参加できます。ただし、従業員は1つの部門でしか作業できないため、 &lt;code&gt;at_dep&lt;/code&gt; リレーションが &lt;code&gt;set&lt;/code&gt; れています。このデータモデルには、1対1（ &lt;code&gt;set&lt;/code&gt; ）および1対多（ &lt;code&gt;bag&lt;/code&gt; ）の関係の例があります。</target>
        </trans-unit>
        <trans-unit id="e1b3a72aa7ba46bfc3b05ebd94c234d7bb780fb0" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;erl_decode()&lt;/code&gt; from &lt;code&gt;erl_marshal&lt;/code&gt; converts the binary into an &lt;code&gt;ETERM&lt;/code&gt; struct:</source>
          <target state="translated">関数 &lt;code&gt;erl_decode()&lt;/code&gt; から &lt;code&gt;erl_marshal&lt;/code&gt; はにバイナリに変換 &lt;code&gt;ETERM&lt;/code&gt; の構造体。</target>
        </trans-unit>
        <trans-unit id="c72f7b6a5b6f347ed0767231df7d01b1b2dde191" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(delete [, ExtraArgs])&lt;/code&gt; is called for each object in an MIB when the MIB is unloaded from the agent. This makes it possible to perform any necessary clean-up.</source>
          <target state="translated">関数 &lt;code&gt;f(delete [, ExtraArgs])&lt;/code&gt; は、MIBがエージェントからアンロードされるときに、MIB内のオブジェクトごとに呼び出されます。これにより、必要なクリーンアップを実行できます。</target>
        </trans-unit>
        <trans-unit id="af08e789dab44b8458cb66f5d674a989015f5322" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(delete [, ExtraArgs])&lt;/code&gt; is called for each object in an MIB when the MIB is unloaded from the agent. This makes it possible to perform necessary clean-up.</source>
          <target state="translated">関数 &lt;code&gt;f(delete [, ExtraArgs])&lt;/code&gt; は、MIBがエージェントからアンロードされるときに、MIB内のオブジェクトごとに呼び出されます。これにより、必要なクリーンアップを実行できます。</target>
        </trans-unit>
        <trans-unit id="6c5b6c8f67651723c9f3e56c22f4f4ab0b1c577a" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(get [, ExtraArgs])&lt;/code&gt; is called when a get-request or a get-next request refers to the variable.</source>
          <target state="translated">関数 &lt;code&gt;f(get [, ExtraArgs])&lt;/code&gt; は、get-requestまたはget-nextリクエストが変数を参照するときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7f44a9f942983582de9a504377c1237da5bfe42a" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(get, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; is called when a get-request refers to a table.</source>
          <target state="translated">関数 &lt;code&gt;f(get, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; は、get-requestがテーブルを参照するときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f9472e8e9d7e877a982c1ad293026a6058a914d6" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(get_next, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; is called when a get-next- or a get-bulk-request refers to the table.</source>
          <target state="translated">関数 &lt;code&gt;f(get_next, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; は、get-next-またはget-bulk-requestがテーブルを参照するときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dc9c0fe89d1c4041733fa53cdcec2b986419a3b1" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(is_set_ok, NewValue [, ExtraArgs])&lt;/code&gt; is called in phase one of the set-request processing so that the new value can be checked for inconsistencies.</source>
          <target state="translated">関数 &lt;code&gt;f(is_set_ok, NewValue [, ExtraArgs])&lt;/code&gt; は、set-request処理のフェーズ1で呼び出されるため、新しい値の不整合をチェックできます。</target>
        </trans-unit>
        <trans-unit id="4d16c30ff848f270285384e5cc25e325a037b629" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(is_set_ok, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; is called in phase one of the set-request processing so that new values can be checked for inconsistencies.</source>
          <target state="translated">関数 &lt;code&gt;f(is_set_ok, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; は、セット要求処理のフェーズ1で呼び出されるため、新しい値の不整合をチェックできます。</target>
        </trans-unit>
        <trans-unit id="ff5330b2475c665d4944e0a229f93d0602e0e5fa" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(new [, ExtraArgs])&lt;/code&gt; is called for each object in an MIB when the MIB is loaded into the agent. This makes it possible to perform the necessary initialization.</source>
          <target state="translated">関数 &lt;code&gt;f(new [, ExtraArgs])&lt;/code&gt; は、MIBがエージェントにロードされるときに、MIB内のオブジェクトごとに呼び出されます。これにより、必要な初期化を実行できます。</target>
        </trans-unit>
        <trans-unit id="0d1ebb83f7fcf0843f0835365552c7f4c0cad7ca" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(new [, ExtraArgs])&lt;/code&gt; is called for each variable in the MIB when the MIB is loaded into the agent. This makes it possible to perform necessary initialization.</source>
          <target state="translated">MIBがエージェントにロードされると &lt;code&gt;f(new [, ExtraArgs])&lt;/code&gt; 関数f（new [、ExtraArgs]）がMIB内の変数ごとに呼び出されます。これにより、必要な初期化を行うことができます。</target>
        </trans-unit>
        <trans-unit id="133213fffa730c11eb89996e85007a915e9f1756" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;f(set, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; is called to perform the set in phase two of the set-request processing. It is only called if the corresponding &lt;code&gt;is_set_ok&lt;/code&gt; function did not exist, or returned &lt;code&gt;{noError, 0}&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;f(set, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; が呼び出され、セット要求処理のフェーズ2でセットが実行されます。対応する &lt;code&gt;is_set_ok&lt;/code&gt; 関数が存在しない場合、または &lt;code&gt;{noError, 0}&lt;/code&gt; 返された場合にのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="beb994d1c8d031347e7906599f79761b788164a8" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;find_max_and_min&lt;/code&gt; works out the maximum and minimum temperature. A new construct, &lt;code&gt;if&lt;/code&gt;, is introduced here. If works as follows:</source>
          <target state="translated">関数 &lt;code&gt;find_max_and_min&lt;/code&gt; は、最高温度と最低温度を計算します。 &lt;code&gt;if&lt;/code&gt; の場合、新しい構成要素がここに導入されます。次のように機能する場合：</target>
        </trans-unit>
        <trans-unit id="e3c365109eb0604df295111a6b478883a0063173" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;foreach&lt;/code&gt; expresses this similarity:</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; 関数は、この類似性を表現します。</target>
        </trans-unit>
        <trans-unit id="32b248029fdb79694c3f91257a1b49d6e08c1720" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;format/2&lt;/code&gt; (that is, &lt;code&gt;format&lt;/code&gt; with two arguments) takes two lists. The first one is nearly always a list written between &quot; &quot;. This list is printed out as it is, except that each ~w is replaced by a term taken in order from the second list. Each ~n is replaced by a new line. The &lt;code&gt;io:format/2&lt;/code&gt; function itself returns the atom &lt;code&gt;ok&lt;/code&gt; if everything goes as planned. Like other functions in Erlang, it crashes if an error occurs. This is not a fault in Erlang, it is a deliberate policy. Erlang has sophisticated mechanisms to handle errors which are shown later. As an exercise, try to make &lt;code&gt;io:format&lt;/code&gt; crash, it should not be difficult. But notice that although &lt;code&gt;io:format&lt;/code&gt; crashes, the Erlang shell itself does not crash.</source>
          <target state="translated">関数 &lt;code&gt;format/2&lt;/code&gt; （つまり、2つの引数を持つ &lt;code&gt;format&lt;/code&gt; ）は2つのリストを取ります。最初のものはほとんど常に &quot;&quot;の間に書かれたリストです。このリストはそのまま出力されますが、それぞれの〜wは2番目のリストから順に取得された用語に置き換えられます。各〜nは新しい行に置き換えられます。 &lt;code&gt;io:format/2&lt;/code&gt; 関数自体はアトムを返し &lt;code&gt;ok&lt;/code&gt; 計画通りにすべてが進みます。 Erlangの他の関数と同様に、エラーが発生するとクラッシュします。これはErlangの障害ではなく、意図的なポリシーです。 Erlangには、後で示すエラーを処理するための高度なメカニズムがあります。演習として、 &lt;code&gt;io:format&lt;/code&gt; をクラッシュさせてみてください。難しいことではありません。しかし、 &lt;code&gt;io:format&lt;/code&gt; クラッシュしても、Erlangシェル自体はクラッシュしません。</target>
        </trans-unit>
        <trans-unit id="3aac06ca8d394b3646df1b427f505d8cf51b76fc" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;g/1&lt;/code&gt; is deprecated and will be removed in next version.</source>
          <target state="translated">関数 &lt;code&gt;g/1&lt;/code&gt; は非推奨であり、次のバージョンで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="88abc7d88e609edf90b5266ee54f52aa2a6dcc51" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;g/2&lt;/code&gt; is deprecated and will be removed in next major release.</source>
          <target state="translated">関数 &lt;code&gt;g/2&lt;/code&gt; は非推奨であり、次のメジャーリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="81d897d03e553a2581073072bbd55d8966c2a444" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;g/3&lt;/code&gt; is deprecated and will eventually be removed.</source>
          <target state="translated">関数 &lt;code&gt;g/3&lt;/code&gt; は非推奨であり、最終的には削除される予定です。</target>
        </trans-unit>
        <trans-unit id="dd9a50875733e809d1405bf85bfdecd386ca67c2" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;garbage_collect/2&lt;/code&gt; returns the value &lt;code&gt;async&lt;/code&gt; immediately after the request has been sent. When the request has been processed, the process that called this function is passed a message on the form &lt;code&gt;{garbage_collect, RequestId, GCResult}&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;garbage_collect/2&lt;/code&gt; は、リクエストが送信された直後に値 &lt;code&gt;async&lt;/code&gt; を返します。リクエストが処理されると、この関数を呼び出したプロセスには、 &lt;code&gt;{garbage_collect, RequestId, GCResult}&lt;/code&gt; という形式のメッセージが渡されます。</target>
        </trans-unit>
        <trans-unit id="fd04d9687a79d761d32b2c43de1576259fb5f864" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;insert_emp/3&lt;/code&gt; creates a Functional Object (Fun). &lt;code&gt;Fun&lt;/code&gt; is passed as a single argument to the function &lt;code&gt;&lt;a href=&quot;mnesia#transaction-2&quot;&gt;mnesia:transaction(Fun)&lt;/a&gt;&lt;/code&gt;. This means that &lt;code&gt;Fun&lt;/code&gt; is run as a transaction with the following properties:</source>
          <target state="translated">関数 &lt;code&gt;insert_emp/3&lt;/code&gt; は、機能オブジェクト（Fun）を作成します。 &lt;code&gt;Fun&lt;/code&gt; は、単一の引数として関数 &lt;code&gt;&lt;a href=&quot;mnesia#transaction-2&quot;&gt;mnesia:transaction(Fun)&lt;/a&gt;&lt;/code&gt; に渡されます。つまり、 &lt;code&gt;Fun&lt;/code&gt; は次のプロパティを持つトランザクションとして実行されます。</target>
        </trans-unit>
        <trans-unit id="ea55fdab4365faa7f773834a49baba846da23b95" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;mnesia:change_table_frag(Tab, Change)&lt;/code&gt; is intended to be used for reconfiguration of fragmented tables. Argument &lt;code&gt;Change&lt;/code&gt; is to have one of the following values:</source>
          <target state="translated">関数 &lt;code&gt;mnesia:change_table_frag(Tab, Change)&lt;/code&gt; は、断片化されたテーブルの再構成に使用することを目的としています。引数の &lt;code&gt;Change&lt;/code&gt; は、次のいずれかの値を指定します。</target>
        </trans-unit>
        <trans-unit id="b1c90e4ee481c7da73002efc510d14130a3a01a5" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;mnesia:dirty_*&lt;/code&gt; always executes with &lt;code&gt;async_dirty&lt;/code&gt; semantics regardless of which activity access contexts that are started. It can even start contexts without any enclosing activity access context.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:dirty_*&lt;/code&gt; は、開始されるアクティビティアクセスコンテキストに関係なく、常に &lt;code&gt;async_dirty&lt;/code&gt; セマンティクスで実行されます。アクティビティアクセスコンテキストを含まずにコンテキストを開始することもできます。</target>
        </trans-unit>
        <trans-unit id="670d344917e31e9f9f7bd59eee0e7cb0d02a6cdf" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;mnesia:lock/2&lt;/code&gt; is intended to support explicit locking on tables, but is also intended for situations when locks need to be acquired regardless of how tables are replicated. Currently, two kinds of &lt;code&gt;LockKind&lt;/code&gt; are supported:</source>
          <target state="translated">関数 &lt;code&gt;mnesia:lock/2&lt;/code&gt; は、テーブルの明示的なロックをサポートすることを目的としていますが、テーブルの複製方法に関係なくロックを取得する必要がある状況も対象としています。現在、2種類の &lt;code&gt;LockKind&lt;/code&gt; がサポートされています。</target>
        </trans-unit>
        <trans-unit id="d77603a1f02efb7a0e1f99f991914c28109971d3" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;mnesia:match_object/3&lt;/code&gt; automatically uses indexes if these exist. However, no heuristics are performed to select the best index.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:match_object/3&lt;/code&gt; は、インデックスが存在する場合、自動的にインデックスを使用します。ただし、最適なインデックスを選択するためのヒューリスティックは実行されません。</target>
        </trans-unit>
        <trans-unit id="6edabfd9b5590580f8f9657171a96caa4b74ebe3" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;new/4&lt;/code&gt; creates a new map term and lets the keys &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, and &lt;code&gt;alpha&lt;/code&gt; be associated with an initial value. In this case, only float values between and including 0.0 and 1.0 are allowed, as ensured by the &lt;code&gt;?is_channel/1&lt;/code&gt; macro for each argument. Only the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator is allowed when creating a new map.</source>
          <target state="translated">関数 &lt;code&gt;new/4&lt;/code&gt; は新しいマップ項を作成し、キー &lt;code&gt;red&lt;/code&gt; 、 &lt;code&gt;green&lt;/code&gt; 、 &lt;code&gt;blue&lt;/code&gt; 、および &lt;code&gt;alpha&lt;/code&gt; を初期値に関連付けることができます。この場合、各引数の &lt;code&gt;?is_channel/1&lt;/code&gt; マクロで保証されているように、0.0と1.0の間のフロート値のみが許可されます。新しいマップを作成するときは、 &lt;code&gt;=&amp;gt;&lt;/code&gt; 演算子のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="34e4f0d7c8457880dafad073945fded626331720" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;pyth(N)&lt;/code&gt; generates a list of all integers &lt;code&gt;{A,B,C}&lt;/code&gt; such that &lt;code&gt;A**2 + B**2 = C**2&lt;/code&gt; and where the sum of the sides is equal to, or less than, &lt;code&gt;N&lt;/code&gt;:</source>
          <target state="translated">関数 &lt;code&gt;pyth(N)&lt;/code&gt; は、 &lt;code&gt;A**2 + B**2 = C**2&lt;/code&gt; であり、辺の合計が以下であるようなすべての整数 &lt;code&gt;{A,B,C}&lt;/code&gt; リストを生成します。 &lt;code&gt;N&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6137179b93256e30bc3aeec2790f9eeac4bbcd5d" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;raise/2&lt;/code&gt; contains a Fun made up of four code lines. This Fun is called by the statement &lt;code&gt;mnesia:transaction(F)&lt;/code&gt; and returns a value.</source>
          <target state="translated">関数 &lt;code&gt;raise/2&lt;/code&gt; には、4つのコード行で構成されるFunが含まれています。このFunはステートメント &lt;code&gt;mnesia:transaction(F)&lt;/code&gt; によって呼び出され、値を返します。</target>
        </trans-unit>
        <trans-unit id="99cf9b671e2d9b419e9dca0fedf06d36961f6433" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;raise_females/1&lt;/code&gt; returns the tuple &lt;code&gt;{atomic, Number}&lt;/code&gt;, where &lt;code&gt;Number&lt;/code&gt; is the number of female employees who received a salary increase. If an error occurs, the value &lt;code&gt;{aborted, Reason}&lt;/code&gt; is returned, and &lt;code&gt;Mnesia&lt;/code&gt; guarantees that the salary is not raised for any employee.</source>
          <target state="translated">関数 &lt;code&gt;raise_females/1&lt;/code&gt; は、タプル &lt;code&gt;{atomic, Number}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Number&lt;/code&gt; は、昇給を受けた女性従業員の数です。エラーが発生した場合、値 &lt;code&gt;{aborted, Reason}&lt;/code&gt; が返され、 &lt;code&gt;Mnesia&lt;/code&gt; はどの従業員の給与も引き上げられないことを保証します。</target>
        </trans-unit>
        <trans-unit id="a03f0af918ed9a2c831249c7c193fd4857632c71" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;select&lt;/code&gt; can be used to add more constraints and create output that cannot be done with &lt;code&gt;mnesia:match_object/3&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;select&lt;/code&gt; を使用して制約を追加し、 &lt;code&gt;mnesia:match_object/3&lt;/code&gt; では実行できない出力を作成できます。</target>
        </trans-unit>
        <trans-unit id="9a509a3ad87b3c1678e41395b1c17d5a940026b1" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;send_message/3&lt;/code&gt; will only be called if the &lt;code&gt;&lt;a href=&quot;megaco#ui_resend_indication&quot;&gt;resend_indication&lt;/a&gt;&lt;/code&gt; config option has been set to the value &lt;code&gt;flag&lt;/code&gt;. The third argument, &lt;code&gt;Resend&lt;/code&gt; then indicates if the message send is a resend or not.</source>
          <target state="translated">関数 &lt;code&gt;send_message/3&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;megaco#ui_resend_indication&quot;&gt;resend_indication&lt;/a&gt;&lt;/code&gt; 構成オプションが値 &lt;code&gt;flag&lt;/code&gt; 設定されている場合にのみ呼び出されます。3番目の引数 &lt;code&gt;Resend&lt;/code&gt; は、メッセージ送信が再送信であるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="7470406d16d9455cca5984d08f7d4c3396313445" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;send_trap&lt;/code&gt; is kept for backwards compatibility and should not be used in new code. Applications that use this function will continue to work. The &lt;code&gt;snmpNotifyName&lt;/code&gt; is used as the community string by the agent when a notification is sent.</source>
          <target state="translated">関数 &lt;code&gt;send_trap&lt;/code&gt; は下位互換性のために残されており、新しいコードでは使用しないでください。この機能を使用するアプリケーションは引き続き機能します。 &lt;code&gt;snmpNotifyName&lt;/code&gt; は、通知が送信され、エージェントによってコミュニティストリングとして使用されています。</target>
        </trans-unit>
        <trans-unit id="103c9badd4ad12f4e6468c8e8de6801ce063239b" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;start&lt;/code&gt; first creates a process, let us call it &quot;pong&quot;:</source>
          <target state="translated">関数 &lt;code&gt;start&lt;/code&gt; は最初にプロセスを作成します。これを「ポン」と呼びましょう。</target>
        </trans-unit>
        <trans-unit id="eb32c2f2d1549c3a5030e2171eab2d919298928c" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;subsystem/4&lt;/code&gt; and subsequent calls of &lt;code&gt;send/3,4,5&lt;/code&gt; must be executed in the same process.</source>
          <target state="translated">関数 &lt;code&gt;subsystem/4&lt;/code&gt; 以降の &lt;code&gt;send/3,4,5&lt;/code&gt; の呼び出しは、同じプロセスで実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="338ff9986a9cbcb124e3833af89e3fbd5600e24b" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;target_system:create/1&lt;/code&gt; performs the following:</source>
          <target state="translated">関数 &lt;code&gt;target_system:create/1&lt;/code&gt; は以下を実行します。</target>
        </trans-unit>
        <trans-unit id="0cd28e869f41fdc007104b6030c49cc7a75a7292" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;target_system:install/2&lt;/code&gt; performs the following:</source>
          <target state="translated">関数 &lt;code&gt;target_system:install/2&lt;/code&gt; は以下を実行します。</target>
        </trans-unit>
        <trans-unit id="4199649f879206d3b2fa3c3bd5824df5cda6d3e9" translate="yes" xml:space="preserve">
          <source>The function accepts the following parameters:</source>
          <target state="translated">この関数は以下のパラメータを受け付けます。</target>
        </trans-unit>
        <trans-unit id="094a87c2e8a4a6a2a6be76b4ad60bd189810ef39" translate="yes" xml:space="preserve">
          <source>The function arguments are as follows:</source>
          <target state="translated">関数の引数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f8347209966cf7f71c1646053d74ccb363214ea1" translate="yes" xml:space="preserve">
          <source>The function arguments passed to a NIF appears in an array &lt;code&gt;argv&lt;/code&gt;, with &lt;code&gt;argc&lt;/code&gt; as the length of the array, and thus the arity of the function. The Nth argument of the function can be accessed as &lt;code&gt;argv[N-1]&lt;/code&gt;. NIFs also take an environment argument that serves as an opaque handle that is needed to be passed on to most API functions. The environment contains information about the calling Erlang process:</source>
          <target state="translated">NIFに渡された関数の引数は、 &lt;code&gt;argc&lt;/code&gt; を配列の長さとする &lt;code&gt;argv&lt;/code&gt; 配列に含まれるため、関数のアリティが表示されます。関数のN番目の引数は、 &lt;code&gt;argv[N-1]&lt;/code&gt; としてアクセスできます。NIFは、ほとんどのAPI関数に渡す必要がある不透明なハンドルとして機能する環境引数も受け取ります。環境には、呼び出し側のErlangプロセスに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="fa68aed990974c1565915491205a9e47d95de75c" translate="yes" xml:space="preserve">
          <source>The function call &lt;code&gt;mnesia:del_table_copy(schema, mynode@host)&lt;/code&gt; deletes node &lt;code&gt;mynode@host&lt;/code&gt; from the &lt;code&gt;Mnesia&lt;/code&gt; system. The call fails if &lt;code&gt;Mnesia&lt;/code&gt; is running on &lt;code&gt;mynode@host&lt;/code&gt;. The other &lt;code&gt;Mnesia&lt;/code&gt; nodes never try to connect to that node again. Notice that if there is a disc resident schema on node &lt;code&gt;mynode@host&lt;/code&gt;, the entire &lt;code&gt;Mnesia&lt;/code&gt; directory is to be deleted. This is done with the function &lt;code&gt;&lt;a href=&quot;mnesia#delete_schema-1&quot;&gt;mnesia:delete_schema/1&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;Mnesia&lt;/code&gt; is started again on node &lt;code&gt;mynode@host&lt;/code&gt; and the directory has not been cleared, the behavior of &lt;code&gt;Mnesia&lt;/code&gt; is undefined.</source>
          <target state="translated">関数呼び出し &lt;code&gt;mnesia:del_table_copy(schema, mynode@host)&lt;/code&gt; ノード &lt;code&gt;mynode@host&lt;/code&gt; を &lt;code&gt;Mnesia&lt;/code&gt; システムから削除します。 &lt;code&gt;Mnesia&lt;/code&gt; が &lt;code&gt;mynode@host&lt;/code&gt; 実行されている場合、呼び出しは失敗します。他の &lt;code&gt;Mnesia&lt;/code&gt; ノードはそのノードへの接続を二度と試みません。ノード &lt;code&gt;mynode@host&lt;/code&gt; にディスク常駐スキーマがある場合、 &lt;code&gt;Mnesia&lt;/code&gt; ディレクトリ全体が削除されることに注意してください。これは関数 &lt;code&gt;&lt;a href=&quot;mnesia#delete_schema-1&quot;&gt;mnesia:delete_schema/1&lt;/a&gt;&lt;/code&gt; で行われます。場合 &lt;code&gt;Mnesia&lt;/code&gt; は、ノード上で再起動され &lt;code&gt;mynode@host&lt;/code&gt; とディレクトリがクリアされていない、のふるまい &lt;code&gt;Mnesia&lt;/code&gt; が定義されていません。</target>
        </trans-unit>
        <trans-unit id="dc50b6ebf32dde9a3ad360a39afe42dd265bea37" translate="yes" xml:space="preserve">
          <source>The function can also return &lt;code&gt;ignore&lt;/code&gt;.</source>
          <target state="translated">関数は &lt;code&gt;ignore&lt;/code&gt; を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="54500a01f09be1a2bd2f0c1abfeddba6e33a00fa" translate="yes" xml:space="preserve">
          <source>The function can be called by a log handler to convert a log event term to a printable string. The returned value can, for example, be printed as a log entry to the console or a file using &lt;code&gt;io:put_chars/1,2&lt;/code&gt;.</source>
          <target state="translated">この関数は、ログハンドラーによって呼び出され、ログイベント用語を印刷可能な文字列に変換できます。戻り値は、たとえば、コンソールへのログエントリまたは &lt;code&gt;io:put_chars/1,2&lt;/code&gt; を使用したファイルとして出力できます。</target>
        </trans-unit>
        <trans-unit id="c504308064f08c5f9ea9e812d1f6e5a760e998d0" translate="yes" xml:space="preserve">
          <source>The function can be called, for example, when these files are generated at the target. The function is to be called after &lt;code&gt;&lt;a href=&quot;#set_unpacked-2&quot;&gt;set_unpacked/2&lt;/a&gt;&lt;/code&gt; has been called.</source>
          <target state="translated">たとえば、これらのファイルがターゲットで生成されるときに、関数を呼び出すことができます。この関数は、 &lt;code&gt;&lt;a href=&quot;#set_unpacked-2&quot;&gt;set_unpacked/2&lt;/a&gt;&lt;/code&gt; が呼び出された後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dfcfdf84d3a74a872f6ce266bc40953da7783b4c" translate="yes" xml:space="preserve">
          <source>The function can be used as follows:</source>
          <target state="translated">この機能は以下のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="18f3fe03e8503c073eac107ed5ad24dbaeb411a0" translate="yes" xml:space="preserve">
          <source>The function can be used on a running system, or by copying the entire log directory and calling this function. SNMP must be running in order to provide MIB information.</source>
          <target state="translated">この関数は、実行中のシステムで使用するか、ログディレクトリ全体をコピーしてこの関数を呼び出すことで使用することができます。MIB情報を提供するためには、SNMPが実行されている必要があります。</target>
        </trans-unit>
        <trans-unit id="b8fb21fb19b96fc3f558cb35f3055df39d441e2b" translate="yes" xml:space="preserve">
          <source>The function can be used on files opened in &lt;code&gt;raw&lt;/code&gt; mode. However, it is inefficient to use it on &lt;code&gt;raw&lt;/code&gt; files if the file is not opened with option &lt;code&gt;{read_ahead, Size}&lt;/code&gt; specified. Thus, combining &lt;code&gt;raw&lt;/code&gt; and &lt;code&gt;{read_ahead, Size}&lt;/code&gt; is highly recommended when opening a text file for raw line-oriented reading.</source>
          <target state="translated">この関数は、 &lt;code&gt;raw&lt;/code&gt; モードで開いたファイルで使用できます。ただし、オプション &lt;code&gt;{read_ahead, Size}&lt;/code&gt; 指定してファイルを開いていない場合、 &lt;code&gt;raw&lt;/code&gt; ファイルで使用することは非効率的です。したがって、生の行指向の読み取り用にテキストファイルを開く場合は &lt;code&gt;{read_ahead, Size}&lt;/code&gt; &lt;code&gt;raw&lt;/code&gt; と{read_ahead、Size}を組み合わせることを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="8a30119da22bc70b60e3eb0a2546500296120c22" translate="yes" xml:space="preserve">
          <source>The function can return any term. If the event handler is deleted because of a call to &lt;code&gt;gen_event:delete_handler/3&lt;/code&gt;, the return value of that function becomes the return value of this function. If the event handler is to be replaced with another event handler because of a swap, the return value is passed to the &lt;code&gt;init&lt;/code&gt; function of the new event handler. Otherwise the return value is ignored.</source>
          <target state="translated">関数は任意の項を返すことができます。 &lt;code&gt;gen_event:delete_handler/3&lt;/code&gt; が呼び出されたためにイベントハンドラーが削除された場合、その関数の戻り値はこの関数の戻り値になります。スワップのためにイベントハンドラーが別のイベントハンドラーに置き換えられる場合、戻り値は新しいイベントハンドラーの &lt;code&gt;init&lt;/code&gt; 関数に渡されます。それ以外の場合、戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="ed95f32e82d2850058944611e44392a4e4ff3345" translate="yes" xml:space="preserve">
          <source>The function can return numerous errors, some can only be returned given a certain combination of options.</source>
          <target state="translated">この関数は多数のエラーを返すことができますが、中には特定のオプションの組み合わせを指定した場合にのみ返されるものもあります。</target>
        </trans-unit>
        <trans-unit id="ea57ec1a4ff4fb3ef55b1134a75586251178e601" translate="yes" xml:space="preserve">
          <source>The function can return the following error conditions, all well specified (no opaque values):</source>
          <target state="translated">この関数は、以下のエラー条件を返すことができます。</target>
        </trans-unit>
        <trans-unit id="c5c489b2375429e225473997aebd4b0f058730b3" translate="yes" xml:space="preserve">
          <source>The function cannot be found when evaluating a function call.</source>
          <target state="translated">関数呼び出しの評価時に関数が見つからない。</target>
        </trans-unit>
        <trans-unit id="900b2cc1343be73658d225cf863655824f14c352" translate="yes" xml:space="preserve">
          <source>The function check provides an error tuple if Unicode code points &amp;gt; 255 are to be returned if the client requested &lt;code&gt;latin1&lt;/code&gt;.</source>
          <target state="translated">クライアントが &lt;code&gt;latin1&lt;/code&gt; を要求した場合にUnicodeコードポイントが255を超える場合、関数チェックはエラータプルを提供します。</target>
        </trans-unit>
        <trans-unit id="d2f0030f1dc39e1c15798593d550e2c64df3c720" translate="yes" xml:space="preserve">
          <source>The function creates a copy of &lt;code&gt;channel.erl&lt;/code&gt; where it for each executable line is specified how many times that line has been executed. The output file is called &lt;code&gt;channel.COVER.out&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;channel.erl&lt;/code&gt; のコピーを作成します。ここでは、実行可能な行ごとに、その行が実行された回数が指定されています。出力ファイルの名前は &lt;code&gt;channel.COVER.out&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e4bf61d20b6e51c3f3e2be4195443a2547ef5d88" translate="yes" xml:space="preserve">
          <source>The function creates an Erlang list object, whose length &lt;code&gt;arrsize&lt;/code&gt; and whose elements are taken from the terms in &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">この関数はErlangリストオブジェクトを作成します。その長さは &lt;code&gt;arrsize&lt;/code&gt; で、その要素は &lt;code&gt;array&lt;/code&gt; の項から取得されます。</target>
        </trans-unit>
        <trans-unit id="e824f3f61fcb9a0cc2524376c6e7e48b567c62f2" translate="yes" xml:space="preserve">
          <source>The function creates an Erlang tuple, whose arity is &lt;code&gt;size&lt;/code&gt; and whose elements are taken from the terms in &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">この関数はErlangタプルを作成します。そのアリティは &lt;code&gt;size&lt;/code&gt; あり、その要素は &lt;code&gt;array&lt;/code&gt; の項から取得されます。</target>
        </trans-unit>
        <trans-unit id="a0c7fe697609b06db41d8d42bbc188f96462c7d5" translate="yes" xml:space="preserve">
          <source>The function descriptions are sorted in alphabetical order. It is recommended to start to read about &lt;code&gt;mnesia:create_table/2&lt;/code&gt;, &lt;code&gt;mnesia:lock/2&lt;/code&gt;, and &lt;code&gt;mnesia:activity/4&lt;/code&gt; before you continue and learn about the rest.</source>
          <target state="translated">関数の説明はアルファベット順にソートされています。続行して残りの部分について学ぶ前に、 &lt;code&gt;mnesia:create_table/2&lt;/code&gt; 、 &lt;code&gt;mnesia:lock/2&lt;/code&gt; 、および &lt;code&gt;mnesia:activity/4&lt;/code&gt; について読み始めることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a4a4d3bf61b03f1db00124a05a395c3a8430b995" translate="yes" xml:space="preserve">
          <source>The function does not return until the application is started, stopped, or successfully moved to another node. However, in some cases where permission is set to &lt;code&gt;true&lt;/code&gt;, the function returns &lt;code&gt;ok&lt;/code&gt; even though the application is not started. This is true when an application cannot start because of dependencies to other applications that are not yet started. When they are started, &lt;code&gt;Application&lt;/code&gt; is started as well.</source>
          <target state="translated">この関数は、アプリケーションが開始、停止、または正常に別のノードに移動されるまで戻りません。ただし、権限が &lt;code&gt;true&lt;/code&gt; に設定されている場合は、アプリケーションが起動されていなくても、関数は &lt;code&gt;ok&lt;/code&gt; を返します。これは、まだ開始されていない他のアプリケーションへの依存関係のためにアプリケーションを開始できない場合に当てはまります。起動すると &lt;code&gt;Application&lt;/code&gt; も起動します。</target>
        </trans-unit>
        <trans-unit id="1a469b96b6bc66c5e0081f41213671f5c1c3834d" translate="yes" xml:space="preserve">
          <source>The function evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on the specified nodes and collects the answers. It returns &lt;code&gt;{ResL, BadNodes}&lt;/code&gt;, where &lt;code&gt;BadNodes&lt;/code&gt; is a list of the nodes that do not exist, and &lt;code&gt;ResL&lt;/code&gt; is a list of the return values, or &lt;code&gt;{badrpc, Reason}&lt;/code&gt; for failing calls. &lt;code&gt;Timeout&lt;/code&gt; is a time (integer) in milliseconds, or &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">関数は、指定されたノードで &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価し、回答を収集します。これは、戻り &lt;code&gt;{ResL, BadNodes}&lt;/code&gt; 、 &lt;code&gt;BadNodes&lt;/code&gt; がない存在するノードのリストであり、および &lt;code&gt;ResL&lt;/code&gt; 戻り値のリスト、またはある &lt;code&gt;{badrpc, Reason}&lt;/code&gt; コールを失敗するため。 &lt;code&gt;Timeout&lt;/code&gt; はミリ秒単位の時間（整数）または &lt;code&gt;infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bfd306c3cfcdf7cb094583b8a0337221382f9540" translate="yes" xml:space="preserve">
          <source>The function fails if the calling process was not started by a &lt;code&gt;&lt;a href=&quot;proc_lib&quot;&gt;proc_lib&lt;/a&gt;&lt;/code&gt; start function, or if it is not registered according to &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">呼び出しプロセスが &lt;code&gt;&lt;a href=&quot;proc_lib&quot;&gt;proc_lib&lt;/a&gt;&lt;/code&gt; 開始関数によって開始されなかった場合、または &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; に従って登録されていない場合、関数は失敗します。</target>
        </trans-unit>
        <trans-unit id="0d8167d08507c4718349622be594e2c2117b70ec" translate="yes" xml:space="preserve">
          <source>The function fails if the calling process was not started by a &lt;code&gt;proc_lib&lt;/code&gt; start function, or if it is not registered according to &lt;code&gt;ServerName&lt;/code&gt;.</source>
          <target state="translated">呼び出しプロセスが &lt;code&gt;proc_lib&lt;/code&gt; 開始関数によって開始されなかった場合、または &lt;code&gt;ServerName&lt;/code&gt; に従って登録されていない場合、関数は失敗します。</target>
        </trans-unit>
        <trans-unit id="5ed33b0170b87b32a6fff91a9848a8bb7508e2c1" translate="yes" xml:space="preserve">
          <source>The function fails if the mandatory applications Kernel and STDLIB are not included in the &lt;code&gt;.rel&lt;/code&gt; file and have start type &lt;code&gt;permanent&lt;/code&gt; (which is default).</source>
          <target state="translated">必須アプリケーションのカーネルとSTDLIBが &lt;code&gt;.rel&lt;/code&gt; ファイルに含まれておらず、開始タイプが &lt;code&gt;permanent&lt;/code&gt; （デフォルト）である場合、関数は失敗します。</target>
        </trans-unit>
        <trans-unit id="6976675cebc3455eafac8b880bffae5936b6e076" translate="yes" xml:space="preserve">
          <source>The function fails with a &lt;code&gt;badarg&lt;/code&gt; run-time error if &lt;code&gt;Dest&lt;/code&gt; is an atom name, but this name is not registered. This is the only case when &lt;code&gt;send&lt;/code&gt; fails for an unreachable destination &lt;code&gt;Dest&lt;/code&gt; (of correct type).</source>
          <target state="translated">&lt;code&gt;Dest&lt;/code&gt; がアトム名である場合、関数は &lt;code&gt;badarg&lt;/code&gt; ランタイムエラーで失敗しますが、この名前は登録されていません。これは、到達できない宛先 &lt;code&gt;Dest&lt;/code&gt; （正しいタイプ）の &lt;code&gt;send&lt;/code&gt; が失敗した場合の唯一のケースです。</target>
        </trans-unit>
        <trans-unit id="f9fbf6c475826079470707701e2d9650785e7704" translate="yes" xml:space="preserve">
          <source>The function fails with reason &lt;code&gt;badarg&lt;/code&gt; in the following situations:</source>
          <target state="translated">以下の状況では、関数は &lt;code&gt;badarg&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="fe345735a6f8cc2af489da60647a5b2eb92480ca" translate="yes" xml:space="preserve">
          <source>The function is applied to each argument in the list. &lt;code&gt;foreach&lt;/code&gt; returns &lt;code&gt;ok&lt;/code&gt;. It is only used for its side-effect:</source>
          <target state="translated">関数はリストの各引数に適用されます。 &lt;code&gt;foreach&lt;/code&gt; は &lt;code&gt;ok&lt;/code&gt; を返します。それはその副作用のためにのみ使用されます：</target>
        </trans-unit>
        <trans-unit id="8ed286726d563576b74209031d0c844b5706bbb8" translate="yes" xml:space="preserve">
          <source>The function is asynchronous in the sense that it does not invoke a disk check, but returns the latest available value.</source>
          <target state="translated">この関数は、ディスクチェックを呼び出さず、最新の利用可能な値を返すという意味で非同期です。</target>
        </trans-unit>
        <trans-unit id="b851161538f61def55e8def7663e88f86cb96f48" translate="yes" xml:space="preserve">
          <source>The function is called by Logger when the formatter configuration for a handler is set or modified. It returns &lt;code&gt;ok&lt;/code&gt; if the configuration is valid, and &lt;code&gt;{error,term()}&lt;/code&gt; if it is faulty.</source>
          <target state="translated">この関数は、ハンドラーのフォーマッター構成が設定または変更されたときにLoggerによって呼び出されます。構成が有効な場合は &lt;code&gt;ok&lt;/code&gt; を返し、構成に問題がある場合は &lt;code&gt;{error,term()}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="685ab0b87ed3c05c293ea5d73e5639b4e1ff9576" translate="yes" xml:space="preserve">
          <source>The function is called by a Logger when formatter configuration is set or modified. The formatter must validate the given configuration and return &lt;code&gt;ok&lt;/code&gt; if it is correct, and &lt;code&gt;{error,Reason}&lt;/code&gt; if it is faulty.</source>
          <target state="translated">この関数は、フォーマッター構成が設定または変更されたときにロガーによって呼び出されます。フォーマッタは指定された構成を検証し、それが正しい場合は &lt;code&gt;ok&lt;/code&gt; を返し、それが故障している場合は &lt;code&gt;{error,Reason}&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="7fcd6de716b12c9ffa6272634f06715a4cc1ce07" translate="yes" xml:space="preserve">
          <source>The function is called for each start phase (as defined for the primary application) for the primary application and all included applications, for which the start phase is defined.</source>
          <target state="translated">この関数は、プライマリアプリケーションと、そのスタートフェーズが定義されているすべてのインクルードアプリケーションの各スタートフェーズ(プライマリアプリケーションに対して定義されている)に対して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c011a777dda4570cb71bfb1ec0fb55355e1ee1d3" translate="yes" xml:space="preserve">
          <source>The function is called if a user related error occurs at run-time, for example if a user defined instrumentation function returns erroneous.</source>
          <target state="translated">この関数は、ユーザ定義の計装関数が誤った値を返した場合など、ユーザ関連のエラーが実行時に発生した場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="af4ce4e1efa0b48a530a0c78c675702975921a0a" translate="yes" xml:space="preserve">
          <source>The function is called if an error occurs during the configuration phase, for example if a syntax error is found in a configuration file.</source>
          <target state="translated">この関数は、設定ファイルで構文エラーが見つかった場合など、設定フェーズでエラーが発生した場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="66a34ca9f0458ec66fedbe0a7a5d4d658f1bc216" translate="yes" xml:space="preserve">
          <source>The function is called on a temporary process when a handler is about to be removed. The purpose is to release all resources used by the handler.</source>
          <target state="translated">この関数は、ハンドラが削除されようとしているときに一時的なプロセス上で呼び出されます。その目的は、ハンドラが使用しているすべてのリソースを解放することです。</target>
        </trans-unit>
        <trans-unit id="ad2afb8b57f9d81965d61a6dce572893b3ec7c89" translate="yes" xml:space="preserve">
          <source>The function is called on a temporary process when an new handler is about to be added. The purpose is to verify the configuration and initiate all resources needed by the handler.</source>
          <target state="translated">この関数は、新しいハンドラが追加されようとしているときに、一時的なプロセスで呼び出されます。目的は、設定を検証し、ハンドラが必要とするすべてのリソースを開始することです。</target>
        </trans-unit>
        <trans-unit id="fdbb67b2c606784fb7d08c84801ed6ce232a3ebb" translate="yes" xml:space="preserve">
          <source>The function is called on a temporary process when the configuration for a handler is about to change. The purpose is to verify and act on the new configuration.</source>
          <target state="translated">この関数は、ハンドラの設定が変更されようとしているときに、一時的なプロセスで呼び出されます。その目的は、新しい設定を検証し、それに基づいて動作させることです。</target>
        </trans-unit>
        <trans-unit id="80c74d3f2c316470e0f2a09c6499b88b08ed5921" translate="yes" xml:space="preserve">
          <source>The function is called when all primary filters and all handler filters for the handler in question have passed for the given log event. It is called on the client process, that is, the process that issued the log event.</source>
          <target state="translated">この関数は、与えられたログイベントに対して、問題のハンドラのすべてのプライマリフィルタとハンドラフィルタが通過したときに呼び出されます。この関数は、クライアントプロセス、つまりログイベントを発行したプロセスで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="729c9968acf86cfc5b4d0b16abd57720e8543995" translate="yes" xml:space="preserve">
          <source>The function is called with the current line, up to the cursor, as a reversed string. It is to return a three-tuple: &lt;code&gt;{yes|no, string(), [string(), ...]}&lt;/code&gt;. The first element gives a beep if &lt;code&gt;no&lt;/code&gt;, otherwise the expansion is silent; the second is a string that will be entered at the cursor position; the third is a list of possible expansions. If this list is not empty, it is printed and the current input line is written once again.</source>
          <target state="translated">この関数は、現在の行からカーソルまで、反転文字列として呼び出されます。3つのタプルを返すことです： &lt;code&gt;{yes|no, string(), [string(), ...]}&lt;/code&gt; 。 &lt;code&gt;no&lt;/code&gt; の場合、最初の要素はビープ音を発します。それ以外の場合、拡張はサイレントです。2番目は、カーソル位置に入力される文字列です。3番目は可能な拡張のリストです。このリストが空でない場合は、リストが印刷され、現在の入力行がもう一度書き込まれます。</target>
        </trans-unit>
        <trans-unit id="5bcd5b77b7b4d998e29896caa372504ff0881133" translate="yes" xml:space="preserve">
          <source>The function is called with the data the I/O server finds on its I/O device, returning one of:</source>
          <target state="translated">この関数は、I/OサーバがそのI/Oデバイスで見つけたデータを使って呼び出され、いずれかを返します。</target>
        </trans-unit>
        <trans-unit id="05b6947d52059ff05be463986c224ccf19b497f6" translate="yes" xml:space="preserve">
          <source>The function is called with two arguments. The first argument is the successive elements in the list. The second argument is the accumulator. The function must return a new accumulator, which is used the next time the function is called.</source>
          <target state="translated">この関数は2つの引数で呼び出されます。第1引数はリストの連続した要素です。第2引数はアキュムレータです。この関数は新しいアキュムレータを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="c1d7045b7530f750d5c794463ab3ef61f6f0030e" translate="yes" xml:space="preserve">
          <source>The function is intended to be called in function &lt;code&gt;init_per_suite&lt;/code&gt; in the test suite.</source>
          <target state="translated">この関数は、テストスイートの関数 &lt;code&gt;init_per_suite&lt;/code&gt; で呼び出されることを目的としています。</target>
        </trans-unit>
        <trans-unit id="91d0a41107672655c3969ea037e3566edb95fc7c" translate="yes" xml:space="preserve">
          <source>The function is normally asynchronous in the sense that it does not invoke a memory check, but returns the latest available value. The one exception if is the function is called before a first memory check is finished, in which case it does not return a value until the memory check is finished.</source>
          <target state="translated">この関数は通常、メモリチェックを呼び出さずに最新の利用可能な値を返すという意味で非同期です。例外として、最初のメモリチェックが終了する前に呼び出された場合は、メモリチェックが終了するまで値を返しません。</target>
        </trans-unit>
        <trans-unit id="34af02f93e44d91dfb2270e53d1db1bc513f0b80" translate="yes" xml:space="preserve">
          <source>The function is optional and can be omitted when implementing an application callback module.</source>
          <target state="translated">この関数はオプションであり、アプリケーションのコールバックモジュールを実装する際には省略することができます。</target>
        </trans-unit>
        <trans-unit id="982df6f9c963401aaf5cd8cce719f4c21d1397c5" translate="yes" xml:space="preserve">
          <source>The function is optional. If it is not defined, the processes are terminated and then &lt;code&gt;Module:stop(State)&lt;/code&gt; is called.</source>
          <target state="translated">この機能はオプションです。定義されていない場合、プロセスは終了し、 &lt;code&gt;Module:stop(State)&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d3c75677662ff31b49062b31fc1d308b57eded17" translate="yes" xml:space="preserve">
          <source>The function is synchronous and all the nodes, and all the system servers, are running when it returns a value.</source>
          <target state="translated">この関数は同期しており、値を返すときにはすべてのノードとすべてのシステムサーバが実行されています。</target>
        </trans-unit>
        <trans-unit id="4bd22d2a35c5c88266eecbb86f7699a4e9f4d949" translate="yes" xml:space="preserve">
          <source>The function is synchronous in the sense that it is known that all servers have received the message when the call returns. It is not possible to know that the servers have processed the message.</source>
          <target state="translated">この関数は、呼び出しが戻ってきたときにすべてのサーバがメッセージを受信したことがわかるという意味で同期的です。サーバがメッセージを処理したことを知ることはできません。</target>
        </trans-unit>
        <trans-unit id="a3e80a528bd9ed8d253ab3a636d365b349c0df48" translate="yes" xml:space="preserve">
          <source>The function is to return &lt;code&gt;Status&lt;/code&gt;, a term that change the details of the current state of the event handler. Any term is allowed for &lt;code&gt;Status&lt;/code&gt;. The &lt;code&gt;gen_event&lt;/code&gt; module uses &lt;code&gt;Status&lt;/code&gt; as follows:</source>
          <target state="translated">関数は &lt;code&gt;Status&lt;/code&gt; を返します。これは、イベントハンドラーの現在の状態の詳細を変更する用語です。 &lt;code&gt;Status&lt;/code&gt; には任意の用語を使用できます。 &lt;code&gt;gen_event&lt;/code&gt; のモジュールは使用 &lt;code&gt;Status&lt;/code&gt; 次のように：</target>
        </trans-unit>
        <trans-unit id="f5e6848577b63036dd2df41149bfea0f17b8cf85" translate="yes" xml:space="preserve">
          <source>The function is to return &lt;code&gt;Status&lt;/code&gt;, a term that changes the details of the current state and status of the &lt;code&gt;gen_server&lt;/code&gt; process. There are no restrictions on the form &lt;code&gt;Status&lt;/code&gt; can take, but for the &lt;code&gt;sys:get_status/1,2&lt;/code&gt; case (when &lt;code&gt;Opt&lt;/code&gt; is &lt;code&gt;normal&lt;/code&gt;), the recommended form for the &lt;code&gt;Status&lt;/code&gt; value is &lt;code&gt;[{data, [{&quot;State&quot;, Term}]}]&lt;/code&gt;, where &lt;code&gt;Term&lt;/code&gt; provides relevant details of the &lt;code&gt;gen_server&lt;/code&gt; state. Following this recommendation is not required, but it makes the callback module status consistent with the rest of the &lt;code&gt;sys:get_status/1,2&lt;/code&gt; return value.</source>
          <target state="translated">関数は &lt;code&gt;Status&lt;/code&gt; を返します。これは、 &lt;code&gt;gen_server&lt;/code&gt; プロセスの現在の状態とステータスの詳細を変更する用語です。 &lt;code&gt;Status&lt;/code&gt; が取ることができるフォームに制限はありませんが、 &lt;code&gt;sys:get_status/1,2&lt;/code&gt; の場合（ &lt;code&gt;Opt&lt;/code&gt; が &lt;code&gt;normal&lt;/code&gt; の場合）、 &lt;code&gt;Status&lt;/code&gt; 値の推奨フォームは &lt;code&gt;[{data, [{&quot;State&quot;, Term}]}]&lt;/code&gt; 、ここで、 &lt;code&gt;Term&lt;/code&gt; は &lt;code&gt;gen_server&lt;/code&gt; 状態の関連詳細を提供します。この推奨に従うことは必須ではありませんが、コールバックモジュールのステータスを &lt;code&gt;sys:get_status/1,2&lt;/code&gt; の残りの戻り値と一致させます。</target>
        </trans-unit>
        <trans-unit id="22b229f5a7773458a1b22bbef3b9114da9d0467f" translate="yes" xml:space="preserve">
          <source>The function is to return &lt;code&gt;Status&lt;/code&gt;, a term that contains the appropriate details of the current state and status of the &lt;code&gt;gen_statem&lt;/code&gt;. There are no restrictions on the form &lt;code&gt;Status&lt;/code&gt; can take, but for the &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; case (when &lt;code&gt;Opt&lt;/code&gt; is &lt;code&gt;normal&lt;/code&gt;), the recommended form for the &lt;code&gt;Status&lt;/code&gt; value is &lt;code&gt;[{data, [{&quot;State&quot;, Term}]}]&lt;/code&gt;, where &lt;code&gt;Term&lt;/code&gt; provides relevant details of the &lt;code&gt;gen_statem&lt;/code&gt; state. Following this recommendation is not required, but it makes the callback module status consistent with the rest of the &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; return value.</source>
          <target state="translated">関数は、現在の状態と &lt;code&gt;gen_statem&lt;/code&gt; のステータスの適切な詳細を含む用語である &lt;code&gt;Status&lt;/code&gt; を返すことです。 &lt;code&gt;Status&lt;/code&gt; が取ることができるフォームに制限はありませんが、 &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; の場合（ &lt;code&gt;Opt&lt;/code&gt; が &lt;code&gt;normal&lt;/code&gt; の場合）、 &lt;code&gt;Status&lt;/code&gt; 値の推奨フォームは &lt;code&gt;[{data, [{&quot;State&quot;, Term}]}]&lt;/code&gt; 、ここで、 &lt;code&gt;Term&lt;/code&gt; は &lt;code&gt;gen_statem&lt;/code&gt; 状態の関連詳細を提供します。この推奨に従うことは必須ではありませんが、コールバックモジュールのステータスを &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; の残りの戻り値と一致させます。</target>
        </trans-unit>
        <trans-unit id="2e735ad6e373adc70cb8848117759dd2a569193e" translate="yes" xml:space="preserve">
          <source>The function is to return &lt;code&gt;{ok,Pid,State}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of the main process in the subsystem and &lt;code&gt;State&lt;/code&gt; is any term.</source>
          <target state="translated">関数は &lt;code&gt;{ok,Pid,State}&lt;/code&gt; を返すことです。ここで、 &lt;code&gt;Pid&lt;/code&gt; はサブシステムのメインプロセスのPIDであり、 &lt;code&gt;State&lt;/code&gt; は任意の用語です。</target>
        </trans-unit>
        <trans-unit id="b33f514bbf6653a3186283c4cae20e76aa53b9a4" translate="yes" xml:space="preserve">
          <source>The function is to return &lt;code&gt;{ok,Pid}&lt;/code&gt; or &lt;code&gt;{ok,Pid,State}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of the top supervisor and &lt;code&gt;State&lt;/code&gt; is any term. If omitted, &lt;code&gt;State&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt;. If the application is stopped later, &lt;code&gt;State&lt;/code&gt; is passed to &lt;code&gt;Module:prep_stop/1&lt;/code&gt;.</source>
          <target state="translated">関数は &lt;code&gt;{ok,Pid}&lt;/code&gt; または &lt;code&gt;{ok,Pid,State}&lt;/code&gt; を返すことです。ここで、 &lt;code&gt;Pid&lt;/code&gt; は最上位のスーパーバイザのPIDであり、 &lt;code&gt;State&lt;/code&gt; は任意の用語です。省略した場合、 &lt;code&gt;State&lt;/code&gt; のデフォルトは &lt;code&gt;[]&lt;/code&gt; になります。アプリケーションが後で停止した場合、 &lt;code&gt;State&lt;/code&gt; は &lt;code&gt;Module:prep_stop/1&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="29043cd3dfeb40d4aadad45c2081e6be85789b31" translate="yes" xml:space="preserve">
          <source>The function is to return the updated internal state.</source>
          <target state="translated">更新された内部状態を返す機能です。</target>
        </trans-unit>
        <trans-unit id="0abf3dd01db775a71cf749a86135b99f1e7db1dc" translate="yes" xml:space="preserve">
          <source>The function looks in the &lt;code&gt;.appup&lt;/code&gt; file and tries to find a downgrade script from the current application version. High-level instructions are translated to low-level instructions. The instructions are sorted in the same manner as when generating a &lt;code&gt;relup&lt;/code&gt; file.</source>
          <target state="translated">関数は &lt;code&gt;.appup&lt;/code&gt; ファイルを調べ、現在のアプリケーションバージョンからのダウングレードスクリプトを見つけようとします。高レベルの命令は低レベルの命令に変換されます。命令は、 &lt;code&gt;relup&lt;/code&gt; ファイルを生成するときと同じ方法でソートされます。</target>
        </trans-unit>
        <trans-unit id="ad728199fe8cc2addea2e4edf8ccc9c3d563c12d" translate="yes" xml:space="preserve">
          <source>The function looks in the &lt;code&gt;.appup&lt;/code&gt; file and tries to find a downgrade script to the previous version of the application using &lt;code&gt;&lt;a href=&quot;#downgrade_script-3&quot;&gt;downgrade_script/3&lt;/a&gt;&lt;/code&gt;. This script is evaluated using &lt;code&gt;&lt;a href=&quot;#eval_appup_script-4&quot;&gt;eval_appup_script/4&lt;/a&gt;&lt;/code&gt;, exactly in the same way as &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; does.</source>
          <target state="translated">関数は &lt;code&gt;.appup&lt;/code&gt; ファイルを調べ、 &lt;code&gt;&lt;a href=&quot;#downgrade_script-3&quot;&gt;downgrade_script/3&lt;/a&gt;&lt;/code&gt; を使用して、アプリケーションの以前のバージョンへのダウングレードスクリプトを見つけようとします。このスクリプトは、 &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; とまったく同じ方法で &lt;code&gt;&lt;a href=&quot;#eval_appup_script-4&quot;&gt;eval_appup_script/4&lt;/a&gt;&lt;/code&gt; を使用して評価されます。</target>
        </trans-unit>
        <trans-unit id="043e22dee6e39d2801de5bf62c0f13acd1fb7f3e" translate="yes" xml:space="preserve">
          <source>The function looks in the &lt;code&gt;.appup&lt;/code&gt; file and tries to find an upgrade script from the current application version. High-level instructions are translated to low-level instructions. The instructions are sorted in the same manner as when generating a &lt;code&gt;relup&lt;/code&gt; file.</source>
          <target state="translated">関数は &lt;code&gt;.appup&lt;/code&gt; ファイルを調べ、現在のアプリケーションバージョンからアップグレードスクリプトを見つけようとします。高レベルの命令は低レベルの命令に変換されます。命令は、 &lt;code&gt;relup&lt;/code&gt; ファイルを生成するときと同じ方法でソートされます。</target>
        </trans-unit>
        <trans-unit id="8c31fe3b9fb91cec2a465fbf77df750e586faa18" translate="yes" xml:space="preserve">
          <source>The function looks in the &lt;code&gt;.appup&lt;/code&gt; file and tries to find an upgrade script from the current version of the application using &lt;code&gt;&lt;a href=&quot;#upgrade_script-2&quot;&gt;upgrade_script/2&lt;/a&gt;&lt;/code&gt;. This script is evaluated using &lt;code&gt;&lt;a href=&quot;#eval_appup_script-4&quot;&gt;eval_appup_script/4&lt;/a&gt;&lt;/code&gt;, exactly in the same way as &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; does.</source>
          <target state="translated">関数は &lt;code&gt;.appup&lt;/code&gt; ファイルを調べ、 &lt;code&gt;&lt;a href=&quot;#upgrade_script-2&quot;&gt;upgrade_script/2&lt;/a&gt;&lt;/code&gt; を使用して、アプリケーションの現在のバージョンからアップグレードスクリプトを見つけようとします。このスクリプトは、 &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; とまったく同じ方法で &lt;code&gt;&lt;a href=&quot;#eval_appup_script-4&quot;&gt;eval_appup_script/4&lt;/a&gt;&lt;/code&gt; を使用して評価されます。</target>
        </trans-unit>
        <trans-unit id="dae77798ddae832b867b1859c814067bb73455e5" translate="yes" xml:space="preserve">
          <source>The function megaco:connect/4 is used to tell the Megaco application about which control process it should supervise, which MID the remote user has, which callback module it should use to send messages etc. When this &quot;virtual&quot; connection is established the user may use megaco:call/3 and megaco:cast/3 in order to send messages to the other side. Then it is up to the MG to send its first Service Change Request message after applying some clever algorithm in order to fight the problem with startup avalanche (as discussed in the RFC).</source>
          <target state="translated">関数 megaco:connect/4 は、どの制御プロセスを監視すべきか、リモートユーザが持っている MID はどれか、メッセージを送信するためにどのコールバックモジュールを使用すべきかなどを Megaco アプリケーションに伝えるために使用されます。この「仮想」接続が確立されると、ユーザは相手側にメッセージを送るために megaco:call/3 と megaco:cast/3 を使うことができます。その後、(RFCで議論されているように)起動時のアバランシェ問題に対処するために、いくつかの巧妙なアルゴリズムを適用した後、最初のサービス変更要求メッセージを送信するかどうかは、MGにかかっています。</target>
        </trans-unit>
        <trans-unit id="8ccc872bcbfbd97b2f8f68cc4d29e1cdf3b26f8a" translate="yes" xml:space="preserve">
          <source>The function must return &lt;code&gt;ok&lt;/code&gt; if the module is to become the new current code for the module and become callable.</source>
          <target state="translated">モジュールがモジュールの新しい現在のコードになり、呼び出し可能になる場合、関数は &lt;code&gt;ok&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="cd0b359eea39bf0334c200db138df73b605bda4d" translate="yes" xml:space="preserve">
          <source>The function name is an atom. Each argument is a pattern.</source>
          <target state="translated">関数名はアトムです。各引数はパターンです。</target>
        </trans-unit>
        <trans-unit id="9406ba0cad4fe7e53495b5806fdfd8af528e2c11" translate="yes" xml:space="preserve">
          <source>The function names &lt;code&gt;load_driver&lt;/code&gt; and &lt;code&gt;unload_driver&lt;/code&gt; are kept for backward compatibility.</source>
          <target state="translated">関数名 &lt;code&gt;load_driver&lt;/code&gt; と &lt;code&gt;unload_driver&lt;/code&gt; は、下位互換性のために残されています。</target>
        </trans-unit>
        <trans-unit id="79180ba05daadaf9ff778778be432cdae4488b2e" translate="yes" xml:space="preserve">
          <source>The function notifying the code lock about a button event is implemented using &lt;code&gt;gen_statem:cast/2&lt;/code&gt;:</source>
          <target state="translated">ボタンイベントに関するコードロックを通知する関数は、 &lt;code&gt;gen_statem:cast/2&lt;/code&gt; を使用して実装されます。</target>
        </trans-unit>
        <trans-unit id="9bcdf8490fa58034ee65eebf4713860825158535" translate="yes" xml:space="preserve">
          <source>The function print_version_info/0 uses the result of function version1/0 as &lt;code&gt;VersionInfo&lt;/code&gt;.</source>
          <target state="translated">関数print_version_info / 0は、関数version1 / 0の結果を &lt;code&gt;VersionInfo&lt;/code&gt; として使用します。</target>
        </trans-unit>
        <trans-unit id="d4a4124fa895f394038737b2a3c8f1d3ab62f5b7" translate="yes" xml:space="preserve">
          <source>The function produces lines of &lt;code&gt;Key: Value&lt;/code&gt; from key-value lists. Strings are printed with &lt;code&gt;~ts&lt;/code&gt; and other terms with &lt;code&gt;~tp&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;Key: Value&lt;/code&gt; -ValueリストからKey：Valueの行を生成します。文字列は &lt;code&gt;~ts&lt;/code&gt; 、その他の用語は &lt;code&gt;~tp&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9cb60460defa522f2257f4190da9c81a7ebadbf4" translate="yes" xml:space="preserve">
          <source>The function prototype of a resource destructor function.</source>
          <target state="translated">リソースデストラクタ関数のプロトタイプ。</target>
        </trans-unit>
        <trans-unit id="251a711b61dad3eb243d0cc657f90de99a8cb62d" translate="yes" xml:space="preserve">
          <source>The function prototype of a resource down function, called on the behalf of &lt;code&gt;&lt;a href=&quot;#enif_monitor_process&quot;&gt;enif_monitor_process&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;obj&lt;/code&gt; is the resource, &lt;code&gt;pid&lt;/code&gt; is the identity of the monitored process that is exiting, and &lt;code&gt;mon&lt;/code&gt; is the identity of the monitor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_monitor_process&quot;&gt;enif_monitor_process&lt;/a&gt;&lt;/code&gt; の代わりに呼び出される、リソースダウン関数の関数プロトタイプ。 &lt;code&gt;obj&lt;/code&gt; はリソース、 &lt;code&gt;pid&lt;/code&gt; は終了する監視対象プロセスのID 、 &lt;code&gt;mon&lt;/code&gt; はモニターのIDです。</target>
        </trans-unit>
        <trans-unit id="c45bd32e6496942fbb5d72602a01f8593df7f20d" translate="yes" xml:space="preserve">
          <source>The function prototype of a resource stop function, called on the behalf of &lt;code&gt;&lt;a href=&quot;#enif_select&quot;&gt;enif_select&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;obj&lt;/code&gt; is the resource, &lt;code&gt;event&lt;/code&gt; is OS event, &lt;code&gt;is_direct_call&lt;/code&gt; is true if the call is made directly from &lt;code&gt;enif_select&lt;/code&gt; or false if it is a scheduled call (potentially from another thread).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_select&quot;&gt;enif_select&lt;/a&gt;&lt;/code&gt; に代わって呼び出されるリソース停止関数の関数プロトタイプ。 &lt;code&gt;obj&lt;/code&gt; がリソースで、 &lt;code&gt;event&lt;/code&gt; 、OSのイベントです &lt;code&gt;is_direct_call&lt;/code&gt; は、コールがから直接作られている場合はtrueです &lt;code&gt;enif_select&lt;/code&gt; それは（潜在的に別のスレッドからの）スケジュールされたコールの場合はfalse。</target>
        </trans-unit>
        <trans-unit id="48037bd5e6edfdffb2f1110aafc54b00f51f984c" translate="yes" xml:space="preserve">
          <source>The function randomly selects one of the pids for registration and kills the other one.</source>
          <target state="translated">この関数は、登録するPIDのうちの1つをランダムに選択し、もう1つのPIDを殺す。</target>
        </trans-unit>
        <trans-unit id="305e01bbc8fe93b497a733f359ad553dd0edafee" translate="yes" xml:space="preserve">
          <source>The function randomly selects one of the pids for registration, and sends the message &lt;code&gt;{global_name_conflict, Name}&lt;/code&gt; to the other pid.</source>
          <target state="translated">この関数は、登録するPIDの1つをランダムに選択し、メッセージ &lt;code&gt;{global_name_conflict, Name}&lt;/code&gt; を他のPIDに送信します。</target>
        </trans-unit>
        <trans-unit id="8abbebafab7e64fd67ec141e6747533671416e1f" translate="yes" xml:space="preserve">
          <source>The function removes the &lt;code&gt;Key&lt;/code&gt;, if it exists, and its associated value from &lt;code&gt;Map1&lt;/code&gt; and returns a tuple with the removed &lt;code&gt;Value&lt;/code&gt; and the new map &lt;code&gt;Map2&lt;/code&gt; without key &lt;code&gt;Key&lt;/code&gt;. If the key does not exist &lt;code&gt;error&lt;/code&gt; is returned.</source>
          <target state="translated">この関数は、存在する場合は &lt;code&gt;Key&lt;/code&gt; とそれに関連付けられた値を &lt;code&gt;Map1&lt;/code&gt; から削除し、削除された &lt;code&gt;Value&lt;/code&gt; を持つタプルと、キー &lt;code&gt;Key&lt;/code&gt; のない新しいマップ &lt;code&gt;Map2&lt;/code&gt; を返します。キーが存在しない場合、 &lt;code&gt;error&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="e238717dba0649170fc233d2b4fe4554b94fb51d" translate="yes" xml:space="preserve">
          <source>The function reports &lt;code&gt;{error, {AppName,Reason}}&lt;/code&gt; for errors, where &lt;code&gt;Reason&lt;/code&gt; is any possible reason returned by &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt; when starting a specific dependency.</source>
          <target state="translated">機能レポート &lt;code&gt;{error, {AppName,Reason}}&lt;/code&gt; エラーのため、 &lt;code&gt;Reason&lt;/code&gt; によって返される任意の可能な理由である &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt; 特定の依存を開始するとき。</target>
        </trans-unit>
        <trans-unit id="76d19e4d2aef11065f3b75825b4b1412100e2c14" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; for &lt;code&gt;latin1&lt;/code&gt; encoding, as there is no BOM for ISO Latin-1.</source>
          <target state="translated">ISO Latin-1のBOMがないため、この関数は &lt;code&gt;latin1&lt;/code&gt; エンコーディングの &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cea6a4ed4ab166dce1a5c11aa39053c9e188fc54" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;1&lt;/code&gt; on successful decoding, &lt;code&gt;-1&lt;/code&gt; on error, and &lt;code&gt;0&lt;/code&gt; if the term seems alright, but does not fit in the &lt;code&gt;term&lt;/code&gt; structure. If &lt;code&gt;1&lt;/code&gt; is returned, the &lt;code&gt;index&lt;/code&gt; is incremented, and &lt;code&gt;term&lt;/code&gt; contains the decoded term.</source>
          <target state="translated">この関数は、デコードが成功した場合は &lt;code&gt;1&lt;/code&gt; を返し、エラーの場合は &lt;code&gt;-1&lt;/code&gt; を返します。 &lt;code&gt;term&lt;/code&gt; が問題ないように見えても、用語の構造に適合しない場合は &lt;code&gt;0&lt;/code&gt; を返します。場合は &lt;code&gt;1&lt;/code&gt; が返され、 &lt;code&gt;index&lt;/code&gt; インクリメントされ、 &lt;code&gt;term&lt;/code&gt; デコードされた用語が含まれています。</target>
        </trans-unit>
        <trans-unit id="0c0efff847bddce6b19a713a0f0517e02e510df4" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;ok&lt;/code&gt; if the event manager terminates with the expected reason. Any other reason than &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;shutdown&lt;/code&gt;, or &lt;code&gt;{shutdown,Term}&lt;/code&gt; causes an error report to be issued using &lt;code&gt;logger(3)&lt;/code&gt;. The default &lt;code&gt;Reason&lt;/code&gt; is &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">イベントマネージャが予期された理由で終了した場合、関数は &lt;code&gt;ok&lt;/code&gt; を返します。 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;shutdown&lt;/code&gt; 、または &lt;code&gt;{shutdown,Term}&lt;/code&gt; 以外の理由により、 &lt;code&gt;logger(3)&lt;/code&gt; を使用してエラーレポートが発行されます。デフォルトの &lt;code&gt;Reason&lt;/code&gt; は &lt;code&gt;normal&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9c7b3421431470de3120253d455529b919367ac1" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;ok&lt;/code&gt; if the server terminates with the expected reason. Any other reason than &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;shutdown&lt;/code&gt;, or &lt;code&gt;{shutdown,Term}&lt;/code&gt; causes an error report to be issued using &lt;code&gt;logger(3)&lt;/code&gt;. The default &lt;code&gt;Reason&lt;/code&gt; is &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">サーバーが予期した理由で終了した場合、関数は &lt;code&gt;ok&lt;/code&gt; を返します。 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;shutdown&lt;/code&gt; 、または &lt;code&gt;{shutdown,Term}&lt;/code&gt; 以外の理由により、 &lt;code&gt;logger(3)&lt;/code&gt; を使用してエラーレポートが発行されます。デフォルトの &lt;code&gt;Reason&lt;/code&gt; は &lt;code&gt;normal&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cd73f7ab11de774d64402ce75fdbcce6bc66eb53" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;ok&lt;/code&gt; or an error tuple where the second element contains the I/O error that made the writing impossible.</source>
          <target state="translated">関数は、 &lt;code&gt;ok&lt;/code&gt; またはエラータプルを返します。2番目の要素には、書き込みを不可能にしたI / Oエラーが含まれています。</target>
        </trans-unit>
        <trans-unit id="9d8bcc68d7d1e1c02534b3299d71875a81aa57c0" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;ok&lt;/code&gt;, or terminates if an error occurs. For example, the transaction terminates if no &lt;code&gt;person&lt;/code&gt; table exists.</source>
          <target state="translated">関数は &lt;code&gt;ok&lt;/code&gt; を返すか、エラーが発生した場合は終了します。たとえば、 &lt;code&gt;person&lt;/code&gt; テーブルが存在しない場合、トランザクションは終了します。</target>
        </trans-unit>
        <trans-unit id="ae9ce4bfa4732575d07ad75abe832d18209cf6d5" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;profiling&lt;/code&gt; if tracing could be enabled for all processes in &lt;code&gt;Rootset&lt;/code&gt;, or &lt;code&gt;error&lt;/code&gt; otherwise.</source>
          <target state="translated">この関数は、 &lt;code&gt;Rootset&lt;/code&gt; のすべてのプロセスに対してトレースを有効にできる場合は &lt;code&gt;profiling&lt;/code&gt; 返し、そうでない場合は &lt;code&gt;error&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="82b7eb2d16fbf6159cd686bcbf5282210683decd" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;true&lt;/code&gt; if all of the following apply:</source>
          <target state="translated">次のすべてが &lt;code&gt;true&lt;/code&gt; 場合、関数はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="ade0bfc225f1f56359228ebdf66a4c04b123ddc2" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;yes&lt;/code&gt; if successful, &lt;code&gt;no&lt;/code&gt; if it fails. For example, &lt;code&gt;no&lt;/code&gt; is returned if an attempt is made to register an already registered process or to register a process with a name that is already in use.</source>
          <target state="translated">関数が戻るの &lt;code&gt;yes&lt;/code&gt; 成功した場合、 &lt;code&gt;no&lt;/code&gt; それが失敗していない場合。たとえば、すでに登録されているプロセスを登録しようとしたり、すでに使用されている名前でプロセスを登録しようとしたりすると、 &lt;code&gt;no&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="00e48b1c0bb58c163a4b66da8eb059d14d44d0a7" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;{Pos, Length}&lt;/code&gt; for the binary in &lt;code&gt;Pattern&lt;/code&gt;, starting at the lowest position in &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;Subject&lt;/code&gt; 最も低い位置から開始して、 &lt;code&gt;Pattern&lt;/code&gt; のバイナリの &lt;code&gt;{Pos, Length}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="51c7380f6ccd2c685f838a5778eff11acc171a3c" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;{SourceFile, Options}&lt;/code&gt; if it succeeds. &lt;code&gt;SourceFile&lt;/code&gt; is the absolute path to the source file without extension &lt;code&gt;&quot;.erl&quot;&lt;/code&gt;. &lt;code&gt;Options&lt;/code&gt; includes the options that are necessary to recompile the file with &lt;code&gt;compile:file/2&lt;/code&gt;, but excludes options such as &lt;code&gt;report&lt;/code&gt; and &lt;code&gt;verbose&lt;/code&gt;, which do not change the way code is generated. The paths in options &lt;code&gt;{outdir, Path}&lt;/code&gt; and &lt;code&gt;{i, Path}&lt;/code&gt; are guaranteed to be absolute.</source>
          <target state="translated">関数は &lt;code&gt;{SourceFile, Options}&lt;/code&gt; 成功すると{SourceFile、Options}を返します。 &lt;code&gt;SourceFile&lt;/code&gt; は、拡張子 &lt;code&gt;&quot;.erl&quot;&lt;/code&gt; なしのソースファイルへの絶対パスです。 &lt;code&gt;Options&lt;/code&gt; は、 &lt;code&gt;compile:file/2&lt;/code&gt; でファイルを再コンパイルするために必要なオプションが含まれますが、コードの生成方法を変更しない &lt;code&gt;report&lt;/code&gt; や &lt;code&gt;verbose&lt;/code&gt; などのオプションは含まれません。オプション &lt;code&gt;{outdir, Path}&lt;/code&gt; および &lt;code&gt;{i, Path}&lt;/code&gt; は絶対パスであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="95f12585f0eeb736eca25c313b53ecf1f8719509" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;{error,Reason}&lt;/code&gt; if the module cannot be interpreted. &lt;code&gt;Reason&lt;/code&gt; can have the following values:</source>
          <target state="translated">モジュールが解釈できない場合 &lt;code&gt;{error,Reason}&lt;/code&gt; 関数は{error、Reason}を返します。 &lt;code&gt;Reason&lt;/code&gt; には次の値を指定できます。</target>
        </trans-unit>
        <trans-unit id="327593fcc1fe364e7a22ff37db545a09532407de" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;{error,eacces}&lt;/code&gt; if the directory is not readable or &lt;code&gt;{error,enoent}&lt;/code&gt; if the directory does not exist.</source>
          <target state="translated">関数の戻り &lt;code&gt;{error,eacces}&lt;/code&gt; ディレクトリが読み取り可能であるかどうか &lt;code&gt;{error,enoent}&lt;/code&gt; ディレクトリが存在しない場合。</target>
        </trans-unit>
        <trans-unit id="9a6679cb30215fd3bbce3430d53f63d245192cc6" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;{ok, Node}&lt;/code&gt;, where &lt;code&gt;Node&lt;/code&gt; is the name of the new node, otherwise &lt;code&gt;{error, Reason}&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; can be one of:</source>
          <target state="translated">この関数は &lt;code&gt;{ok, Node}&lt;/code&gt; 返します。ここで &lt;code&gt;Node&lt;/code&gt; は新しいノードの名前です。それ以外の場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 。ここで、 &lt;code&gt;Reason&lt;/code&gt; は次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="926a41dded8f50f5bd40efe538f9bd8d662e5429" translate="yes" xml:space="preserve">
          <source>The function returns a list with one element for each matching object, where each element is an ordered list of pattern variable bindings, for example:</source>
          <target state="translated">この関数は、各マッチングオブジェクトに対して1つの要素を持つリストを返し、各要素は、例えば、パターン変数のバインディングの順序付きリストです。</target>
        </trans-unit>
        <trans-unit id="ef467049df8eebfb47a732dfe257b75164507468" translate="yes" xml:space="preserve">
          <source>The function returns a new list.</source>
          <target state="translated">この関数は新しいリストを返します。</target>
        </trans-unit>
        <trans-unit id="8e921d3a34acd22129663174bed5a4222ddb5120" translate="yes" xml:space="preserve">
          <source>The function returns a tuple &lt;code&gt;{Replies,BadNodes}&lt;/code&gt;, where &lt;code&gt;Replies&lt;/code&gt; is a list of &lt;code&gt;{Node,Reply}&lt;/code&gt; and &lt;code&gt;BadNodes&lt;/code&gt; is a list of node that either did not exist, or where the &lt;code&gt;gen_server&lt;/code&gt;&lt;code&gt;Name&lt;/code&gt; did not exist or did not reply.</source>
          <target state="translated">関数はタプルを返し &lt;code&gt;{Replies,BadNodes}&lt;/code&gt; 、 &lt;code&gt;Replies&lt;/code&gt; リストである &lt;code&gt;{Node,Reply}&lt;/code&gt; と &lt;code&gt;BadNodes&lt;/code&gt; は存在しなかった、又はここでのいずれかで、そのノードのリストである &lt;code&gt;gen_server&lt;/code&gt; は &lt;code&gt;Name&lt;/code&gt; が存在しなかったか、応答しませんでした。</target>
        </trans-unit>
        <trans-unit id="b1e8d384f3de9f24fc9976775486188b88a64ca7" translate="yes" xml:space="preserve">
          <source>The function returns according to the specification of an instrumentation function.</source>
          <target state="translated">この関数は、計装関数の指定に応じて戻ります。</target>
        </trans-unit>
        <trans-unit id="ba15e145974c7c4548255818d03130da786830bb" translate="yes" xml:space="preserve">
          <source>The function returns an Erlang term, or &lt;code&gt;NULL&lt;/code&gt; if &lt;code&gt;FormatStr&lt;/code&gt; does not describe a valid Erlang term.</source>
          <target state="translated">関数は、Erlangの用語、または返す &lt;code&gt;NULL&lt;/code&gt; を場合 &lt;code&gt;FormatStr&lt;/code&gt; が有効なErlangの用語を説明していません。</target>
        </trans-unit>
        <trans-unit id="84b04ee2da4370d4c96804f7728600a7d4958614" translate="yes" xml:space="preserve">
          <source>The function returns either an error tuple or a tuple &lt;code&gt;{ok, List}&lt;/code&gt;. The &lt;code&gt;List&lt;/code&gt; consists of specifications of how many functions that matched, in the same way as the processes and ports are presented in the return value of &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数はエラータプルまたはタプル &lt;code&gt;{ok, List}&lt;/code&gt; 返します。 &lt;code&gt;List&lt;/code&gt; プロセスとポートがの戻り値で提示されているのと同じ方法で、一致したことをどのように多くの機能の仕様で構成され &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dff9f8ac1b740a28f21f75b322ee576a5c1a3db8" translate="yes" xml:space="preserve">
          <source>The function returns either an error tuple or a tuple &lt;code&gt;{ok, List}&lt;/code&gt;. The &lt;code&gt;List&lt;/code&gt; consists of specifications of how many processes and ports that matched (in the case of a pure pid() exactly 1). The specification of matched processes is &lt;code&gt;{matched, Node, N}&lt;/code&gt;. If the remote processor call,&lt;code&gt;rpc&lt;/code&gt;, to a remote node fails, the &lt;code&gt;rpc&lt;/code&gt; error message is delivered as a fourth argument and the number of matched processes are 0. Note that the result {ok, List} may contain a list where &lt;code&gt;rpc&lt;/code&gt; calls to one, several or even all nodes failed.</source>
          <target state="translated">関数はエラータプルまたはタプル &lt;code&gt;{ok, List}&lt;/code&gt; 返します。 &lt;code&gt;List&lt;/code&gt; （純粋なPID（）正確に1の場合には）一致したことをどのように多くのプロセスとポートの仕様で構成されています。一致したプロセスの仕様は &lt;code&gt;{matched, Node, N}&lt;/code&gt; です。リモートノードへのリモートプロセッサ呼び出し &lt;code&gt;rpc&lt;/code&gt; が失敗すると、 &lt;code&gt;rpc&lt;/code&gt; エラーメッセージが4番目の引数として配信され、一致したプロセスの数は0になります。結果{ok、List}には、 &lt;code&gt;rpc&lt;/code&gt; が1つ、複数、またはすべてのノードで障害が発生しました。</target>
        </trans-unit>
        <trans-unit id="47ce2b2bb012a9e9a4743dfb100ef52ab194f4a8" translate="yes" xml:space="preserve">
          <source>The function returns one of the following statuses upon success:</source>
          <target state="translated">この関数は、成功すると以下のいずれかのステータスを返します。</target>
        </trans-unit>
        <trans-unit id="af80ca7f3d62f6cac6e62e9f90f2843e1b33444b" translate="yes" xml:space="preserve">
          <source>The function returns the answer &lt;code&gt;Reply&lt;/code&gt; as produced by the server &lt;code&gt;Name&lt;/code&gt;, or &lt;code&gt;{error, Reason}&lt;/code&gt;.</source>
          <target state="translated">この関数は、サーバー &lt;code&gt;Name&lt;/code&gt; または &lt;code&gt;{error, Reason}&lt;/code&gt; によって生成された応答 &lt;code&gt;Reply&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6fa69a661585fbc212f6bcd6110e5d9551001a6f" translate="yes" xml:space="preserve">
          <source>The function returns the list of file names of all created modules, including any automatically created stub modules. The file name of the target module is always first in the list.</source>
          <target state="translated">この関数は、自動的に作成されたスタブモジュールを含めて、作成されたすべてのモジュールのファイル名のリストを返します。対象となるモジュールのファイル名は常にリストの最初になります。</target>
        </trans-unit>
        <trans-unit id="67e6d37d8f8ed9b75d952e7999fb2087c89daf86" translate="yes" xml:space="preserve">
          <source>The function returns the number of objects deleted from the table.</source>
          <target state="translated">この関数は、テーブルから削除されたオブジェクトの数を返します。</target>
        </trans-unit>
        <trans-unit id="f97fd237860bed04d4fc7be045423bcf8705b592" translate="yes" xml:space="preserve">
          <source>The function returns the number of objects matched.</source>
          <target state="translated">この関数は、マッチしたオブジェクトの数を返します。</target>
        </trans-unit>
        <trans-unit id="c874ae6f3ce13ecf61704660eadd7378f687f995" translate="yes" xml:space="preserve">
          <source>The function returns the pid() of a handler process, that does the supervision on behalf of the client application. Note that the client application is linked to this handler.</source>
          <target state="translated">この関数は、クライアントアプリケーションに代わって監視を行うハンドラプロセスの pid()を返します。クライアントアプリケーションはこのハンドラにリンクされていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8826e27f40bae39e6afc8b99ead67cefc85ed51f" translate="yes" xml:space="preserve">
          <source>The function returns the test result, represented by the tuple &lt;code&gt;{Ok,Failed,{UserSkipped,AutoSkipped}}&lt;/code&gt;, where each element is an integer. If test execution fails, the function returns the tuple &lt;code&gt;{error,Reason}&lt;/code&gt;, where the term &lt;code&gt;Reason&lt;/code&gt; explains the failure.</source>
          <target state="translated">この関数は、タプル &lt;code&gt;{Ok,Failed,{UserSkipped,AutoSkipped}}&lt;/code&gt; で表されるテスト結果を返します。各要素は整数です。テストの実行が失敗した場合、関数はタプル &lt;code&gt;{error,Reason}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Reason&lt;/code&gt; という用語は失敗を説明しています。</target>
        </trans-unit>
        <trans-unit id="66053340efa519d76743820bb26595016a5a05f7" translate="yes" xml:space="preserve">
          <source>The function returns the total number of replaced objects.</source>
          <target state="translated">この関数は、置換されたオブジェクトの総数を返します。</target>
        </trans-unit>
        <trans-unit id="13b54d91784d634be011a5d8f40eca029f4c1437" translate="yes" xml:space="preserve">
          <source>The function returns when the reply arrives, when the request timer eventually times out or when the outstanding requests are explicitly cancelled.</source>
          <target state="translated">この関数は、返信が到着したとき、リクエストタイマーが最終的にタイムアウトしたとき、または未処理のリクエストが明示的にキャンセルされたときに返します。</target>
        </trans-unit>
        <trans-unit id="0e911cfd5f3fbfe1f052ffaa063943cb8b0fe46c" translate="yes" xml:space="preserve">
          <source>The function returns:</source>
          <target state="translated">関数が戻ります。</target>
        </trans-unit>
        <trans-unit id="9be9148ebe8c1af83ecb810b37aa82c15bf5d001" translate="yes" xml:space="preserve">
          <source>The function should now return:</source>
          <target state="translated">これで関数は返すようになりました。</target>
        </trans-unit>
        <trans-unit id="89ceb7fdfb37fece3ab74b229b8cea9443cca0bd" translate="yes" xml:space="preserve">
          <source>The function throws a &lt;code&gt;badarg&lt;/code&gt; exception if the driver is not present in the system or if the tag is not supported.</source>
          <target state="translated">ドライバがシステムに存在しない場合、またはタグがサポートされていない場合、関数は &lt;code&gt;badarg&lt;/code&gt; 例外をスローします。</target>
        </trans-unit>
        <trans-unit id="95ce52efa32ec5a1e922545d8dfcff54dd9fa145" translate="yes" xml:space="preserve">
          <source>The function throws a &lt;code&gt;badarg&lt;/code&gt; exception if the driver is not present in the system.</source>
          <target state="translated">ドライバがシステムに存在しない場合、関数は &lt;code&gt;badarg&lt;/code&gt; 例外をスローします。</target>
        </trans-unit>
        <trans-unit id="e2803735d718719dbf8ff59057508925d737d41f" translate="yes" xml:space="preserve">
          <source>The function throws a &lt;code&gt;badarg&lt;/code&gt; exception if the parameter is not a &lt;code&gt;reference()&lt;/code&gt;.</source>
          <target state="translated">パラメータが &lt;code&gt;reference()&lt;/code&gt; でない場合、関数は &lt;code&gt;badarg&lt;/code&gt; 例外をスローします。</target>
        </trans-unit>
        <trans-unit id="66d20dcf7ad9c489aba044486ad7cfb8ef93a242" translate="yes" xml:space="preserve">
          <source>The function throws a &lt;code&gt;badarg&lt;/code&gt; exception if the parameters are not specified as described here.</source>
          <target state="translated">ここで説明するようにパラメーターが指定されていない場合、関数は &lt;code&gt;badarg&lt;/code&gt; 例外をスローします。</target>
        </trans-unit>
        <trans-unit id="5d9e44a0ad0773f97c4f379d41e06e651c358097" translate="yes" xml:space="preserve">
          <source>The function throws a badarg if the parameter is in wrong format. It may also throw the exception notsup in case there is no engine support in the underlying OpenSSL implementation.</source>
          <target state="translated">この関数は、パラメータの形式が間違っている場合に badarg をスローします。また、基礎となる OpenSSL の実装でエンジンがサポートされていない場合には、例外 notsup をスローすることもあります。</target>
        </trans-unit>
        <trans-unit id="eda733b256a520d564c901fe8c2c263fe4e56cd1" translate="yes" xml:space="preserve">
          <source>The function throws a badarg if the parameters are in wrong format. It may also throw the exception notsup in case there is no engine support in the underlying OpenSSL implementation.</source>
          <target state="translated">この関数は、パラメータの形式が間違っている場合に badarg をスローします。また、基礎となる OpenSSL の実装でエンジンがサポートされていない場合には、 notsup という例外を投げることもあります。</target>
        </trans-unit>
        <trans-unit id="31c1041afe84cb2dbdbb948e8208c9f84bf59ebd" translate="yes" xml:space="preserve">
          <source>The function unregisters both pids and sends the message &lt;code&gt;{global_name_conflict, Name, OtherPid}&lt;/code&gt; to both processes.</source>
          <target state="translated">関数は両方のPIDの登録を解除し、メッセージ &lt;code&gt;{global_name_conflict, Name, OtherPid}&lt;/code&gt; を両方のプロセスに送信します。</target>
        </trans-unit>
        <trans-unit id="c3a1f79b06aa96385eb181ed86fb6eae9b5e9415" translate="yes" xml:space="preserve">
          <source>The function waits for user input, and does not return until the remote shell is ended (that is, exit from the shell).</source>
          <target state="translated">この関数はユーザの入力を待ち、リモートシェルが終了するまで(つまりシェルからの終了)は戻りません。</target>
        </trans-unit>
        <trans-unit id="b8892ca0441d17488cdcc2015a61701f971adb9a" translate="yes" xml:space="preserve">
          <source>The function will also return an error if the node &lt;code&gt;Nodename&lt;/code&gt; is not reachable.</source>
          <target state="translated">ノード &lt;code&gt;Nodename&lt;/code&gt; に到達できない場合、関数はエラーも返します。</target>
        </trans-unit>
        <trans-unit id="fe48f3115cf0be1263ce3632f413691699d232ac" translate="yes" xml:space="preserve">
          <source>The function will also return the &lt;code&gt;Name&lt;/code&gt; instead of the table identifier. To get the table identifier of a named table, use &lt;code&gt;&lt;a href=&quot;#whereis-1&quot;&gt;whereis/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数は、テーブル識別子の代わりに &lt;code&gt;Name&lt;/code&gt; も返します。名前付きテーブルのテーブル識別子を取得するには、 &lt;code&gt;&lt;a href=&quot;#whereis-1&quot;&gt;whereis/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bc605a27b48f7b91fedc8d92d1b0ced2f10b5eee" translate="yes" xml:space="preserve">
          <source>The function will return an error, either due to I/O problems (like a non existing or non readable file) or due to file format problems. The errors from a bad format file are in a more or less textual format, which will give a hint to what's causing the problem.</source>
          <target state="translated">この関数は、I/Oの問題(存在しないファイルや読めないファイルなど)やファイルフォーマットの問題によるエラーを返します。フォーマットの悪いファイルからのエラーは、多かれ少なかれテキスト形式で表示され、何が問題を引き起こしているのかのヒントを与えてくれます。</target>
        </trans-unit>
        <trans-unit id="1192b2e61e715c06fc73aea33efb68d8d4e10a72" translate="yes" xml:space="preserve">
          <source>The function will throw an exception if the &lt;code&gt;dyntrace&lt;/code&gt; NIF library could not be loaded by the on_load function of this module.</source>
          <target state="translated">このモジュールのon_load関数で &lt;code&gt;dyntrace&lt;/code&gt; NIFライブラリをロードできなかった場合、関数は例外をスローします。</target>
        </trans-unit>
        <trans-unit id="877225bff459640b7fb2492bce96b16257fca8af" translate="yes" xml:space="preserve">
          <source>The function works as &lt;code&gt;ei_reg_send&lt;/code&gt; with one exception. Instead of taking &lt;code&gt;ei_cnode&lt;/code&gt; as first argument, it takes a second argument, an &lt;code&gt;erlang_pid&lt;/code&gt;, which is to be the process identifier of the sending process (in the Erlang distribution protocol).</source>
          <target state="translated">この関数は、1つの例外を除いて &lt;code&gt;ei_reg_send&lt;/code&gt; として機能します。 &lt;code&gt;ei_cnode&lt;/code&gt; を最初の引数として取る代わりに、2番目の引数 &lt;code&gt;erlang_pid&lt;/code&gt; を受け取ります。これは、（Erlang配布プロトコルの）送信プロセスのプロセス識別子になります。</target>
        </trans-unit>
        <trans-unit id="96c1202d0cd6c2fd8c2454e3ec64b0d84b6bd072" translate="yes" xml:space="preserve">
          <source>The functionality described in EEP10 was implemented in Erlang/OTP R13A.</source>
          <target state="translated">EEP10で説明した機能はErlang/OTP R13Aで実装されています。</target>
        </trans-unit>
        <trans-unit id="f4c5930ab45c4ff48e920b1f1f0e771ba10a38ad" translate="yes" xml:space="preserve">
          <source>The functionality of &lt;code&gt;server&lt;/code&gt; can be extended without having to change &lt;code&gt;ch2&lt;/code&gt; or any other callback module.</source>
          <target state="translated">&lt;code&gt;server&lt;/code&gt; の機能は、 &lt;code&gt;ch2&lt;/code&gt; やその他のコールバックモジュールを変更せずに拡張できます。</target>
        </trans-unit>
        <trans-unit id="42a7b913d2b289987ee5e2464734af014db9f20b" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;&lt;a href=&quot;ct#set_verbosity-2&quot;&gt;ct:set_verbosity/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ct#get_verbosity-1&quot;&gt;ct:get_verbosity/1&lt;/a&gt;&lt;/code&gt; may be used to modify and read verbosity levels during test execution.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;ct#set_verbosity-2&quot;&gt;ct:set_verbosity/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ct#get_verbosity-1&quot;&gt;ct:get_verbosity/1&lt;/a&gt;&lt;/code&gt; を使用して、テスト実行中に詳細レベルを変更および読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="4e9c838a14637c7a4c6ed49ae71fd28e08b8189c" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;&lt;a href=&quot;erl_parse#anno_from_term-1&quot;&gt;anno_from_term()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erl_parse#anno_to_term-1&quot;&gt;anno_to_term()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erl_parse#fold_anno-3&quot;&gt;fold_anno()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erl_parse#map_anno-2&quot;&gt;map_anno()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erl_parse#mapfold_anno-3&quot;&gt;mapfold_anno()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;erl_parse#new_anno-1&quot;&gt;new_anno()&lt;/a&gt;&lt;/code&gt;, in the &lt;code&gt;erl_parse&lt;/code&gt; module can be used for manipulating annotations in abstract code.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;erl_parse#anno_from_term-1&quot;&gt;anno_from_term()&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;erl_parse#anno_to_term-1&quot;&gt;anno_to_term()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;erl_parse#fold_anno-3&quot;&gt;fold_anno()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;erl_parse#map_anno-2&quot;&gt;map_anno()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;erl_parse#mapfold_anno-3&quot;&gt;mapfold_anno()&lt;/a&gt;&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;erl_parse#new_anno-1&quot;&gt;new_anno()&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;erl_parse&lt;/code&gt; モジュール抽象コードに注釈を操作するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4ef5f76ccaeeff0245cc5352fd37788847bc8dd4" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;&lt;a href=&quot;erl_scan#column-1&quot;&gt;column()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erl_scan#end_location-1&quot;&gt;end_location()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erl_scan#line-1&quot;&gt;line()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erl_scan#location-1&quot;&gt;location()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;erl_scan#text-1&quot;&gt;text()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;erl_scan&lt;/code&gt; module can be used for inspecting annotations in tokens.</source>
          <target state="translated">&lt;code&gt;erl_scan&lt;/code&gt; モジュールの関数 &lt;code&gt;&lt;a href=&quot;erl_scan#column-1&quot;&gt;column()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;erl_scan#end_location-1&quot;&gt;end_location()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;erl_scan#line-1&quot;&gt;line()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;erl_scan#location-1&quot;&gt;location()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;erl_scan#text-1&quot;&gt;text()&lt;/a&gt;&lt;/code&gt; を使用して、トークン内の注釈を検査できます。</target>
        </trans-unit>
        <trans-unit id="8f1eb93f5b31a056ece4e165a375a5884952e8c6" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;&lt;a href=&quot;mnesia#add_table_copy-3&quot;&gt;mnesia:add_table_copy/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mnesia#del_table_copy-2&quot;&gt;mnesia:del_table_copy/2&lt;/a&gt;&lt;/code&gt; can be used to add and delete replicas of the schema table. Adding a node to the list of nodes where the schema is replicated affects the following:</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#add_table_copy-3&quot;&gt;mnesia:add_table_copy/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;mnesia#del_table_copy-2&quot;&gt;mnesia:del_table_copy/2&lt;/a&gt;&lt;/code&gt; を使用して、スキーマテーブルのレプリカを追加および削除できます。スキーマが複製されるノードのリストにノードを追加すると、次の影響があります。</target>
        </trans-unit>
        <trans-unit id="1886785ff0b77240f1ec57a522b97c8411209098" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;&lt;a href=&quot;mnesia#select-4&quot;&gt;select/4&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mnesia#select-2&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; are used to get a limited number of results, where &lt;code&gt;Continuation&lt;/code&gt; gets the next chunk of results. &lt;code&gt;Mnesia&lt;/code&gt; uses &lt;code&gt;NObjects&lt;/code&gt; as a recommendation only. Thus, more or less results than specified with &lt;code&gt;NObjects&lt;/code&gt; can be returned in the result list, even the empty list can be returned even if there are more results to collect.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#select-4&quot;&gt;select/4&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;mnesia#select-2&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; は限られた数の結果を取得するために使用され、 &lt;code&gt;Continuation&lt;/code&gt; は次の結果のチャンクを取得します。 &lt;code&gt;Mnesia&lt;/code&gt; は &lt;code&gt;NObjects&lt;/code&gt; を推奨としてのみ使用します。したがって、 &lt;code&gt;NObjects&lt;/code&gt; で指定したよりも多いまたは少ない結果を結果リストで返すことができます。収集する結果がさらにある場合でも、空のリストを返すことができます。</target>
        </trans-unit>
        <trans-unit id="902b2335f36e3393b5572f1006845ff1177285c7" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;&lt;a href=&quot;mnesia#system_info-1&quot;&gt;mnesia:system_info(master_node_tables)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info(Tab, master_nodes)&lt;/a&gt;&lt;/code&gt; can be used to obtain information about the potential master nodes.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#system_info-1&quot;&gt;mnesia:system_info(master_node_tables)&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info(Tab, master_nodes)&lt;/a&gt;&lt;/code&gt; を使用して、潜在的なマスターノードに関する情報を取得できます。</target>
        </trans-unit>
        <trans-unit id="d7162f97290d0f08d1d6fce536552b6112fd005e" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;add_one&lt;/code&gt; can now be expressed in terms of &lt;code&gt;map&lt;/code&gt; as follows:</source>
          <target state="translated">関数 &lt;code&gt;double&lt;/code&gt; および &lt;code&gt;add_one&lt;/code&gt; は、次のように &lt;code&gt;map&lt;/code&gt; に関して表現できます。</target>
        </trans-unit>
        <trans-unit id="222156c9e6dd9e3d178176d3e89b557b47249290" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;add_one&lt;/code&gt; have a similar structure. This can be used by writing a function &lt;code&gt;map&lt;/code&gt; that expresses this similarity:</source>
          <target state="translated">関数 &lt;code&gt;double&lt;/code&gt; および &lt;code&gt;add_one&lt;/code&gt; の構造は類似しています。これは、この類似性を表す関数 &lt;code&gt;map&lt;/code&gt; を記述することで使用できます。</target>
        </trans-unit>
        <trans-unit id="648f7da232361f38f861a299d3f2d536886a367c" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;first/[1,2]&lt;/code&gt;, &lt;code&gt;last/[1,2]&lt;/code&gt;, &lt;code&gt;next/[1,2]&lt;/code&gt;, &lt;code&gt;prev[1,2]&lt;/code&gt; and &lt;code&gt;select/[3,4]&lt;/code&gt; assumes there is a result set associated with the connection to work on. Calling the function &lt;code&gt;select_count/[2,3]&lt;/code&gt; associates such a result set with the connection. Calling select_count again will remove the current result set association and create a new one. Calling a function which dose not operate on an associated result sets, such as &lt;code&gt;sql_query/[2,3]&lt;/code&gt;, will remove the current result set association.</source>
          <target state="translated">関数 &lt;code&gt;first/[1,2]&lt;/code&gt; 、 &lt;code&gt;last/[1,2]&lt;/code&gt; 、 &lt;code&gt;next/[1,2]&lt;/code&gt; 、 &lt;code&gt;prev[1,2]&lt;/code&gt; および &lt;code&gt;select/[3,4]&lt;/code&gt; は、接続に関連付けられた結果セットがあることを前提としています取り組む。関数 &lt;code&gt;select_count/[2,3]&lt;/code&gt; を呼び出すと、そのような結果セットが接続に関連付けられます。 select_countを再度呼び出すと、現在の結果セットの関連付けが削除され、新しい関連付けが作成されます。 &lt;code&gt;sql_query/[2,3]&lt;/code&gt; などの関連する結果セットを操作しない関数を呼び出すと、現在の結果セットの関連付けが削除されます。</target>
        </trans-unit>
        <trans-unit id="f5fc6fff1054bde43efdc57cd822c6d67516d395" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;get_s&lt;/code&gt; and &lt;code&gt;ei_x_to_new_binary&lt;/code&gt; are utilities that are used to make the code shorter. &lt;code&gt;get_s&lt;/code&gt; duplicates the string and zero-terminates it, as the postgres client library wants that. &lt;code&gt;ei_x_to_new_binary&lt;/code&gt; takes an &lt;code&gt;ei_x_buff&lt;/code&gt; buffer, allocates a binary, and copies the data there. This binary is returned in &lt;code&gt;*rbuf&lt;/code&gt;. (Notice that this binary is freed by the emulator, not by us.)</source>
          <target state="translated">関数 &lt;code&gt;get_s&lt;/code&gt; および &lt;code&gt;ei_x_to_new_binary&lt;/code&gt; は、コードを短くするために使用されるユーティリティです。 &lt;code&gt;get_s&lt;/code&gt; は、postgresクライアントライブラリが要求するように、文字列を複製してゼロで終了します。 &lt;code&gt;ei_x_to_new_binary&lt;/code&gt; は &lt;code&gt;ei_x_buff&lt;/code&gt; バッファを取得し、バイナリを割り当て、そこにデータをコピーします。このバイナリは &lt;code&gt;*rbuf&lt;/code&gt; に返されます。（このバイナリは、私たちではなくエミュレータによって解放されることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="5096e39491b69e094a3f98629aa50fa1108f0a5e" translate="yes" xml:space="preserve">
          <source>The functions above have an optional argument, &lt;code&gt;Options&lt;/code&gt;. It is a list which can contain the following elements:</source>
          <target state="translated">上記の関数には、オプションの引数 &lt;code&gt;Options&lt;/code&gt; があります。次の要素を含むことができるリストです。</target>
        </trans-unit>
        <trans-unit id="4cf9cf212abd94252e34e02e2e21ec1dc4af5994" translate="yes" xml:space="preserve">
          <source>The functions allowed in &lt;code&gt;match_spec&lt;/code&gt; work as follows:</source>
          <target state="translated">&lt;code&gt;match_spec&lt;/code&gt; で許可される関数は次のように機能します。</target>
        </trans-unit>
        <trans-unit id="b49c5e0b193b751df77e5b417fa995fca0d1e1a2" translate="yes" xml:space="preserve">
          <source>The functions allowed only for tracing work as follows:</source>
          <target state="translated">トレースのみに許可された機能は以下のように動作します。</target>
        </trans-unit>
        <trans-unit id="c38557bf4878ec1f68819130f6538837da45503c" translate="yes" xml:space="preserve">
          <source>The functions are also used as input and output for parse transforms, see the &lt;code&gt;compile(3)&lt;/code&gt; module.</source>
          <target state="translated">関数は、解析変換の入力および出力としても使用されます &lt;code&gt;compile(3)&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="b767ef0cfc20ad008772285b7b151d13f3e95f0c" translate="yes" xml:space="preserve">
          <source>The functions are deliberately kept as simple as possible, for readability reasons.</source>
          <target state="translated">読みやすさを考慮して、機能はなるべくシンプルにしています。</target>
        </trans-unit>
        <trans-unit id="45f09a589c0917e05c505ec254a5e8229659ac40" translate="yes" xml:space="preserve">
          <source>The functions are executed sequentially in an initialization process, which then terminates normally and passes control to the user. This means that a &lt;code&gt;-run&lt;/code&gt; call that does not return blocks further processing; to avoid this, use some variant of &lt;code&gt;spawn&lt;/code&gt; in such cases.</source>
          <target state="translated">関数は初期化プロセスで順次実行されます。初期化プロセスは正常に終了し、制御をユーザーに渡します。つまり、返されない &lt;code&gt;-run&lt;/code&gt; 呼び出しは、それ以降の処理をブロックします。これを回避 &lt;code&gt;spawn&lt;/code&gt; は、そのような場合にspawnのバリアントを使用してください。</target>
        </trans-unit>
        <trans-unit id="926aaaf3b21fb32d1bbb6e4c88da0fdf9d06509c" translate="yes" xml:space="preserve">
          <source>The functions are executed sequentially in an initialization process, which then terminates normally and passes control to the user. This means that a &lt;code&gt;-s&lt;/code&gt; call that does not return blocks further processing; to avoid this, use some variant of &lt;code&gt;spawn&lt;/code&gt; in such cases.</source>
          <target state="translated">関数は初期化プロセスで順次実行されます。初期化プロセスは正常に終了し、制御をユーザーに渡します。つまり、返されない &lt;code&gt;-s&lt;/code&gt; 呼び出しは、それ以降の処理をブロックします。これを回避 &lt;code&gt;spawn&lt;/code&gt; は、そのような場合にspawnのバリアントを使用してください。</target>
        </trans-unit>
        <trans-unit id="16b3d921f3dab11c8bd9dcd981b467c9ea9eb69b" translate="yes" xml:space="preserve">
          <source>The functions are kept for backward compatibility, but are not recommended. They will be deprecated in a future release.</source>
          <target state="translated">これらの機能は下位互換性のために保持されていますが、推奨されていません。これらの機能は将来のリリースでは非推奨となります。</target>
        </trans-unit>
        <trans-unit id="e16c3bfea1464fe2701a69fbec438e22d449fa1c" translate="yes" xml:space="preserve">
          <source>The functions can crash for non-valid input strings. For example, the functions expect UTF-8 binaries but not all functions verify that all binaries are encoded correctly.</source>
          <target state="translated">この関数は、入力文字列が正しくない場合にクラッシュする可能性があります。例えば、この関数は UTF-8 バイナリを期待していますが、すべての関数がすべてのバイナリが正しくエンコードされているかどうかを検証しているわけではありません。</target>
        </trans-unit>
        <trans-unit id="dd2b5b372777bf5bb017e0da931269beb671e840" translate="yes" xml:space="preserve">
          <source>The functions for receiving and sending data are combined into a function, pointed out by the driver structure. The data sent into the port is given as arguments, and the replied data is sent with the C-function &lt;code&gt;driver_output&lt;/code&gt;.</source>
          <target state="translated">データを送受信するための関数は、ドライバー構造によって指摘された関数に結合されます。ポートに送信されるデータは引数として与えられ、返されたデータはC関数 &lt;code&gt;driver_output&lt;/code&gt; で送信されます。</target>
        </trans-unit>
        <trans-unit id="ebbfff7f1d8a39c016464e3f5cebc0cf7001e164" translate="yes" xml:space="preserve">
          <source>The functions implemented by this module cover the following use cases:</source>
          <target state="translated">このモジュールで実装されている機能は、以下のユースケースをカバーしています。</target>
        </trans-unit>
        <trans-unit id="c86b667b04bbb8c7ab1bce69786f4f6966eec074" translate="yes" xml:space="preserve">
          <source>The functions in &lt;code&gt;systools&lt;/code&gt; require more information. If they are used, the following keys are mandatory:</source>
          <target state="translated">&lt;code&gt;systools&lt;/code&gt; の関数には、より多くの情報が必要です。これらを使用する場合は、次のキーが必須です。</target>
        </trans-unit>
        <trans-unit id="2c1aa340d685d0c3733736a0ada3b9ea70cc9c9a" translate="yes" xml:space="preserve">
          <source>The functions in the &lt;code&gt;io&lt;/code&gt; module cannot be used, as they can only talk to an Erlang process. Instead, use functions &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#read_line-1&quot;&gt;read_line/1&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#write-2&quot;&gt;write/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;io&lt;/code&gt; モジュールの関数は、Erlangプロセスとのみ通信できるため、使用できません。代わりに、関数 &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#read_line-1&quot;&gt;read_line/1&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#write-2&quot;&gt;write/2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="a25876dba4377f3e108142ac910ecc80fd99f8dd" translate="yes" xml:space="preserve">
          <source>The functions in the &lt;code&gt;timer&lt;/code&gt; module that do not manage timers (such as &lt;code&gt;timer:tc/3&lt;/code&gt; or &lt;code&gt;timer:sleep/1&lt;/code&gt;), do not call the timer-server process and are therefore harmless.</source>
          <target state="translated">&lt;code&gt;timer&lt;/code&gt; 管理しないタイマーモジュールの関数（ &lt;code&gt;timer:tc/3&lt;/code&gt; や &lt;code&gt;timer:sleep/1&lt;/code&gt; など）は、タイマーサーバープロセスを呼び出さないため、害はありません。</target>
        </trans-unit>
        <trans-unit id="bc5c8ab81c744e8799da4f1bbc208d8534384ca8" translate="yes" xml:space="preserve">
          <source>The functions in the module &lt;code&gt;file&lt;/code&gt; usually treat binaries as raw filenames, that is, they are passed &quot;as is&quot; even when the encoding of the binary does not agree with &lt;code&gt;&lt;a href=&quot;#native_name_encoding-0&quot;&gt;native_name_encoding()&lt;/a&gt;&lt;/code&gt;. However, this function expects binaries to be encoded according to the value returned by &lt;code&gt;native_name_encoding()&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;file&lt;/code&gt; 内の関数は通常、バイナリを未加工のファイル名として扱います。つまり、バイナリのエンコーディングが &lt;code&gt;&lt;a href=&quot;#native_name_encoding-0&quot;&gt;native_name_encoding()&lt;/a&gt;&lt;/code&gt; と一致しない場合でも、「そのまま」渡されます。ただし、この関数は、 &lt;code&gt;native_name_encoding()&lt;/code&gt; によって返された値に従ってバイナリがエンコードされることを期待しています。</target>
        </trans-unit>
        <trans-unit id="59fe37bf337f659a6dcf2745738cdc7eba91db8e" translate="yes" xml:space="preserve">
          <source>The functions in this module are invoked automatically by the Erlang compiler. There is no reason to invoke these functions separately unless you have written your own Erlang compiler.</source>
          <target state="translated">このモジュールの関数はErlangコンパイラによって自動的に呼び出されます。自分でErlangコンパイラを書かない限り、これらの関数を個別に呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="83d017ac05dd2cacc80880c2e28d8a757b9c1403" translate="yes" xml:space="preserve">
          <source>The functions in this module are operating system-specific. Careless use of these functions results in programs that will only run on a specific platform. On the other hand, with careful use, these functions can be of help in enabling a program to run on most platforms.</source>
          <target state="translated">このモジュールの関数は、オペレーティング・システム固有のものです。これらの関数を不注意に使用すると、特定のプラットフォームでしか動作しないプログラムになってしまいます。一方で、これらの関数を慎重に使用することで、ほとんどのプラットフォームでプログラムを実行できるようにするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="0090b523e8b96e6009643e2f865f32e534e6e35f" translate="yes" xml:space="preserve">
          <source>The functions in this module are used to generate aesthetically attractive representations of abstract forms, which are suitable for printing. All functions return (possibly deep) lists of characters and generate an error if the form is wrong.</source>
          <target state="translated">このモジュールの関数は、印刷に適した抽象的なフォームの美的に魅力的な表現を生成するために使用されます。すべての関数は(おそらく深い)文字のリストを返し、フォームが間違っている場合はエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="6379807804d510c1358bcad10b50d619a7c10261" translate="yes" xml:space="preserve">
          <source>The functions in this module exits with reason &lt;code&gt;badarg&lt;/code&gt; if any argument has the wrong format, if the table identifier is invalid, or if the operation is denied because of table access rights (&lt;code&gt;&lt;a href=&quot;#protected&quot;&gt;protected&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#private&quot;&gt;private&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">このモジュールの関数は、引数の形式が間違っている場合、テーブル識別子が無効である場合、またはテーブルアクセス権（ &lt;code&gt;&lt;a href=&quot;#protected&quot;&gt;protected&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#private&quot;&gt;private&lt;/a&gt;&lt;/code&gt; ）のために操作が拒否された場合、理由 &lt;code&gt;badarg&lt;/code&gt; で終了します。</target>
        </trans-unit>
        <trans-unit id="407acf4eb1d452f08e4cd9870e0fbf1bd80ec28b" translate="yes" xml:space="preserve">
          <source>The functions make references to a debug structure. The debug structure is a list of &lt;code&gt;dbg_opt()&lt;/code&gt;, which is an internal data type used by function &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt;. No debugging is performed if it is an empty list.</source>
          <target state="translated">関数は、デバッグ構造を参照します。デバッグ構造は &lt;code&gt;dbg_opt()&lt;/code&gt; のリストです。これは、関数 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; によって使用される内部データ型です。空のリストの場合、デバッグは実行されません。</target>
        </trans-unit>
        <trans-unit id="95e0480086d8c1cfed57c30b1e75f554c1263ba9" translate="yes" xml:space="preserve">
          <source>The functions of this module exit the process with a &lt;code&gt;badarg&lt;/code&gt;, &lt;code&gt;bad_function&lt;/code&gt;, or &lt;code&gt;type_mismatch&lt;/code&gt; message when given badly formed arguments or sets the types of which are not compatible.</source>
          <target state="translated">このモジュールの関数は、 &lt;code&gt;bad_function&lt;/code&gt; 形式の引数が指定された場合、または互換性のないタイプを設定した場合、 &lt;code&gt;badarg&lt;/code&gt; 、bad_function、または &lt;code&gt;type_mismatch&lt;/code&gt; メッセージでプロセスを終了します。</target>
        </trans-unit>
        <trans-unit id="8bcd836e7cff1f3fb60829e13f437e52a77a3d68" translate="yes" xml:space="preserve">
          <source>The functions returns &lt;code&gt;{module,Module}&lt;/code&gt; if the module was interpreted, otherwise &lt;code&gt;error&lt;/code&gt; is returned.</source>
          <target state="translated">関数は、モジュールが解釈された場合は &lt;code&gt;{module,Module}&lt;/code&gt; 返し、それ以外の場合は &lt;code&gt;error&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d8c5ba17f384a51d8defb699da21623e5d4d6f29" translate="yes" xml:space="preserve">
          <source>The functions with explicit state never use the process dictionary.</source>
          <target state="translated">状態が明示的な関数は、プロセス辞書を使用しません。</target>
        </trans-unit>
        <trans-unit id="1dee609877073beca17837c5cc489fd792ebd7be" translate="yes" xml:space="preserve">
          <source>The functions with implicit state use the process dictionary variable &lt;code&gt;rand_seed&lt;/code&gt; to remember the current state.</source>
          <target state="translated">暗黙的な状態を持つ関数は、プロセスディクショナリ変数 &lt;code&gt;rand_seed&lt;/code&gt; を使用して現在の状態を記憶します。</target>
        </trans-unit>
        <trans-unit id="3598aafeb02f3f06b45b8fa49e0ea66cd9f4c8c2" translate="yes" xml:space="preserve">
          <source>The fundamental difference between this API and &lt;code&gt;connect/*&lt;/code&gt; is that the return value is that of the underlying OS &lt;code&gt;connect(2)&lt;/code&gt; system call. If &lt;code&gt;ok&lt;/code&gt; is returned, the result of the association establishment is received by the calling process as an &lt;code&gt;&lt;a href=&quot;#record-sctp_assoc_change&quot;&gt;#sctp_assoc_change{}&lt;/a&gt;&lt;/code&gt; event. The calling process must be prepared to receive this, or poll for it using &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt;, depending on the value of the active option.</source>
          <target state="translated">このAPIと &lt;code&gt;connect/*&lt;/code&gt; の根本的な違いは、戻り値が、基盤となるOSの &lt;code&gt;connect(2)&lt;/code&gt; システムコールの戻り値であることです。 &lt;code&gt;ok&lt;/code&gt; が返された場合、関連付けの確立の結果は、 &lt;code&gt;&lt;a href=&quot;#record-sctp_assoc_change&quot;&gt;#sctp_assoc_change{}&lt;/a&gt;&lt;/code&gt; イベントとして呼び出しプロセスによって受信されます。アクティブなオプションの値に応じて、呼び出しプロセスはこれを受信する準備をするか、 &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt; を使用してポーリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="988b6a9c1d9ecd81d685b26b761fdee058fdc894" translate="yes" xml:space="preserve">
          <source>The gain is twofold:</source>
          <target state="translated">得るものは2つ。</target>
        </trans-unit>
        <trans-unit id="bcf404e4d234a44441e22cb6261963b4fedd0d7d" translate="yes" xml:space="preserve">
          <source>The gain of using selective and exclusive decode instead of a complete decode is greater the bigger the value and the less deep in the structure you have to decode.</source>
          <target state="translated">完全なデコードではなく、選択的かつ排他的なデコードを使用することで得られる利益は、値が大きいほど大きく、デコードしなければならない構造の深さが浅いほど大きくなります。</target>
        </trans-unit>
        <trans-unit id="fe50c99cca6dabfaacf57c3d4d8ac0b0024f73ef" translate="yes" xml:space="preserve">
          <source>The garbage collector can also shrink the heap if it is much larger than the amount of data stored on it; setting the minimum heap size prevents that.</source>
          <target state="translated">ガベージコレクタは、ヒープに保存されているデータの量よりもはるかに大きい場合、ヒープを縮小することもできます;最小ヒープサイズを設定することでそれを防ぎます。</target>
        </trans-unit>
        <trans-unit id="977899977ecd5bafb69cd4c8bac5e829e78b713f" translate="yes" xml:space="preserve">
          <source>The general events are as follows:</source>
          <target state="translated">一般的なイベントは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0a45457862e4fc4686a75b757e6f11948bde74a0" translate="yes" xml:space="preserve">
          <source>The general form of bit strings is &lt;code&gt;&amp;lt;&amp;lt;_:M, _:_*N&amp;gt;&amp;gt;&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; are positive integers. It denotes a bit string that is &lt;code&gt;M + (k*N)&lt;/code&gt; bits long (that is, a bit string that starts with &lt;code&gt;M&lt;/code&gt; bits and continues with &lt;code&gt;k&lt;/code&gt; segments of &lt;code&gt;N&lt;/code&gt; bits each, where &lt;code&gt;k&lt;/code&gt; is also a positive integer). The notations &lt;code&gt;&amp;lt;&amp;lt;_:_*N&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;_:M&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; are convenient shorthands for the cases that &lt;code&gt;M&lt;/code&gt; or &lt;code&gt;N&lt;/code&gt;, or both, are zero.</source>
          <target state="translated">ビット文字列の一般的な形式は &lt;code&gt;&amp;lt;&amp;lt;_:M, _:_*N&amp;gt;&amp;gt;&lt;/code&gt; で、 &lt;code&gt;M&lt;/code&gt; と &lt;code&gt;N&lt;/code&gt; は正の整数です。これは、 &lt;code&gt;M + (k*N)&lt;/code&gt; ビット長のビット文字列を示します（つまり、 &lt;code&gt;M&lt;/code&gt; ビットで始まり、それぞれが &lt;code&gt;N&lt;/code&gt; ビットの &lt;code&gt;k&lt;/code&gt; セグメントで継続するビット文字列です。ここで、 &lt;code&gt;k&lt;/code&gt; も正の整数です）。表記 &lt;code&gt;&amp;lt;&amp;lt;_:_*N&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;_:M&amp;gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; は、 &lt;code&gt;M&lt;/code&gt; または &lt;code&gt;N&lt;/code&gt; 、あるいはその両方がゼロの場合の便利な省略表現です。</target>
        </trans-unit>
        <trans-unit id="15c107121f9e396eb9a5cd9589f0c40d15c3390b" translate="yes" xml:space="preserve">
          <source>The general form of map types is &lt;code&gt;#{AssociationList}&lt;/code&gt;. The key types in &lt;code&gt;AssociationList&lt;/code&gt; are allowed to overlap, and if they do, the leftmost association takes precedence. A map association has a key in &lt;code&gt;AssociationList&lt;/code&gt; if it belongs to this type. &lt;code&gt;AssociationList&lt;/code&gt; can contain both mandatory and optional association types. If an association type is mandatory, an association with that type is to be present. In the case of an optional association type it is not required for the key type to be present.</source>
          <target state="translated">マップタイプの一般的な形式は &lt;code&gt;#{AssociationList}&lt;/code&gt; です。 &lt;code&gt;AssociationList&lt;/code&gt; のキータイプは重複することが許可されており、重複する場合は、左端の関連付けが優先されます。マップの関連付けは、このタイプに属している場合、 &lt;code&gt;AssociationList&lt;/code&gt; にキーがあります。 &lt;code&gt;AssociationList&lt;/code&gt; には、必須とオプションの両方の関連付けタイプを含めることができます。関連タイプが必須の場合、そのタイプとの関連が存在します。オプションのアソシエーションタイプの場合、キータイプが存在する必要はありません。</target>
        </trans-unit>
        <trans-unit id="aa26e067e726a95a6d2e3dc44ecd0d512cccd537" translate="yes" xml:space="preserve">
          <source>The general format of a control sequence is &lt;code&gt;~F.P.PadModC&lt;/code&gt;.</source>
          <target state="translated">制御シーケンスの一般的な形式は &lt;code&gt;~F.P.PadModC&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="48292e72b50e679a5bd265d2003a203029b9008b" translate="yes" xml:space="preserve">
          <source>The general repetition quantifier specifies a minimum and maximum number of permitted matches, by giving the two numbers in curly brackets (braces), separated by a comma. The numbers must be &amp;lt; 65536, and the first must be less than or equal to the second. For example, the following matches &quot;zz&quot;, &quot;zzz&quot;, or &quot;zzzz&quot;:</source>
          <target state="translated">一般的な繰り返し量指定子は、コンマで区切られた2つの数値を中括弧（中括弧）で囲んで、許可される一致の最小数と最大数を指定します。数値は65536未満でなければならず、最初の数値は2番目の数値以下でなければなりません。たとえば、次は「zz」、「zzz」、または「zzzz」に一致します。</target>
        </trans-unit>
        <trans-unit id="e8ceed6edc3f642d5944e6d5d983920ce28f447b" translate="yes" xml:space="preserve">
          <source>The general verbosity level is not associated with any particular category. This level sets the threshold for the standard I/O printouts, uncategorized &lt;code&gt;ct:log/print/pal&lt;/code&gt; printouts, and printouts for categories with undefined verbosity level.</source>
          <target state="translated">一般的な詳細レベルは、特定のカテゴリに関連付けられていません。このレベルは、標準I / Oプリントアウト、未分類の &lt;code&gt;ct:log/print/pal&lt;/code&gt; プリントアウト、および詳細レベルが未定義のカテゴリのプリントアウトのしきい値を設定します。</target>
        </trans-unit>
        <trans-unit id="15f1ac9edee948d6f4ef43892cbf77bf286d9bf4" translate="yes" xml:space="preserve">
          <source>The generated .script (and .boot) file uses the environment variable &lt;code&gt;$RELTOOL_EXT_LIB&lt;/code&gt; as prefix for the paths to all applications. The &lt;code&gt;-boot_var&lt;/code&gt; option to &lt;code&gt;erl&lt;/code&gt; can be used for specifying the value of this variable, typically &lt;code&gt;-boot_var RELTOOL_EXT_LIB &amp;lt;target-dir&amp;gt;/lib&lt;/code&gt;.</source>
          <target state="translated">生成された.script（および.boot）ファイルは、環境変数 &lt;code&gt;$RELTOOL_EXT_LIB&lt;/code&gt; をすべてのアプリケーションへのパスのプレフィックスとして使用します。 &lt;code&gt;erl&lt;/code&gt; の &lt;code&gt;-boot_var&lt;/code&gt; オプションを使用して、この変数の値を指定できます。通常は &lt;code&gt;-boot_var RELTOOL_EXT_LIB &amp;lt;target-dir&amp;gt;/lib&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0c99eee4f85e52f6340a9da42977768f1eebdd2c" translate="yes" xml:space="preserve">
          <source>The generated Erlang files are placed in the current directory or in the directory specified with option &lt;code&gt;{outdir,Dir}&lt;/code&gt;.</source>
          <target state="translated">生成されたErlangファイルは、現在のディレクトリまたはオプション &lt;code&gt;{outdir,Dir}&lt;/code&gt; 指定されたディレクトリに配置されます。</target>
        </trans-unit>
        <trans-unit id="c577f200898187404181ae175171d50fcb091818" translate="yes" xml:space="preserve">
          <source>The generated Erlang module always gets the same name as the &lt;code&gt;ASN.1&lt;/code&gt; module. Therefore, only one encoding rule per &lt;code&gt;ASN.1&lt;/code&gt; module can be used at runtime.</source>
          <target state="translated">生成されたErlangモジュールは、常に &lt;code&gt;ASN.1&lt;/code&gt; モジュールと同じ名前になります。したがって、実行時に使用できる &lt;code&gt;ASN.1&lt;/code&gt; モジュールごとのエンコーディングルールは1つだけです。</target>
        </trans-unit>
        <trans-unit id="6fc9a629a78265b39c4931fa85c066a035d12976" translate="yes" xml:space="preserve">
          <source>The generated conversion functions are named &lt;code&gt;name2num_EnumTypeName/1&lt;/code&gt; and &lt;code&gt;num2name_EnumTypeName/1&lt;/code&gt;.</source>
          <target state="translated">生成された変換関数の名前は &lt;code&gt;name2num_EnumTypeName/1&lt;/code&gt; および &lt;code&gt;num2name_EnumTypeName/1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="70590dbda20778e7131e69e54b148688eb50a6db" translate="yes" xml:space="preserve">
          <source>The generated numbers are on the form N * 2.0^(-53), that is; equally spaced in the interval.</source>
          <target state="translated">生成された数値は、N*2.0^(-53)の形をしています。</target>
        </trans-unit>
        <trans-unit id="d46f1c06452ab11c5b4b6ecb5baaa5c431f8b627" translate="yes" xml:space="preserve">
          <source>The generated numbers from this function has got better granularity for small numbers than the regular &lt;code&gt;&lt;a href=&quot;#uniform-0&quot;&gt;uniform/0&lt;/a&gt;&lt;/code&gt; because all bits in the mantissa are random. This property, in combination with the fact that exactly zero is never returned is useful for algoritms doing for example &lt;code&gt;1.0 / X&lt;/code&gt; or &lt;code&gt;math:log(X)&lt;/code&gt;.</source>
          <target state="translated">この関数から生成された数値は、仮数のすべてのビットがランダムであるため、通常の &lt;code&gt;&lt;a href=&quot;#uniform-0&quot;&gt;uniform/0&lt;/a&gt;&lt;/code&gt; よりも小さい数値の方が粒度が高くなっています。このプロパティは、正確にゼロが返されることは決してないという事実と組み合わせて、たとえば &lt;code&gt;1.0 / X&lt;/code&gt; や &lt;code&gt;math:log(X)&lt;/code&gt; などを行うアルゴリズムに役立ちます。</target>
        </trans-unit>
        <trans-unit id="73171ef35be5bd8ba621019aa17e69f855a0576a" translate="yes" xml:space="preserve">
          <source>The generated numbers from this function has got better granularity for small numbers than the regular &lt;code&gt;&lt;a href=&quot;#uniform_s-1&quot;&gt;uniform_s/1&lt;/a&gt;&lt;/code&gt; because all bits in the mantissa are random. This property, in combination with the fact that exactly zero is never returned is useful for algoritms doing for example &lt;code&gt;1.0 / X&lt;/code&gt; or &lt;code&gt;math:log(X)&lt;/code&gt;.</source>
          <target state="translated">この関数から生成された数値は、仮数のすべてのビットがランダムであるため、通常の &lt;code&gt;&lt;a href=&quot;#uniform_s-1&quot;&gt;uniform_s/1&lt;/a&gt;&lt;/code&gt; よりも小さい数値の方が粒度が高くなっています。このプロパティは、正確にゼロが返されることは決してないという事実と組み合わせて、たとえば &lt;code&gt;1.0 / X&lt;/code&gt; や &lt;code&gt;math:log(X)&lt;/code&gt; などを行うアルゴリズムに役立ちます。</target>
        </trans-unit>
        <trans-unit id="9601b63aa3ab5a33ac60d263c74f85eedd8bb618" translate="yes" xml:space="preserve">
          <source>The generation of default functions for tables works for tables which use the &lt;code&gt;RowStatus&lt;/code&gt; textual convention from SNMPv2, defined in STANDARD-MIB and SNMPv2-TC.</source>
          <target state="translated">テーブルのデフォルト関数の生成は、STANDARD-MIBおよびSNMPv2-TCで定義されているSNMPv2の &lt;code&gt;RowStatus&lt;/code&gt; テキスト表記法を使用するテーブルで機能します。</target>
        </trans-unit>
        <trans-unit id="a98f897827fbccc29809d0ff98a0c6185bd547f8" translate="yes" xml:space="preserve">
          <source>The generator function &lt;code&gt;GenFun&lt;/code&gt; is called to produce a test set.</source>
          <target state="translated">ジェネレータ関数 &lt;code&gt;GenFun&lt;/code&gt; が呼び出され、テストセットが生成されます。</target>
        </trans-unit>
        <trans-unit id="1f65b0f29d2eaf723597fb4ded6e5f61662cb2a0" translate="yes" xml:space="preserve">
          <source>The generator now contains unbound variables and the test has been moved into the filter.</source>
          <target state="translated">ジェネレータには束縛されていない変数が含まれるようになり、テストはフィルタに移動されました。</target>
        </trans-unit>
        <trans-unit id="df67d175f37e161fc283f4c21214ba8ff79c07f4" translate="yes" xml:space="preserve">
          <source>The generic URI syntax consists of a hierarchical sequence of components referred to as the scheme, authority, path, query, and fragment:</source>
          <target state="translated">一般的なURI構文は、スキーム、権限、パス、クエリ、フラグメントと呼ばれるコンポーネントの階層的なシーケンスで構成されています。</target>
        </trans-unit>
        <trans-unit id="edcc58c1f9412f2d84d5eca2fbc303265ca32bc7" translate="yes" xml:space="preserve">
          <source>The generic encode and decode functions can be called as follows:</source>
          <target state="translated">一般的なエンコード関数とデコード関数は、以下のように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="a6a0f25dc460ac798f2b85a01f268cff421ca237" translate="yes" xml:space="preserve">
          <source>The generic full name of the file is thus:</source>
          <target state="translated">ファイルの一般的なフルネームはこのようになります。</target>
        </trans-unit>
        <trans-unit id="953d4c56983eabeb70f721a6678334568e77d77a" translate="yes" xml:space="preserve">
          <source>The given BEAM file (with or without the &lt;code&gt;.beam&lt;/code&gt; extension) or the file found by calling &lt;code&gt;code:which(Module)&lt;/code&gt; is checked for calls to &lt;code&gt;&lt;a href=&quot;#deprecated_function&quot;&gt;deprecated functions&lt;/a&gt;&lt;/code&gt;, calls to &lt;code&gt;&lt;a href=&quot;#undefined_function&quot;&gt;undefined functions&lt;/a&gt;&lt;/code&gt;, and for unused local functions. The code path is used as &lt;code&gt;&lt;a href=&quot;#library_path&quot;&gt;library path&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定されたBEAMファイル（ &lt;code&gt;.beam&lt;/code&gt; 拡張子の有無にかかわらず）または &lt;code&gt;code:which(Module)&lt;/code&gt; を呼び出して見つかったファイルは、 &lt;code&gt;&lt;a href=&quot;#deprecated_function&quot;&gt;deprecated functions&lt;/a&gt;&lt;/code&gt; 呼び出し、 &lt;code&gt;&lt;a href=&quot;#undefined_function&quot;&gt;undefined functions&lt;/a&gt;&lt;/code&gt; 呼び出し、および未使用のローカル関数についてチェックされます。コードパスは &lt;code&gt;&lt;a href=&quot;#library_path&quot;&gt;library path&lt;/a&gt;&lt;/code&gt; として使用されます。</target>
        </trans-unit>
        <trans-unit id="e66a4ab696e12e0f12a8dd69e7f5bb33fedf0273" translate="yes" xml:space="preserve">
          <source>The global name server also performs the critical task of continuously monitoring changes in node configuration. If a node that runs a globally registered process goes down, the name is globally unregistered. To this end, the global name server subscribes to &lt;code&gt;nodeup&lt;/code&gt; and &lt;code&gt;nodedown&lt;/code&gt; messages sent from module &lt;code&gt;net_kernel&lt;/code&gt;. Relevant Kernel application variables in this context are &lt;code&gt;net_setuptime&lt;/code&gt;, &lt;code&gt;net_ticktime&lt;/code&gt;, and &lt;code&gt;dist_auto_connect&lt;/code&gt;. See also &lt;code&gt;kernel(6)&lt;/code&gt;.</source>
          <target state="translated">グローバルネームサーバーは、ノード構成の変更を継続的に監視するという重要なタスクも実行します。グローバルに登録されたプロセスを実行するノードがダウンした場合、名前はグローバルに登録解除されます。このために、グローバルネームサーバーは、モジュール &lt;code&gt;net_kernel&lt;/code&gt; から送信された &lt;code&gt;nodeup&lt;/code&gt; および &lt;code&gt;nodedown&lt;/code&gt; メッセージをサブスクライブします。このコンテキストで関連するカーネルアプリケーション変数は、 &lt;code&gt;net_setuptime&lt;/code&gt; 、 &lt;code&gt;net_ticktime&lt;/code&gt; 、および &lt;code&gt;dist_auto_connect&lt;/code&gt; です。 &lt;code&gt;kernel(6)&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="8f36454620d0c52943c78b70c7b2d67415456c6b" translate="yes" xml:space="preserve">
          <source>The global name server keeps track of all processes sharing the same lock, that is, if two processes set the same lock, both processes must delete the lock.</source>
          <target state="translated">グローバルネームサーバは、同じロックを共有しているすべてのプロセスを追跡します。</target>
        </trans-unit>
        <trans-unit id="46c28148b1520b8f7f30b407f534c21425582a89" translate="yes" xml:space="preserve">
          <source>The global state of the scanner, represented by the #xmerl_scanner{} record.</source>
          <target state="translated">xmerl_scanner{}レコードで表されるスキャナのグローバルな状態。</target>
        </trans-unit>
        <trans-unit id="162600e8983ca6d0de97e2e5c21045cca4665270" translate="yes" xml:space="preserve">
          <source>The global state of the validator. It is representated by the &lt;code&gt;#xsd_state{}&lt;/code&gt; record.</source>
          <target state="translated">バリデーターのグローバルな状態。 &lt;code&gt;#xsd_state{}&lt;/code&gt; レコードによって表されます。</target>
        </trans-unit>
        <trans-unit id="1531d8568b38b4970f1055504bbf9c235ba48c8c" translate="yes" xml:space="preserve">
          <source>The grammar starts with an optional &lt;code&gt;header&lt;/code&gt; section. The header is put first in the generated file, before the module declaration. The purpose of the header is to provide a means to make the documentation generated by EDoc look nicer. Each header line should be enclosed in double quotes, and newlines will be inserted between the lines. For example:</source>
          <target state="translated">文法は、オプションの &lt;code&gt;header&lt;/code&gt; セクションで始まります。ヘッダーは、モジュール宣言の前に、生成されたファイルの最初に配置されます。ヘッダーの目的は、EDocによって生成されたドキュメントをより見栄えよくするための手段を提供することです。各ヘッダー行は二重引用符で囲む必要があり、改行は行の間に挿入されます。例えば：</target>
        </trans-unit>
        <trans-unit id="95e4974bf09526a8ed59c2c706017450837fabc7" translate="yes" xml:space="preserve">
          <source>The granularity of both measurement types can be high. Therefore, ensure that each individual measurement lasts for at least several seconds.</source>
          <target state="translated">両方の測定タイプの粒度は高くなる可能性があります。そのため、個々の測定が少なくとも数秒間持続することを確認してください。</target>
        </trans-unit>
        <trans-unit id="db89aebec1f27ef7ea7b0173203949ea669de4bc" translate="yes" xml:space="preserve">
          <source>The graphical library &lt;code&gt;wx&lt;/code&gt; has extensive support for Unicode text.</source>
          <target state="translated">グラフィカルライブラリ &lt;code&gt;wx&lt;/code&gt; は、Unicodeテキストを幅広くサポートしています。</target>
        </trans-unit>
        <trans-unit id="3809a7766a11eb66968ebebc3b973ccfe307fc2b" translate="yes" xml:space="preserve">
          <source>The group information properties override those set with the suite information function, and can in turn be overridden by test case information properties. For a list of valid information properties and more general information, see the &lt;code&gt;&lt;a href=&quot;#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">グループ情報プロパティは、スイート情報関数で設定されたプロパティをオーバーライドし、テストケース情報プロパティによってオーバーライドできます。有効な情報プロパティのリストとより一般的な情報については、 &lt;code&gt;&lt;a href=&quot;#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="a1851720cf81d08f4729a487b12a49fba130b63d" translate="yes" xml:space="preserve">
          <source>The group leader should be rarely changed in applications with a supervision tree, because OTP assumes the group leader of their processes is their application master.</source>
          <target state="translated">OTPはプロセスのグループリーダをアプリケーションマスタと想定しているため、監督ツリーを持つアプリケーションでは、グループリーダを変更することはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="e52640716213a6b8b724c7b3e51f40080bcd9da2" translate="yes" xml:space="preserve">
          <source>The group path specification does not necessarily have to include &lt;strong&gt;all&lt;/strong&gt; groups in the path to the terminating group. &lt;code&gt;Common Test&lt;/code&gt; searches for all matching paths if an incomplete group path is specified.</source>
          <target state="translated">グループパスの指定には、必ずしも終了グループへのパスに&lt;strong&gt;すべての&lt;/strong&gt;グループを含める必要はありません。 &lt;code&gt;Common Test&lt;/code&gt; は、不完全なグループパスが指定されている場合、一致するすべてのパスを検索します。</target>
        </trans-unit>
        <trans-unit id="6fc0b568a02963a296071a7bbdb0400eec8c4cbb" translate="yes" xml:space="preserve">
          <source>The group specification feature, as presented in this section, can also be used in &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; (with some extra features added).</source>
          <target state="translated">このセクションで説明するグループ仕様機能は、 &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; でも使用できます（いくつかの追加機能が追加されています）。</target>
        </trans-unit>
        <trans-unit id="75d39fc54f161038ac9929455075c4ce189bfbf6" translate="yes" xml:space="preserve">
          <source>The groups are given explicitly in this list. There may be several elements with the same &lt;code&gt;Size&lt;/code&gt;. In such a case, the server will choose one randomly in the negotiated Size.</source>
          <target state="translated">グループはこのリストで明示的に示されています。同じ &lt;code&gt;Size&lt;/code&gt; 要素が複数ある場合があります。このような場合、サーバーはネゴシエートされたサイズからランダムに1つを選択します。</target>
        </trans-unit>
        <trans-unit id="57c1aab7095657e5f03ad172fdff464c6e0393b1" translate="yes" xml:space="preserve">
          <source>The guard BIFs: &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;hd&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;round&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;tl&lt;/code&gt;, &lt;code&gt;trunc&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt;</source>
          <target state="translated">ガードBIF： &lt;code&gt;abs&lt;/code&gt; 、 &lt;code&gt;element&lt;/code&gt; 、 &lt;code&gt;hd&lt;/code&gt; 、 &lt;code&gt;length&lt;/code&gt; 、 &lt;code&gt;node&lt;/code&gt; 、 &lt;code&gt;round&lt;/code&gt; 、 &lt;code&gt;size&lt;/code&gt; 、 &lt;code&gt;tl&lt;/code&gt; 、 &lt;code&gt;trunc&lt;/code&gt; 、 &lt;code&gt;self&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf11284c55c81df64e31546d61edba51bacfcf93" translate="yes" xml:space="preserve">
          <source>The guard section can contain any guard expression of Erlang. The following is a list of BIFs and expressions:</source>
          <target state="translated">ガードセクションはErlangの任意のガード式を含むことができます。以下はBIFと式のリストです。</target>
        </trans-unit>
        <trans-unit id="08f011ebed41a7bf74303ee2b30d0e5329b2ea66" translate="yes" xml:space="preserve">
          <source>The guard sequence, if any, is true.</source>
          <target state="translated">ガードシーケンスがあれば、それが真である。</target>
        </trans-unit>
        <trans-unit id="49c4b028972dd181f72352fd5792e1cbd70780a8" translate="yes" xml:space="preserve">
          <source>The handler has an overload protection mechanism that keeps the handler process and the Kernel application alive during high loads of log events. How overload protection works, and how to configure it, is described in the &lt;code&gt;&lt;a href=&quot;logger_chapter#overload_protection&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ハンドラーには、ログイベントの負荷が高い間、ハンドラープロセスとカーネルアプリケーションを存続させる過負荷保護メカニズムがあります。過負荷保護がどのように機能するか、およびそれを構成する方法については、「 &lt;code&gt;&lt;a href=&quot;logger_chapter#overload_protection&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 説明されています。</target>
        </trans-unit>
        <trans-unit id="2de57b137d6629cde5167564ce3d26dcfae749ef" translate="yes" xml:space="preserve">
          <source>The handler identity is associated with the &lt;code&gt;id&lt;/code&gt; key in &lt;code&gt;Config1&lt;/code&gt;.</source>
          <target state="translated">ハンドラーIDは &lt;code&gt;Config1&lt;/code&gt; の &lt;code&gt;id&lt;/code&gt; キーに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="4eeb6be906051436af44ca3913114022b11b4c8a" translate="yes" xml:space="preserve">
          <source>The handler identity is associated with the &lt;code&gt;id&lt;/code&gt; key in &lt;code&gt;Config&lt;/code&gt;.</source>
          <target state="translated">ハンドラーIDは &lt;code&gt;Config&lt;/code&gt; の &lt;code&gt;id&lt;/code&gt; キーに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="88387fc69eaf6d2117329bee1a573a3818611863" translate="yes" xml:space="preserve">
          <source>The handler is not overload protected.</source>
          <target state="translated">ハンドラはオーバーロード保護されていません。</target>
        </trans-unit>
        <trans-unit id="d7cc7f26c0b9fef31e9d9003214e5eb8f80f6985" translate="yes" xml:space="preserve">
          <source>The handler must log the event.</source>
          <target state="translated">ハンドラはイベントをログに記録する必要があります。</target>
        </trans-unit>
        <trans-unit id="91c3bfd8524a78feb62740d6ae1b2a4f89bcfb08" translate="yes" xml:space="preserve">
          <source>The handler process keeps track of the length of its message queue and takes some form of action when the current length exceeds a configurable threshold. The purpose is to keep the handler in, or to as quickly as possible get the handler into, a state where it can keep up with the pace of incoming log events. The memory use of the handler must never grow larger and larger, since that will eventually cause the handler to crash. These three thresholds, with associated actions, exist:</source>
          <target state="translated">ハンドラプロセスはメッセージキューの長さを追跡し、現在の長さが設定可能なしきい値を超えたときに何らかのアクションをとります。その目的は、ハンドラーを、入ってくるログイベントのペースに追いつくことができる状態に維持すること、あるいは可能な限り迅速にすることです。ハンドラのメモリ使用量は大きくなってはいけません。これらの3つのしきい値と関連するアクションが存在します。</target>
        </trans-unit>
        <trans-unit id="d669a7746b992304543fe0d69213b6644ee12b90" translate="yes" xml:space="preserve">
          <source>The handlers are called in sequence, and the order is not defined.</source>
          <target state="translated">ハンドラは順番に呼び出され、順番は定義されていません。</target>
        </trans-unit>
        <trans-unit id="fa6b9a858fe6ebad4a9654a225cc08daa061a060" translate="yes" xml:space="preserve">
          <source>The handling of a backslash followed by a digit other than 0 is complicated, and Perl has changed in recent releases, causing PCRE also to change. Outside a character class, PCRE reads the digit and any following digits as a decimal number. If the number is &amp;lt; 8, or if there have been at least that many previous capturing left parentheses in the expression, the entire sequence is taken as a &lt;strong&gt;back reference&lt;/strong&gt;. A description of how this works is provided later, following the discussion of parenthesized subpatterns.</source>
          <target state="translated">バックスラッシュの後に0以外の数字が続く処理は複雑であり、Perlは最近のリリースで変更されたため、PCREも変更されました。文字クラスの外では、PCREは数字とそれに続く数字を10進数として読み取ります。数値が8未満の場合、または式に以前のキャプチャ左括弧が少なくともその数だけ存在する場合、シーケンス全体が&lt;strong&gt;後方参照&lt;/strong&gt;として使用され&lt;strong&gt;ます&lt;/strong&gt;。これがどのように機能するかについては、括弧で囲まれたサブパターンの説明に従って、後で説明します。</target>
        </trans-unit>
        <trans-unit id="ce133ffa97494a3447425009d85e45fe4a4884e0" translate="yes" xml:space="preserve">
          <source>The handling of dot is entirely independent of the handling of circumflex and dollar, the only relationship is that both involve newlines. Dot has no special meaning in a character class.</source>
          <target state="translated">ドットの扱いは、円周率やドルの扱いとは完全に独立しており、関係があるのは両方とも改行を含むということだけです。ドットは文字クラスの中では特別な意味を持ちません。</target>
        </trans-unit>
        <trans-unit id="75675acc51f4abea249c539fbe54b590467b1b3e" translate="yes" xml:space="preserve">
          <source>The handshake will continue, but &lt;code&gt;A&lt;/code&gt; is informed that &lt;code&gt;B&lt;/code&gt; has another ongoing connection attempt that will be shut down (simultaneous connect where &lt;code&gt;A&lt;/code&gt;'s name is greater than &lt;code&gt;B&lt;/code&gt;'s name, compared literally).</source>
          <target state="translated">ハンドシェイクは続行されますが、 &lt;code&gt;A&lt;/code&gt; は、 &lt;code&gt;B&lt;/code&gt; がシャットダウンされる別の進行中の接続試行があることを通知されます（文字通りに比較すると、 &lt;code&gt;A&lt;/code&gt; の名前が &lt;code&gt;B&lt;/code&gt; の名前より大きい同時接続）。</target>
        </trans-unit>
        <trans-unit id="aff3a3821cc248a671eac45e5517c958f3438bd4" translate="yes" xml:space="preserve">
          <source>The handshake will continue.</source>
          <target state="translated">握手が続きます。</target>
        </trans-unit>
        <trans-unit id="c48205cabd15c9a3f6c801a9934891e2a4ee54fe" translate="yes" xml:space="preserve">
          <source>The handshake will not continue, as &lt;code&gt;B&lt;/code&gt; already has an ongoing handshake, which it itself has initiated (simultaneous connect where &lt;code&gt;B&lt;/code&gt;'s name is greater than &lt;code&gt;A&lt;/code&gt;'s).</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; 自体が開始している進行中のハンドシェイクがすでにあるため、ハンドシェイクは続行されません（ &lt;code&gt;B&lt;/code&gt; の名前が &lt;code&gt;A&lt;/code&gt; の名前よりも大きい同時接続）。</target>
        </trans-unit>
        <trans-unit id="4a492d4993cb9390498042b969391a3f2772dbec" translate="yes" xml:space="preserve">
          <source>The hardware watchdog timer, which is controlled by the &lt;code&gt;heart&lt;/code&gt; port program, requires package &lt;code&gt;FORCEvme&lt;/code&gt;, which contains the VME bus driver, to be installed. However, this driver can clash with the Sun &lt;code&gt;mcp&lt;/code&gt; driver and cause the system to refuse to boot. To cure this problem, the following lines are to be added to &lt;code&gt;/etc/system&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;heart&lt;/code&gt; ポートプログラムによって制御されるハードウェアウォッチドッグタイマーには、VMEバスドライバーを含む &lt;code&gt;FORCEvme&lt;/code&gt; パッケージをインストールする必要があります。ただし、このドライバーはSun &lt;code&gt;mcp&lt;/code&gt; ドライバーと競合し、システムの起動を拒否する可能性があります。この問題を解決するには、次の行を &lt;code&gt;/etc/system&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="9e6408f5b48151485bdfcfab3159c61f5c8fa341" translate="yes" xml:space="preserve">
          <source>The head element of list &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">リスト &lt;code&gt;t&lt;/code&gt; のヘッド要素。</target>
        </trans-unit>
        <trans-unit id="5798187c9bcc3504a1324e24484f637b68bd2984" translate="yes" xml:space="preserve">
          <source>The head of the &lt;code&gt;modify_algs_list()&lt;/code&gt; modifies &lt;code&gt;A&lt;/code&gt; giving the result &lt;code&gt;A'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modify_algs_list()&lt;/code&gt; のヘッドは &lt;code&gt;A&lt;/code&gt; を変更し、結果 &lt;code&gt;A'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="4983c0390f19223c1a70e5dfad48870fe4110265" translate="yes" xml:space="preserve">
          <source>The head of the fun is a head matching (or mismatching) &lt;strong&gt;one&lt;/strong&gt; parameter, one object of the table we select from. The object is always a single variable (can be &lt;code&gt;_&lt;/code&gt;) or a tuple, as ETS, Dets, and Mnesia tables include that. The match specification returned by &lt;code&gt;ets:fun2ms/1&lt;/code&gt; can be used with &lt;code&gt;dets:select/2&lt;/code&gt; and &lt;code&gt;mnesia:select/2&lt;/code&gt;, and with &lt;code&gt;ets:select/2&lt;/code&gt;. The use of &lt;code&gt;=&lt;/code&gt; in the head is allowed (and encouraged) at the top-level.</source>
          <target state="translated">おもしろいのは、選択するテーブルの1つのオブジェクト、1 &lt;strong&gt;つの&lt;/strong&gt;パラメータに一致する（または一致しない）頭です。ETS、Dets、およびMnesiaテーブルに含まれているため、オブジェクトは常に単一の変数（ &lt;code&gt;_&lt;/code&gt; にすることができます）またはタプルです。 &lt;code&gt;ets:fun2ms/1&lt;/code&gt; によって返される一致指定は、 &lt;code&gt;dets:select/2&lt;/code&gt; と &lt;code&gt;mnesia:select/2&lt;/code&gt; 、および &lt;code&gt;ets:select/2&lt;/code&gt; で使用できます。ヘッドでの &lt;code&gt;=&lt;/code&gt; の使用は、トップレベルで許可（および推奨）されます。</target>
        </trans-unit>
        <trans-unit id="91864c391383ab349ccd4d45371e04aafcfcc9ac" translate="yes" xml:space="preserve">
          <source>The header and objects in the file are checksummed using the built-in MD5 functions. The MD5 sum of all objects is written in the file footer, so that verification while reading detects the slightest bitflip in the file data. Using this costs a fair amount of CPU time.</source>
          <target state="translated">ファイルのヘッダとオブジェクトは、内蔵の MD5 関数を使用してチェックサムされます。すべてのオブジェクトのMD5和をファイルのフッタに書き込むことで、読み込み中の検証でファイルデータのわずかなビットフリップを検出することができます。これを使用すると、かなりのCPU時間がかかります。</target>
        </trans-unit>
        <trans-unit id="2eb240ffbba0a0a325acedfed500d5fbbd4064ac" translate="yes" xml:space="preserve">
          <source>The header includes some system information:</source>
          <target state="translated">ヘッダーには、いくつかのシステム情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="68595adcb3ea51d515a7e1ae094708cbf3e1144b" translate="yes" xml:space="preserve">
          <source>The header is &lt;strong&gt;not&lt;/strong&gt; stripped off.</source>
          <target state="translated">ヘッダーは取り除かれ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="882ae0c9d1778c987cd41c3f90417de21ef032f7" translate="yes" xml:space="preserve">
          <source>The header name will be in lower case and should not be altered.</source>
          <target state="translated">ヘッダー名は小文字になり、変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="af3ed8fba11aa29a77ab51965b8edb72b975c8e9" translate="yes" xml:space="preserve">
          <source>The header of the Erlang script in the example differs from a normal Erlang module. The first line is intended to be the interpreter line, which invokes &lt;code&gt;escript&lt;/code&gt;.</source>
          <target state="translated">この例のErlangスクリプトのヘッダーは、通常のErlangモジュールとは異なります。最初の行は、 &lt;code&gt;escript&lt;/code&gt; を呼び出すインタープリター行を意図しています。</target>
        </trans-unit>
        <trans-unit id="aef96215b80c7223d8af26cee2243d32f40daa22" translate="yes" xml:space="preserve">
          <source>The heap size of a process is quite hard to predict, especially the amount of memory that is used during the garbage collection. When contemplating using this option, it is recommended to first run it in production with &lt;code&gt;kill&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; and inspect the log events to see what the normal peak sizes of the processes in the system is and then tune the value accordingly.</source>
          <target state="translated">プロセスのヒープサイズ、特にガベージコレクション中に使用されるメモリの量を予測することは非常に困難です。このオプションの使用を検討している場合は、 &lt;code&gt;kill&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定して本稼働で実行し、ログイベントを調べてシステム内のプロセスの通常のピークサイズを確認し、それに応じて値を調整することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5e2e37a09af7e8f1d009a1717a88fe618ed3d52c" translate="yes" xml:space="preserve">
          <source>The heavyweight commit protocol is also non-blocking, which allows the surviving participants and their coordinator to finish the transaction regardless (even if a node crashes in the middle of the commit protocol). When a node fails at startup, &lt;code&gt;Mnesia&lt;/code&gt; determines the outcome of the transaction and recovers it. Lightweight protocols, heavyweight protocols, and dirty updates, are dependent on other nodes to be operational to make the correct heavyweight transaction recovery decision.</source>
          <target state="translated">ヘビーウェイトコミットプロトコルもノンブロッキングです。これにより、存続している参加者とそのコーディネーターは、（ノードがコミットプロトコルの途中でクラッシュした場合でも）トランザクションを終了できます。起動時にノードに障害が &lt;code&gt;Mnesia&lt;/code&gt; すると、Mnesiaはトランザクションの結果を判断して回復します。軽量プロトコル、重量プロトコル、およびダーティー更新は、正しい重量トランザクションのリカバリー決定を行うために操作可能である他のノードに依存しています。</target>
        </trans-unit>
        <trans-unit id="cafb3c516580a793b7de731b14722e5eebd23ea8" translate="yes" xml:space="preserve">
          <source>The hexadecimal value &lt;code&gt;h...&lt;/code&gt;.</source>
          <target state="translated">16進値 &lt;code&gt;h...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11e5e2ec0fa10fbdd5f8dd78491bb19a12164f59" translate="yes" xml:space="preserve">
          <source>The hexadecimal value &lt;code&gt;hh&lt;/code&gt;.</source>
          <target state="translated">16進値 &lt;code&gt;hh&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74f0a534d2309926a7d494022615e9a9b4923160" translate="yes" xml:space="preserve">
          <source>The highest distribution version that this node can handle. The value in Erlang/OTP R6B and later is 5.</source>
          <target state="translated">このノードが扱える最高のディストリビューションバージョン。Erlang/OTP R6B以降の値は5です。</target>
        </trans-unit>
        <trans-unit id="0a981eec686f456d91d8a6bc03a6775c554a6fb0" translate="yes" xml:space="preserve">
          <source>The home directory:</source>
          <target state="translated">ホームディレクトリ。</target>
        </trans-unit>
        <trans-unit id="2e797c1729cd1e5a1ad1f79c83782a1c6c07da5c" translate="yes" xml:space="preserve">
          <source>The hook function should return either the data to be exported, or a tuple &lt;code&gt;{'#xml-alias#', NewTag::atom()}&lt;/code&gt;, or a tuple &lt;code&gt;{'#xml-redefine#', Content}&lt;/code&gt;, where &lt;code&gt;Content&lt;/code&gt; is a content list (which can be on simple-form; see &lt;code&gt;export_simple/2&lt;/code&gt; for details).</source>
          <target state="translated">フック関数が返すべきいずれかのデータをエクスポートする、またはタプル &lt;code&gt;{'#xml-alias#', NewTag::atom()}&lt;/code&gt; 、又は組 &lt;code&gt;{'#xml-redefine#', Content}&lt;/code&gt; 、ここで、 &lt;code&gt;Content&lt;/code&gt; ありますコンテンツリスト（シンプルフォームにすることができます。詳細については、 &lt;code&gt;export_simple/2&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="4a1cb12a27b6d6707a5d80ba125a5cfb6386b02f" translate="yes" xml:space="preserve">
          <source>The hook options can also be specified in a configuration file with configuration variable &lt;code&gt;ct_conn_log&lt;/code&gt;:</source>
          <target state="translated">フックオプションは、構成変数 &lt;code&gt;ct_conn_log&lt;/code&gt; を使用して構成ファイルで指定することもできます。</target>
        </trans-unit>
        <trans-unit id="44ea7e5b4f10ff2cea08d024c8bb140192260555" translate="yes" xml:space="preserve">
          <source>The host &lt;code&gt;123.34.56.11&lt;/code&gt; and all machines on the &lt;code&gt;150.100.23&lt;/code&gt; subnet are allowed access.</source>
          <target state="translated">ホスト &lt;code&gt;123.34.56.11&lt;/code&gt; および &lt;code&gt;150.100.23&lt;/code&gt; サブネット上のすべてのマシンがアクセスを許可されます。</target>
        </trans-unit>
        <trans-unit id="e966a241193fc6bb63b6fabbd2c9e1a2a953a3a8" translate="yes" xml:space="preserve">
          <source>The host &lt;code&gt;123.34.56.11&lt;/code&gt; and all machines on the &lt;code&gt;150.100.23&lt;/code&gt; subnet are not allowed access.</source>
          <target state="translated">ホスト &lt;code&gt;123.34.56.11&lt;/code&gt; および &lt;code&gt;150.100.23&lt;/code&gt; サブネット上のすべてのマシンはアクセスを許可されていません。</target>
        </trans-unit>
        <trans-unit id="6b0786bc370f61e14470bf6a8ad6a449f7a915d2" translate="yes" xml:space="preserve">
          <source>The host keys directory could be changed with the option &lt;code&gt;&lt;a href=&quot;#type-system_dir_daemon_option&quot;&gt;system_dir&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ホスト鍵ディレクトリは、オプション &lt;code&gt;&lt;a href=&quot;#type-system_dir_daemon_option&quot;&gt;system_dir&lt;/a&gt;&lt;/code&gt; で変更できます。</target>
        </trans-unit>
        <trans-unit id="d878e97eeb73ea425731416807f352daf86ada0a" translate="yes" xml:space="preserve">
          <source>The hrl generated from a dictionary specification defines records for the messages and grouped AVPs defined in &lt;code&gt;@messages&lt;/code&gt; and &lt;code&gt;@grouped&lt;/code&gt; sections. For each message or grouped AVP definition, a record is defined whose name is the message or AVP name, prefixed with any dictionary prefix defined with &lt;code&gt;@prefix&lt;/code&gt;, and whose fields are the names of the AVPs contained in the message or grouped AVP in the order specified in the definition in question. For example, the grouped AVP</source>
          <target state="translated">辞書仕様から生成された &lt;code&gt;@messages&lt;/code&gt; 、 &lt;code&gt;@grouped&lt;/code&gt; messagesおよび@groupedセクションで定義されたメッセージおよびグループ化されたAVPのレコードを定義します。メッセージまたはグループ化されたAVP定義ごとに、名前がメッセージまたはAVP名であり、 &lt;code&gt;@prefix&lt;/code&gt; prefixで定義されたディクショナリプレフィックスが前に付いたレコードが定義され、フィールドは、メッセージまたはグループ化されたAVPに含まれるAVPの名前です。問題の定義で指定されています。たとえば、グループ化されたAVP</target>
        </trans-unit>
        <trans-unit id="962862212161f4c21176923512e551b47c09f8ac" translate="yes" xml:space="preserve">
          <source>The id of the child specification cannot be changed.</source>
          <target state="translated">子指定のidは変更できません。</target>
        </trans-unit>
        <trans-unit id="f091d047abb87ec231553541a5fdb6a8b0e0548d" translate="yes" xml:space="preserve">
          <source>The idea is that it either matches a single character, or two identical characters surrounding a subpalindrome. In Perl, this pattern works; in PCRE it does not work if the pattern is longer than three characters. Consider the subject string &quot;abcba&quot;.</source>
          <target state="translated">これは、1つの文字にマッチするか、または2つの同じ文字を含む部分語句にマッチするかのどちらかです。Perl では、このパターンは動作しますが、PCRE では、パターンが 3 文字より長い場合は動作しません。主語文字列 &quot;abcba&quot; を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b7b5bed6fe9a9f3870ec94f665573cd5c7dd092c" translate="yes" xml:space="preserve">
          <source>The idea is to have a &lt;code&gt;Common Test&lt;/code&gt; test suite calling a property testing tool with special property test suites as defined by that tool. The usual Erlang application directory structure is assumed. The tests are collected in the &lt;code&gt;test&lt;/code&gt; directory of the application. The &lt;code&gt;test&lt;/code&gt; directory has a subdirectory &lt;code&gt;property_test&lt;/code&gt;, where everything needed for the property tests is collected.</source>
          <target state="translated">アイデアは、そのツールで定義された特別なプロパティテストスイートを備えたプロパティテストツールを呼び出す &lt;code&gt;Common Test&lt;/code&gt; テストスイートを持つことです。通常のErlangアプリケーションのディレクトリ構造が想定されています。テストは、アプリケーションの &lt;code&gt;test&lt;/code&gt; ディレクトリに収集されます。 &lt;code&gt;test&lt;/code&gt; ディレクトリにはサブディレクトリがある &lt;code&gt;property_test&lt;/code&gt; 特性試験のために必要なすべてのものを収集し、。</target>
        </trans-unit>
        <trans-unit id="874f09de1158faee11366ea5b25b0d18155a826f" translate="yes" xml:space="preserve">
          <source>The idea is to write something like:</source>
          <target state="translated">みたいなことを書いてみようということです。</target>
        </trans-unit>
        <trans-unit id="35794ac2165e7b77623ae5db4356014c0f1e5071" translate="yes" xml:space="preserve">
          <source>The identifier for the table. If the table is a &lt;code&gt;named_table&lt;/code&gt;, this is the name.</source>
          <target state="translated">テーブルの識別子。テーブルが &lt;code&gt;named_table&lt;/code&gt; の場合、これが名前です。</target>
        </trans-unit>
        <trans-unit id="948f1754e2dc2f5e9da0d93fd230e4e30fc1f680" translate="yes" xml:space="preserve">
          <source>The identifier of the distribution controller identifier created by the acceptor process. To be passed along to &lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt;.</source>
          <target state="translated">アクセプタープロセスによって作成された配布コントローラー識別子の識別子。 &lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="dcd66a26de4ddbf0baac1e4c1845007eafbabac4" translate="yes" xml:space="preserve">
          <source>The identifier of the distribution controller.</source>
          <target state="translated">ディストリビューションコントローラの識別子。</target>
        </trans-unit>
        <trans-unit id="727ced51237452469691fc0707b1de9d7db70736" translate="yes" xml:space="preserve">
          <source>The identifier, an arbitrary string, should be reused whenever the same application (or node) wants to start the process. &lt;code&gt;nteventlog&lt;/code&gt; is informed about all events that have arrived to the eventlog since the last accepted message for the current identifier. As long as the same identifier is used, the same eventlog record will not be sent to &lt;code&gt;nteventlog&lt;/code&gt; more than once (with the exception of when graved system failures arise, in which case the last records written before the failure may be sent to Erlang again after reboot).</source>
          <target state="translated">同じアプリケーション（またはノード）がプロセスを開始したいときはいつでも、識別子である任意の文字列を再利用する必要があります。 &lt;code&gt;nteventlog&lt;/code&gt; は、現在の識別子で最後に受け入れられたメッセージ以降にイベントログに到着したすべてのイベントについて通知されます。同じ識別子が使用されている限り、同じ &lt;code&gt;nteventlog&lt;/code&gt; ログレコードがnteventlogに2回以上送信されることはありません（重大なシステム障害が発生した場合を除きます）。リブート）。</target>
        </trans-unit>
        <trans-unit id="cf2c592a7835be79474c810d342bb74da9b68ee0" translate="yes" xml:space="preserve">
          <source>The identity (handle) of a connection.</source>
          <target state="translated">接続の ID (ハンドル)。</target>
        </trans-unit>
        <trans-unit id="8db0de3330260ae6e24af59a9d387dbcefe2afa7" translate="yes" xml:space="preserve">
          <source>The identity of a server, specified in a configuration file.</source>
          <target state="translated">設定ファイルで指定されたサーバの ID。</target>
        </trans-unit>
        <trans-unit id="be2c0371fbc7fc4fed32a1fa7d6f534addbd004b" translate="yes" xml:space="preserve">
          <source>The implemenation of the distribution driver is not completely covered here, details about buffering and other things unrelated to driver writing are not explained. Likewise are some peculiarities of the UDS protocol not explained in detail. The chosen protocol is not important.</source>
          <target state="translated">ディストリビューションドライバの実装については、ここでは完全には説明されていませんし、バッファリングなどドライバの書き込みとは関係のないことについても説明されていません。同様に、UDSプロトコルのいくつかの特殊性についても詳細には説明されていません。選択されたプロトコルは重要ではありません。</target>
        </trans-unit>
        <trans-unit id="8024f6f807f5eee458a55b3f38fa11d2c9f7c8b5" translate="yes" xml:space="preserve">
          <source>The implementation based on the &lt;code&gt;gcc&lt;/code&gt;&lt;code&gt;__atomic_*&lt;/code&gt; builtins.</source>
          <target state="translated">&lt;code&gt;gcc&lt;/code&gt; &lt;code&gt;__atomic_*&lt;/code&gt; ビルトインに基づく実装。</target>
        </trans-unit>
        <trans-unit id="d22b507e359bf39c3398b52ef33d5269e6b83f2b" translate="yes" xml:space="preserve">
          <source>The implementation changed in Erlang/OTP R15. Upgrading to R15 breaks applications that expect a specific output for a specified seed. The output is still deterministic number series, but different compared to releases older than R15. Seed &lt;code&gt;{0,0,0}&lt;/code&gt; does, for example, no longer produce a flawed series of only zeros.</source>
          <target state="translated">Erlang / OTP R15で実装が変更されました。R15にアップグレードすると、指定したシードの特定の出力を期待するアプリケーションが機能しなくなります。出力はまだ確定的な数列ですが、R15より古いリリースとは異なります。たとえば、シード &lt;code&gt;{0,0,0}&lt;/code&gt; は、欠陥のある一連のゼロのみを生成しなくなりました。</target>
        </trans-unit>
        <trans-unit id="17794ee5af2140bd9337aefc9afc392b9c6a3f30" translate="yes" xml:space="preserve">
          <source>The implementation of a system tracer process that produces this printout can look like this:</source>
          <target state="translated">このプリントアウトを生成するシステムトレーサプロセスの実装は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="b110452523f370779c51e763c1f9fff3540f763c" translate="yes" xml:space="preserve">
          <source>The implementation of a test case. Call the functions to test and check the result. If something fails, ensure the function causes a runtime error or call &lt;code&gt;&lt;a href=&quot;ct#fail-1&quot;&gt;ct:fail/1,2&lt;/a&gt;&lt;/code&gt; (which also causes the test case process to terminate).</source>
          <target state="translated">テストケースの実装。関数を呼び出して結果をテストおよびチェックします。何かが失敗した場合は、関数が実行時エラーを引き起こすか、 &lt;code&gt;&lt;a href=&quot;ct#fail-1&quot;&gt;ct:fail/1,2&lt;/a&gt;&lt;/code&gt; を呼び出します（これにより、テストケースプロセスも終了します）。</target>
        </trans-unit>
        <trans-unit id="7fde479db40a86f01a45d84f1970e3229f422aaa" translate="yes" xml:space="preserve">
          <source>The implementation of different asynchronous signals in the virtual machine can vary over time, but the behavior always respects this concept of asynchronous signals being passed between entities as described above.</source>
          <target state="translated">仮想マシンにおける異なる非同期シグナルの実装は時間の経過とともに変化する可能性がありますが、動作は上述のようにエンティティ間で渡される非同期シグナルのこの概念を常に尊重しています。</target>
        </trans-unit>
        <trans-unit id="78fb563a772c1aec013eb172f1594ea4c2023024" translate="yes" xml:space="preserve">
          <source>The implementation of lookbehind assertions is, for each alternative, to move the current position back temporarily by the fixed length and then try to match. If there are insufficient characters before the current position, the assertion fails.</source>
          <target state="translated">lookbehindアサーションの実装は、各代替案について、現在の位置を固定長分だけ一時的に後退させてから一致を試みるというものです。現在の位置の前に不十分な文字がある場合、アサーションは失敗します。</target>
        </trans-unit>
        <trans-unit id="47c1e5901ab1f453c1b563ce5cd6710f3f98aaf0" translate="yes" xml:space="preserve">
          <source>The implementation of the port mechanism depends on the platform. For UNIX, pipes are used and the external program is assumed to read from standard input and write to standard output. The external program can be written in any programming language as long as it can handle the interprocess communication mechanism with which the port is implemented.</source>
          <target state="translated">ポート機構の実装はプラットフォームによって異なります。UNIXの場合はパイプが使用され、外部プログラムは標準入力からの読み込みと標準出力への書き込みを前提としています。外部プログラムは、ポートが実装されているプロセス間通信機構を扱える限り、どのようなプログラミング言語でも書くことができます。</target>
        </trans-unit>
        <trans-unit id="478af3e7f92746327d6e9ba13837a8097b170322" translate="yes" xml:space="preserve">
          <source>The implementation of the statistic counters is lightweight. I.e. the statistic counters are handled separately by different entities of the application. For instance our two transport module(s) (see &lt;code&gt;&lt;a href=&quot;megaco_tcp#stats&quot;&gt;megaco_tcp&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;megaco_udp#stats&quot;&gt;megaco_udp&lt;/a&gt;&lt;/code&gt;) maintain their own counters and the application engine (see &lt;code&gt;&lt;a href=&quot;megaco#stats&quot;&gt;megaco&lt;/a&gt;&lt;/code&gt;) maintain its own counters.</source>
          <target state="translated">統計カウンタの実装は軽量です。つまり、統計カウンタは、アプリケーションのさまざまなエンティティによって個別に処理されます。たとえば、2つのトランスポートモジュール（ &lt;code&gt;&lt;a href=&quot;megaco_tcp#stats&quot;&gt;megaco_tcp&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;megaco_udp#stats&quot;&gt;megaco_udp&lt;/a&gt;&lt;/code&gt; を参照）は独自のカウンターを維持し、アプリケーションエンジン（ &lt;code&gt;&lt;a href=&quot;megaco#stats&quot;&gt;megaco&lt;/a&gt;&lt;/code&gt; を参照）は独自のカウンターを維持します。</target>
        </trans-unit>
        <trans-unit id="298d2d2a07f7dd0f09f6657d3ded4573b0d17570" translate="yes" xml:space="preserve">
          <source>The implementation of this function is based on the &lt;code&gt;terminate&lt;/code&gt; system message, and requires that the process handles system messages correctly. For information about system messages, see &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; and section &lt;code&gt;sys and proc_lib&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">この関数の実装は、システムメッセージの &lt;code&gt;terminate&lt;/code&gt; 基づいており、プロセスがシステムメッセージを正しく処理する必要があります。システムメッセージの詳細については、 &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; およびOTP設計原則のセクション &lt;code&gt;sys and proc_lib&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8382bdd6585df4f1f98e136541a6143a6f059e2f" translate="yes" xml:space="preserve">
          <source>The implementation provided by Erlang/OTP.</source>
          <target state="translated">Erlang/OTPで提供されている実装。</target>
        </trans-unit>
        <trans-unit id="8260c038977748412f519079cece24fe64e2829f" translate="yes" xml:space="preserve">
          <source>The implementation using ets tables introduces a semantic incompatibility with older implementations. In those older implementations, using pure Erlang terms, the index was garbage collected like any other Erlang term and did not have to be deleted when discarded. An ets table is deleted only when the process creating it explicitly deletes it or when the creating process terminates.</source>
          <target state="translated">etsテーブルを使った実装は古い実装との意味的な非互換性を導入しています。これらの古い実装では、純粋なErlang用語を使ってインデックスは他のErlang用語と同じようにガベージコレクションされ、破棄されても削除される必要はありませんでした。etsテーブルが削除されるのは、作成プロセスが明示的に削除するか、作成プロセスが終了したときだけです。</target>
        </trans-unit>
        <trans-unit id="d24ced9c8492598a6342e78545fd97461c5c3534" translate="yes" xml:space="preserve">
          <source>The important line is the last line in the function: the &lt;code&gt;do_read&lt;/code&gt; routine is called to handle new input. The remaining function handles input on a listen socket, which means that it is to be possible to do an accept on the socket, which is also recognized as a read event.</source>
          <target state="translated">重要な行は、関数の最後の行です &lt;code&gt;do_read&lt;/code&gt; ルーチンは、新しい入力を処理するために呼び出されます。残りの関数は、待機ソケットでの入力を処理します。つまり、ソケットで受け入れを行うことができ、これも読み取りイベントとして認識されます。</target>
        </trans-unit>
        <trans-unit id="d0e9c528ecacf2cef07eb906cdbaca615ae9bccf" translate="yes" xml:space="preserve">
          <source>The imported variables are replaced by match specification &lt;code&gt;const&lt;/code&gt; expressions, which is consistent with the static scoping for Erlang funs. However, local or global function calls cannot be in the guard or body of the fun. Calls to built-in match specification functions is of course allowed:</source>
          <target state="translated">インポートされた変数は、Erlang funの静的スコープと一致する一致指定 &lt;code&gt;const&lt;/code&gt; 式で置き換えられます。ただし、ローカル関数呼び出しまたはグローバル関数呼び出しは、監視機能または本体に含めることはできません。組み込みのマッチ指定関数の呼び出しはもちろん許可されます：</target>
        </trans-unit>
        <trans-unit id="acfda62ec5b11dd2be3e7e609916ea872e30b97c" translate="yes" xml:space="preserve">
          <source>The imported variables will be replaced by match_spec &lt;code&gt;const&lt;/code&gt; expressions, which is consistent with the static scoping for Erlang &lt;code&gt;fun()&lt;/code&gt;s. Local or global function calls can not be in the guard or body of the fun however. Calls to builtin match_spec functions of course is allowed:</source>
          <target state="translated">インポートされた変数は、Erlang &lt;code&gt;fun()&lt;/code&gt; の静的スコープと一致するmatch_spec &lt;code&gt;const&lt;/code&gt; 式に置き換えられます。ただし、ローカルまたはグローバルの関数呼び出しは、楽しみのガードまたは本体に含めることはできません。もちろん組み込みのmatch_spec関数の呼び出しは許可されています：</target>
        </trans-unit>
        <trans-unit id="19bfe86fb1471efac1e72c2d15460bf77e3a9408" translate="yes" xml:space="preserve">
          <source>The improved &lt;code&gt;&lt;a href=&quot;rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; module is to be used instead of this module.</source>
          <target state="translated">このモジュールの代わりに、改良された &lt;code&gt;&lt;a href=&quot;rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="15c1fb9f30dd76e79041f3806d5e4590f2c710b6" translate="yes" xml:space="preserve">
          <source>The included application can be started in two ways. This is described in the next two sections.</source>
          <target state="translated">同梱されているアプリケーションは、2つの方法で起動することができます。これについては、次の2つのセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="06e8644e190d6991435ff4de5c47198aaef4670f" translate="yes" xml:space="preserve">
          <source>The incoming message prior to encode or the outgoing message after encode.</source>
          <target state="translated">エンコード前の着信メッセージ、またはエンコード後の発信メッセージ。</target>
        </trans-unit>
        <trans-unit id="4f31b1830353b2c8d2b0ce96b3ddc62f7dea448b" translate="yes" xml:space="preserve">
          <source>The incoming/outgoing message. For an incoming message, a term corresponding to the configured &lt;code&gt;&lt;a href=&quot;diameter#decode_format&quot;&gt;decode format&lt;/a&gt;&lt;/code&gt; if the message can be decoded in a non-relay application, &lt;code&gt;undefined&lt;/code&gt; otherwise. For an outgoing message, setting a &lt;code&gt;[&lt;code&gt;&lt;a href=&quot;#header&quot;&gt;header()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#avp&quot;&gt;avp()&lt;/a&gt;&lt;/code&gt;]&lt;/code&gt; list is equivalent to setting the &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;avps&lt;/code&gt; fields to the corresponding values.</source>
          <target state="translated">着信/発信メッセージ。着信メッセージの場合、メッセージがリレーアプリケーション以外でデコードできる場合は、構成された &lt;code&gt;&lt;a href=&quot;diameter#decode_format&quot;&gt;decode format&lt;/a&gt;&lt;/code&gt; 対応する用語。それ以外の場合は &lt;code&gt;undefined&lt;/code&gt; 。送信メッセージの場合、 &lt;code&gt;[&lt;code&gt;&lt;a href=&quot;#header&quot;&gt;header()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#avp&quot;&gt;avp()&lt;/a&gt;&lt;/code&gt;]&lt;/code&gt; リストは、 &lt;code&gt;header&lt;/code&gt; と &lt;code&gt;avps&lt;/code&gt; フィールドを対応する値に設定することと同等です。</target>
        </trans-unit>
        <trans-unit id="ed6f20fe9042257fdf8f4d534ef82f96072c8261" translate="yes" xml:space="preserve">
          <source>The increment value when calculating the new timer time (&lt;code&gt;wait_for&lt;/code&gt;). Note that this value &lt;strong&gt;can&lt;/strong&gt; be negative and that a timer restart can therefor lead to a &lt;code&gt;wait_for&lt;/code&gt; value of zero! It is up to the user to be aware of the consequences of a &lt;code&gt;wait_for&lt;/code&gt; value of zero.</source>
          <target state="translated">新しいタイマー時間（ &lt;code&gt;wait_for&lt;/code&gt; ）を計算するときの増分値。この値&lt;strong&gt;は&lt;/strong&gt;負の値になる&lt;strong&gt;可能性&lt;/strong&gt;があり、タイマーの再起動によって &lt;code&gt;wait_for&lt;/code&gt; 値がゼロになる&lt;strong&gt;可能性&lt;/strong&gt;がある&lt;strong&gt;ことに&lt;/strong&gt;注意してください。ゼロの &lt;code&gt;wait_for&lt;/code&gt; 値の結果に注意するのは、ユーザー次第です。</target>
        </trans-unit>
        <trans-unit id="b2b8955465cefc3c169ad13d16bfd76b94516280" translate="yes" xml:space="preserve">
          <source>The indentation features can be used to reindent large sections of a file. If some lines use nonstandard indentation they will be reindented.</source>
          <target state="translated">インデント機能は、ファイルの大きなセクションの再インデントに使用できます。いくつかの行で非標準のインデントを使用している場合、それらは再インデントされます。</target>
        </trans-unit>
        <trans-unit id="3228c669ff974e48e8faf71906a7cfa3fca40c98" translate="yes" xml:space="preserve">
          <source>The indexing capabilities of &lt;code&gt;Mnesia&lt;/code&gt; are used with the following three functions, which retrieve and match records based on index entries in the database:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のインデックス機能は、データベースのインデックスエントリに基づいてレコードを取得および照合する次の3つの関数で使用されます。</target>
        </trans-unit>
        <trans-unit id="66a67c598f5e1e4fe6dac7c8d61746c5da5f3c1a" translate="yes" xml:space="preserve">
          <source>The indices must be given in descending order.</source>
          <target state="translated">インデックスは降順で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="0c9802ae4d36471d390cc5236f59166f9448cefa" translate="yes" xml:space="preserve">
          <source>The indices must be integer literals, not variables or expressions.</source>
          <target state="translated">インデックスは整数リテラルでなければならず、変数や式ではありません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
