<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="c8613cbf9cc57a98765708cdc22f9ed8559f964a" translate="yes" xml:space="preserve">
          <source>When trace output is desired, &lt;code&gt;debug&lt;/code&gt; is to be defined when the module &lt;code&gt;m&lt;/code&gt; is compiled:</source>
          <target state="translated">トレース出力が必要な場合、モジュール &lt;code&gt;m&lt;/code&gt; のコンパイル時に &lt;code&gt;debug&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="256e90d704880ae674edcafcdfe9548c1c7249cd" translate="yes" xml:space="preserve">
          <source>When tracing a system of Mnesia applications it is useful to be able to interleave Mnesia own events with application-related events that give information about the application context.</source>
          <target state="translated">Mnesiaアプリケーションのシステムをトレースするとき、Mnesia自身のイベントを、アプリケーションのコンテキストに関する情報を与えるアプリケーション関連のイベントとインタリーブできるようにすると便利です。</target>
        </trans-unit>
        <trans-unit id="e113da41d29c2c3638afdbda456737663befd306" translate="yes" xml:space="preserve">
          <source>When tracing diskless nodes, &lt;code&gt;ttb&lt;/code&gt; must be started from an external &quot;trace control node&quot; with disk access, and &lt;code&gt;Client&lt;/code&gt; must be &lt;code&gt;{local, File}&lt;/code&gt;. All trace information is then sent to the trace control node where it is written to file.</source>
          <target state="translated">ディスクレスノードをトレースする場合、 &lt;code&gt;ttb&lt;/code&gt; はディスクアクセスを備えた外部の「トレース制御ノード」から開始する必要があり、 &lt;code&gt;Client&lt;/code&gt; は &lt;code&gt;{local, File}&lt;/code&gt; なければなりません。その後、すべてのトレース情報がトレースコントロールノードに送信され、ファイルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="6193e77c0b9e8850c79e56437a7ff2bfa89554ed" translate="yes" xml:space="preserve">
          <source>When tracing function calls on a group leader process (an IO process), there is risk of causing a deadlock. This will happen if a group leader process generates a trace message and the tracer process, by calling the trace handler function, sends an IO request to the same group leader. The problem can only occur if the trace handler prints to tty using an &lt;code&gt;io&lt;/code&gt; function such as &lt;code&gt;format/2&lt;/code&gt;. Note that when &lt;code&gt;dbg:p(all,call)&lt;/code&gt; is called, IO processes are also traced. Here's an example:</source>
          <target state="translated">グループリーダープロセス（IOプロセス）で関数呼び出しをトレースすると、デッドロックが発生するリスクがあります。これは、グループリーダープロセスがトレースメッセージを生成し、トレースハンドラー関数を呼び出してトレーサープロセスが同じグループリーダーにIO要求を送信すると発生します。この問題は、トレースハンドラーが &lt;code&gt;format/2&lt;/code&gt; などの &lt;code&gt;io&lt;/code&gt; 関数を使用してttyに出力する場合にのみ発生します。 &lt;code&gt;dbg:p(all,call)&lt;/code&gt; が呼び出されると、IOプロセスもトレースされることに注意してください。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="466360c3c9707d034db5517f5ba6f1db58ddb4ed" translate="yes" xml:space="preserve">
          <source>When tracing live systems, always take special care to not overload a node with too heavy tracing. &lt;code&gt;ttb&lt;/code&gt; provides option &lt;code&gt;overload&lt;/code&gt; to address this problem.</source>
          <target state="translated">ライブシステムをトレースするときは、過度のトレースでノードが過負荷にならないように常に特別な注意を払ってください。 &lt;code&gt;ttb&lt;/code&gt; は、この問題に対処するためのオプション &lt;code&gt;overload&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="1d713a6d3abef0dc19e9fef42b12e8d6a635ed21" translate="yes" xml:space="preserve">
          <source>When tracing there is no return value to produce, the match specification either matches or does not. The effect when the expression matches is a trace message rather than a returned term. The &lt;code&gt;ActionTerm&lt;/code&gt;s are executed as in an imperative language, that is, for their side effects. Functions with side effects are also allowed when tracing.</source>
          <target state="translated">トレースするときに生成する戻り値がない場合、一致指定は一致するか一致しません。式が一致した場合の影響は、返された用語ではなくトレースメッセージです。 &lt;code&gt;ActionTerm&lt;/code&gt; の Sは、その副作用のために、ある命令型言語、のように実行されます。トレース時に副作用のある関数も許可されます。</target>
        </trans-unit>
        <trans-unit id="58e093b3869faaa26b1860581c9f3af042ac8ce5" translate="yes" xml:space="preserve">
          <source>When tracing to shell or &lt;code&gt;{local,File}&lt;/code&gt;, an ip trace driver is used internally. The ip trace driver has a queue of maximum &lt;code&gt;QueueSize&lt;/code&gt; messages waiting to be delivered. If the driver cannot deliver messages as fast as they are produced, the queue size might be exceeded and messages are dropped. This parameter is optional, and is only useful if many &lt;code&gt;{drop,N}&lt;/code&gt; trace messages are received by the trace handler. It has no meaning if shell or &lt;code&gt;{local,File}&lt;/code&gt; is not used. See &lt;code&gt;dbg:trace_port/2&lt;/code&gt; for more information about the ip trace driver.</source>
          <target state="translated">シェルまたは &lt;code&gt;{local,File}&lt;/code&gt; にトレースする場合、内部的にip traceドライバーが使用されます。 ip traceドライバーには、配信を待機している最大 &lt;code&gt;QueueSize&lt;/code&gt; メッセージのキューがあります。ドライバーが生成されるのと同じ速さでメッセージを配信できない場合、キューのサイズを超えてメッセージがドロップされる可能性があります。このパラメーターはオプションであり、多くの &lt;code&gt;{drop,N}&lt;/code&gt; トレースメッセージがトレースハンドラーによって受信された場合にのみ役立ちます。 shellまたは &lt;code&gt;{local,File}&lt;/code&gt; が使用されていない場合は意味がありません。ip traceドライバーの詳細については、 &lt;code&gt;dbg:trace_port/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="093fdd62c1610e46d6f27c6de1ab5ef2750cca76" translate="yes" xml:space="preserve">
          <source>When traversing the contents of &lt;code&gt;sys.config&lt;/code&gt; and a filename is encountered, its contents are read and merged with the result so far. When an application configuration tuple &lt;code&gt;{Application, Env}&lt;/code&gt; is found, it is merged with the result so far. Merging means that new parameters are added and existing parameter values overwritten.</source>
          <target state="translated">&lt;code&gt;sys.config&lt;/code&gt; とファイル名の内容をトラバースすると、その内容が読み取られ、それまでの結果とマージされます。アプリケーション構成タプル &lt;code&gt;{Application, Env}&lt;/code&gt; が見つかると、それまでの結果とマージされます。マージとは、新しいパラメーターが追加され、既存のパラメーター値が上書きされることを意味します。</target>
        </trans-unit>
        <trans-unit id="5c1a00c1646659dc3c25c531f96cba51c37aa323" translate="yes" xml:space="preserve">
          <source>When unregister the subagent using an &lt;code&gt;oid()&lt;/code&gt;, the &lt;code&gt;pid()&lt;/code&gt; of the process handling the sub-tree is also returned.</source>
          <target state="translated">使用してサブエージェント登録を解除するとき &lt;code&gt;oid()&lt;/code&gt; 、 &lt;code&gt;pid()&lt;/code&gt; サブツリーを取り扱うプロセスのにも戻されます。</target>
        </trans-unit>
        <trans-unit id="799f766e20f87f2dca4b1fd3e86f764dcd6d6a7e" translate="yes" xml:space="preserve">
          <source>When upgrading the emulator from a version older than OTP R15, an attempt is made to load new application beam code into the old emulator. Sometimes the new beam format cannot be read by the old emulator, so the code loading fails and the complete upgrade is terminated. To overcome this problem, the new application code is to be compiled with the old emulator. For more information about emulator upgrade from pre OTP R15 versions, see &lt;code&gt;Design Principles&lt;/code&gt; in &lt;strong&gt;System Documentation&lt;/strong&gt;.</source>
          <target state="translated">OTP R15より古いバージョンからエミュレータをアップグレードする場合、新しいアプリケーションビームコードを古いエミュレータにロードしようとします。新しいビームフォーマットが古いエミュレーターで読み取れない場合があるため、コードのロードが失敗し、完全なアップグレードが終了します。この問題を克服するには、新しいアプリケーションコードを古いエミュレータでコンパイルする必要があります。OTP R15より前のバージョンからのエミュレーターのアップグレードの詳細については、「&lt;strong&gt;システムのドキュメント」の&lt;/strong&gt;「 &lt;code&gt;Design Principles&lt;/code&gt; を参照してください。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c936186cbb39bacc2e228da8dc8dbbfc6f98893" translate="yes" xml:space="preserve">
          <source>When used together with a &lt;code&gt;Tracer Module&lt;/code&gt;, any message sent in the trace callback is guaranteed to have reached its recipient before the &lt;code&gt;trace_delivered&lt;/code&gt; message is sent.</source>
          <target state="translated">&lt;code&gt;Tracer Module&lt;/code&gt; と一緒に使用すると、トレースコールバックで送信されたメッセージはすべて、 &lt;code&gt;trace_delivered&lt;/code&gt; メッセージが送信される前に受信者に到達することが保証されます。</target>
        </trans-unit>
        <trans-unit id="79aeb596bfcda207847ddb49137293b64e87d84d" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;systools&lt;/code&gt;, the Erlang/OTP tools for packaging code (see Section &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt;), the keys &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;vsn&lt;/code&gt;, &lt;code&gt;modules&lt;/code&gt;, &lt;code&gt;registered&lt;/code&gt;, and &lt;code&gt;applications&lt;/code&gt; are also to be specified:</source>
          <target state="translated">使用する場合 &lt;code&gt;systools&lt;/code&gt; （セクション参照コードを包装するため、アーラン/ OTPツールを &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt; ）、キーは &lt;code&gt;description&lt;/code&gt; 、 &lt;code&gt;vsn&lt;/code&gt; 、 &lt;code&gt;modules&lt;/code&gt; 、 &lt;code&gt;registered&lt;/code&gt; 、および &lt;code&gt;applications&lt;/code&gt; 指定することもあります。</target>
        </trans-unit>
        <trans-unit id="aa09303e43191324a1721cf4208f1cd806ff1214" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;ttb&lt;/code&gt;, do not use module &lt;code&gt;dbg&lt;/code&gt; in application Runtime_Tools in parallel.</source>
          <target state="translated">&lt;code&gt;ttb&lt;/code&gt; を使用する場合、アプリケーションRuntime_Toolsでモジュール &lt;code&gt;dbg&lt;/code&gt; を並行して使用しないでください。</target>
        </trans-unit>
        <trans-unit id="dced03c330435f63fc32590f93a202225ef052df" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;{active, once}&lt;/code&gt; or &lt;code&gt;{active, N}&lt;/code&gt;, the socket changes behavior automatically when data is received. This can be confusing in combination with connection-oriented sockets (that is, &lt;code&gt;gen_tcp&lt;/code&gt;), as a socket with &lt;code&gt;{active, false}&lt;/code&gt; behavior reports closing differently than a socket with &lt;code&gt;{active, true}&lt;/code&gt; behavior. To simplify programming, a socket where the peer closed, and this is detected while in &lt;code&gt;{active, false}&lt;/code&gt; mode, still generates message &lt;code&gt;{tcp_closed,Socket}&lt;/code&gt; when set to &lt;code&gt;{active, once}&lt;/code&gt;, &lt;code&gt;{active, true}&lt;/code&gt;, or &lt;code&gt;{active, N}&lt;/code&gt; mode. It is therefore safe to assume that message &lt;code&gt;{tcp_closed,Socket}&lt;/code&gt;, possibly followed by socket port termination (depending on option &lt;code&gt;exit_on_close&lt;/code&gt;) eventually appears when a socket changes back and forth between &lt;code&gt;{active, true}&lt;/code&gt; and &lt;code&gt;{active, false}&lt;/code&gt; mode. However, &lt;strong&gt;when&lt;/strong&gt; peer closing is detected it is all up to the underlying TCP/IP stack and protocol.</source>
          <target state="translated">使用する場合 &lt;code&gt;{active, once}&lt;/code&gt; 又は &lt;code&gt;{active, N}&lt;/code&gt; データを受信した場合、ソケットは自動的に動作を変更します。 &lt;code&gt;{active, false}&lt;/code&gt; 動作のソケットは、 &lt;code&gt;{active, true}&lt;/code&gt; 動作のソケットとは異なる方法で閉じることを報告するため、これは接続指向のソケット（つまり、 &lt;code&gt;gen_tcp&lt;/code&gt; ）と組み合わせると混乱する可能性があります。プログラミングを単純化するために、ピアが閉じたソケットで、これが &lt;code&gt;{active, false}&lt;/code&gt; モードのときに検出されますが、 &lt;code&gt;{active, once}&lt;/code&gt; 、 &lt;code&gt;{active, true}&lt;/code&gt; 、または &lt;code&gt;{active, N}&lt;/code&gt; に設定されている場合でもメッセージ &lt;code&gt;{tcp_closed,Socket}&lt;/code&gt; が生成されます、N}モード。したがって、そのメッセージを想定しても安全です &lt;code&gt;{tcp_closed,Socket}&lt;/code&gt; 、続いてソケットポートの終了（オプション &lt;code&gt;exit_on_close&lt;/code&gt; によって異なります）は、ソケットが &lt;code&gt;{active, true}&lt;/code&gt; &lt;code&gt;{active, false}&lt;/code&gt; モードと{active、false}モードの間を行き来するときに最終的に表示されます。しかし、&lt;strong&gt;とき&lt;/strong&gt;ピア閉鎖が検出され、それは根本的なTCP / IPスタックおよびプロトコルへのすべてのアップです。</target>
        </trans-unit>
        <trans-unit id="2fcb6b502d0fb8883fe722b0fb211f708e76b4ea" translate="yes" xml:space="preserve">
          <source>When using Dialyzer from the command line, output the raw analysis results (Erlang terms) instead of the formatted result. The raw format is easier to post-process (for example, to filter warnings or to output HTML pages).</source>
          <target state="translated">コマンドラインからDialyzerを使うときは、フォーマットされた結果ではなく、生の解析結果(Erlang用語)を出力してください。生の形式の方が後処理が簡単です(例えば、警告をフィルタリングしたり、HTMLページを出力したり)。</target>
        </trans-unit>
        <trans-unit id="895bf807f2bce58c7df0a72cbf3fb93cefba69cf" translate="yes" xml:space="preserve">
          <source>When using Dialyzer from the command line, send the analysis results to the specified outfile rather than to &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="translated">コマンドラインからDialyzerを使用する場合、分析結果を &lt;code&gt;stdout&lt;/code&gt; ではなく、指定された出力ファイルに送信します。</target>
        </trans-unit>
        <trans-unit id="da094abac8d6ebe76a11e697f4e1c5d8c383f3e5" translate="yes" xml:space="preserve">
          <source>When using Eprof, expect a slowdown in program execution.</source>
          <target state="translated">Eprof を使用する場合は、プログラムの実行が遅くなることが予想されます。</target>
        </trans-unit>
        <trans-unit id="8ac2072110b05033591debd298147443f0f01fa0" translate="yes" xml:space="preserve">
          <source>When using a &lt;code&gt;&lt;a href=&quot;erl_tracer&quot;&gt;tracer module&lt;/a&gt;&lt;/code&gt;, the module must be loaded before the match specification is executed. If it is not loaded, the match fails.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erl_tracer&quot;&gt;tracer module&lt;/a&gt;&lt;/code&gt; を使用する場合、一致指定を実行する前にモジュールをロードする必要があります。ロードされていない場合、一致は失敗します。</target>
        </trans-unit>
        <trans-unit id="1061184d8334715a1b4b165eee90f4c38b81216b" translate="yes" xml:space="preserve">
          <source>When using binary encoding, the structure of the termination id's needs to be specified.</source>
          <target state="translated">バイナリエンコーディングを使用する場合は、終端 ID の構造を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="05cb8889170e86b20dbe5a37d8a1c94a4de731e5" translate="yes" xml:space="preserve">
          <source>When using long node names, the code is slightly different as shown in the following example:</source>
          <target state="translated">長いノード名を使用する場合は、以下の例のようにコードが若干異なります。</target>
        </trans-unit>
        <trans-unit id="f2766f8a1c9c5b824a82d01d204ba0da23305f93" translate="yes" xml:space="preserve">
          <source>When using one of the specialized decodes, exclusive or selective decode, instructions must be given in a configuration file. Option &lt;code&gt;asn1config&lt;/code&gt; enables specialized decodes and takes the configuration file in concern. The configuration file has the same name as the ASN.1 specification, but with extension &lt;code&gt;.asn1config&lt;/code&gt;.</source>
          <target state="translated">専用のデコードまたは選択的なデコードのいずれかを使用する場合は、構成ファイルで命令を指定する必要があります。オプション &lt;code&gt;asn1config&lt;/code&gt; は、特殊なデコードを有効にし、関連する構成ファイルを取得します。構成ファイルの名前はASN.1仕様と同じですが、拡張子は &lt;code&gt;.asn1config&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="db0b593e72759555e6318e54e37fd3dd78c4b583" translate="yes" xml:space="preserve">
          <source>When using text encoding(s), there is actually two different configs controlling what software to use:</source>
          <target state="translated">テキストエンコーディングを使用する場合、実際にはどのソフトウェアを使用するかを制御する2つの異なる設定があります。</target>
        </trans-unit>
        <trans-unit id="6b22551cdbafd14a01ac76572f423a143928c5aa" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;load/unload&lt;/code&gt; interfaces, the driver is not unloaded until the &lt;strong&gt;last port&lt;/strong&gt; using the driver is closed. Function &lt;code&gt;unload/1&lt;/code&gt; can return immediately, as the &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; have no interrest in when the unloading occurs. The driver is unloaded when no one needs it any longer.</source>
          <target state="translated">&lt;code&gt;load/unload&lt;/code&gt; インターフェイスを使用する場合、ドライバーを使用する&lt;strong&gt;最後のポート&lt;/strong&gt;が閉じるまで、ドライバーはアンロードされません。関数 &lt;code&gt;unload/1&lt;/code&gt; は、アンロードが発生したときに &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; が介入しないため、すぐに戻ることができます。ドライバーは、誰もそれを必要としなくなったときにアンロードされます。</target>
        </trans-unit>
        <trans-unit id="3ebfa3ee9cf60736bbe38ab4cca43cd168ab98e8" translate="yes" xml:space="preserve">
          <source>When using the default configuration, the data to pass over a connection needs to be delivered as is to the node on the receiving end in the &lt;strong&gt;exact same order&lt;/strong&gt;, with no loss of data what so ever, as sent from the sending node.</source>
          <target state="translated">デフォルトの構成を使用する場合、接続を通過するデータは、送信側ノードから送信されるデータをまったく失うことなく、&lt;strong&gt;まったく同じ順序&lt;/strong&gt;で受信側のノードにそのまま配信される必要があります。</target>
        </trans-unit>
        <trans-unit id="0c053c5fc182ecd19f8594a98a6d280896669e6b" translate="yes" xml:space="preserve">
          <source>When using the internal format for logs, use functions &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#log_terms-2&quot;&gt;log_terms/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#alog-2&quot;&gt;alog/2&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#alog_terms-2&quot;&gt;alog_terms/2&lt;/a&gt;&lt;/code&gt;. These functions log one or more Erlang terms. By prefixing each of the functions with a &lt;code&gt;b&lt;/code&gt; (for &quot;binary&quot;), we get the corresponding &lt;code&gt;blog()&lt;/code&gt; functions for the external format. These functions log one or more chunks of bytes. For example, to log the string &lt;code&gt;&quot;hello&quot;&lt;/code&gt; in ASCII format, you can use &lt;code&gt;disk_log:blog(Log, &quot;hello&quot;)&lt;/code&gt;, or &lt;code&gt;disk_log:blog(Log, list_to_binary(&quot;hello&quot;))&lt;/code&gt;. The two alternatives are equally efficient.</source>
          <target state="translated">ログの内部形式を使用する場合は、関数 &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#log_terms-2&quot;&gt;log_terms/2&lt;/a&gt;&lt;/code&gt; 、alog &lt;code&gt;&lt;a href=&quot;#alog-2&quot;&gt;alog/2&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#alog_terms-2&quot;&gt;alog_terms/2&lt;/a&gt;&lt;/code&gt; を使用します。これらの関数は、1つ以上のErlang用語を記録します。各関数の前に &lt;code&gt;b&lt;/code&gt; （「バイナリ」）を付けると、対応する外部形式の &lt;code&gt;blog()&lt;/code&gt; 関数が得られます。これらの関数は、1つ以上のバイトのチャンクを記録します。たとえば、文字列 &lt;code&gt;&quot;hello&quot;&lt;/code&gt; をASCII形式で &lt;code&gt;disk_log:blog(Log, &quot;hello&quot;)&lt;/code&gt; または &lt;code&gt;disk_log:blog(Log, list_to_binary(&quot;hello&quot;))&lt;/code&gt; ます。 2つの選択肢は同等に効率的です。</target>
        </trans-unit>
        <trans-unit id="b4a43444e4a47c6747c01683f8434e4d77e198b9" translate="yes" xml:space="preserve">
          <source>When using the state object from this function the &lt;code&gt;rand&lt;/code&gt; functions using it may throw exception &lt;code&gt;low_entropy&lt;/code&gt; in case the random generator failed due to lack of secure &quot;randomness&quot;.</source>
          <target state="translated">この関数の状態オブジェクトを使用する場合、それを使用する &lt;code&gt;rand&lt;/code&gt; 関数は、安全な「ランダム性」の欠如のためにランダムジェネレーターが失敗した場合に、例外 &lt;code&gt;low_entropy&lt;/code&gt; をスローすることがあります。</target>
        </trans-unit>
        <trans-unit id="f9cf555c8604c8a038c91aab86896c66a21405ac" translate="yes" xml:space="preserve">
          <source>When using version 3, then (at least one) &lt;strong&gt;usm user&lt;/strong&gt; has to be registered.</source>
          <target state="translated">バージョン3を使用する場合、（少なくとも1人の）&lt;strong&gt;usmユーザー&lt;/strong&gt;を登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="ec7bdbbb710766593c75e9261e59e0df0f24c88d" translate="yes" xml:space="preserve">
          <source>When white-box testing an Erlang application, it is useful to be able to measure the code coverage of the test. &lt;code&gt;Common Test&lt;/code&gt; provides simple access to the OTP Cover tool for this purpose. &lt;code&gt;Common Test&lt;/code&gt; handles all necessary communication with the Cover tool (starting, compiling, analysing, and so on). The &lt;code&gt;Common Test&lt;/code&gt; user only needs to specify the extent of the code coverage analysis.</source>
          <target state="translated">Erlangアプリケーションをホワイトボックステストする場合、テストのコードカバレッジを測定できると便利です。 &lt;code&gt;Common Test&lt;/code&gt; では、この目的でOTPカバーツールに簡単にアクセスできます。 &lt;code&gt;Common Test&lt;/code&gt; は、カバーツールとのすべての必要な通信（開始、コンパイル、分析など）を処理します。 &lt;code&gt;Common Test&lt;/code&gt; ユーザーは、コードカバレッジ分析の範囲を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="9f214ea79f2660a8546905638532084bd1af76b3" translate="yes" xml:space="preserve">
          <source>When working with binaries, you can get the horrible &quot;double UTF-8 encoding&quot;, where strange characters are encoded in your binaries or files. In other words, you can get a UTF-8 encoded binary that for the second time is encoded as UTF-8. A common situation is where you read a file, byte by byte, but the content is already UTF-8. If you then convert the bytes to UTF-8, using, for example, the &lt;code&gt;unicode&lt;/code&gt; module, or by writing to a file opened with option &lt;code&gt;{encoding,utf8}&lt;/code&gt;, you have each &lt;strong&gt;byte&lt;/strong&gt; in the input file encoded as UTF-8, not each character of the original text (one character can have been encoded in many bytes). There is no real remedy for this other than to be sure of which data is encoded in which format, and never convert UTF-8 data (possibly read byte by byte from a file) into UTF-8 again.</source>
          <target state="translated">バイナリを使用すると、恐ろしい「ダブルUTF-8エンコーディング」を取得できます。この場合、奇妙な文字がバイナリまたはファイルにエンコードされます。つまり、UTF-8でエンコードされたバイナリを2度目に取得できます。一般的な状況では、ファイルをバイト単位で読み取りますが、コンテンツはすでにUTF-8です。次に、たとえば &lt;code&gt;unicode&lt;/code&gt; モジュールを使用するか、オプション &lt;code&gt;{encoding,utf8}&lt;/code&gt; で開いたファイルに書き込むことにより、バイトをUTF-8に変換すると、各&lt;strong&gt;バイト&lt;/strong&gt;が得られ&lt;strong&gt;ます&lt;/strong&gt;元のテキストの各文字ではなく、UTF-8としてエンコードされた入力ファイル内（1文字が多くのバイトでエンコードされている可能性があります）。どのデータがどの形式でエンコードされているかを確認し、UTF-8データ（ファイルからバイト単位で読み取られる可能性があります）をUTF-8に再度変換しないこと以外に、これに対する実際の解決策はありません。</target>
        </trans-unit>
        <trans-unit id="f8aa37a649829db83e3c9dedf652e7985f8d65bf" translate="yes" xml:space="preserve">
          <source>When writing a driver in C++, the driver entry is to be of &lt;code&gt;&quot;C&quot;&lt;/code&gt; linkage. One way to do this is to put the following line somewhere before the driver entry:</source>
          <target state="translated">C ++でドライバーを作成する場合、ドライバーエントリは &lt;code&gt;&quot;C&quot;&lt;/code&gt; リンケージのものです。これを行う1つの方法は、次の行をドライバーエントリの前のどこかに置くことです。</target>
        </trans-unit>
        <trans-unit id="0855b2f59cc7fd85a55a378f3ac199542a22335d" translate="yes" xml:space="preserve">
          <source>When writing a driver to make a communications protocol available to Erlang, one should know just about everything worth knowing about that particular protocol. All operation must be non-blocking and all possible situations are to be accounted for in the driver. A non-stable driver will affect and/or crash the whole Erlang runtime system.</source>
          <target state="translated">Erlangで通信プロトコルを使えるようにするためにドライバを書くとき、その特定のプロトコルについて知っておくべきことはすべて知っておくべきです。すべての操作はノンブロッキングでなければならず、すべての可能性のある状況をドライバの中で説明しなければなりません。不安定なドライバはErlangのランタイムシステム全体に影響を与えたり、クラッシュさせたりします。</target>
        </trans-unit>
        <trans-unit id="a72c2f5d7c0d4febcd9848b5e2d40ba7cee9b091" translate="yes" xml:space="preserve">
          <source>When writing data it's generally more efficient to write a list of binaries rather than a list of integers. It is not needed to flatten a deep list before writing. On Unix hosts, scatter output, which writes a set of buffers in one operation, is used when possible. In this way &lt;code&gt;write(FD, [Bin1, Bin2 | Bin3])&lt;/code&gt; writes the contents of the binaries without copying the data at all, except for perhaps deep down in the operating system kernel.</source>
          <target state="translated">データを書き込むときは、通常、整数のリストではなくバイナリのリストを書き込む方が効率的です。書く前に深いリストをフラットにする必要はありません。Unixホストでは、可能な場合、1回の操作で一連のバッファを書き込むスキャッタ出力が使用されます。このようにして、 &lt;code&gt;write(FD, [Bin1, Bin2 | Bin3])&lt;/code&gt; は、オペレーティングシステムカーネルの深いところを除いて、データをまったくコピーせずにバイナリの内容を書き込みます。</target>
        </trans-unit>
        <trans-unit id="3b93d4af25f4cfa6e840871298ee7870c462c231" translate="yes" xml:space="preserve">
          <source>When writing new event handlers for the alarm handler, the following events must be handled:</source>
          <target state="translated">アラームハンドラの新規イベントハンドラを記述する際には、以下のイベントを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="373413f347fd7c204258c00e02a894b57247817b" translate="yes" xml:space="preserve">
          <source>When writing recursive functions, it is preferable to make them tail-recursive so that they can execute in constant memory space:</source>
          <target state="translated">再帰的な関数を書く場合は、一定のメモリ空間で実行できるように末尾再帰的にすることが望ましい。</target>
        </trans-unit>
        <trans-unit id="aa2d5599c173fb1e0df9df6db989c552f2a87193" translate="yes" xml:space="preserve">
          <source>When writing tests, the programmer may discover dependencies (in order to get the tests to run) that ought not to be there, and which need to be abstracted away to get a cleaner design. This helps eliminate bad dependencies before they spread throughout the code.</source>
          <target state="translated">テストを書くときに、プログラマは (テストを実行させるために)そこにあるべきではない依存関係を発見することがあり、よりすっきりとしたデザインを得るために抽象化する必要があります。これは、悪い依存関係がコード全体に広がる前に排除するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3af0ab66421941647abf2fd21f2bc78b64c5b301" translate="yes" xml:space="preserve">
          <source>When you are finished with a registry, close it to remove all the objects and free the memory back to the system:</source>
          <target state="translated">レジストリが終わったら、レジストリを閉じてすべてのオブジェクトを削除し、メモリをシステムに戻して解放します。</target>
        </trans-unit>
        <trans-unit id="81517dd740949b1006611dd1f8a8b5246c788490" translate="yes" xml:space="preserve">
          <source>When you do application:start(odbc) the only thing that happens is that a supervisor process is started. For each call to the API function connect/2 a process is spawned and added as a child to the Erlang ODBC supervisor. The supervisors only tasks are to provide error-log reports, if a child process should die abnormally, and the possibility to do a code change. Only the client process has the knowledge to decide if this connection managing process should be restarted.</source>
          <target state="translated">application:start(odbc)を実行したときに起こることはスーパバイザプロセスが開始されることだけです。API関数connect/2を呼び出すたびにプロセスが生成され、Erlang ODBCスーパーバイザの子プロセスとして追加されます。スーパーバイザの唯一のタスクはエラーログレポートを提供することと、子プロセスが異常終了した場合の対処、コード変更の可能性です。クライアントプロセスだけがこの接続管理プロセスを再起動すべきかどうかを決定する知識を持っています。</target>
        </trans-unit>
        <trans-unit id="7400e1e45c6bbbe2f2d319b38f4bbb29db5b56b8" translate="yes" xml:space="preserve">
          <source>When you have covered all scenarios, call &lt;code&gt;&lt;a href=&quot;#make_config-1&quot;&gt;make_config/1&lt;/a&gt;&lt;/code&gt; in order to create a configuration. The configuration is written to a file that you have chosen. This configuration file can later be read by an Erlang runtime-system at startup. Pass the command line argument &lt;code&gt;-args_file FileName&lt;/code&gt; to the &lt;code&gt;erl(1)&lt;/code&gt; command.</source>
          <target state="translated">すべてのシナリオをカバーしたら、 &lt;code&gt;&lt;a href=&quot;#make_config-1&quot;&gt;make_config/1&lt;/a&gt;&lt;/code&gt; を呼び出して構成を作成します。構成は、選択したファイルに書き込まれます。この設定ファイルは後で起動時にErlangランタイムシステムで読み取ることができます。コマンドライン引数 &lt;code&gt;-args_file FileName&lt;/code&gt; を &lt;code&gt;erl(1)&lt;/code&gt; コマンドに渡します。</target>
        </trans-unit>
        <trans-unit id="2d53da3f7d650259d1f729b92236227077a1d6a9" translate="yes" xml:space="preserve">
          <source>When you have made a new version of a release, a release package can be created with this new version and transferred to the target environment.</source>
          <target state="translated">リリースの新バージョンを作成した場合、この新バージョンでリリースパッケージを作成し、ターゲット環境に転送することができます。</target>
        </trans-unit>
        <trans-unit id="aefe043fafd90a506fefaff1bdc21fce94c6f9bc" translate="yes" xml:space="preserve">
          <source>When you have written code implementing some specific functionality you might want to make the code into an &lt;strong&gt;application&lt;/strong&gt;, that is, a component that can be started and stopped as a unit, and which can also be reused in other systems.</source>
          <target state="translated">特定の機能を実装するコードを記述したら、そのコードを&lt;strong&gt;アプリケーション&lt;/strong&gt;（つまり、1つの単位として起動および停止でき、他のシステムでも再利用できるコンポーネント）にすることができます。</target>
        </trans-unit>
        <trans-unit id="1d367f0394e334cbcef285f586eb6654ee9a4318" translate="yes" xml:space="preserve">
          <source>When you have written one or more applications, you might want to create a complete system with these applications and a subset of the Erlang/OTP applications. This is called a &lt;strong&gt;release&lt;/strong&gt;.</source>
          <target state="translated">1つ以上のアプリケーションを作成したら、これらのアプリケーションとErlang / OTPアプリケーションのサブセットで完全なシステムを作成したい場合があります。これは&lt;strong&gt;リリース&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="654964da7073e7c0e406ea7aa179e002a5b8ce21" translate="yes" xml:space="preserve">
          <source>When you know that your list is only one level deep, you can use &lt;code&gt;lists:append/1&lt;/code&gt;.</source>
          <target state="translated">リストの深さが1レベルしかないことがわかっている場合は、 &lt;code&gt;lists:append/1&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="02bb765c4c067cc8ce440c6583ae9e207c512d37" translate="yes" xml:space="preserve">
          <source>When you retrieve a stored string or binary value from the registry, the registry maintains a pointer to the object and you are passed a copy of that pointer. You should never free an object retrieved in this manner because when the registry later attempts to free it, a runtime error occurs that likely causes the C-node to crash.</source>
          <target state="translated">レジストリから保存されている文字列やバイナリ値を取得すると、 レジストリはオブジェクトへのポインタを保持しており、そのポインタのコピーが渡されます。このようにして取得したオブジェクトを解放してはいけません。 レジストリが後で解放しようとすると、ランタイムエラーが発生してCノードがクラッシュする可能性が高いからです。</target>
        </trans-unit>
        <trans-unit id="5626fd2395b6a4085f46c5ac192af7d4f4d8e554" translate="yes" xml:space="preserve">
          <source>When you run the &lt;code&gt;et_display_demo:test().&lt;/code&gt; function in the example above, the &lt;code&gt;Viewer&lt;/code&gt; window will look like this:</source>
          <target state="translated">&lt;code&gt;et_display_demo:test().&lt;/code&gt; を実行したとき。上記の例の関数では、 &lt;code&gt;Viewer&lt;/code&gt; ウィンドウは次のようになります。</target>
        </trans-unit>
        <trans-unit id="605aa269180a77759984c8901f4c82eed551f821" translate="yes" xml:space="preserve">
          <source>When you run the &lt;code&gt;et_trace_demo:test()&lt;/code&gt; function above, the &lt;code&gt;Viewer&lt;/code&gt; window will look like this screenshot:</source>
          <target state="translated">上記の &lt;code&gt;et_trace_demo:test()&lt;/code&gt; 関数を実行すると、 &lt;code&gt;Viewer&lt;/code&gt; ウィンドウは次のスクリーンショットのようになります。</target>
        </trans-unit>
        <trans-unit id="960b45a93de3d4904386ce3821892195b9e7ab8f" translate="yes" xml:space="preserve">
          <source>When you start an Erlang system that is going to talk to other Erlang systems, you must give it a name, for example:</source>
          <target state="translated">他のErlangシステムと話をするErlangシステムを起動するときには、例えば名前をつけなければなりません。</target>
        </trans-unit>
        <trans-unit id="8df6d7cad16972ed6b617cfa7ca16f92b6efea50" translate="yes" xml:space="preserve">
          <source>When you start your first bash shell, you will get an awful prompt. You might also have a &lt;code&gt;PATH&lt;/code&gt; environment variable that contains backslashes and such. Edit &lt;code&gt;$HOME/.profile&lt;/code&gt; and &lt;code&gt;$HOME/.bashrc&lt;/code&gt; to set fair prompts and a correct PATH. Also do an &lt;code&gt;export SHELL&lt;/code&gt; in &lt;code&gt;.profile&lt;/code&gt;. For some non-obvious reason the environment variable &lt;code&gt;$SHELL&lt;/code&gt; is not exported in bash. Also note that &lt;code&gt;.profile&lt;/code&gt; is run at login time and &lt;code&gt;.bashrc&lt;/code&gt; when sub shells are created. You'll need to explicitly source &lt;code&gt;.bashrc&lt;/code&gt; from &lt;code&gt;.profile&lt;/code&gt; if you want the commands there to be run at login time (like setting up aliases, shell functions and the like). You can for example do like this at the end of &lt;code&gt;.profile&lt;/code&gt;:</source>
          <target state="translated">最初のbashシェルを開始すると、ひどいプロンプトが表示されます。バックスラッシュなどを含む &lt;code&gt;PATH&lt;/code&gt; 環境変数もあるかもしれません。 &lt;code&gt;$HOME/.profile&lt;/code&gt; および &lt;code&gt;$HOME/.bashrc&lt;/code&gt; を編集して、適切なプロンプトと正しいPATHを設定します。またやる &lt;code&gt;export SHELL&lt;/code&gt; で &lt;code&gt;.profile&lt;/code&gt; 。明らかでない理由により、環境変数 &lt;code&gt;$SHELL&lt;/code&gt; はbashにエクスポートされません。また、 &lt;code&gt;.profile&lt;/code&gt; はログイン時に実行され、 &lt;code&gt;.bashrc&lt;/code&gt; はサブシェルが作成されるときに実行されます。 &lt;code&gt;.profile&lt;/code&gt; から &lt;code&gt;.bashrc&lt;/code&gt; を明示的にソースする必要がありますログイン時にコマンドを実行したい場合（エイリアス、シェル関数などの設定）。たとえば、 &lt;code&gt;.profile&lt;/code&gt; の最後で次のようにすることができます。</target>
        </trans-unit>
        <trans-unit id="9bbc912db27df1bdd5b6c3cc6fb0b420ae0c2a51" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;&lt;a href=&quot;erl_connect&quot;&gt;erl_connect&lt;/a&gt;&lt;/code&gt; to connect to an Erlang node, a connection is first made to &lt;code&gt;epmd&lt;/code&gt; and, if the node is known, a connection is then made to the Erlang node.</source>
          <target state="translated">あなたが使用している場合 &lt;code&gt;&lt;a href=&quot;erl_connect&quot;&gt;erl_connect&lt;/a&gt;&lt;/code&gt; を Erlangのノードに接続するには、接続が最初に行われ &lt;code&gt;epmd&lt;/code&gt; 、ノードが知られている場合、接続は、Erlangのノードに対して行われます。</target>
        </trans-unit>
        <trans-unit id="9186fbf7f3fc276c1864ff1a046c155293e1a73d" translate="yes" xml:space="preserve">
          <source>When you've followed the instructions there, you also need to install these packages: autoconf, make, perl, and tar. You do so by running the following in the msys console:</source>
          <target state="translated">autoconf,make,perl,tar をインストールする必要があります。インストールは msys コンソールで以下のように実行します。</target>
        </trans-unit>
        <trans-unit id="b5bd0acac37a6b1a7c503370b5d247b256244684" translate="yes" xml:space="preserve">
          <source>Whenever &lt;code&gt;mod:func(...)&lt;/code&gt; is called after this, token &lt;code&gt;seq_trace&lt;/code&gt; is set on the executing process.</source>
          <target state="translated">この後に &lt;code&gt;mod:func(...)&lt;/code&gt; が呼び出されるたびに、実行中のプロセスにトークン &lt;code&gt;seq_trace&lt;/code&gt; が設定されます。</target>
        </trans-unit>
        <trans-unit id="d72b69344dfa59a6a3f516c3fd6fb4fed315938a" translate="yes" xml:space="preserve">
          <source>Whenever a &lt;code&gt;gen_server&lt;/code&gt; process is started using &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start/3,4&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt;, this function is called by the new process to initialize.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start/3,4&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;gen_server&lt;/code&gt; プロセスが開始されると、この関数は新しいプロセスによって呼び出されて初期化されます。</target>
        </trans-unit>
        <trans-unit id="4636ebe5538e407f431af7436aab013abc47a599" translate="yes" xml:space="preserve">
          <source>Whenever a &lt;code&gt;gen_server&lt;/code&gt; process receives a request sent using &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2,3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#multi_call-2&quot;&gt;multi_call/2,3,4&lt;/a&gt;&lt;/code&gt;, this function is called to handle the request.</source>
          <target state="translated">たび &lt;code&gt;gen_server&lt;/code&gt; のプロセスが使用して要求を送信した受信 &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2,3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#multi_call-2&quot;&gt;multi_call/2,3,4&lt;/a&gt;&lt;/code&gt; を、この関数は、要求を処理するために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8246b3f7ddedcfbbf57cabb4f3ba4a48febfdd74" translate="yes" xml:space="preserve">
          <source>Whenever a &lt;code&gt;gen_server&lt;/code&gt; process receives a request sent using &lt;code&gt;&lt;a href=&quot;#cast-2&quot;&gt;cast/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#abcast-2&quot;&gt;abcast/2,3&lt;/a&gt;&lt;/code&gt;, this function is called to handle the request.</source>
          <target state="translated">たび &lt;code&gt;gen_server&lt;/code&gt; のプロセスが要求を使用して送信された受信 &lt;code&gt;&lt;a href=&quot;#cast-2&quot;&gt;cast/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#abcast-2&quot;&gt;abcast/2,3&lt;/a&gt;&lt;/code&gt; を、この関数は、要求を処理するために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="59d5a5416d0ba531e35225680d4d972654eaf438" translate="yes" xml:space="preserve">
          <source>Whenever a &lt;code&gt;gen_statem&lt;/code&gt; is started using &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start/3,4&lt;/a&gt;&lt;/code&gt;, this function is called by the new process to initialize the implementation state and server data.</source>
          <target state="translated">たび &lt;code&gt;gen_statem&lt;/code&gt; を使用して開始され &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start/3,4&lt;/a&gt;&lt;/code&gt; 、この機能は実装状態やサーバーのデータを初期化するために、新しいプロセスによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1fbe0f5778a727d43412487be9078f75fff292b2" translate="yes" xml:space="preserve">
          <source>Whenever a &lt;code&gt;gen_statem&lt;/code&gt; receives an event from &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#cast-2&quot;&gt;cast/2&lt;/a&gt;&lt;/code&gt;, or as a normal process message, one of these functions is called. If &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;state_functions&lt;/code&gt;, &lt;code&gt;Module:StateName/3&lt;/code&gt; is called, and if it is &lt;code&gt;handle_event_function&lt;/code&gt;, &lt;code&gt;Module:handle_event/4&lt;/code&gt; is called.</source>
          <target state="translated">たび &lt;code&gt;gen_statem&lt;/code&gt; はからイベントを受信 &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#cast-2&quot;&gt;cast/2&lt;/a&gt;&lt;/code&gt; 、または通常のプロセスメッセージなどを、これらの機能の一つが呼び出されます。 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;state_functions&lt;/code&gt; の場合、 &lt;code&gt;Module:StateName/3&lt;/code&gt; が呼び出され、 &lt;code&gt;handle_event_function&lt;/code&gt; の場合、 &lt;code&gt;Module:handle_event/4&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="060f352ef970eb18feed7d139ddbf0bd578e000a" translate="yes" xml:space="preserve">
          <source>Whenever a group is executed, if &lt;code&gt;init_per_group&lt;/code&gt; and &lt;code&gt;end_per_group&lt;/code&gt; do not exist in the suite, &lt;code&gt;Common Test&lt;/code&gt; calls dummy functions (with the same names) instead. Output generated by hook functions are saved to the log files for these dummies. For more information, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#manipulating&quot;&gt;Manipulating Tests&lt;/a&gt;&lt;/code&gt; in section Common Test Hooks.</source>
          <target state="translated">グループが実行されるたびに、 &lt;code&gt;init_per_group&lt;/code&gt; および &lt;code&gt;end_per_group&lt;/code&gt; がスイートに存在しない場合、 &lt;code&gt;Common Test&lt;/code&gt; は代わりに（同じ名前の）ダミー関数を呼び出します。フック関数によって生成された出力は、これらのダミーのログファイルに保存されます。詳細については、「一般的なテストフック」の「 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#manipulating&quot;&gt;Manipulating Tests&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="abdf13a8a96504ff3ed49fca4f7de802cf3577c0" translate="yes" xml:space="preserve">
          <source>Whenever a new event handler is added to an event manager, this function is called to initialize the event handler.</source>
          <target state="translated">新しいイベントハンドラがイベントマネージャに追加されるたびに、この関数が呼び出されてイベントハンドラを初期化します。</target>
        </trans-unit>
        <trans-unit id="badee53ec6214ee55106eb2666ae6e01689cd3f4" translate="yes" xml:space="preserve">
          <source>Whenever a supervisor bridge is started using &lt;code&gt;&lt;a href=&quot;#start_link-2&quot;&gt;start_link/2,3&lt;/a&gt;&lt;/code&gt;, this function is called by the new process to start the subsystem and initialize.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_link-2&quot;&gt;start_link/2,3&lt;/a&gt;&lt;/code&gt; を使用してスーパーバイザブリッジが起動されるたびに、この関数は新しいプロセスによって呼び出され、サブシステムを起動して初期化します。</target>
        </trans-unit>
        <trans-unit id="ac9804b31553b68b86de8b8d607773807cff019f" translate="yes" xml:space="preserve">
          <source>Whenever a supervisor is started using &lt;code&gt;&lt;a href=&quot;#start_link-2&quot;&gt;start_link/2,3&lt;/a&gt;&lt;/code&gt;, this function is called by the new process to find out about restart strategy, maximum restart intensity, and child specifications.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_link-2&quot;&gt;start_link/2,3&lt;/a&gt;&lt;/code&gt; を使用してスーパーバイザが開始されると、この関数は新しいプロセスによって呼び出され、再起動戦略、最大再起動の強度、および子の仕様について調べます。</target>
        </trans-unit>
        <trans-unit id="4b83efec02f8d41a6ae9c7e77ef60624db6e6a32" translate="yes" xml:space="preserve">
          <source>Whenever an &lt;strong id=&quot;ordering_function&quot;&gt;ordering function&lt;/strong&gt;&lt;code&gt;F&lt;/code&gt; is expected as argument, it is assumed that the following properties hold of &lt;code&gt;F&lt;/code&gt; for all x, y, and z:</source>
          <target state="translated">&lt;strong id=&quot;ordering_function&quot;&gt;順序付け関数&lt;/strong&gt; &lt;code&gt;F&lt;/code&gt; が引数として期待されるときは常に、次のプロパティがすべてのx、y、およびzに対して &lt;code&gt;F&lt;/code&gt; を保持すると想定されます。</target>
        </trans-unit>
        <trans-unit id="f1074a783fc4777d27f52c523982cfb1f94fba10" translate="yes" xml:space="preserve">
          <source>Whenever an event handler is deleted from an event manager, this function is called. It is to be the opposite of &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; and do any necessary cleaning up.</source>
          <target state="translated">イベントハンドラーがイベントマネージャーから削除されるたびに、この関数が呼び出されます。 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; の反対で、必要なクリーンアップを行います。</target>
        </trans-unit>
        <trans-unit id="068fc6ee5a1c4d1d9b9294ae0200a38ff117c977" translate="yes" xml:space="preserve">
          <source>Whenever an event manager receives a request sent using &lt;code&gt;&lt;a href=&quot;#call-3&quot;&gt;call/3,4&lt;/a&gt;&lt;/code&gt;, this function is called for the specified event handler to handle the request.</source>
          <target state="translated">イベントマネージャが &lt;code&gt;&lt;a href=&quot;#call-3&quot;&gt;call/3,4&lt;/a&gt;&lt;/code&gt; を使用して送信されたリクエストを受信すると、指定されたイベントハンドラがこの関数を呼び出してリクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="5423fb1332b31975745a6de7e4d9bc58090c6de6" translate="yes" xml:space="preserve">
          <source>Whenever an event manager receives an event sent using &lt;code&gt;&lt;a href=&quot;#notify-2&quot;&gt;notify/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#sync_notify-2&quot;&gt;sync_notify/2&lt;/a&gt;&lt;/code&gt;, this function is called for each installed event handler to handle the event.</source>
          <target state="translated">イベントマネージャが &lt;code&gt;&lt;a href=&quot;#notify-2&quot;&gt;notify/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#sync_notify-2&quot;&gt;sync_notify/2&lt;/a&gt;&lt;/code&gt; を使用して送信されたイベントを受信するたびに、インストールされている各イベントハンドラに対してこの関数が呼び出され、イベントが処理されます。</target>
        </trans-unit>
        <trans-unit id="4351f2a3b168494b69e9b1be98a4b38f8367e952" translate="yes" xml:space="preserve">
          <source>Whenever option &lt;code&gt;extended_info&lt;/code&gt; is used, it results in a file not readable by versions of ETS before that in STDLIB 1.15.1</source>
          <target state="translated">オプション &lt;code&gt;extended_info&lt;/code&gt; を使用すると、STDLIB 1.15.1より前のバージョンのETSでファイルを読み取れなくなります。</target>
        </trans-unit>
        <trans-unit id="40a517195424f6c59533102727aaaf80a5a6a9c4" translate="yes" xml:space="preserve">
          <source>Whenever the application begins a new and demanding Mnesia task, or if it enters a new interesting phase in its execution, it can be a good idea to use &lt;code&gt;mnesia:report_event/1&lt;/code&gt;. &lt;code&gt;Event&lt;/code&gt; can be any term and generates a &lt;code&gt;{mnesia_user, Event}&lt;/code&gt; event for any processes that subscribe to Mnesia system events.</source>
          <target state="translated">アプリケーションが新しくて要求の厳しいMnesiaタスクを開始するとき、またはその実行で新しい興味深いフェーズに入る場合は常に、 &lt;code&gt;mnesia:report_event/1&lt;/code&gt; を使用することをお勧めします。 &lt;code&gt;Event&lt;/code&gt; は任意の用語にすることができ、Mnesiaシステムイベントにサブスクライブするすべてのプロセスに対して &lt;code&gt;{mnesia_user, Event}&lt;/code&gt; イベントを生成します。</target>
        </trans-unit>
        <trans-unit id="c1b3e73b65bf489cc2059c0d5cb3b8c01636a2e4" translate="yes" xml:space="preserve">
          <source>Whenever the function returns &lt;code&gt;false&lt;/code&gt; (either when a suspend would occur or when &lt;code&gt;noconnect&lt;/code&gt; was specified and the node was not already connected), the message is guaranteed &lt;strong&gt;not&lt;/strong&gt; to have been sent.</source>
          <target state="translated">関数が &lt;code&gt;false&lt;/code&gt; を返すとき（中断が発生したとき、または &lt;code&gt;noconnect&lt;/code&gt; が指定されていてノードがまだ接続されていないとき）は常に、メッセージが送信されてい&lt;strong&gt;ない&lt;/strong&gt;ことが保証されます。</target>
        </trans-unit>
        <trans-unit id="c1dadcfbaebba3928e790a14ae2ce1daeab89f8a" translate="yes" xml:space="preserve">
          <source>Whenever we receive a button event we start an event time-out of 30 seconds, and if we get an event type &lt;code&gt;timeout&lt;/code&gt; we reset the remaining code sequence.</source>
          <target state="translated">ボタンイベントを受け取るたびに、30秒のイベント &lt;code&gt;timeout&lt;/code&gt; を開始し、イベントタイプのタイムアウトが発生した場合は、残りのコードシーケンスをリセットします。</target>
        </trans-unit>
        <trans-unit id="f11e733d6957530218fa0c33e9b080d6c38678e6" translate="yes" xml:space="preserve">
          <source>Whenever you want to match out a number of elements in a sequence (zero or more) rather than a fixed set of elements, you need to use a glob. For example:</source>
          <target state="translated">固定された要素の集合ではなく、一連の要素の数(0 個以上)をマッチアウトしたい場合は、グロブを使用する必要があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="2d8517da58ab05b8c0b03e7088b8e296b4ae1c0f" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;&amp;lt;ReleaseDir&amp;gt;&lt;/code&gt; is</source>
          <target state="translated">ここで、 &lt;code&gt;&amp;lt;ReleaseDir&amp;gt;&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="6f3a961a4b885d1468059606ee74b25cafa51c46" translate="yes" xml:space="preserve">
          <source>Where E is the public exponent and N is public modulus.</source>
          <target state="translated">ここで、Eは公称指数、Nは公称弾性率です。</target>
        </trans-unit>
        <trans-unit id="4a7b7c13ae9c93fab8ce3de18c3783c30f1e1451" translate="yes" xml:space="preserve">
          <source>Where E is the public exponent, N is public modulus and D is the private exponent. The longer key format contains redundant information that will make the calculation faster. P1,P2 are first and second prime factors. E1,E2 are first and second exponents. C is the CRT coefficient. Terminology is taken from &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3477.txt&quot;&gt; RFC 3447&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Eは公開指数、Nは公開係数、Dは非公開指数です。長いキー形式には、計算を高速化する冗長な情報が含まれています。P1、P2は1番目と2番目の素因数です。E1、E2は1番目と2番目の指数です。CはCRT係数です。用語は &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3477.txt&quot;&gt; RFC 3447&lt;/a&gt;&lt;/code&gt; から取得されます。</target>
        </trans-unit>
        <trans-unit id="3144e74e87bbb4e8446bf9bded7d46890ebf3322" translate="yes" xml:space="preserve">
          <source>Where P, Q and G are the dss parameters and X is the private key.</source>
          <target state="translated">ここで、P、Q、Gはdssのパラメータであり、Xは秘密鍵である。</target>
        </trans-unit>
        <trans-unit id="2225bc73e98d80c1bfa4e4cf3ed86983be9f6abd" translate="yes" xml:space="preserve">
          <source>Where P, Q and G are the dss parameters and Y is the public key.</source>
          <target state="translated">ここで、P、Q、Gはdssのパラメータであり、Yは公開鍵である。</target>
        </trans-unit>
        <trans-unit id="4817edd006ce6eb15f5dd1caa449f5d7d24b519f" translate="yes" xml:space="preserve">
          <source>Where Verifier is &lt;code&gt;v&lt;/code&gt;, Generator is &lt;code&gt;g&lt;/code&gt; and Prime is&lt;code&gt;N&lt;/code&gt;, DerivedKey is &lt;code&gt;X&lt;/code&gt;, and Scrambler is &lt;code&gt;u&lt;/code&gt; (optional will be generated if not provided) from &lt;code&gt;&lt;a href=&quot;http://srp.stanford.edu/design.html&quot;&gt;SRP design&lt;/a&gt;&lt;/code&gt; Version = '3' | '6' | '6a'</source>
          <target state="translated">Verifierが &lt;code&gt;v&lt;/code&gt; 、Generatorが &lt;code&gt;g&lt;/code&gt; 、Primeが &lt;code&gt;N&lt;/code&gt; 、DerivedKeyが &lt;code&gt;X&lt;/code&gt; 、Scramblerが &lt;code&gt;u&lt;/code&gt; （指定されていない場合はオプションが生成されます）の場合、 &lt;code&gt;&lt;a href=&quot;http://srp.stanford.edu/design.html&quot;&gt;SRP design&lt;/a&gt;&lt;/code&gt; バージョン= '3' | '6' | 「6a」</target>
        </trans-unit>
        <trans-unit id="e63a13bf71d4a7ebc9b2737f3779c3e536718b27" translate="yes" xml:space="preserve">
          <source>Where is &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;http://srp.stanford.edu/design.html&quot;&gt;SRP design&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">どこにある &lt;code&gt;A&lt;/code&gt; または &lt;code&gt;B&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;http://srp.stanford.edu/design.html&quot;&gt;SRP design&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e839812da1a839a57adf7231f3fd47dc44d87628" translate="yes" xml:space="preserve">
          <source>Where is &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;http://srp.stanford.edu/design.html&quot;&gt;SRP design&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">どこにあるのか、 &lt;code&gt;b&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;http://srp.stanford.edu/design.html&quot;&gt;SRP design&lt;/a&gt;&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b9a1763ac9bc8b491978b150abc3fe5244acde7" translate="yes" xml:space="preserve">
          <source>Where the content of the top element is: &lt;code&gt;[{xmlText,[{dog,1}],1,[],&quot;\ Grand Danois\ &quot;,text}]&lt;/code&gt;. Text will be returned in &lt;code&gt;xmlText&lt;/code&gt; records. Though, usually documents are more complex, and the content of the top element will in that case be a nested structure with xmlElement records that in turn may have complex content. All of this reflects the structure of the XML document.</source>
          <target state="translated">一番上の要素の内容は、 &lt;code&gt;[{xmlText,[{dog,1}],1,[],&quot;\ Grand Danois\ &quot;,text}]&lt;/code&gt; です。テキストは &lt;code&gt;xmlText&lt;/code&gt; レコードで返されます。ただし、通常、ドキュメントはより複雑であり、その場合、最上位要素のコンテンツは、xmlElementレコードを含むネストされた構造になり、複雑なコンテンツが含まれる可能性があります。これらはすべて、XMLドキュメントの構造を反映しています。</target>
        </trans-unit>
        <trans-unit id="887842314d3d1ceea1cb4b38b8e7a7fc00c8daa0" translate="yes" xml:space="preserve">
          <source>Where to put the generated files. Default is the current directory.</source>
          <target state="translated">生成されたファイルをどこに置くか。デフォルトはカレントディレクトリです。</target>
        </trans-unit>
        <trans-unit id="5648598d9c1122279909495088842eeb61ff331f" translate="yes" xml:space="preserve">
          <source>Where to search for &lt;code&gt;.asn1db&lt;/code&gt; files and ASN.1 source specs to resolve references to other modules. This option can be repeated many times if there are several places to search in. The compiler searches the current directory first.</source>
          <target state="translated">他のモジュールへの参照を解決するために &lt;code&gt;.asn1db&lt;/code&gt; ファイルおよびASN.1ソース仕様を検索する場所。検索する場所が複数ある場合は、このオプションを何度も繰り返すことができます。コンパイラは、現在のディレクトリを最初に検索します。</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="ecbc2004e666a6ce8be8ae15948d6a5e5690e45c" translate="yes" xml:space="preserve">
          <source>Whereas a call to the following default code values would return a table with a RAM copy on the local node, no extra indexes, and the attributes defaulted to the list &lt;code&gt;[key,val]&lt;/code&gt;.</source>
          <target state="translated">これに対して、次のデフォルトコード値を呼び出すと、ローカルノードにRAMコピーがあり、追加のインデックスがなく、属性がリスト &lt;code&gt;[key,val]&lt;/code&gt; デフォルト設定されたテーブルが返されます。</target>
        </trans-unit>
        <trans-unit id="9d5abedb298ae261c18864ec4e752eb53242394e" translate="yes" xml:space="preserve">
          <source>Whereas tuples group things together, it is also needed to represent lists of things. Lists in Erlang are surrounded by square brackets, &quot;[&quot; and &quot;]&quot;. For example, a list of the temperatures of various cities in the world can be:</source>
          <target state="translated">タプルが物事をグループ化するのに対して、リストを表現するのにも必要です。Erlangではリストは角括弧で囲まれています。例えば、世界の様々な都市の温度のリストは次のようになります。</target>
        </trans-unit>
        <trans-unit id="36fcd280365ee86c3459e03bb8e681df6b1d1cfd" translate="yes" xml:space="preserve">
          <source>Whether or not the &lt;code&gt;&lt;a href=&quot;#transport_opt&quot;&gt;transport_opt()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;pool_size&lt;/code&gt; has been configured affects the format of the listing in the case of a connecting transport, since a value greater than 1 implies multiple transport processes for the same &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;, as in the listening case. The format in this case is similar to the listening case, with a &lt;code&gt;pool&lt;/code&gt; tuple in place of an &lt;code&gt;accept&lt;/code&gt; tuple.</source>
          <target state="translated">リスニングの場合と同様に、1より大きい値は同じ &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; の複数のトランスポートプロセスを意味するため、 &lt;code&gt;&lt;a href=&quot;#transport_opt&quot;&gt;transport_opt()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;pool_size&lt;/code&gt; が構成されているかどうかは、接続トランスポートの場合のリストのフォーマットに影響します。この場合の形式は、リスニングの場合と同様で、 &lt;code&gt;accept&lt;/code&gt; タプルの代わりに &lt;code&gt;pool&lt;/code&gt; タプルが使用されます。</target>
        </trans-unit>
        <trans-unit id="67b0b7e85711868c9741c95515f7371a72c9fbc7" translate="yes" xml:space="preserve">
          <source>Whether or not the &lt;code&gt;pick_peer/4&lt;/code&gt; application callback can modify the application state. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pick_peer/4&lt;/code&gt; アプリケーションコールバックがアプリケーションの状態を変更できるかどうか。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d449b0476061df0503275d5625f4fff86548ae57" translate="yes" xml:space="preserve">
          <source>Whether or not to count application-specific messages; those for which &lt;code&gt;diameter_app(3)&lt;/code&gt; callbacks take place. If false then only messages handled by diameter itself are counted: CER/CEA, DWR/DWA, DPR/DPA.</source>
          <target state="translated">アプリケーション固有のメッセージをカウントするかどうか。そのため、これらの &lt;code&gt;diameter_app(3)&lt;/code&gt; コールバックは場所を取ります。falseの場合、Diameter自体によって処理されるメッセージのみがカウントされます：CER / CEA、DWR / DWA、DPR / DPA。</target>
        </trans-unit>
        <trans-unit id="c70b0206c5df852a42e48a70b35c7ae080f23eb5" translate="yes" xml:space="preserve">
          <source>Whether or not to decode AVPs of type &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;OctetString()&lt;/a&gt;&lt;/code&gt; and its derived types &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterURI()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;IPFilterRule()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;QoSFilterRule()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;UTF8String()&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt; then AVPs of these types are decoded to string(). If &lt;code&gt;false&lt;/code&gt; then values are retained as binary().</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;OctetString()&lt;/a&gt;&lt;/code&gt; 型とその派生型 &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterURI()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;IPFilterRule()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;QoSFilterRule()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;UTF8String()&lt;/a&gt;&lt;/code&gt; の AVPをデコードするかどうか。 &lt;code&gt;true&lt;/code&gt; の場合、これらのタイプのAVPはstring（）にデコードされます。 &lt;code&gt;false&lt;/code&gt; の場合、値はbinary（）として保持されます。</target>
        </trans-unit>
        <trans-unit id="21de803a1e4d911ea618dcf97a6a267f7c0e0c32" translate="yes" xml:space="preserve">
          <source>Whether or not to enforce the RFC 6733 requirement that any message before capabilities exchange should close the peer connection. If false then unexpected messages are discarded.</source>
          <target state="translated">能力交換の前のメッセージはすべてピア接続を閉じるべきであるというRFC 6733の要件を適用するかどうか。false の場合、予期しないメッセージは破棄されます。</target>
        </trans-unit>
        <trans-unit id="4c4bdd79e26083d0f89cc38d1b9e82950a842605" translate="yes" xml:space="preserve">
          <source>Whether or not to regard an AVP setting the M-bit as erroneous when the command grammar in question does not explicitly allow the AVP. If &lt;code&gt;true&lt;/code&gt; then such AVPs are regarded as 5001 errors, DIAMETER_AVP_UNSUPPORTED. If &lt;code&gt;false&lt;/code&gt; then the M-bit is ignored and policing it becomes the receiver's responsibility.</source>
          <target state="translated">問題のコマンド文法でAVPが明示的に許可されていない場合に、Mビットを設定するAVPを誤っていると見なすかどうか。場合は &lt;code&gt;true&lt;/code&gt; そのようなのAVPは5001のエラー、DIAMETER_AVP_UNSUPPORTEDとみなされています。場合 &lt;code&gt;false&lt;/code&gt; 、その後M-ビットは無視され、ポリシングされ、それは、受信者の責任となります。</target>
        </trans-unit>
        <trans-unit id="48a11d24108508650ea1d77cab3defeb042c79b6" translate="yes" xml:space="preserve">
          <source>Whether or not to require that the number of AVPs in a message or grouped AVP agree with those specified in the dictionary in question when passing messages to &lt;code&gt;diameter_app(3)&lt;/code&gt; callbacks. If &lt;code&gt;true&lt;/code&gt; then mismatches in an outgoing messages cause message encoding to fail, while mismatches in an incoming message are reported as 5005/5009 errors in the errors field of the diameter_packet record passed to &lt;code&gt;handle_request/3&lt;/code&gt; or &lt;code&gt;handle_answer/4&lt;/code&gt; callbacks. If &lt;code&gt;false&lt;/code&gt; then neither error is enforced/detected. If &lt;code&gt;encode&lt;/code&gt; or &lt;code&gt;decode&lt;/code&gt; then errors are only enforced/detected on outgoing or incoming messages respectively.</source>
          <target state="translated">メッセージ内のAVPの数またはグループ化されたAVPが、メッセージを &lt;code&gt;diameter_app(3)&lt;/code&gt; コールバックに渡すときに、問題の辞書で指定された数と一致することを要求するかどうか。 &lt;code&gt;true&lt;/code&gt; の場合、送信メッセージの不一致によりメッセージのエンコードが失敗しますが、受信メッセージの不一致は、 &lt;code&gt;handle_request/3&lt;/code&gt; または &lt;code&gt;handle_answer/4&lt;/code&gt; コールバックに渡されたdiameter_packetレコードのエラーフィールドに5005/5009エラーとして報告されます。 &lt;code&gt;false&lt;/code&gt; の場合、どちらのエラーも強制/検出されません。 &lt;code&gt;encode&lt;/code&gt; または &lt;code&gt;decode&lt;/code&gt; 場合、エラーはそれぞれ送信メッセージまたは受信メッセージでのみ強制/検出されます。</target>
        </trans-unit>
        <trans-unit id="b9cad2d39a7de589e0dd2507f90944f85bceec69" translate="yes" xml:space="preserve">
          <source>Whether the state machine should use &lt;strong&gt;state enter calls&lt;/strong&gt; or not is selected when starting the &lt;code&gt;gen_statem&lt;/code&gt; and after code change using the return value from &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ステートマシンが&lt;strong&gt;ステートエンターコール&lt;/strong&gt;を使用するかどうかは、 &lt;code&gt;gen_statem&lt;/code&gt; の開始時、および &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; からの戻り値を使用したコード変更後に選択されます。</target>
        </trans-unit>
        <trans-unit id="f2b42f4f8ca231f51435d252ac3a5d231d8995a9" translate="yes" xml:space="preserve">
          <source>Whether the whole table is traversed or only some keys looked up depends on how the query is expressed. If the query has the form</source>
          <target state="translated">テーブル全体を検索するか、一部のキーのみを検索するかは、クエリの表現方法に依存します。クエリが</target>
        </trans-unit>
        <trans-unit id="13c9973a4e7550104891acf7d7dc61bcaff3e712" translate="yes" xml:space="preserve">
          <source>Which OTP versions are &lt;code&gt;kernel-3.0&lt;/code&gt; part of?</source>
          <target state="translated">&lt;code&gt;kernel-3.0&lt;/code&gt; の一部であるOTPバージョンはどれですか？</target>
        </trans-unit>
        <trans-unit id="6d10cf7cff62e6ebcafd8d63acafb6450f487b40" translate="yes" xml:space="preserve">
          <source>Which SNMP version to use is implicitly defined by specifying the Message Processing Model. This version of the agent handles the models &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2c&lt;/code&gt; and &lt;code&gt;v3&lt;/code&gt;.</source>
          <target state="translated">使用するSNMPバージョンは、メッセージ処理モデルを指定することによって暗黙的に定義されます。このバージョンのエージェントは、モデル &lt;code&gt;v1&lt;/code&gt; 、 &lt;code&gt;v2c&lt;/code&gt; 、および &lt;code&gt;v3&lt;/code&gt; を処理します。</target>
        </trans-unit>
        <trans-unit id="2a1a0280b4f0af887bbcb8c357efdf2ef49d1504" translate="yes" xml:space="preserve">
          <source>Which SNMP versions shall be accepted/used.</source>
          <target state="translated">どのSNMPバージョンを受け付けるか/使用するか。</target>
        </trans-unit>
        <trans-unit id="8a387616ccaf26279c59014305b3dd869652107e" translate="yes" xml:space="preserve">
          <source>Which applications to be added, that is, applications listed in &lt;code&gt;Name2.rel&lt;/code&gt; but not in &lt;code&gt;Name.rel&lt;/code&gt;</source>
          <target state="translated">これは、追加するアプリケーション、である、に記載されているアプリケーション &lt;code&gt;Name2.rel&lt;/code&gt; ではなく、中に &lt;code&gt;Name.rel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c14de31b7a3bcb7b1d01171585a9e9bb567167c" translate="yes" xml:space="preserve">
          <source>Which applications to be deleted, that is, applications listed in &lt;code&gt;Name.rel&lt;/code&gt; but not in &lt;code&gt;Name2.rel&lt;/code&gt;</source>
          <target state="translated">どのアプリケーションで、あること、に記載されているアプリケーションを削除する &lt;code&gt;Name.rel&lt;/code&gt; ではなく &lt;code&gt;Name2.rel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f5aceb77b6ae808863618fd33ff3e5c13a692594" translate="yes" xml:space="preserve">
          <source>Which applications to be upgraded/downgraded, that is, applications listed in both &lt;code&gt;Name.rel&lt;/code&gt; and &lt;code&gt;Name2.rel&lt;/code&gt; but with different versions</source>
          <target state="translated">アップグレードまたはダウングレードするアプリケーション。つまり、 &lt;code&gt;Name.rel&lt;/code&gt; と &lt;code&gt;Name2.rel&lt;/code&gt; の両方にリストされているが、バージョンが異なるアプリケーション</target>
        </trans-unit>
        <trans-unit id="1131f8353bd6250399b31bfd889663a89d780f1a" translate="yes" xml:space="preserve">
          <source>Which applications to include is defined by the &lt;code&gt;included_applications&lt;/code&gt; key in the &lt;code&gt;.app&lt;/code&gt; file:</source>
          <target state="translated">どのアプリケーションを含めるかは、 &lt;code&gt;.app&lt;/code&gt; ファイルの &lt;code&gt;included_applications&lt;/code&gt; キーで定義されます。</target>
        </trans-unit>
        <trans-unit id="33a2c320d733715d35457cb67d359c1e01e0a90f" translate="yes" xml:space="preserve">
          <source>Which boot script to use is specified by the command-line flag &lt;code&gt;-boot&lt;/code&gt;. The extension &lt;code&gt;.boot&lt;/code&gt; is to be omitted. For example, using the boot script &lt;code&gt;start_all.boot&lt;/code&gt;:</source>
          <target state="translated">使用するブートスクリプトは、コマンドラインフラグ &lt;code&gt;-boot&lt;/code&gt; で指定します。拡張子 &lt;code&gt;.boot&lt;/code&gt; は省略されます。たとえば、起動スクリプト &lt;code&gt;start_all.boot&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e50e23f7bb1779588d40d00c39241661c0f072b4" translate="yes" xml:space="preserve">
          <source>Which callback function that handles an event depends on the callback mode:</source>
          <target state="translated">どのコールバック関数がイベントを処理するかは、コールバックモードに依存します。</target>
        </trans-unit>
        <trans-unit id="6aa188514432d913525872db6b7914c6a3c8e363" translate="yes" xml:space="preserve">
          <source>Which child processes to start and monitor is specified by a list of &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specifications&lt;/a&gt;&lt;/code&gt;. The child processes are started in the order specified by this list, and terminated in the reversed order.</source>
          <target state="translated">開始および監視する子プロセスは、 &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specifications&lt;/a&gt;&lt;/code&gt; リストで指定されます。子プロセスは、このリストで指定された順序で開始され、逆の順序で終了します。</target>
        </trans-unit>
        <trans-unit id="0cd7d6e075a80e211e946c5a2bc1b0d5098a7027" translate="yes" xml:space="preserve">
          <source>Which layout is chosen depends on the available horizontal space. When processing a document, the main parameters are the &lt;strong&gt;paper width&lt;/strong&gt; and the &lt;strong&gt;line width&lt;/strong&gt; (also known as the &quot;ribbon width&quot;). In the resulting layout, no text should be printed beyond the paper width (which by default is 80 characters) as long as it can be avoided, and each single line of text (its indentation not counted, hence &quot;ribbon&quot;) should preferably be no wider than the specified line width (which by default is 65).</source>
          <target state="translated">選択されるレイアウトは、使用可能な水平スペースによって異なります。ドキュメントを処理するときの主なパラメータは、&lt;strong&gt;用紙の幅&lt;/strong&gt;と&lt;strong&gt;線の幅&lt;/strong&gt;（「リボンの幅」とも呼ばれます）です。結果のレイアウトでは、回避できる限り、用紙の幅（デフォルトでは80文字）を超えてテキストを印刷しないでください。テキストの各1行（インデントはカウントされないため、「リボン」）指定された線幅（デフォルトでは65）を超えない。</target>
        </trans-unit>
        <trans-unit id="316f8f07fe22b27f60e4007a3b10b3081a7c24ed" translate="yes" xml:space="preserve">
          <source>Which module that is selected to implement the &lt;code&gt;mnesia_frag_hash&lt;/code&gt; behavior for a particular fragmented table is specified together with the other &lt;code&gt;frag_properties&lt;/code&gt;. The &lt;code&gt;hash_module&lt;/code&gt; defines the module name. The &lt;code&gt;hash_state&lt;/code&gt; defines the initial hash state.</source>
          <target state="translated">特定の断片化されたテーブルの &lt;code&gt;mnesia_frag_hash&lt;/code&gt; 動作を実装するために選択されるモジュールは、他の &lt;code&gt;frag_properties&lt;/code&gt; とともに指定されます。 &lt;code&gt;hash_module&lt;/code&gt; は、モジュール名を定義します。 &lt;code&gt;hash_state&lt;/code&gt; は、初期のハッシュ状態を定義します。</target>
        </trans-unit>
        <trans-unit id="43b9aadd4cf4e0bbe301ebac4cf235c26b5cecf8" translate="yes" xml:space="preserve">
          <source>Which nodes that are allowed to communicate with each other is handled by the magic cookie system, see section &lt;code&gt;Distributed Erlang&lt;/code&gt; in the Erlang Reference Manual.</source>
          <target state="translated">相互に通信できるノードは、マジックCookieシステムによって処理されます。Erlangリファレンスマニュアルのセクション「 &lt;code&gt;Distributed Erlang&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="bd16373e6ac28a23d9af45a12b0dbd962aedf699" translate="yes" xml:space="preserve">
          <source>Which of &lt;code&gt;start_clean&lt;/code&gt; and &lt;code&gt;start_sasl&lt;/code&gt; to use as default is decided by the user when installing Erlang/OTP using &lt;code&gt;Install&lt;/code&gt;. The user is asked &quot;Do you want to use a minimal system startup instead of the SASL startup&quot;. If the answer is yes, then &lt;code&gt;start_clean&lt;/code&gt; is used, otherwise &lt;code&gt;start_sasl&lt;/code&gt; is used. A copy of the selected boot script is made, named &lt;code&gt;start.boot&lt;/code&gt; and placed in directory &lt;code&gt;ROOT/bin&lt;/code&gt;.</source>
          <target state="translated">デフォルトで使用する &lt;code&gt;start_clean&lt;/code&gt; と &lt;code&gt;start_sasl&lt;/code&gt; は、Installを使用してErlang / OTPを &lt;code&gt;Install&lt;/code&gt; するときにユーザーが決定します。ユーザーは、「SASLスタートアップの代わりに最小限のシステムスタートアップを使用しますか？」と尋ねられます。答えはイエス、その後、されている場合は &lt;code&gt;start_clean&lt;/code&gt; 使用され、そうでない場合 &lt;code&gt;start_sasl&lt;/code&gt; が使用されています。選択した起動スクリプトのコピーが作成され、 &lt;code&gt;start.boot&lt;/code&gt; という名前が付けられ、ディレクトリ &lt;code&gt;ROOT/bin&lt;/code&gt; に配置されます。</target>
        </trans-unit>
        <trans-unit id="7821793868ddcbfc00b34e99fc497909e5efa3de" translate="yes" xml:space="preserve">
          <source>Which options are selected</source>
          <target state="translated">どのオプションが選択されているか</target>
        </trans-unit>
        <trans-unit id="aae5ae585b22a628f4e51d3c9f19940824f3ef04" translate="yes" xml:space="preserve">
          <source>Which source and target options that can be issued depends on the capabilities supported by the server. That is, &lt;code&gt;:candidate&lt;/code&gt; and/or &lt;code&gt;:startup&lt;/code&gt; are required.</source>
          <target state="translated">発行できるソースとターゲットのオプションは、サーバーがサポートする機能によって異なります。つまり、 &lt;code&gt;:candidate&lt;/code&gt; および/または &lt;code&gt;:startup&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="790ca84b049e16521ecebee52c49440e1de0020a" translate="yes" xml:space="preserve">
          <source>Which target parameters that can be used depends on if &lt;code&gt;:candidate&lt;/code&gt; and/or &lt;code&gt;:startup&lt;/code&gt; are supported by the server. If successfull, the configuration system of the device is unavailable to other clients (NETCONF, CORBA, SNMP, and so on). Locks are intended to be short-lived.</source>
          <target state="translated">使用できるターゲットパラメータは、 &lt;code&gt;:candidate&lt;/code&gt; や &lt;code&gt;:startup&lt;/code&gt; がサーバーでサポートされているかどうかによって異なります。成功した場合、他のクライアント（NETCONF、CORBA、SNMPなど）はデバイスの構成システムを使用できません。ロックは短期間の使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="c125aa8b69c05ef017f418200c2dd8030095a74e" translate="yes" xml:space="preserve">
          <source>Which types of information that is to be supervised by Erlang</source>
          <target state="translated">Erlangが監修する情報の種類</target>
        </trans-unit>
        <trans-unit id="955269f29db543667262d6a6d8087530a608251f" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;net_kernel&lt;/code&gt; informs different subsystems that the connection is coming up, the port is to accept data to send. However, the port should not receive any data, to avoid that data arrives from another node before every kernel subsystem is prepared to handle it. A third mode, named &lt;code&gt;intermediate&lt;/code&gt;, is used for this intermediate stage.</source>
          <target state="translated">一方で &lt;code&gt;net_kernel&lt;/code&gt; 知らせる異なるサブシステムは、接続が間近に迫っていることを、ポートが送信するデータを受け入れることです。ただし、すべてのカーネルサブシステムがデータを処理する準備ができる前に別のノードからデータが到着するのを防ぐため、ポートはデータを受信しないようにする必要があります。この中間段階では、 &lt;code&gt;intermediate&lt;/code&gt; という名前の3番目のモードが使用されます。</target>
        </trans-unit>
        <trans-unit id="ae9d92c09d1918bae1349f12a4c25f948966b648" translate="yes" xml:space="preserve">
          <source>While a process executes a dirty NIF, some operations that communicate with it can take a very long time to complete. Suspend or garbage collection of a process executing a dirty NIF cannot be done until the dirty NIF has returned. Thus, other processes waiting for such operations to complete might have to wait for a very long time. Blocking multi-scheduling, that is, calling &lt;code&gt;&lt;a href=&quot;erlang#system_flag_multi_scheduling&quot;&gt;erlang:system_flag(multi_scheduling, block)&lt;/a&gt;&lt;/code&gt;, can also take a very long time to complete. This is because all ongoing dirty operations on all dirty schedulers must complete before the block operation can complete.</source>
          <target state="translated">プロセスがダーティNIFを実行している間、プロセスと通信する一部の操作は、完了するまでに非常に長い時間がかかる場合があります。ダーティNIFが実行されるプロセスのサスペンドまたはガベージコレクションは、ダーティNIFが返されるまで実行できません。したがって、そのような操作の完了を待機している他のプロセスは、非常に長い時間待機する必要がある場合があります。マルチスケジューリングのブロック、つまり &lt;code&gt;&lt;a href=&quot;erlang#system_flag_multi_scheduling&quot;&gt;erlang:system_flag(multi_scheduling, block)&lt;/a&gt;&lt;/code&gt; 呼び出しも、完了するまでに非常に長い時間がかかる場合があります。これは、ブロック操作が完了する前に、すべてのダーティスケジューラで実行中のすべてのダーティ操作が完了する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="f3c968926507d13833578dd04fa0445ed14918eb" translate="yes" xml:space="preserve">
          <source>While a service typically implements a single Diameter node (as identified by an Origin-Host AVP), transports can themselves be associated with capabilities AVPs so that a single service can be used to implement more than one Diameter node.</source>
          <target state="translated">通常、サービスは1つのDiameterノード(Origin-Host AVPで識別される)を実装しますが、トランスポートはそれ自体がケイパビリティAVPに関連付けられているため、1つのサービスを使って複数のDiameterノードを実装することができます。</target>
        </trans-unit>
        <trans-unit id="ba190fb267746cc8b0c9573844864941c2b36751" translate="yes" xml:space="preserve">
          <source>While doing this, the message passing interface between the shell, the client, and the server is cleaned up and is defined using &lt;strong&gt;records&lt;/strong&gt;. Also, &lt;strong&gt;macros&lt;/strong&gt; are introduced:</source>
          <target state="translated">これを行っている間、シェル、クライアント、サーバー間のメッセージ受け渡しインターフェースはクリーンアップされ、&lt;strong&gt;records&lt;/strong&gt;を使用&lt;strong&gt;して&lt;/strong&gt;定義され&lt;strong&gt;ます&lt;/strong&gt;。また、&lt;strong&gt;マクロ&lt;/strong&gt;が導入されています。</target>
        </trans-unit>
        <trans-unit id="e4bcae748a242838e1ff319d8c4a5667ec31db32" translate="yes" xml:space="preserve">
          <source>While in &quot;plain Erlang&quot;, a process is said to terminate normally only for exit reason &lt;code&gt;normal&lt;/code&gt;, a process started using &lt;code&gt;proc_lib&lt;/code&gt; is also said to terminate normally if it exits with reason &lt;code&gt;shutdown&lt;/code&gt; or &lt;code&gt;{shutdown,Term}&lt;/code&gt;. &lt;code&gt;shutdown&lt;/code&gt; is the reason used when an application (supervision tree) is stopped.</source>
          <target state="translated">「プレーンErlang」では、プロセスは通常の終了理由 &lt;code&gt;normal&lt;/code&gt; でのみ終了すると言われていますが、 &lt;code&gt;proc_lib&lt;/code&gt; を使用して開始されたプロセスは、理由 &lt;code&gt;shutdown&lt;/code&gt; または &lt;code&gt;{shutdown,Term}&lt;/code&gt; で終了した場合も正常終了すると言います。 &lt;code&gt;shutdown&lt;/code&gt; は、アプリケーション（監視ツリー）が停止したときに使用される理由です。</target>
        </trans-unit>
        <trans-unit id="4bb116c6c8689b91ebdb4eb3a65df11a70e53e50" translate="yes" xml:space="preserve">
          <source>While it is strongly encouraged that the encoding of characters in binary data is known before processing, that is not always possible. On a typical Linux system, there is a mix of UTF-8 and ISO Latin-1 text files, and there are seldom any BOMs in the files to identify them.</source>
          <target state="translated">バイナリデータ内の文字のエンコーディングを処理前に知っておくことを強く推奨しますが、必ずしも可能とは限りません。典型的な Linux システムでは、UTF-8 と ISO Latin-1 のテキストファイルが混在しており、それらを識別するための BOM がファイル内に存在することはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="25bf671ec448e1f371e002321038f9fb00ec1499" translate="yes" xml:space="preserve">
          <source>While ordinary list comprehensions evaluate to lists, calling &lt;code&gt;&lt;a href=&quot;#q-1&quot;&gt;q/1,2&lt;/a&gt;&lt;/code&gt; returns a &lt;strong id=&quot;query_handle&quot;&gt;query handle&lt;/strong&gt;. To obtain all the answers to a query, &lt;code&gt;&lt;a href=&quot;#eval-1&quot;&gt;eval/1,2&lt;/a&gt;&lt;/code&gt; is to be called with the query handle as first argument. Query handles are essentially functional objects (funs) created in the module calling &lt;code&gt;q/1,2&lt;/code&gt;. As the funs refer to the module code, be careful not to keep query handles too long if the module code is to be replaced. Code replacement is described in section &lt;code&gt;Compilation and Code Loading&lt;/code&gt; in the Erlang Reference Manual. The list of answers can also be traversed in chunks by use of a &lt;strong id=&quot;query_cursor&quot;&gt;query cursor&lt;/strong&gt;. Query cursors are created by calling &lt;code&gt;&lt;a href=&quot;#cursor-1&quot;&gt;cursor/1,2&lt;/a&gt;&lt;/code&gt; with a query handle as first argument. Query cursors are essentially Erlang processes. One answer at a time is sent from the query cursor process to the process that created the cursor.</source>
          <target state="translated">通常のリスト内包表記はリストとして評価されますが、 &lt;code&gt;&lt;a href=&quot;#q-1&quot;&gt;q/1,2&lt;/a&gt;&lt;/code&gt; を呼び出すと&lt;strong id=&quot;query_handle&quot;&gt;クエリハンドル&lt;/strong&gt;が返され&lt;strong id=&quot;query_handle&quot;&gt;ます&lt;/strong&gt;。クエリに対するすべての回答を取得するには、クエリハンドルを最初の引数として &lt;code&gt;&lt;a href=&quot;#eval-1&quot;&gt;eval/1,2&lt;/a&gt;&lt;/code&gt; を呼び出します。クエリハンドルは、基本的に &lt;code&gt;q/1,2&lt;/code&gt; を呼び出すモジュールで作成された機能オブジェクト（ファン）です。ファンはモジュールコードを参照するため、モジュールコードを置き換える場合は、クエリハンドルを長くしすぎないように注意してください。コードの置き換えについては、Erlangリファレンスマニュアルの「 &lt;code&gt;Compilation and Code Loading&lt;/code&gt; セクションで説明しています。回答のリストは、&lt;strong id=&quot;query_cursor&quot;&gt;クエリカーソルを&lt;/strong&gt;使用してチャンクでトラバースすることもでき&lt;strong id=&quot;query_cursor&quot;&gt;ます&lt;/strong&gt;。クエリカーソルは、 &lt;code&gt;&lt;a href=&quot;#cursor-1&quot;&gt;cursor/1,2&lt;/a&gt;&lt;/code&gt; を呼び出すことによって作成されます。最初の引数としてクエリハンドルを使用します。クエリカーソルは基本的にErlangプロセスです。一度に1つの回答が、クエリカーソルプロセスからカーソルを作成したプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="5cfb7e0b8e7246045409ca78f0b6e5dc307f3fb9" translate="yes" xml:space="preserve">
          <source>While running, &lt;code&gt;run_erl&lt;/code&gt; sends all output, uninterpreted, to a log file. The file is named &lt;code&gt;erlang.log.N&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer. When the log is &quot;full&quot; (default log size is 100 KB), &lt;code&gt;run_erl&lt;/code&gt; starts to log in file &lt;code&gt;erlang.log.(N+1)&lt;/code&gt;, until &lt;code&gt;N&lt;/code&gt; reaches a certain number (default 5), whereupon &lt;code&gt;N&lt;/code&gt; starts at 1 again and the oldest files start getting overwritten.</source>
          <target state="translated">実行中、 &lt;code&gt;run_erl&lt;/code&gt; はすべての出力を解釈せずにログファイルに送信します。ファイルの名前は &lt;code&gt;erlang.log.N&lt;/code&gt; で、 &lt;code&gt;N&lt;/code&gt; は整数です。ログが「フル」（デフォルトのログサイズは100 KB）の場合、 &lt;code&gt;run_erl&lt;/code&gt; は、 &lt;code&gt;N&lt;/code&gt; が特定の数（デフォルト5）に達するまで、ファイル &lt;code&gt;erlang.log.(N+1)&lt;/code&gt; へのログインを開始し、その後 &lt;code&gt;N&lt;/code&gt; 再び1から始まり、最も古いファイルが上書きされ始めます。</target>
        </trans-unit>
        <trans-unit id="0723cb3c16ddecdf0655aeda6e04632653e741f7" translate="yes" xml:space="preserve">
          <source>While strings can be input as Unicode characters, the language elements are still limited to the ISO Latin-1 character set. Only character constants and strings are allowed to be beyond that range:</source>
          <target state="translated">文字列は Unicode キ ャ ラ ク タ と し て入力で き ますが、 言語要素は ISO Latin-1 キ ャ ラ ク タ セ ッ ト に制限 さ れています。その範囲を超えることが許されるのは、文字定数と文字列だけです。</target>
        </trans-unit>
        <trans-unit id="7d8d8c326ee6b24ea1889f95470be78998df6197" translate="yes" xml:space="preserve">
          <source>White space did not used to include the VT character (code 11), because Perl did not treat this character as white space. However, Perl changed at release 5.18, so PCRE followed at release 8.34, and VT is now treated as white space.</source>
          <target state="translated">VT文字(コード11)は、Perlがこの文字をホワイトスペースとして扱わなかったため、ホワイトスペースには含まれていませんでした。しかし、Perlはリリース5.18で変更されたため、リリース8.34ではPCREに続いてVTがホワイトスペースとして扱われるようになりました。</target>
        </trans-unit>
        <trans-unit id="1595814deaf00e4f6e3b44cb9377e2fe011e37cf" translate="yes" xml:space="preserve">
          <source>White-box testing of Erlang/OTP programs. This is easily done by calling the target API functions directly from the test case functions.</source>
          <target state="translated">Erlang/OTPプログラムのホワイトボックステスト。これはテストケース関数から直接ターゲットAPI関数を呼び出すことで簡単にできます。</target>
        </trans-unit>
        <trans-unit id="b805e34456a2ce3669e5a13c32900b36e9845bc0" translate="yes" xml:space="preserve">
          <source>Whitespace (the same as \s from PCRE 8.34)</source>
          <target state="translated">Whitespace (PCRE 8.34からの &quot;s &quot;と同じ)</target>
        </trans-unit>
        <trans-unit id="de4842c6983b52e491b9f291872a3e7f3d936bc9" translate="yes" xml:space="preserve">
          <source>Whitespace characters (&lt;strong&gt;Space&lt;/strong&gt;, &lt;strong&gt;Tab&lt;/strong&gt;, and &lt;strong&gt;Newline&lt;/strong&gt;) that cause input to be read to the next non-whitespace character.</source>
          <target state="translated">空白文字（&lt;strong&gt;スペース&lt;/strong&gt;、&lt;strong&gt;タブ&lt;/strong&gt;、&lt;strong&gt;改行）&lt;/strong&gt;入力が次の非空白文字に読み込まれるようにする）。</target>
        </trans-unit>
        <trans-unit id="84821441f4b8972977e4408981126dbb04ab2772" translate="yes" xml:space="preserve">
          <source>Will give the result &lt;code&gt;result_export.html&lt;/code&gt;</source>
          <target state="translated">結果は &lt;code&gt;result_export.html&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="e29aa56423ffafb3741063ceeff0a780f65c606d" translate="yes" xml:space="preserve">
          <source>Windows NT documentation</source>
          <target state="translated">ウィンドウズエヌティードキュメント</target>
        </trans-unit>
        <trans-unit id="e645b2615d352bd6061745efc2717f7e035245ab" translate="yes" xml:space="preserve">
          <source>Windows and, for most common uses, MacOS X enforce Unicode support for filenames. All files created in the file system have names that can consistently be interpreted. In MacOS X, all filenames are retrieved in UTF-8 encoding. In Windows, each system call handling filenames has a special Unicode-aware variant, giving much the same effect. There are no filenames on these systems that are not Unicode filenames. So, the default behavior of the Erlang VM is to work in &quot;Unicode filename translation mode&quot;. This means that a filename can be specified as a Unicode list, which is automatically translated to the proper name encoding for the underlying operating system and file system.</source>
          <target state="translated">Windows と、最も一般的な用途である MacOS X では、ファイル名の Unicode サポートが強制されています。ファイルシステムで作成されるすべてのファイルは、一貫して解釈できる名前を持っています。MacOS Xでは、すべてのファイル名はUTF-8エンコーディングで取得されます。Windowsでは、ファイル名を扱う各システムコールは、Unicode対応の特別なバリアントを持っており、ほとんど同じ効果を与えています。これらのシステムでは、Unicode ファイル名でないファイル名はありません。ですから、Erlang VMのデフォルトの動作は &quot;Unicodeファイル名変換モード &quot;です。これはファイル名をUnicodeリストとして指定することができ、そのファイル名は自動的にオペレーティングシステムとファイルシステムの適切な名前エンコーディングに変換されることを意味します。</target>
        </trans-unit>
        <trans-unit id="c125c4bf69fac9a29c86e4b1d481c02bb71651ac" translate="yes" xml:space="preserve">
          <source>Windows example: &lt;code&gt;D:/usr/local/bin&lt;/code&gt;</source>
          <target state="translated">Windowsの例： &lt;code&gt;D:/usr/local/bin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3b9d2244d29790aefa539ade087712dcc74c2b4" translate="yes" xml:space="preserve">
          <source>Windows example: &lt;code&gt;D:bar.erl, /bar/foo.erl&lt;/code&gt;</source>
          <target state="translated">Windowsの例： &lt;code&gt;D:bar.erl, /bar/foo.erl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="edc4359fd495b4e83d92738738521dff7c9648fc" translate="yes" xml:space="preserve">
          <source>Windows specific C-code goes in the &lt;code&gt;$ERL_TOP/erts/emulator/sys/win32&lt;/code&gt;, &lt;code&gt;$ERL_TOP/erts/emulator/drivers/win32&lt;/code&gt; or &lt;code&gt;$ERL_TOP/erts/etc/win32&lt;/code&gt;.</source>
          <target state="translated">Windows固有のCコードは &lt;code&gt;$ERL_TOP/erts/emulator/sys/win32&lt;/code&gt; 、 &lt;code&gt;$ERL_TOP/erts/emulator/drivers/win32&lt;/code&gt; または &lt;code&gt;$ERL_TOP/erts/etc/win32&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="cebe814814fa7a01f7252bacdb196a2415e7c2cc" translate="yes" xml:space="preserve">
          <source>Windows specific erlang code should be used conditionally and the host OS tested in &lt;strong&gt;runtime&lt;/strong&gt;, the exactly same beam files should be distributed for every platform! So write code like:</source>
          <target state="translated">Windows固有のerlangコードを条件付きで使用し、ホストOSを&lt;strong&gt;ランタイムで&lt;/strong&gt;テストする必要があり&lt;strong&gt;ます&lt;/strong&gt;でする必要があります。まったく同じビームファイルをすべてのプラットフォームに配布する必要があります。したがって、次のようなコードを記述します。</target>
        </trans-unit>
        <trans-unit id="9153ae7e742cafd43f95ca717cf1dfe512956eb4" translate="yes" xml:space="preserve">
          <source>Windows users probably want to use the &lt;code&gt;werl&lt;/code&gt; program instead, which runs in its own window with scrollbars and supports command-line editing. The &lt;code&gt;erl&lt;/code&gt; program on Windows provides no line editing in its shell, and on Windows 95 there is no way to scroll back to text that has scrolled off the screen. The &lt;code&gt;erl&lt;/code&gt; program must be used, however, in pipelines or if you want to redirect standard input or output.</source>
          <target state="translated">Windowsユーザーはおそらく、代わりに &lt;code&gt;werl&lt;/code&gt; プログラムを使用したいと思います。このプログラムは、スクロールバー付きの独自のウィンドウで実行され、コマンドライン編集をサポートしています。Windows の &lt;code&gt;erl&lt;/code&gt; プログラムは、そのシェルで行編集を提供していません。また、Windows 95では、画面からスクロールしたテキストに戻る方法はありません。 &lt;code&gt;erl&lt;/code&gt; プログラムはパイプラインで、しかし、使用しなければならないか、またはしたい場合は、標準入力または出力をリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="d01fbb62689c9a50dbc798199c8abe5404a70e39" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;SnmpAppConfName&lt;/code&gt; SNMP applications can be configured with parameters &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;mibs&lt;/code&gt;, &lt;code&gt;net_if&lt;/code&gt;, and so on. The values are merged with (and possibly override) default values set by &lt;code&gt;ct_snmp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SnmpAppConfName&lt;/code&gt; SNMPアプリケーションは、パラメータを設定することができます &lt;code&gt;config&lt;/code&gt; 、 &lt;code&gt;mibs&lt;/code&gt; 、 &lt;code&gt;net_if&lt;/code&gt; ように、と。値は、 &lt;code&gt;ct_snmp&lt;/code&gt; によって設定されたデフォルト値とマージされます（場合によってはオーバーライドされます）。</target>
        </trans-unit>
        <trans-unit id="57de975e4ed5eb1eb7a9bb8718be7fce417a91ff" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;handle_event_function&lt;/code&gt;, you are free to mix strategies, as all events and states are handled in the same callback function.</source>
          <target state="translated">&lt;code&gt;handle_event_function&lt;/code&gt; すべてのイベントと状態が同じコールバック関数内で処理されているとして、あなたは、戦略をミックスするのは自由です。</target>
        </trans-unit>
        <trans-unit id="f5dfbb3d46433438978efd2890875149c5eda9a4" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;inet6fb4&lt;/code&gt; the client behaves as before, that is, tries to use IPv6, and only if that does not work it uses IPv4).</source>
          <target state="translated">&lt;code&gt;inet6fb4&lt;/code&gt; である前とクライアントの振る舞い、、）IPv6を使用しようとすると、それが動作しない場合にのみ、それは、IPv4を使用しています。</target>
        </trans-unit>
        <trans-unit id="b18128932919ee9e9b89c4f5f6d45d4fabc7e543" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;state_functions&lt;/code&gt;, you are restricted to use atom-only states, and the &lt;code&gt;gen_statem&lt;/code&gt; engine branches depending on state name for you. This encourages the callback module to co-locate the implementation of all event actions particular to one state in the same place in the code, hence to focus on one state at the time.</source>
          <target state="translated">では &lt;code&gt;state_functions&lt;/code&gt; 、あなたは、原子のみの状態、および使用に制限されている &lt;code&gt;gen_statem&lt;/code&gt; あなたのための州名に応じて、エンジンの枝を。これにより、コールバックモジュールは、コード内の同じ場所にある1つの状態に固有のすべてのイベントアクションの実装を同じ場所に配置し、一度に1つの状態に集中することができます。</target>
        </trans-unit>
        <trans-unit id="08bf3be09bca46d50f5c39e4638f13ff1f2f5384" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;tp&lt;/code&gt; and &lt;code&gt;tpl&lt;/code&gt;, one of the match specification shortcuts can be used (for example, &lt;code&gt;ttb:tp(foo_module, caller)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;tp&lt;/code&gt; と &lt;code&gt;tpl&lt;/code&gt; 、マッチ仕様ショートカットの一つを使用することができる（例えば、 &lt;code&gt;ttb:tp(foo_module, caller)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b6d97c65f416ad5168b9a2206a566140bcf2447d" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;userdata&lt;/code&gt;, the user can specify any test case group related information that can be read by calling &lt;code&gt;&lt;a href=&quot;ct#userdata-2&quot;&gt;ct:userdata/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;userdata&lt;/code&gt; は、ユーザが呼び出すことによって読み取ることができる任意のテストケースのグループ関連情報を指定することができる &lt;code&gt;&lt;a href=&quot;ct#userdata-2&quot;&gt;ct:userdata/2&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6d403f91ef998735296b5b06b5d85b55c07feac9" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;userdata&lt;/code&gt;, the user can specify any test case-related information that can be read by calling &lt;code&gt;&lt;a href=&quot;ct#userdata-3&quot;&gt;ct:userdata/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;userdata&lt;/code&gt; は、ユーザが呼び出すことによって読み取ることができる任意のテストケース関連情報を指定することができる &lt;code&gt;&lt;a href=&quot;ct#userdata-3&quot;&gt;ct:userdata/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ea441d926510f27d6d163d5468ba669996dc2de" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;userdata&lt;/code&gt;, the user can specify any test suite-related information, which can be read by calling &lt;code&gt;&lt;a href=&quot;ct#userdata-2&quot;&gt;ct:userdata/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;userdata&lt;/code&gt; は、ユーザが呼び出すことによって読み取ることができる任意のテストスイート関連情報を、指定することができる &lt;code&gt;&lt;a href=&quot;ct#userdata-2&quot;&gt;ct:userdata/2&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26f6a3b686eca5b0930dd9afa29c9f563535a61e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;xslapply&lt;/code&gt; you tell the XSLT processor in which order it should traverse the XML structure. By default it goes in preorder traversal, but with the following we make a deliberate choice to break that order:</source>
          <target state="translated">&lt;code&gt;xslapply&lt;/code&gt; あなたはそれがXML構造をトラバースすべき順序でXSLTプロセッサを伝えます。デフォルトでは、プレオーダートラバーサルになりますが、次のように意図的に選択して、その順序を壊します。</target>
        </trans-unit>
        <trans-unit id="b3db18a9d447bf83ba06466f404b33da7b98fa17" translate="yes" xml:space="preserve">
          <source>With Erlang/OTP R16A came support for UTF-8 encoded source code, with enhancements to many of the applications to support both Unicode encoded filenames and support for UTF-8 encoded files in many circumstances. Most notable is the support for UTF-8 in files read by &lt;code&gt;file:consult/1&lt;/code&gt;, release handler support for UTF-8, and more support for Unicode character sets in the I/O system.</source>
          <target state="translated">Erlang / OTPで、R16AはUTF-8エンコードされたソースコードのサポートを提供し、多くのアプリケーションがUnicodeエンコードされたファイル名と多くの状況でUTF-8エンコードされたファイルの両方をサポートするように機能強化されました。最も注目に値するのは、 &lt;code&gt;file:consult/1&lt;/code&gt; によって読み取られるファイルでのUTF-8のサポート、UTF-8のリリースハンドラーサポート、およびI / OシステムでのUnicode文字セットのサポートです。</target>
        </trans-unit>
        <trans-unit id="b52c5284cd1c07c72e9a816bd1d34fef08587e9d" translate="yes" xml:space="preserve">
          <source>With a call to &lt;code&gt;block/1,2&lt;/code&gt; a process can block a log. If the blocking process is not an owner of the log, a temporary link is created between the disk log process and the blocking process. The link ensures that the disk log is unblocked if the blocking process terminates without first closing or unblocking the log.</source>
          <target state="translated">&lt;code&gt;block/1,2&lt;/code&gt; を呼び出すと、プロセスはログをブロックできます。ブロックプロセスがログの所有者でない場合は、ディスクログプロセスとブロックプロセスの間に一時的なリンクが作成されます。最初にログを閉じたりブロックを解除したりせずにブロックプロセスが終了した場合、リンクによってディスクログが確実にブロック解除されます。</target>
        </trans-unit>
        <trans-unit id="c2f4e2815603bcfb42c9bd32a938d30836c2464a" translate="yes" xml:space="preserve">
          <source>With a function like &lt;code&gt;test/0&lt;/code&gt;, the whole example can be started:</source>
          <target state="translated">&lt;code&gt;test/0&lt;/code&gt; のような関数で、例全体を開始できます：</target>
        </trans-unit>
        <trans-unit id="69b67278f00ea241bbed8eb4a0425fcb14e74474" translate="yes" xml:space="preserve">
          <source>With all the default values presented, a get request can also be written as follows:</source>
          <target state="translated">すべてのデフォルト値が提示されている状態で、getリクエストも以下のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="b4ab3e3e9a50d6aefe38373ab75bc2cd653fa049" translate="yes" xml:space="preserve">
          <source>With both maximizing (&quot;greedy&quot;) and minimizing (&quot;ungreedy&quot; or &quot;lazy&quot;) repetition, failure of what follows normally causes the repeated item to be re-evaluated to see if a different number of repeats allows the remaining pattern to match. Sometimes it is useful to prevent this, either to change the nature of the match, or to cause it to fail earlier than it otherwise might, when the author of the pattern knows that there is no point in carrying on.</source>
          <target state="translated">最大化(&quot;貪欲&quot;)と最小化(&quot;非貪欲 &quot;または &quot;怠惰&quot;)の繰り返しでは、通常、それに続くものの失敗は、繰り返しの数を変えれば残りのパターンが一致するかどうかを確認するために、繰り返し項目が再評価される原因となります。これを防ぐために、一致の性質を変えたり、パターンの作者が続けても意味がないことを知っているときに、そうでない場合よりも早く失敗させたりすることが有用な場合もあります。</target>
        </trans-unit>
        <trans-unit id="14f551d167438796ba8d34f3a93d3437c922c918" translate="yes" xml:space="preserve">
          <source>With configuration terms it is, for example, possible to do the following:</source>
          <target state="translated">構成用語では、例えば次のようなことが可能です。</target>
        </trans-unit>
        <trans-unit id="4782bd374a84a1af126f620034c11a07e9940a44" translate="yes" xml:space="preserve">
          <source>With lock contention we mean when one thread locks a resource and another thread, or threads, tries to acquire the same resource at the same time. The lock will deny the other thread access to the resource and the thread will be blocked from continuing its execution. The second thread has to wait until the first thread has completed its access to the resource and unlocked it. The &lt;code&gt;lcnt&lt;/code&gt; tool measures these lock conflicts.</source>
          <target state="translated">ロックの競合とは、あるスレッドがリソースをロックし、別のスレッドが同じリソースを同時に取得しようとすることを意味します。ロックは、他のスレッドによるリソースへのアクセスを拒否し、スレッドはその実行の継続をブロックされます。2番目のスレッドは、最初のスレッドがリソースへのアクセスを完了してロックを解除するまで待機する必要があります。 &lt;code&gt;lcnt&lt;/code&gt; ツールは、これらのロックの競合を測定します。</target>
        </trans-unit>
        <trans-unit id="c0a911f73e6123e20f8f0f466f4a6626750c6c0c" translate="yes" xml:space="preserve">
          <source>With one parameter this function disables tracing like the Erlang call &lt;code&gt;erlang:trace(self(), false, [P2])&lt;/code&gt;, where &lt;code&gt;P2&lt;/code&gt; is the parameter to &lt;code&gt;disable_trace&lt;/code&gt;.</source>
          <target state="translated">1つのパラメーターを指定すると、この関数はErlang呼び出し &lt;code&gt;erlang:trace(self(), false, [P2])&lt;/code&gt; ようなトレースを無効にします。ここで、 &lt;code&gt;P2&lt;/code&gt; は &lt;code&gt;disable_trace&lt;/code&gt; のパラメーターです。</target>
        </trans-unit>
        <trans-unit id="e6d4ec70aba9d4e8b5fe9586efa00b26788175fc" translate="yes" xml:space="preserve">
          <source>With one parameter this function turns on tracing like the Erlang call &lt;code&gt;erlang:trace(self(), true, [P2])&lt;/code&gt;, where &lt;code&gt;P2&lt;/code&gt; is the parameter to &lt;code&gt;enable_trace&lt;/code&gt;.</source>
          <target state="translated">1つのパラメーターを指定すると、この関数はErlang呼び出し &lt;code&gt;erlang:trace(self(), true, [P2])&lt;/code&gt; ようにトレースを &lt;code&gt;enable_trace&lt;/code&gt; ます。ここで、 &lt;code&gt;P2&lt;/code&gt; はenable_traceのパラメーターです。</target>
        </trans-unit>
        <trans-unit id="c093c24e555eafd436e8bce479692e3fa910c4f5" translate="yes" xml:space="preserve">
          <source>With option &lt;code&gt;notempty&lt;/code&gt;, this match is invalid, so &lt;code&gt;run/3&lt;/code&gt; searches further into the string for occurrences of &quot;a&quot; or &quot;b&quot;.</source>
          <target state="translated">オプション &lt;code&gt;notempty&lt;/code&gt; を使用すると、この一致は無効になるため、 &lt;code&gt;run/3&lt;/code&gt; は文字列をさらに検索して、「a」または「b」の出現を探します。</target>
        </trans-unit>
        <trans-unit id="66c1ff43299959efe80c7cf44d78f925f082f664" translate="yes" xml:space="preserve">
          <source>With relaxed command checking enabled, you can forcibly unregister live nodes.</source>
          <target state="translated">リラックスコマンドチェックを有効にすると、ライブノードの登録を強制的に解除することができます。</target>
        </trans-unit>
        <trans-unit id="d7efd92dfbce122d4c020902f9bb3ba15456f6a1" translate="yes" xml:space="preserve">
          <source>With relaxed command checking, the &lt;code&gt;epmd&lt;/code&gt; daemon can be killed from the local host with, for example, command &lt;code&gt;epmd -kill&lt;/code&gt; even if active nodes are registered. Normally only daemons with an empty node database can be killed with &lt;code&gt;epmd -kill&lt;/code&gt;.</source>
          <target state="translated">緩和されたコマンドチェックを使用すると、アクティブノードが登録されている場合でも、コマンド &lt;code&gt;epmd -kill&lt;/code&gt; などを使用して、ローカルホストから &lt;code&gt;epmd&lt;/code&gt; デーモンを強制終了できます。通常、空のノードデータベースを持つデーモンのみが &lt;code&gt;epmd -kill&lt;/code&gt; で強制終了できます。</target>
        </trans-unit>
        <trans-unit id="ba2f85c3f99d3d1f3a8aa5a200831ddee6512d66" translate="yes" xml:space="preserve">
          <source>With start flag &lt;code&gt;logopts&lt;/code&gt; options that modify some aspects of the logging behavior can be specified. The following options are available:</source>
          <target state="translated">開始フラグを使用すると、ロギング動作の一部の側面を変更する &lt;code&gt;logopts&lt;/code&gt; オプションを指定できます。次のオプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="b2d54fc2cd61b28fbb0b2ac41225b9c06890a3db" translate="yes" xml:space="preserve">
          <source>With term &lt;code&gt;init&lt;/code&gt; it is possible to specify initialization options for nodes defined in the test specification. There are options to start the node and to evaluate any function on the node. For details, see section &lt;code&gt;&lt;a href=&quot;ct_master_chapter#ct_slave&quot;&gt;Automatic Startup of Test Target Nodes&lt;/a&gt;&lt;/code&gt; in section Using Common Test for Large Scale Testing.</source>
          <target state="translated">term &lt;code&gt;init&lt;/code&gt; を使用すると、テスト仕様で定義されたノードの初期化オプションを指定できます。ノードを起動し、ノード上の関数を評価するオプションがあります。詳細については、「大規模テストでの共通テストの使用 &lt;code&gt;&lt;a href=&quot;ct_master_chapter#ct_slave&quot;&gt;Automatic Startup of Test Target Nodes&lt;/a&gt;&lt;/code&gt; セクションの「テストターゲットノードの自動起動」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="7c19b360c1da842dcfaf494562528f8e12e57f86" translate="yes" xml:space="preserve">
          <source>With test specification terms, it is possible to state exactly which tests to run and in which order. A test term specifies either one or more suites, one or more test case groups (possibly nested), or one or more test cases in a group (or in multiple groups) or in a suite.</source>
          <target state="translated">テスト仕様用語を使うと、どのテストをどの順番で実行するかを正確に記述することができます。テスト用語は、1つまたは複数のスイート、1つまたは複数のテストケースグループ (入れ子になっている場合もあります)、1つのグループ (または複数のグループ)またはスイート内の1つまたは複数のテストケースのいずれかを指定します。</target>
        </trans-unit>
        <trans-unit id="e9e2ec8e2fd04041ccaf4a5dc724d5cd559f81d9" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;EngineId&lt;/code&gt; argument it is possible to override the configured engine-id (SNMP-FRAMEWORK-MIB).</source>
          <target state="translated">&lt;code&gt;EngineId&lt;/code&gt; 引数は構成エンジン-ID（SNMP-FRAMEWORK-MIB）をオーバーライドすることが可能です。</target>
        </trans-unit>
        <trans-unit id="802475deadf3a5ea8c927f887684eb19f0efa3d2" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;ct_run&lt;/code&gt; flag, or &lt;code&gt;ct:run_test/1&lt;/code&gt; option &lt;code&gt;group&lt;/code&gt;, one or more test case groups can be specified, optionally in combination with specific test cases. The syntax for specifying groups on the command line is as follows:</source>
          <target state="translated">&lt;code&gt;ct_run&lt;/code&gt; のフラグ、または &lt;code&gt;ct:run_test/1&lt;/code&gt; オプションの &lt;code&gt;group&lt;/code&gt; 、1つ以上のテストケース基は、必要に応じて、特定のテストケースと組み合わせて、特定することができます。コマンドラインでグループを指定する構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1a3d4b278ce9ee7d8ad86780267fb6dd94072350" translate="yes" xml:space="preserve">
          <source>With the Emacs editor, the &lt;code&gt;next-error&lt;/code&gt; (&lt;code&gt;C-X `&lt;/code&gt;) function can be used indicate where a compilation error occurred, provided the error message is described by a line number.</source>
          <target state="translated">Emacsエディターでは、エラーメッセージが行番号で記述されている場合、 &lt;code&gt;next-error&lt;/code&gt; （ &lt;code&gt;C-X `&lt;/code&gt; ）関数を使用して、コンパイルエラーが発生した場所を示すことができます。</target>
        </trans-unit>
        <trans-unit id="ebd1467c50929ca82151785c1269db67667bbfaf" translate="yes" xml:space="preserve">
          <source>With the Erlang editing mode the entire edit-compile-bugfix cycle can be performed without leaving Emacs. Emacs can order Erlang to compile a file and it can parse the error messages to automatically place the point on the erroneous lines.</source>
          <target state="translated">Erlang編集モードでは、Emacsを離れることなく編集・コンパイル・バグフィックスのサイクル全体を実行することができます。EmacsはErlangにファイルをコンパイルするように命令することができ、エラーメッセージを解析して自動的に間違った行にポイントを置くことができます。</target>
        </trans-unit>
        <trans-unit id="b87f65f9f34aec9e8824942246b3c077a7feb1f5" translate="yes" xml:space="preserve">
          <source>With the SSH application it is possible to start</source>
          <target state="translated">SSHアプリケーションで</target>
        </trans-unit>
        <trans-unit id="e989e36c428437d532173efb4dc1f11980139702" translate="yes" xml:space="preserve">
          <source>With the atom &lt;code&gt;pending&lt;/code&gt;, reloading is requested for any driver and is effectuated when &lt;strong&gt;all&lt;/strong&gt; ports opened to the driver are closed. The driver replacement in this case takes place regardless if there are still pending &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; having the driver loaded.</source>
          <target state="translated">アトムが &lt;code&gt;pending&lt;/code&gt; 場合、&lt;strong&gt;すべての&lt;/strong&gt;ドライバに対して再読み込みが要求され、ドライバに対して開かれている&lt;strong&gt;すべての&lt;/strong&gt;ポートが閉じられたときに有効に&lt;strong&gt;なり&lt;/strong&gt;ます。この場合のドライバー交換は、ドライバーがロードされている保留中の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; がまだいるかどうかに関係なく行われます。</target>
        </trans-unit>
        <trans-unit id="a49c5a7288e37879fb1597723f7ac509b9a89558" translate="yes" xml:space="preserve">
          <source>With the exception of the &lt;code&gt;&lt;a href=&quot;#type-erl_parse&quot;&gt;erl_parse()&lt;/a&gt;&lt;/code&gt; data structures, the internal representations of abstract syntax trees are subject to change without notice, and should not be documented outside this module. Furthermore, we do not give any guarantees on how an abstract syntax tree may or may not be represented, &lt;strong&gt;with the following exceptions&lt;/strong&gt;: no syntax tree is represented by a single atom, such as &lt;code&gt;none&lt;/code&gt;, by a list constructor &lt;code&gt;[X | Y]&lt;/code&gt;, or by the empty list &lt;code&gt;[]&lt;/code&gt;. This can be relied on when writing functions that operate on syntax trees.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-erl_parse&quot;&gt;erl_parse()&lt;/a&gt;&lt;/code&gt; データ構造を除いて、抽象構文ツリーの内部表現は予告なしに変更される可能性があり、このモジュールの外部で文書化されるべきではありません。さらに、我々は、抽象構文木をか表現してもしなくてもよい方法上の任意の保証を与えるものではありません。&lt;strong&gt;次の例外を除いて&lt;/strong&gt;：なし構文木が単一の原子で表現されていない、などの &lt;code&gt;none&lt;/code&gt; 、リストのコンストラクタで &lt;code&gt;[X | Y]&lt;/code&gt; 、または空のリスト &lt;code&gt;[]&lt;/code&gt; 。これは、構文ツリーを操作する関数を作成するときに信頼できます。</target>
        </trans-unit>
        <trans-unit id="0799d7d4d3fdec3a7810006698814c9556e24aba" translate="yes" xml:space="preserve">
          <source>With the following example assignments in Erlang:</source>
          <target state="translated">Erlangで以下のような例の割り当てで。</target>
        </trans-unit>
        <trans-unit id="51ec259decd0a3955d2d19902beece7274482a60" translate="yes" xml:space="preserve">
          <source>With the following example, you can examine that both &lt;code&gt;selected_decode_Window2&lt;/code&gt; and &lt;code&gt;selected_decode_Window1&lt;/code&gt; decodes the intended subvalue of value &lt;code&gt;Val&lt;/code&gt;:</source>
          <target state="translated">次の例では、 &lt;code&gt;selected_decode_Window2&lt;/code&gt; と &lt;code&gt;selected_decode_Window1&lt;/code&gt; の両方が値 &lt;code&gt;Val&lt;/code&gt; の意図されたサブ値をデコードすることを確認できます。</target>
        </trans-unit>
        <trans-unit id="f20fe5ebde2a4b97859bb1e9c2b9058bbadcfaaf" translate="yes" xml:space="preserve">
          <source>With the optional flag &lt;code&gt;-erl_args&lt;/code&gt;, options on the &lt;code&gt;ct_run&lt;/code&gt; command line can be divided into two groups:</source>
          <target state="translated">オプションのフラグ &lt;code&gt;-erl_args&lt;/code&gt; を使用すると、 &lt;code&gt;ct_run&lt;/code&gt; コマンドラインのオプションを2つのグループに分けることができます。</target>
        </trans-unit>
        <trans-unit id="38e84637f043080b06a85b6f9e7d2bf5daa570f9" translate="yes" xml:space="preserve">
          <source>With the same tracing turned on, the following trace output is received:</source>
          <target state="translated">同じトレースを ON にした状態で、以下のようなトレース出力を受信します。</target>
        </trans-unit>
        <trans-unit id="66c3da75d490fac9c0e2e40323391ab1e86a0c17" translate="yes" xml:space="preserve">
          <source>With the standard prologue, this call will return either &lt;code&gt;{ok, Result}&lt;/code&gt;, where &lt;code&gt;Result&lt;/code&gt; is a structure that the Erlang code of the grammar file has built, or &lt;code&gt;{error, {Line_number, Module, Message}}&lt;/code&gt; if there was a syntax error in the input.</source>
          <target state="translated">標準のプロローグでは、この呼び出しは &lt;code&gt;{ok, Result}&lt;/code&gt; を返します。ここで &lt;code&gt;Result&lt;/code&gt; は、文法ファイルのErlangコードが構築した構造、または構文エラーがあった場合は &lt;code&gt;{error, {Line_number, Module, Message}}&lt;/code&gt; ます。入力で。</target>
        </trans-unit>
        <trans-unit id="3ef3136fe39b6dd4b9b8658e80f644b3dd783d88" translate="yes" xml:space="preserve">
          <source>With the term &lt;code&gt;specs&lt;/code&gt;, a test specification can include other specifications. An included specification can either be joined with the source specification or used to produce a separate test run (as with start flag/option &lt;code&gt;join_specs&lt;/code&gt; above).</source>
          <target state="translated">&lt;code&gt;specs&lt;/code&gt; という用語を使用すると、テスト仕様に他の仕様を含めることができます。インクルードされた仕様は、ソース仕様と結合するか、別のテスト実行を生成するために使用できます &lt;code&gt;join_specs&lt;/code&gt; 上記の開始フラグ/オプションjoin_specsと同様）。</target>
        </trans-unit>
        <trans-unit id="f56b5631a8e7adb42a993a80c9f2280c615cde7c" translate="yes" xml:space="preserve">
          <source>With these functions, the driver sends data back to the emulator. The data is received as messages by the port owner process, see &lt;code&gt;erlang:open_port/2&lt;/code&gt;. The vector function and the function taking a driver binary are faster, as they avoid copying the data buffer. There is also a fast way of sending terms from the driver, without going through the binary term format.</source>
          <target state="translated">これらの関数により、ドライバーはエミュレーターにデータを送り返します。データはポート所有者プロセスによってメッセージとして受信されます &lt;code&gt;erlang:open_port/2&lt;/code&gt; 参照してください。ベクトル関数とドライバーバイナリを取得する関数は、データバッファーのコピーを回避するため、より高速です。バイナリ用語形式を経由せずに、ドライバから用語を送信する高速な方法もあります。</target>
        </trans-unit>
        <trans-unit id="9b6a36166d3f6c702444500f5425ed08e5de6097" translate="yes" xml:space="preserve">
          <source>With this code added to the grammar rules, the parser produces the following value (structure) when parsing the input string &lt;code&gt;(a b c).&lt;/code&gt;. This still assumes that this was the first input line that the scanner tokenized:</source>
          <target state="translated">このコードを文法規則に追加すると、パーサーは入力文字列 &lt;code&gt;(a b c).&lt;/code&gt; 解析するときに次の値（構造）を生成します。。これはまだ、これがスキャナーがトークン化した最初の入力行であると想定しています。</target>
        </trans-unit>
        <trans-unit id="e713f1938bf3fb3084e642793f7a40e8d8bbb693" translate="yes" xml:space="preserve">
          <source>With this configuration, no debug messages will be logged, since they are all stopped by the primary log level.</source>
          <target state="translated">この設定では、デバッグメッセージはすべてプライマリログレベルで停止しているため、ログに記録されません。</target>
        </trans-unit>
        <trans-unit id="ac97a8644ed6681924aac07ccca3a39d7757ae76" translate="yes" xml:space="preserve">
          <source>With this data model, some operations execute considerably faster than they do with the normalized data model in the &lt;code&gt;Company&lt;/code&gt; database. However, some other operations become much more complicated. In particular, it becomes more difficult to ensure that records do not contain dangling pointers to other non-existent, or deleted, records.</source>
          <target state="translated">このデータモデルを使用すると、一部の操作は、 &lt;code&gt;Company&lt;/code&gt; データベースの正規化されたデータモデルよりもかなり高速に実行されます。ただし、他の一部の操作はさらに複雑になります。特に、他の存在しない、または削除されたレコードへのぶら下がりポインタがレコードに含まれていないことを確認することはより困難になります。</target>
        </trans-unit>
        <trans-unit id="a35c73d89f3552b19d40e20a51d51ca37a42c624" translate="yes" xml:space="preserve">
          <source>With this expression, we could still give the index of the subpattern with the following call:</source>
          <target state="translated">この式でも、次の呼び出しでサブパターンのインデックスを与えることができます。</target>
        </trans-unit>
        <trans-unit id="313e2124646117e104d6eee7968ee3579fdb519c" translate="yes" xml:space="preserve">
          <source>With this form of function reference, the function that is referred to does not need to be exported from the module.</source>
          <target state="translated">この形式の関数参照では、参照される関数をモジュールからエクスポートする必要はありません。</target>
        </trans-unit>
        <trans-unit id="4684103f741acbd9e584e58990d9a187601f2fbe" translate="yes" xml:space="preserve">
          <source>With this function, tables can be restored online from a backup without restarting Mnesia. &lt;code&gt;Opaque&lt;/code&gt; is forwarded to the backup module. &lt;code&gt;Args&lt;/code&gt; is a list of the following tuples:</source>
          <target state="translated">この機能を使用すると、Mnesiaを再起動せずに、バックアップからテーブルをオンラインで復元できます。 &lt;code&gt;Opaque&lt;/code&gt; はバックアップモジュールに転送されます。 &lt;code&gt;Args&lt;/code&gt; は次のタプルのリストです。</target>
        </trans-unit>
        <trans-unit id="390851375656bd3e10d16d9031e247c3da30c4a7" translate="yes" xml:space="preserve">
          <source>With this option the Distinguished Encoding Rules (DER) is chosen. DER is regarded as a specialized variant of the BER encoding rule. Therefore, this option only makes sense together with option &lt;code&gt;ber&lt;/code&gt;. This option sometimes adds sorting and value checks when encoding, which implies a slower encoding. The decoding routines are the same as for &lt;code&gt;ber&lt;/code&gt;.</source>
          <target state="translated">このオプションでは、Distinguished Encoding Rules（DER）が選択されます。DERは、BERエンコードルールの特殊なバリアントと見なされます。したがって、このオプションはオプション &lt;code&gt;ber&lt;/code&gt; と一緒にのみ意味があります。このオプションは、エンコード時にソートと値チェックを追加することがあります。これは、エンコードが遅いことを意味します。デコードルーチンは &lt;code&gt;ber&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="5bbf6f4e73a0719845e3065b5d609c70d3876ea6" translate="yes" xml:space="preserve">
          <source>With this option, comments inside complicated patterns can be included. However, notice that this applies only to data characters. Whitespace characters can never appear within special character sequences in a pattern, for example within sequence &lt;code&gt;(?(&lt;/code&gt; that introduces a conditional subpattern.</source>
          <target state="translated">このオプションを使用すると、複雑なパターン内のコメントを含めることができます。ただし、これはデータ文字にのみ適用されることに注意してください。空白文字は、シーケンス内で、たとえば、パターン内の特殊文字の配列内に表示されることはありません &lt;code&gt;(?(&lt;/code&gt; 条件付きサブパターンを紹介しています。</target>
        </trans-unit>
        <trans-unit id="bbbe6bc004c4c1d69c0012b84302c6caacbcda99" translate="yes" xml:space="preserve">
          <source>With this option, the file is uncompressed while extracting. If the tar file is not compressed, this option is ignored.</source>
          <target state="translated">このオプションを指定すると、ファイルは解凍時に非圧縮になります。tar ファイルが圧縮されていない場合、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="7afcca01a02c262508c18c8b083adc3d87c7c3f8" translate="yes" xml:space="preserve">
          <source>With this option, the generated &lt;code&gt;encode/2&lt;/code&gt; and &lt;code&gt;decode/2&lt;/code&gt; functions do not wrap a successful return value in an &lt;code&gt;{ok,...}&lt;/code&gt; tuple. If any error occurs, an exception will be raised.</source>
          <target state="translated">このオプションを使用すると、生成された &lt;code&gt;encode/2&lt;/code&gt; および &lt;code&gt;decode/2&lt;/code&gt; 関数は、成功した戻り値を &lt;code&gt;{ok,...}&lt;/code&gt; タプルにラップしません。エラーが発生した場合、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="79ed4cb6ebc92e4834967ba47cf97ac82ff9e34b" translate="yes" xml:space="preserve">
          <source>With this parameter, you can modify or disable the default handler, add custom handlers and primary logger filters, and set log levels per module.</source>
          <target state="translated">このパラメータを使用して、デフォルト ハンドラの変更や無効化、カスタム ハンドラやプライマリ ロガー フィルタの追加、モジュールごとのログ レベルの設定を行うことができます。</target>
        </trans-unit>
        <trans-unit id="ae7955e8a35568cd9fc9b07467b9022a2db2720e" translate="yes" xml:space="preserve">
          <source>With this structure, the root directory for clients of &lt;code&gt;Type1&lt;/code&gt; is &lt;code&gt;$ROOT/clients/Type1&lt;/code&gt;.</source>
          <target state="translated">この構造では、 &lt;code&gt;Type1&lt;/code&gt; のクライアントのルートディレクトリは &lt;code&gt;$ROOT/clients/Type1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="432b508f16a314a63d1e68410564a6c13bfb94ce" translate="yes" xml:space="preserve">
          <source>With this structure, we can now map an OBJECT IDENTIFIER in e.g. a GET NEXT request, to the correct process:</source>
          <target state="translated">この構造により、例えばGET NEXTリクエスト中のOBJECT IDENTIFIERを正しいプロセスにマッピングできるようになりました。</target>
        </trans-unit>
        <trans-unit id="4ceeafc43a87abdccde2bded1edd74d9fa27f522" translate="yes" xml:space="preserve">
          <source>With three parameters to this function, the first is either a process identifier or the registered name of a process to set trace flags on, the second is the disable list, and the third is the enable list.</source>
          <target state="translated">この関数には3つのパラメータがあり、1つ目はプロセス識別子またはトレースフラグを設定するプロセスの登録名、2つ目はディスエーブルリスト、3つ目はイネーブルリストです。</target>
        </trans-unit>
        <trans-unit id="e8b6348b307af60a11f370355943e934c4b4e992" translate="yes" xml:space="preserve">
          <source>With two parameters this function takes a list of trace flags to disable as first parameter and a list of trace flags to enable as second parameter. Logically, the disable list is applied first, but effectively all changes are applied atomically. The trace flags are the same as for &lt;code&gt;erlang:trace/3&lt;/code&gt;, not including &lt;code&gt;cpu_timestamp&lt;/code&gt;, but including &lt;code&gt;tracer&lt;/code&gt;.</source>
          <target state="translated">2つのパラメーターがある場合、この関数は、最初のパラメーターとして無効にするトレースフラグのリストと、2番目のパラメーターとして有効にするトレースフラグのリストを取ります。論理的には、無効化リストが最初に適用されますが、事実上すべての変更はアトミックに適用されます。トレースフラグは &lt;code&gt;erlang:trace/3&lt;/code&gt; と同じですが、 &lt;code&gt;cpu_timestamp&lt;/code&gt; は含まれませんが、 &lt;code&gt;tracer&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="d136f7e5cf76c4a347eacf5f74c9fbce0613f2db" translate="yes" xml:space="preserve">
          <source>With two parameters this function works as the Erlang call &lt;code&gt;erlang:trace(P1, false, [P2])&lt;/code&gt;, where &lt;code&gt;P1&lt;/code&gt; can be either a process identifier or a registered name and is specified as the first argument to the match specification function. &lt;code&gt;P2&lt;/code&gt;&lt;strong&gt;cannot&lt;/strong&gt; be &lt;code&gt;cpu_timestamp&lt;/code&gt; or &lt;code&gt;tracer&lt;/code&gt;.</source>
          <target state="translated">2つのパラメーターがある場合、この関数はErlang呼び出し &lt;code&gt;erlang:trace(P1, false, [P2])&lt;/code&gt; として機能します。ここで、 &lt;code&gt;P1&lt;/code&gt; はプロセスIDまたは登録名のいずれかであり、一致指定関数の最初の引数として指定されます。 &lt;code&gt;P2&lt;/code&gt; は&lt;strong&gt;できません&lt;/strong&gt;こと &lt;code&gt;cpu_timestamp&lt;/code&gt; か &lt;code&gt;tracer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eda4b34bedd09e44ec9081e6140c9e1dfd683009" translate="yes" xml:space="preserve">
          <source>With two parameters, the first parameter is to be either a process identifier or the registered name of a process. In this case tracing is turned on for the designated process in the same way as in the Erlang call &lt;code&gt;erlang:trace(P1, true, [P2])&lt;/code&gt;, where &lt;code&gt;P1&lt;/code&gt; is the first and &lt;code&gt;P2&lt;/code&gt; is the second argument. The process &lt;code&gt;P1&lt;/code&gt; gets its trace messages sent to the same tracer as the process executing the statement uses. &lt;code&gt;P1&lt;/code&gt;&lt;strong&gt;cannot&lt;/strong&gt; be one of the atoms &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;existing&lt;/code&gt; (unless they are registered names). &lt;code&gt;P2&lt;/code&gt;&lt;strong&gt;cannot&lt;/strong&gt; be &lt;code&gt;cpu_timestamp&lt;/code&gt; or &lt;code&gt;tracer&lt;/code&gt;.</source>
          <target state="translated">2つのパラメーターを使用する場合、最初のパラメーターはプロセスIDまたはプロセスの登録名のいずれかになります。この場合、Erlang呼び出し &lt;code&gt;erlang:trace(P1, true, [P2])&lt;/code&gt; と同じ方法で、指定されたプロセスのトレースがオンになります。ここで、 &lt;code&gt;P1&lt;/code&gt; は最初の引数で、 &lt;code&gt;P2&lt;/code&gt; は2番目の引数です。プロセス &lt;code&gt;P1&lt;/code&gt; は、ステートメントを実行するプロセスが使用するのと同じトレーサーに送信されるトレースメッセージを取得します。 &lt;code&gt;P1&lt;/code&gt; は、アトム &lt;code&gt;all&lt;/code&gt; 、 &lt;code&gt;new&lt;/code&gt; 、または &lt;code&gt;existing&lt;/code&gt; のいずれかにする&lt;strong&gt;ことはできません&lt;/strong&gt;（それらが登録名でない限り）。 &lt;code&gt;P2&lt;/code&gt; は&lt;strong&gt;できません&lt;/strong&gt;こと &lt;code&gt;cpu_timestamp&lt;/code&gt; か&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;tracer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="088861dc6130289d10248cfe85bbf4f7f1f9d45d" translate="yes" xml:space="preserve">
          <source>Within Git</source>
          <target state="translated">Gitの中で</target>
        </trans-unit>
        <trans-unit id="6b3360c3e0960ab42b445ecad47d54b883ada536" translate="yes" xml:space="preserve">
          <source>Within a given module, the following shorthand suffices in most cases:</source>
          <target state="translated">与えられたモジュールの中では、ほとんどの場合、以下の短縮形で十分です。</target>
        </trans-unit>
        <trans-unit id="7a2917f02c4039ffaf187fe5fd6d555a6ef7c728" translate="yes" xml:space="preserve">
          <source>Within strings and quoted atoms, the following escape sequences are recognized:</source>
          <target state="translated">文字列と引用符で囲まれた原子の中では、以下のエスケープシーケンスが認識されます。</target>
        </trans-unit>
        <trans-unit id="53a5de5fa09f36497fe31f500b85e996cf6d9e85" translate="yes" xml:space="preserve">
          <source>Without the parentheses, it would match &quot;cataract&quot;, &quot;erpillar&quot;, or an empty string.</source>
          <target state="translated">括弧がなければ、「白内障」や「エルピラー」、あるいは空文字列と一致します。</target>
        </trans-unit>
        <trans-unit id="1345f1a81ca030cb98d73c1808db779330bcf78e" translate="yes" xml:space="preserve">
          <source>Without the tags (the numbers in square brackets) the ASN.1 compiler refused to compile the file.</source>
          <target state="translated">タグ(角括弧内の数字)がないと、ASN.1コンパイラはファイルのコンパイルを拒否しました。</target>
        </trans-unit>
        <trans-unit id="b66639b539cbc9a7d8de83368630ef491e405704" translate="yes" xml:space="preserve">
          <source>Without writing any instrumentation functions, we can compile the MIB and use the default implementation of it. Recall that MIBs imported by &quot;EX1-MIB.mib&quot; must be present and compiled in the current directory (&quot;./STANDARD-MIB.bin&quot;,&quot;./RFC1213-MIB.bin&quot;) when compiling.</source>
          <target state="translated">インストルメンテーション関数を書かずに、MIBをコンパイルしてデフォルトの実装を使用することができます。EX1-MIB.mib &quot;によってインポートされたMIBは、コンパイル時にカレントディレクトリ(&quot;./STANDARD-MIB.bin&quot;,&quot;./RFC1213-MIB.bin&quot;)に存在し、コンパイルされていなければならないことを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="8d22583a6ade42fd4309dee38fdacc3898c0902c" translate="yes" xml:space="preserve">
          <source>Workers are processes that perform computations, that is, they do the actual work.</source>
          <target state="translated">労働者とは、計算を行うプロセスであり、実際の作業を行うものである。</target>
        </trans-unit>
        <trans-unit id="e985d0ce8ef0c16218446f6d7fcdb35b7c5b2148" translate="yes" xml:space="preserve">
          <source>Works as &lt;code&gt;'and'&lt;/code&gt;, but quits evaluating its arguments when one argument evaluates to something else than &lt;code&gt;true&lt;/code&gt;. Arguments are evaluated left to right.</source>
          <target state="translated">&lt;code&gt;'and'&lt;/code&gt; として機能しますが、1つの引数が &lt;code&gt;true&lt;/code&gt; 以外の値に評価されると、その引数の評価を中止します。引数は左から右に評価されます。</target>
        </trans-unit>
        <trans-unit id="b805de4afdf90d138f66c4564f25db6bc7ea93cf" translate="yes" xml:space="preserve">
          <source>Works as &lt;code&gt;'or'&lt;/code&gt;, but quits evaluating as soon as one of its arguments evaluates to &lt;code&gt;true&lt;/code&gt;. Arguments are evaluated left to right.</source>
          <target state="translated">作品 &lt;code&gt;'or'&lt;/code&gt; 、しかし、すぐにその引数を評価するの一つとして評価が終了します &lt;code&gt;true&lt;/code&gt; 。引数は左から右に評価されます。</target>
        </trans-unit>
        <trans-unit id="52d6d72bd3a0d1273818970c818a802d34ed9904" translate="yes" xml:space="preserve">
          <source>Works as &lt;code&gt;&lt;a href=&quot;#spawn-3&quot;&gt;spawn/3&lt;/a&gt;&lt;/code&gt;, except that an extra option list is specified when creating the process.</source>
          <target state="translated">プロセスの作成時に追加のオプションリストが指定されることを除いて、 &lt;code&gt;&lt;a href=&quot;#spawn-3&quot;&gt;spawn/3&lt;/a&gt;&lt;/code&gt; として機能します。</target>
        </trans-unit>
        <trans-unit id="68e63d5c50b23e19cd48feaa939f809fb8ce20db" translate="yes" xml:space="preserve">
          <source>Works as &lt;code&gt;&lt;a href=&quot;erlang#port_command-2&quot;&gt;erlang:port_command/2&lt;/a&gt;&lt;/code&gt;, except that it is always completely asynchronous.</source>
          <target state="translated">常に完全に非同期であることを除いて、 &lt;code&gt;&lt;a href=&quot;erlang#port_command-2&quot;&gt;erlang:port_command/2&lt;/a&gt;&lt;/code&gt; として機能します。</target>
        </trans-unit>
        <trans-unit id="421d33f0ac157b829988ba873a00c78043a6c8f0" translate="yes" xml:space="preserve">
          <source>Works as &lt;code&gt;&lt;a href=&quot;erlang#whereis-1&quot;&gt;erlang:whereis/1&lt;/a&gt;&lt;/code&gt;, but restricted to ports. See &lt;code&gt;&lt;a href=&quot;#enif_whereis_pid&quot;&gt;enif_whereis_pid&lt;/a&gt;&lt;/code&gt; to resolve registered processes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#whereis-1&quot;&gt;erlang:whereis/1&lt;/a&gt;&lt;/code&gt; として機能しますが、ポートに制限されています。登録されたプロセスを解決するには、 &lt;code&gt;&lt;a href=&quot;#enif_whereis_pid&quot;&gt;enif_whereis_pid&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="085224b8ff26237fd246cda51d286da34d390cf3" translate="yes" xml:space="preserve">
          <source>Works as &lt;code&gt;&lt;a href=&quot;erlang#whereis-1&quot;&gt;erlang:whereis/1&lt;/a&gt;&lt;/code&gt;, but restricted to processes. See &lt;code&gt;&lt;a href=&quot;#enif_whereis_port&quot;&gt;enif_whereis_port&lt;/a&gt;&lt;/code&gt; to resolve registered ports.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#whereis-1&quot;&gt;erlang:whereis/1&lt;/a&gt;&lt;/code&gt; として機能しますが、プロセスに制限されています。 &lt;code&gt;&lt;a href=&quot;#enif_whereis_port&quot;&gt;enif_whereis_port&lt;/a&gt;&lt;/code&gt; を参照してください登録されたポートを解決するにを。</target>
        </trans-unit>
        <trans-unit id="40146c9605b0953856848c19e1cf03b08671385c" translate="yes" xml:space="preserve">
          <source>Works as &lt;code&gt;load&lt;/code&gt;, except that &lt;code&gt;*old_priv_data&lt;/code&gt; already contains the value set by the last call to &lt;code&gt;load&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt; for the old module code. &lt;code&gt;*priv_data&lt;/code&gt; is initialized to &lt;code&gt;NULL&lt;/code&gt; when &lt;code&gt;upgrade&lt;/code&gt; is called. It is allowed to write to both &lt;code&gt;*priv_data&lt;/code&gt; and &lt;code&gt;*old_priv_data.&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*old_priv_data&lt;/code&gt; に、古いモジュールコードを &lt;code&gt;load&lt;/code&gt; または &lt;code&gt;upgrade&lt;/code&gt; ための最後の呼び出しで設定された値がすでに含まれていることを除いて、 &lt;code&gt;load&lt;/code&gt; として機能します。 &lt;code&gt;*priv_data&lt;/code&gt; は、 &lt;code&gt;upgrade&lt;/code&gt; が呼び出されると &lt;code&gt;NULL&lt;/code&gt; に初期化されます。 &lt;code&gt;*priv_data&lt;/code&gt; と &lt;code&gt;*old_priv_data.&lt;/code&gt; 両方に書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="93d1ed2124b6fb6e88a162d4ef28c9020229925d" translate="yes" xml:space="preserve">
          <source>Works as &lt;code&gt;return_trace&lt;/code&gt; plus; if the traced function exits because of an exception, an &lt;code&gt;exception_from&lt;/code&gt; trace message is generated, regardless of the exception is caught or not.</source>
          <target state="translated">&lt;code&gt;return_trace&lt;/code&gt; plus として機能します。例外のためにトレースされた関数が終了すると、例外がキャッチされたかどうかに関係なく、 &lt;code&gt;exception_from&lt;/code&gt; トレースメッセージが生成されます。</target>
        </trans-unit>
        <trans-unit id="b206078d6990b20bbaaa91f4c79a77c17d0c31c4" translate="yes" xml:space="preserve">
          <source>Works as &lt;code&gt;seq_trace:set_token/2&lt;/code&gt;, but returns &lt;code&gt;true&lt;/code&gt; on success, and &lt;code&gt;'EXIT'&lt;/code&gt; on error or bad argument. Only allowed in the &lt;code&gt;MatchBody&lt;/code&gt; part and only allowed when tracing.</source>
          <target state="translated">&lt;code&gt;seq_trace:set_token/2&lt;/code&gt; として機能し &lt;code&gt;true&lt;/code&gt; 、成功した場合はtrueを返し、エラーまたは不正な引数の場合は &lt;code&gt;'EXIT'&lt;/code&gt; を返します。でのみ許可されています &lt;code&gt;MatchBody&lt;/code&gt; の一部およびトレースするときにのみ許さ。</target>
        </trans-unit>
        <trans-unit id="d480bca78a77b5885a0910d0fbf6196db4a96eda" translate="yes" xml:space="preserve">
          <source>Works as in &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#matches-3&quot;&gt;matches/3&lt;/a&gt;&lt;/code&gt;. Notice that this only defines the scope of the search for matching strings, it does not cut the binary before splitting. The bytes before and after the scope are kept in the result. See the example below.</source>
          <target state="translated">以下のように、作品 &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#matches-3&quot;&gt;matches/3&lt;/a&gt;&lt;/code&gt; ます。これは一致する文字列の検索範囲を定義するだけであり、分割前にバイナリをカットしないことに注意してください。スコープの前後のバイトは結果に保持されます。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="2d4aa6d105820c86c03ede882c8250e6072a4f8d" translate="yes" xml:space="preserve">
          <source>Works essentially as &lt;code&gt;load/2&lt;/code&gt;, but loads the driver with other options. All ports using the driver are killed with reason &lt;code&gt;driver_unloaded&lt;/code&gt; when the driver is to be unloaded.</source>
          <target state="translated">基本的に &lt;code&gt;load/2&lt;/code&gt; として機能しますが、他のオプションでドライバーをロードします。ドライバーをアンロードするときに、ドライバーを使用するすべてのポートが理由 &lt;code&gt;driver_unloaded&lt;/code&gt; で強制終了されます。</target>
        </trans-unit>
        <trans-unit id="5e9a156a4b5e3485aac781717824cc9df2b0af97" translate="yes" xml:space="preserve">
          <source>Works exactly as &lt;code&gt;&lt;a href=&quot;#reload-2&quot;&gt;reload/2&lt;/a&gt;&lt;/code&gt;, but for drivers loaded with the &lt;code&gt;&lt;a href=&quot;#load_driver-2&quot;&gt;load_driver/2&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#reload-2&quot;&gt;reload/2&lt;/a&gt;&lt;/code&gt; とまったく同じように機能しますが、 &lt;code&gt;&lt;a href=&quot;#load_driver-2&quot;&gt;load_driver/2&lt;/a&gt;&lt;/code&gt; でロードされたドライバーの場合機能しますがインターフェースで用です。</target>
        </trans-unit>
        <trans-unit id="e5bfcfa08363e9c1a9e4a5a320563ffdd6d25978" translate="yes" xml:space="preserve">
          <source>Works exactly as &lt;code&gt;ei_send&lt;/code&gt;, the alternative name is retained for backward compatibility. The function will &lt;strong&gt;not&lt;/strong&gt; be removed without prior notice.</source>
          <target state="translated">&lt;code&gt;ei_send&lt;/code&gt; とまったく同じように機能し、下位互換性のために代替名が保持されます。関数はし&lt;strong&gt;ません&lt;/strong&gt;予告なしに削除され。</target>
        </trans-unit>
        <trans-unit id="7179b049e2ae6550971075883dbbca59a393c2f9" translate="yes" xml:space="preserve">
          <source>Works exactly as &lt;code&gt;erlang:list_to_binary/1&lt;/code&gt;, added for completeness.</source>
          <target state="translated">&lt;code&gt;erlang:list_to_binary/1&lt;/code&gt; とまったく同じように機能します完全をために追加さとに機能します。</target>
        </trans-unit>
        <trans-unit id="2045c26d05c2a39ea8c38958e51e1b6854d1e881" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;&lt;a href=&quot;#error-1&quot;&gt;error/1&lt;/a&gt;&lt;/code&gt;, but Dialyzer thinks that this BIF will return an arbitrary term. When used in a stub function for a NIF to generate an exception when the NIF library is not loaded, Dialyzer does not generate false warnings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#error-1&quot;&gt;error/1&lt;/a&gt;&lt;/code&gt; とまったく同じように動作しますとが、DialyzerはこのBIFが任意の項を返すと考えています。NIFライブラリがロードされていないときに例外を生成するためにNIFのスタブ関数で使用される場合、Dialyzerは誤った警告を生成しません。</target>
        </trans-unit>
        <trans-unit id="b8e1ee5514688631957d392523baa902aeec57af" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;&lt;a href=&quot;#error-2&quot;&gt;error/2&lt;/a&gt;&lt;/code&gt;, but Dialyzer thinks that this BIF will return an arbitrary term. When used in a stub function for a NIF to generate an exception when the NIF library is not loaded, Dialyzer does not generate false warnings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#error-2&quot;&gt;error/2&lt;/a&gt;&lt;/code&gt; とまったく同じように動作しますとが、DialyzerはこのBIFが任意の項を返すと考えています。NIFライブラリがロードされていないときに例外を生成するためにNIFのスタブ関数で使用される場合、Dialyzerは誤った警告を生成しません。</target>
        </trans-unit>
        <trans-unit id="1a3109fb641a70d9d930babef77e4ba838f74539" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;foldl/3&lt;/code&gt; but iterates the table in the opposite order for the &lt;code&gt;ordered_set&lt;/code&gt; table type. For all other table types, &lt;code&gt;foldr/3&lt;/code&gt; and &lt;code&gt;foldl/3&lt;/code&gt; are synonyms.</source>
          <target state="translated">&lt;code&gt;foldl/3&lt;/code&gt; とまったく同じように &lt;code&gt;ordered_set&lt;/code&gt; ますが、ordered_setテーブルタイプとは逆の順序でテーブルを反復処理します。他のすべてのテーブルタイプでは、 &lt;code&gt;foldr/3&lt;/code&gt; と &lt;code&gt;foldl/3&lt;/code&gt; は同義語です。</target>
        </trans-unit>
        <trans-unit id="ede6e2c002732cbb9c8c10ac948ca96d91d6146f" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;mnesia:dirty_first/1&lt;/code&gt; but returns the last object in Erlang term order for the &lt;code&gt;ordered_set&lt;/code&gt; table type. For all other table types, &lt;code&gt;mnesia:dirty_first/1&lt;/code&gt; and &lt;code&gt;mnesia:dirty_last/1&lt;/code&gt; are synonyms.</source>
          <target state="translated">&lt;code&gt;mnesia:dirty_first/1&lt;/code&gt; とまったく同じように機能しますが、 &lt;code&gt;ordered_set&lt;/code&gt; テーブルタイプのErlang用語順で最後のオブジェクトを返します。他のすべてのテーブルタイプでは、 &lt;code&gt;mnesia:dirty_first/1&lt;/code&gt; と &lt;code&gt;mnesia:dirty_last/1&lt;/code&gt; は同義語です。</target>
        </trans-unit>
        <trans-unit id="f09f9e05fb05f55c1656616d936508f427869fa6" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;mnesia:dirty_next/2&lt;/code&gt; but returns the previous object in Erlang term order for the &lt;code&gt;ordered_set&lt;/code&gt; table type. For all other table types, &lt;code&gt;mnesia:dirty_next/2&lt;/code&gt; and &lt;code&gt;mnesia:dirty_prev/2&lt;/code&gt; are synonyms.</source>
          <target state="translated">&lt;code&gt;mnesia:dirty_next/2&lt;/code&gt; とまったく同じように機能しますが、 &lt;code&gt;ordered_set&lt;/code&gt; テーブルタイプの以前のオブジェクトをErlang用語順に返します。他のすべてのテーブルタイプでは、 &lt;code&gt;mnesia:dirty_next/2&lt;/code&gt; と &lt;code&gt;mnesia:dirty_prev/2&lt;/code&gt; は同義語です。</target>
        </trans-unit>
        <trans-unit id="11974cf8c00cb82ecc66409b4c6075ddde474d45" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;mnesia:first/1&lt;/code&gt;, but returns the last object in Erlang term order for the &lt;code&gt;ordered_set&lt;/code&gt; table type. For all other table types, &lt;code&gt;mnesia:first/1&lt;/code&gt; and &lt;code&gt;mnesia:last/1&lt;/code&gt; are synonyms.</source>
          <target state="translated">&lt;code&gt;mnesia:first/1&lt;/code&gt; とまったく同じように機能しますが、 &lt;code&gt;ordered_set&lt;/code&gt; テーブルタイプのErlang用語順で最後のオブジェクトを返します。他のすべてのテーブルタイプでは、 &lt;code&gt;mnesia:first/1&lt;/code&gt; と &lt;code&gt;mnesia:last/1&lt;/code&gt; は同義語です。</target>
        </trans-unit>
        <trans-unit id="f5f64af685225de3b4df13f2834bfefb3bc5a5c6" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;mnesia:next/2&lt;/code&gt;, but returns the previous object in Erlang term order for the &lt;code&gt;ordered_set&lt;/code&gt; table type. For all other table types, &lt;code&gt;mnesia:next/2&lt;/code&gt; and &lt;code&gt;mnesia:prev/2&lt;/code&gt; are synonyms.</source>
          <target state="translated">&lt;code&gt;mnesia:next/2&lt;/code&gt; とまったく同じように機能しますが、 &lt;code&gt;ordered_set&lt;/code&gt; テーブルタイプの以前のオブジェクトをErlang用語の順序で返します。他のすべてのテーブルタイプでは、 &lt;code&gt;mnesia:next/2&lt;/code&gt; と &lt;code&gt;mnesia:prev/2&lt;/code&gt; は同義語です。</target>
        </trans-unit>
        <trans-unit id="aa867b66bdf4464e1af900cf9c347d8786874ee8" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#file-2&quot;&gt;file/2&lt;/a&gt;&lt;/code&gt;, except that the environment variable &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; is not consulted.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#file-2&quot;&gt;file/2&lt;/a&gt;&lt;/code&gt; と同様に機能しますが、環境変数 &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; は参照されません。</target>
        </trans-unit>
        <trans-unit id="c221d6baa71557704311e515bfcd11a497af34c4" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#forms-2&quot;&gt;forms/2&lt;/a&gt;&lt;/code&gt;, except that the environment variable &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; is not consulted.</source>
          <target state="translated">環境変数 &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; が参照されないことを除いて、 &lt;code&gt;&lt;a href=&quot;#forms-2&quot;&gt;forms/2&lt;/a&gt;&lt;/code&gt; のように機能します。</target>
        </trans-unit>
        <trans-unit id="de55de8466623382fc89162e3c4ac168d56f7b5c" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#get_env-2&quot;&gt;get_env/2&lt;/a&gt;&lt;/code&gt; but returns value &lt;code&gt;Def&lt;/code&gt; when configuration parameter &lt;code&gt;Par&lt;/code&gt; does not exist.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#get_env-2&quot;&gt;get_env/2&lt;/a&gt;&lt;/code&gt; と同様に機能しますが、構成パラメーター &lt;code&gt;Par&lt;/code&gt; が存在しない場合は値 &lt;code&gt;Def&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="891e2c50d6effc0271b3ccde49d4759c5cc0c4d1" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#lookup-2&quot;&gt;lookup/2&lt;/a&gt;&lt;/code&gt;, but does not return the objects. Returns &lt;code&gt;true&lt;/code&gt; if one or more elements in the table has key &lt;code&gt;Key&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#lookup-2&quot;&gt;lookup/2&lt;/a&gt;&lt;/code&gt; のように機能しますが、オブジェクトを返しません。テーブルの1つ以上の要素にキー &lt;code&gt;Key&lt;/code&gt; がある場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7c7dfe1c4ccfa61fb28f685417a682d140814b7c" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#lookup-2&quot;&gt;lookup/2&lt;/a&gt;&lt;/code&gt;, but does not return the objects. Returns &lt;code&gt;true&lt;/code&gt; if one or more table elements has key &lt;code&gt;Key&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#lookup-2&quot;&gt;lookup/2&lt;/a&gt;&lt;/code&gt; のように機能しますが、オブジェクトを返しません。1つ以上のテーブル要素にキー &lt;code&gt;Key&lt;/code&gt; がある場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="45ece2d9f6d9938921bea31a3a34b89ad834859c" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt;, but returns only a limited (&lt;code&gt;Limit&lt;/code&gt;) number of matching objects. Term &lt;code&gt;Continuation&lt;/code&gt; can then be used in subsequent calls to &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1&lt;/a&gt;&lt;/code&gt; to get the next chunk of matching objects. This is a space-efficient way to work on objects in a table, which is faster than traversing the table object by object using &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt; のように機能しますが、一致するオブジェクトの限られた（ &lt;code&gt;Limit&lt;/code&gt; ）数のみを返します。次に、Term &lt;code&gt;Continuation&lt;/code&gt; を後続の &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1&lt;/a&gt;&lt;/code&gt; の呼び出しで使用して、一致するオブジェクトの次のチャンクを取得できます。これは、テーブル内のオブジェクトを操作するためのスペース効率の良い方法です。これは、 &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; を使用してオブジェクトごとにテーブルオブジェクトをトラバースするよりも高速です。</target>
        </trans-unit>
        <trans-unit id="4553dd74ce070981c1a8fcf6d3cb0c01be4e1255" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#match_object-2&quot;&gt;match_object/2&lt;/a&gt;&lt;/code&gt;, but only returns a limited (&lt;code&gt;Limit&lt;/code&gt;) number of matching objects. Term &lt;code&gt;Continuation&lt;/code&gt; can then be used in subsequent calls to &lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1&lt;/a&gt;&lt;/code&gt; to get the next chunk of matching objects. This is a space-efficient way to work on objects in a table, which is faster than traversing the table object by object using &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#match_object-2&quot;&gt;match_object/2&lt;/a&gt;&lt;/code&gt; と同様に機能しますが、一致するオブジェクトの限られた（ &lt;code&gt;Limit&lt;/code&gt; ）数のみを返します。次に、用語の &lt;code&gt;Continuation&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1&lt;/a&gt;&lt;/code&gt; への後続の呼び出しで使用して、一致するオブジェクトの次のチャンクを取得できます。これは、テーブル内のオブジェクトを操作するためのスペース効率の良い方法です。これは、 &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; を使用してオブジェクトごとにテーブルオブジェクトをトラバースするよりも高速です。</target>
        </trans-unit>
        <trans-unit id="fdb05aad10b9931ac9274b9bfbd0f42cfeeb5831" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#output_generated-1&quot;&gt;output_generated/1&lt;/a&gt;&lt;/code&gt;, except that the environment variable &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; is not consulted.</source>
          <target state="translated">環境変数 &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; が参照されないことを除いて、 &lt;code&gt;&lt;a href=&quot;#output_generated-1&quot;&gt;output_generated/1&lt;/a&gt;&lt;/code&gt; と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="d3a6a65715bb756fb3aa512641f3c96d83f1564a" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#read_file_info-1&quot;&gt;read_file_info/1&lt;/a&gt;&lt;/code&gt; except that if &lt;code&gt;Filename&lt;/code&gt; is a symbolic link, information about the link is returned in the &lt;code&gt;file_info&lt;/code&gt; record and the &lt;code&gt;type&lt;/code&gt; field of the record is set to &lt;code&gt;symlink&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#read_file_info-1&quot;&gt;read_file_info/1&lt;/a&gt;&lt;/code&gt; と同様に機能しますが、 &lt;code&gt;Filename&lt;/code&gt; がシンボリックリンクの場合、リンクに関する情報が &lt;code&gt;file_info&lt;/code&gt; レコードで返され、レコードの &lt;code&gt;type&lt;/code&gt; フィールドが &lt;code&gt;symlink&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="00d1c8949d6fad0922ba5ab04fe0bc7e556fac85" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#read_file_info-2&quot;&gt;read_file_info/1,2&lt;/a&gt;&lt;/code&gt; except that if &lt;code&gt;Name&lt;/code&gt; is a symbolic link, information about the link is returned in the &lt;code&gt;file_info&lt;/code&gt; record and the &lt;code&gt;type&lt;/code&gt; field of the record is set to &lt;code&gt;symlink&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; がシンボリックリンクの場合、リンクに関する情報が &lt;code&gt;file_info&lt;/code&gt; レコードで返され、レコードの &lt;code&gt;type&lt;/code&gt; フィールドが &lt;code&gt;symlink&lt;/code&gt; に設定されることを除いて、 &lt;code&gt;&lt;a href=&quot;#read_file_info-2&quot;&gt;read_file_info/1,2&lt;/a&gt;&lt;/code&gt; と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="4306a682289fe29cf880491be6e2d650b6ee0a9e" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#select-2&quot;&gt;select/2&lt;/a&gt;&lt;/code&gt;, but only returns a limited (&lt;code&gt;Limit&lt;/code&gt;) number of matching objects. Term &lt;code&gt;Continuation&lt;/code&gt; can then be used in subsequent calls to &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; to get the next chunk of matching objects. This is a space-efficient way to work on objects in a table, which is still faster than traversing the table object by object using &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#select-2&quot;&gt;select/2&lt;/a&gt;&lt;/code&gt; と同様に機能しますが、一致するオブジェクトの限られた（ &lt;code&gt;Limit&lt;/code&gt; ）数のみを返します。その後、 &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; への後続の呼び出しで用語の &lt;code&gt;Continuation&lt;/code&gt; を使用して、一致するオブジェクトの次のチャンクを取得できます。これは、テーブル内のオブジェクトを処理するためのスペース効率の良い方法です。これは、 &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; を使用してオブジェクトごとにテーブルオブジェクトをトラバースするよりも高速です。</target>
        </trans-unit>
        <trans-unit id="c75d2e2ac9a39c9318f254f40721c617f94d8679" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#select-2&quot;&gt;select/2&lt;/a&gt;&lt;/code&gt;, but returns the list in reverse order for table type &lt;code&gt;ordered_set&lt;/code&gt;. For all other table types, the return value is identical to that of &lt;code&gt;select/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#select-2&quot;&gt;select/2&lt;/a&gt;&lt;/code&gt; と同様に機能しますが、テーブルタイプ &lt;code&gt;ordered_set&lt;/code&gt; のリストを逆順に返します。他のすべてのテーブルタイプの場合、戻り値は &lt;code&gt;select/2&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="463bdae22eae3b8c8de82e8a6bc16d71e831e6bf" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt;, but for table type &lt;code&gt;ordered_set&lt;/code&gt; traversing is done starting at the last object in Erlang term order and moves to the first. For all other table types, the return value is identical to that of &lt;code&gt;select/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; と同じように機能しますが、テーブルタイプの場合、 &lt;code&gt;ordered_set&lt;/code&gt; トラバースはErlang用語の順序の最後のオブジェクトから始まり、最初のオブジェクトに移動します。他のすべてのテーブルタイプの場合、戻り値は &lt;code&gt;select/3&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="e5c1c8abeb4c1279789b624d58a590686cd04c5e" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;unicode&lt;/code&gt;, but translation is done to and from big endian UTF-16 instead of UTF-8.</source>
          <target state="translated">&lt;code&gt;unicode&lt;/code&gt; のように機能しますが、変換はUTF-8ではなくビッグエンディアンUTF-16との間で行われます。</target>
        </trans-unit>
        <trans-unit id="5a412e21ff7312505155bfe656355b5d3f799926" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;unicode&lt;/code&gt;, but translation is done to and from big endian UTF-32 instead of UTF-8.</source>
          <target state="translated">&lt;code&gt;unicode&lt;/code&gt; のように機能しますが、変換はUTF-8ではなくビッグエンディアンUTF-32との間で行われます。</target>
        </trans-unit>
        <trans-unit id="b35d9e673e5534d1403707a3a6113b4ad6821fdd" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;unicode&lt;/code&gt;, but translation is done to and from little endian UTF-16 instead of UTF-8.</source>
          <target state="translated">&lt;code&gt;unicode&lt;/code&gt; のように機能しますが、UTF-8ではなくリトルエンディアンUTF-16との間で変換が行われます。</target>
        </trans-unit>
        <trans-unit id="8acfc4c821f38a6abb20c5dbdbea542fe62afdc7" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;unicode&lt;/code&gt;, but translation is done to and from little endian UTF-32 instead of UTF-8.</source>
          <target state="translated">&lt;code&gt;unicode&lt;/code&gt; のように機能しますが、UTF-8ではなくリトルエンディアンUTF-32との間で変換が行われます。</target>
        </trans-unit>
        <trans-unit id="97b569356d25181602cf1090387087658283aa4f" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;{spawn, Command}&lt;/code&gt;, but demands the first (space-separated) token of the command to be the name of a loaded driver. If no driver with that name is loaded, a &lt;code&gt;badarg&lt;/code&gt; error is raised.</source>
          <target state="translated">&lt;code&gt;{spawn, Command}&lt;/code&gt; ように機能しますが、コマンドの最初の（スペースで区切られた）トークンがロードされたドライバーの名前であることを要求します。その名前のドライバーがロードされていない場合、 &lt;code&gt;badarg&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="be0e1775e6fa37077ec9c7df7a951bfba4f6f14d" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;{spawn, FileName}&lt;/code&gt;, but only runs external executables. &lt;code&gt;FileName&lt;/code&gt; in its whole is used as the name of the executable, including any spaces. If arguments are to be passed, the &lt;code&gt;PortSettings&lt;/code&gt;&lt;code&gt;args&lt;/code&gt; and &lt;code&gt;arg0&lt;/code&gt; can be used.</source>
          <target state="translated">&lt;code&gt;{spawn, FileName}&lt;/code&gt; ように機能しますが、外部の実行可能ファイルのみを実行します。 &lt;code&gt;FileName&lt;/code&gt; 全体は、スペースを含む実行可能ファイルの名前として使用されます。引数を渡す場合は、 &lt;code&gt;PortSettings&lt;/code&gt; &lt;code&gt;args&lt;/code&gt; および &lt;code&gt;arg0&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ff53e6ce6f573342993b9753bf5e3d494ee84afd" translate="yes" xml:space="preserve">
          <source>Works the same way as &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt;, only argument &lt;code&gt;TestCase&lt;/code&gt; makes it possible to pause a test case executing in a parallel group. Function &lt;code&gt;&lt;a href=&quot;#continue-1&quot;&gt;ct:continue/1&lt;/a&gt;&lt;/code&gt; is to be used to resume execution of &lt;code&gt;TestCase&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt; と同じように機能します。引数 &lt;code&gt;TestCase&lt;/code&gt; のみが、並列グループで実行されているテストケースを一時停止することを可能にします。関数 &lt;code&gt;&lt;a href=&quot;#continue-1&quot;&gt;ct:continue/1&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;TestCase&lt;/code&gt; の実行を再開するために使用されます。</target>
        </trans-unit>
        <trans-unit id="9ebd064339024e6787ef613697d6eb49d74be02e" translate="yes" xml:space="preserve">
          <source>Wrap logs can be formatted one by one or all at once. See &lt;code&gt;&lt;a href=&quot;#format&quot;&gt;Formatting&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ラップログは、一度に1つずつ、またはすべてフォーマットできます。 &lt;code&gt;&lt;a href=&quot;#format&quot;&gt;Formatting&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c1c3bb1f1e3dd57b50d33d1e8bed09452b9c10aa" translate="yes" xml:space="preserve">
          <source>Wrap logs can be formatted one by one or all at once. To format one of the wrap logs in a set, specify the exact file name. To format the whole set of wrap logs, specify the name with &lt;code&gt;*&lt;/code&gt; instead of the wrap count.</source>
          <target state="translated">ラップログは、一度に1つずつ、またはすべてフォーマットできます。セット内のラップログの1つをフォーマットするには、正確なファイル名を指定します。ラップログのセット全体をフォーマットするには、ラップカウントの代わりに &lt;code&gt;*&lt;/code&gt; を使用して名前を指定します。</target>
        </trans-unit>
        <trans-unit id="83ae92c027e83e4c2178c5c0cce8b7e2a0dbbeb1" translate="yes" xml:space="preserve">
          <source>Wrap logs can be formatted one by one or all at once. To format one of the wrap logs in a set, specify the exact file name. To format the whole set of wrap logs, specify the name with &lt;code&gt;*&lt;/code&gt; instead of the wrap count. For examples, see the &lt;code&gt;&lt;a href=&quot;ttb_ug#format&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ラップログは、一度に1つずつ、またはすべてフォーマットできます。セット内のラップログの1つをフォーマットするには、正確なファイル名を指定します。ラップログのセット全体をフォーマットするには、ラップカウントの代わりに &lt;code&gt;*&lt;/code&gt; を使用して名前を指定します。例については、 『 &lt;code&gt;&lt;a href=&quot;ttb_ug#format&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="e130c2b794ac2a10a6d2f6a4c7b34014ba6446cb" translate="yes" xml:space="preserve">
          <source>Wrap logs write at most &lt;code&gt;MaxNoBytes&lt;/code&gt; bytes on each file and use &lt;code&gt;MaxNoFiles&lt;/code&gt; files before starting all over with the first wrap log file. Regardless of &lt;code&gt;MaxNoBytes&lt;/code&gt;, at least the header (if there is one) and one item are written on each wrap log file before wrapping to the next file.</source>
          <target state="translated">&lt;code&gt;MaxNoBytes&lt;/code&gt; 、各ファイルに最大でMaxNoBytesバイトを書き込み、最初のラップログファイルから最初から &lt;code&gt;MaxNoFiles&lt;/code&gt; 前にMaxNoFilesファイルを使用します。 &lt;code&gt;MaxNoBytes&lt;/code&gt; に関係なく、少なくともヘッダー（存在する場合）と1つの項目が、次のファイルにラップする前に各ラップログファイルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="a105d6522aa571e1e8a17d1e92e4d1aea0100739" translate="yes" xml:space="preserve">
          <source>Write a module:</source>
          <target state="translated">モジュールを書く。</target>
        </trans-unit>
        <trans-unit id="862fb68e5dcbfd4f5ccc03b0d915546c33fda2ac" translate="yes" xml:space="preserve">
          <source>Write a record to the mib-storage table.</source>
          <target state="translated">mib-storage テーブルにレコードを書き込みます。</target>
        </trans-unit>
        <trans-unit id="622ba19358824007fde51e6a93cbc5f73ee9f13a" translate="yes" xml:space="preserve">
          <source>Write buffered data to disk.</source>
          <target state="translated">バッファリングされたデータをディスクに書き込みます。</target>
        </trans-unit>
        <trans-unit id="ae037ff48de64980dec3bbf67f3a772e165b5a46" translate="yes" xml:space="preserve">
          <source>Write buffers grow large, which slows down file sync operations.</source>
          <target state="translated">書き込みバッファが大きくなり、ファイルの同期動作が遅くなる。</target>
        </trans-unit>
        <trans-unit id="5d031fc12a848dc71278bf7dd316744781ab426b" translate="yes" xml:space="preserve">
          <source>Write generated source to the specified directory. Defaults to the current working directory.</source>
          <target state="translated">生成されたソースを指定されたディレクトリに書き込みます。デフォルトは現在の作業ディレクトリです。</target>
        </trans-unit>
        <trans-unit id="6a816c8f29a683594138fa84579ffe937a14ab50" translate="yes" xml:space="preserve">
          <source>Write generated source to the specified directory. Defaults to the current working directory. Has no effect if option &lt;code&gt;return&lt;/code&gt; is specified.</source>
          <target state="translated">生成されたソースを指定されたディレクトリに書き込みます。デフォルトは現在の作業ディレクトリです。オプション &lt;code&gt;return&lt;/code&gt; が指定されている場合は無効です。</target>
        </trans-unit>
        <trans-unit id="89eca924064063f936f3bc70867b6edb5305fe4c" translate="yes" xml:space="preserve">
          <source>Write locks are exclusive. This means that if one transaction manages to acquire a write lock on an item, no other transaction can acquire any kind of lock on the same item.</source>
          <target state="translated">書き込みロックは排他的である。これは、あるトランザクションがアイテムの書き込みロックを取得することに成功した場合、他のトランザクションは同じアイテムのいかなる種類のロックも取得できないことを意味します。</target>
        </trans-unit>
        <trans-unit id="0d8d63d23c0975c3cee9720bc48f9847ff5cff67" translate="yes" xml:space="preserve">
          <source>Write locks are normally acquired on all nodes where a replica of the table resides (and is active). Read locks are acquired on one node (the local node if a local replica exists). Most of the context-sensitive access functions acquire an implicit lock if they are started in a transaction-context. The granularity of a lock can either be a single record or an entire table.</source>
          <target state="translated">書き込みロックは通常、テーブルのレプリカが存在する(アクティブな)すべてのノードで取得されます。読み出しロックは、1つのノード(ローカルレプリカが存在する場合はローカルノード)で取得されます。コンテキストに依存したアクセス関数のほとんどは、トランザクションコンテキストで起動された場合、暗黙のロックを取得します。ロックの粒度は、単一のレコードかテーブル全体のどちらかになります。</target>
        </trans-unit>
        <trans-unit id="f8e027a55cac814963905df28e128e53f025a271" translate="yes" xml:space="preserve">
          <source>Write locks are normally acquired on all nodes where a replica of the table resides (and is active). Read locks are acquired on one node (the local one if a local replica exists).</source>
          <target state="translated">書き込みロックは通常、テーブルのレプリカが存在する(アクティブな)すべてのノードで取得されます。読み出しロックは、1つのノード(ローカルレプリカが存在する場合はローカルのもの)で取得されます。</target>
        </trans-unit>
        <trans-unit id="bf2bd0f3b5bd4941bbbcb59f2d35430b7d335818" translate="yes" xml:space="preserve">
          <source>Write more information to a trace information file, which is read during formatting.</source>
          <target state="translated">フォーマット中に読み込まれたトレース情報ファイルに、より多くの情報を書き込みます。</target>
        </trans-unit>
        <trans-unit id="11e03936270e768063b945e628f72f82cd7f2a6c" translate="yes" xml:space="preserve">
          <source>Write operations to a table replica of type &lt;code&gt;disc_copies&lt;/code&gt; write data to the disc copy and to the RAM copy of the table.</source>
          <target state="translated">タイプ &lt;code&gt;disc_copies&lt;/code&gt; のテーブルレプリカへの書き込み操作は、ディスクコピーとテーブルのRAMコピーにデータを書き込みます。</target>
        </trans-unit>
        <trans-unit id="90a9bd9c8eda795510566a785ca5d3278970b55c" translate="yes" xml:space="preserve">
          <source>Write permission: group</source>
          <target state="translated">書き込み許可:グループ</target>
        </trans-unit>
        <trans-unit id="6f993e4752f0f11bc37ea50a8c30a50e99af1c19" translate="yes" xml:space="preserve">
          <source>Write permission: other</source>
          <target state="translated">書き込み許可:その他</target>
        </trans-unit>
        <trans-unit id="c13751536b741cb4a163bff9e95b674a5a724e0c" translate="yes" xml:space="preserve">
          <source>Write permission: owner</source>
          <target state="translated">書き込み許可:所有者</target>
        </trans-unit>
        <trans-unit id="97f42019e59265a5d326a15e2fe411e7df077b47" translate="yes" xml:space="preserve">
          <source>Write selected entries from the history buffer to a configuration file:</source>
          <target state="translated">履歴バッファから選択したエントリを設定ファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="356fb521c1eac37bd33dda6838decdc47505164a" translate="yes" xml:space="preserve">
          <source>Write the agent community config to the agent community config file.</source>
          <target state="translated">エージェントコミュニティ設定ファイルにエージェントコミュニティ設定を書き込みます。</target>
        </trans-unit>
        <trans-unit id="c363c87dac1a162c5390a7204a0846f1b2cf949b" translate="yes" xml:space="preserve">
          <source>Write the agent config to the agent config file.</source>
          <target state="translated">エージェントコンフィグファイルにエージェントコンフィグを書き込みます。</target>
        </trans-unit>
        <trans-unit id="df74bec607c35c5148d3bf1e23e2f5e18ed0edfc" translate="yes" xml:space="preserve">
          <source>Write the agent context config to the agent context config file.</source>
          <target state="translated">エージェントコンテキストコンフィグファイルにエージェントコンテキストコンフィグを書き込みます。</target>
        </trans-unit>
        <trans-unit id="74a55f3f8ef78217a3178b9a4e102552a471649e" translate="yes" xml:space="preserve">
          <source>Write the agent notify config to the agent notify config file.</source>
          <target state="translated">エージェント通知設定ファイルにエージェント通知設定を書き込みます。</target>
        </trans-unit>
        <trans-unit id="0725c824356172ca0bd72db608c7d1790917ec18" translate="yes" xml:space="preserve">
          <source>Write the agent standard config to the agent standard config file.</source>
          <target state="translated">エージェント標準コンフィグファイルにエージェント標準コンフィグを書き込みます。</target>
        </trans-unit>
        <trans-unit id="742a51874a3a64b0aff03d59e1525f641c970329" translate="yes" xml:space="preserve">
          <source>Write the agent target_addr config to the agent target_addr config file.</source>
          <target state="translated">エージェントtarget_addr configをエージェントtarget_addr configファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="e16e02f52081c8e5cb2ffdda5dfdbef9c34f3271" translate="yes" xml:space="preserve">
          <source>Write the agent target_params config to the agent target_params config file.</source>
          <target state="translated">agent target_params config を agent target_params config ファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="6b556a988009e0705c0f0c8a2093ed99cbfe9d02" translate="yes" xml:space="preserve">
          <source>Write the agent usm config to the agent usm config file.</source>
          <target state="translated">エージェントusmコンフィグファイルにエージェントusmコンフィグを書き込みます。</target>
        </trans-unit>
        <trans-unit id="86cca1e1d7d421bc848733c75ac6bc17cc68210b" translate="yes" xml:space="preserve">
          <source>Write the agent vacm config to the agent vacm config file.</source>
          <target state="translated">エージェント vacm config ファイルにエージェント vacm config を書き込みます。</target>
        </trans-unit>
        <trans-unit id="d8d44a989b8e869e90d14a4dd1692d7e8900440f" translate="yes" xml:space="preserve">
          <source>Write the content of the history buffer to a configuration file:</source>
          <target state="translated">履歴バッファの内容を設定ファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="e8d2fcdbc95034e2cd8830dd4403075a42d13d6c" translate="yes" xml:space="preserve">
          <source>Write the instrumentation functions in Erlang and compile them.</source>
          <target state="translated">Erlangでインストルメンテーション関数を書いてコンパイルします。</target>
        </trans-unit>
        <trans-unit id="dca5e01b6979dba86ef5f6da9b7d0c7f8ad85ad4" translate="yes" xml:space="preserve">
          <source>Write the manager agents config to the manager agents config file.</source>
          <target state="translated">マネージャーエージェントconfigファイルにマネージャーエージェントconfigを書き込みます。</target>
        </trans-unit>
        <trans-unit id="858a87d5bc4ac108f9b0a840edd7c34fff07895a" translate="yes" xml:space="preserve">
          <source>Write the manager config to the manager config file.</source>
          <target state="translated">マネージャーコンフィグファイルにマネージャーコンフィグを書き込みます。</target>
        </trans-unit>
        <trans-unit id="d471c2eac196383c37d37d93c2ae694af53d1078" translate="yes" xml:space="preserve">
          <source>Write the manager users config to the manager users config file.</source>
          <target state="translated">マネージャーユーザー設定ファイルにマネージャーユーザー設定を書き込みます。</target>
        </trans-unit>
        <trans-unit id="ea7e6b78113f1851a77b719964eb267bbb6243f8" translate="yes" xml:space="preserve">
          <source>Write the manager usm config to the manager usm config file.</source>
          <target state="translated">Manager usm configファイルにmanager usm configを書き込みます。</target>
        </trans-unit>
        <trans-unit id="949c535de1f0852b852d57d6fe62226d17f73d93" translate="yes" xml:space="preserve">
          <source>Write your MIB in SMI in a text file.</source>
          <target state="translated">SMI内のMIBをテキストファイルに書き出します。</target>
        </trans-unit>
        <trans-unit id="e3c9ae7fc735225c30a703252970191d0ec1985c" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;Bytes&lt;/code&gt; to the file referenced by &lt;code&gt;IoDevice&lt;/code&gt;. This function is the only way to write to a file opened in &lt;code&gt;raw&lt;/code&gt; mode (although it works for normally opened files too). Returns &lt;code&gt;ok&lt;/code&gt; if successful, and &lt;code&gt;{error, Reason}&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; によって参照されるファイルに &lt;code&gt;Bytes&lt;/code&gt; を書き込みます。この関数は、 &lt;code&gt;raw&lt;/code&gt; モードで開かれたファイルに書き込む唯一の方法です（ただし、通常開かれているファイルでも機能します）。成功した場合は &lt;code&gt;ok&lt;/code&gt; 、それ以外の場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="49d88d8ee4a01a2691097be38fe3b136e062c1b3" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;Data&lt;/code&gt; to &lt;code&gt;Socket&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; を &lt;code&gt;Socket&lt;/code&gt; 書き込みます。</target>
        </trans-unit>
        <trans-unit id="9ac02f39da90daccfaf1d97cf1fdbbf050d4299b" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;data&lt;/code&gt; to the file referenced by &lt;code&gt;Handle&lt;/code&gt;. The file is to be opened with &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;append&lt;/code&gt; flag. Returns &lt;code&gt;ok&lt;/code&gt; if successful or &lt;code&gt;{error, reason()}&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;Handle&lt;/code&gt; が参照するファイルに &lt;code&gt;data&lt;/code&gt; を書き込みます。ファイルは、 &lt;code&gt;write&lt;/code&gt; フラグまたは &lt;code&gt;append&lt;/code&gt; フラグで開かれます。成功した場合は &lt;code&gt;ok&lt;/code&gt; 、それ以外の場合は &lt;code&gt;{error, reason()}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="fa2497f3c952063e780c16a948eff5c082d3decc" translate="yes" xml:space="preserve">
          <source>Writes a (virtual) file &lt;code&gt;RemoteFilename&lt;/code&gt; to a TFTP server.</source>
          <target state="translated">（仮想）ファイル &lt;code&gt;RemoteFilename&lt;/code&gt; をTFTPサーバーに書き込みます。</target>
        </trans-unit>
        <trans-unit id="9240f35a3488e9301929c2cbe6d85a949584439a" translate="yes" xml:space="preserve">
          <source>Writes a &lt;code&gt;NULL&lt;/code&gt;-terminated string in the buffer pointed to by &lt;code&gt;buf&lt;/code&gt; of size &lt;code&gt;size&lt;/code&gt;, consisting of the string representation of the atom &lt;code&gt;term&lt;/code&gt; with encoding &lt;code&gt;&lt;a href=&quot;#ErlNifCharEncoding&quot;&gt;encode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サイズが &lt;code&gt;size&lt;/code&gt; の &lt;code&gt;buf&lt;/code&gt; が指すバッファーに &lt;code&gt;NULL&lt;/code&gt; で終了する文字列を書き込みます。これは、エンコード &lt;code&gt;&lt;a href=&quot;#ErlNifCharEncoding&quot;&gt;encode&lt;/a&gt;&lt;/code&gt; たアトム &lt;code&gt;term&lt;/code&gt; 文字列表現で構成されます。</target>
        </trans-unit>
        <trans-unit id="3634d9ab79165b10596b1586f67a583a9ea04a01" translate="yes" xml:space="preserve">
          <source>Writes a &lt;code&gt;NULL&lt;/code&gt;-terminated string in the buffer pointed to by &lt;code&gt;buf&lt;/code&gt; with size &lt;code&gt;size&lt;/code&gt;, consisting of the characters in the string &lt;code&gt;list&lt;/code&gt;. The characters are written using encoding &lt;code&gt;&lt;a href=&quot;#ErlNifCharEncoding&quot;&gt;encode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;list&lt;/code&gt; 文字で構成される、サイズ &lt;code&gt;size&lt;/code&gt; の &lt;code&gt;buf&lt;/code&gt; が指すバッファーに &lt;code&gt;NULL&lt;/code&gt; で終わる文字列を書き込みます。文字はエンコーディング &lt;code&gt;&lt;a href=&quot;#ErlNifCharEncoding&quot;&gt;encode&lt;/a&gt;&lt;/code&gt; を使用して書き込まれます。</target>
        </trans-unit>
        <trans-unit id="96006cf7f8155945d7ec8fbd7f526f8684308b8a" translate="yes" xml:space="preserve">
          <source>Writes a chunk to the file.</source>
          <target state="translated">チャンクをファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="59d718f29132f1e0414bdcdb53791e5964851ad6" translate="yes" xml:space="preserve">
          <source>Writes a file to the server. The file is created if it does not exist but overwritten if it exists.</source>
          <target state="translated">ファイルをサーバーに書き込みます。ファイルが存在しない場合は作成され、存在する場合は上書きされます。</target>
        </trans-unit>
        <trans-unit id="8c67e29dd233b9da8b96f21dc789a53fb7c155b7" translate="yes" xml:space="preserve">
          <source>Writes a new line.</source>
          <target state="translated">改行します。</target>
        </trans-unit>
        <trans-unit id="c5e76f620bf08e8f341dbb1e7466ba8f8dff5e76" translate="yes" xml:space="preserve">
          <source>Writes an integer in base 2-36, the default base is 10. A leading dash is printed for negative integers.</source>
          <target state="translated">ベース 2-36 の整数を書き込みます。負の整数の場合は先頭のダッシュが表示されます。</target>
        </trans-unit>
        <trans-unit id="87c609439c3f1dd66d3875232c9deb5b66fbce4e" translate="yes" xml:space="preserve">
          <source>Writes data in the same way as &lt;code&gt;~p&lt;/code&gt;, but takes an extra argument that is the maximum depth to which terms are printed. Anything below this depth is replaced with &lt;code&gt;...&lt;/code&gt;, for example:</source>
          <target state="translated">同じ方法でデータを書き込みます &lt;code&gt;~p&lt;/code&gt; が、用語が印刷された最大の深さである追加の引数を取ります。この深さより下のものはすべて &lt;code&gt;...&lt;/code&gt; に置き換えられます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="ccd6b3e6918423f892a6ad7d9a5360f6780119df" translate="yes" xml:space="preserve">
          <source>Writes data in the same way as &lt;code&gt;~w&lt;/code&gt;, but takes an extra argument that is the maximum depth to which terms are printed. Anything below this depth is replaced with &lt;code&gt;...&lt;/code&gt;. For example, using &lt;code&gt;T&lt;/code&gt; above:</source>
          <target state="translated">同じようにデータを書き込み &lt;code&gt;~w&lt;/code&gt; 、しかし、用語が印刷された最大の深さで、余分な引数を取ります。この深さより下のものはすべて &lt;code&gt;...&lt;/code&gt; に置き換えられます。たとえば、上記の &lt;code&gt;T&lt;/code&gt; を使用すると：</target>
        </trans-unit>
        <trans-unit id="2d64d5867a243be9061399b7123c3937a95092e4" translate="yes" xml:space="preserve">
          <source>Writes data with the standard syntax. This is used to output Erlang terms. Atoms are printed within quotes if they contain embedded non-printable characters. Atom characters &amp;gt; 255 are escaped unless the Unicode translation modifier (&lt;code&gt;t&lt;/code&gt;) is used. Floats are printed accurately as the shortest, correctly rounded string.</source>
          <target state="translated">標準構文でデータを書き込みます。これは、Erlang用語を出力するために使用されます。アトムは、印刷できない文字が埋め込まれている場合、引用符で囲まれて印刷されます。Unicode変換修飾子（ &lt;code&gt;t&lt;/code&gt; ）を使用しない限り、255を超えるアトム文字はエスケープされます。フロートは、最短の正しく丸められた文字列として正確に印刷されます。</target>
        </trans-unit>
        <trans-unit id="0ae0f9f7fb8da22844c48c2c1e0c8cca4432f865" translate="yes" xml:space="preserve">
          <source>Writes file information from a &lt;code&gt;file_info&lt;/code&gt; record to the file specified by &lt;code&gt;Name&lt;/code&gt;. See &lt;code&gt;file:write_file_info/[2,3]&lt;/code&gt; for information about the record.</source>
          <target state="translated">ファイル情報を &lt;code&gt;file_info&lt;/code&gt; レコードから &lt;code&gt;Name&lt;/code&gt; で指定されたファイルに書き込みます。レコードの詳細については、 &lt;code&gt;file:write_file_info/[2,3]&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5f911be02665842be0086f1f403e5bbcb8cc3684" translate="yes" xml:space="preserve">
          <source>Writes generated rules to &lt;code&gt;Output&lt;/code&gt; instead of the default &lt;code&gt;&amp;lt;File&amp;gt;.Pbeam&lt;/code&gt;. &lt;code&gt;Output&lt;/code&gt; can be a filename or an &lt;code&gt;io_device()&lt;/code&gt;. To write to stdout, use &lt;code&gt;standard_io&lt;/code&gt;. However, if &lt;code&gt;binary&lt;/code&gt; is set, nothing is written to &lt;code&gt;Output&lt;/code&gt; and the result is returned to the caller with &lt;code&gt;{ok, ModuleName, Binary}&lt;/code&gt;.</source>
          <target state="translated">デフォルトの &lt;code&gt;&amp;lt;File&amp;gt;.Pbeam&lt;/code&gt; ではなく、生成されたルールを &lt;code&gt;Output&lt;/code&gt; に書き込みます。 &lt;code&gt;Output&lt;/code&gt; は、ファイル名または &lt;code&gt;io_device()&lt;/code&gt; です。stdoutに書き込むには、 &lt;code&gt;standard_io&lt;/code&gt; を使用します。ただし、 &lt;code&gt;binary&lt;/code&gt; が設定されている場合、 &lt;code&gt;Output&lt;/code&gt; には何も書き込まれず、結果は &lt;code&gt;{ok, ModuleName, Binary}&lt;/code&gt; 呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="4dacf7c76ad7993807bea9feae5720cfd11d3c39" translate="yes" xml:space="preserve">
          <source>Writes information about the Erlang runtime system into the &lt;code&gt;&lt;a href=&quot;#ErlDrvSysInfo&quot;&gt;ErlDrvSysInfo&lt;/a&gt;&lt;/code&gt; structure referred to by the first argument. The second argument is to be the size of the &lt;code&gt;&lt;a href=&quot;#ErlDrvSysInfo&quot;&gt;ErlDrvSysInfo&lt;/a&gt;&lt;/code&gt; structure, that is, &lt;code&gt;sizeof(ErlDrvSysInfo)&lt;/code&gt;.</source>
          <target state="translated">Erlangランタイムシステムに関する情報を、最初の引数で参照される &lt;code&gt;&lt;a href=&quot;#ErlDrvSysInfo&quot;&gt;ErlDrvSysInfo&lt;/a&gt;&lt;/code&gt; 構造に書き込みます。2番目の引数は、 &lt;code&gt;&lt;a href=&quot;#ErlDrvSysInfo&quot;&gt;ErlDrvSysInfo&lt;/a&gt;&lt;/code&gt; 構造体のサイズ、つまり &lt;code&gt;sizeof(ErlDrvSysInfo)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bc88daf5cb215faec7f56594456357a2fd81a3fa" translate="yes" xml:space="preserve">
          <source>Writes information about the local process &lt;code&gt;Pid&lt;/code&gt; on standard error. The only allowed value for the atom &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;backtrace&lt;/code&gt;, which shows the contents of the call stack, including information about the call chain, with the current function printed first. The format of the output is not further defined.</source>
          <target state="translated">ローカルプロセス &lt;code&gt;Pid&lt;/code&gt; に関する情報を標準エラーに書き込みます。アトム &lt;code&gt;Type&lt;/code&gt; に許可される唯一の値は &lt;code&gt;backtrace&lt;/code&gt; です。これは、現在の関数が最初に出力される、コールチェーンに関する情報を含むコールスタックの内容を示します。出力のフォーマットはこれ以上定義されていません。</target>
        </trans-unit>
        <trans-unit id="250e32eed820901a002622eee79cae6f62358060" translate="yes" xml:space="preserve">
          <source>Writes miscellaneous system information to file. This information will typically be requested by the Erlang/OTP team at Ericsson AB when reporting an issue.</source>
          <target state="translated">システムの雑多な情報をファイルに書き込みます。この情報は通常、Ericsson ABのErlang/OTPチームが問題を報告する際に要求されます。</target>
        </trans-unit>
        <trans-unit id="9805b948ee39d3a1dcc417c333486fca32502f6d" translate="yes" xml:space="preserve">
          <source>Writes new line to the standard output (&lt;code&gt;IoDevice&lt;/code&gt;).</source>
          <target state="translated">新しい行を標準出力（ &lt;code&gt;IoDevice&lt;/code&gt; ）に書き込みます。</target>
        </trans-unit>
        <trans-unit id="dc0bcaf3a0eda5fffbae12642198bdd930d2ab4e" translate="yes" xml:space="preserve">
          <source>Writes record &lt;code&gt;Record&lt;/code&gt; to table &lt;code&gt;Tab&lt;/code&gt;.</source>
          <target state="translated">レコード &lt;code&gt;Record&lt;/code&gt; をテーブル &lt;code&gt;Tab&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="4323e451b949ee736a0f4b2b70c7768dcd1414d6" translate="yes" xml:space="preserve">
          <source>Writes term &lt;code&gt;DataToWrite&lt;/code&gt; using &lt;code&gt;UserPrivate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UserPrivate&lt;/code&gt; を使用して、 &lt;code&gt;DataToWrite&lt;/code&gt; という用語を書き込みます。</target>
        </trans-unit>
        <trans-unit id="1bca0ebfd4032923999bda67fa6a5d739027c0fc" translate="yes" xml:space="preserve">
          <source>Writes term &lt;code&gt;Term&lt;/code&gt; to the standard output (&lt;code&gt;IoDevice&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Term&lt;/code&gt; という用語を標準出力（ &lt;code&gt;IoDevice&lt;/code&gt; ）に書き込みます。</target>
        </trans-unit>
        <trans-unit id="7f4196f8290e1326de51378f3eeba9701f94dc38" translate="yes" xml:space="preserve">
          <source>Writes the characters of &lt;code&gt;CharData&lt;/code&gt; to the I/O server (&lt;code&gt;IoDevice&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;CharData&lt;/code&gt; の文字をI / Oサーバー（ &lt;code&gt;IoDevice&lt;/code&gt; ）に書き込みます。</target>
        </trans-unit>
        <trans-unit id="0e09719348776a162994ba30580c7a6f9428ce70" translate="yes" xml:space="preserve">
          <source>Writes the contents of the &lt;code&gt;iodata&lt;/code&gt; term &lt;code&gt;Bytes&lt;/code&gt; to file &lt;code&gt;Filename&lt;/code&gt;. The file is created if it does not exist. If it exists, the previous contents are overwritten. Returns &lt;code&gt;ok&lt;/code&gt; if successful, otherwise &lt;code&gt;{error, Reason}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iodata&lt;/code&gt; 用語 &lt;code&gt;Bytes&lt;/code&gt; の内容をファイル &lt;code&gt;Filename&lt;/code&gt; に書き込みます。ファイルが存在しない場合は作成されます。存在する場合は、以前の内容が上書きされます。成功した場合は &lt;code&gt;ok&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="11190aacf8c69f8fb520076a2dcf5b01800eb809" translate="yes" xml:space="preserve">
          <source>Writes the data with standard syntax in the same way as &lt;code&gt;~w&lt;/code&gt;, but breaks terms whose printed representation is longer than one line into many lines and indents each line sensibly. Left-justification is not supported. It also tries to detect flat lists of printable characters and output these as strings. For example:</source>
          <target state="translated">同じように、標準的な構文を使用してデータを書き込み &lt;code&gt;~w&lt;/code&gt; 、しかしその印字表現休憩の用語は、各ライン賢明多くの行やインデントへのより長い1行です。左揃えはサポートされていません。また、印刷可能な文字のフラットリストを検出し、文字列として出力しようとします。例えば：</target>
        </trans-unit>
        <trans-unit id="edd67c05e7abf8a55e7a45df50941009e549a0e1" translate="yes" xml:space="preserve">
          <source>Writes the items in &lt;code&gt;Data&lt;/code&gt; (&lt;code&gt;[]&lt;/code&gt;) on the standard output (&lt;code&gt;IoDevice&lt;/code&gt;) in accordance with &lt;code&gt;Format&lt;/code&gt;. &lt;code&gt;Format&lt;/code&gt; contains plain characters that are copied to the output device, and control sequences for formatting, see below. If &lt;code&gt;Format&lt;/code&gt; is an atom or a binary, it is first converted to a list with the aid of &lt;code&gt;atom_to_list/1&lt;/code&gt; or &lt;code&gt;binary_to_list/1&lt;/code&gt;. Example:</source>
          <target state="translated">&lt;code&gt;Format&lt;/code&gt; に従って、 &lt;code&gt;Data&lt;/code&gt; （ &lt;code&gt;[]&lt;/code&gt; ）の項目を標準出力（ &lt;code&gt;IoDevice&lt;/code&gt; ）に書き込みます。 &lt;code&gt;Format&lt;/code&gt; は、出力デバイスにコピーされるプレーン文字、およびフォーマットの制御シーケンスが含まれます。以下を参照してください。場合は &lt;code&gt;Format&lt;/code&gt; 原子またはバイナリである、それは最初の助けを借りてリストに変換され &lt;code&gt;atom_to_list/1&lt;/code&gt; または &lt;code&gt;binary_to_list/1&lt;/code&gt; 。例：</target>
        </trans-unit>
        <trans-unit id="bd82ff973a69c0238fad9984d419046978981ebd" translate="yes" xml:space="preserve">
          <source>Writes to an open file, without waiting for the result. If the handle is valid, the function returns &lt;code&gt;{async, N}&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is a term guaranteed to be unique between calls of &lt;code&gt;awrite&lt;/code&gt;. The result of the &lt;code&gt;write&lt;/code&gt; operation is sent as a message to the calling process. This message has the form &lt;code&gt;{async_reply, N, Result}&lt;/code&gt;, where &lt;code&gt;Result&lt;/code&gt; is the result from the write, either &lt;code&gt;ok&lt;/code&gt;, or &lt;code&gt;{error, reason()}&lt;/code&gt;.</source>
          <target state="translated">結果を待たずに、開いているファイルに書き込みます。ハンドルが有効であれば、関数戻り &lt;code&gt;{async, N}&lt;/code&gt; 、ここで、 &lt;code&gt;N&lt;/code&gt; は、の呼び出しの間で一意であることが保証される用語である &lt;code&gt;awrite&lt;/code&gt; 。 &lt;code&gt;write&lt;/code&gt; 操作の結果は、メッセージとして呼び出しプロセスに送信されます。このメッセージは、フォーム有する &lt;code&gt;{async_reply, N, Result}&lt;/code&gt; 、 &lt;code&gt;Result&lt;/code&gt; いずれか、書き込みの結果であるが &lt;code&gt;ok&lt;/code&gt; 、または &lt;code&gt;{error, reason()}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95560093414725c51ed8e81fdb4501026a286814" translate="yes" xml:space="preserve">
          <source>Writing an Erlang driver is not easy. The driver is written as some callback functions called by the Erlang emulator when data is sent to the driver, or the driver has any data available on a file descriptor. As the driver callback routines execute in the main thread of the Erlang machine, the callback functions can perform no blocking activity whatsoever. The callbacks are only to set up file descriptors for waiting and/or read/write available data. All I/O must be non-blocking. Driver callbacks are however executed in sequence, why a global state can safely be updated within the routines.</source>
          <target state="translated">Erlangドライバを書くのは簡単ではありません。ドライバはデータがドライバに送られたり、ドライバがファイルディスクリプタにデータがあるときにErlangエミュレータから呼び出されるコールバック関数として書かれています。ドライバのコールバックルーチンはErlangマシンのメインスレッドで実行されるので、コールバック関数は何のブロッキングもできません。コールバックはファイルディスクリプタをセットアップして待ったり、利用可能なデータを読み書きしたりするだけです。すべてのI/Oはノンブロッキングでなければなりません。ドライバのコールバックは順番に実行されるので、グローバルな状態をルーチン内で安全に更新することができます。</target>
        </trans-unit>
        <trans-unit id="98612a0f6652d2811b89aef0049934abe9f222dd" translate="yes" xml:space="preserve">
          <source>Writing or deleting in transaction context creates a local copy of each modified record. Thus, modifying each record in a large table uses much memory. &lt;code&gt;Mnesia&lt;/code&gt; compensates for every written or deleted record during the iteration in a transaction context, which can reduce the performance. If possible, avoid writing or deleting records in the same transaction before iterating over the table.</source>
          <target state="translated">トランザクションコンテキストで書き込みまたは削除を行うと、変更された各レコードのローカルコピーが作成されます。したがって、大きなテーブルの各レコードを変更すると、多くのメモリが使用されます。 &lt;code&gt;Mnesia&lt;/code&gt; は、トランザクションコンテキストでのイテレーション中に書き込まれた、または削除されたすべてのレコードを補正します。可能であれば、テーブルを反復処理する前に、同じトランザクションでレコードを書き込んだり削除したりしないでください。</target>
        </trans-unit>
        <trans-unit id="2158219f2b23b9c1414ff2f997bddb708f004bc7" translate="yes" xml:space="preserve">
          <source>Writing or deleting in transaction-context creates a local copy of each modified record during the transaction. During iteration, that is, &lt;code&gt;mnesia:fold[lr]/4&lt;/code&gt;, &lt;code&gt;mnesia:next/2&lt;/code&gt;, &lt;code&gt;mnesia:prev/2&lt;/code&gt;, and &lt;code&gt;mnesia:snmp_get_next_index/2&lt;/code&gt;, Mnesia compensates for every written or deleted record, which can reduce the performance.</source>
          <target state="translated">トランザクションコンテキストで書き込みまたは削除を行うと、トランザクション中に変更された各レコードのローカルコピーが作成されます。反復中、つまり &lt;code&gt;mnesia:fold[lr]/4&lt;/code&gt; 、 &lt;code&gt;mnesia:next/2&lt;/code&gt; 、 &lt;code&gt;mnesia:prev/2&lt;/code&gt; 、および &lt;code&gt;mnesia:snmp_get_next_index/2&lt;/code&gt; の場合、Mnesiaは書き込みまたは削除されたすべてのレコードを補正するため、パフォーマンスが低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="68c916ed041ac56f7b5fe8fba00f4d3d9ae0c2d5" translate="yes" xml:space="preserve">
          <source>X Windows -- Development headers and libraries are needed to build the Erlang/OTP application &lt;code&gt;gs&lt;/code&gt; on Unix/Linux.</source>
          <target state="translated">X Windows- Unix / LinuxでErlang / OTPアプリケーション &lt;code&gt;gs&lt;/code&gt; をビルドするには、開発ヘッダーとライブラリが必要です。</target>
        </trans-unit>
        <trans-unit id="d8b1dc96e1bc7b76c3d0a668d65241f9122d97e6" translate="yes" xml:space="preserve">
          <source>XLineOp ::= &lt;code&gt;XXL&lt;/code&gt;</source>
          <target state="translated">XLineOp :: = &lt;code&gt;XXL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebaf703afcca9ac7d80cec79f8e4c38185d744c2" translate="yes" xml:space="preserve">
          <source>XML Base directory. If using string/1 default is current directory. If using file/1 default is directory of given file.</source>
          <target state="translated">XMLベースのディレクトリ。文字列/1を使用している場合、デフォルトはカレントディレクトリになります。file/1を使用している場合は、デフォルトは指定されたファイルのディレクトリになります。</target>
        </trans-unit>
        <trans-unit id="d4942b7a0ca58ce9a60651831280a6a1a686d64d" translate="yes" xml:space="preserve">
          <source>XML SAX parser API</source>
          <target state="translated">XML SAX パーサ API</target>
        </trans-unit>
        <trans-unit id="76a2ea89ec47012fd2585a7f145edb56f2e38495" translate="yes" xml:space="preserve">
          <source>XSD Base directory.</source>
          <target state="translated">XSDのベースディレクトリ。</target>
        </trans-unit>
        <trans-unit id="cd5914d573e50149e231d0679f3994ef5c65dc1a" translate="yes" xml:space="preserve">
          <source>XSLT stylesheets are often used when transforming XML documents, to other XML documents or (X)HTML for presentation. XSLT contains quite many functions and learning them all may take some effort. This document assumes a basic level of understanding of XSLT.</source>
          <target state="translated">XSLTスタイルシートは、XML文書を他のXML文書や(X)HTMLに変換してプレゼンテーションを行う際によく使用されます。XSLT は非常に多くの機能を含んでおり、それらをすべて学習するには多少の努力が必要かもしれません。この文書は、XSLT の基本的なレベルの理解を前提としています。</target>
        </trans-unit>
        <trans-unit id="91baafa2e6d790f0fd1e6b4c5d5dc90e636fd65f" translate="yes" xml:space="preserve">
          <source>Xan matches characters that have either the L (letter) or the N (number) property. Xps matches the characters tab, linefeed, vertical tab, form feed, or carriage return, and any other character that has the Z (separator) property. Xsp is the same as Xps; it used to exclude vertical tab, for Perl compatibility, but Perl changed, and so PCRE followed at release 8.34. Xwd matches the same characters as Xan, plus underscore.</source>
          <target state="translated">Xan は、L (文字)または N (数値)プロパティを持つ文字にマッチします。Xps は、タブ、改行、縦タブ、フォームフィード、キャリッジリターン、および Z (セパレータ)プロパティを持つその他の文字にマッチします。Xsp は Xps と同じです。以前は Perl との互換性のために vertical tab を除外していましたが、Perl が変更されたため、リリース 8.34 で PCRE がそれに追随しました。Xwd は Xan と同じ文字にアンダースコアを加えたものです。</target>
        </trans-unit>
        <trans-unit id="03cef8b5cbbd5ddf91318d63826f1481c80cbbe0" translate="yes" xml:space="preserve">
          <source>Xcode -- Download and install via the Mac App Store. Read about &lt;code&gt;&lt;a href=&quot;#Advanced-configuration-and-build-of-ErlangOTP_Building_OS-X-Darwin&quot;&gt;Building on a Mac&lt;/a&gt;&lt;/code&gt; before proceeding.</source>
          <target state="translated">Xcode-Mac App Storeからダウンロードしてインストールします。続行 &lt;code&gt;&lt;a href=&quot;#Advanced-configuration-and-build-of-ErlangOTP_Building_OS-X-Darwin&quot;&gt;Building on a Mac&lt;/a&gt;&lt;/code&gt; 前に、Macでのビルドについてお読みください。</target>
        </trans-unit>
        <trans-unit id="8a29eadc00876c3f9f89861cd30ff0f184e72723" translate="yes" xml:space="preserve">
          <source>Xoroshiro116+, 58 bits precision and period of 2^116-1</source>
          <target state="translated">Xoroshiro116+、2^116-1の58ビットの精度と周期</target>
        </trans-unit>
        <trans-unit id="90f37ece5b491baad7255059492161cafaeb7b80" translate="yes" xml:space="preserve">
          <source>Xorshift1024*, 64 bits precision and a period of 2^1024-1</source>
          <target state="translated">Xorshift1024*、64ビットの精度と2^1024-1の周期</target>
        </trans-unit>
        <trans-unit id="bdfa54ab076a7f65b355fcd3585f50eac93fa010" translate="yes" xml:space="preserve">
          <source>Xorshift116+, 58 bits precision and period of 2^116-1</source>
          <target state="translated">Xorshift116+、58ビットの精度と2^116-1の周期</target>
        </trans-unit>
        <trans-unit id="2ca96fe21b48b46326339731f1910ba4c39289d2" translate="yes" xml:space="preserve">
          <source>Xref is a cross reference tool that can be used for finding dependencies between functions, modules, applications and releases.</source>
          <target state="translated">Xrefは、関数、モジュール、アプリケーション、リリース間の依存関係を見つけるために使用できるクロスリファレンスツールです。</target>
        </trans-unit>
        <trans-unit id="bf5db07cbf5de7a48698edf64bb54bb7181dae3a" translate="yes" xml:space="preserve">
          <source>Xref is a cross reference tool that can be used for finding dependencies between functions, modules, applications and releases. It does so by analyzing the defined functions and the function calls.</source>
          <target state="translated">Xrefは、関数、モジュール、アプリケーション、リリース間の依存関係を見つけるために使用できるクロスリファレンスツールです。これは、定義されている関数と関数呼び出しを分析することで行います。</target>
        </trans-unit>
        <trans-unit id="0f82f4c6fd6d2e271c18dc16920529f19f31513c" translate="yes" xml:space="preserve">
          <source>Y is divisible by 4, but not by 100.</source>
          <target state="translated">Yは4で割り切れるが、100では割り切れない。</target>
        </trans-unit>
        <trans-unit id="ed7e88a0e39e56909a7112967eb11b815a801630" translate="yes" xml:space="preserve">
          <source>Y is divisible by 400.</source>
          <target state="translated">Yは400で割り切れる。</target>
        </trans-unit>
        <trans-unit id="dc754adcb9e0fb9bdb59e4affd3affee795f3be1" translate="yes" xml:space="preserve">
          <source>Year cannot be abbreviated. For example, 93 denotes year 93, not 1993. The valid range depends on the underlying operating system. The date tuple must denote a valid date.</source>
          <target state="translated">年は省略できません。例えば、93は1993年ではなく93年を表します。有効な範囲は、使用しているオペレーティングシステムに依存します。日付タプルは有効な日付を表す必要があります。</target>
        </trans-unit>
        <trans-unit id="1a2942b3d437716ba7dc18750c7ae62ec76eaafa" translate="yes" xml:space="preserve">
          <source>Yecc source code. It generates an &lt;code&gt;.erl&lt;/code&gt; file.</source>
          <target state="translated">Yeccソースコード。 &lt;code&gt;.erl&lt;/code&gt; ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="5f411c3c587484a1d48aefa7d4b4fd59514ba6b7" translate="yes" xml:space="preserve">
          <source>Yecc will add the extension &lt;code&gt;.yrl&lt;/code&gt; to the &lt;code&gt;Grammarfile&lt;/code&gt; name, the extension &lt;code&gt;.hrl&lt;/code&gt; to the &lt;code&gt;Includefile&lt;/code&gt; name, and the extension &lt;code&gt;.erl&lt;/code&gt; to the &lt;code&gt;Parserfile&lt;/code&gt; name, unless the extension is already there.</source>
          <target state="translated">Yeccは、拡張を追加します &lt;code&gt;.yrl&lt;/code&gt; をする &lt;code&gt;Grammarfile&lt;/code&gt; の名前、拡張子 &lt;code&gt;.hrl&lt;/code&gt; に &lt;code&gt;Includefile&lt;/code&gt; の名前、および拡張子 &lt;code&gt;.erl&lt;/code&gt; に &lt;code&gt;Parserfile&lt;/code&gt; の拡張子がすでに存在していない限り、名前。</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="d71ce5e0c5df7542006b59dc9b3838226fe8ef23" translate="yes" xml:space="preserve">
          <source>Yes, it will. The compiler will remove the building of the sub binary in the second clause:</source>
          <target state="translated">はい、そうです。コンパイラは第二節のサブバイナリのビルドを削除します。</target>
        </trans-unit>
        <trans-unit id="db0743dfbc21679c5d5f6843a71f19fba1d8be6c" translate="yes" xml:space="preserve">
          <source>Yet another possibility, closer to the hardware, could be:</source>
          <target state="translated">ハードウェアに近い別の可能性もあります。</target>
        </trans-unit>
        <trans-unit id="c2bf8cb1a13b6661ace7ce9f9719055b32f2e726" translate="yes" xml:space="preserve">
          <source>Yi</source>
          <target state="translated">Yi</target>
        </trans-unit>
        <trans-unit id="aa9f168c3a59a63ca6dd4dca9f3f7875cef10b5b" translate="yes" xml:space="preserve">
          <source>Yields &lt;code&gt;false&lt;/code&gt; if the node has no associated comments, and &lt;code&gt;true&lt;/code&gt; otherwise.</source>
          <target state="translated">収量 &lt;code&gt;false&lt;/code&gt; ノードがありませんコメントを関連付けられている、としている場合は &lt;code&gt;true&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="fa41faedce6ff2c37f6aa8305079a3e9471a91f5" translate="yes" xml:space="preserve">
          <source>Yields a document representing a fixed, unbreakable sequence of characters. The string should contain only &lt;strong&gt;printable&lt;/strong&gt; characters (tabs allowed but not recommended), and &lt;strong&gt;not&lt;/strong&gt; newline, line feed, vertical tab, etc. A tab character (&lt;code&gt;\t&lt;/code&gt;) is interpreted as padding of 1-8 space characters to the next column of 8 characters &lt;strong&gt;within the string&lt;/strong&gt;.</source>
          <target state="translated">固定された壊れない文字のシーケンスを表すドキュメントを生成します。文字列には、&lt;strong&gt;印刷可能な&lt;/strong&gt;文字のみを含める必要があります（タブは許可されますが推奨されません）。改行、改行、垂直タブなど&lt;strong&gt;は&lt;/strong&gt;含め&lt;strong&gt;ない&lt;/strong&gt;でください。タブ文字（ &lt;code&gt;\t&lt;/code&gt; ）は、8の次の列への1〜8個のスペース文字のパディングとして解釈されます。文字&lt;strong&gt;列内の文字&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6342bb3b872c93baac7b84d88b17cec249d4f899" translate="yes" xml:space="preserve">
          <source>Yields a document representing paragraph-formatted plain text. The optional &lt;code&gt;Indentation&lt;/code&gt; parameter specifies the extra indentation of the first line of the paragraph. For example, &lt;code&gt;text_par(&quot;Lorem ipsum dolor sit amet&quot;, N)&lt;/code&gt; could represent</source>
          <target state="translated">段落形式のプレーンテキストを表すドキュメントを生成します。オプションの &lt;code&gt;Indentation&lt;/code&gt; パラメーターは、段落の最初の行の追加のインデントを指定します。たとえば、 &lt;code&gt;text_par(&quot;Lorem ipsum dolor sit amet&quot;, N)&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="9c8539219eb3fd77fc26dc9662796e268067a2b3" translate="yes" xml:space="preserve">
          <source>Yields the empty document, which has neither height nor width. (&lt;code&gt;empty&lt;/code&gt; is thus different from an empty &lt;code&gt;&lt;a href=&quot;#text-1&quot;&gt;text&lt;/a&gt;&lt;/code&gt; string, which has zero width but height 1.)</source>
          <target state="translated">高さも幅もない空のドキュメントを生成します。（したがって、 &lt;code&gt;empty&lt;/code&gt; は、幅がゼロで高さが1の空の &lt;code&gt;&lt;a href=&quot;#text-1&quot;&gt;text&lt;/a&gt;&lt;/code&gt; 文字列とは異なります。）</target>
        </trans-unit>
        <trans-unit id="f0ae54f0f8d8777ee1ccd332c51571592e4ee4d9" translate="yes" xml:space="preserve">
          <source>Yields the most compact form for an abstract list skeleton. The result either represents &quot;&lt;code&gt;[E1, ..., En | Tail]&lt;/code&gt;&quot;, where &lt;code&gt;Tail&lt;/code&gt; is not a list skeleton, or otherwise simply &quot;&lt;code&gt;[E1, ..., En]&lt;/code&gt;&quot;. Annotations on subtrees of &lt;code&gt;Node&lt;/code&gt; that represent list skeletons may be lost, but comments will be propagated to the result. Returns &lt;code&gt;Node&lt;/code&gt; itself if &lt;code&gt;Node&lt;/code&gt; does not represent a list skeleton.</source>
          <target state="translated">抽象リストのスケルトンとして最もコンパクトなフォームを生成します。結果は、 &quot; &lt;code&gt;[E1, ..., En | Tail]&lt;/code&gt; &quot;（ &lt;code&gt;Tail&lt;/code&gt; はリストスケルトンではない）、または単に &quot; &lt;code&gt;[E1, ..., En]&lt;/code&gt; &quot;を表します。リストのスケルトンを表す &lt;code&gt;Node&lt;/code&gt; サブツリーの注釈は失われる可能性がありますが、コメントは結果に反映されます。 &lt;code&gt;Node&lt;/code&gt; がリストのスケルトンを表していない場合は、 &lt;code&gt;Node&lt;/code&gt; 自体を返します。</target>
        </trans-unit>
        <trans-unit id="3aae39c5f243994db952309b19946cb1797fc221" translate="yes" xml:space="preserve">
          <source>You also need a gcc. If you installed the 64 bit MSYS2 you run:</source>
          <target state="translated">また、gccも必要です。あなたが実行する64ビットMSYS2をインストールした場合。</target>
        </trans-unit>
        <trans-unit id="8c04a1eb0d947a600ddd92a5988643cdbc486eb8" translate="yes" xml:space="preserve">
          <source>You are free to modify the contents of an object retrieved this way. However, when you do so, the registry is not aware of your changes, possibly causing it to be missed the next time you make an &lt;code&gt;Mnesia&lt;/code&gt; backup of the registry contents. This can be avoided if you mark the object as dirty after any such changes with &lt;code&gt;&lt;a href=&quot;registry#ei_reg_markdirty&quot;&gt;registry:ei_reg_markdirty&lt;/a&gt;&lt;/code&gt;, or pass appropriate flags to &lt;code&gt;&lt;a href=&quot;registry#ei_reg_dump&quot;&gt;registry:ei_reg_dump&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この方法で取得したオブジェクトの内容は自由に変更できます。ただし、その場合、レジストリは変更を認識しないため、次にレジストリの内容の &lt;code&gt;Mnesia&lt;/code&gt; バックアップを作成するときに、変更が失われる可能性があります。このような変更の後に、オブジェクトを &lt;code&gt;&lt;a href=&quot;registry#ei_reg_markdirty&quot;&gt;registry:ei_reg_markdirty&lt;/a&gt;&lt;/code&gt; でダーティとしてマークするか、適切なフラグを &lt;code&gt;&lt;a href=&quot;registry#ei_reg_dump&quot;&gt;registry:ei_reg_dump&lt;/a&gt;&lt;/code&gt; に渡すと、これを回避できます。</target>
        </trans-unit>
        <trans-unit id="9038edf94d4f5a46f306613699436e553a464d65" translate="yes" xml:space="preserve">
          <source>You are not allowed to allocate the &lt;code&gt;&lt;a href=&quot;#ErlDrvThreadOpts&quot;&gt;ErlDrvThreadOpts&lt;/a&gt;&lt;/code&gt; structure by yourself. It must be allocated and initialized by &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_opts_create&quot;&gt;erl_drv_thread_opts_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ErlDrvThreadOpts&quot;&gt;ErlDrvThreadOpts&lt;/a&gt;&lt;/code&gt; 構造を自分で割り当てることはできません。 &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_opts_create&quot;&gt;erl_drv_thread_opts_create&lt;/a&gt;&lt;/code&gt; によって割り当てられ、初期化される必要があります。</target>
        </trans-unit>
        <trans-unit id="c5b8225aef9f734d74aff7e241e5e65c8a19461f" translate="yes" xml:space="preserve">
          <source>You are not allowed to allocate the &lt;code&gt;&lt;a href=&quot;#ErlDrvThreadOpts&quot;&gt;ErlDrvThreadOpts&lt;/a&gt;&lt;/code&gt; structure by yourself. It must be allocated and initialized by &lt;code&gt;erl_drv_thread_opts_create&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ErlDrvThreadOpts&quot;&gt;ErlDrvThreadOpts&lt;/a&gt;&lt;/code&gt; 構造を自分で割り当てることはできません。 &lt;code&gt;erl_drv_thread_opts_create&lt;/code&gt; によって割り当てられ、初期化される必要があります。</target>
        </trans-unit>
        <trans-unit id="30dfa6dc48b2fd68234390e1944fedce147fe434" translate="yes" xml:space="preserve">
          <source>You are now ready to install the Erlang/OTP release! The following command will install the release on your system.</source>
          <target state="translated">これでErlang/OTPリリースをインストールする準備ができました! 次のコマンドはあなたのシステムにリリースをインストールします。</target>
        </trans-unit>
        <trans-unit id="22729cd29e226b629e272d1a72f8f88eeaa3c868" translate="yes" xml:space="preserve">
          <source>You are only allowed to terminate threads created with &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_create&quot;&gt;erl_drv_thread_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#erl_drv_thread_create&quot;&gt;erl_drv_thread_create&lt;/a&gt;&lt;/code&gt; で作成されたスレッドのみを終了できます。</target>
        </trans-unit>
        <trans-unit id="59411bea6575cd8a0ea474d86bf6c78783f3875a" translate="yes" xml:space="preserve">
          <source>You can &lt;strong&gt;not&lt;/strong&gt; pass a configuration file using the &lt;code&gt;--xcomp-conf&lt;/code&gt; argument when you invoke &lt;code&gt;configure&lt;/code&gt; directly. The &lt;code&gt;--xcomp-conf&lt;/code&gt; argument can only be passed to &lt;code&gt;otp_build configure&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;configure&lt;/code&gt; を直接呼び出す場合、 &lt;code&gt;--xcomp-conf&lt;/code&gt; 引数を使用して構成ファイルを渡すことはでき&lt;strong&gt;ません&lt;/strong&gt;。 &lt;code&gt;--xcomp-conf&lt;/code&gt; に引数がのみに渡すことができ &lt;code&gt;otp_build configure&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35abdd922e455eb4e3458a582559df01c500c039" translate="yes" xml:space="preserve">
          <source>You can add custom metadata, either by specifying a map as the last parameter to any of the log macros or the API functions, or by setting process metadata with &lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt;set_process_metadata/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt;update_process_metadata/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ログマクロまたはAPI関数の最後のパラメーターとしてマップを指定するか、 &lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt;set_process_metadata/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt;update_process_metadata/1&lt;/a&gt;&lt;/code&gt; でプロセスメタデータを設定することにより、カスタムメタデータを追加できます。</target>
        </trans-unit>
        <trans-unit id="d1677347fdd98391eca3e5758569bcaf17f81c50" translate="yes" xml:space="preserve">
          <source>You can also configure the system so that the default handler prints log events to a single file, or to a set of wrap logs via &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">デフォルトのハンドラーがログイベントを単一のファイルに出力するように、または &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; を介して一連のラップログに出力するようにシステムを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="09c242cbdd777d34ff137ac36a09731f4c420b6d" translate="yes" xml:space="preserve">
          <source>You can also enable code coverage in your test specifications (see section &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; in section Running Tests and Analyzing Results).</source>
          <target state="translated">テスト仕様でコードカバレッジを有効にすることもできます（「 &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; 実行と結果の分析」のセクション「テスト仕様」を参照）。</target>
        </trans-unit>
        <trans-unit id="4483ff84688ea822bef4ab30674260e42c82a3bb" translate="yes" xml:space="preserve">
          <source>You can also pass the cover specification file name in a call to &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt;, by adding a &lt;code&gt;{cover,CoverSpec}&lt;/code&gt; tuple to argument &lt;code&gt;Opts&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;Opts&lt;/code&gt; に &lt;code&gt;{cover,CoverSpec}&lt;/code&gt; タプルを追加することにより、 &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; への呼び出しでカバー仕様ファイル名を渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="f9833460ab32f6f87bd66898784de048510ecec5" translate="yes" xml:space="preserve">
          <source>You can also set match specifications on messages. By default, if tracing messages, all messages sent and/or received by the process or port are traced. Match specifications can be used to reduce the number of traced messages and/or to trigger more information in the trace messages.</source>
          <target state="translated">また、メッセージにマッチ指定を設定することもできます。デフォルトでは、メッセージをトレースする場合、プロセスまたはポートによって送信および/または受信されたすべてのメッセージがトレースされます。マッチ指定は、トレースされたメッセージの数を減らすため、および/またはトレースメッセージ内のより多くの情報をトリガーするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="551210ee2bccd3e951c3dbbc9801ca4766798e44" translate="yes" xml:space="preserve">
          <source>You can also use the function &lt;code&gt;&lt;a href=&quot;eunit#test-1&quot;&gt;eunit:test/1&lt;/a&gt;&lt;/code&gt; to run arbitrary tests, for example to try out some more advanced test descriptors (see &lt;code&gt;&lt;a href=&quot;#EUnit_test_representation&quot;&gt;EUnit test representation&lt;/a&gt;&lt;/code&gt;). For example, running &lt;code&gt;eunit:test(m)&lt;/code&gt; does the same thing as the auto-generated function &lt;code&gt;m:test()&lt;/code&gt;, while &lt;code&gt;eunit:test({inparallel, m})&lt;/code&gt; runs the same test cases but executes them all in parallel.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;eunit#test-1&quot;&gt;eunit:test/1&lt;/a&gt;&lt;/code&gt; を使用して任意のテストを実行することもできます。たとえば、より高度なテスト記述子を試すことができます（ &lt;code&gt;&lt;a href=&quot;#EUnit_test_representation&quot;&gt;EUnit test representation&lt;/a&gt;&lt;/code&gt; 参照）。例えば、実行中の &lt;code&gt;eunit:test(m)&lt;/code&gt; 自動生成機能と同じものでない &lt;code&gt;m:test()&lt;/code&gt; しながら、 &lt;code&gt;eunit:test({inparallel, m})&lt;/code&gt; 同一のテストケースが、実行それらをすべて並列に実行されます。</target>
        </trans-unit>
        <trans-unit id="a9ff8518e43bdc2355b6cee436db8164290ae7ae" translate="yes" xml:space="preserve">
          <source>You can always decide not to format the whole trace data contained in the fetch directory, but analyze single files instead. To do so, a single file (or list of files) must be passed as the first argument to &lt;code&gt;format/1,2&lt;/code&gt;.</source>
          <target state="translated">フェッチディレクトリに含まれるトレースデータ全体をフォーマットしないように常に決定できますが、代わりに単一のファイルを分析します。これを行うには、単一のファイル（またはファイルのリスト）を最初の引数として &lt;code&gt;format/1,2&lt;/code&gt; に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="2e1cbb080a7afb39db98054ecb11afc153564abe" translate="yes" xml:space="preserve">
          <source>You can always traverse the result set sequential by using next</source>
          <target state="translated">次のように使用することで、常に結果セットを順にたどることができます。</target>
        </trans-unit>
        <trans-unit id="8a98ace90529f363634dbd989ec1efbfa146358f" translate="yes" xml:space="preserve">
          <source>You can check the setting of this by calling &lt;code&gt;io:getopts()&lt;/code&gt;, which gives you an option list containing &lt;code&gt;{encoding,unicode}&lt;/code&gt; or &lt;code&gt;{encoding,latin1}&lt;/code&gt;.</source>
          <target state="translated">これの設定を確認するには、 &lt;code&gt;io:getopts()&lt;/code&gt; を呼び出します。これにより、 &lt;code&gt;{encoding,unicode}&lt;/code&gt; または &lt;code&gt;{encoding,latin1}&lt;/code&gt; を含むオプションリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="8574e316289208e29729f5052d5efe32f2f00e93" translate="yes" xml:space="preserve">
          <source>You can check this option by calling &lt;code&gt;io:printable_range/0&lt;/code&gt;, which returns &lt;code&gt;unicode&lt;/code&gt; or &lt;code&gt;latin1&lt;/code&gt;. To be compatible with future (expected) extensions to the settings, rather use &lt;code&gt;io_lib:printable_list/1&lt;/code&gt; to check if a list is printable according to the setting. That function takes into account new possible settings returned from &lt;code&gt;io:printable_range/0&lt;/code&gt;.</source>
          <target state="translated">このオプションをチェックするには、 &lt;code&gt;unicode&lt;/code&gt; または &lt;code&gt;latin1&lt;/code&gt; を返す &lt;code&gt;io:printable_range/0&lt;/code&gt; を呼び出します。設定の将来の（予期される）拡張と互換性を持たせるには、 &lt;code&gt;io_lib:printable_list/1&lt;/code&gt; を使用して、設定に従ってリストが印刷可能かどうかを確認します。この関数は、 &lt;code&gt;io:printable_range/0&lt;/code&gt; から返された新しい可能な設定を考慮します。</target>
        </trans-unit>
        <trans-unit id="d0e04a4a6eb568c8b8c3a76a7b176057654292be" translate="yes" xml:space="preserve">
          <source>You can choose to export and import code coverage data between tests. If you specify the name of an export file in the cover specification file, &lt;code&gt;Common Test&lt;/code&gt; exports collected coverage data to this file at the end of the test. You can similarly specify previously exported data to be imported and included in the analysis for a test (multiple import files can be specified). This way, the total code coverage can be analyzed without necessarily running all tests at once.</source>
          <target state="translated">テスト間でコードカバレッジデータをエクスポートおよびインポートすることを選択できます。カバー仕様ファイルでエクスポートファイルの名前を指定した場合、 &lt;code&gt;Common Test&lt;/code&gt; はテストの最後に収集されたカバレッジデータをこのファイルにエクスポートします。同様に、インポートしてテストの分析に含める以前にエクスポートしたデータを指定できます（複数のインポートファイルを指定できます）。この方法では、必ずしもすべてのテストを一度に実行しなくても、コードカバレッジ全体を分析できます。</target>
        </trans-unit>
        <trans-unit id="e7fb46f54e79b2ee6f1b2af9d941dce71c1854fe" translate="yes" xml:space="preserve">
          <source>You can easily create deadlocks if processes suspends each other (directly or in circles). In ERTS versions prior to ERTS version 10.0, the runtime system prevented such deadlocks, but this prevention has now been removed due to performance reasons.</source>
          <target state="translated">プロセスがお互いに(直接またはサークル内で)サスペンドすると、簡単にデッドロックが発生します。ERTS バージョン 10.0 より前の ERTS バージョンでは、ランタイムシステムがこのようなデッドロックを防止していましたが、現在はパフォーマンスの理由からこの防止機能は削除されています。</target>
        </trans-unit>
        <trans-unit id="423b821d23b692bfa4b48fe6190af1e377d23e6e" translate="yes" xml:space="preserve">
          <source>You can either install using the installation paths determined by &lt;code&gt;configure&lt;/code&gt; (4), or install manually using (5).</source>
          <target state="translated">&lt;code&gt;configure&lt;/code&gt; （4）で決定したインストールパスを使用してインストールするか、または（5）を使用して手動でインストールできます。</target>
        </trans-unit>
        <trans-unit id="c34178d3c81c96b486894bd95b9f44ba16a15c48" translate="yes" xml:space="preserve">
          <source>You can even write case switches using &lt;code&gt;?Q&lt;/code&gt; macros as patterns. For example:</source>
          <target state="translated">&lt;code&gt;?Q&lt;/code&gt; マクロをパターンとして使用して、ケーススイッチを記述することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="1639897175fdaf0ee0817cc235065e52a6c6ddc8" translate="yes" xml:space="preserve">
          <source>You can find examples of these three examples of usage below.</source>
          <target state="translated">以下の3つの使用例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="14f57329dd909da731d2afd5bd8834c0250077de" translate="yes" xml:space="preserve">
          <source>You can generate events of any existing &lt;code&gt;type&lt;/code&gt;, but the &lt;code&gt;internal&lt;/code&gt; type can only be generated through action &lt;code&gt;next_event&lt;/code&gt;. Hence, it cannot come from an external source, so you can be certain that an &lt;code&gt;internal&lt;/code&gt; event is an event from your state machine to itself.</source>
          <target state="translated">既存の &lt;code&gt;type&lt;/code&gt; イベントを生成できますが、 &lt;code&gt;internal&lt;/code&gt; タイプはアクション &lt;code&gt;next_event&lt;/code&gt; でのみ生成できます。したがって、それは外部ソースから来ることができないので、 &lt;code&gt;internal&lt;/code&gt; イベントは状態マシンからそれ自体へのイベントであると確信できます。</target>
        </trans-unit>
        <trans-unit id="36825f6895831ae9ce55288bf8e10f1c7f638cd5" translate="yes" xml:space="preserve">
          <source>You can iterate over a backup, either to transform it into a new backup, or only read it. The function &lt;code&gt;&lt;a href=&quot;mnesia#traverse_backup-4&quot;&gt;mnesia:traverse_backup(Source, [SourceMod,] Target, [TargetMod,] Fun, Acc)&lt;/a&gt;&lt;/code&gt;, which normally returns &lt;code&gt;{ok, LastAcc}&lt;/code&gt;, is used for both of these purposes.</source>
          <target state="translated">バックアップを反復処理して、新しいバックアップに変換するか、読み取るだけにすることができます。通常は &lt;code&gt;{ok, LastAcc}&lt;/code&gt; 返す関数 &lt;code&gt;&lt;a href=&quot;mnesia#traverse_backup-4&quot;&gt;mnesia:traverse_backup(Source, [SourceMod,] Target, [TargetMod,] Fun, Acc)&lt;/a&gt;&lt;/code&gt; 、これらの両方の目的で使用されます。</target>
        </trans-unit>
        <trans-unit id="5b52459c10b0116f65512e9127ad338dfcd988bd" translate="yes" xml:space="preserve">
          <source>You can lose accuracy and precision when converting between time units. To minimize such loss, collect all data at &lt;code&gt;native&lt;/code&gt; time unit and do the conversion on the end result.</source>
          <target state="translated">時間単位間で変換すると、精度と精度が失われる可能性があります。このような損失を最小限に抑えるには、すべてのデータを &lt;code&gt;native&lt;/code&gt; 時間単位で収集し、最終結果で変換を行います。</target>
        </trans-unit>
        <trans-unit id="04104ee8d9624f138edb2edb4f4b2cef9c367e73" translate="yes" xml:space="preserve">
          <source>You can now either do:</source>
          <target state="translated">これであなたはどちらかをすることができます。</target>
        </trans-unit>
        <trans-unit id="cdeb798230562cb1e552bac539bf89bbf6d2c2e2" translate="yes" xml:space="preserve">
          <source>You can of course use any editor you like to write Erlang programs, but if you use Emacs there exists editing support such as indentation, syntax highlighting, electric commands, module name verification, comment support including paragraph filling, skeletons, tags support and more. See the &lt;a href=&quot;lib/tools-3.0/doc/html/index&quot;&gt; Tools&lt;/a&gt; application for details.</source>
          <target state="translated">もちろん、Erlangプログラムを作成するために好きなエディターを使用できますが、Emacsを使用する場合は、インデント、構文の強調表示、電気コマンド、モジュール名の検証、段落の埋め込みを含むコメントのサポート、スケルトン、タグのサポートなどの編集サポートがあります。詳細については、&lt;a href=&quot;lib/tools-3.0/doc/html/index&quot;&gt;ツール&lt;/a&gt;アプリケーションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4229af77909230adf1fbc9979cfbb58d6a1bba78" translate="yes" xml:space="preserve">
          <source>You can open a connection for a particular &lt;code&gt;Name&lt;/code&gt; and use the same name as reference for all following subsequent operations. If you want the connection to be associated with &lt;code&gt;Handle&lt;/code&gt; instead (if you, for example, need to open multiple connections to a host), use &lt;code&gt;Key&lt;/code&gt;, the configuration variable name, to specify the target. A connection without an associated target name can only be closed with the handle value.</source>
          <target state="translated">特定の &lt;code&gt;Name&lt;/code&gt; 接続を開き、後続のすべての操作の参照として同じ名前を使用できます。代わりに接続を &lt;code&gt;Handle&lt;/code&gt; に関連付けたい場合（たとえば、ホストへの複数の接続を開く必要がある場合）は、構成変数名である &lt;code&gt;Key&lt;/code&gt; を使用してターゲットを指定します。ターゲット名が関連付けられていない接続は、ハンドル値でのみ閉じることができます。</target>
        </trans-unit>
        <trans-unit id="93205ae69716dec641b4316864a13837f4fa7ff7" translate="yes" xml:space="preserve">
          <source>You can open as many registries as you like (if memory permits).</source>
          <target state="translated">メモリが許す限り、好きなだけ多くのレジストリを開くことができます。</target>
        </trans-unit>
        <trans-unit id="965541b42f007530fda56b4a6fc39a30f4e5b6a0" translate="yes" xml:space="preserve">
          <source>You can order &lt;code&gt;Common Test&lt;/code&gt; to repeat the tests you specify. You can choose to repeat tests a number of times, repeat tests for a specific period of time, or repeat tests until a particular stop time is reached. If repetition is controlled by time, an action for &lt;code&gt;Common Test&lt;/code&gt; to take upon time-out can be specified. Either &lt;code&gt;Common Test&lt;/code&gt; performs all tests in the current run before stopping, or it stops when the current test job is finished. Repetition can be activated by &lt;code&gt;ct_run&lt;/code&gt; start flags, or tuples in the &lt;code&gt;ct:run:test/1&lt;/code&gt; option list argument. The flags (options in parentheses) are the following:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; を注文して、指定したテストを繰り返すことができます。テストを何度も繰り返すか、特定の期間テストを繰り返すか、または特定の停止時間に達するまでテストを繰り返すかを選択できます。繰り返しが時間によって制御される場合、タイムアウト時に &lt;code&gt;Common Test&lt;/code&gt; が実行するアクションを指定できます。どちらの &lt;code&gt;Common Test&lt;/code&gt; 停止する前に、現在実行中のすべてのテストを実行し、または現在のテストジョブが終了したときには、停止します。繰り返しは、 &lt;code&gt;ct_run&lt;/code&gt; 開始フラグ、または &lt;code&gt;ct:run:test/1&lt;/code&gt; オプションリスト引数のタプルによってアクティブ化できます。フラグ（括弧内のオプション）は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="92f23e4337a24de1c7d4a0723408a7ebe3dbd5f7" translate="yes" xml:space="preserve">
          <source>You can provide a seed value (a tuple of three integers) with the shuffle property &lt;code&gt;{shuffle,Seed}&lt;/code&gt;. This way, the same shuffling order can be created every time the group is executed. If no seed value is specified, &lt;code&gt;Common Test&lt;/code&gt; creates a &quot;random&quot; seed for the shuffling operation (using the return value of &lt;code&gt;erlang:timestamp/0&lt;/code&gt;). The seed value is always printed to the &lt;code&gt;init_per_group/2&lt;/code&gt; log file so that it can be used to recreate the same execution order in a subsequent test run.</source>
          <target state="translated">シャッフルプロパティ &lt;code&gt;{shuffle,Seed}&lt;/code&gt; シード値（3つの整数のタプル）を提供できます。このようにして、グループが実行されるたびに同じシャッフル順序を作成できます。シード値が指定されていない場合、 &lt;code&gt;Common Test&lt;/code&gt; はシャッフル操作の「ランダム」シードを作成します（ &lt;code&gt;erlang:timestamp/0&lt;/code&gt; の戻り値を使用）。シード値は常に &lt;code&gt;init_per_group/2&lt;/code&gt; ログファイルに出力されるため、後続のテスト実行で同じ実行順序を再作成するために使用できます。</target>
        </trans-unit>
        <trans-unit id="19c1bc31c671f224905996302123a407a1ab1a1b" translate="yes" xml:space="preserve">
          <source>You can repeat the state enter code by returning one of &lt;code&gt;{repeat_state, ...}&lt;/code&gt;, &lt;code&gt;{repeat_state_and_data,_}&lt;/code&gt; or &lt;code&gt;repeat_state_and_data&lt;/code&gt; that otherwise behaves exactly like their &lt;code&gt;keep_state&lt;/code&gt; siblings. See the type &lt;code&gt;state_callback_result()&lt;/code&gt; in the reference manual.</source>
          <target state="translated">&lt;code&gt;{repeat_state, ...}&lt;/code&gt; 、 &lt;code&gt;{repeat_state_and_data,_}&lt;/code&gt; 、 &lt;code&gt;repeat_state_and_data&lt;/code&gt; のいずれかを返すことで、state enterコードを繰り返すことができます。それ以外は、 &lt;code&gt;keep_state&lt;/code&gt; の兄弟とまったく同じように動作します。リファレンスマニュアルのタイプ &lt;code&gt;state_callback_result()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="525476aa0bb90732c53b00712010689976af1013" translate="yes" xml:space="preserve">
          <source>You can retrieve the &lt;code&gt;encoding&lt;/code&gt; setting for an I/O server with function &lt;code&gt;io:getopts()&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;io:getopts()&lt;/code&gt; を使用して、I / Oサーバーの &lt;code&gt;encoding&lt;/code&gt; 設定を取得できます。</target>
        </trans-unit>
        <trans-unit id="17abf270f149ddbce7ab05d930e6206fa2b11a9e" translate="yes" xml:space="preserve">
          <source>You can run into trouble if this feature is used carelessly. Always ensure that all communicating components are either from the same Erlang/OTP release, or from release X and release Y where all components from release Y are in compatibility mode of release X.</source>
          <target state="translated">この機能を不注意に使うとトラブルに巻き込まれる可能性があります。通信するコンポーネントはすべて同じErlang/OTPリリースか、リリースXとリリースYのもので、リリースYのコンポーネントはすべてリリースXの互換モードになっていることを常に確認してください。</target>
        </trans-unit>
        <trans-unit id="96008ca2eaded68beb9b63d4f96f05cd66c94e49" translate="yes" xml:space="preserve">
          <source>You can set the encoding of a file or other I/O server with function &lt;code&gt;io:setopts/2&lt;/code&gt;. This can also be set when opening a file. Setting the terminal (or other &lt;code&gt;standard_io&lt;/code&gt; server) unconditionally to option &lt;code&gt;{encoding,utf8}&lt;/code&gt; implies that UTF-8 encoded characters are written to the device, regardless of how Erlang was started or the user's environment.</source>
          <target state="translated">関数 &lt;code&gt;io:setopts/2&lt;/code&gt; を使用して、ファイルまたは他のI / Oサーバーのエンコーディングを設定できます。これは、ファイルを開くときにも設定できます。端末（または他の &lt;code&gt;standard_io&lt;/code&gt; サーバー）を無条件にオプション &lt;code&gt;{encoding,utf8}&lt;/code&gt; すると、Erlangの起動方法やユーザーの環境に関係なく、UTF-8エンコード文字がデバイスに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="413ecdb1d68a2adf4a654bf35c78d174f104d6f7" translate="yes" xml:space="preserve">
          <source>You can start &lt;code&gt;Common Test&lt;/code&gt; in an interactive shell mode where no automatic testing is performed. Instead, &lt;code&gt;Common Test&lt;/code&gt; starts its utility processes, installs configuration data (if any), and waits for the user to call functions (typically test case support functions) from the Erlang shell.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; は、自動テストが実行されないインタラクティブシェルモードで開始できます。代わりに、 &lt;code&gt;Common Test&lt;/code&gt; はユーティリティプロセスを開始し、構成データ（存在する場合）をインストールし、ユーザーがErlangシェルから関数（通常はテストケースサポート関数）を呼び出すのを待ちます。</target>
        </trans-unit>
        <trans-unit id="6ccecfb82cbec8981031453403b8d005a1fb2328" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;regular expressions&lt;/code&gt; and search for objects, and edit or delete them.</source>
          <target state="translated">&lt;code&gt;regular expressions&lt;/code&gt; を使用してオブジェクトを検索し、それらを編集または削除できます。</target>
        </trans-unit>
        <trans-unit id="1e98168372b155e90b7443b26516f4fe2b04c377" translate="yes" xml:space="preserve">
          <source>You cannot encode a class, object, or object set, only refer to it when defining other ASN.1 entities. Typically you refer to a class as well as to object sets by table constraints and component relation constraints (X.682) in ASN.1 types, as in the following:</source>
          <target state="translated">クラス、オブジェクト、またはオブジェクト集合をエンコードすることはできず、他のASN.1エンティティを定義する際にのみ参照します。通常、ASN.1型では、以下のように、テーブル制約とコンポーネント関係制約(X.682)によって、クラスとオブジェクトセットを参照します。</target>
        </trans-unit>
        <trans-unit id="537051b02b992f39da66b30d6aa73765fb5e2c0e" translate="yes" xml:space="preserve">
          <source>You cannot use different names to distinguish between two subpatterns with the same number, as PCRE uses only the numbers when matching. For this reason, an error is given at compile time if different names are specified to subpatterns with the same number. However, you can specify the same name to subpatterns with the same number, even when &lt;code&gt;dupnames&lt;/code&gt; is not set.</source>
          <target state="translated">PCREは照合時に番号のみを使用するため、異なる番号を使用して同じ番号の2つのサブパターンを区別することはできません。このため、同じ番号のサブパターンに異なる名前を指定すると、コンパイル時にエラーが発生します。ただし、 &lt;code&gt;dupnames&lt;/code&gt; が設定されていなくても、同じ番号のサブパターンに同じ名前を指定できます。</target>
        </trans-unit>
        <trans-unit id="5e3e363bb7e4c920f6f1dc0384793c43d52437a3" translate="yes" xml:space="preserve">
          <source>You get vectors of &lt;code&gt;ErlIOVec&lt;/code&gt; type from the driver queue (see below), and the &lt;code&gt;&lt;a href=&quot;driver_entry#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; driver entry function. You can also make them yourself, if you want to send several &lt;code&gt;ErlDrvBinary&lt;/code&gt; buffers at once. Often it is faster to use &lt;code&gt;&lt;a href=&quot;#driver_output&quot;&gt;driver_output&lt;/a&gt;&lt;/code&gt; or .</source>
          <target state="translated">&lt;code&gt;ErlIOVec&lt;/code&gt; タイプのベクターをドライバーキュー（下記参照）と &lt;code&gt;&lt;a href=&quot;driver_entry#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; ドライバーエントリ関数から取得します。複数の &lt;code&gt;ErlDrvBinary&lt;/code&gt; バッファーを一度に送信する場合は、自分で作成することもできます。多くの場合、 &lt;code&gt;&lt;a href=&quot;#driver_output&quot;&gt;driver_output&lt;/a&gt;&lt;/code&gt; またはを使用する方が高速です。</target>
        </trans-unit>
        <trans-unit id="be9e9d89afaeb9f12be394e2b3fc585cd8a4ce30" translate="yes" xml:space="preserve">
          <source>You have realized that function &lt;code&gt;evil_fun&lt;/code&gt; of the &lt;code&gt;evil_mod&lt;/code&gt; module, with arity &lt;code&gt;2&lt;/code&gt;, is causing all this trouble.</source>
          <target state="translated">あなたは、その機能を実現している &lt;code&gt;evil_fun&lt;/code&gt; の &lt;code&gt;evil_mod&lt;/code&gt; のアリティで、モジュールを &lt;code&gt;2&lt;/code&gt; 、すべてこのトラブルを引き起こしています。</target>
        </trans-unit>
        <trans-unit id="43b8009bceaba89dd5daa6bdc91cff55c1a31c2c" translate="yes" xml:space="preserve">
          <source>You may also input data using &lt;code&gt;&lt;a href=&quot;odbc#param_query&quot;&gt;param_query/[3,4]&lt;/a&gt;&lt;/code&gt; and then the input data will have the Erlang type corresponding to the ODBC type of the column.&lt;code&gt;&lt;a href=&quot;#type&quot;&gt;See ODBC to Erlang mapping&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;odbc#param_query&quot;&gt;param_query/[3,4]&lt;/a&gt;&lt;/code&gt; を使用してデータを入力することもできます。その場合、入力データは列のODBCタイプに対応するErlangタイプになります。 &lt;code&gt;&lt;a href=&quot;#type&quot;&gt;See ODBC to Erlang mapping&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7edfe74c0254b806dfd4cbe8b427f6bd45d01ea" translate="yes" xml:space="preserve">
          <source>You may even need to apply lifting more than once. To match the entire export list as a single syntax tree, you can write:</source>
          <target state="translated">リフティングを複数回適用する必要があるかもしれません。エクスポートリスト全体を単一の構文ツリーとしてマッチさせるには、次のように書きます。</target>
        </trans-unit>
        <trans-unit id="7e5ee1a6ba8110135a28a89b341ab0c77b29a34c" translate="yes" xml:space="preserve">
          <source>You may repeat the state enter call using the &lt;code&gt;{repeat_state,...}&lt;/code&gt; return value from the &lt;code&gt;&lt;a href=&quot;#Event%20Handler&quot;&gt;Event Handler&lt;/a&gt;&lt;/code&gt;. In this case &lt;code&gt;OldState&lt;/code&gt; will also be equal to the current state.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Event%20Handler&quot;&gt;Event Handler&lt;/a&gt;&lt;/code&gt; からの &lt;code&gt;{repeat_state,...}&lt;/code&gt; 戻り値を使用して、state enter呼び出しを繰り返すことができます。この場合、 &lt;code&gt;OldState&lt;/code&gt; も現在の状態と等しくなります。</target>
        </trans-unit>
        <trans-unit id="bda3d6632dce9bc85f74cf55588ba7e9389da040" translate="yes" xml:space="preserve">
          <source>You may run into trouble if this feature is used carelessly. Always ensure that all communicating components are either from the same Erlang/OTP release, or from release X and release Y where all components from release Y are in compatibility mode of release X.</source>
          <target state="translated">この機能を不注意に使うとトラブルに巻き込まれるかもしれません。通信するコンポーネントはすべて同じErlang/OTPリリースか、リリースXとリリースYのもので、リリースYのコンポーネントはすべてリリースXの互換モードになっていることを常に確認してください。</target>
        </trans-unit>
        <trans-unit id="e5c76c19a3b13c108dfd91af1a0ec2e9a7a1de8d" translate="yes" xml:space="preserve">
          <source>You may want to start a timer in one state and respond to the time-out in another, maybe cancel the time-out without changing states, or perhaps run multiple time-outs in parallel. All this can be accomplished with &lt;code&gt;generic time-outs&lt;/code&gt;. They may look a little bit like &lt;code&gt;event time-outs&lt;/code&gt; but contain a name to allow for any number of them simultaneously and they are not automatically cancelled.</source>
          <target state="translated">ある状態でタイマーを開始して別の状態でタイムアウトに応答したり、状態を変更せずにタイムアウトをキャンセルしたり、複数のタイムアウトを並行して実行したりできます。これはすべて、 &lt;code&gt;generic time-outs&lt;/code&gt; 実現できます。それらは &lt;code&gt;event time-outs&lt;/code&gt; 少し似ているかもしれませんが、同時にいくつでもそれらを許可する名前を含み、それらは自動的にキャンセルされません。</target>
        </trans-unit>
        <trans-unit id="b4f4ce8a1bafe76a9e86e5436df884d3b5865a78" translate="yes" xml:space="preserve">
          <source>You might also want to setup X-windows (XFree86). That might be as easy as running startx from the command prompt and it might be much harder. Use Google to find help.</source>
          <target state="translated">また、X-windows (XFree86)をセットアップするのもいいかもしれません。これはコマンドプロンプトから startx を実行するのと同じくらい簡単かもしれませんが、もっと難しいかもしれません。Google でヘルプを見つけてください。</target>
        </trans-unit>
        <trans-unit id="58e6db453bffb8455418bbe276d7e4038ab657de" translate="yes" xml:space="preserve">
          <source>You might want to check out versions of the source code from GitHUB. That is possible directly in Cygwin, but not in MSYS. There is a project MsysGIT:</source>
          <target state="translated">GitHUBからソースコードのバージョンをチェックしてみるといいかもしれません。これはCygwinでは直接可能ですが、MSYSでは可能ではありません。MsysGITというプロジェクトがあります。</target>
        </trans-unit>
        <trans-unit id="c62fe3437c022e8570028fdd328c0f7d666c1479" translate="yes" xml:space="preserve">
          <source>You might wonder why these aren't just one module. The &lt;code&gt;Collector&lt;/code&gt; is a generic full-fledged framework that allows processes to &quot;subscribe&quot; to the &lt;code&gt;Events&lt;/code&gt; that it collects. One &lt;code&gt;Collector&lt;/code&gt; can serve several &lt;code&gt;Viewers&lt;/code&gt;. The typical case is that you have one &lt;code&gt;Viewer&lt;/code&gt; that visualizes &lt;code&gt;Events&lt;/code&gt; in one flavor and another &lt;code&gt;Viewer&lt;/code&gt; that visualizes them in another flavor. If you for example are tracing a text based protocol like &lt;code&gt;HTML&lt;/code&gt; (or &lt;code&gt;Megaco/H.248&lt;/code&gt;) it would be useful to be able to display the &lt;code&gt;Events&lt;/code&gt; as plain text as well as the internal representation of the message. The architecture does also allow you to implement your own &lt;code&gt;Viewer&lt;/code&gt; program as long as it complies to the protocol between the &lt;code&gt;Collector/Viewer&lt;/code&gt; protocol. Currently two kinds of &lt;code&gt;Viewers&lt;/code&gt; exists. That is the old &lt;code&gt;GS&lt;/code&gt; based one and the new based on &lt;code&gt;wxWidgets&lt;/code&gt;. But if you feel for it you may implement your own &lt;code&gt;Viewer&lt;/code&gt;, which for example could display the &lt;code&gt;Events&lt;/code&gt; as ASCII art or whatever you feel useful.</source>
          <target state="translated">これらが1つのモジュールではないのはなぜでしょうか。 &lt;code&gt;Collector&lt;/code&gt; プロセスがに「購読」することを可能にする一般的な本格的なフレームワークである &lt;code&gt;Events&lt;/code&gt; 、それが収集します。 1つの &lt;code&gt;Collector&lt;/code&gt; が複数の &lt;code&gt;Viewers&lt;/code&gt; サービスを提供できます。典型的なケースでは、1つの持っているということです &lt;code&gt;Viewer&lt;/code&gt; その可視化の &lt;code&gt;Events&lt;/code&gt; 1つの風味と他の &lt;code&gt;Viewer&lt;/code&gt; 別の味で可視化していること。たとえば、 &lt;code&gt;HTML&lt;/code&gt; （または &lt;code&gt;Megaco/H.248&lt;/code&gt; ）のようなテキストベースのプロトコルをトレースしている場合、 &lt;code&gt;Events&lt;/code&gt; を表示できると便利です。プレーンテキストおよびメッセージの内部表現として。このアーキテクチャでは、 &lt;code&gt;Collector/Viewer&lt;/code&gt; プロトコル間のプロトコルに準拠している限り、独自の &lt;code&gt;Viewer&lt;/code&gt; プログラムを実装することもできます。現在、2種類の &lt;code&gt;Viewers&lt;/code&gt; が存在します。それは古い &lt;code&gt;GS&lt;/code&gt; ベースのものと、新しい &lt;code&gt;wxWidgets&lt;/code&gt; ベースのものです。しかし、気が向いたら、独自の &lt;code&gt;Viewer&lt;/code&gt; を実装することもできます。これにより、たとえば、 &lt;code&gt;Events&lt;/code&gt; をASCIIアートまたは便利なものとして表示できます。</target>
        </trans-unit>
        <trans-unit id="edffabbfaa98cb58bc42c95e3d19809c6eae37f1" translate="yes" xml:space="preserve">
          <source>You need some tools to be able to build Erlang/OTP on Windows. Most notably you'll need Cygwin, MSYS or MSYS2, Visual Studio and Microsofts Windows SDK, but you might also want a Java compiler, the NSIS install system and OpenSSL. Well, here's some information about the different tools:</source>
          <target state="translated">WindowsでErlang/OTPをビルドするにはいくつかのツールが必要です。特にCygwin、MSYSやMSYS2、Visual Studio、Microsofts Windows SDKが必要ですが、Javaコンパイラ、NSISインストールシステム、OpenSSLも必要です。さて、ここではそれぞれのツールについての情報を紹介します。</target>
        </trans-unit>
        <trans-unit id="ae8e918676db4997ccb96dd5218b9d3e93aa95bc" translate="yes" xml:space="preserve">
          <source>You need to retrieve data from XML documents. Your Erlang software can handle information from the XML document by extracting data from the data structure received by parsing.</source>
          <target state="translated">あなたはXMLドキュメントからデータを取得する必要があります。Erlangソフトウェアはパースによって受信したデータ構造からデータを抽出することで、XMLドキュメントから情報を処理することができます。</target>
        </trans-unit>
        <trans-unit id="56322d848be6f1012153725fd14cdbdcd0d3d138" translate="yes" xml:space="preserve">
          <source>You need to write template functions to be able to control what kind of output you want. Thus if you want to encapsulate a &lt;code&gt;bike&lt;/code&gt; element in &amp;lt;p&amp;gt; tags you simply write a function:</source>
          <target state="translated">必要な出力の種類を制御できるように、テンプレート関数を作成する必要があります。したがって、 &lt;code&gt;bike&lt;/code&gt; 要素を&amp;lt;p&amp;gt;タグにカプセル化する場合は、関数を記述するだけです。</target>
        </trans-unit>
        <trans-unit id="a15fb947f56c5ca980fe1f5447d83f6abf981cc2" translate="yes" xml:space="preserve">
          <source>You normally do only one of the encrypt or decrypt operations, and the peer does the other. This normaly used in legacy applications as a primitive digital signature.</source>
          <target state="translated">通常は暗号化と復号化のどちらか一方だけを行い、相手はもう一方を行います。これは通常、レガシーアプリケーションでは原始的なデジタル署名として使用されます。</target>
        </trans-unit>
        <trans-unit id="a0077f1555cfe12a61c3d877c68597be7546cc11" translate="yes" xml:space="preserve">
          <source>You normally do only one of the sign or verify operations, and the peer does the other.</source>
          <target state="translated">通常、署名操作と検証操作のどちらか一方だけを行い、もう一方はピアが行います。</target>
        </trans-unit>
        <trans-unit id="ba70d6f6844215520a1ab62c505590fe6b80d193" translate="yes" xml:space="preserve">
          <source>You probably want to get started on your own first test suites now, while at the same time digging deeper into the &lt;code&gt;Common Test&lt;/code&gt; User's Guide and Reference Manual. There are much more to learn about the things that have been introduced in this section. There are also many other useful features to learn, so please continue to the other sections and have fun.</source>
          <target state="translated">おそらく、今すぐ独自の最初のテストスイートを開始すると同時に、 &lt;code&gt;Common Test&lt;/code&gt; User's GuideとReference Manual を深く掘り下げたいと思います。このセクションで紹介されていることについて学ぶべきことはたくさんあります。他にも学ぶべき便利な機能がたくさんありますので、他のセクションに進んで楽しんでください。</target>
        </trans-unit>
        <trans-unit id="885ba0137c3250a49cd7c1983d4abc2a83e3fbc8" translate="yes" xml:space="preserve">
          <source>You return a list containing &lt;code&gt;state_enter&lt;/code&gt; from your &lt;code&gt;callback_mode/0&lt;/code&gt; function and the &lt;code&gt;gen_statem&lt;/code&gt; engine will call your state callback once with the arguments &lt;code&gt;(enter, OldState, ...)&lt;/code&gt; whenever the state changes. Then you just need to handle these event-like calls in all states.</source>
          <target state="translated">&lt;code&gt;callback_mode/0&lt;/code&gt; 関数から &lt;code&gt;state_enter&lt;/code&gt; を含むリストを返し、 &lt;code&gt;gen_statem&lt;/code&gt; エンジンは、状態が変化するたびに引数 &lt;code&gt;(enter, OldState, ...)&lt;/code&gt; て状態コールバックを1回呼び出します。次に、すべての状態でこれらのイベントのような呼び出しを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d3a1a8c0569b8643dc506d38af14e3006dabe74" translate="yes" xml:space="preserve">
          <source>You should also have an &lt;code&gt;ERL_TOP&lt;/code&gt; environment variable that is &lt;strong&gt;Cygwin style&lt;/strong&gt;, and points to a directory containing, among other files, the script &lt;code&gt;otp_build&lt;/code&gt;.</source>
          <target state="translated">また、&lt;strong&gt;Cygwinスタイルの&lt;/strong&gt; &lt;code&gt;ERL_TOP&lt;/code&gt; 環境変数があり、他のファイルの中でも特にスクリプト &lt;code&gt;otp_build&lt;/code&gt; を含むディレクトリを指している必要があります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25958a4183a827e82b00b48702f979c03c46e39e" translate="yes" xml:space="preserve">
          <source>You should by now be able to understand most of the code in the messenger-module. Let us study one case in detail: a message is sent from one user to another.</source>
          <target state="translated">そろそろ、messenger-module のコードのほとんどを理解できるようになっているはずです。あるユーザから別のユーザにメッセージが送られてくるというケースを詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="6fe2775e95e1dce6b8fbcf029eef7f2e5c555539" translate="yes" xml:space="preserve">
          <source>You should get a lot of printouts as the testcases are compiled. Once done you should copy the entire &lt;code&gt;$ERL_TOP/release/tests&lt;/code&gt; folder to the cross host system.</source>
          <target state="translated">テストケースがコンパイルされると、多くのプリントアウトが得られるはずです。完了したら、 &lt;code&gt;$ERL_TOP/release/tests&lt;/code&gt; フォルダー全体をクロスホストシステムにコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="a7a1bf6128411067b9a8564b654da2a3e3601e90" translate="yes" xml:space="preserve">
          <source>You should now have a working release of Erlang/OTP! Jump to &lt;code&gt;&lt;a href=&quot;../system_principles/system_principles&quot;&gt;System Principles&lt;/a&gt;&lt;/code&gt; for instructions on running Erlang/OTP.</source>
          <target state="translated">これで、Erlang / OTPのリリースが機能しているはずです！Erlang / OTPの実行手順については、 &lt;code&gt;&lt;a href=&quot;../system_principles/system_principles&quot;&gt;System Principles&lt;/a&gt;&lt;/code&gt; ジャンプしてください。</target>
        </trans-unit>
        <trans-unit id="4ff9957d9923b6af6d60b3c95e5c034281cea473" translate="yes" xml:space="preserve">
          <source>You should read and precisely follow the instructions of the &lt;code&gt;&lt;a href=&quot;http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1747.pdf&quot;&gt;Security Policy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://www.openssl.org/docs/fips/UserGuide-2.0.pdf&quot;&gt;User Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">「 &lt;code&gt;&lt;a href=&quot;http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1747.pdf&quot;&gt;Security Policy&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;https://www.openssl.org/docs/fips/UserGuide-2.0.pdf&quot;&gt;User Guide&lt;/a&gt;&lt;/code&gt; 指示を読み、正確に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="3275068cb1741362b3ab0825e2a9a7c5bf3e22a3" translate="yes" xml:space="preserve">
          <source>You should therefore set the period to be long enough that you can accept that the supervisor keeps going at that rate. For example, if you have picked an intensity value of 5, then setting the period to 30 seconds will give you at most one restart per 6 seconds for any longer period of time, which means that your logs won't fill up too quickly, and you will have a chance to observe the failures and apply a fix.</source>
          <target state="translated">したがって、期間は、スーパーバイザーがその速度で進み続けることを受け入れることができるくらいの長さに設定する必要があります。例えば、強度の値を 5 に設定した場合、期間を 30 秒に設定すると、どんなに長い期間でも 6 秒ごとに最大でも 1 回の再起動が可能になります。</target>
        </trans-unit>
        <trans-unit id="10eb9fdb5475174f6ad8a75d8add7701e7ee6155" translate="yes" xml:space="preserve">
          <source>You typically do &lt;strong&gt;not&lt;/strong&gt; want to enable this option when the common access pattern is a few read operations interleaved with a few write operations repeatedly. In this case, you would get a performance degradation by enabling this option.</source>
          <target state="translated">一般的なアクセスパターンが、いくつかの読み取り操作といくつかの書き込み操作を繰り返しインターリーブする場合は、通常、このオプションを有効にしたくあり&lt;strong&gt;ませ&lt;/strong&gt;ん。この場合、このオプションを有効にするとパフォーマンスが低下します。</target>
        </trans-unit>
        <trans-unit id="86b5e238a54f91530f806ebbf549940c9f49564d" translate="yes" xml:space="preserve">
          <source>You typically want to enable this option when concurrent read operations are much more frequent than write operations, or when concurrent reads and writes comes in large read and write bursts (that is, many reads not interrupted by writes, and many writes not interrupted by reads).</source>
          <target state="translated">このオプションを有効にするのは、通常、同時読み取り操作が書き込み操作よりも頻繁に行われている場合や、同時読み取りと同時書き込みが大規模な読み取りと書き込みのバースト(つまり、多くの読み取りが書き込みによって中断されず、多くの書き込みが読み取りによって中断されないようになっている)が発生する場合です。</target>
        </trans-unit>
        <trans-unit id="92f5aff359b87e5d53f4849dc307f5a4affb6037" translate="yes" xml:space="preserve">
          <source>You want only one resulting module.</source>
          <target state="translated">結果として得られるモジュールは1つだけです。</target>
        </trans-unit>
        <trans-unit id="ea796648d0d9300b8b1cded2425740926ceca9e0" translate="yes" xml:space="preserve">
          <source>You were trying to unload an Erlang statically linked-in driver, which cannot be manipulated with this interface (and cannot be unloaded at all).</source>
          <target state="translated">Erlangの静的にリンクされたドライバをアンロードしようとしていましたが、このインターフェースでは操作できません(アンロードすることもできません)。</target>
        </trans-unit>
        <trans-unit id="72380257abe5d5cd2d0c1013b795250f53c529a6" translate="yes" xml:space="preserve">
          <source>Your environment probably provides similar means of changing the keyboard layout. Ensure that you have a way to switch back and forth between keyboards easily if you are not used to this. For example, entering commands using a Cyrillic character set is not easily done in the Erlang shell.</source>
          <target state="translated">お使いの環境では、キーボードのレイアウトを変更するための同様の手段を提供している可能性があります。もし慣れていないのであれば、キーボードを簡単に前後に切り替える方法があることを確認してください。例えば、キリル文字を使ってコマンドを入力することはErlangシェルでは簡単にはできません。</target>
        </trans-unit>
        <trans-unit id="cfc7c8128b732e96eaa4cdde7bebdd176ce280b6" translate="yes" xml:space="preserve">
          <source>Zip64 archives are not supported.</source>
          <target state="translated">Zip64アーカイブはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="4bfb00948cc698b3c09503dcaf8708c03daec895" translate="yes" xml:space="preserve">
          <source>[#'AccessDescription'{}]</source>
          <target state="translated">[#'AccessDescription'{}]</target>
        </trans-unit>
        <trans-unit id="e1ce0a14dc0686331ce9550b44fbed909b7b9883" translate="yes" xml:space="preserve">
          <source>[#'Attribute'{}]</source>
          <target state="translated">[#'Attribute'{}]</target>
        </trans-unit>
        <trans-unit id="7521150a8643e4389b97d238734fbf1c297c37fb" translate="yes" xml:space="preserve">
          <source>[#'DistributionPoint'{}]</source>
          <target state="translated">[#'DistributionPoint'{}]</target>
        </trans-unit>
        <trans-unit id="da1ff1345fbb73baa0e0803ea0d0bfd142cb99bb" translate="yes" xml:space="preserve">
          <source>[#'Distributionpoint'{}]</source>
          <target state="translated">[#'Distributionpoint'{}]</target>
        </trans-unit>
        <trans-unit id="51b40a19d8cfda51ed2913bcb1627e5b4327a49e" translate="yes" xml:space="preserve">
          <source>[1]: Microsoft ODBC 3.0, Programmer's Reference and SDK Guide</source>
          <target state="translated">[1]：Microsoft ODBC 3.0、プログラマーズリファレンスおよびSDKガイド</target>
        </trans-unit>
        <trans-unit id="66417bc1eadcab6b0b674cc1634320e93505ce28" translate="yes" xml:space="preserve">
          <source>[&lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;]</source>
          <target state="translated">[&lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;]</target>
        </trans-unit>
        <trans-unit id="b9c1ecfd8694939fd5931ed6e3f157f3ffcf4476" translate="yes" xml:space="preserve">
          <source>[Arg1, Arg2, ...]</source>
          <target state="translated">[Arg1、Arg2、...]</target>
        </trans-unit>
        <trans-unit id="42a0b24be599f79aef35b1492c3ad15e2c16879c" translate="yes" xml:space="preserve">
          <source>[MSAcc_Thread] | undefined</source>
          <target state="translated">[MSAcc_Thread] | 未定義</target>
        </trans-unit>
        <trans-unit id="72fc185e7d2415424198bc4e97e4925953c70d24" translate="yes" xml:space="preserve">
          <source>[Node, Sender, Message]</source>
          <target state="translated">[ノード、送信者、メッセージ]</target>
        </trans-unit>
        <trans-unit id="2a85c92367aa7a40051022096ca8cf11d8242c6b" translate="yes" xml:space="preserve">
          <source>[Pid :: pid()]</source>
          <target state="translated">[Pid :: pid（）]</target>
        </trans-unit>
        <trans-unit id="0aa157adc562adac91575bb4c43eab47bc7e5f60" translate="yes" xml:space="preserve">
          <source>[Receiver, Message]</source>
          <target state="translated">[受信者、メッセージ]</target>
        </trans-unit>
        <trans-unit id="ee00e0101d39709f50e398a82bd0ea3291fa544c" translate="yes" xml:space="preserve">
          <source>[] |</source>
          <target state="translated">[] |</target>
        </trans-unit>
        <trans-unit id="6ca53cc1334ef69049fc43ae5128d412b73b67bb" translate="yes" xml:space="preserve">
          <source>[char()] |</source>
          <target state="translated">[char（）] |</target>
        </trans-unit>
        <trans-unit id="576f6256e36d8c94122108cff7936adada6f9d21" translate="yes" xml:space="preserve">
          <source>[char()] | {error, [char()], &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt;}</source>
          <target state="translated">[char（）] | {エラー、[char（）]、 &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="dfdac258a47c9548f07058a4d414926565e2af67" translate="yes" xml:space="preserve">
          <source>[id_key_purpose()]</source>
          <target state="translated">[id_key_purpose()]</target>
        </trans-unit>
        <trans-unit id="2959facd9edc3e27045426ab594a9fed5e38ef6b" translate="yes" xml:space="preserve">
          <source>[key_usage()]</source>
          <target state="translated">[key_usage()]</target>
        </trans-unit>
        <trans-unit id="80cff9d804929b13bd503fac44a911fdc9bd9578" translate="yes" xml:space="preserve">
          <source>[optional] Implement the default user.</source>
          <target state="translated">[オプション]デフォルトのユーザーを実装します。</target>
        </trans-unit>
        <trans-unit id="be02612d6c39318d90a0953fdf863bc655b53e4a" translate="yes" xml:space="preserve">
          <source>[pid()] | {error, {no_such_group, Name}}</source>
          <target state="translated">[pid（）] | {エラー、{no_such_group、名前}}</target>
        </trans-unit>
        <trans-unit id="6274e10bcfa160bff5b4411f5a150d9c302e5be9" translate="yes" xml:space="preserve">
          <source>[{&lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt;ip_address()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-port_number&quot;&gt;port_number()&lt;/a&gt;&lt;/code&gt;} |</source>
          <target state="translated">[{ &lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt;ip_address()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-port_number&quot;&gt;port_number()&lt;/a&gt;&lt;/code&gt; } |</target>
        </trans-unit>
        <trans-unit id="dadf5afb9a670102f8e9550c35fdd5519c70b3df" translate="yes" xml:space="preserve">
          <source>[{Par :: atom(), Val :: any()} |</source>
          <target state="translated">[{Par :: atom（）、Val :: any（）} |</target>
        </trans-unit>
        <trans-unit id="3aeb2bf44fbbf62ac9faaa808312e1fe929b20fd" translate="yes" xml:space="preserve">
          <source>[{SchedulerId, ActiveTime, TotalTime}] | undefined</source>
          <target state="translated">[{SchedulerId、ActiveTime、TotalTime}] | 未定義</target>
        </trans-unit>
        <trans-unit id="7309754570cf1a09cfa657f2546d91f8fd76acab" translate="yes" xml:space="preserve">
          <source>[{atom(), integer()}]</source>
          <target state="translated">[{atom（）、integer（）}]</target>
        </trans-unit>
        <trans-unit id="4bd5d0fef71d6ccb3189e94373cd25fa0b91c611" translate="yes" xml:space="preserve">
          <source>[{atom(), term()}]</source>
          <target state="translated">[{atom（）、term（）}]</target>
        </trans-unit>
        <trans-unit id="14391628efa44e40ee12bbe076863a61135834a2" translate="yes" xml:space="preserve">
          <source>[{a}]</source>
          <target state="translated">[{a}]</target>
        </trans-unit>
        <trans-unit id="e2a32cb1fd713c0eed8d48b0cd7bad3597b1db49" translate="yes" xml:space="preserve">
          <source>[{memory_type(), integer() &amp;gt;= 0}]</source>
          <target state="translated">[{memory_type（）、integer（）&amp;gt; = 0}]</target>
        </trans-unit>
        <trans-unit id="0d6089f53cda0554d0fa4e28f4ec9f7dc7f9017f" translate="yes" xml:space="preserve">
          <source>[{module(), &lt;code&gt;&lt;a href=&quot;#type-level&quot;&gt;level()&lt;/a&gt;&lt;/code&gt; | all | none}]}</source>
          <target state="translated">[{モジュール（）、 &lt;code&gt;&lt;a href=&quot;#type-level&quot;&gt;level()&lt;/a&gt;&lt;/code&gt; |すべて|なし}]}</target>
        </trans-unit>
        <trans-unit id="ca717bb5d14518f424644a24b58029b2355342d3" translate="yes" xml:space="preserve">
          <source>[{{a}}]</source>
          <target state="translated">[{{a}}]</target>
        </trans-unit>
        <trans-unit id="ab006bb8aacdf6e68299bc1dffccc9bcc8ac3eaf" translate="yes" xml:space="preserve">
          <source>\&quot;</source>
          <target state="translated">\&quot;</target>
        </trans-unit>
        <trans-unit id="9ca863000c0131ce2b74e96a2de49fddf5ae1e10" translate="yes" xml:space="preserve">
          <source>\'</source>
          <target state="translated">\'</target>
        </trans-unit>
        <trans-unit id="d247b868bf66bb4f3e6e64a75980114e868f80c1" translate="yes" xml:space="preserve">
          <source>\N is not allowed in a character class. \B, \R, and \X are not special inside a character class. Like other unrecognized escape sequences, they are treated as the literal characters &quot;B&quot;, &quot;R&quot;, and &quot;X&quot;. Outside a character class, these sequences have different meanings.</source>
          <target state="translated">\ Nは文字クラスでは使用できません。\ B、\ R、および\ Xは文字クラス内では特別ではありません。他の認識されないエスケープシーケンスと同様に、それらはリテラル文字「B」、「R」、および「X」として扱われます。文字クラスの外では、これらのシーケンスには異なる意味があります。</target>
        </trans-unit>
        <trans-unit id="58aec324b2389c6b52945c44a246277784ee9780" translate="yes" xml:space="preserve">
          <source>\R can be restricted to match only CR, LF, or CRLF (instead of the complete set of Unicode line endings) by setting option &lt;code&gt;bsr_anycrlf&lt;/code&gt; either at compile time or when the pattern is matched. (BSR is an acronym for &quot;backslash R&quot;.) This can be made the default when PCRE is built; if so, the other behavior can be requested through option &lt;code&gt;bsr_unicode&lt;/code&gt;. These settings can also be specified by starting a pattern string with one of the following sequences:</source>
          <target state="translated">\ Rは、コンパイル時またはパターンが一致したときにオプション &lt;code&gt;bsr_anycrlf&lt;/code&gt; を設定することにより、CR、LF、またはCRLF（Unicode行末の完全なセットではなく）のみに一致するように制限できます。（BSRは「バックスラッシュR」の頭字語です。）PCREがビルドされるとき、これをデフォルトにすることができます。その場合、オプション &lt;code&gt;bsr_unicode&lt;/code&gt; を使用して他の動作を要求できます。これらの設定は、次のシーケンスのいずれかでパターン文字列を開始することでも指定できます。</target>
        </trans-unit>
        <trans-unit id="821bc1e3064e5be5c599e2cff7d5d54b776a988d" translate="yes" xml:space="preserve">
          <source>\X always matches at least one character. Then it decides whether to add more characters according to the following rules for ending a cluster:</source>
          <target state="translated">\ Xは常に少なくとも1文字と一致します。次に、クラスターを終了するための次のルールに従って、文字を追加するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="195f6b5cfc2bdb0e5ace74ca82a581b3f8bfbe14" translate="yes" xml:space="preserve">
          <source>\XYZ, \YZ, \Z</source>
          <target state="translated">\ XYZ、\ YZ、\ Z</target>
        </trans-unit>
        <trans-unit id="9e94758983980504af303ef297fd2bf9d9cea063" translate="yes" xml:space="preserve">
          <source>\\</source>
          <target state="translated">\\</target>
        </trans-unit>
        <trans-unit id="252e8da96b92b7a90e8b1552e1907cd30addbc90" translate="yes" xml:space="preserve">
          <source>\^A...\^Z</source>
          <target state="translated">\^A...\^Z</target>
        </trans-unit>
        <trans-unit id="1fe89331ca92589385290d32cdf4c88a07b2cca0" translate="yes" xml:space="preserve">
          <source>\^a...\^z</source>
          <target state="translated">\^a...\^z</target>
        </trans-unit>
        <trans-unit id="4629ca1b60e263bdc4326334b23323e0434717a5" translate="yes" xml:space="preserve">
          <source>\b</source>
          <target state="translated">\b</target>
        </trans-unit>
        <trans-unit id="caf5b0b18d08106e7f87e99a2da9940d43b46e3b" translate="yes" xml:space="preserve">
          <source>\d</source>
          <target state="translated">\d</target>
        </trans-unit>
        <trans-unit id="80bcc8b02cd875c9c7b9dc9e6159a6cd886a4b36" translate="yes" xml:space="preserve">
          <source>\e</source>
          <target state="translated">\e</target>
        </trans-unit>
        <trans-unit id="794a729d2e4ffbb094fec03ae9b3acd219371385" translate="yes" xml:space="preserve">
          <source>\f</source>
          <target state="translated">\f</target>
        </trans-unit>
        <trans-unit id="ef7e6794ca9c6a06b54b66f279237fb8daaaeea8" translate="yes" xml:space="preserve">
          <source>\n</source>
          <target state="translated">\n</target>
        </trans-unit>
        <trans-unit id="f12c84902108895980702c88db900ceea2d2ec01" translate="yes" xml:space="preserve">
          <source>\r</source>
          <target state="translated">\r</target>
        </trans-unit>
        <trans-unit id="e1c702e348504013ae2a1faa8cec6a558f9315a8" translate="yes" xml:space="preserve">
          <source>\s</source>
          <target state="translated">\s</target>
        </trans-unit>
        <trans-unit id="8bf81043e29dfc96a6fe1f30f7116f552de6e7d7" translate="yes" xml:space="preserve">
          <source>\t</source>
          <target state="translated">\t</target>
        </trans-unit>
        <trans-unit id="d5d0ebb2740b3e81b5cce512a169118a280bb8cb" translate="yes" xml:space="preserve">
          <source>\v</source>
          <target state="translated">\v</target>
        </trans-unit>
        <trans-unit id="aa5c3d84724b17a06e8486d209463a0cacc3bc46" translate="yes" xml:space="preserve">
          <source>\xXY</source>
          <target state="translated">\xXY</target>
        </trans-unit>
        <trans-unit id="b3bafabd71b5e3f6f0b7e7fff954f28e5b18fb17" translate="yes" xml:space="preserve">
          <source>\x{X...}</source>
          <target state="translated">\x{X...}</target>
        </trans-unit>
        <trans-unit id="910430359def8b6f4101c0bfa3263d48597c76cc" translate="yes" xml:space="preserve">
          <source>_client_channel</source>
          <target state="translated">_client_channel</target>
        </trans-unit>
        <trans-unit id="9944247b429c4be28335eda6279ee22a6fde09de" translate="yes" xml:space="preserve">
          <source>_client_key_api</source>
          <target state="translated">_client_key_api</target>
        </trans-unit>
        <trans-unit id="a259c9cf0e5845c9647dbd0e2cc8ac938ee3ddd7" translate="yes" xml:space="preserve">
          <source>_codec</source>
          <target state="translated">_codec</target>
        </trans-unit>
        <trans-unit id="27ebe2b676fb65035b0da6b71e99f8bdd71439cc" translate="yes" xml:space="preserve">
          <source>_codec_meas</source>
          <target state="translated">_codec_meas</target>
        </trans-unit>
        <trans-unit id="6c13d5ea43d36d761149497241c9063f67e6a398" translate="yes" xml:space="preserve">
          <source>_codec_mstone1</source>
          <target state="translated">_codec_mstone1</target>
        </trans-unit>
        <trans-unit id="e31dc134e3b80e71589f5ac6fad16e099f10b3c4" translate="yes" xml:space="preserve">
          <source>_codec_mstone2</source>
          <target state="translated">_codec_mstone2</target>
        </trans-unit>
        <trans-unit id="90359852ce07bfa97d9689b7aa43e693def3938c" translate="yes" xml:space="preserve">
          <source>_codec_transform</source>
          <target state="translated">_codec_transform</target>
        </trans-unit>
        <trans-unit id="19872913d782be1589e6701b03a7f45da98d1400" translate="yes" xml:space="preserve">
          <source>_collector</source>
          <target state="translated">_collector</target>
        </trans-unit>
        <trans-unit id="95fd16755308c58bf314492a449a1014c914f078" translate="yes" xml:space="preserve">
          <source>_community_mib</source>
          <target state="translated">_community_mib</target>
        </trans-unit>
        <trans-unit id="18e80d5bfae24861611db7385f7013928e5d6e0d" translate="yes" xml:space="preserve">
          <source>_connection</source>
          <target state="translated">_connection</target>
        </trans-unit>
        <trans-unit id="a0a6e30e98ad368e6a56c6efa08b338f8d445a91" translate="yes" xml:space="preserve">
          <source>_crl_cache</source>
          <target state="translated">_crl_cache</target>
        </trans-unit>
        <trans-unit id="7941966cbd72225704aa9bfd459214344268ebb2" translate="yes" xml:space="preserve">
          <source>_crl_cache_api</source>
          <target state="translated">_crl_cache_api</target>
        </trans-unit>
        <trans-unit id="3682fa3f78064956dda27a4bd62f2333444d4b0f" translate="yes" xml:space="preserve">
          <source>_diameters Service Name and Port Number Registration</source>
          <target state="translated">_diametersサービス名とポート番号の登録</target>
        </trans-unit>
        <trans-unit id="c30c34a37e294b320ee5958d661b902bfb44ae53" translate="yes" xml:space="preserve">
          <source>_edist_compress</source>
          <target state="translated">_edist_compress</target>
        </trans-unit>
        <trans-unit id="109b8ec3b51a8766d30cf8ba35a2b40246af0a62" translate="yes" xml:space="preserve">
          <source>_encoder</source>
          <target state="translated">_encoder</target>
        </trans-unit>
        <trans-unit id="8028fc33af10b780f948e45b09f52da447e46fdc" translate="yes" xml:space="preserve">
          <source>_eventp</source>
          <target state="translated">_eventp</target>
        </trans-unit>
        <trans-unit id="82f8180da8217ef3e2205182011fd18fc88f7425" translate="yes" xml:space="preserve">
          <source>_flex_scanner</source>
          <target state="translated">_flex_scanner</target>
        </trans-unit>
        <trans-unit id="991349ac1ce87ece4b2e2145ad4c432f32ef22b4" translate="yes" xml:space="preserve">
          <source>_frag_hash</source>
          <target state="translated">_frag_hash</target>
        </trans-unit>
        <trans-unit id="36e352f7602ed6ff5b4d3c20ca4f2ecd9762f123" translate="yes" xml:space="preserve">
          <source>_framework_mib</source>
          <target state="translated">_framework_mib</target>
        </trans-unit>
        <trans-unit id="bbf74989137c6ab670df736ad7e99665b37bf816" translate="yes" xml:space="preserve">
          <source>_generic</source>
          <target state="translated">_generic</target>
        </trans-unit>
        <trans-unit id="57efb0a40cc309b5df8e44e3bd28362d8dd5749d" translate="yes" xml:space="preserve">
          <source>_index</source>
          <target state="translated">_index</target>
        </trans-unit>
        <trans-unit id="fae34c1b72ed9b8467d52591b2bce86f7231f1ef" translate="yes" xml:space="preserve">
          <source>_notification_mib</source>
          <target state="translated">_notification_mib</target>
        </trans-unit>
        <trans-unit id="4e978448a39ad6264b1335da8913bc80bc35bb4a" translate="yes" xml:space="preserve">
          <source>_registry</source>
          <target state="translated">_registry</target>
        </trans-unit>
        <trans-unit id="9e12eefdf403355bcef74652ad9c69a9e23b92ed" translate="yes" xml:space="preserve">
          <source>_sax_parser</source>
          <target state="translated">_sax_parser</target>
        </trans-unit>
        <trans-unit id="b80362d86e60aad62fc19cd4291b21f9cc5e74d5" translate="yes" xml:space="preserve">
          <source>_selector</source>
          <target state="translated">_selector</target>
        </trans-unit>
        <trans-unit id="928c08775129da2e65f5a26ddd7c047ceca219b0" translate="yes" xml:space="preserve">
          <source>_server_channel</source>
          <target state="translated">_server_channel</target>
        </trans-unit>
        <trans-unit id="03786a0e59ea12891f7d1aafedc1dd322f0a4a75" translate="yes" xml:space="preserve">
          <source>_server_key_api</source>
          <target state="translated">_server_key_api</target>
        </trans-unit>
        <trans-unit id="b8856171bfcbab10cae954cc8871b426fe01d425" translate="yes" xml:space="preserve">
          <source>_session_cache_api</source>
          <target state="translated">_session_cache_api</target>
        </trans-unit>
        <trans-unit id="5ab367fbe50d2be8c17052d34ea7846a858a0823" translate="yes" xml:space="preserve">
          <source>_sftpd</source>
          <target state="translated">_sftpd</target>
        </trans-unit>
        <trans-unit id="36327c474ffb863cd315060f16b646fc9f886d90" translate="yes" xml:space="preserve">
          <source>_standard_mib</source>
          <target state="translated">_standard_mib</target>
        </trans-unit>
        <trans-unit id="fdaf9ee7f1c954d6ec27a2bc4262c918c79d9d43" translate="yes" xml:space="preserve">
          <source>_surefire</source>
          <target state="translated">_surefire</target>
        </trans-unit>
        <trans-unit id="fae159c3bbaacbf232b454a5f598ad5777905bb7" translate="yes" xml:space="preserve">
          <source>_target_mib</source>
          <target state="translated">_target_mib</target>
        </trans-unit>
        <trans-unit id="d5400cfd5df0e2b5888f26e0fcbc79b4733be156" translate="yes" xml:space="preserve">
          <source>_transport</source>
          <target state="translated">_transport</target>
        </trans-unit>
        <trans-unit id="38a498c8bf43f2521df379307eafdd3caf03310c" translate="yes" xml:space="preserve">
          <source>_user_based_sm_mib</source>
          <target state="translated">_user_based_sm_mib</target>
        </trans-unit>
        <trans-unit id="68c989013d882bac18756c204f907b0ced5b51ae" translate="yes" xml:space="preserve">
          <source>_view_based_acm_mib</source>
          <target state="translated">_view_based_acm_mib</target>
        </trans-unit>
        <trans-unit id="623272811c212441ff18fde00b01b6c2dcd21dde" translate="yes" xml:space="preserve">
          <source>_viewer</source>
          <target state="translated">_viewer</target>
        </trans-unit>
        <trans-unit id="ec9274d990f6a819f4992976553663b0387141da" translate="yes" xml:space="preserve">
          <source>_xpath</source>
          <target state="translated">_xpath</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="9209a9399eab62a76dfdee367b13d15ddcddf6a3" translate="yes" xml:space="preserve">
          <source>a &lt;strong&gt;table element&lt;/strong&gt;, which is a special type of scalar variable.</source>
          <target state="translated">&lt;strong&gt;テーブル要素&lt;/strong&gt;スカラー変数の特別なタイプです。</target>
        </trans-unit>
        <trans-unit id="59f850078a1da734ba08cef0859f100fe8981523" translate="yes" xml:space="preserve">
          <source>a description of a Management Information Base (MIB) in Abstract Syntax Notation One (ASN.1)</source>
          <target state="translated">抽象構文記法1(ASN.1)における管理情報ベース(MIB)の記述。</target>
        </trans-unit>
        <trans-unit id="598ba6d6d2150e77bd152dcc13c73aea221d2a5f" translate="yes" xml:space="preserve">
          <source>a list of any of the above, e.g. &lt;code&gt;['file*','../foo/file3','File4']&lt;/code&gt;</source>
          <target state="translated">上記のいずれかのリスト、例えば &lt;code&gt;['file*','../foo/file3','File4']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6aa21f6a27cddec52cbf6694c42d1efd18020bd" translate="yes" xml:space="preserve">
          <source>a mechanism for sending notifications (traps and informs)</source>
          <target state="translated">通知機構</target>
        </trans-unit>
        <trans-unit id="d3f50d1c8c2b43636798e88f62cb7fbbbf750c67" translate="yes" xml:space="preserve">
          <source>a module name in another directory, e.g. &lt;code&gt;../foo/file3&lt;/code&gt;</source>
          <target state="translated">別のディレクトリにあるモジュール名。例： &lt;code&gt;../foo/file3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f8feb36544be17ef62afe31de2e6ba28542d0dc" translate="yes" xml:space="preserve">
          <source>a module name, e.g. &lt;code&gt;file1&lt;/code&gt;</source>
          <target state="translated">モジュール名、例えば &lt;code&gt;file1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2ebaeff8eee87080a90c31f62fb9e00acf1580a" translate="yes" xml:space="preserve">
          <source>a reference to a key in the Engine is available. This should be an Erlang string or binary and depends on the Engine loaded</source>
          <target state="translated">エンジンのキーへの参照が利用可能になります。これはErlangの文字列かバイナリで、ロードされたエンジンに依存します。</target>
        </trans-unit>
        <trans-unit id="b0f536aaf11d6a845928df04b25b502dda74aa22" translate="yes" xml:space="preserve">
          <source>a set of modules specified with a wildcards, e.g. &lt;code&gt;'file*'&lt;/code&gt;</source>
          <target state="translated">ワイルドカードで指定された一連のモジュール（例： &lt;code&gt;'file*'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2142723e842ef520a7459b07b3cc5f339a0aa9ea" translate="yes" xml:space="preserve">
          <source>a simple and extensible model for transaction handling and consistency checking of set-requests</source>
          <target state="translated">セット要求のトランザクション処理と一貫性チェックのためのシンプルで拡張可能なモデル</target>
        </trans-unit>
        <trans-unit id="38f6085046e882c0a7a04cd899fe5a545baf84b3" translate="yes" xml:space="preserve">
          <source>a wildcard indicating all modules in current directory, i.e. &lt;code&gt;'*'&lt;/code&gt;</source>
          <target state="translated">現在のディレクトリ内のすべてのモジュールを示すワイルドカード、つまり &lt;code&gt;'*'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8b64c78e460148bffaf38c45ea356ef93872bfc" translate="yes" xml:space="preserve">
          <source>a_conf</source>
          <target state="translated">a_conf</target>
        </trans-unit>
        <trans-unit id="c7b8738431983fe29472fb70a8178a2b46e97bbb" translate="yes" xml:space="preserve">
          <source>a_discovery_handler</source>
          <target state="translated">a_discovery_handler</target>
        </trans-unit>
        <trans-unit id="93100c315fb6a4a680b80c6ef74e3b42901b4ef6" translate="yes" xml:space="preserve">
          <source>a_error</source>
          <target state="translated">a_error</target>
        </trans-unit>
        <trans-unit id="91cdbf281b85512304d2e4aa00cc84b0a7116cc8" translate="yes" xml:space="preserve">
          <source>a_error_io</source>
          <target state="translated">a_error_io</target>
        </trans-unit>
        <trans-unit id="a9a69b4ef7c8a631b988528c71a8fb229b7342ab" translate="yes" xml:space="preserve">
          <source>a_error_logger</source>
          <target state="translated">a_error_logger</target>
        </trans-unit>
        <trans-unit id="d58660a063e19d1e165103417ccafc244fe6c4fa" translate="yes" xml:space="preserve">
          <source>a_error_report</source>
          <target state="translated">a_error_report</target>
        </trans-unit>
        <trans-unit id="15d1631bb10bca396a6313726844ca91b666c395" translate="yes" xml:space="preserve">
          <source>a_function(Tuples) -&amp;gt; Function</source>
          <target state="translated">a_function（Tuples）-&amp;gt;関数</target>
        </trans-unit>
        <trans-unit id="90ae25b7a163dfe99700824480bc8489041602ee" translate="yes" xml:space="preserve">
          <source>a_function(Tuples, Type) -&amp;gt; Function</source>
          <target state="translated">a_function（タプル、タイプ）-&amp;gt;関数</target>
        </trans-unit>
        <trans-unit id="6c78c23fcc9749492f0e95659d009aacbd0b549b" translate="yes" xml:space="preserve">
          <source>a_local_db</source>
          <target state="translated">a_local_db</target>
        </trans-unit>
        <trans-unit id="4d9fa8f6f06a58c228ab59428061a559afd4d349" translate="yes" xml:space="preserve">
          <source>a_mib_data</source>
          <target state="translated">a_mib_data</target>
        </trans-unit>
        <trans-unit id="b98e8d4d40c0f85d0e5453795eac17c1117970c5" translate="yes" xml:space="preserve">
          <source>a_mib_storage</source>
          <target state="translated">a_mib_storage</target>
        </trans-unit>
        <trans-unit id="33fb33f4be736b0342549eb4b0f40a121541761c" translate="yes" xml:space="preserve">
          <source>a_network_interface</source>
          <target state="translated">a_network_interface</target>
        </trans-unit>
        <trans-unit id="c89366d95a71167b5f2acc9361247e07b3d68c83" translate="yes" xml:space="preserve">
          <source>a_network_interface_filter</source>
          <target state="translated">a_network_interface_filter</target>
        </trans-unit>
        <trans-unit id="965e9121d01780b225ad12e277a002a60a1deb93" translate="yes" xml:space="preserve">
          <source>a_notification_delivery_info_receiver</source>
          <target state="translated">a_notification_delivery_info_receiver</target>
        </trans-unit>
        <trans-unit id="e470655cfa14cf813f61bb23d74e82172ceb0adb" translate="yes" xml:space="preserve">
          <source>a_notification_filter</source>
          <target state="translated">a_notification_filter</target>
        </trans-unit>
        <trans-unit id="38858de9533084e156dfb13fbf7c902544855905" translate="yes" xml:space="preserve">
          <source>a_supervisor</source>
          <target state="translated">a_supervisor</target>
        </trans-unit>
        <trans-unit id="49b2bcc09405df13855e7497804d2f4d6b1694b9" translate="yes" xml:space="preserve">
          <source>abcast(Name, Msg) -&amp;gt; abcast</source>
          <target state="translated">abcast（Name、Msg）-&amp;gt; abcast</target>
        </trans-unit>
        <trans-unit id="2635da48392751f2fcd42d1a6423fda958353f98" translate="yes" xml:space="preserve">
          <source>abcast(Nodes, Name, Msg) -&amp;gt; abcast</source>
          <target state="translated">abcast（Nodes、Name、Msg）-&amp;gt; abcast</target>
        </trans-unit>
        <trans-unit id="09e9564e661cbe8ce66fe209e78ec306eabd9752" translate="yes" xml:space="preserve">
          <source>abort(Socket, Assoc) -&amp;gt; ok | {error, &lt;code&gt;&lt;a href=&quot;inet#type-posix&quot;&gt;inet:posix()&lt;/a&gt;&lt;/code&gt;}</source>
          <target state="translated">abort（Socket、Assoc）-&amp;gt; ok | {エラー、 &lt;code&gt;&lt;a href=&quot;inet#type-posix&quot;&gt;inet:posix()&lt;/a&gt;&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="c3c8890721b3c655c531f48de57de28fdc6630a5" translate="yes" xml:space="preserve">
          <source>abs(Float) -&amp;gt; float()</source>
          <target state="translated">abs（Float）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="cf11c8b1d7379471b7d904cd217e8ce582257a2e" translate="yes" xml:space="preserve">
          <source>abs(Int) -&amp;gt; integer() &amp;gt;= 0</source>
          <target state="translated">abs（Int）-&amp;gt; integer（）&amp;gt; = 0</target>
        </trans-unit>
        <trans-unit id="4ae90431e45cb5bb0df1f957e38644b03ceaca91" translate="yes" xml:space="preserve">
          <source>absname(Filename) -&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</source>
          <target state="translated">absname（Filename）-&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4dadb80572d787a2a2876e8d9bdff30e554ed4e1" translate="yes" xml:space="preserve">
          <source>absname(Filename, Dir) -&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</source>
          <target state="translated">absname（Filename、Dir）-&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0caa322bfeb0dc87a2f34fec852074656296ce2" translate="yes" xml:space="preserve">
          <source>absname_join(Dir, Filename) -&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</source>
          <target state="translated">absname_join（Dir、Filename）-&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="532a2994137354b8940205950971da0a8bd9b1a6" translate="yes" xml:space="preserve">
          <source>abstract(Data) -&amp;gt; AbsTerm</source>
          <target state="translated">抽象（データ）-&amp;gt; AbsTerm</target>
        </trans-unit>
        <trans-unit id="6558389c79dfad53c8f95ec9a11e7d158122c8e3" translate="yes" xml:space="preserve">
          <source>abstract(Data, Options) -&amp;gt; AbsTerm</source>
          <target state="translated">抽象（データ、オプション）-&amp;gt; AbsTerm</target>
        </trans-unit>
        <trans-unit id="6f744acd95bd2bf36b1388a10744a694c3d9d9fa" translate="yes" xml:space="preserve">
          <source>accept(ListenSocket) -&amp;gt; {ok, Socket} | {error, Reason}</source>
          <target state="translated">accept（ListenSocket）-&amp;gt; {ok、Socket} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="7459bc4b9c5cdae9838af1a0697e470d695a1761" translate="yes" xml:space="preserve">
          <source>accept(ListenSocket, Timeout) -&amp;gt; {ok, Socket} | {error, Reason}</source>
          <target state="translated">accept（ListenSocket、Timeout）-&amp;gt; {ok、Socket} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="9f231959406861cc11841f428e5c83cf8ebc7abd" translate="yes" xml:space="preserve">
          <source>access control</source>
          <target state="translated">アクセス制御</target>
        </trans-unit>
        <trans-unit id="48be7659e77f020ad29782ad8c3ca981c8efca50" translate="yes" xml:space="preserve">
          <source>accessible_logs() -&amp;gt; {[LocalLog], [DistributedLog]}</source>
          <target state="translated">accessibility_logs（）-&amp;gt; {[LocalLog]、[DistributedLog]}</target>
        </trans-unit>
        <trans-unit id="35fba5bc784d45ba80fc856041cec697067dead0" translate="yes" xml:space="preserve">
          <source>acos(X) -&amp;gt; float()</source>
          <target state="translated">acos（X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="1ddb6bfe54948f1f86d652c905651fc94ff04b0d" translate="yes" xml:space="preserve">
          <source>acosh(X) -&amp;gt; float()</source>
          <target state="translated">acosh（X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="6218de7b88db2b268c25eec6e0b07eafa450cabf" translate="yes" xml:space="preserve">
          <source>action must be taken immediately</source>
          <target state="translated">直ちに行動を起こさなければならない</target>
        </trans-unit>
        <trans-unit id="e394f08f2e8d57232cd2ae1777a3230db3bf9ec4" translate="yes" xml:space="preserve">
          <source>action(Client, Action) -&amp;gt; Result</source>
          <target state="translated">action（Client、Action）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="3bb1bdbfd67ce20857fa7c017e6f6426a3633f0f" translate="yes" xml:space="preserve">
          <source>action(Client, Action, Timeout) -&amp;gt; Result</source>
          <target state="translated">action（クライアント、アクション、タイムアウト）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="c4eb246cd0b6bce10dc9b716021941ad855f1ca9" translate="yes" xml:space="preserve">
          <source>active_filter - collector.</source>
          <target state="translated">active_filter-コレクター。</target>
        </trans-unit>
        <trans-unit id="4615c92e5c305c827a68665438ef70606004cff6" translate="yes" xml:space="preserve">
          <source>actors - [&quot;UNKNOWN&quot;].</source>
          <target state="translated">actors-[&quot;UNKNOWN&quot;]。</target>
        </trans-unit>
        <trans-unit id="6576cc357b960d4b0c83d38a9e07d2d605de6677" translate="yes" xml:space="preserve">
          <source>adaption of legacy equipment</source>
          <target state="translated">レガシー機器の適応</target>
        </trans-unit>
        <trans-unit id="4ea2abb73535206ef92d517cb876b6300f152df8" translate="yes" xml:space="preserve">
          <source>add(Element, Set1) -&amp;gt; Set2</source>
          <target state="translated">add（Element、Set1）-&amp;gt; Set2</target>
        </trans-unit>
        <trans-unit id="e7670b41b68f186df0e13666cf646588f19eb634" translate="yes" xml:space="preserve">
          <source>add_binding(Name, Value, BindingStruct) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-binding_struct&quot;&gt;binding_struct()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">add_binding（Name、Value、BindingStruct）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-binding_struct&quot;&gt;binding_struct()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0f3678a7f18b0a89514fe10fe9362d9d4535110c" translate="yes" xml:space="preserve">
          <source>add_edge(G, E, V1, V2, Label) -&amp;gt;</source>
          <target state="translated">add_edge（G、E、V1、V2、ラベル）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d1ec2a372a413447ea97d64f426b1b39de3ff9cf" translate="yes" xml:space="preserve">
          <source>add_edge(G, V1, V2) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-edge&quot;&gt;edge()&lt;/a&gt;&lt;/code&gt; | {error, add_edge_err_rsn()}</source>
          <target state="translated">add_edge（G、V1、V2）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-edge&quot;&gt;edge()&lt;/a&gt;&lt;/code&gt; | {エラー、add_edge_err_rsn（）}</target>
        </trans-unit>
        <trans-unit id="b3400458091cf48e0059fd116ba45d3087b097dc" translate="yes" xml:space="preserve">
          <source>add_edge(G, V1, V2, Label) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-edge&quot;&gt;edge()&lt;/a&gt;&lt;/code&gt; | {error, add_edge_err_rsn()}</source>
          <target state="translated">add_edge（G、V1、V2、Label）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-edge&quot;&gt;edge()&lt;/a&gt;&lt;/code&gt; | {エラー、add_edge_err_rsn（）}</target>
        </trans-unit>
        <trans-unit id="520109a15ec095a2d9cde3be2dc14cfdcfdc1264" translate="yes" xml:space="preserve">
          <source>add_element(Element, Ordset1) -&amp;gt; Ordset2</source>
          <target state="translated">add_element（Element、Ordset1）-&amp;gt; Ordset2</target>
        </trans-unit>
        <trans-unit id="2f2b3fb1df1f53380cfed1136cf60fddd69e4719" translate="yes" xml:space="preserve">
          <source>add_element(Element, Set1) -&amp;gt; Set2</source>
          <target state="translated">add_element（Element、Set1）-&amp;gt; Set2</target>
        </trans-unit>
        <trans-unit id="87a29e323bc1897e8be4ff18e6d34334075045cf" translate="yes" xml:space="preserve">
          <source>add_handler(HandlerId, Module, Config) -&amp;gt; ok | {error, term()}</source>
          <target state="translated">add_handler（HandlerId、Module、Config）-&amp;gt; ok | {エラー、用語（）}</target>
        </trans-unit>
        <trans-unit id="0d5ba58c0fad9b0a1d5a381557c1515d28ba9802" translate="yes" xml:space="preserve">
          <source>add_handler_filter(HandlerId, FilterId, Filter) -&amp;gt;</source>
          <target state="translated">add_handler_filter（HandlerId、FilterId、Filter）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="fa5e7b0fea542972df9d4c2bd6c67c59b0465cff" translate="yes" xml:space="preserve">
          <source>add_handlers(Application) -&amp;gt; ok | {error, term()}</source>
          <target state="translated">add_handlers（Application）-&amp;gt; ok | {エラー、用語（）}</target>
        </trans-unit>
        <trans-unit id="62f2cab368c614ca8d746ffcd7dc56d70c13fa37" translate="yes" xml:space="preserve">
          <source>add_handlers(HandlerConfig) -&amp;gt; ok | {error, term()}</source>
          <target state="translated">add_handlers（HandlerConfig）-&amp;gt; ok | {エラー、用語（）}</target>
        </trans-unit>
        <trans-unit id="f23261944662c692d5bb80b52bcc2021c3e5a8c0" translate="yes" xml:space="preserve">
          <source>add_path(Dir) -&amp;gt; add_path_ret()</source>
          <target state="translated">add_path（Dir）-&amp;gt; add_path_ret（）</target>
        </trans-unit>
        <trans-unit id="2be842d431a9d86c5d96e60664cacb61f61e0a93" translate="yes" xml:space="preserve">
          <source>add_patha(Dir) -&amp;gt; add_path_ret()</source>
          <target state="translated">add_patha（Dir）-&amp;gt; add_path_ret（）</target>
        </trans-unit>
        <trans-unit id="ae26e9dbabe45af85669f9252e4f17339825692f" translate="yes" xml:space="preserve">
          <source>add_paths(Dirs) -&amp;gt; ok</source>
          <target state="translated">add_paths（Dirs）-&amp;gt; ok</target>
        </trans-unit>
        <trans-unit id="a989d2b4d60c99c25823c188d803b4f82e3bf36f" translate="yes" xml:space="preserve">
          <source>add_pathsa(Dirs) -&amp;gt; ok</source>
          <target state="translated">add_pathsa（Dirs）-&amp;gt; ok</target>
        </trans-unit>
        <trans-unit id="0c35ea2dbcb9fa9aa6ce31b9d307c09bbdf6def6" translate="yes" xml:space="preserve">
          <source>add_pathsz(Dirs) -&amp;gt; ok</source>
          <target state="translated">add_pathsz（Dirs）-&amp;gt; ok</target>
        </trans-unit>
        <trans-unit id="2e0ce42350675083063f18cce7bd9049c7e38f9d" translate="yes" xml:space="preserve">
          <source>add_pathz(Dir) -&amp;gt; add_path_ret()</source>
          <target state="translated">add_pathz（Dir）-&amp;gt; add_path_ret（）</target>
        </trans-unit>
        <trans-unit id="ee9d98e37a8b9c161685fea136a45b92224e29a0" translate="yes" xml:space="preserve">
          <source>add_predefined_functions(Forms) -&amp;gt; UpdatedForms</source>
          <target state="translated">add_predefined_functions（Forms）-&amp;gt; UpdatedForms</target>
        </trans-unit>
        <trans-unit id="7bc1b31fc59f768dcba6d6bd411ae48685b68b5d" translate="yes" xml:space="preserve">
          <source>add_primary_filter(FilterId, Filter) -&amp;gt; ok | {error, term()}</source>
          <target state="translated">add_primary_filter（FilterId、Filter）-&amp;gt; ok | {エラー、用語（）}</target>
        </trans-unit>
        <trans-unit id="39dc9598bdd4ada4f624d8a7d464fc2d4ce27b58" translate="yes" xml:space="preserve">
          <source>add_report_handler(Handler) -&amp;gt; any()</source>
          <target state="translated">add_report_handler（Handler）-&amp;gt; any（）</target>
        </trans-unit>
        <trans-unit id="cec820a5714d57bdee8e6697687e51e5b2b8a644" translate="yes" xml:space="preserve">
          <source>add_report_handler(Handler, Args) -&amp;gt; Result</source>
          <target state="translated">add_report_handler（Handler、Args）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="a2ed2e0d7b9fccc6df085a54a049cf086b9e465c" translate="yes" xml:space="preserve">
          <source>add_slave(Slave) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">add_slave（Slave）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="01168eb23addf2838560909bef241c0ed5c7956c" translate="yes" xml:space="preserve">
          <source>add_vertex(G) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-vertex&quot;&gt;vertex()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">add_vertex（G）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-vertex&quot;&gt;vertex()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="94e175a3210d4edf403441f0831e94cf9e1f2f83" translate="yes" xml:space="preserve">
          <source>add_vertex(G, V) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-vertex&quot;&gt;vertex()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">add_vertex（G、V）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-vertex&quot;&gt;vertex()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bc1cc55319fe45c237035802a9c25d46cda395c" translate="yes" xml:space="preserve">
          <source>add_vertex(G, V, Label) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-vertex&quot;&gt;vertex()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">add_vertex（G、V、Label）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-vertex&quot;&gt;vertex()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6cde5dd472003faf1e7928417ca9aaa15af6ca28" translate="yes" xml:space="preserve">
          <source>address_please(Name, Host, AddressFamily) -&amp;gt;</source>
          <target state="translated">address_please（Name、Host、AddressFamily）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e1c203fab2eb01eaddc506ebbf05b11bd8ee3314" translate="yes" xml:space="preserve">
          <source>adler32(Z, Data) -&amp;gt; CheckSum</source>
          <target state="translated">adler32（Z、Data）-&amp;gt; CheckSum</target>
        </trans-unit>
        <trans-unit id="3010be9abd4e9e4f1ecc88483a5a41b8715785ab" translate="yes" xml:space="preserve">
          <source>adler32(Z, PrevAdler, Data) -&amp;gt; CheckSum</source>
          <target state="translated">adler32（Z、PrevAdler、Data）-&amp;gt;チェックサム</target>
        </trans-unit>
        <trans-unit id="cee36dab124305111bb43143f8ae42ab4996ca52" translate="yes" xml:space="preserve">
          <source>adler32_combine(Z, Adler1, Adler2, Size2) -&amp;gt; Adler</source>
          <target state="translated">adler32_combine（Z、Adler1、Adler2、Size2）-&amp;gt; Adler</target>
        </trans-unit>
        <trans-unit id="ef820fbff8a2936b677933f9e0b8e10d95885a16" translate="yes" xml:space="preserve">
          <source>advise(IoDevice, Offset, Length, Advise) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">Advice（IoDevice、Offset、Length、Advise）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="22c354cca6642d17574452dcfad93f851b24844c" translate="yes" xml:space="preserve">
          <source>agent/2, agent/3</source>
          <target state="translated">エージェント2、エージェント3</target>
        </trans-unit>
        <trans-unit id="e6eae4997a31e489ef041df5587d3ef4adc39fe4" translate="yes" xml:space="preserve">
          <source>alarm_handler</source>
          <target state="translated">alarm_handler</target>
        </trans-unit>
        <trans-unit id="8f1dba76b561684930a25a984046b3b4149785ca" translate="yes" xml:space="preserve">
          <source>alert</source>
          <target state="translated">alert</target>
        </trans-unit>
        <trans-unit id="a9957d965ac5d06bae0744f6022b4f0ca588006b" translate="yes" xml:space="preserve">
          <source>all of the matched subject is captured, as well as the captured substrings:</source>
          <target state="translated">は、キャプチャされた部分文字列と同様に、マッチした被写体のすべてをキャプチャします。</target>
        </trans-unit>
        <trans-unit id="864e8b3eb2304ca23a7d18d8972363d24eac0cf9" translate="yes" xml:space="preserve">
          <source>all() -&amp;gt; [&lt;code&gt;&lt;a href=&quot;#type-tab_name&quot;&gt;tab_name()&lt;/a&gt;&lt;/code&gt;]</source>
          <target state="translated">all（）-&amp;gt; [ &lt;code&gt;&lt;a href=&quot;#type-tab_name&quot;&gt;tab_name()&lt;/a&gt;&lt;/code&gt; ]</target>
        </trans-unit>
        <trans-unit id="f540653e3159efabb2a32bc0522b5fd2ab1ef283" translate="yes" xml:space="preserve">
          <source>all() -&amp;gt; [Tab]</source>
          <target state="translated">all（）-&amp;gt; [タブ]</target>
        </trans-unit>
        <trans-unit id="cd7fb59dea50d667b37c820c0721a759d6368257" translate="yes" xml:space="preserve">
          <source>all(Pred, List) -&amp;gt; boolean()</source>
          <target state="translated">all（Pred、List）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="013111e46b6bc8d4cf365655d47bd8f012ed4da4" translate="yes" xml:space="preserve">
          <source>all_chunks(File :: &lt;code&gt;&lt;a href=&quot;#type-beam&quot;&gt;beam()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">all_chunks（ファイル:: &lt;code&gt;&lt;a href=&quot;#type-beam&quot;&gt;beam()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ed8099cee729b1e25df63173ad72ff29f7628701" translate="yes" xml:space="preserve">
          <source>all_loaded() -&amp;gt; [{Module, Loaded}]</source>
          <target state="translated">all_loaded（）-&amp;gt; [{モジュール、ロード済み}]</target>
        </trans-unit>
        <trans-unit id="265de813a6c960a6f9ad0f7fa192e948a567684d" translate="yes" xml:space="preserve">
          <source>allocate(File, Offset, Length) -&amp;gt; ok | {error, &lt;code&gt;&lt;a href=&quot;#type-posix&quot;&gt;posix()&lt;/a&gt;&lt;/code&gt;}</source>
          <target state="translated">allocate（File、Offset、Length）-&amp;gt; ok | {エラー、 &lt;code&gt;&lt;a href=&quot;#type-posix&quot;&gt;posix()&lt;/a&gt;&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="e1b292e4b425c6abd7984973b874e7320b69e75c" translate="yes" xml:space="preserve">
          <source>allocations() -&amp;gt; {ok, Result} | {error, Reason}</source>
          <target state="translated">allocations（）-&amp;gt; {ok、Result} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="9b58e1de9a88d7f5893c209e77fc394d05c88fef" translate="yes" xml:space="preserve">
          <source>allocations(Options) -&amp;gt; {ok, Result} | {error, Reason}</source>
          <target state="translated">割り当て（オプション）-&amp;gt; {ok、Result} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="2d02b2c6b5a98ba505a2a2fcd003460b7b6a904e" translate="yes" xml:space="preserve">
          <source>allow(Nodes) -&amp;gt; ok | error</source>
          <target state="translated">allow（Nodes）-&amp;gt; ok | エラー</target>
        </trans-unit>
        <trans-unit id="65ec21073e5df85f4cd2d347361fd4bcb869132c" translate="yes" xml:space="preserve">
          <source>alog(Log, Term) -&amp;gt; notify_ret()</source>
          <target state="translated">alog（Log、Term）-&amp;gt; notify_ret（）</target>
        </trans-unit>
        <trans-unit id="e014ae0ef6b7946a6d70ba6d9e45669ea868563a" translate="yes" xml:space="preserve">
          <source>alog_terms(Log, TermList) -&amp;gt; notify_ret()</source>
          <target state="translated">alog_terms（Log、TermList）-&amp;gt; notify_ret（）</target>
        </trans-unit>
        <trans-unit id="1c8519a743ba01d2496091da12f2feb9a9d51b37" translate="yes" xml:space="preserve">
          <source>already cancelled</source>
          <target state="translated">打ち切り</target>
        </trans-unit>
        <trans-unit id="d431a6acd8a5a35fc2ba1662a48f31a4a4c97b7e" translate="yes" xml:space="preserve">
          <source>already triggered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad1be4ebf56132018a4efb30adc2a5b336148fb" translate="yes" xml:space="preserve">
          <source>alternatively:</source>
          <target state="translated">alternatively:</target>
        </trans-unit>
        <trans-unit id="2fdac3c4a49bed868038fdabc46d931d0bd0436e" translate="yes" xml:space="preserve">
          <source>an Engine is loaded, see the chapter on &lt;code&gt;Engine Load&lt;/code&gt; or the &lt;code&gt;Reference Manual&lt;/code&gt;</source>
          <target state="translated">エンジンがロードされている場合は、 &lt;code&gt;Engine Load&lt;/code&gt; の章または &lt;code&gt;Reference Manual&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="781dc5e7288030786fc67dccaa94d77c5f4521e6" translate="yes" xml:space="preserve">
          <source>an Erlang map is constructed with the Engine reference, the key reference and possibly a key passphrase if needed by the Engine. See the &lt;code&gt;Reference Manual&lt;/code&gt; for details of the map.</source>
          <target state="translated">Erlangマップは、エンジン参照、キー参照、およびエンジンで必要な場合はキーパスフレーズで構築されます。マップの詳細については、 &lt;code&gt;Reference Manual&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3558d78e025d73eec1204da3a205506c6a34cdf8" translate="yes" xml:space="preserve">
          <source>an include file has been modified since the source file was last compiled.</source>
          <target state="translated">ソースファイルが最後にコンパイルされてからインクルードファイルが変更されている場合。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="a2e7f10c2cc920d2e5cd26d567b470c641505d9d" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;Domain&lt;/code&gt; differs from &lt;code&gt;MatchDomain&lt;/code&gt;, or if there is no domain field in metadata.</source>
          <target state="translated">および &lt;code&gt;Domain&lt;/code&gt; が &lt;code&gt;MatchDomain&lt;/code&gt; と異なるか、メタデータにドメインフィールドがない場合。</target>
        </trans-unit>
        <trans-unit id="23f0594083a5da8b10e8a2ab26298e8675aa6721" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;Domain&lt;/code&gt; is equal to &lt;code&gt;MatchDomain&lt;/code&gt;.</source>
          <target state="translated">そして &lt;code&gt;Domain&lt;/code&gt; に等しい &lt;code&gt;MatchDomain&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5651ee4ec1efdba8d30f06606338f7dbc9b0a3d7" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;Domain&lt;/code&gt; is equal to or a sub-domain of &lt;code&gt;MatchDomain&lt;/code&gt;, that is, if &lt;code&gt;MatchDomain&lt;/code&gt; is a prefix of &lt;code&gt;Domain&lt;/code&gt;.</source>
          <target state="translated">そして &lt;code&gt;Domain&lt;/code&gt; のサブドメイン又はに等しい &lt;code&gt;MatchDomain&lt;/code&gt; 場合、であり、 &lt;code&gt;MatchDomain&lt;/code&gt; での接頭辞である &lt;code&gt;Domain&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c37d2503a3ba7f64eff085561405608469c092d1" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;Domain&lt;/code&gt; is equal to or a super-domain of &lt;code&gt;MatchDomain&lt;/code&gt;, that is, if &lt;code&gt;Domain&lt;/code&gt; is a prefix of &lt;code&gt;MatchDomain&lt;/code&gt;.</source>
          <target state="translated">そして、 &lt;code&gt;Domain&lt;/code&gt; のスーパードメインまたはに等しい &lt;code&gt;MatchDomain&lt;/code&gt; 場合、ある、 &lt;code&gt;Domain&lt;/code&gt; 接頭辞である &lt;code&gt;MatchDomain&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85650a2303153176b2d32ef0359aa6966910b56d" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;P&lt;/code&gt; is a tuple, the &lt;code&gt;qlc&lt;/code&gt; module analyzes &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; in compile time to find positions of tuple &lt;code&gt;P&lt;/code&gt; that are tested for equality to constants. If such a position at runtime turns out to be the key position, the lookup function can be used, otherwise all objects of the table must be traversed. The info function &lt;code&gt;InfoFun&lt;/code&gt; returns the key position. There can be indexed positions as well, also returned by the info function. An index is an extra table that makes lookup on some position fast. Mnesia maintains indexes upon request, and introduces so called secondary keys. The &lt;code&gt;qlc&lt;/code&gt; module prefers to look up objects using the key before secondary keys regardless of the number of constants to look up.</source>
          <target state="translated">そして &lt;code&gt;P&lt;/code&gt; はタプルである &lt;code&gt;qlc&lt;/code&gt; モジュール分析 &lt;code&gt;P&lt;/code&gt; と &lt;code&gt;F&lt;/code&gt; タプルの位置を見つけるために、コンパイル時に &lt;code&gt;P&lt;/code&gt; 定数に等しいかどうかテストされます。実行時のそのような位置がキーの位置であることが判明した場合は、ルックアップ関数を使用できます。そうでない場合は、テーブルのすべてのオブジェクトをトラバースする必要があります。情報関数 &lt;code&gt;InfoFun&lt;/code&gt; はキーの位置を返します。インデックス付きの位置もあり、info関数によって返されます。インデックスは、特定の位置での検索を高速にする追加のテーブルです。Mnesiaはリクエストに応じてインデックスを維持し、いわゆるセカンダリキーを導入します。 &lt;code&gt;qlc&lt;/code&gt; モジュールは、検索する定数の数に関係なく、セカンダリキーの前にキーを使用してオブジェクトを検索することを好みます。</target>
        </trans-unit>
        <trans-unit id="a092140407d1d0bdcf6c0a8081368ead5e8d13e1" translate="yes" xml:space="preserve">
          <source>and after a while Erlang/OTP-21 will have been installed in &lt;code&gt;C:\Program Files\erl10.0\&lt;/code&gt;, with shortcuts in the menu etc.</source>
          <target state="translated">しばらくすると、Erlang / OTP-21が &lt;code&gt;C:\Program Files\erl10.0\&lt;/code&gt; にインストールされ、メニューにショートカットが表示されます。</target>
        </trans-unit>
        <trans-unit id="0c09e2e9338eecd9d58d7ec35b3de798f274a0d1" translate="yes" xml:space="preserve">
          <source>and finally, &lt;code&gt;&quot;when _@__@Guard -&amp;gt;&quot;&lt;/code&gt; will match any clause, binding &lt;code&gt;Guard&lt;/code&gt; to &lt;code&gt;[]&lt;/code&gt; if the guard is empty and to &lt;code&gt;[Disjunction]&lt;/code&gt; otherwise</source>
          <target state="translated">そして最後に、 &lt;code&gt;&quot;when _@__@Guard -&amp;gt;&quot;&lt;/code&gt; 結合、任意の句と一致します &lt;code&gt;Guard&lt;/code&gt; する &lt;code&gt;[]&lt;/code&gt; ガードが空である場合とに &lt;code&gt;[Disjunction]&lt;/code&gt; そう</target>
        </trans-unit>
        <trans-unit id="b7ebb6f00f745a17b7a50b25f230dae062785e2b" translate="yes" xml:space="preserve">
          <source>and finaly what the SSH app implements</source>
          <target state="translated">そして最後にSSHアプリが実装しているもの</target>
        </trans-unit>
        <trans-unit id="64f96460c8f9bfc4a2fdf3a7dd31c2ba9418a902" translate="yes" xml:space="preserve">
          <source>and motorcycles.dtd looks like:</source>
          <target state="translated">とバイク.dtdのように見えます。</target>
        </trans-unit>
        <trans-unit id="6d491e274919486aef4d4bbdb353bb3e22c7d8ca" translate="yes" xml:space="preserve">
          <source>and sometimes</source>
          <target state="translated">時には</target>
        </trans-unit>
        <trans-unit id="46fd59de2909ece56f52284188694c3a52dbcbe7" translate="yes" xml:space="preserve">
          <source>and that:</source>
          <target state="translated">と、それはそれは。</target>
        </trans-unit>
        <trans-unit id="75c005f32e8885c088986480f71cba8346ce540d" translate="yes" xml:space="preserve">
          <source>and the compare function returns &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">そして、compare関数は &lt;code&gt;eq&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="08366225fe44bcd5d81c51c77de9b9231dab0b84" translate="yes" xml:space="preserve">
          <source>and the compare function returns &lt;code&gt;gt&lt;/code&gt; or &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">そして、compare関数は &lt;code&gt;gt&lt;/code&gt; または &lt;code&gt;eq&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c29b958aebaf91eaa4b4fc0e383d015e20d4a631" translate="yes" xml:space="preserve">
          <source>and the compare function returns &lt;code&gt;gt&lt;/code&gt;.</source>
          <target state="translated">そして、compare関数は &lt;code&gt;gt&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="004da623dc23abbc77bdc9ccae266580dab903af" translate="yes" xml:space="preserve">
          <source>and the compare function returns &lt;code&gt;lt&lt;/code&gt; or &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">そして、compare関数は &lt;code&gt;lt&lt;/code&gt; または &lt;code&gt;eq&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fafca81c05db8361dd5e261c3aaa8ec8c79d2de8" translate="yes" xml:space="preserve">
          <source>and the compare function returns &lt;code&gt;lt&lt;/code&gt; or &lt;code&gt;gt&lt;/code&gt;.</source>
          <target state="translated">そして、compare関数は &lt;code&gt;lt&lt;/code&gt; または &lt;code&gt;gt&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c27967e0d82144b5cd16de71839fe2cf85c0c165" translate="yes" xml:space="preserve">
          <source>and the compare function returns &lt;code&gt;lt&lt;/code&gt;.</source>
          <target state="translated">そして、compare関数は &lt;code&gt;lt&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c1b700757b2c3a8a734178e043e69f30937c6fd6" translate="yes" xml:space="preserve">
          <source>and then make sure that every module of your application includes that header file. This means that you have a only a single place to modify in order to change the default setting for testing. To override the &lt;code&gt;NOTEST&lt;/code&gt; setting without modifying the code, you can define &lt;code&gt;TEST&lt;/code&gt; in a compiler option, like this:</source>
          <target state="translated">次に、アプリケーションのすべてのモジュールにそのヘッダーファイルが含まれていることを確認します。これは、テストのデフォルト設定を変更するために変更できる場所が1つしかないことを意味します。コードを変更せずに &lt;code&gt;NOTEST&lt;/code&gt; 設定をオーバーライドするには、次のようにコンパイラオプションで &lt;code&gt;TEST&lt;/code&gt; を定義できます。</target>
        </trans-unit>
        <trans-unit id="7d0ecfa1634b0abb29975802f12a9ca3ec96e9f2" translate="yes" xml:space="preserve">
          <source>and there is no domain field in metadata. In this case &lt;code&gt;MatchDomain&lt;/code&gt; must be set to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">メタデータにドメインフィールドはありません。この場合、 &lt;code&gt;MatchDomain&lt;/code&gt; を &lt;code&gt;[]&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="15776e659486167076d3cb321fce2312d24fb803" translate="yes" xml:space="preserve">
          <source>and there must be spaces around &lt;code&gt;=&lt;/code&gt;. Macros can be used in the regular expressions of rules by writing &lt;code&gt;{NAME}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; の周りにスペースが必要です。マクロは、 &lt;code&gt;{NAME}&lt;/code&gt; を記述することにより、ルールの正規表現で使用できます。</target>
        </trans-unit>
        <trans-unit id="4e07a5c56ecbb0097ee8073f245a7172ebf9eb4a" translate="yes" xml:space="preserve">
          <source>and to start</source>
          <target state="translated">と開始するために</target>
        </trans-unit>
        <trans-unit id="36894c0e7fe357f11b9f44b6a70c4ab817c3a65b" translate="yes" xml:space="preserve">
          <source>and you also need to change the PATH environment variable to:</source>
          <target state="translated">に変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="7914f3693a7b7d05ec42de24054fef2cb7500c57" translate="yes" xml:space="preserve">
          <source>and, of course, also make sure that you place all test code that uses EUnit macros within &lt;code&gt;-ifdef(TEST)&lt;/code&gt; or &lt;code&gt;-ifdef(EUNIT)&lt;/code&gt; sections.</source>
          <target state="translated">そしてもちろん、EUnitマクロを使用するすべてのテストコードを &lt;code&gt;-ifdef(TEST)&lt;/code&gt; または &lt;code&gt;-ifdef(EUNIT)&lt;/code&gt; セクション内に配置してください。</target>
        </trans-unit>
        <trans-unit id="03437c3d563b9905c8c35ef6b7a9b572fef4c3f9" translate="yes" xml:space="preserve">
          <source>andalso</source>
          <target state="translated">andalso</target>
        </trans-unit>
        <trans-unit id="578f286f6ab178c50892f36a4fad7b4aa9f05750" translate="yes" xml:space="preserve">
          <source>anno_from_term(Term) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-erl_parse_tree&quot;&gt;erl_parse_tree()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#type-form_info&quot;&gt;form_info()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">anno_from_term（用語）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-erl_parse_tree&quot;&gt;erl_parse_tree()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#type-form_info&quot;&gt;form_info()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e73f9bd1a9803a0012fc8a0fbebc486e9c9b3ac" translate="yes" xml:space="preserve">
          <source>anno_to_term(Abstr) -&amp;gt; term()</source>
          <target state="translated">anno_to_term（Abstr）-&amp;gt; term（）</target>
        </trans-unit>
        <trans-unit id="8105e619777b3d59b78f84b33dbebce9658fbfae" translate="yes" xml:space="preserve">
          <source>any(Pred, List) -&amp;gt; boolean()</source>
          <target state="translated">any（Pred、List）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="7d1043473d55bfa90e8530d35801d4e381bc69f0" translate="yes" xml:space="preserve">
          <source>app</source>
          <target state="translated">app</target>
        </trans-unit>
        <trans-unit id="d10841d2304b7b77bfc6054c2b2dc5bc853ae3c7" translate="yes" xml:space="preserve">
          <source>append(Key, Value, Dict1) -&amp;gt; Dict2</source>
          <target state="translated">append（Key、Value、Dict1）-&amp;gt; Dict2</target>
        </trans-unit>
        <trans-unit id="d4bf5c0acbaedb45c0da8c81997293d60ada9894" translate="yes" xml:space="preserve">
          <source>append(Key, Value, Orddict1) -&amp;gt; Orddict2</source>
          <target state="translated">append（Key、Value、Orddict1）-&amp;gt; Orddict2</target>
        </trans-unit>
        <trans-unit id="3c636072995a7d4159ff90be42115a100e5fa0d2" translate="yes" xml:space="preserve">
          <source>append(List1, List2) -&amp;gt; List3</source>
          <target state="translated">append（List1、List2）-&amp;gt; List3</target>
        </trans-unit>
        <trans-unit id="a5d4ff25be1367720e036d2617abcdc57bf54ef4" translate="yes" xml:space="preserve">
          <source>append(ListOfLists) -&amp;gt; List1</source>
          <target state="translated">append（ListOfLists）-&amp;gt; List1</target>
        </trans-unit>
        <trans-unit id="fb98fd6d9fec894b59b8f6b3bdf27630de51b73b" translate="yes" xml:space="preserve">
          <source>append(QH1, QH2) -&amp;gt; QH3</source>
          <target state="translated">append（QH1、QH2）-&amp;gt; QH3</target>
        </trans-unit>
        <trans-unit id="f4d993a4882c620993a920f306787cd3dd59b3f7" translate="yes" xml:space="preserve">
          <source>append(QHL) -&amp;gt; QH</source>
          <target state="translated">追加（QHL）-&amp;gt; QH</target>
        </trans-unit>
        <trans-unit id="9b475dbe1473e86886a8b4cdfe418e8b3ea7b5f7" translate="yes" xml:space="preserve">
          <source>append_list(Key, ValList, Dict1) -&amp;gt; Dict2</source>
          <target state="translated">append_list（Key、ValList、Dict1）-&amp;gt; Dict2</target>
        </trans-unit>
        <trans-unit id="b2d2d6942e878222f08a719555bc70b55954dc11" translate="yes" xml:space="preserve">
          <source>append_list(Key, ValList, Orddict1) -&amp;gt; Orddict2</source>
          <target state="translated">append_list（Key、ValList、Orddict1）-&amp;gt; Orddict2</target>
        </trans-unit>
        <trans-unit id="2d10c6ee0dd4778c117e8c3682c178d579bd4a18" translate="yes" xml:space="preserve">
          <source>append_values(Key, ListIn) -&amp;gt; ListOut</source>
          <target state="translated">append_values（Key、ListIn）-&amp;gt; ListOut</target>
        </trans-unit>
        <trans-unit id="d2005cc206ccbfdedf2be43a200cb050c538bdb5" translate="yes" xml:space="preserve">
          <source>application</source>
          <target state="translated">application</target>
        </trans-unit>
        <trans-unit id="568860282a1ec842e1ac6d1d30363015f3f2dde7" translate="yes" xml:space="preserve">
          <source>application annotated_type arity_qualifier atom</source>
          <target state="translated">アプリケーションアノテーション型アリティ修飾子原子</target>
        </trans-unit>
        <trans-unit id="1e1d067557b1043c2184a711f7cff2957fb839ce" translate="yes" xml:space="preserve">
          <source>apply(Fun, Args) -&amp;gt; term()</source>
          <target state="translated">apply（Fun、Args）-&amp;gt; term（）</target>
        </trans-unit>
        <trans-unit id="5f87db34c6505c677d6c49a06f49220e952a09e1" translate="yes" xml:space="preserve">
          <source>apply(Module, Function, Args) -&amp;gt; term()</source>
          <target state="translated">apply（Module、Function、Args）-&amp;gt; term（）</target>
        </trans-unit>
        <trans-unit id="8b33142aa22a9284aef7e9d7ff3d6aa1896b4cd0" translate="yes" xml:space="preserve">
          <source>apply_after(Time, Module, Function, Arguments) -&amp;gt;</source>
          <target state="translated">apply_after（時間、モジュール、関数、引数）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="84107d7bb57b203ad953502281b775aef3287b48" translate="yes" xml:space="preserve">
          <source>apply_interval(Time, Module, Function, Arguments) -&amp;gt;</source>
          <target state="translated">apply_interval（時間、モジュール、関数、引数）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="54ef3c30ac7fb5592b321d71bbdff18ad945f17f" translate="yes" xml:space="preserve">
          <source>appup</source>
          <target state="translated">appup</target>
        </trans-unit>
        <trans-unit id="4697dcb9422d15abf18c225a945de46886104261" translate="yes" xml:space="preserve">
          <source>arborescence_root(Digraph) -&amp;gt; no | {yes, Root}</source>
          <target state="translated">arborescence_root（Digraph）-&amp;gt;いいえ| {はい、ルート}</target>
        </trans-unit>
        <trans-unit id="59ddf6722b9f0593289a296b4a403eb6c0b2a0ad" translate="yes" xml:space="preserve">
          <source>arith_op(OpName, Arity) -&amp;gt; boolean()</source>
          <target state="translated">arith_op（OpName、Arity）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="19edc1210777ba4d45049c29280d9cc5e1064c25" translate="yes" xml:space="preserve">
          <source>array</source>
          <target state="translated">array</target>
        </trans-unit>
        <trans-unit id="6fbd33b2aeb593002556cd75a61bc45f654e10b3" translate="yes" xml:space="preserve">
          <source>as returned by &lt;code&gt;&lt;a href=&quot;#init-1&quot;&gt;init/1&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#init-1&quot;&gt;init/1&lt;/a&gt;&lt;/code&gt; によって返される</target>
        </trans-unit>
        <trans-unit id="042c62668e9a4ead6d9afb4138f6b2a8b3735800" translate="yes" xml:space="preserve">
          <source>as the matching of the &quot;g&quot; in the end of the string leaves an empty rest, which is also returned. This behavior differs from the default behavior of the split function in Perl, where empty strings at the end are by default removed. To get the &quot;trimming&quot; default behavior of Perl, specify &lt;code&gt;trim&lt;/code&gt; as an option:</source>
          <target state="translated">文字列の最後の &quot;g&quot;に一致すると空の残りが残り、これも返されます。この動作は、末尾の空の文字列がデフォルトで削除されるPerlの分割関数のデフォルトの動作とは異なります。Perlの「トリミング」デフォルト動作を取得するには、オプションとして &lt;code&gt;trim&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="73688580af35401988ca63c730bbff475def44d3" translate="yes" xml:space="preserve">
          <source>as:</source>
          <target state="translated">as:</target>
        </trans-unit>
        <trans-unit id="e29e01a495de2aa0eeaf07aabfce1c8aadd72b63" translate="yes" xml:space="preserve">
          <source>asin(X) -&amp;gt; float()</source>
          <target state="translated">asin（X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="81f51029f05bb19fa09635d29fc8e04062fc5a1a" translate="yes" xml:space="preserve">
          <source>asinh(X) -&amp;gt; float()</source>
          <target state="translated">asinh（X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="9edf4240018976bf964cf31c1a24d34fde8d517d" translate="yes" xml:space="preserve">
          <source>asn1</source>
          <target state="translated">asn1</target>
        </trans-unit>
        <trans-unit id="a5c623fea2ecc95d7d78e4a2f7b1a6636e9e9561" translate="yes" xml:space="preserve">
          <source>asn1ct</source>
          <target state="translated">asn1ct</target>
        </trans-unit>
        <trans-unit id="77b583668f59664395679b42c2fc85de4fdce9bf" translate="yes" xml:space="preserve">
          <source>assigns the same value to &lt;code&gt;Y&lt;/code&gt; as this:</source>
          <target state="translated">これと同じ値を &lt;code&gt;Y&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="38f344fad19df89790d8a548dab4cddfc73ab329" translate="yes" xml:space="preserve">
          <source>assigns the same value to &lt;code&gt;Z&lt;/code&gt; as this:</source>
          <target state="translated">これと同じ値を &lt;code&gt;Z&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="69bfbbcd78b5bc5db0e0a7dcccaa794f9a824e51" translate="yes" xml:space="preserve">
          <source>async_call(Node, Module, Function, Args) -&amp;gt; Key</source>
          <target state="translated">async_call（ノード、モジュール、関数、引数）-&amp;gt;キー</target>
        </trans-unit>
        <trans-unit id="9e04f49c91b068f23107ab4ee13991d045937efc" translate="yes" xml:space="preserve">
          <source>at(Subject, Pos) -&amp;gt; byte()</source>
          <target state="translated">at（Subject、Pos）-&amp;gt; byte（）</target>
        </trans-unit>
        <trans-unit id="af47c5430e2e70631a4fcd2e5be37991ecd7370a" translate="yes" xml:space="preserve">
          <source>atan(X) -&amp;gt; float()</source>
          <target state="translated">atan（X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="627c8fbaf02f5b457b741f6eebefcaf928e54a19" translate="yes" xml:space="preserve">
          <source>atan2(Y, X) -&amp;gt; float()</source>
          <target state="translated">atan2（Y、X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="b813663879e58121083ad2009d43be9680e58057" translate="yes" xml:space="preserve">
          <source>atanh(X) -&amp;gt; float()</source>
          <target state="translated">atanh（X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="bc158557e832bb320df845e44ae97cb1e13dab94" translate="yes" xml:space="preserve">
          <source>atom_to_binary(Atom, Encoding) -&amp;gt; binary()</source>
          <target state="translated">atom_to_binary（Atom、Encoding）-&amp;gt; binary（）</target>
        </trans-unit>
        <trans-unit id="bbebd8f662d346e33af0898064b3c45a418d6fa4" translate="yes" xml:space="preserve">
          <source>atom_to_list(Atom) -&amp;gt; string()</source>
          <target state="translated">atom_to_list（Atom）-&amp;gt; string（）</target>
        </trans-unit>
        <trans-unit id="8c997ae8c22f818e9d99a82e3f4ed9c818b5921c" translate="yes" xml:space="preserve">
          <source>atomic_load(Modules) -&amp;gt; ok | {error, [{Module, What}]}</source>
          <target state="translated">atomic_load（Modules）-&amp;gt; ok | {エラー、[{モジュール、何}]}</target>
        </trans-unit>
        <trans-unit id="2ad7021968425c3d482967ef78871505f0fde340" translate="yes" xml:space="preserve">
          <source>attach(Node) -&amp;gt; already_attached | attached</source>
          <target state="translated">attach（Node）-&amp;gt; already_attached | 付属</target>
        </trans-unit>
        <trans-unit id="7440b3eb7a1c9fda6e0f30aee46bcd5756f9fbf3" translate="yes" xml:space="preserve">
          <source>attribute binary binary_field bitstring_type</source>
          <target state="translated">属性バイナリバイナリフィールドビット文字列型</target>
        </trans-unit>
        <trans-unit id="5269fe7c8b5a323cdee23ea6d236f5dde4c5ade6" translate="yes" xml:space="preserve">
          <source>attribute(Attribute) -&amp;gt; &lt;code&gt;&lt;a href=&quot;io_lib#type-chars&quot;&gt;io_lib:chars()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">属性（属性）-&amp;gt; &lt;code&gt;&lt;a href=&quot;io_lib#type-chars&quot;&gt;io_lib:chars()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6ecd3f6f4e23adddd9500ef8ac9b9ce0b603262" translate="yes" xml:space="preserve">
          <source>attribute(Attribute, Options) -&amp;gt; &lt;code&gt;&lt;a href=&quot;io_lib#type-chars&quot;&gt;io_lib:chars()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">属性（属性、オプション）-&amp;gt; &lt;code&gt;&lt;a href=&quot;io_lib#type-chars&quot;&gt;io_lib:chars()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66a36e77fd002579809717841f998f4d21cd5913" translate="yes" xml:space="preserve">
          <source>auth</source>
          <target state="translated">auth</target>
        </trans-unit>
        <trans-unit id="176939638191d5a13935ccb90c0c8a70a5e30773" translate="yes" xml:space="preserve">
          <source>authentication</source>
          <target state="translated">authentication</target>
        </trans-unit>
        <trans-unit id="afcbbc0446e4d73184b39582e4989b409070433a" translate="yes" xml:space="preserve">
          <source>available() -&amp;gt; boolean()</source>
          <target state="translated">available（）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="3a56424474f8507b071c1802db5350b0d3930468" translate="yes" xml:space="preserve">
          <source>badValue</source>
          <target state="translated">badValue</target>
        </trans-unit>
        <trans-unit id="5fe93e4c0bcf90e54bcfd5dabd72f342eb374b22" translate="yes" xml:space="preserve">
          <source>balance(Set1) -&amp;gt; Set2</source>
          <target state="translated">バランス（セット1）-&amp;gt;セット2</target>
        </trans-unit>
        <trans-unit id="40831ed7e9e91cfff9b51a88adb7295f83bbf5df" translate="yes" xml:space="preserve">
          <source>balance(Tree1) -&amp;gt; Tree2</source>
          <target state="translated">バランス（ツリー1）-&amp;gt;ツリー2</target>
        </trans-unit>
        <trans-unit id="40d92c6dc271a0615a75fb1dab3afa49f45a6835" translate="yes" xml:space="preserve">
          <source>balog(Log, Bytes) -&amp;gt; notify_ret()</source>
          <target state="translated">balog（ログ、バイト）-&amp;gt; notify_ret（）</target>
        </trans-unit>
        <trans-unit id="c46b99f318b76b18c90d1b2e4136a70ea3a3eb6e" translate="yes" xml:space="preserve">
          <source>balog_terms(Log, ByteList) -&amp;gt; notify_ret()</source>
          <target state="translated">balog_terms（Log、ByteList）-&amp;gt; notify_ret（）</target>
        </trans-unit>
        <trans-unit id="2502deb44ba556abc83784f27250dcd7bbaebc0f" translate="yes" xml:space="preserve">
          <source>band</source>
          <target state="translated">band</target>
        </trans-unit>
        <trans-unit id="8095e159699116466e36cbafd09e1d845f29f2b9" translate="yes" xml:space="preserve">
          <source>base64</source>
          <target state="translated">base64</target>
        </trans-unit>
        <trans-unit id="2f59b6d8e4a0093e2cc2e3169190857078f78275" translate="yes" xml:space="preserve">
          <source>basedir(Type, Application) -&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</source>
          <target state="translated">basedir（Type、Application）-&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5467c698883b77a34b1a469f2866b11d034710d0" translate="yes" xml:space="preserve">
          <source>basedir(Type, Application, Opts) -&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</source>
          <target state="translated">basedir（Type、Application、Opts）-&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9aec39dfd77cd2f941d4b5b26ad4abdf2d7e4aa" translate="yes" xml:space="preserve">
          <source>basename(Filename) -&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</source>
          <target state="translated">basename（Filename）-&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8297d7a9e0184bdf9d54df4b0623f8178dacee9" translate="yes" xml:space="preserve">
          <source>basename(Filename, Ext) -&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</source>
          <target state="translated">basename（Filename、Ext）-&amp;gt; &lt;code&gt;file:filename_all()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2612c1d59e605c4aa626bc1ddc2ae7fb66f425f0" translate="yes" xml:space="preserve">
          <source>basic fault handling such as automatic type checking</source>
          <target state="translated">自動型チェックなどの基本的な故障処理</target>
        </trans-unit>
        <trans-unit id="5f5262763f739e7bfcc5b1bd3fdcd890d49574fc" translate="yes" xml:space="preserve">
          <source>bchunk(Log, Continuation) -&amp;gt; bchunk_ret()</source>
          <target state="translated">bchunk（ログ、継続）-&amp;gt; bchunk_ret（）</target>
        </trans-unit>
        <trans-unit id="e8f3ed1099245011c6ea627ef845b263b03472cf" translate="yes" xml:space="preserve">
          <source>bchunk(Log, Continuation, N) -&amp;gt; bchunk_ret()</source>
          <target state="translated">bchunk（ログ、継続、N）-&amp;gt; bchunk_ret（）</target>
        </trans-unit>
        <trans-unit id="bc974bf63d12f7fcc03212f1d3d2ec9c988b172a" translate="yes" xml:space="preserve">
          <source>bchunk(Name, Continuation) -&amp;gt;</source>
          <target state="translated">bchunk（名前、継続）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b5df635d31ba2bae170199b7b33e263c28d0828b" translate="yes" xml:space="preserve">
          <source>beam_lib</source>
          <target state="translated">beam_lib</target>
        </trans-unit>
        <trans-unit id="d807d11fc0d203e592513df0c4f1b29e4ac463e1" translate="yes" xml:space="preserve">
          <source>becomes in Erlang:</source>
          <target state="translated">がErlangになります。</target>
        </trans-unit>
        <trans-unit id="c02ceb78ff4863ee1a75d232c4f53af56b182ec9" translate="yes" xml:space="preserve">
          <source>becomes:</source>
          <target state="translated">becomes:</target>
        </trans-unit>
        <trans-unit id="37b477d71d4dff4e8be0781e55a37b73e266f5c2" translate="yes" xml:space="preserve">
          <source>ber bin</source>
          <target state="translated">バービン</target>
        </trans-unit>
        <trans-unit id="930b7c14f9c78481b6564d4b76ba739e01d1f5e3" translate="yes" xml:space="preserve">
          <source>ber bin [driver,native]</source>
          <target state="translated">ber bin [driver,native]</target>
        </trans-unit>
        <trans-unit id="e7e01863fb1068bce6b288e6a46af7d12f323b0c" translate="yes" xml:space="preserve">
          <source>ber bin [driver]</source>
          <target state="translated">ber bin [driver]</target>
        </trans-unit>
        <trans-unit id="cc37ba75621c9f315651e9c54a653563d92c9691" translate="yes" xml:space="preserve">
          <source>ber bin [native]</source>
          <target state="translated">ber bin [ネイティブ]</target>
        </trans-unit>
        <trans-unit id="45a432b22b94f4a73c79ea415b91f5719888570e" translate="yes" xml:space="preserve">
          <source>bif(Name, Arity) -&amp;gt; boolean()</source>
          <target state="translated">bif（名前、アリティ）-&amp;gt;ブール値（）</target>
        </trans-unit>
        <trans-unit id="bbe359e237c1d61a5cef555d759fea80f99d7ef1" translate="yes" xml:space="preserve">
          <source>bin_to_list(Subject) -&amp;gt; [byte()]</source>
          <target state="translated">bin_to_list（Subject）-&amp;gt; [byte（）]</target>
        </trans-unit>
        <trans-unit id="ddc11d9360688d7adda17dd499f2081340817864" translate="yes" xml:space="preserve">
          <source>bin_to_list(Subject, Pos, Len) -&amp;gt; [byte()]</source>
          <target state="translated">bin_to_list（Subject、Pos、Len）-&amp;gt; [byte（）]</target>
        </trans-unit>
        <trans-unit id="26a4ec73f8515351e70b298ca1df987ef296e90c" translate="yes" xml:space="preserve">
          <source>bin_to_list(Subject, PosLen) -&amp;gt; [byte()]</source>
          <target state="translated">bin_to_list（Subject、PosLen）-&amp;gt; [byte（）]</target>
        </trans-unit>
        <trans-unit id="7e57cfe843145135aee1f4d0d63ceb7842093712" translate="yes" xml:space="preserve">
          <source>binary</source>
          <target state="translated">binary</target>
        </trans-unit>
        <trans-unit id="d3883335929a74767b5c892d136b104945ab0a00" translate="yes" xml:space="preserve">
          <source>binary_part(Subject, PosLen) -&amp;gt; binary()</source>
          <target state="translated">binary_part（Subject、PosLen）-&amp;gt; binary（）</target>
        </trans-unit>
        <trans-unit id="daf1972817b954b7d4f843e8f1e167f58b772861" translate="yes" xml:space="preserve">
          <source>binary_part(Subject, Start, Length) -&amp;gt; binary()</source>
          <target state="translated">binary_part（Subject、Start、Length）-&amp;gt; binary（）</target>
        </trans-unit>
        <trans-unit id="d32f1e77007bf94b60332fe66d737afa28eac134" translate="yes" xml:space="preserve">
          <source>binary_to_atom(Binary, Encoding) -&amp;gt; atom()</source>
          <target state="translated">binary_to_atom（Binary、Encoding）-&amp;gt; atom（）</target>
        </trans-unit>
        <trans-unit id="e84c827133b25fa86f287f81660f3e670345043b" translate="yes" xml:space="preserve">
          <source>binary_to_existing_atom(Binary, Encoding) -&amp;gt; atom()</source>
          <target state="translated">binary_to_existing_atom（Binary、Encoding）-&amp;gt; atom（）</target>
        </trans-unit>
        <trans-unit id="a5b3332c1669fab5819cf0e32147078f0ebc007e" translate="yes" xml:space="preserve">
          <source>binary_to_float(Binary) -&amp;gt; float()</source>
          <target state="translated">binary_to_float（Binary）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="791f8901cafcc176519a514a6cba4dcc8267825f" translate="yes" xml:space="preserve">
          <source>binary_to_integer(Binary) -&amp;gt; integer()</source>
          <target state="translated">binary_to_integer（Binary）-&amp;gt; integer（）</target>
        </trans-unit>
        <trans-unit id="1467eef026591937d74ea6b19564fce34d19044e" translate="yes" xml:space="preserve">
          <source>binary_to_integer(Binary, Base) -&amp;gt; integer()</source>
          <target state="translated">binary_to_integer（Binary、Base）-&amp;gt; integer（）</target>
        </trans-unit>
        <trans-unit id="aa0d55a1a4d394c99be7d7a0634585e2d0e3a5c8" translate="yes" xml:space="preserve">
          <source>binary_to_list(Binary) -&amp;gt; [byte()]</source>
          <target state="translated">binary_to_list（Binary）-&amp;gt; [byte（）]</target>
        </trans-unit>
        <trans-unit id="074eb30a31005d6a4ebfa39a1586c91bb7277c66" translate="yes" xml:space="preserve">
          <source>binary_to_list(Binary, Start, Stop) -&amp;gt; [byte()]</source>
          <target state="translated">binary_to_list（Binary、Start、Stop）-&amp;gt; [byte（）]</target>
        </trans-unit>
        <trans-unit id="80e55f7d3cfd11d0e212f14b573ceef6f66e6738" translate="yes" xml:space="preserve">
          <source>binary_to_term(Binary) -&amp;gt; term()</source>
          <target state="translated">binary_to_term（Binary）-&amp;gt; term（）</target>
        </trans-unit>
        <trans-unit id="2b795103f453e979aac26647d5cc073756bfe26b" translate="yes" xml:space="preserve">
          <source>binary_to_term(Binary, Opts) -&amp;gt; term() | {term(), Used}</source>
          <target state="translated">binary_to_term（Binary、Opts）-&amp;gt; term（）| {term（）、使用済み}</target>
        </trans-unit>
        <trans-unit id="6e2e1571fd12a310ac375837b974d3a3fc53116c" translate="yes" xml:space="preserve">
          <source>binding(Name, BindingStruct) -&amp;gt; {value, &lt;code&gt;&lt;a href=&quot;#type-value&quot;&gt;value()&lt;/a&gt;&lt;/code&gt;} | unbound</source>
          <target state="translated">binding（Name、BindingStruct）-&amp;gt; {value、 &lt;code&gt;&lt;a href=&quot;#type-value&quot;&gt;value()&lt;/a&gt;&lt;/code&gt; } | 束縛されていない</target>
        </trans-unit>
        <trans-unit id="f6c04cbc8640694d31904425a2b68a98465a3b8e" translate="yes" xml:space="preserve">
          <source>bindings(BindingStruct :: &lt;code&gt;&lt;a href=&quot;#type-binding_struct&quot;&gt;binding_struct()&lt;/a&gt;&lt;/code&gt;) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-bindings&quot;&gt;bindings()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">bindings（BindingStruct :: &lt;code&gt;&lt;a href=&quot;#type-binding_struct&quot;&gt;binding_struct()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-bindings&quot;&gt;bindings()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0203ff37fd8649acbb74b5d65f549140be91dc63" translate="yes" xml:space="preserve">
          <source>bit_size(Bitstring) -&amp;gt; integer() &amp;gt;= 0</source>
          <target state="translated">bit_size（Bitstring）-&amp;gt; integer（）&amp;gt; = 0</target>
        </trans-unit>
        <trans-unit id="d837d332e8e1beb2cd16e8f3531304c0d159e914" translate="yes" xml:space="preserve">
          <source>bitstring_to_list(Bitstring) -&amp;gt; [byte() | bitstring()]</source>
          <target state="translated">bitstring_to_list（Bitstring）-&amp;gt; [byte（）| bitstring（）]</target>
        </trans-unit>
        <trans-unit id="d3b2a5d7c98ea683b103e280654c42c14fba7a51" translate="yes" xml:space="preserve">
          <source>block(Log) -&amp;gt; ok | {error, block_error_rsn()}</source>
          <target state="translated">block（Log）-&amp;gt; ok | {エラー、block_error_rsn（）}</target>
        </trans-unit>
        <trans-unit id="6cb88986b71a24912415b57a409d5ea17be1e56e" translate="yes" xml:space="preserve">
          <source>block(Log, QueueLogRecords) -&amp;gt; ok | {error, block_error_rsn()}</source>
          <target state="translated">block（Log、QueueLogRecords）-&amp;gt; ok | {エラー、block_error_rsn（）}</target>
        </trans-unit>
        <trans-unit id="8c8fd5e53c9f8727669d6100d4f208bce4d30494" translate="yes" xml:space="preserve">
          <source>block_call(Node, Module, Function, Args) -&amp;gt; Res | {badrpc, Reason}</source>
          <target state="translated">block_call（Node、Module、Function、Args）-&amp;gt; Res | {badrpc、理由}</target>
        </trans-unit>
        <trans-unit id="b23f2e95b93674d1dfc2e3ac44aed2b88cfdbb90" translate="yes" xml:space="preserve">
          <source>block_call(Node, Module, Function, Args, Timeout) -&amp;gt;</source>
          <target state="translated">block_call（ノード、モジュール、関数、引数、タイムアウト）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="dd3fb95e2e8de8d56289b202407712ce7b08d0a7" translate="yes" xml:space="preserve">
          <source>block_expr case_expr catch_expr char</source>
          <target state="translated">block_expr case_expr catch_expr char</target>
        </trans-unit>
        <trans-unit id="4afc334809efe11398470686b7036f8e78933955" translate="yes" xml:space="preserve">
          <source>blocked |</source>
          <target state="translated">ブロック</target>
        </trans-unit>
        <trans-unit id="1a397ad31897e50ea475b6705de127fbb370da75" translate="yes" xml:space="preserve">
          <source>blocked_normal |</source>
          <target state="translated">ブロックされた正規</target>
        </trans-unit>
        <trans-unit id="3beee47ea2b078cd59c4c5ce4b9190eb9146b4f9" translate="yes" xml:space="preserve">
          <source>blog(Log, Bytes) -&amp;gt; ok | {error, Reason :: log_error_rsn()}</source>
          <target state="translated">ブログ（ログ、バイト）-&amp;gt; ok | {エラー、理由:: log_error_rsn（）}</target>
        </trans-unit>
        <trans-unit id="fd89d388c12a39eefed7b264ab6c94451497daf4" translate="yes" xml:space="preserve">
          <source>blog_terms(Log, BytesList) -&amp;gt;</source>
          <target state="translated">blog_terms（Log、BytesList）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="73007bbd46f4537b551caebd6b8b9edad123d036" translate="yes" xml:space="preserve">
          <source>bnot</source>
          <target state="translated">bnot</target>
        </trans-unit>
        <trans-unit id="51b5e482911bb6268c2e8441668f0475ddf3a241" translate="yes" xml:space="preserve">
          <source>bom_to_encoding(Bin) -&amp;gt; {Encoding, Length}</source>
          <target state="translated">bom_to_encoding（Bin）-&amp;gt; {エンコーディング、長さ}</target>
        </trans-unit>
        <trans-unit id="48f21c15b1a3ef3e80d90f4547b15acb2b2278c5" translate="yes" xml:space="preserve">
          <source>bool_op(OpName, Arity) -&amp;gt; boolean()</source>
          <target state="translated">bool_op（OpName、Arity）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="9424b2cb7838f8e03100e5d1f08259651bbc4380" translate="yes" xml:space="preserve">
          <source>boolean()</source>
          <target state="translated">boolean()</target>
        </trans-unit>
        <trans-unit id="4c588bef1112cdcd9df76232b803718e01380b3c" translate="yes" xml:space="preserve">
          <source>boot(BootArgs) -&amp;gt; no_return()</source>
          <target state="translated">boot（BootArgs）-&amp;gt; no_return（）</target>
        </trans-unit>
        <trans-unit id="52bb0a7e3d33a423ae04f237f2810d90b2958d74" translate="yes" xml:space="preserve">
          <source>bor</source>
          <target state="translated">bor</target>
        </trans-unit>
        <trans-unit id="6fb0ba68c9e796283f40b2a10f8a4caa02b5fdab" translate="yes" xml:space="preserve">
          <source>both spawns the &quot;pong&quot; process and gives it the name &lt;code&gt;pong&lt;/code&gt;. In the &quot;ping&quot; process, messages can be sent to &lt;code&gt;pong&lt;/code&gt; by:</source>
          <target state="translated">どちらも &quot;pong&quot;プロセスを生成し、それに &lt;code&gt;pong&lt;/code&gt; という名前を付けます。「ping」プロセスでは、次の方法でメッセージを &lt;code&gt;pong&lt;/code&gt; に送信できます。</target>
        </trans-unit>
        <trans-unit id="1427acd9017f044f097b39bd8dd867988c97a153" translate="yes" xml:space="preserve">
          <source>breopen(Log, File, BHead) -&amp;gt; ok | {error, reopen_error_rsn()}</source>
          <target state="translated">breopen（Log、File、BHead）-&amp;gt; ok | {エラー、reopen_error_rsn（）}</target>
        </trans-unit>
        <trans-unit id="50f0842e1cda0fe8c9f71cfa4ea2f0841c7e72b2" translate="yes" xml:space="preserve">
          <source>bsl</source>
          <target state="translated">bsl</target>
        </trans-unit>
        <trans-unit id="63f2dca71c40848a4d8dc8e8cd8519a87854073a" translate="yes" xml:space="preserve">
          <source>bsr</source>
          <target state="translated">bsr</target>
        </trans-unit>
        <trans-unit id="4227474834bb37177c89c0c04a1c6088a0e0806d" translate="yes" xml:space="preserve">
          <source>bt(Pid) -&amp;gt; ok | undefined</source>
          <target state="translated">bt（Pid）-&amp;gt;わかりました| 未定義</target>
        </trans-unit>
        <trans-unit id="8cd9983b11c76876844be257a0f87b83409ff33e" translate="yes" xml:space="preserve">
          <source>btruncate(Log, BHead) -&amp;gt; ok | {error, trunc_error_rsn()}</source>
          <target state="translated">btruncate（Log、BHead）-&amp;gt; ok | {エラー、trunc_error_rsn（）}</target>
        </trans-unit>
        <trans-unit id="d9e9c73acc45e7723c0d136c3fe7b40a2a9f6e19" translate="yes" xml:space="preserve">
          <source>build: From a command prompt with the VC tools available (See the instructions for OpenSSL build above for help on starting the proper command prompt in RELEASE mode):</source>
          <target state="translated">をビルドします。VC ツールが利用可能なコマンドプロンプトから (RELEASE モードで適切なコマンドプロンプトを起動するためのヘルプについては、上記の OpenSSL ビルドの説明を参照してください)。</target>
        </trans-unit>
        <trans-unit id="183ecb4902d0d0d41b48309e30dd5254ba89737d" translate="yes" xml:space="preserve">
          <source>build_module(Chunks) -&amp;gt; {ok, Binary}</source>
          <target state="translated">build_module（Chunks）-&amp;gt; {ok、Binary}</target>
        </trans-unit>
        <trans-unit id="761567101897b252935ed432a4e4198076c07914" translate="yes" xml:space="preserve">
          <source>build_text(FormatList) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-chars&quot;&gt;chars()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">build_text（FormatList）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-chars&quot;&gt;chars()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c15d9af91a67e242ca69b3cc677bedd7cf7a1311" translate="yes" xml:space="preserve">
          <source>built-in filters, see &lt;code&gt;&lt;a href=&quot;logger_filters&quot;&gt;logger_filters&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">組み込みフィルター &lt;code&gt;&lt;a href=&quot;logger_filters&quot;&gt;logger_filters&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="2bcba5ec087d106757db884cf7c12f1e54e03c54" translate="yes" xml:space="preserve">
          <source>but if Erlang was started with &lt;code&gt;+pc unicode&lt;/code&gt;:</source>
          <target state="translated">しかし、Erlangが &lt;code&gt;+pc unicode&lt;/code&gt; で起動された場合：</target>
        </trans-unit>
        <trans-unit id="190e9b4cffa7d0a9b40313246c0c7618ab1908bb" translate="yes" xml:space="preserve">
          <source>but if the &lt;code&gt;user_args&lt;/code&gt; parameter is set to a longer list, such as &lt;code&gt;[SomePid,SomeTableRef]&lt;/code&gt;, the callback function is expected to have these (in this case two) extra arguments last in the argument list:</source>
          <target state="translated">ただし、 &lt;code&gt;user_args&lt;/code&gt; パラメーターが &lt;code&gt;[SomePid,SomeTableRef]&lt;/code&gt; などの長いリストに設定されている場合、コールバック関数には、これら（この場合は2つ）の追加の引数が引数リストの最後にあると想定されます。</target>
        </trans-unit>
        <trans-unit id="87f9c67072367b652ee581fe6702e90f86a88df1" translate="yes" xml:space="preserve">
          <source>but if you want to match on something like the name of a function, you have to use an atom as metavariable:</source>
          <target state="translated">しかし、関数名のようなものにマッチさせたい場合は、メタバリアブルとしてアトムを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="cf05994ef579f79cdaa47b8de3629989183079f3" translate="yes" xml:space="preserve">
          <source>bxor</source>
          <target state="translated">bxor</target>
        </trans-unit>
        <trans-unit id="cd735cd6accded04e305d48a4573dbc18c35e2d5" translate="yes" xml:space="preserve">
          <source>byte_size(Bitstring) -&amp;gt; integer() &amp;gt;= 0</source>
          <target state="translated">byte_size（Bitstring）-&amp;gt; integer（）&amp;gt; = 0</target>
        </trans-unit>
        <trans-unit id="84a516841ba77a5b4648de2cd0dfcb30ea46dbb4" translate="yes" xml:space="preserve">
          <source>c</source>
          <target state="translated">c</target>
        </trans-unit>
        <trans-unit id="c96598b814dcba9a9e1f98c1b6985598ed7b2584" translate="yes" xml:space="preserve">
          <source>c(Module) -&amp;gt; {ok, ModuleName} | error</source>
          <target state="translated">c（モジュール）-&amp;gt; {ok、ModuleName} | エラー</target>
        </trans-unit>
        <trans-unit id="9b04aeac7f4b5720e8ac207dd62c5ce15ce0106d" translate="yes" xml:space="preserve">
          <source>c(Module, Options) -&amp;gt; {ok, ModuleName} | error</source>
          <target state="translated">c（モジュール、オプション）-&amp;gt; {ok、ModuleName} | エラー</target>
        </trans-unit>
        <trans-unit id="f57652c8c1ca50e19e0b8ad191019a332a4b9b1e" translate="yes" xml:space="preserve">
          <source>c(Module, Options, Filter) -&amp;gt; {ok, ModuleName} | error</source>
          <target state="translated">c（モジュール、オプション、フィルター）-&amp;gt; {ok、ModuleName} | エラー</target>
        </trans-unit>
        <trans-unit id="e4ffacba5591440a14a08eac7aade57c603e17c0" translate="yes" xml:space="preserve">
          <source>calendar</source>
          <target state="translated">calendar</target>
        </trans-unit>
        <trans-unit id="c4d23b67e305f02cc6296b3fb8e9c61a291a202a" translate="yes" xml:space="preserve">
          <source>calendar(3)</source>
          <target state="translated">calendar(3)</target>
        </trans-unit>
        <trans-unit id="11a5154fab3fad99dfcf27e7652ca5cc053e9ebd" translate="yes" xml:space="preserve">
          <source>calendar(3), erlc(1)</source>
          <target state="translated">カレンダー(3),erlc(1)</target>
        </trans-unit>
        <trans-unit id="bc8d8647b02deea0ab3e715c220d041ee78cc19d" translate="yes" xml:space="preserve">
          <source>call</source>
          <target state="translated">call</target>
        </trans-unit>
        <trans-unit id="9c6a639756ac5ffb262ebf578907862758c2dd70" translate="yes" xml:space="preserve">
          <source>call(Node, Module, Function, Args) -&amp;gt; Res | {badrpc, Reason}</source>
          <target state="translated">call（Node、Module、Function、Args）-&amp;gt; Res | {badrpc、理由}</target>
        </trans-unit>
        <trans-unit id="08f979cae5db743f169883afbe8b5f12097026c8" translate="yes" xml:space="preserve">
          <source>call(Node, Module, Function, Args, Timeout) -&amp;gt;</source>
          <target state="translated">呼び出し（ノード、モジュール、関数、引数、タイムアウト）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c4765dd33456ed105d24d5704b27dde8cb8d9886" translate="yes" xml:space="preserve">
          <source>call(ServerRef :: &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;server_ref()&lt;/a&gt;&lt;/code&gt;,</source>
          <target state="translated">call（ServerRef :: &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;server_ref()&lt;/a&gt;&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="0ba6ce98874a5c86261e3fbbcd1cbbc9dd2967c2" translate="yes" xml:space="preserve">
          <source>call(ServerRef :: &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;server_ref()&lt;/a&gt;&lt;/code&gt;, Request :: term()) -&amp;gt;</source>
          <target state="translated">call（ServerRef :: &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;server_ref()&lt;/a&gt;&lt;/code&gt; 、Request :: term（））-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="26d71743b2cda8f3c5b1b0c17a1ec20c638d5711" translate="yes" xml:space="preserve">
          <source>callback functions</source>
          <target state="translated">コールバックかんすう</target>
        </trans-unit>
        <trans-unit id="97afaf3f7d287fac5660c73b7a658f2fedeceedc" translate="yes" xml:space="preserve">
          <source>can be rewritten to be more readable:</source>
          <target state="translated">は、より読みやすく書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="93f4c3ceeafe1d883f6ac4d4cb5ff62d588550d0" translate="yes" xml:space="preserve">
          <source>can be rewritten to:</source>
          <target state="translated">に書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="fa8c9a76d02216d180ab712928f241fa3f5fa8ab" translate="yes" xml:space="preserve">
          <source>can instead be written as</source>
          <target state="translated">は次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="8b3eff9ca3eaef64b1fc77c577b756f666c76190" translate="yes" xml:space="preserve">
          <source>cancel(TRef) -&amp;gt; {ok, cancel} | {error, Reason}</source>
          <target state="translated">cancel（TRef）-&amp;gt; {ok、cancel} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="d0f5bc9e7850806fda269bc43f2e3119e92c12b2" translate="yes" xml:space="preserve">
          <source>canonical_relation(SetOfSets) -&amp;gt; BinRel</source>
          <target state="translated">canonical_relation（SetOfSets）-&amp;gt; BinRel</target>
        </trans-unit>
        <trans-unit id="3a52a465fada7e9c75be4f939e764083831448bd" translate="yes" xml:space="preserve">
          <source>carriers() -&amp;gt; {ok, Result} | {error, Reason}</source>
          <target state="translated">carriers（）-&amp;gt; {ok、Result} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="ee5214a0625718436544ae70fe60f4d82b91e2db" translate="yes" xml:space="preserve">
          <source>carriers(Options) -&amp;gt; {ok, Result} | {error, Reason}</source>
          <target state="translated">carriers（Options）-&amp;gt; {ok、Result} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="7eb4f86b6d9ac5664065c4597d525d38854b4720" translate="yes" xml:space="preserve">
          <source>casefold(String :: &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt; &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">casefold（String :: &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt; &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a45288041b7277b587938369be0c9d86f6ad7edf" translate="yes" xml:space="preserve">
          <source>cast(Node, Module, Function, Args) -&amp;gt; true</source>
          <target state="translated">cast（Node、Module、Function、Args）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="381e46370e8a81b3601dcd66a0d30c1e7b579344" translate="yes" xml:space="preserve">
          <source>cast(ServerRef :: &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;server_ref()&lt;/a&gt;&lt;/code&gt;, Msg :: term()) -&amp;gt; ok</source>
          <target state="translated">cast（ServerRef :: &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;server_ref()&lt;/a&gt;&lt;/code&gt; 、Msg :: term（））-&amp;gt; ok</target>
        </trans-unit>
        <trans-unit id="9ebad64e5d2b9542779537fce0354f34c099e7ff" translate="yes" xml:space="preserve">
          <source>catch</source>
          <target state="translated">catch</target>
        </trans-unit>
        <trans-unit id="f443b2f9a405f81f49c3989ddcf0dbd1252a91dd" translate="yes" xml:space="preserve">
          <source>category(Token) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-category&quot;&gt;category()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">category（Token）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-category&quot;&gt;category()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="639287c1f36ef84ae38ed37b5ac7cf276477fba3" translate="yes" xml:space="preserve">
          <source>cd(Dir) -&amp;gt; ok</source>
          <target state="translated">cd（Dir）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="80b80913dd4035ef9aaa91f5f87178c517a7c9c0" translate="yes" xml:space="preserve">
          <source>ceil(Number) -&amp;gt; integer()</source>
          <target state="translated">ceil（数値）-&amp;gt;整数（）</target>
        </trans-unit>
        <trans-unit id="ba4898d1e8bc8aaa35047d5a0a24d5ad9db64383" translate="yes" xml:space="preserve">
          <source>ceil(X) -&amp;gt; float()</source>
          <target state="translated">ceil（X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="430831ed6146303877cf7be9022369ef4669761c" translate="yes" xml:space="preserve">
          <source>centre(String, Number) -&amp;gt; Centered</source>
          <target state="translated">centre（String、Number）-&amp;gt;中央揃え</target>
        </trans-unit>
        <trans-unit id="6d425e0de1476cc745bedfaa528f54aa28294852" translate="yes" xml:space="preserve">
          <source>centre(String, Number, Character) -&amp;gt; Centered</source>
          <target state="translated">centre（文字列、数値、文字）-&amp;gt;中央揃え</target>
        </trans-unit>
        <trans-unit id="b0d0d921640f8dee544001e223d7bd2196d6e8f2" translate="yes" xml:space="preserve">
          <source>change_code(Name, Module, OldVsn, Extra) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_code（Name、Module、OldVsn、Extra）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="ebb8c3045bd28c21b6056fc7ad0e6f34271d630f" translate="yes" xml:space="preserve">
          <source>change_code(Name, Module, OldVsn, Extra, Timeout) -&amp;gt;</source>
          <target state="translated">change_code（名前、モジュール、OldVsn、追加、タイムアウト）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="783522fc90c82b44cbd792497069d120268dc7b9" translate="yes" xml:space="preserve">
          <source>change_group(Filename, Gid) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_group（Filename、Gid）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="813b43d9f912fc121c8d6021e058ea6e68594eca" translate="yes" xml:space="preserve">
          <source>change_header(Log, Header) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_header（Log、Header）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="9ee1b282106ead99f37f874d43ec57bd8437b08b" translate="yes" xml:space="preserve">
          <source>change_key(RegHandle, Key) -&amp;gt; ReturnValue</source>
          <target state="translated">change_key（RegHandle、Key）-&amp;gt; ReturnValue</target>
        </trans-unit>
        <trans-unit id="1018df7f56e905f0dab8158912e0d1ae7158718f" translate="yes" xml:space="preserve">
          <source>change_key_create(RegHandle, Key) -&amp;gt; ReturnValue</source>
          <target state="translated">change_key_create（RegHandle、Key）-&amp;gt; ReturnValue</target>
        </trans-unit>
        <trans-unit id="bca67c8be654ba78537aed478f039caf99cca9f2" translate="yes" xml:space="preserve">
          <source>change_mode(Filename, Mode) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_mode（ファイル名、モード）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="8a3f9c9d1b52f169e5c459cd5f0f9ba380ec3c6e" translate="yes" xml:space="preserve">
          <source>change_notify(Log, Owner, Notify) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_notify（Log、Owner、Notify）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="a63fd44f204117228407c76fcf3481e903d5cb26" translate="yes" xml:space="preserve">
          <source>change_owner(Filename, Uid) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_owner（Filename、Uid）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="f4f5da258939e140cb61e3b735a04bc820246d79" translate="yes" xml:space="preserve">
          <source>change_owner(Filename, Uid, Gid) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_owner（ファイル名、Uid、Gid）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="afb290d7490cde5b145dd7d93cf0d803d23e88da" translate="yes" xml:space="preserve">
          <source>change_size(Log, Size) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_size（Log、Size）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="791e710387d0d415cf29c846113be273ae0a4f62" translate="yes" xml:space="preserve">
          <source>change_time(Filename, Atime, Mtime) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_time（ファイル名、Atime、Mtime）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="2fdcec46b372cbab633de2105e377c344475062c" translate="yes" xml:space="preserve">
          <source>change_time(Filename, Mtime) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">change_time（Filename、Mtime）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="b373c5419d5796d4aec2cc2b3a99d2881565ccd0" translate="yes" xml:space="preserve">
          <source>char_list(Term) -&amp;gt; boolean()</source>
          <target state="translated">char_list（用語）-&amp;gt;ブール値（）</target>
        </trans-unit>
        <trans-unit id="97acdeea52ff074a79d4f4a036cfe0deedb393cf" translate="yes" xml:space="preserve">
          <source>character with octal code ddd..</source>
          <target state="translated">8進数コードの文字ddd...</target>
        </trans-unit>
        <trans-unit id="50dd212971b862e228bd0cb0b91a358f1b6648be" translate="yes" xml:space="preserve">
          <source>characters_to_binary(Data) -&amp;gt; Result</source>
          <target state="translated">characters_to_binary（Data）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="aadceda668c49dda7bac9a8574904aa1b30596ed" translate="yes" xml:space="preserve">
          <source>characters_to_binary(Data, InEncoding) -&amp;gt; Result</source>
          <target state="translated">characters_to_binary（Data、InEncoding）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="c1527fcfa4b121203e4e1dc1047e1efd8102d562" translate="yes" xml:space="preserve">
          <source>characters_to_binary(Data, InEncoding, OutEncoding) -&amp;gt; Result</source>
          <target state="translated">characters_to_binary（Data、InEncoding、OutEncoding）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="6df472875c5fb944d9c780677694bf3acd8df87b" translate="yes" xml:space="preserve">
          <source>characters_to_list(Data) -&amp;gt; Result</source>
          <target state="translated">characters_to_list（Data）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="0be42f160cc63b226b89e76ba26a22c9d089da08" translate="yes" xml:space="preserve">
          <source>characters_to_list(Data, InEncoding) -&amp;gt; Result</source>
          <target state="translated">characters_to_list（Data、InEncoding）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="2ba3ed5bf166b53d492b4c2910228a6a9a308c2f" translate="yes" xml:space="preserve">
          <source>characters_to_nfc_binary(CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">characters_to_nfc_binary（CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3a992f407babbcb92da44c4c4a00edeee005a324" translate="yes" xml:space="preserve">
          <source>characters_to_nfc_list(CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">characters_to_nfc_list（CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a50804d73541388bd1f9b9cfd58d50935a1532e7" translate="yes" xml:space="preserve">
          <source>characters_to_nfd_binary(CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">characters_to_nfd_binary（CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3a73758f285f32879954a26aa7bcf685eb8f29b2" translate="yes" xml:space="preserve">
          <source>characters_to_nfd_list(CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">characters_to_nfd_list（CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f31faaa6282e529db9ca4a80795cf6063a787e92" translate="yes" xml:space="preserve">
          <source>characters_to_nfkc_binary(CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">characters_to_nfkc_binary（CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="33a61d8980375f87b4307c0001df8865101cd823" translate="yes" xml:space="preserve">
          <source>characters_to_nfkc_list(CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">characters_to_nfkc_list（CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3c5a611ecf8b29176a655e3d243f26eee4a03b8b" translate="yes" xml:space="preserve">
          <source>characters_to_nfkd_binary(CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">characters_to_nfkd_binary（CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1162a0c030dee7362242d5d4889617380f5b1117" translate="yes" xml:space="preserve">
          <source>characters_to_nfkd_list(CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">characters_to_nfkd_list（CD :: &lt;code&gt;&lt;a href=&quot;#type-chardata&quot;&gt;chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="10796c10a0d913f50eaf9f5e9e98eb494d45b996" translate="yes" xml:space="preserve">
          <source>chars(Character, Number) -&amp;gt; String</source>
          <target state="translated">chars（文字、数値）-&amp;gt;文字列</target>
        </trans-unit>
        <trans-unit id="6b90cf1e25454d1ce2e6fe69ba6126d8cee80995" translate="yes" xml:space="preserve">
          <source>chars(Character, Number, Tail) -&amp;gt; String</source>
          <target state="translated">chars（Character、Number、Tail）-&amp;gt; String</target>
        </trans-unit>
        <trans-unit id="9ab9e1b88757331e50f7177d246a6ac6814e59fb" translate="yes" xml:space="preserve">
          <source>check for UTRACE support in your current kernel:</source>
          <target state="translated">現在のカーネルで UTRACE がサポートされているかどうかをチェックしてください。</target>
        </trans-unit>
        <trans-unit id="a3d169e3674a560aa2c318fdc654be52039e49b3" translate="yes" xml:space="preserve">
          <source>check is only performed on the peer certificate.</source>
          <target state="translated">チェックはピア証明書に対してのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="ca38ce7e1dd5c5036886c71fceaf06e593f3c559" translate="yes" xml:space="preserve">
          <source>check(FileName) -&amp;gt; Reply</source>
          <target state="translated">check（FileName）-&amp;gt;返信</target>
        </trans-unit>
        <trans-unit id="b58dd293f1c20a1a5ce151c3dd25dbf472399074" translate="yes" xml:space="preserve">
          <source>check(FileNames, Options) -&amp;gt; Reply</source>
          <target state="translated">check（FileNames、Options）-&amp;gt;返信</target>
        </trans-unit>
        <trans-unit id="85d09266f730ed0ef11150d70e729fa7eff222f8" translate="yes" xml:space="preserve">
          <source>check_childspecs(ChildSpecs) -&amp;gt; Result</source>
          <target state="translated">check_childspecs（ChildSpecs）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="025372ec22477e9ed850bd0a7594df78e4a7e901" translate="yes" xml:space="preserve">
          <source>check_config(Config) -&amp;gt; ok | {error, term()}</source>
          <target state="translated">check_config（Config）-&amp;gt; ok | {エラー、用語（）}</target>
        </trans-unit>
        <trans-unit id="cdd039a4a821ac3ab2ae2b30d5a6cea34bd528dc" translate="yes" xml:space="preserve">
          <source>check_old_code(Module) -&amp;gt; boolean()</source>
          <target state="translated">check_old_code（Module）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="858a711c9ed5861d92934be8a86c2b8fc57262c7" translate="yes" xml:space="preserve">
          <source>check_process_code(Pid, Module) -&amp;gt; CheckResult</source>
          <target state="translated">check_process_code（Pid、Module）-&amp;gt; CheckResult</target>
        </trans-unit>
        <trans-unit id="02bb69bcfbe9631af85f29388f5458e1710f36a4" translate="yes" xml:space="preserve">
          <source>check_process_code(Pid, Module, OptionList) -&amp;gt; CheckResult | async</source>
          <target state="translated">check_process_code（Pid、Module、OptionList）-&amp;gt; CheckResult | 非同期</target>
        </trans-unit>
        <trans-unit id="f1470d1355971648fda0d3239972aae8cf53a09a" translate="yes" xml:space="preserve">
          <source>chomp(String :: &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;) -&amp;gt; &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">chomp（String :: &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt; &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bed3a9983ca825632c6ecf8da20aebbefc0d07af" translate="yes" xml:space="preserve">
          <source>chr(String, Character) -&amp;gt; Index</source>
          <target state="translated">chr（文字列、文字）-&amp;gt;インデックス</target>
        </trans-unit>
        <trans-unit id="5b6400e6315f474c7d3ef6d5d682c030be6e1e5c" translate="yes" xml:space="preserve">
          <source>chunk(Continuation) -&amp;gt; chunk_ret()</source>
          <target state="translated">chunk（Continuation）-&amp;gt; chunk_ret（）</target>
        </trans-unit>
        <trans-unit id="05be0dd9e71fb7d4bcdd7c6dc89b0a9801785ccf" translate="yes" xml:space="preserve">
          <source>chunk(Continuation, N) -&amp;gt; chunk_ret()</source>
          <target state="translated">chunk（Continuation、N）-&amp;gt; chunk_ret（）</target>
        </trans-unit>
        <trans-unit id="a274fcea06afb64eca7855cbea372182f5cad268" translate="yes" xml:space="preserve">
          <source>chunk(Log, Continuation) -&amp;gt; chunk_ret()</source>
          <target state="translated">chunk（Log、Continuation）-&amp;gt; chunk_ret（）</target>
        </trans-unit>
        <trans-unit id="bb306e0f5f5c5bf52efb13e6f7840f7fe62ab1fa" translate="yes" xml:space="preserve">
          <source>chunk(Log, Continuation, N) -&amp;gt; chunk_ret()</source>
          <target state="translated">chunk（Log、Continuation、N）-&amp;gt; chunk_ret（）</target>
        </trans-unit>
        <trans-unit id="b60020e1bd24497c7a856b4bd24c7b804dbf3ef3" translate="yes" xml:space="preserve">
          <source>chunk_info(Continuation) -&amp;gt; InfoList | {error, Reason}</source>
          <target state="translated">chunk_info（Continuation）-&amp;gt; InfoList | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="bac6f8bf8225d7b9b559782f93abe21ea5036e41" translate="yes" xml:space="preserve">
          <source>chunk_step(Log, Continuation, Step) -&amp;gt;</source>
          <target state="translated">chunk_step（ログ、継続、ステップ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="366a764e9406d8fa8a195b78e6c83d79ba3eece7" translate="yes" xml:space="preserve">
          <source>chunks(Beam, ChunkRefs) -&amp;gt;</source>
          <target state="translated">チャンク（ビーム、チャンク参照）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b109e88bd0666bd32af0e725acf2d5ad1b561a20" translate="yes" xml:space="preserve">
          <source>chunks(Beam, ChunkRefs, Options) -&amp;gt;</source>
          <target state="translated">チャンク（ビーム、チャンク参照、オプション）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="eb84e35d6406ac74325686d9b399e2c067031ba1" translate="yes" xml:space="preserve">
          <source>clash() -&amp;gt; ok</source>
          <target state="translated">clash（）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="c3cec0881945cba668f9d48b9e22ae3751b011f8" translate="yes" xml:space="preserve">
          <source>class_qualifier clause comment cond_expr</source>
          <target state="translated">クラス修飾句 コメント cond_expr</target>
        </trans-unit>
        <trans-unit id="5e7884515ab16e4fab1b842c5ba8c4c01b4df0d5" translate="yes" xml:space="preserve">
          <source>clear_callback() -&amp;gt; ok</source>
          <target state="translated">clear_callback（）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="5f0385341d0d9dc1330078377476f25920368051" translate="yes" xml:space="preserve">
          <source>clear_cmd() -&amp;gt; ok</source>
          <target state="translated">clear_cmd（）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="3216feb60522c7752bc3d58cd3f2e7dc2984e813" translate="yes" xml:space="preserve">
          <source>clear_crypto_key_fun() -&amp;gt; undefined | {ok, Result}</source>
          <target state="translated">clear_crypto_key_fun（）-&amp;gt;未定義| {OK、結果}</target>
        </trans-unit>
        <trans-unit id="93df14617ceda8ee499003ae137b44e91aa26cce" translate="yes" xml:space="preserve">
          <source>clients</source>
          <target state="translated">clients</target>
        </trans-unit>
        <trans-unit id="7f8b454bfd8f7d9a92afda64070ce71fdfd2e466" translate="yes" xml:space="preserve">
          <source>close(ConnectionRef) -&amp;gt; ok | {error, term()}</source>
          <target state="translated">close（ConnectionRef）-&amp;gt; ok | {エラー、用語（）}</target>
        </trans-unit>
        <trans-unit id="405b991a1f1c3f1f1e979b838fc1db9c1f16ff47" translate="yes" xml:space="preserve">
          <source>close(Continuation) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">close（Continuation）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="057544b5e2ac221fbb8165280b21b26bae408c90" translate="yes" xml:space="preserve">
          <source>close(Epp) -&amp;gt; ok</source>
          <target state="translated">close（Epp）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="4b0c201fa495b4dbaad337f5ae57d4ca607c5b0d" translate="yes" xml:space="preserve">
          <source>close(IoDevice) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">close（IoDevice）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="524e7f9b6548d1169747d906fa1bcdf2a90c4c31" translate="yes" xml:space="preserve">
          <source>close(Log) -&amp;gt; ok | {error, close_error_rsn()}</source>
          <target state="translated">close（Log）-&amp;gt; ok | {エラー、close_error_rsn（）}</target>
        </trans-unit>
        <trans-unit id="d8097d564ac8a77dadce2098b541a026d4c5534d" translate="yes" xml:space="preserve">
          <source>close(Name) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">close（Name）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="d87db21865a684fc7fb6307f14b21e9b8ca38986" translate="yes" xml:space="preserve">
          <source>close(RegHandle) -&amp;gt; ok</source>
          <target state="translated">close（RegHandle）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="0e4bb3fb6f47b73e2d08297f4a38fc0e6739b507" translate="yes" xml:space="preserve">
          <source>close(Socket) -&amp;gt; ok</source>
          <target state="translated">close（Socket）-&amp;gt; ok</target>
        </trans-unit>
        <trans-unit id="7b3608d6ece4ad8fe103f51f76d5738be90841ee" translate="yes" xml:space="preserve">
          <source>close(Socket) -&amp;gt; ok | {error, &lt;code&gt;&lt;a href=&quot;inet#type-posix&quot;&gt;inet:posix()&lt;/a&gt;&lt;/code&gt;}</source>
          <target state="translated">close（Socket）-&amp;gt; ok | {エラー、 &lt;code&gt;&lt;a href=&quot;inet#type-posix&quot;&gt;inet:posix()&lt;/a&gt;&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="82120cb0a9a3d8267c30e933c49975eabd2bec5a" translate="yes" xml:space="preserve">
          <source>close(Z) -&amp;gt; ok</source>
          <target state="translated">close（Z）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="3a46caa6c4eb9cce8b01bc14c6acc15e94854358" translate="yes" xml:space="preserve">
          <source>close_session(Client) -&amp;gt; Result</source>
          <target state="translated">close_session（Client）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="60b85f36b3da2679378993163997137d8779e866" translate="yes" xml:space="preserve">
          <source>close_session(Client, Timeout) -&amp;gt; Result</source>
          <target state="translated">close_session（Client、Timeout）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="13a86e8221c178650a11dd64a31fa2e5594d1b46" translate="yes" xml:space="preserve">
          <source>cmd(Command) -&amp;gt; string()</source>
          <target state="translated">cmd（コマンド）-&amp;gt; string（）</target>
        </trans-unit>
        <trans-unit id="b5ba6d6ad096e0b05e114431b163b9368f5efcb0" translate="yes" xml:space="preserve">
          <source>cmd(Command, Options) -&amp;gt; string()</source>
          <target state="translated">cmd（コマンド、オプション）-&amp;gt; string（）</target>
        </trans-unit>
        <trans-unit id="76cde058fcf2fea65cdff54b66e764aa168f69d9" translate="yes" xml:space="preserve">
          <source>cmp(Beam1, Beam2) -&amp;gt; ok | {error, beam_lib, cmp_rsn()}</source>
          <target state="translated">cmp（Beam1、Beam2）-&amp;gt; ok | {エラー、beam_lib、cmp_rsn（）}</target>
        </trans-unit>
        <trans-unit id="a45101c8700b675e33f2e27f291a6dad251aaac2" translate="yes" xml:space="preserve">
          <source>cmp_dirs(Dir1, Dir2) -&amp;gt;</source>
          <target state="translated">cmp_dirs（Dir1、Dir2）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e6fb06210fafc02fd7479ddbed2d042cc3a5155e" translate="yes" xml:space="preserve">
          <source>code</source>
          <target state="translated">code</target>
        </trans-unit>
        <trans-unit id="4ca2a21fb83cf707e2de16c66773b4497aa55a47" translate="yes" xml:space="preserve">
          <source>code(3), compile(3)</source>
          <target state="translated">コード(3),コンパイル(3)</target>
        </trans-unit>
        <trans-unit id="6154a1389edd3ab751adb19441ec668fa60c5615" translate="yes" xml:space="preserve">
          <source>collector_pid - undefined.</source>
          <target state="translated">collector_pid-未定義です。</target>
        </trans-unit>
        <trans-unit id="c4917293b3f6d941cb86e7439956a85a589af1ef" translate="yes" xml:space="preserve">
          <source>column numbers</source>
          <target state="translated">列番号</target>
        </trans-unit>
        <trans-unit id="4c005b25a39f8f4196d18435cf113789ddff1e80" translate="yes" xml:space="preserve">
          <source>column(Anno) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-column&quot;&gt;column()&lt;/a&gt;&lt;/code&gt; | undefined</source>
          <target state="translated">column（Anno）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-column&quot;&gt;column()&lt;/a&gt;&lt;/code&gt; | 未定義</target>
        </trans-unit>
        <trans-unit id="3edebbdb0e986a71c739939f8611de063d46564b" translate="yes" xml:space="preserve">
          <source>column(Token) -&amp;gt; &lt;code&gt;&lt;a href=&quot;erl_anno#type-column&quot;&gt;erl_anno:column()&lt;/a&gt;&lt;/code&gt; | undefined</source>
          <target state="translated">column（Token）-&amp;gt; &lt;code&gt;&lt;a href=&quot;erl_anno#type-column&quot;&gt;erl_anno:column()&lt;/a&gt;&lt;/code&gt; | 未定義</target>
        </trans-unit>
        <trans-unit id="8e0c05a69d72d58e0161e44b5e5dbd2a94d154fb" translate="yes" xml:space="preserve">
          <source>columns() -&amp;gt; {ok, integer() &amp;gt;= 1} | {error, enotsup}</source>
          <target state="translated">columns（）-&amp;gt; {ok、integer（）&amp;gt; = 1} | {エラー、enotsup}</target>
        </trans-unit>
        <trans-unit id="613f633c6b5af7d2278a11f4bc637b8ebefef8e9" translate="yes" xml:space="preserve">
          <source>columns(IoDevice) -&amp;gt; {ok, integer() &amp;gt;= 1} | {error, enotsup}</source>
          <target state="translated">columns（IoDevice）-&amp;gt; {ok、integer（）&amp;gt; = 1} | {エラー、enotsup}</target>
        </trans-unit>
        <trans-unit id="35fbc1c4ef846a8613de892f3c24cebce7bb1674" translate="yes" xml:space="preserve">
          <source>commit(Ref, CommitMode) is the same as commit(Ref, CommitMode, infinity). If the timeout expires the client will exit with the reason timeout.</source>
          <target state="translated">commit(Ref,CommitMode)はcommit(Ref,CommitMode,infinity)と同じです。タイムアウトが切れた場合、クライアントは理由のタイムアウトで終了します。</target>
        </trans-unit>
        <trans-unit id="975db8aa4539732ff0ee2dfb613c7e625dffc732" translate="yes" xml:space="preserve">
          <source>commitFailed</source>
          <target state="translated">commitFailed</target>
        </trans-unit>
        <trans-unit id="7e4aea77a2953f1457a0d38b49acf1d461b9a701" translate="yes" xml:space="preserve">
          <source>common_test</source>
          <target state="translated">common_test</target>
        </trans-unit>
        <trans-unit id="1b53b0152534976505f715a73361f6799fa3b9f4" translate="yes" xml:space="preserve">
          <source>comp_op(OpName, Arity) -&amp;gt; boolean()</source>
          <target state="translated">comp_op（OpName、Arity）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="4f44e2cffa8f7b516c9e499285c951d788431a28" translate="yes" xml:space="preserve">
          <source>compact</source>
          <target state="translated">compact</target>
        </trans-unit>
        <trans-unit id="6a65c8bd6197684775e3bb22b33b16fdd20aa7f3" translate="yes" xml:space="preserve">
          <source>compact [flex]</source>
          <target state="translated">コンパクト</target>
        </trans-unit>
        <trans-unit id="dd252e97b6b47f7eec947ec60d1c3b02c2b40c3e" translate="yes" xml:space="preserve">
          <source>compact(ListIn) -&amp;gt; ListOut</source>
          <target state="translated">コンパクト（リストイン）-&amp;gt;リストアウト</target>
        </trans-unit>
        <trans-unit id="386cfae07cc6b4302dea2a4e1f0f9e823e17f56d" translate="yes" xml:space="preserve">
          <source>compare_levels(Level1, Level2) -&amp;gt; eq | gt | lt</source>
          <target state="translated">compare_levels（Level1、Level2）-&amp;gt; eq | gt | lt</target>
        </trans-unit>
        <trans-unit id="36d0981b3375d78be03ea98700ecec8f4e4bd4f9" translate="yes" xml:space="preserve">
          <source>compile</source>
          <target state="translated">compile</target>
        </trans-unit>
        <trans-unit id="6bb816b0dbea47ad317d7a37b02463acd4585d97" translate="yes" xml:space="preserve">
          <source>compile(Regexp) -&amp;gt; {ok, MP} | {error, ErrSpec}</source>
          <target state="translated">compile（Regexp）-&amp;gt; {ok、MP} | {エラー、ErrSpec}</target>
        </trans-unit>
        <trans-unit id="fdac821a1e3b33e3d131a97c4fefa795119827b9" translate="yes" xml:space="preserve">
          <source>compile(Regexp, Options) -&amp;gt; {ok, MP} | {error, ErrSpec}</source>
          <target state="translated">compile（Regexp、Options）-&amp;gt; {ok、MP} | {エラー、ErrSpec}</target>
        </trans-unit>
        <trans-unit id="06ae00d6350f1f8e8373c376d364c4b9f2ef7141" translate="yes" xml:space="preserve">
          <source>compile_pattern(Pattern) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-cp&quot;&gt;cp()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">compile_pattern（Pattern）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-cp&quot;&gt;cp()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac20d084c192f03422d4d714dfe9c4179807ef63" translate="yes" xml:space="preserve">
          <source>compiler</source>
          <target state="translated">compiler</target>
        </trans-unit>
        <trans-unit id="0738f4b8555630007dd0072b0045ceb7129ca75a" translate="yes" xml:space="preserve">
          <source>compiler_dir() -&amp;gt; &lt;code&gt;&lt;a href=&quot;file#type-filename&quot;&gt;file:filename()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">compiler_dir（）-&amp;gt; &lt;code&gt;&lt;a href=&quot;file#type-filename&quot;&gt;file:filename()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d2d1872d3ebbacd8c375708a57375ece8097bd0" translate="yes" xml:space="preserve">
          <source>components(Digraph) -&amp;gt; [Component]</source>
          <target state="translated">コンポーネント（ダイグラフ）-&amp;gt; [コンポーネント]</target>
        </trans-unit>
        <trans-unit id="89deb94b571abcd3d38bf175d1516dab4ad8bfbc" translate="yes" xml:space="preserve">
          <source>compose_query(QueryList) -&amp;gt; QueryString</source>
          <target state="translated">compose_query（QueryList）-&amp;gt; QueryString</target>
        </trans-unit>
        <trans-unit id="83a467a3d8bee33048ef3e83a094c349f2bdd2e7" translate="yes" xml:space="preserve">
          <source>compose_query(QueryList, Options) -&amp;gt; QueryString</source>
          <target state="translated">compose_query（QueryList、Options）-&amp;gt; QueryString</target>
        </trans-unit>
        <trans-unit id="4f0ddcaf0eec4c55b5e76e7c3760510160ac6e30" translate="yes" xml:space="preserve">
          <source>composite(Function1, Function2) -&amp;gt; Function3</source>
          <target state="translated">composite（Function1、Function2）-&amp;gt; Function3</target>
        </trans-unit>
        <trans-unit id="2c9a0fdedd9bed9e662940dc86a76aca02d478e0" translate="yes" xml:space="preserve">
          <source>compress(Data) -&amp;gt; Compressed</source>
          <target state="translated">圧縮（データ）-&amp;gt;圧縮</target>
        </trans-unit>
        <trans-unit id="391e074aa055e776c060ab7ad54605bec127dad0" translate="yes" xml:space="preserve">
          <source>concat(String1, String2) -&amp;gt; String3</source>
          <target state="translated">concat（String1、String2）-&amp;gt; String3</target>
        </trans-unit>
        <trans-unit id="4ce6c476ff719a1759697ac1019217e9a118a68b" translate="yes" xml:space="preserve">
          <source>concat(Things) -&amp;gt; string()</source>
          <target state="translated">concat（Things）-&amp;gt; string（）</target>
        </trans-unit>
        <trans-unit id="97cc041fbe504430ce6a557a4f0a5af0e137d2d5" translate="yes" xml:space="preserve">
          <source>condensation(Digraph) -&amp;gt; CondensedDigraph</source>
          <target state="translated">凝縮（ダイグラフ）-&amp;gt;凝縮ダイグラフ</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="4d80e6543987b5f69c0ac05d151b65275018e2bb" translate="yes" xml:space="preserve">
          <source>config_err/2</source>
          <target state="translated">config_err/2</target>
        </trans-unit>
        <trans-unit id="a3cc6caa3d5c90bb3063655e5a5e77aac6399cfe" translate="yes" xml:space="preserve">
          <source>configuration directories and parameters</source>
          <target state="translated">設定ディレクトリとパラメータ</target>
        </trans-unit>
        <trans-unit id="6746989237b7a068284976d022b7de3eee8d10d9" translate="yes" xml:space="preserve">
          <source>conjunction constrained_function_type constraint disjunction</source>
          <target state="translated">接続制約付き関数型制約ディジャンクション</target>
        </trans-unit>
        <trans-unit id="9a2afe300547011a85385e34655cc9219bf4fede" translate="yes" xml:space="preserve">
          <source>connect(Address, Port, Options) -&amp;gt; {ok, Socket} | {error, Reason}</source>
          <target state="translated">connect（Address、Port、Options）-&amp;gt; {ok、Socket} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="370622cf4db46ee7498ec7f55bfc67720836c2bb" translate="yes" xml:space="preserve">
          <source>connect(Address, Port, Options, Timeout) -&amp;gt;</source>
          <target state="translated">connect（アドレス、ポート、オプション、タイムアウト）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1f4edd64e75f17a976d449fff30d5297a680bdb8" translate="yes" xml:space="preserve">
          <source>connect(KeyOrName, ExtraOptions) -&amp;gt; Result</source>
          <target state="translated">connect（KeyOrName、ExtraOptions）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="868f78486f2a9a4b00139a36221c7f681667f8ba" translate="yes" xml:space="preserve">
          <source>connect(Options) -&amp;gt; Result</source>
          <target state="translated">接続（オプション）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="06b329c7e6b949b5cb3698e561f5b595982fa5b1" translate="yes" xml:space="preserve">
          <source>connect(Socket, Addr, Port, Opts) -&amp;gt;</source>
          <target state="translated">connect（Socket、Addr、Port、Opts）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2e5be28a202c1a1a9d218c470327e3cdeba0e3dc" translate="yes" xml:space="preserve">
          <source>connect(Socket, Addr, Port, Opts, Timeout) -&amp;gt;</source>
          <target state="translated">connect（Socket、Addr、Port、Opts、Timeout）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d5574c9dc86e68fb4ff2fed87557172eb245c354" translate="yes" xml:space="preserve">
          <source>connect_init(Socket, Addr, Port, Opts) -&amp;gt;</source>
          <target state="translated">connect_init（ソケット、アドレス、ポート、オプション）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1589362737416ec60bd6fc116699d981abd923f8" translate="yes" xml:space="preserve">
          <source>connect_init(Socket, Addr, Port, Opts, Timeout) -&amp;gt;</source>
          <target state="translated">connect_init（ソケット、アドレス、ポート、オプション、タイムアウト）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ab119559d2514fe9c2f92800ceca9ebd6db47964" translate="yes" xml:space="preserve">
          <source>connect_node(Node) -&amp;gt; boolean() | ignored</source>
          <target state="translated">connect_node（Node）-&amp;gt; boolean（）| 無視された</target>
        </trans-unit>
        <trans-unit id="ae73f001a386f910c26892b99aaf04e904cfd004" translate="yes" xml:space="preserve">
          <source>connection_info(ConnectionRef, Keys) -&amp;gt; ConnectionInfo</source>
          <target state="translated">connection_info（ConnectionRef、Keys）-&amp;gt; ConnectionInfo</target>
        </trans-unit>
        <trans-unit id="b8d068eba51665ed21c0f2edf3c36bb633b7c89c" translate="yes" xml:space="preserve">
          <source>cons(Item, Q1 :: &lt;code&gt;&lt;a href=&quot;#type-queue&quot;&gt;queue&lt;/a&gt;&lt;/code&gt;(Item)) -&amp;gt; Q2 :: &lt;code&gt;&lt;a href=&quot;#type-queue&quot;&gt;queue&lt;/a&gt;&lt;/code&gt;(Item)</source>
          <target state="translated">cons（アイテム、Q1 :: &lt;code&gt;&lt;a href=&quot;#type-queue&quot;&gt;queue&lt;/a&gt;&lt;/code&gt; （アイテム））-&amp;gt; Q2 :: &lt;code&gt;&lt;a href=&quot;#type-queue&quot;&gt;queue&lt;/a&gt;&lt;/code&gt; （アイテム）</target>
        </trans-unit>
        <trans-unit id="7b2dd828fc192ce296acba031555db824efbd079" translate="yes" xml:space="preserve">
          <source>consists of the name (the atom &lt;code&gt;zero&lt;/code&gt;), and a list of clauses containing the single clause &lt;code&gt;() -&amp;gt; 0&lt;/code&gt;. The clause consists of an argument list (empty), a guard (empty), and a body (which is always a list of expressions) containing the single expression &lt;code&gt;0&lt;/code&gt;. This means that to match out the name and the list of clauses of any function, you'll need to use a pattern like &lt;code&gt;?Q(&quot;'@Name'() -&amp;gt; _@_@Body.&quot;)&lt;/code&gt;, using a dummy clause whose body is a glob lifted one level.</source>
          <target state="translated">名前（ &lt;code&gt;zero&lt;/code&gt; ）と、単一の句 &lt;code&gt;() -&amp;gt; 0&lt;/code&gt; を含む句のリストで構成されます。句は、引数リスト（空）、ガード（空）、および単一の式 &lt;code&gt;0&lt;/code&gt; を含む本体（常に式のリスト）で構成されます。つまり、関数の名前と句のリストを一致させるには、 &lt;code&gt;?Q(&quot;'@Name'() -&amp;gt; _@_@Body.&quot;)&lt;/code&gt; ようなパターンをダミーを使用して使用する必要があります。本体が1レベル上げられたグロブである句。</target>
        </trans-unit>
        <trans-unit id="868fe4bcc51d9138e6ba286c24a2e7645d98dba4" translate="yes" xml:space="preserve">
          <source>constant_function(Set, AnySet) -&amp;gt; Function</source>
          <target state="translated">constant_function（Set、AnySet）-&amp;gt;関数</target>
        </trans-unit>
        <trans-unit id="40a93e2052d430b04a53abcdf31c2cb66f0db6cd" translate="yes" xml:space="preserve">
          <source>consult(Filename) -&amp;gt; {ok, Terms} | {error, Reason}</source>
          <target state="translated">コンサルト（ファイル名）-&amp;gt; {ok、Terms} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="eb7be3b35349899105657b73d46c8a2a6b0a147a" translate="yes" xml:space="preserve">
          <source>controlling_process(Socket, Pid) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">control_process（Socket、Pid）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="5413bf18b660beb63a8705ca9bd7f75ca073fc99" translate="yes" xml:space="preserve">
          <source>converse(BinRel1) -&amp;gt; BinRel2</source>
          <target state="translated">converse（BinRel1）-&amp;gt; BinRel2</target>
        </trans-unit>
        <trans-unit id="4c51b3b7d029f9096880a2342e7cd2274f73bba5" translate="yes" xml:space="preserve">
          <source>cookie() -&amp;gt; Cookie</source>
          <target state="translated">cookie（）-&amp;gt; Cookie</target>
        </trans-unit>
        <trans-unit id="aa965a0a2130653fda9de70c3838b549f500bcaf" translate="yes" xml:space="preserve">
          <source>cookie(TheCookie) -&amp;gt; true</source>
          <target state="translated">cookie（TheCookie）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="7221cc8b2793e13aa37ff0cb6363727d245cf4bb" translate="yes" xml:space="preserve">
          <source>copies(String, Number) -&amp;gt; Copies</source>
          <target state="translated">コピー（文字列、数値）-&amp;gt;コピー</target>
        </trans-unit>
        <trans-unit id="f4ff84890eb3dcf959cfcead8e0144d3cbdccd5f" translate="yes" xml:space="preserve">
          <source>copy(Source, Destination) -&amp;gt; {ok, BytesCopied} | {error, Reason}</source>
          <target state="translated">copy（Source、Destination）-&amp;gt; {ok、BytesCopied} | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="722ad3c44af17d2643ed48db612280941ca554c0" translate="yes" xml:space="preserve">
          <source>copy(Source, Destination, ByteCount) -&amp;gt;</source>
          <target state="translated">copy（Source、Destination、ByteCount）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8c46fa4b3f52b532bd80970d91f53d17a0d49f87" translate="yes" xml:space="preserve">
          <source>copy(Subject) -&amp;gt; binary()</source>
          <target state="translated">copy（Subject）-&amp;gt; binary（）</target>
        </trans-unit>
        <trans-unit id="8fbd8d3517393e1202843686109660b5c218f5b1" translate="yes" xml:space="preserve">
          <source>copy(Subject, N) -&amp;gt; binary()</source>
          <target state="translated">copy（Subject、N）-&amp;gt; binary（）</target>
        </trans-unit>
        <trans-unit id="fddd2eda380d6a1ccb0d45dbcb86fe2fb2a78f8f" translate="yes" xml:space="preserve">
          <source>copy_config(Client, Target, Source) -&amp;gt; Result</source>
          <target state="translated">copy_config（クライアント、ターゲット、ソース）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="3be000dd44b93adb33e1693489552e86b7852956" translate="yes" xml:space="preserve">
          <source>copy_config(Client, Target, Source, Timeout) -&amp;gt; Result</source>
          <target state="translated">copy_config（クライアント、ターゲット、ソース、タイムアウト）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="4add817c21dfd8c7dcde4a0acea5481c390272da" translate="yes" xml:space="preserve">
          <source>cos(X) -&amp;gt; float()</source>
          <target state="translated">cos（X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="00303aaf549d37029a12de52351eefd2fb37df9a" translate="yes" xml:space="preserve">
          <source>cosh(X) -&amp;gt; float()</source>
          <target state="translated">cosh（X）-&amp;gt; float（）</target>
        </trans-unit>
        <trans-unit id="5671fcad1da572f4ff309116ad190117f1dd4a59" translate="yes" xml:space="preserve">
          <source>count_children(SupRef) -&amp;gt; PropListOfCounts</source>
          <target state="translated">count_children（SupRef）-&amp;gt; PropListOfCounts</target>
        </trans-unit>
        <trans-unit id="a28100fa6a50a3cbd5dd6b7e69b0a4377f855523" translate="yes" xml:space="preserve">
          <source>cover</source>
          <target state="translated">cover</target>
        </trans-unit>
        <trans-unit id="4503dda6ecc1ad84be6b48e5c91ec7463dc87e8d" translate="yes" xml:space="preserve">
          <source>cprof</source>
          <target state="translated">cprof</target>
        </trans-unit>
        <trans-unit id="3c4700346b947c9354233ace3f2dc1277ae1d3db" translate="yes" xml:space="preserve">
          <source>cpu_sup</source>
          <target state="translated">cpu_sup</target>
        </trans-unit>
        <trans-unit id="69f0dc7a59452c693c84898cc4b0c49ba48f638e" translate="yes" xml:space="preserve">
          <source>crashdump_viewer</source>
          <target state="translated">crashdump_viewer</target>
        </trans-unit>
        <trans-unit id="8d23adeb6032cb30af3f7099b72d75c3376cef0c" translate="yes" xml:space="preserve">
          <source>crc32(Z) -&amp;gt; CRC</source>
          <target state="translated">crc32（Z）-&amp;gt; CRC</target>
        </trans-unit>
        <trans-unit id="8dd598ddf6c7cd2c6e391b8deeb50ac099fb52fa" translate="yes" xml:space="preserve">
          <source>crc32(Z, Data) -&amp;gt; CRC</source>
          <target state="translated">crc32（Z、データ）-&amp;gt; CRC</target>
        </trans-unit>
        <trans-unit id="d5275fe18aa498a6dde3f717c5b459f7e326a108" translate="yes" xml:space="preserve">
          <source>crc32(Z, PrevCRC, Data) -&amp;gt; CRC</source>
          <target state="translated">crc32（Z、PrevCRC、Data）-&amp;gt; CRC</target>
        </trans-unit>
        <trans-unit id="07d2cc56c134df4dc81e62e8380a5122b4be4d8d" translate="yes" xml:space="preserve">
          <source>crc32_combine(Z, CRC1, CRC2, Size2) -&amp;gt; CRC</source>
          <target state="translated">crc32_combine（Z、CRC1、CRC2、Size2）-&amp;gt; CRC</target>
        </trans-unit>
        <trans-unit id="0939ce4228d371ad665dfd0531d51ed12ce0a8ff" translate="yes" xml:space="preserve">
          <source>create(Name :: &lt;code&gt;&lt;a href=&quot;#type-name&quot;&gt;name()&lt;/a&gt;&lt;/code&gt;) -&amp;gt; ok</source>
          <target state="translated">create（Name :: &lt;code&gt;&lt;a href=&quot;#type-name&quot;&gt;name()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="3693efdc8fcd5cfda2bafd27ca11078a69f23ed5" translate="yes" xml:space="preserve">
          <source>create(Name, FileList) -&amp;gt; RetValue</source>
          <target state="translated">create（Name、FileList）-&amp;gt; RetValue</target>
        </trans-unit>
        <trans-unit id="79f61bb6b803e8d95bed1875fca88a422f68f430" translate="yes" xml:space="preserve">
          <source>create(Name, FileList, Options) -&amp;gt; RetValue</source>
          <target state="translated">create（Name、FileList、Options）-&amp;gt; RetValue</target>
        </trans-unit>
        <trans-unit id="ca12b59a6ebaaed57ca8e04a38c3dea08c037b0f" translate="yes" xml:space="preserve">
          <source>create_subscription(Client,</source>
          <target state="translated">create_subscription(Client,</target>
        </trans-unit>
        <trans-unit id="c006a621f3dfb6c432072475343e8017ff961e89" translate="yes" xml:space="preserve">
          <source>create_subscription(Client, Stream, Filter, StartTime, StopTime) -&amp;gt;</source>
          <target state="translated">create_subscription（Client、Stream、Filter、StartTime、StopTime）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3461f46982b89f02655b3a55556b2498986cc228" translate="yes" xml:space="preserve">
          <source>creates a filter which performs a &lt;code&gt;caseExactMatch&lt;/code&gt; on the attribute &lt;code&gt;sn&lt;/code&gt; and matches with the value &lt;code&gt;&quot;Bar&quot;&lt;/code&gt;. The default value of &lt;code&gt;dnAttributes&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">属性 &lt;code&gt;sn&lt;/code&gt; で &lt;code&gt;caseExactMatch&lt;/code&gt; を実行し、値 &lt;code&gt;&quot;Bar&quot;&lt;/code&gt; と一致するフィルターを作成します。 &lt;code&gt;dnAttributes&lt;/code&gt; のデフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1d7152f0f4a9a2c018578ec787fcd2393ed1f647" translate="yes" xml:space="preserve">
          <source>creates a fixed-size array of size 100, whose default value is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">サイズ100の固定サイズ配列を作成します。デフォルト値は &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a9a0b9272eab96ff64bb239d1c9f1ba201132279" translate="yes" xml:space="preserve">
          <source>creates a fixed-size array of size 100.</source>
          <target state="translated">は、サイズ100の固定サイズの配列を作成します。</target>
        </trans-unit>
        <trans-unit id="63a39dacf0314736836446a6cf5cccaef43a631e" translate="yes" xml:space="preserve">
          <source>creates an empty, extendible array whose default value is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">デフォルト値が &lt;code&gt;0&lt;/code&gt; の空の拡張可能な配列を作成します。</target>
        </trans-unit>
        <trans-unit id="4acdf494cf79649d50f2f8820d92901866c22b00" translate="yes" xml:space="preserve">
          <source>creates an extendible array with initial size 10 whose default value is &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">初期サイズが10で、デフォルト値が &lt;code&gt;-1&lt;/code&gt; の拡張可能な配列を作成します。</target>
        </trans-unit>
        <trans-unit id="1210cdffc1810f2947084bec43397aa36018c6bf" translate="yes" xml:space="preserve">
          <source>critical</source>
          <target state="translated">critical</target>
        </trans-unit>
        <trans-unit id="0460f85644bb7c87eca38663e27fe804154dff93" translate="yes" xml:space="preserve">
          <source>critical conditions</source>
          <target state="translated">危機的状況</target>
        </trans-unit>
        <trans-unit id="572c31ce6d04556dd6ff4f1c83f6e71fa3aedd6d" translate="yes" xml:space="preserve">
          <source>crl_reason()</source>
          <target state="translated">crl_reason()</target>
        </trans-unit>
        <trans-unit id="44a9713350e53858f058463d4bf7f1e542d9ca4b" translate="yes" xml:space="preserve">
          <source>crypto</source>
          <target state="translated">crypto</target>
        </trans-unit>
        <trans-unit id="838590eee32fc68f44cf5bceeb4da24441d46978" translate="yes" xml:space="preserve">
          <source>crypto_key_fun(CryptoKeyFun) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">crypto_key_fun（CryptoKeyFun）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="1f62b0a89bf4fcb5dc6c7e06ec998eeb34084a4c" translate="yes" xml:space="preserve">
          <source>cspan(String, Chars) -&amp;gt; Length</source>
          <target state="translated">cspan（文字列、文字）-&amp;gt;長さ</target>
        </trans-unit>
        <trans-unit id="589e942e00a7dd64a273deb5041c7ce469f2bad7" translate="yes" xml:space="preserve">
          <source>ct</source>
          <target state="translated">ct</target>
        </trans-unit>
        <trans-unit id="6ee59c2355edd903c06745611fcc2a37002ce241" translate="yes" xml:space="preserve">
          <source>ct_cover</source>
          <target state="translated">ct_cover</target>
        </trans-unit>
        <trans-unit id="6a9c9f65bbe99f3450ba6f72efd86ade2cdb185d" translate="yes" xml:space="preserve">
          <source>ct_ftp</source>
          <target state="translated">ct_ftp</target>
        </trans-unit>
        <trans-unit id="a7ca1497e22192fb2a5ea410275301d5f7ab3c26" translate="yes" xml:space="preserve">
          <source>ct_hooks</source>
          <target state="translated">ct_hooks</target>
        </trans-unit>
        <trans-unit id="5c3e2499b133f6ead1697b8778baa3e63813f72b" translate="yes" xml:space="preserve">
          <source>ct_master</source>
          <target state="translated">ct_master</target>
        </trans-unit>
        <trans-unit id="a979fe410f41af35dfbd744b9e3149738798a918" translate="yes" xml:space="preserve">
          <source>ct_netconfc</source>
          <target state="translated">ct_netconfc</target>
        </trans-unit>
        <trans-unit id="ea8e0177c743a3ed1981aa66c63a7625205a8678" translate="yes" xml:space="preserve">
          <source>ct_property_test</source>
          <target state="translated">ct_property_test</target>
        </trans-unit>
        <trans-unit id="40353d30d48dbf9f957c48068895e6b1d6beff2b" translate="yes" xml:space="preserve">
          <source>ct_rpc</source>
          <target state="translated">ct_rpc</target>
        </trans-unit>
        <trans-unit id="a54cb600796fb43b2ed63876b13d9202d383c4f7" translate="yes" xml:space="preserve">
          <source>ct_run</source>
          <target state="translated">ct_run</target>
        </trans-unit>
        <trans-unit id="4d366bcf5339a96b748d8a4d4f1c8fe15535b23e" translate="yes" xml:space="preserve">
          <source>ct_slave</source>
          <target state="translated">ct_slave</target>
        </trans-unit>
        <trans-unit id="c6d7ee80c1ab363c37dffc39a230d7ec186e4350" translate="yes" xml:space="preserve">
          <source>ct_snmp</source>
          <target state="translated">ct_snmp</target>
        </trans-unit>
        <trans-unit id="8b0515c9d9eae90e7d070c3e8e20ab8c0c29eca3" translate="yes" xml:space="preserve">
          <source>ct_ssh</source>
          <target state="translated">ct_ssh</target>
        </trans-unit>
        <trans-unit id="21918137b9e95c6d1ae25919d8befad954fc22b7" translate="yes" xml:space="preserve">
          <source>ct_telnet</source>
          <target state="translated">ct_telnet</target>
        </trans-unit>
        <trans-unit id="c68581ff92d3440330845bbcf2b295dedef37bf6" translate="yes" xml:space="preserve">
          <source>ct_testspec</source>
          <target state="translated">ct_testspec</target>
        </trans-unit>
        <trans-unit id="9331b1637c234fdbdb120b56c6b183b34dd662ea" translate="yes" xml:space="preserve">
          <source>current_key(RegHandle) -&amp;gt; ReturnValue</source>
          <target state="translated">current_key（RegHandle）-&amp;gt; ReturnValue</target>
        </trans-unit>
        <trans-unit id="226f0b09fa6aa779ab590ef23d09cebd6daff686" translate="yes" xml:space="preserve">
          <source>cursor(QH) -&amp;gt; Cursor</source>
          <target state="translated">カーソル（QH）-&amp;gt;カーソル</target>
        </trans-unit>
        <trans-unit id="593270bf214c51284e0f73efd69329fd76678535" translate="yes" xml:space="preserve">
          <source>cursor(QH, Options) -&amp;gt; Cursor</source>
          <target state="translated">カーソル（QH、オプション）-&amp;gt;カーソル</target>
        </trans-unit>
        <trans-unit id="fd41950e3989cfa35ed6d935ecb7ac40b30be32e" translate="yes" xml:space="preserve">
          <source>cyclic_strong_components(Digraph) -&amp;gt; [StrongComponent]</source>
          <target state="translated">cycle_strong_components（Digraph）-&amp;gt; [StrongComponent]</target>
        </trans-unit>
        <trans-unit id="3c363836cf4e16666669a25da280a1865c2d2874" translate="yes" xml:space="preserve">
          <source>d</source>
          <target state="translated">d</target>
        </trans-unit>
        <trans-unit id="ed441f2fcf2c9eab3035bccda4b5492e18ba1bb8" translate="yes" xml:space="preserve">
          <source>daeh(Q :: &lt;code&gt;&lt;a href=&quot;#type-queue&quot;&gt;queue&lt;/a&gt;&lt;/code&gt;(Item)) -&amp;gt; Item</source>
          <target state="translated">daeh（Q :: &lt;code&gt;&lt;a href=&quot;#type-queue&quot;&gt;queue&lt;/a&gt;&lt;/code&gt; （アイテム））-&amp;gt;アイテム</target>
        </trans-unit>
        <trans-unit id="a6aac24f7e7b52db7d71db304bb653afa0c4d667" translate="yes" xml:space="preserve">
          <source>daemon_info(Daemon) -&amp;gt; {ok, DaemonInfo} | {error, term()}</source>
          <target state="translated">daemon_info（Daemon）-&amp;gt; {ok、DaemonInfo} | {エラー、用語（）}</target>
        </trans-unit>
        <trans-unit id="9884e793180c5a11c6e6744ab1bd2d33cb920524" translate="yes" xml:space="preserve">
          <source>daemons</source>
          <target state="translated">daemons</target>
        </trans-unit>
        <trans-unit id="1bd41877f2856c4d7b5bc551b1c51509f9f61a5b" translate="yes" xml:space="preserve">
          <source>data types</source>
          <target state="translated">データ型</target>
        </trans-unit>
        <trans-unit id="1e8cc122f5326c3e32c633d431cb69c1554ebb0b" translate="yes" xml:space="preserve">
          <source>datasync(IoDevice) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">datasync（IoDevice）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="480c43d599389866caca24b63e1cdb9b26feb1c1" translate="yes" xml:space="preserve">
          <source>date() -&amp;gt; Date</source>
          <target state="translated">日付（）-&amp;gt;日付</target>
        </trans-unit>
        <trans-unit id="3495d4b1c222236a1a714a7ad463b6bc6da7fcaa" translate="yes" xml:space="preserve">
          <source>date_to_gregorian_days(Date) -&amp;gt; Days</source>
          <target state="translated">date_to_gregorian_days（Date）-&amp;gt;日</target>
        </trans-unit>
        <trans-unit id="e9c7ff77828297abcc3f386f6123f558bbdcb5fd" translate="yes" xml:space="preserve">
          <source>date_to_gregorian_days(Year, Month, Day) -&amp;gt; Days</source>
          <target state="translated">date_to_gregorian_days（年、月、日）-&amp;gt;日</target>
        </trans-unit>
        <trans-unit id="717d89be8437a011121ff677ef23f35a22b2476e" translate="yes" xml:space="preserve">
          <source>datetime_to_gregorian_seconds(DateTime) -&amp;gt; Seconds</source>
          <target state="translated">datetime_to_gregorian_seconds（DateTime）-&amp;gt;秒</target>
        </trans-unit>
        <trans-unit id="85ceb65db6b54a8a2661a23da8563a3e21071829" translate="yes" xml:space="preserve">
          <source>day_of_the_week(Date) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-daynum&quot;&gt;daynum()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">day_of_the_week（Date）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-daynum&quot;&gt;daynum()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1498e9cfd850f15b3c5cdec224e2f22770ef2d5c" translate="yes" xml:space="preserve">
          <source>day_of_the_week(Year, Month, Day) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-daynum&quot;&gt;daynum()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">day_of_the_week（Year、Month、Day）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-daynum&quot;&gt;daynum()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d58201c6a55c4d1c368f212ccb94ceab277b9ff" translate="yes" xml:space="preserve">
          <source>dbg</source>
          <target state="translated">dbg</target>
        </trans-unit>
        <trans-unit id="e2fdb7ab8eb295166247537e7c85222d5438e23d" translate="yes" xml:space="preserve">
          <source>dbg(3), &lt;code&gt;&lt;a href=&quot;eprof&quot;&gt;eprof&lt;/a&gt;&lt;/code&gt;(3), erlang(3), io(3), &lt;code&gt;&lt;a href=&quot;fprof_chapter&quot;&gt;Tools User's Guide&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">dbg（3）、 &lt;code&gt;&lt;a href=&quot;eprof&quot;&gt;eprof&lt;/a&gt;&lt;/code&gt; （3）、erlang（3）、io（3）、 &lt;code&gt;&lt;a href=&quot;fprof_chapter&quot;&gt;Tools User's Guide&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32faaecac742100f7753f0c1d0aa0add01b4046b" translate="yes" xml:space="preserve">
          <source>debug</source>
          <target state="translated">debug</target>
        </trans-unit>
        <trans-unit id="3875aa0d6dc0d110607bf7e5446ebf078a229c04" translate="yes" xml:space="preserve">
          <source>debug |</source>
          <target state="translated">デバッグ</target>
        </trans-unit>
        <trans-unit id="9e7b5d64ea9989cd1b08153ba7bf3bd3089e2a92" translate="yes" xml:space="preserve">
          <source>debug-level messages</source>
          <target state="translated">デバッグレベルメッセージ</target>
        </trans-unit>
        <trans-unit id="4a02794713dea1e5283e0616c74d612a5dfa98fc" translate="yes" xml:space="preserve">
          <source>debug_options(Options) -&amp;gt; [&lt;code&gt;&lt;a href=&quot;#type-dbg_opt&quot;&gt;dbg_opt()&lt;/a&gt;&lt;/code&gt;]</source>
          <target state="translated">debug_options（Options）-&amp;gt; [ &lt;code&gt;&lt;a href=&quot;#type-dbg_opt&quot;&gt;dbg_opt()&lt;/a&gt;&lt;/code&gt; ]</target>
        </trans-unit>
        <trans-unit id="5fbd02245cf700ea94d638c8d76924ecca52d330" translate="yes" xml:space="preserve">
          <source>debugger</source>
          <target state="translated">debugger</target>
        </trans-unit>
        <trans-unit id="0f695a04bca7839cd439ef3ea9c37b97bdc49f13" translate="yes" xml:space="preserve">
          <source>debugging the application (agent and/or manager)</source>
          <target state="translated">アプリケーションのデバッグ</target>
        </trans-unit>
        <trans-unit id="69272a8b10a81b9f33e74ccb9b7b088a0a5d9968" translate="yes" xml:space="preserve">
          <source>decode(Base64) -&amp;gt; Data</source>
          <target state="translated">デコード（Base64）-&amp;gt;データ</target>
        </trans-unit>
        <trans-unit id="1b6e3dd68188945d5898f52f270bab1270b9ca82" translate="yes" xml:space="preserve">
          <source>decode_time.xls -&amp;gt; Decoding result</source>
          <target state="translated">decode_time.xls-&amp;gt;デコード結果</target>
        </trans-unit>
        <trans-unit id="6ed7997a989982a21b6669116d26b7ce40ae6cd2" translate="yes" xml:space="preserve">
          <source>decode_to_string(Base64) -&amp;gt; DataString</source>
          <target state="translated">decode_to_string（Base64）-&amp;gt; DataString</target>
        </trans-unit>
        <trans-unit id="8c5b728310f6cc6fb390cbbc3362e37082750eb3" translate="yes" xml:space="preserve">
          <source>decode_unsigned(Subject) -&amp;gt; Unsigned</source>
          <target state="translated">decode_unsigned（Subject）-&amp;gt;符号なし</target>
        </trans-unit>
        <trans-unit id="4032615ba7b6706e201ec762c189d6a760b44be4" translate="yes" xml:space="preserve">
          <source>decode_unsigned(Subject, Endianness) -&amp;gt; Unsigned</source>
          <target state="translated">decode_unsigned（Subject、Endianness）-&amp;gt;符号なし</target>
        </trans-unit>
        <trans-unit id="6eea90a21ec183ceaf6537bb63f17e3b87e0aa83" translate="yes" xml:space="preserve">
          <source>deep_char_list(Term) -&amp;gt; boolean()</source>
          <target state="translated">deep_char_list（Term）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="dd9e69812156975a79d45ba93e8425c3e552c991" translate="yes" xml:space="preserve">
          <source>deep_latin1_char_list(Term) -&amp;gt; boolean()</source>
          <target state="translated">deep_latin1_char_list（用語）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="0a2043a236beefb84c7833e0c14a204dd1015616" translate="yes" xml:space="preserve">
          <source>default values for variables and table columns.</source>
          <target state="translated">変数とテーブルの列のデフォルト値。</target>
        </trans-unit>
        <trans-unit id="6dfbeb579535756d1d833a63a52c983776c49a98" translate="yes" xml:space="preserve">
          <source>default(Array :: &lt;code&gt;&lt;a href=&quot;#type-array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;(Type)) -&amp;gt; Value :: Type</source>
          <target state="translated">default（Array :: &lt;code&gt;&lt;a href=&quot;#type-array&quot;&gt;array&lt;/a&gt;&lt;/code&gt; （Type））-&amp;gt; Value :: Type</target>
        </trans-unit>
        <trans-unit id="24fc0758faf135b15faa3e7ed222edb4629efb1d" translate="yes" xml:space="preserve">
          <source>default_algorithms() -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-algs_list&quot;&gt;algs_list()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">default_algorithms（）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-algs_list&quot;&gt;algs_list()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="264b4dda4cea310b78c1709f2558a0a3dcdb5c76" translate="yes" xml:space="preserve">
          <source>default_encoding() -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-source_encoding&quot;&gt;source_encoding()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">default_encoding（）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-source_encoding&quot;&gt;source_encoding()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24fe8b716f4cee62d59e332592f6b1465be6a64c" translate="yes" xml:space="preserve">
          <source>deflate(Z, Data) -&amp;gt; Compressed</source>
          <target state="translated">deflate（Z、Data）-&amp;gt;圧縮</target>
        </trans-unit>
        <trans-unit id="c40affb1ff2ef7ca274ec90b460e9a78e7b62385" translate="yes" xml:space="preserve">
          <source>deflate(Z, Data, Flush) -&amp;gt; Compressed</source>
          <target state="translated">deflate（Z、Data、Flush）-&amp;gt;圧縮</target>
        </trans-unit>
        <trans-unit id="420e6e61b6ac2d62d6b4cc3381050d76fb47cc7a" translate="yes" xml:space="preserve">
          <source>deflateEnd(Z) -&amp;gt; ok</source>
          <target state="translated">deflateEnd（Z）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="ad20d26c4954672fcd9cb6b5244f2cdb650dc13f" translate="yes" xml:space="preserve">
          <source>deflateInit(Z) -&amp;gt; ok</source>
          <target state="translated">deflateInit（Z）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="a2160a91ca63bf9d640e3c87189169b341912d36" translate="yes" xml:space="preserve">
          <source>deflateInit(Z, Level) -&amp;gt; ok</source>
          <target state="translated">deflateInit（Z、Level）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="58074a17e59819ae62d4cffb30a109b7193a11d7" translate="yes" xml:space="preserve">
          <source>deflateInit(Z, Level, Method, WindowBits, MemLevel, Strategy) -&amp;gt;</source>
          <target state="translated">deflateInit（Z、レベル、メソッド、ウィンドウビット、メモリレベル、戦略）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f351c0f6cf06fd17be25a82f9adbcf66f7ffc8f9" translate="yes" xml:space="preserve">
          <source>deflateParams(Z, Level, Strategy) -&amp;gt; ok</source>
          <target state="translated">deflateParams（Z、Level、Strategy）-&amp;gt;わかりました</target>
        </trans-unit>
        <trans-unit id="bf0a216d1e2f3fd71a2bd8f6737431f06946ff1d" translate="yes" xml:space="preserve">
          <source>deflateReset(Z) -&amp;gt; ok</source>
          <target state="translated">deflateReset（Z）-&amp;gt; ok</target>
        </trans-unit>
        <trans-unit id="0fe1b3602c3f3f60389099d3bf77eb88024e998f" translate="yes" xml:space="preserve">
          <source>deflateSetDictionary(Z, Dictionary) -&amp;gt; Adler32</source>
          <target state="translated">deflateSetDictionary（Z、Dictionary）-&amp;gt; Adler32</target>
        </trans-unit>
        <trans-unit id="f87bec0d7c334b53e899e581233263600c1efe41" translate="yes" xml:space="preserve">
          <source>del_binding(Name, BindingStruct) -&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-binding_struct&quot;&gt;binding_struct()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">del_binding（Name、BindingStruct）-&amp;gt; &lt;code&gt;&lt;a href=&quot;#type-binding_struct&quot;&gt;binding_struct()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fdee6484dea620842afe59e404db9b4090eac326" translate="yes" xml:space="preserve">
          <source>del_dir(Dir) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">del_dir（Dir）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="f88864510fe211fc5c06668e2dd14806e61fa002" translate="yes" xml:space="preserve">
          <source>del_edge(G, E) -&amp;gt; true</source>
          <target state="translated">del_edge（G、E）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="5053f07646f0f8c2d66c6c91b8bc89ecc6491eb2" translate="yes" xml:space="preserve">
          <source>del_edges(G, Edges) -&amp;gt; true</source>
          <target state="translated">del_edges（G、Edges）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="a135948d159b865b2e61766eea72896bc56a01ce" translate="yes" xml:space="preserve">
          <source>del_element(Element, Ordset1) -&amp;gt; Ordset2</source>
          <target state="translated">del_element（Element、Ordset1）-&amp;gt; Ordset2</target>
        </trans-unit>
        <trans-unit id="3f74b0b41d4b9aa7f82f1ac81516fd2dd150a16d" translate="yes" xml:space="preserve">
          <source>del_element(Element, Set1) -&amp;gt; Set2</source>
          <target state="translated">del_element（Element、Set1）-&amp;gt; Set2</target>
        </trans-unit>
        <trans-unit id="75b4a6f0b1df38d883d973ee43133d3fba27d73d" translate="yes" xml:space="preserve">
          <source>del_lock(Id) -&amp;gt; true</source>
          <target state="translated">del_lock（Id）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="bdf5d61a3f3bd2cdc298e8fef3261d0df6d26c90" translate="yes" xml:space="preserve">
          <source>del_lock(Id, Nodes) -&amp;gt; true</source>
          <target state="translated">del_lock（Id、Nodes）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="d2fd4f55abcc9073604c7cdb39ba4f1ed8564f07" translate="yes" xml:space="preserve">
          <source>del_path(G, V1, V2) -&amp;gt; true</source>
          <target state="translated">del_path（G、V1、V2）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="9f055613ce1f9041de8d8abc2f51ca40c0c3fc60" translate="yes" xml:space="preserve">
          <source>del_path(NameOrDir) -&amp;gt; boolean() | {error, What}</source>
          <target state="translated">del_path（NameOrDir）-&amp;gt; boolean（）| {エラー、何}</target>
        </trans-unit>
        <trans-unit id="8fcfe56d7a102e441f45853cb70b06b1b873bab1" translate="yes" xml:space="preserve">
          <source>del_vertex(G, V) -&amp;gt; true</source>
          <target state="translated">del_vertex（G、V）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="c4939add0d83c5595ce2a244fc8c3a34dfcfd18d" translate="yes" xml:space="preserve">
          <source>del_vertices(G, Vertices) -&amp;gt; true</source>
          <target state="translated">del_vertices（G、Vertices）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="fb037fd6d1547c90c58e89daee8c85d3f18a0955" translate="yes" xml:space="preserve">
          <source>delete(Elem, List1) -&amp;gt; List2</source>
          <target state="translated">delete（Elem、List1）-&amp;gt; List2</target>
        </trans-unit>
        <trans-unit id="cef25e205a8a0f5849ef736b51130ea7797625bc" translate="yes" xml:space="preserve">
          <source>delete(Element, Set1) -&amp;gt; Set2</source>
          <target state="translated">delete（Element、Set1）-&amp;gt; Set2</target>
        </trans-unit>
        <trans-unit id="0528d49a9aff43b64f36d9f9a5fd041c8f99914a" translate="yes" xml:space="preserve">
          <source>delete(Filename) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">delete（Filename）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="9f78d23f87ddf3665524d25428353b83a1d66986" translate="yes" xml:space="preserve">
          <source>delete(G) -&amp;gt; true</source>
          <target state="translated">delete（G）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="400956421291c0d96e7149cfa77a838dacbc12d2" translate="yes" xml:space="preserve">
          <source>delete(Key, List) -&amp;gt; List</source>
          <target state="translated">delete（Key、List）-&amp;gt;リスト</target>
        </trans-unit>
        <trans-unit id="7472210320372db8e8a5404de0ce4f05afc401a0" translate="yes" xml:space="preserve">
          <source>delete(Key, Tree1) -&amp;gt; Tree2</source>
          <target state="translated">delete（Key、Tree1）-&amp;gt; Tree2</target>
        </trans-unit>
        <trans-unit id="fcb685d5c516624acc03cbb0ee674c772d0cb530" translate="yes" xml:space="preserve">
          <source>delete(Module) -&amp;gt; boolean()</source>
          <target state="translated">delete（Module）-&amp;gt; boolean（）</target>
        </trans-unit>
        <trans-unit id="37567bdba3ea297c1e3affed20e0c961f0c74c08" translate="yes" xml:space="preserve">
          <source>delete(Name :: &lt;code&gt;&lt;a href=&quot;#type-name&quot;&gt;name()&lt;/a&gt;&lt;/code&gt;) -&amp;gt; ok</source>
          <target state="translated">delete（Name :: &lt;code&gt;&lt;a href=&quot;#type-name&quot;&gt;name()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt; ok</target>
        </trans-unit>
        <trans-unit id="19834de1d06b0cd464dd4b6c04a805e2cbbb8dd7" translate="yes" xml:space="preserve">
          <source>delete(Name, Key) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">delete（Name、Key）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="e9e3b290875459a0890d43e6a988565b5c30187a" translate="yes" xml:space="preserve">
          <source>delete(Tab) -&amp;gt; true</source>
          <target state="translated">delete（Tab）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="c311afe02eee5c96e16a1b51b071409cd0f0ab09" translate="yes" xml:space="preserve">
          <source>delete(Tab, Key) -&amp;gt; true</source>
          <target state="translated">delete（Tab、Key）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="b5f982303bf3f25806b5c3ac6162cce5d193b3a9" translate="yes" xml:space="preserve">
          <source>delete_all_objects(Name) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">delete_all_objects（Name）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
        <trans-unit id="0fdb85b5e4f053b3b2af86dc889e6a8f5dd8d7dc" translate="yes" xml:space="preserve">
          <source>delete_all_objects(Tab) -&amp;gt; true</source>
          <target state="translated">delete_all_objects（Tab）-&amp;gt; true</target>
        </trans-unit>
        <trans-unit id="38599d8ccdc4e48acbd6b58ac6cbe9f61f787b52" translate="yes" xml:space="preserve">
          <source>delete_any(Element, Set1) -&amp;gt; Set2</source>
          <target state="translated">delete_any（Element、Set1）-&amp;gt; Set2</target>
        </trans-unit>
        <trans-unit id="16f025b31f6ec89966b5ba51a122bb421a57e382" translate="yes" xml:space="preserve">
          <source>delete_any(Key, Tree1) -&amp;gt; Tree2</source>
          <target state="translated">delete_any（Key、Tree1）-&amp;gt; Tree2</target>
        </trans-unit>
        <trans-unit id="a94f8d33e74fbae42bcd311b0985d6b193a70777" translate="yes" xml:space="preserve">
          <source>delete_child(SupRef, Id) -&amp;gt; Result</source>
          <target state="translated">delete_child（SupRef、Id）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="0ad9d5b97e7eeb60df24922a14bf6c0faf337050" translate="yes" xml:space="preserve">
          <source>delete_config(Client, Target) -&amp;gt; Result</source>
          <target state="translated">delete_config（クライアント、ターゲット）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="03498a62d88d97056669e2fb8b1b5212ddd36925" translate="yes" xml:space="preserve">
          <source>delete_config(Client, Target, Timeout) -&amp;gt; Result</source>
          <target state="translated">delete_config（クライアント、ターゲット、タイムアウト）-&amp;gt;結果</target>
        </trans-unit>
        <trans-unit id="21a64cb57bd6c4d1f0adffb760a8b3f6c55dfe30" translate="yes" xml:space="preserve">
          <source>delete_cursor(QueryCursor) -&amp;gt; ok</source>
          <target state="translated">delete_cursor（QueryCursor）-&amp;gt; ok</target>
        </trans-unit>
        <trans-unit id="8b6710b10e64178c8a46f162887d7e410c728ba4" translate="yes" xml:space="preserve">
          <source>delete_key(RegHandle) -&amp;gt; ReturnValue</source>
          <target state="translated">delete_key（RegHandle）-&amp;gt; ReturnValue</target>
        </trans-unit>
        <trans-unit id="b23d2978af16fdb552d14549ae1cec0e0b361e28" translate="yes" xml:space="preserve">
          <source>delete_module(Module) -&amp;gt; true | undefined</source>
          <target state="translated">delete_module（Module）-&amp;gt; true | 未定義</target>
        </trans-unit>
        <trans-unit id="50f77e0fc0819bb7ceddfe11960464daab7a15e1" translate="yes" xml:space="preserve">
          <source>delete_object(Name, Object) -&amp;gt; ok | {error, Reason}</source>
          <target state="translated">delete_object（Name、Object）-&amp;gt; ok | {エラー、理由}</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
