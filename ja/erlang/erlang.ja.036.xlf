<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="a53a9f4087442a15c8d05293fde6edfea4bb383c" translate="yes" xml:space="preserve">
          <source>This module implements the command-line interface for running tests and basic functions for &lt;code&gt;Common Test&lt;/code&gt; case issues, such as configuration and logging.</source>
          <target state="translated">このモジュールは、テストを実行するためのコマンドラインインターフェイスと、構成やロギングなどの &lt;code&gt;Common Test&lt;/code&gt; ケースの問題の基本機能を実装します。</target>
        </trans-unit>
        <trans-unit id="c9a16d56697c4875fd3dc95099670093ace6758a" translate="yes" xml:space="preserve">
          <source>This module implements the main API for logging in Erlang/OTP. To create a log event, use the &lt;code&gt;&lt;a href=&quot;#logging_API&quot;&gt;API functions&lt;/a&gt;&lt;/code&gt; or the log &lt;code&gt;&lt;a href=&quot;#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt;, for example:</source>
          <target state="translated">このモジュールは、Erlang / OTPにログインするためのメインAPIを実装します。ログイベントを作成するには、 &lt;code&gt;&lt;a href=&quot;#logging_API&quot;&gt;API functions&lt;/a&gt;&lt;/code&gt; またはログ &lt;code&gt;&lt;a href=&quot;#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt; 。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="34096d8559e322df745393832ab2c6dfe7da7fb5" translate="yes" xml:space="preserve">
          <source>This module is a &lt;code&gt;gen_event&lt;/code&gt; handler module that can be installed in any &lt;code&gt;gen_event&lt;/code&gt; process. It logs onto disk all events that are sent to an event manager. Each event is written as a binary, which makes the logging very fast. However, a tool such as the Report Browser (&lt;code&gt;rb(3)&lt;/code&gt;) must be used to read the files. The events are written to multiple files. When all files have been used, the first one is reused and overwritten. The directory location, the number of files, and the size of each file are configurable. The directory will include one file called &lt;code&gt;index&lt;/code&gt;, and report files &lt;code&gt;1, 2, ...&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、任意の &lt;code&gt;gen_event&lt;/code&gt; プロセスにインストールできる &lt;code&gt;gen_event&lt;/code&gt; ハンドラモジュールです。イベントマネージャに送信されるすべてのイベントをディスクにログオンします。各イベントはバイナリとして書き込まれるため、ロギングが非常に高速になります。ただし、ファイルを読み取るには、レポートブラウザ（ &lt;code&gt;rb(3)&lt;/code&gt; ）などのツールを使用する必要があります。イベントは複数のファイルに書き込まれます。すべてのファイルが使用されると、最初のファイルが再利用されて上書きされます。ディレクトリの場所、ファイル数、各ファイルのサイズは設定可能です。ディレクトリには、 &lt;code&gt;index&lt;/code&gt; という名前の1つのファイルと、レポートファイル &lt;code&gt;1, 2, ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91f4aea2b0c25de578d81458879b8b8a6606f33f" translate="yes" xml:space="preserve">
          <source>This module is a first step to run property-based tests in the &lt;code&gt;Common Test&lt;/code&gt; framework. A property testing tool like QuickCheck or PropEr is assumed to be installed.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Common Test&lt;/code&gt; フレームワークでプロパティベースのテストを実行するための最初のステップです。QuickCheckやPropErなどのプロパティテストツールがインストールされていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="745e849710741c8126631867ff49314e84421edc" translate="yes" xml:space="preserve">
          <source>This module is a front end to the pretty-printing library module &lt;code&gt;prettypr&lt;/code&gt;, for text formatting of abstract syntax trees defined by the module &lt;code&gt;erl_syntax&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、モジュール &lt;code&gt;erl_syntax&lt;/code&gt; によって定義された抽象構文ツリーのテキスト形式を設定するためのpretty-printingライブラリモジュール &lt;code&gt;prettypr&lt;/code&gt; のフロントエンドです。</target>
        </trans-unit>
        <trans-unit id="771c2457f87cf1d0281342c6af1f3ab5bb5e2564" translate="yes" xml:space="preserve">
          <source>This module is also used by the test module described in the next section.</source>
          <target state="translated">このモジュールは、次のセクションで説明するテストモジュールでも使用されます。</target>
        </trans-unit>
        <trans-unit id="029ed3af3c0fa1d9308479815ba39c6258f71e21" translate="yes" xml:space="preserve">
          <source>This module is an interface to the Erlang built-in term storage BIFs. These provide the ability to store very large quantities of data in an Erlang runtime system, and to have constant access time to the data. (In the case of &lt;code&gt;ordered_set&lt;/code&gt;, see below, access time is proportional to the logarithm of the number of stored objects.)</source>
          <target state="translated">このモジュールは、Erlang組み込みの用語ストレージBIFへのインターフェースです。これらは、Erlangランタイムシステムに非常に大量のデータを格納し、データへのアクセス時間を一定にする機能を提供します。（ &lt;code&gt;ordered_set&lt;/code&gt; の場合、以下を参照してください。アクセス時間は、格納されたオブジェクトの数の対数に比例します。）</target>
        </trans-unit>
        <trans-unit id="2bf3be01bc933bf9be0bb2caf2dc7622f94a43df" translate="yes" xml:space="preserve">
          <source>This module is deprecated. For a description of the Magic Cookie system, refer to &lt;code&gt;Distributed Erlang&lt;/code&gt; in the Erlang Reference Manual.</source>
          <target state="translated">This module is deprecated. For a description of the Magic Cookie system, refer to &lt;code&gt;Distributed Erlang&lt;/code&gt; in the Erlang Reference Manual.</target>
        </trans-unit>
        <trans-unit id="2a93d2db2466d23d6026908c314c14a83563ca6b" translate="yes" xml:space="preserve">
          <source>This module is mainly intended for internal use within OTP, but it has two functions that are exported for public use.</source>
          <target state="translated">このモジュールは主にOTP内での内部使用を目的としていますが、公開用にエクスポートされる2つの関数を持っています。</target>
        </trans-unit>
        <trans-unit id="1a37f6b1919b03e1a3eef60f562daa64d563a0b3" translate="yes" xml:space="preserve">
          <source>This module is preloaded and contains the code for the &lt;code&gt;init&lt;/code&gt; system process that coordinates the startup of the system. The first function evaluated at startup is &lt;code&gt;boot(BootArgs)&lt;/code&gt;, where &lt;code&gt;BootArgs&lt;/code&gt; is a list of command-line arguments supplied to the Erlang runtime system from the local operating system; see &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="translated">このモジュールはプリロードされており、システムの起動を調整する &lt;code&gt;init&lt;/code&gt; システムプロセスのコードが含まれています。起動時に評価される最初の関数は &lt;code&gt;boot(BootArgs)&lt;/code&gt; です &lt;code&gt;BootArgs&lt;/code&gt; は、ローカルオペレーティングシステムからErlangランタイムシステムに提供されるコマンドライン引数のリストです。 &lt;code&gt;erl(1)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2f8550670270cc6c0c154e6b678e3322ac083e01" translate="yes" xml:space="preserve">
          <source>This module is responsible for handling GET requests to regular files. GET requests for parts of files is handled by &lt;code&gt;mod_range&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、通常のファイルへのGETリクエストの処理を担当します。ファイルの一部に対するGETリクエストは &lt;code&gt;mod_range&lt;/code&gt; によって処理されます。</target>
        </trans-unit>
        <trans-unit id="539b25aff993fcacaf4286ade9ec0f542cedebde" translate="yes" xml:space="preserve">
          <source>This module is responsible for handling HEAD requests to regular files. HEAD requests for dynamic content is handled by each module responsible for dynamic content.</source>
          <target state="translated">このモジュールは、通常のファイルへの HEAD リクエストの処理を担当します。動的コンテンツに対する HEAD リクエストは、動的コンテンツを担当する各モジュールが処理します。</target>
        </trans-unit>
        <trans-unit id="5ce2d8127480b9b1949b76303752c4240c4a9505" translate="yes" xml:space="preserve">
          <source>This module is the basic Erlang parser that converts tokens into the abstract form of either forms (that is, top-level constructs), expressions, or terms. The Abstract Format is described in the &lt;code&gt;ERTS User's Guide&lt;/code&gt;. Notice that a token list must end with the &lt;strong&gt;dot&lt;/strong&gt; token to be acceptable to the parse functions (see the &lt;code&gt;&lt;a href=&quot;erl_scan&quot;&gt;erl_scan(3)&lt;/a&gt;&lt;/code&gt;) module.</source>
          <target state="translated">このモジュールは基本的なErlangパーサーであり、トークンを抽象的な形（つまり、最上位の構成体）、式、または用語のいずれかの抽象的な形に変換します。抽象形式については、 &lt;code&gt;ERTS User's Guide&lt;/code&gt; 説明しています。解析関数（ &lt;code&gt;&lt;a href=&quot;erl_scan&quot;&gt;erl_scan(3)&lt;/a&gt;&lt;/code&gt; を参照）モジュールが受け入れられるようにするには、トークンリストの最後に&lt;strong&gt;ドット&lt;/strong&gt;トークンを付ける必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="bc2b019e4ec5090f2acbc77c196c921bcb3de610" translate="yes" xml:space="preserve">
          <source>This module is the default error report module, but can be explicitly configured, see &lt;code&gt;&lt;a href=&quot;snmpa_error#desc&quot;&gt;snmpa_error&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールはデフォルトのエラー報告モジュールですが、明示的に構成できます &lt;code&gt;&lt;a href=&quot;snmpa_error#desc&quot;&gt;snmpa_error&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="84c431043a09432c4f87c8d3c357236a55bbfcb6" translate="yes" xml:space="preserve">
          <source>This module is the interface to the XML parser, it handles XML 1.0.</source>
          <target state="translated">このモジュールは XML パーサーへのインターフェイスであり、XML 1.0 を扱います。</target>
        </trans-unit>
        <trans-unit id="3104bc131d319b6e5efc35816fb7e2161d34e06f" translate="yes" xml:space="preserve">
          <source>This module is the interface to the XML parser, it handles XML 1.0. The XML parser is activated through &lt;code&gt;xmerl_scan:string/[1,2]&lt;/code&gt; or &lt;code&gt;xmerl_scan:file/[1,2]&lt;/code&gt;. It returns records of the type defined in xmerl.hrl. See also &lt;code&gt;tutorial&lt;/code&gt; on customization functions.</source>
          <target state="translated">このモジュールはXMLパーサーへのインターフェースであり、XML 1.0を処理します。XMLパーサーは、 &lt;code&gt;xmerl_scan:string/[1,2]&lt;/code&gt; または &lt;code&gt;xmerl_scan:file/[1,2]&lt;/code&gt; によってアクティブ化されます。xmerl.hrlで定義されたタイプのレコードを返します。カスタマイズ機能の &lt;code&gt;tutorial&lt;/code&gt; もご覧ください。</target>
        </trans-unit>
        <trans-unit id="c37b4a9c779ad7673d2176f38ce64f13f8e8ff9a" translate="yes" xml:space="preserve">
          <source>This module is the main EUnit user interface.</source>
          <target state="translated">このモジュールはEUnitのメインユーザーインターフェースです。</target>
        </trans-unit>
        <trans-unit id="380eae6ed1f14f5abc43a6827952590fc885d0c2" translate="yes" xml:space="preserve">
          <source>This module is used as the Windows backend for &lt;code&gt;os_sup&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;os_sup&quot;&gt;os_sup(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは &lt;code&gt;os_sup&lt;/code&gt; のWindowsバックエンドとして使用されます &lt;code&gt;&lt;a href=&quot;os_sup&quot;&gt;os_sup(3)&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="85cabe69b73c75cfce665849059c6c267e570fc3" translate="yes" xml:space="preserve">
          <source>This module is used by module &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; for managing distributed disk logs. The disk log names are used as group names, which means that some action can be needed to avoid name clashes.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; モジュールが分散ディスクログを管理するために使用します。ディスクログ名はグループ名として使用されます。つまり、名前の衝突を回避するために何らかのアクションが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="2facc0dce78b1734ff96c5e2c414eea0b55cfeef" translate="yes" xml:space="preserve">
          <source>This module is used by the Mnesia application, and is provided &quot;as is&quot; for users who are interested in efficient storage of Erlang terms on disk only. Many applications only need to store some terms in a file. Mnesia adds transactions, queries, and distribution. The size of Dets files cannot exceed 2 GB. If larger tables are needed, table fragmentation in Mnesia can be used.</source>
          <target state="translated">このモジュールはMnesiaアプリケーションで使われており、Erlangの用語をディスク上だけに効率的に保存したいユーザーのために &quot;そのまま &quot;提供されています。多くのアプリケーションでは、いくつかの用語をファイルに保存する必要があります。Mnesiaはトランザクション、クエリ、ディストリビューションを追加します。Detsファイルのサイズは2GBを超えることはできません。より大きなテーブルが必要な場合は、Mnesiaのテーブルフラグメンテーションを使うことができます。</target>
        </trans-unit>
        <trans-unit id="0a4a5f76c2f39ee7d14410f547c13073a7f0ccea" translate="yes" xml:space="preserve">
          <source>This module is used to check Erlang code for illegal syntax and other bugs. It also warns against coding practices that are not recommended.</source>
          <target state="translated">このモジュールはErlangのコードに不正な構文やその他のバグがないかチェックするために使われます。また、推奨されないコーディング方法についても警告します。</target>
        </trans-unit>
        <trans-unit id="eeb466b5da365f466e8f7e7ccc932ed35a24cf1b" translate="yes" xml:space="preserve">
          <source>This module is used to load all Erlang modules into the system. The start script is also fetched with this low-level loader.</source>
          <target state="translated">このモジュールはすべてのErlangモジュールをシステムにロードするために使われます。スタートスクリプトもこの低レベルローダーでフェッチされます。</target>
        </trans-unit>
        <trans-unit id="2290e1725f60788cc5c925cb7d57804f016396a1" translate="yes" xml:space="preserve">
          <source>This module is used to profile a program to find out how the execution time is used. Trace to file is used to minimize runtime performance impact.</source>
          <target state="translated">このモジュールは、実行時間がどのように使われているかを調べるためにプログラムをプロファイルするために使用されます。ファイルへのトレースは、実行時のパフォーマンスへの影響を最小限に抑えるために使用されます。</target>
        </trans-unit>
        <trans-unit id="4c89a4f0fda18575f2da9f933c35be2fd6e70e09" translate="yes" xml:space="preserve">
          <source>This module is used to start processes adhering to the &lt;code&gt;OTP Design Principles&lt;/code&gt;. Specifically, the functions in this module are used by the OTP standard behaviors (for example, &lt;code&gt;gen_server&lt;/code&gt; and &lt;code&gt;gen_statem&lt;/code&gt;) when starting new processes. The functions can also be used to start &lt;strong&gt;special processes&lt;/strong&gt;, user-defined processes that comply to the OTP design principles. For an example, see section &lt;code&gt;sys and proc_lib&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;OTP Design Principles&lt;/code&gt; 準拠したプロセスを開始するために使用されます。具体的には、このモジュールの関数は、OTP標準の動作（たとえば、 &lt;code&gt;gen_server&lt;/code&gt; および &lt;code&gt;gen_statem&lt;/code&gt; ）が新しいプロセスを開始するときに使用します。関数は、&lt;strong&gt;特別なプロセス&lt;/strong&gt;、OTP設計原則に準拠するユーザー定義のプロセスを開始するためにも使用できます。例については、OTP設計原則のセクション &lt;code&gt;sys and proc_lib&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="7f4ab243ee6586ee79497742f5b5a43934de147b" translate="yes" xml:space="preserve">
          <source>This module is usually part of the &lt;code&gt;erl_interface&lt;/code&gt; application, but is currently part of the Mnesia application.</source>
          <target state="translated">このモジュールは通常 &lt;code&gt;erl_interface&lt;/code&gt; アプリケーションの一部ですが、現在Mnesiaアプリケーションの一部です。</target>
        </trans-unit>
        <trans-unit id="1e34649b10e11074b5eecec6992267ea5de9baf9" translate="yes" xml:space="preserve">
          <source>This module maintains a cache of CRLs. CRLs can be added to the cache using the function &lt;code&gt;ssl_crl_cache:insert/1&lt;/code&gt;, and optionally automatically fetched through HTTP if the following argument is specified:</source>
          <target state="translated">このモジュールは、CRLのキャッシュを維持します。CRLは、関数 &lt;code&gt;ssl_crl_cache:insert/1&lt;/code&gt; を使用してキャッシュに追加できます。オプションで、次の引数が指定されている場合は、HTTPを介して自動的にフェッチされます。</target>
        </trans-unit>
        <trans-unit id="99468bcd97490a51d234dfa1e1aa1f1b75181a01" translate="yes" xml:space="preserve">
          <source>This module makes it possible to partition the nodes of a system into &lt;strong&gt;global groups&lt;/strong&gt;. Each global group has its own global namespace, see &lt;code&gt;&lt;a href=&quot;global&quot;&gt;global(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールを使用すると、システムのノードを&lt;strong&gt;グローバルグループ&lt;/strong&gt;に分割でき&lt;strong&gt;ます&lt;/strong&gt;。各グローバルグループには、独自のグローバル名前空間があります &lt;code&gt;&lt;a href=&quot;global&quot;&gt;global(3)&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="8ac57e5b97d1c2443f197da3b8016c360ca297b4" translate="yes" xml:space="preserve">
          <source>This module makes it possible to read internally formatted wrap disk logs, see &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log(3)&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;wrap_log_reader&lt;/code&gt; does not interfere with &lt;code&gt;disk_log&lt;/code&gt; activities; there is however a bug in this version of the &lt;code&gt;wrap_log_reader&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;#bugs&quot;&gt;Known Limitations&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールにより、内部的にフォーマットされたラップディスクログを読み取ることが可能になります &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log(3)&lt;/a&gt;&lt;/code&gt; 参照してください。 &lt;code&gt;wrap_log_reader&lt;/code&gt; は &lt;code&gt;disk_log&lt;/code&gt; アクティビティに干渉しません。ただし、このバージョンの &lt;code&gt;wrap_log_reader&lt;/code&gt; にはバグがあります。「 &lt;code&gt;&lt;a href=&quot;#bugs&quot;&gt;Known Limitations&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="989e49030b5db914fe14f640feffac69f14c2c8d" translate="yes" xml:space="preserve">
          <source>This module makes use of a directory where CRLs are stored in files named by the hash of the issuer name.</source>
          <target state="translated">このモジュールは、CRL が発行者名のハッシュで命名されたファイルに格納されているディレクトリを利用します。</target>
        </trans-unit>
        <trans-unit id="3e4a8e573560a8571cd9ef1e8a9e51dcf07a77f3" translate="yes" xml:space="preserve">
          <source>This module needs to be explicitly configured, see &lt;code&gt;&lt;a href=&quot;snmpa_error#desc&quot;&gt;snmpa_error&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは明示的に構成する必要があり &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;snmpa_error#desc&quot;&gt;snmpa_error&lt;/a&gt;&lt;/code&gt; および構成パラメーターを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b605512fe66b8682ce8b37c4cf3e4fbe2e01d42" translate="yes" xml:space="preserve">
          <source>This module operates on grapheme clusters. A &lt;strong&gt;grapheme cluster&lt;/strong&gt; is a user-perceived character, which can be represented by several codepoints.</source>
          <target state="translated">このモジュールは書記素クラスターで動作します。&lt;strong&gt;書記素クラスタは&lt;/strong&gt;、いくつかのコードポイントで表現することができるユーザ知覚文字、です。</target>
        </trans-unit>
        <trans-unit id="bb1c46b6a237b6087130260dff45a5cc687d6cba" translate="yes" xml:space="preserve">
          <source>This module performs DNS name resolving to recursive name servers.</source>
          <target state="translated">このモジュールは、再帰ネームサーバーに対してDNS名の解決を行います。</target>
        </trans-unit>
        <trans-unit id="4ab7b3a5e783c28b801aa97ce3c793f0d6d021bc" translate="yes" xml:space="preserve">
          <source>This module performs an identity parse transformation of Erlang code. It is included as an example for users who wants to write their own parse transformers. If option &lt;code&gt;{parse_transform,Module}&lt;/code&gt; is passed to the compiler, a user-written function &lt;code&gt;parse_transform/2&lt;/code&gt; is called by the compiler before the code is checked for errors.</source>
          <target state="translated">このモジュールは、ErlangコードのID解析変換を実行します。独自の解析トランスフォーマーを記述したいユーザー向けの例として含まれています。オプション &lt;code&gt;{parse_transform,Module}&lt;/code&gt; がコンパイラに渡されると、コードのエラーがチェックされる前に、コンパイラによってユーザー作成関数 &lt;code&gt;parse_transform/2&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a0037900bad0730ea9a030ba4069f75cb17a7f8b" translate="yes" xml:space="preserve">
          <source>This module provides (double-ended) FIFO queues in an efficient manner.</source>
          <target state="translated">このモジュールは、効率的な方法で(ダブルエンドの)FIFO キューを提供します。</target>
        </trans-unit>
        <trans-unit id="86963c4e13e1aeb4e47cbb6c0a5df6d5e8a947ad" translate="yes" xml:space="preserve">
          <source>This module provides API functions to send SSH Connection Protocol events to the other side of an SSH channel.</source>
          <target state="translated">このモジュールは、SSH 接続プロトコルのイベントを SSH チャンネルの相手側に送信するための API 関数を提供します。</target>
        </trans-unit>
        <trans-unit id="ce8b320b968902deab02747f5036f5e0f055ee88" translate="yes" xml:space="preserve">
          <source>This module provides Prof. Arne Andersson's General Balanced Trees. These have no storage overhead compared to unbalanced binary trees, and their performance is better than AVL trees.</source>
          <target state="translated">このモジュールは、Arne Andersson教授の一般的なバランスツリーを提供します。これらの木は、アンバランスバイナリツリーに比べてストレージのオーバーヘッドがなく、AVL木よりも性能が良いです。</target>
        </trans-unit>
        <trans-unit id="781b6c37f92636bd37c09e7bf44c27d67bf8df9d" translate="yes" xml:space="preserve">
          <source>This module provides a &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; dictionary. An &lt;code&gt;orddict&lt;/code&gt; is a representation of a dictionary, where a list of pairs is used to store the keys and values. The list is ordered after the keys in the &lt;strong&gt;Erlang term order&lt;/strong&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Key&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; 辞書を提供します。 &lt;code&gt;orddict&lt;/code&gt; はペアのリストは、キーと値を格納するために使用される辞書の表現です。リストは、&lt;strong&gt;Erlang用語順の&lt;/strong&gt;キーの後に並べられます。</target>
        </trans-unit>
        <trans-unit id="54ac9b6927419ddb4103884312f8097df3f2bb5a" translate="yes" xml:space="preserve">
          <source>This module provides a &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; dictionary. The representation of a dictionary is not defined.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Key&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; 辞書を提供します。辞書の表現は定義されていません。</target>
        </trans-unit>
        <trans-unit id="393cc80d6eca92a704f69151bc3d7efe95ae4615" translate="yes" xml:space="preserve">
          <source>This module provides a client api to the Lightweight Directory Access Protocol (LDAP).</source>
          <target state="translated">このモジュールは、LDAP (Lightweight Directory Access Protocol)のクライアント API を提供します。</target>
        </trans-unit>
        <trans-unit id="f62d79bfd7ef0367f3e971c525740d763d760116" translate="yes" xml:space="preserve">
          <source>This module provides a pseudo random number generator. The module contains a number of algorithms. The uniform distribution algorithms use the &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt; xoroshiro116+ and xorshift1024* algorithms by Sebastiano Vigna. &lt;/a&gt;&lt;/code&gt; The normal distribution algorithm uses the &lt;code&gt;&lt;a href=&quot;http://www.jstatsoft.org/v05/i08&quot;&gt; Ziggurat Method by Marsaglia and Tsang &lt;/a&gt;&lt;/code&gt; on top of the uniform distribution algorithm.</source>
          <target state="translated">このモジュールは、疑似乱数ジェネレータを提供します。モジュールには多数のアルゴリズムが含まれています。均一分散アルゴリズムは、 &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt; xoroshiro116+ and xorshift1024* algorithms by Sebastiano Vigna. &lt;/a&gt;&lt;/code&gt; 正規分布アルゴリズムは、均一分布アルゴリズムに加えて、 &lt;code&gt;&lt;a href=&quot;http://www.jstatsoft.org/v05/i08&quot;&gt; Ziggurat Method by Marsaglia and Tsang &lt;/a&gt;&lt;/code&gt; によるZigguratメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="f99a3f1888d10fffd183a70ef4c3a34c9ed1aee3" translate="yes" xml:space="preserve">
          <source>This module provides a query interface to &lt;code&gt;Mnesia&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ETS&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;dets&quot;&gt;Dets&lt;/a&gt;&lt;/code&gt;, and other data structures that provide an iterator style traversal of objects.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Mnesia&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ETS&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;dets&quot;&gt;Dets&lt;/a&gt;&lt;/code&gt; 、およびオブジェクトの反復子スタイルのトラバーサルを提供するその他のデータ構造へのクエリインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="4250319025eafcb7ae410e50274c9a7bdf114b1e" translate="yes" xml:space="preserve">
          <source>This module provides a query interface to &lt;strong&gt;QLC tables&lt;/strong&gt;. Typical QLC tables are Mnesia, ETS, and Dets tables. Support is also provided for user-defined tables, see section &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt;Implementing a QLC Table&lt;/a&gt;&lt;/code&gt;.  A &lt;strong id=&quot;query_list_comprehension&quot;&gt;query&lt;/strong&gt; is expressed using &lt;strong&gt;Query List Comprehensions&lt;/strong&gt; (QLCs). The answers to a query are determined by data in QLC tables that fulfill the constraints expressed by the QLCs of the query. QLCs are similar to ordinary list comprehensions as described in &lt;code&gt;Erlang Reference Manual&lt;/code&gt; and &lt;code&gt;Programming Examples&lt;/code&gt;, except that variables introduced in patterns cannot be used in list expressions. In the absence of optimizations and options such as &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;unique&lt;/code&gt; (see section &lt;code&gt;&lt;a href=&quot;#common_options&quot;&gt;Common Options&lt;/a&gt;&lt;/code&gt;, every QLC free of QLC tables evaluates to the same list of answers as the identical ordinary list comprehension.</source>
          <target state="translated">このモジュールは、&lt;strong&gt;QLCテーブル&lt;/strong&gt;へのクエリインターフェイスを提供します。典型的なQLCテーブルは、Mnesia、ETS、およびDetsテーブルです。ユーザー定義テーブルのサポートも提供されます。「 &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt;Implementing a QLC Table&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。&lt;strong id=&quot;query_list_comprehension&quot;&gt;クエリを&lt;/strong&gt;使用して表現される&lt;strong&gt;クエリのリスト内包表記&lt;/strong&gt;（QLCsを）。クエリに対する回答は、クエリのQLCによって表現される制約を満たすQLCテーブルのデータによって決定されます。 QLCは、パターンに導入された変数をリスト式で使用できないことを除いて、 &lt;code&gt;Erlang Reference Manual&lt;/code&gt; と &lt;code&gt;Programming Examples&lt;/code&gt; で説明されている通常のリスト内包表記に似ています。 &lt;code&gt;cache&lt;/code&gt; や &lt;code&gt;unique&lt;/code&gt; などの最適化とオプションがない場合（セクション &lt;code&gt;&lt;a href=&quot;#common_options&quot;&gt;Common Options&lt;/a&gt;&lt;/code&gt; 参照してください。QLCテーブルのないすべてのQLCは、同じ通常のリスト内包と同じ回答のリストに評価されます。</target>
        </trans-unit>
        <trans-unit id="047710b1ad9fd2f027b84c9368779228a800a4da" translate="yes" xml:space="preserve">
          <source>This module provides a random number generator. The method is attributed to B.A. Wichmann and I.D. Hill in 'An efficient and portable pseudo-random number generator', Journal of Applied Statistics. AS183. 1982. Also Byte March 1987.</source>
          <target state="translated">このモジュールは乱数発生器を提供します。この方法は、B.A.Wichmann と I.D.Hill の 'An efficient and portable pseudo-random number generator'、Journal of Applied Statistics に帰属します。AS183 1982.Byte 1987年3月号にも掲載されています。</target>
        </trans-unit>
        <trans-unit id="52aa0232673b318eae9c0f57627c3e65f31b22a8" translate="yes" xml:space="preserve">
          <source>This module provides a set of cryptographic functions.</source>
          <target state="translated">このモジュールは、暗号関数のセットを提供します。</target>
        </trans-unit>
        <trans-unit id="2efbf1cf06a7e77fc1af683651fd7cc8b8da3411" translate="yes" xml:space="preserve">
          <source>This module provides a simple mechanism for reporting SNMP errors. Errors are sent to the &lt;code&gt;error_logger&lt;/code&gt; after a size check. Messages are truncated after 1024 chars. It is provided as an example.</source>
          <target state="translated">このモジュールは、SNMPエラーを報告するためのシンプルなメカニズムを提供します。エラーは、サイズチェック後に &lt;code&gt;error_logger&lt;/code&gt; に送信されます。メッセージは1024文字を超えると切り捨てられます。例として提供されています。</target>
        </trans-unit>
        <trans-unit id="096fb2e3550a9bb0e5272f77db40c6b69c2ccf79" translate="yes" xml:space="preserve">
          <source>This module provides a simple mechanism for reporting SNMP errors. Errors are written to stdout using the &lt;code&gt;io&lt;/code&gt; module. It is provided as an simple example.</source>
          <target state="translated">このモジュールは、SNMPエラーを報告するためのシンプルなメカニズムを提供します。エラーは &lt;code&gt;io&lt;/code&gt; モジュールを使用してstdoutに書き込まれます。簡単な例として提供されています。</target>
        </trans-unit>
        <trans-unit id="1286f91cbc25e7fd94773e366acdb66f0cb92b07" translate="yes" xml:space="preserve">
          <source>This module provides a term storage on file. The stored terms, in this module called &lt;strong&gt;objects&lt;/strong&gt;, are tuples such that one element is defined to be the key. A Dets &lt;strong&gt;table&lt;/strong&gt; is a collection of objects with the key at the same position stored on a file.</source>
          <target state="translated">このモジュールは、ファイルに用語ストレージを提供します。&lt;strong&gt;オブジェクト&lt;/strong&gt;と呼ばれるこのモジュールに格納されている用語は、1つの要素がキーとして定義されるようなタプルです。Dets &lt;strong&gt;テーブル&lt;/strong&gt;は、ファイルに格納されている同じ位置にキーを持つオブジェクトのコレクションです。</target>
        </trans-unit>
        <trans-unit id="1620c061e4de1e2d509ff847686aeef840c94ae4" translate="yes" xml:space="preserve">
          <source>This module provides a version of labeled directed graphs. What makes the graphs provided here non-proper directed graphs is that multiple edges between vertices are allowed. However, the customary definition of directed graphs is used here.</source>
          <target state="translated">このモジュールは,ラベル付き有向グラフのバージョンを提供する.ここで提供されるグラフを非有向グラフにしているのは、頂点間の複数の辺が許されていることです。しかし,ここでは有向グラフの慣習的な定義が用いられる.</target>
        </trans-unit>
        <trans-unit id="d4cf7ab2f5fd96a0860285a8e510288d8e51d560" translate="yes" xml:space="preserve">
          <source>This module provides access to TCP/IP protocols.</source>
          <target state="translated">このモジュールは、TCP/IP プロトコルへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="ce4f070d6f9440d796d3f2ff1b4d9fe245970d26" translate="yes" xml:space="preserve">
          <source>This module provides algorithms based on depth-first traversal of directed graphs. For basic functions on directed graphs, see the &lt;code&gt;&lt;a href=&quot;digraph&quot;&gt;digraph(3)&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">このモジュールは、有向グラフの深さ優先トラバーサルに基づくアルゴリズムを提供します。 &lt;code&gt;&lt;a href=&quot;digraph&quot;&gt;digraph(3)&lt;/a&gt;&lt;/code&gt; 基本的な関数については、digraph（3）モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="750641c760c68123c0ef647455d03f63c154be54" translate="yes" xml:space="preserve">
          <source>This module provides an API for the zlib library (&lt;code&gt;&lt;a href=&quot;http://www.zlib.net&quot;&gt;www.zlib.net&lt;/a&gt;&lt;/code&gt;). It is used to compress and decompress data. The data format is described by &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1950.txt&quot;&gt;RFC 1950&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1951.txt&quot;&gt;RFC 1951&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1952.txt&quot;&gt;RFC 1952&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、zlibライブラリ（ &lt;code&gt;&lt;a href=&quot;http://www.zlib.net&quot;&gt;www.zlib.net&lt;/a&gt;&lt;/code&gt; ）のAPIを提供します。データの圧縮と解凍に使用されます。データ形式は、 &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1950.txt&quot;&gt;RFC 1950&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1951.txt&quot;&gt;RFC 1951&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1952.txt&quot;&gt;RFC 1952&lt;/a&gt;&lt;/code&gt; で説明されています。</target>
        </trans-unit>
        <trans-unit id="faf120ddebe052c8dc6014a2841d031820c05adf" translate="yes" xml:space="preserve">
          <source>This module provides an Erlang shell.</source>
          <target state="translated">このモジュールはErlangシェルを提供します。</target>
        </trans-unit>
        <trans-unit id="ce785837b5ff1a707a464ab7d4098ba53cf3ddeb" translate="yes" xml:space="preserve">
          <source>This module provides an abstract type that is used by the Erlang Compiler and its helper modules for holding data such as column, line number, and text. The data type is a collection of &lt;strong id=&quot;annotations&quot;&gt;annotations&lt;/strong&gt; as described in the following.</source>
          <target state="translated">このモジュールは、Erlangコンパイラとそのヘルパーモジュールが列、行番号、テキストなどのデータを保持するために使用する抽象型を提供します。データ型は、以下で説明するように、&lt;strong id=&quot;annotations&quot;&gt;注釈の&lt;/strong&gt;コレクションです。</target>
        </trans-unit>
        <trans-unit id="c240161f74f286924b1ecba60c9826a37e901d2d" translate="yes" xml:space="preserve">
          <source>This module provides an interface for loading and unloading &lt;strong&gt;Erlang linked-in drivers&lt;/strong&gt; in runtime.</source>
          <target state="translated">このモジュールは、ランタイム&lt;strong&gt;でErlangリンクインドライバー&lt;/strong&gt;をロードおよびアンロードするためのインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="0d50e0a3798c5432e0aff3d79f28ece00952d5f8" translate="yes" xml:space="preserve">
          <source>This module provides an interface to a number of mathematical functions.</source>
          <target state="translated">このモジュールは、多くの数学関数へのインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="b5733344375dbedf0030d51fc4fa5b63269782bb" translate="yes" xml:space="preserve">
          <source>This module provides an interface to files created by the BEAM Compiler (&quot;BEAM files&quot;). The format used, a variant of &quot;EA IFF 1985&quot; Standard for Interchange Format Files, divides data into chunks.</source>
          <target state="translated">このモジュールは、BEAMコンパイラによって作成されたファイル(「BEAMファイル」)へのインターフェースを提供します。使用されるフォーマットは、&quot;EA IFF 1985&quot; Standard for Interchange Format Filesの変形で、データをチャンクに分割します。</target>
        </trans-unit>
        <trans-unit id="4c0abe15371bacb3988f25e8e42f9bd6deaa06d4" translate="yes" xml:space="preserve">
          <source>This module provides an interface to standard Erlang I/O servers. The output functions all return &lt;code&gt;ok&lt;/code&gt; if they are successful, or exit if they are not.</source>
          <target state="translated">このモジュールは、標準のErlang I / Oサーバーへのインターフェースを提供します。出力関数はすべて、成功した場合は &lt;code&gt;ok&lt;/code&gt; を返し、そうでない場合は終了します。</target>
        </trans-unit>
        <trans-unit id="bb92749dec61f65e77f765c953d790353efc379f" translate="yes" xml:space="preserve">
          <source>This module provides an interface to the file system.</source>
          <target state="translated">このモジュールは、ファイルシステムへのインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="0ea2060b34505717f9518e88bbe84cae8d4301f7" translate="yes" xml:space="preserve">
          <source>This module provides an interface to the standard Erlang compiler. It can generate either a new file, which contains the object code, or return a binary, which can be loaded directly.</source>
          <target state="translated">このモジュールは標準のErlangコンパイラへのインターフェースを提供します。オブジェクトコードを含む新しいファイルを生成したり、バイナリを返したりすることができます。</target>
        </trans-unit>
        <trans-unit id="1e596baf52d2a5d67161fc159d66bc7111b7496e" translate="yes" xml:space="preserve">
          <source>This module provides an interpreter for Erlang expressions. The expressions are in the abstract syntax as returned by &lt;code&gt;&lt;a href=&quot;erl_parse&quot;&gt;erl_parse&lt;/a&gt;&lt;/code&gt;, the Erlang parser, or &lt;code&gt;&lt;a href=&quot;io&quot;&gt;io&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、Erlang式のインタープリターを提供します。式は、 &lt;code&gt;&lt;a href=&quot;erl_parse&quot;&gt;erl_parse&lt;/a&gt;&lt;/code&gt; 、Erlangパーサー、または &lt;code&gt;&lt;a href=&quot;io&quot;&gt;io&lt;/a&gt;&lt;/code&gt; によって返される抽象構文にあります。</target>
        </trans-unit>
        <trans-unit id="71c532b071cf1e2933fea5e0754fde5565914b25" translate="yes" xml:space="preserve">
          <source>This module provides computation of local and universal time, day of the week, and many time conversion functions.</source>
          <target state="translated">このモジュールは、ローカルタイムとユニバーサルタイム、曜日、多くの時間変換関数の計算を提供します。</target>
        </trans-unit>
        <trans-unit id="f095529d267dab0aeb8e3b8b1364f61d105a9b58" translate="yes" xml:space="preserve">
          <source>This module provides for basic user authentication using textual files, Dets databases, or Mnesia databases.</source>
          <target state="translated">このモジュールは、テキストファイル、Detsデータベース、またはMnesiaデータベースを使用した基本的なユーザ認証を提供します。</target>
        </trans-unit>
        <trans-unit id="c9257a7b2b5d2a4ae1e7c3b4a499e70e6fee999d" translate="yes" xml:space="preserve">
          <source>This module provides functions for allocating and deallocating memory.</source>
          <target state="translated">このモジュールは、メモリの割り当てと解放のための関数を提供します。</target>
        </trans-unit>
        <trans-unit id="d1acd3ec02989ce1863b1f9978f7179ed4f16a75" translate="yes" xml:space="preserve">
          <source>This module provides functions for analyzing and manipulating filenames. These functions are designed so that the Erlang code can work on many different platforms with different filename formats. With filename is meant all strings that can be used to denote a file. The filename can be a short relative name like &lt;code&gt;foo.erl&lt;/code&gt;, a long absolute name including a drive designator, a directory name like &lt;code&gt;D:\usr/local\bin\erl/lib\tools\foo.erl&lt;/code&gt;, or any variations in between.</source>
          <target state="translated">このモジュールは、ファイル名を分析および操作するための関数を提供します。これらの関数は、Erlangコードが異なるファイル名形式の多くの異なるプラットフォームで機能できるように設計されています。ファイル名とは、ファイルを示すために使用できるすべての文字列を意味します。ファイル名には、 &lt;code&gt;foo.erl&lt;/code&gt; のような短い相対名、ドライブ指定子を含む長い絶対名、 &lt;code&gt;D:\usr/local\bin\erl/lib\tools\foo.erl&lt;/code&gt; ようなディレクトリ名、またはその間のバリエーションを使用できます。 。</target>
        </trans-unit>
        <trans-unit id="ba26786354c2721a7cffffe073a2f1107136ad72" translate="yes" xml:space="preserve">
          <source>This module provides functions for communicating with sockets using the SCTP protocol. The implementation assumes that the OS kernel supports SCTP &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;(RFC 2960)&lt;/a&gt;&lt;/code&gt; through the user-level &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、SCTPプロトコルを使用してソケットと通信するための関数を提供します。実装では、OSカーネルがユーザーレベルの &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions&lt;/a&gt;&lt;/code&gt; を介してSCTP &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;(RFC 2960)&lt;/a&gt;&lt;/code&gt; をサポートすることを前提としています。</target>
        </trans-unit>
        <trans-unit id="6237d5a917a923f45f8684296ea4f397f5ee1fec" translate="yes" xml:space="preserve">
          <source>This module provides functions for communicating with sockets using the TCP/IP protocol.</source>
          <target state="translated">本モジュールは、TCP/IPプロトコルを用いたソケット通信を行うための機能を提供します。</target>
        </trans-unit>
        <trans-unit id="047ce7d569f63519c312507e77fc10e7a0abdd77" translate="yes" xml:space="preserve">
          <source>This module provides functions for communicating with sockets using the UDP protocol.</source>
          <target state="translated">UDP プロトコルを用いたソケット通信を行うための機能を提供します。</target>
        </trans-unit>
        <trans-unit id="4170af0d02bb4471c502310e774e78bff4f783ba" translate="yes" xml:space="preserve">
          <source>This module provides functions for creating and manipulating Erlang terms.</source>
          <target state="translated">このモジュールはErlang用語を作成・操作するための関数を提供します。</target>
        </trans-unit>
        <trans-unit id="1e4339ab7b3c28859324758d30d70eff072c8031" translate="yes" xml:space="preserve">
          <source>This module provides functions for starting Erlang slave nodes. All slave nodes that are started by a master terminate automatically when the master terminates. All terminal output produced at the slave is sent back to the master node. File I/O is done through the master.</source>
          <target state="translated">このモジュールはErlangのスレーブノードを起動する機能を提供します。マスターによって起動されたすべてのスレーブノードは、マスターが終了すると自動的に終了します。スレーブで生成された全ての端末出力はマスターノードに送り返されます。ファイルI/Oはマスターを経由して行われます。</target>
        </trans-unit>
        <trans-unit id="b46a173f5bc0dfe98e3415de1917b5e2303db97e" translate="yes" xml:space="preserve">
          <source>This module provides functions for string processing.</source>
          <target state="translated">このモジュールは、文字列処理のための関数を提供します。</target>
        </trans-unit>
        <trans-unit id="fb4e067fc4ce218df6cee6a75080152b7287b4b0" translate="yes" xml:space="preserve">
          <source>This module provides operations on finite sets and relations represented as sets. Intuitively, a set is a collection of elements; every element belongs to the set, and the set contains every element.</source>
          <target state="translated">このモジュールは、有限集合と集合として表される関係に対する操作を提供します。直感的に言えば、集合は要素の集合であり、すべての要素は集合に属し、集合はすべての要素を含みます。</target>
        </trans-unit>
        <trans-unit id="9b7c8f4236f4ac7c20019baf55ac92c3062eac4e" translate="yes" xml:space="preserve">
          <source>This module provides ordered sets using Prof. Arne Andersson's General Balanced Trees. Ordered sets can be much more efficient than using ordered lists, for larger sets, but depends on the application.</source>
          <target state="translated">このモジュールは、Arne Andersson教授の一般均衡木を用いた順序付き集合を提供します。順序付き集合は、より大きな集合に対して、順序付きリストを使うよりもはるかに効率的ですが、アプリケーションに依存します。</target>
        </trans-unit>
        <trans-unit id="ba40f5b3e99d275a596aa07c0dff3f599128accf" translate="yes" xml:space="preserve">
          <source>This module provides per-directory user configurable access control.</source>
          <target state="translated">このモジュールは、ディレクトリごとにユーザーが設定可能なアクセス制御を提供します。</target>
        </trans-unit>
        <trans-unit id="2c12c2072886f929b57ed6b57be79da289e76ef8" translate="yes" xml:space="preserve">
          <source>This module provides read and write access to the registry on Windows. It is essentially a port driver wrapped around the Win32 API calls for accessing the registry.</source>
          <target state="translated">このモジュールは、Windows上のレジストリへの読み書きアクセスを提供します。基本的には、レジストリにアクセスするための Win32 API 呼び出しをラップしたポートドライバです。</target>
        </trans-unit>
        <trans-unit id="c778b6bf3c6ceb257250b7ae833621c36f93fd49" translate="yes" xml:space="preserve">
          <source>This module provides some limited support for concurrent access. All updates to single objects are guaranteed to be both &lt;strong&gt;atomic&lt;/strong&gt; and &lt;strong&gt;isolated&lt;/strong&gt;. This means that an updating operation to a single object either succeeds or fails completely without any effect (atomicity) and that no intermediate results of the update can be seen by other processes (isolation). Some functions that update many objects state that they even guarantee atomicity and isolation for the entire operation. In database terms the isolation level can be seen as &quot;serializable&quot;, as if all isolated operations are carried out serially, one after the other in a strict order.</source>
          <target state="translated">このモジュールは、同時アクセスを制限付きでサポートします。単一のオブジェクトに対するすべての更新は、&lt;strong&gt;アトミックで&lt;/strong&gt;ありかつ&lt;strong&gt;分離&lt;/strong&gt;されていることが保証されています。これは、単一のオブジェクトへの更新操作が成功または完全に失敗し、影響（原子性）がなく、更新の中間結果が他のプロセス（分離）から見えないことを意味します。多くのオブジェクトを更新する一部の関数は、操作全体の原子性と分離さえ保証すると述べています。データベースの観点では、分離レベルは「直列化可能」と見なすことができ、分離されたすべての操作が厳密な順序で次々に順次実行されるかのように見えます。</target>
        </trans-unit>
        <trans-unit id="e080461e2e77686f66945fda37287e52c6b43e16" translate="yes" xml:space="preserve">
          <source>This module provides support for communication between distributed Erlang nodes and C-nodes, in a manner that is transparent to Erlang processes.</source>
          <target state="translated">このモジュールは分散したErlangノードとCノード間の通信を、Erlangプロセスに透過的な方法でサポートします。</target>
        </trans-unit>
        <trans-unit id="9dd15c5a43f249c41879dce22695542c08e92337" translate="yes" xml:space="preserve">
          <source>This module provides support for registering, looking up, and unregistering names in the &lt;code&gt;global&lt;/code&gt; module. For more information, see &lt;code&gt;kernel:global&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;global&lt;/code&gt; モジュールでの名前の登録、検索、および登録解除をサポートします。詳細については、 &lt;code&gt;kernel:global&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="acc44f686954a04de29fbc3692f9d04d65486748" translate="yes" xml:space="preserve">
          <source>This module provides support for storing key-value pairs in a table known as a registry, backing up registries to &lt;code&gt;Mnesia&lt;/code&gt; in an atomic manner, and later restoring the contents of a registry from &lt;code&gt;Mnesia&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、レジストリと呼ばれるテーブルにキーと値のペアを格納し、アトミックな方法でレジストリを &lt;code&gt;Mnesia&lt;/code&gt; にバックアップし、後で &lt;code&gt;Mnesia&lt;/code&gt; からレジストリのコンテンツを復元するためのサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="c4fb892b992e614adc88b69df82b17ae13945733" translate="yes" xml:space="preserve">
          <source>This module provides the API to an HTTP/1.1 compatible client according to &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;. Caching is not supported.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; に従って、HTTP / 1.1互換クライアントにAPIを提供します。キャッシングはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="6480b6d56431c3c7e09177c0ce29744efb2ce799" translate="yes" xml:space="preserve">
          <source>This module provides the Erlang web server API module programmer with miscellaneous utility functions.</source>
          <target state="translated">このモジュールはErlangのWebサーバAPIモジュールプログラマに雑多なユーティリティ関数を提供します。</target>
        </trans-unit>
        <trans-unit id="0b8c5916e2632e665c5b2f5f52d5c56b0a93bc00" translate="yes" xml:space="preserve">
          <source>This module provides the Erlang web server API module programmer with utility functions for generic sockets communication. The appropriate communication mechanism is transparently used, that is, &lt;code&gt;ip_comm&lt;/code&gt; or &lt;code&gt;ssl&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、Erlang WebサーバーAPIモジュールプログラマーに、汎用ソケット通信用のユーティリティ関数を提供します。適切な通信メカニズムが透過的に使用され &lt;code&gt;ssl&lt;/code&gt; 。つまり、 &lt;code&gt;ip_comm&lt;/code&gt; またはsslです。</target>
        </trans-unit>
        <trans-unit id="4a178749a79e6fb26e39ef05fff26033dce75ac3" translate="yes" xml:space="preserve">
          <source>This module provides the interface with which a user can implement a Diameter node that sends and receives messages using the Diameter protocol as defined in RFC 6733.</source>
          <target state="translated">このモジュールは、RFC6733で定義されているDiameterプロトコルを用いてメッセージを送受信するDiameterノードを実装するためのインタフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="2290d99631f95e83db0417df2bd64d3d9576bcac" translate="yes" xml:space="preserve">
          <source>This module provides the most basic API to the clients and servers that are part of the &lt;code&gt;Inets&lt;/code&gt; application, such as start and stop.</source>
          <target state="translated">このモジュールは、開始や停止など、 &lt;code&gt;Inets&lt;/code&gt; アプリケーションの一部であるクライアントおよびサーバーに最も基本的なAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="c2dc289d587182daff0825395e7477905794ef0d" translate="yes" xml:space="preserve">
          <source>This module provides the parse transformation that makes calls to &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ets&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; translate into literal match specifications. It also provides the back end for the same functions when called from the Erlang shell.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ets&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; の呼び出しをリテラル一致指定に変換する解析変換を提供します。また、Erlangシェルから呼び出されたときに、同じ関数のバックエンドを提供します。</target>
        </trans-unit>
        <trans-unit id="721a3117429eceb8f061f5e2899bcbfb40bdf110" translate="yes" xml:space="preserve">
          <source>This module provides the same interface as the &lt;code&gt;&lt;a href=&quot;dict&quot;&gt;dict(3)&lt;/a&gt;&lt;/code&gt; module but with a defined representation. One difference is that while &lt;code&gt;dict&lt;/code&gt; considers two keys as different if they do not match (&lt;code&gt;=:=&lt;/code&gt;), this module considers two keys as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは &lt;code&gt;&lt;a href=&quot;dict&quot;&gt;dict(3)&lt;/a&gt;&lt;/code&gt; モジュールと同じインターフェースを提供しますが、表現が定義されています。1つの違いは、 &lt;code&gt;dict&lt;/code&gt; は2つのキーが一致しない場合（ &lt;code&gt;=:=&lt;/code&gt; ）は異なると見なしますが、このモジュールは2つのキーが等しいと比較しない場合（ &lt;code&gt;==&lt;/code&gt; ）の場合のみ、2つのキーが異なると見なします。</target>
        </trans-unit>
        <trans-unit id="f2cfe02c9b447eb5cee32eb141157e31208af9a7" translate="yes" xml:space="preserve">
          <source>This module provides the same interface as the &lt;code&gt;&lt;a href=&quot;orddict&quot;&gt;orddict(3)&lt;/a&gt;&lt;/code&gt; module. One difference is that while this module considers two keys as different if they do not match (&lt;code&gt;=:=&lt;/code&gt;), &lt;code&gt;orddict&lt;/code&gt; considers two keys as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;orddict&quot;&gt;orddict(3)&lt;/a&gt;&lt;/code&gt; モジュールと同じインターフェースを提供します。1つの違いは、このモジュールでは2つのキーが一致しない場合（ &lt;code&gt;=:=&lt;/code&gt; ）が &lt;code&gt;orddict&lt;/code&gt; と見なされますが、orddictは2つのキーが等しいと比較されない場合（ &lt;code&gt;==&lt;/code&gt; ）に限り、2つのキーが異なると見なされることです。</target>
        </trans-unit>
        <trans-unit id="38d6e52db1a80893122e1c828b20e43583ef95f9" translate="yes" xml:space="preserve">
          <source>This module provides the same interface as the &lt;code&gt;&lt;a href=&quot;ordsets&quot;&gt;ordsets(3)&lt;/a&gt;&lt;/code&gt; module but with an undefined representation. One difference is that while this module considers two elements as different if they do not match (&lt;code&gt;=:=&lt;/code&gt;), &lt;code&gt;ordsets&lt;/code&gt; considers two elements as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;ordsets&quot;&gt;ordsets(3)&lt;/a&gt;&lt;/code&gt; モジュールと同じインターフェースを提供しますが、未定義の表現を備えています。1つの違いは、このモジュールでは2つの要素が一致しない場合（ &lt;code&gt;=:=&lt;/code&gt; ）が &lt;code&gt;ordsets&lt;/code&gt; と見なされますが、ordsetsは2つの要素が等しいと比較されない場合（ &lt;code&gt;==&lt;/code&gt; ）に限り、2つの要素が異なると見なされることです。</target>
        </trans-unit>
        <trans-unit id="6fff0aaa0429816efbfd85cd732dd006ea6157aa" translate="yes" xml:space="preserve">
          <source>This module provides the same interface as the &lt;code&gt;&lt;a href=&quot;sets&quot;&gt;sets(3)&lt;/a&gt;&lt;/code&gt; module but with a defined representation. One difference is that while &lt;code&gt;sets&lt;/code&gt; considers two elements as different if they do not match (&lt;code&gt;=:=&lt;/code&gt;), this module considers two elements as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;sets&quot;&gt;sets(3)&lt;/a&gt;&lt;/code&gt; モジュールと同じインターフェースを提供しますが、表現が定義されています。1つの違いは、 &lt;code&gt;sets&lt;/code&gt; は2つの要素が一致しない場合（ &lt;code&gt;=:=&lt;/code&gt; ）を異なるものと見なしますが、このモジュールは2つの要素が等しいと比較されない場合（ &lt;code&gt;==&lt;/code&gt; ）に限り、2つの要素を異なるものと見なします。</target>
        </trans-unit>
        <trans-unit id="742e632c6552d16bd6d478a7d1daf12903965f79" translate="yes" xml:space="preserve">
          <source>This module provides useful functions related to time. Unless otherwise stated, time is always measured in &lt;strong&gt;milliseconds&lt;/strong&gt;. All timer functions return immediately, regardless of work done by another process.</source>
          <target state="translated">このモジュールは、時間に関連する便利な機能を提供します。特に明記しない限り、時間は常に&lt;strong&gt;ミリ秒単位で&lt;/strong&gt;測定され&lt;strong&gt;ます&lt;/strong&gt;。他のプロセスによって行われた作業に関係なく、すべてのタイマー関数はすぐに戻ります。</target>
        </trans-unit>
        <trans-unit id="b7d4e83f9e995a297aeebc8e6a32d2dba035f338" translate="yes" xml:space="preserve">
          <source>This module provides utility functions for working with URIs, according to &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; に従って、URIを操作するためのユーティリティ関数を提供します。</target>
        </trans-unit>
        <trans-unit id="69116d4fbcf6560d1469aa6a1f54ad5b50520175" translate="yes" xml:space="preserve">
          <source>This module replaces ssh_channel.</source>
          <target state="translated">このモジュールは ssh_channel を置き換えます。</target>
        </trans-unit>
        <trans-unit id="e4595252d25beb7eb4255174f697d15c0830a38f" translate="yes" xml:space="preserve">
          <source>This module replaces ssh_daemon_channel.</source>
          <target state="translated">このモジュールは ssh_daemon_channel を置き換えます。</target>
        </trans-unit>
        <trans-unit id="8aeeae3a06e268738003ec9e46ac483c94be8f5b" translate="yes" xml:space="preserve">
          <source>This module responses to requests for one or many ranges of a file. This is especially useful when downloading large files, as a broken download can be resumed.</source>
          <target state="translated">このモジュールは、ファイルの一つまたは複数の範囲に対するリクエストに応答します。これは大きなファイルをダウンロードするときに特に便利です。</target>
        </trans-unit>
        <trans-unit id="181bfa906d54214c120e83123d1185ab071fc48e" translate="yes" xml:space="preserve">
          <source>This module runs CGI scripts whenever a file of a certain type or HTTP method (see &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc1945&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt;) is requested.</source>
          <target state="translated">このモジュールは、特定のタイプのファイルまたはHTTPメソッド（ &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc1945&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt; を参照）のファイルが要求されるたびにCGIスクリプトを実行します。</target>
        </trans-unit>
        <trans-unit id="6cf32be7983eb16f31b4b6b42dc9e21cb5289f56" translate="yes" xml:space="preserve">
          <source>This module tokenises and parses most Erlang source code without expanding preprocessor directives and macro applications, as long as these are syntactically &quot;well-behaved&quot;. Because the normal parse trees of the &lt;code&gt;erl_parse&lt;/code&gt; module cannot represent these things (normally, they are expanded by the Erlang preprocessor &lt;code&gt;epp(3)&lt;/code&gt; before the parser sees them), an extended syntax tree is created, using the &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">このモジュールは、プリプロセッサディレクティブとマクロアプリケーションを拡張することなく、構文的に「適切に動作する」限り、ほとんどのErlangソースコードをトークン化して解析します。 &lt;code&gt;erl_parse&lt;/code&gt; モジュールの通常の構文解析ツリーはこれらのものを表現できないため（通常、構文解析プログラムがそれらを認識する前に、Erlangプリプロセッサー &lt;code&gt;epp(3)&lt;/code&gt; によって展開されます）、拡張構文ツリーが &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; モジュールを使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="5da9ff3bf77e5f995d90689278c7a23b1597c8bb" translate="yes" xml:space="preserve">
          <source>This module uses a current key. It works much like the current directory. From the current key, values can be fetched, subkeys can be listed, and so on.</source>
          <target state="translated">このモジュールはカレントキーを使用します。カレントディレクトリと同じように動作します。カレントキーから値を取得したり、サブキーをリストアップしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="ba20fa4df70d15689e43b0f44c7517efe1b08358" translate="yes" xml:space="preserve">
          <source>This module uses application &lt;code&gt;SSH&lt;/code&gt;, which provides detailed information about, for example, functions, types, and options.</source>
          <target state="translated">このモジュールでは、アプリケーション &lt;code&gt;SSH&lt;/code&gt; を使用します。これは、関数、タイプ、オプションなどの詳細情報を提供します。</target>
        </trans-unit>
        <trans-unit id="c27440a34997ba37bea9913114676bb50554dcae" translate="yes" xml:space="preserve">
          <source>This module was written for one-to-many style sockets (type &lt;code&gt;seqpacket&lt;/code&gt;). With the addition of &lt;code&gt;&lt;a href=&quot;#peeloff-2&quot;&gt;peeloff/2&lt;/a&gt;&lt;/code&gt;, one-to-one style sockets (type &lt;code&gt;stream&lt;/code&gt;) were introduced.</source>
          <target state="translated">このモジュールは、1対多スタイルのソケット（タイプ &lt;code&gt;seqpacket&lt;/code&gt; ）用に作成されました。 &lt;code&gt;&lt;a href=&quot;#peeloff-2&quot;&gt;peeloff/2&lt;/a&gt;&lt;/code&gt; 追加により、1対1スタイルのソケット（タイプ &lt;code&gt;stream&lt;/code&gt; ）が導入されました。</target>
        </trans-unit>
        <trans-unit id="606223ff437db337a77e6be8dc6a090de4bc5931" translate="yes" xml:space="preserve">
          <source>This modules contains the interface to the &lt;code&gt;heart&lt;/code&gt; process. &lt;code&gt;heart&lt;/code&gt; sends periodic heartbeats to an external port program, which is also named &lt;code&gt;heart&lt;/code&gt;. The purpose of the &lt;code&gt;heart&lt;/code&gt; port program is to check that the Erlang runtime system it is supervising is still running. If the port program has not received any heartbeats within &lt;code&gt;HEART_BEAT_TIMEOUT&lt;/code&gt; seconds (defaults to 60 seconds), the system can be rebooted.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;heart&lt;/code&gt; プロセスへのインターフェースが含まれています。 &lt;code&gt;heart&lt;/code&gt; は、定期的にハートビートを外部ポートプログラムに送信します。このプログラムは、 &lt;code&gt;heart&lt;/code&gt; とも呼ばれます。 &lt;code&gt;heart&lt;/code&gt; ポートプログラムの目的は、監視しているErlangランタイムシステムがまだ実行中であることを確認することです。ポートプログラムが &lt;code&gt;HEART_BEAT_TIMEOUT&lt;/code&gt; 秒（デフォルトでは60秒）以内にハートビートを受信しなかった場合、システムを再起動できます。</target>
        </trans-unit>
        <trans-unit id="a2f8a20f0be71ce686a1d45af49ce482f6a78d69" translate="yes" xml:space="preserve">
          <source>This must however be done with care, as function &lt;code&gt;{return_trace}&lt;/code&gt; in the match specification destroys tail recursiveness.</source>
          <target state="translated">ただし、一致指定の関数 &lt;code&gt;{return_trace}&lt;/code&gt; が末尾の再帰性を破壊するため、これは注意して行う必要があります。</target>
        </trans-unit>
        <trans-unit id="68582ac86e79db46d57ee06207c511b4a861bfb5" translate="yes" xml:space="preserve">
          <source>This node uses some master nodes to store and fetch release information. All master nodes must be operational whenever release information is written by this node.</source>
          <target state="translated">このノードは、いくつかのマスター・ノードを使用してリリース情報を格納し、フェッチします。このノードによってリリース情報が書き込まれるときはいつでも、すべてのマスターノードが動作していなければなりません。</target>
        </trans-unit>
        <trans-unit id="e2b52bf50e58c3cc457e61abee1b9f82215c9813" translate="yes" xml:space="preserve">
          <source>This node.</source>
          <target state="translated">このノード</target>
        </trans-unit>
        <trans-unit id="768833241e4c41a51c30053841c9a5be0a33a799" translate="yes" xml:space="preserve">
          <source>This now works as expected:</source>
          <target state="translated">これで期待通りに動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="4858903cb179e40729be5206f937b3196b299dba" translate="yes" xml:space="preserve">
          <source>This of course requires your editor to support UTF-8 as well. The same comment is also interpreted by functions like &lt;code&gt;file:consult/1&lt;/code&gt;, the release handler, and so on, so that you can have all text files in your source directories in UTF-8 encoding.</source>
          <target state="translated">もちろん、これにはエディターがUTF-8もサポートする必要があります。同じコメントは &lt;code&gt;file:consult/1&lt;/code&gt; やリリースハンドラーなどの関数によっても解釈されるため、すべてのテキストファイルをソースディレクトリにUTF-8エンコーディングで含めることができます。</target>
        </trans-unit>
        <trans-unit id="dfffe74a9c7d9d5e838ee7506a86798e8b02c78d" translate="yes" xml:space="preserve">
          <source>This off-line utility function can be used to convert the old snmp application config (pre snmp-4.0) to the new snmp agent config (as of snmp-4.0).</source>
          <target state="translated">このオフラインユーティリティ関数は、古いsnmpアプリケーション設定(snmp-4.0以前)を新しいsnmpエージェント設定(snmp-4.0時点)に変換するために使用できます。</target>
        </trans-unit>
        <trans-unit id="bb2b5100380724d761bb0b871c669f6341e1d19e" translate="yes" xml:space="preserve">
          <source>This only applies if Erlang is started as a distributed node, i.e. if &lt;code&gt;-name&lt;/code&gt; or &lt;code&gt;-sname&lt;/code&gt; is specified. Otherwise, epmd is not started even if &lt;code&gt;-start_epmd true&lt;/code&gt; is given.</source>
          <target state="translated">これは、Erlangが分散ノードとして起動されている場合、つまり &lt;code&gt;-name&lt;/code&gt; または &lt;code&gt;-sname&lt;/code&gt; が指定されている場合にのみ適用されます。それ以外の場合、-start_epmd &lt;code&gt;-start_epmd true&lt;/code&gt; が指定されていても、epmdは開始されません。</target>
        </trans-unit>
        <trans-unit id="36578cd782b1b1c7c098e80e28d83efcfb473d12" translate="yes" xml:space="preserve">
          <source>This operation is best described with an example.</source>
          <target state="translated">この操作は、例を挙げて説明するのが最適です。</target>
        </trans-unit>
        <trans-unit id="726740b93f9a38ad69503060d61e78fcfc4ed2e8" translate="yes" xml:space="preserve">
          <source>This operation returns both configuration and state data from the server.</source>
          <target state="translated">この操作は、サーバから設定と状態の両方のデータを返します。</target>
        </trans-unit>
        <trans-unit id="c28d8949e39a67d4d2b916902211267c2c1b4e17" translate="yes" xml:space="preserve">
          <source>This option and option &lt;code&gt;match_limit&lt;/code&gt; are only to be used in rare cases. Understanding of the PCRE library internals is recommended before tampering with these limits.</source>
          <target state="translated">このオプションとオプション &lt;code&gt;match_limit&lt;/code&gt; は、まれなケースでのみ使用されます。これらの制限を改ざんする前に、PCREライブラリの内部を理解することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6f9af6a987f2d3bf6639d97909039e3b4c47dc6a" translate="yes" xml:space="preserve">
          <source>This option augments the host name extraction from URIs and other Reference IDs. It could for example be a very special URI that is not standardised. The fun takes a Reference ID as argument and returns one of:</source>
          <target state="translated">このオプションは、URIやその他の参照IDからのホスト名の抽出を拡張します。例えば、標準化されていない非常に特殊なURIなどが考えられます。funは引数にReference IDを取り、以下のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="21da80d80de6786a8c35eb55211f1719f7ad6a3e" translate="yes" xml:space="preserve">
          <source>This option can also be used to override the default renaming of calls which use obsolete function names.</source>
          <target state="translated">このオプションを使用すると、廃止された関数名を使用するコールのデフォルトの名前変更をオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="cdb004a99221b3f8badd722205d40d87fd8410dc" translate="yes" xml:space="preserve">
          <source>This option can be used for adding members to a distributed disk log. Defaults to &lt;code&gt;[]&lt;/code&gt;, which means that the log is local on the current node.</source>
          <target state="translated">このオプションは、分散ディスクログにメンバーを追加するために使用できます。デフォルトは &lt;code&gt;[]&lt;/code&gt; です。これは、ログが現在のノードでローカルであることを意味します。</target>
        </trans-unit>
        <trans-unit id="23765e948e554b57ee502bc4f444d5a5c23a77a3" translate="yes" xml:space="preserve">
          <source>This option changes how the daemon execute exec-requests from clients. The term in the return value is formatted to a string if it is a non-string type. No trailing newline is added in the ok-case but in the error case.</source>
          <target state="translated">このオプションは、デーモンがクライアントからのexec-requestsを実行する方法を変更します。戻り値の用語は、非文字列型であれば文字列にフォーマットされます。okケースでは末尾の改行は追加されませんが、エラーケースでは追加されます。</target>
        </trans-unit>
        <trans-unit id="53106c8ee8480a565ca1694a5aee9779aed8d667" translate="yes" xml:space="preserve">
          <source>This option changes the representation of the types &lt;code&gt;SEQUENCE&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; to use maps (instead of records). This option also suppresses the generation of &lt;code&gt;.hrl&lt;/code&gt; files.</source>
          <target state="translated">このオプションは、（レコードの代わりに）マップを使用するようにタイプ &lt;code&gt;SEQUENCE&lt;/code&gt; および &lt;code&gt;SET&lt;/code&gt; の表現を変更します。このオプションは、 &lt;code&gt;.hrl&lt;/code&gt; ファイルの生成も抑制します。</target>
        </trans-unit>
        <trans-unit id="91dab051c90259277cd95566eff3cf880c2a9995" translate="yes" xml:space="preserve">
          <source>This option controls the debug level of &lt;code&gt;wx&lt;/code&gt;. As its name indicates it is only useful for debugging. See &lt;code&gt;wx:debug/1&lt;/code&gt; for more info.</source>
          <target state="translated">このオプションは、 &lt;code&gt;wx&lt;/code&gt; のデバッグレベルを制御します。その名前が示すように、デバッグにのみ役立ちます。詳細については、 &lt;code&gt;wx:debug/1&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7ec5e0644c323d96923ea009ec73a058e3e14790" translate="yes" xml:space="preserve">
          <source>This option controls the error handling behavior of Reltool. By default the window processes traps exit, but this behavior can altered by setting &lt;code&gt;trap_exit&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このオプションは、Reltoolのエラー処理動作を制御します。デフォルトでは、ウィンドウはトラップ終了を処理しますが、この動作は &lt;code&gt;trap_exit&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="c7e73575c5bb05401f153a1b408d8ff447357a91" translate="yes" xml:space="preserve">
          <source>This option defaults to &lt;code&gt;true&lt;/code&gt; for backwards compatibility but we intend to remove the exception behavior in a future release. New code that needs to handle dictionaries manually should always specify &lt;code&gt;{exception_on_need_dict,false}&lt;/code&gt;.</source>
          <target state="translated">後方互換性のために、このオプションのデフォルトは &lt;code&gt;true&lt;/code&gt; ですが、将来のリリースでは例外動作を削除する予定です。辞書を手動で処理する必要がある新しいコードでは、常に &lt;code&gt;{exception_on_need_dict,false}&lt;/code&gt; 指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="24e5307f642c6711e98aa1e1851a0012231dc221" translate="yes" xml:space="preserve">
          <source>This option defines how the manager will handle the sending of response (acknowledgment) to received inform-requests.</source>
          <target state="translated">このオプションは、受信した情報要求に対する応答(確認応答)の送信をマネージャがどのように処理するかを定義します。</target>
        </trans-unit>
        <trans-unit id="0b065ec1d28b81abfd2469427265be5e95f2a102" translate="yes" xml:space="preserve">
          <source>This option determines which &lt;code&gt;&lt;a href=&quot;#sctp_events&quot;&gt;SCTP Events&lt;/a&gt;&lt;/code&gt; are to be received (through &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt;) along with the data. The only exception is &lt;code&gt;data_io_event&lt;/code&gt;, which enables or disables receiving of &lt;code&gt;&lt;a href=&quot;#record-sctp_sndrcvinfo&quot;&gt;#sctp_sndrcvinfo{}&lt;/a&gt;&lt;/code&gt; ancillary data, not events. By default, all flags except &lt;code&gt;adaptation_layer_event&lt;/code&gt; are enabled, although &lt;code&gt;sctp_data_io_event&lt;/code&gt; and &lt;code&gt;association_event&lt;/code&gt; are used by the driver itself and not exported to the user level.</source>
          <target state="translated">このオプションは、データとともに（ &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt; を介して）受信する &lt;code&gt;&lt;a href=&quot;#sctp_events&quot;&gt;SCTP Events&lt;/a&gt;&lt;/code&gt; 決定します。唯一の例外は &lt;code&gt;data_io_event&lt;/code&gt; で、イベントではなく &lt;code&gt;&lt;a href=&quot;#record-sctp_sndrcvinfo&quot;&gt;#sctp_sndrcvinfo{}&lt;/a&gt;&lt;/code&gt; 補助データの受信を有効または無効にします。デフォルトでは、除くすべてのフラグ &lt;code&gt;adaptation_layer_event&lt;/code&gt; はあるが、有効になっている &lt;code&gt;sctp_data_io_event&lt;/code&gt; と &lt;code&gt;association_event&lt;/code&gt; は、ドライバ自体によって使用され、ユーザレベルにエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="1f54c1964a5e915a3b9d8124e81def1141091a66" translate="yes" xml:space="preserve">
          <source>This option does in no way affect the execution of the Erlang VM in terms of &quot;long running BIFs&quot;. &lt;code&gt;run/3&lt;/code&gt; always gives control back to the scheduler of Erlang processes at intervals that ensures the real-time properties of the Erlang system.</source>
          <target state="translated">このオプションは、「長期実行BIF」に関してErlang VMの実行に影響を与えることはありません。 &lt;code&gt;run/3&lt;/code&gt; は常に、Erlangシステムのリアルタイムプロパティを保証する間隔で、Erlangプロセスのスケジューラに制御を戻します。</target>
        </trans-unit>
        <trans-unit id="6af47b199e89cf536046513882864286cab54688" translate="yes" xml:space="preserve">
          <source>This option does not guarantee exclusiveness on file systems not supporting &lt;code&gt;O_EXCL&lt;/code&gt; properly, such as NFS. Do not depend on this option unless you know that the file system supports it (in general, local file systems are safe).</source>
          <target state="translated">このオプションは、NFSなどの &lt;code&gt;O_EXCL&lt;/code&gt; を適切にサポートしていないファイルシステムの排他性を保証しません。ファイルシステムがサポートしていることがわかっている場合を除き、このオプションに依存しないでください（通常、ローカルファイルシステムは安全です）。</target>
        </trans-unit>
        <trans-unit id="170942e99acf8590a0f93f95af96a97ad9b43a74" translate="yes" xml:space="preserve">
          <source>This option guides the &lt;code&gt;connect&lt;/code&gt; function on how to act when the connected server presents a Host Key that the client has not seen before. The default is to ask the user with a question on stdio of whether to accept or reject the new Host Key. See the option &lt;code&gt;&lt;a href=&quot;#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; for specifying the path to the file &lt;code&gt;known_hosts&lt;/code&gt; where previously accepted Host Keys are recorded. See also the option &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; for the general way to handle keys.</source>
          <target state="translated">このオプションは、接続されたサーバーが、クライアントが以前に見たことのないホストキーを提示する場合の動作方法について、 &lt;code&gt;connect&lt;/code&gt; 機能をガイドします。デフォルトでは、stdioで新しいホストキーを受け入れるか拒否するかをユーザーに尋ねます。以前に受け入れられたホスト鍵が記録されている &lt;code&gt;known_hosts&lt;/code&gt; ファイルへのパスを指定するには、オプション &lt;code&gt;&lt;a href=&quot;#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; を参照してください。キーを処理する一般的な方法については、オプション &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="9f681818b307476626695654e1f4af8954537ac9" translate="yes" xml:space="preserve">
          <source>This option implies option &lt;code&gt;legacy_erlang_types&lt;/code&gt;.</source>
          <target state="translated">このオプションは、オプション &lt;code&gt;legacy_erlang_types&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="1b7df27500f11cd0120772f370d99f496bc69623" translate="yes" xml:space="preserve">
          <source>This option indicates weather the request should be resent until the reply is received, &lt;strong&gt;even&lt;/strong&gt; though a pending message has been received.</source>
          <target state="translated">このオプションは、保留中のメッセージが受信されていて&lt;strong&gt;も&lt;/strong&gt;、応答が受信されるまで要求を再送信する必要があるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="6ee2dcf0c6730f63f33d0e9b597dde90cc7553c6" translate="yes" xml:space="preserve">
          <source>This option indicates weather the transport module should be told if a message send is a resend or not.</source>
          <target state="translated">このオプションは、送信するメッセージが再送であるかどうかをトランスポートモジュー ルに伝えるべきかどうかを示す。</target>
        </trans-unit>
        <trans-unit id="f41d25f928d777038d78ec54aa87e0b2645ebe41" translate="yes" xml:space="preserve">
          <source>This option interacts with &lt;code&gt;&lt;a href=&quot;#+S&quot;&gt;+S&lt;/a&gt;&lt;/code&gt; settings. For example, on a system with 8 logical cores configured and 8 logical cores available, the combination of the options &lt;code&gt;+S 4:4 +SP 50:25&lt;/code&gt; (in either order) results in 2 scheduler threads (50% of 4) and 1 scheduler thread online (25% of 4).</source>
          <target state="translated">このオプションは &lt;code&gt;&lt;a href=&quot;#+S&quot;&gt;+S&lt;/a&gt;&lt;/code&gt; 設定と相互作用します。たとえば、8つの論理コアが構成され、8つの論理コアが使用可能なシステムでは、オプション &lt;code&gt;+S 4:4 +SP 50:25&lt;/code&gt; （どちらの順序でも）の組み合わせにより、2つのスケジューラスレッド（4の50％）と1オンラインのスケジューラスレッド（4の25％）。</target>
        </trans-unit>
        <trans-unit id="f69d8c25bc614477e7fde4538f00fb8866b22040" translate="yes" xml:space="preserve">
          <source>This option interacts with &lt;code&gt;&lt;a href=&quot;#+SDcpu&quot;&gt;+SDcpu&lt;/a&gt;&lt;/code&gt; settings. For example, on a system with 8 logical cores configured and 8 logical cores available, the combination of the options &lt;code&gt;+SDcpu 4:4 +SDPcpu 50:25&lt;/code&gt; (in either order) results in 2 dirty CPU scheduler threads (50% of 4) and 1 dirty CPU scheduler thread online (25% of 4).</source>
          <target state="translated">このオプションは、 &lt;code&gt;&lt;a href=&quot;#+SDcpu&quot;&gt;+SDcpu&lt;/a&gt;&lt;/code&gt; 設定と相互作用します。たとえば、8つの論理コアが構成され、8つの論理コアが使用可能なシステムでは、オプション &lt;code&gt;+SDcpu 4:4 +SDPcpu 50:25&lt;/code&gt; （どちらの順序でも）の組み合わせにより、2つのダーティCPUスケジューラスレッド（4の50％）が発生します。 1つのダーティCPUスケジューラスレッドがオンライン（4の25％）。</target>
        </trans-unit>
        <trans-unit id="1b1652a93096a292ea9f23a8fb30440e0918cbec" translate="yes" xml:space="preserve">
          <source>This option is a fast way to test whether a module will compile successfully. This is useful for code generators that want to verify the code that they emit. No code is generated. If warnings are enabled, warnings generated by the &lt;code&gt;erl_lint&lt;/code&gt; module (such as warnings for unused variables and functions) are also returned.</source>
          <target state="translated">このオプションは、モジュールが正常にコンパイルされるかどうかをテストする高速な方法です。これは、生成するコードを検証するコードジェネレーターに役立ちます。コードは生成されません。警告が有効になっている場合、 &lt;code&gt;erl_lint&lt;/code&gt; モジュールによって生成された警告（未使用の変数や関数に対する警告など）も返されます。</target>
        </trans-unit>
        <trans-unit id="0bc4c98f53e89f54019044a7876ab12f92896246" translate="yes" xml:space="preserve">
          <source>This option is experimental.</source>
          <target state="translated">このオプションは実験的なものです。</target>
        </trans-unit>
        <trans-unit id="bebef7a4d11a54b9572f9f20a10693f30204b1e4" translate="yes" xml:space="preserve">
          <source>This option is highly recommended. It makes &lt;code&gt;run_erl&lt;/code&gt; run in the background completely detached from any controlling terminal and the command returns to the caller immediately. Without this option, &lt;code&gt;run_erl&lt;/code&gt; must be started using several tricks in the shell to detach it completely from the terminal in use when starting it. The option must be the first argument to &lt;code&gt;run_erl&lt;/code&gt; on the command line.</source>
          <target state="translated">このオプションを強くお勧めします。それは作る &lt;code&gt;run_erl&lt;/code&gt; 完全にすぐに呼び出し元に任意の制御端末とコマンドリターンから外し、バックグラウンドで実行します。このオプションがない場合、 &lt;code&gt;run_erl&lt;/code&gt; は、起動時に使用中のターミナルから完全に切り離すために、シェルでいくつかのトリックを使用して起動する必要があります。オプションは、コマンドラインで &lt;code&gt;run_erl&lt;/code&gt; の最初の引数にする必要があります。</target>
        </trans-unit>
        <trans-unit id="799c0d875ea63318c2c432ae65671fb00f9b1962" translate="yes" xml:space="preserve">
          <source>This option is more useful. Here, reloading is queued if the driver is &lt;strong&gt;not&lt;/strong&gt; loaded by any other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt;, but the driver has opened ports, in which case &lt;code&gt;{ok, pending_driver}&lt;/code&gt; is returned (a &lt;code&gt;monitor&lt;/code&gt; option is recommended).</source>
          <target state="translated">このオプションはより便利です。ここで、ドライバーが他の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; によってロードされて&lt;strong&gt;いない&lt;/strong&gt;が、ドライバーがポートを開いている場合、リロードはキューに入れられます。その場合、 &lt;code&gt;{ok, pending_driver}&lt;/code&gt; が返されます（ &lt;code&gt;monitor&lt;/code&gt; オプションをお勧めします）。</target>
        </trans-unit>
        <trans-unit id="25d785f39f2ca30f9744131492e2e56cf2d21d95" translate="yes" xml:space="preserve">
          <source>This option is not allowed on &lt;code&gt;raw&lt;/code&gt; files.</source>
          <target state="translated">このオプションは &lt;code&gt;raw&lt;/code&gt; ファイルでは使用できません。</target>
        </trans-unit>
        <trans-unit id="2f286491eda734e921e24014e8a8a1eb9199ffbe" translate="yes" xml:space="preserve">
          <source>This option is not recommended.</source>
          <target state="translated">このオプションはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="f578117bb772460a22238ad9cfabbec82d626246" translate="yes" xml:space="preserve">
          <source>This option is only meaningful if option &lt;code&gt;binary&lt;/code&gt; was specified when the socket was created. If option &lt;code&gt;header&lt;/code&gt; is specified, the first &lt;code&gt;Size&lt;/code&gt; number bytes of data received from the socket are elements of a list, and the remaining data is a binary specified as the tail of the same list. For example, if &lt;code&gt;Size == 2&lt;/code&gt;, the data received matches &lt;code&gt;[Byte1,Byte2|Binary]&lt;/code&gt;.</source>
          <target state="translated">このオプションは、ソケットの作成時にオプション &lt;code&gt;binary&lt;/code&gt; が指定された場合にのみ意味があります。オプション &lt;code&gt;header&lt;/code&gt; が指定されている場合、ソケットから受信したデータの最初の &lt;code&gt;Size&lt;/code&gt; numberバイトはリストの要素であり、残りのデータは同じリストの末尾として指定されたバイナリです。たとえば、 &lt;code&gt;Size == 2&lt;/code&gt; 場合、受信したデータは &lt;code&gt;[Byte1,Byte2|Binary]&lt;/code&gt; 一致します。</target>
        </trans-unit>
        <trans-unit id="6aa3b24e42c5627fceb7d3a4c574f35704adb386" translate="yes" xml:space="preserve">
          <source>This option is only supported by the standard shell (&lt;code&gt;group.erl&lt;/code&gt;).</source>
          <target state="translated">このオプションは、標準シェル（ &lt;code&gt;group.erl&lt;/code&gt; ）でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="b072703d1b18dfc3f9f5977b6079b835f0224f83" translate="yes" xml:space="preserve">
          <source>This option is read-only. It determines the parameters specific to the peer address specified by &lt;code&gt;address&lt;/code&gt; within the association specified by &lt;code&gt;assoc_id&lt;/code&gt;. Field &lt;code&gt;address&lt;/code&gt; fmust be set by the caller; all other fields are filled in on return. If &lt;code&gt;assoc_id = 0&lt;/code&gt; (default), the &lt;code&gt;address&lt;/code&gt; is automatically translated into the corresponding association ID. This option is rarely used. For the semantics of all fields, see &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このオプションは読み取り専用です。それによって指定されたピアのアドレスにパラメータの特定を決定する &lt;code&gt;address&lt;/code&gt; で指定されたアソシエーション内 &lt;code&gt;assoc_id&lt;/code&gt; 。フィールド &lt;code&gt;address&lt;/code&gt; は、呼び出し元が設定する必要があります。他のすべてのフィールドは、戻り時に入力されます。場合 &lt;code&gt;assoc_id = 0&lt;/code&gt; （デフォルト）、 &lt;code&gt;address&lt;/code&gt; 自動的に対応するアソシエーションIDに変換されます。このオプションはほとんど使用されません。すべてのフィールドのセマンティクスについては、 &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="195222e570592e1300b4b25ab1af9e1c8e8e90bb" translate="yes" xml:space="preserve">
          <source>This option is read-only. It determines the status of the SCTP association specified by &lt;code&gt;assoc_id&lt;/code&gt;. The following are the possible values of &lt;code&gt;state&lt;/code&gt; (the state designations are mostly self-explanatory):</source>
          <target state="translated">このオプションは読み取り専用です。 &lt;code&gt;assoc_id&lt;/code&gt; で指定されたSCTPアソシエーションのステータスを決定します。 &lt;code&gt;state&lt;/code&gt; の可能な値は次のとおりです（状態の指定はほとんどが自明です）。</target>
        </trans-unit>
        <trans-unit id="2a7c2f54502986cac56e74f74f0507e617134fa9" translate="yes" xml:space="preserve">
          <source>This option is removed, it generates a fatal error if used.</source>
          <target state="translated">このオプションを使用すると致命的なエラーが発生するため、このオプションは削除されました。</target>
        </trans-unit>
        <trans-unit id="0d0dc8c0d9bb7eab4181aa210080e8a3266e279c" translate="yes" xml:space="preserve">
          <source>This option is set to &lt;code&gt;true&lt;/code&gt; by default.</source>
          <target state="translated">このオプションはデフォルトで &lt;code&gt;true&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="9b0aa3e98f799062b3c35a4a811d03b341b1e599" translate="yes" xml:space="preserve">
          <source>This option is supported by the standard shell (&lt;code&gt;group.erl&lt;/code&gt;), the 'oldshell' (&lt;code&gt;user.erl&lt;/code&gt;), and the file I/O servers.</source>
          <target state="translated">このオプションは、標準シェル（ &lt;code&gt;group.erl&lt;/code&gt; ）、 'oldshell'（ &lt;code&gt;user.erl&lt;/code&gt; ）、およびファイルI / Oサーバーでサポートされています。</target>
        </trans-unit>
        <trans-unit id="b3a3a12611755048747534c6172534fba6193da6" translate="yes" xml:space="preserve">
          <source>This option is to be used only while running &lt;code&gt;erts_alloc_config(3)&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; when using the created configuration.</source>
          <target state="translated">このオプションは、作成された構成を使用するときで&lt;strong&gt;はなく&lt;/strong&gt;、 &lt;code&gt;erts_alloc_config(3)&lt;/code&gt; の実行中にのみ使用されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="889aee4f7fdaed4924ebd813f97d33cc589d7043" translate="yes" xml:space="preserve">
          <source>This option is typically used when building or modifying a PLT as in:</source>
          <target state="translated">このオプションは、通常、PLTを構築または変更する際に使用されます。</target>
        </trans-unit>
        <trans-unit id="edf2a03815bd1d16fe28550db84f5fb84528060e" translate="yes" xml:space="preserve">
          <source>This option is used to &lt;strong&gt;reload&lt;/strong&gt; a driver from disk, most often in a code upgrade scenario. Having a &lt;code&gt;reload&lt;/code&gt; option also implies that parameter &lt;code&gt;Path&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; need to be consistent with earlier loads of the driver.</source>
          <target state="translated">このオプションは、ディスクからドライバーを&lt;strong&gt;リロード&lt;/strong&gt;するために使用されます。ほとんどの場合、コードアップグレードシナリオで使用されます。持つ &lt;code&gt;reload&lt;/code&gt; オプションもそのパラメータの意味 &lt;code&gt;Path&lt;/code&gt; ない&lt;strong&gt;ではない&lt;/strong&gt;ドライバの初期の負荷と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="d51f4b2d1bb2d48353207aa92dd60bc3873e9f8f" translate="yes" xml:space="preserve">
          <source>This option should be set to &lt;code&gt;false&lt;/code&gt; since a sufficiently malicious peer can otherwise cause large amounts of memory to be consumed when decoded Diameter messages are passed between processes. The default value is for backwards compatibility.</source>
          <target state="translated">十分に悪意のあるピアは、プロセス間でデコードされたDiameterメッセージが渡されるときに大量のメモリを消費させる可能性があるため、このオプションは &lt;code&gt;false&lt;/code&gt; に設定する必要があります。デフォルト値は下位互換性のためのものです。</target>
        </trans-unit>
        <trans-unit id="57817b80cdc930329e3a4d5793e370393a3211f0" translate="yes" xml:space="preserve">
          <source>This option specifies how basic mib data is stored. This option is used by two parts of the snmp agent: The mib-server and the symbolic-store.</source>
          <target state="translated">このオプションは、基本的な mib データの保存方法を指定します。このオプションは、snmpエージェントの2つの部分で使用されます。mib-serverとsymbolic-storeです。</target>
        </trans-unit>
        <trans-unit id="ff5c27e867a6f1798699a8d8412847ef2c9f83ca" translate="yes" xml:space="preserve">
          <source>This option specifies if the user shall be notified of received segment replies or not.</source>
          <target state="translated">このオプションは、受信したセグメントの返信をユーザーに通知するかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="e191bd75bc4b33a8992d72798fec2d5cb030668d" translate="yes" xml:space="preserve">
          <source>This option uses the Linux-specific socket option &lt;code&gt;SO_BINDTODEVICE&lt;/code&gt;, such as in Linux kernel 2.0.30 or later, and therefore only exists when the runtime system is compiled for such an operating system.</source>
          <target state="translated">このオプションは、Linux カーネル2.0.30以降など、Linux固有のソケットオプション &lt;code&gt;SO_BINDTODEVICE&lt;/code&gt; を使用するため、そのようなオペレーティングシステム用にランタイムシステムがコンパイルされている場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="2b531690e0f1058c69b2d245e35526e30090198c" translate="yes" xml:space="preserve">
          <source>This option uses the Linux-specific syscall &lt;code&gt;setns()&lt;/code&gt;, such as in Linux kernel 3.0 or later, and therefore only exists when the runtime system is compiled for such an operating system.</source>
          <target state="translated">このオプションは、Linux カーネル3.0以降などのLinux固有のsyscall &lt;code&gt;setns()&lt;/code&gt; を使用するため、そのようなオペレーティングシステム用にランタイムシステムがコンパイルされている場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="44252bdcc3d79897b51179b686a1c2db9495ee64" translate="yes" xml:space="preserve">
          <source>This option will be removed in a future release. The return value will always be &lt;code&gt;false&lt;/code&gt;, as the &lt;code&gt;elib_malloc&lt;/code&gt; allocator has been removed.</source>
          <target state="translated">このオプションは将来のリリースで削除される予定です。 &lt;code&gt;elib_malloc&lt;/code&gt; アロケーターが削除されているため、戻り値は常に &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="c0dabdcd13ff03271c7b6e7a946847dbd231dc01" translate="yes" xml:space="preserve">
          <source>This option will use a lot of memory when enabled, which must be reclaimed with &lt;code&gt;lcnt:rt_clear&lt;/code&gt;. Note that it makes no distinction between locks that were destroyed and locks for which counting was disabled, so enabling this option will disable changes to the lock category mask.</source>
          <target state="translated">このオプションを有効にすると、大量のメモリが使用されます。これは、 &lt;code&gt;lcnt:rt_clear&lt;/code&gt; で再利用する必要があります。破棄されたロックと、カウントが無効にされたロックは区別されないため、このオプションを有効にすると、ロックカテゴリマスクへの変更が無効になります。</target>
        </trans-unit>
        <trans-unit id="63372d9f26162432c70de9dd21cb0a2fa14e443c" translate="yes" xml:space="preserve">
          <source>This package contains modules for handling abstract syntax trees (ASTs) in Erlang, in a way that is compatible with the &quot;abstract format&quot; parse trees of the stdlib module &lt;code&gt;erl_parse&lt;/code&gt;, together with utilities for reading source files, &lt;code&gt;&lt;a href=&quot;erl_prettypr&quot;&gt;pretty-printing syntax trees&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;igor&quot;&gt;merging and renaming modules&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erl_tidy&quot;&gt;cleaning up obsolete constructs&lt;/a&gt;&lt;/code&gt;, and doing &lt;code&gt;&lt;a href=&quot;merl&quot;&gt;metaprogramming&lt;/a&gt;&lt;/code&gt; in Erlang.</source>
          <target state="translated">このパッケージには、stdlibモジュール &lt;code&gt;erl_parse&lt;/code&gt; の「抽象形式」解析ツリーと互換性のある方法で、Erlangで抽象構文ツリー（AST）を処理するためのモジュールと、ソースファイルを読み取るためのユーティリティ、 &lt;code&gt;&lt;a href=&quot;erl_prettypr&quot;&gt;pretty-printing syntax trees&lt;/a&gt;&lt;/code&gt; するため、 &lt;code&gt;&lt;a href=&quot;igor&quot;&gt;merging and renaming modules&lt;/a&gt;&lt;/code&gt; するためのユーティリティが含まれていますモジュールの名前の変更、 &lt;code&gt;&lt;a href=&quot;erl_tidy&quot;&gt;cleaning up obsolete constructs&lt;/a&gt;&lt;/code&gt; 、Erlangでの &lt;code&gt;&lt;a href=&quot;merl&quot;&gt;metaprogramming&lt;/a&gt;&lt;/code&gt; 実行。</target>
        </trans-unit>
        <trans-unit id="2aa90d46e1988deecd458f84f25660e5efaeb6ec" translate="yes" xml:space="preserve">
          <source>This page presents a summary of values from all allocators underneath it.</source>
          <target state="translated">このページでは、その下にあるすべてのアロケータの値をまとめて表示しています。</target>
        </trans-unit>
        <trans-unit id="239f6919f70832c0fd44ac0346db01f8572c3052" translate="yes" xml:space="preserve">
          <source>This pair of functions are used when open ports to the driver are to be killed with reason &lt;code&gt;driver_unloaded&lt;/code&gt; to allow for new driver code to get loaded.</source>
          <target state="translated">この関数のペアは、ドライバーへの開いているポートを理由 &lt;code&gt;driver_unloaded&lt;/code&gt; で強制終了して、新しいドライバーコードをロードできるようにする場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="1602bf3b2d8c23237b0a61febcf52e3e006d8036" translate="yes" xml:space="preserve">
          <source>This pair of functions is used when reloading is to be done after the last open port to the driver is closed.</source>
          <target state="translated">この対の機能は、ドライバへの最後のオープンポートを閉じた後にリロードを行う場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="f14b771e39c5dc99621a28cd9cae451233b4cbb8" translate="yes" xml:space="preserve">
          <source>This parameter contains a list of options that are given to &lt;code&gt;zip:create/3&lt;/code&gt; when application specific files are packaged into an archive. Only a subset of the options are supported. The most useful options in this context are the ones that control which types of files should be compressed. This parameter defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには、アプリケーション固有のファイルがアーカイブにパッケージ化されるときに &lt;code&gt;zip:create/3&lt;/code&gt; に指定されるオプションのリストが含まれています。オプションのサブセットのみがサポートされています。このコンテキストで最も役立つオプションは、圧縮するファイルのタイプを制御するオプションです。このパラメーターのデフォルトは &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="58e5c112e068eb199424c98749e9d0931666cadb" translate="yes" xml:space="preserve">
          <source>This parameter controls the application and escript inclusion policy. It defaults to &lt;code&gt;derived&lt;/code&gt; which means that the applications that do not have any explicit &lt;code&gt;incl_cond&lt;/code&gt; setting, will only be included if any other (explicitly or implicitly included) application uses it. The value &lt;code&gt;include&lt;/code&gt; implies that all applications and escripts that do not have any explicit &lt;code&gt;incl_cond&lt;/code&gt; setting will be included. &lt;code&gt;exclude&lt;/code&gt; implies that all applications and escripts that do not have any explicit &lt;code&gt;incl_cond&lt;/code&gt; setting will be excluded.</source>
          <target state="translated">このパラメーターは、アプリケーションとescriptの包含ポリシーを制御します。デフォルトは &lt;code&gt;derived&lt;/code&gt; です。つまり、明示的な &lt;code&gt;incl_cond&lt;/code&gt; 設定がないアプリケーションは、他の（明示的または暗黙的に含まれている）アプリケーションがそれを使用する場合にのみ含まれます。値 &lt;code&gt;include&lt;/code&gt; は、明示的な &lt;code&gt;incl_cond&lt;/code&gt; 設定がないすべてのアプリケーションおよびescriptsが含まれることを意味します。 &lt;code&gt;exclude&lt;/code&gt; は、明示的な &lt;code&gt;incl_cond&lt;/code&gt; 設定がないすべてのアプリケーションおよびescriptsが除外されることを意味します。</target>
        </trans-unit>
        <trans-unit id="43b8b48e3d3e4e5f584a2110e61fc94f1dda52fb" translate="yes" xml:space="preserve">
          <source>This parameter controls the default handling of the &lt;code&gt;app&lt;/code&gt; files when a target system is generated. It defaults to &lt;code&gt;keep&lt;/code&gt; which means that &lt;code&gt;app&lt;/code&gt; files are copied to the target system and their contents are kept as they are. &lt;code&gt;strip&lt;/code&gt; means that a new &lt;code&gt;app&lt;/code&gt; file is generated from the contents of the original &lt;code&gt;app&lt;/code&gt; file where the non included modules are removed from the file. &lt;code&gt;all&lt;/code&gt; does also imply that a new &lt;code&gt;app&lt;/code&gt; file is generated from the contents of the original &lt;code&gt;app&lt;/code&gt; file, with the difference that all included modules are added to the file. If the application does not have any &lt;code&gt;app&lt;/code&gt; file a file will be created for &lt;code&gt;all&lt;/code&gt; but not for &lt;code&gt;keep&lt;/code&gt; and &lt;code&gt;strip&lt;/code&gt;.</source>
          <target state="translated">このパラメーターは、ターゲットシステムが生成されるときの &lt;code&gt;app&lt;/code&gt; ファイルのデフォルトの処理を制御します。デフォルトでは &lt;code&gt;keep&lt;/code&gt; されます。これは、 &lt;code&gt;app&lt;/code&gt; ファイルがターゲットシステムにコピーされ、その内容がそのまま保持されることを意味します。 &lt;code&gt;strip&lt;/code&gt; とは、元の &lt;code&gt;app&lt;/code&gt; ファイルのコンテンツから新しい &lt;code&gt;app&lt;/code&gt; ファイルが生成され、含まれていないモジュールがファイルから削除されることを意味します。 &lt;code&gt;all&lt;/code&gt; 新しいことを意味しない &lt;code&gt;app&lt;/code&gt; ファイルは、元のコンテンツから生成された &lt;code&gt;app&lt;/code&gt; のすべて含まれるモジュールがファイルに追加されるという点は相違させて、ファイル。アプリケーションは、任意の持っていない場合は &lt;code&gt;app&lt;/code&gt; ファイルは、 &lt;code&gt;all&lt;/code&gt; ファイルに対して作成されますが、 &lt;code&gt;keep&lt;/code&gt; および &lt;code&gt;strip&lt;/code&gt; 用ではありません。</target>
        </trans-unit>
        <trans-unit id="178517341ccd2e5776c2cccf896941a880130c85" translate="yes" xml:space="preserve">
          <source>This parameter controls the module inclusion policy. It defaults to &lt;code&gt;all&lt;/code&gt; which means that if an application is included (either explicitly or implicitly) all modules in that application will be included. This implies that both modules that exist in the &lt;code&gt;ebin&lt;/code&gt; directory of the application, as well as modules that are named in the &lt;code&gt;app&lt;/code&gt; file will be included. If the parameter is set to &lt;code&gt;ebin&lt;/code&gt;, both modules in the &lt;code&gt;ebin&lt;/code&gt; directory and derived modules are included. If the parameter is set to &lt;code&gt;app&lt;/code&gt;, both modules in the &lt;code&gt;app&lt;/code&gt; file and derived modules are included. &lt;code&gt;derived&lt;/code&gt; means that only modules that are used by other included modules are included. The &lt;code&gt;mod_cond&lt;/code&gt; setting on system level is used as default for all applications.</source>
          <target state="translated">このパラメーターは、モジュール包含ポリシーを制御します。デフォルトは &lt;code&gt;all&lt;/code&gt; 。つまり、アプリケーションが（明示的または暗黙的に）組み込まれている場合、そのアプリケーションのすべてのモジュールが組み込まれます。これは、アプリケーションの &lt;code&gt;ebin&lt;/code&gt; ディレクトリに存在するモジュールと、 &lt;code&gt;app&lt;/code&gt; ファイルで指定されたモジュールの両方が含まれることを意味します。パラメータが &lt;code&gt;ebin&lt;/code&gt; に設定されている場合、 &lt;code&gt;ebin&lt;/code&gt; ディレクトリ内のモジュールと派生モジュールの両方が含まれます。パラメーターが &lt;code&gt;app&lt;/code&gt; に設定されている場合、 &lt;code&gt;app&lt;/code&gt; ファイル内のモジュールと派生モジュールの両方が含まれます。 &lt;code&gt;derived&lt;/code&gt; 含まれる他のモジュールで使用されるモジュールのみが含まれることを意味します。システムレベルの &lt;code&gt;mod_cond&lt;/code&gt; 設定は、すべてのアプリケーションのデフォルトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="f35dbde0b2e6b7417fe1079d2c8cb135463fb518" translate="yes" xml:space="preserve">
          <source>This parameter controls whether the &lt;code&gt;erl&lt;/code&gt; executable in the target system should automatically determine where it is installed or if it should use a hardcoded path to the installation. In the latter case the target system must be installed with &lt;code&gt;reltool:install/2&lt;/code&gt; before it can be used. If the system is relocatable, the file tree containing the target system can be moved to another location without re-installation. The default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">このパラメーターは、ターゲットシステムの &lt;code&gt;erl&lt;/code&gt; 実行可能ファイルがそれがインストールされている場所を自動的に決定するか、またはインストールへのハードコーディングされたパスを使用するかを制御します。後者の場合、ターゲットシステムは使用する前に &lt;code&gt;reltool:install/2&lt;/code&gt; でインストールする必要があります。システムが再配置可能である場合、ターゲットシステムを含むファイルツリーは、再インストールせずに別の場所に移動できます。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="18eec3d4c813ec5a22514b8e2727f74034894ae8" translate="yes" xml:space="preserve">
          <source>This parameter controls whether the module is included or not. By default the &lt;code&gt;mod_cond&lt;/code&gt; parameter on application and system level will be used to control whether the module is included or not. The value of &lt;code&gt;incl_cond&lt;/code&gt; overrides the module inclusion policy. &lt;code&gt;include&lt;/code&gt; implies that the module is included, while &lt;code&gt;exclude&lt;/code&gt; implies that the module is not included. &lt;code&gt;derived&lt;/code&gt; implies that the module is included if it is used by any other included module.</source>
          <target state="translated">このパラメーターは、モジュールを含めるかどうかを制御します。デフォルトでは、アプリケーションおよびシステムレベルの &lt;code&gt;mod_cond&lt;/code&gt; パラメータを使用して、モジュールを含めるかどうかを制御します。 &lt;code&gt;incl_cond&lt;/code&gt; の値は、モジュール包含ポリシーをオーバーライドします。 &lt;code&gt;include&lt;/code&gt; はモジュールが含まれている &lt;code&gt;exclude&lt;/code&gt; 意味し、excludeはモジュールが含まれていないことを意味します。 &lt;code&gt;derived&lt;/code&gt; は、他のインクルードモジュールで使用されている場合、そのモジュールがインクルードされることを意味します。</target>
        </trans-unit>
        <trans-unit id="40145ab28fcdbc933f15879eca2c3243c28ec539" translate="yes" xml:space="preserve">
          <source>This parameter defines the error report type used when messages are sent to error logger using the default callback function. Default is &lt;code&gt;std_error&lt;/code&gt;, which means the events are handled by the standard event handler.</source>
          <target state="translated">このパラメーターは、デフォルトのコールバック関数を使用してメッセージがエラーロガーに送信されるときに使用されるエラーレポートタイプを定義します。デフォルトは &lt;code&gt;std_error&lt;/code&gt; です。これは、イベントが標準のイベントハンドラーによって処理されることを意味します。</target>
        </trans-unit>
        <trans-unit id="d8e1e13f6286b2183d8789f9f0f1c181e848b5c7" translate="yes" xml:space="preserve">
          <source>This parameter is mutual exclusive with &lt;code&gt;lib_dir&lt;/code&gt;. If &lt;code&gt;vsn&lt;/code&gt; and &lt;code&gt;lib_dir&lt;/code&gt; are both omitted, the latest version will be chosen.</source>
          <target state="translated">このパラメーターは &lt;code&gt;lib_dir&lt;/code&gt; と相互に排他的です。場合は &lt;code&gt;vsn&lt;/code&gt; と &lt;code&gt;lib_dir&lt;/code&gt; 両方とも省略され、最新のバージョンが選択されます。</target>
        </trans-unit>
        <trans-unit id="e97c191330c9143719f39676fbf0d64a524888a9" translate="yes" xml:space="preserve">
          <source>This parameter is mutual exclusive with &lt;code&gt;vsn&lt;/code&gt;. If &lt;code&gt;vsn&lt;/code&gt; and &lt;code&gt;lib_dir&lt;/code&gt; are both omitted, the latest version will be chosen.</source>
          <target state="translated">このパラメーターは、 &lt;code&gt;vsn&lt;/code&gt; と相互に排他的です。場合は &lt;code&gt;vsn&lt;/code&gt; と &lt;code&gt;lib_dir&lt;/code&gt; 両方とも省略され、最新のバージョンが選択されます。</target>
        </trans-unit>
        <trans-unit id="fccea6e9894e7980e5b72b89472e98f04ef2c3ca" translate="yes" xml:space="preserve">
          <source>This parameter is of type &lt;code&gt;dateTime&lt;/code&gt; and compliant to RFC 3339. Implementations must support time zones.</source>
          <target state="translated">このパラメーターのタイプは &lt;code&gt;dateTime&lt;/code&gt; で、RFC 3339に準拠しています。実装はタイムゾーンをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="950fdba8a7f8faa27a2238104e4fbd9416d168d5" translate="yes" xml:space="preserve">
          <source>This parameter is the name of the driver to be used in subsequent calls to function &lt;code&gt;erlang:open_port&lt;/code&gt; in ERTS. The name can be specified as an &lt;code&gt;iolist()&lt;/code&gt; or an &lt;code&gt;atom()&lt;/code&gt;. The name specified when loading is used to find the object file (with the help of &lt;code&gt;Path&lt;/code&gt; and the system-implied extension suffix, that is, &lt;code&gt;.so&lt;/code&gt;). The name by which the driver identifies itself must also be consistent with this &lt;code&gt;Name&lt;/code&gt; parameter, much as the module name of a Beam file much corresponds to its filename.</source>
          <target state="translated">このパラメーターは、 &lt;code&gt;erlang:open_port&lt;/code&gt; 関数erlang：open_portへの後続の呼び出しで使用されるドライバーの名前です。名前は &lt;code&gt;iolist()&lt;/code&gt; または &lt;code&gt;atom()&lt;/code&gt; として指定できます。ロード時に指定された名前は、オブジェクトファイルを検索するために使用されます（ &lt;code&gt;Path&lt;/code&gt; とシステムで暗黙の拡張子サフィックス、つまり &lt;code&gt;.so&lt;/code&gt; を使用して）。Beamファイルのモジュール名がそのファイル名に相当するのと同様に、ドライバーがそれ自体を識別する &lt;code&gt;Name&lt;/code&gt; もこのNameパラメーターと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="44b3acd62887c89fa3ae2ebe622fc74f4ca003b3" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which application specific files should not be included in the target system. In order to be included, a file must match some filter in &lt;code&gt;incl_app_filters&lt;/code&gt; but not any filter in &lt;code&gt;excl_app_filters&lt;/code&gt;. This parameter defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、ターゲットシステムに含めないアプリケーション固有のファイルを制御する正規表現のリストが含まれています。含まれるためには、ファイルがでいくつかのフィルタと一致しなければなりません &lt;code&gt;incl_app_filters&lt;/code&gt; ではなく、内の任意のフィルタ &lt;code&gt;excl_app_filters&lt;/code&gt; を。このパラメーターのデフォルトは &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8f82af56ab8d93da6eddb3eddde55461bf95b47f" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which application specific files that should be included. Each file in the application must match at least one of the listed regular expressions in order to be included. Further the files may not match any filter in &lt;code&gt;excl_app_filters&lt;/code&gt; in order to be included. This parameter defaults to &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、どのアプリケーション固有のファイルを含めるかを制御する正規表現のリストが含まれています。アプリケーションの各ファイルを含めるには、リストされている正規表現の少なくとも1つに一致する必要があります。さらに、ファイルは含まれるために &lt;code&gt;excl_app_filters&lt;/code&gt; のどのフィルターとも一致しない場合があります。このパラメーターのデフォルトは &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a274c6a75bab058057d8bad1dd9c6f7fc4d783d1" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which files in the system should be included. Each file in the target system must match at least one of the listed regular expressions in order to be included. Further the files may not match any filter in &lt;code&gt;excl_sys_filters&lt;/code&gt; in order to be included. Which application files should be included is controlled with the parameters &lt;code&gt;incl_app_filters&lt;/code&gt; and &lt;code&gt;excl_app_filters&lt;/code&gt;. This parameter defaults to &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、システム内のどのファイルを含めるかを制御する正規表現のリストが含まれています。ターゲットシステムの各ファイルを含めるには、リストされている正規表現の少なくとも1つに一致する必要があります。さらに、ファイルは含まれるために &lt;code&gt;excl_sys_filters&lt;/code&gt; のどのフィルターとも一致しない場合があります。どのアプリケーションファイルを含めるかは、パラメーター &lt;code&gt;incl_app_filters&lt;/code&gt; および &lt;code&gt;excl_app_filters&lt;/code&gt; で制御されます。このパラメーターのデフォルトは &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="110f1ed95034cf6ba82c260c7d3422382ccf8b06" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which files in the system should not be included in the target system. In order to be included, a file must match some filter in &lt;code&gt;incl_sys_filters&lt;/code&gt; but not any filter in &lt;code&gt;excl_sys_filters&lt;/code&gt;. This parameter defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、システム内のどのファイルをターゲットシステムに含めないかを制御する正規表現のリストが含まれています。含まれるためには、ファイルがでいくつかのフィルタと一致しなければなりません &lt;code&gt;incl_sys_filters&lt;/code&gt; ではなく、内の任意のフィルタ &lt;code&gt;excl_sys_filters&lt;/code&gt; を。このパラメーターのデフォルトは &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ff17bba9924b137232a805ed2fc26cbf5b146168" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which top level directories in an application should be included in an archive file (as opposed to being included as a regular directory outside the archive). Each top directory in the application must match at least one of the listed regular expressions in order to be included. Further the files may not match any filter in &lt;code&gt;excl_app_filters&lt;/code&gt; in order to be included. This parameter defaults to &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt;.</source>
          <target state="translated">通常、このパラメーターには、アーカイブファイルに含める必要があるアプリケーションのトップレベルディレクトリを制御する正規表現のリストが含まれます（アーカイブ外の通常のディレクトリとして含めるのではなく）。アプリケーションの最上位ディレクトリを含めるには、リストされた正規表現の少なくとも1つに一致する必要があります。さらに、ファイルは含まれるために &lt;code&gt;excl_app_filters&lt;/code&gt; のどのフィルターとも一致しない場合があります。このパラメーターのデフォルトは &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8cccf208765941cdf1852be703e61e2a97e335ee" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which top level directories in an application should not be included in an archive file. In order to be included in the application archive, a top directory must match some filter in &lt;code&gt;incl_archive_filters&lt;/code&gt; but not any filter in &lt;code&gt;excl_archive_filters&lt;/code&gt;. This parameter defaults to &lt;code&gt;[&quot;^include$&quot;,&quot;^priv$&quot;]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、アプリケーションのどのトップレベルディレクトリをアーカイブファイルに含めないかを制御する正規表現のリストが含まれています。アプリケーションアーカイブに含まれるためには、トップディレクトリがでいくつかのフィルタと一致しなければなりません &lt;code&gt;incl_archive_filters&lt;/code&gt; ではなく、内の任意のフィルタ &lt;code&gt;excl_archive_filters&lt;/code&gt; を。このパラメーターのデフォルトは &lt;code&gt;[&quot;^include$&quot;,&quot;^priv$&quot;]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="28343ed29b2c1e141aa76f8b0c8cab09dcd45849" translate="yes" xml:space="preserve">
          <source>This parameter specifies if the Erlang emulator is statically installed at the client node. A node with a static emulator cannot dynamically switch to a new emulator, as the executable files are statically written into memory.</source>
          <target state="translated">このパラメータはErlangエミュレータがクライアントノードに静的にインストールされているかどうかを指定します。スタティックエミュレータがインストールされているノードでは、実行ファイルはメモリに静的に書き込まれるので、新しいエミュレータに動的に切り替えることはできません。</target>
        </trans-unit>
        <trans-unit id="d50377640826220d17a47ef2e3ec41045600adb8" translate="yes" xml:space="preserve">
          <source>This part is done on the target node, and for this example we want the node to be running as an embedded system with the &lt;code&gt;-heart&lt;/code&gt; option, allowing automatic restart of the node. For more information, see &lt;code&gt;&lt;a href=&quot;#start&quot;&gt;Starting a Target System&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この部分はターゲットノードで実行されます。この例では、ノードを &lt;code&gt;-heart&lt;/code&gt; オプションを使用して組み込みシステムとして実行し、ノードの自動再起動を許可します。詳細については &lt;code&gt;&lt;a href=&quot;#start&quot;&gt;Starting a Target System&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="5bac7f8bcb72cbf602859c2bbd2ca1accde6e195" translate="yes" xml:space="preserve">
          <source>This particular example pattern that we have studied contains nested unlimited repeats, and so the use of a possessive quantifier for matching strings of non-parentheses is important when applying the pattern to strings that do not match. For example, when this pattern is applied to</source>
          <target state="translated">私たちが研究してきたこの特定の例のパターンは、入れ子になった無制限の繰り返しを含んでいるので、一致しない文字列にパターンを適用する際には、一致しない文字列にマッチするための所有的量詞を使用することが重要になります。例えば、このパターンを</target>
        </trans-unit>
        <trans-unit id="cafdded1913809a983e1e03ea48bb5d4d797a73a" translate="yes" xml:space="preserve">
          <source>This particular group matches either the two-character sequence CR followed by LF, or one of the single characters LF (line feed, U+000A), VT (vertical tab, U+000B), FF (form feed, U+000C), CR (carriage return, U+000D), or NEL (next line, U+0085). The two-character sequence is treated as a single unit that cannot be split.</source>
          <target state="translated">この特定のグループは、LFに続く2文字列CR、またはLF(改行、U+000A)、VT(縦タブ、U+000B)、FF(フォームフィード、U+000C)、CR(キャリッジリターン、U+000D)、またはNEL(次の行、U+0085)のいずれかにマッチします。2文字列は、分割できない1つの単位として扱われます。</target>
        </trans-unit>
        <trans-unit id="a1fd9cfe743405ab50e9a660ad376f4821d6a0dd" translate="yes" xml:space="preserve">
          <source>This particular server probably does not use heap memory worth hibernating for. To gain anything from hibernation, your server would have to produce non-insignificant garbage during callback execution, for which this example server can serve as a bad example.</source>
          <target state="translated">この特定のサーバは、おそらくハイバネーションに値するヒープメモリを使用していません。ハイバネーションから何かを得るためには、コールバックの実行中に重要ではないガベージを生成しなければなりません。</target>
        </trans-unit>
        <trans-unit id="dff69f09f8373963a046e44d87eb56b39d18544d" translate="yes" xml:space="preserve">
          <source>This pattern matches &lt;code&gt;a\nb&lt;/code&gt;, as LF is no longer a newline. If more than one of them is present, the last one is used.</source>
          <target state="translated">LFは改行ではないため、このパターンは &lt;code&gt;a\nb&lt;/code&gt; に一致します。それらが複数存在する場合は、最後のものが使用されます。</target>
        </trans-unit>
        <trans-unit id="f5f3552b260ce80c8512e7857145bb94d23327e2" translate="yes" xml:space="preserve">
          <source>This phase begins when the user finalizes the time offset by calling &lt;code&gt;&lt;a href=&quot;erlang#system_flag_time_offset&quot;&gt;erlang:system_flag(time_offset, finalize)&lt;/a&gt;&lt;/code&gt;. The finalization can only be performed once.</source>
          <target state="translated">ユーザーが &lt;code&gt;&lt;a href=&quot;erlang#system_flag_time_offset&quot;&gt;erlang:system_flag(time_offset, finalize)&lt;/a&gt;&lt;/code&gt; 呼び出して時間オフセットを確定すると、このフェーズが始まります。ファイナライズは一度だけ実行できます。</target>
        </trans-unit>
        <trans-unit id="ac25d4a9fb597e683c9984270c084780c2dc2975" translate="yes" xml:space="preserve">
          <source>This phase starts when the runtime system starts. A preliminary time offset based on current OS system time is determined. This offset is from now on to be fixed during the whole preliminary phase.</source>
          <target state="translated">このフェーズはランタイムシステムの起動時に開始されます。現在のOSシステムの時間に基づいて、予備的な時間オフセットが決定されます。このオフセットは今後、予備フェーズ全体で固定されることになる。</target>
        </trans-unit>
        <trans-unit id="a659cf785f049a86d756b9c813aaeb6a80c02b1c" translate="yes" xml:space="preserve">
          <source>This port is to represent the result of an accept operation. It is created when one wants to accept from a listen socket, and it is converted to a &lt;code&gt;portTypeCommand&lt;/code&gt; when the accept succeeds.</source>
          <target state="translated">このポートは、受け入れ操作の結果を表すためのものです。これは、 &lt;code&gt;portTypeCommand&lt;/code&gt; ソケットから受け入れたいときに作成され、受け入れが成功したときにportTypeCommandに変換されます。</target>
        </trans-unit>
        <trans-unit id="8d46acb6abe2d76532e14cb270ed2c145b67edbb" translate="yes" xml:space="preserve">
          <source>This prevents creation of new atoms directly, creation of new atoms indirectly (as they are embedded in certain structures, such as process identifiers, refs, and funs), and creation of new external function references. None of those resources are garbage collected, so unchecked creation of them can exhaust available memory.</source>
          <target state="translated">これにより、新しいアトムの直接生成、間接的な新しいアトムの生成(プロセス識別子、Refs、funs などの特定の構造体に埋め込まれているため)、新しい外部関数参照の生成を防ぐことができます。これらのリソースはどれもガベージコレクションされないので、チェックを外したまま作成すると利用可能なメモリを使い果たしてしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="161ffdf8aa7fe91e902cf0c46062cf3c8c9ce913" translate="yes" xml:space="preserve">
          <source>This problem does not exist if all nodes are Erlang nodes.</source>
          <target state="translated">この問題はすべてのノードがErlangノードの場合には存在しません。</target>
        </trans-unit>
        <trans-unit id="970e9bfda49ef81fc9970f5d3a17505b795bc146" translate="yes" xml:space="preserve">
          <source>This problem is best solved by using Mnesia instead.</source>
          <target state="translated">この問題は、代わりにムネシアを使うことで解決するのがベストです。</target>
        </trans-unit>
        <trans-unit id="9c05999f98fd47b44ec0f00834f055638c5316ef" translate="yes" xml:space="preserve">
          <source>This process cannot run in multiple instances on the same hardware. OS_Mon must be configured to start &lt;code&gt;os_sup&lt;/code&gt; on one node only if two or more Erlang nodes execute on the same machine.</source>
          <target state="translated">このプロセスは、同じハードウェア上の複数のインスタンスで実行できません。OS_Monは、2つ以上のErlangノードが同じマシンで実行される場合にのみ、1つのノードで &lt;code&gt;os_sup&lt;/code&gt; を開始するように構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="3bb9e5caa10f9724817c37ffd6b5d433a1304dd3" translate="yes" xml:space="preserve">
          <source>This process executes &lt;code&gt;tut15:pong()&lt;/code&gt;. &lt;code&gt;Pong_PID&lt;/code&gt; is the process identity of the &quot;pong&quot; process. The function &lt;code&gt;start&lt;/code&gt; now creates another process &quot;ping&quot;:</source>
          <target state="translated">このプロセスは &lt;code&gt;tut15:pong()&lt;/code&gt; を実行します。 &lt;code&gt;Pong_PID&lt;/code&gt; は、「pong」プロセスのプロセスIDです。関数 &lt;code&gt;start&lt;/code&gt; は、別のプロセス「ping」を作成します。</target>
        </trans-unit>
        <trans-unit id="54ffc50690eb1a1de62954626b5c9e0167a4eba5" translate="yes" xml:space="preserve">
          <source>This process executes:</source>
          <target state="translated">この処理が実行されます。</target>
        </trans-unit>
        <trans-unit id="327419876abc14c730314a0010b944c17b63d4fa" translate="yes" xml:space="preserve">
          <source>This program aids release handling on Windows systems. The program is to be called by the &lt;code&gt;erlsrv&lt;/code&gt; program, read up the release data file &lt;code&gt;start_erl.data&lt;/code&gt;, and start Erlang. Some options to &lt;code&gt;start_erl&lt;/code&gt; are added and removed by the release handler during upgrade with emulator restart (more specifically option &lt;code&gt;-data&lt;/code&gt;).</source>
          <target state="translated">このプログラムは、Windowsシステムでのリリース処理を支援します。プログラムは &lt;code&gt;erlsrv&lt;/code&gt; プログラムによって呼び出され、リリースデータファイル &lt;code&gt;start_erl.data&lt;/code&gt; を読み取り、Erlangを起動します。 &lt;code&gt;start_erl&lt;/code&gt; の一部のオプションは、エミュレーターの再起動によるアップグレード中にリリースハンドラーによって追加および削除されます（具体的にはオプション &lt;code&gt;-data&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="670a2482a63126e58239dc332359f8bc1dff0e73" translate="yes" xml:space="preserve">
          <source>This program is called when the machine is started. It can be modified or rewritten to suit a special system. By default, it must be called &lt;code&gt;start&lt;/code&gt; and reside in &lt;code&gt;&amp;lt;ERL_INSTALL_DIR&amp;gt;/bin&lt;/code&gt;. Another start program can be used, by using configuration parameter &lt;code&gt;start_prg&lt;/code&gt; in application SASL.</source>
          <target state="translated">このプログラムは、マシンの起動時に呼び出されます。特別なシステムに合わせて変更または書き直すことができます。デフォルトでは、 &lt;code&gt;start&lt;/code&gt; と呼ばれ、 &lt;code&gt;&amp;lt;ERL_INSTALL_DIR&amp;gt;/bin&lt;/code&gt; に存在する必要があります。アプリケーションSASLで構成パラメーター &lt;code&gt;start_prg&lt;/code&gt; を使用することにより、別の開始プログラムを使用できます。</target>
        </trans-unit>
        <trans-unit id="4747c1263fbc28b515ca78f638cbd9259a9eb523" translate="yes" xml:space="preserve">
          <source>This program is distributed both in compiled form (under &amp;lt;Erlang root&amp;gt;\\erts-&amp;lt;version&amp;gt;\\bin) and in source form (under &amp;lt;Erlang root&amp;gt;\\erts-&amp;lt;version&amp;gt;\\src). The purpose of the source code is to ease customization of the program for local needs, such as cyclic restart detection. There is also a &quot;make&quot;-file, written for the &lt;code&gt;nmake&lt;/code&gt; program distributed with Microsoft Visual C++. This program can, however, be compiled with any Win32 C compiler (possibly with minor modifications).</source>
          <target state="translated">このプログラムは、コンパイルされた形式（&amp;lt;Erlang root&amp;gt; \\ erts- &amp;lt;version&amp;gt; \\ binの下）とソース形式（&amp;lt;Erlang root&amp;gt; \\ erts- &amp;lt;version&amp;gt; \\ srcの下）の両方で配布されます。ソースコードの目的は、サイクリックリスタート検出などのローカルニーズに合わせてプログラムを簡単にカスタマイズできるようにすることです。Microsoft Visual C ++とともに配布される &lt;code&gt;nmake&lt;/code&gt; プログラム用に作成された「make」ファイルもあります。ただし、このプログラムは、Win32 Cコンパイラを使用してコンパイルできます（わずかな変更が加えられている可能性があります）。</target>
        </trans-unit>
        <trans-unit id="5fbfadc49450aec422c508001aa868916550a963" translate="yes" xml:space="preserve">
          <source>This program is to set static parameters and environment variables such as &lt;code&gt;-sname Name&lt;/code&gt; and &lt;code&gt;HEART_COMMAND&lt;/code&gt; to reboot the machine.</source>
          <target state="translated">このプログラムは、 &lt;code&gt;-sname Name&lt;/code&gt; や &lt;code&gt;HEART_COMMAND&lt;/code&gt; などの静的パラメーターと環境変数を設定して、マシンを再起動します。</target>
        </trans-unit>
        <trans-unit id="c3f3c1fffec91449fdead388f394beeb915ca247" translate="yes" xml:space="preserve">
          <source>This program is used to attach to a running Erlang runtime system, started with &lt;code&gt;run_erl&lt;/code&gt;.</source>
          <target state="translated">このプログラムは、 &lt;code&gt;run_erl&lt;/code&gt; で開始される実行中のErlangランタイムシステムに接続するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1f003599afc35a270db5f4b7d7b284e4c9e32aee" translate="yes" xml:space="preserve">
          <source>This program is used to start the emulator, but you will not be connected to the shell. &lt;code&gt;to_erl&lt;/code&gt; is used to connect to the Erlang shell.</source>
          <target state="translated">このプログラムはエミュレータを起動するために使用されますが、シェルには接続されません。 &lt;code&gt;to_erl&lt;/code&gt; は、Erlangシェルへの接続に使用されます。</target>
        </trans-unit>
        <trans-unit id="6687161d9309502a24c4f52312cb9d9b40349c81" translate="yes" xml:space="preserve">
          <source>This program starts the Erlang emulator with parameters &lt;code&gt;-boot&lt;/code&gt; and &lt;code&gt;-config&lt;/code&gt; set. It reads data about where these files are located from a file named &lt;code&gt;start_erl.data&lt;/code&gt;, which is located in &lt;code&gt;&amp;lt;RELDIR&amp;gt;&lt;/code&gt;. Each new release introduces a new data file. This file is automatically generated by the release handler in Erlang.</source>
          <target state="translated">このプログラムは、パラメーター &lt;code&gt;-boot&lt;/code&gt; および &lt;code&gt;-config&lt;/code&gt; を設定してErlangエミュレーターを開始します。 &lt;code&gt;&amp;lt;RELDIR&amp;gt;&lt;/code&gt; にある &lt;code&gt;start_erl.data&lt;/code&gt; という名前のファイルから、これらのファイルの場所に関するデータを読み取ります。新しいリリースごとに新しいデータファイルが導入されます。このファイルはErlangのリリースハンドラーによって自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="8f257f89dea065885b66a0cd478fca5389333698" translate="yes" xml:space="preserve">
          <source>This property is only valid if &lt;code&gt;auto_ack&lt;/code&gt; is true.</source>
          <target state="translated">このプロパティは、 &lt;code&gt;auto_ack&lt;/code&gt; がtrueの場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="5810ec17d7cb173c4fccedc7a14810f5d07c123d" translate="yes" xml:space="preserve">
          <source>This puts less load on the filesystem, but much more on the Erlang runtime system.</source>
          <target state="translated">これはファイルシステムへの負荷を軽減しますが、Erlangのランタイムシステムへの負荷は大きくなります。</target>
        </trans-unit>
        <trans-unit id="fe519e24650180a3fcf221d96e6f790286d56794" translate="yes" xml:space="preserve">
          <source>This query also removes duplicates but the answers are sorted. If there are many answers, temporary files are used. Notice that to get the first unique answer, all answers must be found and sorted. Both alternatives find duplicates by comparing answers, that is, if &lt;code&gt;A1&lt;/code&gt; and &lt;code&gt;A2&lt;/code&gt; are answers found in that order, then &lt;code&gt;A2&lt;/code&gt; is a removed if &lt;code&gt;A1 == A2&lt;/code&gt;.</source>
          <target state="translated">このクエリも重複を削除しますが、回答はソートされます。回答が多い場合は、一時ファイルを使用します。最初の一意の回答を取得するには、すべての回答を見つけてソートする必要があることに注意してください。どちらの選択肢も、回答を比較することで重複を検出します。つまり、 &lt;code&gt;A1&lt;/code&gt; と &lt;code&gt;A2&lt;/code&gt; がこの順序で見つかった回答である場合、 &lt;code&gt;A1 == A2&lt;/code&gt; あれば &lt;code&gt;A2&lt;/code&gt; が削除されます。</target>
        </trans-unit>
        <trans-unit id="c2f6bad75f3fbef13092a6a4222f43094d545fae" translate="yes" xml:space="preserve">
          <source>This query hits the feature of partially bound keys in table type &lt;code&gt;ordered_set&lt;/code&gt;, so that not the whole table needs to be searched, only the part containing keys beginning with &lt;code&gt;0&lt;/code&gt; is looked into.</source>
          <target state="translated">このクエリは、テーブルタイプ &lt;code&gt;ordered_set&lt;/code&gt; の部分的にバインドされたキーの機能にヒットするため、テーブル全体を検索する必要はなく、 &lt;code&gt;0&lt;/code&gt; で始まるキーを含む部分のみが検索されます。</target>
        </trans-unit>
        <trans-unit id="9e6a7904ebcd7549f287cc377bc5ea8dfe7feaba" translate="yes" xml:space="preserve">
          <source>This random number generator is not cryptographically strong. If a strong cryptographic random number generator is needed, use one of functions in the &lt;code&gt;crypto&lt;/code&gt; module, for example, &lt;code&gt;crypto:strong_rand_bytes/1&lt;/code&gt;.</source>
          <target state="translated">この乱数ジェネレーターは暗号的に強力ではありません。強力な暗号乱数発生器が必要とされる場合、の関数の使用1 &lt;code&gt;crypto&lt;/code&gt; 例えばモジュール、 &lt;code&gt;crypto:strong_rand_bytes/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c4aeff4461a7bf1567cdb7c34105213973f7dd8" translate="yes" xml:space="preserve">
          <source>This reads the &lt;code&gt;logger&lt;/code&gt; configuration parameter from the &lt;code&gt;my_all&lt;/code&gt; application and starts the configured handlers. The contents of the configuration use the same rules as the &lt;code&gt;&lt;a href=&quot;logger_chapter#handler-configuration&quot;&gt;logger handler configuration&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;logger&lt;/code&gt; 構成パラメーターが &lt;code&gt;my_all&lt;/code&gt; アプリケーションから読み取られ、構成されたハンドラーが開始されます。構成の内容は、 &lt;code&gt;&lt;a href=&quot;logger_chapter#handler-configuration&quot;&gt;logger handler configuration&lt;/a&gt;&lt;/code&gt; と同じルールを使用します。</target>
        </trans-unit>
        <trans-unit id="dd05537434a4630f9db4b01dfd929c70a6829e0d" translate="yes" xml:space="preserve">
          <source>This reads the entire contents of &lt;code&gt;&quot;mtab&quot;&lt;/code&gt; into the specified registry. After the restore, all the objects in the registry are marked as unmodified, so a later backup only affects objects that you have modified since the restore.</source>
          <target state="translated">これにより、 &lt;code&gt;&quot;mtab&quot;&lt;/code&gt; 内容全体が指定されたレジストリに読み込まれます。復元後、レジストリ内のすべてのオブジェクトは変更されていないものとしてマークされるため、以降のバックアップは、復元後に変更されたオブジェクトにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="13a79d754831b14cd54b94d9e66117a733bf984b" translate="yes" xml:space="preserve">
          <source>This reference manual describes types generated from the types in the &lt;code&gt;gen_statem&lt;/code&gt; source code, so they are correct. However, the generated descriptions also reflect the type hiearchy, which makes them kind of hard to read.</source>
          <target state="translated">このリファレンスマニュアルでは、 &lt;code&gt;gen_statem&lt;/code&gt; ソースコードのタイプから生成されたタイプについて説明しているため、正しいタイプです。ただし、生成された説明はタイプhiearchyも反映しているため、読みにくくなっています。</target>
        </trans-unit>
        <trans-unit id="1c8060b97047d75217dfaa592520c89dd24db028" translate="yes" xml:space="preserve">
          <source>This renders a result similar to the following:</source>
          <target state="translated">これにより、以下のような結果が得られます。</target>
        </trans-unit>
        <trans-unit id="9f783544c6147fb46866ca14f57f1cf28fd64491" translate="yes" xml:space="preserve">
          <source>This request asks for a complete list of all options supported by the I/O server as well as their current values.</source>
          <target state="translated">このリクエストは、I/Oサーバがサポートするすべてのオプションとその現在の値の完全なリストを要求します。</target>
        </trans-unit>
        <trans-unit id="c9ef467065f7f3147aa63fa765e54a5cacd5c45f" translate="yes" xml:space="preserve">
          <source>This request is not really used, it is to be regarded as a debug feature.</source>
          <target state="translated">このリクエストは実際には使われていないので、デバッグ機能とみなすことになります。</target>
        </trans-unit>
        <trans-unit id="5ed5461b3e3a2705d00654ef7851baa95f3c5a7b" translate="yes" xml:space="preserve">
          <source>This request is used through the Erlang function &lt;code&gt;net_adm:names/1,2&lt;/code&gt;. A TCP connection is opened to the EPMD and this request is sent.</source>
          <target state="translated">このリクエストはErlangの関数 &lt;code&gt;net_adm:names/1,2&lt;/code&gt; を通じて使用されます。EPMDへのTCP接続が開かれ、この要求が送信されます。</target>
        </trans-unit>
        <trans-unit id="fa4697a836ae0380ae5f8e0e273aa79c5259e1e7" translate="yes" xml:space="preserve">
          <source>This request kills the running EPMD. It is almost never used.</source>
          <target state="translated">このリクエストは実行中のEPMDを終了させます。ほとんど使用されることはありません。</target>
        </trans-unit>
        <trans-unit id="c37139085c2a33777870615ebb189dd29f4711b3" translate="yes" xml:space="preserve">
          <source>This results in the following record:</source>
          <target state="translated">その結果、以下のような記録が得られます。</target>
        </trans-unit>
        <trans-unit id="c6a3367c426977d974ddf7ae39a973d34adfaba6" translate="yes" xml:space="preserve">
          <source>This results in the following records:</source>
          <target state="translated">その結果、以下のようなレコードが生成されます。</target>
        </trans-unit>
        <trans-unit id="4754bd22d399a2af6e9567cb4368afe4e9a97e68" translate="yes" xml:space="preserve">
          <source>This return value is valid even if option &lt;code&gt;kill_ports&lt;/code&gt; was used, as killing ports can be a process that does not complete immediately. However, the condition is in that case transient. Monitors are always useful to detect when the driver is really unloaded.</source>
          <target state="translated">&lt;code&gt;kill_ports&lt;/code&gt; オプションが使用されていても、この戻り値は有効です。ポートの強制終了は、すぐには完了しないプロセスになる可能性があるためです。ただし、その場合の状態は一時的なものです。モニターは常に、ドライバーが実際にアンロードされたときに検出するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="61bce59fa6b3bc349ada24ae6e1accf7342572aa" translate="yes" xml:space="preserve">
          <source>This returns the driver structure. The macro &lt;code&gt;DRIVER_INIT&lt;/code&gt; defines the only exported function. All the other functions are static, and will not be exported from the library.</source>
          <target state="translated">これはドライバー構造を返します。マクロ &lt;code&gt;DRIVER_INIT&lt;/code&gt; は、エクスポートされる唯一の関数を定義します。他のすべての関数は静的であり、ライブラリからエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="236d4116cd1bd104778ca12a47df3dca542bc4b6" translate="yes" xml:space="preserve">
          <source>This saves the trouble of first fetching a keyed value, appending a new value to the list of stored values, and storing the result.</source>
          <target state="translated">これにより、最初にキー付きの値を取得し、保存されている値のリストに新しい値を追加し、結果を保存するという手間が省けます。</target>
        </trans-unit>
        <trans-unit id="31f5366cf36758d97de45b416b180fe5021204ef" translate="yes" xml:space="preserve">
          <source>This scenario can occur if the driver code needs replacement during operation of the Erlang emulator. Implementing driver code replacement is a little more tedious than Beam code replacement, as one driver cannot be loaded as both &quot;old&quot; and &quot;new&quot; code. All &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; of a driver must have it closed (no open ports) before the old code can be unloaded and the new code can be loaded.</source>
          <target state="translated">このシナリオは、Erlangエミュレータの動作中にドライバコードを置き換える必要がある場合に発生する可能性があります。1つのドライバーを「古い」コードと「新しい」コードの両方としてロードすることができないため、ドライバーコード置換の実装は、Beamコード置換よりも少し面倒です。ドライバーのすべての &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; は、古いコードをアンロードして新しいコードをロードする前に、ドライバーを閉じる（ポートを開かない）必要があります。</target>
        </trans-unit>
        <trans-unit id="503f88b8d41295f847befbf0174f96b5e1d17d21" translate="yes" xml:space="preserve">
          <source>This section also describes the locking functions, including table locks and sticky locks, as well as alternative functions that bypass the transaction system in favor of improved speed and reduced overhead. These functions are called &quot;dirty operations&quot;. The use of nested transactions is also described. The following topics are included:</source>
          <target state="translated">このセクションでは、テーブルロックやスティッキーロックなどのロック機能や、トランザクションシステムをバイパスして速度を向上させ、オーバーヘッドを削減する代替機能についても説明します。これらの関数は「ダーティオペレーション」と呼ばれます。入れ子になったトランザクションの使用についても説明します。以下のトピックが含まれています。</target>
        </trans-unit>
        <trans-unit id="ca13c61387c20120a915aa2aba2a70b09cc77ff8" translate="yes" xml:space="preserve">
          <source>This section contains information about all loaded modules.</source>
          <target state="translated">このセクションには、ロードされたすべてのモジュールに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="f0afb7bdb78aa30270d4c5341a78528374ecd48c" translate="yes" xml:space="preserve">
          <source>This section contains information about all the ETS tables in the system. The following fields are of interest for each table:</source>
          <target state="translated">このセクションには、システム内のすべてのETSテーブルに関する情報が含まれています。各テーブルについて、以下のフィールドが注目されています。</target>
        </trans-unit>
        <trans-unit id="c705a253aaab772432302fcb590c6d71895de050" translate="yes" xml:space="preserve">
          <source>This section contains information about all the timers started with the BIFs &lt;code&gt;erlang:start_timer/3&lt;/code&gt; and &lt;code&gt;erlang:send_after/3&lt;/code&gt;. The following fields exist for each timer:</source>
          <target state="translated">このセクションには、BIFの &lt;code&gt;erlang:start_timer/3&lt;/code&gt; および &lt;code&gt;erlang:send_after/3&lt;/code&gt; で開始されるすべてのタイマーに関する情報が含まれています。タイマーごとに次のフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="e593d062792a79977388f9b736ca5fdb84956c5e" translate="yes" xml:space="preserve">
          <source>This section contains simple introductory examples only. For a full description of the QLC query language, see the &lt;code&gt;qlc&lt;/code&gt; manual page in &lt;code&gt;STDLIB&lt;/code&gt;.</source>
          <target state="translated">このセクションには、簡単な導入例のみが含まれています。 &lt;code&gt;qlc&lt;/code&gt; クエリ言語の詳細については、STDLIBのqlcマニュアルページを参照して &lt;code&gt;STDLIB&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="388bc7f1102a9ae9f2581325e4b4730cdd3f0142" translate="yes" xml:space="preserve">
          <source>This section demonstrates how simple it is to write a basic (yet for many module testing purposes, often sufficiently complex) test suite and execute its test cases. This is not necessarily obvious when you read the remaining sections in this User's Guide.</source>
          <target state="translated">このセクションでは、基本的な(しかし、多くのモジュールテストの目的のために、多くの場合、十分に複雑な)テストスイートを書き、そのテストケースを実行することがいかに簡単であるかを示しています。これは、このユーザーズガイドの残りのセクションを読んでも、必ずしも明らかではありません。</target>
        </trans-unit>
        <trans-unit id="e57241c5a98cbdf10642d048108a7272df13ecae" translate="yes" xml:space="preserve">
          <source>This section describes a simple driver for accessing a postgres database using the libpq C client library. Postgres is used because it is free and open source. For information on postgres, see &lt;code&gt;&lt;a href=&quot;http://www.postgres.org&quot;&gt;www.postgres.org&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、libpq Cクライアントライブラリを使用してpostgresデータベースにアクセスするための簡単なドライバーについて説明します。Postgresはフリーでオープンソースであるため使用されます。postgresの詳細については、 &lt;code&gt;&lt;a href=&quot;http://www.postgres.org&quot;&gt;www.postgres.org&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8941b0891a6ff874af251fbb759dca478d13c6f3" translate="yes" xml:space="preserve">
          <source>This section describes examples of how to use the Public Key API. Keys and certificates used in the following sections are generated only for testing the Public Key application.</source>
          <target state="translated">このセクションでは、公開鍵 API の使用方法の例を説明します。以下のセクションで使用される鍵および証明書は、公開鍵アプリケーションをテストするためにのみ生成されます。</target>
        </trans-unit>
        <trans-unit id="ba0088de53a90de56e1f80e0ac3933382d74faf7" translate="yes" xml:space="preserve">
          <source>This section describes how an embedded system is started. Four programs are involved and they normally reside in the directory &lt;code&gt;&amp;lt;ERL_INSTALL_DIR&amp;gt;/bin&lt;/code&gt;. The only exception is the &lt;code&gt;start&lt;/code&gt; program, which can be located anywhere, and is also the only program that must be modified by the user.</source>
          <target state="translated">このセクションでは、組み込みシステムの起動方法について説明します。4つのプログラムが関係しており、それらは通常、ディレクトリ &lt;code&gt;&amp;lt;ERL_INSTALL_DIR&amp;gt;/bin&lt;/code&gt; にあります。唯一の例外は、どこにでも配置できる &lt;code&gt;start&lt;/code&gt; プログラムであり、ユーザーが変更する必要がある唯一のプログラムでもあります。</target>
        </trans-unit>
        <trans-unit id="5dffe6465a9a88971444b067aa33f3c613e2da6a" translate="yes" xml:space="preserve">
          <source>This section describes how the Erlang distribution can use TLS to get extra verification and security.</source>
          <target state="translated">このセクションでは、ErlangディストリビューションがどのようにTLSを使って検証とセキュリティを強化するかを説明します。</target>
        </trans-unit>
        <trans-unit id="7ba1b8e520e730aff5ce60b5891f8456502ebe16" translate="yes" xml:space="preserve">
          <source>This section describes how the Erlang runtime system is configured for IP communication. It also explains how you can configure it for your needs by a configuration file. The information is primarily intended for users with special configuration needs or problems. There is normally no need for specific settings for Erlang to function properly on a correctly IP-configured platform.</source>
          <target state="translated">このセクションでは、ErlangランタイムシステムがIP通信のためにどのように設定されているかを説明します。また、必要に応じて設定ファイルを使って設定する方法についても説明します。この情報は主に特別な設定の必要性や問題を抱えたユーザのためのものです。通常、正しくIP設定されたプラットフォーム上でErlangが正しく機能するために特別な設定をする必要はありません。</target>
        </trans-unit>
        <trans-unit id="b9ba9d8ce48a5e18d389572e80e439e457082f15" translate="yes" xml:space="preserve">
          <source>This section describes how to build the Erlang emulator and the OTP libraries on Windows. Note that the Windows binary releases are still a preferred alternative if one does not have Microsoft&amp;rsquo;s development tools and/or don&amp;rsquo;t want to install Cygwin, MSYS or MSYS2.</source>
          <target state="translated">このセクションでは、WindowsでErlangエミュレーターとOTPライブラリーをビルドする方法について説明します。Microsoftの開発ツールがない場合や、Cygwin、MSYS、またはMSYS2をインストールしたくない場合は、Windowsバイナリリリースが依然として好ましい代替手段であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="23b49078ad714b83061016b41c527ea88a0ef01c" translate="yes" xml:space="preserve">
          <source>This section describes how to build your own driver for Erlang.</source>
          <target state="translated">このセクションではErlang用のドライバを自分で作る方法を説明します。</target>
        </trans-unit>
        <trans-unit id="9ea8a2e527669401063f6aeee8dc65aebcbab675" translate="yes" xml:space="preserve">
          <source>This section describes how to implement an alternative carrier protocol for the Erlang distribution. The distribution is normally carried by TCP/IP. Here is explained a method for replacing TCP/IP with another protocol.</source>
          <target state="translated">このセクションではErlangディストリビューションの代替キャリアプロトコルを実装する方法を説明します。通常、ディストリビューションはTCP/IPで運ばれます。ここではTCP/IPを別のプロトコルに置き換える方法を説明します。</target>
        </trans-unit>
        <trans-unit id="ef9194590c5bbba89fd68a31ae7705b884e62724" translate="yes" xml:space="preserve">
          <source>This section describes how to implement an alternative discovery mechanism for Erlang distribution. Discovery is normally done using DNS and the Erlang Port Mapper Daemon (EPMD) for port discovery.</source>
          <target state="translated">このセクションでは、Erlangディストリビューションのための別のディスカバリメカニズムを実装する方法を説明します。通常、発見はDNSとErlang Port Mapper Daemon (EPMD)を使ってポート発見を行います。</target>
        </trans-unit>
        <trans-unit id="62a63b1a98e975cb1778e4a9f8ed67fec8fb504f" translate="yes" xml:space="preserve">
          <source>This section describes how to write a Net if process.</source>
          <target state="translated">ここでは、Net if プロセスの書き方を説明します。</target>
        </trans-unit>
        <trans-unit id="a5a2806882d6d1e2d41fb571e953fc2694d49bf3" translate="yes" xml:space="preserve">
          <source>This section describes how to write a process that complies to the OTP design principles, without using a standard behaviour. Such a process is to:</source>
          <target state="translated">ここでは、標準的なビヘイビアを使わずに、OTP設計の原則に準拠したプロセスをどのように書くかを説明します。そのようなプロセスは次のようなものです。</target>
        </trans-unit>
        <trans-unit id="db110007d4cae55a5cd2784be2448b1464cdeff4" translate="yes" xml:space="preserve">
          <source>This section describes the &lt;code&gt;Mnesia&lt;/code&gt; transaction system and the transaction properties that make &lt;code&gt;Mnesia&lt;/code&gt; a fault-tolerant, distributed Database Management System (DBMS).</source>
          <target state="translated">このセクションでは、 &lt;code&gt;Mnesia&lt;/code&gt; トランザクションシステムと、 &lt;code&gt;Mnesia&lt;/code&gt; をフォールトトレラントな分散データベース管理システム（DBMS）にするトランザクションプロパティについて説明します。</target>
        </trans-unit>
        <trans-unit id="145559b08f0e7daceea91964fac1205f05f73a6b" translate="yes" xml:space="preserve">
          <source>This section describes the &lt;code&gt;erl_crash.dump&lt;/code&gt; file generated upon abnormal exit of the Erlang runtime system.</source>
          <target state="translated">このセクションでは、Erlangランタイムシステムの異常終了時に生成される &lt;code&gt;erl_crash.dump&lt;/code&gt; ファイルについて説明します。</target>
        </trans-unit>
        <trans-unit id="615a4d70bf1eb0943d565d942619e06723c44a20" translate="yes" xml:space="preserve">
          <source>This section describes the ASN.1 types including their functionality, purpose, and how values are assigned in Erlang.</source>
          <target state="translated">このセクションでは、ASN.1の型の機能、目的、Erlangでの値の割り当て方などについて説明します。</target>
        </trans-unit>
        <trans-unit id="4973acdcae6787712641efb91993666da08e3527" translate="yes" xml:space="preserve">
          <source>This section describes the basic steps when designing a &lt;code&gt;Mnesia&lt;/code&gt; database and the programming constructs that make different solutions available to the programmer. The following topics are included:</source>
          <target state="translated">このセクションでは、 &lt;code&gt;Mnesia&lt;/code&gt; データベースを設計する際の基本的な手順と、プログラマーがさまざまなソリューションを利用できるようにするプログラミング構造について説明します。次のトピックが含まれています。</target>
        </trans-unit>
        <trans-unit id="faf94ee7a5d096d374f74f2312ed2c9e2ebd27de" translate="yes" xml:space="preserve">
          <source>This section describes the distribution handshake protocol introduced in Erlang/OTP R6. This description was previously located in &lt;code&gt;$ERL_TOP/lib/kernel/internal_doc/distribution_handshake.txt&lt;/code&gt; and has more or less been copied and &quot;formatted&quot; here. It has been almost unchanged since 1999, but the handshake has not changed much since then either.</source>
          <target state="translated">このセクションでは、Erlang / OTP R6で導入された配布ハンドシェイクプロトコルについて説明します。この説明は、以前は &lt;code&gt;$ERL_TOP/lib/kernel/internal_doc/distribution_handshake.txt&lt;/code&gt; あり、多かれ少なかれここにコピーおよび「フォーマット」されています。それは1999年以来ほとんど変わっていませんが、ハンドシェイクはそれ以来あまり変わっていません。</target>
        </trans-unit>
        <trans-unit id="d76e009e16bdd01f805b9e968741d4585ed774f4" translate="yes" xml:space="preserve">
          <source>This section describes the functions available for schema management, all which return either of the following tuples:</source>
          <target state="translated">このセクションでは、スキーマ管理で利用可能な関数について説明します。</target>
        </trans-unit>
        <trans-unit id="6589e4219f2138e744e1d40f56f69ff33d9cd04f" translate="yes" xml:space="preserve">
          <source>This section describes the incoming messages which a Net if process must be able to receive.</source>
          <target state="translated">ここでは、Net if プロセスが受信可能でなければならない受信メッセージについて説明します。</target>
        </trans-unit>
        <trans-unit id="ba803131ede9177f9bd28303113e3a91a6271ee1" translate="yes" xml:space="preserve">
          <source>This section describes the internal files that are created and maintained by the &lt;code&gt;Mnesia&lt;/code&gt; system. In particular, the workings of the &lt;code&gt;Mnesia&lt;/code&gt; log are described.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;Mnesia&lt;/code&gt; システムによって作成および保守される内部ファイルについて説明します。特に、 &lt;code&gt;Mnesia&lt;/code&gt; ログの仕組みについて説明します。</target>
        </trans-unit>
        <trans-unit id="16c349c9cdb2076b95c930dc72ed84bdd0fd6a91" translate="yes" xml:space="preserve">
          <source>This section describes the operating system-specific parts of OTP that relate to Solaris.</source>
          <target state="translated">ここでは、Solaris に関連する OTP のオペレーティングシステム固有の部分について説明します。</target>
        </trans-unit>
        <trans-unit id="35c4d999a1922f58afda1ed0555720ff15b4c949" translate="yes" xml:space="preserve">
          <source>This section describes the operating system-specific parts of OTP that relate to Windows NT.</source>
          <target state="translated">このセクションでは、Windows NT に関連する OTP のオペレーティングシステム固有の部分について説明します。</target>
        </trans-unit>
        <trans-unit id="40285644d87303c5462b5e3de0dc15016aecc45b" translate="yes" xml:space="preserve">
          <source>This section describes the output format of the analyse command. See &lt;code&gt;&lt;a href=&quot;#analyse&quot;&gt;analyse/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、analyzeコマンドの出力形式について説明します。 &lt;code&gt;&lt;a href=&quot;#analyse&quot;&gt;analyse/0&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="56322ae43abba91cc149a5278e951f77e9967920" translate="yes" xml:space="preserve">
          <source>This section describes the rules for constructing binaries using the bit syntax. Unlike when constructing lists or tuples, the construction of a binary can fail with a &lt;code&gt;badarg&lt;/code&gt; exception.</source>
          <target state="translated">このセクションでは、ビット構文を使用してバイナリを構築するための規則について説明します。リストやタプルを構築する場合とは異なり、バイナリの構築は &lt;code&gt;badarg&lt;/code&gt; 例外で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9c65c0615f3b377f5b341fdeacc78b3636ed30f2" translate="yes" xml:space="preserve">
          <source>This section describes the rules for matching binaries, using the bit syntax.</source>
          <target state="translated">このセクションでは、ビット構文を使用したバイナリのマッチングルールについて説明します。</target>
        </trans-unit>
        <trans-unit id="3efdb6c16651b89d1df8757e4dbe192b22b7b9d8" translate="yes" xml:space="preserve">
          <source>This section describes the slightly different match specifications translated by &lt;code&gt;dbg:fun2ms/1&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; によって翻訳されたわずかに異なる一致仕様について説明します。</target>
        </trans-unit>
        <trans-unit id="2b3b7f437eda66334d0b64118f5de15fc1fc7fab" translate="yes" xml:space="preserve">
          <source>This section describes the standard representation of parse trees for Erlang programs as Erlang terms. This representation is known as the &lt;strong&gt;abstract format&lt;/strong&gt;. Functions dealing with such parse trees are &lt;code&gt;compile:forms/1,2&lt;/code&gt; and functions in the following modules:</source>
          <target state="translated">このセクションでは、Erlangプログラムの解析ツリーの標準表現をErlang用語として説明します。この表現は、&lt;strong&gt;抽象フォーマット&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。このような解析ツリーを扱う関数は &lt;code&gt;compile:forms/1,2&lt;/code&gt; であり、次のモジュールの関数です。</target>
        </trans-unit>
        <trans-unit id="2174d2f040729649ef711f3e5635d25b5e2b5fd1" translate="yes" xml:space="preserve">
          <source>This section describes the use of the registry, a simple mechanism for storing key-value pairs in a C-node, as well as backing them up or restoring them from an &lt;code&gt;Mnesia&lt;/code&gt; table on an Erlang node. For more detailed information about the individual API functions, see the &lt;code&gt;&lt;a href=&quot;registry&quot;&gt;registry&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">このセクションでは、Cノードにキーと値のペアを格納する簡単なメカニズムであるレジストリの使用方法と、Erlangノードの &lt;code&gt;Mnesia&lt;/code&gt; テーブルからそれらをバックアップまたは復元する方法について説明します。個々のAPI関数の詳細については、 &lt;code&gt;&lt;a href=&quot;registry&quot;&gt;registry&lt;/a&gt;&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="6e54bfa17aaa2c2d40ded61fef98685a45ccab20" translate="yes" xml:space="preserve">
          <source>This section describes what to change in the example to use one &lt;code&gt;handle_event/4&lt;/code&gt; function. The previously used approach to first branch depending on event does not work that well here because of the state enter calls, so this example first branches depending on state:</source>
          <target state="translated">このセクションでは、1つの &lt;code&gt;handle_event/4&lt;/code&gt; 関数を使用するために、例で何を変更するかについて説明します。イベントに応じて最初に分岐するために以前に使用されたアプローチは、状態のenter呼び出しのため、ここではうまく機能しません。したがって、この例は、状態に応じて最初に分岐します。</target>
        </trans-unit>
        <trans-unit id="62fe5fd22b036a47305b864aea85d4d04ebc8617" translate="yes" xml:space="preserve">
          <source>This section illustrates procedural abstraction. Initially, the following two examples are written as conventional functions.</source>
          <target state="translated">手続き的な抽象化について説明します。最初は、以下の2つの例を従来の関数として記述します。</target>
        </trans-unit>
        <trans-unit id="cceb1f5cb17e39dece66daf2562fc578ef8e2eb3" translate="yes" xml:space="preserve">
          <source>This section includes examples of &lt;code&gt;.appup&lt;/code&gt; files for typical cases of upgrades/downgrades done in runtime.</source>
          <target state="translated">このセクションには、実行時に行われるアップグレード/ダウングレードの一般的なケースの &lt;code&gt;.appup&lt;/code&gt; ファイルの例が含まれています。</target>
        </trans-unit>
        <trans-unit id="e8307ab1487485b0ab0c191a87d10ed0db502873" translate="yes" xml:space="preserve">
          <source>This section includes the example after most of the mentioned modifications and some more using state enter calls, which deserves a new state diagram:</source>
          <target state="translated">このセクションでは、言及された変更のほとんどの後の例と、新しい状態図に値する状態を入力する呼び出しを使用していくつかのより多くが含まれています。</target>
        </trans-unit>
        <trans-unit id="46836c7cf8344b6ce7b90b07cbf3092bf8c64800" translate="yes" xml:space="preserve">
          <source>This section informs on interoperability, that is, information exchange, between Erlang and other programming languages. The included examples mainly treat interoperability between Erlang and C.</source>
          <target state="translated">このセクションではErlangと他のプログラミング言語の相互運用性、つまり情報交換について説明します。ここでは主にErlangとC言語の相互運用性について説明します。</target>
        </trans-unit>
        <trans-unit id="89f49f8072fe70dfd2c365690f214b5fdc461dd8" translate="yes" xml:space="preserve">
          <source>This section introduces &lt;code&gt;Mnesia&lt;/code&gt; with an example database. This example is referenced in the following sections, where the example is modified to illustrate various program constructs. This section illustrates the following mandatory procedures through examples:</source>
          <target state="translated">このセクションでは、サンプルデータベースを使用して &lt;code&gt;Mnesia&lt;/code&gt; を紹介します。この例は、さまざまなプログラム構成を示すために例が変更される次のセクションで参照されます。このセクションでは、次の必須手順を例を使用して説明します。</target>
        </trans-unit>
        <trans-unit id="4b9ffc517c7f7beea672bf3a45f0d5c54e6718e6" translate="yes" xml:space="preserve">
          <source>This section is a quick start tutorial to get you started with Erlang. Everything in this section is true, but only part of the truth. For example, only the simplest form of the syntax is shown, not all esoteric forms. Also, parts that are greatly simplified are indicated with *manual*. This means that a lot more information on the subject is to be found in the Erlang book or in &lt;code&gt;Erlang Reference Manual&lt;/code&gt;.</source>
          <target state="translated">このセクションは、Erlangを使い始めるためのクイックスタートチュートリアルです。このセクションのすべては真実ですが、真実の一部にすぎません。たとえば、すべての難解な形式ではなく、構文の最も単純な形式のみが示されています。また、大幅に簡略化された部品は*マニュアル*で示されています。これは、Erlangブックまたは &lt;code&gt;Erlang Reference Manual&lt;/code&gt; に、このテーマに関する多くの情報が記載されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="7681f5719ebc6c3947920d0c8b79f4d20d935db2" translate="yes" xml:space="preserve">
          <source>This section is about installing an embedded system. The following topics are considered:</source>
          <target state="translated">ここでは、組み込みシステムの導入について説明します。以下のトピックについて検討します。</target>
        </trans-unit>
        <trans-unit id="e1226c380377fda419e20eb5188c02f21ab8efb4" translate="yes" xml:space="preserve">
          <source>This section is about list functions that &lt;strong&gt;construct&lt;/strong&gt; lists. A tail-recursive function that does not construct a list runs in constant space, while the corresponding body-recursive function uses stack space proportional to the length of the list.</source>
          <target state="translated">このセクションでは、リストを&lt;strong&gt;構成する&lt;/strong&gt;リスト関数について説明します。リストを構成しない末尾再帰関数は定数スペースで実行されますが、対応する本文再帰関数はリストの長さに比例したスタックスペースを使用します。</target>
        </trans-unit>
        <trans-unit id="68c719f00318cfafeb4885e7d19be04a0e723344" translate="yes" xml:space="preserve">
          <source>This section is the Erlang reference manual. It describes the Erlang programming language.</source>
          <target state="translated">このセクションはErlangリファレンスマニュアルです。これはErlangプログラミング言語について説明しています。</target>
        </trans-unit>
        <trans-unit id="6ef1c8ac7b879ac21c4bbd932c5c5aba836b3ebe" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;app(4)&lt;/code&gt; and &lt;code&gt;application(3)&lt;/code&gt; manual pages in Kernel.</source>
          <target state="translated">このセクションは、カーネルの &lt;code&gt;app(4)&lt;/code&gt; および &lt;code&gt;application(3)&lt;/code&gt; のマニュアルページで読む必要があります。</target>
        </trans-unit>
        <trans-unit id="d050299e9360b73cf317b1cb6719eba05c8f8b67" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;gen_event(3)&lt;/code&gt; manual page in STDLIB, where all interface functions and callback functions are described in detail.</source>
          <target state="translated">このセクションは、 &lt;code&gt;gen_event(3)&lt;/code&gt; マニュアルページで読む必要があります。ここでは、すべてのインターフェイス関数とコールバック関数について詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="b25498b71adedf6dc2be1b461a7355670bd9865a" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;gen_server(3)&lt;/code&gt; manual page in &lt;code&gt;stdlib&lt;/code&gt;, where all interface functions and callback functions are described in detail.</source>
          <target state="translated">このセクションは、 &lt;code&gt;stdlib&lt;/code&gt; の &lt;code&gt;gen_server(3)&lt;/code&gt; マニュアルページで読む必要があります。ここでは、すべてのインターフェイス関数とコールバック関数について詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="e425baa0c9a68eb141d0fd0ffe5193c115033f3e" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;gen_statem(3)&lt;/code&gt; manual page in STDLIB, where all interface functions and callback functions are described in detail.</source>
          <target state="translated">このセクションは、 &lt;code&gt;gen_statem(3)&lt;/code&gt; マニュアルページで読む必要があります。ここでは、すべてのインターフェイス関数とコールバック関数について詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="834b2272d947ac4550fa4f7cf0a1b4b54d61e0d3" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;rel(4)&lt;/code&gt;, &lt;code&gt;systools(3)&lt;/code&gt;, and &lt;code&gt;script(4)&lt;/code&gt; manual pages in SASL.</source>
          <target state="translated">このセクションは、 &lt;code&gt;systools(3)&lt;/code&gt; &lt;code&gt;rel(4)&lt;/code&gt; 、systools（3）、および &lt;code&gt;script(4)&lt;/code&gt; のマニュアルページで読む必要があります。</target>
        </trans-unit>
        <trans-unit id="d930e6096fb887dbfeb97cc96dedbb64de3c9031" translate="yes" xml:space="preserve">
          <source>This section lists a few modules and BIFs to watch out for, not only from a performance point of view.</source>
          <target state="translated">ここでは、パフォーマンスの観点だけでなく、気をつけるべきモジュールやBIFをいくつか挙げてみました。</target>
        </trans-unit>
        <trans-unit id="302cba4ce6be32265c131b8fff3be15369bb97a8" translate="yes" xml:space="preserve">
          <source>This section lists all funs. The following fields exist for each fun:</source>
          <target state="translated">このセクションでは、全てのファンをリストアップします。各ファンには以下のフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="7bc1c1a16c9fc6835aa747c430d5753502607fd3" translate="yes" xml:space="preserve">
          <source>This section lists the open ports, their owners, any linked processes, and the name of their driver or external process.</source>
          <target state="translated">このセクションでは、開いているポート、その所有者、リンクされているプロセス、ドライバまたは外部プロセスの名前が一覧表示されます。</target>
        </trans-unit>
        <trans-unit id="251c858a6feb418633832df9c31b24c8b4f5a1b7" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; by using Native Implemented Functions (NIFs).</source>
          <target state="translated">このセクションでは、ネイティブ実装関数（NIF）を使用して、 &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; 問題を解決する方法の例の概要を説明します。</target>
        </trans-unit>
        <trans-unit id="e7bc2bafdedf8fd30afa495c12130ded7ddd3fc5" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; by using a C node. Notice that a C node is not typically used for solving simple problems like this, a port is sufficient.</source>
          <target state="translated">このセクションでは、Cノードを使用して、 &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; を解決する方法の例を概説します。Cノードは通常、このような単純な問題の解決には使用されず、ポートで十分であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d8b1fe16968a43f36d99fc7c39a89fadb4f26e24" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; by using a linked-in port driver.</source>
          <target state="translated">このセクションでは、リンクされたポートドライバーを使用して、 &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; 例の問題を解決する方法の例の概要を説明します。</target>
        </trans-unit>
        <trans-unit id="6188e756764065c7ce79203e7dc5cecf3ee5f2b4" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; by using a port and Erl_Interface. It is necessary to read the port example in &lt;code&gt;&lt;a href=&quot;c_port&quot;&gt;Ports&lt;/a&gt;&lt;/code&gt; before reading this section.</source>
          <target state="translated">このセクションでは、ポートとErl_Interfaceを使用して &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; のサンプル問題を解決する方法の例を概説します。ポートの例を読み出す必要がある &lt;code&gt;&lt;a href=&quot;c_port&quot;&gt;Ports&lt;/a&gt;&lt;/code&gt; このセクションを読む前に。</target>
        </trans-unit>
        <trans-unit id="37a17f96d0247a59a445c39970b3c2ce5aa258a2" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in the &lt;code&gt;&lt;a href=&quot;example&quot;&gt;previous section&lt;/a&gt;&lt;/code&gt; by using a port.</source>
          <target state="translated">このセクションでは、ポートを使用して &lt;code&gt;&lt;a href=&quot;example&quot;&gt;previous section&lt;/a&gt;&lt;/code&gt; 問題の例を解決する方法の例を概説します。</target>
        </trans-unit>
        <trans-unit id="909ed75e66d95b03604cc684f38a417f30c36fa4" translate="yes" xml:space="preserve">
          <source>This section outlines the current Unicode support and gives some recipes for working with Unicode data.</source>
          <target state="translated">この節では、現在の Unicode サポートの概要と、Unicode データを扱うためのいくつかのレシピを紹介します。</target>
        </trans-unit>
        <trans-unit id="f4548220d710b00d84d1083e484e819816bc4647" translate="yes" xml:space="preserve">
          <source>This section presents all the atoms in the system. This is only of interest if one suspects that dynamic generation of atoms can be a problem, otherwise this section can be ignored.</source>
          <target state="translated">このセクションでは、システム内のすべての原子を示します。これは、原子の動的生成が問題になると思われる場合にのみ、このセクションは無視して構いません。</target>
        </trans-unit>
        <trans-unit id="e98a32dcb47ef919db3aef2c03013357cf7c9199" translate="yes" xml:space="preserve">
          <source>This section presents the generic protocol-independent model for use within an OTP-based NE. This model is used by all OAM components and can be used by the applications. The advantage of the model is that it clearly separates the resources from the management protocol. The resources do not need to be aware of which management protocol is used to manage the system. The same resources can therefore be managed with different protocols.</source>
          <target state="translated">ここでは、OTP ベースの NE 内で使用するための一般的なプロトコルに依存しないモデルを示す。このモデルは、すべてのOAMコンポーネントで使用され、アプリケーションで使用することができる。このモデルの利点は、リソースと管理プロトコルが明確に分離されていることである。リソースは、システムを管理するためにどの管理プロトコルが使用されているかを意識する必要はありません。そのため、同じリソースを異なるプロトコルで管理することができます。</target>
        </trans-unit>
        <trans-unit id="16347e215e685cc8a7eb7375f07fbbb91f2c9603" translate="yes" xml:space="preserve">
          <source>This section provides a brief overview on how to write efficient drivers.</source>
          <target state="translated">ここでは、効率的なドライバーの書き方について簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="30913964bf9365a1caa81bfa4bb9ad170421d97f" translate="yes" xml:space="preserve">
          <source>This section provides a simplified demonstration of a &lt;code&gt;Mnesia&lt;/code&gt; system startup. The dialogue from the Erlang shell is as follows:</source>
          <target state="translated">このセクションでは、 &lt;code&gt;Mnesia&lt;/code&gt; システムの起動の簡単なデモを提供します。Erlangシェルからのダイアログは以下の通りです：</target>
        </trans-unit>
        <trans-unit id="ec0f201c25b61d89e7f6c76b13618afc0002a916" translate="yes" xml:space="preserve">
          <source>This section should be read with the &lt;code&gt;supervisor(3)&lt;/code&gt; manual page in STDLIB, where all details about the supervisor behaviour is given.</source>
          <target state="translated">このセクションは、STDLIB の &lt;code&gt;supervisor(3)&lt;/code&gt; マニュアルページと一緒に読む必要があります。スーパーバイザの動作に関するすべての詳細が説明されています。</target>
        </trans-unit>
        <trans-unit id="859dc9ee797ee513900af80c0e4f3984de1a34df" translate="yes" xml:space="preserve">
          <source>This section shows a small example of how to set up client/server connections using the Erlang shell. The returned value of the &lt;code&gt;sslsocket&lt;/code&gt; is abbreviated with &lt;code&gt;[...]&lt;/code&gt; as it can be fairly large and is opaque.</source>
          <target state="translated">このセクションでは、Erlangシェルを使用してクライアント/サーバー接続を設定する方法の小さな例を示します。 &lt;code&gt;sslsocket&lt;/code&gt; の戻り値は &lt;code&gt;[...]&lt;/code&gt; と省略されています。これは、かなり大きくなる可能性があり、不透明であるためです。</target>
        </trans-unit>
        <trans-unit id="1b3f3a6882bc6f1c999e3d6f053e34aa184902fb" translate="yes" xml:space="preserve">
          <source>This section starts with a simple example, showing a generator and a filter:</source>
          <target state="translated">ここでは、まず簡単な例として、発電機とフィルタを示します。</target>
        </trans-unit>
        <trans-unit id="b10755987ebac7d338a7fd1a7c6bbec42a0583a6" translate="yes" xml:space="preserve">
          <source>This section tries to kill the old truths (or semi-truths) that have become myths.</source>
          <target state="translated">この項では、神話と化した古い真実(あるいは半真実)を殺そうとします。</target>
        </trans-unit>
        <trans-unit id="4bc790cb1406d976325d74bbdbe32730d66b0176" translate="yes" xml:space="preserve">
          <source>This section was written a long time ago. Most of it is still valid, as it explains important concepts, but this was written for an older driver interface so the examples do not work anymore. The reader is encouraged to read the &lt;code&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; documentation also.</source>
          <target state="translated">このセクションはずっと前に書かれました。重要な概念を説明しているので、ほとんどは有効ですが、これは古いドライバーインターフェイス用に作成されたため、例は機能しなくなりました。読者は &lt;code&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; のドキュメントも読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b93f78b17719c3a40516be4872cc22d2aa5ee759" translate="yes" xml:space="preserve">
          <source>This section was written a long time ago. Most of it is still valid, but some things have changed since then. Some updates have been made to the documentation of the driver presented here, but more can be done and is planned for the future. The reader is encouraged to read the &lt;code&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; documentation also.</source>
          <target state="translated">このセクションはずっと前に書かれました。そのほとんどはまだ有効ですが、それ以降、いくつかの点が変更されています。ここに示すドライバーのドキュメントにいくつかの更新が行われましたが、さらに多くのことが可能であり、将来的に計画されています。読者は &lt;code&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; のドキュメントも読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3acfdfded91bac52b2d4f66deb3db7bcfef3bb64" translate="yes" xml:space="preserve">
          <source>This sends a request with a specified connection header:</source>
          <target state="translated">指定された接続ヘッダを持つリクエストを送信します。</target>
        </trans-unit>
        <trans-unit id="a989f27ccbc0cd1a9d3190ceeec551d99b4ccfce" translate="yes" xml:space="preserve">
          <source>This sends an HTTP request over a unix domain socket (experimental):</source>
          <target state="translated">これは、Unix ドメインソケットを介して HTTP リクエストを送信します (実験的)。</target>
        </trans-unit>
        <trans-unit id="0367f390c138c4cdab5de93d4dcd533741c91409" translate="yes" xml:space="preserve">
          <source>This server can be started with the Kernel configuration parameter &lt;code&gt;start_boot_server&lt;/code&gt;.</source>
          <target state="translated">このサーバーは、カーネル構成パラメーター &lt;code&gt;start_boot_server&lt;/code&gt; を使用して開始できます。</target>
        </trans-unit>
        <trans-unit id="9a01d31508a13cbee6fd61e7f30640416fa3e960" translate="yes" xml:space="preserve">
          <source>This server is used to assist diskless Erlang nodes that fetch all Erlang code from another machine.</source>
          <target state="translated">このサーバは、他のマシンからすべてのErlangコードをフェッチするディスクレスErlangノードを支援するために使われます。</target>
        </trans-unit>
        <trans-unit id="6d1e9f0f9d29165296c1877ce900cce295357757" translate="yes" xml:space="preserve">
          <source>This server is used to fetch all code, including the start script, if an Erlang runtime system is started with command-line flag &lt;code&gt;-loader inet&lt;/code&gt;. All hosts specified with command-line flag &lt;code&gt;-hosts Host&lt;/code&gt; must have one instance of this server running.</source>
          <target state="translated">このサーバーは、Erlangランタイムシステムがコマンドラインフラグ &lt;code&gt;-loader inet&lt;/code&gt; で起動されている場合、起動スクリプトを含むすべてのコードをフェッチするために使用されます。コマンドラインフラグ &lt;code&gt;-hosts Host&lt;/code&gt; 指定されたすべてのホストでは、このサーバーのインスタンスが1つ実行されている必要があります。</target>
        </trans-unit>
        <trans-unit id="b854dfbf08852692209c2c9428fe6541ba04a2b8" translate="yes" xml:space="preserve">
          <source>This session sets the system_tracer to the same process as the ordinary tracer process (i. e. &amp;lt;0.31.0&amp;gt;) and sets the trace pattern for the function &lt;code&gt;dbg:get_tracer&lt;/code&gt; to one that has the action of setting a sequential token. When the function is called by a traced process (all processes are traced in this case), the process gets &quot;contaminated&quot; by the token and &lt;code&gt;seq_trace&lt;/code&gt; messages are sent both for the server request and the response. The &lt;code&gt;seq_trace:set_token([])&lt;/code&gt; after the call clears the &lt;code&gt;seq_trace&lt;/code&gt; token, why no messages are sent when the answer propagates via the shell to the console port. The output would otherwise have been more noisy.</source>
          <target state="translated">このセッションでは、system_tracerを通常のトレーサープロセスと同じプロセス（つまり、&amp;lt;0.31.0&amp;gt;）に設定し、関数 &lt;code&gt;dbg:get_tracer&lt;/code&gt; のトレースパターンを、シーケンシャルトークンを設定するアクションを持つパターンに設定します。トレースされたプロセス（この場合はすべてのプロセスがトレースされます）によって関数が呼び出されると、プロセスはトークンによって「汚染」され、サーバー要求と応答の両方に対して &lt;code&gt;seq_trace&lt;/code&gt; メッセージが送信されます。呼び出しが &lt;code&gt;seq_trace&lt;/code&gt; トークンをクリアした後の &lt;code&gt;seq_trace:set_token([])&lt;/code&gt; は、応答がシェルを介してコンソールポートに伝播するときにメッセージが送信されない理由です。そうでなければ、出力はもっとうるさかったでしょう。</target>
        </trans-unit>
        <trans-unit id="7f6dee944ecab0b445c18e6ceefaac7d931ceec9" translate="yes" xml:space="preserve">
          <source>This should do the final touch to the environment and building should be easy after this. You could run &lt;code&gt;./otp_build env_win32&lt;/code&gt; without &lt;code&gt;eval&lt;/code&gt; just to see what it does, and to see that the environment it sets seems OK. The path is cleaned of spaces if possible (using DOS style short names instead), the variables &lt;code&gt;OVERRIDE_TARGET&lt;/code&gt;, &lt;code&gt;CC&lt;/code&gt;, &lt;code&gt;CXX&lt;/code&gt;, &lt;code&gt;AR&lt;/code&gt; and &lt;code&gt;RANLIB&lt;/code&gt; are set to their respective wrappers and the directories &lt;code&gt;$ERL_TOP/erts/etc/win32/&amp;lt;cygwin/msys&amp;gt;_tools/vc&lt;/code&gt; and &lt;code&gt;$ERL_TOP/erts/etc/win32/&amp;lt;cygwin/msys&amp;gt;_tool&lt;/code&gt; are added first in the PATH.</source>
          <target state="translated">これで環境への最終的なタッチが行われ、この後の構築は簡単になります。 &lt;code&gt;./otp_build env_win32&lt;/code&gt; を &lt;code&gt;eval&lt;/code&gt; なしで実行して、機能を確認し、設定された環境に問題がないことを確認できます。可能な場合はパスのスペースが &lt;code&gt;RANLIB&lt;/code&gt; され（代わりにDOSスタイルの短い名前が使用されます）、変数 &lt;code&gt;OVERRIDE_TARGET&lt;/code&gt; 、 &lt;code&gt;CC&lt;/code&gt; 、 &lt;code&gt;CXX&lt;/code&gt; 、 &lt;code&gt;AR&lt;/code&gt; 、およびRANLIBがそれぞれのラッパーとディレクトリ &lt;code&gt;$ERL_TOP/erts/etc/win32/&amp;lt;cygwin/msys&amp;gt;_tools/vc&lt;/code&gt; および &lt;code&gt;$ERL_TOP/erts/etc/win32/&amp;lt;cygwin/msys&amp;gt;_tool&lt;/code&gt; が最初にPATHに追加されます。</target>
        </trans-unit>
        <trans-unit id="d785e08dd7a56c60e1bed8756d1974bdb847eb99" translate="yes" xml:space="preserve">
          <source>This shows another important non-obvious case: a clause guard, even if it's as simple as &lt;code&gt;Y &amp;gt; 0&lt;/code&gt;, always consists of a single disjunction of one or more conjunctions of tests, much like a tuple of tuples. Thus:</source>
          <target state="translated">これは、もう1つの重要な自明ではないケースを示しています。節ガードは、 &lt;code&gt;Y &amp;gt; 0&lt;/code&gt; のように単純であっても、常に、タプルのタプルのように、テストの1つ以上の論理積の単一の分離で構成されます。したがって：</target>
        </trans-unit>
        <trans-unit id="1fa8ade625dd050384ebfe47137813125a13ed25" translate="yes" xml:space="preserve">
          <source>This signal will be ignored.</source>
          <target state="translated">この信号は無視されます。</target>
        </trans-unit>
        <trans-unit id="92abfd0b7a6c2f6f6e673410127b459c582c4efd" translate="yes" xml:space="preserve">
          <source>This signal will notify &lt;code&gt;erl_signal_server&lt;/code&gt; when it is received by the Erlang runtime system.</source>
          <target state="translated">このシグナルは、Erlangランタイムシステムによって受信されたときに &lt;code&gt;erl_signal_server&lt;/code&gt; に通知します。</target>
        </trans-unit>
        <trans-unit id="edab6f17da92a0f0da17b2cdabee390180519ab6" translate="yes" xml:space="preserve">
          <source>This signal will use the default signal handler for the operating system.</source>
          <target state="translated">このシグナルは、オペレーティングシステムのデフォルトのシグナルハンドラを使用します。</target>
        </trans-unit>
        <trans-unit id="da98f38cbd3a5312fa20fb0710bd3343db7b6751" translate="yes" xml:space="preserve">
          <source>This simple definition was extended in Unicode to include more complicated kinds of composite character by giving each character a grapheme breaking property, and creating rules that use these properties to define the boundaries of extended grapheme clusters. In PCRE releases later than 8.31, \X matches one of these clusters.</source>
          <target state="translated">この単純な定義は、各文字に書記素破りプロパティを与え、拡張書記素クラスタの境界を定義するためにこれらのプロパティを使用するルールを作成することによって、より複雑な種類の複合文字を含むようにユニコードで拡張されました。8.31以降のPCREリリースでは、\Xはこれらのクラスタの1つにマッチします。</target>
        </trans-unit>
        <trans-unit id="e86121002d76857e44d3ab841a1269a83df96b05" translate="yes" xml:space="preserve">
          <source>This simple standard test, &lt;code&gt;snmp_ex2_simple_standard_test&lt;/code&gt;, a module which, using the &lt;code&gt;snmp_ex2_manager&lt;/code&gt; described in the previous section, implements a simple agent test utility.</source>
          <target state="translated">この単純な標準テスト &lt;code&gt;snmp_ex2_simple_standard_test&lt;/code&gt; は、前のセクションで説明した &lt;code&gt;snmp_ex2_manager&lt;/code&gt; を使用して、単純なエージェントテストユーティリティを実装するモジュールです。</target>
        </trans-unit>
        <trans-unit id="2d0034518115855077790a9986c987efa20b3785" translate="yes" xml:space="preserve">
          <source>This sort of problem can be solved easier by use of the facilities in OTP, which also provide methods for updating code on the fly and so on (see &lt;code&gt;OTP Design Principles&lt;/code&gt;).</source>
          <target state="translated">この種の問題は、OTPの機能を使用して簡単に解決できます。OTPは、コードをオンザフライで更新する方法なども提供します（ &lt;code&gt;OTP Design Principles&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="e3b6d6c6628faa03b7c6f08bc646ad236cf4da32" translate="yes" xml:space="preserve">
          <source>This specialized decode decodes a subtype of a constructed value and is the fastest method to extract a subvalue. This decode is typically used when you want to inspect, for example, a version number, to be able to decide what to do with the entire value. The result is returned as &lt;code&gt;{ok,Value}&lt;/code&gt; or &lt;code&gt;{error,Reason}&lt;/code&gt;.</source>
          <target state="translated">この特殊なデコードは、構成された値のサブタイプをデコードし、サブ値を抽出する最速の方法です。このデコードは通常、バージョン番号などを調べて、値全体をどうするかを決定できるようにする場合に使用されます。結果は &lt;code&gt;{ok,Value}&lt;/code&gt; または &lt;code&gt;{error,Reason}&lt;/code&gt; として返されます。</target>
        </trans-unit>
        <trans-unit id="77e086b8dea4b8bfb5a0597b5900b1d75b0fef9f" translate="yes" xml:space="preserve">
          <source>This starts Erlang in its own window, with fully functioning command-line editing and scrollbars. All flags except &lt;code&gt;-oldshell&lt;/code&gt; work as they do for &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これにより、コマンドライン編集とスクロールバーが完全に機能する独自のウィンドウでErlangが起動します。 &lt;code&gt;-oldshell&lt;/code&gt; を除くすべてのフラグは、 &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt; の場合と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="a43faa1a1676e12b0177f046a812f0d8364ec82d" translate="yes" xml:space="preserve">
          <source>This starts the Erlang runtime system and evaluates the following functions:</source>
          <target state="translated">これはErlangのランタイムシステムを起動し、以下の関数を評価します。</target>
        </trans-unit>
        <trans-unit id="8bb8d3378772860a522d3a705d4cc5d40c409e79" translate="yes" xml:space="preserve">
          <source>This state data can be regarded as sensitive, and maybe not what you want in the error log because of some unpredictable event.</source>
          <target state="translated">この状態のデータは繊細なものとみなされる可能性があり、予測不可能なイベントが発生したためにエラーログに望むものではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="97c14a1eab4a2d73f912f341632799fc7862da43" translate="yes" xml:space="preserve">
          <source>This state transition action can be invoked by returning it from the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;, from &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; or by giving it to &lt;code&gt;&lt;a href=&quot;#enter_loop-5&quot;&gt;enter_loop/5,6&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この状態遷移アクションは、 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; から、 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; から、または &lt;code&gt;&lt;a href=&quot;#enter_loop-5&quot;&gt;enter_loop/5,6&lt;/a&gt;&lt;/code&gt; に返すことで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="57901b1493b88f1a72b634f92f65ad89d7517d70" translate="yes" xml:space="preserve">
          <source>This step also implies that the Erlang code in the interface and distribution modules is written in such a way that it can be run in the startup phase. In particular, there can be no calls to the &lt;code&gt;application&lt;/code&gt; module or to any modules not loaded at boot time. That is, only &lt;code&gt;Kernel&lt;/code&gt;, &lt;code&gt;STDLIB&lt;/code&gt;, and the application itself can be used.</source>
          <target state="translated">この手順は、インターフェイスおよび配布モジュールのErlangコードが、起動フェーズで実行できるように記述されていることも意味します。特に、 &lt;code&gt;application&lt;/code&gt; モジュールまたは起動時にロードされていないモジュールへの呼び出しはありません。つまり、 &lt;code&gt;Kernel&lt;/code&gt; 、 &lt;code&gt;STDLIB&lt;/code&gt; 、およびアプリケーション自体のみを使用できます。</target>
        </trans-unit>
        <trans-unit id="33eaf1a1a2a532c70f7ffcd5caaf8b22d9ff8909" translate="yes" xml:space="preserve">
          <source>This structure is to be used if all clients are running the same type of Erlang machine. If there are clients running different types of Erlang machines, or on different operating systems, the &lt;code&gt;clients&lt;/code&gt; directory can be divided into one subdirectory per type of Erlang machine. Alternatively, one &lt;code&gt;$ROOT&lt;/code&gt; can be set up per type of machine. For each type, some of the directories specified for the &lt;code&gt;$ROOT&lt;/code&gt; directory are to be included:</source>
          <target state="translated">この構造は、すべてのクライアントが同じタイプのErlangマシンを実行している場合に使用されます。異なるタイプのErlangマシンを実行しているクライアント、または異なるオペレーティングシステム上に &lt;code&gt;clients&lt;/code&gt; がある場合、クライアントディレクトリは、Erlangマシンのタイプごとに1つのサブディレクトリに分割できます。あるいは、マシンのタイプごとに1つの &lt;code&gt;$ROOT&lt;/code&gt; をセットアップできます。タイプごとに、 &lt;code&gt;$ROOT&lt;/code&gt; ディレクトリに指定されたディレクトリの一部が含まれます。</target>
        </trans-unit>
        <trans-unit id="ba107d8023d557fe4ebdc08a0485fead425f4a4c" translate="yes" xml:space="preserve">
          <source>This structure is used for all types of ports although some fields are useless for some types. The least memory consuming solution would be to arrange this structure as a union of structures. However, the multiple indirections in the code to access a field in such a structure would clutter the code too much for an example.</source>
          <target state="translated">この構造体はすべてのタイプのポートに使用されますが、いくつかのフィールドはタイプによっては役に立たないものもあります。最もメモリを消費しない解決策は、この構造体を構造体の組合として配置することでしょう。しかし、このような構造体のフィールドにアクセスするためのコード内の複数の間接的な処理は、例としてはコードを乱雑にしすぎてしまいます。</target>
        </trans-unit>
        <trans-unit id="b9c807a7212c0db55e210d6237e55cf572102e59" translate="yes" xml:space="preserve">
          <source>This switches off logging for SSH and Telnet connections.</source>
          <target state="translated">これは、SSH と Telnet 接続のログをオフにします。</target>
        </trans-unit>
        <trans-unit id="3c8936eaae5713c5223ec21e20e0d36d26fc0092" translate="yes" xml:space="preserve">
          <source>This switches off logging for all connection types.</source>
          <target state="translated">これは、すべての接続タイプのログをオフにします。</target>
        </trans-unit>
        <trans-unit id="f56bbb3abc53b0a624950444e1c66ce730f11613" translate="yes" xml:space="preserve">
          <source>This symbol should appear in the lhs of at least one grammar rule. This is the most general syntactic category which the parser ultimately will parse every input string into.</source>
          <target state="translated">この記号は、少なくとも 1 つの文法規則の lhs に含まれていなければなりません。これはパーサが最終的にすべての入力文字列を解析する最も一般的な構文カテゴリです。</target>
        </trans-unit>
        <trans-unit id="a9ad3ed484ba9b2b41f2325fc27244234c66f278" translate="yes" xml:space="preserve">
          <source>This syntax is equivalent to the syntax used in the trace patterns (see the &lt;code&gt;dbg(3)&lt;/code&gt;) module in Runtime_Tools.</source>
          <target state="translated">この構文は、Runtime_Tools のトレースパターン（ &lt;code&gt;dbg(3)&lt;/code&gt; を参照）モジュールで使用される構文と同等です。</target>
        </trans-unit>
        <trans-unit id="ee2b2d8d451101694a58799b8409428a148a8058" translate="yes" xml:space="preserve">
          <source>This takes &lt;code&gt;H&lt;/code&gt; from &lt;code&gt;L&lt;/code&gt; in all possible ways. The result is the set of all lists &lt;code&gt;[H|T]&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the set of all possible permutations of &lt;code&gt;L&lt;/code&gt;, with &lt;code&gt;H&lt;/code&gt; removed:</source>
          <target state="translated">これは、あらゆる方法で &lt;code&gt;H&lt;/code&gt; を &lt;code&gt;L&lt;/code&gt; から取得します。結果は、すべてのリストの集合である &lt;code&gt;[H|T]&lt;/code&gt; 、 &lt;code&gt;T&lt;/code&gt; はすべての可能な順列の集合である &lt;code&gt;L&lt;/code&gt; と、 &lt;code&gt;H&lt;/code&gt; 除去しました：</target>
        </trans-unit>
        <trans-unit id="618f3633ac8c2cadd4289f1c5621d970e601a5ca" translate="yes" xml:space="preserve">
          <source>This term is the encoding for external funs: &lt;code&gt;fun M:F/A&lt;/code&gt;.</source>
          <target state="translated">：この用語は、外部の低速運行のためのエンコーディングです &lt;code&gt;fun M:F/A&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="beb3ae0ca905f496ce783ad12cff60bb9bb87bbd" translate="yes" xml:space="preserve">
          <source>This term is used in minor version 0 of the external format; it has been superseded by &lt;code&gt;&lt;a href=&quot;#NEW_FLOAT_EXT&quot;&gt;NEW_FLOAT_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この用語は、外部フォーマットのマイナーバージョン0で使用されます。 &lt;code&gt;&lt;a href=&quot;#NEW_FLOAT_EXT&quot;&gt;NEW_FLOAT_EXT&lt;/a&gt;&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b517e1702cae7ec8ee019fdb69c857aa5330cfd8" translate="yes" xml:space="preserve">
          <source>This term is used in minor version 1 of the external format.</source>
          <target state="translated">本用語は、外部フォーマットのマイナーバージョン1で使用されています。</target>
        </trans-unit>
        <trans-unit id="0860084b170b958eacacb8679369f69a7b4a4046" translate="yes" xml:space="preserve">
          <source>This term represents a bitstring whose length in bits does not have to be a multiple of 8. The &lt;code&gt;Len&lt;/code&gt; field is an unsigned 4 byte integer (big-endian). The &lt;code&gt;Bits&lt;/code&gt; field is the number of bits (1-8) that are used in the last byte in the data field, counting from the most significant bit to the least significant.</source>
          <target state="translated">この用語は、その長さのビットで8.の倍数である必要はないビット文字列表す &lt;code&gt;Len&lt;/code&gt; フィールドは符号なしの4バイト整数（ビッグエンディアン）です。 &lt;code&gt;Bits&lt;/code&gt; フィールドは、データフィールドの最後のバイトに使用されるビットの数（1-8）、最下位の最上位ビットから数えています。</target>
        </trans-unit>
        <trans-unit id="108bbd5cab7129c54f675f7643a23fb10026ce1d" translate="yes" xml:space="preserve">
          <source>This test specification declares that &lt;code&gt;node1@host1&lt;/code&gt; is to be started using the user callback function &lt;code&gt;callback_module:my_slave_callback/0&lt;/code&gt;, and nodes &lt;code&gt;node1@host2&lt;/code&gt; and &lt;code&gt;node2@host2&lt;/code&gt; are to be started with the default callback module &lt;code&gt;ct_slave&lt;/code&gt;. The specified username and password are used to log on to remote host &lt;code&gt;host2&lt;/code&gt;. Also, function &lt;code&gt;module:function/0&lt;/code&gt; is evaluated on &lt;code&gt;node1@host3&lt;/code&gt;, and the result of this call is printed to the log.</source>
          <target state="translated">このテスト仕様は、 &lt;code&gt;node1@host1&lt;/code&gt; がユーザーコールバック関数 &lt;code&gt;callback_module:my_slave_callback/0&lt;/code&gt; を使用して開始され、ノード &lt;code&gt;node1@host2&lt;/code&gt; および &lt;code&gt;node2@host2&lt;/code&gt; がデフォルトのコールバックモジュール &lt;code&gt;ct_slave&lt;/code&gt; で開始されることを宣言しています。指定されたユーザー名とパスワードは、リモートホスト &lt;code&gt;host2&lt;/code&gt; へのログオンに使用されます。また、 &lt;code&gt;module:function/0&lt;/code&gt; は &lt;code&gt;node1@host3&lt;/code&gt; で評価され、この呼び出しの結果がログに出力されます。</target>
        </trans-unit>
        <trans-unit id="e29f7e984adbbfe8a53af166b10808cfa43c1c97" translate="yes" xml:space="preserve">
          <source>This tests all object files in the specified directory, as if they had been individually specified using &lt;code&gt;{file, FileName}&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;{file, FileName}&lt;/code&gt; を使用して個別に指定されたかのように、指定されたディレクトリ内のすべてのオブジェクトファイルをテストします。</target>
        </trans-unit>
        <trans-unit id="76191fd55833467474b9c8b3bbd30d057e2c02a5" translate="yes" xml:space="preserve">
          <source>This the formatter callback function to be called from handlers. The log event is processed as follows:</source>
          <target state="translated">これは、ハンドラから呼び出されるフォーマッタのコールバック関数です。ログイベントは以下のように処理されます。</target>
        </trans-unit>
        <trans-unit id="a753a4a3983a27e7aa021fa6ea24ccc7d272be01" translate="yes" xml:space="preserve">
          <source>This time argument 2 is used, which is the second element in the tuple. If this returns the atom &lt;code&gt;false&lt;/code&gt;, fred is not logged on and the following message is sent:</source>
          <target state="translated">今回はタプルの2番目の要素である引数2が使用されます。これがアトム &lt;code&gt;false&lt;/code&gt; を返す場合、fredはログオンせず、次のメッセージが送信されます。</target>
        </trans-unit>
        <trans-unit id="e6fffaa6a8f0644a7ea4fa7c7c74c76ec90d774c" translate="yes" xml:space="preserve">
          <source>This time is &lt;strong&gt;not&lt;/strong&gt; a monotonically increasing time in the general case. For more information, see the documentation of &lt;code&gt;&lt;a href=&quot;time_correction#Time_Warp_Modes&quot;&gt;time warp modes&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">この時間は、一般的なケースでは単調に増加する時間ではあり&lt;strong&gt;ません&lt;/strong&gt;。詳細については、ユーザーガイドの &lt;code&gt;&lt;a href=&quot;time_correction#Time_Warp_Modes&quot;&gt;time warp modes&lt;/a&gt;&lt;/code&gt; ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="49beb73df376b7dea84521a1c52301d5531a79e4" translate="yes" xml:space="preserve">
          <source>This time is &lt;strong&gt;not&lt;/strong&gt; a monotonically increasing time.</source>
          <target state="translated">この時間は単調に増加する時間ではあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3748262d456a936f46c1ed22dababf257bb3fa6f" translate="yes" xml:space="preserve">
          <source>This time may or may not be an accurate view of POSIX time, and may or may not align with &lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt;. The runtime system works towards aligning the two system times. Depending on the &lt;code&gt;&lt;a href=&quot;#Time_Warp_Modes&quot;&gt;time warp mode&lt;/a&gt;&lt;/code&gt; used, this can be achieved by letting Erlang system time perform a &lt;code&gt;&lt;a href=&quot;#Time_Warp&quot;&gt;time warp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この時間は、POSIX時間の正確なビューである場合とそうでない場合があり、 &lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; と一致する場合としない場合があります。ランタイムシステムは、2つのシステム時間の調整に向けて機能します。使用される &lt;code&gt;&lt;a href=&quot;#Time_Warp_Modes&quot;&gt;time warp mode&lt;/a&gt;&lt;/code&gt; によっては、Erlangシステム時間に &lt;code&gt;&lt;a href=&quot;#Time_Warp&quot;&gt;time warp&lt;/a&gt;&lt;/code&gt; 実行させることでこれを実現できます。</target>
        </trans-unit>
        <trans-unit id="83d87d01faae0b3a7fef0f76f0e3a3892ae23062" translate="yes" xml:space="preserve">
          <source>This time the first assertion looks at the preceding six characters, checks that the first three are digits, and then the second assertion checks that the preceding three characters are not &quot;999&quot;.</source>
          <target state="translated">今回は、最初のアサーションで先行する6文字を見て、最初の3文字が数字であることを確認し、2番目のアサーションで先行する3文字が &quot;999 &quot;ではないことを確認しています。</target>
        </trans-unit>
        <trans-unit id="14391b08125b325189f3dcbd403d72965af6b345" translate="yes" xml:space="preserve">
          <source>This time, since the shell was not involved, no other work was done in the system during the profiling. If you retry the same example with a freshly started Erlang emulator, but omit the command &lt;code&gt;l(random)&lt;/code&gt;, the analysis will show a lot more function calls done by &lt;code&gt;code_server&lt;/code&gt; and others to automatically load the module &lt;code&gt;random&lt;/code&gt;.</source>
          <target state="translated">今回は、シェルが含まれていないため、プロファイリング中にシステムで他の作業は行われませんでした。新しく起動したErlangエミュレーターで同じ例を再試行し、コマンド &lt;code&gt;l(random)&lt;/code&gt; を省略した場合、分析により、 &lt;code&gt;code_server&lt;/code&gt; などが実行する関数呼び出しがさらに多くなり、モジュール &lt;code&gt;random&lt;/code&gt; が自動的にロードされます。</target>
        </trans-unit>
        <trans-unit id="22a9f149405034822a960ba22d2e8646cd23a4b4" translate="yes" xml:space="preserve">
          <source>This time, the recursing alternative is tried first, and continues to recurse until it runs out of characters, at which point the recursion fails. But this time we have another alternative to try at the higher level. That is the significant difference: in the previous case the remaining alternative is at a deeper recursion level, which PCRE cannot use.</source>
          <target state="translated">今回は、再帰代替案が最初に試され、文字数がなくなるまで再帰を続けます。しかし、今回はより高いレベルで別の代替案を試すことができます。この点が大きな違いです。前のケースでは、残りの代替案はより深い再帰レベルにあり、PCREでは使用できません。</target>
        </trans-unit>
        <trans-unit id="c60619daf599e1009f83ff3339a4a66e29dc068d" translate="yes" xml:space="preserve">
          <source>This timer is started when the &lt;strong&gt;first&lt;/strong&gt; reply to an asynchronous request (issued using the &lt;code&gt;&lt;a href=&quot;megaco#cast&quot;&gt;megaco:cast/3&lt;/a&gt;&lt;/code&gt; function) arrives. As long as this timer is running, replies will be delivered via the &lt;code&gt;&lt;a href=&quot;megaco_user#trans_reply&quot;&gt;handle_trans_reply/4,5&lt;/a&gt;&lt;/code&gt; callback function, with their &quot;arrival number&quot; (see &lt;code&gt;UserReply&lt;/code&gt; of the &lt;code&gt;&lt;a href=&quot;megaco_user#trans_reply&quot;&gt;handle_trans_reply/4,5&lt;/a&gt;&lt;/code&gt; callback function).</source>
          <target state="translated">このタイマーは、（ &lt;code&gt;&lt;a href=&quot;megaco#cast&quot;&gt;megaco:cast/3&lt;/a&gt;&lt;/code&gt; 関数を使用して発行された）非同期要求への&lt;strong&gt;最初の&lt;/strong&gt;応答が到着したときに開始されます。このタイマーが実行されている限り、応答は「到着番号」とともに、 &lt;code&gt;UserReply&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;megaco_user#trans_reply&quot;&gt;handle_trans_reply/4,5&lt;/a&gt;&lt;/code&gt; コールバック関数を介して配信されます（handle_trans_reply &lt;code&gt;&lt;a href=&quot;megaco_user#trans_reply&quot;&gt;handle_trans_reply/4,5&lt;/a&gt;&lt;/code&gt; コールバック関数のUserReplyを参照）。</target>
        </trans-unit>
        <trans-unit id="7f582a8bac4499f4041fc098c02442c6d51efa18" translate="yes" xml:space="preserve">
          <source>This timer is started when the segment indicated by the &lt;code&gt;segmentation complete token&lt;/code&gt; (e.g. the last of the segment which makes up the reply) is received, but all segments has not yet been received.</source>
          <target state="translated">このタイマーは、 &lt;code&gt;segmentation complete token&lt;/code&gt; 示されるセグメント（応答を構成するセグメントの最後など）を受信したときに開始されますが、すべてのセグメントがまだ受信されていません。</target>
        </trans-unit>
        <trans-unit id="e5f2ade158232a7f92c6ed91597d402fd153194a" translate="yes" xml:space="preserve">
          <source>This timer is started when the segment indicated by the &lt;code&gt;segmentation complete token&lt;/code&gt; is received, but all segments has not yet been received.</source>
          <target state="translated">このタイマーは、 &lt;code&gt;segmentation complete token&lt;/code&gt; によって示されるセグメントを受信したときに開始されますが、すべてのセグメントがまだ受信されていません。</target>
        </trans-unit>
        <trans-unit id="706cbfbf9ab1807332ea2d94bd3ad6011d82aa07" translate="yes" xml:space="preserve">
          <source>This transaction can write the text &lt;code&gt;&quot;Trying to write ... &quot;&lt;/code&gt; 1000 times to the terminal. However, &lt;code&gt;Mnesia&lt;/code&gt; guarantees that each transaction will eventually run. As a result, &lt;code&gt;Mnesia&lt;/code&gt; is not only deadlock free, but also livelock free.</source>
          <target state="translated">このトランザクションは、 &lt;code&gt;&quot;Trying to write ... &quot;&lt;/code&gt; というテキストを端末に1000回書き込むことができます。ただし、 &lt;code&gt;Mnesia&lt;/code&gt; は各トランザクションが最終的に実行されることを保証します。その結果、 &lt;code&gt;Mnesia&lt;/code&gt; はデッドロックフリーであるだけでなく、ライブロックフリーでもあります。</target>
        </trans-unit>
        <trans-unit id="c15707ecd3d8e52159c361dec50a35ae8f4adf88" translate="yes" xml:space="preserve">
          <source>This transaction returns the list &lt;code&gt;[{foo,1,3}]&lt;/code&gt; if table &lt;code&gt;foo&lt;/code&gt; is of type &lt;code&gt;set&lt;/code&gt;. However, the list &lt;code&gt;[{foo,1,2}, {foo,1,3}]&lt;/code&gt; is returned if the table is of type &lt;code&gt;bag&lt;/code&gt;.</source>
          <target state="translated">このトランザクションは、テーブル &lt;code&gt;foo&lt;/code&gt; のタイプが &lt;code&gt;set&lt;/code&gt; の場合、リスト &lt;code&gt;[{foo,1,3}]&lt;/code&gt; 返します。ただし、テーブルのタイプが &lt;code&gt;bag&lt;/code&gt; の場合、リスト &lt;code&gt;[{foo,1,2}, {foo,1,3}]&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="bf13712351a4aa96ae94ff06cddb20f5ef75fe11" translate="yes" xml:space="preserve">
          <source>This tries to match &lt;code&gt;&quot;ABC&quot;&lt;/code&gt; or &lt;code&gt;&quot;XYZ&quot;&lt;/code&gt; twice. If &lt;code&gt;&quot;NNN&quot;&lt;/code&gt; appears, the function returns &lt;code&gt;HaltReason = {nnn,[&quot;NNN&quot;]}&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&quot;ABC&quot;&lt;/code&gt; または &lt;code&gt;&quot;XYZ&quot;&lt;/code&gt; 2回一致させようとします。もし &lt;code&gt;&quot;NNN&quot;&lt;/code&gt; が表示され、関数の戻り &lt;code&gt;HaltReason = {nnn,[&quot;NNN&quot;]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53c27958e7fca3ba05175a738c3a146371fd4e49" translate="yes" xml:space="preserve">
          <source>This tuple only exists if &lt;code&gt;Function&lt;/code&gt; can be used with different clocks. &lt;code&gt;ClockId&lt;/code&gt; corresponds to the clock identifier used when calling &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">このタプルは、 &lt;code&gt;Function&lt;/code&gt; を異なるクロックで使用できる場合にのみ存在します。 &lt;code&gt;ClockId&lt;/code&gt; は、 &lt;code&gt;Function&lt;/code&gt; を呼び出すときに使用されるクロック識別子に対応します。</target>
        </trans-unit>
        <trans-unit id="ceff633d5c12b0ab1b989cd600fd3b0c1f9b57c7" translate="yes" xml:space="preserve">
          <source>This type is assigned in Erlang as follows:</source>
          <target state="translated">この型はErlangでは以下のように割り当てられています。</target>
        </trans-unit>
        <trans-unit id="34e89a0a89b0d1a14764e553fc94c9f4fbe45d6d" translate="yes" xml:space="preserve">
          <source>This type is further described in application &lt;code&gt;xmerl&lt;/code&gt;.</source>
          <target state="translated">このタイプは、アプリケーション &lt;code&gt;xmerl&lt;/code&gt; でさらに説明されています。</target>
        </trans-unit>
        <trans-unit id="6be71fbb0606c9b749f47ff7cbc7a8e0ca516ae1" translate="yes" xml:space="preserve">
          <source>This type of time-out is useful for example to act on inactivity. Let us restart the code sequence if no button is pressed for say 30 seconds:</source>
          <target state="translated">このタイプのタイムアウトは、例えば非アクティブ状態に対処するのに便利です。30秒間ボタンが押されなかった場合にコードシーケンスを再開してみましょう。</target>
        </trans-unit>
        <trans-unit id="0dd216aebaebb2374c204746cffeb0b8a3bfa66e" translate="yes" xml:space="preserve">
          <source>This utility function is used to create a formatted (pretty printable) string of the error reason received from either:</source>
          <target state="translated">このユーティリティ関数は、どちらかから受信したエラー理由の文字列を整形した(印刷可能な)文字列を作成するために使用します。</target>
        </trans-unit>
        <trans-unit id="e90f513c2d724696028de83a41a04ca02c00b03d" translate="yes" xml:space="preserve">
          <source>This utility is specific to Windows NT/2000/XP (and later versions of Windows). It allows Erlang emulators to run as services on the Windows system, allowing embedded systems to start without any user needing to log on. The emulator started in this way can be manipulated through the Windows services applet in a manner similar to other services.</source>
          <target state="translated">このユーティリティはWindows NT/2000/XP(およびそれ以降のバージョンのWindows)に特化したものです。これはErlangエミュレータをWindowsシステム上でサービスとして動作させることを可能にし、組み込みシステムをログオンすることなく起動できるようにします。この方法で起動したエミュレータは、Windowsサービスアプレットを使って他のサービスと同じように操作することができます。</target>
        </trans-unit>
        <trans-unit id="b55cb392aed5fc4d4c203d5436538e3f6a69fde3" translate="yes" xml:space="preserve">
          <source>This validation callback will be executed before any heartbeat is sent to the port program. For the validation to succeed it needs to return with the value &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="translated">この検証コールバックは、ハートビートがポートプログラムに送信される前に実行されます。検証が成功するには、値 &lt;code&gt;ok&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="3b8b5c1eef6ea78b8a30fd3fe8ec2afd6d40564e" translate="yes" xml:space="preserve">
          <source>This value can also be set through (OS) environment variable &lt;code&gt;ERL_FULLSWEEP_AFTER&lt;/code&gt;.</source>
          <target state="translated">この値は、（OS）環境変数 &lt;code&gt;ERL_FULLSWEEP_AFTER&lt;/code&gt; でも設定できます。</target>
        </trans-unit>
        <trans-unit id="58b09f82dfd17c02b5cc9bb38621d7a9dc8cc490" translate="yes" xml:space="preserve">
          <source>This value can be set at startup by passing command-line argument &lt;code&gt;+SDio&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="translated">この値は、 &lt;code&gt;erl(1)&lt;/code&gt; でコマンドライン引数 &lt;code&gt;+SDio&lt;/code&gt; を渡すことにより、起動時に設定できます。</target>
        </trans-unit>
        <trans-unit id="f2f1511a226b28ee2f7a6351d90cc98e92a8e944" translate="yes" xml:space="preserve">
          <source>This value might wrap due to limitations in the underlying functionality provided by the operating system that is used.</source>
          <target state="translated">この値は、使用されているオペレーティングシステムが提供する基本的な機能の制限のためにラップする場合があります。</target>
        </trans-unit>
        <trans-unit id="ae87da20fd16a3057a07a29b3ed216aa69d1b30e" translate="yes" xml:space="preserve">
          <source>This value, in milliseconds, specifies how often the handler does a disk_log sync operation to write buffered data to disk. The handler attempts the operation repeatedly, but only performs a new sync if something has actually been logged.</source>
          <target state="translated">この値はミリ秒単位で、バッファリングされたデータをディスクに書き込むために、ハンドラが disk_log 同期操作を行う頻度を指定します。ハンドラは操作を繰り返し試みますが、何かが実際にログに記録された場合にのみ新しい同期を実行します。</target>
        </trans-unit>
        <trans-unit id="562ee5839a71bc34778a37d5ff1caee77199d71c" translate="yes" xml:space="preserve">
          <source>This value, in milliseconds, specifies how often the handler does a file sync operation to write buffered data to disk. The handler attempts the operation repeatedly, but only performs a new sync if something has actually been logged.</source>
          <target state="translated">この値はミリ秒単位で、バッファリングされたデータをディスクに書き込むためにハンドラがファイル同期操作を行う頻度を指定します。ハンドラは操作を繰り返し試みますが、何かが実際にログに記録された場合にのみ、新しい同期を実行します。</target>
        </trans-unit>
        <trans-unit id="8a7dae834a17e1bfd7dcc5067b03add360f4e974" translate="yes" xml:space="preserve">
          <source>This variable sets the maximum size of a crash dump file in bytes. The crash dump will be truncated if this limit is exceeded. If the variable is not set, no size limit is enforced by default. If the variable is set to &lt;code&gt;0&lt;/code&gt;, the runtime system does not even attempt to write a crash dump file.</source>
          <target state="translated">この変数は、クラッシュダンプファイルの最大サイズをバイト単位で設定します。この制限を超えると、クラッシュダンプが切り捨てられます。変数が設定されていない場合、デフォルトではサイズ制限は適用されません。変数が &lt;code&gt;0&lt;/code&gt; に設定されている場合、ランタイムシステムはクラッシュダンプファイルへの書き込みを試みません。</target>
        </trans-unit>
        <trans-unit id="c8c996bd75b6c1e556e40ae90ed97ed437560b07" translate="yes" xml:space="preserve">
          <source>This variant is kept for compatibility.</source>
          <target state="translated">このバリアントは互換性のために保存されています。</target>
        </trans-unit>
        <trans-unit id="f23ebd696e347931712dab86d1982b0ebcb811ea" translate="yes" xml:space="preserve">
          <source>This verb causes the match to end successfully, skipping the remainder of the pattern. However, when it is inside a subpattern that is called as a subroutine, only that subpattern is ended successfully. Matching then continues at the outer level. If (*ACCEPT) is triggered in a positive assertion, the assertion succeeds; in a negative assertion, the assertion fails.</source>
          <target state="translated">この動詞は、パターンの残りの部分をスキップして、マッチを正常終了させます。ただし、サブルーチンとして呼び出されるサブパターンの内部にある場合は、そのサブパターンのみが正常に終了します。その後、マッチングは外側のレベルで継続されます。(*ACCEPT)が正のアサーションでトリガされるとアサーションは成功し、負のアサーションでは失敗します。</target>
        </trans-unit>
        <trans-unit id="d08ddef725078632007c7d27f955f2e16c27447f" translate="yes" xml:space="preserve">
          <source>This version encode atoms that can be represented by a latin1 string using latin1 encoding while only atoms that cannot be represented by latin1 are encoded using utf8.</source>
          <target state="translated">このバージョンでは、latin1文字列で表現できる原子はlatin1エンコーディングでエンコードし、latin1で表現できない原子のみutf8でエンコードしています。</target>
        </trans-unit>
        <trans-unit id="d758c1fa288ff4bea6ef5e3e118de5ef6067101b" translate="yes" xml:space="preserve">
          <source>This version of &lt;code&gt;wrap_log_reader&lt;/code&gt; does not detect if &lt;code&gt;disk_log&lt;/code&gt; wraps to a new index file between a call to &lt;code&gt;wrap_log_reader:open()&lt;/code&gt; and the first call to &lt;code&gt;wrap_log_reader:chunk()&lt;/code&gt;. If this occurs, the call to &lt;code&gt;chunk()&lt;/code&gt; reads the last logged items in the log file, as the opened index file was truncated by &lt;code&gt;disk_log&lt;/code&gt;.</source>
          <target state="translated">このバージョンの &lt;code&gt;wrap_log_reader&lt;/code&gt; は、 &lt;code&gt;wrap_log_reader:open()&lt;/code&gt; の呼び出しと最初の &lt;code&gt;wrap_log_reader:chunk()&lt;/code&gt; の呼び出しの間で &lt;code&gt;disk_log&lt;/code&gt; が新しいインデックスファイルにラップするかどうかを検出しません。これが発生した場合、開かれたインデックスファイルが &lt;code&gt;disk_log&lt;/code&gt; によって切り捨てられたため、 &lt;code&gt;chunk()&lt;/code&gt; の呼び出しは、ログファイル内の最後に記録された項目を読み取ります。</target>
        </trans-unit>
        <trans-unit id="7892b8b3e220dc2d6df9f4226b75eda81b8a6c0a" translate="yes" xml:space="preserve">
          <source>This version of the stack is compliant with:</source>
          <target state="translated">このバージョンのスタックは、以下に準拠しています。</target>
        </trans-unit>
        <trans-unit id="240472a34becd16e12bb3376c31742854774737c" translate="yes" xml:space="preserve">
          <source>This version of the stack supports version 1, 2 and 3 as defined by:</source>
          <target state="translated">で定義されているように、このバージョンのスタックはバージョン1、2、3をサポートしています。</target>
        </trans-unit>
        <trans-unit id="12b130ec0f7a537e5f469d318f402ce06f564884" translate="yes" xml:space="preserve">
          <source>This way the decoder will detect which version is used and then use the proper decoder.</source>
          <target state="translated">このようにして、デコーダはどのバージョンが使用されているかを検出し、適切なデコーダを使用します。</target>
        </trans-unit>
        <trans-unit id="1fab39fc6a9980decfad2e7adaa7dbca6690bf5b" translate="yes" xml:space="preserve">
          <source>This weighted scheduler utilization will reach &lt;code&gt;1.0&lt;/code&gt; when schedulers are active the same amount of time as maximum available CPU time. If more schedulers exist than available logical processors, this value may be greater than &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">この重み付けされたスケジューラー使用率は、スケジューラーが使用可能な最大CPU時間と同じ時間アクティブである場合、 &lt;code&gt;1.0&lt;/code&gt; に達します。使用可能な論理プロセッサーよりも多くのスケジューラーが存在する場合、この値は &lt;code&gt;1.0&lt;/code&gt; より大きい可能性があります。</target>
        </trans-unit>
        <trans-unit id="26f1c0ecf9835b048ce7fdf3cb11bce5cf430e0d" translate="yes" xml:space="preserve">
          <source>This will be transform into one call to &lt;code&gt;my_table&lt;/code&gt;:</source>
          <target state="translated">これは、 &lt;code&gt;my_table&lt;/code&gt; への1回の呼び出しに変換されます。</target>
        </trans-unit>
        <trans-unit id="5959df48b0bcfac9f4ae84eabd6aeaab1c573506" translate="yes" xml:space="preserve">
          <source>This will be transform into two calls to &lt;code&gt;my_table&lt;/code&gt;:</source>
          <target state="translated">これは、 &lt;code&gt;my_table&lt;/code&gt; への2つの呼び出しに変換されます。</target>
        </trans-unit>
        <trans-unit id="b0938e7a4bcaf966d8f8e1648d8bf77602bdb131" translate="yes" xml:space="preserve">
          <source>This will create a file named &lt;code&gt;TAGS&lt;/code&gt; in the current directory.</source>
          <target state="translated">これにより、 &lt;code&gt;TAGS&lt;/code&gt; という名前のファイルが現在のディレクトリに作成されます。</target>
        </trans-unit>
        <trans-unit id="a8c674397ac895af2f7b4229947a7481b00df7c1" translate="yes" xml:space="preserve">
          <source>This will extract the string literal &lt;code&gt;&quot;foo.erl&quot;&lt;/code&gt; into the variable &lt;code&gt;Foo&lt;/code&gt;. Note the use of the anonymous variable &lt;code&gt;9090&lt;/code&gt; to ignore the line number. To match and also bind a metavariable that must be an integer literal, we can use the convention of ending the integer with a 9, turning it into a Q-prefixed variable on the Erlang level (see the previous section).</source>
          <target state="translated">これにより、文字列リテラル &lt;code&gt;&quot;foo.erl&quot;&lt;/code&gt; が変数 &lt;code&gt;Foo&lt;/code&gt; に抽出されます。行番号を無視するための匿名変数 &lt;code&gt;9090&lt;/code&gt; の使用に注意してください。整数リテラルである必要があるメタ変数を照合してバインドするには、整数を9で終了する規則を使用して、ErlangレベルでQ接頭辞付き変数に変換できます（前のセクションを参照）。</target>
        </trans-unit>
        <trans-unit id="6844398e7182f73065c78df4a613dbb5c67fbf34" translate="yes" xml:space="preserve">
          <source>This will fail if the &lt;code&gt;copy_save&lt;/code&gt; option is enabled; see &lt;code&gt;lcnt:rt_opt/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;copy_save&lt;/code&gt; オプションが有効な場合、これは失敗します。 &lt;code&gt;lcnt:rt_opt/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="161516cb1d32cdac4670da18a1c368a544091541" translate="yes" xml:space="preserve">
          <source>This will have the following effect:</source>
          <target state="translated">これにより、以下のような効果が得られます。</target>
        </trans-unit>
        <trans-unit id="741ddd866b7f0cb141911125a2b18ae0245fffe3" translate="yes" xml:space="preserve">
          <source>This will produce a beam.smp.debug executable. The file are installed along side with the normal (opt) version &lt;code&gt;beam.smp&lt;/code&gt;.</source>
          <target state="translated">これにより、beam.smp.debug実行可能ファイルが生成されます。ファイルは、通常の（opt）バージョンの &lt;code&gt;beam.smp&lt;/code&gt; と一緒にインストールされます。</target>
        </trans-unit>
        <trans-unit id="4a278059021fec133659ebfed89d918e76c5e908" translate="yes" xml:space="preserve">
          <source>This will start a &lt;code&gt;Collector&lt;/code&gt;, a &lt;code&gt;Viewer&lt;/code&gt; and also start the tracing of &lt;code&gt;et:trace_me/5&lt;/code&gt; function calls. The &lt;code&gt;Raw Trace Data&lt;/code&gt; is collected by the &lt;code&gt;Collector&lt;/code&gt; and a view of it is displayed on the screen by the &lt;code&gt;Viewer&lt;/code&gt;. You can define your own &quot;views&quot; of the data by implementing your own &lt;code&gt;Filter&lt;/code&gt; functions and register them in the &lt;code&gt;Viewer&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;Collector&lt;/code&gt; 、 &lt;code&gt;Viewer&lt;/code&gt; が開始され、 &lt;code&gt;et:trace_me/5&lt;/code&gt; 関数呼び出しのトレースも開始されます。 &lt;code&gt;Raw Trace Data&lt;/code&gt; によって収集された &lt;code&gt;Collector&lt;/code&gt; とそのビューはにより画面上に表示される &lt;code&gt;Viewer&lt;/code&gt; 。独自の &lt;code&gt;Filter&lt;/code&gt; 関数を実装してデータの独自の「ビュー」を定義し、それらを &lt;code&gt;Viewer&lt;/code&gt; 登録できます。</target>
        </trans-unit>
        <trans-unit id="f434217aa97015d51cfaae19becfd875effa6d0a" translate="yes" xml:space="preserve">
          <source>This works even if &lt;code&gt;A&lt;/code&gt; is less than &lt;code&gt;-1.0&lt;/code&gt;, since in that case, &lt;code&gt;math:sqrt/1&lt;/code&gt; is never evaluated.</source>
          <target state="translated">これは、 &lt;code&gt;A&lt;/code&gt; が &lt;code&gt;-1.0&lt;/code&gt; 未満の場合でも機能します。その場合、 &lt;code&gt;math:sqrt/1&lt;/code&gt; は評価されないためです。</target>
        </trans-unit>
        <trans-unit id="3252af803922384f63b13c1da6ba4644d77b472e" translate="yes" xml:space="preserve">
          <source>This works for those codecs that support partial decode of the version, currently &lt;strong&gt;text&lt;/strong&gt;, and ber_bin (&lt;code&gt;megaco_binary_encoder&lt;/code&gt; and &lt;code&gt;megaco_ber_bin_encoder&lt;/code&gt;).</source>
          <target state="translated">これは、バージョンの部分的なデコードをサポートするコーデック（現在は&lt;strong&gt;text&lt;/strong&gt;）とber_bin（ &lt;code&gt;megaco_binary_encoder&lt;/code&gt; と &lt;code&gt;megaco_ber_bin_encoder&lt;/code&gt; ）で機能します。</target>
        </trans-unit>
        <trans-unit id="68fb3cd1bc230ff55ec815a8606d4b126de4061a" translate="yes" xml:space="preserve">
          <source>This would give the same result as the earlier examples, namely:</source>
          <target state="translated">これにより、先ほどの例と同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="f41ff74a32e2f2c5a120967bdd256a9d1fcf2924" translate="yes" xml:space="preserve">
          <source>This yields the following environment for &lt;code&gt;myapp&lt;/code&gt;:</source>
          <target state="translated">これにより、 &lt;code&gt;myapp&lt;/code&gt; に次の環境が生成されます。</target>
        </trans-unit>
        <trans-unit id="8cfb63a03667f91e2dddce0870e2cddb4d2428fc" translate="yes" xml:space="preserve">
          <source>Those that are not part of an identified script are lumped together as &quot;Common&quot;. The following is the current list of scripts:</source>
          <target state="translated">識別されたスクリプトの一部ではないものは「共通」としてまとめられます。現在のスクリプトの一覧は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e0fb7ae92ade7541465dddf7bdde5e485e470cba" translate="yes" xml:space="preserve">
          <source>Those warnings cannot be disabled (except by disabling all warnings).</source>
          <target state="translated">これらの警告を無効にすることはできません(すべての警告を無効にする以外は)。</target>
        </trans-unit>
        <trans-unit id="c351ee3b38329481117c9035b830002ad412235a" translate="yes" xml:space="preserve">
          <source>Thread identifier.</source>
          <target state="translated">スレッドの識別子です。</target>
        </trans-unit>
        <trans-unit id="472d223957fc2ad616dbfe0655959f460d590ae4" translate="yes" xml:space="preserve">
          <source>Thread options structure passed to &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_create&quot;&gt;erl_drv_thread_create&lt;/a&gt;&lt;/code&gt;. The following field exists:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#erl_drv_thread_create&quot;&gt;erl_drv_thread_create&lt;/a&gt;&lt;/code&gt; に渡されるスレッドオプション構造体。次のフィールドが存在します：</target>
        </trans-unit>
        <trans-unit id="2d38b72cd000a892fe63ed8ba79ccaabfe4c2e80" translate="yes" xml:space="preserve">
          <source>Three more escape sequences that match characters with specific properties are available. When in 8-bit non-UTF-8 mode, these sequences are limited to testing characters whose code points are &amp;lt; 256, but they do work in this mode. The following are the extra escape sequences:</source>
          <target state="translated">特定のプロパティを持つ文字に一致するエスケープシーケンスがさらに3つあります。8ビット非UTF-8モードの場合、これらのシーケンスはコードポイントが256未満の文字のテストに限定されますが、このモードでは機能します。以下は、追加のエスケープシーケンスです。</target>
        </trans-unit>
        <trans-unit id="48145c695e12f789bd065e16fe1bba615544dbc8" translate="yes" xml:space="preserve">
          <source>Three network messages to execute the two-phase commit protocol</source>
          <target state="translated">二相コミットプロトコルを実行するための3つのネットワークメッセージ</target>
        </trans-unit>
        <trans-unit id="5b4d080b2f7b28c85cb580a4943bbfa952b77805" translate="yes" xml:space="preserve">
          <source>Three predefined resolve functions exist: &lt;code&gt;random_exit_name/3&lt;/code&gt;, &lt;code&gt;random_notify_name/3&lt;/code&gt;, and &lt;code&gt;notify_all_name/3&lt;/code&gt;. If no &lt;code&gt;Resolve&lt;/code&gt; function is defined, &lt;code&gt;random_exit_name&lt;/code&gt; is used. This means that one of the two registered processes is selected as correct while the other is killed.</source>
          <target state="translated">事前定義された3つの解決関数が存在します： &lt;code&gt;random_exit_name/3&lt;/code&gt; 、 &lt;code&gt;random_notify_name/3&lt;/code&gt; 、 &lt;code&gt;notify_all_name/3&lt;/code&gt; 。 &lt;code&gt;Resolve&lt;/code&gt; 関数が定義されていない場合、 &lt;code&gt;random_exit_name&lt;/code&gt; が使用されます。これは、登録されている2つのプロセスの一方が正しいと選択され、もう一方が強制終了されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="789fe986bc68eef06a581bacefa09c9f316ad600" translate="yes" xml:space="preserve">
          <source>Three types of Dets tables exist:</source>
          <target state="translated">Detsのテーブルは3種類存在します。</target>
        </trans-unit>
        <trans-unit id="de17dda2df1b0a4a41a2a36ed513ae1a8fa82e62" translate="yes" xml:space="preserve">
          <source>Three types of logs are supported: transfer logs, security logs, and error logs. The de-facto standard Common Logfile Format is used for the transfer and security logging. There are numerous statistics programs available to analyze Common Logfile Format. The Common Logfile Format looks as follows:</source>
          <target state="translated">転送ログ、セキュリティログ、エラーログの3種類のログがサポートされています。転送ログとセキュリティログには、デファクトスタンダードの Common Logfile Format が使用されます。Common Logfile Format を分析するための統計プログラムが多数用意されています。Common Logfile Format は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6e9b97eab33817fa09e3b807cdad0cad941b514c" translate="yes" xml:space="preserve">
          <source>Three-per-em space</source>
          <target state="translated">3パーエム・スペース</target>
        </trans-unit>
        <trans-unit id="353307ebea91bdeb49e95a772ca9672b8b9ff1c9" translate="yes" xml:space="preserve">
          <source>Threshold for the maximal filesize in bytes. The transfer is aborted if the limit is exceeded. Default is &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">最大ファイルサイズのしきい値（バイト単位）。制限を超えると、転送は中止されます。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="81e689740a1ea2ba496a99261372d7eb5ff76c39" translate="yes" xml:space="preserve">
          <source>Threshold for the maximal number of active connections. The daemon rejects the setup of new connections if the limit is exceeded. Default is &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">アクティブな接続の最大数のしきい値。制限を超えると、デーモンは新しい接続のセットアップを拒否します。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9c5d2d9adf32dacfb55f57f6ed9d271632c69577" translate="yes" xml:space="preserve">
          <source>Threshold for the maximal number of retries. By default the server/client tries to resend a message up to five times when the time-out expires.</source>
          <target state="translated">最大再試行回数のしきい値。デフォルトでは、サーバ/クライアントはタイムアウトが切れたときに最大5回までメッセージの再送を試みます。</target>
        </trans-unit>
        <trans-unit id="0ef311c86e366780b4c01dfd6e2377efaa407576" translate="yes" xml:space="preserve">
          <source>Through CTHs the results of tests and configuration functions can be manipulated. The main purpose to do this with CTHs is to allow common patterns to be abstracted out from test suites and applied to multiple test suites without duplicating any code. All the callback functions for a CTH follow a common interface described hereafter.</source>
          <target state="translated">CTH を通じて、テストの結果や構成関数を操作することができます。CTHでこれを行う主な目的は、テストスイートから共通のパターンを抽象化し、コードを複製することなく複数のテストスイートに適用できるようにすることです。CTHのすべてのコールバック関数は、後述する共通のインタフェースに従います。</target>
        </trans-unit>
        <trans-unit id="0aa7d917559b259354cb862e1c7d69350b345c76" translate="yes" xml:space="preserve">
          <source>Through a trigger function with a match specification created with &lt;code&gt;&lt;a href=&quot;ttb#seq_trigger_ms-0&quot;&gt;ttb:seq_trigger_ms/0,1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ttb#seq_trigger_ms-0&quot;&gt;ttb:seq_trigger_ms/0,1&lt;/a&gt;&lt;/code&gt; で作成された一致仕様のトリガー関数を介して。</target>
        </trans-unit>
        <trans-unit id="dee8ee6675b19f7cc839a400403e3a6bdfc64698" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;Mnesia&lt;/code&gt; (on one node) can hang if a double fault occurs, that is, when two nodes crash simultaneously and one attempts to start when the other refuses to start, for example, because of a hardware error.</source>
          <target state="translated">したがって、 &lt;code&gt;Mnesia&lt;/code&gt; （1つのノード上）は、二重障害が発生した場合、つまり、2つのノードが同時にクラッシュし、一方がハードウェアエラーなどによりもう一方が起動を拒否したときに起動しようとした場合にハングする可能性があります。</target>
        </trans-unit>
        <trans-unit id="08620ab1394e488e40f6d760c0e43eb52ae9ae1e" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;ch3&lt;/code&gt; must be loaded before &lt;code&gt;m1&lt;/code&gt;, in the upgrade case, and conversely in the downgrade case. &lt;code&gt;m1&lt;/code&gt; is said to be &lt;strong&gt;dependent on&lt;/strong&gt;&lt;code&gt;ch3&lt;/code&gt;. In a release handling instruction, this is expressed by the &lt;code&gt;DepMods&lt;/code&gt; element:</source>
          <target state="translated">したがって、アップグレードの場合、および逆にダウングレードの場合、 &lt;code&gt;ch3&lt;/code&gt; は &lt;code&gt;m1&lt;/code&gt; の前にロードする必要があります。 &lt;code&gt;m1&lt;/code&gt; は &lt;code&gt;ch3&lt;/code&gt; に&lt;strong&gt;依存する&lt;/strong&gt;と言われています。リリース処理命令では、これは &lt;code&gt;DepMods&lt;/code&gt; 要素で表されます。</target>
        </trans-unit>
        <trans-unit id="f4aac5229f9aff631f4112d990ef52e941da8602" translate="yes" xml:space="preserve">
          <source>Thus, Erlang pids contain information about where the process executes. So if you know the pid of a process, the &quot;!&quot; operator can be used to send it a message disregarding if the process is on the same node or on a different node.</source>
          <target state="translated">このように、Erlangのpidにはプロセスがどこで実行されているかという情報が含まれています。ですから、もしプロセスのpidを知っていれば、&quot;!&quot;演算子を使ってプロセスが同じノードにあるか別のノードにあるかを無視してメッセージを送ることができます。</target>
        </trans-unit>
        <trans-unit id="6cc9ac17e54e53ed54d89ecd362584a70502cce6" translate="yes" xml:space="preserve">
          <source>Thus, each table is made up of records, where the first element is a record name and the second element of the table is a key, which identifies the particular record in that table. The combination of the table name and a key is an arity two tuple &lt;code&gt;{Tab, Key}&lt;/code&gt; called the OID. For more information about the relationship beween the record name and the table name, see &lt;code&gt;&lt;a href=&quot;mnesia_chap4#recordnames_tablenames&quot;&gt;Record Names versus Table Names&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">したがって、各テーブルはレコードで構成され、最初の要素はレコード名であり、テーブルの2番目の要素はキーであり、そのテーブル内の特定のレコードを識別します。テーブル名とキーの組み合わせは、OIDと呼ばれるアリティ2のタプル &lt;code&gt;{Tab, Key}&lt;/code&gt; です。レコード名beween関係とテーブル名の詳細については、 &lt;code&gt;&lt;a href=&quot;mnesia_chap4#recordnames_tablenames&quot;&gt;Record Names versus Table Names&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98419cf3e6cb70f3d1ec7c30e6c6cd8e96f4569b" translate="yes" xml:space="preserve">
          <source>Thus, groups of users with identical cookie files get Erlang nodes that can communicate freely and without interference from the magic cookie system. Users who want to run nodes on separate file systems must make certain that their cookie files are identical on the different file systems.</source>
          <target state="translated">このようにして、同じクッキーファイルを持つユーザのグループは、マジッククッキーシステムからの干渉を受けずに自由に通信できるErlangノードを手に入れることができます。別々のファイルシステム上でノードを実行したいユーザは、異なるファイルシステム上でクッキーファイルが同じであることを確認しなければなりません。</target>
        </trans-unit>
        <trans-unit id="8100fa7ba98e8e96e75fe52a1370cae3f3496b11" translate="yes" xml:space="preserve">
          <source>Thus, in Erlang the atoms &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are used to encode a boolean value.</source>
          <target state="translated">したがって、Erlangでは、ブール値をエンコードするためにアトム &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;false&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="6e7ecce73f034bf35ecbb506fb930930ac4b3eff" translate="yes" xml:space="preserve">
          <source>Thus, it can be assumed that if an application wants to use tables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, the application must perform some action similar to following before it can use the tables:</source>
          <target state="translated">したがって、アプリケーションがテーブル &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;b&lt;/code&gt; を使用したい場合、アプリケーションはテーブルを使用する前に、次のようなアクションを実行する必要があると想定できます。</target>
        </trans-unit>
        <trans-unit id="7e5bc2487ff82b85d2e3b10893d75ddc6f14f8fa" translate="yes" xml:space="preserve">
          <source>Thus, knowing the allowed structure it is easy to write a program that traverses the data structure and picks the information in the xmlElements records with name date.</source>
          <target state="translated">このように、許可されている構造を知っていれば、データ構造を横断して、xmlElementsレコードの中から日付の名前を持つ情報を取得するプログラムを簡単に書くことができます。</target>
        </trans-unit>
        <trans-unit id="b2e92eacbda98564b7e1dba01abee128e6082f80" translate="yes" xml:space="preserve">
          <source>Thus, the call &lt;code&gt;ch3:alloc()&lt;/code&gt; returns the allocated channel &lt;code&gt;Ch&lt;/code&gt; and the &lt;code&gt;gen_server&lt;/code&gt; then waits for new requests, now with an updated list of available channels.</source>
          <target state="translated">したがって、呼び出し &lt;code&gt;ch3:alloc()&lt;/code&gt; は割り当てられたチャネル &lt;code&gt;Ch&lt;/code&gt; を返し、 &lt;code&gt;gen_server&lt;/code&gt; は新しい要求を待機します。ここで、利用可能なチャネルの更新されたリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="9ebad642bddf4ab3db22dd4beeeeb7f4311403f9" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-COMMUNITY-MIB, after this function has been called, is from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-COMMUNITY-MIBのデータは、設定ファイルからのデータとなります。</target>
        </trans-unit>
        <trans-unit id="a7c61a5b14ab98813376fed50c0cd8d251b07679" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-FRAMEWORK-MIB, after this function has been called, is from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-FRAMEWORK-MIB内のデータは、設定ファイルからのデータとなります。</target>
        </trans-unit>
        <trans-unit id="612f9db5bba916759b754b605a4e539b1a5e5a7e" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-NOTIFICATION-MIB, after this function has been called, is from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-NOTIFICATION-MIBのデータは、設定ファイルからのデータとなります。</target>
        </trans-unit>
        <trans-unit id="9d1588ecea3ad2284ae9aa05caccc396d78985d5" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-STANDARD-MIB and SNMPv2-MIB, after this function has been called, is from the configuration files.</source>
          <target state="translated">このように、本機能が呼び出された後のSNMP-STANDARD-MIBおよびSNMPv2-MIBのデータは、設定ファイルからのデータとなります。</target>
        </trans-unit>
        <trans-unit id="43f6071a8cb0a08a947926938c79fe87f3b23556" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-TARGET-MIB, after this function has been called, is the data from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-TARGET-MIB内のデータは、設定ファイルのデータとなります。</target>
        </trans-unit>
        <trans-unit id="698103ec7a5a24bef7840c9a9eb88301e5ac5c6b" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-USER-BASED-SM-MIB, after this function has been called, is the data from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-USER-BASED-SM-MIB内のデータは、設定ファイルのデータとなります。</target>
        </trans-unit>
        <trans-unit id="b154aa3e0b0b0cb0972c7b7c21e5fa2a7b63dbbc" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-VIEW-BASED-ACM-MIB, after this function has been called, is the data from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-VIEW-BASED-ACMIB内のデータは、設定ファイルのデータとなります。</target>
        </trans-unit>
        <trans-unit id="ece286b7b7e10c58b8006a0db1d818bda1598793" translate="yes" xml:space="preserve">
          <source>Thus, the defined callbacks are as follows:</source>
          <target state="translated">したがって、定義されたコールバックは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c7283b7df46e07452f871697fbbb43dfaeb34c85" translate="yes" xml:space="preserve">
          <source>Thus, the following pattern matches all possible clauses:</source>
          <target state="translated">したがって、以下のパターンは、可能性のあるすべての節に一致します。</target>
        </trans-unit>
        <trans-unit id="a6da41a12dddbe97c927f5b83e0ea21b128613a3" translate="yes" xml:space="preserve">
          <source>Thus, the main representation of test sets is &lt;strong&gt;deep lists&lt;/strong&gt;, and a simple test object can be viewed as a test set containing only a single test; there is no difference between &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;[T]&lt;/code&gt;.</source>
          <target state="translated">したがって、テストセットの主な表現は&lt;strong&gt;ディープリスト&lt;/strong&gt;であり、単純なテストオブジェクトは単一のテストのみを含むテストセットと見なすことができます。 &lt;code&gt;T&lt;/code&gt; と &lt;code&gt;[T]&lt;/code&gt; の間に違いはありません。</target>
        </trans-unit>
        <trans-unit id="72fc65dc129a4472605c016017814aa86198846c" translate="yes" xml:space="preserve">
          <source>Thus, the module is called &lt;strong&gt;tut&lt;/strong&gt;. Notice the full stop &quot;.&quot; at the end of the line. The files which are used to store the module must have the same name as the module but with the extension &quot;.erl&quot;. In this case the file name is &lt;code&gt;tut.erl&lt;/code&gt;. When using a function in another module, the syntax &lt;code&gt;module_name:function_name(arguments)&lt;/code&gt; is used. So the following means call function &lt;code&gt;double&lt;/code&gt; in module &lt;code&gt;tut&lt;/code&gt; with argument &quot;10&quot;.</source>
          <target state="translated">したがって、モジュールは&lt;strong&gt;tut&lt;/strong&gt;と呼ばれます。フルストップ「。」に注意してください。行の終わりに。モジュールの保存に使用されるファイルは、モジュールと同じ名前である必要がありますが、拡張子は「.erl」です。この場合、ファイル名は &lt;code&gt;tut.erl&lt;/code&gt; です。別のモジュールで関数を使用する場合、構文 &lt;code&gt;module_name:function_name(arguments)&lt;/code&gt; が使用されます。したがって、次は、引数「10」を使用してモジュール &lt;code&gt;tut&lt;/code&gt; で関数 &lt;code&gt;double&lt;/code&gt; を呼び出すことを意味します。</target>
        </trans-unit>
        <trans-unit id="c34ce3a6ce18ac5cd93d950cae3e6a6b1eaefbd7" translate="yes" xml:space="preserve">
          <source>Thus, two instances of the application run simultaneously during the takeover, so that data can be transferred from the old to the new instance. If this is not an acceptable behavior, parts of the old instance can be shut down when the new instance is started. However, the application cannot be stopped entirely, at least the top supervisor must remain alive.</source>
          <target state="translated">このように、データが古いインスタンスから新しいインスタンスに転送されるように、アプリケーションの2つのインスタンスがテイクオーバー中に同時に実行されます。これが許容できる動作でない場合は、新しいインスタンスが開始されたときに古いインスタンスの一部をシャットダウンすることができます。しかし、アプリケーションを完全に停止させることはできず、少なくともトップスーパバイザは生きていなければなりません。</target>
        </trans-unit>
        <trans-unit id="8b6a4f79c67e1c0cfc398c2295408f2eb4b88ca9" translate="yes" xml:space="preserve">
          <source>Tibetan</source>
          <target state="translated">Tibetan</target>
        </trans-unit>
        <trans-unit id="495255dc624907e5a1daae0dcc0d862cd07a65e4" translate="yes" xml:space="preserve">
          <source>Tidies Erlang source files in a directory and its subdirectories.</source>
          <target state="translated">ディレクトリとそのサブディレクトリ内のErlangソースファイルを整理します。</target>
        </trans-unit>
        <trans-unit id="5ab18872f1a912f1810a74934cd2ae2c9eab483f" translate="yes" xml:space="preserve">
          <source>Tidies a syntax tree representation of a module definition. The given &lt;code&gt;Forms&lt;/code&gt; may be either a single syntax tree of type &lt;code&gt;form_list&lt;/code&gt;, or a list of syntax trees representing &quot;program forms&quot;. In either case, &lt;code&gt;Forms&lt;/code&gt; must represent a single complete module definition. The returned syntax tree has type &lt;code&gt;form_list&lt;/code&gt; and represents a tidied-up version of the same source code.</source>
          <target state="translated">モジュール定義の構文ツリー表現を整理します。指定された &lt;code&gt;Forms&lt;/code&gt; は、 &lt;code&gt;form_list&lt;/code&gt; タイプの単一の構文ツリーか、「プログラムフォーム」を表す構文ツリーのリストのいずれかです。どちらの場合も、 &lt;code&gt;Forms&lt;/code&gt; は単一の完全なモジュール定義を表す必要があります。返される構文ツリーは &lt;code&gt;form_list&lt;/code&gt; 型で、同じソースコードの整頓されたバージョンを表します。</target>
        </trans-unit>
        <trans-unit id="f1ca9281bec4536e142232511847b2d622b54efd" translate="yes" xml:space="preserve">
          <source>Tidies an Erlang source code file.</source>
          <target state="translated">Erlangのソースコードファイルを整理します。</target>
        </trans-unit>
        <trans-unit id="82f374f21b06bcdcda1afc18f61cb6cebcc8d024" translate="yes" xml:space="preserve">
          <source>Tidies and pretty-prints Erlang source code, removing unused functions, updating obsolete constructs and function calls, etc.</source>
          <target state="translated">Erlangのソースコードを整理してきれいに印刷し、使われていない関数を削除したり、時代遅れのコンストラクトや関数呼び出しを更新したりします。</target>
        </trans-unit>
        <trans-unit id="cf46deb14abc3ae4a0180bd680085f5421becb62" translate="yes" xml:space="preserve">
          <source>Tifinagh</source>
          <target state="translated">Tifinagh</target>
        </trans-unit>
        <trans-unit id="a82ad5fd600ff000d4dd1a4b75dec09bd53099b8" translate="yes" xml:space="preserve">
          <source>Time in milli-seconds.</source>
          <target state="translated">ミリ秒単位の時間。</target>
        </trans-unit>
        <trans-unit id="fb90c3d94bbbbb48a0690451d16d4a2746e6cf58" translate="yes" xml:space="preserve">
          <source>Time in milliseconds.</source>
          <target state="translated">時間をミリ秒単位で表示しています。</target>
        </trans-unit>
        <trans-unit id="52f73c9f88768be27ae1df301f0781defb2c8b55" translate="yes" xml:space="preserve">
          <source>Time interval (in seconds) between each update of the display.</source>
          <target state="translated">表示の更新間隔(秒)を設定します。</target>
        </trans-unit>
        <trans-unit id="aa2bb96c7dd2c54fd6b747929cbd2b7c505afa22" translate="yes" xml:space="preserve">
          <source>Time is in milliseconds.</source>
          <target state="translated">時間はミリ秒単位です。</target>
        </trans-unit>
        <trans-unit id="9335c98c7b128731a14ad90889a8a634ba7a0e3f" translate="yes" xml:space="preserve">
          <source>Time is local when it is adjusted in accordance with the current time zone and daylight saving. Time is universal when it reflects the time at longitude zero, without any adjustment for daylight saving. Universal Coordinated Time (UTC) time is also called Greenwich Mean Time (GMT).</source>
          <target state="translated">時間は、現在のタイムゾーンとサマータイムに合わせて調整されている場合はローカルです。時間は、サマータイムの調整なしに経度ゼロの時間を反映している場合、普遍的な時間です。協定世界時(UTC)の時間は、グリニッジ標準時(GMT)とも呼ばれています。</target>
        </trans-unit>
        <trans-unit id="778cab80afb8fbb53cb2e3770f0d9802c84b4243" translate="yes" xml:space="preserve">
          <source>Time is shown as percentage of total time and as absolute time.</source>
          <target state="translated">時間は、総時間に対する割合と絶対時間で表示されます。</target>
        </trans-unit>
        <trans-unit id="bfab7fde2f2bd1c95dae042160e5b78de938455d" translate="yes" xml:space="preserve">
          <source>Time is vital to an Erlang program and, more importantly, &lt;strong&gt;correct&lt;/strong&gt; time is vital to an Erlang program. As Erlang is a language with soft real-time properties and we can express time in our programs, the Virtual Machine and the language must be careful about what is considered a correct time and in how time functions behave.</source>
          <target state="translated">Erlangプログラムには時間が重要であり、さらに重要なことに、Erlangプログラムには&lt;strong&gt;正しい&lt;/strong&gt;時間が重要です。Erlangはソフトリアルタイムプロパティを持つ言語であり、プログラムで時間を表現できるため、仮想マシンと言語は、正しい時間と見なされるものと時間関数の動作に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="dfb8ee1d3368aa29179a6d65ecd926cdeee8b67e" translate="yes" xml:space="preserve">
          <source>Time of failure.</source>
          <target state="translated">失敗した時のこと。</target>
        </trans-unit>
        <trans-unit id="e5b5ff320546cded57bcdfd8e9154e88bfce347b" translate="yes" xml:space="preserve">
          <source>Time since &lt;code&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap03.html#tag_21_03_00_17&quot;&gt; Epoch&lt;/a&gt;&lt;/code&gt;. Epoch is defined to be 00:00:00 &lt;code&gt;&lt;a href=&quot;#UTC&quot;&gt;UTC&lt;/a&gt;&lt;/code&gt;, 1970-01-01. &lt;code&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009604499/basedefs/xbd_chap04.html#tag_04_14&quot;&gt; A day in POSIX time&lt;/a&gt;&lt;/code&gt; is defined to be exactly 86400 seconds long. Strangely enough, Epoch is defined to be a time in UTC, and UTC has another definition of how long a day is. Quoting the Open Group &lt;code&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_15&quot;&gt; &quot;POSIX time is therefore not necessarily UTC, despite its appearance&quot;&lt;/a&gt;&lt;/code&gt;. The effect of this is that when an UTC leap second is inserted, POSIX time either stops for a second, or repeats the last second. If an UTC leap second would be deleted (which has not happened yet), POSIX time would make a one second leap forward.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap03.html#tag_21_03_00_17&quot;&gt; Epoch&lt;/a&gt;&lt;/code&gt; からの時間。エポックは00:00:00 &lt;code&gt;&lt;a href=&quot;#UTC&quot;&gt;UTC&lt;/a&gt;&lt;/code&gt; 、1970-01-01 と定義されています。 &lt;code&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009604499/basedefs/xbd_chap04.html#tag_04_14&quot;&gt; A day in POSIX time&lt;/a&gt;&lt;/code&gt; 正確に86400秒と定義されています。奇妙なことに、エポックはUTCでの時間として定義されており、UTCには1日の長さの別の定義があります。オープングループを引用すると、 &lt;code&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_15&quot;&gt; &quot;POSIX time is therefore not necessarily UTC, despite its appearance&quot;&lt;/a&gt;&lt;/code&gt; 。これの効果は、UTCうるう秒が挿入されると、POSIX時間は1秒間停止するか、最後の1秒間を繰り返すことです。 UTCうるう秒が削除される（まだ行われていない）場合、POSIX時間は1秒うるう前進します。</target>
        </trans-unit>
        <trans-unit id="daff1c5051fc31c193cbc0ef30cf4e11a8fa0acc" translate="yes" xml:space="preserve">
          <source>Time spent busy waiting. This is also the state where a scheduler no longer reports that it is active when using &lt;code&gt;&lt;a href=&quot;#statistics_scheduler_wall_time&quot;&gt;statistics(scheduler_wall_time)&lt;/a&gt;&lt;/code&gt;. So, if you add all other states but this and sleep, and then divide that by all time in the thread, you should get something very similar to the &lt;code&gt;scheduler_wall_time&lt;/code&gt; fraction. Without extra states this time is part of the &lt;code&gt;other&lt;/code&gt; state.</source>
          <target state="translated">忙しく待って過ごした時間。これは、 &lt;code&gt;&lt;a href=&quot;#statistics_scheduler_wall_time&quot;&gt;statistics(scheduler_wall_time)&lt;/a&gt;&lt;/code&gt; を使用しているときに、スケジューラーがアクティブであると報告しなくなった状態でもあります。したがって、これ以外のすべての状態を追加してスリープし、それをスレッド内のすべての時間で除算すると、 &lt;code&gt;scheduler_wall_time&lt;/code&gt; の割合と非常によく似たものになるはずです。余分な州がなければ、今回は &lt;code&gt;other&lt;/code&gt; 州の一部です。</target>
        </trans-unit>
        <trans-unit id="4b70b59840bac36480b4ca278b19551bc7ff7ba0" translate="yes" xml:space="preserve">
          <source>Time spent checking for new I/O events.</source>
          <target state="translated">新しいI/Oイベントのチェックに費やされた時間。</target>
        </trans-unit>
        <trans-unit id="f8c4236fa95ff532dbcc0e2d31ef284b6605be9f" translate="yes" xml:space="preserve">
          <source>Time spent doing fullsweep garbage collection. Without extra states this time is part of the &lt;code&gt;gc&lt;/code&gt; state.</source>
          <target state="translated">フルスイープガベージコレクションの実行に費やされた時間。追加の状態がない場合、今回は &lt;code&gt;gc&lt;/code&gt; 状態の一部です。</target>
        </trans-unit>
        <trans-unit id="804fe3e4c31d22ca440eb466bced64dac260645c" translate="yes" xml:space="preserve">
          <source>Time spent doing garbage collection. When extra states are enabled this is the time spent doing non-fullsweep garbage collections.</source>
          <target state="translated">ガベージコレクションの実行時間。extra states が有効な場合、これは非フルスイープのガベージコレクションを実行している時間です。</target>
        </trans-unit>
        <trans-unit id="f0d5415566936904747ef14c0c4e3fb853196c06" translate="yes" xml:space="preserve">
          <source>Time spent doing unaccounted things.</source>
          <target state="translated">会計されていないことをしている時間。</target>
        </trans-unit>
        <trans-unit id="4ba30f1fc2208657042880d6015e182708b6ae95" translate="yes" xml:space="preserve">
          <source>Time spent executing ETS BIFs. Without extra states this time is part of the &lt;code&gt;emulator&lt;/code&gt; state.</source>
          <target state="translated">ETS BIFの実行に費やされた時間。追加の状態がない場合、今回は &lt;code&gt;emulator&lt;/code&gt; 状態の一部です。</target>
        </trans-unit>
        <trans-unit id="6f0aba2d54a382bffda8610e637bf0f9265a1fa2" translate="yes" xml:space="preserve">
          <source>Time spent executing Erlang processes.</source>
          <target state="translated">Erlangプロセスの実行時間。</target>
        </trans-unit>
        <trans-unit id="2140217ef427aad1b621513a3b193759d78a1510" translate="yes" xml:space="preserve">
          <source>Time spent executing ports.</source>
          <target state="translated">ポートの実行時間。</target>
        </trans-unit>
        <trans-unit id="1d9aa0e3f8d5f8534bd40659e4d0e67ab0101833" translate="yes" xml:space="preserve">
          <source>Time spent handling auxiliary jobs.</source>
          <target state="translated">補助的な仕事を処理する時間</target>
        </trans-unit>
        <trans-unit id="18b77c82a332110e23d9be0001f08986fee15519" translate="yes" xml:space="preserve">
          <source>Time spent in BIFs. Without extra states this time is part of the &lt;code&gt;emulator&lt;/code&gt; state.</source>
          <target state="translated">BIFに費やされた時間。追加の状態がない場合、今回は &lt;code&gt;emulator&lt;/code&gt; 状態の一部です。</target>
        </trans-unit>
        <trans-unit id="bcdc57b7f7275d059418c6711b15d167f486f63c" translate="yes" xml:space="preserve">
          <source>Time spent in NIFs. Without extra states this time is part of the &lt;code&gt;emulator&lt;/code&gt; state.</source>
          <target state="translated">NIFで費やされた時間。追加の状態がない場合、今回は &lt;code&gt;emulator&lt;/code&gt; 状態の一部です。</target>
        </trans-unit>
        <trans-unit id="4050018617b293ffdfb42ee633136a70a84f563a" translate="yes" xml:space="preserve">
          <source>Time spent managing memory. Without extra states this time is spread out over all other states.</source>
          <target state="translated">記憶を管理するのに費やした時間。余分な状態がなければ、この時間は他のすべての状態に分散されます。</target>
        </trans-unit>
        <trans-unit id="9c01fc3b7f3c2c3c0d6942008a58943e7689d103" translate="yes" xml:space="preserve">
          <source>Time spent managing timers. Without extra states this time is part of the &lt;code&gt;other&lt;/code&gt; state.</source>
          <target state="translated">タイマーの管理に費やされた時間。余分な州がなければ、今回は &lt;code&gt;other&lt;/code&gt; 州の一部です。</target>
        </trans-unit>
        <trans-unit id="219f1ac61c024af183643b65bf00f27585517b49" translate="yes" xml:space="preserve">
          <source>Time spent sending messages (processes only). Without extra states this time is part of the &lt;code&gt;emulator&lt;/code&gt; state.</source>
          <target state="translated">メッセージの送信に費やされた時間（プロセスのみ）。追加の状態がない場合、今回は &lt;code&gt;emulator&lt;/code&gt; 状態の一部です。</target>
        </trans-unit>
        <trans-unit id="cbdb8b8de682894a050f647f9b6f67984322b3e7" translate="yes" xml:space="preserve">
          <source>Time spent sleeping.</source>
          <target state="translated">睡眠に費やした時間。</target>
        </trans-unit>
        <trans-unit id="5e12873ae797e4ba07d58c20986f4c5eb0d01fbc" translate="yes" xml:space="preserve">
          <source>Time stamps in profile messages consist of &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; and a monotonically increasing integer. The time stamp (Ts) has the same format and value as produced by &lt;code&gt;{erlang:monotonic_time(nanosecond), erlang:unique_integer([monotonic])}&lt;/code&gt;.</source>
          <target state="translated">プロファイルメッセージのタイムスタンプは、 &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; と単調に増加する整数で構成されます。タイムスタンプ（Ts）の形式と値は、 &lt;code&gt;{erlang:monotonic_time(nanosecond), erlang:unique_integer([monotonic])}&lt;/code&gt; によって生成されたものと同じです。</target>
        </trans-unit>
        <trans-unit id="0a74926d30453b95a42997402e366f9dbba46f4a" translate="yes" xml:space="preserve">
          <source>Time stamps in profile messages include a time stamp (Ts) that has the same form as returned by &lt;code&gt;erlang:now()&lt;/code&gt;. This is also the default if no time stamp flag is specified. If &lt;code&gt;cpu_timestamp&lt;/code&gt; has been enabled through &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt;, this also effects the time stamp produced in profiling messages when flag &lt;code&gt;timestamp&lt;/code&gt; is enabled.</source>
          <target state="translated">プロファイルメッセージのタイムスタンプには、 &lt;code&gt;erlang:now()&lt;/code&gt; によって返されるものと同じ形式のタイムスタンプ（Ts）が含まれます。これは、タイムスタンプフラグが指定されていない場合のデフォルトでもあります。 &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; によって &lt;code&gt;cpu_timestamp&lt;/code&gt; が有効になっている場合、これは、フラグ &lt;code&gt;timestamp&lt;/code&gt; が有効になっているときにプロファイリングメッセージで生成されるタイムスタンプにも影響します。</target>
        </trans-unit>
        <trans-unit id="22076e8ed9090afa79ae14afc1154da3fcea7d53" translate="yes" xml:space="preserve">
          <source>Time stamps in profile messages use &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt;. The time stamp (Ts) has the same format and value as produced by &lt;code&gt;erlang:monotonic_time(nanosecond)&lt;/code&gt;.</source>
          <target state="translated">プロファイルメッセージのタイムスタンプは、 &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; 使用します。タイムスタンプ（Ts）の形式と値は、 &lt;code&gt;erlang:monotonic_time(nanosecond)&lt;/code&gt; によって生成されたものと同じです。</target>
        </trans-unit>
        <trans-unit id="08ca334e927c4c6c13a180ed022f0e1809c6b0ea" translate="yes" xml:space="preserve">
          <source>Time unit expressed in parts per second. That is, the time unit equals &lt;code&gt;1/PartsPerSecond&lt;/code&gt; second.</source>
          <target state="translated">1秒あたりのパーツ数で表される時間単位。つまり、時間単位は &lt;code&gt;1/PartsPerSecond&lt;/code&gt; 秒です。</target>
        </trans-unit>
        <trans-unit id="56955f846ca14fda201279a48f5480070c862756" translate="yes" xml:space="preserve">
          <source>Time unit of &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; の時間単位。</target>
        </trans-unit>
        <trans-unit id="ddf7ef9b043acd2fefcc767917bfb64bbe68691e" translate="yes" xml:space="preserve">
          <source>Time unit of returned value.</source>
          <target state="translated">返された値の時間単位。</target>
        </trans-unit>
        <trans-unit id="c31fd1a438289cad94f807ff509ea2830cb0a280" translate="yes" xml:space="preserve">
          <source>Time used for creating a setup timer by a call to &lt;code&gt;dist_util:start_timer(SetupTime)&lt;/code&gt;. The timer should be passed along to &lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dist_util:start_timer(SetupTime)&lt;/code&gt; の呼び出しによってセットアップタイマーを作成するために使用される時間。タイマーは &lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt; に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="cba69c610e8e4d4cb1aafc070b3b00791654be26" translate="yes" xml:space="preserve">
          <source>Time used for creating a setup timer by a call to &lt;code&gt;dist_util:start_timer(SetupTime)&lt;/code&gt;. The timer should be passed along to &lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dist_util:start_timer(SetupTime)&lt;/code&gt; の呼び出しによってセットアップタイマーを作成するために使用される時間。タイマーは &lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt; に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="6ead486368f8803155ffc6453947e99e4019e5bc" translate="yes" xml:space="preserve">
          <source>Time warp safe code can handle a &lt;code&gt;&lt;a href=&quot;#Time_Warp&quot;&gt;time warp&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;#Erlang_System_Time&quot;&gt;Erlang system time&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タイムワープセーフコードは、 &lt;code&gt;&lt;a href=&quot;#Erlang_System_Time&quot;&gt;Erlang system time&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#Time_Warp&quot;&gt;time warp&lt;/a&gt;&lt;/code&gt; を処理できます。</target>
        </trans-unit>
        <trans-unit id="75c9ade9b7ea54157fc5ea15b058fcb35255e656" translate="yes" xml:space="preserve">
          <source>Time when the event record was created.</source>
          <target state="translated">イベントレコードが作成された時刻。</target>
        </trans-unit>
        <trans-unit id="1078e1766373df8f70c0326e90a0881d10d2001d" translate="yes" xml:space="preserve">
          <source>Time when the trace was generated. Same as event_ts if omitted in trace data.</source>
          <target state="translated">トレースが生成された時刻。トレースデータで省略した場合は event_ts と同じ。</target>
        </trans-unit>
        <trans-unit id="7c54440dd4618f7bc17db7c59ce90a91687e0a3f" translate="yes" xml:space="preserve">
          <source>Time-constrained tracing</source>
          <target state="translated">時間的制約のあるトレース</target>
        </trans-unit>
        <trans-unit id="dad879fd6c0ee22983f6de70e89c35317fb40e21" translate="yes" xml:space="preserve">
          <source>Time-out expired.</source>
          <target state="translated">タイムアウトが切れました。</target>
        </trans-unit>
        <trans-unit id="3e8c25c48b5132875c91d0c03a35c580928a7337" translate="yes" xml:space="preserve">
          <source>Time-out time for the request.</source>
          <target state="translated">リクエストのタイムアウト時間。</target>
        </trans-unit>
        <trans-unit id="dbff00965ebcca637b30964828cca5002698389b" translate="yes" xml:space="preserve">
          <source>Time-out timers &lt;code&gt;&lt;a href=&quot;#type-event_timeout&quot;&gt;event_timeout()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-generic_timeout&quot;&gt;generic_timeout()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#type-state_timeout&quot;&gt;state_timeout()&lt;/a&gt;&lt;/code&gt; are handled. Time-outs with zero time are guaranteed to be delivered to the state machine before any external not yet received event so if there is such a time-out requested, the corresponding time-out zero event is enqueued as the newest received event; that is after already queued events such as inserted and postponed events.</source>
          <target state="translated">タイムアウトタイマー &lt;code&gt;&lt;a href=&quot;#type-event_timeout&quot;&gt;event_timeout()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-generic_timeout&quot;&gt;generic_timeout()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#type-state_timeout&quot;&gt;state_timeout()&lt;/a&gt;&lt;/code&gt; が処理されます。ゼロ時間のタイムアウトは、まだ受信されていない外部イベントの前にステートマシンに配信されることが保証されているため、要求されたタイムアウトがある場合、対応するタイムアウトのゼロイベントが最新の受信イベントとしてキューに入れられます。これは、挿入されたイベントや延期されたイベントなど、すでにキューに入れられているイベントの後です。</target>
        </trans-unit>
        <trans-unit id="921bd14fe959f56d9bf6ef39fbc93c256e6bb1db" translate="yes" xml:space="preserve">
          <source>Time-out, in milliseconds, for establishing an association</source>
          <target state="translated">アソシエーションを確立するためのタイムアウト (ミリ秒単位)</target>
        </trans-unit>
        <trans-unit id="b9d894573097754c7b54a6191c10c2264d5de941" translate="yes" xml:space="preserve">
          <source>Timeout ::</source>
          <target state="translated">タイムアウト</target>
        </trans-unit>
        <trans-unit id="9ba0fea57692bed3e35ebe6f8f6d8f58f2ad3a37" translate="yes" xml:space="preserve">
          <source>Timeout :: timeout()) -&amp;gt;</source>
          <target state="translated">タイムアウト::タイムアウト（））-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6fd55cd4f150e662912da414d712d8565cc5d6ef" translate="yes" xml:space="preserve">
          <source>Timeout = &lt;code&gt;non_neg_integer()&lt;/code&gt;</source>
          <target state="translated">タイムアウト= &lt;code&gt;non_neg_integer()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c83fda5023992a3a755c63b7feecf8cc4bb563b5" translate="yes" xml:space="preserve">
          <source>Timeout has expired.</source>
          <target state="translated">タイムアウトが切れました。</target>
        </trans-unit>
        <trans-unit id="4de3dd3689e574562fe201d283c89d77aad9ff30" translate="yes" xml:space="preserve">
          <source>Timeout set the maximum time in milliseconds that each server request may take.</source>
          <target state="translated">タイムアウトは、各サーバのリクエストがかかる最大時間をミリ秒単位で設定します。</target>
        </trans-unit>
        <trans-unit id="0c72d1236b15e71c6081373a09d082eddd39e1e9" translate="yes" xml:space="preserve">
          <source>Timeout time for the call proxy.</source>
          <target state="translated">コールプロキシのタイムアウト時間。</target>
        </trans-unit>
        <trans-unit id="b5240d69e014aa8db2761b61b654dac666884a70" translate="yes" xml:space="preserve">
          <source>Timeout) -&amp;gt;</source>
          <target state="translated">タイムアウト）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="cbe7ffd10c56674d0aeb143b8aef6a19536cbe9f" translate="yes" xml:space="preserve">
          <source>Timer functions.</source>
          <target state="translated">タイマー機能を搭載しています。</target>
        </trans-unit>
        <trans-unit id="5775c0fa857a175458a6f31fe323d1c61544a03a" translate="yes" xml:space="preserve">
          <source>Timers and re-send of messages will be handled on locally on one node, that is node(1), in order to avoid unnecessary transfer of data between the Erlang nodes.</source>
          <target state="translated">タイマーとメッセージの再送は、Erlangノード間での不必要なデータ転送を避けるために、1つのノード、つまりノード(1)でローカルに処理されます。</target>
        </trans-unit>
        <trans-unit id="345e4b38e568b767b30f56f4731767a882691f68" translate="yes" xml:space="preserve">
          <source>Timestamp = {MegaSecs, Secs, MicroSecs}</source>
          <target state="translated">タイムスタンプ={MegaSecs,Secs,MicroSecs}.</target>
        </trans-unit>
        <trans-unit id="15a044fe233b5f5d8f3f995d7e5a1a639fcad92c" translate="yes" xml:space="preserve">
          <source>Timestamps are formatted according to RFC3339, and the time designator is the character used as date and time separator.</source>
          <target state="translated">タイムスタンプはRFC3339に従ってフォーマットされており、時刻指定子は日付と時刻の区切り文字として使用される文字です。</target>
        </trans-unit>
        <trans-unit id="ec489097f09779c8f0337c7ffff14c271f605260" translate="yes" xml:space="preserve">
          <source>Timetrap values can be extended with a multiplier value specified at startup with option &lt;code&gt;multiply_timetraps&lt;/code&gt;. It is also possible to let the test server decide to scale up timetrap time-out values automatically. That is, if tools such as &lt;code&gt;cover&lt;/code&gt; or &lt;code&gt;trace&lt;/code&gt; are running during the test. This feature is disabled by default and can be enabled with start option &lt;code&gt;scale_timetraps&lt;/code&gt;.</source>
          <target state="translated">タイムトラップ値は、オプション &lt;code&gt;multiply_timetraps&lt;/code&gt; で起動時に指定された乗数値で拡張できます。また、テストサーバーにタイムトラップタイムアウト値を自動的にスケールアップするように決定させることもできます。つまり、テスト中に &lt;code&gt;cover&lt;/code&gt; や &lt;code&gt;trace&lt;/code&gt; などのツールが実行されている場合です。この機能はデフォルトで無効になっており、起動オプション &lt;code&gt;scale_timetraps&lt;/code&gt; で有効にできます。</target>
        </trans-unit>
        <trans-unit id="ce4a7717f17e9b8af076c5d38d2f59e28a523086" translate="yes" xml:space="preserve">
          <source>Tirhuta</source>
          <target state="translated">Tirhuta</target>
        </trans-unit>
        <trans-unit id="b51456deb293c14e281cc125141b1ca93bd63d71" translate="yes" xml:space="preserve">
          <source>Title case letter</source>
          <target state="translated">タイトルケースレター</target>
        </trans-unit>
        <trans-unit id="175f9c3cbfadc16808edf4696a9a651beef5a26c" translate="yes" xml:space="preserve">
          <source>Tls/dtls option descriptions - client side</source>
          <target state="translated">Tls/dtls オプションの説明-クライアント側</target>
        </trans-unit>
        <trans-unit id="ebe960548ac60cdb2adcef7ca8456b9e2d23126c" translate="yes" xml:space="preserve">
          <source>Tls/dtls option descriptions - server side</source>
          <target state="translated">Tls/dtls オプションの説明-サーバ側</target>
        </trans-unit>
        <trans-unit id="bf91222de5df25eb68a0c8123513399e374daae1" translate="yes" xml:space="preserve">
          <source>To &quot;teach&quot; the function how to extract, you can give a fun which replaces the default extraction function. The &lt;code&gt;fqdn_fun&lt;/code&gt; takes one argument and returns either a &lt;code&gt;string()&lt;/code&gt; to be matched to each CN-name or the atom &lt;code&gt;default&lt;/code&gt; which will invoke the default fqdn extraction function. The return value &lt;code&gt;undefined&lt;/code&gt; removes the current URI from the fqdn extraction.</source>
          <target state="translated">関数に抽出方法を「教える」ために、デフォルトの抽出関数を置き換える楽しみを与えることができます。 &lt;code&gt;fqdn_fun&lt;/code&gt; は一つの引数及び戻りのいずれかとる &lt;code&gt;string()&lt;/code&gt; 各CN名または原子に一致する &lt;code&gt;default&lt;/code&gt; のデフォルトのFQDN抽出機能を呼び出します。戻り値 &lt;code&gt;undefined&lt;/code&gt; は、fqdn抽出から現在のURIを削除します。</target>
        </trans-unit>
        <trans-unit id="c6ddde9755b765c3b046311bcbccd6ae209f1079" translate="yes" xml:space="preserve">
          <source>To access such tables, simplified access functions (as described earlier) cannot be used. For example, writing a subscriber record into a table requires the function &lt;code&gt;&lt;a href=&quot;mnesia#write-3&quot;&gt;mnesia:write/3&lt;/a&gt;&lt;/code&gt; instead of the simplified functions &lt;code&gt;&lt;a href=&quot;mnesia#write-1&quot;&gt;mnesia:write/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mnesia#s_write-1&quot;&gt;mnesia:s_write/1&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">このようなテーブルにアクセスするには、簡略化されたアクセス関数（前述）を使用できません。たとえば、サブスクライバーレコードをテーブルに &lt;code&gt;&lt;a href=&quot;mnesia#write-3&quot;&gt;mnesia:write/3&lt;/a&gt;&lt;/code&gt; には、単純化された関数 &lt;code&gt;&lt;a href=&quot;mnesia#write-1&quot;&gt;mnesia:write/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;mnesia#s_write-1&quot;&gt;mnesia:s_write/1&lt;/a&gt;&lt;/code&gt; ではなく、関数mnesia：write / 3が必要です。</target>
        </trans-unit>
        <trans-unit id="fff8dcb832da82946e10018f4faeadf19cfc862a" translate="yes" xml:space="preserve">
          <source>To acess the record in your callback-module use:</source>
          <target state="translated">コールバックモジュールのレコードにアクセスするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="2e9f9ccb32571596628f903ebec0197042453a6d" translate="yes" xml:space="preserve">
          <source>To achieve authentication and privacy, the client and server perform a TLS/DTLS handshake procedure before transmitting or receiving any data. During the handshake, they agree on a protocol version and cryptographic algorithms, generate shared secrets using public key cryptographies, and optionally authenticate each other with digital certificates.</source>
          <target state="translated">認証とプライバシーを実現するために、クライアントとサーバはデータの送受信を行う前に TLS/DTLS ハンドシェイクを行います。ハンドシェイク中に、プロトコルのバージョンと暗号アルゴリズムに合意し、公開鍵暗号を使用して共有秘密を生成し、オプションでデジタル証明書を使用してお互いを認証します。</target>
        </trans-unit>
        <trans-unit id="0ec1db4ecbaf3ec0b305eae994234d479d4f46e8" translate="yes" xml:space="preserve">
          <source>To act as a timetrap. The time-out is triggered when the function returns.</source>
          <target state="translated">タイムトラップとして動作するように タイムアウトは、関数が戻ってきたときにトリガされます。</target>
        </trans-unit>
        <trans-unit id="589688126179f4b6262587b2faac1c9d33d97234" translate="yes" xml:space="preserve">
          <source>To activate the code coverage support, specify the name of the cover specification file as you start &lt;code&gt;Common Test&lt;/code&gt;. Do this by using flag &lt;code&gt;-cover&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt;, for example:</source>
          <target state="translated">コードカバレッジサポートをアクティブにするには、 &lt;code&gt;Common Test&lt;/code&gt; を開始するときにカバー仕様ファイルの名前を指定します。これを &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;-cover&lt;/code&gt; でフラグ-coverを使用します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="9cae8d843ee99890bf287306d3e1fa2ea6334285" translate="yes" xml:space="preserve">
          <source>To actor, such as receiver of message.</source>
          <target state="translated">メッセージの受信者などの俳優に。</target>
        </trans-unit>
        <trans-unit id="b7c67d81ad5962900cef3025ec2c90eb9d886e13" translate="yes" xml:space="preserve">
          <source>To add a new instance of the disk_log handler, use &lt;code&gt;&lt;a href=&quot;logger#add_handler-3&quot;&gt;logger:add_handler/3&lt;/a&gt;&lt;/code&gt;. The handler configuration argument is a map which can contain general configuration parameters, as documented in the &lt;code&gt;&lt;a href=&quot;logger_chapter#handler_configuration&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;, and handler specific parameters. The specific data is stored in a sub map with the key &lt;code&gt;config&lt;/code&gt;, and can contain the following parameters:</source>
          <target state="translated">disk_logハンドラーの新しいインスタンスを追加するには、 &lt;code&gt;&lt;a href=&quot;logger#add_handler-3&quot;&gt;logger:add_handler/3&lt;/a&gt;&lt;/code&gt; を使用します。ハンドラー構成引数は、 &lt;code&gt;&lt;a href=&quot;logger_chapter#handler_configuration&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 記載されている一般的な構成パラメーターとハンドラー固有のパラメーターを含むことができるマップです。特定のデータはキー &lt;code&gt;config&lt;/code&gt; を使用してサブマップに格納され、次のパラメーターを含めることができます。</target>
        </trans-unit>
        <trans-unit id="bc71d9dc8116b79c66537800da31d34775d71f00" translate="yes" xml:space="preserve">
          <source>To add a new instance of the standard handler, use &lt;code&gt;&lt;a href=&quot;logger#add_handler-3&quot;&gt;logger:add_handler/3&lt;/a&gt;&lt;/code&gt;. The handler configuration argument is a map which can contain general configuration parameters, as documented in the &lt;code&gt;&lt;a href=&quot;logger_chapter#handler_configuration&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;, and handler specific parameters. The specific data is stored in a sub map with the key &lt;code&gt;config&lt;/code&gt;, and can contain the following parameters:</source>
          <target state="translated">標準ハンドラーの新しいインスタンスを追加するには、 &lt;code&gt;&lt;a href=&quot;logger#add_handler-3&quot;&gt;logger:add_handler/3&lt;/a&gt;&lt;/code&gt; を使用します。ハンドラー構成引数は、 &lt;code&gt;&lt;a href=&quot;logger_chapter#handler_configuration&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 記載されている一般的な構成パラメーターとハンドラー固有のパラメーターを含むことができるマップです。特定のデータはキー &lt;code&gt;config&lt;/code&gt; を使用してサブマップに格納され、次のパラメーターを含めることができます。</target>
        </trans-unit>
        <trans-unit id="d25bba7220a4f7baf1911b739eb15c54b0c0b82c" translate="yes" xml:space="preserve">
          <source>To add hipe options, write like this from the Erlang shell:</source>
          <target state="translated">hipeオプションを追加するには、Erlangシェルからこのように書きます。</target>
        </trans-unit>
        <trans-unit id="3baa48763297e23c94a7b912bd0879afc5570f44" translate="yes" xml:space="preserve">
          <source>To add one file at the time into an opened tar file, use function &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add/3,4&lt;/a&gt;&lt;/code&gt;. When you are finished adding files, use function &lt;code&gt;&lt;a href=&quot;#close-1&quot;&gt;close/1&lt;/a&gt;&lt;/code&gt; to close the tar file.</source>
          <target state="translated">開いているtarファイルに一度に1つのファイルを追加するには、関数 &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add/3,4&lt;/a&gt;&lt;/code&gt; を使用します。ファイルの追加が終了したら、関数 &lt;code&gt;&lt;a href=&quot;#close-1&quot;&gt;close/1&lt;/a&gt;&lt;/code&gt; を使用してtarファイルを閉じます。</target>
        </trans-unit>
        <trans-unit id="a84e38b55e72c3e97104e0980726fd48cb3019f6" translate="yes" xml:space="preserve">
          <source>To add or remove functions to the set of traced functions, use &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt;.</source>
          <target state="translated">トレースされる関数のセットに関数を追加または削除するには、 &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fda79af0ac4d5d28c0ded42a7d7b009f4b62fd23" translate="yes" xml:space="preserve">
          <source>To add or remove one or more processes to the set of traced processes, use &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">トレースされるプロセスのセットに1つ以上のプロセスを追加または削除するには、 &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="dd9ff12ed931dadbc8c2436f103539b09520bf39" translate="yes" xml:space="preserve">
          <source>To allow the &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; to &lt;strong&gt;request unloading&lt;/strong&gt; to wait for &lt;strong&gt;actual unloading&lt;/strong&gt;, &lt;code&gt;monitor&lt;/code&gt; triggers can be specified in much the same way as when loading. However, as &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; of this function seldom are interested in more than decrementing the reference counts, monitoring is seldom needed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; が&lt;strong&gt;実際のアン&lt;/strong&gt;&lt;strong&gt;ロード&lt;/strong&gt;を待機するために&lt;strong&gt;アンロード&lt;/strong&gt;を&lt;strong&gt;要求&lt;/strong&gt;できるようにするには、ロード時とほとんど同じ方法で &lt;code&gt;monitor&lt;/code&gt; トリガーを指定できます。ただし、この関数の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; が参照カウントのデクリメント以上のことに関心を持つことはほとんどないため、監視が必要になることはほとんどありません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59bb251ccc89a2f6d964901c5abf9140c03fcff3" translate="yes" xml:space="preserve">
          <source>To avoid copying data when a large binary is sent or returned from the driver to an Erlang process, the driver must first allocate the binary and then send it to an Erlang process in some way.</source>
          <target state="translated">ドライバからErlangプロセスに大きなバイナリが送られたり返されたりしたときにデータをコピーしないようにするために、ドライバはまずバイナリを割り当ててから何らかの方法でErlangプロセスに送らなければなりません。</target>
        </trans-unit>
        <trans-unit id="2865a7885b23338eb552d918abbacdfb214f7e88" translate="yes" xml:space="preserve">
          <source>To avoid copying the result in each iteration, build the list in reverse order and reverse the list when you are done:</source>
          <target state="translated">反復のたびに結果をコピーしないようにするために、リストを逆順に構築し、作業が終わったらリストを逆にします。</target>
        </trans-unit>
        <trans-unit id="0e09f8fda1e6fc4cf2056ba424646d85461e4106" translate="yes" xml:space="preserve">
          <source>To avoid duplication of upgrade instructions, it is allowed to use regular expressions to specify &lt;code&gt;UpFromVsn&lt;/code&gt; and &lt;code&gt;DownToVsn&lt;/code&gt;. To be considered a regular expression, the version identifier must be specified as a binary. For example, the following match all versions &lt;code&gt;2.1.x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is any number:</source>
          <target state="translated">アップグレード手順の重複を避けるために、正規表現を使用して &lt;code&gt;UpFromVsn&lt;/code&gt; および &lt;code&gt;DownToVsn&lt;/code&gt; を指定することができます。正規表現と見なされるには、バージョン識別子をバイナリとして指定する必要があります。例えば、以下はすべてのバージョン一致 &lt;code&gt;2.1.x&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; は任意の数であるが。</target>
        </trans-unit>
        <trans-unit id="f3e4e6304ab6854db5a3171fca0bb16d781ed384" translate="yes" xml:space="preserve">
          <source>To avoid hanging on open ports, use function &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">開いているポートでのハングを回避するには、代わりに関数 &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="31d3d102c2bccbc776e3cf95a6211839f76eac95" translate="yes" xml:space="preserve">
          <source>To avoid hard-coding data values related to the test and/or System Under Test (SUT) in the test suites, the data can instead be specified through configuration files or strings that &lt;code&gt;Common Test&lt;/code&gt; reads before the start of a test run. External configuration data makes it possible to change test properties without modifying the test suites using the data. Examples of configuration data follows:</source>
          <target state="translated">テストに関連するテストやテスト対象システム（SUT）に関連するデータ値のハードコーディングを回避するために、テスト実行の開始前に &lt;code&gt;Common Test&lt;/code&gt; が読み取る構成ファイルまたは文字列を使用してデータを指定できます。外部構成データにより、データを使用してテストスイートを変更せずにテストプロパティを変更できます。構成データの例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ff4064fdc26dd0f01d01190c1a8e9d791a3c3dfd" translate="yes" xml:space="preserve">
          <source>To avoid this, we can consider starting and stopping the server for every test. We can thus implement the start and stop action as common functions to be called from &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt;. (Remember to test the start and stop functionality separately.) The configuration can also be implemented as a common function, maybe grouped with the start function. Finally, the testing of connecting and disconnecting a client can be grouped into one test case. The resulting suite can look as follows:</source>
          <target state="translated">これを回避するために、すべてのテストでサーバーを起動および停止することを検討できます。したがって、開始アクションと停止アクションを、 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; から呼び出される共通の関数として実装できます。（開始機能と停止機能を別々にテストすることを忘れないでください。）構成は、共通機能として実装することもできます。開始機能とグループ化することもできます。最後に、クライアントの接続と切断のテストを1つのテストケースにグループ化できます。結果のスイートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="da22d86c6d5a5e12ab72051b2e07972d39e8f4d0" translate="yes" xml:space="preserve">
          <source>To avoid this, you can format the internal state that gets in the error log and gets returned from &lt;code&gt;sys:get_status/1,2&lt;/code&gt; by implementing function &lt;code&gt;Module:format_status/2&lt;/code&gt;, for example like this:</source>
          <target state="translated">これを回避するには、たとえば次のように &lt;code&gt;Module:format_status/2&lt;/code&gt; 関数を実装して、エラーログに記録され、 &lt;code&gt;sys:get_status/1,2&lt;/code&gt; から返される内部状態をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="5df12af7ca1de496492c0fd73285a97d145fbb83" translate="yes" xml:space="preserve">
          <source>To be able to access a record in a fragmented table, &lt;code&gt;Mnesia&lt;/code&gt; must determine to which fragment the actual record belongs. This is done by module &lt;code&gt;mnesia_frag&lt;/code&gt;, which implements the &lt;code&gt;mnesia_access&lt;/code&gt; callback behavior. It is recommended to read the documentation about the function &lt;code&gt;&lt;a href=&quot;mnesia#activity-4&quot;&gt;mnesia:activity/4&lt;/a&gt;&lt;/code&gt; to see how &lt;code&gt;mnesia_frag&lt;/code&gt; can be used as a &lt;code&gt;mnesia_access&lt;/code&gt; callback module.</source>
          <target state="translated">断片化されたテーブルのレコードにアクセスできるようにするには、 &lt;code&gt;Mnesia&lt;/code&gt; は実際のレコードがどのフラグメントに属しているかを判別する必要があります。これは、 &lt;code&gt;mnesia_access&lt;/code&gt; コールバック動作を実装するモジュール &lt;code&gt;mnesia_frag&lt;/code&gt; によって行われます。関数についてのドキュメント読むことをお勧めします &lt;code&gt;&lt;a href=&quot;mnesia#activity-4&quot;&gt;mnesia:activity/4&lt;/a&gt;&lt;/code&gt; どのように見て &lt;code&gt;mnesia_frag&lt;/code&gt; をとして使用することができ &lt;code&gt;mnesia_access&lt;/code&gt; コールバックモジュール。</target>
        </trans-unit>
        <trans-unit id="23318e76150bd1f0abc3ba7a0d5c11d745ade1e5" translate="yes" xml:space="preserve">
          <source>To be able to access another source than &lt;code&gt;running&lt;/code&gt;, the server must advertise &lt;code&gt;:candidate&lt;/code&gt; and/or &lt;code&gt;:startup&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;running&lt;/code&gt; 中以外のソースにアクセスできるようにするには、サーバーが &lt;code&gt;:candidate&lt;/code&gt; や &lt;code&gt;:startup&lt;/code&gt; を通知する必要があります。</target>
        </trans-unit>
        <trans-unit id="b51f87825f77244a25cc2b4cb931c55829d08561" translate="yes" xml:space="preserve">
          <source>To be able to build the 64bit VM, you will also need the 64bit MinGW compiler from:</source>
          <target state="translated">64bitのVMをビルドできるようにするには、64bitのMinGWコンパイラも必要になります。</target>
        </trans-unit>
        <trans-unit id="26291c0ee8be34dfdaf3cc8ddf503e49e01d4215" translate="yes" xml:space="preserve">
          <source>To be able to handle that the peer has done a shutdown on the write side, option &lt;code&gt;{exit_on_close, false}&lt;/code&gt; is useful.</source>
          <target state="translated">ピアが書き込み側でシャットダウンを行ったことを処理できるようにするには、オプション &lt;code&gt;{exit_on_close, false}&lt;/code&gt; が役立ちます。</target>
        </trans-unit>
        <trans-unit id="e5203ca51ac51dc3846f4da1bcecefb73078a29b" translate="yes" xml:space="preserve">
          <source>To be able to match on events, the event handler module must include the header file &lt;code&gt;ct_event.hrl&lt;/code&gt;. An event is a record with the following definition:</source>
          <target state="translated">イベントを照合できるようにするには、イベントハンドラーモジュールにヘッダーファイル &lt;code&gt;ct_event.hrl&lt;/code&gt; を含める必要があります。イベントは、次の定義を持つレコードです。</target>
        </trans-unit>
        <trans-unit id="e3749ffc8118407236ba6c1778f7ad9201b5e31f" translate="yes" xml:space="preserve">
          <source>To be able to react to a change in Erlang system time, you must be able to detect that it happened. The change in Erlang system time occurs when the current time offset is changed. We have therefore introduced the possibility to monitor the time offset using &lt;code&gt;&lt;a href=&quot;erlang#monitor-2&quot;&gt;erlang:monitor(time_offset, clock_service)&lt;/a&gt;&lt;/code&gt;. A process monitoring the time offset is sent a message on the following format when the time offset is changed:</source>
          <target state="translated">Erlangシステム時間の変更に対応できるようにするには、それが発生したことを検出できる必要があります。現在の時間オフセットが変更されると、Erlangシステム時間の変更が発生します。したがって、 &lt;code&gt;&lt;a href=&quot;erlang#monitor-2&quot;&gt;erlang:monitor(time_offset, clock_service)&lt;/a&gt;&lt;/code&gt; を使用して時間オフセットを監視する可能性を導入しました。タイムオフセットを監視するプロセスには、タイムオフセットが変更されると、次の形式のメッセージが送信されます。</target>
        </trans-unit>
        <trans-unit id="4db2f48a1319253c8231fa7c3d7cafe6f17c3bfc" translate="yes" xml:space="preserve">
          <source>To be backward compatible, &lt;code&gt;erlang:now/0&lt;/code&gt; remains &quot;as is&quot;, but &lt;strong&gt;you are strongly discouraged from using it&lt;/strong&gt;. Many use cases of &lt;code&gt;erlang:now/0&lt;/code&gt; prevents you from using the new &lt;code&gt;&lt;a href=&quot;#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt;, which is an important part of this new time functionality improvement.</source>
          <target state="translated">後方互換性を維持するために、 &lt;code&gt;erlang:now/0&lt;/code&gt; は「現状のまま」&lt;strong&gt;ですが、使用しないことを強くお勧めします&lt;/strong&gt;。 &lt;code&gt;erlang:now/0&lt;/code&gt; の多くの使用例では、新しい &lt;code&gt;&lt;a href=&quot;#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt; を使用できません。これは、この新しい時間機能の改善の重要な部分です。</target>
        </trans-unit>
        <trans-unit id="329020006d74005fa227c858badad448a18d5417" translate="yes" xml:space="preserve">
          <source>To be explicit, this does not work:</source>
          <target state="translated">露骨に言うと、これではうまくいきません。</target>
        </trans-unit>
        <trans-unit id="921be93011160f60c5394e46977ec4ffed9f386b" translate="yes" xml:space="preserve">
          <source>To be exploited by documentation tools, such as EDoc, for generating program documentation of various forms</source>
          <target state="translated">EDoc のような文書化ツールを利用して、さまざまな形式のプログラム文書を生成すること。</target>
        </trans-unit>
        <trans-unit id="f48ee1f9c7b05fd181e829e8e9aa1a1a445ae544" translate="yes" xml:space="preserve">
          <source>To be made the default version, the newly installed release must be made &lt;strong&gt;permanent&lt;/strong&gt;, which means the previous version becomes &lt;strong&gt;old&lt;/strong&gt;:</source>
          <target state="translated">デフォルトバージョンにするには、新しくインストールされたリリースを&lt;strong&gt;永続&lt;/strong&gt;化する必要があります。つまり、以前のバージョンが&lt;strong&gt;古い&lt;/strong&gt;バージョンになります。</target>
        </trans-unit>
        <trans-unit id="e74a300fec94193e2bb8d4e9a20ec23ef6d08170" translate="yes" xml:space="preserve">
          <source>To be passed along to &lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="9599c6de97f8d0342f31be2e0d82a6fa8e679162" translate="yes" xml:space="preserve">
          <source>To be written.</source>
          <target state="translated">書かれること。</target>
        </trans-unit>
        <trans-unit id="478342ff97001f76e051ff05457f998d192f9c98" translate="yes" xml:space="preserve">
          <source>To bring up all functions of the module in the listbox, click the &lt;strong&gt;OK&lt;/strong&gt; button (or press the &lt;strong&gt;Return&lt;/strong&gt; or &lt;strong&gt;Tab&lt;/strong&gt; key) when a module name has been specified,.</source>
          <target state="translated">モジュールのすべての機能をリストボックスに表示するには、モジュール名を指定して、[ &lt;strong&gt;OK&lt;/strong&gt; ]ボタンをクリックします（または&lt;strong&gt;Return&lt;/strong&gt;キーまたは&lt;strong&gt;Tab&lt;/strong&gt;キーを押します）。</target>
        </trans-unit>
        <trans-unit id="eef5c50b74cfb025ae830e60721c49d26fd50ea9" translate="yes" xml:space="preserve">
          <source>To browse the file hierarchy and interpret the appropriate modules, either select a module name and click &lt;strong&gt;Choose&lt;/strong&gt; (or press carriage return), or double-click the module name. Interpreted modules have the type &lt;code&gt;erl src&lt;/code&gt;.</source>
          <target state="translated">ファイル階層を参照して適切なモジュールを解釈するには、モジュール名を&lt;strong&gt;選択&lt;/strong&gt;して[ &lt;strong&gt;選択&lt;/strong&gt; ]をクリックする（またはキャリッジリターンを押す）か、モジュール名をダブルクリックします。解釈されるモジュールのタイプは &lt;code&gt;erl src&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="28e906186648188c00413e57f57d46fc8b55c323" translate="yes" xml:space="preserve">
          <source>To build the map &lt;code&gt;#{key1 =&amp;gt; 100, key2 =&amp;gt; {200, 300}}&lt;/code&gt;, the following call can be made.</source>
          <target state="translated">マップ &lt;code&gt;#{key1 =&amp;gt; 100, key2 =&amp;gt; {200, 300}}&lt;/code&gt; を構築するには、次の呼び出しを行うことができます。</target>
        </trans-unit>
        <trans-unit id="cf559a27d31b4ba64718074dda19ef0d468cf4ad" translate="yes" xml:space="preserve">
          <source>To build the tuple &lt;code&gt;{tcp, Port, [100 | Binary]}&lt;/code&gt;, the following call can be made.</source>
          <target state="translated">タプル &lt;code&gt;{tcp, Port, [100 | Binary]}&lt;/code&gt; 、次の呼び出しを行うことができます。</target>
        </trans-unit>
        <trans-unit id="94328137f8adf38a2d5782ddb946585047133b14" translate="yes" xml:space="preserve">
          <source>To call an arbitrary function from the release handler, the following instruction is used:</source>
          <target state="translated">リリースハンドラから任意の関数を呼び出すには、以下の命令を使用します。</target>
        </trans-unit>
        <trans-unit id="648e7cf5c6adf0a3796e8cd7e102571a81de2b0f" translate="yes" xml:space="preserve">
          <source>To call the parser generator, use the following command:</source>
          <target state="translated">パーサジェネレータを呼び出すには、以下のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="754fcce3ba1a05a254eee986bb434f3d90945ecd" translate="yes" xml:space="preserve">
          <source>To change from old code to current code, a process must make a fully qualified function call.</source>
          <target state="translated">古いコードから現在のコードに変更するには、プロセスは完全に修飾された関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="d43cb0d79f1f2a05084529861044cff6d89a0ac1" translate="yes" xml:space="preserve">
          <source>To change that we would need to insert action &lt;code&gt;hibernate&lt;/code&gt; in more places. For example, the state-independent &lt;code&gt;set_lock_button&lt;/code&gt; operation would have to use &lt;code&gt;hibernate&lt;/code&gt; but only in the &lt;code&gt;{open,_}&lt;/code&gt; state, which would clutter the code.</source>
          <target state="translated">これを変更するには、アクションの &lt;code&gt;hibernate&lt;/code&gt; をより多くの場所に挿入する必要があります。たとえば、状態に依存しない &lt;code&gt;set_lock_button&lt;/code&gt; 操作では &lt;code&gt;hibernate&lt;/code&gt; を使用する必要がありますが、コードを乱雑にする &lt;code&gt;{open,_}&lt;/code&gt; 状態でのみ必要です。</target>
        </trans-unit>
        <trans-unit id="6d2291b5accb98f7fdfc37910802e511d2e8b381" translate="yes" xml:space="preserve">
          <source>To change the above program to one that works out the minimum value of the element in a list, you only need to write &amp;lt; instead of &amp;gt;. (But it would be wise to change the name of the function to &lt;code&gt;list_min&lt;/code&gt;.)</source>
          <target state="translated">上記のプログラムをリスト内の要素の最小値を計算するプログラムに変更するには、&amp;gt;の代わりに&amp;lt;のみを記述する必要があります。（ただし、関数の名前を &lt;code&gt;list_min&lt;/code&gt; に変更することをお勧めします。）</target>
        </trans-unit>
        <trans-unit id="df565b9f1ce8851c5511996238157f3f30542cab" translate="yes" xml:space="preserve">
          <source>To change the algorithm list, there are two options which can be used in &lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;ssh:connect/2,3,4&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ssh#daemon-2&quot;&gt;ssh:daemon/2,3&lt;/a&gt;&lt;/code&gt;. The options could of course be used in all other functions that initiates connections.</source>
          <target state="translated">アルゴリズムリストを変更するには、 &lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;ssh:connect/2,3,4&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ssh#daemon-2&quot;&gt;ssh:daemon/2,3&lt;/a&gt;&lt;/code&gt; で使用できる2つのオプションがあります。もちろん、オプションは接続を開始する他のすべての機能で使用できます。</target>
        </trans-unit>
        <trans-unit id="645ec6265eaa80d65a779b7caa5860ddbfdebc42" translate="yes" xml:space="preserve">
          <source>To change the log level for a handler, use &lt;code&gt;&lt;a href=&quot;#set_handler_config-3&quot;&gt;set_handler_config(HandlerId, level, Level)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ハンドラーのログレベルを変更するには、 &lt;code&gt;&lt;a href=&quot;#set_handler_config-3&quot;&gt;set_handler_config(HandlerId, level, Level)&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="dd786bf281877aa85271503f3c21215f44679fd5" translate="yes" xml:space="preserve">
          <source>To change the pattern so that it matches all palindromic strings, not only those with an odd number of characters, it is tempting to change the pattern to this:</source>
          <target state="translated">奇数文字の文字列だけでなく、すべての回文文字列にマッチするようにパターンを変更するには、このように変更したくなります。</target>
        </trans-unit>
        <trans-unit id="d9656eb62d534763e64141fc6d3d1d35b0b442bc" translate="yes" xml:space="preserve">
          <source>To change the primary log level for Logger, use &lt;code&gt;&lt;a href=&quot;#set_primary_config-2&quot;&gt;set_primary_config(level, Level)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ロガーのプライマリログレベルを変更するには、 &lt;code&gt;&lt;a href=&quot;#set_primary_config-2&quot;&gt;set_primary_config(level, Level)&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="866ca5de7c21c0cf7da2438015592c26ee8d81d7" translate="yes" xml:space="preserve">
          <source>To change the rules that restrict the use of an asset, the user only needs write access to the directory where the asset is.</source>
          <target state="translated">アセットの使用を制限するルールを変更するには、ユーザーはアセットがあるディレクトリへの書き込みアクセスのみが必要です。</target>
        </trans-unit>
        <trans-unit id="f5621caa72f0f06f014de0ebbc8d407830e5d0da" translate="yes" xml:space="preserve">
          <source>To check if your code is executed within a transaction, use the function &lt;code&gt;&lt;a href=&quot;mnesia#is_transaction-0&quot;&gt;mnesia:is_transaction/0&lt;/a&gt;&lt;/code&gt;. It returns &lt;code&gt;true&lt;/code&gt; when called inside a transaction context, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">コードがトランザクション内で実行されるかどうかを確認するには、関数 &lt;code&gt;&lt;a href=&quot;mnesia#is_transaction-0&quot;&gt;mnesia:is_transaction/0&lt;/a&gt;&lt;/code&gt; を使用します。トランザクションコンテキスト内で呼び出された場合は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6b2516b6faafd214fb55f7400a6a5d85502f13d2" translate="yes" xml:space="preserve">
          <source>To check whether a term is a fun, use the test &lt;code&gt;is_function/1&lt;/code&gt; in a guard.</source>
          <target state="translated">用語が楽しいかどうかを確認するには、ガードでテスト &lt;code&gt;is_function/1&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="61eaab6c693a13cade1df8955eec714a449d7d24" translate="yes" xml:space="preserve">
          <source>To choose the name for the generated module, for example, because you need to compile the same specs for different encoding rules.</source>
          <target state="translated">生成されたモジュールの名前を選択するには、例えば、異なるエンコーディングルールのために同じ仕様をコンパイルする必要があるからです。</target>
        </trans-unit>
        <trans-unit id="1427a1da5e3a256c344db44b11dc0bba14915bf8" translate="yes" xml:space="preserve">
          <source>To close the window, click &lt;strong&gt;Done&lt;/strong&gt;.</source>
          <target state="translated">ウィンドウを閉じるには、[ &lt;strong&gt;完了&lt;/strong&gt; ]をクリック&lt;strong&gt;し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2b49e3e39a1c8fd0e9ebc5aae6e7cbc8ac29bcce" translate="yes" xml:space="preserve">
          <source>To communicate through Telnet to the host specified by &lt;code&gt;HostNameOrIpAddress&lt;/code&gt;, use the interface functions in &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt;, for example, &lt;code&gt;open(Name)&lt;/code&gt; and &lt;code&gt;cmd(Name,Cmd)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HostNameOrIpAddress&lt;/code&gt; で指定されたホストにTelnetを介して通信するには、 &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; のインターフェイス関数、たとえば &lt;code&gt;open(Name)&lt;/code&gt; や &lt;code&gt;cmd(Name,Cmd)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8cc63914adafb29982dfe6a5968660a48f49ce2e" translate="yes" xml:space="preserve">
          <source>To compare styles, here follows the same example using &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;&lt;code&gt;handle_event_function&lt;/code&gt;, or rather the code to replace after function &lt;code&gt;init/1&lt;/code&gt; of the &lt;code&gt;pushbutton.erl&lt;/code&gt; example file above:</source>
          <target state="translated">スタイルを比較するために、ここで使用した同じ例を次の &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; &lt;code&gt;handle_event_function&lt;/code&gt; 、あるいはむしろ、関数の後に置き換えるためのコード &lt;code&gt;init/1&lt;/code&gt; の &lt;code&gt;pushbutton.erl&lt;/code&gt; 上記の例のファイルを：</target>
        </trans-unit>
        <trans-unit id="f9bdaaae36af33eb796c91b4364a72c96ddef2b5" translate="yes" xml:space="preserve">
          <source>To compare the importance of the printout to a specific verbosity level.</source>
          <target state="translated">印刷物の重要度を特定の動詞レベルと比較すること。</target>
        </trans-unit>
        <trans-unit id="54ed5bb067e17e1fa5d9fb9384ef7e59e200b2f4" translate="yes" xml:space="preserve">
          <source>To compile your code, ensure that your C compiler knows where to find &lt;code&gt;erl_interface.h&lt;/code&gt; by specifying an appropriate &lt;code&gt;-I&lt;/code&gt; argument on the command line, or add it to the &lt;code&gt;CFLAGS&lt;/code&gt; definition in your &lt;code&gt;Makefile&lt;/code&gt;. The correct value for this path is &lt;code&gt;$OTPROOT/lib/erl_interface-$EIVSN/include&lt;/code&gt;, where:</source>
          <target state="translated">コードをコンパイルするには、コマンドラインで適切な &lt;code&gt;-I&lt;/code&gt; 引数を指定するか、 &lt;code&gt;Makefile&lt;/code&gt; の &lt;code&gt;CFLAGS&lt;/code&gt; 定義に追加して、Cコンパイラが &lt;code&gt;erl_interface.h&lt;/code&gt; の場所を認識していることを確認します。このパスの正しい値は &lt;code&gt;$OTPROOT/lib/erl_interface-$EIVSN/include&lt;/code&gt; 。ここで、</target>
        </trans-unit>
        <trans-unit id="99dbaa9ef513face3ab175774b7916127ae86697" translate="yes" xml:space="preserve">
          <source>To complete the I/O server, we only need to read and write the table in an appropriate way:</source>
          <target state="translated">I/Oサーバーを完成させるためには、適当にテーブルを読み書きすればいいだけです。</target>
        </trans-unit>
        <trans-unit id="ef56703b3c226b895e39bdf18576e702cab5ae0b" translate="yes" xml:space="preserve">
          <source>To configure the Logger backend, use &lt;code&gt;Kernel configuration parameters&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#configuration_API&quot;&gt;configuration functions&lt;/a&gt;&lt;/code&gt; in the Logger API.</source>
          <target state="translated">ロガーバックエンドを &lt;code&gt;&lt;a href=&quot;#configuration_API&quot;&gt;configuration functions&lt;/a&gt;&lt;/code&gt; は、ロガーAPIの &lt;code&gt;Kernel configuration parameters&lt;/code&gt; または構成関数を使用します。</target>
        </trans-unit>
        <trans-unit id="a8abc4316358324e879aa4fb86c41abefacbe121" translate="yes" xml:space="preserve">
          <source>To connect to a distributed Erlang node, you must first initialize the connection routine with &lt;code&gt;&lt;a href=&quot;erl_connect#erl_connect_init&quot;&gt;erl_connect:erl_connect_init&lt;/a&gt;&lt;/code&gt;, which stores information, such as the hostname, node name, and IP address for later use:</source>
          <target state="translated">分散Erlangノードに接続するには、最初に &lt;code&gt;&lt;a href=&quot;erl_connect#erl_connect_init&quot;&gt;erl_connect:erl_connect_init&lt;/a&gt;&lt;/code&gt; で接続ルーチンを初期化する必要があります。これには、後で使用するためのホスト名、ノード名、IPアドレスなどの情報が格納されます。</target>
        </trans-unit>
        <trans-unit id="da53f52f9b6e989d7d98084c289e93041ec03817" translate="yes" xml:space="preserve">
          <source>To constrain the match, it is needed to replace some of the &lt;code&gt;'_'&lt;/code&gt; elements. The code for matching out all female employees looks as follows:</source>
          <target state="translated">一致を制限するには、 &lt;code&gt;'_'&lt;/code&gt; 要素の一部を置き換える必要があります。すべての女性従業員を一致させるためのコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="db8fca00f1d4d2a5725d8baaafde57fb1f7e09a3" translate="yes" xml:space="preserve">
          <source>To convert an error term returned from one of the functions above to a readable message, use function &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上記のいずれかの関数から返されたエラー項を読み取り可能なメッセージに変換するには、関数 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="746ad6da742f525d196ec4f846fc54c5b8d6665f" translate="yes" xml:space="preserve">
          <source>To copy text to the clipboard, use &lt;code&gt;Ctrl-C&lt;/code&gt;.</source>
          <target state="translated">テキストをクリップボードにコピーするには、 &lt;code&gt;Ctrl-C&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8f0c639143cf961891408084facf2efc28d6f4b6" translate="yes" xml:space="preserve">
          <source>To copy the selected text to the clipboard, either use &lt;code&gt;Ctrl-C&lt;/code&gt;, use the menu, or press the copy button in the toolbar.</source>
          <target state="translated">選択したテキストをクリップボードにコピーするには、 &lt;code&gt;Ctrl-C&lt;/code&gt; を使用するか、メニューを使用するか、ツールバーのコピーボタンを押します。</target>
        </trans-unit>
        <trans-unit id="b2f36469b72d764889b8bc2c05eb18e7c2e00c94" translate="yes" xml:space="preserve">
          <source>To create a list of binaries from an arbitrary iolist, use &lt;code&gt;erlang:iolist_to_iovec/1&lt;/code&gt;.</source>
          <target state="translated">任意のiolistからバイナリーのリストを作成するには、 &lt;code&gt;erlang:iolist_to_iovec/1&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b64ef8fa41b5eb9b9fbad8912a240355ac0b560d" translate="yes" xml:space="preserve">
          <source>To create a port:</source>
          <target state="translated">ポートを作成すること。</target>
        </trans-unit>
        <trans-unit id="c1b10e93b99ca718329a25a25398d8dc9f5d3821" translate="yes" xml:space="preserve">
          <source>To create the Mnesia tables, we use two records defined in &lt;code&gt;mod_auth.hrl&lt;/code&gt;, so that file must be included. &lt;code&gt;first_start/0&lt;/code&gt; creates a schema that specifies on which nodes the database is to reside. Then it starts Mnesia and creates the tables. The first argument is the name of the tables, the second argument is a list of options of how to create the table, see &lt;code&gt;mnesia(3)&lt;/code&gt;, documentation for more information. As the implementation of the &lt;code&gt;mod_auth_mnesia&lt;/code&gt; saves one row for each user, the type must be &lt;code&gt;bag&lt;/code&gt;. When the schema and the tables are created, function &lt;code&gt;mnesia:start/0&lt;/code&gt; is used to start Mnesia and waits for the tables to be loaded. Mnesia uses the directory specified as &lt;code&gt;mnesia_dir&lt;/code&gt; at startup if specified, otherwise Mnesia uses the current directory. For security reasons, ensure that the Mnesia tables are stored outside the document tree of the HTTP server. If they are placed in the directory which it protects, clients can download the tables. Only the Dets and Mnesia storage methods allow writing of dynamic user data to disk. &lt;code&gt;plain&lt;/code&gt; is a read only method.</source>
          <target state="translated">Mnesiaテーブルを作成するには、 &lt;code&gt;mod_auth.hrl&lt;/code&gt; で定義された2つのレコードを使用するため、そのファイルを含める必要があります。 &lt;code&gt;first_start/0&lt;/code&gt; は、データベースが常駐するノードを指定するスキーマを作成します。次に、Mnesiaを起動してテーブルを作成します。最初の引数はテーブルの名前で、2番目の引数はテーブルの作成方法のオプションのリストです。詳細は、ドキュメント &lt;code&gt;mnesia(3)&lt;/code&gt; を参照してください。 &lt;code&gt;mod_auth_mnesia&lt;/code&gt; の実装ではユーザーごとに1行が保存されるため、タイプは &lt;code&gt;bag&lt;/code&gt; である必要があります。スキーマとテーブルが作成されると、関数 &lt;code&gt;mnesia:start/0&lt;/code&gt; を使用してMnesiaが起動し、テーブルがロードされるのを待ちます。 Mnesiaは、次のように指定されたディレクトリを使用します &lt;code&gt;mnesia_dir&lt;/code&gt; 起動時にmnesia_dirが指定されている場合、指定されていない場合、Mnesiaは現在のディレクトリを使用します。セキュリティ上の理由から、MnesiaテーブルがHTTPサーバーのドキュメントツリーの外部に格納されていることを確認してください。それらが保護するディレクトリに配置されている場合、クライアントはテーブルをダウンロードできます。DetsおよびMnesiaストレージメソッドのみが、動的ユーザーデータをディスクに書き込むことができます。 &lt;code&gt;plain&lt;/code&gt; は読み取り専用の方法です。</target>
        </trans-unit>
        <trans-unit id="7026fff802f7dac35b82f566aac0d4c80c766528" translate="yes" xml:space="preserve">
          <source>To create zip archives, use function &lt;code&gt;&lt;a href=&quot;#zip-2&quot;&gt;zip/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#zip-2&quot;&gt;zip/3&lt;/a&gt;&lt;/code&gt;. They are also available as &lt;code&gt;create/2,3&lt;/code&gt;, to resemble the &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">zipアーカイブを作成するには、関数 &lt;code&gt;&lt;a href=&quot;#zip-2&quot;&gt;zip/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#zip-2&quot;&gt;zip/3&lt;/a&gt;&lt;/code&gt; を使用します。 &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; モジュールに似た &lt;code&gt;create/2,3&lt;/code&gt; としても利用できます。</target>
        </trans-unit>
        <trans-unit id="96ba6751b435aa130ce8000c31fb7a59eb14a8a4" translate="yes" xml:space="preserve">
          <source>To decide the first state the &lt;code&gt;Module:init(Args)&lt;/code&gt; callback function is called before any &lt;code&gt;&lt;a href=&quot;#Event%20Handler&quot;&gt;Event Handler&lt;/a&gt;&lt;/code&gt; is called. This function behaves like an event handler function, but gets its only argument &lt;code&gt;Args&lt;/code&gt; from the &lt;code&gt;gen_statem&lt;/code&gt;&lt;code&gt;start/3,4&lt;/code&gt; or &lt;code&gt;start_link/3,4&lt;/code&gt; function, and returns &lt;code&gt;{ok, State, Data}&lt;/code&gt; or &lt;code&gt;{ok, State, Data, Actions}&lt;/code&gt;. If you use the &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;postpone&lt;/a&gt;&lt;/code&gt; action from this function, that action is ignored, since there is no event to postpone.</source>
          <target state="translated">最初の状態を決定するには、 &lt;code&gt;&lt;a href=&quot;#Event%20Handler&quot;&gt;Event Handler&lt;/a&gt;&lt;/code&gt; が呼び出される前に、 &lt;code&gt;Module:init(Args)&lt;/code&gt; コールバック関数が呼び出されます。この関数はイベントハンドラー関数のように動作し &lt;code&gt;Args&lt;/code&gt; が、 &lt;code&gt;gen_statem&lt;/code&gt; &lt;code&gt;start/3,4&lt;/code&gt; または &lt;code&gt;start_link/3,4&lt;/code&gt; 関数から唯一の引数Argsを取得し、 &lt;code&gt;{ok, State, Data}&lt;/code&gt; または &lt;code&gt;{ok, State, Data, Actions}&lt;/code&gt; を返します。。この関数の &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;postpone&lt;/a&gt;&lt;/code&gt; アクションを使用すると、延期するイベントがないため、そのアクションは無視されます。</target>
        </trans-unit>
        <trans-unit id="51c111740de9350080c7972bf37d34610910e708" translate="yes" xml:space="preserve">
          <source>To define a release, create a &lt;strong&gt;release resource file&lt;/strong&gt;, or in short a &lt;code&gt;.rel&lt;/code&gt; file. In the file, specify the name and version of the release, which ERTS version it is based on, and which applications it consists of:</source>
          <target state="translated">リリースを定義するには、&lt;strong&gt;リリースリソースファイル&lt;/strong&gt;、つまり &lt;code&gt;.rel&lt;/code&gt; ファイルを作成します。ファイルで、リリースの名前とバージョン、ベースとなるERTSバージョン、およびそれで構成されるアプリケーションを指定します。</target>
        </trans-unit>
        <trans-unit id="7dcb9b11962f5e7cb3516154fef97049f24faad8" translate="yes" xml:space="preserve">
          <source>To define an application, an &lt;strong&gt;application specification&lt;/strong&gt; is created, which is put in an &lt;strong&gt;application resource file&lt;/strong&gt;, or in short an &lt;code&gt;.app&lt;/code&gt; file:</source>
          <target state="translated">アプリケーションを定義するために、&lt;strong&gt;アプリケーション仕様&lt;/strong&gt;が作成されます。これは、&lt;strong&gt;アプリケーションリソースファイル&lt;/strong&gt;、つまり &lt;code&gt;.app&lt;/code&gt; ファイルに配置されます。</target>
        </trans-unit>
        <trans-unit id="54b3619697604e99e71233bb1079a1597fb1c5a2" translate="yes" xml:space="preserve">
          <source>To define how to upgrade/downgrade between the current version and previous versions of an application, an &lt;strong&gt;application upgrade file&lt;/strong&gt;, or in short an &lt;code&gt;.appup&lt;/code&gt; file is created. The file is to be called &lt;code&gt;Application.appup&lt;/code&gt;, where &lt;code&gt;Application&lt;/code&gt; is the application name:</source>
          <target state="translated">アプリケーションの現在のバージョンと以前のバージョンの間でアップグレード/ダウングレードする方法を定義するために、&lt;strong&gt;アプリケーションアップグレードファイル&lt;/strong&gt;、つまり &lt;code&gt;.appup&lt;/code&gt; ファイルが作成されます。ファイルは &lt;code&gt;Application.appup&lt;/code&gt; と呼ばれます。ここで、 &lt;code&gt;Application&lt;/code&gt; はアプリケーション名です。</target>
        </trans-unit>
        <trans-unit id="f1125003b8abae474fb015968f66692981cd19a0" translate="yes" xml:space="preserve">
          <source>To define how to upgrade/downgrade between the new version and previous versions of a release, a &lt;strong&gt;release upgrade file&lt;/strong&gt;, or in short &lt;code&gt;relup&lt;/code&gt; file, is to be created.</source>
          <target state="translated">リリースの新しいバージョンと以前のバージョンの間でアップグレード/ダウングレードする方法を定義するには、&lt;strong&gt;リリースアップグレードファイル&lt;/strong&gt;、または簡単な &lt;code&gt;relup&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="1e010624d4e818c00508b53d915d93db2cfd9d3a" translate="yes" xml:space="preserve">
          <source>To detect that the server is not the intended one, the client must additionaly perform a</source>
          <target state="translated">サーバが意図したものではないことを検知するために、クライアントはさらに</target>
        </trans-unit>
        <trans-unit id="29f1578f8a4341b69585b80b12a72f76a9569382" translate="yes" xml:space="preserve">
          <source>To dig deeper into the general results, or the result of a specific test case, the operator can do so by following the links in the HTML presentation and read the major or minor log files. The &quot;all_runs.html&quot; page is a good starting point. It is located in &lt;code&gt;logdir&lt;/code&gt; and contains a link to each test run, including a quick overview (with date and time, node name, number of tests, test names, and test result totals).</source>
          <target state="translated">一般的な結果、または特定のテストケースの結果をさらに詳しく調べるために、オペレーターはHTMLプレゼンテーションのリンクをたどり、メジャーまたはマイナーのログファイルを読むことでそれを行うことができます。「all_runs.html」ページが出発点として適しています。これは &lt;code&gt;logdir&lt;/code&gt; にあり、簡単な概要（日付と時刻、ノード名、テスト数、テスト名、テスト結果の合計）を含む、各テスト実行へのリンクが含まれています。</target>
        </trans-unit>
        <trans-unit id="a47ea787070856206ef8e8c44cdc817088453a80" translate="yes" xml:space="preserve">
          <source>To disable all electric commands set the variable &lt;code&gt;erlang-electric-commands&lt;/code&gt; to the empty list. In short, place the following line in your &lt;code&gt;.emacs&lt;/code&gt;-file:</source>
          <target state="translated">すべての電気コマンドを無効にするには、変数 &lt;code&gt;erlang-electric-commands&lt;/code&gt; を空のリストに設定します。簡単に言うと、次の行を &lt;code&gt;.emacs&lt;/code&gt; -ファイルに配置します。</target>
        </trans-unit>
        <trans-unit id="2719f4e1a729a417c71b36c21728b88e49361422" translate="yes" xml:space="preserve">
          <source>To disable certain modes, do the following:</source>
          <target state="translated">特定のモードを無効にするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="7d843b983a258077823d6e0bf23f5a51462fef79" translate="yes" xml:space="preserve">
          <source>To disable the automatic compilation feature, use flag &lt;code&gt;-no_auto_compile&lt;/code&gt; with &lt;code&gt;ct_run&lt;/code&gt;, or option &lt;code&gt;{auto_compile,false}&lt;/code&gt; with &lt;code&gt;ct:run_test/1&lt;/code&gt;. With automatic compilation disabled, the user is responsible for compiling the test suite modules (and any help modules) before the test run. If the modules cannot be loaded from the local file system during startup of &lt;code&gt;Common Test&lt;/code&gt;, the user must preload the modules before starting the test. &lt;code&gt;Common Test&lt;/code&gt; only verifies that the specified test suites exist (that is, that they are, or can be, loaded). This is useful, for example, if the test suites are transferred and loaded as binaries through RPC from a remote node.</source>
          <target state="translated">自動コンパイル機能を無効にするには、フラグ &lt;code&gt;-no_auto_compile&lt;/code&gt; と &lt;code&gt;ct_run&lt;/code&gt; を使用するか、オプション &lt;code&gt;{auto_compile,false}&lt;/code&gt; と &lt;code&gt;ct:run_test/1&lt;/code&gt; を使用します。自動コンパイルが無効になっている場合、ユーザーはテスト実行前にテストスイートモジュール（およびヘルプモジュール）をコンパイルする必要があります。 &lt;code&gt;Common Test&lt;/code&gt; の起動時にローカルファイルシステムからモジュールをロードできない場合、ユーザーはテストを開始する前にモジュールをプリロードする必要があります。 &lt;code&gt;Common Test&lt;/code&gt; は、指定されたテストスイートが存在する（つまり、それらがロードされている、またはロードできる）ことのみを確認します。これは、たとえば、テストスイートがRPCを介してリモートノードからバイナリとして転送およびロードされる場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="ceb4119cc35a0a33e9fed4f8110e9358a175961e" translate="yes" xml:space="preserve">
          <source>To disconnect from the shell without exiting the Erlang system, type &lt;code&gt;Ctrl-D&lt;/code&gt;.</source>
          <target state="translated">Erlangシステムを終了せずにシェルから切断するには、 &lt;code&gt;Ctrl-D&lt;/code&gt; を入力します。</target>
        </trans-unit>
        <trans-unit id="b548ad5d8837c627142ce75e81cde50b52ba7141" translate="yes" xml:space="preserve">
          <source>To distinguish trace logs produced with this tool from other logs, option &lt;code&gt;file&lt;/code&gt; is used in &lt;code&gt;&lt;a href=&quot;ttb#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt;. The logs are therefore fetched to a directory named &lt;code&gt;ttb_upload_debug_log-YYYYMMDD-HHMMSS&lt;/code&gt;</source>
          <target state="translated">このツールで生成されたトレースログを他のログと区別するために、オプション &lt;code&gt;file&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;ttb#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt; で使用されます。したがって、ログは &lt;code&gt;ttb_upload_debug_log-YYYYMMDD-HHMMSS&lt;/code&gt; という名前のディレクトリにフェッチされます</target>
        </trans-unit>
        <trans-unit id="3e40468ed8befabe466118a08bf6fc28c0f6c6eb" translate="yes" xml:space="preserve">
          <source>To do this, create a &lt;code&gt;&lt;a href=&quot;#res_file&quot;&gt;release resource file&lt;/a&gt;&lt;/code&gt; that defines which applications are included in the release.</source>
          <target state="translated">これを行うには、リリースに含めるアプリケーションを定義する &lt;code&gt;&lt;a href=&quot;#res_file&quot;&gt;release resource file&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="71c169e0b7cdb28847a1d261315129b8416e6027" translate="yes" xml:space="preserve">
          <source>To do this, create an &lt;code&gt;&lt;a href=&quot;#callback_module&quot;&gt;application callback module&lt;/a&gt;&lt;/code&gt;, and describe how the application is to be started and stopped.</source>
          <target state="translated">これを行うには、 &lt;code&gt;&lt;a href=&quot;#callback_module&quot;&gt;application callback module&lt;/a&gt;&lt;/code&gt; 作成し、アプリケーションの起動方法と停止方法を記述します。</target>
        </trans-unit>
        <trans-unit id="24f741a20f0106dade011b163f1322e4510ccc13" translate="yes" xml:space="preserve">
          <source>To document function interfaces</source>
          <target state="translated">関数インタフェースを文書化する</target>
        </trans-unit>
        <trans-unit id="4e2effe3d108d7692e70e0242432ef9323088c3f" translate="yes" xml:space="preserve">
          <source>To downgrade from &lt;code&gt;Vsn&lt;/code&gt; to &lt;code&gt;FromVsn&lt;/code&gt;, &lt;code&gt;install_release&lt;/code&gt; must be called again:</source>
          <target state="translated">&lt;code&gt;Vsn&lt;/code&gt; から &lt;code&gt;FromVsn&lt;/code&gt; にダウングレードするには、 &lt;code&gt;install_release&lt;/code&gt; を再度呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="c857b1910cd745feb809b3e36bb979959ad34032" translate="yes" xml:space="preserve">
          <source>To each module using records, a pseudo function is added during compilation to obtain information about records:</source>
          <target state="translated">レコードを使用する各モジュールには、コンパイル時に疑似関数を追加してレコードの情報を取得します。</target>
        </trans-unit>
        <trans-unit id="aa7093d0b40db64d8d5dbb29fff9e15755ac8d7c" translate="yes" xml:space="preserve">
          <source>To effectively perform a batch of similar queries, you can use parameterized queries. This means that you in your SQL query string will mark the places that usually would contain values with question marks and then provide lists of values for each parameter. For instance you can use this to insert multiple rows into the &lt;code&gt;EMPLOYEE&lt;/code&gt; table while executing only a single SQL statement, for example code see &lt;code&gt;&lt;a href=&quot;getting_started#param_query&quot;&gt;&quot;Using the Erlang API&quot;&lt;/a&gt;&lt;/code&gt; section in the &quot;Getting Started&quot; chapter.</source>
          <target state="translated">同様のクエリのバッチを効果的に実行するには、パラメーター化されたクエリを使用できます。つまり、SQLクエリ文字列で、通常は値が含まれる場所に疑問符を付け、各パラメーターの値のリストを提供します。たとえば、これを使用して、単一のSQLステートメントのみを実行しながら、 &lt;code&gt;EMPLOYEE&lt;/code&gt; テーブルに複数の行を挿入できます。たとえば、コードの例は、「はじめに」の章の「 &lt;code&gt;&lt;a href=&quot;getting_started#param_query&quot;&gt;&quot;Using the Erlang API&quot;&lt;/a&gt;&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4b87466d719f55a7d0bc6167a3744c10376e2896" translate="yes" xml:space="preserve">
          <source>To enable inlining of list functions, use option &lt;code&gt;inline_list_funcs&lt;/code&gt;.</source>
          <target state="translated">リスト関数のインライン展開を有効にするには、オプション &lt;code&gt;inline_list_funcs&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="51f30cb208852b09d381f6f12d3f9662837e7b58" translate="yes" xml:space="preserve">
          <source>To enable inlining, either use the option &lt;code&gt;inline&lt;/code&gt; to let the compiler decide which functions to inline, or &lt;code&gt;{inline,[{Name,Arity},...]}&lt;/code&gt; to have the compiler inline all calls to the given functions. If the option is given inside a &lt;code&gt;compile&lt;/code&gt; directive in an Erlang module, &lt;code&gt;{Name,Arity}&lt;/code&gt; can be written as &lt;code&gt;Name/Arity&lt;/code&gt;.</source>
          <target state="translated">インライン化を有効にするには、オプション &lt;code&gt;inline&lt;/code&gt; を使用して、コンパイラーにインライン化する関数を決定させるか、 &lt;code&gt;{inline,[{Name,Arity},...]}&lt;/code&gt; を使用して、コンパイラーに特定の関数へのすべての呼び出しをインライン化させます。Erlangモジュールの &lt;code&gt;compile&lt;/code&gt; ディレクティブ内でオプションが指定されている場合、 &lt;code&gt;{Name,Arity}&lt;/code&gt; は &lt;code&gt;Name/Arity&lt;/code&gt; として記述できます。</target>
        </trans-unit>
        <trans-unit id="85f19bd3dcfaf9ef3d9cd6caa0e986c9a4690183" translate="yes" xml:space="preserve">
          <source>To enable or disable &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#builtin_cths&quot;&gt;Built-in Common Test Hooks&lt;/a&gt;&lt;/code&gt;. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">有効または無効にするには &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#builtin_cths&quot;&gt;Built-in Common Test Hooks&lt;/a&gt;&lt;/code&gt; 。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="82cdfffdcb7bb12d82a554ed4fb4604dfb3bff2f" translate="yes" xml:space="preserve">
          <source>To enable or disable time correction, pass command-line argument &lt;code&gt;&lt;a href=&quot;erl#+c&quot;&gt;+c [true|false]&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">時間補正を有効または無効にするには、コマンドライン引数 &lt;code&gt;&lt;a href=&quot;erl#+c&quot;&gt;+c [true|false]&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="708713ed825ecbbe1d0ddcd36ee2857e998c3c1b" translate="yes" xml:space="preserve">
          <source>To enable the full power of Merl, your module needs to include the Merl header file:</source>
          <target state="translated">Merlの能力をフルに発揮させるためには、モジュールにMerlヘッダファイルを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="8d53019e25d31ae87446a8faff92ab534fbdf049" translate="yes" xml:space="preserve">
          <source>To encode a list, without knowing the arity in advance:</source>
          <target state="translated">アリティを事前に知らずにリストをエンコードする。</target>
        </trans-unit>
        <trans-unit id="6cd4ebf865b6fcb86e3b3c3d86118b3cbc2de974" translate="yes" xml:space="preserve">
          <source>To ensure that &lt;code&gt;Common Test&lt;/code&gt; does not start executing tests, or closes its log files and shuts down, before the external application is ready for it, &lt;code&gt;Common Test&lt;/code&gt; can be synchronized with the application. During startup and shutdown, &lt;code&gt;Common Test&lt;/code&gt; can be suspended, simply by having a CTH evaluate a &lt;code&gt;receive&lt;/code&gt; expression in the init- or terminate function. The macros &lt;code&gt;?CT_HOOK_INIT_PROCESS&lt;/code&gt; (the process executing the hook init function) and &lt;code&gt;?CT_HOOK_TERMINATE_PROCESS&lt;/code&gt; (the process executing the hook terminate function) each specifies the name of the correct &lt;code&gt;Common Test&lt;/code&gt; process to send a message to. This is done to return from the &lt;code&gt;receive&lt;/code&gt;. These macros are defined in &lt;code&gt;ct.hrl&lt;/code&gt;.</source>
          <target state="translated">ことを確認するために、 &lt;code&gt;Common Test&lt;/code&gt; 、外部アプリケーションがそのための準備ができる前に、テストの実行を開始しない、またはそのログファイルと閉まりがダウンして閉じ、 &lt;code&gt;Common Test&lt;/code&gt; アプリケーションと同期させることができます。起動時とシャットダウン時に、CTHにinit 関数またはterminate関数の &lt;code&gt;receive&lt;/code&gt; 式を評価させるだけで、 &lt;code&gt;Common Test&lt;/code&gt; を一時停止できます。マクロ &lt;code&gt;?CT_HOOK_INIT_PROCESS&lt;/code&gt; （フック初期化関数を実行するプロセス）および &lt;code&gt;?CT_HOOK_TERMINATE_PROCESS&lt;/code&gt; （フック終了関数を実行するプロセス）はそれぞれ、メッセージを送信する正しい &lt;code&gt;Common Test&lt;/code&gt; プロセスの名前を指定します。これは、 &lt;code&gt;receive&lt;/code&gt; から戻るために行われます。これらのマクロは &lt;code&gt;ct.hrl&lt;/code&gt; で定義されています。</target>
        </trans-unit>
        <trans-unit id="d6a3ca4567317dc34953b8a7c1cc3b757bbc4816" translate="yes" xml:space="preserve">
          <source>To ensure that a driver instance always uses the same thread, the following call can be used:</source>
          <target state="translated">ドライバのインスタンスが常に同じスレッドを使用するようにするには、以下の呼び出しを使用することができます。</target>
        </trans-unit>
        <trans-unit id="e8b277a4b4779423015664e7a3f401ea54aeecd5" translate="yes" xml:space="preserve">
          <source>To ensure that printouts to &lt;code&gt;stdout&lt;/code&gt; (or printouts made with &lt;code&gt;&lt;a href=&quot;ct#log-2&quot;&gt;ct:log/2,3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;ct:pal,2,3&lt;/code&gt;) get written to the test case log file, and not to the &lt;code&gt;Common Test&lt;/code&gt; framework log, you can synchronize with the &lt;code&gt;Common Test&lt;/code&gt; server by matching on evvents &lt;code&gt;tc_start&lt;/code&gt; and &lt;code&gt;tc_done&lt;/code&gt;. In the period between these events, all I/O is directed to the test case log file. These events are sent synchronously to avoid potential timing problems (for example, that the test case log file is closed just before an I/O message from an external process gets through). Knowing this, you need to be careful that your &lt;code&gt;handle_event/2&lt;/code&gt; callback function does not stall the test execution, possibly causing unexpected behavior as a result.</source>
          <target state="translated">&lt;code&gt;stdout&lt;/code&gt; （または &lt;code&gt;&lt;a href=&quot;ct#log-2&quot;&gt;ct:log/2,3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;ct:pal,2,3&lt;/code&gt; 作成された印刷）が、 &lt;code&gt;Common Test&lt;/code&gt; フレームワークログではなく、テストケースログファイルに確実に書き込まれるようにするには、evvents &lt;code&gt;tc_start&lt;/code&gt; と &lt;code&gt;tc_done&lt;/code&gt; でのマッチングによる &lt;code&gt;Common Test&lt;/code&gt; サーバー。これらのイベントの間の期間では、すべてのI / Oがテストケースログファイルに送信されます。これらのイベントは、潜在的なタイミングの問題を回避するために同期的に送信されます（たとえば、外部プロセスからのI / Oメッセージが通過する直前にテストケースのログファイルが閉じられるなど）。これを知って、あなたはあなたの &lt;code&gt;handle_event/2&lt;/code&gt; に注意する必要があります コールバック関数はテストの実行を停止せず、結果として予期しない動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="a63e4ff906295f7807af4b654281729a99f4d599" translate="yes" xml:space="preserve">
          <source>To execute group &lt;code&gt;tests1&lt;/code&gt; twice with different properties for &lt;code&gt;tests2&lt;/code&gt; each time:</source>
          <target state="translated">グループを実行するには &lt;code&gt;tests1&lt;/code&gt; ための異なる特性で二回 &lt;code&gt;tests2&lt;/code&gt; たび：</target>
        </trans-unit>
        <trans-unit id="7239843e8d90d77d86be2ae7b38276b2e33faca1" translate="yes" xml:space="preserve">
          <source>To execute the test cases in the recent test suite, type the following on the UNIX/Linux command line (assuming that the suite module is in the current working directory):</source>
          <target state="translated">最近のテストスイートのテストケースを実行するには、UNIX/Linuxのコマンドラインで以下のように入力します (スイートモジュールが現在の作業ディレクトリにあると仮定して)。</target>
        </trans-unit>
        <trans-unit id="15b464ff8a64913edd497cc9c55da6f1268e3b00" translate="yes" xml:space="preserve">
          <source>To explain how it works, let us examine the following code line by line:</source>
          <target state="translated">その仕組みを説明するために、以下のコードを一行ずつ見てみましょう。</target>
        </trans-unit>
        <trans-unit id="6ace97c5b62d1ba123d6323684c350a22b583d3a" translate="yes" xml:space="preserve">
          <source>To extract all files from a tar file, use function &lt;code&gt;&lt;a href=&quot;#extract-1&quot;&gt;extract/1&lt;/a&gt;&lt;/code&gt;. To extract only some files or to be able to specify some more options, use function &lt;code&gt;&lt;a href=&quot;#extract-2&quot;&gt;extract/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">tarファイルからすべてのファイルを抽出するには、関数 &lt;code&gt;&lt;a href=&quot;#extract-1&quot;&gt;extract/1&lt;/a&gt;&lt;/code&gt; を使用します。一部のファイルのみを抽出するか、いくつかのオプションを指定できるようにするには、関数 &lt;code&gt;&lt;a href=&quot;#extract-2&quot;&gt;extract/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0d79465290c25ae2d243af5890aece9f3a5c6794" translate="yes" xml:space="preserve">
          <source>To extract files from a zip archive, use function &lt;code&gt;&lt;a href=&quot;#unzip-1&quot;&gt;unzip/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#unzip-2&quot;&gt;unzip/2&lt;/a&gt;&lt;/code&gt;. They are also available as &lt;code&gt;extract/1,2&lt;/code&gt;, to resemble the &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">zipアーカイブからファイルを抽出するには、関数 &lt;code&gt;&lt;a href=&quot;#unzip-1&quot;&gt;unzip/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#unzip-2&quot;&gt;unzip/2&lt;/a&gt;&lt;/code&gt; を使用します。彼らはまた、利用可能である &lt;code&gt;extract/1,2&lt;/code&gt; 類似するように、 &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; のモジュール。</target>
        </trans-unit>
        <trans-unit id="49b523abf1ecfbea37ac71cc8ad901ada87596e3" translate="yes" xml:space="preserve">
          <source>To facilitate addition or removal of algorithms the option &lt;code&gt;modify_algorithms&lt;/code&gt; is available. See the &lt;code&gt;&lt;a href=&quot;ssh#type-modify_algorithms_common_option&quot;&gt;Reference Manual&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">アルゴリズムの追加または削除を容易にするために、オプション &lt;code&gt;modify_algorithms&lt;/code&gt; を使用できます。詳細は &lt;code&gt;&lt;a href=&quot;ssh#type-modify_algorithms_common_option&quot;&gt;Reference Manual&lt;/a&gt;&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="318d261f2e9e44898ab106149f1818df3611a4d0" translate="yes" xml:space="preserve">
          <source>To facilitate for instance counting of failed tries, the &lt;code&gt;State&lt;/code&gt; variable could be used. This state is per connection only. The first time the pwdfun is called for a connection, the &lt;code&gt;State&lt;/code&gt; variable has the value &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">たとえば失敗した試行のカウントを容易にするために、 &lt;code&gt;State&lt;/code&gt; 変数を使用できます。この状態は接続ごとのみです。接続に対して最初にpwdfunが呼び出されたとき、 &lt;code&gt;State&lt;/code&gt; 変数の値は &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fb30040c24cb4398d4f306c6f75be49b3309b50e" translate="yes" xml:space="preserve">
          <source>To facilitate incremental MIB implementation, the tool can generate a prototype implementation for a whole MIB, or parts thereof. This allows different MIBs and management applications to be developed at the same time.</source>
          <target state="translated">インクリメンタルなMIB実装を容易にするために、ツールはMIB全体またはその一部のプロトタイプ実装を生成することができます。これにより、異なるMIBと管理アプリケーションを同時に開発することができます。</target>
        </trans-unit>
        <trans-unit id="c2bbbdeeda7bd5404449757f8d9770ca2ef7aaa9" translate="yes" xml:space="preserve">
          <source>To filter only by dates, specify the empty list as the &lt;code&gt;Filters&lt;/code&gt; parameter.</source>
          <target state="translated">日付のみでフィルタリングするには、 &lt;code&gt;Filters&lt;/code&gt; パラメーターとして空のリストを指定します。</target>
        </trans-unit>
        <trans-unit id="630e50a14a964d68d3d5576b2cd371a11e3b187e" translate="yes" xml:space="preserve">
          <source>To find &lt;code&gt;.erl&lt;/code&gt; or &lt;code&gt;.hrl&lt;/code&gt; in all applications &lt;code&gt;src&lt;/code&gt; directories, use either of the following lines:</source>
          <target state="translated">すべてのアプリケーションの &lt;code&gt;src&lt;/code&gt; ディレクトリで &lt;code&gt;.erl&lt;/code&gt; または &lt;code&gt;.hrl&lt;/code&gt; を見つけるには、次のいずれかの行を使用します。</target>
        </trans-unit>
        <trans-unit id="a6396773c2bde8a4d52d39cd61a041b4f1f183b7" translate="yes" xml:space="preserve">
          <source>To find all &lt;code&gt;.beam&lt;/code&gt; files in all applications, use the following line:</source>
          <target state="translated">すべてのアプリケーションですべての &lt;code&gt;.beam&lt;/code&gt; ファイルを検索するには、次の行を使用します。</target>
        </trans-unit>
        <trans-unit id="20cf9c172afcf3da74dfc71cb0f3fcae5974105f" translate="yes" xml:space="preserve">
          <source>To find all &lt;code&gt;.erl&lt;/code&gt; or &lt;code&gt;.hrl&lt;/code&gt; files in any subdirectory:</source>
          <target state="translated">サブディレクトリ内のすべての &lt;code&gt;.erl&lt;/code&gt; または &lt;code&gt;.hrl&lt;/code&gt; ファイルを検索するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="7ed6cec65dd2913192c7cb022d1a0950d0fa1dc6" translate="yes" xml:space="preserve">
          <source>To find all &lt;code&gt;.erl&lt;/code&gt; or &lt;code&gt;.hrl&lt;/code&gt; files in either &lt;code&gt;src&lt;/code&gt; or &lt;code&gt;include&lt;/code&gt; directories:</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; または &lt;code&gt;include&lt;/code&gt; ディレクトリのいずれかですべての &lt;code&gt;.erl&lt;/code&gt; または &lt;code&gt;.hrl&lt;/code&gt; ファイルを検索するには：</target>
        </trans-unit>
        <trans-unit id="fccdf7c91c9fff2872abc1dbafd75d06a060282b" translate="yes" xml:space="preserve">
          <source>To find all &lt;code&gt;.hrl&lt;/code&gt; files in &lt;code&gt;src&lt;/code&gt; or &lt;code&gt;include&lt;/code&gt; directories:</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; または &lt;code&gt;include&lt;/code&gt; ディレクトリー内のすべての &lt;code&gt;.hrl&lt;/code&gt; ファイルを検索するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="8e72309f663e0cdb8ebe00ece9160cd743a20ac1" translate="yes" xml:space="preserve">
          <source>To find out which data types will be returned for the columns in a table use the function &lt;code&gt;&lt;a href=&quot;odbc#describe_table&quot;&gt;describe_table/[2,3]&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">テーブルの列に返されるデータ型を見つけるには、関数 &lt;code&gt;&lt;a href=&quot;odbc#describe_table&quot;&gt;describe_table/[2,3]&lt;/a&gt;&lt;/code&gt; を使用します</target>
        </trans-unit>
        <trans-unit id="df081f6643e87b8a4d20937b6cf7036fe456bdf3" translate="yes" xml:space="preserve">
          <source>To find preceding keys in the table, use &lt;code&gt;&lt;a href=&quot;#prev-2&quot;&gt;prev/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブル内の先行するキーを見つけるには、 &lt;code&gt;&lt;a href=&quot;#prev-2&quot;&gt;prev/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bab05c393dca1da866e4258e15bc30ee1a82d0d1" translate="yes" xml:space="preserve">
          <source>To find subsequent keys in the table, use &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブル内の後続のキーを見つけるには、 &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5305b16b9a4a45c3c66348bdacc0a4e5b3a4971f" translate="yes" xml:space="preserve">
          <source>To find the first key in the table, use &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブルの最初のキーを見つけるには、 &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f84576968a9f5a5747d5c908246715868508fa22" translate="yes" xml:space="preserve">
          <source>To find the last key in the table, use &lt;code&gt;&lt;a href=&quot;#last-1&quot;&gt;last/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブルの最後のキーを見つけるには、 &lt;code&gt;&lt;a href=&quot;#last-1&quot;&gt;last/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b08cebc24b1775a65769e106895c5039d3db4448" translate="yes" xml:space="preserve">
          <source>To fold a function over all files in a zip archive, use function &lt;code&gt;&lt;a href=&quot;#foldl-3&quot;&gt;foldl/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数をzipアーカイブ内のすべてのファイルに折りたたむには、関数 &lt;code&gt;&lt;a href=&quot;#foldl-3&quot;&gt;foldl/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3107d752335f18f59b4878dac8c20e1cc44001a3" translate="yes" xml:space="preserve">
          <source>To force Unicode filename translation mode on systems where this is not the default was considered experimental in Erlang/OTP R14B01. This was because the initial implementation did not ignore wrongly encoded filenames, so that raw filenames could spread unexpectedly throughout the system. As from Erlang/OTP R16B, the wrongly encoded filenames are only retrieved by special functions (such as &lt;code&gt;file:list_dir_all/1&lt;/code&gt;). Since the impact on existing code is therefore much lower it is now supported. Unicode filename translation is expected to be default in future releases.</source>
          <target state="translated">これがデフォルトではないシステムでUnicodeファイル名変換モードを強制することは、Erlang / OTP R14B01では実験的なものと見なされていました。これは、初期の実装では誤ってエンコードされたファイル名が無視されなかったため、生のファイル名がシステム全体に予期せず広がる可能性があったためです。Erlang / OTP R16Bから、誤ってエンコードされたファイル名は特別な関数（ &lt;code&gt;file:list_dir_all/1&lt;/code&gt; など）によってのみ取得されます。したがって、既存のコードへの影響ははるかに少ないため、現在サポートされています。Unicodeファイル名変換は、将来のリリースでデフォルトになる予定です。</target>
        </trans-unit>
        <trans-unit id="286ba4fce2df7e992d24f0fa54be1d66081e5721" translate="yes" xml:space="preserve">
          <source>To format the printout according to a user-specific HTML Style Sheet (CSS).</source>
          <target state="translated">ユーザー固有のHTMLスタイルシート(CSS)に従ってプリントアウトをフォーマットする。</target>
        </trans-unit>
        <trans-unit id="d829ca082ad3db2ea55b112c3bcb9aa6980d21fb" translate="yes" xml:space="preserve">
          <source>To forsee the effect of an option there is an experimental function &lt;code&gt;ssh:chk_algos_opts(Opts)&lt;/code&gt;. It mangles the options &lt;code&gt;preferred_algorithms&lt;/code&gt; and &lt;code&gt;modify_algorithms&lt;/code&gt; in the same way as &lt;code&gt;ssh:dameon&lt;/code&gt;, &lt;code&gt;ssh:connect&lt;/code&gt; and their friends does.</source>
          <target state="translated">オプションの効果を予測するには、実験的な関数 &lt;code&gt;ssh:chk_algos_opts(Opts)&lt;/code&gt; があります。 &lt;code&gt;ssh:dameon&lt;/code&gt; 、 &lt;code&gt;ssh:connect&lt;/code&gt; およびそれらの友達が行うのと同じ方法で、オプション &lt;code&gt;preferred_algorithms&lt;/code&gt; と &lt;code&gt;modify_algorithms&lt;/code&gt; をマングルします。</target>
        </trans-unit>
        <trans-unit id="6dec9bf90ad555856d14e7f8a0bcc0b6c2749f95" translate="yes" xml:space="preserve">
          <source>To fully understand how to configure the algorithms, it is essential to have a basic understanding of the SSH protocol and how OTP SSH app handles the corresponding items</source>
          <target state="translated">アルゴリズムの設定方法を完全に理解するためには、SSH プロトコルと OTP SSH アプリが対応する項目をどのように扱うのかを基本的に理解しておくことが不可欠です。</target>
        </trans-unit>
        <trans-unit id="105f7930b5d0bd6dbe4b596f6e5e1aa3c7bab464" translate="yes" xml:space="preserve">
          <source>To gain performance by using the SMP emulator, your application &lt;strong&gt;must have more than one runnable Erlang process&lt;/strong&gt; most of the time. Otherwise, the Erlang emulator can still only run one Erlang process at the time, but you must still pay the overhead for locking. Although Erlang/OTP tries to reduce the locking overhead as much as possible, it will never become exactly zero.</source>
          <target state="translated">SMPエミュレーターを使用してパフォーマンスを得るには、ほとんどの&lt;strong&gt;場合&lt;/strong&gt;、アプリケーションに&lt;strong&gt;複数の実行可能なErlangプロセスが必要&lt;/strong&gt;です。それ以外の場合、Erlangエミュレータは一度に1つのErlangプロセスしか実行できませんが、ロックのためのオーバーヘッドを支払う必要があります。Erlang / OTPはロックのオーバーヘッドを可能な限り削減しようとしますが、完全にゼロになることは決してありません。</target>
        </trans-unit>
        <trans-unit id="2cbd28c322c2b7823640cb5d04b4000794237448" translate="yes" xml:space="preserve">
          <source>To get an overview of the concepts and operation of &lt;code&gt;gen_statem&lt;/code&gt;, do read the &lt;code&gt;gen_statem&amp;nbsp;Behaviour&lt;/code&gt; in &lt;code&gt;OTP Design Principles&lt;/code&gt; which frequently links back to this reference manual to avoid containing detailed facts that may rot by age.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; の概念と操作の概要を理解するには、このリファレンスマニュアルに頻繁にリンクしている &lt;code&gt;OTP Design Principles&lt;/code&gt; &lt;code&gt;gen_statem&amp;nbsp;Behaviour&lt;/code&gt; を読んで、古くなった詳細な事実を含まないようにしてください。</target>
        </trans-unit>
        <trans-unit id="01d79833ca3942345f121a64dcc3d55c1d0c6500" translate="yes" xml:space="preserve">
          <source>To get information about a PLT, use the following option:</source>
          <target state="translated">PLTに関する情報を取得するには、以下のオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="d1d5a6ae5a2a64c460f8242067e0ee912a4a4259" translate="yes" xml:space="preserve">
          <source>To get information about the Erlang runtime system's source of OS monotonic time, call &lt;code&gt;&lt;a href=&quot;erlang#system_info_os_monotonic_time_source&quot;&gt;erlang:system_info(os_monotonic_time_source)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ErlangランタイムシステムのOS単調時間のソースに関する情報を取得するには、 &lt;code&gt;&lt;a href=&quot;erlang#system_info_os_monotonic_time_source&quot;&gt;erlang:system_info(os_monotonic_time_source)&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f1abf6bacf41753f2d4e4f3e187da0b6ca761589" translate="yes" xml:space="preserve">
          <source>To get information about the Erlang runtime system's source of OS system time, call &lt;code&gt;&lt;a href=&quot;erlang#system_info_os_system_time_source&quot;&gt;erlang:system_info(os_system_time_source)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ErlangランタイムシステムのOSシステム時間のソースに関する情報を取得するには、 &lt;code&gt;&lt;a href=&quot;erlang#system_info_os_system_time_source&quot;&gt;erlang:system_info(os_system_time_source)&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b209da3c80686caad1fbe93f4b143a75dbb826a1" translate="yes" xml:space="preserve">
          <source>To get log events on the same format as produced by &lt;code&gt;error_logger_tty_h&lt;/code&gt; and &lt;code&gt;error_logger_file_h&lt;/code&gt;, use the default formatter, &lt;code&gt;logger_formatter&lt;/code&gt;, with configuration parameter &lt;code&gt;legacy_header&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. This is the default configuration of the &lt;code&gt;default&lt;/code&gt; handler started by Kernel.</source>
          <target state="translated">&lt;code&gt;error_logger_tty_h&lt;/code&gt; および &lt;code&gt;error_logger_file_h&lt;/code&gt; によって生成されたものと同じ形式のログイベントを取得するには、デフォルトのフォーマッターである &lt;code&gt;logger_formatter&lt;/code&gt; を使用し、構成パラメーター &lt;code&gt;legacy_header&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。これは、カーネルによって開始される &lt;code&gt;default&lt;/code&gt; ハンドラーのデフォルト構成です。</target>
        </trans-unit>
        <trans-unit id="51cf577b00fc8216155e456c21c9c0183f56b93f" translate="yes" xml:space="preserve">
          <source>To get started, the least you need to do is to start a tracer with &lt;code&gt;&lt;a href=&quot;ttb#tracer-0&quot;&gt;ttb:tracer/0,1,2&lt;/a&gt;&lt;/code&gt;, and set the required trace flags on the processes you want to trace with &lt;code&gt;&lt;a href=&quot;ttb#p-2&quot;&gt;ttb:p/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">開始するには、少なくとも &lt;code&gt;&lt;a href=&quot;ttb#tracer-0&quot;&gt;ttb:tracer/0,1,2&lt;/a&gt;&lt;/code&gt; でトレーサーを開始し、 &lt;code&gt;&lt;a href=&quot;ttb#p-2&quot;&gt;ttb:p/2&lt;/a&gt;&lt;/code&gt; でトレースするプロセスに必要なトレースフラグを設定するだけです。</target>
        </trans-unit>
        <trans-unit id="fc4b00be659493772c3eb90fac788afdac82d1da" translate="yes" xml:space="preserve">
          <source>To get started, you should read about the &lt;code&gt;&lt;a href=&quot;#type-document&quot;&gt;document()&lt;/a&gt;&lt;/code&gt; data type; the main constructor functions: &lt;code&gt;&lt;a href=&quot;#text-1&quot;&gt;text/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#above-2&quot;&gt;above/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#beside-2&quot;&gt;beside/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#nest-2&quot;&gt;nest/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#sep-1&quot;&gt;sep/1&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#par-2&quot;&gt;par/2&lt;/a&gt;&lt;/code&gt;; and the main layout function &lt;code&gt;&lt;a href=&quot;#format-3&quot;&gt;format/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">はじめに、 &lt;code&gt;&lt;a href=&quot;#type-document&quot;&gt;document()&lt;/a&gt;&lt;/code&gt; データ型について読む必要があります。主なコンストラクタ関数： &lt;code&gt;&lt;a href=&quot;#text-1&quot;&gt;text/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#above-2&quot;&gt;above/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#beside-2&quot;&gt;beside/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#nest-2&quot;&gt;nest/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#sep-1&quot;&gt;sep/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#par-2&quot;&gt;par/2&lt;/a&gt;&lt;/code&gt; ; そしてメインのレイアウト関数 &lt;code&gt;&lt;a href=&quot;#format-3&quot;&gt;format/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80a72b65fea86a98c851ba990e410aac5fd9f4fb" translate="yes" xml:space="preserve">
          <source>To get the consistent behavior of killing ports when the last &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; unloads, use driver option &lt;code&gt;kill_ports&lt;/code&gt; when loading the driver instead.</source>
          <target state="translated">最後の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; アンロードするときにポートを &lt;code&gt;kill_ports&lt;/code&gt; する一貫した動作を得るには、代わりにドライバーをロードするときにドライバーオプションkill_portsを使用します。</target>
        </trans-unit>
        <trans-unit id="97de7a8dc23625a08e5a773780e14b0a5c65aae2" translate="yes" xml:space="preserve">
          <source>To get the output printed to a file, use option &lt;code&gt;--output_file&lt;/code&gt;.</source>
          <target state="translated">出力をファイルに出力するには、オプション &lt;code&gt;--output_file&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4f76cd184a6e7c8d866643b588a8bdefe5b9edef" translate="yes" xml:space="preserve">
          <source>To get trace messages containing return values from functions, use the &lt;code&gt;{return_trace}&lt;/code&gt; match specification action instead.</source>
          <target state="translated">関数からの戻り値を含むトレースメッセージを取得するには、代わりに &lt;code&gt;{return_trace}&lt;/code&gt; 一致指定アクションを使用します。</target>
        </trans-unit>
        <trans-unit id="1820d2a1d5bd22bcad0e15651513a749cd0ea7ac" translate="yes" xml:space="preserve">
          <source>To give an indication on the possible performance gain using the specialized decodes, some measures have been performed. The relative figures in the outcome between selective, exclusive, and complete decode (the normal case) depend on the structure of the type, the size of the message, and on what level the selective and exclusive decodes are specified.</source>
          <target state="translated">特化されたデコードを用いて得られる可能性のある性能向上についての指標を与えるために、いくつかの測定を行った。選択的デコード、排他的デコード、完全デコード(通常の場合)の間の相対的な数値は、型の構造、メッセージのサイズ、および選択的デコードと排他的デコードがどのレベルで指定されているかに依存する。</target>
        </trans-unit>
        <trans-unit id="a6bae83c7d1a2e1a895f2a1aac969ea5d6956ad8" translate="yes" xml:space="preserve">
          <source>To hack the erlang libraries, you simply do a &lt;code&gt;make opt&lt;/code&gt; in the specific &quot;applications&quot; directory, like:</source>
          <target state="translated">erlangライブラリをハックするには、次の &lt;code&gt;make opt&lt;/code&gt; に特定の「アプリケーション」ディレクトリでmake optを実行するだけです。</target>
        </trans-unit>
        <trans-unit id="25afbf964210cbb860d968d22f8aec5dd76f1cff" translate="yes" xml:space="preserve">
          <source>To handle Unicode characters in Erlang, a common representation in both lists and binaries is needed. EEP (10) and the subsequent initial implementation in Erlang/OTP R13A settled a standard representation of Unicode characters in Erlang.</source>
          <target state="translated">ErlangでUnicode文字を扱うには、リストとバイナリの両方で共通の表現が必要です。EEP (10)とその後のErlang/OTP R13Aでの最初の実装で、ErlangにおけるUnicode文字の標準的な表現が決まりました。</target>
        </trans-unit>
        <trans-unit id="342c993bd4e7155816205341dd7a1c3953a4f6f8" translate="yes" xml:space="preserve">
          <source>To have &lt;code&gt;Common Test&lt;/code&gt; encrypt a specified file using function &lt;code&gt;DES3&lt;/code&gt; in application &lt;code&gt;Crypto&lt;/code&gt;, call &lt;code&gt;&lt;a href=&quot;ct#encrypt_config_file-2&quot;&gt;ct:encrypt_config_file/2,3&lt;/a&gt;&lt;/code&gt; The encrypted file can then be used as a regular configuration file in combination with other encrypted files or normal text files. However, the key for decrypting the configuration file must be provided when running the test. This can be done with flag/option &lt;code&gt;decrypt_key&lt;/code&gt; or &lt;code&gt;decrypt_file&lt;/code&gt;, or a key file in a predefined location.</source>
          <target state="translated">持っている &lt;code&gt;Common Test&lt;/code&gt; 機能の使用して、指定されたファイルを暗号化 &lt;code&gt;DES3&lt;/code&gt; をアプリケーションに &lt;code&gt;Crypto&lt;/code&gt; 、コール &lt;code&gt;&lt;a href=&quot;ct#encrypt_config_file-2&quot;&gt;ct:encrypt_config_file/2,3&lt;/a&gt;&lt;/code&gt; 暗号化されたファイルは、他の暗号化されたファイルまたは通常のテキストファイルとの組み合わせで、通常のコンフィギュレーション・ファイルとして使用することができます。ただし、テストの実行時には、構成ファイルを復号化するためのキーを提供する必要があります。これは、フラグ/オプションの &lt;code&gt;decrypt_key&lt;/code&gt; または &lt;code&gt;decrypt_file&lt;/code&gt; 、または事前定義された場所にある鍵ファイルで実行できます。</target>
        </trans-unit>
        <trans-unit id="85cad9012ac3a0f7585ee9eb3d18653bcfe48b6e" translate="yes" xml:space="preserve">
          <source>To have an effect, a breakpoint must be set at an &lt;strong&gt;executable line&lt;/strong&gt;, which is a line of code containing an executable expression such as a matching or a function call. A blank line or a line containing a comment, function head, or pattern in a &lt;code&gt;case&lt;/code&gt; statement or &lt;code&gt;receive&lt;/code&gt; statement is not executable.</source>
          <target state="translated">効果を上げるには、&lt;strong&gt;実行可能行&lt;/strong&gt;にブレークポイントを設定する必要があります。これは、マッチングや関数呼び出しなどの実行可能式を含むコード行です。空白行、または &lt;code&gt;case&lt;/code&gt; ステートメントまたは &lt;code&gt;receive&lt;/code&gt; ステートメントのコメント、関数ヘッド、またはパターンを含む行は実行できません。</target>
        </trans-unit>
        <trans-unit id="3526ad99fb939a42fd2ac8a732fa13795a7fc7c2" translate="yes" xml:space="preserve">
          <source>To have effect, this function is to be called from &lt;code&gt;init_per_suite/1&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;common_test&quot;&gt;common_test&lt;/a&gt;&lt;/code&gt;) before any tests are performed.</source>
          <target state="translated">有効にするために、この関数は、テストが実行される前に &lt;code&gt;init_per_suite/1&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;common_test&quot;&gt;common_test&lt;/a&gt;&lt;/code&gt; を参照）から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2708c75c960cc2ecf9c829562c09567eee5b452b" translate="yes" xml:space="preserve">
          <source>To help adapt configuration data to a test suite (or test case) and improve readability.</source>
          <target state="translated">設定データをテストスイート(またはテストケース)に適応させ、可読性を向上させるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="030c50a15bdc06f6e3b51217f3e73b7d2d5a9ad8" translate="yes" xml:space="preserve">
          <source>To help setup the environment, there is a bat file, &lt;code&gt;%PROGRAMFILES%\Mirosoft Visual Studio 12.0\VC\vcvarsall.bat&lt;/code&gt;, that set's the appropriate environment for a Windows command prompt. This is not appropriate for bash, so you'll need to convert it to bash-style environments by editing your &lt;code&gt;.bash_profile&lt;/code&gt;. In my case, where the SDK is installed in the default directory and &lt;code&gt;%PROGRAMFILES%&lt;/code&gt; is &lt;code&gt;C:\Program Files&lt;/code&gt;, the commands for setting up a 32bit build environment (on a 64bit or 32bit machine) look like this (in Cygwin):</source>
          <target state="translated">環境のセットアップを支援するために、Windowsコマンドプロンプトに適切な環境を設定する &lt;code&gt;%PROGRAMFILES%\Mirosoft Visual Studio 12.0\VC\vcvarsall.bat&lt;/code&gt; ファイル％PROGRAMFILES％\ Mirosoft Visual Studio 12.0 \ VC \ vcvarsall.batがあります。これはbashには適していないため、 &lt;code&gt;.bash_profile&lt;/code&gt; を編集してbashスタイルの環境に変換する必要があります。私の場合、SDKがデフォルトのディレクトリにインストールされており、 &lt;code&gt;%PROGRAMFILES%&lt;/code&gt; が &lt;code&gt;C:\Program Files&lt;/code&gt; 場合、（64ビットまたは32ビットのマシンで）32ビットのビルド環境をセットアップするコマンドは、次のようになります（Cygwinの場合）。</target>
        </trans-unit>
        <trans-unit id="8c68f332c622b4567e9853c18f5bd4711a371dc7" translate="yes" xml:space="preserve">
          <source>To help with debugging, EUnit defines several useful macros for printing messages directly to the console (rather than to the standard output). Furthermore, these macros all use the same basic format, which includes the file and line number where they occur, making it possible in some development environments (e.g., when running Erlang in an Emacs buffer) to simply click on the message and jump directly to the corresponding line in the code.</source>
          <target state="translated">デバッグを助けるために、EUnitはメッセージをコンソールに直接(標準出力ではなく)出力するための便利なマクロをいくつか定義しています。さらに、これらのマクロはすべて同じ基本フォーマットを使用しており、ファイルと行番号が含まれているので、開発環境によっては(例えばEmacsバッファでErlangを実行しているときなど)メッセージをクリックするだけで、コード内の対応する行に直接ジャンプすることができます。</target>
        </trans-unit>
        <trans-unit id="f2bf4f85026136c5e9d89c67190507dcee8f99df" translate="yes" xml:space="preserve">
          <source>To identify connections (described later).</source>
          <target state="translated">接続を識別するため(後述)。</target>
        </trans-unit>
        <trans-unit id="a3a37007760548419af74fbda4faaad4a58f472b" translate="yes" xml:space="preserve">
          <source>To illustrate the interoperability principles, C programs running in a UNIX environment have been used. It is assumed that you have enough knowledge to apply these principles to the relevant programming languages and platforms.</source>
          <target state="translated">相互運用性の原則を説明するために、UNIX 環境で動作する C プログラムを使用しています。これらの原則を関連するプログラミング言語やプラットフォームに適用するのに十分な知識を持っていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="e25970fd2bf365203fb3a3002e19cdcdbb27a907" translate="yes" xml:space="preserve">
          <source>To illustrate this we make up an example where the buttons instead generate down and up (press and release) events, and the lock responds to an up event only after the corresponding down event.</source>
          <target state="translated">これを説明するために、ボタンがダウンイベントとアップイベント(プレスとリリース)を生成する代わりに、ロックがダウンイベントに対応するダウンイベントの後にのみアップイベントに反応する例を作成します。</target>
        </trans-unit>
        <trans-unit id="272786a4055a77679447504bd8a8b3f74b9c24f1" translate="yes" xml:space="preserve">
          <source>To illustrate this, do &lt;strong&gt;not&lt;/strong&gt; write as follows:</source>
          <target state="translated">これを説明するために、次のように記述し&lt;strong&gt;ない&lt;/strong&gt;でください。</target>
        </trans-unit>
        <trans-unit id="968314d317898e187c56ec55b8af76cc4a65eba4" translate="yes" xml:space="preserve">
          <source>To illustrate this, suppose we extend our Mnesia &lt;code&gt;empTable&lt;/code&gt; with one internal column. We create it as before, but with an arity of 4, by adding another attribute.</source>
          <target state="translated">これを説明するために、Mnesia &lt;code&gt;empTable&lt;/code&gt; を1つの内部列で拡張するとします。以前と同じように作成しますが、アリティが4で、別の属性を追加します。</target>
        </trans-unit>
        <trans-unit id="a162dc5a66ab8801f7f0ce0a26a9e8e3d6ef7a06" translate="yes" xml:space="preserve">
          <source>To illustrate this, the messenger example from the previous section is divided into the following five files:</source>
          <target state="translated">これを説明するために、前節のメッセンジャーの例を以下の5つのファイルに分割します。</target>
        </trans-unit>
        <trans-unit id="6bb28103d410bbb4345e8969c22657c7565cfc3a" translate="yes" xml:space="preserve">
          <source>To implement a new carrier for the Erlang distribution, the main steps are as follows.</source>
          <target state="translated">Erlangディストリビューションに新しいキャリアを実装するには、主なステップは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="279afddbfce41bfb8c90b18f6a7106e81cad960d" translate="yes" xml:space="preserve">
          <source>To implement a user-defined behaviour, write code similar to code for a special process, but call functions in a callback module for handling specific tasks.</source>
          <target state="translated">ユーザー定義の動作を実装するには、特別なプロセスのためのコードに似たコードを書きますが、特定のタスクを処理するためのコールバックモジュールの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bbcff46d509465f1d50c1bdbf6bb8561780d4955" translate="yes" xml:space="preserve">
          <source>To implement an agent, the programmer writes instrumentation functions for the variables and the tables in the MIBs that the agent is going to support. A running prototype which handles &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, and &lt;code&gt;get-next&lt;/code&gt; can be created without any programming.</source>
          <target state="translated">プログラマは、エージェントを実装するために、エージェントがサポートするMIB内の変数とテーブルのインストルメンテーション関数を記述します。 &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; 、および &lt;code&gt;get-next&lt;/code&gt; を処理する実行中のプロトタイプは、プログラミングなしで作成できます。</target>
        </trans-unit>
        <trans-unit id="330de1ad3973af593bbd7d81e03664889a42ea4e" translate="yes" xml:space="preserve">
          <source>To implement your own service discovery module you have to write your own EPMD module. The &lt;code&gt;EPMD module&lt;/code&gt; is responsible for providing the location of another node. The distribution modules (&lt;code&gt;inet_tcp_dist&lt;/code&gt;/&lt;code&gt;inet_tls_dist&lt;/code&gt;) call the EPMD module to get the IP address and port of the other node. The EPMD module that is part of Erlang/OTP will resolve the hostname using DNS and uses the EPMD unix process to get the port of another node. The EPMD unix process does this by connecting to the other node on a well-known port, port 4369.</source>
          <target state="translated">独自のサービス検出モジュールを実装するには、独自のEPMDモジュールを作成する必要があります。 &lt;code&gt;EPMD module&lt;/code&gt; 別のノードの場所を提供する責任があります。配布モジュール（ &lt;code&gt;inet_tcp_dist&lt;/code&gt; / &lt;code&gt;inet_tls_dist&lt;/code&gt; ）はEPMDモジュールを呼び出して、他のノードのIPアドレスとポートを取得します。 Erlang / OTPの一部であるEPMDモジュールは、DNSを使用してホスト名を解決し、EPMD unixプロセスを使用して別のノードのポートを取得します。 EPMD unixプロセスは、既知のポートであるポート4369上の他のノードに接続することでこれを行います。</target>
        </trans-unit>
        <trans-unit id="79134b2c4e38df5717fe5011c4463fea24abb3c3" translate="yes" xml:space="preserve">
          <source>To improve performance when analysing cover results it is possible to do multiple calls to &lt;code&gt;&lt;a href=&quot;cover#analyse-1&quot;&gt;analyse&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;cover#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; at once. You can also use the &lt;code&gt;&lt;a href=&quot;cover#async_analyse_to_file-1&quot;&gt;async_analyse_to_file&lt;/a&gt;&lt;/code&gt; convenience function.</source>
          <target state="translated">カバー結果を分析するときのパフォーマンスを改善する &lt;code&gt;&lt;a href=&quot;cover#analyse-1&quot;&gt;analyse&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;cover#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; を分析するために複数の呼び出しを一度に実行することが可能です。 &lt;code&gt;&lt;a href=&quot;cover#async_analyse_to_file-1&quot;&gt;async_analyse_to_file&lt;/a&gt;&lt;/code&gt; コンビニエンス関数を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="d70eada12ec2a8f92aa033daf56e896f20d26d8f" translate="yes" xml:space="preserve">
          <source>To include other nodes in the coverage analysis, use &lt;code&gt;start/1&lt;/code&gt;. All cover compiled modules will then be loaded on all nodes, and data from all nodes will be summed up when analysing. For simplicity this example only involves the current node.</source>
          <target state="translated">カバレッジ分析に他のノードを含めるには、 &lt;code&gt;start/1&lt;/code&gt; を使用します。その後、すべてのカバーコンパイル済みモジュールがすべてのノードにロードされ、分析時にすべてのノードからのデータが合計されます。簡単にするために、この例には現在のノードのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="a5478a26ee1ac879ac54fc75bcb8b9a9f083c3ec" translate="yes" xml:space="preserve">
          <source>To include private shell commands, define them in a module &lt;code&gt;user_default&lt;/code&gt; and add the following argument as the first line in the &lt;code&gt;.erlang&lt;/code&gt; file:</source>
          <target state="translated">プライベートシェルコマンドを含めるには、 &lt;code&gt;user_default&lt;/code&gt; モジュールでそれらを定義し、 &lt;code&gt;.erlang&lt;/code&gt; ファイルの最初の行として次の引数を追加します。</target>
        </trans-unit>
        <trans-unit id="203ccb7faa11c702e1202041c2be3ef44596552b" translate="yes" xml:space="preserve">
          <source>To initialize the database, execute the following code on one of the two nodes:</source>
          <target state="translated">データベースを初期化するには、2つのノードのうち1つで以下のコードを実行します。</target>
        </trans-unit>
        <trans-unit id="026d2b6accddb0e61f3eda91aff0268e88788933" translate="yes" xml:space="preserve">
          <source>To insert an &amp;amp; or a \ in the result, precede it with a \. Notice that Erlang already gives a special meaning to \ in literal strings, so a single \ must be written as &lt;code&gt;&quot;\\&quot;&lt;/code&gt; and therefore a double \ as &lt;code&gt;&quot;\\\\&quot;&lt;/code&gt;.</source>
          <target state="translated">＆または\を結果に挿入するには、その前に\を付けます。Erlangはすでにリテラル文字列の\に特別な意味を与えていることに注意してください。したがって、単一の\は &lt;code&gt;&quot;\\&quot;&lt;/code&gt; として、二重の\は &lt;code&gt;&quot;\\\\&quot;&lt;/code&gt; として記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="c018c38250aabfbb51e23ce90651060a950f1b96" translate="yes" xml:space="preserve">
          <source>To install &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#installing&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt; including start arguments.</source>
          <target state="translated">開始引数を含む &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#installing&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt; をインストールするには。</target>
        </trans-unit>
        <trans-unit id="44e25aea36620d24d591fc0a361139dfb3c4b11c" translate="yes" xml:space="preserve">
          <source>To install &lt;code&gt;&lt;a href=&quot;event_handler_chapter#event_handling&quot;&gt;event handlers&lt;/a&gt;&lt;/code&gt; including start arguments.</source>
          <target state="translated">開始引数を含む &lt;code&gt;&lt;a href=&quot;event_handler_chapter#event_handling&quot;&gt;event handlers&lt;/a&gt;&lt;/code&gt; をインストールします。</target>
        </trans-unit>
        <trans-unit id="c9c7864f1c5249a35705cc8dcabba48f995e8ae5" translate="yes" xml:space="preserve">
          <source>To install &lt;code&gt;&lt;a href=&quot;event_handler_chapter#event_handling&quot;&gt;event handlers&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">インストールするには、 &lt;code&gt;&lt;a href=&quot;event_handler_chapter#event_handling&quot;&gt;event handlers&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="025cdabf9ad94f75800cda5f1e9747d7ccc0323d" translate="yes" xml:space="preserve">
          <source>To install the CSS file (&lt;code&gt;Common Test&lt;/code&gt; inlines the definition in the HTML code), the file name can be provided when executing &lt;code&gt;ct_run&lt;/code&gt;.</source>
          <target state="translated">CSSファイルをインストールするため（ &lt;code&gt;Common Test&lt;/code&gt; はHTMLコードの定義をインライン化します）、 &lt;code&gt;ct_run&lt;/code&gt; の実行時にファイル名を指定できます。</target>
        </trans-unit>
        <trans-unit id="deb96dbc16afa611fcde38057919ecf9cc751bfa" translate="yes" xml:space="preserve">
          <source>To install the new version of the release in runtime, the &lt;strong&gt;release handler&lt;/strong&gt; is used. This is a process belonging to the SASL application, which handles unpacking, installation, and removal of release packages. It is communicated through the &lt;code&gt;release_handler&lt;/code&gt; module. For details, see the &lt;code&gt;release_handler(3)&lt;/code&gt; manual page in SASL.</source>
          <target state="translated">ランタイムにリリースの新しいバージョンをインストールするには、&lt;strong&gt;リリースハンドラー&lt;/strong&gt;を使用します。これはSASLアプリケーションに属するプロセスであり、リリースパッケージのアンパック、インストール、および削除を処理します。これは、 &lt;code&gt;release_handler&lt;/code&gt; モジュールを介して通信されます。詳細については、SASLの &lt;code&gt;release_handler(3)&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="73c1bf364dc283d1176ab1d289c500fd685a5dab" translate="yes" xml:space="preserve">
          <source>To interpret all displayed modules in the chosen directory, click &lt;strong&gt;All&lt;/strong&gt;.</source>
          <target state="translated">選択したディレクトリに表示されているすべてのモジュールを解釈するには、[ &lt;strong&gt;すべて&lt;/strong&gt; ]をクリックします。</target>
        </trans-unit>
        <trans-unit id="3292879da2b34dcadcc9f9ce0648b935ba4e7f92" translate="yes" xml:space="preserve">
          <source>To interrupt the runtime system or the shell process (depending on what has been specified with system flag &lt;code&gt;+B&lt;/code&gt;), use &lt;code&gt;Ctrl-Break&lt;/code&gt;.</source>
          <target state="translated">ランタイムシステムまたはシェルプロセスを中断するには（システムフラグ &lt;code&gt;+B&lt;/code&gt; で指定されている内容に応じて）、 &lt;code&gt;Ctrl-Break&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4d9005b012d1045c52922820e7322a9dfa02e1f6" translate="yes" xml:space="preserve">
          <source>To investigate what Erlang thinks about the terminal, the call &lt;code&gt;io:getopts()&lt;/code&gt; can be used when the shell is started:</source>
          <target state="translated">Erlangが端末について何を考えているかを調査するために、シェルの開始時に &lt;code&gt;io:getopts()&lt;/code&gt; を呼び出すことができます：</target>
        </trans-unit>
        <trans-unit id="11a6e867a167f9a4a740ad92d9902eefad28664c" translate="yes" xml:space="preserve">
          <source>To just run a shell on a remote machine, there are functions that bundles the needed three steps needed into one: &lt;code&gt;&lt;a href=&quot;#shell-1&quot;&gt;shell/1,2,3&lt;/a&gt;&lt;/code&gt;. Similarily, to just open an sftp (file transfer) connection to a remote machine, the simplest way is to use &lt;code&gt;&lt;a href=&quot;ssh_sftp#start_channel-1&quot;&gt;ssh_sftp:start_channel/1,2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リモートマシンでシェルを実行するために、必要な3つのステップを1つにまとめる関数があります： &lt;code&gt;&lt;a href=&quot;#shell-1&quot;&gt;shell/1,2,3&lt;/a&gt;&lt;/code&gt; 。同様に、リモートマシンへのsftp（ファイル転送）接続を開くだけの場合、最も簡単な方法は &lt;code&gt;&lt;a href=&quot;ssh_sftp#start_channel-1&quot;&gt;ssh_sftp:start_channel/1,2,3&lt;/a&gt;&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="9f2634ff9e5775d30c933d162e116bcf2daeb2ae" translate="yes" xml:space="preserve">
          <source>To learn what sequential tracing is and how it can be used, see the Reference Manual for &lt;code&gt;seq_trace&lt;/code&gt;.</source>
          <target state="translated">シーケンシャルトレースの &lt;code&gt;seq_trace&lt;/code&gt; と使用方法については、リファレンスマニュアルのseq_traceを参照してください。</target>
        </trans-unit>
        <trans-unit id="ea8c91f9201e13f8a7af2544d0b6f79400981a45" translate="yes" xml:space="preserve">
          <source>To let the test suite continue on executing, return the configuration list that you want the test to use as the result.</source>
          <target state="translated">テストスイートの実行を継続させるには、結果としてテストに使用させたい設定リストを返します。</target>
        </trans-unit>
        <trans-unit id="d62397eee2357878fc975aeb84771b8bc2c06ea8" translate="yes" xml:space="preserve">
          <source>To limit the shutdown time, the time &lt;code&gt;init&lt;/code&gt; is allowed to spend taking down applications, command-line flag &lt;code&gt;-shutdown_time&lt;/code&gt; is to be used.</source>
          <target state="translated">シャットダウン時間を制限するには、 &lt;code&gt;init&lt;/code&gt; がアプリケーションの &lt;code&gt;-shutdown_time&lt;/code&gt; に費やすことができる時間、コマンドラインフラグ-shutdown_timeを使用します。</target>
        </trans-unit>
        <trans-unit id="31df00fd05b2b4e7d3ede7fd0ed32c7595a82e9c" translate="yes" xml:space="preserve">
          <source>To list the contents of a configuration file, use &lt;code&gt;list_config/1&lt;/code&gt;.</source>
          <target state="translated">設定ファイルの内容を一覧表示するには、 &lt;code&gt;list_config/1&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f5d893e9a4aaa1eb2af17414123d7e17dc6fd363" translate="yes" xml:space="preserve">
          <source>To listen on both SCTP and TCP, define one transport for each.</source>
          <target state="translated">SCTP と TCP の両方でリッスンするには、それぞれに 1 つのトランスポートを定義します。</target>
        </trans-unit>
        <trans-unit id="07a54ad0b2a1bb175cf95b725d86a06fc8b48cbd" translate="yes" xml:space="preserve">
          <source>To look up one of the names:</source>
          <target state="translated">名前の一つを調べるために</target>
        </trans-unit>
        <trans-unit id="8a56bbc15981f1188aa9ff7ef71388335fe7c6a6" translate="yes" xml:space="preserve">
          <source>To make a debug build of the emulator, you need to recompile both &lt;code&gt;beam.dll&lt;/code&gt; (the actual runtime system) and &lt;code&gt;erlexec.dll&lt;/code&gt;. Do like this</source>
          <target state="translated">エミュレーターのデバッグビルドを作成するには、 &lt;code&gt;beam.dll&lt;/code&gt; （実際のランタイムシステム）と &lt;code&gt;erlexec.dll&lt;/code&gt; の両方を再コンパイルする必要があります。このようにしてください</target>
        </trans-unit>
        <trans-unit id="038da331fd12e331816c4b78d58a10e2cc57ca86" translate="yes" xml:space="preserve">
          <source>To make it clearer exactly what code the warnings refer to, the warnings in the following examples are inserted as comments after the clause they refer to, for example:</source>
          <target state="translated">警告がどのコードを参照しているかをより明確にするために、以下の例の警告は、例えば、参照している節の後にコメントとして挿入されています。</target>
        </trans-unit>
        <trans-unit id="cd2982d9a90975bc47a9c7a7530d4f0cbaa3f7f2" translate="yes" xml:space="preserve">
          <source>To make it easier to understand this section, some terms are defined. This is a mix of our own terminology (Erlang/OS system time, Erlang/OS monotonic time, time warp) and globally accepted terminology.</source>
          <target state="translated">このセクションを理解しやすくするために、いくつかの用語が定義されています。これは私たち独自の用語(Erlang/OSのシステム時間、Erlang/OSのモノトニック時間、タイムワープ)と世界的に認められている用語をミックスしたものです。</target>
        </trans-unit>
        <trans-unit id="2921bab0b743bbb6198162ca9c596c8d4e059429" translate="yes" xml:space="preserve">
          <source>To make the descriptions simpler, we first list some definitions:</source>
          <target state="translated">説明を簡単にするために、最初にいくつかの定義を挙げておきます。</target>
        </trans-unit>
        <trans-unit id="9c4714caed05dab02e49dd183a4006e068e3199f" translate="yes" xml:space="preserve">
          <source>To make the example runnable, we start implementing the reading and writing of the data to/from the ETS table. First function &lt;code&gt;put_chars/3&lt;/code&gt;:</source>
          <target state="translated">サンプルを実行可能にするために、ETSテーブルとの間のデータの読み取りと書き込みの実装を開始します。最初の関数 &lt;code&gt;put_chars/3&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="632f6f737e1f0ad548a43d9ad64573eca55f152d" translate="yes" xml:space="preserve">
          <source>To make the process change code, send the message &lt;code&gt;code_switch&lt;/code&gt; to it. The process then makes a fully qualified call to &lt;code&gt;m:loop()&lt;/code&gt; and changes to current code. Notice that &lt;code&gt;m:loop/0&lt;/code&gt; must be exported.</source>
          <target state="translated">プロセス変更コードを作成するには、コード &lt;code&gt;code_switch&lt;/code&gt; をコードに送信します。次に、プロセスは &lt;code&gt;m:loop()&lt;/code&gt; への完全修飾呼び出しを行い、現在のコードを変更します。 &lt;code&gt;m:loop/0&lt;/code&gt; をエクスポートする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e177c9389e3d182722e09e0544b0a24268ff84e3" translate="yes" xml:space="preserve">
          <source>To make the test fair, each new test run is to run in its own, newly created Erlang process. Otherwise, if all tests run in the same process, the later tests start out with larger heap sizes and therefore probably do fewer garbage collections. Also consider restarting the Erlang emulator between each test.</source>
          <target state="translated">テストを公平にするために、新しいテストはそれぞれのErlangプロセスで実行されます。そうしないと、すべてのテストが同じプロセスで実行されてしまうと、後のテストの方がヒープサイズが大きくなってしまい、ガベージコレクションが少なくなってしまいます。また、各テストの間にErlangエミュレータを再起動することも考えてみてください。</target>
        </trans-unit>
        <trans-unit id="120ecf4e057892d6019b012a82abcf83ac9ffd85" translate="yes" xml:space="preserve">
          <source>To make this happen the megaco stack has to be configured:</source>
          <target state="translated">これを実現するためには、megacoスタックを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="13169d7b871948e1e9a9c4457e119e83fe7939d4" translate="yes" xml:space="preserve">
          <source>To manipulate services, the logged on user is to have administrator privileges on the machine. The Erlang machine itself is (default) run as the local administrator. This can be changed with the Services applet in Windows.</source>
          <target state="translated">サービスを操作するためには、ログオンしているユーザーはマシンの管理者権限を持っていなければなりません。Erlangマシン自体は(デフォルトで)ローカル管理者として実行されます。これはWindowsのサービスアプレットで変更できます。</target>
        </trans-unit>
        <trans-unit id="330fd48fdffeb44ebc089750d09d688535c7db34" translate="yes" xml:space="preserve">
          <source>To manipulate the Erlang services easily, put the &lt;code&gt;&amp;lt;erlang_root&amp;gt;\erts-&amp;lt;version&amp;gt;\bin&lt;/code&gt; directory in the path instead of &lt;code&gt;&amp;lt;erlang_root&amp;gt;\bin&lt;/code&gt;. The &lt;code&gt;erlsrv&lt;/code&gt; program can be found from inside Erlang by using the &lt;code&gt;os:find_executable/1&lt;/code&gt; Erlang function.</source>
          <target state="translated">Erlangサービスを簡単に操作するには、パスに &lt;code&gt;&amp;lt;erlang_root&amp;gt;\bin&lt;/code&gt; ではなく &lt;code&gt;&amp;lt;erlang_root&amp;gt;\erts-&amp;lt;version&amp;gt;\bin&lt;/code&gt; ディレクトリを配置します。 &lt;code&gt;erlsrv&lt;/code&gt; のプログラムを使用して、アーラン内部から求めることができる &lt;code&gt;os:find_executable/1&lt;/code&gt; アーラン機能。</target>
        </trans-unit>
        <trans-unit id="7b0e537b9e6e88eafa3eeae7f7a02f18b4e1430f" translate="yes" xml:space="preserve">
          <source>To manipulate the table we implement the following utility functions:</source>
          <target state="translated">テーブルを操作するために、以下のようなユーティリティ関数を実装しています。</target>
        </trans-unit>
        <trans-unit id="af1c290996a023ca9ee9b2902b6c1dc2a988f5c7" translate="yes" xml:space="preserve">
          <source>To match out the rest of a binary, specify a binary field without size:</source>
          <target state="translated">バイナリの残りの部分をマッチアウトするには、サイズなしのバイナリフィールドを指定します。</target>
        </trans-unit>
        <trans-unit id="50f6c59cd17dfe4a6719c66fb938f13bf13c9cd5" translate="yes" xml:space="preserve">
          <source>To match out the rest of a bitstring, specify a field without size:</source>
          <target state="translated">ビット文字列の残りの部分をマッチアウトするには、サイズのないフィールドを指定します。</target>
        </trans-unit>
        <trans-unit id="3c74e2148772d016b06b50e91a05f48c85c5db24" translate="yes" xml:space="preserve">
          <source>To merge all wrap logs from two nodes:</source>
          <target state="translated">2 つのノードからのすべてのラップログをマージします。</target>
        </trans-unit>
        <trans-unit id="6ec3ba5252c54ac879e329c670bb92c1a4f26979" translate="yes" xml:space="preserve">
          <source>To modify the existing configuration, use &lt;code&gt;&lt;a href=&quot;#update_handler_config-2&quot;&gt;update_handler_config/2&lt;/a&gt;&lt;/code&gt;, or, if a more complex merge is needed, read the current configuration with &lt;code&gt;&lt;a href=&quot;#get_handler_config-1&quot;&gt;get_handler_config/1&lt;/a&gt;&lt;/code&gt;, then do the merge before writing the new configuration back with this function.</source>
          <target state="translated">既存の構成を変更するには、 &lt;code&gt;&lt;a href=&quot;#update_handler_config-2&quot;&gt;update_handler_config/2&lt;/a&gt;&lt;/code&gt; を使用するか、より複雑なマージが必要な場合は &lt;code&gt;&lt;a href=&quot;#get_handler_config-1&quot;&gt;get_handler_config/1&lt;/a&gt;&lt;/code&gt; で現在の構成を読み取り、この関数で新しい構成を書き戻す前にマージを実行します。</target>
        </trans-unit>
        <trans-unit id="7cbe08d74968e08a72c3be83982bb750cd3d4357" translate="yes" xml:space="preserve">
          <source>To modify the existing configuration, use &lt;code&gt;&lt;a href=&quot;#update_primary_config-1&quot;&gt;update_primary_config/1&lt;/a&gt;&lt;/code&gt;, or, if a more complex merge is needed, read the current configuration with &lt;code&gt;&lt;a href=&quot;#get_primary_config-0&quot;&gt;get_primary_config/0&lt;/a&gt;&lt;/code&gt;, then do the merge before writing the new configuration back with this function.</source>
          <target state="translated">既存の構成を変更するには、 &lt;code&gt;&lt;a href=&quot;#update_primary_config-1&quot;&gt;update_primary_config/1&lt;/a&gt;&lt;/code&gt; を使用するか、より複雑なマージが必要な場合は、 &lt;code&gt;&lt;a href=&quot;#get_primary_config-0&quot;&gt;get_primary_config/0&lt;/a&gt;&lt;/code&gt; で現在の構成を読み取り、この関数で新しい構成を書き戻す前にマージを実行します。</target>
        </trans-unit>
        <trans-unit id="5232b103674f04a52f0f595b415d6da9c86b5634" translate="yes" xml:space="preserve">
          <source>To not lose the data that the failing node stored up to the point of crash, the control node tries to fetch it before restarting trace. This must occur within the allowed time frame, otherwise it is aborted (default is 10 seconds, but it can be changed with &lt;code&gt;{resume, MSec}&lt;/code&gt;). The data fetched this way is then merged with all other traces.</source>
          <target state="translated">障害が発生したノードがクラッシュの時点までに保存したデータを失わないようにするために、コントロールノードはトレースを再開する前にデータをフェッチしようとします。これは許可された時間枠内で発生する必要があります。それ以外の場合は中止されます（デフォルトは10秒ですが、 &lt;code&gt;{resume, MSec}&lt;/code&gt; で変更できます）。この方法でフェッチされたデータは、他のすべてのトレースとマージされます。</target>
        </trans-unit>
        <trans-unit id="eead728bbb8cc0046ae68985d45f67a85158d6b1" translate="yes" xml:space="preserve">
          <source>To not update a driver and only recompile, it probably works when building for a 32-bit machine creating a false sense of security. Hopefully that will generate many important warnings. But when recompiling the same driver later on for a 64-bit machine, there &lt;strong&gt;will&lt;/strong&gt; be warnings and almost certainly crashes. So it is a &lt;strong&gt;bad&lt;/strong&gt; idea to postpone updating the driver and not fixing the warnings.</source>
          <target state="translated">ドライバーを更新せずに再コンパイルするだけの場合、32ビットマシン用にビルドするときにおそらく機能し、誤った安心感を生み出します。うまくいけば、多くの重要な警告が生成されます。64ビットマシンの後に同じドライバを再コンパイルする場合でも、そこに&lt;strong&gt;なります&lt;/strong&gt;警告することとほぼ確実にクラッシュします。そのため、ドライバの更新を延期し、警告を修正しないことは&lt;strong&gt;悪い&lt;/strong&gt;考えです。</target>
        </trans-unit>
        <trans-unit id="25dd351d674ee351bc0d61f733e4bc4ab3924c98" translate="yes" xml:space="preserve">
          <source>To only collect data from remote nodes without stopping &lt;code&gt;cover&lt;/code&gt; on those nodes, use &lt;code&gt;cover:flush/1&lt;/code&gt;</source>
          <target state="translated">これらのノードの &lt;code&gt;cover&lt;/code&gt; を停止せずにリモートノードからのみデータを収集するには、 &lt;code&gt;cover:flush/1&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9228c30057d8d3d2590c6d0ceb056f1bc0cfdc8f" translate="yes" xml:space="preserve">
          <source>To only update an existing value, the following syntax is used:</source>
          <target state="translated">既存の値のみを更新するには、以下の構文を使用します。</target>
        </trans-unit>
        <trans-unit id="91ac146297375e57e22dd83d0532b37bf8d61261" translate="yes" xml:space="preserve">
          <source>To open a file for writing and place the BOM first is even simpler:</source>
          <target state="translated">書き込み用のファイルを開いて、最初にBOMを配置するとさらに簡単になります。</target>
        </trans-unit>
        <trans-unit id="58c7c0dd2c707e847605f73d2bf4f644bea3024e" translate="yes" xml:space="preserve">
          <source>To open a popup menu from which the appropriate module can be selected, right-click the &lt;strong&gt;Module&lt;/strong&gt; entry.</source>
          <target state="translated">適切なモジュールを選択できるポップアップメニューを開くには、&lt;strong&gt;モジュール&lt;/strong&gt;エントリを右クリックします。</target>
        </trans-unit>
        <trans-unit id="14f5619a76f5c4433353480eb14374da920455d5" translate="yes" xml:space="preserve">
          <source>To open the detailed information page about the module to which the fun belongs, right-click the row and select &lt;strong&gt;Properties for &amp;lt;mod&amp;gt;&lt;/strong&gt;.</source>
          <target state="translated">funが属するモジュールに関する詳細情報ページを開くには、行を右クリックして、&lt;strong&gt;&amp;lt;mod&amp;gt;のプロパティを&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="707dccebf0704f68a732417b3f2c2e2a669bd41f" translate="yes" xml:space="preserve">
          <source>To open the detailed information page about the owner process of a timer, right-click the row and select &lt;strong&gt;Properties for &amp;lt;pid&amp;gt;&lt;/strong&gt;.</source>
          <target state="translated">タイマーの所有者プロセスに関する詳細情報ページを開くには、行を右クリックして、&lt;strong&gt;&amp;lt;pid&amp;gt;のプロパティを&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="67b5909ded381e129ca3cf333f0952bd76fc77a6" translate="yes" xml:space="preserve">
          <source>To open the detailed information page about the owner process of an ETS table, right-click the row and select &lt;strong&gt;Properties for &amp;lt;pid&amp;gt;&lt;/strong&gt;.</source>
          <target state="translated">ETSテーブルの所有者プロセスに関する詳細情報ページを開くには、行を右クリックして、&lt;strong&gt;&amp;lt;pid&amp;gt;のプロパティを&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="310178f41809534c7c90fe35f112b61d4b6677f5" translate="yes" xml:space="preserve">
          <source>To open the detailed information page about the scheduler, double-click, or right-click the row and select &lt;strong&gt;Properties for 'Identifier'&lt;/strong&gt;.</source>
          <target state="translated">スケジューラーの詳細情報ページを開くには、行をダブルクリックするか右クリックして、&lt;strong&gt;「識別子」のプロパティを&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="571318d856ef4524500a9b751e49f54bd8327c0e" translate="yes" xml:space="preserve">
          <source>To open the detailed information page about the table, double- click, or right-click the row and select &lt;strong&gt;Properties for 'Identifier'&lt;/strong&gt;.</source>
          <target state="translated">テーブルの詳細情報ページを開くには、行をダブルクリックするか、行を右クリックして[ &lt;strong&gt;識別子&lt;/strong&gt; ]の[ &lt;strong&gt;プロパティ&lt;/strong&gt; ]を選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="0f882324ba7cf66c628fe99da4190c380235eb46" translate="yes" xml:space="preserve">
          <source>To output characters on an I/O device, the following &lt;code&gt;Request&lt;/code&gt;s exist:</source>
          <target state="translated">I / Oデバイスで文字を出力するには、次の &lt;code&gt;Request&lt;/code&gt; が存在します。</target>
        </trans-unit>
        <trans-unit id="4460b3a67f9f027204de0ad12d5d1dec14e5f20d" translate="yes" xml:space="preserve">
          <source>To overcome this situation, try to restart the ongoing transactions that are accessing tables on the failing node, and write a &lt;code&gt;mnesia_down&lt;/code&gt; entry to a log file.</source>
          <target state="translated">この状況を克服するには、障害のあるノードのテーブルにアクセスしている進行中のトランザクションを再起動して、 &lt;code&gt;mnesia_down&lt;/code&gt; エントリをログファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="7e7f8360d8ea17a73622310335fec57f5f594e5a" translate="yes" xml:space="preserve">
          <source>To overwrite the existing configuration without any merge, use</source>
          <target state="translated">マージせずに既存の設定を上書きするには</target>
        </trans-unit>
        <trans-unit id="8eb9c41fc2b2f98f04f5d6d6242bc28f6713bd31" translate="yes" xml:space="preserve">
          <source>To overwrite the existing configuration without any merge, use &lt;code&gt;&lt;a href=&quot;#set_handler_config-2&quot;&gt;set_handler_config/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">マージせずに既存の構成を上書きするには、 &lt;code&gt;&lt;a href=&quot;#set_handler_config-2&quot;&gt;set_handler_config/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="db040bf59efb80826409bf9f754e7a7431f35000" translate="yes" xml:space="preserve">
          <source>To overwrite the existing configuration without any merge, use &lt;code&gt;&lt;a href=&quot;#set_primary_config-1&quot;&gt;set_primary_config/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">マージせずに既存の構成を上書きするには、 &lt;code&gt;&lt;a href=&quot;#set_primary_config-1&quot;&gt;set_primary_config/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ef5df41f2e14a8f5ccfe8eb5134454968930bd33" translate="yes" xml:space="preserve">
          <source>To pass data from one test suite to another, the same mechanism is used. The data is to be saved by finction &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; and read by function &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; in the suite that follows. When passing data between suites, &lt;code&gt;Saver&lt;/code&gt; carries the name of the test suite.</source>
          <target state="translated">あるテストスイートから別のテストスイートにデータを渡すには、同じメカニズムが使用されます。データは &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; によって保存され、続くスイートの関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; によって読み取られます。スイート間でデータを渡す場合、 &lt;code&gt;Saver&lt;/code&gt; はテストスイートの名前を伝えます。</target>
        </trans-unit>
        <trans-unit id="de196dbd1fc4727b3381ea786892e523ea66df78" translate="yes" xml:space="preserve">
          <source>To pass start arguments to the event handler init function, use option &lt;code&gt;ct_run -event_handler_init&lt;/code&gt; instead of &lt;code&gt;-event_handler&lt;/code&gt;.</source>
          <target state="translated">開始引数をイベントハンドラーのinit関数に &lt;code&gt;ct_run -event_handler_init&lt;/code&gt; には、 &lt;code&gt;-event_handler&lt;/code&gt; の代わりにオプションct_run -event_handler_initを使用します。</target>
        </trans-unit>
        <trans-unit id="05760d82d1ff0699d6462cb51afbab4089fd15b2" translate="yes" xml:space="preserve">
          <source>To paste text, use &lt;code&gt;Ctrl-V&lt;/code&gt;.</source>
          <target state="translated">テキストを貼り付けるには、 &lt;code&gt;Ctrl-V&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9a0ab25b4dbcc22e8a0f55cfd17389d320947558" translate="yes" xml:space="preserve">
          <source>To perform a selective decode:</source>
          <target state="translated">選択的デコードを実行する。</target>
        </trans-unit>
        <trans-unit id="e34161a911d532a3fe5b96ed7a79392865f455a4" translate="yes" xml:space="preserve">
          <source>To perform an exclusive decode:</source>
          <target state="translated">排他的なデコードを実行する。</target>
        </trans-unit>
        <trans-unit id="3f8dad79e2d5118a556c41ca87119ccb799f35ee" translate="yes" xml:space="preserve">
          <source>To perform code coverage test (see &lt;code&gt;&lt;a href=&quot;cover_chapter#cover&quot;&gt;Code Coverage Analysis&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">コードカバレッジテストを実行するには（ &lt;code&gt;&lt;a href=&quot;cover_chapter#cover&quot;&gt;Code Coverage Analysis&lt;/a&gt;&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="a431fccb77738e590c035501f73871c8ebfc0dd5" translate="yes" xml:space="preserve">
          <source>To plug in a handler to the &lt;code&gt;Common Test&lt;/code&gt; Master event manager, specify &lt;code&gt;master&lt;/code&gt; as the node in &lt;code&gt;NodeRefs&lt;/code&gt;.</source>
          <target state="translated">ハンドラーを &lt;code&gt;Common Test&lt;/code&gt; Masterイベントマネージャーにプラグインするには、 &lt;code&gt;NodeRefs&lt;/code&gt; でノードとして &lt;code&gt;master&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="a9a49f1cec23382260ab3c7111ed66a3064f4b5e" translate="yes" xml:space="preserve">
          <source>To prevent a supervisor from getting into an infinite loop of child process terminations and restarts, a &lt;strong&gt;maximum restart intensity&lt;/strong&gt; is defined using two integer values specified with keys &lt;code&gt;intensity&lt;/code&gt; and &lt;code&gt;period&lt;/code&gt; in the above map. Assuming the values &lt;code&gt;MaxR&lt;/code&gt; for &lt;code&gt;intensity&lt;/code&gt; and &lt;code&gt;MaxT&lt;/code&gt; for &lt;code&gt;period&lt;/code&gt;, then, if more than &lt;code&gt;MaxR&lt;/code&gt; restarts occur within &lt;code&gt;MaxT&lt;/code&gt; seconds, the supervisor terminates all child processes and then itself. The termination reason for the supervisor itself in that case will be &lt;code&gt;shutdown&lt;/code&gt;. &lt;code&gt;intensity&lt;/code&gt; defaults to &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;period&lt;/code&gt; defaults to &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">スーパーバイザが子プロセスの終了と再起動の無限ループに入らないようにするために、&lt;strong&gt;最大の再起動強度&lt;/strong&gt;は、上記のマップのキー &lt;code&gt;intensity&lt;/code&gt; と &lt;code&gt;period&lt;/code&gt; で指定された2つの整数値を使用して定義されます。値と仮定すると、 &lt;code&gt;MaxR&lt;/code&gt; のための &lt;code&gt;intensity&lt;/code&gt; と &lt;code&gt;MaxT&lt;/code&gt; のための &lt;code&gt;period&lt;/code&gt; 超えた場合、その後、 &lt;code&gt;MaxR&lt;/code&gt; 再起動が内で発生 &lt;code&gt;MaxT&lt;/code&gt; 秒、監督者は、すべての子プロセス自体を終了します。その場合のスーパーバイザ自体の終了理由は &lt;code&gt;shutdown&lt;/code&gt; ます。 &lt;code&gt;intensity&lt;/code&gt; デフォルトで &lt;code&gt;1&lt;/code&gt; および &lt;code&gt;period&lt;/code&gt; デフォルトは &lt;code&gt;5&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8b6bd58de0f6a9d2c9e5412e4769e5fc57c89331" translate="yes" xml:space="preserve">
          <source>To prevent accidentally reloading of modules affecting the Erlang runtime system, directories &lt;code&gt;kernel&lt;/code&gt;, &lt;code&gt;stdlib&lt;/code&gt;, and &lt;code&gt;compiler&lt;/code&gt; are considered &lt;strong&gt;sticky&lt;/strong&gt;. This means that the system issues a warning and rejects the request if a user tries to reload a module residing in any of them. The feature can be disabled by using command-line flag &lt;code&gt;-nostick&lt;/code&gt;.</source>
          <target state="translated">Erlangランタイムシステムに影響を与えるモジュールの誤った再読み込みを防ぐために、ディレクトリ &lt;code&gt;kernel&lt;/code&gt; 、 &lt;code&gt;stdlib&lt;/code&gt; 、および &lt;code&gt;compiler&lt;/code&gt; は&lt;strong&gt;sticky&lt;/strong&gt;と見なされます。つまり、ユーザーがモジュールのいずれかに存在するモジュールを再ロードしようとすると、システムは警告を発行し、要求を拒否します。この機能は、コマンドラインフラグ &lt;code&gt;-nostick&lt;/code&gt; を使用して無効にできます。</target>
        </trans-unit>
        <trans-unit id="dec616600e41a5b6ef771d942e395567b990586c" translate="yes" xml:space="preserve">
          <source>To prevent late answers (after the time-out) from polluting the message queue of the caller, a middleman process is used to do the calls. Late answers are then discarded when they arrive to a terminated process.</source>
          <target state="translated">遅刻した応答(タイムアウト後)が発信者のメッセージキューを汚染するのを防ぐために、呼び出しを行うためにミドルマンプロセスが使用されます。遅刻した回答は、終了したプロセスに到着した時点で破棄されます。</target>
        </trans-unit>
        <trans-unit id="3c59c8bcb62921917057af6666d0e9bc306363f2" translate="yes" xml:space="preserve">
          <source>To print a list of files to the Erlang shell, use function &lt;code&gt;&lt;a href=&quot;#t-1&quot;&gt;t/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#tt-1&quot;&gt;tt/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangシェルにファイルのリストを出力するには、関数 &lt;code&gt;&lt;a href=&quot;#t-1&quot;&gt;t/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#tt-1&quot;&gt;tt/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9e7f46b82ce549b77ba51c1629aef0ab23feab88" translate="yes" xml:space="preserve">
          <source>To print some information in field &lt;code&gt;Comment&lt;/code&gt; on the HTML result page, return &lt;code&gt;{comment,Comment}&lt;/code&gt;.</source>
          <target state="translated">HTML結果ページの &lt;code&gt;Comment&lt;/code&gt; フィールドに情報を印刷するには、 &lt;code&gt;{comment,Comment}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="5cc0874eca15de116c6433f2f6c8188ae52c6b95" translate="yes" xml:space="preserve">
          <source>To produce sensible results, &lt;code&gt;fprof&lt;/code&gt; tries not to charge any function more than once for ACC time. The instance highest up (with longest duration) in the call stack is chosen.</source>
          <target state="translated">賢明な結果を生成するために、 &lt;code&gt;fprof&lt;/code&gt; はACC時間に関数を2回以上充電しないようにします。呼び出しスタックで最も高い（持続時間が最も長い）インスタンスが選択されます。</target>
        </trans-unit>
        <trans-unit id="fdb950e45ab67b6a47da12b4482a70174dcfdd0c" translate="yes" xml:space="preserve">
          <source>To provide customization and extensibility of the request handling of the HTTP servers, most of these steps are handled by one or more modules. These modules can be replaced or removed at runtime and new ones can be added. For each request, all modules are traversed in the order specified by the module directive in the server configuration file. Some parts, mainly the communication- related steps, are considered server core functionality and are not implemented using the Erlang web server API. A description of functionality implemented by the Erlang webserver API is described in &lt;code&gt;&lt;a href=&quot;#Inets_Web_Server_Modules&quot;&gt;Section Inets Web Server Modules&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">HTTPサーバーのリクエスト処理のカスタマイズと拡張性を提供するために、これらのステップのほとんどは1つ以上のモジュールによって処理されます。これらのモジュールは実行時に交換または削除でき、新しいモジュールを追加できます。リクエストごとに、すべてのモジュールがサーバー構成ファイルのmoduleディレクティブで指定された順序でトラバースされます。一部の部分、主に通信関連の手順は、サーバーのコア機能と見なされ、Erlang WebサーバーAPIを使用して実装されていません。Erlang WebサーバーAPIによって実装される機能の説明は、 &lt;code&gt;&lt;a href=&quot;#Inets_Web_Server_Modules&quot;&gt;Section Inets Web Server Modules&lt;/a&gt;&lt;/code&gt; 説明されています。</target>
        </trans-unit>
        <trans-unit id="7caa6e3412703737187f18930265da85c613b9f8" translate="yes" xml:space="preserve">
          <source>To provide more information for bug detection tools, such as Dialyzer</source>
          <target state="translated">Dialyzer などのバグ検出ツールに、より多くの情報を提供するために</target>
        </trans-unit>
        <trans-unit id="5563a933e99748f8947b5b13de253c9bebd73132" translate="yes" xml:space="preserve">
          <source>To provide robustness, a distributed Erlang node occasionally polls all its connected neighbors in an attempt to detect failed nodes or communication links. A node that receives such a message is expected to respond immediately with an &lt;code&gt;ERL_TICK&lt;/code&gt; message. This is done automatically by &lt;code&gt;erl_receive()&lt;/code&gt;. However, when this has occurred, &lt;code&gt;erl_receive&lt;/code&gt; returns &lt;code&gt;ERL_TICK&lt;/code&gt; to the caller without storing a message into the &lt;code&gt;ErlMessage&lt;/code&gt; structure.</source>
          <target state="translated">堅牢性を提供するために、分散Erlangノードは時々、障害のあるノードまたは通信リンクを検出しようとして、接続されているすべてのネイバーをポーリングします。このようなメッセージを受信したノードは、 &lt;code&gt;ERL_TICK&lt;/code&gt; メッセージですぐに応答することが期待されています。これは &lt;code&gt;erl_receive()&lt;/code&gt; によって自動的に行われます。ただし、これが発生した場合、 &lt;code&gt;erl_receive&lt;/code&gt; は、メッセージを &lt;code&gt;ErlMessage&lt;/code&gt; 構造に保管せずに &lt;code&gt;ERL_TICK&lt;/code&gt; を呼び出し元に返します。</target>
        </trans-unit>
        <trans-unit id="c22d22ca8626a0d9ad4822b6abdf3304ff0e2ed1" translate="yes" xml:space="preserve">
          <source>To quickly get started on tracing function calls you can use the following code in the Erlang shell:</source>
          <target state="translated">関数の呼び出しをすぐにトレースするには、Erlangシェルで以下のコードを使うことができます。</target>
        </trans-unit>
        <trans-unit id="4216c6c1555a4ffc81851d786b4c47388d4033ab" translate="yes" xml:space="preserve">
          <source>To raise the salary to 10 for everyone with a salary less than 10 and return the sum of all raises:</source>
          <target state="translated">給料が10以下の人は全員10に上げて、昇給分の合計を返すこと。</target>
        </trans-unit>
        <trans-unit id="487f9ae77ed1f6bfc72656beab390cd3da83a3a4" translate="yes" xml:space="preserve">
          <source>To read characters from an I/O device, the following &lt;code&gt;Request&lt;/code&gt;s exist:</source>
          <target state="translated">I / Oデバイスから文字を読み取るには、次の &lt;code&gt;Request&lt;/code&gt; が存在します。</target>
        </trans-unit>
        <trans-unit id="8ebc4e78936132f1c46d3f47b17ef930ad86f68e" translate="yes" xml:space="preserve">
          <source>To read data saved by a previous test case, use macro &lt;code&gt;config&lt;/code&gt; with a &lt;code&gt;saved_config&lt;/code&gt; key as follows:</source>
          <target state="translated">前のテストケースによって保存されたデータを読み取るために、マクロを使用し &lt;code&gt;config&lt;/code&gt; 用いて &lt;code&gt;saved_config&lt;/code&gt; 次のようにキー。</target>
        </trans-unit>
        <trans-unit id="0e65ac5f6db83037a2248f75d84c868aa8830d0a" translate="yes" xml:space="preserve">
          <source>To read test terms, use &lt;code&gt;Tag = tests&lt;/code&gt; (rather than &lt;code&gt;suites&lt;/code&gt;, &lt;code&gt;groups&lt;/code&gt;, or &lt;code&gt;cases&lt;/code&gt;). &lt;code&gt;Value&lt;/code&gt; is then the list of &lt;strong&gt;all&lt;/strong&gt; tests on the form &lt;code&gt;[{Node,Dir,[{TestSpec,GroupsAndCases1},...]},...]&lt;/code&gt;, where &lt;code&gt;GroupsAndCases = [{Group,[Case]}] | [Case]&lt;/code&gt;.</source>
          <target state="translated">テスト用語を読むには、 &lt;code&gt;Tag = tests&lt;/code&gt; 使用します（ &lt;code&gt;suites&lt;/code&gt; 、 &lt;code&gt;groups&lt;/code&gt; 、 &lt;code&gt;cases&lt;/code&gt; ではなく）。次に、 &lt;code&gt;Value&lt;/code&gt; は &lt;code&gt;[{Node,Dir,[{TestSpec,GroupsAndCases1},...]},...]&lt;/code&gt; という形式の&lt;strong&gt;すべての&lt;/strong&gt;テストのリストです。ここで、 &lt;code&gt;GroupsAndCases = [{Group,[Case]}] | [Case]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5502e1d91075568dbfad6a71c308a3359400e11e" translate="yes" xml:space="preserve">
          <source>To read the counter value, use &lt;code&gt;&lt;a href=&quot;#trace_info-2&quot;&gt;erlang:trace_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">カウンター値を読み取るには、 &lt;code&gt;&lt;a href=&quot;#trace_info-2&quot;&gt;erlang:trace_info/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="cf5d7d89573645295c9ea3ad3f20e180a97f562f" translate="yes" xml:space="preserve">
          <source>To read the value of a configuration variable, use function &lt;code&gt;&lt;a href=&quot;ct#get_config-1&quot;&gt;get_config/1,2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">構成変数の値を読み取るには、関数 &lt;code&gt;&lt;a href=&quot;ct#get_config-1&quot;&gt;get_config/1,2,3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="85dbe7571965e09b1298a761ceeca08b4c2e5f97" translate="yes" xml:space="preserve">
          <source>To read the values from the table directly is not always possible. It can be needed to search one or more tables to get the wanted data, and this is done by writing database queries. Queries are always more expensive operations than direct lookups done with &lt;code&gt;mnesia:read&lt;/code&gt;. Therefore, avoid queries in performance-critical code.</source>
          <target state="translated">テーブルから値を直接読み取ることは、常に可能であるとは限りません。必要なデータを取得するために1つ以上のテーブルを検索する必要がある場合があります。これは、データベースクエリを作成することによって行われます。クエリは常に、 &lt;code&gt;mnesia:read&lt;/code&gt; で行われる直接ルックアップよりもコストのかかる操作です。したがって、パフォーマンスが重要なコードでのクエリは避けてください。</target>
        </trans-unit>
        <trans-unit id="9ca82b142769fd54c89e1f8c4e76ea91942c4a3b" translate="yes" xml:space="preserve">
          <source>To reboot on Windows, &lt;code&gt;HEART_COMMAND&lt;/code&gt; can be set to &lt;code&gt;heart -shutdown&lt;/code&gt; (included in the Erlang delivery) or to any other suitable program that can activate a reboot.</source>
          <target state="translated">Windowsで再起動するには、 &lt;code&gt;HEART_COMMAND&lt;/code&gt; を &lt;code&gt;heart -shutdown&lt;/code&gt; （Erlang配信に含まれています）または再起動をアクティブ化できる他の適切なプログラムに設定できます。</target>
        </trans-unit>
        <trans-unit id="7356ba3e6c5278038b64fa42047a269f1c25742e" translate="yes" xml:space="preserve">
          <source>To reload a driver, the process must have loaded the driver before, that is, there must be an active &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of the driver in the process.</source>
          <target state="translated">ドライバーを再ロードするには、プロセスがその前にドライバーをロードしている必要があります。つまり、プロセスにドライバーのアクティブ &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; が存在している必要があります。</target>
        </trans-unit>
        <trans-unit id="fa3cdbff1f4721e1fea3341a44c74cdfddea8582" translate="yes" xml:space="preserve">
          <source>To remove the special meaning from a sequence of characters, put them between \Q and \E. This is different from Perl in that $ and @ are handled as literals in \Q...\E sequences in PCRE, while $ and @ cause variable interpolation in Perl. Notice the following examples:</source>
          <target state="translated">文字列から特別な意味を取り除くには、それらを\Qと\Eの間に入れます。これは、PCREでは\Q...\Eでは$と@がリテラルとして扱われるのに対し、Perlでは$と@が変数補間の原因となる点で、Perlとは異なります。以下の例に注目してください。</target>
        </trans-unit>
        <trans-unit id="18463ee935cca0988ac023c8a2bb9233c9fed26c" translate="yes" xml:space="preserve">
          <source>To resolve BIF clashes, use explicit module names or the &lt;code&gt;{no_auto_import,[F/A]}&lt;/code&gt; compiler directive.</source>
          <target state="translated">BIFの衝突を解決するには、明示的なモジュール名または &lt;code&gt;{no_auto_import,[F/A]}&lt;/code&gt; コンパイラディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="b836fc9905c583f17eeb633ad4676ccd91021746" translate="yes" xml:space="preserve">
          <source>To restrict access further, firewall software must be used.</source>
          <target state="translated">さらにアクセスを制限するには、ファイアウォールソフトを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d8f49586e1a231ba1f54695cd73e9669c2fc73d3" translate="yes" xml:space="preserve">
          <source>To retain backwards compatibility, this module can also be used to start a standalone &lt;code&gt;nteventlog&lt;/code&gt; process which is not part of the OS_Mon supervision tree. When starting such a process, the user has to supply an identifier as well as a callback function to handle the messages.</source>
          <target state="translated">下位互換性を維持するために、このモジュールを使用して、OS_Mon管理ツリーの一部ではないスタンドアロンの &lt;code&gt;nteventlog&lt;/code&gt; プロセスを開始することもできます。そのようなプロセスを開始するとき、ユーザーはメッセージを処理するための識別子とコールバック関数を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="df78eacbc0781784bde23219396762a59c5fc919" translate="yes" xml:space="preserve">
          <source>To retrieve information about which processes have fixed which tables, use &lt;code&gt;&lt;a href=&quot;#info_2_safe_fixed_monotonic_time&quot;&gt;info(Tab, safe_fixed_monotonic_time)&lt;/a&gt;&lt;/code&gt;. A system with many processes fixing tables can need a monitor that sends alarms when tables have been fixed for too long.</source>
          <target state="translated">どのプロセスがどのテーブルを修正したかに関する情報を取得するには、 &lt;code&gt;&lt;a href=&quot;#info_2_safe_fixed_monotonic_time&quot;&gt;info(Tab, safe_fixed_monotonic_time)&lt;/a&gt;&lt;/code&gt; ます。テーブルを修正する多くのプロセスがあるシステムでは、テーブルの修正が長すぎるとアラームを送信するモニターが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="d6e2ab13997144de0b0946f9bce9ea8b713fdb68" translate="yes" xml:space="preserve">
          <source>To retrieve lock statistics information, use &lt;code&gt;lcnt:collect/0,1&lt;/code&gt;. The collect operation will start a &lt;code&gt;lcnt&lt;/code&gt; server if it not already started. All collected data will be built into an Erlang term and uploaded to the server and a duration time will also be uploaded. This duration is the time between &lt;code&gt;lcnt:clear/0,1&lt;/code&gt; and &lt;code&gt;lcnt:collect/0,1&lt;/code&gt;.</source>
          <target state="translated">ロック統計情報を取得するには、 &lt;code&gt;lcnt:collect/0,1&lt;/code&gt; を使用します。収集操作は、まだ開始されていない場合、 &lt;code&gt;lcnt&lt;/code&gt; サーバーを開始します。収集されたすべてのデータはErlang用語に組み込まれ、サーバーにアップロードされ、継続時間もアップロードされます。この期間は、 &lt;code&gt;lcnt:clear/0,1&lt;/code&gt; と &lt;code&gt;lcnt:collect/0,1&lt;/code&gt; の間の時間です。</target>
        </trans-unit>
        <trans-unit id="ed81e642c8e411bd6b5d4f1ff2f2a981ab28269a" translate="yes" xml:space="preserve">
          <source>To retrieve options, the following request is used:</source>
          <target state="translated">オプションを取得するには、以下のリクエストを使用します。</target>
        </trans-unit>
        <trans-unit id="c9ff785694d496350bf52e12cf31257901fe0f9a" translate="yes" xml:space="preserve">
          <source>To retrieve previous command lines, press the &lt;code&gt;Up arrow&lt;/code&gt; or use &lt;code&gt;Ctrl-P&lt;/code&gt;.</source>
          <target state="translated">前のコマンドラインを取得するには、 &lt;code&gt;Up arrow&lt;/code&gt; &lt;code&gt;Ctrl-P&lt;/code&gt; か、Ctrl-Pを使用します。</target>
        </trans-unit>
        <trans-unit id="559902e638ff39f33df6bbdca42175eae97e1371" translate="yes" xml:space="preserve">
          <source>To retrieve the current time offset, call &lt;code&gt;&lt;a href=&quot;erlang#time_offset-0&quot;&gt;erlang:time_offset/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在の時間オフセットを取得するには、 &lt;code&gt;&lt;a href=&quot;erlang#time_offset-0&quot;&gt;erlang:time_offset/0&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3766f9d946545324fc3caa134e7e2c3cc1ac0495" translate="yes" xml:space="preserve">
          <source>To retrieve the pathname of the script, call &lt;code&gt;&lt;a href=&quot;#script_name_0&quot;&gt;escript:script_name()&lt;/a&gt;&lt;/code&gt; from your script (the pathname is usually, but not always, absolute).</source>
          <target state="translated">スクリプトのパス名を取得するには、スクリプトから &lt;code&gt;&lt;a href=&quot;#script_name_0&quot;&gt;escript:script_name()&lt;/a&gt;&lt;/code&gt; を呼び出します（パス名は通常、絶対パスではありません）。</target>
        </trans-unit>
        <trans-unit id="2fa3ffd8aedc2e1d61b1e455bb122f9f20bde0a5" translate="yes" xml:space="preserve">
          <source>To retrieve the size of a tuple, either use function &lt;code&gt;erl_size&lt;/code&gt; (which checks the type of the checked term and works for a binary as well as for a tuple) or &lt;code&gt;ERL_TUPLE_SIZE(tuple)&lt;/code&gt; returns the arity of a tuple. &lt;code&gt;erl_size()&lt;/code&gt; does the same thing, but it checks that the argument is a tuple. &lt;code&gt;erl_element(index,tuple)&lt;/code&gt; returns the element corresponding to a given position in the tuple.</source>
          <target state="translated">タプルのサイズを取得するには、関数 &lt;code&gt;erl_size&lt;/code&gt; （チェックされた用語のタイプをチェックし、バイナリとタプルの両方に対して機能する）を使用するか、 &lt;code&gt;ERL_TUPLE_SIZE(tuple)&lt;/code&gt; がタプルのアリティを返します。 &lt;code&gt;erl_size()&lt;/code&gt; は同じことを行いますが、引数がタプルであることを確認します。 &lt;code&gt;erl_element(index,tuple)&lt;/code&gt; は、タプル内の指定された位置に対応する要素を返します。</target>
        </trans-unit>
        <trans-unit id="e48e571028f75c8447b25387e9c4c4797341c527" translate="yes" xml:space="preserve">
          <source>To return a list of the files in a tar file, use function &lt;code&gt;&lt;a href=&quot;#table-1&quot;&gt;table/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#table-2&quot;&gt;table/2&lt;/a&gt;&lt;/code&gt;. To print a list of files to the Erlang shell, use function &lt;code&gt;&lt;a href=&quot;#t-1&quot;&gt;t/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#tt-1&quot;&gt;tt/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">tarファイル内のファイルのリストを返すには、関数 &lt;code&gt;&lt;a href=&quot;#table-1&quot;&gt;table/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#table-2&quot;&gt;table/2&lt;/a&gt;&lt;/code&gt; を使用します。Erlangシェルにファイルのリストを出力するには、関数 &lt;code&gt;&lt;a href=&quot;#t-1&quot;&gt;t/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#tt-1&quot;&gt;tt/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="340c1d928e96b2c334351d4a254c0683a554ee08" translate="yes" xml:space="preserve">
          <source>To return a list of the files in a zip archive, use function &lt;code&gt;&lt;a href=&quot;#list_dir-1&quot;&gt;list_dir/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#list_dir-2&quot;&gt;list_dir/2&lt;/a&gt;&lt;/code&gt;. They are also available as &lt;code&gt;table/1,2&lt;/code&gt;, to resemble the &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">zipアーカイブ内のファイルのリストを返すには、関数 &lt;code&gt;&lt;a href=&quot;#list_dir-1&quot;&gt;list_dir/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#list_dir-2&quot;&gt;list_dir/2&lt;/a&gt;&lt;/code&gt; を使用します。これらは、 &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; モジュールに似た &lt;code&gt;table/1,2&lt;/code&gt; としても利用できます。</target>
        </trans-unit>
        <trans-unit id="ede464349d4cd7d18cdfbdde4b663fdde07fb367" translate="yes" xml:space="preserve">
          <source>To return a timetrap time value (other than a function).</source>
          <target state="translated">タイムトラップの時間値を返すには(関数以外の)。</target>
        </trans-unit>
        <trans-unit id="8b77285912aad5ab1ca119d023b421a0ece59988" translate="yes" xml:space="preserve">
          <source>To return only a few answers, cursors can be used. The following code returns no more than five answers using an ETS table for storing the unique answers:</source>
          <target state="translated">少数の回答のみを返すには、カーソルを使用することができます。以下のコードは、一意の回答を格納するためのETSテーブルを使用して、5つ以下の回答を返します。</target>
        </trans-unit>
        <trans-unit id="9f1313328915fb09221beb5318c9e4409d5bb780" translate="yes" xml:space="preserve">
          <source>To return your own non-zero exit code, call &lt;code&gt;halt(ExitCode)&lt;/code&gt;, for example:</source>
          <target state="translated">ゼロ以外の独自の終了コードを返すには、 &lt;code&gt;halt(ExitCode)&lt;/code&gt; を呼び出します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="1b79ecfdca80ef63664553eeb43bf5bf50699646" translate="yes" xml:space="preserve">
          <source>To revert to the old representation of the types, use option &lt;code&gt;legacy_erlang_types&lt;/code&gt;.</source>
          <target state="translated">タイプの以前の表現に戻すには、 &lt;code&gt;legacy_erlang_types&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="91cba5ad0a4514ff3580b9b3644134649e4008a3" translate="yes" xml:space="preserve">
          <source>To run DTLS add the option {protocol, dtls} to third argument.</source>
          <target state="translated">DTLS を実行するには、第三引数に {protocol,dtls}オプションを追加します。</target>
        </trans-unit>
        <trans-unit id="6379d836d463079cbc440c281ea46705465f1d9e" translate="yes" xml:space="preserve">
          <source>To run it manually do the following:</source>
          <target state="translated">手動で実行するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="adfad10f00ccaf0e104d2a8e3a7d4d9ca3d7a1f4" translate="yes" xml:space="preserve">
          <source>To save &lt;code&gt;Config&lt;/code&gt; data from a test case that is to be skipped, return tuple &lt;code&gt;{skip_and_save,Reason,ConfigList}&lt;/code&gt;.</source>
          <target state="translated">スキップされるテストケースの &lt;code&gt;Config&lt;/code&gt; データを保存するには、タプル &lt;code&gt;{skip_and_save,Reason,ConfigList}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="519bc4bce2b33dabd607dc6ed921c16f90d09ddb" translate="yes" xml:space="preserve">
          <source>To save &lt;code&gt;Config&lt;/code&gt; data, return tuple &lt;code&gt;{save_config,ConfigList}&lt;/code&gt; from &lt;code&gt;end_per_testcase&lt;/code&gt; or from the main test case function.</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; データを保存するには、 &lt;code&gt;end_per_testcase&lt;/code&gt; またはメインのテストケース関数からタプル &lt;code&gt;{save_config,ConfigList}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="27c3f8d5138cdbd33fa95b3ba65e0753971bf624" translate="yes" xml:space="preserve">
          <source>To scale well, it is a good idea to ensure that the records are evenly distributed over all fragments, including the new one.</source>
          <target state="translated">うまくスケールするためには、新しいものも含めて、すべてのフラグメントに均等に記録が分散されるようにするのが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="4c8083213bdb28df6c894a96e97a47fb6b900182" translate="yes" xml:space="preserve">
          <source>To schedule a dirty NIF for execution, the application has two options:</source>
          <target state="translated">ダーティNIFの実行をスケジュールするには、アプリケーションには2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="2dcc54bfbac822c2d50a90e01df3c8520791a56a" translate="yes" xml:space="preserve">
          <source>To see all supported cipher suites, call &lt;code&gt;ssl:cipher_suites(all)&lt;/code&gt;. The available cipher suites for a connection depend on your certificate. Specific cipher suites that you want your connection to use can also be specified. Default is to use the strongest available.</source>
          <target state="translated">サポートされているすべての暗号スイートを表示するには、 &lt;code&gt;ssl:cipher_suites(all)&lt;/code&gt; を呼び出します。接続に使用できる暗号スイートは、証明書によって異なります。接続で使用する特定の暗号スイートを指定することもできます。デフォルトでは、使用可能な最強のものを使用します。</target>
        </trans-unit>
        <trans-unit id="faa6a0098bcbb7837e8269c97adc5d1ee4575f3f" translate="yes" xml:space="preserve">
          <source>To see more detailed information about a node, double-click the row, or right-click the row and select &lt;strong&gt;Properties for node &amp;lt;node&amp;gt;&lt;/strong&gt;. From the right-click menu, you can also select &lt;strong&gt;Properties for &amp;lt;port&amp;gt;&lt;/strong&gt;, to open the detailed information window for the controlling port.</source>
          <target state="translated">ノードの詳細情報を表示するには、行をダブルクリックするか、行を右クリックし&lt;strong&gt;てノード&amp;lt;node&amp;gt;のプロパティを&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。右クリックメニューから[ &lt;strong&gt;&amp;lt;port&amp;gt;のプロパティ]を&lt;/strong&gt;選択して、制御ポートの詳細情報ウィンドウを開くこともでき&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9b51fe379feee1d788abaddbf99683f3e6711cc7" translate="yes" xml:space="preserve">
          <source>To see relevant version information for ssl, call &lt;code&gt;ssl:versions/0&lt;/code&gt; .</source>
          <target state="translated">sslに関連するバージョン情報を表示するには、 &lt;code&gt;ssl:versions/0&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4f1a753c21aa1ee5d67b189d4fc20785c035d677" translate="yes" xml:space="preserve">
          <source>To see what names there are:</source>
          <target state="translated">どんな名前があるのかを確認するために</target>
        </trans-unit>
        <trans-unit id="1859a2e235479aee5e6ed677756b1cdde77dacdb" translate="yes" xml:space="preserve">
          <source>To see which filters are currently installed in the system, use &lt;code&gt;&lt;a href=&quot;logger#get_config-0&quot;&gt;logger:get_config/0&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;logger#get_primary_config-0&quot;&gt;logger:get_primary_config/0&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger#get_handler_config-1&quot;&gt;logger:get_handler_config/1&lt;/a&gt;&lt;/code&gt;. Filters are listed in the order they are applied, that is, the first filter in the list is applied first, and so on.</source>
          <target state="translated">現在システムにインストールされているフィルターを確認するには、 &lt;code&gt;&lt;a href=&quot;logger#get_config-0&quot;&gt;logger:get_config/0&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;logger#get_primary_config-0&quot;&gt;logger:get_primary_config/0&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;logger#get_handler_config-1&quot;&gt;logger:get_handler_config/1&lt;/a&gt;&lt;/code&gt; を使用します。フィルターは、適用された順序でリストされます。つまり、リストの最初のフィルターが最初に適用されます。</target>
        </trans-unit>
        <trans-unit id="45a5562edb75b6f3eb1acaabf3b28d155bb31931" translate="yes" xml:space="preserve">
          <source>To select more text than fits in the window, start by selecting a small part in the beginning of the text you want, then use the scrollbar to view the end of the desired selection, point to it, and press the &lt;strong&gt;right&lt;/strong&gt; mouse button. The whole area between your first selection and the point where you right-clicked is included in the selection.</source>
          <target state="translated">ウィンドウに収まらないより多くのテキストを選択するには、目的のテキストの先頭にある小さな部分を選択してから、スクロールバーを使用して目的の選択の終わりを表示し、それをポイントして、マウスの&lt;strong&gt;右&lt;/strong&gt;ボタンを押します。最初の選択と右クリックしたポイントの間の領域全体が選択に含まれます。</target>
        </trans-unit>
        <trans-unit id="33c0c20ef88e8a421c1e58b4d073cd8cec174df4" translate="yes" xml:space="preserve">
          <source>To select text in the &lt;code&gt;werl&lt;/code&gt; window, press and hold the left mouse button and drag the mouse over the text you want to select. If the selection crosses line boundaries, the selected text consists of complete lines where applicable (just like in a word processor).</source>
          <target state="translated">&lt;code&gt;werl&lt;/code&gt; ウィンドウでテキストを選択するには、マウスの左ボタンを押したまま、選択するテキストの上にマウスをドラッグします。選択範囲が行の境界を越える場合、選択されたテキストは（ワードプロセッサの場合と同様に）該当する場合は完全な行で構成されます。</target>
        </trans-unit>
        <trans-unit id="baa709b93b3829a0df77188d6fd0ef0592956e57" translate="yes" xml:space="preserve">
          <source>To separate the first elements of the list from the rest of the list, &lt;code&gt;|&lt;/code&gt; is used. &lt;code&gt;First&lt;/code&gt; has got value 1 and &lt;code&gt;TheRest&lt;/code&gt; has got the value [2,3,4,5].</source>
          <target state="translated">リストの最初の要素をリストの残りの要素から分離するには、 &lt;code&gt;|&lt;/code&gt; 使用されている。 &lt;code&gt;First&lt;/code&gt; 値は1で、 &lt;code&gt;TheRest&lt;/code&gt; の値は[ 2,3,4,5 ]です。</target>
        </trans-unit>
        <trans-unit id="c01449dac6b2c1e79ac6f7a80fed6fdc43f67423" translate="yes" xml:space="preserve">
          <source>To set the default handler, that starts initially with the Kernel application, to log to file instead of &lt;code&gt;standard_io&lt;/code&gt;, change the Kernel default logger configuration. Example:</source>
          <target state="translated">カーネルアプリケーションで最初に開始するデフォルトハンドラーを設定し、 &lt;code&gt;standard_io&lt;/code&gt; の代わりにファイルにログを記録するには、カーネルのデフォルトロガー構成を変更します。例：</target>
        </trans-unit>
        <trans-unit id="f3ccaabc6c6c384fa4607146b378de54d2e651c3" translate="yes" xml:space="preserve">
          <source>To set the time warp mode, pass command-line argument &lt;code&gt;&lt;a href=&quot;erl#+C_&quot;&gt;+C [no_time_warp|single_time_warp|multi_time_warp]&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タイムワープモードを設定するには、コマンドライン引数 &lt;code&gt;&lt;a href=&quot;erl#+C_&quot;&gt;+C [no_time_warp|single_time_warp|multi_time_warp]&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="aa0688ed50c18775a5b27e32c9d7ee33f891bdef" translate="yes" xml:space="preserve">
          <source>To set up Erlang distribution over TLS:</source>
          <target state="translated">TLS上のErlangディストリビューションを設定します。</target>
        </trans-unit>
        <trans-unit id="d2cce9d630a9f1b9f9af96de1b5c45472cb5cc3c" translate="yes" xml:space="preserve">
          <source>To set up client/server connections:</source>
          <target state="translated">クライアント/サーバー接続を設定します。</target>
        </trans-unit>
        <trans-unit id="b43c85b2017cddcd0eeca4a7ee756681a2b5279f" translate="yes" xml:space="preserve">
          <source>To set up the Erlang Emacs mode on a UNIX systems, edit/create the file &lt;code&gt;.emacs&lt;/code&gt; in the your home directory.</source>
          <target state="translated">UNIXシステムでErlang Emacsモードを設定するには、ホームディレクトリの &lt;code&gt;.emacs&lt;/code&gt; ファイルを編集/作成します。</target>
        </trans-unit>
        <trans-unit id="17525f3111c9dc221811cc59d7953bea94c55a6a" translate="yes" xml:space="preserve">
          <source>To set up the Erlang Emacs mode on a Windows systems, edit/create the file &lt;code&gt;.emacs&lt;/code&gt;, the location of the file depends on the configuration of the system. If the &lt;strong&gt;HOME&lt;/strong&gt; environment variable is set, Emacs will look for the &lt;code&gt;.emacs&lt;/code&gt; file in the directory indicated by the &lt;strong&gt;HOME&lt;/strong&gt; variable. If &lt;strong&gt;HOME&lt;/strong&gt; is not set, Emacs will look for the &lt;code&gt;.emacs&lt;/code&gt; file in &lt;code&gt;C:\&lt;/code&gt;.</source>
          <target state="translated">WindowsシステムでErlang Emacsモードをセットアップするには、ファイル &lt;code&gt;.emacs&lt;/code&gt; を編集/作成します。ファイルの場所は、システムの構成によって異なります。場合は&lt;strong&gt;HOMEの&lt;/strong&gt;環境変数が設定され、Emacsが探します &lt;code&gt;.emacs&lt;/code&gt; ディレクトリ内のファイルで示さ&lt;strong&gt;HOMEの&lt;/strong&gt;変数。&lt;strong&gt;HOME&lt;/strong&gt;が設定されていない場合、Emacsは &lt;code&gt;C:\&lt;/code&gt; で &lt;code&gt;.emacs&lt;/code&gt; ファイルを探します。</target>
        </trans-unit>
        <trans-unit id="8b3c1a4e5864dbab572e9a5afb37792b236ea4a2" translate="yes" xml:space="preserve">
          <source>To simplify driver replacement, avoid designing your system so that more than one &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; has the driver loaded.</source>
          <target state="translated">ドライバーの交換を簡略化するには、複数の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; がドライバーをロードするようにシステムを設計しないでください。</target>
        </trans-unit>
        <trans-unit id="6657bbbea9ee8b248ced80c3f983940e0a515151" translate="yes" xml:space="preserve">
          <source>To simulate a busy server, you can insert a delay between when &lt;code&gt;epmd&lt;/code&gt; gets notified that a new connection is requested and when the connection gets accepted.</source>
          <target state="translated">ビジー状態のサーバーをシミュレートするために、新しい接続が要求されたことが &lt;code&gt;epmd&lt;/code&gt; に通知されてから、接続が受け入れられるまでの間に遅延を挿入できます。</target>
        </trans-unit>
        <trans-unit id="70ce8a79d8ffb4771e6a29808f1bcbc9c8b69320" translate="yes" xml:space="preserve">
          <source>To specify if the &lt;code&gt;cover&lt;/code&gt; tool is to be stopped after the test is completed (see &lt;code&gt;&lt;a href=&quot;cover_chapter#cover_stop&quot;&gt;Code Coverage Analysis&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">テストの完了後に &lt;code&gt;cover&lt;/code&gt; ツールを停止するかどうかを指定するには（ &lt;code&gt;&lt;a href=&quot;cover_chapter#cover_stop&quot;&gt;Code Coverage Analysis&lt;/a&gt;&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="f982d3b08151a090766a53c8ae58a0af1c7b2c36" translate="yes" xml:space="preserve">
          <source>To specify in which order groups are to be executed (also with respect to test cases that are not part of any group), add tuples on the form &lt;code&gt;{group,GroupName}&lt;/code&gt; to the &lt;code&gt;all/0&lt;/code&gt; list.</source>
          <target state="translated">注文グループは、（また、任意のグループの一部ではないテストケースに関して）実行されるべきで指定し、フォーム上のタプルを追加 &lt;code&gt;{group,GroupName}&lt;/code&gt; の &lt;code&gt;all/0&lt;/code&gt; リスト。</target>
        </trans-unit>
        <trans-unit id="1db9eb6998e57480fd022b5b675c80cbbd9dce31" translate="yes" xml:space="preserve">
          <source>To specify starting line for scanning in document which contains fragments of XML.</source>
          <target state="translated">XMLの断片を含む文書のスキャン開始行を指定します。</target>
        </trans-unit>
        <trans-unit id="f61119c7e1b2cdde6ff6d2fa7c86881726228a8c" translate="yes" xml:space="preserve">
          <source>To specify the modules to be included in the code coverage test, provide a cover specification file. With this file you can point out specific modules or specify directories containing modules to be included in the analysis. You can also specify modules to be excluded from the analysis.</source>
          <target state="translated">コードカバレッジテストに含めるモジュールを指定するには、カバー指定ファイルを提供します。このファイルを使用して、特定のモジュールを指摘したり、解析に含めるモジュールを含むディ レクトリを指定したりできます。また、解析から除外するモジュールを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="a7e24433e118f3675a94b0839832059d75700c72" translate="yes" xml:space="preserve">
          <source>To specify which PLT, use option &lt;code&gt;--plt&lt;/code&gt;.</source>
          <target state="translated">どのPLTを指定するには、オプション &lt;code&gt;--plt&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="18d24b6fe052b97ca4a3faae65960b6ff118b488" translate="yes" xml:space="preserve">
          <source>To speed up the execution of &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release&lt;/a&gt;&lt;/code&gt;, first call &lt;code&gt;&lt;a href=&quot;#check_install_release-1&quot;&gt;check_install_release&lt;/a&gt;&lt;/code&gt;, using option &lt;code&gt;purge&lt;/code&gt;. This does the same check for old code. Then purges all modules that can be soft-purged. The purged modules do then no longer have any old code, and &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release&lt;/a&gt;&lt;/code&gt; does not need to do the checks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release&lt;/a&gt;&lt;/code&gt; の実行を高速化するには、最初にオプション &lt;code&gt;purge&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;#check_install_release-1&quot;&gt;check_install_release&lt;/a&gt;&lt;/code&gt; を呼び出します。これは、古いコードに対して同じチェックを行います。次に、ソフトパージできるすべてのモジュールをパージします。パージされたモジュールには古いコードがなくなり、 &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release&lt;/a&gt;&lt;/code&gt; はチェックを行う必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="881ed36f05e94ae0a21c8004b304eb3bc37646d6" translate="yes" xml:space="preserve">
          <source>To start a sequential trace, the user must explicitly set the trace token in the process that will send the first message in a sequence.</source>
          <target state="translated">シーケンシャルトレースを開始するには、シーケンスの最初のメッセージを送信するプロセスでトレーストークンを明示的に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="76f1852c3add5606a83bf5fb3f21588a546c38d4" translate="yes" xml:space="preserve">
          <source>To start a similar tracer on a remote node, use &lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リモートノードで同様のトレーサを開始するには、 &lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="af5676be701d6ebffdcd18fcceb076e666de274b" translate="yes" xml:space="preserve">
          <source>To start a similar tracer on a remote node, use &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リモートノードで同様のトレーサーを開始するには、 &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="069df5419adf0afb2c7538e01048c5b636cbd10a" translate="yes" xml:space="preserve">
          <source>To start all applications specified in the original &lt;code&gt;mysystem.rel&lt;/code&gt; file, use flag &lt;code&gt;-boot&lt;/code&gt; as follows:</source>
          <target state="translated">元の &lt;code&gt;mysystem.rel&lt;/code&gt; ファイルで指定されているすべてのアプリケーションを起動するには、次のようにフラグ &lt;code&gt;-boot&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c6430f32849bacfbbbfdd73794b90f8a5cb5633c" translate="yes" xml:space="preserve">
          <source>To start an &lt;strong&gt;embedded target system&lt;/strong&gt;, the shell script &lt;code&gt;bin/start&lt;/code&gt; is used. The script calls &lt;code&gt;bin/run_erl&lt;/code&gt;, which in turn calls &lt;code&gt;bin/start_erl&lt;/code&gt; (roughly, &lt;code&gt;start_erl&lt;/code&gt; is an embedded variant of &lt;code&gt;erl&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;組み込みターゲットシステム&lt;/strong&gt;を起動するには、シェルスクリプト &lt;code&gt;bin/start&lt;/code&gt; を使用します。スクリプトは &lt;code&gt;bin/run_erl&lt;/code&gt; を呼び出し、次に &lt;code&gt;bin/start_erl&lt;/code&gt; を呼び出します（大まかに、 &lt;code&gt;start_erl&lt;/code&gt; は &lt;code&gt;erl&lt;/code&gt; の組み込みバリアントです）。</target>
        </trans-unit>
        <trans-unit id="9d22fc7b6b61af9ef2d6145dba2c1c36bbe3774d" translate="yes" xml:space="preserve">
          <source>To start an event manager for handling errors, as described in the previous example, call the following function:</source>
          <target state="translated">先ほどの例で説明したように、エラー処理用のイベントマネージャを起動するには、以下の関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="65443b4fc91dab6b76dab71d1d80de342db77ebd" translate="yes" xml:space="preserve">
          <source>To start the &lt;code&gt;Company&lt;/code&gt; database and get it running on the two specified nodes, enter the following commands:</source>
          <target state="translated">&lt;code&gt;Company&lt;/code&gt; データベースを起動して、指定した2つのノードで実行するには、次のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="b812e0ece5117a4dc75569139c24b19927c8e4d0" translate="yes" xml:space="preserve">
          <source>To start the debug enabled runtime system execute:</source>
          <target state="translated">デバッグ可能なランタイムシステムを起動するには、execute を実行します。</target>
        </trans-unit>
        <trans-unit id="7fffc54b92267ef311f536c196ba13936bd59530" translate="yes" xml:space="preserve">
          <source>To start the interactive shell mode, start an Erlang shell manually and call &lt;code&gt;&lt;a href=&quot;ct#install-1&quot;&gt;ct:install/1&lt;/a&gt;&lt;/code&gt; to install any configuration data you might need (use &lt;code&gt;[]&lt;/code&gt; as argument otherwise). Then call &lt;code&gt;&lt;a href=&quot;ct#start_interactive-0&quot;&gt;ct:start_interactive/0&lt;/a&gt;&lt;/code&gt; to start &lt;code&gt;Common Test&lt;/code&gt;.</source>
          <target state="translated">対話型シェルモードを開始するには、Erlangシェルを手動で開始し、 &lt;code&gt;&lt;a href=&quot;ct#install-1&quot;&gt;ct:install/1&lt;/a&gt;&lt;/code&gt; を呼び出して必要な構成データをインストールします（それ以外の場合は &lt;code&gt;[]&lt;/code&gt; を引数として使用します）。次に、 &lt;code&gt;&lt;a href=&quot;ct#start_interactive-0&quot;&gt;ct:start_interactive/0&lt;/a&gt;&lt;/code&gt; を呼び出して &lt;code&gt;Common Test&lt;/code&gt; を開始します。</target>
        </trans-unit>
        <trans-unit id="2407e72a3ed0dce989e1ddb620f5b91d6fb2b5a8" translate="yes" xml:space="preserve">
          <source>To start, open a registry:</source>
          <target state="translated">開始するには、レジストリを開きます。</target>
        </trans-unit>
        <trans-unit id="37329084650848867e8284198738d0867fe2834a" translate="yes" xml:space="preserve">
          <source>To stop Erlang Top, use function &lt;code&gt;&lt;a href=&quot;etop#stop-0&quot;&gt;etop:stop/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlang Topを停止するには、関数 &lt;code&gt;&lt;a href=&quot;etop#stop-0&quot;&gt;etop:stop/0&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="d0a960f069bc98edbba1ff0928e02093c32ffad4" translate="yes" xml:space="preserve">
          <source>To stop a distributed application, &lt;code&gt;stop/1&lt;/code&gt; must be called on all nodes where it can execute (that is, on all nodes where it has been started). The call to &lt;code&gt;stop/1&lt;/code&gt; on the node where the application currently executes stops its execution. The application is not moved between nodes, as &lt;code&gt;stop/1&lt;/code&gt; is called on the node where the application currently executes before &lt;code&gt;stop/1&lt;/code&gt; is called on the other nodes.</source>
          <target state="translated">分散アプリケーションを停止するには、アプリケーションを実行できるすべてのノード（つまり、アプリケーションが起動されているすべてのノード）で &lt;code&gt;stop/1&lt;/code&gt; を呼び出す必要があります。アプリケーションが現在実行されているノードで &lt;code&gt;stop/1&lt;/code&gt; を呼び出すと、その実行が停止します。 &lt;code&gt;stop/1&lt;/code&gt; が他のノードで呼び出される前にアプリケーションが現在実行されているノードで &lt;code&gt;stop/1&lt;/code&gt; が呼び出されるため、アプリケーションはノード間で移動されません。</target>
        </trans-unit>
        <trans-unit id="5b81bcf2bbed22c8b9d584525dc2bbe3c5752e21" translate="yes" xml:space="preserve">
          <source>To stop one or more tests, use function &lt;code&gt;&lt;a href=&quot;ct_master#abort-0&quot;&gt;ct_master:abort()&lt;/a&gt;&lt;/code&gt; (to stop all) or &lt;code&gt;&lt;a href=&quot;ct_master#abort-1&quot;&gt;ct_master:abort(Nodes)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">1つ以上のテストを停止するには、関数 &lt;code&gt;&lt;a href=&quot;ct_master#abort-0&quot;&gt;ct_master:abort()&lt;/a&gt;&lt;/code&gt; （すべてを停止する）または &lt;code&gt;&lt;a href=&quot;ct_master#abort-1&quot;&gt;ct_master:abort(Nodes)&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b41c55a13290a9e7e9fdbffa7dec308f34e8baa6" translate="yes" xml:space="preserve">
          <source>To stop the Erlang emulator, close the &lt;code&gt;werl&lt;/code&gt; window.</source>
          <target state="translated">Erlangエミュレーターを停止するには、 &lt;code&gt;werl&lt;/code&gt; ウィンドウを閉じます。</target>
        </trans-unit>
        <trans-unit id="805a085d9254eb5937e5f4dd565453dd8d6af7f9" translate="yes" xml:space="preserve">
          <source>To sum up this section: &lt;strong&gt;Do not use &lt;code&gt;erlang:now/0&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">このセクションを要約すると、&lt;strong&gt; &lt;code&gt;erlang:now/0&lt;/code&gt; を&lt;/strong&gt;&lt;strong&gt;使用しないでください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4c3f23c8b7d11fd791f43a0f06c76ab501c60d6" translate="yes" xml:space="preserve">
          <source>To summarize, &lt;code&gt;my_binary_to_list/1&lt;/code&gt; only needs to create &lt;strong&gt;one&lt;/strong&gt; match context and no sub binaries.</source>
          <target state="translated">要約すると、 &lt;code&gt;my_binary_to_list/1&lt;/code&gt; は、&lt;strong&gt;1つの&lt;/strong&gt;一致コンテキストを作成するだけで、サブバイナリを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="76f6d1c7fd98a557f9e7456fd478d01cb713b47b" translate="yes" xml:space="preserve">
          <source>To support Unicode in Erlang, problems in various areas have been addressed. This section describes each area briefly and more thoroughly later in this User's Guide.</source>
          <target state="translated">ErlangでUnicodeをサポートするために、さまざまな分野の問題に対処してきました。このセクションではそれぞれの分野について簡単に説明し、後ほどこのユーザーズガイドで詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="490eb8f14b00a3993b65db4b76111ea78b82422f" translate="yes" xml:space="preserve">
          <source>To support the debug facilites in &lt;code&gt;sys&lt;/code&gt;, a &lt;strong&gt;debug structure&lt;/strong&gt; is needed. The &lt;code&gt;Deb&lt;/code&gt; term is initialized using &lt;code&gt;sys:debug_options/1&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; のデバッグ機能をサポートするには、&lt;strong&gt;デバッグ構造&lt;/strong&gt;が必要です。 &lt;code&gt;Deb&lt;/code&gt; 用語を使用して初期化され &lt;code&gt;sys:debug_options/1&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="27cb03280676d8f91c2c5f4617f6dcad84db1918" translate="yes" xml:space="preserve">
          <source>To take Erlang down gracefully, see the &lt;code&gt;erl_call(1)&lt;/code&gt; manual page in &lt;code&gt;erl_interface&lt;/code&gt; for details on the use of &lt;code&gt;erl_call&lt;/code&gt;. However, that requires that Erlang runs as a distributed node, which is not always the case.</source>
          <target state="translated">ダウン優雅にアーランを取るために、参照 &lt;code&gt;erl_call(1)&lt;/code&gt; でマニュアルページを &lt;code&gt;erl_interface&lt;/code&gt; の使用の詳細については &lt;code&gt;erl_call&lt;/code&gt; 。ただし、Erlangを分散ノードとして実行する必要がありますが、常にそうであるとは限りません。</target>
        </trans-unit>
        <trans-unit id="794cd63b456b29e5f25c1b3a3a1a7cadacb90ffd" translate="yes" xml:space="preserve">
          <source>To test the distribution, the &lt;code&gt;net_kernel:start/1&lt;/code&gt; function can be used. It is useful, as it starts the distribution on a running system, where tracing/debugging can be performed. The &lt;code&gt;net_kernel:start/1&lt;/code&gt; routine takes a list as its single argument. The list first element in the list is to be the node name (without the &quot;@hostname&quot;) as an atom. The second (and last) element is to be one of the atoms &lt;code&gt;shortnames&lt;/code&gt; or &lt;code&gt;longnames&lt;/code&gt;. In the example case, &lt;code&gt;shortnames&lt;/code&gt; is preferred.</source>
          <target state="translated">配布をテストするには、 &lt;code&gt;net_kernel:start/1&lt;/code&gt; 関数を使用できます。トレース/デバッグを実行できる実行中のシステムで配布を開始するので便利です。 &lt;code&gt;net_kernel:start/1&lt;/code&gt; ルーチンは、その1つの引数としてリストを取ります。リストのリストの最初の要素は、アトムとしてのノード名（ &quot;@hostname&quot;なし）です。 2番目（および最後）の要素は、アトムの &lt;code&gt;shortnames&lt;/code&gt; または &lt;code&gt;longnames&lt;/code&gt; のいずれかになります。この例の場合、 &lt;code&gt;shortnames&lt;/code&gt; が推奨されます。</target>
        </trans-unit>
        <trans-unit id="1e25ada887f1b7f960ffeb09cb03b19c929e33ba" translate="yes" xml:space="preserve">
          <source>To the extent that it's practical, support SystemTap on Linux via DTrace provider compatibility.</source>
          <target state="translated">実用的な範囲で、DTrace プロバイダの互換性を介して Linux 上で SystemTap をサポートします。</target>
        </trans-unit>
        <trans-unit id="fded3aabb510b1e1a75f760a53342f304a3c739e" translate="yes" xml:space="preserve">
          <source>To to start the application (agent and/or manager), the configuration files must be modified and there are two ways of doing this. Either edit the files manually, or run the configuration tool as follows.</source>
          <target state="translated">アプリケーション(エージェントやマネージャ)を起動するためには、設定ファイルを変更する必要があります。ファイルを手動で編集するか、以下のように設定ツールを実行します。</target>
        </trans-unit>
        <trans-unit id="840859542432e2ae9a768d1a2567eb03227d2acc" translate="yes" xml:space="preserve">
          <source>To trace function calls, you also need to set up &lt;strong&gt;trace patterns&lt;/strong&gt;. Trace patterns select the function calls to be traced. The number of traced function calls can be further reduced with &lt;strong&gt;match specifications&lt;/strong&gt;. Match specifications can also be used to trigger more information in the trace messages.</source>
          <target state="translated">関数呼び出しをトレースするには、&lt;strong&gt;トレースパターン&lt;/strong&gt;も設定する必要があり&lt;strong&gt;ます&lt;/strong&gt;。トレースパターンは、トレースする関数呼び出しを選択します。&lt;strong&gt;一致する指定&lt;/strong&gt;により、トレースされる関数呼び出しの数をさらに減らすことができます。一致指定を使用して、トレースメッセージの詳細情報をトリガーすることもできます。</target>
        </trans-unit>
        <trans-unit id="0c07cb7f2e8d2563df9d5fc9199e90556dc33e70" translate="yes" xml:space="preserve">
          <source>To trigger file compression, its extension must match with the &lt;code&gt;compress&lt;/code&gt; condition and must not match the &lt;code&gt;uncompress&lt;/code&gt; condition. For example, if &lt;code&gt;compress&lt;/code&gt; is set to &lt;code&gt;[&quot;gif&quot;, &quot;jpg&quot;]&lt;/code&gt; and &lt;code&gt;uncompress&lt;/code&gt; is set to &lt;code&gt;[&quot;jpg&quot;]&lt;/code&gt;, only files with extension &lt;code&gt;&quot;gif&quot;&lt;/code&gt; are compressed.</source>
          <target state="translated">ファイル圧縮をトリガーするには、その拡張子が &lt;code&gt;compress&lt;/code&gt; 条件と一致し、 &lt;code&gt;uncompress&lt;/code&gt; 圧縮条件と一致してはなりません。たとえば、 &lt;code&gt;compress&lt;/code&gt; が &lt;code&gt;[&quot;gif&quot;, &quot;jpg&quot;]&lt;/code&gt; 設定され、 &lt;code&gt;uncompress&lt;/code&gt; が &lt;code&gt;[&quot;jpg&quot;]&lt;/code&gt; に設定されている場合、拡張子が &lt;code&gt;&quot;gif&quot;&lt;/code&gt; のファイルのみが圧縮されます。</target>
        </trans-unit>
        <trans-unit id="bdcf647abab37b8b3f8542efaeba10430ea6f745" translate="yes" xml:space="preserve">
          <source>To turn off the Debugger stack trace facility, select option &lt;strong&gt;Stack Off&lt;/strong&gt;.</source>
          <target state="translated">デバッガーのスタックトレース機能をオフにするには、[ &lt;strong&gt;スタックオフ&lt;/strong&gt; ]オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="25889e4ee1555771488e4d2de1a7bf2d51b5a3ab" translate="yes" xml:space="preserve">
          <source>To turn off warnings for improper lists, add the following line to the source file:</source>
          <target state="translated">不適切なリストに対する警告をオフにするには、以下の行をソースファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="8ed98f94cb168a3368774c5de90ad9aac72676b6" translate="yes" xml:space="preserve">
          <source>To understand the behavior of &lt;code&gt;Mnesia&lt;/code&gt; at startup, it is essential to understand how &lt;code&gt;Mnesia&lt;/code&gt; reacts when it loses contact with &lt;code&gt;Mnesia&lt;/code&gt; on another node. At this stage, &lt;code&gt;Mnesia&lt;/code&gt; cannot distinguish between a communication failure and a &quot;normal&quot; node-down. When this occurs, &lt;code&gt;Mnesia&lt;/code&gt; assumes that the other node is no longer running, whereas, in reality, the communication between the nodes has failed.</source>
          <target state="translated">起動時の &lt;code&gt;Mnesia&lt;/code&gt; の動作を理解するには、別のノード上の &lt;code&gt;Mnesia&lt;/code&gt; との接続を失ったときの &lt;code&gt;Mnesia&lt;/code&gt; の反応を理解することが不可欠です。この段階では、 &lt;code&gt;Mnesia&lt;/code&gt; は通信障害と「通常の」ノードダウンを区別できません。これが発生すると、 &lt;code&gt;Mnesia&lt;/code&gt; はもう一方のノードが稼働していないと想定しますが、実際には、ノード間の通信が失敗しています。</target>
        </trans-unit>
        <trans-unit id="57ca1753f443dcffddf87cab0a01f1c5e59426d5" translate="yes" xml:space="preserve">
          <source>To understand this text, you also have to look at the &lt;code&gt;yacc&lt;/code&gt; documentation in the UNIX(TM) manual. This is most probably necessary in order to understand the idea of a parser generator, and the principle and problems of LALR parsing with finite look-ahead.</source>
          <target state="translated">このテキストを理解するには、UNIX（TM）マニュアルの &lt;code&gt;yacc&lt;/code&gt; ドキュメントも参照する必要があります。これは、パーサージェネレーターの概念、および有限な先読みを使用したLALR解析の原理と問題を理解するためにおそらく必要です。</target>
        </trans-unit>
        <trans-unit id="257c2b917b12b68949e96a87bad80aa179cede62" translate="yes" xml:space="preserve">
          <source>To understand what is discussed and examplified here, we recommended you to first read section &lt;code&gt;&lt;a href=&quot;basics_chapter#basics&quot;&gt;Common Test Basics&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ここで説明され、例示されている内容を理解するために、まず「 &lt;code&gt;&lt;a href=&quot;basics_chapter#basics&quot;&gt;Common Test Basics&lt;/a&gt;&lt;/code&gt; セクションを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a0d1537131067c43e7df0631cf8f01ef0dfa991f" translate="yes" xml:space="preserve">
          <source>To unregister a name:</source>
          <target state="translated">名前の登録を解除するには</target>
        </trans-unit>
        <trans-unit id="2d2a671d4b2f16d7f91c51ff47e2d4c92fb46607" translate="yes" xml:space="preserve">
          <source>To unregister a node you have published, you should close the descriptor that was returned by &lt;code&gt;ei_publish()&lt;/code&gt;.</source>
          <target state="translated">パブリッシュしたノードの登録を解除するには、 &lt;code&gt;ei_publish()&lt;/code&gt; によって返された記述子を閉じる必要があります。</target>
        </trans-unit>
        <trans-unit id="f3c7fc1b435a8defaf215479b11edd52150783be" translate="yes" xml:space="preserve">
          <source>To unregister a node you have published, you should instead close the descriptor that was returned by &lt;code&gt;ei_publish()&lt;/code&gt;.</source>
          <target state="translated">パブリッシュしたノードの登録を解除するには、代わりに &lt;code&gt;ei_publish()&lt;/code&gt; によって返された記述子を閉じる必要があります。</target>
        </trans-unit>
        <trans-unit id="2b518c28463d854508111ea65fca22a57c4c2cf2" translate="yes" xml:space="preserve">
          <source>To unregister with EPMD, simply close the returned descriptor.</source>
          <target state="translated">EPMDへの登録を解除するには、返されたディスクリプタを閉じるだけです。</target>
        </trans-unit>
        <trans-unit id="769d2fa177fb9e7db683f9606bab6d12279b1eda" translate="yes" xml:space="preserve">
          <source>To unregister with EPMD, simply close the returned descriptor. Do not use &lt;code&gt;ei_unpublish()&lt;/code&gt;, which is deprecated anyway.</source>
          <target state="translated">EPMDへの登録を解除するには、返された記述子を閉じるだけです。いずれにせよ廃止予定の &lt;code&gt;ei_unpublish()&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="84b4679c04fbfbaa9588413bb040c5640c41eacc" translate="yes" xml:space="preserve">
          <source>To upgrade &lt;code&gt;ch_app&lt;/code&gt; from &lt;code&gt;&quot;1&quot;&lt;/code&gt; to &lt;code&gt;&quot;2&quot;&lt;/code&gt; (and to downgrade from &lt;code&gt;&quot;2&quot;&lt;/code&gt; to &lt;code&gt;&quot;1&quot;&lt;/code&gt;), you only need to load the new (old) version of the &lt;code&gt;ch3&lt;/code&gt; callback module. Create the application upgrade file &lt;code&gt;ch_app.appup&lt;/code&gt; in the &lt;code&gt;ebin&lt;/code&gt; directory:</source>
          <target state="translated">&lt;code&gt;ch_app&lt;/code&gt; を &lt;code&gt;&quot;1&quot;&lt;/code&gt; から &lt;code&gt;&quot;2&quot;&lt;/code&gt; アップグレードするには（および &lt;code&gt;&quot;2&quot;&lt;/code&gt; から &lt;code&gt;&quot;1&quot;&lt;/code&gt; にダウングレードするには）、新しい（古い）バージョンの &lt;code&gt;ch3&lt;/code&gt; コールバックモジュールをロードするだけで済みます。アプリケーションアップグレードファイル &lt;code&gt;ch_app.appup&lt;/code&gt; を &lt;code&gt;ebin&lt;/code&gt; ディレクトリに作成します。</target>
        </trans-unit>
        <trans-unit id="f84bf7f2f7861b776ed5c35e1c7e32583ad5a627" translate="yes" xml:space="preserve">
          <source>To upgrade a TCP/IP connection to an SSL connection, the client and server must agree to do so. The agreement can be accomplished by using a protocol, for example, the one used by HTTP specified in RFC 2817.</source>
          <target state="translated">TCP/IP 接続を SSL 接続にアップグレードするには、クライアントとサーバーが同意する必要があります。この同意は、RFC 2817 で指定されている HTTP で使用されているプロトコルなどを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="3a48c54fe1c18b840875cc0d8882a5c73ce80e02" translate="yes" xml:space="preserve">
          <source>To upgrade to an SSL connection:</source>
          <target state="translated">SSL接続にアップグレードするには</target>
        </trans-unit>
        <trans-unit id="ea7b425544bac4acf2d4b893b416d117aa7a59a1" translate="yes" xml:space="preserve">
          <source>To use Debugger, the basic steps are as follows:</source>
          <target state="translated">デバッガを使用するには、基本的な手順は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="68fe3f1ab7b67db6b1b7b0c723fb8ab99d7ba09b" translate="yes" xml:space="preserve">
          <source>To use a literal &lt;code&gt;*&lt;/code&gt; character as &lt;code&gt;Pad&lt;/code&gt;, it must be passed as an argument:</source>
          <target state="translated">リテラル &lt;code&gt;*&lt;/code&gt; 文字を &lt;code&gt;Pad&lt;/code&gt; として使用するには、引数として渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="bfffbe9810584067e7d160ff8bce5770cf34f906" translate="yes" xml:space="preserve">
          <source>To use any of the &lt;code&gt;Erl_Interface&lt;/code&gt; functions, include the following lines in your code:</source>
          <target state="translated">&lt;code&gt;Erl_Interface&lt;/code&gt; 関数を使用するには、コードに次の行を含めます。</target>
        </trans-unit>
        <trans-unit id="e865188bf7a27ada82ac1699872c1f2decf0665c" translate="yes" xml:space="preserve">
          <source>To use encrypted debug information, a key must be provided to the compiler and &lt;code&gt;beam_lib&lt;/code&gt;. The key is specified as a string. It is recommended that the string contains at least 32 characters and that both upper and lower case letters as well as digits and special characters are used.</source>
          <target state="translated">暗号化されたデバッグ情報を使用するには、キーをコンパイラと &lt;code&gt;beam_lib&lt;/code&gt; 提供する必要があります。キーは文字列として指定されます。文字列には少なくとも32文字が含まれ、大文字と小文字の両方、および数字と特殊文字を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="eb23e34638bd9093d10ee97bb3a0e372512e3fc8" translate="yes" xml:space="preserve">
          <source>To use event handlers written for &lt;code&gt;error_logger&lt;/code&gt;, just add your event handler with</source>
          <target state="translated">&lt;code&gt;error_logger&lt;/code&gt; 用に作成されたイベントハンドラーを使用するには、次のコマンドでイベントハンドラーを追加します。</target>
        </trans-unit>
        <trans-unit id="0bdc7b110d3152a509f4766a597abefcfa1ed87d" translate="yes" xml:space="preserve">
          <source>To use the Erlang shell to run our test, you can evaluate the following call:</source>
          <target state="translated">Erlangシェルを使ってテストを実行するには、以下の呼び出しを評価します。</target>
        </trans-unit>
        <trans-unit id="0f4462aadd9025ab266be32a2032bf299d0b46f7" translate="yes" xml:space="preserve">
          <source>To use the disk_log handler instead of the default standard handler when starting an Erlang node, change the Kernel default logger to use &lt;code&gt;logger_disk_log_h&lt;/code&gt;. Example:</source>
          <target state="translated">Erlangノードの起動時にデフォルトの標準ハンドラーの代わりにdisk_logハンドラーを使用するには、カーネルのデフォルトロガーを変更して &lt;code&gt;logger_disk_log_h&lt;/code&gt; を使用します。例：</target>
        </trans-unit>
        <trans-unit id="48d471ac0f461634b1a46f1744c359ab442ae3b1" translate="yes" xml:space="preserve">
          <source>To use the functions &lt;code&gt;&lt;a href=&quot;ct#break-1&quot;&gt;ct:break/1,2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ct#continue-0&quot;&gt;ct:continue/0,1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;release_shell&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;ct#break-1&quot;&gt;ct:break/1,2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ct#continue-0&quot;&gt;ct:continue/0,1&lt;/a&gt;&lt;/code&gt; を使用するには、 &lt;code&gt;release_shell&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d698f2ffb5c429ffda0ac4557a52f1824b92cf1d" translate="yes" xml:space="preserve">
          <source>To use the pseudo functions triggering the translation, ensure to include the header file &lt;code&gt;ms_transform.hrl&lt;/code&gt; in the source code. Failure to do so possibly results in runtime errors rather than compile time, as the expression can be valid as a plain Erlang program without translation.</source>
          <target state="translated">変換をトリガーする疑似関数を使用するには、ヘッダーファイル &lt;code&gt;ms_transform.hrl&lt;/code&gt; をソースコードに必ず含めてください。そうしないと、式が翻訳なしの単純なErlangプログラムとして有効になるため、コンパイル時ではなく実行時エラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="03f67b62fca597162026995f6815a18764fa1055" translate="yes" xml:space="preserve">
          <source>To use the real implementation, we must recompile the MIB and load it into the agent.</source>
          <target state="translated">実際の実装を使用するには、MIBを再コンパイルしてエージェントにロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="002952436d64ac58aa3de156b66387b85dc58e15" translate="yes" xml:space="preserve">
          <source>To use this function for adding drivers residing in dynamically loaded code is dangerous. If the driver code for the added driver resides in the same dynamically loaded module (that is, &lt;code&gt;.so&lt;/code&gt; file) as a normal dynamically loaded driver (loaded with the &lt;code&gt;erl_ddll&lt;/code&gt; interface), the caller is to call &lt;code&gt;&lt;a href=&quot;#driver_lock_driver&quot;&gt;driver_lock_driver&lt;/a&gt;&lt;/code&gt; before adding driver entries.</source>
          <target state="translated">この関数を使用して、動的に読み込まれるコードにあるドライバーを追加するのは危険です。追加されたドライバーのドライバーコードが、通常の動的に読み込まれたドライバー（ &lt;code&gt;erl_ddll&lt;/code&gt; インターフェイスで読み込まれた）と同じ動的に読み込まれたモジュール（つまり &lt;code&gt;.so&lt;/code&gt; ファイル）にある場合、呼び出し元はドライバーエントリを追加する前に &lt;code&gt;&lt;a href=&quot;#driver_lock_driver&quot;&gt;driver_lock_driver&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="06c29935ed139b37075ecc2db062cd1dfb073f59" translate="yes" xml:space="preserve">
          <source>To use this mode, ensure that all Erlang code that will execute in both phases is &lt;code&gt;&lt;a href=&quot;#Time_Warp_Safe_Code&quot;&gt;time warp safe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモードを使用するには、両方のフェーズで実行されるすべてのErlangコードが &lt;code&gt;&lt;a href=&quot;#Time_Warp_Safe_Code&quot;&gt;time warp safe&lt;/a&gt;&lt;/code&gt; であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="af48a71f55d5ffa8ab787fda3994e5f52dec889c" translate="yes" xml:space="preserve">
          <source>To use this mode, ensure that all Erlang code that will execute on the runtime system is &lt;code&gt;&lt;a href=&quot;#Time_Warp_Safe_Code&quot;&gt;time warp safe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモードを使用するには、ランタイムシステムで実行されるすべてのErlangコードが &lt;code&gt;&lt;a href=&quot;#Time_Warp_Safe_Code&quot;&gt;time warp safe&lt;/a&gt;&lt;/code&gt; であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="847b164165eea8a7ac372dcfbedc4f6fbc9d1539" translate="yes" xml:space="preserve">
          <source>To use this program, you need to:</source>
          <target state="translated">このプログラムを使用するには</target>
        </trans-unit>
        <trans-unit id="6a7e1aba43c701aa62b9243d847578c39295abed" translate="yes" xml:space="preserve">
          <source>To use this with threads and asynchronous routines, create a pipe on Unix and an &lt;code&gt;Event&lt;/code&gt; on Windows. When the routine completes, write to the pipe (use &lt;code&gt;SetEvent&lt;/code&gt; on Windows), this makes the emulator call &lt;code&gt;ready_input&lt;/code&gt; or &lt;code&gt;ready_output&lt;/code&gt;.</source>
          <target state="translated">これをスレッドと非同期ルーチンで使用するには、Unixでパイプを作成し、Windowsで &lt;code&gt;Event&lt;/code&gt; を作成します。ルーチンが完了したら、パイプに書き込み（Windowsでは &lt;code&gt;SetEvent&lt;/code&gt; を使用）、エミュレーターが &lt;code&gt;ready_input&lt;/code&gt; または &lt;code&gt;ready_output&lt;/code&gt; を呼び出すようにします。</target>
        </trans-unit>
        <trans-unit id="01b8773f5a669a11ac026442b354c5f873c02791" translate="yes" xml:space="preserve">
          <source>To validate the configuration strings, the callback module is to have function &lt;code&gt;Callback:check_parameter/1&lt;/code&gt; exported.</source>
          <target state="translated">構成文字列を検証するには、コールバックモジュールで関数 &lt;code&gt;Callback:check_parameter/1&lt;/code&gt; をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="fe32e508b386431ed270d6f4036397947cfdf797" translate="yes" xml:space="preserve">
          <source>To verify that everything is ok you should open &lt;code&gt;$ERL_TOP/release/tests/test_server/index.html&lt;/code&gt; in your web browser and make sure that there are zero failed test cases.</source>
          <target state="translated">すべてが問題ないことを確認するには、Webブラウザーで &lt;code&gt;$ERL_TOP/release/tests/test_server/index.html&lt;/code&gt; を開き、失敗したテストケースがないことを確認します。</target>
        </trans-unit>
        <trans-unit id="816f7f291832fe5da7fded15c95dc5548b14b744" translate="yes" xml:space="preserve">
          <source>To verify that lock counting is enabled check that &lt;code&gt;[lock-counting]&lt;/code&gt; appears in the status text when the VM is started.</source>
          <target state="translated">ロックカウントが有効になっていることを確認するには、VMの起動時にステータステキストに &lt;code&gt;[lock-counting]&lt;/code&gt; が表示されることを確認します。</target>
        </trans-unit>
        <trans-unit id="d79825059ed41d40f1eb38140584c29e49d43c05" translate="yes" xml:space="preserve">
          <source>To view detailed information about a specific module, double- click the row, or right-click it and select &lt;strong&gt;Properties for &amp;lt;mod&amp;gt;&lt;/strong&gt;.</source>
          <target state="translated">特定のモジュールに関する詳細情報を表示するには、行をダブルクリックするか、またはそれを右クリックして&lt;strong&gt;&amp;lt;mod&amp;gt;のプロパティを&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e3ee7cdc20eb34f07a508b3dffa9cad2da375fa2" translate="yes" xml:space="preserve">
          <source>To view detailed information about a specific process, double- click the row in the list, or right-click the row and select &lt;strong&gt;Properties for &amp;lt;pid&amp;gt;&lt;/strong&gt;.</source>
          <target state="translated">特定のプロセスに関する詳細情報を表示するには、リスト内の行をダブルクリックするか、行を右クリックし&lt;strong&gt;て&amp;lt;pid&amp;gt;のプロパティを&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f9a2be366e30f8af91ea3157c65f941baf52859b" translate="yes" xml:space="preserve">
          <source>To view more details about a specific port, double-click the row or right-click it and select &lt;strong&gt;Properties for &amp;lt;port&amp;gt;&lt;/strong&gt;. From the right-click menu, you can also select &lt;strong&gt;Properties for &amp;lt;pid&amp;gt;&lt;/strong&gt;, where &lt;code&gt;&amp;lt;pid&amp;gt;&lt;/code&gt; is the process connected to the port.</source>
          <target state="translated">特定のポートの詳細を表示するには、行をダブルクリックするか、その行を右クリックして&lt;strong&gt;&amp;lt;port&amp;gt;のプロパティを&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。右クリックメニューから、&lt;strong&gt;&amp;lt;pid&amp;gt;のプロパティを&lt;/strong&gt;選択することもでき&lt;strong&gt;ます&lt;/strong&gt;。ここで、 &lt;code&gt;&amp;lt;pid&amp;gt;&lt;/code&gt; はポートに接続されているプロセスです。</target>
        </trans-unit>
        <trans-unit id="7c537dc716e918cf2d036be1a35d64af3e41081c" translate="yes" xml:space="preserve">
          <source>To view the result of a code coverage test, click the button labeled &quot;COVER LOG&quot; in the top-level index page for the test run.</source>
          <target state="translated">コードカバレッジテストの結果を表示するには、テスト実行のトップレベルのインデックスページにある「COVER LOG」というラベルの付いたボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="254465b8f25a6c97a3848f10e6162c3f124f7768" translate="yes" xml:space="preserve">
          <source>To view the result of macro expansion, a module can be compiled with the &lt;code&gt;'P'&lt;/code&gt; option. &lt;code&gt;compile:file(File, ['P'])&lt;/code&gt;. This produces a listing of the parsed code after preprocessing and parse transforms, in the file &lt;code&gt;File.P&lt;/code&gt;.</source>
          <target state="translated">マクロ展開の結果を表示するには、 &lt;code&gt;'P'&lt;/code&gt; オプションを指定してモジュールをコンパイルします。 &lt;code&gt;compile:file(File, ['P'])&lt;/code&gt; 。これにより、ファイル &lt;code&gt;File.P&lt;/code&gt; に、前処理および解析変換後の解析済みコードのリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="2863e2789d755b777cac4c624de8395bb36a4b90" translate="yes" xml:space="preserve">
          <source>To visualize the structure of a syntax tree, you can use the function &lt;code&gt;merl:show(T)&lt;/code&gt;, which prints a summary. For example, entering</source>
          <target state="translated">構文ツリーの構造を視覚化するには、要約を出力する関数 &lt;code&gt;merl:show(T)&lt;/code&gt; を使用できます。たとえば、</target>
        </trans-unit>
        <trans-unit id="420f383fbb828ef9ba78290b1722db9b09af55f0" translate="yes" xml:space="preserve">
          <source>To work with binaries in ISO Latin-1 encoding, use the &lt;code&gt;file&lt;/code&gt; module instead.</source>
          <target state="translated">ISO Latin-1エンコーディングでバイナリを操作するには、代わりに &lt;code&gt;file&lt;/code&gt; モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="9368499385b79811c6e242f08579ba92f510e423" translate="yes" xml:space="preserve">
          <source>To write a function that inserts an employee record into the database, there must be an &lt;code&gt;at_dep&lt;/code&gt; record and a set of &lt;code&gt;in_proj&lt;/code&gt; records inserted. Examine the following code used to complete this action:</source>
          <target state="translated">従業員レコードをデータベースに挿入する関数を作成するには、 &lt;code&gt;at_dep&lt;/code&gt; レコードと挿入された一連の &lt;code&gt;in_proj&lt;/code&gt; レコードが必要です。このアクションを完了するために使用される次のコードを調べます。</target>
        </trans-unit>
        <trans-unit id="870bc92e8fb7bb157e38a72767baac7170c3e8c4" translate="yes" xml:space="preserve">
          <source>To write functions that manipulate this data, remember the following:</source>
          <target state="translated">このデータを操作する関数を書くには、以下のことを覚えておきましょう。</target>
        </trans-unit>
        <trans-unit id="49f4806c44f9e994d710db8f38c6399e247bca8a" translate="yes" xml:space="preserve">
          <source>To write your own client channel handler, use the behaviour &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt;. For server channel handlers use &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; behaviour (replaces ssh_daemon_channel).</source>
          <target state="translated">独自のクライアントチャネルハンドラーを作成するには、動作 &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; を使用します。サーバーチャネルハンドラーの場合、 &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; 動作を使用します（ssh_daemon_channelの代わり）。</target>
        </trans-unit>
        <trans-unit id="f57b7cb4b41a526a6b5b1f9a162d27692ca9284c" translate="yes" xml:space="preserve">
          <source>Today there are no good ways of solving this problem and therefore the eval scheme can be removed in future release of &lt;code&gt;Inets&lt;/code&gt;.</source>
          <target state="translated">今日、この問題を解決するための良い方法はないので、評価スキームは &lt;code&gt;Inets&lt;/code&gt; の将来のリリースで削除できます。</target>
        </trans-unit>
        <trans-unit id="7edb68e9d3675d0ca9b5133bc31d9005c2bc6f47" translate="yes" xml:space="preserve">
          <source>Too long external command.</source>
          <target state="translated">外部コマンドが長すぎます。</target>
        </trans-unit>
        <trans-unit id="b53132babe55797aa27d88cc20db666d7ee40a5b" translate="yes" xml:space="preserve">
          <source>Tools that need to know about optional callback functions can call &lt;code&gt;Behaviour:behaviour_info(optional_callbacks)&lt;/code&gt; to get a list of all optional callback functions.</source>
          <target state="translated">オプションのコールバック関数について知る必要があるツールは、 &lt;code&gt;Behaviour:behaviour_info(optional_callbacks)&lt;/code&gt; を呼び出して、すべてのオプションのコールバック関数のリストを取得できます。</target>
        </trans-unit>
        <trans-unit id="dd3a74b17c3a112fdfc9b4f6b58e1ba85a6ec96d" translate="yes" xml:space="preserve">
          <source>Top pad size (in kilobytes). This is the amount of extra memory that is allocated by &lt;code&gt;malloc&lt;/code&gt; when &lt;code&gt;sbrk&lt;/code&gt; is called to get more memory from the operating system. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">トップパッドサイズ（キロバイト単位）。これは、オペレーティングシステムからより多くのメモリを取得するために &lt;code&gt;sbrk&lt;/code&gt; が呼び出されたときに &lt;code&gt;malloc&lt;/code&gt; によって割り当てられる追加メモリの量です。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8688b9f02fc264d86ffee1ffffdff34e5d5032b9" translate="yes" xml:space="preserve">
          <source>Total amount of data allocated by an Erlang node</source>
          <target state="translated">Erlangノードに割り当てられたデータの総量</target>
        </trans-unit>
        <trans-unit id="15b379311d06275e570d3c8276f0c74ac315b01b" translate="yes" xml:space="preserve">
          <source>Total and own</source>
          <target state="translated">合計と自分の</target>
        </trans-unit>
        <trans-unit id="c2270f01832f95299124e422ec6e4ca5b86124d0" translate="yes" xml:space="preserve">
          <source>Total memory of all fragments</source>
          <target state="translated">すべてのフラグメントの総メモリ</target>
        </trans-unit>
        <trans-unit id="7e54e8f9975c397f222301a7b10e36746a3fb103" translate="yes" xml:space="preserve">
          <source>Total scheduler utilization will equal &lt;code&gt;1.0&lt;/code&gt; when all schedulers have been active all the time between the two measurements.</source>
          <target state="translated">2つの測定の間、すべてのスケジューラが常にアクティブであった場合、合計スケジューラ使用率は &lt;code&gt;1.0&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="75f139724c9414120075277ba75a5a2d7bac69ee" translate="yes" xml:space="preserve">
          <source>Total size of all fragments</source>
          <target state="translated">すべてのフラグメントの合計サイズ</target>
        </trans-unit>
        <trans-unit id="3d7796a77f0c2216ea352ac72490e4ec4449ab38" translate="yes" xml:space="preserve">
          <source>Total utilization of all normal and dirty-cpu schedulers, weighted against maximum amount of available CPU time.</source>
          <target state="translated">すべてのノーマルおよびダーティなCPUスケジューラの総使用率を、使用可能なCPU時間の最大量に対して重み付けしたもの。</target>
        </trans-unit>
        <trans-unit id="6da5bac4a207bc853f48fee09219f38e35859ae6" translate="yes" xml:space="preserve">
          <source>Total utilization of all normal and dirty-cpu schedulers.</source>
          <target state="translated">すべてのノーマルCPUスケジューラとダーティCPUスケジューラの合計使用率。</target>
        </trans-unit>
        <trans-unit id="9bff8a7fc7360671cf907e56ce21842e96c20fad" translate="yes" xml:space="preserve">
          <source>TotalRunQueueLengths</source>
          <target state="translated">TotalRunQueueLengths</target>
        </trans-unit>
        <trans-unit id="2f38169a712e499b917900e244feafc980a814f4" translate="yes" xml:space="preserve">
          <source>Trace</source>
          <target state="translated">Trace</target>
        </trans-unit>
        <trans-unit id="80bb48f4677c815e975d8c45891c82e4681bcb89" translate="yes" xml:space="preserve">
          <source>Trace Tool Builder</source>
          <target state="translated">トレースツールビルダー</target>
        </trans-unit>
        <trans-unit id="250a4f0c0db1541060f17b5d70ba72e38869d686" translate="yes" xml:space="preserve">
          <source>Trace Tool Builder is a base for building trace tools for single node or distributed Erlang systems. It requires the Runtime_Tools application to be available on the traced node.</source>
          <target state="translated">トレースツールビルダーは、シングルノードや分散型のErlangシステム用のトレースツールを構築するためのベースです。トレースされたノードでRuntime_Toolsアプリケーションが利用可能である必要があります。</target>
        </trans-unit>
        <trans-unit id="d0e39bcc8d71bbaa0fa6b28e8699f8f1993f5c4d" translate="yes" xml:space="preserve">
          <source>Trace flag &lt;code&gt;arity&lt;/code&gt; can be used to change the contents of this message, so that &lt;code&gt;Arity&lt;/code&gt; is specified instead of &lt;code&gt;Args&lt;/code&gt;.</source>
          <target state="translated">トレースフラグ &lt;code&gt;arity&lt;/code&gt; を使用してこのメ​​ッセージの内容を変更できるため、 &lt;code&gt;Arity&lt;/code&gt; ではなくArityが指定され &lt;code&gt;Args&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2211485216352092a3c7b3ce77ba8fdb799ae23c" translate="yes" xml:space="preserve">
          <source>Trace flag &lt;code&gt;call&lt;/code&gt; is set on all processes. This means that any function activated with command &lt;code&gt;trc/1&lt;/code&gt; is traced on all existing and new processes.</source>
          <target state="translated">トレースフラグの &lt;code&gt;call&lt;/code&gt; は、すべてのプロセスで設定されます。これは、コマンド &lt;code&gt;trc/1&lt;/code&gt; でアクティブ化されたすべての機能が、既存および新規のすべてのプロセスでトレースされることを意味します。</target>
        </trans-unit>
        <trans-unit id="0712efc6140a7fd34097a10dbcb83e8a2711b2c0" translate="yes" xml:space="preserve">
          <source>Trace garbage collection on the specified process(es). The format handler used is &lt;code&gt;multitrace:handle_gc/4&lt;/code&gt; that prints start, stop, and the time spent for each garbage collection.</source>
          <target state="translated">指定したプロセスのガベージコレクションをトレースします。使用されるフォーマットハンドラーは、開始、停止、および各ガベージコレクションに費やされた時間を出力する &lt;code&gt;multitrace:handle_gc/4&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8ad201247194a3bc5c13be5040f0d1b1e662cf18" translate="yes" xml:space="preserve">
          <source>Trace in-scheduling and out-scheduling on the specified process(es). The format handler used is &lt;code&gt;multitrace:handle_schedule/4&lt;/code&gt; that prints each in-scheduling and out-scheduling with process, time-stamp, and current function. It also prints the total time each traced process was scheduled in.</source>
          <target state="translated">指定されたプロセスのスケジュール内およびスケジュール外をトレースします。使用されるフォーマットハンドラーは &lt;code&gt;multitrace:handle_schedule/4&lt;/code&gt; で、プロセス、タイムスタンプ、および現在の関数を使用して、スケジュールされたものとスケジュールされていないものをそれぞれ出力します。また、トレースされた各プロセスがスケジュールされた合計時間も出力します。</target>
        </trans-unit>
        <trans-unit id="ffc9984032978aa3b6449468569d3553d6cf5759" translate="yes" xml:space="preserve">
          <source>Trace messages:</source>
          <target state="translated">メッセージをトレースします。</target>
        </trans-unit>
        <trans-unit id="4d4722f0d0980b84f26e05618ea2d6105d2b13ac" translate="yes" xml:space="preserve">
          <source>Trace patterns can also be added for traced messages. Click button &lt;strong&gt;Add Trace Pattern&lt;/strong&gt; and select &lt;strong&gt;Messages sent&lt;/strong&gt; or &lt;strong&gt;Messages received&lt;/strong&gt;, and a match specification.</source>
          <target state="translated">トレースパターンは、トレースされたメッセージに追加することもできます。 [ &lt;strong&gt;トレースパターンの追加&lt;/strong&gt; ]ボタン&lt;strong&gt;を&lt;/strong&gt;クリックし、[ &lt;strong&gt;送信された&lt;/strong&gt;&lt;strong&gt;メッセージ]&lt;/strong&gt;または&lt;strong&gt;[受信さ&lt;/strong&gt;&lt;strong&gt;れた&lt;/strong&gt;&lt;strong&gt;メッセージ]&lt;/strong&gt;と一致仕様を選択します。</target>
        </trans-unit>
        <trans-unit id="0940d3dfe2f33f718de044f09bc83c6282e8f2ee" translate="yes" xml:space="preserve">
          <source>Trace patterns only apply to the traced processes and ports.</source>
          <target state="translated">トレースパターンは、トレースされたプロセスとポートにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="2a9473289ba2f7fdb4aceac50e9847d3fb9343a9" translate="yes" xml:space="preserve">
          <source>Trace patterns specify how to trace a function or a message by using match specifications. Match specifications are described in the &lt;code&gt;ERTS User's Guide&lt;/code&gt;.</source>
          <target state="translated">トレースパターンは、一致指定を使用して関数またはメッセージをトレースする方法を指定します。一致仕様については、 &lt;code&gt;ERTS User's Guide&lt;/code&gt; 記載されています。</target>
        </trans-unit>
        <trans-unit id="a02e22fba6caaac8c0531907ae75bbb4f037b1bf" translate="yes" xml:space="preserve">
          <source>Traces &lt;code&gt;Item&lt;/code&gt; in accordance to the value specified by &lt;code&gt;Flags&lt;/code&gt;. The variation of &lt;code&gt;Item&lt;/code&gt; is listed below:</source>
          <target state="translated">&lt;code&gt;Flags&lt;/code&gt; で指定された値に従って &lt;code&gt;Item&lt;/code&gt; をトレースします。 &lt;code&gt;Item&lt;/code&gt; のバリエーションを以下に示します。</target>
        </trans-unit>
        <trans-unit id="8d86b88eb80a4cb0c1e2e56d320a47a7c0a552ac" translate="yes" xml:space="preserve">
          <source>Traces certain function calls. Specify which function calls to trace by calling &lt;code&gt;&lt;a href=&quot;#trace_pattern-3&quot;&gt;erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">特定の関数呼び出しをトレースします。 &lt;code&gt;&lt;a href=&quot;#trace_pattern-3&quot;&gt;erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt; を呼び出して、トレースする関数呼び出しを指定します。</target>
        </trans-unit>
        <trans-unit id="e6a38811b152556838705c34470f7050c3304700" translate="yes" xml:space="preserve">
          <source>Traces garbage collections of processes.</source>
          <target state="translated">プロセスのガベージコレクションをトレースします。</target>
        </trans-unit>
        <trans-unit id="0bfeea5f77e5e80144fb5c69582ff8a4c4aa0a8c" translate="yes" xml:space="preserve">
          <source>Traces global function calls for the process according to the trace patterns set in the system (see tp/2).</source>
          <target state="translated">システムに設定されたトレースパターンに従ってプロセスのグローバル関数呼び出しをトレースします(tp/2参照)。</target>
        </trans-unit>
        <trans-unit id="7b9365396596fa47926ca8347796645d68615fc5" translate="yes" xml:space="preserve">
          <source>Traces port related events to the port.</source>
          <target state="translated">ポートに関連するイベントをポートにトレースします。</target>
        </trans-unit>
        <trans-unit id="9984d03ffd8c79d353ed1035134b4b78d308578d" translate="yes" xml:space="preserve">
          <source>Traces port-related events.</source>
          <target state="translated">ポート関連のイベントをトレースします。</target>
        </trans-unit>
        <trans-unit id="53c6e4ac66fc9e05350a56f9ce0407168d386402" translate="yes" xml:space="preserve">
          <source>Traces process related events to the process.</source>
          <target state="translated">プロセスに関連するイベントをプロセスにトレースします。</target>
        </trans-unit>
        <trans-unit id="29908912e6fff8dc5249509363a4412791547f21" translate="yes" xml:space="preserve">
          <source>Traces process-related events.</source>
          <target state="translated">プロセス関連のイベントをトレースします。</target>
        </trans-unit>
        <trans-unit id="5fea32fcd1026ba95b7747cfa7687d7877ce29fa" translate="yes" xml:space="preserve">
          <source>Traces receiving of messages.</source>
          <target state="translated">メッセージの受信を追跡します。</target>
        </trans-unit>
        <trans-unit id="cc07cb20090b0accf4d5bc83ba241371cabc9b3a" translate="yes" xml:space="preserve">
          <source>Traces scheduling of exiting processes.</source>
          <target state="translated">終了プロセスのスケジューリングをトレースします。</target>
        </trans-unit>
        <trans-unit id="67d22b046457a4e977f4835a302c705d01e90b51" translate="yes" xml:space="preserve">
          <source>Traces scheduling of ports.</source>
          <target state="translated">ポートのスケジューリングをトレースします。</target>
        </trans-unit>
        <trans-unit id="2f48a05431b99fc7b0ddcdfbdc7ffb069ba16117" translate="yes" xml:space="preserve">
          <source>Traces scheduling of processes just like &lt;code&gt;running&lt;/code&gt;. However, this option also includes schedule events when the process executes within the context of a port without being scheduled out itself.</source>
          <target state="translated">&lt;code&gt;running&lt;/code&gt; 同じようにプロセスのスケジューリングをトレースします。ただし、このオプションには、プロセスがそれ自体がスケジュールされずにポートのコンテキスト内で実行される場合のスケジュールイベントも含まれます。</target>
        </trans-unit>
        <trans-unit id="7ce958853f2f4b0ef08e9d0a61efd87ba237714e" translate="yes" xml:space="preserve">
          <source>Traces scheduling of processes.</source>
          <target state="translated">プロセスのスケジューリングをトレースします。</target>
        </trans-unit>
        <trans-unit id="c4c7172939e3bf7fce3abeb0aee363e0caeecf04" translate="yes" xml:space="preserve">
          <source>Traces sending of messages.</source>
          <target state="translated">メッセージの送信を追跡します。</target>
        </trans-unit>
        <trans-unit id="47adf62bbb5b7db2ff2d321ec8c4e3902e48036a" translate="yes" xml:space="preserve">
          <source>Traces the messages the process or port receives and sends.</source>
          <target state="translated">プロセスまたはポートが送受信するメッセージをトレースします。</target>
        </trans-unit>
        <trans-unit id="139350008a2a0843c976fc5033dee778dfce8767" translate="yes" xml:space="preserve">
          <source>Traces the messages the process or port receives.</source>
          <target state="translated">プロセスまたはポートが受信したメッセージをトレースします。</target>
        </trans-unit>
        <trans-unit id="bd14c1efd1ddeca64fe6450f80e57e6c1564eaab" translate="yes" xml:space="preserve">
          <source>Traces the messages the process or port sends.</source>
          <target state="translated">プロセスまたはポートが送信するメッセージをトレースします。</target>
        </trans-unit>
        <trans-unit id="c82c46612470fc95ddd9cc9407e733f834757c70" translate="yes" xml:space="preserve">
          <source>Tracing. Trace flags can still be set for the process, but no trace messages of any kind are generated. (If flag &lt;code&gt;sensitive&lt;/code&gt; is turned off, trace messages are again generated if any trace flags are set.)</source>
          <target state="translated">トレース。プロセスにトレースフラグを設定することはできますが、いかなる種類のトレースメッセージも生成されません。（フラグ &lt;code&gt;sensitive&lt;/code&gt; がオフになっている場合、トレースフラグが設定されていると、トレースメッセージが再び生成されます。）</target>
        </trans-unit>
        <trans-unit id="47fc4ea1f09f1ee696b546f14553f696094e6dba" translate="yes" xml:space="preserve">
          <source>Tracing; to file, as mentioned in the previous paragraph.</source>
          <target state="translated">前段落で述べたように、ファイルにトレースすること。</target>
        </trans-unit>
        <trans-unit id="41e7b60cc9f2be5dd1ce4620f59c4b34f7bff5d2" translate="yes" xml:space="preserve">
          <source>Tracing; to file, as mentioned in the previous paragraph. The trace contains entries for function calls, returns to function, process scheduling, other process related (spawn, etc) events, and garbage collection. All trace entries are timestamped.</source>
          <target state="translated">トレース;前の段落で述べたように、ファイルへ。トレースには、関数呼び出し、関数への戻り値、プロセススケジューリング、その他のプロセス関連(スポーンなど)イベント、ガベージコレクションのエントリが含まれています。すべてのトレースエントリにはタイムスタンプが付きます。</target>
        </trans-unit>
        <trans-unit id="8fe0486a60ee6a3c01827363742db14787a69569" translate="yes" xml:space="preserve">
          <source>Traditionally the Presented IDs were found in the &lt;code&gt;Subject&lt;/code&gt; certificate field as &lt;code&gt;CN&lt;/code&gt; names. This is still quite common. When printing a certificate they show up as:</source>
          <target state="translated">従来、提示されたIDは、 &lt;code&gt;Subject&lt;/code&gt; 証明書フィールドに &lt;code&gt;CN&lt;/code&gt; 名として見つかりました。これはまだかなり一般的です。証明書を印刷すると、次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="cd6a9e832dedaac8dfc95165be3ac0b240579c52" translate="yes" xml:space="preserve">
          <source>Transaction properties, which include atomicity, consistency, isolation, and durability</source>
          <target state="translated">原子性、一貫性、分離性、耐久性を含むトランザクション特性</target>
        </trans-unit>
        <trans-unit id="0c055699e2752b762bcaa8253255fc14b9bef9a9" translate="yes" xml:space="preserve">
          <source>Transaction sender timeout time. Has two functions. First, if the value is 0, then transactions will not be accumulated (e.g. the transaction sender process will not be started). Second, if the value is greater then 0 and &lt;code&gt;auto_ack&lt;/code&gt; and &lt;code&gt;trans_ack&lt;/code&gt; are both true or if &lt;code&gt;trans_req&lt;/code&gt; is true, then transaction sender will be started and transactions (which is depending on the values of &lt;code&gt;auto_ack&lt;/code&gt;, &lt;code&gt;trans_ack&lt;/code&gt; and &lt;code&gt;trans_req&lt;/code&gt;) will be accumulated, for later sending.</source>
          <target state="translated">トランザクション送信者のタイムアウト時間。 2つの機能があります。まず、値が0の場合、トランザクションは蓄積されません（たとえば、トランザクション送信側プロセスは開始されません）。次に、値が0より大きく、 &lt;code&gt;auto_ack&lt;/code&gt; と &lt;code&gt;trans_ack&lt;/code&gt; の両方がtrueの場合、または &lt;code&gt;trans_req&lt;/code&gt; がtrueの場合、トランザクション送信側が開始され、トランザクション（ &lt;code&gt;auto_ack&lt;/code&gt; 、 &lt;code&gt;trans_ack&lt;/code&gt; 、および &lt;code&gt;trans_req&lt;/code&gt; の値に依存）が後で蓄積されます。送信。</target>
        </trans-unit>
        <trans-unit id="269959a97a6fb575e49d0eca74353214adfc6c11" translate="yes" xml:space="preserve">
          <source>Transaction sender timeout time. Has two functions. First, if the value is 0, then transactions will not be accumulated (e.g. the transaction sender process will not be started). Second, if the value is greater then 0 and &lt;code&gt;auto_ack&lt;/code&gt; and &lt;code&gt;trans_ack&lt;/code&gt; is true or if &lt;code&gt;trans_req&lt;/code&gt; is true, then transaction sender will be started and transactions (which is depending on the values of &lt;code&gt;auto_ack&lt;/code&gt;, &lt;code&gt;trans_ack&lt;/code&gt; and &lt;code&gt;trans_req&lt;/code&gt;) will be accumulated, for later sending.</source>
          <target state="translated">トランザクション送信者のタイムアウト時間。 2つの機能があります。まず、値が0の場合、トランザクションは蓄積されません（たとえば、トランザクション送信側プロセスは開始されません）。次に、値が0より大きく、 &lt;code&gt;auto_ack&lt;/code&gt; および &lt;code&gt;trans_ack&lt;/code&gt; がtrueの場合、または &lt;code&gt;trans_req&lt;/code&gt; がtrueの場合、トランザクション送信側が開始され、トランザクション（ &lt;code&gt;auto_ack&lt;/code&gt; 、 &lt;code&gt;trans_ack&lt;/code&gt; 、および &lt;code&gt;trans_req&lt;/code&gt; の値に依存する）が蓄積され、後で送信されます。 。</target>
        </trans-unit>
        <trans-unit id="8663c67ab2c24806fdfac1e594f2b7c4880ae74b" translate="yes" xml:space="preserve">
          <source>Transaction-protected updates of counter records are not possible.</source>
          <target state="translated">カウンターレコードのトランザクションで保護された更新はできません。</target>
        </trans-unit>
        <trans-unit id="92857e4acd00ac4a82a3a5846abb0210105c9b13" translate="yes" xml:space="preserve">
          <source>Transactions are important when designing fault-tolerant, distributed systems. A &lt;code&gt;Mnesia&lt;/code&gt; transaction is a mechanism by which a series of database operations can be executed as one functional block. The functional block that is run as a transaction is called a Functional Object (Fun), and this code can read, write, and delete &lt;code&gt;Mnesia&lt;/code&gt; records. The Fun is evaluated as a transaction that either commits or terminates. If a transaction succeeds in executing the Fun, it replicates the action on all nodes involved, or terminates if an error occurs.</source>
          <target state="translated">トランザクションは、フォールトトレラントな分散システムを設計するときに重要です。 &lt;code&gt;Mnesia&lt;/code&gt; のトランザクションは、データベースの一連の動作は、一つの機能ブロックとして実行することができる機構です。トランザクションとして実行される機能ブロックは、機能オブジェクト（Fun）と呼ばれ、このコードは &lt;code&gt;Mnesia&lt;/code&gt; レコードの読み取り、書き込み、および削除を行うことができます。 Funは、コミットまたは終了するトランザクションとして評価されます。トランザクションがFunの実行に成功すると、関係するすべてのノードでアクションを複製するか、エラーが発生すると終了します。</target>
        </trans-unit>
        <trans-unit id="4eb9104f2b09d1b5d4b87d82abb898d1890e970f" translate="yes" xml:space="preserve">
          <source>Transactions can be assigned the property of being executed on all nodes in the system, or on none. Transactions can also be bypassed in favor of running &quot;dirty operations&quot;, which reduce overheads and run fast.</source>
          <target state="translated">トランザクションは、システム内のすべてのノードで実行されるか、または実行されないノードで実行されるかのプロパティを割り当てることができます。トランザクションは、オーバーヘッドを減らして高速に実行する「ダーティオペレーション」を実行することでバイパスすることもできます。</target>
        </trans-unit>
        <trans-unit id="a91a6387bdeb5a997e5106ce0eb7dbddb3fbc79e" translate="yes" xml:space="preserve">
          <source>Transactions can be nested in an arbitrary fashion. A child transaction must run in the same process as its parent. When a child transaction terminates, the caller of the child transaction gets return value &lt;code&gt;{aborted, Reason}&lt;/code&gt; and any work performed by the child is erased. If a child transaction commits, the records written by the child are propagated to the parent.</source>
          <target state="translated">トランザクションは任意の方法でネストできます。子トランザクションは、その親と同じプロセスで実行する必要があります。子トランザクションが終了すると、子トランザクションの呼び出し元は戻り値 &lt;code&gt;{aborted, Reason}&lt;/code&gt; を取得し、子によって実行されたすべての作業が消去されます。子トランザクションがコミットすると、子によって書き込まれたレコードは親に伝搬されます。</target>
        </trans-unit>
        <trans-unit id="c7c5e2dea68a50fc96da311191d6565ac73e322c" translate="yes" xml:space="preserve">
          <source>Transactions that update the definition of a table requires that &lt;code&gt;Mnesia&lt;/code&gt; is started on all nodes where the storage type of the schema is &lt;code&gt;disc_copies&lt;/code&gt;. All replicas of the table on these nodes must also be loaded. There are a few exceptions to these availability rules:</source>
          <target state="translated">テーブルの定義を更新するトランザクションでは、スキーマのストレージタイプが &lt;code&gt;disc_copies&lt;/code&gt; であるすべてのノードで &lt;code&gt;Mnesia&lt;/code&gt; が開始されている必要があります。これらのノード上のテーブルのすべてのレプリカもロードする必要があります。これらの可用性ルールにはいくつかの例外があります。</target>
        </trans-unit>
        <trans-unit id="f8042cfa4648048958e1595a0cff5bd3d748ab7d" translate="yes" xml:space="preserve">
          <source>Transcodes an &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; compliant &lt;code&gt;URIString&lt;/code&gt;, where &lt;code&gt;Options&lt;/code&gt; is a list of tagged tuples, specifying the inbound (&lt;code&gt;in_encoding&lt;/code&gt;) and outbound (&lt;code&gt;out_encoding&lt;/code&gt;) encodings. &lt;code&gt;in_encoding&lt;/code&gt; and &lt;code&gt;out_encoding&lt;/code&gt; specifies both binary encoding and percent-encoding for the input and output data. Mixed encoding, where binary encoding is not the same as percent-encoding, is not supported. If an argument is invalid, an error tuple is returned.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; 準拠の &lt;code&gt;URIString&lt;/code&gt; をトランスコードします。ここで、 &lt;code&gt;Options&lt;/code&gt; はタグ付きタプルのリストであり、インバウンド（ &lt;code&gt;in_encoding&lt;/code&gt; ）およびアウトバウンド（ &lt;code&gt;out_encoding&lt;/code&gt; ）エンコーディングを指定します。 &lt;code&gt;in_encoding&lt;/code&gt; と &lt;code&gt;out_encoding&lt;/code&gt; は、入力データと出力データのバイナリエンコーディングとパーセントエンコーディングの両方を指定します。バイナリエンコーディングがパーセントエンコーディングと異なる混合エンコーディングはサポートされていません。引数が無効な場合、エラータプルが返されます。</target>
        </trans-unit>
        <trans-unit id="0276c8258f3ca2236ded67dcb45cec51cdd4d087" translate="yes" xml:space="preserve">
          <source>Transfers the binary &lt;code&gt;Bin&lt;/code&gt; into the file &lt;code&gt;RemoteFile&lt;/code&gt; at the remote server.</source>
          <target state="translated">バイナリ &lt;code&gt;Bin&lt;/code&gt; をリモートサーバーの &lt;code&gt;RemoteFile&lt;/code&gt; ファイルに転送します。</target>
        </trans-unit>
        <trans-unit id="a31be82768a8a14fe4e45c8c31cc87a5a005d692" translate="yes" xml:space="preserve">
          <source>Transfers the binary &lt;code&gt;Bin&lt;/code&gt; to the remote server and appends it to the file &lt;code&gt;RemoteFile&lt;/code&gt;. If the file does not exist, it is created.</source>
          <target state="translated">バイナリ &lt;code&gt;Bin&lt;/code&gt; をリモートサーバーに転送し、ファイル &lt;code&gt;RemoteFile&lt;/code&gt; に追加します。ファイルが存在しない場合は作成されます。</target>
        </trans-unit>
        <trans-unit id="96ecc5026b0a2d6e144a5dcc9d3d15bc2637fba5" translate="yes" xml:space="preserve">
          <source>Transfers the chunk &lt;code&gt;Bin&lt;/code&gt; to the remote server, which appends it to the file specified in the call to &lt;code&gt;append_chunk_start/2&lt;/code&gt;.</source>
          <target state="translated">チャンク &lt;code&gt;Bin&lt;/code&gt; をリモートサーバーに転送し、リモートサーバーがそれを &lt;code&gt;append_chunk_start/2&lt;/code&gt; の呼び出しで指定されたファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="6d777ccd8cf743ce8e8b1db94238262ce12eba79" translate="yes" xml:space="preserve">
          <source>Transfers the chunk &lt;code&gt;Bin&lt;/code&gt; to the remote server, which writes it into the file specified in the call to &lt;code&gt;send_chunk_start/2&lt;/code&gt;.</source>
          <target state="translated">チャンク &lt;code&gt;Bin&lt;/code&gt; をリモートサーバーに転送し、リモートサーバーが &lt;code&gt;send_chunk_start/2&lt;/code&gt; の呼び出しで指定されたファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="78ac497764b60c7c85e8349f223a68fe68089947" translate="yes" xml:space="preserve">
          <source>Transfers the file &lt;code&gt;LocalFile&lt;/code&gt; to the remote server. If &lt;code&gt;RemoteFile&lt;/code&gt; is specified, the name of the remote file is set to &lt;code&gt;RemoteFile&lt;/code&gt;, otherwise to &lt;code&gt;LocalFile&lt;/code&gt;.</source>
          <target state="translated">ファイル &lt;code&gt;LocalFile&lt;/code&gt; をリモートサーバーに転送します。 &lt;code&gt;RemoteFile&lt;/code&gt; が指定されている場合、リモートファイルの名前は &lt;code&gt;RemoteFile&lt;/code&gt; に設定され、それ以外の場合は &lt;code&gt;LocalFile&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="aec29636456fbdaa72ac911c194e9cb134c0de35" translate="yes" xml:space="preserve">
          <source>Transfers the file &lt;code&gt;LocalFile&lt;/code&gt; to the remote server. If &lt;code&gt;RemoteFile&lt;/code&gt; is specified, the name of the remote file that the file is appended to is set to &lt;code&gt;RemoteFile&lt;/code&gt;, otherwise to &lt;code&gt;LocalFile&lt;/code&gt;. If the file does not exists, it is created.</source>
          <target state="translated">ファイル &lt;code&gt;LocalFile&lt;/code&gt; をリモートサーバーに転送します。 &lt;code&gt;RemoteFile&lt;/code&gt; が指定されている場合、ファイルが追加されるリモートファイルの名前は &lt;code&gt;RemoteFile&lt;/code&gt; に設定され、それ以外の場合は &lt;code&gt;LocalFile&lt;/code&gt; に設定されます。ファイルが存在しない場合は作成されます。</target>
        </trans-unit>
        <trans-unit id="90ba80cf80c63c0d2c8f02175aa1e10f13204467" translate="yes" xml:space="preserve">
          <source>Transfers the file &lt;code&gt;RemoteFile&lt;/code&gt; from the remote server and receives it as a binary.</source>
          <target state="translated">ファイル &lt;code&gt;RemoteFile&lt;/code&gt; をリモートサーバーから転送し、バイナリとして受信します。</target>
        </trans-unit>
        <trans-unit id="ef6a6bd4453d0b36a0f55436c56df830215430fd" translate="yes" xml:space="preserve">
          <source>Transfers the file &lt;code&gt;RemoteFile&lt;/code&gt; from the remote server to the file system of the local client. If &lt;code&gt;LocalFile&lt;/code&gt; is specified, the local file will be &lt;code&gt;LocalFile&lt;/code&gt;, otherwise &lt;code&gt;RemoteFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RemoteFile&lt;/code&gt; ファイルをリモートサーバーからローカルクライアントのファイルシステムに転送します。場合 &lt;code&gt;LocalFile&lt;/code&gt; 指定され、ローカルファイルになります &lt;code&gt;LocalFile&lt;/code&gt; それ以外の場合は、 &lt;code&gt;RemoteFile&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="f0ad6ecb9ddaf64bd66989047cba27a4d5603ff1" translate="yes" xml:space="preserve">
          <source>Transform a alias-name to its oid.</source>
          <target state="translated">エイリアス名をその oid に変換します。</target>
        </trans-unit>
        <trans-unit id="36c585abe302937d577b48572bd7c0e3655c0630" translate="yes" xml:space="preserve">
          <source>Transform a oid to its aliasname.</source>
          <target state="translated">oidをそのエイリアス名に変換します。</target>
        </trans-unit>
        <trans-unit id="1d5829db0e03928c4e7cde6f753299a051ba3577" translate="yes" xml:space="preserve">
          <source>Transform the input dictionary before compilation, appending &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#inherits&quot;&gt;@inherits&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; of the specified string.</source>
          <target state="translated">コンパイル前に入力辞書を変換し、指定された文字列の &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#inherits&quot;&gt;@inherits&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="1b3111884f3054cc372ba38df92c0a135c770202" translate="yes" xml:space="preserve">
          <source>Transform the input dictionary before compilation, setting &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#name&quot;&gt;@name&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; or &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#prefix&quot;&gt;@prefix&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; to the specified string.</source>
          <target state="translated">設定、コンパイルの前に入力された辞書を変換 &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#name&quot;&gt;@name&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; か &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#prefix&quot;&gt;@prefix&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; を指定した文字列に。</target>
        </trans-unit>
        <trans-unit id="c4f1d57f141d31ace69a30793395cb3994e3e4b6" translate="yes" xml:space="preserve">
          <source>Transforming URIs into a normalized form</source>
          <target state="translated">URIを正規化された形に変換する</target>
        </trans-unit>
        <trans-unit id="52a09e92d39be036799f55f3466102e3964c9981" translate="yes" xml:space="preserve">
          <source>Transforms a &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; into an internal representation that can be used in subsequent calls to &lt;code&gt;&lt;a href=&quot;#match_spec_run-2&quot;&gt;match_spec_run/2&lt;/a&gt;&lt;/code&gt;. The internal representation is opaque and cannot be converted to external term format and then back again without losing its properties (that is, it cannot be sent to a process on another node and still remain a valid compiled match specification, nor can it be stored on disk). To check the validity of a compiled match specification, use &lt;code&gt;&lt;a href=&quot;#is_compiled_ms-1&quot;&gt;is_compiled_ms/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#match_spec_run-2&quot;&gt;match_spec_run/2&lt;/a&gt;&lt;/code&gt; の後続の呼び出しで使用できる内部表現に &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; を変換します。内部表現は不透明であり、外部用語形式に変換できず、そのプロパティを失うことなく再び元に戻すことはできません（つまり、別のノードのプロセスに送信できず、有効なコンパイル済みの一致仕様を維持したり、保存したりできません。ディスク）。コンパイル済みの一致指定の有効性を確認するには、 &lt;code&gt;&lt;a href=&quot;#is_compiled_ms-1&quot;&gt;is_compiled_ms/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="29484fe337b3af71da5ca7a2dac4e696f5f79d47" translate="yes" xml:space="preserve">
          <source>Transforms a syntax tree into an abstract comment. The lines of the comment contain the text for &lt;code&gt;Node&lt;/code&gt;, as produced by the given &lt;code&gt;Printer&lt;/code&gt; function. Each line of the comment is prefixed by the string &lt;code&gt;Prefix&lt;/code&gt; (this does not include the initial &quot;&lt;code&gt;%&lt;/code&gt;&quot; character of the comment line).</source>
          <target state="translated">構文ツリーを抽象的なコメントに変換します。コメントの行には、指定された &lt;code&gt;Printer&lt;/code&gt; 関数によって生成された &lt;code&gt;Node&lt;/code&gt; のテキストが含まれています。コメントの各行には、文字列 &lt;code&gt;Prefix&lt;/code&gt; が前に付きます（コメント行の最初の「 &lt;code&gt;%&lt;/code&gt; 」文字は含まれません）。</target>
        </trans-unit>
        <trans-unit id="0cbb6e0e6a14a90b777a9f90d55d975cb9b29ca2" translate="yes" xml:space="preserve">
          <source>Transforms addresses from internal MIB format to one more useful to &lt;code&gt;&lt;a href=&quot;snmp_agent_netif&quot;&gt;Agent Net if&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;snmp_agent_netif&quot;&gt;Agent Net if&lt;/a&gt;&lt;/code&gt; アドレスを内部MIB形式からAgent Netにとってより有用な形式に変換します。</target>
        </trans-unit>
        <trans-unit id="dec43f85ac93650f89af6686bc1b1b60f6b9599f" translate="yes" xml:space="preserve">
          <source>Transforms an &lt;code&gt;URI&lt;/code&gt; into a normalized form using Syntax-Based Normalization as defined by &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; で定義されている構文ベースの正規化を使用して、 &lt;code&gt;URI&lt;/code&gt; を正規化された形式に変換します。</target>
        </trans-unit>
        <trans-unit id="d1d9a9fd8f3259ae9990008a8a6bec24b152a43a" translate="yes" xml:space="preserve">
          <source>Transforms an SNMP index to the corresponding Mnesia key. If the SNMP table has multiple keys, the key is a tuple of the key columns.</source>
          <target state="translated">SNMPインデックスを対応するMnesiaキーに変換します。SNMPテーブルに複数のキーがある場合、キーはキー列のタプルになります。</target>
        </trans-unit>
        <trans-unit id="187ea5deff287a5504fddf1b7e36cd0f09e23500" translate="yes" xml:space="preserve">
          <source>Transforms the &lt;code&gt;person&lt;/code&gt; table from a RAM table into a disc-based table at &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">変換 &lt;code&gt;person&lt;/code&gt; でディスクベースのテーブルにRAMテーブルからテーブルを &lt;code&gt;Node&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e599fefddd1839d024d114d1fae1e8b80cf9332c" translate="yes" xml:space="preserve">
          <source>Transforms trace data and makes an event record out of it.</source>
          <target state="translated">トレースデータを変換し、イベントレコードを作成します。</target>
        </trans-unit>
        <trans-unit id="dae87e24dc1095e84bcbb6fcaaaa2c5136770260" translate="yes" xml:space="preserve">
          <source>Transient Failures</source>
          <target state="translated">過渡故障</target>
        </trans-unit>
        <trans-unit id="340b8d86a3623f3b21be6c18b845921955f1271a" translate="yes" xml:space="preserve">
          <source>Transition options can be set by &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;actions&lt;/a&gt;&lt;/code&gt; and modify the state transition. Here are the sequence of steps for a state transition:</source>
          <target state="translated">遷移オプションは &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;actions&lt;/a&gt;&lt;/code&gt; によって設定でき、状態遷移を変更できます。状態遷移の一連の手順は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6f68e1d1cfad7a14a47ac7096b71655133e8d261" translate="yes" xml:space="preserve">
          <source>Translates an SCTP error number from, for example, &lt;code&gt;#sctp_remote_error{}&lt;/code&gt; or &lt;code&gt;#sctp_send_failed{}&lt;/code&gt; into an explanatory string, or one of the atoms &lt;code&gt;ok&lt;/code&gt; for no error or &lt;code&gt;undefined&lt;/code&gt; for an unrecognized error.</source>
          <target state="translated">SCTPエラー番号を、たとえば &lt;code&gt;#sctp_remote_error{}&lt;/code&gt; または &lt;code&gt;#sctp_send_failed{}&lt;/code&gt; から説明文字列に変換します。エラーがない場合は &lt;code&gt;ok&lt;/code&gt; 、認識できないエラーの場合は &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6fca7eec0c5c2c402ec9feaf20fb1cf586209144" translate="yes" xml:space="preserve">
          <source>Translates signature algorithm OID to Erlang digest and signature types.</source>
          <target state="translated">署名アルゴリズムのOIDをErlangのダイジェストと署名タイプに変換します。</target>
        </trans-unit>
        <trans-unit id="2dd26e871e1b0c6741054f66f2c8c6fd1ff461e9" translate="yes" xml:space="preserve">
          <source>Translates the binary trace logs into something readable. By default, &lt;code&gt;ttb&lt;/code&gt; presents each trace message as a line of text, but you can also write your own handler to make more complex interpretations of the trace information. A trace log can also be presented graphically with application Event Tracer (ET).</source>
          <target state="translated">バイナリトレースログを読み取り可能なものに変換します。デフォルトでは、 &lt;code&gt;ttb&lt;/code&gt; は各トレースメッセージをテキスト行として表示しますが、独自のハンドラーを記述して、トレース情報をより複雑に解釈することもできます。トレースログは、アプリケーションイベントトレーサー（ET）を使用してグラフィカルに表示することもできます。</target>
        </trans-unit>
        <trans-unit id="247b327869ef6106bf80329969b8c8bd5956cb2a" translate="yes" xml:space="preserve">
          <source>Translation Agents</source>
          <target state="translated">翻訳エージェント</target>
        </trans-unit>
        <trans-unit id="c10d76c9a4b81c39c13a3bbf7cdb7a157dfb1551" translate="yes" xml:space="preserve">
          <source>Transport</source>
          <target state="translated">Transport</target>
        </trans-unit>
        <trans-unit id="b374a75b21ba249e1509b4f849a514f5f64e23f6" translate="yes" xml:space="preserve">
          <source>Transport Failure Algorithm</source>
          <target state="translated">トランスポート失敗アルゴリズム</target>
        </trans-unit>
        <trans-unit id="67ca25bf09fe1a4bc0aa43dea06a3fcf06720b9d" translate="yes" xml:space="preserve">
          <source>Transport Failure Detection</source>
          <target state="translated">トランスポート障害検出</target>
        </trans-unit>
        <trans-unit id="c24199b7fc627de79e3a1c89011039b836457577" translate="yes" xml:space="preserve">
          <source>Transport Layer Security (TLS) and its predecessor, the Secure Sockets Layer (SSL), are cryptographic protocols designed to provide communications security over a computer network. The protocols use X.509 certificates and hence public key (asymmetric) cryptography to authenticate the counterpart with whom they communicate, and to exchange a symmetric key for payload encryption. The protocol provides data/message confidentiality (encryption), integrity (through message authentication code checks) and host verification (through certificate path validation). DTLS (Datagram Transport Layer Security) that is based on TLS but datagram oriented instead of stream oriented.</source>
          <target state="translated">トランスポートレイヤーセキュリティ(TLS)とその前身であるセキュアソケットレイヤー(SSL)は、コンピュータネットワーク上で通信のセキュリティを提供するために設計された暗号化プロトコルです。プロトコルは、X.509証明書とそれゆえに公開鍵(非対称)暗号技術を使用して、通信相手を認証し、ペイロードの暗号化のための対称鍵を交換します。このプロトコルは、データ/メッセージの機密性(暗号化)、完全性(メッセージ認証コードチェックによる)、ホスト検証(証明書パス検証による)を提供します。DTLS (Datagram Transport Layer Security)は、TLS をベースにしていますが、ストリーム指向ではなくデータグラム指向です。</target>
        </trans-unit>
        <trans-unit id="784cd0f786d540e1df407cfe0bdede50bd4a091f" translate="yes" xml:space="preserve">
          <source>Transpose characters</source>
          <target state="translated">文字の転置</target>
        </trans-unit>
        <trans-unit id="6e192302cce69f9e090d601f54b7e73e6fdccdad" translate="yes" xml:space="preserve">
          <source>Traverses &lt;code&gt;Dirs&lt;/code&gt; and adds each &lt;code&gt;Dir&lt;/code&gt; to the beginning of the code path. This means that the order of &lt;code&gt;Dirs&lt;/code&gt; is reversed in the resulting code path. For example, if you add &lt;code&gt;[Dir1,Dir2]&lt;/code&gt;, the resulting path will be &lt;code&gt;[Dir2,Dir1|OldCodePath]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Dirs&lt;/code&gt; をトラバースし、各 &lt;code&gt;Dir&lt;/code&gt; をコードパスの先頭に追加します。つまり、結果のコードパスでは &lt;code&gt;Dirs&lt;/code&gt; の順序が逆になります。たとえば、 &lt;code&gt;[Dir1,Dir2]&lt;/code&gt; を追加すると、結果のパスは &lt;code&gt;[Dir2,Dir1|OldCodePath]&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="137a357a519bf577c3a49eea20ac865057de4ba8" translate="yes" xml:space="preserve">
          <source>Traverses a table and performs operations on all records in the table. When the end of the table is reached, the special key &lt;code&gt;'$end_of_table'&lt;/code&gt; is returned. Otherwise the function returns a key that can be used to read the actual record.</source>
          <target state="translated">テーブルを走査し、テーブル内のすべてのレコードに対して操作を実行します。テーブルの最後に到達すると、特別なキー &lt;code&gt;'$end_of_table'&lt;/code&gt; が返されます。それ以外の場合、関数は実際のレコードを読み取るために使用できるキーを返します。</target>
        </trans-unit>
        <trans-unit id="d196f97744321413a11b3f30616c9f2f4eec01c6" translate="yes" xml:space="preserve">
          <source>Traverses a table and performs operations on all records in the table. When the end of the table is reached, the special key &lt;code&gt;'$end_of_table'&lt;/code&gt; is returned. Otherwise, the function returns a key that can be used to read the actual record. The behavior is undefined if another Erlang process performs write operations on the table while it is being traversed with the function &lt;code&gt;mnesia:dirty_next/2&lt;/code&gt;.</source>
          <target state="translated">テーブルを走査し、テーブル内のすべてのレコードに対して操作を実行します。テーブルの最後に到達すると、特別なキー &lt;code&gt;'$end_of_table'&lt;/code&gt; が返されます。それ以外の場合、関数は実際のレコードを読み取るために使用できるキーを返します。関数 &lt;code&gt;mnesia:dirty_next/2&lt;/code&gt; でトラバースされている間に別のErlangプロセスがテーブルに対して書き込み操作を実行した場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="8dc9f15de712d9d574738e5b2e0901706f6adc90" translate="yes" xml:space="preserve">
          <source>Traverses a table in a manner similar to the function &lt;code&gt;mnesia:dirty_next/2&lt;/code&gt;. A table has a number of slots that range from 0 (zero) to an unknown upper bound. The function &lt;code&gt;mnesia:dirty_slot/2&lt;/code&gt; returns the special atom &lt;code&gt;'$end_of_table'&lt;/code&gt; when the end of the table is reached. The behavior of this function is undefined if a write operation is performed on the table while it is being traversed.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:dirty_next/2&lt;/code&gt; と同様の方法でテーブルをトラバースします。テーブルには、0（ゼロ）から不明な上限までの範囲のスロット数があります。関数 &lt;code&gt;mnesia:dirty_slot/2&lt;/code&gt; は、テーブルの最後に到達すると特別なアトム &lt;code&gt;'$end_of_table'&lt;/code&gt; end_of_table 'を返します。トラバース中にテーブルで書き込み操作が実行された場合、この関数の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="d5bce8436ec86270c2bccf19db4667aa0c4b7a23" translate="yes" xml:space="preserve">
          <source>Traversing the set of modules, it then recompiles every module for which at least one of the following conditions apply:</source>
          <target state="translated">モジュールのセットをトラバースして、次の条件のうち少なくとも1つが適用されるすべてのモジュールを再コンパイルします。</target>
        </trans-unit>
        <trans-unit id="c0c84ee4b222403ef3c2a2f6e4a34ab18cd985d5" translate="yes" xml:space="preserve">
          <source>Tries to create directory &lt;code&gt;Dir&lt;/code&gt;. Missing parent directories are &lt;strong&gt;not&lt;/strong&gt; created. Returns &lt;code&gt;ok&lt;/code&gt; if successful.</source>
          <target state="translated">ディレクトリ &lt;code&gt;Dir&lt;/code&gt; の作成を試みます。欠落している親ディレクトリは作成され&lt;strong&gt;ません&lt;/strong&gt;。成功した場合は &lt;code&gt;ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7539b9bc23bf1a63079b6009b66e55de1f511775" translate="yes" xml:space="preserve">
          <source>Tries to create the term of an already existing atom from the &lt;code&gt;NULL&lt;/code&gt;-terminated C-string &lt;code&gt;name&lt;/code&gt; with encoding &lt;code&gt;&lt;a href=&quot;#ErlNifCharEncoding&quot;&gt;encode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">エンコーディング &lt;code&gt;&lt;a href=&quot;#ErlNifCharEncoding&quot;&gt;encode&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;NULL&lt;/code&gt; で終了するC文字列 &lt;code&gt;name&lt;/code&gt; から既存のアトムの項を作成しようとします。</target>
        </trans-unit>
        <trans-unit id="d956aa4d45e626e33feccc52c2e668a01e46c2de" translate="yes" xml:space="preserve">
          <source>Tries to create the term of an already existing atom from the string &lt;code&gt;name&lt;/code&gt; with length &lt;code&gt;len&lt;/code&gt; and encoding &lt;code&gt;&lt;a href=&quot;#ErlNifCharEncoding&quot;&gt;encode&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;NULL&lt;/code&gt; characters are treated as any other characters.</source>
          <target state="translated">長さ &lt;code&gt;len&lt;/code&gt; およびエンコーディング &lt;code&gt;&lt;a href=&quot;#ErlNifCharEncoding&quot;&gt;encode&lt;/a&gt;&lt;/code&gt; の文字列 &lt;code&gt;name&lt;/code&gt; から既存のアトムの項を作成しようとします。 &lt;code&gt;NULL&lt;/code&gt; 文字は他の文字と同様に扱われます。</target>
        </trans-unit>
        <trans-unit id="c7380de8914d3d9d8e70fd1f6c74d924099655d6" translate="yes" xml:space="preserve">
          <source>Tries to delete directory &lt;code&gt;Dir&lt;/code&gt;. The directory must be empty before it can be deleted. Returns &lt;code&gt;ok&lt;/code&gt; if successful.</source>
          <target state="translated">ディレクトリ &lt;code&gt;Dir&lt;/code&gt; の削除を試みます。削除する前に、ディレクトリを空にする必要があります。成功した場合は &lt;code&gt;ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0694587d26aecfbb0a43b20ea81eab04225a2a67" translate="yes" xml:space="preserve">
          <source>Tries to delete file &lt;code&gt;Filename&lt;/code&gt;. Returns &lt;code&gt;ok&lt;/code&gt; if successful.</source>
          <target state="translated">ファイル &lt;code&gt;Filename&lt;/code&gt; の削除を試みます。成功した場合は &lt;code&gt;ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="917cb6bdcab3e4dcc84eba06ed763b346415331e" translate="yes" xml:space="preserve">
          <source>Tries to find a &lt;code&gt;&lt;a href=&quot;#simple_path&quot;&gt;simple path&lt;/a&gt;&lt;/code&gt; from vertex &lt;code&gt;V1&lt;/code&gt; to vertex &lt;code&gt;V2&lt;/code&gt; of digraph &lt;code&gt;G&lt;/code&gt;. Returns the path as a list &lt;code&gt;[V1,&amp;nbsp;...,&amp;nbsp;V2]&lt;/code&gt; of vertices, or &lt;code&gt;false&lt;/code&gt; if no simple path from &lt;code&gt;V1&lt;/code&gt; to &lt;code&gt;V2&lt;/code&gt; of length one or more exists.</source>
          <target state="translated">ダイグラフ &lt;code&gt;G&lt;/code&gt; の頂点 &lt;code&gt;V1&lt;/code&gt; から頂点 &lt;code&gt;V2&lt;/code&gt; への &lt;code&gt;&lt;a href=&quot;#simple_path&quot;&gt;simple path&lt;/a&gt;&lt;/code&gt; を見つけようとします。頂点のリスト &lt;code&gt;[V1,&amp;nbsp;...,&amp;nbsp;V2]&lt;/code&gt; としてパスを返します &lt;code&gt;V1&lt;/code&gt; から1つ以上の長さの &lt;code&gt;V2&lt;/code&gt; への単純なパスが存在しない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d6d56eefae6afa713ee58d8d532711a39f9d00e8" translate="yes" xml:space="preserve">
          <source>Tries to find an application downgrade script for &lt;code&gt;App&lt;/code&gt; from the current version to a previous version &lt;code&gt;OldVsn&lt;/code&gt; located in &lt;code&gt;Dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; にある、現在のバージョンから前のバージョンの &lt;code&gt;OldVsn&lt;/code&gt; への &lt;code&gt;App&lt;/code&gt; アプリケーションダウングレードスクリプトを見つけようとします。</target>
        </trans-unit>
        <trans-unit id="5b3cdb4b87509cbcdcf3943a3bdad2d3f9b6d987" translate="yes" xml:space="preserve">
          <source>Tries to find an application upgrade script for &lt;code&gt;App&lt;/code&gt; from the current version to a new version located in &lt;code&gt;Dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;App&lt;/code&gt; の現在のバージョンから &lt;code&gt;Dir&lt;/code&gt; にある新しいバージョンへのアプリケーションアップグレードスクリプトを見つけようとします。</target>
        </trans-unit>
        <trans-unit id="63810144427574ddc18730d454daf02c43dd8338" translate="yes" xml:space="preserve">
          <source>Tries to find an as short as possible &lt;code&gt;&lt;a href=&quot;#simple_cycle&quot;&gt;simple cycle&lt;/a&gt;&lt;/code&gt; through vertex &lt;code&gt;V&lt;/code&gt; of digraph &lt;code&gt;G&lt;/code&gt;. Returns the cycle as a list &lt;code&gt;[V,&amp;nbsp;...,&amp;nbsp;V]&lt;/code&gt; of vertices, or &lt;code&gt;false&lt;/code&gt; if no simple cycle through &lt;code&gt;V&lt;/code&gt; exists. Notice that a &lt;code&gt;&lt;a href=&quot;#loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; through &lt;code&gt;V&lt;/code&gt; is returned as list &lt;code&gt;[V,&amp;nbsp;V]&lt;/code&gt;.</source>
          <target state="translated">ダイグラフ &lt;code&gt;G&lt;/code&gt; の頂点 &lt;code&gt;V&lt;/code&gt; を通る可能 &lt;code&gt;&lt;a href=&quot;#simple_cycle&quot;&gt;simple cycle&lt;/a&gt;&lt;/code&gt; 限り短い単純なサイクルを見つけようとします。リストとして返しサイクル &lt;code&gt;[V,&amp;nbsp;...,&amp;nbsp;V]&lt;/code&gt; 頂点の、または &lt;code&gt;false&lt;/code&gt; による単純なサイクルならば &lt;code&gt;V&lt;/code&gt; は存在しません。 &lt;code&gt;V&lt;/code&gt; を通る &lt;code&gt;&lt;a href=&quot;#loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; がリスト &lt;code&gt;[V,&amp;nbsp;V]&lt;/code&gt; として返されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7dd32105e9ea9dba4a3239b99d2841486b3f987d" translate="yes" xml:space="preserve">
          <source>Tries to find an as short as possible &lt;code&gt;&lt;a href=&quot;#simple_path&quot;&gt;simple path&lt;/a&gt;&lt;/code&gt; from vertex &lt;code&gt;V1&lt;/code&gt; to vertex &lt;code&gt;V2&lt;/code&gt; of digraph &lt;code&gt;G&lt;/code&gt;. Returns the path as a list &lt;code&gt;[V1,&amp;nbsp;...,&amp;nbsp;V2]&lt;/code&gt; of vertices, or &lt;code&gt;false&lt;/code&gt; if no simple path from &lt;code&gt;V1&lt;/code&gt; to &lt;code&gt;V2&lt;/code&gt; of length one or more exists.</source>
          <target state="translated">ダイグラフ &lt;code&gt;G&lt;/code&gt; の頂点 &lt;code&gt;V1&lt;/code&gt; から頂点 &lt;code&gt;V2&lt;/code&gt; への可能 &lt;code&gt;&lt;a href=&quot;#simple_path&quot;&gt;simple path&lt;/a&gt;&lt;/code&gt; 限り短い単純なパスを見つけようとします。頂点のリスト &lt;code&gt;[V1,&amp;nbsp;...,&amp;nbsp;V2]&lt;/code&gt; としてパスを返します &lt;code&gt;V1&lt;/code&gt; から1つ以上の長さの &lt;code&gt;V2&lt;/code&gt; への単純なパスが存在しない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f904e656f227e2a584648e9091f6b33093af20b3" translate="yes" xml:space="preserve">
          <source>Tries to load a module in the same way as &lt;code&gt;&lt;a href=&quot;#load_file-1&quot;&gt;load_file/1&lt;/a&gt;&lt;/code&gt;, unless the module is already loaded. However, in embedded mode it does not load a module that is not already loaded, but returns &lt;code&gt;{error, embedded}&lt;/code&gt; instead. See &lt;code&gt;&lt;a href=&quot;#error_reasons&quot;&gt;Error Reasons for Code-Loading Functions&lt;/a&gt;&lt;/code&gt; for a description of other possible error reasons.</source>
          <target state="translated">モジュールがすでにロードされていない限り、 &lt;code&gt;&lt;a href=&quot;#load_file-1&quot;&gt;load_file/1&lt;/a&gt;&lt;/code&gt; と同じ方法でモジュールをロードしようとします。ただし、埋め込みモードでは、まだ読み込まれていないモジュールは読み込まれませんが &lt;code&gt;{error, embedded}&lt;/code&gt; 代わりに{error、embedded}が返されます。他の考えられるエラー理由の説明については、 &lt;code&gt;&lt;a href=&quot;#error_reasons&quot;&gt;Error Reasons for Code-Loading Functions&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="ec25834fa1b726007249264a0c7c78aaaf71538e" translate="yes" xml:space="preserve">
          <source>Tries to load all of the modules in the list &lt;code&gt;Modules&lt;/code&gt; atomically. That means that either all modules are loaded at the same time, or none of the modules are loaded if there is a problem with any of the modules.</source>
          <target state="translated">リスト &lt;code&gt;Modules&lt;/code&gt; 内のすべてのモジュールをアトミックにロードしようとします。つまり、すべてのモジュールが同時に読み込まれるか、いずれかのモジュールに問題がある場合はモジュールが読み込まれません。</target>
        </trans-unit>
        <trans-unit id="1aaf9b09924ea99accd919111039be58e3e4e9fc" translate="yes" xml:space="preserve">
          <source>Tries to load and restore Debugger settings from a file previously saved using &lt;strong&gt;Save Settings...&lt;/strong&gt; (see below). Any errors are silently ignored.</source>
          <target state="translated">以前に&lt;strong&gt;[設定の保存...]&lt;/strong&gt;を使用して&lt;strong&gt;保存&lt;/strong&gt;したファイルからデバッガ設定をロードして復元しようとし&lt;strong&gt;ます&lt;/strong&gt;（以下を参照）。エラーは無視されます。</target>
        </trans-unit>
        <trans-unit id="9bc1b21fc8af03b36192dd6ac14e4e4450744f7e" translate="yes" xml:space="preserve">
          <source>Tries to load any modules not already loaded in the list &lt;code&gt;Modules&lt;/code&gt; in the same way as &lt;code&gt;&lt;a href=&quot;#load_file-1&quot;&gt;load_file/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#load_file-1&quot;&gt;load_file/1&lt;/a&gt;&lt;/code&gt; と同じ方法で、リスト &lt;code&gt;Modules&lt;/code&gt; にまだロードされていないモジュールをロードしようとします。</target>
        </trans-unit>
        <trans-unit id="b645a31575ab3155bc8f781878d4d3b627bae342" translate="yes" xml:space="preserve">
          <source>Tries to load code for all modules that have been previously prepared by &lt;code&gt;&lt;a href=&quot;#prepare_loading-1&quot;&gt;prepare_loading/1&lt;/a&gt;&lt;/code&gt;. The loading occurs atomically, meaning that either all modules are loaded at the same time, or none of the modules are loaded.</source>
          <target state="translated">以前に &lt;code&gt;&lt;a href=&quot;#prepare_loading-1&quot;&gt;prepare_loading/1&lt;/a&gt;&lt;/code&gt; によって準備されたすべてのモジュールのコードをロードしようとします。ロードはアトミックに行われます。つまり、すべてのモジュールが同時に読み込まれるか、モジュールがまったく読み込まれません。</target>
        </trans-unit>
        <trans-unit id="f4b988df2289cf719529adabbdd5889a80ea66c6" translate="yes" xml:space="preserve">
          <source>Tries to load the Erlang module &lt;code&gt;Module&lt;/code&gt;, using the code path. It looks for the object code file with an extension corresponding to the Erlang machine used, for example, &lt;code&gt;Module.beam&lt;/code&gt;. The loading fails if the module name found in the object code differs from the name &lt;code&gt;Module&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;#load_binary-3&quot;&gt;load_binary/3&lt;/a&gt;&lt;/code&gt; must be used to load object code with a module name that is different from the file name.</source>
          <target state="translated">コードパスを使用して、Erlangモジュール &lt;code&gt;Module&lt;/code&gt; をロードしようとします。 &lt;code&gt;Module.beam&lt;/code&gt; など、使用されているErlangマシンに対応する拡張子を持つオブジェクトコードファイルを探します。オブジェクトコードにある &lt;code&gt;Module&lt;/code&gt; 名がModuleと異なる場合、ロードは失敗します。 &lt;code&gt;&lt;a href=&quot;#load_binary-3&quot;&gt;load_binary/3&lt;/a&gt;&lt;/code&gt; を使用して、ファイル名とは異なるモジュール名のオブジェクトコードをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="b49e8d37404b75156cbbeb1637eb4e0c68260be5" translate="yes" xml:space="preserve">
          <source>Tries to lock a mutex. A thread that has currently locked the mutex &lt;strong&gt;cannot&lt;/strong&gt; try to lock the same mutex again.</source>
          <target state="translated">ミューテックスをロックしようとします。現在mutex &lt;strong&gt;を&lt;/strong&gt;ロックしているスレッドは、同じmutexを再度ロックする&lt;strong&gt;ことはできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="369d095339d331183fd1de82b70ca1f958ce57f3" translate="yes" xml:space="preserve">
          <source>Tries to read &lt;code&gt;String&lt;/code&gt; in accordance with the control sequences in &lt;code&gt;Format&lt;/code&gt;. For a detailed description of the available formatting options, see &lt;code&gt;&lt;a href=&quot;io#fread-3&quot;&gt;io:fread/3&lt;/a&gt;&lt;/code&gt;. It is assumed that &lt;code&gt;String&lt;/code&gt; contains whole lines.</source>
          <target state="translated">&lt;code&gt;Format&lt;/code&gt; の制御シーケンスに従って &lt;code&gt;String&lt;/code&gt; を読み取ろうとします。使用可能なフォーマットオプションの詳細については、 &lt;code&gt;&lt;a href=&quot;io#fread-3&quot;&gt;io:fread/3&lt;/a&gt;&lt;/code&gt; を参照してください。 &lt;code&gt;String&lt;/code&gt; は行全体を含むと想定されています。</target>
        </trans-unit>
        <trans-unit id="b5361d5cdb192bb80b006486e2deeb6e3a86a448" translate="yes" xml:space="preserve">
          <source>Tries to read lock an rwlock.</source>
          <target state="translated">rwlock のロックを読み込もうとします。</target>
        </trans-unit>
        <trans-unit id="078c41228c821f4992dac3d604b1f36b0a4cc3ba" translate="yes" xml:space="preserve">
          <source>Tries to read/write lock an rwlock. A thread that currently has read or read/write locked the rwlock &lt;strong&gt;cannot&lt;/strong&gt; try to lock the same rwlock again.</source>
          <target state="translated">rwlockの読み取り/書き込みロックを試みます。現在rwlockを読み取りまたは読み取り/書き込みロックしているスレッド&lt;strong&gt;は&lt;/strong&gt;、同じrwlockを再度ロックする&lt;strong&gt;ことはできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="542b3a8d434cdeb35d54c993e320baf91923b244" translate="yes" xml:space="preserve">
          <source>Tries to rename the file &lt;code&gt;Source&lt;/code&gt; to &lt;code&gt;Destination&lt;/code&gt;. It can be used to move files (and directories) between directories, but it is not sufficient to specify the destination only. The destination filename must also be specified. For example, if &lt;code&gt;bar&lt;/code&gt; is a normal file and &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; are directories, &lt;code&gt;rename(&quot;foo/bar&quot;, &quot;baz&quot;)&lt;/code&gt; returns an error, but &lt;code&gt;rename(&quot;foo/bar&quot;, &quot;baz/bar&quot;)&lt;/code&gt; succeeds. Returns &lt;code&gt;ok&lt;/code&gt; if it is successful.</source>
          <target state="translated">ファイル &lt;code&gt;Source&lt;/code&gt; を &lt;code&gt;Destination&lt;/code&gt; に名前変更しようとします。ディレクトリ間でファイル（およびディレクトリ）を移動するために使用できますが、宛先のみを指定するだけでは不十分です。宛先ファイル名も指定する必要があります。たとえば、 &lt;code&gt;bar&lt;/code&gt; が通常のファイルで、 &lt;code&gt;foo&lt;/code&gt; と &lt;code&gt;baz&lt;/code&gt; がディレクトリの場合、 &lt;code&gt;rename(&quot;foo/bar&quot;, &quot;baz&quot;)&lt;/code&gt; はエラーを返しますが、 &lt;code&gt;rename(&quot;foo/bar&quot;, &quot;baz/bar&quot;)&lt;/code&gt; 成功します。成功すると &lt;code&gt;ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b69799527904c5b0f81a27b2394603c188136973" translate="yes" xml:space="preserve">
          <source>Tries to set the scheduler bind type. The same as flag &lt;code&gt;&lt;a href=&quot;#+sbt&quot;&gt;+sbt&lt;/a&gt;&lt;/code&gt; except how some errors are handled. For more information, see &lt;code&gt;&lt;a href=&quot;#+sbt&quot;&gt;+sbt&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">スケジューラのバインドタイプを設定しようとします。一部のエラーの処理方法を除いて、フラグ &lt;code&gt;&lt;a href=&quot;#+sbt&quot;&gt;+sbt&lt;/a&gt;&lt;/code&gt; と同じです。詳細については、 &lt;code&gt;&lt;a href=&quot;#+sbt&quot;&gt;+sbt&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3739b1427af771c5c5c521a0baa015d6c8471836" translate="yes" xml:space="preserve">
          <source>Tries to suspend all processes using a module &lt;code&gt;Mod&lt;/code&gt;. If a process does not respond, it is ignored. This can cause the process to die, either because it crashes when it spontaneously switches to new code, or as a result of a purge operation. If no &lt;code&gt;Timeout&lt;/code&gt; is specified or &lt;code&gt;default&lt;/code&gt; is specified, the default value for &lt;code&gt;sys:suspend&lt;/code&gt; is used.</source>
          <target state="translated">モジュール &lt;code&gt;Mod&lt;/code&gt; を使用してすべてのプロセスを一時停止しようとします。プロセスが応答しない場合は無視されます。これにより、プロセスが自発的に新しいコードに切り替わったときにクラッシュしたり、パージ操作の結果として、プロセスが停止する可能性があります。何場合は &lt;code&gt;Timeout&lt;/code&gt; 指定されていないか、 &lt;code&gt;default&lt;/code&gt; 指定され、デフォルト値 &lt;code&gt;sys:suspend&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="f07a25fbd2993e4438fecb34b5a2a265898a4510" translate="yes" xml:space="preserve">
          <source>Trigger the user-probe &lt;code&gt;user_trace_i4s4&lt;/code&gt; in the NIF library &lt;code&gt;dyntrace.so&lt;/code&gt; by calling &lt;code&gt;dyntrace:p/{1,2,3,4,5,6,7,8}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dyntrace:p/{1,2,3,4,5,6,7,8}&lt;/code&gt; を呼び出して、NIFライブラリ &lt;code&gt;dyntrace.so&lt;/code&gt; のユーザープローブ &lt;code&gt;user_trace_i4s4&lt;/code&gt; をトリガーします。</target>
        </trans-unit>
        <trans-unit id="55b4e339fc739fe569582f228faed311550ce6f3" translate="yes" xml:space="preserve">
          <source>Triggers garbage collection of requested type. Default value is &lt;code&gt;'major'&lt;/code&gt;, which would trigger a fullsweep GC. The option &lt;code&gt;'minor'&lt;/code&gt; is considered a hint and may lead to either minor or major GC run.</source>
          <target state="translated">要求されたタイプのガベージコレクションをトリガーします。デフォルト値は &lt;code&gt;'major'&lt;/code&gt; で、これによりフルスイープGCがトリガーされます。オプション &lt;code&gt;'minor'&lt;/code&gt; はヒントと見なされ、マイナーまたはメジャーのGC実行につながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="bce7d4bc5bdcfee52b94b55561a6aeaf81f157f5" translate="yes" xml:space="preserve">
          <source>Triggers the next message to be streamed, that is, the same behavior as active ones for sockets.</source>
          <target state="translated">次のメッセージをストリームするようにトリガします。</target>
        </trans-unit>
        <trans-unit id="a0f37655e58e53f4d21a5d5b772a98970d6a45b9" translate="yes" xml:space="preserve">
          <source>Trim threshold size (in kilobytes). This is the maximum amount of free memory at the top of the heap (allocated by &lt;code&gt;sbrk&lt;/code&gt;) that is kept by &lt;code&gt;malloc&lt;/code&gt; (not released to the operating system). When the amount of free memory at the top of the heap exceeds the trim threshold, &lt;code&gt;malloc&lt;/code&gt; releases it (by calling &lt;code&gt;sbrk&lt;/code&gt;). Trim threshold is specified in kilobytes. Defaults to &lt;code&gt;128&lt;/code&gt;.</source>
          <target state="translated">トリムしきい値サイズ（キロバイト単位）。これは、（ &lt;code&gt;sbrk&lt;/code&gt; によって割り当てられた）ヒープの一番上の空きメモリの最大量であり、 &lt;code&gt;malloc&lt;/code&gt; によって保持されます（オペレーティングシステムには解放されません）。ヒープ上部の空きメモリ量がトリムしきい値を超えると、 &lt;code&gt;malloc&lt;/code&gt; はそれを解放します（ &lt;code&gt;sbrk&lt;/code&gt; を呼び出すことにより）。トリムしきい値はキロバイトで指定されます。デフォルトは &lt;code&gt;128&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="95ec715dc8ff6a5284221ec8f9868a8798be9478" translate="yes" xml:space="preserve">
          <source>Trivial FTP.</source>
          <target state="translated">些細なFTP。</target>
        </trans-unit>
        <trans-unit id="4ba00956ec7cf24ae072a34b8ff599479668e012" translate="yes" xml:space="preserve">
          <source>Trivial example (beep on anything except empty line, which is expanded to &lt;code&gt;&quot;quit&quot;&lt;/code&gt;):</source>
          <target state="translated">簡単な例（ &lt;code&gt;&quot;quit&quot;&lt;/code&gt; に展開される空の行を除いてビープ音を鳴らす）：</target>
        </trans-unit>
        <trans-unit id="c64384e3540118ebd85f8e8adda7b3a0d9d9d577" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is a binary.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; がバイナリの場合は真。</target>
        </trans-unit>
        <trans-unit id="2184451194ed3a9022be648eb665e2e8303c78bb" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is a floating point number.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; が浮動小数点数であれば真。</target>
        </trans-unit>
        <trans-unit id="739f16017ed1c1b0d52375a346e88d29489f5f4c" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is a list with at least one element.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; が少なくとも1つの要素を持つリストの場合は真。</target>
        </trans-unit>
        <trans-unit id="4dc6a0f22eecbe39d3b7bafca6d0ecf3f15fab72" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is a list with zero or more elements.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; が0個以上の要素を持つリストの場合は真。</target>
        </trans-unit>
        <trans-unit id="7e4dec6465a412dda92c461f8f7e72cba72e9ec3" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is a pid (process identifier).</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; がpid（プロセス識別子）の場合は真。</target>
        </trans-unit>
        <trans-unit id="ca9f92d44502347305071d3028c3415ccc6539b0" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is a port.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; がポートの場合は真。</target>
        </trans-unit>
        <trans-unit id="63b81f24f20e74b9964fd68165f42bbd5f102696" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is a reference.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; が参照の場合は真。</target>
        </trans-unit>
        <trans-unit id="369ae59368966778ddc2fa05ef42ca484213f640" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is a tuple.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; がタプルの場合は真。</target>
        </trans-unit>
        <trans-unit id="200e8169564499251662fa489120aa02ef56f5b7" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is an atom.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; がアトムの場合は真。</target>
        </trans-unit>
        <trans-unit id="d2096948a91663a352916722e0007725da8866ba" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is an empty list.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; が空のリストの場合は真。</target>
        </trans-unit>
        <trans-unit id="7cf519e4319be41a9707146ad88931f2320203e5" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;t&lt;/code&gt; is an integer.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; が整数の場合は真。</target>
        </trans-unit>
        <trans-unit id="58de67beda24834e524aecdc74c16cbb945cf7c3" translate="yes" xml:space="preserve">
          <source>Truncates the file referenced by &lt;code&gt;IoDevice&lt;/code&gt; at the current position. Returns &lt;code&gt;ok&lt;/code&gt; if successful, otherwise &lt;code&gt;{error, Reason}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; によって参照されるファイルを現在の位置で切り捨てます。成功した場合は &lt;code&gt;ok&lt;/code&gt; 、それ以外の場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="37023c65abd347268bb58c87d2fb0048749a483a" translate="yes" xml:space="preserve">
          <source>Try out the new function &lt;code&gt;mult&lt;/code&gt;:</source>
          <target state="translated">新しい関数 &lt;code&gt;mult&lt;/code&gt; を試してください：</target>
        </trans-unit>
        <trans-unit id="8ff47aa173fda0968a762374da8240dfe8b55c52" translate="yes" xml:space="preserve">
          <source>Trying to evaluate a &lt;code&gt;throw&lt;/code&gt;outside a &lt;code&gt;catch&lt;/code&gt;. &lt;code&gt;V&lt;/code&gt; is the thrown term.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 外で &lt;code&gt;throw&lt;/code&gt; を評価しようとしています。 &lt;code&gt;V&lt;/code&gt; はスローされた用語です。</target>
        </trans-unit>
        <trans-unit id="cae5dd25bf19639aecf488ad3d7ba57e76736991" translate="yes" xml:space="preserve">
          <source>Trying to link to a non-existing process.</source>
          <target state="translated">存在しないプロセスにリンクしようとしています。</target>
        </trans-unit>
        <trans-unit id="f4134e3f0fb2b5c47f2d5517769378391de080f4" translate="yes" xml:space="preserve">
          <source>Tunes the compression algorithm. Use the following values:</source>
          <target state="translated">圧縮アルゴリズムを調整します。以下の値を使用します。</target>
        </trans-unit>
        <trans-unit id="c41a2be51027c17da2914785c19c9af65da7231f" translate="yes" xml:space="preserve">
          <source>Tuple</source>
          <target state="translated">Tuple</target>
        </trans-unit>
        <trans-unit id="83ed105f4df89ed36299f9fd59a044cb698807f7" translate="yes" xml:space="preserve">
          <source>Tuples &lt;code&gt;{error, error_info()}&lt;/code&gt; and &lt;code&gt;{warning, error_info()}&lt;/code&gt;, denoting syntactically incorrect forms and warnings, and &lt;code&gt;{eof, line()}&lt;/code&gt;, denoting an end-of-stream encountered before a complete form had been parsed.</source>
          <target state="translated">タプル &lt;code&gt;{error, error_info()}&lt;/code&gt; および &lt;code&gt;{warning, error_info()}&lt;/code&gt; 、構文的に不正なフォームと警告を示し、 &lt;code&gt;{eof, line()}&lt;/code&gt; は、完全なフォームが解析される前に検出されたストリームの終わりを示します。</target>
        </trans-unit>
        <trans-unit id="0ffa679969428a6c8a5fbef9da583b1339b8f137" translate="yes" xml:space="preserve">
          <source>Tuples &lt;code&gt;{error,E}&lt;/code&gt; and &lt;code&gt;{warning,W}&lt;/code&gt;, denoting syntactically incorrect forms and warnings.</source>
          <target state="translated">タプル &lt;code&gt;{error,E}&lt;/code&gt; および &lt;code&gt;{warning,W}&lt;/code&gt; 、構文的に正しくない形式および警告を示します。</target>
        </trans-unit>
        <trans-unit id="f4a5e32a69d4a4da5b271ce1389ce7de27bf6be9" translate="yes" xml:space="preserve">
          <source>Tuples and string formats accepted by versions before ssl-8.2.4 will be converted for backwards compatibility</source>
          <target state="translated">ssl-8.2.4 より前のバージョンで受け入れられたタプルと文字列形式は、下位互換性のために変換されます。</target>
        </trans-unit>
        <trans-unit id="f1ed151ede62f70799b920d57a42f17bd5fb2581" translate="yes" xml:space="preserve">
          <source>Tuples can have more than two parts, in fact as many parts as you want, and contain any valid Erlang &lt;strong&gt;term&lt;/strong&gt;. For example, to represent the temperature of various cities of the world:</source>
          <target state="translated">タプルは3つ以上の部分、実際には必要なだけの部分を持つことができ、有効なErlang &lt;strong&gt;用語&lt;/strong&gt;を含むことができます。たとえば、世界のさまざまな都市の気温を表すには：</target>
        </trans-unit>
        <trans-unit id="ef0f5b8ef4ff33f41dc26081793feb3c120d0be9" translate="yes" xml:space="preserve">
          <source>Tuples have a fixed number of items in them. Each item in a tuple is called an &lt;strong&gt;element&lt;/strong&gt;. In the tuple &lt;code&gt;{moscow,{c,-10}}&lt;/code&gt;, element 1 is &lt;code&gt;moscow&lt;/code&gt; and element 2 is &lt;code&gt;{c,-10}&lt;/code&gt;. Here &lt;code&gt;c&lt;/code&gt; represents Celsius and &lt;code&gt;f&lt;/code&gt; Fahrenheit.</source>
          <target state="translated">タプルには固定数のアイテムがあります。タプルの各項目は、&lt;strong&gt;要素&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。タプル &lt;code&gt;{moscow,{c,-10}}&lt;/code&gt; では、要素1は &lt;code&gt;moscow&lt;/code&gt; 、要素2は &lt;code&gt;{c,-10}&lt;/code&gt; です。ここで、 &lt;code&gt;c&lt;/code&gt; は摂氏、 &lt;code&gt;f&lt;/code&gt; は華氏を表します。</target>
        </trans-unit>
        <trans-unit id="6af244d55aef38e6c2274514e3d2ab60c94ed28b" translate="yes" xml:space="preserve">
          <source>Tuples in the template express if-exist tests for metadata keys. For example, the following tuple says that if &lt;code&gt;key1&lt;/code&gt; exists in the metadata map, print &lt;code&gt;&quot;key1=Value&quot;&lt;/code&gt;, where &lt;code&gt;Value&lt;/code&gt; is the value that &lt;code&gt;key1&lt;/code&gt; is associated with in the metadata map. If &lt;code&gt;key1&lt;/code&gt; does not exist, print nothing.</source>
          <target state="translated">テンプレートのタプルは、メタデータキーの存在テストを表します。例えば、次のタプルは場合と言い &lt;code&gt;key1&lt;/code&gt; メタデータマップに存在し、印刷 &lt;code&gt;&quot;key1=Value&quot;&lt;/code&gt; 、 &lt;code&gt;Value&lt;/code&gt; した値である &lt;code&gt;key1&lt;/code&gt; メタデータマップに関連付けられているが。場合 &lt;code&gt;key1&lt;/code&gt; 存在しない、何も印刷しません。</target>
        </trans-unit>
        <trans-unit id="243da839e833dcd6a7348ba4d1efa268f8e8a3ec" translate="yes" xml:space="preserve">
          <source>Tuples, maps, and lists (except strings, see below) are built in reverse polish notation, so that to build a tuple, the elements are specified first, and then the tuple term, with a count. Likewise for lists and maps.</source>
          <target state="translated">タプル、マップ、リスト(文字列を除く、以下を参照)は逆ポーランド記法で構築されます。リストやマップについても同様です。</target>
        </trans-unit>
        <trans-unit id="8d71459c65d809aa4497f4a28bfc896fb1085c9c" translate="yes" xml:space="preserve">
          <source>Turn a syntax tree or list of trees into a template or templates. Templates can be instantiated or matched against, and reverted back to normal syntax trees using &lt;code&gt;&lt;a href=&quot;#tree-1&quot;&gt;tree/1&lt;/a&gt;&lt;/code&gt;. If the input is already a template, it is not modified further.</source>
          <target state="translated">構文ツリーまたはツリーのリストをテンプレートに変換します。テンプレートをインスタンス化または照合し、 &lt;code&gt;&lt;a href=&quot;#tree-1&quot;&gt;tree/1&lt;/a&gt;&lt;/code&gt; を使用して通常の構文ツリーに戻すことができます。入力がすでにテンプレートである場合は、それ以上変更されません。</target>
        </trans-unit>
        <trans-unit id="d8971cba7199bca87b23c2ec538c7121c59edc40" translate="yes" xml:space="preserve">
          <source>Turn a template into a syntax tree representing the template. Meta-variables in the template are turned into normal Erlang variables if their names (after the metavariable prefix characters) begin with an uppercase character. E.g., &lt;code&gt;_@Foo&lt;/code&gt; in the template becomes the variable &lt;code&gt;Foo&lt;/code&gt; in the meta-template. Furthermore, variables ending with &lt;code&gt;@&lt;/code&gt; are automatically wrapped in a call to merl:term/1, so e.g. &lt;code&gt;_@Foo@ in the template becomes `merl:term(Foo)&lt;/code&gt; in the meta-template.</source>
          <target state="translated">テンプレートを、テンプレートを表す構文ツリーに変換します。テンプレート内のメタ変数は、その名前（メタ変数接頭辞文字の後）が大文字で始まる場合、通常のErlang変数に変換されます。たとえば、テンプレートの &lt;code&gt;_@Foo&lt;/code&gt; はメタテンプレートの変数 &lt;code&gt;Foo&lt;/code&gt; になります。さらに、 &lt;code&gt;@&lt;/code&gt; で終わる変数はmerl：term / 1の呼び出しで自動的にラップされます。たとえば &lt;code&gt;_@Foo@ in the template becomes `merl:term(Foo)&lt;/code&gt; はメタテンプレートの`merl：term（Foo）になります。</target>
        </trans-unit>
        <trans-unit id="f11fdfc294615cd6feba1dc471497bd296595a74" translate="yes" xml:space="preserve">
          <source>Turn an error reason returned by &lt;code&gt;&lt;a href=&quot;#codec-2&quot;&gt;codec/2&lt;/a&gt;&lt;/code&gt; into a readable string.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#codec-2&quot;&gt;codec/2&lt;/a&gt;&lt;/code&gt; から返されたエラー理由を読み取り可能な文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="0a32475174f92b9fb2f8542dc37a90aaa235a8d8" translate="yes" xml:space="preserve">
          <source>Turn off monitoring of the SNMP manager.</source>
          <target state="translated">SNMPマネージャの監視をオフにします。</target>
        </trans-unit>
        <trans-unit id="1596e715102816d11edb68278af146f787525ee2" translate="yes" xml:space="preserve">
          <source>Turn on and pare down debugging</source>
          <target state="translated">デバッグをオンにしてペアーダウンする</target>
        </trans-unit>
        <trans-unit id="8d0273b96fc2970b3bd22f825df50106f57a4d5f" translate="yes" xml:space="preserve">
          <source>Turn on distribution tracing on the Erlang node.</source>
          <target state="translated">Erlangノードのディストリビューショントレースをオンにします。</target>
        </trans-unit>
        <trans-unit id="4b6673d76d88179b888141748a220ac4df22b7da" translate="yes" xml:space="preserve">
          <source>Turn on global tracing</source>
          <target state="translated">グローバルトレースをオンにする</target>
        </trans-unit>
        <trans-unit id="b5fd46c0414339fbc6a9a1e9bcad5db789cc32cf" translate="yes" xml:space="preserve">
          <source>Turning the scrollable_cursors option off is noted to make old odbc-drivers able to connect that will otherwhise fail.</source>
          <target state="translated">scrollable_cursors オプションをオフにすると、古い odbc-drivers が接続できるようになりますが、それ以外は失敗します。</target>
        </trans-unit>
        <trans-unit id="b3754a20c309fb4bee5151fc9185df3eb19690cf" translate="yes" xml:space="preserve">
          <source>Turns &lt;code&gt;Expr&lt;/code&gt; into a &quot;test object&quot;, by wrapping it in a fun-expression and a source line number. Technically, this is the same as &lt;code&gt;{?LINE, fun () -&amp;gt; (Expr) end}&lt;/code&gt;.</source>
          <target state="translated">オン &lt;code&gt;Expr&lt;/code&gt; 楽しい発現とソースの行番号でそれをラップすることにより、「テスト・オブジェクト」に。技術的には、これは &lt;code&gt;{?LINE, fun () -&amp;gt; (Expr) end}&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="f90beb2441a8b6db181aba2d7f261f9f114ad008" translate="yes" xml:space="preserve">
          <source>Turns a distributed node into a non-distributed node. For other nodes in the network, this is the same as the node going down. Only possible when the net kernel was started using &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;{error, not_allowed}&lt;/code&gt; is returned. Returns &lt;code&gt;{error, not_found}&lt;/code&gt; if the local node is not alive.</source>
          <target state="translated">分散ノードを非分散ノードに変換します。ネットワーク内の他のノードの場合、これはダウンしたノードと同じです。ネットカーネルが &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt; を使用して起動された場合にのみ可能です。それ以外の場合は &lt;code&gt;{error, not_allowed}&lt;/code&gt; が返されます。ローカルノードが &lt;code&gt;{error, not_found}&lt;/code&gt; でない場合は、{error、not_found}を返します。</target>
        </trans-unit>
        <trans-unit id="d9857baf63bd4ff78f8a1416e9cce2328191833c" translate="yes" xml:space="preserve">
          <source>Turns a non-distributed node into a distributed node by starting &lt;code&gt;net_kernel&lt;/code&gt; and other necessary processes.</source>
          <target state="translated">&lt;code&gt;net_kernel&lt;/code&gt; およびその他の必要なプロセスを開始することにより、非分散ノードを分散ノードに変えます。</target>
        </trans-unit>
        <trans-unit id="3f5c74d445a6ff38a1d1a5a031b9bc86b2fedd78" translate="yes" xml:space="preserve">
          <source>Turns a parsed dictionary, as returned by &lt;code&gt;&lt;a href=&quot;#codec-2&quot;&gt;codec/2&lt;/a&gt;&lt;/code&gt;, back into the dictionary format.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#codec-2&quot;&gt;codec/2&lt;/a&gt;&lt;/code&gt; によって返された解析済み辞書を辞書形式に戻します。</target>
        </trans-unit>
        <trans-unit id="e92b0eef302a90ddf93e3d3b8a0765906432d6ac" translate="yes" xml:space="preserve">
          <source>Turns an ordered list &lt;code&gt;List&lt;/code&gt; of key-value tuples into a tree. The list must not contain duplicate keys.</source>
          <target state="translated">キーと値のタプルの順序付きリスト &lt;code&gt;List&lt;/code&gt; をツリーに変換します。リストに重複するキーが含まれていてはなりません。</target>
        </trans-unit>
        <trans-unit id="8629e653fd2bdd0ad7cbe844c08311477772efcc" translate="yes" xml:space="preserve">
          <source>Turns an ordered-set list &lt;code&gt;List&lt;/code&gt; into a set. The list must not contain duplicates.</source>
          <target state="translated">順序セットリスト &lt;code&gt;List&lt;/code&gt; をセットに変換します。リストに重複が含まれていてはなりません。</target>
        </trans-unit>
        <trans-unit id="9373344ff9c8b8d02dd03592aeaf47c2fd0e64a6" translate="yes" xml:space="preserve">
          <source>Turns off all debugging for the process. This includes functions that are installed explicitly with function &lt;code&gt;&lt;a href=&quot;#install-2&quot;&gt;install/2,3&lt;/a&gt;&lt;/code&gt;, for example, triggers.</source>
          <target state="translated">プロセスのすべてのデバッグをオフにします。これには、トリガーなど、関数 &lt;code&gt;&lt;a href=&quot;#install-2&quot;&gt;install/2,3&lt;/a&gt;&lt;/code&gt; で明示的にインストールされる関数が含まれます。</target>
        </trans-unit>
        <trans-unit id="d36edf7582655f75400ba16943847aa4c6aa0271" translate="yes" xml:space="preserve">
          <source>Turns off warnings for &quot;fresh&quot; variables in functional objects or list comprehensions with the same name as some already defined variable. Default is to emit warnings for such variables.</source>
          <target state="translated">既に定義されている変数と同じ名前を持つ関数オブジェクトやリスト内包の &quot;新鮮な &quot;変数に対する警告をオフにします。デフォルトでは、そのような変数に対して警告を発するようになっています。</target>
        </trans-unit>
        <trans-unit id="c093c691688f1f921a86e4bb9a9da3d6975d7358" translate="yes" xml:space="preserve">
          <source>Turns off warnings for calls to deprecated functions like &lt;code&gt;nowarn_deprecated_function&lt;/code&gt; does, but only for the mentioned functions. &lt;code&gt;MFAs&lt;/code&gt; is a tuple &lt;code&gt;{Module,Name,Arity}&lt;/code&gt; or a list of such tuples.</source>
          <target state="translated">&lt;code&gt;nowarn_deprecated_function&lt;/code&gt; のような非推奨関数の呼び出しに対する警告をオフにしますが、言及された関数に対してのみです。 &lt;code&gt;MFAs&lt;/code&gt; は、タプル &lt;code&gt;{Module,Name,Arity}&lt;/code&gt; またはそのようなタプルのリストです。</target>
        </trans-unit>
        <trans-unit id="31c129b33c46ffb547299340b27a43f495c00d43" translate="yes" xml:space="preserve">
          <source>Turns off warnings for calls to deprecated functions. Default is to emit warnings for every call to a function known by the compiler to be deprecated. Notice that the compiler does not know about attribute &lt;code&gt;-deprecated()&lt;/code&gt;, but uses an assembled list of deprecated functions in Erlang/OTP. To do a more general check, the Xref tool can be used. See also &lt;code&gt;xref(3)&lt;/code&gt; and the function &lt;code&gt;xref:m/1&lt;/code&gt;, also accessible through the function &lt;code&gt;c:xm/1&lt;/code&gt;.</source>
          <target state="translated">非推奨の関数の呼び出しに対する警告をオフにします。デフォルトでは、コンパイラーが廃止予定であると認識している関数の呼び出しごとに警告を発行します。コンパイラーは属性 &lt;code&gt;-deprecated()&lt;/code&gt; を認識しないが、Erlang / OTPの非推奨関数のアセンブルリストを使用することに注意してください。より一般的なチェックを行うには、外部参照ツールを使用できます。 &lt;code&gt;xref(3)&lt;/code&gt; および関数 &lt;code&gt;xref:m/1&lt;/code&gt; も参照してください。これも関数 &lt;code&gt;c:xm/1&lt;/code&gt; からアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d8643ee4d5408ecde9d2dfad0ec79316bb062403" translate="yes" xml:space="preserve">
          <source>Turns off warnings for calls to old type testing BIFs, such as &lt;code&gt;pid/1&lt;/code&gt; and &lt;code&gt;list/1&lt;/code&gt;. See the &lt;code&gt;Erlang Reference Manual&lt;/code&gt; for a complete list of type testing BIFs and their old equivalents. Default is to emit warnings for calls to old type testing BIFs.</source>
          <target state="translated">&lt;code&gt;pid/1&lt;/code&gt; や &lt;code&gt;list/1&lt;/code&gt; などの古い型テストBIFの呼び出しに対する警告をオフにします。タイプテストBIFとそれらに相当する古いものの完全なリストについては、 &lt;code&gt;Erlang Reference Manual&lt;/code&gt; を参照してください。デフォルトでは、古い型テストBIFへの呼び出しに対して警告を発します。</target>
        </trans-unit>
        <trans-unit id="858be8f3bcf091fa061e46059bd3158726b548e6" translate="yes" xml:space="preserve">
          <source>Turns off warnings for unused local functions like &lt;code&gt;nowarn_unused_function&lt;/code&gt; does, but only for the mentioned local functions. &lt;code&gt;FAs&lt;/code&gt; is a tuple &lt;code&gt;{Name,Arity}&lt;/code&gt; or a list of such tuples.</source>
          <target state="translated">&lt;code&gt;nowarn_unused_function&lt;/code&gt; のような未使用のローカル関数に対する警告をオフにしますが、言及されたローカル関数に対してのみです。 &lt;code&gt;FAs&lt;/code&gt; はタプル &lt;code&gt;{Name,Arity}&lt;/code&gt; またはそのようなタプルのリストです。</target>
        </trans-unit>
        <trans-unit id="c5e54f68af28f7baa91e0a423d6d647a5b8f257e" translate="yes" xml:space="preserve">
          <source>Turns off warnings for unused local functions. Default is to emit warnings for all local functions that are not called directly or indirectly by an exported function. The compiler does not include unused local functions in the generated beam file, but the warning is still useful to keep the source code cleaner.</source>
          <target state="translated">未使用のローカル関数に対する警告をオフにします。デフォルトでは、エクスポートされた関数によって直接または間接的に呼び出されないすべてのローカル関数に対して警告を発します。コンパイラは生成されたビームファイルに未使用のローカル関数を含めませんが、警告はソースコードをよりクリーンに保つのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="8756279a371f2c74c71bfe9ea11d8fce882bd7ef" translate="yes" xml:space="preserve">
          <source>Turns off warnings for unused record types. Default is to emit warnings for unused locally defined record types.</source>
          <target state="translated">未使用のレコードタイプに対する警告をオフにします。デフォルトでは、ローカルで定義された未使用のレコードタイプに対して警告を発するようになっています。</target>
        </trans-unit>
        <trans-unit id="40e660b8f492c229e1e8f807933c1bba4d2abc6f" translate="yes" xml:space="preserve">
          <source>Turns off warnings for use of deprecated types. Default is to emit warnings for every use of a type known by the compiler to be deprecated.</source>
          <target state="translated">非推奨型を使用した場合の警告をオフにします。デフォルトでは、コンパイラによって非推奨とされていることがわかっている型を使用するたびに警告を発します。</target>
        </trans-unit>
        <trans-unit id="176262640a2c391f662fb5a4f78d832cbe27740e" translate="yes" xml:space="preserve">
          <source>Turns off warnings for uses of the &lt;code&gt;export_all&lt;/code&gt; option. Default is to emit a warning if option &lt;code&gt;export_all&lt;/code&gt; is also given.</source>
          <target state="translated">&lt;code&gt;export_all&lt;/code&gt; オプションの使用に関する警告をオフにします。デフォルトでは、オプション &lt;code&gt;export_all&lt;/code&gt; も指定されている場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="849c8f41403b31c687964c8f844bbdc3100c6d15" translate="yes" xml:space="preserve">
          <source>Turns on (if &lt;code&gt;How == true&lt;/code&gt;) or off (if &lt;code&gt;How == false&lt;/code&gt;) the trace flags in &lt;code&gt;FlagList&lt;/code&gt; for the process or processes represented by &lt;code&gt;PidPortSpec&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FlagList&lt;/code&gt; で表される &lt;code&gt;PidPortSpec&lt;/code&gt; つまたは複数のプロセスのFlagListのトレースフラグをオン（ &lt;code&gt;How == true&lt;/code&gt; ）またはオフ（ &lt;code&gt;How == false&lt;/code&gt; 場合）にします。</target>
        </trans-unit>
        <trans-unit id="90d4fea9a9eccae1bb6537b80425ce163c0e0e56" translate="yes" xml:space="preserve">
          <source>Turns on or off call tracing for all types of function calls. Trace messages are sent whenever any of the specified functions are called, regardless of how they are called. If flag &lt;code&gt;return_to&lt;/code&gt; is set for the process, a &lt;code&gt;return_to&lt;/code&gt; message is also sent when this function returns to its caller.</source>
          <target state="translated">すべてのタイプの関数呼び出しの呼び出しトレースをオンまたはオフにします。トレースメッセージは、呼び出された方法に関係なく、指定された関数が呼び出されるたびに送信されます。プロセスにフラグ &lt;code&gt;return_to&lt;/code&gt; が設定されている場合、この関数が呼び出し元に戻ると、 &lt;code&gt;return_to&lt;/code&gt; メッセージも送信されます。</target>
        </trans-unit>
        <trans-unit id="9cdc9034760c5ba6cf5f548250769a126c6a5dc8" translate="yes" xml:space="preserve">
          <source>Turns on or off call tracing for global function calls (that is, calls specifying the module explicitly). Only exported functions match and only global calls generate trace messages. &lt;strong&gt;This is the default&lt;/strong&gt;.</source>
          <target state="translated">グローバル関数呼び出し（つまり、モジュールを明示的に指定する呼び出し）の呼び出しトレースをオンまたはオフにします。エクスポートされた関数のみが一致し、グローバル呼び出しのみがトレースメッセージを生成します。&lt;strong&gt;これがデフォルトです&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="dbac06dc38fd14ffc69474d6cefe052fcc1e6496" translate="yes" xml:space="preserve">
          <source>Turns on or off meta-tracing for all types of function calls. Trace messages are sent to the tracer whenever any of the specified functions are called. If no tracer is specified, &lt;code&gt;self()&lt;/code&gt; is used as a default tracer process.</source>
          <target state="translated">すべてのタイプの関数呼び出しのメタトレースをオンまたはオフにします。指定された関数が呼び出されるたびに、トレースメッセージがトレーサーに送信されます。トレーサーが指定されていない場合は、 &lt;code&gt;self()&lt;/code&gt; がデフォルトのトレーサープロセスとして使用されます。</target>
        </trans-unit>
        <trans-unit id="a4a9e6071c635a8a8f47c7128d5e27fbe6794aa8" translate="yes" xml:space="preserve">
          <source>Turns on or off scheduler wall time measurements.</source>
          <target state="translated">スケジューラの壁の時間測定のオン/オフを切り替えます。</target>
        </trans-unit>
        <trans-unit id="6491707b6fbdad098acea3fe30f8bc3c9caeff41" translate="yes" xml:space="preserve">
          <source>Turns on/off microstate accounting measurements. When passing reset, all counters are reset to 0.</source>
          <target state="translated">マイクロステート・アカウンティング測定をオン/オフにします。リセットを通過すると、すべてのカウンタは0にリセットされます。</target>
        </trans-unit>
        <trans-unit id="49209b989e6c3ee063b36215b5a4316a9a7be144" translate="yes" xml:space="preserve">
          <source>Turns on|off automatic mapping of IPv4 addresses into IPv6 ones (if the socket address family is &lt;code&gt;AF_INET6&lt;/code&gt;).</source>
          <target state="translated">IPv4アドレスのIPv6アドレスへの自動マッピングをオン|オフにします（ソケットアドレスファミリが &lt;code&gt;AF_INET6&lt;/code&gt; の場合）。</target>
        </trans-unit>
        <trans-unit id="f85ecd85cea1de6466fad134e2d2f8f716405e71" translate="yes" xml:space="preserve">
          <source>Turns on|off the Nagle algorithm for merging small packets into larger ones. This improves throughput at the expense of latency.</source>
          <target state="translated">小さなパケットをより大きなパケットにマージするための Nagle アルゴリズムをオン/オフにします。これは待ち時間を犠牲にしてスループットを向上させます。</target>
        </trans-unit>
        <trans-unit id="a1f9ac44326e752574b33a1f14907aa1c45d24f1" translate="yes" xml:space="preserve">
          <source>Turns the logging of system events on or off. If on, a maximum of &lt;code&gt;N&lt;/code&gt; events are kept in the debug structure (default is 10).</source>
          <target state="translated">システムイベントのロギングをオンまたはオフにします。オンの場合、最大 &lt;code&gt;N&lt;/code&gt; 個のイベントがデバッグ構造に保持されます（デフォルトは10）。</target>
        </trans-unit>
        <trans-unit id="23c458441c0867d8269280b70644bb94df142cbd" translate="yes" xml:space="preserve">
          <source>Two &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback modes&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; are supported:</source>
          <target state="translated">2つの &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback modes&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; がサポートされています。</target>
        </trans-unit>
        <trans-unit id="6e3d52e5b54fd0236c6fd5f3a13294fee0ddff15" translate="yes" xml:space="preserve">
          <source>Two Erlang terms &lt;code&gt;match&lt;/code&gt; if they are of the same type and have the same value, so that &lt;code&gt;1&lt;/code&gt; matches &lt;code&gt;1&lt;/code&gt;, but not &lt;code&gt;1.0&lt;/code&gt; (as &lt;code&gt;1.0&lt;/code&gt; is a &lt;code&gt;float()&lt;/code&gt; and not an &lt;code&gt;integer()&lt;/code&gt;).</source>
          <target state="translated">二つErlangの用語は &lt;code&gt;match&lt;/code&gt; 、それらが同じタイプのものと同じ値を有する場合その結果、 &lt;code&gt;1&lt;/code&gt; 試合 &lt;code&gt;1&lt;/code&gt; ではなく、 &lt;code&gt;1.0&lt;/code&gt; （AS &lt;code&gt;1.0&lt;/code&gt; である &lt;code&gt;float()&lt;/code&gt; としない &lt;code&gt;integer()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d09b25abb2a2cc4ca463f856d47434d8b27efd72" translate="yes" xml:space="preserve">
          <source>Two Erlang terms &lt;strong&gt;compare equal&lt;/strong&gt; if they either are of the same type and value, or if both are numeric types and extend to the same value, so that &lt;code&gt;1&lt;/code&gt; compares equal to both &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">二つErlangの用語は、&lt;strong&gt;等しいと&lt;/strong&gt;それらがどちらか同じ型と値である場合、または両方が数値型であり、その結果、同じ値に拡張する場合 &lt;code&gt;1&lt;/code&gt; が両方と等しい &lt;code&gt;1&lt;/code&gt; と &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe9db2aa68d2fec9c04e8f17ebd9155b9b06ccb7" translate="yes" xml:space="preserve">
          <source>Two adjacent &lt;code&gt;*&lt;/code&gt; used as a single pattern match all files and zero or more directories and subdirectories.</source>
          <target state="translated">単一のパターンとして使用される2つの隣接する &lt;code&gt;*&lt;/code&gt; は、すべてのファイルと0個以上のディレクトリおよびサブディレクトリに一致します。</target>
        </trans-unit>
        <trans-unit id="b24fbae83d83ea5cfa4199071718c20f64dd2575" translate="yes" xml:space="preserve">
          <source>Two adjacent string literals are concatenated into one. This is done in the compilation, thus, does not incur any runtime overhead.</source>
          <target state="translated">隣接する2つの文字列リテラルを1つに連結します。これはコンパイル時に行われるので、実行時のオーバーヘッドは発生しません。</target>
        </trans-unit>
        <trans-unit id="1cec8b2ac60b473ad30ad5a9539e9b27a87fdf3d" translate="yes" xml:space="preserve">
          <source>Two are containers for binary data and are called:</source>
          <target state="translated">2つはバイナリデータを格納するコンテナで、これを「コンテナ」と呼びます。</target>
        </trans-unit>
        <trans-unit id="00afe0b16fc4b5dc8fb5d2b5e5c18c2ad4f6f71e" translate="yes" xml:space="preserve">
          <source>Two are merely references to a part of a binary and are called:</source>
          <target state="translated">2つは単に2進数の一部を参照しているだけで、2進数と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="98533a56936d4841968d6378e92444f0f102a983" translate="yes" xml:space="preserve">
          <source>Two cases can occur:</source>
          <target state="translated">2つのケースが考えられます。</target>
        </trans-unit>
        <trans-unit id="f6f177120050db74caa4e744ec6cff39212557e9" translate="yes" xml:space="preserve">
          <source>Two different methods for opening a connection using the support functions in, for example, &lt;code&gt;&lt;a href=&quot;ct_ssh&quot;&gt;ct_ssh&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ct_ftp&quot;&gt;ct_ftp&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; follows:</source>
          <target state="translated">たとえば、 &lt;code&gt;&lt;a href=&quot;ct_ssh&quot;&gt;ct_ssh&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ct_ftp&quot;&gt;ct_ftp&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; のサポート関数を使用して接続を開くには、2つの異なる方法があります。</target>
        </trans-unit>
        <trans-unit id="d8398755c3e867c12fc5deb0d9e53ba2d8bf52d0" translate="yes" xml:space="preserve">
          <source>Two different names cannot define the same OBJECT IDENTIFIER.</source>
          <target state="translated">二つの異なる名前は、同じOBJECT IDIFIERを定義することはできません。</target>
        </trans-unit>
        <trans-unit id="e330ec8353880267f056d94838df302f660f82d1" translate="yes" xml:space="preserve">
          <source>Two formats of the log files are supported:</source>
          <target state="translated">ログファイルのフォーマットは2種類あります。</target>
        </trans-unit>
        <trans-unit id="a4eef9b92d56df50918b227071f569535a9d01e3" translate="yes" xml:space="preserve">
          <source>Two forms have special meaning:</source>
          <target state="translated">2つの形には特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="cfd82c68ad98788490ce7310efdb097df7571def" translate="yes" xml:space="preserve">
          <source>Two forms of &lt;code&gt;--inherits&lt;/code&gt; have special meaning:</source>
          <target state="translated">&lt;code&gt;--inherits&lt;/code&gt; の 2つの形式には特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="7200659e5edf764a36bafabfdd35b2bc1867bbcb" translate="yes" xml:space="preserve">
          <source>Two functions (modules, applications, releases) belong to the same strongly connected component if they call each other (in)directly. The interpretation of the &lt;code id=&quot;graph_analyses&quot;&gt;components&lt;/code&gt; operator is the set of strongly connected components of a set of calls. The &lt;code&gt;condensation&lt;/code&gt; of a set of calls is a new set of calls between the strongly connected components such that there is an edge between two components if there is some constant of the first component that calls some constant of the second component.</source>
          <target state="translated">2つの関数（モジュール、アプリケーション、リリース）は、互いに（内部で）直接呼び出す場合、同じ強く接続されたコンポーネントに属します。 &lt;code id=&quot;graph_analyses&quot;&gt;components&lt;/code&gt; 演算子の解釈は、一連の呼び出しの強く接続されたコンポーネントのセットです。 &lt;code&gt;condensation&lt;/code&gt; コールのセットのは、第二の成分のいくつかの定数を呼び出す第一の成分のいくつかの定数が存在する場合に2つの構成要素間のエッジが存在するように、強連結成分間のコールの新しいセットです。</target>
        </trans-unit>
        <trans-unit id="8330baa5a8c7712027a0d478bca1ae0572b758a5" translate="yes" xml:space="preserve">
          <source>Two guard BIFs handle maps:</source>
          <target state="translated">2つのガードBIFがマップを扱う</target>
        </trans-unit>
        <trans-unit id="0b0d7874fec4ed30ad6e8758caa4fe777cac7d9b" translate="yes" xml:space="preserve">
          <source>Two interoperability mechanisms are built into the Erlang runtime system, &lt;strong&gt;distributed Erlang&lt;/strong&gt; and &lt;strong&gt;ports&lt;/strong&gt;. A variation of ports is &lt;strong&gt;linked-in drivers&lt;/strong&gt;.</source>
          <target state="translated">Erlangランタイムシステムには、&lt;strong&gt;分散Erlang&lt;/strong&gt;と&lt;strong&gt;portsの&lt;/strong&gt; 2つの相互運用性メカニズムが組み込まれてい&lt;strong&gt;ます&lt;/strong&gt;。ポートのバリエーションは&lt;strong&gt;リンクされたドライバー&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="5dedccf2b4c340ae3513b7f5da6ce218b6889bec" translate="yes" xml:space="preserve">
          <source>Two keys are considered equal if they match (&lt;code&gt;=:=&lt;/code&gt;). That is, numbers are compared literally rather than by value, so that, for example, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; are different keys.</source>
          <target state="translated">2つのキーが一致する場合、それらは等しいと見なされます（ &lt;code&gt;=:=&lt;/code&gt; ）。つまり、数値は値ではなく文字どおりに比較されるため、たとえば、 &lt;code&gt;1&lt;/code&gt; と &lt;code&gt;1.0&lt;/code&gt; は異なるキーです。</target>
        </trans-unit>
        <trans-unit id="211827ea828fd59c26ecf8cc7423a3ab35588d32" translate="yes" xml:space="preserve">
          <source>Two methods are available for writing database queries:</source>
          <target state="translated">データベースクエリの記述には2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="cad65263f8565f810c97115c267d8c4735088c82" translate="yes" xml:space="preserve">
          <source>Two more examples, both selecting Latin-1 as default encoding:</source>
          <target state="translated">さらに2つの例があり、どちらもデフォルトのエンコーディングとして Latin-1 を選択しています。</target>
        </trans-unit>
        <trans-unit id="310abdb2aa2e0aae49bd84e931c4347743cefcc7" translate="yes" xml:space="preserve">
          <source>Two old applications are of interest regarding interoperability. Both have been replaced by IC and are mentioned here for reference only:</source>
          <target state="translated">相互運用性に関連して、2つの古いアプリケーションが注目されています。両方ともICに置き換えられており、ここでは参考のために言及しています。</target>
        </trans-unit>
        <trans-unit id="b2ee15f30d25e865ebb91626574306b0a361ae12" translate="yes" xml:space="preserve">
          <source>Two processes can be &lt;strong&gt;linked&lt;/strong&gt; to each other. A link between two processes &lt;code&gt;Pid1&lt;/code&gt; and &lt;code&gt;Pid2&lt;/code&gt; is created by &lt;code&gt;Pid1&lt;/code&gt; calling the BIF &lt;code&gt;link(Pid2)&lt;/code&gt; (or conversely). There also exist a number of &lt;code&gt;spawn_link&lt;/code&gt; BIFs, which spawn and link to a process in one operation.</source>
          <target state="translated">2つのプロセスを相互に&lt;strong&gt;リンク&lt;/strong&gt;できます。2つのプロセス &lt;code&gt;Pid1&lt;/code&gt; と &lt;code&gt;Pid2&lt;/code&gt; の間のリンクは、Pid1がBIF &lt;code&gt;link(Pid2)&lt;/code&gt; を呼び出すことで作成され &lt;code&gt;Pid1&lt;/code&gt; （またはその逆）。また、 &lt;code&gt;spawn_link&lt;/code&gt; BIFも多数存在し、1回の操作でプロセスを生成してリンクします。</target>
        </trans-unit>
        <trans-unit id="5608c70162089e189da4df1a1b5bf134008a262e" translate="yes" xml:space="preserve">
          <source>Two resource terms will compare equal iff they would yield the same resource object pointer when passed to &lt;code&gt;&lt;a href=&quot;#enif_get_resource&quot;&gt;enif_get_resource&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">2つのリソース用語は、 &lt;code&gt;&lt;a href=&quot;#enif_get_resource&quot;&gt;enif_get_resource&lt;/a&gt;&lt;/code&gt; に渡されたときに同じリソースオブジェクトポインターを生成する場合に限り、同等に比較されます。</target>
        </trans-unit>
        <trans-unit id="af30a2501d3290d8d47d226b3a9dd6e2917631b1" translate="yes" xml:space="preserve">
          <source>Two sets are &lt;strong id=&quot;disjoint&quot;&gt;disjoint&lt;/strong&gt; if their intersection is the empty set.</source>
          <target state="translated">2つのセットの交差が空のセットで&lt;strong id=&quot;disjoint&quot;&gt;ある&lt;/strong&gt;場合、2つのセットは&lt;strong id=&quot;disjoint&quot;&gt;互いに素&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="e7ebc9faf237e0b7af0081118908fcbec68ae6ca" translate="yes" xml:space="preserve">
          <source>Two sets of metacharacters exist: those that are recognized anywhere in the pattern except within square brackets, and those that are recognized within square brackets. Outside square brackets, the metacharacters are as follows:</source>
          <target state="translated">メタキャラクタには2つのセットが存在します:角括弧内以外のパターンのどこにいても認識されるものと、角括弧内で認識されるものです。角括弧の外では、メタキャラクタは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ca80cfab8caa7daafc007467d281bddd65b58bec" translate="yes" xml:space="preserve">
          <source>Two simple implementation(s) is provided with the toolkit; the modules &lt;code&gt;&lt;a href=&quot;snmpa_error_logger&quot;&gt;snmpa_error_logger&lt;/a&gt;&lt;/code&gt; which is the default and &lt;code&gt;&lt;a href=&quot;snmpa_error_io&quot;&gt;snmpa_error_io&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ツールキットには2つの単純な実装が用意されています。デフォルトのモジュール &lt;code&gt;&lt;a href=&quot;snmpa_error_logger&quot;&gt;snmpa_error_logger&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;snmpa_error_io&quot;&gt;snmpa_error_io&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8aad91307995a202add0f48ff4e5e1745721276" translate="yes" xml:space="preserve">
          <source>Two subterms are supported, &lt;code&gt;node_start&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node_start&lt;/code&gt; と &lt;code&gt;eval&lt;/code&gt; の 2つのサブタームがサポートされています。</target>
        </trans-unit>
        <trans-unit id="4a86bc9ecf16a74feace03ab8af025d243363cf6" translate="yes" xml:space="preserve">
          <source>Two terms &lt;code&gt;T1&lt;/code&gt; and &lt;code&gt;T2&lt;/code&gt; compare equal if &lt;code&gt;T1&amp;nbsp;==&amp;nbsp;T2&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;. They match if &lt;code&gt;T1&amp;nbsp;=:=&amp;nbsp;T2&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T1&amp;nbsp;==&amp;nbsp;T2&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; と評価された場合、2つの項 &lt;code&gt;T1&lt;/code&gt; と &lt;code&gt;T2&lt;/code&gt; は等しく比較されます。 &lt;code&gt;T1&amp;nbsp;=:=&amp;nbsp;T2&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; と評価された場合に一致します。</target>
        </trans-unit>
        <trans-unit id="319ab96ab6a94c595bf510dc2b6df202a2c7e4fb" translate="yes" xml:space="preserve">
          <source>Two time types are defined within ASN.1: Generalized Time and Universal Time Coordinated (UTC). Both are assigned a value as an ordinary string within double quotes, for example, &quot;19820102070533.8&quot;.</source>
          <target state="translated">ASN.1では、2つの時間タイプが定義されています。一般化時間と協定世界時(UTC)である。両方とも二重引用符で囲まれた通常の文字列として値が割り当てられ、例えば &quot;19820102070533.8 &quot;のようになります。</target>
        </trans-unit>
        <trans-unit id="5cbed6cd9f648062eb5c7c60f1a880bc94c83866" translate="yes" xml:space="preserve">
          <source>Two trace drivers are currently implemented, the &lt;code&gt;file&lt;/code&gt; and the &lt;code&gt;ip&lt;/code&gt; trace drivers. The file driver sends all trace messages into one or several binary files, from where they later can be fetched and processed with the &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; function. The ip driver opens a TCP/IP port where it listens for connections. When a client (preferably started by calling &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; on another Erlang node) connects, all trace messages are sent over the IP network for further processing by the remote client.</source>
          <target state="translated">現在2つのトレースドライバー、 &lt;code&gt;file&lt;/code&gt; と &lt;code&gt;ip&lt;/code&gt; トレースドライバーが実装されています。ファイルドライバーは、すべてのトレースメッセージを1つまたは複数のバイナリファイルに送信し、そこから後で &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; 関数を使用してフェッチおよび処理できます。ipドライバーは、接続を待機するTCP / IPポートを開きます。クライアント（できれば別のErlangノードで &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; を呼び出すことで開始）が接続すると、すべてのトレースメッセージがIPクライアント経由で送信され、リモートクライアントでさらに処理されます。</target>
        </trans-unit>
        <trans-unit id="c70732f422ad9f7dd9ec37500b2c8c51a72ca7dd" translate="yes" xml:space="preserve">
          <source>Two types of funs have slightly different semantics:</source>
          <target state="translated">2種類のファンは、意味合いが微妙に異なります。</target>
        </trans-unit>
        <trans-unit id="c611be8ba1da86ea53fc2e7c1dde0be77787929a" translate="yes" xml:space="preserve">
          <source>Two types of logs are supported:</source>
          <target state="translated">2種類のログに対応しています。</target>
        </trans-unit>
        <trans-unit id="95838f01360f14fad0ac2ded66819bb7c9468ffa" translate="yes" xml:space="preserve">
          <source>Two upgrade instructions restart the emulator:</source>
          <target state="translated">2つのアップグレード手順でエミュレータを再起動します。</target>
        </trans-unit>
        <trans-unit id="4806b67c077ea8929e31609963501c8a6fe89444" translate="yes" xml:space="preserve">
          <source>Two values are supported for &lt;code&gt;Range&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Range&lt;/code&gt; には2つの値がサポートされています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
