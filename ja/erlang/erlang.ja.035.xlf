<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="b98454e1dad347bf57900e7a0165181c58bc516a" translate="yes" xml:space="preserve">
          <source>There is always a process registered under the name of &lt;code&gt;user&lt;/code&gt;. This can be used for sending output to the user.</source>
          <target state="translated">常に &lt;code&gt;user&lt;/code&gt; の名前で登録されたプロセスがあります。これは、ユーザーに出力を送信するために使用できます。</target>
        </trans-unit>
        <trans-unit id="48f05fa36ef8d48104e41cb6957499643b973e55" translate="yes" xml:space="preserve">
          <source>There is an important command to list the actual algorithms and their ordering: &lt;code&gt;&lt;a href=&quot;ssh#default_algorithms-0&quot;&gt;ssh:default_algorithms/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実際のアルゴリズムとその順序をリストする重要なコマンドがあり &lt;code&gt;&lt;a href=&quot;ssh#default_algorithms-0&quot;&gt;ssh:default_algorithms/0&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d83f929c7ba80aeba27f85a0a055bddbdc902825" translate="yes" xml:space="preserve">
          <source>There is an information function for the types above:</source>
          <target state="translated">上記の種類の情報機能があります。</target>
        </trans-unit>
        <trans-unit id="9bbb406addbf195bc5bf6f601577bdb5f7463970" translate="yes" xml:space="preserve">
          <source>There is another non-standard property, Xuc, which matches any character that can be represented by a Universal Character Name in C++ and other programming languages. These are the characters $, @, ` (grave accent), and all characters with Unicode code points &amp;gt;= U+00A0, except for the surrogates U+D800 to U+DFFF. Notice that most base (ASCII) characters are excluded. (Universal Character Names are of the form \uHHHH or \UHHHHHHHH, where H is a hexadecimal digit. Notice that the Xuc property does not match these sequences but the characters that they represent.)</source>
          <target state="translated">別の非標準プロパティXucがあります。これは、C ++および他のプログラミング言語でユニバーサル文字名で表すことができるすべての文字に一致します。これらは、文字$、@、 `（アクサングラーブ）、およびサロゲートU + D800からU + DFFFを除く、Unicodeコードポイント&amp;gt; = U + 00A0のすべての文字です。ほとんどの基本（ASCII）文字が除外されていることに注意してください。 （ユニバーサルキャラクター名は\ uHHHHまたは\ UHHHHHHHHの形式で、Hは16進数です。Xucプロパティはこれらのシーケンスではなく、それらが表す文字と一致することに注意してください。）</target>
        </trans-unit>
        <trans-unit id="01441ce6d74363dda8f15648c06b7b0537c64a86" translate="yes" xml:space="preserve">
          <source>There is however a utility module, &lt;code&gt;dist_util&lt;/code&gt;, which does most of the hard work of handling handshakes, cookies, timers, and ticking. Using &lt;code&gt;dist_util&lt;/code&gt; makes implementing a distribution module much easier and that is done in the example application.</source>
          <target state="translated">ただし、ユーティリティモジュール &lt;code&gt;dist_util&lt;/code&gt; があります。これは、ハンドシェイク、Cookie、タイマー、ティックの処理のハードワークのほとんどを実行します。 &lt;code&gt;dist_util&lt;/code&gt; を使用すると、配布モジュールの実装がはるかに簡単になります。これは、サンプルアプリケーションで行われます。</target>
        </trans-unit>
        <trans-unit id="4ca5bc74ccdc1a7e5bdfd46cd1aa8fff1884417d" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;rsh&lt;/code&gt; program on the computer.</source>
          <target state="translated">コンピューターに &lt;code&gt;rsh&lt;/code&gt; プログラムがありません。</target>
        </trans-unit>
        <trans-unit id="df2ff6a55b257f4164ad71e8f10123efe9394150" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;send&lt;/code&gt; call with a time-out option, use socket option &lt;code&gt;send_timeout&lt;/code&gt; if time-outs are desired. See section &lt;code&gt;&lt;a href=&quot;#examples&quot;&gt;Examples&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タイムアウトオプションを指定した &lt;code&gt;send&lt;/code&gt; 呼び出しはありません。タイムアウトが必要な場合は、ソケットオプション &lt;code&gt;send_timeout&lt;/code&gt; を使用してください。セクション &lt;code&gt;&lt;a href=&quot;#examples&quot;&gt;Examples&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="788a001e209f8fbfb495d59e087ae4ffbefebb3f" translate="yes" xml:space="preserve">
          <source>There is no Boolean data type in Erlang. Instead the atoms &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are used to denote Boolean values.</source>
          <target state="translated">Erlangにはブールデータ型はありません。代わりに、ブール値を示すためにアトム &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;false&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="37147d996eecd281a8ba511598164eac1e447d2f" translate="yes" xml:space="preserve">
          <source>There is no attempt to balance trees after deletions. As deletions do not increase the height of a tree, this should be OK.</source>
          <target state="translated">削除後の木のバランスをとる試みはありません。削除してもツリーの高さが増えることはないので、これは問題ないはずです。</target>
        </trans-unit>
        <trans-unit id="caf2aa5b2cbffe36cef8b0ea41ca0022fd85db8a" translate="yes" xml:space="preserve">
          <source>There is no connection to the node where the process is located.</source>
          <target state="translated">プロセスが配置されているノードとの接続はありません。</target>
        </trans-unit>
        <trans-unit id="5b7a1543335bb44ae5cf0c88c1eac25c65cd7e3b" translate="yes" xml:space="preserve">
          <source>There is no difference between rows in a table and &lt;code&gt;Mnesia&lt;/code&gt; records. Both concepts are the same and are used interchangeably throughout this User's Guide.</source>
          <target state="translated">テーブルの行と &lt;code&gt;Mnesia&lt;/code&gt; レコードの間に違いはありません。どちらの概念も同じであり、このユーザーガイド全体で同じ意味で使用されています。</target>
        </trans-unit>
        <trans-unit id="9a1861aef615622b38a7ac58736c71ae81c27ee3" translate="yes" xml:space="preserve">
          <source>There is no guarantee of consistency in the returned list. Tables created or deleted by other processes &quot;during&quot; the &lt;code&gt;ets:all()&lt;/code&gt; call either are or are not included in the list. Only tables created/deleted &lt;strong&gt;before&lt;/strong&gt;&lt;code&gt;ets:all()&lt;/code&gt; is called are guaranteed to be included/excluded.</source>
          <target state="translated">返されるリストの一貫性は保証されません。 &lt;code&gt;ets:all()&lt;/code&gt; 呼び出しの「最中に」他のプロセスによって作成または削除されたテーブルは、リストに含まれるか、含まれません。 &lt;code&gt;ets:all()&lt;/code&gt; が呼び出される&lt;strong&gt;前に&lt;/strong&gt;作成/削除されたテーブルのみが含まれる/除外されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="23cb6eb28b6463357c5d086be78e4c28d974313b" translate="yes" xml:space="preserve">
          <source>There is no guarantee that this function will return the same encoded representation for the same term.</source>
          <target state="translated">この関数は、同じタームに対して同じ符号化表現を返すことを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="9a78fbe3d9cb96a901b01d191391ac77c129ae95" translate="yes" xml:space="preserve">
          <source>There is no local function handler.</source>
          <target state="translated">ローカル関数のハンドラはありません。</target>
        </trans-unit>
        <trans-unit id="33d688593567ec97b98492916d41c5719d414cf7" translate="yes" xml:space="preserve">
          <source>There is no non-local function handler.</source>
          <target state="translated">非ローカルな関数ハンドラはありません。</target>
        </trans-unit>
        <trans-unit id="7e798f2b7954fbb8128c8deaa8091eb40c413ae4" translate="yes" xml:space="preserve">
          <source>There is no performance advantage of building (and using) a non-reentrant flex scanner over a reentrant flex scanner (if flex supports building such a scanner).</source>
          <target state="translated">ノンリエントラント・フレックス・スキャナを構築(使用)しても、リエントラント・フレックス・スキャナよりも性能的に有利な点はありません(フレックスがそのようなスキャナの構築をサポートしている場合)。</target>
        </trans-unit>
        <trans-unit id="c626748bd3f9380817d9836ccd98f9458d1a0bc7" translate="yes" xml:space="preserve">
          <source>There is no space left on the device (if &lt;code&gt;write&lt;/code&gt; access was specified).</source>
          <target state="translated">デバイスにスペースが残っていません（ &lt;code&gt;write&lt;/code&gt; アクセスが指定されている場合）。</target>
        </trans-unit>
        <trans-unit id="2a40eb7111de1638bc04c597cd24719439c9fafa" translate="yes" xml:space="preserve">
          <source>There is not enough memory for the contents of the file.</source>
          <target state="translated">ファイルの内容のメモリが不足しています。</target>
        </trans-unit>
        <trans-unit id="68171e010dd69d363d2cc2e5daa9281d1e1ce0d2" translate="yes" xml:space="preserve">
          <source>There is now a &lt;code&gt;start_ssl.boot&lt;/code&gt; file in the current directory.</source>
          <target state="translated">現在のディレクトリには、 &lt;code&gt;start_ssl.boot&lt;/code&gt; ファイルがあります。</target>
        </trans-unit>
        <trans-unit id="982e604305f35dec38eb296c4a9c3f70aede4f41" translate="yes" xml:space="preserve">
          <source>There is one exception to the rule that the tuple is copied. If the compiler clearly can see that destructively updating the tuple would give the same result as if the tuple was copied, the call to &lt;code&gt;setelement/3&lt;/code&gt; is replaced with a special destructive &lt;code&gt;setelement&lt;/code&gt; instruction. In the following code sequence, the first &lt;code&gt;setelement/3&lt;/code&gt; call copies the tuple and modifies the ninth element:</source>
          <target state="translated">タプルがコピーされるというルールには1つの例外があります。破壊的にタプルを更新するとタプルがコピーされた場合と同じ結果が得られることをコンパイラーが明確に認識できる場合、 &lt;code&gt;setelement/3&lt;/code&gt; への呼び出しは特別な破壊的な &lt;code&gt;setelement&lt;/code&gt; 命令に置き換えられます。次のコードシーケンスでは、最初の &lt;code&gt;setelement/3&lt;/code&gt; 呼び出しがタプルをコピーし、9番目の要素を変更します。</target>
        </trans-unit>
        <trans-unit id="961aa3429c05e4421a44dd6baffbd85ca75ea3dd" translate="yes" xml:space="preserve">
          <source>There is one exception. &lt;strong&gt;Any&lt;/strong&gt; tuple containing the atom &lt;code&gt;snmpa_default_notification_extra_info&lt;/code&gt; will, in this context, be considered belonging to this application, and may be processed by the agent.</source>
          <target state="translated">例外が1つあります。&lt;strong&gt;任意の&lt;/strong&gt;原子タプル &lt;code&gt;snmpa_default_notification_extra_info&lt;/code&gt; は、この文脈では、このアプリケーションに属しているとみなされ、エージェントによって処理されてもよいです。</target>
        </trans-unit>
        <trans-unit id="fb83be6c2e955864087572066b00b5e6d77bfed6" translate="yes" xml:space="preserve">
          <source>There is seldom or never any need to use this BIF as other processes have a chance to run in another scheduler thread anyway. Using this BIF without a thorough grasp of how the scheduler works can cause performance degradation.</source>
          <target state="translated">どうせ他のプロセスは他のスケジューラのスレッドで実行する機会があるので、このBIFを使う必要はほとんどありません。スケジューラの動作を十分に把握しないままこのBIFを使用すると、パフォーマンスが低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="672d0cbc29fa0c58939d66ddc95453e76a3b8e80" translate="yes" xml:space="preserve">
          <source>There is some support for reading and printing records in the shell. During compilation record expressions are translated to tuple expressions. In runtime it is not known whether a tuple represents a record, and the record definitions used by the compiler are unavailable at runtime. So, to read the record syntax and print tuples as records when possible, record definitions must be maintained by the shell itself.</source>
          <target state="translated">シェルでレコードを読み込んだり印刷したりするためのサポートがあります。コンパイル時にレコード表現はタプル表現に変換されます。実行時にはタプルがレコードを表しているかどうかはわからず、コンパイラが使用するレコード定義は実行時には利用できません。そのため、可能な限りレコード構文を読み取ってタプルをレコードとして印刷するためには、レコード定義はシェル自身で管理しなければなりません。</target>
        </trans-unit>
        <trans-unit id="f75ce9844eb4486f4e4b30867918c3e4b3911386" translate="yes" xml:space="preserve">
          <source>There is support for this in xmerl by the &quot;simple-form&quot; format. You can put your data in a simple-form data structure and feed it into &lt;code&gt;xmerl:export_simple(Content,Callback,RootAttributes)&lt;/code&gt;. Content may be a mixture of simple-form and xmerl records as xmlElement and xmlText.</source>
          <target state="translated">「simple-form」形式によるxmerlでのサポートがあります。データを単純な形式のデータ構造に入れ、 &lt;code&gt;xmerl:export_simple(Content,Callback,RootAttributes)&lt;/code&gt; ます。コンテンツは、xmlElementとxmlTextのように、単純な形式のレコードとxmerlレコードの混合である場合があります。</target>
        </trans-unit>
        <trans-unit id="3edc744598fcc737ca378c211064f17614a02e99" translate="yes" xml:space="preserve">
          <source>There is usually not much difference between a body-recursive list function and tail-recursive function that reverses the list at the end. Therefore, concentrate on writing beautiful code and forget about the performance of your list functions. In the time-critical parts of your code (and only there), &lt;strong&gt;measure&lt;/strong&gt; before rewriting your code.</source>
          <target state="translated">通常、ボディ再帰リスト関数と最後にリストを逆にするテール再帰関数との間に大きな違いはありません。したがって、美しいコードを書くことに集中し、リスト関数のパフォーマンスを忘れてください。コードのタイムクリティカルな部分（およびそこのみ）で、コードを書き直す前に&lt;strong&gt;測定し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="175f3e4c19799f026ed2193325a08cc18afee059" translate="yes" xml:space="preserve">
          <source>There may be a tuple &lt;code&gt;{saved, N}&lt;/code&gt; in the return value, if the MatchSpec is other than []. The integer &lt;code&gt;N&lt;/code&gt; may then be used in subsequent calls to this function and will stand as an &quot;alias&quot; for the given expression. There are also a couple of built-in aliases for common expressions, see &lt;code&gt;&lt;a href=&quot;#ltp-0&quot;&gt;ltp/0&lt;/a&gt;&lt;/code&gt; below for details.</source>
          <target state="translated">MatchSpecが[]以外の場合、戻り値にタプル &lt;code&gt;{saved, N}&lt;/code&gt; が含まれる可能性があります。整数 &lt;code&gt;N&lt;/code&gt; は、この関数の後続の呼び出しで使用でき、指定された式の「エイリアス」として機能します。一般的な式にはいくつかの組み込みエイリアスもあります。詳細については、下記の &lt;code&gt;&lt;a href=&quot;#ltp-0&quot;&gt;ltp/0&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="439af89f2aedc3e47e38162227f9dad598919f3e" translate="yes" xml:space="preserve">
          <source>There may be label characters before or/and after the wildcard. For example: &lt;code&gt;a*d.example.com&lt;/code&gt; matches &lt;code&gt;abcd.example.com&lt;/code&gt; and &lt;code&gt;ad.example.com&lt;/code&gt;, but not &lt;code&gt;ab.cd.example.com&lt;/code&gt;.</source>
          <target state="translated">ワイルドカードの前後にラベル文字がある場合があります。例： &lt;code&gt;a*d.example.com&lt;/code&gt; は &lt;code&gt;abcd.example.com&lt;/code&gt; および &lt;code&gt;ad.example.com&lt;/code&gt; と一致しますが、ab.cd.example.comとは一致しませ &lt;code&gt;ab.cd.example.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2139ae87af2ed5426b73952d31a1c1937f8c40d6" translate="yes" xml:space="preserve">
          <source>There may only be one wildcard character and that is in the first label, for example: &lt;code&gt;*.example.com&lt;/code&gt;. This matches &lt;code&gt;foo.example.com&lt;/code&gt; but neither &lt;code&gt;example.com&lt;/code&gt; nor &lt;code&gt;foo.bar.example.com&lt;/code&gt;.</source>
          <target state="translated">ワイルドカード文字は1つだけ使用でき、最初のラベルに含まれます（例： &lt;code&gt;*.example.com&lt;/code&gt; )。これは &lt;code&gt;foo.example.com&lt;/code&gt; に一致しますが、 &lt;code&gt;example.com&lt;/code&gt; や &lt;code&gt;foo.bar.example.com&lt;/code&gt; には一致しません。</target>
        </trans-unit>
        <trans-unit id="86d38102deb0f5be31f5b5646bc1d23391a9239c" translate="yes" xml:space="preserve">
          <source>There must be no calls to another function in between the calls to &lt;code&gt;setelement/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setelement/3&lt;/code&gt; の呼び出しの間に別の関数の呼び出しがあってはなりません。</target>
        </trans-unit>
        <trans-unit id="4379219137f82ad3d5f85ec7793035a5647a5347" translate="yes" xml:space="preserve">
          <source>There were a number of problems in the implementation of the now undocumented algorithms, which is why they are deprecated. The new algorithms are a bit slower but do not have these problems:</source>
          <target state="translated">現在は文書化されていないアルゴリズムの実装には多くの問題がありました。新しいアルゴリズムは少し遅いですが、これらの問題はありません。</target>
        </trans-unit>
        <trans-unit id="94edc56fd4c7a685211aeb70698042dc2126321d" translate="yes" xml:space="preserve">
          <source>Therefor in the tests, binary codecs are tested with four different encoding configs to determine exactly how the different options effect the performance: with transformation and without driver ([]), without transformation and without driver ([native]), with transformation and with driver ([driver]) and finally without transformation and with driver ([driver,native]).</source>
          <target state="translated">そのため、バイナリコーデックは4つの異なるエンコーディング設定でテストされ、異なるオプションがどのようにパフォーマンスに影響するかを正確に判断します:変換あり、ドライバなし([])、変換なし、ドライバなし([native])、変換あり、ドライバあり([driver])、最後に変換なし、ドライバあり([driver,native])。</target>
        </trans-unit>
        <trans-unit id="243f02477e6596c18fd3c62ae8ed5666e8ef7097" translate="yes" xml:space="preserve">
          <source>Therefore &lt;code&gt;my_binary_to_list/1&lt;/code&gt; calls itself with the match context instead of with a sub binary. The instruction that initializes the matching operation basically does nothing when it sees that it was passed a match context instead of a binary.</source>
          <target state="translated">したがって、 &lt;code&gt;my_binary_to_list/1&lt;/code&gt; は、サブバイナリではなく、一致コンテキストで自分自身を呼び出します。一致操作を初期化する命令は、バイナリではなく一致コンテキストが渡されたことがわかると、基本的に何もしません。</target>
        </trans-unit>
        <trans-unit id="a8aae9f4ba098f331d48e185f24980e7223ed137" translate="yes" xml:space="preserve">
          <source>Therefore it is not enough to only recompile drivers written with version management for pre R15B types; the types must be changed in the driver suggesting other rewrites, especially regarding size variables. &lt;strong&gt;Investigate all warnings when recompiling.&lt;/strong&gt;</source>
          <target state="translated">したがって、R15B以前のタイプのバージョン管理で記述されたドライバを再コンパイルするだけでは十分ではありません。特にサイズ変数に関しては、ドライバーでタイプを変更して、他の書き換えを提案する必要があります。&lt;strong&gt;再コンパイルするときは、すべての警告を調べてください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8451cc048f68604a8e6f8398bb63201daf908b58" translate="yes" xml:space="preserve">
          <source>Therefore the following call:</source>
          <target state="translated">というわけで、次のような呼びかけがありました。</target>
        </trans-unit>
        <trans-unit id="f4080dae433bd65ba4f78438abd73a9dcd511aa9" translate="yes" xml:space="preserve">
          <source>Therefore, &lt;code&gt;after_zero/1&lt;/code&gt; builds one match context and one sub binary (assuming it is passed a binary that contains a zero byte).</source>
          <target state="translated">したがって、 &lt;code&gt;after_zero/1&lt;/code&gt; は1つの一致コンテキストと1つのサブバイナリを構築します（ゼロバイトを含むバイナリが渡されたと仮定）。</target>
        </trans-unit>
        <trans-unit id="9e7c3bfd969d68d13350f73c07ad4f037893dc43" translate="yes" xml:space="preserve">
          <source>Therefore, certain operations on a binary mark it so that any future append operation will be forced to copy the binary. In most cases, the binary object will be shrunk at the same time to reclaim the extra space allocated for growing.</source>
          <target state="translated">したがって、バイナリに対する特定の操作は、将来の追加操作がバイナリを強制的にコピーするようにそれをマークします。ほとんどの場合、バイナリオブジェクトは、成長のために割り当てられた余分なスペースを取り戻すために同時に縮小されます。</target>
        </trans-unit>
        <trans-unit id="92e119795a21e7955d1c30f27f5a24fcb874b645" translate="yes" xml:space="preserve">
          <source>Therefore, converting arbitrary input strings to atoms can be dangerous in a system that runs continuously. If only certain well-defined atoms are allowed as input, &lt;code&gt;list_to_existing_atom/1&lt;/code&gt; can be used to to guard against a denial-of-service attack. (All atoms that are allowed must have been created earlier, for example, by simply using all of them in a module and loading that module.)</source>
          <target state="translated">したがって、連続して実行されるシステムでは、任意の入力文字列をアトムに変換することは危険な場合があります。特定の明確に定義されたアトムのみを入力として許可する場合、 &lt;code&gt;list_to_existing_atom/1&lt;/code&gt; を使用して、サービス拒否攻撃から保護することができます。（許可されているすべてのアトムは、たとえば、モジュールですべてのアトムを使用し、そのモジュールをロードすることによって、以前に作成されている必要があります。）</target>
        </trans-unit>
        <trans-unit id="0afb1e74cde0028071d12983306cbaa758aaee89" translate="yes" xml:space="preserve">
          <source>Therefore, if you want to send both a pre-existing binary and some extra data to a driver without copying the binary, you must call &lt;code&gt;port_control/3&lt;/code&gt; twice; once with the binary and once with the extra data. However, that will only work if there is only one process communicating with the port (because otherwise another process can call the driver in-between the calls).</source>
          <target state="translated">したがって、バイナリをコピーせずに既存のバイナリといくつかの追加データの両方をドライバーに送信する場合は、 &lt;code&gt;port_control/3&lt;/code&gt; を 2回呼び出す必要があります。1回はバイナリで、もう1回は追加データで。ただし、これはポートと通信しているプロセスが1つしかない場合にのみ機能します（それ以外の場合は、呼び出しの間に別のプロセスがドライバーを呼び出す可能性があるためです）。</target>
        </trans-unit>
        <trans-unit id="e1058e576d020e27852d4dd63c7e76baf9cb4f3e" translate="yes" xml:space="preserve">
          <source>Therefore, setting this option to &lt;code&gt;true&lt;/code&gt; when creating a socket never fails, except possibly on a platform where you have customized the kernel to only allow &lt;code&gt;false&lt;/code&gt;, which can be doable (but awkward) on, for example, OpenBSD.</source>
          <target state="translated">したがって、ソケットを作成するときにこのオプションを &lt;code&gt;true&lt;/code&gt; に設定すると、カーネルをカスタマイズして &lt;code&gt;false&lt;/code&gt; のみを許可するプラットフォームを除いて、失敗することはありません。</target>
        </trans-unit>
        <trans-unit id="fa03132e315d50b20abbcf96beb07d6fa4be6ede" translate="yes" xml:space="preserve">
          <source>Therefore, the following example is a valid Erlang instance of type 'Oid':</source>
          <target state="translated">したがって、次の例は 'Oid' 型の有効な Erlang インスタンスです。</target>
        </trans-unit>
        <trans-unit id="a00c80e549287bbb93dadd392554fafbbbc24b24" translate="yes" xml:space="preserve">
          <source>These Erlang variables are now bound to valid instances of ASN.1 defined types. This style of value can be passed directly to the encoder for transformation into a series of bytes.</source>
          <target state="translated">これらのErlang変数はASN.1で定義された型の有効なインスタンスにバインドされています。このスタイルの値を直接エンコーダに渡して、一連のバイトに変換することができます。</target>
        </trans-unit>
        <trans-unit id="0f0a03fdc3b62893e944bf31939f2cfaecae96b7" translate="yes" xml:space="preserve">
          <source>These MIBs are not loaded by default.</source>
          <target state="translated">これらのMIBはデフォルトではロードされません。</target>
        </trans-unit>
        <trans-unit id="2ec64a39b7d4c54784cd2ad56d92c227d3e17b9a" translate="yes" xml:space="preserve">
          <source>These MIBs contain the &lt;code&gt;snmp-&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt; groups from MIB-II which is defined in RFC1213 (STANDARD-MIB) or RFC1907 (SNMPv2-MIB). They are implemented in the &lt;code&gt;snmp_standard_mib&lt;/code&gt; module. The &lt;code&gt;snmp&lt;/code&gt; counters all reside in volatile memory and the &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;snmpEnableAuthenTraps&lt;/code&gt; variables in persistent memory, using the SNMP built-in database (refer to the Reference Manual, section &lt;code&gt;snmp&lt;/code&gt;, module &lt;code&gt;snmpa_local_db&lt;/code&gt; for more details).</source>
          <target state="translated">これらのMIBには、 &lt;code&gt;snmp-&lt;/code&gt; （STANDARD-MIB）またはRFC1907（SNMPv2-MIB）で定義されているMIB-II のsnmp-および &lt;code&gt;system&lt;/code&gt; グループが含まれています。これらは、 &lt;code&gt;snmp_standard_mib&lt;/code&gt; モジュールに実装されています。 &lt;code&gt;snmp&lt;/code&gt; カウンター揮発性メモリ内のすべての常駐し、 &lt;code&gt;system&lt;/code&gt; と &lt;code&gt;snmpEnableAuthenTraps&lt;/code&gt; の SNMPを使用して永続メモリ内の変数は、組み込みのデータベース（リファレンスマニュアル、セクションを参照してください &lt;code&gt;snmp&lt;/code&gt; 、モジュール &lt;code&gt;snmpa_local_db&lt;/code&gt; 詳細について）。</target>
        </trans-unit>
        <trans-unit id="e67a93a99a7e370f0477c918676f4cf69ff8699a" translate="yes" xml:space="preserve">
          <source>These are a few  facts about the predefined variables (the set operators &lt;code id=&quot;simple_facts&quot;&gt;+&lt;/code&gt; (union) and &lt;code&gt;-&lt;/code&gt; (difference) as well as the cast operator &lt;code&gt;(&lt;/code&gt;Type&lt;code&gt;)&lt;/code&gt; are described below):</source>
          <target state="translated">これらは、事前定義された変数に関するいくつかの事実です（集合演算子 &lt;code id=&quot;simple_facts&quot;&gt;+&lt;/code&gt; （ユニオン）および &lt;code&gt;-&lt;/code&gt; （差分）、およびキャスト演算子 &lt;code&gt;(&lt;/code&gt; Type &lt;code&gt;)&lt;/code&gt; については、以下で説明します）。</target>
        </trans-unit>
        <trans-unit id="b41fa5eb73a7806528a8254a84f2a17ca0515977" translate="yes" xml:space="preserve">
          <source>These are deprecated because the annoying double meaning of the name servers/time-out argument, and because they have no decent place for a resolver options list.</source>
          <target state="translated">これらは、ネームサーバ/タイムアウト引数の二重の意味が煩わしいことと、 リゾルバのオプションリストにまともな場所がないことから、非推奨とされています。</target>
        </trans-unit>
        <trans-unit id="60cf421719fdc337d9a96b28085e43063192f175" translate="yes" xml:space="preserve">
          <source>These are only recognized by Erlang nodes, not by hidden nodes.</source>
          <target state="translated">これらはErlangノードによってのみ認識され、隠れたノードによっては認識されません。</target>
        </trans-unit>
        <trans-unit id="3295d73ec7e802c1f14b2c332abe46ab60bbbcd5" translate="yes" xml:space="preserve">
          <source>These are options effecting discovery &lt;code&gt;originating&lt;/code&gt; in this agent.</source>
          <target state="translated">これらは、このエージェントで &lt;code&gt;originating&lt;/code&gt; した検出に影響するオプションです。</target>
        </trans-unit>
        <trans-unit id="e5c03f74465d648a5862f1fc098e9296ee6d6bfb" translate="yes" xml:space="preserve">
          <source>These are options effecting discovery &lt;code&gt;terminating&lt;/code&gt; in this agent (i.e. initiated by a manager).</source>
          <target state="translated">これらは、このエージェントで &lt;code&gt;terminating&lt;/code&gt; する（つまり、マネージャーによって開始される）検出に影響するオプションです。</target>
        </trans-unit>
        <trans-unit id="b54f8e7581e4b11655c99aa67637a8c43ce11aa5" translate="yes" xml:space="preserve">
          <source>These are the tools you need in order to unpack and build Erlang/OTP.</source>
          <target state="translated">これらはErlang/OTPを展開してビルドするために必要なツールです。</target>
        </trans-unit>
        <trans-unit id="c2b3c62dddfeb24a018a3dfcfce0b24364d8a6b9" translate="yes" xml:space="preserve">
          <source>These are to behave as &lt;code&gt;{get_until, latin1, Prompt, Module, Function, ExtraArgs}&lt;/code&gt;, &lt;code&gt;{get_chars, latin1, Prompt, N}&lt;/code&gt;, and &lt;code&gt;{get_line, latin1, Prompt}&lt;/code&gt;, respectively.</source>
          <target state="translated">これらは、それぞれ &lt;code&gt;{get_until, latin1, Prompt, Module, Function, ExtraArgs}&lt;/code&gt; 、 &lt;code&gt;{get_chars, latin1, Prompt, N}&lt;/code&gt; 、および &lt;code&gt;{get_line, latin1, Prompt}&lt;/code&gt; として動作します。</target>
        </trans-unit>
        <trans-unit id="c1e4b991ff6fe7d1f2495f5a84c72e419f949594" translate="yes" xml:space="preserve">
          <source>These are to behave as &lt;code&gt;{put_chars, latin1, Characters}&lt;/code&gt; and &lt;code&gt;{put_chars, latin1, Module, Function, Args}&lt;/code&gt;, respectively.</source>
          <target state="translated">これらは、それぞれ &lt;code&gt;{put_chars, latin1, Characters}&lt;/code&gt; および &lt;code&gt;{put_chars, latin1, Module, Function, Args}&lt;/code&gt; }として動作します。</target>
        </trans-unit>
        <trans-unit id="187481b8c7b89208071bec932d3843dbbff8e5a2" translate="yes" xml:space="preserve">
          <source>These are two different SMP performance monitoring tool(s).</source>
          <target state="translated">これらは、2つの異なるSMPパフォーマンス監視ツールです。</target>
        </trans-unit>
        <trans-unit id="4a7d9dd0e596b5ce481a5779ed708189763b4369" translate="yes" xml:space="preserve">
          <source>These behaviors occur regardless if the subpattern is called recursively. The treatment of subroutines in Perl is different in some cases.</source>
          <target state="translated">これらの動作は、サブパターンが再帰的に呼び出された場合でも発生します。Perlにおけるサブルーチンの扱いが異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="4ec49381162072262ed7e981970a8f6edfbd0ee9" translate="yes" xml:space="preserve">
          <source>These books are highly recommended as a start for learning Erlang.</source>
          <target state="translated">これらの本はErlangを学ぶためのスタートとして非常にお勧めです。</target>
        </trans-unit>
        <trans-unit id="f21525376606a80acbcf6dfcd0372134852c9de3" translate="yes" xml:space="preserve">
          <source>These callback functions are called from local and non-local evaluation function handlers, described in the &lt;code&gt;&lt;a href=&quot;erl_eval&quot;&gt;erl_eval&lt;/a&gt;&lt;/code&gt; manual page. (Arguments in &lt;code&gt;ArgList&lt;/code&gt; are evaluated before the callback functions are called.)</source>
          <target state="translated">これらのコールバック関数は、 &lt;code&gt;&lt;a href=&quot;erl_eval&quot;&gt;erl_eval&lt;/a&gt;&lt;/code&gt; マニュアルページで説明されているローカルおよび非ローカルの評価関数ハンドラーから呼び出されます。（ &lt;code&gt;ArgList&lt;/code&gt; の引数は、コールバック関数が呼び出される前に評価されます。）</target>
        </trans-unit>
        <trans-unit id="0717b31aef17edf30fcfa1ecdd0c63f7b41ab7a8" translate="yes" xml:space="preserve">
          <source>These case switches only allow &lt;code&gt;?Q(...)&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; as clause patterns, and the guards may contain any expressions, not just Erlang guard expressions.</source>
          <target state="translated">これらのケーススイッチは、 &lt;code&gt;?Q(...)&lt;/code&gt; または &lt;code&gt;_&lt;/code&gt; as句パターンのみを許可し、ガードにはErlangガード式だけでなく、任意の式を含めることができます。</target>
        </trans-unit>
        <trans-unit id="b82509cdccdd98b3f35ff2498648839db3e7e6d5" translate="yes" xml:space="preserve">
          <source>These changes are essential not to crash the emulator or worse cause malfunction. Without them a driver can return garbage in the high 32 bits to the emulator, causing it to build a huge result from random bytes, either crashing on memory allocation or succeeding with a random result from the driver call.</source>
          <target state="translated">これらの変更は、エミュレータをクラッシュさせたり、誤動作の原因にならないようにするために不可欠なものです。これらの変更がないと、ドライバは上位32ビットのゴミをエミュレータに返してしまい、ランダムなバイトから巨大な結果を生成してしまい、メモリ割り当てでクラッシュしたり、ドライバ呼び出しによるランダムな結果で成功したりしてしまいます。</target>
        </trans-unit>
        <trans-unit id="573248e1d06102f3107f0a34b228df99492a4b03" translate="yes" xml:space="preserve">
          <source>These choices depend a lot on your problem domain. If you don't have real time monitoring and ability to fix problems quickly, for example in an embedded system, you might want to accept at most one restart per minute before the supervisor should give up and escalate to the next level to try to clear the error automatically. On the other hand, if it is more important that you keep trying even at a high failure rate, you might want a sustained rate of as much as 1-2 restarts per second.</source>
          <target state="translated">これらの選択は、問題の領域に大きく依存します。例えば組み込みシステムのように、リアルタイムで監視し、問題を迅速に修正する能力がない場合、スーパーバイザがあきらめて次のレベルにエスカレートしてエラーを自動的にクリアしようとする前に、せいぜい1分間に1回の再起動を受け入れたいと思うかもしれません。一方、故障率が高くてもトライし続けることがより重要な場合は、1秒間に1-2回程度の再起動の持続率が欲しいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="7cc39d5ee560666c19b1d761a7fa1de1841363b5" translate="yes" xml:space="preserve">
          <source>These commands are only added for convenience, the normal way to manipulate the state of a service is through the control panels services applet.</source>
          <target state="translated">これらのコマンドは便宜上追加されたもので、サービスの状態を操作する通常の方法はコントロールパネルのサービスアプレットを介して行います。</target>
        </trans-unit>
        <trans-unit id="f0bb49d0ba352c03c469accf5e7d24180534a7f3" translate="yes" xml:space="preserve">
          <source>These constructs makes it possible to define open types, that is, values of that type can be of any ASN.1 type. Also, relationships can be defined between different types and values, as classes can hold types, values, objects, object sets, and other classes in their fields. A class can be defined in ASN.1 as follows:</source>
          <target state="translated">これらの構成により、オープンな型を定義することが可能になり、つまり、その型の値は任意のASN.1型を持つことができるようになります。また、クラスは、型、値、オブジェクト、オブジェクトセット、および他のクラスをそのフィールドに保持することができるので、異なる型と値の間の関係を定義することができます。クラスはASN.1では次のように定義することができます。</target>
        </trans-unit>
        <trans-unit id="befa22022ba0fc273ee1c740958946648b1b19ef" translate="yes" xml:space="preserve">
          <source>These data types are described in the documentation for the &lt;code&gt;SNMP&lt;/code&gt; application.</source>
          <target state="translated">これらのデータ型については、 &lt;code&gt;SNMP&lt;/code&gt; アプリケーションのドキュメントで説明されています。</target>
        </trans-unit>
        <trans-unit id="7607e5152380b649a4dfea1427608d47b7252b27" translate="yes" xml:space="preserve">
          <source>These declarations mean that &lt;code&gt;'='&lt;/code&gt; is defined as a &lt;code&gt;right associative binary&lt;/code&gt; operator with precedence 100, &lt;code&gt;'=='&lt;/code&gt; and &lt;code&gt;'=/='&lt;/code&gt; are operators with &lt;code&gt;no associativity&lt;/code&gt;, &lt;code&gt;'+'&lt;/code&gt; and &lt;code&gt;'*'&lt;/code&gt; are &lt;code&gt;left associative binary&lt;/code&gt; operators, where &lt;code&gt;'*'&lt;/code&gt; takes precedence over &lt;code&gt;'+'&lt;/code&gt; (the normal case), and &lt;code&gt;'-'&lt;/code&gt; is a &lt;code&gt;unary&lt;/code&gt; operator of higher precedence than &lt;code&gt;'*'&lt;/code&gt;. The fact that '==' has no associativity means that an expression like &lt;code&gt;a == b == c&lt;/code&gt; is considered a syntax error.</source>
          <target state="translated">これらの宣言は、 &lt;code&gt;'='&lt;/code&gt; が優先順位100の &lt;code&gt;right associative binary&lt;/code&gt; 演算子として定義されていること、 &lt;code&gt;'=='&lt;/code&gt; および &lt;code&gt;'=/='&lt;/code&gt; は &lt;code&gt;no associativity&lt;/code&gt; 演算子、 &lt;code&gt;'+'&lt;/code&gt; および &lt;code&gt;'*'&lt;/code&gt; は &lt;code&gt;left associative binary&lt;/code&gt; 演算子、 &lt;code&gt;'*'&lt;/code&gt; は &lt;code&gt;'+'&lt;/code&gt; （通常の場合）よりも優先され、 &lt;code&gt;'-'&lt;/code&gt; は &lt;code&gt;'*'&lt;/code&gt; よりも優先順位の高い &lt;code&gt;unary&lt;/code&gt; 子です。 「==」に関連性がないという事実は &lt;code&gt;a == b == c&lt;/code&gt; ような式は構文エラーと見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="751552b3c6781f0e0e58af55485f1a42f3adbfcd" translate="yes" xml:space="preserve">
          <source>These function simply fetch the appropriate field from the &lt;code&gt;ec&lt;/code&gt; structure. Read the field directly will probably be safe for a long time, so these functions are not really needed.</source>
          <target state="translated">これらの関数は、 &lt;code&gt;ec&lt;/code&gt; 構造体から適切なフィールドをフェッチするだけです。フィールドを直接読み取ると、おそらく長期間にわたって安全になるため、これらの機能は実際には必要ありません。</target>
        </trans-unit>
        <trans-unit id="04605460ad130e7237d6de8796f71c1d7f55abcb" translate="yes" xml:space="preserve">
          <source>These functions are all called in the same manner as &lt;code&gt;printf()&lt;/code&gt;, that is, with a string containing format specifiers followed by a list of corresponding arguments. All output from these functions is to &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="translated">これらの関数はすべて、 &lt;code&gt;printf()&lt;/code&gt; と同じ方法で呼び出されます。つまり、書式指定子を含む文字列の後に、対応する引数のリストが続きます。これらの関数からのすべての出力は &lt;code&gt;stderr&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="52fc81f0ba111d2acbf6995d34d870aacab348cf" translate="yes" xml:space="preserve">
          <source>These functions are called for each object in an MIB when the MIB is unloaded or loaded, respectively.</source>
          <target state="translated">これらの関数は、MIBがアンロードされたとき、またはロードされたときに、それぞれMIB内の各オブジェクトに対して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d9faf69dba0c1f70caf123cc3782e49dc958f249" translate="yes" xml:space="preserve">
          <source>These functions are described in detail in &lt;code&gt;&lt;a href=&quot;snmp_def_instr_functions&quot;&gt;Definition of Instrumentation Functions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらの関数については、 &lt;code&gt;&lt;a href=&quot;snmp_def_instr_functions&quot;&gt;Definition of Instrumentation Functions&lt;/a&gt;&lt;/code&gt; で詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="fd7a6a1b98572c10143c1d93f4f329a609ec28fe" translate="yes" xml:space="preserve">
          <source>These functions are equivalent to the corresponding functions in module &lt;code&gt;dbg&lt;/code&gt;, but all calls are stored in the history. The history buffer makes it easy to create configuration files; the same trace environment can be set up many times, for example, to compare two test runs. It also reduces the amount of typing when using &lt;code&gt;ttb&lt;/code&gt; from the Erlang shell.</source>
          <target state="translated">これらの関数は、モジュール &lt;code&gt;dbg&lt;/code&gt; の対応する関数と同等ですが、すべての呼び出しは履歴に保存されます。履歴バッファーを使用すると、構成ファイルを簡単に作成できます。たとえば、2つのテスト実行を比較するために、同じトレース環境を何度もセットアップできます。また、Erlangシェルから &lt;code&gt;ttb&lt;/code&gt; を使用する場合のタイピングの量を減らします。</target>
        </trans-unit>
        <trans-unit id="158d67977a08a84d4924f2a647ba82873c18061b" translate="yes" xml:space="preserve">
          <source>These functions are explained in the following sections. See also &lt;code&gt;&lt;a href=&quot;#checkpoints&quot;&gt;Checkpoints&lt;/a&gt;&lt;/code&gt;, which describes the two functions used to activate and deactivate checkpoints.</source>
          <target state="translated">これらの機能については、次のセクションで説明します。 &lt;code&gt;&lt;a href=&quot;#checkpoints&quot;&gt;Checkpoints&lt;/a&gt;&lt;/code&gt; をアクティブ化および非アクティブ化するために使用される2つの関数を説明するチェックポイントも参照してください。</target>
        </trans-unit>
        <trans-unit id="60e3f3ff3408849e7fd9edf60400f772dde55362" translate="yes" xml:space="preserve">
          <source>These functions are further described and exemplified in &lt;code&gt;&lt;a href=&quot;mnesia_chap4#matching&quot;&gt;Pattern Matching&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらの関数は、「 &lt;code&gt;&lt;a href=&quot;mnesia_chap4#matching&quot;&gt;Pattern Matching&lt;/a&gt;&lt;/code&gt; でさらに説明および例示されています。</target>
        </trans-unit>
        <trans-unit id="fa8057e2cae698872b37c80f8aa0f3fe06d7cf59" translate="yes" xml:space="preserve">
          <source>These functions are intended for interactive use in the Erlang shell only. The module prefix can be omitted.</source>
          <target state="translated">これらの関数はErlangシェルでの対話的な使用を意図しています。モジュールのプレフィックスは省略できます。</target>
        </trans-unit>
        <trans-unit id="9545561ba594c4d5a35ac49f33ac5958ae1e125a" translate="yes" xml:space="preserve">
          <source>These functions are intended only to help with debugging, and are not to be called from normal code. They are provided for convenience, allowing developers to avoid having to create their own custom state replacement functions.</source>
          <target state="translated">これらの関数は、デバッグの手助けをすることを目的としたものであり、通常のコードからは呼び出されません。これらの関数は便利なように提供されており、開発者が独自のカスタム状態置換関数を作成する必要がないようにしています。</target>
        </trans-unit>
        <trans-unit id="b678d1c2ff800ccba92fa1081c74821cd431ce2f" translate="yes" xml:space="preserve">
          <source>These functions are intended only to help with debugging. They are provided for convenience, allowing developers to avoid having to create their own state extraction functions and also avoid having to interactively extract the state from the return values of &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#get_status-2&quot;&gt;get_status/2&lt;/a&gt;&lt;/code&gt; while debugging.</source>
          <target state="translated">これらの関数は、デバッグを支援することのみを目的としています。これらは便宜上提供されているため、開発者は独自の状態抽出関数を作成する必要がなく、デバッグ中に &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#get_status-2&quot;&gt;get_status/2&lt;/a&gt;&lt;/code&gt; の戻り値から対話的に状態を抽出する必要もありません。</target>
        </trans-unit>
        <trans-unit id="bb8d168e922a05dff4b0cd171803a7675b2fbf08" translate="yes" xml:space="preserve">
          <source>These functions are kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_ERROR&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#error-1&quot;&gt;logger:error/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">これらの関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_ERROR&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#error-1&quot;&gt;logger:error/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="35c1fc44955a642a5777cca455981c0556303f1d" translate="yes" xml:space="preserve">
          <source>These functions are kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_INFO&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#info-1&quot;&gt;logger:info/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">これらの関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_INFO&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#info-1&quot;&gt;logger:info/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5de333f99c5ead1d8115c4087c9a72a0f601d546" translate="yes" xml:space="preserve">
          <source>These functions are kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_WARNING&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#warning-1&quot;&gt;logger:warning/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">これらの関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_WARNING&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#warning-1&quot;&gt;logger:warning/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="2d9a4daca1ac6f764626bf603aa4c73a5aa770a0" translate="yes" xml:space="preserve">
          <source>These functions are much slower than the ordinary store and load functions of &lt;code&gt;Mnesia&lt;/code&gt;. However, this is mainly intended for minor experiments and initial prototyping. The major advantage of these functions is that they are easy to use.</source>
          <target state="translated">これらの関数は、 &lt;code&gt;Mnesia&lt;/code&gt; の通常のストアおよびロード関数よりもはるかに低速です。ただし、これは主に小規模な実験と初期のプロトタイピングを目的としています。これらの関数の主な利点は、使いやすいことです。</target>
        </trans-unit>
        <trans-unit id="cc96780ae3ae54fcc394e1c818c2355204d00877" translate="yes" xml:space="preserve">
          <source>These functions are not thread safe.</source>
          <target state="translated">これらの関数はスレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="8afae98b4e16a8e03fc3cf30a7699eb78e0fa80a" translate="yes" xml:space="preserve">
          <source>These functions are performed in a transaction context involving mechanisms, such as locking, logging, replication, checkpoints, subscriptions, and commit protocols. However, the same function can also be evaluated in other activity contexts.</source>
          <target state="translated">これらの関数は、ロック、ロギング、レプリケーション、チェックポイント、サブスクリプション、コミットプロトコルなどのメカニズムを含むトランザクションコンテキストで実行されます。しかし、同じ関数は他のアクティビティコンテキストでも評価することができます。</target>
        </trans-unit>
        <trans-unit id="d43be56fdde5e5de270664b9730584c3eb30df12" translate="yes" xml:space="preserve">
          <source>These functions are primarily intended for simplified testing of &lt;code&gt;.appup&lt;/code&gt; files. They are not run within the context of the &lt;code&gt;release_handler&lt;/code&gt; process. They must therefore &lt;strong&gt;not&lt;/strong&gt; be used together with calls to &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt;, as this causes the &lt;code&gt;release_handler&lt;/code&gt; to end up in an inconsistent state.</source>
          <target state="translated">これらの関数は、主に &lt;code&gt;.appup&lt;/code&gt; ファイルの簡易テストを目的としています。それらは &lt;code&gt;release_handler&lt;/code&gt; プロセスのコンテキスト内では実行されません。したがって、これらを &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; の呼び出しと一緒に使用し&lt;strong&gt;ない&lt;/strong&gt;でください。これを行うと、 &lt;code&gt;release_handler&lt;/code&gt; が矛盾した状態になります。</target>
        </trans-unit>
        <trans-unit id="bfdb7ec140eb86cb272ecdbb50138f14fef17e5c" translate="yes" xml:space="preserve">
          <source>These functions are to be used with trace flag &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt;, and &lt;code&gt;'receive'&lt;/code&gt; for setting and clearing trace patterns.</source>
          <target state="translated">これらの関数は、トレースパターンを設定およびクリアするために、トレースフラグ &lt;code&gt;call&lt;/code&gt; 、 &lt;code&gt;send&lt;/code&gt; 、および &lt;code&gt;'receive'&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="1f17b4d328843c30adfc4895bdc753282346f128" translate="yes" xml:space="preserve">
          <source>These functions can be called to retrieve information about the module.</source>
          <target state="translated">これらの関数は、モジュールに関する情報を取得するために呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1311856f69e61fe882b7ae9bfc9de73ea32a8732" translate="yes" xml:space="preserve">
          <source>These functions can be used to find records in a table when it is impossible to write constraints for the function &lt;code&gt;&lt;a href=&quot;mnesia#match_object-3&quot;&gt;mnesia:match_object/3&lt;/a&gt;&lt;/code&gt;, or when you want to perform some action on certain records.</source>
          <target state="translated">これらの関数は、関数 &lt;code&gt;&lt;a href=&quot;mnesia#match_object-3&quot;&gt;mnesia:match_object/3&lt;/a&gt;&lt;/code&gt; の制約を記述できない場合、または特定のレコードに対して何らかのアクションを実行する場合に、テーブル内のレコードを検索するために使用できます。</target>
        </trans-unit>
        <trans-unit id="0186f872732540e967fd668deb3a4c289a66df35" translate="yes" xml:space="preserve">
          <source>These functions create or delete a table index on a field defined by &lt;code&gt;AttributeName&lt;/code&gt;. To illustrate this, add an index to the table definition &lt;code&gt;(employee, {emp_no, name, salary, sex, phone, room_no})&lt;/code&gt;, which is the example table from the &lt;code&gt;Company&lt;/code&gt; database. The function that adds an index on element &lt;code&gt;salary&lt;/code&gt; can be expressed as &lt;code&gt;mnesia:add_table_index(employee, salary)&lt;/code&gt;.</source>
          <target state="translated">これらの関数は、 &lt;code&gt;AttributeName&lt;/code&gt; で定義されたフィールドのテーブルインデックスを作成または削除します。これを説明するために、 &lt;code&gt;Company&lt;/code&gt; データベースのサンプルテーブルであるテーブル定義 &lt;code&gt;(employee, {emp_no, name, salary, sex, phone, room_no})&lt;/code&gt; にインデックスを追加します。要素 &lt;code&gt;salary&lt;/code&gt; にインデックスを追加する関数は、 &lt;code&gt;mnesia:add_table_index(employee, salary)&lt;/code&gt; として表すことができます。</target>
        </trans-unit>
        <trans-unit id="b321dfec9cbea3824adf71432c75a84bb7f39aaa" translate="yes" xml:space="preserve">
          <source>These functions iterate over the &lt;code&gt;Mnesia&lt;/code&gt; table &lt;code&gt;Tab&lt;/code&gt; and apply the function &lt;code&gt;Fun&lt;/code&gt; to each record. &lt;code&gt;Fun&lt;/code&gt; takes two arguments, the first is a record from the table, and the second is the accumulator. &lt;code&gt;Fun&lt;/code&gt; returns a new accumulator.</source>
          <target state="translated">これらの関数は &lt;code&gt;Mnesia&lt;/code&gt; テーブル &lt;code&gt;Tab&lt;/code&gt; を反復処理し、関数 &lt;code&gt;Fun&lt;/code&gt; を各レコードに適用します。 &lt;code&gt;Fun&lt;/code&gt; は2つの引数を取ります。最初の引数はテーブルのレコードで、2番目の引数はアキュムレータです。 &lt;code&gt;Fun&lt;/code&gt; は新しいアキュムレータを返します。</target>
        </trans-unit>
        <trans-unit id="e2241c04aed6e2c04c16cc3d0bc2e51744dc9b5c" translate="yes" xml:space="preserve">
          <source>These functions match a &lt;code&gt;Pattern&lt;/code&gt; against all records in table &lt;code&gt;Tab&lt;/code&gt;. In a &lt;code&gt;&lt;a href=&quot;mnesia#select-2&quot;&gt;mnesia:select&lt;/a&gt;&lt;/code&gt; call, &lt;code&gt;Pattern&lt;/code&gt; is a part of &lt;code&gt;MatchSpecification&lt;/code&gt; described in the following. It is not necessarily performed as an exhaustive search of the entire table. By using indexes and bound values in the key of the pattern, the actual work done by the function can be condensed into a few hash lookups. Using &lt;code&gt;ordered_set&lt;/code&gt; tables can reduce the search space if the keys are partially bound.</source>
          <target state="translated">これらの関数は、 &lt;code&gt;Pattern&lt;/code&gt; をテーブル &lt;code&gt;Tab&lt;/code&gt; のすべてのレコードと照合します。で &lt;code&gt;&lt;a href=&quot;mnesia#select-2&quot;&gt;mnesia:select&lt;/a&gt;&lt;/code&gt; 呼び出し、 &lt;code&gt;Pattern&lt;/code&gt; の一部である &lt;code&gt;MatchSpecification&lt;/code&gt; は、以下に説明します。テーブル全体の完全な検索として実行されるとは限りません。パターンのキーでインデックスとバインドされた値を使用することにより、関数によって実行される実際の作業をいくつかのハッシュルックアップに要約できます。キーが部分的にバインドされている場合、 &lt;code&gt;ordered_set&lt;/code&gt; テーブルを使用すると、検索スペースを削減できます。</target>
        </trans-unit>
        <trans-unit id="4380dbd51df4c218d4fc67f122b3a31fa9dad5e7" translate="yes" xml:space="preserve">
          <source>These functions must return the current values of the associated variables.</source>
          <target state="translated">これらの関数は、関連する変数の現在の値を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="d73e48f290f1971fad9fc4d6418f2f3ddc239932" translate="yes" xml:space="preserve">
          <source>These functions return a negative value indicating that an error occurred.</source>
          <target state="translated">これらの関数は、エラーが発生したことを示す負の値を返します。</target>
        </trans-unit>
        <trans-unit id="f2d4535f8dedc594af82a7502daf5f4472256bee" translate="yes" xml:space="preserve">
          <source>These functions return an open file descriptor on success, or a negative value indicating that an error occurred. In the latter case they set &lt;code&gt;erl_errno&lt;/code&gt; to one of the following:</source>
          <target state="translated">これらの関数は、成功するとオープンファイル記述子を返すか、エラーが発生したことを示す負の値を返します。後者の場合、 &lt;code&gt;erl_errno&lt;/code&gt; を次のいずれかに設定します。</target>
        </trans-unit>
        <trans-unit id="33b0bf879f0be35d9275b8556a8bb8e4605058f4" translate="yes" xml:space="preserve">
          <source>These functions return the number of bytes written to buffer on success, otherwise &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">これらの関数は、成功した場合にバッファに書き込まれたバイト数を返し、それ以外の場合は &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="492a4ea8131a6460ecb2bb728f7492324b79c821" translate="yes" xml:space="preserve">
          <source>These functions returns &lt;code&gt;noError&lt;/code&gt; if the assignment was successful, otherwise an error code.</source>
          <target state="translated">これらの関数は、割り当てが成功した場合は &lt;code&gt;noError&lt;/code&gt; を返し、それ以外の場合はエラーコードを返します。</target>
        </trans-unit>
        <trans-unit id="a52d30d9d64255b930d9d116fb319458b1376b07" translate="yes" xml:space="preserve">
          <source>These functions sends a signal to the outer space and the caller hopes that someone is listening. In other words, they invoke &lt;code&gt;et:trace_me/4&lt;/code&gt; and &lt;code&gt;et:trace_me/5&lt;/code&gt; respectively.</source>
          <target state="translated">これらの関数は信号を宇宙空間に送信し、発信者は誰かが聞いていることを望みます。つまり、 &lt;code&gt;et:trace_me/4&lt;/code&gt; と &lt;code&gt;et:trace_me/5&lt;/code&gt; をそれぞれ呼び出します。</target>
        </trans-unit>
        <trans-unit id="7c5096edbc3525bc8e760ed1084c3016bcbfb9a7" translate="yes" xml:space="preserve">
          <source>These have the same meanings as the normal returns but the characters in &lt;code&gt;PushBackList&lt;/code&gt; will be prepended to the input characters and scanned for the next token. Note that pushing back a newline will mean the line numbering will no longer be correct.</source>
          <target state="translated">これらは通常の戻りと同じ意味ですが、 &lt;code&gt;PushBackList&lt;/code&gt; の文字は入力文字の前に付加され、次のトークンをスキャンします。改行を戻すと、行番号が正しくなくなります。</target>
        </trans-unit>
        <trans-unit id="28abed6097a4fa5f0db1c6ca4ce80910586cfeeb" translate="yes" xml:space="preserve">
          <source>These heuristics are also used by &lt;code&gt;io:format/2&lt;/code&gt;, &lt;code&gt;io_lib:format/2&lt;/code&gt;, and friends when modifier &lt;code&gt;t&lt;/code&gt; is used with &lt;code&gt;~p&lt;/code&gt; or &lt;code&gt;~P&lt;/code&gt;:</source>
          <target state="translated">これらの経験則もによって使用されている &lt;code&gt;io:format/2&lt;/code&gt; 、 &lt;code&gt;io_lib:format/2&lt;/code&gt; 、および修飾友人 &lt;code&gt;t&lt;/code&gt; 一緒に使用される &lt;code&gt;~p&lt;/code&gt; や &lt;code&gt;~P&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="216fd64a35c1d2baaf5b3f037d998a945eb81f1e" translate="yes" xml:space="preserve">
          <source>These host entries are searched after all added with &lt;code&gt;{file, hosts, File}&lt;/code&gt; above or &lt;code&gt;{host, IP, Aliases}&lt;/code&gt; below when lookup option &lt;code&gt;file&lt;/code&gt; is used.</source>
          <target state="translated">これらのホストエントリは、ルックアップオプション &lt;code&gt;file&lt;/code&gt; が使用されている場合 &lt;code&gt;{host, IP, Aliases}&lt;/code&gt; 上記の &lt;code&gt;{file, hosts, File}&lt;/code&gt; または下の{host、IP、Aliases}をすべて追加した後に検索されます。</target>
        </trans-unit>
        <trans-unit id="07700975c4ec0500ef74d72b43eae1d34a325990" translate="yes" xml:space="preserve">
          <source>These instructions apply for both 32-bit and 64-bit Windows. Note that even if you build a 64-bit version of Erlang, most of the directories and files involved are still named win32. Some occurances of the name win64 are however present. The installation file for a 64-bit Windows version of Erlang, for example, is &lt;code&gt;otp_win64_21.exe&lt;/code&gt;.</source>
          <target state="translated">これらの手順は、32ビットと64ビットの両方のWindowsに適用されます。64ビットバージョンのErlangをビルドした場合でも、関係するディレクトリとファイルのほとんどは依然としてwin32という名前です。ただし、win64という名前のいくつかの出現が存在します。たとえば、64ビットWindowsバージョンのErlangのインストールファイルは &lt;code&gt;otp_win64_21.exe&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c394330d6ef054d071d8f890cc4c3711a8bdc95c" translate="yes" xml:space="preserve">
          <source>These interfaces are intended to be used when it is considered an error that ports are open to a driver that no &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; has loaded. The ports that are still open when the last &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;unload_driver/1&lt;/code&gt; or when the last process having the driver loaded dies, are killed with reason &lt;code&gt;driver_unloaded&lt;/code&gt;.</source>
          <target state="translated">これらのインターフェイスは、 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; がロードしていないドライバーに対してポートが開いているというエラーが発生した場合に使用することを目的としています。最後の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;unload_driver/1&lt;/code&gt; を呼び出したとき、またはドライバーをロードした最後のプロセスが終了したときにまだ開いているポートは、理由 &lt;code&gt;driver_unloaded&lt;/code&gt; で強制終了されます。</target>
        </trans-unit>
        <trans-unit id="976444f76eef13967574c5a3e92db1199465ca38" translate="yes" xml:space="preserve">
          <source>These options are actually specific to the used module. The ones shown here are applicable to the default &lt;code&gt;agent_net_if_filter_module()&lt;/code&gt;.</source>
          <target state="translated">これらのオプションは、実際には使用されているモジュールに固有です。ここに示すものは、デフォルトの &lt;code&gt;agent_net_if_filter_module()&lt;/code&gt; に適用されます。</target>
        </trans-unit>
        <trans-unit id="79c5c84c302204b5ad2412f8768bea313cd0255d" translate="yes" xml:space="preserve">
          <source>These options are actually specific to the used module. The ones shown here are applicable to the default &lt;code&gt;agent_net_if_module()&lt;/code&gt;.</source>
          <target state="translated">これらのオプションは、実際には使用されているモジュールに固有です。ここに示されているものは、デフォルトの &lt;code&gt;agent_net_if_module()&lt;/code&gt; に適用されます。</target>
        </trans-unit>
        <trans-unit id="dc7fa27f4823b4c40fb38224a9f2c44f5dc1ff3d" translate="yes" xml:space="preserve">
          <source>These options are actually specific to the used module. The ones shown here are applicable to the default &lt;code&gt;manager_net_if_filter_module()&lt;/code&gt;.</source>
          <target state="translated">これらのオプションは、実際には使用されているモジュールに固有です。ここに示すものは、デフォルトの &lt;code&gt;manager_net_if_filter_module()&lt;/code&gt; に適用されます。</target>
        </trans-unit>
        <trans-unit id="05b3a993da19e30da69e0542004935e23fe64b41" translate="yes" xml:space="preserve">
          <source>These options are actually specific to the used module. The ones shown here are applicable to the default &lt;code&gt;manager_net_if_module()&lt;/code&gt;.</source>
          <target state="translated">これらのオプションは、実際には使用されているモジュールに固有です。ここに示すものは、デフォルトの &lt;code&gt;manager_net_if_module()&lt;/code&gt; に適用されます。</target>
        </trans-unit>
        <trans-unit id="f52e46ef3067f96590cea6bfd8ffc4461c4cb9d7" translate="yes" xml:space="preserve">
          <source>These options are available when starting the name server. The name server is normally started automatically by command &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt; (if not already available), but it can also be started at system startup.</source>
          <target state="translated">これらのオプションは、ネームサーバーの起動時に使用できます。ネームサーバーは通常、コマンド &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt; （まだ利用可能でない場合）によって自動的に起動されますが、システムの起動時にも起動できます。</target>
        </trans-unit>
        <trans-unit id="60feb775a5a2a0fc8f58b8ddfb26ab5e82088613" translate="yes" xml:space="preserve">
          <source>These options are described in &lt;code&gt;&lt;a href=&quot;#zip_options&quot;&gt;create/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらのオプションについては、 &lt;code&gt;&lt;a href=&quot;#zip_options&quot;&gt;create/3&lt;/a&gt;&lt;/code&gt; で説明しています。</target>
        </trans-unit>
        <trans-unit id="e6e76727821c709b0e581bace27e5e3b9ee3793f" translate="yes" xml:space="preserve">
          <source>These options are only for debugging and testing &lt;code&gt;epmd&lt;/code&gt; clients. They are not to be used in normal operation.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;epmd&lt;/code&gt; クライアントのデバッグとテスト専用です。通常の操作では使用しません。</target>
        </trans-unit>
        <trans-unit id="3184ea6ec742a62558f1e2dbf393dc6981719dd9" translate="yes" xml:space="preserve">
          <source>These options are preset by the &lt;code&gt;rename&lt;/code&gt; function and cannot be overridden by the user.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;rename&lt;/code&gt; 機能によって事前設定されており、ユーザーが上書きすることはできません。</target>
        </trans-unit>
        <trans-unit id="7d74113369f61132f3b23365e982841353df0d4a" translate="yes" xml:space="preserve">
          <source>These options make &lt;code&gt;epmd&lt;/code&gt; run as an interactive command, displaying the results of sending queries to an already running instance of &lt;code&gt;epmd&lt;/code&gt;. The &lt;code&gt;epmd&lt;/code&gt; contacted is always on the local node, but option &lt;code&gt;-port&lt;/code&gt; can be used to select between instances if several are running using different ports on the host.</source>
          <target state="translated">これらのオプションにより、 &lt;code&gt;epmd&lt;/code&gt; が対話型コマンドとして実行され、すでに実行中の &lt;code&gt;epmd&lt;/code&gt; のインスタンスにクエリを送信した結果が表示されます。 &lt;code&gt;epmd&lt;/code&gt; 連絡は、ローカル・ノード上で常にですが、オプション &lt;code&gt;-port&lt;/code&gt; は、ホスト上の別のポートを使用して実行しているいくつかの場合にはインスタンス間で選択するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="e10be32239987c6f4a5a6c8dce5e7fc454e9dfca" translate="yes" xml:space="preserve">
          <source>These override the default and the options specified to &lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile/2&lt;/a&gt;&lt;/code&gt;. For example, the following pattern changes the convention to CR:</source>
          <target state="translated">これらは &lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile/2&lt;/a&gt;&lt;/code&gt; に指定されたデフォルトとオプションを上書きします。たとえば、次のパターンは規則をCRに変更します。</target>
        </trans-unit>
        <trans-unit id="76493b00ea7c71eb89b79e6053d97efaadb6e80f" translate="yes" xml:space="preserve">
          <source>These override the default and the options specified to the compiling function, but they can themselves be overridden by options specified to a matching function. Notice that these special settings, which are not Perl-compatible, are recognized only at the very start of a pattern, and that they must be in upper case. If more than one of them is present, the last one is used. They can be combined with a change of newline convention; for example, a pattern can start with:</source>
          <target state="translated">これらはデフォルトとコンパイル関数に指定されたオプションを上書きしますが、それ自体は一致する関数に指定されたオプションで上書きすることができます。Perlと互換性のないこれらの特別な設定は、パターンの最初にのみ認識され、大文字でなければならないことに注意してください。複数存在する場合は、最後のものが使用されます。これらは改行の規則を変更することで組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="7c8826c9e11e1f3d846a339b100ceac99eba779d" translate="yes" xml:space="preserve">
          <source>These packet types only have effect on receiving. When sending a packet, it is the responsibility of the application to supply a correct header. On receiving, however, one message is sent to the controlling process for each complete packet received, and, similarly, each call to &lt;code&gt;gen_tcp:recv/2,3&lt;/code&gt; returns one complete packet. The header is &lt;strong&gt;not&lt;/strong&gt; stripped off.</source>
          <target state="translated">これらのパケットタイプは、受信にのみ影響します。パケットを送信するとき、正しいヘッダーを提供するのはアプリケーションの責任です。ただし、受信すると、受信した完全なパケットごとに1つのメッセージが制御プロセスに送信され、同様に、 &lt;code&gt;gen_tcp:recv/2,3&lt;/code&gt; を呼び出すたびに1つの完全なパケットが返されます。ヘッダーは取り除かれ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="703061c1f2854688bcb586643b95905fd657c226" translate="yes" xml:space="preserve">
          <source>These parameters can be modified by the user with the following configuration term:</source>
          <target state="translated">これらのパラメータは、以下の設定項でユーザが変更することができます。</target>
        </trans-unit>
        <trans-unit id="019f3eb722d3988d7298c6a669ca65df0fbbaa93" translate="yes" xml:space="preserve">
          <source>These questions are not always trivial to answer. Some benchmarks might be needed to back up your theory and to avoid making things slower if your theory is wrong. For details, see &lt;code&gt;&lt;a href=&quot;#benchmark&quot;&gt;Benchmarking&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらの質問に答えることは常に簡単ではありません。理論をバックアップし、理論が間違っている場合に処理が遅くなるのを防ぐために、いくつかのベンチマークが必要になる場合があります。詳細については、「 &lt;code&gt;&lt;a href=&quot;#benchmark&quot;&gt;Benchmarking&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="764b3f2b692c282ad0bd05c88a3b6913fb526534" translate="yes" xml:space="preserve">
          <source>These record definitions use the &quot;new&quot; spelling 'adaptation', not the deprecated 'adaption', regardless of which spelling the underlying C API uses.</source>
          <target state="translated">これらのレコード定義では、基礎となるC APIがどのスペルを使用しているかに関わらず、非推奨の'adaptation'ではなく、&quot;新しい &quot;スペルの'adaptation'を使用します。</target>
        </trans-unit>
        <trans-unit id="dc5ac270ae2ee1136906b421f96b332ee47c42ac" translate="yes" xml:space="preserve">
          <source>These relations are interpreted as follows: if we are in state &lt;code&gt;S&lt;/code&gt; and event &lt;code&gt;E&lt;/code&gt; occurs, we are to perform actions &lt;code&gt;A&lt;/code&gt; and make a transition to state &lt;code&gt;S'&lt;/code&gt;. Notice that &lt;code&gt;S'&lt;/code&gt; can be equal to &lt;code&gt;S&lt;/code&gt; and that &lt;code&gt;A&lt;/code&gt; can be empty.</source>
          <target state="translated">これらの関係は次のように解釈されます。状態 &lt;code&gt;S&lt;/code&gt; でイベント &lt;code&gt;E&lt;/code&gt; が発生した場合、アクション &lt;code&gt;A&lt;/code&gt; を実行して状態 &lt;code&gt;S'&lt;/code&gt; 遷移します。ことに注意してください &lt;code&gt;S'&lt;/code&gt; 等しくすることができ &lt;code&gt;S&lt;/code&gt; およびその &lt;code&gt;A&lt;/code&gt; を空にすることができます。</target>
        </trans-unit>
        <trans-unit id="663a0dde4969fddd76e6f124e908bc76a6818654" translate="yes" xml:space="preserve">
          <source>These services are controlled through the process &lt;code&gt;global_name_server&lt;/code&gt; that exists on every node. The global name server starts automatically when a node is started. With the term &lt;strong&gt;global&lt;/strong&gt; is meant over a system consisting of many Erlang nodes.</source>
          <target state="translated">これらのサービスは、すべてのノードに存在するプロセス &lt;code&gt;global_name_server&lt;/code&gt; を通じて制御されます。グローバルネームサーバーは、ノードの起動時に自動的に起動します。&lt;strong&gt;グローバル&lt;/strong&gt;という用語は、多くのErlangノードで構成されるシステムを意味します。</target>
        </trans-unit>
        <trans-unit id="18b3db7ac68ef66e01ea9e3110a4d7998bc037fb" translate="yes" xml:space="preserve">
          <source>These state transition actions can be invoked by returning them from the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; when it is called with an &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event&lt;/a&gt;&lt;/code&gt;, from &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; or by giving them to &lt;code&gt;&lt;a href=&quot;#enter_loop-5&quot;&gt;enter_loop/5,6&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらの状態遷移アクションは、 &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event&lt;/a&gt;&lt;/code&gt; で呼び出されたときにそれらを &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; から返すか、 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; から、または &lt;code&gt;&lt;a href=&quot;#enter_loop-5&quot;&gt;enter_loop/5,6&lt;/a&gt;&lt;/code&gt; に渡すことで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="f84a998101580824af52c1efde9742c062b4f3ac" translate="yes" xml:space="preserve">
          <source>These state transition actions can be invoked by returning them from the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;, from &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; or by giving them to &lt;code&gt;&lt;a href=&quot;#enter_loop-5&quot;&gt;enter_loop/5,6&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらの状態遷移アクションは、 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#enter_loop-5&quot;&gt;enter_loop/5,6&lt;/a&gt;&lt;/code&gt; に返すことで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="61a80d0c0fec3872bf24b97867cc3c3fed9d0143" translate="yes" xml:space="preserve">
          <source>These tests cannot (always) be done automatically when cross compiling. You usually do not need to set these variables.</source>
          <target state="translated">これらのテストは、クロスコンパイルの際に(常に)自動的に行うことはできません。通常、これらの変数を設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="2d05ecef6dec2328daa1fa8983fc44a7ac6b969f" translate="yes" xml:space="preserve">
          <source>These three BIFs do conversions that would be difficult (or impossible) to do in Erlang.</source>
          <target state="translated">これら3つのBIFはErlangでは難しい(あるいは不可能な)変換を行います。</target>
        </trans-unit>
        <trans-unit id="9fc1faee4aad725a39321bd959c62d7b61fc838d" translate="yes" xml:space="preserve">
          <source>These three tables, &lt;code&gt;employees&lt;/code&gt;, &lt;code&gt;dept&lt;/code&gt;, and &lt;code&gt;projects&lt;/code&gt;, are made up of real records. The following database content is stored in the tables and is built on relationships. These tables are &lt;code&gt;manager&lt;/code&gt;, &lt;code&gt;at_dep&lt;/code&gt;, and &lt;code&gt;in_proj&lt;/code&gt;.</source>
          <target state="translated">これらの3つのテーブル、 &lt;code&gt;employees&lt;/code&gt; 、 &lt;code&gt;dept&lt;/code&gt; 、 &lt;code&gt;projects&lt;/code&gt; は、実際のレコードで構成されています。次のデータベースの内容はテーブルに格納され、関係に基づいて構築されています。これらのテーブルは、 &lt;code&gt;manager&lt;/code&gt; 、 &lt;code&gt;at_dep&lt;/code&gt; 、および &lt;code&gt;in_proj&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2be4aeb784d73a7483bb30162082ef141d284732" translate="yes" xml:space="preserve">
          <source>These timeout actions sets timeout &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらのタイムアウトアクションは、タイムアウト &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="e1c1c65f29a414599f1da742468bf0977b89b3ea" translate="yes" xml:space="preserve">
          <source>These tuples are strictly monotonically ordered on the current runtime system instance according to creation time. It is important that the monotonic time is in the first element (the most significant element when comparing two-tuples). Using the monotonic time in the tuples, you can calculate time between events.</source>
          <target state="translated">これらのタプルは、作成時刻に応じて現在のランタイムシステムインスタンス上で厳密に単調に順序付けられている。単調時間が最初の要素(2つのタプルを比較する際に最も重要な要素)にあることが重要です。タプル内の単調時間を使用して、イベント間の時間を計算することができます。</target>
        </trans-unit>
        <trans-unit id="d52f80b222da3d294b0f671c73049263b3d9e584" translate="yes" xml:space="preserve">
          <source>These two functions are provided in the standard module &lt;code&gt;lists&lt;/code&gt;. &lt;code&gt;foreach&lt;/code&gt; takes a list and applies a fun to every element in the list. &lt;code&gt;map&lt;/code&gt; creates a new list by applying a fun to every element in a list. Going back to the shell, &lt;code&gt;map&lt;/code&gt; is used and a fun to add 3 to every element of a list:</source>
          <target state="translated">これらの2つの関数は、標準モジュール &lt;code&gt;lists&lt;/code&gt; 提供されます。 &lt;code&gt;foreach&lt;/code&gt; はリストを受け取り、リスト内のすべての要素にfunを適用します。 &lt;code&gt;map&lt;/code&gt; は、リスト内のすべての要素にfunを適用して、新しいリストを作成します。シェルに戻ると、 &lt;code&gt;map&lt;/code&gt; が使用されており、リストのすべての要素に3を追加するのが楽しいです。</target>
        </trans-unit>
        <trans-unit id="4144563beb40dfa20763e7a44f564ed7df7e5fe8" translate="yes" xml:space="preserve">
          <source>These two functions have a similar structure. They both iterate over a list and do something to each element in the list. The &quot;something&quot; is passed on as an extra argument to the function that does this.</source>
          <target state="translated">これら2つの関数は似たような構造をしています。どちらもリストを反復処理し、リスト内の各要素に何かを行います。何か &quot;は、これを行う関数の追加引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="6bf31d937cdb8656e463da3517deb67f3a158915" translate="yes" xml:space="preserve">
          <source>These two functions look up an executable program, with the specified name and a search path, in the same way as the underlying OS. &lt;code&gt;find_executable/1&lt;/code&gt; uses the current execution path (that is, the environment variable &lt;code&gt;PATH&lt;/code&gt; on Unix and Windows).</source>
          <target state="translated">これら2つの関数は、基盤となるOSと同じ方法で、指定された名前と検索パスを使用して実行可能プログラムを検索します。 &lt;code&gt;find_executable/1&lt;/code&gt; は、現在の実行パス（つまり、UNIXおよびWindowsの環境変数 &lt;code&gt;PATH&lt;/code&gt; ）を使用します。</target>
        </trans-unit>
        <trans-unit id="e0d074a20ddd5e5f33562cc40bc5760ad507e2a6" translate="yes" xml:space="preserve">
          <source>These two pieces work in concert. Basically, the &lt;code&gt;Collector&lt;/code&gt; receives &lt;code&gt;Raw Trace Data&lt;/code&gt; and processes it into &lt;code&gt;Events&lt;/code&gt; in a &lt;code&gt;et&lt;/code&gt; specific format (defined in &lt;code&gt;et/include/et.hrl&lt;/code&gt;). The &lt;code&gt;Viewer&lt;/code&gt; interrogates the &lt;code&gt;Collector&lt;/code&gt; and displays an interactive representation of the data.</source>
          <target state="translated">これら2つのピースは協調して機能します。基本的に、 &lt;code&gt;Collector&lt;/code&gt; は &lt;code&gt;Raw Trace Data&lt;/code&gt; を受け取り、それを &lt;code&gt;et&lt;/code&gt; 固有の形式（ &lt;code&gt;et/include/et.hrl&lt;/code&gt; で定義）で &lt;code&gt;Events&lt;/code&gt; に処理します。 &lt;code&gt;Viewer&lt;/code&gt; は問い合わせ &lt;code&gt;Collector&lt;/code&gt; をし、データのインタラクティブな表現を表示します。</target>
        </trans-unit>
        <trans-unit id="dda87b11f0a5cbea6a2795c81d6b6e5706e62c96" translate="yes" xml:space="preserve">
          <source>These two types are often not needed, as the socket automatically switches from &lt;code&gt;http&lt;/code&gt;/&lt;code&gt;http_bin&lt;/code&gt; to &lt;code&gt;httph&lt;/code&gt;/&lt;code&gt;httph_bin&lt;/code&gt; internally after the first line is read. However, there can be occasions when they are useful, such as parsing trailers from chunked encoding.</source>
          <target state="translated">最初の行が読み取られた後、 &lt;code&gt;httph_bin&lt;/code&gt; 内部で自動的に &lt;code&gt;http&lt;/code&gt; / &lt;code&gt;http_bin&lt;/code&gt; から &lt;code&gt;httph&lt;/code&gt; / httph_binに切り替わるため、これら2つのタイプは多くの場合必要ありません。ただし、チャンクエンコーディングからのトレーラーの解析など、役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="1c70e7bfedf23869960675efaf18a91ce706b0d2" translate="yes" xml:space="preserve">
          <source>These values can be used to determine order between events on the runtime system instance. That is, if both &lt;code&gt;X = erlang:unique_integer([monotonic])&lt;/code&gt; and &lt;code&gt;Y = erlang:unique_integer([monotonic])&lt;/code&gt; are executed by different processes (or the same process) on the same runtime system instance and &lt;code&gt;X &amp;lt; Y&lt;/code&gt;, we know that &lt;code&gt;X&lt;/code&gt; was created before &lt;code&gt;Y&lt;/code&gt;.</source>
          <target state="translated">これらの値を使用して、ランタイムシステムインスタンスのイベント間の順序を決定できます。つまり、 &lt;code&gt;X = erlang:unique_integer([monotonic])&lt;/code&gt; と &lt;code&gt;Y = erlang:unique_integer([monotonic])&lt;/code&gt; 両方が同じランタイムシステムインスタンスと &lt;code&gt;X &amp;lt; Y&lt;/code&gt; で異なるプロセス（または同じプロセス）によって実行される場合、その &lt;code&gt;X&lt;/code&gt; が前に作成された &lt;code&gt;Y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64037abeafa784d21870f15a8f477ebe7f35dde2" translate="yes" xml:space="preserve">
          <source>These variables currently have &lt;strong&gt;no&lt;/strong&gt; effect if you configure using the &lt;code&gt;configure&lt;/code&gt; script directly.</source>
          <target state="translated">これらの変数は、現在、 &lt;code&gt;configure&lt;/code&gt; スクリプトを直接使用して構成している場合に&lt;strong&gt;は&lt;/strong&gt;効果があり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e4eeacbbfedd76f9009cc450f49274f9b8f50cf0" translate="yes" xml:space="preserve">
          <source>These verbs differ in exactly what kind of failure occurs when backtracking reaches them. The behavior described below is what occurs when the verb is not in a subroutine or an assertion. Subsequent sections cover these special cases.</source>
          <target state="translated">これらの動詞は、バックトラックが到達したときにどのような失敗が起こるかという点で正確に異なります。以下で説明する動作は、動詞がサブルーチンやアサーションの中にない場合に起こるものです。以降のセクションでは、これらの特殊なケースについて説明します。</target>
        </trans-unit>
        <trans-unit id="bcb7ed1357b82ff56473fd5066848225a0c020e2" translate="yes" xml:space="preserve">
          <source>They can also be combined with the (*UTF8), (*UTF), or (*UCP) special sequences. Inside a character class, \R is treated as an unrecognized escape sequence, and so matches the letter &quot;R&quot; by default.</source>
          <target state="translated">また、(*UTF8),(*UTF),(*UCP)の特殊シーケンスと組み合わせることもできる。文字クラス内では、認識されないエスケープシーケンスとして扱われるため、デフォルトでは文字 &quot;R &quot;にマッチする。</target>
        </trans-unit>
        <trans-unit id="4f19fb9eb943279dbf1aab1f1a7e9449243b24c1" translate="yes" xml:space="preserve">
          <source>They can then be used in either of the following ways:</source>
          <target state="translated">その後、以下のいずれかの方法で使用することができます。</target>
        </trans-unit>
        <trans-unit id="f10af1c6b334490e5b1459d0c8bfcff29264cd5a" translate="yes" xml:space="preserve">
          <source>Thin space</source>
          <target state="translated">薄い空間</target>
        </trans-unit>
        <trans-unit id="6196f53beeed99bac9dd3ff39c523037e81c3134" translate="yes" xml:space="preserve">
          <source>Think twice before using this function. If you still need to use it, always &lt;code&gt;call os:type()&lt;/code&gt; first.</source>
          <target state="translated">この関数を使用する前によく考えてください。それでも使用する必要がある場合は、常に最初に &lt;code&gt;call os:type()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ea8743046d2b98d1556841772481beb6c8b7be7" translate="yes" xml:space="preserve">
          <source>Think twice before using this function. Use module &lt;code&gt;filename&lt;/code&gt; if you want to inspect or build filenames in a portable way. Avoid matching on atom &lt;code&gt;Osname&lt;/code&gt;.</source>
          <target state="translated">この関数を使用する前によく考えてください。ポータブルな方法でファイル名を検査または構築する場合は、モジュール &lt;code&gt;filename&lt;/code&gt; 使用します。アトム &lt;code&gt;Osname&lt;/code&gt; でのマッチングは避けてください。</target>
        </trans-unit>
        <trans-unit id="d592d2f7893043a1b846652e39ab1418e618bc4e" translate="yes" xml:space="preserve">
          <source>This (most common) scenario simply supports that each &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of the driver loads it when needed and unloads it when no longer needed. The driver is always reference counted and as long as a process keeping the driver loaded is still alive, the driver is present in the system.</source>
          <target state="translated">この（最も一般的な）シナリオは、ドライバーの各 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; が必要なときにそれをロードし、不要になったときにそれをアンロードすることを単純にサポートします。ドライバーは常に参照カウントされ、ドライバーのロードを維持するプロセスがまだ存続している限り、ドライバーはシステムに存在します。</target>
        </trans-unit>
        <trans-unit id="cb6a47e588a181452c326fa39e3e06a8bbaf215e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;at_dep&lt;/code&gt; record has the Erlang tuple representation &lt;code&gt;{at_dep, klacke, 'B/SFR'}&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;at_dep&lt;/code&gt; レコードには、Erlangタプル表現 &lt;code&gt;{at_dep, klacke, 'B/SFR'}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="1bb50969a4322693220f1622878a187ec8ef7865" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;employee&lt;/code&gt; record has the Erlang record/tuple representation &lt;code&gt;{employee, 104732, klacke, 7, male, 98108, {221, 015}}&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;employee&lt;/code&gt; レコードには、Erlangレコード/タプル表現 &lt;code&gt;{employee, 104732, klacke, 7, male, 98108, {221, 015}}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="a6f78a7a573f4788a961abb21d13018ab8263739" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;in_proj&lt;/code&gt; record has the Erlang tuple representation &lt;code&gt;{in_proj, klacke, 'Erlang', klacke, 'otp', klacke, 'mnesia'}&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;in_proj&lt;/code&gt; レコードには、Erlangタプル表現 &lt;code&gt;{in_proj, klacke, 'Erlang', klacke, 'otp', klacke, 'mnesia'}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="30eaf1b61fcff886440404502320b8087244781b" translate="yes" xml:space="preserve">
          <source>This &lt;strong&gt;Implementation Example&lt;/strong&gt; section describes how a simple manager can be implemented with the SNMP Development Toolkit.</source>
          <target state="translated">この&lt;strong&gt;実装例の&lt;/strong&gt;セクションでは、SNMP開発ツールキットを使用して単純なマネージャーを実装する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="ffdeda27af47f2d41561b45e8678ebc080646b29" translate="yes" xml:space="preserve">
          <source>This &lt;strong&gt;Implementation Example&lt;/strong&gt; section describes how an MIB can be implemented with the SNMP Development Toolkit.</source>
          <target state="translated">この&lt;strong&gt;実装例の&lt;/strong&gt;セクションでは、SNMP開発ツールキットを使用してMIBを実装する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="f8285515d6a8ffd60d079855281d19dbb335db5a" translate="yes" xml:space="preserve">
          <source>This BIF can be removed in a future version of the Beam machine without prior warning. It is unlikely to be implemented in other Erlang implementations.</source>
          <target state="translated">このBIFは将来のバージョンのBeam machineでは予告なしに削除される可能性があります。他のErlangの実装では実装されていないでしょう。</target>
        </trans-unit>
        <trans-unit id="d2c9f52ffa82790c5add5ce609c3b465fa6b5f87" translate="yes" xml:space="preserve">
          <source>This BIF is always to be used for hashing terms. It distributes small integers better than &lt;code&gt;phash/2&lt;/code&gt;, and it is faster for bignums and binaries.</source>
          <target state="translated">このBIFは、常にハッシュ用語に使用されます。 &lt;code&gt;phash/2&lt;/code&gt; よりも小さい整数をよりよく分散し、bignumおよびバイナリの場合は高速です。</target>
        </trans-unit>
        <trans-unit id="ca02fa554a6262c386a3db4a859b0b9b57b609dd" translate="yes" xml:space="preserve">
          <source>This BIF is documented for completeness. Usually &lt;code&gt;is_record/2&lt;/code&gt; is to be used.</source>
          <target state="translated">このBIFは完全を期すために文書化されています。通常 &lt;code&gt;is_record/2&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="e919cc7df793008049931bcf01d09ffb06683260" translate="yes" xml:space="preserve">
          <source>This BIF is intended for &lt;strong&gt;debugging only&lt;/strong&gt;. For all other purposes, use &lt;code&gt;&lt;a href=&quot;#process_info-2&quot;&gt;process_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このBIFは&lt;strong&gt;デバッグ専用&lt;/strong&gt;です。他のすべての目的には、 &lt;code&gt;&lt;a href=&quot;#process_info-2&quot;&gt;process_info/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b16cda9185776fda7cf953473f68ed8eae22005c" translate="yes" xml:space="preserve">
          <source>This BIF is intended for debugging and is not to be used in application programs.</source>
          <target state="translated">このBIFはデバッグ用であり、アプリケーションプログラムでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="3a485a9d729fff78ad515ca89ab62a61dc168854" translate="yes" xml:space="preserve">
          <source>This BIF is intended for debugging only.</source>
          <target state="translated">このBIFはデバッグ専用です。</target>
        </trans-unit>
        <trans-unit id="33eab8a0dcb284396b1bdbf0824f52f98a707748" translate="yes" xml:space="preserve">
          <source>This BIF is intended for the code server (see &lt;code&gt;code(3)&lt;/code&gt;) and is not to be used elsewhere.</source>
          <target state="translated">このBIFはコードサーバー（ &lt;code&gt;code(3)&lt;/code&gt; を参照）を対象としており、他の場所では使用されません。</target>
        </trans-unit>
        <trans-unit id="bbc3f97203615ffb6be54801dfb7bad70393f210" translate="yes" xml:space="preserve">
          <source>This BIF is mainly intended for debugging, but it can sometimes be useful in library functions that need to verify, for example, the arity of a fun.</source>
          <target state="translated">このBIFは主にデバッグ用ですが、例えばfunのアリティなどを検証する必要があるライブラリ関数で有用な場合もあります。</target>
        </trans-unit>
        <trans-unit id="ed42f39086e8ec9c7b1c29cd5a589cf6f72ca9ff" translate="yes" xml:space="preserve">
          <source>This BIF is useful for builders of cross-reference tools.</source>
          <target state="translated">このBIFは、相互参照ツールを構築する際に便利です。</target>
        </trans-unit>
        <trans-unit id="c6cc75865613bc58e0eb7ecb4f457c6d233e733d" translate="yes" xml:space="preserve">
          <source>This DNS client can resolve DNS records even if it is not used for normal name resolving in the node.</source>
          <target state="translated">このDNSクライアントは、ノード内の通常の名前解決に使用されていなくても、DNSレコードを解決することができます。</target>
        </trans-unit>
        <trans-unit id="babe61c293ec427280b1edacc01c731077dee4c0" translate="yes" xml:space="preserve">
          <source>This Efficiency Guide cannot really teach you how to write efficient code. It can give you a few pointers about what to avoid and what to use, and some understanding of how certain language features are implemented. This guide does not include general tips about optimization that works in any language, such as moving common calculations out of loops.</source>
          <target state="translated">この効率化ガイドは、効率的なコードの書き方を教えるものではありません。何を避けて何を使うべきか、また特定の言語の機能がどのように実装されているかを理解するためのいくつかのヒントを与えることはできます。このガイドには、一般的な計算をループの外に移動させるなど、どの言語でも機能する最適化に関する一般的なヒントは含まれていません。</target>
        </trans-unit>
        <trans-unit id="ae1ff29eb10c59731ea6c65a3606a80e84b3335c" translate="yes" xml:space="preserve">
          <source>This Erlang/OTP application supplies a framework for building applications that needs to utilize the Megaco/H.248 protocol.</source>
          <target state="translated">このErlang/OTPアプリケーションは、Megaco/H.248プロトコルを利用する必要のあるアプリケーションを構築するためのフレームワークを提供します。</target>
        </trans-unit>
        <trans-unit id="b18f63f410f90b5069c9dc2f1ae77d811c62158c" translate="yes" xml:space="preserve">
          <source>This MIB is not loaded by default.</source>
          <target state="translated">このMIBはデフォルトではロードされません。</target>
        </trans-unit>
        <trans-unit id="a407b3d8ce92982dd769f80205472707dd33acd9" translate="yes" xml:space="preserve">
          <source>This MIB is now loaded into the agent, and a manager can ask questions. As an example of this, we start another Erlang system and the simple Erlang manager in the toolkit:</source>
          <target state="translated">このMIBがエージェントにロードされ、マネージャが質問できるようになりました。その例として、別のErlangシステムと、ツールキットの中の簡単なErlangマネージャを起動してみます。</target>
        </trans-unit>
        <trans-unit id="8bee977533f2540fecf48c418b1e1c4b1c9441e8" translate="yes" xml:space="preserve">
          <source>This PCRE pattern solves the nested parentheses problem (assume that option &lt;code&gt;extended&lt;/code&gt; is set so that whitespace is ignored):</source>
          <target state="translated">このPCREパターンは、ネストされた括弧の問題を解決します（空白が無視されるように &lt;code&gt;extended&lt;/code&gt; オプションが設定されていると想定しています）。</target>
        </trans-unit>
        <trans-unit id="ba3b1c781a2b003455c5f276cc7adab4167d61a9" translate="yes" xml:space="preserve">
          <source>This Reference Manual describes the Mnesia API. This includes functions that define and manipulate Mnesia tables.</source>
          <target state="translated">このリファレンスマニュアルでは、Mnesia APIについて説明します。これには、Mnesiaテーブルを定義して操作する関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="5a1ea321f8ef4337012dd060505384a468b6d8b6" translate="yes" xml:space="preserve">
          <source>This Reference Manual uses a table of persons to illustrate various examples. The following record definition is assumed:</source>
          <target state="translated">このリファレンスマニュアルでは、人名表を用いて様々な例を説明しています。以下のような記録定義を想定しています。</target>
        </trans-unit>
        <trans-unit id="eba208a5a64a9fe2d23e89684b28919d090b1bf5" translate="yes" xml:space="preserve">
          <source>This User's Guide describes how to build Mnesia database applications, and how to integrate and use the Mnesia database management system with OTP. Programming constructs are described, and numerous programming examples are included to illustrate the use of Mnesia.</source>
          <target state="translated">このユーザーズガイドでは、Mnesiaデータベースアプリケーションの構築方法、およびMnesiaデータベース管理システムとOTPの統合と使用方法について説明します。プログラミングの構成が説明されており、Mnesiaの使用方法を説明するために多くのプログラミング例が含まれています。</target>
        </trans-unit>
        <trans-unit id="d7c2e051140679b5fabfd3850166d5e44acd182d" translate="yes" xml:space="preserve">
          <source>This User's Guide is organized as follows:</source>
          <target state="translated">このユーザーズガイドは以下のように構成されています。</target>
        </trans-unit>
        <trans-unit id="6e07c970a29206fa6177bb430aa23651cee332f1" translate="yes" xml:space="preserve">
          <source>This access functions example shows how &lt;code&gt;&lt;a href=&quot;#lookup-3&quot;&gt;lookup/3&lt;/a&gt;&lt;/code&gt; can be implemented using &lt;code&gt;&lt;a href=&quot;#resolve-3&quot;&gt;resolve/3&lt;/a&gt;&lt;/code&gt; from outside the module:</source>
          <target state="translated">このアクセス関数の例は、モジュールの外部から &lt;code&gt;&lt;a href=&quot;#resolve-3&quot;&gt;resolve/3&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;#lookup-3&quot;&gt;lookup/3&lt;/a&gt;&lt;/code&gt; を実装する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e453611cc830c0fe9b4a7d78e62c5d3c550a27db" translate="yes" xml:space="preserve">
          <source>This acquires a lock of type &lt;code&gt;LockKind&lt;/code&gt; on the entire table &lt;code&gt;Tab&lt;/code&gt;.</source>
          <target state="translated">これにより、テーブル &lt;code&gt;Tab&lt;/code&gt; 全体で &lt;code&gt;LockKind&lt;/code&gt; タイプのロックが取得されます。</target>
        </trans-unit>
        <trans-unit id="f91dd38ac67f0332e475b1b711e06f95a62ba56f" translate="yes" xml:space="preserve">
          <source>This acquires a lock of type &lt;code&gt;LockKind&lt;/code&gt; on the global resource &lt;code&gt;GlobalKey&lt;/code&gt;. The lock is acquired on all active nodes in the &lt;code&gt;Nodes&lt;/code&gt; list.</source>
          <target state="translated">これにより、グローバルリソース &lt;code&gt;GlobalKey&lt;/code&gt; のタイプ &lt;code&gt;LockKind&lt;/code&gt; のロックが取得されます。ロックは、 &lt;code&gt;Nodes&lt;/code&gt; リスト内のすべてのアクティブノードで取得されます。</target>
        </trans-unit>
        <trans-unit id="52b66d36db3f8d918f682c24c470f8a1a0d1add9" translate="yes" xml:space="preserve">
          <source>This action does not set any &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt; but instead stores the specified &lt;code&gt;EventType&lt;/code&gt; and &lt;code&gt;EventContent&lt;/code&gt; for insertion after all actions have been executed.</source>
          <target state="translated">このアクションでは、 &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt; は設定されませんが、すべてのアクションが実行された後に、指定された &lt;code&gt;EventType&lt;/code&gt; および &lt;code&gt;EventContent&lt;/code&gt; を挿入用に格納します。</target>
        </trans-unit>
        <trans-unit id="49d5b8cf3248f457c3e4fd7bf845d80256d7c600" translate="yes" xml:space="preserve">
          <source>This actually is a simulation of the process &lt;code&gt;Events&lt;/code&gt; caused by a &lt;code&gt;Mnesia&lt;/code&gt; transaction that writes a record in a local table:</source>
          <target state="translated">これは、実際には、ローカルテーブルにレコードを書き込む &lt;code&gt;Mnesia&lt;/code&gt; トランザクションによって発生するプロセス &lt;code&gt;Events&lt;/code&gt; シミュレーションです。</target>
        </trans-unit>
        <trans-unit id="dbd8d5b06b09c15de60879a1a8a9947df8335726" translate="yes" xml:space="preserve">
          <source>This address family only works on Unix-like systems.</source>
          <target state="translated">このアドレスファミリはUnixライクなシステムでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="63d593ef2ab6f3e8b14006b9f741f5c521ea7089" translate="yes" xml:space="preserve">
          <source>This affects the access logs written by &lt;code&gt;mod_log&lt;/code&gt; and &lt;code&gt;mod_disk_log&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;mod_log&lt;/code&gt; および &lt;code&gt;mod_disk_log&lt;/code&gt; によって書き込まれたアクセスログに影響します。</target>
        </trans-unit>
        <trans-unit id="2fd1765db5e4a1421a5a77cd061597e64ef02887" translate="yes" xml:space="preserve">
          <source>This affects the error logs written by &lt;code&gt;mod_log&lt;/code&gt; and &lt;code&gt;mod_disk_log&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;mod_log&lt;/code&gt; および &lt;code&gt;mod_disk_log&lt;/code&gt; によって書き込まれたエラーログに影響します。</target>
        </trans-unit>
        <trans-unit id="bbd6bb60897f850ec49a0aac99503d287bd1842d" translate="yes" xml:space="preserve">
          <source>This allows info events to pass through to the default handler, and be printed to the terminal as well. If there are many info events, it can be useful to print these to a file instead.</source>
          <target state="translated">これにより、情報イベントがデフォルトのハンドラに渡され、ターミナルにも印刷されるようになります。多くの情報イベントがある場合は、代わりにファイルに出力するのが便利です。</target>
        </trans-unit>
        <trans-unit id="23e19f7d8ad7331e73f9393236fe1782f10bda23" translate="yes" xml:space="preserve">
          <source>This also causes characters between an unescaped # outside a character class and the next newline, inclusive, to be ignored. This is equivalent to Perl's &lt;code&gt;/x&lt;/code&gt; option, and it can be changed within a pattern by a &lt;code&gt;(?x)&lt;/code&gt; option setting.</source>
          <target state="translated">これにより、文字クラス外のエスケープされていない＃と次の改行を含む間の文字も無視されます。これはPerlの &lt;code&gt;/x&lt;/code&gt; オプションと同等であり、 &lt;code&gt;(?x)&lt;/code&gt; オプション設定によってパターン内で変更できます。</target>
        </trans-unit>
        <trans-unit id="58f3cb66f380a5c19ef8ab400cfe6287edaa6dfa" translate="yes" xml:space="preserve">
          <source>This also means that if a user implement their own transport service then it has to maintain its own statistics.</source>
          <target state="translated">これはまた、ユーザーが独自のトランスポートサービスを実装する場合、それはそれ自身の統計を 維持しなければならないことを意味する。</target>
        </trans-unit>
        <trans-unit id="c7dd22038e1768c05bfb1a8b06817075c1c09560" translate="yes" xml:space="preserve">
          <source>This appendix describes the conversion of SNMPv2 to SNMPv1 error messages. The instrumentation functions should return v2 error messages.</source>
          <target state="translated">この付録では、SNMPv2からSNMPv1エラーメッセージへの変換について説明します。計装機能はv2エラーメッセージを返すべきです。</target>
        </trans-unit>
        <trans-unit id="87860fce150658815e0dd8f84b7b2d2085183f77" translate="yes" xml:space="preserve">
          <source>This application covers all features of ASN.1 up to the 1997 edition of the specification. In the 2002 edition, new features were introduced. The following features of the 2002 edition are fully or partly supported:</source>
          <target state="translated">本アプリケーションは、1997年版までのASN.1のすべての機能をカバーしています。2002年版では、新しい機能が導入されました。2002年版では、以下の機能が完全または部分的にサポートされています。</target>
        </trans-unit>
        <trans-unit id="569634e92b8ce1ce008d5489ba01f7e7d69d8d45" translate="yes" xml:space="preserve">
          <source>This application has been deprecated and will be removed in a furture release.</source>
          <target state="translated">このアプリケーションは非推奨とされており、ファーチャーリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="dfc6af9c7770c0d0747ed2380e862e5393774125" translate="yes" xml:space="preserve">
          <source>This application provides an Erlang interface to communicate with relational SQL-databases. It is built on top of Microsofts ODBC interface and therefore requires that you have an ODBC driver to the database that you want to connect to.</source>
          <target state="translated">このアプリケーションはリレーショナルSQLデータベースと通信するためのErlangインターフェースを提供します。Microsofts ODBCインターフェイスの上に構築されているので、接続したいデータベースのODBCドライバが必要です。</target>
        </trans-unit>
        <trans-unit id="33c8dd3d5797a890a9a711bb22cf2594354b0bee" translate="yes" xml:space="preserve">
          <source>This approach is always preferred over the other alternatives described below. This both from a performance perspective and a system characteristics perspective.</source>
          <target state="translated">このアプローチは、以下に説明する他の選択肢よりも常に好ましい。これは、性能の観点からもシステム特性の観点からも好ましい。</target>
        </trans-unit>
        <trans-unit id="8068bc8d1c806d61b5dde8f35515f5de0ccd108c" translate="yes" xml:space="preserve">
          <source>This approach is probably easier for an Erlanger but if you need to use real XSLT stylesheets in order to &quot;comply to the standard&quot; there is an adapter available to the Sablotron XSLT package which is written i C++. See also the &lt;code&gt;Tutorial&lt;/code&gt;.</source>
          <target state="translated">このアプローチはおそらくErlangerの方が簡単ですが、「標準に準拠する」ために実際のXSLTスタイルシートを使用する必要がある場合は、C ++で記述されたSablotron XSLTパッケージで使用できるアダプターがあります。 &lt;code&gt;Tutorial&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="f62d188dacb48bbbcc2b2321f9f579397d8bbfe1" translate="yes" xml:space="preserve">
          <source>This associates the name &lt;code&gt;a&lt;/code&gt; with the top-level &lt;code&gt;node&lt;/code&gt; entry. For this to work, the configuration file must at least contain:</source>
          <target state="translated">これにより、名前 &lt;code&gt;a&lt;/code&gt; がトップレベルの &lt;code&gt;node&lt;/code&gt; エントリに関連付けられます。これが機能するには、構成ファイルに少なくとも以下が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="3e34095000c0319f418ac3ee68cd3bf8ccd8bc10" translate="yes" xml:space="preserve">
          <source>This assumes that this is the first line of the input text, and that &lt;code&gt;'$end'&lt;/code&gt; is the distinguished &lt;code&gt;end_of_input&lt;/code&gt; symbol.</source>
          <target state="translated">これは、これが入力テキストの最初の行であり、 &lt;code&gt;'$end'&lt;/code&gt; が区別される &lt;code&gt;end_of_input&lt;/code&gt; シンボルであることを前提としています。</target>
        </trans-unit>
        <trans-unit id="821b03bacc21c4d7e259e58631986fc8983788a2" translate="yes" xml:space="preserve">
          <source>This attribute is to be specified first and is the only mandatory attribute.</source>
          <target state="translated">この属性は最初に指定する必要があり、唯一の必須属性です。</target>
        </trans-unit>
        <trans-unit id="d5e89f840b948b0e856ea77d5bc34a2eb62f41fa" translate="yes" xml:space="preserve">
          <source>This attribute is used by tools, such as Yecc, to inform the compiler that the source program is generated by another tool. It also indicates the correspondence of source files to lines of the original user-written file, from which the source program is produced.</source>
          <target state="translated">この属性は、ソース・プログラムが他のツールによって生成されたものであることをコンパイラに知らせるために、Yeccのようなツールによって使用されます。また、ソース・プログラムが生成された元のユーザが書いたファイルの行とソース・ファイルの対応関係を示します。</target>
        </trans-unit>
        <trans-unit id="e21a2982771a0d227b0a5afc10f4b081e89b3ac5" translate="yes" xml:space="preserve">
          <source>This attribute names a function that is to be run automatically when a module is loaded. For more information, see &lt;code&gt;&lt;a href=&quot;code_loading#on_load&quot;&gt;Running a Function When a Module is Loaded&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この属性は、モジュールがロードされたときに自動的に実行される関数を指定します。詳細については、「 &lt;code&gt;&lt;a href=&quot;code_loading#on_load&quot;&gt;Running a Function When a Module is Loaded&lt;/a&gt;&lt;/code&gt; を実行する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="1862f101a5a9233b48a831149fc7167f1c97802b" translate="yes" xml:space="preserve">
          <source>This automatically starts the error logger event manager, and adds &lt;code&gt;error_logger&lt;/code&gt; as a handler to Logger, with the following configuration:</source>
          <target state="translated">これにより、エラーロガーイベントマネージャが自動的に起動し、次の構成で &lt;code&gt;error_logger&lt;/code&gt; がハンドラとしてLoggerに追加されます。</target>
        </trans-unit>
        <trans-unit id="b6abecdecbe55a6c353c6503f8fff17fe757dd78" translate="yes" xml:space="preserve">
          <source>This behavior appeared in Erlang/OTP 19.0. In OTP 19.1 a backwards incompatible change of the return tuple from &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; was made and the mandatory callback function &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; was introduced. In OTP 20.0 the &lt;code&gt;&lt;a href=&quot;#type-generic_timeout&quot;&gt;generic timeouts&lt;/a&gt;&lt;/code&gt; were added.</source>
          <target state="translated">この動作はErlang / OTP 19.0で発生しました。OTP 19.1では、 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; からの戻りタプルの下位互換性のない変更が行われ、必須のコールバック関数 &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; が導入されました。OTP 20.0では、 &lt;code&gt;&lt;a href=&quot;#type-generic_timeout&quot;&gt;generic timeouts&lt;/a&gt;&lt;/code&gt; が追加されました。</target>
        </trans-unit>
        <trans-unit id="785543b1d2c442c04e0906335bd46635b1eb96f6" translate="yes" xml:space="preserve">
          <source>This behavior can be controlled through command-line flag &lt;code&gt;-code_path_choice Choice&lt;/code&gt;. If the flag is set to &lt;code&gt;relaxed&lt;/code&gt;, the code server instead chooses a suitable directory depending on the actual file structure. If a regular application &lt;code&gt;ebin&lt;/code&gt; directory exists, it is chosen. Otherwise, the directory &lt;code&gt;ebin&lt;/code&gt; in the archive is chosen if it exists. If neither of them exists, the original directory is chosen.</source>
          <target state="translated">この動作は、コマンドラインフラグ &lt;code&gt;-code_path_choice Choice&lt;/code&gt; で制御できます。フラグが &lt;code&gt;relaxed&lt;/code&gt; に設定されている場合、コードサーバーは実際のファイル構造に応じて適切なディレクトリを選択します。通常のアプリケーション &lt;code&gt;ebin&lt;/code&gt; ディレクトリが存在する場合は、それが選択されます。それ以外の場合、アーカイブ内のディレクトリ &lt;code&gt;ebin&lt;/code&gt; が存在する場合は、それが選択されます。どちらも存在しない場合は、元のディレクトリが選択されます。</target>
        </trans-unit>
        <trans-unit id="53636ccb870bbfa8ce6166a610a444015328245d" translate="yes" xml:space="preserve">
          <source>This behavior module implements the back end of the Erlang tracing system. The functions in this module are called whenever a trace probe is triggered. Both the &lt;code&gt;enabled&lt;/code&gt; and &lt;code&gt;trace&lt;/code&gt; functions are called in the context of the entity that triggered the trace probe. This means that the overhead by having the tracing enabled is greatly effected by how much time is spent in these functions. So, do as little work as possible in these functions.</source>
          <target state="translated">この動作モジュールは、Erlangトレースシステムのバックエンドを実装しています。このモジュールの関数は、トレースプローブがトリガーされるたびに呼び出されます。トレースプローブをトリガーしたエンティティのコンテキストで、 &lt;code&gt;enabled&lt;/code&gt; 関数と &lt;code&gt;trace&lt;/code&gt; 関数の両方が呼び出されます。つまり、トレースを有効にすることによるオーバーヘッドは、これらの関数で費やされる時間の影響を大きく受けます。したがって、これらの関数ではできる限り作業を行わないでください。</target>
        </trans-unit>
        <trans-unit id="70c20f09b1094d916dd54fcb5f009aa1d7c32e52" translate="yes" xml:space="preserve">
          <source>This behavior module provides a supervisor bridge, a process that connects a subsystem not designed according to the OTP design principles to a supervision tree. The supervisor bridge sits between a supervisor and the subsystem. It behaves like a real supervisor to its own supervisor, but has a different interface than a real supervisor to the subsystem. For more information, see &lt;code&gt;Supervisor Behaviour&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">この動作モジュールは、スーパーバイザブリッジを提供します。これは、OTP設計原則に従って設計されていないサブシステムを監視ツリーに接続するプロセスです。スーパーバイザブリッジは、スーパーバイザとサブシステムの間にあります。独自のスーパーバイザに対して実際のスーパーバイザのように動作しますが、サブシステムに対して実際のスーパーバイザとは異なるインターフェイスを持っています。詳細については、OTP設計原則の &lt;code&gt;Supervisor Behaviour&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ce3316c8111b9876ff9b5ef8da2949d18e1dd45d" translate="yes" xml:space="preserve">
          <source>This behavior module provides a supervisor, a process that supervises other processes called child processes. A child process can either be another supervisor or a worker process. Worker processes are normally implemented using one of the &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; behaviors. A supervisor implemented using this module has a standard set of interface functions and include functionality for tracing and error reporting. Supervisors are used to build a hierarchical process structure called a supervision tree, a nice way to structure a fault-tolerant application. For more information, see &lt;code&gt;Supervisor Behaviour&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">この動作モジュールは、子プロセスと呼ばれる他のプロセスを監視するプロセスである監視プログラムを提供します。子プロセスは、別のスーパーバイザまたはワーカープロセスのいずれかです。ワーカープロセスは通常、 &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; 動作のいずれかを使用して実装されます。このモジュールを使用して実装されたスーパーバイザには、標準のインターフェイス機能セットがあり、トレースとエラー報告のための機能が含まれています。スーパーバイザは、監視ツリーと呼ばれる階層的なプロセス構造を構築するために使用されます。これは、フォールトトレラントアプリケーションを構築するための優れた方法です。詳細については、OTP設計原則の &lt;code&gt;Supervisor Behaviour&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d6df5b9b0f7a74dbafdab8bc790e47d7e7f9481" translate="yes" xml:space="preserve">
          <source>This behavior module provides event handling functionality. It consists of a generic event manager process with any number of event handlers that are added and deleted dynamically.</source>
          <target state="translated">このビヘイビアモジュールは、イベント処理機能を提供します。これは、動的に追加・削除される任意の数のイベントハンドラを持つ一般的なイベントマネージャプロセスで構成されています。</target>
        </trans-unit>
        <trans-unit id="abfb5bf41909c33228afc455141ff017bc6cbde2" translate="yes" xml:space="preserve">
          <source>This behavior module provides the server of a client-server relation. A generic server process (&lt;code&gt;gen_server&lt;/code&gt;) implemented using this module has a standard set of interface functions and includes functionality for tracing and error reporting. It also fits into an OTP supervision tree. For more information, see section &lt;code&gt;gen_server Behaviour&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">この動作モジュールは、クライアントサーバー関係のサーバーを提供します。このモジュールを使用して実装された一般的なサーバープロセス（ &lt;code&gt;gen_server&lt;/code&gt; ）には、標準のインターフェイス関数セットがあり、トレースとエラー報告のための機能が含まれています。また、OTP監視ツリーにも適合します。詳細については、OTP設計原則の「 &lt;code&gt;gen_server Behaviour&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="cfe536c202221de15418e3b0398e40a018dac1a4" translate="yes" xml:space="preserve">
          <source>This binds variable &lt;code&gt;B&lt;/code&gt; to integer &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">これにより、変数 &lt;code&gt;B&lt;/code&gt; が整数 &lt;code&gt;2&lt;/code&gt; にバインドされます。</target>
        </trans-unit>
        <trans-unit id="43864d6a93dcab0bbcc900bd0174b5bbab1fdc75" translate="yes" xml:space="preserve">
          <source>This call is equivalent to &lt;code&gt;public_key:pem_entry_decode(CertEntry1)&lt;/code&gt;:</source>
          <target state="translated">この呼び出しは &lt;code&gt;public_key:pem_entry_decode(CertEntry1)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="0cb45c675dbc6c57c7e83453d414ea4d5859f32a" translate="yes" xml:space="preserve">
          <source>This callback format consumes much memory, as the whole response must be generated before it is sent to the user. This callback format is deprecated. For new development, use &lt;code&gt;Module:Function/3&lt;/code&gt;.</source>
          <target state="translated">このコールバック形式は、ユーザーに送信する前に応答全体を生成する必要があるため、多くのメモリを消費します。このコールバック形式は非推奨です。新規開発の場合は、 &lt;code&gt;Module:Function/3&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c021922a0bcd25050486be93ca9a01fe228c8b3e" translate="yes" xml:space="preserve">
          <source>This callback function is mandatory.</source>
          <target state="translated">このコールバック関数は必須です。</target>
        </trans-unit>
        <trans-unit id="19c59aed8326cb258e589ba8cff9c5c632aa9fd0" translate="yes" xml:space="preserve">
          <source>This callback function is optional.</source>
          <target state="translated">このコールバック関数はオプションです。</target>
        </trans-unit>
        <trans-unit id="38e550ff4f657cf80a8775b069566d9feb16c83b" translate="yes" xml:space="preserve">
          <source>This callback is called when a tracepoint is triggered and the &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; callback returned &lt;code&gt;trace&lt;/code&gt;. In it any side effects needed by the tracer are to be done. The tracepoint payload is located in the &lt;code&gt;TraceTerm&lt;/code&gt;. The content of the &lt;code&gt;TraceTerm&lt;/code&gt; depends on which &lt;code&gt;TraceTag&lt;/code&gt; is triggered. &lt;code&gt;TraceTerm&lt;/code&gt; corresponds to the fourth element in the trace tuples described in &lt;code&gt;&lt;a href=&quot;erlang#trace_3_trace_messages&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされ、 &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; コールバックが &lt;code&gt;trace&lt;/code&gt; を返したときに呼び出されます。その中で、トレーサーが必要とするあらゆる副作用が行われます。トレースポイントペイロードは &lt;code&gt;TraceTerm&lt;/code&gt; にあります。 &lt;code&gt;TraceTerm&lt;/code&gt; の内容は、どの &lt;code&gt;TraceTag&lt;/code&gt; がトリガーされるかによって異なります。 &lt;code&gt;TraceTerm&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;erlang#trace_3_trace_messages&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; で説明されているトレースタプルの4番目の要素に対応しています。</target>
        </trans-unit>
        <trans-unit id="d37d000bba6ae99564128c8b7446cc5273b6a04e" translate="yes" xml:space="preserve">
          <source>This callback is called when a tracepoint is triggered and the &lt;code&gt;&lt;a href=&quot;#Module:enabled_call-3&quot;&gt;Module:enabled_call/3&lt;/a&gt;&lt;/code&gt; callback returned &lt;code&gt;trace&lt;/code&gt;.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされ、 &lt;code&gt;&lt;a href=&quot;#Module:enabled_call-3&quot;&gt;Module:enabled_call/3&lt;/a&gt;&lt;/code&gt; コールバックが &lt;code&gt;trace&lt;/code&gt; を返したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="15198a7c2fc8240482ba94b944bdfc0b14e586ba" translate="yes" xml:space="preserve">
          <source>This callback is called when a tracepoint is triggered and the &lt;code&gt;&lt;a href=&quot;#Module:enabled_garbage_collection-3&quot;&gt;Module:enabled_garbage_collection/3&lt;/a&gt;&lt;/code&gt; callback returned &lt;code&gt;trace&lt;/code&gt;.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされ、 &lt;code&gt;&lt;a href=&quot;#Module:enabled_garbage_collection-3&quot;&gt;Module:enabled_garbage_collection/3&lt;/a&gt;&lt;/code&gt; コールバックが &lt;code&gt;trace&lt;/code&gt; を返したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2aa5dde256677cc6703eaf4ec5d19bc2b8283932" translate="yes" xml:space="preserve">
          <source>This callback is called when a tracepoint is triggered and the &lt;code&gt;&lt;a href=&quot;#Module:enabled_ports-3&quot;&gt;Module:enabled_ports/3&lt;/a&gt;&lt;/code&gt; callback returned &lt;code&gt;trace&lt;/code&gt;.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされ、 &lt;code&gt;&lt;a href=&quot;#Module:enabled_ports-3&quot;&gt;Module:enabled_ports/3&lt;/a&gt;&lt;/code&gt; コールバックが &lt;code&gt;trace&lt;/code&gt; を返したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6dcc032a652781d3a4cff57f32134bdf4ec6b88d" translate="yes" xml:space="preserve">
          <source>This callback is called when a tracepoint is triggered and the &lt;code&gt;&lt;a href=&quot;#Module:enabled_procs-3&quot;&gt;Module:enabled_procs/3&lt;/a&gt;&lt;/code&gt; callback returned &lt;code&gt;trace&lt;/code&gt;.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされ、 &lt;code&gt;&lt;a href=&quot;#Module:enabled_procs-3&quot;&gt;Module:enabled_procs/3&lt;/a&gt;&lt;/code&gt; コールバックが &lt;code&gt;trace&lt;/code&gt; を返したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cfff3392a7d289ca0c61ca7155845689c03dcb44" translate="yes" xml:space="preserve">
          <source>This callback is called when a tracepoint is triggered and the &lt;code&gt;&lt;a href=&quot;#Module:enabled_receive-3&quot;&gt;Module:enabled_receive/3&lt;/a&gt;&lt;/code&gt; callback returned &lt;code&gt;trace&lt;/code&gt;.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされ、 &lt;code&gt;&lt;a href=&quot;#Module:enabled_receive-3&quot;&gt;Module:enabled_receive/3&lt;/a&gt;&lt;/code&gt; コールバックが &lt;code&gt;trace&lt;/code&gt; を返したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c24bf92b0df20158eb77c36643c943e9fdb3807a" translate="yes" xml:space="preserve">
          <source>This callback is called when a tracepoint is triggered and the &lt;code&gt;&lt;a href=&quot;#Module:enabled_running_ports-3&quot;&gt;Module:enabled_running_ports/3&lt;/a&gt;&lt;/code&gt; callback returned &lt;code&gt;trace&lt;/code&gt;.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされ、 &lt;code&gt;&lt;a href=&quot;#Module:enabled_running_ports-3&quot;&gt;Module:enabled_running_ports/3&lt;/a&gt;&lt;/code&gt; コールバックが &lt;code&gt;trace&lt;/code&gt; を返したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b6742c8972ca63b4eed6ff400182d4ad91035680" translate="yes" xml:space="preserve">
          <source>This callback is called when a tracepoint is triggered and the &lt;code&gt;&lt;a href=&quot;#Module:enabled_running_procs-3&quot;&gt;Module:enabled_running_procs/3&lt;/a&gt;&lt;/code&gt; callback returned &lt;code&gt;trace&lt;/code&gt;.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされ、 &lt;code&gt;&lt;a href=&quot;#Module:enabled_running_procs-3&quot;&gt;Module:enabled_running_procs/3&lt;/a&gt;&lt;/code&gt; コールバックが &lt;code&gt;trace&lt;/code&gt; を返したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6f48d6f8f965dcfd900008bb64742372d353ae2d" translate="yes" xml:space="preserve">
          <source>This callback is called when a tracepoint is triggered and the &lt;code&gt;&lt;a href=&quot;#Module:enabled_send-3&quot;&gt;Module:enabled_send/3&lt;/a&gt;&lt;/code&gt; callback returned &lt;code&gt;trace&lt;/code&gt;.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされ、 &lt;code&gt;&lt;a href=&quot;#Module:enabled_send-3&quot;&gt;Module:enabled_send/3&lt;/a&gt;&lt;/code&gt; コールバックが &lt;code&gt;trace&lt;/code&gt; を返したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7d06f96f4aade9b952b7ce9c8005f3b70b23dcd8" translate="yes" xml:space="preserve">
          <source>This callback is called whenever a tracepoint is triggered. It allows the tracer to decide whether a trace is to be generated or not. This check is made as early as possible to limit the amount of overhead associated with tracing. If &lt;code&gt;trace&lt;/code&gt; is returned, the necessary trace data is created and the trace callback of the tracer is called. If &lt;code&gt;discard&lt;/code&gt; is returned, this trace call is discarded and no call to trace is done.</source>
          <target state="translated">このコールバックは、トレースポイントがトリガーされるたびに呼び出されます。これにより、トレーサーはトレースを生成するかどうかを決定できます。このチェックは、トレースに関連するオーバーヘッドの量を制限するために、できるだけ早く行われます。場合 &lt;code&gt;trace&lt;/code&gt; 返され、必要なトレースデータが作成され、トレーサーのトレースコールバックが呼び出されます。 &lt;code&gt;discard&lt;/code&gt; が返された場合、このトレース呼び出しは破棄され、トレースの呼び出しは行われません。</target>
        </trans-unit>
        <trans-unit id="94e6048cf0014e861feb66ee170c873413ff3161" translate="yes" xml:space="preserve">
          <source>This callback is called whenever a tracepoint with trace flag &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;'receive'&lt;/a&gt;&lt;/code&gt; is triggered.</source>
          <target state="translated">このコールバックは、トレースフラグが &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;'receive'&lt;/a&gt;&lt;/code&gt; のトレースポイントがトリガーされるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6fa7e2961f153a4436cefe4499cc280336994838" translate="yes" xml:space="preserve">
          <source>This callback is called whenever a tracepoint with trace flag &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;call | return_to&lt;/a&gt;&lt;/code&gt; is triggered.</source>
          <target state="translated">このコールバックは、トレースフラグを &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;call | return_to&lt;/a&gt;&lt;/code&gt; たトレースポイントを呼び出すたびに呼び出されます。return_toがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="69b3512c1f3ede51a7ecf30950dad7b0634b3377" translate="yes" xml:space="preserve">
          <source>This callback is called whenever a tracepoint with trace flag &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;garbage_collection&lt;/a&gt;&lt;/code&gt; is triggered.</source>
          <target state="translated">このコールバックは、トレースフラグが &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;garbage_collection&lt;/a&gt;&lt;/code&gt; のトレースポイントがトリガーされるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="04e6a249465c46d45e283c5f1f0285668b198409" translate="yes" xml:space="preserve">
          <source>This callback is called whenever a tracepoint with trace flag &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;ports&lt;/a&gt;&lt;/code&gt; is triggered.</source>
          <target state="translated">このコールバックは、トレースフラグ &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;ports&lt;/a&gt;&lt;/code&gt; 持つトレースポイントがトリガーされるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="af6001baab0a6ade22947ab13bfa31245cf0abe6" translate="yes" xml:space="preserve">
          <source>This callback is called whenever a tracepoint with trace flag &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;procs&lt;/a&gt;&lt;/code&gt; is triggered.</source>
          <target state="translated">このコールバックは、トレースフラグ &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;procs&lt;/a&gt;&lt;/code&gt; トレースポイントがトリガーされるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0be59b7c2110146187e5c0eeaf4bc0878afe0cb6" translate="yes" xml:space="preserve">
          <source>This callback is called whenever a tracepoint with trace flag &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;running_ports&lt;/a&gt;&lt;/code&gt; is triggered.</source>
          <target state="translated">このコールバックは、トレースフラグ &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;running_ports&lt;/a&gt;&lt;/code&gt; を持つトレースポイントがトリガーされるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="334c413e0dbeba2235f5db1ca4ea0969695570e1" translate="yes" xml:space="preserve">
          <source>This callback is called whenever a tracepoint with trace flag &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;running_procs | running&lt;/a&gt;&lt;/code&gt; is triggered.</source>
          <target state="translated">このコールバックは、トレースフラグ &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;running_procs | running&lt;/a&gt;&lt;/code&gt; がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="7c04ab99901eac2f63941068c90d7843bba53367" translate="yes" xml:space="preserve">
          <source>This callback is called whenever a tracepoint with trace flag &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;send&lt;/a&gt;&lt;/code&gt; is triggered.</source>
          <target state="translated">このコールバックは、トレースフラグが &lt;code&gt;&lt;a href=&quot;erlang#trace-3&quot;&gt;send&lt;/a&gt;&lt;/code&gt; たトレースポイントがトリガーされるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="945a522c510e59f03864e9eeb3d8a618307d8e56" translate="yes" xml:space="preserve">
          <source>This callback is optional, so a callback module does not need to export it. The &lt;code&gt;gen_statem&lt;/code&gt; module provides a default implementation of this function that returns &lt;code&gt;{State,Data}&lt;/code&gt;.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはそれをエクスポートする必要はありません。 &lt;code&gt;gen_statem&lt;/code&gt; モジュールは戻りことは、この関数のデフォルトの実装を提供 &lt;code&gt;{State,Data}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="adab3ff296df418bda26c9ab38b8afebec6b2122" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need not export it. If a release upgrade/downgrade with &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; specified in the &lt;code&gt;.appup&lt;/code&gt; file is made when &lt;code&gt;code_change/3&lt;/code&gt; isn't implemented the event handler will crash with an &lt;code&gt;undef&lt;/code&gt; error reason.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはエクスポートする必要はありません。 &lt;code&gt;code_change/3&lt;/code&gt; が実装されていないときに、 &lt;code&gt;.appup&lt;/code&gt; ファイルで &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; 指定されたリリースアップグレード/ダウングレードが行われた場合、イベントハンドラーは &lt;code&gt;undef&lt;/code&gt; エラーの理由でクラッシュします。</target>
        </trans-unit>
        <trans-unit id="02bb4941fa7a9741c99ed42c9b52e91f322657b1" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need not export it. If a release upgrade/downgrade with &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; specified in the &lt;code&gt;.appup&lt;/code&gt; file is made when &lt;code&gt;code_change/4&lt;/code&gt; is not implemented the process will crash with exit reason &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはエクスポートする必要はありません。 &lt;code&gt;code_change/4&lt;/code&gt; が実装されていないときに、 &lt;code&gt;.appup&lt;/code&gt; ファイルで &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; 指定されたリリースのアップグレード/ダウングレードが行われた場合、プロセスは終了理由 &lt;code&gt;undef&lt;/code&gt; でクラッシュします。</target>
        </trans-unit>
        <trans-unit id="09246fb26a04b28ca2f447f072f0daaf17b1ea05" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need not export it. If a release upgrade/downgrade with &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; specified in the &lt;code&gt;appup&lt;/code&gt; file is made when &lt;code&gt;code_change/3&lt;/code&gt; isn't implemented the process will crash with an &lt;code&gt;undef&lt;/code&gt; exit reason.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはエクスポートする必要はありません。 &lt;code&gt;code_change/3&lt;/code&gt; が実装されていないときに、 &lt;code&gt;appup&lt;/code&gt; ファイルで &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; 指定されたリリースのアップグレード/ダウングレードが行われた場合、プロセスは &lt;code&gt;undef&lt;/code&gt; 終了理由でクラッシュします。</target>
        </trans-unit>
        <trans-unit id="449de06640c440754deb50b818d7f03da9dfc15a" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need not export it. The &lt;code&gt;gen_event&lt;/code&gt; module provides a default implementation of this function that logs about the unexpected &lt;code&gt;Info&lt;/code&gt; message, drops it and returns &lt;code&gt;{noreply, State}&lt;/code&gt;.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはエクスポートする必要はありません。 &lt;code&gt;gen_event&lt;/code&gt; モジュールが予期しない約ログことは、この関数のデフォルトの実装を提供する &lt;code&gt;Info&lt;/code&gt; メッセージ、それ戻るをドロップ &lt;code&gt;{noreply, State}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="642a938f2c13878b19e630eed4ff743e43a98666" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need not export it. The &lt;code&gt;gen_event&lt;/code&gt; module provides a default implementation without cleanup.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはエクスポートする必要はありません。 &lt;code&gt;gen_event&lt;/code&gt; モジュールは、クリーンアップせずにデフォルトの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="33b5eb4eda106379d214a532dea20df13c6ee4a7" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need not export it. The &lt;code&gt;gen_server&lt;/code&gt; module provides a default implementation of this function that logs about the unexpected &lt;code&gt;Info&lt;/code&gt; message, drops it and returns &lt;code&gt;{noreply, State}&lt;/code&gt;.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはエクスポートする必要はありません。 &lt;code&gt;gen_server&lt;/code&gt; のモジュールが予期しない約ログことは、この関数のデフォルトの実装を提供する &lt;code&gt;Info&lt;/code&gt; メッセージ、それ戻るをドロップ &lt;code&gt;{noreply, State}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0950a9f920ccec0ce58fea7dd4cc52647d84000" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need not export it. The &lt;code&gt;gen_server&lt;/code&gt; module provides a default implementation of this function that returns the callback module state.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはエクスポートする必要はありません。 &lt;code&gt;gen_server&lt;/code&gt; のモジュールは、コールバックモジュールの状態を返し、この機能のデフォルトの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="d3374de84ad48d0fa717caa3233068cba7f0a810" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need not export it. The &lt;code&gt;gen_server&lt;/code&gt; module provides a default implementation without cleanup.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはエクスポートする必要はありません。 &lt;code&gt;gen_server&lt;/code&gt; のモジュールは、クリーンアップせずにデフォルトの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="ed16700adf3de2342c41a38a47218a24b4797c88" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need not export it. The &lt;code&gt;gen_statem&lt;/code&gt; module provides a default implementation without cleanup.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュールはエクスポートする必要はありません。 &lt;code&gt;gen_statem&lt;/code&gt; モジュールは、クリーンアップせずにデフォルトの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="b14aaa8a71c534451d8b2fa83d586d1d7132b252" translate="yes" xml:space="preserve">
          <source>This callback is optional, so callback modules need to export it only if they return &lt;code&gt;{continue,Continue}&lt;/code&gt; from another callback. If continue is used and the callback is not implemented, the process will exit with &lt;code&gt;undef&lt;/code&gt; error.</source>
          <target state="translated">このコールバックはオプションであるため、コールバックモジュール &lt;code&gt;{continue,Continue}&lt;/code&gt; 別のコールバックから{continue、Continue}を返す場合にのみエクスポートする必要があります。continueが使用され、コールバックが実装されていない場合、プロセスは &lt;code&gt;undef&lt;/code&gt; エラーで終了します。</target>
        </trans-unit>
        <trans-unit id="d62e7ff4624439456f6274f30841bc2cd438369b" translate="yes" xml:space="preserve">
          <source>This callback is optional, so event handler modules need not export it. If a handler does not export this function, the &lt;code&gt;gen_event&lt;/code&gt; module uses the handler state directly for the purposes described below.</source>
          <target state="translated">このコールバックはオプションであるため、イベントハンドラーモジュールはそれをエクスポートする必要はありません。ハンドラーがこの関数をエクスポートしない場合、 &lt;code&gt;gen_event&lt;/code&gt; モジュールは、以下で説明する目的でハンドラーの状態を直接使用します。</target>
        </trans-unit>
        <trans-unit id="7e665adac2e338eb903db4caf99617c276a94da3" translate="yes" xml:space="preserve">
          <source>This callback may also return the port of the given node. In that case &lt;code&gt;port_please/3&lt;/code&gt; may be omitted.</source>
          <target state="translated">このコールバックは、指定されたノードのポートを返す場合もあります。その場合、 &lt;code&gt;port_please/3&lt;/code&gt; は省略できます。</target>
        </trans-unit>
        <trans-unit id="220a2abc00984810bc967fbaf4c4a46c06726d6c" translate="yes" xml:space="preserve">
          <source>This can also be achieved in a more customized way by using parameter &lt;code&gt;export&lt;/code&gt; in the cover specification and analysing the result off line. However, the cross cover mechanism is a built-in solution that also provides logging.</source>
          <target state="translated">これは、カバー仕様でパラメーター &lt;code&gt;export&lt;/code&gt; を使用し、結果をオフラインで分析することにより、よりカスタマイズされた方法で実現することもできます。ただし、クロスカバーメカニズムは、ロギングも提供する組み込みソリューションです。</target>
        </trans-unit>
        <trans-unit id="d55911e226611b9c595d6a76da5448bc48c50a57" translate="yes" xml:space="preserve">
          <source>This can be defined as follows, but is faster:</source>
          <target state="translated">これは以下のように定義することができますが、より高速です。</target>
        </trans-unit>
        <trans-unit id="051b7b690babeaa0408d0d0c0e8d2f3f38cca0df" translate="yes" xml:space="preserve">
          <source>This can be done, for example, by focusing on one state at the time and for every state ensure that all events are handled. Alternatively, you can focus on one event at the time and ensure that it is handled in every state. You can also use a mix of these strategies.</source>
          <target state="translated">これは、例えば、一度に1つの状態に焦点を当て、すべての状態ですべてのイベントが処理されるようにすることで行うことができます。あるいは、一度に1つのイベントに焦点を当て、すべての状態でそれが処理されるようにすることもできます。また、これらの戦略を組み合わせて使用することもできます。</target>
        </trans-unit>
        <trans-unit id="d4598fb964d80c17b9042cf3810c56c1f2f70ecf" translate="yes" xml:space="preserve">
          <source>This can be the name of a binary log, a list of such logs, or the name of a directory containing one or more binary logs.</source>
          <target state="translated">これは、バイナリログの名前、そのようなログのリスト、または 1 つ以上のバイナリログを含むディレクトリの名前にすることができます。</target>
        </trans-unit>
        <trans-unit id="0d49d5ccf3611383b79c9580f8c0026d786e3ee8" translate="yes" xml:space="preserve">
          <source>This can be used for various purposes, for example, writing a term to a file in an efficient way, or sending an Erlang term to some type of communications channel not supported by distributed Erlang.</source>
          <target state="translated">例えば、効率的な方法でファイルに項を書いたり、分散Erlangではサポートされていない通信チャネルにErlangの項を送ったりと、様々な目的で使うことができます。</target>
        </trans-unit>
        <trans-unit id="a87fd0d612d477544f48342a46839027b50293f1" translate="yes" xml:space="preserve">
          <source>This can be used to detect problems with NIFs or drivers that take too long to execute. 1 ms is considered a good maximum time for a driver callback or a NIF. However, a time-sharing system is usually to consider everything &amp;lt; 100 ms as &quot;possible&quot; and fairly &quot;normal&quot;. However, longer schedule times can indicate swapping or a misbehaving NIF/driver. Misbehaving NIFs and drivers can cause bad resource utilization and bad overall system performance.</source>
          <target state="translated">これは、実行に時間がかかりすぎるNIFまたはドライバーの問題を検出するために使用できます。 1ミリ秒は、ドライバーのコールバックまたはNIFの適切な最大時間と見なされます。ただし、タイムシェアリングシステムでは通常、100ミリ秒未満のすべてを「可能」であり、かなり「正常」であると見なします。ただし、スケジュール時間が長い場合は、スワップまたはNIF /ドライバーの誤動作を示している可能性があります。 NIFとドライバーの動作に問題があると、リソースの使用率が低下し、システム全体のパフォーマンスが低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7c309ba8d110cc132caf3f434048be18fd8c888d" translate="yes" xml:space="preserve">
          <source>This can be useful to know, even if &lt;code&gt;systools&lt;/code&gt; is not used, since Erlang/OTP is packaged according to the OTP principles and thus comes with a specific directory structure. The code server (see the &lt;code&gt;code(3)&lt;/code&gt; manual page in Kernel) automatically uses code from the directory with the highest version number, if more than one version of an application is present.</source>
          <target state="translated">Erlang / OTPはOTPの原則に従ってパッケージ化されているため、特定のディレクトリ構造が付属しているため、 &lt;code&gt;systools&lt;/code&gt; が使用されていない場合でも、これは知っておくと役立ちます。コードサーバー（カーネルの &lt;code&gt;code(3)&lt;/code&gt; のマニュアルページを参照）は、アプリケーションのバージョンが複数存在する場合、バージョン番号が最も大きいディレクトリのコードを自動的に使用します。</target>
        </trans-unit>
        <trans-unit id="c0a78708d83a11d18d7b6fde7a226d981a5c9a17" translate="yes" xml:space="preserve">
          <source>This can be useful when you want to hold arbitrary terms: skip them and copy the binary term data to some buffer.</source>
          <target state="translated">これは、任意の項を保持したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="9dccf3f6d2f60b79a3b5bd80d61cef8142d3c9f1" translate="yes" xml:space="preserve">
          <source>This can occur even if a &lt;code&gt;reload&lt;/code&gt; option is specified, if &lt;code&gt;DriverOptionList&lt;/code&gt; differs from the current.</source>
          <target state="translated">&lt;code&gt;DriverOptionList&lt;/code&gt; が現在のものと異なる場合、 &lt;code&gt;reload&lt;/code&gt; オプションが指定されていても、これが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e696f35629ec0f432c29538e2e6c58a6cd4c896e" translate="yes" xml:space="preserve">
          <source>This can override the configuration parameters &lt;code&gt;nameserver&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; depending on the contents of the specified file. They can also change any time in the future reflecting the file contents.</source>
          <target state="translated">これは、指定されたファイルの内容に応じて、構成パラメーターの &lt;code&gt;nameserver&lt;/code&gt; と &lt;code&gt;search&lt;/code&gt; をオーバーライドできます。また、ファイルの内容を反映して、将来いつでも変更できます。</target>
        </trans-unit>
        <trans-unit id="8dec9a62f192435d695441ed01fd661a8d8c315a" translate="yes" xml:space="preserve">
          <source>This causes &lt;code&gt;epmd&lt;/code&gt; to close the connection from the far end. Notice that if the name was in fact still in use by a node, the results of this operation are unpredictable. Also, doing this does not cause the local end of the connection to close, so resources can be consumed.</source>
          <target state="translated">これにより、 &lt;code&gt;epmd&lt;/code&gt; は遠端からの接続を閉じます。名前が実際にノードでまだ使用されている場合、この操作の結果は予測できないことに注意してください。また、これを行っても接続のローカルエンドは閉じないため、リソースが消費される可能性があります。</target>
        </trans-unit>
        <trans-unit id="b14b393bb418a216b0875dc8287af117dd7067bb" translate="yes" xml:space="preserve">
          <source>This causes a parse transform to substitute a fun for the QLC. The (compiled) fun is called when the query handle is evaluated.</source>
          <target state="translated">これにより、構文解析変換がQLCの代わりにfunを代用します。(コンパイルされた)funは、クエリハンドルが評価されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6b5f81b2ddca32cf291bc3217d330648ab91cbde" translate="yes" xml:space="preserve">
          <source>This causes a warning for an unused variable, &lt;code&gt;Elem&lt;/code&gt;, if the code is compiled with the flag &lt;code&gt;warn_unused_vars&lt;/code&gt; set. Instead, the code can be rewritten to:</source>
          <target state="translated">これにより、フラグ &lt;code&gt;warn_unused_vars&lt;/code&gt; を設定してコードをコンパイルした場合、未使用の変数 &lt;code&gt;Elem&lt;/code&gt; に対して警告が表示されます。代わりに、コードを次のように書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="6cb1d2e7687337b9f0ef3870a3a41bbcb1151114" translate="yes" xml:space="preserve">
          <source>This causes outstanding megaco:call/3 requests to return. The callback functions UserMod:handle_reply/4 and UserMod:handle_trans_ack/4 are also invoked where it applies. See the megaco_user module for more info about the callback arguments.</source>
          <target state="translated">これにより、未処理の megaco:call/3 リクエストが返されます。コールバック関数 UserMod:handle_reply/4 および UserMod:handle_trans_ack/4 も、この関数が適用される場所で呼び出されます。コールバック引数の詳細については megaco_user モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="68c0a11988374396554e35c1339e4b4d296f9cbb" translate="yes" xml:space="preserve">
          <source>This causes the variable to be lifted (after parsing) to the next higher level in the syntax tree, replacing that entire subtree. In this case, the &lt;code&gt;'@_@Name'/0&lt;/code&gt; will be replaced with &lt;code&gt;'@@Name'&lt;/code&gt;, and the &lt;code&gt;/0&lt;/code&gt; part was just used as dummy notation and will be discarded.</source>
          <target state="translated">これにより、構文解析ツリーの次の上位レベルに（解析後に）変数が引き上げられ、そのサブツリー全体が置き換えられます。この場合、 &lt;code&gt;'@_@Name'/0&lt;/code&gt; は &lt;code&gt;'@@Name'&lt;/code&gt; 置き換えられ、 &lt;code&gt;/0&lt;/code&gt; の部分は単にダミー表記として使用されたため破棄されます。</target>
        </trans-unit>
        <trans-unit id="84078e161475adc15a1fe15da8646e8557d4b551" translate="yes" xml:space="preserve">
          <source>This chapter briefly describes Erlang records derived from ASN.1 specifications used to handle public key infrastructure. The scope is to describe the data types of each component, not the semantics. For information on the semantics, refer to the relevant standards and RFCs linked in the sections below.</source>
          <target state="translated">この章では公開鍵インフラストラクチャを扱うために使われるASN.1仕様から派生したErlangレコードについて簡単に説明します。この章のスコープは各コンポーネントのデータ型を説明するもので、セマンティクスではありません。セマンティクスに関する情報は、以下のセクションでリンクされている関連する標準規格とRFCを参照してください。</target>
        </trans-unit>
        <trans-unit id="b2f23bd1830ba030caede6017d114b23d96a8156" translate="yes" xml:space="preserve">
          <source>This chapter contains in extenso versions of the OpenSSL and SSLeay licenses.</source>
          <target state="translated">この章では、OpenSSLとSSLeayのライセンスのエクステンソバージョンが含まれています。</target>
        </trans-unit>
        <trans-unit id="6b1d044a8e1dfdfc0b3ead8b82c9c3d5d936b5ef" translate="yes" xml:space="preserve">
          <source>This chapter describes FIPS mode support in the crypto application.</source>
          <target state="translated">この章では、cryptoアプリケーションにおけるFIPSモードのサポートについて説明する。</target>
        </trans-unit>
        <trans-unit id="ffd1f44c4ed57b40721b93cf5c0efd3d78d52a33" translate="yes" xml:space="preserve">
          <source>This chapter describes the support for loading encryption engines in the crypto application.</source>
          <target state="translated">この章では、cryptoアプリケーションでの暗号化エンジンのロードのサポートについて説明します。</target>
        </trans-unit>
        <trans-unit id="84e8d13b539f47c00293308a5f44715292e8675e" translate="yes" xml:space="preserve">
          <source>This chapter describes the support in the crypto application for using public and private keys stored in encryption engines.</source>
          <target state="translated">この章では、暗号化エンジンに格納された公開鍵と秘密鍵を使用するための crypto アプリケーションのサポートについて説明する。</target>
        </trans-unit>
        <trans-unit id="66dda50ba5ba17ea40a6d362cc6e7f81e1f3b82a" translate="yes" xml:space="preserve">
          <source>This chapter is about creating such a system, which is called a &lt;strong&gt;target system&lt;/strong&gt;.</source>
          <target state="translated">この章では、そのようなシステムを作成する方法について説明し&lt;strong&gt;ます&lt;/strong&gt;。これは、&lt;strong&gt;ターゲットシステム&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="303cc2fd7c07d62117308f568c6c7a69cd42b456" translate="yes" xml:space="preserve">
          <source>This checks that the pid &lt;code&gt;From&lt;/code&gt; is in the &lt;code&gt;User_List&lt;/code&gt;:</source>
          <target state="translated">これは、pid &lt;code&gt;From&lt;/code&gt; が &lt;code&gt;User_List&lt;/code&gt; にあることを確認します。</target>
        </trans-unit>
        <trans-unit id="cd754cddd9c96097f025a6b91734f43531e07dcf" translate="yes" xml:space="preserve">
          <source>This closes the Erlang/OTP shell.</source>
          <target state="translated">これはErlang/OTPシェルを閉じます。</target>
        </trans-unit>
        <trans-unit id="7d1fa1715e259b26d3b25f592aabf2747c705ee2" translate="yes" xml:space="preserve">
          <source>This code adds a set of people to the database. Running this code within one transaction ensures that either the whole family is added to the database, or the whole transaction terminates. For example, if the last child is badly formatted, or the executing process terminates because of an &lt;code&gt;'EXIT'&lt;/code&gt; signal while executing the family code, the transaction terminates. Thus, the situation where half a family is added can never occur.</source>
          <target state="translated">このコードは、一連の人々をデータベースに追加します。1つのトランザクション内でこのコードを実行すると、ファミリー全体がデータベースに追加されるか、トランザクション全体が終了します。たとえば、最後の子の形式が正しくない場合、またはファミリコードの実行中に &lt;code&gt;'EXIT'&lt;/code&gt; 信号が原因で実行中のプロセスが終了した場合、トランザクションは終了します。したがって、家族の半分が追加される状況は決して起こり得ない。</target>
        </trans-unit>
        <trans-unit id="98b115ab987715d60781ca89e47fa4411fb40cb5" translate="yes" xml:space="preserve">
          <source>This code behaves differently from &quot;&lt;code&gt;--&lt;/code&gt;&quot; if the lists contain duplicate elements (one occurrence of an element in HugeList2 removes &lt;strong&gt;all&lt;/strong&gt; occurrences in HugeList1.)</source>
          <target state="translated">このコードは、リストに重複する要素が含まれている場合、「 &lt;code&gt;--&lt;/code&gt; 」とは異なる動作をします（HugeList2の要素が1回出現すると、HugeList1の&lt;strong&gt;すべての&lt;/strong&gt;出現が削除されます）。</target>
        </trans-unit>
        <trans-unit id="620f0e09a670821d9a2abe04fa98afa74a5ef2a9" translate="yes" xml:space="preserve">
          <source>This code is easier to write and to understand, and it also executes much faster.</source>
          <target state="translated">このコードの方が書きやすくてわかりやすいですし、実行もかなり速くなります。</target>
        </trans-unit>
        <trans-unit id="c2b34933ffae95b8a853f8ff645604fbd952d3ab" translate="yes" xml:space="preserve">
          <source>This code lock state machine can be implemented using &lt;code&gt;gen_statem&lt;/code&gt; with the following callback module:</source>
          <target state="translated">このコードロック状態マシンは、次のコールバックモジュールで &lt;code&gt;gen_statem&lt;/code&gt; を使用して実装できます。</target>
        </trans-unit>
        <trans-unit id="7b2443919e593a0d589592796a6acfa56ef58bd8" translate="yes" xml:space="preserve">
          <source>This code uses the function &lt;code&gt;&lt;a href=&quot;mnesia#s_write-1&quot;&gt;s_write/1&lt;/a&gt;&lt;/code&gt; instead of the function &lt;code&gt;&lt;a href=&quot;mnesia#write-1&quot;&gt;write/1&lt;/a&gt;&lt;/code&gt; The function &lt;code&gt;s_write/1&lt;/code&gt; sets a sticky lock instead of a normal lock. If the table is not replicated, sticky locks have no special effect. If the table is replicated, and a sticky lock is set on node &lt;code&gt;N1&lt;/code&gt;, this lock then sticks to node &lt;code&gt;N1&lt;/code&gt;. The next time you try to set a sticky lock on the same record at node &lt;code&gt;N1&lt;/code&gt;, &lt;code&gt;Mnesia&lt;/code&gt; detects that the lock is already set and do no network operation to acquire the lock.</source>
          <target state="translated">このコードは、関数の使用 &lt;code&gt;&lt;a href=&quot;mnesia#s_write-1&quot;&gt;s_write/1&lt;/a&gt;&lt;/code&gt; の代わりに関数の &lt;code&gt;&lt;a href=&quot;mnesia#write-1&quot;&gt;write/1&lt;/a&gt;&lt;/code&gt; 関数 &lt;code&gt;s_write/1&lt;/code&gt; セットの代わりに通常のロックの粘着性のロック。テーブルが複製されない場合、スティッキーロックは特別な影響を与えません。テーブルが複製され、そして粘着性のロックがノードに設定されている場合に &lt;code&gt;N1&lt;/code&gt; 、ノードに付着し、このロック &lt;code&gt;N1&lt;/code&gt; 。次にノード &lt;code&gt;N1&lt;/code&gt; で同じレコードにスティッキーロックを設定しようとすると、 &lt;code&gt;Mnesia&lt;/code&gt; はロックがすでに設定されていることを検出し、ネットワーク操作を行ってロックを取得しません。</target>
        </trans-unit>
        <trans-unit id="d473cae681409fa329e6bc7b44d312e6bb308a91" translate="yes" xml:space="preserve">
          <source>This command can only be used when contacting &lt;code&gt;epmd&lt;/code&gt; instances started with flag &lt;code&gt;-relaxed_command_check&lt;/code&gt;.</source>
          <target state="translated">このコマンドは、フラグ &lt;code&gt;-relaxed_command_check&lt;/code&gt; で開始された &lt;code&gt;epmd&lt;/code&gt; インスタンスに接続する場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="a8da29ec7d90c1769855d7fc9ae5d438b9bb9d86" translate="yes" xml:space="preserve">
          <source>This command file is then set as heart command.</source>
          <target state="translated">そして、このコマンドファイルをハートコマンドに設定します。</target>
        </trans-unit>
        <trans-unit id="52d8f2983dee948139d1e9e434673f9c52bda692" translate="yes" xml:space="preserve">
          <source>This command will create a file named &lt;code&gt;root.TAGS&lt;/code&gt; in the current directory. The file will contain references to all Erlang source files in the Erlang distribution.</source>
          <target state="translated">このコマンドは、現在のディレクトリに &lt;code&gt;root.TAGS&lt;/code&gt; という名前のファイルを作成します。ファイルには、ErlangディストリビューションのすべてのErlangソースファイルへの参照が含まれます。</target>
        </trans-unit>
        <trans-unit id="aa2bc19b983020ccb9b326fcd4731f0bd1161c57" translate="yes" xml:space="preserve">
          <source>This composes a test set from the exported test functions of the named module, i.e., those functions with arity zero whose names end with &lt;code&gt;_test&lt;/code&gt; or &lt;code&gt;_test_&lt;/code&gt;. Basically, the &lt;code&gt;..._test()&lt;/code&gt; functions become simple tests, while the &lt;code&gt;..._test_()&lt;/code&gt; functions become generators.</source>
          <target state="translated">これは、指定されたモジュールのエクスポートされたテスト関数、つまり名前が &lt;code&gt;_test&lt;/code&gt; または &lt;code&gt;_test_&lt;/code&gt; で終わるアリティゼロの関数からテストセットを構成します。基本的に、 &lt;code&gt;..._test()&lt;/code&gt; 関数は単純なテストになり、 &lt;code&gt;..._test_()&lt;/code&gt; 関数はジェネレーターになります。</target>
        </trans-unit>
        <trans-unit id="63c3c21b3eef82be8246811ccf2f3c14d371f943" translate="yes" xml:space="preserve">
          <source>This concludes the example. It is fully runnable and you can read or write to the I/O server by using, for example, the &lt;code&gt;io&lt;/code&gt; module or even the &lt;code&gt;file&lt;/code&gt; module. It is as simple as that to implement a fully fledged I/O server in Erlang.</source>
          <target state="translated">これで例は終わりです。これは完全に実行可能であり、たとえば &lt;code&gt;io&lt;/code&gt; モジュールや &lt;code&gt;file&lt;/code&gt; モジュールを使用して、I / Oサーバーに対して読み取りまたは書き込みを行うことができます。Erlangで本格的なI / Oサーバーを実装するのはそれと同じくらい簡単です。</target>
        </trans-unit>
        <trans-unit id="33f0e49393f960fdbb1f12f5f92189e125a0ce06" translate="yes" xml:space="preserve">
          <source>This configuration function is called as the first function in the suite. It typically contains initializations that are common for all test cases in the suite, and that must only be done once. Parameter &lt;code&gt;Config&lt;/code&gt; is the configuration data that can be modified. Whatever is returned from this function is specified as &lt;code&gt;Config&lt;/code&gt; to all configuration functions and test cases in the suite.</source>
          <target state="translated">この構成関数は、スイートの最初の関数として呼び出されます。これには通常、スイートのすべてのテストケースに共通する初期化が含まれており、初期化は1回だけで済みます。パラメータ &lt;code&gt;Config&lt;/code&gt; は、変更可能な構成データです。この関数から返されるものは何でものように指定された &lt;code&gt;Config&lt;/code&gt; スイート内のすべての構成機能とテストケースに。</target>
        </trans-unit>
        <trans-unit id="3fc12196aaa3c7c817d997888a6e0c0d511e97b1" translate="yes" xml:space="preserve">
          <source>This configuration function is called before execution of a test case group. It typically contains initializations that are common for all test cases and subgroups in the group, and that must only be performed once. &lt;code&gt;GroupName&lt;/code&gt; is the name of the group, as specified in the group definition (see &lt;code&gt;&lt;a href=&quot;#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt;). Parameter &lt;code&gt;Config&lt;/code&gt; is the configuration data that can be modified. The return value of this function is given as &lt;code&gt;Config&lt;/code&gt; to all test cases and subgroups in the group.</source>
          <target state="translated">この構成関数は、テストケースグループの実行前に呼び出されます。これには通常、グループ内のすべてのテストケースとサブグループに共通の初期化が含まれており、1回だけ実行する必要があります。 &lt;code&gt;GroupName&lt;/code&gt; は、グループ定義で指定されているグループの名前です（ &lt;code&gt;&lt;a href=&quot;#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt; を参照）。パラメータ &lt;code&gt;Config&lt;/code&gt; は、変更可能な構成データです。この関数の戻り値は、グループ内のすべてのテストケースとサブグループに &lt;code&gt;Config&lt;/code&gt; として与えられます。</target>
        </trans-unit>
        <trans-unit id="23368b3fe2d449c2692eb8e3e91bed68d4ab16da" translate="yes" xml:space="preserve">
          <source>This conforms to the format used by the scanner in the Erlang &lt;code&gt;io&lt;/code&gt; library module.</source>
          <target state="translated">これは、Erlang &lt;code&gt;io&lt;/code&gt; ライブラリモジュールでスキャナーが使用する形式に準拠しています。</target>
        </trans-unit>
        <trans-unit id="89e7ad5998bd8d56a5635438c81b21cdbc5fbf20" translate="yes" xml:space="preserve">
          <source>This construction does not consume any messages, only suspends execution in the process for &lt;code&gt;ExprT&lt;/code&gt; milliseconds. This can be used to implement simple timers.</source>
          <target state="translated">この構造はメッセージを消費せず、プロセスの実行を &lt;code&gt;ExprT&lt;/code&gt; ミリ秒だけ一時停止します。これは、単純なタイマーを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="ff79977655b81c53aa0929475789c463d4c65ccd" translate="yes" xml:space="preserve">
          <source>This control messages replace the &lt;code&gt;SEND&lt;/code&gt; control message and will be sent when the distribution flag &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;DFLAG_SEND_SENDER&lt;/a&gt;&lt;/code&gt; has been negotiated in the connection setup handshake.</source>
          <target state="translated">この制御メッセージは &lt;code&gt;SEND&lt;/code&gt; 制御メッセージを置き換え、接続セットアップハンドシェイクで配布フラグ &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;DFLAG_SEND_SENDER&lt;/a&gt;&lt;/code&gt; がネゴシエートされたときに送信されます。</target>
        </trans-unit>
        <trans-unit id="61b1bf1e5da0665206d28c63a8251c70f9437da9" translate="yes" xml:space="preserve">
          <source>This control messages replace the &lt;code&gt;SEND_TT&lt;/code&gt; control message and will be sent when the distribution flag &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;DFLAG_SEND_SENDER&lt;/a&gt;&lt;/code&gt; has been negotiated in the connection setup handshake.</source>
          <target state="translated">この制御メッセージは &lt;code&gt;SEND_TT&lt;/code&gt; 制御メッセージを置き換え、接続セットアップハンドシェイクで配布フラグ &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;DFLAG_SEND_SENDER&lt;/a&gt;&lt;/code&gt; がネゴシエートされたときに送信されます。</target>
        </trans-unit>
        <trans-unit id="3811bd05c74f86fcbc14a9c1b9034f65fa2fcd06" translate="yes" xml:space="preserve">
          <source>This could be accomplished with the option &lt;code&gt;fail_callback&lt;/code&gt; which will be called if the hostname verification fails:</source>
          <target state="translated">これは、ホスト名の検証が失敗した場合に呼び出されるオプション &lt;code&gt;fail_callback&lt;/code&gt; で実行できます。</target>
        </trans-unit>
        <trans-unit id="51a1cc36e31cb197216b50eb9eb632d0459ddabc" translate="yes" xml:space="preserve">
          <source>This creates a boot script, both the readable version, &lt;code&gt;ch_rel-1.script&lt;/code&gt;, and the binary version, &lt;code&gt;ch_rel-1.boot&lt;/code&gt;, used by the runtime system.</source>
          <target state="translated">これは、起動スクリプトを作成し、両方読めるバージョン、 &lt;code&gt;ch_rel-1.script&lt;/code&gt; 、およびバイナリバージョン、 &lt;code&gt;ch_rel-1.boot&lt;/code&gt; ランタイムシステムによって使用されます、。</target>
        </trans-unit>
        <trans-unit id="8f83e183c685a8bf96ad1d1d03b74d255f5c951a" translate="yes" xml:space="preserve">
          <source>This creates a test set from all the modules belonging to the specified application, by consulting the application's &lt;code&gt;.app&lt;/code&gt; file (see &lt;code&gt;{file, FileName}&lt;/code&gt;), or if no such file exists, by testing all object files in the application's &lt;code&gt;ebin&lt;/code&gt;-directory (see &lt;code&gt;{dir, Path}&lt;/code&gt;); if that does not exist, the &lt;code&gt;code:lib_dir(AppName)&lt;/code&gt; directory is used.</source>
          <target state="translated">これは、アプリケーションの &lt;code&gt;.app&lt;/code&gt; ファイル（ &lt;code&gt;{file, FileName}&lt;/code&gt; 参照）を調べることにより、指定されたアプリケーションに属するすべてのモジュールからテストセットを作成します。そのようなファイルが存在しない場合は、アプリケーションの &lt;code&gt;ebin&lt;/code&gt; -directory（ &lt;code&gt;{dir, Path}&lt;/code&gt; 参照してください）; それが存在しない場合は、 &lt;code&gt;code:lib_dir(AppName)&lt;/code&gt; ディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="7dfbabbf55ded6bc40cb089b7e7b9db65720b207" translate="yes" xml:space="preserve">
          <source>This creates a tuple with the brand of the motorcycle and the output format. We use the brand name only for sorting purpose. We have to end the template function with the &quot;built in clause&quot; &lt;code&gt;template(E) -&amp;gt; built_in_rules(fun template/1, E).&lt;/code&gt;</source>
          <target state="translated">これにより、モーターサイクルのブランドと出力形式でタプルが作成されます。ブランド名は選別のみを目的として使用しています。「built in clause」でテンプレート関数を終了する必要があります &lt;code&gt;template(E) -&amp;gt; built_in_rules(fun template/1, E).&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd1d3feb38283e93bdf7380a9a3f2767d2d85c6a" translate="yes" xml:space="preserve">
          <source>This creates an &lt;code&gt;(ETERM *)&lt;/code&gt; structure corresponding to the Erlang term &lt;code&gt;[{name,madonna},{age,21},{data,[{adr,&quot;E-street&quot;,42}]}]&lt;/code&gt;</source>
          <target state="translated">これにより、Erlang用語 &lt;code&gt;[{name,madonna},{age,21},{data,[{adr,&quot;E-street&quot;,42}]}]&lt;/code&gt; 対応する &lt;code&gt;(ETERM *)&lt;/code&gt; 構造が作成されます</target>
        </trans-unit>
        <trans-unit id="ae606f82f5ea62f5942a0adf3b9e512950c71e07" translate="yes" xml:space="preserve">
          <source>This creates an additional folder in &lt;code&gt;$ERL_TOP/release&lt;/code&gt; called &lt;code&gt;tests&lt;/code&gt;. Now, it's time to start the smoke test.</source>
          <target state="translated">これにより、 &lt;code&gt;$ERL_TOP/release&lt;/code&gt; &lt;code&gt;tests&lt;/code&gt; という追加のフォルダーが作成されます。さて、煙のテストを開始する時が来ました。</target>
        </trans-unit>
        <trans-unit id="ef73a8deed0f6aa219ae36f5994c464c421d1dae" translate="yes" xml:space="preserve">
          <source>This creates an anonymous function of &lt;code&gt;N&lt;/code&gt; arguments and binds it to the variable &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;N&lt;/code&gt; 個の引数の無名関数が作成され、変数 &lt;code&gt;F&lt;/code&gt; にバインドされます。</target>
        </trans-unit>
        <trans-unit id="524be8f1a981b01e7043d75c61d487bdaac91459" translate="yes" xml:space="preserve">
          <source>This creates:</source>
          <target state="translated">これが生み出すのです。</target>
        </trans-unit>
        <trans-unit id="c46e82b8048ee48e1624490a06ae6b4a6e2f1c62" translate="yes" xml:space="preserve">
          <source>This daemon acts as a name server on all hosts involved in distributed Erlang computations. When an Erlang node starts, the node has a name and it obtains an address from the host OS kernel. The name and address are sent to the &lt;code&gt;epmd&lt;/code&gt; daemon running on the local host. In a TCP/IP environment, the address consists of the IP address and a port number. The node name is an atom on the form of &lt;code&gt;Name@Node&lt;/code&gt;. The job of the &lt;code&gt;epmd&lt;/code&gt; daemon is to keep track of which node name listens on which address. Hence, &lt;code&gt;epmd&lt;/code&gt; maps symbolic node names to machine addresses.</source>
          <target state="translated">このデーモンは、分散Erlang計算に関与するすべてのホストでネームサーバーとして機能します。 Erlangノードが起動すると、ノードには名前が付けられ、ホストOSカーネルからアドレスを取得します。名前とアドレスは、ローカルホストで実行されている &lt;code&gt;epmd&lt;/code&gt; デーモンに送信されます。 TCP / IP環境では、アドレスはIPアドレスとポート番号で構成されます。ノード名は &lt;code&gt;Name@Node&lt;/code&gt; 形式のアトムです。 &lt;code&gt;epmd&lt;/code&gt; デーモンの役割は、どのノード名がどのアドレスでリッスンするかを追跡することです。したがって、 &lt;code&gt;epmd&lt;/code&gt; はシンボリックノード名をマシンアドレスにマップします。</target>
        </trans-unit>
        <trans-unit id="be132e0b64312cab1412b3c061af9dbcd07c2db2" translate="yes" xml:space="preserve">
          <source>This data can also be specified explicitly in the user configuration file. This file is to contain lines of configuration parameters (each terminated with a full stop). Some parameters add data to the configuration (such as host and nameserver), others overwrite any previous settings (such as domain and lookup). The user configuration file is always examined last in the configuration process, making it possible for the user to override any default values or previously made settings. Call &lt;code&gt;inet:get_rc()&lt;/code&gt; to view the state of the &lt;code&gt;inet&lt;/code&gt; configuration database.</source>
          <target state="translated">このデータは、ユーザー構成ファイルで明示的に指定することもできます。このファイルには、構成パラメーターの行が含まれます（それぞれが完全停止で終了します）。一部のパラメーターはデータを構成に追加し（ホストやネームサーバーなど）、他のパラメーターは以前の設定（ドメインやルックアップなど）を上書きします。ユーザー構成ファイルは常に構成プロセスの最後に検査されるため、ユーザーはデフォルト値や以前に行った設定を上書きできます。 &lt;code&gt;inet:get_rc()&lt;/code&gt; を呼び出して、 &lt;code&gt;inet&lt;/code&gt; 構成データベースの状態を表示します。</target>
        </trans-unit>
        <trans-unit id="48f25fc645975c60f249d68b5dd230f51d28d68c" translate="yes" xml:space="preserve">
          <source>This date and time identifier has the same format as the XML type &lt;code&gt;dateTime&lt;/code&gt; and is compliant with RFC 3339 Date and Time on the Internet Timestamps. The format is as follows:</source>
          <target state="translated">この日付と時刻の識別子は、XML型の &lt;code&gt;dateTime&lt;/code&gt; と同じ形式で、インターネットタイムスタンプのRFC 3339の日付と時刻に準拠しています。形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="738523548a30e709bb5b81f10988c30ec76d3772" translate="yes" xml:space="preserve">
          <source>This defines a local function handler that is called with:</source>
          <target state="translated">で呼び出されるローカル関数のハンドラを定義します。</target>
        </trans-unit>
        <trans-unit id="948cd7e2c415cc3a421a26b31393fafc514d648b" translate="yes" xml:space="preserve">
          <source>This defines a non-local function handler that is called with:</source>
          <target state="translated">で呼び出される非ローカル関数ハンドラを定義します。</target>
        </trans-unit>
        <trans-unit id="662f224ab983c6f766721b42aada149c79c7000c" translate="yes" xml:space="preserve">
          <source>This description is far from complete. It will be updated if the protocol is updated. However, the protocols, both from Erlang nodes to the Erlang Port Mapper Daemon (EPMD) and between Erlang nodes are stable since many years.</source>
          <target state="translated">この記述は完全とは程遠いものです。プロトコルが更新されれば更新されます。しかし、ErlangノードからErlang Port Mapper Daemon (EPMD)へのプロトコルとErlangノード間のプロトコルは長年にわたって安定しています。</target>
        </trans-unit>
        <trans-unit id="e8b60a37d6f9b5dab9afb438915682d979c1ca85" translate="yes" xml:space="preserve">
          <source>This diagnostic warns that the variable &lt;code&gt;X&lt;/code&gt; in the pattern is not the same as the variable &lt;code&gt;X&lt;/code&gt; that occurs in the function head.</source>
          <target state="translated">この診断は、変数と警告 &lt;code&gt;X&lt;/code&gt; パターンでは、変数と同じではない &lt;code&gt;X&lt;/code&gt; 関数ヘッドに生じます。</target>
        </trans-unit>
        <trans-unit id="9c0a88d7e60d7e7f1439fe6fcfcc1a50b22440f9" translate="yes" xml:space="preserve">
          <source>This directory is the &lt;strong&gt;installation directory&lt;/strong&gt; of the embedded environment.</source>
          <target state="translated">このディレクトリは、組み込み環境の&lt;strong&gt;インストールディレクトリ&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="7a3cf407193e52ba658ffaccdcac32c81fba9803" translate="yes" xml:space="preserve">
          <source>This disables the use of style sheets and JavaScripts (see &lt;code&gt;&lt;a href=&quot;#table_sorting&quot;&gt;Sorting HTML Table Columns&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">これにより、スタイルシートとJavaScriptの使用が無効になります（ &lt;code&gt;&lt;a href=&quot;#table_sorting&quot;&gt;Sorting HTML Table Columns&lt;/a&gt;&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="5ecec3c07eff61196ca0de8babf79aab0e2d1d31" translate="yes" xml:space="preserve">
          <source>This document describes how to build and install Erlang/OTP-21. Erlang/OTP should be possible to build from source on any Unix/Linux system, including OS X. You are advised to read the whole document before attempting to build and install Erlang/OTP.</source>
          <target state="translated">このドキュメントではErlang/OTP-21をビルドしてインストールする方法を説明しています。Erlang/OTPはOS Xを含むどんなUnix/Linuxシステムでもソースからビルドすることができるはずです。</target>
        </trans-unit>
        <trans-unit id="154342527042516d1b93b9115b8c8965ef041d9a" translate="yes" xml:space="preserve">
          <source>This document describes how to cross compile Erlang/OTP-21. You are advised to read the whole document before attempting to cross compile Erlang/OTP. However, before reading this document, you should read the &lt;code&gt;&lt;a href=&quot;install&quot;&gt;$ERL_TOP/HOWTO/INSTALL.md&lt;/a&gt;&lt;/code&gt; document which describes building and installing Erlang/OTP in general. &lt;code&gt;$ERL_TOP&lt;/code&gt; is the top directory in the source tree.</source>
          <target state="translated">このドキュメントでは、Erlang / OTP-21をクロスコンパイルする方法について説明します。Erlang / OTPをクロスコンパイルする前に、ドキュメント全体を読むことをお勧めします。ただし、このドキュメントを読む前に、Erlang / OTPの構築とインストール全般について説明している &lt;code&gt;&lt;a href=&quot;install&quot;&gt;$ERL_TOP/HOWTO/INSTALL.md&lt;/a&gt;&lt;/code&gt; ドキュメントを読む必要があります。 &lt;code&gt;$ERL_TOP&lt;/code&gt; は、ソースツリーの最上位ディレクトリです。</target>
        </trans-unit>
        <trans-unit id="71a24568f8a61fe472275bbbf1ab8d95f3724c6d" translate="yes" xml:space="preserve">
          <source>This document describes the process of patching an existing OTP installation with one or more Erlang/OTP applications of newer versions than already installed. The tool &lt;code&gt;otp_patch_apply&lt;/code&gt; is available for this specific purpose. It resides in the top directory of the Erlang/OTP source tree.</source>
          <target state="translated">このドキュメントでは、既存のOTPインストールに、すでにインストールされているものより新しいバージョンの1つ以上のErlang / OTPアプリケーションをパッチするプロセスについて説明します。ツール &lt;code&gt;otp_patch_apply&lt;/code&gt; は、この特定の目的に使用できます。Erlang / OTPソースツリーのトップディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="a3d8a881ed785c2bbf80ae1ed7354f59f5918b23" translate="yes" xml:space="preserve">
          <source>This document does not give an introduction to XML. There are a lot of books available that describe XML from different views. At the &lt;code&gt;&lt;a href=&quot;http://www.w3.org&quot;&gt;www.W3.org&lt;/a&gt;&lt;/code&gt; site you will find the &lt;code&gt;&lt;a href=&quot;http://www.w3.org/TR/REC-xml/&quot;&gt;XML 1.0 specification&lt;/a&gt;&lt;/code&gt; and other related specs. One site were you can find tutorials on XML and related specs is &lt;code&gt;&lt;a href=&quot;http://www.zvon.org&quot;&gt;ZVON.org&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このドキュメントでは、XMLの紹介は行いません。さまざまなビューからXMLを説明した書籍がたくさんあります。で &lt;code&gt;&lt;a href=&quot;http://www.w3.org&quot;&gt;www.W3.org&lt;/a&gt;&lt;/code&gt; のサイトあなたは見つけるでしょう &lt;code&gt;&lt;a href=&quot;http://www.w3.org/TR/REC-xml/&quot;&gt;XML 1.0 specification&lt;/a&gt;&lt;/code&gt; およびその他の関連仕様を。XMLと関連する仕様に関するチュートリアルを見つけることができる1つのサイトは &lt;code&gt;&lt;a href=&quot;http://www.zvon.org&quot;&gt;ZVON.org&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="143fad2c70e90531f505c4657ec791c944d5326a" translate="yes" xml:space="preserve">
          <source>This document focuses on the graphical parts of the tool. The concepts are explained in the reference manual for the module &lt;code&gt;reltool&lt;/code&gt;.</source>
          <target state="translated">このドキュメントでは、ツールのグラフィック部分に焦点を当てています。概念は、モジュール &lt;code&gt;reltool&lt;/code&gt; のリファレンスマニュアルで説明されています。</target>
        </trans-unit>
        <trans-unit id="d0a13f41d530fac43cd74427e80d4e61f60e1273" translate="yes" xml:space="preserve">
          <source>This does not reduce the overall time for the upgrade, but it allows checks and purge to be executed in the background before the real upgrade is started.</source>
          <target state="translated">これにより、アップグレードの全体的な時間が短縮されるわけではありませんが、実際のアップグレードが開始される前にバックグラウンドでチェックやパージを実行できるようになります。</target>
        </trans-unit>
        <trans-unit id="05624a0b5087d8c82b1545072e5dc7e9346c97f4" translate="yes" xml:space="preserve">
          <source>This driver is called like the others from Erlang. However, as we use &lt;code&gt;driver_output_term&lt;/code&gt;, there is no need to call &lt;code&gt;binary_to_term&lt;/code&gt;. The Erlang code is in the sample file &lt;code&gt;next_perm.erl&lt;/code&gt;.</source>
          <target state="translated">このドライバーは、Erlangの他のドライバーと同じように呼び出されます。ただし、 &lt;code&gt;driver_output_term&lt;/code&gt; を使用しているため、 &lt;code&gt;binary_to_term&lt;/code&gt; を呼び出す必要はありません。 Erlangコードはサンプルファイル &lt;code&gt;next_perm.erl&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="0d94d056a098777bcb956ee04ca4b41885a25660" translate="yes" xml:space="preserve">
          <source>This driver uses the &lt;code&gt;writev&lt;/code&gt; system call to send data onto the socket. A combination of &lt;code&gt;writev&lt;/code&gt; and the driver output queues is very convenient. An &lt;code&gt;ErlIOVec&lt;/code&gt; structure contains a &lt;code&gt;SysIOVec&lt;/code&gt; (which is equivalent to the &lt;code&gt;struct iovec&lt;/code&gt; structure defined in &lt;code&gt;uio.h&lt;/code&gt;. The &lt;code&gt;ErlIOVec&lt;/code&gt; also contains an array of &lt;code&gt;ErlDrvBinary&lt;/code&gt; pointers, of the same length as the number of buffers in the I/O vector itself. One can use this to allocate the binaries for the queue &quot;manually&quot; in the driver, but here the binary array is filled with &lt;code&gt;NULL&lt;/code&gt; values (line 7). The runtime system then allocates its own buffers when &lt;code&gt;driver_enqv&lt;/code&gt; is called (line 37).</source>
          <target state="translated">このドライバーは、 &lt;code&gt;writev&lt;/code&gt; システムコールを使用してデータをソケットに送信します。 &lt;code&gt;writev&lt;/code&gt; とドライバー出力キューの組み合わせは非常に便利です。AN &lt;code&gt;ErlIOVec&lt;/code&gt; の構造が含ま &lt;code&gt;SysIOVec&lt;/code&gt; と等価である（ &lt;code&gt;struct iovec&lt;/code&gt; で定義された構造 &lt;code&gt;uio.h&lt;/code&gt; を。 &lt;code&gt;ErlIOVec&lt;/code&gt; はまた、アレイ含ま &lt;code&gt;ErlDrvBinary&lt;/code&gt; の I / Oベクトル自体のバッファの数と同じ長さのポインタを、一缶これを使用して、ドライバーのキューにバイナリを手動で割り当てますが、ここではバイナリ配列に &lt;code&gt;NULL&lt;/code&gt; 値が入力されています（7行目）。ランタイムシステムは、 &lt;code&gt;driver_enqv&lt;/code&gt; が呼び出されます（37行目）。</target>
        </trans-unit>
        <trans-unit id="08f20d866bfb101e15cb4fdb27b1335c719c4f1c" translate="yes" xml:space="preserve">
          <source>This driver was written before the runtime system had SMP support. The driver will still function in the runtime system with SMP support, but performance will suffer from lock contention on the driver lock used for the driver. This can be alleviated by reviewing and perhaps rewriting the code so that each instance of the driver safely can execute in parallel. When instances safely can execute in parallel, it is safe to enable instance-specific locking on the driver. This is done by passing &lt;code&gt;&lt;a href=&quot;driver_entry#driver_flags&quot;&gt;ERL_DRV_FLAG_USE_PORT_LOCKING&lt;/a&gt;&lt;/code&gt; as a driver flag. This is left as an exercise for the reader.</source>
          <target state="translated">このドライバーは、ランタイムシステムがSMPをサポートする前に作成されました。ドライバーは、SMPサポートを備えたランタイムシステムでも機能しますが、ドライバーに使用されるドライバーロックでのロック競合によりパフォーマンスが低下します。これは、ドライバーの各インスタンスが安全に並列実行できるようにコードを確認し、場合によってはコードを書き換えることによって軽減できます。インスタンスが安全に並列実行できる場合、ドライバーでインスタンス固有のロックを有効にしても安全です。これは、 &lt;code&gt;&lt;a href=&quot;driver_entry#driver_flags&quot;&gt;ERL_DRV_FLAG_USE_PORT_LOCKING&lt;/a&gt;&lt;/code&gt; をドライバーフラグとして渡すことで行われます。これは読者のための演習として残されています。</target>
        </trans-unit>
        <trans-unit id="c64c900bac343dda7e6756119d5d4e6241d815d7" translate="yes" xml:space="preserve">
          <source>This effectively closes down the Erlang node. Therefore, use the erl scheme instead, until this security breach is fixed.</source>
          <target state="translated">これは効果的にErlangノードを閉じてしまいます。したがって、このセキュリティ違反が修正されるまでは、代わりに erl スキームを使ってください。</target>
        </trans-unit>
        <trans-unit id="bc0795bd08428b2fedc177925549e5f08fa86748" translate="yes" xml:space="preserve">
          <source>This element has a total size of 4*8 = 32 bits, and it contains a signed integer in little-endian order.</source>
          <target state="translated">この要素は、4*8=32 ビットの合計サイズを持ち、リトルエンディアン順の符号付き整数を含みます。</target>
        </trans-unit>
        <trans-unit id="60545e850b697ee47719a2ce1a4b108461f703aa" translate="yes" xml:space="preserve">
          <source>This enables references to the fields of the record by name. For example, if &lt;code&gt;P&lt;/code&gt; is a variable whose value is a &lt;code&gt;person&lt;/code&gt; record, the following code access the name and address fields of the records:</source>
          <target state="translated">これにより、レコードのフィールドを名前で参照できます。たとえば、 &lt;code&gt;P&lt;/code&gt; が値が &lt;code&gt;person&lt;/code&gt; レコードである変数の場合、次のコードはレコードの名前フィールドと住所フィールドにアクセスします。</target>
        </trans-unit>
        <trans-unit id="aa641702f4a74845596c27dedfc3c223048bd207" translate="yes" xml:space="preserve">
          <source>This encoding has many similarities to UTF-8, but the basic unit is a 16-bit number. This means that all characters occupy at least two bytes, and some high numbers four bytes. Some programs, libraries, and operating systems claiming to use UTF-16 only allow for characters that can be stored in one 16-bit entity, which is usually sufficient to handle living languages. As the basic unit is more than one byte, byte-order issues occur, which is why UTF-16 exists in both a big-endian and a little-endian variant.</source>
          <target state="translated">このエンコーディングはUTF-8と多くの類似点がありますが、基本単位は16ビットの数値です。こ れは、 すべてのキ ャ ラ ク タ が少な く と も 2 バ イ ト を占め、 中には 4 バ イ ト を占める高い数値もあ る こ と を意味 し ます。UTF-16を使おうと主張するプログラムやライブラリ、オペレーティングシステムの中には、1つの16ビットの実体に格納できる文字だけを許可しているものもありますが、これは通常、生きた言語を扱うのに十分なものです。基本単位が 1 バ イ ト 以上であ る ため、 バ イ ト 順序の問題が発生す る ので、 UTF-16 はビ ッ グエンデ ィ ア ン と リ ト ルエンデ ィ ア ン の両方の変種で存在し ます。</target>
        </trans-unit>
        <trans-unit id="57b04c69f42e5cd6d283dd11cf050111e35a9d54" translate="yes" xml:space="preserve">
          <source>This entry is normally not shown. It signifies that getting the rest of the information about this scheduler failed for some reason.</source>
          <target state="translated">このエントリは通常表示されません。これは、何らかの理由でこのスケジューラの残りの情報の取得に失敗したことを示しています。</target>
        </trans-unit>
        <trans-unit id="1ee6d539dd946aea2f2282406d3b99f607f84e26" translate="yes" xml:space="preserve">
          <source>This entry is shown only if there is a current process. It is similar to &lt;code&gt;&lt;a href=&quot;#proc_data&quot;&gt;&lt;strong&gt;=proc_stack&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;, except that only the function frames are shown (that is, the stack variables are omitted). Also, only the top and bottom part of the stack are shown. If the stack is small (&amp;lt; 512 slots), the entire stack is shown. Otherwise the entry &lt;strong&gt;skipping ## slots&lt;/strong&gt; is shown, where &lt;code&gt;##&lt;/code&gt; is replaced by the number of slots that has been skipped.</source>
          <target state="translated">このエントリは、現在のプロセスがある場合にのみ表示されます。これは、関数フレームのみが表示される（つまり、スタック変数が省略される）ことを除いて、 &lt;code&gt;&lt;a href=&quot;#proc_data&quot;&gt;&lt;strong&gt;=proc_stack&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; に似ています。また、スタックの上部と下部のみが表示されます。スタックが小さい場合（&amp;lt;512スロット）、スタック全体が表示されます。それ以外の場合は、&lt;strong&gt;##スロットをスキップ&lt;/strong&gt;するエントリが表示され&lt;strong&gt;ます&lt;/strong&gt;。 &lt;code&gt;##&lt;/code&gt; は、&lt;strong&gt;スキップ&lt;/strong&gt;されたスロットの数に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="f4c1826f8578bafadcea5382ece74a9e3ca2e0c8" translate="yes" xml:space="preserve">
          <source>This equals:</source>
          <target state="translated">これはイコールです。</target>
        </trans-unit>
        <trans-unit id="8ee9f6a74af74dded0ab21396013fd65cb0cdb5f" translate="yes" xml:space="preserve">
          <source>This error is very similar to &lt;code&gt;match_limit&lt;/code&gt;, but occurs when the internal match function of PCRE is &quot;recursively&quot; called more times than the &lt;code&gt;match_limit_recursion&lt;/code&gt; limit, which defaults to 10,000,000 as well. Notice that as long as the &lt;code&gt;match_limit&lt;/code&gt; and &lt;code&gt;match_limit_default&lt;/code&gt; values are kept at the default values, the &lt;code&gt;match_limit_recursion&lt;/code&gt; error cannot occur, as the &lt;code&gt;match_limit&lt;/code&gt; error occurs before that (each recursive call is also a call, but not conversely). Both limits can however be changed, either by setting limits directly in the regular expression string (see section &lt;code&gt;&lt;a href=&quot;#regexp_syntax_details&quot;&gt;PCRE Regular Eexpression Details&lt;/a&gt;&lt;/code&gt;) or by specifying options to &lt;code&gt;run/3&lt;/code&gt;.</source>
          <target state="translated">このエラーは &lt;code&gt;match_limit&lt;/code&gt; とよく似ていますが、PCREの内部一致関数が &lt;code&gt;match_limit_recursion&lt;/code&gt; 制限よりも「再帰的に」呼び出された場合に発生します。これはデフォルトで10,000,000にも設定されています。限りとすることをお知らせ &lt;code&gt;match_limit&lt;/code&gt; と &lt;code&gt;match_limit_default&lt;/code&gt; 値はデフォルト値に保たれ、 &lt;code&gt;match_limit_recursion&lt;/code&gt; のようなエラーが発生することはできません &lt;code&gt;match_limit&lt;/code&gt; のエラーが発生したこと（各再帰呼び出しも、コールではなく、逆に）前に。ただし、両方の制限は、正規表現文字列に直接制限を設定するか（セクション &lt;code&gt;&lt;a href=&quot;#regexp_syntax_details&quot;&gt;PCRE Regular Eexpression Details&lt;/a&gt;&lt;/code&gt; 参照）、または &lt;code&gt;run/3&lt;/code&gt; にオプションを指定することによって変更できます。。</target>
        </trans-unit>
        <trans-unit id="b2c6321b6b0826055e2105517a81fb4bbe80e26b" translate="yes" xml:space="preserve">
          <source>This event gives initial test run information that can be interpreted as: &quot;This test run will execute &lt;code&gt;Tests&lt;/code&gt; separate tests, in total containing &lt;code&gt;Cases&lt;/code&gt; number of test cases, in &lt;code&gt;Suites&lt;/code&gt; number of suites&quot;. However, if a test case group with a repeat property exists in any test, the total number of test cases cannot be calculated (unknown).</source>
          <target state="translated">このイベントは、次のように解釈できる初期テスト実行情報を提供します：「このテスト実行は、 &lt;code&gt;Tests&lt;/code&gt; 個別のテストを実行し、合計で、 &lt;code&gt;Cases&lt;/code&gt; 数のテストケースを含み、 &lt;code&gt;Suites&lt;/code&gt; 数はスイートです」。ただし、繰り返しプロパティを持つテストケースグループがいずれかのテストに存在する場合、テストケースの総数は計算できません（不明）。</target>
        </trans-unit>
        <trans-unit id="157a7ac786729b7a02e45935d66765ea641c0a63" translate="yes" xml:space="preserve">
          <source>This event indicates that &lt;code&gt;Common Test&lt;/code&gt; has finished initial preparations and begins executing test cases.</source>
          <target state="translated">このイベントは、 &lt;code&gt;Common Test&lt;/code&gt; が初期準備を完了し、テストケースの実行を開始したことを示しています。</target>
        </trans-unit>
        <trans-unit id="a311dceedd521d1962d136632b3e667b19bb56be" translate="yes" xml:space="preserve">
          <source>This event indicates that the last test case has been executed and &lt;code&gt;Common Test&lt;/code&gt; is shutting down.</source>
          <target state="translated">このイベントは、最後のテストケースが実行され、 &lt;code&gt;Common Test&lt;/code&gt; がシャットダウンしていることを示しています。</target>
        </trans-unit>
        <trans-unit id="e53e8156bb201879d980af4d7b34c6aceaecd401" translate="yes" xml:space="preserve">
          <source>This event indicates that the logging process of &lt;code&gt;Common Test&lt;/code&gt; has started successfully and is ready to receive I/O messages.</source>
          <target state="translated">このイベントは、 &lt;code&gt;Common Test&lt;/code&gt; のロギングプロセスが正常に開始され、I / Oメッセージを受信する準備ができていることを示しています。</target>
        </trans-unit>
        <trans-unit id="76a023ae70d60675cb788ca95f5784d5e17403bb" translate="yes" xml:space="preserve">
          <source>This event indicates that the logging process of &lt;code&gt;Common Test&lt;/code&gt; was shut down at the end of the test run.</source>
          <target state="translated">このイベントは、 &lt;code&gt;Common Test&lt;/code&gt; ロギングプロセスがテスト実行の最後にシャットダウンされたことを示しています。</target>
        </trans-unit>
        <trans-unit id="1defde33c0ddbc9bf09303976e2df4c21eb56168" translate="yes" xml:space="preserve">
          <source>This event informs about the end of a test case or a configuration function (see event &lt;code&gt;tc_start&lt;/code&gt; for details on element &lt;code&gt;FuncOrGroup&lt;/code&gt;). With this event comes the final result of the function in question. It is possible to determine on the top level of &lt;code&gt;Result&lt;/code&gt; if the function was successful, skipped (by the user), or if it failed.</source>
          <target state="translated">このイベントは、テストケースまたは構成関数の終了について通知します（要素 &lt;code&gt;FuncOrGroup&lt;/code&gt; の詳細については、イベント &lt;code&gt;tc_start&lt;/code&gt; を参照してください）。このイベントには、問題の関数の最終結果が含まれます。 &lt;code&gt;Result&lt;/code&gt; の最上位で、関数が成功したか、（ユーザーによって）スキップされたか、または失敗したかを判断できます。</target>
        </trans-unit>
        <trans-unit id="196853db3112d60fc49c52cb43e5304105859b69" translate="yes" xml:space="preserve">
          <source>This event informs about the start of a test case, or a group configuration function. The event is sent also for &lt;code&gt;init_per_suite&lt;/code&gt; and &lt;code&gt;end_per_suite&lt;/code&gt;, but not for &lt;code&gt;init_per_testcase&lt;/code&gt; and &lt;code&gt;end_per_testcase&lt;/code&gt;. If a group configuration function starts, the group name and execution properties are also specified.</source>
          <target state="translated">このイベントは、テストケースの開始、またはグループ構成機能について通知します。イベントは、のためにも送信され &lt;code&gt;init_per_suite&lt;/code&gt; と &lt;code&gt;end_per_suite&lt;/code&gt; ではなくのため &lt;code&gt;init_per_testcase&lt;/code&gt; と &lt;code&gt;end_per_testcase&lt;/code&gt; 。グループ設定機能が起動すると、グループ名と実行プロパティも指定されます。</target>
        </trans-unit>
        <trans-unit id="55e3d00fdb284c9c490ae4f7d70ddb7a214409ea" translate="yes" xml:space="preserve">
          <source>This event is generated by &lt;code&gt;alarm_handler:clear_alarm(AlarmId)&lt;/code&gt;.</source>
          <target state="translated">このイベントは、 &lt;code&gt;alarm_handler:clear_alarm(AlarmId)&lt;/code&gt; によって生成されます。</target>
        </trans-unit>
        <trans-unit id="3c14d9a9fed395d121d6715f83a9e812993ef517" translate="yes" xml:space="preserve">
          <source>This event is generated by &lt;code&gt;alarm_handler:set_alarm({AlarmId, AlarmDecsr})&lt;/code&gt;.</source>
          <target state="translated">このイベントは、 &lt;code&gt;alarm_handler:set_alarm({AlarmId, AlarmDecsr})&lt;/code&gt; によって生成されます。</target>
        </trans-unit>
        <trans-unit id="87c6d6cfcfdec46a1017f209d71402b88e99f222" translate="yes" xml:space="preserve">
          <source>This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#close-2&quot;&gt;ssh_connection:close/2&lt;/a&gt;&lt;/code&gt;. Both the handling of this event and sending it are taken care of by the &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; behavior.</source>
          <target state="translated">このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#close-2&quot;&gt;ssh_connection:close/2&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。このイベントの処理と送信は、 &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; 動作によって処理されます。</target>
        </trans-unit>
        <trans-unit id="3bce9afff012f4ef208193d1a3f362891fa380a1" translate="yes" xml:space="preserve">
          <source>This event is sent at the start of each test case (and configuration function except &lt;code&gt;init/end_per_testcase&lt;/code&gt;) and carries information about the full name (that is, the file name including the absolute directory path) of the current test case log file.</source>
          <target state="translated">このイベントは、各テストケース（および &lt;code&gt;init/end_per_testcase&lt;/code&gt; を除く構成関数）の開始時に送信され、現在のテストケースログファイルのフルネーム（つまり、絶対ディレクトリパスを含むファイル名）に関する情報を伝達します。</target>
        </trans-unit>
        <trans-unit id="e4a38f01911d280761b98159e93b62180b939625" translate="yes" xml:space="preserve">
          <source>This event is sent for every test case or configuration function that &lt;code&gt;Common Test&lt;/code&gt; has skipped automatically because of either a failed &lt;code&gt;init_per_suite&lt;/code&gt; or &lt;code&gt;init_per_group&lt;/code&gt;, a failed &lt;code&gt;require&lt;/code&gt; in &lt;code&gt;suite/0&lt;/code&gt;, or a failed test case in a sequence. Notice that this event is never received as a result of a test case getting skipped because of &lt;code&gt;init_per_testcase&lt;/code&gt; failing, as that information is carried with event &lt;code&gt;tc_done&lt;/code&gt;. If a failed test case belongs to a test case group, the second data element is a tuple &lt;code&gt;{FuncName,GroupName}&lt;/code&gt;, otherwise only the function name.</source>
          <target state="translated">このイベントは、そのすべてのテストケースまたは構成機能のために送信される &lt;code&gt;Common Test&lt;/code&gt; 自動的にスキップされたためのいずれか失敗 &lt;code&gt;init_per_suite&lt;/code&gt; 又は &lt;code&gt;init_per_group&lt;/code&gt; 、失敗 &lt;code&gt;require&lt;/code&gt; に &lt;code&gt;suite/0&lt;/code&gt; 、または配列に失敗したテストケース。この情報はイベント &lt;code&gt;tc_done&lt;/code&gt; で伝達されるため、 &lt;code&gt;init_per_testcase&lt;/code&gt; が失敗したためにテストケースがスキップされた結果、このイベントが受信されることはありません。失敗したテストケースがテストケースグループに属している場合、2番目のデータ要素はタプル &lt;code&gt;{FuncName,GroupName}&lt;/code&gt; です。それ以外の場合は、関数名のみです。</target>
        </trans-unit>
        <trans-unit id="85637c33d8358bfa807af40ed5b12cab4e94ad14" translate="yes" xml:space="preserve">
          <source>This event occurs when a transaction that caused a modification to the database is completed. It is useful for determining when a set of table events (see the next section), caused by a given activity, have been sent. Once this event is received, it is guaranteed that no further table events with the same &lt;code&gt;ActivityID&lt;/code&gt; will be received. Notice that this event can still be received even if no table events with a corresponding &lt;code&gt;ActivityID&lt;/code&gt; were received, depending on the tables to which the receiving process is subscribed.</source>
          <target state="translated">このイベントは、データベースの変更を引き起こしたトランザクションが完了したときに発生します。これは、特定のアクティビティによって発生した一連のテーブルイベント（次のセクションを参照）がいつ送信されたかを判断するのに役立ちます。このイベントが受信されると、同じ &lt;code&gt;ActivityID&lt;/code&gt; のテーブルイベントがそれ以上受信されないことが保証されます。受信プロセスがサブスクライブしているテーブルによっては、対応する &lt;code&gt;ActivityID&lt;/code&gt; を持つテーブルイベントが受信されなかった場合でも、このイベントを受信できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f45e922ec57563cdea35247f1f7ed0e1f7d09af7" translate="yes" xml:space="preserve">
          <source>This event specifies that a test case was skipped by the user. It is only received if the skip is declared in a test specification. Otherwise, user skip information is received as a &lt;code&gt;{skipped,SkipReason}&lt;/code&gt; result in event &lt;code&gt;tc_done&lt;/code&gt; for the test case. If a skipped test case belongs to a test case group, the second data element is a tuple &lt;code&gt;{FuncName,GroupName}&lt;/code&gt;, otherwise only the function name.</source>
          <target state="translated">このイベントは、テストケースがユーザーによってスキップされたことを示します。スキップがテスト仕様で宣言されている場合にのみ受信されます。それ以外の場合、ユーザーのスキップ情報は、テストケースのイベント &lt;code&gt;tc_done&lt;/code&gt; の &lt;code&gt;{skipped,SkipReason}&lt;/code&gt; 結果として受信されます。スキップされたテストケースがテストケースグループに属する場合、2番目のデータ要素はタプル &lt;code&gt;{FuncName,GroupName}&lt;/code&gt; です。それ以外の場合は、関数名のみです。</target>
        </trans-unit>
        <trans-unit id="9a24b66f55b1608bf70f4eb21d0c378bcfcc90e0" translate="yes" xml:space="preserve">
          <source>This example back up the contents of the registry to the specified &lt;code&gt;Mnesia&lt;/code&gt; table &lt;code&gt;&quot;mtab&quot;&lt;/code&gt;. Once a registry has been backed up to &lt;code&gt;Mnesia&lt;/code&gt; like this, more backups only affect objects that have been modified since the most recent backup, that is, objects that have been created, changed, or deleted. The backup operation is done as a single atomic transaction, so that either the entire backup is performed or none of it.</source>
          <target state="translated">この例では、レジストリの内容を指定された &lt;code&gt;Mnesia&lt;/code&gt; テーブル &lt;code&gt;&quot;mtab&quot;&lt;/code&gt; にバックアップします。レジストリがこのように &lt;code&gt;Mnesia&lt;/code&gt; にバックアップされると、より多くのバックアップは、最新のバックアップ以降に変更されたオブジェクト、つまり作成、変更、または削除されたオブジェクトにのみ影響します。バックアップ操作は単一のアトミックトランザクションとして実行されるため、バックアップ全体が実行されるか、まったく実行されません。</target>
        </trans-unit>
        <trans-unit id="8e5008e4f2f2212bcc7d9051d31593661ec6ce4d" translate="yes" xml:space="preserve">
          <source>This example concerns the body of the fun. Assume that all employee numbers beginning with zero (&lt;code&gt;0&lt;/code&gt;) must be changed to begin with one (&lt;code&gt;1&lt;/code&gt;) instead, and that we want to create the list &lt;code&gt;[{&amp;lt;Old empno&amp;gt;,&amp;lt;New empno&amp;gt;}]&lt;/code&gt;:</source>
          <target state="translated">この例は、楽しみの本体に関するものです。代わりに、ゼロ（ &lt;code&gt;0&lt;/code&gt; ）で始まるすべての従業員番号を1（ &lt;code&gt;1&lt;/code&gt; ）で始まるように変更する必要があり、リスト &lt;code&gt;[{&amp;lt;Old empno&amp;gt;,&amp;lt;New empno&amp;gt;}]&lt;/code&gt; を作成するとします。</target>
        </trans-unit>
        <trans-unit id="b9cd78123d895f5c9e7c353280ff2f48b8ea86e8" translate="yes" xml:space="preserve">
          <source>This example concerns the use of raw options. Consider a Linux system where you want to set option &lt;code&gt;TCP_LINGER2&lt;/code&gt; on protocol level &lt;code&gt;IPPROTO_TCP&lt;/code&gt; in the stack. You know that on this particular system it defaults to 60 (seconds), but you want to lower it to 30 for a particular socket. Option &lt;code&gt;TCP_LINGER2&lt;/code&gt; is not explicitly supported by &lt;code&gt;inet&lt;/code&gt;, but you know that the protocol level translates to number 6, the option number to number 8, and the value is to be specified as a 32-bit integer. You can use this code line to set the option for the socket named &lt;code&gt;Sock&lt;/code&gt;:</source>
          <target state="translated">この例は、生のオプションの使用に関するものです。スタックのプロトコルレベル &lt;code&gt;IPPROTO_TCP&lt;/code&gt; でオプション &lt;code&gt;TCP_LINGER2&lt;/code&gt; を設定するLinuxシステムを考えます。この特定のシステムでは、デフォルトで60（秒）に設定されていますが、特定のソケットでは30に下げる必要があります。オプション &lt;code&gt;TCP_LINGER2&lt;/code&gt; は &lt;code&gt;inet&lt;/code&gt; によって明示的にサポートされていませんが、プロトコルレベルは数値6に変換され、オプション番号は数値8に変換され、値は32ビット整数として指定されます。次のコード行を使用して、 &lt;code&gt;Sock&lt;/code&gt; というソケットのオプションを設定できます。</target>
        </trans-unit>
        <trans-unit id="530266a6d25402966cea0cb8b232a85a4ff316d8" translate="yes" xml:space="preserve">
          <source>This example gives a rough idea of how the new primitives can be used and what kind of output it produces.</source>
          <target state="translated">この例では、新しいプリミティブがどのように使われ、どのような出力が得られるのかを大まかに把握することができます。</target>
        </trans-unit>
        <trans-unit id="0ddfeb93d9d64b8470aa81333fa112e188816f26" translate="yes" xml:space="preserve">
          <source>This example has two functions:</source>
          <target state="translated">この例には2つの機能があります。</target>
        </trans-unit>
        <trans-unit id="2408082cfd117d50361179146f7eb693e76f1486" translate="yes" xml:space="preserve">
          <source>This example illustrates the most used calls in match specifications for &lt;code&gt;dbg&lt;/code&gt;. The other, more esoteric, calls are listed and explained in &lt;code&gt;Match specifications in Erlang&lt;/code&gt; in ERTS User's Guide, as they are beyond the scope of this description.</source>
          <target state="translated">この例は、 &lt;code&gt;dbg&lt;/code&gt; の一致指定で最もよく使用される呼び出しを示しています。その他の、より難解な呼び出しは、この説明の範囲を超えているため、ERTSユーザーガイドの &lt;code&gt;Match specifications in Erlang&lt;/code&gt; リストされ、説明されています。</target>
        </trans-unit>
        <trans-unit id="033dde8b7dbcadc4f83a911a11c711666e02a4d2" translate="yes" xml:space="preserve">
          <source>This example is, as can be seen, run in an environment where the terminal supports Unicode input and output.</source>
          <target state="translated">この例は、見ての通り、端末が Unicode 入出力をサポートしている環境で実行されています。</target>
        </trans-unit>
        <trans-unit id="140c4136b4fe3317fa34f309b20873f708ff5543" translate="yes" xml:space="preserve">
          <source>This example only shows the message passing logic - no attempt has been made to provide a nice graphical user interface, although this can also be done in Erlang.</source>
          <target state="translated">この例はメッセージパッシングのロジックを示しているだけです-素敵なグラフィカルユーザインタフェースを提供する試みはしていません。</target>
        </trans-unit>
        <trans-unit id="d78541768b15176d63561103133f9d3936557387" translate="yes" xml:space="preserve">
          <source>This example requires no special knowledge of match specifications to understand. The head of the fun matches what you want to filter out and the body returns what you want returned. As long as the fun can be kept within the limits of the match specifications, there is no need to transfer all table data to the process for filtering as in the &lt;code&gt;ets:foldr/3&lt;/code&gt; example. It is easier to read than the &lt;code&gt;ets:foldr/3&lt;/code&gt; example, as the select call in itself discards anything that does not match, while the fun of the &lt;code&gt;ets:foldr/3&lt;/code&gt; call needs to handle both the elements matching and the ones not matching.</source>
          <target state="translated">この例を理解するために、一致仕様の特別な知識は必要ありません。楽しみの頭はあなたがフィルタリングしたいものと一致し、体はあなたが返したいものを返します。楽しみを一致仕様の制限内に保つことができる限り、 &lt;code&gt;ets:foldr/3&lt;/code&gt; の例のように、すべてのテーブルデータをフィルタリングのためのプロセスに転送する必要はありません。より読みやすい &lt;code&gt;ets:foldr/3&lt;/code&gt; 例、自身で選択呼び出しがの楽しみながら、一致しないものを捨てるよう &lt;code&gt;ets:foldr/3&lt;/code&gt; の呼び出しが一致し、どれが一致していない要素の両方を処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="742fc993326979930f137bea9115c77d5cbe9464" translate="yes" xml:space="preserve">
          <source>This example showed the use of &lt;code&gt;trunc&lt;/code&gt;. It is easier to use the Erlang operator &lt;code&gt;rem&lt;/code&gt; that gives the remainder after division, for example:</source>
          <target state="translated">この例では、 &lt;code&gt;trunc&lt;/code&gt; の使用を示しました。除算後に余りを与えるErlang演算子 &lt;code&gt;rem&lt;/code&gt; を使用する方が簡単です。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="576a654b801abd888323686420eb2be87d1e88d9" translate="yes" xml:space="preserve">
          <source>This example shows how to construct a key reference that is used in a sign operation. The actual key is stored in the engine that is loaded at prompt 1.</source>
          <target state="translated">この例では、符号操作で使用されるキー参照を構築する方法を示します。実際のキーは、プロンプト 1 でロードされるエンジンに格納されています。</target>
        </trans-unit>
        <trans-unit id="8fc9c6e1c892b5ff940b330284e799595fb70aed" translate="yes" xml:space="preserve">
          <source>This example shows how to create a database called &lt;code&gt;Company&lt;/code&gt; and the relationships shown in the following diagram:</source>
          <target state="translated">この例は、 &lt;code&gt;Company&lt;/code&gt; というデータベースを作成する方法と、次の図に示す関係を示しています。</target>
        </trans-unit>
        <trans-unit id="4ce8c4280e865227838d76a758d3b12d799a6916" translate="yes" xml:space="preserve">
          <source>This example shows that a function is generated by the compiler that returns a valid Erlang representation of the value, although the value is of a complex type.</source>
          <target state="translated">この例では、値が複雑な型であるにもかかわらず、有効なErlang表現を返す関数がコンパイラによって生成されていることを示しています。</target>
        </trans-unit>
        <trans-unit id="50ace829c34f91c2367e23e83ddbe5d2a03a399f" translate="yes" xml:space="preserve">
          <source>This example specifies the same tests as the original example. But now if started with a call to &lt;code&gt;ct_master:run(TestSpecName)&lt;/code&gt;, test &lt;code&gt;t1&lt;/code&gt; is executed on node &lt;code&gt;ct_node@host_x&lt;/code&gt; (&lt;code&gt;node1&lt;/code&gt;), test &lt;code&gt;t2&lt;/code&gt; on &lt;code&gt;ct_node@host_y&lt;/code&gt; (&lt;code&gt;node2&lt;/code&gt;) and test &lt;code&gt;t3&lt;/code&gt; on both &lt;code&gt;node1&lt;/code&gt; and &lt;code&gt;node2&lt;/code&gt;. Configuration file &lt;code&gt;t1&lt;/code&gt; is only read on &lt;code&gt;node1&lt;/code&gt; and configuration file &lt;code&gt;t2&lt;/code&gt; only on &lt;code&gt;node2&lt;/code&gt;, while the configuration file &lt;code&gt;t3&lt;/code&gt; is read on both &lt;code&gt;node1&lt;/code&gt; and &lt;code&gt;node2&lt;/code&gt;. Both test nodes write log files to the same directory. (However, the &lt;code&gt;Common Test&lt;/code&gt; Master node uses a different log directory than the test nodes.)</source>
          <target state="translated">この例では、元の例と同じテストを指定しています。ただし、 &lt;code&gt;ct_master:run(TestSpecName)&lt;/code&gt; の呼び出しで開始した場合、テスト &lt;code&gt;t1&lt;/code&gt; はノード &lt;code&gt;ct_node@host_x&lt;/code&gt; （ &lt;code&gt;node1&lt;/code&gt; ）で実行され、テスト &lt;code&gt;t2&lt;/code&gt; は &lt;code&gt;ct_node@host_y&lt;/code&gt; （ &lt;code&gt;node2&lt;/code&gt; ）で実行され、テスト &lt;code&gt;t3&lt;/code&gt; は &lt;code&gt;node1&lt;/code&gt; と &lt;code&gt;node2&lt;/code&gt; の両方で実行されます。構成ファイル &lt;code&gt;t1&lt;/code&gt; は &lt;code&gt;node1&lt;/code&gt; でのみ読み取られ、構成ファイル &lt;code&gt;t2&lt;/code&gt; は &lt;code&gt;node2&lt;/code&gt; でのみ読み取られますが、構成ファイル &lt;code&gt;t3&lt;/code&gt; は &lt;code&gt;node1&lt;/code&gt; と &lt;code&gt;node2&lt;/code&gt; の両方で読み取られます。両方のテストノードが同じディレクトリにログファイルを書き込みます。（ただし、 &lt;code&gt;Common Test&lt;/code&gt; Masterノードはテストノードとは異なるログディレクトリを使用します。）</target>
        </trans-unit>
        <trans-unit id="f919e3be6e1b9a58c077da63d3fa4b652b1b834d" translate="yes" xml:space="preserve">
          <source>This example uses &lt;code&gt;gen_statem:call/2&lt;/code&gt;, which waits for a reply from the server. The reply is sent with a &lt;code&gt;{reply,From,Reply}&lt;/code&gt; tuple in an action list in the &lt;code&gt;{keep_state, ...}&lt;/code&gt; tuple that retains the current state. This return form is convenient when you want to stay in the current state but do not know or care about what it is.</source>
          <target state="translated">この例では、サーバーからの応答を待機する &lt;code&gt;gen_statem:call/2&lt;/code&gt; を使用しています。返信は、現在の状態を保持する &lt;code&gt;{keep_state, ...}&lt;/code&gt; タプルのアクションリストの &lt;code&gt;{reply,From,Reply}&lt;/code&gt; タプルとともに送信されます。この戻りフォームは、現在の状態を維持したいが、それが何であるかを知らないか気にしない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="7e5afbec3d662e48a79fce4ee47d58154c988214" translate="yes" xml:space="preserve">
          <source>This example warrants some explanation:</source>
          <target state="translated">この例は、いくつかの説明を保証するものです。</target>
        </trans-unit>
        <trans-unit id="b3dcc44bb471a63d75b0052d4b54fe647a04cb07" translate="yes" xml:space="preserve">
          <source>This example with the &lt;code&gt;file&lt;/code&gt; module operations is not necessary to use directly, as that is what function &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; in principle does.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; モジュール操作を使用したこの例は、直接使用する必要はありません。これは、 &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; 関数が原則として実行する機能です。</target>
        </trans-unit>
        <trans-unit id="9e9ac426961d89606271dd5da2f24c9429dfc0a7" translate="yes" xml:space="preserve">
          <source>This expression matches if the expression &lt;code&gt;Expr&lt;/code&gt; is of type map, otherwise it fails with an exception &lt;code&gt;badmatch&lt;/code&gt;.</source>
          <target state="translated">この式は、式 &lt;code&gt;Expr&lt;/code&gt; がマップタイプの場合に一致します。それ以外の場合、例外 &lt;code&gt;badmatch&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="6184c20ff4fb14fe7267625d422557cd4d0fc7b2" translate="yes" xml:space="preserve">
          <source>This expression must be rewritten into the following, to be accepted by the compiler:</source>
          <target state="translated">この式をコンパイラに受け入れられるようにするには、次のように書き換えなければなりません。</target>
        </trans-unit>
        <trans-unit id="87be2665458e0e8a04daa6def7ad816271a337f0" translate="yes" xml:space="preserve">
          <source>This feature also requires &lt;code&gt;&lt;a href=&quot;#M_t&quot;&gt;multiple thread specific instances&lt;/a&gt;&lt;/code&gt; to be enabled. When enabling this feature, multiple thread-specific instances are enabled if not already enabled, and the &lt;code&gt;aoffcbf&lt;/code&gt; strategy is enabled if the current strategy does not support abandoned carriers. This feature can be enabled on all allocators based on the &lt;code&gt;alloc_util&lt;/code&gt; framework, except &lt;code&gt;temp_alloc&lt;/code&gt; (which would be pointless).</source>
          <target state="translated">この機能では、 &lt;code&gt;&lt;a href=&quot;#M_t&quot;&gt;multiple thread specific instances&lt;/a&gt;&lt;/code&gt; を有効にする必要もあります。この機能を有効にすると、まだ有効になっていない場合は複数のスレッド固有のインスタンスが有効になり、現在の戦略が放棄されたキャリアをサポートしていない場合は &lt;code&gt;aoffcbf&lt;/code&gt; 戦略が有効になります。この機能は、（無意味な） &lt;code&gt;temp_alloc&lt;/code&gt; を除く、 &lt;code&gt;alloc_util&lt;/code&gt; フレームワークに基づくすべてのアロケーターで有効にできます。</target>
        </trans-unit>
        <trans-unit id="bab1aaa22d7c52e3e995a41f937d2e85596d7686" translate="yes" xml:space="preserve">
          <source>This feature has been introduced as a temporary workaround for long-executing native code, and native code that does not bump reductions properly in OTP. When these bugs have be fixed, this flag will be removed.</source>
          <target state="translated">この機能は、長時間実行されているネイティブコードや、 OTP で適切に還元をバンプしないネイティブコードに対する一時的な回避策として導入されました。これらのバグが修正されれば、このフラグは削除されます。</target>
        </trans-unit>
        <trans-unit id="f75f84efbe70a72e01ed3ffc4edbe4eb52121806" translate="yes" xml:space="preserve">
          <source>This feature is similar to a lookbehind assertion (described below). However, in this case, the part of the subject before the real match does not have to be of fixed length, as lookbehind assertions do. The use of \K does not interfere with the setting of captured substrings. For example, when the following pattern matches &quot;foobar&quot;, the first substring is still set to &quot;foo&quot;:</source>
          <target state="translated">この機能は、lookbehind アサーション (後述)に似ています。しかし、この場合、lookbehindアサーションのように、実際に一致する前の部分の長さが固定である必要はありません。\Kの使用は、キャプチャされた部分文字列の設定を妨げるものではありません。例えば、以下のパターンが &quot;foobar &quot;にマッチした場合、最初の部分文字列はまだ &quot;foo &quot;に設定されている。</target>
        </trans-unit>
        <trans-unit id="495e6e419f3ba6bc2ae861673f26fe3c4b80e6f5" translate="yes" xml:space="preserve">
          <source>This feature is temporary and will be removed in a future release</source>
          <target state="translated">この機能は一時的なものであり、将来のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="bd4f30e27a6dd0784703ad9bdea45ca916a2edb1" translate="yes" xml:space="preserve">
          <source>This feature is temporary and will be removed in future releases.</source>
          <target state="translated">この機能は一時的なもので、今後のリリースでは削除される予定です。</target>
        </trans-unit>
        <trans-unit id="77b5f46e3e133913367475d2045dfdc254bfa20f" translate="yes" xml:space="preserve">
          <source>This feature must be explicitly enabled with a compiler option or a &lt;code&gt;-compile()&lt;/code&gt; attribute in the source module.</source>
          <target state="translated">この機能は、ソースモジュールのコンパイラオプションまたは &lt;code&gt;-compile()&lt;/code&gt; 属性で明示的に有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="aa96a44c28979dae84ca1a2a0e7d8160bebc38ef" translate="yes" xml:space="preserve">
          <source>This feature was added in Erlang 5.0/OTP R7.</source>
          <target state="translated">この機能はErlang 5.0/OTP R7で追加されました。</target>
        </trans-unit>
        <trans-unit id="1fc9bd5588c9ab451cbffd844cd0ccc06f39f29c" translate="yes" xml:space="preserve">
          <source>This field is either to be equal to &lt;code&gt;ERL_DRV_EXTENDED_MARKER&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;. An old driver (not aware of the extended driver interface) is to set this field to &lt;code&gt;0&lt;/code&gt;. If this field is &lt;code&gt;0&lt;/code&gt;, all the following fields &lt;strong&gt;must&lt;/strong&gt; also be &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;NULL&lt;/code&gt; if it is a pointer field.</source>
          <target state="translated">このフィールドは、 &lt;code&gt;ERL_DRV_EXTENDED_MARKER&lt;/code&gt; または &lt;code&gt;0&lt;/code&gt; のいずれかになります。古いドライバー（拡張ドライバーインターフェイスを認識しない）では、このフィールドを &lt;code&gt;0&lt;/code&gt; に設定します。このフィールドが &lt;code&gt;0&lt;/code&gt; の場合、以下のすべてのフィールドも &lt;code&gt;0&lt;/code&gt; で&lt;strong&gt;なければなりません&lt;/strong&gt;。それがポインターフィールドの場合は &lt;code&gt;NULL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0406d7a19c673109ce77b1bb24bda04bd2987652" translate="yes" xml:space="preserve">
          <source>This field is reserved for the emulator's internal use. The emulator modifies this field, so it is important that the &lt;code&gt;driver_entry&lt;/code&gt; is not declared &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">このフィールドは、エミュレータの内部使用のために予約されています。エミュレータはこのフィールドを変更するため、 &lt;code&gt;driver_entry&lt;/code&gt; が &lt;code&gt;const&lt;/code&gt; として宣言されていないことが重要です。</target>
        </trans-unit>
        <trans-unit id="881f24225a8501e9d8e685397754715f57019f9b" translate="yes" xml:space="preserve">
          <source>This field is reserved for the emulator's internal use. The emulator will modify this field, so it is important that the &lt;code&gt;driver_entry&lt;/code&gt; is not declared &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">このフィールドは、エミュレータの内部使用のために予約されています。エミュレータはこのフィールドを変更するため、 &lt;code&gt;driver_entry&lt;/code&gt; が &lt;code&gt;const&lt;/code&gt; として宣言されていないことが重要です。</target>
        </trans-unit>
        <trans-unit id="d71232de0ecbfffa5c29cf32c925bafa8bc48c5f" translate="yes" xml:space="preserve">
          <source>This field is to equal &lt;code&gt;ERL_DRV_EXTENDED_MAJOR_VERSION&lt;/code&gt; if field &lt;code&gt;extended_marker&lt;/code&gt; equals &lt;code&gt;ERL_DRV_EXTENDED_MARKER&lt;/code&gt;.</source>
          <target state="translated">このフィールドは等しいにある &lt;code&gt;ERL_DRV_EXTENDED_MAJOR_VERSION&lt;/code&gt; フィールド場合 &lt;code&gt;extended_marker&lt;/code&gt; が等しい &lt;code&gt;ERL_DRV_EXTENDED_MARKER&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="ad9c786ae5049c8d53b5e5f11b7a559ebf7746cc" translate="yes" xml:space="preserve">
          <source>This field is to equal &lt;code&gt;ERL_DRV_EXTENDED_MINOR_VERSION&lt;/code&gt; if field &lt;code&gt;extended_marker&lt;/code&gt; equals &lt;code&gt;ERL_DRV_EXTENDED_MARKER&lt;/code&gt;.</source>
          <target state="translated">このフィールドは等しいにある &lt;code&gt;ERL_DRV_EXTENDED_MINOR_VERSION&lt;/code&gt; フィールド場合 &lt;code&gt;extended_marker&lt;/code&gt; が等しい &lt;code&gt;ERL_DRV_EXTENDED_MARKER&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="8e98f5c415766c2c77bb045a0e8a36481a3244e3" translate="yes" xml:space="preserve">
          <source>This field is used to pass driver capability and other information to the runtime system. If field &lt;code&gt;extended_marker&lt;/code&gt; equals &lt;code&gt;ERL_DRV_EXTENDED_MARKER&lt;/code&gt;, it is to contain &lt;code&gt;0&lt;/code&gt; or driver flags (&lt;code&gt;ERL_DRV_FLAG_*&lt;/code&gt;) OR'ed bitwise. The following driver flags exist:</source>
          <target state="translated">このフィールドは、ランタイムシステムにドライバーの機能やその他の情報を渡すために使用されます。フィールド &lt;code&gt;extended_marker&lt;/code&gt; が &lt;code&gt;ERL_DRV_EXTENDED_MARKER&lt;/code&gt; と等しい場合、フィールドには &lt;code&gt;0&lt;/code&gt; またはドライバーフラグ（ &lt;code&gt;ERL_DRV_FLAG_*&lt;/code&gt; ）がビット単位でORされます。次のドライバフラグが存在します。</target>
        </trans-unit>
        <trans-unit id="53e33ba3e6e3853e3483bf977da426923d2e9210" translate="yes" xml:space="preserve">
          <source>This file can be &lt;code&gt;exported&lt;/code&gt; to a file structure by calling the &lt;code&gt;&lt;a href=&quot;megaco_codec_transform#export_messages&quot;&gt;export_messages&lt;/a&gt;&lt;/code&gt; function. This can be usefull if a measurement shall be done with an external tool. Exporting the messages creates a directory tree with the following structure:</source>
          <target state="translated">このファイルは、 &lt;code&gt;&lt;a href=&quot;megaco_codec_transform#export_messages&quot;&gt;export_messages&lt;/a&gt;&lt;/code&gt; 関数を呼び出してファイル構造に &lt;code&gt;exported&lt;/code&gt; できます。これは、外部ツールで測定を行う場合に役立ちます。メッセージをエクスポートすると、次の構造を持つディレクトリツリーが作成されます。</target>
        </trans-unit>
        <trans-unit id="1b4a5fcbbcbba39461ee90e5035cbad9ed093754" translate="yes" xml:space="preserve">
          <source>This file does not need to be created manually, it can be generated by &lt;code&gt;systools:make_relup/3,4&lt;/code&gt;. The relevant versions of the &lt;code&gt;.rel&lt;/code&gt; file, &lt;code&gt;.app&lt;/code&gt; files, and &lt;code&gt;.appup&lt;/code&gt; files are used as input. It is deducted which applications are to be added and deleted, and which applications that must be upgraded and/or downgraded. The instructions for this are fetched from the &lt;code&gt;.appup&lt;/code&gt; files and transformed into a single list of low-level instructions in the right order.</source>
          <target state="translated">このファイルは手動で作成する必要はなく、 &lt;code&gt;systools:make_relup/3,4&lt;/code&gt; で生成できます。 &lt;code&gt;.rel&lt;/code&gt; ファイル、 &lt;code&gt;.app&lt;/code&gt; ファイル、および &lt;code&gt;.appup&lt;/code&gt; ファイルの関連バージョンが入力として使用されます。追加および削除するアプリケーション、およびアップグレードまたはダウングレードする必要があるアプリケーションは差し引かれます。このための命令は &lt;code&gt;.appup&lt;/code&gt; ファイルからフェッチされ、正しい順序で低レベルの命令の単一リストに変換されます。</target>
        </trans-unit>
        <trans-unit id="9fb48b81944131df296ecee7753475785f0204cf" translate="yes" xml:space="preserve">
          <source>This file is automatically generated by &lt;code&gt;&lt;a href=&quot;systools#make_relup-3&quot;&gt;systools:make_relup/3,4&lt;/a&gt;&lt;/code&gt;, using a release resource file (&lt;code&gt;.rel&lt;/code&gt;), application resource files (&lt;code&gt;.app&lt;/code&gt;), and application upgrade files (&lt;code&gt;.appup&lt;/code&gt;) as input.</source>
          <target state="translated">このファイルは、リリースリソースファイル（ &lt;code&gt;.rel&lt;/code&gt; ）、アプリケーションリソースファイル（ &lt;code&gt;.app&lt;/code&gt; ）、およびアプリケーションアップグレードファイル（ &lt;code&gt;.appup&lt;/code&gt; ）を入力として使用して、 &lt;code&gt;&lt;a href=&quot;systools#make_relup-3&quot;&gt;systools:make_relup/3,4&lt;/a&gt;&lt;/code&gt; によって自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="3aeac0892cbf387cc4689f055a52de4d8bad4eb9" translate="yes" xml:space="preserve">
          <source>This file is included in &lt;code&gt;mess_server.erl&lt;/code&gt;:</source>
          <target state="translated">このファイルは &lt;code&gt;mess_server.erl&lt;/code&gt; に含まれています。</target>
        </trans-unit>
        <trans-unit id="0a6831b7fc3cca45884bb8df55f7ae10d0fb0b2b" translate="yes" xml:space="preserve">
          <source>This file is used by the functions in &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools&lt;/a&gt;&lt;/code&gt; when generating a release upgrade file &lt;code&gt;relup&lt;/code&gt;.</source>
          <target state="translated">このファイルは、リリースアップグレードファイル &lt;code&gt;relup&lt;/code&gt; を生成するときに、 &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools&lt;/a&gt;&lt;/code&gt; の関数によって使用されます。</target>
        </trans-unit>
        <trans-unit id="efd4a3fe5e769769e91e2007d57ff8d294a747ea" translate="yes" xml:space="preserve">
          <source>This file is used by the functions in &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools&lt;/a&gt;&lt;/code&gt; when generating start scripts (&lt;code&gt;.script&lt;/code&gt;, &lt;code&gt;.boot&lt;/code&gt;) and release upgrade files (&lt;code&gt;relup&lt;/code&gt;).</source>
          <target state="translated">このファイルは、開始スクリプト（ &lt;code&gt;.script&lt;/code&gt; 、 &lt;code&gt;.boot&lt;/code&gt; ）およびリリースアップグレードファイル（ &lt;code&gt;relup&lt;/code&gt; ）を生成するときに、 &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools&lt;/a&gt;&lt;/code&gt; の関数によって使用されます。</target>
        </trans-unit>
        <trans-unit id="2d508ac4a54e356dd39279346e885dd774ae9ca6" translate="yes" xml:space="preserve">
          <source>This file must be compiled before it can be used. The ASN.1 compiler checks that the syntax is correct and that the text represents proper ASN.1 code before generating an abstract syntax tree. The code-generator then uses the abstract syntax tree to generate code.</source>
          <target state="translated">このファイルは、使用する前にコンパイルする必要があります。ASN.1 コンパイラは、抽象構文ツリーを生成する前に、構文が正しいか、テキストが適切な ASN.1 コードを表しているかをチェックします。次に、コード・ジェネレーターは、抽象構文ツリーを使用してコードを生成します。</target>
        </trans-unit>
        <trans-unit id="868c84f12466baa660608254f7e7fa45a1ab087f" translate="yes" xml:space="preserve">
          <source>This filter matches all events originating from a process that has its group leader on a remote node.</source>
          <target state="translated">このフィルタは、リモートノード上にグループリーダーを持つプロセスから発生するすべてのイベントにマッチします。</target>
        </trans-unit>
        <trans-unit id="41612185cf4eec8055aef32ce6a1e85ef2253041" translate="yes" xml:space="preserve">
          <source>This filter matches all progress reports from &lt;code&gt;supervisor&lt;/code&gt; and &lt;code&gt;application_controller&lt;/code&gt;.</source>
          <target state="translated">このフィルターは、 &lt;code&gt;supervisor&lt;/code&gt; および &lt;code&gt;application_controller&lt;/code&gt; からのすべての進行状況レポートに一致します。</target>
        </trans-unit>
        <trans-unit id="3139608738bfff344c3bbc9f537737137e32b777" translate="yes" xml:space="preserve">
          <source>This filter provides a way of filtering log events based on a &lt;code&gt;domain&lt;/code&gt; field in &lt;code&gt;Metadata&lt;/code&gt;. This field is optional, and the purpose of using it is to group log events from, for example, a specific functional area. This allows filtering or other specialized treatment in a Logger handler.</source>
          <target state="translated">このフィルターは、 &lt;code&gt;Metadata&lt;/code&gt; &lt;code&gt;domain&lt;/code&gt; フィールドに基づいてログイベントをフィルターする方法を提供します。このフィールドはオプションであり、使用する目的は、たとえば特定の機能領域からのログイベントをグループ化することです。これにより、ロガーハンドラーでのフィルタリングやその他の特殊な処理が可能になります。</target>
        </trans-unit>
        <trans-unit id="d6c38d318267fc9b1e770c2f91391135ae4bc653" translate="yes" xml:space="preserve">
          <source>This filter provides a way of filtering log events based on the log level. It matches log events by comparing the log level with a specified &lt;code&gt;MatchLevel&lt;/code&gt;</source>
          <target state="translated">このフィルターは、ログレベルに基づいてログイベントをフィルターする方法を提供します。ログレベルを指定された &lt;code&gt;MatchLevel&lt;/code&gt; と比較して、ログイベントを照合します。</target>
        </trans-unit>
        <trans-unit id="d91f4f911f4f31e3b8fc52c8256e3280febf9a2b" translate="yes" xml:space="preserve">
          <source>This first command enables microstate accounting for 1000 milliseconds. See &lt;code&gt;&lt;a href=&quot;#start-0&quot;&gt;start/0&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#stop-0&quot;&gt;stop/0&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#reset-0&quot;&gt;reset/0&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt; for more details. The second command prints the statistics gathered during that time. First three general statistics are printed.</source>
          <target state="translated">この最初のコマンドは、1000ミリ秒のマイクロステートアカウンティングを有効にします。詳細については、 &lt;code&gt;&lt;a href=&quot;#start-0&quot;&gt;start/0&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#stop-0&quot;&gt;stop/0&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#reset-0&quot;&gt;reset/0&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt; を参照してください。2番目のコマンドは、その間に収集された統計を出力します。最初の3つの一般統​​計が出力されます。</target>
        </trans-unit>
        <trans-unit id="1bcacf63cfd99cc81866dfa553a1b3c4711304ba" translate="yes" xml:space="preserve">
          <source>This flag affects how the filenames are to be interpreted. On operating systems with transparent file naming, this must be specified to allow for file naming in Unicode characters (and for correct interpretation of filenames containing characters &amp;gt; 255).</source>
          <target state="translated">このフラグは、ファイル名の解釈方法に影響します。透過的なファイル命名を使用するオペレーティングシステムでは、これを指定して、Unicode文字でのファイル命名を許可する必要があります（255文字を超えるファイル名を正しく解釈するため）。</target>
        </trans-unit>
        <trans-unit id="401ad721e8e42c6f1dc3f91e171c1c2bd9b985da" translate="yes" xml:space="preserve">
          <source>This flag affects what is interpreted as string data when doing heuristic string detection in the shell and in &lt;code&gt;io&lt;/code&gt;/ &lt;code&gt;io_lib:format&lt;/code&gt; with the &lt;code&gt;&quot;~tp&quot;&lt;/code&gt; and &lt;code&gt;~tP&lt;/code&gt; formatting instructions, as described earlier.</source>
          <target state="translated">このフラグは、シェルにし、中にヒューリスティック列検出を行う際に、文字列データとして解釈されるものに影響 &lt;code&gt;io&lt;/code&gt; / &lt;code&gt;io_lib:format&lt;/code&gt; で &lt;code&gt;&quot;~tp&quot;&lt;/code&gt; と &lt;code&gt;~tP&lt;/code&gt; 、フォーマットの指示先に述べたように、。</target>
        </trans-unit>
        <trans-unit id="b90bcd3825735414823381e680fcf705ea0d5299" translate="yes" xml:space="preserve">
          <source>This flag can be removed or changed at any time without prior notice.</source>
          <target state="translated">このフラグは、予告なしにいつでも削除または変更することができます。</target>
        </trans-unit>
        <trans-unit id="a25b86654b752dec058dc76f9788b85101c1cf33" translate="yes" xml:space="preserve">
          <source>This flag determines how messages in the message queue are stored, as follows:</source>
          <target state="translated">このフラグは、以下のようにメッセージキュー内のメッセージがどのように格納されるかを決定します。</target>
        </trans-unit>
        <trans-unit id="af384f81db1d48b161cd5aace187074a44597516" translate="yes" xml:space="preserve">
          <source>This flag field is optional.</source>
          <target state="translated">このフラグフィールドはオプションです。</target>
        </trans-unit>
        <trans-unit id="26248d39ec39b326e49e6de9a0200d4728253816" translate="yes" xml:space="preserve">
          <source>This flag has effect only when the emulator is linked with the GNU C library, and uses its &lt;code&gt;malloc&lt;/code&gt; implementation.</source>
          <target state="translated">このフラグは、エミュレータがGNU Cライブラリにリンクされており、その &lt;code&gt;malloc&lt;/code&gt; 実装を使用している場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="f4f9950c6c7df7d55c31f657a13915f580c4acd7" translate="yes" xml:space="preserve">
          <source>This flag is particular useful when you want to elaborate with code loading from archives without editing the &lt;code&gt;boot script&lt;/code&gt;. For more information about interpretation of boot scripts, see &lt;code&gt;script(4)&lt;/code&gt;. The flag has also a similar effect on how the code server works; see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">このフラグは、 &lt;code&gt;boot script&lt;/code&gt; を編集せずに、アーカイブからのコードの読み込みについて詳しく説明する場合に特に役立ちます。ブートスクリプトの解釈の詳細については、 &lt;code&gt;script(4)&lt;/code&gt; を参照してください。このフラグは、コードサーバーの動作にも同様の影響を与えます。 &lt;code&gt;code(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6dbde97932c8eaba9606eccfc93ef4a1443c2369" translate="yes" xml:space="preserve">
          <source>This flag sets the maximum heap size for the calling process. If &lt;code&gt;MaxHeapSize&lt;/code&gt; is an integer, the system default values for &lt;code&gt;kill&lt;/code&gt; and &lt;code&gt;error_logger&lt;/code&gt; are used.</source>
          <target state="translated">このフラグは、呼び出しプロセスの最大ヒープサイズを設定します。場合 &lt;code&gt;MaxHeapSize&lt;/code&gt; が整数である、のためのシステムのデフォルト値 &lt;code&gt;kill&lt;/code&gt; と &lt;code&gt;error_logger&lt;/code&gt; が使用されています。</target>
        </trans-unit>
        <trans-unit id="f9f03daf9384ca8f19df9da9a248cad12c12009a" translate="yes" xml:space="preserve">
          <source>This following definition of a &lt;code&gt;person&lt;/code&gt; is used in several examples in this section. Three fields are included, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;phone&lt;/code&gt;, and &lt;code&gt;address&lt;/code&gt;. The default values for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;phone&lt;/code&gt; is &quot;&quot; and [], respectively. The default value for &lt;code&gt;address&lt;/code&gt; is the atom &lt;code&gt;undefined&lt;/code&gt;, since no default value is supplied for this field:</source>
          <target state="translated">以下の &lt;code&gt;person&lt;/code&gt; 定義は、このセクションのいくつかの例で使用されています。 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;phone&lt;/code&gt; 、 &lt;code&gt;address&lt;/code&gt; 3つのフィールドが含まれています。 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;phone&lt;/code&gt; のデフォルト値は、それぞれ &quot;&quot;と[]です。このフィールドにはデフォルト値が指定されていないため、 &lt;code&gt;address&lt;/code&gt; のデフォルト値はアトム &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="02f5811e131af42f984f54f852032dfcb1311211" translate="yes" xml:space="preserve">
          <source>This form can also be used in header files (.hrl) to declare type information for exported functions. Then these header files can be included in files that (implicitly or explicitly) import these functions.</source>
          <target state="translated">この形式は、エクスポートされた関数の型情報を宣言するためのヘッダファイル(.hrl)でも使用することができます。そして、これらのヘッダファイルは、これらの関数を(暗黙的または明示的に)インポートするファイルに含めることができます。</target>
        </trans-unit>
        <trans-unit id="2059c23a56cf58a2c4674e36d5fde6d6cdf2124b" translate="yes" xml:space="preserve">
          <source>This form is the one mostly used in the &lt;code&gt;&lt;a href=&quot;#Example&quot;&gt;Example&lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="translated">このフォームは、「 &lt;code&gt;&lt;a href=&quot;#Example&quot;&gt;Example&lt;/a&gt;&lt;/code&gt; セクションで主に使用されているものです。</target>
        </trans-unit>
        <trans-unit id="966c16aa39dbb79b8cefa816f56010ae727285a2" translate="yes" xml:space="preserve">
          <source>This format can be used for printing any object and truncating the output so it fits a specified field:</source>
          <target state="translated">この形式は、任意のオブジェクトを印刷し、指定したフィールドに収まるように出力を切り詰めるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="96bf1314fc9e30514fade10f4ed25bb52dc94221" translate="yes" xml:space="preserve">
          <source>This formats the text like &lt;code&gt;io:format(FmtString, Args)&lt;/code&gt; and outputs it like &lt;code&gt;debugMsg&lt;/code&gt;. The result is always &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;io:format(FmtString, Args)&lt;/code&gt; ようにテキストをフォーマットし、 &lt;code&gt;debugMsg&lt;/code&gt; のように出力します。結果は常に &lt;code&gt;ok&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a1dba461392e21176e94cffd9044c02a52e238da" translate="yes" xml:space="preserve">
          <source>This fun can also be used to make delays in authentication tries for example by calling &lt;code&gt;timer:sleep/1&lt;/code&gt;.</source>
          <target state="translated">この楽しみは、たとえば &lt;code&gt;timer:sleep/1&lt;/code&gt; を呼び出すことによって、認証の試行を遅らせるためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="336ab36451349be053fe7e9e786bb4268ca4fe0b" translate="yes" xml:space="preserve">
          <source>This function (&lt;code&gt;mnesia:activity/4&lt;/code&gt;) differs in an important way from the functions &lt;code&gt;mnesia:transaction&lt;/code&gt;, &lt;code&gt;mnesia:sync_transaction&lt;/code&gt;, &lt;code&gt;mnesia:async_dirty&lt;/code&gt;, &lt;code&gt;mnesia:sync_dirty&lt;/code&gt;, and &lt;code&gt;mnesia:ets&lt;/code&gt;. Argument &lt;code&gt;AccessMod&lt;/code&gt; is the name of a callback module, which implements the &lt;code&gt;mnesia_access&lt;/code&gt; behavior.</source>
          <target state="translated">この関数（ &lt;code&gt;mnesia:activity/4&lt;/code&gt; ）は、関数 &lt;code&gt;mnesia:transaction&lt;/code&gt; 、 &lt;code&gt;mnesia:sync_transaction&lt;/code&gt; 、 &lt;code&gt;mnesia:async_dirty&lt;/code&gt; 、 &lt;code&gt;mnesia:sync_dirty&lt;/code&gt; 、および &lt;code&gt;mnesia:ets&lt;/code&gt; とは重要な点で異なります。引数 &lt;code&gt;AccessMod&lt;/code&gt; は、 &lt;code&gt;mnesia_access&lt;/code&gt; 動作を実装するコールバックモジュールの名前です。</target>
        </trans-unit>
        <trans-unit id="a856a99360229d9e49c9035cef153bdfeb299a54" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;never&lt;/strong&gt; returns. It calls either of the following functions:</source>
          <target state="translated">この関数&lt;strong&gt;は決して&lt;/strong&gt;戻り&lt;strong&gt;ません&lt;/strong&gt;。次のいずれかの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="dfd2b9df4a36c64900ffcea705f4eb600cd796ec" translate="yes" xml:space="preserve">
          <source>This function adds a remote node (&lt;code&gt;Nodename&lt;/code&gt;) to the list of nodes where tracing is performed. It starts a tracer process on the remote node, which will send all trace messages to the tracer process on the local node (via the Erlang distribution). If no tracer process is running on the local node, the error reason &lt;code&gt;no_local_tracer&lt;/code&gt; is returned. The tracer process on the local node must be started with the &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/0/2&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">この関数は、トレースが実行されるノードのリストにリモートノード（ &lt;code&gt;Nodename&lt;/code&gt; ）を追加します。リモートノードでトレーサープロセスを開始し、すべてのトレースメッセージをローカルノードのトレーサープロセスに（Erlangディストリビューション経由で）送信します。ローカルノードでトレーサプロセスが実行されていない場合、エラー理由 &lt;code&gt;no_local_tracer&lt;/code&gt; が返されます。ローカルノードのトレーサプロセスは、 &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/0/2&lt;/a&gt;&lt;/code&gt; 関数を使用して開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="e377bf478ddc23f833b9b7a7f1af28105f09ad03" translate="yes" xml:space="preserve">
          <source>This function always creates a new binary, even if &lt;code&gt;N = 1&lt;/code&gt;. By using &lt;code&gt;&lt;a href=&quot;#copy-1&quot;&gt;copy/1&lt;/a&gt;&lt;/code&gt; on a binary referencing a larger binary, one can free up the larger binary for garbage collection.</source>
          <target state="translated">この関数は、 &lt;code&gt;N = 1&lt;/code&gt; であっても、常に新しいバイナリを作成します。大きなバイナリを参照するバイナリで &lt;code&gt;&lt;a href=&quot;#copy-1&quot;&gt;copy/1&lt;/a&gt;&lt;/code&gt; を使用することにより、ガベージコレクションのために大きなバイナリを解放できます。</target>
        </trans-unit>
        <trans-unit id="72153fe9aa2fe79a7632e3bef35203ef37b284e3" translate="yes" xml:space="preserve">
          <source>This function and the related &lt;code&gt;&lt;a href=&quot;#is_tree-1&quot;&gt;is_tree/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#data-1&quot;&gt;data/1&lt;/a&gt;&lt;/code&gt; provide a uniform way to extend the set of &lt;code&gt;erl_parse&lt;/code&gt; node types. The associated data is any term, whose format may depend on the type tag.</source>
          <target state="translated">この関数と関連する &lt;code&gt;&lt;a href=&quot;#is_tree-1&quot;&gt;is_tree/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#data-1&quot;&gt;data/1&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;erl_parse&lt;/code&gt; ノードタイプのセットを拡張する統一された方法を提供します。関連するデータは任意の用語であり、その形式はtypeタグによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="433b989897815cc9d57ace923542cbea3cc51b3e" translate="yes" xml:space="preserve">
          <source>This function associates a match specification with trace event &lt;code&gt;send&lt;/code&gt; or &lt;code&gt;'receive'&lt;/code&gt;. By default all executed &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;'receive'&lt;/code&gt; events are traced if enabled for a process. A match specification can be used to filter traced events based on sender, receiver and/or message content.</source>
          <target state="translated">この関数は、一致指定をトレースイベントの &lt;code&gt;send&lt;/code&gt; または &lt;code&gt;'receive'&lt;/code&gt; に関連付けます。デフォルトでは、プロセスで有効になっている場合、実行されたすべての &lt;code&gt;send&lt;/code&gt; イベントと &lt;code&gt;'receive'&lt;/code&gt; イベントがトレースされます。一致指定を使用すると、送信者、受信者、メッセージの内容に基づいて、トレースされたイベントをフィルタリングできます。</target>
        </trans-unit>
        <trans-unit id="89635cf270dd169c3a41d472bf8e396339e0014e" translate="yes" xml:space="preserve">
          <source>This function behaves like &lt;code&gt;&lt;a href=&quot;#send_nosuspend-2&quot;&gt;erlang:send_nosuspend/2&lt;/a&gt;&lt;/code&gt;, but takes a third parameter, a list of options. The only option is &lt;code&gt;noconnect&lt;/code&gt;, which makes the function return &lt;code&gt;false&lt;/code&gt; if the remote node is not currently reachable by the local node. The normal behavior is to try to connect to the node, which can stall the process during a short period. The use of option &lt;code&gt;noconnect&lt;/code&gt; makes it possible to be sure not to get the slightest delay when sending to a remote process. This is especially useful when communicating with nodes that expect to always be the connecting part (that is, nodes written in C or Java).</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#send_nosuspend-2&quot;&gt;erlang:send_nosuspend/2&lt;/a&gt;&lt;/code&gt; のように動作しますが、オプションのリストである3番目のパラメーターを取ります。唯一のオプションは &lt;code&gt;noconnect&lt;/code&gt; です。これにより、ローカルノードがリモートノードに現在到達できない場合、関数は &lt;code&gt;false&lt;/code&gt; を返します。通常の動作は、ノードへの接続を試みることです。これにより、短時間でプロセスが停止する可能性があります。オプション &lt;code&gt;noconnect&lt;/code&gt; を使用すると、リモートプロセスに送信するときにわずかな遅延が発生しないようにすることができます。これは、常に接続部分であることが期待されるノード（つまり、CまたはJavaで記述されたノード）と通信する場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="83333525c2547e13927665951a088eb3ec49c561" translate="yes" xml:space="preserve">
          <source>This function broadcasts a message to a list of processes:</source>
          <target state="translated">この関数は、プロセスのリストにメッセージをブロードキャストします。</target>
        </trans-unit>
        <trans-unit id="acaeb65b7a88cf8025f411bf5bf4220c48f96174" translate="yes" xml:space="preserve">
          <source>This function can also be used to add a replica of the table named &lt;code&gt;schema&lt;/code&gt;.</source>
          <target state="translated">この関数を使用して、 &lt;code&gt;schema&lt;/code&gt; という名前のテーブルのレプリカを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="e0129c56bbfa8049fef6fe88075e59972e7cc29c" translate="yes" xml:space="preserve">
          <source>This function can also be used to change the storage type of the table named &lt;code&gt;schema&lt;/code&gt;. The schema table can only have &lt;code&gt;ram_copies&lt;/code&gt; or &lt;code&gt;disc_copies&lt;/code&gt; as the storage type. If the storage type of the schema is &lt;code&gt;ram_copies&lt;/code&gt;, no other table can be disc-resident on that node.</source>
          <target state="translated">この関数は、 &lt;code&gt;schema&lt;/code&gt; という名前のテーブルのストレージタイプを変更するためにも使用できます。スキーマテーブルには、ストレージタイプとして &lt;code&gt;ram_copies&lt;/code&gt; または &lt;code&gt;disc_copies&lt;/code&gt; のみを含めることができます。スキーマのストレージタイプが &lt;code&gt;ram_copies&lt;/code&gt; の場合、そのノードに他のテーブルをディスク常駐させることはできません。</target>
        </trans-unit>
        <trans-unit id="298f0bbfcd306bc36a218e1e5c945f51e02abf73" translate="yes" xml:space="preserve">
          <source>This function can also be used to delete a replica of the table named &lt;code&gt;schema&lt;/code&gt;. The Mnesia node is then removed. Notice that Mnesia must be stopped on the node first.</source>
          <target state="translated">この関数は、 &lt;code&gt;schema&lt;/code&gt; という名前のテーブルのレプリカを削除するためにも使用できます。その後、Mnesiaノードが削除されます。最初にノードでMnesiaを停止する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="81355cc6547701f3b5dbcf62012e8964f7fd6864" translate="yes" xml:space="preserve">
          <source>This function can be called by a process to unregister a specified node from EPMD on the local host. This is, however, usually not allowed, unless EPMD was started with flag &lt;code&gt;-relaxed_command_check&lt;/code&gt;, which it normally is not.</source>
          <target state="translated">この関数は、ローカルホストのEPMDから指定されたノードの登録を解除するプロセスによって呼び出されます。ただし、通常は許可されないフラグ &lt;code&gt;-relaxed_command_check&lt;/code&gt; を使用してEPMDが開始されない限り、これは通常許可されません。</target>
        </trans-unit>
        <trans-unit id="0b9254d1fc6a965191d944b7d91a6f039c16821e" translate="yes" xml:space="preserve">
          <source>This function can be called from any thread if a &lt;code&gt;&lt;a href=&quot;#ErlDrvPDL&quot;&gt;port data lock&lt;/a&gt;&lt;/code&gt; associated with the &lt;code&gt;port&lt;/code&gt; is locked by the calling thread during the call.</source>
          <target state="translated">場合、この関数は、任意のスレッドから呼び出すことができ &lt;code&gt;&lt;a href=&quot;#ErlDrvPDL&quot;&gt;port data lock&lt;/a&gt;&lt;/code&gt; に関連付けられた &lt;code&gt;port&lt;/code&gt; 通話中に呼び出し元のスレッドによってロックされています。</target>
        </trans-unit>
        <trans-unit id="f6c82e6849bd9680e104431bbaa2e398b9142d98" translate="yes" xml:space="preserve">
          <source>This function can be called from the net_if process at start-up. The options list defines which versions to use.</source>
          <target state="translated">この関数は起動時に net_if プロセスから呼び出すことができます。オプションリストは、使用するバージョンを定義します。</target>
        </trans-unit>
        <trans-unit id="f2ad971b905f90b5afe4b3c7ffde91a0186892d8" translate="yes" xml:space="preserve">
          <source>This function can be called from the shell as follows:</source>
          <target state="translated">この関数は以下のようにシェルから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="522d795e31428058f3384591f93786fc5c38e61f" translate="yes" xml:space="preserve">
          <source>This function can be called multiple times per tracepoint, so it is important that it is both fast and without side effects.</source>
          <target state="translated">この関数はトレースポイントごとに複数回呼び出すことができるので、高速であることと副作用がないことが重要です。</target>
        </trans-unit>
        <trans-unit id="19493e2b3285e45af7ae976c2c5428e204167ea2" translate="yes" xml:space="preserve">
          <source>This function can be described as a &lt;code&gt;&lt;a href=&quot;#match_delete-2&quot;&gt;match_delete/2&lt;/a&gt;&lt;/code&gt; function that does not delete any elements, but only counts them.</source>
          <target state="translated">この関数は、要素を削除せず、それらを数えるだけの &lt;code&gt;&lt;a href=&quot;#match_delete-2&quot;&gt;match_delete/2&lt;/a&gt;&lt;/code&gt; 関数として説明できます。</target>
        </trans-unit>
        <trans-unit id="ce984ece3bfa8ffe74ac15019b28eb788ccbbd1c" translate="yes" xml:space="preserve">
          <source>This function can be used as follows:</source>
          <target state="translated">この機能は以下のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="85a27177a667f0e1465cbdbd2008515b2cc73a28" translate="yes" xml:space="preserve">
          <source>This function can be used by a &lt;code&gt;gen_server&lt;/code&gt; process to explicitly send a reply to a client that called &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2,3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#multi_call-2&quot;&gt;multi_call/2,3,4&lt;/a&gt;&lt;/code&gt;, when the reply cannot be defined in the return value of &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; の戻り値で応答を定義できない場合、この関数を &lt;code&gt;gen_server&lt;/code&gt; プロセスで使用して、 &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2,3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#multi_call-2&quot;&gt;multi_call/2,3,4&lt;/a&gt;&lt;/code&gt; を呼び出したクライアントに明示的に応答を送信できます。</target>
        </trans-unit>
        <trans-unit id="08f1b8ca49849c35cc0d4d177f183a0add904508" translate="yes" xml:space="preserve">
          <source>This function can be used by a &lt;code&gt;gen_statem&lt;/code&gt; to explicitly send a reply to a process that waits in &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2&lt;/a&gt;&lt;/code&gt; when the reply cannot be defined in the return value of a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数を &lt;code&gt;gen_statem&lt;/code&gt; で使用すると、 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 戻り値で応答を定義できない場合に、 &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2&lt;/a&gt;&lt;/code&gt; で待機するプロセスに明示的に応答を送信できます。</target>
        </trans-unit>
        <trans-unit id="8ea9dc0753a135b5574eec22abe8e746d04ba274" translate="yes" xml:space="preserve">
          <source>This function can be used by a channel to send a reply to a client that called &lt;code&gt;call/[2,3]&lt;/code&gt; when the reply cannot be defined in the return value of &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; の戻り値で応答を定義できない場合、チャネルがこの関数を使用して、 &lt;code&gt;call/[2,3]&lt;/code&gt; を呼び出したクライアントに応答を送信できます。</target>
        </trans-unit>
        <trans-unit id="db47f123c4d7737adc530bd1064733d21b41df5e" translate="yes" xml:space="preserve">
          <source>This function can be used by a user-defined legacy &lt;code&gt;error_logger&lt;/code&gt; event handler to format a crash report. The crash report is sent using &lt;code&gt;logger(3)&lt;/code&gt;, and the event to be handled is of the format &lt;code&gt;{error_report, GL, {Pid, crash_report, CrashReport}}&lt;/code&gt;, where &lt;code&gt;GL&lt;/code&gt; is the group leader pid of process &lt;code&gt;Pid&lt;/code&gt; that sent the crash report.</source>
          <target state="translated">この関数は、クラッシュレポートをフォーマットするために、ユーザー定義のレガシー &lt;code&gt;error_logger&lt;/code&gt; イベントハンドラーで使用できます。クラッシュレポートを使用して送信される &lt;code&gt;logger(3)&lt;/code&gt; 、及び処理されるイベントの形式である &lt;code&gt;{error_report, GL, {Pid, crash_report, CrashReport}}&lt;/code&gt; 、 &lt;code&gt;GL&lt;/code&gt; は、プロセスのグループリーダPIDで &lt;code&gt;Pid&lt;/code&gt; クラッシュレポートを送信しました。</target>
        </trans-unit>
        <trans-unit id="9ee5cef59a670b3b68b71dece0a9f5e79fdb8155" translate="yes" xml:space="preserve">
          <source>This function can be used by a user-defined legacy &lt;code&gt;error_logger&lt;/code&gt; event handler to format a crash report. When Depth is specified as a positive integer, it is used in the format string to limit the output as follows: &lt;code&gt;io_lib:format(&quot;~P&quot;, [Term,Depth])&lt;/code&gt;.</source>
          <target state="translated">この関数は、クラッシュレポートをフォーマットするために、ユーザー定義のレガシー &lt;code&gt;error_logger&lt;/code&gt; イベントハンドラーで使用できます。Depthが正の整数として指定されている場合、フォーマット文字列で使用され、次のように出力が制限されます： &lt;code&gt;io_lib:format(&quot;~P&quot;, [Term,Depth])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="617658033c030647cebceeeec015013360ae0d7a" translate="yes" xml:space="preserve">
          <source>This function can be used for sending &lt;code&gt;rpc&lt;/code&gt; requests that cannot be expressed by other interface functions in this module.</source>
          <target state="translated">この関数は、このモジュールの他のインターフェース関数では表現できない &lt;code&gt;rpc&lt;/code&gt; 要求の送信に使用できます。</target>
        </trans-unit>
        <trans-unit id="42e7b32dc0277f5046892f45b1b0cb119299d8f7" translate="yes" xml:space="preserve">
          <source>This function can be used in instrumentation functions for &lt;code&gt;is_set_ok&lt;/code&gt;, &lt;code&gt;undo&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; to check if the status column of a table is modified.</source>
          <target state="translated">この関数は、 &lt;code&gt;is_set_ok&lt;/code&gt; 、 &lt;code&gt;undo&lt;/code&gt; 、または &lt;code&gt;set&lt;/code&gt; のインストルメンテーション関数で使用して、テーブルのステータス列が変更されているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="fc3c92535fa29f8db696545ba3457c73577af82b" translate="yes" xml:space="preserve">
          <source>This function can be used in instrumentation functions to retrieve a given part of the table info.</source>
          <target state="translated">この関数は、テーブル情報の指定された部分を取得するために、インストルメンテーション関数で使用することができます。</target>
        </trans-unit>
        <trans-unit id="7cdbbfa3213f416586603dfe437066c58b3bceec" translate="yes" xml:space="preserve">
          <source>This function can be used in instrumentation functions to retrieve the index types part of the table info.</source>
          <target state="translated">この関数は、テーブル情報のインデックス型の部分を取得するために、インストルメンテーション関数で使用することができます。</target>
        </trans-unit>
        <trans-unit id="f7be1756bfcf7a6c64caef1e2a4983a257ac163e" translate="yes" xml:space="preserve">
          <source>This function can be used to add an AGENT-CAPABILITY statement to the sysORTable in the agent. The table is defined in the SNMPv2-MIB.</source>
          <target state="translated">この関数は、エージェント内のsysORTableにAGENT-CAPABILITY文を追加するために使用することができます。テーブルはSNMPv2-MIBで定義されています。</target>
        </trans-unit>
        <trans-unit id="c7dac437f7278e03fe570daafa7cce023be74ce5" translate="yes" xml:space="preserve">
          <source>This function can be used to delete an AGENT-CAPABILITY statement to the sysORTable in the agent. This table is defined in the SNMPv2-MIB.</source>
          <target state="translated">この関数は、エージェント内のsysORTableにAGENT-CAPABILITY文を削除するために使用することができます。このテーブルはSNMPv2-MIBで定義されています。</target>
        </trans-unit>
        <trans-unit id="1102b37c65aef3cec918cc4b7670f14b8a81dbe0" translate="yes" xml:space="preserve">
          <source>This function can be used to load object code on remote Erlang nodes. Argument &lt;code&gt;Binary&lt;/code&gt; must contain object code for &lt;code&gt;Module&lt;/code&gt;. &lt;code&gt;Filename&lt;/code&gt; is only used by the code server to keep a record of from which file the object code for &lt;code&gt;Module&lt;/code&gt; comes. Thus, &lt;code&gt;Filename&lt;/code&gt; is not opened and read by the code server.</source>
          <target state="translated">この関数は、リモートのErlangノードにオブジェクトコードをロードするために使用できます。引数 &lt;code&gt;Binary&lt;/code&gt; には、 &lt;code&gt;Module&lt;/code&gt; のオブジェクトコードを含める必要があります。 &lt;code&gt;Filename&lt;/code&gt; は、 &lt;code&gt;Module&lt;/code&gt; オブジェクトコードがどのファイルからのものかを記録するために、コードサーバーによってのみ使用されます。したがって、 &lt;code&gt;Filename&lt;/code&gt; はコードサーバーによって開かれず、読み取られません。</target>
        </trans-unit>
        <trans-unit id="8a7a1c49364121587618310df79e658f758f578a" translate="yes" xml:space="preserve">
          <source>This function can be used to manually dump the database to file.</source>
          <target state="translated">この関数は、データベースをファイルに手動でダンプするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="b39cd5560dc28e0d7d30d0cfa028ea7e687fcd3a" translate="yes" xml:space="preserve">
          <source>This function can be used to receive asynchronous notifications when OS-specific event objects become ready for either read or write operations.</source>
          <target state="translated">この関数を使用すると、OS固有のイベントオブジェクトが読み書きどちらかの操作の準備ができたときに、非同期で通知を受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="4f3a58dc913baae062f654243c29c7f5eb0a4f46" translate="yes" xml:space="preserve">
          <source>This function can be used to restore an opaque continuation returned by &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; if the continuation has passed through external term format (been sent between nodes or stored on disk).</source>
          <target state="translated">この関数は、継続が外部用語形式（ノード間で送信されるか、ディスクに格納される）を通過した場合に、 &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; によって返される不透明な継続を復元するために使用できます。</target>
        </trans-unit>
        <trans-unit id="fd7807ec473936d9df7098fd46d3b3b79853551d" translate="yes" xml:space="preserve">
          <source>This function can be useful when a node is started, and the names of the other network nodes are not initially known.</source>
          <target state="translated">この関数は、ノードが起動されていて、他のネットワーク・ノードの名前が最初はわからない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="2f62afda090010612a0f62b821ddb83bdcfdcffb" translate="yes" xml:space="preserve">
          <source>This function can fail with one of the following error reasons:</source>
          <target state="translated">この関数は、以下のエラー理由のいずれかで失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ba63a9a987b164fc62f29fa35526154bc8f7f106" translate="yes" xml:space="preserve">
          <source>This function can introduce some output latency (reading input without producing any output).</source>
          <target state="translated">この関数は、出力遅延(出力を生成せずに入力を読み込むこと)を導入することができます。</target>
        </trans-unit>
        <trans-unit id="988314974f83c89323479c44bd0becefb3b2384f" translate="yes" xml:space="preserve">
          <source>This function can not change the result of the test case by returning skip or fail tuples, but it may insert items in &lt;code&gt;Config&lt;/code&gt; that can be read in &lt;code&gt;end_per_testcase/2&lt;/code&gt; or in &lt;code&gt;post_end_per_testcase/5&lt;/code&gt;.</source>
          <target state="translated">この関数は、skipまたはfailタプルを返すことでテストケースの結果を変更することはできませんが、 &lt;code&gt;end_per_testcase/2&lt;/code&gt; または &lt;code&gt;post_end_per_testcase/5&lt;/code&gt; で読み取ることができる項目を &lt;code&gt;Config&lt;/code&gt; に挿入する場合があります。</target>
        </trans-unit>
        <trans-unit id="6e10609e0797e589efd9411b6aba855461126929" translate="yes" xml:space="preserve">
          <source>This function can only be used from a NIF-calling thread, and with an environment corresponding to currently executing processes.</source>
          <target state="translated">この関数は、NIFを呼び出すスレッドからのみ使用でき、現在実行中のプロセスに対応する環境でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="e042388a21a809a3fccbdc2d157a9abe40eeec97" translate="yes" xml:space="preserve">
          <source>This function can return multiple addresses for multihomed sockets, such as SCTP sockets. For other sockets it returns a one-element list.</source>
          <target state="translated">この関数は、SCTP ソケットのようなマルチホームソケットに対して複数のアドレスを返すことができます。その他のソケットに対しては、1つの要素のリストを返します。</target>
        </trans-unit>
        <trans-unit id="11d63c52aba2de9f19866ae14e84baa28f340645" translate="yes" xml:space="preserve">
          <source>This function cannot be used on &lt;code&gt;local_content&lt;/code&gt; tables.</source>
          <target state="translated">この関数は &lt;code&gt;local_content&lt;/code&gt; テーブルでは使用できません。</target>
        </trans-unit>
        <trans-unit id="fe1d649e804662b3a5a46052ca328e2902ff015f" translate="yes" xml:space="preserve">
          <source>This function checks if a date is a valid.</source>
          <target state="translated">この関数は、日付が有効かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="3517712921153c86ac3e375c1576c43c6781f969" translate="yes" xml:space="preserve">
          <source>This function checks that the</source>
          <target state="translated">この関数は</target>
        </trans-unit>
        <trans-unit id="ddd56f29dbf260ed1f448685268e0f12bf606e89" translate="yes" xml:space="preserve">
          <source>This function checks whether microstate accounting is available or not.</source>
          <target state="translated">この関数は、マイクロステート会計が利用可能かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="e7a6086739c9e28533ed8c3e368502ee3f910824" translate="yes" xml:space="preserve">
          <source>This function clears match specifications for the specified trace event (&lt;code&gt;send&lt;/code&gt; or &lt;code&gt;'receive'&lt;/code&gt;). It will revert back to the default behavior of tracing all triggered events.</source>
          <target state="translated">この関数は、指定されたトレースイベント（ &lt;code&gt;send&lt;/code&gt; または &lt;code&gt;'receive'&lt;/code&gt; ）の一致指定をクリアします。トリガーされたすべてのイベントをトレースするというデフォルトの動作に戻ります。</target>
        </trans-unit>
        <trans-unit id="6638616d01daa0310e5374bdd67d7c94f4479869" translate="yes" xml:space="preserve">
          <source>This function controls if user tags are to be spread to other processes with the next message. Spreading of user tags work like spreading of sequential trace tokens, so that a received user tag will be active in the process until the next message arrives (if that message does not also contain the user tag.</source>
          <target state="translated">この関数は、次のメッセージでユーザータグを他のプロセスに拡散するかどうかを制御します。ユーザータグの拡散は、シーケンシャルトレーストークンの拡散と同じように動作し、受信したユーザータグは、次のメッセージが到着するまでプロセス内でアクティブになります(そのメッセージにユーザータグが含まれていない場合)。</target>
        </trans-unit>
        <trans-unit id="3f633655709ac9db491c14cd930f2f22fb70ea32" translate="yes" xml:space="preserve">
          <source>This function creates a trace port generating &lt;strong&gt;fun&lt;/strong&gt;. The &lt;strong&gt;fun&lt;/strong&gt; takes no arguments and returns a newly opened trace port. The return value from this function is suitable as a second parameter to tracer/2, i.e. &lt;code&gt;dbg:tracer(port, dbg:trace_port(ip, 4711))&lt;/code&gt;.</source>
          <target state="translated">この関数は&lt;strong&gt;funを&lt;/strong&gt;生成するトレースポートを作成し&lt;strong&gt;ます&lt;/strong&gt;。&lt;strong&gt;楽しみは&lt;/strong&gt;引数を取らず、新しくオープンしたトレースポートを返します。この関数からの戻り値は、トレーサー/ 2の2番目のパラメーターとして適切です。つまり、 &lt;code&gt;dbg:tracer(port, dbg:trace_port(ip, 4711))&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c39c3cc91bfce26f7b990777dc0e4b36098e14e8" translate="yes" xml:space="preserve">
          <source>This function destructively update the object with key &lt;code&gt;Key&lt;/code&gt; in table &lt;code&gt;Tab&lt;/code&gt; by adding &lt;code&gt;Incr&lt;/code&gt; to the element at position &lt;code&gt;Pos&lt;/code&gt;. The new counter value is returned. If no position is specified, the element directly following key (&lt;code&gt;&amp;lt;keypos&amp;gt;+1&lt;/code&gt;) is updated.</source>
          <target state="translated">この関数は、位置 &lt;code&gt;Pos&lt;/code&gt; の要素に &lt;code&gt;Incr&lt;/code&gt; を追加することにより、テーブル &lt;code&gt;Tab&lt;/code&gt; のキー &lt;code&gt;Key&lt;/code&gt; でオブジェクトを破壊的に更新します。新しいカウンタ値が返されます。位置が指定されていない場合、キー（ &lt;code&gt;&amp;lt;keypos&amp;gt;+1&lt;/code&gt; ）の直後の要素が更新されます。</target>
        </trans-unit>
        <trans-unit id="ae92bc5423506c0c5495964ace9028451dd49af5" translate="yes" xml:space="preserve">
          <source>This function destructively updates the object with key &lt;code&gt;Key&lt;/code&gt; in table &lt;code&gt;Tab&lt;/code&gt;. The element at position &lt;code&gt;Pos&lt;/code&gt; is given the value &lt;code&gt;Value&lt;/code&gt;.</source>
          <target state="translated">この関数は、テーブル &lt;code&gt;Tab&lt;/code&gt; のキー &lt;code&gt;Key&lt;/code&gt; でオブジェクトを破壊的に更新します。位置 &lt;code&gt;Pos&lt;/code&gt; の要素には値 &lt;code&gt;Value&lt;/code&gt; が与えられます。</target>
        </trans-unit>
        <trans-unit id="4dbc5b017b8dfa31be93dfdf684be5e007a7e9bb" translate="yes" xml:space="preserve">
          <source>This function determines the set of modules to compile and the compile options to use, by first looking for the &lt;code&gt;emake&lt;/code&gt; make option, if not present reads the configuration from a file named &lt;code&gt;Emakefile&lt;/code&gt; (see below). If no such file is found, the set of modules to compile defaults to all modules in the current working directory.</source>
          <target state="translated">この関数は、コンパイルするモジュールのセットとを探して最初にして、使用するコンパイルオプション、決定 &lt;code&gt;emake&lt;/code&gt; の存在ではないが、指定したファイルから設定を読み込む場合は、メイクオプションを &lt;code&gt;Emakefile&lt;/code&gt; （下記参照します）。そのようなファイルが見つからない場合、コンパイルするモジュールのセットは、デフォルトで現在の作業ディレクトリ内のすべてのモジュールになります。</target>
        </trans-unit>
        <trans-unit id="64faa483024d3289527baea651fb01006a7adc8e" translate="yes" xml:space="preserve">
          <source>This function disables call tracing on the specified functions. The semantics of the parameter is the same as for the corresponding function specification in &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt;. Both local and global call trace is disabled.</source>
          <target state="translated">この関数は、指定された関数の呼び出しトレースを無効にします。パラメータのセマンティクスは、 &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt; の対応する関数仕様の場合と同じです。ローカルとグローバルの両方の呼び出しトレースが無効になります。</target>
        </trans-unit>
        <trans-unit id="730e9eafa28a60b99c0ff8551559f6cf3f087431" translate="yes" xml:space="preserve">
          <source>This function does not address the problem of a deadlock. A deadlock can never occur as long as processes only lock one resource at a time. A deadlock can occur if some processes try to lock two or more resources. It is up to the application to detect and rectify a deadlock.</source>
          <target state="translated">この関数はデッドロックの問題には対処しません。プロセスが一度に1つのリソースのみをロックする限り、デッドロックが発生することはありません。いくつかのプロセスが2つ以上のリソースをロックしようとすると、デッドロックが発生することがあります。デッドロックを検出して修正するのはアプリケーション次第です。</target>
        </trans-unit>
        <trans-unit id="35227fc1f3835cb57763b0f1a4bfacec807769bc" translate="yes" xml:space="preserve">
          <source>This function does not return. It handles the system message and then either calls the following if process execution is to continue:</source>
          <target state="translated">この関数は戻りません。システムメッセージを処理し、プロセスの実行を継続する場合は以下のいずれかを呼び出します。</target>
        </trans-unit>
        <trans-unit id="faacbdb3dacf5784f01df9011f0ba223b7d60c23" translate="yes" xml:space="preserve">
          <source>This function does the same as (and does call) the &lt;code&gt;hibernate/3&lt;/code&gt; BIF, but ensures that exception handling and logging continues to work as expected when the process wakes up.</source>
          <target state="translated">この関数は &lt;code&gt;hibernate/3&lt;/code&gt; BIF と同じように（呼び出しも）行いますが、プロセスが起動したときに例外処理とロギングが期待どおりに機能し続けることを保証します。</target>
        </trans-unit>
        <trans-unit id="36733f4f0e4a47c473ebe622e8727d51028dd793" translate="yes" xml:space="preserve">
          <source>This function enables call trace for one or more functions. All exported functions matching the &lt;code&gt;{Module, Function, Arity}&lt;/code&gt; argument will be concerned, but the &lt;code&gt;match_spec()&lt;/code&gt; may further narrow down the set of function calls generating trace messages.</source>
          <target state="translated">この関数は、1つ以上の関数の呼び出しトレースを有効にします。 &lt;code&gt;{Module, Function, Arity}&lt;/code&gt; 引数に一致するすべてのエクスポートされた関数が関係しますが、 &lt;code&gt;match_spec()&lt;/code&gt; はトレースメッセージを生成する関数呼び出しのセットをさらに絞り込む場合があります。</target>
        </trans-unit>
        <trans-unit id="368666e6ad2867a60cda73d9bf0c86e3149c145a" translate="yes" xml:space="preserve">
          <source>This function ensures that the results displayed by &lt;code&gt;analyze/0,1,2&lt;/code&gt; are printed both to the file &lt;code&gt;File&lt;/code&gt; and the screen.</source>
          <target state="translated">この関数は、 &lt;code&gt;analyze/0,1,2&lt;/code&gt; によって表示された結果がファイル &lt;code&gt;File&lt;/code&gt; と画面の両方に出力されることを保証します。</target>
        </trans-unit>
        <trans-unit id="1a7330bbeab182a749c3e5f5deba94d5a86ea474" translate="yes" xml:space="preserve">
          <source>This function extracts the initial call of a process that was started using one of the spawn or start functions in this module, and translates it to more useful information. &lt;code&gt;Process&lt;/code&gt; can either be a pid, an integer tuple (from which a pid can be created), or the process information of a process &lt;code&gt;Pid&lt;/code&gt; fetched through an &lt;code&gt;erlang:process_info(Pid)&lt;/code&gt; function call.</source>
          <target state="translated">この関数は、このモジュールのspawn関数またはstart関数のいずれかを使用して開始されたプロセスの最初の呼び出しを抽出し、より有用な情報に変換します。 &lt;code&gt;Process&lt;/code&gt; は、pid、整数タプル（そこからpidを作成できます）、または &lt;code&gt;erlang:process_info(Pid)&lt;/code&gt; 関数呼び出しを介してフェッチされたプロセス &lt;code&gt;Pid&lt;/code&gt; のプロセス情報のいずれかです。</target>
        </trans-unit>
        <trans-unit id="e682f273c8e96989f5d96e73eb77713bc1444f02" translate="yes" xml:space="preserve">
          <source>This function fails if the atom is too long for the buffer or if it cannot be represented with encoding &lt;code&gt;want&lt;/code&gt;.</source>
          <target state="translated">この関数は、アトムがバッファに対して長すぎる場合、またはエンコーディング &lt;code&gt;want&lt;/code&gt; で表現できない場合に失敗します。</target>
        </trans-unit>
        <trans-unit id="0da14902361aba9b7fcf3f2ac32b625e0ac51f73" translate="yes" xml:space="preserve">
          <source>This function first attempts to autoload &lt;code&gt;Module&lt;/code&gt;. If that is not possible, an &lt;code&gt;undef&lt;/code&gt; exception is raised.</source>
          <target state="translated">この関数は、最初に &lt;code&gt;Module&lt;/code&gt; のオートロードを試みます。それが不可能な場合は、 &lt;code&gt;undef&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="2d26740fa881de95c3af6c29ab8da1324a33cbdf" translate="yes" xml:space="preserve">
          <source>This function first spawns a process &lt;code&gt;P&lt;/code&gt; which evaluates &lt;code&gt;Fun()&lt;/code&gt; or &lt;code&gt;apply(Module,Function,Args)&lt;/code&gt;. Then, it starts profiling for &lt;code&gt;P&lt;/code&gt; and the processes in &lt;code&gt;Rootset&lt;/code&gt; (and any new processes spawned from them). Information about activity in any profiled process is stored in the Eprof database.</source>
          <target state="translated">この関数は、最初に &lt;code&gt;Fun()&lt;/code&gt; または &lt;code&gt;apply(Module,Function,Args)&lt;/code&gt; を評価するプロセス &lt;code&gt;P&lt;/code&gt; を生成します。次に、 &lt;code&gt;P&lt;/code&gt; と &lt;code&gt;Rootset&lt;/code&gt; のプロセス（およびそれらから生成された新しいプロセス）のプロファイリングを開始します。プロファイル化されたプロセスのアクティビティに関する情報は、Eprofデータベースに格納されます。</target>
        </trans-unit>
        <trans-unit id="a51eb8328b3ca7e73bd2ddec9c6cd1f1f6bce2fa" translate="yes" xml:space="preserve">
          <source>This function generates a &lt;code&gt;not_implemented&lt;/code&gt; error exception when the jump function is not implemented for the algorithm specified in the state in the process dictionary.</source>
          <target state="translated">この関数は、プロセスディクショナリの状態で指定されたアルゴリズムに対してジャンプ関数が実装されていない場合、 &lt;code&gt;not_implemented&lt;/code&gt; エラー例外を生成します。</target>
        </trans-unit>
        <trans-unit id="886d1bea974ef611ef862bdf736eeb1b8ee5deb0" translate="yes" xml:space="preserve">
          <source>This function generates a &lt;code&gt;not_implemented&lt;/code&gt; error exception when the jump function is not implemented for the algorithm specified in the state.</source>
          <target state="translated">状態で指定されたアルゴリズムに対してジャンプ関数が実装されていない場合、この関数は &lt;code&gt;not_implemented&lt;/code&gt; エラー例外を生成します。</target>
        </trans-unit>
        <trans-unit id="6058a385a21e4246b670869f65aa6fd981a5a8b7" translate="yes" xml:space="preserve">
          <source>This function has limited use in normal code. It is used by the &lt;code&gt;&lt;a href=&quot;dets&quot;&gt;dets&lt;/a&gt;&lt;/code&gt; module to perform the &lt;code&gt;dets:select()&lt;/code&gt; operations and by Mnesia during transactions.</source>
          <target state="translated">この関数は、通常のコードでは使用が制限されています。 &lt;code&gt;dets:select()&lt;/code&gt; 操作を実行するために &lt;code&gt;&lt;a href=&quot;dets&quot;&gt;dets&lt;/a&gt;&lt;/code&gt; モジュールによって使用され、トランザクション中にMnesiaによって使用されます。</target>
        </trans-unit>
        <trans-unit id="523fd33cf3afa46e759133c868d60920d18b1dc7" translate="yes" xml:space="preserve">
          <source>This function has limited use in normal code. It is used by the &lt;code&gt;&lt;a href=&quot;dets&quot;&gt;dets&lt;/a&gt;&lt;/code&gt; module to perform the &lt;code&gt;dets:select()&lt;/code&gt; operations.</source>
          <target state="translated">この関数は、通常のコードでは使用が制限されています。 &lt;code&gt;dets:select()&lt;/code&gt; 操作を実行するために &lt;code&gt;&lt;a href=&quot;dets&quot;&gt;dets&lt;/a&gt;&lt;/code&gt; モジュールによって使用されます。</target>
        </trans-unit>
        <trans-unit id="d58459e2ceed77eb8305bceed246e818de9ca01c" translate="yes" xml:space="preserve">
          <source>This function implements case normalization, percent-encoding normalization, path segment normalization and scheme based normalization for HTTP(S) with basic support for FTP, SSH, SFTP and TFTP.</source>
          <target state="translated">この関数は、FTP,SSH,SFTP,TFTP を基本的にサポートした HTTP(S)の大文字小文字の正規化、パーセンテージエンコーディング正規化、パスセグメント正規化、 スキームベースの正規化を実装しています。</target>
        </trans-unit>
        <trans-unit id="c8514d81ff22e1ff67620750cdc3dfb27e9e6f77" translate="yes" xml:space="preserve">
          <source>This function initiates the DBMS locally.</source>
          <target state="translated">この関数は、ローカルで DBMS を起動します。</target>
        </trans-unit>
        <trans-unit id="fcbc273861fed1e51bf947867b1a084c27622209" translate="yes" xml:space="preserve">
          <source>This function investigates if support is available for either Quickcheck, PropEr, or Triq. The options &lt;code&gt;{property_dir,AbsPath}&lt;/code&gt; and &lt;code&gt;{property_test_tool,Tool}&lt;/code&gt; are set in the &lt;code&gt;Config&lt;/code&gt; returned.</source>
          <target state="translated">この関数は、Quickcheck、PropEr、またはTriqのいずれかでサポートが利用可能かどうかを調査します。オプション &lt;code&gt;{property_dir,AbsPath}&lt;/code&gt; および &lt;code&gt;{property_test_tool,Tool}&lt;/code&gt; は、返される &lt;code&gt;Config&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="6a7d3a4b7f3328d175ce6a9a9eb8e20886f3bda3" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; use &lt;code&gt;&lt;a href=&quot;#lowercase-1&quot;&gt;lowercase/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#uppercase-1&quot;&gt;uppercase/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#titlecase-1&quot;&gt;titlecase/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#casefold-1&quot;&gt;casefold/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#lowercase-1&quot;&gt;lowercase/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#uppercase-1&quot;&gt;uppercase/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#titlecase-1&quot;&gt;titlecase/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#casefold-1&quot;&gt;casefold/1&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="423ca16d197ccc978bd5081d6b3eb1c403bc0744" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#find-2&quot;&gt;find/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#find-2&quot;&gt;find/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="2a516abdfc30d7c9e3685abf6e57bb1e1d0b658e" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#find-3&quot;&gt;find/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#find-3&quot;&gt;find/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="52d494db0c1567d04ee40812bdffbefd6c016473" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#length-1&quot;&gt;length/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#length-1&quot;&gt;length/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ab94cedb464e4260389af7be6dfaf6ffb7bd2291" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#lexemes-2&quot;&gt;lexemes/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#lexemes-2&quot;&gt;lexemes/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="205cdd304fd7174c14274c85d2328b2a17ae0a9e" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#nth_lexeme-3&quot;&gt;nth_lexeme/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#nth_lexeme-3&quot;&gt;nth_lexeme/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ef02bd0b5153d37d1fa93514bd445ad29bc64930" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#pad-2&quot;&gt;pad/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#pad-3&quot;&gt;pad/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。使用 &lt;code&gt;&lt;a href=&quot;#pad-2&quot;&gt;pad/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#pad-3&quot;&gt;pad/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba5aba1911d9f1f71e6680b8d5f950e286eccad6" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#pad-3&quot;&gt;pad/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#pad-3&quot;&gt;pad/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0297c83560fb40b3e25160700b963d4d28d8cb3d" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#slice-3&quot;&gt;slice/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#slice-3&quot;&gt;slice/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9483920738b267719838628a8df6eae176da3415" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#take-2&quot;&gt;take/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#take-2&quot;&gt;take/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="29b69004da0d2e1742321c5e08d6472bd345f1bd" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#take-3&quot;&gt;take/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#take-3&quot;&gt;take/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b1fca9e1ff35bcfc01c17bd46889f3070478dc5b" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#trim-3&quot;&gt;trim/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#trim-3&quot;&gt;trim/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="206343ba93558e03d83b7d9b6041c45a9f4e4762" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;lists#duplicate-2&quot;&gt;lists:duplicate/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;lists#duplicate-2&quot;&gt;lists:duplicate/2&lt;/a&gt;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="bdc288f4c8566ab96ad5a3c012d039a6f14b114d" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;lists#join-2&quot;&gt;lists:join/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;lists#join-2&quot;&gt;lists:join/2&lt;/a&gt;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="be41039c1c345076e4346d099bd59b24ee69b28b" translate="yes" xml:space="preserve">
          <source>This function is &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;[String1, String2]&lt;/code&gt; as &lt;code&gt;Data&lt;/code&gt; argument, and call &lt;code&gt;&lt;a href=&quot;unicode#characters_to_list-2&quot;&gt;unicode:characters_to_list/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;unicode#characters_to_binary-2&quot;&gt;unicode:characters_to_binary/2&lt;/a&gt;&lt;/code&gt; to flatten the output.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;obsolete&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;[String1, String2]&lt;/code&gt; を &lt;code&gt;Data&lt;/code&gt; 引数として使用し、 &lt;code&gt;&lt;a href=&quot;unicode#characters_to_list-2&quot;&gt;unicode:characters_to_list/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;unicode#characters_to_binary-2&quot;&gt;unicode:characters_to_binary/2&lt;/a&gt;&lt;/code&gt; を呼び出して出力を平坦化します。</target>
        </trans-unit>
        <trans-unit id="0fe0ff73852f97430972aade26b365aeb9d4dcca" translate="yes" xml:space="preserve">
          <source>This function is &lt;strong&gt;not&lt;/strong&gt; to have any side effects, as it can be called multiple times by &lt;code&gt;Common Test&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;Common Test&lt;/code&gt; によって複数回呼び出される可能性があるため、副作用はあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d1601bc7321a92135715173d0e057687db27b297" translate="yes" xml:space="preserve">
          <source>This function is &lt;strong&gt;only&lt;/strong&gt; intended to be used from functions called by the Erl Scheme interface to deliver parts of the content to the user.</source>
          <target state="translated">この関数は、コンテンツの一部をユーザーに配信するためにErl Schemeインターフェースによって呼び出される関数からの使用&lt;strong&gt;のみを&lt;/strong&gt;目的としています。</target>
        </trans-unit>
        <trans-unit id="aef47781d467db25a7963a68f242afbbc794ce0b" translate="yes" xml:space="preserve">
          <source>This function is a shortcut allowing to start a trace with one command. Each tuple in &lt;code&gt;Patterns&lt;/code&gt; is converted to a list, which in turn is passed to &lt;code&gt;ttb:tpl/2,3,4&lt;/code&gt;.</source>
          <target state="translated">この機能は、1つのコマンドでトレースを開始できるショートカットです。 &lt;code&gt;Patterns&lt;/code&gt; 各タプルはリストに変換され、リストは &lt;code&gt;ttb:tpl/2,3,4&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="b43d5979e9394159963538ec618354c0f2550802" translate="yes" xml:space="preserve">
          <source>This function is a utility to test a &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; used in calls to &lt;code&gt;&lt;a href=&quot;#select-2&quot;&gt;select/2&lt;/a&gt;&lt;/code&gt;. The function both tests &lt;code&gt;MatchSpec&lt;/code&gt; for &quot;syntactic&quot; correctness and runs the match specification against object &lt;code&gt;Tuple&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#select-2&quot;&gt;select/2&lt;/a&gt;&lt;/code&gt; の呼び出しで使用される &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; をテストするユーティリティです。機能の両方のテスト &lt;code&gt;MatchSpec&lt;/code&gt; 「構文」正しさのために、物体戦仕様走る &lt;code&gt;Tuple&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d988191fa0dabe515db4af812656eff83c34cb63" translate="yes" xml:space="preserve">
          <source>This function is always called before any other callback function. Use it to initiate any common state. It is to return a state for this CTH.</source>
          <target state="translated">この関数は常に他のコールバック関数の前に呼び出されます。任意の共通の状態を開始するために使用します。このCTHの状態を返すことです。</target>
        </trans-unit>
        <trans-unit id="b516bc2e9034c1590527ec443de2c6737bcd4f59" translate="yes" xml:space="preserve">
          <source>This function is asynchronous, and does not return any information. If an error occurs, &lt;code&gt;user_err/2&lt;/code&gt; of the error report module is called and the notification is discarded.</source>
          <target state="translated">この関数は非同期であり、情報を返しません。エラーが発生した場合、エラー報告モジュールの &lt;code&gt;user_err/2&lt;/code&gt; が呼び出され、通知は破棄されます。</target>
        </trans-unit>
        <trans-unit id="85c98f3d29d4a07045be121e9e487541dab759e4" translate="yes" xml:space="preserve">
          <source>This function is automatically run by program &lt;code&gt;ct_run&lt;/code&gt;.</source>
          <target state="translated">この関数は、プログラム &lt;code&gt;ct_run&lt;/code&gt; によって自動的に実行されます。</target>
        </trans-unit>
        <trans-unit id="3279d0d6b02338f13c8bc53782a187d1879ee456" translate="yes" xml:space="preserve">
          <source>This function is called after &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group&lt;/a&gt;&lt;/code&gt; の後に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group&lt;/a&gt;&lt;/code&gt; に対して動作します。</target>
        </trans-unit>
        <trans-unit id="9188edb1cc0ebdde86ffdb4193d6c9cead6cb834" translate="yes" xml:space="preserve">
          <source>This function is called after &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; の後に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; に対して動作します。</target>
        </trans-unit>
        <trans-unit id="5632d3f19a46e6a63364561ccdcd84c5cbd07239" translate="yes" xml:space="preserve">
          <source>This function is called after &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_end_per_suite-4&quot;&gt;post_end_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; の後に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_end_per_suite-4&quot;&gt;post_end_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ed2c8cbf6eea27fe25c9e2e37745c13758f418bf" translate="yes" xml:space="preserve">
          <source>This function is called after &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_group-2&quot;&gt;init_per_group&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_group-2&quot;&gt;init_per_group&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_group-2&quot;&gt;init_per_group&lt;/a&gt;&lt;/code&gt; の後に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_group-2&quot;&gt;init_per_group&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="eeb41891de5f47fa39556ecfa785a92f82d5ca45" translate="yes" xml:space="preserve">
          <source>This function is called after &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; if it exists. It typically contains extra checks to ensure that all the correct dependencies are started correctly.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; の後に呼び出されます。通常は、すべての正しい依存関係が正しく開始されていることを確認するための追加のチェックが含まれています。</target>
        </trans-unit>
        <trans-unit id="ab712217cf24a26d75845255e5f1d384ed7df651" translate="yes" xml:space="preserve">
          <source>This function is called after &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; の後に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ac4e91297af25f1c85d719157b005b8f81db41e7" translate="yes" xml:space="preserve">
          <source>This function is called after each test case, and can be used to clean up after &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; and the test case. Any return value (besides &lt;code&gt;{fail,Reason}&lt;/code&gt; and &lt;code&gt;{save_config,SaveConfig}&lt;/code&gt;) is ignored. By returning &lt;code&gt;{fail,Reason}&lt;/code&gt;, &lt;code&gt;TestCase&lt;/code&gt; is marked as faulty (even though it was successful in the sense that it returned a value instead of terminating).</source>
          <target state="translated">この関数は各テストケースの後に &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; れ、init_per_testcase / 2とテストケースの後にクリーンアップするために使用できます。（ &lt;code&gt;{fail,Reason}&lt;/code&gt; と &lt;code&gt;{save_config,SaveConfig}&lt;/code&gt; 以外の）戻り値は無視されます。 &lt;code&gt;{fail,Reason}&lt;/code&gt; 返すことで、 &lt;code&gt;TestCase&lt;/code&gt; は障害としてマークされます（終了するのではなく値を返すという意味で成功した場合でも）。</target>
        </trans-unit>
        <trans-unit id="648d9b19e4f1798cccb4aa970ca13730d675986d" translate="yes" xml:space="preserve">
          <source>This function is called after the execution of a test case group is finished. It is meant to be used for cleaning up after &lt;code&gt;&lt;a href=&quot;#Module:init_per_group-2&quot;&gt;init_per_group/2&lt;/a&gt;&lt;/code&gt;. A status value for a nested subgroup can be returned with &lt;code&gt;{return_group_result,Status}&lt;/code&gt;. The status can be retrieved in &lt;code&gt;&lt;a href=&quot;#Module:end_per_group-2&quot;&gt;end_per_group/2&lt;/a&gt;&lt;/code&gt; for the group on the level above. The status is also used by &lt;code&gt;Common Test&lt;/code&gt; for deciding if execution of a group is to proceed if property &lt;code&gt;sequence&lt;/code&gt; or &lt;code&gt;repeat_until_*&lt;/code&gt; is set.</source>
          <target state="translated">この関数は、テストケースグループの実行が終了した後に呼び出されます。 &lt;code&gt;&lt;a href=&quot;#Module:init_per_group-2&quot;&gt;init_per_group/2&lt;/a&gt;&lt;/code&gt; の後のクリーンアップに使用するためのものです。ネストされたサブグループのステータス値は、 &lt;code&gt;{return_group_result,Status}&lt;/code&gt; で返すことができます。ステータスは、上のレベルのグループの &lt;code&gt;&lt;a href=&quot;#Module:end_per_group-2&quot;&gt;end_per_group/2&lt;/a&gt;&lt;/code&gt; で取得できます。ステータスは、プロパティ &lt;code&gt;sequence&lt;/code&gt; または &lt;code&gt;repeat_until_*&lt;/code&gt; が設定されている場合にグループの実行を続行するかどうかを決定するために、 &lt;code&gt;Common Test&lt;/code&gt; でも使用されます。</target>
        </trans-unit>
        <trans-unit id="897cf1fddb4813f2f697f362b138508da5c7dd0a" translate="yes" xml:space="preserve">
          <source>This function is called as the last test case in the suite. It is meant to be used for cleaning up after &lt;code&gt;&lt;a href=&quot;#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、スイートの最後のテストケースとして呼び出されます。 &lt;code&gt;&lt;a href=&quot;#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt; の後のクリーンアップに使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="a0372e5f1383e52f209cab7781bd11e0c4ba8e71" translate="yes" xml:space="preserve">
          <source>This function is called at the end of a CTH &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、CTH &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; 最後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f0807a57b644a344571e1467f9b13cb9f18d17f0" translate="yes" xml:space="preserve">
          <source>This function is called at the end of stage 1 of the discovery process. It should return either the atom &lt;code&gt;ignore&lt;/code&gt; or &lt;code&gt;{ok, usm_entry() | [usm_entry()]}&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;snmp_agent_config_files#usm&quot;&gt;usm_entry()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmpa_conf#usm_entry&quot;&gt;usm_entry/13&lt;/a&gt;&lt;/code&gt; for more info.</source>
          <target state="translated">この関数は、ディスカバリプロセスのステージ1の終わりに呼び出されます。アトム &lt;code&gt;ignore&lt;/code&gt; または &lt;code&gt;{ok, usm_entry() | [usm_entry()]}&lt;/code&gt; いずれかを返す必要があります。[usm_entry（）]}。詳細については、 &lt;code&gt;&lt;a href=&quot;snmp_agent_config_files#usm&quot;&gt;usm_entry()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;snmpa_conf#usm_entry&quot;&gt;usm_entry/13&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fb32881cf0a426df77fb1522665bfe4e0e2538b1" translate="yes" xml:space="preserve">
          <source>This function is called before &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_init_per_suite-3&quot;&gt;pre_init_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group&lt;/a&gt;&lt;/code&gt; の前に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_init_per_suite-3&quot;&gt;pre_init_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group&lt;/a&gt;&lt;/code&gt; に対して動作します。</target>
        </trans-unit>
        <trans-unit id="e874f35f84af17d413fa61bed6f2c2a545583190" translate="yes" xml:space="preserve">
          <source>This function is called before &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_init_per_suite-3&quot;&gt;pre_init_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; の前に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_init_per_suite-3&quot;&gt;pre_init_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite&lt;/a&gt;&lt;/code&gt; に対して動作します。</target>
        </trans-unit>
        <trans-unit id="5d541acf0f757f563f08bac98ff0a9411ac868f8" translate="yes" xml:space="preserve">
          <source>This function is called before &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_end_per_suite-3&quot;&gt;pre_end_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; の前に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_end_per_suite-3&quot;&gt;pre_end_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="6d4fd2c714fc08ec0ac6579748777b65c3366a58" translate="yes" xml:space="preserve">
          <source>This function is called before &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_group-2&quot;&gt;init_per_group&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_init_per_suite-3&quot;&gt;pre_init_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_group-2&quot;&gt;init_per_group&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_group-2&quot;&gt;init_per_group&lt;/a&gt;&lt;/code&gt; の前に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_init_per_suite-3&quot;&gt;pre_init_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_group-2&quot;&gt;init_per_group&lt;/a&gt;&lt;/code&gt; に対して動作します。</target>
        </trans-unit>
        <trans-unit id="c4fada08cbaf8b15ce7f51c95c9fe3b326d58378" translate="yes" xml:space="preserve">
          <source>This function is called before &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; if it exists. It typically contains initialization/logging that must be done before &lt;code&gt;init_per_suite&lt;/code&gt; is called. If &lt;code&gt;{skip,Reason}&lt;/code&gt; or &lt;code&gt;{fail,Reason}&lt;/code&gt; is returned, &lt;code&gt;init_per_suite&lt;/code&gt; and all test cases of the suite are skipped and &lt;code&gt;Reason&lt;/code&gt; printed in the overview log of the suite.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; の前に呼び出されます。通常、 &lt;code&gt;init_per_suite&lt;/code&gt; が呼び出される前に実行する必要のある初期化/ロギングが含まれています。場合 &lt;code&gt;{skip,Reason}&lt;/code&gt; または &lt;code&gt;{fail,Reason}&lt;/code&gt; 、返され &lt;code&gt;init_per_suite&lt;/code&gt; とスイートのすべてのテストケースはスキップされ、 &lt;code&gt;Reason&lt;/code&gt; スイートの概要ログに印刷します。</target>
        </trans-unit>
        <trans-unit id="14766708da0b30b7e24b398d506799e96916c97e" translate="yes" xml:space="preserve">
          <source>This function is called before &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; if it exists. It behaves the same way as &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_init_per_suite-3&quot;&gt;pre_init_per_suite&lt;/a&gt;&lt;/code&gt;, but for function &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は、存在する場合、 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; の前に呼び出されます。これは &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:pre_init_per_suite-3&quot;&gt;pre_init_per_suite&lt;/a&gt;&lt;/code&gt; と同じように動作しますが、代わりに関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3ec02031e2fa8bc763f23eebb36182a4725659b4" translate="yes" xml:space="preserve">
          <source>This function is called before each test case. Argument &lt;code&gt;TestCase&lt;/code&gt; is the test case name, and &lt;code&gt;Config&lt;/code&gt; (list of key-value tuples) is the configuration data that can be modified. The &lt;code&gt;NewConfig&lt;/code&gt; list returned from this function is given as &lt;code&gt;Config&lt;/code&gt; to the test case. If &lt;code&gt;{fail,Reason}&lt;/code&gt; is returned, the test case is marked as failed without being executed.</source>
          <target state="translated">この関数は、各テストケースの前に呼び出されます。引数 &lt;code&gt;TestCase&lt;/code&gt; はテストケース名で、 &lt;code&gt;Config&lt;/code&gt; （キーと値のタプルのリスト）は変更可能な構成データです。 &lt;code&gt;NewConfig&lt;/code&gt; この関数から返されたリストは、次のように与えられている &lt;code&gt;Config&lt;/code&gt; テストケースに。場合 &lt;code&gt;{fail,Reason}&lt;/code&gt; が実行されずに失敗したとして返され、テストケースがマークされています。</target>
        </trans-unit>
        <trans-unit id="7cef0bc6ae48b3bc1a5099f8d9c601b37d907e07" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_event&lt;/code&gt; process in the following situations:</source>
          <target state="translated">この関数は、以下の状況で &lt;code&gt;gen_event&lt;/code&gt; プロセスによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4e47279564d310806f28fccb0940fabd880414dd" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_server&lt;/code&gt; process in the following situations:</source>
          <target state="translated">この関数は、次の状況で &lt;code&gt;gen_server&lt;/code&gt; プロセスによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a51ead4642d619f15354dcc0634fe8062618949d" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_server&lt;/code&gt; process when a time-out occurs or when it receives any other message than a synchronous or asynchronous request (or a system message).</source>
          <target state="translated">この関数は、タイムアウトが発生したとき、または同期要求や非同期要求（またはシステムメッセージ）以外のメッセージを受け取ったときに、 &lt;code&gt;gen_server&lt;/code&gt; プロセスによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="81f55aa9a3503931bbd4c62f78241c8bfccce378" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_server&lt;/code&gt; process when it is about to terminate. It is to be the opposite of &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; and do any necessary cleaning up. When it returns, the &lt;code&gt;gen_server&lt;/code&gt; process terminates with &lt;code&gt;Reason&lt;/code&gt;. The return value is ignored.</source>
          <target state="translated">この関数は、終了しようとしているときに &lt;code&gt;gen_server&lt;/code&gt; プロセスによって呼び出されます。 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; の反対で、必要なクリーンアップを行います。戻ったとき、 &lt;code&gt;gen_server&lt;/code&gt; プロセスは &lt;code&gt;Reason&lt;/code&gt; で終了します。戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="854175a561611b0f58880036cbf8c4836509caea" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_server&lt;/code&gt; process when it is to update its internal state during a release upgrade/downgrade, that is, when the instruction &lt;code&gt;{update,Module,Change,...}&lt;/code&gt;, where &lt;code&gt;Change={advanced,Extra}&lt;/code&gt;, is specifed in the &lt;code&gt;appup&lt;/code&gt; file. For more information, see section &lt;code&gt;Release Handling Instructions&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">この関数は、リリースのアップグレード/ダウングレード中に内部状態を更新するとき、つまり、命令が &lt;code&gt;{update,Module,Change,...}&lt;/code&gt; であるときに、 &lt;code&gt;gen_server&lt;/code&gt; プロセスによって呼び出されます。ここで、 &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; 、 &lt;code&gt;appup&lt;/code&gt; ファイルで指定されています。詳細については、OTP設計原則のセクション「 &lt;code&gt;Release Handling Instructions&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="6d4c34ae1c200b76e11bc231bee8bd2807964c89" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_server&lt;/code&gt; process whenever a previous callback returns &lt;code&gt;{continue, Continue}&lt;/code&gt;. &lt;code&gt;handle_continue/2&lt;/code&gt; is invoked immediately after the previous callback, which makes it useful for performing work after initialization or for splitting the work in a callback in multiple steps, updating the process state along the way.</source>
          <target state="translated">この関数は、前のコールバックが &lt;code&gt;{continue, Continue}&lt;/code&gt; 返すたびに &lt;code&gt;gen_server&lt;/code&gt; プロセスによって呼び出されます。 &lt;code&gt;handle_continue/2&lt;/code&gt; は前のコールバックの直後に呼び出されるため、初期化後に作業を実行したり、コールバックの作業を複数のステップに分割したり、途中でプロセスの状態を更新したりするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="7c755e5f75a4b9ab817fb2fc0f0f130048764892" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_statem&lt;/code&gt; process when any of the following apply:</source>
          <target state="translated">この関数は、次のいずれかに &lt;code&gt;gen_statem&lt;/code&gt; する場合にgen_statemプロセスによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="012052cb437447cd791b721593de5a645b47fd05" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_statem&lt;/code&gt; when it is about to terminate. It is to be the opposite of &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; and do any necessary cleaning up. When it returns, the &lt;code&gt;gen_statem&lt;/code&gt; terminates with &lt;code&gt;Reason&lt;/code&gt;. The return value is ignored.</source>
          <target state="translated">この関数は、終了しようとしているときに &lt;code&gt;gen_statem&lt;/code&gt; によって呼び出されます。 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; の反対で、必要なクリーンアップを行います。戻ったとき、 &lt;code&gt;gen_statem&lt;/code&gt; は &lt;code&gt;Reason&lt;/code&gt; で終了します。戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="7ca2b78a5bbaa99a4fbd81da5ab6158558318d3b" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_statem&lt;/code&gt; when it is to update its internal state during a release upgrade/downgrade, that is, when the instruction &lt;code&gt;{update,Module,Change,...}&lt;/code&gt;, where &lt;code&gt;Change={advanced,Extra}&lt;/code&gt;, is specified in the &lt;code&gt;appup&lt;/code&gt; file. For more information, see &lt;code&gt;OTP Design Principles&lt;/code&gt;.</source>
          <target state="translated">この関数は、リリースのアップグレード/ダウングレード中に内部状態を更新する場合、つまり、命令が &lt;code&gt;{update,Module,Change,...}&lt;/code&gt; であるときに &lt;code&gt;gen_statem&lt;/code&gt; によって呼び出されます。ここで、 &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; 、 &lt;code&gt;appup&lt;/code&gt; ファイルで指定されます。詳細については、 &lt;code&gt;OTP Design Principles&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="b1029bd58312f364737a518c22f5aea571963829" translate="yes" xml:space="preserve">
          <source>This function is called by a &lt;code&gt;gen_statem&lt;/code&gt; when it needs to find out the &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; of the callback module. The value is cached by &lt;code&gt;gen_statem&lt;/code&gt; for efficiency reasons, so this function is only called once after server start and after code change, but before the first &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; in the current code version is called. More occasions may be added in future versions of &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">この関数は、コールバックモジュールの &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; を見つける必要があるときに、 &lt;code&gt;gen_statem&lt;/code&gt; によって呼び出されます。値は効率上の理由から &lt;code&gt;gen_statem&lt;/code&gt; によってキャッシュされるため、この関数は、サーバーの起動後とコードの変更後、現在のコードバージョンの最初の &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; が呼び出される前に1回だけ呼び出されます。 &lt;code&gt;gen_statem&lt;/code&gt; の将来のバージョンでは、さらに機会が追加される可能性があります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="46850b150e8f033a9f9fa7fa23905fcd27c1aa8d" translate="yes" xml:space="preserve">
          <source>This function is called by a channel process when it is about to terminate. Before this function is called, &lt;code&gt;&lt;a href=&quot;ssh_connection#close-2&quot;&gt;ssh_connection:close/2&lt;/a&gt;&lt;/code&gt; is called, if it has not been called earlier. This function does any necessary cleaning up. When it returns, the channel process terminates with reason &lt;code&gt;Reason&lt;/code&gt;. The return value is ignored.</source>
          <target state="translated">この関数は、終了しようとしているときにチャネルプロセスによって呼び出されます。この関数が呼び出される前に、 &lt;code&gt;&lt;a href=&quot;ssh_connection#close-2&quot;&gt;ssh_connection:close/2&lt;/a&gt;&lt;/code&gt; が呼び出されます（まだ呼び出されていない場合）。この関数は、必要なクリーンアップを実行します。それが戻ると、チャネルプロセスは理由 &lt;code&gt;Reason&lt;/code&gt; で終了します。戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="56c006741953e55f77a4441e9b362d11c170439b" translate="yes" xml:space="preserve">
          <source>This function is called by a client-side channel when it is to update its internal state during a release upgrade or downgrade, that is, when the instruction &lt;code&gt;{update,Module,Change,...}&lt;/code&gt;, where &lt;code&gt;Change={advanced,Extra}&lt;/code&gt;, is given in the &lt;code&gt;appup&lt;/code&gt; file. For more information, refer to Section 9.11.6 Release Handling Instructions in the &lt;code&gt;System Documentation&lt;/code&gt;.</source>
          <target state="translated">この関数は、リリースのアップグレードまたはダウングレード中に内部状態を更新するときに、つまり命令 &lt;code&gt;{update,Module,Change,...}&lt;/code&gt; ときに、クライアント側チャネルによって呼び出されます。ここで、 &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; は、 &lt;code&gt;appup&lt;/code&gt; ファイルで指定されます。詳細については、 &lt;code&gt;System Documentation&lt;/code&gt; セクション9.11.6リリース処理手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="98e32bc0ee74da52ca9a13438eac65dfb07d4d9a" translate="yes" xml:space="preserve">
          <source>This function is called by a process when it generates a system event. &lt;code&gt;FormFunc&lt;/code&gt; is a formatting function, called as &lt;code&gt;FormFunc(Device, Event, Extra)&lt;/code&gt; to print the events, which is necessary if tracing is activated. &lt;code&gt;Extra&lt;/code&gt; is any extra information that the process needs in the format function, for example, the process name.</source>
          <target state="translated">この関数は、システムイベントを生成するときにプロセスによって呼び出されます。 &lt;code&gt;FormFunc&lt;/code&gt; は &lt;code&gt;FormFunc(Device, Event, Extra)&lt;/code&gt; を出力するためにFormFunc（Device、Event、Extra）と呼ばれるフォーマット関数であり、トレースがアクティブ化されている場合に必要です。 &lt;code&gt;Extra&lt;/code&gt; は、プロセスがformat関数で必要とする追加情報（プロセス名など）です。</target>
        </trans-unit>
        <trans-unit id="ed0e0eb61ef16ef99456d0c2364049ed3a1ebf47" translate="yes" xml:space="preserve">
          <source>This function is called by an application after a code replacement, if the configuration parameters have changed.</source>
          <target state="translated">この関数は、設定パラメータが変更された場合に、コードの置き換え後にアプリケーションから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6621bfc9a122170668fcc8fc8225320a135fa869" translate="yes" xml:space="preserve">
          <source>This function is called by the &lt;code&gt;ssh_client_channel&lt;/code&gt; behavior when the channel is terminated, see &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel(3)&lt;/a&gt;&lt;/code&gt;. Thus, channels implemented with the behavior are not to call this function explicitly.</source>
          <target state="translated">この関数は、チャネルが終了したときに &lt;code&gt;ssh_client_channel&lt;/code&gt; 動作によって呼び出されます &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel(3)&lt;/a&gt;&lt;/code&gt; 参照してください。したがって、動作で実装されたチャネルは、この関数を明示的に呼び出すことはありません。</target>
        </trans-unit>
        <trans-unit id="dc9dece5047c3cb54dec0afd24b5a01788985144" translate="yes" xml:space="preserve">
          <source>This function is called by the runtime system if a call is made to &lt;code&gt;Module:Function(Arg1,.., ArgN)&lt;/code&gt; and &lt;code&gt;Module:Function/N&lt;/code&gt; is undefined. Notice that this function is evaluated inside the process making the original call.</source>
          <target state="translated">この関数は、 &lt;code&gt;Module:Function(Arg1,.., ArgN)&lt;/code&gt; 、 &lt;code&gt;Module:Function/N&lt;/code&gt; が未定義の場合、ランタイムシステムによって呼び出されます。この関数は、元の呼び出しを行うプロセス内で評価されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="932dde8834dd201f9618df3e2b729505b50863cc" translate="yes" xml:space="preserve">
          <source>This function is called by the supervisor bridge when it is about to terminate. It is to be the opposite of &lt;code&gt;Module:init/1&lt;/code&gt; and stop the subsystem and do any necessary cleaning up. The return value is ignored.</source>
          <target state="translated">この関数は、スーパーバイザーブリッジが終了しようとしているときに呼び出されます。これは &lt;code&gt;Module:init/1&lt;/code&gt; の反対で、サブシステムを停止し、必要なクリーンアップを行います。戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="ea3c4634990a20391de600270693f41ff61a2a1d" translate="yes" xml:space="preserve">
          <source>This function is called for an installed event handler that is to update its internal state during a release upgrade/downgrade, that is, when the instruction &lt;code&gt;{update,Module,Change,...}&lt;/code&gt;, where &lt;code&gt;Change={advanced,Extra}&lt;/code&gt;, is specified in the &lt;code&gt;.appup&lt;/code&gt; file. For more information, see &lt;code&gt;OTP Design Principles&lt;/code&gt;.</source>
          <target state="translated">この関数は、あるリリースのアップグレード/ダウングレード中にその内部状態を更新することで、インストールイベントハンドラのために呼び出されたときに命令 &lt;code&gt;{update,Module,Change,...}&lt;/code&gt; 、どこ &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; 、 &lt;code&gt;.appup&lt;/code&gt; ファイルで指定されています。詳細については、 &lt;code&gt;OTP Design Principles&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="cea3d7b3ef2cbf8699a32c34a5ebc6edac5d50d7" translate="yes" xml:space="preserve">
          <source>This function is called for each installed event handler when an event manager receives any other message than an event or a synchronous request (or a system message).</source>
          <target state="translated">この関数は、イベントマネージャがイベントまたは同期要求(またはシステムメッセージ)以外のメッセージを受信した場合に、インストールされている各イベントハンドラに対して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ce473b5b5bef5c09e6ef1d61b1ed1c647a383af4" translate="yes" xml:space="preserve">
          <source>This function is called for each target in the &lt;code&gt;Targets&lt;/code&gt; argument of the &lt;code&gt;delivery_targets/3&lt;/code&gt; function, see above.</source>
          <target state="translated">この関数は、 &lt;code&gt;delivery_targets/3&lt;/code&gt; 関数の &lt;code&gt;Targets&lt;/code&gt; 引数で各ターゲットに対して呼び出されます。上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="1d6462e692fd6e4e41ce5594f4b497bff94fb6d6" translate="yes" xml:space="preserve">
          <source>This function is called for every event sent by the parser. The error handling is done through exceptions. Use throw/1 to send the following tuple {Tag = atom(), Reason = string()} if the application encounters a fatal error. Tag is an atom that identifies the functional entity that sends the exception and Reason is a string that describes the problem.</source>
          <target state="translated">この関数は、パーサが送信するイベントごとに呼び出されます。エラー処理は例外を通して行われます。アプリケーションが致命的なエラーに遭遇した場合、以下のタプル{Tag=atom(),Reason=string()}を送信するために throw/1 を使用します。Tagは例外を送信する機能エンティティを識別するアトムで、Reasonは問題を記述する文字列です。</target>
        </trans-unit>
        <trans-unit id="93bdecc9d17882d1b467ebb3869ace1d974136a0" translate="yes" xml:space="preserve">
          <source>This function is called from the supervisor at system start-up.</source>
          <target state="translated">この関数は、システム起動時にスーパーバイザから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a217044c5be614a5f094b6a72163b7e4bdd7856f" translate="yes" xml:space="preserve">
          <source>This function is called only if the CTH is added before &lt;code&gt;init_per_suite is run&lt;/code&gt;. For details, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#scope&quot;&gt;CTH Scope&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">この関数は、 &lt;code&gt;init_per_suite is run&lt;/code&gt; される前にCTHが追加された場合にのみ呼び出されます。詳細については、ユーザーガイドのセクション &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#scope&quot;&gt;CTH Scope&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9151faa7459c76d911ec31cbf5c69110f9a96417" translate="yes" xml:space="preserve">
          <source>This function is called only if the CTH is added before or in &lt;code&gt;init_per_suite&lt;/code&gt;. For details, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#scope&quot;&gt;CTH Scope&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">この関数は、CTHが &lt;code&gt;init_per_suite&lt;/code&gt; の前または中に追加された場合にのみ呼び出されます。詳細については、ユーザーガイドのセクション &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#scope&quot;&gt;CTH Scope&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d413292a54f27c9406de8cff392ae42d2f42729" translate="yes" xml:space="preserve">
          <source>This function is called to perform the set in phase two of the set-request processing. It is only called if the corresponding &lt;code&gt;is_set_ok&lt;/code&gt; function is present and returns &lt;code&gt;noError&lt;/code&gt;.</source>
          <target state="translated">この関数は、セット要求処理のフェーズ2でセットを実行するために呼び出されます。対応する &lt;code&gt;is_set_ok&lt;/code&gt; 関数が存在し、 &lt;code&gt;noError&lt;/code&gt; を返す場合にのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="19d4b60d6e3de5df91e369f01d6f092302794154" translate="yes" xml:space="preserve">
          <source>This function is called when a log event has passed through all primary filters, and all handler filters attached to the handler in question. The function call is executed on the client process, and it is up to the handler implementation if other processes are involved or not.</source>
          <target state="translated">この関数は、ログイベントがすべてのプライマリフィルタと、問題のハンドラに接続されているすべてのハンドラフィルタを通過したときに呼び出されます。関数呼び出しはクライアントプロセス上で実行され、他のプロセスが関与しているかどうかはハンドラの実装次第です。</target>
        </trans-unit>
        <trans-unit id="c295250b137bf52da997b24c29441addd734d55e" translate="yes" xml:space="preserve">
          <source>This function is called when a message is received from an unknown agent.</source>
          <target state="translated">この関数は、未知のエージェントからメッセージを受信した場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5d70c9d97d9b9a958c936b8de051f3ed8d7ea9af" translate="yes" xml:space="preserve">
          <source>This function is called when a segment reply has been received if the &lt;code&gt;&lt;a href=&quot;megaco#conn_info&quot;&gt;segment_reply_ind&lt;/a&gt;&lt;/code&gt; config option has been set to true.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;megaco#conn_info&quot;&gt;segment_reply_ind&lt;/a&gt;&lt;/code&gt; 構成オプションがtrueに設定されている場合にセグメント応答を受信すると呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0a9e596fa34499a1e902a649a40ec5eaea84dc1d" translate="yes" xml:space="preserve">
          <source>This function is called when an application is about to be stopped, before shutting down the processes of the application.</source>
          <target state="translated">この関数は、アプリケーションが停止しようとしているときに呼び出され、アプリケーションのプロセスをシャットダウンする前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e52a273e8b54ca8a87814403662bc4639ec75915" translate="yes" xml:space="preserve">
          <source>This function is called when the handshake has completed and the distribution channel is up. The distribution controller can begin dispatching traffic over the channel. This function is optional.</source>
          <target state="translated">この関数は、ハンドシェイクが完了し、ディストリビュー ションチャネルが立ち上がったときに呼び出されます。ディストリビューションコントローラは、チャネル上でトラフィックのディスパッチを開始することができます。この関数はオプションです。</target>
        </trans-unit>
        <trans-unit id="78b766c6378e4e694c5a1f56cd06d012c7c1210f" translate="yes" xml:space="preserve">
          <source>This function is called when the manager needs to communicate an &quot;asynchronous&quot; error to the user: e.g. failure to send an asynchronous message (i.e. encoding error), a received message was discarded due to security error, the manager failed to generate a response message to a received inform-request, or when receiving an unexpected PDU from an agent (could be an expired async request).</source>
          <target state="translated">この関数は、マネージャが「非同期」エラーをユーザに伝える必要がある場合に呼び出されます。例えば、非同期メッセージの送信に失敗した(エンコーディングエラーなど)、受信したメッセージがセキュリティエラーのために破棄された、マネージャが受信した情報リクエストに対する応答メッセージの生成に失敗した、エージェントから予期しないPDUを受信した場合(期限切れの非同期リクエストの可能性があります)などが考えられます。</target>
        </trans-unit>
        <trans-unit id="c1bd23363bb35671fd7a263f768278217cdab156" translate="yes" xml:space="preserve">
          <source>This function is called whenever Mnesia needs to determine which fragments that need to be searched for a &lt;code&gt;MatchSpec&lt;/code&gt;. It is typically called by &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;match_object&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;MatchSpec&lt;/code&gt; 検索する必要のあるフラグメントを判別する必要があるときに必ず呼び出されます。これは通常、 &lt;code&gt;select&lt;/code&gt; および &lt;code&gt;match_object&lt;/code&gt; によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="01c69191566d604ec0e4348c19597985d6671a38" translate="yes" xml:space="preserve">
          <source>This function is called whenever a test case (or configuration function) fails. It is called after the post function is called for the failed test case, that is:</source>
          <target state="translated">この関数は、テストケース(または設定関数)が失敗するたびに呼び出されます。失敗したテストケースに対して post 関数が呼び出された後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d3efafaf0939c64a4ad9d5c14688207c28754d4e" translate="yes" xml:space="preserve">
          <source>This function is called whenever a test case (or configuration function) is skipped. It is called after the post function is called for the skipped test case, that is:</source>
          <target state="translated">この関数は、テストケース(または設定関数)がスキップされるたびに呼び出されます。スキップされたテストケースに対して post 関数が呼び出された後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c606577dcdb814f628921da1d374fa61eef9bcbd" translate="yes" xml:space="preserve">
          <source>This function is called whenever an application has stopped. It is intended to be the opposite of &lt;code&gt;Module:start/2&lt;/code&gt; and is to do any necessary cleaning up. The return value is ignored.</source>
          <target state="translated">この関数は、アプリケーションが停止すると呼び出されます。これは &lt;code&gt;Module:start/2&lt;/code&gt; の反対であり、必要なクリーンアップを行うことを目的としています。戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="5ee521594d1ddf2a7d2b5598240a35e803ba7648" translate="yes" xml:space="preserve">
          <source>This function is called whenever an application is started using &lt;code&gt;start/1,2&lt;/code&gt;, and is to start the processes of the application. If the application is structured according to the OTP design principles as a supervision tree, this means starting the top supervisor of the tree.</source>
          <target state="translated">この関数は、アプリケーションが &lt;code&gt;start/1,2&lt;/code&gt; を使用して起動されたときに呼び出され、アプリケーションのプロセスを開始します。アプリケーションがOTP設計原則に従って監督ツリーとして構造化されている場合、これはツリーの最上位の監督者を開始することを意味します。</target>
        </trans-unit>
        <trans-unit id="5ce2ffe3ef06f25d257eea92fe03c94bd042a9ba" translate="yes" xml:space="preserve">
          <source>This function is called whenever the parser runs out of input data. If the function can't get hold of more input an empty list or binary (depends on start input in stream/2) is returned. Other types of errors is handled through exceptions. Use throw/1 to send the following tuple {Tag = atom(), Reason = string()} if the continuation function encounters a fatal error. Tag is an atom that identifies the functional entity that sends the exception and Reason is a string that describes the problem.</source>
          <target state="translated">この関数は、パーサが入力データを使い果たした場合に呼び出されます。この関数がそれ以上の入力を取得できなかった場合は,空のリストかバイナリ(stream/2の開始入力に依存します)が返されます.その他のタイプのエラーは例外で処理されます。throw/1 を使用して、継続関数が致命的なエラーに遭遇した場合、次のタプル {Tag=atom(),Reason=string()}を送信します。Tagは例外を送信する機能エンティティを識別するアトム、Reasonは問題を記述する文字列です。</target>
        </trans-unit>
        <trans-unit id="112c32a0ac8f37302565069e1af7c3d11d8ddc14" translate="yes" xml:space="preserve">
          <source>This function is completely synchronous, that is, when this function returns, the name is either registered on all nodes or none.</source>
          <target state="translated">この関数は完全に同期しており、この関数が戻ってくると、すべてのノードに名前が登録されているか、登録されていないかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="d629551f45aed938b0210e2c4a23a00e3421b297" translate="yes" xml:space="preserve">
          <source>This function is completely synchronous.</source>
          <target state="translated">この機能は完全に同期しています。</target>
        </trans-unit>
        <trans-unit id="f35d4e7d98bb703e34921dfd922b82cf2abffe2a" translate="yes" xml:space="preserve">
          <source>This function is deprecated and will be removed in a future release.</source>
          <target state="translated">この関数は非推奨であり、将来のリリースでは削除される予定です。</target>
        </trans-unit>
        <trans-unit id="7cf9e7b62dba47009024375097e3299049fe0a22" translate="yes" xml:space="preserve">
          <source>This function is deprecated and will be removed in a future release. Use &lt;code&gt;&lt;a href=&quot;#safeInflate-2&quot;&gt;safeInflate/2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は非推奨であり、将来のリリースで削除される予定です。代わりに &lt;code&gt;&lt;a href=&quot;#safeInflate-2&quot;&gt;safeInflate/2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="57c472f59dd3d2f6ad17dc07c92e4c60fcf49729" translate="yes" xml:space="preserve">
          <source>This function is deprecated and will be removed in a future release. Use &lt;code&gt;erlang:adler32/1&lt;/code&gt; instead.</source>
          <target state="translated">この関数は非推奨であり、将来のリリースで削除される予定です。代わりに &lt;code&gt;erlang:adler32/1&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="db4675d63f920313a1ea26e962187e1aa011dcdd" translate="yes" xml:space="preserve">
          <source>This function is deprecated and will be removed in a future release. Use &lt;code&gt;erlang:adler32/2&lt;/code&gt; instead.</source>
          <target state="translated">この関数は非推奨であり、将来のリリースで削除される予定です。代わりに &lt;code&gt;erlang:adler32/2&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5ce49a62899e9f8f936f7b7c515c2cbbf4ad75dc" translate="yes" xml:space="preserve">
          <source>This function is deprecated and will be removed in a future release. Use &lt;code&gt;erlang:adler32_combine/3&lt;/code&gt; instead.</source>
          <target state="translated">この関数は非推奨であり、将来のリリースで削除される予定です。代わりに &lt;code&gt;erlang:adler32_combine/3&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="9a65b47bbbfbb54ad15ea7e9136f81e2f3a04ac4" translate="yes" xml:space="preserve">
          <source>This function is deprecated and will be removed in a future release. Use &lt;code&gt;erlang:crc32/1&lt;/code&gt; instead.</source>
          <target state="translated">この関数は非推奨であり、将来のリリースで削除される予定です。代わりに &lt;code&gt;erlang:crc32/1&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="9b52957272e25d9092e5e990877e3939651cbfce" translate="yes" xml:space="preserve">
          <source>This function is deprecated and will be removed in a future release. Use &lt;code&gt;erlang:crc32/1&lt;/code&gt; on the uncompressed data instead.</source>
          <target state="translated">この関数は非推奨であり、将来のリリースで削除される予定です。代わりに、非圧縮データに対して &lt;code&gt;erlang:crc32/1&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="7f67f68973bfc4a8137b6bf187f50333109258a7" translate="yes" xml:space="preserve">
          <source>This function is deprecated and will be removed in a future release. Use &lt;code&gt;erlang:crc32/2&lt;/code&gt; instead.</source>
          <target state="translated">この関数は非推奨であり、将来のリリースで削除される予定です。代わりに &lt;code&gt;erlang:crc32/2&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="fb4d9b393f14dc50ae3c01015c208fd2e887250e" translate="yes" xml:space="preserve">
          <source>This function is deprecated and will be removed in a future release. Use &lt;code&gt;erlang:crc32_combine/3&lt;/code&gt; instead.</source>
          <target state="translated">この関数は非推奨であり、将来のリリースで削除される予定です。代わりに &lt;code&gt;erlang:crc32_combine/3&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="2cf4312fba04cc8c15fd9776029ba4bd244d245c" translate="yes" xml:space="preserve">
          <source>This function is deprecated in the sense that the &lt;code&gt;error_logger&lt;/code&gt; is no longer the preferred interface for logging in Erlang/OTP. A new &lt;code&gt;logging API&lt;/code&gt; was added in Erlang/OTP 21.0, but legacy &lt;code&gt;error_logger&lt;/code&gt; handlers can still be used. New Logger handlers do not need to use this function, since the formatting callback (&lt;code&gt;report_cb&lt;/code&gt;) is included as metadata in the log event.</source>
          <target state="translated">この関数は、 &lt;code&gt;error_logger&lt;/code&gt; がErlang / OTPにログインするための優先インターフェースではなくなったという意味で廃止されました。新しい &lt;code&gt;logging API&lt;/code&gt; がErlang / OTP 21.0に追加されましたが、レガシー &lt;code&gt;error_logger&lt;/code&gt; ハンドラーは引き続き使用できます。書式設定コールバック（ &lt;code&gt;report_cb&lt;/code&gt; ）がメタデータとしてログイベントに含まれているため、新しいロガーハンドラーはこの関数を使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="797c275c3663aa3f1286ac6e8f576a1c8979a3e4" translate="yes" xml:space="preserve">
          <source>This function is deprecated in the sense that the &lt;code&gt;error_logger&lt;/code&gt; is no longer the preferred interface for logging in Erlang/OTP. A new &lt;code&gt;logging API&lt;/code&gt; was added in Erlang/OTP 21.0, but legacy &lt;code&gt;error_logger&lt;/code&gt; handlers can still be used. New Logger handlers do not need to used this function, since the formatting callback (&lt;code&gt;report_cb&lt;/code&gt;) is included as metadata in the log event.</source>
          <target state="translated">この関数は、 &lt;code&gt;error_logger&lt;/code&gt; がErlang / OTPにログインするための優先インターフェースではなくなったという意味で廃止されました。新しい &lt;code&gt;logging API&lt;/code&gt; がErlang / OTP 21.0に追加されましたが、レガシー &lt;code&gt;error_logger&lt;/code&gt; ハンドラーは引き続き使用できます。書式設定コールバック（ &lt;code&gt;report_cb&lt;/code&gt; ）がメタデータとしてログイベントに含まれているため、新しいLoggerハンドラーはこの関数を使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="93275cd4e56a52fc18f140562459cc7469aef3e4" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use &lt;code&gt;&lt;a href=&quot;#local_time_to_universal_time_dst-1&quot;&gt;local_time_to_universal_time_dst/1&lt;/a&gt;&lt;/code&gt; instead, as it gives a more correct and complete result. Especially for the period that does not exist, as it is skipped during the switch &lt;strong&gt;to&lt;/strong&gt; daylight saving time, this function still returns a result.</source>
          <target state="translated">この関数は非推奨です。代わりに &lt;code&gt;&lt;a href=&quot;#local_time_to_universal_time_dst-1&quot;&gt;local_time_to_universal_time_dst/1&lt;/a&gt;&lt;/code&gt; を使用すると、より正確で完全な結果が得られます。特に存在しない期間については、夏時間&lt;strong&gt;へ&lt;/strong&gt;の切り替え時にスキップされるため、この関数は結果を返します。</target>
        </trans-unit>
        <trans-unit id="c812739c6fd83de52547a755970ceca008f0b790" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use &lt;code&gt;&lt;a href=&quot;filelib#find_source-1&quot;&gt;filelib:find_source/1&lt;/a&gt;&lt;/code&gt; instead for finding source files.</source>
          <target state="translated">この関数は非推奨です。ソースファイルを見つけるには、代わりに &lt;code&gt;&lt;a href=&quot;filelib#find_source-1&quot;&gt;filelib:find_source/1&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="2f4e6b180074e2f9f3f128b4c971b69623e3ec1e" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt;, but acts on the given node. A tracer is started on the node (&lt;code&gt;Nodename&lt;/code&gt;) and the node is added to the list of traced nodes.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt; と同等ですが、指定されたノードで機能します。ノード（ &lt;code&gt;Nodename&lt;/code&gt; ）でトレーサーが開始され、ノードがトレースされたノードのリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="c92d04be5c71ca9752e01679ace3dd192a2701dc" translate="yes" xml:space="preserve">
          <source>This function is evaluated if a call is made to &lt;code&gt;Fun(Arg1,.., ArgN)&lt;/code&gt; when the module defining the fun is not loaded. The function is evaluated inside the process making the original call.</source>
          <target state="translated">この関数は、funを定義するモジュールがロードされていないときに &lt;code&gt;Fun(Arg1,.., ArgN)&lt;/code&gt; が呼び出された場合に評価されます。関数は、元の呼び出しを行うプロセス内で評価されます。</target>
        </trans-unit>
        <trans-unit id="397de6af2f56ed299f26a66779fa39dc2d87c829" translate="yes" xml:space="preserve">
          <source>This function is intended for debugging only.</source>
          <target state="translated">この関数はデバッグ専用です。</target>
        </trans-unit>
        <trans-unit id="5e70db1a93c8f76d23e7c3d3fb2baea3f7a6af2b" translate="yes" xml:space="preserve">
          <source>This function is intended for debugging purposes only.</source>
          <target state="translated">この関数はデバッグのみを目的としています。</target>
        </trans-unit>
        <trans-unit id="6f60000c240fa5a82e86efdce70cc54b8977641c" translate="yes" xml:space="preserve">
          <source>This function is intended for send operations to an unreliable remote node without ever blocking the sending (Erlang) process. If the connection to the remote node (usually not a real Erlang node, but a node written in C or Java) is overloaded, this function &lt;strong&gt;does not send the message&lt;/strong&gt; and returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">この関数は、送信（Erlang）プロセスをブロックすることなく、信頼できないリモートノードへの送信操作を目的としています。リモートノード（通常は実際のErlangノードではなく、CまたはJavaで記述されたノード）への接続が過負荷の場合、この関数&lt;strong&gt;はメッセージ&lt;/strong&gt;を&lt;strong&gt;送信せず、&lt;/strong&gt; &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="81171218c09769a1d5b4af85d5937f41eeaa5f09" translate="yes" xml:space="preserve">
          <source>This function is intended to be called by a process belonging to an application, when the application is started, to determine the start type, which is &lt;code&gt;StartType&lt;/code&gt; or &lt;code&gt;local&lt;/code&gt;.</source>
          <target state="translated">この関数は、アプリケーションの起動時に、アプリケーションに属するプロセスによって呼び出され、 &lt;code&gt;StartType&lt;/code&gt; または &lt;code&gt;local&lt;/code&gt; である開始タイプを決定します。</target>
        </trans-unit>
        <trans-unit id="e10f123bbee56ea9b87adef7c85f24ef9a0bea62" translate="yes" xml:space="preserve">
          <source>This function is intended to be called in the test cases in the test suite.</source>
          <target state="translated">この関数は、テストスイート内のテストケースで呼び出されることを想定しています。</target>
        </trans-unit>
        <trans-unit id="1b921fbf118e94cca94277c181ed0c5045bbfaba" translate="yes" xml:space="preserve">
          <source>This function is intended to be invoked at strategic places in user applications in order to enable simplified tracing. The functions are extremely light weight as they do nothing besides returning an atom. The functions are designed for being traced. The global tracing mechanism in &lt;code&gt;et_collector&lt;/code&gt; defaults to set its trace pattern to these functions.</source>
          <target state="translated">この関数は、簡素化されたトレースを可能にするために、ユーザーアプリケーションの重要な場所で呼び出されることを目的としています。これらの関数は、アトムを返す以外に何もしないため、非常に軽量です。関数はトレースされるように設計されています。 &lt;code&gt;et_collector&lt;/code&gt; のグローバルトレースメカニズムは、デフォルトでトレースパターンをこれらの関数に設定します。</target>
        </trans-unit>
        <trans-unit id="36a555885bb62cc8fb0d04fa074ce553eafe397b" translate="yes" xml:space="preserve">
          <source>This function is intended to be invoked by some transport modules when get an incoming message. Which transport that actually is used is up to the user to choose.</source>
          <target state="translated">この関数は、受信メッセージを取得したときに、いくつかのトランスポートモジュールによって 呼び出されることを意図している。実際にどのトランスポートを使うかはユーザの選択次第です。</target>
        </trans-unit>
        <trans-unit id="6d3f5fd62fd46c21ebd6dea29aa844aba60cb08c" translate="yes" xml:space="preserve">
          <source>This function is invoked as this module is added as a child of the &lt;code&gt;erl_distribution&lt;/code&gt; supervisor.</source>
          <target state="translated">この関数は、このモジュールが &lt;code&gt;erl_distribution&lt;/code&gt; スーパーバイザーの子として追加されるときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1d32e0beab2a86c2649b5c5e66d99028d158f64c" translate="yes" xml:space="preserve">
          <source>This function is invoked if the originating pending limit has been exceeded. This usually means that a request has taken abnormally long time to complete.</source>
          <target state="translated">この関数は、送信元の保留上限を超えた場合に呼び出されます。これは通常、リクエストが完了するまでに異常に長い時間がかかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="7fe0a088ee8a115443a4b7c28bd5e240eaea2ffd" translate="yes" xml:space="preserve">
          <source>This function is mandatory.</source>
          <target state="translated">この機能は必須です。</target>
        </trans-unit>
        <trans-unit id="23ddde2c73699705374784b1a6630cfc5af08e7d" translate="yes" xml:space="preserve">
          <source>This function is meant for printing a string directly from a test case to the test case log file.</source>
          <target state="translated">この関数は、テストケースからテストケースログファイルに直接文字列を出力するためのものです。</target>
        </trans-unit>
        <trans-unit id="1c8ca547da965f042e95bb1424e4289fdf1c4a1b" translate="yes" xml:space="preserve">
          <source>This function is meant for printing a string from a test case to the console.</source>
          <target state="translated">この関数は、テストケースからコンソールに文字列を出力するためのものです。</target>
        </trans-unit>
        <trans-unit id="200109fd126bab7ec37db1035c7afff40cc8667c" translate="yes" xml:space="preserve">
          <source>This function is meant for printing a string from a test case, both to the test case log file and to the console.</source>
          <target state="translated">この関数は、テストケースの文字列をテストケースのログファイルとコンソールに表示するためのものです。</target>
        </trans-unit>
        <trans-unit id="2dbc6b277a2853a0b6bf11d0b8a4589a39100a82" translate="yes" xml:space="preserve">
          <source>This function is meant to be used for debugging only.</source>
          <target state="translated">この関数はデバッグ専用です。</target>
        </trans-unit>
        <trans-unit id="353984c9a0fb4f2aea1206112d183a058e95d4a0" translate="yes" xml:space="preserve">
          <source>This function is mostly for debugging purposes, Normally &lt;code&gt;first&lt;/code&gt;/&lt;code&gt;next&lt;/code&gt; or &lt;code&gt;last&lt;/code&gt;/&lt;code&gt;prev&lt;/code&gt; are to be used instead.</source>
          <target state="translated">この関数は主にデバッグを目的としています。通常、代わりに &lt;code&gt;first&lt;/code&gt; / &lt;code&gt;next&lt;/code&gt; または &lt;code&gt;last&lt;/code&gt; / &lt;code&gt;prev&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="932f20a018c847fbfb4197a37b0d2d604f5eb9f7" translate="yes" xml:space="preserve">
          <source>This function is normally not called by the user. The user only needs to call if the channel process needs to be started with help of &lt;code&gt;proc_lib&lt;/code&gt; instead of calling &lt;code&gt;start/4&lt;/code&gt; or &lt;code&gt;start_link/4&lt;/code&gt;.</source>
          <target state="translated">この関数は通常、ユーザーによって呼び出されません。ユーザーが呼び出す必要があるのは、 &lt;code&gt;start/4&lt;/code&gt; または &lt;code&gt;start_link/4&lt;/code&gt; を呼び出すのではなく、 &lt;code&gt;proc_lib&lt;/code&gt; を使用してチャネルプロセスを開始する必要がある場合のみです。</target>
        </trans-unit>
        <trans-unit id="42f571587b780a1e6f46d35b2d96fbee773dc95d" translate="yes" xml:space="preserve">
          <source>This function is not equivalent to &lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt;. While &lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt; starts a process tracer which redirects all trace information to a process tracer on the local node (i.e. the trace control node), &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; starts a tracer of any type which is independent of the tracer on the trace control node.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt; と同等ではありません。ながら &lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt; ローカル・ノード（すなわち、トレース制御ノード）で処理トレーサーにすべてのトレース情報をリダイレクトプロセストレーサーを開始し、 &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; トレース制御ノード上のトレーサーから独立している任意のタイプのトレーサーを開始します。</target>
        </trans-unit>
        <trans-unit id="bc4cccc5c4f2f3772a98e697fd645208ffc7bcd9" translate="yes" xml:space="preserve">
          <source>This function is obsolete. Use the conversion functions for gregorian days and seconds instead.</source>
          <target state="translated">この関数は廃止されました。代わりにグレゴリオ暦の日と秒の変換関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="ce7c408302373e6adf8e0f46e04cfc34dc2748e9" translate="yes" xml:space="preserve">
          <source>This function is only intended for testing purposes. It's supposed to have a same kind of interface as the &lt;code&gt;&lt;a href=&quot;#call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#cast&quot;&gt;cast&lt;/a&gt;&lt;/code&gt; functions (with the additions of the &lt;code&gt;EncodingMod&lt;/code&gt; and &lt;code&gt;EncodingConfig&lt;/code&gt; arguments). It composes a complete megaco message end attempts to encode it. The return value, will be a tuple of the composed megaco message and the encode result.</source>
          <target state="translated">この関数は、テストのみを目的としています。これは、 &lt;code&gt;&lt;a href=&quot;#call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#cast&quot;&gt;cast&lt;/a&gt;&lt;/code&gt; 関数と同じ種類のインターフェースを持っていると想定されています（ &lt;code&gt;EncodingMod&lt;/code&gt; および &lt;code&gt;EncodingConfig&lt;/code&gt; 引数が追加されています）。それはそれをエンコードする完全なmegacoメッセージ終了試行を構成します。戻り値は、構成されたmegacoメッセージとエンコード結果のタプルになります。</target>
        </trans-unit>
        <trans-unit id="f9e0331af836baa2d84d1f916d61996854b6352b" translate="yes" xml:space="preserve">
          <source>This function is only intended for testing purposes. It's supposed to test the &lt;code&gt;actual_reply()&lt;/code&gt; return value of the callback functions &lt;code&gt;&lt;a href=&quot;megaco_user#trans_request&quot;&gt;handle_trans_request&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;megaco_user#trans_long_request&quot;&gt;handle_trans_long_request&lt;/a&gt;&lt;/code&gt; functions (with the additions of the &lt;code&gt;EncodingMod&lt;/code&gt; and &lt;code&gt;EncodingConfig&lt;/code&gt; arguments). It composes a complete megaco message end attempts to encode it. The return value, will be a tuple of the composed megaco message and the encode result.</source>
          <target state="translated">この関数は、テストのみを目的としています。テストすることになっています &lt;code&gt;actual_reply()&lt;/code&gt; コールバック関数の戻り値を &lt;code&gt;&lt;a href=&quot;megaco_user#trans_request&quot;&gt;handle_trans_request&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;megaco_user#trans_long_request&quot;&gt;handle_trans_long_request&lt;/a&gt;&lt;/code&gt; （の追加と機能 &lt;code&gt;EncodingMod&lt;/code&gt; と &lt;code&gt;EncodingConfig&lt;/code&gt; 引数）。それはそれをエンコードする完全なmegacoメッセージ終了試行を構成します。戻り値は、構成されたmegacoメッセージとエンコード結果のタプルになります。</target>
        </trans-unit>
        <trans-unit id="df58ae53df4ed25f773afed230f30889dcd5ca99" translate="yes" xml:space="preserve">
          <source>This function is only thread-safe when the emulator with SMP support is used.</source>
          <target state="translated">この関数は、SMPをサポートするエミュレータを使用している場合のみスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="aef102baa9fb64ea372514334c60d7b3b9f264e9" translate="yes" xml:space="preserve">
          <source>This function is only thread-safe when the emulator with SMP support is used. It can only be used in a non-SMP emulator from a NIF-calling thread.</source>
          <target state="translated">この関数は、SMPサポートのエミュレータを使用している場合にのみスレッドセーフとなります。非SMPエミュレータでは、NIFを呼び出すスレッドからのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="90c95c65aaea895304dfbed57d7ceb302b881182" translate="yes" xml:space="preserve">
          <source>This function is only to be used in rare circumstances where a process communicates with Erlang nodes that can disappear without any trace, causing the TCP buffers and the drivers queue to be over-full before the node is shut down (because of tick time-outs) by &lt;code&gt;net_kernel&lt;/code&gt;. The normal reaction to take when this occurs is some kind of premature shutdown of the other node.</source>
          <target state="translated">この関数は、プロセスがトレースなしで非表示になり、ノードがシャットダウンする前にTCPバッファーとドライバーのキューがいっぱいになる原因となるErlangノードと通信するまれな状況でのみ使用されます（ティックタイムアウトのため） ） &lt;code&gt;net_kernel&lt;/code&gt; によって。これが発生したときにとられる通常の反応は、他のノードのある種の時期尚早なシャットダウンです。</target>
        </trans-unit>
        <trans-unit id="b91ea27388e04da4e23c43f3cd2a1b24a1b3f051" translate="yes" xml:space="preserve">
          <source>This function is only to be used on short lists, as a copy is created of the list, which is not released until after the NIF returns.</source>
          <target state="translated">この関数は、リストのコピーが作成され、NIFが戻ってくるまで解放されないため、ショートリストでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="1c2b27f3795376fc611944f7d7c38e8f0670e208" translate="yes" xml:space="preserve">
          <source>This function is optional.</source>
          <target state="translated">この機能はオプションです。</target>
        </trans-unit>
        <trans-unit id="c8eb9533643d424e90f80bd181b73132613e7c18" translate="yes" xml:space="preserve">
          <source>This function is optional. The return value is discarded.</source>
          <target state="translated">この関数はオプションです。戻り値は破棄されます。</target>
        </trans-unit>
        <trans-unit id="e2b3a473185dfec37318ffd01ffc565de71b54e4" translate="yes" xml:space="preserve">
          <source>This function is optional. Used when connection is up.</source>
          <target state="translated">この機能はオプションです。接続が立ち上がったときに使用します。</target>
        </trans-unit>
        <trans-unit id="8c84159cb077e05ce5ab18f138db97ded3cd0f6a" translate="yes" xml:space="preserve">
          <source>This function is primarily useful in load regulation scenarios.</source>
          <target state="translated">この機能は、主に負荷変動のシナリオで有用です。</target>
        </trans-unit>
        <trans-unit id="6d1c283b0d188ab1dc083d2737684fc3b5d9bcb5" translate="yes" xml:space="preserve">
          <source>This function is primarily useful in testing/debugging scenarios.</source>
          <target state="translated">この機能は、主にシナリオのテスト/デバッグに役立ちます。</target>
        </trans-unit>
        <trans-unit id="11584ee6be5c439d09214f1f99df3af124d2da3b" translate="yes" xml:space="preserve">
          <source>This function is probably mainly useful when called from outside of Erlang, for example from a driver written in C.</source>
          <target state="translated">この関数は主にErlangの外から呼ばれるときに便利です。</target>
        </trans-unit>
        <trans-unit id="353504af3c988d4810cedc709216e313aaafe762" translate="yes" xml:space="preserve">
          <source>This function is provided to better support co-operative scheduling, improve system responsiveness, and make it easier to prevent misbehaviors of the VM because of a NIF monopolizing a scheduler thread. It can be used to divide &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt;length work&lt;/a&gt;&lt;/code&gt; into a number of repeated NIF calls without the need to create threads.</source>
          <target state="translated">この機能は、協調スケジューリングをより適切にサポートし、システムの応答性を向上させ、NIFがスケジューラスレッドを独占するためにVMの誤動作を簡単に防ぐために提供されています。スレッドを作成する必要なしに、 &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt;length work&lt;/a&gt;&lt;/code&gt; を多数の繰り返されるNIF呼び出しに分割するために使用できます。</target>
        </trans-unit>
        <trans-unit id="5db90f14f3c432301e447b05ad0cb6592973631a" translate="yes" xml:space="preserve">
          <source>This function is provided to better support co-operative scheduling, improve system responsiveness, and to make it easier to prevent misbehaviors of the VM because of a port monopolizing a scheduler thread. It can be used when dividing lengthy work into some repeated driver callback calls, without the need to use threads.</source>
          <target state="translated">この機能は、協調スケジューリングのサポートを強化し、システムの応答性を向上させ、ポートがスケジューラスレッドを独占することによるVMの誤動作を防ぎやすくするために提供されています。長時間の作業をいくつかのドライバコールバックコールの繰り返しに分割して行う場合に、スレッドを使わずに利用することができます。</target>
        </trans-unit>
        <trans-unit id="3bd60d1367a2a2c9bf42897b1642d4f588cea06f" translate="yes" xml:space="preserve">
          <source>This function is rarely needed in application code. It is used by Mnesia to provide distributed &lt;code&gt;select/3&lt;/code&gt; and &lt;code&gt;select/1&lt;/code&gt; sequences. A normal application would either use Mnesia or keep the continuation from being converted to external format.</source>
          <target state="translated">この関数がアプリケーションコードで必要になることはほとんどありません。Mnesiaは、分散 &lt;code&gt;select/3&lt;/code&gt; および &lt;code&gt;select/1&lt;/code&gt; シーケンスを提供するために使用します。通常のアプリケーションでは、Mnesiaを使用するか、継続が外部形式に変換されないようにします。</target>
        </trans-unit>
        <trans-unit id="5802ba7a3becc5d64b340383668b0fe991f19bfe" translate="yes" xml:space="preserve">
          <source>This function is rarely needed in application code. It is used by application Mnesia to provide distributed &lt;code&gt;select/3&lt;/code&gt; and &lt;code&gt;select/1&lt;/code&gt; sequences. A normal application would either use Mnesia or keep the continuation from being converted to external format.</source>
          <target state="translated">この関数がアプリケーションコードで必要になることはほとんどありません。アプリケーションMnesiaによって使用され、分散した &lt;code&gt;select/3&lt;/code&gt; および &lt;code&gt;select/1&lt;/code&gt; シーケンスを提供します。通常のアプリケーションでは、Mnesiaを使用するか、継続が外部形式に変換されないようにします。</target>
        </trans-unit>
        <trans-unit id="650535937ca4ee466c191b80e09fe3d66b3c7b8e" translate="yes" xml:space="preserve">
          <source>This function is retained for backward compatibility. Function &lt;code&gt;&lt;a href=&quot;#keyfind-3&quot;&gt;keyfind/3&lt;/a&gt;&lt;/code&gt; is usually more convenient.</source>
          <target state="translated">この関数は、下位互換性のために保持されています。関数 &lt;code&gt;&lt;a href=&quot;#keyfind-3&quot;&gt;keyfind/3&lt;/a&gt;&lt;/code&gt; は通常より便利です。</target>
        </trans-unit>
        <trans-unit id="6fd26f567334e9666b6ef2abb401ce9925581958" translate="yes" xml:space="preserve">
          <source>This function is retained for compatibility with code generated by the interface compiler and with code following examples in the same application.</source>
          <target state="translated">この関数は、インターフェイスコンパイラで生成されたコードや、同じアプリケーション内の例に続くコードとの互換性を保つために保持されます。</target>
        </trans-unit>
        <trans-unit id="04dbb81151f11a2a8e21a08672e2edd99a02d468" translate="yes" xml:space="preserve">
          <source>This function is shorthand for &lt;code&gt;init:stop()&lt;/code&gt;, that is, it causes the node to stop in a controlled fashion.</source>
          <target state="translated">この関数は &lt;code&gt;init:stop()&lt;/code&gt; の省略形です。つまり、制御された方法でノードを停止させます。</target>
        </trans-unit>
        <trans-unit id="4e31e42d4190f9153fc006e0f381fb267c91b114" translate="yes" xml:space="preserve">
          <source>This function is synchronous, which means that it will return when the discovery process has been completed or failed.</source>
          <target state="translated">この関数は同期的であり、発見処理が完了したとき、または失敗したときに戻ることを意味します。</target>
        </trans-unit>
        <trans-unit id="83e3218f152791a8b7bcc054591cf10cd806a3e6" translate="yes" xml:space="preserve">
          <source>This function is the only way for a driver to send data to &lt;strong&gt;other&lt;/strong&gt; processes than the port owner process. Parameter &lt;code&gt;receiver&lt;/code&gt; specifies the process to receive the data.</source>
          <target state="translated">この関数は、ドライバーがポート所有者プロセス&lt;strong&gt;以外の&lt;/strong&gt;プロセスにデータを送信する唯一の方法です。パラメーター &lt;code&gt;receiver&lt;/code&gt; は、データを受信するプロセスを指定します。</target>
        </trans-unit>
        <trans-unit id="5d488a4d40159f9a0721dbdd5dad71579d3aee31" translate="yes" xml:space="preserve">
          <source>This function is thread-safe.</source>
          <target state="translated">この関数はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="b9706d58a2352e8890b72cebf3416ed3ffff9ffe" translate="yes" xml:space="preserve">
          <source>This function is to be repeatedly called, while it returns &lt;code&gt;{more, Decompressed}&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;{more, Decompressed}&lt;/code&gt; 返す間、繰り返し呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6fe9a923027f6092daec4890f5b0a9af15bfddae" translate="yes" xml:space="preserve">
          <source>This function is used by &lt;code&gt;erl_interface&lt;/code&gt; to create the Mnesia table if it does not already exist.</source>
          <target state="translated">&lt;code&gt;erl_interface&lt;/code&gt; がこの関数を使用して、Mnesiaテーブルがまだ存在しない場合に作成します。</target>
        </trans-unit>
        <trans-unit id="e0ea944547ae0efb5c6ac097415a9890edb2fa66" translate="yes" xml:space="preserve">
          <source>This function is used by a process module to take care of system messages. The process receives a &lt;code&gt;{system, From, Msg}&lt;/code&gt; message and passes &lt;code&gt;Msg&lt;/code&gt; and &lt;code&gt;From&lt;/code&gt; to this function.</source>
          <target state="translated">この関数は、システムメッセージを処理するためにプロセスモジュールによって使用されます。プロセスは &lt;code&gt;{system, From, Msg}&lt;/code&gt; メッセージを受け取り、 &lt;code&gt;Msg&lt;/code&gt; と &lt;code&gt;From&lt;/code&gt; をこの関数に渡します。</target>
        </trans-unit>
        <trans-unit id="e2a112b495b39abcd5586ec3664e29d01231ac87" translate="yes" xml:space="preserve">
          <source>This function is used by a server process to accept a connection from a client process.</source>
          <target state="translated">この関数は、サーバプロセスがクライアントプロセスからの接続を受け入れるために使用されます。</target>
        </trans-unit>
        <trans-unit id="898bb0d30e504dc801429a9370b05b766f512338" translate="yes" xml:space="preserve">
          <source>This function is used by a server process to register with the local name server EPMD, thereby allowing other processes to send messages by using the registered name. Before calling this function, the process should have called &lt;code&gt;bind()&lt;/code&gt; and &lt;code&gt;listen()&lt;/code&gt; on an open socket.</source>
          <target state="translated">この機能は、サーバープロセスがローカルネームサーバーEPMDに登録するために使用されます。これにより、登録された名前を使用して他のプロセスがメッセージを送信できるようになります。この関数を呼び出す前に、プロセスは開いているソケットで &lt;code&gt;bind()&lt;/code&gt; および &lt;code&gt;listen()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="70ccee3033b802a87c1b5086a81572b1cdf9f072" translate="yes" xml:space="preserve">
          <source>This function is used by drivers to provide the emulator with events to check for. This enables the emulator to call the driver when something has occurred asynchronously.</source>
          <target state="translated">この関数は、ドライバがエミュレータにチェックすべきイベントを提供するために使用されます。これにより、何かが非同期的に発生したときにエミュレータがドライバを呼び出すことができるようになります。</target>
        </trans-unit>
        <trans-unit id="563d0e5f94af6836101c3632fc208eb6264d3ee8" translate="yes" xml:space="preserve">
          <source>This function is used by functions &lt;code&gt;&lt;a href=&quot;c#i-0&quot;&gt;c:i/0&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;c#regs-0&quot;&gt;c:regs/0&lt;/a&gt;&lt;/code&gt; to present process information.</source>
          <target state="translated">この関数は、プロセス情報を表示するために関数 &lt;code&gt;&lt;a href=&quot;c#i-0&quot;&gt;c:i/0&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;c#regs-0&quot;&gt;c:regs/0&lt;/a&gt;&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="73986afc84809f75a6e12a693ebaed3b04b098c2" translate="yes" xml:space="preserve">
          <source>This function is used by the &lt;code&gt;&lt;a href=&quot;#format-3&quot;&gt;format/3&lt;/a&gt;&lt;/code&gt; function to prepare a document before being laid out as text.</source>
          <target state="translated">この関数は、テキストとしてレイアウトされる前にドキュメントを準備するために &lt;code&gt;&lt;a href=&quot;#format-3&quot;&gt;format/3&lt;/a&gt;&lt;/code&gt; 関数によって使用されます。</target>
        </trans-unit>
        <trans-unit id="af91dcbbafd0b245aac20abd673102bff806bdf0" translate="yes" xml:space="preserve">
          <source>This function is used for closing an active TPKT connection.</source>
          <target state="translated">この機能は、アクティブな TPKT 接続を閉じるために使用します。</target>
        </trans-unit>
        <trans-unit id="341959533bbd5fb6c13fba9bb6518b33337f67e1" translate="yes" xml:space="preserve">
          <source>This function is used for closing an active UDP socket.</source>
          <target state="translated">この関数は、アクティブなUDPソケットを閉じるために使用される。</target>
        </trans-unit>
        <trans-unit id="c203b5dc275784f420edfae2f16a2aed1ae6aa56" translate="yes" xml:space="preserve">
          <source>This function is used for starting new TPKT listening socket for TCP/IP. The option list contains the socket definitions.</source>
          <target state="translated">この関数は、TCP/IP の新しい TPKT リスニングソケットを起動するために使用します。オプションリストにはソケットの定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="77b263a5f923ead126acb1e02db37792ff404de1" translate="yes" xml:space="preserve">
          <source>This function is used for starting the TCP/IP transport service. Use exit(TransportRef, Reason) to stop the transport service.</source>
          <target state="translated">この関数は、TCP/IP トランスポートサービスを開始するために使用します。トランスポートサービスを停止するには、exit(TransportRef,Reason)を使用します。</target>
        </trans-unit>
        <trans-unit id="03f7bc8e389fa4c3de41f19125ec838b559c7fc6" translate="yes" xml:space="preserve">
          <source>This function is used for starting the UDP/IP transport service. Use exit(TransportRef, Reason) to stop the transport service.</source>
          <target state="translated">この関数は、UDP/IPトランスポートサービスを開始するために使用する。トランスポートサービスを停止するには、exit(TransportRef,Reason)を使用する。</target>
        </trans-unit>
        <trans-unit id="8eb43517a5b84f85e08e21015c8ab03e885b41f1" translate="yes" xml:space="preserve">
          <source>This function is used for stepping over one or more encoded terms in a buffer, to directly access later term.</source>
          <target state="translated">この関数は、バッファ内の1つ以上の符号化された項をステップオーバーして、後の項に直接アクセスするために使用されます。</target>
        </trans-unit>
        <trans-unit id="9487b4eae0bc40d60b1b4e845725399492924f17" translate="yes" xml:space="preserve">
          <source>This function is used in conjunction with the monitor function.</source>
          <target state="translated">モニター機能と併用して使用します。</target>
        </trans-unit>
        <trans-unit id="2f9f35e4a07c284d87e14bf146829705627cc610" translate="yes" xml:space="preserve">
          <source>This function is used to change the megaco trace level.</source>
          <target state="translated">この関数は、メガコのトレースレベルを変更するために使用します。</target>
        </trans-unit>
        <trans-unit id="9905970e8ef361713ff0dc6a231017daa7b1f422" translate="yes" xml:space="preserve">
          <source>This function is used to convert a socket_handle() to a inet_socket(). inet_socket() is a plain socket, see the inet module for more info.</source>
          <target state="translated">この関数は socket_handle()を inet_socket()に変換するために使用します。</target>
        </trans-unit>
        <trans-unit id="872fb743adffaedcd340beb243b7412272596a11" translate="yes" xml:space="preserve">
          <source>This function is used to do a control operation on the active trace port driver on the given node (&lt;code&gt;Nodename&lt;/code&gt;). Which operations are allowed as well as their return values depend on which trace driver is used.</source>
          <target state="translated">この関数は、指定されたノード（ &lt;code&gt;Nodename&lt;/code&gt; ）上のアクティブなトレースポートドライバーで制御操作を実行するために使用されます。許可される操作とその戻り値は、使用するトレースドライバーによって異なります。</target>
        </trans-unit>
        <trans-unit id="322561e5d565d22195eae197df02cf59dd3cfda9" translate="yes" xml:space="preserve">
          <source>This function is used to flush the internal buffers held by a trace port driver. Currently only the file trace driver supports this operation. Returns &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="translated">この関数は、トレースポートドライバーによって保持されている内部バッファーをフラッシュするために使用されます。現在、ファイルトレースドライバーのみがこの操作をサポートしています。 &lt;code&gt;ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d09103efe5f0276f6c79d552dc6e48c891087e8e" translate="yes" xml:space="preserve">
          <source>This function is used to open a TPKT connection.</source>
          <target state="translated">この機能は、TPKT 接続を開くために使用します。</target>
        </trans-unit>
        <trans-unit id="757eb6e7834e636a4181b74283f0227f0e2ffefa" translate="yes" xml:space="preserve">
          <source>This function is used to open an UDP/IP socket.</source>
          <target state="translated">この機能は、UDP/IP ソケットを開くために使用します。</target>
        </trans-unit>
        <trans-unit id="810c1759ff4f2ee4359ad6e55e1e0716e8de8e16" translate="yes" xml:space="preserve">
          <source>This function is used to perform pattern matching similar to that done in Erlang. For matching rules and more examples, see section &lt;code&gt;Pattern Matching&lt;/code&gt; in the Erlang Reference Manual.</source>
          <target state="translated">この関数は、Erlangで実行されるのと同様のパターンマッチングを実行するために使用されます。マッチングルールとその他の例については、Erlangリファレンスマニュアルのセクション &lt;code&gt;Pattern Matching&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8225c2b0b7a823b2c3db31843555cf08b0b1c58a" translate="yes" xml:space="preserve">
          <source>This function is used to reset (disable) trace for the given module(s).</source>
          <target state="translated">この関数は、指定されたモジュールのトレースをリセット(無効化)するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5e4eb0cb134962fb3cf2970562621b143268d3f7" translate="yes" xml:space="preserve">
          <source>This function is used to set up default trace on function(s) for the given module or modules. The scope of the trace will be all &lt;strong&gt;exported&lt;/strong&gt; functions (both the call info and the return value). Timestamp info will also be included.</source>
          <target state="translated">この関数は、指定された1つまたは複数のモジュールの関数にデフォルトのトレースを設定するために使用されます。トレースのスコープは、すべての&lt;strong&gt;エクスポートされた&lt;/strong&gt;関数（呼び出し情報と戻り値の両方）です。タイムスタンプ情報も含まれます。</target>
        </trans-unit>
        <trans-unit id="cb8a8d71cb3f7af3283d816d0841f08d24b9568d" translate="yes" xml:space="preserve">
          <source>This function is used to set up trace on function(s) for the given module or modules.</source>
          <target state="translated">この関数は、与えられたモジュールまたはモジュールのトレースオン関数を設定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="03c0831d3d5485f7597cd0b7a56cfb11e2d8d606" translate="yes" xml:space="preserve">
          <source>This function is used to start megaco tracing at a given &lt;code&gt;Level&lt;/code&gt; and direct result to the given &lt;code&gt;Destination&lt;/code&gt;.</source>
          <target state="translated">この関数は、指定された &lt;code&gt;Level&lt;/code&gt; でメガコトレースを開始し、指定された &lt;code&gt;Destination&lt;/code&gt; に結果を送信するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5198a41fa4397f2b825350859ef9349761d440d3" translate="yes" xml:space="preserve">
          <source>This function is used to start the flex scanner. It locates the library and loads the linked in driver.</source>
          <target state="translated">この関数は、フレックス・スキャナーを起動するために使用します。ライブラリを検索し、リンクされたドライバをロードします。</target>
        </trans-unit>
        <trans-unit id="9cbb65fd2f2f55ed5a8fdfcfbb54dede2d39cbef" translate="yes" xml:space="preserve">
          <source>This function is used to stop megaco tracing.</source>
          <target state="translated">この関数は、メガコトレースを停止するために使用されます。</target>
        </trans-unit>
        <trans-unit id="aa9a7f11a1203465f0dab2a3fff9289e46f67958" translate="yes" xml:space="preserve">
          <source>This function is used to stop the flex scanner. It also unloads the driver.</source>
          <target state="translated">フレックススキャナの停止に使用します。また、ドライバのアンロードも行います。</target>
        </trans-unit>
        <trans-unit id="1834d21edb25fe321739aff4973157dc0f8ba281" translate="yes" xml:space="preserve">
          <source>This function is used when implementing an alternative distribution carrier using processes as distribution controllers. &lt;code&gt;DHandle&lt;/code&gt; is retrived via the callback &lt;code&gt;f_handshake_complete&lt;/code&gt;. More information can be found in the documentation of &lt;code&gt;ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module&lt;/code&gt;.</source>
          <target state="translated">この関数は、プロセスを配布コントローラーとして使用して代替配布キャリアを実装するときに使用されます。 &lt;code&gt;DHandle&lt;/code&gt; は、コールバック &lt;code&gt;f_handshake_complete&lt;/code&gt; を介して取得されます。詳細については、 &lt;code&gt;ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module&lt;/code&gt; ドキュメントEr Erlangディストリビューション用の代替キャリアを実装する方法➜ディストリビューションモジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="44824ba63eb3b307aabd6873ec5a1a332b6ba401" translate="yes" xml:space="preserve">
          <source>This function is used when segmentation has been configured. So, for this to work, this function &lt;strong&gt;must&lt;/strong&gt; be fully supported!</source>
          <target state="translated">この機能は、セグメンテーションが構成されている場合に使用されます。したがって、これが機能するに&lt;strong&gt;は&lt;/strong&gt;、この機能が完全にサポートされている&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="12a35f0dbe51b5e3f1ecec001171f5281b1d71b2" translate="yes" xml:space="preserve">
          <source>This function is useful as a shortcut during development and testing, but must not be used in a production system. See section &lt;code&gt;&lt;a href=&quot;logger_chapter&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide, and the &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; manual page for information about how to configure Logger for live systems.</source>
          <target state="translated">この関数は、開発およびテスト中のショートカットとして役立ちますが、実動システムでは使用しないでください。ライブシステム用にロガーを構成する方法については、 『カーネルユーザーガイド』の「 &lt;code&gt;&lt;a href=&quot;logger_chapter&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; 」セクション、および &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="0e08d85e1b9bab386f133ff706c8c19be0cec717" translate="yes" xml:space="preserve">
          <source>This function is useful for changing the form and appearance of the &lt;code&gt;gen_server&lt;/code&gt; status for these cases. A callback module wishing to change the &lt;code&gt;sys:get_status/1,2&lt;/code&gt; return value, as well as how its status appears in termination error logs, exports an instance of &lt;code&gt;format_status/2&lt;/code&gt; that returns a term describing the current status of the &lt;code&gt;gen_server&lt;/code&gt; process.</source>
          <target state="translated">この関数は、これらの場合に &lt;code&gt;gen_server&lt;/code&gt; ステータスの形式と外観を変更するのに役立ちます。 &lt;code&gt;sys:get_status/1,2&lt;/code&gt; の戻り値、およびそのステータスが終了エラーログにどのように表示されるかを変更するコールバックモジュールは、 &lt;code&gt;gen_server&lt;/code&gt; プロセスの現在のステータスを説明する用語を返す &lt;code&gt;format_status/2&lt;/code&gt; のインスタンスをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="09f573635e783a4ad23c419f9139aab803708c3f" translate="yes" xml:space="preserve">
          <source>This function is useful for changing the form and appearance of the &lt;code&gt;gen_statem&lt;/code&gt; status for these cases. A callback module wishing to change the &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; return value and how its status appears in termination error logs exports an instance of &lt;code&gt;format_status/2&lt;/code&gt;, which returns a term describing the current status of the &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">この関数は、これらのケースの &lt;code&gt;gen_statem&lt;/code&gt; ステータスの形式と外観を変更するのに役立ちます。 &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; の戻り値とそのステータスが終了エラーログにどのように表示されるかを変更するコールバックモジュールは、 &lt;code&gt;format_status/2&lt;/code&gt; のインスタンスをエクスポートします。これは、 &lt;code&gt;gen_statem&lt;/code&gt; の現在のステータスを説明する用語を返します。</target>
        </trans-unit>
        <trans-unit id="b7792553fb70da23062b7be9ff4e7b99b4bb7f20" translate="yes" xml:space="preserve">
          <source>This function is useful for changing the form and appearance of the event handler state for these cases. An event handler callback module wishing to change the the &lt;code&gt;sys:get_status/1,2&lt;/code&gt; return value as well as how its state appears in termination error logs, exports an instance of &lt;code&gt;format_status/2&lt;/code&gt; that returns a term describing the current state of the event handler.</source>
          <target state="translated">この関数は、これらのケースでイベントハンドラーの状態の形式と外観を変更するのに役立ちます。 &lt;code&gt;sys:get_status/1,2&lt;/code&gt; の戻り値とその状態が終了エラーログにどのように表示されるかを変更するイベントハンドラーコールバックモジュールは、イベントハンドラーの現在の状態を説明する用語を返す &lt;code&gt;format_status/2&lt;/code&gt; のインスタンスをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="610385401f6f02f433fd707df3e351fe5fa74f60" translate="yes" xml:space="preserve">
          <source>This function is useful if coverage data from different systems is to be merged.</source>
          <target state="translated">この関数は、異なるシステムのカバレッジデータをマージする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="98a04423b1194d9a1f5fa9b90393dfa8d11918f4" translate="yes" xml:space="preserve">
          <source>This function is useful when a more complex initialization procedure is needed than the &lt;code&gt;gen_server&lt;/code&gt; process behavior provides.</source>
          <target state="translated">この関数は、 &lt;code&gt;gen_server&lt;/code&gt; プロセスの動作よりも複雑な初期化手順が必要な場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8e0b171472c534adf0757b7201fbb51bc8b8ffd0" translate="yes" xml:space="preserve">
          <source>This function is useful when a more complex initialization procedure is needed than the &lt;code&gt;gen_statem&lt;/code&gt; behavior provides.</source>
          <target state="translated">この関数は、 &lt;code&gt;gen_statem&lt;/code&gt; 動作が提供するよりも複雑な初期化手順が必要な場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="cea361e65fc7577a23ace8db8f6fec22077e2877" translate="yes" xml:space="preserve">
          <source>This function is usefull for flow control.</source>
          <target state="translated">この機能はフロー制御に有効です。</target>
        </trans-unit>
        <trans-unit id="f46b30ae03aba38f2d6dbaebe599182eb938575a" translate="yes" xml:space="preserve">
          <source>This function may return an updated &lt;code&gt;NewExtraInfo&lt;/code&gt; that will be used in subsequent calls to the callback functions. Intended for future use.</source>
          <target state="translated">この関数は、コールバック関数への後続の呼び出しで使用される更新された &lt;code&gt;NewExtraInfo&lt;/code&gt; を返す場合があります。将来の使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="0ffae6b0af7395d12b556d9a92b8b8453169f33e" translate="yes" xml:space="preserve">
          <source>This function may return exactly &lt;code&gt;0.0&lt;/code&gt; which can be fatal for certain applications. If that is undesired you can use &lt;code&gt;(1.0 - rand:uniform())&lt;/code&gt; to get the interval &lt;code&gt;0.0 &amp;lt; X =&amp;lt; 1.0&lt;/code&gt;, or instead use &lt;code&gt;&lt;a href=&quot;#uniform_real-0&quot;&gt;uniform_real/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は正確に &lt;code&gt;0.0&lt;/code&gt; を返す場合があり、特定のアプリケーションでは致命的となる可能性があります。それが望ましくない場合は、 &lt;code&gt;(1.0 - rand:uniform())&lt;/code&gt; を使用して間隔 &lt;code&gt;0.0 &amp;lt; X =&amp;lt; 1.0&lt;/code&gt; を取得するか、代わりに &lt;code&gt;&lt;a href=&quot;#uniform_real-0&quot;&gt;uniform_real/0&lt;/a&gt;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ca39a4b036275d0803e561bc49de6198f5110e47" translate="yes" xml:space="preserve">
          <source>This function may return exactly &lt;code&gt;0.0&lt;/code&gt; which can be fatal for certain applications. If that is undesired you can use &lt;code&gt;(1.0 - rand:uniform(State))&lt;/code&gt; to get the interval &lt;code&gt;0.0 &amp;lt; X =&amp;lt; 1.0&lt;/code&gt;, or instead use &lt;code&gt;&lt;a href=&quot;#uniform_real_s-1&quot;&gt;uniform_real_s/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は正確に &lt;code&gt;0.0&lt;/code&gt; を返す場合があり、特定のアプリケーションでは致命的となる可能性があります。それが望ましくない場合は、 &lt;code&gt;(1.0 - rand:uniform(State))&lt;/code&gt; を使用して間隔 &lt;code&gt;0.0 &amp;lt; X =&amp;lt; 1.0&lt;/code&gt; を取得するか、代わりに &lt;code&gt;&lt;a href=&quot;#uniform_real_s-1&quot;&gt;uniform_real_s/1&lt;/a&gt;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="31ce28b85ea3b55e10e44c23baa40c3964f84d6e" translate="yes" xml:space="preserve">
          <source>This function modifies the emulated environment used by &lt;code&gt;os:putenv/2&lt;/code&gt; and not the environment used by libc's &lt;code&gt;putenv(3)&lt;/code&gt; or similar. Drivers that &lt;strong&gt;require&lt;/strong&gt; that these are in sync will need to do so themselves, but keep in mind that they are segregated for a reason; &lt;code&gt;putenv(3)&lt;/code&gt; and its friends are &lt;strong&gt;not thread-safe&lt;/strong&gt; and may cause unrelated code to misbehave or crash the emulator.</source>
          <target state="translated">この関数は、 &lt;code&gt;os:putenv/2&lt;/code&gt; が使用するエミュレート環境を変更しますが、libcの &lt;code&gt;putenv(3)&lt;/code&gt; などが使用する環境は変更しません。ドライバ&lt;strong&gt;が必要です&lt;/strong&gt;これらは同期していることは、自分自身そう、彼らが理由で分離されていることを心に留めておく必要があります。 &lt;code&gt;putenv(3)&lt;/code&gt; とその仲間は&lt;strong&gt;スレッドセーフで&lt;/strong&gt;は&lt;strong&gt;なく&lt;/strong&gt;、無関係なコードが誤動作したり、エミュレータがクラッシュしたりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="7d9bfad73b174be24fda46b6c6997bb2f07b83e7" translate="yes" xml:space="preserve">
          <source>This function must be called before any of the others in the &lt;code&gt;Erl_Interface&lt;/code&gt; library to initialize the library functions. The arguments must be specified as &lt;code&gt;erl_init(NULL,0)&lt;/code&gt;.</source>
          <target state="translated">ライブラリ関数を初期化するには、 &lt;code&gt;Erl_Interface&lt;/code&gt; ライブラリ内の他のどの関数よりも先にこの関数を呼び出す必要があります。引数は &lt;code&gt;erl_init(NULL,0)&lt;/code&gt; として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ebd9a39191cb32abe8a7e5735ecc342ac8656f1e" translate="yes" xml:space="preserve">
          <source>This function must be called by the same process from which &lt;code&gt;&lt;a href=&quot;#async_call-4&quot;&gt;async_call/4&lt;/a&gt;&lt;/code&gt; was made otherwise it will never return.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#async_call-4&quot;&gt;async_call/4&lt;/a&gt;&lt;/code&gt; が作成されたプロセスと同じプロセスで呼び出す必要があります。そうしないと、戻りません。</target>
        </trans-unit>
        <trans-unit id="19959c57c9d15d692c85ae027062ec2bc955b6f2" translate="yes" xml:space="preserve">
          <source>This function must be called by the same process from which &lt;code&gt;&lt;a href=&quot;#async_call-4&quot;&gt;async_call/4&lt;/a&gt;&lt;/code&gt; was made otherwise it will only return &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#async_call-4&quot;&gt;async_call/4&lt;/a&gt;&lt;/code&gt; が作成されたプロセスと同じプロセスで呼び出す必要があります。そうしないと、 &lt;code&gt;timeout&lt;/code&gt; のみが返されます。</target>
        </trans-unit>
        <trans-unit id="3bb3502ac60b18fe8cef093c946cf825538bc7b7" translate="yes" xml:space="preserve">
          <source>This function must be called immediately after &lt;code&gt;&lt;a href=&quot;#deflateInit-1&quot;&gt;deflateInit/1,2,6&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#deflateReset-1&quot;&gt;deflateReset/1&lt;/a&gt;&lt;/code&gt;, before any call of &lt;code&gt;&lt;a href=&quot;#deflate-3&quot;&gt;deflate/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#deflateInit-1&quot;&gt;deflateInit/1,2,6&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#deflateReset-1&quot;&gt;deflateReset/1&lt;/a&gt;&lt;/code&gt; またはdeflateReset / 1の直後、 &lt;code&gt;&lt;a href=&quot;#deflate-3&quot;&gt;deflate/3&lt;/a&gt;&lt;/code&gt; を呼び出す前に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="5b75dd99eca2ff3b13955cd576db05e608645330" translate="yes" xml:space="preserve">
          <source>This function must be called to continue after a test case (not executing in a parallel group) has called function &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テストケース（並列グループでは実行されていない）が関数 &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt; を呼び出した後、この関数を呼び出して続行する必要があります。</target>
        </trans-unit>
        <trans-unit id="05df078881db876012ab67fef726a729b94ff9d8" translate="yes" xml:space="preserve">
          <source>This function must be called to continue after a test case has called &lt;code&gt;&lt;a href=&quot;#break-2&quot;&gt;ct:break/2&lt;/a&gt;&lt;/code&gt;. If the paused test case, &lt;code&gt;TestCase&lt;/code&gt;, executes in a parallel group, this function, rather than &lt;code&gt;continue/0&lt;/code&gt;, must be used to let the test case proceed.</source>
          <target state="translated">テストケースが &lt;code&gt;&lt;a href=&quot;#break-2&quot;&gt;ct:break/2&lt;/a&gt;&lt;/code&gt; を呼び出した後、この関数を呼び出して続行する必要があります。一時停止したテストケース &lt;code&gt;TestCase&lt;/code&gt; が並列グループで実行される場合、テストケースを &lt;code&gt;continue/0&lt;/code&gt; するには、continue / 0ではなく、この関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="df6ca91336232bf4dc1b262219129b2c8bee458f" translate="yes" xml:space="preserve">
          <source>This function must be used by a process that has been started by a &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start[_link]/3,4,5&lt;/a&gt;&lt;/code&gt; function. It tells &lt;code&gt;Parent&lt;/code&gt; that the process has initialized itself, has started, or has failed to initialize itself.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start[_link]/3,4,5&lt;/a&gt;&lt;/code&gt; 関数によって開始されたプロセスで使用する必要があります。これは、プロセスがそれ自体を初期化したか、開始したか、またはそれ自体の初期化に失敗したことを &lt;code&gt;Parent&lt;/code&gt; に通知します。</target>
        </trans-unit>
        <trans-unit id="4eb57f4a5bbafdd8247f55548e5ee187fd56dc8b" translate="yes" xml:space="preserve">
          <source>This function needs to be called as a transaction. Assume that you wish to write a function that both calls the function &lt;code&gt;add_subscriber/1&lt;/code&gt; and is in itself protected by the context of a transaction. By calling &lt;code&gt;add_subscriber/1&lt;/code&gt; from within another transaction, a nested transaction is created.</source>
          <target state="translated">この関数はトランザクションとして呼び出す必要があります。関数 &lt;code&gt;add_subscriber/1&lt;/code&gt; を呼び出し、それ自体がトランザクションのコンテキストによって保護されている関数を作成するとします。別のトランザクション内から &lt;code&gt;add_subscriber/1&lt;/code&gt; を呼び出すことにより、ネストされたトランザクションが作成されます。</target>
        </trans-unit>
        <trans-unit id="bdb288dde170ca25e8a4e8d2927079c35992755a" translate="yes" xml:space="preserve">
          <source>This function only succeeds in platforms that provide this feature. When it succeeds, space is preallocated for the file but the file size might not be updated. This behaviour depends on the preallocation implementation. To guarantee that the file size is updated, truncate the file to the new size.</source>
          <target state="translated">この関数は、この機能を提供するプラットフォームでのみ成功します。これが成功した場合、ファイルのためにスペースが事前に割り当てられますが、ファイルサイズは更新されないかもしれません。この動作は、事前割り当ての実装に依存します。ファイルサイズが更新されることを保証するためには、ファイルを新しいサイズに切り捨ててください。</target>
        </trans-unit>
        <trans-unit id="b9d0851586e3645c6e0718dc09f5fec49d8fc898" translate="yes" xml:space="preserve">
          <source>This function performs the following transformation:</source>
          <target state="translated">この関数は以下のような変換を行います。</target>
        </trans-unit>
        <trans-unit id="681ee068d504344b07045ef0edae3fb7a6646520" translate="yes" xml:space="preserve">
          <source>This function prints all elements of a list onto a stream:</source>
          <target state="translated">この関数は、リストの全要素をストリームに出力します。</target>
        </trans-unit>
        <trans-unit id="abd07fdc0e97d4adf4e29f31e2cc86ba2b8eaea2" translate="yes" xml:space="preserve">
          <source>This function produces a list of information about the megaco application. Such as users and their config, connections and their config, statistics and so on.</source>
          <target state="translated">この関数は、megacoアプリケーションに関する情報の一覧を生成します。ユーザとその設定、接続とその設定、統計情報などです。</target>
        </trans-unit>
        <trans-unit id="4aec40bb5deb9daace1e8128ff80ca5cbdbd3ab4" translate="yes" xml:space="preserve">
          <source>This function provides a low-level interface to the pretty printer, returning a flexible representation of possible layouts, independent of the paper width eventually to be used for formatting. This can be included as part of another document and/or further processed directly by the functions in the &lt;code&gt;prettypr&lt;/code&gt; module, or used in a hook function (see &lt;code&gt;format/2&lt;/code&gt; for details).</source>
          <target state="translated">この関数は、プリティプリンターへの低レベルのインターフェイスを提供し、最終的にフォーマットに使用される用紙の幅に関係なく、可能なレイアウトの柔軟な表現を返します。これは、別のドキュメントの一部として含めるか、 &lt;code&gt;prettypr&lt;/code&gt; モジュールの関数で直接直接処理するか、フック関数で使用できます（詳細については、 &lt;code&gt;format/2&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="292e6a8f5a93138af65b2381d7cdb5c0c6c34358" translate="yes" xml:space="preserve">
          <source>This function provides an efficient way to update one or more counters, without the trouble of having to look up an object, update the object by incrementing an element, and insert the resulting object into the table again. (The update is done atomically, that is, no process can access the ETS table in the middle of the operation.)</source>
          <target state="translated">この関数は、オブジェクトを検索し、要素をインクリメントしてオブジェクトを更新し、その結果得られたオブジェクトを再度テーブルに挿入するという手間をかけずに、1つまたは複数のカウンタを更新する効率的な方法を提供します。(更新はアトム単位で行われます。つまり、操作の途中でETSテーブルにアクセスするプロセスはありません)。</target>
        </trans-unit>
        <trans-unit id="8b9e675f31114737aa33341ede5a5aba5db53e0d" translate="yes" xml:space="preserve">
          <source>This function provides an efficient way to update one or more elements within an object, without the trouble of having to look up, update, and write back the entire object.</source>
          <target state="translated">この関数は、オブジェクト内の1つ以上の要素を更新する効率的な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="c1b5d7fcc798e3adcd6205abd49a5e2a97894217" translate="yes" xml:space="preserve">
          <source>This function reads match specifications from a file (possibly) generated by the &lt;code&gt;&lt;a href=&quot;#wtp-1&quot;&gt;wtp/1&lt;/a&gt;&lt;/code&gt; function. It checks the syntax of all match specifications and verifies that they are correct. The error handling principle is &quot;all or nothing&quot;, i. e. if some of the match specifications are wrong, none of the specifications are added to the list of saved match specifications for the running system.</source>
          <target state="translated">この関数は、（おそらく） &lt;code&gt;&lt;a href=&quot;#wtp-1&quot;&gt;wtp/1&lt;/a&gt;&lt;/code&gt; 関数によって生成されたファイルから一致仕様を読み取ります。すべての一致仕様の構文をチェックし、それらが正しいことを確認します。エラー処理の原則は「オールオアナッシング」です。つまり、一部の一致仕様が間違っている場合、実行中のシステムの保存済み一致仕様のリストには、どの仕様も追加されません。</target>
        </trans-unit>
        <trans-unit id="4c87d8b732e8491a29379bc4f4e018b87a77b776" translate="yes" xml:space="preserve">
          <source>This function reads the emulated environment used by &lt;code&gt;os:getenv/1&lt;/code&gt; and not the environment used by libc's &lt;code&gt;getenv(3)&lt;/code&gt; or similar. Drivers that &lt;strong&gt;require&lt;/strong&gt; that these are in sync will need to do so themselves, but keep in mind that they are segregated for a reason; &lt;code&gt;getenv(3)&lt;/code&gt; and its friends are &lt;strong&gt;not thread-safe&lt;/strong&gt; and may cause unrelated code to misbehave or crash the emulator.</source>
          <target state="translated">この関数は、 &lt;code&gt;os:getenv/1&lt;/code&gt; が使用するエミュレートされた環境を読み取ります。libcの &lt;code&gt;getenv(3)&lt;/code&gt; などが使用する環境は読み取りません。ドライバ&lt;strong&gt;が必要です&lt;/strong&gt;これらは同期していることは、自分自身そう、彼らが理由で分離されていることを心に留めておく必要があります。 &lt;code&gt;getenv(3)&lt;/code&gt; とその仲間は&lt;strong&gt;スレッドセーフで&lt;/strong&gt;は&lt;strong&gt;なく&lt;/strong&gt;、無関係なコードが誤動作したり、エミュレータをクラッシュさせたりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="10a11b74ad5663559d5b504d02b42b896b8198c8" translate="yes" xml:space="preserve">
          <source>This function requires root privileges to succeed.</source>
          <target state="translated">この関数を成功させるには、root 権限が必要です。</target>
        </trans-unit>
        <trans-unit id="062c8ae0406bce16cb74fa7ee50a7f220f4495f9" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;ok&lt;/code&gt; if the server terminates with the expected reason. Any other reason than &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;shutdown&lt;/code&gt;, or &lt;code&gt;{shutdown,Term}&lt;/code&gt; causes an error report to be issued through &lt;code&gt;logger(3)&lt;/code&gt;. The default &lt;code&gt;Reason&lt;/code&gt; is &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">この関数は、サーバーが予期した理由で終了した場合に &lt;code&gt;ok&lt;/code&gt; を返します。 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;shutdown&lt;/code&gt; 、または &lt;code&gt;{shutdown,Term}&lt;/code&gt; 以外の理由により、 &lt;code&gt;logger(3)&lt;/code&gt; を介してエラーレポートが発行されます。デフォルトの &lt;code&gt;Reason&lt;/code&gt; は &lt;code&gt;normal&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3b619b8eb3b06a0c1f9ee95ad936ded887fe9b1f" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;{continue | finished, Output}&lt;/code&gt;, where Output is the data that was decompressed in this call. New input can be queued up on each call if desired, and the function will return &lt;code&gt;{finished, Output}&lt;/code&gt; once all queued data has been decompressed.</source>
          <target state="translated">この関数は &lt;code&gt;{continue | finished, Output}&lt;/code&gt; 出力は、この呼び出しで解凍されたデータです。必要に応じて、呼び出しごとに新しい入力をキューに入れることができ、キューに入れられたすべてのデータが圧縮解除されると、関数は &lt;code&gt;{finished, Output}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1fe5f1399ea4e26d1526efcdd913ad89693dd38c" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;{more, Decompressed}&lt;/code&gt;, when there is more output available, and &lt;code&gt;&lt;a href=&quot;#inflateChunk-1&quot;&gt;inflateChunk/1&lt;/a&gt;&lt;/code&gt; is to be used to read it.</source>
          <target state="translated">この関数は &lt;code&gt;{more, Decompressed}&lt;/code&gt; 使用可能な出力がさらにあり、それを読み取るために &lt;code&gt;&lt;a href=&quot;#inflateChunk-1&quot;&gt;inflateChunk/1&lt;/a&gt;&lt;/code&gt; を使用する場合、{more、Decompressed}を返します。</target>
        </trans-unit>
        <trans-unit id="57c7b411ef596e9d3dc2dccd3a829fab7afcf559" translate="yes" xml:space="preserve">
          <source>This function returns a non-zero value if the time-slice has been exhausted, and zero if the callback is allowed to continue execution. If a non-zero value is returned, the driver callback is to return as soon as possible in order for the port to be able to yield.</source>
          <target state="translated">この関数は、タイムスライスを使い切った場合は 0 以外の値を返し、コールバックの実行継続が許可されている場合は 0 を返します。ゼロ以外の値が返された場合、ドライバのコールバックは、ポートが降伏できるようにするために、できるだけ早く返すことになっています。</target>
        </trans-unit>
        <trans-unit id="b34ef5ebb7e9ff07df93e070c922fe104914c7bc" translate="yes" xml:space="preserve">
          <source>This function returns the &lt;code&gt;&lt;a href=&quot;#type-tid&quot;&gt;tid()&lt;/a&gt;&lt;/code&gt; of the named table identified by &lt;code&gt;TableName&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt; if no such table exists. The &lt;code&gt;tid()&lt;/code&gt; can be used in place of the table name in all operations, which is slightly faster since the name does not have to be resolved on each call.</source>
          <target state="translated">この関数は、 &lt;code&gt;TableName&lt;/code&gt; で識別される名前付きテーブルの &lt;code&gt;&lt;a href=&quot;#type-tid&quot;&gt;tid()&lt;/a&gt;&lt;/code&gt; を返します。そのようなテーブルが存在し &lt;code&gt;undefined&lt;/code&gt; 場合はundefinedを返します。 &lt;code&gt;tid()&lt;/code&gt; の名前が呼び出しごとに解決する必要がないので、少し速くなり、すべての操作でテーブル名の代わりに使用することができます。</target>
        </trans-unit>
        <trans-unit id="50dd77bc2f5d6e06a832906b2c12c471d8aa9340" translate="yes" xml:space="preserve">
          <source>This function returns the &lt;code&gt;Adler&lt;/code&gt; checksum of &lt;code&gt;[Data1,Data2]&lt;/code&gt;, requiring only &lt;code&gt;Adler1&lt;/code&gt;, &lt;code&gt;Adler2&lt;/code&gt;, and &lt;code&gt;Size2&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;[Data1,Data2]&lt;/code&gt; の &lt;code&gt;Adler&lt;/code&gt; チェックサムを返し、 &lt;code&gt;Adler1&lt;/code&gt; 、 &lt;code&gt;Adler2&lt;/code&gt; 、および &lt;code&gt;Size2&lt;/code&gt; のみを必要とします。</target>
        </trans-unit>
        <trans-unit id="254134ddf194a5bc8b6a55dc528e9535675c6294" translate="yes" xml:space="preserve">
          <source>This function returns the &lt;code&gt;CRC&lt;/code&gt; checksum of &lt;code&gt;[Data1,Data2]&lt;/code&gt;, requiring only &lt;code&gt;CRC1&lt;/code&gt;, &lt;code&gt;CRC2&lt;/code&gt;, and &lt;code&gt;Size2&lt;/code&gt;.</source>
          <target state="translated">この関数は返す &lt;code&gt;CRC&lt;/code&gt; のチェックサム &lt;code&gt;[Data1,Data2]&lt;/code&gt; のみ必要、 &lt;code&gt;CRC1&lt;/code&gt; 、 &lt;code&gt;CRC2&lt;/code&gt; 、および &lt;code&gt;Size2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bfe8f7ec0382a52a177f156ebe5c3e11685e6528" translate="yes" xml:space="preserve">
          <source>This function returns the default encoding for Erlang source files (if no encoding comment is present) in the currently running release. In Erlang/OTP R16B, &lt;code&gt;latin1&lt;/code&gt; (bytewise encoding) was returned. As from Erlang/OTP 17.0, &lt;code&gt;utf8&lt;/code&gt; is returned.</source>
          <target state="translated">この関数は、現在実行中のリリースのErlangソースファイルのデフォルトのエンコーディングを返します（エンコーディングコメントがない場合）。Erlang / OTP R16Bでは、 &lt;code&gt;latin1&lt;/code&gt; （バイト単位のエンコード）が返されました。Erlang / OTP 17.0以降、 &lt;code&gt;utf8&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="24ac5e4c95ff19314b1e92b03b1fbc6ddb4df1f4" translate="yes" xml:space="preserve">
          <source>This function returns the user tag set in the current process or, if no user tag is present, the last user tag sent to the process together with a message (in the same way as &lt;code&gt;sequential trace tokens&lt;/code&gt; are spread to other processes together with messages. For an explanation of how user tags can be spread together with messages, see &lt;code&gt;&lt;a href=&quot;#spread_tag-1&quot;&gt;spread_tag/1&lt;/a&gt;&lt;/code&gt;. If no tag is found or dynamic tracing is not available, it returns &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">この関数は、現在のプロセスに設定されているユーザータグを返します。ユーザータグが存在しない場合は、メッセージと共にプロセスに送信された最後のユーザータグ（ &lt;code&gt;sequential trace tokens&lt;/code&gt; がメッセージとともに他のプロセスに拡散されるのと同じ方法で）。メッセージと共にユーザータグを分散する方法の説明については、 &lt;code&gt;&lt;a href=&quot;#spread_tag-1&quot;&gt;spread_tag/1&lt;/a&gt;&lt;/code&gt; を参照してください。タグが見つからない場合、または動的トレースが使用できない場合は、 &lt;code&gt;undefined&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="ad3f3a41d62bdc7c42feabe41234fd9722d7cb98" translate="yes" xml:space="preserve">
          <source>This function returns the user tag set in the current process. If no tag is set or dynamic tracing is not available, it returns &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">この関数は、現在のプロセスで設定されているユーザータグを返します。タグが設定されていない場合、または動的トレースが使用できない場合は、 &lt;code&gt;undefined&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="fd79f4e47f62cf59b521bcb089167a8d5c5fd14f" translate="yes" xml:space="preserve">
          <source>This function returns the verbosity level for the specified logging category. See the &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; for details. Use the value &lt;code&gt;default&lt;/code&gt; to read the general verbosity level.</source>
          <target state="translated">この関数は、指定されたロギングカテゴリの詳細レベルを返します。詳細は &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; をご覧ください。 &lt;code&gt;default&lt;/code&gt; 値を使用して、一般的な詳細レベルを読み取ります。</target>
        </trans-unit>
        <trans-unit id="9213458608b1e7bf5d8b4e1a7eb828c4aad8ff78" translate="yes" xml:space="preserve">
          <source>This function returns value from dictionary and a new dictionary without this value. Returns &lt;code&gt;error&lt;/code&gt; if the key is not present in the dictionary.</source>
          <target state="translated">この関数は、ディクショナリからの値と、この値のない新しいディクショナリを返します。キーがディクショナリに存在しない場合、 &lt;code&gt;error&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="ebf35b3402a76d292262e9d707c75231902c52bf" translate="yes" xml:space="preserve">
          <source>This function returns value from dictionary and new dictionary without this value. Returns &lt;code&gt;error&lt;/code&gt; if the key is not present in the dictionary.</source>
          <target state="translated">この関数は、ディクショナリからの値と、この値のない新しいディクショナリを返します。キーがディクショナリに存在しない場合、 &lt;code&gt;error&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="4620a951555900d51d4b19f86794013a12f92c5b" translate="yes" xml:space="preserve">
          <source>This function runs the measurement on all the &lt;strong&gt;official&lt;/strong&gt; codecs; pretty, compact, ber, per and erlang.</source>
          <target state="translated">この関数は、すべての&lt;strong&gt;公式&lt;/strong&gt;コーデックで測定を実行します。かなり、コンパクト、ber、per、およびerlang。</target>
        </trans-unit>
        <trans-unit id="4d644d2c0042513fa733b8a7d873cf8a04730f5c" translate="yes" xml:space="preserve">
          <source>This function sends a message to the event manager registered as &lt;code&gt;error_man&lt;/code&gt;, telling it to add the event handler &lt;code&gt;terminal_logger&lt;/code&gt;. The event manager calls the callback function &lt;code&gt;terminal_logger:init([])&lt;/code&gt;, where the argument &lt;code&gt;[]&lt;/code&gt; is the third argument to &lt;code&gt;add_handler&lt;/code&gt;. &lt;code&gt;init&lt;/code&gt; is expected to return &lt;code&gt;{ok, State}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the internal state of the event handler.</source>
          <target state="translated">この関数は、 &lt;code&gt;error_man&lt;/code&gt; として登録されたイベントマネージャにメッセージを送信し、イベントハンドラ &lt;code&gt;terminal_logger&lt;/code&gt; を追加するように通知します。イベントマネージャはコールバック関数 &lt;code&gt;terminal_logger:init([])&lt;/code&gt; を &lt;code&gt;add_handler&lt;/code&gt; ます。ここで、引数 &lt;code&gt;[]&lt;/code&gt; はadd_handlerの 3番目の引数です。 &lt;code&gt;init&lt;/code&gt; は &lt;code&gt;{ok, State}&lt;/code&gt; を返すことが期待されています。ここで、 &lt;code&gt;State&lt;/code&gt; はイベントハンドラーの内部状態です。</target>
        </trans-unit>
        <trans-unit id="9488c1c7cd2d72dbd05ee8b3a4cf579cbfcc3089" translate="yes" xml:space="preserve">
          <source>This function sends a message to the event manager registered as &lt;code&gt;error_man&lt;/code&gt;, telling it to delete the event handler &lt;code&gt;terminal_logger&lt;/code&gt;. The event manager calls the callback function &lt;code&gt;terminal_logger:terminate([], State)&lt;/code&gt;, where the argument &lt;code&gt;[]&lt;/code&gt; is the third argument to &lt;code&gt;delete_handler&lt;/code&gt;. &lt;code&gt;terminate&lt;/code&gt; is to be the opposite of &lt;code&gt;init&lt;/code&gt; and do any necessary cleaning up. Its return value is ignored.</source>
          <target state="translated">この関数は、 &lt;code&gt;error_man&lt;/code&gt; として登録されているイベントマネージャにメッセージを送信し、イベントハンドラ &lt;code&gt;terminal_logger&lt;/code&gt; を削除するように通知します。イベントマネージャーはコールバック関数 &lt;code&gt;terminal_logger:terminate([], State)&lt;/code&gt; を &lt;code&gt;delete_handler&lt;/code&gt; ます。ここで、引数 &lt;code&gt;[]&lt;/code&gt; はdelete_handlerの 3番目の引数です。 &lt;code&gt;terminate&lt;/code&gt; は、 &lt;code&gt;init&lt;/code&gt; の反対で、必要なクリーンアップを実行します。その戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="01064956f3c5f10087dfedd98caeabdab20043f6" translate="yes" xml:space="preserve">
          <source>This function sets the user tag of the current process. The user tag is a binary(), but can be specified as any iodata(), which is automatically converted to a binary by this function.</source>
          <target state="translated">この関数は、現在のプロセスのユーザタグを設定します。ユーザタグはバイナリ()ですが、この関数によって自動的にバイナリに変換される任意の iodata()を指定することができます。</target>
        </trans-unit>
        <trans-unit id="61313460b8aa3e37c5b58b57b47f109e6ec0573c" translate="yes" xml:space="preserve">
          <source>This function sets up a subscription for NETCONF event notifications of the specified stream type, matching the specified filter. The calling process receives notifications as messages of type &lt;code&gt;&lt;a href=&quot;#type-notification&quot;&gt;notification()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、指定されたフィルターに一致する、指定されたストリームタイプのNETCONFイベント通知のサブスクリプションを設定します。呼び出しプロセスは、タイプ &lt;code&gt;&lt;a href=&quot;#type-notification&quot;&gt;notification()&lt;/a&gt;&lt;/code&gt; のメッセージとして通知を受け取ります。</target>
        </trans-unit>
        <trans-unit id="ae2f0db4a2d6577440241530db91576d86c351bc" translate="yes" xml:space="preserve">
          <source>This function should be used by custom Logger handlers to make configuration consistent no matter which handler the system uses. Normal usage is to add a call to &lt;code&gt;logger:add_handlers/1&lt;/code&gt; just after the processes that the handler needs are started, and pass the application's &lt;code&gt;logger&lt;/code&gt; configuration as the argument. For example:</source>
          <target state="translated">この関数は、システムが使用するハンドラーに関係なく構成を一貫させるために、カスタムロガーハンドラーによって使用されます。通常の使用法は、ハンドラーが必要とするプロセスが開始された直後に &lt;code&gt;logger:add_handlers/1&lt;/code&gt; への呼び出しを追加し、アプリケーションの &lt;code&gt;logger&lt;/code&gt; 構成を引数として渡すことです。例えば：</target>
        </trans-unit>
        <trans-unit id="f301b3f0b8c0209d0cf4fd9f62efd0855d383514" translate="yes" xml:space="preserve">
          <source>This function should be used whenever the &lt;code&gt;ScopedPDU&lt;/code&gt; is encrypted.</source>
          <target state="translated">この関数は、 &lt;code&gt;ScopedPDU&lt;/code&gt; が暗号化されている場合は常に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6163aa7d8dcc271f09c1955760210bfef0a047d1" translate="yes" xml:space="preserve">
          <source>This function should only be used for micro-benchmarks; it sets &lt;code&gt;copy_save&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for the duration of the call, which can quickly lead to running out of memory.</source>
          <target state="translated">この関数は、マイクロベンチマークにのみ使用してください。呼び出しの間、 &lt;code&gt;copy_save&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。これにより、すぐにメモリ不足が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="378340ac7df7630dbeb8cb5d900d9bad24c77182" translate="yes" xml:space="preserve">
          <source>This function should, besides spawning the connection supervisor, also create a distribution controller. The distribution controller is either a process or a port which is responsible for dispatching traffic.</source>
          <target state="translated">この関数は、接続スーパバイザをスポーンするだけでなく、ディストリビュー ションコントローラも作成しなければなりません。ディストリビューションコントローラは、トラフィックのディスパッチを担当するプロセスかポートです。</target>
        </trans-unit>
        <trans-unit id="d4d47d2b2af731fd5c9c26e6262581d877c04f00" translate="yes" xml:space="preserve">
          <source>This function shuts down a previously started trace client. The &lt;code&gt;Pid&lt;/code&gt; argument is the process id returned from the &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#trace_client-3&quot;&gt;trace_client/3&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">この関数は、以前に開始されたトレースクライアントをシャットダウンします。 &lt;code&gt;Pid&lt;/code&gt; 引数から返されたプロセスIDである &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; 又は &lt;code&gt;&lt;a href=&quot;#trace_client-3&quot;&gt;trace_client/3&lt;/a&gt;&lt;/code&gt; コール。</target>
        </trans-unit>
        <trans-unit id="1762fe9d329cecf345c08b9b7958cf3995f81b8e" translate="yes" xml:space="preserve">
          <source>This function spawns and links to a new process, an event manager.</source>
          <target state="translated">この関数は、新しいプロセスであるイベントマネージャをスポーンし、リンクします。</target>
        </trans-unit>
        <trans-unit id="550809e278a777ab2f212797a3d8588ff2bdddcd" translate="yes" xml:space="preserve">
          <source>This function starts a server on the local node that will be the recipient of all trace messages. All subsequent calls to &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; will result in messages sent to the newly started trace server.</source>
          <target state="translated">この関数は、すべてのトレースメッセージの受信者となるローカルノード上のサーバーを起動します。以降の &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; への呼び出しはすべて、新しく起動したトレースサーバーにメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="02bf735444f615dc9059203b498c83b1b1c490d8" translate="yes" xml:space="preserve">
          <source>This function starts a trace client that reads the output created by a trace port driver and handles it in mostly the same way as a tracer process created by the &lt;code&gt;&lt;a href=&quot;#tracer-0&quot;&gt;tracer/0&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">この関数は、トレースポートドライバーによって作成された出力を読み取り、それを &lt;code&gt;&lt;a href=&quot;#tracer-0&quot;&gt;tracer/0&lt;/a&gt;&lt;/code&gt; 関数によって作成されたトレーサープロセスとほとんど同じ方法で処理するトレースクライアントを起動します。</target>
        </trans-unit>
        <trans-unit id="71ed1ace1cba19901a1c4410fa55742720248a3e" translate="yes" xml:space="preserve">
          <source>This function starts a tracer server with additional parameters on the local node. The first parameter, the &lt;code&gt;Type&lt;/code&gt;, indicates if trace messages should be handled by a receiving process (&lt;code&gt;process&lt;/code&gt;), by a tracer port (&lt;code&gt;port&lt;/code&gt;) or by a tracer module (&lt;code&gt;module&lt;/code&gt;). For a description about tracer ports see &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt; and for a tracer modules see &lt;code&gt;erl_tracer&lt;/code&gt;.</source>
          <target state="translated">この関数は、ローカルノードの追加パラメーターでトレーサーサーバーを起動します。最初のパラメーターである &lt;code&gt;Type&lt;/code&gt; は、トレースメッセージを受信プロセス（ &lt;code&gt;process&lt;/code&gt; ）、トレーサーポート（ &lt;code&gt;port&lt;/code&gt; ）、またはトレーサーモジュール（ &lt;code&gt;module&lt;/code&gt; ）のどちらで処理するかを示します。トレーサーポートの説明については &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt; を、トレーサーモジュールについては &lt;code&gt;erl_tracer&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="1b87e561423bace774990128b77e86ad6df9e413" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone1&lt;/strong&gt; performance test with all codec configs. &lt;code&gt;Factor&lt;/code&gt; (defaults to &lt;code&gt;1&lt;/code&gt;) processes are started for every supported codec config.</source>
          <target state="translated">この関数は、すべてのコーデック構成で&lt;strong&gt;mstone1&lt;/strong&gt;パフォーマンステストを開始します。 &lt;code&gt;Factor&lt;/code&gt; （デフォルトは &lt;code&gt;1&lt;/code&gt; ）プロセスは、サポートされているすべてのコーデック構成に対して開始されます。</target>
        </trans-unit>
        <trans-unit id="792ed4cb1314be5885f62ea62a3ebeadcd5147c2" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone1&lt;/strong&gt; performance test with codec configs not using any drivers (i.e. &lt;code&gt;pretty&lt;/code&gt; and &lt;code&gt;compact&lt;/code&gt; without &lt;code&gt;flex&lt;/code&gt;, &lt;code&gt;ber&lt;/code&gt; and &lt;code&gt;per&lt;/code&gt; without &lt;code&gt;driver&lt;/code&gt; and &lt;code&gt;erlang&lt;/code&gt; without &lt;code&gt;compressed&lt;/code&gt;). The same number of processes are started as when running the standard test (using the &lt;code&gt;start/0,1&lt;/code&gt; function). Each process encodes and decodes their messages. The number of messages processed in total (for all processes) is the mstone value.</source>
          <target state="translated">この機能は、起動し&lt;strong&gt;mstone1&lt;/strong&gt;（すなわちすべてのドライバを使用していないコーデックのconfigsで性能試験を &lt;code&gt;pretty&lt;/code&gt; し、 &lt;code&gt;compact&lt;/code&gt; なし &lt;code&gt;flex&lt;/code&gt; 、 &lt;code&gt;ber&lt;/code&gt; と &lt;code&gt;per&lt;/code&gt; せずに &lt;code&gt;driver&lt;/code&gt; と &lt;code&gt;erlang&lt;/code&gt; せずに &lt;code&gt;compressed&lt;/code&gt; ）。標準テストの実行時と同じ数のプロセスが開始されます（ &lt;code&gt;start/0,1&lt;/code&gt; 関数を使用）。各プロセスは、メッセージをエンコードおよびデコードします。 （すべてのプロセスの）合計で処理されたメッセージの数がmstone値です。</target>
        </trans-unit>
        <trans-unit id="ad7b4c53c1b5220bc2673b30cb62ee3a8a2764a4" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone1&lt;/strong&gt; performance test with only the driver using codec configs (i.e. &lt;code&gt;pretty&lt;/code&gt; and &lt;code&gt;compact&lt;/code&gt; with &lt;code&gt;flex&lt;/code&gt;, and &lt;code&gt;ber&lt;/code&gt; and &lt;code&gt;per&lt;/code&gt; with &lt;code&gt;driver&lt;/code&gt; and &lt;code&gt;erlang&lt;/code&gt; with &lt;code&gt;compressed&lt;/code&gt;). The same number of processes are started as when running the standard test (using the &lt;code&gt;start/0,1&lt;/code&gt; function). Each process encodes and decodes their messages. The number of messages processed in total (for all processes) is the mstone value.</source>
          <target state="translated">この機能は、起動し&lt;strong&gt;mstone1&lt;/strong&gt;（すなわち唯一のコーデックのconfigsを使用してドライバで性能試験を &lt;code&gt;pretty&lt;/code&gt; し、 &lt;code&gt;compact&lt;/code&gt; で &lt;code&gt;flex&lt;/code&gt; 、および &lt;code&gt;ber&lt;/code&gt; および &lt;code&gt;per&lt;/code&gt; に &lt;code&gt;driver&lt;/code&gt; と &lt;code&gt;erlang&lt;/code&gt; で &lt;code&gt;compressed&lt;/code&gt; ）。標準テストの実行時と同じ数のプロセスが開始されます（ &lt;code&gt;start/0,1&lt;/code&gt; 関数を使用）。各プロセスは、メッセージをエンコードおよびデコードします。 （すべてのプロセスの）合計で処理されたメッセージの数がmstone値です。</target>
        </trans-unit>
        <trans-unit id="a169f04fb06754d3d77f607833509158a7205503" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone1&lt;/strong&gt; performance test with only the flex codec configs (i.e. &lt;code&gt;pretty&lt;/code&gt; and &lt;code&gt;compact&lt;/code&gt; with &lt;code&gt;flex&lt;/code&gt;). The same number of processes are started as when running the standard test (using the &lt;code&gt;start/0,1&lt;/code&gt; function). Each process encodes and decodes their messages. The number of messages processed in total (for all processes) is the mstone value.</source>
          <target state="translated">この機能は、起動し&lt;strong&gt;mstone1&lt;/strong&gt;のみフレックスコーデックのconfigs（すなわちで性能試験を &lt;code&gt;pretty&lt;/code&gt; し、 &lt;code&gt;compact&lt;/code&gt; で &lt;code&gt;flex&lt;/code&gt; ）。標準テストの実行時と同じ数のプロセスが開始されます（ &lt;code&gt;start/0,1&lt;/code&gt; 関数を使用）。各プロセスは、メッセージをエンコードおよびデコードします。（すべてのプロセスの）合計で処理されたメッセージの数がmstone値です。</target>
        </trans-unit>
        <trans-unit id="198cdb7eaaa9d51f54f530ef45039bacb833b143" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone2&lt;/strong&gt; performance test with all codec configs. Processes are created dynamically. Each process make &lt;strong&gt;one&lt;/strong&gt; run through their messages (decoding and encoding messages) and then exits. When one process exits, a new is created with the same codec config and set of messages.</source>
          <target state="translated">この関数は、すべてのコーデック構成で&lt;strong&gt;mstone2&lt;/strong&gt;パフォーマンステストを開始します。プロセスは動的に作成されます。各プロセスは、メッセージ（デコードおよびエンコードメッセージ）を&lt;strong&gt;1回&lt;/strong&gt;実行してから終了します。1つのプロセスが終了すると、同じコーデック設定とメッセージセットで新しいプロセスが作成されます。</target>
        </trans-unit>
        <trans-unit id="3f645d23afcc815891f3acc3933eab5ba5bdfcf9" translate="yes" xml:space="preserve">
          <source>This function starts the evaluation of a digit map with megaco:eval_digit_map/1 and sends a sequence of events to it megaco:report_digit_event/2 in order to simplify testing of digit maps.</source>
          <target state="translated">この関数は、デジットマップのテストを簡単にするために、megaco:eval_digit_map/1でデジットマップの評価を開始し、一連のイベントをmegaco:report_digit_event/2に送信します。</target>
        </trans-unit>
        <trans-unit id="4a3fae66ed7c3cc4e51664a7096a153b2497b47c" translate="yes" xml:space="preserve">
          <source>This function starts the standalone &lt;code&gt;nteventlog&lt;/code&gt; process and, if &lt;code&gt;start_link/2&lt;/code&gt; is used, links to it.</source>
          <target state="translated">この関数は、スタンドアロンの &lt;code&gt;nteventlog&lt;/code&gt; プロセスを開始し、 &lt;code&gt;start_link/2&lt;/code&gt; が使用されている場合はそれにリンクします。</target>
        </trans-unit>
        <trans-unit id="51eab0810670dc8d97c68c1365bff9e556a60d4b" translate="yes" xml:space="preserve">
          <source>This function takes a list of 'ActionRequest' records and has three main options:</source>
          <target state="translated">この関数は'ActionRequest'レコードのリストを受け取り、3つの主要なオプションを持ちます。</target>
        </trans-unit>
        <trans-unit id="b830d311ae4ee73ecebdc71d2c40db38f6b5103e" translate="yes" xml:space="preserve">
          <source>This function tries to register the specified managed agents, without checking if any of them exist. To change a registered managed agent, the agent must first be unregistered.</source>
          <target state="translated">この関数は、指定された管理エージェントが存在するかどうかを確認せずに、指定された管理エージェントの登録を試みます。登録されている管理エージェントを変更するには、まず登録を解除する必要があります。</target>
        </trans-unit>
        <trans-unit id="97a729927e14b719ca944a21f7b5b57eca599bd8" translate="yes" xml:space="preserve">
          <source>This function tries to register the specified users, without checking if any of them exist. To change a registered user, the user must first be unregistered.</source>
          <target state="translated">この関数は、指定されたユーザが存在するかどうかを確認せずに、指定されたユーザの登録を試みます。登録されているユーザを変更するには、まずそのユーザが登録されていない必要があります。</target>
        </trans-unit>
        <trans-unit id="b10454e8f4725b8a0eb4da465ee57ecb2b75d61c" translate="yes" xml:space="preserve">
          <source>This function updates the configuration data from which the specified configuration variable was read, and returns the (possibly) new value of this variable.</source>
          <target state="translated">この関数は、指定された設定変数が読み込まれた設定データを更新し、(可能性のある)新しい値を返します。</target>
        </trans-unit>
        <trans-unit id="ca81e8a0f9544f8a61bc496a4e260c146099af94" translate="yes" xml:space="preserve">
          <source>This function used to return &lt;code&gt;false&lt;/code&gt; for BIFs before Erlang/OTP 18.0.</source>
          <target state="translated">この関数は、Erlang / OTP 18.0より前のBIFでは &lt;code&gt;false&lt;/code&gt; を返していました。</target>
        </trans-unit>
        <trans-unit id="ae9274ef2248b4bd36f346fff38a572567648823" translate="yes" xml:space="preserve">
          <source>This function uses resolver option &lt;code&gt;search&lt;/code&gt; just like &lt;code&gt;&lt;a href=&quot;#getbyname-2&quot;&gt;getbyname/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#getbyname-2&quot;&gt;getbyname/2,3&lt;/a&gt;&lt;/code&gt; と同様にリゾルバーオプション &lt;code&gt;search&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="21fc2b9bb4c2e8f025026e93df306e88dd67e182" translate="yes" xml:space="preserve">
          <source>This function uses resolver option &lt;code&gt;search&lt;/code&gt; that is a list of domain names. If the name to resolve contains no dots, it is prepended to each domain name in the search list, and they are tried in order. If the name contains dots, it is first tried as an absolute name and if that fails, the search list is used. If the name has a trailing dot, it is supposed to be an absolute name and the search list is not used.</source>
          <target state="translated">この関数は、ドメイン名のリストであるリゾルバーオプション &lt;code&gt;search&lt;/code&gt; を使用します。解決する名前にドットが含まれていない場合は、検索リストの各ドメイン名の前に付加され、順番に試されます。名前にドットが含まれている場合は、最初に絶対名として試行され、失敗した場合は検索リストが使用されます。名前の末尾にドットがある場合、それは絶対名であると見なされ、検索リストは使用されません。</target>
        </trans-unit>
        <trans-unit id="66f0f7dcf3e6aeb3b05425d374f015271bc5c8f8" translate="yes" xml:space="preserve">
          <source>This function uses the NIF library to determine if dynamic tracing is available. Usually calling &lt;code&gt;erlang:system_info/1&lt;/code&gt; is a better indicator of the availability of dynamic tracing.</source>
          <target state="translated">この関数は、NIFライブラリを使用して、動的トレースが使用可能かどうかを判断します。通常、 &lt;code&gt;erlang:system_info/1&lt;/code&gt; の呼び出しは、動的トレースの可用性のより良い指標です。</target>
        </trans-unit>
        <trans-unit id="21d638edd5b52a38a30d020b01f40281508b0f05" translate="yes" xml:space="preserve">
          <source>This function uses the module &lt;code&gt;rand&lt;/code&gt; to generate new keys. The seed it uses may be initialized by calling &lt;code&gt;rand:seed/1&lt;/code&gt; or &lt;code&gt;rand:seed/2&lt;/code&gt; before this function is first called.</source>
          <target state="translated">この関数は、モジュール &lt;code&gt;rand&lt;/code&gt; を使用して新しいキーを生成します。使用する &lt;code&gt;rand:seed/2&lt;/code&gt; は、この関数が最初に呼び出される前に &lt;code&gt;rand:seed/1&lt;/code&gt; またはrand：seed / 2を呼び出すことによって初期化できます。</target>
        </trans-unit>
        <trans-unit id="971c66faa137257bfd2753c3d5426c0e180b495e" translate="yes" xml:space="preserve">
          <source>This function was introduced in Erlang/OTP R16 as part of a first step to support UTF-8 atoms.</source>
          <target state="translated">この関数はErlang/OTP R16でUTF-8アトムをサポートするための最初のステップの一部として導入されました。</target>
        </trans-unit>
        <trans-unit id="d681ac22ff0dcd99cf6793970b0001c494cacadb" translate="yes" xml:space="preserve">
          <source>This function was originally intenden for debugging purpose. It is not recommended to print very large terms with &lt;code&gt;%T&lt;/code&gt;. The function may change &lt;code&gt;errno&lt;/code&gt;, even if successful.</source>
          <target state="translated">この関数は、もともとデバッグを目的としたものでした。 &lt;code&gt;%T&lt;/code&gt; で非常に大きな用語を印刷することはお勧めしません。関数は、成功した場合でも &lt;code&gt;errno&lt;/code&gt; を変更する場合があります。</target>
        </trans-unit>
        <trans-unit id="ecc1aaa0050da285abdb43a70baab76906a3247e" translate="yes" xml:space="preserve">
          <source>This function will return the identity of test- and group leader processes that are still running at the time of this call. &lt;code&gt;TestProcs&lt;/code&gt; are processes in the system that have a Common Test IO process as group leader. &lt;code&gt;SharedGL&lt;/code&gt; is the central Common Test IO process, responsible for printing to log files for configuration functions and sequentially executing test cases. &lt;code&gt;OtherGLs&lt;/code&gt; are Common Test IO processes that print to log files for test cases in parallel test case groups.</source>
          <target state="translated">この関数は、この呼び出し時にまだ実行されているテストおよびグループリーダープロセスのIDを返します。 &lt;code&gt;TestProcs&lt;/code&gt; は、グループリーダーとしてCommon Test IOプロセスを持つシステム内のプロセスです。 &lt;code&gt;SharedGL&lt;/code&gt; は、共通の共通テストIOプロセスであり、構成機能のログファイルに出力し、テストケースを順次実行します。 &lt;code&gt;OtherGLs&lt;/code&gt; は、並列テストケースグループのテストケースのログファイルに出力する一般的なテストIOプロセスです。</target>
        </trans-unit>
        <trans-unit id="f14e5a0a13df62695dcaadc50e2282e18baef924" translate="yes" xml:space="preserve">
          <source>This function will save all match specifications saved during the session (during calls to &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt;) and built-in match specifications in a text file with the name designated by &lt;code&gt;Name&lt;/code&gt;. The format of the file is textual, why it can be edited with an ordinary text editor, and then restored with &lt;code&gt;&lt;a href=&quot;#rtp-1&quot;&gt;rtp/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、セッション中に（ &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; の呼び出し中に）保存されたすべての一致仕様と組み込みの一致仕様を、 &lt;code&gt;Name&lt;/code&gt; で指定された名前のテキストファイルに保存します。ファイルの形式はテキストであり、通常のテキストエディターで編集してから、 &lt;code&gt;&lt;a href=&quot;#rtp-1&quot;&gt;rtp/1&lt;/a&gt;&lt;/code&gt; で復元できるのはなぜですか。</target>
        </trans-unit>
        <trans-unit id="fe5d78839a608e23473c4be1eb43fd59136f1578" translate="yes" xml:space="preserve">
          <source>This function works as &lt;code&gt;&lt;a href=&quot;#ctp-1&quot;&gt;ctp/1&lt;/a&gt;&lt;/code&gt;, but only disables tracing set up with &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; (not with &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#ctp-1&quot;&gt;ctp/1&lt;/a&gt;&lt;/code&gt; として機能しますが、（ &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt; ではなく） &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; で設定されたトレースのみを無効にします。</target>
        </trans-unit>
        <trans-unit id="4f73b00efb28d22de61c21b36ad8a83ee49cefed" translate="yes" xml:space="preserve">
          <source>This function works as &lt;code&gt;&lt;a href=&quot;#ctp-1&quot;&gt;ctp/1&lt;/a&gt;&lt;/code&gt;, but only disables tracing set up with &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt; (not with &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#ctp-1&quot;&gt;ctp/1&lt;/a&gt;&lt;/code&gt; として機能しますが、（ &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; ではなく） &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt; で設定されたトレースのみを無効にします。</target>
        </trans-unit>
        <trans-unit id="7f3521fe756e0c4e17603d964e71f79b819ca2cc" translate="yes" xml:space="preserve">
          <source>This function works as &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt;, but enables tracing for local calls (and local functions) as well as for global calls (and functions).</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; として機能しますが、ローカル呼び出し（およびローカル関数）およびグローバル呼び出し（および関数）のトレースを有効にします。</target>
        </trans-unit>
        <trans-unit id="649cc8a65ee1157009a2026f80b85a94281bddef" translate="yes" xml:space="preserve">
          <source>This function works exactly as &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt;, but allows you to write your own handler function. The handler function works mostly as the one described in &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt;, but will also have to be prepared to handle trace messages of the form &lt;code&gt;{drop, N}&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the number of dropped messages. This pseudo trace message will only occur if the ip trace driver is used.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; とまったく同じように機能しますが、独自のハンドラー関数を作成できます。ハンドラー関数は、主に &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt; で説明されているものと同じように機能しますが、 &lt;code&gt;{drop, N}&lt;/code&gt; 形式のトレースメッセージを処理する準備も必要です。ここで、 &lt;code&gt;N&lt;/code&gt; はドロップされたメッセージの数です。この疑似トレースメッセージは、ip traceドライバが使用されている場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="e3613eb939658a1c4e7abb497a6aeaed611fdecc" translate="yes" xml:space="preserve">
          <source>This function works exactly the same way as &lt;code&gt;&lt;a href=&quot;#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; except that it is asynchronous instead of synchronous. The spawned process will link with the caller when created. If an &lt;code&gt;Error&lt;/code&gt; occurs while doing the cover analysis the process will crash with the same error reason as &lt;code&gt;&lt;a href=&quot;#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; would return.</source>
          <target state="translated">この関数は、同期ではなく非同期であることを除いて、 &lt;code&gt;&lt;a href=&quot;#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; とまったく同じように機能します。生成されたプロセスは、作成時に呼び出し元とリンクします。カバー分析の実行中に &lt;code&gt;Error&lt;/code&gt; が発生した場合、 &lt;code&gt;&lt;a href=&quot;#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; が返すのと同じエラー理由でプロセスがクラッシュします。</target>
        </trans-unit>
        <trans-unit id="41248f0d6e585aea101cd90cc6b6f5d6fd5821da" translate="yes" xml:space="preserve">
          <source>This function, similar to &lt;code&gt;timer:sleep/1&lt;/code&gt; in STDLIB, suspends the test case for a specified time. However, this function also multiplies &lt;code&gt;Time&lt;/code&gt; with the &lt;code&gt;multiply_timetraps&lt;/code&gt; value (if set) and under certain circumstances also scales up the time automatically if &lt;code&gt;scale_timetraps&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; (default is &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">この関数は、STDLIBの &lt;code&gt;timer:sleep/1&lt;/code&gt; と同様に、指定された時間テストケースを一時停止します。ただし、この関数は &lt;code&gt;Time&lt;/code&gt; に &lt;code&gt;multiply_timetraps&lt;/code&gt; 値（設定されている場合）を乗算し、特定の状況下では、 &lt;code&gt;scale_timetraps&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されている場合（デフォルトは &lt;code&gt;false&lt;/code&gt; ）、時間を自動的に拡大します。</target>
        </trans-unit>
        <trans-unit id="285cbe2f9f5c577e4d9b2e978e114e422218a0dd" translate="yes" xml:space="preserve">
          <source>This functionality can be used to avoid that one process overloads a database on another node.</source>
          <target state="translated">この機能は、あるプロセスが別のノードでデータベースをオーバーロードしないようにするために使用できます。</target>
        </trans-unit>
        <trans-unit id="2f663a6b926446bfebbbdc0b7d15882ae1bccc35" translate="yes" xml:space="preserve">
          <source>This functionality is only provided when using &lt;code&gt;BER&lt;/code&gt; (option &lt;code&gt;ber&lt;/code&gt;).</source>
          <target state="translated">この機能は、 &lt;code&gt;BER&lt;/code&gt; （オプション &lt;code&gt;ber&lt;/code&gt; ）を使用する場合にのみ提供されます。</target>
        </trans-unit>
        <trans-unit id="03d45e2ad58e3bd143a9c7b2c50773493705e610" translate="yes" xml:space="preserve">
          <source>This functionality is used both when the transaction sender is used and for segmentation. So, for either of those to work, this function &lt;strong&gt;must&lt;/strong&gt; be fully supported!</source>
          <target state="translated">この機能は、トランザクション送信者が使用される場合とセグメンテーションの両方で使用されます。したがって、これらのいずれかが機能するに&lt;strong&gt;は&lt;/strong&gt;、この機能が完全にサポートされている&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="018c73d63f139a3baee06c9daba146659fa3ed6c" translate="yes" xml:space="preserve">
          <source>This functionality is used when a client process communicates with a file i/o-server to spread the user tag to the I/O-server and then down to the efile_drv driver. By using &lt;code&gt;spread_tag/1&lt;/code&gt; and &lt;code&gt;restore_tag/1&lt;/code&gt;, one can enable or disable spreading of user tags to other processes and then restore the previous state of the user tag. The TagData returned from this call contains all previous information so the state (including any previously spread user tags) will be completely restored by a later call to &lt;code&gt;restore_tag/1&lt;/code&gt;.</source>
          <target state="translated">この機能は、クライアントプロセスがファイルI / Oサーバーと通信して、ユーザータグをI / Oサーバーに送信し、efile_drvドライバーに送信するときに使用されます。使用して &lt;code&gt;spread_tag/1&lt;/code&gt; 及び &lt;code&gt;restore_tag/1&lt;/code&gt; を、一方が有効または無効に他のプロセスへのユーザータグの広がりと、ユーザタグの前の状態を復元することができます。この呼び出しから返されるTagDataには以前のすべての情報が含まれているため、後で &lt;code&gt;restore_tag/1&lt;/code&gt; を呼び出すと、状態（以前に拡散したユーザータグを含む）が完全に復元されます。</target>
        </trans-unit>
        <trans-unit id="1bfce0af83883f449ffeeed0bed57f3f0c60c686" translate="yes" xml:space="preserve">
          <source>This functionality works together with option &lt;code&gt;ber&lt;/code&gt;. It enables the specialized decodes, see Section &lt;code&gt;&lt;a href=&quot;asn1_spec&quot;&gt;Specialized Decode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この機能はオプション &lt;code&gt;ber&lt;/code&gt; と一緒に機能します。これは、特殊なデコードを可能にし、セクションを参照 &lt;code&gt;&lt;a href=&quot;asn1_spec&quot;&gt;Specialized Decode&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b7b1c65d65cff1e78b722d7d85e687fe5927d13" translate="yes" xml:space="preserve">
          <source>This functions differs from &lt;code&gt;token&lt;/code&gt; in that it will continue to scan tokens upto and including an &lt;code&gt;{end_token,Token}&lt;/code&gt; has been scanned (see next section). It will then return all the tokens. This is typically used for scanning grammars like Erlang where there is an explicit end token, &lt;code&gt;'.'&lt;/code&gt;. If no end token is found then the whole file will be scanned and returned. If an error occurs then all tokens upto and including the next end token will be skipped.</source>
          <target state="translated">この関数は &lt;code&gt;token&lt;/code&gt; とは異なり、 &lt;code&gt;{end_token,Token}&lt;/code&gt; がスキャンされるまでトークンをスキャンし続けます（次のセクションを参照）。その後、すべてのトークンを返します。これは通常、明示的な終了トークン &lt;code&gt;'.'&lt;/code&gt; があるErlangなどの文法をスキャンするために使用されます。。終了トークンが見つからない場合は、ファイル全体がスキャンされて返されます。エラーが発生すると、次の終了トークンまでのすべてのトークンがスキップされます。</target>
        </trans-unit>
        <trans-unit id="e988c48e237b3372b652c8e3639563f7969c8f32" translate="yes" xml:space="preserve">
          <source>This functions is kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_ERROR&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#error-1&quot;&gt;logger:error/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_ERROR&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#error-1&quot;&gt;logger:error/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="e1aa52c0f139d5d8a6f71a168c88c9470f952129" translate="yes" xml:space="preserve">
          <source>This functions is kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_INFO&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#info-1&quot;&gt;logger:info/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_INFO&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#info-1&quot;&gt;logger:info/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="75829b451d464b595a1024dec90085ca0093abce" translate="yes" xml:space="preserve">
          <source>This functions is kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_WARNING&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#warning-1&quot;&gt;logger:warning/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_WARNING&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#warning-1&quot;&gt;logger:warning/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="66d11c99d3b8bf1e2077d0f21b72e0ab032ea87c" translate="yes" xml:space="preserve">
          <source>This functions provides a way of updating a counter, without having to look up an object, update the object by incrementing an element, and insert the resulting object into the table again.</source>
          <target state="translated">この関数は、オブジェクトを調べずにカウンタを更新し、要素をインクリメントしてオブジェクトを更新し、その結果得られたオブジェクトを再度テーブルに挿入する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="2b70ec5aa36c1075bf590864c6a36436ad975b12" translate="yes" xml:space="preserve">
          <source>This generates a &lt;code&gt;relup&lt;/code&gt; file with instructions for how to upgrade from version &quot;A&quot; (&quot;ch_rel-1&quot;) to version &quot;B&quot; (&quot;ch_rel-2&quot;) and how to downgrade from version &quot;B&quot; to version &quot;A&quot;.</source>
          <target state="translated">これにより、バージョン &quot;A&quot;（ &quot;ch_rel-1&quot;）からバージョン &quot;B&quot;（ &quot;ch_rel-2&quot;）にアップグレードする方法と、バージョン &quot;B&quot;からバージョン &quot;A&quot;にダウングレードする方法の手順を含む &lt;code&gt;relup&lt;/code&gt; ファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="c116938db051375fe0e1532d328cb08b14b31015" translate="yes" xml:space="preserve">
          <source>This gives &lt;code&gt;D = 273&lt;/code&gt;, &lt;code&gt;E = 00&lt;/code&gt;, and F binds to a binary of size 1: &lt;code&gt;binary_to_list(F) = [42]&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;D = 273&lt;/code&gt; 、 &lt;code&gt;E = 00&lt;/code&gt; 、およびFがサイズ1のバイナリにバインドされます： &lt;code&gt;binary_to_list(F) = [42]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9b265622dae76f6ead2d5384e91874a0a56b738" translate="yes" xml:space="preserve">
          <source>This gives a binary of size 4. Here, a &lt;strong&gt;size expression&lt;/strong&gt; is used for the variable &lt;code&gt;C&lt;/code&gt; to specify a 16-bits segment of &lt;code&gt;Bin2&lt;/code&gt;.</source>
          <target state="translated">これにより、サイズ4のバイナリが得られます。ここでは、変数 &lt;code&gt;C&lt;/code&gt; に&lt;strong&gt;サイズ式&lt;/strong&gt;を使用して、 &lt;code&gt;Bin2&lt;/code&gt; の 16ビットセグメントを指定しています。</target>
        </trans-unit>
        <trans-unit id="9304ac5067de60ffef75db2d0f27153eea8fd249" translate="yes" xml:space="preserve">
          <source>This gives a set of binary logs, for example:</source>
          <target state="translated">これは、例えば、バイナリログのセットを与えます。</target>
        </trans-unit>
        <trans-unit id="efb5947a696c40715e3fb71363beaeb5efc4f051" translate="yes" xml:space="preserve">
          <source>This gives an entry for &lt;code&gt;m1&lt;/code&gt; also in the cover log for test run &lt;code&gt;s2&lt;/code&gt;. The problem is that this only reflects the coverage by &lt;code&gt;s2&lt;/code&gt; tests, not the accumulated result over &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;. This is where the cross cover mechanism comes in handy.</source>
          <target state="translated">これにより、テスト実行 &lt;code&gt;s2&lt;/code&gt; のカバーログにも &lt;code&gt;m1&lt;/code&gt; のエントリが表示されます。問題は、これが &lt;code&gt;s2&lt;/code&gt; テストによるカバレッジのみを反映し、 &lt;code&gt;s1&lt;/code&gt; および &lt;code&gt;s2&lt;/code&gt; の累積結果を反映しないことです。これは、クロスカバーメカニズムが役に立ちます。</target>
        </trans-unit>
        <trans-unit id="713b4a71335dbed07b61ab42f009c85295637765" translate="yes" xml:space="preserve">
          <source>This gives no result of length &amp;gt; 0 and we are at the last position, so the global search is complete.</source>
          <target state="translated">これは長さ&amp;gt; 0の結果を与えず、最後の位置にいるので、グローバル検索は完了です。</target>
        </trans-unit>
        <trans-unit id="e365e009b84d303f259288c46a5cf1337ae2825c" translate="yes" xml:space="preserve">
          <source>This gives the list of all elements in L1 that are not contained in L2.</source>
          <target state="translated">これは、L1に含まれるすべての要素のうち、L2に含まれない要素のリストを与えます。</target>
        </trans-unit>
        <trans-unit id="79f96c1766aa59b316c1112142e724a0ac8f12f4" translate="yes" xml:space="preserve">
          <source>This gives the same result. &lt;code&gt;[{'&amp;lt;', '$2', 2000}]&lt;/code&gt; is in the guard part and therefore discards anything that does not have an &lt;code&gt;empyear&lt;/code&gt; (bound to &lt;code&gt;'$2'&lt;/code&gt; in the head) less than 2000, as the guard in the &lt;code&gt;foldr/3&lt;/code&gt; example.</source>
          <target state="translated">これは同じ結果になります。 &lt;code&gt;[{'&amp;lt;', '$2', 2000}]&lt;/code&gt; はガード部分にあるため、 &lt;code&gt;empyear&lt;/code&gt; &lt;code&gt;foldr/3&lt;/code&gt; ガードとして、2000未満のエンプイヤー（ヘッドの &lt;code&gt;'$2'&lt;/code&gt; にバインド）がないものはすべて破棄します例。</target>
        </trans-unit>
        <trans-unit id="22d1dda5ab8530e1e0b433f6ea95f6b6b7eda6d3" translate="yes" xml:space="preserve">
          <source>This gives two binaries of size 3, with the following evaluations:</source>
          <target state="translated">これにより、サイズ3のバイナリが2つ与えられ、以下の評価が得られます。</target>
        </trans-unit>
        <trans-unit id="5bdfea051354f0bf5fa426336e15ae7b72111a2a" translate="yes" xml:space="preserve">
          <source>This grammar can be used to generate a parser which parses list expressions, such as &lt;code&gt;(), (a), (peter charles), (a (b c) d (())), ...&lt;/code&gt; provided that your scanner tokenizes, for example, the input &lt;code&gt;(peter charles)&lt;/code&gt; as follows:</source>
          <target state="translated">この文法は、次のようなリスト式、構文解析するパーサを生成するために使用することができ &lt;code&gt;(), (a), (peter charles), (a (b c) d (())), ...&lt;/code&gt; のために、お使いのスキャナのトークン化することを提供します例として、次のような入力 &lt;code&gt;(peter charles)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c5c33f8292424d5d8afd6fb208cfbfa703f594e5" translate="yes" xml:space="preserve">
          <source>This handler behaves much like &lt;code&gt;logger_std_h&lt;/code&gt;, except it uses &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; as its destination.</source>
          <target state="translated">このハンドラーは、宛先として &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; を使用することを除いて、 &lt;code&gt;logger_std_h&lt;/code&gt; とほとんど同じように動作します。</target>
        </trans-unit>
        <trans-unit id="dcaca3a309669115a5d10a160b27e110b7d53cd4" translate="yes" xml:space="preserve">
          <source>This handler ignores events that do not originate from the &lt;code&gt;error_logger&lt;/code&gt; API, or from within OTP. This means that if your code uses the Logger API for logging, then your log events will be discarded by this handler.</source>
          <target state="translated">このハンドラーは、 &lt;code&gt;error_logger&lt;/code&gt; APIまたはOTP内から発生していないイベントを無視します。これは、コードがロギングにLogger APIを使用する場合、ログイベントはこのハンドラーによって破棄されることを意味します。</target>
        </trans-unit>
        <trans-unit id="29807c3684400c3becd59e5edf9ba096157cab01" translate="yes" xml:space="preserve">
          <source>This handler is provided for backwards compatibility only. It is not started by default, but will be automatically started the first time an &lt;code&gt;error_logger&lt;/code&gt; event handler is added with &lt;code&gt;&lt;a href=&quot;error_logger#add_report_handler-1&quot;&gt;error_logger:add_report_handler/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このハンドラーは、下位​​互換性のためにのみ提供されています。デフォルトでは開始されませんが、 &lt;code&gt;&lt;a href=&quot;error_logger#add_report_handler-1&quot;&gt;error_logger:add_report_handler/1,2&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;error_logger&lt;/code&gt; イベントハンドラーが初めて追加されたときに自動的に開始されます。</target>
        </trans-unit>
        <trans-unit id="87e5ec8533eb6addfe606eccdf0a8555b2e81bc0" translate="yes" xml:space="preserve">
          <source>This has the same effect as setting option &lt;code&gt;ucp&lt;/code&gt;: it causes sequences such as \d and \w to use Unicode properties to determine character types, instead of recognizing only characters with codes &amp;lt; 256 through a lookup table.</source>
          <target state="translated">これは、オプション &lt;code&gt;ucp&lt;/code&gt; を設定するのと同じ効果があります。これにより、\ dや\ wなどのシーケンスは、ルックアップテーブルでコードが256未満の文字のみを認識するのではなく、Unicodeプロパティを使用して文字タイプを決定します。</target>
        </trans-unit>
        <trans-unit id="0c156c0c2fc33946d9fbadad8702601855c80e09" translate="yes" xml:space="preserve">
          <source>This has the same effect as the above, &lt;strong&gt;if and only if&lt;/strong&gt; megaco has sent at least one pending message for this request (during the processing of the request). If no pending message has been sent, then immediate acknowledgement will &lt;strong&gt;not&lt;/strong&gt; be requested.</source>
          <target state="translated">これは、megacoがこの要求に対して少なくとも1つの保留メッセージを送信した&lt;strong&gt;場合&lt;/strong&gt;（要求の処理中）に&lt;strong&gt;限り&lt;/strong&gt;、上記と同じ効果があります。保留中のメッセージが送信されていない場合、即時の確認は要求され&lt;strong&gt;ませ&lt;/strong&gt;ん。</target>
        </trans-unit>
        <trans-unit id="4ede3cfedbb971a104b9a8ef6799913490ca75be" translate="yes" xml:space="preserve">
          <source>This has the same effect as the following:</source>
          <target state="translated">と同様の効果があります。</target>
        </trans-unit>
        <trans-unit id="e0d90b246b1198d103c86bc16c013de08162e8ce" translate="yes" xml:space="preserve">
          <source>This has the value &lt;code&gt;standard_io&lt;/code&gt;, &lt;code&gt;standard_error&lt;/code&gt;, &lt;code&gt;{file,LogFileName}&lt;/code&gt;, or &lt;code&gt;{file,LogFileName,LogFileOpts}&lt;/code&gt;.</source>
          <target state="translated">これには、値 &lt;code&gt;standard_io&lt;/code&gt; 、 &lt;code&gt;standard_error&lt;/code&gt; 、 &lt;code&gt;{file,LogFileName}&lt;/code&gt; 、または &lt;code&gt;{file,LogFileName,LogFileOpts}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="fa9ae8726a4cc0244638ba67ad2025c382e5beef" translate="yes" xml:space="preserve">
          <source>This implementation-dependent function increments the reduction counter for the calling process. In the Beam emulator, the reduction counter is normally incremented by one for each function and BIF call. A context switch is forced when the counter reaches the maximum number of reductions for a process (2000 reductions in Erlang/OTP R12B).</source>
          <target state="translated">この関数は、呼び出したプロセスのリダクション・カウンタをインクリメントする。Beamエミュレータでは、通常は関数とBIFコールごとにカウンタが1ずつインクリメントされます。カウンタがプロセスの最大削減数(Erlang/OTP R12Bでは2000削減)に達するとコンテキストスイッチが入る。</target>
        </trans-unit>
        <trans-unit id="a8d3c24a386f367f78241d2e4bac7b7d69305c8c" translate="yes" xml:space="preserve">
          <source>This implies that for an included application, the set of start phases must be a subset of the set of phases defined for the primary application. For more information, see &lt;code&gt;OTP Design Principles&lt;/code&gt;.</source>
          <target state="translated">これは、含まれるアプリケーションの場合、開始フェーズのセットは、プライマリアプリケーションに対して定義されたフェーズのセットのサブセットでなければならないことを意味します。詳細については、 &lt;code&gt;OTP Design Principles&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="60cc03c618eaaba02c392d8b6d5e3541aa6478d4" translate="yes" xml:space="preserve">
          <source>This index is used to separate the implementation of the SNMP ordering from the actual implementation of the table. The SNMP ordering, that is implementation of GET NEXT, is implemented in this module.</source>
          <target state="translated">このインデックスは、SNMP 順序の実装と実際のテーブルの実装を分離するために使用されます。このモジュールでは、GET NEXTの実装であるSNMP順序が実装されています。</target>
        </trans-unit>
        <trans-unit id="4da9986920c604b316098093467baaddac2eb487" translate="yes" xml:space="preserve">
          <source>This indicates that the variable &lt;code&gt;File&lt;/code&gt;, which is defined inside the fun, collides with the variable &lt;code&gt;File&lt;/code&gt;, which is defined outside the fun.</source>
          <target state="translated">これは変数ことを示している &lt;code&gt;File&lt;/code&gt; の楽しみ内で定義され、変数に衝突 &lt;code&gt;File&lt;/code&gt; 楽しく外で定義され、。</target>
        </trans-unit>
        <trans-unit id="cfea72aa373ef570cea99287f1170facd64d6eef" translate="yes" xml:space="preserve">
          <source>This inform the user which target addresses the notification was sent to.</source>
          <target state="translated">これは、通知が送信されたターゲットアドレスをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="0d129bafd72948232df4b45a85096033eb4d3888" translate="yes" xml:space="preserve">
          <source>This information can be invalid for some implementations.</source>
          <target state="translated">この情報は、一部の実装では無効になる場合があります。</target>
        </trans-unit>
        <trans-unit id="7aae2c9ba176a7a3f9d606f61a083bbbedd09c9d" translate="yes" xml:space="preserve">
          <source>This information can be produced by the functions &lt;code&gt;&lt;a href=&quot;#user_info&quot;&gt;user_info&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#conn_info&quot;&gt;conn_info&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#system_info&quot;&gt;system_info&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_stats&quot;&gt;get_stats&lt;/a&gt;&lt;/code&gt; but this is a simple way to get it all at once.</source>
          <target state="translated">この情報は、機能することにより製造することができる &lt;code&gt;&lt;a href=&quot;#user_info&quot;&gt;user_info&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#conn_info&quot;&gt;conn_info&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#system_info&quot;&gt;system_info&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#get_stats&quot;&gt;get_stats&lt;/a&gt;&lt;/code&gt; が、これは、すべて一度にそれを得るための簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="710dd978424ecc04fc2bf1003714cbd1fde00ea0" translate="yes" xml:space="preserve">
          <source>This information can be retrieved using &lt;code&gt;&lt;a href=&quot;megaco#conn_info&quot;&gt;megaco:conn_info&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、 &lt;code&gt;&lt;a href=&quot;megaco#conn_info&quot;&gt;megaco:conn_info&lt;/a&gt;&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="61fde3bec5255dca0919656dc9b966cbee0da75a" translate="yes" xml:space="preserve">
          <source>This information can be retrieved using &lt;code&gt;&lt;a href=&quot;megaco#system_info&quot;&gt;megaco:system_info&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、 &lt;code&gt;&lt;a href=&quot;megaco#system_info&quot;&gt;megaco:system_info&lt;/a&gt;&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="eaf22384b8506971667ec0cacf5790e4084dc39b" translate="yes" xml:space="preserve">
          <source>This information can be retrieved using &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;megaco:user_info&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、 &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;megaco:user_info&lt;/a&gt;&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="962a2ecfcacf4f2ae7569863ad3b0745fd8bd9b5" translate="yes" xml:space="preserve">
          <source>This information can be used to traverse the chain of function calls, using the &lt;strong&gt;Up&lt;/strong&gt; and &lt;strong&gt;Down&lt;/strong&gt; buttons in the &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process window&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報を使用して、[ &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process window&lt;/a&gt;&lt;/code&gt; [ &lt;strong&gt;Up]&lt;/strong&gt;ボタンと[ &lt;strong&gt;Down]&lt;/strong&gt;ボタンを使用して、関数呼び出しのチェーンをトラバースできます。</target>
        </trans-unit>
        <trans-unit id="9a325aae80341287a8eab869857564f9b28b86fd" translate="yes" xml:space="preserve">
          <source>This information is used by the release handler during upgrades and downgrades, see &lt;code&gt;&lt;a href=&quot;release_handling&quot;&gt;Release Handling&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、アップグレードおよびダウングレード中にリリースハンドラーによって使用されます。「 &lt;code&gt;&lt;a href=&quot;release_handling&quot;&gt;Release Handling&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="201452c6ed23592af55381e4e0078166857bb6b2" translate="yes" xml:space="preserve">
          <source>This information is useful when an external entity (for example, an IDE) provides additional code for a running node. If the code server is in interactive mode, it only has to add the path to the code. If the code server is in embedded mode, the code must be loaded with &lt;code&gt;&lt;a href=&quot;#load_binary-3&quot;&gt;load_binary/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、外部エンティティ（IDEなど）が実行中のノードに追加のコードを提供する場合に役立ちます。コードサーバーがインタラクティブモードの場合、コードへのパスを追加するだけです。コードサーバーが埋め込みモードの場合、コードは &lt;code&gt;&lt;a href=&quot;#load_binary-3&quot;&gt;load_binary/3&lt;/a&gt;&lt;/code&gt; でロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="5a8323563f351cf2bca8245a5765d1e7287f26f8" translate="yes" xml:space="preserve">
          <source>This informs the user that this target address acknowledged the notification.</source>
          <target state="translated">これは、このターゲットアドレスが通知を承認したことをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="1baf8ed33916a0e4003152e45bbc117558b69aff" translate="yes" xml:space="preserve">
          <source>This informs the user that this target address did not acknowledge notification.</source>
          <target state="translated">これは、このターゲットアドレスが通知を承認しなかったことをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="e9c0fbf4edafb48f201f8b1170f9bfbfe552c23a" translate="yes" xml:space="preserve">
          <source>This informs the user that this target address did not acknowledge the notification.</source>
          <target state="translated">これは、このターゲットアドレスが通知を承認しなかったことをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="083ac1279739f945b13a461e8bb4339d8dfde4a8" translate="yes" xml:space="preserve">
          <source>This informs the user which target addresses the notification was sent to.</source>
          <target state="translated">これは、通知が送信されたターゲットアドレスをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="d7e452d2d7924302fbdea18276d798ae79408dc5" translate="yes" xml:space="preserve">
          <source>This instruction is not related to upgrades of ERTS or any of the core applications. It can be used by any application to force a restart of the emulator after all upgrade instructions are executed.</source>
          <target state="translated">この命令は ERTS やコアアプリケーションのアップグレードには関係ありません。これは、すべてのアップグレード命令が実行された後にエミュレータを強制的に再起動するために、任意のアプリケーションで使用することができます。</target>
        </trans-unit>
        <trans-unit id="b27e8eb36b131c032f8c3fba207f37d792a31d2a" translate="yes" xml:space="preserve">
          <source>This instruction is similar to &lt;code&gt;restart_new_emulator&lt;/code&gt;, except it must be placed at the end of the &lt;code&gt;relup&lt;/code&gt; file. It is not related to an upgrade of the emulator or the core applications, but can be used by any application when a complete reboot of the system is required.</source>
          <target state="translated">この命令は、 &lt;code&gt;relup&lt;/code&gt; ファイルの最後に配置する必要があることを除いて、 &lt;code&gt;restart_new_emulator&lt;/code&gt; と似ています。エミュレータやコアアプリケーションのアップグレードとは関係ありませんが、システムの完全な再起動が必要な場合は、どのアプリケーションでも使用できます。</target>
        </trans-unit>
        <trans-unit id="4e2ff5aadab857bef7cc042cfddbfd7f94365d61" translate="yes" xml:space="preserve">
          <source>This instruction is used when changing to a new emulator version, or when any of the core applications Kernel, STDLIB, or SASL is upgraded. If a system reboot is needed for another reason, the &lt;code&gt;restart_emulator&lt;/code&gt; instruction is to be used instead.</source>
          <target state="translated">この命令は、新しいエミュレータバージョンに変更するとき、またはコアアプリケーションのカーネル、STDLIB、またはSASLのいずれかがアップグレードされるときに使用されます。別の理由でシステムの再起動が必要な場合は、代わりに &lt;code&gt;restart_emulator&lt;/code&gt; 命令を使用します。</target>
        </trans-unit>
        <trans-unit id="538ffcc030d6ff15bd0bfff773ddaca2d61087a9" translate="yes" xml:space="preserve">
          <source>This instruction is used when the application ERTS, Kernel, STDLIB, or SASL is upgraded. It shuts down the current emulator and starts a new one. All processes are terminated gracefully, and the new version of ERTS, Kernel, STDLIB, and SASL are used when the emulator restarts. Only one &lt;code&gt;restart_new_emulator&lt;/code&gt; instruction is allowed in the &lt;code&gt;relup&lt;/code&gt; file, and it must be placed first. &lt;code&gt;&lt;a href=&quot;systools#make_relup-3&quot;&gt;systools:make_relup/3,4&lt;/a&gt;&lt;/code&gt; ensures this when the &lt;code&gt;relup&lt;/code&gt; file is generated. The rest of the instructions in the &lt;code&gt;relup&lt;/code&gt; file is executed after the restart as a part of the boot script.</source>
          <target state="translated">この命令は、アプリケーションERTS、カーネル、STDLIB、またはSASLがアップグレードされるときに使用されます。現在のエミュレータをシャットダウンし、新しいエミュレータを起動します。すべてのプロセスは正常に終了し、エミュレーターの再起動時にERTS、カーネル、STDLIB、およびSASLの新しいバージョンが使用されます。一つだけ &lt;code&gt;restart_new_emulator&lt;/code&gt; の命令がで許可され &lt;code&gt;relup&lt;/code&gt; のファイル、およびそれが最初に配置する必要があります。 &lt;code&gt;&lt;a href=&quot;systools#make_relup-3&quot;&gt;systools:make_relup/3,4&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;relup&lt;/code&gt; ファイルが生成されるときにこれを保証します。 &lt;code&gt;relup&lt;/code&gt; ファイルの残りの命令は、再起動後にブートスクリプトの一部として実行されます。</target>
        </trans-unit>
        <trans-unit id="395215bf28142de440c81ef55b87f4169a80aec6" translate="yes" xml:space="preserve">
          <source>This instruction is written in the configuration file in the following format:</source>
          <target state="translated">この命令は、以下の形式で設定ファイルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="45862ec3de83aecdeb3f0430fc20ad3e86777590" translate="yes" xml:space="preserve">
          <source>This instruction requires that the system is started with heartbeat monitoring, see the &lt;code&gt;erl(1)&lt;/code&gt; manual page in ERTS and the &lt;code&gt;heart(3)&lt;/code&gt; manual page in Kernel.</source>
          <target state="translated">この命令では、システムがハートビートモニタリングで起動されている必要があります。ERTSの &lt;code&gt;erl(1)&lt;/code&gt; マニュアルページおよびカーネルの &lt;code&gt;heart(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="eb9abbefd34b9022f0d676607ac6737850a70742" translate="yes" xml:space="preserve">
          <source>This instruction synchronizes the release installation with other nodes. Each &lt;code&gt;Node&lt;/code&gt; must evaluate this command with the same &lt;code&gt;Id&lt;/code&gt;. The local node waits for all other nodes to evaluate the instruction before execution continues. If a node goes down, it is considered to be an unrecoverable error, and the local node is restarted from the old release. There is no time-out for this instruction, which means that it can hang forever.</source>
          <target state="translated">この命令は、リリースのインストールを他のノードと同期します。各 &lt;code&gt;Node&lt;/code&gt; はこのコマンドを同じ &lt;code&gt;Id&lt;/code&gt; で評価する必要があります。ローカルノードは、実行が続行する前に、他のすべてのノードが命令を評価するのを待ちます。ノードがダウンした場合、それは回復不能なエラーと見なされ、ローカルノードは古いリリースから再起動されます。この命令にはタイムアウトはありません。つまり、永久にハングアップする可能性があります。</target>
        </trans-unit>
        <trans-unit id="72381508b412cca34ddf14083712fc31b9f93e31" translate="yes" xml:space="preserve">
          <source>This interface (or at least the name of the functions) is kept for backward compatibility. Using &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;{driver_options,[kill_ports]}&lt;/code&gt; in the option list gives the same effect regarding the port killing.</source>
          <target state="translated">このインターフェイス（または少なくとも関数の名前）は、下位互換性のために保持されています。オプションリストの &lt;code&gt;{driver_options,[kill_ports]}&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; を使用すると、ポートの強制終了に関して同じ効果が得られます。</target>
        </trans-unit>
        <trans-unit id="986a779296a267e9889a055a42330bfd68321abf" translate="yes" xml:space="preserve">
          <source>This internal event is used by the &lt;code&gt;Common Test&lt;/code&gt; Master process to synchronize particular file operations.</source>
          <target state="translated">この内部イベントは、 &lt;code&gt;Common Test&lt;/code&gt; Masterプロセスが特定のファイル操作を同期するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c34c80ee3e756933a25868fd55ba9046da3c1c47" translate="yes" xml:space="preserve">
          <source>This internal event says that &lt;code&gt;Common Test&lt;/code&gt; is finished compiling modules in directory &lt;code&gt;Dir&lt;/code&gt;.</source>
          <target state="translated">この内部イベントは、 &lt;code&gt;Common Test&lt;/code&gt; がディレクトリ &lt;code&gt;Dir&lt;/code&gt; 内のモジュールのコンパイルを完了したことを示しています。</target>
        </trans-unit>
        <trans-unit id="19fd863c53f0cce4ca256baeac321a61b8c0e924" translate="yes" xml:space="preserve">
          <source>This internal event says that &lt;code&gt;Common Test&lt;/code&gt; starts compiling modules in directory &lt;code&gt;Dir&lt;/code&gt;.</source>
          <target state="translated">この内部イベントは、 &lt;code&gt;Common Test&lt;/code&gt; がディレクトリ &lt;code&gt;Dir&lt;/code&gt; でモジュールのコンパイルを開始することを示しています。</target>
        </trans-unit>
        <trans-unit id="918379111cbe178fe4429e0dda42e1bb45186e43" translate="yes" xml:space="preserve">
          <source>This internal name cannot be changed, it is fixed even if the service is renamed. &lt;code&gt;erlsrv&lt;/code&gt; generates a unique internal name when a service is created. It is recommended to keep to the default if release handling is to be used for the application.</source>
          <target state="translated">この内部名は変更できません。サービスの名前を変更しても固定されています。 &lt;code&gt;erlsrv&lt;/code&gt; は、サービスの作成時に固有の内部名を生成します。アプリケーションでリリース処理を使用する場合は、デフォルトのままにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1c853aa37495f77100d3057f3fa259e2e5e59b2e" translate="yes" xml:space="preserve">
          <source>This is 86 % of the total run time, and as we saw before it is the close operation the absolutely biggest contributor. We find a comparison ratio a little bit up in the call stack:</source>
          <target state="translated">これは全体の実行時間の86%を占めていますが、前に見たように、クローズ操作が絶対的に大きな貢献をしています。呼び出しスタックの少し上に比較比率があります。</target>
        </trans-unit>
        <trans-unit id="e9ef9e4644f03eaf56584c4a5bfb4c37698548ad" translate="yes" xml:space="preserve">
          <source>This is a 4-component structure called &lt;code&gt;Pdu&lt;/code&gt;. By default, a &lt;code&gt;SEQUENCE&lt;/code&gt; is represented by a record in Erlang. It can also be represented as a map; see &lt;code&gt;&lt;a href=&quot;asn1_getting_started#MAP_SEQ_SET&quot;&gt;Map representation for SEQUENCE and SET&lt;/a&gt;&lt;/code&gt;. For each &lt;code&gt;SEQUENCE&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; in an ASN.1 module an Erlang record declaration is generated. For &lt;code&gt;Pdu&lt;/code&gt;, a record like the following is defined:</source>
          <target state="translated">これは &lt;code&gt;Pdu&lt;/code&gt; と呼ばれる4コンポーネント構造です。デフォルトでは、 &lt;code&gt;SEQUENCE&lt;/code&gt; はErlangのレコードで表されます。マップとして表すこともできます。 &lt;code&gt;&lt;a href=&quot;asn1_getting_started#MAP_SEQ_SET&quot;&gt;Map representation for SEQUENCE and SET&lt;/a&gt;&lt;/code&gt; 参照してください。ASN.1モジュールの &lt;code&gt;SEQUENCE&lt;/code&gt; および &lt;code&gt;SET&lt;/code&gt; ごとに、Erlangレコード宣言が生成されます。以下のために &lt;code&gt;Pdu&lt;/code&gt; 、次のようなレコードが定義されています。</target>
        </trans-unit>
        <trans-unit id="fccf5d389b6bb13934731f8a21547b98c0616cd1" translate="yes" xml:space="preserve">
          <source>This is a &lt;code&gt;&lt;a href=&quot;time_correction#Monotonically_Increasing&quot;&gt;monotonically increasing&lt;/a&gt;&lt;/code&gt; time, but &lt;strong&gt;not&lt;/strong&gt; a &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt;strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; time. That is, consecutive calls to &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; can produce the same result.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;time_correction#Monotonically_Increasing&quot;&gt;monotonically increasing&lt;/a&gt;&lt;/code&gt; 時間ですが、 &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt;strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; 時間で&lt;strong&gt;はありません&lt;/strong&gt;。つまり、 &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; を連続して呼び出しても同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="3e773a13c08b29bd1b0b27e610e6a3ca5907aef0" translate="yes" xml:space="preserve">
          <source>This is a callback function intended to be invoked by some transport modules when get an incoming message. Which transport that actually is used is up to the user to choose.</source>
          <target state="translated">これは、着信メッセージを取得したときに、いくつかのトランスポートモジュールによって 呼び出されることを意図したコールバック関数である。実際にどのトランスポートを使うかはユーザの選択次第です。</target>
        </trans-unit>
        <trans-unit id="6aaabdad85afb5297ef14e644ed60c642bdf1f64" translate="yes" xml:space="preserve">
          <source>This is a change from signed to unsigned. This can cause problems for, for example, loop termination conditions and error conditions if you only change the types all over the place.</source>
          <target state="translated">符号付きから符号なしへの変更です。これは、型だけを一律に変更すると、例えばループの終了条件やエラー条件などで問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3196a6c5d44daf25b6d6681360eca21c5be5b270" translate="yes" xml:space="preserve">
          <source>This is a common error in test suites. It is assumed that the current directory is the same as the author used as current directory when the test case was developed. Many test cases even try to write scratch files to this directory. Instead &lt;code&gt;data_dir&lt;/code&gt; and &lt;code&gt;priv_dir&lt;/code&gt; are to be used to locate data and for writing scratch files.</source>
          <target state="translated">これは、テストスイートでよくあるエラーです。現在のディレクトリは、テストケースの開発時に現在のディレクトリとして使用された作成者と同じであると想定されています。多くのテストケースでは、このディレクトリにスクラッチファイルを書き込もうとします。代わりに、 &lt;code&gt;data_dir&lt;/code&gt; と &lt;code&gt;priv_dir&lt;/code&gt; を使用して、データを検索し、スクラッチファイルを書き込みます。</target>
        </trans-unit>
        <trans-unit id="360f48fae93411aaa84a534df910e9385d6dd358" translate="yes" xml:space="preserve">
          <source>This is a corrected version of the previous default algorithm, that now has been superseded by Xoroshiro116+ (&lt;code&gt;exrop&lt;/code&gt;). Since there is no native 58 bit rotate instruction this algorithm executes a little (say &amp;lt; 15%) faster than &lt;code&gt;exrop&lt;/code&gt;. See the &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt;algorithms' homepage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは以前のデフォルトアルゴリズムの修正バージョンであり、現在Xoroshiro116 +（ &lt;code&gt;exrop&lt;/code&gt; ）に置き換えられています。ネイティブの58ビット回転命令がないため、このアルゴリズムは &lt;code&gt;exrop&lt;/code&gt; よりも少し（たとえば15％未満）速く実行されます。 &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt;algorithms' homepage&lt;/a&gt;&lt;/code&gt; ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ab7aa23baa63f4887daf2bf3feb0b72e5a926fef" translate="yes" xml:space="preserve">
          <source>This is a dangerous feature that must be used with care. By unintentional mixing of directories, you can easily end up with an inconsistent database, if the same backup is installed on more than one directory.</source>
          <target state="translated">これは、注意して使用しなければならない危険な機能です。同じバックアップが複数のディレクトリにインストールされている場合、意図せずにディレクトリが混ざってしまうことで、不整合なデータベースになってしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="00205e610ec0a95f3eebcf63dbbba8372b336cc5" translate="yes" xml:space="preserve">
          <source>This is a handler for Logger that offers circular (wrapped) logs by using &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt;. Multiple instances of this handler can be added to Logger, and each instance prints to its own disk log file, created with the name and settings specified in the handler configuration.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; を使用して循環（ラップ）ログを提供するLoggerのハンドラーです。このハンドラーの複数のインスタンスをロガーに追加でき、各インスタンスは、ハンドラー構成で指定された名前と設定で作成された独自のディスクログファイルに出力します。</target>
        </trans-unit>
        <trans-unit id="f1702c7d8fabc70bf82459bbec9093c02074634c" translate="yes" xml:space="preserve">
          <source>This is a large reference document. For casual use of this module, and for most real world applications, the descriptions of functions &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#unload-1&quot;&gt;unload/1&lt;/a&gt;&lt;/code&gt; are enough to getting started.</source>
          <target state="translated">これは大きな参照ドキュメントです。このモジュールをカジュアルに使用する場合、およびほとんどの実際のアプリケーションでは、関数 &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#unload-1&quot;&gt;unload/1&lt;/a&gt;&lt;/code&gt; の説明で開始できます。</target>
        </trans-unit>
        <trans-unit id="bfe64ae08d8239e916a24e614514fb557dd71251" translate="yes" xml:space="preserve">
          <source>This is a normal Erlang/OTP application descriptor, as found in an &lt;code&gt;.app&lt;/code&gt; file. The resulting test set consists of the modules listed in the &lt;code&gt;modules&lt;/code&gt; entry in &lt;code&gt;Info&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;.app&lt;/code&gt; ファイルにある通常のErlang / OTPアプリケーション記述子です。結果のテストセットは、 &lt;code&gt;Info&lt;/code&gt; の &lt;code&gt;modules&lt;/code&gt; エントリにリストされているモジュールで構成されています。</target>
        </trans-unit>
        <trans-unit id="cc0886c68b7d31b43eac50f2f501f0e29c21db91" translate="yes" xml:space="preserve">
          <source>This is a normal, healthy, return value if the call was just placed to inform the emulator that you have no further use of the driver. It is the most common return value in the most common &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;scenario&lt;/a&gt;&lt;/code&gt; described in the introduction.</source>
          <target state="translated">ドライバーをこれ以上使用しないことをエミュレーターに通知するために呼び出しが行われた場合、これは通常の正常な戻り値です。 &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;scenario&lt;/a&gt;&lt;/code&gt; 説明されている最も一般的なシナリオで最も一般的な戻り値です。</target>
        </trans-unit>
        <trans-unit id="a74b91a12c8bd155dd6272fb26f51914a5b6669f" translate="yes" xml:space="preserve">
          <source>This is a re-entrant call to try and scan one token from &lt;code&gt;Chars&lt;/code&gt;. If there are enough characters in &lt;code&gt;Chars&lt;/code&gt; to either scan a token or detect an error then this will be returned with &lt;code&gt;{done,...}&lt;/code&gt;. Otherwise &lt;code&gt;{cont,Cont}&lt;/code&gt; will be returned where &lt;code&gt;Cont&lt;/code&gt; is used in the next call to &lt;code&gt;token()&lt;/code&gt; with more characters to try an scan the token. This is continued until a token has been scanned. &lt;code&gt;Cont&lt;/code&gt; is initially &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;Chars&lt;/code&gt; から1つのトークンをスキャンするための再入可能な呼び出しです。 &lt;code&gt;Chars&lt;/code&gt; にトークンをスキャンするかエラーを検出するのに十分な文字がある場合、これは &lt;code&gt;{done,...}&lt;/code&gt; で返されます。そうでなければ &lt;code&gt;{cont,Cont}&lt;/code&gt; ここで返される &lt;code&gt;Cont&lt;/code&gt; 次の呼び出しで使用される &lt;code&gt;token()&lt;/code&gt; トークンをスキャンしようとするとそれ以上の文字。これは、トークンがスキャンされるまで続けられます。 &lt;code&gt;Cont&lt;/code&gt; は最初は &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dd5f47604323fa85263c477df2f49651a6e3df8c" translate="yes" xml:space="preserve">
          <source>This is a re-entrant call to try and scan tokens from &lt;code&gt;Chars&lt;/code&gt;. If there are enough characters in &lt;code&gt;Chars&lt;/code&gt; to either scan tokens or detect an error then this will be returned with &lt;code&gt;{done,...}&lt;/code&gt;. Otherwise &lt;code&gt;{cont,Cont}&lt;/code&gt; will be returned where &lt;code&gt;Cont&lt;/code&gt; is used in the next call to &lt;code&gt;tokens()&lt;/code&gt; with more characters to try an scan the tokens. This is continued until all tokens have been scanned. &lt;code&gt;Cont&lt;/code&gt; is initially &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;Chars&lt;/code&gt; からトークンをスキャンするための再入可能な呼び出しです。 &lt;code&gt;Chars&lt;/code&gt; にトークンをスキャンするかエラーを検出するのに十分な文字がある場合、これは &lt;code&gt;{done,...}&lt;/code&gt; で返されます。それ以外の場合、 &lt;code&gt;{cont,Cont}&lt;/code&gt; が返されます &lt;code&gt;Cont&lt;/code&gt; は、 &lt;code&gt;tokens()&lt;/code&gt; への次の呼び出しで使用され、トークンをスキャンするためにさらに多くの文字を使用します。これは、すべてのトークンがスキャンされるまで続けられます。 &lt;code&gt;Cont&lt;/code&gt; は最初は &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ed7d83881b92d8f8849b160af3bcd9a10b096707" translate="yes" xml:space="preserve">
          <source>This is a short form for both &lt;code&gt;report_errors&lt;/code&gt; and &lt;code&gt;report_warnings&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;report_errors&lt;/code&gt; と &lt;code&gt;report_warnings&lt;/code&gt; の両方の短い形式です。</target>
        </trans-unit>
        <trans-unit id="274dc8f24a407d0b1cda6dac95a4fedcd1f99a11" translate="yes" xml:space="preserve">
          <source>This is a short form for both &lt;code&gt;return_errors&lt;/code&gt; and &lt;code&gt;return_warnings&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;return_errors&lt;/code&gt; と &lt;code&gt;return_warnings&lt;/code&gt; の両方の短い形式です。</target>
        </trans-unit>
        <trans-unit id="b415593166c4a9ddd5fa9eb4f27a156aba749468" translate="yes" xml:space="preserve">
          <source>This is a simple example of starting the TFTP server and reading the content of a sample file using the TFTP client.</source>
          <target state="translated">TFTPサーバを起動し、TFTPクライアントを使用してサンプルファイルの内容を読み取る簡単な例です。</target>
        </trans-unit>
        <trans-unit id="808da979a84710e3348d8f0999feea04935b391f" translate="yes" xml:space="preserve">
          <source>This is a slight modification of the ping pong program where both processes are spawned from the same &lt;code&gt;start/1&lt;/code&gt; function, and the &quot;ping&quot; process can be spawned on a separate node. Notice the use of the &lt;code&gt;link&lt;/code&gt; BIF. &quot;Ping&quot; calls &lt;code&gt;exit(ping)&lt;/code&gt; when it finishes and this causes an exit signal to be sent to &quot;pong&quot;, which also terminates.</source>
          <target state="translated">これは、両方のプロセスが同じ &lt;code&gt;start/1&lt;/code&gt; 関数から生成されるping pongプログラムのわずかな変更であり、「ping」プロセスは別のノードで生成できます。 &lt;code&gt;link&lt;/code&gt; BIFの使用に注意してください。「Ping」は &lt;code&gt;exit(ping)&lt;/code&gt; 時にexit（ping）を呼び出し、これにより終了信号が「pong」に送信され、「pong」も終了します。</target>
        </trans-unit>
        <trans-unit id="73a9a1cddaa9852a0011d5e8ce12699ed0d05497" translate="yes" xml:space="preserve">
          <source>This is a so-called Erlang I/O ErrorInfo structure; see the &lt;code&gt;io(3)&lt;/code&gt; module for details.</source>
          <target state="translated">これはいわゆるErlang I / O ErrorInfo構造です。詳細については、 &lt;code&gt;io(3)&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="e343f368517e25b67cf5e58932e33d7c4ed349a4" translate="yes" xml:space="preserve">
          <source>This is a standard macro (that is, defined by the system, not by the user). &lt;code&gt;?MODULE&lt;/code&gt; is always replaced by the name of the current module (that is, the &lt;code&gt;-module&lt;/code&gt; definition near the start of the file). There are more advanced ways of using macros with, for example, parameters (*manual*).</source>
          <target state="translated">これは標準マクロです（つまり、ユーザーではなくシステムによって定義されます）。 &lt;code&gt;?MODULE&lt;/code&gt; は常に現在のモジュールの名前に置き換えられます（つまり、ファイルの先頭近くの &lt;code&gt;-module&lt;/code&gt; 定義）。たとえば、パラメーター（*手動*）でマクロを使用するより高度な方法があります。</target>
        </trans-unit>
        <trans-unit id="69b7150a1e2635ac10627a958161be921d3a386e" translate="yes" xml:space="preserve">
          <source>This is a statistics event with current count of successful, skipped, and failed test cases so far. This event is sent after the end of each test case, immediately following event &lt;code&gt;tc_done&lt;/code&gt;.</source>
          <target state="translated">これは、これまでの成功、スキップ、および失敗したテストケースの現在の数を含む統計イベントです。このイベントは、各テストケースの終了後、イベント &lt;code&gt;tc_done&lt;/code&gt; の直後に送信されます。</target>
        </trans-unit>
        <trans-unit id="398909e587f906e89bc126a8eb8fdfd6b8204296" translate="yes" xml:space="preserve">
          <source>This is a useful debugging and test tool, especially when writing complicated &lt;code&gt;select/2&lt;/code&gt; calls.</source>
          <target state="translated">これは、特に複雑な &lt;code&gt;select/2&lt;/code&gt; 呼び出しを記述する場合に便利なデバッグおよびテストツールです。</target>
        </trans-unit>
        <trans-unit id="ef77778e97bbcd3de76e5cb922449c0969559f39" translate="yes" xml:space="preserve">
          <source>This is a useful debugging and test tool, especially when writing complicated match specifications.</source>
          <target state="translated">特に複雑なマッチ仕様を書くときに便利なデバッグ・テストツールです。</target>
        </trans-unit>
        <trans-unit id="cc0b0332cdc379fcfaab7b7f81af77dfd65580d0" translate="yes" xml:space="preserve">
          <source>This is a useful way to test a generated boot script locally.</source>
          <target state="translated">これは、生成されたブートスクリプトをローカルでテストするのに便利な方法です。</target>
        </trans-unit>
        <trans-unit id="8c1d072ab39ba63d2cf9e54937425fb41a6e24e0" translate="yes" xml:space="preserve">
          <source>This is a utility function used to inspect, for instance, memory usage, in a simple way.</source>
          <target state="translated">これは、例えばメモリ使用量などを簡単な方法で検査するために使用されるユーティリティ関数です。</target>
        </trans-unit>
        <trans-unit id="1e82946d829123c6910c06194e9e7cebf010cb22" translate="yes" xml:space="preserve">
          <source>This is a utility function, that can be useful when e.g. debugging instrumentation functions.</source>
          <target state="translated">これはユーティリティ関数で、インストルメンテーション関数のデバッグなどに便利です。</target>
        </trans-unit>
        <trans-unit id="638f44b006e9ddc55b07c2ecf8dd004cd4e662bc" translate="yes" xml:space="preserve">
          <source>This is a utility function; see &lt;code&gt;&lt;a href=&quot;#par-2&quot;&gt;par/2&lt;/a&gt;&lt;/code&gt; for further details.</source>
          <target state="translated">これはユーティリティ関数です。詳細については、 &lt;code&gt;&lt;a href=&quot;#par-2&quot;&gt;par/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a4ecf4af35ccbc508f0f2a3b4017f2147f96a8d" translate="yes" xml:space="preserve">
          <source>This is accomplished as follows:</source>
          <target state="translated">これは、以下のようにして達成される。</target>
        </trans-unit>
        <trans-unit id="1661232769f6d1b51ba5b2ab390488adc40b1764" translate="yes" xml:space="preserve">
          <source>This is accomplished by dispatching the work to another thread managed by the NIF library, return from the NIF, and wait for the result. The thread can send the result back to the Erlang process using &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt;. Information about thread primitives is provided below.</source>
          <target state="translated">これは、NIFライブラリで管理されている別のスレッドに作業をディスパッチし、NIFから戻り、結果を待つことによって実現されます。スレッドは &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt; を使用して結果をErlangプロセスに送り返すことができます。スレッドプリミティブに関する情報を以下に示します。</target>
        </trans-unit>
        <trans-unit id="a3a5884eaf41dfb2c20bb095d899f4bb1aee0421" translate="yes" xml:space="preserve">
          <source>This is all that has to be done! Now the manager can read, add, and modify rows. Also, you can use the ordinary Mnesia API to access the table from your programs. The only explicit action is to create the Mnesia table, an action the user has to perform in order to create the required table schemas.</source>
          <target state="translated">これだけでいいのです! これで管理者は行の読み込み、追加、修正ができるようになりました。また、通常のMnesia APIを使用して、プログラムからテーブルにアクセスすることもできます。唯一の明示的なアクションはMnesiaテーブルを作成することであり、必要なテーブルスキーマを作成するためにユーザーが実行しなければならないアクションです。</target>
        </trans-unit>
        <trans-unit id="2b23a1bbf224deed4021f7affe8851472e761554" translate="yes" xml:space="preserve">
          <source>This is allowed in ASN.1 and the ASN.1-to-Erlang compiler supports this recursive type. A value for this type is assigned in Erlang as follows:</source>
          <target state="translated">これはASN.1で許可されており、ASN.1-to-Erlangコンパイラはこの再帰型をサポートしています。Erlangではこの型の値は以下のように割り当てられています。</target>
        </trans-unit>
        <trans-unit id="b9c60488fe7be932bfbb686280514f6095ca5c3b" translate="yes" xml:space="preserve">
          <source>This is also handled automatically by the megaco application. First of all, segmentation is only attempted if so configured, see the &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;segment_send&lt;/a&gt;&lt;/code&gt; option. Secondly, megaco relies on the ability of the used codec to encode action replies, which is the smallest component the megaco application handles when segmenting. Thirdly, the reply will be segmented only if the sum of the size of the action replies (plus an arbitrary message header size) are greater then the specified max message size (see the &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;max_pdu_size&lt;/a&gt;&lt;/code&gt; option). Finally, if segmentation is decided, then each action reply will make up its own (segment) message.</source>
          <target state="translated">これもmegacoアプリケーションによって自動的に処理されます。まず、セグメンテーションは、そのように構成されている場合にのみ試行されます &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;segment_send&lt;/a&gt;&lt;/code&gt; オプションを参照してください。2番目に、megacoは、アクション応答をエンコードするために使用されるコーデックの機能に依存しています。これは、megacoアプリケーションがセグメント化するときに処理する最小のコンポーネントです。3 &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;max_pdu_size&lt;/a&gt;&lt;/code&gt; に、アクションの応答のサイズ（および任意のメッセージヘッダーサイズ）の合計が指定された最大メッセージサイズ（max_pdu_sizeオプションを参照）より大きい場合にのみ、応答がセグメント化されます。最後に、セグメンテーションが決定された場合、各アクション応答は独自の（セグメント）メッセージを構成します。</target>
        </trans-unit>
        <trans-unit id="c22b40b578529e2c84690ed6b337febcebea2978" translate="yes" xml:space="preserve">
          <source>This is also the case for functions &lt;code&gt;red/2&lt;/code&gt;, &lt;code&gt;blue/2&lt;/code&gt;, and &lt;code&gt;green/2&lt;/code&gt;.</source>
          <target state="translated">これは、関数 &lt;code&gt;red/2&lt;/code&gt; 、 &lt;code&gt;blue/2&lt;/code&gt; 、および &lt;code&gt;green/2&lt;/code&gt; の場合にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="66cae3829517c0c1511c6c613a5e64f898384f8a" translate="yes" xml:space="preserve">
          <source>This is an abstract representation of syntax tree node attributes; see the function &lt;code&gt;&lt;a href=&quot;#get_attrs-1&quot;&gt;get_attrs/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは構文ツリーノード属性の抽象的な表現です。関数 &lt;code&gt;&lt;a href=&quot;#get_attrs-1&quot;&gt;get_attrs/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2128cfc6cbe9e874c7e25ecf50f44f2ff9c59c9d" translate="yes" xml:space="preserve">
          <source>This is an enhancement of &lt;code&gt;&lt;a href=&quot;#catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;. It gives the possibility to:</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;#catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 強化です。それは可能性を与えます：</target>
        </trans-unit>
        <trans-unit id="bb4355c46a241b6ccaa141fa3ca19310a4e18377" translate="yes" xml:space="preserve">
          <source>This is an example of an &quot;atomic group&quot;, details are provided below.</source>
          <target state="translated">これは「原子グループ」の一例であり、詳細は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7cdd0e3d179b7cbbf8f37996643142fe64dc77b4" translate="yes" xml:space="preserve">
          <source>This is an intentionally rough guide to the relative costs of different calls. It is based on benchmark figures run on Solaris/Sparc:</source>
          <target state="translated">これは、さまざまなコールの相対的なコストを示す、意図的に大まかな目安です。これは Solaris/Sparc で実行されたベンチマークの数値に基づいています。</target>
        </trans-unit>
        <trans-unit id="f4c4ab4d5f5e4f366b3c529f50a5c1512948dcaf" translate="yes" xml:space="preserve">
          <source>This is an interface module for the Reltool application.</source>
          <target state="translated">これはReltoolアプリケーションのインターフェースモジュールです。</target>
        </trans-unit>
        <trans-unit id="03e3358ac9f51a5518985ca7ba361683826cf828" translate="yes" xml:space="preserve">
          <source>This is an opaque data type that identifies a monitor.</source>
          <target state="translated">モニターを識別する不透明なデータ型です。</target>
        </trans-unit>
        <trans-unit id="26ef7d5997459d409e40c1dbe84146420ac9b4f9" translate="yes" xml:space="preserve">
          <source>This is any extra info the user wants to have supplied when the functions in the callback module is called.</source>
          <target state="translated">これは、コールバックモジュールの関数が呼び出されたときにユーザが提供したい追加情報です。</target>
        </trans-unit>
        <trans-unit id="08a7da6db995a217d09a30c00205bf365c46e13e" translate="yes" xml:space="preserve">
          <source>This is as of Erlang/OTP 17.0 the default. It forces any floats in the term to be encoded in a more space-efficient and exact way (namely in the 64-bit IEEE format, rather than converted to a textual representation). As from Erlang/OTP R11B-4, &lt;code&gt;binary_to_term/1&lt;/code&gt; can decode this representation.</source>
          <target state="translated">これはErlang / OTP 17.0以降のデフォルトです。これは、用語内のすべての浮動小数点を、よりスペース効率が高く正確な方法で（つまり、テキスト表現に変換するのではなく、64ビットIEEE形式で）強制的にエンコードします。Erlang / OTP R11B-4以降、 &lt;code&gt;binary_to_term/1&lt;/code&gt; はこの表現をデコードできます。</target>
        </trans-unit>
        <trans-unit id="113749aad29dc1cdbedc3b815e734a581ecdd057" translate="yes" xml:space="preserve">
          <source>This is bad luck, the process was garbage collecting when the crash dump was written. The rest of the information for this process is limited.</source>
          <target state="translated">これは運が悪い、クラッシュダンプが書かれたときにプロセスがガベージコレクションしていた。このプロセスの残りの情報は限られています。</target>
        </trans-unit>
        <trans-unit id="2b06c013992850341fe5a82bf55411c7f74bcdc5" translate="yes" xml:space="preserve">
          <source>This is because record definitions are only available at compile time, not at runtime. For details on records in the shell, see the &lt;code&gt;shell(3)&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">これは、レコード定義が実行時ではなくコンパイル時にのみ使用できるためです。シェルのレコードの詳細については、STDLIBの &lt;code&gt;shell(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="8afd6050f97c61cdb32e6c96ba6b457c161482c6" translate="yes" xml:space="preserve">
          <source>This is called &lt;strong&gt;synchronized code replacement&lt;/strong&gt; and for this the following instructions are used:</source>
          <target state="translated">これは&lt;strong&gt;同期コード置換&lt;/strong&gt;と呼ばれ、次の手順が使用されます。</target>
        </trans-unit>
        <trans-unit id="646259e147d9a776464db65bc4bea0ac6f13d14c" translate="yes" xml:space="preserve">
          <source>This is done by adding or deleting the &lt;code&gt;error_logger_file_h&lt;/code&gt; event handler, and thus indirectly adding &lt;code&gt;error_logger&lt;/code&gt; as a Logger handler.</source>
          <target state="translated">これは、 &lt;code&gt;error_logger_file_h&lt;/code&gt; イベントハンドラーを追加または削除することで行われ、その結果、 &lt;code&gt;error_logger&lt;/code&gt; がロガーハンドラーとして間接的に追加されます。</target>
        </trans-unit>
        <trans-unit id="681acf8836c69537b79e14e48dcac39812f986dc" translate="yes" xml:space="preserve">
          <source>This is done by manipulating the Logger configuration. The function is useful as a shortcut during development and testing, but must not be used in a production system. See section &lt;code&gt;&lt;a href=&quot;logger_chapter&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide, and the &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; manual page for information about how to configure Logger for live systems.</source>
          <target state="translated">これは、ロガー構成を操作することによって行われます。この関数は、開発およびテスト中のショートカットとして役立ちますが、実動システムでは使用しないでください。ライブシステム用にロガーを構成する方法については、 『カーネルユーザーガイド』の「 &lt;code&gt;&lt;a href=&quot;logger_chapter&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; 」セクション、および &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="180abcd23e113c6f5993e0e4b65009873a53afdd" translate="yes" xml:space="preserve">
          <source>This is done in the CTH functions called &lt;code&gt;post_&amp;lt;name of function&amp;gt;&lt;/code&gt;. These functions take the arguments &lt;code&gt;SuiteName&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt; (group or test case name, if applicable), &lt;code&gt;Config&lt;/code&gt;, &lt;code&gt;Return&lt;/code&gt;, and &lt;code&gt;CTHState&lt;/code&gt;. &lt;code&gt;Config&lt;/code&gt; in this case is the same &lt;code&gt;Config&lt;/code&gt; as the testcase is called with. &lt;code&gt;Return&lt;/code&gt; is the value returned by the testcase. If the testcase fails by crashing, &lt;code&gt;Return&lt;/code&gt; is &lt;code&gt;{'EXIT',{{Error,Reason},Stacktrace}}&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;post_&amp;lt;name of function&amp;gt;&lt;/code&gt; CTH関数で行われます。これらの関数は、引数 &lt;code&gt;SuiteName&lt;/code&gt; 、 &lt;code&gt;Name&lt;/code&gt; （グループまたはテストケース名、該当する場合）、 &lt;code&gt;Config&lt;/code&gt; 、 &lt;code&gt;Return&lt;/code&gt; 、および &lt;code&gt;CTHState&lt;/code&gt; を受け取ります。 &lt;code&gt;Config&lt;/code&gt; このケースでは同じである &lt;code&gt;Config&lt;/code&gt; テストケースを使用して呼び出されて。 &lt;code&gt;Return&lt;/code&gt; は、テストケースによって返された値です。クラッシュによってテストケースが失敗した場合、 &lt;code&gt;Return&lt;/code&gt; は &lt;code&gt;{'EXIT',{{Error,Reason},Stacktrace}}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="36ab57d9407d3cc2fec5c4c069b356365d21838b" translate="yes" xml:space="preserve">
          <source>This is done in the CTH functions called &lt;code&gt;pre_&amp;lt;name of function&amp;gt;&lt;/code&gt;. These functions take the arguments &lt;code&gt;SuiteName&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt; (group or test case name, if applicable), &lt;code&gt;Config&lt;/code&gt;, and &lt;code&gt;CTHState&lt;/code&gt;. The return value of the CTH function is always a combination of a result for the suite/group/test and an updated &lt;code&gt;CTHState&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;pre_&amp;lt;name of function&amp;gt;&lt;/code&gt; CTH関数で行われます。これらの関数は、引数 &lt;code&gt;SuiteName&lt;/code&gt; 、 &lt;code&gt;Name&lt;/code&gt; （グループまたはテストケース名、該当する場合）、 &lt;code&gt;Config&lt;/code&gt; 、および &lt;code&gt;CTHState&lt;/code&gt; を取ります。CTH関数の戻り値は、常にsuite / group / testの結果と更新された &lt;code&gt;CTHState&lt;/code&gt; の組み合わせです。</target>
        </trans-unit>
        <trans-unit id="bfd349ddda4246be97d235609d023e3a44aa81a6" translate="yes" xml:space="preserve">
          <source>This is done until the end of the list is reached, that is, the list is empty:</source>
          <target state="translated">これはリストの最後に達するまで、つまりリストが空になるまで行われます。</target>
        </trans-unit>
        <trans-unit id="0e75165bd6c0c435e57a13f622ac0560e9f8aea5" translate="yes" xml:space="preserve">
          <source>This is equivalent to</source>
          <target state="translated">に相当します。</target>
        </trans-unit>
        <trans-unit id="d11de2ea50c52f849f3bde4848fccd123f17645d" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;set_pos(Target, get_pos(Source))&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">これは &lt;code&gt;set_pos(Target, get_pos(Source))&lt;/code&gt; と同等ですが、潜在的にはより効率的です。</target>
        </trans-unit>
        <trans-unit id="5c2e34b39e7cb8fbbca41e01630396e57161f9bd" translate="yes" xml:space="preserve">
          <source>This is equivalent to a call to:</source>
          <target state="translated">への呼びかけに相当します。</target>
        </trans-unit>
        <trans-unit id="b89997f1aaabac9326c311cc6347ce9ddb0e3b91" translate="yes" xml:space="preserve">
          <source>This is equivalent to calling &lt;code&gt;public_key:ssh_decode(SshBin, openssh_public_key)&lt;/code&gt;:</source>
          <target state="translated">これは &lt;code&gt;public_key:ssh_decode(SshBin, openssh_public_key)&lt;/code&gt; を呼び出すのと同じです：</target>
        </trans-unit>
        <trans-unit id="7b99c8c34be448e6bbcfec89b94bf9160fbaeb4a" translate="yes" xml:space="preserve">
          <source>This is equivalent to calling &lt;code&gt;public_key:ssh_decode(SshBin, rfc4716_public_key)&lt;/code&gt;:</source>
          <target state="translated">これは &lt;code&gt;public_key:ssh_decode(SshBin, rfc4716_public_key)&lt;/code&gt; を呼び出すのと同じです：</target>
        </trans-unit>
        <trans-unit id="97a7c564e0e141ccb4b750a31aa63ab870cbb904" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following specification:</source>
          <target state="translated">以下の仕様に相当します。</target>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">に相当します。</target>
        </trans-unit>
        <trans-unit id="4b93967cb769ce4a169bcbd657ff004f71b25464" translate="yes" xml:space="preserve">
          <source>This is expanded to:</source>
          <target state="translated">に拡大されています。</target>
        </trans-unit>
        <trans-unit id="732ce2a7a4465b34c1eb7162718b1da76d4ed1e9" translate="yes" xml:space="preserve">
          <source>This is experimental code that can be changed or removed anytime without any warning.</source>
          <target state="translated">これは、警告なしでいつでも変更・削除できる実験的なコードです。</target>
        </trans-unit>
        <trans-unit id="1093a321a621a1d24d25a283757e5229ec776381" translate="yes" xml:space="preserve">
          <source>This is followed by a call to &lt;code&gt;open/4&lt;/code&gt; before any read/write access is performed. &lt;code&gt;AcceptedOptions&lt;/code&gt; is sent to the server, which replies with the options that it accepts. These are then forwarded to &lt;code&gt;open/4&lt;/code&gt; as &lt;code&gt;SuggestedOptions&lt;/code&gt;.</source>
          <target state="translated">これに続いて、読み取り/書き込みアクセスが実行される前に &lt;code&gt;open/4&lt;/code&gt; が呼び出されます。 &lt;code&gt;AcceptedOptions&lt;/code&gt; がサーバーに送信され、サーバーは受け入れるオプションで応答します。次に、これらは &lt;code&gt;SuggestedOptions&lt;/code&gt; として &lt;code&gt;open/4&lt;/code&gt; に転送されます。</target>
        </trans-unit>
        <trans-unit id="ef43207effbfa0c4bc3102645253272383b860ee" translate="yes" xml:space="preserve">
          <source>This is handled automatically by the megaco application. There is however one thing that need to be configured by the user, the &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;segment_recv_timer&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">これは、megacoアプリケーションによって自動的に処理されます。ただし、ユーザーが構成する必要があるのは、 &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;segment_recv_timer&lt;/a&gt;&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="29f190ed43ce30d7d9b9d196be4fa299d1c36697" translate="yes" xml:space="preserve">
          <source>This is if it is used in the context of the match operator as in the example.</source>
          <target state="translated">これは、例のようにマッチ演算子のコンテキストで使用されている場合です。</target>
        </trans-unit>
        <trans-unit id="7b6a3bc9957c826c254223da8d53ebcc53f4e171" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following table:</source>
          <target state="translated">これは、以下の表に示されています。</target>
        </trans-unit>
        <trans-unit id="3a9346a5e9e0ffd489af06c1ad2635ffc6b9ae2c" translate="yes" xml:space="preserve">
          <source>This is implementattion depended. That is, it depends on the module. For each module a specific set of options are valid. For the module provided with the app, these options are supported:</source>
          <target state="translated">これは実装依存型です。つまり、モジュールに依存します。各モジュールでは、特定のオプションのセットが有効です。アプリが提供するモジュールでは、これらのオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="114d08a8e002db6d0c9182141940ed632dd9d634" translate="yes" xml:space="preserve">
          <source>This is in effect a progress report.</source>
          <target state="translated">これは実質的には経過報告です。</target>
        </trans-unit>
        <trans-unit id="a159e1612a81f8d86b525155c551f0929580069d" translate="yes" xml:space="preserve">
          <source>This is no longer the case. If you require &lt;code&gt;'undefined'&lt;/code&gt; in your record field type, you must explicitly add it to the typespec, as in the 2nd example.</source>
          <target state="translated">これはもう当てはまりません。レコードフィールドタイプで &lt;code&gt;'undefined'&lt;/code&gt; が必要な場合は、2番目の例のように、typespecに明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="33403ecb7959eebc92f2663aeded4a8c6c3bee94" translate="yes" xml:space="preserve">
          <source>This is normally a wise decision, but it can be disastrous if the nodes have been disconnected because of a communication failure, as the &lt;code&gt;Mnesia&lt;/code&gt; normal table load mechanism does not cope with communication failures.</source>
          <target state="translated">これは通常は賢明な決定ですが、 &lt;code&gt;Mnesia&lt;/code&gt; の通常のテーブルロードメカニズムが通信障害に対応していないため、通信障害が原因でノードが切断された場合は悲惨な結果になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="868d49c485867e5bfe4e2b7dfc7ac02d90106823" translate="yes" xml:space="preserve">
          <source>This is normally the default &lt;code&gt;malloc&lt;/code&gt; implementation used on the specific OS.</source>
          <target state="translated">これは通常、特定のOSで使用されるデフォルトの &lt;code&gt;malloc&lt;/code&gt; 実装です。</target>
        </trans-unit>
        <trans-unit id="9dde21bfce3c688dc390548f3494e7bf552bd9fc" translate="yes" xml:space="preserve">
          <source>This is not a full-fledged resolver, only a DNS client that relies on asking trusted recursive name servers.</source>
          <target state="translated">これは本格的なリゾルバではなく、信頼された再帰的なネームサーバーに依頼するDNSクライアントにすぎません。</target>
        </trans-unit>
        <trans-unit id="836326e8e7b02322f5679431a9ac0cf2a7bdaf26" translate="yes" xml:space="preserve">
          <source>This is not a proper Unicode representation, but the representation used for characters before the Unicode standard. It can still be used to represent character code points in the Unicode standard with numbers &amp;lt; 256, which exactly corresponds to the ISO Latin-1 character set. In Erlang, this is commonly denoted &lt;code&gt;latin1&lt;/code&gt; encoding, which is slightly misleading as ISO Latin-1 is a character code range, not an encoding.</source>
          <target state="translated">これは適切なUnicode表現ではなく、Unicode標準以前の文字に使用された表現です。それでも、256未満の数値を持つUnicode標準の文字コードポイントを表すために使用できます。これは、ISO Latin-1文字セットに正確に対応しています。Erlangでは、これは一般的に &lt;code&gt;latin1&lt;/code&gt; エンコーディングで表されますが、ISO Latin-1はエンコーディングではなく文字コード範囲であるため、少し誤解を招きます。</target>
        </trans-unit>
        <trans-unit id="2c58e7e1b5e3d20a4fa526ed7b8e2cfc77c34073" translate="yes" xml:space="preserve">
          <source>This is not entirely safe, as it is vulnerable against takeover attacks, but it is a tradeoff between fair safety and performance.</source>
          <target state="translated">乗っ取り攻撃に弱いので完全に安全というわけではありませんが、公平な安全性と性能のトレードオフになっています。</target>
        </trans-unit>
        <trans-unit id="43d40b61a5fa7c9dc787ea193a5ed313e523277b" translate="yes" xml:space="preserve">
          <source>This is not important if you do not postpone events. But if you later decide to start postponing some events, then the design flaw of not having separate states when they should be, might become a hard to find bug.</source>
          <target state="translated">イベントを延期しないのであれば、これは重要ではありません。しかし、後になっていくつかのイベントを延期することになった場合、あるべき時に別の状態を持たないという設計上の欠陥が、見つけるのが難しいバグになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="65f78e9c138cff8dcc48b10d2119a79c6c5f383e" translate="yes" xml:space="preserve">
          <source>This is not the wanted result. To achieve the desired effect, &lt;code&gt;select&lt;/code&gt; must be written as follows:</source>
          <target state="translated">これは望ましい結果ではありません。目的の効果を得るには、 &lt;code&gt;select&lt;/code&gt; を次のように記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7f69a6080f0d1385f2abcc049f00ad9be5341c1" translate="yes" xml:space="preserve">
          <source>This is perhaps the most central module in the entirety of the &lt;code&gt;et&lt;/code&gt; suite. The &lt;code&gt;Collector&lt;/code&gt; needs &quot;filters&quot; to convert the &lt;code&gt;Raw Trace Data&lt;/code&gt; into &quot;events&quot; that it can display. The &lt;code&gt;et_selector&lt;/code&gt; module provides the default &lt;code&gt;Filter&lt;/code&gt; and some API calls to manage the &lt;code&gt;Trace Pattern&lt;/code&gt;. The &lt;code&gt;Selector&lt;/code&gt; provides various functions that achieve the following:</source>
          <target state="translated">これはおそらく &lt;code&gt;et&lt;/code&gt; スイート全体で最も中心的なモジュールです。 &lt;code&gt;Collector&lt;/code&gt; 変換するために、「フィルタ」を必要とする &lt;code&gt;Raw Trace Data&lt;/code&gt; 、それが表示できることを「イベント」へ。 &lt;code&gt;et_selector&lt;/code&gt; のモジュールは、デフォルトの提供 &lt;code&gt;Filter&lt;/code&gt; を管理するために、いくつかのAPI呼び出しを &lt;code&gt;Trace Pattern&lt;/code&gt; 。 &lt;code&gt;Selector&lt;/code&gt; 以下のことを実現するさまざまな機能を提供します。</target>
        </trans-unit>
        <trans-unit id="bd78b41da72f8f6a1b1b335bee4881061346e4af" translate="yes" xml:space="preserve">
          <source>This is possibly a little clearer.</source>
          <target state="translated">これでもう少しわかりやすくなったかもしれません。</target>
        </trans-unit>
        <trans-unit id="7063cc576e9b11f727c2ae0cabc7e8bc7b76b64e" translate="yes" xml:space="preserve">
          <source>This is primarily a way to show the effects of using the reentrant flex scanner instead of the non-reentrant.</source>
          <target state="translated">これは、主に、非再入室型ではなく、再入室型フレックススキャナを使用した場合の効果を示すものである。</target>
        </trans-unit>
        <trans-unit id="7f43cbca3b6fcf016e7da8036914af019823f1d9" translate="yes" xml:space="preserve">
          <source>This is read as follows: The list of X such that X is taken from the list &lt;code&gt;[1,2,a,...]&lt;/code&gt; and X is greater than 3.</source>
          <target state="translated">これは次のように読み取られます。Xがリスト &lt;code&gt;[1,2,a,...]&lt;/code&gt; から取得され、Xが3より大きいようなXのリスト。</target>
        </trans-unit>
        <trans-unit id="e5bbd1957b21e024367be0eb839936ca962e71f8" translate="yes" xml:space="preserve">
          <source>This is received by the client, which in turn does &lt;code&gt;exit(normal)&lt;/code&gt; and terminates. If &lt;code&gt;keysearch&lt;/code&gt; returns &lt;code&gt;{value,{From,Name}}&lt;/code&gt; it is certain that the user is logged on and that his name (peter) is in variable &lt;code&gt;Name&lt;/code&gt;.</source>
          <target state="translated">これはクライアントによって受信され、次にクライアントは &lt;code&gt;exit(normal)&lt;/code&gt; して終了します。 &lt;code&gt;keysearch&lt;/code&gt; が &lt;code&gt;{value,{From,Name}}&lt;/code&gt; 返した場合、ユーザーがログオンしていて、その名前（peter）が変数 &lt;code&gt;Name&lt;/code&gt; にあることが確実です。</target>
        </trans-unit>
        <trans-unit id="81a8f87d1727d52beaa427ce4936112ae848bc0b" translate="yes" xml:space="preserve">
          <source>This is received by the client.</source>
          <target state="translated">これをクライアントが受信します。</target>
        </trans-unit>
        <trans-unit id="6c40d6a299f26d7b05469a35afc3ecd07bd6f779" translate="yes" xml:space="preserve">
          <source>This is simply an erlang compatible text-file with the following structure: &lt;code&gt;{codec_name(), messages_list()}&lt;/code&gt;.</source>
          <target state="translated">これは単に、次の構造を持つerlang互換のテキストファイルです： &lt;code&gt;{codec_name(), messages_list()}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44863f1a9281f46194959277b2c84306dd047f31" translate="yes" xml:space="preserve">
          <source>This is slightly faster for probably the most common case that the input lists are not empty or very short. (Another advantage is that Dialyzer can deduce a better type for the &lt;code&gt;Xs&lt;/code&gt; variable.)</source>
          <target state="translated">これは、入力リストが空ではない、または非常に短いという最も一般的なケースでは、わずかに高速です。（別の利点は、Dialyzerが &lt;code&gt;Xs&lt;/code&gt; 変数のより適切な型を推測できることです。）</target>
        </trans-unit>
        <trans-unit id="709cd27ea3760e45f8fdbf83a2674e3dd14b99e2" translate="yes" xml:space="preserve">
          <source>This is slightly more efficient because here you do not build a list element only to copy it directly. (Or it would be more efficient if the compiler did not automatically rewrite &lt;code&gt;[H]++Acc&lt;/code&gt; to &lt;code&gt;[H|Acc]&lt;/code&gt;.)</source>
          <target state="translated">ここでは、直接コピーするためだけにリスト要素を作成しないため、これは少し効率的です。（または、コンパイラが &lt;code&gt;[H]++Acc&lt;/code&gt; を &lt;code&gt;[H|Acc]&lt;/code&gt; 自動的に書き換えなかった場合は、より効率的です。）</target>
        </trans-unit>
        <trans-unit id="4f59ec1eb2875e58bffaa8ecb426dbb6d7dc8700" translate="yes" xml:space="preserve">
          <source>This is sometimes the only way to run distributed Erlang if the Domain Name System (DNS) is not running. No communication can exist between nodes running with flag &lt;code&gt;-sname&lt;/code&gt; and those running with flag &lt;code&gt;-name&lt;/code&gt;, as node names must be unique in distributed Erlang systems.</source>
          <target state="translated">これは、ドメインネームシステム（DNS）が実行されていない場合に、分散Erlangを実行する唯一の方法です。ノード名は分散Erlangシステムで一意でなければならないため、フラグ &lt;code&gt;-sname&lt;/code&gt; で実行されているノードとフラグ &lt;code&gt;-name&lt;/code&gt; で実行されているノードの間には通信が存在できません。</target>
        </trans-unit>
        <trans-unit id="570f8642744ae6cd3a9675f1aad4ee8419ad33a1" translate="yes" xml:space="preserve">
          <source>This is syntactic sugar for the equivalent, but harder to read:</source>
          <target state="translated">これは等価のための構文的な糖質ですが、読みにくいです。</target>
        </trans-unit>
        <trans-unit id="9e186bc5c4bbfebc187d81afa7fc46f64f868bc5" translate="yes" xml:space="preserve">
          <source>This is syntactic sugar for the following:</source>
          <target state="translated">これは、次のような場合の構文糖です。</target>
        </trans-unit>
        <trans-unit id="bb54970de95599c4474802466e4b9431c5e1008a" translate="yes" xml:space="preserve">
          <source>This is the &lt;code&gt;SSL/TLS&lt;/code&gt; connectin configuration option.</source>
          <target state="translated">これは &lt;code&gt;SSL/TLS&lt;/code&gt; 接続構成オプションです。</target>
        </trans-unit>
        <trans-unit id="aac881df38163ed7b3cad0912165225c572fc928" translate="yes" xml:space="preserve">
          <source>This is the default handler used by OTP. Multiple instances can be started, and each instance will write log events to a given destination, terminal or file.</source>
          <target state="translated">これは OTP が使用するデフォルトのハンドラです。複数のインスタンスを起動することができ、各インスタンスはログイベントを指定された宛先、ターミナル、ファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="c4d57523639a2e8a475bc6496773bdbfcedee6d9" translate="yes" xml:space="preserve">
          <source>This is the default instrumentation function for tables.</source>
          <target state="translated">これは、テーブルのデフォルトの計装機能です。</target>
        </trans-unit>
        <trans-unit id="8a590bd244aa7fba225f4a56cad227855876f150" translate="yes" xml:space="preserve">
          <source>This is the default instrumentation function for variables.</source>
          <target state="translated">変数のデフォルトのインストルメンテーション機能です。</target>
        </trans-unit>
        <trans-unit id="0ea769a678284ef3199b2e2888a8634fc4803cb9" translate="yes" xml:space="preserve">
          <source>This is the default. It means the &lt;code&gt;Time&lt;/code&gt; value is interpreted as a time in milliseconds &lt;strong&gt;relative&lt;/strong&gt; current &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これがデフォルトです。これは、 &lt;code&gt;Time&lt;/code&gt; 値がミリ秒単位の&lt;strong&gt;相対&lt;/strong&gt;電流 &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; として解釈されることを意味します。</target>
        </trans-unit>
        <trans-unit id="31b3e5ab542a5f0debc59c85dd91647f80797616" translate="yes" xml:space="preserve">
          <source>This is the disk log type, &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;halt&lt;/code&gt;. The option corresponds to the &lt;code&gt;type&lt;/code&gt; property in the &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; datatype.</source>
          <target state="translated">これはディスクログのタイプで、 &lt;code&gt;wrap&lt;/code&gt; または &lt;code&gt;halt&lt;/code&gt; です。このオプションは、 &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; データ型の &lt;code&gt;type&lt;/code&gt; プロパティに対応しています。</target>
        </trans-unit>
        <trans-unit id="79cf40aec82f5e3c6c095b9a7f24df20c5c7f299" translate="yes" xml:space="preserve">
          <source>This is the fastest way of calling a driver and get a response. It makes no context switch in the Erlang emulator and requires no message passing. It is suitable for calling C function to get faster execution, when Erlang is too slow.</source>
          <target state="translated">これはドライバを呼び出してレスポンスを得る最速の方法です。Erlangエミュレータのコンテキストスイッチを使わず、メッセージパッシングも必要ありません。Erlangが遅いときにC言語の関数を呼び出して高速に実行するのに適しています。</target>
        </trans-unit>
        <trans-unit id="f997eb6e8d88cc346ac8a25ffea65575e19dddfd" translate="yes" xml:space="preserve">
          <source>This is the first function called when a notification delivery is in progress. It informs the &lt;code&gt;receiver&lt;/code&gt; which targets will get the notification. The result of the delivery will be provided via successive calls to &lt;code&gt;delivery_info/4&lt;/code&gt; function, see below.</source>
          <target state="translated">これは、通知配信の進行中に呼び出される最初の関数です。通知を受け取るターゲットを &lt;code&gt;receiver&lt;/code&gt; に通知します。配信の結果は、delivery_info &lt;code&gt;delivery_info/4&lt;/code&gt; 関数を連続して呼び出すことで提供されます。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="ba21277d355183275053e3909ab979314fa50468" translate="yes" xml:space="preserve">
          <source>This is the first message that the channel receives. It is sent just before the &lt;code&gt;&lt;a href=&quot;#init-1&quot;&gt;init/1&lt;/a&gt;&lt;/code&gt; function returns successfully. This is especially useful if the server wants to send a message to the client without first receiving a message from it. If the message is not useful for your particular scenario, ignore it by immediately returning &lt;code&gt;{ok, State}&lt;/code&gt;.</source>
          <target state="translated">これは、チャネルが受信する最初のメッセージです。 &lt;code&gt;&lt;a href=&quot;#init-1&quot;&gt;init/1&lt;/a&gt;&lt;/code&gt; 関数が正常に戻る直前に送信されます。これは、サーバーが最初にメッセージを受信せずにクライアントにメッセージを送信する場合に特に便利です。特定のシナリオでメッセージが役に立たない場合は、すぐに &lt;code&gt;{ok, State}&lt;/code&gt; 返して無視してください。</target>
        </trans-unit>
        <trans-unit id="ff43ffc2013d60b90dbeef0ec3d72ae3abfda509" translate="yes" xml:space="preserve">
          <source>This is the first message that the channel receives. This is especially useful if the server wants to send a message to the client without first receiving a message from it. If the message is not useful for your particular scenario, ignore it by immediately returning &lt;code&gt;{ok, State}&lt;/code&gt;.</source>
          <target state="translated">これは、チャネルが受信する最初のメッセージです。これは、サーバーが最初にメッセージを受信せずにクライアントにメッセージを送信する場合に特に便利です。特定のシナリオでメッセージが役に立たない場合は、すぐに &lt;code&gt;{ok, State}&lt;/code&gt; 返して無視してください。</target>
        </trans-unit>
        <trans-unit id="f4993527ae602c81dada40230c7e4b229f40c09c" translate="yes" xml:space="preserve">
          <source>This is the full name of the disk log file. The option corresponds to the &lt;code&gt;name&lt;/code&gt; property in the &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; datatype.</source>
          <target state="translated">これは、ディスクログファイルの完全な名前です。このオプションは、 &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; データ型の &lt;code&gt;name&lt;/code&gt; プロパティに対応しています。</target>
        </trans-unit>
        <trans-unit id="5982af784f6f1a00b591611686e14f6193a9f84c" translate="yes" xml:space="preserve">
          <source>This is the interface module for the &lt;code&gt;SSH&lt;/code&gt; application. The Secure Shell (SSH) Protocol is a protocol for secure remote login and other secure network services over an insecure network. See &lt;code&gt;ssh(6)&lt;/code&gt; for details of supported RFCs, versions, algorithms and unicode handling.</source>
          <target state="translated">これは、 &lt;code&gt;SSH&lt;/code&gt; アプリケーションのインターフェースモジュールです。セキュアシェル（SSH）プロトコルは、安全でないリモートログインや、安全でないネットワークを介したその他の安全なネットワークサービスのためのプロトコルです。参照 &lt;code&gt;ssh(6)&lt;/code&gt; サポートするRFC、バージョン、アルゴリズムおよびUnicode処理の詳細については。</target>
        </trans-unit>
        <trans-unit id="f80630a3cb0a4f72ab077d535fc76e765cca2dca" translate="yes" xml:space="preserve">
          <source>This is the low-level function to unload (or decrement reference counts of) a driver. It can be used to force port killing, in much the same way as the driver option &lt;code&gt;kill_ports&lt;/code&gt; implicitly does. Also, it can trigger a monitor either because other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; still have the driver loaded or because open ports use the driver.</source>
          <target state="translated">これは、ドライバーをアンロード（または参照カウントをデクリメント）する低レベル関数です。これは、ドライバーオプション &lt;code&gt;kill_ports&lt;/code&gt; が暗黙的に行うのとほぼ同じ方法で、ポートの強制終了に使用できます。また、他の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; まだドライバーをロードしているか、開いているポートがドライバーを使用しているために、モニターをトリガーする可能性があります。</target>
        </trans-unit>
        <trans-unit id="eacd6f28e2e16d27200f6b33be43d951190f1539" translate="yes" xml:space="preserve">
          <source>This is the magic macro to initialize a NIF library. It is to be evaluated in global file scope.</source>
          <target state="translated">NIF ライブラリを初期化するためのマジックマクロです。グローバルファイルスコープで評価されます。</target>
        </trans-unit>
        <trans-unit id="a9ed06a82672ebce7c45ad63610c5550104e76dd" translate="yes" xml:space="preserve">
          <source>This is the main option and it controls the configuration of Reltool. It can either be a &lt;code&gt;sys&lt;/code&gt; tuple or a name of a &lt;code&gt;file&lt;/code&gt; containing a sys tuple.</source>
          <target state="translated">これはメインオプションであり、Reltoolの構成を制御します。 &lt;code&gt;sys&lt;/code&gt; タプルまたはsysタプルを含む &lt;code&gt;file&lt;/code&gt; 名前のいずれかです。</target>
        </trans-unit>
        <trans-unit id="3c9044a0169d5c61331b09923e7b20b8bc8aa7f2" translate="yes" xml:space="preserve">
          <source>This is the maximum allowed queue length. If the message queue grows larger than this, the handler process is terminated.</source>
          <target state="translated">これは、許容される最大のキューの長さです。メッセージキューがこれより大きくなった場合、ハンドラプロセスは終了します。</target>
        </trans-unit>
        <trans-unit id="b9f45ed64c3e0c4da54fbe1eb312ba76516ad0e2" translate="yes" xml:space="preserve">
          <source>This is the maximum memory size that the handler process is allowed to use. If the handler grows larger than this, the process is terminated.</source>
          <target state="translated">これは、ハンドラプロセスが使用できる最大メモリサイズです。ハンドラがこれより大きくなった場合、プロセスは終了します。</target>
        </trans-unit>
        <trans-unit id="16038a3786bdd4dedf260d26283b919a880bb676" translate="yes" xml:space="preserve">
          <source>This is the maximum number of bytes that is written to a log file before disk_log proceeds with the next file in order, or generates an error in case of a full halt log. The option corresponds to the &lt;code&gt;MaxNoBytes&lt;/code&gt; element in the &lt;code&gt;size&lt;/code&gt; property in the &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; datatype.</source>
          <target state="translated">これは、disk_logが次のファイルを順番に処理する前にログファイルに書き込まれる最大バイト数です。完全な停止ログの場合はエラーが生成されます。このオプションは、 &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; データ型の &lt;code&gt;size&lt;/code&gt; プロパティの &lt;code&gt;MaxNoBytes&lt;/code&gt; 要素に対応しています。</target>
        </trans-unit>
        <trans-unit id="459f135a3a42608f2bd3388de6fc151cb8110783" translate="yes" xml:space="preserve">
          <source>This is the maximum number of events to handle within a &lt;code&gt;burst_limit_window_time&lt;/code&gt; time frame. After the limit is reached, successive events are dropped until the end of the time frame.</source>
          <target state="translated">これは、 &lt;code&gt;burst_limit_window_time&lt;/code&gt; 時間枠内で処理するイベントの最大数です。制限に達した後、時間枠が終了するまで、後続のイベントはドロップされます。</target>
        </trans-unit>
        <trans-unit id="f9d007efced8ad7291f6b7473c324b69730b4bdb" translate="yes" xml:space="preserve">
          <source>This is the maximum number of files that disk_log uses for its circular logging. The option corresponds to the &lt;code&gt;MaxNoFiles&lt;/code&gt; element in the &lt;code&gt;size&lt;/code&gt; property in the &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; datatype.</source>
          <target state="translated">これは、disk_logが循環ログに使用するファイルの最大数です。このオプションは、 &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; データ型の &lt;code&gt;size&lt;/code&gt; プロパティの &lt;code&gt;MaxNoFiles&lt;/code&gt; 要素に対応しています。</target>
        </trans-unit>
        <trans-unit id="88ddfe714e0b66558fbe57136603410b11130d4d" translate="yes" xml:space="preserve">
          <source>This is the new encoding of internal funs: &lt;code&gt;fun F/A&lt;/code&gt; and &lt;code&gt;fun(Arg1,..) -&amp;gt; ... end&lt;/code&gt;.</source>
          <target state="translated">これは、内部 &lt;code&gt;fun F/A&lt;/code&gt; の新しいエンコーディングです：fun F / Aおよび &lt;code&gt;fun(Arg1,..) -&amp;gt; ... end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="837460bd7445a65a68a00b613c75a7744d0ed82a" translate="yes" xml:space="preserve">
          <source>This is the printout header of one process. The printout contains only this one process since we did &lt;code&gt;fprof:apply/3&lt;/code&gt; which traces only the current process. Therefore the CNT and OWN columns perfectly matches the totals above. The ACC column is undefined since summing the ACC times of all calls in the process makes no sense - you would get something like the ACC value from totals above multiplied by the average depth of the call stack, or something.</source>
          <target state="translated">これは、1つのプロセスの出力ヘッダーです。現在のプロセスのみをトレース &lt;code&gt;fprof:apply/3&lt;/code&gt; を実行したため、出力にはこの1つのプロセスのみが含まれます。したがって、CNT列とOWN列は上記の合計と完全に一致します。プロセス内のすべての呼び出しのACC時間を合計しても意味がないため、ACC列は定義されていません。上記の合計からACC値に呼び出しスタックの平均深度を乗算したものなどが得られます。</target>
        </trans-unit>
        <trans-unit id="ee530acee221ac3457f1090f43fd370b8436c96d" translate="yes" xml:space="preserve">
          <source>This is the re-entrant formatted reader. The continuation of the first call to the functions must be &lt;code&gt;[]&lt;/code&gt;. For a complete description of how the re-entrant input scheme works, see Armstrong, Virding, Williams: 'Concurrent Programming in Erlang', Chapter 13.</source>
          <target state="translated">これは、再入可能にフォーマットされたリーダーです。関数への最初の呼び出しの継続は &lt;code&gt;[]&lt;/code&gt; でなければなりません。再入可能入力方式の動作の詳細については、アームストロング、バーディング、ウィリアムズ：「Erlangでの並行プログラミング」、第13章を参照してください。</target>
        </trans-unit>
        <trans-unit id="ecd4a7ad5696bedde8f5f313930da44fe12f224d" translate="yes" xml:space="preserve">
          <source>This is the re-entrant scanner, which scans characters until either a &lt;strong&gt;dot&lt;/strong&gt; ('.' followed by a white space) or &lt;code&gt;eof&lt;/code&gt; is reached. It returns:</source>
          <target state="translated">これは、&lt;strong&gt;ドット&lt;/strong&gt;（ '。'の後に空白が続く）または &lt;code&gt;eof&lt;/code&gt; に到達するまで文字をスキャンする再入可能なスキャナーです。それは返します：</target>
        </trans-unit>
        <trans-unit id="6ad3ae21f4d6378b9390fab772b58bcf9e24057d" translate="yes" xml:space="preserve">
          <source>This is the return type from &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; and selects &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback mode&lt;/a&gt;&lt;/code&gt; and whether to do &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state enter calls&lt;/a&gt;&lt;/code&gt;, or not.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; からの戻り値の型であり、 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback mode&lt;/a&gt;&lt;/code&gt; と、 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state enter calls&lt;/a&gt;&lt;/code&gt; かどうかを選択します。</target>
        </trans-unit>
        <trans-unit id="04e8ab784b5603c6b44491c28cae41829d1e3589" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;sol&lt;/code&gt;, but only for the first call to &lt;code&gt;link/1&lt;/code&gt; by the traced process.</source>
          <target state="translated">これは &lt;code&gt;sol&lt;/code&gt; と同じですが、トレースされたプロセスによる &lt;code&gt;link/1&lt;/code&gt; への最初の呼び出しについてのみです。</target>
        </trans-unit>
        <trans-unit id="5d44ec075c5224429b7e914e2c0f01b386f3e0fd" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;sos&lt;/code&gt;, but only for the first process spawned by the traced process.</source>
          <target state="translated">これは &lt;code&gt;sos&lt;/code&gt; と同じですが、トレースされたプロセスによって生成された最初のプロセスに対してのみです。</target>
        </trans-unit>
        <trans-unit id="5c9a7f10551e6fef6526100ea65361d85f3b3c5e" translate="yes" xml:space="preserve">
          <source>This is the same as calling &lt;code&gt;&lt;a href=&quot;#make_config-1&quot;&gt;make_config(group_leader())&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;#make_config-1&quot;&gt;make_config(group_leader())&lt;/a&gt;&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="ae7c485681a5d5be425044d9a2ecba3267612e5e" translate="yes" xml:space="preserve">
          <source>This is the same as doing, e.g.:</source>
          <target state="translated">これは、例えば、やっていることと同じです。</target>
        </trans-unit>
        <trans-unit id="d70feac208b0fafbbf1031f0ed7f8654773e27d3" translate="yes" xml:space="preserve">
          <source>This is the same as:</source>
          <target state="translated">と同じです。</target>
        </trans-unit>
        <trans-unit id="3b5a14eeead1c5ce60108308f333bdf8d18e6154" translate="yes" xml:space="preserve">
          <source>This is the short story though, for the experienced and impatient:</source>
          <target state="translated">これは経験豊富でせっかちな人のための、しかし短い物語です。</target>
        </trans-unit>
        <trans-unit id="5cabfd28d4ff30cee5147e828bd4dda97a0b5763" translate="yes" xml:space="preserve">
          <source>This is the standard handler for Logger. Multiple instances of this handler can be added to Logger, and each instance prints logs to &lt;code&gt;standard_io&lt;/code&gt;, &lt;code&gt;standard_error&lt;/code&gt;, or to file.</source>
          <target state="translated">これはロガーの標準ハンドラです。このハンドラーの複数のインスタンスをロガーに追加でき、各インスタンスはログを &lt;code&gt;standard_io&lt;/code&gt; 、 &lt;code&gt;standard_error&lt;/code&gt; 、またはファイルに出力します。</target>
        </trans-unit>
        <trans-unit id="7d0bc914b2bcbf775df160b6a080adcaa1ab6b48" translate="yes" xml:space="preserve">
          <source>This is the start of a hiearchy of opaque data structures that can be examined with access functions in &lt;code&gt;inet_dns&lt;/code&gt;, which return lists of &lt;code&gt;{Field,Value}&lt;/code&gt; tuples. The arity 2 functions only return the value for a specified field.</source>
          <target state="translated">これは、 &lt;code&gt;{Field,Value}&lt;/code&gt; タプルのリストを返す &lt;code&gt;inet_dns&lt;/code&gt; のアクセス関数で調べることができる不透明なデータ構造の階層の始まりです。アリティ2関数は、指定されたフィールドの値のみを返します。</target>
        </trans-unit>
        <trans-unit id="d98c71268352e941036bfc46f7ac63a11dac3adf" translate="yes" xml:space="preserve">
          <source>This is the sum of the runtime for all threads in the Erlang runtime system and can therefore be greater than the wall clock time.</source>
          <target state="translated">これはErlangランタイムシステムのすべてのスレッドのランタイムの合計で、ウォールクロックの時間よりも大きくなります。</target>
        </trans-unit>
        <trans-unit id="f65cd2322c237b869a90671095b9d99fc32d6542" translate="yes" xml:space="preserve">
          <source>This is the top supervisor for the agent part of the SNMP application. There is always one supervisor at each node with an SNMP agent (master agent or sub-agent).</source>
          <target state="translated">これは、SNMPアプリケーションのエージェント部分のトップスーパバイザです。SNMPエージェント(マスターエージェントまたはサブエージェント)を持つ各ノードには、常に1つのスーパーバイザーが存在します。</target>
        </trans-unit>
        <trans-unit id="1c91fd8459d792120c638965b077037f75eb8c7b" translate="yes" xml:space="preserve">
          <source>This is the type definition for the supervisor flags:</source>
          <target state="translated">スーパバイザフラグの型定義です。</target>
        </trans-unit>
        <trans-unit id="9847ce6094bdf607fe5e13ee0e480c77d4dbdfd9" translate="yes" xml:space="preserve">
          <source>This is to be added to the &lt;code&gt;start&lt;/code&gt; script.</source>
          <target state="translated">これは &lt;code&gt;start&lt;/code&gt; スクリプトに追加されます。</target>
        </trans-unit>
        <trans-unit id="9cc5dbd4b0a6027790eeb7362903f65abf0802cc" translate="yes" xml:space="preserve">
          <source>This is to provide options that changes its general behavior and &quot;sticks&quot; to the driver throughout its lifespan.</source>
          <target state="translated">これは、一般的な行動を変えるオプションを提供することで、生涯を通じてドライバーに「くっつく」ことができるようにするためです。</target>
        </trans-unit>
        <trans-unit id="63ab71f3a67c414cba27c6d8e2befb9085535d6d" translate="yes" xml:space="preserve">
          <source>This is transformed into one call to &lt;code&gt;my_table&lt;/code&gt;:</source>
          <target state="translated">これは &lt;code&gt;my_table&lt;/code&gt; の 1回の呼び出しに変換されます。</target>
        </trans-unit>
        <trans-unit id="fad7abe2a96807b6a5b8ac7472f217897f8a19e9" translate="yes" xml:space="preserve">
          <source>This is used for &lt;strong&gt;three-way-handshake&lt;/strong&gt;.</source>
          <target state="translated">これは&lt;strong&gt;3方向ハンドシェイクに&lt;/strong&gt;使用されます。</target>
        </trans-unit>
        <trans-unit id="72036e52d82b37ea2fc4d48dfb5499c608ebb71d" translate="yes" xml:space="preserve">
          <source>This is used to determine if the call to non-local function &lt;code&gt;FuncSpec&lt;/code&gt; (&lt;code&gt;{Module,Func}&lt;/code&gt; or a fun) with arguments &lt;code&gt;ArgList&lt;/code&gt; is to be allowed. The return value &lt;code&gt;{redirect,NewFuncSpec,NewArgList}&lt;/code&gt; can be used to let the shell evaluate some other function than the one specified by &lt;code&gt;FuncSpec&lt;/code&gt; and &lt;code&gt;ArgList&lt;/code&gt;.</source>
          <target state="translated">これは、引数 &lt;code&gt;ArgList&lt;/code&gt; を持つ非ローカル関数 &lt;code&gt;FuncSpec&lt;/code&gt; （ &lt;code&gt;{Module,Func}&lt;/code&gt; またはfun）の呼び出しを許可するかどうかを決定するために使用されます。戻り値 &lt;code&gt;{redirect,NewFuncSpec,NewArgList}&lt;/code&gt; を使用すると、 &lt;code&gt;FuncSpec&lt;/code&gt; および &lt;code&gt;ArgList&lt;/code&gt; で指定された関数以外の関数をシェルで評価できます。</target>
        </trans-unit>
        <trans-unit id="d65885f8646585ffb41393b4d943ab7b9e09ca48" translate="yes" xml:space="preserve">
          <source>This is used to determine if the call to the local function &lt;code&gt;Func&lt;/code&gt; with arguments &lt;code&gt;ArgList&lt;/code&gt; is to be allowed.</source>
          <target state="translated">これは、引数 &lt;code&gt;ArgList&lt;/code&gt; を使用したローカル関数 &lt;code&gt;Func&lt;/code&gt; の呼び出しを許可するかどうかを決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="4567b676fadac5a76d27950b200211f3a0074958" translate="yes" xml:space="preserve">
          <source>This just tests that the function &lt;code&gt;lists:reverse(List)&lt;/code&gt; does not crash when &lt;code&gt;List&lt;/code&gt; is &lt;code&gt;[1,2,3]&lt;/code&gt;. It is not a great test, but many people write simple functions like this one to test the basic functionality of their code, and those tests can be used directly by EUnit, without changes, as long as their function names match.</source>
          <target state="translated">これだけのテストでは、機能することを &lt;code&gt;lists:reverse(List)&lt;/code&gt; 時にクラッシュしない &lt;code&gt;List&lt;/code&gt; ある &lt;code&gt;[1,2,3]&lt;/code&gt; 。これは優れたテストではありませんが、多くの人はこのような単純な関数を記述してコードの基本的な機能をテストします。これらのテストは、関数名が一致する限り、変更せずにEUnitで直接使用できます。</target>
        </trans-unit>
        <trans-unit id="fe9522c485cb7d376d5642accb7a321aad5a05ed" translate="yes" xml:space="preserve">
          <source>This kind of parenthesis &quot;locks up&quot; the part of the pattern it contains once it has matched, and a failure further into the pattern is prevented from backtracking into it. Backtracking past it to previous items, however, works as normal.</source>
          <target state="translated">このようなカッコは、一度一致したパターンが含まれている部分を「ロックアップ」して、さらにパターンの中に失敗した場合には、バックトラッキングを防ぐことができます。しかし、これを過ぎて前の項目にバックトラックしても、通常通りに動作します。</target>
        </trans-unit>
        <trans-unit id="82013b529d675da98d4511e184ab7425bf09102f" translate="yes" xml:space="preserve">
          <source>This list is actually two - one for each direction server-to-client and client-to-server. Therefore it is possible but rare to have different algorithms in the two directions in one connection.</source>
          <target state="translated">このリストは実際には2つあります-サーバーからクライアントへの接続とクライアントからサーバーへの接続のそれぞれの方向に1つずつです。したがって、1つの接続で2つの方向で異なるアルゴリズムを持つことは可能ですが、稀です。</target>
        </trans-unit>
        <trans-unit id="cc0444143c5a31fc19d9928f133e7fc40ea61901" translate="yes" xml:space="preserve">
          <source>This list is also divided into two for the both directions</source>
          <target state="translated">このリストも両方向のために2つに分かれています。</target>
        </trans-unit>
        <trans-unit id="4f65aaceb7dbec6b1fb6792cf70ed6c05f03495f" translate="yes" xml:space="preserve">
          <source>This list is subject to change at any time, as is the category any given lock may belong to.</source>
          <target state="translated">このリストは、任意のロックが属する可能性のあるカテゴリと同様に、いつでも変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8667cb466629d5430d9bcf4d289713494e360097" translate="yes" xml:space="preserve">
          <source>This macro can also be used for conditional compilation, but is more typically used to disable testing: If &lt;code&gt;NOTEST&lt;/code&gt; is defined &lt;strong&gt;before&lt;/strong&gt; the EUnit header file is included, and &lt;code&gt;TEST&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; defined, then the code will be compiled with EUnit disabled. See also &lt;code&gt;&lt;a href=&quot;#Disabling_testing&quot;&gt;Disabling testing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このマクロは条件付きコンパイルにも使用できますが、通常はテストを無効にするために使用されます。EUnitヘッダーファイルが含まれる&lt;strong&gt;前に&lt;/strong&gt; &lt;code&gt;NOTEST&lt;/code&gt; が定義され、 &lt;code&gt;TEST&lt;/code&gt; が定義されて&lt;strong&gt;いない&lt;/strong&gt;場合、コードはEUnitを無効にしてコンパイルされます。 &lt;code&gt;&lt;a href=&quot;#Disabling_testing&quot;&gt;Disabling testing&lt;/a&gt;&lt;/code&gt; も参照してください。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5114889d9a6e68c62a0a1992ed05dd66a4ea6679" translate="yes" xml:space="preserve">
          <source>This macro is always defined (to &lt;code&gt;true&lt;/code&gt;, unless previously defined by the user to have another value) whenever EUnit is &lt;strong&gt;disabled&lt;/strong&gt; at compile time. (Compare the &lt;code&gt;TEST&lt;/code&gt; macro.)</source>
          <target state="translated">このマクロは、EUnitがコンパイル時に&lt;strong&gt;無効&lt;/strong&gt;になっている場合は常に（以前にユーザーが別の値を持つように定義していない限り、 &lt;code&gt;true&lt;/code&gt; に）定義されます。（ &lt;code&gt;TEST&lt;/code&gt; マクロを比較してください。）&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ace903cd27c28d656c86413693b1c2b7cebb1c45" translate="yes" xml:space="preserve">
          <source>This macro is always defined (to &lt;code&gt;true&lt;/code&gt;, unless previously defined by the user to have another value) whenever EUnit is enabled at compile time. This can be used to place testing code within conditional compilation; see also the macros &lt;code&gt;NOTEST&lt;/code&gt; and &lt;code&gt;EUNIT&lt;/code&gt;.</source>
          <target state="translated">このマクロは、EUnitがコンパイル時に有効になるたびに（ユーザーが別の値を持つように以前に定義した場合を除き、 &lt;code&gt;true&lt;/code&gt; に）常に定義されます。これは、条件付きコンパイル内にテストコードを配置するために使用できます。マクロ &lt;code&gt;NOTEST&lt;/code&gt; および &lt;code&gt;EUNIT&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="ce0e6792b17f6782871d2727d10c5675a63bdafd" translate="yes" xml:space="preserve">
          <source>This macro is always defined to &lt;code&gt;true&lt;/code&gt; whenever EUnit is enabled at compile time. This is typically used to place testing code within conditional compilation, as in:</source>
          <target state="translated">このマクロは、コンパイル時にEUnitが有効になると常に &lt;code&gt;true&lt;/code&gt; に定義されます。これは通常、次のように、テストコードを条件付きコンパイル内に配置するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f9a17853871676c0efbbea7592f31b8e2c70ba24" translate="yes" xml:space="preserve">
          <source>This macro is useful in the setup and cleanup sections of fixtures, e.g., for creating and deleting files or perform similar operating system specific tasks, to make sure that the test system is informed of any failures.</source>
          <target state="translated">このマクロは、フィクスチャのセットアップやクリーンアップのセクションで、例えば、ファイルの作成や削除、あるいは同様のオペレーティング・システム特有のタスクを実行して、テストシステムに障害が発生したことを確実に知らせるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3e065ddbb311347232c6065a89455d54a53e02c6" translate="yes" xml:space="preserve">
          <source>This makes it possible to extend the protocol with optional requests and for the clients to be somewhat backward compatible.</source>
          <target state="translated">これにより、オプションのリクエストでプロトコルを拡張することが可能になり、クライアントは多少後方互換性を持つようになります。</target>
        </trans-unit>
        <trans-unit id="f4d660f58a84c58c9d56e335532b3deb651bfa98" translate="yes" xml:space="preserve">
          <source>This makes the &lt;code&gt;gen_statem&lt;/code&gt; call callback function &lt;code&gt;terminate/3&lt;/code&gt; just like for a supervised server and waits for the process to terminate.</source>
          <target state="translated">これにより、監視対象サーバーと同じように &lt;code&gt;gen_statem&lt;/code&gt; コールコールバック関数が &lt;code&gt;terminate/3&lt;/code&gt; になり、プロセスが終了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="d7f81c6c5bf6cf515d1e9f111e538332017866ee" translate="yes" xml:space="preserve">
          <source>This makes the fragment independent of the parentheses in the larger pattern.</source>
          <target state="translated">これにより、フラグメントは大きなパターンの括弧から独立したものになります。</target>
        </trans-unit>
        <trans-unit id="49587f7146156380abd9cd71341e113bb523de56" translate="yes" xml:space="preserve">
          <source>This manual describes the &lt;code&gt;Event Tracer (ET)&lt;/code&gt; application, as a component of the Erlang/Open Telecom Platform development environment. It is assumed that the reader is familiar with the Erlang Development Environment, which is described in a separate User's Guide.</source>
          <target state="translated">このマニュアルでは、Erlang / Open Telecom Platform開発環境のコンポーネントとしての &lt;code&gt;Event Tracer (ET)&lt;/code&gt; アプリケーションについて説明します。読者は、別のユーザーズガイドで説明されているErlang開発環境に精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="f54f98ecb63f059bc0f3f16893d00b0178de2ead" translate="yes" xml:space="preserve">
          <source>This manual describes the Megaco application, as a component of the Erlang/Open Telecom Platform development environment. It is assumed that the reader is familiar with the Erlang Development Environment, which is described in a separate User's Guide.</source>
          <target state="translated">このマニュアルでは、Erlang/Open Telecom Platform開発環境のコンポーネントとしてMegacoアプリケーションについて説明します。読者は、別のユーザーズガイドで説明されているErlang開発環境に精通していることが前提となっています。</target>
        </trans-unit>
        <trans-unit id="3565b9c0bcf6e9edf6874ed477820b3f0f6afff4" translate="yes" xml:space="preserve">
          <source>This manual describes the Reltool application, as a component of the Erlang/Open Telecom Platform development environment. It is assumed that the reader is familiar with the Erlang Development Environment, which is described in a separate User's Guide.</source>
          <target state="translated">このマニュアルでは、Erlang/Open Telecom Platform開発環境のコンポーネントとしてのReltoolアプリケーションについて説明しています。読者は別のユーザーズガイドで説明されているErlang開発環境に精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="15184424397c18e9f422c74e5e74ac83b7f03ff2" translate="yes" xml:space="preserve">
          <source>This manual describes the SNMP development tool, as a component of the Erlang/Open Telecom Platform development environment. It is assumed that the reader is familiar with the Erlang Development Environment, which is described in a separate User's Guide.</source>
          <target state="translated">このマニュアルでは、Erlang/Open Telecom Platform開発環境のコンポーネントとしてSNMP開発ツールについて説明します。読者は別のユーザーズガイドで説明されているErlang開発環境に精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="193220694d15266d7cc69378ef8f2e63c4cd4f53" translate="yes" xml:space="preserve">
          <source>This match specification can be specified as the last argument to &lt;code&gt;tp&lt;/code&gt; or &lt;code&gt;tpl&lt;/code&gt;. The activated &lt;code&gt;Item&lt;/code&gt; then becomes a &lt;strong&gt;trigger&lt;/strong&gt; for sequential tracing. This means that if the item is called on a process with trace flag &lt;code&gt;call&lt;/code&gt; set, the process is &quot;contaminated&quot; with token &lt;code&gt;seq_trace&lt;/code&gt;.</source>
          <target state="translated">この一致指定は、 &lt;code&gt;tp&lt;/code&gt; または &lt;code&gt;tpl&lt;/code&gt; の最後の引数として指定できます。次に、アクティブ化された &lt;code&gt;Item&lt;/code&gt; が順次トレースの&lt;strong&gt;トリガー&lt;/strong&gt;になります。これは、トレースフラグ &lt;code&gt;call&lt;/code&gt; 設定されているプロセスでアイテムが呼び出された場合、プロセスはトークン &lt;code&gt;seq_trace&lt;/code&gt; で「汚染」されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="b5770f3057dc3732a2c219c409191a4bcf36e051" translate="yes" xml:space="preserve">
          <source>This matches &quot;xxaab&quot; but not &quot;aacaab&quot;. It can be thought of as a kind of dynamic anchor, or &quot;I've started, so I must finish&quot;. The name of the most recently passed (*MARK) in the path is passed back when (*COMMIT) forces a match failure.</source>
          <target state="translated">これは「xxaab」と一致しますが、「aacaab」とは一致しません。これは一種の動的なアンカーというか、「始めたから終わりにしなければならない」と考えることができます。(*COMMIT)が強制的にマッチ失敗したときに、パスの中で最も最近渡された(*MARK)の名前が引き渡されます。</target>
        </trans-unit>
        <trans-unit id="5a54f8d6fa87944f3859d8aacba8377d13f4ab03" translate="yes" xml:space="preserve">
          <source>This matches all characters that have the Unicode P (punctuation) property, plus those characters whose code points are less than 128 that have the S (Symbol) property.</source>
          <target state="translated">これは、Unicode P (句読点)プロパティを持つすべての文字と、コードポイントが 128 未満で S (記号)プロパティを持つ文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="4060f37dc8e959716bd75592eaf33dbbe9422b23" translate="yes" xml:space="preserve">
          <source>This matches characters that have glyphs that mark the page when printed. In Unicode property terms, it matches all characters with the L, M, N, P, S, or Cf properties, except for:</source>
          <target state="translated">これは、 印刷時にページをマークするグリフを持つキ ャ ラ ク タ にマッチします。Unicode プ ロ パテ ィ の用語では、 L ・ M ・ N ・ P ・ S ・ Cf プ ロ パテ ィ を持つすべてのキ ャ ラ ク タ に対 し て、 それ以外のキ ャ ラ ク タ に対 し て マ ッ チ し ます。</target>
        </trans-unit>
        <trans-unit id="80aa7005a5a9b662614697fc0718ba90f2d5eb3f" translate="yes" xml:space="preserve">
          <source>This matches the same characters as [:graph:] plus space characters that are not controls, that is, characters with the Zs property.</source>
          <target state="translated">これは、[:graph:]と同じ文字に加えて、コントロールではないスペース文字、つまりZsプロパティを持つ文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="596241cc1fad7ba2b8c15f7e59f64a7ddc1befdd" translate="yes" xml:space="preserve">
          <source>This means that if there is more than one way to locate a group (and its test cases) in a path, the result of the group search operation is a number of tests, all of which are to be performed. &lt;code&gt;Common Test&lt;/code&gt; interprets a group specification that consists of a single name as follows:</source>
          <target state="translated">つまり、パス内でグループ（およびそのテストケース）を見つける方法が複数ある場合、グループ検索操作の結果はいくつかのテストとなり、そのすべてが実行されます。 &lt;code&gt;Common Test&lt;/code&gt; は、単一の名前で構成されるグループ仕様を次のように解釈します。</target>
        </trans-unit>
        <trans-unit id="22a98636e075cad89494908c0027932db4587e6e" translate="yes" xml:space="preserve">
          <source>This means that no bit higher than 31 can be set.</source>
          <target state="translated">つまり、31よりも上位のビットは設定できません。</target>
        </trans-unit>
        <trans-unit id="df996ca43fed811b9266d44d0025a342f366a979" translate="yes" xml:space="preserve">
          <source>This means that parameter values set in the other system configuration files and values set using &lt;code&gt;application:set_env/3&lt;/code&gt; are disregarded.</source>
          <target state="translated">つまり、他のシステム構成ファイルで設定されたパラメーター値と &lt;code&gt;application:set_env/3&lt;/code&gt; を使用して設定された値は無視されます。</target>
        </trans-unit>
        <trans-unit id="8f13bbc91d440e811da4676f3e7ca92ea54d9f50" translate="yes" xml:space="preserve">
          <source>This means that runaway regular expression matches can fail faster if the limit is lowered using this option. The default value 10,000,000 is compiled into the Erlang VM.</source>
          <target state="translated">つまり、このオプションを使って制限値を下げれば、正規表現のマッチの暴走がより速く失敗することができます。デフォルト値10,000,000はErlang VMにコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="932d8129dcaf5494e901e2360eca271fe2d0ad88" translate="yes" xml:space="preserve">
          <source>This means that specifying another &lt;code&gt;.config&lt;/code&gt; file, or more &lt;code&gt;.config&lt;/code&gt; files, leads to inconsistent update of application configurations. There is, however, a syntax for &lt;code&gt;sys.config&lt;/code&gt; that allows pointing out other &lt;code&gt;.config&lt;/code&gt; files:</source>
          <target state="translated">つまり、別の &lt;code&gt;.config&lt;/code&gt; ファイル、または複数の &lt;code&gt;.config&lt;/code&gt; ファイルを指定すると、アプリケーション構成の更新に一貫性がなくなります。ただし、 &lt;code&gt;sys.config&lt;/code&gt; には、他の &lt;code&gt;.config&lt;/code&gt; ファイルを指定できる構文があります。</target>
        </trans-unit>
        <trans-unit id="2200dc5ecc3e0975342e26ce8ac3610348c991da" translate="yes" xml:space="preserve">
          <source>This means that the application is preferably to be started at &lt;code&gt;cp1@cave&lt;/code&gt;. If &lt;code&gt;cp1@cave&lt;/code&gt; is down, the application is to be started at &lt;code&gt;cp2@cave&lt;/code&gt; or &lt;code&gt;cp3@cave&lt;/code&gt;.</source>
          <target state="translated">これは、アプリケーションが &lt;code&gt;cp1@cave&lt;/code&gt; 開始されることが望ましいことを意味します。場合 &lt;code&gt;cp1@cave&lt;/code&gt; ダウンして、アプリケーションがで開始する &lt;code&gt;cp2@cave&lt;/code&gt; や &lt;code&gt;cp3@cave&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="106bb3bedaf49597cebe6d920a66bd4eef59b102" translate="yes" xml:space="preserve">
          <source>This means that the context (an opaque type) returned from streaming crypto functions (&lt;code&gt;hash_(init|update|final)&lt;/code&gt;, &lt;code&gt;hmac_(init|update|final)&lt;/code&gt; and &lt;code&gt;stream_(init|encrypt|decrypt)&lt;/code&gt;) is different and incompatible with regular builds when compiling crypto with FIPS support.</source>
          <target state="translated">これは、ストリーミング暗号化関数（ &lt;code&gt;hash_(init|update|final)&lt;/code&gt; 、 &lt;code&gt;hmac_(init|update|final)&lt;/code&gt; および &lt;code&gt;stream_(init|encrypt|decrypt)&lt;/code&gt; ）から返されるコンテキスト（不透明なタイプ）が異なり、通常のビルドと互換性がないことを意味しますFIPSサポートを使用して暗号をコンパイルする場合。</target>
        </trans-unit>
        <trans-unit id="36077c72e710c444ae2797c20c5e8799b4acfa03" translate="yes" xml:space="preserve">
          <source>This means that the match specification is always a list of one or more tuples (of arity 3). The first element of the tuple is to be a pattern as described in &lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt;. The second element of the tuple is to be a list of 0 or more guard tests (described below). The third element of the tuple is to be a list containing a description of the value to return. In almost all normal cases, the list contains exactly one term that fully describes the value to return for each object.</source>
          <target state="translated">これは、一致指定が常に1つ以上のタプル（アリティ3）のリストであることを意味します。タプルの最初の要素は、 &lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt; で説明されているパターンになります。タプルの2番目の要素は、0以上のガードテスト（以下で説明）のリストです。タプルの3番目の要素は、返す値の説明を含むリストです。ほとんどすべての通常の場合、リストには、各オブジェクトに対して返す値を完全に説明する用語が1つだけ含まれています。</target>
        </trans-unit>
        <trans-unit id="f7aa9f1a915ce26bfe5ca3abc7eefe46479cfe4b" translate="yes" xml:space="preserve">
          <source>This means that when running, an included application is in fact part of the primary application, and a process in an included application considers itself belonging to the primary application.</source>
          <target state="translated">これは、実行時には、インクルードされたアプリケーションは実際にはプライマリアプリケーションの一部であり、インクルードされたアプリケーションのプロセスは、それ自身がプライマリアプリケーションに属していると考えていることを意味します。</target>
        </trans-unit>
        <trans-unit id="8c76b8edc5c31749772c3e7c79034a31599a007d" translate="yes" xml:space="preserve">
          <source>This mechanism causes the new versions of the emulator and core applications to run with the old version of other applications during startup. Thus, take extra care to avoid incompatibility. Incompatible changes in the core applications can in some situations be necessary. If possible, such changes are preceded by deprecation over two major releases before the actual change. To ensure the application is not crashed by an incompatible change, always remove any call to deprecated functions as soon as possible.</source>
          <target state="translated">この仕組みにより、エミュレータやコアアプリケーションの新バージョンが起動時に他のアプリケーションの旧バージョンと一緒に実行されてしまいます。したがって、非互換性を避けるために十分な注意を払ってください。状況によっては、コアアプリケーションの互換性のない変更が必要になることがあります。可能であれば、そのような変更は、実際の変更の前に2つのメジャーリリースにわたって非推奨となります。互換性のない変更によってアプリケーションがクラッシュしないようにするために、非推奨の関数への呼び出しは常に可能な限り早く削除してください。</target>
        </trans-unit>
        <trans-unit id="e3157f67a5eef33bc0f27dfb7ed55e0358006331" translate="yes" xml:space="preserve">
          <source>This message appears if &lt;code&gt;{ok, pending_driver}&lt;/code&gt; was returned from &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; for the last &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of the driver, and then &lt;code&gt;{ok, already_loaded}&lt;/code&gt; is returned from a call to &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメッセージは表示された場合 &lt;code&gt;{ok, pending_driver}&lt;/code&gt; から返された &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; 最後のために &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; ドライバの、その後 &lt;code&gt;{ok, already_loaded}&lt;/code&gt; への呼び出しから返され &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7443815abce9a78b8f12e9b4a8006f7ab0678558" translate="yes" xml:space="preserve">
          <source>This message arrives if reloading was underway but the loading for some reason failed. The &lt;code&gt;Failure&lt;/code&gt; term is one of the errors that can be returned from &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt;. The error term can be passed to &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; for translation into human readable form. Notice that the translation must be done in the same running Erlang virtual machine as the error was detected in.</source>
          <target state="translated">このメッセージは、リロードが進行中であるが何らかの理由でロードが失敗した場合に表示されます。 &lt;code&gt;Failure&lt;/code&gt; 用語から返されるエラーの一つである &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; 。エラー項は、人間が読める形式に変換するために &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; に渡すことができます。エラーが検出されたのと同じ実行中のErlang仮想マシンで変換を行う必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1fd84b520be9e9ea3d84c401734e82ebe7eac97d" translate="yes" xml:space="preserve">
          <source>This message arrives if reloading was underway, but the requesting &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; cancelled it by dying or calling &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; (or &lt;code&gt;unload/1&lt;/code&gt;/&lt;code&gt;unload_driver/1&lt;/code&gt;) again before it was reloaded.</source>
          <target state="translated">このメッセージは、再ロードが進行中の場合に到着し &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; が、要求元のユーザーは、再ロードする前に、再 &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; か、try_unload / 2（または &lt;code&gt;unload/1&lt;/code&gt; / &lt;code&gt;unload_driver/1&lt;/code&gt; ）を呼び出すことによってキャンセルしました。</target>
        </trans-unit>
        <trans-unit id="d6bd04f8e274c08cef04fc4e45d10c02182267ab" translate="yes" xml:space="preserve">
          <source>This message is only sent to a transport process over whose &lt;code&gt;Inband-Security-Id&lt;/code&gt; configuration has indicated support for TLS.</source>
          <target state="translated">このメッセージは、TLSのサポートが &lt;code&gt;Inband-Security-Id&lt;/code&gt; 構成で示されているトランスポートプロセスにのみ送信されます。</target>
        </trans-unit>
        <trans-unit id="c9fe7d956f6a48c7301aa47c203d863f991af167" translate="yes" xml:space="preserve">
          <source>This message is sent either immediately if the driver is already loaded and no reloading is pending, or when reloading is executed if reloading is pending.</source>
          <target state="translated">このメッセージは、ドライバが既にロードされていてリロードが保留されていない場合は直ちに送信され、リロードが保留されている場合はリロードが実行されたときに送信されます。</target>
        </trans-unit>
        <trans-unit id="b59c3f75f12fd3dcb8bfccc7fe935cad829ca36a" translate="yes" xml:space="preserve">
          <source>This message is sent from a master agent if it for some reason decided to discard the pdu.</source>
          <target state="translated">このメッセージは、何らかの理由でマスターエージェントが pdu を破棄することを決定した場合に、マスターエージェントから送信されます。</target>
        </trans-unit>
        <trans-unit id="829114beb9c3f31023ae657dbb8e8d0e25c1f282" translate="yes" xml:space="preserve">
          <source>This message is sent from a master agent when a request is to be sent. The only request an agent can send is Inform-Request. The net if process needs to remember the request id and the Pid, and when a response is received for the request id, send it to Pid, using a &lt;code&gt;snmp_response_received&lt;/code&gt; message.</source>
          <target state="translated">このメッセージは、リクエストが送信されるときにマスターエージェントから送信されます。エージェントが送信できる唯一の要求はInform-Requestです。プロセスが要求IDとPidを覚えておく必要があるネットの場合、要求IDに対する応答を受信し &lt;code&gt;snmp_response_received&lt;/code&gt; 、snmp_response_receivedメッセージを使用してそれをPidに送信します。</target>
        </trans-unit>
        <trans-unit id="e5f157b9c3b08af7fd2a99ceb91dfce727fcf26b" translate="yes" xml:space="preserve">
          <source>This message is sent from a master agent when a trap is to be sent.</source>
          <target state="translated">このメッセージは、トラップを送信する際にマスターエージェントから送信されます。</target>
        </trans-unit>
        <trans-unit id="d441c31108c7576d3cbad8491a4c4b23596427f8" translate="yes" xml:space="preserve">
          <source>This message is sent if reloading was expected, but the (old) driver made itself permanent before reloading. It is also sent if the driver was permanent or statically linked-in when trying to create the monitor.</source>
          <target state="translated">このメッセージは、リロードが期待されていたが、(古い)ドライバがリロード前に自分自身をパーマネントにした場合に送信されます。また、モニタを作成しようとしたときにドライバがパーマネントであった場合、または静的にリンクされていた場合にも送信されます。</target>
        </trans-unit>
        <trans-unit id="2a9a7c62be17cb4236568289a04568a0ca14d646" translate="yes" xml:space="preserve">
          <source>This message is sent if unloading was expected, but the driver made itself permanent before unloading. It is also sent if trying to monitor a permanent or statically linked-in driver.</source>
          <target state="translated">このメッセージは、アンロードが期待されていたが、アンロードの前にドライバが自分自身をパーマネントにした場合に送信される。また、パーマネントまたは静的にリンクされたドライバを監視しようとしている場合にも送信される。</target>
        </trans-unit>
        <trans-unit id="55cf023d178c69ab93cb5f5b6795668204cbf186" translate="yes" xml:space="preserve">
          <source>This message is sent if unloading was expected, but while the driver was waiting for all ports to get closed, a new &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of the driver appeared, and the unloading was cancelled.</source>
          <target state="translated">このメッセージは、アンロードが予想される場合に送信されますが、ドライバーがすべてのポートが閉じられるのを待っている間に、ドライバーの新しい &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; が表示され、アンロードがキャンセルされました。</target>
        </trans-unit>
        <trans-unit id="f4e7b699a7ae096287dd7808194507f6d50b3e91" translate="yes" xml:space="preserve">
          <source>This message is sent to the Net if process from a master agent as a response to a previously received request.</source>
          <target state="translated">このメッセージは、以前に受信したリクエストに対する応答として、マスターエージェントからネットイフプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="9a28b745a2e2cc7649e2af78230f7339cfe78c45" translate="yes" xml:space="preserve">
          <source>This message is used by the release handler to find which processes that execute a certain module. The process can later be suspended and ordered to perform a code change for one of its modules.</source>
          <target state="translated">このメッセージは、リリースハンドラが特定のモジュールを実行するプロセスを見つけるために使用されます。そのプロセスは後で中断され、そのモジュールの一つのコード変更を実行するように命令されることがあります。</target>
        </trans-unit>
        <trans-unit id="afd8dba6b75e3f001a723a1efc9d9ff4abf7b225" translate="yes" xml:space="preserve">
          <source>This message requests that the server starts execution of the given command. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#exec-4&quot;&gt;ssh_connection:exec/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメッセージは、サーバーが指定されたコマンドの実行を開始することを要求します。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#exec-4&quot;&gt;ssh_connection:exec/4&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="e505234f686d8ab1a451d96190a8bff8adf1ec9a" translate="yes" xml:space="preserve">
          <source>This message requests that the user default shell is started at the other end. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#shell-2&quot;&gt;ssh_connection:shell/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメッセージは、ユーザーのデフォルトシェルをもう一方の端で起動するように要求します。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#shell-2&quot;&gt;ssh_connection:shell/2&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="1fc986c5547b793c1d6d354a196fdaa59d4a31d9" translate="yes" xml:space="preserve">
          <source>This mode can also be activated with flag &lt;code&gt;silent&lt;/code&gt; to &lt;code&gt;erlang:trace/3&lt;/code&gt;.</source>
          <target state="translated">このモードは、 &lt;code&gt;erlang:trace/3&lt;/code&gt; に対して &lt;code&gt;silent&lt;/code&gt; フラグを使用してアクティブにすることもできます。</target>
        </trans-unit>
        <trans-unit id="6a11330d6901fd7311c10340dd7bf642645e942b" translate="yes" xml:space="preserve">
          <source>This mode fits well when you have a regular state diagram, like the ones in this chapter, which describes all events and actions belonging to a state visually around that state, and each state has its unique name.</source>
          <target state="translated">このモードは、この章で紹介するような通常の状態図がある場合に適しています。この図は、状態に属するすべてのイベントとアクションをその状態の周りに視覚的に記述し、各状態には固有の名前が付いています。</target>
        </trans-unit>
        <trans-unit id="bb204752ab758821e61472ec417419d5f3d9971e" translate="yes" xml:space="preserve">
          <source>This mode is more or less a backward compatibility mode as from its introduction.</source>
          <target state="translated">このモードは導入時から多かれ少なかれ下位互換モードとなっています。</target>
        </trans-unit>
        <trans-unit id="172f14b940b1b2c6900b1372fa3316ca07a87e44" translate="yes" xml:space="preserve">
          <source>This mode works equally well when you want to focus on one event at the time or on one state at the time, but function &lt;code&gt;Module:handle_event/4&lt;/code&gt; quickly grows too large to handle without branching to helper functions.</source>
          <target state="translated">このモードは、一度に1つのイベントまたは一度に1つの状態に焦点を当てたい場合にも同様に機能しますが、関数 &lt;code&gt;Module:handle_event/4&lt;/code&gt; は急速に大きくなりすぎて、ヘルパー関数に分岐しないと処理できません。</target>
        </trans-unit>
        <trans-unit id="5fdef418c42eba77018e8e42460b63d278950bac" translate="yes" xml:space="preserve">
          <source>This model has only three different tables, and the employee records contain references to other records. The record has the following references:</source>
          <target state="translated">このモデルには3つの異なるテーブルしかなく、従業員レコードには他のレコードへの参照が含まれています。レコードには以下の参照が含まれています。</target>
        </trans-unit>
        <trans-unit id="b3ce72021e00b147c9199fb77c9a3762a844a3df" translate="yes" xml:space="preserve">
          <source>This module also provides facilities for displaying status information about interpreted processes and break points.</source>
          <target state="translated">このモジュールは、解釈されたプロセスやブレークポイントに関するステータス情報を表示するための機能も提供します。</target>
        </trans-unit>
        <trans-unit id="817190ceec75c6fa4d3197e4a1b86534327d94e7" translate="yes" xml:space="preserve">
          <source>This module also supports the following annotations, which are used by various modules:</source>
          <target state="translated">また、このモジュールは以下のようなアノテーションをサポートしており、様々なモジュールで使用されています。</target>
        </trans-unit>
        <trans-unit id="c1519372f968a7c83f80d29c6d04dbd62347e6bd" translate="yes" xml:space="preserve">
          <source>This module archives and extract files to and from a tar file. This module supports reading most common tar formats, namely v7, STAR, USTAR, and PAX, as well as some of GNU tar's extensions to the USTAR format (sparse files most notably). It produces tar archives in USTAR format, unless the files being archived require PAX format due to restrictions in USTAR (such as unicode metadata, filename length, and more). As such, &lt;code&gt;erl_tar&lt;/code&gt; supports tar archives produced by most all modern tar utilities, and produces tarballs which should be similarly portable.</source>
          <target state="translated">このモジュールは、tarファイルとの間でファイルをアーカイブおよび抽出します。このモジュールは、最も一般的なtar形式、つまりv7、STAR、USTAR、およびPAXの読み取りと、USTAR形式に対するGNU tarの拡張機能（特にスパースファイル）の読み取りをサポートしています。アーカイブされるファイルがUSTARの制限（Unicodeメタデータ、ファイル名の長さなど）のためにPAX形式を必要としない限り、それはUSTAR形式でtarアーカイブを生成します。そのため、 &lt;code&gt;erl_tar&lt;/code&gt; は、ほとんどすべての最新のtarユーティリティによって生成されるtarアーカイブをサポートし、同様に移植可能なtarballを生成します。</target>
        </trans-unit>
        <trans-unit id="c93dc94853da5f65dd0f19dd1ea05a3d6a2b52f1" translate="yes" xml:space="preserve">
          <source>This module archives and extracts files to and from a zip archive. The zip format is specified by the &quot;ZIP Appnote.txt&quot; file, available on the PKWARE web site &lt;code&gt;&lt;a href=&quot;http://www.pkware.com&quot;&gt;www.pkware.com&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、zipアーカイブとの間でファイルをアーカイブおよび抽出します。zip形式は、PKWARE Webサイト &lt;code&gt;&lt;a href=&quot;http://www.pkware.com&quot;&gt;www.pkware.com&lt;/a&gt;&lt;/code&gt; から入手できる「ZIP Appnote.txt」ファイルで指定されています。</target>
        </trans-unit>
        <trans-unit id="5ebed77e7881e24d9d50b032e03940e9bdf36b09" translate="yes" xml:space="preserve">
          <source>This module can also be found in the &lt;code&gt;examples&lt;/code&gt; directory of the SASL application.</source>
          <target state="translated">このモジュールは、SASLアプリケーションの &lt;code&gt;examples&lt;/code&gt; ディレクトリにもあります。</target>
        </trans-unit>
        <trans-unit id="1aca0b6e822b7c6d0a2dee5904564049e299817d" translate="yes" xml:space="preserve">
          <source>This module can also be viewed as a behaviour for an application implemented according to the OTP design principles as a supervision tree. The definition of how to start and stop the tree is to be located in an &lt;strong&gt;application callback module&lt;/strong&gt;, exporting a predefined set of functions.</source>
          <target state="translated">このモジュールは、OTP設計原則に従って監視ツリーとして実装されたアプリケーションの動作と見なすこともできます。ツリーを開始および停止する方法の定義は、事前定義された関数のセットをエクスポートする&lt;strong&gt;アプリケーションコールバックモジュール&lt;/strong&gt;にあります。</target>
        </trans-unit>
        <trans-unit id="46fe9ebbf441b09ed18ab05af78ee6b86682c8d6" translate="yes" xml:space="preserve">
          <source>This module can be used as follows:</source>
          <target state="translated">このモジュールは以下のように使用できます。</target>
        </trans-unit>
        <trans-unit id="686c65b4a65c34ff9cf138f3076e44dd59452f8f" translate="yes" xml:space="preserve">
          <source>This module can be used to run a set of Erlang nodes as a pool of computational processors. It is organized as a master and a set of slave nodes and includes the following features:</source>
          <target state="translated">このモジュールはErlangノードのセットを計算プロセッサのプールとして実行するために使われます。マスターノードとスレーブノードのセットとして構成されており、以下の機能を持っています。</target>
        </trans-unit>
        <trans-unit id="af82f371bff5810258c512bac2aa2370e799470c" translate="yes" xml:space="preserve">
          <source>This module communicates with the EPMD daemon, see &lt;code&gt;epmd&lt;/code&gt;. To implement your own epmd module please see &lt;code&gt;ERTS User's Guide: How to Implement an Alternative Service Discovery for Erlang Distribution&lt;/code&gt;</source>
          <target state="translated">このモジュールはEPMDデーモンと通信します &lt;code&gt;epmd&lt;/code&gt; 参照してください。独自のepmdモジュールを実装するには、 &lt;code&gt;ERTS User's Guide: How to Implement an Alternative Service Discovery for Erlang Distribution&lt;/code&gt; 参照してください</target>
        </trans-unit>
        <trans-unit id="3b4ce3dec0f26e77853815afd7b3cb63b31d970f" translate="yes" xml:space="preserve">
          <source>This module considers two elements as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、2つの要素が等しいと比較されない（ &lt;code&gt;==&lt;/code&gt; ）場合に限り、2つの要素を異なるものと見なします。</target>
        </trans-unit>
        <trans-unit id="0be9d79105e371fa97debd95b84b58219b4279ea" translate="yes" xml:space="preserve">
          <source>This module considers two keys as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、2つのキーが等しいと比較しない場合（ &lt;code&gt;==&lt;/code&gt; ）に限り、2つのキーを異なるものと見なします。</target>
        </trans-unit>
        <trans-unit id="f7838291047ac4d60e0139ec156a7e643ad4faaa" translate="yes" xml:space="preserve">
          <source>This module consists of the following services:</source>
          <target state="translated">このモジュールは以下のサービスで構成されています。</target>
        </trans-unit>
        <trans-unit id="ff598a317fac529d717bd1f848d0ec9eaa2f5e61" translate="yes" xml:space="preserve">
          <source>This module contains functions for converting between different character representations. It converts between ISO Latin-1 characters and Unicode characters, but it can also convert between different Unicode encodings (like UTF-8, UTF-16, and UTF-32).</source>
          <target state="translated">このモジュールは、異なる文字表現間で変換するための関数を含んでいます。ISO Latin-1 文字と Unicode 文字の間で変換しますが、異なる Unicode エンコーディング (UTF-8,UTF-16,UTF-32 など)の間でも変換することができます。</target>
        </trans-unit>
        <trans-unit id="b5b9240d86d995a89ac9eb37eda08d6f1ac2c51e" translate="yes" xml:space="preserve">
          <source>This module contains functions for converting to and from strings (lists of characters). They are used for implementing the functions in the &lt;code&gt;&lt;a href=&quot;io&quot;&gt;io&lt;/a&gt;&lt;/code&gt; module. There is no guarantee that the character lists returned from some of the functions are flat, they can be deep lists. Function &lt;code&gt;&lt;a href=&quot;lists#flatten-1&quot;&gt;lists:flatten/1&lt;/a&gt;&lt;/code&gt; can be used for flattening deep lists.</source>
          <target state="translated">このモジュールには、文字列（文字のリスト）との間で変換を行うための関数が含まれています。これらは、 &lt;code&gt;&lt;a href=&quot;io&quot;&gt;io&lt;/a&gt;&lt;/code&gt; モジュールの機能を実装するために使用されます。一部の関数から返される文字リストがフラットである保証はなく、ディープリストにすることができます。関数 &lt;code&gt;&lt;a href=&quot;lists#flatten-1&quot;&gt;lists:flatten/1&lt;/a&gt;&lt;/code&gt; は、深いリストをフラット化するために使用できます。</target>
        </trans-unit>
        <trans-unit id="837f779fb53a71d0c4ae19998076438feb1919ac" translate="yes" xml:space="preserve">
          <source>This module contains functions for encoding Erlang terms into a sequence of bytes, and for decoding Erlang terms from a sequence of bytes.</source>
          <target state="translated">このモジュールには、Erlangの項をバイト列にエンコードしたり、バイト列からErlangの項をデコードしたりする関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="de911f7e348fe07047fba5ab0f536e33890e3df9" translate="yes" xml:space="preserve">
          <source>This module contains functions for inserting comments, described by position, indentation and text, as attachments on an abstract syntax tree, at the correct places.</source>
          <target state="translated">このモジュールは、位置、インデント、テキストで記述されたコメントを、抽象構文ツリー上の適切な場所に添付ファイルとして挿入するための関数を含みます。</target>
        </trans-unit>
        <trans-unit id="59032641754c334d2119d69e35fd6099ad62842c" translate="yes" xml:space="preserve">
          <source>This module contains functions for list processing.</source>
          <target state="translated">このモジュールにはリスト処理のための関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="81e43c82257cd393c01258396233b38bac085577" translate="yes" xml:space="preserve">
          <source>This module contains functions for manipulating byte-oriented binaries. Although the majority of functions could be provided using bit-syntax, the functions in this library are highly optimized and are expected to either execute faster or consume less memory, or both, than a counterpart written in pure Erlang.</source>
          <target state="translated">このモジュールはバイト指向のバイナリを操作するための関数を含んでいます。ほとんどの関数はビットシンタックスを使って提供することができますが、このライブラリの関数は高度に最適化されており、純粋なErlangで書かれたものよりも高速に実行されるか、メモリ消費量が少なくなるか、あるいはその両方が期待されています。</target>
        </trans-unit>
        <trans-unit id="50ccc7ec1143773aaedcc8657aa657008607be3a" translate="yes" xml:space="preserve">
          <source>This module contains functions for maps processing.</source>
          <target state="translated">このモジュールには、マップ処理のための関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="50f0b83fe2516bf67a941d2bd6474f61aeee90ee" translate="yes" xml:space="preserve">
          <source>This module contains functions for parsing and handling URIs (&lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;) and form-urlencoded query strings (&lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html52/&quot;&gt;HTML 5.2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">このモジュールには、URIを解析および処理するための関数（ &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; ）とform-urlencodedクエリ文字列（ &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html52/&quot;&gt;HTML 5.2&lt;/a&gt;&lt;/code&gt; ）が含まれています。</target>
        </trans-unit>
        <trans-unit id="ca7843662571b136297297d4631b70479e539fd0" translate="yes" xml:space="preserve">
          <source>This module contains functions for sending system messages used by programs, and messages used for debugging purposes.</source>
          <target state="translated">プログラムが使用するシステムメッセージや、デバッグ用のメッセージを送信するための関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="49fe7206d616c14253dcbc198d4a64077934564a" translate="yes" xml:space="preserve">
          <source>This module contains functions for sorting terms on files, merging already sorted files, and checking files for sortedness. Chunks containing binary terms are read from a sequence of files, sorted internally in memory and written on temporary files, which are merged producing one sorted file as output. Merging is provided as an optimization; it is faster when the files are already sorted, but it always works to sort instead of merge.</source>
          <target state="translated">このモジュールには、ファイル上の用語のソート、既にソートされたファイルのマージ、ソートされているかどうかのチェックを行う関数が含まれています。バイナリ用語を含むチャンクは、一連のファイルから読み込まれ、メモリ内で内部的にソートされ、一時ファイルに書き込まれ、それらがマージされてソートされたファイルが出力されます。マージは最適化として提供されています。ファイルが既にソートされている場合はより高速になりますが、マージではなくソートするように常に動作します。</target>
        </trans-unit>
        <trans-unit id="5326d602d1276804a6e5daef142fc199cc00ce06" translate="yes" xml:space="preserve">
          <source>This module contains functions for tokenizing (scanning) characters into Erlang tokens.</source>
          <target state="translated">このモジュールは文字をErlangトークンにトークン化(スキャン)する関数を含んでいます。</target>
        </trans-unit>
        <trans-unit id="994f1f991d1dfea12bae127e267a7c21607503f3" translate="yes" xml:space="preserve">
          <source>This module contains functions to generate boot scripts (&lt;code&gt;.boot&lt;/code&gt;, &lt;code&gt;.script&lt;/code&gt;), a release upgrade file (&lt;code&gt;relup&lt;/code&gt;), and release packages.</source>
          <target state="translated">このモジュールには、ブートスクリプト（ &lt;code&gt;.boot&lt;/code&gt; 、 &lt;code&gt;.script&lt;/code&gt; ）、リリースアップグレードファイル（ &lt;code&gt;relup&lt;/code&gt; ）、およびリリースパッケージを生成する関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="cfb41f0bba62101238346d92d97629a2935e3299" translate="yes" xml:space="preserve">
          <source>This module contains interface functions for the SSL/TLS/DTLS protocol. For detailed information about the supported standards see &lt;code&gt;ssl(6)&lt;/code&gt;.</source>
          <target state="translated">このモジュールには、SSL / TLS / DTLSプロトコルのインターフェース関数が含まれています。サポートされている標準の詳細については、 &lt;code&gt;ssl(6)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="cb4c286324503fe5462bf11f1a2d003718ad9829" translate="yes" xml:space="preserve">
          <source>This module contains regular expression matching functions for strings and binaries.</source>
          <target state="translated">このモジュールには、文字列とバイナリの正規表現マッチング関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="ef53274b9322e757bb4063af4f3183c6e84d40a8" translate="yes" xml:space="preserve">
          <source>This module contains services similar to Remote Procedure Calls. It also contains broadcast facilities and parallel evaluators. A remote procedure call is a method to call a function on a remote node and collect the answer. It is used for collecting information on a remote node, or for running a function with some specific side effects on the remote node.</source>
          <target state="translated">このモジュールには、リモート・プロシージャ・コールに似たサービスが含まれています。また、ブロードキャスト機能や並列評価器も含まれています。リモートプロシージャコールは、リモートノード上の関数を呼び出してその答えを収集するメソッドです。これは、リモート・ノードの情報を収集したり、リモート・ノード上で特定の副作用を持つ関数を実行したりするために使用されます。</target>
        </trans-unit>
        <trans-unit id="d58b9a536ce590d194f2de76046ad6eb75d92d75" translate="yes" xml:space="preserve">
          <source>This module contains some error printing routines taken from &quot;Advanced Programming in the UNIX Environment&quot; by W. Richard Stevens.</source>
          <target state="translated">このモジュールには、W.Richard Stevens の「Advanced Programming in UNIX Environment」から抜粋したエラー印刷ルーチンが含まれています。</target>
        </trans-unit>
        <trans-unit id="d4648e09f07ca512b563c45755d232665770d52a" translate="yes" xml:space="preserve">
          <source>This module contains the interface to the Erlang &lt;strong&gt;code server&lt;/strong&gt;, which deals with the loading of compiled code into a running Erlang runtime system.</source>
          <target state="translated">このモジュールには、実行中のErlangランタイムシステムへのコンパイル済みコードの読み込みを処理するErlang &lt;strong&gt;コードサーバー&lt;/strong&gt;へのインターフェイスが含まれています。</target>
        </trans-unit>
        <trans-unit id="f512252f459f62899c4ec02d14e4f592e80d6fd9" translate="yes" xml:space="preserve">
          <source>This module contains the public interface to the TPKT (TCP/IP) version transport protocol for Megaco/H.248.</source>
          <target state="translated">このモジュールには、Megaco/H.248 用の TPKT (TCP/IP)バージョントランスポートプロトコルへのパブリックインタフェースが含まれています。</target>
        </trans-unit>
        <trans-unit id="e64245c6a67eefbaeb52b73410ca5898d27decb3" translate="yes" xml:space="preserve">
          <source>This module contains the public interface to the UDP/IP version transport protocol for Megaco/H.248.</source>
          <target state="translated">このモジュールには、Megaco/H.248用のUDP/IPバージョン・トランスポート・プロトコルへのパブリック・インタフェースが含まれています。</target>
        </trans-unit>
        <trans-unit id="b0c49b48d28a03a73e07c75bceac59af417062b9" translate="yes" xml:space="preserve">
          <source>This module contains the public interface to the flex scanner linked in driver. The flex scanner performs the scanning phase of text message decoding.</source>
          <target state="translated">このモジュールには、ドライバにリンクされたフレックス・スキャナへのパブリック・インターフェイスが含まれています。フレックス・スキャナはテキスト・メッセージのデコードのスキャン・フェーズを実行します。</target>
        </trans-unit>
        <trans-unit id="028411a6308d39aee0db1a739a433763a7fa1e96" translate="yes" xml:space="preserve">
          <source>This module contains two routines: one general function for creating Erlang terms and one for pattern matching Erlang terms.</source>
          <target state="translated">このモジュールには2つのルーチンが含まれています:1つはErlang用語を作成するための一般的な関数で、もう1つはErlang用語をパターンマッチングするためのものです。</target>
        </trans-unit>
        <trans-unit id="43a0c1ee918b2bf11b8612b0b536425a9de08920" translate="yes" xml:space="preserve">
          <source>This module contains utilities on a higher level than the &lt;code&gt;file&lt;/code&gt; module.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;file&lt;/code&gt; モジュールよりも高いレベルのユーティリティが含まれています。</target>
        </trans-unit>
        <trans-unit id="75ca3e4fb9bfa2cb08015503e443bec03d7d012f" translate="yes" xml:space="preserve">
          <source>This module contains utility functions for easier measurement and calculation of scheduler utilization, otherwise obtained from calling the more primitive &lt;code&gt;statistics(scheduler_wall_time)&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、そうでない場合は、より原始的な呼び出しから取得したスケジューラの利用をより簡単に測定や計算のためのユーティリティ関数、含まれている &lt;code&gt;statistics(scheduler_wall_time)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8466a816803c9602c9c5da297825fe2d8738a12f" translate="yes" xml:space="preserve">
          <source>This module contains utility functions for working with the abstract data type defined in the module &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールには、モジュール &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; で定義された抽象データ型を操作するためのユーティリティ関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="6db7bd57b934dc58f231a5b9efdb7c6ce8fb29e8" translate="yes" xml:space="preserve">
          <source>This module contains various network utility functions.</source>
          <target state="translated">このモジュールには、さまざまなネットワーク・ユーティリティ機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="0d60840cdb8394c4bebe2baf925c2e4db6023faa" translate="yes" xml:space="preserve">
          <source>This module controls that the conditions in the requests are fulfilled. For example, a request can specify that the answer only is of interest if the content is unchanged since the last retrieval. If the content is changed, the range request is to be converted to a request for the whole file instead.</source>
          <target state="translated">このモジュールはリクエストの条件が満たされるように制御します。例えば、リクエストは、最後の検索から内容が変更されていない場合にのみ興味のある答えであることを指定することができます。内容が変更された場合、範囲リクエストは代わりにファイル全体に対するリクエストに変換されます。</target>
        </trans-unit>
        <trans-unit id="fe422acfcd694c2630daf21b44a7f9f2a2d5de80" translate="yes" xml:space="preserve">
          <source>This module deals with the composition and decomposition of &lt;strong&gt;syntactic&lt;/strong&gt; entities (as opposed to semantic ones); its purpose is to hide all direct references to the data structures used to represent these entities. With few exceptions, the functions in this module perform no semantic interpretation of their inputs, and in general, the user is assumed to pass type-correct arguments - if this is not done, the effects are not defined.</source>
          <target state="translated">このモジュールは、（意味的なものとは対照的に）&lt;strong&gt;構文上の&lt;/strong&gt;エンティティの構成と分解を扱います。その目的は、これらのエンティティを表すために使用されるデータ構造への直接参照をすべて隠すことです。いくつかの例外を除いて、このモジュールの関数は入力のセマンティック解釈を実行せず、一般に、ユーザーは型が正しい引数を渡すと想定されます-これが行われない場合、効果は定義されません。</target>
        </trans-unit>
        <trans-unit id="cfa2f96a0a3bfeb4a366115418ce75043dff5047" translate="yes" xml:space="preserve">
          <source>This module defines Erlang BIFs, guard tests, and operators. This module is only of interest to programmers who manipulate Erlang code.</source>
          <target state="translated">このモジュールはErlangのBIF、ガードテスト、演算子を定義しています。このモジュールはErlangのコードを操作するプログラマーだけが興味を持つモジュールです。</target>
        </trans-unit>
        <trans-unit id="b03bc08e3947730353e9a2f08b1653a85fdf21af" translate="yes" xml:space="preserve">
          <source>This module defines a callback behavior for user-defined hash functions of fragmented tables.</source>
          <target state="translated">このモジュールは、フラグメント化されたテーブルのユーザ定義ハッシュ関数のコールバック動作を定義します。</target>
        </trans-unit>
        <trans-unit id="76441fb4ee13017766943030861f4ce7688ed9bd" translate="yes" xml:space="preserve">
          <source>This module defines an abstract data type for representing Erlang source code as syntax trees, in a way that is backwards compatible with the data structures created by the Erlang standard library parser module &lt;code&gt;erl_parse&lt;/code&gt; (often referred to as &quot;parse trees&quot;, which is a bit of a misnomer). This means that all &lt;code&gt;erl_parse&lt;/code&gt; trees are valid abstract syntax trees, but the reverse is not true: abstract syntax trees can in general not be used as input to functions expecting an &lt;code&gt;erl_parse&lt;/code&gt; tree. However, as long as an abstract syntax tree represents a correct Erlang program, the function &lt;code&gt;&lt;a href=&quot;#revert-1&quot;&gt;revert/1&lt;/a&gt;&lt;/code&gt; should be able to transform it to the corresponding &lt;code&gt;erl_parse&lt;/code&gt; representation.</source>
          <target state="translated">このモジュールは、Erlang標準ライブラリパーサーモジュール &lt;code&gt;erl_parse&lt;/code&gt; （しばしば「解析ツリー」と呼ばれる）によって作成されたデータ構造と下位互換性のある方法で、Erlangソースコードを構文ツリーとして表すための抽象データ型を定義します。誤った名称の）。これは、すべての &lt;code&gt;erl_parse&lt;/code&gt; ツリーが有効な抽象構文ツリーであることを意味しますが、その逆は当てはまりません。抽象構文ツリーは、一般に &lt;code&gt;erl_parse&lt;/code&gt; ツリーを期待する関数への入力として使用できません。ただし、抽象構文ツリーが正しいErlangプログラムを表す限り、関数 &lt;code&gt;&lt;a href=&quot;#revert-1&quot;&gt;revert/1&lt;/a&gt;&lt;/code&gt; はそれを対応する &lt;code&gt;erl_parse&lt;/code&gt; 表現に変換できるはずです。</target>
        </trans-unit>
        <trans-unit id="e69c1a93aecab552763a38625c306d9fb09103f6" translate="yes" xml:space="preserve">
          <source>This module defines the Erlang Server Interface (ESI) API. It is a more efficient way of writing Erlang scripts for your &lt;code&gt;Inets&lt;/code&gt; web server than writing them as common CGI scripts.</source>
          <target state="translated">このモジュールは、Erlangサーバーインターフェイス（ESI）APIを定義します。これは、一般的なCGIスクリプトとして記述するよりも、 &lt;code&gt;Inets&lt;/code&gt; Webサーバー用のErlangスクリプトを記述するより効率的な方法です。</target>
        </trans-unit>
        <trans-unit id="392313e4002a7778328cfb59fce4c77f8c1952d5" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the SNMP agent mib storage.</source>
          <target state="translated">このモジュールは、SNMPエージェントのmibストレージの動作を定義します。</target>
        </trans-unit>
        <trans-unit id="7eff1b562e4fe0566ee0da7f6a9daaa2439e2f8b" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the SNMP agent mib-server data module. A &lt;code&gt;snmpa_mib_data&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、SNMPエージェントのmib-serverデータモジュールの動作を定義します。 &lt;code&gt;snmpa_mib_data&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="b0d76e366c3f9dcdfb5f12def1540b4e052163ce" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent discovery handler. A &lt;code&gt;snmpa_discovery_handler&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェントディスカバリハンドラの動作を定義します。 &lt;code&gt;snmpa_discovery_handler&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="e43530aefc8fe67ce3e1a2b7e5683063982513d3" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent error reporting. A &lt;code&gt;snmpa_error_report&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェントエラーレポートの動作を定義します。 &lt;code&gt;snmpa_error_report&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="d81fb92749352083b3ab6bc64e61e21bf25c9749" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent network interface filter. A &lt;code&gt;snmpa_network_interface_filter&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェントネットワークインターフェースフィルターの動作を定義します。 &lt;code&gt;snmpa_network_interface_filter&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="5412a13932b854a89270a84f2ceaaa33588e1121" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent network interface. A &lt;code&gt;snmpa_network_interface&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェントネットワークインターフェースの動作を定義します。 &lt;code&gt;snmpa_network_interface&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="3c921e60f1fd55471b897ea29e000de7226f0bb1" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent notification filters. A &lt;code&gt;snmpa_notification_filter&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェント通知フィルターの動作を定義します。 &lt;code&gt;snmpa_notification_filter&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="8c813e504362483e091dd45b65c32a63841d6a1d" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the manager network interface filter. A &lt;code&gt;snmpm_network_interface_filter&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、マネージャーのネットワークインターフェイスフィルターの動作を定義します。 &lt;code&gt;snmpm_network_interface_filter&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="1efae6ac4d1c40501e88954337a2c493e68e0103" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the manager network interface. A &lt;code&gt;snmpm_network_interface&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、マネージャーのネットワークインターフェイスの動作を定義します。 &lt;code&gt;snmpm_network_interface&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="70cf854e5d6063f7072b44e1cece8ac9b81a70b7" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the manager user. A &lt;code&gt;snmpm_user&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、マネージャーユーザーの動作を定義します。 &lt;code&gt;snmpm_user&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="468ccfe9ae0121bf6da5c3aaba9a0e4a3f14050d" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the notification delivery information receiver.</source>
          <target state="translated">このモジュールは、通知配信情報受信機の動作を定義します。</target>
        </trans-unit>
        <trans-unit id="118517391ac279d58d25f1693b404c970b02d3e5" translate="yes" xml:space="preserve">
          <source>This module defines the callback behaviour of Megaco users. A megaco_user compliant callback module must export the following functions:</source>
          <target state="translated">このモジュールは、Megaco ユーザのコールバック動作を定義します。megaco_user 準拠のコールバックモジュールは、以下の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="4c8aaa7d34274a9f4bb7dc956dc47a8e7e1445eb" translate="yes" xml:space="preserve">
          <source>This module defines what happens when certain types of errors occur.</source>
          <target state="translated">このモジュールは、特定のタイプのエラーが発生したときに何が起こるかを定義します。</target>
        </trans-unit>
        <trans-unit id="5ffa259dadc9ae103670240a5de8cb07d4a0a997" translate="yes" xml:space="preserve">
          <source>This module does not support &quot;raw&quot; filenames (that is, files whose names do not comply with the expected encoding). Such files are ignored by the functions in this module.</source>
          <target state="translated">このモジュールは「生の」ファイル名 (つまり、期待されるエンコーディングに準拠していないファイル名)をサポートしていません。そのようなファイルは、このモジュールの関数では無視されます。</target>
        </trans-unit>
        <trans-unit id="d6653760221ddc3d83e211cede6e8be096bb7928" translate="yes" xml:space="preserve">
          <source>This module enables C-programs to communicate with Erlang nodes, using the Erlang distribution over TCP/IP.</source>
          <target state="translated">このモジュールはCプログラムがTCP/IP上のErlangディストリビューションを使ってErlangノードと通信することを可能にします。</target>
        </trans-unit>
        <trans-unit id="263e76116a98bb1fd881761f209bf1ba1fce107d" translate="yes" xml:space="preserve">
          <source>This module enables users to enter the short form of some commonly used commands.</source>
          <target state="translated">このモジュールは、一般的に使用されるいくつかのコマンドの短縮形を入力することを可能にします。</target>
        </trans-unit>
        <trans-unit id="3343ff3168dd5f14d02286d39c2ac78ec614ecd9" translate="yes" xml:space="preserve">
          <source>This module expands records in a module.</source>
          <target state="translated">モジュール内のレコードを展開します。</target>
        </trans-unit>
        <trans-unit id="a3732061720e8ab1db0a300e706fb90768269889" translate="yes" xml:space="preserve">
          <source>This module exports functions for running &lt;code&gt;Common Test&lt;/code&gt; nodes on multiple hosts in parallel.</source>
          <target state="translated">このモジュールは、複数のホストで &lt;code&gt;Common Test&lt;/code&gt; ノードを並行して実行するための関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="0503901901ce52a8d8d522c2fc6e6ad11e2ed29f" translate="yes" xml:space="preserve">
          <source>This module exports functions used by the &lt;code&gt;Common Test&lt;/code&gt; Master to start and stop &quot;slave&quot; nodes. It is the default callback module for the &lt;code&gt;{init, node_start}&lt;/code&gt; term in the Test Specification.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Common Test&lt;/code&gt; Masterが「スレーブ」ノードを開始および停止するために使用する関数をエクスポートします。これは、テスト仕様の &lt;code&gt;{init, node_start}&lt;/code&gt; 用語のデフォルトのコールバックモジュールです。</target>
        </trans-unit>
        <trans-unit id="5c1c8fa2fdb9c360a27bfb55873d503a480bf994" translate="yes" xml:space="preserve">
          <source>This module exports help functions for parsing of test specifications.</source>
          <target state="translated">このモジュールは、テスト仕様を解析するためのヘルプ関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="a7e44b5175c847fa8191a306063c634fed83971d" translate="yes" xml:space="preserve">
          <source>This module exports help functions for performing code coverage analysis.</source>
          <target state="translated">このモジュールは、コードカバレッジ解析を行うためのヘルプ関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="eb5bfcc59cc41439eaa702f52ecbd01d0b73eb7d" translate="yes" xml:space="preserve">
          <source>This module generates an HTML directory listing (Apache-style) if a client sends a request for a directory instead of a file. This module must be removed from the Modules config directive if directory listings is unwanted.</source>
          <target state="translated">このモジュールは、クライアントがファイルではなくディレクトリへのリクエストを送った場合に、 HTML のディレクトリリスト (Apache スタイル)を生成します。もし、ディレクトリの一覧表示が不要な場合は、このモジュールを Modules config ディレクティブから削除しなければなりません。</target>
        </trans-unit>
        <trans-unit id="ebf8cc7dad040f1beca78868efd260f249334a6e" translate="yes" xml:space="preserve">
          <source>This module handles invoking of CGI scripts.</source>
          <target state="translated">このモジュールは、CGI スクリプトの呼び出しを処理します。</target>
        </trans-unit>
        <trans-unit id="474f6eb9d78d082e8b16b40b4a1c3de1a0cc963c" translate="yes" xml:space="preserve">
          <source>This module has been deprecated and will be removed in a furture release.</source>
          <target state="translated">このモジュールは非推奨とされています。</target>
        </trans-unit>
        <trans-unit id="20277e2186104d73a70c009c74886d168752fafa" translate="yes" xml:space="preserve">
          <source>This module has been reworked in Erlang/OTP 20 to handle &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt; and operate on grapheme clusters. The &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;old functions&lt;/a&gt;&lt;/code&gt; that only work on Latin-1 lists as input are still available but should not be used, they will be deprecated in a future release.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt; を処理し、書記素クラスター上で動作するようにErlang / OTP 20で作り直されました。 &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;old functions&lt;/a&gt;&lt;/code&gt; 入力として、Latin-1のリストの唯一の仕事はまだ利用可能ですが、使用すべきではないことを、彼らは将来のリリースで廃止されます。</target>
        </trans-unit>
        <trans-unit id="e92193f0e2766adbb07bff2f6dfb2e47b5b38666" translate="yes" xml:space="preserve">
          <source>This module has three sets of interface functions: the &quot;Original API&quot;, the &quot;Extended API&quot;, and the &quot;Okasaki API&quot;.</source>
          <target state="translated">このモジュールは、「オリジナルAPI」、「拡張API」、「岡崎API」の3つのインターフェース機能を持っています。</target>
        </trans-unit>
        <trans-unit id="e94b28ea5c396cd8b2c46ddc4551b34a14bfd479" translate="yes" xml:space="preserve">
          <source>This module implements a client for file transfer according to a subset of the File Transfer Protocol (FTP), see &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc959.txt&quot;&gt;RFC 959&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、ファイル転送プロトコル（FTP）のサブセットに従ってファイル転送用のクライアントを実装します &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc959.txt&quot;&gt;RFC 959&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="b25912bf3af7bf1193b3fff50e47205181300228" translate="yes" xml:space="preserve">
          <source>This module implements a simple megaco codec measurement tool.</source>
          <target state="translated">このモジュールは、簡単なmegacoコーデ測定ツールを実装しています。</target>
        </trans-unit>
        <trans-unit id="871eeb782d63d6630dd6a5d492a7b58d86850778" translate="yes" xml:space="preserve">
          <source>This module implements a simple megaco codec-based performance tool.</source>
          <target state="translated">このモジュールは、シンプルなメガココーデックベースのパフォーマンスツールを実装しています。</target>
        </trans-unit>
        <trans-unit id="f9179ddef6a9ee16329a9f709abd6d55eba87a03" translate="yes" xml:space="preserve">
          <source>This module implements a simple megaco message transformation utility.</source>
          <target state="translated">このモジュールは、単純な megaco メッセージ変換ユーティリティを実装しています。</target>
        </trans-unit>
        <trans-unit id="509079930c0c0a8b4797c4ad9534704e9e78b720" translate="yes" xml:space="preserve">
          <source>This module implements a text based interface to the &lt;code&gt;trace/3&lt;/code&gt; and the &lt;code&gt;trace_pattern/2&lt;/code&gt; BIFs. It makes it possible to trace functions, processes, ports and messages.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;trace/3&lt;/code&gt; および &lt;code&gt;trace_pattern/2&lt;/code&gt; BIFへのテキストベースのインターフェースを実装します。機能、プロセス、ポート、メッセージを追跡することができます。</target>
        </trans-unit>
        <trans-unit id="c2d643bd7191e32f2c51494e11bf58ee73f4a435" translate="yes" xml:space="preserve">
          <source>This module implements an SSH FTP (SFTP) client. SFTP is a secure, encrypted file transfer service available for SSH.</source>
          <target state="translated">このモジュールは、SSH FTP (SFTP)クライアントを実装します。SFTP は SSH で利用できる安全で暗号化されたファイル転送サービスです。</target>
        </trans-unit>
        <trans-unit id="03ef132a9564d822dda1f23634bee22efb87c0be" translate="yes" xml:space="preserve">
          <source>This module implements diameter transport over SCTP using &lt;code&gt;gen_sctp(3)&lt;/code&gt;. It can be specified as the value of a transport_module option to &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; and implements the behaviour documented in &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;gen_sctp(3)&lt;/code&gt; を使用してSCTP経由の直径転送を実装します。これは、 &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; の transport_moduleオプションの値として指定でき、 &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; に記載されている動作を実装します。</target>
        </trans-unit>
        <trans-unit id="88cb8b49f73b329262758743b81d712fdab5c653" translate="yes" xml:space="preserve">
          <source>This module implements diameter transport over TCP using &lt;code&gt;gen_tcp(3)&lt;/code&gt;. It can be specified as the value of a &lt;code&gt;transport_module&lt;/code&gt; option to &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; and implements the behaviour documented in &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;. TLS security is supported, either as an upgrade following capabilities exchange or at connection establishment.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;gen_tcp(3)&lt;/code&gt; を使用して、TCP 経由のDiameterトランスポートを実装します。これは、 &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;transport_module&lt;/code&gt; オプションの値として指定でき、 &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; に記載されている動作を実装します。TLSセキュリティは、機能交換後のアップグレードとして、または接続の確立時にサポートされます。</target>
        </trans-unit>
        <trans-unit id="9266c44a4ba8cd9ee1a5c81b4c58c87a30706c84" translate="yes" xml:space="preserve">
          <source>This module implements dynamic hashing, which is a kind of hashing that grows nicely when new fragments are added. It is well suited for scalable hash tables.</source>
          <target state="translated">このモジュールは動的ハッシュを実装しており、新しいフラグメントが追加されたときにうまく成長するハッシュの一種です。スケーラブルなハッシュテーブルに適しています。</target>
        </trans-unit>
        <trans-unit id="237af1ed7b14daa8c6a596b37b3d9e9e2855eee1" translate="yes" xml:space="preserve">
          <source>This module implements interfaces to dynamic tracing, should such be compiled into the virtual machine. For a standard and/or commercial build, no dynamic tracing is available, in which case none of the functions in this module is usable or give any effect.</source>
          <target state="translated">このモジュールは動的トレースへのインターフェースを実装しています。標準的なビルドや商用ビルドでは、ダイナミックトレースが利用できない場合、このモジュールの関数はどれも使えませんし、何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="5567e19229f23540f47010e8b1ddd342e185fa20" translate="yes" xml:space="preserve">
          <source>This module implements process groups. Each message can be sent to one, some, or all group members.</source>
          <target state="translated">このモジュールは、プロセスグループを実装します。各メッセージは、グループのメンバーの一人、一部、またはすべてのメンバーに送信することができます。</target>
        </trans-unit>
        <trans-unit id="81520061930d4cb81104030ae03956c22721f688" translate="yes" xml:space="preserve">
          <source>This module implements some convenience functions for analyzing microstate accounting data. For details about how to use the basic api and what the different states represent see &lt;code&gt;erlang:statistics(microstate_accounting)&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、マイクロステートアカウンティングデータを分析するためのいくつかの便利な関数を実装しています。基本的なAPIの使用方法と、さまざまな状態が表すものの詳細については、 &lt;code&gt;erlang:statistics(microstate_accounting)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d15b1e9aa28423920ee271c9eb3d3a739153bbd9" translate="yes" xml:space="preserve">
          <source>This module implements the &lt;strong&gt;mstone1&lt;/strong&gt; tool, a simple megaco codec-based performance tool.</source>
          <target state="translated">このモジュールは、シンプルなmegacoコーデックベースのパフォーマンスツールである&lt;strong&gt;mstone1&lt;/strong&gt;ツールを実装します。</target>
        </trans-unit>
        <trans-unit id="251e35996e11df5d3eaaaf86f280ba3afa349ebe" translate="yes" xml:space="preserve">
          <source>This module implements the &lt;strong&gt;mstone2&lt;/strong&gt; tool, a simple megaco codec-based performance tool.</source>
          <target state="translated">このモジュールは、シンプルなmegacoコーデックベースのパフォーマンスツールである&lt;strong&gt;mstone2&lt;/strong&gt;ツールを実装します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
