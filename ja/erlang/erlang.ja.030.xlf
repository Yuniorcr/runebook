<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="6279ffa4297b30182dc5202b001cb1dfc83a3bb5" translate="yes" xml:space="preserve">
          <source>Strategy: Find the block with the lowest address satisfying the requested block size.</source>
          <target state="translated">ストラテジー 要求されたブロックサイズを満たす最低アドレスのブロックを探す。</target>
        </trans-unit>
        <trans-unit id="fd04785e47c956a9f5fba602264a5dd14a34605a" translate="yes" xml:space="preserve">
          <source>Strategy: Find the smallest block satisfying the requested block size.</source>
          <target state="translated">ストラテジー 要求されたブロックサイズを満たす最小のブロックを探します。</target>
        </trans-unit>
        <trans-unit id="44a887b6549779200c93196b47117dc9e9fd22f9" translate="yes" xml:space="preserve">
          <source>Strategy: Find the smallest block satisfying the requested block size. If multiple blocks are found, choose the one with the lowest address.</source>
          <target state="translated">ストラテジー 要求されたブロックサイズを満たす最小のブロックを見つける。複数のブロックが見つかった場合は、アドレスが最も小さいものを選択する。</target>
        </trans-unit>
        <trans-unit id="657b8318e9423de7a8d3e2e9ef2f190f7d6a01fe" translate="yes" xml:space="preserve">
          <source>Strategy: Try to find the best fit, but settle for the best fit found during a limited search.</source>
          <target state="translated">攻略法です。ベストフィットを見つけようとしますが、限られた検索中に見つかったベストフィットに落ち着きます。</target>
        </trans-unit>
        <trans-unit id="5fcdff9196474123b66108d821dc8c835b72a528" translate="yes" xml:space="preserve">
          <source>Stream number (0-base) within the association to send the messages through;</source>
          <target state="translated">メッセージを送信するためのアソシエーション内のストリーム番号(0ベース)。</target>
        </trans-unit>
        <trans-unit id="032322e337daa5362eff97379f0768caa1c4a70b" translate="yes" xml:space="preserve">
          <source>Stream,</source>
          <target state="translated">Stream,</target>
        </trans-unit>
        <trans-unit id="14c7fe8eb4bedf847bae92f16bee1373dae3ee7d" translate="yes" xml:space="preserve">
          <source>Streams the body of a 200 or 206 response to the calling process or to a file. When streaming to the calling process using option &lt;code&gt;self&lt;/code&gt;, the following stream messages are sent to that process: &lt;code&gt;{http, {RequestId, stream_start, Headers}}, {http, {RequestId, stream, BinBodyPart}}, and {http, {RequestId, stream_end, Headers}}&lt;/code&gt;.</source>
          <target state="translated">200または206応答の本文を呼び出しプロセスまたはファイルにストリーミングします。オプション &lt;code&gt;self&lt;/code&gt; を使用して呼び出しプロセスにストリーミングすると、次のストリームメッセージがそのプロセスに送信されます： &lt;code&gt;{http, {RequestId, stream_start, Headers}}, {http, {RequestId, stream, BinBodyPart}}, and {http, {RequestId, stream_end, Headers}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a376bfef88f4a5837ec22e75ca9bb2ad71a85ca" translate="yes" xml:space="preserve">
          <source>Strict version control, i.e. when a message is received, verify that the version is that which was negotiated.</source>
          <target state="translated">厳密なバージョン管理、すなわち、メッセージを受信したときに、そのバージョンがネゴシエートされたものであることを確認します。</target>
        </trans-unit>
        <trans-unit id="48c954c05304b9e81c5d975679386755a836c64c" translate="yes" xml:space="preserve">
          <source>Strictly as it appears in the &lt;code&gt;boot script&lt;/code&gt;, or</source>
          <target state="translated">厳密に &lt;code&gt;boot script&lt;/code&gt; 表示されるとおり、または</target>
        </trans-unit>
        <trans-unit id="9c8e1fe6c3b86d4950a4f14e9e1b7a58807d6feb" translate="yes" xml:space="preserve">
          <source>Strictly monotonically increasing values are inherently quite expensive to generate and scales poorly. This is because the values need to be synchronized between CPU cores. That is, do not pass the &lt;code&gt;monotonic&lt;/code&gt; modifier unless you really need strictly monotonically increasing values.</source>
          <target state="translated">厳密に単調に増加する値は、生成とスケーリングが本質的に非常に高価です。これは、CPUコア間で値を同期する必要があるためです。つまり、厳密に単調増加する値が本当に必要でない限り、 &lt;code&gt;monotonic&lt;/code&gt; 修飾子を渡さないでください。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="34e63cef9636b51db449734a3cb5f4c085f07fd5" translate="yes" xml:space="preserve">
          <source>String (is the same as a list of integers)</source>
          <target state="translated">文字列 (整数のリストと同じ)</target>
        </trans-unit>
        <trans-unit id="d118085e29d4750504557a8145b47af2cb2659cf" translate="yes" xml:space="preserve">
          <source>String containing the user's password. Only used if the private keyfile is password-protected.</source>
          <target state="translated">ユーザのパスワードを含む文字列。秘密鍵ファイルがパスワードで保護されている場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="59ef56804edeb88e3ae1bcc6b7e688b7402b030a" translate="yes" xml:space="preserve">
          <source>String does &lt;strong&gt;not&lt;/strong&gt; have a corresponding Erlang representation, but is an optimization for sending lists of bytes (integer in the range 0-255) more efficiently over the distribution. As field &lt;code&gt;Length&lt;/code&gt; is an unsigned 2 byte integer (big-endian), implementations must ensure that lists longer than 65535 elements are encoded as &lt;code&gt;&lt;a href=&quot;#LIST_EXT&quot;&gt;LIST_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">文字列には対応するErlang表現はありませ&lt;strong&gt;ん&lt;/strong&gt;が、バイトリスト（0から255の範囲の整数）のリストを配布でより効率的に送信するための最適化です。フィールド &lt;code&gt;Length&lt;/code&gt; は符号なし2バイト整数（ビッグエンディアン）であるため、実装では、65535要素よりも長いリストが &lt;code&gt;&lt;a href=&quot;#LIST_EXT&quot;&gt;LIST_EXT&lt;/a&gt;&lt;/code&gt; としてエンコードされるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="059d063f4edd2896cbea701659c169723f6c691b" translate="yes" xml:space="preserve">
          <source>String handling can be slow if done improperly. In Erlang, you need to think a little more about how the strings are used and choose an appropriate representation. If you use regular expressions, use the &lt;code&gt;re&lt;/code&gt; module in STDLIB instead of the obsolete &lt;code&gt;regexp&lt;/code&gt; module.</source>
          <target state="translated">文字列の処理は、不適切に行うと遅くなる可能性があります。Erlangでは、文字列の使用方法についてもう少し考え、適切な表現を選択する必要があります。正規表現を使用する場合は、廃止された &lt;code&gt;regexp&lt;/code&gt; モジュールではなく、STDLIB の &lt;code&gt;re&lt;/code&gt; モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="ab7791e7c77db49941bf49b683f3c9df1fec0bac" translate="yes" xml:space="preserve">
          <source>String processing functions.</source>
          <target state="translated">文字列処理機能。</target>
        </trans-unit>
        <trans-unit id="7073c72847419cc61b613d7b0ddbaa7534b00711" translate="yes" xml:space="preserve">
          <source>String | Binary (configurable)</source>
          <target state="translated">文字列|バイナリ(設定可能</target>
        </trans-unit>
        <trans-unit id="74d55dbdca8b484ae2bf6a9ace6819676c736d3c" translate="yes" xml:space="preserve">
          <source>Strings are enclosed in double quotes (&quot;), but is not a data type in Erlang. Instead, a string &lt;code&gt;&quot;hello&quot;&lt;/code&gt; is shorthand for the list &lt;code&gt;[$h,$e,$l,$l,$o]&lt;/code&gt;, that is, &lt;code&gt;[104,101,108,108,111]&lt;/code&gt;.</source>
          <target state="translated">文字列は二重引用符（ &quot;）で囲まれていますが、Erlangではデータ型ではありません。代わりに、文字列 &lt;code&gt;&quot;hello&quot;&lt;/code&gt; はリスト &lt;code&gt;[$h,$e,$l,$l,$o]&lt;/code&gt; 省略形です。つまり、 、 &lt;code&gt;[104,101,108,108,111]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38229828f5ce707e9c637d7e4f9c75370c8f2483" translate="yes" xml:space="preserve">
          <source>Strings in the template are printed literally.</source>
          <target state="translated">テンプレート内の文字列は文字通り印刷されます。</target>
        </trans-unit>
        <trans-unit id="f9dab1696115bedd1587cdcd962fbaa87eb8dd52" translate="yes" xml:space="preserve">
          <source>Strings starting with &lt;code&gt;&quot;'@&lt;/code&gt;, for example &lt;code&gt;&quot;'@File&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;'@&lt;/code&gt; 始まる文字 &lt;code&gt;&quot;'@File&quot;&lt;/code&gt; 、たとえば「' @File」</target>
        </trans-unit>
        <trans-unit id="57df87fb39970ecfe64667610e08517b0f8ba060" translate="yes" xml:space="preserve">
          <source>Strings, other than &lt;code&gt;&quot;Z&quot;&lt;/code&gt;, &lt;code&gt;&quot;z&quot;&lt;/code&gt;, or &lt;code&gt;&quot;&quot;&lt;/code&gt;, must be on the form &lt;code&gt;&amp;plusmn;[hh]:[mm]&lt;/code&gt;, for example &lt;code&gt;&quot;-02:00&quot;&lt;/code&gt; or &lt;code&gt;&quot;+00:00&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;Z&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;z&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;&quot;&lt;/code&gt; 以外の文字列は、 &lt;code&gt;&amp;plusmn;[hh]:[mm]&lt;/code&gt; の形式にする必要があります（例 &lt;code&gt;&quot;-02:00&quot;&lt;/code&gt; または &lt;code&gt;&quot;+00:00&quot;&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="b5570cbce59d54b3e8e89f954758052e0ea23cd1" translate="yes" xml:space="preserve">
          <source>Stub module files are created for those modules that are to be exported by the target module (see options &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;stubs&lt;/code&gt; and &lt;code&gt;stub_dir&lt;/code&gt;).</source>
          <target state="translated">スタブモジュールファイルがターゲットモジュールによってエクスポートされるそれらのモジュールのために作成されます（オプション参照 &lt;code&gt;export&lt;/code&gt; 、 &lt;code&gt;stubs&lt;/code&gt; と &lt;code&gt;stub_dir&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="db2cf9d107c5a79e75ca3fa12c082098b033a749" translate="yes" xml:space="preserve">
          <source>Stub modules will automatically be created (see the &lt;code&gt;stubs&lt;/code&gt; and &lt;code&gt;stub_dir&lt;/code&gt; options below) for each module that is renamed. These can be used to redirect any calls still using the old module names. The stub files are created in the same directory as the source file (typically overwriting the original file).</source>
          <target state="translated">名前が変更されたモジュールごとに、 &lt;code&gt;stubs&lt;/code&gt; モジュールが自動的に作成されます（以下のスタブおよび &lt;code&gt;stub_dir&lt;/code&gt; オプションを参照）。これらは、古いモジュール名を使用している呼び出しをリダイレクトするために使用できます。スタブファイルは、ソースファイルと同じディレクトリに作成されます（通常、元のファイルを上書きします）。</target>
        </trans-unit>
        <trans-unit id="4ca257e1525674f4f984164e97623ebf24612def" translate="yes" xml:space="preserve">
          <source>Style sheets can also be installed on a per suite and per test case basis.</source>
          <target state="translated">スタイルシートは、スイートごと、テストケースごとに設置することも可能です。</target>
        </trans-unit>
        <trans-unit id="0e3cd3b3663e36b6010fa328e4878eaf1bb09c78" translate="yes" xml:space="preserve">
          <source>Sub-agents and dependencies</source>
          <target state="translated">サブエージェントと依存関係</target>
        </trans-unit>
        <trans-unit id="90d7d767804a80af239bef8ee766d71a4944c07e" translate="yes" xml:space="preserve">
          <source>Sub-agents are only needed if your application requires special support for distribution from the SNMP toolkit. A sub-agent can also be used if the application requires a more complex set transaction scheme than is found in the master agent.</source>
          <target state="translated">サブエージェントは、アプリケーションがSNMPツールキットからの配布のために特別なサポートを必要とする場合にのみ必要です。また、アプリケーションがマスターエージェントよりも複雑なセットトランザクションスキームを必要とする場合にも、サブエージェントを使用することができます。</target>
        </trans-unit>
        <trans-unit id="5055cc4d96f14720694a56d07a68ee7980c81af5" translate="yes" xml:space="preserve">
          <source>Sub-agents are used for the following reasons:</source>
          <target state="translated">サブエージェントは、以下のような理由で使用されています。</target>
        </trans-unit>
        <trans-unit id="9b6045ebe7d947335fe83f7f64672894d696d0bd" translate="yes" xml:space="preserve">
          <source>Sub-agents can also have sub-agents. Each sub-agent can have an arbitrary number of child sub-agents registered, forming a hierarchy.</source>
          <target state="translated">サブエージェントは、サブエージェントを持つこともできます。各サブエージェントは、階層を形成しながら、任意の数の子サブエージェントを登録することができます。</target>
        </trans-unit>
        <trans-unit id="8ac63ce8e1d74adcfdfbe2ca29ab772206b57ae0" translate="yes" xml:space="preserve">
          <source>Subpatterns are delimited by parentheses (round brackets), which can be nested. Turning part of a pattern into a subpattern does two things:</source>
          <target state="translated">サブパターンはカッコ(丸カッコ)で区切られており、入れ子にすることができます。パターンの一部をサブパターンに変換すると、2つのことができます。</target>
        </trans-unit>
        <trans-unit id="a820e243668b15a93364d75cb27a52bf2716a1a1" translate="yes" xml:space="preserve">
          <source>Subscribe to &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#service_event&quot;&gt;service_event()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; messages from a service.</source>
          <target state="translated">サービスから &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#service_event&quot;&gt;service_event()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; メッセージをサブスクライブします。</target>
        </trans-unit>
        <trans-unit id="49f060764145c09021e9ae846a9e90442c5fb5e4" translate="yes" xml:space="preserve">
          <source>Subscribe to node status change messages for both visible and hidden nodes. The tuple &lt;code&gt;{node_type, visible | hidden}&lt;/code&gt; is included in &lt;code&gt;InfoList&lt;/code&gt;.</source>
          <target state="translated">可視ノードと非表示ノードの両方のノードステータス変更メッセージをサブスクライブします。タプル &lt;code&gt;{node_type, visible | hidden}&lt;/code&gt; は &lt;code&gt;InfoList&lt;/code&gt; に含まれています。</target>
        </trans-unit>
        <trans-unit id="928a7f14face133bf1a5d5c5ab3ba7234d171192" translate="yes" xml:space="preserve">
          <source>Subscribe to node status change messages for hidden nodes only. The tuple &lt;code&gt;{node_type, hidden}&lt;/code&gt; is included in &lt;code&gt;InfoList&lt;/code&gt;.</source>
          <target state="translated">非表示ノードのみのノードステータス変更メッセージをサブスクライブします。タプル &lt;code&gt;{node_type, hidden}&lt;/code&gt; は &lt;code&gt;InfoList&lt;/code&gt; に含まれています。</target>
        </trans-unit>
        <trans-unit id="8e29b065f6418ba8f113a030561ebffc2353317d" translate="yes" xml:space="preserve">
          <source>Subscribe to node status change messages for visible nodes only. The tuple &lt;code&gt;{node_type, visible}&lt;/code&gt; is included in &lt;code&gt;InfoList&lt;/code&gt;.</source>
          <target state="translated">可視ノードのみのノードステータス変更メッセージをサブスクライブします。タプル &lt;code&gt;{node_type, visible}&lt;/code&gt; は &lt;code&gt;InfoList&lt;/code&gt; に含まれています。</target>
        </trans-unit>
        <trans-unit id="7eeb3cfb3316bcf069c616fd3d9feb459ed3e566" translate="yes" xml:space="preserve">
          <source>Subscriptions are not triggered and no checkpoints are updated, but this operation is blindingly fast. Disc resident tables are not to be updated with the &lt;code&gt;ets&lt;/code&gt; function, as the disc is not updated.</source>
          <target state="translated">サブスクリプションはトリガーされず、チェックポイントは更新されませんが、この操作は驚くほど高速です。ディスクが更新されないため、ディスク常駐テーブルは &lt;code&gt;ets&lt;/code&gt; 関数で更新されません。</target>
        </trans-unit>
        <trans-unit id="433c536aabeab0d4376379abd1511ea5ccc8273f" translate="yes" xml:space="preserve">
          <source>Subsequent calls to &lt;code&gt;allow/1&lt;/code&gt; will add the specified nodes to the list of allowed nodes. It is not possible to remove nodes from the list.</source>
          <target state="translated">&lt;code&gt;allow/1&lt;/code&gt; への後続の呼び出しは、指定されたノードを許可されたノードのリストに追加します。リストからノードを削除することはできません。</target>
        </trans-unit>
        <trans-unit id="4b5948f4a8c2efd083dca1a5d8f87dd377c41053" translate="yes" xml:space="preserve">
          <source>Subsequent calls to this function overwrites previous data set. To update existing data instead of overwriting it, see &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt;update_process_metadata/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数を後で呼び出すと、以前のデータセットが上書きされます。既存のデータを上書きする代わりに更新するには、 &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt;update_process_metadata/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7b62f60ecebed480c0f7cf1234a4d74b31ff5ce6" translate="yes" xml:space="preserve">
          <source>Subsequently, these types can be used to specify types of record fields and also the argument and return types of functions.</source>
          <target state="translated">その後、これらの型を使用して、レコードフィールドの型、関数の引数や戻り値の型を指定することができます。</target>
        </trans-unit>
        <trans-unit id="cb7698f2ce2f777969263d3a8ba0cef76e027f42" translate="yes" xml:space="preserve">
          <source>Subsets of test cases, called test case groups, can also be defined. A test case group can have execution properties associated with it. Execution properties specify if the test cases in the group are to be executed in random order, in parallel, or in sequence, and if the execution of the group is to be repeated. Test case groups can also be nested (that is, a group can, besides test cases, contain subgroups).</source>
          <target state="translated">テストケースグループと呼ばれるテストケースのサブセットを定義することもできます。テストケースグループは、それに関連付けられた実行プロパティを持つことができます。実行プロパティは、グループ内のテストケースがランダムな順序で実行されるか、並列で実行されるか、順番に実行されるか、グループの実行が繰り返されるかを指定します。テストケースグループは入れ子にすることもできます(つまり、グループはテストケースの他にサブグループを含むことができます)。</target>
        </trans-unit>
        <trans-unit id="2a8724dcdb51c1cfe957da926417b908e509eba3" translate="yes" xml:space="preserve">
          <source>Substitute metavariables in a pattern or list of patterns, yielding a syntax tree or list of trees as result. Both for normal metavariables and glob metavariables, the substituted value may be a single element or a list of elements. For example, if a list representing &lt;code&gt;1, 2, 3&lt;/code&gt; is substituted for &lt;code&gt;var&lt;/code&gt; in either of &lt;code&gt;[foo, _@var, bar]&lt;/code&gt; or &lt;code&gt;[foo, _@var, bar]&lt;/code&gt;, the result represents &lt;code&gt;[foo, 1, 2, 3, bar]&lt;/code&gt;.</source>
          <target state="translated">パターンまたはパターンのリストのメタ変数を置き換えて、結果として構文ツリーまたはツリーのリストを生成します。通常のメタ変数とglobメタ変数の両方で、置換される値は単一の要素または要素のリストです。たとえば &lt;code&gt;1, 2, 3&lt;/code&gt; 表すリストが &lt;code&gt;[foo, _@var, bar]&lt;/code&gt; または &lt;code&gt;[foo, _@var, bar]&lt;/code&gt; いずれかで &lt;code&gt;var&lt;/code&gt; に置き換えられた場合、結果は &lt;code&gt;[foo, 1, 2, 3, bar]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="05ffcb976452c5c75ac29c7a75347990e68c424b" translate="yes" xml:space="preserve">
          <source>Substitutes &lt;code&gt;%FINAL_ROOTDIR%&lt;/code&gt; and &lt;code&gt;%EMU%&lt;/code&gt; for &lt;code&gt;/usr/local/erl-target&lt;/code&gt; and &lt;code&gt;beam&lt;/code&gt;, respectively, in the files &lt;code&gt;erl.src&lt;/code&gt;, &lt;code&gt;start.src&lt;/code&gt;, and &lt;code&gt;start_erl.src&lt;/code&gt; of the target &lt;code&gt;erts-5.10.4/bin&lt;/code&gt; directory, and puts the resulting files &lt;code&gt;erl&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt;, and &lt;code&gt;run_erl&lt;/code&gt; in the target &lt;code&gt;bin&lt;/code&gt; directory.</source>
          <target state="translated">代替 &lt;code&gt;%FINAL_ROOTDIR%&lt;/code&gt; および &lt;code&gt;%EMU%&lt;/code&gt; のために &lt;code&gt;/usr/local/erl-target&lt;/code&gt; と &lt;code&gt;beam&lt;/code&gt; それぞれ、ファイルの中 &lt;code&gt;erl.src&lt;/code&gt; 、 &lt;code&gt;start.src&lt;/code&gt; 、および &lt;code&gt;start_erl.src&lt;/code&gt; ターゲットの &lt;code&gt;erts-5.10.4/bin&lt;/code&gt; ディレクトリ、および結果のファイル &lt;code&gt;erl&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; 、および &lt;code&gt;run_erl&lt;/code&gt; をターゲットの &lt;code&gt;bin&lt;/code&gt; ディレクトリに配置します。</target>
        </trans-unit>
        <trans-unit id="bc3669ecd23d63b80d0c44dfa313091853f8eced" translate="yes" xml:space="preserve">
          <source>Substitutes keys of boolean-valued properties and simultaneously negates their values. For each entry in &lt;code&gt;ListIn&lt;/code&gt;, if it is associated with some key &lt;code&gt;K1&lt;/code&gt; such that &lt;code&gt;{K1, K2}&lt;/code&gt; occurs in &lt;code&gt;Negations&lt;/code&gt;: if the entry was &lt;code&gt;{K1, true}&lt;/code&gt;, it is replaced with &lt;code&gt;{K2, false}&lt;/code&gt;, otherwise with &lt;code&gt;{K2, true}&lt;/code&gt;, thus changing the name of the option and simultaneously negating the value specified by &lt;code&gt;&lt;a href=&quot;#get_bool-2&quot;&gt;get_bool(Key,ListIn)&lt;/a&gt;&lt;/code&gt;. If the same &lt;code&gt;K1&lt;/code&gt; occurs more than once in &lt;code&gt;Negations&lt;/code&gt;, only the first occurrence is used.</source>
          <target state="translated">ブール値のプロパティのキーを置き換え、同時にそれらの値を無効にします。 &lt;code&gt;ListIn&lt;/code&gt; の各エントリについて、それが何らかのキー &lt;code&gt;K1&lt;/code&gt; に関連付けられており、 &lt;code&gt;Negations&lt;/code&gt; で &lt;code&gt;{K1, K2}&lt;/code&gt; が発生する場合：エントリが &lt;code&gt;{K1, true}&lt;/code&gt; 場合、それは &lt;code&gt;{K2, false}&lt;/code&gt; で置き換えられ、それ以外の場合は &lt;code&gt;{K2, true}&lt;/code&gt; 従ってオプションの名前を変更すると同時にによって指定された値否定、 &lt;code&gt;&lt;a href=&quot;#get_bool-2&quot;&gt;get_bool(Key,ListIn)&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;Negations&lt;/code&gt; で同じ &lt;code&gt;K1&lt;/code&gt; が複数回発生する場合は、最初の発生のみが使用されます。</target>
        </trans-unit>
        <trans-unit id="1e27236324c145734276c060f10c3123a295b532" translate="yes" xml:space="preserve">
          <source>Substitutes keys of properties. For each entry in &lt;code&gt;ListIn&lt;/code&gt;, if it is associated with some key &lt;code&gt;K1&lt;/code&gt; such that &lt;code&gt;{K1, K2}&lt;/code&gt; occurs in &lt;code&gt;Aliases&lt;/code&gt;, the key of the entry is changed to &lt;code&gt;K2&lt;/code&gt;. If the same &lt;code&gt;K1&lt;/code&gt; occurs more than once in &lt;code&gt;Aliases&lt;/code&gt;, only the first occurrence is used.</source>
          <target state="translated">プロパティのキーを置き換えます。 &lt;code&gt;ListIn&lt;/code&gt; の各エントリについて、 &lt;code&gt;{K1, K2}&lt;/code&gt; が &lt;code&gt;Aliases&lt;/code&gt; で発生するようにキー &lt;code&gt;K1&lt;/code&gt; に関連付けられている場合、エントリのキーは &lt;code&gt;K2&lt;/code&gt; に変更されます。 &lt;code&gt;Aliases&lt;/code&gt; で同じ &lt;code&gt;K1&lt;/code&gt; が複数回発生する場合は、最初の発生のみが使用されます。</target>
        </trans-unit>
        <trans-unit id="42a8f651d79fd005eeac0612df6442b983a01184" translate="yes" xml:space="preserve">
          <source>Success</source>
          <target state="translated">Success</target>
        </trans-unit>
        <trans-unit id="80c7261dc13f63e8ac3c5ef932b61d4d0f95604d" translate="yes" xml:space="preserve">
          <source>Success | {error, term()}</source>
          <target state="translated">成功|{error,term()}|成功</target>
        </trans-unit>
        <trans-unit id="8a0a4ea66889be40114ddfe9594dd7d12e174b44" translate="yes" xml:space="preserve">
          <source>Successful evaluations of the timer functions give return values containing a timer reference, denoted &lt;code&gt;TRef&lt;/code&gt;. By using &lt;code&gt;&lt;a href=&quot;#cancel-1&quot;&gt;cancel/1&lt;/a&gt;&lt;/code&gt;, the returned reference can be used to cancel any requested action. A &lt;code&gt;TRef&lt;/code&gt; is an Erlang term, which contents must not be changed.</source>
          <target state="translated">タイマー関数の評価が成功すると、 &lt;code&gt;TRef&lt;/code&gt; で示されるタイマー参照を含む戻り値が返されます。 &lt;code&gt;&lt;a href=&quot;#cancel-1&quot;&gt;cancel/1&lt;/a&gt;&lt;/code&gt; を使用すると、返された参照を使用して、要求されたアクションをキャンセルできます。A &lt;code&gt;TRef&lt;/code&gt; 内容が変更されてはならないErlangの用語、です。</target>
        </trans-unit>
        <trans-unit id="06863fc24f520b1140c18c4fa8cbe27b0b51428c" translate="yes" xml:space="preserve">
          <source>Such an application is called a &lt;strong&gt;distributed application&lt;/strong&gt;. Notice that it is the control of the application that is distributed. All applications can be distributed in the sense that they, for example, use services on other nodes.</source>
          <target state="translated">このようなアプリケーションは、&lt;strong&gt;分散アプリケーション&lt;/strong&gt;と呼ば&lt;strong&gt;れます&lt;/strong&gt;。配布されるのはアプリケーションの制御であることに注意してください。すべてのアプリケーションは、たとえば他のノードのサービスを使用するという意味で分散できます。</target>
        </trans-unit>
        <trans-unit id="c3074117af859e520c7cb63eb135640878edd509" translate="yes" xml:space="preserve">
          <source>Such an argument line must start with &lt;code&gt;%%!&lt;/code&gt; and the remaining line is interpreted as arguments to the emulator.</source>
          <target state="translated">このような引数行は &lt;code&gt;%%!&lt;/code&gt; で始まる必要があります。残りの行はエミュレータの引数として解釈されます。</target>
        </trans-unit>
        <trans-unit id="0798de14385866f626c39da2456b2b12c915aee8" translate="yes" xml:space="preserve">
          <source>Such code is difficult to read and understand, and errors occur if the numbering of the elements in the tuple is wrong. If the data representation of the fields is changed, by re-ordering, adding, or removing fields, all references to the person tuple must be checked and possibly modified.</source>
          <target state="translated">このようなコードは読み取りや理解が難しく、タプル内の要素の番号付けが間違っているとエラーが発生します。フィールドのデータ表現が、フィールドの並べ替え、追加、削除などで変更された場合、person タプルへのすべての参照をチェックし、場合によっては修正しなければなりません。</target>
        </trans-unit>
        <trans-unit id="f433654caeb1dadceed6f988cc45cba92d4659f9" translate="yes" xml:space="preserve">
          <source>Suggested stack size, in kilowords, for dirty CPU scheduler threads. Valid range is 20-8192 kilowords. The default suggested stack size is 40 kilowords.</source>
          <target state="translated">ダーティな CPU スケジューラースレッドのための推奨スタックサイズ (キロワード)。有効な範囲は 20-8192 キロワードです。デフォルトの推奨スタックサイズは 40 キロワードです。</target>
        </trans-unit>
        <trans-unit id="af6be2dcf5716a0725659c157d5e2c536263c156" translate="yes" xml:space="preserve">
          <source>Suggested stack size, in kilowords, for dirty IO scheduler threads. Valid range is 20-8192 kilowords. The default suggested stack size is 40 kilowords.</source>
          <target state="translated">ダーティな IO スケジューラースレッドのための推奨スタックサイズ (キロワード)。有効な範囲は 20-8192 キロワードです。デフォルトの推奨スタックサイズは 40 キロワードです。</target>
        </trans-unit>
        <trans-unit id="bcf432451d4daca2de4246fc100508b99bcd1023" translate="yes" xml:space="preserve">
          <source>Suggested stack size, in kilowords, for scheduler threads. Valid range is 20-8192 kilowords. The default suggested stack size is 128 kilowords.</source>
          <target state="translated">スケジューラースレッドの推奨スタックサイズ (キロワード)。有効な範囲は 20-8192 キロワードです。デフォルトの推奨スタックサイズは 128 キロワードです。</target>
        </trans-unit>
        <trans-unit id="b8bd14d1892c2129895ed57dfa2db4ceb46d0dc7" translate="yes" xml:space="preserve">
          <source>Suggested stack size, in kilowords, for threads in the async thread pool. Valid range is 16-8192 kilowords. The default suggested stack size is 16 kilowords, that is, 64 kilobyte on 32-bit architectures. This small default size has been chosen because the number of async threads can be large. The default size is enough for drivers delivered with Erlang/OTP, but might not be large enough for other dynamically linked-in drivers that use the &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt;driver_async()&lt;/a&gt;&lt;/code&gt; functionality. Notice that the value passed is only a suggestion, and it can even be ignored on some platforms.</source>
          <target state="translated">非同期スレッドプール内のスレッドの推奨スタックサイズ（キロワード単位）。有効な範囲は16〜8192キロワードです。デフォルトの推奨スタックサイズは16キロワード、つまり32ビットアーキテクチャでは64キロバイトです。非同期スレッドの数が多くなる可能性があるため、この小さなデフォルトサイズが選択されています。デフォルトのサイズは、Erlang / OTPで提供されるドライバーには十分ですが、 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt;driver_async()&lt;/a&gt;&lt;/code&gt; 機能を使用する他の動的にリンクされたドライバーには十分でない場合があります。渡された値は単なる提案であり、一部のプラットフォームでは無視することもできます。</target>
        </trans-unit>
        <trans-unit id="da7ae3ce7097a50ecd686c674729f1c7303f10ff" translate="yes" xml:space="preserve">
          <source>Suite level configuration function, executed after the last test case. (Optional)</source>
          <target state="translated">最後のテストケースの後に実行されるスイート レベルの設定機能。(オプション)</target>
        </trans-unit>
        <trans-unit id="2b05185a141699c8f8fb351934189959847a1edf" translate="yes" xml:space="preserve">
          <source>Suite level configuration function, executed before the first test case. (Optional)</source>
          <target state="translated">スイート レベルの設定関数で、最初のテスト ケースの前に実行されます。(オプション)</target>
        </trans-unit>
        <trans-unit id="04518d1a0192d1131132db139b0e5008f6d17e70" translate="yes" xml:space="preserve">
          <source>Suite-related information is sent to the major log file.</source>
          <target state="translated">スイート関連の情報は、メジャーログファイルに送信されます。</target>
        </trans-unit>
        <trans-unit id="a5a27f3edcde9ae36844a365f84f2f1240d62f6e" translate="yes" xml:space="preserve">
          <source>Suites (&lt;code&gt;*_SUITE.erl&lt;/code&gt;) files must be stored in &lt;code&gt;TestDir&lt;/code&gt; or &lt;code&gt;TestDir/test&lt;/code&gt;. All suites are compiled when the test is run.</source>
          <target state="translated">スイート（ &lt;code&gt;*_SUITE.erl&lt;/code&gt; ）ファイルは &lt;code&gt;TestDir&lt;/code&gt; または &lt;code&gt;TestDir/test&lt;/code&gt; に保存する必要があります。すべてのスイートは、テストの実行時にコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="378fda76844d25f760b8a3232570c6811c1f60f2" translate="yes" xml:space="preserve">
          <source>Summary of options not previously described for function &lt;code&gt;run/3&lt;/code&gt;:</source>
          <target state="translated">以前に関数 &lt;code&gt;run/3&lt;/code&gt; について説明されていないオプションの要約：</target>
        </trans-unit>
        <trans-unit id="2270dca3d5a482193570efd95b8b721376d2e899" translate="yes" xml:space="preserve">
          <source>Summary of options:</source>
          <target state="translated">オプションのまとめ。</target>
        </trans-unit>
        <trans-unit id="f1ea23086ee2ae5acc3750e0b83a8ad5e05aec73" translate="yes" xml:space="preserve">
          <source>Summary of the options:</source>
          <target state="translated">選択肢のまとめ。</target>
        </trans-unit>
        <trans-unit id="68214c5d6d790a263205249ceaedff42f792b42f" translate="yes" xml:space="preserve">
          <source>Summing the elements in a list and double them at the same time:</source>
          <target state="translated">リストの中の要素を合計して、同時に二重にします。</target>
        </trans-unit>
        <trans-unit id="03121a488934e060630fcbde75ce3dedf8aac8f2" translate="yes" xml:space="preserve">
          <source>Sun's Java JDK 1.6.0 or later. Our Java code (jinterface, ic) is written for JDK 1.6.0. Get it for Windows and install it, the JRE is not enough. If you don't care about Java, you can skip this step. The result will be that jinterface is not built.</source>
          <target state="translated">Sun社のJava JDK 1.6.0以降。弊社のJavaコード(jinterface,ic)はJDK 1.6.0用に書かれています。Windows用に入手してインストールしてください、JREだけでは足りません。Javaに興味がない場合は、このステップをスキップすることができます。その結果、jinterfaceがビルドされないことになります。</target>
        </trans-unit>
        <trans-unit id="14bb55d7d7430a4e707657bbba24d20d9e03a1c8" translate="yes" xml:space="preserve">
          <source>Sundanese</source>
          <target state="translated">Sundanese</target>
        </trans-unit>
        <trans-unit id="80226badb4fe578fcd3821c9a1fd88e31eb75b5b" translate="yes" xml:space="preserve">
          <source>Supervision of Erlang/OTP</source>
          <target state="translated">Erlang/OTPの監修</target>
        </trans-unit>
        <trans-unit id="829f8d39f75c9bc9f969226bb510126e3c23e139" translate="yes" xml:space="preserve">
          <source>Supervision of a node being started using internal callback functions. Used to prevent hanging nodes. (Configurable.)</source>
          <target state="translated">内部のコールバック関数を使用して起動中のノードを監視します。ノードがぶら下がるのを防ぐために使用します。(設定可能)</target>
        </trans-unit>
        <trans-unit id="924f7769a101580d991ad9414eee8efcbffebbdb" translate="yes" xml:space="preserve">
          <source>Supervisor - skeleton for the OTP supervisor behavior</source>
          <target state="translated">スーパーバイザー-OTPスーパーバイザーの行動のスケルトン</target>
        </trans-unit>
        <trans-unit id="323811135ee8c95f4855f00e4ef8542d2be8796b" translate="yes" xml:space="preserve">
          <source>Supervisor Bridge - skeleton for the OTP supervisor bridge behavior</source>
          <target state="translated">スーパーバイザブリッジ-OTPスーパーバイザブリッジ動作のスケルトン</target>
        </trans-unit>
        <trans-unit id="da3aea84a47845aadb4debb823b5071baf475b58" translate="yes" xml:space="preserve">
          <source>Supervisor report</source>
          <target state="translated">スーパーバイザーレポート</target>
        </trans-unit>
        <trans-unit id="87df9f02b7ab7494841fbdf4d8bc6ea62d2782fd" translate="yes" xml:space="preserve">
          <source>Supervisor reports and crash reports are issued as &lt;code&gt;error&lt;/code&gt; level log events, and are logged through the default handler started by Kernel.</source>
          <target state="translated">スーパーバイザレポートとクラッシュレポートは、 &lt;code&gt;error&lt;/code&gt; レベルのログイベントとして発行され、カーネルによって開始されたデフォルトのハンドラを通じてログに記録されます。</target>
        </trans-unit>
        <trans-unit id="8134165a77d04e2d6551122c49e5bdd280bc54b0" translate="yes" xml:space="preserve">
          <source>Supervisor reports, crash reports, and progress reports are no longer connected to the SASL application.</source>
          <target state="translated">スーパーバイザレポート、クラッシュレポート、進捗レポートはSASLアプリケーションに接続されなくなりました。</target>
        </trans-unit>
        <trans-unit id="9969a639fd5f6ed1ac8b07340d0c05f6c0b8953c" translate="yes" xml:space="preserve">
          <source>Supervisors are processes that monitor the behaviour of workers. A supervisor can restart a worker if something goes wrong.</source>
          <target state="translated">スーパーバイザーとは、労働者の行動を監視するプロセスのことです。スーパーバイザーは、何か問題が発生した場合に、労働者を再起動させることができます。</target>
        </trans-unit>
        <trans-unit id="1b867b17045f3842a273db8cba0550b3d1ac6614" translate="yes" xml:space="preserve">
          <source>Support all platforms that implement DTrace: OS X, Solaris, and (I hope) FreeBSD and NetBSD.</source>
          <target state="translated">DTrace を実装しているすべてのプラットフォームをサポートします。OS X、Solaris、(できれば)FreeBSD と NetBSD。</target>
        </trans-unit>
        <trans-unit id="69fe8cf7ba05f1cc818c0855d845cf60eed872f5" translate="yes" xml:space="preserve">
          <source>Support for CGI-1.1 is implemented in accordance with &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3875.txt&quot;&gt;RFC 3875&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">CGI-1.1のサポートは、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3875.txt&quot;&gt;RFC 3875&lt;/a&gt;&lt;/code&gt; に従って実装されています。</target>
        </trans-unit>
        <trans-unit id="cab27f867ed7b84d1da4274c9b4c8a517efc3269" translate="yes" xml:space="preserve">
          <source>Support for UTF-8 encoded atoms in the external format has been available since ERTS 5.10 (OTP R16). This abillity allows such old nodes to decode, store and encode any Unicode atoms received from a new OTP 20 node.</source>
          <target state="translated">外部フォーマットでの UTF-8 エンコードされたアトムのサポートは ERTS 5.10 (OTP R16)から利用可能です。この能力により、そのような古いノードは、新しいOTP 20ノードから受信したUnicodeアトムをデコード、保存、エンコードすることができるようになります。</target>
        </trans-unit>
        <trans-unit id="193baef9a2c52722bfd0c24ca1ca0d35adeafcf4" translate="yes" xml:space="preserve">
          <source>Support for Unicode is increasing throughout the world of computing, as the benefits of one common character set are overwhelming when programs are used in a global environment. Along with the base of the standard, the code points for all the scripts, some &lt;strong&gt;encoding standards&lt;/strong&gt; are available.</source>
          <target state="translated">プログラムがグローバル環境で使用されるとき、1つの共通の文字セットの利点が圧倒されるため、Unicodeのサポートはコンピューティングの世界全体で増加しています。標準のベース、すべてのスクリプトのコードポイントに加えて、いくつかの&lt;strong&gt;エンコーディング標準&lt;/strong&gt;が利用可能です。</target>
        </trans-unit>
        <trans-unit id="8f1a1f5f1f39e75130f9a4b8fb8862e77cf4de40" translate="yes" xml:space="preserve">
          <source>Support for alternative service discovery mechanisms was added in Erlang/OTP 21.</source>
          <target state="translated">Erlang/OTP 21で代替サービス発見メカニズムのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="1d962630c5d6ce765c1eae0f7d5dc468e364cb4b" translate="yes" xml:space="preserve">
          <source>Support for the following encoding rules:</source>
          <target state="translated">以下のエンコーディングルールに対応しています。</target>
        </trans-unit>
        <trans-unit id="cf1c782df2c96e8282de7b476d79cc67e49828fb" translate="yes" xml:space="preserve">
          <source>Support for time measurement in NIF libraries:</source>
          <target state="translated">NIFライブラリでの時間計測をサポート。</target>
        </trans-unit>
        <trans-unit id="4c3f03f63be41e2febacf4326efd1546b9941350" translate="yes" xml:space="preserve">
          <source>Support for time measurement in drivers:</source>
          <target state="translated">ドライバーの時間計測をサポート。</target>
        </trans-unit>
        <trans-unit id="dc296a0486ec5f87002aad7f28ba0562ca867666" translate="yes" xml:space="preserve">
          <source>Support functions for property lists.</source>
          <target state="translated">プロパティリストのサポート機能</target>
        </trans-unit>
        <trans-unit id="93baf438b0613f3c74f0fdc2ba5aba73338aaf24" translate="yes" xml:space="preserve">
          <source>Support functions for test suite authors</source>
          <target state="translated">テストスイート作成者へのサポート機能</target>
        </trans-unit>
        <trans-unit id="76ec5026dd3939812f4e93c176c2a0f384d8c0e6" translate="yes" xml:space="preserve">
          <source>Support libraries contain functions that are useful for all test suites, or for test suites in a specific functional area or subsystem. In addition to the general support libraries provided by the &lt;code&gt;Common Test&lt;/code&gt; framework, and the various libraries and applications provided by Erlang/OTP, there can also be a need for customized (user specific) support libraries.</source>
          <target state="translated">サポートライブラリには、すべてのテストスイート、または特定の機能領域またはサブシステムのテストスイートに役立つ関数が含まれています。 &lt;code&gt;Common Test&lt;/code&gt; フレームワークによって提供される一般的なサポートライブラリ、およびErlang / OTPによって提供されるさまざまなライブラリとアプリケーションに加えて、カスタマイズされた（ユーザー固有の）サポートライブラリも必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="0362ec0d097a5a157104529b450e00204f9cbbb5" translate="yes" xml:space="preserve">
          <source>Support library for abstract Erlang syntax trees.</source>
          <target state="translated">抽象的な Erlang 構文木のサポートライブラリ。</target>
        </trans-unit>
        <trans-unit id="e9eea1dd92def1101125de3b37a7409d58a3f281" translate="yes" xml:space="preserve">
          <source>Support the &lt;code&gt;sys&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#debug&quot;&gt;debug facilities&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#debug&quot;&gt;debug facilities&lt;/a&gt;&lt;/code&gt; サポートする</target>
        </trans-unit>
        <trans-unit id="95c22864cfced2306503ecdcaa13a389468c1121" translate="yes" xml:space="preserve">
          <source>Support was added for normalizations forms in &lt;code&gt;unicode&lt;/code&gt; and the &lt;code&gt;string&lt;/code&gt; module now handles utf8-encoded binaries.</source>
          <target state="translated">&lt;code&gt;unicode&lt;/code&gt; 正規化フォームのサポートが追加され、 &lt;code&gt;string&lt;/code&gt; モジュールがutf8でエンコードされたバイナリを処理するようになりました。</target>
        </trans-unit>
        <trans-unit id="8c3d6e2b0c4b55646256fe3e98da277b50ee5de3" translate="yes" xml:space="preserve">
          <source>Supported cipher suites. The function &lt;code&gt;cipher_suites/0&lt;/code&gt; can be used to find all ciphers that are supported by default. &lt;code&gt;cipher_suites(all)&lt;/code&gt; can be called to find all available cipher suites. Pre-Shared Key (&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4279.txt&quot;&gt;RFC 4279&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5487.txt&quot;&gt;RFC 5487&lt;/a&gt;&lt;/code&gt;), Secure Remote Password (&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5054.txt&quot;&gt;RFC 5054&lt;/a&gt;&lt;/code&gt;), RC4 cipher suites, and anonymous cipher suites only work if explicitly enabled by this option; they are supported/enabled by the peer also. Anonymous cipher suites are supported for testing purposes only and are not be used when security matters.</source>
          <target state="translated">サポートされている暗号スイート。関数 &lt;code&gt;cipher_suites/0&lt;/code&gt; を使用して、デフォルトでサポートされているすべての暗号を見つけることができます。 &lt;code&gt;cipher_suites(all)&lt;/code&gt; を呼び出して、使用可能なすべての暗号スイートを検索できます。事前共有キー（ &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4279.txt&quot;&gt;RFC 4279&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5487.txt&quot;&gt;RFC 5487&lt;/a&gt;&lt;/code&gt; ）、セキュアリモートパスワード（ &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5054.txt&quot;&gt;RFC 5054&lt;/a&gt;&lt;/code&gt; ）、RC4暗号スイート、および匿名暗号スイートは、このオプションで明示的に有効にされている場合にのみ機能します。それらはピアによってもサポート/有効化されます。匿名の暗号スイートはテスト目的でのみサポートされており、セキュリティが重要な場合には使用されません。</target>
        </trans-unit>
        <trans-unit id="6ace0dceed0dc79156d544bb1e740bd6e2e4245f" translate="yes" xml:space="preserve">
          <source>Supported option: &lt;code&gt;-o&lt;/code&gt;.</source>
          <target state="translated">サポートされるオプション： &lt;code&gt;-o&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8862943cc8300abfb1bde27326d75dc9a30f07d9" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-D&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;-W&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt;.</source>
          <target state="translated">サポートされるオプション： &lt;code&gt;-I&lt;/code&gt; 、 &lt;code&gt;-o&lt;/code&gt; 、 &lt;code&gt;-D&lt;/code&gt; 、 &lt;code&gt;-v&lt;/code&gt; 、 &lt;code&gt;-W&lt;/code&gt; 、 &lt;code&gt;-b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b18222290f4691ea2e1803f27d33f984dc4fed35" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-W&lt;/code&gt;.</source>
          <target state="translated">サポートされるオプション： &lt;code&gt;-I&lt;/code&gt; 、 &lt;code&gt;-o&lt;/code&gt; 、 &lt;code&gt;-W&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="611e3fc6659a77f464d1ef09b1a3f966abeee562" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;-W&lt;/code&gt;.</source>
          <target state="translated">サポートされるオプション： &lt;code&gt;-I&lt;/code&gt; 、 &lt;code&gt;-o&lt;/code&gt; 、 &lt;code&gt;-b&lt;/code&gt; 、 &lt;code&gt;-W&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13af750ddec082e015f88004babe3e1a9cbf2249" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;.</source>
          <target state="translated">サポートされるオプション： &lt;code&gt;-I&lt;/code&gt; 、 &lt;code&gt;-o&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee8aa3fc6cd2da1cc08dd61046fb6b0ad0efa14b" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-W&lt;/code&gt;.</source>
          <target state="translated">サポートされるオプション： &lt;code&gt;-o&lt;/code&gt; 、 &lt;code&gt;-v&lt;/code&gt; 、 &lt;code&gt;-I&lt;/code&gt; 、 &lt;code&gt;-W&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9956c47dfedf732cac76d6c7cf8152d9c9559ea6" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt;.</source>
          <target state="translated">サポートされるオプション： &lt;code&gt;-o&lt;/code&gt; 、 &lt;code&gt;-v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6162eeb9b9f8ad636a290938543b85a83786b99" translate="yes" xml:space="preserve">
          <source>Supported options: same as for &lt;code&gt;.erl&lt;/code&gt;.</source>
          <target state="translated">サポートされるオプション： &lt;code&gt;.erl&lt;/code&gt; の場合と同じ。</target>
        </trans-unit>
        <trans-unit id="002fcc7d4fbae71f711cdd87becc1cce73be8aaf" translate="yes" xml:space="preserve">
          <source>Supported time unit representations:</source>
          <target state="translated">時間単位の表現をサポートしています。</target>
        </trans-unit>
        <trans-unit id="ae00ef55d1dcfbb028df51241440b188a57ac58d" translate="yes" xml:space="preserve">
          <source>Supported-Vendor-Id AVP</source>
          <target state="translated">サポートされているベンダー ID AVP</target>
        </trans-unit>
        <trans-unit id="e769daffee112f18015a5281f7f10cc6e2232070" translate="yes" xml:space="preserve">
          <source>Supports automatic repair of log files that are not properly closed and enables efficient reading of logged items in &lt;strong&gt;chunks&lt;/strong&gt; using a set of functions defined in this module. This is the only way to read internally formatted logs. An item logged to an internally formatted log must not occupy more than 4 GB of disk space (the size must fit in 4 bytes).</source>
          <target state="translated">適切に閉じられていないログファイルの自動修復をサポートし、このモジュールで定義されている一連の関数を使用して、ログに記録されたアイテムを&lt;strong&gt;チャンク&lt;/strong&gt;で効率的に読み取ることができます。これは、内部的にフォーマットされたログを読み取る唯一の方法です。内部的にフォーマットされたログに記録されるアイテムは、4 GBを超えるディスク領域を占有してはなりません（サイズは4バイトに収まる必要があります）。</target>
        </trans-unit>
        <trans-unit id="cbbfa591a4b290b4ae62ef1ecc1698736ec6299b" translate="yes" xml:space="preserve">
          <source>Supports calling Erlang functions on remote nodes. &lt;code&gt;ei_rpc_to()&lt;/code&gt; sends an RPC request to a remote node and &lt;code&gt;ei_rpc_from()&lt;/code&gt; receives the results of such a call. &lt;code&gt;ei_rpc()&lt;/code&gt; combines the functionality of these two functions by sending an RPC request and waiting for the results. See also &lt;code&gt;rpc:call/4&lt;/code&gt; in Kernel.</source>
          <target state="translated">リモートノードでのErlang関数の呼び出しをサポートします。 &lt;code&gt;ei_rpc_to()&lt;/code&gt; はRPC要求をリモートノードに送信し、 &lt;code&gt;ei_rpc_from()&lt;/code&gt; はそのような呼び出しの結果を受信します。 &lt;code&gt;ei_rpc()&lt;/code&gt; は、RPC要求を送信して結果を待つことにより、これら2つの関数の機能を組み合わせます。カーネルの &lt;code&gt;rpc:call/4&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="fa8c650384582fade821d1435197dd4d799e10f6" translate="yes" xml:space="preserve">
          <source>Supports calling Erlang functions on remote nodes. &lt;code&gt;erl_rpc_to()&lt;/code&gt; sends an RPC request to a remote node and &lt;code&gt;erl_rpc_from()&lt;/code&gt; receives the results of such a call. &lt;code&gt;erl_rpc()&lt;/code&gt; combines the functionality of these two functions by sending an RPC request and waiting for the results. See also &lt;code&gt;rpc:call/4&lt;/code&gt; in &lt;code&gt;Kernel&lt;/code&gt;.</source>
          <target state="translated">リモートノードでのErlang関数の呼び出しをサポートします。 &lt;code&gt;erl_rpc_to()&lt;/code&gt; はRPC要求をリモートノードに送信し、 &lt;code&gt;erl_rpc_from()&lt;/code&gt; はそのような呼び出しの結果を受信します。 &lt;code&gt;erl_rpc()&lt;/code&gt; は、RPC要求を送信して結果を待機することにより、これら2つの関数の機能を組み合わせます。参照してください。 &lt;code&gt;rpc:call/4&lt;/code&gt; で &lt;code&gt;Kernel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3811292723c6d7a387a20acab2375d3a48075ff" translate="yes" xml:space="preserve">
          <source>Suppose now that &lt;code&gt;cp2&lt;/code&gt; goes also down and does not restart within 5 seconds. &lt;code&gt;myapp&lt;/code&gt; is now restarted on &lt;code&gt;cp3&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;cp2&lt;/code&gt; も停止し、5秒以内に再起動しないとします。 &lt;code&gt;myapp&lt;/code&gt; が &lt;code&gt;cp3&lt;/code&gt; で再起動されます。</target>
        </trans-unit>
        <trans-unit id="c2a35d6565243a0a37ae621d98c111036eb6b54a" translate="yes" xml:space="preserve">
          <source>Suppose now that we call &lt;code&gt;set_lock_button&lt;/code&gt; while the door is open, and we have already postponed a button event that was the new lock button:</source>
          <target state="translated">ドアが開いている間に &lt;code&gt;set_lock_button&lt;/code&gt; を呼び出し、新しいロックボタンであるボタンイベントを既に延期しているとします。</target>
        </trans-unit>
        <trans-unit id="4f259e320457b94f7101d49c931d3f7e53c48f31" translate="yes" xml:space="preserve">
          <source>Suppose our client expects to connect to the web server https://www.example.net. This URI is therefore the Reference IDs of the client. The call will be:</source>
          <target state="translated">クライアントが Web サーバー https://www.example.net に接続することを期待しているとします。したがって、このURIはクライアントのリファレンスIDとなります。呼び出しになります。</target>
        </trans-unit>
        <trans-unit id="f86d7a4fa0c16e05b4083974f68f3f6c6ca32ef5" translate="yes" xml:space="preserve">
          <source>Suppose you have the following private key and a corresponding public key:</source>
          <target state="translated">以下の秘密鍵とそれに対応する公開鍵を持っているとします。</target>
        </trans-unit>
        <trans-unit id="161e2a3301f56050bd72a9a234717ac0bdcee365" translate="yes" xml:space="preserve">
          <source>Suppress erl and hrl generation, respectively.</source>
          <target state="translated">erlとhrlの生成をそれぞれ抑制する。</target>
        </trans-unit>
        <trans-unit id="fd85d4a3e5b009ade7267fa909dd246107f8cd7a" translate="yes" xml:space="preserve">
          <source>Suppress warnings about behavior callbacks that drift from the published recommended interfaces.</source>
          <target state="translated">公開されている推奨インターフェースから逸脱したビヘイビアコールバックの警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="658d4e7b1b098b27aa4e9901e6a6a91fde3e7e4d" translate="yes" xml:space="preserve">
          <source>Suppress warnings about behaviors that have no &lt;code&gt;-callback&lt;/code&gt; attributes for their callbacks.</source>
          <target state="translated">コールバックに &lt;code&gt;-callback&lt;/code&gt; 属性がない動作に関する警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="99d8fcbfb989e4e7fda7c9452d49bb803228dd19" translate="yes" xml:space="preserve">
          <source>Suppress warnings about calls to missing functions.</source>
          <target state="translated">不足している関数の呼び出しに対する警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="f5f104449e97fb4d3d9fd5d369f54de49da0d189" translate="yes" xml:space="preserve">
          <source>Suppress warnings about invalid contracts.</source>
          <target state="translated">無効な契約に関する警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="896f6537b177bdb199d5aeaf1e91ac70a0c3690d" translate="yes" xml:space="preserve">
          <source>Suppress warnings for construction of improper lists.</source>
          <target state="translated">不適切なリストの構築に対する警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="9e5a8003fe113325954491747d862630cd7a5e51" translate="yes" xml:space="preserve">
          <source>Suppress warnings for failing calls.</source>
          <target state="translated">呼び出しに失敗した場合の警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="03070bddd1c1713fe09504f3e04390b0f76857ef" translate="yes" xml:space="preserve">
          <source>Suppress warnings for fun applications that will fail.</source>
          <target state="translated">失敗する楽しいアプリケーションの警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="e363bcef03fbcf4ab0a513ebe34c444e24468b1f" translate="yes" xml:space="preserve">
          <source>Suppress warnings for functions that will never return a value.</source>
          <target state="translated">値を返さない関数の警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="9e7a409dd7e022c1a6f54bf31cd4e3da6ea87e20" translate="yes" xml:space="preserve">
          <source>Suppress warnings for patterns that are unused or cannot match.</source>
          <target state="translated">未使用または一致しないパターンの警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="38c67ecef5210cce75595b7c59b94ce46cbf5939" translate="yes" xml:space="preserve">
          <source>Suppress warnings for unused functions.</source>
          <target state="translated">未使用の関数に対する警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="0e23a74a695d05be9cf7ca7b4cd92c59cd8c658c" translate="yes" xml:space="preserve">
          <source>Suppress warnings for violations of opacity of data types.</source>
          <target state="translated">データ型の不透明性の違反に対する警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="00dba67736694228fe581698490416aec0e4a248" translate="yes" xml:space="preserve">
          <source>Suppresses the call statistics for each process from the analysis.</source>
          <target state="translated">各プロセスのコール統計情報を解析から抑制します。</target>
        </trans-unit>
        <trans-unit id="5fe98e618f2833867a376cb98a815ac9ec990dd1" translate="yes" xml:space="preserve">
          <source>Suppresses the printing of callers and called information in the analysis.</source>
          <target state="translated">解析での発信者情報や呼び出し情報の印刷を抑制します。</target>
        </trans-unit>
        <trans-unit id="df8a60c08e48d602804f88560585bc9fbb66d14d" translate="yes" xml:space="preserve">
          <source>Suppresses the writing of a crash dump file entirely, thus rebooting the runtime system immediately. This is the same as not setting the environment variable.</source>
          <target state="translated">クラッシュダンプファイルの書き込みを完全に抑制し、ランタイムシステムを直ちに再起動します。これは環境変数を設定しないのと同じです。</target>
        </trans-unit>
        <trans-unit id="a988c8ef2b296fc0ea2e2d3047e7e09c23301de2" translate="yes" xml:space="preserve">
          <source>Supresses the totals section in the analysis, which is the default.</source>
          <target state="translated">既定値である分析の合計セクションを抑制します。</target>
        </trans-unit>
        <trans-unit id="0ef25d72e538682415b03c36a263df0107df3d7d" translate="yes" xml:space="preserve">
          <source>Surefire XML can, for example, be used by Jenkins to display test results.</source>
          <target state="translated">Surefire XMLは、例えばJenkinsがテスト結果を表示するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="b793def872c04362cbd57644640b08e1bf84da10" translate="yes" xml:space="preserve">
          <source>Surefire reports for EUnit (Format used by Maven and Atlassian Bamboo for example to integrate test results).</source>
          <target state="translated">EUnit用のSurefireレポート(テスト結果を統合するためにMavenやAtlassian Bambooなどで使用されるフォーマット)。</target>
        </trans-unit>
        <trans-unit id="7631dc723852ac4b0bb4fd7d3058478eb65f5073" translate="yes" xml:space="preserve">
          <source>Surefire reports for EUnit (Format used by Maven and Atlassian Bamboo for example to integrate test results). Based on initial code from Paul Guyot.</source>
          <target state="translated">EUnit用のSurefireレポート(テスト結果を統合するためにMavenやAtlassian Bambooなどで使用されるフォーマット)。Paul Guyotの初期コードに基づいています。</target>
        </trans-unit>
        <trans-unit id="c948ea0246807256cf48a7cfaaf94b78e7b2095a" translate="yes" xml:space="preserve">
          <source>Surrogate</source>
          <target state="translated">Surrogate</target>
        </trans-unit>
        <trans-unit id="e9bce0f224084ad788d49010d7d7d29a8ae63144" translate="yes" xml:space="preserve">
          <source>Suspend the processes using the module (to avoid that they try to handle any requests before the code replacement is completed).</source>
          <target state="translated">モジュールを使用しているプロセスをサスペンドします (コードの置き換えが完了する前にリクエストを処理しようとしないようにするため)。</target>
        </trans-unit>
        <trans-unit id="d39141a48920c1be93a6f36d09eebe0906941a82" translate="yes" xml:space="preserve">
          <source>Suspends the process calling this function for &lt;code&gt;Time&lt;/code&gt; milliseconds and then returns &lt;code&gt;ok&lt;/code&gt;, or suspends the process forever if &lt;code&gt;Time&lt;/code&gt; is the atom &lt;code&gt;infinity&lt;/code&gt;. Naturally, this function does &lt;strong&gt;not&lt;/strong&gt; return immediately.</source>
          <target state="translated">この関数を呼び出すプロセスを &lt;code&gt;Time&lt;/code&gt; ミリ秒間中断してから &lt;code&gt;ok&lt;/code&gt; を返すか、 &lt;code&gt;Time&lt;/code&gt; がアトム &lt;code&gt;infinity&lt;/code&gt; 場合はプロセスを永久に中断します。当然、この関数はすぐに&lt;strong&gt;は&lt;/strong&gt;戻りませ&lt;strong&gt;ん&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a2e824b6e4f75be4a07d7079e9c06b0752d0649c" translate="yes" xml:space="preserve">
          <source>Suspends the process identified by &lt;code&gt;Suspendee&lt;/code&gt;. The same as calling &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt;erlang:suspend_process(Suspendee, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; によって識別されたプロセスを一時停止します。 &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt;erlang:suspend_process(Suspendee, [])&lt;/a&gt;&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="d982fb65e6d52487c1ff358f3e710016d64e310b" translate="yes" xml:space="preserve">
          <source>Suspends the process. When the process is suspended, it only responds to other system messages, but not other messages.</source>
          <target state="translated">プロセスを一時停止します。プロセスがサスペンドされると、他のシステムメッセージにのみ応答し、他のメッセージには応答しません。</target>
        </trans-unit>
        <trans-unit id="4868e2fd51bda36328ddd3547e74c2e3f69d3c0e" translate="yes" xml:space="preserve">
          <source>Swaps places on &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Id&lt;/code&gt; space for ports and processes.</source>
          <target state="translated">ポートとプロセスの &lt;code&gt;Name&lt;/code&gt; と &lt;code&gt;Id&lt;/code&gt; スペースの場所を入れ替えます。</target>
        </trans-unit>
        <trans-unit id="85a66af5fe9577ba36cb5dc160b5ab726c351f25" translate="yes" xml:space="preserve">
          <source>Switches off HTML enhancements that can be incompatible with older browsers.</source>
          <target state="translated">古いブラウザとの互換性がない可能性があるHTMLの拡張機能をオフにします。</target>
        </trans-unit>
        <trans-unit id="f73cc71db4a1a943c0921fa8a5b8bb091227bf54" translate="yes" xml:space="preserve">
          <source>Syloti_Nagri</source>
          <target state="translated">Syloti_Nagri</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="ff671c52be278a122290e8362f747edf95308739" translate="yes" xml:space="preserve">
          <source>Symbolic Links in --bindir</source>
          <target state="translated">シンボリックリンク</target>
        </trans-unit>
        <trans-unit id="38614ef7ffaabdccf540bb23f1bf4109a9456e2e" translate="yes" xml:space="preserve">
          <source>Symbolic links are not supported on this platform.</source>
          <target state="translated">シンボリックリンクはこのプラットフォームではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="b2db0c5c047d755597fe723f5b3906e0e790e5fa" translate="yes" xml:space="preserve">
          <source>Symbolic names must be unique within a MIB and within a system.</source>
          <target state="translated">記号名は、MIB内およびシステム内で一意でなければなりません。</target>
        </trans-unit>
        <trans-unit id="bc20e08aa6ee36e007fb8be42c9963c3987432d6" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the native time unit used by the Erlang runtime system.</source>
          <target state="translated">Erlangのランタイムシステムで使われるネイティブの時間単位を記号で表現したもの。</target>
        </trans-unit>
        <trans-unit id="9c3de4c1d499b9c4d2940a999036876a992d4f1a" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the performance counter time unit used by the Erlang runtime system.</source>
          <target state="translated">Erlangランタイムシステムで使われるパフォーマンスカウンターの時間単位を記号で表したもの。</target>
        </trans-unit>
        <trans-unit id="07800dda6fdaf0f476886edeef6a9aeb0d872f21" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1000000000&lt;/code&gt;.</source>
          <target state="translated">整数 &lt;code&gt;1000000000&lt;/code&gt; で表される時間単位の記号表現。</target>
        </trans-unit>
        <trans-unit id="2649cc9e01c228ec0f5a481c6b1745e523dc1efc" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1000000&lt;/code&gt;.</source>
          <target state="translated">整数 &lt;code&gt;1000000&lt;/code&gt; で表される時間単位の記号表現。</target>
        </trans-unit>
        <trans-unit id="b93ca2c4c24c9b54782ff7202cd91a428f51d3f7" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1000&lt;/code&gt;.</source>
          <target state="translated">整数 &lt;code&gt;1000&lt;/code&gt; で表される時間単位の記号表現。</target>
        </trans-unit>
        <trans-unit id="9196744d900f2593e47a8bb8e5453768b4547c96" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">整数 &lt;code&gt;1&lt;/code&gt; で表される時間単位の記号表現。</target>
        </trans-unit>
        <trans-unit id="fde31cc35fbdb6242bd81a4ff154a0d240c0fc6b" translate="yes" xml:space="preserve">
          <source>Symbols such as &lt;code&gt;'{'&lt;/code&gt;, &lt;code&gt;'.'&lt;/code&gt;, etc., have to be enclosed in single quotes when used as terminal or non-terminal symbols in grammar rules. The use of the symbols &lt;code&gt;'$empty'&lt;/code&gt;, &lt;code&gt;'$end'&lt;/code&gt;, and &lt;code&gt;'$undefined'&lt;/code&gt; should be avoided.</source>
          <target state="translated">&lt;code&gt;'{'&lt;/code&gt; 、 &lt;code&gt;'.'&lt;/code&gt; などの記号 などは、文法規則で終端記号または非終端記号として使用する場合は、単一引用符で囲む必要があります。記号 &lt;code&gt;'$empty'&lt;/code&gt; 、 &lt;code&gt;'$end'&lt;/code&gt; 、および &lt;code&gt;'$undefined'&lt;/code&gt; は避けてください。</target>
        </trans-unit>
        <trans-unit id="e6c13be05542d397298f393613981e3279a425af" translate="yes" xml:space="preserve">
          <source>Symetric cipher algorithm used for the payload encryption. This algorithm will use the key calculated in the kex phase (together with other info) to genereate the actual key used. Examples are tripple-DES &lt;code&gt;'3des-cbc'&lt;/code&gt; and one of many AES variants &lt;code&gt;'aes192-ctr'&lt;/code&gt;.</source>
          <target state="translated">ペイロードの暗号化に使用される対称暗号アルゴリズム。このアルゴリズムは、kexフェーズで計算されたキーを（他の情報と共に）使用して、実際に使用されるキーを生成します。例は、triple-DES &lt;code&gt;'3des-cbc'&lt;/code&gt; および多くのAESバリアント &lt;code&gt;'aes192-ctr'&lt;/code&gt; の 1つです。</target>
        </trans-unit>
        <trans-unit id="87f15c5c25b82750fdbe6837aad13a797f701d1e" translate="yes" xml:space="preserve">
          <source>Synchronization error during chunk sending according to one of the following:</source>
          <target state="translated">以下のいずれかに該当するチャンク送信中に同期エラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="32b88210af732b7fa6f0597cd05eb328619f14e7" translate="yes" xml:space="preserve">
          <source>Synchronize (write to disc, if possible) the mib-server data. This depends on the &lt;code&gt;mib_storage&lt;/code&gt; option, and will only have an effect if the mib-storage option has an actual disc component (such as dets, or ets with a file).</source>
          <target state="translated">mib-serverデータを同期します（可能な場合はディスクに書き込みます）。これは &lt;code&gt;mib_storage&lt;/code&gt; オプションに依存し、mib-storageオプションに実際のディスクコンポーネント（det、またはets with a fileなど）がある場合にのみ効果があります。</target>
        </trans-unit>
        <trans-unit id="312c1653b8bc7388af6f57b8ea1d1432ae577b59" translate="yes" xml:space="preserve">
          <source>Synchronize the mib-storage table.</source>
          <target state="translated">mib-storageテーブルを同期させます。</target>
        </trans-unit>
        <trans-unit id="e07fb72859a7d37936b725af7a1d5239adfbbe40" translate="yes" xml:space="preserve">
          <source>Synchronized code replacement of processes using module &lt;code&gt;Mod&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;Mod&lt;/code&gt; を使用したプロセスの同期コード置換。</target>
        </trans-unit>
        <trans-unit id="01a1092f1791521fc50b0a1a453d3d4948b7f226" translate="yes" xml:space="preserve">
          <source>Synchronizes the global name server with all nodes known to this node. These are the nodes that are returned from &lt;code&gt;erlang:nodes()&lt;/code&gt;. When this function returns, the global name server receives global information from all nodes. This function can be called when new nodes are added to the network.</source>
          <target state="translated">グローバルネームサーバーを、このノードが認識しているすべてのノードと同期させます。これらは &lt;code&gt;erlang:nodes()&lt;/code&gt; から返されるノードです。この関数が戻ると、グローバルネームサーバーはすべてのノードからグローバル情報を受信します。この関数は、新しいノードがネットワークに追加されたときに呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="89fe354cd7884bf36eefa9b3c8217acccc91948e" translate="yes" xml:space="preserve">
          <source>Synchronizes the group nodes, that is, the global name servers on the group nodes. Also checks the names globally registered in the current global group and unregisters them on any known node not part of the group.</source>
          <target state="translated">グループノード、つまりグループノード上のグローバルネームサーバーを同期させます。また、現在のグローバルグループにグローバルに登録されている名前をチェックし、グループに属していない既知のノードの名前の登録を解除します。</target>
        </trans-unit>
        <trans-unit id="07710d25b770f253a75d0aab226aa1ae135666c1" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;code&gt;get-bulk-request&lt;/code&gt; (See RFC1905).</source>
          <target state="translated">同期の &lt;code&gt;get-bulk-request&lt;/code&gt; （RFC1905を参照）。</target>
        </trans-unit>
        <trans-unit id="f448ebbd4129a3291d4535aeab92c4cc47e4ddab" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;code&gt;get-next-request&lt;/code&gt;.</source>
          <target state="translated">同期の &lt;code&gt;get-next-request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b2b2fa27dbb4052bd3748ef0458bfd012b62beb" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;code&gt;get-request&lt;/code&gt;.</source>
          <target state="translated">同期 &lt;code&gt;get-request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e513e56abe4ab6731c1a205d51fc5b5980806174" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;code&gt;set-request&lt;/code&gt;.</source>
          <target state="translated">同期 &lt;code&gt;set-request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33a68e25327ecc51a99120fe1d23ee0e50bf0b8b" translate="yes" xml:space="preserve">
          <source>Synchronously appends a list of items to the log. It is more efficient to use these functions instead of functions &lt;code&gt;log/2&lt;/code&gt; and &lt;code&gt;blog/2&lt;/code&gt;. The specified list is split into as large sublists as possible (limited by the size of wrap log files), and each sublist is logged as one single item, which reduces the overhead.</source>
          <target state="translated">同期してログにアイテムのリストを追加します。関数 &lt;code&gt;log/2&lt;/code&gt; および &lt;code&gt;blog/2&lt;/code&gt; の代わりにこれらの関数を使用する方が効率的です。指定されたリストは可能な限り大きなサブリストに分割され（ラップログファイルのサイズによって制限されます）、各サブリストは1つのアイテムとして記録されるため、オーバーヘッドが削減されます。</target>
        </trans-unit>
        <trans-unit id="089dc8c699a717858006211347bb6b82478e752b" translate="yes" xml:space="preserve">
          <source>Synchronously appends a term to a disk log. Returns &lt;code&gt;ok&lt;/code&gt; or &lt;code&gt;{error, Reason}&lt;/code&gt; when the term is written to disk. If the log is distributed, &lt;code&gt;ok&lt;/code&gt; is returned, unless all nodes are down. Terms are written by the ordinary &lt;code&gt;write()&lt;/code&gt; function of the operating system. Hence, it is not guaranteed that the term is written to disk, it can linger in the operating system kernel for a while. To ensure that the item is written to disk, function &lt;code&gt;&lt;a href=&quot;#sync-1&quot;&gt;sync/1&lt;/a&gt;&lt;/code&gt; must be called.</source>
          <target state="translated">同期的に用語をディスクログに追加します。用語がディスクに書き込まれると &lt;code&gt;{error, Reason}&lt;/code&gt; &lt;code&gt;ok&lt;/code&gt; または{error、Reason}を返します。ログが配布されている場合、すべてのノードが停止していない限り、 &lt;code&gt;ok&lt;/code&gt; が返されます。用語は、オペレーティングシステムの通常の &lt;code&gt;write()&lt;/code&gt; 関数によって書き込まれます。したがって、この用語がディスクに書き込まれることは保証されず、オペレーティングシステムのカーネルにしばらく残ることがあります。アイテムが確実にディスクに書き込まれるようにするには、関数 &lt;code&gt;&lt;a href=&quot;#sync-1&quot;&gt;sync/1&lt;/a&gt;&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="34f5f72fe0e623ff3475c94b03480e1803098c61" translate="yes" xml:space="preserve">
          <source>Syntactic tests are used in the code associated with some rules, and an error is thrown (and caught by the generated parser to produce an error message) when a test fails. The same effect can be achieved with a call to &lt;code&gt;return_error(Error_line, Message_string)&lt;/code&gt;, which is defined in the &lt;code&gt;yeccpre.hrl&lt;/code&gt; default header file.</source>
          <target state="translated">一部のルールに関連付けられたコードでは構文テストが使用され、テストが失敗するとエラーがスローされます（生成されたパーサーによってエラーメッセージが生成されます）。同じ効果は、 &lt;code&gt;yeccpre.hrl&lt;/code&gt; のデフォルトのヘッダーファイルで定義されている &lt;code&gt;return_error(Error_line, Message_string)&lt;/code&gt; 呼び出しでも実現できます。</target>
        </trans-unit>
        <trans-unit id="8ebec072eed621a03687383916a65b1244e3a80a" translate="yes" xml:space="preserve">
          <source>Syntactically QLCs have the same parts as ordinary list comprehensions:</source>
          <target state="translated">構文的にはQLCは通常のリスト理解と同じ部分を持っています。</target>
        </trans-unit>
        <trans-unit id="f8f94a7abd535bc567b210e7feb24b95dcc145dd" translate="yes" xml:space="preserve">
          <source>Syntax according to the URI definition in RFC 3986, for example, &quot;http://www.erlang.org/&quot;</source>
          <target state="translated">RFC 3986 の URI 定義に従った構文、例えば「http://www.erlang.org/」など。</target>
        </trans-unit>
        <trans-unit id="3aef52650439fcc381066161b6a33ff26aa88627" translate="yes" xml:space="preserve">
          <source>Syntax errors are detected locally on this side of the protocol and may have many causes, e.g. a malfunctioning transport layer, wrong encoder/decoder selected, bad configuration of the selected encoder/decoder etc.</source>
          <target state="translated">構文エラーは、プロトコルのこの側でローカルに検出され、多くの原因があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c3b09d06cdfdc92cef412c5e43702c1e9bf45027" translate="yes" xml:space="preserve">
          <source>Syntax errors in these files are discovered and reported with the function &lt;code&gt;config_err/2&lt;/code&gt; of the error report module at start-up.</source>
          <target state="translated">これらのファイルの構文エラーは、起動時にエラー報告モジュールの関数 &lt;code&gt;config_err/2&lt;/code&gt; で発見され、報告されます。</target>
        </trans-unit>
        <trans-unit id="9bc253a36e8ace3c94e28555bf56cc77650f265b" translate="yes" xml:space="preserve">
          <source>Syriac</source>
          <target state="translated">Syriac</target>
        </trans-unit>
        <trans-unit id="5131fe5695bc3ce3887d236a54747934336afaf8" translate="yes" xml:space="preserve">
          <source>System Information</source>
          <target state="translated">システム情報</target>
        </trans-unit>
        <trans-unit id="b35b204150b6742e0c35cf28de6a47c6519eee30" translate="yes" xml:space="preserve">
          <source>System events and table events are the two event categories that &lt;code&gt;Mnesia&lt;/code&gt; generates in various situations.</source>
          <target state="translated">システムイベントとテーブルイベントは、 &lt;code&gt;Mnesia&lt;/code&gt; がさまざまな状況で生成する2つのイベントカテゴリです。</target>
        </trans-unit>
        <trans-unit id="7ca52b12819dad012ad5eb499f8d3b89db539ac8" translate="yes" xml:space="preserve">
          <source>System flags effecting specific allocators have an uppercase letter as &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt;. The following letters are used for the allocators:</source>
          <target state="translated">特定のアロケーターに影響を与えるシステムフラグは、 &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt; のように大文字を持っています。アロケータには次の文字が使用されます。</target>
        </trans-unit>
        <trans-unit id="906ee68749a5a73a7e6af2237eb2dee1edbbf171" translate="yes" xml:space="preserve">
          <source>System info - System wide information. Read only.</source>
          <target state="translated">システム情報-システム全体の情報。読み取り専用。</target>
        </trans-unit>
        <trans-unit id="5474f690d82670c5da64f04996c609d92047ddb8" translate="yes" xml:space="preserve">
          <source>System messages are messages with a special meaning, used in the supervision tree. Typical system messages are requests for trace output, and requests to suspend or resume process execution (used during release handling). Processes implemented using standard behaviours automatically understand these messages.</source>
          <target state="translated">システムメッセージは、監督ツリーで使用される特別な意味を持つメッセージです。典型的なシステムメッセージは、トレース出力の要求、プロセス実行の一時停止や再開の要求です(リリース処理中に使用されます)。標準的な動作を使って実装されたプロセスは、これらのメッセージを自動的に理解します。</target>
        </trans-unit>
        <trans-unit id="1b4c8fad84bf9ee2ed69c28438abdf60dfd04975" translate="yes" xml:space="preserve">
          <source>System settings</source>
          <target state="translated">システム設定</target>
        </trans-unit>
        <trans-unit id="97a5f85605eef008a7bb7f2a0d512d9d724526bc" translate="yes" xml:space="preserve">
          <source>SystemTap &amp;gt; 1.6</source>
          <target state="translated">SystemTap&amp;gt; 1.6</target>
        </trans-unit>
        <trans-unit id="5bf881dc1f558738602aecd490c360ffa2d35d9f" translate="yes" xml:space="preserve">
          <source>SystemTap is DTrace for Linux. In fact Erlang's SystemTap support is build using SystemTap's DTrace compatibility's layer. For an introduction to Erlang DTrace support read &lt;code&gt;&lt;a href=&quot;dtrace&quot;&gt;$ERL_TOP/HOWTO/DTRACE.md&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SystemTapはLinux用のDTraceです。実際、ErlangのSystemTapサポートは、SystemTapのDTrace互換性のレイヤーを使用して構築されています。Erlang DTraceサポートの &lt;code&gt;&lt;a href=&quot;dtrace&quot;&gt;$ERL_TOP/HOWTO/DTRACE.md&lt;/a&gt;&lt;/code&gt; については、$ ERL_TOP / HOWTO / DTRACE.mdを参照してください。</target>
        </trans-unit>
        <trans-unit id="2a67e86af30e598c1b8dd4410e063b04f3f531fa" translate="yes" xml:space="preserve">
          <source>SystemTap, unlike DTrace, needs to know what binary it is tracing and has to be able to read that binary before it starts tracing. Your probe script therefor has to reference the correct beam emulator and stap needs to be able to find that binary. The examples are written for &quot;beam&quot;, but other versions such as &quot;beam.smp&quot; or &quot;beam.debug.smp&quot; might exist (depending on your configuration). Make sure you either specify the full the path of the binary in the probe or your &quot;beam&quot; binary is in the search path.</source>
          <target state="translated">SystemTap は DTrace とは異なり、トレースを開始する前に、どのようなバイナリをトレースしているかを知る必要があり、そのバイナリを読み取る必要があります。したがって、プローブスクリプトは正しいビームエミュレータを参照する必要があり、stapはそのバイナリを見つけることができなければなりません。この例は &quot;beam&quot; 用に書かれていますが、&quot;beam.smp&quot; や &quot;beam.debug.smp&quot; のような他のバージョンも存在するかもしれません (あなたの設定によります)。プローブでバイナリのパスを完全に指定するか、&quot;beam &quot;バイナリが検索パスにあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="3890f6e1eeb7c8b9e6d4cda8af3654adab1e5a34" translate="yes" xml:space="preserve">
          <source>TCP over IPv4 (the default)</source>
          <target state="translated">TCP over IPv4 (デフォルト)</target>
        </trans-unit>
        <trans-unit id="dd63ca133c7c9505341195d3fb66a2e4d3b97381" translate="yes" xml:space="preserve">
          <source>TCP over IPv6</source>
          <target state="translated">IPv6上のTCP</target>
        </trans-unit>
        <trans-unit id="04ee2e323dc35fc805718ec013670729358e3a49" translate="yes" xml:space="preserve">
          <source>TLS protocol versions supported by started clients and servers. This option overrides the application environment option &lt;code&gt;protocol_version&lt;/code&gt; and &lt;code&gt;dtls_protocol_version&lt;/code&gt;. If the environment option is not set, it defaults to all versions, except SSL-3.0, supported by the SSL application. See also &lt;code&gt;ssl(6).&lt;/code&gt;</source>
          <target state="translated">開始されたクライアントとサーバーでサポートされるTLSプロトコルのバージョン。このオプションは、アプリケーション環境オプション &lt;code&gt;protocol_version&lt;/code&gt; および &lt;code&gt;dtls_protocol_version&lt;/code&gt; をオーバーライドします。環境オプションが設定されていない場合、SSLアプリケーションでサポートされるSSL-3.0を除くすべてのバージョンがデフォルトになります。 &lt;code&gt;ssl(6).&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="981d4d11fc961a401155c4cc0aa1d985387ff5d6" translate="yes" xml:space="preserve">
          <source>TLS session cache API</source>
          <target state="translated">TLS セッションキャッシュ API</target>
        </trans-unit>
        <trans-unit id="e297ce43abfa4341900c35352befe7e5a48a3921" translate="yes" xml:space="preserve">
          <source>TLS/TCP and DTLS/SCTP Usage</source>
          <target state="translated">TLS/TCP および DTLS/SCTP の使用法</target>
        </trans-unit>
        <trans-unit id="fe06eb6459c87f0e497ce1805f076f104bfecf78" translate="yes" xml:space="preserve">
          <source>Tab</source>
          <target state="translated">Tab</target>
        </trans-unit>
        <trans-unit id="d7f5ee722fd0ae504f8d3c4d7a205b2fef8a3d7f" translate="yes" xml:space="preserve">
          <source>Tab (hex 09)</source>
          <target state="translated">タブ(16進数09</target>
        </trans-unit>
        <trans-unit id="ac4a8afcda713e36d6e9d6a34b43dbf38fa7e2cb" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Applications&lt;/strong&gt; presents application information. Select an application in the left list to display its supervisor tree. The right-click options in the tree are as follows:</source>
          <target state="translated">[ &lt;strong&gt;アプリケーション]&lt;/strong&gt;タブには、アプリケーション情報が表示されます。左側のリストでアプリケーションを選択して、そのスーパーバイザツリーを表示します。ツリーの右クリックオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a99c25e3c4704f469b96b031da459e53abfe6fa8" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Atoms&lt;/strong&gt; lists all atoms found in the dump. By default the atoms are sorted in creation order from first to last. This is opposite of the raw crashdump where atoms are listed from last to first, meaning that if the dump was truncated in the middle of the atom list, only the last created atoms are visible in the &lt;strong&gt;Atoms&lt;/strong&gt; tab.</source>
          <target state="translated">タブ&lt;strong&gt;原子&lt;/strong&gt;は、ダンプで見つかったすべての原子をリストします。デフォルトでは、原子は作成順に最初から最後にソートされます。これは、アトムが最後から最初にリストされる生のクラッシュダンプとは逆です。つまり、ダンプがアトムリストの中央で切り捨てられた場合、最後に作成された&lt;strong&gt;アトムのみが&lt;/strong&gt; [ &lt;strong&gt;Atoms&lt;/strong&gt; ]タブに表示されます。</target>
        </trans-unit>
        <trans-unit id="33be1b6f25987c84258604714f597ef47abe12d6" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;ETS Tables&lt;/strong&gt; shows all ETS table information found in the dump. &lt;strong&gt;Id&lt;/strong&gt; is the same as the 'Table' field in the raw crashdump. &lt;strong&gt;Memory&lt;/strong&gt; is the 'Words' field from the raw crashdump translated into bytes. For tree tables, there is no value in the 'Objects' field.</source>
          <target state="translated">[ &lt;strong&gt;ETSテーブル]&lt;/strong&gt;タブには、ダンプで見つかったすべてのETSテーブル情報が表示されます。&lt;strong&gt;Id&lt;/strong&gt;は、生のクラッシュダンプの「テーブル」フィールドと同じです。&lt;strong&gt;メモリ&lt;/strong&gt;は、バイトに変換された生のクラッシュダンプの「Words」フィールドです。ツリーテーブルの場合、[オブジェクト]フィールドに値はありません。</target>
        </trans-unit>
        <trans-unit id="d086aaa9e2e638560ca52f2f78e7b03c35094870" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Funs&lt;/strong&gt; shows all fun information found in the dump.</source>
          <target state="translated">タブ&lt;strong&gt;低速運行は&lt;/strong&gt;ダンプで見つかったすべての楽しさの情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="25121d69819c8efb4b19c73b31c386b78a1fdbb2" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;General&lt;/strong&gt; shows a short overview of the dump.</source>
          <target state="translated">&lt;strong&gt;全般&lt;/strong&gt;タブには、ダンプの概要が表示されます。</target>
        </trans-unit>
        <trans-unit id="07e01288b5805bf1432af8b394a9b45442c593c3" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Load Charts&lt;/strong&gt; displays graphs of the current resource use on the active Erlang node.</source>
          <target state="translated">タブの&lt;strong&gt;ロードチャートに&lt;/strong&gt;は、アクティブなErlangノードでの現在のリソース使用のグラフが表示されます。</target>
        </trans-unit>
        <trans-unit id="853f32a45947eb4c6d161de3626c9eaa0a83a4aa" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Memory Allocators&lt;/strong&gt; displays detailed information of the carrier size and current memory carriers. For details about memory carriers, see module &lt;code&gt;erts_alloc&lt;/code&gt; in application ERTS.</source>
          <target state="translated">タブ&lt;strong&gt;メモリアロケータ&lt;/strong&gt;は、キャリアサイズと現在のメモリキャリアの詳細情報を表示します。メモリキャリアの詳細については、アプリケーションERTSのモジュール &lt;code&gt;erts_alloc&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="bc3b4b0a4502f9b7b7c51416e31fdfd021b9067e" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Memory&lt;/strong&gt; shows memory and allocator information. From the left-hand menu you can select the following:</source>
          <target state="translated">[ &lt;strong&gt;メモリ]&lt;/strong&gt;タブには、メモリとアロケータの情報が表示されます。左側のメニューから、次を選択できます。</target>
        </trans-unit>
        <trans-unit id="27ba8745969c8d5f12e6c931fd214d70f5efac15" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Modules&lt;/strong&gt; lists all modules loaded on the originating node, and the current code size. If old code exists, the old size is also shown.</source>
          <target state="translated">タブ&lt;strong&gt;モジュールに&lt;/strong&gt;は、元のノードにロードされているすべてのモジュールと現在のコードサイズが一覧表示されます。古いコードが存在する場合は、古いサイズも表示されます。</target>
        </trans-unit>
        <trans-unit id="eaf448913218cac98b494d3245a11c82d5371831" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Nodes&lt;/strong&gt; shows a list of all external Erlang nodes that are referenced from the crashdump.</source>
          <target state="translated">タブ&lt;strong&gt;ノードが&lt;/strong&gt;クラッシュダンプから参照されるすべての外部アーラン・ノードのリストを示します。</target>
        </trans-unit>
        <trans-unit id="80764d8faf4781bc8ce3e0b8874a18d7e0699dd0" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Ports&lt;/strong&gt; is similar to the &lt;strong&gt;Processes&lt;/strong&gt; tab, except it lists all ports found in the crashdump.</source>
          <target state="translated">タブ&lt;strong&gt;ポート&lt;/strong&gt;に似ている&lt;strong&gt;プロセスの&lt;/strong&gt;それはクラッシュダンプで見つかったすべてのポートを示しています除き、タブ。</target>
        </trans-unit>
        <trans-unit id="76b66410e4f2402b3acc96cda65eec1371b79f1b" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Ports&lt;/strong&gt; lists port information in columns. For each port the following information is displayed:</source>
          <target state="translated">[ &lt;strong&gt;ポート]&lt;/strong&gt;タブには、ポート情報が列に表示されます。各ポートについて、次の情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="5f5391882f31ea5c33386e235a2386ab3a7ce9b1" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Processes&lt;/strong&gt; lists process information in columns. For each process the following information is displayed:</source>
          <target state="translated">&lt;strong&gt;[プロセス]&lt;/strong&gt;タブでは、プロセス情報が列に一覧表示されます。プロセスごとに、次の情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="81e00bdbb07b70180cc90e9aaa68bf4d038cb024" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Processes&lt;/strong&gt; shows a list of all processes found in the crashdump, including brief information about each process. By default, the processes are sorted by their pids. To sort by another topic, click the desired column heading.</source>
          <target state="translated">&lt;strong&gt;[プロセス]&lt;/strong&gt;タブには、クラッシュダンプで見つかったすべてのプロセスのリストが、各プロセスに関する簡単な情報を含めて表示されます。デフォルトでは、プロセスはPIDでソートされます。別のトピックで並べ替えるには、目的の列見出しをクリックします。</target>
        </trans-unit>
        <trans-unit id="37ee8ff7801abf11d7bda8a37bc6cfc86f955eeb" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Schedulers&lt;/strong&gt; shows all scheduler information found in the dump.</source>
          <target state="translated">タブ&lt;strong&gt;スケジューラに&lt;/strong&gt;は、ダンプで見つかったすべてのスケジューラ情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="ae16dafe965fd6bba4b8e61efd1280d8b73f7cdd" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;System&lt;/strong&gt; displays general information about the active Erlang node and its runtime system, such as build configuration, system capabilities, and overall use statistics.</source>
          <target state="translated">タブ&lt;strong&gt;システム&lt;/strong&gt;は、ビルド構成、システム機能、全体的な使用統計など、アクティブなErlangノードとそのランタイムシステムに関する一般的な情報を表示します。</target>
        </trans-unit>
        <trans-unit id="2dc8b2d71fceee93b7ee5110352b556240629d35" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Table Viewer&lt;/strong&gt; lists tables. By default, ETS tables are displayed whereas unreadable private ETS tables and tables created by OTP applications are not diplayed. Use menu &lt;strong&gt;View&lt;/strong&gt; to view &quot;system&quot; ETS tables, unreadable ETS tables, or Mnesia tables.</source>
          <target state="translated">タブ&lt;strong&gt;テーブルビューア&lt;/strong&gt;にテーブルが一覧表示されます。デフォルトでは、ETSテーブルが表示されますが、読み取り不可能なプライベートETSテーブルおよびOTPアプリケーションによって作成されたテーブルは表示されません。メニューの&lt;strong&gt;「&lt;/strong&gt;表示」を使用して、「システム」ETSテーブル、判読不能なETSテーブル、またはMnesiaテーブルを表示します。</target>
        </trans-unit>
        <trans-unit id="c749a9404534acc9874c4dddfbf96e28d745b82f" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Timers&lt;/strong&gt; shows all timer information found in the dump.</source>
          <target state="translated">[ &lt;strong&gt;タイマー]&lt;/strong&gt;タブには、ダンプで見つかったすべてのタイマー情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="532adb7424e374188bddb153f94b5dffdd01a32b" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Trace Overview&lt;/strong&gt; handles tracing. Trace by selecting the processes or ports to be traced and how to trace them. For processes, you can trace messages, function calls, scheduling, garbage collections, and process-related events such as &lt;code&gt;spawn&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, and many others. For ports, you can trace messages, scheduling and port-related events.</source>
          <target state="translated">タブ&lt;strong&gt;トレースの概要&lt;/strong&gt;は、トレースを処理します。トレースするプロセスまたはポートとそれらのトレース方法を選択してトレースします。プロセスの場合、メッセージ、関数呼び出し、スケジューリング、ガベージコレクション、および &lt;code&gt;spawn&lt;/code&gt; 、 &lt;code&gt;exit&lt;/code&gt; などのプロセス関連のイベントをトレースできます。ポートの場合、メッセージ、スケジューリング、およびポート関連のイベントをトレースできます。</target>
        </trans-unit>
        <trans-unit id="c3b24916106c05d16fc45b26f326aea8327897c3" translate="yes" xml:space="preserve">
          <source>Tab.</source>
          <target state="translated">Tab.</target>
        </trans-unit>
        <trans-unit id="78e563ed4498b45afa55a612a7d50d8010f51d47" translate="yes" xml:space="preserve">
          <source>Table 1.1:</source>
          <target state="translated">表1.1.</target>
        </trans-unit>
        <trans-unit id="2ba8d01b5f4587ab25a8cf9806410e2f7f1f467f" translate="yes" xml:space="preserve">
          <source>Table 1.1: Configuration Parameters</source>
          <target state="translated">表 1.1.1.構成パラメータ</target>
        </trans-unit>
        <trans-unit id="458a619e647863b2edbd583f53f1c4f27cc2c7fd" translate="yes" xml:space="preserve">
          <source>Table 1.1: File Types</source>
          <target state="translated">表1.1.ファイルの種類</target>
        </trans-unit>
        <trans-unit id="d257f726296380c878ec40caabc8bee011031308" translate="yes" xml:space="preserve">
          <source>Table 10.1: Memory Size of Different Data Types</source>
          <target state="translated">表10.1.異なるデータタイプのメモリサイズ</target>
        </trans-unit>
        <trans-unit id="1177d151257b31d9c29f7aa373dc11ffece292c4" translate="yes" xml:space="preserve">
          <source>Table 10.2: System Limits</source>
          <target state="translated">表10.2:システムの限界</target>
        </trans-unit>
        <trans-unit id="fd59220c9b680aec464f9d24199fa3a8abdb16d2" translate="yes" xml:space="preserve">
          <source>Table 11.1: Exception Classes.</source>
          <target state="translated">表 11.1.例外クラス。</target>
        </trans-unit>
        <trans-unit id="d6b64accf1c2234e132511d0019f44d13d7aeb9f" translate="yes" xml:space="preserve">
          <source>Table 11.1: Tool Summary</source>
          <target state="translated">表11.1.ツールの概要</target>
        </trans-unit>
        <trans-unit id="f6169b398a7ff5ef27d299293d71cfddab2f0858" translate="yes" xml:space="preserve">
          <source>Table 11.2: Exit Reasons</source>
          <target state="translated">表11.2:退出理由</target>
        </trans-unit>
        <trans-unit id="b30a60a6dd809b8b57e40c37cb359be1d19a90fa" translate="yes" xml:space="preserve">
          <source>Table 12.10: SMALL_INTEGER_EXT</source>
          <target state="translated">表 12.10:SMALL_INTEGER_EXT</target>
        </trans-unit>
        <trans-unit id="9866b94803a8e807cf22a1060604d66f72a8ea46" translate="yes" xml:space="preserve">
          <source>Table 12.11: INTEGER_EXT</source>
          <target state="translated">表 12.11:INTEGER_EXT</target>
        </trans-unit>
        <trans-unit id="58ca896888c5b6bdb23917ab9d4badd52b5d9e0c" translate="yes" xml:space="preserve">
          <source>Table 12.12: FLOAT_EXT</source>
          <target state="translated">表 12.12:FLOAT_EXT</target>
        </trans-unit>
        <trans-unit id="2fd6bbf622d7c5bf5fb9063eb1831d2717f4dd60" translate="yes" xml:space="preserve">
          <source>Table 12.13: REFERENCE_EXT</source>
          <target state="translated">表 12.13:REFERENCE_EXT</target>
        </trans-unit>
        <trans-unit id="0578060eac8303938de8c878ec3873fcb4318376" translate="yes" xml:space="preserve">
          <source>Table 12.14: PORT_EXT</source>
          <target state="translated">表 12.14:PORT_EXT</target>
        </trans-unit>
        <trans-unit id="96819e46fe9160b7684601591232299db1b36df4" translate="yes" xml:space="preserve">
          <source>Table 12.15: PID_EXT</source>
          <target state="translated">表 12.15:PID_EXT</target>
        </trans-unit>
        <trans-unit id="929ef647be6942415e3f171358774bf82ec22c90" translate="yes" xml:space="preserve">
          <source>Table 12.16: SMALL_TUPLE_EXT</source>
          <target state="translated">表 12.16:SMALL_TUPLE_EXT</target>
        </trans-unit>
        <trans-unit id="2bc9e7a9f0cdd26ab796e08ac173c9214cf33bb2" translate="yes" xml:space="preserve">
          <source>Table 12.17: LARGE_TUPLE_EXT</source>
          <target state="translated">表 12.17:LARGE_TUPLE_EXT</target>
        </trans-unit>
        <trans-unit id="adb693dcc7fb1fd77fe8a58008cf68aa105437ec" translate="yes" xml:space="preserve">
          <source>Table 12.18: MAP_EXT</source>
          <target state="translated">表 12.18:MAP_EXT</target>
        </trans-unit>
        <trans-unit id="0058992413b1a2072f46a8bef8849c819a9bd27c" translate="yes" xml:space="preserve">
          <source>Table 12.19: NIL_EXT</source>
          <target state="translated">表 12.19:NIL_EXT</target>
        </trans-unit>
        <trans-unit id="8c7f1e0a03ffe076870e398ec25b8453d8eadb76" translate="yes" xml:space="preserve">
          <source>Table 12.1: Name Registration BIFs</source>
          <target state="translated">表 12.1.名称登録BIF</target>
        </trans-unit>
        <trans-unit id="ad64574492eb17bfd807110b90dea335f1c7aae2" translate="yes" xml:space="preserve">
          <source>Table 12.1: Term Format</source>
          <target state="translated">表 12.1.用語の形式</target>
        </trans-unit>
        <trans-unit id="0df8d7a0af860ca015d80e7243b43bef49703f4d" translate="yes" xml:space="preserve">
          <source>Table 12.20: STRING_EXT</source>
          <target state="translated">表 12.20:STRING_EXT</target>
        </trans-unit>
        <trans-unit id="7c0155dab34e626428cf77c18f392f114ec8b923" translate="yes" xml:space="preserve">
          <source>Table 12.21: LIST_EXT</source>
          <target state="translated">表 12.21:LIST_EXT</target>
        </trans-unit>
        <trans-unit id="aa41c1d8936052f161d20f526c915bdfa140ba72" translate="yes" xml:space="preserve">
          <source>Table 12.22: BINARY_EXT</source>
          <target state="translated">表 12.22:BINARY_EXT</target>
        </trans-unit>
        <trans-unit id="36cf93a4b7064da1028c95fc5d153f969a05f23b" translate="yes" xml:space="preserve">
          <source>Table 12.23: SMALL_BIG_EXT</source>
          <target state="translated">表 12.23:SMALL_BIG_EXT</target>
        </trans-unit>
        <trans-unit id="8b7dc77f03315b79ffa7b47922ecb22f0aa5f2e7" translate="yes" xml:space="preserve">
          <source>Table 12.24: LARGE_BIG_EXT</source>
          <target state="translated">表 12.24:LARGE_BIG_EXT</target>
        </trans-unit>
        <trans-unit id="0bcc99ccfd58c2a94d4cf75fd172c14957bee41a" translate="yes" xml:space="preserve">
          <source>Table 12.25: NEW_REFERENCE_EXT</source>
          <target state="translated">表 12.25:NEW_REFERENCE_EXT</target>
        </trans-unit>
        <trans-unit id="1b3e3a9c2a02cf90a00369084f14b0b26a667ff3" translate="yes" xml:space="preserve">
          <source>Table 12.26: FUN_EXT</source>
          <target state="translated">表 12.26:FUN_EXT</target>
        </trans-unit>
        <trans-unit id="29a4858c0789b86f5465f8cb5db1421d2810276a" translate="yes" xml:space="preserve">
          <source>Table 12.27: NEW_FUN_EXT</source>
          <target state="translated">表 12.27:NEW_FUN_EXT</target>
        </trans-unit>
        <trans-unit id="f399cbd0c09e84ad8dba436d6454ceb339fc9356" translate="yes" xml:space="preserve">
          <source>Table 12.28: EXPORT_EXT</source>
          <target state="translated">表 12.28:EXPORT_EXT</target>
        </trans-unit>
        <trans-unit id="c4f8c6d2a98bb834eb44bbc5c62a5c56f9612215" translate="yes" xml:space="preserve">
          <source>Table 12.29: BIT_BINARY_EXT</source>
          <target state="translated">表 12.29:BIT_BINARY_EXT</target>
        </trans-unit>
        <trans-unit id="9a7845dbd38fceef2f98e2021ad2db0a951f1f90" translate="yes" xml:space="preserve">
          <source>Table 12.2: Compressed Term Format</source>
          <target state="translated">表 12.2.圧縮項形式</target>
        </trans-unit>
        <trans-unit id="69dd6d35b4f19964994f900ee8e129693a9ce6e5" translate="yes" xml:space="preserve">
          <source>Table 12.30: NEW_FLOAT_EXT</source>
          <target state="translated">表 12.30:NEW_FLOAT_EXT</target>
        </trans-unit>
        <trans-unit id="39ba0ff930d671e34c458d513192e51e5782463c" translate="yes" xml:space="preserve">
          <source>Table 12.31: ATOM_UTF8_EXT</source>
          <target state="translated">表 12.31:ATOM_UTF8_EXT</target>
        </trans-unit>
        <trans-unit id="71ae7d46f883a6cf5ca44c387bf96b8bf0304071" translate="yes" xml:space="preserve">
          <source>Table 12.32: SMALL_ATOM_UTF8_EXT</source>
          <target state="translated">表 12.32:SMALL_ATOM_UTF8_EXT</target>
        </trans-unit>
        <trans-unit id="4f3e60db57ebf4f9ad1c8702519818c61269fd7b" translate="yes" xml:space="preserve">
          <source>Table 12.33: ATOM_EXT</source>
          <target state="translated">表 12.33:ATOM_EXT</target>
        </trans-unit>
        <trans-unit id="d9763dcc196c99566fefe285bf27864c20b2a376" translate="yes" xml:space="preserve">
          <source>Table 12.34: SMALL_ATOM_EXT</source>
          <target state="translated">表 12.34:SMALL_ATOM_EXT</target>
        </trans-unit>
        <trans-unit id="7f4f07bb52b5e0ac65f5c4b09be7c563c9af2a2a" translate="yes" xml:space="preserve">
          <source>Table 12.3: Compressed Data Format when Expanded</source>
          <target state="translated">表 12.3.展開時の圧縮データ形式</target>
        </trans-unit>
        <trans-unit id="a1b25601d5798e4ada95d734eebfad09c3438475" translate="yes" xml:space="preserve">
          <source>Table 12.4: Distribution Header Format</source>
          <target state="translated">表12.4.ディストリビューションヘッダのフォーマット</target>
        </trans-unit>
        <trans-unit id="7ae3242d88a1907427a116698d6e7daa006dee20" translate="yes" xml:space="preserve">
          <source>Table 12.5:</source>
          <target state="translated">表12.5.</target>
        </trans-unit>
        <trans-unit id="5a71917f82a2759e5a495c12c44a7eb3c885d967" translate="yes" xml:space="preserve">
          <source>Table 12.6:</source>
          <target state="translated">表12.6.</target>
        </trans-unit>
        <trans-unit id="7a6b6888acaa7d0157552bfe1d147e5f2ffc5c2a" translate="yes" xml:space="preserve">
          <source>Table 12.7:</source>
          <target state="translated">表12.7.</target>
        </trans-unit>
        <trans-unit id="d455469fa598129902ab217f6b876f8e08b0c329" translate="yes" xml:space="preserve">
          <source>Table 12.8:</source>
          <target state="translated">表12.8.</target>
        </trans-unit>
        <trans-unit id="7e4fc9ad71d6c65901eeebf5f25e8c4321f8fd5d" translate="yes" xml:space="preserve">
          <source>Table 12.9: ATOM_CACHE_REF</source>
          <target state="translated">表 12.9:ATOM_CACHE_REF</target>
        </trans-unit>
        <trans-unit id="2b3c51ca48ed62a11f8f6b268d0cfb454be00ab2" translate="yes" xml:space="preserve">
          <source>Table 13.10: DUMP_RESP</source>
          <target state="translated">表 13.10:DUMP_RESP</target>
        </trans-unit>
        <trans-unit id="a1268f8a739adc2dd0b6cf61f8bcf9b2c1a25af3" translate="yes" xml:space="preserve">
          <source>Table 13.11: KILL_REQ</source>
          <target state="translated">表 13.11:KILL_REQ</target>
        </trans-unit>
        <trans-unit id="9924291901a5a0b8fe67cb8613a69112ee2d49ab" translate="yes" xml:space="preserve">
          <source>Table 13.12: KILL_RESP</source>
          <target state="translated">表 13.12:KILL_RESP</target>
        </trans-unit>
        <trans-unit id="521337e4c6544841a20f88ecfc0c1ea60912a86c" translate="yes" xml:space="preserve">
          <source>Table 13.13: STOP_REQ</source>
          <target state="translated">表13.13:STOP_REQ</target>
        </trans-unit>
        <trans-unit id="0ff58a2b54089117b1d4d95d994b2ed678f3c4cf" translate="yes" xml:space="preserve">
          <source>Table 13.14: STOP_RESP</source>
          <target state="translated">表13.14:STOP_RESP</target>
        </trans-unit>
        <trans-unit id="a5cdc90bbaefb168ea142b2790c03070e154af9b" translate="yes" xml:space="preserve">
          <source>Table 13.15: STOP_NOTOK_RESP</source>
          <target state="translated">表13.15:STOP_NOTOK_RESP</target>
        </trans-unit>
        <trans-unit id="7b97daf857d1cf5519b64b59f2c01112e80fd279" translate="yes" xml:space="preserve">
          <source>Table 13.16: Format of Messages Passed between Nodes (as from ERTS 5.7.2)</source>
          <target state="translated">表13.16:ノード間で渡されるメッセージの形式(ERTS 5.7.2より</target>
        </trans-unit>
        <trans-unit id="0235810478165bd4a5414161e73679ab6e077e20" translate="yes" xml:space="preserve">
          <source>Table 13.17: Format of Messages Passed between Nodes (before ERTS 5.7.2)</source>
          <target state="translated">表13.17:ノード間で渡されるメッセージの形式(ERTS 5.7.2以前</target>
        </trans-unit>
        <trans-unit id="03bda7e932b3f1c5bed1e5d6d2070739f08eaf1c" translate="yes" xml:space="preserve">
          <source>Table 13.1: Distribution BIFs</source>
          <target state="translated">表 13.1:BIF の分布</target>
        </trans-unit>
        <trans-unit id="61638ac22a7cbdb6b5559917090de7497beade99" translate="yes" xml:space="preserve">
          <source>Table 13.1: Request Format</source>
          <target state="translated">表 13.1:リクエストフォーマット</target>
        </trans-unit>
        <trans-unit id="42e15dae13f3c331c9200d0729d1ddc9e0e50071" translate="yes" xml:space="preserve">
          <source>Table 13.2: ALIVE2_REQ (120)</source>
          <target state="translated">表13.2.alive2_req (120)</target>
        </trans-unit>
        <trans-unit id="c6a77d421f864fb58dddfaf3e3633bdb241cbfda" translate="yes" xml:space="preserve">
          <source>Table 13.2: Distribution Command-Line Flags</source>
          <target state="translated">表 13.2:ディストリビューションコマンドラインフラグ</target>
        </trans-unit>
        <trans-unit id="9aea119540385e38157e1b773684ae3d6cbe0ba8" translate="yes" xml:space="preserve">
          <source>Table 13.3: ALIVE2_RESP (121)</source>
          <target state="translated">表13.3.alive2_resp (121)</target>
        </trans-unit>
        <trans-unit id="94bfc83da20e2a496446d2150cfc714838620ceb" translate="yes" xml:space="preserve">
          <source>Table 13.3: Kernel Modules Useful For Distribution.</source>
          <target state="translated">表13.3.配布に便利なカーネルモジュール</target>
        </trans-unit>
        <trans-unit id="4aac3932070e2c73da7f9a23bb587d59bdb5f802" translate="yes" xml:space="preserve">
          <source>Table 13.4: PORT_PLEASE2_REQ (122)</source>
          <target state="translated">表 13.4:PORT_PLEASE2_REQ (122)</target>
        </trans-unit>
        <trans-unit id="719629eb907013d0ec53e4c81e41dc5f23ae20a4" translate="yes" xml:space="preserve">
          <source>Table 13.4: STDLIB Modules Useful For Distribution.</source>
          <target state="translated">表 13.4.配布に便利な STDLIB モジュール</target>
        </trans-unit>
        <trans-unit id="0f35a1a83b6107724dd65d19a2ced52d720d62b9" translate="yes" xml:space="preserve">
          <source>Table 13.5: PORT2_RESP (119) Response Indicating Error, Result &amp;gt; 0</source>
          <target state="translated">表13.5：PORT2_RESP（119）エラーを示す応答、結果&amp;gt; 0</target>
        </trans-unit>
        <trans-unit id="d7346d09d095d6d89b7bb97b2f6f60397d92b506" translate="yes" xml:space="preserve">
          <source>Table 13.6: PORT2_RESP, Result = 0</source>
          <target state="translated">表 13.6.PORT2_RESP、結果=0</target>
        </trans-unit>
        <trans-unit id="7651664c52537de188b4793cbd87741bdb99dbbe" translate="yes" xml:space="preserve">
          <source>Table 13.7: NAMES_REQ (110)</source>
          <target state="translated">表 13.7:NAMES_REQ (110)</target>
        </trans-unit>
        <trans-unit id="b2f285bf0e8f76155a1b2ba2e26572814a0b098a" translate="yes" xml:space="preserve">
          <source>Table 13.8: NAMES_RESP</source>
          <target state="translated">表 13.8:NAMES_RESP</target>
        </trans-unit>
        <trans-unit id="4db4ef3f34f7a95b11e9b62f8eb6359c7f0c035b" translate="yes" xml:space="preserve">
          <source>Table 13.9: DUMP_REQ</source>
          <target state="translated">表13.9:DUMP_REQ</target>
        </trans-unit>
        <trans-unit id="a28dfe55e369b981e9989ca655f8070823b288d4" translate="yes" xml:space="preserve">
          <source>Table 14.1: Scope of a CTH</source>
          <target state="translated">表14.1.CTHの範囲</target>
        </trans-unit>
        <trans-unit id="6f346618d895fae04b070f63801d27512e0a114e" translate="yes" xml:space="preserve">
          <source>Table 15.1: Port Creation BIF</source>
          <target state="translated">表 15.1.ポート作成BIF</target>
        </trans-unit>
        <trans-unit id="5702cda3079894261cf21470de9842cbf06107d1" translate="yes" xml:space="preserve">
          <source>Table 15.2: Messages Sent To a Port</source>
          <target state="translated">表15.2.ポートに送信されるメッセージ</target>
        </trans-unit>
        <trans-unit id="d888dee5eb271a175c076f3da8428908d38f7a20" translate="yes" xml:space="preserve">
          <source>Table 15.3: Messages Received From a Port</source>
          <target state="translated">表15.3.ポートから受信したメッセージ</target>
        </trans-unit>
        <trans-unit id="728ee03beb77f2dd0af6fd6ba498d0eba5ed22d9" translate="yes" xml:space="preserve">
          <source>Table 15.4: Port BIFs</source>
          <target state="translated">表 15.4:ポートBIF</target>
        </trans-unit>
        <trans-unit id="b27132ceaa20acb15aedc85775feadc97cf98c9c" translate="yes" xml:space="preserve">
          <source>Table 16.1: Error Messages</source>
          <target state="translated">表16.1.エラーメッセージ</target>
        </trans-unit>
        <trans-unit id="5f4934e67a618cf41c7091ca6f0fc3ad49ab6cce" translate="yes" xml:space="preserve">
          <source>Table 2.1: Character Classes</source>
          <target state="translated">表2.1.文字クラス</target>
        </trans-unit>
        <trans-unit id="6eaaaa238c86c88e40d4df41a53e15cc0448911e" translate="yes" xml:space="preserve">
          <source>Table 2.1: Log Levels</source>
          <target state="translated">表2.1.ログレベル</target>
        </trans-unit>
        <trans-unit id="4fc595026f67776148a8c9da2e83cff6c4e748e1" translate="yes" xml:space="preserve">
          <source>Table 2.1: Signature Algorithm OIDs</source>
          <target state="translated">表 2.1:署名アルゴリズムの OID</target>
        </trans-unit>
        <trans-unit id="b559a4c56db17477d2000244623dc69a859d8ced" translate="yes" xml:space="preserve">
          <source>Table 2.2: Attribute OIDs</source>
          <target state="translated">表 2.2.属性OID</target>
        </trans-unit>
        <trans-unit id="61329aaff17f9cdc353879f67a1b6c2c2ced1057" translate="yes" xml:space="preserve">
          <source>Table 2.3: Public-Key Algorithm OIDs</source>
          <target state="translated">表 2.3:公開鍵アルゴリズムの OID</target>
        </trans-unit>
        <trans-unit id="63c67e425d843f44c3ad3944ba2ea398bf3390ac" translate="yes" xml:space="preserve">
          <source>Table 2.4: Standard Certificate Extensions</source>
          <target state="translated">表 2.4:標準認証書の拡張機能</target>
        </trans-unit>
        <trans-unit id="1d07377a9b4d3d0fdc53c19f9b80541a838d71a0" translate="yes" xml:space="preserve">
          <source>Table 2.5: Key Purpose OIDs</source>
          <target state="translated">表2.5:主目的のOID</target>
        </trans-unit>
        <trans-unit id="c9a0d1dbd63f25fa4cab07cb6e81975a5434e58c" translate="yes" xml:space="preserve">
          <source>Table 2.6: Private Internet Extensions</source>
          <target state="translated">表 2.6:プライベートインターネット拡張機能</target>
        </trans-unit>
        <trans-unit id="3c4523326210a6e49a84a168a517493f6b494085" translate="yes" xml:space="preserve">
          <source>Table 2.7: CRL Extensions</source>
          <target state="translated">表 2.7:CRL 拡張機能</target>
        </trans-unit>
        <trans-unit id="e599a4ff0cd3050fdc6bb940882734dade0ed796" translate="yes" xml:space="preserve">
          <source>Table 2.8: CRL Entry Extensions</source>
          <target state="translated">表 2.8:CRL エントリ拡張機能</target>
        </trans-unit>
        <trans-unit id="69a5a550952ff1d1582f1327251b38f6f3925307" translate="yes" xml:space="preserve">
          <source>Table 3.1: Mapping of ODBC data types to the Erlang data types returned to the Erlang application.</source>
          <target state="translated">表3.1.ODBCデータ型とErlangアプリケーションに返されるErlangデータ型のマッピング。</target>
        </trans-unit>
        <trans-unit id="f8612a65d1f97ebf0034cd75baf0addcfe1c0893" translate="yes" xml:space="preserve">
          <source>Table 3.1: Recognized Escape Sequences</source>
          <target state="translated">表 3.1.認識されたエスケープシーケンス</target>
        </trans-unit>
        <trans-unit id="9809e96d44e0af0600d936e259f842538f07e64b" translate="yes" xml:space="preserve">
          <source>Table 3.1: Supported ASN.1 Types</source>
          <target state="translated">表3.1:サポートされているASN.1タイプ</target>
        </trans-unit>
        <trans-unit id="02b78e9c5cb42c3363db65995522a67a8422f0e9" translate="yes" xml:space="preserve">
          <source>Table 3.1: employee Database Record</source>
          <target state="translated">表3.1 従業員データベースレコード</target>
        </trans-unit>
        <trans-unit id="e2e04ae1720c523c09ad885d4bba619975d91dfd" translate="yes" xml:space="preserve">
          <source>Table 3.2: Mapping of extended ODBC data types to the Erlang data types returned to the Erlang application.</source>
          <target state="translated">表3.2:拡張ODBCデータ型とErlangアプリケーションに返されるErlangデータ型のマッピング</target>
        </trans-unit>
        <trans-unit id="c8fbe8731442bcc46734767ff421f607aa0f0b93" translate="yes" xml:space="preserve">
          <source>Table 3.2: at_dep Database Record</source>
          <target state="translated">表3.2:at_depデータベースレコード</target>
        </trans-unit>
        <trans-unit id="472618ae5b8faf29f64e6182f23e94d8e8d2b3ff" translate="yes" xml:space="preserve">
          <source>Table 3.3: in_proj Database Record</source>
          <target state="translated">表 3.3:in_proj データベースレコード</target>
        </trans-unit>
        <trans-unit id="bd55e55c0bac662bbb91c2dab6fadd4546456110" translate="yes" xml:space="preserve">
          <source>Table 4.1: Match target depending on context</source>
          <target state="translated">表4.1.コンテキストに応じてターゲットを一致させる</target>
        </trans-unit>
        <trans-unit id="2d25688454b2bb5450c1309279e78263e6dbd7f4" translate="yes" xml:space="preserve">
          <source>Table 4.1: RFC 6733 Compliance</source>
          <target state="translated">表 4.1:RFC 6733 準拠</target>
        </trans-unit>
        <trans-unit id="732bc539aa9e2aceaab8c419c46c7186220b8351" translate="yes" xml:space="preserve">
          <source>Table 4.1: Results of Complete, Exclusive, and Selective Decode</source>
          <target state="translated">表4.1.完全デコード、排他的デコード、選択的デコードの結果</target>
        </trans-unit>
        <trans-unit id="2f6119a0a2c06c96a45bed121e21994c92602dec" translate="yes" xml:space="preserve">
          <source>Table 4.2: Literals in MatchCondition/MatchBody Parts of a Match Specification</source>
          <target state="translated">表 4.2:一致仕様の MatchCondition/MatchBody 部分のリテラル</target>
        </trans-unit>
        <trans-unit id="03c941b5ad0f9163428dd761c1aa72825546017a" translate="yes" xml:space="preserve">
          <source>Table 4.2: Results of Complete, Exclusive + decode_part, and Selective + complete decodes</source>
          <target state="translated">表4.2.完全デコード、排他的+decode_part、選択的+完全デコードの結果</target>
        </trans-unit>
        <trans-unit id="998575c4a113a89d67de8200527ab2f0671412a3" translate="yes" xml:space="preserve">
          <source>Table 7.1: Built-in types, predefined aliases</source>
          <target state="translated">表7.1.組込み型,定義済みエイリアス</target>
        </trans-unit>
        <trans-unit id="7a46d02c216b62f4c7966fc627277fbbd5dca1db" translate="yes" xml:space="preserve">
          <source>Table 7.2: Additional built-in types</source>
          <target state="translated">表7.2.追加の組み込みタイプ</target>
        </trans-unit>
        <trans-unit id="f425729931f6d1bdbaed18495dcda8f6c61e9665" translate="yes" xml:space="preserve">
          <source>Table 8.1: Codec performance</source>
          <target state="translated">表 8.1.コーデックの性能</target>
        </trans-unit>
        <trans-unit id="f02b919abba6c2f9f7cea19a79d8563e91342705" translate="yes" xml:space="preserve">
          <source>Table 8.1: Term Comparison Operators.</source>
          <target state="translated">表 8.1.項比較演算子。</target>
        </trans-unit>
        <trans-unit id="44dbfccf55391a47eda37e5337bceb5e6751ff98" translate="yes" xml:space="preserve">
          <source>Table 8.2: Arithmetic Operators.</source>
          <target state="translated">表8.2.算術演算子。</target>
        </trans-unit>
        <trans-unit id="80ab66478c80211ef28ea87ebf180af9badfa505" translate="yes" xml:space="preserve">
          <source>Table 8.3: Logical Operators.</source>
          <target state="translated">表 8.3:論理演算子。</target>
        </trans-unit>
        <trans-unit id="d1b590658d7f606934706fe12855a35158b7b9ae" translate="yes" xml:space="preserve">
          <source>Table 8.4: Type Test BIFs</source>
          <target state="translated">表 8.4:タイプテスト BIF</target>
        </trans-unit>
        <trans-unit id="e2253a5b23eb77ff9aec768859a9f84ff6371656" translate="yes" xml:space="preserve">
          <source>Table 8.5: Other BIFs Allowed in Guard Expressions</source>
          <target state="translated">表 8.5:ガード式で許可されるその他の BIF</target>
        </trans-unit>
        <trans-unit id="0053f71504d170421443aa2340e9bdc8a8bc2b06" translate="yes" xml:space="preserve">
          <source>Table 8.6: Operator Precedence</source>
          <target state="translated">表 8.6:オペレータの優先順位</target>
        </trans-unit>
        <trans-unit id="a654ccdbe37f52ad3e2371abec18594740d9d987" translate="yes" xml:space="preserve">
          <source>Table 9.1: tty Text Editing</source>
          <target state="translated">表 9.1:tty テキスト編集</target>
        </trans-unit>
        <trans-unit id="785160c54069d8c0488a6885b676c3ed7ac94f33" translate="yes" xml:space="preserve">
          <source>Table attributes are specified when the table is created. For example, the following function creates a table with two RAM replicas:</source>
          <target state="translated">テーブルの属性は、テーブルの作成時に指定します。例えば、以下の関数は、2つのRAMレプリカを持つテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="920197fc8c7d9a17f9bba1e891a31f5e6bab2db5" translate="yes" xml:space="preserve">
          <source>Table events are events related to table updates. There are two types of table events, simple and detailed.</source>
          <target state="translated">テーブルイベントとは、テーブルの更新に関するイベントのことです。テーブルイベントには、単純なものと詳細なものの2種類があります。</target>
        </trans-unit>
        <trans-unit id="1f2cbbd1fe71c50be54063ec6ec279f2e5068eec" translate="yes" xml:space="preserve">
          <source>Table fragmentation</source>
          <target state="translated">フラグメンテーションテーブル</target>
        </trans-unit>
        <trans-unit id="b321d78d8188930584227fd683d25947228f5912" translate="yes" xml:space="preserve">
          <source>Table indexes can be used whenever the user wants to use frequently some other field than the key field to look up records. If this other field has an associated index, these lookups can occur in constant time and space. For example, if your application wishes to use field &lt;code&gt;age&lt;/code&gt; to find efficiently all persons with a specific age, it can be a good idea to have an index on field &lt;code&gt;age&lt;/code&gt;. This can be done with the following call:</source>
          <target state="translated">テーブルインデックスは、ユーザーがキーフィールド以外のフィールドを頻繁に使用してレコードを検索する場合に使用できます。この他のフィールドに関連付けられたインデックスがある場合、これらのルックアップは一定の時間と空間で発生する可能性があります。たとえば、アプリケーションでフィールド &lt;code&gt;age&lt;/code&gt; を使用して特定の年齢のすべての人を効率的に検索する場合、フィールド &lt;code&gt;age&lt;/code&gt; インデックスを作成することをお勧めします。これは、次の呼び出しで実行できます。</target>
        </trans-unit>
        <trans-unit id="c88fa77c87adc2265ab448874618640494fc6308" translate="yes" xml:space="preserve">
          <source>Table initialization is asynchronous. The function call &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt; returns the atom &lt;code&gt;ok&lt;/code&gt; and then starts to initialize the different tables. Depending on the size of the database, this can take some time, and the application programmer must wait for the tables that the application needs before they can be used. This is achieved by using the function &lt;code&gt;&lt;a href=&quot;mnesia#wait_for_tables-2&quot;&gt;mnesia:wait_for_tables(TabList, Timeout)&lt;/a&gt;&lt;/code&gt;, which suspends the caller until all tables specified in &lt;code&gt;TabList&lt;/code&gt; are properly initiated.</source>
          <target state="translated">テーブルの初期化は非同期です。関数呼び出し &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt; はアトム &lt;code&gt;ok&lt;/code&gt; を返し、さまざまなテーブルの初期化を開始します。データベースのサイズによっては、これに時間がかかる場合があり、アプリケーションプログラマは、アプリケーションが使用する前に、アプリケーションが必要とするテーブルを待つ必要があります。これは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#wait_for_tables-2&quot;&gt;mnesia:wait_for_tables(TabList, Timeout)&lt;/a&gt;&lt;/code&gt; を使用して実現されます。この関数は、 &lt;code&gt;TabList&lt;/code&gt; で指定されたすべてのテーブルが適切に開始されるまで、呼び出し元を一時停止します。</target>
        </trans-unit>
        <trans-unit id="3d3b49fdca0320ed3b3453c5ed3280cae1c7efa5" translate="yes" xml:space="preserve">
          <source>Table locations are transparent to the programmer. Programs address table names and the system itself keeps track of table locations.</source>
          <target state="translated">テーブルの位置はプログラマには透過的です。プログラムはテーブル名を指定し、システム自体がテーブルの位置を追跡します。</target>
        </trans-unit>
        <trans-unit id="866e46fb585eb175d52c33c7d9ae3c6b97b99178" translate="yes" xml:space="preserve">
          <source>Table replicas of type &lt;code&gt;ram_copies&lt;/code&gt; can be dumped to disc with the function &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables(TabList)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;ram_copies&lt;/code&gt; のテーブルレプリカは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables(TabList)&lt;/a&gt;&lt;/code&gt; を使用してディスクにダンプできます。</target>
        </trans-unit>
        <trans-unit id="af955ef17e57c071c4e89fa1503d4f412aa17a54" translate="yes" xml:space="preserve">
          <source>Table type &lt;code&gt;ordered_set&lt;/code&gt; is not affected by this option. Also, the memory consumption inflicted by both &lt;code&gt;write_concurrency&lt;/code&gt; and &lt;code&gt;read_concurrency&lt;/code&gt; is a constant overhead per table. This overhead can be especially large when both options are combined.</source>
          <target state="translated">テーブルタイプ &lt;code&gt;ordered_set&lt;/code&gt; は、このオプションの影響を受けません。また、 &lt;code&gt;write_concurrency&lt;/code&gt; と &lt;code&gt;read_concurrency&lt;/code&gt; の両方によるメモリ消費は、テーブルごとの一定のオーバーヘッドです。このオーバーヘッドは、両方のオプションを組み合わせると特に大きくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8ae7173fc695a7e90d392ed4e8e9a097c6a14f85" translate="yes" xml:space="preserve">
          <source>Tables are divided into four different types, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;ordered_set&lt;/code&gt;, &lt;code&gt;bag&lt;/code&gt;, and &lt;code&gt;duplicate_bag&lt;/code&gt;. A &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;ordered_set&lt;/code&gt; table can only have one object associated with each key. A &lt;code&gt;bag&lt;/code&gt; or &lt;code&gt;duplicate_bag&lt;/code&gt; table can have many objects associated with each key.</source>
          <target state="translated">テーブルは、 &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;ordered_set&lt;/code&gt; 、 &lt;code&gt;bag&lt;/code&gt; 、および &lt;code&gt;duplicate_bag&lt;/code&gt; の 4つの異なるタイプに分類されます。 &lt;code&gt;set&lt;/code&gt; または &lt;code&gt;ordered_set&lt;/code&gt; テーブルは、各キーに関連付けられた一つのオブジェクトを有することができます。 &lt;code&gt;bag&lt;/code&gt; や &lt;code&gt;duplicate_bag&lt;/code&gt; テーブルには、各キーに関連付けられている多くのオブジェクトを持つことができます。</target>
        </trans-unit>
        <trans-unit id="34d69fb54ae6920c0beb5343651ca15f5e6afaac" translate="yes" xml:space="preserve">
          <source>Tables can also have the following properties, where each attribute has a list of Erlang nodes as its value:</source>
          <target state="translated">テーブルは次のようなプロパティを持つこともでき、各属性はErlangノードのリストを値として持ちます。</target>
        </trans-unit>
        <trans-unit id="de93908f0780db239ff5e538fea7ea2e43c2dd38" translate="yes" xml:space="preserve">
          <source>Tables can be created and new replicas can be added without starting all the disc-full nodes.</source>
          <target state="translated">テーブルを作成し、すべてのディスクフルノードを起動することなく、新しいレプリカを追加することができます。</target>
        </trans-unit>
        <trans-unit id="d07956b5358d935c57f6803cf4b6ad1ef2830cb4" translate="yes" xml:space="preserve">
          <source>Tables can be declared to have properties such as location, replication, and persistence.</source>
          <target state="translated">テーブルは、場所、レプリケーション、永続性などのプロパティを持つように宣言することができます。</target>
        </trans-unit>
        <trans-unit id="f511e28cba4a01c743772e67af1ac7ec40828dab" translate="yes" xml:space="preserve">
          <source>Tables can be moved or deleted, and the layout of a table can be reconfigured in various ways. An important aspect of the implementation of these functions is that user programs can continue to use a table while it is being reconfigured. For example, it is possible to move a table and perform write operations to the table at the same time. This is important for many applications that require continuously available services. For more information, see &lt;code&gt;&lt;a href=&quot;mnesia_chap4#trans_prop&quot;&gt;Transactions and Other Access Contexts&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブルは移動または削除でき、テーブルのレイアウトはさまざまな方法で再構成できます。これらの関数の実装の重要な側面は、ユーザープログラムが再構成されている間、テーブルを引き続き使用できることです。たとえば、テーブルの移動とテーブルへの書き込み操作を同時に実行できます。これは、継続的に利用可能なサービスを必要とする多くのアプリケーションにとって重要です。詳細については、「 &lt;code&gt;&lt;a href=&quot;mnesia_chap4#trans_prop&quot;&gt;Transactions and Other Access Contexts&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d7bc03ffa55eb50ff02b4db69153553fd45996c" translate="yes" xml:space="preserve">
          <source>Tables can be moved or replicated to several nodes to improve fault tolerance. The rest of the system can still access the tables to read, write, and delete records.</source>
          <target state="translated">テーブルは、フォールトトレランスを向上させるために、複数のノードに移動または複製することができます。システムの残りの部分は、テーブルにアクセスしてレコードの読み取り、書き込み、削除を行うことができます。</target>
        </trans-unit>
        <trans-unit id="a0e957eb66e13f1765798b7a25ea084ce54f8043" translate="yes" xml:space="preserve">
          <source>Tables can be restored online from a backup without restarting &lt;code&gt;Mnesia&lt;/code&gt;. A restore is performed with the function &lt;code&gt;&lt;a href=&quot;mnesia#restore-2&quot;&gt;mnesia:restore(Opaque, Args)&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Args&lt;/code&gt; can contain the following tuples:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; を再起動せずに、バックアップからテーブルをオンラインで復元できます。復元は、関数 &lt;code&gt;&lt;a href=&quot;mnesia#restore-2&quot;&gt;mnesia:restore(Opaque, Args)&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;Args&lt;/code&gt; 実行されます。ここで、Argsには次のタプルを含めることができます。</target>
        </trans-unit>
        <trans-unit id="d57d67e1acfe0bf746b51a2068d14140f7e2255b" translate="yes" xml:space="preserve">
          <source>Tables must be written in the following order: &lt;code&gt;tableObject&lt;/code&gt;, &lt;code&gt;entryObject&lt;/code&gt;, &lt;code&gt;column1&lt;/code&gt;, ..., &lt;code&gt;columnN&lt;/code&gt; (in order).</source>
          <target state="translated">テーブルには、次の順序で記述する必要があります： &lt;code&gt;tableObject&lt;/code&gt; 、 &lt;code&gt;entryObject&lt;/code&gt; 、 &lt;code&gt;column1&lt;/code&gt; 、...、 &lt;code&gt;columnN&lt;/code&gt; （順）。</target>
        </trans-unit>
        <trans-unit id="0c69aeb6234da315154088828f3897ee8809919c" translate="yes" xml:space="preserve">
          <source>Tables of type &lt;code&gt;ram_copies&lt;/code&gt; are by definition stored in memory only. However, these tables can be dumped to disc, either at regular intervals or before the system is shut down. The function &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables(TabList)&lt;/a&gt;&lt;/code&gt; dumps all replicas of a set of RAM tables to disc. The tables can be accessed while being dumped to disc. To dump the tables to disc, all replicas must have the storage type &lt;code&gt;ram_copies&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;ram_copies&lt;/code&gt; のテーブルは、定義上、メモリにのみ格納されます。ただし、これらのテーブルは、定期的に、またはシステムがシャットダウンする前に、ディスクにダンプできます。関数 &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables(TabList)&lt;/a&gt;&lt;/code&gt; は、RAMテーブルのセットのすべてのレプリカをディスクにダンプします。ディスクにダンプされている間、テーブルにアクセスできます。テーブルをディスクにダンプするには、すべてのレプリカのストレージタイプが &lt;code&gt;ram_copies&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="f5f87c90bac9b358ab772324758ec3588f0e6d15" translate="yes" xml:space="preserve">
          <source>Tables that are created with these functions can be administered as all other Mnesia tables. They can be included in backups, replicas can be added, and so on. The tables are normal Mnesia tables owned by the user of the corresponding &lt;code&gt;erl_interface&lt;/code&gt; registries.</source>
          <target state="translated">これらの関数で作成されたテーブルは、他のすべてのMnesiaテーブルと同様に管理できます。それらをバックアップに含めたり、レプリカを追加したりすることができます。これらのテーブルは、対応する &lt;code&gt;erl_interface&lt;/code&gt; レジストリーのユーザーが所有する通常のMnesiaテーブルです。</target>
        </trans-unit>
        <trans-unit id="743d28560816377de1f1a84b0e5ab1bcad9a2851" translate="yes" xml:space="preserve">
          <source>Tables that are only stored locally are initialized from the local &lt;code&gt;Mnesia&lt;/code&gt; directory.</source>
          <target state="translated">ローカルにのみ保存されるテーブルは、ローカルの &lt;code&gt;Mnesia&lt;/code&gt; ディレクトリから初期化されます。</target>
        </trans-unit>
        <trans-unit id="15e17f79ab456ddb783d4d81329edb91056f584b" translate="yes" xml:space="preserve">
          <source>Tables that reside on remote nodes are available to other nodes as soon as they are loaded.</source>
          <target state="translated">リモート ノードに存在するテーブルは、ロードされるとすぐに他のノードで利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="ecc1e9ce18cc1f51b207c2bdf13311e34431c5b1" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;ct_hooks&lt;/code&gt; specifies the &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt; to be run with this suite.</source>
          <target state="translated">タグ &lt;code&gt;ct_hooks&lt;/code&gt; は、このスイートで実行される &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="15ecb35628e9ad80298a11e2caca7262306b1658" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;require&lt;/code&gt; specifies configuration variables required by test cases (or configuration functions) in the suite. If the required configuration variables are not found in any of the configuration files, all test cases are skipped. For details about the &lt;code&gt;require&lt;/code&gt; functionality, see funtion &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;require&lt;/code&gt; は、スイートのテストケース（または構成関数）で必要な構成変数を指定します。必要な構成変数が構成ファイルのいずれにも見つからない場合、すべてのテストケースがスキップされます。 &lt;code&gt;require&lt;/code&gt; 機能の詳細については、機能 &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2131aee1075ebd4d5a669ce0e3a2b0c83464a600" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;require&lt;/code&gt; specifies configuration variables required by test cases (or configuration functions) in the suite. If the required configuration variables are not found in any of the configuration files, all test cases in this group are skipped. For details about the &lt;code&gt;require&lt;/code&gt; functionality, see function &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;require&lt;/code&gt; は、スイートのテストケース（または構成関数）で必要な構成変数を指定します。必要な構成変数が構成ファイルのいずれにも見つからない場合、このグループのすべてのテストケースはスキップされます。 &lt;code&gt;require&lt;/code&gt; 機能の詳細については、関数 &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f43fa665fa7746b66b55e1550ce1441ca788c63" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;require&lt;/code&gt; specifies configuration variables that are required by the test case (or &lt;code&gt;init_per_testcase/2&lt;/code&gt; or &lt;code&gt;end_per_testcase/2&lt;/code&gt;). If the required configuration variables are not found in any of the configuration files, the test case is skipped. For details about the &lt;code&gt;require&lt;/code&gt; functionality, see function &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;require&lt;/code&gt; は、テストケース（または &lt;code&gt;init_per_testcase/2&lt;/code&gt; または &lt;code&gt;end_per_testcase/2&lt;/code&gt; ）に必要な構成変数を指定します。必要な構成変数が構成ファイルのいずれにも見つからない場合、テストケースはスキップされます。 &lt;code&gt;require&lt;/code&gt; 機能の詳細については、関数 &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="bb7858b354350ab4f0327568ec7e4c4a738e1efd" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;timetrap&lt;/code&gt; sets the maximum time that each test case is allowed to execute (including &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt;). If the timetrap time is exceeded, the test case fails with reason &lt;code&gt;timetrap_timeout&lt;/code&gt;. A &lt;code&gt;TimeFunc&lt;/code&gt; function can be used to set a new timetrap by returning a &lt;code&gt;TimeVal&lt;/code&gt;. It can also be used to trigger a timetrap time-out by, at some point, returning a value other than a &lt;code&gt;TimeVal&lt;/code&gt;. For details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">タグ &lt;code&gt;timetrap&lt;/code&gt; は、各テストケースの実行が許可される最大時間を設定します（ &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; を含む）。タイムトラップ時間を超えた場合、テストケースは理由 &lt;code&gt;timetrap_timeout&lt;/code&gt; で失敗します。 &lt;code&gt;TimeFunc&lt;/code&gt; の機能を返すことによって新しいtimetrapを設定するために使用することができます &lt;code&gt;TimeVal&lt;/code&gt; 。また、ある時点で &lt;code&gt;TimeVal&lt;/code&gt; 以外の値を返すことにより、タイムトラップタイムアウトをトリガーするために使用することもできます。詳細については、ユーザーズガイドのセクション &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="22c64cb3bbc94cdf7758855dd0abf0e6e66c2d5d" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;timetrap&lt;/code&gt; sets the maximum time that the test case is allowed to execute. If the timetrap time is exceeded, the test case fails with reason &lt;code&gt;timetrap_timeout&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; are included in the timetrap time. A &lt;code&gt;TimeFunc&lt;/code&gt; function can be used to set a new timetrap by returning a &lt;code&gt;TimeVal&lt;/code&gt;. It can also be used to trigger a timetrap time-out by, at some point, returning a value other than a &lt;code&gt;TimeVal&lt;/code&gt;. For details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">タグ &lt;code&gt;timetrap&lt;/code&gt; は、テストケースの実行を許可する最大時間を設定します。タイムトラップ時間を超えた場合、テストケースは理由 &lt;code&gt;timetrap_timeout&lt;/code&gt; で失敗します。 &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; はタイムトラップ時間に含まれます。 &lt;code&gt;TimeFunc&lt;/code&gt; の機能を返すことによって新しいtimetrapを設定するために使用することができます &lt;code&gt;TimeVal&lt;/code&gt; 。また、ある時点で &lt;code&gt;TimeVal&lt;/code&gt; 以外の値を返すことにより、タイムトラップタイムアウトをトリガーするために使用することもできます。詳細については、ユーザーズガイドのセクション &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="89a60b10c6d51637e3c074271431727f5e04acf4" translate="yes" xml:space="preserve">
          <source>Tag = atom()</source>
          <target state="translated">タグ=atom()</target>
        </trans-unit>
        <trans-unit id="68ddd91d0b9671a791224a07e7c4440e749e446a" translate="yes" xml:space="preserve">
          <source>Tagalog</source>
          <target state="translated">Tagalog</target>
        </trans-unit>
        <trans-unit id="d97ec9a0d0dd8012061bd1e25a018f7d246bc720" translate="yes" xml:space="preserve">
          <source>Tagbanwa</source>
          <target state="translated">Tagbanwa</target>
        </trans-unit>
        <trans-unit id="0ea98ee2966f1a8d2f98d0a5da489f41da74714d" translate="yes" xml:space="preserve">
          <source>Tags aprops (&lt;code&gt;tags-apropos&lt;/code&gt;) - Display list of all tags in tags table REGEXP matches.</source>
          <target state="translated">タグaprops（ &lt;code&gt;tags-apropos&lt;/code&gt; ）-タグテーブルREGEXPが一致するすべてのタグのリストを表示します。</target>
        </trans-unit>
        <trans-unit id="d4f0c99b831a4946575130ded67ce565cb0d708d" translate="yes" xml:space="preserve">
          <source>Tags are not mentioned any more in this User's Guide.</source>
          <target state="translated">このユーザーズガイドでは、タグについてはこれ以上言及していません。</target>
        </trans-unit>
        <trans-unit id="0f82a46a5e411e593e3fc9e2da286865bcb2e4ed" translate="yes" xml:space="preserve">
          <source>Tags is a standard Emacs package used to record information about source files in large development projects. In addition to listing the files of a project, a tags file normally contains information about all functions and variables that are defined. By far, the most useful command of the tags system is its ability to find the definition of functions in any file in the project. However the Tags system is not limited to this feature, for example, it is possible to do a text search in all files in a project, or to perform a project-wide search and replace.</source>
          <target state="translated">Tagsは、大規模な開発プロジェクトのソースファイルに関する情報を記録するために使用される標準的なEmacsパッケージです。プロジェクトのファイルのリストに加えて、タグファイルには通常、定義されているすべての関数と変数に関する情報が含まれています。タグシステムの最も便利なコマンドは、プロジェクト内のどのファイルでも関数の定義を見つけることができることです。しかし、タグシステムはこの機能に限定されません。例えば、プロジェクト内のすべてのファイルをテキスト検索したり、プロジェクト全体の検索と置換を行うことができます。</target>
        </trans-unit>
        <trans-unit id="4e5cc17a9625b1ef996d5f041d154602dfcaa438" translate="yes" xml:space="preserve">
          <source>Tags other than the earlier mentioned are ignored by the test server.</source>
          <target state="translated">前述のタグ以外のタグは、テストサーバでは無視されます。</target>
        </trans-unit>
        <trans-unit id="f4446936a2326a1b426b4bb095f8f0bc39469810" translate="yes" xml:space="preserve">
          <source>Tags used to be important for all users of ASN.1, because it was necessary to add tags manually to certain constructs in order for the ASN.1 specification to be valid. Example of an old-style specification:</source>
          <target state="translated">タグは、ASN.1仕様を有効にするためには、特定の構成要素に手動でタグを追加する必要があったため、かつてはASN.1のすべてのユーザにとって重要でした。旧式の仕様の例。</target>
        </trans-unit>
        <trans-unit id="7ce68ff3f210c997cf191cc3047dad75cfbe97db" translate="yes" xml:space="preserve">
          <source>Tai_Le</source>
          <target state="translated">Tai_Le</target>
        </trans-unit>
        <trans-unit id="30754c9b404b9f791325a342fd0c615c1607ad6a" translate="yes" xml:space="preserve">
          <source>Tai_Tham</source>
          <target state="translated">Tai_Tham</target>
        </trans-unit>
        <trans-unit id="d56a5ea60a6f1aee9d29df15fa3ff172f1ecef8f" translate="yes" xml:space="preserve">
          <source>Tai_Viet</source>
          <target state="translated">Tai_Viet</target>
        </trans-unit>
        <trans-unit id="712d7b0229a9c9b792d9ee5e5f566583688440d1" translate="yes" xml:space="preserve">
          <source>Take a look at the DTD and observe that the structure of an XML document that is conformant to this DTD must have one motorcycles element (the root element). The motorcycles element must have at least one bike element. After each bike element it may be a date element. The content of the date element is #PCDATA (Parsed Character DATA), i.e. raw text. Observe that if #PCDATA must have a &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; or a &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; character it must be written as &lt;code&gt;&quot;&amp;amp;lt;&quot;&lt;/code&gt; and &lt;code&gt;&quot;&amp;amp;amp;&quot;&lt;/code&gt; respectively. Also other character entities exists similar to the ones in HTML and SGML.</source>
          <target state="translated">DTDを見て、このDTDに準拠しているXMLドキュメントの構造には、motorcycles要素（ルート要素）が1つ必要であることに注意してください。オートバイ要素には少なくとも1つの自転車要素が必要です。各バイク要素の後には、日付要素である場合があります。日付要素の内容は#PCDATA（解析された文字データ）、つまり生のテキストです。#PCDATAに &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; または &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; 文字が必要な場合は、 &lt;code&gt;&quot;&amp;amp;lt;&quot;&lt;/code&gt; と記述する必要があります。および &lt;code&gt;&quot;&amp;amp;amp;&quot;&lt;/code&gt; それぞれ。また、他の文字エンティティは、HTMLやSGMLのエンティティと同様に存在します。</target>
        </trans-unit>
        <trans-unit id="f1944ad3e238ccbfad283666266458fed59a2c12" translate="yes" xml:space="preserve">
          <source>Take care of &lt;code&gt;&lt;a href=&quot;#msg&quot;&gt;system messages&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#msg&quot;&gt;system messages&lt;/a&gt;&lt;/code&gt; 注意してください。</target>
        </trans-unit>
        <trans-unit id="f5cb213c0c3fbc91fd264762706d8f4c2755430c" translate="yes" xml:space="preserve">
          <source>Take time stamps with &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt;erlang:monotonic_time/0&lt;/a&gt;&lt;/code&gt; and calculate the time difference using ordinary subtraction. The result is in &lt;code&gt;native&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;erlang#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt;. If you want to convert the result to another time unit, you can use &lt;code&gt;&lt;a href=&quot;erlang#convert_time_unit-3&quot;&gt;erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt;erlang:monotonic_time/0&lt;/a&gt;&lt;/code&gt; でタイムスタンプを取得し、通常の減算を使用して時間差を計算します。結果は &lt;code&gt;native&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;erlang#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt; ます。結果を別の時間単位に変換する場合は、 &lt;code&gt;&lt;a href=&quot;erlang#convert_time_unit-3&quot;&gt;erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="e9ada3a67eabb29a57989f4f801f3c2a4ec53a23" translate="yes" xml:space="preserve">
          <source>Take time stamps with &lt;code&gt;erlang:now/0&lt;/code&gt; and calculate the difference in time with &lt;code&gt;timer:now_diff/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:now/0&lt;/code&gt; でタイムスタンプを &lt;code&gt;timer:now_diff/2&lt;/code&gt; し、timer：now_diff / 2で時間の差を計算します。</target>
        </trans-unit>
        <trans-unit id="aad56d0b07d8624ffdf8f3dd6234bf0a87980ba7" translate="yes" xml:space="preserve">
          <source>Takes a compiled regular expression and an item, and returns the relevant data from the regular expression. The only supported item is &lt;code&gt;namelist&lt;/code&gt;, which returns the tuple &lt;code&gt;{namelist, [binary()]}&lt;/code&gt;, containing the names of all (unique) named subpatterns in the regular expression. For example:</source>
          <target state="translated">コンパイルされた正規表現とアイテムを受け取り、正規表現から関連データを返します。サポートされる唯一の項目は &lt;code&gt;namelist&lt;/code&gt; です。これは、正規表現内のすべての（一意の）名前付きサブパターンの名前を含むタプル &lt;code&gt;{namelist, [binary()]}&lt;/code&gt; を返します。例えば：</target>
        </trans-unit>
        <trans-unit id="19bfeb3244c87dc7345b2a90b3a504725b9fc5d5" translate="yes" xml:space="preserve">
          <source>Takes a function from &lt;code&gt;A&lt;/code&gt;s to &lt;code&gt;B&lt;/code&gt;s, and a list of &lt;code&gt;A&lt;/code&gt;s and produces a list of &lt;code&gt;B&lt;/code&gt;s by applying the function to every element in the list. This function is used to obtain the return values. The evaluation order depends on the implementation.</source>
          <target state="translated">関数かかり &lt;code&gt;A&lt;/code&gt; にS &lt;code&gt;B&lt;/code&gt; 、S、およびリスト &lt;code&gt;A&lt;/code&gt; Sとのリスト産生 &lt;code&gt;B&lt;/code&gt; リスト内のすべての要素に関数を適用することにより、Sを。この関数は、戻り値を取得するために使用されます。評価の順序は実装によって異なります。</target>
        </trans-unit>
        <trans-unit id="55656bdc88d1b3d6dee5f6b3418d04f6d2a52efe" translate="yes" xml:space="preserve">
          <source>Takes a function from &lt;code&gt;A&lt;/code&gt;s to lists of &lt;code&gt;B&lt;/code&gt;s, and a list of &lt;code&gt;A&lt;/code&gt;s (&lt;code&gt;List1&lt;/code&gt;) and produces a list of &lt;code&gt;B&lt;/code&gt;s by applying the function to every element in &lt;code&gt;List1&lt;/code&gt; and appending the resulting lists.</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; から &lt;code&gt;B&lt;/code&gt; のリスト、および &lt;code&gt;A&lt;/code&gt; のリスト（ &lt;code&gt;List1&lt;/code&gt; ）に関数を &lt;code&gt;List1&lt;/code&gt; し、関数をList1のすべての要素に適用して、結果のリストを追加することにより、 &lt;code&gt;B&lt;/code&gt; のリストを生成します。</target>
        </trans-unit>
        <trans-unit id="52fae012e5e055efc934f9ec9bd9253885a38340" translate="yes" xml:space="preserve">
          <source>Takes a list of child specification as argument and returns &lt;code&gt;ok&lt;/code&gt; if all of them are syntactically correct, otherwise &lt;code&gt;{error,Error}&lt;/code&gt;.</source>
          <target state="translated">引数として子仕様のリストを取り、それらすべてが構文的に正しい場合は &lt;code&gt;ok&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;{error,Error}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="506646efe2a13a3aaee03a7ed507effbc3b857f9" translate="yes" xml:space="preserve">
          <source>Takes a list of key-value tuples elements and builds a map. The associations can be in any order, and both keys and values in the association can be of any term. If the same key appears more than once, the latter (right-most) value is used and the previous values are ignored.</source>
          <target state="translated">キーと値のタプル要素のリストを取り、マップを作成します。関連付けは任意の順序で行うことができ、関連付けの中のキーと値の両方が任意の項のものであることができます。同じキーが複数回出現した場合、後者の(右端の)値が使用され、それ以前の値は無視されます。</target>
        </trans-unit>
        <trans-unit id="8b5587ad9b89a81a22b94093c25712098169010e" translate="yes" xml:space="preserve">
          <source>Takes a pattern with &quot;don't care&quot; variables denoted as a &lt;code&gt;'_'&lt;/code&gt; parameter. This function returns a list of records that matched the pattern. Since the second element of a record in a table is considered to be the key for the record, the performance of this function depends on whether this key is bound or not.</source>
          <target state="translated">&lt;code&gt;'_'&lt;/code&gt; パラメータとして示される「ドントケア」変数を持つパターンを取得します。この関数は、パターンに一致したレコードのリストを返します。テーブル内のレコードの2番目の要素はレコードのキーと見なされるため、この関数のパフォーマンスは、このキーがバインドされているかどうかによって異なります。</target>
        </trans-unit>
        <trans-unit id="6aa0f10b3c4d20cfef7ffd9aac9c02c7e099a09b" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;ErrorDesc&lt;/code&gt; returned by load, unload, or reload functions and returns a string that describes the error or warning.</source>
          <target state="translated">ロード、アンロード、またはリロード関数によって返された &lt;code&gt;ErrorDesc&lt;/code&gt; を受け取り、エラーまたは警告を説明する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="57cbfc69dd180e338745075476b0f2367b010aeb" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;ErrorDescriptor&lt;/code&gt; and returns a string that describes the error or warning. This function is usually called implicitly when processing an &lt;code&gt;ErrorInfo&lt;/code&gt; structure (see section &lt;code&gt;&lt;a href=&quot;#errorinfo&quot;&gt;Error Information&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">受け取り &lt;code&gt;ErrorDescriptor&lt;/code&gt; をし、エラーまたは警告を説明する文字列を返します。この関数は通常、 &lt;code&gt;ErrorInfo&lt;/code&gt; 構造を処理するときに暗黙的に呼び出されます（ &lt;code&gt;&lt;a href=&quot;#errorinfo&quot;&gt;Error Information&lt;/a&gt;&lt;/code&gt; セクションを参照）。</target>
        </trans-unit>
        <trans-unit id="93bf5f96e7a486360d69cd80e7309017ce816941" translate="yes" xml:space="preserve">
          <source>Takes an additional parameter, which &lt;strong&gt;must&lt;/strong&gt; be the result of &lt;code&gt;record_info(size, &amp;lt;record_type&amp;gt;)&lt;/code&gt;, like in &lt;code&gt;{is_record, '$1', rectype, record_info(size, rectype)}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{is_record, '$1', rectype, record_info(size, rectype)}&lt;/code&gt; ように &lt;code&gt;record_info(size, &amp;lt;record_type&amp;gt;)&lt;/code&gt; の結果で&lt;strong&gt;なければならない&lt;/strong&gt;追加のパラメーターを受け取ります。</target>
        </trans-unit>
        <trans-unit id="6c1469847249171e76b7f608e5d60058ff04bd25" translate="yes" xml:space="preserve">
          <source>Takes an error code returned by one of the other functions in the module and creates a textual description of the error.</source>
          <target state="translated">モジュール内の他の関数から返されたエラーコードを受け取り、エラーのテキスト説明を作成します。</target>
        </trans-unit>
        <trans-unit id="a79e919b8abfed5dd81802687c1118f9e75fc341" translate="yes" xml:space="preserve">
          <source>Takes care of any work that is not specifically assigned to a scheduler.</source>
          <target state="translated">特にスケジューラに割り当てられていない作業を処理します。</target>
        </trans-unit>
        <trans-unit id="b31c0f53fdbe49aa50563e165f4e3a62fb484ea0" translate="yes" xml:space="preserve">
          <source>Takes care of possible cleanup that is needed when the cache handling process terminates.</source>
          <target state="translated">キャッシュ処理の終了時に必要なクリーンアップを行います。</target>
        </trans-unit>
        <trans-unit id="46509e2dee350637229abb5245a0cb50da574d1e" translate="yes" xml:space="preserve">
          <source>Takes characters from &lt;code&gt;String&lt;/code&gt; as long as the characters are members of set &lt;code&gt;Characters&lt;/code&gt; or the complement of set &lt;code&gt;Characters&lt;/code&gt;. &lt;code&gt;Dir&lt;/code&gt;, which can be &lt;code&gt;leading&lt;/code&gt; or &lt;code&gt;trailing&lt;/code&gt;, indicates from which direction characters are to be taken.</source>
          <target state="translated">文字を取る &lt;code&gt;String&lt;/code&gt; 長い文字がセットのメンバーであるとしてとして &lt;code&gt;Characters&lt;/code&gt; やセットの補数 &lt;code&gt;Characters&lt;/code&gt; 。 &lt;code&gt;Dir&lt;/code&gt; は、 &lt;code&gt;leading&lt;/code&gt; または &lt;code&gt;trailing&lt;/code&gt; でき、どの方向から文字を取得するかを示します。</target>
        </trans-unit>
        <trans-unit id="e93b486ac5971a63d69d4eadcbdf142bace13b4a" translate="yes" xml:space="preserve">
          <source>Takes elements &lt;code&gt;Elem&lt;/code&gt; from &lt;code&gt;List1&lt;/code&gt; while &lt;code&gt;Pred(Elem)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, that is, the function returns the longest prefix of the list for which all elements satisfy the predicate.</source>
          <target state="translated">&lt;code&gt;Pred(Elem)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返す間、 &lt;code&gt;List1&lt;/code&gt; から要素 &lt;code&gt;Elem&lt;/code&gt; を取得します。つまり、関数は、すべての要素が述語を満たすリストの最長のプレフィックスを返します。</target>
        </trans-unit>
        <trans-unit id="fbb4f090d8ca065719386cdc9464916982f88f35" translate="yes" xml:space="preserve">
          <source>Takes no argument and returns the value of the node's trace control word. The same is done by &lt;code&gt;erlang:system_info(trace_control_word)&lt;/code&gt;.</source>
          <target state="translated">引数を取らず、ノードのトレース制御ワードの値を返します。同じことが &lt;code&gt;erlang:system_info(trace_control_word)&lt;/code&gt; によって行われます。</target>
        </trans-unit>
        <trans-unit id="de7cf647d0f18821ebb79f5e2e860bbb7ec66c82" translate="yes" xml:space="preserve">
          <source>Takes one argument. If the argument is &lt;code&gt;true&lt;/code&gt;, the call trace message mode for the current process is set to silent for this call and all later calls, that is, call trace messages are inhibited even if &lt;code&gt;{message, true}&lt;/code&gt; is called in the &lt;code&gt;MatchBody&lt;/code&gt; part for a traced function.</source>
          <target state="translated">引数を1つ取ります。引数がある場合は &lt;code&gt;true&lt;/code&gt; 、現在のプロセスのコールトレースメッセージモードはこの呼び出し以降のすべての呼び出しのためにサイレントに設定されている、つまり、コール・トレース・メッセージはあっても禁止される &lt;code&gt;{message, true}&lt;/code&gt; で呼び出され &lt;code&gt;MatchBody&lt;/code&gt; Aの一部トレースされた関数。</target>
        </trans-unit>
        <trans-unit id="fd489e11a7379f3da46a8f5de6664950f616c21a" translate="yes" xml:space="preserve">
          <source>Takes one argument: the message. Returns &lt;code&gt;true&lt;/code&gt; and can only be used in the &lt;code&gt;MatchBody&lt;/code&gt; part and when tracing.</source>
          <target state="translated">1つの引数を取ります。メッセージです。 &lt;code&gt;true&lt;/code&gt; を返し、 &lt;code&gt;MatchBody&lt;/code&gt; パーツおよびトレース時にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="30493b8e01e1c19322e9bf0b28ad578877d961a6" translate="yes" xml:space="preserve">
          <source>Takes one unsigned integer argument, sets the value of the node's trace control word to the value of the argument, and returns the previous value. The same is done by &lt;code&gt;erlang:system_flag(trace_control_word, Value)&lt;/code&gt;. It is only allowed to use &lt;code&gt;set_tcw&lt;/code&gt; in the &lt;code&gt;MatchBody&lt;/code&gt; part when tracing.</source>
          <target state="translated">符号なし整数引数を1つ取り、ノードのトレース制御ワードの値を引数の値に設定して、前の値を返します。同じことが &lt;code&gt;erlang:system_flag(trace_control_word, Value)&lt;/code&gt; によって行われます。トレース時に &lt;code&gt;MatchBody&lt;/code&gt; パーツでのみ &lt;code&gt;set_tcw&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="09da2fcd1e2efe51ebf24c738e905ab46e139be1" translate="yes" xml:space="preserve">
          <source>Takes over the distributed application &lt;code&gt;Application&lt;/code&gt;, which executes at another node &lt;code&gt;Node&lt;/code&gt;. At the current node, the application is restarted by calling &lt;code&gt;Module:start({takeover,Node},StartArgs)&lt;/code&gt;. &lt;code&gt;Module&lt;/code&gt; and &lt;code&gt;StartArgs&lt;/code&gt; are retrieved from the loaded application specification. The application at the other node is not stopped until the startup is completed, that is, when &lt;code&gt;Module:start/2&lt;/code&gt; and any calls to &lt;code&gt;Module:start_phase/3&lt;/code&gt; have returned.</source>
          <target state="translated">別のノード &lt;code&gt;Node&lt;/code&gt; で実行される分散アプリケーション &lt;code&gt;Application&lt;/code&gt; を引き継ぎます。現在のノードで、 &lt;code&gt;Module:start({takeover,Node},StartArgs)&lt;/code&gt; 呼び出すことにより、アプリケーションが再起動されます。 &lt;code&gt;Module&lt;/code&gt; と &lt;code&gt;StartArgs&lt;/code&gt; は、ロードされたアプリケーション仕様から取得されます。他のノードのアプリケーションは、起動が完了するまで、つまり、 &lt;code&gt;Module:start/2&lt;/code&gt; および &lt;code&gt;Module:start_phase/3&lt;/code&gt; の呼び出しが返されるまで停止しません。</target>
        </trans-unit>
        <trans-unit id="0a647ce123db14489ad591cd488d47d856711e8f" translate="yes" xml:space="preserve">
          <source>Takes the list of characters &lt;code&gt;String&lt;/code&gt; and tries to scan (tokenize) them. Returns one of the following:</source>
          <target state="translated">文字 &lt;code&gt;String&lt;/code&gt; のリストを受け取り、それらをスキャン（トークン化）しようとします。次のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="3d44d06fda277fec8865be5e542736e38ae54f97" translate="yes" xml:space="preserve">
          <source>Takri</source>
          <target state="translated">Takri</target>
        </trans-unit>
        <trans-unit id="86c2b6275f076b31c4be9812e835dab2a6f07ccf" translate="yes" xml:space="preserve">
          <source>Tamil</source>
          <target state="translated">Tamil</target>
        </trans-unit>
        <trans-unit id="efa2b1a6ae1600d5f4d3d0746df43e1f2e23a7fa" translate="yes" xml:space="preserve">
          <source>Tar files can be created in one operation using function &lt;code&gt;&lt;a href=&quot;#create-2&quot;&gt;create/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#create-3&quot;&gt;create/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">tarファイルは、関数 &lt;code&gt;&lt;a href=&quot;#create-2&quot;&gt;create/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#create-3&quot;&gt;create/3&lt;/a&gt;&lt;/code&gt; を使用して1回の操作で作成できます。</target>
        </trans-unit>
        <trans-unit id="25d3b39619df66bdd0c7bc6d8ee96ee14afa2c24" translate="yes" xml:space="preserve">
          <source>Tear down a &quot;virtual&quot; connection</source>
          <target state="translated">仮想」接続を破壊する</target>
        </trans-unit>
        <trans-unit id="82bd3966ddc98061bf824297ca3d00cb4214a988" translate="yes" xml:space="preserve">
          <source>Tell &lt;code&gt;dbg&lt;/code&gt; to trace function Calls</source>
          <target state="translated">知らせる &lt;code&gt;dbg&lt;/code&gt; 関数呼び出しをトレースします</target>
        </trans-unit>
        <trans-unit id="835e2ece47c360b333f1a47931eef30669499f1b" translate="yes" xml:space="preserve">
          <source>Tell Erlang to use another primitive TCP module than &lt;code&gt;inet_tcp&lt;/code&gt;.</source>
          <target state="translated">Erlangに &lt;code&gt;inet_tcp&lt;/code&gt; 以外のプリミティブTCPモジュールを使用するように伝えます。</target>
        </trans-unit>
        <trans-unit id="6cb70b65ff1780e8afb327f1a87fff375570f8ad" translate="yes" xml:space="preserve">
          <source>Tell Erlang to use another primitive UDP module than &lt;code&gt;inet_udp&lt;/code&gt;.</source>
          <target state="translated">Erlangに &lt;code&gt;inet_udp&lt;/code&gt; 以外のプリミティブUDPモジュールを使用するように伝えます。</target>
        </trans-unit>
        <trans-unit id="9b7ea6ec990e7644aa1c8797918e78fc5d49e152" translate="yes" xml:space="preserve">
          <source>Tell it specifically to trace the &lt;code&gt;et:trace_me/5&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;et:trace_me/5&lt;/code&gt; 関数をトレースするように具体的に指示します</target>
        </trans-unit>
        <trans-unit id="57dd041bbdd098628d1f020b85579436c5820b6e" translate="yes" xml:space="preserve">
          <source>Tell the release handler to use the &lt;code&gt;releases&lt;/code&gt; directory in our target structure instead of &lt;code&gt;$OTP_ROOT/releases&lt;/code&gt;. This is done by setting the SASL environment variable &lt;code&gt;releases_dir&lt;/code&gt;, either from the command line (&lt;code&gt;-sasl releases_dir &amp;lt;target-dir&amp;gt;/releases&lt;/code&gt;) or in &lt;code&gt;sys.config&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$OTP_ROOT/releases&lt;/code&gt; ではなく、ターゲット構造内の &lt;code&gt;releases&lt;/code&gt; ディレクトリを使用するようにリリースハンドラーに指示します。これは、コマンドライン（ &lt;code&gt;-sasl releases_dir &amp;lt;target-dir&amp;gt;/releases&lt;/code&gt; ）または &lt;code&gt;sys.config&lt;/code&gt; で SASL環境変数 &lt;code&gt;releases_dir&lt;/code&gt; を設定することによって行われます。</target>
        </trans-unit>
        <trans-unit id="572e18ff0add697584fb4ac9dc773051bb0e16f3" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;Common Test&lt;/code&gt; to repeat the tests &lt;code&gt;n&lt;/code&gt; times (described later).</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; にテストを &lt;code&gt;n&lt;/code&gt; 回繰り返すように指示します（後述）。</target>
        </trans-unit>
        <trans-unit id="e4b8cb1936cb9df69d4554104909777bb2678271" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;Common Test&lt;/code&gt; to repeat the tests for duration of time (described later).</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; に、テストを一定期間繰り返すことを指示します（後述）。</target>
        </trans-unit>
        <trans-unit id="2898ea99fa920352a923e39692a4049acc36eb31" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;Common Test&lt;/code&gt; to repeat the tests until &lt;code&gt;stop_time&lt;/code&gt; (described later).</source>
          <target state="translated">伝え &lt;code&gt;Common Test&lt;/code&gt; するまで試験を繰り返す &lt;code&gt;stop_time&lt;/code&gt; （後述）。</target>
        </trans-unit>
        <trans-unit id="e085c8fd09860d3c0a7a2525ced06370c6aa9e09" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;erlsrv&lt;/code&gt; how to stop the Erlang emulator. Default is to kill it (Win32 TerminateProcess), but this action can specify any Erlang shell command that will be executed in the emulator to make it stop. The emulator is expected to stop within 30 seconds after the command is issued in the shell. If the emulator is not stopped, it reports a running state to the service manager.</source>
          <target state="translated">Erlangエミュレーターを停止する方法を &lt;code&gt;erlsrv&lt;/code&gt; に伝えます。デフォルトでは強制終了します（Win32 TerminateProcess）が、このアクションでは、エミュレーターで実行されるErlangシェルコマンドを指定して停止できます。エミュレータは、コマンドがシェルで発行されてから30秒以内に停止することが期待されています。エミュレーターが停止していない場合は、実行状態をサービスマネージャーに報告します。</target>
        </trans-unit>
        <trans-unit id="c0b8c2f094ce49a65d1ca33bf7b4040a376bc6cf" translate="yes" xml:space="preserve">
          <source>Tells explicitly which XML Schema documents to use to validate the XML document. Used together with the &lt;code&gt;{validation,schema}&lt;/code&gt; option.</source>
          <target state="translated">XMLドキュメントの検証に使用するXMLスキーマドキュメントを明示的に指示します。 &lt;code&gt;{validation,schema}&lt;/code&gt; オプションと一緒に使用します。</target>
        </trans-unit>
        <trans-unit id="0492b5903796ca58eb4f908e0044cfd75d4cdeda" translate="yes" xml:space="preserve">
          <source>Tells supervisor &lt;code&gt;SupRef&lt;/code&gt; to delete the child specification identified by &lt;code&gt;Id&lt;/code&gt;. The corresponding child process must not be running. Use &lt;code&gt;&lt;a href=&quot;#terminate_child-2&quot;&gt;terminate_child/2&lt;/a&gt;&lt;/code&gt; to terminate it.</source>
          <target state="translated">&lt;code&gt;Id&lt;/code&gt; で識別される子仕様を削除するようにスーパーバイザー &lt;code&gt;SupRef&lt;/code&gt; に指示します。対応する子プロセスが実行されていてはなりません。 &lt;code&gt;&lt;a href=&quot;#terminate_child-2&quot;&gt;terminate_child/2&lt;/a&gt;&lt;/code&gt; するには、terminate_child / 2を使用します。</target>
        </trans-unit>
        <trans-unit id="854d6e6ea1b17fd3503e1214e269e4327574ba1f" translate="yes" xml:space="preserve">
          <source>Tells supervisor &lt;code&gt;SupRef&lt;/code&gt; to restart a child process corresponding to the child specification identified by &lt;code&gt;Id&lt;/code&gt;. The child specification must exist, and the corresponding child process must not be running.</source>
          <target state="translated">&lt;code&gt;Id&lt;/code&gt; によって識別される子仕様に対応する子プロセスを再起動するようにスーパーバイザー &lt;code&gt;SupRef&lt;/code&gt; に指示します。子の仕様が存在している必要があり、対応する子プロセスが実行されていない必要があります。</target>
        </trans-unit>
        <trans-unit id="83cd5f49c19723bcbd4b9d8efb377bc645bf4fe0" translate="yes" xml:space="preserve">
          <source>Tells supervisor &lt;code&gt;SupRef&lt;/code&gt; to terminate the specified child.</source>
          <target state="translated">指定された子を終了するようにスーパーバイザー &lt;code&gt;SupRef&lt;/code&gt; に指示します。</target>
        </trans-unit>
        <trans-unit id="caff595a530bcc59815e7fe18f59345b5ce49ff6" translate="yes" xml:space="preserve">
          <source>Tells the DNS client &lt;code&gt;inet_res(3)&lt;/code&gt; to look up IPv6 addresses. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">DNSクライアントにIPv6アドレスを検索するように &lt;code&gt;inet_res(3)&lt;/code&gt; に指示します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6fdb6ce16675d8c8dd66ce3986070e67a82e2171" translate="yes" xml:space="preserve">
          <source>Tells the DNS client &lt;code&gt;inet_res(3)&lt;/code&gt; to use TCP (Virtual Circuit) instead of UDP. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">UDPの代わりにTCP（仮想回路）を使用するようにDNSクライアント &lt;code&gt;inet_res(3)&lt;/code&gt; に指示します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="78c529a078634064f178098741caf31cb78a48a7" translate="yes" xml:space="preserve">
          <source>Tells the compiler to generate functions for conversion between names (as atoms) and numbers and conversely for the specified &lt;code&gt;EnumTypeName&lt;/code&gt;. There can be multiple occurrences of this option to specify several type names. The type names must be declared as &lt;code&gt;ENUMERATIONS&lt;/code&gt; in the ASN.1 specification.</source>
          <target state="translated">名前（アトムとして）と数値の間の変換、および逆に指定された &lt;code&gt;EnumTypeName&lt;/code&gt; の変換用の関数を生成するようコンパイラーに指示します。このオプションを複数使用して、複数のタイプ名を指定できます。タイプ名は、ASN.1仕様で &lt;code&gt;ENUMERATIONS&lt;/code&gt; として宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a526775f5490371c812a9e90593190860b2feeb" translate="yes" xml:space="preserve">
          <source>Tells the process to change code. The process must be suspended to handle this message. Argument &lt;code&gt;Extra&lt;/code&gt; is reserved for each process to use as its own. Function &lt;code&gt;Module:system_code_change/4&lt;/code&gt; is called. &lt;code&gt;OldVsn&lt;/code&gt; is the old version of the &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">コードを変更するようにプロセスに指示します。このメッセージを処理するには、プロセスを一時停止する必要があります。引数 &lt;code&gt;Extra&lt;/code&gt; は、各プロセスが独自に使用するために予約されています。機能 &lt;code&gt;Module:system_code_change/4&lt;/code&gt; と呼ばれます。 &lt;code&gt;OldVsn&lt;/code&gt; は、古いバージョンの &lt;code&gt;Module&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ea6c03461dc3a543514f149ca6bb793d0a9e158a" translate="yes" xml:space="preserve">
          <source>Telugu</source>
          <target state="translated">Telugu</target>
        </trans-unit>
        <trans-unit id="48a0458cda5329a0ce2df604a592dac2d33cdef2" translate="yes" xml:space="preserve">
          <source>Temporary error: Try again.</source>
          <target state="translated">一時的なエラーです。再度試してみてください。</target>
        </trans-unit>
        <trans-unit id="c5c7003721dac5bbb05b8381d825683179e7de3e" translate="yes" xml:space="preserve">
          <source>Temporary files and the output file can be compressed. Defaults &lt;code&gt;false&lt;/code&gt;, which implies that written files are not compressed. Regardless of the value of option &lt;code&gt;compressed&lt;/code&gt;, compressed files can always be read. Notice that reading and writing compressed files are significantly slower than reading and writing uncompressed files.</source>
          <target state="translated">一時ファイルと出力ファイルは圧縮できます。デフォルトは &lt;code&gt;false&lt;/code&gt; で、書き込まれたファイルは圧縮されないことを意味します。オプションオプション &lt;code&gt;compressed&lt;/code&gt; の値に関係なく、圧縮ファイルは常に読み取ることができます。圧縮ファイルの読み取りと書き込みは、非圧縮ファイルの読み取りと書き込みよりもかなり遅いことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1532f885d5197fe3f8b41aeb41de89534d082e50" translate="yes" xml:space="preserve">
          <source>Term comparison operators return the Boolean value of the expression, &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">用語比較演算子は、式のブール値 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="30fd6857122636ec1a6eaf8d0167df27dbbc2068" translate="yes" xml:space="preserve">
          <source>Term comparisons</source>
          <target state="translated">用語の比較</target>
        </trans-unit>
        <trans-unit id="36df6bde5c18fe5e5d93fd385843cb7b8a0873f6" translate="yes" xml:space="preserve">
          <source>Term constructions/literals are translated as much as is needed to get them into valid match specification. This way tuples are made into match specification tuple constructions (a one element tuple containing the tuple) and constant expressions are used when importing variables from the environment. Records are also translated into plain tuple constructions, calls to element, and so on. The guard test &lt;code&gt;is_record/2&lt;/code&gt; is translated into match specification code using the three parameter version that is built into match specification, so that &lt;code&gt;is_record(A,t)&lt;/code&gt; is translated into &lt;code&gt;{is_record,'$1',t,5}&lt;/code&gt; if the record size of record type &lt;code&gt;t&lt;/code&gt; is 5.</source>
          <target state="translated">用語の構成/リテラル​​は、有効な一致仕様に変換するために必要なだけ翻訳されます。このようにして、タプルは一致指定タプル構造（タプルを含む1要素タプル）になり、環境から変数をインポートするときに定数式が使用されます。レコードは、プレーンなタプル構造、要素の呼び出しなどにも変換されます。ガードテスト &lt;code&gt;is_record/2&lt;/code&gt; は、一致仕様に組み込まれている3つのパラメーターバージョンを使用して一致仕様コードに変換されます。そのため、レコードサイズの場合、 &lt;code&gt;is_record(A,t)&lt;/code&gt; は &lt;code&gt;{is_record,'$1',t,5}&lt;/code&gt; 変換されます。レコードタイプ &lt;code&gt;t&lt;/code&gt; は5です。</target>
        </trans-unit>
        <trans-unit id="908579f030e6ac5e6a39f29bf0038f9182d1fd66" translate="yes" xml:space="preserve">
          <source>Term is not a binary.</source>
          <target state="translated">タームは二進法ではありません。</target>
        </trans-unit>
        <trans-unit id="0f9a73563feaeca50f714fb97a106cd148e6a35f" translate="yes" xml:space="preserve">
          <source>Term passed as the third argument to the &lt;code&gt;&lt;a href=&quot;diameter_transport#Mod:start-3&quot;&gt;start/3&lt;/a&gt;&lt;/code&gt; function of the relevant &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;transport module&lt;/a&gt;&lt;/code&gt; in order to start a transport process. Defaults to the empty list.</source>
          <target state="translated">トランスポートプロセスを開始するために、関連する &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;transport module&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;diameter_transport#Mod:start-3&quot;&gt;start/3&lt;/a&gt;&lt;/code&gt; 関数に3番目の引数として渡される用語。デフォルトは空のリストです。</target>
        </trans-unit>
        <trans-unit id="dfe25b408798a81c28611f4d808102f77953debd" translate="yes" xml:space="preserve">
          <source>Term to be sent to &lt;code&gt;&lt;a href=&quot;gen_event#add_handler-3&quot;&gt;gen_event:add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;gen_event#add_handler-3&quot;&gt;gen_event:add_handler/3&lt;/a&gt;&lt;/code&gt; に送信される用語。</target>
        </trans-unit>
        <trans-unit id="09f89796d08f4695c60595fc0a731d30d3e1ce2a" translate="yes" xml:space="preserve">
          <source>TermConstruct = {{}} | {{ ConditionExpression, ... }} | &lt;code&gt;[]&lt;/code&gt; | [ConditionExpression, ...] | #{} | #{term() =&amp;gt; ConditionExpression, ...} | NonCompositeTerm | Constant</source>
          <target state="translated">TermConstruct = {{}} | {{ConditionExpression、...}} | &lt;code&gt;[]&lt;/code&gt; | [ConditionExpression、...] | ＃{} | ＃{term（）=&amp;gt; ConditionExpression、...} | NonCompositeTerm | 絶え間ない</target>
        </trans-unit>
        <trans-unit id="301994d75fc00647fccf09f8223c73d02716a9f6" translate="yes" xml:space="preserve">
          <source>TermConstruct = {{}} | {{ ConditionExpression, ... }} | &lt;code&gt;[]&lt;/code&gt; | [ConditionExpression, ...] | &lt;code&gt;#{}&lt;/code&gt; | #{term() =&amp;gt; ConditionExpression, ...} | NonCompositeTerm | Constant</source>
          <target state="translated">TermConstruct = {{}} | {{ConditionExpression、...}} | &lt;code&gt;[]&lt;/code&gt; | [ConditionExpression、...] | &lt;code&gt;#{}&lt;/code&gt; | ＃{term（）=&amp;gt; ConditionExpression、...} | NonCompositeTerm | 絶え間ない</target>
        </trans-unit>
        <trans-unit id="317c27ee519ee48f9c75d7b40776395c672e14f6" translate="yes" xml:space="preserve">
          <source>Terminal I/O is slightly easier than file I/O. The output is meant for human reading and is usually Erlang syntax (for example, in the shell). There exists syntactic representation of any Unicode character without displaying the glyph (instead written as &lt;code&gt;\x&lt;/code&gt;{&lt;code&gt;HHH&lt;/code&gt;}). Unicode data can therefore usually be displayed even if the terminal as such does not support the whole Unicode range.</source>
          <target state="translated">端末I / Oは、ファイルI / Oよりも少し簡単です。出力は人間が読むためのもので、通常はErlang構文です（たとえば、シェル内）。グリフを表示せずに、Unicode文字の構文表現が存在します（代わりに &lt;code&gt;\x&lt;/code&gt; { &lt;code&gt;HHH&lt;/code&gt; }と書かれています）。したがって、端末自体がユニコード範囲全体をサポートしていない場合でも、ユニコード・データは通常表示できます。</target>
        </trans-unit>
        <trans-unit id="3782509534bdc8ecddfd675751de4bf801b681ec" translate="yes" xml:space="preserve">
          <source>Terminal categories may only appear in the right hand sides (= &lt;code&gt;rhs&lt;/code&gt;) of grammar rules.</source>
          <target state="translated">端末カテゴリは、文法規則の右側（= &lt;code&gt;rhs&lt;/code&gt; ）にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="157aa94e1d362822c48f2dff41e099927c9cb618" translate="yes" xml:space="preserve">
          <source>Terminate the transport process without Disconnect-Peer-Request being sent to the peer.</source>
          <target state="translated">Disconnect-Peer-Requestをピアに送らずにトランスポートプロセスを終了する。</target>
        </trans-unit>
        <trans-unit id="86018e6ee1482838e5a0aeb6ac5e33225172df60" translate="yes" xml:space="preserve">
          <source>Terminate the traversal and return &lt;code&gt;[Value | Acc]&lt;/code&gt;.</source>
          <target state="translated">トラバーサルを終了し、 &lt;code&gt;[Value | Acc]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef4447a97be9cdfc58e0bd40da8f22d111904fcd" translate="yes" xml:space="preserve">
          <source>Terminates &lt;code&gt;etop&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;etop&lt;/code&gt; を終了します。</target>
        </trans-unit>
        <trans-unit id="baa4e4f2aee82c277b2987190bacf935eba00880" translate="yes" xml:space="preserve">
          <source>Terminates a test case with an error message specified by a format string and a list of values (used as arguments to &lt;code&gt;io_lib:format/2&lt;/code&gt;).</source>
          <target state="translated">フォーマット文字列と値のリスト（ &lt;code&gt;io_lib:format/2&lt;/code&gt; の引数として使用）で指定されたエラーメッセージでテストケースを終了します。</target>
        </trans-unit>
        <trans-unit id="5a0abbf285140ae9fd7bfbb3aeee2d59660f0146" translate="yes" xml:space="preserve">
          <source>Terminates a test case with the specified error &lt;code&gt;Reason&lt;/code&gt;.</source>
          <target state="translated">指定したエラー &lt;code&gt;Reason&lt;/code&gt; でテストケースを終了します。</target>
        </trans-unit>
        <trans-unit id="2ab95c672b98796e32387d13d61b81abc40092fa" translate="yes" xml:space="preserve">
          <source>Terminates all processes listed in the window using &lt;code&gt;exit(Pid,kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit(Pid,kill)&lt;/code&gt; を使用して、ウィンドウにリストされているすべてのプロセスを終了します。</target>
        </trans-unit>
        <trans-unit id="004c6a43d05b92bb17dce6f779b63e9a29b1b7f4" translate="yes" xml:space="preserve">
          <source>Terminates the &lt;code&gt;gen_statem&lt;/code&gt; by calling &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt;Module:terminate/3&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;Reason&lt;/code&gt; and &lt;code&gt;NewData&lt;/code&gt;, if specified.</source>
          <target state="translated">指定されている場合、 &lt;code&gt;Reason&lt;/code&gt; および &lt;code&gt;NewData&lt;/code&gt; を指定して &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt;Module:terminate/3&lt;/a&gt;&lt;/code&gt; を呼び出すことにより、 &lt;code&gt;gen_statem&lt;/code&gt; を終了します。</target>
        </trans-unit>
        <trans-unit id="f271847fb13d7634791602927e994ef860fda84e" translate="yes" xml:space="preserve">
          <source>Terminates the Crashdump Viewer and closes all GUI windows.</source>
          <target state="translated">Crashdump Viewer を終了し、すべての GUI ウィンドウを閉じます。</target>
        </trans-unit>
        <trans-unit id="519a117c3896c0663badf989d4b915309b17e65a" translate="yes" xml:space="preserve">
          <source>Terminates the calling thread with the exit value passed as argument. &lt;code&gt;exit_value&lt;/code&gt; is a pointer to an exit value or &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">引数として渡された終了値で呼び出しスレッドを終了します。 &lt;code&gt;exit_value&lt;/code&gt; は、終了値へのポインタまたは &lt;code&gt;NULL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f20f699b09860115b81d54774a7222feaffe4a96" translate="yes" xml:space="preserve">
          <source>Terminates the character class</source>
          <target state="translated">文字クラスの終了</target>
        </trans-unit>
        <trans-unit id="bbd0750c043e7f8c526d39a2181c885faf307424" translate="yes" xml:space="preserve">
          <source>Terminates the process using &lt;code&gt;exit(Pid,kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit(Pid,kill)&lt;/code&gt; を使用してプロセスを終了します。</target>
        </trans-unit>
        <trans-unit id="332a0cca120165a32d4b04552488dcf492ca6ec7" translate="yes" xml:space="preserve">
          <source>Terminating closing square bracket</source>
          <target state="translated">終端閉止用角型ブラケット</target>
        </trans-unit>
        <trans-unit id="0f64c2787dcc796a369590e14f97af233d6dfc3a" translate="yes" xml:space="preserve">
          <source>Termination of a process executing a dirty NIF can only be completed up to a certain point while it executes the dirty NIF. All Erlang resources, such as its registered name and its ETS tables, are released. All links and monitors are triggered. The execution of the NIF is, however, &lt;strong&gt;not&lt;/strong&gt; stopped. The NIF can safely continue execution, allocate heap memory, and so on, but it is of course better to stop executing as soon as possible. The NIF can check whether a current process is alive using &lt;code&gt;&lt;a href=&quot;#enif_is_current_process_alive&quot;&gt;enif_is_current_process_alive&lt;/a&gt;&lt;/code&gt;. Communication using &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#enif_port_command&quot;&gt;enif_port_command&lt;/a&gt;&lt;/code&gt; is also dropped when the sending process is not alive. Deallocation of certain internal resources, such as process heap and process control block, is delayed until the dirty NIF has completed.</source>
          <target state="translated">ダーティNIFを実行しているプロセスの終了は、ダーティNIFを実行している特定の時点までしか完了できません。登録名やETSテーブルなどのすべてのErlangリソースが解放されます。すべてのリンクとモニターがトリガーされます。ただし、NIFの実行は停止され&lt;strong&gt;ません&lt;/strong&gt;。NIFは実行を安全に続行したり、ヒープメモリを割り当てたりすることができますが、もちろんできるだけ早く実行を停止することをお勧めします。NIFは、 &lt;code&gt;&lt;a href=&quot;#enif_is_current_process_alive&quot;&gt;enif_is_current_process_alive&lt;/a&gt;&lt;/code&gt; を使用して、現在のプロセスが有効かどうかを確認できます。 &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#enif_port_command&quot;&gt;enif_port_command&lt;/a&gt;&lt;/code&gt; を使用した通信送信プロセスがアクティブでない場合もドロップされます。プロセスヒープやプロセス制御ブロックなどの特定の内部リソースの割り当て解除は、ダーティNIFが完了するまで遅延されます。</target>
        </trans-unit>
        <trans-unit id="50961d0e1b820684d69e8aad3d9b1e96970dd946" translate="yes" xml:space="preserve">
          <source>Termination reason.</source>
          <target state="translated">解雇の理由。</target>
        </trans-unit>
        <trans-unit id="e19bcb1a4afdcf2396c1810bc351a007a00a0314" translate="yes" xml:space="preserve">
          <source>Termination-Cause AVP</source>
          <target state="translated">終了原因AVP</target>
        </trans-unit>
        <trans-unit id="720015dea84e939f9657bdc05e78a8f484b53980" translate="yes" xml:space="preserve">
          <source>Termination-Cause AVP Values</source>
          <target state="translated">終了原因AVP値</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="146c4bd146babe3998863abfd062b2ff20015f96" translate="yes" xml:space="preserve">
          <source>Terms are read from the disk log running on &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">用語は &lt;code&gt;Node&lt;/code&gt; で実行されているディスクログから読み取られます。</target>
        </trans-unit>
        <trans-unit id="f400db43c5a4bb9dcf24053b78382c5623a73df7" translate="yes" xml:space="preserve">
          <source>Terms in the current test specification (that is, the specification that has been used to configure and run the current test) can be looked up. The function &lt;code&gt;&lt;a href=&quot;ct#get_testspec_terms-0&quot;&gt;get_testspec_terms()&lt;/a&gt;&lt;/code&gt; returns a list of all test specification terms (both configuration terms and test terms), and &lt;code&gt;get_testspec_terms(Tags)&lt;/code&gt; returns the term (or a list of terms) matching the tag (or tags) in &lt;code&gt;Tags&lt;/code&gt;.</source>
          <target state="translated">現在のテスト仕様（つまり、現在のテストの構成と実行に使用された仕様）の用語を検索できます。関数 &lt;code&gt;&lt;a href=&quot;ct#get_testspec_terms-0&quot;&gt;get_testspec_terms()&lt;/a&gt;&lt;/code&gt; すべてのテスト仕様書の用語（構成用語および試験条件の両方）のリストを返し、 &lt;code&gt;get_testspec_terms(Tags)&lt;/code&gt; タグ（またはタグ）に一致する用語（または用語のリスト）を返す &lt;code&gt;Tags&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2258114625478405b0794d20feae7776bb952f1d" translate="yes" xml:space="preserve">
          <source>Terms of type binary are accessed with the help of struct type &lt;code&gt;&lt;a href=&quot;#ErlNifBinary&quot;&gt;ErlNifBinary&lt;/a&gt;&lt;/code&gt;, which contains a pointer (&lt;code&gt;data&lt;/code&gt;) to the raw binary data and the length (&lt;code&gt;size&lt;/code&gt;) of the data in bytes. Both &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; are read-only and are only to be written using calls to API functions. Instances of &lt;code&gt;ErlNifBinary&lt;/code&gt; are, however, always allocated by the user (usually as local variables).</source>
          <target state="translated">バイナリタイプの用語は、生のバイナリデータへのポインタ（ &lt;code&gt;data&lt;/code&gt; ）とデータの長さ（ &lt;code&gt;size&lt;/code&gt; ）をバイト単位で含むstructタイプ &lt;code&gt;&lt;a href=&quot;#ErlNifBinary&quot;&gt;ErlNifBinary&lt;/a&gt;&lt;/code&gt; の助けを借りてアクセスされます。どちらの &lt;code&gt;data&lt;/code&gt; と &lt;code&gt;size&lt;/code&gt; 読み取り専用API関数の呼び出しを使用して書き込まれるだけですされています。ただし、 &lt;code&gt;ErlNifBinary&lt;/code&gt; のインスタンスは常にユーザーによって割り当てられます（通常はローカル変数として）。</target>
        </trans-unit>
        <trans-unit id="920e01199bada94afb9a7c210700367bebf552cd" translate="yes" xml:space="preserve">
          <source>Test case groups can be nested so sets of groups can be configured with the same &lt;code&gt;init_per_group/2&lt;/code&gt; and &lt;code&gt;end_per_group/2&lt;/code&gt; functions. Nested groups can be defined by including a group definition, or a group name reference, in the test case list of another group.</source>
          <target state="translated">テストケースグループをネストできるため、グループのセットを同じ &lt;code&gt;init_per_group/2&lt;/code&gt; および &lt;code&gt;end_per_group/2&lt;/code&gt; 関数で構成できます。ネストされたグループは、別のグループのテストケースリストにグループ定義またはグループ名参照を含めることで定義できます。</target>
        </trans-unit>
        <trans-unit id="5bdbfab66783753cdeb866267c3e01eab16087f3" translate="yes" xml:space="preserve">
          <source>Test cases</source>
          <target state="translated">テストケース</target>
        </trans-unit>
        <trans-unit id="6ee68d1c38276f67012fb2a67884c914e7df88a5" translate="yes" xml:space="preserve">
          <source>Test cases are to restore as much of the execution environment as possible, so that subsequent test cases do not crash because of their execution order. The function &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; is suitable for this.</source>
          <target state="translated">テストケースは、実行環境を可能な限り復元し、後続のテストケースが実行順序によってクラッシュしないようにすることです。関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; はこれに適しています。</target>
        </trans-unit>
        <trans-unit id="eb3ed6107b568f9909300a05e389ccf37148b03c" translate="yes" xml:space="preserve">
          <source>Test cases can be executed individually or in batches. &lt;code&gt;Common Test&lt;/code&gt; also features a distributed testing mode with central control and logging. With this feature, multiple systems can be tested independently in one common session. This is useful, for example, when running automated large-scale regression tests.</source>
          <target state="translated">テストケースは個別にまたはバッチで実行できます。 &lt;code&gt;Common Test&lt;/code&gt; は、集中制御とロギングを備えた分散テストモードも備えています。この機能を使用すると、1つの共通セッションで複数のシステムを個別にテストできます。これは、たとえば、自動化された大規模回帰テストを実行するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="4b194be204295ad16e8f14aa0046caa585dd7fd0" translate="yes" xml:space="preserve">
          <source>Test cases can be skipped in the following ways:</source>
          <target state="translated">テストケースは以下の方法でスキップすることができます。</target>
        </trans-unit>
        <trans-unit id="d965a3f15f28a4c03812e7925aaabc94f5d085e2" translate="yes" xml:space="preserve">
          <source>Test cases in a sequence are executed in order until all succeed or one fails. If one fails, all following cases in the sequence are skipped. The cases in the sequence that have succeeded up to that point are reported as successful in the log. Any number of sequences can be specified.</source>
          <target state="translated">シーケンス内のテストケースは、すべてが成功するか、1つが失敗するまで順番に実行されます。1つが失敗した場合は、それに続くすべてのケースがスキップされます。それまでに成功したシーケンスのケースは、成功としてログに報告されます。シーケンスの数は自由に指定できます。</target>
        </trans-unit>
        <trans-unit id="40d70b7f6a0f40937f01a2ea075f8ecd7645309e" translate="yes" xml:space="preserve">
          <source>Test install using &lt;code&gt;EXTRA_PREFIX&lt;/code&gt;. The content of the &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; variable will prefix all installation paths when doing &lt;code&gt;make install&lt;/code&gt;. Note that &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; is similar to &lt;code&gt;DESTDIR&lt;/code&gt;, but it does &lt;strong&gt;not&lt;/strong&gt; have the same effect as &lt;code&gt;DESTDIR&lt;/code&gt;. The installation can and have to be run from the location specified by &lt;code&gt;EXTRA_PREFIX&lt;/code&gt;. That is, it can be useful if you want to try the system out, running test suites, etc, before doing the real install without &lt;code&gt;EXTRA_PREFIX&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EXTRA_PREFIX&lt;/code&gt; を使用してインストールをテストします。 &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; 変数の内容は、 &lt;code&gt;make install&lt;/code&gt; を実行するときに、すべてのインストールパスにプレフィックスを付けます。注こと &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; はに似て &lt;code&gt;DESTDIR&lt;/code&gt; が、それはない&lt;strong&gt;ではない&lt;/strong&gt;のと同じ効果持って &lt;code&gt;DESTDIR&lt;/code&gt; を。インストールは、 &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; で指定された場所から実行できます。つまり、 &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; なしで実際のインストールを行う前に、システムを試したり、テストスイートを実行したりする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="09cd8634fdd2477138516ede0b407901933f6764" translate="yes" xml:space="preserve">
          <source>Test sets can be joined in the same way: if &lt;code&gt;S_1&lt;/code&gt;, ..., &lt;code&gt;S_K&lt;/code&gt; are test sets, then &lt;code&gt;[S_1, ..., S_K]&lt;/code&gt; is also a test set, where the tests of &lt;code&gt;S_i&lt;/code&gt; are ordered before those of &lt;code&gt;S_(i+1)&lt;/code&gt;, for each subset &lt;code&gt;S_i&lt;/code&gt;.</source>
          <target state="translated">テストセットは、同じ方法で接合することができる：場合 &lt;code&gt;S_1&lt;/code&gt; は、...、 &lt;code&gt;S_K&lt;/code&gt; はテストセットであり、その後、 &lt;code&gt;[S_1, ..., S_K]&lt;/code&gt; また、のテストテストセットであり、 &lt;code&gt;S_i&lt;/code&gt; のものの前に順序付けされ &lt;code&gt;S_(i+1)&lt;/code&gt; 、各サブセット &lt;code&gt;S_i&lt;/code&gt; に対して。</target>
        </trans-unit>
        <trans-unit id="c0476bc91790b91266bc97b686a581dbb9934797" translate="yes" xml:space="preserve">
          <source>Test specifications can be used to run tests both in a single test host environment and in a distributed &lt;code&gt;Common Test&lt;/code&gt; environment (Large Scale Testing). The node parameters in term &lt;code&gt;init&lt;/code&gt; are only relevant in the latter (see section &lt;code&gt;&lt;a href=&quot;ct_master_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; in Large Scale Testing). For details about the various terms, see the corresponding sections in the User's Guide, for example, the following:</source>
          <target state="translated">テスト仕様を使用して、単一のテストホスト環境と分散型 &lt;code&gt;Common Test&lt;/code&gt; 環境（大規模テスト）の両方でテストを実行できます。用語 &lt;code&gt;init&lt;/code&gt; のノードパラメータは、後者にのみ関連します（「大規模テストの &lt;code&gt;&lt;a href=&quot;ct_master_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; 」を参照）。さまざまな用語の詳細については、次のようなユーザーズガイドの対応するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="30c41c15ebd68c9f73776e8a167fcaff4ee08b62" translate="yes" xml:space="preserve">
          <source>Test suites are organized in test directories and each test suite can have a separate data directory. Typically, these files and directories are version-controlled similar to other forms of source code (possibly by a version control system like GIT or Subversion). However, &lt;code&gt;Common Test&lt;/code&gt; does not itself put any requirements on (or has any awareness of) possible file and directory versions.</source>
          <target state="translated">テストスイートはテストディレクトリに編成され、各テストスイートは個別のデータディレクトリを持つことができます。通常、これらのファイルとディレクトリは、他の形式のソースコードと同様にバージョン管理されています（おそらくGITやSubversionなどのバージョン管理システムによって）。ただし、 &lt;code&gt;Common Test&lt;/code&gt; 自体は、可能性のあるファイルおよびディレクトリのバージョンに要件を課すことはありません（または認識しています）。</target>
        </trans-unit>
        <trans-unit id="703b1b5effc82cad270e49b3081c9a0476a73290" translate="yes" xml:space="preserve">
          <source>Test the boot script. To do this, start Erlang with the &lt;code&gt;-boot&lt;/code&gt; command-line parameter specifying this boot script (with its full path, but without the &lt;code&gt;.boot&lt;/code&gt; suffix). In UNIX it can look as follows:</source>
          <target state="translated">起動スクリプトをテストします。これを行うには、このブートスクリプトを指定する &lt;code&gt;-boot&lt;/code&gt; コマンドラインパラメーターを使用してErlangを起動します（フルパスを使用しますが、 &lt;code&gt;.boot&lt;/code&gt; サフィックスは使用しません）。UNIXでは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="1079562f698ab46db96db811ee51262354e5cae9" translate="yes" xml:space="preserve">
          <source>Test the function:</source>
          <target state="translated">機能をテストします。</target>
        </trans-unit>
        <trans-unit id="5d3e2372695f63ce0c53a4f4135db20d5ae16db5" translate="yes" xml:space="preserve">
          <source>Test:</source>
          <target state="translated">Test:</target>
        </trans-unit>
        <trans-unit id="10e93232f5ee13cde5c73ae6c73ca6a57a250ad6" translate="yes" xml:space="preserve">
          <source>TestResult</source>
          <target state="translated">TestResult</target>
        </trans-unit>
        <trans-unit id="9ff287ce9b2c7f5d011b9dafc2c0e9b0834011d4" translate="yes" xml:space="preserve">
          <source>Testing can be turned off by defining the &lt;code&gt;NOTEST&lt;/code&gt; macro when compiling, for example as an option to &lt;code&gt;erlc&lt;/code&gt;, as in:</source>
          <target state="translated">コンパイル時に &lt;code&gt;NOTEST&lt;/code&gt; マクロを定義することにより、テストをオフにすることができます。たとえば、次のように &lt;code&gt;erlc&lt;/code&gt; のオプションとして指定します。</target>
        </trans-unit>
        <trans-unit id="2585f55dae2dfcc3e47a81c069669b6106c8d569" translate="yes" xml:space="preserve">
          <source>Testing is performed by running test suites (sets of test cases) or individual test cases. A test suite is implemented as an Erlang module named &lt;code&gt;&amp;lt;suite_name&amp;gt;_SUITE.erl&lt;/code&gt; which contains a number of test cases. A test case is an Erlang function that tests one or more things. The test case is the smallest unit that the &lt;code&gt;Common Test&lt;/code&gt; test server deals with.</source>
          <target state="translated">テストは、テストスイート（テストケースのセット）または個別のテストケースを実行して実行されます。テストスイートは、 &lt;code&gt;&amp;lt;suite_name&amp;gt;_SUITE.erl&lt;/code&gt; という名前のErlangモジュールとして実装され、多数のテストケースが含まれています。テストケースは、1つまたは複数のものをテストするErlang関数です。テストケースは、 &lt;code&gt;Common Test&lt;/code&gt; テストサーバーが処理する最小単位です。</target>
        </trans-unit>
        <trans-unit id="cc6f17d3447c6fc66e6aa450b14b5cd25f941708" translate="yes" xml:space="preserve">
          <source>Testing that a complete system behaves according to its specification. Specifically, system testing should not require knowing any details about the implementation. It typically involves testing many different aspects of the system behaviour apart from the basic functionality, such as performance, usability, and reliability.</source>
          <target state="translated">完全なシステムがその仕様通りに動作するかどうかをテストすること。具体的には、システムテストは、実装についての詳細を知る必要はありません。一般的には、パフォーマンス、ユーザビリティ、信頼性などの基本的な機能とは別に、システムの動作の多くの異なる側面をテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="20415ba2297f8ab20d67c7323905cf5ac08c6d83" translate="yes" xml:space="preserve">
          <source>Testing that a number of individually developed program units (assumed to already have been separately unit tested) work together as expected. Depending on the system being developed, integration testing may be as simple as &quot;just another level of unit testing&quot;, but might also involve other kinds of tests (compare &lt;strong&gt;system testing&lt;/strong&gt;).</source>
          <target state="translated">多くの個別に開発されたプログラムユニット（すでに個別にユニットテストされていると想定）が期待どおりに機能することをテストします。開発中のシステムによっては、統合テストは「単なる別のレベルの単体テスト」のように単純な場合もありますが、他の種類のテストも必要になる場合があります（&lt;strong&gt;システムテスト&lt;/strong&gt;と比較）。</target>
        </trans-unit>
        <trans-unit id="9f22e406cc557d808f91d5ca40281d6d87b69e3f" translate="yes" xml:space="preserve">
          <source>Testing that a program unit behaves as it is supposed to do (in itself), according to its specifications. Unit tests have an important function as regression tests, when the program later is modified for some reason, since they check that the program still behaves according to specification.</source>
          <target state="translated">プログラムのユニットが(それ自体が)仕様通りに動作することをテストすること。ユニットテストは、プログラムが仕様通りに動作しているかどうかをチェックするので、後に何らかの理由でプログラムが修正された場合の回帰テストとして重要な機能を持っています。</target>
        </trans-unit>
        <trans-unit id="4edeec23b3417c02267c0c57b9ce61f0a5bdd89d" translate="yes" xml:space="preserve">
          <source>Testing the Application Configuration File</source>
          <target state="translated">アプリケーション設定ファイルのテスト</target>
        </trans-unit>
        <trans-unit id="d049bb261c78990b7f3a05cead76ac7f2ab8f8d3" translate="yes" xml:space="preserve">
          <source>Testing this program gives:</source>
          <target state="translated">このプログラムをテストすると</target>
        </trans-unit>
        <trans-unit id="1ebcdae36a9b05a6e1ab46518e4e58eef26626f1" translate="yes" xml:space="preserve">
          <source>Tests a match specification used in calls to &lt;code&gt;ets:select/2&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_pattern-3&quot;&gt;erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt;. The function tests both a match specification for &quot;syntactic&quot; correctness and runs the match specification against the object. If the match specification contains errors, the tuple &lt;code&gt;{error, Errors}&lt;/code&gt; is returned, where &lt;code&gt;Errors&lt;/code&gt; is a list of natural language descriptions of what was wrong with the match specification.</source>
          <target state="translated">&lt;code&gt;ets:select/2&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#trace_pattern-3&quot;&gt;erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt; の呼び出しで使用される一致仕様をテストします。この関数は、 &quot;構文&quot;の正確さについて一致仕様をテストし、オブジェクトに対して一致仕様を実行します。一致仕様にエラーが含まれている場合、タプル &lt;code&gt;{error, Errors}&lt;/code&gt; が返されます。ここで、 &lt;code&gt;Errors&lt;/code&gt; は、一致仕様の何が問題であったかを自然言語で説明したリストです。</target>
        </trans-unit>
        <trans-unit id="20af8d3a638a732a9ca30d0034512653a2afc567" translate="yes" xml:space="preserve">
          <source>Tests are spawned on &lt;code&gt;Node&lt;/code&gt; according to &lt;code&gt;TestSpecs&lt;/code&gt;.</source>
          <target state="translated">テストは &lt;code&gt;TestSpecs&lt;/code&gt; に従って &lt;code&gt;Node&lt;/code&gt; 上で生成されます。</target>
        </trans-unit>
        <trans-unit id="25a350c07b1dc4870d3e5fe60df517c27f4d00ae" translate="yes" xml:space="preserve">
          <source>Tests are spawned on &lt;code&gt;Node&lt;/code&gt; using &lt;code&gt;ct:run_test/1&lt;/code&gt;</source>
          <target state="translated">テストは &lt;code&gt;ct:run_test/1&lt;/code&gt; を使用して &lt;code&gt;Node&lt;/code&gt; で生成されます</target>
        </trans-unit>
        <trans-unit id="f9a6986bdc799652b1ed63c152d9475dfa79837d" translate="yes" xml:space="preserve">
          <source>Tests are spawned on the nodes as specified in &lt;code&gt;TestSpecs&lt;/code&gt;. Each specification in &lt;code&gt;TestSpec&lt;/code&gt; is handled separately. However, it is also possible to specify a list of specifications to be merged into one specification before the tests are executed. Any test without a particular node specification is also executed on the nodes in &lt;code&gt;InclNodes&lt;/code&gt;. Nodes in the &lt;code&gt;ExclNodes&lt;/code&gt; list are excluded from the test.</source>
          <target state="translated">&lt;code&gt;TestSpecs&lt;/code&gt; で指定されているように、ノードでテストが生成されます。 &lt;code&gt;TestSpec&lt;/code&gt; の各仕様は個別に処理されます。ただし、テストを実行する前に1つの仕様にマージする仕様のリストを指定することもできます。特定のノードを指定しないテストは、 &lt;code&gt;InclNodes&lt;/code&gt; のノードでも実行されます。 &lt;code&gt;ExclNodes&lt;/code&gt; リストのノードはテストから除外されます。</target>
        </trans-unit>
        <trans-unit id="70b11f1992889a6b7c7c46cf1041e8db8225983d" translate="yes" xml:space="preserve">
          <source>Tests are started by calling &lt;code&gt;&lt;a href=&quot;ct_master#run-1&quot;&gt;ct_master:run(TestSpecs)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ct_master#run-3&quot;&gt;ct_master:run(TestSpecs, InclNodes, ExclNodes)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">テストは、 &lt;code&gt;&lt;a href=&quot;ct_master#run-1&quot;&gt;ct_master:run(TestSpecs)&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;ct_master#run-3&quot;&gt;ct_master:run(TestSpecs, InclNodes, ExclNodes)&lt;/a&gt;&lt;/code&gt; 呼び出すことによって開始されます。</target>
        </trans-unit>
        <trans-unit id="ef16c9679cb63420148768ec48ac04c5d63e936c" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Expr&lt;/code&gt; is a legal guard test. &lt;code&gt;Expr&lt;/code&gt; is an Erlang term representing the abstract form for the expression. &lt;code&gt;&lt;a href=&quot;erl_parse#parse_exprs-1&quot;&gt;erl_parse:parse_exprs(Tokens)&lt;/a&gt;&lt;/code&gt; can be used to generate a list of &lt;code&gt;Expr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Expr&lt;/code&gt; がリーガルガードテストかどうかをテストします。 &lt;code&gt;Expr&lt;/code&gt; は、式の抽象的な形式を表すErlang用語です。 &lt;code&gt;&lt;a href=&quot;erl_parse#parse_exprs-1&quot;&gt;erl_parse:parse_exprs(Tokens)&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;Expr&lt;/code&gt; のリストを生成できます。</target>
        </trans-unit>
        <trans-unit id="c8ad645a0fe48da2850f345d9fd12acf10e03596" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Key&lt;/code&gt; is contained in dictionary &lt;code&gt;Dict&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; が辞書 &lt;code&gt;Dict&lt;/code&gt; に含まれているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="6804c0c8402a7f1d95110388290468af5380b366" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Key&lt;/code&gt; is contained in dictionary &lt;code&gt;Orddict&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; がディクショナリ &lt;code&gt;Orddict&lt;/code&gt; に含まれているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="17470d32fe0b145b2fa6cac2598fec80f0fef633" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Q&lt;/code&gt; is empty and returns &lt;code&gt;true&lt;/code&gt; if so, otherwise otherwise.</source>
          <target state="translated">&lt;code&gt;Q&lt;/code&gt; が空かどうかをテストし、空の場合は &lt;code&gt;true&lt;/code&gt; 、それ以外の場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="a356ab74ac86d19af634fb0738a567189848582f" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Term&lt;/code&gt; is a queue and returns &lt;code&gt;true&lt;/code&gt; if so, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Term&lt;/code&gt; がキューかどうかをテストし、キューの場合は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c37996f5d93af87f0cd3d137cfbd78cf77e1b111" translate="yes" xml:space="preserve">
          <source>Tests if the Actions argument is correctly composed.</source>
          <target state="translated">Actions 引数が正しく構成されているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="acacfb3b7cddace5d9eb1b40646553496edf16cd" translate="yes" xml:space="preserve">
          <source>Tests if the Reply argument is correctly composed.</source>
          <target state="translated">Reply 引数が正しく構成されているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="05fe70637fd8ca288c9016c0d2d69bc952a899ac" translate="yes" xml:space="preserve">
          <source>Text to the operator console.</source>
          <target state="translated">オペレータコンソールへのテキスト。</target>
        </trans-unit>
        <trans-unit id="54d4e6a8bdb666ab45d5ae6f0905988c6b9bdfe3" translate="yes" xml:space="preserve">
          <source>Textbook basic form Box-Muller standard normal deviate</source>
          <target state="translated">教科書の基本形 ボックス・ミュラー標準正規偏差</target>
        </trans-unit>
        <trans-unit id="2f72bba0ea07edaf4c51d66fc5bb6bab86a6ccd2" translate="yes" xml:space="preserve">
          <source>Thaana</source>
          <target state="translated">Thaana</target>
        </trans-unit>
        <trans-unit id="c32767e0541fe7038ff8d87e7b8aed17f49474f8" translate="yes" xml:space="preserve">
          <source>Thai</source>
          <target state="translated">Thai</target>
        </trans-unit>
        <trans-unit id="7c54512782f0b8a8a8ee3e013c2e8e72a5dedaa8" translate="yes" xml:space="preserve">
          <source>That EPMD is running</source>
          <target state="translated">そのEPMDが実行されている</target>
        </trans-unit>
        <trans-unit id="6d5dd72a57184dddefa9dbd040521e6e6341703b" translate="yes" xml:space="preserve">
          <source>That environment variable &lt;code&gt;ERL_EPMD_PORT&lt;/code&gt; is set correctly</source>
          <target state="translated">その環境変数 &lt;code&gt;ERL_EPMD_PORT&lt;/code&gt; が正しく設定されている</target>
        </trans-unit>
        <trans-unit id="8e3a97a56528bdf88e1b2051f20678cae41f8ace" translate="yes" xml:space="preserve">
          <source>That is an optimization. Most applications do not send messages with shared subterms.</source>
          <target state="translated">それは最適化です。ほとんどのアプリケーションでは、サブタームを共有してメッセージを送信することはありません。</target>
        </trans-unit>
        <trans-unit id="5c80baa8384a9b1de6a39a6f7088119999c1a237" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;Message&lt;/code&gt; (any Erlang term) is sent to the process with identity &lt;code&gt;Pid&lt;/code&gt;.</source>
          <target state="translated">つまり、 &lt;code&gt;Message&lt;/code&gt; （任意のErlang用語）がID &lt;code&gt;Pid&lt;/code&gt; でプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="45015129465c2268d074359ec5005e5d4d17b91b" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;filtermap&lt;/code&gt; behaves as if it had been defined as follows:</source>
          <target state="translated">つまり、 &lt;code&gt;filtermap&lt;/code&gt; は次のように定義されているかのように動作します。</target>
        </trans-unit>
        <trans-unit id="535867dd76e5b138e05f832dc9af825cc91d8cc3" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;flatmap&lt;/code&gt; behaves as if it had been defined as follows:</source>
          <target state="translated">つまり、 &lt;code&gt;flatmap&lt;/code&gt; は次のように定義されているかのように動作します。</target>
        </trans-unit>
        <trans-unit id="aad791da5a9f2ebf28101f220528f9b8d026646d" translate="yes" xml:space="preserve">
          <source>That is, a leap year. The next two &lt;code&gt;trunc&lt;/code&gt;-tests evaluate if the year is divisible by 100 or 4 in the same way. The first &lt;code&gt;if&lt;/code&gt; returns &lt;code&gt;leap&lt;/code&gt; or &lt;code&gt;not_leap&lt;/code&gt;, which lands up in the variable &lt;code&gt;Leap&lt;/code&gt;. This variable is used in the guard for &lt;code&gt;feb&lt;/code&gt; in the following &lt;code&gt;case&lt;/code&gt; that tells us how long the month is.</source>
          <target state="translated">つまり、うるう年です。次の2つの &lt;code&gt;trunc&lt;/code&gt; -testsは、年が同じように100または4で割り切れるかどうかを評価します。最初の &lt;code&gt;if&lt;/code&gt; は、変数 &lt;code&gt;Leap&lt;/code&gt; に &lt;code&gt;not_leap&lt;/code&gt; &lt;code&gt;leap&lt;/code&gt; またはnot_leapを返します。この変数は、次の &lt;code&gt;case&lt;/code&gt; &lt;code&gt;feb&lt;/code&gt; のガードで使用され、月の長さを示します。</target>
        </trans-unit>
        <trans-unit id="61bd067e8a1df03751d1301ebc5a385097e1ecce" translate="yes" xml:space="preserve">
          <source>That is, a trace output, with both the function called and the resulting value.</source>
          <target state="translated">つまり、呼び出された関数とその結果の値の両方を持つトレース出力です。</target>
        </trans-unit>
        <trans-unit id="b1bb322ca91a6283f723e39d12e1d20ae13c765c" translate="yes" xml:space="preserve">
          <source>That is, all the bound variables in the match head as a list. If tuples are to be constructed, one has to write a tuple of arity 1 where the single element in the tuple is the tuple one wants to construct (as an ordinary tuple can be mistaken for a &lt;code&gt;Guard&lt;/code&gt;).</source>
          <target state="translated">つまり、マッチヘッドのすべてのバインドされた変数がリストとして表示されます。タプルを作成する場合、アリティ1のタプルを作成する必要があります。タプルの単一の要素は、作成するタプルです（通常のタプルは &lt;code&gt;Guard&lt;/code&gt; と間違われる可能性があるため）。</target>
        </trans-unit>
        <trans-unit id="11e8a09abfceb997eddb8423e1781ebd95db28e7" translate="yes" xml:space="preserve">
          <source>That is:</source>
          <target state="translated">それは</target>
        </trans-unit>
        <trans-unit id="7179c2c2c75b5324944355b82ad607b610b23c74" translate="yes" xml:space="preserve">
          <source>That should make it possible to rebuild any library without hassle...</source>
          <target state="translated">これで、どんなライブラリでも手間なく再構築できるようになるはずなんですが...。</target>
        </trans-unit>
        <trans-unit id="ff03a468de0d9ed380aa26940cb3d4ce174a3748" translate="yes" xml:space="preserve">
          <source>That the correct cookie was used</source>
          <target state="translated">正しいクッキーが使用されていること</target>
        </trans-unit>
        <trans-unit id="fbb73f156f2e40ae17a54d203d8b3537e9a4d680" translate="yes" xml:space="preserve">
          <source>That the remote Erlang node on the other side is running the same version of Erlang as the &lt;code&gt;ei&lt;/code&gt; library</source>
          <target state="translated">反対側のリモートErlangノードが &lt;code&gt;ei&lt;/code&gt; ライブラリと同じバージョンのErlangを実行していること</target>
        </trans-unit>
        <trans-unit id="43093885e0893ad901ee4b46bda00f5dc1d9a9d7" translate="yes" xml:space="preserve">
          <source>That the remote Erlang node on the other side is running the same version of Erlang as the &lt;code&gt;erl_interface&lt;/code&gt; library</source>
          <target state="translated">反対側のリモートErlangノードが &lt;code&gt;erl_interface&lt;/code&gt; ライブラリと同じバージョンのErlangを実行していること</target>
        </trans-unit>
        <trans-unit id="e3420600d759a760d25722c58727ef289f531b08" translate="yes" xml:space="preserve">
          <source>That was once true, but from R6B the BEAM compiler can see that a variable is not used.</source>
          <target state="translated">かつてはそうでしたが、R6BからはBEAMコンパイラは変数が使われていないことがわかります。</target>
        </trans-unit>
        <trans-unit id="aefbfb778a6045a9feec711cee7f0b6bfe06745c" translate="yes" xml:space="preserve">
          <source>That was true to some extent before R12B. It was even more true before R7B. Today, not so much. A body-recursive function generally uses the same amount of memory as a tail-recursive function. It is generally not possible to predict whether the tail-recursive or the body-recursive version will be faster. Therefore, use the version that makes your code cleaner (hint: it is usually the body-recursive version).</source>
          <target state="translated">R12B以前はある程度そうだった。R7B以前はもっとそうだった。今日では、そうではありません。ボディ再帰関数は一般的に尾部再帰関数と同じ量のメモリを使用します。一般的に、末尾再帰型とボディ再帰型のどちらが速いかを予測することはできません。したがって、コードをよりクリーンにするバージョンを使用してください(ヒント:通常はボディ再帰バージョンです)。</target>
        </trans-unit>
        <trans-unit id="8ef05f15aa52cadeef34686e592834e1d7565d8c" translate="yes" xml:space="preserve">
          <source>That will copy the emulator executables.</source>
          <target state="translated">これでエミュレータの実行ファイルがコピーされます。</target>
        </trans-unit>
        <trans-unit id="c1b9697cd4f3baa91fdf236c77e1a263c60d4132" translate="yes" xml:space="preserve">
          <source>That's basically all you need to get going.</source>
          <target state="translated">基本的にはそれだけで十分です。</target>
        </trans-unit>
        <trans-unit id="82c971d45846792b2b886cdbb85418dc5903f332" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;code&gt;--&lt;/code&gt;&quot; operator has a complexity proportional to the product of the length of its operands. This means that the operator is very slow if both of its operands are long lists:</source>
          <target state="translated">「 &lt;code&gt;--&lt;/code&gt; 」演算子は、オペランドの長さの積に比例する複雑さを持っています。つまり、演算子の両方が長いリストである場合、演算子は非常に遅くなります。</target>
        </trans-unit>
        <trans-unit id="ff5589371f0dbe70e4139850cd24f1db48567113" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;strong&gt;state callback&lt;/strong&gt;&quot; for a specific &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; in a &lt;code&gt;gen_statem&lt;/code&gt; is the callback function that is called for all events in this state. It is selected depending on which &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; that the callback module defines with the callback function &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">「&lt;strong&gt;状態コールバック&lt;/strong&gt;の特定のための」 &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;gen_statem&lt;/code&gt; は、この状態では、すべてのイベントに対して呼び出されるコールバック関数です。コールバックモジュールがコールバック関数 &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; で定義するコール &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 応じて選択されます。</target>
        </trans-unit>
        <trans-unit id="fd11f0de519165a84c1b8fcc83fbb4913df33819" translate="yes" xml:space="preserve">
          <source>The &quot;Definitions.&quot;, &quot;Rules.&quot; and &quot;Erlang code.&quot; headings are mandatory and must occur at the beginning of a source line. The &amp;lt;Header&amp;gt;, &amp;lt;Macro Definitions&amp;gt; and &amp;lt;Erlang code&amp;gt; sections may be empty but there must be at least one rule.</source>
          <target state="translated">「定義」、「ルール」。そして「アーランコード」。見出しは必須であり、ソース行の先頭になければなりません。&amp;lt;Header&amp;gt;、&amp;lt;Macro Definitions&amp;gt;、および&amp;lt;Erlang code&amp;gt;セクションは空の場合がありますが、少なくとも1つのルールが必要です。</target>
        </trans-unit>
        <trans-unit id="0a6c1c05be408f7e65aa7a987ce718ffc02949c2" translate="yes" xml:space="preserve">
          <source>The &quot;Okasaki API&quot; is inspired by &quot;Purely Functional Data Structures&quot; by Chris Okasaki. It regards queues as lists. This API is by many regarded as strange and avoidable. For example, many reverse operations have lexically reversed names, some with more readable but perhaps less understandable aliases.</source>
          <target state="translated">岡崎API」は、クリス岡崎氏の「Purely Functional Data Structures」にインスパイアされたものです。これは、キューをリストとみなしています。このAPIは、多くの人に奇妙で回避可能なものとみなされています。例えば、多くの逆引き操作は、語彙的には逆の名前を持っていますが、 いくつかはより読みやすく、しかしおそらくは理解しにくいエイリアスを持っています。</target>
        </trans-unit>
        <trans-unit id="4fe7eac7bdedf25d0494e04217d2e3132e60e367" translate="yes" xml:space="preserve">
          <source>The &quot;Original API&quot; and the &quot;Extended API&quot; both use the mental picture of a waiting line of items. Both have reverse operations suffixed &quot;_r&quot;.</source>
          <target state="translated">オリジナルAPI」と「拡張API」は、どちらも項目が並んでいるという心象を利用しています。どちらも接尾辞が&quot;_r &quot;の逆演算をしています。</target>
        </trans-unit>
        <trans-unit id="3887fa2b48cbded502d3da264fbe59b3f1883ab5" translate="yes" xml:space="preserve">
          <source>The &quot;Original API&quot; item removal functions return compound terms with both the removed item and the resulting queue. The &quot;Extended API&quot; contains alternative functions that build less garbage and functions for just inspecting the queue ends. Also the &quot;Okasaki API&quot; functions build less garbage.</source>
          <target state="translated">オリジナルAPI」の項目削除関数は、削除された項目と結果のキューの両方を持つ複合項を返します。拡張API」には、ガベージの少ない代替関数や、キューの終端を検査するだけの関数が含まれています。また、「岡崎API」では、より少ないガベージを構築することができます。</target>
        </trans-unit>
        <trans-unit id="7a1a738b6242350a278b4cc4eaff19808c280faf" translate="yes" xml:space="preserve">
          <source>The &quot;Oxford Advanced Learners Dictionary of Current English&quot; says the following about the word &quot;indent&quot;:</source>
          <target state="translated">Oxford Advanced Learners Dictionary of Current English」には、「indent」という単語について次のように書かれています。</target>
        </trans-unit>
        <trans-unit id="b71ca1b4095bae581a22c9bd4dc765543e310daa" translate="yes" xml:space="preserve">
          <source>The &quot;keep alive&quot; activity (that is, that &lt;code&gt;Common Test&lt;/code&gt; sends NOP to the server every 10 seconds if the connection is idle) can be enabled or disabled for one particular connection as described here. It can be disabled for all connections using &lt;code&gt;telnet_settings&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">「キープアライブ」アクティビティ（つまり、接続がアイドルの場合、 &lt;code&gt;Common Test&lt;/code&gt; は10秒ごとにサーバーにNOPを送信します）は、ここで説明するように、1つの特定の接続に対して有効または無効にできます。 &lt;code&gt;telnet_settings&lt;/code&gt; を使用して、すべての接続で無効にできます（ &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="4fe589f8c1fff89269afb0db8e6111d61dec7b78" translate="yes" xml:space="preserve">
          <source>The &quot;private&quot; message &lt;code&gt;{From, rewind}&lt;/code&gt; results in the current position in the pseudo-file to be reset to &lt;code&gt;0&lt;/code&gt; (the beginning of the &quot;file&quot;). This is a typical example of I/O device-specific messages not being part of the I/O protocol. It is usually a bad idea to embed such private messages in &lt;code&gt;io_request&lt;/code&gt; tuples, as that can confuse the reader.</source>
          <target state="translated">「プライベート」メッセージ &lt;code&gt;{From, rewind}&lt;/code&gt; により、疑似ファイルの現在の位置が &lt;code&gt;0&lt;/code&gt; （「ファイル」の先頭）にリセットされます。これは、I / Oプロトコルの一部ではないI / Oデバイス固有のメッセージの典型的な例です。このようなプライベートメッセージを &lt;code&gt;io_request&lt;/code&gt; タプルに埋め込むことは、リーダーを混乱させる可能性があるため、通常はお勧めできません。</target>
        </trans-unit>
        <trans-unit id="e4a690e384b2d5a804cad58bd96420656c204892" translate="yes" xml:space="preserve">
          <source>The &quot;test run index&quot; page includes a link to the &lt;code&gt;Common Test&lt;/code&gt; Framework Log file in which information about imported configuration data and general test progress is written. This log file is useful to get snapshot information about the test run during execution. It can also be helpful when analyzing test results or debugging test suites.</source>
          <target state="translated">「テスト実行インデックス」ページには、インポートされた構成データと一般的なテストの進行状況に関する情報が書き込まれる &lt;code&gt;Common Test&lt;/code&gt; Frameworkログファイルへのリンクが含まれています。このログファイルは、実行中のテスト実行に関するスナップショット情報を取得するのに役立ちます。また、テスト結果の分析やテストスイートのデバッグにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="8c3be9bfee853a4424aae3e9b08197fdb2f6acc7" translate="yes" xml:space="preserve">
          <source>The &quot;test run index&quot; page indicates if a test has missing suites (that is, suites that &lt;code&gt;Common Test&lt;/code&gt; failed to compile). Names of the missing suites can be found in the &lt;code&gt;Common Test&lt;/code&gt; Framework Log file.</source>
          <target state="translated">「テスト実行インデックス」ページは、テストに欠落しているスイート（つまり、 &lt;code&gt;Common Test&lt;/code&gt; がコンパイルに失敗したスイート）があるかどうかを示します。不足しているスイートの名前は、 &lt;code&gt;Common Test&lt;/code&gt; Frameworkのログファイルで確認できます。</target>
        </trans-unit>
        <trans-unit id="a60728f91de50a0cab75ed1bd09ee0c55638db56" translate="yes" xml:space="preserve">
          <source>The &quot;trim&quot; option says; &quot;give me as many parts as possible except the empty ones&quot;, which sometimes can be useful. You can also specify how many parts you want, by specifying &lt;code&gt;{parts,&lt;/code&gt;N&lt;code&gt;}&lt;/code&gt;:</source>
          <target state="translated">「トリム」オプションは言う; 「空のパーツを除いて、できるだけ多くのパーツをくれ」と、時々役立ちます。 &lt;code&gt;{parts,&lt;/code&gt; N &lt;code&gt;}&lt;/code&gt; を指定して、必要なパーツの数を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="9d8edde0db65ff7f9e25c8ce9f9ce0286b2ab0b7" translate="yes" xml:space="preserve">
          <source>The &amp;lt;Regexp&amp;gt; must occur at the start of a line and not include any blanks; use &lt;code&gt;\t&lt;/code&gt; and &lt;code&gt;\s&lt;/code&gt; to include TAB and SPACE characters in the regular expression. If &amp;lt;Regexp&amp;gt; matches then the corresponding &amp;lt;Erlang code&amp;gt; is evaluated to generate a token. With the Erlang code the following predefined variables are available:</source>
          <target state="translated">&amp;lt;Regexp&amp;gt;は、行の先頭に置く必要があり、空白を含めないでください。正規表現にタブ文字とスペース文字を含めるには、 &lt;code&gt;\t&lt;/code&gt; と &lt;code&gt;\s&lt;/code&gt; を使用します。&amp;lt;Regexp&amp;gt;が一致する場合、対応する&amp;lt;Erlang code&amp;gt;が評価されてトークンが生成されます。Erlangコードでは、次の定義済み変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="5fd6006060b360d3964e6301c70d62dfa6542605" translate="yes" xml:space="preserve">
          <source>The (*MARK) name is tagged with &quot;MK:&quot; in this output, and in this example it indicates which of the two alternatives matched. This is a more efficient way of obtaining this information than putting each alternative in its own capturing parentheses.</source>
          <target state="translated">(*MARK)名は、この出力では &quot;MK:&quot;とタグ付けされており、この例では、2つの選択肢のうちどちらにマッチしたかを示している。これは、各代替案をそれ自身の捕獲括弧に入れるよりも、この情報を得るためのより効率的な方法です。</target>
        </trans-unit>
        <trans-unit id="7626cd8d4a95d16adbb501a045b70ff730bc3449" translate="yes" xml:space="preserve">
          <source>The (*UTF8) and (*UCP) leading sequences can be used to set UTF and Unicode property modes. They are equivalent to setting options &lt;code&gt;unicode&lt;/code&gt; and &lt;code&gt;ucp&lt;/code&gt;, respectively. The (*UTF) sequence is a generic version that can be used with any of the libraries. However, the application can set option &lt;code&gt;never_utf&lt;/code&gt;, which locks out the use of the (*UTF) sequences.</source>
          <target state="translated">（* UTF8）および（* UCP）の先頭シーケンスを使用して、UTFおよびUnicodeプロパティモードを設定できます。これらは、オプション &lt;code&gt;unicode&lt;/code&gt; および &lt;code&gt;ucp&lt;/code&gt; をそれぞれ設定することと同等です。 （* UTF）シーケンスは、任意のライブラリーで使用できる汎用バージョンです。ただし、アプリケーションはオプション &lt;code&gt;never_utf&lt;/code&gt; を設定できます。これは、（* UTF）シーケンスの使用をロックアウトします。</target>
        </trans-unit>
        <trans-unit id="0af8bbc7ab3d2447bd6a5d8520e9f3d0f277f0b4" translate="yes" xml:space="preserve">
          <source>The (built-in) &lt;code&gt;escript&lt;/code&gt; program first determines which Erlang runtime system to use and then starts it to execute your script. Usually the runtime system is located in the same Erlang installation as the &lt;code&gt;escript&lt;/code&gt; program itself. But for standalone systems with one or more escripts it may be the case that the &lt;code&gt;escript&lt;/code&gt; program in your path actually starts the runtime system bundled with the escript. This is intentional, and typically happens when the standalone system &lt;code&gt;bin&lt;/code&gt; directory is not in the execution path (as it may cause its &lt;code&gt;erl&lt;/code&gt; program to override the desired one) and the &lt;code&gt;escript&lt;/code&gt;(s) are referred to via symbolic links from a &lt;code&gt;bin&lt;/code&gt; directory in the path.</source>
          <target state="translated">（組み込みの） &lt;code&gt;escript&lt;/code&gt; プログラムは、最初に使用するErlangランタイムシステムを決定し、次にそれを開始してスクリプトを実行します。通常、ランタイムシステムは &lt;code&gt;escript&lt;/code&gt; プログラム自体と同じErlangインストールにあります。しかし、一つ以上のescriptsでスタンドアロンシステムのためにそれがある場合もあり &lt;code&gt;escript&lt;/code&gt; あなたのパスにプログラムが実際escriptにバンドルランタイムシステムを起動します。これは意図的なものであり、通常、スタンドアロンシステムの &lt;code&gt;bin&lt;/code&gt; ディレクトリが実行パスにない場合に発生し（その &lt;code&gt;erl&lt;/code&gt; プログラムが目的のプログラムを上書きする可能性があるため）、 &lt;code&gt;escript&lt;/code&gt; はの &lt;code&gt;bin&lt;/code&gt; ディレクトリからのシンボリックリンクを介して参照されますパス。</target>
        </trans-unit>
        <trans-unit id="dfd9ff6975abbc395a9f98a9f0cbda02a2c72d28" translate="yes" xml:space="preserve">
          <source>The (compressed) tape archive file is to be extracted in the installation directory defined above.</source>
          <target state="translated">(圧縮された)テープアーカイブファイルは、上記で定義されたインストールディレクトリに展開されます。</target>
        </trans-unit>
        <trans-unit id="bdcfaa6a575093f30922fde0b326af66b1dc8369" translate="yes" xml:space="preserve">
          <source>The (hidden) node implements atom cache (obsolete).</source>
          <target state="translated">(hidden)ノードは、アトムキャッシュを実装しています(obsolete)。</target>
        </trans-unit>
        <trans-unit id="148d899ab108f6515349d4b01878d74abd02d0c9" translate="yes" xml:space="preserve">
          <source>The (host operating system) environment variable &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; can be used to give default compiler options. Its value must be a valid Erlang term. If the value is a list, it is used as is. If it is not a list, it is put into a list.</source>
          <target state="translated">（ホストオペレーティングシステム）環境変数 &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; を使用して、デフォルトのコンパイラオプションを指定できます。その値は有効なErlang用語でなければなりません。値がリストの場合は、そのまま使用されます。リストでない場合は、リストに入れられます。</target>
        </trans-unit>
        <trans-unit id="f06fadd0b84d13f99d85c50cfc349e4a25addef3" translate="yes" xml:space="preserve">
          <source>The (possibly flattened) &lt;code&gt;Path&lt;/code&gt; parameter must be consistent throughout the system. A driver is to, by all &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt;, be loaded using the same &lt;strong&gt;literal&lt;/strong&gt;&lt;code&gt;Path&lt;/code&gt;. The exception is when &lt;strong&gt;reloading&lt;/strong&gt; is requested, in which case &lt;code&gt;Path&lt;/code&gt; can be specified differently. Notice that all &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; trying to load the driver later need to use the &lt;strong&gt;new&lt;/strong&gt;&lt;code&gt;Path&lt;/code&gt; if &lt;code&gt;Path&lt;/code&gt; is changed using a &lt;code&gt;reload&lt;/code&gt; option. This is yet another reason to have &lt;strong&gt;only one loader&lt;/strong&gt; of a driver one wants to upgrade in a running system.</source>
          <target state="translated">（おそらくフラット化された） &lt;code&gt;Path&lt;/code&gt; パラメータは、システム全体で一貫している必要があります。ドライバーは、すべての &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; が同じ&lt;strong&gt;リテラル&lt;/strong&gt; &lt;code&gt;Path&lt;/code&gt; を使用してロードする必要があります。例外は、&lt;strong&gt;再ロード&lt;/strong&gt;が要求された場合です。この場合、 &lt;code&gt;Path&lt;/code&gt; は別の方法で指定できます。 &lt;code&gt;reload&lt;/code&gt; オプションを使用して &lt;code&gt;Path&lt;/code&gt; を変更した場合、後でドライバーをロードしようとするすべての &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; が&lt;strong&gt;新しい&lt;/strong&gt; &lt;code&gt;Path&lt;/code&gt; を使用する必要があることに注意してください。これは、実行中のシステムでアップグレードしたいドライバーの&lt;strong&gt;ローダー&lt;/strong&gt;が&lt;strong&gt;1つしか&lt;/strong&gt;ないもう1つの理由です。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c443fb128bea98f3149bd2df5d12047cad839bc" translate="yes" xml:space="preserve">
          <source>The 16 bytes MD5 of the significant parts of the Beam file.</source>
          <target state="translated">Beamファイルの重要部分の16バイトMD5。</target>
        </trans-unit>
        <trans-unit id="7d39efdef71579d11fb25cc52651c18fba9a7537" translate="yes" xml:space="preserve">
          <source>The 3-tuple form additionally specifies an interval, in milliseconds, after which a started transport process should be terminated if it has not yet established a connection. For example, the following options on a connecting transport request a connection with one peer over SCTP or another (typically the same) over TCP.</source>
          <target state="translated">3タプル形式はさらに、開始されたトランスポートプロセスがまだ接続を確立していない 場合に終了すべき間隔(ミリ秒単位)を指定する。例えば、接続トランスポート上の以下のオプションは、SCTP上の1つのピアとの接続を 要求するか、TCP上の別のピア(通常は同じ)との接続を要求する。</target>
        </trans-unit>
        <trans-unit id="acebf1a57043cf38ebb17933963dec066b1efb07" translate="yes" xml:space="preserve">
          <source>The 4-byte header is limited to 2Gb.</source>
          <target state="translated">4バイトのヘッダは2Gbに制限されています。</target>
        </trans-unit>
        <trans-unit id="c54cda7cb6bfe2ffa1c818c4fe4b01c2c1e1b503" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;cert_opt&quot;&gt;cert_opt()&lt;/code&gt; type consists of the following options:</source>
          <target state="translated">&lt;code id=&quot;cert_opt&quot;&gt;cert_opt()&lt;/code&gt; タイプは、次のオプションで構成されています。</target>
        </trans-unit>
        <trans-unit id="865c911e774746bccfef22abcc84f0e0893f4e7b" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;emulator&quot;&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; driver API functions need a port handle that identifies the driver instance (and the port in the emulator). This is only passed to the &lt;code&gt;start&lt;/code&gt; function, but not to the other functions. The &lt;code&gt;start&lt;/code&gt; function returns a driver-defined handle that is passed to the other functions. A common practice is to have the &lt;code&gt;start&lt;/code&gt; function allocate some application-defined structure and stash the &lt;code&gt;port&lt;/code&gt; handle in it, to use it later with the driver API functions.</source>
          <target state="translated">&lt;code id=&quot;emulator&quot;&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; のドライバAPI関数は、ドライバ・インスタンスを識別するポートハンドル（エミュレータ内のポート）を必要とします。これは &lt;code&gt;start&lt;/code&gt; 関数にのみ渡され、他の関数には渡されません。 &lt;code&gt;start&lt;/code&gt; 機能は、他の機能に渡され、ドライバ定義ハンドルを返します。一般的な方法は、 &lt;code&gt;start&lt;/code&gt; 関数にアプリケーション定義の構造を割り当て、その中に &lt;code&gt;port&lt;/code&gt; ハンドルを隠しておき、後でドライバーAPI関数で使用することです。</target>
        </trans-unit>
        <trans-unit id="418f98e4e66687632d887b26d161001270432df1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp.conf.template&lt;/code&gt; file contains all available cross configuration variables and can be used as a template when creating a cross compilation configuration. All &lt;code&gt;&lt;a href=&quot;#Currently-Used-Configuration-Variables&quot;&gt;cross configuration variables&lt;/a&gt;&lt;/code&gt; are also listed at the end of this document. For examples of working cross configurations see the &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp-TileraMDE2.0-tilepro.conf&lt;/code&gt; file and the &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp-x86_64-saf-linux-gnu.conf&lt;/code&gt; file. If the default behavior of a variable is satisfactory, the variable does not need to be set. However, the &lt;code&gt;configure&lt;/code&gt; script will issue a warning when a default value is used. When a variable has been set, no warning will be issued.</source>
          <target state="translated">&lt;code&gt;$ERL_TOP/xcomp/erl-xcomp.conf.template&lt;/code&gt; ファイルには、すべての利用可能なクロス設定変数が含まれており、クロスコンパイルの設定を作成するときにテンプレートとして使用することができます。このドキュメントの最後には、すべての &lt;code&gt;&lt;a href=&quot;#Currently-Used-Configuration-Variables&quot;&gt;cross configuration variables&lt;/a&gt;&lt;/code&gt; もリストされています。機能するクロス構成の例については、 &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp-TileraMDE2.0-tilepro.conf&lt;/code&gt; ファイルと &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp-x86_64-saf-linux-gnu.conf&lt;/code&gt; ファイルを参照してください。変数のデフォルトの動作に問題がなければ、変数を設定する必要はありません。ただし、デフォルト値が使用されている場合、 &lt;code&gt;configure&lt;/code&gt; スクリプトは警告を発行します。変数が設定されている場合、警告は発行されません。</target>
        </trans-unit>
        <trans-unit id="2e8c049d3991b699c878b126ce3c6bdb33cc7a3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;RELDIR&amp;gt;&lt;/code&gt; directory is where new release packets are installed, and where the release handler keeps information about releases. For more information, see the &lt;code&gt;release_handler(3)&lt;/code&gt; manual page in SASL.</source>
          <target state="translated">&lt;code&gt;&amp;lt;RELDIR&amp;gt;&lt;/code&gt; ディレクトリ新しいリリースパケットがインストールされている場所であり、リリースハンドラは、リリースに関する情報を保持しています。詳細については、SASLの &lt;code&gt;release_handler(3)&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="927497bac1e3aacb4e090f1231bc5491dae42268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;++&lt;/code&gt; operator has, somewhat undeservedly, got a bad reputation. It probably has something to do with code like the following, which is the most inefficient way there is to reverse a list:</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt; の演算子は、やや不当、悪い評判を持っています。おそらく次のようなコードと関係があります。これは、リストを逆にするための最も非効率的な方法です。</target>
        </trans-unit>
        <trans-unit id="42130a038f0aadad4f70fd60034fb79e9e360ef9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; operators are defined for line number expressions, provided the operands are compatible. The LineOp operators are also defined for modules, applications, and releases; the operand is implicitly converted to functions. Similarly, the cast operator is defined for the interpretation of the LineOp operators.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; および &lt;code&gt;#&lt;/code&gt; 演算子は、行番号の表現のために定義され、オペランドは互換性が提供されます。 LineOpオペレーターは、モジュール、アプリケーション、およびリリースに対しても定義されています。オペランドは暗黙的に関数に変換されます。同様に、キャスト演算子はLineOp演算子の解釈のために定義されています。</target>
        </trans-unit>
        <trans-unit id="7d867665c4e36dd9997bf46a9f78b7c231955da1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+fna&lt;/code&gt; switch can be followed by &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, or &lt;code&gt;e&lt;/code&gt;. This has effect if the locale settings cause the behavior of &lt;code&gt;+fnu&lt;/code&gt; to be selected; see the description of &lt;code&gt;+fnu&lt;/code&gt; above. If the locale settings cause the behavior of &lt;code&gt;+fnl&lt;/code&gt; to be selected, then &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, or &lt;code&gt;e&lt;/code&gt; have no effect.</source>
          <target state="translated">&lt;code&gt;+fna&lt;/code&gt; スイッチが続くことができる &lt;code&gt;w&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、または &lt;code&gt;e&lt;/code&gt; 。これは、ロケール設定により &lt;code&gt;+fnu&lt;/code&gt; の動作が選択される場合に有効です。上記の &lt;code&gt;+fnu&lt;/code&gt; の説明を参照してください。ロケール設定により &lt;code&gt;+fnl&lt;/code&gt; の動作が選択される場合、 &lt;code&gt;w&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、または &lt;code&gt;e&lt;/code&gt; は効果がありません。</target>
        </trans-unit>
        <trans-unit id="9e6133996f9262b8d90826837351bd3d8efee96b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+fnu&lt;/code&gt; switch can be followed by &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, or &lt;code&gt;e&lt;/code&gt; to control how wrongly encoded filenames are to be reported:</source>
          <target state="translated">&lt;code&gt;+fnu&lt;/code&gt; スイッチが続くことができる &lt;code&gt;w&lt;/code&gt; は、 &lt;code&gt;i&lt;/code&gt; 、または &lt;code&gt;e&lt;/code&gt; 誤って符号化されたファイル名が報告される方法を制御します。</target>
        </trans-unit>
        <trans-unit id="831e6d2347d95f44b19c16835a12096caa3382d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--enable-bootstrap-only&lt;/code&gt; argument to &lt;code&gt;configure&lt;/code&gt; isn't strictly necessary, but will speed things up. It will only run &lt;code&gt;configure&lt;/code&gt; in applications necessary for the bootstrap, and will disable a lot of things not needed by the bootstrap system. If you run &lt;code&gt;configure&lt;/code&gt; without &lt;code&gt;--enable-boostrap-only&lt;/code&gt; you also have to run make as &lt;code&gt;make bootstrap&lt;/code&gt;; otherwise, the whole system will be built.</source>
          <target state="translated">&lt;code&gt;configure&lt;/code&gt; の &lt;code&gt;--enable-bootstrap-only&lt;/code&gt; 引数は厳密には必要ありませんが、スピードアップします。ブートストラップに必要なアプリケーションでのみ &lt;code&gt;configure&lt;/code&gt; を実行し、ブートストラップシステムに不要な多くのことを無効にします。 &lt;code&gt;--enable-boostrap-only&lt;/code&gt; なしで &lt;code&gt;configure&lt;/code&gt; を実行する場合は、make as &lt;code&gt;make bootstrap&lt;/code&gt; も実行する必要があります。それ以外の場合は、システム全体が構築されます。</target>
        </trans-unit>
        <trans-unit id="f9606e2fd218b40d91d81e57470942cf1aec71f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-error()&lt;/code&gt; and &lt;code&gt;-warning()&lt;/code&gt; directives were added in OTP 19.</source>
          <target state="translated">&lt;code&gt;-error()&lt;/code&gt; および &lt;code&gt;-warning()&lt;/code&gt; ディレクティブはOTP 19に添加しました。</target>
        </trans-unit>
        <trans-unit id="c265860ecc1894d7ef2df5fb5a19bf0d362bff43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-on_load()&lt;/code&gt; directive names a function that is to be run automatically when a module is loaded.</source>
          <target state="translated">&lt;code&gt;-on_load()&lt;/code&gt; ディレクティブの名前のモジュールがロードされたときに自動的に実行する機能。</target>
        </trans-unit>
        <trans-unit id="aa13e09e4d341c2108d3357512871ca10a0cc6bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.app&lt;/code&gt; file for release may reside in the &lt;code&gt;ebin&lt;/code&gt;-directory in a development environment but it is encouraged that this is an artifact of the build step. By convention a &lt;code&gt;.app.src&lt;/code&gt; file is used, which resides in the &lt;code&gt;src&lt;/code&gt; directory. This file is nearly identical as the &lt;code&gt;.app&lt;/code&gt; file but certain fields may be replaced during the build step, such as the application version.</source>
          <target state="translated">リリース用の &lt;code&gt;.app&lt;/code&gt; ファイルは、開発環境の &lt;code&gt;ebin&lt;/code&gt; ディレクトリにある場合がありますが、これはビルドステップのアーティファクトであることが推奨されます。慣例により &lt;code&gt;.app.src&lt;/code&gt; ファイルはに存在する、使用されている &lt;code&gt;src&lt;/code&gt; ディレクトリ。このファイルは &lt;code&gt;.app&lt;/code&gt; ファイルとほとんど同じですが、アプリケーションのバージョンなど、特定のフィールドがビルドステップ中に置き換えられる場合があります。</target>
        </trans-unit>
        <trans-unit id="817bfba9b560dd19b99757cc44790bf08dd077b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.app&lt;/code&gt; files</source>
          <target state="translated">&lt;code&gt;.app&lt;/code&gt; ファイル</target>
        </trans-unit>
        <trans-unit id="e7a9a94b1b27ccedaac07d12dcc8d76dbbdc8458" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.appup&lt;/code&gt; file can look as follows:</source>
          <target state="translated">&lt;code&gt;.appup&lt;/code&gt; の次のようにファイルを見ることができます：</target>
        </trans-unit>
        <trans-unit id="0f9944b699387d7c11ea7cd1be3bab23ba4afdef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.appup&lt;/code&gt; file contains one single Erlang term, which defines the instructions used to upgrade or downgrade the application. The file has the following syntax:</source>
          <target state="translated">&lt;code&gt;.appup&lt;/code&gt; のファイルには、アプリケーションをアップグレードまたはダウングレードするために使用される命令を定義する1つのErlangの用語が含まれています。ファイルの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0a4e2f387f9c84aa65d3380a5a44029b602ea3fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.erlang.cookie&lt;/code&gt; file is to contain a line with the same atom. For example, on Linux or UNIX, in the OS shell:</source>
          <target state="translated">&lt;code&gt;.erlang.cookie&lt;/code&gt; のファイルは、同じ原子の行を含むことになります。たとえば、LinuxまたはUNIXでは、OSシェルで次のようにします。</target>
        </trans-unit>
        <trans-unit id="0032fcf48e0da685e59294f0a4f697a2db8dcacb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.funcs&lt;/code&gt; file would look like:</source>
          <target state="translated">&lt;code&gt;.funcs&lt;/code&gt; のファイルには、次のようになります。</target>
        </trans-unit>
        <trans-unit id="14e7547174b37977afa693aeffb001d289cd5a55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hrl&lt;/code&gt; files are generated with &lt;code&gt;snmpc:mib_to_hrl/1&lt;/code&gt;. Include these files in your code as in the following example:</source>
          <target state="translated">&lt;code&gt;.hrl&lt;/code&gt; ファイルが生成されて &lt;code&gt;snmpc:mib_to_hrl/1&lt;/code&gt; 。次の例のように、これらのファイルをコードに含めます。</target>
        </trans-unit>
        <trans-unit id="3f3c52adfe9451ed557d5cb72636a16ce9b8cff5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.rel&lt;/code&gt; file</source>
          <target state="translated">&lt;code&gt;.rel&lt;/code&gt; のファイル</target>
        </trans-unit>
        <trans-unit id="f61412bcc5809a8e7db35485d4bc2ee4c582bd3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.rel&lt;/code&gt; file contains information about the release: its name, version, and which ERTS and application versions it uses.</source>
          <target state="translated">&lt;code&gt;.rel&lt;/code&gt; の名前、バージョン、およびERTSおよびそれが使用するアプリケーションのバージョン：ファイルがリリースに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="fba0dc5cd4e50a75950facea5ebefcde4b2c40d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.rel&lt;/code&gt; file contains one single Erlang term, which is called a &lt;strong&gt;release specification&lt;/strong&gt;. The file has the following syntax:</source>
          <target state="translated">&lt;code&gt;.rel&lt;/code&gt; のファイルが呼ばれる1つのErlangの用語、含まれている&lt;strong&gt;リリースの仕様を&lt;/strong&gt;。ファイルの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9be75095f9fcc28e6742d9c5c6b665ebdc21fd1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.rel&lt;/code&gt; file must also contain &lt;code&gt;kernel&lt;/code&gt;, &lt;code&gt;stdlib&lt;/code&gt;, and &lt;code&gt;sasl&lt;/code&gt;, as these applications are required by &lt;code&gt;ch_app&lt;/code&gt;. The file is called &lt;code&gt;ch_rel-1.rel&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;.rel&lt;/code&gt; のファイルも含まれている必要があり &lt;code&gt;kernel&lt;/code&gt; 、 &lt;code&gt;stdlib&lt;/code&gt; 、および &lt;code&gt;sasl&lt;/code&gt; これらのアプリケーションがで必要とされる、 &lt;code&gt;ch_app&lt;/code&gt; 。ファイルの名前は &lt;code&gt;ch_rel-1.rel&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="13be72d295c9d3a74b0ba266a8b6d753044e4f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.script&lt;/code&gt; file is generated by &lt;code&gt;systools&lt;/code&gt; from a &lt;code&gt;.rel&lt;/code&gt; file and from &lt;code&gt;.app&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;.script&lt;/code&gt; ファイルがで生成される &lt;code&gt;systools&lt;/code&gt; から &lt;code&gt;.rel&lt;/code&gt; のファイルおよびから &lt;code&gt;.app&lt;/code&gt; ファイル。</target>
        </trans-unit>
        <trans-unit id="8952d3b159688281512664b4559315ca46a6b2ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#ErlNifPid&quot;&gt;ErlNifPid&lt;/a&gt;&lt;/code&gt; in which the resolved process id is stored.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ErlNifPid&quot;&gt;ErlNifPid&lt;/a&gt;&lt;/code&gt; 分解プロセスIDが格納されています。</target>
        </trans-unit>
        <trans-unit id="7f0ba8ce42f3241f6f1e8ce8e3ec88bd285be952" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#ErlNifPort&quot;&gt;ErlNifPort&lt;/a&gt;&lt;/code&gt; in which the resolved port id is stored.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ErlNifPort&quot;&gt;ErlNifPort&lt;/a&gt;&lt;/code&gt; 解決ポートIDが格納されています。</target>
        </trans-unit>
        <trans-unit id="9be61e44d94622615ce4101938ee713afd7cdab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;default time warp mode&lt;/a&gt;&lt;/code&gt; has the same behavior as before, and the old API still works. Thus, you are not required to change anything unless you want to. However, &lt;strong&gt;you are strongly encouraged to use the new API&lt;/strong&gt; instead of the old API based on &lt;code&gt;&lt;a href=&quot;erlang#now-0&quot;&gt;erlang:now/0&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;erlang:now/0&lt;/code&gt; is deprecated, as it is and will be a scalability bottleneck.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;default time warp mode&lt;/a&gt;&lt;/code&gt; 前と同じ動作を持っており、古いAPIはまだ動作します。したがって、必要な場合以外は何も変更する必要はありません。ただし、 &lt;code&gt;&lt;a href=&quot;erlang#now-0&quot;&gt;erlang:now/0&lt;/a&gt;&lt;/code&gt; に基づく古いAPIではなく&lt;strong&gt;、新しいAPIを使用することを強くお勧めします&lt;/strong&gt;。 &lt;code&gt;erlang:now/0&lt;/code&gt; は、スケーラビリティのボトルネックになるため、廃止される予定です。</target>
        </trans-unit>
        <trans-unit id="18bf0f08971899dc4f16a1b00f5aad47c098d502" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#State%20Transition%20Actions&quot;&gt;State Transition Action&lt;/a&gt;&lt;/code&gt;&lt;code&gt;postpone&lt;/code&gt; is designed to model selective receives. A selective receive implicitly postpones any not received events, but the &lt;code&gt;postpone&lt;/code&gt; state transition action explicitly postpones one received event.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#State%20Transition%20Actions&quot;&gt;State Transition Action&lt;/a&gt;&lt;/code&gt; &lt;code&gt;postpone&lt;/code&gt; の選択を受けるモデル化するように設計されています。選択的受信は、受信していないイベントを暗黙的に延期しますが、 &lt;code&gt;postpone&lt;/code&gt; 状態遷移アクションは、受信した1つのイベントを明示的に延期します。</target>
        </trans-unit>
        <trans-unit id="2e521122544eb6fa9ab0cd68ed9751d9d365e33f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#Time_Accuracy&quot;&gt;accuracy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Time_Precision&quot;&gt;precision&lt;/a&gt;&lt;/code&gt; of Erlang monotonic time heavily depends on the following:</source>
          <target state="translated">Erlang単調時間の &lt;code&gt;&lt;a href=&quot;#Time_Accuracy&quot;&gt;accuracy&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#Time_Precision&quot;&gt;precision&lt;/a&gt;&lt;/code&gt; は、次のものに大きく依存します。</target>
        </trans-unit>
        <trans-unit id="6f631a391a9754e49e6ee1bde4ff6f90ac52a87f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#enif_consume_timeslice&quot;&gt;enif_consume_timeslice()&lt;/a&gt;&lt;/code&gt; function can be used to inform the runtime system about the length of the NIF call. It is typically always to be used unless the NIF executes very fast.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_consume_timeslice&quot;&gt;enif_consume_timeslice()&lt;/a&gt;&lt;/code&gt; 関数は、NIFのコールの長さについてのランタイムシステムに通知するために使用することができます。NIFが非常に高速に実行されない限り、通常は常に使用されます。</target>
        </trans-unit>
        <trans-unit id="42203200dce5d30a841bfbad273ab03cca628668" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#header&quot;&gt;header()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#packet&quot;&gt;packet()&lt;/a&gt;&lt;/code&gt; records below are defined in diameter.hrl, which can be included as follows.</source>
          <target state="translated">以下の &lt;code&gt;&lt;a href=&quot;#header&quot;&gt;header()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#packet&quot;&gt;packet()&lt;/a&gt;&lt;/code&gt; レコードは、diameter.hrlで定義され、次のように含めることができます。</target>
        </trans-unit>
        <trans-unit id="5443a5673cfdeb62b70cfaa66a1a4d05ea2c10ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#interpret&quot;&gt;Interpret Modules window&lt;/a&gt;&lt;/code&gt; is displayed.</source>
          <target state="translated">「 &lt;code&gt;&lt;a href=&quot;#interpret&quot;&gt;Interpret Modules window&lt;/a&gt;&lt;/code&gt; の解釈」ウィンドウが表示されます。</target>
        </trans-unit>
        <trans-unit id="64917e182873d825bb4118b082544cb5020d55ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#is_tree-1&quot;&gt;is_tree/1&lt;/a&gt;&lt;/code&gt; test is not completely foolproof. For a few special node types (e.g. &lt;code&gt;arity_qualifier&lt;/code&gt;), if such a node occurs in a context where it is not expected, it will be left unchanged as a non-reverted subtree of the result. This can only happen if &lt;code&gt;Tree&lt;/code&gt; does not actually represent legal Erlang code.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_tree-1&quot;&gt;is_tree/1&lt;/a&gt;&lt;/code&gt; 試験は完全にフールプルーフではありません。いくつかの特別なノードタイプ（例： &lt;code&gt;arity_qualifier&lt;/code&gt; ）では、そのようなノードが予期しないコンテキストで発生した場合、結果の元に戻されないサブツリーとして変更されません。これは、 &lt;code&gt;Tree&lt;/code&gt; が実際に有効なErlangコードを表していない場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="8bdddf2d9e89b5afec27570549313f0a00dfb66c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor window&lt;/a&gt;&lt;/code&gt; is displayed with information about all debugged processes, interpreted modules, and selected options. Initially there are normally no debugged processes. First, it must be specified which modules that are to be &lt;strong&gt;debugged&lt;/strong&gt; (also called &lt;strong&gt;interpreted&lt;/strong&gt;). Proceed as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor window&lt;/a&gt;&lt;/code&gt; 、すべてのデバッグプロセスに関する情報、解釈モジュール、および選択したオプションが表示されます。最初は通常、デバッグされるプロセスはありません。まず、&lt;strong&gt;デバッグ&lt;/strong&gt;するモジュール（&lt;strong&gt;インタプリタ&lt;/strong&gt;とも呼ば&lt;strong&gt;れる&lt;/strong&gt;）を指定する必要があります。次のように実行します。</target>
        </trans-unit>
        <trans-unit id="d1371003c4109f45bb7c590d9e6bfcf741d3783e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#monotonic_time-0&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;native&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt; at the time when current Erlang runtime system instance started.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#monotonic_time-0&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;native&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt; 現在Erlangのランタイムシステムインスタンスが起動時に。</target>
        </trans-unit>
        <trans-unit id="c54a199fd4640b0c1f2d1a7d7f234a5d11ebf160" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#regexp_syntax&quot;&gt;regular expression&lt;/a&gt;&lt;/code&gt; syntax and semantics resemble that of Perl.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#regexp_syntax&quot;&gt;regular expression&lt;/a&gt;&lt;/code&gt; 構文と意味論は、Perlのそれに似ています。</target>
        </trans-unit>
        <trans-unit id="7246167f3c09c6525874f60b11ba89db7e2744c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; can insert events using the &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;next_event&lt;/code&gt; and such an event is inserted as the next to present to the state callback. That is, as if it is the oldest incoming event. A dedicated &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;internal&lt;/code&gt; can be used for such events making them impossible to mistake for external events.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 使用してイベントを挿入することができる &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;next_event&lt;/code&gt; 、そのようなイベントは、状態コールバックに存在する次のように挿入されています。つまり、最も古い着信イベントであるかのようです。そのようなイベントには専用の &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;internal&lt;/code&gt; を使用して、外部イベントと間違えることを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="d79b4de0faec73ea8a56c3d33b4728d0d0f13117" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; are executed when entering the first &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; just as for a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;, except that the action &lt;code&gt;postpone&lt;/code&gt; is forced to &lt;code&gt;false&lt;/code&gt; since there is no event to postpone.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; 最初に入るときに実行されている &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; ちょうどのためのよう &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; アクションがあることを除いて、 &lt;code&gt;postpone&lt;/code&gt; を余儀なくされた &lt;code&gt;false&lt;/code&gt; 延期するイベントがないからです。</target>
        </trans-unit>
        <trans-unit id="04249803fd25f8d18a129af7ec7559589758bac1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-host_accepting_client_options&quot;&gt;host_accepting_client_options()&lt;/a&gt;&lt;/code&gt; are associated with this list of keys.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-host_accepting_client_options&quot;&gt;host_accepting_client_options()&lt;/a&gt;&lt;/code&gt; キーのリストに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="0e395a27eee95c6082f8cf61222aaf962540cea2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-server_id&quot;&gt;server_id()&lt;/a&gt;&lt;/code&gt; or an associated &lt;code&gt;&lt;a href=&quot;ct#type-target_name&quot;&gt;ct:target_name()&lt;/a&gt;&lt;/code&gt; must then be used in calls to &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt;connect/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-server_id&quot;&gt;server_id()&lt;/a&gt;&lt;/code&gt; または関連 &lt;code&gt;&lt;a href=&quot;ct#type-target_name&quot;&gt;ct:target_name()&lt;/a&gt;&lt;/code&gt; その後の呼び出しに使用されなければならない &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt;connect/2&lt;/a&gt;&lt;/code&gt; 又は &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3dc033ce6bd037856bac83ebd4f39855340ec51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time_unit()&lt;/a&gt;&lt;/code&gt; type also consist of the following &lt;strong&gt;deprecated&lt;/strong&gt; symbolic time units:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time_unit()&lt;/a&gt;&lt;/code&gt; 型は、以下から成る&lt;strong&gt;非推奨&lt;/strong&gt;シンボリック時間単位：</target>
        </trans-unit>
        <trans-unit id="88d76a69dffe86852b03f6f2771d64a235602ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; is expected to know if reloading is demanded before creating a monitor for loading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; リロードをロードするためのモニターを作成する前に要求されているかどうかを知ることが予想されます。</target>
        </trans-unit>
        <trans-unit id="4ef4e16c6d6043c0d934f6a3edee0c7cc5aa2fe6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt; module provides the main interface for writing test cases. This includes for example, the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt; モジュールは、テストケースを記述するための主要なインターフェイスを提供します。これには、たとえば、次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="24d2428c5253a289420ac3c56a797aad5738f051" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ct#log-1&quot;&gt;log/1,2,3,4,5&lt;/a&gt;&lt;/code&gt; function prints a string to the test case log file. The &lt;code&gt;&lt;a href=&quot;ct#print-1&quot;&gt;print/1,2,3,4&lt;/a&gt;&lt;/code&gt; function prints the string to screen. The &lt;code&gt;&lt;a href=&quot;ct#pal-1&quot;&gt;pal/1,2,3,4&lt;/a&gt;&lt;/code&gt; function prints the same string both to file and screen. The functions are described in module &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct#log-1&quot;&gt;log/1,2,3,4,5&lt;/a&gt;&lt;/code&gt; 機能は、テストケースのログファイルに文字列を出力します。 &lt;code&gt;&lt;a href=&quot;ct#print-1&quot;&gt;print/1,2,3,4&lt;/a&gt;&lt;/code&gt; 機能は、画面に文字列を出力します。 &lt;code&gt;&lt;a href=&quot;ct#pal-1&quot;&gt;pal/1,2,3,4&lt;/a&gt;&lt;/code&gt; 機能は、両方のファイルと画面に同じ文字列を出力します。関数はモジュール &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt; で説明されています。</target>
        </trans-unit>
        <trans-unit id="2225a95d59e4a2a00a916261ffc2ac6e972545a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; program can be used for running tests from the OS command line, for example, as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; の以下のようなプログラムは、例えば、OSのコマンドラインからテストを実行するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="45351661ad4006c4669c2ebdd26490749b02b241" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;erl_format#erl_match&quot;&gt;erl_format:erl_match&lt;/a&gt;&lt;/code&gt; function performs pattern matching. It takes a pattern and a term and tries to match them. As a side effect any unbound variables in the pattern will be bound. In the following example, a pattern is created with a variable &lt;code&gt;Age&lt;/code&gt;, which is included at two positions in the tuple. The pattern match is performed as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erl_format#erl_match&quot;&gt;erl_format:erl_match&lt;/a&gt;&lt;/code&gt; 機能を行うパターンマッチング。それはパターンと用語を取り、それらを一致させようとします。副作用として、パターン内のバインドされていない変数がバインドされます。次の例では、タプルの2つの位置に含まれる変数 &lt;code&gt;Age&lt;/code&gt; を使用してパターンが作成されます。パターン照合は次のように実行されます。</target>
        </trans-unit>
        <trans-unit id="5d913aee0ec20f5c99548c0d67120c8b7390405c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt;erlang:port_control/3&lt;/a&gt;&lt;/code&gt; callback, which is used a lot in this implementation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt;erlang:port_control/3&lt;/a&gt;&lt;/code&gt; この実装で多く使用されるコールバック、。</target>
        </trans-unit>
        <trans-unit id="e04d20c0a21a342accdbeea00bdc89554c9bbc2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;SSH Connection Protocol&lt;/a&gt;&lt;/code&gt; is used by clients and servers, that is, SSH channels, to communicate over the SSH connection. The API functions in this module send SSH Connection Protocol events, which are received as messages by the remote channel. If the receiving channel is an Erlang process, the messages have the format &lt;code&gt;{ssh_cm, connection_ref(), ssh_event_msg()}&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; behavior is used to implement the channel process, these messages are handled by &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt;handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;SSH Connection Protocol&lt;/a&gt;&lt;/code&gt; SSH接続を介して通信するために、クライアントとサーバであり、SSHチャネルで使用されています。このモジュールのAPI関数は、リモートチャネルによってメッセージとして受信されるSSH接続プロトコルイベントを送信します。受信チャネルがErlangプロセスの場合、メッセージの形式は &lt;code&gt;{ssh_cm, connection_ref(), ssh_event_msg()}&lt;/code&gt; です。 &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; 動作を使用してチャネルプロセスを実装する場合、これらのメッセージは &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt;handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt; によって処理されます。</target>
        </trans-unit>
        <trans-unit id="29f892246d7df69546254cbfcc798654f3646997" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6125&quot;&gt;RFC 6125&lt;/a&gt;&lt;/code&gt; defines</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6125&quot;&gt;RFC 6125&lt;/a&gt;&lt;/code&gt; 定義</target>
        </trans-unit>
        <trans-unit id="7dcb6a1e5d8b3f03deff03d3241d42eac28f4c9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; module makes it possible to map different parts of the host file system into the document tree, that is, creates aliases and redirections.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; のモジュールは、あるドキュメントツリーの中にホストファイルシステムのさまざまな部分をマッピングすることが可能となるエイリアスとリダイレクトを作成します。</target>
        </trans-unit>
        <trans-unit id="fcc4b78316a4143698c35ef4043e086c3252f889" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;mod_auth&quot;&gt;mod_auth(3)&lt;/a&gt;&lt;/code&gt; module provides for basic user authentication using textual files, Dets databases as well as Mnesia databases.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;mod_auth&quot;&gt;mod_auth(3)&lt;/a&gt;&lt;/code&gt; モジュールは、テキストファイル、DETSデータベースだけでなく、Mnesiaデータベースを使用して基本的なユーザー認証を提供します。</target>
        </trans-unit>
        <trans-unit id="461a1eaddbc542451f83c2ca184fe0b61bd2923e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;mod_esi&quot;&gt;mod_esi(3)&lt;/a&gt;&lt;/code&gt; module implements the Erlang Server Interface (ESI) providing a tight and efficient interface to the execution of Erlang functions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;mod_esi&quot;&gt;mod_esi(3)&lt;/a&gt;&lt;/code&gt; モジュールの実装アーラン・サーバ・インタフェース（ESI）はErlangの機能の実行にタイトかつ効率的なインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="451822a0390939c5b7aa871766fbf59707a840eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;mod_security&quot;&gt;mod_security&lt;/a&gt;&lt;/code&gt; module serves as a filter for authenticated requests handled in &lt;code&gt;&lt;a href=&quot;mod_auth&quot;&gt;mod_auth(3)&lt;/a&gt;&lt;/code&gt;. It provides a possibility to restrict users from access for a specified amount of time if they fail to authenticate several times. It logs failed authentication as well as blocking of users, and it calls a configurable callback module when the events occur.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;mod_security&quot;&gt;mod_security&lt;/a&gt;&lt;/code&gt; のモジュールはで処理認証要求のためのフィルタとして機能する &lt;code&gt;&lt;a href=&quot;mod_auth&quot;&gt;mod_auth(3)&lt;/a&gt;&lt;/code&gt; 。これは、ユーザーが数回認証に失敗した場合に、指定された時間の間ユーザーのアクセスを制限する可能性を提供します。失敗した認証とユーザーのブロックをログに記録し、イベントが発生すると構成可能なコールバックモジュールを呼び出します。</target>
        </trans-unit>
        <trans-unit id="41608b3a764923c262561e0c2d97e667f71e82d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_runprogram&lt;/a&gt;&lt;/code&gt; for an overview of available start flags (as most flags have a corresponding configuration term)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_runprogram&lt;/a&gt;&lt;/code&gt; 利用可能なスタートフラグの概要について（最もフラグは、対応する構成用語を持っているように）</target>
        </trans-unit>
        <trans-unit id="8c2bdaafc19f8eda6fa7e095397c6b638b7731c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; module can be used for debugging a supervisor bridge.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; モジュールには、スーパバイザ・ブリッジをデバッグするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="1915b4761876d96adb7cfdaf20279417ba58c6b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;tftp#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt; function starts a daemon process listening for UDP packets on a port. When it receives a request for read or write, it spawns a temporary server process handling the transfer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;tftp#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt; の機能は、ポート上のUDPパケットのデーモンプロセスのリスニングを開始します。読み取りまたは書き込みの要求を受信すると、転送を処理する一時的なサーバープロセスを生成します。</target>
        </trans-unit>
        <trans-unit id="8e817126baaf83dd2177ff4d3961b1bf92117ec3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="bac6d07dd79fabf515998a51c2c8ccd52cb9e6e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;time_correction#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="11b934f9948e4845a2b33851b5932f94d59f1d45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;time_correction#Single_Time_Warp_Mode&quot;&gt;single time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Single_Time_Warp_Mode&quot;&gt;single time warp mode&lt;/a&gt;&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="842d1fd61ccfd8c7f0a3b2ea51238f75d1a39f94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;users_guide&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; has examples and a &lt;code&gt;&lt;a href=&quot;using_ssh&quot;&gt;Getting Started&lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;users_guide&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 例と持って &lt;code&gt;&lt;a href=&quot;using_ssh&quot;&gt;Getting Started&lt;/a&gt;&lt;/code&gt; セクションを。</target>
        </trans-unit>
        <trans-unit id="7213ba1d558f14b69b4e8a3edef214d04ef9e98a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?Q&lt;/code&gt; macros turn the quoted code fragments into ASTs, and lifts metavariables such as &lt;code&gt;_@Tuple&lt;/code&gt; and &lt;code&gt;_@Number&lt;/code&gt; to the level of your Erlang code, so you can use the corresponding Erlang variables &lt;code&gt;Tuple&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt; directly. This is the most straightforward way to use Merl, and in many cases it's all you need.</source>
          <target state="translated">&lt;code&gt;?Q&lt;/code&gt; のマクロはASTのに引用されたコードフラグメントを回し、そしてなどのメタ変数リフト &lt;code&gt;_@Tuple&lt;/code&gt; と &lt;code&gt;_@Number&lt;/code&gt; 使用すると、対応するErlangの変数を使用することができますので、あなたのErlangコードのレベルに &lt;code&gt;Tuple&lt;/code&gt; と &lt;code&gt;Number&lt;/code&gt; 直接。これはMerlを使用する最も簡単な方法であり、多くの場合それで十分です。</target>
        </trans-unit>
        <trans-unit id="15c579f9adfb6704c3bcff309334cae348b5e5b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?assert(Expression)&lt;/code&gt; macro will evaluate &lt;code&gt;Expression&lt;/code&gt;, and if that does not evaluate to &lt;code&gt;true&lt;/code&gt;, it will throw an exception; otherwise it just returns &lt;code&gt;ok&lt;/code&gt;. In the above example, the test will thus fail if the call to &lt;code&gt;length&lt;/code&gt; does not return 3.</source>
          <target state="translated">&lt;code&gt;?assert(Expression)&lt;/code&gt; マクロは評価する &lt;code&gt;Expression&lt;/code&gt; し、それが評価されない場合は &lt;code&gt;true&lt;/code&gt; 、それは例外がスローされます。それ以外の場合は、単に &lt;code&gt;ok&lt;/code&gt; を返します。したがって、上記の例では、 &lt;code&gt;length&lt;/code&gt; の呼び出しが3を返さない場合、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="824fe9ddd06f6c4a1a05c0b0fcb9265f7a7b2017" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ASN.1&lt;/code&gt; application provides the following two separate user interfaces:</source>
          <target state="translated">&lt;code&gt;ASN.1&lt;/code&gt; のアプリケーションは、次の2つの別個のユーザインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="ad1896e2fd3770f39ede02112fb63bbac81b7df1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Address&lt;/code&gt; field is the second element.</source>
          <target state="translated">&lt;code&gt;Address&lt;/code&gt; フィールドは、第二の要素です。</target>
        </trans-unit>
        <trans-unit id="e284c989131372b49e03051b62849870dd521425" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BIT STRING&lt;/code&gt; type is decoded to &quot;compact notation&quot;. &lt;strong&gt;This option is not recommended for new code.&lt;/strong&gt; This option cannot be combined with the option &lt;code&gt;maps&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BIT STRING&lt;/code&gt; タイプが「コンパクト表記」に復号されます。&lt;strong&gt;このオプションは、新しいコードには推奨されません。&lt;/strong&gt;このオプションをオプション &lt;code&gt;maps&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="d727373c971108a708085cfa309ebdb4fa5bc28b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BIT STRING&lt;/code&gt; type is decoded to the legacy format, that is, a list of zeroes and ones. &lt;strong&gt;This option is not recommended for new code.&lt;/strong&gt; This option cannot be combined with the option &lt;code&gt;maps&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BIT STRING&lt;/code&gt; 型は、0と1のリストであるレガシー形式にデコードされます。&lt;strong&gt;このオプションは、新しいコードには推奨されません。&lt;/strong&gt;このオプションをオプション &lt;code&gt;maps&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="3c84e077a6dbf3c771cfd255a8a9895e6702d3a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bitstring&lt;/code&gt; variable can consist of any number of bits, for example, 0, 1, 8, 11, 17, 42, and so on. This is because the default &lt;code&gt;unit&lt;/code&gt; for bitstrings is 1.</source>
          <target state="translated">&lt;code&gt;Bitstring&lt;/code&gt; 変数は、0、1、8、11、17、42などの任意の数のビットで構成できます。これは、ビット文字列のデフォルトの &lt;code&gt;unit&lt;/code&gt; が1であるためです。</target>
        </trans-unit>
        <trans-unit id="94a1488efe62c17d8ba98c01afd1b232f7321a33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Block&lt;/code&gt; argument indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Block&lt;/code&gt; ログには、変換時にブロックされる必要がある場合、引数を示します。これは、大きなログを変換するときに役立ちます（そうしないと、変換中にログが折り返される可能性があります）。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4ab5f211e8f18fd1c4ca859d11a5d3fcd218d631" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Block&lt;/code&gt; option indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">[ &lt;code&gt;Block&lt;/code&gt; ]オプションは、変換中にログをブロックする必要があるかどうかを示します。これは、大きなログを変換するときに役立ちます（そうしないと、変換中にログが折り返される可能性があります）。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2acfbefe2ee37310ba387213e5e15aa6901a988c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Callback&lt;/code&gt; module should contain hook functions for all tags present in the data structure. A hook function must have the following format:</source>
          <target state="translated">&lt;code&gt;Callback&lt;/code&gt; モジュールは、データ構造内に存在するすべてのタグのためにフック関数を含める必要があります。フック関数の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="883390db9451e13b3d5a5f85d744ec9ca06a2b24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CallbackMode&lt;/code&gt; is either just &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback_mode()&lt;/a&gt;&lt;/code&gt; or a list containing &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback_mode()&lt;/a&gt;&lt;/code&gt; and possibly the atom &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CallbackMode&lt;/code&gt; はどちらかだけである &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback_mode()&lt;/a&gt;&lt;/code&gt; 又は含むリスト &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback_mode()&lt;/a&gt;&lt;/code&gt; およびおそらく原子 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7a580d51d45e0183e4b31ffec1224002d11cfbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CharSpec&lt;/code&gt;&lt;code&gt;eof&lt;/code&gt; signals end of file. &lt;code&gt;LeftOverChars&lt;/code&gt; then takes the value &lt;code&gt;eof&lt;/code&gt; as well.</source>
          <target state="translated">&lt;code&gt;CharSpec&lt;/code&gt; &lt;code&gt;eof&lt;/code&gt; 信号は、ファイルの末尾。次に、 &lt;code&gt;LeftOverChars&lt;/code&gt; は &lt;code&gt;eof&lt;/code&gt; の値も受け取ります。</target>
        </trans-unit>
        <trans-unit id="64d980b4c7c9584d2e8b4e055ab6694f99c89599" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChildSpecs&lt;/code&gt; variable in the return value from &lt;code&gt;init/1&lt;/code&gt; is a list of &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specifications&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init/1&lt;/code&gt; からの戻り値の &lt;code&gt;ChildSpecs&lt;/code&gt; 変数は、 &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specifications&lt;/a&gt;&lt;/code&gt; リストです。</target>
        </trans-unit>
        <trans-unit id="e5232c85e790e4f73652dc642ce50e6888594555" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChunkSize&lt;/code&gt; defines the size of the &lt;code&gt;PlainBin&lt;/code&gt;s that &lt;code&gt;EncodeFun&lt;/code&gt; is applied to. If the &lt;code&gt;ChunkSize&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, the size of the &lt;code&gt;PlainBin&lt;/code&gt;s varies, because this is intended for stream crypto, whereas a fixed &lt;code&gt;ChunkSize&lt;/code&gt; is intended for block crypto. &lt;code&gt;ChunkSize&lt;/code&gt;s can be changed in the return from the &lt;code&gt;EncryptFun&lt;/code&gt; or &lt;code&gt;DecryptFun&lt;/code&gt;. The value can be changed between &lt;code&gt;pos_integer()&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ChunkSize&lt;/code&gt; サイズ定義 &lt;code&gt;PlainBin&lt;/code&gt; のその &lt;code&gt;EncodeFun&lt;/code&gt; に適用されます。場合 &lt;code&gt;ChunkSize&lt;/code&gt; され &lt;code&gt;undefined&lt;/code&gt; のサイズ &lt;code&gt;PlainBin&lt;/code&gt; これは固定され、一方、ストリーム暗号のために意図されているので、S変化し、 &lt;code&gt;ChunkSize&lt;/code&gt; ブロック暗号のために意図されています。 &lt;code&gt;ChunkSize&lt;/code&gt; は、 &lt;code&gt;EncryptFun&lt;/code&gt; または &lt;code&gt;DecryptFun&lt;/code&gt; からの戻りで変更できます。値は &lt;code&gt;pos_integer()&lt;/code&gt; と &lt;code&gt;undefined&lt;/code&gt; の間で変更できます。</target>
        </trans-unit>
        <trans-unit id="e8a7a9966f0b85d64cc4feece108959a21b830fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collector&lt;/code&gt; API does also allow you to save the collected &lt;code&gt;Events&lt;/code&gt; to file and later load them in a later session.</source>
          <target state="translated">&lt;code&gt;Collector&lt;/code&gt; APIはまた、あなたが収集し保存することができない &lt;code&gt;Events&lt;/code&gt; ファイルへの以降後のセッションでそれらをロードします。</target>
        </trans-unit>
        <trans-unit id="fceb8c2c1f65a97284385a3f23405d68267725fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collector&lt;/code&gt; automatically registers itself to listen for trace &lt;code&gt;Events&lt;/code&gt;, so all you have to do is enable them.</source>
          <target state="translated">&lt;code&gt;Collector&lt;/code&gt; 自動的にトレースをリッスンするために自分自身を登録 &lt;code&gt;Events&lt;/code&gt; あなたがしなければならないすべてはそれらを有効であるので、。</target>
        </trans-unit>
        <trans-unit id="ec20677889045987c82a0d9f6c4d053fcf85822c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collector&lt;/code&gt; manages a key/value based dictionary, where the filters are stored. Updates of the dictionary is propagated to all subscribing processes. When a &lt;code&gt;Viewer&lt;/code&gt; is started it is registered as a subscriber of dictionary updates.</source>
          <target state="translated">&lt;code&gt;Collector&lt;/code&gt; フィルタが保存されているキー/値ベースの辞書を管理します。辞書の更新は、すべてのサブスクライブプロセスに伝播されます。ときに &lt;code&gt;Viewer&lt;/code&gt; 起動され、それは、辞書更新の加入者として登録されています。</target>
        </trans-unit>
        <trans-unit id="e368c10bff22300d3fab811f6f50a4674a69667b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; Framework Log page includes links to the Pre- and Post Test I/O Log. In this log, &lt;code&gt;Common Test&lt;/code&gt; saves printouts made with &lt;code&gt;ct:log/1,2,3,4,5&lt;/code&gt; and &lt;code&gt;ct:pal/1,2,3,4,5&lt;/code&gt;, as well as captured system error- and progress reports, which take place before, and after, the test run. Examples of this are printouts from a CT hook init- or terminate function, or progress reports generated when an OTP application is started from a CT hook init function. Another example is an error report generated because of a failure when an external application is stopped from a CT hook terminate function. All information in these examples ends up in the Pre- and Post Test I/O Log. For more information on how to synchronize test runs with external user applications, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#synchronizing&quot;&gt;Synchronizing&lt;/a&gt;&lt;/code&gt; in section Common Test Hooks.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークログページには、前後のテストI / Oログへのリンクが含まれています。このログでは、 &lt;code&gt;Common Test&lt;/code&gt; は &lt;code&gt;ct:log/1,2,3,4,5&lt;/code&gt; および &lt;code&gt;ct:pal/1,2,3,4,5&lt;/code&gt; で作成された印刷出力を保存します、およびキャプチャされたシステムエラーと進行状況のレポートは、テスト実行の前と後に行われます。この例としては、CTフックの初期化関数または終了関数からの出力、またはOTPアプリケーションがCTフックの初期化関数から開始されたときに生成される進行状況レポートがあります。別の例は、外部アプリケーションがCTフック終了関数から停止したときに障害が原因で生成されたエラーレポートです。これらの例のすべての情報は、テスト前とテスト後のI / Oログに記録されます。テスト実行を外部ユーザーアプリケーションと同期する方法の詳細については、「一般的なテストフック」の「 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#synchronizing&quot;&gt;Synchronizing&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2b15f94344ef9977a91750baa9dddf1dbad0746d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; Master API is exported by module &lt;code&gt;&lt;a href=&quot;ct_master&quot;&gt;ct_master&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; マスターAPIはモジュールによってエクスポートされ &lt;code&gt;&lt;a href=&quot;ct_master&quot;&gt;ct_master&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1eb6fe3660c4d65491500f6426215f629639619" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; Master server runs on one dedicated Erlang node and uses distributed Erlang to communicate with any number of &lt;code&gt;Common Test&lt;/code&gt; test nodes, each hosting a regular &lt;code&gt;Common Test&lt;/code&gt; server. Test specifications are used as input to specify what to test on which test nodes, using what configuration.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; マスターサーバーつの専用アーラン・ノード上で実行され、用途は任意の数と通信するアーラン分散 &lt;code&gt;Common Test&lt;/code&gt; テストノード、各ホスティング正規 &lt;code&gt;Common Test&lt;/code&gt; サーバー。テスト仕様は、どの構成を使用して、どのテストノードで何をテストするかを指定するための入力として使用されます。</target>
        </trans-unit>
        <trans-unit id="d910e14beb83938480f0c5db0900211c5bc5ac30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; Master server writes progress information to HTML log files similarly to the regular &lt;code&gt;Common Test&lt;/code&gt; server. The logs contain test statistics and links to the log files written by each independent &lt;code&gt;Common Test&lt;/code&gt; server.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; マスターサーバーは、同様に、通常のHTMLにログファイルへの進捗情報を書き込み &lt;code&gt;Common Test&lt;/code&gt; サーバー。ログには、テストの統計情報と、独立した各 &lt;code&gt;Common Test&lt;/code&gt; サーバーによって書き込まれたログファイルへのリンクが含まれています。</target>
        </trans-unit>
        <trans-unit id="4e124139583e4b5d8918f07bb2c0c03bd8d6c703" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; application also includes other modules named &lt;code&gt;ct_&amp;lt;component&amp;gt;&lt;/code&gt;, which provide various support, mainly simplified use of communication protocols such as RPC, SNMP, FTP, Telnet, and others.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; アプリケーションは、名前の他のモジュール含ま &lt;code&gt;ct_&amp;lt;component&amp;gt;&lt;/code&gt; 様々なサポートを提供し、主にRPC、SNMP、FTP、Telnet、およびその他のような通信プロトコルの使用を簡素化します。</target>
        </trans-unit>
        <trans-unit id="03a84fce685f88578ce41de6a729049cb8fac0fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; application is installed with the Erlang/OTP system. No extra installation step is required to start using &lt;code&gt;Common Test&lt;/code&gt; through the &lt;code&gt;ct_run&lt;/code&gt; executable program, and/or the interface functions in the &lt;code&gt;ct&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; アプリケーションはアーラン/ OTPシステムがインストールされています。 &lt;code&gt;ct_run&lt;/code&gt; 実行可能プログラムおよび/または &lt;code&gt;ct&lt;/code&gt; モジュールのインターフェイス関数を介して &lt;code&gt;Common Test&lt;/code&gt; の使用を開始するために、追加のインストール手順は必要ありません。</target>
        </trans-unit>
        <trans-unit id="78a22725d0c7f0f676d4ba2a90661e795ebb56c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; framework is a tool that supports implementation and automated execution of test cases to any types of target systems. &lt;code&gt;Common Test&lt;/code&gt; is the main tool being used in all testing- and verification activities that are part of Erlang/OTP system development and maintenance.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークは、ターゲットシステムのいずれかのタイプに実装し、テストケースの自動化された実行をサポートするツールです。 &lt;code&gt;Common Test&lt;/code&gt; は、Erlang / OTPシステムの開発と保守の一部であるすべてのテストおよび検証アクティビティで使用される主要なツールです。</target>
        </trans-unit>
        <trans-unit id="18e9917f7eb0c975fe2d0bf461322b555cc56962" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; framework is an environment for implementing and performing automatic and semi-automatic execution of test cases.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークは、テストケースの自動および半自動実行を実装し、実行するための環境です。</target>
        </trans-unit>
        <trans-unit id="c32a30ee7b6005326d0a472ffa1a54f5ce95df96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; framework provides a high-level operator interface for testing, providing the following features:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークは、次の機能を提供し、テストのための高レベルのオペレータインタフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="ad9b65cad13beffef2e82d575de6699dcf88a08a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; test server requires that the test suite defines and exports the following mandatory or optional callback functions:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; テストサーバが必要とするテストスイートが定義およびエクスポート次の必須またはオプションのコールバック関数：</target>
        </trans-unit>
        <trans-unit id="b3f5974325a1f6adb2e7a53fd6b80b396429c849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Company&lt;/code&gt; database is now initialized and contains data.</source>
          <target state="translated">&lt;code&gt;Company&lt;/code&gt; データベースが初期化され、データが含まれています。</target>
        </trans-unit>
        <trans-unit id="84399fbfc3c32ddc0958865c1bc7e66e07f291b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Company&lt;/code&gt; database, introduced in &lt;code&gt;&lt;a href=&quot;mnesia_chap2#getting_started&quot;&gt;Getting Started&lt;/a&gt;&lt;/code&gt;, has three tables that store records (&lt;code&gt;employee&lt;/code&gt;, &lt;code&gt;dept&lt;/code&gt;, &lt;code&gt;project&lt;/code&gt;), and three tables that store relationships (&lt;code&gt;manager&lt;/code&gt;, &lt;code&gt;at_dep&lt;/code&gt;, &lt;code&gt;in_proj&lt;/code&gt;). This is a normalized data model, which has some advantages over a non-normalized data model.</source>
          <target state="translated">&lt;code&gt;Company&lt;/code&gt; で導入されたデータベース、 &lt;code&gt;&lt;a href=&quot;mnesia_chap2#getting_started&quot;&gt;Getting Started&lt;/a&gt;&lt;/code&gt; 、3つのテーブルを持っている店レコード（ &lt;code&gt;employee&lt;/code&gt; 、 &lt;code&gt;dept&lt;/code&gt; 、 &lt;code&gt;project&lt;/code&gt; ）、および3つのテーブルその店舗の関係（ &lt;code&gt;manager&lt;/code&gt; 、 &lt;code&gt;at_dep&lt;/code&gt; 、 &lt;code&gt;in_proj&lt;/code&gt; ）。これは正規化されたデータモデルであり、非正規化されたデータモデルに比べていくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="5b4167561d4c9786e75acf722fa5255d76e1f375" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ControlMessage&lt;/code&gt; is a tuple, where the first element indicates which distributed operation it encodes:</source>
          <target state="translated">&lt;code&gt;ControlMessage&lt;/code&gt; は、最初の要素は、それがコード分散れる動作を示しタプルです。</target>
        </trans-unit>
        <trans-unit id="b53e02a747463b517e8ec15e14ceddfb049c6d05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DAT&lt;/code&gt; files must always be opened with option &lt;code&gt;{repair, false}&lt;/code&gt;. This ensures that these files are not automatically repaired. Without this option, the database can become inconsistent, because &lt;code&gt;Mnesia&lt;/code&gt; can believe that the files were properly closed. For information about configuration parameter &lt;code&gt;auto_repair&lt;/code&gt;, see the Reference Manual.</source>
          <target state="translated">&lt;code&gt;DAT&lt;/code&gt; のファイルは常にオプションでオープンする必要があります &lt;code&gt;{repair, false}&lt;/code&gt; 。これにより、これらのファイルが自動的に修復されなくなります。このオプションがないと、 &lt;code&gt;Mnesia&lt;/code&gt; はファイルが適切に閉じられたと信じることができるため、データベースが不整合になる可能性があります。設定パラメータ &lt;code&gt;auto_repair&lt;/code&gt; の詳細については、リファレンスマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="5873af1928aed9c59ec2db4bf69bcbdd1c33d63f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Data&lt;/code&gt; received can be a &lt;code&gt;binary()&lt;/code&gt; or a &lt;code&gt;list()&lt;/code&gt; of bytes (integers in the range 0 through 255) depending on the socket mode, or an SCTP event.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; 受信であることができる &lt;code&gt;binary()&lt;/code&gt; または &lt;code&gt;list()&lt;/code&gt; ソケット・モード、またはSCTPイベントに応じて（範囲0〜255の整数）バイトを。</target>
        </trans-unit>
        <trans-unit id="69f5b6911daa714868434e1a90189319187674c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DbgExtra&lt;/code&gt; options are described in section &lt;code&gt;&lt;a href=&quot;#debug_flags&quot;&gt;DbgExtra Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DbgExtra&lt;/code&gt; のオプションは、セクションに記載されている &lt;code&gt;&lt;a href=&quot;#debug_flags&quot;&gt;DbgExtra Options&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16f5677b6ef24617d1e07a7aa94edc055731eaee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DiscoHandler&lt;/code&gt; module is used during the discovery process. See &lt;code&gt;&lt;a href=&quot;snmpa_discovery_handler&quot;&gt;discovery handler&lt;/a&gt;&lt;/code&gt; for more info.</source>
          <target state="translated">&lt;code&gt;DiscoHandler&lt;/code&gt; モジュールが発見プロセス中に使用されます。詳細については、 &lt;code&gt;&lt;a href=&quot;snmpa_discovery_handler&quot;&gt;discovery handler&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="510046e751218ed5f95a1059673c4d8fbf2a7fa0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dst&lt;/code&gt; map is updated with new channel values. The syntax for updating an existing key with a new value is with the &lt;code&gt;:=&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;Dst&lt;/code&gt; 接続マップは、新しいチャネルの値で更新されます。既存のキーを新しい値で更新する構文は、 &lt;code&gt;:=&lt;/code&gt; 演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="d0e5af70acd62ed71f0140803a094eed25236db0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; term type is used for passing a term encoded with the &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt;, that is, a term that has been encoded by &lt;code&gt;&lt;a href=&quot;erlang#term_to_binary-2&quot;&gt;erlang:term_to_binary&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;erl_interface:ei(3)&lt;/code&gt;, and so on. For example, if &lt;code&gt;binp&lt;/code&gt; is a pointer to an &lt;code&gt;ErlDrvBinary&lt;/code&gt; that contains term &lt;code&gt;{17, 4711}&lt;/code&gt; encoded with the &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt;, and you want to wrap it in a two-tuple with the tag &lt;code&gt;my_tag&lt;/code&gt;, that is, &lt;code&gt;{my_tag, {17, 4711}}&lt;/code&gt;, you can do as follows:</source>
          <target state="translated">&lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; の用語のタイプを用いて符号化された用語通過させるために使用される &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt; で符号化された用語であり、 &lt;code&gt;&lt;a href=&quot;erlang#term_to_binary-2&quot;&gt;erlang:term_to_binary&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;erl_interface:ei(3)&lt;/code&gt; など。たとえば、 &lt;code&gt;binp&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt; でエンコードされた用語 &lt;code&gt;{17, 4711}&lt;/code&gt; &lt;code&gt;ErlDrvBinary&lt;/code&gt; を含むErlDrvBinaryへのポインターであり、それをタグ &lt;code&gt;my_tag&lt;/code&gt; で2タプルにラップする場合、つまり &lt;code&gt;{my_tag, {17, 4711}}&lt;/code&gt; 、次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="8c0ac01302ce56a5538e783afbe86c0e3ca92aac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; term is a way to construct strings. It works differently from how &lt;code&gt;ERL_DRV_STRING&lt;/code&gt; works. &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; builds a string list in reverse order (as opposed to how &lt;code&gt;ERL_DRV_LIST&lt;/code&gt; works), concatenating the strings added to a list. The tail must be specified before &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; の用語は、文字列を構築する方法です。 &lt;code&gt;ERL_DRV_STRING&lt;/code&gt; の動作とは異なる動作をします。 &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; は、（ &lt;code&gt;ERL_DRV_LIST&lt;/code&gt; の動作とは対照的に）文字列リストを逆の順序で作成し、リストに追加された文字列を連結します。テールは &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; の前に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7fe5603a0b688982ee095c5b6eb8b3abf301f57c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERL_DRV_UINT&lt;/code&gt;, &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt;, and &lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; term types were introduced in ERTS 5.6.</source>
          <target state="translated">&lt;code&gt;ERL_DRV_UINT&lt;/code&gt; 、 &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt; 、および &lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; の用語の種類がERTS 5.6で導入されました。</target>
        </trans-unit>
        <trans-unit id="78c7a39595ca5fe9252d32999a603c6e910dd570" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERL_FLAGS&lt;/code&gt; environment variable can be used to store the complicated parameters in:</source>
          <target state="translated">&lt;code&gt;ERL_FLAGS&lt;/code&gt; の環境変数が複雑にパラメータを格納するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="0a3584a359b0427b176ceaff9674304e574ffce0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Emakefile&lt;/code&gt; (if it exists) in the current directory is searched for compiler options for each module. If a given module does not exist in &lt;code&gt;Emakefile&lt;/code&gt; or if &lt;code&gt;Emakefile&lt;/code&gt; does not exist, the module is still compiled.</source>
          <target state="translated">&lt;code&gt;Emakefile&lt;/code&gt; （存在する場合）は、現在のディレクトリには、各モジュールのコンパイラオプションを検索します。特定のモジュールが &lt;code&gt;Emakefile&lt;/code&gt; に存在しない場合、または &lt;code&gt;Emakefile&lt;/code&gt; が存在しない場合でも、モジュールはコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="da28c7ffe618c58fd36df47a840c22abe8ebdbed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; says how the characters in the request are represented. We want to store the characters as lists in the ETS table, so we convert them to lists using function &lt;code&gt;unicode:characters_to_list/2&lt;/code&gt;. The conversion function conveniently accepts the encoding types &lt;code&gt;unicode&lt;/code&gt; and &lt;code&gt;latin1&lt;/code&gt;, so we can use &lt;code&gt;Encoding&lt;/code&gt; directly.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 、要求内の文字を表現する方法を述べています。文字をリストとしてETSテーブルに格納したいので、関数 &lt;code&gt;unicode:characters_to_list/2&lt;/code&gt; を使用してそれらをリストに変換します。変換関数は、エンコーディングタイプ &lt;code&gt;unicode&lt;/code&gt; および &lt;code&gt;latin1&lt;/code&gt; を簡単に受け入れるため、 &lt;code&gt;Encoding&lt;/code&gt; を直接使用できます。</target>
        </trans-unit>
        <trans-unit id="e3c694d3baa325d31ca5ef434295459f7fd84d35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErlDrvBinary&lt;/code&gt; structure is a binary, as sent between the emulator and the driver. All binaries are reference counted; when &lt;code&gt;driver_binary_free&lt;/code&gt; is called, the reference count is decremented, when it reaches zero, the binary is deallocated. &lt;code&gt;orig_size&lt;/code&gt; is the binary size and &lt;code&gt;orig_bytes&lt;/code&gt; is the buffer. &lt;code&gt;ErlDrvBinary&lt;/code&gt; has not a fixed size, its size is &lt;code&gt;orig_size + 2 * sizeof(int)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ErlDrvBinary&lt;/code&gt; エミュレータとドライバ間で送信されるような構造は、バイナリです。すべてのバイナリは参照カウントされます。場合 &lt;code&gt;driver_binary_free&lt;/code&gt; が呼び出され、参照カウントは、それがゼロに達したときに、バイナリが解放され、デクリメントされます。 &lt;code&gt;orig_size&lt;/code&gt; はバイナリサイズで、 &lt;code&gt;orig_bytes&lt;/code&gt; はバッファです。 &lt;code&gt;ErlDrvBinary&lt;/code&gt; には固定サイズがなく、サイズは &lt;code&gt;orig_size + 2 * sizeof(int)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c86b87f3b0b95eba095182c55f0fcc45cc6647fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErlDrvNowData&lt;/code&gt; structure holds a time stamp consisting of three values measured from some arbitrary point in the past. The three structure members are:</source>
          <target state="translated">&lt;code&gt;ErlDrvNowData&lt;/code&gt; の構造は、過去のいくつかの任意の点から測定された3つの値からなるタイムスタンプを保持します。3つの構造体メンバーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="89f846aa2a9d3bbb835eaa5c58e3ac257c0f2247" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErlDrvSysInfo&lt;/code&gt; structure is used for storage of information about the Erlang runtime system. &lt;code&gt;&lt;a href=&quot;#driver_system_info&quot;&gt;driver_system_info&lt;/a&gt;&lt;/code&gt; writes the system information when passed a reference to a &lt;code&gt;ErlDrvSysInfo&lt;/code&gt; structure. The fields in the structure are as follows:</source>
          <target state="translated">&lt;code&gt;ErlDrvSysInfo&lt;/code&gt; の構造は、Erlangのランタイムシステムについての情報を格納するために使用されています。 &lt;code&gt;&lt;a href=&quot;#driver_system_info&quot;&gt;driver_system_info&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;ErlDrvSysInfo&lt;/code&gt; 構造体への参照が渡されたときにシステム情報を書き込みます。構造内のフィールドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a097b8521d625c64b18dfa0ef6d0bb28ad84fb42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Erl_Interface&lt;/code&gt; library contains functions that help you integrate programs written in C and Erlang. The functions in &lt;code&gt;Erl_Interface&lt;/code&gt; support the following:</source>
          <target state="translated">&lt;code&gt;Erl_Interface&lt;/code&gt; のライブラリには、CとErlangで書かれたプログラムを統合ヘルプ機能が含まれています。 &lt;code&gt;Erl_Interface&lt;/code&gt; の関数は以下をサポートします。</target>
        </trans-unit>
        <trans-unit id="c0bb8f936d4589865a80fe604ad9b594bedb70df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Erl_Interface&lt;/code&gt; library supports this activity. It has several C functions that create and manipulate Erlang data structures. The library also contains an encode and a decode function. The following example shows how to create and encode an Erlang tuple &lt;code&gt;{tobbe,3928}&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Erl_Interface&lt;/code&gt; のライブラリは、この活動をサポートしています。Erlangデータ構造を作成および操作するC関数がいくつかあります。ライブラリには、エンコードおよびデコード機能も含まれています。次の例は、Erlangタプル &lt;code&gt;{tobbe,3928}&lt;/code&gt; を作成してエンコードする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="57a4e297c09c6f1e5049ba6a6a04c4f9715c1746" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErrorDesc&lt;/code&gt; returned is an opaque value to be passed further on to function &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;. For more control over the operation, use the &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;ErrorDesc&lt;/code&gt; は、機能上にさらに渡される不透明な値で返さ &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; 。操作をさらに制御するには、 &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; インターフェースを使用します。</target>
        </trans-unit>
        <trans-unit id="0a7a560a95e6aefba3bb607f84b70fa45da9fcef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErrorInfo&lt;/code&gt; mentioned earlier is the standard &lt;code&gt;ErrorInfo&lt;/code&gt; structure, which is returned from all I/O modules. It has the following format:</source>
          <target state="translated">前述の &lt;code&gt;ErrorInfo&lt;/code&gt; は、すべてのI / Oモジュールから返される標準の &lt;code&gt;ErrorInfo&lt;/code&gt; 構造です。次の形式があります。</target>
        </trans-unit>
        <trans-unit id="46cd6a74f6ad42247387aa8b77c1e43606850bb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErrorInfo&lt;/code&gt; mentioned in this module is the standard &lt;code&gt;ErrorInfo&lt;/code&gt; structure that is returned from all I/O modules. It has the following format:</source>
          <target state="translated">&lt;code&gt;ErrorInfo&lt;/code&gt; は、このモジュールに記載された標準である &lt;code&gt;ErrorInfo&lt;/code&gt; すべてのI / Oモジュールから返された構造。次の形式があります。</target>
        </trans-unit>
        <trans-unit id="93b9c6c6a8848b5cb82997ba3624a2f0fabf1b76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event Records&lt;/code&gt; in the Ets table are ordered by their timestamp. Which timestamp that should be used is controlled via the &lt;code&gt;event_order&lt;/code&gt; parameter. Default is &lt;code&gt;trace_ts&lt;/code&gt; which means the time when the trace data was generated. &lt;code&gt;event_ts&lt;/code&gt; means the time when the trace data was parsed (transformed into an &lt;code&gt;Event Record&lt;/code&gt;).</source>
          <target state="translated">Etsテーブルの &lt;code&gt;Event Records&lt;/code&gt; は、タイムスタンプ順になっています。使用するタイムスタンプは、 &lt;code&gt;event_order&lt;/code&gt; パラメーターによって制御されます。デフォルトは &lt;code&gt;trace_ts&lt;/code&gt; で、トレースデータが生成された時刻を意味します。 &lt;code&gt;event_ts&lt;/code&gt; は、トレースデータが解析された（ &lt;code&gt;Event Record&lt;/code&gt; 変換された）時間を意味します。</target>
        </trans-unit>
        <trans-unit id="78b79ae16c44e1321dea0365d3ec779b8f949891" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event Tracer (ET)&lt;/code&gt; uses named filters in various contexts. An Event Trace filter is an &lt;code&gt;Erlang fun&lt;/code&gt; that takes some trace data as input and returns a possibly modified version of it:</source>
          <target state="translated">&lt;code&gt;Event Tracer (ET)&lt;/code&gt; さまざまなコンテキストで名前のフィルタを使用しています。イベントトレースフィルターは、いくつかのトレースデータを入力として受け取り、変更された可能性があるバージョンを返す &lt;code&gt;Erlang fun&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="272a43aecd37d28c1a13622b7271bed26dc65387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event Tracer (ET)&lt;/code&gt; uses the built-in trace mechanism in Erlang and provides tools for collection and graphical viewing of trace data.</source>
          <target state="translated">&lt;code&gt;Event Tracer (ET)&lt;/code&gt; Erlangでトレースメカニズムを内蔵し、収集し、トレースデータをグラフィカルに表示するためのツールを提供を使用しています。</target>
        </trans-unit>
        <trans-unit id="7b3f5424185756e71f4988bcc6cd871d1c3dd01e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Expire&lt;/code&gt; time indicates for how long the request is valid (after which the manager is free to delete it).</source>
          <target state="translated">&lt;code&gt;Expire&lt;/code&gt; 時間（マネージャはそれを削除して自由になるまでの）要求が有効であるどのくらいのために示します。</target>
        </trans-unit>
        <trans-unit id="8e6c34cadce8690c6e2555787337ac8b727e225e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Extra&lt;/code&gt; parameter is specified when adding the filter via &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Extra&lt;/code&gt; 介してフィルタを追加するとき、パラメータが指定され &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="229acf43839cafb043149ab1533fb570fa7aafb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Extra&lt;/code&gt; parameter to the &lt;code&gt;domain/2&lt;/code&gt; function is specified when adding the filter via &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;domain/2&lt;/code&gt; 関数の &lt;code&gt;Extra&lt;/code&gt; パラメーターは、 &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; を介してフィルターを追加するときに指定されます。</target>
        </trans-unit>
        <trans-unit id="52e94c11f02389a5bccbbedf86c2e899b3c665d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExtraArgument&lt;/code&gt; parameter is the empty list. For example, when the agent receives a get-request for the &lt;code&gt;ipAdr&lt;/code&gt; variable, a call will be made to &lt;code&gt;ip_access(get)&lt;/code&gt;. The value returned by this function is the answer to the get-request.</source>
          <target state="translated">&lt;code&gt;ExtraArgument&lt;/code&gt; のパラメータは空のリストです。たとえば、エージェントが &lt;code&gt;ipAdr&lt;/code&gt; 変数のget-requestを受け取ると、 &lt;code&gt;ip_access(get)&lt;/code&gt; が呼び出されます。この関数によって返される値は、get-requestに対する回答です。</target>
        </trans-unit>
        <trans-unit id="fb7a37656b5be6c6e17b2389894ea550dae8ed86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExtraInfo&lt;/code&gt; argument is passed on from the &lt;code&gt;&lt;a href=&quot;snmpa#discovery&quot;&gt;discovery&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;ExtraInfo&lt;/code&gt; 引数はから渡される &lt;code&gt;&lt;a href=&quot;snmpa#discovery&quot;&gt;discovery&lt;/a&gt;&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="f30e53e02c0d2cd4e451fab992fbc868cf17c42e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExtraInfo&lt;/code&gt; argument is passed on to the callback functions of the &lt;code&gt;DiscoHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ExtraInfo&lt;/code&gt; 引数はのコールバック関数に渡される &lt;code&gt;DiscoHandler&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="289abc6fff4535554475e47566270dcbf6237037" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Freeze&lt;/code&gt; button starts/stops the redrawing of the graph. &lt;code&gt;Reset&lt;/code&gt; moves the graph to the middle of the window and resets all graph settings to default, with the exception of deleted nodes.</source>
          <target state="translated">「 &lt;code&gt;Freeze&lt;/code&gt; ボタンは、グラフの再描画を開始/停止します。 &lt;code&gt;Reset&lt;/code&gt; は、グラフをウィンドウの中央に移動し、削除されたノードを除いて、すべてのグラフ設定をデフォルトにリセットします。</target>
        </trans-unit>
        <trans-unit id="bb27036c1560c4a25ff7bd106092a75ea724c349" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Fun&lt;/code&gt; is called when the tar function wants to do a low-level operation, like writing a block to a file. The &lt;code&gt;Fun&lt;/code&gt; is called as &lt;code&gt;Fun(Op, {UserPrivate,Parameters...})&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is the operation name, &lt;code&gt;UserPrivate&lt;/code&gt; is the term passed as the first argument to &lt;code&gt;init/1&lt;/code&gt; and &lt;code&gt;Parameters...&lt;/code&gt; are the data added by the tar function to be passed down to the storage handling function.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; タール機能は、ファイルにブロックを書きたい、低レベルの操作をしたいときに呼び出されます。 &lt;code&gt;Fun&lt;/code&gt; と呼ばれる &lt;code&gt;Fun(Op, {UserPrivate,Parameters...})&lt;/code&gt; 、 &lt;code&gt;Op&lt;/code&gt; 操作名であるが、 &lt;code&gt;UserPrivate&lt;/code&gt; が最初の引数として渡される用語である &lt;code&gt;init/1&lt;/code&gt; 及び &lt;code&gt;Parameters...&lt;/code&gt; データは、によって追加さストレージ処理関数に渡されるtar関数。</target>
        </trans-unit>
        <trans-unit id="5d186993003ed1ccd81976e2681cc3264ce79a2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Fun&lt;/code&gt; is the definition of what to do when the different storage operations functions are to be called from the higher tar handling functions (such as &lt;code&gt;add/3&lt;/code&gt;, &lt;code&gt;add/4&lt;/code&gt;, and &lt;code&gt;close/1&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; 異なるストレージ操作機能は機能処理高いタールから呼び出されるときに何をすべきかの定義である（例えば、 &lt;code&gt;add/3&lt;/code&gt; 、 &lt;code&gt;add/4&lt;/code&gt; 、及び &lt;code&gt;close/1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ca0ec970a34ee33c7f128926a1e15f48a39b7957" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Fun&lt;/code&gt; must return a new accumulator, which is passed to the next call. &lt;code&gt;foldl/3&lt;/code&gt; returns the final accumulator value. &lt;code&gt;Acc0&lt;/code&gt; is returned if the archive is empty. It is not necessary to iterate over all files in the archive. The iteration can be ended prematurely in a controlled manner by throwing an exception.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; 次の呼び出しに渡される新しいアキュムレータを、返さなければなりません。 &lt;code&gt;foldl/3&lt;/code&gt; は最終的なアキュムレータ値を返します。アーカイブが空の場合、 &lt;code&gt;Acc0&lt;/code&gt; が返されます。アーカイブ内のすべてのファイルを反復処理する必要はありません。例外をスローすることにより、制御された方法で反復を途中で終了できます。</target>
        </trans-unit>
        <trans-unit id="387a945d1ef3c3c3d8058c83966af63af2d4d8ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Guard&lt;/code&gt; section can also contain logic and arithmetic operations, which are written with the same syntax as the guard tests (prefix notation), so that the following guard test written in Erlang:</source>
          <target state="translated">&lt;code&gt;Guard&lt;/code&gt; 区間は、次のガード試験はErlangで書かれたように、ガード試験（接頭表記）と同じ構文で書き込まれ、論理演算と算術演算を含むことができます。</target>
        </trans-unit>
        <trans-unit id="0ed2562e6fd2d312da06422aef22e77ebef5ba9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Guard&lt;/code&gt;s are constructed as tuples, where the first element is the test name and the remaining elements are the test parameters. To check for a specific type (say a list) of the element bound to the match variable &lt;code&gt;'$1'&lt;/code&gt;, one would write the test as &lt;code&gt;{is_list, '$1'}&lt;/code&gt;. If the test fails, the object in the table does not match and the next &lt;code&gt;MatchFunction&lt;/code&gt; (if any) is tried. Most guard tests present in Erlang can be used, but only the new versions prefixed &lt;code&gt;is_&lt;/code&gt; are allowed (&lt;code&gt;is_float&lt;/code&gt;, &lt;code&gt;is_atom&lt;/code&gt;, and so on).</source>
          <target state="translated">&lt;code&gt;Guard&lt;/code&gt; Sは、最初の要素はテスト名であり、残りの要素は、試験パラメータでタプルとして構成されています。一致変数 &lt;code&gt;'$1'&lt;/code&gt; にバインドされた要素の特定のタイプ（リストなど）を確認するには、テストを &lt;code&gt;{is_list, '$1'}&lt;/code&gt; と記述します。テストが失敗した場合、テーブル内のオブジェクトは一致せず、次の &lt;code&gt;MatchFunction&lt;/code&gt; （存在する場合）が試行されます。Erlangに存在するほとんどのガードテストを使用できますが、許可されているのは &lt;code&gt;is_&lt;/code&gt; で始まる新しいバージョン（ &lt;code&gt;is_float&lt;/code&gt; 、 &lt;code&gt;is_atom&lt;/code&gt; など）のみです。</target>
        </trans-unit>
        <trans-unit id="3de2a50d3651924af28c65d29b6c75e407eb8165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HTTP&lt;/code&gt; version of the request, that is, &quot;HTTP/0.9&quot;, &quot;HTTP/1.0&quot;, or &quot;HTTP/1.1&quot;.</source>
          <target state="translated">リクエストの &lt;code&gt;HTTP&lt;/code&gt; バージョン、つまり「HTTP / 0.9」、「HTTP / 1.0」、または「HTTP / 1.1」。</target>
        </trans-unit>
        <trans-unit id="462a5eb6a4e1b7237b73c6e94eed8c647d921612" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HostName&lt;/code&gt; will also be used in the hostname verification of the peer certificate using &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HostName&lt;/code&gt; また、使用してピアの証明書のホスト名の検証に使用される &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3fe5414d8d8a859939f8d4935fe18c2a11ba8b69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Id&lt;/code&gt; identifies a CTH instance uniquely. If two CTHs return the same &lt;code&gt;Id&lt;/code&gt;, the second CTH is ignored and subsequent calls to the CTH are only made to the first instance. For details, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#installing&quot;&gt;Installing a CTH&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">&lt;code&gt;Id&lt;/code&gt; は一意CTHインスタンスを識別する。2つのCTHが同じ &lt;code&gt;Id&lt;/code&gt; を返す場合、2番目のCTHは無視され、CTHへの後続の呼び出しは最初のインスタンスに対してのみ行われます。詳細については、ユーザーズガイドのセクション「 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#installing&quot;&gt;Installing a CTH&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="c260809e9afd9c349ba39adc0e706099bd4227f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InclNodes&lt;/code&gt; argument to &lt;code&gt;run/3&lt;/code&gt; is a list of node names. Function &lt;code&gt;run/3&lt;/code&gt; runs the tests in &lt;code&gt;TestSpecs&lt;/code&gt; just like &lt;code&gt;run/1&lt;/code&gt;, but also takes any test in &lt;code&gt;TestSpecs&lt;/code&gt;, which is not explicitly tagged with a particular node name, and execute it on the nodes listed in &lt;code&gt;InclNodes&lt;/code&gt;. By using &lt;code&gt;run/3&lt;/code&gt; this way, any test specification can be used, with or without node information, in a large-scale test environment.</source>
          <target state="translated">&lt;code&gt;run/3&lt;/code&gt; の &lt;code&gt;InclNodes&lt;/code&gt; 引数は、ノード名のリストです。機能の &lt;code&gt;run/3&lt;/code&gt; でテスト実行 &lt;code&gt;TestSpecs&lt;/code&gt; だけ様 &lt;code&gt;run/1&lt;/code&gt; だけでなく、内の任意の試験かかり &lt;code&gt;TestSpecs&lt;/code&gt; 明示的に特定のノード名とタグ付けされていない、とに記載されているノード上でそれを実行 &lt;code&gt;InclNodes&lt;/code&gt; 。このように &lt;code&gt;run/3&lt;/code&gt; を使用することで、ノード情報の有無にかかわらず、大規模なテスト環境で任意のテスト仕様を使用できます。</target>
        </trans-unit>
        <trans-unit id="728f2fde5e1be51dec6dbadf7fd8bb23ae8a8436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InfoTuple&lt;/code&gt;s with the following items are part of the result:</source>
          <target state="translated">&lt;code&gt;InfoTuple&lt;/code&gt; 秒以下の項目では、結果の一部です：</target>
        </trans-unit>
        <trans-unit id="18a616360c14e89869b3ee8a191e8982efcb7c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InitFun&lt;/code&gt; is applied once prior to any other &lt;code&gt;crypto&lt;/code&gt; operation. The returned &lt;code&gt;CryptoState&lt;/code&gt; is then folded into repeated applications of the &lt;code&gt;EncryptFun&lt;/code&gt; or &lt;code&gt;DecryptFun&lt;/code&gt;. The binary returned from those funs are sent further to the remote SFTP server. Finally, if doing encryption, the &lt;code&gt;CloseFun&lt;/code&gt; is applied to the last piece of data. The &lt;code&gt;CloseFun&lt;/code&gt; is responsible for padding (if needed) and encryption of that last piece.</source>
          <target state="translated">&lt;code&gt;InitFun&lt;/code&gt; は一度前に、他に適用される &lt;code&gt;crypto&lt;/code&gt; 操作。返された &lt;code&gt;CryptoState&lt;/code&gt; は、 &lt;code&gt;EncryptFun&lt;/code&gt; または &lt;code&gt;DecryptFun&lt;/code&gt; の繰り返しアプリケーションに折りたたまれます。これらのfunから返されたバイナリは、リモートSFTPサーバーにさらに送信されます。最後に、暗号化を行う場合、 &lt;code&gt;CloseFun&lt;/code&gt; は最後のデータに適用されます。 &lt;code&gt;CloseFun&lt;/code&gt; は、その最後のピースのパディング（必要な場合）と暗号化を担当しています。</target>
        </trans-unit>
        <trans-unit id="f831068a66059cf58bd10807a62c5026adc8c387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Install&lt;/code&gt; script should currently be invoked as follows in the directory where it resides (the top directory):</source>
          <target state="translated">現在、 &lt;code&gt;Install&lt;/code&gt; スクリプトは、スクリプトが存在するディレクトリ（トップディレクトリ）で次のように呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="151c25d0c87229840b1a357c4265bc6b194406ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Install&lt;/code&gt; script used when installing Erlang/OTP requires common Unix tools such as &lt;code&gt;sed&lt;/code&gt; to be present in your &lt;code&gt;$PATH&lt;/code&gt;. If your target system does not have such tools, you need to run the &lt;code&gt;Install&lt;/code&gt; script on your build machine before packaging Erlang/OTP. The &lt;code&gt;Install&lt;/code&gt; script should currently be invoked as follows in the directory where it resides (the top directory):</source>
          <target state="translated">&lt;code&gt;Install&lt;/code&gt; のErlang / OTPをインストールする際に使用されるスクリプトは、このような一般的なUnixツールが必要です &lt;code&gt;sed&lt;/code&gt; はあなたの中に存在すること &lt;code&gt;$PATH&lt;/code&gt; 。ターゲットシステムにそのようなツールがない場合は、Erlang / OTPをパッケージ化する前にビルドマシンで &lt;code&gt;Install&lt;/code&gt; スクリプトを実行する必要があります。現在、 &lt;code&gt;Install&lt;/code&gt; スクリプトは、スクリプトが存在するディレクトリ（トップディレクトリ）で次のように呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="63ceadf10aefd8db61da0846c16f50dd4c57bf68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Issuer&lt;/code&gt; argument contains the issuer name of the certificate to be checked. Normally the returned CRL should be issued by this issuer, except if the &lt;code&gt;cRLIssuer&lt;/code&gt; field of &lt;code&gt;DistributionPoint&lt;/code&gt; has a value, in which case that value should be used instead.</source>
          <target state="translated">&lt;code&gt;Issuer&lt;/code&gt; 引数は、証明書の発行者名のチェックが含まれています。通常、返されたCRLはこの発行者が発行する必要があります。ただし、 &lt;code&gt;DistributionPoint&lt;/code&gt; の &lt;code&gt;cRLIssuer&lt;/code&gt; フィールドに値がある場合は、その値を代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1df86fa6a13d4782f56f4b70368193619f74ccce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JCL&lt;/code&gt; commands have the following meaning:</source>
          <target state="translated">&lt;code&gt;JCL&lt;/code&gt; のコマンドは、以下の意味があります。</target>
        </trans-unit>
        <trans-unit id="eb0d6b265bbd8a2ede63c784c4e76e0b9b25a09c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LANG&lt;/code&gt; or &lt;code&gt;LC_CTYPE&lt;/code&gt; setting are to be consistent with what the terminal is capable of. There is no portable way for Erlang to ask the terminal about its UTF-8 capacity, we have to rely on the language and character type settings.</source>
          <target state="translated">&lt;code&gt;LANG&lt;/code&gt; または &lt;code&gt;LC_CTYPE&lt;/code&gt; の設定は、端末が可能であるものと一致しなければなりません。Erlangが端末にそのUTF-8容量について尋ねるポータブルな方法はありません。言語と文字タイプの設定に依存する必要があります。</target>
        </trans-unit>
        <trans-unit id="6dcd5eb8b8d30040b44118c19bb40f40ac2fd675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Lin&lt;/code&gt; (&lt;code&gt;LLin&lt;/code&gt;, &lt;code&gt;XLin&lt;/code&gt;) operator assigns the lines where calls (local calls, external calls) are made. The &lt;code&gt;ELin&lt;/code&gt; operator assigns to each call (From, To), for which it is defined, every line L such that there is a chain of calls from From to To beginning with a call on line L.</source>
          <target state="translated">&lt;code&gt;Lin&lt;/code&gt; （ &lt;code&gt;LLin&lt;/code&gt; 、 &lt;code&gt;XLin&lt;/code&gt; ）オペレータがコール（ローカル電話、外部コール）が形成されている行を割り当てます。 &lt;code&gt;ELin&lt;/code&gt; 、それが定義されている（TO、から）各コール、からからラインL上の呼び出しで始まるへの呼び出しの連鎖が存在するように、各ラインLにオペレータ割り当てます</target>
        </trans-unit>
        <trans-unit id="ddd6ecd801eba0297210dd779a386d2f9b34f307" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ListOfExtraArguments&lt;/code&gt; can be used to write generic functions. This list is appended to the standard arguments for each function. Consider two read-only variables for a device, &lt;code&gt;ipAdr&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; with object identifiers 1.1.23.4 and 1.1.7 respectively. To access these variables, one could implement the two Erlang functions &lt;code&gt;ip_access&lt;/code&gt; and &lt;code&gt;name_access&lt;/code&gt;, which will be in the MIB. The functions could be specified in a text file as follows:</source>
          <target state="translated">&lt;code&gt;ListOfExtraArguments&lt;/code&gt; は、汎用的な関数を作成するために使用することができます。このリストは、各関数の標準引数に追加されます。デバイスの2つの読み取り専用変数、それぞれオブジェクト識別子1.1.23.4と1.1.7を持つ &lt;code&gt;ipAdr&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; を検討してください。これらの変数にアクセスするには、2つのErlang関数 &lt;code&gt;ip_access&lt;/code&gt; と &lt;code&gt;name_access&lt;/code&gt; を実装します。これらはMIBにあります。関数は、テキストファイルで次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="e1503197789ab51916ae2782b9a6115c1230e790" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Listen&lt;/code&gt; argument will be the same as the &lt;code&gt;Listen&lt;/code&gt; handle part of the return value of the &lt;code&gt;&lt;a href=&quot;#listen&quot;&gt;listen/1&lt;/a&gt;&lt;/code&gt; callback above. &lt;code&gt;accept/1&lt;/code&gt; is called only once when the distribution protocol is started.</source>
          <target state="translated">&lt;code&gt;Listen&lt;/code&gt; と引数は同じになります &lt;code&gt;Listen&lt;/code&gt; の戻り値のハンドル部 &lt;code&gt;&lt;a href=&quot;#listen&quot;&gt;listen/1&lt;/a&gt;&lt;/code&gt; 上記のコールバックを。 &lt;code&gt;accept/1&lt;/code&gt; は、配布プロトコルが開始されたときに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="431a15a498450f82a9cfae588ffa70427314b380" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoadOrder&lt;/code&gt; priority is by default &lt;code&gt;0&lt;/code&gt; (zero) but can be set to any integer. The tables with the highest &lt;code&gt;LoadOrder&lt;/code&gt; priority are loaded first at startup.</source>
          <target state="translated">&lt;code&gt;LoadOrder&lt;/code&gt; の優先度はデフォルトで &lt;code&gt;0&lt;/code&gt; （ゼロ）が、任意の整数に設定することができます。 &lt;code&gt;LoadOrder&lt;/code&gt; 優先度が最も高いテーブルが、起動時に最初にロードされます。</target>
        </trans-unit>
        <trans-unit id="6ca1036527f7b7c9ab7ab8a36cae20db5fe67ec0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MEDIA-GATEWAY-CONTROL&lt;/code&gt; configuration was as follows:</source>
          <target state="translated">&lt;code&gt;MEDIA-GATEWAY-CONTROL&lt;/code&gt; の次のように設定されました：</target>
        </trans-unit>
        <trans-unit id="d517f2a191b0a2929a426e74c5d9977a2a92791e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MIB.Object&lt;/code&gt; syntax is not implemented (since all objects must be unique anyway).</source>
          <target state="translated">&lt;code&gt;MIB.Object&lt;/code&gt; の（すべてのオブジェクトは一意とにかくなければならないので）構文が実装されていません。</target>
        </trans-unit>
        <trans-unit id="636dca28dbd87863b36f206b257464a2e654c483" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Max Carrier size&lt;/code&gt; column shows the maximum value seen by observer since the last node change or since the start of the application, i.e. switching nodes will reset the max column. Values are sampled so higher values may have existed than what is shown.</source>
          <target state="translated">[ &lt;code&gt;Max Carrier size&lt;/code&gt; ]列には、最後のノードの変更以降、またはアプリケーションの開始以降にオブザーバーが確認した最大値が表示されます。つまり、ノードを切り替えると、最大列がリセットされます。値はサンプリングされているため、表示されている値よりも高い値が存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="cc6e05d560929a4a9cfa001cecdf62f1726f815c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mnesia&lt;/code&gt; programmer cannot prioritize one particular transaction to execute before other transactions that are waiting to execute. As a result, the &lt;code&gt;Mnesia&lt;/code&gt; DBMS transaction system is not suitable for hard real-time applications. However, &lt;code&gt;Mnesia&lt;/code&gt; contains other features that have real-time properties.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のプログラマは、実行するために待っている他のトランザクションの前に実行するためにある特定のトランザクションの優先順位を設定することはできません。その結果、 &lt;code&gt;Mnesia&lt;/code&gt; DBMSトランザクションシステムは、ハードリアルタイムアプリケーションには適していません。ただし、 &lt;code&gt;Mnesia&lt;/code&gt; には、リアルタイムプロパティを持つ他の機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="2398df613eed0972c6702e33c30169f57db4a6c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mnesia&lt;/code&gt; record identifiers (&lt;code&gt;{Tab, Key}&lt;/code&gt;) can also be used as references. In this case, attribute &lt;code&gt;dept&lt;/code&gt; would be set to value &lt;code&gt;{dept, 'B/SFR'}&lt;/code&gt; instead of &lt;code&gt;'B/SFR'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のレコード識別子（ &lt;code&gt;{Tab, Key}&lt;/code&gt; ）も参照として使用することができます。この場合、属性 &lt;code&gt;dept&lt;/code&gt; 値に設定されることになる &lt;code&gt;{dept, 'B/SFR'}&lt;/code&gt; の代わりに &lt;code&gt;'B/SFR'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="90246ca10a3686ec4547ee9155bf07c76827f547" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mnesia&lt;/code&gt; transaction system facilitates the construction of reliable, distributed systems by providing the following important properties:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; の取引システムは、以下の重要な特性を提供することにより、信頼性の高い、分散システムの構築を容易に：</target>
        </trans-unit>
        <trans-unit id="05c05e9d6716d8728951521a8360d9cad3bf485c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mnesia&lt;/code&gt; transactions have four important properties, called &lt;strong&gt;A&lt;/strong&gt;tomicity, &lt;strong&gt;C&lt;/strong&gt;onsistency, &lt;strong&gt;I&lt;/strong&gt;solation, and &lt;strong&gt;D&lt;/strong&gt;urability (ACID). These properties are described in the following sections.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のトランザクションは、4つの重要な特性と呼ばれる、有するtomicity、&lt;strong&gt;Cの&lt;/strong&gt; onsistency、&lt;strong&gt;Iの&lt;/strong&gt;ゾル化、および&lt;strong&gt;Dの&lt;/strong&gt; urability（酸）。これらのプロパティについては、次のセクションで説明します。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34969f65d94bd140bef4861a2be0633f1edd4059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module:callback_mode()&lt;/code&gt; function may also return a list containing the callback mode and the atom &lt;code&gt;state_enter&lt;/code&gt; in which case &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;State Enter Calls&lt;/a&gt;&lt;/code&gt; are activated for the callback mode.</source>
          <target state="translated">&lt;code&gt;Module:callback_mode()&lt;/code&gt; 関数は、コールバックモードと原子含むリストを返すことがあり &lt;code&gt;state_enter&lt;/code&gt; 、その場合には &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;State Enter Calls&lt;/a&gt;&lt;/code&gt; 、コールバックモードのために起動されます。</target>
        </trans-unit>
        <trans-unit id="40a0e269f3ccc50144dceff290b7ec1e5d3d30c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Msg&lt;/code&gt; is either the binary &quot;plain text&quot; data or it is the hashed value of &quot;plain text&quot;, that is, the digest.</source>
          <target state="translated">&lt;code&gt;Msg&lt;/code&gt; バイナリ「プレーンテキスト」データであるか、それは、ダイジェストである「プレーンテキスト」のハッシュされた値です。</target>
        </trans-unit>
        <trans-unit id="aa7575828f011f723e11b39b2169db4b9db4b1aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Msg&lt;/code&gt; is either the binary &quot;plain text&quot; data to be signed or it is the hashed value of &quot;plain text&quot;, that is, the digest.</source>
          <target state="translated">&lt;code&gt;Msg&lt;/code&gt; のいずれかであるバイナリ「プレーンテキスト」データが署名されるかは、ダイジェストは「平文」のハッシュ値です。</target>
        </trans-unit>
        <trans-unit id="caed8c29d6ad9904a92815ee1e45441de9aec981" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Path&lt;/code&gt; parameters have exactly the same meaning as when calling the plain function &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; と &lt;code&gt;Path&lt;/code&gt; パラメータは、プレーン関数呼び出したときとまったく同じ意味を持つ &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27916491cb8658a94525ccdce76cf8ccb4103b9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; field is the first element of the tuple.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; フィールドには、タプルの最初の要素です。</target>
        </trans-unit>
        <trans-unit id="3ca819160319b409a2f4c421438e5784e6c81c13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; specified is to correspond to the filename of the dynamically loadable object file residing in the directory specified as &lt;code&gt;Path&lt;/code&gt;, but &lt;strong&gt;without&lt;/strong&gt; the extension (that is, &lt;code&gt;.so&lt;/code&gt;). The driver name provided in the driver initialization routine must correspond with the filename, in much the same way as Erlang module names correspond to the names of the &lt;code&gt;.beam&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; として指定されたディレクトリに存在する動的にロード可能なオブジェクトファイルのファイル名に対応するように指定された &lt;code&gt;Path&lt;/code&gt; が、&lt;strong&gt;なし&lt;/strong&gt;（すなわち、拡張 &lt;code&gt;.so&lt;/code&gt; ）。ドライバー初期化ルーチンで提供されるドライバー名は、Erlangモジュール名が &lt;code&gt;.beam&lt;/code&gt; ファイルの名前に対応するのとほぼ同じ方法で、ファイル名に対応する必要があります。</target>
        </trans-unit>
        <trans-unit id="a8577668ea7b4d3a7d25c6ddf13c9da38e01e030" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NegotiationTimeout&lt;/code&gt; is in milli-seconds. The default value is &lt;code&gt;infinity&lt;/code&gt;. For connection timeout, use the option &lt;code&gt;&lt;a href=&quot;#type-connect_timeout_client_option&quot;&gt;connect_timeout&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NegotiationTimeout&lt;/code&gt; はミリ秒です。デフォルト値は &lt;code&gt;infinity&lt;/code&gt; です。接続タイムアウトの場合は、オプション &lt;code&gt;&lt;a href=&quot;#type-connect_timeout_client_option&quot;&gt;connect_timeout&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="25cf803e685b877b848b6e92d88b9c3e6c3210a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; is an important type and it is widely used within different standards to identify various objects uniquely. Dubuisson: ASN.1 - Communication Between Heterogeneous Systems includes an easy-to-understand description of the use of &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; 重要なタイプであり、広く一意にさまざまなオブジェクトを識別するために、異なる規格内で使用されています。Dubuisson：ASN.1-異機種間システム間の通信には、 &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; の使用に関する理解しやすい説明が含まれています。</target>
        </trans-unit>
        <trans-unit id="d89a49f90db529d1a87ec8ebe643fd609dd3d3b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; value is simply a tuple with the consecutive values, which must be integers.</source>
          <target state="translated">&lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; 値は、単に、整数でなければならない連続した値との組です。</target>
        </trans-unit>
        <trans-unit id="291813bf4581fd45b017cff8a605850835e5740d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Operation&lt;/code&gt; can be &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;is_set_ok&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, or &lt;code&gt;undo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Operation&lt;/code&gt; することができ &lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;is_set_ok&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; 、または &lt;code&gt;undo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0de93bd973f344208a44803393d2336ed72a592" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Operation&lt;/code&gt; can be &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;is_set_ok&lt;/code&gt;, &lt;code&gt;undo&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Operation&lt;/code&gt; することができ &lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;is_set_ok&lt;/code&gt; 、 &lt;code&gt;undo&lt;/code&gt; や &lt;code&gt;set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c435f50eeeff168b9ba4f24d7c44a547a62546d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Opts&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt; when only the &lt;code&gt;Module&lt;/code&gt; is specified.</source>
          <target state="translated">&lt;code&gt;Opts&lt;/code&gt; デフォルトは &lt;code&gt;[]&lt;/code&gt; のみ &lt;code&gt;Module&lt;/code&gt; 指定されています。</target>
        </trans-unit>
        <trans-unit id="fb29cec4d8746b25b30ed76f21784b67fd7d4bbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phone&lt;/code&gt; field is the third element.</source>
          <target state="translated">&lt;code&gt;Phone&lt;/code&gt; フィールドは、第三の要素です。</target>
        </trans-unit>
        <trans-unit id="9a36c74c23cadea74c3943787187639b86600b99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pid&lt;/code&gt; is the process handling the supervision of the SNMP manager start. When the manager has started a completion message will be sent to the client from this process: &lt;code&gt;{snmpm_started, Pid}&lt;/code&gt;. If the SNMP manager was not started in time, a timeout message will be sent to the client: &lt;code&gt;{snmpm_start_timeout, Pid}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; SNMPマネージャ開始の監督を処理するプロセスです。マネージャーが開始すると、このプロセスからクライアントに完了メッセージが送信されます： &lt;code&gt;{snmpm_started, Pid}&lt;/code&gt; 。SNMPマネージャーが時間内に開始されなかった場合、タイムアウトメッセージがクライアントに送信されます： &lt;code&gt;{snmpm_start_timeout, Pid}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ad1ec7b826ce17efed8a480d14fb2c2d7c83c24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProtocolVersion&lt;/code&gt; version is the version actually encoded in the reply message.</source>
          <target state="translated">&lt;code&gt;ProtocolVersion&lt;/code&gt; バージョンは、実際には、応答メッセージにエンコードされたバージョンです。</target>
        </trans-unit>
        <trans-unit id="cc15bf57b674de665a3aa4e09be58f12e93f6528" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RELATIVE-OID&lt;/code&gt; type for relative object identifiers is fully supported.</source>
          <target state="translated">相対オブジェクト識別子の &lt;code&gt;RELATIVE-OID&lt;/code&gt; タイプは完全にサポートされています。</target>
        </trans-unit>
        <trans-unit id="500392beab058916677f3be61233265c489d27bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reason&lt;/code&gt; parameter in the &lt;code&gt;&lt;a href=&quot;snmpm_user#handle_error&quot;&gt;handle_error&lt;/a&gt;&lt;/code&gt; user callback function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;snmpm_user#handle_error&quot;&gt;handle_error&lt;/a&gt;&lt;/code&gt; ユーザーコールバック関数の &lt;code&gt;Reason&lt;/code&gt; パラメーター。</target>
        </trans-unit>
        <trans-unit id="6b9fce90dd7e0310098f64ad13d29f2262c2551d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reason&lt;/code&gt; returned value if any of the sync/async get/get-next/set/get-bulk functions returns &lt;code&gt;{error, Reason}&lt;/code&gt;</source>
          <target state="translated">sync / async get / get-next / set / get-bulk関数のいずれかが &lt;code&gt;{error, Reason}&lt;/code&gt; 返した場合の &lt;code&gt;Reason&lt;/code&gt; の戻り値</target>
        </trans-unit>
        <trans-unit id="1adaa6337c0136bccefb9d645f47ac7a3dea29f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReplyData&lt;/code&gt; defaults to &lt;code&gt;megaco:lookup(ConnHandle, reply_data)&lt;/code&gt;, but may be explicitly overridden by a &lt;code&gt;megaco:cast/3&lt;/code&gt; option in order to forward info about the calling context of the originating process.</source>
          <target state="translated">&lt;code&gt;ReplyData&lt;/code&gt; はデフォルト &lt;code&gt;megaco:lookup(ConnHandle, reply_data)&lt;/code&gt; が、明示的で上書きすることができる &lt;code&gt;megaco:cast/3&lt;/code&gt; 元のプロセスの呼び出しコンテキストに関する前方情報へ順番にオプション。</target>
        </trans-unit>
        <trans-unit id="5dcd8c369c6500e932ff1e1629f6fafbdc39108e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Request-Line&lt;/code&gt; as defined in&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt;, for example, &lt;code&gt;&quot;GET /cgi-bin/find.pl?person=jocke HTTP/1.0&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request-Line&lt;/code&gt; で定義された &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt; 、例えば、 &lt;code&gt;&quot;GET /cgi-bin/find.pl?person=jocke HTTP/1.0&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="560f996f8e0b32b35d673e574bfba7c7f5732599" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Request-URI&lt;/code&gt; as defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt;, for example, &lt;code&gt;&quot;/cgi-bin/find.pl?person=jocke&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request-URI&lt;/code&gt; で定義され &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt; 、例えば、 &lt;code&gt;&quot;/cgi-bin/find.pl?person=jocke&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09cc862e08384f6496c068b1ef00d8543bcd2fea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Request&lt;/code&gt; element can in itself contain many &lt;code&gt;Request&lt;/code&gt;s by using the following format:</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 自体の要素の缶が多く含まれている &lt;code&gt;Request&lt;/code&gt; の次の形式を使用しました：</target>
        </trans-unit>
        <trans-unit id="df3736ae6d527f6dc758c7bc44a6f372a5715a61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Root directory&lt;/code&gt; can be edited by selecting the line where the path of the root directory is displayed and clicking the right mouse button. Choose edit in the menu that pops up.</source>
          <target state="translated">&lt;code&gt;Root directory&lt;/code&gt; ルートディレクトリのパスが表示されている行を選択し、マウスの右ボタンをクリックすることで編集することができます。ポップアップメニューで[編集]を選択します。</target>
        </trans-unit>
        <trans-unit id="84770d839ef4e410e85af06b8af1e00bd08e41e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowIndex&lt;/code&gt; argument may refer to an existing row or a non-existing row, or it may be unspecified. The &lt;code&gt;Cols&lt;/code&gt; list may refer to inaccessible columns or non-existing columns. For each column in the &lt;code&gt;Cols&lt;/code&gt; list, the corresponding next instance is determined, and the last part of its OBJECT IDENTIFIER and its value is returned.</source>
          <target state="translated">&lt;code&gt;RowIndex&lt;/code&gt; 引数は、既存の行または非既存の行を指すことができる、またはそれは未指定であってもよいです。 &lt;code&gt;Cols&lt;/code&gt; はのリストにはアクセスできない列または非既存の列を参照することができます。 &lt;code&gt;Cols&lt;/code&gt; リストの各列について、対応する次のインスタンスが決定され、そのOBJECT IDENTIFIERの最後の部分とその値が返されます。</target>
        </trans-unit>
        <trans-unit id="b8d86bbb9ebe74c2dccf692588c950366f9986be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SecurityCallbackModule&lt;/code&gt; is a user-written module that can receive events from the &lt;code&gt;mod_security&lt;/code&gt; Erlang web server API module. This module only exports the functions event/[4,5] which are described here.</source>
          <target state="translated">&lt;code&gt;SecurityCallbackModule&lt;/code&gt; はからイベントを受け取ることができ、ユーザが記述したモジュールである &lt;code&gt;mod_security&lt;/code&gt; の ErlangのWebサーバのAPIモジュール。このモジュールは、ここで説明されている関数event / [4,5]のみをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="6af65a9600faa054b3af4ac9bf04b32c2eda0702" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SeqCnt&lt;/code&gt; values in the filenames are all in the range &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;WrapCnt&lt;/code&gt; with a gap in the circular sequence. The gap is needed to find the end of the trace.</source>
          <target state="translated">ファイル名の &lt;code&gt;SeqCnt&lt;/code&gt; 値はすべて &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;WrapCnt&lt;/code&gt; の範囲で、循環シーケンスにギャップがあります。ギャップは、トレースの終わりを見つけるために必要です。</target>
        </trans-unit>
        <trans-unit id="c2214d4ed634c1087714e34b7518b2efdc6127b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; or the &lt;code&gt;TypeSpecifier&lt;/code&gt;, or both, can be omitted. Thus, the following variants are allowed:</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; や &lt;code&gt;TypeSpecifier&lt;/code&gt; 、またはその両方が、省略することができます。したがって、次のバリアントが許可されます。</target>
        </trans-unit>
        <trans-unit id="4401af203194a6b8a2b7ece91e21c535b2bfb4cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; part of the segment multiplied by the unit in &lt;code&gt;TypeSpecifierList&lt;/code&gt; (described later) gives the number of bits for the segment. In construction, &lt;code&gt;Size&lt;/code&gt; is any expression that evaluates to an integer. In matching, &lt;code&gt;Size&lt;/code&gt; must be a constant expression or a variable.</source>
          <target state="translated">&lt;code&gt;TypeSpecifierList&lt;/code&gt; （後述）の単位を掛けたセグメントの &lt;code&gt;Size&lt;/code&gt; 部分は、セグメントのビット数を示します。構築では、 &lt;code&gt;Size&lt;/code&gt; は整数に評価される任意の式です。マッチングでは、 &lt;code&gt;Size&lt;/code&gt; は定数式または変数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="fa124ccd13ea8b5e4811fb40dda4e89bf8e0ab6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Socket&lt;/code&gt; shall be in passive mode ({active, false}) before calling this function or else the behavior of this function is undefined.</source>
          <target state="translated">&lt;code&gt;Socket&lt;/code&gt; この関数の動作は未定義である他に、この関数を呼び出す前に、またはパッシブモード（{活性、偽}）でなければなりません。</target>
        </trans-unit>
        <trans-unit id="7eae7e5127eb1df08b89e0018b0917cb18f30c43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SupFlags&lt;/code&gt; variable in the return value from &lt;code&gt;init/1&lt;/code&gt; represents the &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;supervisor flags&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init/1&lt;/code&gt; からの戻り値の &lt;code&gt;SupFlags&lt;/code&gt; 変数は、 &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;supervisor flags&lt;/a&gt;&lt;/code&gt; 表します。</target>
        </trans-unit>
        <trans-unit id="4b2315a984f49c0998e8d5af6001ef3acd45c41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TEST&lt;/code&gt; macro can also be used to override the &lt;code&gt;NOTEST&lt;/code&gt; macro. If &lt;code&gt;TEST&lt;/code&gt; is defined &lt;strong&gt;before&lt;/strong&gt; the EUnit header file is included (even if &lt;code&gt;NOTEST&lt;/code&gt; is also defined), then the code will be compiled with EUnit enabled.</source>
          <target state="translated">&lt;code&gt;TEST&lt;/code&gt; マクロはまた、オーバーライドするために使用することができる &lt;code&gt;NOTEST&lt;/code&gt; マクロ。場合 &lt;code&gt;TEST&lt;/code&gt; が定義される&lt;strong&gt;前&lt;/strong&gt; EUNITヘッダファイルが含まれている（場合でも &lt;code&gt;NOTEST&lt;/code&gt; をも定義される）、次いでコードが有効EUNITでコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="838665ed4c5367a2b5c2a4be4ad60949587a0665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TarDescriptor&lt;/code&gt; term is not a file descriptor. You are advised not to rely on the specific contents of this term, as it can change in future Erlang/OTP releases when more features are added to this module.</source>
          <target state="translated">&lt;code&gt;TarDescriptor&lt;/code&gt; の用語は、ファイル記述子ではありません。このモジュールに機能が追加されると、将来のErlang / OTPリリースで変更される可能性があるため、この用語の特定の内容に依存しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="465bc37c25caf4b34efb2c4086ab264294ebb922" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TarDescriptor&lt;/code&gt; term is not a file descriptor. You are advised not to rely on the specific contents of this term, as it can change in future Erlang/OTP releases when more features are added to this module..</source>
          <target state="translated">&lt;code&gt;TarDescriptor&lt;/code&gt; の用語は、ファイル記述子ではありません。このモジュールに機能が追加されると、将来のErlang / OTPリリースで変更される可能性があるため、この用語の特定の内容に依存しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0454f0125983aa193be8922f905a4526ad0af9b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Timeout&lt;/code&gt; is the time the request is valid. The value has to be greater then zero.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 要求が有効である時間です。値はゼロより大きくなければなりません。</target>
        </trans-unit>
        <trans-unit id="7d17ac7ee8e9756a5bbf3de834214c031df9a61a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Timeout&lt;/code&gt; parameter is for the actual tls upgrade (phase 2) while the timeout in &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;eldap:open/2&lt;/a&gt;&lt;/code&gt; is used for the initial negotiation about upgrade (phase 1).</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; でタイムアウトしながら、実際のTLSは（フェーズ2）をアップグレードするためにパラメータがある &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;eldap:open/2&lt;/a&gt;&lt;/code&gt; アップグレード（フェーズ1）についての最初のネゴシエーションに使用されます。</target>
        </trans-unit>
        <trans-unit id="7e76487200ab118ffd183bce3e76d073d0b42eca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Trace Pattern&lt;/code&gt; is basically a tuple of a &lt;code&gt;module&lt;/code&gt; and a &lt;code&gt;detail level&lt;/code&gt; (either an integer or the atom max for full detail). In most cases the &lt;code&gt;Trace Pattern&lt;/code&gt;&lt;code&gt;{et,max}&lt;/code&gt; does suffice. But if you do not want any runtime dependency of &lt;code&gt;et&lt;/code&gt; you can implement your own &lt;code&gt;trace_me/5&lt;/code&gt; function in some module and refer to that module in the &lt;code&gt;Trace Pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Trace Pattern&lt;/code&gt; 基本的にのタプルである &lt;code&gt;module&lt;/code&gt; と &lt;code&gt;detail level&lt;/code&gt; （整数または完全詳細は原子の最大のいずれか）。ほとんどの場合、 &lt;code&gt;Trace Pattern&lt;/code&gt; &lt;code&gt;{et,max}&lt;/code&gt; 十分です。しかし、 &lt;code&gt;et&lt;/code&gt; の実行時の依存関係が必要ない場合は、独自の &lt;code&gt;trace_me/5&lt;/code&gt; 関数をいくつかのモジュールに実装し、 &lt;code&gt;Trace Pattern&lt;/code&gt; でそのモジュールを参照できます。</target>
        </trans-unit>
        <trans-unit id="c7f49e5bd7c0b07a911f5147dffd68a5a99e4dbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TraceStartOption&lt;/code&gt; is any option allowed for &lt;code&gt;trace/1&lt;/code&gt;. The options &lt;code&gt;[start, {procs, [self() | PidList]} | OptList]&lt;/code&gt; are given to &lt;code&gt;trace/1&lt;/code&gt;, where &lt;code&gt;OptList&lt;/code&gt; is &lt;code&gt;OptionList&lt;/code&gt; with &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;{procs, _}&lt;/code&gt; options removed.</source>
          <target state="translated">&lt;code&gt;TraceStartOption&lt;/code&gt; はに許可される任意のオプションで &lt;code&gt;trace/1&lt;/code&gt; 。オプション &lt;code&gt;[start, {procs, [self() | PidList]} | OptList]&lt;/code&gt; は &lt;code&gt;trace/1&lt;/code&gt; に渡されます。ここで、 &lt;code&gt;OptList&lt;/code&gt; は &lt;code&gt;OptionList&lt;/code&gt; で、 &lt;code&gt;continue&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; 、および &lt;code&gt;{procs, _}&lt;/code&gt; オプションが削除されています。</target>
        </trans-unit>
        <trans-unit id="d2aed641ea18d80129eeabfddfeb6dc4dea97713" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TraceTag&lt;/code&gt;&lt;code&gt;seq_trace&lt;/code&gt; is handled slightly differently. There is no &lt;code&gt;Tracee&lt;/code&gt; for &lt;code&gt;seq_trace&lt;/code&gt;, instead the &lt;code&gt;Label&lt;/code&gt; associated with the &lt;code&gt;seq_trace&lt;/code&gt; event is specified.</source>
          <target state="translated">&lt;code&gt;TraceTag&lt;/code&gt; の &lt;code&gt;seq_trace&lt;/code&gt; は多少異なる方法で処理されます。何もありません &lt;code&gt;Tracee&lt;/code&gt; はため &lt;code&gt;seq_trace&lt;/code&gt; 代わりに、 &lt;code&gt;Label&lt;/code&gt; に関連付けられている &lt;code&gt;seq_trace&lt;/code&gt; のイベントが指定されています。</target>
        </trans-unit>
        <trans-unit id="0e7aee8b9587689f8640e087123cb9269b76c67d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TypeSpecifierList&lt;/code&gt; is a list of type specifiers separated by hyphens.</source>
          <target state="translated">&lt;code&gt;TypeSpecifierList&lt;/code&gt; は、ハイフンで区切られた型指定子のリストです。</target>
        </trans-unit>
        <trans-unit id="cf30b67e2b9d6eefe96e2a44b56b701c3a71843b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Value&lt;/code&gt; part is any expression, when used in binary construction. Used in binary matching, the &lt;code&gt;Value&lt;/code&gt; part must be a literal or a variable. For more information about the &lt;code&gt;Value&lt;/code&gt; part, see &lt;code&gt;&lt;a href=&quot;#Constructing%20Binaries%20and%20Bitstrings&quot;&gt;Constructing Binaries and Bitstrings&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Matching%20Binaries&quot;&gt;Matching Binaries&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; バイナリ構築に使用した場合の部分は、任意の式です。バイナリマッチングで使用する場合、 &lt;code&gt;Value&lt;/code&gt; 部分はリテラルまたは変数である必要があります。詳細については &lt;code&gt;Value&lt;/code&gt; 一部、見 &lt;code&gt;&lt;a href=&quot;#Constructing%20Binaries%20and%20Bitstrings&quot;&gt;Constructing Binaries and Bitstrings&lt;/a&gt;&lt;/code&gt; し、 &lt;code&gt;&lt;a href=&quot;#Matching%20Binaries&quot;&gt;Matching Binaries&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db41e1083994609150ba03a58467ce1564f93559" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Viewer&lt;/code&gt; will automatically pull events from the &lt;code&gt;Collector&lt;/code&gt; and display them on the screen.</source>
          <target state="translated">&lt;code&gt;Viewer&lt;/code&gt; は自動的からイベントを引っ張ってくる &lt;code&gt;Collector&lt;/code&gt; と、画面上に表示します。</target>
        </trans-unit>
        <trans-unit id="8afb3e18be8e7e2fb56c7adc4a8999ad88a05635" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Viewer&lt;/code&gt; will by default create a &lt;code&gt;Collector&lt;/code&gt; for you. With a few options and some configuration settings you can start collecting &lt;code&gt;Events&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Viewer&lt;/code&gt; は、デフォルトで作成される &lt;code&gt;Collector&lt;/code&gt; あなたのため。いくつかのオプションといくつかの構成設定を使用して、 &lt;code&gt;Events&lt;/code&gt; 収集を開始できます。</target>
        </trans-unit>
        <trans-unit id="12a1a53435b86d328cae136152477d1bdb078001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XXL&lt;/code&gt; operator is defined for the interpretation of any of the LineOp operators applied to a set of function calls. The result is that of replacing the function call with a line numbered function call, that is, each of the two functions of the call is replaced by a pair of the function and the line where the function is defined. The effect of the &lt;code&gt;XXL&lt;/code&gt; operator can be undone by the LineOp operators. For instance, &lt;code&gt;(Lin)&amp;nbsp;(XXL)&amp;nbsp;(Lin)&amp;nbsp;E&lt;/code&gt; is equivalent to &lt;code&gt;(Lin)&amp;nbsp;E&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XXL&lt;/code&gt; のオペレータは、関数呼び出しのセットに適用LineOpオペレータの任意の解釈のために定義されています。結果は、関数呼び出しを行番号付きの関数呼び出しで置き換えることです。つまり、呼び出しの2つの関数はそれぞれ、関数と関数が定義されている行のペアで置き換えられます。 &lt;code&gt;XXL&lt;/code&gt; オペレーターの効果は、LineOpオペレーターによって元に戻すことができます。例えば、 &lt;code&gt;(Lin)&amp;nbsp;(XXL)&amp;nbsp;(Lin)&amp;nbsp;E&lt;/code&gt; と等価である &lt;code&gt;(Lin)&amp;nbsp;E&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="773f8eacbf90d517d7610d94842c0bab01a3934c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ZipHandle&lt;/code&gt; is closed if the process that originally opened the archive dies.</source>
          <target state="translated">&lt;code&gt;ZipHandle&lt;/code&gt; は、プロセスが最初にアーカイブ金型を開いている場合は閉じています。</target>
        </trans-unit>
        <trans-unit id="6a10f4396b335e787b9182ce75a8ccae749ae857" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_test&lt;/code&gt; macro takes any expression (the &quot;body&quot;) as argument, and places it within a fun-expression (along with some extra information). The body can be any kind of test expression, just like the body of a simple test function.</source>
          <target state="translated">&lt;code&gt;_test&lt;/code&gt; マクロは引数として任意の式（「体」）をとり、（いくつかの余分な情報と一緒に）楽しい式の中でそれを配置します。本体は、単純なテスト関数の本体と同様に、任意の種類のテスト式にすることができます。</target>
        </trans-unit>
        <trans-unit id="21e2f2fedc48b32638d6fb2b72fe74559f091a86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accept&lt;/code&gt; call does &lt;strong&gt;not&lt;/strong&gt; have to be issued from the socket owner process. Using version 5.5.3 and higher of the emulator, multiple simultaneous accept calls can be issued from different processes, which allows for a pool of acceptor processes handling incoming connections.</source>
          <target state="translated">&lt;code&gt;accept&lt;/code&gt; 呼び出しがない&lt;strong&gt;ではない&lt;/strong&gt;ソケットの所有者のプロセスから発行する必要があります。エミュレーターのバージョン5.5.3以降を使用すると、異なるプロセスから複数の同時受け入れ呼び出しを発行できるため、着信接続を処理する受け入れプロセスのプールが可能になります。</target>
        </trans-unit>
        <trans-unit id="b97c48085c09e86337df00a4b0a18e9e9f983484" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apread/4&lt;/code&gt; function reads from a specified position, combining the &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#aread-3&quot;&gt;aread/3&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;apread/4&lt;/code&gt; 機能を組み合わせ、指定された位置から読み取り &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#aread-3&quot;&gt;aread/3&lt;/a&gt;&lt;/code&gt; 機能します。</target>
        </trans-unit>
        <trans-unit id="6e1ba830557bf0975fcfe18ee483f0f3bec5d278" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apwrite/4&lt;/code&gt; function writes to a specified position, combining the &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#awrite-3&quot;&gt;awrite/3&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;apwrite/4&lt;/code&gt; 機能を組み合わせ、指定された位置に書き込む &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#awrite-3&quot;&gt;awrite/3&lt;/a&gt;&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="00d3c3634428cbc77b5aceea9f983ec649758967" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert&lt;/code&gt; macro can be used anywhere in a program, not just in unit tests, to check pre/postconditions and invariants. For example:</source>
          <target state="translated">&lt;code&gt;assert&lt;/code&gt; マクロは、事前/事後条件および不変条件をチェックするだけではなく、ユニットテストでは、プログラムで使用どこでもすることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="108ceadd98496de12d8902f0058bac96f4aa9204" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_data&lt;/code&gt; is passed to the &lt;code&gt;do_perm&lt;/code&gt; function. We do not use a &lt;code&gt;async_free&lt;/code&gt; function (the last argument to &lt;code&gt;driver_async&lt;/code&gt;), it is only used if the task is cancelled programmatically.</source>
          <target state="translated">&lt;code&gt;async_data&lt;/code&gt; はに渡される &lt;code&gt;do_perm&lt;/code&gt; の機能。私たちが使用していない &lt;code&gt;async_free&lt;/code&gt; の機能（最後の引数 &lt;code&gt;driver_async&lt;/code&gt; を）、それが唯一のタスクがプログラムにキャンセルされた場合に使用されています。</target>
        </trans-unit>
        <trans-unit id="4cd04a38dd6fcdc2cd251ae665b899f10977e42f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_data&lt;/code&gt; is the argument to the functions &lt;code&gt;async_invoke&lt;/code&gt; and &lt;code&gt;async_free&lt;/code&gt;. It is typically a pointer to a structure containing a pipe or event that can be used to signal that the async operation completed. The data is to be freed in &lt;code&gt;async_free&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;async_data&lt;/code&gt; は、関数の引数である &lt;code&gt;async_invoke&lt;/code&gt; と &lt;code&gt;async_free&lt;/code&gt; 。これは通常、非同期操作が完了したことを通知するために使用できるパイプまたはイベントを含む構造へのポインターです。データは &lt;code&gt;async_free&lt;/code&gt; で解放されます。</target>
        </trans-unit>
        <trans-unit id="61c5f2724e8a89f933cb80bf3b2eb6cc8b3b6977" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;avg1/0&lt;/code&gt;, &lt;code&gt;avg5/0&lt;/code&gt;, and &lt;code&gt;avg15/0&lt;/code&gt; functions can be used for retrieving system load values, and the &lt;code&gt;util/0&lt;/code&gt; and &lt;code&gt;util/1&lt;/code&gt; functions can be used for retrieving CPU utilization values.</source>
          <target state="translated">&lt;code&gt;avg1/0&lt;/code&gt; 、 &lt;code&gt;avg5/0&lt;/code&gt; 、及び &lt;code&gt;avg15/0&lt;/code&gt; 関数は、システムの負荷値を取得するために使用することができる、及び &lt;code&gt;util/0&lt;/code&gt; 及び &lt;code&gt;util/1&lt;/code&gt; の機能は、CPU使用率の値を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="a43d2dcf5e0e967eda5efa53bd70665dc5d59efa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blog()&lt;/code&gt; functions can also be used for internally formatted logs, but in this case they must be called with binaries constructed with calls to &lt;code&gt;term_to_binary/1&lt;/code&gt;. There is no check to ensure this, it is entirely the responsibility of the caller. If these functions are called with binaries that do not correspond to Erlang terms, the &lt;code&gt;&lt;a href=&quot;#chunk-2&quot;&gt;chunk/2,3&lt;/a&gt;&lt;/code&gt; and automatic repair functions fail. The corresponding terms (not the binaries) are returned when &lt;code&gt;chunk/2,3&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;blog()&lt;/code&gt; 関数は、内部でもフォーマットされたログに使用することができますが、この場合には、彼らはへの呼び出しで構成バイナリで呼び出さなければなりません &lt;code&gt;term_to_binary/1&lt;/code&gt; 。これを確認するためのチェックはありません。それは完全に呼び出し元の責任です。これらの関数がErlang用語に対応しないバイナリで呼び出されると、 &lt;code&gt;&lt;a href=&quot;#chunk-2&quot;&gt;chunk/2,3&lt;/a&gt;&lt;/code&gt; および自動修復関数は失敗します。対応する用語（バイナリではない）は、 &lt;code&gt;chunk/2,3&lt;/code&gt; が呼び出されたときに返されます。</target>
        </trans-unit>
        <trans-unit id="37d74f76daa8e51f123951ddaf373680517fc012" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;channel_callback&lt;/code&gt; is the module that implements the &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; (replaces ssh_daemon_channel) behaviour in the daemon. See the section &lt;code&gt;&lt;a href=&quot;using_ssh#usersguide_creating_a_subsystem&quot;&gt;Creating a Subsystem&lt;/a&gt;&lt;/code&gt; in the User's Guide for more information and an example.</source>
          <target state="translated">&lt;code&gt;channel_callback&lt;/code&gt; は実装モジュールである &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; デーモンに（置き換えssh_daemon_channel）の動作を。詳細と例については、 『ユーザーズガイド』の「 &lt;code&gt;&lt;a href=&quot;using_ssh#usersguide_creating_a_subsystem&quot;&gt;Creating a Subsystem&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="b8493f2b264f76e709a289fe048f59895e05cdc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chmod&lt;/code&gt; above makes the &lt;code&gt;.erlang.cookie&lt;/code&gt; file accessible only by the owner of the file. This is a requirement.</source>
          <target state="translated">上記の &lt;code&gt;chmod&lt;/code&gt; は、 &lt;code&gt;.erlang.cookie&lt;/code&gt; ファイルにファイルの所有者のみがアクセスできるようにします。これは要件です。</target>
        </trans-unit>
        <trans-unit id="067ed8257f3ed48d1dd77d1c82e5f73c03791be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;client_directory&lt;/code&gt; in the directory structure of the master nodes must be specified.</source>
          <target state="translated">マスターノードのディレクトリ構造の &lt;code&gt;client_directory&lt;/code&gt; を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="97ad2677bec8a2ec1b2eaf275491aa26823e6cdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clients&lt;/code&gt; directory is to have one subdirectory per supported client node. The name of each client directory is to be the name of the corresponding client node. As a minimum, each client directory is to contain the &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;releases&lt;/code&gt; subdirectories. These directories are used to store information about installed releases and to appoint the current release to the client. The &lt;code&gt;$ROOT&lt;/code&gt; directory thus contains the following:</source>
          <target state="translated">&lt;code&gt;clients&lt;/code&gt; ディレクトリには、サポートされているクライアントノードごとに1つのサブディレクトリを持つことです。各クライアントディレクトリの名前は、対応するクライアントノードの名前になります。少なくとも、各クライアントディレクトリには &lt;code&gt;bin&lt;/code&gt; および &lt;code&gt;releases&lt;/code&gt; サブディレクトリが含まれます。これらのディレクトリは、インストールされているリリースに関する情報を格納し、クライアントに現在のリリースを指定するために使用されます。したがって、 &lt;code&gt;$ROOT&lt;/code&gt; ディレクトリには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="fef0ac1b98cce64ffd1d82b4509565a3e18b84ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;code_change&lt;/code&gt; method must also be implemented.</source>
          <target state="translated">&lt;code&gt;code_change&lt;/code&gt; の方法も実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="dfba9577e3cba70bb212c1548338d8d33c8f09a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;combined&lt;/code&gt; format is one line looking like this: &lt;code&gt;remotehost rfc931 authuser [date] &quot;request&quot; status bytes &quot;referer&quot; &quot;user_agent&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;combined&lt;/code&gt; 形式は次のように見て一列である： &lt;code&gt;remotehost rfc931 authuser [date] &quot;request&quot; status bytes &quot;referer&quot; &quot;user_agent&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b60f349fe6a82d8f3ab2d525a727ef964290939" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;complex&lt;/code&gt; process does the following:</source>
          <target state="translated">&lt;code&gt;complex&lt;/code&gt; プロセスは、以下のことを実行します。</target>
        </trans-unit>
        <trans-unit id="ceca332ed5fece3a22bbc2b65250bbdfb9575097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;complex&lt;/code&gt; process performs the following:</source>
          <target state="translated">&lt;code&gt;complex&lt;/code&gt; プロセスは、以下を実行します：</target>
        </trans-unit>
        <trans-unit id="3748b6dda37726d1886cb8a28dacde2fa7798fe9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;config&lt;/code&gt; macro is defined in &lt;code&gt;ct.hrl&lt;/code&gt;. This macro is to be used to retrieve information from the &lt;code&gt;Config&lt;/code&gt; variable sent to all test cases. It is used with two arguments; the first is the name of the configuration variable to retrieve, the second is the &lt;code&gt;Config&lt;/code&gt; variable supplied to the test case.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; マクロはで定義され &lt;code&gt;ct.hrl&lt;/code&gt; 。このマクロは、すべてのテストケースに送信される &lt;code&gt;Config&lt;/code&gt; 変数から情報を取得するために使用されます。2つの引数とともに使用されます。1つ目は取得する構成変数の名前、2つ目はテストケースに提供される &lt;code&gt;Config&lt;/code&gt; 変数です。</target>
        </trans-unit>
        <trans-unit id="3402fd646c2b066512d58aeec8dd8cb2dfa256aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configure&lt;/code&gt; script will issue a warning when a default value is used. When a variable has been set, no warning will be issued.</source>
          <target state="translated">&lt;code&gt;configure&lt;/code&gt; のデフォルト値が使用されている場合、スクリプトは警告を発行します。変数が設定されている場合、警告は発行されません。</target>
        </trans-unit>
        <trans-unit id="6288c90b6c5e2f3d2b468cb02b51d6affc24bf92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configure&lt;/code&gt; scripts are generated by invoking &lt;code&gt;./otp_build autoconf&lt;/code&gt; in the &lt;code&gt;$ERL_TOP&lt;/code&gt; directory. The &lt;code&gt;configure&lt;/code&gt; scripts also have to be regenerated when a &lt;code&gt;configure.in&lt;/code&gt; or &lt;code&gt;aclocal.m4&lt;/code&gt; file has been modified. Note that when checking out a branch a &lt;code&gt;configure.in&lt;/code&gt; or &lt;code&gt;aclocal.m4&lt;/code&gt; file may change content, and you may therefore have to regenerate the &lt;code&gt;configure&lt;/code&gt; scripts when checking out a branch. Regenerated &lt;code&gt;configure&lt;/code&gt; scripts imply that you have to run &lt;code&gt;configure&lt;/code&gt; and build again.</source>
          <target state="translated">&lt;code&gt;configure&lt;/code&gt; スクリプトは、呼び出すことによって生成された &lt;code&gt;./otp_build autoconf&lt;/code&gt; で &lt;code&gt;$ERL_TOP&lt;/code&gt; ディレクトリ。 &lt;code&gt;configure&lt;/code&gt; スクリプトは、ときにも再生成する必要が &lt;code&gt;configure.in&lt;/code&gt; か &lt;code&gt;aclocal.m4&lt;/code&gt; ファイルが変更されました。ブランチをチェックアウトするとき、 &lt;code&gt;configure.in&lt;/code&gt; または &lt;code&gt;aclocal.m4&lt;/code&gt; ファイルは内容を変更する可能性があるため、ブランチをチェックアウトするときに &lt;code&gt;configure&lt;/code&gt; スクリプトを再生成する必要があることに注意してください。再生成された &lt;code&gt;configure&lt;/code&gt; スクリプトは、 &lt;code&gt;configure&lt;/code&gt; を実行して再度ビルドする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="208c163b5d9b18adfd658c53d3afa3ceb105c168" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;connect&lt;/code&gt; function looks a bit different too. We connect using the asynchronous &lt;code&gt;PQconnectStart&lt;/code&gt; function. After the connection is started, we retrieve the socket for the connection with &lt;code&gt;PQsocket&lt;/code&gt;. This socket is used with the &lt;code&gt;driver_select&lt;/code&gt; function to wait for connection. When the socket is ready for input or for output, the &lt;code&gt;ready_io&lt;/code&gt; function is called.</source>
          <target state="translated">&lt;code&gt;connect&lt;/code&gt; 機能は、あまりにも少し異なって見えます。非同期の &lt;code&gt;PQconnectStart&lt;/code&gt; 関数を使用して接続します。接続が開始された後、 &lt;code&gt;PQsocket&lt;/code&gt; を使用して接続用のソケットを取得します。このソケットは、 &lt;code&gt;driver_select&lt;/code&gt; 関数と共に使用され、接続を待機します。ソケットが入力または出力の準備ができると、 &lt;code&gt;ready_io&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="72241940e6969f3882cb2063d805e933d9f13162" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console&lt;/code&gt; option is &lt;strong&gt;not&lt;/strong&gt; intended for production. It is &lt;strong&gt;only&lt;/strong&gt; a convenient way to debug Erlang services during development.</source>
          <target state="translated">&lt;code&gt;console&lt;/code&gt; オプションはされ&lt;strong&gt;ない&lt;/strong&gt;生産のためのもの。これは、開発中にErlangサービスをデバッグする便利な方法に&lt;strong&gt;すぎません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="09d03cd7b2afda946d29b4dfa4871ca45c957a3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;content&lt;/code&gt; field of the top element is a list of records that shows the structure and data of the document. If it is a simple document like:</source>
          <target state="translated">先頭の要素の &lt;code&gt;content&lt;/code&gt; フィールドは、ドキュメントの構造とデータを示すレコードのリストです。次のような単純なドキュメントの場合：</target>
        </trans-unit>
        <trans-unit id="838c0fd05d2d1deb4094b06de0e616a5af7c6e8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; option inhibits the call to &lt;code&gt;trace(stop)&lt;/code&gt; and leaves it up to the caller to stop tracing at a suitable time.</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; オプションがへの呼び出し阻害 &lt;code&gt;trace(stop)&lt;/code&gt; 適切な時間にトレースを停止すると、発信者への葉、それをアップします。</target>
        </trans-unit>
        <trans-unit id="5e5e4cf83680d9fc0726d1fa4e444a1ac9be072e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;control&lt;/code&gt; entry is called from the emulator when the Erlang code calls &lt;code&gt;port_control/3&lt;/code&gt;, to do the actual work. We have defined a simple set of commands: &lt;code&gt;connect&lt;/code&gt; to log in to the database, &lt;code&gt;disconnect&lt;/code&gt; to log out, and &lt;code&gt;select&lt;/code&gt; to send a SQL-query and get the result. All results are returned through &lt;code&gt;rbuf&lt;/code&gt;. The library &lt;code&gt;ei&lt;/code&gt; in &lt;code&gt;erl_interface&lt;/code&gt; is used to encode data in binary term format. The result is returned to the emulator as binary terms, so &lt;code&gt;binary_to_term&lt;/code&gt; is called in Erlang to convert the result to term form.</source>
          <target state="translated">&lt;code&gt;control&lt;/code&gt; Erlangのコードを呼び出したときにエントリはエミュレータから呼び出され &lt;code&gt;port_control/3&lt;/code&gt; を実際の作業を行うには、。データベースにログイン &lt;code&gt;connect&lt;/code&gt; し、ログアウトするために &lt;code&gt;disconnect&lt;/code&gt; し、SQLクエリを送信して結果を取得することを &lt;code&gt;select&lt;/code&gt; する、単純なコマンドセットを定義しました。すべての結果は &lt;code&gt;rbuf&lt;/code&gt; を介して返されます。 &lt;code&gt;erl_interface&lt;/code&gt; のライブラリー &lt;code&gt;ei&lt;/code&gt; は、データを2項形式でエンコードするために使用されます。結果はバイナリ用語としてエミュレータに返されるため、Erlangで &lt;code&gt;binary_to_term&lt;/code&gt; が呼び出され、結果が用語形式に変換されます。</target>
        </trans-unit>
        <trans-unit id="26bab11093554a028ef86c3afb6f974cfc496b9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;convert_to_c&lt;/code&gt; function is the same as before, but here it is used as a fun:</source>
          <target state="translated">&lt;code&gt;convert_to_c&lt;/code&gt; 機能は以前と同じですが、ここではそれが楽しみとして使用されます。</target>
        </trans-unit>
        <trans-unit id="77c0725ecb5968616addeb9bf220dfefe059032f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cprof&lt;/code&gt; module is used to profile a program to find out how many times different functions are called. Breakpoints similar to local call trace, but containing a counter, are used to minimise runtime performance impact.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; のモジュールは異なる機能が呼び出された回数を調べるためにプログラムをプロファイリングするために使用されます。ローカルコールトレースに似ていますが、カウンターが含まれているブレークポイントは、実行時のパフォーマンスへの影響を最小限に抑えるために使用されます。</target>
        </trans-unit>
        <trans-unit id="9716455d32bb78ba694b642a2f677996c5c94a39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; mode option is applied to the generated stream of bytes prior to sending them to the SFTP server. This is intended for encryption but can be used for other purposes.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モードオプションは、SFTPサーバに送信する前にバイトの生成されたストリームに適用されます。これは暗号化を目的としていますが、他の目的にも使用できます。</target>
        </trans-unit>
        <trans-unit id="f05085fc1befe3aa6ba53fe6204755e8c7f0ad8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ct_hooks&lt;/code&gt; statement must look as follows:</source>
          <target state="translated">&lt;code&gt;ct_hooks&lt;/code&gt; のステートメントは次のように見える必要があります。</target>
        </trans-unit>
        <trans-unit id="195e3e1b4f16da2ed99752167d29e762d1e2035f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ct_run&lt;/code&gt; program is automatically installed with Erlang/OTP and the &lt;code&gt;Common Test&lt;/code&gt; application (for more information, see section &lt;code&gt;&lt;a href=&quot;install_chapter&quot;&gt;Installation&lt;/a&gt;&lt;/code&gt; in the User's Guide). The program accepts different start flags. Some flags trigger &lt;code&gt;ct_run&lt;/code&gt; to start &lt;code&gt;Common Test&lt;/code&gt; and pass on data to it. Some flags start an Erlang node prepared for running &lt;code&gt;Common Test&lt;/code&gt; in a particular mode.</source>
          <target state="translated">&lt;code&gt;ct_run&lt;/code&gt; のプログラムが自動的にアーラン/ OTPと一緒にインストールされた &lt;code&gt;Common Test&lt;/code&gt; （セクションの詳細については、アプリケーション &lt;code&gt;&lt;a href=&quot;install_chapter&quot;&gt;Installation&lt;/a&gt;&lt;/code&gt; ユーザーズガイドを）。プログラムは異なる開始フラグを受け入れます。一部のフラグは、 &lt;code&gt;ct_run&lt;/code&gt; をトリガーして &lt;code&gt;Common Test&lt;/code&gt; を開始し、それにデータを渡します。一部のフラグは、特定のモードで &lt;code&gt;Common Test&lt;/code&gt; を実行するために準備されたErlangノードを開始します。</target>
        </trans-unit>
        <trans-unit id="0bead0eeaff46c7e466e0712fc0054654e293c43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ct_run&lt;/code&gt; program sets the exit status before shutting down. The following values are defined:</source>
          <target state="translated">&lt;code&gt;ct_run&lt;/code&gt; のプログラムがシャットダウンする前に終了ステータスを設定します。以下の値が定義されています。</target>
        </trans-unit>
        <trans-unit id="5e688bf44ef358ec92d20ce42ff6bf380d1fb9a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cth_conn_log&lt;/code&gt; hook performs unformatted logging of Telnet data to a separate text file. All Telnet communication is captured and printed, including any data sent from the server. The link to this text file is located at the top of the test case HTML log.</source>
          <target state="translated">&lt;code&gt;cth_conn_log&lt;/code&gt; 別のテキストファイルへのTelnetデータのフックを行い、未フォーマットのログ。サーバーから送信されたデータを含め、すべてのTelnet通信がキャプチャおよび印刷されます。このテキストファイルへのリンクは、テストケースのHTMLログの上部にあります。</target>
        </trans-unit>
        <trans-unit id="a68179b6708f261780e3204a93ccf67ebff3b412" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dbg&lt;/code&gt; module is primarily targeted towards tracing through the &lt;code&gt;erlang:trace/3&lt;/code&gt; function. It is sometimes desired to trace messages in a more delicate way, which can be done with the help of the &lt;code&gt;seq_trace&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; モジュールは、主にを通じてトレースを対象として &lt;code&gt;erlang:trace/3&lt;/code&gt; 機能。 &lt;code&gt;seq_trace&lt;/code&gt; モジュールの助けを借りて行うことができる、より繊細な方法でメッセージをトレースすることが望ましい場合があります。</target>
        </trans-unit>
        <trans-unit id="4ec06ab24b2bef8a81af6b12d4353768a1844399" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dbg&lt;/code&gt; server keeps a list of nodes where tracing should be performed. Whenever a &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; call or a &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; call is made, it is executed for all nodes in this list including the local node (except for &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; with a specific &lt;code&gt;pid()&lt;/code&gt; or &lt;code&gt;port()&lt;/code&gt; as first argument, in which case the command is executed only on the node where the designated process or port resides).</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; サーバーは、トレースが実行されるべきノードのリストを保持します。たび &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; コール又は &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; 呼び出しが行われ、それは、ローカル以外のノード（を含む、このリスト内のすべてのノードに対して実行される &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; 特定部と &lt;code&gt;pid()&lt;/code&gt; または &lt;code&gt;port()&lt;/code&gt; の最初の引数として、コマンドが指定されたプロセスまたはポートが存在するノードでのみ実行される場合）。</target>
        </trans-unit>
        <trans-unit id="c217008a9ef77e9f7c9c82997e3edae1e2b0a1c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dbg&lt;/code&gt; variants of match specifications have an imperative approach to the match specification body, the ETS dialect has not. The fun body for &lt;code&gt;ets:fun2ms/1&lt;/code&gt; returns the result without side effects. As matching (&lt;code&gt;=&lt;/code&gt;) in the body of the match specifications is not allowed (for performance reasons) the only thing left, more or less, is term construction.</source>
          <target state="translated">マッチ仕様の &lt;code&gt;dbg&lt;/code&gt; バリアントは、マッチ仕様の本体に対して必須のアプローチを持っていますが、ETS方言は持っていません。 &lt;code&gt;ets:fun2ms/1&lt;/code&gt; のfun body は、副作用なしで結果を返します。一致仕様の本体での一致（ &lt;code&gt;=&lt;/code&gt; ）は（パフォーマンス上の理由から）許可されないため、残されているのは多かれ少なかれ、用語構成のみです。</target>
        </trans-unit>
        <trans-unit id="8b1d45e514e2b4bb0f72c0e576b456b901110516" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debug_info&lt;/code&gt; option ensures that the BEAM file contains debug information, which makes it possible to find unused local functions.</source>
          <target state="translated">&lt;code&gt;debug_info&lt;/code&gt; BEAMファイルが使用されていない地元の機能を発見することが可能となり、デバッグ情報が含まれていることのオプションを保証します。</target>
        </trans-unit>
        <trans-unit id="f272f87848e9520c4164ada69cea273706e63692" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debug_info&lt;/code&gt; parameter controls whether the debug information in the beam file should be kept (&lt;code&gt;keep&lt;/code&gt;) or stripped &lt;code&gt;strip&lt;/code&gt; when the file is copied to the target system.</source>
          <target state="translated">&lt;code&gt;debug_info&lt;/code&gt; ビーム・ファイル内のデバッグ情報（保たれるべきであるかどうかのパラメータを制御 &lt;code&gt;keep&lt;/code&gt; ）または剥離 &lt;code&gt;strip&lt;/code&gt; ファイルがターゲット・システムにコピーされたとき。</target>
        </trans-unit>
        <trans-unit id="6fb823bf619fb63ef67310a79ad7a561ee4d0a34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; function does not delete the table from the database since unloading an MIB does not necessarily mean that the table should be destroyed.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 機能は、必ずしもテーブルが破壊されなければならないことを意味するものではないMIBをアンロードするためのデータベースからテーブルを削除しません。</target>
        </trans-unit>
        <trans-unit id="9bb6d436299249f5caa30b07b29030812a609536" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; function does not delete the variable from the database.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 機能は、データベースから変数を削除しません。</target>
        </trans-unit>
        <trans-unit id="7056e5309dbe8cb35a67254e724ea1561fd3590e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; operation is considered successful if the element was not present in the table. Hence all attempts to check that the element is present in the Ets/Mnesia table before deletion are unnecessary. Here follows an example for Ets tables:</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 要素がテーブルに存在していなかった場合は、操作が成功したとみなされます。したがって、削除前に要素がEts / Mnesiaテーブルに存在することを確認するすべての試みは不要です。以下はEtsテーブルの例です：</target>
        </trans-unit>
        <trans-unit id="3ec29833516e95ca8c52bcd06ca0329b6a9912b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disc_copies&lt;/code&gt; tables are stored on disk with &lt;code&gt;.DCL&lt;/code&gt; and &lt;code&gt;.DCD&lt;/code&gt; files, which are standard &lt;code&gt;disk_log&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;disc_copies&lt;/code&gt; のテーブルが持つディスクに格納され &lt;code&gt;.DCL&lt;/code&gt; と &lt;code&gt;.DCD&lt;/code&gt; 標準装備されたファイル、 &lt;code&gt;disk_log&lt;/code&gt; のファイル。</target>
        </trans-unit>
        <trans-unit id="0566aa9127b7a16298ed02e87fbca3df443437c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disk_log&lt;/code&gt; module does not report errors to the &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; module. It is up to the caller to decide whether to employ the error logger. Function &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; can be used to produce readable messages from error replies. However, information events are sent to the error logger in two situations, namely when a log is repaired, or when a file is missing while reading chunks.</source>
          <target state="translated">&lt;code&gt;disk_log&lt;/code&gt; モジュールは、にエラーを報告しません &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; のモジュール。エラーロガーを使用するかどうかは、呼び出し元が決定します。関数 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; を使用して、エラー応答から読み取り可能なメッセージを生成できます。ただし、情報イベントは、ログが修復されたとき、またはチャンクの読み取り中にファイルが失われたときの2つの状況でエラーロガーに送信されます。</target>
        </trans-unit>
        <trans-unit id="cfcfef3897d14b434ad165428853c39b5f2890f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dist_util:handshake_we_started/1&lt;/code&gt; and &lt;code&gt;dist_util:handshake_other_started/1&lt;/code&gt; functions takes a &lt;code&gt;#hs_data{}&lt;/code&gt; record as argument. There are quite a lot of fields in this record that you need to set. The record is defined in &lt;code&gt;kernel/include/dist_util.hrl&lt;/code&gt;. Not documented fields should not be set, i.e., should be left as &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dist_util:handshake_we_started/1&lt;/code&gt; と &lt;code&gt;dist_util:handshake_other_started/1&lt;/code&gt; の機能がかかり &lt;code&gt;#hs_data{}&lt;/code&gt; 引数としてレコード。このレコードには、設定する必要のあるフィールドがたくさんあります。レコードは &lt;code&gt;kernel/include/dist_util.hrl&lt;/code&gt; で定義されています。ドキュメント化されていないフィールドは設定しないでください。つまり、 &lt;code&gt;undefined&lt;/code&gt; のままにしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="83c7e0ed34c372831d8c8f2866d0a4d8b8af47d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do_select&lt;/code&gt; function initiates a select, and returns if there is no immediate error. The result is returned when &lt;code&gt;ready_io&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;do_select&lt;/code&gt; の即時エラーがない場合、この関数は、選択、およびリターンを開始します。結果は、 &lt;code&gt;ready_io&lt;/code&gt; が呼び出されたときに返されます。</target>
        </trans-unit>
        <trans-unit id="9e898d68f399dcaad71bedb473b4e1db27a86822" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;driver_entry&lt;/code&gt; structure is a C struct that all Erlang drivers define. It contains entry points for the Erlang driver, which are called by the Erlang emulator when Erlang code accesses the driver.</source>
          <target state="translated">&lt;code&gt;driver_entry&lt;/code&gt; の構造は、全てのアーランドライバが定義するC言語の構造体です。これには、ErlangコードがドライバーにアクセスするときにErlangエミュレーターによって呼び出されるErlangドライバーのエントリーポイントが含まれています。</target>
        </trans-unit>
        <trans-unit id="e2f343471e0cd9e732eb94fa594ad01445d525d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entity-Body&lt;/code&gt; as defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;, for example, data sent from a CGI script using the POST method.</source>
          <target state="translated">&lt;code&gt;entity-Body&lt;/code&gt; において定義される &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; 、例えば、データは、POSTメソッドを使用してCGIスクリプトから送信されました。</target>
        </trans-unit>
        <trans-unit id="8485e195c6ca973415a83d30d66c767c905bacbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;epmd&lt;/code&gt; daemon accepts messages from both the local host and remote hosts. However, only the query commands are answered (and acted upon) if the query comes from a remote host. It is always an error to try to register a node name if the client is not a process on the same host as the &lt;code&gt;epmd&lt;/code&gt; instance is running on. Such requests are considered hostile and the connection is closed immediately.</source>
          <target state="translated">&lt;code&gt;epmd&lt;/code&gt; デーモンは、ローカルホストとリモートホストの両方からのメッセージを受け付けます。ただし、クエリがリモートホストからのものである場合は、クエリコマンドのみが応答（および処理）されます。クライアントが &lt;code&gt;epmd&lt;/code&gt; インスタンスが実行されているのと同じホスト上のプロセスでない場合、ノード名を登録しようとすると常にエラーになります。このような要求は敵対的であると見なされ、接続はすぐに閉じられます。</target>
        </trans-unit>
        <trans-unit id="1a8cdcc41303bad80d1836231fd657575e8b7da9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erl&lt;/code&gt; program starts an Erlang runtime system. The exact details (for example, whether &lt;code&gt;erl&lt;/code&gt; is a script or a program and which other programs it calls) are system-dependent.</source>
          <target state="translated">&lt;code&gt;erl&lt;/code&gt; プログラムは、Erlangのランタイムシステムを起動します。正確な詳細（たとえば、 &lt;code&gt;erl&lt;/code&gt; がスクリプトまたはプログラムのどちらであるか、およびそれが呼び出す他のプログラム）はシステムに依存します。</target>
        </trans-unit>
        <trans-unit id="23033c746a70348dcd7ee413398f764a041fafc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erl_boot_server&lt;/code&gt; can read regular files and files in archives. See &lt;code&gt;&lt;a href=&quot;code&quot;&gt;code(3)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;erl_prim_loader(3)&lt;/code&gt; in ERTS.</source>
          <target state="translated">&lt;code&gt;erl_boot_server&lt;/code&gt; は、アーカイブ内の通常のファイルとファイルを読み込むことができます。 &lt;code&gt;erl_prim_loader(3)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;code&quot;&gt;code(3)&lt;/a&gt;&lt;/code&gt; およびerl_prim_loader（3）を参照してください。</target>
        </trans-unit>
        <trans-unit id="cc1db4ac366acb55e5dbd23b870fee87dcf6984d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erl_prim_loader&lt;/code&gt; module interprets the following command-line flags:</source>
          <target state="translated">&lt;code&gt;erl_prim_loader&lt;/code&gt; のモジュールは、次のコマンドラインフラグを解釈します。</target>
        </trans-unit>
        <trans-unit id="9c8443a325361f346c54c5b5b79ecfd176dc3cc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erlang:timestamp()&lt;/code&gt; BIF is equivalent to:</source>
          <target state="translated">&lt;code&gt;erlang:timestamp()&lt;/code&gt; BIFは同等です：</target>
        </trans-unit>
        <trans-unit id="674c071fef1bb6c50be069bf2fac5cfa5b02ddff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erlc&lt;/code&gt; commands can be used to compile SNMP MIBs. Example:</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; のコマンドは、SNMP MIBをコンパイルするために使用することができます。例：</target>
        </trans-unit>
        <trans-unit id="62bad1fda35fe8631456e7f852e564c8e9c8e268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erlc&lt;/code&gt; program provides a common way to run all compilers in the Erlang system. Depending on the extension of each input file, &lt;code&gt;erlc&lt;/code&gt; invokes the appropriate compiler. Regardless of which compiler is used, the same flags are used to provide parameters, such as include paths and output directory.</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; プログラムは、Erlangのシステム内のすべてのコンパイラを実行する一般的な方法を提供します。各入力ファイルの拡張子に応じて、 &lt;code&gt;erlc&lt;/code&gt; は適切なコンパイラーを呼び出します。使用するコンパイラーに関係なく、同じフラグを使用して、インクルードパスや出力ディレクトリなどのパラメーターを提供します。</target>
        </trans-unit>
        <trans-unit id="04a181b53380c41c65d2013dd7fbc831073b3697" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erlc&lt;/code&gt; program provides an even better way to compile modules from the shell, see the &lt;code&gt;erlc(1)&lt;/code&gt; manual page in ERTS. It understands a number of flags that can be used to define macros, add search paths for include files, and more.</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; プログラムが参照、シェルからモジュールをコンパイルするためのより良い方法を提供し &lt;code&gt;erlc(1)&lt;/code&gt; ERTSでマニュアルページを。マクロの定義、インクルードファイルの検索パスの追加などに使用できるいくつかのフラグを理解しています。</target>
        </trans-unit>
        <trans-unit id="cd3c7d4f5dac617c7aad52a992257a0165d9e724" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_logger&lt;/code&gt; API still exists, but should only be used by legacy code. It will be removed in a later release.</source>
          <target state="translated">&lt;code&gt;error_logger&lt;/code&gt; の APIはまだ存在しているが、唯一のレガシーコードで使用する必要があります。今後のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="d68556b2eb1fae2f09bd4af885781dca52da64d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_logger_format_depth&lt;/code&gt; variable is &lt;code&gt;deprecated&lt;/code&gt; since the &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;Logger API&lt;/a&gt;&lt;/code&gt; was introduced in Erlang/OTP 21.0. The variable, and this function, are kept for backwards compatibility since they still might be used by legacy report handlers.</source>
          <target state="translated">&lt;code&gt;error_logger_format_depth&lt;/code&gt; の変数がされ &lt;code&gt;deprecated&lt;/code&gt; 以来 &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;Logger API&lt;/a&gt;&lt;/code&gt; アーラン/ OTP 21.0で導入されました。変数とこの関数は、従来のレポートハンドラーで引き続き使用される可能性があるため、下位互換性のために保持されています。</target>
        </trans-unit>
        <trans-unit id="7c78dbc6e06eb7032ca1037abf4bb7cf984ec4a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erts_alloc_config(3)&lt;/code&gt; tool can be used to aid creation of an &lt;code&gt;erts_alloc&lt;/code&gt; configuration that is suitable for a limited number of runtime scenarios.</source>
          <target state="translated">&lt;code&gt;erts_alloc_config(3)&lt;/code&gt; ツールは、の作成を補助するために使用することができる &lt;code&gt;erts_alloc&lt;/code&gt; のランタイム・シナリオの限られた数の適した構成を。</target>
        </trans-unit>
        <trans-unit id="6d445f376d6f420d187f6eefce3f926292a91d52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;et&lt;/code&gt; module is not like other modules. It contains a function called &lt;code&gt;et:trace_me/5&lt;/code&gt;. Which is a function that does not do any useful stuff at all. Its sole purpose is to be a function that is easy to trace. A call to it may be something like:</source>
          <target state="translated">&lt;code&gt;et&lt;/code&gt; モジュールは他のモジュールと同様ではありません。 &lt;code&gt;et:trace_me/5&lt;/code&gt; という関数が含まれています。これは、何の役にも立たない機能です。その唯一の目的は、追跡しやすい関数であることです。それへの呼び出しは次のようなものです：</target>
        </trans-unit>
        <trans-unit id="bed59c1de102975ce15ed3e675ac3119209f047d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;etags&lt;/code&gt; program of fairly modern versions of Emacs and XEmacs has native support for Erlang. To check if your version does include this support, issue the command &lt;code&gt;etags --help&lt;/code&gt; at a the command line prompt. At the end of the help text there is a list of supported languages. Unless Erlang is a member of this list I suggest that you should upgrade to a newer version of Emacs.</source>
          <target state="translated">EmacsとXEmacsのかなり最近のバージョンの &lt;code&gt;etags&lt;/code&gt; プログラムは、Erlangをネイティブでサポートしています。バージョンにこのサポートが含まれているかどうかを確認するには、コマンドラインプロンプトで &lt;code&gt;etags --help&lt;/code&gt; コマンドを発行します。ヘルプテキストの最後に、サポートされている言語のリストがあります。Erlangがこのリストのメンバーでない限り、Emacsの新しいバージョンにアップグレードすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="47e6f553b59c8cd440ae6bcf427e51798ed42721" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;etags&lt;/code&gt; utility can also read a list of files from its standard input by supplying a single dash in place of the file names. This feature is useful when a project consists of a large number of files. The standard UNIX command &lt;code&gt;find&lt;/code&gt; can be used to generate the list of files, e.g:</source>
          <target state="translated">&lt;code&gt;etags&lt;/code&gt; ののユーティリティは、ファイル名の代わりに単一のダッシュを供給することにより、標準入力からファイルのリストを読み込むことができます。この機能は、プロジェクトが多数のファイルで構成されている場合に役立ちます。標準のUNIXコマンド &lt;code&gt;find&lt;/code&gt; を使用して、ファイルのリストを生成できます。例：</target>
        </trans-unit>
        <trans-unit id="e41a30417c9eb9b7fd9125a0948a761a185309da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ets:select/2&lt;/code&gt; call conceptually looks like this in the resulting code:</source>
          <target state="translated">&lt;code&gt;ets:select/2&lt;/code&gt; コールは、概念的には結果のコードに次のようになります。</target>
        </trans-unit>
        <trans-unit id="c0a28f71fbf02463cf528426b0591cc67a7a02b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;example_drv_start&lt;/code&gt;, is the only function that is called with a handle to the port instance, so this must be saved. It is customary to use an allocated driver-defined structure for this one, and to pass a pointer back as a reference.</source>
          <target state="translated">&lt;code&gt;example_drv_start&lt;/code&gt; は、ポートのインスタンスへのハンドルと呼ばれている唯一の機能であるので、これを保存しなければなりません。これに割り当てられたドライバ定義の構造を使用し、ポインタを参照として返すのが慣例です。</target>
        </trans-unit>
        <trans-unit id="d0356d1c5d4e8ef894f1ca0204010b1f0f916038" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extended_errors&lt;/code&gt; option enables extended ODBC error information when an operation fails. Rather than returning &lt;code&gt;{error, Reason}&lt;/code&gt;, the failing function will reutrn &lt;code&gt;{error, {ODBCErrorCode, NativeErrorCode, Reason}}&lt;/code&gt;. Note that this information is probably of little use when writing database-independent code, but can be of assistance in providing more sophisticated error handling when dealing with a known underlying database.</source>
          <target state="translated">&lt;code&gt;extended_errors&lt;/code&gt; の操作が失敗したときにオプションが拡張されたODBCエラー情報を可能にします。 &lt;code&gt;{error, Reason}&lt;/code&gt; 返すのではなく、失敗した関数は &lt;code&gt;{error, {ODBCErrorCode, NativeErrorCode, Reason}}&lt;/code&gt; ます。この情報は、データベースに依存しないコードを記述する場合にはほとんど役に立ちませんが、既知の基礎となるデータベースを処理するときに、より洗練されたエラー処理を提供するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c59051a0d238b0abf7c9e7050c91b5361d579937" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra&lt;/code&gt; info is not normally interpreted by the agent, instead it is passed through to the &lt;code&gt;&lt;a href=&quot;snmp_agent_netif&quot;&gt;net-if&lt;/a&gt;&lt;/code&gt; process. It is up to the implementor of that process to make use of this data.</source>
          <target state="translated">&lt;code&gt;extra&lt;/code&gt; 情報は通常、代わりにそれが通過され、エージェントによって解釈されていない &lt;code&gt;&lt;a href=&quot;snmp_agent_netif&quot;&gt;net-if&lt;/a&gt;&lt;/code&gt; 、プロセス。このデータを利用するのは、そのプロセスの実装者次第です。</target>
        </trans-unit>
        <trans-unit id="9363097de66681822e14d18a16cae53b07a71b33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; module accepts raw filenames as input. &lt;code&gt;open_port({spawn_executable, ...} ...)&lt;/code&gt; also accepts them. As mentioned earlier, the arguments specified in the option list to &lt;code&gt;open_port({spawn_executable, ...} ...)&lt;/code&gt; undergo the same conversion as the filenames, meaning that the executable is provided with arguments in UTF-8 as well. This translation is avoided consistently with how the filenames are treated, by giving the argument as a binary.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; モジュールは、入力として生のファイル名を受け入れます。 &lt;code&gt;open_port({spawn_executable, ...} ...)&lt;/code&gt; もそれらを受け入れます。前述のように、オプションリストで &lt;code&gt;open_port({spawn_executable, ...} ...)&lt;/code&gt; 指定された引数は、ファイル名と同じ変換を受けます。つまり、実行可能ファイルにはUTF-8の引数も提供されます。この変換は、引数をバイナリとして与えることにより、ファイル名の処理方法と一貫して回避されます。</target>
        </trans-unit>
        <trans-unit id="56811d8968fc7cff92a38ee6c1b86759f5455dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; module already spread's tags, so there is noo need to manually call these function to get user tags spread to the efile driver through that module.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; モジュールすでに普及のタグ、手動でそのモジュールを介してefileドライバへのユーザータグの広がりを取得するために、これらの関数を呼び出すためのお取置きが必要です。</target>
        </trans-unit>
        <trans-unit id="d1888f67852ce013eb515b48a1f7e3f5fb2b5677" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foo&lt;/code&gt; table is replicated on the two nodes &lt;code&gt;N1&lt;/code&gt; and &lt;code&gt;N2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; テーブルは、2つのノードで複製され &lt;code&gt;N1&lt;/code&gt; 及び &lt;code&gt;N2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58cb0b27674de03ef7e6aa8a782a3f05022f6202" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fprof&lt;/code&gt; module uses tracing to collect profiling data, hence there is no need for special compilation of any module to be profiled. When it starts tracing, &lt;code&gt;fprof&lt;/code&gt; will erase all previous tracing in the node and set the necessary trace flags on the profiling target processes as well as local call trace on all functions in all loaded modules and all modules to be loaded. &lt;code&gt;fprof&lt;/code&gt; erases all tracing in the node when it stops tracing.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; プロファイリングデータを収集するためのトレースモジュールの用途、したがって、プロファイリングするための任意のモジュールの特別なコンパイルの必要はありません。トレースを開始すると、 &lt;code&gt;fprof&lt;/code&gt; はノード内の以前のトレースをすべて消去し、プロファイリングターゲットプロセスに必要なトレースフラグを設定します。また、読み込まれるすべてのモジュールと読み込まれるすべてのモジュールのすべての関数にローカル呼び出しトレースを設定します。 &lt;code&gt;fprof&lt;/code&gt; は、トレースを停止すると、ノード内のすべてのトレースを消去します。</target>
        </trans-unit>
        <trans-unit id="2499ac11d982c28fc125b257bd3bdd2fea444c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fqdn_fun&lt;/code&gt; extracts hostnames (Fully Qualified Domain Names) from uri_id or other ReferenceIDs that are not pre-defined in the public_key function. Suppose you have some URI with a very special protocol-part: &lt;code&gt;myspecial://example.com&quot;&lt;/code&gt;. Since this a non-standard URI there will be no hostname extracted for matching CN-names in the &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fqdn_fun&lt;/code&gt; の PUBLIC_KEY機能にあらかじめ定義されていないuri_idまたは他のReferenceIDsから抽出したホスト名（完全修飾ドメイン名）。非常に特殊なprotocol-part： &lt;code&gt;myspecial://example.com&quot;&lt;/code&gt; を持つURIがあるとします。これは非標準のURIであるため、 &lt;code&gt;Subject&lt;/code&gt; 内の一致するCN名に対してホスト名は抽出されません。</target>
        </trans-unit>
        <trans-unit id="122806faca6d67fa7fa167376a0e47c2c49bcb48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;to&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt; parameters are exactly what they sound like. &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; are visualized in the &lt;code&gt;Viewer&lt;/code&gt; as &quot;lifelines&quot;, with the message passing from one to the other. If &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; are the same value, then it is displayed next to the lifeline as an &quot;action&quot;. The &lt;code&gt;extra_stuff&lt;/code&gt;value is simply data that you can attach that will be displayed when someone actually clicks on the action or message in the &lt;code&gt;Viewer&lt;/code&gt; window.</source>
          <target state="translated">&lt;code&gt;to&lt;/code&gt; 、および &lt;code&gt;message&lt;/code&gt; パラメータは、彼らはのように聞こえる、まさにです。 &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; は &lt;code&gt;Viewer&lt;/code&gt; で「ライフライン」として視覚化され、メッセージは一方から他方へ渡されます。場合 &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; 同じ値であり、それは次の「アクション」などライフラインに表示されます。 &lt;code&gt;extra_stuff&lt;/code&gt; の値は、単に誰かが実際にアクションやメッセージをクリックしたときに表示されます、あなたがそれを添付することができないデータである &lt;code&gt;Viewer&lt;/code&gt; ウィンドウ。 &lt;code&gt;from&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87548be67a9ff93c1ef1ff4d3cbb19180b6403f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ftp&lt;/code&gt; module normally accesses the tar file on disk using the &lt;code&gt;file&lt;/code&gt; module. When other needs arise, you can define your own low-level Erlang functions to perform the writing and reading on the storage media; use function &lt;code&gt;&lt;a href=&quot;#init-3&quot;&gt;init/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ftp&lt;/code&gt; モジュールは、通常使用して、ディスク上のtarファイルアクセス &lt;code&gt;file&lt;/code&gt; のモジュールを。他のニーズが発生した場合は、独自の低レベルErlang関数を定義して、ストレージメディアで書き込みと読み取りを実行できます。関数 &lt;code&gt;&lt;a href=&quot;#init-3&quot;&gt;init/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="601051b0fdf8cf4c5f5015c05c1f7676f5366f6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun()&lt;/code&gt; is very restricted, it can take only a single parameter (the parameter list to match), a sole variable or a list. It needs to use the &lt;code&gt;is_&lt;/code&gt;XXX guard tests and one cannot use language constructs that have no representation in a match_spec (like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;receive&lt;/code&gt; etc). The return value from the fun will be the return value of the resulting match_spec.</source>
          <target state="translated">&lt;code&gt;fun()&lt;/code&gt; 非常に制限されている、それだけで、単一のパラメータ（パラメータリストが一致するように）、唯一の変数やリストを取ることができます。 &lt;code&gt;is_&lt;/code&gt; XXXガードテストを使用する必要があり、match_specで表現を持たない言語構造（ &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;case&lt;/code&gt; 、 &lt;code&gt;receive&lt;/code&gt; など）を使用することはできません。funからの戻り値は、結果のmatch_specの戻り値になります。</target>
        </trans-unit>
        <trans-unit id="000806ecedbeddab2e6bf12ee5fe07ca1e33c2e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun/2&lt;/code&gt; in this option replaces the default host name matching rules. The fun should return a boolean to tell if the Reference ID and Presented ID matches or not. The fun can also return a third value, the atom &lt;code&gt;default&lt;/code&gt;, if the default matching rules shall apply. This makes it possible to augment the tests with a special case:</source>
          <target state="translated">このオプションの &lt;code&gt;fun/2&lt;/code&gt; は、デフォルトのホスト名マッチングルールを置き換えます。funは、参照IDと提示IDが一致するかどうかを示すブール値を返す必要があります。funは、デフォルトのマッチング規則が適用される場合、3番目の値、アトム &lt;code&gt;default&lt;/code&gt; を返すこともできます。これにより、特別なケースでテストを補強することができます。</target>
        </trans-unit>
        <trans-unit id="f52884fca2fcf6439eaac6506d404d211516c579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;functions&lt;/code&gt; filter shows each function as a vertical line in the sequence diagram. A function calling itself is shown as an activity within a function, and all other function calls are shown as interactions between functions.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; フィルタは、シーケンス図の縦線として各機能を示しています。関数呼び出し自体は関数内のアクティビティとして表示され、他のすべての関数呼び出しは関数間の相互作用として表示されます。</target>
        </trans-unit>
        <trans-unit id="3f981dcbf4ac48552e64e421603989d6797ca936" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;garbage_collect&lt;/code&gt; pseudo function has not got an OWN time of zero like &lt;code&gt;suspend&lt;/code&gt;, instead it is equal to the ACC time.</source>
          <target state="translated">&lt;code&gt;garbage_collect&lt;/code&gt; の擬似機能のようなゼロの自身の時間だしていない &lt;code&gt;suspend&lt;/code&gt; 代わりに、それはACC時間に等しいです。</target>
        </trans-unit>
        <trans-unit id="044322659b6e8af2be19d4c036e45080be4df433" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_event&lt;/code&gt; process can go into hibernation (see &lt;code&gt;erlang:hibernate/3&lt;/code&gt;) if a callback function in a handler module specifies &lt;code&gt;hibernate&lt;/code&gt; in its return value. This can be useful if the server is expected to be idle for a long time. However, use this feature with care, as hibernation implies at least two garbage collections (when hibernating and shortly after waking up) and is not something you want to do between each event handled by a busy event manager.</source>
          <target state="translated">&lt;code&gt;gen_event&lt;/code&gt; の冬眠に入ることができるプロセスは、（参照 &lt;code&gt;erlang:hibernate/3&lt;/code&gt; ハンドラモジュールの指定でコールバック関数があれば）、 &lt;code&gt;hibernate&lt;/code&gt; 戻り値に。これは、サーバーが長時間アイドル状態であることが予想される場合に役立ちます。ただし、ハイバネーションは少なくとも2つのガベージコレクションを意味し（ハイバネーション時とウェイクアップの直後）、この機能は注意して使用してください。これは、ビジーなイベントマネージャーによって処理される各イベント間で実行するものではありません。</target>
        </trans-unit>
        <trans-unit id="26a989bcc28ed3e808b806405714b19049fd235b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; to initialize. To ensure a synchronized startup procedure, &lt;code&gt;start_link/3,4&lt;/code&gt; does not return until &lt;code&gt;Module:init/1&lt;/code&gt; has returned.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; のプロセスが呼び出す &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; 初期化します。同期された起動手順を確実にするために、 &lt;code&gt;start_link/3,4&lt;/code&gt; は &lt;code&gt;Module:init/1&lt;/code&gt; が戻るまで戻りません。</target>
        </trans-unit>
        <trans-unit id="fa0125aacc8a9ef2d0db488477563acd091e114f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process can go into hibernation (see &lt;code&gt;erlang:hibernate/3&lt;/code&gt;) if a callback function specifies &lt;code&gt;'hibernate'&lt;/code&gt; instead of a time-out value. This can be useful if the server is expected to be idle for a long time. However, use this feature with care, as hibernation implies at least two garbage collections (when hibernating and shortly after waking up) and is not something you want to do between each call to a busy server.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; の冬眠に入ることができるプロセスは、（参照 &lt;code&gt;erlang:hibernate/3&lt;/code&gt; コールバック関数を指定する場合） &lt;code&gt;'hibernate'&lt;/code&gt; 代わりにタイムアウト値の。これは、サーバーが長時間アイドル状態であることが予想される場合に役立ちます。ただし、ハイバネーションは少なくとも2つのガベージコレクションを意味し（ハイバネーション時とウェイクアップの直後）、ビジー状態のサーバーへの各呼び出しの間に実行したくないため、この機能は注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="93b11bb8bc3cc58fae8df0b4cde4e2b1b7508719" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process has been set to trap exit signals.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; のプロセスは、トラップ出口信号に設定されています。</target>
        </trans-unit>
        <trans-unit id="1a0a8f650014835d8fac6303db526f6a6997059c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process terminates abnormally and logs an error. &lt;code&gt;Opt&lt;/code&gt; is set to the atom &lt;code&gt;terminate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; のプロセスが異常終了し、エラーをログに記録します。 &lt;code&gt;Opt&lt;/code&gt; はアトム &lt;code&gt;terminate&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="a177f7b03da7ce677026ac74a7f1eaf2f38ab48b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; behavior can if this is enabled, regardless of callback mode, automatically &lt;code&gt;call the state callback&lt;/code&gt; with special arguments whenever the state changes so you can write state enter actions near the rest of the state transition rules. It typically looks like this:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; 行動缶これが有効になっている場合は、関係なく、コールバックモードの、自動的に &lt;code&gt;call the state callback&lt;/code&gt; あなたは状態が状態遷移規則の残りの部分の近くにアクションを入力して書くことができるように状態が変化するたびに、特別な引数を持ちます。通常は次のようになります。</target>
        </trans-unit>
        <trans-unit id="bed0fd34af6e417a5ed2971b378b4cefa2ed46b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; behavior supports two callback modes:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; の挙動は、2つのコールバックモードをサポートしています。</target>
        </trans-unit>
        <trans-unit id="17680806ff10db88faa8089ccb57cda1bbf46d1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; does a state transition to &lt;code&gt;NextState&lt;/code&gt; (which can be the same as the current state), sets &lt;code&gt;NewData&lt;/code&gt;, and executes all &lt;code&gt;Actions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はへの状態遷移ない &lt;code&gt;NextState&lt;/code&gt; （現在の状態と同じであることができる）、設定 &lt;code&gt;NewData&lt;/code&gt; 、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b1ba800b2bd8eddab3c29205a82310973e51fec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; does a state transition to &lt;code&gt;State&lt;/code&gt;, which has to be the current state, sets &lt;code&gt;NewData&lt;/code&gt;, and executes all &lt;code&gt;Actions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はへの状態遷移ない &lt;code&gt;State&lt;/code&gt; 、現在の状態である必要があり、設定 &lt;code&gt;NewData&lt;/code&gt; 、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1ff91dbdb67dc0752a1cb136935a70afdac9c712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; engine can automatically make a specialized call to the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; whenever a new state is entered; see &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter()&lt;/a&gt;&lt;/code&gt;. This is for writing code common to all state entries. Another way to do it is to insert an event at the state transition, and/or to use a dedicated state transition function, but that is something you will have to remember at every state transition to the state(s) that need it.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; のエンジンが自動的に特化したコールすることができます &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 新しい状態に入った時はいつでも。 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter()&lt;/a&gt;&lt;/code&gt; を参照してください。これは、すべての状態エントリに共通のコードを記述するためのものです。それを行う別の方法は、状態遷移にイベントを挿入すること、および/または専用の状態遷移関数を使用することですが、それは、それを必要とする状態へのすべての状態遷移で覚えておく必要があるものです。</target>
        </trans-unit>
        <trans-unit id="609a55f5722ed6b61803cc1734f944814dbce653" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; enqueues incoming events in order of arrival and presents these to the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; in that order. The state callback can postpone an event so it is not retried in the current state. After a state change the queue restarts with the postponed events.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は到着やプレゼントこれらの順で着信イベントをエンキュー &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; そのためです。状態コールバックはイベントを延期できるため、現在の状態で再試行されません。状態変更後、キューは延期されたイベントで再起動します。</target>
        </trans-unit>
        <trans-unit id="63345530db17175adac9ec3a019543d210266d03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; event queue model is sufficient to emulate the normal process message queue with selective receive. Postponing an event corresponds to not matching it in a receive statement, and changing states corresponds to entering a new receive statement.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; イベントキューモデルは、選択受信して通常の処理メッセージキューをエミュレートするのに十分です。イベントを延期することは、受信ステートメントでイベントを一致させないことに対応し、状態を変更することは、新しい受信ステートメントを入力することに対応します。</target>
        </trans-unit>
        <trans-unit id="641237d979ff0a2d03c26c3ad66f07cb507fd0a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; has been set to trap exit signals.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はトラップ出口信号に設定されています。</target>
        </trans-unit>
        <trans-unit id="154bbf6641ffd5663c5aefea121dd325520717a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; is globally registered in &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はグローバルに登録されている &lt;code&gt;global&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67b6a4a7c1fd3b7590f8afba5f3bf9c9be4abb6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; is locally registered on another node.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、ローカルに別のノードに登録されています。</target>
        </trans-unit>
        <trans-unit id="85f1bfb26c1bebdbfe3ea8eee17c7ba7fcaa85f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; is locally registered.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はローカルに登録されています。</target>
        </trans-unit>
        <trans-unit id="dff17e2a1fe994c2de42244386fbbe29172ce5a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; is registered in an alternative process registry. The registry callback module &lt;code&gt;RegMod&lt;/code&gt; is to export functions &lt;code&gt;register_name/2&lt;/code&gt;, &lt;code&gt;unregister_name/1&lt;/code&gt;, &lt;code&gt;whereis_name/1&lt;/code&gt;, and &lt;code&gt;send/2&lt;/code&gt;, which are to behave like the corresponding functions in &lt;code&gt;global&lt;/code&gt;. Thus, &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; is the same as &lt;code&gt;{global,GlobalName}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、代替プロセス、レジストリに登録されています。レジストリコールバックモジュール &lt;code&gt;RegMod&lt;/code&gt; は、関数 &lt;code&gt;register_name/2&lt;/code&gt; 、 &lt;code&gt;unregister_name/1&lt;/code&gt; 、 &lt;code&gt;whereis_name/1&lt;/code&gt; 、および &lt;code&gt;send/2&lt;/code&gt; をエクスポートします。これらは、 &lt;code&gt;global&lt;/code&gt; 対応する関数のように動作します。したがって、 &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; は &lt;code&gt;{global,GlobalName}&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="f744ffe4f5b7b57ef92ebf70203f5d38f475257a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; keeps the current state and data, or does a state transition to the current state if you like, and executes all &lt;code&gt;Actions&lt;/code&gt;. This is the same as &lt;code&gt;{repeat_state,CurrentData,Actions}&lt;/code&gt;. If the &lt;code&gt;gen_statem&lt;/code&gt; runs with &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;, the state enter call is repeated, see type &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;repeat_state_and_data&lt;/code&gt; is the same as &lt;code&gt;keep_state_and_data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、現在の状態とデータを保持し、またはあなたが好きならば、現在の状態への状態遷移を行い、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。これは &lt;code&gt;{repeat_state,CurrentData,Actions}&lt;/code&gt; と同じです。 &lt;code&gt;gen_statem&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; で実行される場合、state enter呼び出しが繰り返されます &lt;code&gt;repeat_state_and_data&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt; 参照してください。それ以外の場合、repeat_state_and_dataはkeep_state_and_dataと同じ &lt;code&gt;keep_state_and_data&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d475ad84f6e39a68e71be16a98a5f4760d76809d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; keeps the current state or does a state transition to the current state if you like, keeps the current server data, and executes all &lt;code&gt;Actions&lt;/code&gt;. This is the same as &lt;code&gt;{next_state,CurrentState,CurrentData,Actions}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、現在の状態を保つか、必要であれば、現在の状態への状態遷移を行い、現在のサーバのデータを保持し、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。これは &lt;code&gt;{next_state,CurrentState,CurrentData,Actions}&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="6668d570fa47d65dc6496ac8a7e26666fa0a0e00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; keeps the current state, or does a state transition to the current state if you like, sets &lt;code&gt;NewData&lt;/code&gt;, and executes all &lt;code&gt;Actions&lt;/code&gt;. If the &lt;code&gt;gen_statem&lt;/code&gt; runs with &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;, the state enter call is repeated, see type &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;repeat_state&lt;/code&gt; is the same as &lt;code&gt;keep_state&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、現在の状態を維持し、またはあなたが好きならば、現在の状態への状態遷移は、設定しない &lt;code&gt;NewData&lt;/code&gt; 、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。 &lt;code&gt;gen_statem&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; で実行される場合、state enter呼び出しが繰り返されます &lt;code&gt;repeat_state&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt; 参照してください。それ以外の場合、repeat_stateはkeep_stateと同じ &lt;code&gt;keep_state&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d700edd0442a4b2cb750903fd91d19af04ce58f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; keeps the current state, or does a state transition to the current state if you like, sets &lt;code&gt;NewData&lt;/code&gt;, and executes all &lt;code&gt;Actions&lt;/code&gt;. This is the same as &lt;code&gt;{next_state,CurrentState,NewData,Actions}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、現在の状態を維持し、またはあなたが好きならば、現在の状態への状態遷移は、設定しない &lt;code&gt;NewData&lt;/code&gt; 、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。これは &lt;code&gt;{next_state,CurrentState,NewData,Actions}&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="8501d306024ff238059935aefd0de35838afe886" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; to initialize the server. To ensure a synchronized startup procedure, &lt;code&gt;start_link/3,4&lt;/code&gt; does not return until &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; has returned.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; のプロセスが呼び出す &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; サーバーを初期化します。同期された起動手順を確実にするために、 &lt;code&gt;start_link/3,4&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; が戻るまで戻りません。</target>
        </trans-unit>
        <trans-unit id="3a3de78075e1ead85abb08c9961b0132a2121787" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; process can go into hibernation; see &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;. It is done when a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; specifies &lt;code&gt;hibernate&lt;/code&gt; in the returned &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; list. This feature can be useful to reclaim process heap memory while the server is expected to be idle for a long time. However, use this feature with care, as hibernation can be too costly to use after every event; see &lt;code&gt;erlang:hibernate/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; のプロセスが冬眠に入ることができます。 &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; を参照してください。これは、 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; が、返された &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; リストで &lt;code&gt;hibernate&lt;/code&gt; を指定したときに行われます。この機能は、サーバーが長時間アイドル状態であることが予想されるときに、プロセスヒープメモリを再利用するのに役立ちます。ただし、この機能は慎重に使用してください。休止状態になると、すべてのイベントの後に使用するにはコストがかかりすぎるためです。 &lt;code&gt;erlang:hibernate/3&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="881ead844dbebfad51980a814a9a4905aa6bf4c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; terminates abnormally and logs an error. &lt;code&gt;Opt&lt;/code&gt; is set to the atom &lt;code&gt;terminate&lt;/code&gt; for this case.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は異常終了し、エラーをログに記録します。この場合、 &lt;code&gt;Opt&lt;/code&gt; はアトム &lt;code&gt;terminate&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="98d014159aa311c58e42eb49a30b95ce56872c5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get-bulk&lt;/code&gt; operation for transferring large amounts of data.</source>
          <target state="translated">大量のデータを転送するための &lt;code&gt;get-bulk&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="ca7aa99a53f77bb03e023a14cb8a5dfa322719fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;realm&lt;/code&gt; filters cause the Destination-Host and Destination-Realm AVPs to be extracted from the outgoing request, assuming it to be a record- or list-valued &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_codec#message&quot;&gt;diameter_codec:message()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;, and assuming at most one of each AVP. If this is not the case then the &lt;code&gt;{host|realm, &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt;}&lt;/code&gt; filters must be used to achieve the desired result. An empty &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; (which should not be typical) matches all hosts/realms for the purposes of filtering.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; と &lt;code&gt;realm&lt;/code&gt; 宛先ホストおよび宛先レルムAVPの原因フィルターは、発信要求から抽出されたことが記録的またはリスト値であることを仮定する &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_codec#message&quot;&gt;diameter_codec:message()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; 、および各AVPの最大で1つを仮定します。そうでない場合は、 &lt;code&gt;{host|realm, &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt;}&lt;/code&gt; フィルターを使用して目的の結果を得る必要があります。空の &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; （これは一般的ではありません）は、フィルタリングの目的ですべてのホスト/レルムに一致します。</target>
        </trans-unit>
        <trans-unit id="6d366d9713f6b9c72596126187499371839fd52b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;i&lt;/code&gt; module provides short forms for some of the functions used by the graphical Debugger and some of the functions in module &lt;code&gt;&lt;a href=&quot;int&quot;&gt;int&lt;/a&gt;&lt;/code&gt;, the Erlang interpreter.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; モジュールは、グラフィカルデバッガモジュールにおける機能の一部によって使用される機能のいくつかのための短い形態提供 &lt;code&gt;&lt;a href=&quot;int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; 、Erlangのインタプリタを。</target>
        </trans-unit>
        <trans-unit id="56dd7d3b9f60436a9a9021776dba220b9a35a843" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; header represents the number of unique identifiers under a class when the option &lt;code&gt;{combine, true}&lt;/code&gt; is used (which is on by default). It will otherwise show the specific identifier. The &lt;code&gt;db_tab&lt;/code&gt; listing shows 722287 unique locks, it is one for each ets-table created and Mnesia creates one for each transaction.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; ヘッダオプションはクラス下の一意の識別子の数を表し &lt;code&gt;{combine, true}&lt;/code&gt; （デフォルトでオンになって）使用されます。それ以外の場合は、特定の識別子が表示されます。 &lt;code&gt;db_tab&lt;/code&gt; ショー722287のユニークなロックをリストは、それが作成された各ETS-テーブルの一つであり、Mnesiaは、各トランザクションのために作成されます。</target>
        </trans-unit>
        <trans-unit id="0fc657f0d7c1adea0e37abaf50e5955d09748ddb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; key is mandatory.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; キーが必須です。</target>
        </trans-unit>
        <trans-unit id="543a86a9dbb014f2154dac485e637aa4987d5f47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index()&lt;/code&gt; type denotes an snmp index structure.</source>
          <target state="translated">&lt;code&gt;index()&lt;/code&gt; タイプは、SNMPインデックス構造を示しています。</target>
        </trans-unit>
        <trans-unit id="9e43b2120ef1641713607a20d5663b50e4bfd154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; field of a &lt;code&gt;&lt;a href=&quot;#service_event&quot;&gt;service_event()&lt;/a&gt;&lt;/code&gt; record. Can have one of the following types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#service_event&quot;&gt;service_event()&lt;/a&gt;&lt;/code&gt; レコードの &lt;code&gt;info&lt;/code&gt; フィールド。次のタイプのいずれかを持つことができます。</target>
        </trans-unit>
        <trans-unit id="1a3e0c6a3b85d7da20be620618cd94e4069d8c32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; functions return information as a list of pairs {Tag, term()} in some order about the state and the &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; of an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; 機能は、ペア状態についてのいくつかのために{タグ、用語（）}とのリストなどの情報を返す &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe1b7238dd78cc738fd7a6138cfed66a0946104d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init:get_arguments()&lt;/code&gt; call verifies that the correct arguments are supplied to the emulator.</source>
          <target state="translated">&lt;code&gt;init:get_arguments()&lt;/code&gt; に正しい引数がエミュレータに供給されていることをコール検証。</target>
        </trans-unit>
        <trans-unit id="de26f216cc9cb8c745717da43fc15ae4239618cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; module interprets the following command-line flags:</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; モジュールは、次のコマンドラインフラグを解釈します。</target>
        </trans-unit>
        <trans-unit id="9159e5b3d2da59b16c5905eba93189ce3aa15286" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; process itself interprets some of these flags, the &lt;strong&gt;init flags&lt;/strong&gt;. It also stores any remaining flags, the &lt;strong&gt;user flags&lt;/strong&gt;. The latter can be retrieved by calling &lt;code&gt;init:get_argument/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; プロセス自体は、これらのフラグの一部、解釈&lt;strong&gt;のinitのフラグを&lt;/strong&gt;。また、残りのフラグである&lt;strong&gt;ユーザーフラグ&lt;/strong&gt;も格納し&lt;strong&gt;ます&lt;/strong&gt;。後者は &lt;code&gt;init:get_argument/1&lt;/code&gt; を呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="a00463fc2a7f182be0da0183c5213eee9fd19f70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;insert_emp/3&lt;/code&gt; arguments are as follows:</source>
          <target state="translated">&lt;code&gt;insert_emp/3&lt;/code&gt; 引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="35e63d83642fa80f496dd6056b90a430ea6b3ddf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;io&lt;/code&gt; module has been extended along with the actual I/O protocol to handle Unicode data. This means that many functions require binaries to be in UTF-8, and there are modifiers to format control sequences to allow for output of Unicode strings.</source>
          <target state="translated">&lt;code&gt;io&lt;/code&gt; モジュールは、Unicodeデータを処理するために、実際のI / Oプロトコルとともに拡張されています。つまり、多くの関数では、バイナリがUTF-8である必要があり、Unicode文字列の出力を可能にするために制御シーケンスをフォーマットする修飾子があります。</target>
        </trans-unit>
        <trans-unit id="abc6624cbf5af8be037d2670ec76b72f4b7f1113" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ip&lt;/code&gt; Reference ID takes an &lt;code&gt;inet:ip_address()&lt;/code&gt; or an ip address in string format (E.g &quot;10.0.1.1&quot; or &quot;1234::5678:9012&quot;) as second element.</source>
          <target state="translated">&lt;code&gt;ip&lt;/code&gt; リファレンスIDを取り &lt;code&gt;inet:ip_address()&lt;/code&gt; または文字列の形式（例： &quot;10.0.1.1&quot;または&quot;1234 :: 5678：9012&quot;）でIPアドレス第二の要素としては。</target>
        </trans-unit>
        <trans-unit id="a7ee8c582d46917ec81790ab0ac53e2589a28393" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is_set_ok&lt;/code&gt; function checks that a row which is to be modified or deleted exists, and that a row which is to be created does not exist.</source>
          <target state="translated">&lt;code&gt;is_set_ok&lt;/code&gt; 機能の変更または削除すべき行が存在することをチェックし、作成する行が存在しません。</target>
        </trans-unit>
        <trans-unit id="ff7f1bbdc59c16a06c62efdccc8b7854b7407424" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key()&lt;/code&gt; type correlates to the &lt;code&gt;key_types()&lt;/code&gt; type. If the &lt;code&gt;key_types()&lt;/code&gt; is a single atom, the corresponding &lt;code&gt;key()&lt;/code&gt; is a single type as well, but if the &lt;code&gt;key_types()&lt;/code&gt; is a tuple, &lt;code&gt;key&lt;/code&gt; must be a tuple of the same size.</source>
          <target state="translated">&lt;code&gt;key()&lt;/code&gt; と相関を入力 &lt;code&gt;key_types()&lt;/code&gt; タイプ。場合 &lt;code&gt;key_types()&lt;/code&gt; 単一の原子である、対応する &lt;code&gt;key()&lt;/code&gt; も単一型であるが、場合 &lt;code&gt;key_types()&lt;/code&gt; がタプルで、 &lt;code&gt;key&lt;/code&gt; 同じサイズのタプルでなければなりません。</target>
        </trans-unit>
        <trans-unit id="5cac72dd809c7185a7dcb83183f4f89c08277c85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key_types()&lt;/code&gt; type defines the types of the SNMP INDEX columns for the table. If the table has one single INDEX column, this type should be a single atom, but if the table has multiple INDEX columns, it should be a tuple with atoms.</source>
          <target state="translated">&lt;code&gt;key_types()&lt;/code&gt; タイプは、テーブルのSNMPインデックス列のタイプを定義します。テーブルに単一のINDEX列がある場合、この型は単一のアトムである必要がありますが、テーブルに複数のINDEX列がある場合、アトムを含むタプルである必要があります。</target>
        </trans-unit>
        <trans-unit id="a81df154de4b4c4f859872829034600f9ab7e463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key_types()&lt;/code&gt; type is used when creating the index structure, and the &lt;code&gt;key()&lt;/code&gt; type is used when inserting and deleting items from the structure.</source>
          <target state="translated">&lt;code&gt;key_types()&lt;/code&gt; のインデックス構造を作成する際に型が使用され、そして &lt;code&gt;key()&lt;/code&gt; 挿入した構造からアイテムを削除する際のタイプが使用されます。</target>
        </trans-unit>
        <trans-unit id="555d2dccfadbf0b7e5219e84813fd3bd45eaaf5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keypos&lt;/code&gt; of the table dumped to file, which is used when loading the table again.</source>
          <target state="translated">ファイルにダンプされたテーブルの &lt;code&gt;keypos&lt;/code&gt; 。テーブルを再度ロードするときに使用されます。</target>
        </trans-unit>
        <trans-unit id="f7afe180cd162bc0e597b4a20726157b5ac4e0bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;killproc&lt;/code&gt; procedure is not to be removed. The purpose is here to move from run level 3 (multi-user mode with networking resources) to run level 2 (multi-user mode without such resources), in which Erlang is not to run.</source>
          <target state="translated">&lt;code&gt;killproc&lt;/code&gt; の手順削除してはなりません。ここでの目的は、実行レベル3（ネットワークリソースを使用するマルチユーザーモード）から、Erlangを実行しない実行レベル2（そのようなリソースを使用しないマルチユーザーモード）に移行することです。</target>
        </trans-unit>
        <trans-unit id="03c484e3840400c5a5e9dd6a195fc19b5d1faa2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;label&lt;/code&gt; component is a term which identifies all events belonging to the same sequential trace. If several sequential traces can be active simultaneously, &lt;code&gt;label&lt;/code&gt; is used to identify the separate traces. Default is 0.</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; コンポーネントは、同じ順次トレースに属するすべてのイベントを特定する用語です。複数の順次トレースを同時にアクティブにできる場合は、 &lt;code&gt;label&lt;/code&gt; を使用して個別のトレースを識別します。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="8ada4b47638c77da9291a9bd47140e9b15fe504a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;largest_free&lt;/code&gt; and &lt;code&gt;number_of_free&lt;/code&gt; tags are currently only returned on a VxWorks system.</source>
          <target state="translated">&lt;code&gt;largest_free&lt;/code&gt; と &lt;code&gt;number_of_free&lt;/code&gt; タグは、現在、唯一のVxWorksのシステムに返されます。</target>
        </trans-unit>
        <trans-unit id="47c985889700e94be33eba8b924bf9a3dfed0540" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lcnt&lt;/code&gt; module is used to profile the internal ethread locks in the Erlang Runtime System. With &lt;code&gt;lcnt&lt;/code&gt; enabled, internal counters in the runtime system are updated each time a lock is taken. The counters stores information about the number of acquisition tries and the number of collisions that has occurred during the acquisition tries. The counters also record the waiting time a lock has caused for a blocked thread when a collision has occurred.</source>
          <target state="translated">&lt;code&gt;lcnt&lt;/code&gt; モジュールは、アーランランタイムシステムにおける内部ETHREADロックをプロファイルするために使用されます。 &lt;code&gt;lcnt&lt;/code&gt; 有効になって、ランタイムシステムの内部カウンタは、ロックが取られるたびに更新されます。カウンターには、取得の試行回数と、取得の試行中に発生した衝突の数に関する情報が格納されます。カウンターは、衝突が発生したときに、ブロックされたスレッドに対してロックが引き起こした待機時間も記録します。</target>
        </trans-unit>
        <trans-unit id="b187fc5e5c5e9c948af3fd95dc59f5d10e6fe566" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list_in&lt;/code&gt; term must belong to environment &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list_in&lt;/code&gt; の用語は、環境に属している必要があり &lt;code&gt;env&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2831975c1bbe04314d3d0e20134569769f4c8e7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log_mf_h&lt;/code&gt; handler writes all reports to a report logging directory, which is specified when configuring the SASL application.</source>
          <target state="translated">&lt;code&gt;log_mf_h&lt;/code&gt; ハンドラは、SASLアプリケーションを構成するときに指定されたディレクトリをログレポートにすべてのレポートを書き込みます。</target>
        </trans-unit>
        <trans-unit id="c42c9a83ba0cfd927135745afcf8a51d16e0e657" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;map_in&lt;/code&gt; term must belong to environment &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map_in&lt;/code&gt; の用語は、環境に属している必要があり &lt;code&gt;env&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4596e3e12adaafb27a37675223c89e5e8290b48e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;match_fun&lt;/code&gt; takes two arguments and returns either &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;. The value &lt;code&gt;default&lt;/code&gt; will invoke the default match function.</source>
          <target state="translated">&lt;code&gt;match_fun&lt;/code&gt; は、いずれかの二つの引数とリターンを取る &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; 。値 &lt;code&gt;default&lt;/code&gt; は、デフォルトの一致関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8b940d5eaace9d3d7a8384b7f450246290a324ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_path_length&lt;/code&gt; is the maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if &lt;code&gt;max_path_length&lt;/code&gt; is 0, the PEER must be signed by the trusted ROOT-CA directly, if it is 1, the path can be PEER, CA, ROOT-CA, if it is 2, the path can be PEER, CA, CA, ROOT-CA, and so on.</source>
          <target state="translated">&lt;code&gt;max_path_length&lt;/code&gt; は、有効な証明書パスにおけるピア証明書に従うことができ、自己発行でない中間証明書の最大数です。したがって、 &lt;code&gt;max_path_length&lt;/code&gt; が0の場合、PEERはトラステッドROOT-CAによって直接署名される必要があります。1の場合、パスはPEER、CA、ROOT-CA、2の場合は、パスはPEER、CA、 CA、ROOT-CAなど。</target>
        </trans-unit>
        <trans-unit id="38b7f85ec648548ce222a27921a129e6b78760bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mib_to_hrl&lt;/code&gt; generator can be invoked from the OS command line by using the command &lt;code&gt;erlc&lt;/code&gt;. &lt;code&gt;erlc&lt;/code&gt; recognizes the extension &lt;code&gt;.bin&lt;/code&gt;, and invokes this function for files with that extension.</source>
          <target state="translated">&lt;code&gt;mib_to_hrl&lt;/code&gt; の発生は、コマンド使用して、OSのコマンドラインから呼び出すことができる &lt;code&gt;erlc&lt;/code&gt; を。 &lt;code&gt;erlc&lt;/code&gt; は拡張子 &lt;code&gt;.bin&lt;/code&gt; を認識し、その拡張子を持つファイルに対してこの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8c1d578ccfe04ced0a4858e6e98da0fd19d29b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mods_and_procs&lt;/code&gt; and &lt;code&gt;funcs_and_procs&lt;/code&gt; filters are equivalent to the &lt;code&gt;modules&lt;/code&gt; and &lt;code&gt;functions&lt;/code&gt; filters respectively, except that each module or function can have many vertical lines, one for each process it resides on.</source>
          <target state="translated">&lt;code&gt;mods_and_procs&lt;/code&gt; と &lt;code&gt;funcs_and_procs&lt;/code&gt; フィルタは、と等価である &lt;code&gt;modules&lt;/code&gt; 及び &lt;code&gt;functions&lt;/code&gt; 、各モジュールまたは機能が多くの垂直ライン、それが上に存在する各プロセスのための1つを持つことができることを除いて、それぞれフィルタ。</target>
        </trans-unit>
        <trans-unit id="629670db402f7cde732ec01282578c7159f3daad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; option makes it possible for the user to provide their own callback module. The &lt;code&gt;receive_message/4&lt;/code&gt; or &lt;code&gt;process_received_message/4&lt;/code&gt; functions of this module is called when a new message is received (which one depends on the size of the message; small - receive_message, large - process_received_message). Default value is &lt;strong&gt;megaco&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; オプションは、それが可能なユーザーは、独自のコールバックモジュールを提供できるようになります。このモジュールの &lt;code&gt;receive_message/4&lt;/code&gt; または &lt;code&gt;process_received_message/4&lt;/code&gt; 関数は、新しいメッセージが受信されたときに呼び出されます（メッセージのサイズによって異なります。小-receive_message、大-process_received_message）。デフォルト値は&lt;strong&gt;megaco&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="4039dc8c38a872b706a72298a0693bdeed53b2b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; option makes it possible for the user to provide their own callback module. The functions &lt;code&gt;receive_message/4&lt;/code&gt; or &lt;code&gt;process_received_message/4&lt;/code&gt; of this module is called when a new message is received (which one depends on the size of the message; small - receive_message, large - process_received_message). Default value is &lt;strong&gt;megaco&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; オプションは、それが可能なユーザーは、独自のコールバックモジュールを提供できるようになります。このモジュールの関数 &lt;code&gt;receive_message/4&lt;/code&gt; または &lt;code&gt;process_received_message/4&lt;/code&gt; は、新しいメッセージが受信されたときに呼び出されます（メッセージのサイズによって異なります。small-receive_message、large-process_received_message）。デフォルト値は&lt;strong&gt;megaco&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="1fa747bd68db4bc817397fca349049b0c0c2bdc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module_info/0&lt;/code&gt; function in each module, returns a list of &lt;code&gt;{Key,Value}&lt;/code&gt; tuples with information about the module. Currently, the list contain tuples with the following &lt;code&gt;Key&lt;/code&gt;s: &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;attributes&lt;/code&gt;, &lt;code&gt;compile&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;, &lt;code&gt;md5&lt;/code&gt; and &lt;code&gt;native&lt;/code&gt;. The order and number of tuples may change without prior notice.</source>
          <target state="translated">各モジュールの &lt;code&gt;module_info/0&lt;/code&gt; 関数は、モジュールに関する情報を含む &lt;code&gt;{Key,Value}&lt;/code&gt; タプルのリストを返します。現在、リストには次の &lt;code&gt;Key&lt;/code&gt; 持つタプルが含まれています： &lt;code&gt;module&lt;/code&gt; 、 &lt;code&gt;attributes&lt;/code&gt; 、 &lt;code&gt;compile&lt;/code&gt; 、 &lt;code&gt;exports&lt;/code&gt; 、 &lt;code&gt;md5&lt;/code&gt; 、および &lt;code&gt;native&lt;/code&gt; 。タプルの順序や数は、予告なく変更される場合があります。</target>
        </trans-unit>
        <trans-unit id="13c3af4d94c692779fc270d51ec8836243a76c6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modules&lt;/code&gt; filter shows each module as a vertical line in the sequence diagram. External function calls/returns are shown as interactions between modules, and internal function calls/returns are shown as activities within a module.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; フィルタは、シーケンス図の縦線として、各モジュールを示しています。外部関数呼び出し/戻りはモジュール間の相互作用として示され、内部関数呼び出し/戻りはモジュール内のアクティビティとして示されます。</target>
        </trans-unit>
        <trans-unit id="220a661131b4c202e09615fa7794089d54019aa4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modules&lt;/code&gt; key is optional. If it is not given, it defaults to &lt;code&gt;[M]&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; comes from the child's start &lt;code&gt;{M,F,A}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; キーはオプションです。指定しない場合、デフォルトは &lt;code&gt;[M]&lt;/code&gt; になり、 &lt;code&gt;M&lt;/code&gt; は子の開始 &lt;code&gt;{M,F,A}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="3890e0d50c45d6e12a18dbc1aec19b335349f526" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modules&lt;/code&gt; key is optional. If it is not specified, it defaults to &lt;code&gt;[M]&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; comes from the child's start &lt;code&gt;{M,F,A}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; キーはオプションです。指定されていない場合、デフォルトは &lt;code&gt;[M]&lt;/code&gt; になり、 &lt;code&gt;M&lt;/code&gt; は子の開始 &lt;code&gt;{M,F,A}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b73b08f6879f5bf7ade5d9880f8cf1f512709fdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;native&lt;/code&gt; time unit is determined at runtime system start, and remains the same until the runtime system terminates. If a runtime system is stopped and then started again (even on the same machine), the &lt;code&gt;native&lt;/code&gt; time unit of the new runtime system instance can differ from the &lt;code&gt;native&lt;/code&gt; time unit of the old runtime system instance.</source>
          <target state="translated">&lt;code&gt;native&lt;/code&gt; 時間単位は、ランタイムシステムの開始時に決定、およびランタイムシステムが終了するまで同じままです。ランタイムシステムが停止して（でも同じマシン上で）再び開始されている場合は、 &lt;code&gt;native&lt;/code&gt; 新しいランタイムシステムインスタンスの時間単位が異なることが &lt;code&gt;native&lt;/code&gt; 古いランタイムシステムインスタンスの時間単位。</target>
        </trans-unit>
        <trans-unit id="e77d232e74f552cf373975f9713b96716de00e8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net_kernel&lt;/code&gt; process terminated.</source>
          <target state="translated">&lt;code&gt;net_kernel&lt;/code&gt; のプロセスが終了しました。</target>
        </trans-unit>
        <trans-unit id="33c94a1185ccb7943d79b55ac568ef3bf3963cc5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net_ticktime&lt;/code&gt; changes must be initiated on all nodes in the network (with the same &lt;code&gt;NetTicktime&lt;/code&gt;) before the end of any transition period on any node; otherwise connections can erroneously be disconnected.</source>
          <target state="translated">&lt;code&gt;net_ticktime&lt;/code&gt; 変化は、（同じで、ネットワーク内のすべてのノード上で開始されなければならない &lt;code&gt;NetTicktime&lt;/code&gt; 任意のノード上の任意の遷移期間が終了する前に）。そうしないと、接続が誤って切断される可能性があります。</target>
        </trans-unit>
        <trans-unit id="88d35276b805d419b7b2b451eec9f43dfbe3fb9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;reuse&lt;/code&gt; options might seem convenient in a production system, but consider that the logs grow indefinitely during the system lifetime and cannot be truncated, except if the service is restarted.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; および &lt;code&gt;reuse&lt;/code&gt; オプションは、生産システムに便利なように見えるが、ログは、システムの寿命の間に無限に成長し、サービスが再起動された場合を除き、切り捨てられることができないことを考えるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ffcaa93ee15ba09c39cb246f4b83efb0388fde54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; function creates a new variable in the database with a default value as defined in the MIB, or a zero value (depending on the type).</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 機能は、MIBで定義されているデフォルト値、又はゼロ値（タイプに応じて）を使用してデータベース内に新しい変数を作成します。</target>
        </trans-unit>
        <trans-unit id="2000d16d511f7d3865cad4dec402c68d50d75e6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; function creates the table if it does not exist, but only if the database is the SNMP internal db.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; それが存在しない場合、この関数は、テーブルを作成しますが、データベースは、SNMP内部DBの場合のみ。</target>
        </trans-unit>
        <trans-unit id="fe241cbaac0cb96b60c93ae96dc9889cf2b5f3f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nteventlog&lt;/code&gt; module is used to implement &lt;code&gt;os_sup&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;nteventlog&quot;&gt;nteventlog(3)&lt;/a&gt;&lt;/code&gt;. Note that the start functions of &lt;code&gt;nteventlog&lt;/code&gt; does not need to be used, in this case the process is started automatically as part of the OS_Mon supervision tree.</source>
          <target state="translated">&lt;code&gt;nteventlog&lt;/code&gt; モジュールは、os_supを実装するために使用され &lt;code&gt;os_sup&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;nteventlog&quot;&gt;nteventlog(3)&lt;/a&gt;&lt;/code&gt; を参照してください。 &lt;code&gt;nteventlog&lt;/code&gt; の開始関数を使用する必要がないことに注意してください。この場合、プロセスはOS_Mon監視ツリーの一部として自動的に開始されます。</target>
        </trans-unit>
        <trans-unit id="e2bfdbeebfa5a9fe7cf75fe729c76e05070db8fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;obj&lt;/code&gt; argument is a pointer to the resource. The only allowed use for the resource in the destructor is to access its user data one final time. The destructor is guaranteed to be the last callback before the resource is deallocated.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 引数は、リソースへのポインタです。デストラクタでリソースに許可されている唯一の使用法は、最後にもう一度ユーザーデータにアクセスすることです。デストラクタは、リソースが割り当て解除される前の最後のコールバックであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="7ceb6922f1bc2b55a11a196aefd83fd27d2d6cd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;of&lt;/code&gt; operator returns &lt;code&gt;false&lt;/code&gt; if no chain of calls between the given constants can be found.</source>
          <target state="translated">オペレータが返し &lt;code&gt;false&lt;/code&gt; 所定の定数との間のコールのチェーンが見つからない場合。 &lt;code&gt;of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="edc8f1a9759344cda2be6a01281eb7cf8541e7d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;of&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;after&lt;/code&gt; sections are all optional, as long as there is at least a &lt;code&gt;catch&lt;/code&gt; or an &lt;code&gt;after&lt;/code&gt; section. So the following are valid &lt;code&gt;try&lt;/code&gt; expressions:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 、及び &lt;code&gt;after&lt;/code&gt; の節では、限り、少なくとも存在するように、全てのオプションで &lt;code&gt;catch&lt;/code&gt; または &lt;code&gt;after&lt;/code&gt; セクションでは。したがって、以下は有効な &lt;code&gt;try&lt;/code&gt; 式です。 &lt;code&gt;of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebc057ad457a36d0493c7c4827deec0d89f9db4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oid()&lt;/code&gt; type is used to represent an ASN.1 OBJECT IDENTIFIER.</source>
          <target state="translated">&lt;code&gt;oid()&lt;/code&gt; タイプはASN.1オブジェクト識別子を表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="c317ddfbc946c81f789ac77305cd9d495bd67257" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ordered_set&lt;/code&gt; works on the &lt;strong&gt;Erlang term order&lt;/strong&gt; and no defined order exists between an &lt;code&gt;integer()&lt;/code&gt; and a &lt;code&gt;float()&lt;/code&gt; that extends to the same value. Hence the key &lt;code&gt;1&lt;/code&gt; and the key &lt;code&gt;1.0&lt;/code&gt; are regarded as equal in an &lt;code&gt;ordered_set&lt;/code&gt; table.</source>
          <target state="translated">&lt;code&gt;ordered_set&lt;/code&gt; は、上で動作&lt;strong&gt;Erlangの用語の順序&lt;/strong&gt;と全く定義された順序は、間に存在していない &lt;code&gt;integer()&lt;/code&gt; と &lt;code&gt;float()&lt;/code&gt; と同じ値まで延びています。したがって、キー &lt;code&gt;1&lt;/code&gt; とキー &lt;code&gt;1.0&lt;/code&gt; は、 &lt;code&gt;ordered_set&lt;/code&gt; テーブルでは等しいと見なされます。</target>
        </trans-unit>
        <trans-unit id="23f84a949184c1de5bc030233161e9c4c0b92121" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;originating&lt;/code&gt; options effects discovery initiated by this agent.</source>
          <target state="translated">&lt;code&gt;originating&lt;/code&gt; のオプションの効果の発見は、このエージェントによって開始しました。</target>
        </trans-unit>
        <trans-unit id="ccd973135b90cc097810c0c2b724141ea8487e4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;otp_patch_apply&lt;/code&gt; syntax:</source>
          <target state="translated">&lt;code&gt;otp_patch_apply&lt;/code&gt; 構文：</target>
        </trans-unit>
        <trans-unit id="8bdd7004ea407fa82763663af39ba15a0e1f25f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;otp_patch_apply&lt;/code&gt; tool utilizes the &lt;code&gt;runtime_dependencies&lt;/code&gt; tag in the &lt;code&gt;application resource file&lt;/code&gt;. This information is used to determine if the patch can be installed in the given Erlang/OTP installation directory.</source>
          <target state="translated">&lt;code&gt;otp_patch_apply&lt;/code&gt; ツールが利用 &lt;code&gt;runtime_dependencies&lt;/code&gt; の中にタグを &lt;code&gt;application resource file&lt;/code&gt; 。この情報は、指定されたErlang / OTPインストールディレクトリにパッチをインストールできるかどうかを判断するために使用されます。</target>
        </trans-unit>
        <trans-unit id="8315d03358900e027c0447a981ac995840fffee4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output&lt;/code&gt; function allocates the work area of the asynchronous function. As we use C++, we use a struct, and stuff the data in it. We must copy the original data, it is not valid after we have returned from the &lt;code&gt;output&lt;/code&gt; function, and the &lt;code&gt;do_perm&lt;/code&gt; function is called later, and from another thread. We return no data here, instead it is sent later from the &lt;code&gt;ready_async&lt;/code&gt; callback.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; 関数は非同期関数の作業領域を確保します。C ++を使用するため、構造体を使用し、データをそこに格納します。元のデータをコピーする必要があります。 &lt;code&gt;output&lt;/code&gt; 関数から戻った後は無効であり、 &lt;code&gt;do_perm&lt;/code&gt; 関数が呼び出され、別のスレッドから呼び出されます。ここではデータは返されませんが、 &lt;code&gt;ready_async&lt;/code&gt; コールバックから送信されます。</target>
        </trans-unit>
        <trans-unit id="71aa4ffe227f9aa33da51854c389c54a822efeef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse&lt;/code&gt; format is an internal representation that can be passed to &lt;code&gt;&lt;a href=&quot;#flatten-1&quot;&gt;flatten/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#format-1&quot;&gt;format/1&lt;/a&gt;&lt;/code&gt;, while the &lt;code&gt;forms&lt;/code&gt; format can be passed to &lt;code&gt;compile:forms/2&lt;/code&gt;. The &lt;code&gt;erl&lt;/code&gt; and &lt;code&gt;hrl&lt;/code&gt; formats are returned as iolists.</source>
          <target state="translated">&lt;code&gt;parse&lt;/code&gt; フォーマットをに渡すことができる内部表現である &lt;code&gt;&lt;a href=&quot;#flatten-1&quot;&gt;flatten/1&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#format-1&quot;&gt;format/1&lt;/a&gt;&lt;/code&gt; ながら、 &lt;code&gt;forms&lt;/code&gt; フォーマットに渡すことができる &lt;code&gt;compile:forms/2&lt;/code&gt; 。 &lt;code&gt;erl&lt;/code&gt; と &lt;code&gt;hrl&lt;/code&gt; フォーマットはiolistsとして返されます。</target>
        </trans-unit>
        <trans-unit id="9ac6e1b83188e6ba00253b80c4e4e283b31e07a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; option is used for pointing out the old version of all applications. (The new versions are already in the code path - assuming of course that the Erlang node on which this is executed is running the correct version of Erlang/OTP.)</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; オプションは、すべてのアプリケーションの古いバージョンを指摘するために使用されています。（新しいバージョンはすでにコードパスにあります-もちろん、これが実行されるErlangノードが正しいバージョンのErlang / OTPを実行していると仮定します。）</target>
        </trans-unit>
        <trans-unit id="24e00a9507fa707a286aad7abe3e3cd07325080a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pending_driver&lt;/code&gt;&lt;code&gt;MonitorOption&lt;/code&gt; is by far the most useful. It must be used to ensure that the driver really is unloaded and the ports closed whenever option &lt;code&gt;kill_ports&lt;/code&gt; is used, or the driver can have been loaded with driver option &lt;code&gt;kill_ports&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pending_driver&lt;/code&gt; &lt;code&gt;MonitorOption&lt;/code&gt; 、これまでで最も有用です。ドライバーが実際にアンロードされ、オプションのたびポートが閉じていることを確実にするために使用されている必要があり &lt;code&gt;kill_ports&lt;/code&gt; が使用されている、またはドライバがドライバオプションでロードされていることができ &lt;code&gt;kill_ports&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f36e06928220660615452de6fef2258f5362fc89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;perf_counter&lt;/code&gt; time unit behaves much in the same way as the &lt;code&gt;native&lt;/code&gt; time unit. That is, it can differ between runtime restarts. To get values of this type, call &lt;code&gt;os:perf_counter/0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;perf_counter&lt;/code&gt; の時間単位はずっと同じように動作 &lt;code&gt;native&lt;/code&gt; 時間単位。つまり、ランタイムの再起動によって異なる場合があります。このタイプの値を取得するには、 &lt;code&gt;os:perf_counter/0&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8ff6f3b7d18bc68a03a8f098e3306bea8afa3388" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pread/3,4&lt;/code&gt; function reads from a specified position, combining the &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#read-3&quot;&gt;read/3,4&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;pread/3,4&lt;/code&gt; 機能を組み合わせることで、指定された位置から読み取り &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#read-3&quot;&gt;read/3,4&lt;/a&gt;&lt;/code&gt; 機能します。</target>
        </trans-unit>
        <trans-unit id="8ade504b785b0942df35eaf3b82afa6476a54cf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;priv&lt;/code&gt; directory holds assets that the application needs during runtime. Executables should reside in &lt;code&gt;priv/bin&lt;/code&gt; and dynamically-linked libraries should reside in &lt;code&gt;priv/lib&lt;/code&gt;. Other assets are free to reside within the &lt;code&gt;priv&lt;/code&gt; directory but it is recommended it does so in a structured manner.</source>
          <target state="translated">&lt;code&gt;priv&lt;/code&gt; ディレクトリは、アプリケーションが実行時に必要であることの資産を保持しています。実行可能 &lt;code&gt;priv/bin&lt;/code&gt; はpriv / binに常駐し、動的にリンクされたライブラリは &lt;code&gt;priv/lib&lt;/code&gt; に常駐する必要があります。その他のアセットは、 &lt;code&gt;priv&lt;/code&gt; ディレクトリ内に自由に配置できますが、構造化された方法で配置することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a744587962b51e3c606263db57ff07f274e44a97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;processes&lt;/code&gt; filter is the only filter showing all trace messages from a trace log. Each vertical line in the sequence diagram represents a process. Erlang messages, spawn, and link/unlink are typical interactions between processes. Function calls, scheduling, and garbage collection, are typical activities within a process. &lt;code&gt;processes&lt;/code&gt; is the default filter.</source>
          <target state="translated">&lt;code&gt;processes&lt;/code&gt; フィルタは、トレースログからのすべてのトレースメッセージを示すフィルタのみです。シーケンス図の各縦線はプロセスを表しています。Erlangメッセージ、スポーン、およびリンク/リンク解除は、プロセス間の典型的な相互作用です。関数呼び出し、スケジューリング、およびガベージコレクションは、プロセス内の典型的なアクティビティです。 &lt;code&gt;processes&lt;/code&gt; はデフォルトのフィルターです。</target>
        </trans-unit>
        <trans-unit id="3861f99e16c84fe5707ca3129e815480d2eca579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pwrite/3,4&lt;/code&gt; function writes to a specified position, combining the &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#write-3&quot;&gt;write/3,4&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;pwrite/3,4&lt;/code&gt; 関数は、合成、指定された位置に書き込む &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#write-3&quot;&gt;write/3,4&lt;/a&gt;&lt;/code&gt; 機能します。</target>
        </trans-unit>
        <trans-unit id="a4939b64de1d53ed04f7d5997288438bc45d2be8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;qlc&lt;/code&gt; module evaluates this differently depending on the query handles &lt;code&gt;QH1&lt;/code&gt; and &lt;code&gt;QH2&lt;/code&gt;. If, for example, &lt;code&gt;X2&lt;/code&gt; is matched against the key of a QLC table, the lookup join method traverses the objects of &lt;code&gt;QH2&lt;/code&gt; while looking up key values in the table. However, if not &lt;code&gt;X2&lt;/code&gt; or &lt;code&gt;Y2&lt;/code&gt; is matched against the key or an indexed position of a QLC table, the merge join method ensures that &lt;code&gt;QH1&lt;/code&gt; and &lt;code&gt;QH2&lt;/code&gt; are both sorted on position 2 and next do the join by traversing the objects one by one.</source>
          <target state="translated">&lt;code&gt;qlc&lt;/code&gt; モジュール評価し、これは、異なるクエリハンドルに依存 &lt;code&gt;QH1&lt;/code&gt; と &lt;code&gt;QH2&lt;/code&gt; 。たとえば、 &lt;code&gt;X2&lt;/code&gt; がQLCテーブルのキーと照合される場合、ルックアップ結合メソッドは、テーブル内のキー値を検索しながら &lt;code&gt;QH2&lt;/code&gt; のオブジェクトをトラバースします。ただし、 &lt;code&gt;X2&lt;/code&gt; または &lt;code&gt;Y2&lt;/code&gt; がQLCテーブルのキーまたはインデックス付き位置と一致しない場合、マージ結合メソッドにより、 &lt;code&gt;QH1&lt;/code&gt; と &lt;code&gt;QH2&lt;/code&gt; の両方が位置2でソートされ、次にオブジェクトを1つずつトラバースすることで結合が実行されます。</target>
        </trans-unit>
        <trans-unit id="7bdc283a4e0d387d9b4fe3c9cce9b3813bddfd9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;qlc&lt;/code&gt; module supports fast join of two query handles. Fast join is possible if some position &lt;code&gt;P1&lt;/code&gt; of one query handler and some position &lt;code&gt;P2&lt;/code&gt; of another query handler are tested for equality. Two fast join methods are provided:</source>
          <target state="translated">&lt;code&gt;qlc&lt;/code&gt; モジュール支持体は、高速2つのクエリハンドルの参加します。高速いくつかの位置の場合に可能である参加 &lt;code&gt;P1&lt;/code&gt; 1つのクエリハンドラと、いくつかの位置の &lt;code&gt;P2&lt;/code&gt; 別のクエリハンドラのは、平等のためにテストされています。2つの高速結合メソッドが提供されています。</target>
        </trans-unit>
        <trans-unit id="4dc69ce9649099f1a16568929e4dca5a9ec4a8ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;qlc&lt;/code&gt; module warns at compile time if a QLC combines query handles in such a way that more than one join is possible. That is, no query planner is provided that can select a good order between possible join operations. It is up to the user to order the joins by introducing query handles.</source>
          <target state="translated">&lt;code&gt;qlc&lt;/code&gt; モジュールは、QLCが複数の結合が可能な方法でクエリハンドルを組み合わせると、コンパイル時に警告します。つまり、可能な結合操作間で適切な順序を選択できるクエリプランナーは提供されません。クエリハンドルを導入して結合を順序付けるのはユーザー次第です。</target>
        </trans-unit>
        <trans-unit id="1ac4329d09995d8cc50dafbae48fcd60ee3ef172" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;re&lt;/code&gt; module allows for matching Unicode strings as a special option. As the library is centered on matching in binaries, the Unicode support is UTF-8-centered.</source>
          <target state="translated">&lt;code&gt;re&lt;/code&gt; モジュールは、特別なオプションとしてUnicode文字列を照合することができます。ライブラリはバイナリでのマッチングを中心としているため、UnicodeサポートはUTF-8を中心にしています。</target>
        </trans-unit>
        <trans-unit id="412cfcfb79171f8451db72dbfc6769aeeae48e5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read_ahead&lt;/code&gt; buffer is also highly used by function &lt;code&gt;read_line/1&lt;/code&gt; in &lt;code&gt;raw&lt;/code&gt; mode, therefore this option is recommended (for performance reasons) when accessing raw files using that function.</source>
          <target state="translated">&lt;code&gt;read_ahead&lt;/code&gt; バッファはまた、高度に機能によって使用される &lt;code&gt;read_line/1&lt;/code&gt; で &lt;code&gt;raw&lt;/code&gt; その関数を使用してRAWファイルにアクセスする場合、したがって、このオプションは、（パフォーマンス上の理由）が推奨されるモード。</target>
        </trans-unit>
        <trans-unit id="1d7e68fecfc79e8020cc09ac14cad9865216cb67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ready_io&lt;/code&gt; function is called when the socket we got from postgres is ready for input or output. Here we first check if we are connecting to the database. In that case, we check connection status and return OK if the connection is successful, or error if it is not. If the connection is not yet established, we simply return; &lt;code&gt;ready_io&lt;/code&gt; is called again.</source>
          <target state="translated">&lt;code&gt;ready_io&lt;/code&gt; 我々はpostgresのから得たソケットが入力または出力のための準備ができたときに関数が呼び出されます。ここでは、まずデータベースに接続しているかどうかを確認します。その場合、接続ステータスを確認し、接続が成功した場合はOK、失敗した場合はエラーを返します。接続がまだ確立されていない場合は、単に戻ります。 &lt;code&gt;ready_io&lt;/code&gt; が再び呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c5f336c46236fef6d33a9737fecfbc45848cc85a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;receive&lt;/code&gt; construct is used to allow processes to wait for messages from other processes. It has the following format:</source>
          <target state="translated">&lt;code&gt;receive&lt;/code&gt; 構築物のプロセスが他のプロセスからのメッセージを待つことを可能にするために使用されます。次の形式があります。</target>
        </trans-unit>
        <trans-unit id="37481113af1fc6bf67ec51a1b4573b5766d4940d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;receive&lt;/code&gt; expression can be augmented with a timeout:</source>
          <target state="translated">&lt;code&gt;receive&lt;/code&gt; 式がタイムアウトで拡張することができます。</target>
        </trans-unit>
        <trans-unit id="42725fa1b02c7390bf310c7b5f650def33047bd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;receiver&lt;/code&gt; will first be sent the &lt;code&gt;snmp_targets&lt;/code&gt; message, and then for each address in &lt;code&gt;Addresses&lt;/code&gt; list, one of the two &lt;code&gt;snmp_notification&lt;/code&gt; messages.</source>
          <target state="translated">&lt;code&gt;receiver&lt;/code&gt; 最初に送信される &lt;code&gt;snmp_targets&lt;/code&gt; の各アドレスに、メッセージを、および &lt;code&gt;Addresses&lt;/code&gt; リスト、二つのうちの一つ &lt;code&gt;snmp_notification&lt;/code&gt; のメッセージ。</target>
        </trans-unit>
        <trans-unit id="e35f7f5fad0e5d56316957219823696de6e6786c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refc&lt;/code&gt; field has been removed. The reference count of an &lt;code&gt;ErlDrvBinary&lt;/code&gt; is now stored elsewhere. The reference count of an &lt;code&gt;ErlDrvBinary&lt;/code&gt; can be accessed through &lt;code&gt;&lt;a href=&quot;#driver_binary_get_refc&quot;&gt;driver_binary_get_refc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#driver_binary_inc_refc&quot;&gt;driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#driver_binary_dec_refc&quot;&gt;driver_binary_dec_refc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;refc&lt;/code&gt; フィールドが削除されました。 &lt;code&gt;ErlDrvBinary&lt;/code&gt; の参照カウントが別の場所に保存されるようになりました。 &lt;code&gt;ErlDrvBinary&lt;/code&gt; の参照カウントには、 &lt;code&gt;&lt;a href=&quot;#driver_binary_get_refc&quot;&gt;driver_binary_get_refc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#driver_binary_inc_refc&quot;&gt;driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#driver_binary_dec_refc&quot;&gt;driver_binary_dec_refc&lt;/a&gt;&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="660ed54d5ac1fcd2169600b38b40bd925d66cf86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;release_handler&lt;/code&gt; copies these files to the &lt;code&gt;bin&lt;/code&gt; directory in the client directory at the master nodes whenever a new release is made permanent.</source>
          <target state="translated">&lt;code&gt;release_handler&lt;/code&gt; コピーに、これらのファイル &lt;code&gt;bin&lt;/code&gt; 新しいリリースは永久的なものにするたびに、マスタノードでのクライアントのディレクトリ内のディレクトリを。</target>
        </trans-unit>
        <trans-unit id="56830d582041a2d058cd8b9ca80ec725e5c3e287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reload&lt;/code&gt; option can be either of the following:</source>
          <target state="translated">&lt;code&gt;reload&lt;/code&gt; オプションは、いずれか、次のことができます。</target>
        </trans-unit>
        <trans-unit id="207c0a4a6dd7d54555e6c470a0c170ec46378f8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;relup&lt;/code&gt; file contains instructions for how to upgrade to, or downgrade from, this version of the release.</source>
          <target state="translated">&lt;code&gt;relup&lt;/code&gt; のファイルがにアップグレード、またはリリースのこのバージョンからダウングレードする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="eb051013f36a233ac41b404b8075c071558087a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;relup&lt;/code&gt; file contains one single Erlang term, which defines the instructions used to upgrade the release. The file has the following syntax:</source>
          <target state="translated">&lt;code&gt;relup&lt;/code&gt; のファイルには、リリースをアップグレードするために使用される命令を定義する1つのErlangの用語が含まれています。ファイルの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d56076bd8991e00d489d3da464bc1ef66915e244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reply_timer&lt;/code&gt; eventually times out.</source>
          <target state="translated">&lt;code&gt;reply_timer&lt;/code&gt; 最終的にタイムアウト。</target>
        </trans-unit>
        <trans-unit id="3918ee266b06587588695e693fc72ac650418ae7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restart&lt;/code&gt; key is optional. If it is not given, the default value &lt;code&gt;permanent&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;restart&lt;/code&gt; キーはオプションです。指定しない場合は、デフォルト値の &lt;code&gt;permanent&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="aa12db49496616557ec440b620daa191bf27cdc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restart&lt;/code&gt; key is optional. If it is not specified, it defaults to &lt;code&gt;permanent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;restart&lt;/code&gt; キーはオプションです。指定されていない場合、デフォルトで &lt;code&gt;permanent&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b6a92effc8d3efc4277861eec34f0f1caed07816" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restart_new_emulator&lt;/code&gt; instruction must always be the first instruction in a relup. If the relup is generated by &lt;code&gt;systools:make_relup/3,4&lt;/code&gt;, this is automatically ensured.</source>
          <target state="translated">&lt;code&gt;restart_new_emulator&lt;/code&gt; の命令は常にrelup内の最初の命令でなければなりません。 &lt;code&gt;systools:make_relup/3,4&lt;/code&gt; によって生成される場合、これは自動的に保証されます。</target>
        </trans-unit>
        <trans-unit id="11d3f640ffec2cfdf0c8a6e928ab7cecff319eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run_erl&lt;/code&gt; program is specific to Unix systems. This program redirects the standard input and standard output streams so that all output can be logged. It also lets the program &lt;code&gt;to_erl&lt;/code&gt; connect to the Erlang console, making it possible to monitor and debug an embedded system remotely.</source>
          <target state="translated">&lt;code&gt;run_erl&lt;/code&gt; のプログラムは、UNIXシステムに固有のものです。このプログラムは、すべての出力をログに記録できるように、標準入力および標準出力ストリームをリダイレクトします。また、プログラム &lt;code&gt;to_erl&lt;/code&gt; をErlangコンソールに接続して、組み込みシステムをリモートで監視およびデバッグできるようにします。</target>
        </trans-unit>
        <trans-unit id="750c30ae5ba824b2f2aab4a171c99b419364a053" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;runtime_dependencies&lt;/code&gt; key was introduced in OTP 17.0. The type of its value might be subject to changes during the OTP 17 release.</source>
          <target state="translated">&lt;code&gt;runtime_dependencies&lt;/code&gt; のキーは、OTP 17.0で導入されました。その値のタイプは、OTP 17リリース中に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="49d8491d2a1375817a9cf2b814c2646acf960284" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sasl&lt;/code&gt; application includes the example Erlang module &lt;code&gt;target_system.erl&lt;/code&gt;, which contains functions for creating and installing a target system. This module is used in the following examples. The source code of the module is listed in &lt;code&gt;&lt;a href=&quot;#listing%20of%20target%20system&quot;&gt;Listing of target_system.erl&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sasl&lt;/code&gt; アプリケーションは、例えば、アーランモジュール含ま &lt;code&gt;target_system.erl&lt;/code&gt; 作成およびターゲット・システムをインストールするための機能が含まれ、。このモジュールは、次の例で使用されています。モジュールのソースコードは、 &lt;code&gt;&lt;a href=&quot;#listing%20of%20target%20system&quot;&gt;Listing of target_system.erl&lt;/a&gt;&lt;/code&gt; されています。</target>
        </trans-unit>
        <trans-unit id="3906ed9fb14f8072e02da2d35e2b47f21b0a6292" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; expression matches all entries in table employee with the field &lt;code&gt;sex&lt;/code&gt; set to &lt;code&gt;female&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 式は、フィールドとテーブルの従業員のすべてのエントリと一致した &lt;code&gt;sex&lt;/code&gt; にセット &lt;code&gt;female&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f5c2c9e1f5cbdb80c6a7e6b52821b6b12fa676f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;'receive'&lt;/code&gt; flags enable tracing of all messages sent and received by the process/port. Trace patterns set with &lt;code&gt;tpe&lt;/code&gt; may limit traced messages based on the message content, the sender, and/or the receiver.</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; および &lt;code&gt;'receive'&lt;/code&gt; フラグは、プロセス/ポートによって送受信されるすべてのメッセージのトレースを使用可能にします。 &lt;code&gt;tpe&lt;/code&gt; で設定されたトレースパターンは、メッセージの内容、送信者、および/または受信者に基づいて、トレースされるメッセージを制限する場合があります。</target>
        </trans-unit>
        <trans-unit id="0233a943ab6f52106ec90bb0ab714ed2cd9deb4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;send&lt;/code&gt; call does not accept a time-out option because time-outs on send is handled through socket option &lt;code&gt;send_timeout&lt;/code&gt;. The behavior of a send operation with no receiver is mainly defined by the underlying TCP stack and the network infrastructure. To write code that handles a hanging receiver that can eventually cause the sender to hang on a &lt;code&gt;send&lt;/code&gt; do like the following.</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; センドのタイムアウトがソケットオプションを介して処理されるため、呼び出しがタイムアウトオプションを受け入れていない &lt;code&gt;send_timeout&lt;/code&gt; 。レシーバーを使用しない送信操作の動作は、主に、基盤となるTCPスタックとネットワークインフラストラクチャによって定義されます。最終的に送信側が送信でハングする原因となるハングしているレシーバを処理するコードを記述する &lt;code&gt;send&lt;/code&gt; は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="bdcf831f5f9a895f78c5ead8d39eb67c53d11a2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;send_notification/6&lt;/code&gt; function is the most general version of the function. A &lt;code&gt;ContextName&lt;/code&gt; must be specified, from which the notification will be sent. If this parameter is not specified, the default context (&lt;code&gt;&quot;&quot;&lt;/code&gt;) is used.</source>
          <target state="translated">&lt;code&gt;send_notification/6&lt;/code&gt; 関数は、関数の最も一般的なバージョンです。A &lt;code&gt;ContextName&lt;/code&gt; 通知が送信されるから、指定しなければなりません。このパラメーターが指定されていない場合、デフォルトのコンテキスト（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）が使用されます。</target>
        </trans-unit>
        <trans-unit id="e10004941e2f7c2be1fb735798912ba806d773f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;send_out_queue&lt;/code&gt; routine is as follows:</source>
          <target state="translated">&lt;code&gt;send_out_queue&lt;/code&gt; 次のようにルーチンは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="843b939f65952e899d6ea657ca1ebe102c72dbe3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server&lt;/code&gt; module corresponds, greatly simplified, to the Erlang/OTP behaviour &lt;code&gt;gen_server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;server&lt;/code&gt; モジュールの対応は、大幅アーラン/ OTP挙動に、簡略化さ &lt;code&gt;gen_server&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3eede287bf30328bbe010a8372b63b7607963a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; commands modifies or adds an Erlang service, respectively. The simplest form of an &lt;code&gt;add&lt;/code&gt; command is without any options in which case all default values (described above) apply. The service name is mandatory.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; と &lt;code&gt;add&lt;/code&gt; のコマンドを変更したり、それぞれ、Erlangのサービスを追加します。 &lt;code&gt;add&lt;/code&gt; コマンドの最も単純な形式はオプションなしであり、その場合、すべてのデフォルト値（前述）が適用されます。サービス名は必須です。</target>
        </trans-unit>
        <trans-unit id="7d5aec8c53556f4c4632141415f220fd68b8daa2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; function checks if it has enough information to make the row change its status from &lt;code&gt;notReady&lt;/code&gt; to &lt;code&gt;notInService&lt;/code&gt; (when a row has been been set to &lt;code&gt;createAndWait&lt;/code&gt;). If a row is set to &lt;code&gt;createAndWait&lt;/code&gt;, columns without a value are set to &lt;code&gt;noinit&lt;/code&gt;. If Mnesia is used, the set functionality is handled within a transaction.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 関数のチェックは行から、そのステータスを変更するのに十分な情報がある場合 &lt;code&gt;notReady&lt;/code&gt; に &lt;code&gt;notInService&lt;/code&gt; の（行に設定されたとき &lt;code&gt;createAndWait&lt;/code&gt; にします）。行が &lt;code&gt;createAndWait&lt;/code&gt; に設定されている場合、値のない列は &lt;code&gt;noinit&lt;/code&gt; に設定されます。Mnesiaを使用する場合、設定機能はトランザクション内で処理されます。</target>
        </trans-unit>
        <trans-unit id="dffce6a86883fb98a441ee618f3e33a10bd8dd89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_on_spawn&lt;/code&gt; option will active call time tracing for all processes spawned by processes in the rootset. This is the default behaviour.</source>
          <target state="translated">&lt;code&gt;set_on_spawn&lt;/code&gt; のオプションは、アクティブな通話時間rootset内のプロセスによって生成されたすべてのプロセスのためにトレースします。これがデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="d7ea8237fdbb6c1e6e9cad779100829368078340" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shutdown&lt;/code&gt; key is optional. If it is not given, and the child is of type &lt;code&gt;worker&lt;/code&gt;, the default value &lt;code&gt;5000&lt;/code&gt; will be used; if the child is of type &lt;code&gt;supervisor&lt;/code&gt;, the default value &lt;code&gt;infinity&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;shutdown&lt;/code&gt; キーはオプションです。指定されておらず、子のタイプが &lt;code&gt;worker&lt;/code&gt; の場合、デフォルト値 &lt;code&gt;5000&lt;/code&gt; が使用されます。子のタイプが &lt;code&gt;supervisor&lt;/code&gt; の場合、デフォルト値の &lt;code&gt;infinity&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="2cb49de51c4b23fb4081f3a3f48b32fd97395704" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shutdown&lt;/code&gt; key is optional. If it is not specified, it defaults to &lt;code&gt;5000&lt;/code&gt; if the child is of type &lt;code&gt;worker&lt;/code&gt; and it defaults to &lt;code&gt;infinity&lt;/code&gt; if the child is of type &lt;code&gt;supervisor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shutdown&lt;/code&gt; キーはオプションです。指定しない場合、子のタイプが &lt;code&gt;worker&lt;/code&gt; の場合はデフォルトで &lt;code&gt;5000&lt;/code&gt; になり、子のタイプが &lt;code&gt;supervisor&lt;/code&gt; の場合はデフォルトで &lt;code&gt;infinity&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="38a6562eb72c50374e4148dda56f4f2798a51836" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;silent&lt;/code&gt; trace flag facilitates setting up a trace on many or even all processes in the system. The trace can then be activated and deactivated using the match specification function &lt;code&gt;{silent,Bool}&lt;/code&gt;, giving a high degree of control of which functions with which arguments that trigger the trace.</source>
          <target state="translated">&lt;code&gt;silent&lt;/code&gt; トレースフラグは、システム内の多くの、あるいはすべてのプロセスのトレースをセットアップが容易。次に、一致指定関数 &lt;code&gt;{silent,Bool}&lt;/code&gt; を使用してトレースをアクティブ化および非アクティブ化し、トレースをトリガーする引数と関数を高度に制御できます。</target>
        </trans-unit>
        <trans-unit id="57bdb45fe915c31143be502180221ee741783591" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; field changed from signed to unsigned. This can cause problems for, for example, loop termination conditions or error conditions if you only change the types all over the place.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; から変更フィールドは、符号なしに署名しました。これは、場所全体でタイプを変更するだけの場合、ループ終了条件やエラー条件などの問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="240a989a5bf707c990bcb78e115aed91f3f04714" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; field in &lt;code&gt;&lt;a href=&quot;#ErlIOVec&quot;&gt;ErlIOVec&lt;/a&gt;&lt;/code&gt; has been changed to &lt;code&gt;ErlDrvSizeT&lt;/code&gt; from &lt;code&gt;int&lt;/code&gt;. Check all code that use that field.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ErlIOVec&quot;&gt;ErlIOVec&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;size&lt;/code&gt; フィールドが &lt;code&gt;int&lt;/code&gt; から &lt;code&gt;ErlDrvSizeT&lt;/code&gt; に変更されました。そのフィールドを使用するすべてのコードを確認してください。</target>
        </trans-unit>
        <trans-unit id="a337f162f4c8e035168099f55089fef2894d81f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory could be useful to release for debugging purposes but is not required. The &lt;code&gt;include&lt;/code&gt; directory should only be released if the applications has public include files.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; ディレクトリには、デバッグの目的でリリースすることが有用である可能性が、必須ではありません。 &lt;code&gt;include&lt;/code&gt; アプリケーションがパブリックファイルが含まれている場合は、ディレクトリにのみ解放されなければなりません。</target>
        </trans-unit>
        <trans-unit id="fc13993adad718eae8701221afde4693b532449e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ssh&lt;/code&gt; application is an implementation of the SSH Transport, Connection and Authentication Layer Protocols in Erlang. It provides the following:</source>
          <target state="translated">&lt;code&gt;ssh&lt;/code&gt; アプリケーションは、SSH交通、アーランでの接続と認証層プロトコルの実装です。以下を提供します。</target>
        </trans-unit>
        <trans-unit id="8f65d2a2ea4f4fd44a5c098586ac285ac95cdefd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; commands communicates with the service manager for starting and stopping a service. The commands wait until the service is started or stopped. When disabling a service, it is not stopped, the disabled state does not take effect until the service is stopped. Enabling a service sets it in automatic mode, which is started at boot. This command cannot set the service to manual.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; と &lt;code&gt;stop&lt;/code&gt; サービスを開始し、停止するためのサービスマネージャと通信を指令します。コマンドは、サービスが開始または停止されるまで待機します。サービスを無効にしてもサービスは停止せず、サービスが停止するまで無効状態は有効になりません。サービスを有効にすると、サービスが起動時に開始される自動モードに設定されます。このコマンドは、サービスを手動に設定できません。</target>
        </trans-unit>
        <trans-unit id="d1f3d732c30aec74a57c16dda04003bb1543c716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; entry is called when the driver is opened as a port with &lt;code&gt;open_port/2&lt;/code&gt;. Here we allocate memory for a user data structure. This user data is passed every time the emulator calls us. First we store the driver handle, as it is needed in later calls. We allocate memory for the connection handle that is used by LibPQ. We also set the port to return allocated driver binaries, by setting flag &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt;, calling &lt;code&gt;set_port_control_flags&lt;/code&gt;. (This is because we do not know if our data will fit in the result buffer of &lt;code&gt;control&lt;/code&gt;, which has a default size, 64 bytes, set up by the emulator.)</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; ドライバが有するポートとして開かれたときにエントリが呼び出され &lt;code&gt;open_port/2&lt;/code&gt; 。ここでは、ユーザーデータ構造にメモリを割り当てます。このユーザーデータは、エミュレーターから呼び出されるたびに渡されます。後の呼び出しで必要になるため、最初にドライバーハンドルを格納します。LibPQが使用する接続ハンドルにメモリを割り当てます。また、フラグ設定することで、割り当てられたドライバのバイナリを返すようにポートを設定し &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt; を呼び出し、 &lt;code&gt;set_port_control_flags&lt;/code&gt; を。（これは、データが、エミュレーターによってセットアップされた64バイトのデフォルトサイズの &lt;code&gt;control&lt;/code&gt; の結果バッファーに収まるかどうかわからないためです。）</target>
        </trans-unit>
        <trans-unit id="f756fe51eb87c21305c2536fa74b5434575da4c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; key is mandatory.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; キーが必須です。</target>
        </trans-unit>
        <trans-unit id="7a89df12694a55231dbe9df289731067f34bf0ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; program is called when the machine is started.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; プログラムは、マシンの起動時に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="34d8bb2f8c095328e05b319382abf621840539e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; script is an example script on how to start up the Erlang system in embedded mode on Unix.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; スクリプトは、Unix上で組み込みモードでErlangのシステムを起動する方法についてのスクリプトの例です。</target>
        </trans-unit>
        <trans-unit id="c9b5982012fe67cdfffd9b71b0eeb41c6d062f31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; script is to be edited accordingly.</source>
          <target state="translated">それに応じて、 &lt;code&gt;start&lt;/code&gt; スクリプトを編集します。</target>
        </trans-unit>
        <trans-unit id="31e73008fe878f9797af9d091c4fba4b24889e97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_disabled&lt;/code&gt; command operates on a service regardless of if it is enabled/disabled or started/stopped. It does this by first enabling it (regardless of if it is enabled or not), then starting it (if not already started), and then disabling it. The result is a disabled but started service, regardless of its earlier state. This is useful for starting services temporarily during a release upgrade. The difference between using &lt;code&gt;start_disabled&lt;/code&gt; and the sequence &lt;code&gt;enable&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt;, and &lt;code&gt;disable&lt;/code&gt; is that all other &lt;code&gt;erlsrv&lt;/code&gt; commands are locked out during the sequence of operations in &lt;code&gt;start_disable&lt;/code&gt;, making the operation atomic from an &lt;code&gt;erlsrv&lt;/code&gt; user's point of view.</source>
          <target state="translated">&lt;code&gt;start_disabled&lt;/code&gt; コマンドは関係なく、それが有効/無効または開始された場合のサービス上で動作/停止。これを行うには、まず有効にします（有効になっているかどうかに関係なく）、次に起動し（まだ起動していない場合）、次に無効にします。その結果、以前の状態に関係なく、サービスは無効になりますが開始されます。これは、リリースのアップグレード中に一時的にサービスを開始するのに役立ちます。 &lt;code&gt;start_disabled&lt;/code&gt; とシーケンス &lt;code&gt;enable&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; 、および &lt;code&gt;disable&lt;/code&gt; の使用の違いは、他のすべての &lt;code&gt;erlsrv&lt;/code&gt; コマンドがstart_disableでの一連の操作中にロックアウトされ、操作が &lt;code&gt;start_disable&lt;/code&gt; からアトミックになること &lt;code&gt;erlsrv&lt;/code&gt; ユーザーの視点。</target>
        </trans-unit>
        <trans-unit id="fc0272cbbd8f9392623927de4cb2fc5730b48880" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_erl&lt;/code&gt; program in its original form recognizes the following options:</source>
          <target state="translated">元の形式の &lt;code&gt;start_erl&lt;/code&gt; プログラムは、次のオプションを認識します。</target>
        </trans-unit>
        <trans-unit id="a046e5227b7bb73b869f5bee562322400ca78ede" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_erl&lt;/code&gt; program is specific to Windows NT/2000/XP (and later versions of Windows). Although there are programs with the same name on other platforms, their functionality is different.</source>
          <target state="translated">&lt;code&gt;start_erl&lt;/code&gt; プログラムは、Windows NT / 2000 / XP（およびそれ以降のバージョンのWindows）に固有のものです。他のプラットフォームでは同じ名前のプログラムがありますが、機能は異なります。</target>
        </trans-unit>
        <trans-unit id="dbb5a322b443d443c9f79ed8f50a8ce9c3dd4066" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_erl&lt;/code&gt; shell script is normally not to be altered by the user.</source>
          <target state="translated">&lt;code&gt;start_erl&lt;/code&gt; のシェル・スクリプトは、ユーザによって変更されることは通常ありません。</target>
        </trans-unit>
        <trans-unit id="f114d80543f043efa956ef10b8b8d871f223052b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stop&lt;/code&gt; entry is called when the port is closed.</source>
          <target state="translated">&lt;code&gt;stop&lt;/code&gt; ポートが閉じているときに、エントリが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d04747a932902a65b42336d22f13d3d5bc78329f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strategy&lt;/code&gt; key is optional in this map. If it is not given, it defaults to &lt;code&gt;one_for_one&lt;/code&gt;.</source>
          <target state="translated">このマップでは、 &lt;code&gt;strategy&lt;/code&gt; キーはオプションです。指定しない場合、デフォルトで &lt;code&gt;one_for_one&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="ac46c7648d961485339da72bde9519efe243649a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string&lt;/code&gt; module works perfectly for Unicode strings and ISO Latin-1 strings, except the language-dependent functions &lt;code&gt;string:uppercase/1&lt;/code&gt; and &lt;code&gt;string:lowercase/1&lt;/code&gt;. These two functions can never function correctly for Unicode characters in their current form, as there are language and locale issues to consider when converting text between cases. Converting case in an international environment is a large subject not yet addressed in OTP.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; モジュールは、言語に依存する機能を除き、Unicode文字列とISO Latin-1の文字列のために完璧に動作し &lt;code&gt;string:uppercase/1&lt;/code&gt; と &lt;code&gt;string:lowercase/1&lt;/code&gt; 。ケース間でテキストを変換するときに考慮すべき言語とロケールの問題があるため、これらの2つの関数は、現在の形式のUnicode文字に対しては正しく機能しません。国際環境でのケースの変換は、OTPではまだ対処されていない大きな課題です。</target>
        </trans-unit>
        <trans-unit id="bbf0fa4cdfc9cb3b3a98e97fea86cc7766872258" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subsystem_name&lt;/code&gt; is the name that a client requests to start with for example &lt;code&gt;&lt;a href=&quot;ssh_connection#subsystem-4&quot;&gt;ssh_connection:subsystem/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subsystem_name&lt;/code&gt; は、クライアントの要求は、例えば、のために開始することを名前である &lt;code&gt;&lt;a href=&quot;ssh_connection#subsystem-4&quot;&gt;ssh_connection:subsystem/4&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09767c0926afa55480ccd26075dea864841952af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;suspend&lt;/code&gt; pseudo function has got an OWN time of zero. This is to prevent the process total OWN time from including time in suspension. Whether suspend time is really ACC or OWN time is more of a philosophical question.</source>
          <target state="translated">&lt;code&gt;suspend&lt;/code&gt; 擬似関数がゼロの自分の時間を持っています。これは、プロセスの合計OWN時間に一時停止時間が含まれないようにするためです。一時停止時間が本当にACCなのか、それともOWNなのかは、より哲学的な問題です。</target>
        </trans-unit>
        <trans-unit id="56fd6933946b063ca50f26b9fde4abf8abbc8167" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sys&lt;/code&gt; module has functions for simple debugging of processes implemented using behaviours. It also has functions that, together with functions in the &lt;code&gt;proc_lib&lt;/code&gt; module, can be used to implement a &lt;strong&gt;special process&lt;/strong&gt; that complies to the OTP design principles without using a standard behaviour. These functions can also be used to implement user-defined (non-standard) behaviours.</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; モジュールは、行動を使用して実施されるプロセスの簡単なデバッグのための機能を持っています。また、 &lt;code&gt;proc_lib&lt;/code&gt; モジュールの関数と一緒に、標準の動作を使用せずにOTP設計原則に準拠する&lt;strong&gt;特別なプロセス&lt;/strong&gt;を実装するために使用できる関数もあります。これらの関数を使用して、ユーザー定義の（非標準の）動作を実装することもできます。</target>
        </trans-unit>
        <trans-unit id="a5f881a797bfc4fbe38f558b9ae2256b6de4f52c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sys&lt;/code&gt; module has functions for simple debugging of processes implemented using behaviours. The &lt;code&gt;code_lock&lt;/code&gt; example from &lt;code&gt;&lt;a href=&quot;statem#Example&quot;&gt;gen_statem Behaviour&lt;/a&gt;&lt;/code&gt; is used to illustrate this:</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; モジュールは、行動を使用して実施されるプロセスの簡単なデバッグのための機能を持っています。これを説明するために、 &lt;code&gt;&lt;a href=&quot;statem#Example&quot;&gt;gen_statem Behaviour&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;code_lock&lt;/code&gt; の例を使用します。</target>
        </trans-unit>
        <trans-unit id="d8d80e46d29a3b09620c79d01dfafc6546d08b34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system&lt;/code&gt; value is not complete. Some allocated memory that is to be part of this value is not.</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; 値は完全ではありません。この値の一部となる割り当てられたメモリは、そうではありません。</target>
        </trans-unit>
        <trans-unit id="26e392c3cf2f0ef617cba237c6220075b3ea4b25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system_dir&lt;/code&gt; option must be a directory containing a host key file and it defaults to &lt;code&gt;/etc/ssh&lt;/code&gt;. For details, see Section Configuration Files in &lt;code&gt;ssh(6)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;system_dir&lt;/code&gt; のオプションは、ホスト鍵ファイルを含むディレクトリで、そのデフォルトにしなければならない &lt;code&gt;/etc/ssh&lt;/code&gt; 。詳細については、 &lt;code&gt;ssh(6)&lt;/code&gt; のセクション構成ファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="8dc4b52b4a1a8766ffe6fbf819d4319fd568e3cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;systools:make_tar/1,2&lt;/code&gt; function takes a &lt;code&gt;.rel&lt;/code&gt; file as input and creates a zipped tar file with the code for the specified applications, a &lt;strong&gt;release package&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;systools:make_tar/1,2&lt;/code&gt; 関数がかかり &lt;code&gt;.rel&lt;/code&gt; の入力としてファイルを、指定されたアプリケーションのためのコードで圧縮されたtarファイル作成&lt;strong&gt;リリースパッケージを&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="301c4b01094f4be3c122bd03d67de7a461179ba6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;table_info/2&lt;/code&gt; function takes two arguments. The first is the name of a Mnesia table. The second is one of the following keys:</source>
          <target state="translated">&lt;code&gt;table_info/2&lt;/code&gt; 機能は2つの引数を取ります。最初はMnesiaテーブルの名前です。2番目は、次のキーのいずれかです。</target>
        </trans-unit>
        <trans-unit id="cc6490531af30f5ced0c442f4ca5f18223c8f2ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tag_receiver()&lt;/code&gt; will first be sent the &lt;code&gt;snmp_targets&lt;/code&gt; message, and then for each address in &lt;code&gt;Addresses&lt;/code&gt; list, one of the two &lt;code&gt;snmp_notification&lt;/code&gt; messages.</source>
          <target state="translated">&lt;code&gt;tag_receiver()&lt;/code&gt; が最初に送信される &lt;code&gt;snmp_targets&lt;/code&gt; の各アドレスに、メッセージを、および &lt;code&gt;Addresses&lt;/code&gt; リスト、二つのうちの一つ &lt;code&gt;snmp_notification&lt;/code&gt; のメッセージ。</target>
        </trans-unit>
        <trans-unit id="05b2bd26a182333de1bd8075c792a7cf0885382c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;term&lt;/code&gt; structure contains the arity for a tuple or list, size for a binary, string, or atom. It contains a term if it is any of the following: integer, float, atom, pid, port, or ref.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; 構造は、タプルまたはリストのためのアリティ、バイナリ、文字列、または原子のサイズを含んでいます。integer、float、atom、pid、port、またはrefのいずれかである場合は、用語が含まれています。</target>
        </trans-unit>
        <trans-unit id="414ded4046829ee348e2029f26b1f968edf7170d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;terminating&lt;/code&gt; options effects discovery initiated by a manager.</source>
          <target state="translated">&lt;code&gt;terminating&lt;/code&gt; オプションの効果の発見は、管理者によって開始しました。</target>
        </trans-unit>
        <trans-unit id="7e88c128d4034b8d31e143d58083f1b627d669f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; functions use the &lt;code&gt;*.asn1db&lt;/code&gt; files for all included modules. If they are located in a different directory than the current working directory, use the &lt;code&gt;include&lt;/code&gt; option to add paths. This is only needed when automatically generating values. For static values using &lt;code&gt;Value&lt;/code&gt; no options are needed.</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 機能は使用 &lt;code&gt;*.asn1db&lt;/code&gt; すべて含まれるモジュールのファイルを。現在の作業ディレクトリとは別のディレクトリにある場合は、 &lt;code&gt;include&lt;/code&gt; オプションを使用してパスを追加します。これは、値を自動的に生成する場合にのみ必要です。 &lt;code&gt;Value&lt;/code&gt; を使用する静的な値の場合、オプションは必要ありません。</target>
        </trans-unit>
        <trans-unit id="83b7e0837f597d64ddcc824925c5e1f6e2d7ce99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tftp&lt;/code&gt; application implements the following IETF standards:</source>
          <target state="translated">&lt;code&gt;tftp&lt;/code&gt; アプリケーションは、次のIETF標準を実装しています。</target>
        </trans-unit>
        <trans-unit id="4bd16215e29bac88188ec05db9e000d6b25c2a4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;time_unit/0&lt;/code&gt; type can be extended. To convert time values between time units, use &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt;erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;time_unit/0&lt;/code&gt; タイプを延ばすことができます。時間単位間で時間値を変換するには、 &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt;erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="2d6b5da79accb971f070469104b62f5de13468c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeout&lt;/code&gt; option in the &lt;code&gt;SearchOptions&lt;/code&gt; is for the ldap server, while the timeout in &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;eldap:open/2&lt;/a&gt;&lt;/code&gt; is used for each individual request in the search operation.</source>
          <target state="translated">&lt;code&gt;SearchOptions&lt;/code&gt; の &lt;code&gt;timeout&lt;/code&gt; オプションはLDAPサーバー用ですが、 &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;eldap:open/2&lt;/a&gt;&lt;/code&gt; のタイムアウトは、検索操作の個々のリクエストごとに使用されます。</target>
        </trans-unit>
        <trans-unit id="3469f460bad51d15abfb716bef8439dd19f5713d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;total&lt;/code&gt; value is supposed to be the total amount of memory dynamically allocated by the emulator. Shared libraries, the code of the emulator itself, and the emulator stacks are not supposed to be included. That is, the &lt;code&gt;total&lt;/code&gt; value is &lt;strong&gt;not&lt;/strong&gt; supposed to be equal to the total size of all pages mapped to the emulator.</source>
          <target state="translated">&lt;code&gt;total&lt;/code&gt; 値を動的エミュレータによって割り当てられたメモリの合計量であると考えられます。共有ライブラリ、エミュレーター自体のコード、およびエミュレータースタックは含まれていません。つまり、 &lt;code&gt;total&lt;/code&gt; 値は、エミュレーターにマップされたすべてのページの合計サイズと等しいとは&lt;strong&gt;限りません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="855a90cd384864cf599ca9011960a53bac88f853" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim&lt;/code&gt; behavior corresponds exactly to the Perl default. &lt;code&gt;{parts,N}&lt;/code&gt;, where N is a positive integer, corresponds exactly to the Perl behavior with a positive numerical third parameter. The default behavior of &lt;code&gt;split/3&lt;/code&gt; corresponds to the Perl behavior when a negative integer is specified as the third parameter for the Perl routine.</source>
          <target state="translated">&lt;code&gt;trim&lt;/code&gt; 動作は、Perlのデフォルトに正確に対応します。 &lt;code&gt;{parts,N}&lt;/code&gt; （Nは正の整数）は、正の数値の3番目のパラメーターを持つPerlの動作に正確に対応します。 &lt;code&gt;split/3&lt;/code&gt; のデフォルトの動作は、Perlルーチンの3番目のパラメーターとして負の整数が指定されている場合のPerlの動作に対応しています。</target>
        </trans-unit>
        <trans-unit id="503ae720e5d8f3760c374c5a7724a46be581ffb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; expression can also be augmented with an &lt;code&gt;after&lt;/code&gt; section, intended to be used for cleanup with side effects:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 表現もで拡張することができ &lt;code&gt;after&lt;/code&gt; のセクションでは、副作用をクリーンアップするために使用されることを意図しました：</target>
        </trans-unit>
        <trans-unit id="9aa8fddb846b9b7abd8af53c04dc022f8bbdb56d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; expression can have an &lt;code&gt;of&lt;/code&gt; section:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 式が持つことができる &lt;code&gt;of&lt;/code&gt; セクションを：</target>
        </trans-unit>
        <trans-unit id="874e9960e26401a3b617a3b1e2c19da394373ec5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; key is optional. If it is not given, the default value &lt;code&gt;worker&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; キーは任意です。指定しない場合は、デフォルト値の &lt;code&gt;worker&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="6ce30d2f89579b051b36741023e812a759179d4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; key is optional. If it is not specified, it defaults to &lt;code&gt;worker&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; キーは任意です。指定しない場合、デフォルトで &lt;code&gt;worker&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="c8f1c69ed96b83a679b6a1461cadd4cb592d2117" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uds_command&lt;/code&gt; routine is the routine called when an Erlang process sends data to the port. This routine handles all asynchronous commands when the port is in &lt;code&gt;command&lt;/code&gt; mode and the sending of all data when the port is in &lt;code&gt;data&lt;/code&gt; mode:</source>
          <target state="translated">&lt;code&gt;uds_command&lt;/code&gt; のルーチンは、Erlangのプロセスがポートにデータを送信するときに呼び出されるルーチンです。このルーチンは、ポートが &lt;code&gt;command&lt;/code&gt; モードのときにすべての非同期コマンドを処理し、ポートが &lt;code&gt;data&lt;/code&gt; モードのときにすべてのデータを送信します。</target>
        </trans-unit>
        <trans-unit id="12d38078aadeb17f73f6143b46507ced220c8b0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uds_input&lt;/code&gt; routine handles other input events (like non-blocking &lt;code&gt;accept&lt;/code&gt;), but most importantly handle data arriving at the socket by calling &lt;code&gt;do_recv&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;uds_input&lt;/code&gt; ルーチンハンドル（ノン・ブロッキングのような他の入力イベント &lt;code&gt;accept&lt;/code&gt; ）が、最も重要なの呼び出しによってソケットに到着するデータハンドル &lt;code&gt;do_recv&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="202a772c2bbbb0c73373b15e1d87ffd28aa29133" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uds_input&lt;/code&gt; routine is called when data is available on a file descriptor previously passed to the &lt;code&gt;driver_select&lt;/code&gt; routine. This occurs typically when a read command is issued and no data is available. The &lt;code&gt;do_recv&lt;/code&gt; routine is as follows:</source>
          <target state="translated">&lt;code&gt;uds_input&lt;/code&gt; のルーチンは、データが以前に渡されたファイル記述子で提供されたときに呼び出され &lt;code&gt;driver_select&lt;/code&gt; のルーチン。これは通常、読み取りコマンドが発行され、使用可能なデータがない場合に発生します。 &lt;code&gt;do_recv&lt;/code&gt; の次のようにルーチンは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="afe5ea4f80f83ad57ad0aad31e10486a4f2bf930" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uds_start&lt;/code&gt; routine is called when a port is opened from Erlang. In this case, we only allocate a structure and initialize it. Creating the actual socket is left to the &lt;code&gt;uds_command&lt;/code&gt; routine.</source>
          <target state="translated">&lt;code&gt;uds_start&lt;/code&gt; のポートはアーランから開いたときにルーチンが呼び出されます。この場合、構造体を割り当てて初期化するだけです。実際のソケットの作成は、 &lt;code&gt;uds_command&lt;/code&gt; ルーチンに任されています。</target>
        </trans-unit>
        <trans-unit id="8bfbb24810f0c5b15e0b6448d90f972fe31a6386" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;undo&lt;/code&gt; function does nothing.</source>
          <target state="translated">&lt;code&gt;undo&lt;/code&gt; 機能は何もしません。</target>
        </trans-unit>
        <trans-unit id="7969bdd4f7e8e8283016abfb83b747e28e6525e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unicode&lt;/code&gt; module is clearly Unicode-aware. It contains functions for conversion between different Unicode formats and some utilities for identifying byte order marks. Few programs handling Unicode data survive without this module.</source>
          <target state="translated">&lt;code&gt;unicode&lt;/code&gt; モジュールは明らかにUnicode対応です。これには、異なるUnicode形式間の変換のための関数と、バイトオーダーマークを識別するためのいくつかのユーティリティが含まれています。Unicodeデータを処理するいくつかのプログラムは、このモジュールなしで生き残ります。</target>
        </trans-unit>
        <trans-unit id="45fc4ab31edeed78de6dcc133ce43fa458252958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; function is an alternative for updating module data of recompiled modules.</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; 機能は、再コンパイルモジュールのモジュールデータを更新するための代替法です。</target>
        </trans-unit>
        <trans-unit id="e7a993cc2041a3a5e4126cbf7ea824172decdb48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; instruction must contain the tuple &lt;code&gt;{advanced,Extra}&lt;/code&gt;. The instruction makes the special process call the callback function &lt;code&gt;system_code_change/4&lt;/code&gt;, a function the user must implement. The term &lt;code&gt;Extra&lt;/code&gt;, in this case &lt;code&gt;[]&lt;/code&gt;, is passed as is to &lt;code&gt;system_code_change/4&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; 命令は、タプル含まなければならない &lt;code&gt;{advanced,Extra}&lt;/code&gt; 。この命令により、特別なプロセスがコールバック関数 &lt;code&gt;system_code_change/4&lt;/code&gt; を呼び出します。この関数は、ユーザーが実装する必要があります。 &lt;code&gt;Extra&lt;/code&gt; という用語、この場合は &lt;code&gt;[]&lt;/code&gt; がそのまま &lt;code&gt;system_code_change/4&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="55a52d1bdeacd91af756556ef9395d795b7ce705" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user_args&lt;/code&gt; configuration parameter which may be used to extend the argument list of the callback functions. For example, the handle_connect function takes by default two arguments:</source>
          <target state="translated">&lt;code&gt;user_args&lt;/code&gt; のコールバック関数の引数リストを拡張するために使用することができる構成パラメータ。たとえば、handle_connect関数はデフォルトで2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="c15ed8631e7be541ad2f112cab6d63b078785dc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vacmAccessTable&lt;/code&gt; maps the &lt;code&gt;groupName&lt;/code&gt; (found in &lt;code&gt;vacmSecurityToGroupTable&lt;/code&gt;), &lt;code&gt;contextName&lt;/code&gt;, &lt;code&gt;securityModel&lt;/code&gt;, and &lt;code&gt;securityLevel&lt;/code&gt; to an MIB view for each type of operation (read, write, or notify). The MIB view is represented as a &lt;code&gt;viewName&lt;/code&gt;. The definition of the MIB view represented by the &lt;code&gt;viewName&lt;/code&gt; is found in the &lt;code&gt;vacmViewTreeFamilyTable&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;vacmAccessTable&lt;/code&gt; マップ &lt;code&gt;groupName&lt;/code&gt; （に見出さ &lt;code&gt;vacmSecurityToGroupTable&lt;/code&gt; 内）、 &lt;code&gt;contextName&lt;/code&gt; は、 &lt;code&gt;securityModel&lt;/code&gt; 、そして &lt;code&gt;securityLevel&lt;/code&gt; 動作の各タイプ（読み書き、または通知）するためのMIBビューに。MIBビューは &lt;code&gt;viewName&lt;/code&gt; として表されます。 &lt;code&gt;viewName&lt;/code&gt; で表されるMIBビューの定義は、 &lt;code&gt;vacmViewTreeFamilyTable&lt;/code&gt; にあります</target>
        </trans-unit>
        <trans-unit id="a70d16c49aee0ecab7697bd61b2b47a75fed9fc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vacmContextTable&lt;/code&gt; is a read-only table that lists all available contexts.</source>
          <target state="translated">&lt;code&gt;vacmContextTable&lt;/code&gt; 内には、リストのすべての利用可能なコンテキストという読み取り専用のテーブルです。</target>
        </trans-unit>
        <trans-unit id="ef9aac3e2a8987ec6dd80992e0534a1b71403af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vacmSecurityToGroupTable&lt;/code&gt; maps a &lt;code&gt;securityModel&lt;/code&gt; and a &lt;code&gt;securityName&lt;/code&gt; to a &lt;code&gt;groupName&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vacmSecurityToGroupTable&lt;/code&gt; 内には、マッピングさ &lt;code&gt;securityModel&lt;/code&gt; と &lt;code&gt;securityName&lt;/code&gt; に &lt;code&gt;groupName&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28801f1623b234b9de96cc740a98bd5f85c06c85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vacmViewTreeFamilyTable&lt;/code&gt; is indexed by the &lt;code&gt;viewName&lt;/code&gt;, and defines which objects are included in the MIB view.</source>
          <target state="translated">&lt;code&gt;vacmViewTreeFamilyTable&lt;/code&gt; のはによって指標付けされ &lt;code&gt;viewName&lt;/code&gt; オブジェクトがMIBビューに含まれ、そして定義。</target>
        </trans-unit>
        <trans-unit id="1870424a39adeddc9df6d1301607365bb578c850" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vfs&lt;/code&gt; layer of MacOS X enforces UTF-8 filenames in an aggressive way. Older versions did this by refusing to create non-UTF-8 conforming filenames, while newer versions replace offending bytes with the sequence &quot;%HH&quot;, where HH is the original character in hexadecimal notation. As Unicode translation is enabled by default on MacOS X, the only way to come up against this is to either start the VM with flag &lt;code&gt;+fnl&lt;/code&gt; or to use a raw filename in bytewise (&lt;code&gt;latin1&lt;/code&gt;) encoding. If using a raw filename, with a bytewise encoding containing characters from 127 through 255, to create a file, the file cannot be opened using the same name as the one used to create it. There is no remedy for this behavior, except keeping the filenames in the correct encoding.</source>
          <target state="translated">MacOS X の &lt;code&gt;vfs&lt;/code&gt; レイヤーは、積極的にUTF-8ファイル名を適用します。古いバージョンでは、UTF-8に準拠しないファイル名の作成を拒否することでこれを行いましたが、新しいバージョンでは、問題のあるバイトをシーケンス「％HH」に置き換えます。HHは16進表記の元の文字です。 MacOS XではUnicode変換がデフォルトで有効になっているため、これに &lt;code&gt;+fnl&lt;/code&gt; する唯一の方法は、フラグ+ fnlで VMを起動するか、バイト単位（ &lt;code&gt;latin1&lt;/code&gt; ）エンコーディングで未加工のファイル名を使用することです。 127から255までの文字を含むバイト単位のエンコードで生のファイル名を使用してファイルを作成する場合、ファイルの作成に使用したのと同じ名前を使用してファイルを開くことはできません。ファイル名を正しいエンコーディングで維持することを除いて、この動作の解決策はありません。</target>
        </trans-unit>
        <trans-unit id="831df5545d1b1c7760cea7009d162230198cc0e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;werl&lt;/code&gt; window is in many ways modeled after the &lt;code&gt;xterm&lt;/code&gt; window present on other platforms, as the &lt;code&gt;xterm&lt;/code&gt; model fits well with line-oriented command-based interaction. This means that selecting text is line-oriented rather than rectangle-oriented.</source>
          <target state="translated">&lt;code&gt;werl&lt;/code&gt; ウィンドウはをモデルにした多くの方法である &lt;code&gt;xterm&lt;/code&gt; など、他のプラットフォーム上のウィンドウの存在 &lt;code&gt;xterm&lt;/code&gt; モデルが行指向のコマンドベースの対話とよく合います。これは、テキストの選択が長方形ではなく行指向であることを意味します。</target>
        </trans-unit>
        <trans-unit id="cb0a24e0ba3c71a8aad37252c9a038696dacac35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;whereis&lt;/code&gt; function-call verifies that the SSL application is started.</source>
          <target state="translated">&lt;code&gt;whereis&lt;/code&gt; は、関数呼び出しの検証は、SSLアプリケーションが起動されていること。</target>
        </trans-unit>
        <trans-unit id="a6d05af96ec0e7231d4e09ddd7a1fc622f5621cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{OtherRefId,term()}&lt;/code&gt; is defined by the user and is passed to the &lt;code&gt;match_fun&lt;/code&gt;, if defined. If the term in &lt;code&gt;OtherRefId&lt;/code&gt; is a binary, it will be converted to a string.</source>
          <target state="translated">&lt;code&gt;{OtherRefId,term()}&lt;/code&gt; ユーザーによって定義され、に渡される &lt;code&gt;match_fun&lt;/code&gt; 定義されている場合、。 &lt;code&gt;OtherRefId&lt;/code&gt; の用語がバイナリの場合、文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="19e1b6293cd5c62e374c8457e4fbd9d95a253158" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{mod, {Module,StartArgs}}&lt;/code&gt; option must be included. This option is used to find the callback module &lt;code&gt;Module&lt;/code&gt; of the application. &lt;code&gt;StartArgs&lt;/code&gt; is ignored, as &lt;code&gt;Module:start/2&lt;/code&gt; is called only for the primary application.</source>
          <target state="translated">&lt;code&gt;{mod, {Module,StartArgs}}&lt;/code&gt; オプションが含まれていなければなりません。このオプションは、アプリケーションのコールバックモジュール &lt;code&gt;Module&lt;/code&gt; を見つけるために使用されます。 &lt;code&gt;Module:start/2&lt;/code&gt; はプライマリアプリケーションに対してのみ呼び出されるため、 &lt;code&gt;StartArgs&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="4668f1fd645c2ffa2dba60de3db8016985e65bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{ok,tut}&lt;/code&gt; means that the compilation is OK. If it says &quot;error&quot; it means that there is some mistake in the text that you entered. Additional error messages gives an idea to what is wrong so you can modify the text and then try to compile the program again.</source>
          <target state="translated">&lt;code&gt;{ok,tut}&lt;/code&gt; コンパイルがOKであることを意味します。「エラー」と表示されている場合は、入力したテキストに誤りがあることを意味します。追加のエラーメッセージは、何が問題なのかを示しているので、テキストを変更してから、プログラムを再度コンパイルすることができます。</target>
        </trans-unit>
        <trans-unit id="37c82dec6529acb72fb125b0bac4fda347c61081" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{packet, N}&lt;/code&gt; and &lt;code&gt;{line, L}&lt;/code&gt; settings are mutually exclusive.</source>
          <target state="translated">&lt;code&gt;{packet, N}&lt;/code&gt; 及び &lt;code&gt;{line, L}&lt;/code&gt; の設定は相互に排他的です。</target>
        </trans-unit>
        <trans-unit id="971d55e17028d3606b6c283922622f2c0932a483" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{port,PortNum}&lt;/code&gt; tuple is optional and if omitted, default Telnet port 23 is used. Also the &lt;code&gt;keep_alive&lt;/code&gt; tuple is optional, and the value defauls to &lt;code&gt;true&lt;/code&gt; (enabled).</source>
          <target state="translated">&lt;code&gt;{port,PortNum}&lt;/code&gt; タプルはオプションであり、省略された場合、デフォルトのTelnetポート23が使用されます。また、 &lt;code&gt;keep_alive&lt;/code&gt; タプルはオプションであり、値は &lt;code&gt;true&lt;/code&gt; （有効）にデフォルト設定されます。</target>
        </trans-unit>
        <trans-unit id="fa6ece2cc8b2e8dafa07d4e08292eb70bec23c2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{start_phases, [{Phase,PhaseArgs}]}&lt;/code&gt; option must be included, and the set of specified phases must be a subset of the set of phases specified for the primary application.</source>
          <target state="translated">&lt;code&gt;{start_phases, [{Phase,PhaseArgs}]}&lt;/code&gt; オプションが含まれていなければならない、と指定された位相の集合は、プライマリアプリケーションのために指定された位相のセットのサブセットでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ff25bb9b46c77ee1bd1587510f1046fea71955a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;||&lt;/code&gt; &quot;such that&quot; and the arrow &lt;code&gt;&amp;lt;-&lt;/code&gt; is read as &quot;taken from&quot;.</source>
          <target state="translated">&lt;code&gt;||&lt;/code&gt; 「そのような」と矢印 &lt;code&gt;&amp;lt;-&lt;/code&gt; は「から取られた」と読み取られます。</target>
        </trans-unit>
        <trans-unit id="8950a73316b6b3766c9706406f02f3f2dda35162" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;Cartesian_product&quot;&gt;Cartesian product&lt;/strong&gt; of two sets X and Y, denoted X &amp;times; Y, is the set {a : a = (x, y) for some x in X and for some y in Y}.</source>
          <target state="translated">X&amp;times;Yで表される2つのセットXとY の&lt;strong id=&quot;Cartesian_product&quot;&gt;デカルト積&lt;/strong&gt;は、セット{a：a =（x、y）for some x in X and some y in Y in}です。</target>
        </trans-unit>
        <trans-unit id="97f5043ae782de1e349c1f4e82a07bd359c0964c" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;converse&quot;&gt;converse&lt;/strong&gt; of R is the set {a : a = (y, x) for some (x, y) in R}.</source>
          <target state="translated">R の&lt;strong id=&quot;converse&quot;&gt;逆&lt;/strong&gt;は{a：a =（y、x）for some（x、y）in R}の集合です。</target>
        </trans-unit>
        <trans-unit id="c74f91b2df651d6f1d918e8b3fa79c423cad5e1b" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;difference&quot;&gt;difference&lt;/strong&gt; of two sets A and B is the set that contains all elements of A that do not belong to B.</source>
          <target state="translated">2つのセットAとB の&lt;strong id=&quot;difference&quot;&gt;違い&lt;/strong&gt;は、Bに属さないAのすべての要素を含むセットです。</target>
        </trans-unit>
        <trans-unit id="efd11e10dc9bffd3ce00966684d96fd8a122cb0d" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;domain&quot;&gt;domain&lt;/strong&gt; of R is the set {x : x R y for some y in Y}.</source>
          <target state="translated">R の&lt;strong id=&quot;domain&quot;&gt;ドメイン&lt;/strong&gt;は、集合{x：x R y for some y in Y}です。</target>
        </trans-unit>
        <trans-unit id="377184fb47eff2618a884d3371438181861419a0" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;field&quot;&gt;field&lt;/strong&gt; of a relation R in X is the union of the domain of R and the range of R.</source>
          <target state="translated">Xの関係R の&lt;strong id=&quot;field&quot;&gt;体&lt;/strong&gt;は、Rの領域とRの範囲の和集合です。</target>
        </trans-unit>
        <trans-unit id="1a9617de87db1af0121da59eba19d31a6b757eff" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;in_degree&quot;&gt;in-degree&lt;/strong&gt; of a vertex is the number of edges incident on that vertex.</source>
          <target state="translated">&lt;strong id=&quot;in_degree&quot;&gt;中度の&lt;/strong&gt;頂点は、その頂点にエッジ入射の数です。</target>
        </trans-unit>
        <trans-unit id="4c0e00f79ce45926299ee2f3508020fdf2f45df9" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;intersection&quot;&gt;intersection&lt;/strong&gt; of two sets A and B is the set that contains all elements of A that belong to B.</source>
          <target state="translated">2つのセットAとB の&lt;strong id=&quot;intersection&quot;&gt;共通&lt;/strong&gt;部分は、Bに属するAのすべての要素を含むセットです。</target>
        </trans-unit>
        <trans-unit id="3f1d912f47b338c33084d89f0c15a5a316197ecb" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;intersection_n&quot;&gt;intersection&lt;/strong&gt; of a non-empty collection of sets is the set that contains all elements that belong to every set of the collection.</source>
          <target state="translated">セットの空でないコレクションの&lt;strong id=&quot;intersection_n&quot;&gt;共通&lt;/strong&gt;部分は、コレクションのすべてのセットに属するすべての要素を含むセットです。</target>
        </trans-unit>
        <trans-unit id="429f2c89c9e807577354da0b8e15a8e248018d77" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;length&quot;&gt;length&lt;/strong&gt; of path P is k-1.</source>
          <target state="translated">パスP の&lt;strong id=&quot;length&quot;&gt;長さ&lt;/strong&gt;はk-1です。</target>
        </trans-unit>
        <trans-unit id="abc21b67f672b304bee1db7701b820f9b24de3c6" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;natural_join&quot;&gt;natural join&lt;/strong&gt; of an n-ary relation R and an m-ary relation S on coordinate i and j is defined to be the set {z : z = (x[1], ..., x[n], y[1], ..., y[j-1], y[j+1], ..., y[m]) for some (x[1], ..., x[n]) in R and for some (y[1], ..., y[m]) in S such that x[i] = y[j]}.</source>
          <target state="translated">座標iおよびj上のn項関係Rとm項関係S の&lt;strong id=&quot;natural_join&quot;&gt;自然結合&lt;/strong&gt;は、セット{z：z =（x [1]、...、x [n]、y [ 1]、...、y [j-1]、y [j + 1]、...、y [m]）（Rの一部の（x [1]、...、x [n]）の場合） x [i] = y [j]}となるようなSの一部の（y [1]、...、y [m]）。</target>
        </trans-unit>
        <trans-unit id="adf6489e3c93a13ca7fd19239f3939863c02f11d" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;out_degree&quot;&gt;out-degree&lt;/strong&gt; of a vertex is the number of edges emanating from that vertex.</source>
          <target state="translated">&lt;strong id=&quot;out_degree&quot;&gt;アウト度&lt;/strong&gt;頂点は、その頂点から出る辺の数です。</target>
        </trans-unit>
        <trans-unit id="7c6a3c4f02bedbb63c4000218f9eaa4b3029b656" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;projection&quot;&gt;projection&lt;/strong&gt; of an n-ary relation R onto coordinate i is the set {x[i] : (x[1], ..., x[i], ..., x[n]) in R for some x[j] in X[j], 1 &amp;lt;= j &amp;lt;= n and not i = j}. The projections of a binary relation R onto the first and second coordinates are the domain and the range of R, respectively.</source>
          <target state="translated">座標iへのn項関係R の&lt;strong id=&quot;projection&quot;&gt;射影&lt;/strong&gt;は、あるxに対するRのセット{x [i]：（x [1]、...、x [i]、...、x [n]）です。 [j] X [j]では、1 &amp;lt;= j &amp;lt;= nであり、i = j}ではありません。2項関係Rの1番目と2番目の座標への射影は、それぞれRの領域と範囲です。</target>
        </trans-unit>
        <trans-unit id="928618861a3a7864fa16dc6571d48344039643c2" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;range&quot;&gt;range&lt;/strong&gt; of R is the set {y : x R y for some x in X}.</source>
          <target state="translated">R の&lt;strong id=&quot;range&quot;&gt;範囲&lt;/strong&gt;は、集合{y：x R y for some x in X}です。</target>
        </trans-unit>
        <trans-unit id="a0513ff69692a7179c5c24f4ad25a5aa23d84d71" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;restriction&quot;&gt;restriction&lt;/strong&gt; of R to A is the set S defined so that x S y if and only if there exists an element x in A such that x R y.</source>
          <target state="translated">AへのR の&lt;strong id=&quot;restriction&quot;&gt;制限&lt;/strong&gt;は、Aにx R yとなるような要素xが存在する場合に限り、x S yとなるように定義されたセットSです。</target>
        </trans-unit>
        <trans-unit id="53dd8e97ddf5e81c0a22de5f228a88721f6ccc8d" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;symmetric_difference&quot;&gt;symmetric difference&lt;/strong&gt; of two sets is the set that contains those element that belong to either of the two sets, but not both.</source>
          <target state="translated">2つのセットの&lt;strong id=&quot;symmetric_difference&quot;&gt;対称的な違い&lt;/strong&gt;は、2つのセットのいずれか一方に属し、両方には属さない要素を含むセットです。</target>
        </trans-unit>
        <trans-unit id="baf0cfcddb027f4d4f3dff2390047419348137ab" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;union&quot;&gt;union&lt;/strong&gt; of two sets A and B is the smallest set that contains all elements of A and all elements of B.</source>
          <target state="translated">2つのセットAとB の&lt;strong id=&quot;union&quot;&gt;和&lt;/strong&gt;集合は、Aのすべての要素とBのすべての要素を含む最小のセットです。</target>
        </trans-unit>
        <trans-unit id="81d4f87a2b598bff542bef7879776b07f0f811bb" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;union_n&quot;&gt;union&lt;/strong&gt; of a collection of sets is the smallest set that contains all the elements that belong to at least one set of the collection.</source>
          <target state="translated">セットの集合の&lt;strong id=&quot;union_n&quot;&gt;和集合&lt;/strong&gt;は、コレクションの少なくとも1つのセットに属するすべての要素を含む最小のセットです。</target>
        </trans-unit>
        <trans-unit id="5d51e506fb7ebd09e0439b577c3665c859bbc0bf" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Auto Attach&lt;/strong&gt; boxes, &lt;strong&gt;Stack Trace&lt;/strong&gt; label, &lt;strong&gt;Back Trace Size&lt;/strong&gt; label, and &lt;strong&gt;Strings&lt;/strong&gt; box display some options set. For details about these options, see section &lt;code&gt;&lt;a href=&quot;#options&quot;&gt;Options Menu&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;オートアタッチ&lt;/strong&gt;ボックス、&lt;strong&gt;スタック・トレース・&lt;/strong&gt;ラベル、&lt;strong&gt;バックトレース・サイズ・&lt;/strong&gt;ラベル、および&lt;strong&gt;文字列の&lt;/strong&gt;ボックスの表示設定オプションをいくつか。これらのオプションの詳細については、「 &lt;code&gt;&lt;a href=&quot;#options&quot;&gt;Options Menu&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="abcaf1a971590700133b8016539b636c71ba876f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Break&lt;/strong&gt;, &lt;strong&gt;Windows&lt;/strong&gt;, and &lt;strong&gt;Help&lt;/strong&gt; menus are the same as in the &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor Window&lt;/a&gt;&lt;/code&gt;, except that the &lt;strong&gt;Break&lt;/strong&gt; menu applies only to local breakpoints.</source>
          <target state="translated">&lt;strong&gt;ブレーク&lt;/strong&gt;、&lt;strong&gt;Windowsの&lt;/strong&gt;、および&lt;strong&gt;ヘルプ&lt;/strong&gt;メニューはと同じである &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor Window&lt;/a&gt;&lt;/code&gt; ことを除いて、&lt;strong&gt;ブレーク&lt;/strong&gt;メニューは地元のブレークポイントにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="a10eb03f19350fbdf85025a9eab01c5153042f77" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Break&lt;/strong&gt;, &lt;strong&gt;Windows&lt;/strong&gt;, and &lt;strong&gt;Help&lt;/strong&gt; menus are the same as in the &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor Window&lt;/a&gt;&lt;/code&gt;, except that the &lt;strong&gt;Breaks&lt;/strong&gt; menu applies only to local breakpoints.</source>
          <target state="translated">&lt;strong&gt;ブレーク&lt;/strong&gt;、&lt;strong&gt;Windowsの&lt;/strong&gt;、および&lt;strong&gt;ヘルプ&lt;/strong&gt;メニューはと同じである &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor Window&lt;/a&gt;&lt;/code&gt; ことを除いて、&lt;strong&gt;ブレークの&lt;/strong&gt;メニューは地元のブレークポイントにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="81208a589d29fcc1ae9246757bcbbd412aee1292" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Common Test Hook (CTH)&lt;/strong&gt; framework allows extensions of the default behavior of &lt;code&gt;Common Test&lt;/code&gt; by callbacks before and after all test suite calls. It is intended for advanced users of &lt;code&gt;Common Test&lt;/code&gt; who want to abstract out behavior that is common to multiple test suites.</source>
          <target state="translated">&lt;strong&gt;一般的なテストフック（CTH）&lt;/strong&gt;フレームワークは、デフォルトの動作を拡張できます &lt;code&gt;Common Test&lt;/code&gt; すべてテストスイートコールの前と後のコールバックで。これは、複数のテストスイートに共通する動作を抽象化したい &lt;code&gt;Common Test&lt;/code&gt; の上級ユーザーを対象としています。</target>
        </trans-unit>
        <trans-unit id="e6fc5c94241e7e52f12a5fd7bd3416eff9018efa" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Common Test Hook (CTH)&lt;/strong&gt; framework allows extensions of the default behavior of &lt;code&gt;Common Test&lt;/code&gt; using hooks before and after all test suite calls. CTHs allow advanced &lt;code&gt;Common Test&lt;/code&gt; users to abstract out behavior that is common to multiple test suites without littering all test suites with library calls. This can be used for logging, starting, and monitoring external systems, building C files needed by the tests, and so on.</source>
          <target state="translated">&lt;strong&gt;一般的なテストフック（CTH）&lt;/strong&gt;フレームワークは、デフォルトの動作を拡張できます &lt;code&gt;Common Test&lt;/code&gt; すべてのテストスイートコールの前と後のフックを使用しています。CTHを使用すると、高度な &lt;code&gt;Common Test&lt;/code&gt; ユーザーは、ライブラリ呼び出しですべてのテストスイートを散らかすことなく、複数のテストスイートに共通する動作を抽象化できます。これは、外部システムのログ記録、開始、監視、テストに必要なCファイルの構築などに使用できます。</target>
        </trans-unit>
        <trans-unit id="18cdc049609d4e15a26ab891a990c31ae80de460" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;File&lt;/strong&gt; and &lt;strong&gt;Edit&lt;/strong&gt; menus are the same as in the &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process Window&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">[ &lt;strong&gt;ファイル]&lt;/strong&gt;メニューと&lt;strong&gt;[ &lt;/strong&gt;&lt;strong&gt;編集]&lt;/strong&gt;メニューは、&lt;strong&gt;[ &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process Window&lt;/a&gt;&lt;/code&gt; のアタッチ]ウィンドウと同じです。</target>
        </trans-unit>
        <trans-unit id="ff4e15bb4c0b2061b264590ff96d04af89b93805" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;File&lt;/strong&gt; menu includes options to save the contents of the &lt;strong&gt;Log&lt;/strong&gt; window and the &lt;strong&gt;Warnings&lt;/strong&gt; window. Simply choose the options and enter the file to save the contents in.</source>
          <target state="translated">[ &lt;strong&gt;ファイル&lt;/strong&gt; ]メニューには、&lt;strong&gt;[ログ]&lt;/strong&gt;ウィンドウと[ &lt;strong&gt;警告&lt;/strong&gt;&lt;strong&gt;]&lt;/strong&gt;ウィンドウの内容を保存するオプションがあります。オプションを選択し、コンテンツを保存するファイルを入力するだけです。</target>
        </trans-unit>
        <trans-unit id="370a6214852f8fdbb6373c8997912c0758173f20" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;File&lt;/strong&gt; window displays a listing of the current directory. Click your way to the directories/modules you want to add or type the correct path in the entry.</source>
          <target state="translated">「&lt;strong&gt;ファイル」&lt;/strong&gt;ウィンドウに現在のディレクトリのリストが表示されます。追加するディレクトリ/モジュールに移動するか、エントリに正しいパスを入力します。</target>
        </trans-unit>
        <trans-unit id="8e3940de2fcf0c6b61297d85ec453fc7187e592a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;OTP design principles&lt;/strong&gt; define how to structure Erlang code in terms of processes, modules, and directories.</source>
          <target state="translated">&lt;strong&gt;OTP設計原理は、&lt;/strong&gt;プロセス、モジュール、およびディレクトリの面でErlangのコードを構造化する方法を定義します。</target>
        </trans-unit>
        <trans-unit id="ce6dbe8f8ec89aa3b4f8a5fbd8bce3df7dce0384" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;anonymous variable&lt;/strong&gt; is denoted by underscore (_) and can be used when a variable is required but its value can be ignored.</source>
          <target state="translated">&lt;strong&gt;匿名の変数は、&lt;/strong&gt;アンダースコア（_）で表され、変数が必要とされますが、その値は無視することができたときに使用することができます。</target>
        </trans-unit>
        <trans-unit id="a6798179458a851b9ebec479cdde3c475bff4cbb" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;application resource file&lt;/strong&gt; specifies the resources an application uses, and how the application is started. There must always be one application resource file called &lt;code&gt;Application.app&lt;/code&gt; for each application &lt;code&gt;Application&lt;/code&gt; in the system.</source>
          <target state="translated">&lt;strong&gt;アプリケーションリソースファイルには、&lt;/strong&gt;アプリケーションが使用するリソースを指定し、アプリケーションがどのように起動されます。いつもと呼ばれる一つのアプリケーションのリソースファイルが存在しなければならない &lt;code&gt;Application.app&lt;/code&gt; 各アプリケーションのための &lt;code&gt;Application&lt;/code&gt; システムでは。</target>
        </trans-unit>
        <trans-unit id="f6e14a23d7c2ef8d516ebeb71a889d63ab7e5e5f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;application upgrade file&lt;/strong&gt; defines how an application is upgraded or downgraded in a running system.</source>
          <target state="translated">&lt;strong&gt;アプリケーションのアップグレードファイルの&lt;/strong&gt;アプリケーションをアップグレードまたは実行中のシステムに格下げされる方法を定義します。</target>
        </trans-unit>
        <trans-unit id="2db57b7456855f2efbc5591cfd1f43a7d95e2566" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;boot script&lt;/strong&gt; describes how the Erlang runtime system is started. It contains instructions on which code to load and which processes and applications to start.</source>
          <target state="translated">&lt;strong&gt;ブートスクリプト&lt;/strong&gt;は、Erlangランタイムシステムの&lt;strong&gt;起動&lt;/strong&gt;方法を記述します。どのコードをロードするか、どのプロセスとアプリケーションを開始するかの指示が含まれています。</target>
        </trans-unit>
        <trans-unit id="5741097334e8b8597284eb3550244c5de695e977" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;callback mode&lt;/strong&gt; is selected when starting the &lt;code&gt;gen_statem&lt;/code&gt; and after code change using the return value from &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;コールバック・モードは、&lt;/strong&gt;起動時に選択される &lt;code&gt;gen_statem&lt;/code&gt; を、コード変更後からの戻り値を使用して &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="010c2dfc5017e7774d251ec3e8505c4cdafc0e30" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;detailed table events&lt;/strong&gt; are tuples like &lt;code&gt;{Oper, Table, Data, [OldRecs], ActivityId}&lt;/code&gt;, where:</source>
          <target state="translated">&lt;strong&gt;詳細テーブルイベントは&lt;/strong&gt;のようなタプルである &lt;code&gt;{Oper, Table, Data, [OldRecs], ActivityId}&lt;/code&gt; 、。</target>
        </trans-unit>
        <trans-unit id="60cb531fb67c541100e62d6289d443a02cba5fa3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;empty set&lt;/strong&gt; contains no elements.</source>
          <target state="translated">&lt;strong&gt;空のセットには&lt;/strong&gt;何の要素が含まれていません。</target>
        </trans-unit>
        <trans-unit id="529d8e8336cfdf10118ffc9b093a47018a9c6171" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;mstone2&lt;/strong&gt; is similar to the &lt;strong&gt;mstone1&lt;/strong&gt; tool, but in this case, each created process makes only &lt;strong&gt;one&lt;/strong&gt; run through the messages and then exits. A soon as a process exits, a new process (with the same config and messages) is created to takes its place. The number of messages processed in total is the mstone2(1) value.</source>
          <target state="translated">&lt;strong&gt;mstone2は&lt;/strong&gt;に似て&lt;strong&gt;mstone1&lt;/strong&gt;ツールが、この場合には、各作成されたプロセスは、作る&lt;strong&gt;1&lt;/strong&gt;のメッセージと、その後終了して実行を。プロセスが終了するとすぐに、同じ構成とメッセージを持つ新しいプロセスが作成され、代わりに実行されます。合計で処理されるメッセージの数は、mstone2（1）の値です。</target>
        </trans-unit>
        <trans-unit id="b927187f56617f5aef02c9b312ff36f409a08649" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;ordered pair&lt;/strong&gt; of a and b, with first &lt;strong&gt;coordinate&lt;/strong&gt; a and second coordinate b, is denoted (a, b). An ordered pair is an &lt;strong&gt;ordered set&lt;/strong&gt; of two elements. In this module, ordered sets can contain one, two, or more elements, and parentheses are used to enclose the elements.</source>
          <target state="translated">第1 &lt;strong&gt;座標が&lt;/strong&gt; a、第2座標がb である、aとb の&lt;strong&gt;順序付けられたペア&lt;/strong&gt;は、（a、b）で示されます。順序付きペアは、2つの要素の&lt;strong&gt;順序付きセット&lt;/strong&gt;です。このモジュールでは、順序付きセットには1つ、2つ、またはそれ以上の要素を含めることができ、要素を囲むために括弧が使用されます。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c83c801cd635dbe318e9132115de7b55b1599720" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;receiver&lt;/strong&gt; is &lt;strong&gt;authoritative&lt;/strong&gt; for messages containing payload which expects a response (for example Get, GetNext, Get-Bulk, Set or Inform PDU).</source>
          <target state="translated">&lt;strong&gt;受信機は、&lt;/strong&gt;ある&lt;strong&gt;権限の&lt;/strong&gt;応答期待（例えばGET、GetNextのは、Get-バルク、セットまたはPDUを通知）ペイロードを含むメッセージの。</target>
        </trans-unit>
        <trans-unit id="ac92db4f0e00aaa89bb19e432441af806acad352" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;release handler&lt;/strong&gt; process belongs to the SASL application, which is responsible for &lt;strong&gt;release handling&lt;/strong&gt;, that is, unpacking, installation, and removal of release packages.</source>
          <target state="translated">&lt;strong&gt;リリースハンドラ&lt;/strong&gt;プロセスは責任があるSASLアプリケーションに属し&lt;strong&gt;リリース取り扱い&lt;/strong&gt;開梱、ある、インストール、およびリリースパッケージの除去。</target>
        </trans-unit>
        <trans-unit id="91dc52a591c8ca51fdb38124dea4daf9b7e6ea32" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;release resource file&lt;/strong&gt; specifies which applications are included in a release (system) based on Erlang/OTP.</source>
          <target state="translated">&lt;strong&gt;リリースリソースファイル&lt;/strong&gt;のErlang / OTPベースのアプリケーションがリリース（システム）に含まれているかを指定します。</target>
        </trans-unit>
        <trans-unit id="ad1a94e9c3dc7a7604b7beecc0ad4192b022ebdc" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;release upgrade file&lt;/strong&gt; describes how a release is upgraded in a running system.</source>
          <target state="translated">&lt;strong&gt;リリースアップグレードファイルは&lt;/strong&gt;リリースが稼働しているシステムでアップグレードする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="df96a6a378319ab14151f9909dca99424881e367" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;sender&lt;/strong&gt; is &lt;strong&gt;authoritative&lt;/strong&gt; for messages containing payload which does &lt;strong&gt;not&lt;/strong&gt; expect a response (for example SNMPv2-Trap, Response or Report PDU).</source>
          <target state="translated">&lt;strong&gt;送信者は、&lt;/strong&gt;ある&lt;strong&gt;権威&lt;/strong&gt;んペイロードを含むメッセージのため&lt;strong&gt;ではない&lt;/strong&gt;（例えば、SNMPv2のトラップ、応答またはレポートPDUのための）応答を期待します。</target>
        </trans-unit>
        <trans-unit id="4ac925cddc8d38d70b14e09284795baa1f665f91" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;simple table events&lt;/strong&gt; are tuples like &lt;code&gt;{Oper, Record, ActivityId}&lt;/code&gt;, where:</source>
          <target state="translated">&lt;strong&gt;単純なテーブルイベントは、&lt;/strong&gt;のようなタプルである &lt;code&gt;{Oper, Record, ActivityId}&lt;/code&gt; 、。</target>
        </trans-unit>
        <trans-unit id="2fcc34c431d064d6d4c4085640be13ac8df36a55" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;system tracer&lt;/strong&gt; for sequential tracing is automatically initiated by &lt;code&gt;ttb&lt;/code&gt; when a trace port is started with &lt;code&gt;ttb:tracer/0,1,2&lt;/code&gt;.</source>
          <target state="translated">シーケンシャルトレースの&lt;strong&gt;システムトレーサー&lt;/strong&gt;は、 &lt;code&gt;ttb:tracer/0,1,2&lt;/code&gt; でトレースポートが開始されると、 &lt;code&gt;ttb&lt;/code&gt; によって自動的に開始されます。</target>
        </trans-unit>
        <trans-unit id="c33df7c3d6f3cf265ee046f5bbcec06d7fee2046" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;unordered set&lt;/strong&gt; containing the elements a, b, and c is denoted {a, b, c}. This notation is not to be confused with tuples.</source>
          <target state="translated">&lt;strong&gt;順不同のセット&lt;/strong&gt;、B、及びCが示されている要素{A、B、C}を含みます。この表記をタプルと混同しないでください。</target>
        </trans-unit>
        <trans-unit id="338f2ff3d932d37a0203031cf3c8ecd12e555100" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;xmerl&lt;/strong&gt; XML parser is able to parse XML documents according to the XML 1.0 standard. As default it performs well-formed parsing, (syntax checks and checks of well-formed constraints). Optionally one can also use xmerl as a validating parser, (validate according to referenced DTD and validating constraints). By means of for example the xmerl_xs module it is possible to transform the parsed result to other formats, e.g. text, HTML, XML etc.</source>
          <target state="translated">&lt;strong&gt;xmerl&lt;/strong&gt; XMLパーサーはXML 1.0規格に準拠したXML文書を解析することができます。デフォルトでは、整形式の解析を実行します（構文チェックと整形式制約のチェック）。オプションで、検証パーサーとしてxmerlを使用することもできます（参照されるDTDおよび検証制約に従って検証）。たとえばxmerl_xsモジュールを使用すると、解析結果を他の形式（テキスト、HTML、XMLなど）に変換できます。</target>
        </trans-unit>
        <trans-unit id="639ddc138940995a6e19ca0db97584c255b5e3c9" translate="yes" xml:space="preserve">
          <source>The ACC time calculation is sometimes difficult to make correct, since it is difficult to define. This happens especially when a function occurs in several instances in the call stack, for example by calling itself perhaps through other functions and perhaps even non-tail recursively.</source>
          <target state="translated">ACC時間の計算は、定義が難しいため、正しい計算をするのが難しいことがあります。これは特に、ある関数がコールスタック内の複数のインスタンスで発生した場合、例えば、おそらく他の関数を経由して、おそらく非テール再帰的にそれ自身を呼び出すことによって発生します。</target>
        </trans-unit>
        <trans-unit id="57e2a8ffba28b7446bf70cbc1663f4839a28353c" translate="yes" xml:space="preserve">
          <source>The AND intersection of the list &lt;code&gt;L1&lt;/code&gt; and &lt;code&gt;L2&lt;/code&gt; is also easily defined:</source>
          <target state="translated">リスト &lt;code&gt;L1&lt;/code&gt; と &lt;code&gt;L2&lt;/code&gt; のAND交差も簡単に定義できます。</target>
        </trans-unit>
        <trans-unit id="79ddb999f667f09a910e3689c6469b160527272a" translate="yes" xml:space="preserve">
          <source>The API for logging consists of a set of &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt;, and a set of functions on the form &lt;code&gt;logger:Level/1,2,3&lt;/code&gt;, which are all shortcuts for &lt;code&gt;&lt;a href=&quot;logger#log-2&quot;&gt;logger:log(Level,Arg1[,Arg2[,Arg3]])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ロギング用のAPIは、一連の &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;logger:Level/1,2,3&lt;/code&gt; という形式の一連の関数で構成されます。これらはすべて &lt;code&gt;&lt;a href=&quot;logger#log-2&quot;&gt;logger:log(Level,Arg1[,Arg2[,Arg3]])&lt;/a&gt;&lt;/code&gt; ショートカットです。。</target>
        </trans-unit>
        <trans-unit id="9d41ee39dfc3d3300eef2e7cc4120a5fd8d4f83d" translate="yes" xml:space="preserve">
          <source>The API is simple:</source>
          <target state="translated">APIはシンプルです。</target>
        </trans-unit>
        <trans-unit id="d4aca81b201537abe8dedf009dd68114d62d46d3" translate="yes" xml:space="preserve">
          <source>The API provided by Windows.</source>
          <target state="translated">Windowsが提供するAPI。</target>
        </trans-unit>
        <trans-unit id="ea6764678e9074dc87171f45bcd4511b8aa2d4d8" translate="yes" xml:space="preserve">
          <source>The ASN.1 application provides the following:</source>
          <target state="translated">ASN.1アプリケーションでは、以下のような機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="9c1b6316b531e843db6912095bad2d7449901534" translate="yes" xml:space="preserve">
          <source>The ASN.1 code, the Erlang source code, and the generated &lt;code&gt;.hrl&lt;/code&gt; files for them are provided in the distribution and are placed in the directories &lt;code&gt;mibs&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, and &lt;code&gt;include&lt;/code&gt;, respectively, in the &lt;code&gt;snmp&lt;/code&gt; application.</source>
          <target state="translated">ASN.1コード、Erlangソースコード、およびそれらのために生成された &lt;code&gt;.hrl&lt;/code&gt; ファイルは、ディストリビューションで提供され、 &lt;code&gt;snmp&lt;/code&gt; アプリケーションのディレクトリ &lt;code&gt;mibs&lt;/code&gt; 、 &lt;code&gt;src&lt;/code&gt; 、および &lt;code&gt;include&lt;/code&gt; にそれぞれ配置されます。</target>
        </trans-unit>
        <trans-unit id="c4c076a03aaf6d1e948523fb216ccde0cc05b7f7" translate="yes" xml:space="preserve">
          <source>The ASN.1 compiler can be started directly from the command line by the &lt;code&gt;erlc&lt;/code&gt; program. This is convenient when compiling many ASN.1 files from the command line or when using Makefiles. Some examples of how the &lt;code&gt;erlc&lt;/code&gt; command can be used to start the ASN.1 compiler:</source>
          <target state="translated">ASN.1コンパイラーは、 &lt;code&gt;erlc&lt;/code&gt; プログラムによってコマンド行から直接開始できます。これは、コマンドラインから多くのASN.1ファイルをコンパイルする場合、またはMakefileを使用する場合に便利です。 &lt;code&gt;erlc&lt;/code&gt; コマンドを使用してASN.1コンパイラーを開始する方法の例：</target>
        </trans-unit>
        <trans-unit id="fb22058cd698b91ccb24c3e367daf392b4a590e1" translate="yes" xml:space="preserve">
          <source>The ASN.1 compiler takes an ASN.1 module as input and generates a corresponding Erlang module, which can encode and decode the specified data types. Alternatively, the compiler takes a specification module specifying all input modules, and generates a module with encode/decode functions. In addition, some generic functions can be used during development of applications that handles ASN.1 data (encoded as &lt;code&gt;BER&lt;/code&gt; or &lt;code&gt;PER&lt;/code&gt;).</source>
          <target state="translated">ASN.1コンパイラーはASN.1モジュールを入力として受け取り、指定されたデータ型をエンコードおよびデコードできる対応するErlangモジュールを生成します。あるいは、コンパイラーは、すべての入力モジュールを指定する仕様モジュールを取り、エンコード/デコード機能を備えたモジュールを生成します。さらに、ASN.1データ（ &lt;code&gt;BER&lt;/code&gt; または &lt;code&gt;PER&lt;/code&gt; としてエンコード）を処理するアプリケーションの開発中に、いくつかの汎用関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="c60d4a11ddc52b500d299eda7e6852a95f2bae35" translate="yes" xml:space="preserve">
          <source>The ASN.1 specifications in the test were compiled with options &lt;code&gt;ber_bin, optimize, driver&lt;/code&gt; and &lt;code&gt;asn1config&lt;/code&gt;. Omitting option &lt;code&gt;driver&lt;/code&gt; gives higher values for &lt;code&gt;decode&lt;/code&gt; and &lt;code&gt;decode_part&lt;/code&gt;. These tests have not been rerun using NIFs, but are expected to perform about 5% better than the linked-in driver.</source>
          <target state="translated">テストのASN.1仕様は、オプション &lt;code&gt;ber_bin, optimize, driver&lt;/code&gt; 、および &lt;code&gt;asn1config&lt;/code&gt; を使用してコンパイルされています。オプション &lt;code&gt;driver&lt;/code&gt; を省略 &lt;code&gt;decode&lt;/code&gt; と、decodeおよび &lt;code&gt;decode_part&lt;/code&gt; の値が高くなります。これらのテストはNIFを使用して再実行されていませんが、リンクされたドライバーよりも約5％高いパフォーマンスが期待されています。</target>
        </trans-unit>
        <trans-unit id="2f22980605315f568d967ab23f6f0f04c10f0db4" translate="yes" xml:space="preserve">
          <source>The ASN.1 to Erlang compiler does not determine the correct interpretation of each BER string octet value with different character strings. The application is responsible for interpretation of octets. Therefore, from the BER string point of view, octets are very similar to character strings and are compiled in the same way.</source>
          <target state="translated">ASN.1からErlangコンパイラは、異なる文字列を持つBER文字列の各オクテット値の正しい解釈を決定しません。オクテットの解釈はアプリケーションに任されています。そのため、BER文字列の観点から見ると、オクテットは文字列と非常に似ており、同じようにコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="e882c6bd57a43305a3640939f477df3d4ead459d" translate="yes" xml:space="preserve">
          <source>The ASN.1 type can be 'Certificate', 'OTPCertificate' or a subtype of either.</source>
          <target state="translated">ASN.1型は、'Certificate'、'OTPCertificate'、またはどちらかのサブタイプとすることができます。</target>
        </trans-unit>
        <trans-unit id="a7a7f7547a93bea8b589e07f519f153c18f157b7" translate="yes" xml:space="preserve">
          <source>The AVPs of the message. Ignored for an outgoing message if the &lt;code&gt;msg&lt;/code&gt; field is set to a value other than &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">メッセージのAVP。 &lt;code&gt;msg&lt;/code&gt; フィールドが &lt;code&gt;undefined&lt;/code&gt; 以外の値に設定されている場合、送信メッセージでは無視されます。</target>
        </trans-unit>
        <trans-unit id="bbe283419a75e9a012fbd1970d31d2b4f451187c" translate="yes" xml:space="preserve">
          <source>The Adler checksum of the dictionary is returned.</source>
          <target state="translated">辞書のアドラーチェックサムが返されます。</target>
        </trans-unit>
        <trans-unit id="c87eb8ebe47038b4ccdd22aaa97c4f88f2c5c087" translate="yes" xml:space="preserve">
          <source>The Application Id is set in the Diameter Header of outgoing messages of the application, and the value in the header of an incoming message is used to identify the relevant dictionary module.</source>
          <target state="translated">アプリケーションIDは、アプリケーションの発信メッセージのDiameter Headerに設定され、着信メッセージのヘッダ内の値は、関連する辞書モジュールを識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f5de0091f6607fa5ed052b8880c8cef363f44808" translate="yes" xml:space="preserve">
          <source>The Audit Trail Log is managed by the network interface process. So, it is this process that has to do the actual changing of the type.</source>
          <target state="translated">監査証跡ログは、ネットワークインタフェースのプロセスで管理されています。つまり、実際に型の変更をしなければならないのはこのプロセスなのです。</target>
        </trans-unit>
        <trans-unit id="4ffaae1f3e0b8fd90d36e73237642154e3434485" translate="yes" xml:space="preserve">
          <source>The Audit Trail Log is managed by the network interface process. So, it is this process that has to retrieve the actual log-type.</source>
          <target state="translated">監査証跡ログは、ネットワークインタフェースプロセスで管理されています。つまり、実際のログタイプを取得しなければならないのは、このプロセスです。</target>
        </trans-unit>
        <trans-unit id="56bc2b11b64e2a80365e104579b5470c818d8f1f" translate="yes" xml:space="preserve">
          <source>The Audit Trail Log is managed by the network interface process. So, it is this process that has to return the actual log-type.</source>
          <target state="translated">監査証跡ログは、ネットワークインタフェースプロセスで管理されています。そのため、実際のログタイプを返さなければならないのはこのプロセスです。</target>
        </trans-unit>
        <trans-unit id="fb9967052a764c3afae20ad96d6a28a3fa28a91f" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt; can also add match specifications to a function. A match specification comprises a pattern that the function arguments must match, a guard expression that must evaluate to &lt;code&gt;true&lt;/code&gt;, and an action to be performed. The default action is to send a trace message. If the pattern does not match or the guard fails, the action is not executed.</source>
          <target state="translated">BIF &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt; は、関数に一致指定を追加することもできます。一致指定は、関数の引数が一致する必要があるパターン、 &lt;code&gt;true&lt;/code&gt; に評価される必要があるガード式、および実行されるアクションで構成されます。デフォルトのアクションは、トレースメッセージを送信することです。パターンが一致しない場合、またはガードが失敗した場合、アクションは実行されません。</target>
        </trans-unit>
        <trans-unit id="0e87dd32697c643963810be073120b237d9b1c65" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;open_port/2&lt;/code&gt; is documented in the &lt;code&gt;erlang&lt;/code&gt; manual page in ERTS.</source>
          <target state="translated">BIF &lt;code&gt;open_port/2&lt;/code&gt; は、ERTSの &lt;code&gt;erlang&lt;/code&gt; マニュアルページに記載されています。</target>
        </trans-unit>
        <trans-unit id="102d447ee7d66bcdc64a15b95caa727b7d5ec384" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;statistics(run_queue)&lt;/code&gt; is used for estimating future loads. It returns the length of the queue of ready to run processes in the Erlang runtime system.</source>
          <target state="translated">BIF &lt;code&gt;statistics(run_queue)&lt;/code&gt; は、将来の負荷を推定するために使用されます。これは、Erlangランタイムシステムで実行可能なプロセスのキューの長さを返します。</target>
        </trans-unit>
        <trans-unit id="a6a407c55efe87e4b70f70a1f8c95515dc9b4791" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;throw(Any)&lt;/code&gt; can be used for non-local return from a function. It must be evaluated within a &lt;code&gt;catch&lt;/code&gt;, which returns the value &lt;code&gt;Any&lt;/code&gt;.</source>
          <target state="translated">BIF &lt;code&gt;throw(Any)&lt;/code&gt; は、関数からの非ローカル戻りに使用できます。これは、値 &lt;code&gt;Any&lt;/code&gt; を返す &lt;code&gt;catch&lt;/code&gt; 内で評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="30ca995f69db34040dadf8f4fb8f2daa8f294d98" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;whereis(RegisteredName)&lt;/code&gt; checks if a registered process of name &lt;code&gt;RegisteredName&lt;/code&gt; exists. If it exists, the pid of that process is returned. If it does not exist, the atom &lt;code&gt;undefined&lt;/code&gt; is returned.</source>
          <target state="translated">BIF &lt;code&gt;whereis(RegisteredName)&lt;/code&gt; は、名前 &lt;code&gt;RegisteredName&lt;/code&gt; の登録済みプロセスが存在するかどうかを確認します。存在する場合は、そのプロセスのPIDが返されます。存在しない場合は、 &lt;code&gt;undefined&lt;/code&gt; のアトムが返されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
