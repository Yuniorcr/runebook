<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="1d1e8ed0c63bea5501f0e18a8588004e6a97f424" translate="yes" xml:space="preserve">
          <source>Partitions &lt;code&gt;List&lt;/code&gt; into two lists according to &lt;code&gt;Pred&lt;/code&gt;. &lt;code&gt;splitwith/2&lt;/code&gt; behaves as if it is defined as follows:</source>
          <target state="translated">パーティションの &lt;code&gt;List&lt;/code&gt; によると二つのリストに &lt;code&gt;Pred&lt;/code&gt; 。 &lt;code&gt;splitwith/2&lt;/code&gt; は、次のように定義されているかのように動作します。</target>
        </trans-unit>
        <trans-unit id="7a0f34af55f62b96f8e7863f5d8947f87bbe0f4d" translate="yes" xml:space="preserve">
          <source>Partitions &lt;code&gt;List&lt;/code&gt; into two lists, where the first list contains all elements for which &lt;code&gt;Pred(Elem)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, and the second list contains all elements for which &lt;code&gt;Pred(Elem)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; を2つのリストに分割します。最初のリストには &lt;code&gt;Pred(Elem)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返すすべての要素が含まれ、2番目のリストには &lt;code&gt;Pred(Elem)&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返すすべての要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="be77f796fd8548373af529ca7332cc6d13c15156" translate="yes" xml:space="preserve">
          <source>Parts of certificates can be decoded with &lt;code&gt;public_key:der_decode/2&lt;/code&gt;, using the ASN.1 type of that part. However, an application-specific certificate extension requires application-specific ASN.1 decode/encode-functions. In the recent example, the first value of &lt;code&gt;rdnSequence&lt;/code&gt; is of ASN.1 type &lt;code&gt;'X520CommonName'. ({2,5,4,3} = ?id-at-commonName)&lt;/code&gt;:</source>
          <target state="translated">証明書の一部は、その部分のASN.1タイプを使用して、 &lt;code&gt;public_key:der_decode/2&lt;/code&gt; でデコードできます。ただし、アプリケーション固有の証明書拡張には、アプリケーション固有のASN.1デコード/エンコード機能が必要です。最近の例では、 &lt;code&gt;rdnSequence&lt;/code&gt; の最初の値はASN.1タイプ &lt;code&gt;'X520CommonName'. ({2,5,4,3} = ?id-at-commonName)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="39f1ccafc930086a1e2f26b171bee188745affe2" translate="yes" xml:space="preserve">
          <source>Pass extra chunks to be stored in the &lt;code&gt;.beam&lt;/code&gt; file. The extra chunks must be a list of tuples with a four byte binary as chunk name followed by a binary with the chunk contents. See &lt;code&gt;beam_lib&lt;/code&gt; for more information.</source>
          <target state="translated">&lt;code&gt;.beam&lt;/code&gt; ファイルに格納する追加のチャンクを渡します。追加のチャンクは、チャンク名として4バイトのバイナリがあり、その後にチャンクの内容を持つバイナリが続くタプルのリストである必要があります。詳細については、 &lt;code&gt;beam_lib&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c0d014bb56599fcece5464b8d5372d0e641b8c1b" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;+Mea config&lt;/code&gt; command-line flag to the Erlang runtime system you are going to use for creation of the allocator configuration. It will disable features that prevent &lt;code&gt;erts_alloc_config&lt;/code&gt; from doing its job. Note, you should &lt;strong&gt;not&lt;/strong&gt; use this flag when using the created configuration. Also note that it is important that you use the same &lt;code&gt;amount of schedulers&lt;/code&gt; when creating the configuration as you are going the use on the system using the configuration.</source>
          <target state="translated">&lt;code&gt;+Mea config&lt;/code&gt; コマンドラインフラグを、アロケーター構成の作成に使用するErlangランタイムシステムに渡します。 &lt;code&gt;erts_alloc_config&lt;/code&gt; の機能を無効にする機能を無効にします。作成した構成を使用する場合は、このフラグを使用し&lt;strong&gt;ない&lt;/strong&gt;でください。また、構成を作成するときは、構成を使用するシステムで使用するのと同じ &lt;code&gt;amount of schedulers&lt;/code&gt; を使用することが重要です。</target>
        </trans-unit>
        <trans-unit id="52a8e49b5b4f355426b2d1b0e4d23c4d22798cb7" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;megaco_receive_handle&lt;/code&gt; to the transport module.</source>
          <target state="translated">パス &lt;code&gt;megaco_receive_handle&lt;/code&gt; をトランスポートモジュールに。</target>
        </trans-unit>
        <trans-unit id="a12c368fddb9450ed1c838dd29236b5bedef5580" translate="yes" xml:space="preserve">
          <source>Pass the cross compilation variables as command line arguments to &lt;code&gt;configure&lt;/code&gt; using a &lt;code&gt;&amp;lt;VARIABLE&amp;gt;=&amp;lt;VALUE&amp;gt;&lt;/code&gt; syntax.</source>
          <target state="translated">&lt;code&gt;&amp;lt;VARIABLE&amp;gt;=&amp;lt;VALUE&amp;gt;&lt;/code&gt; 構文を使用して &lt;code&gt;configure&lt;/code&gt; するには、クロスコンパイル変数をコマンドライン引数として渡します。</target>
        </trans-unit>
        <trans-unit id="15b216add241be5dbff40c5c961c72de3bf72091" translate="yes" xml:space="preserve">
          <source>Passed &quot;as-is&quot; from the &lt;code&gt;{advanced,Extra}&lt;/code&gt; part of the update instruction.</source>
          <target state="translated">更新命令の &lt;code&gt;{advanced,Extra}&lt;/code&gt; 部分から「現状のまま」渡されます。</target>
        </trans-unit>
        <trans-unit id="48905dff7e74ddb13af1cf1fa9519a564cdab569" translate="yes" xml:space="preserve">
          <source>Passed as the first argument to all NIFs. All function arguments passed to a NIF belong to that environment. The return value from a NIF must also be a term belonging to the same environment.</source>
          <target state="translated">すべてのNIFの第一引数として渡されます。NIFに渡されるすべての関数引数は、その環境に属します。NIFからの戻り値も同じ環境に属する項でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2a480eadd0d94fe624912e0c9231b5b28630f2a3" translate="yes" xml:space="preserve">
          <source>Passes &lt;code&gt;ListIn&lt;/code&gt; through a sequence of substitution/expansion stages. For an &lt;code&gt;aliases&lt;/code&gt; operation, function &lt;code&gt;&lt;a href=&quot;#substitute_aliases-2&quot;&gt;substitute_aliases/2&lt;/a&gt;&lt;/code&gt; is applied using the specified list of aliases:</source>
          <target state="translated">渡し &lt;code&gt;ListIn&lt;/code&gt; を置換/拡張期のシーケンスを。ため &lt;code&gt;aliases&lt;/code&gt; 操作、機能 &lt;code&gt;&lt;a href=&quot;#substitute_aliases-2&quot;&gt;substitute_aliases/2&lt;/a&gt;&lt;/code&gt; エイリアスの指定されたリストを使用して適用されます。</target>
        </trans-unit>
        <trans-unit id="e5bad30c3f82a8b6ce3c2d80f62cb2189d29b412" translate="yes" xml:space="preserve">
          <source>Passes extra arguments to the emulator startup program &lt;code&gt;erl.exe&lt;/code&gt; (or &lt;code&gt;start_erl.exe&lt;/code&gt;). Arguments that cannot be specified here are &lt;code&gt;-noinput&lt;/code&gt; (&lt;code&gt;StopActions&lt;/code&gt; would not work), &lt;code&gt;-name&lt;/code&gt;, and &lt;code&gt;-sname&lt;/code&gt; (they are specified in any way). The most common use is for specifying cookies and flags to be passed to &lt;code&gt;init:boot()&lt;/code&gt; (&lt;code&gt;-s&lt;/code&gt;).</source>
          <target state="translated">エミュレータ起動プログラム &lt;code&gt;erl.exe&lt;/code&gt; （または &lt;code&gt;start_erl.exe&lt;/code&gt; ）に追加の引数を渡します。ここで指定することができない引数です &lt;code&gt;-noinput&lt;/code&gt; （ &lt;code&gt;StopActions&lt;/code&gt; が動作しない）、 &lt;code&gt;-name&lt;/code&gt; 、および &lt;code&gt;-sname&lt;/code&gt; （それらがどのような方法で指定されています）。最も一般的な使用法は、 &lt;code&gt;init:boot()&lt;/code&gt; （- &lt;code&gt;-s&lt;/code&gt; ）に渡されるCookieとフラグを指定することです。</target>
        </trans-unit>
        <trans-unit id="17423ed9634ebf487daeddd08024ea098b0dfac8" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;msg_env&lt;/code&gt; as &lt;code&gt;NULL&lt;/code&gt; is only supported as from ERTS 8.0 (Erlang/OTP 19).</source>
          <target state="translated">&lt;code&gt;msg_env&lt;/code&gt; を &lt;code&gt;NULL&lt;/code&gt; として渡すことは、ERTS 8.0（Erlang / OTP 19）以降でのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="05b52936612a6b19fd4936a6190ec91e1270fc3f" translate="yes" xml:space="preserve">
          <source>Passing the others on to an enclosing &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt;, or to default error handling.</source>
          <target state="translated">他を、囲んでいる &lt;code&gt;try&lt;/code&gt; または &lt;code&gt;catch&lt;/code&gt; 、またはデフォルトのエラー処理に渡します。</target>
        </trans-unit>
        <trans-unit id="c3441c01856bc44f16f44713579f9eb0b9cab8a3" translate="yes" xml:space="preserve">
          <source>Password-protected and encrypted archives are not supported.</source>
          <target state="translated">パスワードで保護されたアーカイブや暗号化されたアーカイブはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="6c3606fd7f334a9c3d48f5825a16e88b15b8c73b" translate="yes" xml:space="preserve">
          <source>Pasted text is inserted at the current prompt position and is interpreted by Erlang as usual keyboard input.</source>
          <target state="translated">貼り付けられたテキストは現在のプロンプトの位置に挿入され、Erlangでは通常のキーボード入力と同じように解釈されます。</target>
        </trans-unit>
        <trans-unit id="bae50870edf6016cbfd2f917e452b9a16dcd7599" translate="yes" xml:space="preserve">
          <source>Patches are either released as maintenance patch packages or emergency patch packages. The only difference is that maintenance patch packages are planned and usually contain more changes than emergency patch packages. Emergency patch packages are released to solve one or more specific issues when such are discovered.</source>
          <target state="translated">パッチはメンテナンスパッチパッケージか緊急パッチパッケージとしてリリースされます。唯一の違いは、メンテナンスパッチパッケージは計画されており、通常は緊急パッチパッケージよりも多くの変更を含んでいます。緊急パッチパッケージは、一つ以上の特定の問題が発見された場合に、それを解決するためにリリースされます。</target>
        </trans-unit>
        <trans-unit id="8160b1ab2039239aefde8cb0e11cb5ebe2e0ad8b" translate="yes" xml:space="preserve">
          <source>Patching applications is a one-way process. Create a backup of your OTP installation directory before proceeding.</source>
          <target state="translated">アプリケーションのパッチ適用は一方通行のプロセスです。先に進む前に、OTP インストールディレクトリのバックアップを作成してください。</target>
        </trans-unit>
        <trans-unit id="55c14b77f9d8f42c4e27a07e774f4f8fb65cbb79" translate="yes" xml:space="preserve">
          <source>Path P is &lt;strong id=&quot;simple_path&quot;&gt;simple&lt;/strong&gt; if all vertices are distinct, except that the first and the last vertices can be the same.</source>
          <target state="translated">パスPは、最初と最後の頂点が同じであることを除いて、すべての頂点が異なる場合は&lt;strong id=&quot;simple_path&quot;&gt;単純&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="b2e97f14f2f6a2a22960aaaf716fd64dd488ed83" translate="yes" xml:space="preserve">
          <source>Path P is a &lt;strong id=&quot;cycle&quot;&gt;cycle&lt;/strong&gt; if the length of P is not zero and v[1] = v[k].</source>
          <target state="translated">パスPは、P の長さがゼロでなく、v [1] = v [k]の場合、&lt;strong id=&quot;cycle&quot;&gt;サイクル&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="ec4b3c7aff6a8f5ca4aa618fd7283506da7262b5" translate="yes" xml:space="preserve">
          <source>Path to a file containing PEM-encoded CA certificates. The CA certificates are used during server authentication and when building the client certificate chain.</source>
          <target state="translated">PEM エンコードされた CA 証明書を含むファイルへのパス。CA 証明書は、サーバ認証時やクライアント証明書チェーンの構築時に使用されます。</target>
        </trans-unit>
        <trans-unit id="e90e566c06157343897915883777d52efdf4c086" translate="yes" xml:space="preserve">
          <source>Path to a file containing PEM-encoded CA certificates. The CA certificates are used to build the server certificate chain and for client authentication. The CAs are also used in the list of acceptable client CAs passed to the client when a certificate is requested. Can be omitted if there is no need to verify the client and if there are no intermediate CAs for the server certificate.</source>
          <target state="translated">PEM エンコードされた CA 証明書を含むファイルへのパス。CA 証明書は、サーバ証明書チェーンの構築およびクライアント認証に使用される。CA 証明書は、証明書が要求されたときにクライアントに渡される許容可能なクライアント CA のリストでも使用されます。クライアントを検証する必要がなく、サーバ証明書のための中間 CA が存在しない場合は省略できる。</target>
        </trans-unit>
        <trans-unit id="a605e96cddb300d711887a44f810e2c399109734" translate="yes" xml:space="preserve">
          <source>Path to a file containing PEM-encoded Diffie Hellman parameters to be used by the server if a cipher suite using Diffie Hellman key exchange is negotiated. If not specified, default parameters are used.</source>
          <target state="translated">Diffie Hellman 鍵交換を用いた暗号化スイートがネゴシエートされた場合にサーバが使用する PEM エンコードされた Diffie Hellman パラメータを含むファイルへのパス。指定されなかった場合はデフォルトのパラメータが使用されます。</target>
        </trans-unit>
        <trans-unit id="eac8a20a2d9480ebb53700b4e9bedee92d37f637" translate="yes" xml:space="preserve">
          <source>Path to a file containing the user certificate.</source>
          <target state="translated">ユーザー証明書を含むファイルへのパス。</target>
        </trans-unit>
        <trans-unit id="1e962d8338f96f1e74e511aa7a15c1b3d987bd58" translate="yes" xml:space="preserve">
          <source>Path to the file containing the user's private PEM-encoded key. As PEM-files can contain several entries, this option defaults to the same file as given by option &lt;code&gt;certfile&lt;/code&gt;.</source>
          <target state="translated">ユーザーのPEMエンコードされた秘密鍵を含むファイルへのパス。PEMファイルには複数のエントリを含めることができるため、このオプションのデフォルトは、オプション &lt;code&gt;certfile&lt;/code&gt; で指定されたものと同じファイルになります。</target>
        </trans-unit>
        <trans-unit id="8fcabcda1f4e1160624d33fb2f5784f5c63030cc" translate="yes" xml:space="preserve">
          <source>PathList is a list of directories to search when fetching files. If the file in question is not in the fetch_path, the URI will be used as a file name.</source>
          <target state="translated">PathListは、ファイルをフェッチする際に検索するディレクトリのリストです。問題のファイルがfetch_pathにない場合は、URIがファイル名として使用されます。</target>
        </trans-unit>
        <trans-unit id="47482e00ecdde046c872e760861acd107da31305" translate="yes" xml:space="preserve">
          <source>Paths to keys are left to right, with subkeys to the right and backslash between keys. (Remember that backslashes must be doubled in Erlang strings.) Case is preserved but not significant.</source>
          <target state="translated">キーへのパスは左から右へ、サブキーは右へ、キーとキーの間にバックスラッシュを入れます。(Erlangの文字列ではバックスラッシュは2倍にしなければならないことを覚えておいてください。)大文字小文字は保存されますが、重要ではありません。</target>
        </trans-unit>
        <trans-unit id="4a4ff6f40515d80959eb2891b1a4f521722adb61" translate="yes" xml:space="preserve">
          <source>Pattern matching</source>
          <target state="translated">パターンマッチング</target>
        </trans-unit>
        <trans-unit id="07df831a704cd0fc47532246baa7f29146388369" translate="yes" xml:space="preserve">
          <source>Pattern matching in function head as well as in &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;receive&lt;/code&gt; clauses are optimized by the compiler. With a few exceptions, there is nothing to gain by rearranging clauses.</source>
          <target state="translated">関数の先頭と、 &lt;code&gt;case&lt;/code&gt; および &lt;code&gt;receive&lt;/code&gt; 句のパターンマッチングは、コンパイラによって最適化されます。いくつかの例外はありますが、句を並べ替えても何も得られません。</target>
        </trans-unit>
        <trans-unit id="e33f96bb1810cf2a758f0574bbb8ca910eec1915" translate="yes" xml:space="preserve">
          <source>Pattern matching with records is very similar to creating records. For example, inside a &lt;code&gt;case&lt;/code&gt; or &lt;code&gt;receive&lt;/code&gt;:</source>
          <target state="translated">レコードとのパターンマッチングは、レコードの作成とよく似ています。たとえば、 &lt;code&gt;case&lt;/code&gt; 内部または &lt;code&gt;receive&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3b4cf89b5b26547550456e5e4f643ae53f5d29be" translate="yes" xml:space="preserve">
          <source>Pattern variables &lt;code&gt;'$N'&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt;=0,1,...</source>
          <target state="translated">パターン変数 &lt;code&gt;'$N'&lt;/code&gt; 、ここで &lt;code&gt;N&lt;/code&gt; = 0,1、...</target>
        </trans-unit>
        <trans-unit id="98d00def036dd2fd6e93404dff53fcc8b8b39938" translate="yes" xml:space="preserve">
          <source>Patterns are allowed in clause heads, &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;receive&lt;/code&gt; expressions, and match expressions.</source>
          <target state="translated">パターンは、句の頭、 &lt;code&gt;case&lt;/code&gt; および &lt;code&gt;receive&lt;/code&gt; 式、およびmatch式で使用できます。</target>
        </trans-unit>
        <trans-unit id="6af09a32bdb3adae271bf8a9bea0cb4b9c66dda2" translate="yes" xml:space="preserve">
          <source>Pau_Cin_Hau</source>
          <target state="translated">Pau_Cin_Hau</target>
        </trans-unit>
        <trans-unit id="49ed482e870cd614e256519cffa6b9161630c632" translate="yes" xml:space="preserve">
          <source>Pause call count tracing for all functions in all modules and stop it for all functions in modules to be loaded. This is the same as &lt;code&gt;(pause({'_','_','_'})+stop({on_load}))&lt;/code&gt;.</source>
          <target state="translated">すべてのモジュールのすべての関数の呼び出しカウントトレースを一時停止し、モジュールのすべての関数が読み込まれるまで停止します。これは &lt;code&gt;(pause({'_','_','_'})+stop({on_load}))&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2db0d11168e0cf244f7875ac1346e7b6c97f62cc" translate="yes" xml:space="preserve">
          <source>Pause call counters for matching functions in matching modules. The &lt;code&gt;FS&lt;/code&gt; argument can be used to specify the first argument to &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt;. See erlang(3).</source>
          <target state="translated">一致するモジュール内の一致する関数の呼び出しカウンターを一時停止します。 &lt;code&gt;FS&lt;/code&gt; の引数は、最初の引数を指定するために使用することができ &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt; 。erlang（3）を参照してください。</target>
        </trans-unit>
        <trans-unit id="391d516918ec3156c32ea3be943e04f2e2a433a7" translate="yes" xml:space="preserve">
          <source>Pauses the call counters for specified functions. This minimises the impact of code running in the background or in the shell that disturbs the profiling. Call counters are automatically paused when they &quot;hit the ceiling&quot; of the host machine word size. For a 32 bit host the maximum counter value is 2147483647.</source>
          <target state="translated">指定した関数の呼び出しカウンタを一時停止します。これにより、バックグラウンドやシェルで実行されているコードの影響を最小限に抑え、プロファイリングを妨害します。呼び出しカウンタは、ホストマシンのワードサイズの「上限」に達すると自動的に一時停止されます。32 ビットホストの場合、カウンタの最大値は 2147483647 です。</target>
        </trans-unit>
        <trans-unit id="cf9afa37f2e5869dc6ad902115a35d4f0c5f630f" translate="yes" xml:space="preserve">
          <source>Peer Connections</source>
          <target state="translated">ピアコネクション</target>
        </trans-unit>
        <trans-unit id="59488fa72b53c2103f34565feb175db9fb2c4131" translate="yes" xml:space="preserve">
          <source>Peer State Machine</source>
          <target state="translated">ピアステートマシン</target>
        </trans-unit>
        <trans-unit id="98ae8b5da563501389aa05d3f2695db094619a3c" translate="yes" xml:space="preserve">
          <source>Peer Table</source>
          <target state="translated">ピアテーブル</target>
        </trans-unit>
        <trans-unit id="1bee610f8ffa13f60ce754210a4e3cbf3ffbe983" translate="yes" xml:space="preserve">
          <source>Peer to which the request in question can be sent, preempting the selection of peers having advertised support for the Diameter application in question. Multiple options can be specified, and their order is respected in the candidate lists passed to a subsequent &lt;code&gt;pick_peer/4&lt;/code&gt; callback.</source>
          <target state="translated">問題のリクエストを送信できるピア。問題のDiameterアプリケーションのサポートをアドバタイズしたピアの選択に優先します。複数のオプションを指定でき、それらの順序は、後続の &lt;code&gt;pick_peer/4&lt;/code&gt; コールバックに渡される候補リストで尊重されます。</target>
        </trans-unit>
        <trans-unit id="84b84620029f6985cb04948713a4f88534fba4df" translate="yes" xml:space="preserve">
          <source>Peer-to-Peer Considerations</source>
          <target state="translated">ピアツーピアの考察</target>
        </trans-unit>
        <trans-unit id="fcd5fc2500f0a1816c7d774f52e29f9431495a7a" translate="yes" xml:space="preserve">
          <source>Peers are only shared with services of the same name for the purpose of sending outgoing requests. Since the value of the &lt;code&gt;&lt;a href=&quot;#application_opt&quot;&gt;application_opt()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;alias&lt;/code&gt;, passed to &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt;, is the handle for identifying a peer as a suitable candidate, services that share peers must use the same aliases to identify their supported applications. They should typically also configure identical &lt;code&gt;&lt;a href=&quot;#capabilities&quot;&gt;capabilities()&lt;/a&gt;&lt;/code&gt;, since by sharing peer connections they are distributing the implementation of a single Diameter node across multiple Erlang nodes.</source>
          <target state="translated">ピアは、発信要求を送信する目的で同じ名前のサービスとのみ共有されます。 &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; に渡される &lt;code&gt;&lt;a href=&quot;#application_opt&quot;&gt;application_opt()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;alias&lt;/code&gt; の値は、ピアを適切な候補として識別するためのハンドルであるため、ピアを共有するサービスは、サポートされるアプリケーションを識別するために同じエイリアスを使用する必要があります。また、ピア接続を共有することにより、複数のErlangノード間で単一のDiameterノードの実装を分散しているため、通常は同じ &lt;code&gt;&lt;a href=&quot;#capabilities&quot;&gt;capabilities()&lt;/a&gt;&lt;/code&gt; も構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="83040eadd1e47ac6af77c8ee2d41f0ec18c15f6e" translate="yes" xml:space="preserve">
          <source>Per module to caller</source>
          <target state="translated">呼び出し元のモジュールごと</target>
        </trans-unit>
        <trans-unit id="2cad7f79a8783eead4b37e0cf84881231114b250" translate="yes" xml:space="preserve">
          <source>Per process to screen/file</source>
          <target state="translated">プロセスごとにスクリーニング/ファイル</target>
        </trans-unit>
        <trans-unit id="15141e26e03178e5d1d620e527c846aa1c625c2d" translate="yes" xml:space="preserve">
          <source>Per process/function to screen/file</source>
          <target state="translated">プロセス/機能ごとにスクリーニング/ファイル化する</target>
        </trans-unit>
        <trans-unit id="6128679797da16a04d84c728a524e6710fc16bbe" translate="yes" xml:space="preserve">
          <source>Percentage of accumulated waiting time of wall clock time. This percentage can be higher than 100% since accumulated time is from all threads.</source>
          <target state="translated">ウォールクロック時間の累積待ち時間の割合。累積時間は全スレッドからのものなので、このパーセンテージは100%よりも高くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="900a5b77b467253970a850573dc79a89db1e52f1" translate="yes" xml:space="preserve">
          <source>Perform CRL (Certificate Revocation List) verification &lt;code&gt;(public_key:pkix_crls_validate/3)&lt;/code&gt; on all the certificates during the path validation &lt;code&gt;(public_key:pkix_path_validation/3)&lt;/code&gt; of the certificate chain. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">証明書チェーンのパス検証 &lt;code&gt;(public_key:pkix_path_validation/3)&lt;/code&gt; 中に、すべての証明書に対してCRL（証明書失効リスト）検証 &lt;code&gt;(public_key:pkix_crls_validate/3)&lt;/code&gt; を実行します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7dfd0566897f67f4a88a10a9ccab4a835f714346" translate="yes" xml:space="preserve">
          <source>Perform a backup of the mib-server data.</source>
          <target state="translated">mib-serverデータのバックアップを実行します。</target>
        </trans-unit>
        <trans-unit id="f5297ab6e77bd5a8f87b119bc54aebb086ae8bf2" translate="yes" xml:space="preserve">
          <source>Perform a backup of the mib-storage table.</source>
          <target state="translated">mib-storage テーブルのバックアップを実行します。</target>
        </trans-unit>
        <trans-unit id="bb3df0035ca80e21666d0fd6cd422cbcccdf7b1a" translate="yes" xml:space="preserve">
          <source>Perform a code-change (upgrade or downgrade).</source>
          <target state="translated">コード変更(アップグレードまたはダウングレード)を実行します。</target>
        </trans-unit>
        <trans-unit id="dcafc54e1058ab12e1726559ee25482e972eb9fa" translate="yes" xml:space="preserve">
          <source>Perform a minimal decode of a megaco message.</source>
          <target state="translated">megacoメッセージの最小デコードを実行します。</target>
        </trans-unit>
        <trans-unit id="794622c63bd34b165ba99166f899c7db08151e43" translate="yes" xml:space="preserve">
          <source>Perform mib server cache gc.</source>
          <target state="translated">mib サーバーキャッシュ gc を実行します。</target>
        </trans-unit>
        <trans-unit id="ffce32cc050ae65e8a2071012a2914617cc171d0" translate="yes" xml:space="preserve">
          <source>Performance suffers when modified timing is enabled. This flag is &lt;strong&gt;only&lt;/strong&gt; intended for testing and debugging.</source>
          <target state="translated">タイミングの変更を有効にすると、パフォーマンスが低下します。このフラグは、テストとデバッグ&lt;strong&gt;のみを&lt;/strong&gt;目的としています。</target>
        </trans-unit>
        <trans-unit id="7d4cef1e85e0d8796653ef41a51578e4b550d221" translate="yes" xml:space="preserve">
          <source>Performance tuning. Defaults to &lt;code&gt;false&lt;/code&gt;, in which case an operation that mutates (writes to) the table obtains exclusive access, blocking any concurrent access of the same table until finished. If set to &lt;code&gt;true&lt;/code&gt;, the table is optimized to concurrent write access. Different objects of the same table can be mutated (and read) by concurrent processes. This is achieved to some degree at the expense of memory consumption and the performance of sequential access and concurrent reading.</source>
          <target state="translated">性能調整。デフォルトは &lt;code&gt;false&lt;/code&gt; です。この場合、テーブルを変更（書き込み）する操作は排他アクセスを取得し、終了するまで同じテーブルへの同時アクセスをブロックします。 &lt;code&gt;true&lt;/code&gt; に設定すると、テーブルは同時書き込みアクセスに最適化されます。同じテーブルの異なるオブジェクトは、並行プロセスによって変更（および読み取り）できます。これは、メモリの消費と順次アクセスおよび同時読み取りのパフォーマンスを犠牲にしてある程度達成されます。</target>
        </trans-unit>
        <trans-unit id="4ab94c7cedeb2cfec74773af353f3d78c22eb541" translate="yes" xml:space="preserve">
          <source>Performance tuning. Defaults to &lt;code&gt;false&lt;/code&gt;. When set to &lt;code&gt;true&lt;/code&gt;, the table is optimized for concurrent read operations. When this option is enabled on a runtime system with SMP support, read operations become much cheaper; especially on systems with multiple physical processors. However, switching between read and write operations becomes more expensive.</source>
          <target state="translated">性能調整。デフォルトは &lt;code&gt;false&lt;/code&gt; です。 &lt;code&gt;true&lt;/code&gt; に設定すると、テーブルは同時読み取り操作用に最適化されます。SMPをサポートするランタイムシステムでこのオプションを有効にすると、読み取り操作が大幅に安価になります。特に、複数の物理プロセッサーを備えたシステムで。ただし、読み取り操作と書き込み操作を切り替えると、コストが高くなります。</target>
        </trans-unit>
        <trans-unit id="24461109bfb38c1846415956b344d29b6573204f" translate="yes" xml:space="preserve">
          <source>Performing the handshakes/cookie verification</source>
          <target state="translated">握手/クッキーの検証を行う</target>
        </trans-unit>
        <trans-unit id="4f5f75852079a024445eb45615d781f09840d582" translate="yes" xml:space="preserve">
          <source>Performs CRL validation. It is intended to be called from the verify fun of &lt;code&gt;&lt;a href=&quot;#pkix_path_validation-3&quot;&gt;pkix_path_validation/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">CRL検証を実行します。 &lt;code&gt;&lt;a href=&quot;#pkix_path_validation-3&quot;&gt;pkix_path_validation/3&lt;/a&gt;&lt;/code&gt; の検証機能から呼び出されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="55946f4b90e3f6fd8ef1498f50ddd3c5f07b68a6" translate="yes" xml:space="preserve">
          <source>Performs a GET operation on the agent. All loaded MIB objects are visible in this operation. The agent calls the corresponding instrumentation functions just as if it was a GET request coming from a manager.</source>
          <target state="translated">エージェントに対して GET 操作を実行します。この操作では、ロードされたすべての MIB オブジェクトが表示されます。エージェントは、マネージャからの GET 要求であるかのように、対応するインストルメンテーション関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="98e445605a9fc3e5f98515d8ffa3a57e6ffd8436" translate="yes" xml:space="preserve">
          <source>Performs a GET-NEXT operation on the agent. All loaded MIB objects are visible in this operation. The agent calls the corresponding instrumentation functions just as if it was a GET request coming from a manager.</source>
          <target state="translated">エージェントに対して GET-NEXT 操作を実行します。この操作では、ロードされたすべてのMIBオブジェクトが表示されます。エージェントは、マネージャからの GET 要求であるかのように、対応するインストルメンテーション関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="fbfe9d2053799030c3effc383609b21073247735" translate="yes" xml:space="preserve">
          <source>Performs a basic path validation according to &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5280.txt&quot;&gt;RFC 5280.&lt;/a&gt;&lt;/code&gt; However, CRL validation is done separately by &lt;code&gt;&lt;a href=&quot;#pkix_crls_validate-3&quot;&gt;pkix_crls_validate/3&lt;/a&gt;&lt;/code&gt; and is to be called from the supplied &lt;code&gt;verify_fun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5280.txt&quot;&gt;RFC 5280.&lt;/a&gt;&lt;/code&gt; に従って基本パス検証を実行します。ただし、CRL検証は &lt;code&gt;&lt;a href=&quot;#pkix_crls_validate-3&quot;&gt;pkix_crls_validate/3&lt;/a&gt;&lt;/code&gt; によって個別に行われ、提供された &lt;code&gt;verify_fun&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9816bd4572d4da2d5254081f508d19359bc0475d" translate="yes" xml:space="preserve">
          <source>Performs a sanity check on the system. If no issues were found, &lt;code&gt;ok&lt;/code&gt; is returned. If issues were found, &lt;code&gt;{failed, Failures}&lt;/code&gt; is returned. All failures found will be part of the &lt;code&gt;Failures&lt;/code&gt; list. Currently defined &lt;code&gt;Failure&lt;/code&gt; elements in the &lt;code&gt;Failures&lt;/code&gt; list:</source>
          <target state="translated">システムの健全性チェックを実行します。問題が見つからなかった場合は、 &lt;code&gt;ok&lt;/code&gt; が返されます。問題が見つかった場合、 &lt;code&gt;{failed, Failures}&lt;/code&gt; が返されます。検出されたすべての失敗は、 &lt;code&gt;Failures&lt;/code&gt; リストの一部になります。 &lt;code&gt;Failures&lt;/code&gt; リストで現在定義されている &lt;code&gt;Failure&lt;/code&gt; 要素：</target>
        </trans-unit>
        <trans-unit id="1be49612d446742e1eb3514b871f56b8a3ce8433" translate="yes" xml:space="preserve">
          <source>Performs a sequence of &lt;code&gt;pread/3&lt;/code&gt; in one operation, which is more efficient than calling them one at a time. Returns &lt;code&gt;{ok, [Data, ...]}&lt;/code&gt; or &lt;code&gt;{error, Reason}&lt;/code&gt;, where each &lt;code&gt;Data&lt;/code&gt;, the result of the corresponding &lt;code&gt;pread&lt;/code&gt;, is either a list or a binary depending on the mode of the file, or &lt;code&gt;eof&lt;/code&gt; if the requested position is beyond end of file.</source>
          <target state="translated">&lt;code&gt;pread/3&lt;/code&gt; のシーケンスを1回の操作で実行します。これは、一度に1つずつ呼び出すよりも効率的です。戻り &lt;code&gt;{ok, [Data, ...]}&lt;/code&gt; または &lt;code&gt;{error, Reason}&lt;/code&gt; それぞれ、 &lt;code&gt;Data&lt;/code&gt; 、対応の結果 &lt;code&gt;pread&lt;/code&gt; 、リストまたはファイルのモードに応じてバイナリのいずれかである、または &lt;code&gt;eof&lt;/code&gt; 要求された場合位置がファイルの終わりを超えています。</target>
        </trans-unit>
        <trans-unit id="22bb771fd651389aaadce513456ba74d3fd0ed89" translate="yes" xml:space="preserve">
          <source>Performs a sequence of &lt;code&gt;pwrite/3&lt;/code&gt; in one operation, which is more efficient than calling them one at a time. Returns &lt;code&gt;ok&lt;/code&gt; or &lt;code&gt;{error, {N, Reason}}&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the number of successful writes done before the failure.</source>
          <target state="translated">1回の操作で &lt;code&gt;pwrite/3&lt;/code&gt; のシーケンスを実行します。これは、一度に1つずつ呼び出すよりも効率的です。 &lt;code&gt;ok&lt;/code&gt; または &lt;code&gt;{error, {N, Reason}}&lt;/code&gt; 返します。ここで、 &lt;code&gt;N&lt;/code&gt; は失敗の前に行われた成功した書き込みの数です。</target>
        </trans-unit>
        <trans-unit id="280190b61c0c88706d5eded9a13af6f093ee900b" translate="yes" xml:space="preserve">
          <source>Performs a synchronous call to a port. The meaning of &lt;code&gt;Operation&lt;/code&gt; and &lt;code&gt;Data&lt;/code&gt; depends on the port, that is, on the port driver. Not all port drivers support this feature.</source>
          <target state="translated">ポートへの同期呼び出しを実行します。 &lt;code&gt;Operation&lt;/code&gt; と &lt;code&gt;Data&lt;/code&gt; の意味は、ポート、つまりポートドライバーによって異なります。すべてのポートドライバがこの機能をサポートしているわけではありません。</target>
        </trans-unit>
        <trans-unit id="40fc6748b5fbb2d35ce953467a85ef32b1d82a24" translate="yes" xml:space="preserve">
          <source>Performs a synchronous control operation on a port. The meaning of &lt;code&gt;Operation&lt;/code&gt; and &lt;code&gt;Data&lt;/code&gt; depends on the port, that is, on the port driver. Not all port drivers support this control feature.</source>
          <target state="translated">ポートで同期制御操作を実行します。 &lt;code&gt;Operation&lt;/code&gt; と &lt;code&gt;Data&lt;/code&gt; の意味は、ポート、つまりポートドライバーによって異なります。すべてのポートドライバがこの制御機能をサポートしているわけではありません。</target>
        </trans-unit>
        <trans-unit id="13d765f074145e069c27186fead40fb3ae13c752" translate="yes" xml:space="preserve">
          <source>Performs a syntactic and semantic check of the script file. Warnings and errors (if any) are written to the standard output, but the script will not be run. The exit status is &lt;code&gt;0&lt;/code&gt; if any errors are found, otherwise &lt;code&gt;127&lt;/code&gt;.</source>
          <target state="translated">スクリプトファイルの構文的および意味的なチェックを実行します。警告とエラー（ある場合）は標準出力に書き込まれますが、スクリプトは実行されません。エラーが検出された場合の終了ステータスは &lt;code&gt;0&lt;/code&gt; です。それ以外の場合は &lt;code&gt;127&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="51b00069a7d5cb93226f893911ac7caf2f55b4b0" translate="yes" xml:space="preserve">
          <source>Performs a test of encode and decode of types in &lt;code&gt;Module&lt;/code&gt;. The generated functions are called by this function. This function is useful during test to secure that the generated encode and decode functions as well as the general runtime support work as expected.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; の型のエンコードとデコードのテストを実行します。生成された関数は、この関数によって呼び出されます。この関数は、テスト中に生成されたエンコードおよびデコード関数と一般的なランタイムサポートが期待どおりに機能することを保証するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d3b4972ee35b6d2ed6932472f96493c8c99e99ae" translate="yes" xml:space="preserve">
          <source>Performs a user-initiated dump of the local log file. This is usually not necessary, as Mnesia by default manages this automatically. See configuration parameters &lt;code&gt;&lt;a href=&quot;#dump_log_time_threshold&quot;&gt;dump_log_time_threshold&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#dump_log_write_threshold&quot;&gt;dump_log_write_threshold&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ユーザーが開始したローカルログファイルのダンプを実行します。Mnesiaはデフォルトでこれを自動的に管理するため、これは通常必要ありません。構成パラメーター &lt;code&gt;&lt;a href=&quot;#dump_log_time_threshold&quot;&gt;dump_log_time_threshold&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#dump_log_write_threshold&quot;&gt;dump_log_write_threshold&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="cbce4fd8e8c273fb3d0d070a4bf63febe024097d" translate="yes" xml:space="preserve">
          <source>Performs an asynchronous call. The function &lt;code&gt;async_invoke&lt;/code&gt; is invoked in a thread separate from the emulator thread. This enables the driver to perform time-consuming, blocking operations without blocking the emulator.</source>
          <target state="translated">非同期呼び出しを実行します。関数 &lt;code&gt;async_invoke&lt;/code&gt; は、エミュレータスレッドとは別のスレッドで呼び出されます。これにより、ドライバーはエミュレーターをブロックせずに時間のかかるブロック操作を実行できます。</target>
        </trans-unit>
        <trans-unit id="fd8e1e45db305e4c65eb358872501f86f5ca41b3" translate="yes" xml:space="preserve">
          <source>Performs an ets/dets matching on the table. See Stdlib documentation, module ets, for a description of &lt;code&gt;Pattern&lt;/code&gt; and the return values.</source>
          <target state="translated">テーブルでets / detsマッチングを実行します。 &lt;code&gt;Pattern&lt;/code&gt; と戻り値の説明については、Stdlibのドキュメント、モジュールetsを参照してください。</target>
        </trans-unit>
        <trans-unit id="80ddf1ab4c5a4ace67d0fceb7152a9233f49eec4" translate="yes" xml:space="preserve">
          <source>Performs an identity transformation on Erlang forms, as an example.</source>
          <target state="translated">例として、Erlangフォーム上でidentity変換を行います。</target>
        </trans-unit>
        <trans-unit id="e96ceee5ca669b69ceed3f28a9e634eb2729259c" translate="yes" xml:space="preserve">
          <source>Performs analysis of one or more Cover compiled modules, as specified by &lt;code&gt;Analysis&lt;/code&gt; and &lt;code&gt;Level&lt;/code&gt; (see above), by examining the contents of the internal database.</source>
          <target state="translated">内部データベースの内容を調べることにより、 &lt;code&gt;Analysis&lt;/code&gt; and &lt;code&gt;Level&lt;/code&gt; （上記を参照）で指定された1つ以上のCoverコンパイル済みモジュールの分析を実行します。</target>
        </trans-unit>
        <trans-unit id="ef62ac9b7159f229d46fa80ce221a721a030144b" translate="yes" xml:space="preserve">
          <source>Performs bit-wise XOR (exclusive or) on the data supplied.</source>
          <target state="translated">供給されたデータに対してビット単位の XOR(排他的または排他的)を実行します。</target>
        </trans-unit>
        <trans-unit id="1e4270aba1ba7205d6177c0c6c52d4aee26d94d9" translate="yes" xml:space="preserve">
          <source>Performs command &lt;code&gt;listenv&lt;/code&gt; on the specified Telnet connection and returns the result as a list of key-value pairs.</source>
          <target state="translated">指定されたTelnet接続で &lt;code&gt;listenv&lt;/code&gt; コマンドを実行し、結果をキーと値のペアのリストとして返します。</target>
        </trans-unit>
        <trans-unit id="1e742f72d48ea0d869f73c425bd3bb42130fb756" translate="yes" xml:space="preserve">
          <source>Performs login of &lt;code&gt;User&lt;/code&gt; with &lt;code&gt;Password&lt;/code&gt; to the account specified by &lt;code&gt;Account&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Account&lt;/code&gt; で指定されたアカウントに &lt;code&gt;Password&lt;/code&gt; with &lt;code&gt;User&lt;/code&gt; のログインを実行します。</target>
        </trans-unit>
        <trans-unit id="61aff80f20917a90cadf86008c298098cf718490" translate="yes" xml:space="preserve">
          <source>Performs login of &lt;code&gt;User&lt;/code&gt; with &lt;code&gt;Password&lt;/code&gt;.</source>
          <target state="translated">ログイン処理を行う &lt;code&gt;User&lt;/code&gt; と &lt;code&gt;Password&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a3c66dde8a5c3d5e1d69b450f3fb1194e697017" translate="yes" xml:space="preserve">
          <source>Performs possible initializations of the cache and returns a reference to it that is used as parameter to the other API functions. Is called by the cache handling processes &lt;code&gt;init&lt;/code&gt; function, hence putting the same requirements on it as a normal process &lt;code&gt;init&lt;/code&gt; function. This function is called twice when starting the SSL application, once with the role client and once with the role server, as the SSL application must be prepared to take on both roles.</source>
          <target state="translated">キャッシュの可能な初期化を実行し、他のAPI関数へのパラメーターとして使用されるキャッシュへの参照を返します。キャッシュ処理プロセスの &lt;code&gt;init&lt;/code&gt; 関数によって呼び出されるため、通常のプロセスの &lt;code&gt;init&lt;/code&gt; 関数と同じ要件が課されます。SSLアプリケーションは両方の役割を担うように準備する必要があるため、この関数は、SSLアプリケーションの起動時に2回呼び出されます。1回はロールクライアントで、もう1回はロールサーバーで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f6e21c5aaeabe015b0a346ede9fe7603c40e3285" translate="yes" xml:space="preserve">
          <source>Performs some checks on the package, for example, checks that all mandatory files are present, and extracts its contents.</source>
          <target state="translated">例えば、すべての必須ファイルが存在するかどうかをチェックし、その内容を抽出します。</target>
        </trans-unit>
        <trans-unit id="d7e17286dfe95065d8a22e3569662aef2ec0170e" translate="yes" xml:space="preserve">
          <source>Performs the SSL/TLS/DTLS server-side handshake.</source>
          <target state="translated">SSL/TLS/DTLS サーバーサイドハンドシェイクを実行します。</target>
        </trans-unit>
        <trans-unit id="de30caaee38c0ba213430dd42690a090335a596f" translate="yes" xml:space="preserve">
          <source>Perhaps you want to do something more arranged for human reading. Suppose that you want to list all different brands in the beginning with links to each group of motorcycles. You also want all motorcycles sorted by brand, then some flashy colors on top of it. Thus you rearrange the order of the elements and put in arbitrary HTML tags. This is possible to do by means of the &lt;code&gt;&lt;a href=&quot;http://www.w3.org/Style/XSL/&quot;&gt;XSL Transformation (XSLT)&lt;/a&gt;&lt;/code&gt; like functionality in xmerl.</source>
          <target state="translated">おそらく、人間が読むためにもっと整理された何かをしたいでしょう。オートバイの各グループへのリンクを含むすべての異なるブランドを最初にリストしたいとします。また、すべてのオートバイをブランド別に並べ替え、その上に派手な色を付けたいとします。したがって、要素の順序を並べ替え、任意のHTMLタグを配置します。これは、xmerlの機能のような &lt;code&gt;&lt;a href=&quot;http://www.w3.org/Style/XSL/&quot;&gt;XSL Transformation (XSLT)&lt;/a&gt;&lt;/code&gt; を使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="dc72f276fa3f20586692a9e869fb89bcfcd032e0" translate="yes" xml:space="preserve">
          <source>Periodically checks the disks. For each disk or partition which uses more than a certain amount of the available space, the alarm &lt;code&gt;{{disk_almost_full, MountedOn}, []}&lt;/code&gt; is set.</source>
          <target state="translated">ディスクを定期的にチェックします。使用可能なスペースが一定量を超えるディスクまたはパーティションごとに、アラーム &lt;code&gt;{{disk_almost_full, MountedOn}, []}&lt;/code&gt; が設定されます。</target>
        </trans-unit>
        <trans-unit id="ae86c831bcfb2749ff7edc7ec83510fdd2c53cda" translate="yes" xml:space="preserve">
          <source>Periodically flushes all file trace port clients (see &lt;code&gt;dbg:flush_trace_port/1&lt;/code&gt;). When enabled, the buffers are freed each &lt;code&gt;MSec&lt;/code&gt; millisecond. This option is not allowed with &lt;code&gt;{file, {local, File}}&lt;/code&gt; tracing.</source>
          <target state="translated">すべてのファイルトレースポートクライアントを定期的にフラッシュします（ &lt;code&gt;dbg:flush_trace_port/1&lt;/code&gt; を参照）。有効にすると、バッファは &lt;code&gt;MSec&lt;/code&gt; ミリ秒ごとに解放されます。このオプションは、 &lt;code&gt;{file, {local, File}}&lt;/code&gt; トレースでは使用できません。</target>
        </trans-unit>
        <trans-unit id="c59c25186e0bd17e60b87557f8d70871e9a6d4de" translate="yes" xml:space="preserve">
          <source>Periodically performs a memory check:</source>
          <target state="translated">定期的にメモリチェックを行います。</target>
        </trans-unit>
        <trans-unit id="ec9bd9a3791c02544b4da2b4e584f9e54f09f137" translate="yes" xml:space="preserve">
          <source>Peripheral, trace, and debug functionality is at greater risk of being changed in an incompatible way than functionality in the language itself and core libraries used during operation.</source>
          <target state="translated">ペリフェラル、トレース、デバッグ機能は、言語自体や操作時に使用するコアライブラリの機能よりも、互換性のない方法で変更されるリスクが大きい。</target>
        </trans-unit>
        <trans-unit id="7d00286c1df2e01196a79a4eb5cbf70766e74af5" translate="yes" xml:space="preserve">
          <source>Peripheral, trace, and debug functionality is at greater risk of removal than functionality in the language itself and core libraries used during operation.</source>
          <target state="translated">ペリフェラル、トレース、デバッグ機能は、言語自体や操作中に使用されるコアライブラリの機能よりも、削除されるリスクが大きい。</target>
        </trans-unit>
        <trans-unit id="4cdcf1198efb4c7cd76975e49ce37ac8c50b1461" translate="yes" xml:space="preserve">
          <source>Perl 5</source>
          <target state="translated">Perl 5</target>
        </trans-unit>
        <trans-unit id="f883526d06ac7dbd60d3aeb0d4a51ea2f54f7ccb" translate="yes" xml:space="preserve">
          <source>Perl 5.10 introduced a feature where each alternative in a subpattern uses the same numbers for its capturing parentheses. Such a subpattern starts with &lt;code&gt;(?|&lt;/code&gt; and is itself a non-capturing subpattern. For example, consider the following pattern:</source>
          <target state="translated">Perl 5.10は、サブパターン内の各選択肢がキャプチャする括弧に同じ番号を使用する機能を導入しました。このようなサブパターンは &lt;code&gt;(?|&lt;/code&gt; で始まり、それ自体が非キャプチャサブパターンです。たとえば、次のパターンを考えてみます。</target>
        </trans-unit>
        <trans-unit id="b82c2b36892e4b847da5ec02ae07fa7e941783f0" translate="yes" xml:space="preserve">
          <source>Perl 5.10 introduced some &quot;Special Backtracking Control Verbs&quot;, which are still described in the Perl documentation as &quot;experimental and subject to change or removal in a future version of Perl&quot;. It goes on to say: &quot;Their usage in production code should be noted to avoid problems during upgrades.&quot; The same remarks apply to the PCRE features described in this section.</source>
          <target state="translated">Perl 5.10 では、いくつかの「特別なバックトラッキング制御動詞」が導入されましたが、Perl のドキュメントには「実験的なものであり、将来のバージョンの Perl で変更または削除される可能性があります」と記述されています。さらに、以下のように説明されています。&quot;アップグレード時の問題を避けるために、プロダクションコードでの使用に注意してください。&quot; このセクションで説明されている PCRE の機能にも同じ注意が適用されます。</target>
        </trans-unit>
        <trans-unit id="e78f523b81d69e2ce697283a6d30d972833c9add" translate="yes" xml:space="preserve">
          <source>Perl and POSIX space are now the same. Perl added VT to its space character set at release 5.18 and PCRE changed at release 8.34.</source>
          <target state="translated">PerlとPOSIXのスペースが同じになりました。Perlはリリース5.18でスペース文字セットにVTが追加され、PCREはリリース8.34で変更されました。</target>
        </trans-unit>
        <trans-unit id="2de73d4e781601af4c1bbb6f2148001448b0732c" translate="yes" xml:space="preserve">
          <source>Perl documents that the use of \K within assertions is &quot;not well defined&quot;. In PCRE, \K is acted upon when it occurs inside positive assertions, but is ignored in negative assertions. Note that when a pattern such as (?=ab\K) matches, the reported start of the match can be greater than the end of the match.</source>
          <target state="translated">Perl は、アサーション内での \K の使用が「よく定義されていない」ことを文書化しています。PCRE では、正のアサーションの中で \K が発生した場合に処理されますが、負のアサーションでは無視されます。(?=ab\K)のようなパターンがマッチする場合、報告されたマッチの開始は、マッチの終了よりも大きくなる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7f68ced8ff5ff018b572b360c5b59d5cb10a9ec8" translate="yes" xml:space="preserve">
          <source>Perl has no direct equivalent of &lt;code&gt;notempty&lt;/code&gt; or &lt;code&gt;notempty_atstart&lt;/code&gt;, but it does make a special case of a pattern match of the empty string within its split() function, and when using modifier &lt;code&gt;/g&lt;/code&gt;. The Perl behavior can be emulated after matching a null string by first trying the match again at the same offset with &lt;code&gt;notempty_atstart&lt;/code&gt; and &lt;code&gt;anchored&lt;/code&gt;, and then, if that fails, by advancing the starting offset (see below) and trying an ordinary match again.</source>
          <target state="translated">Perlには &lt;code&gt;notempty&lt;/code&gt; または &lt;code&gt;notempty_atstart&lt;/code&gt; に直接相当するものはありませんが、split（）関数内および修飾子 &lt;code&gt;/g&lt;/code&gt; を使用する場合に、空の文字列のパターン一致の特別なケースが作成されます。最初に &lt;code&gt;notempty_atstart&lt;/code&gt; とanchoredを使用 &lt;code&gt;anchored&lt;/code&gt; て同じオフセットで一致を再試行し、次に失敗した場合は開始オフセットを進め（通常は以下を参照）、通常の一致を再試行することにより、null文字列の一致後にPerlの動作をエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="fe8e00e55de2ba8dd6ec7b50c079a9f787696c02" translate="yes" xml:space="preserve">
          <source>Perl supports the Posix notation for character classes. This uses names enclosed by [: and :] within the enclosing square brackets. PCRE also supports this notation. For example, the following matches &quot;0&quot;, &quot;1&quot;, any alphabetic character, or &quot;%&quot;:</source>
          <target state="translated">Perl は文字クラスの Posix 記法をサポートしています。これは、[:と :]で囲まれた名前を角括弧で囲んだものを使用します。PCREもこの表記法をサポートしています。例えば、以下は、&quot;0&quot;、&quot;1&quot;、任意のアルファベット文字、または&quot;%&quot;にマッチします。</target>
        </trans-unit>
        <trans-unit id="765fb2057a7d0f34aecd0daea653b99ec1e8d5fd" translate="yes" xml:space="preserve">
          <source>Perl uses the syntax (?(&amp;lt;name&amp;gt;)...) or (?('name')...) to test for a used subpattern by name. For compatibility with earlier versions of PCRE, which had this facility before Perl, the syntax (?(name)...) is also recognized.</source>
          <target state="translated">Perlは構文（？（&amp;lt;name&amp;gt;）...）または（？（ 'name'）...）を使用して、使用されているサブパターンを名前でテストします。Perlより前にこの機能があった以前のバージョンのPCREとの互換性のために、構文（？（name）...）も認識されます。</target>
        </trans-unit>
        <trans-unit id="5ae8f7a8fad341ccb38028f9d0cbbf740e954e88" translate="yes" xml:space="preserve">
          <source>Perl-like regular expressions for Erlang.</source>
          <target state="translated">ErlangのためのPerlライクな正規表現。</target>
        </trans-unit>
        <trans-unit id="863d66a8ea986e9d2766a9fb1020b6a98f7a40ae" translate="yes" xml:space="preserve">
          <source>Permanent Failures</source>
          <target state="translated">恒久的な失敗</target>
        </trans-unit>
        <trans-unit id="5e842f59f65d2bb9be9ae185301ffb374b609927" translate="yes" xml:space="preserve">
          <source>Permanently deletes all replicas of table &lt;code&gt;Tab&lt;/code&gt;.</source>
          <target state="translated">テーブル &lt;code&gt;Tab&lt;/code&gt; のすべてのレプリカを完全に削除します。</target>
        </trans-unit>
        <trans-unit id="9d10bab6320387e35667d7efc31ca008974ef6de" translate="yes" xml:space="preserve">
          <source>Permits access to the specified set of nodes.</source>
          <target state="translated">指定したノードのセットへのアクセスを許可します。</target>
        </trans-unit>
        <trans-unit id="cbcc14cf66794a811615925669093ae6f0483b21" translate="yes" xml:space="preserve">
          <source>Persistence. Tables can be coherently kept on disc and in the main memory.</source>
          <target state="translated">永続性。テーブルは、ディスクとメインメモリに一貫して保持することができます。</target>
        </trans-unit>
        <trans-unit id="f92e7deab74e37ba55baaec014f2b2842033b9fb" translate="yes" xml:space="preserve">
          <source>Persistent connections are not supported when setting the &lt;code&gt;socket_opts&lt;/code&gt; option. When &lt;code&gt;socket_opts&lt;/code&gt; is not set the current implementation assumes the requests to the same host, port combination will use the same socket options.</source>
          <target state="translated">&lt;code&gt;socket_opts&lt;/code&gt; オプションを設定する場合、永続的な接続はサポートされません。 &lt;code&gt;socket_opts&lt;/code&gt; が設定されていない場合、現在の実装は同じホストへの要求を想定しており、ポートの組み合わせは同じソケットオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="2bee04fabd8ac0fac36ed62f88c0b1f7fc8cfa48" translate="yes" xml:space="preserve">
          <source>Peter's client receives the message in the &lt;code&gt;await_result&lt;/code&gt; function.</source>
          <target state="translated">Peterのクライアントは、 &lt;code&gt;await_result&lt;/code&gt; 関数でメッセージを受信します。</target>
        </trans-unit>
        <trans-unit id="a1fbe41a1fd16bc593d390402b8a1d609687aad4" translate="yes" xml:space="preserve">
          <source>Phags_Pa</source>
          <target state="translated">Phags_Pa</target>
        </trans-unit>
        <trans-unit id="6908ab9bda0e225ecfd064a3d987f42cfc69e74c" translate="yes" xml:space="preserve">
          <source>Phoenician</source>
          <target state="translated">Phoenician</target>
        </trans-unit>
        <trans-unit id="816184994301f53e2f7c60336684c53229d3fc02" translate="yes" xml:space="preserve">
          <source>Pick just a few suites</source>
          <target state="translated">いくつかのスイートルームを選ぶ</target>
        </trans-unit>
        <trans-unit id="f298de9cea75ea5230dda5d9d28b4989aaf746f4" translate="yes" xml:space="preserve">
          <source>Pid</source>
          <target state="translated">Pid</target>
        </trans-unit>
        <trans-unit id="39e4ade84d7c390c8d53a5ae6be8e034ac54f0ea" translate="yes" xml:space="preserve">
          <source>Pid is the pid returned from &lt;code&gt;inets:start/[2,3]&lt;/code&gt;. Can also be retrieved form &lt;code&gt;inets:services/0&lt;/code&gt; and &lt;code&gt;inets:services_info/0&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;inets&quot;&gt;inets(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Pidは &lt;code&gt;inets:start/[2,3]&lt;/code&gt; から返されたpid です。 &lt;code&gt;inets:services/0&lt;/code&gt; および &lt;code&gt;inets:services_info/0&lt;/code&gt; から取得することもできます &lt;code&gt;&lt;a href=&quot;inets&quot;&gt;inets(3)&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="e5a12aecdd3b6ac3a81192c0d891abe00ae128dc" translate="yes" xml:space="preserve">
          <source>Pipelining is only used if the pipeline time-out is set, otherwise persistent connections without pipelining are used. That is, the client always waits for the previous response before sending the next request.</source>
          <target state="translated">パイプラインが使用されるのは、パイプラインのタイムアウトが設定されている場合のみで、そうでない場合はパイプラインなしの永続的な接続が使用されます。つまり、クライアントは常に次のリクエストを送信する前に前のレスポンスを待ちます。</target>
        </trans-unit>
        <trans-unit id="299afcf56421dc47a2f48e2448670fa6fa1de131" translate="yes" xml:space="preserve">
          <source>Plain arguments are not interpreted in any way. They are also stored by the &lt;code&gt;init&lt;/code&gt; process and can be retrieved by calling &lt;code&gt;init:get_plain_arguments/0&lt;/code&gt;. Plain arguments can occur before the first flag, or after a &lt;code&gt;--&lt;/code&gt; flag. Also, the &lt;code&gt;-extra&lt;/code&gt; flag causes everything that follows to become plain arguments.</source>
          <target state="translated">単純な引数は決して解釈されません。これらも &lt;code&gt;init&lt;/code&gt; プロセスによって格納され、 &lt;code&gt;init:get_plain_arguments/0&lt;/code&gt; を呼び出すことで取得できます。単純な引数は、最初のフラグの前、または &lt;code&gt;--&lt;/code&gt; フラグの後に発生します。また、 &lt;code&gt;-extra&lt;/code&gt; フラグを指定すると、その後に続くすべてのものが単純な引数になります。</target>
        </trans-unit>
        <trans-unit id="021e228d28e31a2dac01ca348b598716a2be960a" translate="yes" xml:space="preserve">
          <source>Plain system messages. These are received as &lt;code&gt;{system, From, Msg}&lt;/code&gt;. The content and meaning of this message are not interpreted by the receiving process module. When a system message is received, function &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; is called to handle the request.</source>
          <target state="translated">単純なシステムメッセージ。これらは &lt;code&gt;{system, From, Msg}&lt;/code&gt; として受信されます。このメッセージの内容と意味は、受信プロセスモジュールによって解釈されません。システムメッセージが受信されると、要求を処理するために関数 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="67b04c48713ae02b17574be1c7c9e6c47d938551" translate="yes" xml:space="preserve">
          <source>Please note that by historical reasons both the &lt;code&gt;HostAddress&lt;/code&gt; argument and the &lt;code&gt;gen_tcp connect_option(){ip,Address}&lt;/code&gt; set the listening address. This is a source of possible inconsistent settings.</source>
          <target state="translated">歴史的な理由により、 &lt;code&gt;HostAddress&lt;/code&gt; 引数と &lt;code&gt;gen_tcp connect_option(){ip,Address}&lt;/code&gt; 両方がリスニングアドレスを設定することに注意してください。これは、矛盾する設定の原因となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="32abe057fa82c9bf0495c06f768e39e26b9f11f2" translate="yes" xml:space="preserve">
          <source>Please note that design is something, that not necessarily will, but might change in future releases. While the semantics of the API will not change as it is independent of the implementation.</source>
          <target state="translated">デザインは何か、必ずしもそうなるわけではありませんが、将来のリリースで変更される可能性があることに注意してください。APIのセマンティクスは実装から独立しているため変更されませんが。</target>
        </trans-unit>
        <trans-unit id="597358d6204ed2d5f3fed145f855762b0d748a69" translate="yes" xml:space="preserve">
          <source>Please see the GNU Emacs Manual and the etags man page for more info.</source>
          <target state="translated">詳細は GNU Emacs マニュアルと etags man ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="0c436ed1231dc5771eef264b43827bd13f0e6d7b" translate="yes" xml:space="preserve">
          <source>Please submit any patches for cross compiling in a way consistent with this system. All input is welcome as we have a very limited set of cross compiling environments to test with. If a new configuration variable is needed, add it to &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp.conf.template&lt;/code&gt;, and use it in &lt;code&gt;configure.in&lt;/code&gt;. Other files that might need to be updated are:</source>
          <target state="translated">このシステムと一貫性のある方法でクロスコンパイルするためのパッチを提出してください。テストできるクロスコンパイル環境は非常に限られているため、すべての入力を歓迎します。新しい構成変数が必要な場合は、 &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp.conf.template&lt;/code&gt; に追加して、 &lt;code&gt;configure.in&lt;/code&gt; で使用します。更新する必要があるかもしれない他のファイルは次のとおりです：</target>
        </trans-unit>
        <trans-unit id="4140a0c59f9aa45b8631c3e0f8a874473a22c621" translate="yes" xml:space="preserve">
          <source>Please take a look at the reference of &lt;code&gt;sanity_check()&lt;/code&gt; for more information.</source>
          <target state="translated">詳細については、 &lt;code&gt;sanity_check()&lt;/code&gt; のリファレンスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="de27f66a37035340860ce9e599a1a2f161cf94be" translate="yes" xml:space="preserve">
          <source>Please, observe that these performance figures are related to our implementation in Erlang/OTP. Measurements of other implementations using other tools and techniques may of course result in other figures.</source>
          <target state="translated">これらのパフォーマンスの数値はErlang/OTPでの実装に関連したものであることに注意してください。他のツールや技術を使って他の実装を測定した場合、もちろん他の数値になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d9963c2e5095bb9cc0241cd748d7939bdbfdd2d6" translate="yes" xml:space="preserve">
          <source>Pointer to next structure in a linked list of all port structures. This list is used when accepting connections and when the driver is unloaded.</source>
          <target state="translated">すべてのポート構造体のリンクされたリストの次の構造体へのポインタ。このリストは、接続を受け入れるときやドライバがアンロードされたときに使用されます。</target>
        </trans-unit>
        <trans-unit id="f19f028244073bea25c8d31a9519278211c9e77e" translate="yes" xml:space="preserve">
          <source>Pointer to the array of reference numbers in ref &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">ref &lt;code&gt;t&lt;/code&gt; の参照番号の配列へのポインター。</target>
        </trans-unit>
        <trans-unit id="1604bd8010fd538d08c7b5045fd397612cd1e659" translate="yes" xml:space="preserve">
          <source>Points out a file containing a decryption key for &lt;code&gt;&lt;a href=&quot;config_file_chapter#encrypted_config_files&quot;&gt;encrypted configuration files&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;config_file_chapter#encrypted_config_files&quot;&gt;encrypted configuration files&lt;/a&gt;&lt;/code&gt; 復号化キーを含むファイルを指摘します。</target>
        </trans-unit>
        <trans-unit id="7afa60ee7ef4769f7cc3c7f050d9db637653fed0" translate="yes" xml:space="preserve">
          <source>Points out a user HTML style sheet (described later).</source>
          <target state="translated">ユーザーのHTMLスタイルシートを指摘します(後述)。</target>
        </trans-unit>
        <trans-unit id="5a35981ceab91897e91ab04e8e2d42162dbd7728" translate="yes" xml:space="preserve">
          <source>Policy for the selection of the temporary port that is used by the server/client during the file transfer. Default is &lt;code&gt;random&lt;/code&gt;, which is the standardized policy. With this policy a randomized free port is used. A single port or a range of ports can be useful if the protocol passes through a firewall.</source>
          <target state="translated">ファイル転送中にサーバー/クライアントが使用する一時ポートの選択に関するポリシー。デフォルトは &lt;code&gt;random&lt;/code&gt; 。これは標準化されたポリシーです。このポリシーでは、ランダム化された空きポートが使用されます。プロトコルがファイアウォールを通過する場合、単一のポートまたはポートの範囲が役立ちます。</target>
        </trans-unit>
        <trans-unit id="465d89dc629419a077edf90091affa9697b2e338" translate="yes" xml:space="preserve">
          <source>Polling interval (sleep time between polls) = 1 second</source>
          <target state="translated">ポーリング間隔(ポール間のスリープ時間)=1秒</target>
        </trans-unit>
        <trans-unit id="f8b9e6faf5ca12ec30a6ab11e637a8f904a10ff8" translate="yes" xml:space="preserve">
          <source>Polling limit (max number of times to poll to get a remaining string terminated) = 0</source>
          <target state="translated">ポーリング制限(残りの文字列を終了させるためのポーリングの最大回数)=0</target>
        </trans-unit>
        <trans-unit id="fe035157cda20b361ce30613e29b5d6f1a46b5fc" translate="yes" xml:space="preserve">
          <source>Port</source>
          <target state="translated">Port</target>
        </trans-unit>
        <trans-unit id="799fa570fa6f42daa22b2994cc3725a643fc7be8" translate="yes" xml:space="preserve">
          <source>Port :: &lt;code&gt;inet:port_number()&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">ポート:: &lt;code&gt;inet:port_number()&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ea62c46246b1ea7a1efd0181063c1442570f3e77" translate="yes" xml:space="preserve">
          <source>Port :: &lt;code&gt;inet:port_number()&lt;/code&gt;,</source>
          <target state="translated">ポート:: &lt;code&gt;inet:port_number()&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="3db9bac190e277a6139a6817df535ad965dd6629" translate="yes" xml:space="preserve">
          <source>Port = &lt;code&gt;integer() &amp;gt; 0&lt;/code&gt;</source>
          <target state="translated">ポート= &lt;code&gt;integer() &amp;gt; 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="59426fd42c4bd1ecdac5914a8115399d46411358" translate="yes" xml:space="preserve">
          <source>Port handle of the executing port.</source>
          <target state="translated">実行中のポートのポートハンドル。</target>
        </trans-unit>
        <trans-unit id="bda81d4c1d517232b2d8149167cc3dc467ef84ea" translate="yes" xml:space="preserve">
          <source>Port queries, that is, on which port the node with a specified name listens</source>
          <target state="translated">ポートクエリ、つまり、指定された名前のノードがどのポートをリッスンするかを調べる</target>
        </trans-unit>
        <trans-unit id="909ce0bd80b59fe5319fb9028cc0d212219399d1" translate="yes" xml:space="preserve">
          <source>Portable hash function that gives the same hash for the same Erlang term regardless of machine architecture and ERTS version (the BIF was introduced in ERTS 4.9.1.1). The function returns a hash value for &lt;code&gt;Term&lt;/code&gt; within the range &lt;code&gt;1..Range&lt;/code&gt;. The maximum value for &lt;code&gt;Range&lt;/code&gt; is 2^32.</source>
          <target state="translated">マシンアーキテクチャやERTSバージョンに関係なく、同じErlang用語に対して同じハッシュを提供するポータブルハッシュ関数（BIFはERTS 4.9.1.1で導入されました）。この関数は、範囲 &lt;code&gt;1..Range&lt;/code&gt; 内の &lt;code&gt;Term&lt;/code&gt; のハッシュ値を返します。 &lt;code&gt;Range&lt;/code&gt; の最大値は2 ^ 32です。</target>
        </trans-unit>
        <trans-unit id="054b8319dfcb3d23d08071f8f07f5156fb5d7c54" translate="yes" xml:space="preserve">
          <source>Portable hash function that gives the same hash for the same Erlang term regardless of machine architecture and ERTS version (the BIF was introduced in ERTS 5.2). The function returns a hash value for &lt;code&gt;Term&lt;/code&gt; within the range &lt;code&gt;0..Range-1&lt;/code&gt;. The maximum value for &lt;code&gt;Range&lt;/code&gt; is 2^32. When without argument &lt;code&gt;Range&lt;/code&gt;, a value in the range 0..2^27-1 is returned.</source>
          <target state="translated">マシンアーキテクチャやERTSバージョンに関係なく、同じErlang用語に対して同じハッシュを提供するポータブルハッシュ関数（BIFはERTS 5.2で導入されました）。この関数は、範囲 &lt;code&gt;0..Range-1&lt;/code&gt; 内の &lt;code&gt;Term&lt;/code&gt; のハッシュ値を返します。 &lt;code&gt;Range&lt;/code&gt; の最大値は2 ^ 32です。引数 &lt;code&gt;Range&lt;/code&gt; がない場合、0..2 ^ 27-1の範囲の値が返されます。</target>
        </trans-unit>
        <trans-unit id="1154c86e0447265172bd06d0ffc96a0fbd31265c" translate="yes" xml:space="preserve">
          <source>Portable hash function that gives the same hash for the same Erlang term regardless of machine architecture and ERTS version.</source>
          <target state="translated">マシンアーキテクチャやERTSのバージョンに関係なく、同じErlang項に対して同じハッシュを与えるポータブルハッシュ関数。</target>
        </trans-unit>
        <trans-unit id="c97a4b3879c8d95d45f28ff453955a6b9bfa5cfb" translate="yes" xml:space="preserve">
          <source>Ports are always byte-oriented, so before sending data that you are not sure is bytewise-encoded to a port, ensure to encode it in a proper Unicode encoding. Sometimes this means that only part of the data must be encoded as, for example, UTF-8. Some parts can be binary data (like a length indicator) or something else that must not undergo character encoding, so no automatic translation is present.</source>
          <target state="translated">ポートは常にバイト指向なので、バイトエンコードされているかどうかわからないデータをポートに送る前に、適切な Unicode エンコーディングでエンコードするようにしてください。これは、データの一部だけを、例えばUTF-8としてエンコードしなければならないことを意味することもあります。いくつかの部分はバイナリデータ(長さの指標のようなもの)であったり、文字エンコーディングを受けてはいけない他の何かであったりするので、自動変換は存在しません。</target>
        </trans-unit>
        <trans-unit id="e4193cfa2c1ff713d813bfaa0d36b429c920defb" translate="yes" xml:space="preserve">
          <source>Ports are configured by the user: diameter places no restrictions.</source>
          <target state="translated">ポートはユーザーによって設定されます。</target>
        </trans-unit>
        <trans-unit id="cb46560c81a3989fb4e829762625b62e66c95636" translate="yes" xml:space="preserve">
          <source>Ports provide the basic mechanism for communication with the external world, from Erlang's point of view. The ports provide a byte-oriented interface to an external program. When a port is created, Erlang can communicate with it by sending and receiving lists of bytes (not Erlang terms). This means that the programmer might have to invent a suitable encoding and decoding scheme.</source>
          <target state="translated">ポートはErlangの観点から、外部との通信のための基本的なメカニズムを提供します。ポートは外部プログラムへのバイト指向のインターフェースを提供します。ポートが作られると、Erlangはバイトのリスト(Erlang用語ではありません)を送受信することでポートと通信することができます。これはプログラマが適切なエンコーディングとデコーディングのスキームを考案しなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="e5dca5bbd887da11b920c85a6859b7dc5d6446ce" translate="yes" xml:space="preserve">
          <source>Posix character class (only if followed by Posix syntax)</source>
          <target state="translated">ポジックス文字クラス(ポジックス構文に続いている場合のみ</target>
        </trans-unit>
        <trans-unit id="cf44c2ab63d2bfdbd90509d6ab05ee59689772ed" translate="yes" xml:space="preserve">
          <source>Possessive quantifiers are always greedy; the setting of option &lt;code&gt;ungreedy&lt;/code&gt; is ignored. They are a convenient notation for the simpler forms of an atomic group. However, there is no difference in the meaning of a possessive quantifier and the equivalent atomic group, but there can be a performance difference; possessive quantifiers are probably slightly faster.</source>
          <target state="translated">所有量指定子は常に貪欲です。 &lt;code&gt;ungreedy&lt;/code&gt; オプションの設定は無視されます。これらは、原子グループのより単純な形式の便利な表記法です。ただし、所有格指定子と同等の原子グループの意味に違いはありませんが、パフォーマンスに違いが生じる可能性があります。所有格指定子はおそらくわずかに高速です。</target>
        </trans-unit>
        <trans-unit id="9b6f1087ff5e67d140eb09f11b3dad81741a1747" translate="yes" xml:space="preserve">
          <source>Possessive quantifiers can be used with lookbehind assertions to specify efficient matching of fixed-length strings at the end of subject strings. Consider the following simple pattern when applied to a long string that does not match:</source>
          <target state="translated">所有量詞を lookbehind アサーションと一緒に使用して、固定長の文字列の効率的なマッチングを主語文字列の末尾に指定することができます。マッチしない長い文字列に適用される以下の単純なパターンを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="1dfe8268667e0c66e3daa6ac9b57143d77624130" translate="yes" xml:space="preserve">
          <source>Possible Erlang 'EXIT' messages is to be handled by this function and all channels are to handle the following message.</source>
          <target state="translated">Erlangの'EXIT'メッセージはこの関数で処理され、すべてのチャンネルは以下のメッセージを処理します。</target>
        </trans-unit>
        <trans-unit id="149bf3ac15f9f4fc58f0fe306b8c56c8c16051d0" translate="yes" xml:space="preserve">
          <source>Possible SCTP events:</source>
          <target state="translated">考えられる SCTP イベント。</target>
        </trans-unit>
        <trans-unit id="b91d93860e0e7dc1f57e9b3c4cd2dfcbc0c4795b" translate="yes" xml:space="preserve">
          <source>Possible actions: ignore as in drop the event (maybe log it) or deal with the event in some other state as in postpone it.</source>
          <target state="translated">考えられるアクション:イベントをドロップする(多分ログに記録する)ように無視するか、イベントを延期するように他の状態でイベントを処理します。</target>
        </trans-unit>
        <trans-unit id="986d4a1466fd9cd5e38ecaec22d116bf1c515c81" translate="yes" xml:space="preserve">
          <source>Possible configuration variables include:</source>
          <target state="translated">設定可能な変数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="34001dfcb817c4c0ae5c87f2102d6fe4615ff7e1" translate="yes" xml:space="preserve">
          <source>Possible options and values vary depending on the I/O device. For a list of supported options and their current values on a specific I/O device, use function &lt;code&gt;&lt;a href=&quot;#getopts-1&quot;&gt;getopts/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">可能なオプションと値は、I / Oデバイスによって異なります。特定のI / Oデバイスでサポートされているオプションとその現在の値のリストについては、関数 &lt;code&gt;&lt;a href=&quot;#getopts-1&quot;&gt;getopts/1&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="878f3530033a9b08ada15887a53634015460882c" translate="yes" xml:space="preserve">
          <source>Possible options are :</source>
          <target state="translated">可能なオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="60e11e810786d4e1c3e27a2df214cc536e9941c7" translate="yes" xml:space="preserve">
          <source>Possible options are:</source>
          <target state="translated">可能性のある選択肢は</target>
        </trans-unit>
        <trans-unit id="2005d62e46c5a3d6f217477137da0006cd82c5a1" translate="yes" xml:space="preserve">
          <source>Possible reasons for a bad certificate:</source>
          <target state="translated">証明書がダメな理由として考えられること</target>
        </trans-unit>
        <trans-unit id="1473fc3a07d611c813c39a776d207edb467c5e8f" translate="yes" xml:space="preserve">
          <source>Possibly the most important feature of an editor designed for programmers is the ability to indent a line of code in accordance with the structure of the programming language. The Erlang mode does, of course, provide this feature. The layout used is based on the common use of the language. The mode also provides things as syntax highlighting, electric commands, module name verification, comment support including paragraph filling, skeletons, tags support etc.</source>
          <target state="translated">プログラマーのためにデザインされたエディタの最も重要な機能は、プログラミング言語の構造に合わせてコードの行をインデントする機能かもしれません。Erlangモードはもちろんこの機能を備えています。レイアウトは言語の一般的な使い方に基づいています。このモードでは、シンタックスハイライト、電気コマンド、モジュール名の検証、段落埋めを含むコメントのサポート、スケルトン、タグのサポートなども提供しています。</target>
        </trans-unit>
        <trans-unit id="c84b501894f8e4082c349aaca37c8c128c099d19" translate="yes" xml:space="preserve">
          <source>Postponing is ordered by the state transition &lt;code&gt;&lt;a href=&quot;#State%20Transition%20Actions&quot;&gt;State Transition Action&lt;/a&gt;&lt;/code&gt;&lt;code&gt;postpone&lt;/code&gt;.</source>
          <target state="translated">延期は、状態遷移 &lt;code&gt;&lt;a href=&quot;#State%20Transition%20Actions&quot;&gt;State Transition Action&lt;/a&gt;&lt;/code&gt; &lt;code&gt;postpone&lt;/code&gt; によって順序付けられます。</target>
        </trans-unit>
        <trans-unit id="3e2fa43d974da83b84f8b7a0198aa7c4a5f02ff1" translate="yes" xml:space="preserve">
          <source>PowerPC: All 32-bit 6xx/7xx(G3)/74xx(G4) processors should work. 32-bit mode on 970 (G5) and POWER5 processors should work.</source>
          <target state="translated">PowerPC。32 ビットの 6xx/7xx(G3)/74xx(G4)プロセッサはすべて動作するはずです。970 (G5)および POWER5 プロセッサの 32 ビットモードは動作するはずです。</target>
        </trans-unit>
        <trans-unit id="cfd617494e5919519b64ca7cf73d988ce7314f09" translate="yes" xml:space="preserve">
          <source>PowerPC: Linux, Mac OSX</source>
          <target state="translated">PowerPC:Linux、Mac OSX</target>
        </trans-unit>
        <trans-unit id="8756ea35ca147cf4eb388864ebf89dce85216cce" translate="yes" xml:space="preserve">
          <source>Pre-built Source Release</source>
          <target state="translated">ビルド済みのソースリリース</target>
        </trans-unit>
        <trans-unit id="e9533f120fc37f02251d4dcf3459051b82c4e403" translate="yes" xml:space="preserve">
          <source>Pre-defined module attributes is to be placed before any function declaration.</source>
          <target state="translated">事前に定義されたモジュール属性は、関数宣言の前に配置されます。</target>
        </trans-unit>
        <trans-unit id="926f83f2a7c83bde06ce094d99185e3842a8a8f9" translate="yes" xml:space="preserve">
          <source>Pre-formatted &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/download/otp_doc_html_21.0.tar.gz&quot;&gt;html documentation&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/download/otp_doc_man_21.0.tar.gz&quot;&gt;man pages&lt;/a&gt;&lt;/code&gt; can be downloaded from</source>
          <target state="translated">事前にフォーマットされた &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/download/otp_doc_html_21.0.tar.gz&quot;&gt;html documentation&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/download/otp_doc_man_21.0.tar.gz&quot;&gt;man pages&lt;/a&gt;&lt;/code&gt; は、以下からダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="ff56d95f5ae87da89cf746ab41ce4e6a479c1f0d" translate="yes" xml:space="preserve">
          <source>Predictive Loop Avoidance</source>
          <target state="translated">予測ループ回避</target>
        </trans-unit>
        <trans-unit id="1fa566d2725a0b203f5437a8f646bcbb04681b10" translate="yes" xml:space="preserve">
          <source>Preferably, you would check the machine type, the operating system, and the Kernel version before executing anything similar to this code.</source>
          <target state="translated">好ましくは、このコードに類似したものを実行する前に、マシンの種類、オペレーティングシステム、カーネルのバージョンを確認してください。</target>
        </trans-unit>
        <trans-unit id="84c0062ba00a989bbfa87f065cc839159da1421f" translate="yes" xml:space="preserve">
          <source>Preliminary version 3, based on TD-33</source>
          <target state="translated">TD-33をベースにした速報版3</target>
        </trans-unit>
        <trans-unit id="da668ceef4aad0b079d2fa1313967654991563d7" translate="yes" xml:space="preserve">
          <source>Preliminary version 3, based on TD-33, but text encoding updated with the final solution for priority in &lt;code&gt;contextProperty&lt;/code&gt; (which is backward compatible with v2).</source>
          <target state="translated">TD-33に基づく暫定バージョン3。ただし、テキストエンコーディングは、 &lt;code&gt;contextProperty&lt;/code&gt; （v2との下位互換性）の優先度の最終ソリューションで更新されました。</target>
        </trans-unit>
        <trans-unit id="8ce9d534fd06e5e0f995497a19bceaa290fe794b" translate="yes" xml:space="preserve">
          <source>Preliminary version 3, based on the final version of the v3-standard, but &lt;strong&gt;excluding&lt;/strong&gt; segments!</source>
          <target state="translated">v3標準の最終バージョンに基づく暫定バージョン3。&lt;strong&gt;ただし、&lt;/strong&gt;セグメントは&lt;strong&gt;除外&lt;/strong&gt;されます。</target>
        </trans-unit>
        <trans-unit id="635a0b9ab635f6550fdf7e8b53c541a528049aa3" translate="yes" xml:space="preserve">
          <source>Preloaded modules are always reported as &lt;code&gt;loaded&lt;/code&gt;, without inspecting the contents on disk. Cover compiled modules will always be reported as &lt;code&gt;modified&lt;/code&gt; if an object file exists, or as &lt;code&gt;removed&lt;/code&gt; otherwise. Modules whose load path is an empty string (which is the convention for auto-generated code) will only be reported as &lt;code&gt;loaded&lt;/code&gt; or &lt;code&gt;not_loaded&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;loaded&lt;/code&gt; されたモジュールは、ディスクの内容を検査することなく、常にloadedと報告されます。カバーコンパイルされたモジュールは、オブジェクトファイルが存在する場合は常に &lt;code&gt;modified&lt;/code&gt; として報告され、そうでない場合は &lt;code&gt;removed&lt;/code&gt; ものとして報告されます。ロードパスが空の文字列（自動生成コードの規則）であるモジュールは、 &lt;code&gt;loaded&lt;/code&gt; または &lt;code&gt;not_loaded&lt;/code&gt; としてのみ報告されます。</target>
        </trans-unit>
        <trans-unit id="0ccb4a6b47e69ccdef1feeb0cb6c0bbd699daa33" translate="yes" xml:space="preserve">
          <source>Prepares to load the modules in the list &lt;code&gt;Modules&lt;/code&gt;. Finish the loading by calling &lt;code&gt;&lt;a href=&quot;#finish_loading-1&quot;&gt;finish_loading(Prepared)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リスト &lt;code&gt;Modules&lt;/code&gt; のモジュールをロードする準備をします。 &lt;code&gt;&lt;a href=&quot;#finish_loading-1&quot;&gt;finish_loading(Prepared)&lt;/a&gt;&lt;/code&gt; を呼び出してロードを終了します。</target>
        </trans-unit>
        <trans-unit id="9af0e9a7676ad5c34d0982329c5f5caab38b02df" translate="yes" xml:space="preserve">
          <source>Prepares to open a file on the client side.</source>
          <target state="translated">クライアント側でファイルを開く準備をします。</target>
        </trans-unit>
        <trans-unit id="1af579a4819f628301944085e091406a4beaf50a" translate="yes" xml:space="preserve">
          <source>Prepend the specified directory to the code path. Use to point at beam files compiled from inherited dictionaries, &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#inherits&quot;&gt;@inherits&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; in a dictionary file creating a beam dependency, not an erl/hrl dependency.</source>
          <target state="translated">指定したディレクトリをコードパスの先頭に追加します。ビーム継承された辞書からコンパイルされたファイル、ポイントに使用 &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#inherits&quot;&gt;@inherits&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; ビームの依存関係を作成する辞書ファイルではなく、ERL / HRL依存。</target>
        </trans-unit>
        <trans-unit id="a20fa72c3402e6bde9460d87001f7ae629c23c73" translate="yes" xml:space="preserve">
          <source>Preprocesses and parses an Erlang source file. Notice that tuple &lt;code&gt;{eof, Line}&lt;/code&gt; returned at the end of the file is included as a &quot;form&quot;.</source>
          <target state="translated">Erlangソースファイルを前処理して解析します。ファイルの最後に返されたタプル &lt;code&gt;{eof, Line}&lt;/code&gt; が「フォーム」として含まれていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2691f43bd7041517e5cd137cba084147892ae0d0" translate="yes" xml:space="preserve">
          <source>Presented IDs</source>
          <target state="translated">提示されたID</target>
        </trans-unit>
        <trans-unit id="0c6c64c4381af2076f81188f61e3735af23c9c67" translate="yes" xml:space="preserve">
          <source>Presented Identifier</source>
          <target state="translated">提示された識別子</target>
        </trans-unit>
        <trans-unit id="1d8162ec721e521c8cbbcf0236344390db358601" translate="yes" xml:space="preserve">
          <source>Presents the error returned by an SSL function as a printable string.</source>
          <target state="translated">SSL関数が返したエラーを印刷可能な文字列として表示します。</target>
        </trans-unit>
        <trans-unit id="04f8808cdf1dcc1ebc30cfb13086e1464c6e225f" translate="yes" xml:space="preserve">
          <source>Press Control-C to shut down the Erlang system and the Erlang shell.</source>
          <target state="translated">Control-Cを押してErlangシステムとErlangシェルをシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="f85da72e94aea2381a2f0b0888b6cb0b938cff09" translate="yes" xml:space="preserve">
          <source>Pretty printing of abstract Erlang syntax trees.</source>
          <target state="translated">抽象的なErlangのシンタックスツリーをきれいに印刷しています。</target>
        </trans-unit>
        <trans-unit id="dc508f11298d514f277642f83dadf29968dd9d46" translate="yes" xml:space="preserve">
          <source>Pretty prints a &lt;code&gt;Form&lt;/code&gt;, which is an abstract form of a type that is returned by &lt;code&gt;&lt;a href=&quot;erl_parse#parse_form-1&quot;&gt;erl_parse:parse_form/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Pretty は、 &lt;code&gt;&lt;a href=&quot;erl_parse#parse_form-1&quot;&gt;erl_parse:parse_form/1&lt;/a&gt;&lt;/code&gt; によって返されるタイプの抽象 &lt;code&gt;Form&lt;/code&gt; であるFormを出力します。</target>
        </trans-unit>
        <trans-unit id="d63df205ad942f1c830ebd4e4bc701ca8b9e816f" translate="yes" xml:space="preserve">
          <source>Pretty-print a syntax tree or template to the standard output. This is a utility function for development and debugging.</source>
          <target state="translated">構文ツリーやテンプレートを標準出力にプリティプリントします。開発やデバッグのためのユーティリティ関数です。</target>
        </trans-unit>
        <trans-unit id="ac772a8e8177c0183620391b61e4e90f72e8fe2f" translate="yes" xml:space="preserve">
          <source>Prettyprint-formats an abstract Erlang syntax tree as text. For example, if you have a &lt;code&gt;.beam&lt;/code&gt; file that has been compiled with &lt;code&gt;debug_info&lt;/code&gt;, the following should print the source code for the module (as it looks in the debug info representation):</source>
          <target state="translated">Prettyprintは、抽象Erlang構文ツリーをテキストとしてフォーマットします。あなたが持っている場合たとえば、 &lt;code&gt;.beam&lt;/code&gt; してコンパイルされたファイル &lt;code&gt;debug_info&lt;/code&gt; （それがデバッグ情報の表現に見えるよう）、以下はモジュールのソースコードを印刷する必要があります。</target>
        </trans-unit>
        <trans-unit id="bf3e85268675b1375b86ffb5b4b5e86258ba6284" translate="yes" xml:space="preserve">
          <source>Prevents loading information about source filenames and line numbers. This saves some memory, but exceptions do not contain information about the filenames and line numbers.</source>
          <target state="translated">ソースのファイル名や行番号に関する情報の読み込みを防ぎます。これはメモリを節約しますが、例外にはファイル名や行番号に関する情報は含まれません。</target>
        </trans-unit>
        <trans-unit id="d09eeaa3bc8ced4fe796ecbcf1dd05c62de1e4cd" translate="yes" xml:space="preserve">
          <source>Prevents the Server Name Indication extension from being sent and disables the hostname verification check &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt;</source>
          <target state="translated">サーバー名表示拡張が送信されないようにし、ホスト名検証チェック &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt; を無効にします</target>
        </trans-unit>
        <trans-unit id="13c464652aa4866a035cb6021e96dd21a453187f" translate="yes" xml:space="preserve">
          <source>Previous implementation used to allow all characters as long as they were integer values greater than or equal to zero. This sometimes lead to unwanted results since null characters (integer value zero) often are interpreted as string termination. The current implementation rejects these.</source>
          <target state="translated">以前の実装では、ゼロ以上の整数値であればすべての文字を許可していました。これは、ヌル文字(整数値ゼロ)が文字列の終端と解釈されることが多いため、望ましくない結果になることがありました。現在の実装では、これらを拒否しています。</target>
        </trans-unit>
        <trans-unit id="7569c52a61d993390fecf54a831ac17622da8694" translate="yes" xml:space="preserve">
          <source>Previously &lt;code&gt;erlang:now/0&lt;/code&gt; was the only option for doing many things. This section deals with some things that &lt;code&gt;erlang:now/0&lt;/code&gt; can be used for, and how you use the new API.</source>
          <target state="translated">以前は &lt;code&gt;erlang:now/0&lt;/code&gt; が多くのことを行う唯一のオプションでした。このセクションでは、 &lt;code&gt;erlang:now/0&lt;/code&gt; を使用できるいくつかの事項と、新しいAPIの使用方法について説明します。</target>
        </trans-unit>
        <trans-unit id="e0ceee1e4ba51d6772fb4907373f07ae18936fe7" translate="yes" xml:space="preserve">
          <source>Previously, in the runtime system without SMP support, specific driver callbacks were always called from the same thread. This is &lt;strong&gt;not&lt;/strong&gt; the case in the runtime system with SMP support. Regardless of locking scheme used, calls to driver callbacks can be made from different threads. For example, two consecutive calls to exactly the same callback for exactly the same port can be made from two different threads. This is for &lt;strong&gt;most&lt;/strong&gt; drivers not a problem, but it can be. Drivers that depend on all callbacks that are called in the same thread, &lt;strong&gt;must&lt;/strong&gt; be rewritten before they are used in the runtime system with SMP support.</source>
          <target state="translated">以前は、SMPサポートのないランタイムシステムでは、特定のドライバーコールバックが常に同じスレッドから呼び出されていました。これは、SMPをサポートするランタイムシステムには当てはまり&lt;strong&gt;ません&lt;/strong&gt;。使用されるロックスキームに関係なく、ドライバーコールバックの呼び出しは異なるスレッドから行うことができます。たとえば、まったく同じポートに対するまったく同じコールバックへの2つの連続した呼び出しは、2つの異なるスレッドから行うことができます。これは&lt;strong&gt;ほとんどの&lt;/strong&gt;ドライバーにとって問題ではありませんが、問題である可能性があります。同じスレッドで呼び出されるすべてのコールバックに依存するドライバーは、SMPをサポートするランタイムシステムで使用する前に書き換える&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="41e95726528ea52023e106b0ac0c22d8fda4f9a9" translate="yes" xml:space="preserve">
          <source>Primary configuration data for Logger. The following default values apply:</source>
          <target state="translated">ロガーのプライマリ構成データ。以下のデフォルト値が適用されます。</target>
        </trans-unit>
        <trans-unit id="d4247f20e948bccce17d13768ac3cbeade11f898" translate="yes" xml:space="preserve">
          <source>Primary filters are added with &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; and removed with &lt;code&gt;&lt;a href=&quot;logger#remove_primary_filter-1&quot;&gt;logger:remove_primary_filter/1&lt;/a&gt;&lt;/code&gt;. They can also be added at system start via the Kernel configuration parameter &lt;code&gt;&lt;a href=&quot;#logger_parameter&quot;&gt;logger&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一次フィルタが追加されて &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; とし、除去 &lt;code&gt;&lt;a href=&quot;logger#remove_primary_filter-1&quot;&gt;logger:remove_primary_filter/1&lt;/a&gt;&lt;/code&gt; 。カーネル構成パラメーター &lt;code&gt;&lt;a href=&quot;#logger_parameter&quot;&gt;logger&lt;/a&gt;&lt;/code&gt; 使用して、システムの起動時に追加することもできます。</target>
        </trans-unit>
        <trans-unit id="c017c83ba101ed388ebd807c4962577b9c15b383" translate="yes" xml:space="preserve">
          <source>Print information about the progress of execution (analysis phases, time spent in each, and size of the relative input).</source>
          <target state="translated">実行の進捗状況(解析フェーズ、それぞれにかかった時間、相対入力の大きさ)の情報を印刷します。</target>
        </trans-unit>
        <trans-unit id="840da8e13285304b6387e89b722d638fe4321fb7" translate="yes" xml:space="preserve">
          <source>Print percentage of time spent in each state out of system time as well as thread time. Default: false.</source>
          <target state="translated">各状態で過ごした時間のうち、 システム時間 と スレッド時間の割合を表示します。デフォルト:false。</target>
        </trans-unit>
        <trans-unit id="07be91632e8eb7326b61e92e0be9119ccf72f9d9" translate="yes" xml:space="preserve">
          <source>Print the Dialyzer version and some more information and exit.</source>
          <target state="translated">ダイアライザーのバージョンといくつかの詳細情報を印刷して終了します。</target>
        </trans-unit>
        <trans-unit id="4ad3462bebc7bf990bf0f02e7785a28379a6206b" translate="yes" xml:space="preserve">
          <source>Print the given microstate statistics values to standard out. With many states this can be quite verbose. See the top of this reference manual for a brief description of what the fields mean.</source>
          <target state="translated">与えられたマイクロステート統計値を印刷して標準化します。多くのステートでは、これは非常に冗長になる可能性があります。フィールドの意味についての簡単な説明は、このリファレンスマニュアルのトップを参照してください。</target>
        </trans-unit>
        <trans-unit id="c29cb731638369d14c3a95c6a29333f3020a9db2" translate="yes" xml:space="preserve">
          <source>Print the given microstate statistics values to stdout. Same as &lt;code&gt;&lt;a href=&quot;#print-1&quot;&gt;msacc:print(DataOrStats,#{}).&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">指定されたマイクロステート統計値をstdoutに出力します。 &lt;code&gt;&lt;a href=&quot;#print-1&quot;&gt;msacc:print(DataOrStats,#{}).&lt;/a&gt;&lt;/code&gt; 同じです。</target>
        </trans-unit>
        <trans-unit id="d7eaf72064647bad389abb4f1d3dfdc027f8b39d" translate="yes" xml:space="preserve">
          <source>Print the given microstate statistics values to the given file or device. The other arguments behave the same way as for &lt;code&gt;&lt;a href=&quot;#print-2&quot;&gt;print/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定されたマイクロステート統計値を指定されたファイルまたはデバイスに出力します。他の引数は &lt;code&gt;&lt;a href=&quot;#print-2&quot;&gt;print/2&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="34634055c6f69316398bf0d40b7161096698a0c0" translate="yes" xml:space="preserve">
          <source>Print the statistics by source file and line numbers.</source>
          <target state="translated">ソースファイルと行番号で統計情報を印刷します。</target>
        </trans-unit>
        <trans-unit id="6346a375113351396db6189bbd3e28045635ee9a" translate="yes" xml:space="preserve">
          <source>Print the structure of a syntax tree or template to the standard output. This is a utility function for development and debugging.</source>
          <target state="translated">構文ツリーやテンプレートの構造を標準出力に出力します。開発やデバッグのためのユーティリティ機能です。</target>
        </trans-unit>
        <trans-unit id="b0de2ead24e5961c777ca83b34e36a96963308e8" translate="yes" xml:space="preserve">
          <source>Print this message and exit.</source>
          <target state="translated">このメッセージを印刷して終了します。</target>
        </trans-unit>
        <trans-unit id="67d04a8c259ba2c520817ac42065457527ed5559" translate="yes" xml:space="preserve">
          <source>Printing characters, excluding letters, digits, and space</source>
          <target state="translated">文字、数字、スペースを除いた文字の印刷</target>
        </trans-unit>
        <trans-unit id="dd479d5b24caa5cc7f6fcec5ba84f65bfd052c0e" translate="yes" xml:space="preserve">
          <source>Printing characters, excluding space</source>
          <target state="translated">スペースを除いた文字の印刷</target>
        </trans-unit>
        <trans-unit id="1ceeb223cd6849a3604ba83fadcbca0256451f47" translate="yes" xml:space="preserve">
          <source>Printing characters, including space</source>
          <target state="translated">スペースを含む文字の印刷</target>
        </trans-unit>
        <trans-unit id="5d921c48d9c8fb8f05637fa271ea8672b6ca0cee" translate="yes" xml:space="preserve">
          <source>Printing options:</source>
          <target state="translated">印刷オプション。</target>
        </trans-unit>
        <trans-unit id="d6045c26dcc40b8b0b1a862cc5369f2a960dd880" translate="yes" xml:space="preserve">
          <source>Prints &lt;code&gt;Text&lt;/code&gt; and the wall clock time for evaluation of &lt;code&gt;Expr&lt;/code&gt;. The result is always the value of &lt;code&gt;Expr&lt;/code&gt;, so this macro can be wrapped around any expression to show its run time when the code is compiled with debugging enabled. For example, &lt;code&gt;List1 = ?debugTime(&quot;sorting&quot;, lists:sort(List))&lt;/code&gt; might show as &quot;&lt;code&gt;sorting: 0.015 s&lt;/code&gt;&quot;.</source>
          <target state="translated">印刷の &lt;code&gt;Text&lt;/code&gt; との評価のためのウォールクロック時間 &lt;code&gt;Expr&lt;/code&gt; 。結果は常に &lt;code&gt;Expr&lt;/code&gt; の値であるため、このマクロを任意の式にラップして、デバッグを有効にしてコードをコンパイルしたときの実行時間を表示できます。たとえば、 &lt;code&gt;List1 = ?debugTime(&quot;sorting&quot;, lists:sort(List))&lt;/code&gt; は、「 &lt;code&gt;sorting: 0.015 s&lt;/code&gt; 」と表示されます。</target>
        </trans-unit>
        <trans-unit id="249624d6cefc4a2b88e5bd0c9d8e84ed3f1f76d0" translate="yes" xml:space="preserve">
          <source>Prints a list of internal lock counters by source code locations.</source>
          <target state="translated">ソースコードの場所別に内部ロックカウンタのリストを表示します。</target>
        </trans-unit>
        <trans-unit id="5b46759cd364af5f12c0d8bc8dd37e3821f4b179" translate="yes" xml:space="preserve">
          <source>Prints a list of internal lock counters for a specific lock.</source>
          <target state="translated">特定のロックの内部ロック・カウンタのリストを表示します。</target>
        </trans-unit>
        <trans-unit id="f780c7159f6f13c37c7d77cfd6cc4335b5ecf7a3" translate="yes" xml:space="preserve">
          <source>Prints a list of internal locks and its statistics.</source>
          <target state="translated">内部ロックのリストとその統計情報を表示します。</target>
        </trans-unit>
        <trans-unit id="34938f37f4431fc15190b179d6c88b3314bbc2c3" translate="yes" xml:space="preserve">
          <source>Prints a term using the record definitions known to the shell. All of &lt;code&gt;Term&lt;/code&gt; is printed; the depth is not limited as is the case when a return value is printed.</source>
          <target state="translated">シェルが認識しているレコード定義を使用して用語を出力します。 &lt;code&gt;Term&lt;/code&gt; すべてが印刷されます。戻り値が出力される場合のように、深さは制限されません。</target>
        </trans-unit>
        <trans-unit id="af0bf4827e6f6c31d2c88fd072f546d7d79231d8" translate="yes" xml:space="preserve">
          <source>Prints a term, in clear text, to the file specified by &lt;code&gt;fp&lt;/code&gt;, or the buffer pointed to by &lt;code&gt;s&lt;/code&gt;. It tries to resemble the term printing in the Erlang shell.</source>
          <target state="translated">用語をクリアテキストで、 &lt;code&gt;fp&lt;/code&gt; で指定されたファイル、または &lt;code&gt;s&lt;/code&gt; で示されたバッファに出力します。これは、Erlangシェルでの印刷という用語に似ています。</target>
        </trans-unit>
        <trans-unit id="dbb3d816fd9f97adbc552b5513c5a135cb6248eb" translate="yes" xml:space="preserve">
          <source>Prints a text representation of &lt;code&gt;Term&lt;/code&gt; on the standard output.</source>
          <target state="translated">&lt;code&gt;Term&lt;/code&gt; のテキスト表現を標準出力に出力します。</target>
        </trans-unit>
        <trans-unit id="f131bd4ae3bf99f6a37fd4eaaff33b16a3ddd00d" translate="yes" xml:space="preserve">
          <source>Prints all existing breakpoints in &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 内のすべての既存のブレークポイントを出力します。</target>
        </trans-unit>
        <trans-unit id="5a8350e6665f2a056f33d55252db1621c39e138f" translate="yes" xml:space="preserve">
          <source>Prints all existing breakpoints.</source>
          <target state="translated">既存のブレークポイントをすべて印刷します。</target>
        </trans-unit>
        <trans-unit id="a09e12adb74f08869231e9cda96a7ab997d865d7" translate="yes" xml:space="preserve">
          <source>Prints all filenames in the zip archive &lt;code&gt;Archive&lt;/code&gt; to the Erlang shell. (Similar to &lt;code&gt;tar&amp;nbsp;t&lt;/code&gt;.)</source>
          <target state="translated">zipアーカイブ &lt;code&gt;Archive&lt;/code&gt; 内のすべてのファイル名をErlangシェルに出力します。（ &lt;code&gt;tar&amp;nbsp;t&lt;/code&gt; 似ています。）</target>
        </trans-unit>
        <trans-unit id="18e7b8e58c0e38665fb68377f1d2376f33278d8b" translate="yes" xml:space="preserve">
          <source>Prints all record definitions.</source>
          <target state="translated">すべてのレコード定義を印刷します。</target>
        </trans-unit>
        <trans-unit id="66a41d50c3e8acabd70db40b3336aae5ee4b67bb" translate="yes" xml:space="preserve">
          <source>Prints all system events on &lt;code&gt;standard_io&lt;/code&gt;. The events are formatted with a function that is defined by the process that generated the event (with a call to &lt;code&gt;&lt;a href=&quot;#handle_debug-4&quot;&gt;handle_debug/4&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">すべてのシステムイベントを &lt;code&gt;standard_io&lt;/code&gt; に出力します。イベントは、（ &lt;code&gt;&lt;a href=&quot;#handle_debug-4&quot;&gt;handle_debug/4&lt;/a&gt;&lt;/code&gt; の呼び出しを使用して）イベントを生成したプロセスによって定義された関数でフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="6a70ee13c7e68963279aefe5da5f06258c94682e" translate="yes" xml:space="preserve">
          <source>Prints an informational message about each added file.</source>
          <target state="translated">追加された各ファイルの情報を表示します。</target>
        </trans-unit>
        <trans-unit id="b783bcbadb2cc653a08641efe74f849f29f9e618" translate="yes" xml:space="preserve">
          <source>Prints an informational message about the added file.</source>
          <target state="translated">追加されたファイルに関する情報メッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="789b189bdffe8e48a506f0e50b3eae0173a1b17d" translate="yes" xml:space="preserve">
          <source>Prints an informational message for each extracted file.</source>
          <target state="translated">抽出されたファイルごとに情報メッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="b42f15b17183c3dbb48cf5820eb8a855896d590a" translate="yes" xml:space="preserve">
          <source>Prints and logs from a test case.</source>
          <target state="translated">テストケースから印刷してログを記録します。</target>
        </trans-unit>
        <trans-unit id="0cf9dc25b9f3af6da971b72a11d06f3ed2521439" translate="yes" xml:space="preserve">
          <source>Prints both the source code for &lt;code&gt;Expr&lt;/code&gt; and its current value. E.g., &lt;code&gt;?debugVal(f(X))&lt;/code&gt; might be displayed as &quot;&lt;code&gt;f(X) = 42&lt;/code&gt;&quot;. (Large terms are truncated to the depth given by the macro &lt;code&gt;EUNIT_DEBUG_VAL_DEPTH&lt;/code&gt;, which defaults to 15 but can be overridden by the user.) The result is always the value of &lt;code&gt;Expr&lt;/code&gt;, so this macro can be wrapped around any expression to display its value when the code is compiled with debugging enabled.</source>
          <target state="translated">&lt;code&gt;Expr&lt;/code&gt; のソースコードとその現在の値の両方を出力します。たとえば、 &lt;code&gt;?debugVal(f(X))&lt;/code&gt; は &quot; &lt;code&gt;f(X) = 42&lt;/code&gt; &quot; と表示されます。（大きな項は、マクロ &lt;code&gt;EUNIT_DEBUG_VAL_DEPTH&lt;/code&gt; で指定された深さに切り捨てられます。デフォルトは15ですが、ユーザーがオーバーライドできます。）結果は常に &lt;code&gt;Expr&lt;/code&gt; の値であるため、このマクロは、式をラップしてその値を表示できます。コードはデバッグを有効にしてコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="cba2a56bd54f58298d76b707819499e391db4251" translate="yes" xml:space="preserve">
          <source>Prints call statistics for each process in the analysis. This is the default.</source>
          <target state="translated">解析内の各プロセスの呼び出し統計情報を出力します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="e1be7a76157fe86cb7376f259794a335da8ea625" translate="yes" xml:space="preserve">
          <source>Prints callers and called information in the analysis. This is the default.</source>
          <target state="translated">分析の呼び出し元および呼び出した情報を印刷します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="c909f68d3cdf1b4678031168fcbd218d91fd2a8e" translate="yes" xml:space="preserve">
          <source>Prints filenames and information about all files in the zip archive &lt;code&gt;Archive&lt;/code&gt; to the Erlang shell. (Similar to &lt;code&gt;tar tv&lt;/code&gt;.)</source>
          <target state="translated">ファイル名とzipアーカイブ &lt;code&gt;Archive&lt;/code&gt; 内のすべてのファイルに関する情報をErlangシェルに出力します。（ &lt;code&gt;tar tv&lt;/code&gt; に似ています。）</target>
        </trans-unit>
        <trans-unit id="3d37aa2c01035d21e560d11bd3a6a17de70550c3" translate="yes" xml:space="preserve">
          <source>Prints from a test case to the console.</source>
          <target state="translated">テストケースからコンソールに印刷します。</target>
        </trans-unit>
        <trans-unit id="f28c890f7ca27b31a21a647f349c289e1195b699" translate="yes" xml:space="preserve">
          <source>Prints from a test case to the log file.</source>
          <target state="translated">テストケースからログファイルに出力します。</target>
        </trans-unit>
        <trans-unit id="367bedb7c3ebf6d1df93886702fa7c7177182d00" translate="yes" xml:space="preserve">
          <source>Prints help text.</source>
          <target state="translated">ヘルプテキストを印刷します。</target>
        </trans-unit>
        <trans-unit id="4842182b0113366c688f6ed8532b18cf4974ced6" translate="yes" xml:space="preserve">
          <source>Prints information about all table definitions on the terminal.</source>
          <target state="translated">端末上のすべてのテーブル定義に関する情報を表示します。</target>
        </trans-unit>
        <trans-unit id="c9b99b5c7266c995bbf989e773efe1fa4d05005d" translate="yes" xml:space="preserve">
          <source>Prints information about one table definition on the terminal.</source>
          <target state="translated">1つのテーブル定義に関する情報を端末に表示します。</target>
        </trans-unit>
        <trans-unit id="9a832165573cfbb962be90caea9e1e9a84652de7" translate="yes" xml:space="preserve">
          <source>Prints lcnt server state and generic information about collected lock statistics.</source>
          <target state="translated">lcnt サーバの状態と収集したロック統計情報の一般的な情報を表示します。</target>
        </trans-unit>
        <trans-unit id="96fd634328bfac39da0d4ad325d6f383ea04727b" translate="yes" xml:space="preserve">
          <source>Prints names and information about all files in the tar file &lt;code&gt;Name&lt;/code&gt; to the Erlang shell (similar to &quot;&lt;code&gt;tar&amp;nbsp;tv&lt;/code&gt;&quot;).</source>
          <target state="translated">tarファイル &lt;code&gt;Name&lt;/code&gt; 内のすべてのファイルの名前と情報をErlangシェルに出力します（「 &lt;code&gt;tar&amp;nbsp;tv&lt;/code&gt; 」と同様）。</target>
        </trans-unit>
        <trans-unit id="0b7c144db0f81aaecb54453231a97d3656fc6209" translate="yes" xml:space="preserve">
          <source>Prints one expression. It is useful for implementing hooks (see section &lt;code&gt;&lt;a href=&quot;#knownlimitations&quot;&gt;Known Limitations&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">1つの式を出力します。これはフックの実装に役立ちます（ &lt;code&gt;&lt;a href=&quot;#knownlimitations&quot;&gt;Known Limitations&lt;/a&gt;&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="0d811790ffe033d437439353029d5c5f60196585" translate="yes" xml:space="preserve">
          <source>Prints selected record definitions. &lt;code&gt;RecordNames&lt;/code&gt; is a record name or a list of record names.</source>
          <target state="translated">選択したレコード定義を印刷します。 &lt;code&gt;RecordNames&lt;/code&gt; は、レコード名またはレコード名のリストです。</target>
        </trans-unit>
        <trans-unit id="3337334a9f65d4805b4e67126869967487e4a45a" translate="yes" xml:space="preserve">
          <source>Prints system information on the terminal. This function can be used even if Mnesia is not started. However, more information is displayed if Mnesia is started.</source>
          <target state="translated">端末にシステム情報を印刷します。この機能はMnesiaを起動していなくても使用できます。ただし、Mnesiaを起動すると、より多くの情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="cc7fe00a6e4282e0ab0f331a54683530177db63d" translate="yes" xml:space="preserve">
          <source>Prints the argument with the string syntax. The argument is, if no Unicode translation modifier is present, an &lt;code&gt;iolist()&lt;/code&gt;, a &lt;code&gt;binary()&lt;/code&gt;, or an &lt;code&gt;atom()&lt;/code&gt;. If the Unicode translation modifier (&lt;code&gt;t&lt;/code&gt;) is in effect, the argument is &lt;code&gt;unicode:chardata()&lt;/code&gt;, meaning that binaries are in UTF-8. The characters are printed without quotes. The string is first truncated by the specified precision and then padded and justified to the specified field width. The default precision is the field width.</source>
          <target state="translated">文字列構文で引数を出力します。引数は、Unicode変換修飾子が存在しない場合、 &lt;code&gt;iolist()&lt;/code&gt; 、 &lt;code&gt;binary()&lt;/code&gt; 、または &lt;code&gt;atom()&lt;/code&gt; です。Unicode変換修飾子（ &lt;code&gt;t&lt;/code&gt; ）が有効な場合、引数は &lt;code&gt;unicode:chardata()&lt;/code&gt; です。これは、バイナリがUTF-8であることを意味します。文字は引用符なしで印刷されます。文字列は、まず指定された精度で切り捨てられ、次にパディングされて指定されたフィールド幅に揃えられます。デフォルトの精度はフィールド幅です。</target>
        </trans-unit>
        <trans-unit id="bd5cd1b05b1d6e3d16e8bf612aeeaa8d48e96e04" translate="yes" xml:space="preserve">
          <source>Prints the content of all the (snmp) tables and variables for all mibs handled by the snmp agent.</source>
          <target state="translated">snmpエージェントが扱うすべてのmibのすべての(snmp)テーブルと変数の内容を印刷します。</target>
        </trans-unit>
        <trans-unit id="90637c82b5d5250fe221618f94be01dea7995ed8" translate="yes" xml:space="preserve">
          <source>Prints the content of all the (snmp) tables for all mibs handled by the snmp agent.</source>
          <target state="translated">snmpエージェントが扱うすべてのmibのすべての(snmp)テーブルの内容を印刷します。</target>
        </trans-unit>
        <trans-unit id="4bf87b55c70954b59410622021acfda18b4d862a" translate="yes" xml:space="preserve">
          <source>Prints the content of all the (snmp) variables for all mibs handled by the snmp agent.</source>
          <target state="translated">snmpエージェントが扱うすべてのmibのすべての(snmp)変数の内容を出力します。</target>
        </trans-unit>
        <trans-unit id="5b79c2bcb86c7797ba5fa06effcf5832d223d36a" translate="yes" xml:space="preserve">
          <source>Prints the contents of the database on screen. This is useful for debugging since the &lt;code&gt;STANDARD-MIB&lt;/code&gt; and &lt;code&gt;OTP-SNMPEA-MIB&lt;/code&gt; (and maybe your own MIBs) are stored in &lt;code&gt;snmpa_local_db&lt;/code&gt;.</source>
          <target state="translated">データベースの内容を画面に出力します。 &lt;code&gt;STANDARD-MIB&lt;/code&gt; および &lt;code&gt;OTP-SNMPEA-MIB&lt;/code&gt; （およびおそらく独自のMIB）は &lt;code&gt;snmpa_local_db&lt;/code&gt; に格納されているため、これはデバッグに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3d48e71ba53b9a774ace4b3048a7d6147bac49e2" translate="yes" xml:space="preserve">
          <source>Prints the current microstate accounting to standard out. Same as &lt;code&gt;&lt;a href=&quot;#print-1&quot;&gt;msacc:print(msacc:stats(),#{}).&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">現在のマイクロステートアカウンティングを標準出力に出力します。 &lt;code&gt;&lt;a href=&quot;#print-1&quot;&gt;msacc:print(msacc:stats(),#{}).&lt;/a&gt;&lt;/code&gt; 同じです。</target>
        </trans-unit>
        <trans-unit id="1f573f7b3b8befc12d22fd5e016d5affba5ec7e7" translate="yes" xml:space="preserve">
          <source>Prints the current status of all interpreted processes.</source>
          <target state="translated">すべての解釈されたプロセスの現在の状態を表示します。</target>
        </trans-unit>
        <trans-unit id="b7de039db4515d2480ed1087648907d99e3cce17" translate="yes" xml:space="preserve">
          <source>Prints the current variable bindings.</source>
          <target state="translated">現在の変数のバインディングを表示します。</target>
        </trans-unit>
        <trans-unit id="38356e23d298a145e0dd7db9a9c3d8f5137f87bd" translate="yes" xml:space="preserve">
          <source>Prints the formatted string in the comment field in the table on the test suite result page.</source>
          <target state="translated">テストスイートの結果ページの表のコメントフィールドに、フォーマットされた文字列を印刷します。</target>
        </trans-unit>
        <trans-unit id="9a338446495bbc76dc9e6e72c05e03dc5573b368" translate="yes" xml:space="preserve">
          <source>Prints the history list.</source>
          <target state="translated">履歴リストを印刷します。</target>
        </trans-unit>
        <trans-unit id="1587f809009dffca5babc79d912a7baf0c2c4678" translate="yes" xml:space="preserve">
          <source>Prints the logged system events in the debug structure, using &lt;code&gt;FormFunc&lt;/code&gt; as defined when the event was generated by a call to &lt;code&gt;&lt;a href=&quot;#handle_debug-4&quot;&gt;handle_debug/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">イベントが &lt;code&gt;&lt;a href=&quot;#handle_debug-4&quot;&gt;handle_debug/4&lt;/a&gt;&lt;/code&gt; の呼び出しによって生成されたときに定義された &lt;code&gt;FormFunc&lt;/code&gt; を使用して、ログに記録されたシステムイベントをデバッグ構造に出力します。</target>
        </trans-unit>
        <trans-unit id="c697f405132de684f29b1c85650f6166f19d3f38" translate="yes" xml:space="preserve">
          <source>Prints the name of the working directory.</source>
          <target state="translated">作業ディレクトリの名前を表示します。</target>
        </trans-unit>
        <trans-unit id="2b0a0e8caa63b361ad3055b9a938bd9ee0847140" translate="yes" xml:space="preserve">
          <source>Prints the names of all files in the tar file &lt;code&gt;Name&lt;/code&gt; to the Erlang shell (similar to &quot;&lt;code&gt;tar&amp;nbsp;t&lt;/code&gt;&quot;).</source>
          <target state="translated">tarファイル &lt;code&gt;Name&lt;/code&gt; 内のすべてのファイルの名前をErlangシェルに出力します（「 &lt;code&gt;tar&amp;nbsp;t&lt;/code&gt; 」と同様）。</target>
        </trans-unit>
        <trans-unit id="df056a5b36536b5f6f05efef7d94a9025dcb4881" translate="yes" xml:space="preserve">
          <source>Prints the node uptime (as specified by &lt;code&gt;erlang:statistics(wall_clock)&lt;/code&gt;) in human-readable form.</source>
          <target state="translated">ノードの稼働時間（ &lt;code&gt;erlang:statistics(wall_clock)&lt;/code&gt; で指定）を人間が読める形式で出力します。</target>
        </trans-unit>
        <trans-unit id="236e4648c9dfa6dccb2557b594716eafdf865791" translate="yes" xml:space="preserve">
          <source>Prints the specified &lt;code&gt;Comment&lt;/code&gt; in the comment field in the table on the test suite result page.</source>
          <target state="translated">テストスイート結果ページのテーブルのコメントフィールドに指定された &lt;code&gt;Comment&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="86341a0cf794500a0ef3c32c1e84cb1e5b1a1ea2" translate="yes" xml:space="preserve">
          <source>Prints the specified Erlang term to the specified output stream.</source>
          <target state="translated">指定されたErlang項を指定された出力ストリームに出力します。</target>
        </trans-unit>
        <trans-unit id="01d810dcc882a2671bb99ec2a3f4b52034e71105" translate="yes" xml:space="preserve">
          <source>Prior to Erlang/OTP 21.0, supervisor, crash, and progress reports were only logged when the SASL application was running. This behaviour can, for backwards compatibility, be enabled by setting the Kernel configuration parameter &lt;code&gt;logger_sasl_compatible&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. For more information, see &lt;code&gt;SASL Error Logging&lt;/code&gt; in the SASL User's Guide.</source>
          <target state="translated">Erlang / OTP 21.0より前のバージョンでは、監視プログラム、クラッシュ、および進行状況のレポートは、SASLアプリケーションの実行中にのみ記録されていました。この動作は、下位互換性のために、カーネル構成パラメーター &lt;code&gt;logger_sasl_compatible&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定することで有効にできます。詳細については、 『SASL User's Guide』の「 &lt;code&gt;SASL Error Logging&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="9c5c3d6724263056f8e5809f4ae6b20baea9b0f8" translate="yes" xml:space="preserve">
          <source>Prior to Erlang/OTP 21.0, these reports were only logged when the SASL application was running, and they were printed trough SASL's own event handlers &lt;code&gt;sasl_report_tty_h&lt;/code&gt; and &lt;code&gt;sasl_report_file_h&lt;/code&gt;.</source>
          <target state="translated">Erlang / OTP 21.0より前の &lt;code&gt;sasl_report_tty_h&lt;/code&gt; では、これらのレポートはSASLアプリケーションの実行中にのみログに記録され、SASL独自のイベントハンドラーsasl_report_tty_hおよび &lt;code&gt;sasl_report_file_h&lt;/code&gt; を介して出力されていました。</target>
        </trans-unit>
        <trans-unit id="06bdb66fe24b1bd0f13724edf2132df5e7b44cc6" translate="yes" xml:space="preserve">
          <source>Priority level &lt;code&gt;max&lt;/code&gt; is reserved for internal use in the Erlang runtime system, and is &lt;strong&gt;not&lt;/strong&gt; to be used by others.</source>
          <target state="translated">優先レベル &lt;code&gt;max&lt;/code&gt; は、Erlangランタイムシステムの内部使用のために予約されており、他のユーザーが使用することは&lt;strong&gt;できません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="891a5ba970623a36963c697cb5e2983045ef4bf5" translate="yes" xml:space="preserve">
          <source>Private directory for a test suite. This directory is to be used when the test suite needs to write to files.</source>
          <target state="translated">テストスイートのためのプライベートディレクトリ。このディレクトリは、テストスイートがファイルに書き込む必要がある場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="1560d5e03a4510a6c6ad469d0a62cd63315c3854" translate="yes" xml:space="preserve">
          <source>Private key of the host matching the &lt;code&gt;Algorithm&lt;/code&gt;. It may be a reference to a 'ssh-rsa', rsa-sha2-* or 'ssh-dss' (NOT ecdsa) key stored in a loaded Engine.</source>
          <target state="translated">&lt;code&gt;Algorithm&lt;/code&gt; 一致するホストの秘密鍵。ロードされたエンジンに格納されている「ssh-rsa」、rsa-sha2- *、または「ssh-dss」（ecdsaではない）キーへの参照である場合があります。</target>
        </trans-unit>
        <trans-unit id="603f6c7b83b91ba3b66637cb17d80977c31db448" translate="yes" xml:space="preserve">
          <source>Private key of the user matching the &lt;code&gt;Algorithm&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Algorithm&lt;/code&gt; 一致するユーザーの秘密鍵。</target>
        </trans-unit>
        <trans-unit id="74ad72304fcac0b5a69a08a6f5ec35c07a46f71f" translate="yes" xml:space="preserve">
          <source>Private use</source>
          <target state="translated">個人利用</target>
        </trans-unit>
        <trans-unit id="b79a8e30c6fdcdcf9dd5d5409cd8498f3ab57c1c" translate="yes" xml:space="preserve">
          <source>Probe specifications can be found in &lt;code&gt;erts/emulator/beam/erlang_dtrace.d&lt;/code&gt;, and a few example scripts can be found under &lt;code&gt;lib/runtime_tools/examples/&lt;/code&gt;.</source>
          <target state="translated">プローブの仕様は &lt;code&gt;erts/emulator/beam/erlang_dtrace.d&lt;/code&gt; にあり、いくつかのサンプルスクリプトは &lt;code&gt;lib/runtime_tools/examples/&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f85f3223fd42f20ff0f4013198f3a0482c317dc6" translate="yes" xml:space="preserve">
          <source>Probes in the dtrace.so NIF library like this:</source>
          <target state="translated">dtrace.so NIFライブラリのプローブはこんな感じ。</target>
        </trans-unit>
        <trans-unit id="4180fe17ea663764396b9e7a7c467588a0d635b1" translate="yes" xml:space="preserve">
          <source>Problems were found during the analysis.</source>
          <target state="translated">分析中に問題点が見つかった。</target>
        </trans-unit>
        <trans-unit id="dcd7a97391d07066e93a31ea99c263af50266780" translate="yes" xml:space="preserve">
          <source>Problems when extracting from a tar file, &lt;code&gt;erl_tar:extract/2&lt;/code&gt; returned &lt;code&gt;{error, {Name, Reason}}&lt;/code&gt;.</source>
          <target state="translated">tarファイルからの抽出時の問題、 &lt;code&gt;erl_tar:extract/2&lt;/code&gt; は &lt;code&gt;{error, {Name, Reason}}&lt;/code&gt; 返しました。</target>
        </trans-unit>
        <trans-unit id="e976a26adbbfd7012fe545033a0a8839af4e4c58" translate="yes" xml:space="preserve">
          <source>Process IDs of processes linked to this one. Can also contain ports. If process monitoring is used, this field also tells in which direction the monitoring is in effect. That is, a link &quot;to&quot; a process tells you that the &quot;current&quot; process was monitoring the other, and a link &quot;from&quot; a process tells you that the other process was monitoring the current one.</source>
          <target state="translated">これにリンクされているプロセスのプロセスID。ポートを含むこともできます。プロセス監視が使用されている場合、このフィールドは監視がどの方向で有効であるかも示します。つまり、あるプロセスへの &quot;to &quot;リンクは、&quot;現在の &quot;プロセスが他のプロセスを監視していることを示し、あるプロセスからの &quot;from &quot;リンクは、他のプロセスが現在のプロセスを監視していることを示します。</target>
        </trans-unit>
        <trans-unit id="d7a28bb3334285a1e0ac0387ca14af38afa1bb3b" translate="yes" xml:space="preserve">
          <source>Process a received message</source>
          <target state="translated">受信したメッセージを処理する</target>
        </trans-unit>
        <trans-unit id="6ed08f16461a6d037cb208e9913ab037737a77bd" translate="yes" xml:space="preserve">
          <source>Process identifier of the &lt;code&gt;Kernel&lt;/code&gt; process. That is, the process that called either &lt;code&gt;&lt;a href=&quot;#setup&quot;&gt;setup/5&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#accept_connection&quot;&gt;accept_connection/5&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Kernel&lt;/code&gt; プロセスのプロセス識別子。つまり、 &lt;code&gt;&lt;a href=&quot;#setup&quot;&gt;setup/5&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#accept_connection&quot;&gt;accept_connection/5&lt;/a&gt;&lt;/code&gt; を呼び出したプロセスです。</target>
        </trans-unit>
        <trans-unit id="5350a81bb4d7a6e885720414c324c78fdac18460" translate="yes" xml:space="preserve">
          <source>Process identifier of the process created by the &lt;code&gt;&lt;a href=&quot;#accept&quot;&gt;accept/1&lt;/a&gt;&lt;/code&gt; callback.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#accept&quot;&gt;accept/1&lt;/a&gt;&lt;/code&gt; コールバックによって作成されたプロセスのプロセス識別子。</target>
        </trans-unit>
        <trans-unit id="ec8568d5958f46e915bd83080ff98e0e79a75222" translate="yes" xml:space="preserve">
          <source>Process is monitored by pid.</source>
          <target state="translated">プロセスはpidで監視しています。</target>
        </trans-unit>
        <trans-unit id="beca56c90caa14898b2c241f5874170cc90c2a9c" translate="yes" xml:space="preserve">
          <source>Process metadata is set and updated with &lt;code&gt;&lt;a href=&quot;logger#set_process_metadata-1&quot;&gt;logger:set_process_metadata/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger#update_process_metadata-1&quot;&gt;logger:update_process metadata/1&lt;/a&gt;&lt;/code&gt;, respectively. This metadata applies to the process on which these calls are made, and Logger adds the metadata to all log events issued on that process.</source>
          <target state="translated">プロセスのメタデータは、それぞれ &lt;code&gt;&lt;a href=&quot;logger#set_process_metadata-1&quot;&gt;logger:set_process_metadata/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;logger#update_process_metadata-1&quot;&gt;logger:update_process metadata/1&lt;/a&gt;&lt;/code&gt; で設定および更新されます。このメタデータはこれらの呼び出しが行われるプロセスに適用され、Loggerはそのプロセスで発行されたすべてのログイベントにメタデータを追加します。</target>
        </trans-unit>
        <trans-unit id="67e5f2d87d665dc7e3929e88907eef304eb59bc0" translate="yes" xml:space="preserve">
          <source>Process the action requests and either return an error_descr() indicating some fatal error or a list of action replies (wildcarded or not).</source>
          <target state="translated">アクションリクエストを処理して、致命的なエラーを示す error_descr()か、アクションリプライのリスト (ワイルドカード化されているかどうか)を返します。</target>
        </trans-unit>
        <trans-unit id="ed7308bb59f2876220e45299939d241199595df2" translate="yes" xml:space="preserve">
          <source>Processes</source>
          <target state="translated">Processes</target>
        </trans-unit>
        <trans-unit id="6055fe67fe73591ecd6add960eb22a68e35be849" translate="yes" xml:space="preserve">
          <source>Processes an incoming message. Performs authentication and decryption as necessary. The return values should be passed the manager server.</source>
          <target state="translated">受信メッセージを処理します。必要に応じて認証と復号を行う。戻り値はマネージャサーバに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="288b10741351f050abd56115edaeab3cbc0b134b" translate="yes" xml:space="preserve">
          <source>Processes an incoming packet. Performs authentication and decryption as necessary. The return values should be passed to the agent.</source>
          <target state="translated">受信パケットを処理します。必要に応じて認証と復号を実行します。戻り値はエージェントに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="ed98243f088a1f790e5261686fb35da9e9e2e36b" translate="yes" xml:space="preserve">
          <source>Processes and ports added by process/port identifiers add the nodes these processes/ports reside on in the node list. More nodes can be added by clicking button &lt;strong&gt;Add Nodes&lt;/strong&gt;, or by right-clicking in the &lt;strong&gt;Nodes&lt;/strong&gt; list and select &lt;strong&gt;Add Nodes&lt;/strong&gt;. To remove nodes, select them, then right-click and choose &lt;strong&gt;Remove nodes&lt;/strong&gt;.</source>
          <target state="translated">プロセス/ポート識別子によって追加されたプロセスとポートは、これらのプロセス/ポートが常駐するノードをノードリストに追加します。[ &lt;strong&gt;ノードの追加&lt;/strong&gt; ]ボタン&lt;strong&gt;を&lt;/strong&gt;クリックするか、[ &lt;strong&gt;ノード]&lt;/strong&gt;リストを右クリックして[ &lt;strong&gt;ノードの追加&lt;/strong&gt; ] を選択すると、&lt;strong&gt;ノードを&lt;/strong&gt;さらに&lt;strong&gt;追加&lt;/strong&gt;できます。ノードを削除するには、ノードを選択し、右クリックして[ &lt;strong&gt;ノードの削除&lt;/strong&gt; ]を選択します。</target>
        </trans-unit>
        <trans-unit id="bf438e45a34ce6e54b5666dee9827f7d9908c9aa" translate="yes" xml:space="preserve">
          <source>Processes are added from the &lt;strong&gt;Applications&lt;/strong&gt; or &lt;strong&gt;Processes&lt;/strong&gt; tabs. Ports are added from the &lt;strong&gt;Ports&lt;/strong&gt; tab. A special &lt;strong&gt;new&lt;/strong&gt; identifier, meaning all processes, or ports, started after trace start, can be added with buttons &lt;strong&gt;Add 'new' Processes&lt;/strong&gt; and &lt;strong&gt;Add 'new' Ports&lt;/strong&gt;, respecively.</source>
          <target state="translated">プロセスは、「&lt;strong&gt;アプリケーション」&lt;/strong&gt;または「&lt;strong&gt;プロセス」&lt;/strong&gt;タブから追加されます。ポートは[ &lt;strong&gt;ポート&lt;/strong&gt; ]タブから追加されます。トレースの開始後に開始されたすべてのプロセスまたはポートを意味する特別な&lt;strong&gt;新しい&lt;/strong&gt;識別子は、&lt;strong&gt;「新しいプロセスの追加」&lt;/strong&gt;ボタンと&lt;strong&gt;「新しい」ポートの追加&lt;/strong&gt;ボタンでそれぞれ&lt;strong&gt;追加&lt;/strong&gt;できます。</target>
        </trans-unit>
        <trans-unit id="be549e5919a2d84debbcdab9c71aa73639ddafc7" translate="yes" xml:space="preserve">
          <source>Processes can be specified as registered names, globally registered names, or process identifiers. Ports can be specified as registered names or port identifiers. If a registered name is specified, the flags are set on processes/ports with this name on all active nodes.</source>
          <target state="translated">プロセスは、登録名、グローバル登録名、またはプロセス識別子として指定できます。ポートは、登録名またはポート識別子として指定できます。登録名が指定された場合、この名前のプロセス/ポートには、すべてのアクティブなノードでフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="c93cc0cb1c7c1cf0a914f4b84e40d8422afe1f41" translate="yes" xml:space="preserve">
          <source>Processes can monitor other processes and detect process terminations, see &lt;code&gt;&lt;a href=&quot;processes#errors&quot;&gt;Processes&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスは他のプロセスを監視し、プロセスの終了を検出できます。 &lt;code&gt;&lt;a href=&quot;processes#errors&quot;&gt;Processes&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="630a26a9de10b21d483dfee70c4d12d378a250c0" translate="yes" xml:space="preserve">
          <source>Processes communicate by sending and receiving messages. Messages are sent by using the &lt;code&gt;&lt;a href=&quot;expressions#send&quot;&gt;send operator !&lt;/a&gt;&lt;/code&gt; and received by calling &lt;code&gt;&lt;a href=&quot;expressions#receive&quot;&gt;receive&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスはメッセージを送受信することによって通信します。メッセージは、 &lt;code&gt;&lt;a href=&quot;expressions#send&quot;&gt;send operator !&lt;/a&gt;&lt;/code&gt; を使用して送信されます。そして、 &lt;code&gt;&lt;a href=&quot;expressions#receive&quot;&gt;receive&lt;/a&gt;&lt;/code&gt; を呼び出して受信します。</target>
        </trans-unit>
        <trans-unit id="d178bde37cb4db43efd1bc3bc63a9067eff3bf67" translate="yes" xml:space="preserve">
          <source>Processes in &lt;code&gt;ch_app&lt;/code&gt; for which code have not been updated, for example, the supervisor, are still evaluating code from &lt;code&gt;ch_app-1&lt;/code&gt;.</source>
          <target state="translated">コードが更新されていない &lt;code&gt;ch_app&lt;/code&gt; 内のプロセス（スーパーバイザーなど）は、まだ &lt;code&gt;ch_app-1&lt;/code&gt; からのコードを評価しています。</target>
        </trans-unit>
        <trans-unit id="033f59a44cf3d7e0ad2fb2a6c9d6d37906dc4f55" translate="yes" xml:space="preserve">
          <source>Processes sending command data to the port are suspended if either the port is busy or if the port message queue is busy. Suspended processes are resumed when neither the port or the port message queue is busy.</source>
          <target state="translated">ポートがビジー状態またはポートメッセージキューがビジー状態の場合、ポートにコマンドデータを送信するプロセスは中断されます。サスペンドされたプロセスは、ポートまたはポートメッセージキューがビジー状態でない場合に再開されます。</target>
        </trans-unit>
        <trans-unit id="7813ce8e07b59a64bbf71e0e1c1f12985cd75cf4" translate="yes" xml:space="preserve">
          <source>Processes sending command data to the port are suspended if either the port or the port message queue is busy. Suspended processes are resumed when neither the port or the port message queue is busy. Command data is in this context data passed to the port using either &lt;code&gt;Port ! {Owner, {command, Data}}&lt;/code&gt; or &lt;code&gt;port_command/[2,3]&lt;/code&gt;.</source>
          <target state="translated">ポートまたはポートメッセージキューがビジーの場合、コマンドデータをポートに送信するプロセスは一時停止されます。中断されたプロセスは、ポートまたはポートメッセージキューのどちらもビジー状態のときに再開されます。コマンドデータは、このコンテキストでは、いずれかのポートを使用してポートに渡されるデータ &lt;code&gt;Port ! {Owner, {command, Data}}&lt;/code&gt; または &lt;code&gt;port_command/[2,3]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a29be095a2ff95859b3cad24b61604a71c86c0b" translate="yes" xml:space="preserve">
          <source>Processes started with functions &lt;code&gt;proc_lib:spawn&lt;/code&gt; or &lt;code&gt;proc_lib:spawn_link&lt;/code&gt; are wrapped within a &lt;code&gt;catch&lt;/code&gt;. A crash report is issued when such a process terminates with an unexpected reason, which is any reason other than &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;shutdown&lt;/code&gt;, or &lt;code&gt;{shutdown,Term}&lt;/code&gt;. Processes using behaviors &lt;code&gt;gen_server&lt;/code&gt;, &lt;code&gt;gen_fsm&lt;/code&gt; or &lt;code&gt;gen_statem&lt;/code&gt; are examples of such processes. A crash report contains the following items:</source>
          <target state="translated">関数 &lt;code&gt;proc_lib:spawn&lt;/code&gt; または &lt;code&gt;proc_lib:spawn_link&lt;/code&gt; で開始されたプロセスは、 &lt;code&gt;catch&lt;/code&gt; 内にラップされます。クラッシュレポートは、そのようなプロセスが予期しない理由で終了したときに発行されます。これは、 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;shutdown&lt;/code&gt; 、または &lt;code&gt;{shutdown,Term}&lt;/code&gt; 以外の理由です。ビヘイビア &lt;code&gt;gen_server&lt;/code&gt; 、 &lt;code&gt;gen_fsm&lt;/code&gt; または &lt;code&gt;gen_statem&lt;/code&gt; を使用するプロセスは、そのようなプロセスの例です。クラッシュレポートには次の項目が含まれます。</target>
        </trans-unit>
        <trans-unit id="7a39a6bcdcfd7777bfaedcdb0b7cb9d27d3872a4" translate="yes" xml:space="preserve">
          <source>Processes that are not implemented as one of the standard behaviors must still understand system messages. The following three messages must be understood:</source>
          <target state="translated">標準的な動作の一つとして実装されていないプロセスでも、システムメッセージを理解しなければなりません。以下の3つのメッセージを理解しなければならない。</target>
        </trans-unit>
        <trans-unit id="58c7efb2fc2ee91313efcb0b51ba3d6222f1b4e4" translate="yes" xml:space="preserve">
          <source>Processes, ports and ets tables can then be inspecting using their respective info functions, i.e. &lt;code&gt;erlang:process_info/2&lt;/code&gt;, &lt;code&gt;erlang:port_info/2&lt;/code&gt; and &lt;code&gt;ets:info/1&lt;/code&gt;.</source>
          <target state="translated">プロセス、ポート、およびetsテーブルは、それぞれのinfo関数、つまり &lt;code&gt;erlang:process_info/2&lt;/code&gt; 、 &lt;code&gt;erlang:port_info/2&lt;/code&gt; および &lt;code&gt;ets:info/1&lt;/code&gt; を使用して検査できます。</target>
        </trans-unit>
        <trans-unit id="e6017176610426ad0695826f94e970fac5ae785f" translate="yes" xml:space="preserve">
          <source>Processing Local Requests</source>
          <target state="translated">ローカルリクエストの処理</target>
        </trans-unit>
        <trans-unit id="2f93aa73375c48e5ac1052bbdea13b31c4c62dea" translate="yes" xml:space="preserve">
          <source>Processing Received Answers</source>
          <target state="translated">受信した回答の処理</target>
        </trans-unit>
        <trans-unit id="47c0c8f7f7c694d8170efc2ece7ee9a4d20e521e" translate="yes" xml:space="preserve">
          <source>Processing options such as case-independence are fixed when a subpattern is defined, so if it is used as a subroutine, such options cannot be changed for different calls. For example, the following pattern matches &quot;abcabc&quot; but not &quot;abcABC&quot;, as the change of processing option does not affect the called subpattern:</source>
          <target state="translated">大文字小文字の区別などの処理オプションは、サブパターンが定義された時点で固定されているため、サブルーチンとして使用された場合、呼び出しのたびにオプションを変更することはできません。例えば、以下のパターンは「abcabc」と一致しますが、処理オプションの変更は呼び出されたサブパターンには影響しないため、「abcABC」とは一致しません。</target>
        </trans-unit>
        <trans-unit id="0eab01ffe9a07f631f008bdf0c75bf332d75ff92" translate="yes" xml:space="preserve">
          <source>Produces a Makefile rule to track header dependencies. The rule is sent to &lt;code&gt;stdout&lt;/code&gt;. No object file is produced.</source>
          <target state="translated">ヘッダーの依存関係を追跡するMakefileルールを生成します。ルールは &lt;code&gt;stdout&lt;/code&gt; に送信されます。オブジェクトファイルは作成されません。</target>
        </trans-unit>
        <trans-unit id="0b0b65fd07934b92a1f3f3b16fdae0415377d8f3" translate="yes" xml:space="preserve">
          <source>Produces a Makefile rule to track headers dependencies. No object file is produced.</source>
          <target state="translated">ヘッダの依存関係を追跡するための Makefile ルールを生成します。オブジェクトファイルは生成されません。</target>
        </trans-unit>
        <trans-unit id="522655e258c4e569c30e0510cdca6d0699bc8809" translate="yes" xml:space="preserve">
          <source>Produces a list of miscellaneous information. Intended for debugging. If no profile is specified, the default profile is used.</source>
          <target state="translated">雑多な情報のリストを生成します。デバッグ用です。プロファイルが指定されていない場合は、デフォルトのプロファイルが使用されます。</target>
        </trans-unit>
        <trans-unit id="17b15b2832a09a04ae3469c8eba4b0f7717aeed3" translate="yes" xml:space="preserve">
          <source>Produces a list of the entire cookie database. Intended for debugging/testing purposes. If no profile is specified, the default profile is used.</source>
          <target state="translated">クッキーデータベース全体のリストを生成します。デバッグ/テスト目的で使用することを意図しています。プロファイルが指定されていない場合は、デフォルトのプロファイルが使用されます。</target>
        </trans-unit>
        <trans-unit id="aa4a70cdd8befb25aae49184a69129ba10dc3026" translate="yes" xml:space="preserve">
          <source>Produces a listing of the assembler code in the file &lt;code&gt;&amp;lt;File&amp;gt;.S&lt;/code&gt;. No object file is produced.</source>
          <target state="translated">ファイル &lt;code&gt;&amp;lt;File&amp;gt;.S&lt;/code&gt; にアセンブラコードのリストを作成します。オブジェクトファイルは作成されません。</target>
        </trans-unit>
        <trans-unit id="14a6e3657dbd240095b72afb45cd733b01f3e525" translate="yes" xml:space="preserve">
          <source>Produces a listing of the code, after all source code transformations have been performed, in the file &lt;code&gt;&amp;lt;File&amp;gt;.E&lt;/code&gt;. No object file is produced.</source>
          <target state="translated">すべてのソースコード変換が実行された後、ファイル &lt;code&gt;&amp;lt;File&amp;gt;.E&lt;/code&gt; にコードのリストを生成します。オブジェクトファイルは作成されません。</target>
        </trans-unit>
        <trans-unit id="01e05890546d0a6ddd75cdab592794da9dd67dbc" translate="yes" xml:space="preserve">
          <source>Produces a listing of the parsed code, after preprocessing and parse transforms, in the file &lt;code&gt;&amp;lt;File&amp;gt;.P&lt;/code&gt;. No object file is produced.</source>
          <target state="translated">ファイル &lt;code&gt;&amp;lt;File&amp;gt;.P&lt;/code&gt; に、前処理と解析の変換後の解析済みコードのリストを生成します。オブジェクトファイルは作成されません。</target>
        </trans-unit>
        <trans-unit id="b42942b44b3250eb3b2271073a1658bcb5331121" translate="yes" xml:space="preserve">
          <source>Produces a new map &lt;code&gt;Map&lt;/code&gt; by calling function &lt;code&gt;fun F(K, V1)&lt;/code&gt; for every &lt;code&gt;K&lt;/code&gt; to value &lt;code&gt;V1&lt;/code&gt; association in &lt;code&gt;MapOrIter&lt;/code&gt; in any order. Function &lt;code&gt;fun F/2&lt;/code&gt; must return value &lt;code&gt;V2&lt;/code&gt; to be associated with key &lt;code&gt;K&lt;/code&gt; for the new map &lt;code&gt;Map&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MapOrIter&lt;/code&gt; のすべての &lt;code&gt;K&lt;/code&gt; から値 &lt;code&gt;V1&lt;/code&gt; への関連付けの関数 &lt;code&gt;fun F(K, V1)&lt;/code&gt; を任意の順序で呼び出して、新しいマップ &lt;code&gt;Map&lt;/code&gt; を生成します。関数 &lt;code&gt;fun F/2&lt;/code&gt; は、新しいマップ &lt;code&gt;Map&lt;/code&gt; のキー &lt;code&gt;K&lt;/code&gt; に関連付けられる値 &lt;code&gt;V2&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="734f2970d4a5791f19c5ec99de733cebe7c5db24" translate="yes" xml:space="preserve">
          <source>Produces a slightly processed dump of the session database. It is intended for debugging. If no profile is specified, the default profile is used.</source>
          <target state="translated">セッションデータベースのわずかに処理されたダンプを生成します。これはデバッグ用です。プロファイルが指定されていない場合は、デフォルトのプロファイルが使用されます。</target>
        </trans-unit>
        <trans-unit id="f3e2b5bef8d3aea29dc3d87dc03c8bd706ff3c63" translate="yes" xml:space="preserve">
          <source>Produces an Erlang binary object from a buffer containing a sequence of bytes.</source>
          <target state="translated">バイト列を含むバッファからErlangバイナリオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="28dc5d49200b0d0db7991c1bd65981ee7a79b5b9" translate="yes" xml:space="preserve">
          <source>Product identification, or similar.</source>
          <target state="translated">製品の識別、またはそれに類するもの。</target>
        </trans-unit>
        <trans-unit id="47c4b8b7bf496f53b2cc4542ca4954138de2040e" translate="yes" xml:space="preserve">
          <source>Product-Name AVP</source>
          <target state="translated">製品名 AVP</target>
        </trans-unit>
        <trans-unit id="17df105acacb67dbb629858e9cd9d8d447c45b58" translate="yes" xml:space="preserve">
          <source>Profile :: atom()) -&amp;gt;</source>
          <target state="translated">プロファイル::アトム（））-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="0026a969a9cb473a3dd25bc732d4ff9709ac80a8" translate="yes" xml:space="preserve">
          <source>Profile :: term()) -&amp;gt;</source>
          <target state="translated">プロフィール:: term（））-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="57c6e422edb8ce7e828dbfdc0ca3e7e40b6fc1e1" translate="yes" xml:space="preserve">
          <source>Profile process locks, equal to adding &lt;code&gt;process&lt;/code&gt; to the lock category mask; see &lt;code&gt;lcnt:rt_mask/2&lt;/code&gt;</source>
          <target state="translated">プロファイルプロセスロック。 &lt;code&gt;process&lt;/code&gt; をロックカテゴリマスクに追加することと同じです。 &lt;code&gt;lcnt:rt_mask/2&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="f72795f752c26fa8b5758727320096204ecec91e" translate="yes" xml:space="preserve">
          <source>Profiling is done in the following steps:</source>
          <target state="translated">プロファイリングは以下の手順で行います。</target>
        </trans-unit>
        <trans-unit id="630e9fa5225f76b674631196640d8884476f77f0" translate="yes" xml:space="preserve">
          <source>Profiling is essentially done in 3 steps:</source>
          <target state="translated">プロファイリングは基本的に3つのステップで行われます。</target>
        </trans-unit>
        <trans-unit id="129873d7917621f62579cca8da507adfd58f5037" translate="yes" xml:space="preserve">
          <source>Profiling; the trace file is read and raw profile data is collected into an internal RAM storage on the node. During this step the trace data may be dumped in text format to file or console.</source>
          <target state="translated">プロファイリング:トレースファイルが読み込まれ、生のプロファイルデータがノード上の内部RAMストレージに収集されます。このステップでは、トレースデータはテキスト形式でファイルまたはコンソールにダンプされます。</target>
        </trans-unit>
        <trans-unit id="864662422fc6799b55caf37fed8419aea855ecf3" translate="yes" xml:space="preserve">
          <source>Profiling; the trace file is read, the execution call stack is simulated, and raw profile data is calculated from the simulated call stack and the trace timestamps. The profile data is stored in the &lt;code&gt;fprof&lt;/code&gt; server state. During this step the trace data may be dumped in text format to file or console.</source>
          <target state="translated">プロファイリング; トレースファイルが読み取られ、実行呼び出しスタックがシミュレートされ、シミュレートされた呼び出しスタックとトレースタイムスタンプから生のプロファイルデータが計算されます。プロファイルデータは、 &lt;code&gt;fprof&lt;/code&gt; サーバー状態で保存されます。このステップ中に、トレースデータがテキスト形式でファイルまたはコンソールにダンプされます。</target>
        </trans-unit>
        <trans-unit id="be14140f572829d13e013899b88b1a29c94a894b" translate="yes" xml:space="preserve">
          <source>Program used for starting Common Test from the OS command line.</source>
          <target state="translated">OSのコマンドラインから共通テストを起動するためのプログラムです。</target>
        </trans-unit>
        <trans-unit id="04fc4ca4a8116882232b1856689a04eb18a1fd86" translate="yes" xml:space="preserve">
          <source>Programmers are strongly advised not to engage in parse transformations. No support is offered for problems encountered.</source>
          <target state="translated">プログラマは、パース変換を行わないことを強くお勧めします。問題が発生した場合のサポートは提供されません。</target>
        </trans-unit>
        <trans-unit id="cd20cc773cac79796c578e4d9775b5144b70f227" translate="yes" xml:space="preserve">
          <source>Programming Erlang: Software for a Concurrent World (2007), Pragmatic Bookshelf, ISBN13: 9781934356005.</source>
          <target state="translated">プログラミングErlang.並行世界のためのソフトウェア (2007),Pragmatic Bookshelf,ISBN13:9781934356005.</target>
        </trans-unit>
        <trans-unit id="04bef1b7e7ac277d38fb7b2086faa2a0ce21e478" translate="yes" xml:space="preserve">
          <source>Programming Erlang: Software for a Concurrent World by Joe Armstrong; ISBN: 978-1-93435-600-5</source>
          <target state="translated">プログラミング Erlang.並行世界のためのソフトウェア Joe Armstrong著;ISBN:978-1-93435-600-5</target>
        </trans-unit>
        <trans-unit id="4fff5c0832402c080338f74960f55c82c6dba845" translate="yes" xml:space="preserve">
          <source>Programming concurrent Erlang systems is the subject of a separate book. However, it is worthwhile to draw attention to the following features, which permit concurrent processes to exist in a &lt;code&gt;Mnesia&lt;/code&gt; system:</source>
          <target state="translated">並行Erlangシステムのプログラミングは、別の本の主題です。ただし、 &lt;code&gt;Mnesia&lt;/code&gt; システムに同時プロセスが存在できるようにする次の機能に注意を払うことは価値があります。</target>
        </trans-unit>
        <trans-unit id="f766991f1e78a66d69e7e9b58e7feee18bce8c08" translate="yes" xml:space="preserve">
          <source>Programs should always operate on a normalized form and compare canonical-equivalent Unicode characters as equal. All characters should thus be normalized to one form once on the system borders. One of the following functions can convert characters to their normalized forms &lt;code&gt;&lt;a href=&quot;#characters_to_nfc_list-1&quot;&gt;characters_to_nfc_list/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#characters_to_nfc_binary-1&quot;&gt;characters_to_nfc_binary/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#characters_to_nfd_list-1&quot;&gt;characters_to_nfd_list/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#characters_to_nfd_binary-1&quot;&gt;characters_to_nfd_binary/1&lt;/a&gt;&lt;/code&gt;. For general text &lt;code&gt;&lt;a href=&quot;#characters_to_nfc_list-1&quot;&gt;characters_to_nfc_list/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#characters_to_nfc_binary-1&quot;&gt;characters_to_nfc_binary/1&lt;/a&gt;&lt;/code&gt; is preferred, and for identifiers one of the compatibility normalization functions, such as &lt;code&gt;&lt;a href=&quot;#characters_to_nfkc_list-1&quot;&gt;characters_to_nfkc_list/1&lt;/a&gt;&lt;/code&gt;, is preferred for security reasons. The normalization functions where introduced in OTP 20. Additional information on normalization can be found in the &lt;code&gt;&lt;a href=&quot;http://unicode.org/faq/normalization.html&quot;&gt;Unicode FAQ&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プログラムは常に正規化された形式で動作し、正規に等しいUnicode文字を等しいと比較する必要があります。したがって、すべての文字は、システムの境界で一度1つのフォームに正規化する必要があります。次の関数のいずれかは、文字を正規化された形式 &lt;code&gt;&lt;a href=&quot;#characters_to_nfc_list-1&quot;&gt;characters_to_nfc_list/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#characters_to_nfc_binary-1&quot;&gt;characters_to_nfc_binary/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#characters_to_nfd_list-1&quot;&gt;characters_to_nfd_list/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#characters_to_nfd_binary-1&quot;&gt;characters_to_nfd_binary/1&lt;/a&gt;&lt;/code&gt; に変換できます。一般的なテキストの場合は、 &lt;code&gt;&lt;a href=&quot;#characters_to_nfc_list-1&quot;&gt;characters_to_nfc_list/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#characters_to_nfc_binary-1&quot;&gt;characters_to_nfc_binary/1&lt;/a&gt;&lt;/code&gt; が推奨され、識別子の場合は、 &lt;code&gt;&lt;a href=&quot;#characters_to_nfkc_list-1&quot;&gt;characters_to_nfkc_list/1&lt;/a&gt;&lt;/code&gt; などの互換性正規化関数の1つ、セキュリティ上の理由から推奨されます。OTP 20で導入された正規化関数。正規化に関する追加情報は、 &lt;code&gt;&lt;a href=&quot;http://unicode.org/faq/normalization.html&quot;&gt;Unicode FAQ&lt;/a&gt;&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="fc562a9bcac4fb874aa74077af2a891fe251b3ed" translate="yes" xml:space="preserve">
          <source>Programs that process plain text or binary data files.</source>
          <target state="translated">プレーンテキストやバイナリデータファイルを処理するプログラム。</target>
        </trans-unit>
        <trans-unit id="7c71281f9dbe691f92bb15faa53cb0c49a91d43a" translate="yes" xml:space="preserve">
          <source>Progress = &lt;code&gt;ignore | {CBModule, CBFunction, InitProgress}&lt;/code&gt;</source>
          <target state="translated">進行状況= &lt;code&gt;ignore | {CBModule, CBFunction, InitProgress}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="519ffd1265424ff9151c74fa5631e9848160fa7a" translate="yes" xml:space="preserve">
          <source>Progress report</source>
          <target state="translated">進捗報告</target>
        </trans-unit>
        <trans-unit id="a3f10a152d854770b6ab1de6f50d8a4da946dbb4" translate="yes" xml:space="preserve">
          <source>Progress reports are issued as &lt;code&gt;info&lt;/code&gt; level log events, and since the default primary log level is &lt;code&gt;notice&lt;/code&gt;, these are not logged by default. To enable printing of progress reports, set the &lt;code&gt;&lt;a href=&quot;#primary_level&quot;&gt;primary log level&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;info&lt;/code&gt;.</source>
          <target state="translated">進捗レポートは、 &lt;code&gt;info&lt;/code&gt; レベルのログイベントとして発行されます。デフォルトのプライマリログレベルは &lt;code&gt;notice&lt;/code&gt; であるため、デフォルトではログに記録されません。進捗レポートの印刷を有効にするには、 &lt;code&gt;&lt;a href=&quot;#primary_level&quot;&gt;primary log level&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;info&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="2feeef99e0f2d9657de9874ba0e75f9b066346ff" translate="yes" xml:space="preserve">
          <source>Propagate the same error signal to the links of the killed process.</source>
          <target state="translated">同じエラー信号を、殺されたプロセスのリンクに伝搬させます。</target>
        </trans-unit>
        <trans-unit id="5eb34826139e0a6c504423934bde097d38a8e5ac" translate="yes" xml:space="preserve">
          <source>Properties are not inherited from top-level groups to nested subgroups. For instance, in the previous example, the test cases in &lt;code&gt;group2&lt;/code&gt; are not executed in random order (which is the property of &lt;code&gt;group1&lt;/code&gt;).</source>
          <target state="translated">プロパティはトップレベルグループからネストされたサブグループに継承されません。たとえば、前の例では、 &lt;code&gt;group2&lt;/code&gt; のテストケースはランダムな順序で実行されません（これは &lt;code&gt;group1&lt;/code&gt; のプロパティです）。</target>
        </trans-unit>
        <trans-unit id="cf72435a6a8dfe264c2d8cbb64919ecfbaeba5bb" translate="yes" xml:space="preserve">
          <source>Property lists are ordinary lists containing entries in the form of either tuples, whose first elements are keys used for lookup and insertion, or atoms, which work as shorthand for tuples &lt;code&gt;{Atom, true}&lt;/code&gt;. (Other terms are allowed in the lists, but are ignored by this module.) If there is more than one entry in a list for a certain key, the first occurrence normally overrides any later (irrespective of the arity of the tuples).</source>
          <target state="translated">プロパティリストは、最初の要素がルックアップと挿入に使用されるキーであるタプル、またはアプルの形式のエントリを含む通常のリストです。 &lt;code&gt;{Atom, true}&lt;/code&gt; タプル{Atom、true}の短縮形として機能します。（他の用語はリストで許可されていますが、このモジュールでは無視されます。）特定のキーのリストに複数のエントリがある場合、最初に出現したものが通常は後からオーバーライドされます（タプルのアリティに関係なく）。</target>
        </trans-unit>
        <trans-unit id="8f3a63f6f6853f3776df6fd40f512c3bc2423c62" translate="yes" xml:space="preserve">
          <source>Property lists are useful for representing inherited properties, such as options passed to a function where a user can specify options overriding the default settings, object properties, annotations, and so on.</source>
          <target state="translated">プロパティリストは、ユーザーがデフォルト設定を上書きするオプションを指定できる関数に渡されたオプションや、オブジェクトのプロパティ、アノテーションなど、継承されたプロパティを表現するのに便利です。</target>
        </trans-unit>
        <trans-unit id="69ef40d1cd2975594eba3c5b03a443daf8151c13" translate="yes" xml:space="preserve">
          <source>Protocol Errors</source>
          <target state="translated">プロトコルエラー</target>
        </trans-unit>
        <trans-unit id="1b0a81e8f360216134418545602ccf414662dde9" translate="yes" xml:space="preserve">
          <source>Protocol Messages</source>
          <target state="translated">プロトコルメッセージ</target>
        </trans-unit>
        <trans-unit id="2e1b345b4778495a0a85f0806404f2ef32e5c47c" translate="yes" xml:space="preserve">
          <source>Protocol Overview</source>
          <target state="translated">プロトコルの概要</target>
        </trans-unit>
        <trans-unit id="c07efc54af15e46ede9045b5a09cbf868ae19105" translate="yes" xml:space="preserve">
          <source>Prototypes for the driver callback routines can be found in the &lt;code&gt;erl_driver.h&lt;/code&gt; header file.</source>
          <target state="translated">ドライバーコールバックルーチンのプロトタイプは、 &lt;code&gt;erl_driver.h&lt;/code&gt; ヘッダーファイルにあります。</target>
        </trans-unit>
        <trans-unit id="f653b51c616d14c355967d6de899534adb195231" translate="yes" xml:space="preserve">
          <source>Prototyping</source>
          <target state="translated">Prototyping</target>
        </trans-unit>
        <trans-unit id="1f374df4d309c019bc6178248783e9390656a10a" translate="yes" xml:space="preserve">
          <source>Provide a fun to implement your own logging of the SSH message SSH_MSG_DEBUG. The last three parameters are from the message, see &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc4253#section-11.3&quot;&gt;RFC 4253, section 11.3&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;#type-connection_ref&quot;&gt;connection_ref()&lt;/a&gt;&lt;/code&gt; is the reference to the connection on which the message arrived. The return value from the fun is not checked.</source>
          <target state="translated">SSHメッセージSSH_MSG_DEBUGの独自のロギングを実装する楽しみを提供します。最後の3つのパラメーターはメッセージからのものです &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc4253#section-11.3&quot;&gt;RFC 4253, section 11.3&lt;/a&gt;&lt;/code&gt; 参照してください。 &lt;code&gt;&lt;a href=&quot;#type-connection_ref&quot;&gt;connection_ref()&lt;/a&gt;&lt;/code&gt; は、メッセージが到着した接続への参照です。funからの戻り値はチェックされません。</target>
        </trans-unit>
        <trans-unit id="08a2504f6114a9c36ec403b96c7c302a482e126f" translate="yes" xml:space="preserve">
          <source>Provide default headers for the HTTP servers responses. Note that this option may override built-in defaults.</source>
          <target state="translated">HTTP サーバのレスポンスにデフォルトのヘッダを提供します。このオプションは組み込みのデフォルトを上書きする可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2bca3403285a45fca5f582216c20e2b31fefe923" translate="yes" xml:space="preserve">
          <source>Provide some simple support for sequential tracing.</source>
          <target state="translated">シーケンシャルトレースのための簡単なサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="410239829c19fb6bb8f95e6437ab94a49a5db9bc" translate="yes" xml:space="preserve">
          <source>Provides a decryption key for &lt;code&gt;&lt;a href=&quot;config_file_chapter#encrypted_config_files&quot;&gt;encrypted configuration files&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;config_file_chapter#encrypted_config_files&quot;&gt;encrypted configuration files&lt;/a&gt;&lt;/code&gt; 復号化キーを提供します。</target>
        </trans-unit>
        <trans-unit id="903b44886dfe622745223d5547c0cc9c2859f2f6" translate="yes" xml:space="preserve">
          <source>Provides a fun to implement your own logging or other action when an unexpected message arrives. If the fun returns &lt;code&gt;report&lt;/code&gt; the usual info report is issued but if &lt;code&gt;skip&lt;/code&gt; is returned no report is generated.</source>
          <target state="translated">予期しないメッセージが到着したときに、独自のロギングやその他のアクションを実装する楽しみを提供します。funが &lt;code&gt;report&lt;/code&gt; 返す場合、通常の情報レポートが発行されますが、 &lt;code&gt;skip&lt;/code&gt; が返される場合、レポートは生成されません。</target>
        </trans-unit>
        <trans-unit id="a8122202de6a4acb088d775f3973da908d4fecce" translate="yes" xml:space="preserve">
          <source>Provides a fun to implement your own logging when a user authenticates to the server.</source>
          <target state="translated">ユーザーがサーバーに認証したときに、独自のログを実装する楽しみを提供します。</target>
        </trans-unit>
        <trans-unit id="6ae014fb7ce0d00946111ea1f6afbd515ba680d3" translate="yes" xml:space="preserve">
          <source>Provides a fun to implement your own logging when a user fails to authenticate.</source>
          <target state="translated">ユーザーの認証に失敗した場合に、独自のログを実装する楽しみを提供します。</target>
        </trans-unit>
        <trans-unit id="693b50c9238225aebe1905f9a4bbeddbe802666a" translate="yes" xml:space="preserve">
          <source>Provides a fun to implement your own logging when the peer disconnects.</source>
          <target state="translated">ピアが切断されたときに独自のロギングを実装する楽しみを提供します。</target>
        </trans-unit>
        <trans-unit id="2622540d75e1ce825909c4c27dcf1a5e81b022b9" translate="yes" xml:space="preserve">
          <source>Provides a function for password validation. This could used for calling an external system or handeling passwords stored as hash values.</source>
          <target state="translated">パスワード検証のための関数を提供します。これは、外部システムを呼び出したり、ハッシュ値として保存されたパスワードをハンドリングするために使用されます。</target>
        </trans-unit>
        <trans-unit id="b02519300dbb28165f9b31d399e480b06aff4a3e" translate="yes" xml:space="preserve">
          <source>Provides a function for password validation. This function is called with user and password as strings, and returns:</source>
          <target state="translated">パスワード検証のための関数を提供します。この関数は、ユーザーとパスワードを文字列にして呼び出され、返されます。</target>
        </trans-unit>
        <trans-unit id="6aa5ff7905134531fc9760a2816fc0228545f5bd" translate="yes" xml:space="preserve">
          <source>Provides a function for tab-completion (expansion) like the Erlang shell. This function is called when the user presses the &lt;strong&gt;Tab&lt;/strong&gt; key. The expansion is active when calling line-reading functions, such as &lt;code&gt;&lt;a href=&quot;#get_line-1&quot;&gt;get_line/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangシェルのようなタブ補完（拡張）の機能を提供します。この関数は、ユーザーが&lt;strong&gt;Tab&lt;/strong&gt;キーを押すと呼び出されます。 &lt;code&gt;&lt;a href=&quot;#get_line-1&quot;&gt;get_line/1,2&lt;/a&gt;&lt;/code&gt; などの行読み取り関数を呼び出すと、展開がアクティブになります。</target>
        </trans-unit>
        <trans-unit id="0126483ea757d9c456fac59884fa78b1895b0c1d" translate="yes" xml:space="preserve">
          <source>Provides a global password that authenticates any user.</source>
          <target state="translated">任意のユーザーを認証するグローバルパスワードを提供します。</target>
        </trans-unit>
        <trans-unit id="bcf2a440040f1adc832c9af437538a1274c09fbb" translate="yes" xml:space="preserve">
          <source>Provides a list of the scheme and their default port numbers supported (by default) by this utility.</source>
          <target state="translated">このユーティリティでサポートされているスキームとそのデフォルトのポート番号のリストを提供します(デフォルトでは)。</target>
        </trans-unit>
        <trans-unit id="882538ba1337b4bc7c8a6a34a8a92a54495af42b" translate="yes" xml:space="preserve">
          <source>Provides a name for the NIF that is scheduled for execution. If it cannot be converted to an atom, &lt;code&gt;enif_schedule_nif&lt;/code&gt; returns a &lt;code&gt;badarg&lt;/code&gt; exception.</source>
          <target state="translated">実行がスケジュールされているNIFの名前を提供します。アトムに変換できない場合、 &lt;code&gt;enif_schedule_nif&lt;/code&gt; は &lt;code&gt;badarg&lt;/code&gt; 例外を返します。</target>
        </trans-unit>
        <trans-unit id="9a7fa191207bdbdcf1355b3abd90f2d61475ca15" translate="yes" xml:space="preserve">
          <source>Provides a password for password authentication. If this option is not given, the user is asked for a password, if the password authentication method is attempted.</source>
          <target state="translated">パスワード認証のためのパスワードを提供します。このオプションが指定されていない場合、パスワード認証方法が試みられた場合、ユーザはパスワードの入力を求められます。</target>
        </trans-unit>
        <trans-unit id="2e6245a80cc81adaed06ea9939826c09d6c8984a" translate="yes" xml:space="preserve">
          <source>Provides a way of filtering log events based on a &lt;code&gt;domain&lt;/code&gt; field in &lt;code&gt;Metadata&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Metadata&lt;/code&gt; の &lt;code&gt;domain&lt;/code&gt; フィールドに基づいてログイベントをフィルタリングする方法を提供します。</target>
        </trans-unit>
        <trans-unit id="955f63ea342c9ccdf55e0b9ef1640dd09419b809" translate="yes" xml:space="preserve">
          <source>Provides a way of filtering log events based on the log level.</source>
          <target state="translated">ログレベルに基づいてログイベントをフィルタリングする方法を提供します。</target>
        </trans-unit>
        <trans-unit id="917a3a6ad732d2f5671eafaeed7176e9ef18f549" translate="yes" xml:space="preserve">
          <source>Provides access to the registry on Windows.</source>
          <target state="translated">Windows のレジストリへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="05ac5290f4045fe43f63e391afe9724d565253dd" translate="yes" xml:space="preserve">
          <source>Provides an Erlang interface to communicate with relational SQL-databases. It is built on top of Microsofts ODBC interface and therefore requires that you have an ODBC driver to the database that you want to connect to. The Erlang ODBC application is designed using the version 3.0 of the ODBC-standard, however using the option &lt;code&gt;{scrollable_cursors, off}&lt;/code&gt; for a connection has been known to make it work for at least some 2.X drivers.</source>
          <target state="translated">リレーショナルSQLデータベースと通信するためのErlangインターフェースを提供します。MicrosoftのODBCインターフェイスの上に構築されているため、接続するデータベースへのODBCドライバーが必要です。Erlang ODBCアプリケーションは、ODBC標準のバージョン3.0を使用して設計されていますが、接続にオプション &lt;code&gt;{scrollable_cursors, off}&lt;/code&gt; を使用すると、少なくとも一部の2.Xドライバーで機能することが知られています。</target>
        </trans-unit>
        <trans-unit id="f79e1bbf3ee82741dfe60b12a6243392fa5cd563" translate="yes" xml:space="preserve">
          <source>Provides base64 encode and decode, see &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc2045.txt&quot;&gt;RFC 2045&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">base64エンコードおよびデコードを提供します。 &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc2045.txt&quot;&gt;RFC 2045&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e9af3af74f64719e08406feffc5d04267f3391b" translate="yes" xml:space="preserve">
          <source>Provides base64 encode and decode, see RFC 2045.</source>
          <target state="translated">RFC 2045 を参照してください。</target>
        </trans-unit>
        <trans-unit id="0767fcb9cf2d27bebf009a5c390e3880f87527f9" translate="yes" xml:space="preserve">
          <source>Provides extended diagnostics, use &lt;code&gt;&lt;a href=&quot;#error_string-1&quot;&gt;error_string/1.&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">拡張診断を提供し、使用 &lt;code&gt;&lt;a href=&quot;#error_string-1&quot;&gt;error_string/1.&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e583caf4df904713adcce17bae909ffac9b6bbf8" translate="yes" xml:space="preserve">
          <source>Provides functions to handle public-key infrastructure, for details see &lt;code&gt;public_key(6)&lt;/code&gt;.</source>
          <target state="translated">詳細については、公開鍵インフラストラクチャを処理する関数を提供します。 &lt;code&gt;public_key(6)&lt;/code&gt; 。 public_key（6）。</target>
        </trans-unit>
        <trans-unit id="9b490ba126a125b5dbe6b1345ee3fd68b833fe2f" translate="yes" xml:space="preserve">
          <source>Provides information about the FIPS operating status of crypto and the underlying OpenSSL library. If crypto was built with FIPS support this can be either &lt;code&gt;enabled&lt;/code&gt; (when running in FIPS mode) or &lt;code&gt;not_enabled&lt;/code&gt;. For other builds this value is always &lt;code&gt;not_supported&lt;/code&gt;.</source>
          <target state="translated">暗号および基礎となるOpenSSLライブラリのFIPS動作ステータスに関する情報を提供します。暗号がFIPSサポートで構築されている場合、これは &lt;code&gt;enabled&lt;/code&gt; （FIPSモードで実行している場合）または &lt;code&gt;not_enabled&lt;/code&gt; 。他のビルドでは、この値は常に &lt;code&gt;not_supported&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8e528ef223145dad4b73216f63054349090dcd33" translate="yes" xml:space="preserve">
          <source>Provides more control than the &lt;code&gt;load/2&lt;/code&gt;/&lt;code&gt;reload/2&lt;/code&gt; and &lt;code&gt;load_driver/2&lt;/code&gt;/&lt;code&gt;reload_driver/2&lt;/code&gt; interfaces. It never waits for completion of other operations related to the driver, but immediately returns the status of the driver as one of the following:</source>
          <target state="translated">&lt;code&gt;load/2&lt;/code&gt; / &lt;code&gt;reload/2&lt;/code&gt; および &lt;code&gt;load_driver/2&lt;/code&gt; / よりも多くの制御を提供します &lt;code&gt;reload_driver/2&lt;/code&gt; インターフェースます。ドライバーに関連する他の操作の完了を待つことはありませんが、ドライバーのステータスを次のいずれかとして即座に返します。</target>
        </trans-unit>
        <trans-unit id="15c9038fc5b1524a7c052b7a20860ee70d660228" translate="yes" xml:space="preserve">
          <source>Provides passwords for password authentication. The passwords are used when someone tries to connect to the server and public key user-authentication fails. The option provides a list of valid usernames and the corresponding passwords.</source>
          <target state="translated">パスワード認証用のパスワードを提供します。パスワードは、誰かがサーバに接続しようとしたときに公開鍵認証に失敗したときに使用されます。このオプションは、有効なユーザ名とそれに対応するパスワードのリストを提供します。</target>
        </trans-unit>
        <trans-unit id="b074a4910398fb49d04cfd408836de827bf0e394" translate="yes" xml:space="preserve">
          <source>Provides the flag &lt;code&gt;-boot&lt;/code&gt; specifying the boot file of the release version found (&lt;code&gt;&quot;releases/FIRST/start.boot&quot;&lt;/code&gt;).</source>
          <target state="translated">見つかったリリースバージョンのブートファイルを指定するフラグ &lt;code&gt;-boot&lt;/code&gt; を提供します（ &lt;code&gt;&quot;releases/FIRST/start.boot&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a72441e1164e80082373bf66638549573dc043ff" translate="yes" xml:space="preserve">
          <source>Provides the name and version of the libraries used by crypto.</source>
          <target state="translated">cryptoで使用されるライブラリの名前とバージョンを提供します。</target>
        </trans-unit>
        <trans-unit id="77276a6c8bb030519317824295c69e75a13fdde9" translate="yes" xml:space="preserve">
          <source>Provides the username. If this option is not given, &lt;code&gt;ssh&lt;/code&gt; reads from the environment (&lt;code&gt;LOGNAME&lt;/code&gt; or &lt;code&gt;USER&lt;/code&gt; on UNIX, &lt;code&gt;USERNAME&lt;/code&gt; on Windows).</source>
          <target state="translated">ユーザー名を提供します。このオプションが指定されていない場合、 &lt;code&gt;ssh&lt;/code&gt; は環境（UNIXでは &lt;code&gt;LOGNAME&lt;/code&gt; または &lt;code&gt;USER&lt;/code&gt; 、 &lt;code&gt;USERNAME&lt;/code&gt; 、Windows USERNAME）。</target>
        </trans-unit>
        <trans-unit id="b09826e2df02ed043b8710bf898e2179004a2680" translate="yes" xml:space="preserve">
          <source>Provides your own CLI implementation in a daemon.</source>
          <target state="translated">デーモンで独自のCLI実装を提供します。</target>
        </trans-unit>
        <trans-unit id="6337706f6e77732d06ad836d88d60b82dd945341" translate="yes" xml:space="preserve">
          <source>Proxy Agents</source>
          <target state="translated">代理店</target>
        </trans-unit>
        <trans-unit id="a7d3fe08253cdc3ad07d2f5dabfe674d1aa52bd9" translate="yes" xml:space="preserve">
          <source>Proxy-Host AVP</source>
          <target state="translated">プロキシホスト AVP</target>
        </trans-unit>
        <trans-unit id="aaa9a1afcf35a6a510bb9543bf0d6f52952fb297" translate="yes" xml:space="preserve">
          <source>Proxy-Info AVP</source>
          <target state="translated">プロキシインフォAVP</target>
        </trans-unit>
        <trans-unit id="64812682c3ee84678a9b41d9cc2b26f19b76cc5c" translate="yes" xml:space="preserve">
          <source>Proxy-State AVP</source>
          <target state="translated">プロキシステートAVP</target>
        </trans-unit>
        <trans-unit id="40db0b3883f06edc9792ae47fe2fd8fc1148af25" translate="yes" xml:space="preserve">
          <source>Psalter_Pahlavi</source>
          <target state="translated">Psalter_Pahlavi</target>
        </trans-unit>
        <trans-unit id="d0fdfc27d15a90f7600623009abb8fe006b3ef96" translate="yes" xml:space="preserve">
          <source>Pseudo function that by a &lt;code&gt;parse_transform&lt;/code&gt; translates &lt;code&gt;LiteralFun&lt;/code&gt; typed as parameter in the function call to a &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt;. With &quot;literal&quot; is meant that the fun must textually be written as the parameter of the function, it cannot be held in a variable that in turn is passed to the function.</source>
          <target state="translated">であること、擬似機能 &lt;code&gt;parse_transform&lt;/code&gt; が翻訳 &lt;code&gt;LiteralFun&lt;/code&gt; がへの関数呼び出しのパラメータとして入力された &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; 。「リテラル」とは、funが関数のパラメーターとしてテキストで記述されなければならないことを意味し、関数に渡される変数に保持することはできません。</target>
        </trans-unit>
        <trans-unit id="b76821618a6e81543a9111bbe440dd93c8037696" translate="yes" xml:space="preserve">
          <source>Pseudo function that by means of a &lt;code&gt;parse_transform&lt;/code&gt; translates the &lt;strong&gt;literal&lt;/strong&gt;&lt;code&gt;fun()&lt;/code&gt; typed as parameter in the function call to a match specification as described in the &lt;code&gt;match_spec&lt;/code&gt; manual of ERTS users guide. (with literal I mean that the &lt;code&gt;fun()&lt;/code&gt; needs to textually be written as the parameter of the function, it cannot be held in a variable which in turn is passed to the function).</source>
          <target state="translated">こと擬似機能 &lt;code&gt;parse_transform&lt;/code&gt; 変換&lt;strong&gt;リテラル&lt;/strong&gt; &lt;code&gt;fun()&lt;/code&gt; に記載されるようにマッチ仕様に関数呼び出しのパラメータとして入力 &lt;code&gt;match_spec&lt;/code&gt; ERTSユーザガイドの説明書。（文字通り、つまり &lt;code&gt;fun()&lt;/code&gt; が関数のパラメーターとしてテキストで記述される必要があるます。それは、関数に渡される変数に保持することはできません）。</target>
        </trans-unit>
        <trans-unit id="ad66a675910e9dc1b80a46c98524572b8db0801a" translate="yes" xml:space="preserve">
          <source>Pseudo random number generation.</source>
          <target state="translated">疑似乱数生成。</target>
        </trans-unit>
        <trans-unit id="3d62ca4c64f68f59f57794d1a577fae252d0de3d" translate="yes" xml:space="preserve">
          <source>Pseudo-random number generation.</source>
          <target state="translated">擬似乱数の生成。</target>
        </trans-unit>
        <trans-unit id="c98572a8cdc44f29acd6d9bafcc787680c0311e9" translate="yes" xml:space="preserve">
          <source>Public-key data (keys, certificates, and so on) can be stored in Privacy Enhanced Mail (PEM) format. The PEM files have the following structure:</source>
          <target state="translated">公開鍵データ(鍵、証明書など)は、PEM(Privacy Enhanced Mail)形式で保存することができます。PEMファイルは以下のような構造になっています。</target>
        </trans-unit>
        <trans-unit id="af9d874c62240cf5f3756c1a09f53a1acbbe30fb" translate="yes" xml:space="preserve">
          <source>Public-key decryption using the private key. See also &lt;code&gt;crypto:private_decrypt/4&lt;/code&gt;</source>
          <target state="translated">秘密鍵を使用した公開鍵の復号化。こちらもご覧ください &lt;code&gt;crypto:private_decrypt/4&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d0b4eff2289312e196864ad9ede672c54ac16fd" translate="yes" xml:space="preserve">
          <source>Public-key decryption using the public key. See also &lt;code&gt;crypto:public_decrypt/4&lt;/code&gt;</source>
          <target state="translated">公開鍵を使用した公開鍵の復号化。こちらもご覧ください &lt;code&gt;crypto:public_decrypt/4&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c9a6fa031fc4d41c5bb997e94e3205b5bde379c" translate="yes" xml:space="preserve">
          <source>Public-key encryption using the private key. See also &lt;code&gt;crypto:private_encrypt/4&lt;/code&gt;.</source>
          <target state="translated">秘密鍵を使用した公開鍵暗号化。 &lt;code&gt;crypto:private_encrypt/4&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="b474ab2cacf9c0bf60c2569f1a89c4cf597b125c" translate="yes" xml:space="preserve">
          <source>Public-key encryption using the public key. See also &lt;code&gt;crypto:public_encrypt/4&lt;/code&gt;.</source>
          <target state="translated">公開鍵を使用した公開鍵暗号化。 &lt;code&gt;crypto:public_encrypt/4&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="68fc7bd4bc44e3818645b5f17ee1089ffb95b680" translate="yes" xml:space="preserve">
          <source>Punctuation</source>
          <target state="translated">Punctuation</target>
        </trans-unit>
        <trans-unit id="9a2f2d19b27f34b47025e9233d9cd866b4bd3b4e" translate="yes" xml:space="preserve">
          <source>Punctuation character</source>
          <target state="translated">句読点文字</target>
        </trans-unit>
        <trans-unit id="82792519d207c87b83fb05059a79c1df3520b2eb" translate="yes" xml:space="preserve">
          <source>Punctuation characters</source>
          <target state="translated">句読点文字</target>
        </trans-unit>
        <trans-unit id="0438651b1551394f1e2bbfd8ad53fbbf577875d4" translate="yes" xml:space="preserve">
          <source>Punctuation space</source>
          <target state="translated">句読点スペース</target>
        </trans-unit>
        <trans-unit id="f4845e6e07d3e7c50eaf916600cc5ee92c07d965" translate="yes" xml:space="preserve">
          <source>Purges and loads, or reloads, a module by calling &lt;code&gt;code:purge(Module)&lt;/code&gt; followed by &lt;code&gt;code:load_file(Module)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;code:purge(Module)&lt;/code&gt; に続けて &lt;code&gt;code:load_file(Module)&lt;/code&gt; を呼び出すことにより、モジュールをパージおよびロードまたは再ロードします。</target>
        </trans-unit>
        <trans-unit id="2a530eeffee5c0860d74ab29d23d89f4632d5774" translate="yes" xml:space="preserve">
          <source>Purges each module &lt;code&gt;Mod&lt;/code&gt;, that is, removes the old code. Notice that any process executing purged code is killed.</source>
          <target state="translated">各モジュール &lt;code&gt;Mod&lt;/code&gt; をパージしますます。つまり、古いコードを削除します。パージされたコードを実行するプロセスはすべて強制終了されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3fdb75c711668c4160644fd3a6e8e5aebaaf8245" translate="yes" xml:space="preserve">
          <source>Purges the code for &lt;code&gt;Module&lt;/code&gt;, that is, removes code marked as old, but only if no processes linger in it.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; のコードを削除します削除します。つまり、古いとマークされたコードを削除しますが、その中にプロセスが残っていない場合のみです。</target>
        </trans-unit>
        <trans-unit id="3d8198c900f27b7b2a03e448756c517424e92bed" translate="yes" xml:space="preserve">
          <source>Purges the code for &lt;code&gt;Module&lt;/code&gt;, that is, removes code marked as old. If some processes still linger in the old code, these processes are killed before the code is removed.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; のコードを削除します削除します。つまり、古いとマークされたコードを削除します。一部のプロセスが古いコードに残っている場合、これらのプロセスはコードが削除される前に強制終了されます。</target>
        </trans-unit>
        <trans-unit id="4cdaf8c1d6cdda09ba5cdf41daf294b6c9ed7786" translate="yes" xml:space="preserve">
          <source>Purists may argue that this should be modelled with a separate state machine that sends pre-processed events to the main state machine, but to decrease overhead the small pre-processing state machine can be implemented in the common state event handling of the main state machine using a few state data variables that then sends the pre-processed events as internal events to the main state machine. Using internal events also can make it easier to synchronize the state machines.</source>
          <target state="translated">しかし、オーバーヘッドを減らすために、小さな前処理ステートマシンは、少数のステートデータ変数を使用してメインステートマシンの共通ステートイベント処理の中に実装することができます。また、内部イベントを使用することで、ステートマシンの同期を容易にすることができます。</target>
        </trans-unit>
        <trans-unit id="10c01ec6868afc102597a3ed42373e9470221d26" translate="yes" xml:space="preserve">
          <source>Pushing back characters gives you unexpected possibilities to cause the scanner to loop!</source>
          <target state="translated">キャラクターを押し返すことで、スキャナーがループするという意外な可能性を秘めています!</target>
        </trans-unit>
        <trans-unit id="4fe937319833d21c895af7373098e512f06998b1" translate="yes" xml:space="preserve">
          <source>Put the marker on a function name and double click to go to the definition of the function. If the function is defined in another module, that module will be loaded and added to the page list.</source>
          <target state="translated">関数名の上にマーカーを置き、ダブルクリックすると関数の定義に移動します。関数が他のモジュールで定義されている場合は、そのモジュールが読み込まれてページリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="5c334594f2e0d971a5e8ed41a49b4ac58e9cff76" translate="yes" xml:space="preserve">
          <source>Put their names in the association file.</source>
          <target state="translated">アソシエーションファイルに名前を入れます。</target>
        </trans-unit>
        <trans-unit id="267984807457cef8b61168f668ee488edeae227f" translate="yes" xml:space="preserve">
          <source>Puts data at the head of the driver queue. The data in &lt;code&gt;buf&lt;/code&gt; is copied (&lt;code&gt;len&lt;/code&gt; bytes) and placed at the beginning of the queue.</source>
          <target state="translated">データをドライバーキューの先頭に配置します。 &lt;code&gt;buf&lt;/code&gt; のデータがコピーされます（ &lt;code&gt;len&lt;/code&gt; バイト）、キューの先頭に配置されます。</target>
        </trans-unit>
        <trans-unit id="9e27e158ac5c5a01e234c267f7eda9d6f033aceb" translate="yes" xml:space="preserve">
          <source>Puts data in the binary &lt;code&gt;bin&lt;/code&gt;, at &lt;code&gt;offset&lt;/code&gt; with length &lt;code&gt;len&lt;/code&gt; at the head of the driver queue. It is most often faster than &lt;code&gt;&lt;a href=&quot;#driver_pushq&quot;&gt;driver_pushq&lt;/a&gt;&lt;/code&gt;, because no data must be copied.</source>
          <target state="translated">ドライバーキューの先頭にある長さ &lt;code&gt;len&lt;/code&gt; の &lt;code&gt;offset&lt;/code&gt; でバイナリ &lt;code&gt;bin&lt;/code&gt; にデータを配置します。ほとんどの場合、データをコピーする必要がないため、 &lt;code&gt;&lt;a href=&quot;#driver_pushq&quot;&gt;driver_pushq&lt;/a&gt;&lt;/code&gt; よりも高速です。</target>
        </trans-unit>
        <trans-unit id="35a65ec39446238a0a0eac9475e71d6cef8cf751" translate="yes" xml:space="preserve">
          <source>Puts the Erlang term &lt;code&gt;TraceInfo&lt;/code&gt; into the sequential trace output if the calling process currently is executing within a sequential trace and the &lt;code&gt;print&lt;/code&gt; flag of the trace token is set.</source>
          <target state="translated">プットアーラン用語 &lt;code&gt;TraceInfo&lt;/code&gt; を順次トレース出力を呼び出すプロセスが現在順次トレース内で実行された場合 &lt;code&gt;print&lt;/code&gt; トレーストークンのフラグがセットされています。</target>
        </trans-unit>
        <trans-unit id="042a67e13942247a8e41ae9098af6d0aa9580018" translate="yes" xml:space="preserve">
          <source>Puts the calling process into a wait state where its memory allocation has been reduced as much as possible. This is useful if the process does not expect to receive any messages soon.</source>
          <target state="translated">呼び出したプロセスを、メモリ割り当てを可能な限り減らした待ち状態にします。これは、プロセスがすぐにメッセージの受信を期待していない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d013f0295b6c01c558d00c5ba53aca86377c9dd9" translate="yes" xml:space="preserve">
          <source>Puts the data in &lt;code&gt;ev&lt;/code&gt;, skipping the first &lt;code&gt;skip&lt;/code&gt; bytes of it, at the head of the driver queue. It is faster than &lt;code&gt;&lt;a href=&quot;#driver_pushq&quot;&gt;driver_pushq&lt;/a&gt;&lt;/code&gt;, because no data must be copied.</source>
          <target state="translated">データを &lt;code&gt;ev&lt;/code&gt; に入れ、その最初の &lt;code&gt;skip&lt;/code&gt; バイトをスキップして、ドライバーキューの先頭に配置します。 &lt;code&gt;&lt;a href=&quot;#driver_pushq&quot;&gt;driver_pushq&lt;/a&gt;&lt;/code&gt; よりも高速ですデータをコピーする必要がないため。</target>
        </trans-unit>
        <trans-unit id="0e3da342d32b71066e0ff7598d5155af43136f49" translate="yes" xml:space="preserve">
          <source>Pythagorean triplets are sets of integers &lt;code&gt;{A,B,C}&lt;/code&gt; such that &lt;code&gt;A**2 + B**2 = C**2&lt;/code&gt;.</source>
          <target state="translated">ピタゴラスのトリプレットは、 &lt;code&gt;A**2 + B**2 = C**2&lt;/code&gt; ような整数のセット &lt;code&gt;{A,B,C}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cbdad7e832388f477b308e785e461d43f185fd4b" translate="yes" xml:space="preserve">
          <source>Q: Can I build something that looks exactly as the commercial release?</source>
          <target state="translated">Q:市販のリリースと全く同じようなものを作ることはできますか?</target>
        </trans-unit>
        <trans-unit id="9c33e934c4ed63e98eb95622daa029fee8f2aee2" translate="yes" xml:space="preserve">
          <source>Q: Can you help me setup X in Cygwin/MSYS/MSYS2?</source>
          <target state="translated">Q:Cygwin/MSYS/MSYS2でXのセットアップを手伝ってもらえますか?</target>
        </trans-unit>
        <trans-unit id="2a92f9f3084b89244941d6f295251370a4ed363a" translate="yes" xml:space="preserve">
          <source>Q: Can/will I build a Cygwin binary with the procedure you describe?</source>
          <target state="translated">Q:あなたが説明している手順でCygwinバイナリをビルドできますか?</target>
        </trans-unit>
        <trans-unit id="8fdbaf479bc8188c169196a96796d9e462c3fb1f" translate="yes" xml:space="preserve">
          <source>Q: Hah, I saw you, you used GCC even though you said you didn't!</source>
          <target state="translated">Q:はあ、見た!見てないと言っていたのにGCCを使っていたのか!?</target>
        </trans-unit>
        <trans-unit id="4d33d2562fd29f6e1c9fc76d264215b3d5aeeca3" translate="yes" xml:space="preserve">
          <source>Q: OK, you need VC++, but now you've started to demand a quite recent (and expensive) version of Visual Studio. Why?</source>
          <target state="translated">Q:VC++が必要なのに、Visual Studio のかなり新しい (そして高価な)バージョンを要求し始めました。なぜでしょうか?</target>
        </trans-unit>
        <trans-unit id="5fa7db24f83822063f97229323a06aa3a0877f5d" translate="yes" xml:space="preserve">
          <source>Q: So how does it all work then?</source>
          <target state="translated">Q:では、どのような仕組みになっているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="4848dd0945c44e751b1591373d20f6801c1998a4" translate="yes" xml:space="preserve">
          <source>Q: So now there's a MS VC++ project file somewhere and I can build OTP using the nifty VC++ GUI?</source>
          <target state="translated">Q:MSのVC++プロジェクトファイルがどこかにあり、VC++のGUIを使ってOTPを構築できるようになったのですね。</target>
        </trans-unit>
        <trans-unit id="7beb25dc53e0563d452b76025a13d007739f049b" translate="yes" xml:space="preserve">
          <source>Q: So, now I can build Erlang using GCC on Windows?</source>
          <target state="translated">Q:WindowsでGCCを使ってErlangをビルドできるようになったのですか?</target>
        </trans-unit>
        <trans-unit id="1f93ee200a556071dcfd3098474bd38969c35084" translate="yes" xml:space="preserve">
          <source>Q: Which version of Cygwin/MSYS/MSYS2 and other tools do you use then?</source>
          <target state="translated">Q:Cygwin/MSYS/MSYS2などのツールはどのバージョンを使っていますか?</target>
        </trans-unit>
        <trans-unit id="3824ecc6208efe4bfe24a674a751c9d0ca079f07" translate="yes" xml:space="preserve">
          <source>Q: Why haven't you got rid of VC++ then, you ******?</source>
          <target state="translated">Q:なぜVC++を処分しなかったのですか?</target>
        </trans-unit>
        <trans-unit id="cb20cfbdc096ea44ab338185d58c6e58b37996ba" translate="yes" xml:space="preserve">
          <source>Q: You use and need Cygwin, but then you haven't taken the time to port Erlang to the Cygwin environment but instead focus on your commercial release, is that really ethical?</source>
          <target state="translated">Q:あなたはCygwinを使っていて必要としているのに、ErlangをCygwin環境に移植する時間を取らずに商用リリースに集中していますよね。</target>
        </trans-unit>
        <trans-unit id="ab248038951d6f5bbf2e6b69cbcd23902b8c49b9" translate="yes" xml:space="preserve">
          <source>QLC</source>
          <target state="translated">QLC</target>
        </trans-unit>
        <trans-unit id="44b991a394914f0303f96d96a457d83497af8f65" translate="yes" xml:space="preserve">
          <source>QLC can be used as a database programming language for Mnesia. It includes a notation called &quot;list comprehensions&quot; and can be used to make complex database queries over a set of tables.</source>
          <target state="translated">QLCは、Mnesiaのデータベースプログラミング言語として使用することができます。リスト内包と呼ばれる記法が含まれており、テーブルの集合に対して複雑なデータベースクエリを作成することができます。</target>
        </trans-unit>
        <trans-unit id="2b344639b609596306bc487c87eb37bfda190216" translate="yes" xml:space="preserve">
          <source>QLC can optimize the query compiler for the Mnesia DBMS, essentially making the DBMS more efficient.</source>
          <target state="translated">QLCはMnesia DBMS用のクエリコンパイラを最適化することができ、本質的にDBMSをより効率的にすることができます。</target>
        </trans-unit>
        <trans-unit id="5d2d92876611f40bde581d69101f8fddd8c14363" translate="yes" xml:space="preserve">
          <source>QLC queries can also be used to search &lt;code&gt;Mnesia&lt;/code&gt; tables. By using the function &lt;code&gt;&lt;a href=&quot;mnesia#table-1&quot;&gt;mnesia:table/[1|2]&lt;/a&gt;&lt;/code&gt; as the generator inside a QLC query, you let the query operate on a &lt;code&gt;Mnesia&lt;/code&gt; table. &lt;code&gt;Mnesia&lt;/code&gt;-specific options to &lt;code&gt;mnesia:table/2&lt;/code&gt; are &lt;code&gt;{lock, Lock}&lt;/code&gt;, &lt;code&gt;{n_objects,Integer}&lt;/code&gt;, and &lt;code&gt;{traverse, SelMethod}&lt;/code&gt;:</source>
          <target state="translated">QLCクエリは、 &lt;code&gt;Mnesia&lt;/code&gt; テーブルの検索にも使用できます。関数 &lt;code&gt;&lt;a href=&quot;mnesia#table-1&quot;&gt;mnesia:table/[1|2]&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;Mnesia&lt;/code&gt; クエリ内のジェネレーターとして使用することにより、クエリでMnesiaテーブルを操作できます。 &lt;code&gt;Mnesia&lt;/code&gt; &lt;code&gt;mnesia:table/2&lt;/code&gt; Mnesia固有のオプションは、 &lt;code&gt;{lock, Lock}&lt;/code&gt; 、 &lt;code&gt;{n_objects,Integer}&lt;/code&gt; 、および &lt;code&gt;{traverse, SelMethod}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d2442c21b812ded9c8602b0eb848411eef6d3f41" translate="yes" xml:space="preserve">
          <source>QLC queries can be performed in all these activity contexts (&lt;code&gt;transaction&lt;/code&gt;, &lt;code&gt;sync_transaction&lt;/code&gt;, &lt;code&gt;async_dirty&lt;/code&gt;, &lt;code&gt;sync_dirty&lt;/code&gt;, and &lt;code&gt;ets&lt;/code&gt;). The &lt;code&gt;ets&lt;/code&gt; activity only works if the table has no indexes.</source>
          <target state="translated">QLCクエリは、これらすべてのアクティビティコンテキスト（ &lt;code&gt;transaction&lt;/code&gt; 、 &lt;code&gt;sync_transaction&lt;/code&gt; 、 &lt;code&gt;async_dirty&lt;/code&gt; 、 &lt;code&gt;sync_dirty&lt;/code&gt; 、および &lt;code&gt;ets&lt;/code&gt; ）で実行できます。 &lt;code&gt;ets&lt;/code&gt; テーブルにインデックスがない場合の活動にのみ動作します。</target>
        </trans-unit>
        <trans-unit id="6fdde551c1ae8e6fe45e078d55ddb3f31ce7e09a" translate="yes" xml:space="preserve">
          <source>QLCs are convenient for stating constraints on data from two or more tables. The following example does a natural join on two query handles on position 2:</source>
          <target state="translated">QLCは、2つ以上のテーブルからのデータに対する制約を記述するのに便利です。次の例では、2つのクエリハンドルの位置2に自然結合を行います。</target>
        </trans-unit>
        <trans-unit id="28177dc15b26c0a74159857924b18e3df0638648" translate="yes" xml:space="preserve">
          <source>Queries can be sent to the master to determine which node will have the least load.</source>
          <target state="translated">クエリをマスタに送信して、どのノードが最も負荷が少ないかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="594265df0f504d11dc7e03fde007c6624ca2cfba" translate="yes" xml:space="preserve">
          <source>Queries the database to find out the ODBC data types of the columns of the table &lt;code&gt;Table&lt;/code&gt;.</source>
          <target state="translated">データベースを照会して、テーブル &lt;code&gt;Table&lt;/code&gt; の列のODBCデータ型を見つけます。</target>
        </trans-unit>
        <trans-unit id="2412c764d41ab6b9791a2250b7102a18362506f7" translate="yes" xml:space="preserve">
          <source>Query ::= Statement&lt;code&gt;,&lt;/code&gt; ...</source>
          <target state="translated">クエリ:: =ステートメント &lt;code&gt;,&lt;/code&gt; ...</target>
        </trans-unit>
        <trans-unit id="c162938e377e38115dc3cedfcf24cb92df1d737c" translate="yes" xml:space="preserve">
          <source>Query List Comprehension (QLC) can be used with Mnesia to produce specialized functions that enhance the operational ability of Mnesia. QLC has its own documentation as part of the OTP documentation set. The main features of QLC when used with Mnesia are as follows:</source>
          <target state="translated">Query List Comprehension (QLC)は、Mnesiaの運用能力を高める特殊な機能を生成するためにMnesiaと一緒に使用することができます。QLCはOTPドキュメントセットの一部として独自のドキュメントを持っています。Mnesiaで使用する場合のQLCの主な機能は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0d6e12fb5478de8f3fa8e6c09b0ca1974dd2631e" translate="yes" xml:space="preserve">
          <source>Query interface</source>
          <target state="translated">クエリインターフェース</target>
        </trans-unit>
        <trans-unit id="c1792a32d0b77c434cdc1e30d03076a0c0097b22" translate="yes" xml:space="preserve">
          <source>Query interface to Mnesia, ETS, Dets, and so on.</source>
          <target state="translated">Mnesia、ETS、Detsなどへのクエリインターフェース。</target>
        </trans-unit>
        <trans-unit id="966933c9d4fe3603343d28156ae1dd639fce4546" translate="yes" xml:space="preserve">
          <source>Queues are double-ended. The mental picture of a queue is a line of people (items) waiting for their turn. The queue front is the end with the item that has waited the longest. The queue rear is the end an item enters when it starts to wait. If instead using the mental picture of a list, the front is called head and the rear is called tail.</source>
          <target state="translated">行列はダブルエンドです。待ち行列のイメージは、順番を待っている人(アイテム)の列です。キューの前部は、最長の待ち時間を持っているアイテムとの終わりです。キューの後部は、それが待つことを開始したときにアイテムが入る終わりです。代わりにリストの精神的な絵を使用する場合は、フロントはヘッドと呼ばれ、リアはテールと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="a20596c790f832b98307345d7e29739a19f1b37f" translate="yes" xml:space="preserve">
          <source>Quits Erlang. Notice that this option is disabled if Erlang is started with the ignore break, &lt;code&gt;+Bi&lt;/code&gt;, system flag (which can be useful, for example when running a restricted shell, see the next section).</source>
          <target state="translated">Erlangを終了します。Erlangがignore break、 &lt;code&gt;+Bi&lt;/code&gt; 、システムフラグで起動されている場合、このオプションは無効になることに注意してください（たとえば、制限付きシェルを実行する場合に役立ちます。次のセクションを参照してください）。</target>
        </trans-unit>
        <trans-unit id="9e0e35667c233db47de30256c67c29187c2127da" translate="yes" xml:space="preserve">
          <source>RAM memory of 96 MB is recommended to run OTP on Windows NT. A system with less than 64 MB of RAM is not recommended.</source>
          <target state="translated">Windows NT で OTP を実行するには、96 MB の RAM メモリを推奨します。64 MB 未満の RAM を搭載したシステムは推奨されません。</target>
        </trans-unit>
        <trans-unit id="3b330731a188b19fdf61999609e5e9b932bb400b" translate="yes" xml:space="preserve">
          <source>REAL</source>
          <target state="translated">REAL</target>
        </trans-unit>
        <trans-unit id="e243ff0db6962f2860f9daeb7b76706585f6a228" translate="yes" xml:space="preserve">
          <source>RFC 1350, The TFTP Protocol (revision 2)</source>
          <target state="translated">RFC 1350、TFTP プロトコル (リビジョン 2)</target>
        </trans-unit>
        <trans-unit id="1dce0d83a131f276794188635a3dd2c84e8c7eb2" translate="yes" xml:space="preserve">
          <source>RFC 2347, TFTP Option Extension</source>
          <target state="translated">RFC 2347,TFTP オプション拡張</target>
        </trans-unit>
        <trans-unit id="bbc82bb105613050636fa25569250ca1eee846e0" translate="yes" xml:space="preserve">
          <source>RFC 2348, TFTP Blocksize Option</source>
          <target state="translated">RFC 2348,TFTP ブロックサイズオプション</target>
        </trans-unit>
        <trans-unit id="58b78666477f6c30faf4308df7d8a596afe3e335" translate="yes" xml:space="preserve">
          <source>RFC 2349, TFTP Timeout Interval and Transfer Size Options</source>
          <target state="translated">RFC 2349,TFTP タイムアウト間隔と転送サイズのオプション</target>
        </trans-unit>
        <trans-unit id="59a4f7837e70ac5999135a8d3596c58b849ab6fc" translate="yes" xml:space="preserve">
          <source>RFC 2830</source>
          <target state="translated">RFC2830</target>
        </trans-unit>
        <trans-unit id="4b90d6cab31b63063971c3605ede011c0f69a6ae" translate="yes" xml:space="preserve">
          <source>RFC 4510 - RFC 4519</source>
          <target state="translated">RFC 4510-RFC 4519</target>
        </trans-unit>
        <trans-unit id="d99facf0134d096b722a33331e4fe8b6452b7572" translate="yes" xml:space="preserve">
          <source>RFC 4716 SSH files looks confusingly like PEM files, but there are some differences:</source>
          <target state="translated">RFC 4716 SSH ファイルは PEM ファイルと紛らわしいように見えますが、いくつかの違いがあります。</target>
        </trans-unit>
        <trans-unit id="1da6885bf9a20f8d0085f4bb97f71554cbe07e08" translate="yes" xml:space="preserve">
          <source>RFC 6733 is unclear about the semantics of the M-bit. One the one hand, the CCF specification in section 3.2 documents AVP in a command grammar as meaning &lt;strong&gt;any&lt;/strong&gt; arbitrary AVP; on the other hand, 1.3.4 states that AVPs setting the M-bit cannot be added to an existing command: the modified command must instead be placed in a new Diameter application.</source>
          <target state="translated">RFC 6733は、Mビットのセマンティクスについては不明です。一つ一方、意味としてコマンド文法セクション3.2ドキュメントAVPでCCF仕様&lt;strong&gt;任意の&lt;/strong&gt;任意のAVPを。一方、1.3.4では、Mビットを設定するAVPを既存のコマンドに追加することはできません。変更されたコマンドは、代わりに新しいDiameterアプリケーションに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="1a00bbd3345e1dc4481f48b2eb823bd6a52b39bc" translate="yes" xml:space="preserve">
          <source>RFC1155, 1157, 1212 and 1215 (SNMPv1)</source>
          <target state="translated">RFC1155、1157、1212、1215 (SNMPv1)</target>
        </trans-unit>
        <trans-unit id="776412993c8f2099a41ff3173b993a46e8d2ffc2" translate="yes" xml:space="preserve">
          <source>RFC1157, RFC1905 and/or RFC2272 should be studied carefully before using this module, &lt;code&gt;snmp_pdus&lt;/code&gt;.</source>
          <target state="translated">このモジュール &lt;code&gt;snmp_pdus&lt;/code&gt; を使用する前に、RFC1157、RFC1905、RFC2272を注意深く検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="1168b5a47f86b0c1ab1cefa353e2e20f382b649a" translate="yes" xml:space="preserve">
          <source>RFC1901-1907 (SNMPv2c)</source>
          <target state="translated">RFC1901-1907 (SNMPv2c)</target>
        </trans-unit>
        <trans-unit id="8f47f36a71eeb2e19619fed1c9a260fe790b894f" translate="yes" xml:space="preserve">
          <source>RFC1908, 2089 (coexistence between SNMPv1 and SNMPv2)</source>
          <target state="translated">RFC1908,2089 (SNMPv1とSNMPv2の共存)</target>
        </trans-unit>
        <trans-unit id="b65e8c8967997cf54ae07d33911cd338bcfd5fea" translate="yes" xml:space="preserve">
          <source>RFC2271, RFC2273 (SNMP std MIBs)</source>
          <target state="translated">RFC2271,RFC2273 (SNMP標準MIB)</target>
        </trans-unit>
        <trans-unit id="f8914ca9f86bbe9f10be1026bac810afc6078c5e" translate="yes" xml:space="preserve">
          <source>RSA key generation is only available if the runtime was built with dirty scheduler support. Otherwise, attempting to generate an RSA key will throw exception &lt;code&gt;error:notsup&lt;/code&gt;.</source>
          <target state="translated">RSAキー生成は、ランタイムがダーティスケジューラサポートでビルドされている場合にのみ使用できます。そうでない場合、RSAキーを生成しようとすると、例外 &lt;code&gt;error:notsup&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="05d92fe0db12744e04d5c42042cf1cefb4d02e52" translate="yes" xml:space="preserve">
          <source>Raises an &lt;code&gt;undef&lt;/code&gt; exception with a stacktrace, indicating that &lt;code&gt;Module:Function/N&lt;/code&gt; is undefined.</source>
          <target state="translated">レイズ &lt;code&gt;undef&lt;/code&gt; ことを示す、スタックトレースと例外を &lt;code&gt;Module:Function/N&lt;/code&gt; 定義されていません。</target>
        </trans-unit>
        <trans-unit id="459599ff17e3d64ffa950ad44a266ffa3f086014" translate="yes" xml:space="preserve">
          <source>Range = 1..2^32, Hash = 1..Range</source>
          <target state="translated">Range=1...2^32,Hash=1...Range</target>
        </trans-unit>
        <trans-unit id="a7f829a993da34443f81cc1e6ec49f9944aa415e" translate="yes" xml:space="preserve">
          <source>Ranges of taken salt (if any) and returned value depend on the hash type.</source>
          <target state="translated">取られた salt (もしあれば)の範囲と返される値はハッシュ型に依存します。</target>
        </trans-unit>
        <trans-unit id="4739ff05fa329071f045d72b76e29a97728b5a87" translate="yes" xml:space="preserve">
          <source>Ranges operate in the collating sequence of character values. They can also be used for characters specified numerically, for example, [\000-\037]. Ranges can include any characters that are valid for the current mode.</source>
          <target state="translated">範囲は、文字値の照合順序で動作します。それらはまた、数値的に指定された文字、例えば、[\000-037]のために使用することができます。範囲は、現在のモードで有効な任意の文字を含むことができる。</target>
        </trans-unit>
        <trans-unit id="5b944ab1d190ffab8bdf5f92747b67f829f474fa" translate="yes" xml:space="preserve">
          <source>Rarely used. Determines the ACK time (specified by &lt;code&gt;assoc_value&lt;/code&gt;, in milliseconds) for the specified association or the whole endpoint if &lt;code&gt;assoc_value = 0&lt;/code&gt; (default).</source>
          <target state="translated">ほとんど使われません。 &lt;code&gt;assoc_value = 0&lt;/code&gt; （デフォルト）の場合、指定された関連付けまたはエンドポイント全体のACK時間（ミリ秒単位で &lt;code&gt;assoc_value&lt;/code&gt; で指定）を決定します。</target>
        </trans-unit>
        <trans-unit id="acb7267dc157944fbc4f68b9244986a8dd01d029" translate="yes" xml:space="preserve">
          <source>Rather than reading the &lt;code&gt;Emakefile&lt;/code&gt; specify configuration explicitly.</source>
          <target state="translated">&lt;code&gt;Emakefile&lt;/code&gt; を読み取るのではなく、構成を明示的に指定します。</target>
        </trans-unit>
        <trans-unit id="47883c793c16264c0bf3a9f6e7125312a6498763" translate="yes" xml:space="preserve">
          <source>Raw filenames were introduced together with Unicode filename support in ERTS 5.8.2 (Erlang/OTP R14B01). The reason &quot;raw filenames&quot; were introduced in the system was to be able to represent filenames, specified in different encodings on the same system, consistently. It can seem practical to have the VM automatically translate a filename that is not in UTF-8 to a list of Unicode characters, but this would open up for both duplicate filenames and other inconsistent behavior.</source>
          <target state="translated">生のファイル名は ERTS 5.8.2 (Erlang/OTP R14B01)で Unicode ファイル名のサポートとともに導入されました。生のファイル名」がシステムに導入された理由は、同じシステム上で異なるエンコーディングで指定されたファイル名を一貫して表現できるようにするためです。UTF-8ではないファイル名を自動的にUnicode文字のリストに変換することは実用的に思えますが、これはファイル名の重複や他の一貫性のない動作の原因になります。</target>
        </trans-unit>
        <trans-unit id="795061f45c0310d22fcc247f07c3b4e23fa83463" translate="yes" xml:space="preserve">
          <source>Raw files use the file system of the host machine of the node. For normal files (non-raw), the file server is used to find the files, and if the node is running its file server as slave to the file server of another node, and the other node runs on some other host machine, they can have different file systems. However, this is seldom a problem.</source>
          <target state="translated">生ファイルは、ノードのホストマシンのファイルシステムを使用します。通常のファイル(非ローファイル)の場合は、ファイルサーバがファイルを見つけるために使用され、ノードがそのファイルサーバを他のノードのファイルサーバのスレーブとして実行していて、他のノードが他のホストマシン上で実行されている場合、それらは異なるファイルシステムを持つことができます。しかし、これが問題になることはめったにありません。</target>
        </trans-unit>
        <trans-unit id="4c84575df9844c415b455e79411320007894aa74" translate="yes" xml:space="preserve">
          <source>Raw socket options, such as &lt;code&gt;packet&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; must not be specified on the command line.</source>
          <target state="translated">&lt;code&gt;packet&lt;/code&gt; や &lt;code&gt;size&lt;/code&gt; などの生のソケットオプションは、コマンドラインで指定しないでください。</target>
        </trans-unit>
        <trans-unit id="1a1608e0a1ead364bb6ddf1ef14e4576861c85e2" translate="yes" xml:space="preserve">
          <source>Re-Auth-Answer</source>
          <target state="translated">Re-Auth-Answer</target>
        </trans-unit>
        <trans-unit id="cea1207d9889c12a36609f11fca3aa3647d57966" translate="yes" xml:space="preserve">
          <source>Re-Auth-Request</source>
          <target state="translated">Re-Auth-Request</target>
        </trans-unit>
        <trans-unit id="16429bb7f0689c5c487b46f0ec26c0177f1ef94a" translate="yes" xml:space="preserve">
          <source>Re-Auth-Request-Type AVP</source>
          <target state="translated">Re-Auth-Request-Type AVP</target>
        </trans-unit>
        <trans-unit id="7bc3f1950022396c1453ed6991b28afe5cc3b167" translate="yes" xml:space="preserve">
          <source>Re-Auth-Request-Type AVP Values</source>
          <target state="translated">Re-Auth-Request-Type AVP値</target>
        </trans-unit>
        <trans-unit id="77e1d4c89a77db083b40468156c72a44aaeb8a27" translate="yes" xml:space="preserve">
          <source>Re-defining the match operation</source>
          <target state="translated">マッチ操作の再定義</target>
        </trans-unit>
        <trans-unit id="19c1fde66df90cd89fae9d3e8cfddd3b6967eaae" translate="yes" xml:space="preserve">
          <source>Re-send a megaco message.</source>
          <target state="translated">megacoのメッセージを再送します。</target>
        </trans-unit>
        <trans-unit id="8f461656f4f97af8310e6bbba806a6dfac4836a2" translate="yes" xml:space="preserve">
          <source>Re-send of messages, handling pending transactions, acknowledgements etc. is handled automatically by the Megaco application but the user is free to override the default behaviour by the various configuration possibilities. See megaco:update_user_info/2 and megaco:update_conn_info/2 about the possibilities.</source>
          <target state="translated">メッセージの再送信、保留中のトランザクションの処理、謝辞などはMegacoアプリケーションによって自動的に処理されますが、ユーザは様々な設定の可能性によってデフォルトの動作を自由に上書きすることができます。可能性については megaco:update_user_info/2 と megaco:update_conn_info/2 を参照してください。</target>
        </trans-unit>
        <trans-unit id="cc298594d701205369ec5adc40340226d9806b5c" translate="yes" xml:space="preserve">
          <source>Read a compiled mib.</source>
          <target state="translated">コンパイルされたミブを読む。</target>
        </trans-unit>
        <trans-unit id="2d219c0f4eafc3f8960679e044824d76e3076ea1" translate="yes" xml:space="preserve">
          <source>Read a file dump produced by &lt;code&gt;&lt;a href=&quot;#to_file-1&quot;&gt;to_file(Filename)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#to_file-1&quot;&gt;to_file(Filename)&lt;/a&gt;&lt;/code&gt; によって生成されたファイルダンプを読み取ります。</target>
        </trans-unit>
        <trans-unit id="094a01892ae368406b5fc03359c07f6767d0465e" translate="yes" xml:space="preserve">
          <source>Read a record from the mib-storage table.</source>
          <target state="translated">mib-storage テーブルからレコードを読み込みます。</target>
        </trans-unit>
        <trans-unit id="fae42d0f132843e9c05600efe03222c799da3c90" translate="yes" xml:space="preserve">
          <source>Read back a stored value:</source>
          <target state="translated">保存されている値を読み出します。</target>
        </trans-unit>
        <trans-unit id="8d5d990ecf5aa325dd10c8954d8f4a8821e157b8" translate="yes" xml:space="preserve">
          <source>Read locks an rwlock. The calling thread is blocked until the rwlock has been read locked. A thread that currently has read or read/write locked the rwlock &lt;strong&gt;cannot&lt;/strong&gt; lock the same rwlock again.</source>
          <target state="translated">読み取りはrwlockをロックします。呼び出しスレッドは、rwlockが読み取りロックされるまでブロックされます。現在rwlock &lt;strong&gt;が&lt;/strong&gt;読み取りまたは読み取り/書き込みロックしているスレッド&lt;strong&gt;は&lt;/strong&gt;、同じrwlockを再度ロックする&lt;strong&gt;ことはできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="76ccfbe9ca99e346c048962da6d197423a7cbd46" translate="yes" xml:space="preserve">
          <source>Read locks can be shared. This means that if one transaction manages to acquire a read lock on an item, other transactions can also acquire a read lock on the same item. However, if someone has a read lock, no one can acquire a write lock at the same item. If someone has a write lock, no one can acquire either a read lock or a write lock at the same item.</source>
          <target state="translated">リード・ロックは共有することができます。これは、あるトランザクションがアイテムのリードロックを取得することに成功した場合、他のトランザクションも同じアイテムのリードロックを取得することができることを意味します。しかし、誰かがリード・ロックを持っている場合、誰も同じアイテムのライト・ロックを取得することはできない。誰かが書き込みロックを持っている場合、誰も同じアイテムで読み取りロックも書き込みロックも取得できない。</target>
        </trans-unit>
        <trans-unit id="ab3b8c2401387cd20afc043cfe4cdb6d7fad5178" translate="yes" xml:space="preserve">
          <source>Read more about behaviours and callback modules in &lt;code&gt;OTP Design Principles&lt;/code&gt;.</source>
          <target state="translated">動作とコールバックモジュールの詳細については、 &lt;code&gt;OTP Design Principles&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="07143977457b982ffd87794e7909594ac2808846" translate="yes" xml:space="preserve">
          <source>Read more about funs in &lt;code&gt;&lt;a href=&quot;expressions#funs&quot;&gt;Fun Expressions&lt;/a&gt;&lt;/code&gt;. For more examples, see &lt;code&gt;Programming Examples&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;expressions#funs&quot;&gt;Fun Expressions&lt;/a&gt;&lt;/code&gt; の funsの詳細をご覧ください。その他の例については、 &lt;code&gt;Programming Examples&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="d1be27ef0d2a3f64890f259db44beefa37af2c5b" translate="yes" xml:space="preserve">
          <source>Read more about maps in &lt;code&gt;&lt;a href=&quot;expressions#map_expressions&quot;&gt;Map Expressions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">マップの詳細については、 &lt;code&gt;&lt;a href=&quot;expressions#map_expressions&quot;&gt;Map Expressions&lt;/a&gt;&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="9a94884a1eeb79bbde0f80da164882bdecb46069" translate="yes" xml:space="preserve">
          <source>Read more about ports in &lt;code&gt;&lt;a href=&quot;ports&quot;&gt;Ports and Port Drivers&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ポートの詳細については、「 &lt;code&gt;&lt;a href=&quot;ports&quot;&gt;Ports and Port Drivers&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="554282f3efb20a0099d5f18b19f7a754b826fd3a" translate="yes" xml:space="preserve">
          <source>Read more about processes in &lt;code&gt;&lt;a href=&quot;processes&quot;&gt;Processes&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスの詳細については、 &lt;code&gt;&lt;a href=&quot;processes&quot;&gt;Processes&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7bf0c0fc48b6429df321b465a4fd9dd18e68f80" translate="yes" xml:space="preserve">
          <source>Read more about records in &lt;code&gt;&lt;a href=&quot;records&quot;&gt;Records&lt;/a&gt;&lt;/code&gt;. More examples can be found in &lt;code&gt;Programming Examples&lt;/code&gt;.</source>
          <target state="translated">レコードの詳細については、「 &lt;code&gt;&lt;a href=&quot;records&quot;&gt;Records&lt;/a&gt;&lt;/code&gt; 。さらに多くの例が &lt;code&gt;Programming Examples&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="88c12fc1054e6dee5889bd067bef3dd784174d05" translate="yes" xml:space="preserve">
          <source>Read more about the &lt;code&gt;&lt;a href=&quot;../system_principles/versions&quot;&gt;version handling&lt;/a&gt;&lt;/code&gt; introduced in Erlang/OTP release 17, which also describes how to determine if an installation includes one or more patched applications.</source>
          <target state="translated">Erlang / OTPリリース17で導入された &lt;code&gt;&lt;a href=&quot;../system_principles/versions&quot;&gt;version handling&lt;/a&gt;&lt;/code&gt; 詳細については、インストールに1つ以上のパッチされたアプリケーションが含まれているかどうかを判断する方法も説明しています。</target>
        </trans-unit>
        <trans-unit id="f5acd88bebed6795b6d43dc94e4d954048ae135b" translate="yes" xml:space="preserve">
          <source>Read more in &lt;code&gt;&lt;a href=&quot;macros&quot;&gt;Preprocessor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">詳細については、 &lt;code&gt;&lt;a href=&quot;macros&quot;&gt;Preprocessor&lt;/a&gt;&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="25902641bc735ddad3dc3752e9e7cdf871e33269" translate="yes" xml:space="preserve">
          <source>Read more in &lt;code&gt;&lt;a href=&quot;typespec&quot;&gt;Types and Function specifications&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">詳しくは、 &lt;code&gt;&lt;a href=&quot;typespec&quot;&gt;Types and Function specifications&lt;/a&gt;&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f648b4cd550b1fadddeedd092b40e39b527f7289" translate="yes" xml:space="preserve">
          <source>Read operations must be fast and performed in RAM.</source>
          <target state="translated">読み出し操作は高速で、RAM内で実行されなければなりません。</target>
        </trans-unit>
        <trans-unit id="fcc1f12b3d10e63c14a1f8d7961be76cc365a4c2" translate="yes" xml:space="preserve">
          <source>Read operations on the file return binaries rather than lists.</source>
          <target state="translated">ファイルの読み込み操作は、リストではなくバイナリを返します。</target>
        </trans-unit>
        <trans-unit id="a2e1d0549799772810864d99ca395221ead7f179" translate="yes" xml:space="preserve">
          <source>Read permission: group</source>
          <target state="translated">読み取り許可:グループ</target>
        </trans-unit>
        <trans-unit id="907dbe453adbd7fa6e280b4f6613faf3d07802de" translate="yes" xml:space="preserve">
          <source>Read permission: other</source>
          <target state="translated">許可を読む:その他</target>
        </trans-unit>
        <trans-unit id="e07884b49a0e21ab3dba84b49e8cf1e33e98b370" translate="yes" xml:space="preserve">
          <source>Read permission: owner</source>
          <target state="translated">読み取り許可:所有者</target>
        </trans-unit>
        <trans-unit id="a9a2a9ac46cb0c7c5000cf0d6d9e745656ad5010" translate="yes" xml:space="preserve">
          <source>Read the &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; from a binary. Returns the read encoding, or &lt;code&gt;none&lt;/code&gt; if no valid encoding is found.</source>
          <target state="translated">バイナリから &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; を読み取ります。読み取りエンコーディングを返します。有効なエンコーディングが見つから &lt;code&gt;none&lt;/code&gt; 場合は、なしを返します。</target>
        </trans-unit>
        <trans-unit id="b9bff9acfee5a49ed23833e2b2e81ce0eafcf087" translate="yes" xml:space="preserve">
          <source>Read the &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; from a file. Returns the read encoding, or &lt;code&gt;none&lt;/code&gt; if no valid encoding is found.</source>
          <target state="translated">ファイルから &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; を読み取ります。読み取りエンコーディングを返します。有効なエンコーディングが見つから &lt;code&gt;none&lt;/code&gt; 場合は、なしを返します。</target>
        </trans-unit>
        <trans-unit id="03addc218b3ecbd8505da6cd353ed8258e946c82" translate="yes" xml:space="preserve">
          <source>Read the current agent community config file.</source>
          <target state="translated">現在のエージェントコミュニティ設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="02b971b894024a807e610f7f5b2b637f8dd97000" translate="yes" xml:space="preserve">
          <source>Read the current agent config file.</source>
          <target state="translated">現在のエージェント設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="342a88f5b0ef188a6710923ae2c68b182e32efef" translate="yes" xml:space="preserve">
          <source>Read the current agent context config file.</source>
          <target state="translated">現在のエージェント・コンテキスト・コンフィグ・ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="b6fc36e2d6043726f29d5d8f1c08f9f88ee70c74" translate="yes" xml:space="preserve">
          <source>Read the current agent notify config file.</source>
          <target state="translated">現在のエージェント通知設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="3eb932c8851f4e2dc54a684ed2c99b02f3242cba" translate="yes" xml:space="preserve">
          <source>Read the current agent standard config file.</source>
          <target state="translated">現在のエージェント標準設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="35433f92aa6ddf91ab8a32ad2893c1416b06ab17" translate="yes" xml:space="preserve">
          <source>Read the current agent target_addr config file.</source>
          <target state="translated">現在のエージェントtarget_addrコンフィグファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="78a4a501636d7de7588fd4069fcaa0ba16c5b911" translate="yes" xml:space="preserve">
          <source>Read the current agent target_params config file.</source>
          <target state="translated">現在のエージェントtarget_params設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="fc9c3b2ea448e1950b438a66a1ac53da2c5c848c" translate="yes" xml:space="preserve">
          <source>Read the current agent usm config file.</source>
          <target state="translated">現在のエージェントの usm 設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="a884a170d9e1573ebe82ea228079e20c5eb624ee" translate="yes" xml:space="preserve">
          <source>Read the current agent vacm config file.</source>
          <target state="translated">現在のエージェント vacm の設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="1cccddc3b38e21d434122b66beec2e249ff466f7" translate="yes" xml:space="preserve">
          <source>Read the current manager agents config file.</source>
          <target state="translated">現在のマネージャーエージェントの設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="5ea1df47d9a8182ee88ccdea1f6d44fd125d1e2e" translate="yes" xml:space="preserve">
          <source>Read the current manager config file.</source>
          <target state="translated">現在のマネージャ設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="bf1020e0b4f41cf2c22e11431cbaedc662a19f79" translate="yes" xml:space="preserve">
          <source>Read the current manager users config file.</source>
          <target state="translated">現在のマネージャーユーザーの設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="59e482ad7bf583e0ad9e54f15735c13cf785f39c" translate="yes" xml:space="preserve">
          <source>Read the current manager usm config file.</source>
          <target state="translated">現在のマネージャの usm 設定ファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="be2ba72b989b324a88b19ff039a27eab2a805aaf" translate="yes" xml:space="preserve">
          <source>Read the whole manual page if it is the first time you are using the transformations.</source>
          <target state="translated">初めて変換を使用する場合は、マニュアルページ全体を読んでください。</target>
        </trans-unit>
        <trans-unit id="0a736cf2a92b3cd68f6984820f5b1301a5650942" translate="yes" xml:space="preserve">
          <source>Read unlocks an rwlock. The rwlock currently must be read locked by the calling thread.</source>
          <target state="translated">Read は rwlock のロックを解除します。rwlock は現在、呼び出し元のスレッドでリードロックされている必要があります。</target>
        </trans-unit>
        <trans-unit id="ce3d31d0d015c1d0a226f6e114ecb8215a61f763" translate="yes" xml:space="preserve">
          <source>Read/write lock. Used to allow multiple threads to read shared data while only allowing one thread to write the same data. Multiple threads can read lock an rwlock at the same time, while only one thread can read/write lock an rwlock at a time.</source>
          <target state="translated">読み書きロック。複数のスレッドが共有データを読み込める一方で、1つのスレッドだけが同じデータを書き込めるようにするために使用します。複数のスレッドが同時に rwlock を読み書きできるのに対し、1 つのスレッドだけが同時に rwlock を読み書きできるようにします。</target>
        </trans-unit>
        <trans-unit id="a088a96620af47c2bef0d4a01c4765cd4908ac8e" translate="yes" xml:space="preserve">
          <source>Read/write locks an rwlock. The calling thread is blocked until the rwlock has been read/write locked. A thread that currently has read or read/write locked the rwlock &lt;strong&gt;cannot&lt;/strong&gt; lock the same rwlock again.</source>
          <target state="translated">読み取り/書き込みは、rwlockをロックします。呼び出しスレッドは、rwlockが読み取り/書き込みロックされるまでブロックされます。現在rwlock &lt;strong&gt;が&lt;/strong&gt;読み取りまたは読み取り/書き込みロックしているスレッド&lt;strong&gt;は&lt;/strong&gt;、同じrwlockを再度ロックする&lt;strong&gt;ことはできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="88f7eef8181951ff1f841f14cc7c3dfc0d58e28f" translate="yes" xml:space="preserve">
          <source>Read/write unlocks an rwlock. The rwlock currently must be read/write locked by the calling thread.</source>
          <target state="translated">読み書きは rwlock のロックを解除します。rwlock は現在、呼び出し元のスレッドで読み書きロックされている必要があります。</target>
        </trans-unit>
        <trans-unit id="db3a2609cebf7e16af76fe0013217765a0dfa76f" translate="yes" xml:space="preserve">
          <source>Readability and maintainability suffer when test cases become too large and extensive. It is not certain that the resulting log files reflect very well the number of tests performed.</source>
          <target state="translated">テストケースが大きすぎて広範囲になると、可読性と保守性が損なわれます。結果として得られるログファイルが、実行されたテストの数を非常によく反映しているかどうかは確かではありません。</target>
        </trans-unit>
        <trans-unit id="9aec65966a9a00d068d698cfbc5cbf74dcf30e9b" translate="yes" xml:space="preserve">
          <source>Reading and writing of files with Unicode data is, however, not best done with the &lt;code&gt;file&lt;/code&gt; module, as its interface is byte-oriented. A file opened with a Unicode encoding (like UTF-8) is best read or written using the &lt;code&gt;io&lt;/code&gt; module.</source>
          <target state="translated">ただし、そのインターフェイスはバイト指向であるため、Unicodeデータを含むファイルの読み取りと書き込みは、 &lt;code&gt;file&lt;/code&gt; モジュールで行うのが最善ではありません。Unicodeエンコーディング（UTF-8など）で開かれたファイルは、 &lt;code&gt;io&lt;/code&gt; モジュールを使用して読み書きするのが最適です。</target>
        </trans-unit>
        <trans-unit id="e4c222fd852ba1812493153ccc2dcc4014ebaf8c" translate="yes" xml:space="preserve">
          <source>Reading man pages. Make sure that &lt;code&gt;erl&lt;/code&gt; is referring to the installed version. For example &lt;code&gt;/usr/local/bin/erl&lt;/code&gt;. Try viewing at the man page for Mnesia</source>
          <target state="translated">manページを読む。 &lt;code&gt;erl&lt;/code&gt; がインストールされているバージョンを参照していることを確認してください。たとえば、 &lt;code&gt;/usr/local/bin/erl&lt;/code&gt; です。Mnesiaのmanページで表示してみてください</target>
        </trans-unit>
        <trans-unit id="252f4b5e75f178405e6c8d8917b5a5ddac65f605" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;Count&lt;/code&gt; characters from standard input (&lt;code&gt;IoDevice&lt;/code&gt;), prompting it with &lt;code&gt;Prompt&lt;/code&gt;.</source>
          <target state="translated">標準入力（ &lt;code&gt;IoDevice&lt;/code&gt; ）から &lt;code&gt;Count&lt;/code&gt; 文字を読み取り、 &lt;code&gt;Prompt&lt;/code&gt; でプロンプトを出します。</target>
        </trans-unit>
        <trans-unit id="f6c0eac8f5e6c09bd6f995de56f2885b56f262d1" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;Len&lt;/code&gt; bytes from the file referenced by &lt;code&gt;Handle&lt;/code&gt;. Returns &lt;code&gt;{ok, Data}&lt;/code&gt;, &lt;code&gt;eof&lt;/code&gt;, or &lt;code&gt;{error, reason()}&lt;/code&gt;. If the file is opened with &lt;code&gt;binary&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt; is a binary, otherwise it is a string.</source>
          <target state="translated">&lt;code&gt;Handle&lt;/code&gt; が参照するファイルから &lt;code&gt;Len&lt;/code&gt; バイトを読み取ります。 &lt;code&gt;{ok, Data}&lt;/code&gt; 、 &lt;code&gt;eof&lt;/code&gt; 、または &lt;code&gt;{error, reason()}&lt;/code&gt; 返します。ファイルが &lt;code&gt;binary&lt;/code&gt; で開かれている場合、 &lt;code&gt;Data&lt;/code&gt; はバイナリです。それ以外の場合は、文字列です。</target>
        </trans-unit>
        <trans-unit id="daa50c7790746978f3529a39e628aa17d94fcef6" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;Number&lt;/code&gt; bytes/characters from the file referenced by &lt;code&gt;IoDevice&lt;/code&gt;. The functions &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#pread-3&quot;&gt;pread/3&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#read_line-1&quot;&gt;read_line/1&lt;/a&gt;&lt;/code&gt; are the only ways to read from a file opened in &lt;code&gt;raw&lt;/code&gt; mode (although they work for normally opened files, too).</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; が参照するファイルから &lt;code&gt;Number&lt;/code&gt; バイト/文字を読み取ります。関数 &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#pread-3&quot;&gt;pread/3&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#read_line-1&quot;&gt;read_line/1&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;raw&lt;/code&gt; モードで開かれたファイルから読み取る唯一の方法です（ただし、これらは通常開かれているファイルでも機能します）。</target>
        </trans-unit>
        <trans-unit id="f70ae81f047ca6b4913a5ff1eb01e17721a1df8e" translate="yes" xml:space="preserve">
          <source>Reads Erlang terms, separated by '.', from &lt;code&gt;Filename&lt;/code&gt;. Returns one of the following:</source>
          <target state="translated">「。」で区切られたErlang用語を &lt;code&gt;Filename&lt;/code&gt; から読み取ります。次のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="be3d677dc62d08604840b02570c3e7442cfa5893" translate="yes" xml:space="preserve">
          <source>Reads a (virtual) file &lt;code&gt;RemoteFilename&lt;/code&gt; from a TFTP server.</source>
          <target state="translated">TFTPサーバーから（仮想）ファイル &lt;code&gt;RemoteFilename&lt;/code&gt; を読み取ります。</target>
        </trans-unit>
        <trans-unit id="475ab7b68b4f86a328c596114c612ba9ab111e93" translate="yes" xml:space="preserve">
          <source>Reads a chunk from the file.</source>
          <target state="translated">ファイルからチャンクを読み込みます。</target>
        </trans-unit>
        <trans-unit id="bcf09f51900c4beb18f4a5c9714ec92cbd388e75" translate="yes" xml:space="preserve">
          <source>Reads a file from the server, and returns the data in a binary.</source>
          <target state="translated">サーバーからファイルを読み込み、バイナリでデータを返します。</target>
        </trans-unit>
        <trans-unit id="5d10f6f7263be88bc8003790c8726391f4e9dbdf" translate="yes" xml:space="preserve">
          <source>Reads a file produced by &lt;code&gt;&lt;a href=&quot;#tab2file-2&quot;&gt;tab2file/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt; and creates the corresponding table &lt;code&gt;Tab&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#tab2file-2&quot;&gt;tab2file/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt; によって生成されたファイルを読み取り、対応するテーブル &lt;code&gt;Tab&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="dc54f5017946e86d78cdba6d809d92457be885be" translate="yes" xml:space="preserve">
          <source>Reads a line from the standard input (&lt;code&gt;IoDevice&lt;/code&gt;), prompting it with &lt;code&gt;Prompt&lt;/code&gt;.</source>
          <target state="translated">標準入力（ &lt;code&gt;IoDevice&lt;/code&gt; ）から行を読み取り、 &lt;code&gt;Prompt&lt;/code&gt; でプロンプトを出します。</target>
        </trans-unit>
        <trans-unit id="36b17ad13f0b033f6df4a993a7b171c360fa8c45" translate="yes" xml:space="preserve">
          <source>Reads a line of bytes/characters from the file referenced by &lt;code&gt;IoDevice&lt;/code&gt;. Lines are defined to be delimited by the linefeed (LF, &lt;code&gt;\n&lt;/code&gt;) character, but any carriage return (CR, &lt;code&gt;\r&lt;/code&gt;) followed by a newline is also treated as a single LF character (the carriage return is silently ignored). The line is returned &lt;strong&gt;including&lt;/strong&gt; the LF, but excluding any CR immediately followed by an LF. This behaviour is consistent with the behaviour of &lt;code&gt;io:get_line/2&lt;/code&gt;. If end of file is reached without any LF ending the last line, a line with no trailing LF is returned.</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; が参照するファイルからバイト/文字の行を読み取ります。行は改行（LF、 &lt;code&gt;\n&lt;/code&gt; ）文字で区切られるように定義されていますが、改行が続くキャリッジリターン（CR、 &lt;code&gt;\r&lt;/code&gt; ）も単一のLF文字として扱われます（キャリッジリターンは黙って無視されます）。行はLF &lt;strong&gt;を含め&lt;/strong&gt;て返されますが、直後にLFが続くCRは除外されます。この動作は &lt;code&gt;io:get_line/2&lt;/code&gt; の動作と一致しています。最終行がLFで終了せずにファイルの終わりに達した場合、末尾のLFのない行が返されます。</target>
        </trans-unit>
        <trans-unit id="aae52d304fd52a828dbf2eedbff2f04b0029c986" translate="yes" xml:space="preserve">
          <source>Reads a row by its SNMP index. This index is specified as an SNMP Object Identifier, a list of integers.</source>
          <target state="translated">SNMP インデックスで行を読み込みます。このインデックスは、SNMPオブジェクト識別子(整数のリスト)として指定されます。</target>
        </trans-unit>
        <trans-unit id="842ce7e26143e68269e6af73ca149569ed32c0c5" translate="yes" xml:space="preserve">
          <source>Reads a term &lt;code&gt;Term&lt;/code&gt; from &lt;code&gt;IoDevice&lt;/code&gt;, prompting it with &lt;code&gt;Prompt&lt;/code&gt;. Reading starts at location &lt;code&gt;StartLocation&lt;/code&gt;. Argument &lt;code&gt;Options&lt;/code&gt; is passed on as argument &lt;code&gt;Options&lt;/code&gt; of function &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; から用語 &lt;code&gt;Term&lt;/code&gt; を読み取り、 &lt;code&gt;Prompt&lt;/code&gt; でプロンプトを出します。読み取りは、ロケーション &lt;code&gt;StartLocation&lt;/code&gt; から始まります。引数 &lt;code&gt;Options&lt;/code&gt; は、関数 &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt; の引数 &lt;code&gt;Options&lt;/code&gt; として渡されます。</target>
        </trans-unit>
        <trans-unit id="0d4db0c3277853bee5baecd76ea077556e6a19fa" translate="yes" xml:space="preserve">
          <source>Reads a term &lt;code&gt;Term&lt;/code&gt; from the standard input (&lt;code&gt;IoDevice&lt;/code&gt;), prompting it with &lt;code&gt;Prompt&lt;/code&gt;.</source>
          <target state="translated">標準入力（ &lt;code&gt;IoDevice&lt;/code&gt; ）から用語 &lt;code&gt;Term&lt;/code&gt; を読み取り、 &lt;code&gt;Prompt&lt;/code&gt; でプロンプトを出します。</target>
        </trans-unit>
        <trans-unit id="ac643941e9886622de2937798fd5270edc0fabf5" translate="yes" xml:space="preserve">
          <source>Reads a time stamp into the memory pointed to by parameter &lt;code&gt;now&lt;/code&gt;. For information about specific fields, see &lt;code&gt;&lt;a href=&quot;#ErlDrvNowData&quot;&gt;ErlDrvNowData&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;now&lt;/code&gt; が指すメモリにタイムスタンプを読み取ります。特定のフィールドについては、 &lt;code&gt;&lt;a href=&quot;#ErlDrvNowData&quot;&gt;ErlDrvNowData&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c19818e3b583cae64bcc594ab0744745d21d8def" translate="yes" xml:space="preserve">
          <source>Reads all records from table &lt;code&gt;Tab&lt;/code&gt; with key &lt;code&gt;Key&lt;/code&gt;. This function has the same semantics regardless of the location of &lt;code&gt;Tab&lt;/code&gt;. If the table is of type &lt;code&gt;bag&lt;/code&gt;, the function &lt;code&gt;mnesia:read(Tab, Key)&lt;/code&gt; can return an arbitrarily long list. If the table is of type &lt;code&gt;set&lt;/code&gt;, the list is either of length 1, or &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">キー &lt;code&gt;Key&lt;/code&gt; を使用して、テーブル &lt;code&gt;Tab&lt;/code&gt; からすべてのレコードを読み取ります。この関数の意味は、 &lt;code&gt;Tab&lt;/code&gt; の場所に関係なく同じです。テーブルのタイプが &lt;code&gt;bag&lt;/code&gt; の場合、関数 &lt;code&gt;mnesia:read(Tab, Key)&lt;/code&gt; は任意の長いリストを返すことができます。テーブルがタイプ &lt;code&gt;set&lt;/code&gt; 場合、リストは長さ1または &lt;code&gt;[]&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="5c89de20ea0caf916aed94b0b16edcd0fa5a8208" translate="yes" xml:space="preserve">
          <source>Reads and evaluates Erlang expressions, separated by '.' (or ',', a sequence of expressions is also an expression) from &lt;code&gt;Filename&lt;/code&gt;. The result of the evaluation is not returned; any expression sequence in the file must be there for its side effect. Returns one of the following:</source>
          <target state="translated">「。」で区切られたErlang式を読み取って評価します （または '、'、式のシーケンスも式です）from &lt;code&gt;Filename&lt;/code&gt; 。評価の結果は返されません。ファイル内の式シーケンスは、その副作用のために存在する必要があります。次のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="a4538536a6029a3eaaa364e5024ba9396498603a" translate="yes" xml:space="preserve">
          <source>Reads and evaluates Erlang expressions, separated by '.' (or ',', a sequence of expressions is also an expression), from the file.</source>
          <target state="translated">で区切られたErlang式をファイルから読み込んで評価します。</target>
        </trans-unit>
        <trans-unit id="f86a65da862e66ea58fe0b1e1894f4ad5ab8707c" translate="yes" xml:space="preserve">
          <source>Reads and parses a file. If successful, &lt;code&gt;{ok, Forms}&lt;/code&gt; is returned, where &lt;code&gt;Forms&lt;/code&gt; is a list of abstract syntax trees representing the &quot;program forms&quot; of the file (cf. &lt;code&gt;erl_syntax:is_form/1&lt;/code&gt;). Otherwise, &lt;code&gt;{error, errorinfo()}&lt;/code&gt; is returned, typically if the file could not be opened. Note that parse errors show up as error markers in the returned list of forms; they do not cause this function to fail or return &lt;code&gt;{error, errorinfo()}&lt;/code&gt;.</source>
          <target state="translated">ファイルを読み取って解析します。成功した場合、 &lt;code&gt;{ok, Forms}&lt;/code&gt; ここで、返された &lt;code&gt;Forms&lt;/code&gt; ファイルの「番組形態」を表す抽象構文木のリストである（参照 &lt;code&gt;erl_syntax:is_form/1&lt;/code&gt; ）。それ以外の場合、通常はファイルを開くことができなかった場合に、 &lt;code&gt;{error, errorinfo()}&lt;/code&gt; が返されます。解析エラーは、返されたフォームのリストにエラーマーカーとして表示されることに注意してください。この関数が失敗したり &lt;code&gt;{error, errorinfo()}&lt;/code&gt; 返したりすることはありません。</target>
        </trans-unit>
        <trans-unit id="2920dcddbbb429fc599c5c461913301f70aa81e6" translate="yes" xml:space="preserve">
          <source>Reads and parses a single program form from an I/O stream. Characters are read from &lt;code&gt;IODevice&lt;/code&gt; until an end-of-form marker is found (a period character followed by whitespace), or until end-of-file; apart from this, the behaviour is similar to that of &lt;code&gt;parse/3&lt;/code&gt;, except that the return values also contain the final line number given that &lt;code&gt;StartLine&lt;/code&gt; is the initial line number, and that &lt;code&gt;{eof, LineNo}&lt;/code&gt; may be returned.</source>
          <target state="translated">I / Oストリームから単一のプログラム形式を読み取って解析します。文字は、 &lt;code&gt;IODevice&lt;/code&gt; の終わりマーカーが見つかるまで（ピリオド文字の後に空白が続く）、またはファイルの終わりまで、IODeviceから読み取られます。これを除けば、動作は &lt;code&gt;parse/3&lt;/code&gt; の動作と似ていますが、 &lt;code&gt;StartLine&lt;/code&gt; が最初の行番号であり、 &lt;code&gt;{eof, LineNo}&lt;/code&gt; が返される場合、戻り値には最終行番号も含まれます。</target>
        </trans-unit>
        <trans-unit id="a5c3bcde53de74966bb137b9992cbcf8bea8b82b" translate="yes" xml:space="preserve">
          <source>Reads and parses program text from an I/O stream. Characters are read from &lt;code&gt;IODevice&lt;/code&gt; until end-of-file; apart from this, the behaviour is the same as for &lt;code&gt;&lt;a href=&quot;#parse_file-2&quot;&gt;parse_file/2&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;StartLine&lt;/code&gt; is the initial line number, which should be a positive integer.</source>
          <target state="translated">I / Oストリームからプログラムテキストを読み取り、解析します。文字はファイルの終わりまで &lt;code&gt;IODevice&lt;/code&gt; から読み取られます。これ以外は、動作は &lt;code&gt;&lt;a href=&quot;#parse_file-2&quot;&gt;parse_file/2&lt;/a&gt;&lt;/code&gt; の場合と同じです。 &lt;code&gt;StartLine&lt;/code&gt; は、正の整数である最初の行番号です。</target>
        </trans-unit>
        <trans-unit id="575313b04f7b2d9ade2c2ac804470bebb4ac3f46" translate="yes" xml:space="preserve">
          <source>Reads characters from the standard input (&lt;code&gt;IoDevice&lt;/code&gt;), prompting it with &lt;code&gt;Prompt&lt;/code&gt;. Interprets the characters in accordance with &lt;code&gt;Format&lt;/code&gt;. &lt;code&gt;Format&lt;/code&gt; contains control sequences that directs the interpretation of the input.</source>
          <target state="translated">標準入力（ &lt;code&gt;IoDevice&lt;/code&gt; ）から文字を読み取り、 &lt;code&gt;Prompt&lt;/code&gt; でプロンプトを出します。 &lt;code&gt;Format&lt;/code&gt; に従って文字を解釈します。 &lt;code&gt;Format&lt;/code&gt; には、入力の解釈を指示する制御シーケンスが含まれています。</target>
        </trans-unit>
        <trans-unit id="936b3c9cc90592c88890f5bba0974bbcc4534300" translate="yes" xml:space="preserve">
          <source>Reads chunk data for all chunks.</source>
          <target state="translated">すべてのチャンクのチャンクデータを読み込みます。</target>
        </trans-unit>
        <trans-unit id="5478616d388c3efd3ce75d4d04ed80f7b653d5be" translate="yes" xml:space="preserve">
          <source>Reads chunk data for selected chunks references. The order of the returned list of chunk data is determined by the order of the list of chunks references.</source>
          <target state="translated">選択されたチャンク参照のチャンクデータを読み込みます。返されたチャンクデータのリストの順番は、チャンク参照のリストの順番で決まります。</target>
        </trans-unit>
        <trans-unit id="b313c71e885968a16f290931cc4dc9de8929bf2d" translate="yes" xml:space="preserve">
          <source>Reads configuration data values.</source>
          <target state="translated">設定データの値を読み込みます。</target>
        </trans-unit>
        <trans-unit id="9149fffa2a35130db955805683d3e726e8bc00d9" translate="yes" xml:space="preserve">
          <source>Reads data from the standard input (&lt;code&gt;IoDevice&lt;/code&gt;), prompting it with &lt;code&gt;Prompt&lt;/code&gt;. Reading starts at location &lt;code&gt;StartLocation&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;). Argument &lt;code&gt;Options&lt;/code&gt; is passed on as argument &lt;code&gt;Options&lt;/code&gt; of function &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt;. The data is tokenized as if it were a sequence of Erlang expressions until a final dot (&lt;code&gt;.&lt;/code&gt;) is reached. This token is also returned.</source>
          <target state="translated">標準入力（ &lt;code&gt;IoDevice&lt;/code&gt; ）からデータを読み取り、 &lt;code&gt;Prompt&lt;/code&gt; でプロンプトを出します。読み取りは、ロケーション &lt;code&gt;StartLocation&lt;/code&gt; （ &lt;code&gt;1&lt;/code&gt; ）から始まります。引数 &lt;code&gt;Options&lt;/code&gt; は、関数 &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt; の引数 &lt;code&gt;Options&lt;/code&gt; として渡されます。データは、最後のドット（ &lt;code&gt;.&lt;/code&gt; ）に到達するまで、Erlang式のシーケンスであるかのようにトークン化されます。このトークンも返されます。</target>
        </trans-unit>
        <trans-unit id="374c9ef16799b9abb4e9d26f5fa912264a6e1657" translate="yes" xml:space="preserve">
          <source>Reads data from the standard input (&lt;code&gt;IoDevice&lt;/code&gt;), prompting it with &lt;code&gt;Prompt&lt;/code&gt;. Starts reading at location &lt;code&gt;StartLocation&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;). Argument &lt;code&gt;Options&lt;/code&gt; is passed on as argument &lt;code&gt;Options&lt;/code&gt; of function &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt;. The data is tokenized and parsed as if it was a sequence of Erlang expressions until a final dot (&lt;code&gt;.&lt;/code&gt;) is reached.</source>
          <target state="translated">標準入力（ &lt;code&gt;IoDevice&lt;/code&gt; ）からデータを読み取り、 &lt;code&gt;Prompt&lt;/code&gt; でプロンプトを出します。場所 &lt;code&gt;StartLocation&lt;/code&gt; （ &lt;code&gt;1&lt;/code&gt; ）から読み取りを開始します。引数 &lt;code&gt;Options&lt;/code&gt; は、関数 &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt; の引数 &lt;code&gt;Options&lt;/code&gt; として渡されます。データはトークン化され、最後のドット（ &lt;code&gt;.&lt;/code&gt; ）に到達するまで、Erlang式のシーケンスであるかのように解析されます。</target>
        </trans-unit>
        <trans-unit id="b1cad2965b9c36b880989ab004d941243e0ccdf7" translate="yes" xml:space="preserve">
          <source>Reads data from the standard input (&lt;code&gt;IoDevice&lt;/code&gt;), prompting it with &lt;code&gt;Prompt&lt;/code&gt;. Starts reading at location &lt;code&gt;StartLocation&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;). Argument &lt;code&gt;Options&lt;/code&gt; is passed on as argument &lt;code&gt;Options&lt;/code&gt; of function &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt;. The data is tokenized and parsed as if it was an Erlang form (one of the valid Erlang expressions in an Erlang source file) until a final dot (&lt;code&gt;.&lt;/code&gt;) is reached.</source>
          <target state="translated">標準入力（ &lt;code&gt;IoDevice&lt;/code&gt; ）からデータを読み取り、 &lt;code&gt;Prompt&lt;/code&gt; でプロンプトを出します。場所 &lt;code&gt;StartLocation&lt;/code&gt; （ &lt;code&gt;1&lt;/code&gt; ）から読み取りを開始します。引数 &lt;code&gt;Options&lt;/code&gt; は、関数 &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt; の引数 &lt;code&gt;Options&lt;/code&gt; として渡されます。データはトークン化され、最後のドット（ &lt;code&gt;.&lt;/code&gt; ）に到達するまで、Erlang形式（Erlangソースファイル内の有効なErlang式の1つ）であるかのように解析されます。</target>
        </trans-unit>
        <trans-unit id="595f61201ea85ff9dc6c8defa70b03e0e2371abf" translate="yes" xml:space="preserve">
          <source>Reads data from the standard input (&lt;code&gt;IoDevice&lt;/code&gt;), prompting it with &lt;code&gt;Prompt&lt;/code&gt;. Starts reading at location &lt;code&gt;StartLocation&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;). Argument &lt;code&gt;Options&lt;/code&gt; is passed on as argument &lt;code&gt;Options&lt;/code&gt; of function &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt;. The data is tokenized as if it was an Erlang form (one of the valid Erlang expressions in an Erlang source file) until a final dot (&lt;code&gt;.&lt;/code&gt;) is reached. This last token is also returned.</source>
          <target state="translated">標準入力（ &lt;code&gt;IoDevice&lt;/code&gt; ）からデータを読み取り、 &lt;code&gt;Prompt&lt;/code&gt; でプロンプトを出します。場所 &lt;code&gt;StartLocation&lt;/code&gt; （ &lt;code&gt;1&lt;/code&gt; ）から読み取りを開始します。引数 &lt;code&gt;Options&lt;/code&gt; は、関数 &lt;code&gt;&lt;a href=&quot;erl_scan#tokens-4&quot;&gt;erl_scan:tokens/4&lt;/a&gt;&lt;/code&gt; の引数 &lt;code&gt;Options&lt;/code&gt; として渡されます。データは、最後のドット（ &lt;code&gt;.&lt;/code&gt; ）に達するまで、Erlangフォーム（Erlangソースファイル内の有効なErlang式の1つ）であるかのようにトークン化されます。この最後のトークンも返されます。</target>
        </trans-unit>
        <trans-unit id="adade152b720618374d89b5e6eb7f3a1c8be4d9d" translate="yes" xml:space="preserve">
          <source>Reads data in parts from the file. This is intended for memory-limited machines that, for example, builds a tar file on a remote machine over SFTP, see &lt;code&gt;ssh_sftp:open_tar/3&lt;/code&gt;.</source>
          <target state="translated">ファイルから部分的にデータを読み取ります。これは、たとえば、SFTPを介してリモートマシン上にtarファイルを構築する、メモリ制限のあるマシンを対象としています &lt;code&gt;ssh_sftp:open_tar/3&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="b2dd7f9783c71e871e5a5536f61fe7d2f34a7b79" translate="yes" xml:space="preserve">
          <source>Reads each &lt;code&gt;Mod&lt;/code&gt; from directory &lt;code&gt;App-Vsn/ebin&lt;/code&gt; as a binary. It does not load the modules. The instruction is to be placed first in the script to read all new code from the file to make the suspend-load-resume cycle less time-consuming.</source>
          <target state="translated">&lt;code&gt;App-Vsn/ebin&lt;/code&gt; ディレクトリから各 &lt;code&gt;Mod&lt;/code&gt; をバイナリとして読み取ります。モジュールはロードされません。命令はスクリプトの最初に配置して、ファイルからすべての新しいコードを読み取り、suspend-load-resumeサイクルの時間を短縮します。</target>
        </trans-unit>
        <trans-unit id="5f9e8132777eeeea0b0b9630390bdccb83499a2f" translate="yes" xml:space="preserve">
          <source>Reads file &lt;code&gt;.hosts.erlang&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;#files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt;. Returns the hosts in this file as a list. Returns &lt;code&gt;{error, Reason}&lt;/code&gt; if the file cannot be read or the Erlang terms on the file cannot be interpreted.</source>
          <target state="translated">ファイル &lt;code&gt;.hosts.erlang&lt;/code&gt; を読み取ります。「 &lt;code&gt;&lt;a href=&quot;#files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; セクションを参照してください。このファイル内のホストをリストとして返します。ファイルを読み取れない場合、またはファイルのErlang用語を解釈できない場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="acd0eef8d72bba8b5179acfa61549202aee45b07" translate="yes" xml:space="preserve">
          <source>Reads from an open file, without waiting for the result. If the handle is valid, the function returns &lt;code&gt;{async, N}&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is a term guaranteed to be unique between calls of &lt;code&gt;aread&lt;/code&gt;. The actual data is sent as a message to the calling process. This message has the form &lt;code&gt;{async_reply, N, Result}&lt;/code&gt;, where &lt;code&gt;Result&lt;/code&gt; is the result from the read, either &lt;code&gt;{ok, Data}&lt;/code&gt;, &lt;code&gt;eof&lt;/code&gt;, or &lt;code&gt;{error, reason()}&lt;/code&gt;.</source>
          <target state="translated">結果を待たずに、開いているファイルから読み取ります。ハンドルが有効であれば、関数戻り &lt;code&gt;{async, N}&lt;/code&gt; 、ここで、 &lt;code&gt;N&lt;/code&gt; は、の呼び出しの間で一意であることが保証される用語である &lt;code&gt;aread&lt;/code&gt; 。実際のデータはメッセージとして呼び出しプロセスに送信されます。このメッセージは、フォーム有する &lt;code&gt;{async_reply, N, Result}&lt;/code&gt; 、 &lt;code&gt;Result&lt;/code&gt; リードからの結果であるが、いずれかの &lt;code&gt;{ok, Data}&lt;/code&gt; 、 &lt;code&gt;eof&lt;/code&gt; 、または &lt;code&gt;{error, reason()}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="473a3f49d1f005cdbfb18d83b547219146f6b620" translate="yes" xml:space="preserve">
          <source>Reads information about the timetrap set for the current test case. &lt;code&gt;Scaling&lt;/code&gt; indicates if &lt;code&gt;Common Test&lt;/code&gt; will attempt to compensate timetraps automatically for runtime delays introduced by, for example, tools like cover. &lt;code&gt;ScaleVal&lt;/code&gt; is the value of the current scaling multipler (always 1 if scaling is disabled). Note the &lt;code&gt;Time&lt;/code&gt; is not the scaled result.</source>
          <target state="translated">現在のテストケースのタイムトラップセットに関する情報を読み取ります。 &lt;code&gt;Scaling&lt;/code&gt; は、 &lt;code&gt;Common Test&lt;/code&gt; が、カバーなどのツールによって導入された実行時の遅延に対してタイムトラップを自動的に補正しようとするかどうかを示します。 &lt;code&gt;ScaleVal&lt;/code&gt; は、現在のスケーリング乗数の値です（スケーリングが無効の場合は常に1）。 &lt;code&gt;Time&lt;/code&gt; はスケーリングされた結果ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="5cb0a0e95145733613cfe1c4d5d32a786e548cb7" translate="yes" xml:space="preserve">
          <source>Reads one or more terms from the test specification used to configure and run this test. &lt;code&gt;Tag&lt;/code&gt; is any valid test specification tag, for example, &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;config&lt;/code&gt;, or &lt;code&gt;logdir&lt;/code&gt;. User-specific terms are also available to read if option &lt;code&gt;allow_user_terms&lt;/code&gt; is set.</source>
          <target state="translated">このテストの構成と実行に使用されるテスト仕様から1つ以上の用語を読み取ります。 &lt;code&gt;Tag&lt;/code&gt; は、 &lt;code&gt;label&lt;/code&gt; 、 &lt;code&gt;config&lt;/code&gt; 、 &lt;code&gt;logdir&lt;/code&gt; などの有効なテスト仕様タグです。オプション &lt;code&gt;allow_user_terms&lt;/code&gt; が設定されている場合、ユーザー固有の用語も読むことができます。</target>
        </trans-unit>
        <trans-unit id="9678f45370812f85bf721cb4a46a673223c64b44" translate="yes" xml:space="preserve">
          <source>Reads record definitions from a module's BEAM file. If there are no record definitions in the BEAM file, the source file is located and read instead. Returns the names of the record definitions read. &lt;code&gt;Module&lt;/code&gt; is an atom.</source>
          <target state="translated">モジュールのBEAMファイルからレコード定義を読み取ります。BEAMファイルにレコード定義がない場合は、ソースファイルが検索され、代わりに読み取られます。読み込まれたレコード定義の名前を返します。 &lt;code&gt;Module&lt;/code&gt; はアトムです。</target>
        </trans-unit>
        <trans-unit id="df8cc01b9c5d974fd88821805f092bbf2d9438ba" translate="yes" xml:space="preserve">
          <source>Reads record definitions from files but discards record names not mentioned in &lt;code&gt;RecordNames&lt;/code&gt; (a record name or a list of record names).</source>
          <target state="translated">ファイルからレコード定義を読み取りますが、 &lt;code&gt;RecordNames&lt;/code&gt; に記載されていないレコード名（レコード名またはレコード名のリスト）を破棄します。</target>
        </trans-unit>
        <trans-unit id="c7a29df53eefec6311892690ec9b68fab17c6c71" translate="yes" xml:space="preserve">
          <source>Reads record definitions from files. Existing definitions of any of the record names read are replaced. &lt;code&gt;Wildcard&lt;/code&gt; is a wildcard string as defined in &lt;code&gt;&lt;a href=&quot;filelib&quot;&gt;filelib(3)&lt;/a&gt;&lt;/code&gt;, but not an atom.</source>
          <target state="translated">ファイルからレコード定義を読み取ります。読み込まれたレコード名の既存の定義は置き換えられます。 &lt;code&gt;Wildcard&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;filelib&quot;&gt;filelib(3)&lt;/a&gt;&lt;/code&gt; で定義されているワイルドカード文字列ですが、アトムではありません。</target>
        </trans-unit>
        <trans-unit id="1d4affa78ab45ecbfb3d3d5e0421aca7b1d8b2a0" translate="yes" xml:space="preserve">
          <source>Reads record definitions from files. The compiler options &lt;code&gt;{i,&amp;nbsp;Dir}&lt;/code&gt;, &lt;code&gt;{d,&amp;nbsp;Macro}&lt;/code&gt;, and &lt;code&gt;{d,&amp;nbsp;Macro,&amp;nbsp;Value}&lt;/code&gt; are recognized and used for setting up the include path and macro definitions. To read all record definitions, use &lt;code&gt;'_'&lt;/code&gt; as value of &lt;code&gt;RecordNames&lt;/code&gt;.</source>
          <target state="translated">ファイルからレコード定義を読み取ります。コンパイラー・オプション &lt;code&gt;{i,&amp;nbsp;Dir}&lt;/code&gt; 、 &lt;code&gt;{d,&amp;nbsp;Macro}&lt;/code&gt; 、および &lt;code&gt;{d,&amp;nbsp;Macro,&amp;nbsp;Value}&lt;/code&gt; が認識され、インクルード・パスおよびマクロ定義のセットアップに使用されます。すべてのレコード定義を読み取るには、 &lt;code&gt;RecordNames&lt;/code&gt; の値として &lt;code&gt;'_'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a97a11fc0cb6ea77a20ef2c272dd9b0c766b3e97" translate="yes" xml:space="preserve">
          <source>Reads the &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; from an I/O device and sets the encoding of the device accordingly. The position of the I/O device referenced by &lt;code&gt;File&lt;/code&gt; is not affected. If no valid encoding can be read from the I/O device, the encoding of the I/O device is set to the &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; specified by &lt;code&gt;Default&lt;/code&gt;.</source>
          <target state="translated">I / Oデバイスから &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; を読み取り、それに応じてデバイスのエンコーディングを設定します。 &lt;code&gt;File&lt;/code&gt; が参照するI / Oデバイスの位置は影響を受けません。I / Oデバイスから有効なエンコーディングを読み取れない場合、I / Oデバイスのエンコーディングは &lt;code&gt;Default&lt;/code&gt; で指定された &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="5f93ddca5006ccdbb3f7596d1f8a8390df9f011d" translate="yes" xml:space="preserve">
          <source>Reads the &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; from an I/O device and sets the encoding of the device accordingly. The position of the I/O device referenced by &lt;code&gt;File&lt;/code&gt; is not affected. If no valid encoding can be read from the I/O device, the encoding of the I/O device is set to the default encoding.</source>
          <target state="translated">I / Oデバイスから &lt;code&gt;&lt;a href=&quot;#encoding&quot;&gt;encoding&lt;/a&gt;&lt;/code&gt; を読み取り、それに応じてデバイスのエンコーディングを設定します。 &lt;code&gt;File&lt;/code&gt; が参照するI / Oデバイスの位置は影響を受けません。I / Oデバイスから有効なエンコーディングを読み取れない場合、I / Oデバイスのエンコーディングはデフォルトのエンコーディングに設定されます。</target>
        </trans-unit>
        <trans-unit id="a7c87f7c3cd992fe79a2c1b8d950c1deaacc9012" translate="yes" xml:space="preserve">
          <source>Reads the application configuration parameter &lt;code&gt;logger&lt;/code&gt; and calls &lt;code&gt;add_handlers/1&lt;/code&gt; with its contents.</source>
          <target state="translated">アプリケーション構成パラメーター &lt;code&gt;logger&lt;/code&gt; を読み取り、その内容で &lt;code&gt;add_handlers/1&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="0978dc894d2a71b1cf1cfdef66ccd9de4a864810" translate="yes" xml:space="preserve">
          <source>Reads the current time of a timer, and places the result in &lt;code&gt;time_left&lt;/code&gt;. This is the time in milliseconds, before the time-out occurs.</source>
          <target state="translated">タイマーの現在の時刻を読み取り、その結果を &lt;code&gt;time_left&lt;/code&gt; に配置します。これは、タイムアウトが発生するまでのミリ秒単位の時間です。</target>
        </trans-unit>
        <trans-unit id="ef330399fd66929e3d50b54bbdd55115fbd0d652" translate="yes" xml:space="preserve">
          <source>Reads the file &lt;code&gt;Filename&lt;/code&gt; and creates raw profile data that is stored in RAM by the &lt;code&gt;fprof&lt;/code&gt; server. If the option &lt;code&gt;file&lt;/code&gt; is given, or none of these options are given, the file &lt;code&gt;&quot;fprof.trace&quot;&lt;/code&gt; is read. The call will return when the whole trace has been read with the return value &lt;code&gt;ok&lt;/code&gt; if successful. This option is not allowed with the &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;stop&lt;/code&gt; options.</source>
          <target state="translated">ファイル &lt;code&gt;Filename&lt;/code&gt; を読み取り、 &lt;code&gt;fprof&lt;/code&gt; サーバーによってRAMに保管される未加工のプロファイルデータを作成します。オプション &lt;code&gt;file&lt;/code&gt; が指定されている場合、またはこれらのオプションが指定されていない場合は、ファイル &lt;code&gt;&quot;fprof.trace&quot;&lt;/code&gt; が読み取られます。呼び出しが成功すると、トレース全体が読み取られ、戻り値 &lt;code&gt;ok&lt;/code&gt; が返されます。このオプションは、 &lt;code&gt;start&lt;/code&gt; または &lt;code&gt;stop&lt;/code&gt; オプションと一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="49742bfb294b102cbe18de7cfaaa6d790db477e2" translate="yes" xml:space="preserve">
          <source>Reads the file &lt;code&gt;mysystem.rel&lt;/code&gt; and creates a new file &lt;code&gt;plain.rel&lt;/code&gt; that is identical to the former, except that it only lists the Kernel and STDLIB applications.</source>
          <target state="translated">ファイル &lt;code&gt;mysystem.rel&lt;/code&gt; を読み取り、カーネルとSTDLIBアプリケーションのみをリストすることを除いて、前のものと同じ新しいファイル &lt;code&gt;plain.rel&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="f903b588a4d361175c96f10e6de158fead02c148" translate="yes" xml:space="preserve">
          <source>Reads the link target from the symbolic link specified by &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; で指定されたシンボリックリンクからリンクターゲットを読み取ります。</target>
        </trans-unit>
        <trans-unit id="e21a2e27c60061a5209d8bcd0b5afd002f70ac3e" translate="yes" xml:space="preserve">
          <source>Reads the next chunk of uncompressed data, initialized by &lt;code&gt;&lt;a href=&quot;#inflateChunk-2&quot;&gt;inflateChunk/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#inflateChunk-2&quot;&gt;inflateChunk/2&lt;/a&gt;&lt;/code&gt; によって初期化された非圧縮データの次のチャンクを読み取ります。</target>
        </trans-unit>
        <trans-unit id="a4416420a93781bcc0dc5f8a20da753372346242" translate="yes" xml:space="preserve">
          <source>Reads the referenced XML schema and checks that it is valid. Returns the &lt;code&gt;global_state()&lt;/code&gt; with schema info or an error reason. The error reason may be a list of several errors or a single error encountered during the processing.</source>
          <target state="translated">参照されるXMLスキーマを読み取り、それが有効であることを確認します。スキーマ情報またはエラー理由を &lt;code&gt;global_state()&lt;/code&gt; を返します。エラーの理由は、いくつかのエラーのリスト、または処理中に発生した単一のエラーの場合があります。</target>
        </trans-unit>
        <trans-unit id="6fd38efe5a280152c0ed35ee9c7f2ad0f403268c" translate="yes" xml:space="preserve">
          <source>Reads the referenced XML schemas and controls they are valid. Returns the &lt;code&gt;global_state()&lt;/code&gt; with schema info or an error reason. The error reason may be a list of several errors or a single error encountered during the processing.</source>
          <target state="translated">参照されるXMLスキーマとそれらが有効なコントロールを読み取ります。スキーマ情報またはエラー理由を &lt;code&gt;global_state()&lt;/code&gt; を返します。エラーの理由は、いくつかのエラーのリスト、または処理中に発生した単一のエラーの場合があります。</target>
        </trans-unit>
        <trans-unit id="9173077db3e9017296abe012415cae4350f279ec" translate="yes" xml:space="preserve">
          <source>Reads the runtime system version (&lt;code&gt;&quot;5.10.4&quot;&lt;/code&gt;) and release version (&lt;code&gt;&quot;FIRST&quot;&lt;/code&gt;) from the file &lt;code&gt;start_erl.data&lt;/code&gt;.</source>
          <target state="translated">ファイル &lt;code&gt;start_erl.data&lt;/code&gt; からランタイムシステムバージョン（ &lt;code&gt;&quot;5.10.4&quot;&lt;/code&gt; ）とリリースバージョン（ &lt;code&gt;&quot;FIRST&quot;&lt;/code&gt; ）を読み取ります。</target>
        </trans-unit>
        <trans-unit id="839d040990703f858648a5ce1365721721986faf" translate="yes" xml:space="preserve">
          <source>Reads the schema state with all information of the processed schema from a file created with &lt;code&gt;state2file/[1,2]&lt;/code&gt;. The format of this file is internal. The state can then be used validating an XML document.</source>
          <target state="translated">&lt;code&gt;state2file/[1,2]&lt;/code&gt; で作成されたファイルから、処理されたスキーマのすべての情報を含むスキーマ状態を読み取ります。このファイルの形式は内部です。その後、状態を使用してXMLドキュメントを検証できます。</target>
        </trans-unit>
        <trans-unit id="bce1e5c45b80097e6f2841595672e121dabebb10" translate="yes" xml:space="preserve">
          <source>Reads the specified binary trace log(s). The logs are processed in the order of their time stamps as long as option &lt;code&gt;disable_sort&lt;/code&gt; is not specified.</source>
          <target state="translated">指定されたバイナリトレースログを読み取ります。オプション &lt;code&gt;disable_sort&lt;/code&gt; が指定されていない限り、ログはタイムスタンプの順に処理されます。</target>
        </trans-unit>
        <trans-unit id="148a9f2e73482a200b8b553fede2788e553b25f1" translate="yes" xml:space="preserve">
          <source>Reads the state of a timer that has been created by either &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt;erlang:send_after&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;TimerRef&lt;/code&gt; identifies the timer, and was returned by the BIF that created the timer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt;erlang:send_after&lt;/a&gt;&lt;/code&gt; のいずれかによって作成されたタイマーの状態を読み取ります。 &lt;code&gt;TimerRef&lt;/code&gt; はタイマーを識別し、タイマーを作成したBIFによって返されました。</target>
        </trans-unit>
        <trans-unit id="ce5cad4e11c1c94a9f2dab2d00983fc0cb846b46" translate="yes" xml:space="preserve">
          <source>Reads the state of a timer. The same as calling &lt;code&gt;&lt;a href=&quot;#read_timer-2&quot;&gt;erlang:read_timer(TimerRef, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タイマーの状態を読み取ります。 &lt;code&gt;&lt;a href=&quot;#read_timer-2&quot;&gt;erlang:read_timer(TimerRef, [])&lt;/a&gt;&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="9aa5c569849cf218527f93f7dee3cdc648481493" translate="yes" xml:space="preserve">
          <source>Reads using &lt;code&gt;UserPrivate&lt;/code&gt; but only &lt;code&gt;Size&lt;/code&gt; bytes. Notice that there is only an arity-2 read function, not an arity-1 function.</source>
          <target state="translated">&lt;code&gt;UserPrivate&lt;/code&gt; を使用して読み取りますが、 &lt;code&gt;Size&lt;/code&gt; バイトのみです。arity-2読み取り関数のみがあり、arity-1関数はないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="15d4f658eb0b3d94a3c309c489e7d4e9bdbc4f01" translate="yes" xml:space="preserve">
          <source>Realloc always moves. When enabled, reallocate operations are more or less translated into an allocate, copy, free sequence. This often reduces memory fragmentation, but costs performance.</source>
          <target state="translated">Realloc は常に移動します。これを有効にすると、再配置操作は多かれ少なかれ、割り当て、コピー、フリーのシーケンスに変換されます。これはしばしばメモリの断片化を減らすことができますが、パフォーマンスが低下します。</target>
        </trans-unit>
        <trans-unit id="fd9c4c1a235d7360d6343d538e931ae913df1102" translate="yes" xml:space="preserve">
          <source>Reallocates memory allocated by &lt;code&gt;&lt;a href=&quot;#enif_alloc&quot;&gt;enif_alloc&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_alloc&quot;&gt;enif_alloc&lt;/a&gt;&lt;/code&gt; によって割り当てられたメモリを &lt;code&gt;size&lt;/code&gt; バイトに再割り当てします。</target>
        </trans-unit>
        <trans-unit id="db92aea9f5fbc58fe0efec58ed9588b7d88ee22c" translate="yes" xml:space="preserve">
          <source>Reason :: term(),</source>
          <target state="translated">理由 ::term()。</target>
        </trans-unit>
        <trans-unit id="6891013bdffc70486bc0bdf2c393714c46955deb" translate="yes" xml:space="preserve">
          <source>Rebalances &lt;code&gt;Tree1&lt;/code&gt;. Notice that this is rarely necessary, but can be motivated when many nodes have been deleted from the tree without further insertions. Rebalancing can then be forced to minimize lookup times, as deletion does not rebalance the tree.</source>
          <target state="translated">リバランス &lt;code&gt;Tree1&lt;/code&gt; 。これが必要になることはめったにありませんが、それ以上の挿入なしに多くのノードがツリーから削除されている場合に動機を与えることができることに注意してください。削除するとツリーの再調整が行われないため、再調整を強制してルックアップ時間を最小限に抑えることができます。</target>
        </trans-unit>
        <trans-unit id="562c2b623630d3b42ab3e60d86c0debcf41c1ff3" translate="yes" xml:space="preserve">
          <source>Rebalances the tree representation of &lt;code&gt;Set1&lt;/code&gt;. Notice that this is rarely necessary, but can be motivated when a large number of elements have been deleted from the tree without further insertions. Rebalancing can then be forced to minimise lookup times, as deletion does not rebalance the tree.</source>
          <target state="translated">&lt;code&gt;Set1&lt;/code&gt; のツリー表現を再調整します。これが必要になることはめったにありませんが、追加の挿入なしでツリーから多数の要素が削除された場合に動機を与えることができます。削除するとツリーの再調整が行われないため、再調整を強制してルックアップ時間を最小限に抑えることができます。</target>
        </trans-unit>
        <trans-unit id="65975122721ed3cffdcd5af89ade5a30eb41911c" translate="yes" xml:space="preserve">
          <source>Reboots the system by making the old release permanent, and calls &lt;code&gt;init:reboot()&lt;/code&gt; directly. The release must have status &lt;code&gt;old&lt;/code&gt;.</source>
          <target state="translated">古いリリースを永続化してシステムを &lt;code&gt;init:reboot()&lt;/code&gt; 、init：reboot（）を直接呼び出します。リリースのステータスは &lt;code&gt;old&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="c151c49267645ae0a3f97285a4421925221ab63e" translate="yes" xml:space="preserve">
          <source>Recall that a call is a pair (From, To). &lt;code&gt;domain&lt;/code&gt; applied to a set of calls is interpreted as the set of all vertices From, and &lt;code&gt;range&lt;/code&gt; as the set of all vertices To. The interpretation of the &lt;code&gt;strict&lt;/code&gt; operator is the operand with all calls on the form (A, A) removed.</source>
          <target state="translated">呼び出しはペア（From、To）であることを思い出してください。呼び出しのセットに適用された &lt;code&gt;domain&lt;/code&gt; は、すべての頂点のセットFromとして解釈され、 &lt;code&gt;range&lt;/code&gt; はすべての頂点のセットTo として解釈されます。 &lt;code&gt;strict&lt;/code&gt; 演算子の解釈は、フォーム（A、A）のすべての呼び出しが削除されたオペランドです。</target>
        </trans-unit>
        <trans-unit id="fbe39f3322855d03ba354f72c527385f73d95360" translate="yes" xml:space="preserve">
          <source>Receive buffer size.</source>
          <target state="translated">受信バッファのサイズを指定します。</target>
        </trans-unit>
        <trans-unit id="4ae1a5ec8aa92d4958acd89043f891f02e540bf3" translate="yes" xml:space="preserve">
          <source>Receive notification of a notation declaration event.</source>
          <target state="translated">記法宣言イベントの通知を受信します。</target>
        </trans-unit>
        <trans-unit id="5544b22e095d4110eb969347412c5f0ad7a7eb1f" translate="yes" xml:space="preserve">
          <source>Receive notification of a processing instruction. The Parser will send this event once for each processing instruction found: note that processing instructions may occur before or after the main document element.</source>
          <target state="translated">処理命令の通知を受け取ります。パーサは見つけられた各処理命令に対して一度このイベントを送信します:処理命令はメイン文書要素の前か後に起こるかもしれないことに注意して下さい。</target>
        </trans-unit>
        <trans-unit id="fbbc3c20409ab8df6511a3a9d041b81bc1f03484" translate="yes" xml:space="preserve">
          <source>Receive notification of an unparsed entity declaration event.</source>
          <target state="translated">パースされていないエンティティ宣言イベントの通知を受信します。</target>
        </trans-unit>
        <trans-unit id="b0f707ac12424cf8350e1640b548139d4dcbc752" translate="yes" xml:space="preserve">
          <source>Receive notification of character data.</source>
          <target state="translated">キャラクターデータの通知を受信します。</target>
        </trans-unit>
        <trans-unit id="e1ed75deeb63816becb327823827f361dc002ace" translate="yes" xml:space="preserve">
          <source>Receive notification of ignorable whitespace in element content.</source>
          <target state="translated">要素コンテンツ内の無視可能な空白の通知を受信します。</target>
        </trans-unit>
        <trans-unit id="7ad2df2530dcae85b22b6938c6f4a1d9b0af6c9a" translate="yes" xml:space="preserve">
          <source>Receive notification of the beginning of a document. The SAX parser will send this event only once before any other event callbacks.</source>
          <target state="translated">文書の開始の通知を受信します。SAXパーサーは、他のイベントコールバックの前に一度だけこのイベントを送信します。</target>
        </trans-unit>
        <trans-unit id="877d2315fff28722da3564b35f709435f38d644a" translate="yes" xml:space="preserve">
          <source>Receive notification of the beginning of an element. The Parser will send this event at the beginning of every element in the XML document; there will be a corresponding endElement event for every startElement event (even when the element is empty). All of the element's content will be reported, in order, before the corresponding endElement event.</source>
          <target state="translated">要素の開始の通知を受け取ります。パーサはXML文書内の全ての要素の初めにこのイベントを送ります;全てのstartElementイベントに対応するendElementイベントがあります(要素が空であっても)。全ての要素の内容は、対応するendElementイベントの前に順番に報告されます。</target>
        </trans-unit>
        <trans-unit id="8643851b60b52ba3b3a806063fe1eea7f4aff427" translate="yes" xml:space="preserve">
          <source>Receive notification of the end of a document. The SAX parser will send this event only once, and it will be the last event during the parse.</source>
          <target state="translated">文書の終了通知を受信します。SAXパーサはこのイベントを一度だけ送信し、これがパース中の最後のイベントとなります。</target>
        </trans-unit>
        <trans-unit id="7bb259e3df1d0efa19aa9bec712acc5ac84cbaf8" translate="yes" xml:space="preserve">
          <source>Receive notification of the end of an element. The SAX parser will send this event at the end of every element in the XML document; there will be a corresponding startElement event for every endElement event (even when the element is empty).</source>
          <target state="translated">要素の終了の通知を受け取ります。SAXパーサーは、XML文書内の各要素の終了時にこのイベントを送信します。</target>
        </trans-unit>
        <trans-unit id="8797c16612fdf5d27b7de210d50ba2cccb65cc70" translate="yes" xml:space="preserve">
          <source>Receive pending limit (see the MGOriginatedPendingLimit and the MGCOriginatedPendingLimit of the megaco root package). This parameter specifies how many pending messages that can be received (for a sent transaction request). When the limit is exceeded, the transaction is considered lost, and an error returned to the user (through the call-back function &lt;strong&gt;handle_trans_reply&lt;/strong&gt;).</source>
          <target state="translated">保留中の制限を受け取ります（megacoルートパッケージのMGOriginatedPendingLimitおよびMGCOriginatedPendingLimitを参照してください）。このパラメーターは、（送信されたトランザクション要求に対して）受信できる保留メッセージの数を指定します。制限を超えると、トランザクションは失われたと見なされ、エラーが（コールバック関数&lt;strong&gt;handle_trans_replyを&lt;/strong&gt;介して）ユーザーに返されます。</target>
        </trans-unit>
        <trans-unit id="3d5ecbcb08d0f4d6115bb32ff52731dfbd7a7c13" translate="yes" xml:space="preserve">
          <source>Received &lt;code&gt;Packet&lt;/code&gt; is delivered as a binary.</source>
          <target state="translated">受信 &lt;code&gt;Packet&lt;/code&gt; はバイナリとして配信されます。</target>
        </trans-unit>
        <trans-unit id="d4fc2c4f32aaa7580a805013b8ff075ec71d5b9a" translate="yes" xml:space="preserve">
          <source>Received &lt;code&gt;Packet&lt;/code&gt; is delivered as a list.</source>
          <target state="translated">受信 &lt;code&gt;Packet&lt;/code&gt; はリストとして配信されます。</target>
        </trans-unit>
        <trans-unit id="095439cd3a95f819e845e63f1a8b1cf9a8ac21eb" translate="yes" xml:space="preserve">
          <source>Received &lt;code&gt;Packet&lt;/code&gt; is delivered as defined by &lt;code&gt;Mode&lt;/code&gt;.</source>
          <target state="translated">受信 &lt;code&gt;Packet&lt;/code&gt; は、 &lt;code&gt;Mode&lt;/code&gt; の定義に従って配信されます。</target>
        </trans-unit>
        <trans-unit id="11bdd920d9bb9ec7f1744e588b3249a3eb42f4bc" translate="yes" xml:space="preserve">
          <source>Receives a chunk of the remote file (&lt;code&gt;RemoteFile&lt;/code&gt; of &lt;code&gt;recv_chunk_start&lt;/code&gt;). The return values have the following meaning:</source>
          <target state="translated">リモートファイルのチャンク（ &lt;code&gt;RemoteFile&lt;/code&gt; の &lt;code&gt;recv_chunk_start&lt;/code&gt; ）を受け取ります。戻り値には次の意味があります。</target>
        </trans-unit>
        <trans-unit id="de7f79d5297387bcfc0d13974523a5f34bf53062" translate="yes" xml:space="preserve">
          <source>Receives a message consisting of a sequence of bytes in the Erlang external format.</source>
          <target state="translated">Erlangの外部フォーマットで一連のバイトからなるメッセージを受信します。</target>
        </trans-unit>
        <trans-unit id="79120148644e55cd552daccc123d05a76cb9f13a" translate="yes" xml:space="preserve">
          <source>Receives a message to the buffer in &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;ei_xreceive_msg&lt;/code&gt; allows the buffer in &lt;code&gt;x&lt;/code&gt; to grow, but &lt;code&gt;ei_receive_msg&lt;/code&gt; fails if the message is larger than the pre-allocated buffer in &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">バッファへのメッセージを &lt;code&gt;x&lt;/code&gt; で受信します。 &lt;code&gt;ei_xreceive_msg&lt;/code&gt; は、バッファ可能 &lt;code&gt;x&lt;/code&gt; が成長するが、 &lt;code&gt;ei_receive_msg&lt;/code&gt; は、メッセージがで予め割り当てられたバッファよりも大きい場合には失敗し &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88ade3e878d068456efb014fd72f2989e409bb39" translate="yes" xml:space="preserve">
          <source>Receives a packet from a socket in passive mode. A closed socket is indicated by return value &lt;code&gt;{error, closed}&lt;/code&gt;.</source>
          <target state="translated">パッシブモードでソケットからパケットを受信します。閉じたソケットは、戻り値 &lt;code&gt;{error, closed}&lt;/code&gt; 示されます。</target>
        </trans-unit>
        <trans-unit id="0c7ccc2574bf778a71ae7a9543f1b346cd8d49c7" translate="yes" xml:space="preserve">
          <source>Receives a packet from a socket in passive mode. Optional parameter &lt;code&gt;Timeout&lt;/code&gt; specifies a time-out in milliseconds. Defaults to &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">パッシブモードでソケットからパケットを受信します。オプションパラメータ &lt;code&gt;Timeout&lt;/code&gt; は、タイムアウトをミリ秒単位で指定します。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ef7ad247f4d592c4f5c9dd57f0200426e983df3e" translate="yes" xml:space="preserve">
          <source>Receives expected data from server on the specified session channel.</source>
          <target state="translated">指定されたセッションチャネルでサーバから期待されるデータを受信します。</target>
        </trans-unit>
        <trans-unit id="cec7dde1707a867ec3ac180b1d8faf20bd5a279e" translate="yes" xml:space="preserve">
          <source>Receives messages sent to the process using the send operator (!). The patterns &lt;code&gt;Pattern&lt;/code&gt; are sequentially matched against the first message in time order in the mailbox, then the second, and so on. If a match succeeds and the optional guard sequence &lt;code&gt;GuardSeq&lt;/code&gt; is true, the corresponding &lt;code&gt;Body&lt;/code&gt; is evaluated. The matching message is consumed, that is, removed from the mailbox, while any other messages in the mailbox remain unchanged.</source>
          <target state="translated">送信演算子（！）を使用してプロセスに送信されたメッセージを受信します。パターン &lt;code&gt;Pattern&lt;/code&gt; は、メールボックスの時間順で最初のメッセージに対して順番に照合され、次に2番目、というように照合されます。一致が成功し、オプションのガードシーケンス &lt;code&gt;GuardSeq&lt;/code&gt; がtrueの場合、対応する &lt;code&gt;Body&lt;/code&gt; が評価されます。一致するメッセージは消費されます。つまり、メールボックスから削除されますが、メールボックス内の他のメッセージは変更されません。</target>
        </trans-unit>
        <trans-unit id="5cc1284ee604f9633073521a2db79d9f71aff293" translate="yes" xml:space="preserve">
          <source>Receives one packet of data.</source>
          <target state="translated">1パケットのデータを受信します。</target>
        </trans-unit>
        <trans-unit id="43e2b0fdb2b90c2ae0d79559c9136a0b0fbf1061" translate="yes" xml:space="preserve">
          <source>Receives the &lt;code&gt;Data&lt;/code&gt; message from any association of the socket. If the receive times out, &lt;code&gt;{error,timeout}&lt;/code&gt; is returned. The default time-out is &lt;code&gt;infinity&lt;/code&gt;. &lt;code&gt;FromIP&lt;/code&gt; and &lt;code&gt;FromPort&lt;/code&gt; indicate the address of the sender.</source>
          <target state="translated">受信した &lt;code&gt;Data&lt;/code&gt; ソケットのいずれかの協会からのメッセージを。受信が &lt;code&gt;{error,timeout}&lt;/code&gt; した場合、{error、timeout}が返されます。デフォルトのタイムアウトは &lt;code&gt;infinity&lt;/code&gt; です。 &lt;code&gt;FromIP&lt;/code&gt; と &lt;code&gt;FromPort&lt;/code&gt; は送信者のアドレスを示します。</target>
        </trans-unit>
        <trans-unit id="31c3f1b8ef20a940b9e8eca2f6ff181ad7a8d16d" translate="yes" xml:space="preserve">
          <source>Receives the message into the specified buffer and decodes into &lt;code&gt;(ErlMessage *) emsg&lt;/code&gt;.</source>
          <target state="translated">指定されたバッファーにメッセージを受信し、 &lt;code&gt;(ErlMessage *) emsg&lt;/code&gt; デコードします。</target>
        </trans-unit>
        <trans-unit id="6e89cb081d99ed724d5931544bc83550c03a78c4" translate="yes" xml:space="preserve">
          <source>Receiving Requests</source>
          <target state="translated">リクエストの受信</target>
        </trans-unit>
        <trans-unit id="077d735aed11e2e48a44668a13373797ed93e95f" translate="yes" xml:space="preserve">
          <source>Receiving process/port and message term</source>
          <target state="translated">受信プロセス/ポートとメッセージ用語</target>
        </trans-unit>
        <trans-unit id="1019a13cb6e4b083bd8b40b2d7fb5371dc84bfe2" translate="yes" xml:space="preserve">
          <source>Receiving segmented messages:</source>
          <target state="translated">セグメント化されたメッセージを受信します。</target>
        </trans-unit>
        <trans-unit id="5754a8bb83120ef7d69ead91ce581426fad83335" translate="yes" xml:space="preserve">
          <source>Recognized request methods and header fields are returned as atoms. Others are returned as strings. Strings of unrecognized header fields are formatted with only capital letters first and after hyphen characters, for example, &lt;code&gt;&quot;Sec-Websocket-Key&quot;&lt;/code&gt;.</source>
          <target state="translated">認識されたリクエストメソッドとヘッダーフィールドはアトムとして返されます。その他は文字列として返されます。認識されないヘッダーフィールドの文字列は、 &lt;code&gt;&quot;Sec-Websocket-Key&quot;&lt;/code&gt; のように、最初と最後のハイフン文字のみが大文字でフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="06210493d8afafd3fbe9c98e7aefe7e12c50cb5e" translate="yes" xml:space="preserve">
          <source>Recommendations:</source>
          <target state="translated">Recommendations:</target>
        </trans-unit>
        <trans-unit id="4e0d0a34940fd710c8e8528aed83c032f4775bdb" translate="yes" xml:space="preserve">
          <source>Recomposing a map of URI components into a URI string</source>
          <target state="translated">URIコンポーネントのマップをURI文字列に再構成する</target>
        </trans-unit>
        <trans-unit id="ce83d6ed524fb80981aa317a9b2ad1f780cc5c35" translate="yes" xml:space="preserve">
          <source>Reconnection interval (time to wait in between reconnection attempts) = 5 seconds</source>
          <target state="translated">再接続間隔(再接続試行間の待ち時間)=5秒</target>
        </trans-unit>
        <trans-unit id="1fdeec60896b5fb2de70c54c0789290dbd55f5e0" translate="yes" xml:space="preserve">
          <source>Reconstitute a parsed dictionary, as returned by &lt;code&gt;&lt;a href=&quot;#codec-2&quot;&gt;codec/2&lt;/a&gt;&lt;/code&gt;, without using &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#inherits&quot;&gt;@inherits&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;. That is, construct an equivalent dictionary in which all AVP's are definined in the dictionary itself. The return value is also a parsed dictionary.</source>
          <target state="translated">&lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#inherits&quot;&gt;@inherits&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; を使用せずに、 &lt;code&gt;&lt;a href=&quot;#codec-2&quot;&gt;codec/2&lt;/a&gt;&lt;/code&gt; から返された解析済み辞書を再構成します。つまり、すべてのAVPが辞書自体で定義されている同等の辞書を作成します。戻り値も解析済みの辞書です。</target>
        </trans-unit>
        <trans-unit id="1d4ca640183de7618d71ecdb2e23d9ce63837fd1" translate="yes" xml:space="preserve">
          <source>Record definitions are allowed anywhere in a module, also among the function declarations. Read more in &lt;code&gt;&lt;a href=&quot;records&quot;&gt;Records&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">レコード定義は、モジュール内のどこでも、関数宣言の間でも許可されます。詳細については、 &lt;code&gt;&lt;a href=&quot;records&quot;&gt;Records&lt;/a&gt;&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="016cb45280daecda9b7b119fc9dace58154435ea" translate="yes" xml:space="preserve">
          <source>Record definitions for this module can be found using:</source>
          <target state="translated">このモジュールのレコード定義は、以下を使用して見つけることができます。</target>
        </trans-unit>
        <trans-unit id="7cd9a03d9ebf3a3c8f7631f0aa5a3cf6db8bbced" translate="yes" xml:space="preserve">
          <source>Record expressions are translated to tuple expressions during compilation. A record defined as:</source>
          <target state="translated">レコード式はコンパイル時にタプル式に変換されます。として定義されたレコード。</target>
        </trans-unit>
        <trans-unit id="7cb719be81341614e030a4a2e403c5ea98aca76f" translate="yes" xml:space="preserve">
          <source>Record names versus table names</source>
          <target state="translated">レコード名とテーブル名</target>
        </trans-unit>
        <trans-unit id="144612104dcd31483365025648e162a5188453ca" translate="yes" xml:space="preserve">
          <source>Records allow references to the fields by name, instead of by position. In the following example, a record instead of a tuple is used to store the data:</source>
          <target state="translated">レコードでは、位置ではなく名前でフィールドを参照することができます。次の例では、タプルの代わりにレコードを使用してデータを保存しています。</target>
        </trans-unit>
        <trans-unit id="613bf96af83ed6c9b691f468cc1cafc02874076f" translate="yes" xml:space="preserve">
          <source>Records are extended to possibly contain type information. This is described in &lt;code&gt;&lt;a href=&quot;#typeinrecords&quot;&gt;Type Information in Record Declarations&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">レコードが拡張され、タイプ情報が含まれる可能性があります。これは &lt;code&gt;&lt;a href=&quot;#typeinrecords&quot;&gt;Type Information in Record Declarations&lt;/a&gt;&lt;/code&gt; 説明されています。</target>
        </trans-unit>
        <trans-unit id="cf99ef8454e1e901403d3747fabb549275497b0b" translate="yes" xml:space="preserve">
          <source>Records have possibly been deleted. &lt;code&gt;What&lt;/code&gt; is either &lt;code&gt;{Table, Key}&lt;/code&gt; or a record &lt;code&gt;{RecordName, Key, ...}&lt;/code&gt; that was deleted. Notice that the new content depends on the table type.</source>
          <target state="translated">レコードが削除された可能性があります。 &lt;code&gt;What&lt;/code&gt; のいずれかである &lt;code&gt;{Table, Key}&lt;/code&gt; またはレコード &lt;code&gt;{RecordName, Key, ...}&lt;/code&gt; を削除しました。新しいコンテンツはテーブルのタイプによって異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9f89198d9e262f6073124ec6efc26bc57f43b091" translate="yes" xml:space="preserve">
          <source>Records in &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;bag&lt;/code&gt; tables are not ordered. However, there is an ordering of the records that is unknown to the user. A table can therefore be traversed by this function with the function &lt;code&gt;mnesia:next/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; テーブルまたは &lt;code&gt;bag&lt;/code&gt; テーブルのレコードは順序付けされていません。ただし、ユーザーには不明なレコードの順序があります。したがって、この関数は、関数 &lt;code&gt;mnesia:next/2&lt;/code&gt; を使用してテーブルをトラバースできます。</target>
        </trans-unit>
        <trans-unit id="59700296e24a1cf9794576dac5b155d8b10dbdb1" translate="yes" xml:space="preserve">
          <source>Records in &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;bag&lt;/code&gt; tables are not ordered. However, there is an ordering of the records that is unknown to the user. Therefore, a table can be traversed by this function with the function &lt;code&gt;mnesia:dirty_next/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; テーブルまたは &lt;code&gt;bag&lt;/code&gt; テーブルのレコードは順序付けされていません。ただし、ユーザーには不明なレコードの順序があります。したがって、関数 &lt;code&gt;mnesia:dirty_next/2&lt;/code&gt; を使用して、この関数でテーブルをトラバースできます。</target>
        </trans-unit>
        <trans-unit id="75d7ddf3a47ed2b29eb25eb18cb6fa66a868c9de" translate="yes" xml:space="preserve">
          <source>Records in &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;bag&lt;/code&gt; tables are not sorted. However, there is a record order that is unknown to the user. This means that a table can be traversed by this function with the function &lt;code&gt;&lt;a href=&quot;mnesia#dirty_next-2&quot;&gt;mnesia:dirty_next/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; テーブルまたは &lt;code&gt;bag&lt;/code&gt; テーブルのレコードはソートされません。ただし、ユーザーには不明なレコードの順序があります。これは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#dirty_next-2&quot;&gt;mnesia:dirty_next/2&lt;/a&gt;&lt;/code&gt; を使用して、この関数がテーブルをトラバースできることを意味します。</target>
        </trans-unit>
        <trans-unit id="bb519de4fc078d24d538560c361925ce544f5dec" translate="yes" xml:space="preserve">
          <source>Recovery from communication failure</source>
          <target state="translated">通信障害からの回復</target>
        </trans-unit>
        <trans-unit id="c857be3a0573cdabebb7a961ed6d631e3f3733de" translate="yes" xml:space="preserve">
          <source>Recovery of transactions</source>
          <target state="translated">取引の回収</target>
        </trans-unit>
        <trans-unit id="b82d4c7650ef2416c470136be1d0e55fc283f2db" translate="yes" xml:space="preserve">
          <source>Recreates the file &lt;code&gt;mysystem.tar.gz&lt;/code&gt; from the directories in the directory &lt;code&gt;tmp&lt;/code&gt; and removes &lt;code&gt;tmp&lt;/code&gt;.</source>
          <target state="translated">ファイルの再作成 &lt;code&gt;mysystem.tar.gz&lt;/code&gt; ディレクトリ内のディレクトリから &lt;code&gt;tmp&lt;/code&gt; および削除し &lt;code&gt;tmp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0c24b60848ddc6e8e54f77a11b281c810436a9a" translate="yes" xml:space="preserve">
          <source>Recursion processing in PCRE differs from Perl in two important ways. In PCRE (like Python, but unlike Perl), a recursive subpattern call is always treated as an atomic group. That is, once it has matched some of the subject string, it is never re-entered, even if it contains untried alternatives and there is a subsequent matching failure. This can be illustrated by the following pattern, which means to match a palindromic string containing an odd number of characters (for example, &quot;a&quot;, &quot;aba&quot;, &quot;abcba&quot;, &quot;abcdcba&quot;):</source>
          <target state="translated">PCREにおける再帰処理は、Perlとは2つの重要な点で異なります。PCREでは(Pythonと同様ですが、Perlとは異なります)、再帰的なサブパターン呼び出しは常にアトミックグループとして扱われます。つまり、一度サブジェクト文字列の一部にマッチしてしまうと、それが未検証の代替案を含んでいてマッチングに失敗したとしても、再入力されることはありません。これは、奇数の文字を含む回文文字列(例えば、&quot;a&quot;,&quot;aba&quot;,&quot;abcba&quot;,&quot;abcdcba&quot;)にマッチすることを意味する次のパターンで説明することができる。</target>
        </trans-unit>
        <trans-unit id="49c36f3bbb51240a32d3b51ef263546135b56e0d" translate="yes" xml:space="preserve">
          <source>Redefined and undefined functions</source>
          <target state="translated">再定義された関数と未定義の関数</target>
        </trans-unit>
        <trans-unit id="9821e8e3eb5f0b3550eb425437d414bd5f509995" translate="yes" xml:space="preserve">
          <source>Redirect Agents</source>
          <target state="translated">リダイレクトエージェント</target>
        </trans-unit>
        <trans-unit id="cb2b5a6cb4c9d318ad4e5065d9f3485f316f8814" translate="yes" xml:space="preserve">
          <source>Redirect Erlang input and output streams on Unix systems.</source>
          <target state="translated">Unixシステム上でErlangの入出力ストリームをリダイレクトする。</target>
        </trans-unit>
        <trans-unit id="c502d3c9c5fc88582d123f9cda4001ffbea9a9f6" translate="yes" xml:space="preserve">
          <source>Redirect-Host AVP</source>
          <target state="translated">リダイレクトホストAVP</target>
        </trans-unit>
        <trans-unit id="1e581fb68f4db03f158c73399e1aef520dcfaf98" translate="yes" xml:space="preserve">
          <source>Redirect-Host-Usage AVP</source>
          <target state="translated">リダイレクトホスト利用AVP</target>
        </trans-unit>
        <trans-unit id="a1446afc50214ae3e357fb0a71f59e2404d18c81" translate="yes" xml:space="preserve">
          <source>Redirect-Host-Usage AVP Values</source>
          <target state="translated">Redirect-Host-Usage AVP 値</target>
        </trans-unit>
        <trans-unit id="cd193b05a97a631073ccb483d47d26ea1dafe644" translate="yes" xml:space="preserve">
          <source>Redirect-Max-Cache-Time AVP</source>
          <target state="translated">リダイレクトマックスキャッシュタイムAVP</target>
        </trans-unit>
        <trans-unit id="7dc43d4ac811f4906c7b139115075f47a12d9c79" translate="yes" xml:space="preserve">
          <source>Redirecting Requests</source>
          <target state="translated">リクエストのリダイレクト</target>
        </trans-unit>
        <trans-unit id="98d90033419f07be437a04bf22d4b03540b1022d" translate="yes" xml:space="preserve">
          <source>Redirects all report output from the RB tool to the specified file, registered name, or &lt;code&gt;io_device&lt;/code&gt;.</source>
          <target state="translated">RBツールからのすべてのレポート出力を、指定されたファイル、登録名、または &lt;code&gt;io_device&lt;/code&gt; にリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="d20e63f8c7e8894f58f191215bb077b8a93d30c2" translate="yes" xml:space="preserve">
          <source>Redraw line</source>
          <target state="translated">線の再描画</target>
        </trans-unit>
        <trans-unit id="e6d86c37ebe8a894ce36d13e14a286c242f0c262" translate="yes" xml:space="preserve">
          <source>Redundant directory separators are removed.</source>
          <target state="translated">冗長なディレクトリセパレータが削除されます。</target>
        </trans-unit>
        <trans-unit id="e227dfcf432b828dab887b3933a18c3b63d3ed41" translate="yes" xml:space="preserve">
          <source>Ref is the value that was returned from the call to &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; that has lead to starting of a transport process.</source>
          <target state="translated">Refは、 &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; の呼び出しから返された値で、トランスポートプロセスの開始につながっています。</target>
        </trans-unit>
        <trans-unit id="1c0d648927926fa5ea5d04766e8a678e8fc58490" translate="yes" xml:space="preserve">
          <source>Refc binaries consist of two parts:</source>
          <target state="translated">Refcバイナリは2つの部分から構成されています。</target>
        </trans-unit>
        <trans-unit id="d231e7267d9cb6cb23fcfa03c8ac87df69935c7e" translate="yes" xml:space="preserve">
          <source>Refer also to the chapter(s) &lt;code&gt;&lt;a href=&quot;snmp_agent_config_files&quot;&gt;Definition of Agent Configuration Files&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmp_manager_config_files&quot;&gt;Definition of Manager Configuration Files&lt;/a&gt;&lt;/code&gt; which contains more detailed information about the agent and manager configuration files.</source>
          <target state="translated">エージェントとマネージャの構成ファイルに関する詳細情報が含まれている &lt;code&gt;&lt;a href=&quot;snmp_manager_config_files&quot;&gt;Definition of Manager Configuration Files&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;snmp_agent_config_files&quot;&gt;Definition of Agent Configuration Files&lt;/a&gt;&lt;/code&gt; 定義」および「マネージャ構成ファイルの定義」の章も参照してください。</target>
        </trans-unit>
        <trans-unit id="2222f6b50ec8d89285956cc68d86c2224b726ef7" translate="yes" xml:space="preserve">
          <source>Refer to &lt;code&gt;rt_mask/2&lt;/code&gt; for a list of valid categories. All categories are enabled by default.</source>
          <target state="translated">有効なカテゴリのリストについては、 &lt;code&gt;rt_mask/2&lt;/code&gt; を参照してください。すべてのカテゴリはデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="6ffdd2bd542a285efd2de4779f5b373c9466faf0" translate="yes" xml:space="preserve">
          <source>Refer to the Mnesia User's Guide for information on how to declare a Mnesia table as an SNMP table.</source>
          <target state="translated">MnesiaテーブルをSNMPテーブルとして宣言する方法については、Mnesiaユーザーズガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="f0e653ef4f1da220b6cd05bc836f3690e633c668" translate="yes" xml:space="preserve">
          <source>Refer to the chapter &lt;code&gt;&lt;a href=&quot;snmp_advanced_agent&quot;&gt;Advanced Agent Topics&lt;/a&gt;&lt;/code&gt; in this User's Guide for more information about these topics.</source>
          <target state="translated">これらのトピックの詳細については、このユーザーズガイドの「 &lt;code&gt;&lt;a href=&quot;snmp_advanced_agent&quot;&gt;Advanced Agent Topics&lt;/a&gt;&lt;/code&gt; の章を参照してください。</target>
        </trans-unit>
        <trans-unit id="0e379ff749b13f33a9df504f29d8f8b458d827d7" translate="yes" xml:space="preserve">
          <source>Refer to the following documentation for more information about &lt;code&gt;Event Tracer (ET)&lt;/code&gt; and about the Erlang/OTP development system:</source>
          <target state="translated">&lt;code&gt;Event Tracer (ET)&lt;/code&gt; とErlang / OTP開発システムの詳細については、次のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f539ecbb66f8ec24d2e6f1646377a431c040604d" translate="yes" xml:space="preserve">
          <source>Refer to the following documentation for more information about Megaco/H.248 and about the Erlang/OTP development system:</source>
          <target state="translated">Megaco/H.248とErlang/OTP開発システムの詳細については、以下のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e44a86d89e003984ea5ef73cfad4e5d309a9ade7" translate="yes" xml:space="preserve">
          <source>Refer to the following documentation for more information about Reltool and about the Erlang/OTP development system:</source>
          <target state="translated">ReltoolとErlang/OTP開発システムについての詳細は以下のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5ebdb38c8d53695f9ea0d66e56f5fddcaa30ef1c" translate="yes" xml:space="preserve">
          <source>Refer to the following documentation for more information about SNMP and about the Erlang/OTP development system:</source>
          <target state="translated">SNMPとErlang/OTP開発システムについての詳細は以下のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="e0dc153ae2bdd0fe9582cae3b3c29c7ba9a0ae63" translate="yes" xml:space="preserve">
          <source>Reference IDs</source>
          <target state="translated">リファレンスID</target>
        </trans-unit>
        <trans-unit id="27c7472e340ed21263acad4148dc337d9d6c12a1" translate="yes" xml:space="preserve">
          <source>Reference Identifier</source>
          <target state="translated">参照識別子</target>
        </trans-unit>
        <trans-unit id="713c0142116eaba09081a317268f9ee98220982c" translate="yes" xml:space="preserve">
          <source>Reference returned by &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; that identifies the configuration.</source>
          <target state="translated">構成を識別する &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; によって返される参照。</target>
        </trans-unit>
        <trans-unit id="9c5d563f657af29bb1ef8ba94dfb428a73fff530" translate="yes" xml:space="preserve">
          <source>Reference to the &lt;code&gt;ssh&lt;/code&gt; connection as returned by &lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;ssh:connect/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;ssh:connect/3&lt;/a&gt;&lt;/code&gt; によって返される &lt;code&gt;ssh&lt;/code&gt; 接続への参照。</target>
        </trans-unit>
        <trans-unit id="21c316b9ea2c08e8a30d1111d9a15dea4523351d" translate="yes" xml:space="preserve">
          <source>Referenced modules are now parsed when the compiler finds an entity that is imported. No code is generated for the referenced module. However, the compiled modules rely on that the referenced modules are also compiled.</source>
          <target state="translated">コンパイラがインポートされたエンティティを見つけると、参照されたモジュールが解析されるようになりました。参照されたモジュールのコードは生成されません。ただし、コンパイルされたモジュールは、参照されたモジュールもコンパイルされていることに依存します。</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="5dfbb32d4eeb2b41a35cac6863870075ee04f983" translate="yes" xml:space="preserve">
          <source>References.</source>
          <target state="translated">References.</target>
        </trans-unit>
        <trans-unit id="9d1e4e7d27b519b1da3d7266c9c87d7861741080" translate="yes" xml:space="preserve">
          <source>References:</source>
          <target state="translated">References:</target>
        </trans-unit>
        <trans-unit id="7a7812481d7d8a559db48b96be55b5b061c0f69c" translate="yes" xml:space="preserve">
          <source>Refers to the atom with &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;#distribution_header&quot;&gt;distribution header&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#distribution_header&quot;&gt;distribution header&lt;/a&gt;&lt;/code&gt; &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; を持つアトムを参照します。</target>
        </trans-unit>
        <trans-unit id="36717b8ae4c9e2f35cbb35a6b8557e62f3195790" translate="yes" xml:space="preserve">
          <source>Refreshes the top-level HTML index files.</source>
          <target state="translated">トップレベルのHTMLインデックスファイルを更新します。</target>
        </trans-unit>
        <trans-unit id="94ce43532e416f84ee6391e5a1ef349f36f00a42" translate="yes" xml:space="preserve">
          <source>RegArity ::= RegString | Number | &lt;code&gt;_&lt;/code&gt; | &lt;code&gt;-1&lt;/code&gt;</source>
          <target state="translated">RegArity :: = RegString | 番号| &lt;code&gt;_&lt;/code&gt; | &lt;code&gt;-1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3acf35ba403cbdbfa0631a0b0f04b366e0b454d8" translate="yes" xml:space="preserve">
          <source>RegAtom ::= RegString | Atom | &lt;code&gt;_&lt;/code&gt;</source>
          <target state="translated">RegAtom :: = RegString | アトム| &lt;code&gt;_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41639ede4e105dbe6f8a9955f29465cf6b7d6c32" translate="yes" xml:space="preserve">
          <source>RegExpr ::= RegString &lt;code&gt;:&lt;/code&gt; Type | RegFunc | RegFunc &lt;code&gt;:&lt;/code&gt; Type</source>
          <target state="translated">RegExpr :: = RegString &lt;code&gt;:&lt;/code&gt; タイプ| RegFunc | RegFunc &lt;code&gt;:&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="930b67b59794ec947de2a9f2994493cadd99fca4" translate="yes" xml:space="preserve">
          <source>RegFunc ::= RegModule &lt;code&gt;:&lt;/code&gt; RegFunction &lt;code&gt;/&lt;/code&gt; RegArity</source>
          <target state="translated">RegFunc :: = RegModule &lt;code&gt;:&lt;/code&gt; RegFunction &lt;code&gt;/&lt;/code&gt; RegArity</target>
        </trans-unit>
        <trans-unit id="134c93f0cffad65e559068d0d1b231a309a6fdfe" translate="yes" xml:space="preserve">
          <source>RegFunction ::= RegAtom</source>
          <target state="translated">RegFunction ::=RegAtom</target>
        </trans-unit>
        <trans-unit id="7def8fd36ca99187f55e24c50241ef969bcc1d09" translate="yes" xml:space="preserve">
          <source>RegModule ::= RegAtom</source>
          <target state="translated">RegModule ::=RegAtom</target>
        </trans-unit>
        <trans-unit id="5ea313547c0f2b26b1f18ea46a73a7c74fcbe229" translate="yes" xml:space="preserve">
          <source>RegString ::= - a regular expression, as described in the &lt;code&gt;re&lt;/code&gt; module, enclosed in double quotes -</source>
          <target state="translated">:: = RegString -正規表現、で説明したように &lt;code&gt;re&lt;/code&gt; モジュール、二重引用符で囲まれました-</target>
        </trans-unit>
        <trans-unit id="0469fbf0d49c6eb360a825665c9fd2a213e391df" translate="yes" xml:space="preserve">
          <source>Regarding filename encoding, the Erlang VM can operate in two modes. The current mode can be queried using function &lt;code&gt;&lt;a href=&quot;#native_name_encoding-0&quot;&gt;native_name_encoding/0&lt;/a&gt;&lt;/code&gt;. It returns &lt;code&gt;latin1&lt;/code&gt; or &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="translated">ファイル名のエンコードに関して、Erlang VMは2つのモードで動作できます。現在のモードは、関数 &lt;code&gt;&lt;a href=&quot;#native_name_encoding-0&quot;&gt;native_name_encoding/0&lt;/a&gt;&lt;/code&gt; を使用して照会できます。 &lt;code&gt;latin1&lt;/code&gt; または &lt;code&gt;utf8&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fa909bfc847f3f2dab8d9422d9641563e62929f7" translate="yes" xml:space="preserve">
          <source>Regardless of locking scheme used, calls to driver callbacks can be made from different threads.</source>
          <target state="translated">使用されているロックスキームに関わらず、ドライバのコールバックの呼び出しは異なるスレッドから行うことができます。</target>
        </trans-unit>
        <trans-unit id="4fda3f1d7a876f76d3fabdf3fae0856aadda52fb" translate="yes" xml:space="preserve">
          <source>Register an alternate input handler process for the distribution channel identified by &lt;code&gt;DHandle&lt;/code&gt;. Once this function has been called, &lt;code&gt;InputHandler&lt;/code&gt; is the only process allowed to call &lt;code&gt;&lt;a href=&quot;erlang#dist_ctrl_put_data-2&quot;&gt;erlang:dist_ctrl_put_data(DHandle, Data)&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;DHandle&lt;/code&gt; identifing this distribution channel.</source>
          <target state="translated">&lt;code&gt;DHandle&lt;/code&gt; で識別される配布チャネルの代替入力ハンドラプロセスを登録します。この関数が呼び出された後、 &lt;code&gt;InputHandler&lt;/code&gt; は呼び出しを許可された唯一のプロセスである &lt;code&gt;&lt;a href=&quot;erlang#dist_ctrl_put_data-2&quot;&gt;erlang:dist_ctrl_put_data(DHandle, Data)&lt;/a&gt;&lt;/code&gt; して &lt;code&gt;DHandle&lt;/code&gt; は、この流通経路をidentifing。</target>
        </trans-unit>
        <trans-unit id="612e70bc80f39d67fe2e63fcdd740554f873caa3" translate="yes" xml:space="preserve">
          <source>Register the given node name with the registrar.</source>
          <target state="translated">与えられたノード名をレジストラに登録します。</target>
        </trans-unit>
        <trans-unit id="ccd3f2e94ffa6a327eccda4637f3834b6ee954d5" translate="yes" xml:space="preserve">
          <source>Register the manager entity (=user) responsible for specific agent(s).</source>
          <target state="translated">特定のエージェントを担当する管理者エンティティ(=ユーザー)を登録します。</target>
        </trans-unit>
        <trans-unit id="6cc246aaee03583a1b67072b099abeb8fb79e782" translate="yes" xml:space="preserve">
          <source>Register the monitored manager entity (=user) responsible for specific agent(s).</source>
          <target state="translated">特定のエージェントを担当する監視対象の管理者エンティティ(=ユーザー)を登録します。</target>
        </trans-unit>
        <trans-unit id="9061d41e371d4fedc0115d522b3c3789e7d55102" translate="yes" xml:space="preserve">
          <source>Register the subagent, process, handling part of the mib-tree.</source>
          <target state="translated">mib-treeのサブエージェント、プロセス、処理部分を登録します。</target>
        </trans-unit>
        <trans-unit id="cfb9ebfdaecff168ceeaf8ecaef604259474208a" translate="yes" xml:space="preserve">
          <source>Register the user(s).</source>
          <target state="translated">ユーザーを登録します。</target>
        </trans-unit>
        <trans-unit id="1845a68e796020a1048d95263bf795b90fc9c9e6" translate="yes" xml:space="preserve">
          <source>Registers a name in &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; 名前を登録します。</target>
        </trans-unit>
        <trans-unit id="34b7a3701f7f578b66d40dc493d201623ead9205" translate="yes" xml:space="preserve">
          <source>Registers a notification filter.</source>
          <target state="translated">通知フィルタを登録します。</target>
        </trans-unit>
        <trans-unit id="067b57c37c89870a838e4c3a029c8848eae5cb13" translate="yes" xml:space="preserve">
          <source>Registers a sub-agent under a sub-tree of another agent.</source>
          <target state="translated">他のエージェントのサブツリーの下にサブエージェントを登録します。</target>
        </trans-unit>
        <trans-unit id="2179f43e0837bc4378d035e264feccd782f007ff" translate="yes" xml:space="preserve">
          <source>Registers an unary fun that is called if &lt;code&gt;beam_lib&lt;/code&gt; must read an &lt;code&gt;debug_info&lt;/code&gt; chunk that has been encrypted. The fun is held in a process that is started by the function.</source>
          <target state="translated">&lt;code&gt;debug_info&lt;/code&gt; が暗号化されたdebug_infoチャンクを読み取る必要がある場合に &lt;code&gt;beam_lib&lt;/code&gt; れる単項関数を登録します。楽しみは、機能によって開始されるプロセスで開催されます。</target>
        </trans-unit>
        <trans-unit id="0dcd7f686b516b64b10f7fd221bfb77639b2541f" translate="yes" xml:space="preserve">
          <source>Registers the manager entity (=user) responsible for specific agent(s). Corresponds to making an entry in &lt;code&gt;users.conf&lt;/code&gt;.</source>
          <target state="translated">特定のエージェントを担当するマネージャーエンティティ（=ユーザー）を登録します。 &lt;code&gt;users.conf&lt;/code&gt; にエントリを作成することに対応します。</target>
        </trans-unit>
        <trans-unit id="282f350423b62ae0006f17688a3e8604714b46e5" translate="yes" xml:space="preserve">
          <source>Registers the node with &lt;code&gt;epmd&lt;/code&gt; and tells epmd what port will be used for the current node. It returns a creation number. This number is incremented on each register to help with identifying if a node is reconnecting to epmd.</source>
          <target state="translated">ノードを &lt;code&gt;epmd&lt;/code&gt; に登録し、現在のノードに使用するポートをepmdに指示します。作成番号を返します。この番号は、ノードがepmdに再接続しているかどうかを識別するのに役立つように、各レジスターで増分されます。</target>
        </trans-unit>
        <trans-unit id="74789ff4511238a502c97e8e4e6d4952c88a95ba" translate="yes" xml:space="preserve">
          <source>Registration of a callback module. When a file is to be transferred, its local filename is matched to the regular expressions of the registered callbacks. The first matching callback is used during the transfer. See &lt;code&gt;&lt;a href=&quot;#read_file-3&quot;&gt;read_file/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#write_file-3&quot;&gt;write_file/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コールバックモジュールの登録。ファイルを転送する場合、そのローカルファイル名は、登録されたコールバックの正規表現と照合されます。一致する最初のコールバックが転送中に使用されます。 &lt;code&gt;&lt;a href=&quot;#read_file-3&quot;&gt;read_file/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#write_file-3&quot;&gt;write_file/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="731691a0705f5aaf0542053dc6a66d67a7a10393" translate="yes" xml:space="preserve">
          <source>Registration of global names</source>
          <target state="translated">グローバル名の登録</target>
        </trans-unit>
        <trans-unit id="314870021208b673ff11034ad2c9468f72e2c31d" translate="yes" xml:space="preserve">
          <source>Regular expression matching all possible prompts for a specific target type. &lt;code&gt;regexp&lt;/code&gt; must not have any groups, that is, when matching, &lt;code&gt;re:run/3&lt;/code&gt; (in STDLIB) must return a list with one single element.</source>
          <target state="translated">特定のターゲットタイプのすべての可能なプロンプトに一致する正規表現。 &lt;code&gt;regexp&lt;/code&gt; にはグループを含めることはできません。つまり、一致する場合、 &lt;code&gt;re:run/3&lt;/code&gt; （STDLIB内）は1つの要素を持つリストを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="47a56ab232ae123975ea9710e5fcf7b1f558f1c1" translate="yes" xml:space="preserve">
          <source>Regular expression matching functions for strings and binaries</source>
          <target state="translated">文字列とバイナリの正規表現マッチング関数</target>
        </trans-unit>
        <trans-unit id="203fb6152721f63268ed61bd1c4ea54b026fd773" translate="yes" xml:space="preserve">
          <source>Regular startup options are described in section &lt;code&gt;&lt;a href=&quot;#daemon_flags&quot;&gt;Regular Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常の起動オプションについては、セクション &lt;code&gt;&lt;a href=&quot;#daemon_flags&quot;&gt;Regular Options&lt;/a&gt;&lt;/code&gt; 説明しています。</target>
        </trans-unit>
        <trans-unit id="f62c81988a0243c7eee0e36486de9a38c2c37387" translate="yes" xml:space="preserve">
          <source>Regulates how many &lt;code&gt;disc_copies&lt;/code&gt; replicas that each fragment is to have. This property can explicitly be set at table creation. Default is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">各フラグメントが持つことになる &lt;code&gt;disc_copies&lt;/code&gt; レプリカの数を調整します。このプロパティは、テーブルの作成時に明示的に設定できます。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="30a8ba0420e7bdf4559176393019bd04c0fbe5e4" translate="yes" xml:space="preserve">
          <source>Regulates how many &lt;code&gt;disc_only_copies&lt;/code&gt; replicas that each fragment is to have. This property can explicitly be set at table creation. Defaults is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">各フラグメントが持つことになる &lt;code&gt;disc_only_copies&lt;/code&gt; レプリカの数を規制します。このプロパティは、テーブルの作成時に明示的に設定できます。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d5ace031434130fcf1ca2044f6c738d84c99c499" translate="yes" xml:space="preserve">
          <source>Regulates how many &lt;code&gt;ram_copies&lt;/code&gt; replicas that each fragment is to have. This property can explicitly be set at table creation. Defaults is &lt;code&gt;0&lt;/code&gt;, but if &lt;code&gt;n_disc_copies&lt;/code&gt; and &lt;code&gt;n_disc_only_copies&lt;/code&gt; also are &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;n_ram_copies&lt;/code&gt; defaults to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">各フラグメントが持つ &lt;code&gt;ram_copies&lt;/code&gt; レプリカの数を調整します。このプロパティは、テーブルの作成時に明示的に設定できます。デフォルトは &lt;code&gt;0&lt;/code&gt; ですが、 &lt;code&gt;n_disc_copies&lt;/code&gt; および &lt;code&gt;n_disc_only_copies&lt;/code&gt; も &lt;code&gt;0&lt;/code&gt; の場合、 &lt;code&gt;n_ram_copies&lt;/code&gt; はデフォルトで &lt;code&gt;1&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="13bed85e379f26741bf756020202c97a912d20f5" translate="yes" xml:space="preserve">
          <source>Rejang</source>
          <target state="translated">Rejang</target>
        </trans-unit>
        <trans-unit id="caa53feb7f3da187483d6f1241ee4328c1297f25" translate="yes" xml:space="preserve">
          <source>Related Documents</source>
          <target state="translated">関連資料</target>
        </trans-unit>
        <trans-unit id="a534f1b763c40f42ca56d5b3ac62f8426b11f10e" translate="yes" xml:space="preserve">
          <source>Relational operators: &amp;gt;, &amp;gt;=, &amp;lt;, =&amp;lt;, =:=, ==, =/=, /=</source>
          <target state="translated">関係演算子：&amp;gt;、&amp;gt; =、&amp;lt;、= &amp;lt;、=：=、==、= / =、/ =</target>
        </trans-unit>
        <trans-unit id="b4d1ac06f9ff5455701be2b5477a539436883381" translate="yes" xml:space="preserve">
          <source>Relations as defined above (as sets of ordered pairs) are from now on referred to as &lt;strong id=&quot;binary_relation&quot;&gt;binary relations&lt;/strong&gt;.</source>
          <target state="translated">上記で定義された関係（順序付けられたペアのセットとして）は、&lt;strong id=&quot;binary_relation&quot;&gt;今後バイナリ関係&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="84d2940af626b029fa2ef82659d4a2d4cd5ce382" translate="yes" xml:space="preserve">
          <source>Relative maximum cache bad fit (in percent). A segment in the memory segment cache is not reused if its size exceeds the requested size with more than relative maximum cache bad fit percent of the requested size. Defaults to &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">相対的な最大キャッシュ不良フィット（パーセント単位）。メモリセグメントキャッシュ内のセグメントは、そのサイズが要求されたサイズを超え、要求されたサイズの相対的な最大キャッシュ不良適合率を超えている場合、再利用されません。デフォルトは &lt;code&gt;20&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4c153cc101fda20f14f84dfde0781fcad6804b45" translate="yes" xml:space="preserve">
          <source>Relative multiblock carrier move threshold (in percent). When a block located in a multiblock carrier is shrunk, the block is moved if the ratio of the size of the returned memory compared to the previous size is more than this threshold, otherwise the block is shrunk at the current location.</source>
          <target state="translated">相対的なマルチブロックキャリアの移動しきい値(パーセント単位)。マルチブロックキャリア内に位置するブロックがシュリンクされている場合、以前のサイズと比較して返されたメモリのサイズの比率がこのしきい値よりも大きい場合、ブロックは移動され、そうでない場合、ブロックは現在の位置でシュリンクされます。</target>
        </trans-unit>
        <trans-unit id="79bd0bd84b449b2094f3b7b77828c840f0397c79" translate="yes" xml:space="preserve">
          <source>Relative singleblock carrier move threshold (in percent). When a block located in a singleblock carrier is shrunk to a size smaller than the value of parameter &lt;code&gt;&lt;a href=&quot;#M_sbct&quot;&gt;sbct&lt;/a&gt;&lt;/code&gt;, the block is left unchanged in the singleblock carrier if the ratio of unused memory is less than this threshold, otherwise it is moved into a multiblock carrier.</source>
          <target state="translated">相対シングルブロックキャリア移動しきい値（パーセント）。シングルブロックキャリアにあるブロックがパラメーター &lt;code&gt;&lt;a href=&quot;#M_sbct&quot;&gt;sbct&lt;/a&gt;&lt;/code&gt; の値よりも小さいサイズに縮小された場合、未使用のメモリの比率がこのしきい値未満の場合、ブロックはシングルブロックキャリア内で変更されずに残り、それ以外の場合はマルチブロックキャリアに移動されます。 。</target>
        </trans-unit>
        <trans-unit id="71e2887d05759469568d7ab87cf6c068541efe99" translate="yes" xml:space="preserve">
          <source>Relative singleblock carrier shrink threshold (in percent). When a block located in an &lt;code&gt;mseg_alloc&lt;/code&gt; singleblock carrier is shrunk, the carrier is left unchanged if the ratio of unused memory is less than this threshold, otherwise the carrier is shrunk. See also &lt;code&gt;&lt;a href=&quot;#M_asbcst&quot;&gt;asbcst&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">相対シングルブロックキャリア縮小しきい値（パーセント単位）。 &lt;code&gt;mseg_alloc&lt;/code&gt; シングルブロックキャリアにあるブロックが縮小されると、未使用メモリの比率がこのしきい値よりも小さい場合、キャリアは変更されません。それ以外の場合、キャリアは縮小されます。 &lt;code&gt;&lt;a href=&quot;#M_asbcst&quot;&gt;asbcst&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="b5a923017f941086cdc19675bb6e7e66bf98f618" translate="yes" xml:space="preserve">
          <source>Relaxed command checking can also be enabled by setting environment variable &lt;code&gt;ERL_EPMD_RELAXED_COMMAND_CHECK&lt;/code&gt; before starting &lt;code&gt;epmd&lt;/code&gt;.</source>
          <target state="translated">リラックスコマンドチェックは、環境変数を設定することで有効にすることができ &lt;code&gt;ERL_EPMD_RELAXED_COMMAND_CHECK&lt;/code&gt; を開始する前に &lt;code&gt;epmd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36f808de3af1211921e144126704f0ebe1a620f6" translate="yes" xml:space="preserve">
          <source>Relay Agents</source>
          <target state="translated">リレーエージェント</target>
        </trans-unit>
        <trans-unit id="2434cb2c3792d5ccccc15c76f01d0a9de58fc0fe" translate="yes" xml:space="preserve">
          <source>Relaying and Proxying Answers</source>
          <target state="translated">中継とプロキシの答え</target>
        </trans-unit>
        <trans-unit id="e4472f3c80aefb8e7db82dc13af52546d928899f" translate="yes" xml:space="preserve">
          <source>Relaying and Proxying Requests</source>
          <target state="translated">リクエストの中継とプロキシ</target>
        </trans-unit>
        <trans-unit id="b25d7bda466685a6a4e753a794a4ba838c55e906" translate="yes" xml:space="preserve">
          <source>Release ::= Atom</source>
          <target state="translated">リリース ::=アトム</target>
        </trans-unit>
        <trans-unit id="d7bf8b26bb971b25e39e96502911b730591e9714" translate="yes" xml:space="preserve">
          <source>Release Edges. All release calls.</source>
          <target state="translated">リリースエッジ。すべてのリリースコール。</target>
        </trans-unit>
        <trans-unit id="12b5679ebc6469749dadfd2078344f69e5ead4b1" translate="yes" xml:space="preserve">
          <source>Release candidates have an &lt;code&gt;-rc&amp;lt;N&amp;gt;&lt;/code&gt; suffix. The suffix &lt;code&gt;-rc0&lt;/code&gt; is used during development up to the first release candidate.</source>
          <target state="translated">リリース候補には &lt;code&gt;-rc&amp;lt;N&amp;gt;&lt;/code&gt; サフィックスがあります。サフィックス &lt;code&gt;-rc0&lt;/code&gt; は、最初のリリース候補までの開発中に使用されます。</target>
        </trans-unit>
        <trans-unit id="d77b5c204252acaaec43d623048d2075abad904a" translate="yes" xml:space="preserve">
          <source>Release handling</source>
          <target state="translated">リリース処理</target>
        </trans-unit>
        <trans-unit id="076bab209366a52c80009dd116377b92396f787e" translate="yes" xml:space="preserve">
          <source>Release handling relies on this assumption. When installing a new release version, the new &lt;code&gt;sys.config&lt;/code&gt; is read and used to update the application configurations.</source>
          <target state="translated">リリース処理はこの仮定に依存しています。新しいリリースバージョンをインストールすると、新しい &lt;code&gt;sys.config&lt;/code&gt; が読み取られ、アプリケーション構成の更新に使用されます。</target>
        </trans-unit>
        <trans-unit id="7949ab7905efd94b32946cabca1a8a77f563a091" translate="yes" xml:space="preserve">
          <source>Release name.</source>
          <target state="translated">リリース名。</target>
        </trans-unit>
        <trans-unit id="3ccc1e080be82cc836d31609c3948421780b08c1" translate="yes" xml:space="preserve">
          <source>Release resource file</source>
          <target state="translated">リソースファイルの解放</target>
        </trans-unit>
        <trans-unit id="d34f3018803f4c680fc3638d635bd0def6f5ab72" translate="yes" xml:space="preserve">
          <source>Release specific configuration. Each release maps to a &lt;code&gt;rel&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt; and &lt;code&gt;boot&lt;/code&gt; file. See the module &lt;code&gt;systools&lt;/code&gt; for more info about the details. Each release has a name, a version and a set of applications with a few release specific parameters such as type and included applications.</source>
          <target state="translated">特定の構成をリリースします。各リリースは &lt;code&gt;rel&lt;/code&gt; 、 &lt;code&gt;script&lt;/code&gt; 、および &lt;code&gt;boot&lt;/code&gt; ファイルにマップされます。詳細については、 &lt;code&gt;systools&lt;/code&gt; モジュールを参照してください。各リリースには、名前、バージョン、アプリケーションのセットがあり、タイプや含まれるアプリケーションなど、いくつかのリリース固有のパラメーターがあります。</target>
        </trans-unit>
        <trans-unit id="09c97862a62c2fa6a793cf11c297f8d6b788b549" translate="yes" xml:space="preserve">
          <source>Release upgrade file</source>
          <target state="translated">リリースアップグレードファイル</target>
        </trans-unit>
        <trans-unit id="0fe65a88b4e14f014e0b3c78603bddcf72898de3" translate="yes" xml:space="preserve">
          <source>Release upgrade instructions are interpreted by the release handler when an upgrade or downgrade is made. For more information about release handling, see &lt;code&gt;OTP Design Principles&lt;/code&gt; in &lt;strong&gt;System Documentation&lt;/strong&gt;.</source>
          <target state="translated">リリースアップグレードの指示は、アップグレードまたはダウングレードが行われたときにリリースハンドラによって解釈されます。リリース処理の詳細については、&lt;strong&gt;システムドキュメントの&lt;/strong&gt; &lt;code&gt;OTP Design Principles&lt;/code&gt; を参照してください。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="369560c15d5e85e475c6b562995f9fcd49fd567b" translate="yes" xml:space="preserve">
          <source>Release version.</source>
          <target state="translated">リリースバージョン。</target>
        </trans-unit>
        <trans-unit id="8fa41d59c259d95cfaded10953d5a2f8e0b38bb4" translate="yes" xml:space="preserve">
          <source>Releases</source>
          <target state="translated">Releases</target>
        </trans-unit>
        <trans-unit id="dfeb990703a2c588b44af2cd26546ad311c6ab1a" translate="yes" xml:space="preserve">
          <source>Releases a binary obtained from &lt;code&gt;&lt;a href=&quot;#enif_alloc_binary&quot;&gt;enif_alloc_binary&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_alloc_binary&quot;&gt;enif_alloc_binary&lt;/a&gt;&lt;/code&gt; から取得したバイナリを解放します。</target>
        </trans-unit>
        <trans-unit id="4e281e0f826facd98ecceebe9523eb2ae766b4f8" translate="yes" xml:space="preserve">
          <source>Releases up to and including Erlang/OTP R10 did not check if the process was already registered. The global name table could therefore become inconsistent. The old (buggy) behavior can be chosen by giving the Kernel application variable &lt;code&gt;global_multi_name_action&lt;/code&gt; the value &lt;code&gt;allow&lt;/code&gt;.</source>
          <target state="translated">Erlang / OTP R10までのリリースでは、プロセスがすでに登録されているかどうかは確認されませんでした。そのため、グローバル名テーブルが不整合になる可能性があります。カーネルアプリケーション変数 &lt;code&gt;global_multi_name_action&lt;/code&gt; に値 &lt;code&gt;allow&lt;/code&gt; を与えることで、古い（バギー）動作を選択できます。</target>
        </trans-unit>
        <trans-unit id="c581dab1907a3bfee043dac2fd31f1599d1e2e43" translate="yes" xml:space="preserve">
          <source>Releases.</source>
          <target state="translated">Releases.</target>
        </trans-unit>
        <trans-unit id="3e5adc00a3e13272f013a6c83b211713760aa4e1" translate="yes" xml:space="preserve">
          <source>Relevant manual pages are the following:</source>
          <target state="translated">関連するマニュアルページは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2df0b3f17846bac2fbdbfa13c6c4f8a9a09ca29d" translate="yes" xml:space="preserve">
          <source>Reload the configuration without restarting the server:</source>
          <target state="translated">サーバーを再起動せずに設定をリロードします。</target>
        </trans-unit>
        <trans-unit id="892b893ae67558c733d183c0cf9bfa2f667f6b56" translate="yes" xml:space="preserve">
          <source>Reloads all currently loaded modules that have changed on disk (see &lt;code&gt;mm()&lt;/code&gt;). Returns the list of results from calling &lt;code&gt;l(M)&lt;/code&gt; for each such &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">ディスクで変更された、現在ロードされているすべてのモジュールを再ロードします（ &lt;code&gt;mm()&lt;/code&gt; を参照）。そのような &lt;code&gt;M&lt;/code&gt; ごとに &lt;code&gt;l(M)&lt;/code&gt; を呼び出した結果のリストを返します。</target>
        </trans-unit>
        <trans-unit id="a88146e081b7ea26a305d5560641eb3b9b496437" translate="yes" xml:space="preserve">
          <source>Reloads configuration file containing specified configuration key.</source>
          <target state="translated">指定された設定キーを含む設定ファイルを再読み込みします。</target>
        </trans-unit>
        <trans-unit id="5d2d1ade4f750a24b8183ab33233fd81e8d4a1d7" translate="yes" xml:space="preserve">
          <source>Reloads the HTTP server configuration without restarting the server. Incoming requests are answered with a temporary down message during the reload time.</source>
          <target state="translated">サーバーを再起動せずに HTTP サーバーの設定をリロードします。受信したリクエストには、リロード中に一時的なダウンメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="c84319814d8e6fe83a0c1b622bebb2f8ee15395e" translate="yes" xml:space="preserve">
          <source>Reloads the driver named &lt;code&gt;Name&lt;/code&gt; from a possibly different &lt;code&gt;Path&lt;/code&gt; than previously used. This function is used in the code change &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;scenario&lt;/a&gt;&lt;/code&gt; described in the introduction.</source>
          <target state="translated">以前に使用されたものとは異なる可能性のある &lt;code&gt;Path&lt;/code&gt; から &lt;code&gt;Name&lt;/code&gt; という名前のドライバをリロードします。この関数は、概要で説明したコード変更 &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;scenario&lt;/a&gt;&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="784e31d4f3c0cba2e7db35d731e55aca1c1fad9d" translate="yes" xml:space="preserve">
          <source>Reltool is a release management tool. It analyses a given Erlang/OTP installation and determines various dependencies between applications. The &lt;code&gt;graphical&lt;/code&gt; frontend depicts the dependencies and enables interactive customization of a target system. The backend provides a &lt;code&gt;batch&lt;/code&gt; interface for generation of customized target systems.</source>
          <target state="translated">Reltoolはリリース管理ツールです。指定されたErlang / OTPインストールを分析し、アプリケーション間のさまざまな依存関係を決定します。 &lt;code&gt;graphical&lt;/code&gt; フロントエンドは、依存性を示して、ターゲット・システムのインタラクティブなカスタマイズを可能にします。バックエンドは、カスタマイズされたターゲットシステムを生成するための &lt;code&gt;batch&lt;/code&gt; インターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="7f2e3fa39fb833cfad927a914aaf178d914c55ed" translate="yes" xml:space="preserve">
          <source>Remaining options are any accepted by &lt;code&gt;gen_sctp:open/1&lt;/code&gt;, with the exception of options &lt;code&gt;mode&lt;/code&gt;, &lt;code&gt;binary&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;active&lt;/code&gt; and &lt;code&gt;sctp_events&lt;/code&gt;. Note that options &lt;code&gt;ip&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; specify the local address and port respectively.</source>
          <target state="translated">残りのオプションは、オプション &lt;code&gt;mode&lt;/code&gt; 、 &lt;code&gt;binary&lt;/code&gt; 、 &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;active&lt;/code&gt; 、および &lt;code&gt;sctp_events&lt;/code&gt; を除いて、 &lt;code&gt;gen_sctp:open/1&lt;/code&gt; で受け入れられるものです。オプションのことを注意 &lt;code&gt;ip&lt;/code&gt; および &lt;code&gt;port&lt;/code&gt; 、それぞれのローカルアドレスとポートを指定します。</target>
        </trans-unit>
        <trans-unit id="815293be363db289b37d927caa1f5d8eea88f49b" translate="yes" xml:space="preserve">
          <source>Remaining options are any accepted by &lt;code&gt;ssl:connect/3&lt;/code&gt; or &lt;code&gt;gen_tcp:connect/3&lt;/code&gt; for a connecting transport, or &lt;code&gt;ssl:listen/2&lt;/code&gt; or &lt;code&gt;gen_tcp:listen/2&lt;/code&gt; for a listening transport, depending on whether or not &lt;code&gt;{ssl_options, true}&lt;/code&gt; has been specified. Options &lt;code&gt;binary&lt;/code&gt;, &lt;code&gt;packet&lt;/code&gt; and &lt;code&gt;active&lt;/code&gt; cannot be specified. Also, option &lt;code&gt;port&lt;/code&gt; can be specified for a listening transport to specify the local listening port, the default being the standardized 3868. Note that the option &lt;code&gt;ip&lt;/code&gt; specifies the local address.</source>
          <target state="translated">残りのオプションは、接続トランスポートの場合は &lt;code&gt;ssl:connect/3&lt;/code&gt; または &lt;code&gt;gen_tcp:connect/3&lt;/code&gt; で、リスニングトランスポートの場合は &lt;code&gt;ssl:listen/2&lt;/code&gt; または &lt;code&gt;gen_tcp:listen/2&lt;/code&gt; で受け入れられます。 &lt;code&gt;{ssl_options, true}&lt;/code&gt; が持っているかどうかによって異なります。指定されました。オプションの &lt;code&gt;binary&lt;/code&gt; 、 &lt;code&gt;packet&lt;/code&gt; 、および &lt;code&gt;active&lt;/code&gt; は指定できません。また、listenトランス &lt;code&gt;port&lt;/code&gt; にオプションportを指定してローカルのlistenポートを指定することもできます。デフォルトは標準化された3868 です。オプション &lt;code&gt;ip&lt;/code&gt; はローカルアドレスを指定することに注意してください。</target>
        </trans-unit>
        <trans-unit id="66cf83c455fd1bd0a82aed4f3cb5675602a3ab47" translate="yes" xml:space="preserve">
          <source>Remember that file trace ports buffer the data by default. If the node crashes, trace messages are not flushed to the binary log. If the risk of failure is high, it can be a good idea to flush the buffers every now and then automatically. Passing &lt;code&gt;{flush, MSec}&lt;/code&gt; as an option of &lt;code&gt;ttb:tracer/2&lt;/code&gt; flushes all buffers every &lt;code&gt;MSec&lt;/code&gt; millisecond.</source>
          <target state="translated">ファイルトレースポートはデフォルトでデータをバッファリングすることに注意してください。ノードがクラッシュした場合、トレースメッセージはバイナリログにフラッシュされません。失敗のリスクが高い場合は、バッファを時々自動的にフラッシュすることをお勧めします。通過 &lt;code&gt;{flush, MSec}&lt;/code&gt; のオプションとして &lt;code&gt;ttb:tracer/2&lt;/code&gt; すべてのバッファごとにフラッシュ &lt;code&gt;MSec&lt;/code&gt; ミリ秒。</target>
        </trans-unit>
        <trans-unit id="26dfb878780f2523c83b1d853967893e8ff04168" translate="yes" xml:space="preserve">
          <source>Remember that the | operator can be used to get the head of a list:</source>
          <target state="translated">演算子はリストの先頭を取得するために使用できることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="389b0b7962fe40649a28790b524a030d6d8fe385" translate="yes" xml:space="preserve">
          <source>Remember that:</source>
          <target state="translated">覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="78a5feb713d2557dfe3eacd16a70807ff5ae0bd3" translate="yes" xml:space="preserve">
          <source>Remember to free &lt;code&gt;pid&lt;/code&gt; later with &lt;code&gt;&lt;a href=&quot;erl_malloc#erl_free_term&quot;&gt;erl_malloc:erl_free_term&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">後で &lt;code&gt;&lt;a href=&quot;erl_malloc#erl_free_term&quot;&gt;erl_malloc:erl_free_term&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;pid&lt;/code&gt; を解放することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="eca0d691ee9c6774e0eb8b51cbe73481e15cdf17" translate="yes" xml:space="preserve">
          <source>Remote Procedure Call services.</source>
          <target state="translated">リモートプロシージャコールサービス。</target>
        </trans-unit>
        <trans-unit id="98ef7c5ca9880fe05d2a7209c1987cab4b52873f" translate="yes" xml:space="preserve">
          <source>Remote hostname.</source>
          <target state="translated">リモートホスト名。</target>
        </trans-unit>
        <trans-unit id="bcfceb272c786094ee4dfb353770550b1fbd9c5f" translate="yes" xml:space="preserve">
          <source>Remote procedure calls</source>
          <target state="translated">リモートプロシージャコール</target>
        </trans-unit>
        <trans-unit id="6c62ad2fef650defef629666029a983bdea55bce" translate="yes" xml:space="preserve">
          <source>Remote type, that is, type defined in, and exported by, other modules; more about this soon.</source>
          <target state="translated">リモート型とは、他のモジュールで定義され、他のモジュールでエクスポートされる型のことです。</target>
        </trans-unit>
        <trans-unit id="f3d2fdb2a1bafef3bfef448975f7ee50436cc38f" translate="yes" xml:space="preserve">
          <source>Remote.</source>
          <target state="translated">Remote.</target>
        </trans-unit>
        <trans-unit id="3a07d5691e90ca1626bc3af406339c26bbc92230" translate="yes" xml:space="preserve">
          <source>Remove (rm) one or more algorithms from &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; から1つ以上のアルゴリズムを削除（rm）します。</target>
        </trans-unit>
        <trans-unit id="a1b19b04489ffa84280a335fd561b33e3df1e32b" translate="yes" xml:space="preserve">
          <source>Remove all edges of &lt;code&gt;G&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#emanate&quot;&gt;emanating&lt;/a&gt;&lt;/code&gt; from v[i] and &lt;code&gt;&lt;a href=&quot;#incident&quot;&gt;incident&lt;/a&gt;&lt;/code&gt; to v[i+1] for 1 &amp;lt;= i &amp;lt; k (including multiple edges).</source>
          <target state="translated">すべてのエッジ削除 &lt;code&gt;G&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#emanate&quot;&gt;emanating&lt;/a&gt;&lt;/code&gt; V [i]とから &lt;code&gt;&lt;a href=&quot;#incident&quot;&gt;incident&lt;/a&gt;&lt;/code&gt; Vへの[I + 1]（複数のエッジを含む）1 &amp;lt;= I &amp;lt;K用。</target>
        </trans-unit>
        <trans-unit id="aa1bc0e635cc0c09da1d0e321cb9f66931a8a682" translate="yes" xml:space="preserve">
          <source>Remove call count breakpoints from the matching functions that has call count breakpoints.</source>
          <target state="translated">呼数ブレークポイントを持つマッチング関数から呼数ブレークポイントを削除します。</target>
        </trans-unit>
        <trans-unit id="1c94e4f466ef58b151007050c8d81df3b4baf221" translate="yes" xml:space="preserve">
          <source>Remove module specific log settings. After this, the primary log level is used for all modules.</source>
          <target state="translated">モジュール固有のログ設定を削除します。この後、プライマリログレベルはすべてのモジュールで使用されます。</target>
        </trans-unit>
        <trans-unit id="1752d32ef2409c2c524b1db337059b374545e2f1" translate="yes" xml:space="preserve">
          <source>Remove module specific log settings. After this, the primary log level is used for the specified modules.</source>
          <target state="translated">モジュール固有のログ設定を削除します。この後、指定したモジュールに対してプライマリログレベルを使用します。</target>
        </trans-unit>
        <trans-unit id="2de54fa41d973e8645ea65252a458390fa9b8e13" translate="yes" xml:space="preserve">
          <source>Remove previously added transports.</source>
          <target state="translated">以前に追加されたトランスポートを削除します。</target>
        </trans-unit>
        <trans-unit id="de2212deaf408786494f5a6437f6c7dfb1de7a09" translate="yes" xml:space="preserve">
          <source>Remove the &lt;code&gt;'silent'&lt;/code&gt; trace flag when the first argument is &lt;code&gt;'verbose'&lt;/code&gt;, and add it when it is &lt;code&gt;'silent':&lt;/code&gt;</source>
          <target state="translated">最初の引数が &lt;code&gt;'verbose'&lt;/code&gt; の場合は &lt;code&gt;'silent'&lt;/code&gt; トレースフラグを削除し、'silent'の場合は追加し &lt;code&gt;'silent':&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c1a0c637d49a4d7569668331ee1b3088eb73750" translate="yes" xml:space="preserve">
          <source>Remove the filter identified by &lt;code&gt;FilterId&lt;/code&gt; from the handler identified by &lt;code&gt;HandlerId&lt;/code&gt;.</source>
          <target state="translated">で識別されるフィルタ削除 &lt;code&gt;FilterId&lt;/code&gt; で識別ハンドラから &lt;code&gt;HandlerId&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="1e2a9bd7f431a82ca58a25b840ca86d577fc69f6" translate="yes" xml:space="preserve">
          <source>Remove the handler identified by &lt;code&gt;HandlerId&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HandlerId&lt;/code&gt; で識別されるハンドラーを削除します。</target>
        </trans-unit>
        <trans-unit id="270d63a2d4e284cb38a67b35a61f4d1b10185100" translate="yes" xml:space="preserve">
          <source>Remove the old version.</source>
          <target state="translated">旧バージョンを削除します。</target>
        </trans-unit>
        <trans-unit id="a1bc432335254977c2eff9f225b9bfe4b9346eb9" translate="yes" xml:space="preserve">
          <source>Remove the primary filter identified by &lt;code&gt;FilterId&lt;/code&gt; from Logger.</source>
          <target state="translated">ロガーから &lt;code&gt;FilterId&lt;/code&gt; で識別されるプライマリフィルターを削除します。</target>
        </trans-unit>
        <trans-unit id="9ab44531e296112b4f85de0885693c0cd1e921a5" translate="yes" xml:space="preserve">
          <source>Removes (one) &lt;code&gt;{_, MonitorRef, _, _, _}&lt;/code&gt; message, if there is one, from the caller message queue after monitoring has been stopped.</source>
          <target state="translated">監視が停止した後、呼び出し元のメッセージキューから &lt;code&gt;{_, MonitorRef, _, _, _}&lt;/code&gt; メッセージ（ある場合）を削除します。</target>
        </trans-unit>
        <trans-unit id="2af136900a1f59bad5aae8293e0b480336d75d7b" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; from an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; から削除します。</target>
        </trans-unit>
        <trans-unit id="6c9c0f67a25257aba96321b301fce1c1d0e01aea" translate="yes" xml:space="preserve">
          <source>Removes a driver entry &lt;code&gt;de&lt;/code&gt; previously added with &lt;code&gt;&lt;a href=&quot;#add_driver_entry&quot;&gt;add_driver_entry&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ドライバエントリ削除 &lt;code&gt;de&lt;/code&gt; 以前ながら添加 &lt;code&gt;&lt;a href=&quot;#add_driver_entry&quot;&gt;add_driver_entry&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="ef910fd5c7a07e6df5e2bcac95688a112adbf8b2" translate="yes" xml:space="preserve">
          <source>Removes a driver monitor in much the same way as &lt;code&gt;erlang:demonitor/1&lt;/code&gt; in ERTS does with process monitors. For details about how to create driver monitors, see &lt;code&gt;&lt;a href=&quot;#monitor-2&quot;&gt;monitor/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:demonitor/1&lt;/code&gt; がプロセスモニターで行うのとほぼ同じ方法でドライバーモニターを削除します。ドライバーモニターの作成方法の詳細については、 &lt;code&gt;&lt;a href=&quot;#monitor-2&quot;&gt;monitor/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="469ccfe46e68680d711e0478f9486ba9db3e26c4" translate="yes" xml:space="preserve">
          <source>Removes a filename extension. &lt;code&gt;rootname/2&lt;/code&gt; works as &lt;code&gt;rootname/1&lt;/code&gt;, except that the extension is removed only if it is &lt;code&gt;Ext&lt;/code&gt;.</source>
          <target state="translated">ファイル名拡張子を削除します。 &lt;code&gt;rootname/2&lt;/code&gt; は &lt;code&gt;rootname/1&lt;/code&gt; と同じように機能しますが、拡張子が &lt;code&gt;Ext&lt;/code&gt; の場合にのみ削除されます。</target>
        </trans-unit>
        <trans-unit id="cfdbbaeba26ada922495e3b365aa4160395c9fe4" translate="yes" xml:space="preserve">
          <source>Removes a reference to resource object &lt;code&gt;obj&lt;/code&gt; obtained from &lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt;enif_alloc_resource&lt;/a&gt;&lt;/code&gt;. The resource object is destructed when the last reference is removed. Each call to &lt;code&gt;enif_release_resource&lt;/code&gt; must correspond to a previous call to &lt;code&gt;enif_alloc_resource&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#enif_keep_resource&quot;&gt;enif_keep_resource&lt;/a&gt;&lt;/code&gt;. References made by &lt;code&gt;&lt;a href=&quot;#enif_make_resource&quot;&gt;enif_make_resource&lt;/a&gt;&lt;/code&gt; can only be removed by the garbage collector.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt;enif_alloc_resource&lt;/a&gt;&lt;/code&gt; から取得したリソースオブジェクト &lt;code&gt;obj&lt;/code&gt; への参照を削除します。最後の参照が削除されると、リソースオブジェクトは破棄されます。 &lt;code&gt;enif_release_resource&lt;/code&gt; への各呼び出しは、 &lt;code&gt;enif_alloc_resource&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#enif_keep_resource&quot;&gt;enif_keep_resource&lt;/a&gt;&lt;/code&gt; への以前の呼び出しに対応している必要があります。 &lt;code&gt;&lt;a href=&quot;#enif_make_resource&quot;&gt;enif_make_resource&lt;/a&gt;&lt;/code&gt; による参照は、ガベージコレクターによってのみ削除できます。</target>
        </trans-unit>
        <trans-unit id="f93eec43121b96bc7a270f3d88692f108331e875" translate="yes" xml:space="preserve">
          <source>Removes a release and its files from the system. The release must not be the permanent release. Removes only the files and directories not in use by another release.</source>
          <target state="translated">システムからリリースとそのファイルを削除します。そのリリースは永続的なリリースであってはなりません。他のリリースで使用されていないファイルとディレクトリのみを削除します。</target>
        </trans-unit>
        <trans-unit id="69722c4296c8491884f2e4d612c28fd292392777" translate="yes" xml:space="preserve">
          <source>Removes all breakpoints.</source>
          <target state="translated">すべてのブレークポイントを削除します。</target>
        </trans-unit>
        <trans-unit id="ebf28b81a76f27b32b9e5da02e466fe49e99b342" translate="yes" xml:space="preserve">
          <source>Removes all chunks except those needed by the loader from BEAM files. In particular, the debug information (chunk &lt;code&gt;debug_info&lt;/code&gt; and &lt;code&gt;abstract_code&lt;/code&gt;) is removed. The returned list contains one element for each specified filename, in the same order as in &lt;code&gt;Files&lt;/code&gt;.</source>
          <target state="translated">ローダーが必要とするチャンクを除くすべてのチャンクをBEAMファイルから削除します。特に、デバッグ情報（チャンク &lt;code&gt;debug_info&lt;/code&gt; および &lt;code&gt;abstract_code&lt;/code&gt; ）が削除されました。返されるリストには、指定されたファイル名ごとに1つの要素が含まれてい &lt;code&gt;Files&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="69c09d3f76b01192e3e0cb5339b531159c96fb89" translate="yes" xml:space="preserve">
          <source>Removes all chunks except those needed by the loader from the BEAM files of a release. &lt;code&gt;Dir&lt;/code&gt; is to be the installation root directory. For example, the current OTP release can be stripped with the call &lt;code&gt;beam_lib:strip_release(code:root_dir())&lt;/code&gt;.</source>
          <target state="translated">ローダーで必要なものを除くすべてのチャンクをリリースのBEAMファイルから削除します。 &lt;code&gt;Dir&lt;/code&gt; はインストールルートディレクトリです。たとえば、現在のOTPリリースは、 &lt;code&gt;beam_lib:strip_release(code:root_dir())&lt;/code&gt; 呼び出しで削除できます。</target>
        </trans-unit>
        <trans-unit id="b653de0025fa2e1c9e18ccdf6499bb91a5318e88" translate="yes" xml:space="preserve">
          <source>Removes all chunks from a BEAM file except those needed by the loader. In particular, the debug information (chunk &lt;code&gt;debug_info&lt;/code&gt; and &lt;code&gt;abstract_code&lt;/code&gt;) is removed.</source>
          <target state="translated">ローダーで必要なものを除いて、BEAMファイルからすべてのチャンクを削除します。特に、デバッグ情報（チャンク &lt;code&gt;debug_info&lt;/code&gt; および &lt;code&gt;abstract_code&lt;/code&gt; ）が削除されました。</target>
        </trans-unit>
        <trans-unit id="8e06a52291161535a71ec3cf6b4b53521525128d" translate="yes" xml:space="preserve">
          <source>Removes all comments from all nodes of a syntax tree. All other attributes (such as position information) remain unchanged. Standalone comments in form lists are removed; any other standalone comments are changed into null-comments (no text, no indentation).</source>
          <target state="translated">構文ツリーのすべてのノードからすべてのコメントを削除します。他のすべての属性 (位置情報など)は変更されません。フォームリスト内のスタンドアロンコメントは削除され、その他のスタンドアロンコメントはヌルコメント (テキストなし、インデントなし)に変更されます。</target>
        </trans-unit>
        <trans-unit id="2ba013b61f6c343926311bc6cb40098be1f76e8e" translate="yes" xml:space="preserve">
          <source>Removes all empty parts of the result.</source>
          <target state="translated">結果の空の部分をすべて削除します。</target>
        </trans-unit>
        <trans-unit id="423a342bd4a5da772f2ac8a4ddc5c196849871b4" translate="yes" xml:space="preserve">
          <source>Removes all items from a disk log. If argument &lt;code&gt;Head&lt;/code&gt; or &lt;code&gt;BHead&lt;/code&gt; is specified, this item is written first in the newly truncated log, otherwise the header given to &lt;code&gt;open/1&lt;/code&gt; is used. The header argument is used only once. Next time a wrap log file is opened, the header given to &lt;code&gt;open/1&lt;/code&gt; is used.</source>
          <target state="translated">ディスクログからすべてのアイテムを削除します。引数 &lt;code&gt;Head&lt;/code&gt; または &lt;code&gt;BHead&lt;/code&gt; が指定されている場合、この項目は新しく切り捨てられたログの最初に書き込まれます。それ以外の場合、 &lt;code&gt;open/1&lt;/code&gt; に指定されたヘッダーが使用されます。header引数は1回だけ使用されます。次にラップログファイルが開かれるとき、 &lt;code&gt;open/1&lt;/code&gt; に指定されたヘッダーが使用されます。</target>
        </trans-unit>
        <trans-unit id="9124834eeba59cb5d4394905a7f8431b79dc8304" translate="yes" xml:space="preserve">
          <source>Removes all objects marked for deletion. When objects are deleted with &lt;code&gt;ei_reg_delete()&lt;/code&gt; they are not removed from the registry, only marked for later removal. On a later backup to &lt;code&gt;Mnesia&lt;/code&gt;, the objects can also be removed from the &lt;code&gt;Mnesia&lt;/code&gt; table. If you are not backing up to &lt;code&gt;Mnesia&lt;/code&gt;, you may wish to remove the objects manually with this function.</source>
          <target state="translated">削除対象としてマークされたすべてのオブジェクトを削除します。オブジェクトが &lt;code&gt;ei_reg_delete()&lt;/code&gt; で削除された場合、オブジェクトはレジストリから削除されず、後で削除するようにマークされます。後で &lt;code&gt;Mnesia&lt;/code&gt; にバックアップするときに、オブジェクトを &lt;code&gt;Mnesia&lt;/code&gt; テーブルから削除することもできます。 &lt;code&gt;Mnesia&lt;/code&gt; にバックアップしていない場合は、この機能を使用して手動でオブジェクトを削除できます。</target>
        </trans-unit>
        <trans-unit id="006c0542f30160a6d1b184407353efd9e067c6df" translate="yes" xml:space="preserve">
          <source>Removes all record definitions, then reads record definitions from the modules &lt;code&gt;shell_default&lt;/code&gt; and &lt;code&gt;user_default&lt;/code&gt; (if loaded). Returns the names of the records defined.</source>
          <target state="translated">すべてのレコード定義を削除し、モジュール &lt;code&gt;shell_default&lt;/code&gt; および &lt;code&gt;user_default&lt;/code&gt; （ロードされている場合）からレコード定義を読み取ります。定義されたレコードの名前を返します。</target>
        </trans-unit>
        <trans-unit id="5c21f9615f09252f2d8d49897680a589dc928737" translate="yes" xml:space="preserve">
          <source>Removes all variable bindings.</source>
          <target state="translated">すべての変数バインディングを削除します。</target>
        </trans-unit>
        <trans-unit id="0a4c4b594d16c7a2ef5704cbf29a757883867569" translate="yes" xml:space="preserve">
          <source>Removes an installed debug function from the process. &lt;code&gt;Func&lt;/code&gt; or &lt;code&gt;FuncId&lt;/code&gt; must be the same as previously installed.</source>
          <target state="translated">インストールされているデバッグ機能をプロセスから削除します。 &lt;code&gt;Func&lt;/code&gt; または &lt;code&gt;FuncId&lt;/code&gt; は、以前にインストールしたものと同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="2df2ad072e68f52d7ebb2bd3a6411521ff839dae" translate="yes" xml:space="preserve">
          <source>Removes anything before &lt;code&gt;SearchPattern&lt;/code&gt; in &lt;code&gt;String&lt;/code&gt; and returns the remainder of the string or &lt;code&gt;nomatch&lt;/code&gt; if &lt;code&gt;SearchPattern&lt;/code&gt; is not found. &lt;code&gt;Dir&lt;/code&gt;, which can be &lt;code&gt;leading&lt;/code&gt; or &lt;code&gt;trailing&lt;/code&gt;, indicates from which direction characters are to be searched.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 内の &lt;code&gt;SearchPattern&lt;/code&gt; の前にあるものをすべて削除し、文字列の残りを返すか、 &lt;code&gt;SearchPattern&lt;/code&gt; が見つからない場合は &lt;code&gt;nomatch&lt;/code&gt; を返します。 &lt;code&gt;Dir&lt;/code&gt; は、 &lt;code&gt;leading&lt;/code&gt; または &lt;code&gt;trailing&lt;/code&gt; 、文字がどの方向から検索されるかを示します。</target>
        </trans-unit>
        <trans-unit id="c0c5aecc0b610cae928d0362a36410e9e33385d9" translate="yes" xml:space="preserve">
          <source>Removes applications and their modules and &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; from an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アプリケーションとそのモジュール、および &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; から削除します。</target>
        </trans-unit>
        <trans-unit id="d58329662a1a0da29049c8ec4fb23031b2a385a8" translate="yes" xml:space="preserve">
          <source>Removes cipher suites if any of the filter functions returns false for any part of the cipher suite. This function also calls default filter functions to make sure the cipher suites are supported by crypto. If no filter function is supplied for some part the default behaviour is fun(Algorithm) -&amp;gt; true.</source>
          <target state="translated">暗号スイートのいずれかの部分に対していずれかのフィルター関数がfalseを返した場合、暗号スイートを削除します。この関数は、デフォルトのフィルター関数も呼び出して、暗号スイートが暗号でサポートされていることを確認します。一部のフィルタ関数が指定されていない場合、デフォルトの動作はfun（Algorithm）-&amp;gt; trueです。</target>
        </trans-unit>
        <trans-unit id="6e0849ded45459bb75fc962a53bf83df2a5b5ba0" translate="yes" xml:space="preserve">
          <source>Removes configuration variables (together wih their aliases) that were loaded with specified callback module and configuration string.</source>
          <target state="translated">指定したコールバックモジュールと設定文字列で読み込まれた設定変数(エイリアスも含めて)を削除します。</target>
        </trans-unit>
        <trans-unit id="19a1a1f167a8dd46ef5ea9470ec88dd1d515a514" translate="yes" xml:space="preserve">
          <source>Removes directory &lt;code&gt;Dir&lt;/code&gt; at the remote server.</source>
          <target state="translated">リモートサーバーのディレクトリ &lt;code&gt;Dir&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="02924e99f1092efed94b21cddc4567c00ed0797b" translate="yes" xml:space="preserve">
          <source>Removes nodes from the current cover test.</source>
          <target state="translated">現在のカバーテストからノードを削除します。</target>
        </trans-unit>
        <trans-unit id="cf8e7542d98d969ab5b6a2bc0c3d6d5e50905b7d" translate="yes" xml:space="preserve">
          <source>Removes old code for &lt;code&gt;Module&lt;/code&gt;. Before this BIF is used, &lt;code&gt;&lt;a href=&quot;#check_process_code-2&quot;&gt;check_process_code/2&lt;/a&gt;&lt;/code&gt;is to be called to check that no processes execute old code in the module.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; の古いコードを削除します。このBIFを使用する前に、 &lt;code&gt;&lt;a href=&quot;#check_process_code-2&quot;&gt;check_process_code/2&lt;/a&gt;&lt;/code&gt; を呼び出して、プロセスがモジュール内の古いコードを実行していないことを確認します。</target>
        </trans-unit>
        <trans-unit id="281c5754c557f40c25fc049eb32abf747c439426" translate="yes" xml:space="preserve">
          <source>Removes releases and their applications, modules and &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; from an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; からリリースとそのアプリケーション、モジュール、および &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="1494c23d99ae7a074da0f5767968b97ada72e430" translate="yes" xml:space="preserve">
          <source>Removes selected record definitions. &lt;code&gt;RecordNames&lt;/code&gt; is a record name or a list of record names. To remove all record definitions, use &lt;code&gt;'_'&lt;/code&gt;.</source>
          <target state="translated">選択したレコード定義を削除します。 &lt;code&gt;RecordNames&lt;/code&gt; は、レコード名またはレコード名のリストです。すべてのレコード定義を削除するには、 &lt;code&gt;'_'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="08aa69eb4dff9986ba433e51ea964d15b903f2db" translate="yes" xml:space="preserve">
          <source>Removes the &lt;code&gt;Key&lt;/code&gt;, if it exists, and its associated value from &lt;code&gt;Map1&lt;/code&gt; and returns a new map &lt;code&gt;Map2&lt;/code&gt; without key &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">削除 &lt;code&gt;Key&lt;/code&gt; から、それが存在する場合、およびそれに関連する値を &lt;code&gt;Map1&lt;/code&gt; と新しいマップを返し &lt;code&gt;Map2&lt;/code&gt; キーなし &lt;code&gt;Key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="93557a3a60b8e22b6a793259a6b192bb29de371b" translate="yes" xml:space="preserve">
          <source>Removes the binding of &lt;code&gt;Name&lt;/code&gt; in &lt;code&gt;BindingStruct&lt;/code&gt;. Returns an updated binding structure.</source>
          <target state="translated">結合を削除 &lt;code&gt;Name&lt;/code&gt; で &lt;code&gt;BindingStruct&lt;/code&gt; を。更新されたバインディング構造を返します。</target>
        </trans-unit>
        <trans-unit id="537e2f9fa77de9edf6444f921d6e10ab6626425c" translate="yes" xml:space="preserve">
          <source>Removes the binding of variable &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">変数 &lt;code&gt;X&lt;/code&gt; のバインディングを削除します。</target>
        </trans-unit>
        <trans-unit id="2a70e4c1ab0cf5300dd607b66a1471f48013af8c" translate="yes" xml:space="preserve">
          <source>Removes the configuration parameter &lt;code&gt;Par&lt;/code&gt; and its value for &lt;code&gt;Application&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Application&lt;/code&gt; の構成パラメーター &lt;code&gt;Par&lt;/code&gt; とその値を削除します。</target>
        </trans-unit>
        <trans-unit id="2a7b9f71cdf502a6cbced36e46c5564bce6c50e1" translate="yes" xml:space="preserve">
          <source>Removes the current code for &lt;code&gt;Module&lt;/code&gt;, that is, the current code for &lt;code&gt;Module&lt;/code&gt; is made old. This means that processes can continue to execute the code in the module, but no external function calls can be made to it.</source>
          <target state="translated">以下のための現在のコード削除 &lt;code&gt;Module&lt;/code&gt; の現在のコードであり、 &lt;code&gt;Module&lt;/code&gt; 古い作られています。つまり、プロセスはモジュール内のコードを実行し続けることができますが、外部関数を呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="1f61ca04390382aeff5d670ab45ee550c4297632" translate="yes" xml:space="preserve">
          <source>Removes the globally registered name &lt;code&gt;Name&lt;/code&gt; from the network of Erlang nodes.</source>
          <target state="translated">Erlangノードのネットワークからグローバルに登録された名前 &lt;code&gt;Name&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="81e55227c7de5aa8064bff12851856ba47f63444" translate="yes" xml:space="preserve">
          <source>Removes the item at the front of queue &lt;code&gt;Q1&lt;/code&gt;. Returns tuple &lt;code&gt;{{value, Item}, Q2}&lt;/code&gt;, where &lt;code&gt;Item&lt;/code&gt; is the item removed and &lt;code&gt;Q2&lt;/code&gt; is the resulting queue. If &lt;code&gt;Q1&lt;/code&gt; is empty, tuple &lt;code&gt;{empty, Q1}&lt;/code&gt; is returned.</source>
          <target state="translated">キュー &lt;code&gt;Q1&lt;/code&gt; の前にあるアイテムを削除します。タプル &lt;code&gt;{{value, Item}, Q2}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Item&lt;/code&gt; は削除されたアイテムで、 &lt;code&gt;Q2&lt;/code&gt; は結果のキューです。 &lt;code&gt;Q1&lt;/code&gt; が空の場合、タプル &lt;code&gt;{empty, Q1}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="8847d0032fa945206d3bb9ae3e11a876f1dfecc7" translate="yes" xml:space="preserve">
          <source>Removes the item at the rear of queue &lt;code&gt;Q1&lt;/code&gt;. Returns tuple &lt;code&gt;{{value, Item}, Q2}&lt;/code&gt;, where &lt;code&gt;Item&lt;/code&gt; is the item removed and &lt;code&gt;Q2&lt;/code&gt; is the new queue. If &lt;code&gt;Q1&lt;/code&gt; is empty, tuple &lt;code&gt;{empty, Q1}&lt;/code&gt; is returned.</source>
          <target state="translated">キュー &lt;code&gt;Q1&lt;/code&gt; の後ろにあるアイテムを削除します。タプル &lt;code&gt;{{value, Item}, Q2}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Item&lt;/code&gt; は削除されたアイテムで、 &lt;code&gt;Q2&lt;/code&gt; は新しいキューです。 &lt;code&gt;Q1&lt;/code&gt; が空の場合、タプル &lt;code&gt;{empty, Q1}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="571beed8fa2a0a28fac65d7bf77305b45836b63c" translate="yes" xml:space="preserve">
          <source>Removes the link, if there is one, between the calling process and the process or port referred to by &lt;code&gt;Id&lt;/code&gt;.</source>
          <target state="translated">呼び出しプロセスと &lt;code&gt;Id&lt;/code&gt; によって参照されるプロセスまたはポートの間にリンクがある場合は、それを削除します。</target>
        </trans-unit>
        <trans-unit id="504de2ff2d5c71d2f018e6c02a78b16a7a10f573" translate="yes" xml:space="preserve">
          <source>Removes the node with key &lt;code&gt;Key&lt;/code&gt; from &lt;code&gt;Tree1&lt;/code&gt; and returns the new tree. Assumes that the key is present in the tree, crashes otherwise.</source>
          <target state="translated">キーが &lt;code&gt;Key&lt;/code&gt; のノードを &lt;code&gt;Tree1&lt;/code&gt; から削除し、新しいツリーを返します。キーがツリーに存在すると想定し、そうでなければクラッシュします。</target>
        </trans-unit>
        <trans-unit id="70950e4f3c8e2c52528b10b76a754de546dbfc5e" translate="yes" xml:space="preserve">
          <source>Removes the node with key &lt;code&gt;Key&lt;/code&gt; from &lt;code&gt;Tree1&lt;/code&gt; if the key is present in the tree, otherwise does nothing. Returns the new tree.</source>
          <target state="translated">キーがツリーに存在する場合、キーが &lt;code&gt;Key&lt;/code&gt; のノードを &lt;code&gt;Tree1&lt;/code&gt; から削除します。それ以外の場合は何もしません。新しいツリーを返します。</target>
        </trans-unit>
        <trans-unit id="971ac232183d0065bf0bdfc8b8573c390073318f" translate="yes" xml:space="preserve">
          <source>Removes the possibility for SNMP to manipulate the table.</source>
          <target state="translated">SNMPがテーブルを操作する可能性を削除します。</target>
        </trans-unit>
        <trans-unit id="f6583a0dab178a2fb992ad59fefd4d81f7931c54" translate="yes" xml:space="preserve">
          <source>Removes the registered name &lt;code&gt;RegName&lt;/code&gt; associated with a process identifier or a port identifier, for example:</source>
          <target state="translated">プロセス識別子またはポート識別子に関連付けられている登録名 &lt;code&gt;RegName&lt;/code&gt; を削除します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="dbc47bf2382d0f415e3aa194df6dfa16f631c639" translate="yes" xml:space="preserve">
          <source>Removes the service completely with all its registered options. It is stopped before it is removed.</source>
          <target state="translated">登録されているすべてのオプションでサービスを完全に削除します。削除される前に停止します。</target>
        </trans-unit>
        <trans-unit id="acc9c9c020f9d887226a9272cf21c3405519decf" translate="yes" xml:space="preserve">
          <source>Removes the subscription on events of type &lt;code&gt;Event-Category&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;Event-Category&lt;/code&gt; のイベントのサブスクリプションを削除します</target>
        </trans-unit>
        <trans-unit id="cb76eef89426250953e573fa86236fe52b0f4297" translate="yes" xml:space="preserve">
          <source>Removes the validation callback call before heartbeats.</source>
          <target state="translated">ハートビートの前の検証コールバックコールを削除します。</target>
        </trans-unit>
        <trans-unit id="1d9765a2dae7a6da7b34b4a4b327bad4140b2d58" translate="yes" xml:space="preserve">
          <source>Removes trailing empty parts of the result (as does &lt;code&gt;trim&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;re#split-3&quot;&gt;re:split/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">結果の末尾の空の部分を削除します（ &lt;code&gt;&lt;a href=&quot;re#split-3&quot;&gt;re:split/3&lt;/a&gt;&lt;/code&gt; での &lt;code&gt;trim&lt;/code&gt; と同様）。</target>
        </trans-unit>
        <trans-unit id="dc704ae3bc04ac3e06137d6e6058582a4d180738" translate="yes" xml:space="preserve">
          <source>Removing a transport causes the corresponding transport processes to be terminated. Whether or not a DPR message is sent to a peer is controlled by value of &lt;code&gt;&lt;a href=&quot;#disconnect_cb&quot;&gt;disconnect_cb&lt;/a&gt;&lt;/code&gt; configured on the transport.</source>
          <target state="translated">トランスポートを削除すると、対応するトランスポートプロセスが終了します。DPRメッセージがピアに送信されるかどうかは、トランスポートで構成された &lt;code&gt;&lt;a href=&quot;#disconnect_cb&quot;&gt;disconnect_cb&lt;/a&gt;&lt;/code&gt; の値によって制御されます。</target>
        </trans-unit>
        <trans-unit id="23711c5d370f461cdeb8d7a28cd3a7168c48b70d" translate="yes" xml:space="preserve">
          <source>Removing an application means that the application is stopped, the modules are unloaded using &lt;code&gt;delete_module&lt;/code&gt;, and then the application specification is unloaded from the application controller.</source>
          <target state="translated">アプリケーションを削除すると、アプリケーションが停止し、モジュールが &lt;code&gt;delete_module&lt;/code&gt; を使用してアンロードされ、その後、アプリケーション仕様がアプリケーションコントローラーからアンロードされます。</target>
        </trans-unit>
        <trans-unit id="2a257b8e79bb4eac48b669f49bbde3fc82db52ad" translate="yes" xml:space="preserve">
          <source>Removing an application means that the application is stopped, the modules are unloaded using a number of &lt;code&gt;delete_module&lt;/code&gt; instructions, and then the application specification is unloaded from the application controller.</source>
          <target state="translated">アプリケーションの削除とは、アプリケーションが停止し、モジュールがいくつかの &lt;code&gt;delete_module&lt;/code&gt; 命令を使用してアンロードされ、その後、アプリケーション仕様がアプリケーションコントローラーからアンロードされることを意味します。</target>
        </trans-unit>
        <trans-unit id="21ecfe29f13ab8d3591c9f7ede9bc7422e8e8b32" translate="yes" xml:space="preserve">
          <source>Removing the &lt;code&gt;timer&lt;/code&gt; key from the map when we change to state &lt;code&gt;locked&lt;/code&gt; is not strictly necessary since we can only get into state &lt;code&gt;open&lt;/code&gt; with an updated &lt;code&gt;timer&lt;/code&gt; map value. But it can be nice to not have outdated values in the state &lt;code&gt;Data&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;locked&lt;/code&gt; れた状態に変更したときに &lt;code&gt;timer&lt;/code&gt; キーをマップから削除することは、更新された &lt;code&gt;timer&lt;/code&gt; マップ値でのみ &lt;code&gt;open&lt;/code&gt; 状態になるため、厳密には必要ありません。しかし、状態 &lt;code&gt;Data&lt;/code&gt; に古い値が含まれていないのは良いことです。</target>
        </trans-unit>
        <trans-unit id="0cfa720136cd04bacd2eac92ab7474295652cf42" translate="yes" xml:space="preserve">
          <source>Renames &lt;code&gt;Old&lt;/code&gt; to &lt;code&gt;New&lt;/code&gt; at the remote server.</source>
          <target state="translated">リモートサーバーで &lt;code&gt;Old&lt;/code&gt; を &lt;code&gt;New&lt;/code&gt; に名前変更します。</target>
        </trans-unit>
        <trans-unit id="6d0f47bb19f5b5facec144970690eb3792cd2ef5" translate="yes" xml:space="preserve">
          <source>Renames a file named &lt;code&gt;OldName&lt;/code&gt; and gives it the name &lt;code&gt;NewName&lt;/code&gt;.</source>
          <target state="translated">指定されたファイルの名前を変更 &lt;code&gt;OldName&lt;/code&gt; し、名前を与えます &lt;code&gt;NewName&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="08c6204fdae6705e22c2f29ad8fc6ee2ce0504b5" translate="yes" xml:space="preserve">
          <source>Renames a set of possibly interdependent source code modules. &lt;code&gt;Files&lt;/code&gt; is a list of file names of source modules to be processed. &lt;code&gt;Renamings&lt;/code&gt; is a list of pairs of &lt;strong&gt;module names&lt;/strong&gt;, representing a mapping from old names to new. The returned value is the list of output file names.</source>
          <target state="translated">相互に依存する可能性のある一連のソースコードモジュールの名前を変更します。 &lt;code&gt;Files&lt;/code&gt; は、処理されるソースモジュールのファイル名のリストです。 &lt;code&gt;Renamings&lt;/code&gt; は、古い名前から新しい名前へのマッピングを表す、&lt;strong&gt;モジュール名&lt;/strong&gt;のペアのリストです。戻り値は出力ファイル名のリストです。</target>
        </trans-unit>
        <trans-unit id="fd85297b6c1591a7f5105a46107e2cb8283239d7" translate="yes" xml:space="preserve">
          <source>Renames the log file to &lt;code&gt;File&lt;/code&gt; and then recreates a new log file. If a wrap log exists, &lt;code&gt;File&lt;/code&gt; is used as the base name of the renamed files. By default the header given to &lt;code&gt;open/1&lt;/code&gt; is written first in the newly opened log file, but if argument &lt;code&gt;Head&lt;/code&gt; or &lt;code&gt;BHead&lt;/code&gt; is specified, this item is used instead. The header argument is used only once. Next time a wrap log file is opened, the header given to &lt;code&gt;open/1&lt;/code&gt; is used.</source>
          <target state="translated">ログファイルの名前を &lt;code&gt;File&lt;/code&gt; に変更してから、新しいログファイルを再作成します。ラップログが存在する場合、名前が変更されたファイルのベース名として &lt;code&gt;File&lt;/code&gt; が使用されます。デフォルトでは、 &lt;code&gt;open/1&lt;/code&gt; に指定されたヘッダーが、新しく開かれたログファイルの最初に書き込まれますが、引数 &lt;code&gt;Head&lt;/code&gt; または &lt;code&gt;BHead&lt;/code&gt; が指定されている場合は、このアイテムが代わりに使用されます。header引数は1回だけ使用されます。次にラップログファイルが開かれるとき、 &lt;code&gt;open/1&lt;/code&gt; に指定されたヘッダーが使用されます。</target>
        </trans-unit>
        <trans-unit id="54af7ac61590d862405adf0734930d6cae2cb066" translate="yes" xml:space="preserve">
          <source>Renames the named table &lt;code&gt;Tab&lt;/code&gt; to the new name &lt;code&gt;Name&lt;/code&gt;. Afterwards, the old name cannot be used to access the table. Renaming an unnamed table has no effect.</source>
          <target state="translated">名前付きテーブル &lt;code&gt;Tab&lt;/code&gt; の &lt;code&gt;Name&lt;/code&gt; 新しい名前Nameに変更します。その後、古い名前を使用してテーブルにアクセスすることはできません。名前のないテーブルの名前を変更しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="ff5eaf0e51b9b10a59f079047c36ed274ea953d1" translate="yes" xml:space="preserve">
          <source>Renaming of open files is not allowed on most platforms (see &lt;code&gt;eacces&lt;/code&gt; below).</source>
          <target state="translated">開いているファイルの名前を変更することは、ほとんどのプラットフォームで許可されていません（以下の &lt;code&gt;eacces&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="7fad444613612977458b8b88430a31438343ac58" translate="yes" xml:space="preserve">
          <source>Repeat the modification step with the tail of &lt;code&gt;modify_algs_list()&lt;/code&gt; and the resulting &lt;code&gt;A'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modify_algs_list()&lt;/code&gt; の末尾と結果の &lt;code&gt;A'&lt;/code&gt; を使用して、変更手順を繰り返します。</target>
        </trans-unit>
        <trans-unit id="8ac3f3cc198e4d81a7905803f774173fbcea00b2" translate="yes" xml:space="preserve">
          <source>Repeat until there is no path between &lt;code&gt;V1&lt;/code&gt; and &lt;code&gt;V2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;V1&lt;/code&gt; と &lt;code&gt;V2&lt;/code&gt; の間にパスがなくなるまで繰り返します。</target>
        </trans-unit>
        <trans-unit id="882850f9efe1aecf6bc3eb3238cdb7ef37fa9c9b" translate="yes" xml:space="preserve">
          <source>Repeats command &lt;code&gt;N&lt;/code&gt;, if &lt;code&gt;N&lt;/code&gt; is positive. If it is negative, the &lt;code&gt;N&lt;/code&gt;th previous command is repeated (that is, &lt;code&gt;e(-1)&lt;/code&gt; repeats the previous command).</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; が正の場合、コマンド &lt;code&gt;N&lt;/code&gt; を繰り返します。負の場合、 &lt;code&gt;N&lt;/code&gt; 番目の前のコマンドが繰り返されます（つまり、 &lt;code&gt;e(-1)&lt;/code&gt; は前のコマンドを繰り返します）。</target>
        </trans-unit>
        <trans-unit id="f80a175e58465cf2c27bbc9fe26e988c97a71cc0" translate="yes" xml:space="preserve">
          <source>Repeats the split until &lt;code&gt;Subject&lt;/code&gt; is exhausted. Conceptually option &lt;code&gt;global&lt;/code&gt; makes split work on the positions returned by &lt;code&gt;&lt;a href=&quot;#matches-3&quot;&gt;matches/3&lt;/a&gt;&lt;/code&gt;, while it normally works on the position returned by &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; がなくなるまで分割を繰り返します。概念的にはオプション &lt;code&gt;global&lt;/code&gt; ポジションになり、分割作業がで返される &lt;code&gt;&lt;a href=&quot;#matches-3&quot;&gt;matches/3&lt;/a&gt;&lt;/code&gt; それは通常で返される位置で動作しながら、 &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a172a0f5c387a5e46c31a43f2cefffb22c95831f" translate="yes" xml:space="preserve">
          <source>Repetition is specified by quantifiers, which can follow any of the following items:</source>
          <target state="translated">繰り返しは量詞で指定され、以下の項目のいずれかに従うことができます。</target>
        </trans-unit>
        <trans-unit id="146808ca12c9af96348c2ab80e60f75d56da8935" translate="yes" xml:space="preserve">
          <source>Replace the kex algorithms list with the single algorithm &lt;code&gt;'diffie-hellman-group14-sha256'&lt;/code&gt;:</source>
          <target state="translated">kexアルゴリズムリストを単一のアルゴリズム &lt;code&gt;'diffie-hellman-group14-sha256'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56d42d2b692a0d6476978d84d1a8114ac3464d87" translate="yes" xml:space="preserve">
          <source>Replaces &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; of an &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed module&lt;/a&gt;&lt;/code&gt; with data read from a BEAM file. Application membership of the module is retained, and so is the value of the &lt;code&gt;builtins&lt;/code&gt; option of the module. An error is returned if the name of the read module differs from the given module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed module&lt;/a&gt;&lt;/code&gt; データを、BEAMファイルから読み取られた &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; に置き換えます。モジュールのアプリケーションメンバーシップは保持され、モジュールの &lt;code&gt;builtins&lt;/code&gt; オプションの値も保持されます。読み込まれたモジュールの名前が指定されたモジュールと異なる場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="7d9750cc1b6985af6ed569e4fe99331e1df8b510" translate="yes" xml:space="preserve">
          <source>Replaces &lt;code&gt;SearchPattern&lt;/code&gt; in &lt;code&gt;String&lt;/code&gt; with &lt;code&gt;Replacement&lt;/code&gt;. &lt;code&gt;Where&lt;/code&gt;, default &lt;code&gt;leading&lt;/code&gt;, indicates whether the &lt;code&gt;leading&lt;/code&gt;, the &lt;code&gt;trailing&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt; encounters of &lt;code&gt;SearchPattern&lt;/code&gt; are to be replaced.</source>
          <target state="translated">置き換え &lt;code&gt;SearchPattern&lt;/code&gt; 内 &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;Replacement&lt;/code&gt; 。 &lt;code&gt;Where&lt;/code&gt; 、デフォルトの &lt;code&gt;leading&lt;/code&gt; 、 &lt;code&gt;SearchPattern&lt;/code&gt; の &lt;code&gt;leading&lt;/code&gt; 、 &lt;code&gt;trailing&lt;/code&gt; または &lt;code&gt;all&lt;/code&gt; エンカウンターを置き換えるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="a561fe60c3d9ba1409232278ffca46e8f6e25489" translate="yes" xml:space="preserve">
          <source>Replaces an event handler in event manager &lt;code&gt;EventMgrRef&lt;/code&gt; in the same way as &lt;code&gt;swap_handler/3&lt;/code&gt;, but also supervises the connection between &lt;code&gt;Handler2&lt;/code&gt; and the calling process.</source>
          <target state="translated">イベントマネージャ &lt;code&gt;EventMgrRef&lt;/code&gt; のイベントハンドラを &lt;code&gt;swap_handler/3&lt;/code&gt; と同じ方法で置き換えますが、 &lt;code&gt;Handler2&lt;/code&gt; と呼び出しプロセス間の接続も監視します。</target>
        </trans-unit>
        <trans-unit id="419481a738590ffe74f074cd3f66660d64a0e60c" translate="yes" xml:space="preserve">
          <source>Replaces an old event handler with a new event handler in event manager &lt;code&gt;EventMgrRef&lt;/code&gt;.</source>
          <target state="translated">イベントマネージャー &lt;code&gt;EventMgrRef&lt;/code&gt; の古いイベントハンドラーを新しいイベントハンドラーに置き換えます。</target>
        </trans-unit>
        <trans-unit id="9eed3a84ce22771b5808dd7e1463a515114573df" translate="yes" xml:space="preserve">
          <source>Replaces an old occurrence of a directory named &lt;code&gt;.../Name[-Vsn][/ebin]&lt;/code&gt; in the code path, with &lt;code&gt;Dir&lt;/code&gt;. If &lt;code&gt;Name&lt;/code&gt; does not exist, it adds the new directory &lt;code&gt;Dir&lt;/code&gt; last in the code path. The new directory must also be named &lt;code&gt;.../Name[-Vsn][/ebin]&lt;/code&gt;. This function is to be used if a new version of the directory (library) is added to a running system.</source>
          <target state="translated">コードパス内の &lt;code&gt;.../Name[-Vsn][/ebin]&lt;/code&gt; という名前のディレクトリの古いオカレンスを &lt;code&gt;Dir&lt;/code&gt; に置き換えます。 &lt;code&gt;Name&lt;/code&gt; が存在しない場合は、コードパスの最後に新しいディレクトリ &lt;code&gt;Dir&lt;/code&gt; を追加します。新しいディレクトリの名前も &lt;code&gt;.../Name[-Vsn][/ebin]&lt;/code&gt; 必要があります。この関数は、実行中のシステムに新しいバージョンのディレクトリ（ライブラリ）が追加された場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="e95e156f5a3b21e55b9e9d7df8ac40e83028b042" translate="yes" xml:space="preserve">
          <source>Replaces the &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; of all &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt; the BEAM files of which have been modified since last read by an &lt;code&gt;add&lt;/code&gt; function or &lt;code&gt;update&lt;/code&gt;. Application membership of the modules is retained, and so is the value of the &lt;code&gt;builtins&lt;/code&gt; option. Returns a sorted list of the names of the replaced modules.</source>
          <target state="translated">&lt;code&gt;add&lt;/code&gt; 関数または &lt;code&gt;update&lt;/code&gt; による最後の読み取り以降にBEAMファイルが変更されたすべての &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を置き換えます。モジュールのアプリケーションメンバーシップは保持され、 &lt;code&gt;builtins&lt;/code&gt; オプションの値も保持されます。置き換えられたモジュールの名前のソートされたリストを返します。</target>
        </trans-unit>
        <trans-unit id="e162acc877cce3efc4c4645eed631739ea69f0f7" translate="yes" xml:space="preserve">
          <source>Replaces the existing objects of table &lt;code&gt;Name&lt;/code&gt; with objects created by calling the input function &lt;code&gt;InitFun&lt;/code&gt;, see below. The reason for using this function rather than calling &lt;code&gt;insert/2&lt;/code&gt; is that of efficiency. Notice that the input functions are called by the process that handles requests to the Dets table, not by the calling process.</source>
          <target state="translated">テーブル &lt;code&gt;Name&lt;/code&gt; の既存のオブジェクトを、入力関数 &lt;code&gt;InitFun&lt;/code&gt; を呼び出して作成されたオブジェクトで置き換えます。以下を参照してください。 &lt;code&gt;insert/2&lt;/code&gt; を呼び出すのではなく、この関数を使用する理由は、効率のためです。入力関数は、呼び出し元のプロセスではなく、Detsテーブルへの要求を処理するプロセスによって呼び出されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a2e2db8771ec60e84f4f89a23c30a3ab11bf1890" translate="yes" xml:space="preserve">
          <source>Replaces the existing objects of table &lt;code&gt;Tab&lt;/code&gt; with objects created by calling the input function &lt;code&gt;InitFun&lt;/code&gt;, see below. This function is provided for compatibility with the &lt;code&gt;dets&lt;/code&gt; module, it is not more efficient than filling a table by using &lt;code&gt;&lt;a href=&quot;#insert-2&quot;&gt;insert/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブル &lt;code&gt;Tab&lt;/code&gt; の既存のオブジェクトを、入力関数 &lt;code&gt;InitFun&lt;/code&gt; を呼び出して作成されたオブジェクトで置き換えます。以下を参照してください。この関数は &lt;code&gt;dets&lt;/code&gt; モジュールとの互換性のために提供されており、 &lt;code&gt;&lt;a href=&quot;#insert-2&quot;&gt;insert/2&lt;/a&gt;&lt;/code&gt; を使用してテーブルを埋めるよりも効率的ではありません。</target>
        </trans-unit>
        <trans-unit id="6628e9df362f62f633a5d7e6425eed79b6dbe778" translate="yes" xml:space="preserve">
          <source>Replaces the matched part of the &lt;code&gt;Subject&lt;/code&gt; string with the contents of &lt;code&gt;Replacement&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 文字列の一致した部分を &lt;code&gt;Replacement&lt;/code&gt; の内容で置き換えます。</target>
        </trans-unit>
        <trans-unit id="12f3f7bbddec5d3195ba4a36bdd58ba53790386e" translate="yes" xml:space="preserve">
          <source>Replaces the modules of an application with other modules read from an application directory. Release membership of the application is retained. Note that the name of the application is kept; the name of the given directory is not used.</source>
          <target state="translated">アプリケーションのモジュールを、アプリケーションディレクトリから読み込んだ他のモジュールに置き換えます。アプリケーションのリリースメンバシップは保持されます。アプリケーションの名前は保持され、指定されたディレクトリの名前は使用されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a8d1a9d58a5e5ca14250cdab073b72fea337a464" translate="yes" xml:space="preserve">
          <source>Replaces the path specified in the boot script; see &lt;code&gt;script(4)&lt;/code&gt;.</source>
          <target state="translated">ブートスクリプトで指定されたパスを置き換えます。 &lt;code&gt;script(4)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="047f0df8a3018b8551685d31f76e6d44444474fc" translate="yes" xml:space="preserve">
          <source>Replaces the state of the process, and returns the new state.</source>
          <target state="translated">プロセスの状態を置き換え、新しい状態を返します。</target>
        </trans-unit>
        <trans-unit id="9184d9c39282b5754d576935dbc39e77f9d02e83" translate="yes" xml:space="preserve">
          <source>Replicas of type &lt;code&gt;disc_only_copies&lt;/code&gt; are only affected by this parameter during the initial dump of the log file at startup. When designing applications with &lt;strong&gt;very&lt;/strong&gt; high requirements, it can be appropriate not to use &lt;code&gt;disc_only_copies&lt;/code&gt; tables at all. The reason for this is the random access nature of normal operating system files. If a node goes down for a reason such as a power failure, these files can be corrupted because they are not properly closed. The &lt;code&gt;DAT&lt;/code&gt; files for &lt;code&gt;disc_only_copies&lt;/code&gt; are updated on a per transaction basis.</source>
          <target state="translated">タイプ &lt;code&gt;disc_only_copies&lt;/code&gt; のレプリカは、起動時のログファイルの初期ダンプ中にのみこのパラメーターの影響を受けます。要件が&lt;strong&gt;非常に&lt;/strong&gt;高いアプリケーションを設計する場合、 &lt;code&gt;disc_only_copies&lt;/code&gt; テーブルをまったく使用しないことが適切な場合があります。この理由は、通常のオペレーティングシステムファイルのランダムアクセスの性質です。停電などの理由でノードがダウンした場合、これらのファイルは適切に閉じられていないため、破損している可能性があります。 &lt;code&gt;disc_only_copies&lt;/code&gt; の &lt;code&gt;DAT&lt;/code&gt; ファイルは、トランザクションごとに更新されます。</target>
        </trans-unit>
        <trans-unit id="6ac8596fa89edfabdcf6fecf958d16a005ece982" translate="yes" xml:space="preserve">
          <source>Replicated tables have the same content on all nodes where they are replicated. However, it is sometimes advantageous to have tables, but different content on different nodes.</source>
          <target state="translated">複製されたテーブルは、複製されたすべてのノードで同じ内容を持ちます。しかし、異なるノードに異なる内容のテーブルを持つことが有利な場合もあります。</target>
        </trans-unit>
        <trans-unit id="3a9e9afe1a552da9f13fde90fd0f5258e6b4db3e" translate="yes" xml:space="preserve">
          <source>Replicated tables that reside locally as well as somewhere else are either initiated from disc or by copying the entire table from the other node, depending on which of the different replicas are the most recent. &lt;code&gt;Mnesia&lt;/code&gt; determines which of the tables are the most recent.</source>
          <target state="translated">ローカルや他の場所にある複製されたテーブルは、最新の異なるレプリカに応じて、ディスクから、または他のノードからテーブル全体をコピーすることによって開始されます。 &lt;code&gt;Mnesia&lt;/code&gt; は、どのテーブルが最新かを判別します。</target>
        </trans-unit>
        <trans-unit id="5ebc556c3a47de1e105808f80a573351d288796c" translate="yes" xml:space="preserve">
          <source>Replication. Tables can be replicated at several nodes.</source>
          <target state="translated">レプリケーション。テーブルは、複数のノードで複製することができます。</target>
        </trans-unit>
        <trans-unit id="e7fb706c746d6c42069331ec3f48fc3bf37dbe5a" translate="yes" xml:space="preserve">
          <source>Replies arriving after the timer has expired, will be delivered using the &lt;code&gt;&lt;a href=&quot;megaco_user#unexpected_trans&quot;&gt;handle_unexpected_trans/3,4&lt;/a&gt;&lt;/code&gt; callback function.</source>
          <target state="translated">タイマーの期限が切れた後に到着する返信は、 &lt;code&gt;&lt;a href=&quot;megaco_user#unexpected_trans&quot;&gt;handle_unexpected_trans/3,4&lt;/a&gt;&lt;/code&gt; コールバック関数を使用して配信されます。</target>
        </trans-unit>
        <trans-unit id="126cf04b40e9dfa6af76d4b4da1a8ce9285a1fa9" translate="yes" xml:space="preserve">
          <source>Reply :: term()</source>
          <target state="translated">返信 ::term()</target>
        </trans-unit>
        <trans-unit id="58cf87f6dac57b28d02194486fcb6f8dd6ecc261" translate="yes" xml:space="preserve">
          <source>Reply from other state than the request, &lt;code&gt;sys&lt;/code&gt; traceable</source>
          <target state="translated">要求以外の状態からの返信、 &lt;code&gt;sys&lt;/code&gt; 追跡可能</target>
        </trans-unit>
        <trans-unit id="7a00bbb5f99bc04dd63e793a0e32145c7dc90c48" translate="yes" xml:space="preserve">
          <source>Reply to &lt;code&gt;Port ! {Pid,close}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Port ! {Pid,close}&lt;/code&gt; 返信！{でPid、クローズ}。</target>
        </trans-unit>
        <trans-unit id="8694767ec4c7b52fb9e3f8d2f15cf11c06894a41" translate="yes" xml:space="preserve">
          <source>Reply to &lt;code&gt;Port ! {Pid,{connect,NewPid}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Port ! {Pid,{connect,NewPid}}&lt;/code&gt; 返信！{PIDは、{}、NEWPIDを接続します}。</target>
        </trans-unit>
        <trans-unit id="4b96dfeb12fd8a4e4012eab404a286bb6ae1f178" translate="yes" xml:space="preserve">
          <source>Reply to a caller, mentioned at the end of section &lt;code&gt;&lt;a href=&quot;#All%20State%20Events&quot;&gt;All State Events&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">「 &lt;code&gt;&lt;a href=&quot;#All%20State%20Events&quot;&gt;All State Events&lt;/a&gt;&lt;/code&gt; セクションの最後に記載されている発信者への返信</target>
        </trans-unit>
        <trans-unit id="72df4b4bc039d9b2e5bdd4ac208ec2c87607d70b" translate="yes" xml:space="preserve">
          <source>Reply | {error, Reason}</source>
          <target state="translated">返信|エラー、理由</target>
        </trans-unit>
        <trans-unit id="d41fb2069eb0e10f46e258ab0b1229e85d9491d5" translate="yes" xml:space="preserve">
          <source>Report a parsed external entity declaration.</source>
          <target state="translated">解析された外部エンティティ宣言を報告します。</target>
        </trans-unit>
        <trans-unit id="ea5741dec57b6d216da5d5c515fc46fa697f27c6" translate="yes" xml:space="preserve">
          <source>Report an XML comment anywhere in the document (both inside and outside of the document element).</source>
          <target state="translated">ドキュメント内の任意の場所(ドキュメント要素の内側と外側の両方)でXMLコメントを報告します。</target>
        </trans-unit>
        <trans-unit id="5b4904e061e57bddfab52b6cfd2d3ea1d06c349e" translate="yes" xml:space="preserve">
          <source>Report an attribute type declaration.</source>
          <target state="translated">属性型宣言を報告します。</target>
        </trans-unit>
        <trans-unit id="e3db9c3fab04d85ea232a7fcf942fbfd1b004b09" translate="yes" xml:space="preserve">
          <source>Report an element type declaration. The content model will consist of the string &quot;EMPTY&quot;, the string &quot;ANY&quot;, or a parenthesised group, optionally followed by an occurrence indicator. The model will be normalized so that all parameter entities are fully resolved and all whitespace is removed,and will include the enclosing parentheses. Other normalization (such as removing redundant parentheses or simplifying occurrence indicators) is at the discretion of the parser.</source>
          <target state="translated">要素型宣言を報告する。内容モデルは、文字列 &quot;EMPTY&quot;、文字列 &quot;ANY&quot;、または括弧で囲まれたグループで構成され、オプションで後に出現指標が続く。モデルは、すべてのパラメータ実体が完全に解決され、すべての空白が取り除かれるように正規化され、囲む括弧を含む。その他の正規化(冗長な括弧の削除やオカレンス指標の簡略化など)はパーサの裁量によります。</target>
        </trans-unit>
        <trans-unit id="bf5d2d664010dcb10710bdf2302a984224d32fd1" translate="yes" xml:space="preserve">
          <source>Report an event to the collector.</source>
          <target state="translated">イベントをコレクターに報告します。</target>
        </trans-unit>
        <trans-unit id="0726ec060dd61caf7a44399784154bba339be6e5" translate="yes" xml:space="preserve">
          <source>Report an internal entity declaration.</source>
          <target state="translated">内部エンティティ宣言を報告します。</target>
        </trans-unit>
        <trans-unit id="b903e37625cb00383193345807e6f2cd70182b4f" translate="yes" xml:space="preserve">
          <source>Report browsing</source>
          <target state="translated">レポートの閲覧</target>
        </trans-unit>
        <trans-unit id="b4e0e2fdd9a9b427f43e27d5c7689fab83f4954f" translate="yes" xml:space="preserve">
          <source>Report the beginning of some internal and external XML entities. ???</source>
          <target state="translated">いくつかの内部および外部 XML エンティティの開始を報告します。???</target>
        </trans-unit>
        <trans-unit id="1537db331987c73e42ec79886424725e7ced0ca8" translate="yes" xml:space="preserve">
          <source>Report the end of DTD declarations, it's reporting the end of the DOCTYPE declaration.</source>
          <target state="translated">DTD宣言の終了を報告する、それはDOCTYPE宣言の終了を報告しています。</target>
        </trans-unit>
        <trans-unit id="45b1374aafa256e46789d17cd746069ce811a778" translate="yes" xml:space="preserve">
          <source>Report the end of a CDATA section.</source>
          <target state="translated">CDATAセクションの終了を報告します。</target>
        </trans-unit>
        <trans-unit id="4e77cabadac053249b29d05bd9d1d234e2cc1e97" translate="yes" xml:space="preserve">
          <source>Report the end of an entity. ???</source>
          <target state="translated">エンティティの終了を報告します。???</target>
        </trans-unit>
        <trans-unit id="c09ed9bee7f1262daef582c404162b533ffaa466" translate="yes" xml:space="preserve">
          <source>Report the start of DTD declarations, it's reporting the start of the DOCTYPE declaration. If the document has no DOCTYPE declaration, this event will not be sent.</source>
          <target state="translated">DTD宣言の開始を報告する、それはDOCTYPE宣言の開始を報告しています。文書にDOCTYPE宣言がない場合、このイベントは送信されません。</target>
        </trans-unit>
        <trans-unit id="2b91bc27e6fa6a320a4ff9f88df2653241bb852b" translate="yes" xml:space="preserve">
          <source>Report the start of a CDATA section. The contents of the CDATA section will be reported through the regular characters event.</source>
          <target state="translated">CDATA セクションの開始を報告します。CDATAセクションの内容は、通常の文字イベントを通して報告されます。</target>
        </trans-unit>
        <trans-unit id="93fd5ff4921baf203ff8b603c22461be039d636b" translate="yes" xml:space="preserve">
          <source>Reports term allocation statistics.</source>
          <target state="translated">期間配分統計を報告します。</target>
        </trans-unit>
        <trans-unit id="99f5b324157a74f4ba599f70ce8661cfdaad5091" translate="yes" xml:space="preserve">
          <source>Reports the service as stopped to the service manager whenever it fails; it must be manually restarted.</source>
          <target state="translated">障害が発生するたびに、サービスが停止していることをサービスマネージャに報告します。</target>
        </trans-unit>
        <trans-unit id="e58aecb98ff170f7c11b8160942cbfb76f351aa2" translate="yes" xml:space="preserve">
          <source>Represents a file path or directory path</source>
          <target state="translated">ファイルパスまたはディレクトリパスを表します。</target>
        </trans-unit>
        <trans-unit id="22e7792d22c5ac3675d98858db71f22cbdabe7a5" translate="yes" xml:space="preserve">
          <source>Represents a file path.</source>
          <target state="translated">ファイルパスを表します。</target>
        </trans-unit>
        <trans-unit id="5f7ed31f709b30e7c94bd6f94122425a637cb46a" translate="yes" xml:space="preserve">
          <source>Request :: term(),</source>
          <target state="translated">リクエスト ::term()。</target>
        </trans-unit>
        <trans-unit id="507b55ef67a3793e186e31503844b20cdf44035d" translate="yes" xml:space="preserve">
          <source>Request &lt;code&gt;get_geometry&lt;/code&gt; has no meaning for this I/O server, so the reply is &lt;code&gt;{error, enotsup}&lt;/code&gt;. The only option we handle is &lt;code&gt;binary&lt;/code&gt;/&lt;code&gt;list&lt;/code&gt;, which is done in separate functions.</source>
          <target state="translated">リクエスト &lt;code&gt;get_geometry&lt;/code&gt; はこのI / Oサーバーには意味がないため、応答は &lt;code&gt;{error, enotsup}&lt;/code&gt; です。私たちが扱う唯一のオプションは、別の関数で実行される &lt;code&gt;binary&lt;/code&gt; / &lt;code&gt;list&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="24e691247dfe3630fd35fda8c0e139ee4284bed3" translate="yes" xml:space="preserve">
          <source>Request &lt;code&gt;getopts&lt;/code&gt; is to return a list of &lt;code&gt;{Option, Value}&lt;/code&gt; tuples. This has the twofold function of providing both the current values and the available options of this I/O server. We have only one option, and hence return that.</source>
          <target state="translated">&lt;code&gt;getopts&lt;/code&gt; のリクエストは、 &lt;code&gt;{Option, Value}&lt;/code&gt; タプルのリストを返すことです。これには、このI / Oサーバーの現在の値と使用可能なオプションの両方を提供するという2つの機能があります。オプションは1つだけなので、それを返します。</target>
        </trans-unit>
        <trans-unit id="2e0c378c7ccfe92728a6bfeeedc02369a4d75150" translate="yes" xml:space="preserve">
          <source>Request Forwarding</source>
          <target state="translated">リクエスト転送</target>
        </trans-unit>
        <trans-unit id="370aa763d24c7c6a889f8bc1f6473021ef74ab40" translate="yes" xml:space="preserve">
          <source>Request Routing</source>
          <target state="translated">リクエストルーティング</target>
        </trans-unit>
        <trans-unit id="e22d3290b587090a383ad7e805ef81704f3e3f28" translate="yes" xml:space="preserve">
          <source>Request URI</source>
          <target state="translated">リクエストURI</target>
        </trans-unit>
        <trans-unit id="0f51f8766bdb5268b3f7a7fb925d40cf0ac64489" translate="yes" xml:space="preserve">
          <source>Request a notification (message) when the SNMP manager has started.</source>
          <target state="translated">SNMP管理者が起動した際の通知(メッセージ)を要求します。</target>
        </trans-unit>
        <trans-unit id="b54284e63f3207a9fed531cafce78b6ab997861b" translate="yes" xml:space="preserve">
          <source>Request notification when more data is available to fetch using &lt;code&gt;&lt;a href=&quot;erlang#dist_ctrl_get_data-1&quot;&gt;erlang:dist_ctrl_get_data(DHandle)&lt;/a&gt;&lt;/code&gt; for the distribution channel identified by &lt;code&gt;DHandle&lt;/code&gt;. When more data is present, the caller will be sent the message &lt;code&gt;dist_data&lt;/code&gt;. Once a &lt;code&gt;dist_data&lt;/code&gt; messages has been sent, no more &lt;code&gt;dist_data&lt;/code&gt; messages will be sent until the &lt;code&gt;dist_ctrl_get_data_notification/1&lt;/code&gt; function has been called again.</source>
          <target state="translated">&lt;code&gt;DHandle&lt;/code&gt; で識別される配布チャネルの &lt;code&gt;&lt;a href=&quot;erlang#dist_ctrl_get_data-1&quot;&gt;erlang:dist_ctrl_get_data(DHandle)&lt;/a&gt;&lt;/code&gt; を使用して、フェッチできるデータが増えたときに通知を要求します。さらに多くのデータが存在する場合、呼び出し元にはメッセージ &lt;code&gt;dist_data&lt;/code&gt; が送信されます。いったん &lt;code&gt;dist_data&lt;/code&gt; メッセージが送られてきた、これ以上 &lt;code&gt;dist_data&lt;/code&gt; まで、メッセージは送信されません &lt;code&gt;dist_ctrl_get_data_notification/1&lt;/code&gt; 関数が再び呼ばれてきました。</target>
        </trans-unit>
        <trans-unit id="2a5f2a76edb63ef16353fc42ce9a4bc1b8d49591" translate="yes" xml:space="preserve">
          <source>Request the network interface process (&lt;code&gt;Pid&lt;/code&gt;) to send this pdu (&lt;code&gt;Pdu&lt;/code&gt;).</source>
          <target state="translated">この &lt;code&gt;Pdu&lt;/code&gt; （Pdu）を送信するようにネットワークインターフェイスプロセス（ &lt;code&gt;Pid&lt;/code&gt; ）を要求します。</target>
        </trans-unit>
        <trans-unit id="f13633a66bddd5919d4452b83066b5c9306c3699" translate="yes" xml:space="preserve">
          <source>Requests &lt;code&gt;getopts&lt;/code&gt; and &lt;code&gt;setopts&lt;/code&gt; are also simple to handle. We only change or read the state record:</source>
          <target state="translated">&lt;code&gt;getopts&lt;/code&gt; と &lt;code&gt;setopts&lt;/code&gt; のリクエストも簡単に処理できます。状態レコードを変更または読み取るだけです。</target>
        </trans-unit>
        <trans-unit id="64e6fe8df794535a6e7f8e3381fa29ec4cd2b3fe" translate="yes" xml:space="preserve">
          <source>Requests all available options and their current values for a specific I/O device, for example:</source>
          <target state="translated">特定のI/Oデバイスなどで利用可能なすべてのオプションとその現在の値を要求します。</target>
        </trans-unit>
        <trans-unit id="44b5e144b529d1d34d542fbdbbb37113f0041e10" translate="yes" xml:space="preserve">
          <source>Requests are constructed by the user; diameter sets header fields as defined in the relevant dictionary.</source>
          <target state="translated">リクエストはユーザーによって構築されます;diameterは関連する辞書で定義されたヘッダーフィールドを設定します。</target>
        </trans-unit>
        <trans-unit id="ddc39c20a1e625e364b51db01eb9285198684651" translate="yes" xml:space="preserve">
          <source>Requests can be issued in two different ways. Synchronous (see &lt;code&gt;&lt;a href=&quot;snmpm#sync_set&quot;&gt;sync_set&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#sync_get&quot;&gt;sync_get&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#sync_get_next&quot;&gt;sync_get_next&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmpm#sync_get_bulk&quot;&gt;sync_get_bulk&lt;/a&gt;&lt;/code&gt;) and asynchronous (see &lt;code&gt;&lt;a href=&quot;snmpm#async_set&quot;&gt;async_set&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#async_get&quot;&gt;async_get&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#async_get_next&quot;&gt;async_get_next&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmpm#async_get_bulk&quot;&gt;async_get_bulk&lt;/a&gt;&lt;/code&gt;). With synchronous the snmp reply is returned by the function. With asynchronous, the reply will instead be delivered through a call to one of the &lt;code&gt;handle_pdu&lt;/code&gt; callback function defined by the &lt;code&gt;&lt;a href=&quot;snmpm_user#handle_pdu&quot;&gt;handle_pdu&lt;/a&gt;&lt;/code&gt; behaviour.</source>
          <target state="translated">リクエストは2つの方法で発行できます。同期（ &lt;code&gt;&lt;a href=&quot;snmpm#sync_set&quot;&gt;sync_set&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;snmpm#sync_get&quot;&gt;sync_get&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;snmpm#sync_get_next&quot;&gt;sync_get_next&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;snmpm#sync_get_bulk&quot;&gt;sync_get_bulk&lt;/a&gt;&lt;/code&gt; を参照）および非同期（ &lt;code&gt;&lt;a href=&quot;snmpm#async_set&quot;&gt;async_set&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;snmpm#async_get&quot;&gt;async_get&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;snmpm#async_get_next&quot;&gt;async_get_next&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;snmpm#async_get_bulk&quot;&gt;async_get_bulk&lt;/a&gt;&lt;/code&gt; を参照）同期では、snmp応答は関数によって返されます。非同期で、返事の代わりに1への呼び出しを介して配信されます &lt;code&gt;handle_pdu&lt;/code&gt; ので定義されたコールバック関数 &lt;code&gt;&lt;a href=&quot;snmpm_user#handle_pdu&quot;&gt;handle_pdu&lt;/a&gt;&lt;/code&gt; の行動。</target>
        </trans-unit>
        <trans-unit id="2414a5adfd102a338c55197c870a5e8ed30f956e" translate="yes" xml:space="preserve">
          <source>Requests graceful termination of the session associated with the client.</source>
          <target state="translated">クライアントに関連付けられたセッションの猶予的な終了を要求します。</target>
        </trans-unit>
        <trans-unit id="d655475b16d4a6739afa13e1af4b35470f41df5a" translate="yes" xml:space="preserve">
          <source>Requests information about the &lt;code&gt;Result&lt;/code&gt; of the cancellation. &lt;code&gt;Info&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;, which means the &lt;code&gt;Result&lt;/code&gt; is given. When &lt;code&gt;Info&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, no information about the result of the cancellation is given.</source>
          <target state="translated">キャンセルの &lt;code&gt;Result&lt;/code&gt; に関する情報を要求します。 &lt;code&gt;Info&lt;/code&gt; のデフォルトは &lt;code&gt;true&lt;/code&gt; です。これは、 &lt;code&gt;Result&lt;/code&gt; が提供されることを意味します。 &lt;code&gt;Info&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されている場合、キャンセルの結果に関する情報は提供されません。</target>
        </trans-unit>
        <trans-unit id="6ff6c0ce1dee907fd5d7c3ad8ae69cf89227f676" translate="yes" xml:space="preserve">
          <source>Requests server to perform &lt;code&gt;Command&lt;/code&gt;. A previously opened session channel is used for the request. &lt;code&gt;Data&lt;/code&gt; is received from the server as a result of the command.</source>
          <target state="translated">&lt;code&gt;Command&lt;/code&gt; を実行するようサーバーに要求します。以前に開いたセッションチャネルが要求に使用されます。コマンドの結果として、サーバーから &lt;code&gt;Data&lt;/code&gt; が受信されます。</target>
        </trans-unit>
        <trans-unit id="6f2f2abc3ea9b54a33e41c7792741fcd63ec00c4" translate="yes" xml:space="preserve">
          <source>Requests server to perform &lt;code&gt;Command&lt;/code&gt;. A session channel is opened automatically for the request. &lt;code&gt;Data&lt;/code&gt; is received from the server as a result of the command.</source>
          <target state="translated">&lt;code&gt;Command&lt;/code&gt; を実行するようサーバーに要求します。セッションチャネルは、要求に対して自動的に開かれます。コマンドの結果として、サーバーから &lt;code&gt;Data&lt;/code&gt; が受信されます。</target>
        </trans-unit>
        <trans-unit id="fb7ab29539f909d1d965db364abb306b9d8c23af" translate="yes" xml:space="preserve">
          <source>Requests that the user default shell (typically defined in &lt;code&gt;/etc/passwd&lt;/code&gt; in Unix systems) is executed at the server end.</source>
          <target state="translated">ユーザーのデフォルトのシェル（通常、UNIXシステムでは &lt;code&gt;/etc/passwd&lt;/code&gt; で定義されています）がサーバー側で実行されるように要求します。</target>
        </trans-unit>
        <trans-unit id="e5d06105dd7bae848be23c489d1e425eef14e5ec" translate="yes" xml:space="preserve">
          <source>Requests the distribution port for the given node of an EPMD instance. Together with the port it returns a distribution protocol version which has been 5 since Erlang/OTP R6.</source>
          <target state="translated">EPMDインスタンスの指定されたノードのディストリビューションポートを要求します。ポートと一緒に、Erlang/OTP R6以降のディストリビューションプロトコルのバージョンを返します。</target>
        </trans-unit>
        <trans-unit id="c627743aae6292d1edfab3fd611cfbaa35f44835" translate="yes" xml:space="preserve">
          <source>Require one node with a Telnet connection and an FTP connection. Name the node &lt;code&gt;a&lt;/code&gt;:</source>
          <target state="translated">Telnet接続とFTP接続を備えた1つのノードが必要です。ノードに &lt;code&gt;a&lt;/code&gt; と名前を付けます。</target>
        </trans-unit>
        <trans-unit id="932dc49cb33ce805a923ee58428b5676a3722687" translate="yes" xml:space="preserve">
          <source>Require these &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;distribution flags&lt;/a&gt;&lt;/code&gt; to be used. The connection will be aborted during the handshake if the other end does not use them.</source>
          <target state="translated">これらの &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;distribution flags&lt;/a&gt;&lt;/code&gt; を使用する必要があります。接続は、相手側が使用していない場合、ハンドシェイク中に中止されます。</target>
        </trans-unit>
        <trans-unit id="56063266c28627d12fee18669ead149368f5bd42" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;&lt;a href=&quot;#install-1&quot;&gt;ct:install/1&lt;/a&gt;&lt;/code&gt; has been run first.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#install-1&quot;&gt;ct:install/1&lt;/a&gt;&lt;/code&gt; が最初に実行されている必要があります。</target>
        </trans-unit>
        <trans-unit id="c2e070334a18ace55475d2c7ef7214f9f493188c" translate="yes" xml:space="preserve">
          <source>Requires that the connection is activated. See megaco:conn_info/2 about which items and values that are valid.</source>
          <target state="translated">接続が有効になっている必要があります。有効な項目と値については megaco:conn_info/2 を参照してください。</target>
        </trans-unit>
        <trans-unit id="f30287faf99098f6763e46a8603c005c19362cee" translate="yes" xml:space="preserve">
          <source>Requires that the connection is active.</source>
          <target state="translated">接続がアクティブであることが必要です。</target>
        </trans-unit>
        <trans-unit id="c17e71f20f663cc9f1189e3ef11360a81ecbc8ce" translate="yes" xml:space="preserve">
          <source>Requires that the user does not have any active connection.</source>
          <target state="translated">ユーザーがアクティブな接続を持っていないことが必要です。</target>
        </trans-unit>
        <trans-unit id="e3da804007a27f313a5e70a7489a52d0032c97df" translate="yes" xml:space="preserve">
          <source>Requires that the user is started. See megaco:user_info/2 about which items and values that are valid.</source>
          <target state="translated">ユーザーが起動されていることが必要です。どの項目と値が有効かについては、megaco:user_info/2を参照してください。</target>
        </trans-unit>
        <trans-unit id="481a1c0d4b2c5ff0b5f30e85bd6e692df575764b" translate="yes" xml:space="preserve">
          <source>Requires the megaco application to be started. A user is either a Media Gateway (MG) or a Media Gateway Controller (MGC). One Erlang node may host many users.</source>
          <target state="translated">megacoアプリケーションを起動する必要があります。ユーザはメディアゲートウェイ(MG)かメディアゲートウェイコントローラ(MGC)です。1つのErlangノードは多くのユーザをホストすることができます。</target>
        </trans-unit>
        <trans-unit id="2fd1dec24c9ebfc2c604cc35df6701d77561b1e0" translate="yes" xml:space="preserve">
          <source>Res | {badrpc, Reason}</source>
          <target state="translated">Res|{badrpc,Reason}の場合</target>
        </trans-unit>
        <trans-unit id="f4d9a08bacabf1ee192cf2da13ea58302dc18f45" translate="yes" xml:space="preserve">
          <source>Rescans the report directory. &lt;code&gt;Options&lt;/code&gt; is the same as for function &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">レポートディレクトリを再スキャンします。 &lt;code&gt;Options&lt;/code&gt; は、関数 &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="01982cececb98074d29349a0c9e9557b0c782077" translate="yes" xml:space="preserve">
          <source>Reserved for future use. Do &lt;strong&gt;not&lt;/strong&gt; use this flag.</source>
          <target state="translated">将来の使用のために予約されています。このフラグ&lt;strong&gt;は&lt;/strong&gt;使用し&lt;strong&gt;ないで&lt;/strong&gt;ください。</target>
        </trans-unit>
        <trans-unit id="094891da7eec692d61182c9206f122cd46f36e84" translate="yes" xml:space="preserve">
          <source>Reset all TCP related (SNMP) statistics counters.</source>
          <target state="translated">すべてのTCP関連(SNMP)統計カウンタをリセットします。</target>
        </trans-unit>
        <trans-unit id="68db580cd0bf93363aa59a948b05562996e8a597" translate="yes" xml:space="preserve">
          <source>Reset all related (SNMP) statistics counters.</source>
          <target state="translated">すべての関連する(SNMP)統計カウンタをリセットします。</target>
        </trans-unit>
        <trans-unit id="ea2af705ba687b7e03e81fd53a43ecd4950468a4" translate="yes" xml:space="preserve">
          <source>Reset microstate accounting counters. Returns whether is was enabled or disabled.</source>
          <target state="translated">マイクロステート会計カウンタをリセットします。有効か無効かを返します。</target>
        </trans-unit>
        <trans-unit id="1629825928942be4143ae7ec741fae164c32209f" translate="yes" xml:space="preserve">
          <source>Resets (clears) the cookie database for the specified &lt;code&gt;Profile&lt;/code&gt;. If no profile is specified the default profile is used.</source>
          <target state="translated">指定された &lt;code&gt;Profile&lt;/code&gt; Cookieデータベースをリセット（クリア）します。プロファイルが指定されていない場合、デフォルトのプロファイルが使用されます。</target>
        </trans-unit>
        <trans-unit id="42f663110bd6b64d84eaef947ff89445b867c379" translate="yes" xml:space="preserve">
          <source>Resets all &lt;code&gt;snmp&lt;/code&gt; counters to 0.</source>
          <target state="translated">すべての &lt;code&gt;snmp&lt;/code&gt; カウンタを0にリセットします。</target>
        </trans-unit>
        <trans-unit id="d94724b4ac055ae7ff4431386f7dd90b475d3b80" translate="yes" xml:space="preserve">
          <source>Resets all counters and then starts microstate accounting for the given milliseconds.</source>
          <target state="translated">すべてのカウンタをリセットしてから、指定されたミリ秒のマイクロステート会計を開始します。</target>
        </trans-unit>
        <trans-unit id="c35fd9595bfbabab4d1c990efe590d85aad9a81e" translate="yes" xml:space="preserve">
          <source>Resets all coverage data for a Cover compiled module &lt;code&gt;Module&lt;/code&gt; in the Cover database on all nodes. If the argument is omitted, the coverage data will be reset for all modules known by Cover.</source>
          <target state="translated">すべてのノードのCoverデータベースにあるCoverコンパイル済みモジュール &lt;code&gt;Module&lt;/code&gt; のすべてのカバレッジデータをリセットします。引数を省略すると、Coverが認識しているすべてのモジュールのカバレッジデータがリセットされます。</target>
        </trans-unit>
        <trans-unit id="f827ea2106527d66b22496ff17d161262d1e35ba" translate="yes" xml:space="preserve">
          <source>Resets entry &lt;code&gt;I&lt;/code&gt; to the default value for the array. If the value of entry &lt;code&gt;I&lt;/code&gt; is the default value, the array is returned unchanged. Reset never changes the array size. Shrinking can be done explicitly by calling &lt;code&gt;&lt;a href=&quot;#resize-2&quot;&gt;resize/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">エントリ &lt;code&gt;I&lt;/code&gt; をアレイのデフォルト値にリセットします。エントリ &lt;code&gt;I&lt;/code&gt; の値がデフォルト値の場合、配列は変更されずに返されます。リセットしても配列サイズは変更されません。縮小は、 &lt;code&gt;&lt;a href=&quot;#resize-2&quot;&gt;resize/2&lt;/a&gt;&lt;/code&gt; を呼び出すことによって明示的に行うことができます。</target>
        </trans-unit>
        <trans-unit id="de1d66243efd40011f5354f807bf4316d6d884bd" translate="yes" xml:space="preserve">
          <source>Resizes a driver binary, while keeping the data.</source>
          <target state="translated">データを保持したまま、ドライバのバイナリをリサイズします。</target>
        </trans-unit>
        <trans-unit id="afe06ccb43798e203443a661c67985d4683b2235" translate="yes" xml:space="preserve">
          <source>Resizes a memory block, either in place, or by allocating a new block, copying the data, and freeing the old block. A pointer is returned to the reallocated memory. On failure (out of memory), &lt;code&gt;NULL&lt;/code&gt; is returned. (This is most often a wrapper for &lt;code&gt;realloc&lt;/code&gt;.)</source>
          <target state="translated">所定の位置にあるか、新しいブロックを割り当て、データをコピーして古いブロックを解放することにより、メモリブロックのサイズを変更します。ポインタが再割り当てされたメモリに返されます。失敗すると（メモリ不足）、 &lt;code&gt;NULL&lt;/code&gt; が返されます。（これはほとんどの場合、 &lt;code&gt;realloc&lt;/code&gt; のラッパーです。）</target>
        </trans-unit>
        <trans-unit id="09d1f73c9252da1107937d4d534d408ca7760aa6" translate="yes" xml:space="preserve">
          <source>Resolves a DNS record of the specified type and class for the specified name.</source>
          <target state="translated">指定された名前の指定されたタイプとクラスのDNSレコードを解決します。</target>
        </trans-unit>
        <trans-unit id="eba5a7224f57500ffaa0dd3342225d7f10381f82" translate="yes" xml:space="preserve">
          <source>Resolves a DNS record of the specified type and class for the specified name. The returned &lt;code&gt;dns_msg()&lt;/code&gt; can be examined using access functions in &lt;code&gt;inet_db&lt;/code&gt;, as described in section in &lt;code&gt;&lt;a href=&quot;#dns_types&quot;&gt;DNS Types&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定された名前の指定されたタイプとクラスのDNSレコードを解決します。返された &lt;code&gt;dns_msg()&lt;/code&gt; は、「 &lt;code&gt;&lt;a href=&quot;#dns_types&quot;&gt;DNS Types&lt;/a&gt;&lt;/code&gt; セクションで説明されているように、 &lt;code&gt;inet_db&lt;/code&gt; のアクセス関数を使用して調べることができます。</target>
        </trans-unit>
        <trans-unit id="4e276400129592150e484867e483da18ebb865dd" translate="yes" xml:space="preserve">
          <source>Resolves a DNS record of the specified type for the specified host, of class &lt;code&gt;in&lt;/code&gt;. Returns, on success, a &lt;code&gt;hostent()&lt;/code&gt; record with &lt;code&gt;dns_data()&lt;/code&gt; elements in the address list field.</source>
          <target state="translated">解決し、指定したホストの指定されたタイプの、クラスのDNSレコード &lt;code&gt;in&lt;/code&gt; 。成功すると、アドレスリストフィールドに &lt;code&gt;dns_data()&lt;/code&gt; 要素を持つ &lt;code&gt;hostent()&lt;/code&gt; レコードを返します。</target>
        </trans-unit>
        <trans-unit id="e255f15dc3b35ddba127b05f853b1bc2a4f1b219" translate="yes" xml:space="preserve">
          <source>Resolves the DNS data for the record of the specified type and class for the specified name. On success, filters out the answer records with the correct &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, and returns a list of their data fields. So, a lookup for type &lt;code&gt;any&lt;/code&gt; gives an empty answer, as the answer records have specific types that are not &lt;code&gt;any&lt;/code&gt;. An empty answer or a failed lookup returns an empty list.</source>
          <target state="translated">指定した名前の指定したタイプとクラスのレコードのDNSデータを解決します。成功した場合、正しい &lt;code&gt;Class&lt;/code&gt; および &lt;code&gt;Type&lt;/code&gt; でアンサーレコードを除外し、それらのデータフィールドのリストを返します。したがって、アンサーレコードには &lt;code&gt;any&lt;/code&gt; ではない特定のタイプがあるため、タイプ &lt;code&gt;any&lt;/code&gt; の検索では空の回答が得られます。空の回答または失敗したルックアップは空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="1e7209e804399190d5b8e9245f8d82fb88f8ff0c" translate="yes" xml:space="preserve">
          <source>Resource types support upgrade in runtime by allowing a loaded NIF library to take over an already existing resource type and by that &quot;inherit&quot; all existing objects of that type. The destructor of the new library is thereafter called for the inherited objects and the library with the old destructor function can be safely unloaded. Existing resource objects, of a module that is upgraded, must either be deleted or taken over by the new NIF library. The unloading of a library is postponed as long as there exist resource objects with a destructor function in the library.</source>
          <target state="translated">リソースタイプは、ロードされたNIFライブラリが既に存在するリソースタイプを引き継ぎ、そのタイプの既存のすべてのオブジェクトを「継承」することで、実行時のアップグレードをサポートします。その後、新しいライブラリのデストラクタが継承されたオブジェクトに対して呼び出され、古いデストラクタ関数を持つライブラリを安全にアンロードすることができます。アップグレードされたモジュールの既存のリソース・オブジェクトは、削除するか、新しい NIF ライブラリに引き継がれなければなりません。ライブラリ内にデストラクタ関数を持つリソースオブジェクトが存在する限り、ライブラリのアンロードは延期されます。</target>
        </trans-unit>
        <trans-unit id="0ef0d0d978a116bde33e50341c9e6394cb2893fc" translate="yes" xml:space="preserve">
          <source>Restart call counters for the matching functions in matching modules that are call count traced. The &lt;code&gt;FS&lt;/code&gt; argument can be used to specify the first argument to &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt;. See erlang(3).</source>
          <target state="translated">コールカウントがトレースされる、一致するモジュールの一致する関数のコールカウンターを再起動します。 &lt;code&gt;FS&lt;/code&gt; の引数は、最初の引数を指定するために使用することができ &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt; 。erlang（3）を参照してください。</target>
        </trans-unit>
        <trans-unit id="61c90f456eca86b51d3200d77a1d7f2617f0ddb0" translate="yes" xml:space="preserve">
          <source>Restart the set worker process of a multi-threaded agent.</source>
          <target state="translated">マルチスレッドエージェントのセットワーカープロセスを再起動します。</target>
        </trans-unit>
        <trans-unit id="7e74f2cc20537e216a01ecee1923f294af034529" translate="yes" xml:space="preserve">
          <source>Restart the worker process of a multi-threaded agent.</source>
          <target state="translated">マルチスレッドエージェントのワーカープロセスを再起動します。</target>
        </trans-unit>
        <trans-unit id="dc214e0416b7a580a7af166989fb4bbe4276bbd4" translate="yes" xml:space="preserve">
          <source>Restarting an application is useful when a change is too complicated to be made without restarting the processes, for example, if the supervisor hierarchy has been restructured.</source>
          <target state="translated">アプリケーションの再起動は、例えばスーパーバイザ階層が再構築されている場合など、プロセスを再起動しないと変更が複雑すぎてできない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="78facde3d4d8b32988e630ea196e0d52f90f256d" translate="yes" xml:space="preserve">
          <source>Restarting an application means that the application is stopped and then started again similar to using the instructions &lt;code&gt;remove_application&lt;/code&gt; and &lt;code&gt;add_application&lt;/code&gt; in sequence.</source>
          <target state="translated">アプリケーションの再起動とは、 &lt;code&gt;remove_application&lt;/code&gt; と &lt;code&gt;add_application&lt;/code&gt; を順番に使用するのと同じように、アプリケーションを停止してから再起動することです。</target>
        </trans-unit>
        <trans-unit id="98a98cfd0a822c62415063db7432a74158f00a07" translate="yes" xml:space="preserve">
          <source>Restarting an application means that the application is stopped and then started again, similar to using the instructions &lt;code&gt;remove_application&lt;/code&gt; and &lt;code&gt;add_application&lt;/code&gt; in sequence. Note that, even if the application has been started before the release upgrade is performed, &lt;code&gt;restart_application&lt;/code&gt; may only &lt;code&gt;load&lt;/code&gt; it rather than &lt;code&gt;start&lt;/code&gt; it, depending on the application's &lt;code&gt;start type&lt;/code&gt;: If &lt;code&gt;Type = load&lt;/code&gt;, the application is only loaded. If &lt;code&gt;Type = none&lt;/code&gt;, the application is not loaded and not started, although the code for its modules is loaded.</source>
          <target state="translated">アプリケーションの再起動とは、 &lt;code&gt;remove_application&lt;/code&gt; と &lt;code&gt;add_application&lt;/code&gt; を順番に使用するのと同様に、アプリケーションを停止してから再起動することを意味します。注アプリケーションがリリースのアップグレードを実行する前に、開始された場合でも、その &lt;code&gt;restart_application&lt;/code&gt; が唯一かもしれ &lt;code&gt;load&lt;/code&gt; 、それをではなく、 &lt;code&gt;start&lt;/code&gt; アプリケーションのに応じて、それを &lt;code&gt;start type&lt;/code&gt; ：もし &lt;code&gt;Type = load&lt;/code&gt; 、アプリケーションがのみロードされます。 &lt;code&gt;Type = none&lt;/code&gt; 場合、モジュールのコードは読み込まれますが、アプリケーションは読み込まれず、起動されません。</target>
        </trans-unit>
        <trans-unit id="2de62cc3a4bd25c5d36ad0d8cc488270e5a0abd1" translate="yes" xml:space="preserve">
          <source>Restarts the call counters from zero for specified functions. Can be used to collect a new set of counters without having to stop and start call count profiling.</source>
          <target state="translated">指定された関数の呼び出しカウンタをゼロから再開します。呼び出しカウンタのプロファイリングを停止したり開始したりすることなく、新しいカウンタのセットを収集するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="9b939c958cae308cd1ce8394371dead14ecaa1d6" translate="yes" xml:space="preserve">
          <source>Restore previous configuration by maintaining a history buffer and handling configuration files.</source>
          <target state="translated">履歴バッファを保持し、設定ファイルを扱うことで、以前の設定を復元します。</target>
        </trans-unit>
        <trans-unit id="3733a2a68fd7503fd11786ec56d8016b0a108fe2" translate="yes" xml:space="preserve">
          <source>Restores an opaque continuation returned by &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; if the continuation has passed through external term format (been sent between nodes or stored on disk).</source>
          <target state="translated">継続が外部用語形式（ノード間で送信されるか、ディスクに格納される）を通過した場合、 &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; によって返された不透明な継続を復元します。</target>
        </trans-unit>
        <trans-unit id="4f3f20018aa0040e4c23d84e3c7950b3527b5bdd" translate="yes" xml:space="preserve">
          <source>Restores previously saved data to the server.</source>
          <target state="translated">以前に保存したデータをサーバーに復元します。</target>
        </trans-unit>
        <trans-unit id="9fd2af0db43c49aa55ce334c12e957767a3ccb8b" translate="yes" xml:space="preserve">
          <source>Restores the previous state of user tags and their spreading as it was before a call to &lt;code&gt;&lt;a href=&quot;#spread_tag-1&quot;&gt;spread_tag/1&lt;/a&gt;&lt;/code&gt;. Note that the restoring is not limited to the same process, one can utilize this to turn off spreding in one process and restore it in a newly created, the one that actually is going to send messages:</source>
          <target state="translated">ユーザータグの以前の状態とその拡散を、 &lt;code&gt;&lt;a href=&quot;#spread_tag-1&quot;&gt;spread_tag/1&lt;/a&gt;&lt;/code&gt; を呼び出す前の状態に戻します。復元は同じプロセスに限定されないことに注意してください。これを利用して、1つのプロセスでスプレッドをオフにし、新しく作成された、実際にメッセージを送信するプロセスで復元できます。</target>
        </trans-unit>
        <trans-unit id="5fac283093b6a2a509402c8c0582786b4a2bfd78" translate="yes" xml:space="preserve">
          <source>RestrOp ::= &lt;code&gt;|&lt;/code&gt;</source>
          <target state="translated">RestrOp :: = &lt;code&gt;|&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7dd86ea16702f2798d2509aeac3e281b6a70f1b" translate="yes" xml:space="preserve">
          <source>RestrOp ::= &lt;code&gt;||&lt;/code&gt;</source>
          <target state="translated">RestrOp :: = &lt;code&gt;||&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc7c10d01aae72be16a86c0f638ea9cf021214b5" translate="yes" xml:space="preserve">
          <source>RestrOp ::= &lt;code&gt;|||&lt;/code&gt;</source>
          <target state="translated">RestrOp :: = &lt;code&gt;|||&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bfa4191a9eae6ca9165e4fa4ff48bbaff74e299e" translate="yes" xml:space="preserve">
          <source>Restricts the socket to use only IPv6, prohibiting any IPv4 connections. This is only applicable for IPv6 sockets (option &lt;code&gt;inet6&lt;/code&gt;).</source>
          <target state="translated">ソケットがIPv6のみを使用するように制限し、IPv4接続を禁止します。これは、IPv6ソケット（オプション &lt;code&gt;inet6&lt;/code&gt; ）にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="fad7e8f89b3044f680980534cc7f38eb45d77455" translate="yes" xml:space="preserve">
          <source>Result = 0 -&amp;gt; ok, result &amp;gt; 0 -&amp;gt; error.</source>
          <target state="translated">結果= 0-&amp;gt;わかりました、結果&amp;gt; 0-&amp;gt;エラー。</target>
        </trans-unit>
        <trans-unit id="72c3908300e570c710533b083bcfd239361ca5b4" translate="yes" xml:space="preserve">
          <source>Result code 4003 is sent in CEA if there is an existing connection to the peer in question and configuration does not allow more than one.</source>
          <target state="translated">結果コード4003は、問題のピアへの既存の接続があり、構成が複数のピアを許可していない場合にCEAで送信されます。</target>
        </trans-unit>
        <trans-unit id="b1380f2ff1e7ff28281bc2b3937da790713a4a29" translate="yes" xml:space="preserve">
          <source>Result codes 3001, 3002, 3005, and 3007 can be sent in answers formulated by diameter, if configured to do so.</source>
          <target state="translated">結果コード3001、3002、3005、および3007は、そうするように構成されていれば、直径によって定式化された回答で送信することができる。</target>
        </trans-unit>
        <trans-unit id="2bdb45e9d6b5679ea0ed96f1d5bfeae12bb8e898" translate="yes" xml:space="preserve">
          <source>Result-Code AVP</source>
          <target state="translated">結果コード AVP</target>
        </trans-unit>
        <trans-unit id="da7c61f4348e14cf89c824561d092db5c3023fcb" translate="yes" xml:space="preserve">
          <source>Result-Code AVP Values</source>
          <target state="translated">結果コード AVP 値</target>
        </trans-unit>
        <trans-unit id="0a0db2d8653e2bdb24b4ddd06733b9ef033724a6" translate="yes" xml:space="preserve">
          <source>Results are written to file (excel compatible text files) and on stdout.</source>
          <target state="translated">結果はファイル(エクセル互換のテキストファイル)と標準出力に書き出されます。</target>
        </trans-unit>
        <trans-unit id="6c1e28cf400ace7a0cf6a58fff614aab265e55e1" translate="yes" xml:space="preserve">
          <source>Results in a OS call to:</source>
          <target state="translated">結果はOSへの呼び出しになります。</target>
        </trans-unit>
        <trans-unit id="92266fcdf49cd88ae3cb55b7500e16b861e0f8f8" translate="yes" xml:space="preserve">
          <source>Resume the processes.</source>
          <target state="translated">プロセスを再開します。</target>
        </trans-unit>
        <trans-unit id="e18f16b3b88e1efaab280687e97a380ca884e44f" translate="yes" xml:space="preserve">
          <source>Resumes a suspended process.</source>
          <target state="translated">中断されていた処理を再開します。</target>
        </trans-unit>
        <trans-unit id="f14bdb1234c7ed01c49eaf26a7e322a0b85afcbe" translate="yes" xml:space="preserve">
          <source>Resumes all suspended processes using a module &lt;code&gt;Mod&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;Mod&lt;/code&gt; を使用して、中断されたすべてのプロセスを再開します。</target>
        </trans-unit>
        <trans-unit id="17c7293f799309379456316dabcac2397077e454" translate="yes" xml:space="preserve">
          <source>Resumes process execution for &lt;code&gt;Pid&lt;/code&gt; or &lt;code&gt;c:pid(X,Y,Z)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; または &lt;code&gt;c:pid(X,Y,Z)&lt;/code&gt; プロセス実行を再開します。</target>
        </trans-unit>
        <trans-unit id="baa6efb2f790bdb132e3741e6aa4b131129c8c15" translate="yes" xml:space="preserve">
          <source>Retains the statistics of destroyed locks.</source>
          <target state="translated">破壊されたロックの統計情報を保持します。</target>
        </trans-unit>
        <trans-unit id="5cc03bdcfe4904c6966e4b5da63b22275bcbe022" translate="yes" xml:space="preserve">
          <source>Retreive all the sdp records of type &lt;code&gt;Type&lt;/code&gt; from the property group &lt;code&gt;PG&lt;/code&gt;.</source>
          <target state="translated">プロパティグループ &lt;code&gt;PG&lt;/code&gt; からタイプ &lt;code&gt;Type&lt;/code&gt; すべてのsdpレコードを取得します。</target>
        </trans-unit>
        <trans-unit id="02febca237ef746057d21ace8518a1c006a9c4b9" translate="yes" xml:space="preserve">
          <source>Retreive the (SNMP) statistic counters maintained by the megaco application. The global counters handle events that cannot be attributed to a single connection (e.g. protocol errors that occur before the connection has been properly setup).</source>
          <target state="translated">megaco アプリケーションによって維持されている (SNMP)統計カウンタを再利用します。グローバルカウンタは、単一の接続に帰することができないイベント(接続が適切に設定される前に発生したプロトコルエラーなど)を処理します。</target>
        </trans-unit>
        <trans-unit id="fa70701bc77c29039a4b681cd1ced4c75c07e003" translate="yes" xml:space="preserve">
          <source>Retreive the TCP related (SNMP) statistics counters.</source>
          <target state="translated">TCP関連(SNMP)の統計カウンタを再取得します。</target>
        </trans-unit>
        <trans-unit id="8d7ef75f058aa1cf6b07567ad7ff04b3417d35fb" translate="yes" xml:space="preserve">
          <source>Retreive the UDP related (SNMP) statistics counters.</source>
          <target state="translated">UDP関連(SNMP)の統計カウンタを再取得します。</target>
        </trans-unit>
        <trans-unit id="7151989dd8e6c94f234c2f32661137cfebef0084" translate="yes" xml:space="preserve">
          <source>Retreive the size of the mib server cache.</source>
          <target state="translated">mib サーバーキャッシュのサイズを再取得します。</target>
        </trans-unit>
        <trans-unit id="4b31fb756dce544f130f19b8dad2c90736d11a83" translate="yes" xml:space="preserve">
          <source>Retreive the type (asn1 bertype) of an oid.</source>
          <target state="translated">oidの型(asn1 bertype)を再取得します。</target>
        </trans-unit>
        <trans-unit id="a066518d0b87d9a981cc76dfb930b0b065ce9302" translate="yes" xml:space="preserve">
          <source>Retrieve Erlang System Time</source>
          <target state="translated">Erlangシステムの時刻を取得する</target>
        </trans-unit>
        <trans-unit id="9d19fa4433634e8f7f0044b8f7171e217dfed550" translate="yes" xml:space="preserve">
          <source>Retrieve agent config.</source>
          <target state="translated">エージェントの設定を取得します。</target>
        </trans-unit>
        <trans-unit id="3acc64305dc86f6d79205ab898062e15ca0a37ff" translate="yes" xml:space="preserve">
          <source>Retrieve all alias-names known to the agent.</source>
          <target state="translated">エージェントが知っているすべてのエイリアス名を取得します。</target>
        </trans-unit>
        <trans-unit id="2134b573a854d0e886332caabf7da925b7e53ab2" translate="yes" xml:space="preserve">
          <source>Retrieve all loaded mib-files.</source>
          <target state="translated">ロードされたすべての mib ファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="1147438c0e44be971748704321067492f033f625" translate="yes" xml:space="preserve">
          <source>Retrieve all notifications (and traps) known to the agent.</source>
          <target state="translated">エージェントが知っているすべての通知(およびトラップ)を取得します。</target>
        </trans-unit>
        <trans-unit id="fadeb4e61b2e973528a9b28b3ff09f86b61edc47" translate="yes" xml:space="preserve">
          <source>Retrieve all tables known to the agent.</source>
          <target state="translated">エージェントが知っているすべてのテーブルを取得します。</target>
        </trans-unit>
        <trans-unit id="fce5ac6430e5aaacbba5d6b3b19663ec99641f54" translate="yes" xml:space="preserve">
          <source>Retrieve all variables known to the agent.</source>
          <target state="translated">エージェントが知っているすべての変数を取得します。</target>
        </trans-unit>
        <trans-unit id="1bdc580cb2514729314f5603353f80c0bbf0c5c6" translate="yes" xml:space="preserve">
          <source>Retrieve data set with &lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt;set_process_metadata/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt;update_process_metadata/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt;set_process_metadata/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt;update_process_metadata/1&lt;/a&gt;&lt;/code&gt; を使用してデータセットを取得します。</target>
        </trans-unit>
        <trans-unit id="5d69480abf5e824d94bacf05e6e59333596eae5f" translate="yes" xml:space="preserve">
          <source>Retrieve implementation dependent mib-storage table information.</source>
          <target state="translated">実装依存のmib-storageテーブル情報を取得します。</target>
        </trans-unit>
        <trans-unit id="c4acb468e368837beb0ba41c4f9baf884236d501" translate="yes" xml:space="preserve">
          <source>Retrieve misc info for the mib data.</source>
          <target state="translated">mibデータのmisc情報を取得します。</target>
        </trans-unit>
        <trans-unit id="95b30a24349787eb347b2a0cdc30747002d1ce85" translate="yes" xml:space="preserve">
          <source>Retrieve the encoding-config and when initiating the &lt;code&gt;megaco_receive_handle&lt;/code&gt;, set the field &lt;code&gt;encoding_config&lt;/code&gt; accordingly.</source>
          <target state="translated">encoding-configを取得し、 &lt;code&gt;megaco_receive_handle&lt;/code&gt; を開始するときに、それに応じて &lt;code&gt;encoding_config&lt;/code&gt; フィールドを設定します。</target>
        </trans-unit>
        <trans-unit id="f599f26a74119290164e57387a0798ea103824b0" translate="yes" xml:space="preserve">
          <source>Retrieve the encoding-config using the &lt;code&gt;&lt;a href=&quot;megaco#system_info&quot;&gt;system_info&lt;/a&gt;&lt;/code&gt; function (with &lt;code&gt;Item = text_config&lt;/code&gt;).</source>
          <target state="translated">用いた符号化設定を取得 &lt;code&gt;&lt;a href=&quot;megaco#system_info&quot;&gt;system_info&lt;/a&gt;&lt;/code&gt; （持つ関数 &lt;code&gt;Item = text_config&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3e5761ee307c8026ca4f761f940f2b961da0dd03" translate="yes" xml:space="preserve">
          <source>Retrieve the list of all the mibs loaded into this agent. Default is the master agent.</source>
          <target state="translated">このエージェントにロードされたすべての mib のリストを取得します。デフォルトはマスターエージェントです。</target>
        </trans-unit>
        <trans-unit id="8fb723c2fa9c15cbf7e40bed085d2e51be38564e" translate="yes" xml:space="preserve">
          <source>Retrieve the mib file for the mib.</source>
          <target state="translated">の mib ファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="3c2eaccb5619264e34509fb47435f523adc8579d" translate="yes" xml:space="preserve">
          <source>Retrieve the mib-file to which an given &lt;code&gt;oid()&lt;/code&gt; belongs.</source>
          <target state="translated">指定された &lt;code&gt;oid()&lt;/code&gt; が属するmibファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="2ce97c7b119f622a84d3bd15681ec77eab484e0f" translate="yes" xml:space="preserve">
          <source>Retrieve usm user config.</source>
          <target state="translated">usm ユーザー設定を取得します。</target>
        </trans-unit>
        <trans-unit id="f971d95474a7aaf7ba0a3a08e8e1bb54f6e0db8d" translate="yes" xml:space="preserve">
          <source>Retrieves a list of all known global names.</source>
          <target state="translated">すべての既知のグローバル名のリストを取得します。</target>
        </trans-unit>
        <trans-unit id="77f059fe18a8998fe23607cd9d9f051918562790" translate="yes" xml:space="preserve">
          <source>Retrieves a list of all values on the current key. The values have types corresponding to the registry types, see &lt;code&gt;&lt;a href=&quot;#value-2&quot;&gt;value/2&lt;/a&gt;&lt;/code&gt;. Calls the Win32 API function &lt;code&gt;EnumRegValuesEx()&lt;/code&gt;.</source>
          <target state="translated">現在のキーのすべての値のリストを取得します。値には、レジストリタイプに対応するタイプがあります。value &lt;code&gt;&lt;a href=&quot;#value-2&quot;&gt;value/2&lt;/a&gt;&lt;/code&gt; 参照してください。Win32 API関数 &lt;code&gt;EnumRegValuesEx()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="2be5bbae4bd62f61c8d1df623c4813ba30080529" translate="yes" xml:space="preserve">
          <source>Retrieves configuration stored with &lt;code&gt;write_config(Data)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write_config(Data)&lt;/code&gt; で保存された構成を取得します。</target>
        </trans-unit>
        <trans-unit id="b59675caaf402ed44ac06666148753ec422a80b1" translate="yes" xml:space="preserve">
          <source>Retrieves information about a connection. The list &lt;code&gt;Keys&lt;/code&gt; defines which information that is returned.</source>
          <target state="translated">接続に関する情報を取得します。 &lt;code&gt;Keys&lt;/code&gt; リストは、返される情報を定義します。</target>
        </trans-unit>
        <trans-unit id="c62fd3c8db94f2ecb5d2fae829a42891b9817f97" translate="yes" xml:space="preserve">
          <source>Retrieves information about a file. Returns &lt;code&gt;{ok, FileInfo}&lt;/code&gt; if successful, otherwise &lt;code&gt;error&lt;/code&gt;. &lt;code&gt;FileInfo&lt;/code&gt; is a record &lt;code&gt;file_info&lt;/code&gt;, defined in the Kernel include file &lt;code&gt;file.hrl&lt;/code&gt;. Include the following directive in the module from which the function is called:</source>
          <target state="translated">ファイルに関する情報を取得します。成功した場合は &lt;code&gt;{ok, FileInfo}&lt;/code&gt; 返し、それ以外の場合は &lt;code&gt;error&lt;/code&gt; 返します。 &lt;code&gt;FileInfo&lt;/code&gt; は、カーネルインクルードファイル &lt;code&gt;file.hrl&lt;/code&gt; で定義されているレコード &lt;code&gt;file_info&lt;/code&gt; です。関数の呼び出し元のモジュールに次のディレクティブを含めます。</target>
        </trans-unit>
        <trans-unit id="fe76411933e9e2e81fdcf0338d7957f7bda42a01" translate="yes" xml:space="preserve">
          <source>Retrieves information about a file. Returns &lt;code&gt;{ok, FileInfo}&lt;/code&gt; if successful, otherwise &lt;code&gt;{error, Reason}&lt;/code&gt;. &lt;code&gt;FileInfo&lt;/code&gt; is a record &lt;code&gt;file_info&lt;/code&gt;, defined in the Kernel include file &lt;code&gt;file.hrl&lt;/code&gt;. Include the following directive in the module from which the function is called:</source>
          <target state="translated">ファイルに関する情報を取得します。成功した場合は &lt;code&gt;{ok, FileInfo}&lt;/code&gt; 返し、それ以外の場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。 &lt;code&gt;FileInfo&lt;/code&gt; は、カーネルインクルードファイル &lt;code&gt;file.hrl&lt;/code&gt; で定義されているレコード &lt;code&gt;file_info&lt;/code&gt; です。関数の呼び出し元のモジュールに次のディレクティブを含めます。</target>
        </trans-unit>
        <trans-unit id="d2276be2f2c3029568caafee6e887d81c617a51b" translate="yes" xml:space="preserve">
          <source>Retrieves information about the C-node. These values are initially set with &lt;code&gt;erl_connect_init()&lt;/code&gt; or &lt;code&gt;erl_connect_xinit()&lt;/code&gt;.</source>
          <target state="translated">Cノードに関する情報を取得します。これらの値は、最初に &lt;code&gt;erl_connect_init()&lt;/code&gt; または &lt;code&gt;erl_connect_xinit()&lt;/code&gt; で設定されます。</target>
        </trans-unit>
        <trans-unit id="3ec85b06183feb13e2594732aca3a501dd9750a6" translate="yes" xml:space="preserve">
          <source>Retrieves the binding of &lt;code&gt;Var&lt;/code&gt;. This function is intended to be used by the conditional function of a breakpoint.</source>
          <target state="translated">&lt;code&gt;Var&lt;/code&gt; のバインディングを取得します。この関数は、ブレークポイントの条件関数で使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="952c5ae51d3a297be343234997d87d013a82d0b3" translate="yes" xml:space="preserve">
          <source>Retrieves the driver queue as a pointer to an array of &lt;code&gt;SysIOVec&lt;/code&gt;s. It also returns the number of elements in &lt;code&gt;vlen&lt;/code&gt;. This is one of two ways to get data out of the queue.</source>
          <target state="translated">ドライバーのキューを &lt;code&gt;SysIOVec&lt;/code&gt; の配列へのポインターとして取得します。また、 &lt;code&gt;vlen&lt;/code&gt; の要素数も返します。これは、データをキューから取り出す2つの方法の1つです。</target>
        </trans-unit>
        <trans-unit id="c07292a4b963b263d1b6cc1646b4c6d5902c86d7" translate="yes" xml:space="preserve">
          <source>Retrieves the driver queue into a supplied &lt;code&gt;ErlIOVec&lt;/code&gt;&lt;code&gt;ev&lt;/code&gt;. It also returns the queue size. This is one of two ways to get data out of the queue.</source>
          <target state="translated">提供された &lt;code&gt;ErlIOVec&lt;/code&gt; &lt;code&gt;ev&lt;/code&gt; にドライバーキューを取得します。また、キューのサイズも返します。これは、データをキューから取り出す2つの方法の1つです。</target>
        </trans-unit>
        <trans-unit id="a894c3ff79393666e5c7b22a004ebacc352e97d6" translate="yes" xml:space="preserve">
          <source>Retrieves the named value (or default) on the current key. Registry values of type &lt;code&gt;REG_SZ&lt;/code&gt; are returned as strings. Type &lt;code&gt;REG_DWORD&lt;/code&gt; values are returned as integers. All other types are returned as binaries.</source>
          <target state="translated">現在のキーの名前付き値（またはデフォルト）を取得します。タイプ &lt;code&gt;REG_SZ&lt;/code&gt; のレジストリ値は文字列として返されます。タイプ &lt;code&gt;REG_DWORD&lt;/code&gt; 値は整数として返されます。他のすべてのタイプはバイナリとして返されます。</target>
        </trans-unit>
        <trans-unit id="245670a16c43ecee47979e6d1e5f4fdfc89b0df2" translate="yes" xml:space="preserve">
          <source>Retrieves the names of all files in the tar file &lt;code&gt;Name&lt;/code&gt;.</source>
          <target state="translated">tarファイル &lt;code&gt;Name&lt;/code&gt; 内のすべてのファイルの名前を取得します。</target>
        </trans-unit>
        <trans-unit id="d564b671e170b3431e838ae67d5ab7768b72f2e4" translate="yes" xml:space="preserve">
          <source>Retrieves the number of columns of the &lt;code&gt;IoDevice&lt;/code&gt; (that is, the width of a terminal). The function succeeds for terminal devices and returns &lt;code&gt;{error, enotsup}&lt;/code&gt; for all other I/O devices.</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; の列数（つまり、端末の幅）を取得します。この関数は、ターミナルデバイスに対しては成功し &lt;code&gt;{error, enotsup}&lt;/code&gt; 他のすべてのI / Oデバイスに対しては{error、enotsup}を返します。</target>
        </trans-unit>
        <trans-unit id="e778e49b2d71c140dcdf03681dbceb1ae0cc20b4" translate="yes" xml:space="preserve">
          <source>Retrieves the number of rows of &lt;code&gt;IoDevice&lt;/code&gt; (that is, the height of a terminal). The function only succeeds for terminal devices, for all other I/O devices the function returns &lt;code&gt;{error, enotsup}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; の行数（つまり、端末の高さ）を取得します。この関数は端末デバイスでのみ成功し、他のすべてのI / Oデバイスでは、関数は &lt;code&gt;{error, enotsup}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="0bb6456edb698b942587d5fb778ec0a6722ce718" translate="yes" xml:space="preserve">
          <source>Retrieves the options currently used by the client.</source>
          <target state="translated">クライアントが現在使用しているオプションを取得します。</target>
        </trans-unit>
        <trans-unit id="76466246f8a47a437b9e1621604ae79ee0d8b373" translate="yes" xml:space="preserve">
          <source>Retrieves the pid of the C-node. Every C-node has a (pseudo) pid used in &lt;code&gt;ei_send_reg&lt;/code&gt;, &lt;code&gt;ei_rpc&lt;/code&gt;, and others. This is contained in a field in the &lt;code&gt;ec&lt;/code&gt; structure. It will be safe for a long time to fetch this field directly from the &lt;code&gt;ei_cnode&lt;/code&gt; structure.</source>
          <target state="translated">CノードのPIDを取得します。すべてのCノードには、 &lt;code&gt;ei_send_reg&lt;/code&gt; 、 &lt;code&gt;ei_rpc&lt;/code&gt; などで使用される（疑似）pidがあります。これは &lt;code&gt;ec&lt;/code&gt; 構造のフィールドに含まれています。このフィールドを &lt;code&gt;ei_cnode&lt;/code&gt; 構造体から直接フェッチすることは、長い間安全です。</target>
        </trans-unit>
        <trans-unit id="aabdb36347cbaff97e37db5db212dc599e8b84b1" translate="yes" xml:space="preserve">
          <source>Retrieves the value of an environment variable.</source>
          <target state="translated">環境変数の値を取得します。</target>
        </trans-unit>
        <trans-unit id="5a702c3a25b2ca721ccd72b7aec2133da01de553" translate="yes" xml:space="preserve">
          <source>Retrieves the value stored with &lt;code&gt;Key&lt;/code&gt; in &lt;code&gt;Tree&lt;/code&gt;. Assumes that the key is present in the tree, crashes otherwise.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; とともに &lt;code&gt;Tree&lt;/code&gt; に格納されている値を取得します。キーがツリーに存在すると想定し、そうでなければクラッシュします。</target>
        </trans-unit>
        <trans-unit id="59fedfa91c0565ade05984a3af8146c0a81048c8" translate="yes" xml:space="preserve">
          <source>Retrieving data from DBMS is usually to be done with the functions &lt;code&gt;&lt;a href=&quot;mnesia#read-3&quot;&gt;mnesia:read/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mnesia#read-2&quot;&gt;mnesia:read/1&lt;/a&gt;&lt;/code&gt;. The following function raises the salary:</source>
          <target state="translated">DBMSからデータを取得するには、通常、関数 &lt;code&gt;&lt;a href=&quot;mnesia#read-3&quot;&gt;mnesia:read/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;mnesia#read-2&quot;&gt;mnesia:read/1&lt;/a&gt;&lt;/code&gt; を使用します。次の関数は給与を引き上げます。</target>
        </trans-unit>
        <trans-unit id="d886a95270a0b97b770f611dbef1f5da0d79dcec" translate="yes" xml:space="preserve">
          <source>Retrieving/generating the response.</source>
          <target state="translated">レスポンスを取得/生成します。</target>
        </trans-unit>
        <trans-unit id="cc15ba53eed9cac3cb103f31237c1c8cb9da235a" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;Token&lt;/code&gt; and is last token in a tokens call.</source>
          <target state="translated">&lt;code&gt;Token&lt;/code&gt; を返し、トークン呼び出しの最後のトークンです。</target>
        </trans-unit>
        <trans-unit id="96fed125f9b4a3ff4eafa9dc4ab9f431753358e2" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;Token&lt;/code&gt; to the caller.</source>
          <target state="translated">呼び出し元に &lt;code&gt;Token&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1a1c978f872f3e9d4cbb152e995b6529af78529a" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if the host name part of the &lt;code&gt;NodeName&lt;/code&gt; is valid for use with this protocol; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NodeName&lt;/code&gt; のホスト名部分がこのプロトコルでの使用に有効な場合は &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c835ade1ee058ea2528895c15193d9d02d86145e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if the module has native compiled code. Return &lt;code&gt;false&lt;/code&gt; otherwise. In a system compiled without HiPE support, the result is always &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">モジュールにネイティブコンパイル済みコードが &lt;code&gt;true&lt;/code&gt; 場合はtrueを返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。HiPEサポートなしでコンパイルされたシステムでは、結果は常に &lt;code&gt;false&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="13532ab427d3f5c254e071d7934ca748721f8b88" translate="yes" xml:space="preserve">
          <source>Return a &lt;code&gt;{{Counter, Ref}, non_neg_integer()}&lt;/code&gt; list of counter values. &lt;code&gt;Ref&lt;/code&gt; can be either a &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; or a &lt;code&gt;&lt;code&gt;diameter_app:peer_ref()&lt;/code&gt;&lt;/code&gt;. Entries for the latter are folded into corresponding entries for the former as peer connections go down. Entries for both are removed at &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt;. The Diameter-level statistics returned by &lt;code&gt;transport&lt;/code&gt; and &lt;code&gt;connections&lt;/code&gt; info are based upon these entries.</source>
          <target state="translated">戻り &lt;code&gt;{{Counter, Ref}, non_neg_integer()}&lt;/code&gt; カウンタ値のリスト。 &lt;code&gt;Ref&lt;/code&gt; は &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; または &lt;code&gt;&lt;code&gt;diameter_app:peer_ref()&lt;/code&gt;&lt;/code&gt; のいずれかです。ピア接続がダウンすると、後者のエントリは前者の対応するエントリに折りたたまれます。両方のエントリは &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt; で削除されます。 &lt;code&gt;transport&lt;/code&gt; および &lt;code&gt;connections&lt;/code&gt; 情報によって返されるDiameterレベルの統計は、これらのエントリに基づいています。</target>
        </trans-unit>
        <trans-unit id="1bb16078b0f2378184a73700819de4ceef71e2e5" translate="yes" xml:space="preserve">
          <source>Return a capability value as configured with &lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt; で構成された機能値を返します。</target>
        </trans-unit>
        <trans-unit id="9536f6bbba6fdc1b7d0b454be9dde8f6750a2209" translate="yes" xml:space="preserve">
          <source>Return a list containing one entry for each of the service's transport as configured with &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt;. Each entry is a tagged list containing both configuration and information about established peer connections. An example return value with for a client service with Origin-Host &quot;client.example.com&quot; configured with a single transport connected to &quot;server.example.com&quot; might look as follows.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; で設定されたサービスのトランスポートごとに1つのエントリを含むリストを返します。各エントリは、構成と確立されたピア接続に関する情報の両方を含むタグ付きリストです。 &quot;server.example.com&quot;に接続された単一のトランスポートで構成されたOrigin-Host &quot;client.example.com&quot;を持つクライアントサービスの戻り値の例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="e3714b9f4dba0aac8c1334a0e9085f3405a08f7a" translate="yes" xml:space="preserve">
          <source>Return a list containing one entry for every established transport connection whose watchdog state machine is not in the &lt;code&gt;down&lt;/code&gt; state. This is a flat view of &lt;code&gt;transport&lt;/code&gt; info which lists only active connections and for which Diameter-level statistics are accumulated only for the lifetime of the transport connection. A return value for the server above might look as follows.</source>
          <target state="translated">ウォッチドッグステートマシンが &lt;code&gt;down&lt;/code&gt; 状態ではない確立されたトランスポート接続ごとに1つのエントリを含むリストを返します。これは、アクティブな接続のみをリストし、Diameterレベルの統計がトランスポート接続の存続期間中にのみ蓄積される &lt;code&gt;transport&lt;/code&gt; 情報のフラットビューです。上記のサーバーの戻り値は次のようになります。</target>
        </trans-unit>
        <trans-unit id="db261cceb040f1c9828fe3d4c6c1a35462982fe0" translate="yes" xml:space="preserve">
          <source>Return a reasonable value for use as Origin-State-Id in outgoing messages.</source>
          <target state="translated">送信メッセージでOrigin-State-Idとして使用するための妥当な値を返します。</target>
        </trans-unit>
        <trans-unit id="2b57b27e4df9b1ae0072d43165d38c155eb66de4" translate="yes" xml:space="preserve">
          <source>Return a scheduler utilization sample for all schedulers, including dirty-io schedulers.</source>
          <target state="translated">ダーティなioスケジューラを含むすべてのスケジューラのスケジューラ利用率サンプルを返します。</target>
        </trans-unit>
        <trans-unit id="e48ca14d3d26b2f077fe65868bb3fe756cfe0117" translate="yes" xml:space="preserve">
          <source>Return a scheduler utilization sample for normal and dirty-cpu schedulers.</source>
          <target state="translated">通常のスケジューラとダーティなCPUスケジューラのスケジューラ利用率のサンプルを返します。</target>
        </trans-unit>
        <trans-unit id="189e6f742d0287bea7092b8b595dda21405a8676" translate="yes" xml:space="preserve">
          <source>Return a specification of the target system. The actual target system can be created with &lt;code&gt;reltool:eval_target_spec/3&lt;/code&gt;.</source>
          <target state="translated">ターゲットシステムの仕様を返します。実際のターゲットシステムは &lt;code&gt;reltool:eval_target_spec/3&lt;/code&gt; で作成できます。</target>
        </trans-unit>
        <trans-unit id="2aa7025ff201afee814f6c2a93ae1bcb0ae4ca05" translate="yes" xml:space="preserve">
          <source>Return a table handle.</source>
          <target state="translated">テーブルハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="5f2413dd20c0e576107037d6e42aeba92e71c7df" translate="yes" xml:space="preserve">
          <source>Return a tagged list of all capabilities values as configured with &lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt; で構成されたすべての機能値のタグ付きリストを返します。</target>
        </trans-unit>
        <trans-unit id="a8294e0b56eeb80e5eba4768dcc17c3d64870430" translate="yes" xml:space="preserve">
          <source>Return a the identity of the globally registered collector if there is any.</source>
          <target state="translated">グローバルに登録されたコレクタがあれば、その ID を返します。</target>
        </trans-unit>
        <trans-unit id="9f6b885db67cca106a9b569ccd725228af91846d" translate="yes" xml:space="preserve">
          <source>Return a value for a Session-Id AVP.</source>
          <target state="translated">セッション ID AVP の値を返します。</target>
        </trans-unit>
        <trans-unit id="ba6a05dfc89724422c5b71e06eeac07f56af24ec" translate="yes" xml:space="preserve">
          <source>Return all records in the mib-storage table in the form of a list.</source>
          <target state="translated">mib-storage テーブル内のすべてのレコードをリスト形式で返します。</target>
        </trans-unit>
        <trans-unit id="c8a7afda668c35cdafcb1e64da708b8cf8d41b06" translate="yes" xml:space="preserve">
          <source>Return an ordered list of the metavariables in the template.</source>
          <target state="translated">テンプレート内のメタ変数の順序付きリストを返します。</target>
        </trans-unit>
        <trans-unit id="9f4c3667b1add8d5e02e30fe75d8033f0bfc2e96" translate="yes" xml:space="preserve">
          <source>Return comment tokens.</source>
          <target state="translated">コメントトークンを返します。</target>
        </trans-unit>
        <trans-unit id="785922d0c7990e6a6337740a8132f1efba76556b" translate="yes" xml:space="preserve">
          <source>Return compiler options given via the environment variable &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt;. If the value is a list, it is returned as is. If it is not a list, it is put into a list.</source>
          <target state="translated">環境変数 &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; を介して指定されたコンパイラオプションを返します。値がリストの場合は、そのまま返されます。リストでない場合は、リストに入れられます。</target>
        </trans-unit>
        <trans-unit id="4afe5c3542f3f32911baf31fbf610eaf8e8a9d8d" translate="yes" xml:space="preserve">
          <source>Return information about a started service. Requesting info for an unknown service causes &lt;code&gt;undefined&lt;/code&gt; to be returned. Requesting a list of items causes a tagged list to be returned.</source>
          <target state="translated">開始されたサービスに関する情報を返します。不明なサービスの情報を要求すると、 &lt;code&gt;undefined&lt;/code&gt; が返されます。アイテムのリストを要求すると、タグ付きリストが返されます。</target>
        </trans-unit>
        <trans-unit id="bcd34f9aa0dee036d0db04e93eacf17e6bece459" translate="yes" xml:space="preserve">
          <source>Return node names held by the registrar for the given host.</source>
          <target state="translated">指定されたホストのレジストラが保持するノード名を返します。</target>
        </trans-unit>
        <trans-unit id="996ea5173163b123ed6a043649459919ca914183" translate="yes" xml:space="preserve">
          <source>Return only &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt;strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; integer corresponding to creation time.</source>
          <target state="translated">作成時間に対応する、 &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt;strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; 整数のみを返します。</target>
        </trans-unit>
        <trans-unit id="73fec507617851a521471bf50b4848c38830e262" translate="yes" xml:space="preserve">
          <source>Return only positive integers.</source>
          <target state="translated">正の整数のみを返します。</target>
        </trans-unit>
        <trans-unit id="9c2362dda30d47eb99dd0cab5c2b8fa38f869f8c" translate="yes" xml:space="preserve">
          <source>Return results in a &lt;code&gt;{ok, [Out]}&lt;/code&gt; tuple instead of writing to file and returning &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="translated">ファイルに書き込んで &lt;code&gt;ok&lt;/code&gt; を返す代わりに &lt;code&gt;{ok, [Out]}&lt;/code&gt; 結果を{ok、[Out]}タプルで返します。</target>
        </trans-unit>
        <trans-unit id="8e6d34509ab6610cf83be325f59f6c39943cfea5" translate="yes" xml:space="preserve">
          <source>Return the address of the given node. If not implemented, &lt;code&gt;inet:gethostbyname/1&lt;/code&gt; will be used instead</source>
          <target state="translated">指定されたノードのアドレスを返します。実装されていない場合は、代わりに &lt;code&gt;inet:gethostbyname/1&lt;/code&gt; が使用されます</target>
        </trans-unit>
        <trans-unit id="292859966a655edc4054e4f1076d2fed6b650843" translate="yes" xml:space="preserve">
          <source>Return the defining parameters of a elliptic curve.</source>
          <target state="translated">楕円曲線の定義パラメータを返します。</target>
        </trans-unit>
        <trans-unit id="08d6beff9271fb403fee80042fc6e6442d0f5864" translate="yes" xml:space="preserve">
          <source>Return the distribution port used by the given node.</source>
          <target state="translated">指定されたノードが使用するディストリビューションポートを返します。</target>
        </trans-unit>
        <trans-unit id="026ca738a4e24775b52601dc015e85dbf9838772" translate="yes" xml:space="preserve">
          <source>Return the list of applications as configured with &lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt; で構成されたアプリケーションのリストを返します。</target>
        </trans-unit>
        <trans-unit id="8760f4dfa12986348ea3b742e129cc7f36b461e8" translate="yes" xml:space="preserve">
          <source>Return the list of body subtrees of a &lt;code&gt;clause&lt;/code&gt; node.</source>
          <target state="translated">&lt;code&gt;clause&lt;/code&gt; ノードの本体サブツリーのリストを返します。</target>
        </trans-unit>
        <trans-unit id="415e4cccd2b2511ca9972eccc4412def66ed17df" translate="yes" xml:space="preserve">
          <source>Return the list of started services.</source>
          <target state="translated">起動したサービスの一覧を返します。</target>
        </trans-unit>
        <trans-unit id="869a332a11dcce537fc74b533f9961fb120feb39" translate="yes" xml:space="preserve">
          <source>Return the number of matching functions that can have call count breakpoints, the same as &lt;code&gt;start/0..3&lt;/code&gt; with the same arguments would have returned.</source>
          <target state="translated">同じ引数で &lt;code&gt;start/0..3&lt;/code&gt; と同じように、コールカウントブレークポイントを持つことができる一致する関数の数を返します。</target>
        </trans-unit>
        <trans-unit id="545eef5a0d17878bc6d57549235644bab28f7ff8" translate="yes" xml:space="preserve">
          <source>Return the number of matching functions that has got call count breakpoints.</source>
          <target state="translated">呼び出し回数のブレークポイントを持つマッチする関数の数を返します。</target>
        </trans-unit>
        <trans-unit id="6ecb156241944c24df7a613253421fdcbcc3e0d5" translate="yes" xml:space="preserve">
          <source>Return the process identifier of the server process.</source>
          <target state="translated">サーバプロセスのプロセス識別子を返します。</target>
        </trans-unit>
        <trans-unit id="596033205682a5c5f39f8c045be421baf09bdbad" translate="yes" xml:space="preserve">
          <source>Return transport configuration associated with a single peer, as passed to &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt;. The returned list is empty if the peer is unknown. Otherwise it contains the &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; tuples as in &lt;code&gt;transport&lt;/code&gt; and &lt;code&gt;connections&lt;/code&gt; info above. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; に渡された、単一のピアに関連付けられたトランスポート構成を返します。ピアが不明の場合、返されるリストは空です。それ以外の場合は、上記の &lt;code&gt;transport&lt;/code&gt; および &lt;code&gt;connections&lt;/code&gt; 情報と同様に、 &lt;code&gt;ref&lt;/code&gt; 、 &lt;code&gt;type&lt;/code&gt; 、および &lt;code&gt;options&lt;/code&gt; タプルが含まれます。例えば：</target>
        </trans-unit>
        <trans-unit id="5b25b7bff97770cbd71aa2bcb0ba6cc19819e76b" translate="yes" xml:space="preserve">
          <source>Return true if &lt;code&gt;term&lt;/code&gt; is an exception.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; が例外の場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="232f3db04c4faa620bfbfc11fd3689a472ef9881" translate="yes" xml:space="preserve">
          <source>Return value</source>
          <target state="translated">戻り値</target>
        </trans-unit>
        <trans-unit id="18d44aa00d4d2f1a0de4ecac8687cabb586ac03d" translate="yes" xml:space="preserve">
          <source>Return value from an &lt;code&gt;ssh_sftp&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;ssh_sftp&lt;/code&gt; 関数からの戻り値。</target>
        </trans-unit>
        <trans-unit id="3163d3a67f9c0a3df18a0b32a1848d46a7cae484" translate="yes" xml:space="preserve">
          <source>Return value from the start functions, for example, &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">開始関数からの戻り値（例： &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3&lt;/a&gt;&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="d184302be65b0501c434c989ce960b469d8ab2e9" translate="yes" xml:space="preserve">
          <source>Return value is &lt;code&gt;0&lt;/code&gt;, unless the &lt;code&gt;timeout&lt;/code&gt; driver function is &lt;code&gt;NULL&lt;/code&gt;, in which case it is &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">戻り値は &lt;code&gt;0&lt;/code&gt; です。ただし、 &lt;code&gt;timeout&lt;/code&gt; ドライバー関数が &lt;code&gt;NULL&lt;/code&gt; の場合は、 &lt;code&gt;-1&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="ff216a94df439e2821ca3664b457f212cf962310" translate="yes" xml:space="preserve">
          <source>Return white space tokens. By convention, a newline character, if present, is always the first character of the text (there cannot be more than one newline in a white space token).</source>
          <target state="translated">空白トークンを返します。慣習的に、改行文字がある場合は常にテキストの最初の文字となります (空白トークンの中に複数の改行を入れることはできません)。</target>
        </trans-unit>
        <trans-unit id="0a0f9ea4537c829f189c17c1388dd83d2074333e" translate="yes" xml:space="preserve">
          <source>ReturnFormat) -&amp;gt;</source>
          <target state="translated">ReturnFormat）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e8872950120a8fda0116e4eeb516842552c69925" translate="yes" xml:space="preserve">
          <source>Returned by &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; によって返されます。</target>
        </trans-unit>
        <trans-unit id="f0b4bbed1147880ab3fa88ace211606ff099dbee" translate="yes" xml:space="preserve">
          <source>Returned by the functions &lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;connect/2,3,4&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ssh_sftp#start_channel-2&quot;&gt;ssh_sftp:start_channel/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;connect/2,3,4&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ssh_sftp#start_channel-2&quot;&gt;ssh_sftp:start_channel/2,3&lt;/a&gt;&lt;/code&gt; によって返されます。</target>
        </trans-unit>
        <trans-unit id="80d9f2993c240cb5395538eac32a770dc645b1f7" translate="yes" xml:space="preserve">
          <source>Returned by the functions &lt;code&gt;&lt;a href=&quot;ssh#daemon-1&quot;&gt;daemon/1,2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;ssh#daemon-1&quot;&gt;daemon/1,2,3&lt;/a&gt;&lt;/code&gt; によって返されます。</target>
        </trans-unit>
        <trans-unit id="b2b499cd87149b2c8112ff4703aabf6b14742dd7" translate="yes" xml:space="preserve">
          <source>Returned by the functions &lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt;ssh_connection:session_channel/2,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt;ssh_connection:session_channel/2,4&lt;/a&gt;&lt;/code&gt; によって返されます。</target>
        </trans-unit>
        <trans-unit id="7600c8cb62b3f6c0670cf2d28c10c2d70f454cac" translate="yes" xml:space="preserve">
          <source>Returned if &lt;code&gt;Number&amp;gt;0&lt;/code&gt; and end of file was reached before anything at all could be read.</source>
          <target state="translated">&lt;code&gt;Number&amp;gt;0&lt;/code&gt; で、何も読み取ることができない前にファイルの終わりに達した場合に返されます。</target>
        </trans-unit>
        <trans-unit id="ebd6a9b6057141637a7f687d405ddc6223fd3a4d" translate="yes" xml:space="preserve">
          <source>Returned if end of file was reached before anything at all could be read.</source>
          <target state="translated">何かが読み込まれる前にファイルの終端に達していた場合に返されます。</target>
        </trans-unit>
        <trans-unit id="78f92740b63dec59bb4c6e7e6eaba8a507fff69f" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;{skip,Reason}&lt;/code&gt; from function &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">戻っ &lt;code&gt;{skip,Reason}&lt;/code&gt; 関数から &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; 又は &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="79fbf73ac7c1fd87f1058ecd2cd1bb43d786dfe6" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;{skip,Reason}&lt;/code&gt; from the execution clause of the test case. The execution clause is called, so the author must ensure that the test case does not run.</source>
          <target state="translated">テストケースの実行句から &lt;code&gt;{skip,Reason}&lt;/code&gt; 返します。実行句が呼び出されるため、作成者はテストケースが実行されないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="78efdce4503fc5152a50adf6376b612d02e50c2c" translate="yes" xml:space="preserve">
          <source>Returning any other value or generating an exception causes the new code to be unloaded. If the return value is not an atom, a warning error report is sent to the error logger.</source>
          <target state="translated">他の値を返したり、例外を発生させたりすると、新しいコードはアンロードされます。戻り値がアトムでない場合は、警告エラーレポートがエラーロガーに送信されます。</target>
        </trans-unit>
        <trans-unit id="5bafc7cb30a4a28d5f1849e1ed82229cd36e7a85" translate="yes" xml:space="preserve">
          <source>Returning anything but &lt;code&gt;ok&lt;/code&gt; or a 2xxx series result code causes the transport connection to be broken. Multiple &lt;code&gt;&lt;a href=&quot;#capabilities_cb&quot;&gt;capabilities_cb&lt;/a&gt;&lt;/code&gt; options can be specified, in which case the corresponding callbacks are applied until either all return &lt;code&gt;ok&lt;/code&gt; or one does not.</source>
          <target state="translated">&lt;code&gt;ok&lt;/code&gt; または2xxxシリーズの結果コード以外を返すと、トランスポート接続が切断されます。複数の &lt;code&gt;&lt;a href=&quot;#capabilities_cb&quot;&gt;capabilities_cb&lt;/a&gt;&lt;/code&gt; オプションを指定できます。この場合、対応するコールバックは、すべてが &lt;code&gt;ok&lt;/code&gt; 戻るか、1つが戻らないまで適用されます。</target>
        </trans-unit>
        <trans-unit id="13619914603e5198752b243417d1cec7b1cbae13" translate="yes" xml:space="preserve">
          <source>Returns 0 if &lt;code&gt;cpu_sup&lt;/code&gt; is not available.</source>
          <target state="translated">&lt;code&gt;cpu_sup&lt;/code&gt; が利用できない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="2fe7ef4689924328d121fc13015c7e449fbb3af4" translate="yes" xml:space="preserve">
          <source>Returns 0 on success, non-zero on failure.</source>
          <target state="translated">成功した場合は 0 を、失敗した場合は 0 以外の値を返します。</target>
        </trans-unit>
        <trans-unit id="2fbeaf650327f2e3c58e1b893cae4fb1a66501a9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code id=&quot;read_link_all&quot;&gt;{ok, Filename}&lt;/code&gt; if &lt;code&gt;Name&lt;/code&gt; refers to a symbolic link that is not a raw filename, or &lt;code&gt;{error, Reason}&lt;/code&gt; otherwise. On platforms that do not support symbolic links, the return value is &lt;code&gt;{error,enotsup}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; が生のファイル名ではないシンボリックリンクを参照している場合は &lt;code id=&quot;read_link_all&quot;&gt;{ok, Filename}&lt;/code&gt; 返し &lt;code&gt;{error, Reason}&lt;/code&gt; そうでない場合は{error、Reason}を返します。シンボリックリンクをサポートしないプラットフォームでは、戻り値は &lt;code&gt;{error,enotsup}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c8a13c6c0607ec9a0e9c3c4823a02858da20b803" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is not a proper list.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; が適切なリストでない場合は &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="488069c3cb5902ddad05d14f6565535c0efbbfa1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;-1&lt;/code&gt; if the floating point number is not finite.</source>
          <target state="translated">浮動小数点数が有限でない場合は &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6e8da0a8ae5c1d6ebbf2999c231c02b4ccea25da" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; and initializes &lt;code&gt;obuf&lt;/code&gt; on success, otherwise &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; を返し、成功すると &lt;code&gt;obuf&lt;/code&gt; を初期化します。それ以外の場合は &lt;code&gt;-1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="072a398ea7b2dc0fc0a565fe904090ff6d623dd0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;monitor1&lt;/code&gt; and &lt;code&gt;monitor2&lt;/code&gt; are equal, &amp;lt; &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;monitor1&lt;/code&gt; &amp;lt; &lt;code&gt;monitor2&lt;/code&gt;, and &amp;gt; &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;monitor1&lt;/code&gt; &amp;gt; &lt;code&gt;monitor2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;monitor1&lt;/code&gt; と &lt;code&gt;monitor2&lt;/code&gt; が等しい場合は &lt;code&gt;0&lt;/code&gt; を返し、 &lt;code&gt;monitor1&lt;/code&gt; &amp;lt; &lt;code&gt;monitor2&lt;/code&gt; の場合は&amp;lt; &lt;code&gt;0&lt;/code&gt; を返し、 &lt;code&gt;monitor1&lt;/code&gt; &amp;gt; &lt;code&gt;monitor2&lt;/code&gt; の場合は&amp;gt; &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f42b6d3dd05f623e6c9a461536fab61de5146090" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; if a monitor was removed and &amp;gt; 0 if the monitor no longer exists.</source>
          <target state="translated">モニターが削除された場合は &lt;code&gt;0&lt;/code&gt; を返し、モニターが存在しなくなった場合は&amp;gt; 0を返します。</target>
        </trans-unit>
        <trans-unit id="fbcc999b8ba8bb8fb081510096a443737b55216e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; if successful, otherwise &lt;code&gt;-1&lt;/code&gt;. In the latter case it sets &lt;code&gt;erl_errno&lt;/code&gt; to &lt;code&gt;EIO&lt;/code&gt;.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;-1&lt;/code&gt; を返します。後者の場合、 &lt;code&gt;erl_errno&lt;/code&gt; を &lt;code&gt;EIO&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="dd74052a4956a0a756749720fbbf26847c93e18f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; if the monitor was successfully identified and removed. Returns a non-zero value if the monitor could not be identified, which means it was either</source>
          <target state="translated">モニターが正常に識別されて削除された場合は &lt;code&gt;0&lt;/code&gt; を返します。モニターを識別できなかった場合はゼロ以外の値を返します。</target>
        </trans-unit>
        <trans-unit id="a1cd3df7b26605f1b8a43bc02fca546fec8ce909" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; if the terms are equal, &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;term1&lt;/code&gt; &amp;lt; &lt;code&gt;term2&lt;/code&gt;, or &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;term2&lt;/code&gt; &amp;lt; &lt;code&gt;term1&lt;/code&gt;.</source>
          <target state="translated">戻り &lt;code&gt;0&lt;/code&gt; 用語が等しい場合、 &lt;code&gt;-1&lt;/code&gt; なら &lt;code&gt;term1&lt;/code&gt; &amp;lt; &lt;code&gt;term2&lt;/code&gt; 、又は &lt;code&gt;1&lt;/code&gt; なら &lt;code&gt;term2&lt;/code&gt; &amp;lt; &lt;code&gt;term1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52ee1791e89438cfbb09fe85370e4be0c4174cff" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; if the type cannot be determined or one of:</source>
          <target state="translated">タイプを判別できない場合、または次のいずれかである場合、 &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="50e51ec9b602d8e52f5b56e7dd86a98c570d1875" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; it they are not equal, and a value not equal to &lt;code&gt;0&lt;/code&gt; if they are equal.</source>
          <target state="translated">戻り値 &lt;code&gt;0&lt;/code&gt; それは彼らが等しくない、と値が等しくない &lt;code&gt;0&lt;/code&gt; 彼らが等しい場合。</target>
        </trans-unit>
        <trans-unit id="1495d2dcd77d2c277ca09871795adbea294a06a5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success, &amp;lt; 0 if no &lt;code&gt;down&lt;/code&gt; callback is provided, and &amp;gt; 0 if the process is no longer alive.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返し、 &lt;code&gt;down&lt;/code&gt; コールバックが提供されていない場合は&amp;lt;0を返し、プロセスが終了している場合は&amp;gt; 0を返します。</target>
        </trans-unit>
        <trans-unit id="147dfcedb6130dcb3e344debc4b54ca54f8b8a66" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success, &amp;lt; 0 if no callback is provided, and &amp;gt; 0 if the process is no longer alive.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返し、コールバックが提供されていない場合は&amp;lt;0を返し、プロセスが終了している場合は&amp;gt; 0を返します。</target>
        </trans-unit>
        <trans-unit id="2c492d5222c271880cc6dab0353ce6f5682b5289" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success, otherwise &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="99b406373dc8fe6db0449d813a5f79501cb33531" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success, otherwise &lt;code&gt;EBUSY&lt;/code&gt;.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;EBUSY&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8c69f20dec618478f3663e41c43a1c6b626d3205" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success, otherwise &lt;code&gt;EBUSY&lt;/code&gt;. A thread that currently has read or read/write locked the rwlock &lt;strong&gt;cannot&lt;/strong&gt; try to lock the same rwlock again.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;EBUSY&lt;/code&gt; を返します。現在rwlockを読み取りまたは読み取り/書き込みロックしているスレッド&lt;strong&gt;は&lt;/strong&gt;、同じrwlockを再度ロックする&lt;strong&gt;ことはできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="06b21577fae8bbe6572f27c24fcac58fd4e88891" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success, otherwise a value &lt;code&gt;!= 0&lt;/code&gt;.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返し、それ以外の場合は値 &lt;code&gt;!= 0&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="7f67995b09d8c03447773e8b6d645bf327b96995" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success, otherwise an &lt;code&gt;errno&lt;/code&gt; value is returned to indicate the error.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返します。それ以外の場合は、エラーを示す &lt;code&gt;errno&lt;/code&gt; 値を返します。</target>
        </trans-unit>
        <trans-unit id="17e727f0f7e44e0124cf8250aaf77abcb4d94e4e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success, otherwise an &lt;code&gt;errno&lt;/code&gt; value is returned to indicate the error. The driver creating the key is responsible for destroying it before the driver is unloaded.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返します。それ以外の場合は、エラーを示す &lt;code&gt;errno&lt;/code&gt; 値を返します。キーを作成するドライバーは、ドライバーがアンロードされる前にキーを破棄する責任があります。</target>
        </trans-unit>
        <trans-unit id="26800ea3c35a48f48e98accc6b96cb83bd10b328" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success, otherwise an &lt;code&gt;errno&lt;/code&gt; value is returned to indicate the error. The newly created thread begins executing in the function pointed to by &lt;code&gt;func&lt;/code&gt;, and &lt;code&gt;func&lt;/code&gt; is passed &lt;code&gt;arg&lt;/code&gt; as argument. When &lt;code&gt;erl_drv_thread_create&lt;/code&gt; returns, the thread identifier of the newly created thread is available in &lt;code&gt;*tid&lt;/code&gt;. &lt;code&gt;opts&lt;/code&gt; can be either a &lt;code&gt;NULL&lt;/code&gt; pointer, or a pointer to an &lt;code&gt;&lt;a href=&quot;#ErlDrvThreadOpts&quot;&gt;ErlDrvThreadOpts&lt;/a&gt;&lt;/code&gt; structure. If &lt;code&gt;opts&lt;/code&gt; is a &lt;code&gt;NULL&lt;/code&gt; pointer, default options are used, otherwise the passed options are used.</source>
          <target state="translated">成功した場合は &lt;code&gt;0&lt;/code&gt; を返します。それ以外の場合は、エラーを示す &lt;code&gt;errno&lt;/code&gt; 値を返します。新しく作成されたスレッドはで指さ機能に実行を開始する &lt;code&gt;func&lt;/code&gt; 、および &lt;code&gt;func&lt;/code&gt; が渡された &lt;code&gt;arg&lt;/code&gt; 引数として。とき &lt;code&gt;erl_drv_thread_create&lt;/code&gt; 戻り、新しく作成されたスレッドのスレッド識別子がで利用可能です &lt;code&gt;*tid&lt;/code&gt; 。 &lt;code&gt;opts&lt;/code&gt; は、 &lt;code&gt;NULL&lt;/code&gt; ポインターまたは &lt;code&gt;&lt;a href=&quot;#ErlDrvThreadOpts&quot;&gt;ErlDrvThreadOpts&lt;/a&gt;&lt;/code&gt; 構造体へのポインターのいずれかです。 &lt;code&gt;opts&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; ポインターの場合、デフォルトのオプションが使用されます。それ以外の場合、渡されたオプションが使用されます。</target>
        </trans-unit>
        <trans-unit id="e72c8d8be7beff4d9ddb37560e1a80573817b4bd" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; on success. If the call fails, a non-zero value is returned, and the reason for the error can be obtained with the appropriate platform-dependent call.</source>
          <target state="translated">成功すると &lt;code&gt;0&lt;/code&gt; を返します。呼び出しが失敗した場合、ゼロ以外の値が返され、エラーの理由は適切なプラットフォーム依存の呼び出しで取得できます。</target>
        </trans-unit>
        <trans-unit id="3086d983f407d141773c522d0f5defee16a27022" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f11efa5004a5978c0569c8d60ebccedb9d05a28f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;1&lt;/code&gt; if the timeslice is exhausted, otherwise &lt;code&gt;0&lt;/code&gt;. If &lt;code&gt;1&lt;/code&gt; is returned, the NIF is to return as soon as possible in order for the process to yield.</source>
          <target state="translated">タイムスライスがなくなった場合は &lt;code&gt;1&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;0&lt;/code&gt; を返します。場合は &lt;code&gt;1&lt;/code&gt; が返され、NIFは歩留まりにプロセスのためには、できるだけ早く返すことです。</target>
        </trans-unit>
        <trans-unit id="a05934f68d914848552efcba4c6a4de46ed6c2d6" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;1&lt;/code&gt; on success, otherwise &lt;code&gt;0&lt;/code&gt;. In the latter case &lt;code&gt;erl_errno&lt;/code&gt; is set to one of:</source>
          <target state="translated">成功した場合は &lt;code&gt;1&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;0&lt;/code&gt; を返します。後者の場合、 &lt;code&gt;erl_errno&lt;/code&gt; は次のいずれかに設定されます。</target>
        </trans-unit>
        <trans-unit id="bbce47d721ecf0ed15007cbf5bc4ae1c1f24fa2f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt;&lt;code&gt;Family&lt;/code&gt; such that the index set is equal to the &lt;code&gt;&lt;a href=&quot;#domain&quot;&gt;domain&lt;/a&gt;&lt;/code&gt; of the binary relation &lt;code&gt;BinRel&lt;/code&gt;, and &lt;code&gt;Family&lt;/code&gt;[i] is the &lt;code&gt;&lt;a href=&quot;#image&quot;&gt;image&lt;/a&gt;&lt;/code&gt; of the set of i under &lt;code&gt;BinRel&lt;/code&gt;.</source>
          <target state="translated">戻り &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; &lt;code&gt;Family&lt;/code&gt; インデックスセットはに等しくなるよう &lt;code&gt;&lt;a href=&quot;#domain&quot;&gt;domain&lt;/a&gt;&lt;/code&gt; バイナリ関係の &lt;code&gt;BinRel&lt;/code&gt; 、及び &lt;code&gt;Family&lt;/code&gt; [I]は &lt;code&gt;&lt;a href=&quot;#image&quot;&gt;image&lt;/a&gt;&lt;/code&gt; の下私の組の &lt;code&gt;BinRel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c70c55ba98a792957a1ed746bcd3599e74b06f8c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt;&lt;code&gt;Family&lt;/code&gt; where the indexed set is a &lt;code&gt;&lt;a href=&quot;#partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;Set&lt;/code&gt; such that two elements are considered equal if the results of applying &lt;code&gt;SetFun&lt;/code&gt; are the same value i. This i is the index that &lt;code&gt;Family&lt;/code&gt; maps onto the &lt;code&gt;&lt;a href=&quot;#equivalence_class&quot;&gt;equivalence class&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">戻り &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; &lt;code&gt;Family&lt;/code&gt; のインデックス付きセットがある &lt;code&gt;&lt;a href=&quot;#partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Set&lt;/code&gt; 適用の結果ならば二つの要素が等しいと見なされるように &lt;code&gt;SetFun&lt;/code&gt; が同じiの値です。これは、 &lt;code&gt;Family&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#equivalence_class&quot;&gt;equivalence class&lt;/a&gt;&lt;/code&gt; マップするインデックスです。</target>
        </trans-unit>
        <trans-unit id="1e039b7fedb94135b8bf441f4e52eb683044770e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt;. Notice that negative values are not uncommon.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; 返します。負の値も珍しくないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9c959f6d83500aa2c72c79ef3eff1a14895716ac" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt;strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; integers corresponding to creation time. That is, the integer returned is always larger than previously returned integers on the current runtime system instance.</source>
          <target state="translated">作成時間に対応する、 &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt;strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; 整数を返します。つまり、返される整数は常に、現在のランタイムシステムインスタンスで以前に返された整数よりも大きくなります。</target>
        </trans-unit>
        <trans-unit id="640ef747ead04008a85649e4332a8d5379261b2b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;CpuTopology&lt;/code&gt; used by the emulator. For more information, see argument &lt;code&gt;&lt;a href=&quot;#system_info_cpu_topology&quot;&gt;cpu_topology&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">エミュレータが使用する &lt;code&gt;CpuTopology&lt;/code&gt; を返します。詳細については、引数 &lt;code&gt;&lt;a href=&quot;#system_info_cpu_topology&quot;&gt;cpu_topology&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="72f02ca8ebdf85d353fec758b111da577d03f183" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;ERL_DRV_TIME_ERROR&lt;/code&gt; if called with an invalid time unit argument, or if called from a thread that is not a scheduler thread.</source>
          <target state="translated">無効な時間単位引数で呼び出された場合、またはスケジューラスレッドではないスレッドから呼び出された場合は、 &lt;code&gt;ERL_DRV_TIME_ERROR&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a844d69586de15e9bd1cfc35b03711b171962f8c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;ERL_DRV_TIME_ERROR&lt;/code&gt; if called with an invalid time unit argument.</source>
          <target state="translated">無効な時間単位引数を指定して呼び出された場合、 &lt;code&gt;ERL_DRV_TIME_ERROR&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fbb08c81705b11d4c70e818d320627a5178b1fac" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;ERL_NIF_TIME_ERROR&lt;/code&gt; if called with an invalid time unit argument or if called from a thread that is not a scheduler thread.</source>
          <target state="translated">無効な時間単位引数で呼び出された場合、またはスケジューラスレッドではないスレッドから呼び出された場合は、 &lt;code&gt;ERL_NIF_TIME_ERROR&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d9785e5a0bee0c018d5494695cfb88ba9e8b07fb" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;ERL_NIF_TIME_ERROR&lt;/code&gt; if called with an invalid time unit argument, or if called from a thread that is not a scheduler thread.</source>
          <target state="translated">無効な時間単位引数で呼び出された場合、またはスケジューラスレッドではないスレッドから呼び出された場合は、 &lt;code&gt;ERL_NIF_TIME_ERROR&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bc80a13223e5723498400925f90cdc9b85a31063" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;ERL_NIF_TIME_ERROR&lt;/code&gt; if called with an invalid time unit argument.</source>
          <target state="translated">無効な時間単位引数を指定して呼び出された場合、 &lt;code&gt;ERL_NIF_TIME_ERROR&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8c25a7c06a297494f90b2e3a36638938a9b1aac4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Input&lt;/code&gt;, which is the total number of bytes received through ports, and &lt;code&gt;Output&lt;/code&gt;, which is the total number of bytes output to ports.</source>
          <target state="translated">ポートを介して受信されたバイトの総数である &lt;code&gt;Input&lt;/code&gt; と、ポートに出力されたバイトの総数である &lt;code&gt;Output&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2873dd80c13cadf65349a58c98c0a4c2b0396052" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Item&lt;/code&gt; at the front of queue &lt;code&gt;Q&lt;/code&gt;.</source>
          <target state="translated">キュー &lt;code&gt;Q&lt;/code&gt; の前にある &lt;code&gt;Item&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="879d7819f21618972cba5f60307c902040474ba8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Item&lt;/code&gt; at the rear of queue &lt;code&gt;Q&lt;/code&gt;.</source>
          <target state="translated">キュー &lt;code&gt;Q&lt;/code&gt; の後ろにある &lt;code&gt;Item&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1ce4cb1f794dd5a9fb9ff2644b8f5c049da553f9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Item&lt;/code&gt; from the head of queue &lt;code&gt;Q&lt;/code&gt;.</source>
          <target state="translated">キュー &lt;code&gt;Q&lt;/code&gt; の先頭から &lt;code&gt;Item&lt;/code&gt; を返します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
