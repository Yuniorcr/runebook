<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="6b92987b28a03bb7149820c7ec688d7096641ca7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patchControlPoints&lt;/code&gt; number of control points per patch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00bf9f80e0eabd92d5be2d8f8d5eaee0b4b8c0e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patchControlPoints&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than zero and less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxTessellationPatchSize&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48cdb0aa383924c4c0f1052cf93e1caff67e14eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnAllocation&lt;/code&gt; is a pointer to an application-defined memory allocation function of type &lt;a href=&quot;#PFN_vkAllocationFunction&quot;&gt;PFN_vkAllocationFunction&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2629cb9232702c75aafa732559a49c606c17102b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnAllocation&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid user-defined &lt;a href=&quot;#PFN_vkAllocationFunction&quot;&gt;PFN_vkAllocationFunction&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e7626e75cc1c4275cc64dae68710041d66388e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnFree&lt;/code&gt; is a pointer to an application-defined memory free function of type &lt;a href=&quot;#PFN_vkFreeFunction&quot;&gt;PFN_vkFreeFunction&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3790181e6a571c59042c8afb838ce311c2d3f82a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnFree&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid user-defined &lt;a href=&quot;#PFN_vkFreeFunction&quot;&gt;PFN_vkFreeFunction&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ecc8bb6bceb2a9928db0f988b7239b5674f4807" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnInternalAllocation&lt;/code&gt; is a pointer to an application-defined function that is called by the implementation when the implementation makes internal allocations, and it is of type &lt;a href=&quot;#PFN_vkInternalAllocationNotification&quot;&gt;PFN_vkInternalAllocationNotification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cf8d237eb1623bd6c3f915eba45cf9c6709f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnInternalFree&lt;/code&gt; is a pointer to an application-defined function that is called by the implementation when the implementation frees internal allocations, and it is of type &lt;a href=&quot;#PFN_vkInternalFreeNotification&quot;&gt;PFN_vkInternalFreeNotification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660d5df0bbcbd14511ce907ab70963aeb38ff9ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnReallocation&lt;/code&gt; is a pointer to an application-defined memory reallocation function of type &lt;a href=&quot;#PFN_vkReallocationFunction&quot;&gt;PFN_vkReallocationFunction&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d65c379746fd20b8e4d360f6b76c3ba7445ac63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnReallocation&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid user-defined &lt;a href=&quot;#PFN_vkReallocationFunction&quot;&gt;PFN_vkReallocationFunction&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b09967591259ddcf47bea662279174845e5e9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnReallocation&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; follow the same &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#vkAllocationFunction_return_rules&quot;&gt;rules for return values as &lt;code&gt;PFN_vkAllocationFunction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fc29452fadebcf795a3e24890c6509ad76c99a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pfnReallocation&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; return an allocation with enough space for &lt;code&gt;size&lt;/code&gt; bytes, and the contents of the original allocation from bytes zero to min(original size, new size) - 1 &lt;strong&gt;must&lt;/strong&gt; be preserved in the returned allocation. If &lt;code&gt;size&lt;/code&gt; is larger than the old size, the contents of the additional space are undefined. If satisfying these requirements involves creating a new allocation, then the old allocation &lt;strong&gt;should&lt;/strong&gt; be freed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8229059b2a3bcee459f5deda76c036b7324a8689" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;physicalDevice&lt;/code&gt; is the handle to the device to query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffeee6d75f1d8a812388caba2e181c8031f1fee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;physicalDevice&lt;/code&gt; is the handle to the physical device whose properties will be queried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5799e251d75d7ea32d31bbfd3745640edf6fbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;physicalDevice&lt;/code&gt; is the physical device from which to query the format properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11525d3d60f21b14b8e4c83a2b9e613d4b7fba6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;physicalDevice&lt;/code&gt; is the physical device from which to query the image capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f01bda28b0c037c4fdc949ddda9e7d6b03d7104" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;physicalDevice&lt;/code&gt; is the physical device from which to query the sparse image capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2cf191863247b9856d6e25af8cc04170cb991b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;physicalDevice&lt;/code&gt; is the physical device from which to query the supported features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e3609f3c6ece533b8c2af22c7c3bfc35e40897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;physicalDevice&lt;/code&gt; is the physical device that will be queried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1888217b035a2c9929406ed2445084064dd19112" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;physicalDevice&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkPhysicalDevice&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0c5e5e7ec5d161ca0b34ea29c3ffe0ea59eb99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;physicalDevice&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be one of the device handles returned from a call to &lt;code&gt;vkEnumeratePhysicalDevices&lt;/code&gt; (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-physical-device-enumeration&quot;&gt;Physical Device Enumeration&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a8e68ec84c65c25eb83c649e03e8701ee7ff1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipeline&lt;/code&gt; is the handle of the pipeline to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56f2460eec7aa86cbb13751aba4e329e0222e6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipeline&lt;/code&gt; is the pipeline to be bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313cd19752488a43eba5b7bc722a4bc406d22dc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipeline&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkPipeline&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24d4e577469e8a4b57cb8f2277ef2c6f89a7368" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineBindPoint&lt;/code&gt; is a &lt;a href=&quot;#VkPipelineBindPoint&quot;&gt;VkPipelineBindPoint&lt;/a&gt; indicating whether the descriptors will be used by graphics pipelines or compute pipelines. There is a separate set of bind points for each of graphics and compute, so binding one does not disturb the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d079f97821ec62f80e729481aec7de12fb6e4c81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineBindPoint&lt;/code&gt; is a &lt;a href=&quot;#VkPipelineBindPoint&quot;&gt;VkPipelineBindPoint&lt;/a&gt; value specifying whether this is a compute or graphics subpass. Currently, only graphics subpasses are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1deabbefd5e13ee0d6e54501bfd556011b48bd27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineBindPoint&lt;/code&gt; is a &lt;a href=&quot;#VkPipelineBindPoint&quot;&gt;VkPipelineBindPoint&lt;/a&gt; value specifying whether to bind to the compute or graphics bind point. Binding one does not disturb the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebda7642c6852306a3fe457b7b5b119275e0c7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineBindPoint&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_PIPELINE_BIND_POINT_GRAPHICS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7396553a51c351ce37f23761702eba63df7621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineBindPoint&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkPipelineBindPoint&quot;&gt;VkPipelineBindPoint&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e1f7a566cd0ea3f43e4cff3d4bda01a4a2cd86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineBindPoint&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be supported by the &lt;code&gt;commandBuffer&lt;/code&gt;&amp;rsquo;s parent &lt;code&gt;VkCommandPool&lt;/code&gt;&amp;rsquo;s queue family</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ee4a882dc2701e10abc7efa98a0678a7eb7c65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineCache&lt;/code&gt; is either &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, indicating that pipeline caching is disabled; or the handle of a valid &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#pipelines-cache&quot;&gt;pipeline cache&lt;/a&gt; object, in which case use of that cache is enabled for the duration of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a60aaf82f920835929a9cc7a314743697c65b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineCache&lt;/code&gt; is the handle of the pipeline cache to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d77673939957cacacfcee6d9e7b9a8d3d99be60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineCache&lt;/code&gt; is the pipeline cache to retrieve data from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dbc54822708ed92dda194ff2f8ac3fa5a98fcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineCache&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkPipelineCache&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a7f22c66735dce37cba9943cd64001920d76c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineCache&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522cad80c0243a9877a0b84a09330d88dfe96339" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineCacheUUID&lt;/code&gt; is an array of size &lt;code&gt;VK_UUID_SIZE&lt;/code&gt;, containing 8-bit values that represent a universally unique identifier for the device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bbf44c426eefa135b1dd7741fd05c8349877e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineLayout&lt;/code&gt; is the pipeline layout to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551aa674bc79a5f2858ea1a8bb9214b87cec3d73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineStage&lt;/code&gt; is one of the &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt;, specifying a stage of the pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da51f57dbad6d9e7c6289754882d65898e34376" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineStage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea0a387f99f5aa6b7aff0b8d6ae59737b99bd3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineStatistics&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkQueryPipelineStatisticFlagBits&quot;&gt;VkQueryPipelineStatisticFlagBits&lt;/a&gt; specifying the set of pipeline statistics that &lt;strong&gt;can&lt;/strong&gt; be counted by an active query in the primary command buffer when this secondary command buffer is executed. If this value includes a given bit, then this command buffer &lt;strong&gt;can&lt;/strong&gt; be executed whether the primary command buffer has a pipeline statistics query active that includes this bit or not. If this value excludes a given bit, then the active pipeline statistics query &lt;strong&gt;must&lt;/strong&gt; not be from a query pool that counts that statistic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3f1c70a6b7de019ec419dc2a8a84d5120cd6c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineStatistics&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkQueryPipelineStatisticFlagBits&quot;&gt;VkQueryPipelineStatisticFlagBits&lt;/a&gt; specifying which counters will be returned in queries on the new pool, as described below in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-pipestats&quot;&gt;html/vkspec.html#queries-pipestats&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34e224b45860c23aedb97016181e4bb515d30b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineStatistics&lt;/code&gt; is ignored if &lt;code&gt;queryType&lt;/code&gt; is not &lt;code&gt;VK_QUERY_TYPE_PIPELINE_STATISTICS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473e33136e58897fc311fa91b7aa88937ca46d57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipelineStatisticsQuery&lt;/code&gt; indicates whether the pipeline statistics queries are supported. If this feature is not enabled, queries of type &lt;code&gt;VK_QUERY_TYPE_PIPELINE_STATISTICS&lt;/code&gt;&lt;strong&gt;cannot&lt;/strong&gt; be created, and none of the &lt;a href=&quot;#VkQueryPipelineStatisticFlagBits&quot;&gt;VkQueryPipelineStatisticFlagBits&lt;/a&gt; bits &lt;strong&gt;can&lt;/strong&gt; be set in the &lt;code&gt;pipelineStatistics&lt;/code&gt; member of the &lt;code&gt;VkQueryPoolCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8099c606ae887244110db264af32728077c447e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pointSizeGranularity&lt;/code&gt; is the granularity of supported point sizes. Not all point sizes in the range defined by &lt;code&gt;pointSizeRange&lt;/code&gt; are supported. This limit specifies the granularity (or increment) between successive supported point sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3e893288103f51b61f2c650a47dc3e9b5001d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pointSizeRange&lt;/code&gt;[2] is the range [&lt;code&gt;minimum&lt;/code&gt;,&lt;code&gt;maximum&lt;/code&gt;] of supported sizes for points. Values written to variables decorated with the &lt;code&gt;PointSize&lt;/code&gt; built-in decoration are clamped to this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489f62c76738764ec9f87960b7cbb50580bdef00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;polygonMode&lt;/code&gt; is the triangle rendering mode. See &lt;a href=&quot;#VkPolygonMode&quot;&gt;VkPolygonMode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c75aa4c7db2037177443bfad05d649218b22d78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;polygonMode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkPolygonMode&quot;&gt;VkPolygonMode&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70bbb024237a79ae8b23cec372c650f54445faac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;poolSizeCount&lt;/code&gt; is the number of elements in &lt;code&gt;pPoolSizes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98d78a589c158e4f842cd6cb695cafb5ba2f5a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;poolSizeCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176d0bb35d40dcf8b7343b18e1d74f1a28f5b1d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ppData&lt;/code&gt; points to a pointer in which is returned a host-accessible pointer to the beginning of the mapped range. This pointer minus &lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be aligned to at least &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;minMemoryMapAlignment&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2c72005e34fc2e0312c32d8b6e358bd6eb2e3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ppData&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07934cb9ad946ff745c567f4ba2e433e437e9ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ppEnabledExtensionNames&lt;/code&gt; is a pointer to an array of &lt;code&gt;enabledExtensionCount&lt;/code&gt; null-terminated UTF-8 strings containing the names of extensions to enable for the created device. See the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#extended-functionality-extensions&quot;&gt;Extensions&lt;/a&gt; section for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c4307eabcc6a98a615464a7f5fd515f0e13026" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ppEnabledExtensionNames&lt;/code&gt; is a pointer to an array of &lt;code&gt;enabledExtensionCount&lt;/code&gt; null-terminated UTF-8 strings containing the names of extensions to enable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66f8d0b48198c10afcce41e2740a0d568bb33d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ppEnabledLayerNames&lt;/code&gt; is a pointer to an array of &lt;code&gt;enabledLayerCount&lt;/code&gt; null-terminated UTF-8 strings containing the names of layers to enable for the created instance. See the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#extended-functionality-layers&quot;&gt;Layers&lt;/a&gt; section for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b067024e1695e8e5abd62b231f227f5c5614fc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ppEnabledLayerNames&lt;/code&gt; is deprecated and ignored. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#extended-functionality-device-layer-deprecation&quot;&gt;Device Layer Deprecation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a3affbbcb1a407ace2c0b6058109d923b89033" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preserveAttachmentCount&lt;/code&gt; is the number of preserved attachments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069940280243e789d77de5c7318634987ce437aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;primitiveRestartEnable&lt;/code&gt; controls whether a special vertex index value is treated as restarting the assembly of primitives. This enable only applies to indexed draws (&lt;a href=&quot;#vkCmdDrawIndexed&quot;&gt;vkCmdDrawIndexed&lt;/a&gt; and &lt;a href=&quot;#vkCmdDrawIndexedIndirect&quot;&gt;vkCmdDrawIndexedIndirect&lt;/a&gt;), and the special index value is either 0xFFFFFFFF when the &lt;code&gt;indexType&lt;/code&gt; parameter of &lt;code&gt;vkCmdBindIndexBuffer&lt;/code&gt; is equal to &lt;code&gt;VK_INDEX_TYPE_UINT32&lt;/code&gt;, or 0xFFFF when &lt;code&gt;indexType&lt;/code&gt; is equal to &lt;code&gt;VK_INDEX_TYPE_UINT16&lt;/code&gt;. Primitive restart is not allowed for &amp;ldquo;list&amp;rdquo; topologies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2814804f122580e2f999f1928b3a7e9a027a26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;propertyFlags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkMemoryPropertyFlagBits&quot;&gt;VkMemoryPropertyFlagBits&lt;/a&gt; of properties for this memory type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7defb9047615086c9d3913bd56923b636f04e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushConstantRangeCount&lt;/code&gt; is the number of push constant ranges included in the pipeline layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0ace2ae450132057927ea28c456ad92a899074" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;query&lt;/code&gt; is the query index within the query pool that will contain the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c6e6a33d876bd0f8a5fb519677f67d0340cf25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;query&lt;/code&gt; is the query index within the query pool where the result is stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d25865eb3deffe248340c53ec3048d97269539" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;query&lt;/code&gt; is the query within the query pool that will contain the timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231a2316310572b78dd929a4c4ad54c65eab4d80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;query&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the number of queries in &lt;code&gt;queryPool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf239c43c909f98f943fdb998478880f4b48deb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryCount&lt;/code&gt; is the number of queries managed by the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c23dfdc60625023d53b0d3b71b6d2c30cd5b039" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryCount&lt;/code&gt; is the number of queries to reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73beb2e1046c055aa3206637bf6aaf5c11372cf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryCount&lt;/code&gt; is the number of queries. &lt;code&gt;firstQuery&lt;/code&gt; and &lt;code&gt;queryCount&lt;/code&gt; together define a range of queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cbf327d4bd29fd5fd1e2dc0e395d34a46aeabf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryCount&lt;/code&gt; is the number of queries. &lt;code&gt;firstQuery&lt;/code&gt; and &lt;code&gt;queryCount&lt;/code&gt; together define a range of queries. For pipeline statistics queries, each query index in the pool contains one integer value for each bit that is enabled in &lt;a href=&quot;#VkQueryPoolCreateInfo&quot;&gt;VkQueryPoolCreateInfo&lt;/a&gt;::&lt;code&gt;pipelineStatistics&lt;/code&gt; when the pool is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0e3964e03fe2624956f645e5c9ed88849428e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryFlags&lt;/code&gt; indicates the query flags that &lt;strong&gt;can&lt;/strong&gt; be used by an active occlusion query in the primary command buffer when this secondary command buffer is executed. If this value includes the &lt;code&gt;VK_QUERY_CONTROL_PRECISE_BIT&lt;/code&gt; bit, then the active query &lt;strong&gt;can&lt;/strong&gt; return boolean results or actual sample counts. If this bit is not set, then the active query &lt;strong&gt;must&lt;/strong&gt; not use the &lt;code&gt;VK_QUERY_CONTROL_PRECISE_BIT&lt;/code&gt; bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e98e4d6bf8a9c6ce97127091a0aa41082876c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt; is the handle of the query pool managing the queries being reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d508bc7e40446623c9e5f13ca89c4ead757a719" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt; is the query pool managing the queries containing the desired results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb6a0cd131c0b72d22416d8c7a2cd3e3f149875" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt; is the query pool that is managing the results of the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3988c6dc67017b94dfe90acfa4d7b1b7e65bc3e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt; is the query pool that will manage the results of the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4220c7e2cd97d7af12fe26d56fbfcb942326934e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt; is the query pool that will manage the timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1861d3db33addc4e5b6cae978d257769db6b163" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt; is the query pool to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592d2e7af8afa5245d00083a50395c343c08db21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkQueryPool&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10c428a07037e89115430a1a42e061bd83401df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;queryType&lt;/code&gt; of &lt;code&gt;VK_QUERY_TYPE_TIMESTAMP&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d002bc2db4bbe737b15d2ef7008bc9c8ad0989a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;queryType&lt;/code&gt; that differs from that of any other queries that have been made &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-operation-active&quot;&gt;active&lt;/a&gt;, and are currently still active within &lt;code&gt;commandBuffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883b83ca48654b2296669de760332f2e138c3c3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35221c6843e317a4f9544525f872bb88f80d0bca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryType&lt;/code&gt; is a &lt;a href=&quot;#VkQueryType&quot;&gt;VkQueryType&lt;/a&gt; value specifying the type of queries managed by the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25e0ab4897efc2d25d6859d3ef4c0daabb3d2e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkQueryType&quot;&gt;VkQueryType&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98ba98b3ca913ffea702e23498e0e134d9203cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queue&lt;/code&gt; is the queue on which to wait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3519cafa70135feb0ff9d27ca835dc250c96808d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queue&lt;/code&gt; is the queue that the command buffers will be submitted to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38a6a01b203388a271c54632d866d7bbe3a867b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queue&lt;/code&gt; is the queue that the sparse binding operations will be submitted to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8025ae7c64868e4ecb17850ed363011d4a6d2c7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queue&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkQueue&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ceca1888806c8f360dfd78323e761e73c68f88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueCount&lt;/code&gt; is an unsigned integer specifying the number of queues to create in the queue family indicated by &lt;code&gt;queueFamilyIndex&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf9f452ce995f91f55605fc73c27b901ca016ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueCount&lt;/code&gt; is the unsigned integer count of queues in this queue family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6feac8e0bdea89a7e1d9b078ef93f72877dc8d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d620dec3d41fdb9e0037e5122b87a513c0d660" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to the &lt;code&gt;queueCount&lt;/code&gt; member of the &lt;code&gt;VkQueueFamilyProperties&lt;/code&gt; structure, as returned by &lt;code&gt;vkGetPhysicalDeviceQueueFamilyProperties&lt;/code&gt; in the &lt;code&gt;pQueueFamilyProperties&lt;/code&gt;[&lt;code&gt;queueFamilyIndex&lt;/code&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286627e116acfd934489d06eebf93d7a9ca72ca2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueCreateInfoCount&lt;/code&gt; is the unsigned integer size of the &lt;code&gt;pQueueCreateInfos&lt;/code&gt; array. Refer to the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-queue-creation&quot;&gt;Queue Creation&lt;/a&gt; section below for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb9b8d0a22d7192a78da36d6c28a5d629bf3f00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueCreateInfoCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f285ef6629f774da00ae6adc33549cb5968365a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueFamilyIndex&lt;/code&gt; designates a queue family as described in section &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-queueprops&quot;&gt;Queue Family Properties&lt;/a&gt;. All command buffers allocated from this command pool &lt;strong&gt;must&lt;/strong&gt; be submitted on queues from the same queue family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52a1c89d542e085f65e72d68090509e7f5e8afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueFamilyIndex&lt;/code&gt; is an unsigned integer indicating the index of the queue family to create on this device. This index corresponds to the index of an element of the &lt;code&gt;pQueueFamilyProperties&lt;/code&gt; array that was returned by &lt;code&gt;vkGetPhysicalDeviceQueueFamilyProperties&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e03e2db256abbedfe965324ff0082cc881458a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueFamilyIndex&lt;/code&gt; is the index of the queue family to which the queue belongs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c41edfbe14798a5f29c7a667650088bd781691" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueFamilyIndex&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than &lt;code&gt;pQueueFamilyPropertyCount&lt;/code&gt; returned by &lt;code&gt;vkGetPhysicalDeviceQueueFamilyProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba9d197443e2a171112c683a3f8b313bdb8ed7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueFamilyIndex&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be one of the queue family indices specified when &lt;code&gt;device&lt;/code&gt; was created, via the &lt;code&gt;VkDeviceQueueCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdfaa7add62c27b300f8c212558852175eac16a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueFamilyIndex&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be the index of a queue family available in the calling command&amp;rsquo;s &lt;code&gt;device&lt;/code&gt; parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17dc99bc3eab4246b7913cf71602799810d0f7ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueFamilyIndexCount&lt;/code&gt; is the number of entries in the &lt;code&gt;pQueueFamilyIndices&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c3033830e5404bed4f382412f155878f489a01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueFlags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkQueueFlagBits&quot;&gt;VkQueueFlagBits&lt;/a&gt; indicating capabilities of the queues in this queue family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233660d857927cbe02d534738c0dd37336a16d87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueIndex&lt;/code&gt; is the index within this queue family of the queue to retrieve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341c7e97e30899b3732205b6f966ba9c0628cbe5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queueIndex&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the number of queues created for the specified queue family index when &lt;code&gt;device&lt;/code&gt; was created, via the &lt;code&gt;queueCount&lt;/code&gt; member of the &lt;code&gt;VkDeviceQueueCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81821a74c59b72eccd385c7fbc9b5a453bf564be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r&lt;/code&gt; is a &lt;a href=&quot;#VkComponentSwizzle&quot;&gt;VkComponentSwizzle&lt;/a&gt; specifying the component value placed in the R component of the output vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e552bfc6da86fe9a0f7a559ca053960e2f5294e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkComponentSwizzle&quot;&gt;VkComponentSwizzle&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebeef4a630d70a072bd00b3d446e31c0d1f52be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;range&lt;/code&gt; is a size in bytes of the buffer view. If &lt;code&gt;range&lt;/code&gt; is equal to &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt;, the range from &lt;code&gt;offset&lt;/code&gt; to the end of the buffer is used. If &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt; is used and the remaining size of the buffer is not a multiple of the element size of &lt;code&gt;format&lt;/code&gt;, then the nearest smaller multiple is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdd960c19b9847785cdfac1e72d84ea2a6543cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;range&lt;/code&gt; is the size in bytes that is used for this descriptor update, or &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt; to use the range from &lt;code&gt;offset&lt;/code&gt; to the end of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89191165b336decef0d93db39257aaba9fc0bd1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rangeCount&lt;/code&gt; is the number of image subresource range structures in &lt;code&gt;pRanges&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83822855d0ae331cab6479d6016ecca235ee63d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rangeCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f493ad5a56faab3e95e05c6d16bea65591ca24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rasterizationSamples&lt;/code&gt; is a &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; specifying the number of samples per pixel used in rasterization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657e0865ac2410dd3427575f94dc0cac117a2abf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rasterizationSamples&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1788d8610548fb17889431c4de6fb2986e78bf72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rasterizerDiscardEnable&lt;/code&gt; controls whether primitives are discarded immediately before the rasterization stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f9f01ed27d7455ecbd3e41a7f9f771cf32d894" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rect&lt;/code&gt; is the two-dimensional region to be cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1472eab27147bcf77b1f3b47af25ab1b43eb04df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rectCount&lt;/code&gt; is the number of entries in the &lt;code&gt;pRects&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038bd2e4584bf2a8c316c18dbad3a16a8e0fd89d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rectCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a736f13391fa16229d610bb339e70eed0532a478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reference&lt;/code&gt; is an integer reference value that is used in the unsigned stencil comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e760d5ee9bae7657054573637b074af414d899" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reference&lt;/code&gt; is the new value to use as the stencil reference value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94d3fd38de607fc7e8cb361298f1d7c975f7696" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regionCount&lt;/code&gt; is the number of regions to blit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a8be8d3596ca815e7ca83dd21c9f16e9a5bc5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regionCount&lt;/code&gt; is the number of regions to copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96472f4939dc880b4986f2c99cbce734dc4d1a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regionCount&lt;/code&gt; is the number of regions to resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23b03f490dffb8160dd7e0f9e2d5caab30d7fef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regionCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54130db3d3d4649f189f9d633d7b904fdb081db5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderArea&lt;/code&gt; is the render area that is affected by the render pass instance, and is described in more detail below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046b4cae13fc6deb1b9e24cfe62bf7b27777afc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderArea&lt;/code&gt; is the render area that is affected by the render pass instance. The effects of attachment load, store and multisample resolve operations are restricted to the pixels whose x and y coordinates fall within the render area on all attachments. The render area extends to all layers of &lt;code&gt;framebuffer&lt;/code&gt;. The application &lt;strong&gt;must&lt;/strong&gt; ensure (using scissor if necessary) that all rendering is contained within the render area, otherwise the pixels outside of the render area become undefined and shader side effects &lt;strong&gt;may&lt;/strong&gt; occur for fragments outside the render area. The render area &lt;strong&gt;must&lt;/strong&gt; be contained within the framebuffer dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e457968f9c3c84e473646c003e38da88c7869a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderPass&lt;/code&gt; is a &lt;code&gt;VkRenderPass&lt;/code&gt; object defining which render passes the &lt;code&gt;VkCommandBuffer&lt;/code&gt; will be &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#renderpass-compatibility&quot;&gt;compatible&lt;/a&gt; with and &lt;strong&gt;can&lt;/strong&gt; be executed within. If the &lt;code&gt;VkCommandBuffer&lt;/code&gt; will not be executed within a render pass instance, &lt;code&gt;renderPass&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d8c0c34e5b98cd08663e52cb98658805c16057" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderPass&lt;/code&gt; is a handle to a render pass object describing the environment in which the pipeline will be used; the pipeline &lt;strong&gt;must&lt;/strong&gt; only be used with an instance of any render pass compatible with the one provided. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#renderpass-compatibility&quot;&gt;Render Pass Compatibility&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a277a190a0899bc509ecc26437dc73263a4f93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderPass&lt;/code&gt; is a handle to a render pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e18b047ecd05791607fe225d867ef4f24505e47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderPass&lt;/code&gt; is a render pass that defines what render passes the framebuffer will be compatible with. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#renderpass-compatibility&quot;&gt;Render Pass Compatibility&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa74c44cd3a706aa2101d38453d6c0e0aaf402a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderPass&lt;/code&gt; is the handle of the render pass to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1713ab59918854f72c0a51ee158882295177712b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderPass&lt;/code&gt; is the render pass to begin an instance of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d2611ee0b719e73403ea75d4ced3ab0ee736a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#renderpass-compatibility&quot;&gt;compatible&lt;/a&gt; with the &lt;code&gt;renderPass&lt;/code&gt; member of the &lt;code&gt;VkFramebufferCreateInfo&lt;/code&gt; structure specified when creating &lt;code&gt;framebuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14200e685e0472d6b67047e7165d9865f56eb070" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkRenderPass&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcf1231ddbb330d96f16b122bf8545258105084" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;renderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303ec4808ebb0c059aa603e1c0524d5cf68a7110" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;residencyAlignedMipSize&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt; if images with mip level dimensions that are not integer multiples of the corresponding dimensions of the sparse image block &lt;strong&gt;may&lt;/strong&gt; be placed in the mip tail. If this property is not reported, only mip levels with dimensions smaller than the &lt;code&gt;imageGranularity&lt;/code&gt; member of the &lt;code&gt;VkSparseImageFormatProperties&lt;/code&gt; structure will be placed in the mip tail. If this property is reported the implementation is allowed to return &lt;code&gt;VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT&lt;/code&gt; in the &lt;code&gt;flags&lt;/code&gt; member of &lt;code&gt;VkSparseImageFormatProperties&lt;/code&gt;, indicating that mip level dimensions that are not integer multiples of the corresponding dimensions of the sparse image block will be placed in the mip tail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837c972d8671deee78617e7256a9011e1772a382" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;residencyNonResidentStrict&lt;/code&gt; specifies whether the physical device &lt;strong&gt;can&lt;/strong&gt; consistently access non-resident regions of a resource. If this property is &lt;code&gt;VK_TRUE&lt;/code&gt;, access to non-resident regions of resources will be guaranteed to return values as if the resource were populated with 0; writes to non-resident regions will be discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9855b1ec19e678f781aafea9f590d0e2695227c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;residencyStandard2DBlockShape&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt; if the physical device will access all single-sample 2D sparse resources using the standard sparse image block shapes (based on image format), as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#sparsememory-sparseblockshapessingle&quot;&gt;Standard Sparse Image Block Shapes (Single Sample)&lt;/a&gt; table. If this property is not supported the value returned in the &lt;code&gt;imageGranularity&lt;/code&gt; member of the &lt;code&gt;VkSparseImageFormatProperties&lt;/code&gt; structure for single-sample 2D images is not &lt;strong&gt;required&lt;/strong&gt; to match the standard sparse image block dimensions listed in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb8c2632a5e500a1bb2b691683bc0c8e32b7ce0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;residencyStandard2DMultisampleBlockShape&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt; if the physical device will access all multisample 2D sparse resources using the standard sparse image block shapes (based on image format), as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#sparsememory-sparseblockshapesmsaa&quot;&gt;Standard Sparse Image Block Shapes (MSAA)&lt;/a&gt; table. If this property is not supported, the value returned in the &lt;code&gt;imageGranularity&lt;/code&gt; member of the &lt;code&gt;VkSparseImageFormatProperties&lt;/code&gt; structure for multisample 2D images is not &lt;strong&gt;required&lt;/strong&gt; to match the standard sparse image block dimensions listed in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ade4bd2471f4eceab2aefbc88e2e7cc88901b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;residencyStandard3DBlockShape&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt; if the physical device will access all 3D sparse resources using the standard sparse image block shapes (based on image format), as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#sparsememory-sparseblockshapessingle&quot;&gt;Standard Sparse Image Block Shapes (Single Sample)&lt;/a&gt; table. If this property is not supported, the value returned in the &lt;code&gt;imageGranularity&lt;/code&gt; member of the &lt;code&gt;VkSparseImageFormatProperties&lt;/code&gt; structure for 3D images is not &lt;strong&gt;required&lt;/strong&gt; to match the standard sparse image block dimensions listed in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59beb88df6f8ec092564d57ed0612f42e0fdc24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resourceOffset&lt;/code&gt; is the offset into the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f28c081cce79b4be439d8a4b465b01fca1b8bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resourceOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the size of the resource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339c4fbef14350e56a4232b02719016e074cb39b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;robustBufferAccess&lt;/code&gt; indicates that accesses to buffers are bounds-checked against the range of the buffer descriptor (as determined by &lt;code&gt;VkDescriptorBufferInfo&lt;/code&gt;::&lt;code&gt;range&lt;/code&gt;, &lt;code&gt;VkBufferViewCreateInfo&lt;/code&gt;::&lt;code&gt;range&lt;/code&gt;, or the size of the buffer). Out of bounds accesses &lt;strong&gt;must&lt;/strong&gt; not cause application termination, and the effects of shader loads, stores, and atomics &lt;strong&gt;must&lt;/strong&gt; conform to an implementation-dependent behavior as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3834eea06128bc9fdc1996e7c16259730b39a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rowPitch&lt;/code&gt; describes the number of bytes between each row of texels in an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e644aa8eda2179fd9d8b1e01c9639c49494c60ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt; is the type of this structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62149a74b1759e3738f5f862955596692049feaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_APPLICATION_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f79bb880bf2a3c5d3832602f20509b8c1cd36c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_BIND_SPARSE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9436082adea02d4b94d1469f4f261f58cb274d75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51d3643458794784eeb316abfa881763a45c5d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b670d3d28c2c4350a1bf7b7e1681ccfb06d0c437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5eb4e3b4031493c183ca5b59fd7bd193526d860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0091cb0d4cb2189dcf944dac90ff8c75571465b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a6e24fa09f6f5698343eb13e1c84d2cc247905" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0a4dbe4f771dabbe391988aec39923d938f02c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2488964e07c3f0d8e5835dab8a7b4ac8e3b18a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988fd919ac2aeab0c1cc56762fa91848bbce214c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8400ecabd99184ddf684960112bb140ca04a5b4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7793ad23864dc7d9f20d67a8088559459d6704b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114357b2879581965d75f55fdce0dda8540f76de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db574725efa9f10c83fa9697ed77d345c89677b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ab27a6e0da8f907c4369396244683b01d584c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8176436a984d577999bdb2585203640823a48a17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_EVENT_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6952b015a191f24fd52c71913faefc25b410d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_FENCE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc20f63870eb297ff1b01483c0bdf4e2f85b486" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e90a62b3ac17259946f75e0b94d026126df118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a937e9bab4ee14c5d597ad81d059960817ac51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1a981e08b6bb6e2349e2a6137b5f91417cd9e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775acd022f56142dac62f1fb248f58f3ac2d3dc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b74dc9a0953af22d73e10079fdf9a754034200" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97896fa24cae35ded191d72b7af23b6ae2131dc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea07f1102c9bd522d3536e47e5b7dcef33f5713" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eff8a429d1b6f19bcac67e74462a61b38486e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_MEMORY_BARRIER&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e8f8a51db0afa2e07ec94373b9c6e5582fe0d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5742a94847df74e9fa792c2c2deb9342bf78b830" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55c36b6272533b329d8c92d90ae28d722769b03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6603ade70f1f6675ee1d504fe5210c14969138" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f26630bcc161cb4333a95411925693fd09ca48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83171545f108f6a6100e6d66d6877ca2e8a8c200" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247c62abccc6e0176aa44917442c46d5d3f06557" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2751bcc0375a5bb087059c58fffc17920c7b3f8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627dc9da32d4e21e12243e113b4de4d010f407f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a51e11a7a517b9cc600372cab6462db8d49a500" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6f5755d2995f5033ffd52b115bcded2d415cf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbbfdcd8ac80c1c095e6373ddb9155ce065c4dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae688b8542de73cbdcb54047e37cbcaf82ee0af0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772ed04df6be8d96c24d52d76949df9ef293449a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa0671e18d1abd3e9a823ea004ec1852daf9c99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a501f2d4cb2b02bd69df1945ebe9698402af60e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4f2d5c1f202785e097227adc8a65befaf7b06c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa61fdbe3601df4a1d0e76f2fb936f96560d054e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b632daa9b4a70a01ad81e265561f1c080eb80497" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_SUBMIT_INFO&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f55718113d5cc7f0bf85c9773a24f182f19698c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475c7f994dd035e917609f4a5a0bf55553dd2480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sampleCounts&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; specifying all the supported sample counts for this image as described &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-supported-sample-counts&quot;&gt;below&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3acf96c3063ec7dd843410bb531e574bd7a7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sampleRateShading&lt;/code&gt; indicates whether per-sample shading and multisample interpolation are supported. If this feature is not enabled, the &lt;code&gt;sampleShadingEnable&lt;/code&gt; member of the &lt;code&gt;VkPipelineMultisampleStateCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be set to &lt;code&gt;VK_FALSE&lt;/code&gt; and the &lt;code&gt;minSampleShading&lt;/code&gt; member is ignored. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;SampleRateShading&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171a9507ab7ac85f88ff9c67aab00d477bdcbf64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sampleShadingEnable&lt;/code&gt; specifies that fragment shading executes per-sample if &lt;code&gt;VK_TRUE&lt;/code&gt;, or per-fragment if &lt;code&gt;VK_FALSE&lt;/code&gt;, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#primsrast-sampleshading&quot;&gt;Sample Shading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6fc01625ff161764475140c849930d625ad5f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sampledImageColorSampleCounts&lt;/code&gt; is a bitmask&lt;sup&gt;1&lt;/sup&gt; of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; indicating the sample counts supported for all 2D images created with &lt;code&gt;VK_IMAGE_TILING_OPTIMAL&lt;/code&gt;, &lt;code&gt;usage&lt;/code&gt; containing &lt;code&gt;VK_IMAGE_USAGE_SAMPLED_BIT&lt;/code&gt;, and a non-integer color format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0095f2cf767e223bfe1bede4906dfe9b53e73f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sampledImageDepthSampleCounts&lt;/code&gt; is a bitmask&lt;sup&gt;1&lt;/sup&gt; of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; indicating the sample counts supported for all 2D images created with &lt;code&gt;VK_IMAGE_TILING_OPTIMAL&lt;/code&gt;, &lt;code&gt;usage&lt;/code&gt; containing &lt;code&gt;VK_IMAGE_USAGE_SAMPLED_BIT&lt;/code&gt;, and a depth format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fe2beeb13946a8c7b4c256d084bd1e29b21bce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sampledImageIntegerSampleCounts&lt;/code&gt; is a bitmask&lt;sup&gt;1&lt;/sup&gt; of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; indicating the sample counts supported for all 2D images created with &lt;code&gt;VK_IMAGE_TILING_OPTIMAL&lt;/code&gt;, &lt;code&gt;usage&lt;/code&gt; containing &lt;code&gt;VK_IMAGE_USAGE_SAMPLED_BIT&lt;/code&gt;, and an integer color format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db40ddd354f92b0de244bcb3777b34ee7b5aaa77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sampledImageStencilSampleCounts&lt;/code&gt; is a bitmask&lt;sup&gt;1&lt;/sup&gt; of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; indicating the sample supported for all 2D images created with &lt;code&gt;VK_IMAGE_TILING_OPTIMAL&lt;/code&gt;, &lt;code&gt;usage&lt;/code&gt; containing &lt;code&gt;VK_IMAGE_USAGE_SAMPLED_BIT&lt;/code&gt;, and a stencil format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9453d3aed24b6561ee2f7dafb53ef3b0d6b0bbfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sampler&lt;/code&gt; is a sampler handle, and is used in descriptor updates for types &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLER&lt;/code&gt; and &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt; if the binding being updated does not use immutable samplers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2832f3b847e17d99709060ae4c2485ac3a57b72c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sampler&lt;/code&gt; is the sampler to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa37561d9b5568599eed4330d42f6a470323187" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samplerAnisotropy&lt;/code&gt; indicates whether anisotropic filtering is supported. If this feature is not enabled, the &lt;code&gt;maxAnisotropy&lt;/code&gt; member of the &lt;code&gt;VkSamplerCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f48755bf6fb80c473b087bb6532da395393f39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt; &amp;gt; 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22fcb0868795677adabba64e114b2fa36e368b30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt; = 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f6b079651b1fecc340a4fbbfab7f5efbff0486" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt; = ci.&lt;code&gt;samples&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317a18c0fb1275056fefe17443633aca9a2cddc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt; is &lt;code&gt;VK_SAMPLE_COUNT_1_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf631d586cf84ef64ec87273cc0f6579bef185e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt; is the number of samples of the image as defined in &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be5b3c795facd99affcb0bb7c9a81bde10ea7f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt; is the number of samples per pixel as defined in &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570a63571809e559e189b0fde10f1ec28c91066c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt; is the number of sub-data element samples in the image as defined in &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt;. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#primsrast-multisampling&quot;&gt;Multisampling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a87578e4a79cb0eebbba66f97c8e08913ff5ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a bit value that is set in &lt;code&gt;VkImageFormatProperties&lt;/code&gt;::&lt;code&gt;sampleCounts&lt;/code&gt; returned by &lt;code&gt;vkGetPhysicalDeviceImageFormatProperties&lt;/code&gt; with &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;imageType&lt;/code&gt;, &lt;code&gt;tiling&lt;/code&gt;, &lt;code&gt;usage&lt;/code&gt;, and &lt;code&gt;flags&lt;/code&gt; equal to those in this structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a993cbe915f828af5fb16156b1a589b210ee50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a bit value that is set in &lt;code&gt;VkImageFormatProperties&lt;/code&gt;::&lt;code&gt;sampleCounts&lt;/code&gt; returned by &lt;code&gt;vkGetPhysicalDeviceImageFormatProperties&lt;/code&gt; with &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;tiling&lt;/code&gt;, and &lt;code&gt;usage&lt;/code&gt; equal to those in this command and &lt;code&gt;flags&lt;/code&gt; equal to the value that is set in &lt;code&gt;VkImageCreateInfo&lt;/code&gt;::&lt;code&gt;flags&lt;/code&gt; when the image is created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892120ce6ce76cda3df70206c5185c87e760ce84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;samples&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c106b8469ba4b4d5886f236ffe726e04af12ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scissorCount&lt;/code&gt; and &lt;code&gt;viewportCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be identical</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1748bd3684991211a5b587edefca0b33eb378dbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scissorCount&lt;/code&gt; is the number of &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fragops-scissor&quot;&gt;scissors&lt;/a&gt; and &lt;strong&gt;must&lt;/strong&gt; match the number of viewports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a418f7e6168713b3fa791cefb212b23f52af69b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scissorCount&lt;/code&gt; is the number of scissors whose rectangles are updated by the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b109559200aaa6ea8b4ac50d486ff80551b22bf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scissorCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxViewports&lt;/code&gt;, inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f07b8d2c678b88b16030948849cd47a4f8c491a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scissorCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7662c312e00a484c0e39cc8e44e5cc755fc91aca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;semaphore&lt;/code&gt; is the handle of the semaphore to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ee392daad3e466322816063f56395b8fb7f10f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setLayoutCount&lt;/code&gt; is the number of descriptor sets included in the pipeline layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41ce45f55148ca53aaa30fb74ad7188b9ab35e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setLayoutCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxBoundDescriptorSets&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f518474bef26c6a384b8b4a55c7b1c01097c1a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderClipDistance&lt;/code&gt; indicates whether clip distances are supported in shader code. If this feature is not enabled, any members decorated with the &lt;code&gt;ClipDistance&lt;/code&gt; built-in decoration &lt;strong&gt;must&lt;/strong&gt; not be read from or written to in shader modules. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;ClipDistance&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78968b3b7779cdb03a06cd3594865eef035def5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderCullDistance&lt;/code&gt; indicates whether cull distances are supported in shader code. If this feature is not enabled, any members decorated with the &lt;code&gt;CullDistance&lt;/code&gt; built-in decoration &lt;strong&gt;must&lt;/strong&gt; not be read from or written to in shader modules. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;CullDistance&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e390f945090dfc93432c768c075d54a3fc6482b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderFloat64&lt;/code&gt; indicates whether 64-bit floats (doubles) are supported in shader code. If this feature is not enabled, 64-bit floating-point types &lt;strong&gt;must&lt;/strong&gt; not be used in shader code. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;Float64&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467728cbc7a070ee8c89e2f64dd71304bb768b90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderImageGatherExtended&lt;/code&gt; indicates whether the extended set of image gather instructions are available in shader code. If this feature is not enabled, the &lt;code&gt;OpImage&lt;/code&gt;*&lt;code&gt;Gather&lt;/code&gt; instructions do not support the &lt;code&gt;Offset&lt;/code&gt; and &lt;code&gt;ConstOffsets&lt;/code&gt; operands. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;ImageGatherExtended&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc736b0c5082207804c1ef6b3e1984f61e8a855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderInt16&lt;/code&gt; indicates whether 16-bit integers (signed and unsigned) are supported in shader code. If this feature is not enabled, 16-bit integer types &lt;strong&gt;must&lt;/strong&gt; not be used in shader code. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;Int16&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9d59d9171dc60ca4516192e52b6c831e295e6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderInt64&lt;/code&gt; indicates whether 64-bit integers (signed and unsigned) are supported in shader code. If this feature is not enabled, 64-bit integer types &lt;strong&gt;must&lt;/strong&gt; not be used in shader code. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;Int64&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca86b236d599a7802e2b542da79d6ab05dfddb28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderModule&lt;/code&gt; is the handle of the shader module to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44582ec9e0da2233e8844ca6d0812f4dd1cce0d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderResourceMinLod&lt;/code&gt; indicates whether image operations that specify the minimum resource level-of-detail (LOD) are supported in shader code. If this feature is not enabled, the &lt;code&gt;MinLod&lt;/code&gt; image operand &lt;strong&gt;must&lt;/strong&gt; not be used in shader code. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;MinLod&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321e039345320d646d7237709fdac41185fe739f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderResourceResidency&lt;/code&gt; indicates whether image operations that return resource residency information are supported in shader code. If this feature is not enabled, the &lt;code&gt;OpImageSparse&lt;/code&gt;* instructions &lt;strong&gt;must&lt;/strong&gt; not be used in shader code. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;SparseResidency&lt;/code&gt; capability. The feature requires at least one of the &lt;code&gt;sparseResidency&lt;/code&gt;* features to be supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe297be3c7205fb337640fcfa4fcdda2abb336ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderSampledImageArrayDynamicIndexing&lt;/code&gt; indicates whether arrays of samplers or sampled images &lt;strong&gt;can&lt;/strong&gt; be indexed by dynamically uniform integer expressions in shader code. If this feature is not enabled, resources with a descriptor type of &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be indexed only by constant integral expressions when aggregated into arrays in shader code. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;SampledImageArrayDynamicIndexing&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b051fd61463b96ab22ae9af6fb9afeece2a632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderStorageBufferArrayDynamicIndexing&lt;/code&gt; indicates whether arrays of storage buffers &lt;strong&gt;can&lt;/strong&gt; be indexed by dynamically uniform integer expressions in shader code. If this feature is not enabled, resources with a descriptor type of &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be indexed only by constant integral expressions when aggregated into arrays in shader code. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;StorageBufferArrayDynamicIndexing&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31235fcdff86ba28df94640ecd0ab74f16b03b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderStorageImageArrayDynamicIndexing&lt;/code&gt; indicates whether arrays of storage images &lt;strong&gt;can&lt;/strong&gt; be indexed by dynamically uniform integer expressions in shader code. If this feature is not enabled, resources with a descriptor type of &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be indexed only by constant integral expressions when aggregated into arrays in shader code. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;StorageImageArrayDynamicIndexing&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed11525f657647189f99e94785ca4c657eb5413d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderStorageImageExtendedFormats&lt;/code&gt; indicates whether the extended storage image formats are available in shader code. If this feature is not enabled, the formats requiring the &lt;code&gt;StorageImageExtendedFormats&lt;/code&gt; capability are not supported for storage images. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;StorageImageExtendedFormats&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06d766696702f1af270301600d39486febde2dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderStorageImageMultisample&lt;/code&gt; indicates whether multisampled storage images are supported. If this feature is not enabled, images that are created with a &lt;code&gt;usage&lt;/code&gt; that includes &lt;code&gt;VK_IMAGE_USAGE_STORAGE_BIT&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be created with &lt;code&gt;samples&lt;/code&gt; equal to &lt;code&gt;VK_SAMPLE_COUNT_1_BIT&lt;/code&gt;. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;StorageImageMultisample&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c7175a9f627409babb1dd8ef1d5c9999709baf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderStorageImageReadWithoutFormat&lt;/code&gt; indicates whether storage images require a format qualifier to be specified when reading from storage images. If this feature is not enabled, the &lt;code&gt;OpImageRead&lt;/code&gt; instruction &lt;strong&gt;must&lt;/strong&gt; not have an &lt;code&gt;OpTypeImage&lt;/code&gt; of &lt;code&gt;Unknown&lt;/code&gt;. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;StorageImageReadWithoutFormat&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3cec05a351ea4e8bc6f8c8c243d7b36424a1d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderStorageImageWriteWithoutFormat&lt;/code&gt; indicates whether storage images require a format qualifier to be specified when writing to storage images. If this feature is not enabled, the &lt;code&gt;OpImageWrite&lt;/code&gt; instruction &lt;strong&gt;must&lt;/strong&gt; not have an &lt;code&gt;OpTypeImage&lt;/code&gt; of &lt;code&gt;Unknown&lt;/code&gt;. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;StorageImageWriteWithoutFormat&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23446d08c203baebe0bd96391f86fd0dbb7da083" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderTessellationAndGeometryPointSize&lt;/code&gt; indicates whether the &lt;code&gt;PointSize&lt;/code&gt; built-in decoration is available in the tessellation control, tessellation evaluation, and geometry shader stages. If this feature is not enabled, members decorated with the &lt;code&gt;PointSize&lt;/code&gt; built-in decoration &lt;strong&gt;must&lt;/strong&gt; not be read from or written to and all points written from a tessellation or geometry shader will have a size of 1.0. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;TessellationPointSize&lt;/code&gt; capability for tessellation control and evaluation shaders, or if the shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;GeometryPointSize&lt;/code&gt; capability for geometry shaders. An implementation supporting this feature &lt;strong&gt;must&lt;/strong&gt; also support one or both of the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-features-tessellationShader&quot;&gt;&lt;code&gt;tessellationShader&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-features-geometryShader&quot;&gt;&lt;code&gt;geometryShader&lt;/code&gt;&lt;/a&gt; features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d22272bd6b3daa973a61c7bbac98f1f267710f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaderUniformBufferArrayDynamicIndexing&lt;/code&gt; indicates whether arrays of uniform buffers &lt;strong&gt;can&lt;/strong&gt; be indexed by &lt;em&gt;dynamically uniform&lt;/em&gt; integer expressions in shader code. If this feature is not enabled, resources with a descriptor type of &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be indexed only by constant integral expressions when aggregated into arrays in shader code. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;UniformBufferArrayDynamicIndexing&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bc8144099b51be10e78a974b0c877ebc6d86a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sharingMode&lt;/code&gt; is a &lt;a href=&quot;#VkSharingMode&quot;&gt;VkSharingMode&lt;/a&gt; value specifying the sharing mode of the buffer when it will be accessed by multiple queue families.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a277e95169bcc33e68a85deb6065828438a529a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sharingMode&lt;/code&gt; is a &lt;a href=&quot;#VkSharingMode&quot;&gt;VkSharingMode&lt;/a&gt; value specifying the sharing mode of the image when it will be accessed by multiple queue families.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b2fd037cfcd71e27801aed0deb28cda66fcc75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sharingMode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkSharingMode&quot;&gt;VkSharingMode&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7907712a8763e3c701d20acf8780bd2ed638a66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signalSemaphoreCount&lt;/code&gt; is the number of semaphores to be signaled once the commands specified in &lt;code&gt;pCommandBuffers&lt;/code&gt; have completed execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3b000695c540190d4ca64c7885b7c49166c8bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signalSemaphoreCount&lt;/code&gt; is the number of semaphores to be signaled once the sparse binding operations specified by the structure have completed execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017ed9571aedc3182841457ee9527cb41c467587" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is a size in bytes of the affected area of backing memory for &lt;code&gt;buffer&lt;/code&gt;, or &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt; to use the range from &lt;code&gt;offset&lt;/code&gt; to the end of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fb3a5aa6378cb10f883e780bd6003595b33abe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is either the size of range, or &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt; to affect the range from &lt;code&gt;offset&lt;/code&gt; to the end of the current mapping of the allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b3b4cae50950c04537de49886206dc8fa069fde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the byte size of the specialization constant value within the supplied data buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de8c2776ed6fdd4f77d850cfd51388f2adba0f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the number of bytes to copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac7e286023962b673e6baef8faaa35eb17807b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the number of bytes to fill, and &lt;strong&gt;must&lt;/strong&gt; be either a multiple of 4, or &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt; to fill the range from &lt;code&gt;offset&lt;/code&gt; to the end of the buffer. If &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt; is used and the remaining size of the buffer is not a multiple of 4, then the nearest smaller multiple is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96185bd9a7a958c0b8c341eb54c5770ed9e5bff9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the requested size of an allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110de0746154a17d10a3b4a588bbc3d965094a98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the size in bytes of the buffer to be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd7b9d78ade64d9340a6209de14f568bd7efeb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the size in bytes of the image subresource. &lt;code&gt;size&lt;/code&gt; includes any extra memory that is required based on &lt;code&gt;rowPitch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8d7df2f26f14d5b87099b31f7d16d4daa3d76f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the size in bytes of the requested allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac37a7bc4453d3404cfcaef7088e9ffd38773283" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the size of the memory range to map, or &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt; to map from &lt;code&gt;offset&lt;/code&gt; to the end of the allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f610b49240dac52d61016ea7df5ff6eeac3c3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the size of the memory region to be bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ca33e8d3f196ecd82f02fe487587852262743c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the size of the push constant range to update, in units of bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b4651f5b38d92e9e691b8eef6550e09fbabe59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the size, in bytes, of the memory allocation &lt;strong&gt;required&lt;/strong&gt; for the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ccd77d0078afaabcbc1b2cb72baf903e585f24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the total memory size in bytes in the heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd70bbb75781b3b8470a969964b7b5f9177bd62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;4&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cab4905ce5eae6bdf8417ae15f5195480bad177" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59dfde56ab728d67be278abe2706a8a621261b1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxPushConstantsSize&lt;/code&gt; minus &lt;code&gt;offset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4564bf67aeea53452449e94378f81310d1269c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to the size of &lt;code&gt;memory&lt;/code&gt; minus &lt;code&gt;memoryOffset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e567352363d0f217a3f841369f8ee658b8ed659" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to the size of the resource minus &lt;code&gt;resourceOffset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517935a1f10eb5af8b42ff9e1ebf99f8f3138d78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseAddressSpaceSize&lt;/code&gt; is the total amount of address space available, in bytes, for sparse memory resources. This is an upper bound on the sum of the size of all sparse resources, regardless of whether any memory is bound to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26365bfd7a119763b97e3ef2479ba5ec3aacb73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseBinding&lt;/code&gt; indicates whether resource memory &lt;strong&gt;can&lt;/strong&gt; be managed at opaque sparse block level instead of at the object level. If this feature is not enabled, resource memory &lt;strong&gt;must&lt;/strong&gt; be bound only on a per-object basis using the &lt;code&gt;vkBindBufferMemory&lt;/code&gt; and &lt;code&gt;vkBindImageMemory&lt;/code&gt; commands. In this case, buffers and images &lt;strong&gt;must&lt;/strong&gt; not be created with &lt;code&gt;VK_BUFFER_CREATE_SPARSE_BINDING_BIT&lt;/code&gt; and &lt;code&gt;VK_IMAGE_CREATE_SPARSE_BINDING_BIT&lt;/code&gt; set in the &lt;code&gt;flags&lt;/code&gt; member of the &lt;code&gt;VkBufferCreateInfo&lt;/code&gt; and &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structures, respectively. Otherwise resource memory &lt;strong&gt;can&lt;/strong&gt; be managed as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#sparsememory-sparseresourcefeatures&quot;&gt;Sparse Resource Features&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f81bfaf53e065350b9db079f94700a6cf14c0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseProperties&lt;/code&gt; is the &lt;a href=&quot;#VkPhysicalDeviceSparseProperties&quot;&gt;VkPhysicalDeviceSparseProperties&lt;/a&gt; structure which specifies various sparse related properties of the physical device. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#sparsememory-physicalprops&quot;&gt;Sparse Properties&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b066e1b275632b784483ebfd091052d4d4668b19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseResidency16Samples&lt;/code&gt; indicates whether the physical device &lt;strong&gt;can&lt;/strong&gt; access partially resident 2D images with 16 samples per pixel. If this feature is not enabled, images with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt; and &lt;code&gt;samples&lt;/code&gt; set to &lt;code&gt;VK_SAMPLE_COUNT_16_BIT&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be created with &lt;code&gt;VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; set in the &lt;code&gt;flags&lt;/code&gt; member of the &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a67a7b69f5044fd0cad616c7972f1d0568f5d7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseResidency2Samples&lt;/code&gt; indicates whether the physical device &lt;strong&gt;can&lt;/strong&gt; access partially resident 2D images with 2 samples per pixel. If this feature is not enabled, images with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt; and &lt;code&gt;samples&lt;/code&gt; set to &lt;code&gt;VK_SAMPLE_COUNT_2_BIT&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be created with &lt;code&gt;VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; set in the &lt;code&gt;flags&lt;/code&gt; member of the &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25538fef2e839eba8ac5a8f27a8a4a0e92e1844f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseResidency4Samples&lt;/code&gt; indicates whether the physical device &lt;strong&gt;can&lt;/strong&gt; access partially resident 2D images with 4 samples per pixel. If this feature is not enabled, images with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt; and &lt;code&gt;samples&lt;/code&gt; set to &lt;code&gt;VK_SAMPLE_COUNT_4_BIT&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be created with &lt;code&gt;VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; set in the &lt;code&gt;flags&lt;/code&gt; member of the &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a923b109a95fdb874c601c8191431072538bd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseResidency8Samples&lt;/code&gt; indicates whether the physical device &lt;strong&gt;can&lt;/strong&gt; access partially resident 2D images with 8 samples per pixel. If this feature is not enabled, images with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt; and &lt;code&gt;samples&lt;/code&gt; set to &lt;code&gt;VK_SAMPLE_COUNT_8_BIT&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be created with &lt;code&gt;VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; set in the &lt;code&gt;flags&lt;/code&gt; member of the &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca515d22377399c9f04a28f4fd9cbfe8e55935bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseResidencyAliased&lt;/code&gt; indicates whether the physical device &lt;strong&gt;can&lt;/strong&gt; correctly access data aliased into multiple locations. If this feature is not enabled, the &lt;code&gt;VK_BUFFER_CREATE_SPARSE_ALIASED_BIT&lt;/code&gt; and &lt;code&gt;VK_IMAGE_CREATE_SPARSE_ALIASED_BIT&lt;/code&gt; enum values &lt;strong&gt;must&lt;/strong&gt; not be used in &lt;code&gt;flags&lt;/code&gt; members of the &lt;code&gt;VkBufferCreateInfo&lt;/code&gt; and &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structures, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4b46cbe5f491c7b3aee93f218424b18641068e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseResidencyBuffer&lt;/code&gt; indicates whether the device &lt;strong&gt;can&lt;/strong&gt; access partially resident buffers. If this feature is not enabled, buffers &lt;strong&gt;must&lt;/strong&gt; not be created with &lt;code&gt;VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; set in the &lt;code&gt;flags&lt;/code&gt; member of the &lt;code&gt;VkBufferCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16afb28be6a9650421c50d720faf65325b7f9d8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseResidencyImage2D&lt;/code&gt; indicates whether the device &lt;strong&gt;can&lt;/strong&gt; access partially resident 2D images with 1 sample per pixel. If this feature is not enabled, images with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt; and &lt;code&gt;samples&lt;/code&gt; set to &lt;code&gt;VK_SAMPLE_COUNT_1_BIT&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be created with &lt;code&gt;VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; set in the &lt;code&gt;flags&lt;/code&gt; member of the &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb16e930345ff47113fd2b35bc93222369e2137" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparseResidencyImage3D&lt;/code&gt; indicates whether the device &lt;strong&gt;can&lt;/strong&gt; access partially resident 3D images. If this feature is not enabled, images with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_3D&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be created with &lt;code&gt;VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; set in the &lt;code&gt;flags&lt;/code&gt; member of the &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a790c0487cd3fe644d02a575f26f3d3322d2d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;specVersion&lt;/code&gt; is the Vulkan version the layer was written to, encoded as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fundamentals-versionnum&quot;&gt;API Version Numbers and Semantics&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb4d517f4a117869c078f5273bcfd7f6445ff4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;specVersion&lt;/code&gt; is the version of this extension. It is an integer, incremented with backward compatible changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4890531bd68284250d9fdf02824459f946f67b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcAccessMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkAccessFlagBits&quot;&gt;VkAccessFlagBits&lt;/a&gt; specifying a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-access-masks&quot;&gt;source access mask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff17bdb461e687599e7b0b5e73a020395a809759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcAccessMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkAccessFlagBits&quot;&gt;VkAccessFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c919c718ed697a97cf77980136516b29e6ba11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcAlphaBlendFactor&lt;/code&gt; selects which blend factor is used to determine the source factor S&lt;sub&gt;a&lt;/sub&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda77e8314d9d78c26044c1e2fbc6204f9fedd64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcAlphaBlendFactor&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkBlendFactor&quot;&gt;VkBlendFactor&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525ec8f915bf17c32c5511e7aebb4d724af29cf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcBinding&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid binding within &lt;code&gt;srcSet&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef36245b1e067996759fde56c7690092e599a2c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcBuffer&lt;/code&gt; is the source buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4727773e9317e61ce47f93cc3e9bc0962c61071" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkBuffer&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6f3ece011b111c4daabf77f35ec94adff5bc32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_BUFFER_USAGE_TRANSFER_SRC_BIT&lt;/code&gt; usage flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200869bca3cf5b8db6243bdabb7f0df5dd3591d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcCacheCount&lt;/code&gt; is the length of the &lt;code&gt;pSrcCaches&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fddef765c98b83d561b5eb45ada8794a91c5e1c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcCacheCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ed90cb82ce1b48389d0234b4c91a491dbd5a40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcColorBlendFactor&lt;/code&gt; selects which blend factor is used to determine the source factors (S&lt;sub&gt;r&lt;/sub&gt;,S&lt;sub&gt;g&lt;/sub&gt;,S&lt;sub&gt;b&lt;/sub&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8200a4ed263934023bc5716670201416a5aa4eaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcColorBlendFactor&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkBlendFactor&quot;&gt;VkBlendFactor&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39bbdf4d365d304df528d0e419e36b245077dbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImage&lt;/code&gt; and &lt;code&gt;dstImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with the same image format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa9ef793a71f71fca24d67afeffa6fe5922eafe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImage&lt;/code&gt; is the source image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18bde847fa1e3db08e9ea704494d7107f491f495" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkImage&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efacfaa47d95696d121089719884acddf9276ff0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have a sample count equal to &lt;code&gt;VK_SAMPLE_COUNT_1_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c1ca52ac2ec8eeeb102cc576e5eb24dc7303e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have a sample count equal to any valid sample count value other than &lt;code&gt;VK_SAMPLE_COUNT_1_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad47ac61805786963236a1399fed49e2d1d82f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_IMAGE_USAGE_TRANSFER_SRC_BIT&lt;/code&gt; usage flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e4a90f5973a2a35372a4a77e55c7eff6e54ae3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;samples&lt;/code&gt; value of &lt;code&gt;VK_SAMPLE_COUNT_1_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6925eb1a1ac0b41d672dba3e4b29af965ab8bbed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; use a format that supports &lt;code&gt;VK_FORMAT_FEATURE_BLIT_SRC_BIT&lt;/code&gt;, which is indicated by &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;linearTilingFeatures&lt;/code&gt; (for linearly tiled images) or &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;optimalTilingFeatures&lt;/code&gt; (for optimally tiled images) - as returned by &lt;code&gt;vkGetPhysicalDeviceFormatProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ed72b3b246c0f5881fb5c9343d43f6db2976fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImageLayout&lt;/code&gt; is the current layout of the source image subresource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db877e6c769dac1d39a5eb7b3d246bd657a881fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImageLayout&lt;/code&gt; is the layout of the source image subresources for the blit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a04f00ee60452524114419dd68fd69482ed9db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImageLayout&lt;/code&gt; is the layout of the source image subresources for the copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06de6d58b5ff2dd9005c8417474f33d400fe88d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImageLayout&lt;/code&gt; is the layout of the source image subresources for the resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2885d570c8bab3d7a9001a8770ccc10ccfd330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_GENERAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb491852f433d31f689843c5589d87f4a47c40ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7799555d72c01f44f9250772d535c27d53016cb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcImageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; specify the layout of the image subresources of &lt;code&gt;srcImage&lt;/code&gt; specified in &lt;code&gt;pRegions&lt;/code&gt; at the time this command is executed on a &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121a6df470bb1afcbf2c86526bc2f48574d85254" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset.x&lt;/code&gt; and (&lt;code&gt;extent.width&lt;/code&gt; + &lt;code&gt;srcOffset.x&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the source image subresource width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e315db8a2f0303e589a7e496f2275bafdd1c2a4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset.y&lt;/code&gt; and (&lt;code&gt;extent.height&lt;/code&gt; + &lt;code&gt;srcOffset.y&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the source image subresource height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53683b5ae8ea7a7e95d1fd858cc09ae5f350f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset.z&lt;/code&gt; and (&lt;code&gt;extent.depth&lt;/code&gt; + &lt;code&gt;srcOffset.z&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the source image subresource depth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a472b89bdadbb0a5866206d58c4c6af1f0d0eab7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset&lt;/code&gt; and &lt;code&gt;dstOffset&lt;/code&gt; select the initial x, y, and z offsets in texels of the sub-regions of the source and destination image data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c71d78073e066e32db8113391f688402080b12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset&lt;/code&gt; and &lt;code&gt;dstOffset&lt;/code&gt; select the initial x, y, and z offsets in texels of the sub-regions of the source and destination image data. &lt;code&gt;extent&lt;/code&gt; is the size in texels of the source image to resolve in &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;depth&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b799035eea16bbe22e4fb7b26c4fb460a0df268" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset&lt;/code&gt; is the starting offset in bytes from the start of &lt;code&gt;srcBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c623fdfc91fefff7ee97ad01305ae91db1405aa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset&lt;/code&gt;, &lt;code&gt;dstOffset&lt;/code&gt;, and &lt;code&gt;extent&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; respect the image transfer granularity requirements of the queue family that it will be submitted against, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-physical-device-enumeration&quot;&gt;Physical Device Enumeration&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac8c3e1a71964cc694a6b2871798b514f216d47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset&lt;/code&gt;[0].&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;srcOffset&lt;/code&gt;[1].&lt;code&gt;x&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the source image subresource width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a52a5ac00307bf38eef2b405cc6a2d01eae381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset&lt;/code&gt;[0].&lt;code&gt;y&lt;/code&gt; and &lt;code&gt;srcOffset&lt;/code&gt;[1].&lt;code&gt;y&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the source image subresource height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe3c85762a64f5a1fd00eb20e510c389389c683" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffset&lt;/code&gt;[0].&lt;code&gt;z&lt;/code&gt; and &lt;code&gt;srcOffset&lt;/code&gt;[1].&lt;code&gt;z&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the source image subresource depth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f16b9c6d2b92ed2a86afbbdac2824030e2a28d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcOffsets&lt;/code&gt; is an array of two &lt;a href=&quot;#VkOffset3D&quot;&gt;VkOffset3D&lt;/a&gt; structures specifying the bounds of the source region within &lt;code&gt;srcSubresource&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d4da5367780f8f99ee79b43e3b32412018684e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcQueueFamilyIndex&lt;/code&gt; is the source queue family for a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-queue-transfers&quot;&gt;queue family ownership transfer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa56e3fda596a1f7cc20b1515b0452169e83a98a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSet&lt;/code&gt;, &lt;code&gt;srcBinding&lt;/code&gt;, and &lt;code&gt;srcArrayElement&lt;/code&gt; are the source set, binding, and array element, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108388c8dc65789bdcf605363a8b84da35e3455a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSet&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkDescriptorSet&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a4492554d2e944055245b0dfb2004e47354fa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcStageMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; specifying the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages&quot;&gt;source stage mask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a40a7eee7e149548ff5bd4b349776bea0b1e723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcStageMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; specifying the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-masks&quot;&gt;source stage mask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84817f99f8c18172b4178891cad74582abedd9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcStageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52848981a913c12ad08573a23fbbd281baff6f1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcStageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be the bitwise OR of the &lt;code&gt;stageMask&lt;/code&gt; parameter used in previous calls to &lt;code&gt;vkCmdSetEvent&lt;/code&gt; with any of the members of &lt;code&gt;pEvents&lt;/code&gt; and &lt;code&gt;VK_PIPELINE_STAGE_HOST_BIT&lt;/code&gt; if any of the members of &lt;code&gt;pEvents&lt;/code&gt; was set using &lt;code&gt;vkSetEvent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b8f011dffdd20dda8ca00375d50e8a8fead3db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcStageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35682cef4f5ad63512efe40d2e7a5a06650934d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSubpass&lt;/code&gt; and &lt;code&gt;dstSubpass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not both be equal to &lt;code&gt;VK_SUBPASS_EXTERNAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcff3affd627626a8f91bbdbaa598f2f4b45462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSubpass&lt;/code&gt; is the subpass index of the first subpass in the dependency, or &lt;code&gt;VK_SUBPASS_EXTERNAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d6b2153393c0007e2f0ff5eb0872eaa3f8b8fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSubpass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;dstSubpass&lt;/code&gt;, unless one of them is &lt;code&gt;VK_SUBPASS_EXTERNAL&lt;/code&gt;, to avoid cyclic dependencies and ensure a valid execution order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19a8ec1205f00cea5ef3f9223d6c2f2d62ab032" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSubresource.baseArrayLayer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than and (&lt;code&gt;srcSubresource.layerCount&lt;/code&gt; + &lt;code&gt;srcSubresource.baseArrayLayer&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; be less than or equal to the number of layers in the source image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968f0f163af0cc684d88aa42c4079cb2aa26c5b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSubresource&lt;/code&gt; and &lt;code&gt;dstSubresource&lt;/code&gt; are &lt;a href=&quot;#VkImageSubresourceLayers&quot;&gt;VkImageSubresourceLayers&lt;/a&gt; structures specifying the image subresources of the images used for the source and destination image data, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8971843a769812bc2ecf5fcfeb3c025d69c1c90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSubresource&lt;/code&gt; and &lt;code&gt;dstSubresource&lt;/code&gt; are &lt;a href=&quot;#VkImageSubresourceLayers&quot;&gt;VkImageSubresourceLayers&lt;/a&gt; structures specifying the image subresources of the images used for the source and destination image data, respectively. Resolve of depth/stencil images is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a206e06f15d1fe68bcee9e3b00ed454f52fd9cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSubresource&lt;/code&gt; is the subresource to blit from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525d9ebd4d42aeb12856b21c064581d8cf60e9b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcSubresource&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkImageSubresourceLayers&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0daf133999ec3e775c0364518054483c2b9ec4da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stage&lt;/code&gt; is a &lt;a href=&quot;#VkPipelineShaderStageCreateInfo&quot;&gt;VkPipelineShaderStageCreateInfo&lt;/a&gt; describing the compute shader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa446d8742d77f65a477b19ad9f0537adc00dd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stage&lt;/code&gt; is a &lt;a href=&quot;#VkShaderStageFlagBits&quot;&gt;VkShaderStageFlagBits&lt;/a&gt; value specifying a single pipeline stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8515a990dfd4d5a23822726ef80c3a403f7d8ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stage&lt;/code&gt; points to a structure of type &lt;code&gt;VkPipelineShaderStageCreateInfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c24a586d355897f35a80e132e76da9fd7d02ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkShaderStageFlagBits&quot;&gt;VkShaderStageFlagBits&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b863ca562dc07112a03e2c21bba22391b1a21fe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkPipelineShaderStageCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5826ad0601aac178290e869eb1e4b37a2a2914" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;VK_SHADER_STAGE_ALL_GRAPHICS&lt;/code&gt;, or &lt;code&gt;VK_SHADER_STAGE_ALL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5044192f07fde034c30d157856a68dc473a359" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageCount&lt;/code&gt; is the number of entries in the &lt;code&gt;pStages&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abf9d7961302193e91b4ea1c9ba60e4fb655573" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db1a7f6db3348d34da38f370b47293649470b1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageFlags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkShaderStageFlagBits&quot;&gt;VkShaderStageFlagBits&lt;/a&gt; specifying the shader stages that will use the push constants in the updated range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24334ff760c7f4fd83d2fc4ff827ec67f9eb5478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageFlags&lt;/code&gt; is a set of stage flags describing the shader stages that will access a range of push constants. If a particular stage is not included in the range, then accessing members of that range of push constants from the corresponding shader stage will result in undefined data being read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995c397f0bfe14544124c17f6e6e06f0c2d93f82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageFlags&lt;/code&gt; member is a bitmask of &lt;a href=&quot;#VkShaderStageFlagBits&quot;&gt;VkShaderStageFlagBits&lt;/a&gt; specifying which pipeline shader stages &lt;strong&gt;can&lt;/strong&gt; access a resource for this binding. &lt;code&gt;VK_SHADER_STAGE_ALL&lt;/code&gt; is a shorthand specifying that all defined shader stages, including any additional stages defined by extensions, &lt;strong&gt;can&lt;/strong&gt; access the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b1a53902e305a9d4b45ef682c8393db1724530" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageFlags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkShaderStageFlagBits&quot;&gt;VkShaderStageFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b10864c3c8fa446ad0bd6ae6d234713bcf8b1e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageFlags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; match exactly the shader stages used in &lt;code&gt;layout&lt;/code&gt; for the range specified by &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c9b56566fbff7da053fc42adf8c2077e12c9ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageFlags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa1d346fcbb3363525ade3aab467439cb77b0e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; specifying the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages&quot;&gt;source stage mask&lt;/a&gt; used to determine when the &lt;code&gt;event&lt;/code&gt; is unsignaled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b00692769fad56222f2bf0dafc60b64dcb60261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageMask&lt;/code&gt; specifies the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages&quot;&gt;source stage mask&lt;/a&gt; used to determine when the &lt;code&gt;event&lt;/code&gt; is signaled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc5e5915224c689c9c615bd15594838e709335f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98baa9aa27a351ebff6ab77bb2de6aebbb83bff5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50eb2a1c12b804d49fc0e8a9b1a0a936f96111ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not include &lt;code&gt;VK_PIPELINE_STAGE_HOST_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4345662fed2e378244e2ab3d7a6f3ccb1fdd73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;standardSampleLocations&lt;/code&gt; indicates whether rasterization uses the standard sample locations as documented in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#primsrast-multisampling&quot;&gt;Multisampling&lt;/a&gt;. If set to &lt;code&gt;VK_TRUE&lt;/code&gt;, the implementation uses the documented sample locations. If set to &lt;code&gt;VK_FALSE&lt;/code&gt;, the implementation &lt;strong&gt;may&lt;/strong&gt; use different sample locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498385de225b8754ca9dfa9c9aa39ccfb4aa4bdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stencil&lt;/code&gt; is the clear value for the stencil aspect of the depth/stencil attachment. It is a 32-bit integer value which is converted to the attachment&amp;rsquo;s format by taking the appropriate number of LSBs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de8029443ac64c973270441df9a5d201ffb960b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stencilLoadOp&lt;/code&gt; is a &lt;a href=&quot;#VkAttachmentLoadOp&quot;&gt;VkAttachmentLoadOp&lt;/a&gt; value specifying how the contents of stencil components of the attachment are treated at the beginning of the subpass where it is first used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f853d13d9e8f0dcdf64250b5cc99085c89696e1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stencilLoadOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkAttachmentLoadOp&quot;&gt;VkAttachmentLoadOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de48aa6ac21865d297ed178fd62dbd5b11e2a6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stencilStoreOp&lt;/code&gt; is a &lt;a href=&quot;#VkAttachmentStoreOp&quot;&gt;VkAttachmentStoreOp&lt;/a&gt; value specifying how the contents of stencil components of the attachment are treated at the end of the last subpass where it is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d8cb14fefba6978fb9f27c16cb732f29ad7fed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stencilStoreOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkAttachmentStoreOp&quot;&gt;VkAttachmentStoreOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffc66beaeff712046add4bd6d1e3fefbdcf1d97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stencilTestEnable&lt;/code&gt; controls whether &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fragops-stencil&quot;&gt;stencil testing&lt;/a&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b233ec43b41aa3d0de1280e165d80d8d3057ddcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;storageImageSampleCounts&lt;/code&gt; is a bitmask&lt;sup&gt;1&lt;/sup&gt; of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; indicating the sample counts supported for all 2D images created with &lt;code&gt;VK_IMAGE_TILING_OPTIMAL&lt;/code&gt;, and &lt;code&gt;usage&lt;/code&gt; containing &lt;code&gt;VK_IMAGE_USAGE_STORAGE_BIT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898cd0c6af7e7ee1cc3c75cda8f6dc4c3fc2a195" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;storeOp&lt;/code&gt; is a &lt;a href=&quot;#VkAttachmentStoreOp&quot;&gt;VkAttachmentStoreOp&lt;/a&gt; value specifying how the contents of color and depth components of the attachment are treated at the end of the subpass where it is last used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78284522ad972371fa55bc654896234b2422ffff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;storeOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkAttachmentStoreOp&quot;&gt;VkAttachmentStoreOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28ea2231b9dfe5a78fad6c7520db8d93fe4ca1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strictLines&lt;/code&gt; indicates whether lines are rasterized according to the preferred method of rasterization. If set to &lt;code&gt;VK_FALSE&lt;/code&gt;, lines &lt;strong&gt;may&lt;/strong&gt; be rasterized under a relaxed set of rules. If set to &lt;code&gt;VK_TRUE&lt;/code&gt;, lines are rasterized as per the strict definition. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#primsrast-lines-basic&quot;&gt;Basic Line Segment Rasterization&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026be6640e498f71b8aa3d7ed7e059f5b4be86a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stride&lt;/code&gt; is the byte stride between successive sets of draw parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c636ede693430c05144f5e5be856a5052a9dd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stride&lt;/code&gt; is the distance in bytes between two consecutive elements within the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65624661078daaf42227a8fdcb6239ee14749a1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stride&lt;/code&gt; is the stride in bytes between results for individual queries within &lt;code&gt;dstBuffer&lt;/code&gt;. The required size of the backing memory for &lt;code&gt;dstBuffer&lt;/code&gt; is determined as described above for &lt;a href=&quot;#vkGetQueryPoolResults&quot;&gt;vkGetQueryPoolResults&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fbddde1a34c9b23176b1ebf5835aa81c815085" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stride&lt;/code&gt; is the stride in bytes between results for individual queries within &lt;code&gt;pData&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e98bc6d0fa1c64ea2892f77205e31a273ed395" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stride&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxVertexInputBindingStride&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b13a678e0ca47c07f22c980478413949407228" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subPixelInterpolationOffsetBits&lt;/code&gt; is the number of subpixel fractional bits that the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; offsets to the &lt;code&gt;InterpolateAtOffset&lt;/code&gt; extended instruction &lt;strong&gt;may&lt;/strong&gt; be rounded to as fixed-point values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23285e0f9d691cf0dbd8e3bc397a4691b413b706" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subPixelPrecisionBits&lt;/code&gt; is the number of bits of subpixel precision in framebuffer coordinates x&lt;sub&gt;f&lt;/sub&gt; and y&lt;sub&gt;f&lt;/sub&gt;. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#primsrast&quot;&gt;html/vkspec.html#primsrast&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa2ffde8070e2c2b1677befb8fb0a3b3d0691c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subTexelPrecisionBits&lt;/code&gt; is the number of bits of precision in the division along an axis of an image used for minification and magnification filters. 2&lt;sup&gt;&lt;code&gt;subTexelPrecisionBits&lt;/code&gt;&lt;/sup&gt; is the actual number of divisions along each axis of the image represented. The filtering hardware will snap to these locations when computing the filtered results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efc832b5d78e40d5e3f5cfb8696c2509507276c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;submitCount&lt;/code&gt; is the number of elements in the &lt;code&gt;pSubmits&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a17463c411c311b5baca967f592dc6b50bb37a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subpass&lt;/code&gt; is the index of the subpass in the render pass where this pipeline will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b2a5607f17ff4b5282dda6b199c8bd9668a65d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subpass&lt;/code&gt; is the index of the subpass within the render pass instance that the &lt;code&gt;VkCommandBuffer&lt;/code&gt; will be executed within. If the &lt;code&gt;VkCommandBuffer&lt;/code&gt; will not be executed within a render pass instance, &lt;code&gt;subpass&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8549ddc395029bdde9e85bac63d5b655bfe27bbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subpass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid subpass within &lt;code&gt;renderpass&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca905c735b85fba48850543ce8a617741dc9a51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subpassCount&lt;/code&gt; is the number of subpasses to create for this render pass. Subpasses are referred to by zero-based indices in the range [0,&lt;code&gt;subpassCount&lt;/code&gt;). A render pass &lt;strong&gt;must&lt;/strong&gt; have at least one subpass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57142b89886947353a2556687731ddf8ec8bc0e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subpassCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939f2ba3325290d480402c219153007c7cc9379c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subresource&lt;/code&gt; is the aspectMask and region of interest in the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7ff2a3c61db1d8f51c798820f2b0643112850e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subresource&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkImageSubresource&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527c314a242a22e95a3778eab2e247d95893ae9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subresource&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid image subresource for &lt;code&gt;image&lt;/code&gt; (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-image-views&quot;&gt;html/vkspec.html#resources-image-views&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2970fc7dac3a7bcfcf40b9106a87e059fd817927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subresourceRange&lt;/code&gt; and &lt;code&gt;viewType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be compatible with the image, as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-image-views-compatibility&quot;&gt;compatibility table&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81676d09c0bdc5bb77bb91ff40fb5e306793fae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subresourceRange&lt;/code&gt; describes the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-image-views&quot;&gt;image subresource range&lt;/a&gt; within &lt;code&gt;image&lt;/code&gt; that is affected by this barrier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c621a9a5ea7fa1cfb16a6d6224749c3ca58e7956" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subresourceRange&lt;/code&gt; is a &lt;a href=&quot;#VkImageSubresourceRange&quot;&gt;VkImageSubresourceRange&lt;/a&gt; selecting the set of mipmap levels and array layers to be accessible to the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def9de2a11b0af559d13be8a563c6425ff2ea211" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subresourceRange&lt;/code&gt;::&lt;code&gt;baseArrayLayer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the &lt;code&gt;arrayLayers&lt;/code&gt; specified in &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt; when &lt;code&gt;image&lt;/code&gt; was created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe90980c9c080abf86014d3482c389661d2c3448" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subresourceRange&lt;/code&gt;::&lt;code&gt;baseMipLevel&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the &lt;code&gt;mipLevels&lt;/code&gt; specified in &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt; when &lt;code&gt;image&lt;/code&gt; was created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ceedf82aa4e63e7a47bc6c2bcdd9b64583b406" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subresourceRange&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkImageSubresourceRange&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a618a71ca11914e40efb6294daef4e16888d39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tessellationShader&lt;/code&gt; indicates whether tessellation control and evaluation shaders are supported. If this feature is not enabled, the &lt;code&gt;VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT&lt;/code&gt;, &lt;code&gt;VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT&lt;/code&gt;, &lt;code&gt;VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT&lt;/code&gt;, &lt;code&gt;VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT&lt;/code&gt;, and &lt;code&gt;VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO&lt;/code&gt; enum values &lt;strong&gt;must&lt;/strong&gt; not be used. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;Tessellation&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df26bb0317839ee9b8f3805a5fafde23e2ff5598" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;textureCompressionASTC_LDR&lt;/code&gt; indicates whether all of the ASTC LDR compressed texture formats are supported. If this feature is enabled, then the &lt;code&gt;VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT&lt;/code&gt;, &lt;code&gt;VK_FORMAT_FEATURE_BLIT_SRC_BIT&lt;/code&gt; and &lt;code&gt;VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT&lt;/code&gt; features &lt;strong&gt;must&lt;/strong&gt; be supported in &lt;code&gt;optimalTilingFeatures&lt;/code&gt; for the following formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7d0cb84437a0ff53f445551c7f39e88cab20d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;textureCompressionBC&lt;/code&gt; indicates whether all of the BC compressed texture formats are supported. If this feature is enabled, then the &lt;code&gt;VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT&lt;/code&gt;, &lt;code&gt;VK_FORMAT_FEATURE_BLIT_SRC_BIT&lt;/code&gt; and &lt;code&gt;VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT&lt;/code&gt; features &lt;strong&gt;must&lt;/strong&gt; be supported in &lt;code&gt;optimalTilingFeatures&lt;/code&gt; for the following formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbe6f0d5eefe82f6f46f5b0b22d2b1f17fc39a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;textureCompressionETC2&lt;/code&gt; indicates whether all of the ETC2 and EAC compressed texture formats are supported. If this feature is enabled, then the &lt;code&gt;VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT&lt;/code&gt;, &lt;code&gt;VK_FORMAT_FEATURE_BLIT_SRC_BIT&lt;/code&gt; and &lt;code&gt;VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT&lt;/code&gt; features &lt;strong&gt;must&lt;/strong&gt; be supported in &lt;code&gt;optimalTilingFeatures&lt;/code&gt; for the following formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8c5035d6244ab021062b97b37e018cba2f9f01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tiling&lt;/code&gt; is a &lt;a href=&quot;#VkImageTiling&quot;&gt;VkImageTiling&lt;/a&gt; value specifying the image tiling, corresponding to &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt;::&lt;code&gt;tiling&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55485e1fe30a6d7036fee6afbdaaa63173fb9392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tiling&lt;/code&gt; is a &lt;a href=&quot;#VkImageTiling&quot;&gt;VkImageTiling&lt;/a&gt; value specifying the tiling arrangement of the data elements in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c04ad060696bc5e9681fb1702160fd65c538949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tiling&lt;/code&gt; is the tiling arrangement of the data elements in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a692c9279a434174fd9840fcc644e1eb1523d8f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tiling&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageTiling&quot;&gt;VkImageTiling&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde58f4e8f71580ef4d3c8114a04c40878b272bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; is the timeout period in units of nanoseconds. &lt;code&gt;timeout&lt;/code&gt; is adjusted to the closest value allowed by the implementation-dependent timeout accuracy, which &lt;strong&gt;may&lt;/strong&gt; be substantially longer than one nanosecond, and &lt;strong&gt;may&lt;/strong&gt; be longer than the requested period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d05a1a83ba30836eba64a0bbdae88676cc1163" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestampComputeAndGraphics&lt;/code&gt; indicates support for timestamps on all graphics and compute queues. If this limit is set to &lt;code&gt;VK_TRUE&lt;/code&gt;, all queues that advertise the &lt;code&gt;VK_QUEUE_GRAPHICS_BIT&lt;/code&gt; or &lt;code&gt;VK_QUEUE_COMPUTE_BIT&lt;/code&gt; in the &lt;code&gt;VkQueueFamilyProperties&lt;/code&gt;::&lt;code&gt;queueFlags&lt;/code&gt; support &lt;code&gt;VkQueueFamilyProperties&lt;/code&gt;::&lt;code&gt;timestampValidBits&lt;/code&gt; of at least 36. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-timestamps&quot;&gt;Timestamp Queries&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735e88a42f86ed907dd2303e3cec0ef2f7d5a143" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestampPeriod&lt;/code&gt; is the number of nanoseconds &lt;strong&gt;required&lt;/strong&gt; for a timestamp query to be incremented by 1. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-timestamps&quot;&gt;Timestamp Queries&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5703bdf3d272a88c80a70d693e4ff4394830d3b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestampValidBits&lt;/code&gt; is the unsigned integer count of meaningful bits in the timestamps written via &lt;code&gt;vkCmdWriteTimestamp&lt;/code&gt;. The valid range for the count is 36..64 bits, or a value of 0, indicating no support for timestamps. Bits outside the valid range are guaranteed to be zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967a5ff941d4489cbff6a3dc2a98ac496db5101e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;topology&lt;/code&gt; is a &lt;a href=&quot;#VkPrimitiveTopology&quot;&gt;VkPrimitiveTopology&lt;/a&gt; defining the primitive topology, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb64ca70b5bab5e7d542d8922b980c1785e73be1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;topology&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkPrimitiveTopology&quot;&gt;VkPrimitiveTopology&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5a589fb49b9c704d61e12a5eaae7d249f4eab8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; is a &lt;a href=&quot;#VkImageType&quot;&gt;VkImageType&lt;/a&gt; value specifying the image type, corresponding to &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt;::&lt;code&gt;imageType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b752915487d043b517b9179714b1348850bebf4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; is the dimensionality of image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c110578a1d8d1046ea0d260d9ad93a4586aa6ceb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; is the type of descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6619ea52d28c22a40916a217e89f8010f2eb045f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkDescriptorType&quot;&gt;VkDescriptorType&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2bcf21b6e699ee9aaa15d108b952ab826d5c34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageType&quot;&gt;VkImageType&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ac6dfc133e20c5988e3a76cab7a0f962ff945d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uint32&lt;/code&gt; are the color clear values when the format of the image or attachment is unsigned integer (&lt;code&gt;UINT&lt;/code&gt;). Unsigned integer values are converted to the format of the image by casting to the integer type with fewer bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f923d483a27dffeaa27767d6031a19ef891cbea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unnormalizedCoordinates&lt;/code&gt; controls whether to use unnormalized or normalized texel coordinates to address texels of the image. When set to &lt;code&gt;VK_TRUE&lt;/code&gt;, the range of the image coordinates used to lookup the texel is in the range of zero to the image dimensions for x, y and z. When set to &lt;code&gt;VK_FALSE&lt;/code&gt; the range of image coordinates is zero to one. When &lt;code&gt;unnormalizedCoordinates&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt;, samplers have the following requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42687a83b481b4fd12a53dee515bd54a0abf7176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usage&lt;/code&gt; is a bitmask describing the intended usage of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e018ad3ba04ffbd6df2956f7e29b6ea14eafc96f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usage&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkBufferUsageFlagBits&quot;&gt;VkBufferUsageFlagBits&lt;/a&gt; specifying allowed usages of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c1887cd6342d36a00109bce3e67690b1faf42f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usage&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkImageUsageFlagBits&quot;&gt;VkImageUsageFlagBits&lt;/a&gt; describing the intended usage of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f17a0f8eb10a26022ad1f5cb0b8103bf348f8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usage&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkImageUsageFlagBits&quot;&gt;VkImageUsageFlagBits&lt;/a&gt; specifying the intended usage of the image, corresponding to &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt;::&lt;code&gt;usage&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61bbd14b36f035ff57888716973d78b9867e409" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usage&lt;/code&gt; only includes &lt;code&gt;VK_IMAGE_USAGE_TRANSFER_SRC_BIT&lt;/code&gt; and/or &lt;code&gt;VK_IMAGE_USAGE_TRANSFER_DST_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cff615aede0457cd4e3180329c2d75ddef4a102" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkBufferUsageFlagBits&quot;&gt;VkBufferUsageFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f64b74d4187bc3da58eb11f4dc23ac5d4a9918f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkImageUsageFlagBits&quot;&gt;VkImageUsageFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7258d782bfea3b77c9ea2ec55488bbf6086bb11e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1cf4627c98e6b35dac6aed018df90756592f236" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variableMultisampleRate&lt;/code&gt; indicates whether all pipelines that will be bound to a command buffer during a subpass with no attachments &lt;strong&gt;must&lt;/strong&gt; have the same value for &lt;code&gt;VkPipelineMultisampleStateCreateInfo&lt;/code&gt;::&lt;code&gt;rasterizationSamples&lt;/code&gt;. If set to &lt;code&gt;VK_TRUE&lt;/code&gt;, the implementation supports variable multisample rates in a subpass with no attachments. If set to &lt;code&gt;VK_FALSE&lt;/code&gt;, then all pipelines bound in such a subpass &lt;strong&gt;must&lt;/strong&gt; have the same multisample rate. This has no effect in situations where a subpass uses any attachments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185b7c19876b6eeaeed95caafc591464571a844f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vendorID&lt;/code&gt; is a unique identifier for the &lt;em&gt;vendor&lt;/em&gt; (see below) of the physical device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615cce46a220c17960be587e200bd12902a7e35d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vertexAttributeDescriptionCount&lt;/code&gt; is the number of vertex attribute descriptions provided in &lt;code&gt;pVertexAttributeDescriptions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168c7320bf0f9ee79443961fe385c1dc6f64214d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vertexAttributeDescriptionCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxVertexInputAttributes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c36624b5b3a08c042a4a8dde8c4ad35eb715f0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vertexBindingDescriptionCount&lt;/code&gt; is the number of vertex binding descriptions provided in &lt;code&gt;pVertexBindingDescriptions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f09f2353c9050e1ea98178786d424345f45aaba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vertexBindingDescriptionCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxVertexInputBindings&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dc34a2ad6623a8507c37ab3d9ba521b79d3fa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vertexCount&lt;/code&gt; is the number of vertices to draw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5932f8faa0fd3884bdd016a38a804787d49715a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vertexOffset&lt;/code&gt; is the value added to the vertex index before indexing into the vertex buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b221e831799a2a75d1ac22fc0f5309e604327a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vertexPipelineStoresAndAtomics&lt;/code&gt; indicates whether storage buffers and images support stores and atomic operations in the vertex, tessellation, and geometry shader stages. If this feature is not enabled, all storage image, storage texel buffers, and storage buffer variables used by these stages in shader modules &lt;strong&gt;must&lt;/strong&gt; be decorated with the &lt;code&gt;NonWriteable&lt;/code&gt; decoration (or the &lt;code&gt;readonly&lt;/code&gt; memory qualifier in GLSL).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e3d1524f1cf2234d1dbac7bf09a4d59ba635e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_VIEW_TYPE_1D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77a26b5db6a05e43dc2094a12db6b129c6f65ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_VIEW_TYPE_1D_ARRAY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f2e44daa042bc2665ad0caea116610eb705a63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_VIEW_TYPE_2D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e349cf59e6e7bb438fdb1d9559ef54d46de011e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_VIEW_TYPE_2D_ARRAY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a330117f2069bca1cd4eb39d874fb5c5746e429" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_VIEW_TYPE_3D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61508743a16c7b068e45091740a834b7854a4b38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_VIEW_TYPE_CUBE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480e4d2d3ec508a444c5bff88bebcee1f098d252" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_VIEW_TYPE_CUBE_ARRAY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597d00443e83659bec6252efdeb1f67d039e6f28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewType&lt;/code&gt; is an &lt;a href=&quot;#VkImageViewType&quot;&gt;VkImageViewType&lt;/a&gt; value specifying the type of the image view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e493fd979d77eda3426e7576d3857b25e8d16b2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageViewType&quot;&gt;VkImageViewType&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1f9c0e423ec30513ca2d3014faba013e2a7e81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewportBoundsRange&lt;/code&gt;[2] is the [minimum, maximum] range that the corners of a viewport &lt;strong&gt;must&lt;/strong&gt; be contained in. This range &lt;strong&gt;must&lt;/strong&gt; be at least [-2 &amp;times; &lt;code&gt;size&lt;/code&gt;, 2 &amp;times; &lt;code&gt;size&lt;/code&gt; - 1], where &lt;code&gt;size&lt;/code&gt; = max(&lt;code&gt;maxViewportDimensions&lt;/code&gt;[0], &lt;code&gt;maxViewportDimensions&lt;/code&gt;[1]). See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#vertexpostproc-viewport&quot;&gt;Controlling the Viewport&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ef8a7583a04e55a682f75087248ff34876b3a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewportCount&lt;/code&gt; is the number of viewports used by the pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8f520ed7ef4c584df81b070348d53f4f2c0086" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewportCount&lt;/code&gt; is the number of viewports whose parameters are updated by the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7659cb8bd4e6963549b1b839ae0d501d82e6e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewportCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxViewports&lt;/code&gt;, inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b16103275d37826a531ff6f43911c55c48444d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewportCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3847a2117bfe45ceb78c27c2df21dd52670f1354" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewportSubPixelBits&lt;/code&gt; is the number of bits of subpixel precision for viewport bounds. The subpixel precision that floating-point viewport bounds are interpreted at is given by this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed342a276cc5e67f8d5ac29df8c4ec668c0b529" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdBindDescriptorSets&lt;/code&gt; causes the sets numbered [&lt;code&gt;firstSet&lt;/code&gt;.. &lt;code&gt;firstSet&lt;/code&gt;+&lt;code&gt;descriptorSetCount&lt;/code&gt;-1] to use the bindings stored in &lt;code&gt;pDescriptorSets&lt;/code&gt;[0..&lt;code&gt;descriptorSetCount&lt;/code&gt;-1] for subsequent rendering commands (either compute or graphics, according to the &lt;code&gt;pipelineBindPoint&lt;/code&gt;). Any bindings that were previously applied via these sets are no longer valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cd0769a2bac7218a71675e7a98ec1985036e5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdBlitImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be used for multisampled source or destination images. Use &lt;a href=&quot;#vkCmdResolveImage&quot;&gt;vkCmdResolveImage&lt;/a&gt; for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07e8c1f06a99e5310daff9f966815e41d96fb75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdClearAttachments&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; clear multiple regions of each attachment used in the current subpass of a render pass instance. This command &lt;strong&gt;must&lt;/strong&gt; be called only inside a render pass instance, and implicitly selects the images to clear based on the current framebuffer attachments and the command parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449ed82fda599782908d20cee6c021e7fea681ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdCopyImage&lt;/code&gt; allows copying between size-compatible compressed and uncompressed internal formats. Formats are size-compatible if the element size of the uncompressed format is equal to the element size (compressed texel block size) of the compressed format. Such a copy does not perform on-the-fly compression or decompression. When copying from an uncompressed format to a compressed format, each texel of uncompressed data of the source image is copied as a raw value to the corresponding compressed texel block of the destination image. When copying from a compressed format to an uncompressed format, each compressed texel block of the source image is copied as a raw value to the corresponding texel of uncompressed data in the destination image. Thus, for example, it is legal to copy between a 128-bit uncompressed format and a compressed format which has a 128-bit sized compressed texel block representing 4&amp;times;4 texels (using 8 bits per texel), or between a 64-bit uncompressed format and a compressed format which has a 64-bit sized compressed texel block representing 4&amp;times;4 texels (using 4 bits per texel).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b491b90eb159f2c385bd99b15335b9632138411" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdCopyImage&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; be used to copy image data between multisample images, but both images &lt;strong&gt;must&lt;/strong&gt; have the same number of samples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b904f0a7cbfa01992b60b5ec1dd233e4a2ab2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdCopyQueryPoolResults&lt;/code&gt; is considered to be a transfer operation, and its writes to buffer memory &lt;strong&gt;must&lt;/strong&gt; be synchronized using &lt;code&gt;VK_PIPELINE_STAGE_TRANSFER_BIT&lt;/code&gt; and &lt;code&gt;VK_ACCESS_TRANSFER_WRITE_BIT&lt;/code&gt; before using the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8fc87cef51a90eaa395c37b1eb6effde81e193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdCopyQueryPoolResults&lt;/code&gt; is guaranteed to see the effect of previous uses of &lt;code&gt;vkCmdResetQueryPool&lt;/code&gt; in the same queue, without any additional synchronization. Thus, the results will always reflect the most recent use of the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c6c994f89788a37556aed26174c11dd57d5486" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdDispatchIndirect&lt;/code&gt; behaves similarly to &lt;a href=&quot;#vkCmdDispatch&quot;&gt;vkCmdDispatch&lt;/a&gt; except that the parameters are read by the device from a buffer during execution. The parameters of the dispatch are encoded in a &lt;a href=&quot;#VkDispatchIndirectCommand&quot;&gt;VkDispatchIndirectCommand&lt;/a&gt; structure taken from &lt;code&gt;buffer&lt;/code&gt; starting at &lt;code&gt;offset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5088be95c564def1925cbd82c2881dc0b82451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdDrawIndexedIndirect&lt;/code&gt; behaves similarly to &lt;a href=&quot;#vkCmdDrawIndexed&quot;&gt;vkCmdDrawIndexed&lt;/a&gt; except that the parameters are read by the device from a buffer during execution. &lt;code&gt;drawCount&lt;/code&gt; draws are executed by the command, with parameters taken from &lt;code&gt;buffer&lt;/code&gt; starting at &lt;code&gt;offset&lt;/code&gt; and increasing by &lt;code&gt;stride&lt;/code&gt; bytes for each successive draw. The parameters of each draw are encoded in an array of &lt;a href=&quot;#VkDrawIndexedIndirectCommand&quot;&gt;VkDrawIndexedIndirectCommand&lt;/a&gt; structures. If &lt;code&gt;drawCount&lt;/code&gt; is less than or equal to one, &lt;code&gt;stride&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d5e3d5ab1efb79fb3c1ca6da5f38d70fd44e31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdDrawIndirect&lt;/code&gt; behaves similarly to &lt;a href=&quot;#vkCmdDraw&quot;&gt;vkCmdDraw&lt;/a&gt; except that the parameters are read by the device from a buffer during execution. &lt;code&gt;drawCount&lt;/code&gt; draws are executed by the command, with parameters taken from &lt;code&gt;buffer&lt;/code&gt; starting at &lt;code&gt;offset&lt;/code&gt; and increasing by &lt;code&gt;stride&lt;/code&gt; bytes for each successive draw. The parameters of each draw are encoded in an array of &lt;a href=&quot;#VkDrawIndirectCommand&quot;&gt;VkDrawIndirectCommand&lt;/a&gt; structures. If &lt;code&gt;drawCount&lt;/code&gt; is less than or equal to one, &lt;code&gt;stride&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127e02ed046cb1e2f55b0e242943c161f5200b8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdFillBuffer&lt;/code&gt; is treated as &amp;ldquo;transfer&amp;rdquo; operation for the purposes of synchronization barriers. The &lt;code&gt;VK_BUFFER_USAGE_TRANSFER_DST_BIT&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be specified in &lt;code&gt;usage&lt;/code&gt; of &lt;code&gt;VkBufferCreateInfo&lt;/code&gt; in order for the buffer to be compatible with &lt;code&gt;vkCmdFillBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1b0695f20ade15d1c550239a0accc985170a7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdUpdateBuffer&lt;/code&gt; is only allowed outside of a render pass. This command is treated as &amp;ldquo;transfer&amp;rdquo; operation, for the purposes of synchronization barriers. The &lt;code&gt;VK_BUFFER_USAGE_TRANSFER_DST_BIT&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be specified in &lt;code&gt;usage&lt;/code&gt; of &lt;a href=&quot;#VkBufferCreateInfo&quot;&gt;VkBufferCreateInfo&lt;/a&gt; in order for the buffer to be compatible with &lt;code&gt;vkCmdUpdateBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a42c5e6eb81540639de1ecef21055eccea6d25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCmdWriteTimestamp&lt;/code&gt; latches the value of the timer when all previous commands have completed executing as far as the specified pipeline stage, and writes the timestamp value to memory. When the timestamp value is written, the availability status of the query is set to available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9588ee916d2bf08db91120f9fc7ad7fdfa5f6bf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCreateDevice&lt;/code&gt; verifies that extensions and features requested in the &lt;code&gt;ppEnabledExtensionNames&lt;/code&gt; and &lt;code&gt;pEnabledFeatures&lt;/code&gt; members of &lt;code&gt;pCreateInfo&lt;/code&gt;, respectively, are supported by the implementation. If any requested extension is not supported, &lt;code&gt;vkCreateDevice&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; return &lt;code&gt;VK_ERROR_EXTENSION_NOT_PRESENT&lt;/code&gt;. If any requested feature is not supported, &lt;code&gt;vkCreateDevice&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; return &lt;code&gt;VK_ERROR_FEATURE_NOT_PRESENT&lt;/code&gt;. Support for extensions &lt;strong&gt;can&lt;/strong&gt; be checked before creating a device by querying &lt;a href=&quot;#vkEnumerateDeviceExtensionProperties&quot;&gt;vkEnumerateDeviceExtensionProperties&lt;/a&gt;. Support for features &lt;strong&gt;can&lt;/strong&gt; similarly be checked by querying &lt;a href=&quot;#vkGetPhysicalDeviceFeatures&quot;&gt;vkGetPhysicalDeviceFeatures&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b40c6c02f348532a7513c5b4b4edeff6794b52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkCreateInstance&lt;/code&gt; verifies that the requested layers exist. If not, &lt;code&gt;vkCreateInstance&lt;/code&gt; will return &lt;code&gt;VK_ERROR_LAYER_NOT_PRESENT&lt;/code&gt;. Next &lt;code&gt;vkCreateInstance&lt;/code&gt; verifies that the requested extensions are supported (e.g. in the implementation or in any enabled instance layer) and if any requested extension is not supported, &lt;code&gt;vkCreateInstance&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; return &lt;code&gt;VK_ERROR_EXTENSION_NOT_PRESENT&lt;/code&gt;. After verifying and enabling the instance layers and extensions the &lt;code&gt;VkInstance&lt;/code&gt; object is created and returned to the application. If a requested extension is only supported by a layer, both the layer and the extension need to be specified at &lt;code&gt;vkCreateInstance&lt;/code&gt; time for the creation to succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be669e23a1247fbe5172845507d190c6ab2bb50d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkDeviceWaitIdle&lt;/code&gt; is equivalent to calling &lt;code&gt;vkQueueWaitIdle&lt;/code&gt; for all queues owned by &lt;code&gt;device&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4fc0e2549d8e9c7126afa7284ed22f3313b0e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkFlushMappedMemoryRanges&lt;/code&gt; guarantees that host writes to the memory ranges described by &lt;code&gt;pMemoryRanges&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; be made available to device access, via &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-dependencies-available-and-visible&quot;&gt;availability operations&lt;/a&gt; from the &lt;code&gt;VK_ACCESS_HOST_WRITE_BIT&lt;/code&gt;&lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-access-types&quot;&gt;access type&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887b50c68424b30849cbbef2ff9a2b72888bfb69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkGetInstanceProcAddr&lt;/code&gt; itself is obtained in a platform- and loader- specific manner. Typically, the loader library will export this command as a function symbol, so applications &lt;strong&gt;can&lt;/strong&gt; link against the loader library, or load it dynamically and look up the symbol using platform-specific APIs. Loaders are encouraged to export function symbols for all other core Vulkan commands as well; if this is done, then applications that use only the core Vulkan commands have no need to use &lt;code&gt;vkGetInstanceProcAddr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7c3abd87ac29d9f2057b3457504ee1923ea0e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkGetPhysicalDeviceSparseImageFormatProperties&lt;/code&gt; returns an array of &lt;a href=&quot;#VkSparseImageFormatProperties&quot;&gt;VkSparseImageFormatProperties&lt;/a&gt;. Each element will describe properties for one set of image aspects that are bound simultaneously in the image. This is usually one element for each aspect in the image, but for interleaved depth/stencil images there is only one element describing the combined aspects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45c1ea2eb3955b2c710aa48e0f295d25bd0cc80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkInvalidateMappedMemoryRanges&lt;/code&gt; guarantees that device writes to the memory ranges described by &lt;code&gt;pMemoryRanges&lt;/code&gt;, which have been made visible to the &lt;code&gt;VK_ACCESS_HOST_WRITE_BIT&lt;/code&gt; and &lt;code&gt;VK_ACCESS_HOST_READ_BIT&lt;/code&gt;&lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-access-types&quot;&gt;access types&lt;/a&gt;, are made visible to the host. If a range of non-coherent memory is written by the host and then invalidated without first being flushed, its contents are undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ce6d0344252e9280d72cb09e6b12e9c8a75373" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkMapMemory&lt;/code&gt; does not check whether the device memory is currently in use before returning the host-accessible pointer. The application &lt;strong&gt;must&lt;/strong&gt; guarantee that any previously submitted command that writes to this range has completed before the host reads from or writes to that range, and that any previously submitted command that reads from that range has completed before the host writes to that region (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-submission-host-writes&quot;&gt;here&lt;/a&gt; for details on fulfilling such a guarantee). If the device memory was allocated without the &lt;code&gt;VK_MEMORY_PROPERTY_HOST_COHERENT_BIT&lt;/code&gt; set, these guarantees &lt;strong&gt;must&lt;/strong&gt; be made for an extended range: the application &lt;strong&gt;must&lt;/strong&gt; round down the start of the range to the nearest multiple of &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;nonCoherentAtomSize&lt;/code&gt;, and round the end of the range up to the nearest multiple of &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;nonCoherentAtomSize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84755ba7b94817679015f32b542cf0a87f0dee71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkMapMemory&lt;/code&gt; will fail if the implementation is unable to allocate an appropriately sized contiguous virtual address range, e.g. due to virtual address space fragmentation or platform limits. In such cases, &lt;code&gt;vkMapMemory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; return &lt;code&gt;VK_ERROR_MEMORY_MAP_FAILED&lt;/code&gt;. The application &lt;strong&gt;can&lt;/strong&gt; improve the likelihood of success by reducing the size of the mapped range and/or removing unneeded mappings using &lt;code&gt;VkUnmapMemory&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d4bc93852275a15d94ed184551f152b0b6c37b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkQueueBindSparse&lt;/code&gt; is a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-submission&quot;&gt;queue submission command&lt;/a&gt;, with each batch defined by an element of &lt;code&gt;pBindInfo&lt;/code&gt; as an instance of the &lt;a href=&quot;#VkBindSparseInfo&quot;&gt;VkBindSparseInfo&lt;/a&gt; structure. Batches begin execution in the order they appear in &lt;code&gt;pBindInfo&lt;/code&gt;, but &lt;strong&gt;may&lt;/strong&gt; complete out of order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3023e4156187270d3e89b739a6957db2dadd005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkQueueSubmit&lt;/code&gt; is a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-submission&quot;&gt;queue submission command&lt;/a&gt;, with each batch defined by an element of &lt;code&gt;pSubmits&lt;/code&gt; as an instance of the &lt;a href=&quot;#VkSubmitInfo&quot;&gt;VkSubmitInfo&lt;/a&gt; structure. Batches begin execution in the order they appear in &lt;code&gt;pSubmits&lt;/code&gt;, but &lt;strong&gt;may&lt;/strong&gt; complete out of order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15d5231b3974d134244088f4acd2835de2cd5be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vkQueueWaitIdle&lt;/code&gt; is equivalent to submitting a fence to a queue and waiting with an infinite timeout for that fence to signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402bd940d76e51d2321213a05c4a32615ae4bce3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;waitAll&lt;/code&gt; is the condition that &lt;strong&gt;must&lt;/strong&gt; be satisfied to successfully unblock the wait. If &lt;code&gt;waitAll&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt;, then the condition is that all fences in &lt;code&gt;pFences&lt;/code&gt; are signaled. Otherwise, the condition is that at least one fence in &lt;code&gt;pFences&lt;/code&gt; is signaled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024ab200027c783a32baea65032411e28f0ac111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;waitSemaphoreCount&lt;/code&gt; is the number of semaphores upon which to wait before executing the command buffers for the batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430f1aa4c3bdedb5408b4a39417cf60eeab7ac57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;waitSemaphoreCount&lt;/code&gt; is the number of semaphores upon which to wait before executing the sparse binding operations for the batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99209cb93576e25890c24360279997e68deb59a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wideLines&lt;/code&gt; indicates whether lines with width other than 1.0 are supported. If this feature is not enabled, the &lt;code&gt;lineWidth&lt;/code&gt; member of the &lt;code&gt;VkPipelineRasterizationStateCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be set to 1.0 unless the &lt;code&gt;VK_DYNAMIC_STATE_LINE_WIDTH&lt;/code&gt; dynamic state is enabled, and the &lt;code&gt;lineWidth&lt;/code&gt; parameter to &lt;code&gt;vkCmdSetLineWidth&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be set to 1.0. When this feature is supported, the range and granularity of supported line widths are indicated by the &lt;code&gt;lineWidthRange&lt;/code&gt; and &lt;code&gt;lineWidthGranularity&lt;/code&gt; members of the &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt; structure, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc792542292ef0514d7cbe3380195ba58dd46d30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; &amp;ge; 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58de11f2339b1dfca1db89c113a2625fb8ee18a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; = ci.&lt;code&gt;extent.width&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d715c48a09790cfee65aeb0ebb335144eff833" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are the viewport&amp;rsquo;s width and height, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9e237b6a2b9cdfa198de916c7a9d7b71db91b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; is the width of the extent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8657001d7d7d0c4ef6d3a46633ec55dce25e287" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; of a &lt;a href=&quot;#VkExtent3D&quot;&gt;VkExtent3D&lt;/a&gt; parameter &lt;strong&gt;must&lt;/strong&gt; be an integer multiple of A&lt;sub&gt;x&lt;/sub&gt;, or else &lt;code&gt;x&lt;/code&gt; + &lt;code&gt;width&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; equal the width of the image subresource corresponding to the parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d55a3af6063436fe35c1470eb2fe448e6d2a86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;layers&lt;/code&gt; define the dimensions of the framebuffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c871c8d155be4c925115f0b6e687f94fe580568" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0.0&lt;/code&gt; and less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxViewportDimensions&lt;/code&gt;[0]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3555ea4c867e25ab39a885f7cea4206b039f9031" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789180ea3361d7ab347a0f4258cd38e06d49b345" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxFramebufferWidth&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39bac334c81e557bc3c3678f3ee4f7b1330ab52b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writeMask&lt;/code&gt; is the new value to use as the stencil write mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7d3d3a0a036dbee429db9f4c2dfcc2114e5c25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writeMask&lt;/code&gt; selects the bits of the unsigned integer stencil values updated by the stencil test in the stencil framebuffer attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30d48e786b2ff9934238d0d101fc6320d6ce22e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the viewport&amp;rsquo;s upper left corner (x,y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3bd1ea4ec8d57daa922b7b2fbc3384830515f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; each be between &lt;code&gt;viewportBoundsRange&lt;/code&gt;[0] and &lt;code&gt;viewportBoundsRange&lt;/code&gt;[1], inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe2f1ff4aef95b41f2725a517ed8c8f47dae36b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; is the number of local workgroups to dispatch in the X dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba777b66e2537337b154a8ba2afe156e3b7b352" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; is the x offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95bb382ee022c7acd89c41a0c3df9092d6f5aac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; of a &lt;a href=&quot;#VkOffset3D&quot;&gt;VkOffset3D&lt;/a&gt; parameter &lt;strong&gt;must&lt;/strong&gt; be integer multiples of A&lt;sub&gt;x&lt;/sub&gt;, A&lt;sub&gt;y&lt;/sub&gt;, and A&lt;sub&gt;z&lt;/sub&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d829e3f4b1a97d53b1bcc821998f1702b48e02b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxComputeWorkGroupCount&lt;/code&gt;[0]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682feb78b045176f057f234f8ee5b748f361636b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; is the number of local workgroups to dispatch in the Y dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a67036744a3c5fc8094e1f239bd2f1c746bfee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; is the y offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f4fe131a658ab59a7c9ddb3ced272196e2b3bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxComputeWorkGroupCount&lt;/code&gt;[1]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8df87cb771049a6c7fc20f1d2e3bbe99efe4fc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;z&lt;/code&gt; is the number of local workgroups to dispatch in the Z dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb95ceee90810ee7867bdfb224849f5c9b78b96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;z&lt;/code&gt; is the z offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6800308394dfdbc9681e8c9a2325af68b05160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;z&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxComputeWorkGroupCount&lt;/code&gt;[2]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c95d9d48551cc776dfffa7419a49f0a3f8a541e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N&lt;/em&gt; &amp;ge; 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be337344ddd0ba6a92c60e95b0b50ba0e4cbf45" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Primitive topology&lt;/em&gt; determines how consecutive vertices are organized into primitives, and determines the type of primitive that is used at the beginning of the graphics pipeline. The effective topology for later stages of the pipeline is altered by tessellation or geometry shading (if either is in use) and depends on the execution modes of those shaders. Supported topologies are defined by &lt;a href=&quot;#VkPrimitiveTopology&quot;&gt;VkPrimitiveTopology&lt;/a&gt; and include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb51dc5e9a956a886110beb602a4bd8cfb76825" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shader modules&lt;/em&gt; contain &lt;em&gt;shader code&lt;/em&gt; and one or more entry points. Shaders are selected from a shader module by specifying an entry point as part of &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#pipelines&quot;&gt;pipeline&lt;/a&gt; creation. The stages of a pipeline &lt;strong&gt;can&lt;/strong&gt; use shaders that come from different modules. The shader code defining a shader module &lt;strong&gt;must&lt;/strong&gt; be in the SPIR-V format, as described by the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#spirvenv&quot;&gt;Vulkan Environment for SPIR-V&lt;/a&gt; appendix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb81b95656c80e6d55c17236c233100a4f6cdd5" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;buffer view&lt;/em&gt; represents a contiguous range of a buffer and a specific format to be used to interpret the data. Buffer views are used to enable shaders to access buffer contents interpreted as formatted data. In order to create a valid buffer view, the buffer &lt;strong&gt;must&lt;/strong&gt; have been created with at least one of the following usage flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28a68d55d632085a4556862840d4394c5476c63" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;descriptor pool&lt;/em&gt; maintains a pool of descriptors, from which descriptor sets are allocated. Descriptor pools are externally synchronized, meaning that the application &lt;strong&gt;must&lt;/strong&gt; not allocate and/or free descriptor sets from the same pool in multiple threads simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af12b263035b504d998f2ded1d763bfb762ec07" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;render pass&lt;/em&gt; represents a collection of attachments, subpasses, and dependencies between the subpasses, and describes how the attachments are used over the course of the subpasses. The use of a render pass in a command buffer is a &lt;em&gt;render pass instance&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09874f206140a748f8ae27c38e364f4cbf5180e" translate="yes" xml:space="preserve">
          <source>A = A&lt;sub&gt;d&lt;/sub&gt; &amp;times; D&lt;sub&gt;a&lt;/sub&gt; - A&lt;sub&gt;s0&lt;/sub&gt; &amp;times; S&lt;sub&gt;a&lt;/sub&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c52a4bb3bbbe553b20545bdedded39475b839b" translate="yes" xml:space="preserve">
          <source>A = A&lt;sub&gt;s0&lt;/sub&gt; &amp;times; S&lt;sub&gt;a&lt;/sub&gt; + A&lt;sub&gt;d&lt;/sub&gt; &amp;times; D&lt;sub&gt;a&lt;/sub&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d3faa19f9adc865ba011382050154f13136e6b" translate="yes" xml:space="preserve">
          <source>A = A&lt;sub&gt;s0&lt;/sub&gt; &amp;times; S&lt;sub&gt;a&lt;/sub&gt; - A&lt;sub&gt;d&lt;/sub&gt; &amp;times; D&lt;sub&gt;a&lt;/sub&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfbaa47dc75e472a3bdb20b48e3ef5fce817219" translate="yes" xml:space="preserve">
          <source>A = max(A&lt;sub&gt;s0&lt;/sub&gt;,A&lt;sub&gt;d&lt;/sub&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b4c36785dc254eff612c88bb5341a63d6dfeae" translate="yes" xml:space="preserve">
          <source>A = min(A&lt;sub&gt;s0&lt;/sub&gt;,A&lt;sub&gt;d&lt;/sub&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f1e66cf0119651945e7e765983ebf9a6fe454f" translate="yes" xml:space="preserve">
          <source>A Vulkan device operates on data in device memory via memory objects that are represented in the API by a &lt;code&gt;VkDeviceMemory&lt;/code&gt; handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5182d4319ce19aeb2a129c1d475d0dbef41ea82d" translate="yes" xml:space="preserve">
          <source>A buffer access is considered to be out of bounds if any of the following are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672ff2e98711b1b9e64ac699dc5c2d0ca6c07f55" translate="yes" xml:space="preserve">
          <source>A collection of flags is represented by a bitmask using the type &lt;code&gt;VkFlags&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4467c64147468497df7ebd907af0b9b7c15db72" translate="yes" xml:space="preserve">
          <source>A compatible descriptor set &lt;strong&gt;must&lt;/strong&gt; be bound for all set numbers that any shaders in a pipeline access, at the time that a draw or dispatch command is recorded to execute using that pipeline. However, if none of the shaders in a pipeline statically use any bindings with a particular set number, then no descriptor set need be bound for that set number, even if the pipeline layout includes a non-trivial descriptor set layout for that set number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53778850b96f58bfb637e7575045ac6f4ba24a89" translate="yes" xml:space="preserve">
          <source>A descriptor set layout object is defined by an array of zero or more descriptor bindings. Each individual descriptor binding is specified by a descriptor type, a count (array size) of the number of descriptors in the binding, a set of shader stages that &lt;strong&gt;can&lt;/strong&gt; access the binding, and (if using immutable samplers) an array of sampler descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d52853fcb373b4da0bcfdf1d1ec68481ed2191" translate="yes" xml:space="preserve">
          <source>A logical device is created as a &lt;em&gt;connection&lt;/em&gt; to a physical device. To create a logical device, call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76822f149a17042eaae8c31da52185b3cde5050" translate="yes" xml:space="preserve">
          <source>A queue family &lt;strong&gt;can&lt;/strong&gt; take ownership of an image subresource or buffer range of a resource created with &lt;code&gt;VK_SHARING_MODE_EXCLUSIVE&lt;/code&gt;, without an ownership transfer, in the same way as for a resource that was just created; however, taking ownership in this way has the effect that the contents of the image subresource or buffer range are undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d872115769fafdb2b629931e49eda06fa141f78f" translate="yes" xml:space="preserve">
          <source>A secondary command buffer &lt;strong&gt;must&lt;/strong&gt; not be directly submitted to a queue. Instead, secondary command buffers are recorded to execute as part of a primary command buffer with the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e5bd8b5ea9257bbe26fd4c1209349c82229984" translate="yes" xml:space="preserve">
          <source>A shader module &lt;strong&gt;can&lt;/strong&gt; be destroyed while pipelines created using its shaders are still in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21431c62fd9f6bbab763e37ce99d4a6b2688f41" translate="yes" xml:space="preserve">
          <source>A three-dimensional extent is defined by the structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189694a47e86ba18ca87f7401824a1a86c15d72e" translate="yes" xml:space="preserve">
          <source>A three-dimensional offset is defined by the structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb5f040a4de692217085887e2f86385c1c4ec9e" translate="yes" xml:space="preserve">
          <source>A two-dimensional extent is defined by the structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db868d96b3e0f9388fae6b519350e2f8df9a6377" translate="yes" xml:space="preserve">
          <source>A two-dimensional offsets is defined by the structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3faf13b9d6fbc1c559ec3dd84614b96ac1b6d0a1" translate="yes" xml:space="preserve">
          <source>A valid compute pipeline &lt;strong&gt;must&lt;/strong&gt; be bound to the current command buffer with &lt;code&gt;VK_PIPELINE_BIND_POINT_COMPUTE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79cf71d591528a038136179aa1eb23ce2ad0bc3" translate="yes" xml:space="preserve">
          <source>A valid graphics pipeline &lt;strong&gt;must&lt;/strong&gt; be bound to the current command buffer with &lt;code&gt;VK_PIPELINE_BIND_POINT_GRAPHICS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8264abc0074301d360cee715d821c56e6e7fc87" translate="yes" xml:space="preserve">
          <source>A&lt;sub&gt;c&lt;/sub&gt;</source>
          <target state="translated">A&lt;sub&gt;c&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="4c0da768e26e03630278e7ccd8c1eb9706e67ba5" translate="yes" xml:space="preserve">
          <source>A&lt;sub&gt;d&lt;/sub&gt;</source>
          <target state="translated">A&lt;sub&gt;d&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="b66b1aa9b4162070e376ff817dc7aea095e55307" translate="yes" xml:space="preserve">
          <source>A&lt;sub&gt;s0&lt;/sub&gt;</source>
          <target state="translated">A&lt;sub&gt;s0&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="bd347e1899aede95c3b716a33ba611104b4f693c" translate="yes" xml:space="preserve">
          <source>A&lt;sub&gt;s1&lt;/sub&gt;</source>
          <target state="translated">A&lt;sub&gt;s1&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="ea1b71e83db0090bfc5f2ebbb0d693981e78e1eb" translate="yes" xml:space="preserve">
          <source>Access flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e80ed3b4d0a31268db930cf3121c13663967cf7" translate="yes" xml:space="preserve">
          <source>Access to descriptor sets from a pipeline is accomplished through a &lt;em&gt;pipeline layout&lt;/em&gt;. Zero or more descriptor set layouts and zero or more push constant ranges are combined to form a pipeline layout object which describes the complete set of resources that &lt;strong&gt;can&lt;/strong&gt; be accessed by a pipeline. The pipeline layout represents a sequence of descriptor sets with each having a specific layout. This sequence of layouts is used to determine the interface between shader stages and shader resources. Each pipeline is created using a pipeline layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456f126c8ec66126d55ebb651549021097199eb5" translate="yes" xml:space="preserve">
          <source>Access types that &lt;strong&gt;can&lt;/strong&gt; be set in an access mask include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300c2efbb2f787dd7ccf925ce4b65eaceeca794f" translate="yes" xml:space="preserve">
          <source>Additional information about fence and semaphore operation is described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization&quot;&gt;the synchronization chapter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fa60eda8395860761e440284a52c5b4b1080b8" translate="yes" xml:space="preserve">
          <source>Additional information about the pool is passed in an instance of the &lt;code&gt;VkDescriptorPoolCreateInfo&lt;/code&gt; structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab809087112954a1ae2f8b60bc99437e761b487" translate="yes" xml:space="preserve">
          <source>After a successful call to &lt;code&gt;vkFreeDescriptorSets&lt;/code&gt;, all descriptor sets in &lt;code&gt;pDescriptorSets&lt;/code&gt; are invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250031914258c66f2576e0ec92cd352e0a1bcdae" translate="yes" xml:space="preserve">
          <source>After beginning a query, that query is considered &lt;em&gt;active&lt;/em&gt; within the command buffer it was called in until that same query is ended. Queries active in a primary command buffer when secondary command buffers are executed are considered active for those secondary command buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356ec60e12a4a36efdf7cad0c9188df18997dbed" translate="yes" xml:space="preserve">
          <source>After beginning a render pass instance, the command buffer is ready to record the commands for the first subpass of that render pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b757f190fbee9851431e3c412d15fc438677b35d" translate="yes" xml:space="preserve">
          <source>After filtering, the float values are first clamped and then cast to the destination image format. In case of sRGB destination format, linear RGB values are converted to nonlinear representation before writing the pixel to the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807e4c8fb1b120ae9ac0a047e8e2b17342b6928c" translate="yes" xml:space="preserve">
          <source>After transitioning to the next subpass, the application &lt;strong&gt;can&lt;/strong&gt; record the commands for that subpass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4c6747c1fa0ac09dccfb88c4f5b932363f99ff" translate="yes" xml:space="preserve">
          <source>After verifying and enabling the extensions the &lt;code&gt;VkDevice&lt;/code&gt; object is created and returned to the application. If a requested extension is only supported by a layer, both the layer and the extension need to be specified at &lt;code&gt;vkCreateInstance&lt;/code&gt; time for the creation to succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7067b0285e3d26689c0d4c8f7d4b7a6c5addb61" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-submission&quot;&gt;queue submission&lt;/a&gt; commands that refer to &lt;code&gt;fence&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fbc35b5f8dc9ec56154a5e7dfdca6b1b847c37" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#extended-functionality-extensions-dependencies&quot;&gt;required extensions&lt;/a&gt; for each extension in the &lt;a href=&quot;#VkDeviceCreateInfo&quot;&gt;VkDeviceCreateInfo&lt;/a&gt;::&lt;code&gt;ppEnabledExtensionNames&lt;/code&gt; list &lt;strong&gt;must&lt;/strong&gt; also be present in that list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b114823970202d636fe6e9835afb02f14babca7a" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#extended-functionality-extensions-dependencies&quot;&gt;required extensions&lt;/a&gt; for each extension in the &lt;a href=&quot;#VkInstanceCreateInfo&quot;&gt;VkInstanceCreateInfo&lt;/a&gt;::&lt;code&gt;ppEnabledExtensionNames&lt;/code&gt; list &lt;strong&gt;must&lt;/strong&gt; also be present in that list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4424281229025d0e9b05d0e15472a475c42d670c" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;VkCommandBuffer&lt;/code&gt; objects allocated from &lt;code&gt;commandPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;pending state&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4072786d98f8253808b8bf4695abd10861461cef" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;VkCommandBuffer&lt;/code&gt; objects allocated from &lt;code&gt;commandPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;pending state&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641684047247839802df1e34a7701f2a982a11c0" translate="yes" xml:space="preserve">
          <source>All attachments in &lt;code&gt;pColorAttachments&lt;/code&gt; that are not &lt;code&gt;VK_ATTACHMENT_UNUSED&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have the same sample count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a73c7a1fc7e6165e54e10d3d5997d98b13fecb8" translate="yes" xml:space="preserve">
          <source>All child objects created on &lt;code&gt;device&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been destroyed prior to destroying &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cd1df50e11efc41f998068df9968620942f8bd" translate="yes" xml:space="preserve">
          <source>All child objects created using &lt;code&gt;instance&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been destroyed prior to destroying &lt;code&gt;instance&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5fcb1f0c64210985e1261bf255c34d88aa5ee21" translate="yes" xml:space="preserve">
          <source>All commands that are allowed on a queue that supports transfer operations are also allowed on a queue that supports either graphics or compute operations. Thus, if the capabilities of a queue family include &lt;code&gt;VK_QUEUE_GRAPHICS_BIT&lt;/code&gt; or &lt;code&gt;VK_QUEUE_COMPUTE_BIT&lt;/code&gt;, then reporting the &lt;code&gt;VK_QUEUE_TRANSFER_BIT&lt;/code&gt; capability separately for that queue family is &lt;strong&gt;optional&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fc629b0938f7ca737900df9e8a794e1a65d5ca" translate="yes" xml:space="preserve">
          <source>All consecutive bindings updated via a single &lt;code&gt;VkWriteDescriptorSet&lt;/code&gt; structure, except those with a &lt;code&gt;descriptorCount&lt;/code&gt; of zero, &lt;strong&gt;must&lt;/strong&gt; all either use immutable samplers or &lt;strong&gt;must&lt;/strong&gt; all not use immutable samplers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0545f420f4f0b8c618880ced1f9d2671abeb9dac" translate="yes" xml:space="preserve">
          <source>All consecutive bindings updated via a single &lt;code&gt;VkWriteDescriptorSet&lt;/code&gt; structure, except those with a &lt;code&gt;descriptorCount&lt;/code&gt; of zero, &lt;strong&gt;must&lt;/strong&gt; have identical &lt;code&gt;descriptorType&lt;/code&gt; and &lt;code&gt;stageFlags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53143f6394dfe5e5754ed9ff7c226cf1e86c4488" translate="yes" xml:space="preserve">
          <source>All elements of &lt;code&gt;pBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with the &lt;code&gt;VK_BUFFER_USAGE_VERTEX_BUFFER_BIT&lt;/code&gt; flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69663cddfb5ca22ee04d32decaeddece70f3f43c" translate="yes" xml:space="preserve">
          <source>All elements of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;pending state&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f51d3a25368c4ceb5cbf81d44e17e05d95e8895" translate="yes" xml:space="preserve">
          <source>All elements of &lt;code&gt;pOffsets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the size of the corresponding element in &lt;code&gt;pBuffers&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ab0976398fd1abd4d46728c85e7188d5c211ac" translate="yes" xml:space="preserve">
          <source>All elements of &lt;code&gt;pVertexAttributeDescriptions&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; describe distinct attribute locations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5585a6fd6677f865604a2b47fd5e154a72053e2b" translate="yes" xml:space="preserve">
          <source>All elements of &lt;code&gt;pVertexBindingDescriptions&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; describe distinct binding numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c092cf63d5d921e894f85ea5badd14a43bf5bc3d" translate="yes" xml:space="preserve">
          <source>All elements of the &lt;code&gt;pWaitSemaphores&lt;/code&gt; member of all elements of &lt;code&gt;pBindInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be semaphores that are signaled, or have &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-semaphores-signaling&quot;&gt;semaphore signal operations&lt;/a&gt; previously submitted for execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24fc8df2538de422ebbd50f639235520267292b5" translate="yes" xml:space="preserve">
          <source>All elements of the &lt;code&gt;pWaitSemaphores&lt;/code&gt; member of all elements of &lt;code&gt;pSubmits&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be semaphores that are signaled, or have &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-semaphores-signaling&quot;&gt;semaphore signal operations&lt;/a&gt; previously submitted for execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b02b0ddc85bbca3ff88c9906dd36ede48b3f65f" translate="yes" xml:space="preserve">
          <source>All queries made &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-operation-active&quot;&gt;active&lt;/a&gt; during the recording of &lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been made inactive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3baf7fca3cab6d6b8d1c63dd66e5eb5a6a0630ac" translate="yes" xml:space="preserve">
          <source>All return codes in Vulkan are reported via &lt;a href=&quot;#VkResult&quot;&gt;VkResult&lt;/a&gt; return values. The possible codes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82da459e48868b304cca21799ad834c8f3e29656" translate="yes" xml:space="preserve">
          <source>All submitted batches that refer to &lt;code&gt;semaphore&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abbe386965864851f19ad98e47eedab940286cab" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;buffer&lt;/code&gt;, either directly or via a &lt;code&gt;VkBufferView&lt;/code&gt;, &lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d21fd36fb93ab3cafc7b1cd25c0da16849e178" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;bufferView&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fabdde80def2a01ca36b6dadfbcc5b7f74f688d" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;descriptorPool&lt;/code&gt; (via any allocated descriptor sets) &lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23dd9e226612f9b2ba0d0132c0fad12a067ff2f" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;event&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc911ae198a3fe8341ef8b43705351a4152187a" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;framebuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71db62c318eef6437c23601b653d945603549cfe" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;image&lt;/code&gt;, either directly or via a &lt;code&gt;VkImageView&lt;/code&gt;, &lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4b70f71f05ebd4510ec2ecb08ca26da999ae7e" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;imageView&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2547f3d8145ed467b787fe638218ef84daf4cc" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;memory&lt;/code&gt; (via images or buffers) &lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f191428fd9d98a6087e66ccedf12e461f67336" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;pipeline&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0246634e0a40753514ef78ef881969cb6dc672" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;queryPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad80ef2338e1715c76141dfa9d76eb3ac90ceb6d" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;renderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457731c6c57552e2523bd186c6a590e261917de5" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to &lt;code&gt;sampler&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af9852d48839a33fc51780c3adb47111462aa51" translate="yes" xml:space="preserve">
          <source>All submitted commands that refer to any element of &lt;code&gt;pDescriptorSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386cdef43e9bc5ae8803404ae62f1cae9a2e669c" translate="yes" xml:space="preserve">
          <source>All uses of &lt;code&gt;descriptorPool&lt;/code&gt; (via any allocated descriptor sets) &lt;strong&gt;must&lt;/strong&gt; have completed execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff09f6505c06eff4b53e5fde3ce8cb7aaf88f4e" translate="yes" xml:space="preserve">
          <source>All values returned from a Vulkan implementation in a &lt;code&gt;VkBool32&lt;/code&gt; will be either &lt;code&gt;VK_TRUE&lt;/code&gt; or &lt;code&gt;VK_FALSE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5cf6fcd8575aafaa5c767817f368eb0adb4a908" translate="yes" xml:space="preserve">
          <source>All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point&amp;rsquo;s interface &lt;strong&gt;must&lt;/strong&gt; have valid buffers bound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6b576a664be9a80287691fc3bd9e5165ad46e4" translate="yes" xml:space="preserve">
          <source>Allocations returned by &lt;code&gt;vkAllocateMemory&lt;/code&gt; are guaranteed to meet any alignment requirement by the implementation. For example, if an implementation requires 128 byte alignment for images and 64 byte alignment for buffers, the device memory returned through this mechanism would be 128-byte aligned. This ensures that applications &lt;strong&gt;can&lt;/strong&gt; correctly suballocate objects of different types (with potentially different alignment requirements) in the same memory object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086261a23e23c080c9cf1a33c1d3d2ea6eadbb74" translate="yes" xml:space="preserve">
          <source>Allocators are provided by the application as a pointer to a &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f03ae04b3ac17e1b49fe6c1e380504898cb0b3" translate="yes" xml:space="preserve">
          <source>Alpha Blend Factor (S&lt;sub&gt;a&lt;/sub&gt; or D&lt;sub&gt;a&lt;/sub&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d22940587b0c8c3abc014a4f38aa8dcbb13fc5" translate="yes" xml:space="preserve">
          <source>Alpha Component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b58ffaac9fe167747eec7b614cb897767c64373" translate="yes" xml:space="preserve">
          <source>An &amp;ldquo;available extension&amp;rdquo; is an extension function supported by any of the loader, driver or layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3208a8ae3afdc4f0ace5b067411287c52ff762" translate="yes" xml:space="preserve">
          <source>An execution dependency with only &lt;code&gt;VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT&lt;/code&gt; in the destination stage mask will only prevent that stage from executing in subsequently submitted commands. As this stage does not perform any actual execution, this is not observable - in effect, it does not delay processing of subsequent commands. Similarly an execution dependency with only &lt;code&gt;VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT&lt;/code&gt; in the source stage mask will effectively not wait for any prior commands to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322444d3bb52c341f429ca0454f292dc242f315b" translate="yes" xml:space="preserve">
          <source>Any</source>
          <target state="translated">Any</target>
        </trans-unit>
        <trans-unit id="e106874337229d15f4354e106f82900ed3f5a7ff" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-secondary&quot;&gt;secondary command buffers recorded&lt;/a&gt; into any given element of the &lt;code&gt;pCommandBuffers&lt;/code&gt; member of any element of &lt;code&gt;pSubmits&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;pending or executable state&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2e818d339cea5bc3752df3005a4f2707dcd4aa" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;VkImageView&lt;/code&gt; being sampled with &lt;code&gt;VK_FILTER_LINEAR&lt;/code&gt; as a result of this command &lt;strong&gt;must&lt;/strong&gt; be of a format which supports linear filtering, as specified by the &lt;code&gt;VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT&lt;/code&gt; flag in &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;linearTilingFeatures&lt;/code&gt; (for a linear image) or &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;optimalTilingFeatures&lt;/code&gt;(for an optimally tiled image) returned by &lt;code&gt;vkGetPhysicalDeviceFormatProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fefa93bbd3dfe0dbb198be7a986765e2a8224ab1" translate="yes" xml:space="preserve">
          <source>Any access flag included in &lt;code&gt;dstAccessMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be supported by one of the pipeline stages in &lt;code&gt;dstStageMask&lt;/code&gt;, as specified in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-access-types-supported&quot;&gt;table of supported access types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a7277c77735d22c4389acccb2fd0649df3d77f" translate="yes" xml:space="preserve">
          <source>Any access flag included in &lt;code&gt;srcAccessMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be supported by one of the pipeline stages in &lt;code&gt;srcStageMask&lt;/code&gt;, as specified in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-access-types-supported&quot;&gt;table of supported access types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fa513fd570d14382d07f70f62fa796542a8d4d" translate="yes" xml:space="preserve">
          <source>Any calls to &lt;a href=&quot;#vkCmdSetEvent&quot;&gt;vkCmdSetEvent&lt;/a&gt;, &lt;a href=&quot;#vkCmdResetEvent&quot;&gt;vkCmdResetEvent&lt;/a&gt; or &lt;a href=&quot;#vkCmdWaitEvents&quot;&gt;vkCmdWaitEvents&lt;/a&gt; that have been recorded into any of the command buffer elements of the &lt;code&gt;pCommandBuffers&lt;/code&gt; member of any element of &lt;code&gt;pSubmits&lt;/code&gt;, &lt;strong&gt;must&lt;/strong&gt; not reference any &lt;a href=&quot;#VkEvent&quot;&gt;VkEvent&lt;/a&gt; that is referenced by any of those commands in a command buffer that has been submitted to another queue and is still in the &lt;em&gt;pending state&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf57e837b0a85df3d33e8ed676ffbad2f1e32c5" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pAttachments&lt;/code&gt; that is used as a color attachment or resolve attachment by &lt;code&gt;renderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;usage&lt;/code&gt; value including &lt;code&gt;VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e8ed8c3a60038fc372550b2d01cc7831d2ae9f" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pAttachments&lt;/code&gt; that is used as a depth/stencil attachment by &lt;code&gt;renderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;usage&lt;/code&gt; value including &lt;code&gt;VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c4268343e5855c4f7e2f82e924130588a8a243" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pAttachments&lt;/code&gt; that is used as an input attachment by &lt;code&gt;renderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;usage&lt;/code&gt; value including &lt;code&gt;VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4327327b8baf62bb48dedf024600127d021cbd7d" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;samples&lt;/code&gt; value that matches the &lt;code&gt;samples&lt;/code&gt; value specified by the corresponding &lt;code&gt;VkAttachmentDescription&lt;/code&gt; in &lt;code&gt;renderPass&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3210f34d9e854bde9ed6a98bb385c2d3314ea5" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with an &lt;a href=&quot;#VkFormat&quot;&gt;VkFormat&lt;/a&gt; value that matches the &lt;a href=&quot;#VkFormat&quot;&gt;VkFormat&lt;/a&gt; specified by the corresponding &lt;code&gt;VkAttachmentDescription&lt;/code&gt; in &lt;code&gt;renderPass&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65cedae232b3c494031e918586223a4f07211de" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with the identity swizzle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33b34fcd13aab4e5e19bcf913f3d3e214769755" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have dimensions at least as large as the corresponding framebuffer dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2643856f4d4cfe62ee40b537074b17374115d91" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; only specify a single mip level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3579406ecc0e7ace3af38d6c27e81ef5bc522e7e" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;pending or executable state&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a213f2446b5000d48991795bc7956ff68cbed5d5" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been allocated from a &lt;code&gt;VkCommandPool&lt;/code&gt; that was created for the same queue family as the &lt;code&gt;VkCommandPool&lt;/code&gt; from which &lt;code&gt;commandBuffer&lt;/code&gt; was allocated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad5aa9b91040e3446a032265f4ba8a2a3bfe9b5" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been allocated with a &lt;code&gt;level&lt;/code&gt; of &lt;code&gt;VK_COMMAND_BUFFER_LEVEL_SECONDARY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360a8f2501ae2c4ad7b790451a69831d7f0c5608" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not begin any query types that are &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-operation-active&quot;&gt;active&lt;/a&gt; in &lt;code&gt;commandBuffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc64d2344286741118e5d1c1aec4bd1f8c2f3c15" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not have been allocated with &lt;code&gt;VK_COMMAND_BUFFER_LEVEL_SECONDARY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c546401a1377cc66450d140ea0eca63dcf8da78" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pDescriptorSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been allocated with a &lt;code&gt;VkDescriptorSetLayout&lt;/code&gt; that matches (is the same as, or identically defined as) the &lt;code&gt;VkDescriptorSetLayout&lt;/code&gt; at set &lt;em&gt;n&lt;/em&gt; in &lt;code&gt;layout&lt;/code&gt;, where &lt;em&gt;n&lt;/em&gt; is the sum of &lt;code&gt;firstSet&lt;/code&gt; and the index into &lt;code&gt;pDescriptorSets&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90874fe12acd6a6c4815ea9502a62e942f4ffc07" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pDynamicOffsets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; satisfy the required alignment for the corresponding descriptor binding&amp;rsquo;s descriptor type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8357025558421f10be4b905dce329e80fc3986c5" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pFences&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not currently be associated with any queue command that has not yet completed execution on that queue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f505dbb6a00a6774719ddfde6aaf9bd5517bfa5d" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pMemoryBarriers&lt;/code&gt;, &lt;code&gt;pBufferMemoryBarriers&lt;/code&gt; or &lt;code&gt;pImageMemoryBarriers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not have any access flag included in its &lt;code&gt;dstAccessMask&lt;/code&gt; member if that bit is not supported by any of the pipeline stages in &lt;code&gt;dstStageMask&lt;/code&gt;, as specified in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-access-types-supported&quot;&gt;table of supported access types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc28d04bdd750dd526aeb05854985566529ed78a" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pMemoryBarriers&lt;/code&gt;, &lt;code&gt;pBufferMemoryBarriers&lt;/code&gt; or &lt;code&gt;pImageMemoryBarriers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not have any access flag included in its &lt;code&gt;srcAccessMask&lt;/code&gt; member if that bit is not supported by any of the pipeline stages in &lt;code&gt;srcStageMask&lt;/code&gt;, as specified in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-access-types-supported&quot;&gt;table of supported access types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e175fb516238702f7d7d44aa5398c950b19d169" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pPreserveAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not also be an element of any other member of the subpass description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da15c91d133520d2556364ea187f164db98e41d3" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pResolveAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have a sample count of &lt;code&gt;VK_SAMPLE_COUNT_1_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acaf653ed1c40112d2aaa4672c9986cb7f8f1d36" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pResolveAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have the same &lt;a href=&quot;#VkFormat&quot;&gt;VkFormat&lt;/a&gt; as its corresponding color attachment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cdb508b23b45117545bf0b24f80cac6a0fa8a9" translate="yes" xml:space="preserve">
          <source>Any given element of &lt;code&gt;pWaitDstStageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not include &lt;code&gt;VK_PIPELINE_STAGE_HOST_BIT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b919f50ecf5979f2df738ebc75759d517fb8264" translate="yes" xml:space="preserve">
          <source>Any given element of the &lt;code&gt;pCommandBuffers&lt;/code&gt; member of any element of &lt;code&gt;pSubmits&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;pending or executable state&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2462f88d3232405e9c014e7ed21fb66a3a7b056f" translate="yes" xml:space="preserve">
          <source>Any given element of the &lt;code&gt;pCommandBuffers&lt;/code&gt; member of any element of &lt;code&gt;pSubmits&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been allocated from a &lt;code&gt;VkCommandPool&lt;/code&gt; that was created for the same queue family &lt;code&gt;queue&lt;/code&gt; belongs to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28feb70e4bf803749478c4f367f4fc1c8cd75ae3" translate="yes" xml:space="preserve">
          <source>Any given element of the &lt;code&gt;pSignalSemaphores&lt;/code&gt; member of any element of &lt;code&gt;pBindInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be unsignaled when the semaphore signal operation it defines is executed on the device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c176b579ffa59f89d3fdfe8449a70cff8c90a098" translate="yes" xml:space="preserve">
          <source>Any given element of the &lt;code&gt;pSignalSemaphores&lt;/code&gt; member of any element of &lt;code&gt;pSubmits&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be unsignaled when the semaphore signal operation it defines is executed on the device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662d57e1dd1942694becdf75531cae868739dc13" translate="yes" xml:space="preserve">
          <source>Any pipeline stage included in &lt;code&gt;srcStageMask&lt;/code&gt; or &lt;code&gt;dstStageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be supported by the capabilities of the queue family specified by the &lt;code&gt;queueFamilyIndex&lt;/code&gt; member of the &lt;a href=&quot;#VkCommandPoolCreateInfo&quot;&gt;VkCommandPoolCreateInfo&lt;/a&gt; structure that was used to create the &lt;code&gt;VkCommandPool&lt;/code&gt; that &lt;code&gt;commandBuffer&lt;/code&gt; was allocated from, as specified in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-supported&quot;&gt;table of supported pipeline stages&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17215701b277f95bcd6614c38f394c03cdea7d9d" translate="yes" xml:space="preserve">
          <source>Any primary command buffer allocated from another &lt;a href=&quot;#VkCommandPool&quot;&gt;VkCommandPool&lt;/a&gt; that is in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;recording or executable state&lt;/a&gt; and has a secondary command buffer allocated from &lt;code&gt;commandPool&lt;/code&gt; recorded into it, becomes &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;invalid&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d920ed75473fe1c3db777bb5171880c3230ec490" translate="yes" xml:space="preserve">
          <source>Any primary command buffer that is in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;recording or executable state&lt;/a&gt; and has &lt;code&gt;commandBuffer&lt;/code&gt; recorded into it, becomes &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;invalid&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07719ccc2767590f9b2da68d19673bd5d6622fa" translate="yes" xml:space="preserve">
          <source>Any primary command buffer that is in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;recording or executable state&lt;/a&gt; and has any element of &lt;code&gt;pCommandBuffers&lt;/code&gt; recorded into it, becomes &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;invalid&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4265a72a4e55f0b2628219bedb905949ef59727e" translate="yes" xml:space="preserve">
          <source>Any stage flag included in any element of the &lt;code&gt;pWaitDstStageMask&lt;/code&gt; member of any element of &lt;code&gt;pSubmits&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pipeline stage supported by one of the capabilities of &lt;code&gt;queue&lt;/code&gt;, as specified in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-supported&quot;&gt;table of supported pipeline stages&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959e95ee6417d0463035821efadbc221ea93b86e" translate="yes" xml:space="preserve">
          <source>Any triangle which is not front-facing is back-facing, including zero-area triangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6e02a76e396f2dd3ab812cc3a0a76430a79b26" translate="yes" xml:space="preserve">
          <source>Any two elements of &lt;code&gt;pPushConstantRanges&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not include the same stage in &lt;code&gt;stageFlags&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152dcd2636b4851f79e716f618c9da2ca782d590" translate="yes" xml:space="preserve">
          <source>Applications &lt;strong&gt;can&lt;/strong&gt; double-buffer query pool usage, with a pool per frame, and reset queries at the end of the frame in which they are read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a4153b2f818721be1a730d9bad6dce036b7485" translate="yes" xml:space="preserve">
          <source>Applications &lt;strong&gt;can&lt;/strong&gt; store the data retrieved from the pipeline cache, and use these data, possibly in a future run of the application, to populate new pipeline cache objects. The results of pipeline compiles, however, &lt;strong&gt;may&lt;/strong&gt; depend on the vendor ID, device ID, driver version, and other details of the device. To enable applications to detect when previously retrieved data is incompatible with the device, the initial bytes written to &lt;code&gt;pData&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a header consisting of the following members:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db7ab0d75c2dce209061cb1668c25677a348755" translate="yes" xml:space="preserve">
          <source>Applications &lt;strong&gt;can&lt;/strong&gt; track and manage the total host memory size of a pipeline cache object using the &lt;code&gt;pAllocator&lt;/code&gt;. Applications &lt;strong&gt;can&lt;/strong&gt; limit the amount of data retrieved from a pipeline cache object in &lt;code&gt;vkGetPipelineCacheData&lt;/code&gt;. Implementations &lt;strong&gt;should&lt;/strong&gt; not internally limit the total number of entries added to a pipeline cache object or the total host memory consumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72726a9bb62c9ff4add246c45849913a15110ab7" translate="yes" xml:space="preserve">
          <source>Applications &lt;strong&gt;must&lt;/strong&gt; not pass any other values than &lt;code&gt;VK_TRUE&lt;/code&gt; or &lt;code&gt;VK_FALSE&lt;/code&gt; into a Vulkan implementation where a &lt;code&gt;VkBool32&lt;/code&gt; is expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44c106134f76501d6699ba213d8158436e7c790" translate="yes" xml:space="preserve">
          <source>Applications &lt;strong&gt;must&lt;/strong&gt; take care to ensure that use of the &lt;code&gt;VK_QUERY_RESULT_WAIT_BIT&lt;/code&gt; bit has the desired effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05549f5366df3bc980478f36931a2570183e5233" translate="yes" xml:space="preserve">
          <source>Applications &lt;strong&gt;should&lt;/strong&gt; be careful to avoid race conditions when using events. There is no direct ordering guarantee between a &lt;a href=&quot;#vkCmdResetEvent&quot;&gt;vkCmdResetEvent&lt;/a&gt; command and a &lt;a href=&quot;#vkCmdWaitEvents&quot;&gt;vkCmdWaitEvents&lt;/a&gt; command submitted after it, so some other execution dependency &lt;strong&gt;must&lt;/strong&gt; be included between these commands (e.g. a semaphore).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e902a762578bac74674ebe0171d3eea8b3bd10bd" translate="yes" xml:space="preserve">
          <source>Applications &lt;strong&gt;should&lt;/strong&gt; check for a negative return value when allocating new descriptor sets, assume that any error effectively means &lt;code&gt;VK_ERROR_FRAGMENTED_POOL&lt;/code&gt;, and try to create a new descriptor pool. If &lt;code&gt;VK_ERROR_FRAGMENTED_POOL&lt;/code&gt; is the actual return value, it adds certainty to that decision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4235c80aab3813d15857d34f9a2463e0faa0206a" translate="yes" xml:space="preserve">
          <source>As described &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#memory-device-unmap-does-not-flush&quot;&gt;below&lt;/a&gt;, host writes are not implicitly flushed when the memory object is unmapped, but the implementation &lt;strong&gt;must&lt;/strong&gt; guarantee that writes that have not been flushed do not affect any other memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6529a504f5e47490c7f399ea6f34b186c3003a" translate="yes" xml:space="preserve">
          <source>As no operation to &lt;a href=&quot;#vkQueueBindSparse&quot;&gt;vkQueueBindSparse&lt;/a&gt; causes any pipeline stage to access memory, synchronization primitives used in this command effectively only define execution dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a291dbc6476b823782072ed39c11c5910f2d1993" translate="yes" xml:space="preserve">
          <source>As queries operate asynchronously, ending a query does not immediately set the query&amp;rsquo;s status to available. A query is considered &lt;em&gt;finished&lt;/em&gt; when the final results of the query are ready to be retrieved by &lt;a href=&quot;#vkGetQueryPoolResults&quot;&gt;vkGetQueryPoolResults&lt;/a&gt; and &lt;a href=&quot;#vkCmdCopyQueryPoolResults&quot;&gt;vkCmdCopyQueryPoolResults&lt;/a&gt;, and this is when the query&amp;rsquo;s status is set to available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4700e9d8ec82579f837315ebb66d6cbb1eb8929a" translate="yes" xml:space="preserve">
          <source>As the sizes of the source and destination extents &lt;strong&gt;can&lt;/strong&gt; differ in any dimension, texels in the source extent are scaled and filtered to the destination extent. Scaling occurs via the following operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12168e61991df8747e0bee31bc6622fbd64aa88b" translate="yes" xml:space="preserve">
          <source>At least one heap &lt;strong&gt;must&lt;/strong&gt; include &lt;code&gt;VK_MEMORY_HEAP_DEVICE_LOCAL_BIT&lt;/code&gt; in &lt;a href=&quot;#VkMemoryHeap&quot;&gt;VkMemoryHeap&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;. If there are multiple heaps that all have similar performance characteristics, they &lt;strong&gt;may&lt;/strong&gt; all include &lt;code&gt;VK_MEMORY_HEAP_DEVICE_LOCAL_BIT&lt;/code&gt;. In a unified memory architecture (UMA) system, there is often only a single memory heap which is considered to be equally &amp;ldquo;local&amp;rdquo; to the host and to the device, and such an implementation &lt;strong&gt;must&lt;/strong&gt; advertise the heap as device-local.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6a134c2f578939f56deee97b7ce300eea8e1a6" translate="yes" xml:space="preserve">
          <source>Attachments &lt;strong&gt;can&lt;/strong&gt; also be cleared at the beginning of a render pass instance by setting &lt;code&gt;loadOp&lt;/code&gt; (or &lt;code&gt;stencilLoadOp&lt;/code&gt;) of &lt;a href=&quot;#VkAttachmentDescription&quot;&gt;VkAttachmentDescription&lt;/a&gt; to &lt;code&gt;VK_ATTACHMENT_LOAD_OP_CLEAR&lt;/code&gt;, as described for &lt;a href=&quot;#vkCreateRenderPass&quot;&gt;vkCreateRenderPass&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5858f9415a2b5f9f8a1143232f8c0d4ba4363b2" translate="yes" xml:space="preserve">
          <source>B = B&lt;sub&gt;d&lt;/sub&gt; &amp;times; D&lt;sub&gt;b&lt;/sub&gt; - B&lt;sub&gt;s0&lt;/sub&gt; &amp;times; S&lt;sub&gt;b&lt;/sub&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e725e311374d1ceb02c38f03fdc205f16ae2b72e" translate="yes" xml:space="preserve">
          <source>B = B&lt;sub&gt;s0&lt;/sub&gt; &amp;times; S&lt;sub&gt;b&lt;/sub&gt; + B&lt;sub&gt;d&lt;/sub&gt; &amp;times; D&lt;sub&gt;b&lt;/sub&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cd1f22261419b1b49456092038af45c1c3f705" translate="yes" xml:space="preserve">
          <source>B = B&lt;sub&gt;s0&lt;/sub&gt; &amp;times; S&lt;sub&gt;b&lt;/sub&gt; - B&lt;sub&gt;d&lt;/sub&gt; &amp;times; D&lt;sub&gt;b&lt;/sub&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2df08184b3ba9fc4368594d9f279f0d9abb53c4" translate="yes" xml:space="preserve">
          <source>B = max(B&lt;sub&gt;s0&lt;/sub&gt;,B&lt;sub&gt;d&lt;/sub&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44536983981ff24b8603fe79621d5a05e33fce3e" translate="yes" xml:space="preserve">
          <source>B = min(B&lt;sub&gt;s0&lt;/sub&gt;,B&lt;sub&gt;d&lt;/sub&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0055efff0765ce0b2abdec7fe71953148c6f6a5e" translate="yes" xml:space="preserve">
          <source>Because depth or stencil aspect buffer to image copies &lt;strong&gt;may&lt;/strong&gt; require format conversions on some implementations, they are not supported on queues that do not support graphics. When copying to a depth aspect, the data in buffer memory &lt;strong&gt;must&lt;/strong&gt; be in the the range [0,1] or undefined results occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202cea0b5038e083d99d60a470a587574559dc05" translate="yes" xml:space="preserve">
          <source>Because the list of available layers may change externally between calls to &lt;code&gt;vkEnumerateInstanceExtensionProperties&lt;/code&gt;, two calls may retrieve different results if a &lt;code&gt;pLayerName&lt;/code&gt; is available in one call but not in another. The extensions supported by a layer may also change between two calls, e.g. if the layer implementation is replaced by a different version between those calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92dae1f231811eee84b102b33eb95b2cb9ea9cf1" translate="yes" xml:space="preserve">
          <source>Before freeing a memory object, an application &lt;strong&gt;must&lt;/strong&gt; ensure the memory object is no longer in use by the device&amp;mdash;​for example by command buffers queued for execution. The memory &lt;strong&gt;can&lt;/strong&gt; remain bound to images or buffers at the time the memory object is freed, but any further use of them (on host or device) for anything other than destroying those objects will result in undefined behavior. If there are still any bound images or buffers, the memory &lt;strong&gt;may&lt;/strong&gt; not be immediately released by the implementation, but &lt;strong&gt;must&lt;/strong&gt; be released by the time all bound images and buffers have been destroyed. Once memory is released, it is returned to the heap from which it was allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ddb757cf046f89f8c54ef3abc7cf1116016148" translate="yes" xml:space="preserve">
          <source>Bitmasks are passed to many commands and structures to compactly represent options, but &lt;code&gt;VkFlags&lt;/code&gt; is not used directly in the API. Instead, a &lt;code&gt;Vk*Flags&lt;/code&gt; type which is an alias of &lt;code&gt;VkFlags&lt;/code&gt;, and whose name matches the corresponding &lt;code&gt;Vk*FlagBits&lt;/code&gt; that are valid for that type, is used. These aliases are described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#boilerplate-flags&quot;&gt;Flag Types&lt;/a&gt; appendix of the Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec462d53e9b9bf1c650bc3e17e8718b1ab04d9f" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkAttachmentDescription&quot;&gt;VkAttachmentDescription&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt; describing additional properties of the attachment are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de79cd16ea1c081ca29f5de4ba35e7f400736da" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkBufferCreateInfo&quot;&gt;VkBufferCreateInfo&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;, specifying additional parameters of a buffer, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee5c99c22f8695920216af4fa4f407ec6bfc09a" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkBufferCreateInfo&quot;&gt;VkBufferCreateInfo&lt;/a&gt;::&lt;code&gt;usage&lt;/code&gt;, specifying usage behavior of a buffer, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bc56db3a550aacc8932ae09583a1a4c6b89ebc" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkCommandBufferBeginInfo&quot;&gt;VkCommandBufferBeginInfo&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt; to specify usage behavior for a command buffer are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc46761fb9a36768d0143ce172c726ac2b045741" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkCommandPoolCreateInfo&quot;&gt;VkCommandPoolCreateInfo&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt; to specify usage behavior for a command pool are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ef0423147f3fd18a91ca2d986ff9594073509f" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkDescriptorPoolCreateInfo&quot;&gt;VkDescriptorPoolCreateInfo&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt; to enable operations on a descriptor pool are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b23071ea0c064febbca6c50a28a53f87075bc6" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkDescriptorSetLayoutCreateInfo&quot;&gt;VkDescriptorSetLayoutCreateInfo&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt; to specify options for descriptor set layout are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f9d30d3f9a6a95af2c12433ae65b2222176f01" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;, specifying additional parameters of an image, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7446f94e183cc16c105a85da910185c0c6e346" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt;::&lt;code&gt;usage&lt;/code&gt;, specifying intended usage of an image, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79be5cabb7e5ce506448371ae38ef34d1236333f" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkPipelineColorBlendAttachmentState&quot;&gt;VkPipelineColorBlendAttachmentState&lt;/a&gt;::&lt;code&gt;colorWriteMask&lt;/code&gt; to determine whether the final color values R, G, B and A are written to the framebuffer attachment are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c72361e7a749a02c3715c9cc6e3d846d032014" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkSparseImageFormatProperties&quot;&gt;VkSparseImageFormatProperties&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;, specifying additional information about the sparse resource, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628a6f1fafc3080f19872459209afe5b64538dab" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkSparseMemoryBind&quot;&gt;VkSparseMemoryBind&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;, specifying usage of a sparse memory binding operation, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c2756e1c7cbd772bea81606391fd2c4a2e8a5b" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#VkSubpassDescription&quot;&gt;VkSubpassDescription&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;, specifying usage of the subpass, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6844e4be8fcb96e84ab9677c44ae80a73c9a0ef6" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#vkCmdBeginQuery&quot;&gt;vkCmdBeginQuery&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;, specifying constraints on the types of queries that &lt;strong&gt;can&lt;/strong&gt; be performed, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b244d159e93d422ec61d5eea3b8bcc555955c1" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#vkGetQueryPoolResults&quot;&gt;vkGetQueryPoolResults&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt; and &lt;a href=&quot;#vkCmdCopyQueryPoolResults&quot;&gt;vkCmdCopyQueryPoolResults&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;, specifying how and when results are returned, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1018b59c27eacded0815608371e89afa5b2e031" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#vkResetCommandBuffer&quot;&gt;vkResetCommandBuffer&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt; to control the reset operation are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d010d7476554d69ca972e33172e948cf6b785fa" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in &lt;a href=&quot;#vkResetCommandPool&quot;&gt;vkResetCommandPool&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt; to control the reset operation are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365604f81dde636a2835f0ddd6e2102eb0369577" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in an aspect mask to specify aspects of an image for purposes such as identifying a subresource, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc625b0ea146e6cfed4cdf291d497f37306099b" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in the &lt;a href=&quot;#VkFormatProperties&quot;&gt;VkFormatProperties&lt;/a&gt; features &lt;code&gt;linearTilingFeatures&lt;/code&gt;, &lt;code&gt;optimalTilingFeatures&lt;/code&gt;, and &lt;code&gt;bufferFeatures&lt;/code&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdc772ebcec95429ba98ff7bbf237d77e6d75c0" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in the &lt;a href=&quot;#vkCmdSetStencilCompareMask&quot;&gt;vkCmdSetStencilCompareMask&lt;/a&gt;::&lt;code&gt;faceMask&lt;/code&gt; parameter, and similar parameters of other commands specifying which stencil state to update stencil masks for, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814e1a4795ce5edb6c4901e65d7b013f1f248ef1" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set in vkCmdPipelineBarrier::&lt;code&gt;dependencyFlags&lt;/code&gt;, specifying how execution and memory dependencies are formed, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64408c0cb7b5ab31beec4ec0834fbf1bfb98da10" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;can&lt;/strong&gt; be set to individually enable pipeline statistics counters for query pools with &lt;a href=&quot;#VkQueryPoolCreateInfo&quot;&gt;VkQueryPoolCreateInfo&lt;/a&gt;::&lt;code&gt;pipelineStatistics&lt;/code&gt;, and for secondary command buffers with &lt;a href=&quot;#VkCommandBufferInheritanceInfo&quot;&gt;VkCommandBufferInheritanceInfo&lt;/a&gt;::&lt;code&gt;pipelineStatistics&lt;/code&gt;, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa6eca88bc9d2c99e1efa432ebb8b9e7748d040" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;may&lt;/strong&gt; be set in &lt;a href=&quot;#VkMemoryHeap&quot;&gt;VkMemoryHeap&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;, indicating attribute flags for the heap, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26398ee6700d6cfd62d1e3f318066cead5cd9880" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;may&lt;/strong&gt; be set in &lt;a href=&quot;#VkMemoryType&quot;&gt;VkMemoryType&lt;/a&gt;::&lt;code&gt;propertyFlags&lt;/code&gt;, indicating properties of a memory heap, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6ec728191ecba4b3c36fc58561a576b300e876" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;may&lt;/strong&gt; be set in &lt;a href=&quot;#VkQueueFamilyProperties&quot;&gt;VkQueueFamilyProperties&lt;/a&gt;::&lt;code&gt;queueFlags&lt;/code&gt; indicating capabilities of queues in a queue family are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4c9ee7d94ec71960df7711d7518dc28c12752e" translate="yes" xml:space="preserve">
          <source>Bits which &lt;strong&gt;may&lt;/strong&gt; be set in the sample count limits returned by &lt;a href=&quot;#VkPhysicalDeviceLimits&quot;&gt;VkPhysicalDeviceLimits&lt;/a&gt;, as well as in other queries and structures representing image sample counts, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560881f77ecc7f558492ff0a3c724e3023098a1b" translate="yes" xml:space="preserve">
          <source>Bits which can be set, specifying pipeline stages, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e660b5dc2129398eb66466c203180417858fc309" translate="yes" xml:space="preserve">
          <source>Blits are done layer by layer starting with the &lt;code&gt;baseArrayLayer&lt;/code&gt; member of &lt;code&gt;srcSubresource&lt;/code&gt; for the source and &lt;code&gt;dstSubresource&lt;/code&gt; for the destination. &lt;code&gt;layerCount&lt;/code&gt; layers are blitted to the destination image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4698382842477e211eb46de81fa506f01a8c34" translate="yes" xml:space="preserve">
          <source>Both</source>
          <target state="translated">Both</target>
        </trans-unit>
        <trans-unit id="2fe1b2ee5dfa77623b61c9a0bbc8acd1931a22ed" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;basePipelineHandle&lt;/code&gt;, and &lt;code&gt;layout&lt;/code&gt; that are valid handles &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ca4aad6d1296b0ecfb21399916227595f7e389" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;buffer&lt;/code&gt;, and &lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbdd92eed1a198c484fcbaa59cbcce95771c139" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;commandBuffer&lt;/code&gt;, and &lt;code&gt;dstBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f603e465e40c0cb27cf8be4d46b8fdb1aaade4a2" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;commandBuffer&lt;/code&gt;, and &lt;code&gt;event&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b13c3be7bde5770b768fedac4369df30dcf87d" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;commandBuffer&lt;/code&gt;, and &lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3dea0ce2ac32f4eee613e90fdfc02bea0fc70f" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;commandBuffer&lt;/code&gt;, and &lt;code&gt;layout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b15ce4e2744df926b9f578382d480a7a61a3e01" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;commandBuffer&lt;/code&gt;, and &lt;code&gt;pipeline&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279643d9c4116f2c8c9c659848ae334e5f4f5f04" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;commandBuffer&lt;/code&gt;, and &lt;code&gt;queryPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9372e85105a97376e8e4a87c714e25d995126bde" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;commandBuffer&lt;/code&gt;, and the elements of &lt;code&gt;pBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e489ac9a2cebfd9cd2a9db3721c542ba7bf5821" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;commandBuffer&lt;/code&gt;, and the elements of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16747682a04231e9203179e558369571449ccde" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;commandBuffer&lt;/code&gt;, and the elements of &lt;code&gt;pEvents&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f880c45bdc78a620ca345e7f97ca086003f646e" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;descriptorPool&lt;/code&gt;, and the elements of &lt;code&gt;pSetLayouts&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2881aebf0f2bbf5fecc9b301a8047da5c686164" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;dstSet&lt;/code&gt;, and &lt;code&gt;srcSet&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305418570b2bbdd58144096a619393306b4ae7ba" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;dstSet&lt;/code&gt;, and the elements of &lt;code&gt;pTexelBufferView&lt;/code&gt; that are valid handles &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8322d7d3913ffbfa1c712e99e31424a4e1faa5c" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;fence&lt;/code&gt;, and &lt;code&gt;queue&lt;/code&gt; that are valid handles &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2b5d97da346d12dbae7897586d20ca704c28a1" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;framebuffer&lt;/code&gt;, and &lt;code&gt;renderPass&lt;/code&gt; that are valid handles &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fdb8abcc148e7acee492544bd0a3a0a8ead5ca" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;framebuffer&lt;/code&gt;, and &lt;code&gt;renderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce7a9ecca63c1f758209a3c141d166b1ed3bc51" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;imageView&lt;/code&gt;, and &lt;code&gt;sampler&lt;/code&gt; that are valid handles &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5233fe4dccdb3d551696f7e3d25e9a5465f60002" translate="yes" xml:space="preserve">
          <source>Both of &lt;code&gt;renderPass&lt;/code&gt;, and the elements of &lt;code&gt;pAttachments&lt;/code&gt; that are valid handles &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eadf2f4a375b7e516630726662455414d632306" translate="yes" xml:space="preserve">
          <source>Both of the elements of &lt;code&gt;pSignalSemaphores&lt;/code&gt;, and the elements of &lt;code&gt;pWaitSemaphores&lt;/code&gt; that are valid handles &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4ba242e2b0d1e793fe72dea6b8f8c8ba9290cd" translate="yes" xml:space="preserve">
          <source>Buffer and image objects are created with a &lt;em&gt;sharing mode&lt;/em&gt; controlling how they &lt;strong&gt;can&lt;/strong&gt; be accessed from queues. The supported sharing modes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77af881d9d5168f244ccde0e539de79541e9c97c" translate="yes" xml:space="preserve">
          <source>Buffer views are represented by &lt;code&gt;VkBufferView&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd3edbc16da2fa56da121583a2ed316cb672cfb" translate="yes" xml:space="preserve">
          <source>Buffers are represented by &lt;code&gt;VkBuffer&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0c45131c5697be5f0572630ee4d4182920b3fe" translate="yes" xml:space="preserve">
          <source>Buffers represent linear arrays of data which are used for various purposes by binding them to a graphics or compute pipeline via descriptor sets or via certain commands, or by directly specifying them as parameters to certain commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e88cf775f2be12b8f6058312f4032111414945" translate="yes" xml:space="preserve">
          <source>C Macro Definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46f261935923b2da77b8b81f82932b13426185f" translate="yes" xml:space="preserve">
          <source>C Specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4652c5716384f79706212770b389bf553f055559" translate="yes" xml:space="preserve">
          <source>CUBE, 0, 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753c004004795146db2f32d4aa39e39183f19fbf" translate="yes" xml:space="preserve">
          <source>CUBE, 1, 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd4a5115ec68360913d2247af5d237950da0c8c" translate="yes" xml:space="preserve">
          <source>Certain access types are only performed by a subset of pipeline stages. Any synchronization command that takes both stage masks and access masks uses both to define the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-dependencies-access-scopes&quot;&gt;access scopes&lt;/a&gt; - only the specified access types performed by the specified stages are included in the access scope. An application &lt;strong&gt;must&lt;/strong&gt; not specify an access flag in a synchronization command if it does not include a pipeline stage in the corresponding stage mask that is able to perform accesses of that type. The following table lists, for each access flag, which pipeline stages &lt;strong&gt;can&lt;/strong&gt; perform that type of access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8923b530fe86242bc33f6b6864e649fc5dd9fb8" translate="yes" xml:space="preserve">
          <source>Command Buffer Levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d46230c1394ca36817d1ad39cb7bf6a73b9a5c4" translate="yes" xml:space="preserve">
          <source>Command Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568edd4b14a41020fa4545183ba8320f4b5c4a35" translate="yes" xml:space="preserve">
          <source>Command buffers are objects used to record commands which &lt;strong&gt;can&lt;/strong&gt; be subsequently submitted to a device queue for execution. There are two levels of command buffers - &lt;em&gt;primary command buffers&lt;/em&gt;, which &lt;strong&gt;can&lt;/strong&gt; execute secondary command buffers, and which are submitted to queues, and &lt;em&gt;secondary command buffers&lt;/em&gt;, which &lt;strong&gt;can&lt;/strong&gt; be executed by primary command buffers, and which are not directly submitted to queues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0a72f5de17733c64be52238a07ec180e68e823" translate="yes" xml:space="preserve">
          <source>Command buffers are represented by &lt;code&gt;VkCommandBuffer&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50999cc882a00db8ee4758de1480805e244967e1" translate="yes" xml:space="preserve">
          <source>Command pools are opaque objects that command buffer memory is allocated from, and which allow the implementation to amortize the cost of resource creation across multiple command buffers. Command pools are externally synchronized, meaning that a command pool &lt;strong&gt;must&lt;/strong&gt; not be used concurrently in multiple threads. That includes use via recording commands on any command buffers allocated from the pool, as well as operations that allocate, free, and reset command buffers or the pool itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32365782ea77de394f6b5d7320edb9861f1927a" translate="yes" xml:space="preserve">
          <source>Command pools are represented by &lt;code&gt;VkCommandPool&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc73e8488010e8606fb69abf4d9fa9539183e9b" translate="yes" xml:space="preserve">
          <source>Commands and structures which need to specify one or more shader stages do so using a bitmask whose bits correspond to stages. Bits which &lt;strong&gt;can&lt;/strong&gt; be set to specify shader stages are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92c529e0731c57efd7550480196484040b33c3e" translate="yes" xml:space="preserve">
          <source>Component</source>
          <target state="translated">Component</target>
        </trans-unit>
        <trans-unit id="68f4127b674a41b6ce54b1b39c2f58fd70e7d5f5" translate="yes" xml:space="preserve">
          <source>Compute</source>
          <target state="translated">Compute</target>
        </trans-unit>
        <trans-unit id="4bdb00271282af20ab901c84f876ea8ee029a780" translate="yes" xml:space="preserve">
          <source>Compute and graphics pipelines are each represented by &lt;code&gt;VkPipeline&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c531529700a9efcf79645250827bccc0c9d6bd0" translate="yes" xml:space="preserve">
          <source>Copies are done layer by layer starting with &lt;code&gt;baseArrayLayer&lt;/code&gt; member of &lt;code&gt;srcSubresource&lt;/code&gt; for the source and &lt;code&gt;dstSubresource&lt;/code&gt; for the destination. &lt;code&gt;layerCount&lt;/code&gt; layers are copied to the destination image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2b1401e1407dd377fa816180e9fa4244bed0bc" translate="yes" xml:space="preserve">
          <source>Copies are done layer by layer starting with image layer &lt;code&gt;baseArrayLayer&lt;/code&gt; member of &lt;code&gt;imageSubresource&lt;/code&gt;. &lt;code&gt;layerCount&lt;/code&gt; layers are copied from the source image or to the destination image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6c961d07b1e3ad25a1fb1243dc528fb7d31d9e" translate="yes" xml:space="preserve">
          <source>Copying to or from block-compressed images is typically done in multiples of the compressed texel block size. For this reason the &lt;code&gt;extent&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of the compressed texel block dimension. There is one exception to this rule which is &lt;strong&gt;required&lt;/strong&gt; to handle compressed images created with dimensions that are not a multiple of the compressed texel block dimensions: if the &lt;code&gt;srcImage&lt;/code&gt; is compressed, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4ee0ad0368926483f732da0c7146ff4422e104" translate="yes" xml:space="preserve">
          <source>Correct Vulkan operation &lt;strong&gt;cannot&lt;/strong&gt; be assumed if the application does not follow these rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7147ff0504268e9c64857d43f06b78ca957e7be0" translate="yes" xml:space="preserve">
          <source>Creating a logical device also creates the queues associated with that device. The queues to create are described by a set of &lt;a href=&quot;#VkDeviceQueueCreateInfo&quot;&gt;VkDeviceQueueCreateInfo&lt;/a&gt; structures that are passed to &lt;a href=&quot;#vkCreateDevice&quot;&gt;vkCreateDevice&lt;/a&gt; in &lt;code&gt;pQueueCreateInfos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b02a246260a2312edefb78a0de83b75909cf12" translate="yes" xml:space="preserve">
          <source>D&lt;sub&gt;r&lt;/sub&gt;, D&lt;sub&gt;g&lt;/sub&gt;, D&lt;sub&gt;b&lt;/sub&gt; and D&lt;sub&gt;a&lt;/sub&gt; represent the destination blend factor R, G, B, and A components, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573871f9bc8eba78576a1d4434c4333d69ab19c2" translate="yes" xml:space="preserve">
          <source>Data &lt;strong&gt;can&lt;/strong&gt; be retrieved from a pipeline cache object using the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506cd9ca7e2670138a4e2706158c9cc721302822" translate="yes" xml:space="preserve">
          <source>Depth/stencil images with depth and stencil data interleaved into a single plane will return a single &lt;code&gt;VkSparseImageFormatProperties&lt;/code&gt; structure with the &lt;code&gt;aspectMask&lt;/code&gt; set to &lt;code&gt;VK_IMAGE_ASPECT_DEPTH_BIT&lt;/code&gt; | &lt;code&gt;VK_IMAGE_ASPECT_STENCIL_BIT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="9d09aedab85271b1d907d912434d06fe0c904ce8" translate="yes" xml:space="preserve">
          <source>Descriptor pools are represented by &lt;code&gt;VkDescriptorPool&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68e723e25af06a04313a2094c653e61194c531c" translate="yes" xml:space="preserve">
          <source>Descriptor set layout objects are represented by &lt;code&gt;VkDescriptorSetLayout&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3039a23ee9ac7b3bf86317dbfcb40fa8948457d" translate="yes" xml:space="preserve">
          <source>Descriptor sets are allocated from descriptor pool objects, and are represented by &lt;code&gt;VkDescriptorSet&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babad970d1e39949a52901e1650430c1fbe497db" translate="yes" xml:space="preserve">
          <source>Descriptors in each bound descriptor set, specified via &lt;code&gt;vkCmdBindDescriptorSets&lt;/code&gt;, &lt;strong&gt;must&lt;/strong&gt; be valid if they are statically used by the currently bound &lt;code&gt;VkPipeline&lt;/code&gt; object, specified via &lt;code&gt;vkCmdBindPipeline&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2ee36deecf042bfaea3fff90efe748d6524a7b" translate="yes" xml:space="preserve">
          <source>Details on the interaction of &lt;code&gt;pWaitDstStageMask&lt;/code&gt; with synchronization are described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-semaphores-waiting&quot;&gt;semaphore wait operation&lt;/a&gt; section of &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization&quot;&gt;the synchronization chapter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c61b72c13594c57e438a36fee873a0a41efd7ab" translate="yes" xml:space="preserve">
          <source>Dim, Arrayed, MS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a20de3ffbe9750feae0921305b3c80459d6a7d6" translate="yes" xml:space="preserve">
          <source>Document Notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1e88d688b5bf91b719c3a1284b9c0b164d05ba" translate="yes" xml:space="preserve">
          <source>Due to allowable rounding errors in the generation of the source texture coordinates, it is not always possible to guarantee exactly which source texels will be sampled for a given blit. As rounding errors are implementation dependent, the exact results of a blitting operation are also implementation dependent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4792254c650d6c4a490cb2ca4e5495af8875fd" translate="yes" xml:space="preserve">
          <source>During a render pass instance, input/color attachments with color formats that have a component size of 8, 16, or 32 bits &lt;strong&gt;must&lt;/strong&gt; be represented in the attachment&amp;rsquo;s format throughout the instance. Attachments with other floating- or fixed-point color formats, or with depth components &lt;strong&gt;may&lt;/strong&gt; be represented in a format with a precision higher than the attachment format, but &lt;strong&gt;must&lt;/strong&gt; be represented with the same range. When such a component is loaded via the &lt;code&gt;loadOp&lt;/code&gt;, it will be converted into an implementation-dependent format used by the render pass. Such components &lt;strong&gt;must&lt;/strong&gt; be converted from the render pass format, to the format of the attachment, before they are resolved or stored at the end of a render pass instance via &lt;code&gt;storeOp&lt;/code&gt;. Conversions occur as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fundamentals-numerics&quot;&gt;Numeric Representation and Computation&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fundamentals-fixedconv&quot;&gt;Fixed-Point Data Conversions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b310ae833e707c09ca15fd340cd9bbb282f67219" translate="yes" xml:space="preserve">
          <source>During the resolve the samples corresponding to each pixel location in the source are converted to a single sample before being written to the destination. If the source formats are floating-point or normalized types, the sample values for each pixel are resolved in an implementation-dependent manner. If the source formats are integer types, a single sample&amp;rsquo;s value is selected for each pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e53de8bd73c4cd2497c1246c46a35041c006af4" translate="yes" xml:space="preserve">
          <source>Each allocation has an &lt;em&gt;allocation scope&lt;/em&gt; which defines its lifetime and which object it is associated with. Possible values passed to the &lt;code&gt;allocationScope&lt;/code&gt; parameter of the callback functions specified by &lt;a href=&quot;#VkAllocationCallbacks&quot;&gt;VkAllocationCallbacks&lt;/a&gt;, indicating the allocation scope, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672a6fe0c874ec9c73a80944efa23c019668db0a" translate="yes" xml:space="preserve">
          <source>Each draw is made up of zero or more vertices and zero or more instances, which are processed by the device and result in the assembly of primitives. Primitives are assembled according to the &lt;code&gt;pInputAssemblyState&lt;/code&gt; member of the &lt;code&gt;VkGraphicsPipelineCreateInfo&lt;/code&gt; structure, which is of type &lt;code&gt;VkPipelineInputAssemblyStateCreateInfo&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f27783089b51e996d1eda9d040fc41a3f13465a" translate="yes" xml:space="preserve">
          <source>Each element in the &lt;code&gt;pDescriptorCopies&lt;/code&gt; array is a &lt;a href=&quot;#VkCopyDescriptorSet&quot;&gt;VkCopyDescriptorSet&lt;/a&gt; structure describing an operation copying descriptors between sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10d661885c13250c823ab4357340849806dff39" translate="yes" xml:space="preserve">
          <source>Each element in the &lt;code&gt;pDescriptorWrites&lt;/code&gt; array describes an operation updating the descriptor set using descriptors for resources specified in the structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ce7edaec02ee475b28cb859c83d68c9d4d62c6" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;pBuffers&lt;/code&gt; that is non-sparse &lt;strong&gt;must&lt;/strong&gt; be bound completely and contiguously to a single &lt;code&gt;VkDeviceMemory&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa24f8c4b561fb1ad250fa864e2a5b47fd9adad" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;pCommandBuffers&lt;/code&gt; that is a valid handle &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;commandPool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f7dec92582c8294274ee59be588707ac8293f5" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;pDescriptorSets&lt;/code&gt; that is a valid handle &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;descriptorPool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0feede6060488526587ef95ef1a1b02e79969c" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;pDynamicStates&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be unique</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73d3212b29801123ee7cac4e8a3f99f6c88c6a4" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;pFences&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118b90cf0a7a729d05e481295f9e8dc7c11e3bd3" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;pQueuePriorities&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24aa4ff70db1fd9660c5708385ce466661c7d69" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;pSrcCaches&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1442fb1c51b3f203176873d5ae8de321d276d2e2" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;pWaitDstStageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6ced33890d587ddf1df4eb923fb955bbb1735e" translate="yes" xml:space="preserve">
          <source>Each element of the &lt;code&gt;pAttachments&lt;/code&gt; array is a &lt;a href=&quot;#VkPipelineColorBlendAttachmentState&quot;&gt;VkPipelineColorBlendAttachmentState&lt;/a&gt; structure specifying per-target blending state for each individual color attachment. If the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-features-independentBlend&quot;&gt;independent blending&lt;/a&gt; feature is not enabled on the device, all &lt;a href=&quot;#VkPipelineColorBlendAttachmentState&quot;&gt;VkPipelineColorBlendAttachmentState&lt;/a&gt; elements in the &lt;code&gt;pAttachments&lt;/code&gt; array &lt;strong&gt;must&lt;/strong&gt; be identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa66e65f8a0e5a2bdade4187791b4a5d2dc5c3b1" translate="yes" xml:space="preserve">
          <source>Each memory type returned by &lt;a href=&quot;#vkGetPhysicalDeviceMemoryProperties&quot;&gt;vkGetPhysicalDeviceMemoryProperties&lt;/a&gt;&lt;strong&gt;must&lt;/strong&gt; have its &lt;code&gt;propertyFlags&lt;/code&gt; set to one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52956374ca3db5fab78d55743f2466dcb284a5dd" translate="yes" xml:space="preserve">
          <source>Each of &lt;code&gt;basePipelineHandle&lt;/code&gt;, &lt;code&gt;layout&lt;/code&gt;, and &lt;code&gt;renderPass&lt;/code&gt; that are valid handles &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2797adfd64015906ad60d995930db5407c03ca22" translate="yes" xml:space="preserve">
          <source>Each of &lt;code&gt;commandBuffer&lt;/code&gt;, &lt;code&gt;dstBuffer&lt;/code&gt;, and &lt;code&gt;queryPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0152d2cbcbc04f1bddfb0a11682e9437c0de20d8" translate="yes" xml:space="preserve">
          <source>Each of &lt;code&gt;commandBuffer&lt;/code&gt;, &lt;code&gt;dstBuffer&lt;/code&gt;, and &lt;code&gt;srcBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8781ce987b51bfe12ba4eb45c8a3d700a22467" translate="yes" xml:space="preserve">
          <source>Each of &lt;code&gt;commandBuffer&lt;/code&gt;, &lt;code&gt;dstBuffer&lt;/code&gt;, and &lt;code&gt;srcImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0df45e692e4ef0447145b7ef9a8f91e47e369d" translate="yes" xml:space="preserve">
          <source>Each of &lt;code&gt;commandBuffer&lt;/code&gt;, &lt;code&gt;dstImage&lt;/code&gt;, and &lt;code&gt;srcBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4845a88374b6727c9ad2ed9ea8cfe3504adb4308" translate="yes" xml:space="preserve">
          <source>Each of &lt;code&gt;commandBuffer&lt;/code&gt;, &lt;code&gt;dstImage&lt;/code&gt;, and &lt;code&gt;srcImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a2b3d629de2a4e580053ace1d254e6b5ece1a1" translate="yes" xml:space="preserve">
          <source>Each of &lt;code&gt;commandBuffer&lt;/code&gt;, &lt;code&gt;layout&lt;/code&gt;, and the elements of &lt;code&gt;pDescriptorSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5f86d56794f544a29fb225cf5b502ade0ca019" translate="yes" xml:space="preserve">
          <source>Each of the &lt;code&gt;pDescriptorSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be compatible with the pipeline layout specified by &lt;code&gt;layout&lt;/code&gt;. The layout used to program the bindings &lt;strong&gt;must&lt;/strong&gt; also be compatible with the pipeline used in subsequent graphics or compute commands, as defined in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-compatibility&quot;&gt;Pipeline Layout Compatibility&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051ad00f5cf328deb3abf2474f5d142097483dbb" translate="yes" xml:space="preserve">
          <source>Each of the elements of &lt;code&gt;pCommandBuffers&lt;/code&gt;, the elements of &lt;code&gt;pSignalSemaphores&lt;/code&gt;, and the elements of &lt;code&gt;pWaitSemaphores&lt;/code&gt; that are valid handles &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from the same &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c501c0d79a450c6c7129d89a72ef8609f8bac87" translate="yes" xml:space="preserve">
          <source>Each region in &lt;code&gt;pRegions&lt;/code&gt; is copied from the source buffer to the same region of the destination buffer. &lt;code&gt;srcBuffer&lt;/code&gt; and &lt;code&gt;dstBuffer&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; be the same buffer or alias the same memory, but the result is undefined if the copy regions overlap in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc68bd403417938850bd6039bbbc692822f5ad1" translate="yes" xml:space="preserve">
          <source>Each region in &lt;code&gt;pRegions&lt;/code&gt; is copied from the source image to the same region of the destination image. &lt;code&gt;srcImage&lt;/code&gt; and &lt;code&gt;dstImage&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; be the same image or alias the same memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8a36a80c4574ee3f770c997f50b8848ca6df3d" translate="yes" xml:space="preserve">
          <source>Each region in &lt;code&gt;pRegions&lt;/code&gt; is copied from the specified region of the source buffer to the specified region of the destination image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc8ff56ca419cade98f4c3e9e08c3c2d1500907" translate="yes" xml:space="preserve">
          <source>Each region in &lt;code&gt;pRegions&lt;/code&gt; is copied from the specified region of the source image to the specified region of the destination buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd58c32b518ad34680b64a64eca1c7bc430680c" translate="yes" xml:space="preserve">
          <source>Each scissor rectangle is described by a &lt;a href=&quot;#VkRect2D&quot;&gt;VkRect2D&lt;/a&gt; structure, with the &lt;code&gt;offset.x&lt;/code&gt; and &lt;code&gt;offset.y&lt;/code&gt; values determining the upper left corner of the scissor rectangle, and the &lt;code&gt;extent.width&lt;/code&gt; and &lt;code&gt;extent.height&lt;/code&gt; values determining the size in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7216f3b8ec86d31210de09f66e2be83bac198c" translate="yes" xml:space="preserve">
          <source>Each specified range in &lt;code&gt;pRanges&lt;/code&gt; is cleared to the value specified by &lt;code&gt;pColor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860cde770944ccdc7dbc29ab8fcb5c143b6683b9" translate="yes" xml:space="preserve">
          <source>Each valid handle in &lt;code&gt;pDescriptorSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been allocated from &lt;code&gt;descriptorPool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baebef203d355e8b34d1b22d373fa7226aba6bd7" translate="yes" xml:space="preserve">
          <source>Each vertex input attribute is specified by an instance of the &lt;code&gt;VkVertexInputAttributeDescription&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd24cf21dd4b4f24f4bcf14f0e1e0747c02e740" translate="yes" xml:space="preserve">
          <source>Ending a render pass instance performs any multisample resolve operations on the final subpass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="413e9110db4f37157b581483ed8d7133f5021d89" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">Enumerations</target>
        </trans-unit>
        <trans-unit id="26c1aaafd7b122199cea3435b0578dc6cf9917df" translate="yes" xml:space="preserve">
          <source>Error codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be67545e5a812b66c0f4e680d4b7b78e282ca295" translate="yes" xml:space="preserve">
          <source>Evaluation of (&lt;code&gt;offset.x&lt;/code&gt; + &lt;code&gt;extent.width&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; not cause a signed integer addition overflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ee610f41d5b47564bcea2910f56b75a51cf6dc" translate="yes" xml:space="preserve">
          <source>Evaluation of (&lt;code&gt;offset.y&lt;/code&gt; + &lt;code&gt;extent.height&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; not cause a signed integer addition overflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd18f434541f13373683486753893e095126b530" translate="yes" xml:space="preserve">
          <source>Events are a synchronization primitive that &lt;strong&gt;can&lt;/strong&gt; be used to insert a fine-grained dependency between commands submitted to the same queue, or between the host and a queue. Events have two states - signaled and unsignaled. An application &lt;strong&gt;can&lt;/strong&gt; signal an event, or unsignal it, on either the host or the device. A device &lt;strong&gt;can&lt;/strong&gt; wait for an event to become signaled before executing further operations. No command exists to wait for an event to become signaled on the host, but the current state of an event &lt;strong&gt;can&lt;/strong&gt; be queried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9133680b5e361ea0ae366ea8e3e1aeed155d5390" translate="yes" xml:space="preserve">
          <source>Events are represented by &lt;code&gt;VkEvent&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd7d96374a45b3aa1935e7b84866686ff18db38" translate="yes" xml:space="preserve">
          <source>Every input attachment used by the current subpass &lt;strong&gt;must&lt;/strong&gt; be bound to the pipeline via a descriptor set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1656649117e437fcfba93420c2b3f76dd76878b7" translate="yes" xml:space="preserve">
          <source>Failure</source>
          <target state="translated">Failure</target>
        </trans-unit>
        <trans-unit id="dd1976283826aed05cd75e385714f88941f02b95" translate="yes" xml:space="preserve">
          <source>Fence and semaphore operations submitted with &lt;a href=&quot;#vkQueueSubmit&quot;&gt;vkQueueSubmit&lt;/a&gt; have additional ordering constraints compared to other submission commands, with dependencies involving previous and subsequent queue operations. Information about these additional constraints can be found in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-semaphores&quot;&gt;semaphore&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-fences&quot;&gt;fence&lt;/a&gt; sections of &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization&quot;&gt;the synchronization chapter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c9b0ab498bb7a037f9e68f4db942b21ee25e0c" translate="yes" xml:space="preserve">
          <source>Fences are a synchronization primitive that &lt;strong&gt;can&lt;/strong&gt; be used to insert a dependency from a queue to the host. Fences have two states - signaled and unsignaled. A fence &lt;strong&gt;can&lt;/strong&gt; be signaled as part of the execution of a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-submission&quot;&gt;queue submission&lt;/a&gt; command. Fences &lt;strong&gt;can&lt;/strong&gt; be unsignaled on the host with &lt;a href=&quot;#vkResetFences&quot;&gt;vkResetFences&lt;/a&gt;. Fences &lt;strong&gt;can&lt;/strong&gt; be waited on by the host with the &lt;a href=&quot;#vkWaitForFences&quot;&gt;vkWaitForFences&lt;/a&gt; command, and the current state &lt;strong&gt;can&lt;/strong&gt; be queried with &lt;a href=&quot;#vkGetFenceStatus&quot;&gt;vkGetFenceStatus&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bcbd0aff712ccb67f3fcb41f1dd7186d8accc3" translate="yes" xml:space="preserve">
          <source>Fences are represented by &lt;code&gt;VkFence&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c617ca0950b78e39dd4c7b51f1b4895375746005" translate="yes" xml:space="preserve">
          <source>Finally the source offset is added to the scaled coordinates, to determine the final unnormalized coordinates used to sample from &lt;code&gt;srcImage&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d728758adcdd5154d3be55552c1c061ef1489b2" translate="yes" xml:space="preserve">
          <source>Flags</source>
          <target state="translated">Flags</target>
        </trans-unit>
        <trans-unit id="a90661424b2966f54fabef322c869e3d5f290bdf" translate="yes" xml:space="preserve">
          <source>Following culling, fragments are produced for any triangles which have not been discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40368600262a79cecc77172ee3c9424ade49608" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt; and &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt; descriptor types, &lt;code&gt;offset&lt;/code&gt; is the base offset from which the dynamic offset is applied and &lt;code&gt;range&lt;/code&gt; is the static size used for all dynamic offsets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76320bf665b80451512ba42b12768c96eb21217" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;constantID&lt;/code&gt; specialization constant declared in a shader, &lt;code&gt;size&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; match the byte size of the &lt;code&gt;constantID&lt;/code&gt;. If the specialization constant is of type &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be the byte size of &lt;code&gt;VkBool32&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6defeec69524557db72a9978290f606f74da7c6d" translate="yes" xml:space="preserve">
          <source>For a given vertex buffer binding, any attribute data fetched &lt;strong&gt;must&lt;/strong&gt; be entirely contained within the corresponding vertex buffer binding, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fxvertex-input&quot;&gt;html/vkspec.html#fxvertex-input&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50d44be4244b58c1541b4e6aa73f189cdc98d1f" translate="yes" xml:space="preserve">
          <source>For all bitmasks of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt;, the sample count limits defined above represent the minimum supported sample counts for each image type. Individual images &lt;strong&gt;may&lt;/strong&gt; support additional sample counts, which are queried using &lt;a href=&quot;#vkGetPhysicalDeviceImageFormatProperties&quot;&gt;vkGetPhysicalDeviceImageFormatProperties&lt;/a&gt; as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-supported-sample-counts&quot;&gt;Supported Sample Counts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e813724e67fcdd6309d56bc4d51751b9a2d7b4" translate="yes" xml:space="preserve">
          <source>For any element of &lt;code&gt;pDependencies&lt;/code&gt;, if the &lt;code&gt;dstSubpass&lt;/code&gt; is not &lt;code&gt;VK_SUBPASS_EXTERNAL&lt;/code&gt;, all stage flags included in the &lt;code&gt;dstStageMask&lt;/code&gt; member of that dependency &lt;strong&gt;must&lt;/strong&gt; be a pipeline stage supported by the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-types&quot;&gt;pipeline&lt;/a&gt; identified by the &lt;code&gt;pipelineBindPoint&lt;/code&gt; member of the source subpass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8664f6616c1f518c700e411661975349a15dbeba" translate="yes" xml:space="preserve">
          <source>For any element of &lt;code&gt;pDependencies&lt;/code&gt;, if the &lt;code&gt;srcSubpass&lt;/code&gt; is not &lt;code&gt;VK_SUBPASS_EXTERNAL&lt;/code&gt;, all stage flags included in the &lt;code&gt;srcStageMask&lt;/code&gt; member of that dependency &lt;strong&gt;must&lt;/strong&gt; be a pipeline stage supported by the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-types&quot;&gt;pipeline&lt;/a&gt; identified by the &lt;code&gt;pipelineBindPoint&lt;/code&gt; member of the source subpass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68174835d0bad11a8de1544aea7aad073416d96d" translate="yes" xml:space="preserve">
          <source>For any given element of &lt;code&gt;pBinds&lt;/code&gt;, if the &lt;code&gt;flags&lt;/code&gt; member of that element contains &lt;code&gt;VK_SPARSE_MEMORY_BIND_METADATA_BIT&lt;/code&gt;, the binding range defined &lt;strong&gt;must&lt;/strong&gt; be within the mip tail region of the metadata aspect of &lt;code&gt;image&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132468c90b456bf97b6faf6bdaa8d6406e422057" translate="yes" xml:space="preserve">
          <source>For any given element of &lt;code&gt;pMapEntries&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;dataSize&lt;/code&gt; minus &lt;code&gt;offset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f618964c094c386e624cff26c82d50ef83320f7a" translate="yes" xml:space="preserve">
          <source>For any member of &lt;code&gt;pAttachments&lt;/code&gt; with a &lt;code&gt;loadOp&lt;/code&gt; equal to &lt;code&gt;VK_ATTACHMENT_LOAD_OP_CLEAR&lt;/code&gt;, the first use of that attachment &lt;strong&gt;must&lt;/strong&gt; not specify a &lt;code&gt;layout&lt;/code&gt; equal to &lt;code&gt;VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f06b94947307da4837f090538103d7072fe6082" translate="yes" xml:space="preserve">
          <source>For attachments however, subpass dependencies work more like an &lt;a href=&quot;#VkImageMemoryBarrier&quot;&gt;VkImageMemoryBarrier&lt;/a&gt; defined similarly to the &lt;a href=&quot;#VkMemoryBarrier&quot;&gt;VkMemoryBarrier&lt;/a&gt; above, the queue family indices set to &lt;code&gt;VK_QUEUE_FAMILY_IGNORED&lt;/code&gt;, and layouts as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe02eaaab4541dacb20a152e1b4591934c97a5b" translate="yes" xml:space="preserve">
          <source>For both &lt;a href=&quot;#vkCmdCopyBufferToImage&quot;&gt;vkCmdCopyBufferToImage&lt;/a&gt; and &lt;a href=&quot;#vkCmdCopyImageToBuffer&quot;&gt;vkCmdCopyImageToBuffer&lt;/a&gt;, each element of &lt;code&gt;pRegions&lt;/code&gt; is a structure defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1109d3694b136a09820a59627ef7e57d94278e" translate="yes" xml:space="preserve">
          <source>For color formats, the &lt;code&gt;aspectMask&lt;/code&gt; member of &lt;code&gt;VkImageSubresource&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_ASPECT_COLOR_BIT&lt;/code&gt;. For depth/stencil formats, &lt;code&gt;aspectMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be either &lt;code&gt;VK_IMAGE_ASPECT_DEPTH_BIT&lt;/code&gt; or &lt;code&gt;VK_IMAGE_ASPECT_STENCIL_BIT&lt;/code&gt;. On implementations that store depth and stencil aspects separately, querying each of these image subresource layouts will return a different &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; representing the region of memory used for that aspect. On implementations that store depth and stencil aspects interleaved, the same &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; are returned and represent the interleaved memory allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e809c16f32d1e72ffbb1af170215377f87dcc58" translate="yes" xml:space="preserve">
          <source>For compressed formats, the &lt;code&gt;rowPitch&lt;/code&gt; is the number of bytes between compressed texel blocks in adjacent rows. &lt;code&gt;arrayPitch&lt;/code&gt; is the number of bytes between compressed texel blocks in adjacent array layers. &lt;code&gt;depthPitch&lt;/code&gt; is the number of bytes between compressed texel blocks in adjacent slices of a 3D image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b24fc0385555703ab2e6a7ebe4de790e1abd40" translate="yes" xml:space="preserve">
          <source>For cube and cube array image views, the layers of the image view starting at &lt;code&gt;baseArrayLayer&lt;/code&gt; correspond to faces in the order +X, -X, +Y, -Y, +Z, -Z. For cube arrays, each set of six sequential layers is a single cube, so the number of cube maps in a cube map array view is &lt;em&gt;&lt;code&gt;layerCount&lt;/code&gt; / 6&lt;/em&gt;, and image array layer (&lt;code&gt;baseArrayLayer&lt;/code&gt; + i) is face index (i mod 6) of cube &lt;em&gt;i / 6&lt;/em&gt;. If the number of layers in the view, whether set explicitly in &lt;code&gt;layerCount&lt;/code&gt; or implied by &lt;code&gt;VK_REMAINING_ARRAY_LAYERS&lt;/code&gt;, is not a multiple of 6, behavior when indexing the last cube is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfce86242fad72dbae179bc11a5ebd974513ea9a" translate="yes" xml:space="preserve">
          <source>For each destination texel, the integer coordinate of that texel is converted to an unnormalized texture coordinate, using the effective inverse of the equations described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#textures-unnormalized-to-integer&quot;&gt;unnormalized to integer conversion&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1eb848d1419d1a65543af1791c68c4193fdda7" translate="yes" xml:space="preserve">
          <source>For each element of the &lt;code&gt;pRegions&lt;/code&gt; array, a blit operation is performed the specified source and destination regions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8e7e7ced76365c9f0b220af8b5540a13162904" translate="yes" xml:space="preserve">
          <source>For each mechanism of accessing an image in the API, there is a parameter or structure member that controls the image layout used to access the image. For transfer commands, this is a parameter to the command (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#clears&quot;&gt;html/vkspec.html#clears&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#copies&quot;&gt;html/vkspec.html#copies&lt;/a&gt;). For use as a framebuffer attachment, this is a member in the substructures of the &lt;code&gt;VkRenderPassCreateInfo&lt;/code&gt; (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#renderpass&quot;&gt;Render Pass&lt;/a&gt;). For use in a descriptor set, this is a member in the &lt;code&gt;VkDescriptorImageInfo&lt;/code&gt; structure (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-updates&quot;&gt;html/vkspec.html#descriptorsets-updates&lt;/a&gt;). At the time that any command buffer command accessing an image executes on any queue, the layouts of the image subresources that are accessed &lt;strong&gt;must&lt;/strong&gt; all match the layout specified via the API controlling those accesses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72bae46594d37a433193ae39adc36a82a733de3" translate="yes" xml:space="preserve">
          <source>For each push constant that is statically used by the &lt;code&gt;VkPipeline&lt;/code&gt; currently bound to &lt;code&gt;VK_PIPELINE_BIND_POINT_COMPUTE&lt;/code&gt;, a push constant value &lt;strong&gt;must&lt;/strong&gt; have been set for &lt;code&gt;VK_PIPELINE_BIND_POINT_COMPUTE&lt;/code&gt;, with a &lt;code&gt;VkPipelineLayout&lt;/code&gt; that is compatible for push constants with the one used to create the current &lt;code&gt;VkPipeline&lt;/code&gt;, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-compatibility&quot;&gt;html/vkspec.html#descriptorsets-compatibility&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a4d14fef249f84154ab6d6639c93941925d48b" translate="yes" xml:space="preserve">
          <source>For each push constant that is statically used by the &lt;code&gt;VkPipeline&lt;/code&gt; currently bound to &lt;code&gt;VK_PIPELINE_BIND_POINT_GRAPHICS&lt;/code&gt;, a push constant value &lt;strong&gt;must&lt;/strong&gt; have been set for &lt;code&gt;VK_PIPELINE_BIND_POINT_GRAPHICS&lt;/code&gt;, with a &lt;code&gt;VkPipelineLayout&lt;/code&gt; that is compatible for push constants, with the &lt;code&gt;VkPipelineLayout&lt;/code&gt; used to create the current &lt;code&gt;VkPipeline&lt;/code&gt;, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-compatibility&quot;&gt;html/vkspec.html#descriptorsets-compatibility&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1590f09b60aa832be698eba86a8d55554c7686b" translate="yes" xml:space="preserve">
          <source>For each set &lt;em&gt;n&lt;/em&gt; that is statically used by the &lt;code&gt;VkPipeline&lt;/code&gt; currently bound to &lt;code&gt;VK_PIPELINE_BIND_POINT_COMPUTE&lt;/code&gt;, a descriptor set &lt;strong&gt;must&lt;/strong&gt; have been bound to &lt;em&gt;n&lt;/em&gt; at &lt;code&gt;VK_PIPELINE_BIND_POINT_COMPUTE&lt;/code&gt;, with a &lt;code&gt;VkPipelineLayout&lt;/code&gt; that is compatible for set &lt;em&gt;n&lt;/em&gt;, with the &lt;code&gt;VkPipelineLayout&lt;/code&gt; used to create the current &lt;code&gt;VkPipeline&lt;/code&gt;, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-compatibility&quot;&gt;html/vkspec.html#descriptorsets-compatibility&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c56003e51efff8867e9b3821fb0e57b45647c47" translate="yes" xml:space="preserve">
          <source>For each set &lt;em&gt;n&lt;/em&gt; that is statically used by the &lt;code&gt;VkPipeline&lt;/code&gt; currently bound to &lt;code&gt;VK_PIPELINE_BIND_POINT_GRAPHICS&lt;/code&gt;, a descriptor set &lt;strong&gt;must&lt;/strong&gt; have been bound to &lt;em&gt;n&lt;/em&gt; at &lt;code&gt;VK_PIPELINE_BIND_POINT_GRAPHICS&lt;/code&gt;, with a &lt;code&gt;VkPipelineLayout&lt;/code&gt; that is compatible for set &lt;em&gt;n&lt;/em&gt;, with the &lt;code&gt;VkPipelineLayout&lt;/code&gt; used to create the current &lt;code&gt;VkPipeline&lt;/code&gt;, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-compatibility&quot;&gt;html/vkspec.html#descriptorsets-compatibility&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea91b720d77bab2d7a4740e7d37354009576b8d" translate="yes" xml:space="preserve">
          <source>For every &lt;code&gt;binding&lt;/code&gt; specified by any given element of &lt;code&gt;pVertexAttributeDescriptions&lt;/code&gt;, a &lt;code&gt;VkVertexInputBindingDescription&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; exist in &lt;code&gt;pVertexBindingDescriptions&lt;/code&gt; with the same value of &lt;code&gt;binding&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3fc61508825fb56add128e8d0efc8cdd34f130" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;pfnAllocation&lt;/code&gt; (or &lt;code&gt;pfnReallocation&lt;/code&gt;) could cause termination of running Vulkan instance(s) on a failed allocation for debugging purposes, either directly or indirectly. In these circumstances, it &lt;strong&gt;cannot&lt;/strong&gt; be assumed that any part of any affected VkInstance objects are going to operate correctly (even &lt;a href=&quot;#vkDestroyInstance&quot;&gt;vkDestroyInstance&lt;/a&gt;), and the application &lt;strong&gt;must&lt;/strong&gt; ensure it cleans up properly via other means (e.g. process termination).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7031ff4422a3e013e0320b4796ac18c4b2c1cd5a" translate="yes" xml:space="preserve">
          <source>For example, if a query has been used previously and a command buffer records the commands &lt;code&gt;vkCmdResetQueryPool&lt;/code&gt;, &lt;code&gt;vkCmdBeginQuery&lt;/code&gt;, and &lt;code&gt;vkCmdEndQuery&lt;/code&gt; for that query, then the query will remain in the available state until the &lt;code&gt;vkCmdResetQueryPool&lt;/code&gt; command executes on a queue. Applications &lt;strong&gt;can&lt;/strong&gt; use fences or events to ensure that a query has already been reset before checking for its results or availability status. Otherwise, a stale value could be returned from a previous use of the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da62a91cb3c4b44b45febef0eff74d5deefebd1" translate="yes" xml:space="preserve">
          <source>For example, if this value is 2 bits then when linearly filtering between two levels, each level could: contribute: 0%, 33%, 66%, or 100% (this is just an example and the amount of contribution &lt;strong&gt;should&lt;/strong&gt; be covered by different equations in the spec).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b653b086d4881474d4bde6c547d26fee0a29bdc6" translate="yes" xml:space="preserve">
          <source>For example, tile-based rendering devices &lt;strong&gt;may&lt;/strong&gt; need to replay the scene multiple times, affecting some of the counts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec56bc7f8b266b7dcdb1907d211d2b9d1501421" translate="yes" xml:space="preserve">
          <source>For fixed-point depth buffer representations, r is constant throughout the range of the entire depth buffer. For floating-point depth buffers, there is no single minimum resolvable difference. In this case, the minimum resolvable difference for a given polygon is dependent on the maximum exponent, e, in the range of z values spanned by the primitive. If n is the number of bits in the floating-point mantissa, the minimum resolvable difference, r, for the given primitive is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077e1870ef0b1eb919f0b948d3755d6dab388ca5" translate="yes" xml:space="preserve">
          <source>For fixed-point depth buffers, fragment depth values are always limited to the range [0,1] by clamping after depth bias addition is performed. Fragment depth values are clamped even when the depth buffer uses a floating-point representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c4874b54a8f8a53c2d2182b4c510a4164db5db" translate="yes" xml:space="preserve">
          <source>For further details see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-queues&quot;&gt;Queues&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715724a9531cec74ff8589df4a14c719b2c8f6e8" translate="yes" xml:space="preserve">
          <source>For images created with linear tiling, &lt;code&gt;rowPitch&lt;/code&gt;, &lt;code&gt;arrayPitch&lt;/code&gt; and &lt;code&gt;depthPitch&lt;/code&gt; describe the layout of the image subresource in linear memory. For uncompressed formats, &lt;code&gt;rowPitch&lt;/code&gt; is the number of bytes between texels with the same x coordinate in adjacent rows (y coordinates differ by one). &lt;code&gt;arrayPitch&lt;/code&gt; is the number of bytes between texels with the same x and y coordinate in adjacent array layers of the image (array layer values differ by one). &lt;code&gt;depthPitch&lt;/code&gt; is the number of bytes between texels with the same x and y coordinate in adjacent slices of a 3D image (z coordinates differ by one). Expressed as an addressing formula, the starting byte of a texel in the image subresource has address:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e34edf6edf38b8c6f492ad3eacbb5a13fa3cfce" translate="yes" xml:space="preserve">
          <source>For more information, see the Vulkan Specification at URL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a5a3a940954e13d5ef8b86ac1eb2715ef433a2" translate="yes" xml:space="preserve">
          <source>For non-attachment resources, the memory dependency expressed by subpass dependency is nearly identical to that of a &lt;a href=&quot;#VkMemoryBarrier&quot;&gt;VkMemoryBarrier&lt;/a&gt; (with matching &lt;code&gt;srcAccessMask&lt;/code&gt;/&lt;code&gt;dstAccessMask&lt;/code&gt; parameters) submitted as a part of a &lt;a href=&quot;#vkCmdPipelineBarrier&quot;&gt;vkCmdPipelineBarrier&lt;/a&gt; (with matching &lt;code&gt;srcStageMask&lt;/code&gt;/&lt;code&gt;dstStageMask&lt;/code&gt; parameters). The only difference being that its scopes are limited to the identified subpasses rather than potentially affecting everything before and after.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1fed9739f6711b55211622d9ee3ca19a8320ac0" translate="yes" xml:space="preserve">
          <source>For physical device feature queries see the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features&quot;&gt;Features&lt;/a&gt; chapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8357081bebf75a045412230e2f164f26c7570596" translate="yes" xml:space="preserve">
          <source>For purposes of increment and decrement, the stencil bits are considered as an unsigned integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4713762823a558ac64a72e179c736f45c0757fff" translate="yes" xml:space="preserve">
          <source>For purposes of physical device identification, the &lt;em&gt;vendor&lt;/em&gt; of a physical device is the entity responsible for the most salient characteristics of the hardware represented by the physical device handle. In the case of a discrete GPU, this &lt;strong&gt;should&lt;/strong&gt; be the GPU chipset vendor. In the case of a GPU or other accelerator integrated into a system-on-chip (SoC), this &lt;strong&gt;should&lt;/strong&gt; be the supplier of the silicon IP used to create the GPU or other accelerator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b547e9962cc3ad8a4a15d5b85ec999f9e56fa015" translate="yes" xml:space="preserve">
          <source>For sRGB source formats, nonlinear RGB values are converted to linear representation prior to filtering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fb35822e87ce9e1eb3e2358533711de23c855b" translate="yes" xml:space="preserve">
          <source>Format conversions on unorm, snorm, unscaled and packed float formats of the copied aspect of the image are performed by first converting the pixels to float values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2714fa0959944190d1187b2cfc6180ed445e39c" translate="yes" xml:space="preserve">
          <source>Fragmentation of a descriptor pool is possible and &lt;strong&gt;may&lt;/strong&gt; lead to descriptor set allocation failures. A failure due to fragmentation is defined as failing a descriptor set allocation despite the sum of all outstanding descriptor set allocations from the pool plus the requested allocation requiring no more than the total number of descriptors requested at pool creation. Implementations provide certain guarantees of when fragmentation &lt;strong&gt;must&lt;/strong&gt; not cause allocation failure, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dded717f8d1e0400c2b64aaa1bc3be2a5c2366b1" translate="yes" xml:space="preserve">
          <source>Framebuffers are represented by &lt;code&gt;VkFramebuffer&lt;/code&gt; handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9581f13ba8fc89e52a8dabcd19de41e8ce1a88a" translate="yes" xml:space="preserve">
          <source>Function Pointer Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b04d1bcaf065e8c93a88cc4240166f88cd3457" translate="yes" xml:space="preserve">
          <source>G = G&lt;sub&gt;d&lt;/sub&gt; &amp;times; D&lt;sub&gt;g&lt;/sub&gt; - G&lt;sub&gt;s0&lt;/sub&gt; &amp;times; S&lt;sub&gt;g&lt;/sub&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de8cae6b7579029f375daf93b4aa8f42cff9ca3" translate="yes" xml:space="preserve">
          <source>G = G&lt;sub&gt;s0&lt;/sub&gt; &amp;times; S&lt;sub&gt;g&lt;/sub&gt; + G&lt;sub&gt;d&lt;/sub&gt; &amp;times; D&lt;sub&gt;g&lt;/sub&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc453a544e49e7147d2eea1fac94c7febdb253f5" translate="yes" xml:space="preserve">
          <source>G = G&lt;sub&gt;s0&lt;/sub&gt; &amp;times; S&lt;sub&gt;g&lt;/sub&gt; - G&lt;sub&gt;d&lt;/sub&gt; &amp;times; D&lt;sub&gt;g&lt;/sub&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac9470d5f35a61808a07df73fef6de8dc799f4b" translate="yes" xml:space="preserve">
          <source>G = max(G&lt;sub&gt;s0&lt;/sub&gt;,G&lt;sub&gt;d&lt;/sub&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93503ca62f450353f35c0bf3bd37098ef43d874" translate="yes" xml:space="preserve">
          <source>G = min(G&lt;sub&gt;s0&lt;/sub&gt;,G&lt;sub&gt;d&lt;/sub&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab255c27aec8dfb7cbe347babe25d68cec1ce7a6" translate="yes" xml:space="preserve">
          <source>Graphics</source>
          <target state="translated">Graphics</target>
        </trans-unit>
        <trans-unit id="1f9f4006672638cc20518bc8dfce22f1ce1ddca4" translate="yes" xml:space="preserve">
          <source>Host Synchronization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4792321fb9236b9169a8dada4e53707c7bac45ea" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;buffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7282cb0e02f4654c4594065ad1145ae809e3ef" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;bufferView&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec5053fc825b1530442cea8dc8daf7f037e8096" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872cc18bd4d368e433113f16f6fcc34ed06042f9" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;commandPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7271f0012c49c06674da6f5240180ff8082f4b21" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;descriptorPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa05cdb0d83db9ca79e53bf86ca46a8ef039f975" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;descriptorSetLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6f72a61b7f8bcb8574266aa089d660b90d358c" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;device&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac5b626237fe8352914b2870be84c7fbad52ad8" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;dstCache&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f58d5efa94f5dd58621b3d608153aa24e36b28f" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;event&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3182e3be9633350fa103de959880aef62a6e1a" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;fence&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb37107d55cc95a7e6324fef48311702e8a799c8" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;framebuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223ed6fb37c36bf33d5545c80d354a8aeddfa1af" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e9535b90308689032c71b587df01f52eb5d3ce" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;imageView&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63ad1260f471369d777dc9891df506018933c41" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;instance&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3d08cd3a5d3834c5407905e2162ac10131a897" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;memory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe703687d977963db56a120e103d191f58fe2b2" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pAllocateInfo&lt;/code&gt;::commandPool &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba6f0f37472f8f08e1868ee02ea61b5148e30ae" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pAllocateInfo&lt;/code&gt;::descriptorPool &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99c5c9573ad06312f775112d20d96b10d573a28" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pBindInfo&lt;/code&gt;[].pBufferBinds[].buffer &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b697850e2595c5927c7d187e367e2ab91a591e3" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pBindInfo&lt;/code&gt;[].pImageBinds[].image &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e125cee5ac0038b2c344be80d189e067a6eacaee" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pBindInfo&lt;/code&gt;[].pImageOpaqueBinds[].image &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8006457c2be25a2119d9f239b962d9b11621ef02" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pBindInfo&lt;/code&gt;[].pSignalSemaphores[] &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6ca1a315b883d9f248e622add36dab0fbb7387" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pBindInfo&lt;/code&gt;[].pWaitSemaphores[] &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ed54586384c12b1b5b5a8a92e9d7bd49e2cb00" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pDescriptorCopies&lt;/code&gt;[].dstSet &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ec7bc028a3d58e736ec33e07ac0030dce4164d" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pDescriptorWrites&lt;/code&gt;[].dstSet &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903f1f3ceb32a2b20213128c4995ef00cf28ba0e" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pSubmits&lt;/code&gt;[].pSignalSemaphores[] &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6368de01dd24ae547fa3c0cf9d95b1031196eed7" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pSubmits&lt;/code&gt;[].pWaitSemaphores[] &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced6068a45710d91f20efd0baeeb0690eb382aa4" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pipeline&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b6ecb4d8f885335801bfcb5856d0b734c6dd02" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pipelineCache&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdc8c18aecb0043b84c2cfca292cb9adef7fa84" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;pipelineLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8a64475d966c9d6d900a96c1e38ce78c5a92e0" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;queryPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08cd8b88ddb1436f63edad495204ab8227778e08" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;queue&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644a208b2be127874209902af7efa87a327c59e8" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;renderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfdc61894a1779bc6e36054c425663836599c02" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;sampler&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2e4c0061ef67e0fcd3029600ba661634588e15" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;semaphore&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d077ea8dbd8a7194f5a559089f13eec809d6f3d" translate="yes" xml:space="preserve">
          <source>Host access to &lt;code&gt;shaderModule&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e05274e9570eba5a9da7bd6790c41c52b0b1c4" translate="yes" xml:space="preserve">
          <source>Host access to all &lt;code&gt;VkQueue&lt;/code&gt; objects created from &lt;code&gt;device&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b06b284a56dec496249eec58a919b8ef18e3da3" translate="yes" xml:space="preserve">
          <source>Host access to any &lt;code&gt;VkDescriptorSet&lt;/code&gt; objects allocated from &lt;code&gt;descriptorPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81557566c952c3b43a9736a61a3affcb5cd43a90" translate="yes" xml:space="preserve">
          <source>Host access to each member of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9975dd3a61c35176ad34580eb2017152bd065f39" translate="yes" xml:space="preserve">
          <source>Host access to each member of &lt;code&gt;pDescriptorSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16462a0e85dd09afd6ca08a470885f833ddba823" translate="yes" xml:space="preserve">
          <source>Host access to each member of &lt;code&gt;pFences&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14411d1fbc22687fa5ddfa7e56af5cd6b4d5a27c" translate="yes" xml:space="preserve">
          <source>Host access to the &lt;code&gt;VkCommandPool&lt;/code&gt; that &lt;code&gt;commandBuffer&lt;/code&gt; was allocated from &lt;strong&gt;must&lt;/strong&gt; be externally synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bed3f8be76658263fc7eaf91ffdbc945f892c9e" translate="yes" xml:space="preserve">
          <source>How memory objects are bound to Images and Buffers is described in detail in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-association&quot;&gt;Resource Memory Association&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5beafdbfbee2e5843d4836b969157778a51da2" translate="yes" xml:space="preserve">
          <source>Identity Mapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1766900d16c5e7d2863094495fba348d046b555b" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#vkCmdPipelineBarrier&quot;&gt;vkCmdPipelineBarrier&lt;/a&gt; was recorded outside a render pass instance, the first &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-dependencies-scopes&quot;&gt;synchronization scope&lt;/a&gt; includes every command submitted to the same queue before it, including those in the same command buffer and batch. If &lt;a href=&quot;#vkCmdPipelineBarrier&quot;&gt;vkCmdPipelineBarrier&lt;/a&gt; was recorded inside a render pass instance, the first synchronization scope includes only commands submitted before it within the same subpass. In either case, the first synchronization scope is limited to operations on the pipeline stages determined by the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-masks&quot;&gt;source stage mask&lt;/a&gt; specified by &lt;code&gt;srcStageMask&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee574f515be276ce5ff043e7c8ff14aa5008909" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#vkCmdPipelineBarrier&quot;&gt;vkCmdPipelineBarrier&lt;/a&gt; was recorded outside a render pass instance, the second &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-dependencies-scopes&quot;&gt;synchronization scope&lt;/a&gt; includes every command submitted to the same queue after it, including those in the same command buffer and batch. If &lt;a href=&quot;#vkCmdPipelineBarrier&quot;&gt;vkCmdPipelineBarrier&lt;/a&gt; was recorded inside a render pass instance, the second synchronization scope includes only commands submitted after it within the same subpass. In either case, the second synchronization scope is limited to operations on the pipeline stages determined by the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-masks&quot;&gt;destination stage mask&lt;/a&gt; specified by &lt;code&gt;dstStageMask&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10cbd45cadf8ce59f4bd84ea27c2f08ff35048aa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; is not supported for the given arguments, &lt;code&gt;pPropertyCount&lt;/code&gt; will be set to zero upon return, and no data will be written to &lt;code&gt;pProperties&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed79fedc6e8548761cf683e64b8da15e3e2ff3b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_64_BIT&lt;/code&gt; is not set and the result overflows a 32-bit value, the value &lt;strong&gt;may&lt;/strong&gt; either wrap or saturate. Similarly, if &lt;code&gt;VK_QUERY_RESULT_64_BIT&lt;/code&gt; is set and the result overflows a 64-bit value, the value &lt;strong&gt;may&lt;/strong&gt; either wrap or saturate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ad6e0e92b99687d34af5f1b6ffa502f815e0d1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_64_BIT&lt;/code&gt; is not set in &lt;code&gt;flags&lt;/code&gt; then &lt;code&gt;dstOffset&lt;/code&gt; and &lt;code&gt;stride&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be multiples of &lt;code&gt;4&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1834e0890c79b83829e1b6381c2e346b5ca0a8d6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_64_BIT&lt;/code&gt; is not set in &lt;code&gt;flags&lt;/code&gt; then &lt;code&gt;pData&lt;/code&gt; and &lt;code&gt;stride&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be multiples of &lt;code&gt;4&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9269165dfce03cea6cc73c95885ba895018ec317" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_64_BIT&lt;/code&gt; is set in &lt;code&gt;flags&lt;/code&gt; then &lt;code&gt;dstOffset&lt;/code&gt; and &lt;code&gt;stride&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be multiples of &lt;code&gt;8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d53e14962a201ffcace813c0ddc54dd43ef8d8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_64_BIT&lt;/code&gt; is set in &lt;code&gt;flags&lt;/code&gt; then &lt;code&gt;pData&lt;/code&gt; and &lt;code&gt;stride&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be multiples of &lt;code&gt;8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2357a836815abc6c64a74b2d52c2a3a8bdc748be" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_64_BIT&lt;/code&gt; is set, the results are written as an array of 64-bit unsigned integer values as described for &lt;a href=&quot;#vkGetQueryPoolResults&quot;&gt;vkGetQueryPoolResults&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d28be8083344bdd27c002dbd4878431d46e01a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_PARTIAL_BIT&lt;/code&gt; is set, &lt;code&gt;VK_QUERY_RESULT_WAIT_BIT&lt;/code&gt; is not set, and the query&amp;rsquo;s status is unavailable, an intermediate result value between zero and the final result value is written for that query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1390716add076ae1654e1046d48b96abb468f3da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_PARTIAL_BIT&lt;/code&gt; is set, &lt;code&gt;VK_QUERY_RESULT_WAIT_BIT&lt;/code&gt; is not set, and the query&amp;rsquo;s status is unavailable, an intermediate result value between zero and the final result value is written to &lt;code&gt;pData&lt;/code&gt; for that query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed306a7d3f99da6b5d07cfba12968f06be901a3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_WAIT_BIT&lt;/code&gt; and &lt;code&gt;VK_QUERY_RESULT_PARTIAL_BIT&lt;/code&gt; are both not set then no result values are written to &lt;code&gt;pData&lt;/code&gt; for queries that are in the unavailable state at the time of the call, and &lt;code&gt;vkGetQueryPoolResults&lt;/code&gt; returns &lt;code&gt;VK_NOT_READY&lt;/code&gt;. However, availability state is still written to &lt;code&gt;pData&lt;/code&gt; for those queries if &lt;code&gt;VK_QUERY_RESULT_WITH_AVAILABILITY_BIT&lt;/code&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a873b0d2ece06d79512f0d29c02afc922a3c311" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_WAIT_BIT&lt;/code&gt; is set, Vulkan will wait for each query to be in the available state before retrieving the numerical results for that query. In this case, &lt;code&gt;vkGetQueryPoolResults&lt;/code&gt; is guaranteed to succeed and return &lt;code&gt;VK_SUCCESS&lt;/code&gt; if the queries become available in a finite time (i.e. if they have been issued and not reset). If queries will never finish (e.g. due to being reset but not issued), then &lt;code&gt;vkGetQueryPoolResults&lt;/code&gt;&lt;strong&gt;may&lt;/strong&gt; not return in finite time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62218efbfb00911920d447dccd5e3c9f5cce9821" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_WAIT_BIT&lt;/code&gt; is set, the implementation will wait for each query&amp;rsquo;s status to be in the available state before retrieving the numerical results for that query. This is guaranteed to reflect the most recent use of the query on the same queue, assuming that the query is not being simultaneously used by other queues. If the query does not become available in a finite amount of time (e.g. due to not issuing a query since the last reset), a &lt;code&gt;VK_ERROR_DEVICE_LOST&lt;/code&gt; error &lt;strong&gt;may&lt;/strong&gt; occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a1ded63e6f04379610f45badbe3fdcafb7ba70" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_QUERY_RESULT_WITH_AVAILABILITY_BIT&lt;/code&gt; is set, the final integer value written for each query is non-zero if the query&amp;rsquo;s status was available or zero if the status was unavailable. When &lt;code&gt;VK_QUERY_RESULT_WITH_AVAILABILITY_BIT&lt;/code&gt; is used, implementations &lt;strong&gt;must&lt;/strong&gt; guarantee that if they return a non-zero availability value then the numerical results &lt;strong&gt;must&lt;/strong&gt; be valid, assuming the results are not reset by a subsequent command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61353d50d46e054f061415fe8657176cdbcb479" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT&lt;/code&gt; is set the dimensions of mip levels &lt;strong&gt;must&lt;/strong&gt; be integer multiples of the corresponding dimensions of the sparse image block for levels not located in the mip tail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4079f428385b28ea54158bfca2ba36d5314aa28" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT&lt;/code&gt; is set the image uses non-standard sparse image block dimensions. The &lt;code&gt;formatProperties.imageGranularity&lt;/code&gt; values do not match the standard sparse image block dimension corresponding to the image&amp;rsquo;s pixel format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dafe64c8a1cf833ffd74ffa850933ba31c36ed5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT&lt;/code&gt; is set the image uses a single mip tail region for all array layers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2078ab7bd966144c4103f3151c26edf3cac6c3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;buffer&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf806e24ea03297faded374d8f50d7bf3b4fc57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;bufferView&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c7cc5fa6f36a1acc9840a482edc040aac07b14" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;commandPool&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b1995f97a7f69a6e67439e6381b065fd868350" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;descriptorPool&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4152128f18a206f1824cbc34e2d673e00672d763" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;descriptorSetLayout&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f6d430fc3fca5e8697b818d2783e27e4ddc6e0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;device&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d9198ff39e0b459894721b5f9237954b42a51c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;event&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194cc7c09c988b66d4b77079c2180f7b36528759" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;fence&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa80ebfc91f20b5ea9bdb6b6825783dc45a04cc7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;framebuffer&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9beb39652fe5f0e57a60c1a631b85801be19e786" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;image&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a199d244fcb6700757f40d17bfeeaad07cc3ae5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;imageView&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9d0c4ad1caa1eee6aef8b26c35c33f05bada03" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;instance&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae1ed7cb4762486d0b75f76c2888e873b0dd5cd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;pipeline&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131084a277f3e9a3ab424ba383b8a4f8a1620f08" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;pipelineCache&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfe2ec239ad1af338440ea8bf3d8194e9ec0c4c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;pipelineLayout&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e4c914e295ae645ce99a1b7205561ce0d3a2ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;queryPool&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017280f0f018525ac5927450537af1eb82af97d7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;renderPass&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3067ccf19380efbe93d3ef9d78078fd91c2f86" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;sampler&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eded5781b3793f0b60168b2f4695dac2ad386fd8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;semaphore&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b25edff18f5533be422575ecf5f639e55f9651b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; were provided when &lt;code&gt;shaderModule&lt;/code&gt; was created, a compatible set of callbacks &lt;strong&gt;must&lt;/strong&gt; be provided here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edba7533b754df5765b9d0952dfeef71ab5f82fd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;anisotropyEnable&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt;, &lt;code&gt;maxAnisotropy&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be between &lt;code&gt;1.0&lt;/code&gt; and &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxSamplerAnisotropy&lt;/code&gt;, inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8acb728b035158785b0e8921a40f2a05c3deb7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;aspectMask&lt;/code&gt; contains &lt;code&gt;VK_IMAGE_ASPECT_COLOR_BIT&lt;/code&gt;, it &lt;strong&gt;must&lt;/strong&gt; not contain either of &lt;code&gt;VK_IMAGE_ASPECT_DEPTH_BIT&lt;/code&gt; or &lt;code&gt;VK_IMAGE_ASPECT_STENCIL_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ad28f50c22b0b98326d596ddce227cc091d764" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;aspectMask&lt;/code&gt; includes &lt;code&gt;VK_IMAGE_ASPECT_COLOR_BIT&lt;/code&gt;, it &lt;strong&gt;must&lt;/strong&gt; not include &lt;code&gt;VK_IMAGE_ASPECT_DEPTH_BIT&lt;/code&gt; or &lt;code&gt;VK_IMAGE_ASPECT_STENCIL_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e745edc818409ba8e02169b75d74b53c17faa60" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;attachmentCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;attachmentCount&lt;/code&gt; valid &lt;code&gt;VkAttachmentDescription&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae017d02709fa14feb42f4c9021d9511cfc7c1c7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;attachmentCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;attachmentCount&lt;/code&gt; valid &lt;code&gt;VkImageView&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302dd4844d275124f17877753d66f9943214117b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;attachmentCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;attachmentCount&lt;/code&gt; valid &lt;code&gt;VkPipelineColorBlendAttachmentState&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e60c1ac4e4e8a7471cb19419eee9270b4f5ecde" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bindInfoCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pBindInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;bindInfoCount&lt;/code&gt; valid &lt;code&gt;VkBindSparseInfo&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47e63e81a86f810133780e69521e22487aeac0d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bindingCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pBindings&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;bindingCount&lt;/code&gt; valid &lt;code&gt;VkDescriptorSetLayoutBinding&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa8f7de004b39a609af8d6c2fabfd4f3da72145" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; is a valid handle, it &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee0dcc7aab06e3eb750e7ae2ad5aa6d3a1224b6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; is non-sparse then it &lt;strong&gt;must&lt;/strong&gt; be bound completely and contiguously to a single &lt;code&gt;VkDeviceMemory&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d134256e24aaeac235a3424fb044a1e64f873ada" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;buffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkBuffer&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192805793d1bfcb997ef09d9704be52f180ec890" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; was created with &lt;code&gt;usage&lt;/code&gt; containing &lt;code&gt;VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be supported for storage texel buffers, as specified by the &lt;code&gt;VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT&lt;/code&gt; flag in &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;bufferFeatures&lt;/code&gt; returned by &lt;code&gt;vkGetPhysicalDeviceFormatProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848e6dfb5478cb8df4b0aebcd3415d9dea3942a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; was created with &lt;code&gt;usage&lt;/code&gt; containing &lt;code&gt;VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be supported for uniform texel buffers, as specified by the &lt;code&gt;VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT&lt;/code&gt; flag in &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;bufferFeatures&lt;/code&gt; returned by &lt;code&gt;vkGetPhysicalDeviceFormatProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a86fd576c90708a60ff42f063d89cf9f91202f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; was created with a sharing mode of &lt;code&gt;VK_SHARING_MODE_CONCURRENT&lt;/code&gt;, &lt;code&gt;srcQueueFamilyIndex&lt;/code&gt; and &lt;code&gt;dstQueueFamilyIndex&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; both be &lt;code&gt;VK_QUEUE_FAMILY_IGNORED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baac633b14b6a555d23fc8637c34a5024525f752" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; was created with a sharing mode of &lt;code&gt;VK_SHARING_MODE_EXCLUSIVE&lt;/code&gt;, &lt;code&gt;srcQueueFamilyIndex&lt;/code&gt; and &lt;code&gt;dstQueueFamilyIndex&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; either both be &lt;code&gt;VK_QUEUE_FAMILY_IGNORED&lt;/code&gt;, or both be a valid queue family (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-queueprops&quot;&gt;html/vkspec.html#devsandqueues-queueprops&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deeb2a6d4be07e62a2850577dc21a0bb46404301" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; was created with a sharing mode of &lt;code&gt;VK_SHARING_MODE_EXCLUSIVE&lt;/code&gt;, and &lt;code&gt;srcQueueFamilyIndex&lt;/code&gt; and &lt;code&gt;dstQueueFamilyIndex&lt;/code&gt; are not &lt;code&gt;VK_QUEUE_FAMILY_IGNORED&lt;/code&gt;, at least one of them &lt;strong&gt;must&lt;/strong&gt; be the same as the family of the queue that will execute this barrier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8307011670dd07cbb56d647a1612ca10830ede" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; was created with the &lt;code&gt;VK_BUFFER_USAGE_STORAGE_BUFFER_BIT&lt;/code&gt;, &lt;code&gt;memoryOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;minStorageBufferOffsetAlignment&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9310522bd302817c52bd7b821806002a90e9394d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; was created with the &lt;code&gt;VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT&lt;/code&gt;, &lt;code&gt;memoryOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;minUniformBufferOffsetAlignment&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75b6546b50b64d1e1051ae45ed9b9ac9456aeba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; was created with the &lt;code&gt;VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT&lt;/code&gt; or &lt;code&gt;VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT&lt;/code&gt;, &lt;code&gt;memoryOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;minTexelBufferOffsetAlignment&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0689497ea510a429b9f78b960e0b9853702ca15b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferBindCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pBufferBinds&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;bufferBindCount&lt;/code&gt; valid &lt;code&gt;VkSparseBufferMemoryBindInfo&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bbd6768d1bd3f56cb1b3fa2be6f826c71b4a0f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferMemoryBarrierCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pBufferMemoryBarriers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;bufferMemoryBarrierCount&lt;/code&gt; valid &lt;code&gt;VkBufferMemoryBarrier&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc641114f8213528d3bb98cadbbcf5afa4fd142" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferView&lt;/code&gt; is a valid handle, it &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cbf4aa1e55ef3ff303932a099938406d5b346b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferView&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;bufferView&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkBufferView&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc9effa0ba7162ed3467d4aff5e03120b4321b7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;clearValueCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pClearValues&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;clearValueCount&lt;/code&gt; valid &lt;code&gt;VkClearValue&lt;/code&gt; unions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cee4faa5b5a3ca49565f65695fa95288455f5c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;colorAttachmentCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pColorAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;colorAttachmentCount&lt;/code&gt; valid &lt;code&gt;VkAttachmentReference&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c516cdff28ddcb4c69ca8ee0410fde738095f4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;colorAttachmentCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;pResolveAttachments&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;pResolveAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;colorAttachmentCount&lt;/code&gt; valid &lt;code&gt;VkAttachmentReference&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3438735ef0c0e9d34e16374302d81cd40f9e204" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandBuffer&lt;/code&gt; has a &lt;code&gt;VK_QUERY_TYPE_OCCLUSION&lt;/code&gt; query &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-operation-active&quot;&gt;active&lt;/a&gt;, then each element of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been recorded with &lt;code&gt;VkCommandBufferInheritanceInfo&lt;/code&gt;::&lt;code&gt;occlusionQueryEnable&lt;/code&gt; set to &lt;code&gt;VK_TRUE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea0ca94cd10edc078cb1be2dc4a5c4dba5b448c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandBuffer&lt;/code&gt; has a &lt;code&gt;VK_QUERY_TYPE_OCCLUSION&lt;/code&gt; query &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-operation-active&quot;&gt;active&lt;/a&gt;, then each element of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been recorded with &lt;code&gt;VkCommandBufferInheritanceInfo&lt;/code&gt;::&lt;code&gt;queryFlags&lt;/code&gt; having all bits set that are set for the query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063dc7b87b01113e91438581655c04ca2234ed88" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandBuffer&lt;/code&gt; has a &lt;code&gt;VK_QUERY_TYPE_PIPELINE_STATISTICS&lt;/code&gt; query &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-operation-active&quot;&gt;active&lt;/a&gt;, then each element of &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been recorded with &lt;code&gt;VkCommandBufferInheritanceInfo&lt;/code&gt;::&lt;code&gt;pipelineStatistics&lt;/code&gt; having all bits set that are set in the &lt;code&gt;VkQueryPool&lt;/code&gt; the query uses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eca13ddc737730fb570141b166f06e58be67d22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandBuffer&lt;/code&gt; is a primary command buffer, there &lt;strong&gt;must&lt;/strong&gt; not be an active render pass instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1216e8b68e060dfefdf886cadb08fff21598c74c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandBuffer&lt;/code&gt; is a secondary command buffer and either the &lt;code&gt;occlusionQueryEnable&lt;/code&gt; member of the &lt;code&gt;pInheritanceInfo&lt;/code&gt; member of &lt;code&gt;pBeginInfo&lt;/code&gt; is &lt;code&gt;VK_FALSE&lt;/code&gt;, or the precise occlusion queries feature is not enabled, the &lt;code&gt;queryFlags&lt;/code&gt; member of the &lt;code&gt;pInheritanceInfo&lt;/code&gt; member &lt;code&gt;pBeginInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not contain &lt;code&gt;VK_QUERY_CONTROL_PRECISE_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047d4e1d42683a5ed6e8e670e59eb8abb9a45bb2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandBuffer&lt;/code&gt; is a secondary command buffer, the &lt;code&gt;pInheritanceInfo&lt;/code&gt; member of &lt;code&gt;pBeginInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkCommandBufferInheritanceInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4c3861a36dfb32e51eb728da364fa2a1966038" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandBuffer&lt;/code&gt; was allocated from a &lt;a href=&quot;#VkCommandPool&quot;&gt;VkCommandPool&lt;/a&gt; which did not have the &lt;code&gt;VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT&lt;/code&gt; flag set, &lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;initial state&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42dabb70655b5621391a97f7847511d863b5720" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandBufferCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;commandBufferCount&lt;/code&gt; valid &lt;code&gt;VkCommandBuffer&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d7bcf9294dfa4698dd81671c922aad1348eadc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandPool&lt;/code&gt; is a valid handle, it &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ad1307dd4f993041c431767ca40037c096cb39" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandPool&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;commandPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkCommandPool&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317b8f1f361c333ff5796a188ee0ceb5254c1ea4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareEnable&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt;, &lt;code&gt;compareOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkCompareOp&quot;&gt;VkCompareOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81e038dffd658871e3ecf8c6fa45bedd99b50d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dataSize&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pData&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;dataSize&lt;/code&gt; bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd7b9e95ea2c6f4c71118aa097156408bc2e829" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dependencyCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pDependencies&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;dependencyCount&lt;/code&gt; valid &lt;code&gt;VkSubpassDependency&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303d3136d588f2a49ef5b090baaa077d629087b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dependencyFlags&lt;/code&gt; includes &lt;code&gt;VK_DEPENDENCY_BY_REGION_BIT&lt;/code&gt;, then any dependency between &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-framebuffer-regions&quot;&gt;framebuffer-space&lt;/a&gt; pipeline stages is &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-framebuffer-regions&quot;&gt;framebuffer-local&lt;/a&gt; - otherwise it is &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-framebuffer-regions&quot;&gt;framebuffer-global&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f122f4ccb49aa0cdb7a86a82a60bbc51ebb59cfd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;depthBiasEnable&lt;/code&gt; is &lt;code&gt;VK_FALSE&lt;/code&gt;, no depth bias is applied and the fragment&amp;rsquo;s depth values are unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3b97beb98ddb2ae8bab5f77d4ed5325bdaf845" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorCopyCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pDescriptorCopies&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;descriptorCopyCount&lt;/code&gt; valid &lt;code&gt;VkCopyDescriptorSet&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0593aa563c9f070be7f4863ada58f0e012b3aba9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;stageFlags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkShaderStageFlagBits&quot;&gt;VkShaderStageFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fbd9853fa3eb779060203c97a8b5249ef1b5f4f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorPool&lt;/code&gt; is a valid handle, it &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728ea676671038de2abfa2817db4b2942f90e4d5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorPool&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;descriptorPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkDescriptorPool&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db6cd30b7d6d3e98f577e0ed840db7b2c6488b48" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorSetLayout&lt;/code&gt; is a valid handle, it &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf68a881c8315389358fe5c3b9dc28febecbc9f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorSetLayout&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;descriptorSetLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkDescriptorSetLayout&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b0fe491887d9e5ad6a36733c0dc308928443fe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt;, the &lt;code&gt;imageView&lt;/code&gt; and &lt;code&gt;imageLayout&lt;/code&gt; members of any given element of &lt;code&gt;pImageInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkImageView&lt;/code&gt; and &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt;, respectively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29ee64ea5bb903816fe292cf59db23397ddc131" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt; and &lt;code&gt;descriptorCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, then &lt;code&gt;stageFlags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;VK_SHADER_STAGE_FRAGMENT_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4d637edd5ba93e84b39c0ad55069aa1bb221fe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt;, the &lt;code&gt;imageView&lt;/code&gt; member of any given element of &lt;code&gt;pImageInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT&lt;/code&gt; set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d330310d53e13a154e2f98794d13fed91bdb2fe1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, the &lt;code&gt;imageLayout&lt;/code&gt; member of any given element of &lt;code&gt;pImageInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL&lt;/code&gt;, &lt;code&gt;VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_GENERAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6ffaca576b702907aeea7d0b29ae9875a33996" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, the &lt;code&gt;imageView&lt;/code&gt; member of any given element of &lt;code&gt;pImageInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_IMAGE_USAGE_SAMPLED_BIT&lt;/code&gt; set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d37ffb1348b3dbf3381e17d683e41e34cddd3eb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, and &lt;code&gt;descriptorCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;pImmutableSamplers&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;pImmutableSamplers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;descriptorCount&lt;/code&gt; valid &lt;code&gt;VkSampler&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef6ad24bd9e43afb94bb68e6e9ee9655b418f2f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, and &lt;code&gt;dstSet&lt;/code&gt; was not allocated with a layout that included immutable samplers for &lt;code&gt;dstBinding&lt;/code&gt; with &lt;code&gt;descriptorType&lt;/code&gt;, the &lt;code&gt;sampler&lt;/code&gt; member of any given element of &lt;code&gt;pImageInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkSampler&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9285288202e5b236b7882ce726fb366a58a5dd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt;, &lt;code&gt;pImageInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;descriptorCount&lt;/code&gt; valid &lt;code&gt;VkDescriptorImageInfo&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901302b4fba3cc7e279984598c4a8600257a1e1d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt;, the &lt;code&gt;buffer&lt;/code&gt; member of any given element of &lt;code&gt;pBufferInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_BUFFER_USAGE_STORAGE_BUFFER_BIT&lt;/code&gt; set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e7233791f3311519cc13b08b84be319b573a42" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt;, the &lt;code&gt;offset&lt;/code&gt; member of any given element of &lt;code&gt;pBufferInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;minStorageBufferOffsetAlignment&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313ecf7b44f107c8eff90ca68f0ba0ebe762f7cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt;, the &lt;code&gt;range&lt;/code&gt; member of any given element of &lt;code&gt;pBufferInfo&lt;/code&gt;, or the effective range if &lt;code&gt;range&lt;/code&gt; is &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt;, &lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxStorageBufferRange&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6880997c4ed65c064487ffe55d98a325355c6d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt;, the &lt;code&gt;imageView&lt;/code&gt; member of any given element of &lt;code&gt;pImageInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with the identity swizzle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462545984603a244c34567c15d4674d4afc760fe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;, for each descriptor that will be accessed via load or store operations the &lt;code&gt;imageLayout&lt;/code&gt; member for corresponding elements of &lt;code&gt;pImageInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_LAYOUT_GENERAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982907f4a95b36a83c2a2f94f4165713971c8b63" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;, the &lt;code&gt;imageView&lt;/code&gt; member of any given element of &lt;code&gt;pImageInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_IMAGE_USAGE_STORAGE_BIT&lt;/code&gt; set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e480cfd8116db83013d5806d8ab5e14a9b889faf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER&lt;/code&gt;, the &lt;code&gt;VkBuffer&lt;/code&gt; that any given element of &lt;code&gt;pTexelBufferView&lt;/code&gt; was created from &lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT&lt;/code&gt; set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14b00ca049cb22d3b906e9f9837e8f54fbe254e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt;, the &lt;code&gt;buffer&lt;/code&gt; member of any given element of &lt;code&gt;pBufferInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT&lt;/code&gt; set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3a91a929c5e9817fee219eeaa0e259f07a0c3d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt;, the &lt;code&gt;offset&lt;/code&gt; member of any given element of &lt;code&gt;pBufferInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;minUniformBufferOffsetAlignment&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3892c247a7b161a2db815e2dd53d100d0dd2b25b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt;, the &lt;code&gt;range&lt;/code&gt; member of any given element of &lt;code&gt;pBufferInfo&lt;/code&gt;, or the effective range if &lt;code&gt;range&lt;/code&gt; is &lt;code&gt;VK_WHOLE_SIZE&lt;/code&gt;, &lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxUniformBufferRange&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8593e974a4458999142e8ade296f92b68a37c0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt;, &lt;code&gt;pBufferInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;descriptorCount&lt;/code&gt; valid &lt;code&gt;VkDescriptorBufferInfo&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfacce2ee4afcf49996d3b879b94b94dd70ca682" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt;, the &lt;code&gt;buffer&lt;/code&gt; member of any given element of &lt;code&gt;pBufferInfo&lt;/code&gt; that is non-sparse &lt;strong&gt;must&lt;/strong&gt; be bound completely and contiguously to a single &lt;code&gt;VkDeviceMemory&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25201756a63e74106c0a8383deb6573eced6893d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER&lt;/code&gt;, &lt;code&gt;pTexelBufferView&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;descriptorCount&lt;/code&gt; valid &lt;code&gt;VkBufferView&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061d92dc5c64a621aa7da3f37c802e7d4fa7ea76" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorType&lt;/code&gt; is &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER&lt;/code&gt;, the &lt;code&gt;VkBuffer&lt;/code&gt; that any given element of &lt;code&gt;pTexelBufferView&lt;/code&gt; was created from &lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT&lt;/code&gt; set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b8b1377a24b7d6052740c0f509c452cc0743c3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;descriptorWriteCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pDescriptorWrites&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;descriptorWriteCount&lt;/code&gt; valid &lt;code&gt;VkWriteDescriptorSet&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570133b3dcea4567a03c05f5997971dfa26c2c91" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;device&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;device&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkDevice&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e410813065a3a7c7214af38540e69d8c0db8071f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;drawCount&lt;/code&gt; is equal to &lt;code&gt;1&lt;/code&gt;, (&lt;code&gt;offset&lt;/code&gt; + sizeof(&lt;a href=&quot;#VkDrawIndirectCommand&quot;&gt;VkDrawIndirectCommand&lt;/a&gt;)) &lt;strong&gt;must&lt;/strong&gt; be less than or equal to the size of &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e824b24d6c984b2b77bad166fb76aa32be07d30a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;drawCount&lt;/code&gt; is equal to &lt;code&gt;1&lt;/code&gt;, (&lt;code&gt;offset&lt;/code&gt; + sizeof(&lt;code&gt;VkDrawIndexedIndirectCommand&lt;/code&gt;)) &lt;strong&gt;must&lt;/strong&gt; be less than or equal to the size of &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4f944e8eb23fac5d8dd756abafa32cca59aeae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;drawCount&lt;/code&gt; is greater than &lt;code&gt;1&lt;/code&gt;, (&lt;code&gt;stride&lt;/code&gt; &amp;times; (&lt;code&gt;drawCount&lt;/code&gt; - 1) + &lt;code&gt;offset&lt;/code&gt; + sizeof(&lt;a href=&quot;#VkDrawIndirectCommand&quot;&gt;VkDrawIndirectCommand&lt;/a&gt;)) &lt;strong&gt;must&lt;/strong&gt; be less than or equal to the size of &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9ce4cb67c46745d552b054f49c06d90a719a9f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;drawCount&lt;/code&gt; is greater than &lt;code&gt;1&lt;/code&gt;, (&lt;code&gt;stride&lt;/code&gt; &amp;times; (&lt;code&gt;drawCount&lt;/code&gt; - 1) + &lt;code&gt;offset&lt;/code&gt; + sizeof(&lt;code&gt;VkDrawIndexedIndirectCommand&lt;/code&gt;)) &lt;strong&gt;must&lt;/strong&gt; be less than or equal to the size of &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc1719d5488a8ca49cc2da89d9bf3247b2c6c95" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;drawCount&lt;/code&gt; is greater than &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;stride&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;4&lt;/code&gt; and &lt;strong&gt;must&lt;/strong&gt; be greater than or equal to sizeof(&lt;code&gt;VkDrawIndexedIndirectCommand&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cbd696eed49ee58fb6c1b53af48a35d6bc6beb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;drawCount&lt;/code&gt; is greater than &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;stride&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;4&lt;/code&gt; and &lt;strong&gt;must&lt;/strong&gt; be greater than or equal to sizeof(&lt;code&gt;VkDrawIndirectCommand&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3cfe98a260d8352e14934def9c9703251c9063" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dstBuffer&lt;/code&gt; is non-sparse then it &lt;strong&gt;must&lt;/strong&gt; be bound completely and contiguously to a single &lt;code&gt;VkDeviceMemory&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb99746c4bb34e98ea79b35d308cf2e4da9a6ae3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dstImage&lt;/code&gt; is non-sparse then it &lt;strong&gt;must&lt;/strong&gt; be bound completely and contiguously to a single &lt;code&gt;VkDeviceMemory&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46501d9266e37dcb9de97f96340898041d132c8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dstImage&lt;/code&gt; was created with &lt;code&gt;tiling&lt;/code&gt; equal to &lt;code&gt;VK_IMAGE_TILING_LINEAR&lt;/code&gt;, &lt;code&gt;dstImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;format&lt;/code&gt; that supports being a color attachment, as specified by the &lt;code&gt;VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT&lt;/code&gt; flag in &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;linearTilingFeatures&lt;/code&gt; returned by &lt;code&gt;vkGetPhysicalDeviceFormatProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4c08972cce8545e58d7313cb0b6bfd501a7d9a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dstImage&lt;/code&gt; was created with &lt;code&gt;tiling&lt;/code&gt; equal to &lt;code&gt;VK_IMAGE_TILING_OPTIMAL&lt;/code&gt;, &lt;code&gt;dstImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;format&lt;/code&gt; that supports being a color attachment, as specified by the &lt;code&gt;VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT&lt;/code&gt; flag in &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;optimalTilingFeatures&lt;/code&gt; returned by &lt;code&gt;vkGetPhysicalDeviceFormatProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bd3492253c6175bdfd03251118f3fca83c8842" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dstQueueFamilyIndex&lt;/code&gt; is not equal to &lt;code&gt;srcQueueFamilyIndex&lt;/code&gt;, and &lt;code&gt;dstQueueFamilyIndex&lt;/code&gt; is equal to the current queue family, then the memory barrier defines a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-queue-transfers-acquire&quot;&gt;queue family acquire operation&lt;/a&gt; for the specified buffer range, and the first access scope includes no access, as if &lt;code&gt;srcAccessMask&lt;/code&gt; was &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1d368d749e8c672e375fc4851f78b3cd6ae9da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dstQueueFamilyIndex&lt;/code&gt; is not equal to &lt;code&gt;srcQueueFamilyIndex&lt;/code&gt;, and &lt;code&gt;dstQueueFamilyIndex&lt;/code&gt; is equal to the current queue family, then the memory barrier defines a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-queue-transfers-acquire&quot;&gt;queue family acquire operation&lt;/a&gt; for the specified image subresource range, and the first access scope includes no access, as if &lt;code&gt;srcAccessMask&lt;/code&gt; was &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a00cdec68fff54d9898f1d2fc323232272ee1f6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dstSubpass&lt;/code&gt; is equal to &lt;code&gt;VK_SUBPASS_EXTERNAL&lt;/code&gt;, the second &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-dependencies-scopes&quot;&gt;synchronization scope&lt;/a&gt; includes commands submitted after the render pass instance is ended. Otherwise, the second set of commands includes all commands submitted as part of the subpass instance identified by &lt;code&gt;dstSubpass&lt;/code&gt; and any load, store or multisample resolve operations on attachments used in &lt;code&gt;dstSubpass&lt;/code&gt;. In either case, the second synchronization scope is limited to operations on the pipeline stages determined by the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-masks&quot;&gt;destination stage mask&lt;/a&gt; specified by &lt;code&gt;dstStageMask&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7727aeab3217c86f2e976981f9100c936905c9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dstSubpass&lt;/code&gt; is not &lt;code&gt;VK_SUBPASS_EXTERNAL&lt;/code&gt;, &lt;code&gt;dstStageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not include &lt;code&gt;VK_PIPELINE_STAGE_HOST_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6b11131e2f0ad4fddfc6902107dc5d61cf28f8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dynamicOffsetCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;pDynamicOffsets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;dynamicOffsetCount&lt;/code&gt;&lt;code&gt;uint32_t&lt;/code&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17703c0e69cadb5a43eb6224ed1ac3eaffccc5f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabledExtensionCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;ppEnabledExtensionNames&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;enabledExtensionCount&lt;/code&gt; null-terminated UTF-8 strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f964c0ed0bbc4fc149b4083e7cd3aac02e044f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabledLayerCount&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;ppEnabledLayerNames&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;enabledLayerCount&lt;/code&gt; null-terminated UTF-8 strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62aaf4fc4defe16d2ca36cee366b0d02a2c7d135" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;event&lt;/code&gt; is a valid handle, it &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e73f3a1e1868d3fe5d9c20c9f6f0120a1c477e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;event&lt;/code&gt; is already in the signaled state when &lt;a href=&quot;#vkCmdSetEvent&quot;&gt;vkCmdSetEvent&lt;/a&gt; is executed on the device, then &lt;a href=&quot;#vkCmdSetEvent&quot;&gt;vkCmdSetEvent&lt;/a&gt; has no effect, no event signal operation occurs, and no execution dependency is generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e2a2205df81af29ca60c7b3aabf50dd64a3983" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;event&lt;/code&gt; is already in the signaled state when &lt;a href=&quot;#vkSetEvent&quot;&gt;vkSetEvent&lt;/a&gt; is executed, then &lt;a href=&quot;#vkSetEvent&quot;&gt;vkSetEvent&lt;/a&gt; has no effect, and no event signal operation occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c720c06af63b42dd2b6f7d627c3cd9292fa34950" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;event&lt;/code&gt; is already in the unsignaled state when &lt;a href=&quot;#vkCmdResetEvent&quot;&gt;vkCmdResetEvent&lt;/a&gt; is executed on the device, then &lt;a href=&quot;#vkCmdResetEvent&quot;&gt;vkCmdResetEvent&lt;/a&gt; has no effect, no event unsignal operation occurs, and no execution dependency is generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2aec1178e405299c32c4dc41d38e5797f5f26a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;event&lt;/code&gt; is already in the unsignaled state when &lt;a href=&quot;#vkResetEvent&quot;&gt;vkResetEvent&lt;/a&gt; is executed, then &lt;a href=&quot;#vkResetEvent&quot;&gt;vkResetEvent&lt;/a&gt; has no effect, and no event unsignal operation occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2883f968163860ad1ac253ac3d717c25345477e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;event&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;event&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkEvent&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2bd3823bd7d764b44d32c73ef1622bead5b061" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;extent.depth&lt;/code&gt; is not a multiple of the compressed texel block depth, then (&lt;code&gt;extent.depth&lt;/code&gt; + &lt;code&gt;dstOffset.z&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; equal the image subresource depth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cea25b98cd4dd4f36f63a2beaf55c397fde5c19" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;extent.depth&lt;/code&gt; is not a multiple of the compressed texel block depth, then (&lt;code&gt;extent.depth&lt;/code&gt; + &lt;code&gt;srcOffset.z&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; equal the image subresource depth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbca6dbec9dde1558fb1bf8757a7a167c62b3dbd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;extent.height&lt;/code&gt; is not a multiple of the compressed texel block height, then (&lt;code&gt;extent.height&lt;/code&gt; + &lt;code&gt;dstOffset.y&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; equal the image subresource height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb38febc37cea96741cf3d154d145b3947abfdfd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;extent.height&lt;/code&gt; is not a multiple of the compressed texel block height, then (&lt;code&gt;extent.height&lt;/code&gt; + &lt;code&gt;srcOffset.y&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; equal the image subresource height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7746130829c9d07d36b473ae307f1a34fd8577" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;extent.width&lt;/code&gt; is not a multiple of the compressed texel block width, then (&lt;code&gt;extent.width&lt;/code&gt; + &lt;code&gt;dstOffset.x&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; equal the image subresource width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc45cb68db1c748f9192571b9b7aac6fd33f00e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;extent.width&lt;/code&gt; is not a multiple of the compressed texel block width, then (&lt;code&gt;extent.width&lt;/code&gt; + &lt;code&gt;srcOffset.x&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; equal the image subresource width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e47e95f2530f227f59e76cf6335671a6e0756d2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fence&lt;/code&gt; is a valid handle, it &lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82d6986425948da79e6511dd49b946fc5be5549" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fence&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;fence&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkFence&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8483b3c79a3f0f7961940b56df7a8d3d3ab0d393" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fence&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;fence&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be unsignaled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e369f553cf13357660e83bd0a21d06548b8e0ef" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fence&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;fence&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be associated with any other queue command that has not yet completed execution on that queue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a14ba5a2910d26d9743e036687a733c09004da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;filter&lt;/code&gt; is &lt;code&gt;VK_FILTER_LINEAR&lt;/code&gt;, &lt;code&gt;srcImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be of a format which supports linear filtering, as specified by the &lt;code&gt;VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT&lt;/code&gt; flag in &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;linearTilingFeatures&lt;/code&gt; (for a linear image) or &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;optimalTilingFeatures&lt;/code&gt;(for an optimally tiled image) returned by &lt;code&gt;vkGetPhysicalDeviceFormatProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d95a3793bba9fb6d03aa0504f4dcb632a395af" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; contains &lt;code&gt;VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; or &lt;code&gt;VK_BUFFER_CREATE_SPARSE_ALIASED_BIT&lt;/code&gt;, it &lt;strong&gt;must&lt;/strong&gt; also contain &lt;code&gt;VK_BUFFER_CREATE_SPARSE_BINDING_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e575e9a91a7c777e3f4286629397cc14848d0c81" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; contains &lt;code&gt;VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT&lt;/code&gt;, the &lt;code&gt;framebuffer&lt;/code&gt; member of &lt;code&gt;pInheritanceInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be either &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, or a valid &lt;code&gt;VkFramebuffer&lt;/code&gt; that is compatible with the &lt;code&gt;renderPass&lt;/code&gt; member of &lt;code&gt;pInheritanceInfo&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201f5b9b06131913069091ca901fdf6d87a7995c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; contains &lt;code&gt;VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT&lt;/code&gt;, the &lt;code&gt;renderPass&lt;/code&gt; member of &lt;code&gt;pInheritanceInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkRenderPass&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703ec4937567150d9ac97a9372c11d748fe2f79a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; contains &lt;code&gt;VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT&lt;/code&gt;, the &lt;code&gt;subpass&lt;/code&gt; member of &lt;code&gt;pInheritanceInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid subpass index within the &lt;code&gt;renderPass&lt;/code&gt; member of &lt;code&gt;pInheritanceInfo&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a950e177c3c3ae704e040079ecec4842284b59" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; contains &lt;code&gt;VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT&lt;/code&gt;, &lt;code&gt;imageType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75482951bfbc86b2c5232f6d218b94960d5a1eb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; contains &lt;code&gt;VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT&lt;/code&gt; or &lt;code&gt;VK_IMAGE_CREATE_SPARSE_ALIASED_BIT&lt;/code&gt;, it &lt;strong&gt;must&lt;/strong&gt; also contain &lt;code&gt;VK_IMAGE_CREATE_SPARSE_BINDING_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcb6baeb2a37be7e0416b11c561cff1965c8e20" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; contains the &lt;code&gt;VK_PIPELINE_CREATE_DERIVATIVE_BIT&lt;/code&gt; flag, and &lt;code&gt;basePipelineHandle&lt;/code&gt; is &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;basePipelineIndex&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid index into the calling command&amp;rsquo;s &lt;code&gt;pCreateInfos&lt;/code&gt; parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d691ee30e61e7f0c1919d2693dc576e32c4bd02f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; contains the &lt;code&gt;VK_PIPELINE_CREATE_DERIVATIVE_BIT&lt;/code&gt; flag, and &lt;code&gt;basePipelineHandle&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, &lt;code&gt;basePipelineIndex&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be -1</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
