<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="docker">
    <body>
      <group id="docker">
        <trans-unit id="0ab1f118a9d1a31b812c1396a91fefa23b6fb9cd" translate="yes" xml:space="preserve">
          <source>This feature provides more insight to administrators than previously available with the CLI for enforcing and performing image signature verification.</source>
          <target state="translated">この機能は、画像署名検証を強制して実行するためのCLIを使用することで、これまでよりも管理者への洞察を提供します。</target>
        </trans-unit>
        <trans-unit id="0d3c36f53b5d8c2347dcc039c86557db2e2dec86" translate="yes" xml:space="preserve">
          <source>This file causes the following build behavior:</source>
          <target state="translated">このファイルを使用すると、以下のようなビルド動作が発生します。</target>
        </trans-unit>
        <trans-unit id="b84d0b8a2cd80cbceded9d1f0d9d22904a59ab52" translate="yes" xml:space="preserve">
          <source>This file defines two services: The &lt;code&gt;db&lt;/code&gt; service and the &lt;code&gt;web&lt;/code&gt; service.</source>
          <target state="translated">このファイルは、 &lt;code&gt;db&lt;/code&gt; サービスと &lt;code&gt;web&lt;/code&gt; サービスの2つのサービスを定義します。</target>
        </trans-unit>
        <trans-unit id="95857ecb6992103e8ebcb8e175e2afd7547d29a0" translate="yes" xml:space="preserve">
          <source>This file is used by the &lt;code&gt;RUN pip install -r requirements.txt&lt;/code&gt; command in your &lt;code&gt;Dockerfile&lt;/code&gt;.</source>
          <target state="translated">このファイルは、 &lt;code&gt;Dockerfile&lt;/code&gt; の &lt;code&gt;RUN pip install -r requirements.txt&lt;/code&gt; コマンドで使用されます。</target>
        </trans-unit>
        <trans-unit id="196157189d8d2a5ed71c8f3d197a913261911ce4" translate="yes" xml:space="preserve">
          <source>This first rebuilds the image for &lt;code&gt;web&lt;/code&gt; and then stop, destroy, and recreate &lt;em&gt;just&lt;/em&gt; the &lt;code&gt;web&lt;/code&gt; service. The &lt;code&gt;--no-deps&lt;/code&gt; flag prevents Compose from also recreating any services which &lt;code&gt;web&lt;/code&gt; depends on.</source>
          <target state="translated">これにより、まず &lt;code&gt;web&lt;/code&gt; 用のイメージが再構築され、次に &lt;code&gt;web&lt;/code&gt; サービス&lt;em&gt;のみ&lt;/em&gt;が停止、破棄、再作成されます。 &lt;code&gt;--no-deps&lt;/code&gt; のフラグはまた、任意のサービスの再作成から作曲を防ぎ &lt;code&gt;web&lt;/code&gt; に依存します。</target>
        </trans-unit>
        <trans-unit id="69986be847074a6716ab299c2e76741b68bdc2da" translate="yes" xml:space="preserve">
          <source>This flag allows you to configure the UDP port number to use for data path traffic. The provided port number must be within the 1024 - 49151 range. If this flag is not set or is set to 0, the default port number 4789 is used. The data path port can only be configured when initializing the swarm, and applies to all nodes that join the swarm. The following example initializes a new Swarm, and configures the data path port to UDP port 7777;</source>
          <target state="translated">このフラグを使用すると、データ・パス・トラフィックに使用するUDPポート番号を構成できます。提供されるポート番号は 1024 ~ 49151 の範囲内でなければなりません。このフラグが設定されていないか、または 0 に設定されている場合、デフォルトのポート番号 4789 が使用されます。データパスポートは、スウォームの初期化時にのみ設定でき、スウォームに参加するすべてのノードに適用されます。次の例では、新しいスウォームを初期化し、データパスポートをUDPポート7777に設定します。</target>
        </trans-unit>
        <trans-unit id="09741286d4981528eaa313e7563493ef90e45c72" translate="yes" xml:space="preserve">
          <source>This flag allows you to pass the build-time variables that are accessed like regular environment variables in the &lt;code&gt;RUN&lt;/code&gt; instruction of the Dockerfile. Also, these values don&amp;rsquo;t persist in the intermediate or final images like &lt;code&gt;ENV&lt;/code&gt; values do. You must add &lt;code&gt;--build-arg&lt;/code&gt; for each build argument.</source>
          <target state="translated">このフラグを使用すると、Dockerfileの &lt;code&gt;RUN&lt;/code&gt; 命令で通常の環境変数のようにアクセスされるビルド時変数を渡すことができます。また、これらの値は、 &lt;code&gt;ENV&lt;/code&gt; 値のように中間または最終イメージに保持されません。ビルド引数ごとに &lt;code&gt;--build-arg&lt;/code&gt; を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="374d76d83227e5b376b5f3e2e176de9ac7a79aae" translate="yes" xml:space="preserve">
          <source>This flag enables automatic locking of managers with an encryption key. The private keys and data stored by all managers will be protected by the encryption key printed in the output, and will not be accessible without it. Thus, it is very important to store this key in order to activate a manager after it restarts. The key can be passed to &lt;code&gt;docker swarm unlock&lt;/code&gt; to reactivate the manager. Autolock can be disabled by running &lt;code&gt;docker swarm update --autolock=false&lt;/code&gt;. After disabling it, the encryption key is no longer required to start the manager, and it will start up on its own without user intervention.</source>
          <target state="translated">このフラグは、暗号化キーによるマネージャーの自動ロックを有効にします。すべてのマネージャーによって保存された秘密鍵とデータは、出力に出力される暗号化鍵によって保護され、それなしではアクセスできません。したがって、再起動後にマネージャーをアクティブ化するには、このキーを保存することが非常に重要です。キーを &lt;code&gt;docker swarm unlock&lt;/code&gt; に渡して、マネージャーを再アクティブ化できます。 &lt;code&gt;docker swarm update --autolock=false&lt;/code&gt; ロックは、docker swarm update --autolock = falseを実行することで無効にできます。無効にすると、マネージャーを起動するための暗号化キーは不要になり、ユーザーの介入なしに独自に起動します。</target>
        </trans-unit>
        <trans-unit id="28844c8e1b8c5c2dde9fccc85c1dbac9f9c0e75d" translate="yes" xml:space="preserve">
          <source>This flag forces an existing node that was part of a quorum that was lost to restart as a single node Manager without losing its data.</source>
          <target state="translated">このフラグは、クォーラムの一部であった既存のノードがデータを失うことなく、単一のノードマネージャとして再起動するように強制します。</target>
        </trans-unit>
        <trans-unit id="d90c9f76065599006eb81e3a82a0ec792d83c3b7" translate="yes" xml:space="preserve">
          <source>This flag is generally not necessary when joining an existing swarm.</source>
          <target state="translated">このフラグは、既存のスウォームに参加する際には一般的には必要ありません。</target>
        </trans-unit>
        <trans-unit id="4b01a60515cc500dd8faf15cc228dc135de9d21a" translate="yes" xml:space="preserve">
          <source>This flag is generally not necessary when joining an existing swarm. If you&amp;rsquo;re joining new nodes through a load balancer, you should use this flag to ensure the node advertises its IP address and not the IP address of the load balancer.</source>
          <target state="translated">既存のスウォームに参加する場合、このフラグは通常必要ありません。ロードバランサーを介して新しいノードに参加する場合は、このフラグを使用して、ノードがロードバランサーのIPアドレスではなくIPアドレスをアドバタイズするようにします。</target>
        </trans-unit>
        <trans-unit id="b3b426fd1bf8c84ddd55b8daddda9ca4f4dc7c1b" translate="yes" xml:space="preserve">
          <source>This flag is only supported on a daemon running on Windows, and only supports the &lt;code&gt;credentialspec&lt;/code&gt; option. The &lt;code&gt;credentialspec&lt;/code&gt; must be in the format &lt;code&gt;file://spec.txt&lt;/code&gt; or &lt;code&gt;registry://keyname&lt;/code&gt;.</source>
          <target state="translated">このフラグは、Windowsで実行されているデーモンでのみサポートされ、 &lt;code&gt;credentialspec&lt;/code&gt; オプションのみをサポートします。 &lt;code&gt;credentialspec&lt;/code&gt; は、フォーマットでなければなりません &lt;code&gt;file://spec.txt&lt;/code&gt; や &lt;code&gt;registry://keyname&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc2a5a6e33e602c0db38e0f95a2d38fe5670959f" translate="yes" xml:space="preserve">
          <source>This flag is useful in certain situations. For example, a cluster may want to have dedicated manager nodes that are not served as worker nodes. This could be achieved by passing &lt;code&gt;--availability=drain&lt;/code&gt; to &lt;code&gt;docker swarm init&lt;/code&gt;.</source>
          <target state="translated">このフラグは、特定の状況で役立ちます。たとえば、クラスターには、ワーカーノードとして機能しない専用のマネージャーノードが必要な場合があります。これは、-- &lt;code&gt;--availability=drain&lt;/code&gt; を &lt;code&gt;docker swarm init&lt;/code&gt; に渡すことで実現できます。</target>
        </trans-unit>
        <trans-unit id="965b41964ca78c42b28deeba7ec4605dc4171174" translate="yes" xml:space="preserve">
          <source>This flag is useful in certain situations. For example, a cluster may want to have dedicated manager nodes that are not served as worker nodes. This could be achieved by passing &lt;code&gt;--availability=drain&lt;/code&gt; to &lt;code&gt;docker swarm join&lt;/code&gt;.</source>
          <target state="translated">このフラグは、特定の状況で役立ちます。たとえば、クラスターには、ワーカーノードとして機能しない専用のマネージャーノードが必要な場合があります。これは、-- &lt;code&gt;--availability=drain&lt;/code&gt; を &lt;code&gt;docker swarm join&lt;/code&gt; に渡すことで実現できます。</target>
        </trans-unit>
        <trans-unit id="c63968e097ab59a130422517d7e1c432897dd193" translate="yes" xml:space="preserve">
          <source>This flag sets the frequency with which nodes are told to use as a period to report their health.</source>
          <target state="translated">このフラグは、ノードが健康状態を報告するための期間として使用するように指示される頻度を設定します。</target>
        </trans-unit>
        <trans-unit id="2c7ab7900e82261550f08562874a49f95c9c0d2b" translate="yes" xml:space="preserve">
          <source>This flag sets the number of old Raft snapshots to retain in addition to the current Raft snapshots. By default, no old snapshots are retained. This option may be used for debugging, or to store old snapshots of the swarm state for disaster recovery purposes.</source>
          <target state="translated">このフラグは、現在の Raft スナップショットに加えて、保持する古い Raft スナップショットの数を設定します。デフォルトでは、古いスナップショットは保持されません。このオプションは、デバッグ用に使用したり、ディザスタリカバリ用にスウォーム状態の古いスナップショットを保存したりするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="21338c4cd0e705835606ae937cba8e48d58bcc63" translate="yes" xml:space="preserve">
          <source>This flag sets the validity period for node certificates.</source>
          <target state="translated">このフラグは、ノード証明書の有効期間を設定します。</target>
        </trans-unit>
        <trans-unit id="182b22958531c3b2ecf807df4174624da7ce0237" translate="yes" xml:space="preserve">
          <source>This flag sets up task history retention limit.</source>
          <target state="translated">このフラグは、タスクの履歴保持制限を設定します。</target>
        </trans-unit>
        <trans-unit id="33ec87960094266051d98c7e71949deefb1c4578" translate="yes" xml:space="preserve">
          <source>This flag sets up the swarm to use an external CA to issue node certificates. The value takes the form &lt;code&gt;protocol=X,url=Y&lt;/code&gt;. The value for &lt;code&gt;protocol&lt;/code&gt; specifies what protocol should be used to send signing requests to the external CA. Currently, the only supported value is &lt;code&gt;cfssl&lt;/code&gt;. The URL specifies the endpoint where signing requests should be submitted.</source>
          <target state="translated">このフラグは、外部CAを使用してノード証明書を発行するようにswarmをセットアップします。値の形式は &lt;code&gt;protocol=X,url=Y&lt;/code&gt; です。 &lt;code&gt;protocol&lt;/code&gt; の値は、署名要求を外部CAに送信するために使用するプロトコルを指定します。現在、サポートされている値は &lt;code&gt;cfssl&lt;/code&gt; のみです。URLは、署名リクエストを送信するエンドポイントを指定します。</target>
        </trans-unit>
        <trans-unit id="42943b66e28caafe70f9e0fbe4da987b032324cb" translate="yes" xml:space="preserve">
          <source>This flag specifies default subnet pools for global scope networks. Format example is &lt;code&gt;--default-addr-pool 30.30.0.0/16 --default-addr-pool 40.40.0.0/16&lt;/code&gt;</source>
          <target state="translated">このフラグは、グローバルスコープネットワークのデフォルトのサブネットプールを指定します。形式の例は &lt;code&gt;--default-addr-pool 30.30.0.0/16 --default-addr-pool 40.40.0.0/16&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3584ceba9556dac01c282a6d287207c320ae2d85" translate="yes" xml:space="preserve">
          <source>This flag specifies default subnet pools mask length for default-addr-pool. Format example is &lt;code&gt;--default-addr-pool-mask-length 24&lt;/code&gt;</source>
          <target state="translated">このフラグは、default-addr-poolのデフォルトのサブネットプールマスク長を指定します。フォーマットの例は &lt;code&gt;--default-addr-pool-mask-length 24&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d88c81589962eebdd197d27485bd865b027e9ec2" translate="yes" xml:space="preserve">
          <source>This flag specifies how many log entries to allow in between Raft snapshots. Setting this to a higher number will trigger snapshots less frequently. Snapshots compact the Raft log and allow for more efficient transfer of the state to new managers. However, there is a performance cost to taking snapshots frequently.</source>
          <target state="translated">このフラグは、Raftスナップショットの間に許可するログエントリの数を指定します。この値を高く設定すると、スナップショットのトリガ頻度が低くなります。スナップショットはRaftログをコンパクトにし、新しいマネージャへの状態の転送をより効率的に行うことができます。しかし、スナップショットを頻繁に取得することにはパフォーマンスコストがかかります。</target>
        </trans-unit>
        <trans-unit id="ae9a8e14ca39fab192227750bdbb8dde9c2bdd6d" translate="yes" xml:space="preserve">
          <source>This flag specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this parameter it is then possible to separate the container&amp;rsquo;s data traffic from the management traffic of the cluster. If unspecified, Docker will use the same IP address or interface that is used for the advertise address.</source>
          <target state="translated">このフラグは、グローバルスコープネットワークドライバーがこのノードで実行されているコンテナーに到達するために他のノードに向けて発行するアドレスを指定します。このパラメーターを使用すると、コンテナーのデータトラフィックをクラスターの管理トラフィックから分離できます。指定しない場合、Dockerはアドバタイズアドレスに使用されているのと同じIPアドレスまたはインターフェイスを使用します。</target>
        </trans-unit>
        <trans-unit id="d81a2eeb06d2cdd5e888007e591c5c3914f0142f" translate="yes" xml:space="preserve">
          <source>This flag specifies the address that will be advertised to other members of the swarm for API access and overlay networking. If unspecified, Docker will check if the system has a single IP address, and use that IP address with the listening port (see &lt;code&gt;--listen-addr&lt;/code&gt;). If the system has multiple IP addresses, &lt;code&gt;--advertise-addr&lt;/code&gt; must be specified so that the correct address is chosen for inter-manager communication and overlay networking.</source>
          <target state="translated">このフラグは、APIアクセスとオーバーレイネットワーキングのために、スウォームの他のメンバーにアドバタイズされるアドレスを指定します。指定しない場合、Dockerはシステムに単一のIPアドレスがあるかどうかをチェックし、リスニングポートでそのIPアドレスを使用します（ &lt;code&gt;--listen-addr&lt;/code&gt; を参照）。システムに複数のIPアドレスがある場合は、 &lt;code&gt;--advertise-addr&lt;/code&gt; 指定して、マネージャー間通信とオーバーレイネットワーク用に正しいアドレスが選択されるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="3204c892b68400424d4423cbbd7cbee01da6cef4" translate="yes" xml:space="preserve">
          <source>This flag specifies the address that will be advertised to other members of the swarm for API access. If unspecified, Docker will check if the system has a single IP address, and use that IP address with the listening port (see &lt;code&gt;--listen-addr&lt;/code&gt;). If the system has multiple IP addresses, &lt;code&gt;--advertise-addr&lt;/code&gt; must be specified so that the correct address is chosen for inter-manager communication and overlay networking.</source>
          <target state="translated">このフラグは、APIアクセスのために群の他のメンバーにアドバタイズされるアドレスを指定します。指定しない場合、Dockerはシステムに単一のIPアドレスがあるかどうかをチェックし、リスニングポートでそのIPアドレスを使用します（ &lt;code&gt;--listen-addr&lt;/code&gt; を参照）。システムに複数のIPアドレスがある場合は、 &lt;code&gt;--advertise-addr&lt;/code&gt; 指定して、マネージャー間通信とオーバーレイネットワーク用に正しいアドレスが選択されるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="f8f9862e09ee3d53a6713c97ece1f81d54247b38" translate="yes" xml:space="preserve">
          <source>This flag specifies the availability of the node at the time the node joins a master. Possible availability values are &lt;code&gt;active&lt;/code&gt;, &lt;code&gt;pause&lt;/code&gt;, or &lt;code&gt;drain&lt;/code&gt;.</source>
          <target state="translated">このフラグは、ノードがマスターに参加するときのノードの可用性を指定します。可能な可用性の値は、 &lt;code&gt;active&lt;/code&gt; 、 &lt;code&gt;pause&lt;/code&gt; 、または &lt;code&gt;drain&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="394efaf7cdae8af33e4245e6959028f74c23a319" translate="yes" xml:space="preserve">
          <source>This guide follows the steps as described &lt;a href=&quot;../content_trust/index#signing-images-with-docker-content-trust&quot;&gt;here&lt;/a&gt; so please read that and understand its prerequisites.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;../content_trust/index#signing-images-with-docker-content-trust&quot;&gt;ここで&lt;/a&gt;説明されている手順に従っているので、それを読んで、その前提条件を理解してください。</target>
        </trans-unit>
        <trans-unit id="5f7a1eacb3304171e1925882b2fa0171e40e7bee" translate="yes" xml:space="preserve">
          <source>This has a strong security implication: for example, if you instrument Docker from a web server to provision containers through an API, you should be even more careful than usual with parameter checking, to make sure that a malicious user cannot pass crafted parameters causing Docker to create arbitrary containers.</source>
          <target state="translated">例えば、WebサーバーからAPI経由でコンテナをプロビジョニングするためにDockerをインストルメントする場合、悪意のあるユーザーが細工されたパラメータを渡してDockerが任意のコンテナを作成できないようにするために、パラメータチェックにはいつも以上に注意を払う必要があります。</target>
        </trans-unit>
        <trans-unit id="1a71b4d1c25bb9da90d5695fe9d0554ee40008e5" translate="yes" xml:space="preserve">
          <source>This instructs Compose to re-use the configuration for the &lt;code&gt;webapp&lt;/code&gt; service defined in the &lt;code&gt;common-services.yml&lt;/code&gt; file. Suppose that &lt;code&gt;common-services.yml&lt;/code&gt; looks like this:</source>
          <target state="translated">これは、 &lt;code&gt;common-services.yml&lt;/code&gt; ファイルで定義された &lt;code&gt;webapp&lt;/code&gt; サービスの構成を再利用するようにComposeに指示します。その仮定 &lt;code&gt;common-services.yml&lt;/code&gt; このようなルックスを：</target>
        </trans-unit>
        <trans-unit id="ea6c8856ee9d438c5fcab941824d42d2352d44d8" translate="yes" xml:space="preserve">
          <source>This instructs Compose to run &lt;code&gt;django-admin startproject composeexample&lt;/code&gt; in a container, using the &lt;code&gt;web&lt;/code&gt; service&amp;rsquo;s image and configuration. Because the &lt;code&gt;web&lt;/code&gt; image doesn&amp;rsquo;t exist yet, Compose builds it from the current directory, as specified by the &lt;code&gt;build: .&lt;/code&gt; line in &lt;code&gt;docker-compose.yml&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;web&lt;/code&gt; サービスのイメージと構成を使用して、コンテナーで &lt;code&gt;django-admin startproject composeexample&lt;/code&gt; を実行するようにComposeに指示します。ので &lt;code&gt;web&lt;/code&gt; 画像がまだ存在していないで指定され、作曲は、カレントディレクトリからそれを構築する &lt;code&gt;build: .&lt;/code&gt; &lt;code&gt;docker-compose.yml&lt;/code&gt; の行。</target>
        </trans-unit>
        <trans-unit id="40c35322ebdb6d67c7e211c76c762e9d5c1fc4e8" translate="yes" xml:space="preserve">
          <source>This is a full example of the allowed configuration options on Linux:</source>
          <target state="translated">これは、Linuxで許可されている設定オプションの完全な例です。</target>
        </trans-unit>
        <trans-unit id="ceb898ff81355d4608a328078b4d64c620853057" translate="yes" xml:space="preserve">
          <source>This is a full example of the allowed configuration options on Windows:</source>
          <target state="translated">これは、Windowsで許可されている設定オプションの完全な例です。</target>
        </trans-unit>
        <trans-unit id="3521882215107882fcc4d41290bb3df11bfd4fa2" translate="yes" xml:space="preserve">
          <source>This is a very simple example which shows how to use configs with a Microsoft IIS service running on Docker 17.06 EE on Microsoft Windows Server 2016 or Docker for Windows 17.06 CE on Microsoft Windows 10. It stores the webpage in a config.</source>
          <target state="translated">これは、Microsoft Windows Server 2016上のDocker 17.06 EEまたはMicrosoft Windows 10上のDocker for Windows 17.06 CE上で動作するMicrosoft IISサービスでconfigsを使用する方法を示す非常に簡単な例です。ウェブページをconfigに格納しています。</target>
        </trans-unit>
        <trans-unit id="ed4fd8bdbb17e4c6687c078c8d4146c91469a924" translate="yes" xml:space="preserve">
          <source>This is a very simple example which shows how to use secrets with a Microsoft IIS service running on Docker 17.06 EE on Microsoft Windows Server 2016 or Docker Desktop for Mac 17.06 on Microsoft Windows 10. It is a naive example that stores the webpage in a secret.</source>
          <target state="translated">これは、Microsoft Windows Server 2016上のDocker 17.06 EEまたはMicrosoft Windows 10上のDocker Desktop for Mac 17.06上で動作するMicrosoft IISサービスでシークレットを使用する方法を示す非常に簡単な例です。ウェブページをシークレットに保存するというナイーブな例です。</target>
        </trans-unit>
        <trans-unit id="5df4d072d41ae4438b709a23c88eb738fcb8d1a2" translate="yes" xml:space="preserve">
          <source>This is an example of the configuration file for devicemapper on Linux:</source>
          <target state="translated">Linux上のdevicemapperの設定ファイルの例です。</target>
        </trans-unit>
        <trans-unit id="ff573ac58dedf3910913a4fe0dd5f50646ef17cf" translate="yes" xml:space="preserve">
          <source>This is an implementation of the same authentication used by version 2 of the &lt;a href=&quot;https://github.com/docker/distribution&quot;&gt;Docker Registry&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;https://github.com/docker/distribution&quot;&gt;Dockerレジストリの&lt;/a&gt;バージョン2で使用されているものと同じ認証の実装です。</target>
        </trans-unit>
        <trans-unit id="887d7a2fd0f8f20cef1333269d28588527adfa07" translate="yes" xml:space="preserve">
          <source>This is an offline command, and we must run a &lt;code&gt;notary publish example.com/collection&lt;/code&gt; for the add to take effect.</source>
          <target state="translated">これはオフラインコマンドです。追加を有効にするには、 &lt;code&gt;notary publish example.com/collection&lt;/code&gt; を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="8d131cd02f891c7fa57498c4c03ac4e35d582166" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;image&lt;/code&gt; cannot be used together in a version 1 file.</source>
          <target state="translated">これは、 &lt;code&gt;build&lt;/code&gt; と &lt;code&gt;image&lt;/code&gt; をバージョン1ファイルで一緒に使用できないためです。</target>
        </trans-unit>
        <trans-unit id="9e80b277ca7089d72d078aabbcccf5e116562dec" translate="yes" xml:space="preserve">
          <source>This is configured in the Dockerd configuration file.</source>
          <target state="translated">これはDockerdの設定ファイルで設定します。</target>
        </trans-unit>
        <trans-unit id="98781eb7bde96f838d1a4a7135d33e2e8801cca3" translate="yes" xml:space="preserve">
          <source>This is how piping a file into a container could be done for a build. The container&amp;rsquo;s ID will be printed after the build is done and the build logs could be retrieved using &lt;code&gt;docker logs&lt;/code&gt;. This is useful if you need to pipe a file or something else into a container and retrieve the container&amp;rsquo;s ID once the container has finished running.</source>
          <target state="translated">これは、ビルドのためにファイルをコンテナにパイプする方法です。コンテナのIDはビルドが完了した後に出力され、 &lt;code&gt;docker logs&lt;/code&gt; を使用して取得できます。これは、ファイルなどをコンテナーにパイプして、コンテナーの実行が終了したらコンテナーのIDを取得する必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="50911e9d24c857beac4c5d66836adb85d18997a6" translate="yes" xml:space="preserve">
          <source>This is inefficient for two reasons. First, there is an un-necessary cmd.exe command processor (aka shell) being invoked. Second, each &lt;code&gt;RUN&lt;/code&gt; instruction in the &lt;em&gt;shell&lt;/em&gt; form requires an extra &lt;code&gt;powershell -command&lt;/code&gt; prefixing the command.</source>
          <target state="translated">これは2つの理由で非効率的です。まず、不要なcmd.exeコマンドプロセッサ（シェル）が呼び出されます。次に、&lt;em&gt;シェル&lt;/em&gt;形式の各 &lt;code&gt;RUN&lt;/code&gt; 命令には、 &lt;code&gt;powershell -command&lt;/code&gt; 前に追加のpowershell -commandが必要です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a2ee8d08a3a2966baa81eb1c7429f9fc51ecef0d" translate="yes" xml:space="preserve">
          <source>This is normally defaults to &lt;code&gt;~/.notary&lt;/code&gt;, but specifying &lt;code&gt;~/.docker/trust&lt;/code&gt; facilitates interoperability with content trust.</source>
          <target state="translated">通常、デフォルトは &lt;code&gt;~/.notary&lt;/code&gt; ですが、 &lt;code&gt;~/.docker/trust&lt;/code&gt; 指定すると、コンテンツの信頼との相互運用が容易になります。</target>
        </trans-unit>
        <trans-unit id="fa1bbf331adba80ab20f6493273d833a03a0fcca" translate="yes" xml:space="preserve">
          <source>This is often required by a container registry before a particular repository can be deleted.</source>
          <target state="translated">これは、特定のリポジトリを削除する前にコンテナレジストリで必要とされることが多いです。</target>
        </trans-unit>
        <trans-unit id="91fd90ef4aaad05330d5452fcd7ec7ec6087933e" translate="yes" xml:space="preserve">
          <source>This is similar to how &lt;code&gt;docker run -e&lt;/code&gt; works. Refer to the &lt;a href=&quot;../run/index#set-environment-variables--e---env---env-file&quot;&gt;&lt;code&gt;docker run&lt;/code&gt; documentation&lt;/a&gt; for more information.</source>
          <target state="translated">これは、 &lt;code&gt;docker run -e&lt;/code&gt; の動作に似ています。詳細については、&lt;a href=&quot;../run/index#set-environment-variables--e---env---env-file&quot;&gt; &lt;code&gt;docker run&lt;/code&gt; のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ef618a52c0bf271c31c60baf9ea32508fcdb1fa4" translate="yes" xml:space="preserve">
          <source>This is the JSON format for a plugin:</source>
          <target state="translated">プラグインのJSON形式です。</target>
        </trans-unit>
        <trans-unit id="7305d96aeda88cc552aef5be7f5bde7be555b4ea" translate="yes" xml:space="preserve">
          <source>This is the default behavior (when &lt;code&gt;--virtualbox-boot2docker-url=&quot;&quot;&lt;/code&gt;), but the option also supports specifying ISOs by the &lt;code&gt;http://&lt;/code&gt; and &lt;code&gt;file://&lt;/code&gt; protocols. &lt;code&gt;file://&lt;/code&gt; looks at the path specified locally to locate the ISO: for instance, you could specify &lt;code&gt;--virtualbox-boot2docker-url file://$HOME/Downloads/rc.iso&lt;/code&gt; to test out a release candidate ISO that you have downloaded already. You could also just get an ISO straight from the Internet using the &lt;code&gt;http://&lt;/code&gt; form.</source>
          <target state="translated">これはデフォルトの動作です（ &lt;code&gt;--virtualbox-boot2docker-url=&quot;&quot;&lt;/code&gt; の場合）が、このオプションは &lt;code&gt;http://&lt;/code&gt; および &lt;code&gt;file://&lt;/code&gt; プロトコルによるISOの指定もサポートしています。 &lt;code&gt;file://&lt;/code&gt; は、ローカルで指定されたパスを調べてISOを見つけます。たとえば、 &lt;code&gt;--virtualbox-boot2docker-url file://$HOME/Downloads/rc.iso&lt;/code&gt; を指定して、お持ちのリリース候補ISOをテストできますすでにダウンロードされています。また、 &lt;code&gt;http://&lt;/code&gt; フォームを使用してインターネットから直接ISOを取得することもできます。</target>
        </trans-unit>
        <trans-unit id="6a0fa39722954e0d3b0c104d4e845a2617736fc6" translate="yes" xml:space="preserve">
          <source>This is the default usage of &lt;code&gt;inspect&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;inspect&lt;/code&gt; のデフォルトの使用法です。</target>
        </trans-unit>
        <trans-unit id="af2ef167c464d3226e03ea880ae052a754b713f0" translate="yes" xml:space="preserve">
          <source>This is the equivalent of &lt;code&gt;docker exec&lt;/code&gt;. With this subcommand you can run arbitrary commands in your services. Commands are by default allocating a TTY, so you can use a command such as &lt;code&gt;docker-compose exec web sh&lt;/code&gt; to get an interactive prompt.</source>
          <target state="translated">これは &lt;code&gt;docker exec&lt;/code&gt; に相当します。このサブコマンドを使用すると、サービスで任意のコマンドを実行できます。コマンドはデフォルトでTTYを割り当てるため、 &lt;code&gt;docker-compose exec web sh&lt;/code&gt; などのコマンドを使用してインタラクティブなプロンプトを取得できます。</target>
        </trans-unit>
        <trans-unit id="85c3861e897128ca07f6b330bd7c1240812c8049" translate="yes" xml:space="preserve">
          <source>This is the list of currently available credentials helpers and where you can download them from:</source>
          <target state="translated">これは、現在利用可能なクレデンシャル・ヘルパーのリストであり、どこからダウンロードできるかを示しています。</target>
        </trans-unit>
        <trans-unit id="5862be3ae4f73cdd710cb9ee987295bdc8b9ac72" translate="yes" xml:space="preserve">
          <source>This is the personal access token used in the next step to create your cloud server.</source>
          <target state="translated">これは、次のステップでクラウドサーバーを作成する際に使用する個人アクセストークンです。</target>
        </trans-unit>
        <trans-unit id="f0c5f9b395826f39c10bef305be8f5db6bb30682" translate="yes" xml:space="preserve">
          <source>This is the same &lt;code&gt;docker wait&lt;/code&gt; command from above, but it now exits, returning &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">これは上記の &lt;code&gt;docker wait&lt;/code&gt; コマンドと同じですが、終了して &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3555f0fca87e0f9ff9496a882c687f574c02dc73" translate="yes" xml:space="preserve">
          <source>This is the same example via the command line:</source>
          <target state="translated">これは、コマンドラインを介して同じ例です。</target>
        </trans-unit>
        <trans-unit id="251a9da2d1b4f0bd61f8256864e6b4ebe6a72a52" translate="yes" xml:space="preserve">
          <source>This is the simplest method, you can then create a new machine with:</source>
          <target state="translated">これは最もシンプルな方法で、新しいマシンを作成することができます。</target>
        </trans-unit>
        <trans-unit id="c8b231c7fb71e242adeaaeff66bb4de586f261f9" translate="yes" xml:space="preserve">
          <source>This is the standard memory limitation mechanism already present before using kernel memory. Kernel memory is completely ignored.</source>
          <target state="translated">これはカーネルメモリを使用する前に既に存在する標準的なメモリ制限の仕組みです。カーネルメモリは完全に無視されます。</target>
        </trans-unit>
        <trans-unit id="19e4bde3d0f60733a3e0ad9bce7974e35bcc44d6" translate="yes" xml:space="preserve">
          <source>This is used to store encrypted private keys. We only support MySQL or an in-memory store, currently.</source>
          <target state="translated">これは暗号化された秘密鍵を保存するために使用されます。現在のところ、MySQL またはインメモリストアのみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="d54da147c996ef27c593b7d07ae9ff4994b4f79a" translate="yes" xml:space="preserve">
          <source>This is useful if you are building an image which will be used as a base to build other images, for example an application build environment or a daemon which may be customized with user-specific configuration.</source>
          <target state="translated">これは、他のイメージを構築するためのベースとして使用するイメージを構築している場合に便利です。</target>
        </trans-unit>
        <trans-unit id="48f4db13420819f2767c47cc8924c535b4918fe6" translate="yes" xml:space="preserve">
          <source>This is useful when using &lt;code&gt;docker-machine&lt;/code&gt; with a local VM provider, such as &lt;code&gt;virtualbox&lt;/code&gt; or &lt;code&gt;vmwarefusion&lt;/code&gt;, in network environments where an HTTP proxy is required for internet access.</source>
          <target state="translated">これは、インターネットアクセスにHTTPプロキシが必要なネットワーク環境で &lt;code&gt;virtualbox&lt;/code&gt; や &lt;code&gt;vmwarefusion&lt;/code&gt; などのローカルVMプロバイダーでdocker &lt;code&gt;docker-machine&lt;/code&gt; を使用する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5a7b1461e3ee98e1f1d34f112616529a3957831f" translate="yes" xml:space="preserve">
          <source>This is useful when you want to set up a container configuration ahead of time so that it is ready to start when you need it. The initial status of the new container is &lt;code&gt;created&lt;/code&gt;.</source>
          <target state="translated">これは、コンテナー構成を事前にセットアップして、必要なときに開始できるようにする場合に役立ちます。新しいコンテナの初期ステータスが &lt;code&gt;created&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="242280060f1a747d5d62fa574aa2db8f307d6fa8" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t going to print anything unless there&amp;rsquo;s an error because we&amp;rsquo;ve only attached to the &lt;code&gt;STDERR&lt;/code&gt; of the container. The container&amp;rsquo;s logs still store what&amp;rsquo;s been written to &lt;code&gt;STDERR&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt;.</source>
          <target state="translated">コンテナーの &lt;code&gt;STDERR&lt;/code&gt; にのみ接続しているため、エラーが発生しない限り、これは何も出力しません。コンテナーのログには、 &lt;code&gt;STDERR&lt;/code&gt; および &lt;code&gt;STDOUT&lt;/code&gt; に書き込まれた内容が引き続き保存されます。</target>
        </trans-unit>
        <trans-unit id="b04e5b87a95aeb05841a0835214650cd8ff8e690" translate="yes" xml:space="preserve">
          <source>This key allows Docker image repositories to have freshness security guarantees without requiring periodic content refreshes on the client&amp;rsquo;s side.</source>
          <target state="translated">このキーにより、Dockerイメージリポジトリは、クライアント側でコンテンツを定期的に更新する必要なく、鮮度のセキュリティが保証されます。</target>
        </trans-unit>
        <trans-unit id="4dc9f1697bcfe844f2abff99aa695a8640467143" translate="yes" xml:space="preserve">
          <source>This key allows you to sign image tags, to manage delegations including delegated keys or permitted delegation paths. Also known as the repository key, since this key determines what tags can be signed into an image repository.</source>
          <target state="translated">このキーを使用すると、画像タグに署名することができ、委任キーや許可された委任パスを含む委任を管理することができます。リポジトリキーとしても知られており、このキーは画像リポジトリに署名できるタグを決定するためです。</target>
        </trans-unit>
        <trans-unit id="0ee6ba929f00726e2f0585d573a2dfa825f67b1b" translate="yes" xml:space="preserve">
          <source>This key signs the current collection of image tags, preventing mix and match attacks.</source>
          <target state="translated">このキーは、現在の画像タグのコレクションに署名し、混在攻撃と一致攻撃を防ぎます。</target>
        </trans-unit>
        <trans-unit id="4f77290ea2869acff19a050095fe90ce3122e97a" translate="yes" xml:space="preserve">
          <source>This loss also requires &lt;strong&gt;manual intervention&lt;/strong&gt; from every consumer that pulled the tagged image prior to the loss. Image consumers would get an error for content that they already downloaded:</source>
          <target state="translated">この損失には、損失の前にタグ付けされた画像をプルしたすべての消費者からの&lt;strong&gt;手動の介入&lt;/strong&gt;も必要です。画像の消費者は、すでにダウンロードしたコンテンツに対してエラーを受け取ります：</target>
        </trans-unit>
        <trans-unit id="1c58d800f6f93f6ac23f9417190716231f4e6ca5" translate="yes" xml:space="preserve">
          <source>This means a lot for container security; let&amp;rsquo;s see why!</source>
          <target state="translated">これはコンテナのセキュリティにとって非常に重要です。理由を見てみましょう！</target>
        </trans-unit>
        <trans-unit id="57b7f29b05ce9f5fbb9eb609c0f9284f0daaf51d" translate="yes" xml:space="preserve">
          <source>This means processes in container can be executed on cpu 0, cpu 1 and cpu 2.</source>
          <target state="translated">つまり、コンテナ内のプロセスは、CPU 0、CPU 1、CPU 2 で実行できるということです。</target>
        </trans-unit>
        <trans-unit id="b3cfe09c86fb751994a178ab22bdcf760e7c1414" translate="yes" xml:space="preserve">
          <source>This means processes in container can be executed on cpu 1 and cpu 3.</source>
          <target state="translated">つまり、コンテナ内のプロセスは、CPU1とCPU3で実行できるということです。</target>
        </trans-unit>
        <trans-unit id="0bfd3f5ba2e037f66ae2105dd609d0014d346456" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;testuser&lt;/code&gt; is assigned a subordinate user ID range of &lt;code&gt;231072&lt;/code&gt; and the next 65536 integers in sequence. UID &lt;code&gt;231072&lt;/code&gt; is mapped within the namespace (within the container, in this case) as UID &lt;code&gt;0&lt;/code&gt; (&lt;code&gt;root&lt;/code&gt;). UID &lt;code&gt;231073&lt;/code&gt; is mapped as UID &lt;code&gt;1&lt;/code&gt;, and so forth. If a process attempts to escalate privilege outside of the namespace, the process is running as an unprivileged high-number UID on the host, which does not even map to a real user. This means the process has no privileges on the host system at all.</source>
          <target state="translated">これは、 &lt;code&gt;testuser&lt;/code&gt; に &lt;code&gt;231072&lt;/code&gt; の従属ユーザーID範囲と次の65536整数が順に割り当てられることを意味します。UID &lt;code&gt;231072&lt;/code&gt; は、ネームスペース内（この場合はコンテナー内）でUID &lt;code&gt;0&lt;/code&gt; （ &lt;code&gt;root&lt;/code&gt; ）としてマップされます。UID &lt;code&gt;231073&lt;/code&gt; はUID &lt;code&gt;1&lt;/code&gt; としてマッピングされます。プロセスが名前空間の外で特権をエスカレートしようとする場合、そのプロセスはホスト上で非特権の高数値UIDとして実行されており、実際のユーザーにマッピングされることすらありません。これは、プロセスがホストシステムに対してまったく権限を持たないことを意味します。</target>
        </trans-unit>
        <trans-unit id="30a07d01e7b27c33ddc4d0946c7f0b54e8fa898a" translate="yes" xml:space="preserve">
          <source>This means that commands that raise privileges such as &lt;code&gt;su&lt;/code&gt; or &lt;code&gt;sudo&lt;/code&gt; will no longer work. It also causes any seccomp filters to be applied later, after privileges have been dropped which may mean you can have a more restrictive set of filters. For more details, see the &lt;a href=&quot;https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt&quot;&gt;kernel documentation&lt;/a&gt;.</source>
          <target state="translated">つまり、 &lt;code&gt;su&lt;/code&gt; や &lt;code&gt;sudo&lt;/code&gt; などの特権を発生させるコマンドは機能しなくなります。また、特権が削除された後、seccompフィルターが後で適用されるようになります。これは、より限定的なフィルターセットを使用できることを意味する場合があります。詳細については、&lt;a href=&quot;https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt&quot;&gt;カーネルのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7ee4e31ae7518e4aba3b08daf725b09cc465d272" translate="yes" xml:space="preserve">
          <source>This means that even if an intruder manages to escalate to root within a container, it is much harder to do serious damage, or to escalate to the host.</source>
          <target state="translated">つまり、侵入者がコンテナ内でルートにエスカレートすることに成功しても、深刻なダメージを与えたり、ホストにエスカレートしたりすることははるかに難しいということです。</target>
        </trans-unit>
        <trans-unit id="cfba96fcdabc85b27cf0354360479e1a65d7a0a6" translate="yes" xml:space="preserve">
          <source>This means that in most cases, containers do not need &amp;ldquo;real&amp;rdquo; root privileges &lt;em&gt;at all&lt;/em&gt;. And therefore, containers can run with a reduced capability set; meaning that &amp;ldquo;root&amp;rdquo; within a container has much less privileges than the real &amp;ldquo;root&amp;rdquo;. For instance, it is possible to:</source>
          <target state="translated">ほとんどの場合、コンテナは「本物」のroot権限を必要としないことをこれは意味&lt;em&gt;のすべてで&lt;/em&gt;。したがって、コンテナは機能セットを減らして実行できます。つまり、コンテナ内の「ルート」には、実際の「ルート」よりもはるかに少ない権限しかありません。たとえば、次のことが可能です。</target>
        </trans-unit>
        <trans-unit id="48f2e56c16bd5a8788d2bdee07af5fa0873dde6f" translate="yes" xml:space="preserve">
          <source>This means that user-namespaced processes started by &lt;code&gt;testuser&lt;/code&gt; are owned by host UID &lt;code&gt;231072&lt;/code&gt; (which looks like UID &lt;code&gt;0&lt;/code&gt; inside the namespace) through 296607 (231072 + 65536 - 1). These ranges should not overlap, to ensure that namespaced processes cannot access each other&amp;rsquo;s namespaces.</source>
          <target state="translated">つまり、 &lt;code&gt;testuser&lt;/code&gt; によって開始されたユーザー名前空間付きプロセスは、296607（231072 + 65536-1）までのホストUID &lt;code&gt;231072&lt;/code&gt; （名前空間内ではUID &lt;code&gt;0&lt;/code&gt; のように見えます）によって所有されます。名前空間を持つプロセスが互いの名前空間にアクセスできないようにするために、これらの範囲は重複してはなりません。</target>
        </trans-unit>
        <trans-unit id="7600b39f3c3ea87e505c16f306e0490a4ce5ec49" translate="yes" xml:space="preserve">
          <source>This means you run your own content trust (Notary) server and registry. If you work exclusively with the Docker Hub, you would not need with these components. They are built into the Docker Hub for you. For the sandbox, however, you build your own entire, mock production environment.</source>
          <target state="translated">これは、独自のコンテンツトラスト(Notary)サーバーとレジストリを実行することを意味します。Docker Hubのみで作業する場合、これらのコンポーネントは必要ありません。これらのコンポーネントはDocker Hubに組み込まれています。しかし、サンドボックスの場合は、自分で全体のモック本番環境を構築することになります。</target>
        </trans-unit>
        <trans-unit id="4be21e58b2ba0448e561f4023a1ef3cecba87466" translate="yes" xml:space="preserve">
          <source>This opens an interactive PostgreSQL shell for the linked &lt;code&gt;db&lt;/code&gt; container.</source>
          <target state="translated">これにより、リンクされた &lt;code&gt;db&lt;/code&gt; コンテナーのインタラクティブなPostgreSQLシェルが開きます。</target>
        </trans-unit>
        <trans-unit id="7d383519df6c6513bd69ba83e4ed66750ea9fc1f" translate="yes" xml:space="preserve">
          <source>This option can also be set in the configuration file.</source>
          <target state="translated">このオプションは、設定ファイルで設定することもできます。</target>
        </trans-unit>
        <trans-unit id="786e7d6ffd559942db81568bb9e1e90f3c8666fb" translate="yes" xml:space="preserve">
          <source>This option can be overridden with the command line flag &lt;code&gt;--trustDir&lt;/code&gt;.</source>
          <target state="translated">このオプションは、コマンドラインフラグ &lt;code&gt;--trustDir&lt;/code&gt; で上書きできます。</target>
        </trans-unit>
        <trans-unit id="602e27f24732b02e597ef9d5c2498011784c8d49" translate="yes" xml:space="preserve">
          <source>This option can be used multiple times.</source>
          <target state="translated">このオプションは複数回使用することができます。</target>
        </trans-unit>
        <trans-unit id="deb85cf374d2bd098ea8bf65926f5bd0296e5ac1" translate="yes" xml:space="preserve">
          <source>This option can be used to perform batch operations. For example, you can use the task IDs as input for other commands, such as &lt;code&gt;docker inspect&lt;/code&gt;. The following example inspects all tasks of the &amp;ldquo;voting&amp;rdquo; stack;</source>
          <target state="translated">このオプションを使用して、バッチ操作を実行できます。たとえば、タスクIDを &lt;code&gt;docker inspect&lt;/code&gt; などの他のコマンドの入力として使用できます。次の例では、「投票」スタックのすべてのタスクを検査します。</target>
        </trans-unit>
        <trans-unit id="09c05ac58960b992e4b1ec957239a624b2b15cd8" translate="yes" xml:space="preserve">
          <source>This option cannot be set in the configuration file, since some log messages are produced on startup before the configuration file has been read.</source>
          <target state="translated">ログメッセージの中には、設定ファイルを読み込む前に起動時に生成されるものがあるため、このオプションは設定ファイルでは設定できません。</target>
        </trans-unit>
        <trans-unit id="0b544efcdd617df8c8ebb314fd8bb18a08e0d1c7" translate="yes" xml:space="preserve">
          <source>This option is ignored when &lt;a href=&quot;../../engine/reference/commandline/stack_deploy/index&quot;&gt;deploying a stack in swarm mode&lt;/a&gt; with a (version 3) Compose file.</source>
          <target state="translated">（バージョン3）Composeファイルを使用&lt;a href=&quot;../../engine/reference/commandline/stack_deploy/index&quot;&gt;してスウォームモード&lt;/a&gt;でスタックをデプロイする場合、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="dc5425b76c95826c100ba5446ec4e726d8998ffb" translate="yes" xml:space="preserve">
          <source>This option is only used for services using Windows containers. The &lt;code&gt;--credential-spec&lt;/code&gt; must be in the format &lt;code&gt;file://&amp;lt;filename&amp;gt;&lt;/code&gt; or &lt;code&gt;registry://&amp;lt;value-name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">このオプションは、Windowsコンテナーを使用するサービスにのみ使用されます。 &lt;code&gt;--credential-spec&lt;/code&gt; は、フォーマットでなければなりません &lt;code&gt;file://&amp;lt;filename&amp;gt;&lt;/code&gt; や &lt;code&gt;registry://&amp;lt;value-name&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a01b357f248f0c5b0a8b9362685cf5aadf905f1" translate="yes" xml:space="preserve">
          <source>This option is useful in situations where you are running Docker containers on Windows. The &lt;code&gt;--isolation &amp;lt;value&amp;gt;&lt;/code&gt; option sets a container&amp;rsquo;s isolation technology. On Linux, the only supported is the &lt;code&gt;default&lt;/code&gt; option which uses Linux namespaces. These two commands are equivalent on Linux:</source>
          <target state="translated">このオプションは、WindowsでDockerコンテナーを実行している状況で役立ちます。 &lt;code&gt;--isolation &amp;lt;value&amp;gt;&lt;/code&gt; オプションは、コンテナの分離技術を設定します。Linuxでサポートされているのは、Linux名前空間を使用する &lt;code&gt;default&lt;/code&gt; オプションのみです。これらの2つのコマンドはLinuxでは同等です。</target>
        </trans-unit>
        <trans-unit id="0e1474e103bac32d3633014fa5ef286d6e98a022" translate="yes" xml:space="preserve">
          <source>This option is useful in situations where you are running Docker containers on Windows. The &lt;code&gt;--isolation=&amp;lt;value&amp;gt;&lt;/code&gt; option sets a container&amp;rsquo;s isolation technology. On Linux, the only supported is the &lt;code&gt;default&lt;/code&gt; option which uses Linux namespaces. On Microsoft Windows, you can specify these values:</source>
          <target state="translated">このオプションは、WindowsでDockerコンテナーを実行している状況で役立ちます。 &lt;code&gt;--isolation=&amp;lt;value&amp;gt;&lt;/code&gt; オプションは、コンテナの分離技術を設定します。Linuxでサポートされているのは、Linux名前空間を使用する &lt;code&gt;default&lt;/code&gt; オプションのみです。Microsoft Windowsでは、次の値を指定できます。</target>
        </trans-unit>
        <trans-unit id="c3502397d9c95e8752a045691eeabeb56830d1d1" translate="yes" xml:space="preserve">
          <source>This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.</source>
          <target state="translated">このオプションは、非配布可能なアーティファクトを含む画像をエアギャップされたネットワーク上のレジストリにプッシュして、そのネットワーク上のホストが別のサーバに接続することなく画像を取得できるようにする場合に有用です。</target>
        </trans-unit>
        <trans-unit id="99eeb17c4ee34c08168c8ec5dfdcc18fa3795d2c" translate="yes" xml:space="preserve">
          <source>This option sets the docker service containers hostname to a specific string. For example:</source>
          <target state="translated">このオプションは、docker サービスコンテナのホスト名を特定の文字列に設定します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="981270b4c5799e6fe462195aa37966c4a2030ccc" translate="yes" xml:space="preserve">
          <source>This page applies to Compose file formats &lt;a href=&quot;../compose-file/compose-file-v2/index&quot;&gt;version 2&lt;/a&gt; and &lt;a href=&quot;../compose-file/index&quot;&gt;higher&lt;/a&gt;. Networking features are not supported for Compose file &lt;a href=&quot;../compose-file/compose-file-v1/index&quot;&gt;version 1 (legacy)&lt;/a&gt;.</source>
          <target state="translated">このページには、作曲のファイル形式に適用され&lt;a href=&quot;../compose-file/compose-file-v2/index&quot;&gt;、バージョン2&lt;/a&gt;と&lt;a href=&quot;../compose-file/index&quot;&gt;高いです&lt;/a&gt;。ネットワーク機能は、コンポーズファイル&lt;a href=&quot;../compose-file/compose-file-v1/index&quot;&gt;バージョン1（レガシー）&lt;/a&gt;ではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="b3bcee27a3e5ad0d22df092686f11de2435eb18b" translate="yes" xml:space="preserve">
          <source>This page describes the commands you can use in a &lt;code&gt;Dockerfile&lt;/code&gt;. When you are done reading this page, refer to the &lt;a href=&quot;https://docs.docker.com/develop/develop-images&quot;&gt;&lt;code&gt;Dockerfile&lt;/code&gt; Best Practices&lt;/a&gt; for a tip-oriented guide.</source>
          <target state="translated">このページでは、 &lt;code&gt;Dockerfile&lt;/code&gt; で使用できるコマンドについて説明します。このページを読み&lt;a href=&quot;https://docs.docker.com/develop/develop-images&quot;&gt; &lt;code&gt;Dockerfile&lt;/code&gt; &lt;/a&gt;、Dockerfileのベストプラクティスを参照して、ヒント指向のガイドを確認してください。</target>
        </trans-unit>
        <trans-unit id="520b8773046dd27d7e1f25471d051e56182724ac" translate="yes" xml:space="preserve">
          <source>This page details how to use the &lt;code&gt;docker run&lt;/code&gt; command to define the container&amp;rsquo;s resources at runtime.</source>
          <target state="translated">このページでは、 &lt;code&gt;docker run&lt;/code&gt; コマンドを使用して、実行時にコンテナのリソースを定義する方法について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="a1dd89b5fa251310eb3ee973322ff3a094201bdb" translate="yes" xml:space="preserve">
          <source>This page explains advanced uses of Notary client for users who are running their own Notary service. Make sure you have first read and understood how to &lt;a href=&quot;../running_a_service/index&quot;&gt;run your own Notary service&lt;/a&gt; before continuing.</source>
          <target state="translated">このページでは、独自のNotaryサービスを実行しているユーザーのためのNotaryクライアントの高度な使用法について説明します。続行する前に&lt;a href=&quot;../running_a_service/index&quot;&gt;、&lt;/a&gt;最初に独自の公証人サービスを実行する方法を読んで理解していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="0b18cbcc127ee1f004b66d9d1933c4e16e9912d7" translate="yes" xml:space="preserve">
          <source>This page explains how to set up and use a sandbox for experimenting with trust. The sandbox allows you to configure and try trust operations locally without impacting your production images.</source>
          <target state="translated">このページでは、トラストを試すためのサンドボックスを設定して使用する方法を説明します。サンドボックスを使用すると、本番イメージに影響を与えることなく、ローカルでトラスト操作を設定して試すことができます。</target>
        </trans-unit>
        <trans-unit id="1ce9146232e8f6563acf7cbede4e05fe73611e2d" translate="yes" xml:space="preserve">
          <source>This page is intended for people who want to develop their own Docker plugin. If you just want to learn about or use Docker plugins, look &lt;a href=&quot;../legacy_plugins/index&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">このページは、独自のDockerプラグインを開発したい人を対象としています。Dockerプラグインについて学びたい、または使用したいだけの場合は、&lt;a href=&quot;../legacy_plugins/index&quot;&gt;こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fc10a8f4423dc87d792404760250d462923aec64" translate="yes" xml:space="preserve">
          <source>This page provides the usage information for the &lt;code&gt;docker-compose&lt;/code&gt; Command.</source>
          <target state="translated">このページでは、 &lt;code&gt;docker-compose&lt;/code&gt; コマンドの使用方法について説明します。</target>
        </trans-unit>
        <trans-unit id="fd979b0e56c0e84cc55b9aebae95771ea2abdea4" translate="yes" xml:space="preserve">
          <source>This parameter determines which version of the image will be pulled and/or on which platform the service&amp;rsquo;s build will be performed.</source>
          <target state="translated">このパラメーターは、プルされるイメージのバージョンや、サービスのビルドが実行されるプラットフォームを決定します。</target>
        </trans-unit>
        <trans-unit id="7834362bad9f0c5ac4c0231260c73961428425f8" translate="yes" xml:space="preserve">
          <source>This parameter specifies the alias of the current password used to encrypt the private keys in the DB. All new private keys are encrypted using this password, which must also be provided as the environment variable &lt;code&gt;NOTARY_SIGNER_&amp;lt;DEFAULT_ALIAS_VALUE&amp;gt;&lt;/code&gt;. See the &lt;a href=&quot;index#environment-variables-required-if-using-mysql&quot;&gt;environment variable&lt;/a&gt; section for more information.</source>
          <target state="translated">このパラメーターは、DB内の秘密鍵の暗号化に使用される現在のパスワードのエイリアスを指定します。新しい秘密鍵はすべて、このパスワードを使用して暗号化されます。このパスワードは、環境変数 &lt;code&gt;NOTARY_SIGNER_&amp;lt;DEFAULT_ALIAS_VALUE&amp;gt;&lt;/code&gt; としても提供する必要があります。詳細については、&lt;a href=&quot;index#environment-variables-required-if-using-mysql&quot;&gt;環境変数の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="777dd799c74e2adc2e81ed1d25f994ec8bee45d2" translate="yes" xml:space="preserve">
          <source>This passes the login token from your local client to the swarm nodes where the service is deployed, using the encrypted WAL logs. With this information, the nodes are able to log into the registry and pull the image.</source>
          <target state="translated">これは、暗号化されたWALログを使用して、ローカルクライアントからサービスがデプロイされているスウォームノードにログイントークンを渡します。この情報があれば、ノードはレジストリにログインしてイメージを引き出すことができます。</target>
        </trans-unit>
        <trans-unit id="186bd09d4ceee22a6e34a32f2e71aaad0d395416" translate="yes" xml:space="preserve">
          <source>This pipes data into a container and prints the container&amp;rsquo;s ID by attaching only to the container&amp;rsquo;s &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">これはデータをコンテナーにパイプし、コンテナーの &lt;code&gt;STDIN&lt;/code&gt; にのみアタッチすることによってコンテナーのIDを出力します。</target>
        </trans-unit>
        <trans-unit id="cbbe535825f032e9c23c746bc41235f80250d2f0" translate="yes" xml:space="preserve">
          <source>This plugin is a volume driver. It requires a &lt;code&gt;host&lt;/code&gt; network and the &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; capability. It depends upon the &lt;code&gt;/docker-volume-sshfs&lt;/code&gt; entrypoint and uses the &lt;code&gt;/run/docker/plugins/sshfs.sock&lt;/code&gt; socket to communicate with Docker Engine. This plugin has no runtime parameters.</source>
          <target state="translated">このプラグインはボリュームドライバーです。 &lt;code&gt;host&lt;/code&gt; ネットワークと &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; 機能が必要です。 &lt;code&gt;/docker-volume-sshfs&lt;/code&gt; エントリーポイントに依存し、/ run / docker / plugins / &lt;code&gt;/run/docker/plugins/sshfs.sock&lt;/code&gt; ソケットを使用してDockerエンジンと通信します。このプラグインにはランタイムパラメータがありません。</target>
        </trans-unit>
        <trans-unit id="1d2f209a3ba087c8c67f2de6bc50a74cc47a50d9" translate="yes" xml:space="preserve">
          <source>This port remapping of &lt;code&gt;4000:80&lt;/code&gt; demonstrates the difference between &lt;code&gt;EXPOSE&lt;/code&gt; within the &lt;code&gt;Dockerfile&lt;/code&gt; and what the &lt;code&gt;publish&lt;/code&gt; value is set to when running &lt;code&gt;docker run -p&lt;/code&gt;. In later steps, map port 4000 on the host to port 80 in the container and use &lt;code&gt;http://localhost&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;4000:80&lt;/code&gt; のポートの再マッピングは、 &lt;code&gt;Dockerfile&lt;/code&gt; 内の &lt;code&gt;EXPOSE&lt;/code&gt; と、docker &lt;code&gt;docker run -p&lt;/code&gt; 時に &lt;code&gt;publish&lt;/code&gt; 値が何に設定されるかとの違いを示しています。後の手順で、ホストのポート4000をコンテナのポート80にマップし、 &lt;code&gt;http://localhost&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="400f85bbbb30f2db4b530953974fa7f8f34248d8" translate="yes" xml:space="preserve">
          <source>This project directory contains a &lt;code&gt;docker-compose.yml&lt;/code&gt; file which is complete in itself for a good starter wordpress project.</source>
          <target state="translated">このプロジェクトディレクトリには &lt;code&gt;docker-compose.yml&lt;/code&gt; ファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="0fab90084a9574add069411094898125425161d6" translate="yes" xml:space="preserve">
          <source>This quick-start guide demonstrates how to use Docker Compose to set up and run a simple Django/PostgreSQL app. Before starting, &lt;a href=&quot;../install/index&quot;&gt;install Compose&lt;/a&gt;.</source>
          <target state="translated">このクイックスタートガイドでは、Docker Composeを使用して簡単なDjango / PostgreSQLアプリを設定および実行する方法を示します。開始&lt;a href=&quot;../install/index&quot;&gt;する&lt;/a&gt;前に、Composeをインストールします。</target>
        </trans-unit>
        <trans-unit id="43734e73ef0ab40baf5043068cbd9606f0db30af" translate="yes" xml:space="preserve">
          <source>This re-mapping is transparent to the container, but introduces some configuration complexity in situations where the container needs access to resources on the Docker host, such as bind mounts into areas of the filesystem that the system user cannot write to. From a security standpoint, it is best to avoid these situations.</source>
          <target state="translated">この再マッピングはコンテナからは透過的ですが、システムユーザーが書き込めないファイルシステムの領域にマウントをバインドするなど、コンテナがDockerホスト上のリソースにアクセスする必要がある状況では、設定が複雑になります。セキュリティの観点からは、このような状況は避けた方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="2ac24de773f731f14c2aa9b535d04f2d0fe4fb25" translate="yes" xml:space="preserve">
          <source>This reference page includes an &lt;a href=&quot;index#example&quot;&gt;example&lt;/a&gt; showing you how to use an elevated (Administrator-level) PowerShell and create and use an external network switch.</source>
          <target state="translated">このリファレンスページには、管理者レベルのPowerShellを使用して、外部ネットワークスイッチを作成および使用する方法を示す&lt;a href=&quot;index#example&quot;&gt;例が&lt;/a&gt;含まれています。</target>
        </trans-unit>
        <trans-unit id="1b8530043a8c63a7b1bf544dc37654c646288627" translate="yes" xml:space="preserve">
          <source>This results in an image named &lt;code&gt;webapp&lt;/code&gt; and tagged &lt;code&gt;tag&lt;/code&gt;, built from &lt;code&gt;./dir&lt;/code&gt;.</source>
          <target state="translated">これにより、。 &lt;code&gt;./dir&lt;/code&gt; から構築された &lt;code&gt;webapp&lt;/code&gt; という名前のイメージとタグ付き &lt;code&gt;tag&lt;/code&gt; が作成されます。</target>
        </trans-unit>
        <trans-unit id="c4a19e399a6b2f22766891f01bcf211751581c40" translate="yes" xml:space="preserve">
          <source>This runs &lt;a href=&quot;../reference/up/index&quot;&gt;&lt;code&gt;docker-compose up&lt;/code&gt;&lt;/a&gt; in detached mode, pulls the needed Docker images, and starts the wordpress and database containers, as shown in the example below.</source>
          <target state="translated">以下の例に示すように、これにより、切り離しモードで&lt;a href=&quot;../reference/up/index&quot;&gt; &lt;code&gt;docker-compose up&lt;/code&gt; &lt;/a&gt;が実行され、必要なDockerイメージがプルされ、ワードプレスおよびデータベースコンテナーが起動します。</target>
        </trans-unit>
        <trans-unit id="f9b9eb4cba5242d0517d69026c6dbbef8a348333" translate="yes" xml:space="preserve">
          <source>This runs a database upgrade script, and removes the container when finished running, even if a restart policy is specified in the service configuration.</source>
          <target state="translated">これはデータベースのアップグレードスクリプトを実行し、サービス構成で再起動ポリシーが指定されていても、実行が終了するとコンテナを削除します。</target>
        </trans-unit>
        <trans-unit id="e150e35bd17dc66b08dd165468a66d8d046d4aff" translate="yes" xml:space="preserve">
          <source>This sandbox requires you to install two Docker tools: Docker Engine &amp;gt;= 1.10.0 and Docker Compose &amp;gt;= 1.6.0. To install the Docker Engine, choose from the &lt;a href=&quot;https://docs.docker.com/install&quot;&gt;list of supported platforms&lt;/a&gt;. To install Docker Compose, see the &lt;a href=&quot;../../../../compose/install/index&quot;&gt;detailed instructions here&lt;/a&gt;.</source>
          <target state="translated">このサンドボックスでは、Docker Engine&amp;gt; = 1.10.0とDocker Compose&amp;gt; = 1.6.0の2つのDockerツールをインストールする必要があります。Docker Engineをインストールするには&lt;a href=&quot;https://docs.docker.com/install&quot;&gt;、サポートされているプラ​​ットフォームのリスト&lt;/a&gt;から選択します。Docker Composeをインストールするには、&lt;a href=&quot;../../../../compose/install/index&quot;&gt;こちら&lt;/a&gt;の詳細な手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d722c716942538bb06fbff5809f80307eb51376" translate="yes" xml:space="preserve">
          <source>This section configures either a remote trust service, such as &lt;a href=&quot;../signer-config/index&quot;&gt;Notary signer&lt;/a&gt; or a local in-memory ED25519 trust service.</source>
          <target state="translated">このセクションでは、&lt;a href=&quot;../signer-config/index&quot;&gt;Notary署名者&lt;/a&gt;などのリモート信頼サービスまたはローカルインメモリED25519信頼サービスを構成します。</target>
        </trans-unit>
        <trans-unit id="4c86039c85f7195b021ecad64f1fee5cc131f784" translate="yes" xml:space="preserve">
          <source>This section contains a list of all configuration options supported by a service definition in version 1.</source>
          <target state="translated">このセクションでは、バージョン1のサービス定義でサポートされているすべての構成オプションのリストを示します。</target>
        </trans-unit>
        <trans-unit id="85b7d0dcb6dd13d4db78e60408f7235755a2526a" translate="yes" xml:space="preserve">
          <source>This section contains a list of all configuration options supported by a service definition in version 2.</source>
          <target state="translated">このセクションでは、バージョン2のサービス定義でサポートされているすべての構成オプションのリストを示します。</target>
        </trans-unit>
        <trans-unit id="c0cf6a85c5e3740d43205d33a70e820bd507428a" translate="yes" xml:space="preserve">
          <source>This section contains a list of all configuration options supported by a service definition in version 3.</source>
          <target state="translated">このセクションでは、バージョン 3 のサービス定義でサポートされているすべての構成オプションのリストを示します。</target>
        </trans-unit>
        <trans-unit id="8d549129bb6cf24086902861560365e7cc52b6b1" translate="yes" xml:space="preserve">
          <source>This section contains the following:</source>
          <target state="translated">このセクションには、以下のような内容が含まれています。</target>
        </trans-unit>
        <trans-unit id="ee83559b5577073cb43336d61876b19d3de3df75" translate="yes" xml:space="preserve">
          <source>This section describes how to run multiple Docker daemons on a single host. To run multiple daemons, you must configure each daemon so that it does not conflict with other daemons on the same host. You can set these options either by providing them as flags, or by using a &lt;a href=&quot;#daemon-configuration-file&quot;&gt;daemon configuration file&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、単一のホストで複数のDockerデーモンを実行する方法について説明します。複数のデーモンを実行するには、同じホスト上の他のデーモンと競合しないように各デーモンを構成する必要があります。これらのオプションは、フラグとして提供するか、&lt;a href=&quot;#daemon-configuration-file&quot;&gt;デーモン構成ファイル&lt;/a&gt;を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="c38e85475538bb7b0dbb9cc421408046c48d2d71" translate="yes" xml:space="preserve">
          <source>This section discusses the security features you can configure and use within your Docker Engine installation.</source>
          <target state="translated">このセクションでは、Docker Engineインストール内で設定して使用できるセキュリティ機能について説明します。</target>
        </trans-unit>
        <trans-unit id="57e64893facea6a939694998656d3d9a3b97113d" translate="yes" xml:space="preserve">
          <source>This section includes graduated examples which illustrate how to use Docker configs.</source>
          <target state="translated">このセクションでは、Dockerのコンフィグの使い方を説明する段階的な例を紹介しています。</target>
        </trans-unit>
        <trans-unit id="b55a57d8c3e24e8a67a377f147fdc8c57a6e8223" translate="yes" xml:space="preserve">
          <source>This section includes three graduated examples which illustrate how to use Docker secrets. The images used in these examples have been updated to make it easier to use Docker secrets. To find out how to modify your own images in a similar way, see &lt;a href=&quot;#build-support-for-docker-secrets-into-your-images&quot;&gt;Build support for Docker Secrets into your images&lt;/a&gt;.</source>
          <target state="translated">このセクションには、Dockerシークレットの使用方法を示す3つの段階的な例が含まれています。これらの例で使用されている画像は、Dockerシークレットを使いやすくするために更新されています。同様の方法で独自のイメージを変更する方法については、「&lt;a href=&quot;#build-support-for-docker-secrets-into-your-images&quot;&gt;Dockerシークレットのサポートをイメージに組み込む」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="40000fb43f9e8961c3806bbd14470f5ceb866a60" translate="yes" xml:space="preserve">
          <source>This section is optional, Notary uses TOFU over HTTPS by default and trust certificates in the downloaded root file.</source>
          <target state="translated">このセクションはオプションで、Notary はデフォルトで TOFU over HTTPS を使用し、ダウンロードしたルートファイルの証明書を信頼します。</target>
        </trans-unit>
        <trans-unit id="2b4a2a0375631d1fcd2fe15c8ccfd5c62ddf3b3b" translate="yes" xml:space="preserve">
          <source>This sections specifies the authentication options for the server. Currently, we only support token authentication.</source>
          <target state="translated">このセクションでは、サーバの認証オプションを指定します。現在のところ、トークン認証のみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="966c7b77e5a06686bbebfe1ea406be83e1e9af65" translate="yes" xml:space="preserve">
          <source>This sends the URL &lt;code&gt;http://server/ctx.tar.gz&lt;/code&gt; to the Docker daemon, which downloads and extracts the referenced tarball. The &lt;code&gt;-f ctx/Dockerfile&lt;/code&gt; parameter specifies a path inside &lt;code&gt;ctx.tar.gz&lt;/code&gt; to the &lt;code&gt;Dockerfile&lt;/code&gt; that is used to build the image. Any &lt;code&gt;ADD&lt;/code&gt; commands in that &lt;code&gt;Dockerfile&lt;/code&gt; that refers to local paths must be relative to the root of the contents inside &lt;code&gt;ctx.tar.gz&lt;/code&gt;. In the example above, the tarball contains a directory &lt;code&gt;ctx/&lt;/code&gt;, so the &lt;code&gt;ADD ctx/container.cfg /&lt;/code&gt; operation works as expected.</source>
          <target state="translated">これにより、URL &lt;code&gt;http://server/ctx.tar.gz&lt;/code&gt; がDockerデーモンに送信され、Dockerデーモンが参照されているtarballをダウンロードして抽出します。 &lt;code&gt;-f ctx/Dockerfile&lt;/code&gt; 内部パラメータを指定パス &lt;code&gt;ctx.tar.gz&lt;/code&gt; に &lt;code&gt;Dockerfile&lt;/code&gt; 画像を構築するために使用されます。任意 &lt;code&gt;ADD&lt;/code&gt; というコマンド &lt;code&gt;Dockerfile&lt;/code&gt; ローカルパスを指す内部コンテンツのルートに対して相対的である必要があり &lt;code&gt;ctx.tar.gz&lt;/code&gt; 。上記の例では、tarballにディレクトリ &lt;code&gt;ctx/&lt;/code&gt; が含まれているため、 &lt;code&gt;ADD ctx/container.cfg /&lt;/code&gt; 操作は期待どおりに機能します。</target>
        </trans-unit>
        <trans-unit id="974b41f3201f016ec5c3e9849ecb6508dcb28a1a" translate="yes" xml:space="preserve">
          <source>This sets an environment variable for all tasks in a service. For example:</source>
          <target state="translated">これは、サービス内のすべてのタスクに環境変数を設定します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d90f670708c83eff5ea090c34943d2213c5cef9e" translate="yes" xml:space="preserve">
          <source>This sets environment variables for the current shell that the Docker client reads which specify the TLS settings. You need to do this each time you open a new shell or restart your machine. (See also, how to &lt;a href=&quot;index#unset-environment-variables-in-the-current-shell&quot;&gt;unset environment variables in the current shell&lt;/a&gt;.)</source>
          <target state="translated">これにより、Dockerクライアントが読み取る現在のシェルの環境変数が設定され、TLS設定が指定されます。これは、新しいシェルを開いたり、マシンを再起動したりするたびに行う必要があります。（&lt;a href=&quot;index#unset-environment-variables-in-the-current-shell&quot;&gt;現在のシェルで環境変数&lt;/a&gt;を設定解除する方法も参照してください。）</target>
        </trans-unit>
        <trans-unit id="1362fb48da9129cbf04fcca91c118ead689b1c4e" translate="yes" xml:space="preserve">
          <source>This sets the swarm scheduling strategy to &amp;ldquo;binpack&amp;rdquo; (pack in containers as tightly as possible per host instead of spreading them out), and the &amp;ldquo;heartbeat&amp;rdquo; interval to 5 seconds.</source>
          <target state="translated">これは、スウォームスケジューリング戦略を「binpack」（コンテナーを展開するのではなく、ホストごとにできるだけ密にパックする）に設定し、「ハートビート」間隔を5秒に設定します。</target>
        </trans-unit>
        <trans-unit id="b3b87bc39d56be4bd9141ed4a4af84631f01df54" translate="yes" xml:space="preserve">
          <source>This setting can also be set per container, using the &lt;code&gt;--cgroup-parent&lt;/code&gt; option on &lt;code&gt;docker create&lt;/code&gt; and &lt;code&gt;docker run&lt;/code&gt;, and takes precedence over the &lt;code&gt;--cgroup-parent&lt;/code&gt; option on the daemon.</source>
          <target state="translated">この設定は、使用して、コンテナごとに設定することができます &lt;code&gt;--cgroup-parent&lt;/code&gt; のオプション &lt;code&gt;docker create&lt;/code&gt; と &lt;code&gt;docker run&lt;/code&gt; 、およびより優先されます &lt;code&gt;--cgroup-parent&lt;/code&gt; デーモンのオプション。</target>
        </trans-unit>
        <trans-unit id="b5e3e1d674f8abe14804489765522aad11f84326" translate="yes" xml:space="preserve">
          <source>This simple example shows how configs work in just a few commands. For a real-world example, continue to &lt;a href=&quot;#advanced-example-use-configs-with-a-nginx-service&quot;&gt;Intermediate example: Use configs with a Nginx service&lt;/a&gt;.</source>
          <target state="translated">この簡単な例は、いくつかのコマンドでconfigがどのように機能するかを示しています。実際の例については、&lt;a href=&quot;#advanced-example-use-configs-with-a-nginx-service&quot;&gt;中間例：Nginxサービスでconfigを使用するに進んでください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8869c03290570ec3c236c0316a496fa966d2587f" translate="yes" xml:space="preserve">
          <source>This simple example shows how secrets work in just a few commands. For a real-world example, continue to &lt;a href=&quot;#intermediate-example-use-secrets-with-a-nginx-service&quot;&gt;Intermediate example: Use secrets with a Nginx service&lt;/a&gt;.</source>
          <target state="translated">この簡単な例は、いくつかのコマンドでシークレットがどのように機能するかを示しています。実際の例については、「&lt;a href=&quot;#intermediate-example-use-secrets-with-a-nginx-service&quot;&gt;中間例：Nginxサービスでシークレットを使用する」に進んでください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="935813b774f4c64a2129e8202383a5e37e5b9c90" translate="yes" xml:space="preserve">
          <source>This source of truth has two components:</source>
          <target state="translated">この真理の源泉には2つの要素があります。</target>
        </trans-unit>
        <trans-unit id="ac3bd0b1ca3457ee506b7ef9b6ec60e732b8a769" translate="yes" xml:space="preserve">
          <source>This step is only necessary because the sandbox is using its own server. Normally, if you are using the Docker Public Hub this step isn&amp;rsquo;t necessary.</source>
          <target state="translated">サンドボックスが独自のサーバーを使用しているため、この手順が必要になるのは、通常、Docker Public Hubを使用している場合、この手順は必要ありません。</target>
        </trans-unit>
        <trans-unit id="70becb11131736d9ec9fef24e84b839e9e9c23b2" translate="yes" xml:space="preserve">
          <source>This step should be run on your Docker client machine. As such, you need to copy your CA certificate, your server certificate, and your client certificate to that machine.</source>
          <target state="translated">このステップはDockerクライアントマシンで実行してください。そのため、CA証明書、サーバ証明書、クライアント証明書をそのマシンにコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="ef3d6aa647a4cc8346123554475e90f78fbc275d" translate="yes" xml:space="preserve">
          <source>This succeeds in starting the &lt;code&gt;nginx&lt;/code&gt; service inside the container. However, it fails the detached container paradigm in that, the root process (&lt;code&gt;service nginx start&lt;/code&gt;) returns and the detached container stops as designed. As a result, the &lt;code&gt;nginx&lt;/code&gt; service is started but could not be used. Instead, to start a process such as the &lt;code&gt;nginx&lt;/code&gt; web server do the following:</source>
          <target state="translated">これにより、コンテナー内で &lt;code&gt;nginx&lt;/code&gt; サービスを開始できます。ただし、デタッチされたコンテナーのパラダイムは失敗し、ルートプロセス（ &lt;code&gt;service nginx start&lt;/code&gt; ）が返され、デタッチされたコンテナーは設計どおりに停止します。その結果、 &lt;code&gt;nginx&lt;/code&gt; サービスが開始されますが、使用できませんでした。代わりに、 &lt;code&gt;nginx&lt;/code&gt; Webサーバーなどのプロセスを開始するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="04066a5ee501d3a6ecffa5db03011e7e1310d04e" translate="yes" xml:space="preserve">
          <source>This table shows which Compose file versions support specific Docker releases.</source>
          <target state="translated">この表は、Composeファイルのバージョンが特定のDockerリリースをサポートしているかを示しています。</target>
        </trans-unit>
        <trans-unit id="db52a8d22c75e45b640fd061cd6bf87ebe9358fd" translate="yes" xml:space="preserve">
          <source>This tells Docker to:</source>
          <target state="translated">これはDockerに指示します。</target>
        </trans-unit>
        <trans-unit id="633e98d1e3f318794639c977c2e2c86175a8f8ba" translate="yes" xml:space="preserve">
          <source>This time the profile is &lt;code&gt;docker-default&lt;/code&gt;, which is run on containers by default unless in &lt;code&gt;privileged&lt;/code&gt; mode. This line shows that apparmor has denied &lt;code&gt;ptrace&lt;/code&gt; in the container. This is exactly as expected.</source>
          <target state="translated">今回のプロファイルは &lt;code&gt;docker-default&lt;/code&gt; で、 &lt;code&gt;privileged&lt;/code&gt; モードでない限り、デフォルトでコンテナーで実行されます。この行は、apparmorがコンテナ内の &lt;code&gt;ptrace&lt;/code&gt; を拒否したことを示しています。これは予想通りです。</target>
        </trans-unit>
        <trans-unit id="4532e04feecfda34e6f6502424bc974b794d3db6" translate="yes" xml:space="preserve">
          <source>This time, we&amp;rsquo;re requesting shared access to &lt;code&gt;$COUCH1&lt;/code&gt;&amp;rsquo;s volumes.</source>
          <target state="translated">今回は、 &lt;code&gt;$COUCH1&lt;/code&gt; のボリュームへの共有アクセスをリクエストしています。</target>
        </trans-unit>
        <trans-unit id="77f89cecfda3150577df43adb50823690dcdbeb9" translate="yes" xml:space="preserve">
          <source>This topic introduces some of the concepts unique to the cluster management and orchestration features of Docker Engine 1.12.</source>
          <target state="translated">このトピックでは、Docker Engine 1.12のクラスタ管理やオーケストレーション機能に特有の概念の一部を紹介します。</target>
        </trans-unit>
        <trans-unit id="6bea05dc821ffe6a989620457dd6f123fa54bbe0" translate="yes" xml:space="preserve">
          <source>This tutorial demos both &lt;code&gt;docker-machine ssh&lt;/code&gt; and &lt;code&gt;docker-machine env&lt;/code&gt;, since these are available on all platforms via the &lt;code&gt;docker-machine&lt;/code&gt; CLI.</source>
          <target state="translated">このチュートリアルでは、すべてのプラットフォームで &lt;code&gt;docker-machine&lt;/code&gt; CLIを介して使用できるため、 &lt;code&gt;docker-machine ssh&lt;/code&gt; と &lt;code&gt;docker-machine env&lt;/code&gt; の両方をデモします。</target>
        </trans-unit>
        <trans-unit id="48a388225c8d9a8f5b6b885b854bebc8a0baa78a" translate="yes" xml:space="preserve">
          <source>This tutorial introduces you to the features of Docker Engine Swarm mode. You may want to familiarize yourself with the &lt;a href=&quot;../key-concepts/index&quot;&gt;key concepts&lt;/a&gt; before you begin.</source>
          <target state="translated">このチュートリアルでは、Docker Engine Swarmモードの機能を紹介します。始める前に、&lt;a href=&quot;../key-concepts/index&quot;&gt;主要な概念&lt;/a&gt;をよく理解しておくことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fcf9e5ca0c710c2a00ea462338dd91d5b1bf9cc0" translate="yes" xml:space="preserve">
          <source>This tutorial requires Docker Engine 1.12 or newer on each of the host machines. Install Docker Engine and verify that the Docker Engine daemon is running on each of the machines. You can get the latest version of Docker Engine as follows:</source>
          <target state="translated">このチュートリアルでは、各ホストマシンにDocker Engine 1.12以降が必要です。Docker Engineをインストールし、各マシン上でDocker Engineデーモンが実行されていることを確認してください。Docker Engineの最新バージョンは以下のように入手できます。</target>
        </trans-unit>
        <trans-unit id="2561f3b23f34507c7789234d2c80a981d03c723a" translate="yes" xml:space="preserve">
          <source>This tutorial requires three Linux hosts which have Docker installed and can communicate over a network. These can be physical machines, virtual machines, Amazon EC2 instances, or hosted in some other way. You can even use Docker Machine from a Linux, Mac, or Windows host. Check out &lt;a href=&quot;../../../get-started/part4/index#prerequisites&quot;&gt;Getting started - Swarms&lt;/a&gt; for one possible set-up for the hosts.</source>
          <target state="translated">このチュートリアルでは、Dockerがインストールされ、ネットワーク経由で通信できる3つのLinuxホストが必要です。これらは、物理マシン、仮想マシン、Amazon EC2インスタンス、または他の方法でホストすることができます。Linux、Mac、またはWindowsホストからDocker Machineを使用することもできます。&lt;a href=&quot;../../../get-started/part4/index#prerequisites&quot;&gt;はじめに-Swarms&lt;/a&gt;をチェックして、ホストに可能なセットアップの1つを確認してください。</target>
        </trans-unit>
        <trans-unit id="b63ef67c2394f3ab1bdfb028e510b3547fb7a914" translate="yes" xml:space="preserve">
          <source>This tutorial uses Docker Engine CLI commands entered on the command line of a terminal window.</source>
          <target state="translated">このチュートリアルでは、ターミナルウィンドウのコマンドラインで入力されたDocker Engine CLIコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="b050194d0d01217faf76c2a6551904240564a852" translate="yes" xml:space="preserve">
          <source>This uses &lt;code&gt;--placement-pref&lt;/code&gt; with a &lt;code&gt;spread&lt;/code&gt; strategy (currently the only supported strategy) to spread tasks evenly over the values of the &lt;code&gt;datacenter&lt;/code&gt; node label. In this example, we assume that every node has a &lt;code&gt;datacenter&lt;/code&gt; node label attached to it. If there are three different values of this label among nodes in the swarm, one third of the tasks will be placed on the nodes associated with each value. This is true even if there are more nodes with one value than another. For example, consider the following set of nodes:</source>
          <target state="translated">これは、 &lt;code&gt;spread&lt;/code&gt; 戦略（現在サポートされている唯一の戦略）で &lt;code&gt;--placement-pref&lt;/code&gt; を使用して、 &lt;code&gt;datacenter&lt;/code&gt; ノードラベルの値にタスクを均等に分散します。この例では、すべてのノードに &lt;code&gt;datacenter&lt;/code&gt; ノードラベルが添付されていると想定しています。スウォームのノード間にこのラベルの3つの異なる値がある場合、タスクの3分の1が各値に関連付けられたノードに配置されます。これは、ある値を持つノードが他のノードよりも多い場合にも当てはまります。たとえば、次のノードのセットを考えます。</target>
        </trans-unit>
        <trans-unit id="ea051caa2b21f50046d64451bad7e3630768b925" translate="yes" xml:space="preserve">
          <source>This value affects the system-wide &amp;ldquo;base&amp;rdquo; empty filesystem that may already be initialized and inherited by pulled images. Typically, a change to this value requires additional steps to take effect:</source>
          <target state="translated">この値は、プルされたイメージによってすでに初期化および継承されている可能性があるシステム全体の「ベース」の空のファイルシステムに影響します。通常、この値の変更を有効にするには、追加の手順が必要です。</target>
        </trans-unit>
        <trans-unit id="1ddb422201d896594d5bc56e8588e13a5865016c" translate="yes" xml:space="preserve">
          <source>This value is &lt;strong&gt;not&lt;/strong&gt; safe for production usage. Refer to the &lt;a href=&quot;https://docs.djangoproject.com/en/1.11/ref/settings/#allowed-hosts&quot;&gt;Django documentation&lt;/a&gt; for more information.</source>
          <target state="translated">この値は、本番環境での使用に&lt;strong&gt;は&lt;/strong&gt;安全ではあり&lt;strong&gt;ません&lt;/strong&gt;。詳細については、&lt;a href=&quot;https://docs.djangoproject.com/en/1.11/ref/settings/#allowed-hosts&quot;&gt;Djangoのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e557568dc00ab2a66f3f0ba456e503c3f7aed386" translate="yes" xml:space="preserve">
          <source>This variable supports multiple Compose files separated by a path separator (on Linux and macOS the path separator is &lt;code&gt;:&lt;/code&gt;, on Windows it is &lt;code&gt;;&lt;/code&gt;). For example: &lt;code&gt;COMPOSE_FILE=docker-compose.yml:docker-compose.prod.yml&lt;/code&gt;. The path separator can also be customized using &lt;code&gt;COMPOSE_PATH_SEPARATOR&lt;/code&gt;.</source>
          <target state="translated">この変数は、パス区切り文字で区切られた複数のComposeファイルをサポートします（LinuxおよびmacOSでは、パス区切り文字は &lt;code&gt;:&lt;/code&gt; 、Windowsでは &lt;code&gt;;&lt;/code&gt; です）。例： &lt;code&gt;COMPOSE_FILE=docker-compose.yml:docker-compose.prod.yml&lt;/code&gt; ：docker-compose.prod.yml。パス区切り文字は、 &lt;code&gt;COMPOSE_PATH_SEPARATOR&lt;/code&gt; を使用してカスタマイズすることもできます。</target>
        </trans-unit>
        <trans-unit id="152a8c8fcc924829f35e92ceb398d08661557bc8" translate="yes" xml:space="preserve">
          <source>This volume can now be mounted into containers.</source>
          <target state="translated">このボリュームをコンテナに搭載できるようになりました。</target>
        </trans-unit>
        <trans-unit id="977e0ba0926f2bac7a3672ff13639208a7e69e2a" translate="yes" xml:space="preserve">
          <source>This will &lt;em&gt;not&lt;/em&gt; work, because by default, most potentially dangerous kernel capabilities are dropped; including &lt;code&gt;cap_sys_admin&lt;/code&gt; (which is required to mount filesystems). However, the &lt;code&gt;--privileged&lt;/code&gt; flag will allow it to run:</source>
          <target state="translated">デフォルトでは、最も危険な可能性のあるカーネル機能が削除されているため、これは機能し&lt;em&gt;ません&lt;/em&gt;。 &lt;code&gt;cap_sys_admin&lt;/code&gt; （ファイルシステムのマウントに必要）を含みます。ただし、 &lt;code&gt;--privileged&lt;/code&gt; フラグを使用すると実行できます。</target>
        </trans-unit>
        <trans-unit id="fbae9d719d2eeb06f5b7b26c25496b7eef9371e0" translate="yes" xml:space="preserve">
          <source>This will allow plugins to be actually started when the Docker daemon connects to the sockets they&amp;rsquo;re listening on (for instance the first time the daemon uses them or if one of the plugin goes down accidentally).</source>
          <target state="translated">これにより、Dockerデーモンがリッスンしているソケットに接続したときにプラグインを実際に開始できます（たとえば、デーモンが初めてプラグインを使用したとき、またはプラグインの1つが誤ってダウンした場合）。</target>
        </trans-unit>
        <trans-unit id="d671a9defc02462449db42399b97ee4201b8d865" translate="yes" xml:space="preserve">
          <source>This will build an image for a compressed context read from &lt;code&gt;STDIN&lt;/code&gt;. Supported formats are: bzip2, gzip and xz.</source>
          <target state="translated">これにより、 &lt;code&gt;STDIN&lt;/code&gt; から読み取られた圧縮コンテキストのイメージが構築されます。サポートされている形式は、bzip2、gzip、xzです。</target>
        </trans-unit>
        <trans-unit id="0321f3bc4f35c25ce460a7567f64149919b95f58" translate="yes" xml:space="preserve">
          <source>This will build like the previous example, but it will then tag the resulting image. The repository name will be &lt;code&gt;vieux/apache&lt;/code&gt; and the tag will be &lt;code&gt;2.0&lt;/code&gt;. &lt;a href=&quot;../tag/index&quot;&gt;Read more about valid tags&lt;/a&gt;.</source>
          <target state="translated">これは前の例のように構築されますが、結果の画像にタグを付けます。リポジトリ名は &lt;code&gt;vieux/apache&lt;/code&gt; で、タグは &lt;code&gt;2.0&lt;/code&gt; です。&lt;a href=&quot;../tag/index&quot;&gt;有効なタグの詳細をご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="af0fbb68417136986c187184ecad4acfe8e89495" translate="yes" xml:space="preserve">
          <source>This will clone the GitHub repository and use the cloned repository as context. The Dockerfile at the root of the repository is used as Dockerfile. You can specify an arbitrary Git repository by using the &lt;code&gt;git://&lt;/code&gt; or &lt;code&gt;git@&lt;/code&gt; scheme.</source>
          <target state="translated">これにより、GitHubリポジトリが複製され、複製されたリポジトリがコンテキストとして使用されます。リポジトリのルートにあるDockerfileは、Dockerfileとして使用されます。 &lt;code&gt;git://&lt;/code&gt; または &lt;code&gt;git@&lt;/code&gt; スキームを使用して、任意のGitリポジトリを指定できます。</target>
        </trans-unit>
        <trans-unit id="d2a305fead63531e71eb36423ee7e62ddcd1c2a2" translate="yes" xml:space="preserve">
          <source>This will create a container and print &lt;code&gt;test&lt;/code&gt; to the console. The &lt;code&gt;cidfile&lt;/code&gt; flag makes Docker attempt to create a new file and write the container ID to it. If the file exists already, Docker will return an error. Docker will close this file when &lt;code&gt;docker run&lt;/code&gt; exits.</source>
          <target state="translated">これにより、コンテナーが作成され、 &lt;code&gt;test&lt;/code&gt; がコンソールに出力されます。 &lt;code&gt;cidfile&lt;/code&gt; のフラグは、ドッカーは、新しいファイルを作成しようとすると、それにコンテナIDを書きます。ファイルがすでに存在する場合、Dockerはエラーを返します。Docker &lt;code&gt;docker run&lt;/code&gt; が終了すると、Dockerはこのファイルを閉じます。</target>
        </trans-unit>
        <trans-unit id="9bb6247af7751c9c59feb81eceba79feec896d93" translate="yes" xml:space="preserve">
          <source>This will create a container named &lt;code&gt;ubuntu_bash&lt;/code&gt; and start a Bash session.</source>
          <target state="translated">これにより、 &lt;code&gt;ubuntu_bash&lt;/code&gt; という名前のコンテナーが作成され、Bashセッションが開始されます。</target>
        </trans-unit>
        <trans-unit id="d9f7378d5022bee9179627b3803656e749aacae9" translate="yes" xml:space="preserve">
          <source>This will create a new Bash session in the container &lt;code&gt;ubuntu_bash&lt;/code&gt; with environment variable &lt;code&gt;$VAR&lt;/code&gt; set to &amp;ldquo;1&amp;rdquo;. Note that this environment variable will only be valid on the current Bash session.</source>
          <target state="translated">これ &lt;code&gt;ubuntu_bash&lt;/code&gt; 、環境変数 &lt;code&gt;$VAR&lt;/code&gt; が「1」に設定されたコンテナubuntu_bashに新しいBashセッションが作成されます。この環境変数は、現在のBashセッションでのみ有効であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="32e49955e9af4f3f88a960aacf17ad24e1e672eb" translate="yes" xml:space="preserve">
          <source>This will create a new Bash session in the container &lt;code&gt;ubuntu_bash&lt;/code&gt;.</source>
          <target state="translated">これにより、コンテナ &lt;code&gt;ubuntu_bash&lt;/code&gt; に新しいBashセッションが作成されます。</target>
        </trans-unit>
        <trans-unit id="edc523a8d4d43c3aee75b39b463dd0cd8452cdfe" translate="yes" xml:space="preserve">
          <source>This will create a new file &lt;code&gt;/tmp/execWorks&lt;/code&gt; inside the running container &lt;code&gt;ubuntu_bash&lt;/code&gt;, in the background.</source>
          <target state="translated">これにより、実行中のコンテナ &lt;code&gt;ubuntu_bash&lt;/code&gt; 内にバックグラウンドで新しいファイル &lt;code&gt;/tmp/execWorks&lt;/code&gt; が作成されます。</target>
        </trans-unit>
        <trans-unit id="9f70040f4a0114c4650666dc138c9295b6e3c38a" translate="yes" xml:space="preserve">
          <source>This will create a new untagged image.</source>
          <target state="translated">これにより、新たにタグ付けされていない画像が作成されます。</target>
        </trans-unit>
        <trans-unit id="e6acb4ffd3cd2c8e0d768c8b3bafda0d1e4ce3e6" translate="yes" xml:space="preserve">
          <source>This will display untagged images that are the leaves of the images tree (not intermediary layers). These images occur when a new build of an image takes the &lt;code&gt;repo:tag&lt;/code&gt; away from the image ID, leaving it as &lt;code&gt;&amp;lt;none&amp;gt;:&amp;lt;none&amp;gt;&lt;/code&gt; or untagged. A warning will be issued if trying to remove an image when a container is presently using it. By having this flag it allows for batch cleanup.</source>
          <target state="translated">これにより、（中間レイヤーではなく）画像ツリーのリーフであるタグなし画像が表示されます。これらのイメージは、イメージの新しいビルドがイメージIDから &lt;code&gt;repo:tag&lt;/code&gt; を取り除き、それを &lt;code&gt;&amp;lt;none&amp;gt;:&amp;lt;none&amp;gt;&lt;/code&gt; またはタグなしのままにしたときに発生します。現在コンテナーが使用しているイメージを削除しようとすると、警告が発行されます。このフラグを設定することで、バッチクリーンアップが可能になります。</target>
        </trans-unit>
        <trans-unit id="c4aa0e68f034a1c05bb8f3bd4d4537c7ef9f706a" translate="yes" xml:space="preserve">
          <source>This will increase the base device size to 50G. The Docker daemon will throw an error if existing base device size is larger than 50G. A user can use this option to expand the base device size however shrinking is not permitted.</source>
          <target state="translated">これでベースデバイスのサイズが50Gになります。既存のベースデバイスのサイズが50Gより大きい場合、Dockerデーモンはエラーをスローします。ユーザーはこのオプションを使ってベースデバイスのサイズを拡大することができますが、縮小は許可されていません。</target>
        </trans-unit>
        <trans-unit id="a5544d60b744b4e37366ebe34f8f131dd801bc62" translate="yes" xml:space="preserve">
          <source>This will only add the proxy and authentication to the Docker daemon&amp;rsquo;s requests - your &lt;code&gt;docker build&lt;/code&gt;s and running containers will need extra configuration to use the proxy</source>
          <target state="translated">これにより、Dockerデーモンのリクエストにプロキシと認証のみが追加されます &lt;code&gt;docker build&lt;/code&gt; と実行中のコンテナには、プロキシを使用するための追加の構成が必要になります。</target>
        </trans-unit>
        <trans-unit id="7b28d2cdda4f21df136ea59e2569aeaf5ba0aca0" translate="yes" xml:space="preserve">
          <source>This will read a Dockerfile from &lt;code&gt;STDIN&lt;/code&gt; without context. Due to the lack of a context, no contents of any local directory will be sent to the Docker daemon. Since there is no context, a Dockerfile &lt;code&gt;ADD&lt;/code&gt; only works if it refers to a remote URL.</source>
          <target state="translated">これは、コンテキストなしで &lt;code&gt;STDIN&lt;/code&gt; からDockerfileを読み取ります。コンテキストがないため、ローカルディレクトリの内容はDockerデーモンに送信されません。コンテキストがないため、Dockerfile &lt;code&gt;ADD&lt;/code&gt; は、リモートURLを参照する場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="cd752cc01d9b7f3c8307901d43034d67c2230808" translate="yes" xml:space="preserve">
          <source>This will remove all the specified stacks, &lt;code&gt;myapp&lt;/code&gt; and &lt;code&gt;vossibility&lt;/code&gt;. Services, networks, and secrets associated with all the specified stacks will be removed.</source>
          <target state="translated">これにより、指定されたすべてのスタック、 &lt;code&gt;myapp&lt;/code&gt; および &lt;code&gt;vossibility&lt;/code&gt; が削除されます。指定されたすべてのスタックに関連付けられているサービス、ネットワーク、およびシークレットが削除されます。</target>
        </trans-unit>
        <trans-unit id="753755e6f658e6ba72f4b35924aaade544ac55fe" translate="yes" xml:space="preserve">
          <source>This will remove the container referenced under the link &lt;code&gt;/redis&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;/redis&lt;/code&gt; リンクで参照されているコンテナが削除されます。</target>
        </trans-unit>
        <trans-unit id="ce6c268fdbc508e745251901ec43da0401249689" translate="yes" xml:space="preserve">
          <source>This will remove the stack with the name &lt;code&gt;myapp&lt;/code&gt;. Services, networks, and secrets associated with the stack will be removed.</source>
          <target state="translated">これにより、 &lt;code&gt;myapp&lt;/code&gt; という名前のスタックが削除されます。スタックに関連付けられているサービス、ネットワーク、シークレットは削除されます。</target>
        </trans-unit>
        <trans-unit id="94cbd54f16b46431006ad056158491458f612388" translate="yes" xml:space="preserve">
          <source>This will remove the underlying link between &lt;code&gt;/webapp&lt;/code&gt; and the &lt;code&gt;/redis&lt;/code&gt; containers on the default bridge network, removing all network communication between the two containers. This does not apply when &lt;code&gt;--link&lt;/code&gt; is used with user-specified networks.</source>
          <target state="translated">これにより、デフォルトのブリッジネットワーク上の &lt;code&gt;/webapp&lt;/code&gt; と &lt;code&gt;/redis&lt;/code&gt; コンテナー間の基本的なリンクが削除され、2つのコンテナー間のすべてのネットワーク通信が削除されます。これは、ユーザー指定のネットワークで &lt;code&gt;--link&lt;/code&gt; が使用されている場合は適用されません。</target>
        </trans-unit>
        <trans-unit id="7fb5e3186cd2a1b04b731f8830a92f0d8467f214" translate="yes" xml:space="preserve">
          <source>This will revert the service to the configuration that was in place before the most recent &lt;code&gt;docker service update&lt;/code&gt; command.</source>
          <target state="translated">これにより、サービスは最新の &lt;code&gt;docker service update&lt;/code&gt; コマンドの前に設定されていた構成に戻ります。</target>
        </trans-unit>
        <trans-unit id="b0c9bd42415d5474e0860d74bb78c8a6453edf9d" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;redis&lt;/code&gt; container with a restart policy of &lt;strong&gt;always&lt;/strong&gt; so that if the container exits, Docker will restart it.</source>
          <target state="translated">これにより、 &lt;code&gt;redis&lt;/code&gt; コンテナーが&lt;strong&gt;常に&lt;/strong&gt;再起動ポリシーで実行されるため、コンテナーが存在する場合、Dockerは再起動します。</target>
        </trans-unit>
        <trans-unit id="675257bf3f28d9922da2d66778357a6993a5d50c" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;redis&lt;/code&gt; container with a restart policy of &lt;strong&gt;on-failure&lt;/strong&gt; and a maximum restart count of 10. If the &lt;code&gt;redis&lt;/code&gt; container exits with a non-zero exit status more than 10 times in a row Docker will abort trying to restart the container. Providing a maximum restart limit is only valid for the &lt;strong&gt;on-failure&lt;/strong&gt; policy.</source>
          <target state="translated">これが実行される &lt;code&gt;redis&lt;/code&gt; の再起動ポリシーにコンテナを&lt;strong&gt;オン故障&lt;/strong&gt;した場合と10の最大再起動回数 &lt;code&gt;redis&lt;/code&gt; ドッカーは、コンテナを再起動しようとして中止された行にゼロ以外の終了ステータスで10倍以上のコンテナが終了します。最大再起動制限を指定することは、&lt;strong&gt;障害時&lt;/strong&gt;ポリシーでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="abc0ef9bcaab355478d09cc53da61c88d1938cc7" translate="yes" xml:space="preserve">
          <source>This will then be visible from &lt;code&gt;docker inspect&lt;/code&gt; with the other labels.</source>
          <target state="translated">これは、他のラベルとともに &lt;code&gt;docker inspect&lt;/code&gt; から表示されます。</target>
        </trans-unit>
        <trans-unit id="2f156cf8e34e681c12b6d65b139839617dd52809" translate="yes" xml:space="preserve">
          <source>This will use a file called &lt;code&gt;Dockerfile.debug&lt;/code&gt; for the build instructions instead of &lt;code&gt;Dockerfile&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;Dockerfile.debug&lt;/code&gt; 代わりに &lt;code&gt;Dockerfile&lt;/code&gt; .debugと呼ばれるファイルをビルド手順に使用します。</target>
        </trans-unit>
        <trans-unit id="eb92336a8212ba996bc7f692f12d135203fd5d76" translate="yes" xml:space="preserve">
          <source>Threat model</source>
          <target state="translated">脅威モデル</target>
        </trans-unit>
        <trans-unit id="38d64b34e2de473b4b1dc526ff50cb7a3baee250" translate="yes" xml:space="preserve">
          <source>Three arguments form in &lt;code&gt;docker import&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;docker import&lt;/code&gt; で3つの引数が形成される</target>
        </trans-unit>
        <trans-unit id="efa31858cf8ec81390655897e1190052e3c8f5a3" translate="yes" xml:space="preserve">
          <source>Three networked host machines</source>
          <target state="translated">3台のネットワーク化されたホストマシン</target>
        </trans-unit>
        <trans-unit id="5f1b023b9b94b0213d53467a225dd9ddb3befc5d" translate="yes" xml:space="preserve">
          <source>Three nodes with &lt;code&gt;node.labels.datacenter=east&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;node.labels.datacenter=east&lt;/code&gt; の 3つのノード</target>
        </trans-unit>
        <trans-unit id="3abda546302e0d1b4ba387068a8850b439d2c3bb" translate="yes" xml:space="preserve">
          <source>Three tasks run on up to three nodes. You don&amp;rsquo;t need to know which nodes are running the tasks; connecting to port 8080 on &lt;strong&gt;any&lt;/strong&gt; of the 10 nodes connects you to one of the three &lt;code&gt;nginx&lt;/code&gt; tasks. You can test this using &lt;code&gt;curl&lt;/code&gt;. The following example assumes that &lt;code&gt;localhost&lt;/code&gt; is one of the swarm nodes. If this is not the case, or &lt;code&gt;localhost&lt;/code&gt; does not resolve to an IP address on your host, substitute the host&amp;rsquo;s IP address or resolvable host name.</source>
          <target state="translated">3つのタスクは最大3つのノードで実行されます。どのノードがタスクを実行しているかを知る必要はありません。10ノードの&lt;strong&gt;いずれか&lt;/strong&gt;のポート8080に接続すると、3つの &lt;code&gt;nginx&lt;/code&gt; タスクの&lt;strong&gt;いずれか&lt;/strong&gt;に接続します。 &lt;code&gt;curl&lt;/code&gt; を使用してこれをテストできます。次の例では、 &lt;code&gt;localhost&lt;/code&gt; がswarmノードの1つであると想定しています。そうでない場合、または &lt;code&gt;localhost&lt;/code&gt; がホストのIPアドレスに解決されない場合は、ホストのIPアドレスまたは解決可能なホスト名に置き換えてください。</target>
        </trans-unit>
        <trans-unit id="25e81d24c5d635bd70ae658aec2b5c90fb43b39b" translate="yes" xml:space="preserve">
          <source>Through DCT, image publishers can sign their images and image consumers can ensure that the images they use are signed. Publishers could be individuals or organizations manually signing their content or automated software supply chains signing content as part of their release process.</source>
          <target state="translated">DCT を通じて、画像発行者は画像に署名することができ、画像の消費者は使用する画像が署名されていることを確認することができます。パブリッシャーには、個人や組織が手作業でコンテンツに署名する場合もあれば、自動化されたソフトウェアサプライチェーンがリリースプロセスの一環としてコンテンツに署名する場合もあります。</target>
        </trans-unit>
        <trans-unit id="a11ff3bf313f104278c61e0ad7ef2107be8829b7" translate="yes" xml:space="preserve">
          <source>Thus, the following two commands are equivalent:</source>
          <target state="translated">したがって、以下の2つのコマンドは等価です。</target>
        </trans-unit>
        <trans-unit id="7f8557ae7bda77ddaf6aacd81644c0c29359a782" translate="yes" xml:space="preserve">
          <source>Time between running the check (ms|s|m|h)</source>
          <target state="translated">チェックを実行するまでの時間 (ms|s|m|h)</target>
        </trans-unit>
        <trans-unit id="dc414bb7840b47fbc9d40a1862dc9540bbbae8f7" translate="yes" xml:space="preserve">
          <source>Time between running the check (ms|s|m|h) (default 0s)</source>
          <target state="translated">チェックを実行するまでの時間 (ms|s|m|h)(デフォルトは0s)</target>
        </trans-unit>
        <trans-unit id="1af1db00ca84e257aae04565a288fde661a89512" translate="yes" xml:space="preserve">
          <source>Time taken by the host to respond</source>
          <target state="translated">ホストが応答するまでにかかった時間</target>
        </trans-unit>
        <trans-unit id="c82d26d56dc15851f4cf921db6fc2090cabaff8e" translate="yes" xml:space="preserve">
          <source>Time to wait before force killing a container (ns|us|ms|s|m|h)</source>
          <target state="translated">コンテナを強制終了させるまでの待ち時間 (ns|us|ms|s|m|h)</target>
        </trans-unit>
        <trans-unit id="bc1e369b147e0a24ce2640c12cfaab22d2c01505" translate="yes" xml:space="preserve">
          <source>Time to wait before force killing a container (ns|us|ms|s|m|h) (default 10s)</source>
          <target state="translated">コンテナを強制終了させるまでの待ち時間 (ns|us|ms|s|m|h)(デフォルト 10s)</target>
        </trans-unit>
        <trans-unit id="4974d2f6799f42bebb176e7526006895456be2d1" translate="yes" xml:space="preserve">
          <source>Time when the container was created.</source>
          <target state="translated">コンテナが作成された時刻。</target>
        </trans-unit>
        <trans-unit id="59ea42e814d67c5de3ea1f0f1be9ddb01dafaa59" translate="yes" xml:space="preserve">
          <source>Time when the image was created</source>
          <target state="translated">画像が作成された時刻</target>
        </trans-unit>
        <trans-unit id="144af34250383e028899232f603f90927d68b175" translate="yes" xml:space="preserve">
          <source>Time when the network was created</source>
          <target state="translated">ネットワークが作成された時刻</target>
        </trans-unit>
        <trans-unit id="2b1bb4c87d7f20f7d1c4dff45998b6902a4861cf" translate="yes" xml:space="preserve">
          <source>Time when the secret was created</source>
          <target state="translated">秘密が作られた時期</target>
        </trans-unit>
        <trans-unit id="1352fb06f34521ca529f817b3ef6bf84fd1a49e7" translate="yes" xml:space="preserve">
          <source>Time when the secret was updated</source>
          <target state="translated">シークレットが更新された時間</target>
        </trans-unit>
        <trans-unit id="f482d5aa8cf5abaa435e6d3c3d75f6a611704cdd" translate="yes" xml:space="preserve">
          <source>Time/date is not namespaced. Also gated by &lt;code&gt;CAP_SYS_TIME&lt;/code&gt;.</source>
          <target state="translated">時刻/日付には名前空間がありません。 &lt;code&gt;CAP_SYS_TIME&lt;/code&gt; によってもゲートされます。</target>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="3ede2c8a6f720a28ef76dc964d8c3f6ffe639f9e" translate="yes" xml:space="preserve">
          <source>Timeout (in seconds) to stop a container</source>
          <target state="translated">コンテナを停止するためのタイムアウト(秒単位</target>
        </trans-unit>
        <trans-unit id="cfd6323ad97b7d6c5960f93fbf47b0342fbddd5e" translate="yes" xml:space="preserve">
          <source>Timestamp of when image was created</source>
          <target state="translated">画像作成時のタイムスタンプ</target>
        </trans-unit>
        <trans-unit id="539d7c78ddf28827aa773f40117cda9aa703b817" translate="yes" xml:space="preserve">
          <source>To add more space to a LVM (logical volume management) thin pool, just add more storage to the volume group container thin pool; this should automatically resolve any errors. If your configuration uses loop devices, then stop the Engine daemon, grow the size of loop files and restart the daemon to resolve the issue.</source>
          <target state="translated">LVM(論理ボリューム管理)シンプールにスペースを追加するには、ボリュームグループコンテナシンプールにストレージを追加します。構成でループ デバイスを使用している場合は、Engine デーモンを停止し、ループ ファイルのサイズを大きくしてからデーモンを再起動して問題を解決します。</target>
        </trans-unit>
        <trans-unit id="3a8c652bbbcd3a2b6759adafed8b1652d1224709" translate="yes" xml:space="preserve">
          <source>To add multiple labels to a node, pass the &lt;code&gt;--label-add&lt;/code&gt; flag for each label:</source>
          <target state="translated">ノードに複数のラベルを追加するには、各ラベルに &lt;code&gt;--label-add&lt;/code&gt; フラグを渡します。</target>
        </trans-unit>
        <trans-unit id="e4fa0a8b0be1629cc9998343b3f4c0ac18e8ec31" translate="yes" xml:space="preserve">
          <source>To add targets to a specified delegation role, we can use the &lt;code&gt;notary add&lt;/code&gt; command with the &lt;code&gt;--roles&lt;/code&gt; flag.</source>
          <target state="translated">指定された委任ロールにターゲットを追加するには、 &lt;code&gt;--roles&lt;/code&gt; フラグを指定したnotary &lt;code&gt;notary add&lt;/code&gt; コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="d08b83862f7a471dd2470c93805671ee3eaa7235" translate="yes" xml:space="preserve">
          <source>To add targets to a trusted collection with notary CLI:</source>
          <target state="translated">notary CLIで信頼できるコレクションにターゲットを追加するには</target>
        </trans-unit>
        <trans-unit id="de80dda5d848dc2110cfb4577f8b4a8f6f9a3106" translate="yes" xml:space="preserve">
          <source>To allow the &lt;code&gt;docker&lt;/code&gt; daemon to start, regardless of &lt;code&gt;udev&lt;/code&gt; sync not being supported, set &lt;code&gt;dm.override_udev_sync_check&lt;/code&gt; to true:</source>
          <target state="translated">できるようにするには &lt;code&gt;docker&lt;/code&gt; デーモンが起動し、関係なく、 &lt;code&gt;udev&lt;/code&gt; の同期はサポートされていない、セット &lt;code&gt;dm.override_udev_sync_check&lt;/code&gt; trueに：</target>
        </trans-unit>
        <trans-unit id="9778a7ffd9b4d486813b023a651a736b60bf8c63" translate="yes" xml:space="preserve">
          <source>To automate importing a delegation private key to the local Docker trust store, we need to pass a passphrase for the new key. This passphrase will be required everytime that delegation signs a tag.</source>
          <target state="translated">委任の秘密鍵をローカルのDockerトラストストアに自動でインポートするには、新しい鍵のパスフレーズを渡す必要があります。このパスフレーズは、デリゲーションがタグに署名するたびに必要になります。</target>
        </trans-unit>
        <trans-unit id="6c14c0246ea1a4daed6b5806ff472b4876709569" translate="yes" xml:space="preserve">
          <source>To avoid interference with manager node operation, you can drain manager nodes to make them unavailable as worker nodes:</source>
          <target state="translated">マネージャノードの動作との干渉を避けるために、マネージャノードをドレインして、マネージャノードをワーカーノードとして利用できないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="6ba0816d297b98ff67febecfe3fdf69d8a9e28ef" translate="yes" xml:space="preserve">
          <source>To avoid permission errors (and the use of &lt;code&gt;sudo&lt;/code&gt;), add your user to the &lt;code&gt;docker&lt;/code&gt; group. &lt;a href=&quot;https://docs.docker.com/install/linux&quot;&gt;Read more&lt;/a&gt;.</source>
          <target state="translated">権限エラー（および &lt;code&gt;sudo&lt;/code&gt; の使用）を回避するには、ユーザーを &lt;code&gt;docker&lt;/code&gt; グループに追加します。&lt;a href=&quot;https://docs.docker.com/install/linux&quot;&gt;続きを読む&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0da5e79aaacc875e32d7f9569cde5259686e28ed" translate="yes" xml:space="preserve">
          <source>To avoid repeating certain update failures, you may need to reconfigure the service by passing flags to &lt;code&gt;docker service update&lt;/code&gt;.</source>
          <target state="translated">特定の更新の失敗を繰り返さないようにするには、フラグを &lt;code&gt;docker service update&lt;/code&gt; に渡してサービスを再構成する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="1e388c4a7df1fd4aadbe4c220ca9e497efb5b0ba" translate="yes" xml:space="preserve">
          <source>To avoid this failure, enable both deferred device deletion and deferred device removal on the daemon.</source>
          <target state="translated">この失敗を回避するには、デーモン上で繰延デバイス削除と繰延デバイス削除の両方を有効にします。</target>
        </trans-unit>
        <trans-unit id="528a6e6f37b7a97ed2ccbdae83855c8f36481a81" translate="yes" xml:space="preserve">
          <source>To build the image using:</source>
          <target state="translated">を使ってイメージを構築すること。</target>
        </trans-unit>
        <trans-unit id="c1120b0abdecba386aac55c691066fe2e7ca897a" translate="yes" xml:space="preserve">
          <source>To bypass the routing mesh, you must use the long &lt;code&gt;--publish&lt;/code&gt; service and set &lt;code&gt;mode&lt;/code&gt; to &lt;code&gt;host&lt;/code&gt;. If you omit the &lt;code&gt;mode&lt;/code&gt; key or set it to &lt;code&gt;ingress&lt;/code&gt;, the routing mesh is used. The following command creates a global service using &lt;code&gt;host&lt;/code&gt; mode and bypassing the routing mesh.</source>
          <target state="translated">ルーティングメッシュをバイパスするには、長い &lt;code&gt;--publish&lt;/code&gt; サービスを使用し、 &lt;code&gt;mode&lt;/code&gt; を &lt;code&gt;host&lt;/code&gt; に設定する必要があります。 &lt;code&gt;mode&lt;/code&gt; キーを省略するか、それを &lt;code&gt;ingress&lt;/code&gt; に設定すると、ルーティングメッシュが使用されます。次のコマンドは、 &lt;code&gt;host&lt;/code&gt; モードを使用してルーティングメッシュをバイパスするグローバルサービスを作成します。</target>
        </trans-unit>
        <trans-unit id="b038d6a0fec119ac138e21665e94d81f366d977c" translate="yes" xml:space="preserve">
          <source>To change the label in the container context, you can add either of two suffixes &lt;code&gt;:z&lt;/code&gt; or &lt;code&gt;:Z&lt;/code&gt; to the volume mount. These suffixes tell Docker to relabel file objects on the shared volumes. The &lt;code&gt;z&lt;/code&gt; option tells Docker that two containers share the volume content. As a result, Docker labels the content with a shared content label. Shared volume labels allow all containers to read/write content. The &lt;code&gt;Z&lt;/code&gt; option tells Docker to label the content with a private unshared label. Only the current container can use a private volume.</source>
          <target state="translated">コンテナーコンテキストでラベルを変更するには、ボリュームマウントに2つのサフィックス &lt;code&gt;:z&lt;/code&gt; または &lt;code&gt;:Z&lt;/code&gt; のいずれかを追加します。これらのサフィックスは、共有ボリューム上のファイルオブジェクトのラベルを変更するようにDockerに指示します。 &lt;code&gt;z&lt;/code&gt; オプションは二つの容器は、ボリュームのコンテンツを共有することをドッカーを伝えます。その結果、Dockerはコンテンツに共有コンテンツラベルを付けます。共有ボリュームラベルにより、すべてのコンテナーがコンテンツを読み書きできます。 &lt;code&gt;Z&lt;/code&gt; のオプションは、民間非共有ラベルでコンテンツにラベルを付けるためにドッカーを伝えます。現在のコンテナのみがプライベートボリュームを使用できます。</target>
        </trans-unit>
        <trans-unit id="920d05baca9a73de9d83dfcb8a2b801ff81ec855" translate="yes" xml:space="preserve">
          <source>To check the status of installed plugins, use the &lt;code&gt;docker plugin ls&lt;/code&gt; command. Plugins that start successfully are listed as enabled in the output.</source>
          <target state="translated">インストールされているプラ​​グインのステータスを確認するには、 &lt;code&gt;docker plugin ls&lt;/code&gt; コマンドを使用します。正常に起動したプラグインは、出力に有効としてリストされます。</target>
        </trans-unit>
        <trans-unit id="1c0dd3b8677594a66099c085dbbda592e9784ab4" translate="yes" xml:space="preserve">
          <source>To clean up after running this example, remove the &lt;code&gt;nginx&lt;/code&gt; service and the stored secrets.</source>
          <target state="translated">この例の実行後にクリーンアップするには、 &lt;code&gt;nginx&lt;/code&gt; サービスと保存されているシークレットを削除します。</target>
        </trans-unit>
        <trans-unit id="1e57801ffc296d25fa85471f60804c69b6db0b3b" translate="yes" xml:space="preserve">
          <source>To clean up, you can remove the &lt;code&gt;nginx&lt;/code&gt; service, as well as the secrets and configs.</source>
          <target state="translated">クリーンアップするには、 &lt;code&gt;nginx&lt;/code&gt; サービスと、シークレットおよび構成を削除できます。</target>
        </trans-unit>
        <trans-unit id="f3c819c0e9147be4124112c4734f1f08feec3b3f" translate="yes" xml:space="preserve">
          <source>To cleanly re-join a manager node to a cluster:</source>
          <target state="translated">マネージャノードをクラスタにクリーンに再参加させる。</target>
        </trans-unit>
        <trans-unit id="0feac055d21638e6e74f002a5bce9986f8e82f0e" translate="yes" xml:space="preserve">
          <source>To configure custom default address pools, you must define pools at Swarm initialization using the &lt;code&gt;--default-addr-pool&lt;/code&gt; command line option. This command line option uses CIDR notation for defining the subnet mask. To create the custom address pool for Swarm, you must define at least one default address pool, and an optional default address pool subnet mask. For example, for the &lt;code&gt;10.0.0.0/27&lt;/code&gt;, use the value &lt;code&gt;27&lt;/code&gt;.</source>
          <target state="translated">カスタムデフォルトアドレスプールを設定するには、 &lt;code&gt;--default-addr-pool&lt;/code&gt; コマンドラインオプションを使用して、Swarmの初期化時にプールを定義する必要があります。このコマンドラインオプションでは、CIDR表記を使用してサブネットマスクを定義します。Swarmのカスタムアドレスプールを作成するには、少なくとも1つのデフォルトアドレスプールと、オプションのデフォルトアドレスプールサブネットマスクを定義する必要があります。たとえば、 &lt;code&gt;10.0.0.0/27&lt;/code&gt; / &lt;code&gt;27&lt;/code&gt; の場合、値27を使用します。</target>
        </trans-unit>
        <trans-unit id="acebe6bbff99c6a2164814149ef86987e2d24a36" translate="yes" xml:space="preserve">
          <source>To connect to Docker and validate its certificate, provide your client keys, certificates and trusted CA:</source>
          <target state="translated">Dockerに接続し、その証明書を検証するには、クライアントキー、証明書、信頼できるCAを提供します。</target>
        </trans-unit>
        <trans-unit id="276b3a88766cc7ea24740f2fb69533b4d88c434d" translate="yes" xml:space="preserve">
          <source>To connect using the Notary Client CLI, see &lt;a href=&quot;../getting_started/index&quot;&gt;Getting Started&lt;/a&gt;. The version of the Notary server and signer needs to be greater than or equal to that of the Notary Client CLI to ensure feature compatibility. For instance, if you use Notary Client CLI 0.2, the server and signer each need to be at least version 0.2 as well.</source>
          <target state="translated">Notary Client CLIを使用して接続するには、「&lt;a href=&quot;../getting_started/index&quot;&gt;はじめに」を&lt;/a&gt;参照してください。機能の互換性を確保するには、Notaryサーバーと署名者のバージョンがNotary Client CLIのバージョン以上である必要があります。たとえば、Notary Client CLI 0.2を使用する場合、サーバーと署名者もそれぞれ少なくともバージョン0.2である必要があります。</target>
        </trans-unit>
        <trans-unit id="db862edd89a39289cbb2128f02dec7301e722185" translate="yes" xml:space="preserve">
          <source>To contribute code or documentation changes, &lt;a href=&quot;https://github.com/docker/machine/pulls&quot;&gt;submit a pull request on Github&lt;/a&gt;.</source>
          <target state="translated">コードまたはドキュメントの変更を提供&lt;a href=&quot;https://github.com/docker/machine/pulls&quot;&gt;するには、Githubでプルリクエストを送信し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3ec84be351704dc345d8560ae8bdaea9bd796a9b" translate="yes" xml:space="preserve">
          <source>To contribute code or documentation changes: submit a &lt;a href=&quot;https://github.com/docker/compose/pulls&quot;&gt;pull request on Github&lt;/a&gt;.</source>
          <target state="translated">コードまたはドキュメントの変更を提供するには：&lt;a href=&quot;https://github.com/docker/compose/pulls&quot;&gt;Githubでプルリクエストを送信し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="94dd73b52c28b593d6df1a403ed55902366e0f75" translate="yes" xml:space="preserve">
          <source>To correct this, they need to download a new image tag that is signed with the new key.</source>
          <target state="translated">これを修正するには、新しい鍵で署名された新しい画像タグをダウンロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="429d42896dbf6c2e05601b677a2907eef85a06ce" translate="yes" xml:space="preserve">
          <source>To create a context from scratch provide the docker and, if required, kubernetes options. The example below creates the context &lt;code&gt;my-context&lt;/code&gt; with a docker endpoint of &lt;code&gt;/var/run/docker.sock&lt;/code&gt; and a kubernetes configuration sourced from the file &lt;code&gt;/home/me/my-kube-config&lt;/code&gt;:</source>
          <target state="translated">コンテキストを最初から作成するには、Dockerと、必要に応じてkubernetesオプションを提供します。次の例では、 &lt;code&gt;/var/run/docker.sock&lt;/code&gt; docker.sockのdocker エンドポイントと、ファイル &lt;code&gt;/home/me/my-kube-config&lt;/code&gt; から取得したkubernetes構成を使用して、コンテキスト &lt;code&gt;my-context&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="7caced9e26bf2022cc2ed76fed4613134cef300b" translate="yes" xml:space="preserve">
          <source>To create a default IP address pool with a /16 (class B) for the 10.20.0.0 network looks like this:</source>
          <target state="translated">10.20.0.0.0 ネットワーク用に /16 (クラス B)でデフォルトの IP アドレスプールを作成するには、次のようになります。</target>
        </trans-unit>
        <trans-unit id="eb9bc9eedb4c5107eba7487ece9479186050797b" translate="yes" xml:space="preserve">
          <source>To create a default IP address pool with a &lt;code&gt;/16&lt;/code&gt; (class B) for the &lt;code&gt;10.20.0.0&lt;/code&gt; and &lt;code&gt;10.30.0.0&lt;/code&gt; networks, and to create a subnet mask of &lt;code&gt;/26&lt;/code&gt; for each network looks like this:</source>
          <target state="translated">&lt;code&gt;10.20.0.0&lt;/code&gt; および &lt;code&gt;10.30.0.0&lt;/code&gt; ネットワーク用に &lt;code&gt;/16&lt;/code&gt; （クラスB）のデフォルトIPアドレスプールを作成し、ネットワークごとに &lt;code&gt;/26&lt;/code&gt; のサブネットマスクを作成するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="5fbe6c28267f2aab219055b7df6b56fd8a6e0a41" translate="yes" xml:space="preserve">
          <source>To create a machine instance, specify &lt;code&gt;--driver google&lt;/code&gt;, the project ID and the machine name.</source>
          <target state="translated">マシンインスタンスを作成するには、-- &lt;code&gt;--driver google&lt;/code&gt; 、プロジェクトID、マシン名を指定します。</target>
        </trans-unit>
        <trans-unit id="2351ff8f5606ddd71f68cb566573e804a0e68ed4" translate="yes" xml:space="preserve">
          <source>To create a machine with a non-default VPC-ID:</source>
          <target state="translated">デフォルトではないVPC-IDを持つマシンを作成する。</target>
        </trans-unit>
        <trans-unit id="b366b59633688db22b09fd242dde1f7d119b73aa" translate="yes" xml:space="preserve">
          <source>To create a manifest list, you first &lt;code&gt;create&lt;/code&gt; the manifest list locally by specifying the constituent images you would like to have included in your manifest list. Keep in mind that this is pushed to a registry, so if you want to push to a registry other than the docker registry, you need to create your manifest list with the registry name or IP and port. This is similar to tagging an image and pushing it to a foreign registry.</source>
          <target state="translated">マニフェストリストを作成するには、まず、マニフェストリストに含めたい構成イメージを指定して、ローカルでマニフェストリストを &lt;code&gt;create&lt;/code&gt; します。これはレジストリにプッシュされることに注意してください。したがって、Dockerレジストリ以外のレジストリにプッシュする場合は、レジストリ名またはIPおよびポートを使用してマニフェストリストを作成する必要があります。これは、画像にタグを付けて、それを外部レジストリにプッシュすることに似ています。</target>
        </trans-unit>
        <trans-unit id="1a2b7fb40204c1f2fc26c6fd91a3f068fa50f969" translate="yes" xml:space="preserve">
          <source>To create a service with access to Docker-managed secrets, use the &lt;code&gt;--secret&lt;/code&gt; flag. For more information, see &lt;a href=&quot;../secrets/index&quot;&gt;Manage sensitive strings (secrets) for Docker services&lt;/a&gt;</source>
          <target state="translated">Docker管理のシークレットにアクセスできるサービスを作成するには、 &lt;code&gt;--secret&lt;/code&gt; フラグを使用します。詳細については&lt;a href=&quot;../secrets/index&quot;&gt;、Dockerサービスの機密文字列（シークレット）の管理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ae31e00ef19d1196aaaca8e64644c27b7cd3fcd8" translate="yes" xml:space="preserve">
          <source>To create a single-replica service with no extra configuration, you only need to supply the image name. This command starts an Nginx service with a randomly-generated name and no published ports. This is a naive example, since you can&amp;rsquo;t interact with the Nginx service.</source>
          <target state="translated">追加設定なしで単一レプリカサービスを作成するには、イメージ名を指定するだけです。このコマンドは、ランダムに生成された名前でNginxサービスを開始し、公開されたポートはありません。Nginxサービスと対話できないため、これは単純な例です。</target>
        </trans-unit>
        <trans-unit id="23a2876bc2987dcfbf089fcf94cef613d50daa8e" translate="yes" xml:space="preserve">
          <source>To create a virtual machine, you supply Docker Machine with the name of the driver you want to use. The driver determines where the virtual machine is created. For example, on a local Mac or Windows system, the driver is typically Oracle VirtualBox. For provisioning physical machines, a generic driver is provided. For cloud providers, Docker Machine supports drivers such as AWS, Microsoft Azure, DigitalOcean, and many more. The Docker Machine reference includes a complete &lt;a href=&quot;../drivers/index&quot;&gt;list of supported drivers&lt;/a&gt;.</source>
          <target state="translated">仮想マシンを作成するには、使用するドライバーの名前をDocker Machineに提供します。ドライバーは、仮想マシンが作成される場所を決定します。たとえば、ローカルのMacまたはWindowsシステムでは、ドライバーは通常Oracle VirtualBoxです。物理マシンをプロビジョニングするために、汎用ドライバーが提供されます。クラウドプロバイダーの場合、Docker MachineはAWS、Microsoft Azure、DigitalOceanなどのドライバーをサポートしています。Docker Machineリファレンスには、&lt;a href=&quot;../drivers/index&quot;&gt;サポートされているドライバーの&lt;/a&gt;完全なリストが含まれています。</target>
        </trans-unit>
        <trans-unit id="b2711fc987c5362bdcddf078b5e5a5fbdd16c701" translate="yes" xml:space="preserve">
          <source>To create machines on &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Amazon Web Services&lt;/a&gt;, you must supply two parameters: the AWS Access Key ID and the AWS Secret Access Key.</source>
          <target state="translated">&lt;a href=&quot;http://aws.amazon.com&quot;&gt;アマゾンウェブサービス&lt;/a&gt;でマシンを作成するには、AW​​SアクセスキーIDとAWSシークレットアクセスキーの2つのパラメーターを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="80225fe6938ddccfcddf30318ca1d72ba026d326" translate="yes" xml:space="preserve">
          <source>To create machines on AWS, you must supply two parameters:</source>
          <target state="translated">AWS上にマシンを作成するには、2つのパラメータを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d4298a71dfbd94d762373d54a12abd6dcea770a9" translate="yes" xml:space="preserve">
          <source>To customize the host only adapter, you can use the &lt;code&gt;--virtualbox-hostonly-cidr&lt;/code&gt; flag. This specifies the host IP and Machine calculates the VirtualBox DHCP server address (a random IP on the subnet between &lt;code&gt;.1&lt;/code&gt; and &lt;code&gt;.25&lt;/code&gt;) so it does not clash with the specified host IP. Machine specifies the DHCP lower bound to &lt;code&gt;.100&lt;/code&gt; and the upper bound to &lt;code&gt;.254&lt;/code&gt;. For example, a specified CIDR of &lt;code&gt;192.168.24.1/24&lt;/code&gt; would have a DHCP server between &lt;code&gt;192.168.24.2-25&lt;/code&gt;, a lower bound of &lt;code&gt;192.168.24.100&lt;/code&gt; and upper bound of &lt;code&gt;192.168.24.254&lt;/code&gt;.</source>
          <target state="translated">ホストオンリーアダプターをカスタマイズするには、 &lt;code&gt;--virtualbox-hostonly-cidr&lt;/code&gt; フラグを使用できます。これはホストIPを指定し、マシンはVirtualBox DHCPサーバーアドレス（ &lt;code&gt;.1&lt;/code&gt; と &lt;code&gt;.25&lt;/code&gt; の間のサブネット上のランダムなIP）を計算するため、指定されたホストIPと競合しません。マシンは、DHCPの下限を &lt;code&gt;.100&lt;/code&gt; に、上限を &lt;code&gt;.254&lt;/code&gt; に指定します。たとえば、 &lt;code&gt;192.168.24.1/24&lt;/code&gt; 24のCIDRを指定すると、DHCPサーバーは &lt;code&gt;192.168.24.2-25&lt;/code&gt; 、下限は &lt;code&gt;192.168.24.100&lt;/code&gt; 、上限は &lt;code&gt;192.168.24.254&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="0025887353390dc0a17ebcee1508a806e21771b4" translate="yes" xml:space="preserve">
          <source>To decrease logging level</source>
          <target state="translated">ロギングレベルを下げるには</target>
        </trans-unit>
        <trans-unit id="983b60e4fc62e04885f33ad5005010027bfce9e6" translate="yes" xml:space="preserve">
          <source>To delete multiple networks in a single &lt;code&gt;docker network rm&lt;/code&gt; command, provide multiple network names or ids. The following example deletes a network with id &lt;code&gt;3695c422697f&lt;/code&gt; and a network named &lt;code&gt;my-network&lt;/code&gt;:</source>
          <target state="translated">1つの &lt;code&gt;docker network rm&lt;/code&gt; コマンドで複数のネットワークを削除するには、複数のネットワーク名またはIDを指定します。次の例では、ID &lt;code&gt;3695c422697f&lt;/code&gt; のネットワークと &lt;code&gt;my-network&lt;/code&gt; という名前のネットワークを削除します。</target>
        </trans-unit>
        <trans-unit id="2534dd96efc1de81edefc31853d4cf4dbbfa52ab" translate="yes" xml:space="preserve">
          <source>To demonstrate the portability of what we just created, let&amp;rsquo;s upload our built image and run it somewhere else. After all, you need to know how to push to registries when you want to deploy containers to production.</source>
          <target state="translated">作成したものの移植性を示すために、ビルドしたイメージをアップロードして、別の場所で実行してみましょう。結局のところ、コンテナーを実稼働環境にデプロイする場合は、レジストリーにプッシュする方法を知る必要があります。</target>
        </trans-unit>
        <trans-unit id="bdc6cbcd73157cdafbc8831aea08e09b438bef40" translate="yes" xml:space="preserve">
          <source>To demote a node or set of nodes, run &lt;code&gt;docker node demote&lt;/code&gt; from a manager node:</source>
          <target state="translated">ノードまたはノードのセットを &lt;code&gt;docker node demote&lt;/code&gt; は、マネージャーノードからdocker node demoteを実行します。</target>
        </trans-unit>
        <trans-unit id="841c9798f51d77e3b27bd846119ec291836c3e7c" translate="yes" xml:space="preserve">
          <source>To demote the node to a worker, run &lt;code&gt;docker node demote &amp;lt;NODE&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ノードをワーカーに降格するには、 &lt;code&gt;docker node demote &amp;lt;NODE&amp;gt;&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="21100643fb6d68b7b62eae2fe8d698dd8dc20550" translate="yes" xml:space="preserve">
          <source>To deploy an application image when Docker Engine is in swarm mode, you create a service. Frequently a service is the image for a microservice within the context of some larger application. Examples of services might include an HTTP server, a database, or any other type of executable program that you wish to run in a distributed environment.</source>
          <target state="translated">Docker Engineがスウォームモードのときにアプリケーションイメージをデプロイするには、サービスを作成します。多くの場合、サービスはより大きなアプリケーションのコンテキスト内にあるマイクロサービスのイメージです。サービスの例としては、HTTPサーバー、データベース、または分散環境で実行したい他のタイプの実行プログラムなどがあります。</target>
        </trans-unit>
        <trans-unit id="f428fc2d635ce863af8f803769e2437ebd1be7e0" translate="yes" xml:space="preserve">
          <source>To deploy with this production Compose file you can run</source>
          <target state="translated">この本番環境のComposeファイルを使ってデプロイするには、次のように実行します。</target>
        </trans-unit>
        <trans-unit id="32a463abf83c04adfc45892c74d5fd9391f63d69" translate="yes" xml:space="preserve">
          <source>To deploy your application to a swarm, you submit a service definition to a &lt;strong&gt;manager node&lt;/strong&gt;. The manager node dispatches units of work called &lt;a href=&quot;#services-and-tasks&quot;&gt;tasks&lt;/a&gt; to worker nodes.</source>
          <target state="translated">アプリケーションをswarmにデプロイするには、サービス定義を&lt;strong&gt;マネージャーノードに&lt;/strong&gt;送信し&lt;strong&gt;ます&lt;/strong&gt;。マネージャーノードは、&lt;a href=&quot;#services-and-tasks&quot;&gt;タスク&lt;/a&gt;と呼ばれる作業単位をワーカーノードにディスパッチします。</target>
        </trans-unit>
        <trans-unit id="98b4a1945b6227a599d96f7b7ab7f32ac2ac62bd" translate="yes" xml:space="preserve">
          <source>To disable a plugin, use the &lt;code&gt;docker plugin disable&lt;/code&gt; command. To completely remove it, use the &lt;code&gt;docker plugin remove&lt;/code&gt; command. For other available commands and options, see the &lt;a href=&quot;../reference/commandline/docker/index&quot;&gt;command line reference&lt;/a&gt;.</source>
          <target state="translated">プラグインを無効にするには、 &lt;code&gt;docker plugin disable&lt;/code&gt; コマンドを使用します。完全に削除するには、 &lt;code&gt;docker plugin remove&lt;/code&gt; コマンドを使用します。その他の使用可能なコマンドとオプションについては、&lt;a href=&quot;../reference/commandline/docker/index&quot;&gt;コマンドラインリファレンスを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9e8eb0b689ebf4f3572eb25ab95a7b6c508a9ccd" translate="yes" xml:space="preserve">
          <source>To disable any default healthcheck set by the image, you can use &lt;code&gt;disable: true&lt;/code&gt;. This is equivalent to specifying &lt;code&gt;test: [&quot;NONE&quot;]&lt;/code&gt;.</source>
          <target state="translated">イメージで設定されたデフォルトのヘルスチェックを無効にするには、 &lt;code&gt;disable: true&lt;/code&gt; 使用できます。これは &lt;code&gt;test: [&quot;NONE&quot;]&lt;/code&gt; を指定することと同じです。</target>
        </trans-unit>
        <trans-unit id="8310c7921d11735aa50c8a14a806a49ff484b86b" translate="yes" xml:space="preserve">
          <source>To disable autolock, set &lt;code&gt;--autolock&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. The mutual TLS key and the encryption key used to read and write Raft logs are stored unencrypted on disk. There is a trade-off between the risk of storing the encryption key unencrypted at rest and the convenience of restarting a swarm without needing to unlock each manager.</source>
          <target state="translated">&lt;code&gt;--autolock&lt;/code&gt; ロックを無効にするには、-- autolockを &lt;code&gt;false&lt;/code&gt; に設定します。Raftログの読み取りと書き込みに使用される相互TLSキーと暗号化キーは、暗号化されずにディスクに保存されます。保管時に暗号化されていない暗号化キーを保存するリスクと、各マネージャーのロックを解除する必要なくスウォームを再起動する便利さの間にはトレードオフがあります。</target>
        </trans-unit>
        <trans-unit id="95b51d2df44006324e9c7fa3983fe68f4df788cb" translate="yes" xml:space="preserve">
          <source>To disable the plugin, use the following command:</source>
          <target state="translated">プラグインを無効にするには、以下のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="30ac867c70ca22666bcabaf1147b500fba7e5668" translate="yes" xml:space="preserve">
          <source>To disable the security labeling for this container versus running with the &lt;code&gt;--privileged&lt;/code&gt; flag, use the following command:</source>
          <target state="translated">このコンテナーのセキュリティラベル付けを無効にするには、 &lt;code&gt;--privileged&lt;/code&gt; フラグを指定して実行するのではなく、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="899b15f0bea2b907fc0f55369c476f8e0036d494" translate="yes" xml:space="preserve">
          <source>To disable user namespaces for a specific container, add the &lt;code&gt;--userns=host&lt;/code&gt; flag to the &lt;code&gt;docker container create&lt;/code&gt;, &lt;code&gt;docker container run&lt;/code&gt;, or &lt;code&gt;docker container exec&lt;/code&gt; command.</source>
          <target state="translated">特定のコンテナーのユーザー名前空間を無効にするには、-- &lt;code&gt;--userns=host&lt;/code&gt; フラグをdocker &lt;code&gt;docker container create&lt;/code&gt; 、 &lt;code&gt;docker container run&lt;/code&gt; 、または &lt;code&gt;docker container exec&lt;/code&gt; コマンドに追加します。</target>
        </trans-unit>
        <trans-unit id="fe74bc53cef1c8651074ba7b064f82c49da093f6" translate="yes" xml:space="preserve">
          <source>To disconnect a running service from a network, use the &lt;code&gt;--network-rm&lt;/code&gt; flag.</source>
          <target state="translated">実行中のサービスをネットワークから切断するには、 &lt;code&gt;--network-rm&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="910bb30824662c7c6ff17aa18539838b47e4d216" translate="yes" xml:space="preserve">
          <source>To do input/output with a detached container use network connections or shared volumes. These are required because the container is no longer listening to the command line where &lt;code&gt;docker run&lt;/code&gt; was run.</source>
          <target state="translated">デタッチされたコンテナで入出力を行うには、ネットワーク接続または共有ボリュームを使用します。これらはコンテナが &lt;code&gt;docker run&lt;/code&gt; が実行されたコマンドラインをリッスンしていないために必要です。</target>
        </trans-unit>
        <trans-unit id="ccbea93a8509d49173795d375ca3faed2f1e3b34" translate="yes" xml:space="preserve">
          <source>To download a particular image, or set of images (i.e., a repository), use &lt;code&gt;docker pull&lt;/code&gt;.</source>
          <target state="translated">特定のイメージまたはイメージのセット（つまり、リポジトリ）をダウンロードするには、 &lt;code&gt;docker pull&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a664a7ba94302c3162ea98c88d4a678db5efafad" translate="yes" xml:space="preserve">
          <source>To download a particular image, or set of images (i.e., a repository), use &lt;code&gt;docker pull&lt;/code&gt;. If no tag is provided, Docker Engine uses the &lt;code&gt;:latest&lt;/code&gt; tag as a default. This command pulls the &lt;code&gt;debian:latest&lt;/code&gt; image:</source>
          <target state="translated">特定のイメージまたはイメージのセット（つまり、リポジトリ）をダウンロードするには、 &lt;code&gt;docker pull&lt;/code&gt; を使用します。タグが指定されていない場合、Dockerエンジンは &lt;code&gt;:latest&lt;/code&gt; タグをデフォルトとして使用します。次のコマンドは、 &lt;code&gt;debian:latest&lt;/code&gt; イメージを取得します。</target>
        </trans-unit>
        <trans-unit id="2251cf9907c4c021b5ee4b838a72c9c2da86b48e" translate="yes" xml:space="preserve">
          <source>To ease plugins development, we&amp;rsquo;re providing an &lt;code&gt;sdk&lt;/code&gt; for each kind of plugins currently supported by Docker at &lt;a href=&quot;https://github.com/docker/go-plugins-helpers&quot;&gt;docker/go-plugins-helpers&lt;/a&gt;.</source>
          <target state="translated">プラグインの開発を容易にするために、Docker &lt;a href=&quot;https://github.com/docker/go-plugins-helpers&quot;&gt;/ go-plugins-helpersで&lt;/a&gt; Dockerによって現在サポートされているプラ​​グインの種類ごとに &lt;code&gt;sdk&lt;/code&gt; を提供しています。</target>
        </trans-unit>
        <trans-unit id="f6cf38a8a5291c1fcf37e9a8792dd4da6509eca8" translate="yes" xml:space="preserve">
          <source>To enable and configure the authorization plugin, the plugin developer must support the Docker client interactions detailed in this section.</source>
          <target state="translated">認可プラグインを有効にして設定するには、プラグインの開発者は、このセクションで詳述されているDockerクライアントのインタラクションをサポートしている必要があります。</target>
        </trans-unit>
        <trans-unit id="39b61fd0182f46dfd2cb5c20593a3ecbbfdf3eee" translate="yes" xml:space="preserve">
          <source>To enable autolock on an existing swarm, set the &lt;code&gt;autolock&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">既存のスウォームで自動ロックを有効にするには、 &lt;code&gt;autolock&lt;/code&gt; フラグを &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="d928aeef7618a644c1c99784c8c19ba29c031eb5" translate="yes" xml:space="preserve">
          <source>To enable experimental features from the Docker Desktop menu, click &lt;strong&gt;Settings&lt;/strong&gt; (&lt;strong&gt;Preferences&lt;/strong&gt; on macOS) &amp;gt; &lt;strong&gt;Daemon&lt;/strong&gt; and then select the &lt;strong&gt;Experimental features&lt;/strong&gt; check box.</source>
          <target state="translated">ドッカーデスクトップ]メニューから、実験的な機能を有効にするには、クリック&lt;strong&gt;設定&lt;/strong&gt;（&lt;strong&gt;環境設定&lt;/strong&gt;のMacOS上）&amp;gt; &lt;strong&gt;デーモンを&lt;/strong&gt;して、選択&lt;strong&gt;実験が特徴&lt;/strong&gt;のチェックボックスをオンにします。</target>
        </trans-unit>
        <trans-unit id="1614abd778219825008b1ed50f2f41fdd0cef48b" translate="yes" xml:space="preserve">
          <source>To enable experimental features in the Docker CLI, edit the &lt;code&gt;config.json&lt;/code&gt; file and set &lt;code&gt;experimental&lt;/code&gt; to enabled.</source>
          <target state="translated">Docker CLIで試験的な機能を有効にするには、 &lt;code&gt;config.json&lt;/code&gt; ファイルを編集し、 &lt;code&gt;experimental&lt;/code&gt; に有効に設定します。</target>
        </trans-unit>
        <trans-unit id="c7820f6182c605851ad74f456a9c40b396b36c4c" translate="yes" xml:space="preserve">
          <source>To enable experimental mode, users need to restart the docker daemon with the experimental flag enabled.</source>
          <target state="translated">実験モードを有効にするには、実験フラグを有効にした状態でdockerデーモンを再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="7f4b1a290cdc84e10cf5a7492d3db2be1fc13a78" translate="yes" xml:space="preserve">
          <source>To enable the &lt;code&gt;docker-machine&lt;/code&gt; shell prompt, add &lt;code&gt;$(__docker_machine_ps1)&lt;/code&gt; to your &lt;code&gt;PS1&lt;/code&gt; setting in &lt;code&gt;~/.bashrc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$(__docker_machine_ps1)&lt;/code&gt; &lt;code&gt;docker-machine&lt;/code&gt; シェルプロンプトを有効にするには、 &lt;code&gt;~/.bashrc&lt;/code&gt; &lt;code&gt;PS1&lt;/code&gt; 設定に$（__ docker_machine_ps1）を追加します。</target>
        </trans-unit>
        <trans-unit id="77ea5095314020531dd1edca23499b4f23b70dfb" translate="yes" xml:space="preserve">
          <source>To enable the plugin, use the following command:</source>
          <target state="translated">プラグインを有効にするには、以下のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="3e027fc141f47db0b030fc5dad8a24c03c19604f" translate="yes" xml:space="preserve">
          <source>To enable this feature, trustpinning can be configured in &lt;code&gt;daemon.json&lt;/code&gt;, whereby only repositories signed with a user-specified root key can be pulled and run.</source>
          <target state="translated">で構成することができtrustpinning、この機能を有効にするには &lt;code&gt;daemon.json&lt;/code&gt; ユーザーが指定したルートキーで署名のみのリポジトリが引っ張られ、実行させることができます。</target>
        </trans-unit>
        <trans-unit id="8a27d5dc8bbcd4c8c0e5a0311c991bd28a42ad3d" translate="yes" xml:space="preserve">
          <source>To ensure that the Docker client is automatically configured at the start of each shell session, you can embed &lt;code&gt;eval $(docker-machine env default)&lt;/code&gt; in your shell profiles, by adding it to the &lt;code&gt;~/.bash_profile&lt;/code&gt; file or the equivalent configuration file for your shell. However, this fails if a machine called &lt;code&gt;default&lt;/code&gt; is not running. You can configure your system to start the &lt;code&gt;default&lt;/code&gt; machine automatically. The following example shows how to do this in macOS.</source>
          <target state="translated">Dockerクライアントが各シェルセッションの開始時に自動的に構成されるようにするために、 &lt;code&gt;~/.bash_profile&lt;/code&gt; ファイルまたは同等の構成ファイルに &lt;code&gt;eval $(docker-machine env default)&lt;/code&gt; を埋め込むことができます。あなたの殻。ただし、 &lt;code&gt;default&lt;/code&gt; と呼ばれるマシンが実行されていない場合、これは失敗します。 &lt;code&gt;default&lt;/code&gt; マシンを自動的に開始するようにシステムを構成できます。次の例は、macOSでこれを行う方法を示しています。</target>
        </trans-unit>
        <trans-unit id="9023ec9a32794038f1c2b95f571735b1263d7b01" translate="yes" xml:space="preserve">
          <source>To examine the result further, you can use &lt;code&gt;docker exec&lt;/code&gt;:</source>
          <target state="translated">結果をさらに調べるには、 &lt;code&gt;docker exec&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="7d6b9a117dcb9512febd78a9746228288594322c" translate="yes" xml:space="preserve">
          <source>To exit the &lt;code&gt;docker events&lt;/code&gt; command, use &lt;code&gt;CTRL+C&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;docker events&lt;/code&gt; コマンドを終了するには、 &lt;code&gt;CTRL+C&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f22dabfc1bfe491ee4e13158953715516e100bb3" translate="yes" xml:space="preserve">
          <source>To exit the &lt;code&gt;docker system events&lt;/code&gt; command, use &lt;code&gt;CTRL+C&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;docker system events&lt;/code&gt; コマンドを終了するには、 &lt;code&gt;CTRL+C&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="95997b950cd6dce12e07a227c0953d918f91114c" translate="yes" xml:space="preserve">
          <source>To expose a container&amp;rsquo;s internal port, an operator can start the container with the &lt;code&gt;-P&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; flag. The exposed port is accessible on the host and the ports are available to any client that can reach the host.</source>
          <target state="translated">コンテナーの内部ポートを公開するために、オペレーターは &lt;code&gt;-P&lt;/code&gt; または &lt;code&gt;-p&lt;/code&gt; フラグを使用してコンテナーを開始できます。公開されたポートはホスト上でアクセス可能であり、ポートはホストに到達できるすべてのクライアントが使用できます。</target>
        </trans-unit>
        <trans-unit id="0c5a74ccdb773699208bbe3dc1f2f893c4a4ec92" translate="yes" xml:space="preserve">
          <source>To expose an inbound port to the new machine, use the flag, &lt;code&gt;--amazonec2-open-port&lt;/code&gt;:</source>
          <target state="translated">受信ポートを新しいマシンに &lt;code&gt;--amazonec2-open-port&lt;/code&gt; するには、フラグ--amazonec2-open-portを使用します。</target>
        </trans-unit>
        <trans-unit id="e699565757ae1248974af66e4a4d298f8b2892fa" translate="yes" xml:space="preserve">
          <source>To expose on both TCP and UDP, include two lines:</source>
          <target state="translated">TCP と UDP の両方で公開するには、2 行を含めます。</target>
        </trans-unit>
        <trans-unit id="1e33664e9060aad68f09cdab1f832fb4daba2b3c" translate="yes" xml:space="preserve">
          <source>To filter for &lt;code&gt;paused&lt;/code&gt; containers:</source>
          <target state="translated">&lt;code&gt;paused&lt;/code&gt; コンテナをフィルタリングするには：</target>
        </trans-unit>
        <trans-unit id="de6fe1b7e044de15c7ff64f065c1308b5b444b02" translate="yes" xml:space="preserve">
          <source>To find the VPC ID:</source>
          <target state="translated">VPC ID を検索します。</target>
        </trans-unit>
        <trans-unit id="95f976d5ee5b5be4180ab180479960fcdce3f692" translate="yes" xml:space="preserve">
          <source>To fix this problem, try the following:</source>
          <target state="translated">この問題を解決するには、以下を試してみてください。</target>
        </trans-unit>
        <trans-unit id="4c34b0ef08315da08272edc5631e4dc513fd9529" translate="yes" xml:space="preserve">
          <source>To generate your access token:</source>
          <target state="translated">アクセストークンを生成するには</target>
        </trans-unit>
        <trans-unit id="6ce2cea60f58c4ddf95724b2226670e92092de14" translate="yes" xml:space="preserve">
          <source>To get started using &lt;code&gt;docker-machine&lt;/code&gt; commands, see these topics:</source>
          <target state="translated">&lt;code&gt;docker-machine&lt;/code&gt; コマンドの使用を開始するには、以下のトピックを参照してください。</target>
        </trans-unit>
        <trans-unit id="69327c8806f41c421ac0cb9257fe7b47f4cd9878" translate="yes" xml:space="preserve">
          <source>To get the &lt;code&gt;redis&lt;/code&gt; service working, you need to &lt;code&gt;ssh&lt;/code&gt; into the cloud server where the &lt;code&gt;manager&lt;/code&gt; is running, and make a &lt;code&gt;data/&lt;/code&gt; directory in &lt;code&gt;/home/docker/&lt;/code&gt; before you run &lt;code&gt;docker stack deploy&lt;/code&gt;. Another option is to change the data path in the &lt;code&gt;docker-stack.yml&lt;/code&gt; to a pre-existing path on the &lt;code&gt;manager&lt;/code&gt; server. This example does not include this step, so the &lt;code&gt;redis&lt;/code&gt; service is not up in the example output.</source>
          <target state="translated">&lt;code&gt;redis&lt;/code&gt; サービスを機能させるには、 &lt;code&gt;manager&lt;/code&gt; が実行されているクラウドサーバーに &lt;code&gt;ssh&lt;/code&gt; し、docker &lt;code&gt;docker stack deploy&lt;/code&gt; を実行する前に &lt;code&gt;/home/docker/&lt;/code&gt; に &lt;code&gt;data/&lt;/code&gt; ディレクトリを作成する必要があります。もう1つのオプションは、 &lt;code&gt;docker-stack.yml&lt;/code&gt; のデータパスを、 &lt;code&gt;manager&lt;/code&gt; サーバー上の既存のパスに変更することです。この例にはこの手順が含まれていないため、出力例では &lt;code&gt;redis&lt;/code&gt; サービスは稼働していません。</target>
        </trans-unit>
        <trans-unit id="6a79265649a0667bda4042b4e11c178182002103" translate="yes" xml:space="preserve">
          <source>To get your Debian-based containers to use the proxy, you have following options. Replace &lt;code&gt;dockerhost&lt;/code&gt; with the IP address or FQDN of the host running the &lt;code&gt;test_apt_cacher_ng&lt;/code&gt; container.</source>
          <target state="translated">Debianベースのコンテナでプロキシを使用するには、次のオプションがあります。 &lt;code&gt;dockerhost&lt;/code&gt; を &lt;code&gt;test_apt_cacher_ng&lt;/code&gt; コンテナーを実行しているホストのIPアドレスまたはFQDNに置き換えます。</target>
        </trans-unit>
        <trans-unit id="5859b60c795bafa987e7a219c6424a9d0d1ac4ee" translate="yes" xml:space="preserve">
          <source>To give a container access to a volume, use the &lt;code&gt;--volume&lt;/code&gt; and &lt;code&gt;--volume-driver&lt;/code&gt; flags on the &lt;code&gt;docker container run&lt;/code&gt; command. The &lt;code&gt;--volume&lt;/code&gt; (or &lt;code&gt;-v&lt;/code&gt;) flag accepts a volume name and path on the host, and the &lt;code&gt;--volume-driver&lt;/code&gt; flag accepts a driver type.</source>
          <target state="translated">コンテナーがボリュームにアクセスできるようにするには、 &lt;code&gt;--volume&lt;/code&gt; &lt;code&gt;docker container run&lt;/code&gt; コマンドで--volumeおよび &lt;code&gt;--volume-driver&lt;/code&gt; フラグを使用します。 &lt;code&gt;--volume&lt;/code&gt; （または &lt;code&gt;-v&lt;/code&gt; ）フラグは、ホスト上のボリューム名とパスを受け付け、 &lt;code&gt;--volume-driver&lt;/code&gt; フラグは、ドライバタイプを受け付けます。</target>
        </trans-unit>
        <trans-unit id="a10fd3a6da1929faa2b711ea2846a711fc244ed8" translate="yes" xml:space="preserve">
          <source>To grant a service access to multiple secrets, use multiple &lt;code&gt;--secret&lt;/code&gt; flags.</source>
          <target state="translated">サービスに複数のシークレットへのアクセスを許可するには、複数の &lt;code&gt;--secret&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="563529a7c1b8188fd224d942eaf30ab899832ab3" translate="yes" xml:space="preserve">
          <source>To handle this, design your application to attempt to re-establish a connection to the database after a failure. If the application retries the connection, it can eventually connect to the database.</source>
          <target state="translated">これを処理するには、アプリケーションが失敗した後にデータベースへの接続を再確立しようとするように設計してください。アプリケーションが接続を再試行すれば、最終的にはデータベースに接続することができます。</target>
        </trans-unit>
        <trans-unit id="9136328d2e85500400ae5e1770a292b90be3b3b3" translate="yes" xml:space="preserve">
          <source>To help &lt;code&gt;docker-machine&lt;/code&gt; be as stable as possible, we added a monitoring of crashes whenever you try to &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt; a host. This sends, over HTTPS, to Bugsnag some information about your &lt;code&gt;docker-machine&lt;/code&gt; version, build, OS, ARCH, the path to your current shell and, the history of the last command as you could see it with a &lt;code&gt;--debug&lt;/code&gt; option. This data is sent to help us pinpoint recurring issues with &lt;code&gt;docker-machine&lt;/code&gt; and is only transmitted in the case of a crash of &lt;code&gt;docker-machine&lt;/code&gt;.</source>
          <target state="translated">ヘルプに &lt;code&gt;docker-machine&lt;/code&gt; あなたがしようとする時はいつでも可能な限り安定していると、私たちはクラッシュの監視を追加することが &lt;code&gt;create&lt;/code&gt; または &lt;code&gt;upgrade&lt;/code&gt; ホストを。これはHTTPS経由で、Docker &lt;code&gt;docker-machine&lt;/code&gt; バージョン、ビルド、OS、ARCH、現在のシェルへのパス、および &lt;code&gt;--debug&lt;/code&gt; オプションで確認できる最後のコマンドの履歴に関する情報をBugsnagに送信します。このデータは、 &lt;code&gt;docker-machine&lt;/code&gt; で繰り返し発生する問題を特定するために送信され、 &lt;code&gt;docker-machine&lt;/code&gt; がクラッシュした場合にのみ送信されます。</target>
        </trans-unit>
        <trans-unit id="7f7349657daca1bb2b896f028693f2581fedc317" translate="yes" xml:space="preserve">
          <source>To help debug failing probes, any output text (UTF-8 encoded) that the command writes on stdout or stderr will be stored in the health status and can be queried with &lt;code&gt;docker inspect&lt;/code&gt;. Such output should be kept short (only the first 4096 bytes are stored currently).</source>
          <target state="translated">失敗したプローブのデバッグを支援するために、コマンドがstdoutまたはstderrに書き込む出力テキスト（UTF-8エンコード）は、ヘルスステータスに保存され、 &lt;code&gt;docker inspect&lt;/code&gt; でクエリできます。そのような出力は短く保つ必要があります（現在、最初の4096バイトのみが保存されます）。</target>
        </trans-unit>
        <trans-unit id="68ef801fbfc2c68a0daa18d9df2256813a32e9f7" translate="yes" xml:space="preserve">
          <source>To increase availability, you can run multiple instances of both the server and signer applications. These can scale arbitrarily and independently. The database can also scale independently but this is left as an exercise for experienced DBAs and Operations teams. A typical deployment looks like this:</source>
          <target state="translated">可用性を高めるために、サーバーと署名者アプリケーションの両方で複数のインスタンスを実行することができます。これらは任意に独立して拡張することができます。データベースも独立してスケールすることができますが、これは経験豊富なDBAや運用チームに任されています。典型的なデプロイメントは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0991d1e7e9bbc984a493a51125622d7dbef598ff" translate="yes" xml:space="preserve">
          <source>To increase logging level</source>
          <target state="translated">ロギングレベルを上げるには</target>
        </trans-unit>
        <trans-unit id="e0c0ef73103c30963d052d4a2b71fdaaf990f70b" translate="yes" xml:space="preserve">
          <source>To install a different version of Compose, substitute &lt;code&gt;1.24.1&lt;/code&gt; with the version of Compose you want to use.</source>
          <target state="translated">別のバージョンのComposeをインストールするには、使用するComposeのバージョンを &lt;code&gt;1.24.1&lt;/code&gt; に置き換えます。</target>
        </trans-unit>
        <trans-unit id="8174e853bc8feb36611082e07e6df1f11cc1a6fc" translate="yes" xml:space="preserve">
          <source>To install a plugin, use the &lt;code&gt;docker plugin install&lt;/code&gt; command, which pulls the plugin from Docker Hub or your private registry, prompts you to grant permissions or capabilities if necessary, and enables the plugin.</source>
          <target state="translated">プラグインをインストールするには、 &lt;code&gt;docker plugin install&lt;/code&gt; コマンドを使用します。これは、Docker Hubまたはプライベートレジストリからプラグインをプルし、必要に応じて権限または機能を付与するように求め、プラグインを有効にします。</target>
        </trans-unit>
        <trans-unit id="7bc17e0c179b06ce6fd6951e968ab53d5b4e5ed8" translate="yes" xml:space="preserve">
          <source>To interact with the Docker maintainers and other interested users, see the IRC channel &lt;code&gt;#docker-network&lt;/code&gt;.</source>
          <target state="translated">Dockerメンテナーやその他の関心のあるユーザーとやり取りするには、IRCチャネル &lt;code&gt;#docker-network&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="25442a6f7db3850b08b6c0723b0934a05ebe1d94" translate="yes" xml:space="preserve">
          <source>To know the digest of an image, pull the image first. Let&amp;rsquo;s pull the latest &lt;code&gt;ubuntu:14.04&lt;/code&gt; image from Docker Hub:</source>
          <target state="translated">画像のダイジェストを知るには、まず画像を引き出します。Docker Hubから最新の &lt;code&gt;ubuntu:14.04&lt;/code&gt; イメージをプルしてみましょう。</target>
        </trans-unit>
        <trans-unit id="d033d7d6355c48d5b6ea18e018e8993485f3f4f2" translate="yes" xml:space="preserve">
          <source>To learn about Docker in more detail and to answer questions about usage and implementation, check out the &lt;a href=&quot;https://docs.docker.com/config/daemon&quot;&gt;Docker User Guide&lt;/a&gt;.</source>
          <target state="translated">Dockerの詳細と使用法と実装に関する質問への回答については、&lt;a href=&quot;https://docs.docker.com/config/daemon&quot;&gt;Dockerユーザーガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="c85636a1b96b43fe9e6e59ad0fe20d8b0ee8601a" translate="yes" xml:space="preserve">
          <source>To learn about the experimental Dockerfile syntax available to BuildKit-based builds &lt;a href=&quot;https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental/&quot;&gt;refer to the documentation in the BuildKit repository&lt;/a&gt;.</source>
          <target state="translated">BuildKitベースのビルドで使用できる実験的なDockerfile構文&lt;a href=&quot;https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental/&quot;&gt;については、BuildKitリポジトリのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cd41cee80b5790b5613c3f58616433ce9272f9de" translate="yes" xml:space="preserve">
          <source>To learn how to interpret the types of &lt;code&gt;[OPTIONS]&lt;/code&gt;, see &lt;a href=&quot;../commandline/cli/index#option-types&quot;&gt;&lt;em&gt;Option types&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;[OPTIONS]&lt;/code&gt; のタイプを解釈する方法については、&lt;a href=&quot;../commandline/cli/index#option-types&quot;&gt;&lt;em&gt;オプションのタイプを&lt;/em&gt;&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="85fe3108fc962c876f5c1a0ebe06376e7e927bde" translate="yes" xml:space="preserve">
          <source>To learn more about service discovery and networking in swarm mode, see &lt;a href=&quot;https://docs.docker.com/network#configure-service-discovery&quot;&gt;Configure service discovery&lt;/a&gt; in the swarm mode topics.</source>
          <target state="translated">スウォームモードでのサービスディスカバリとネットワーキングの詳細については、スウォームモードのトピックの&lt;a href=&quot;https://docs.docker.com/network#configure-service-discovery&quot;&gt;サービスディスカバリの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e3f55044016b1dde1f9e1879192440f6cc13de3c" translate="yes" xml:space="preserve">
          <source>To learn more about volumes and bind mounts, see &lt;a href=&quot;https://docs.docker.com/storage/volumes/&quot;&gt;Manage data in Docker&lt;/a&gt;</source>
          <target state="translated">ボリュームとバインドマウントの詳細については&lt;a href=&quot;https://docs.docker.com/storage/volumes/&quot;&gt;、Dockerでのデータの管理を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="9f504c0fa5a9d673fc95334893fe168e9d7b1ca6" translate="yes" xml:space="preserve">
          <source>To limit a container&amp;rsquo;s cpu-shares to 512, first identify the container name or ID. You can use &lt;code&gt;docker ps&lt;/code&gt; to find these values. You can also use the ID returned from the &lt;code&gt;docker run&lt;/code&gt; command. Then, do the following:</source>
          <target state="translated">コンテナーのcpu-sharesを512に制限するには、まずコンテナー名またはIDを識別します。 &lt;code&gt;docker ps&lt;/code&gt; を使用して、これらの値を見つけることができます。 &lt;code&gt;docker run&lt;/code&gt; コマンドから返されたIDを使用することもできます。次に、以下を実行します。</target>
        </trans-unit>
        <trans-unit id="cc0a5f793244f6e2ed87e967871f31b5cf638dd8" translate="yes" xml:space="preserve">
          <source>To list all containers statistics with their name, CPU percentage and memory usage in a table format you can use:</source>
          <target state="translated">すべてのコンテナの統計情報を、その名前、CPUの割合、メモリ使用量とともにテーブル形式で一覧表示するには、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="6b8abe7f52782cdc6a9e4b18adb41f4eaf63943e" translate="yes" xml:space="preserve">
          <source>To list all images with their repository and tag in a table format you can use:</source>
          <target state="translated">すべての画像をそのリポジトリとタグで表形式で一覧表示するには、次のような方法があります。</target>
        </trans-unit>
        <trans-unit id="db025649d5d56c863b8f28e498f82eac4161a3a8" translate="yes" xml:space="preserve">
          <source>To list all machine names with their driver in a table format you can use:</source>
          <target state="translated">すべてのマシン名とそのドライバを表形式で一覧表示するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="fc0e8f4c5e182d8d2838813b839da7dfcafe5542" translate="yes" xml:space="preserve">
          <source>To list all running containers with their labels in a table format you can use:</source>
          <target state="translated">実行中のすべてのコンテナのラベルを表形式で一覧表示するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="c0fd874c7327d94c944f1ce691024636a1d42d43" translate="yes" xml:space="preserve">
          <source>To list all secrets with their name and created date in a table format you can use:</source>
          <target state="translated">すべての秘密をその名前と作成日で表形式で一覧表示するには、次のような方法があります。</target>
        </trans-unit>
        <trans-unit id="520df76a65d11bad10b0185fd21e935c317042e9" translate="yes" xml:space="preserve">
          <source>To list available commands, either run &lt;code&gt;docker&lt;/code&gt; with no parameters or execute &lt;code&gt;docker help&lt;/code&gt;:</source>
          <target state="translated">利用可能なコマンドを一覧表示するには、パラメーターなしで &lt;code&gt;docker&lt;/code&gt; を実行するか、 &lt;code&gt;docker help&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="c3d619adfbc1a976caaca0e1086f05b555853410" translate="yes" xml:space="preserve">
          <source>To list the help on any command just execute the command, followed by the &lt;code&gt;--help&lt;/code&gt; option.</source>
          <target state="translated">コマンドのヘルプを一覧表示するには、コマンドを実行し、その後に &lt;code&gt;--help&lt;/code&gt; オプションを続けます。</target>
        </trans-unit>
        <trans-unit id="100731d57f6e16d4fafeee9ecf576152333db304" translate="yes" xml:space="preserve">
          <source>To list the keys that have been imported in to the local Docker trust store we can use the Notary CLI.</source>
          <target state="translated">ローカルのDockerのトラストストアにインポートされた鍵を一覧表示するには、Notary CLIを使用します。</target>
        </trans-unit>
        <trans-unit id="80912436fd2e8ebcb77789f76a43c2a7abeff758" translate="yes" xml:space="preserve">
          <source>To load a new profile into AppArmor for use with containers:</source>
          <target state="translated">コンテナで使用するためにAppArmorに新しいプロファイルをロードします。</target>
        </trans-unit>
        <trans-unit id="ed034cf6b8948864db4f34d65e88927e32650f88" translate="yes" xml:space="preserve">
          <source>To login, just run &lt;code&gt;docker-machine ssh machinename&lt;/code&gt;:</source>
          <target state="translated">ログインするには、 &lt;code&gt;docker-machine ssh machinename&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="44ea57bccb8cab29a8a5eaf6953f438088eda258" translate="yes" xml:space="preserve">
          <source>To make tagging consistent across the various &lt;code&gt;docker&lt;/code&gt; commands, the &lt;code&gt;-f&lt;/code&gt; flag on the &lt;code&gt;docker tag&lt;/code&gt; command is deprecated. It is not longer necessary to specify &lt;code&gt;-f&lt;/code&gt; to move a tag from one image to another. Nor will &lt;code&gt;docker&lt;/code&gt; generate an error if the &lt;code&gt;-f&lt;/code&gt; flag is missing and the specified tag is already in use.</source>
          <target state="translated">さまざまな &lt;code&gt;docker&lt;/code&gt; コマンド全体でタグ付けを一貫させるために、 &lt;code&gt;docker tag&lt;/code&gt; コマンドの &lt;code&gt;-f&lt;/code&gt; フラグは非推奨になりました。タグをある画像から別の画像に移動するために &lt;code&gt;-f&lt;/code&gt; を指定する必要がなくなりました。また、 &lt;code&gt;-f&lt;/code&gt; フラグがなく、指定したタグがすでに使用されている場合でも、 &lt;code&gt;docker&lt;/code&gt; はエラーを生成しません。</target>
        </trans-unit>
        <trans-unit id="ba00cf159c6077cd447bca1082b000e5ce912245" translate="yes" xml:space="preserve">
          <source>To make the key suitable for client authentication, create a new extensions config file:</source>
          <target state="translated">鍵をクライアント認証に適したものにするために、新しい拡張子の設定ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="146247a2638b73795ca06a22169edde76480ec9e" translate="yes" xml:space="preserve">
          <source>To make this more efficient, one of two mechanisms can be employed. One is to use the JSON form of the RUN command such as:</source>
          <target state="translated">これをより効率的にするために、2つのメカニズムのうちの1つを採用することができます。一つは、次のようなRUNコマンドのJSON形式を使用することです。</target>
        </trans-unit>
        <trans-unit id="4f86f720ccbc40b3c6f9257366fc85700341eb0b" translate="yes" xml:space="preserve">
          <source>To make your build context as small as possible add a &lt;a href=&quot;../../reference/builder/index#dockerignore-file&quot;&gt;&lt;code&gt;.dockerignore&lt;/code&gt; file&lt;/a&gt; to your project folder and copy the following into it.</source>
          <target state="translated">ビルドコンテキストをできるだけ小さくするには、&lt;a href=&quot;../../reference/builder/index#dockerignore-file&quot;&gt; &lt;code&gt;.dockerignore&lt;/code&gt; ファイル&lt;/a&gt;をプロジェクトフォルダーに追加し、以下をその中にコピーします。</target>
        </trans-unit>
        <trans-unit id="d9d8d9ad611022b2d90ae12f8807fbc7f2bfab90" translate="yes" xml:space="preserve">
          <source>To modify the proportion from the default of 1024, use the &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--cpu-shares&lt;/code&gt; flag to set the weighting to 2 or higher. If 0 is set, the system will ignore the value and use the default of 1024.</source>
          <target state="translated">比率をデフォルトの1024から変更するには、 &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--cpu-shares&lt;/code&gt; フラグを使用して、重み付けを2以上に設定します。0が設定されている場合、システムは値を無視し、デフォルトの1024を使用します。</target>
        </trans-unit>
        <trans-unit id="0f0f4484d9913e84d631f88e253ec609e413507d" translate="yes" xml:space="preserve">
          <source>To mount a FUSE based filesystem, you need to combine both &lt;code&gt;--cap-add&lt;/code&gt; and &lt;code&gt;--device&lt;/code&gt;:</source>
          <target state="translated">FUSEベースのファイルシステムをマウントするには、-- &lt;code&gt;--cap-add&lt;/code&gt; と &lt;code&gt;--device&lt;/code&gt; の両方を組み合わせる必要があります。</target>
        </trans-unit>
        <trans-unit id="e044a14bee5e7118d526ba58fea86c82b107d8df" translate="yes" xml:space="preserve">
          <source>To mount a read-only bind:</source>
          <target state="translated">読み取り専用バインドをマウントします。</target>
        </trans-unit>
        <trans-unit id="d397a01a0e65c0ef85c3e2c5fdbec3c469af901a" translate="yes" xml:space="preserve">
          <source>To mount a read-write bind:</source>
          <target state="translated">読み書きバインドをマウントします。</target>
        </trans-unit>
        <trans-unit id="caf5a70446923400bf2aa594f7c5afb6601d8c47" translate="yes" xml:space="preserve">
          <source>To move your project to a later version, see the &lt;a href=&quot;#upgrading&quot;&gt;Upgrading&lt;/a&gt; section.</source>
          <target state="translated">プロジェクトを新しいバージョンに移動するには、「&lt;a href=&quot;#upgrading&quot;&gt;アップグレード」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bfee1ff6d4e73f0aacaa865f3f5223623976a3a7" translate="yes" xml:space="preserve">
          <source>To obtain a family URL, replace &lt;code&gt;&amp;lt;PROJECT&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;FAMILY&amp;gt;&lt;/code&gt; in the following template.</source>
          <target state="translated">ファミリーURLを取得するには、次のテンプレートの &lt;code&gt;&amp;lt;PROJECT&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;FAMILY&amp;gt;&lt;/code&gt; を置き換えます。</target>
        </trans-unit>
        <trans-unit id="b1bc439211ee52dd379c6b93b051b69200315ffc" translate="yes" xml:space="preserve">
          <source>To opt out of error reporting, create a &lt;code&gt;no-error-report&lt;/code&gt; file in your &lt;code&gt;$HOME/.docker/machine&lt;/code&gt; directory:</source>
          <target state="translated">エラー報告をオプトアウトするには、 &lt;code&gt;$HOME/.docker/machine&lt;/code&gt; ディレクトリに &lt;code&gt;no-error-report&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="411473a0ae942433392bdba5342be3c54e626c83" translate="yes" xml:space="preserve">
          <source>To override the sequence for an individual container, use the &lt;code&gt;--detach-keys=&quot;&amp;lt;sequence&amp;gt;&quot;&lt;/code&gt; flag with the &lt;code&gt;docker attach&lt;/code&gt; command. The format of the &lt;code&gt;&amp;lt;sequence&amp;gt;&lt;/code&gt; is either a letter [a-Z], or the &lt;code&gt;ctrl-&lt;/code&gt; combined with any of the following:</source>
          <target state="translated">個々のコンテナのシーケンスを上書きするには、 &lt;code&gt;--detach-keys=&quot;&amp;lt;sequence&amp;gt;&quot;&lt;/code&gt; &lt;code&gt;docker attach&lt;/code&gt; コマンドで--detach-keys = &quot;&amp;lt;sequence&amp;gt;&quot;フラグを使用します。 &lt;code&gt;&amp;lt;sequence&amp;gt;&lt;/code&gt; の形式は、文字[aZ]、または次のいずれかと組み合わせた &lt;code&gt;ctrl-&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="3bc3cb9f8ca6501039bd01f42d3b1c1ec99e8426" translate="yes" xml:space="preserve">
          <source>To override this behavior for specific registries, use the &lt;code&gt;--allow-nondistributable-artifacts&lt;/code&gt; option in one of the following forms:</source>
          <target state="translated">特定のレジストリのこの動作をオーバーライドするには、次のいずれかの形式で &lt;code&gt;--allow-nondistributable-artifacts&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="e21de091d65933ce5d617490c6ed180d3d87e0d2" translate="yes" xml:space="preserve">
          <source>To prevent the scheduler from placing tasks on a manager node in a multi-node swarm, set the availability for the manager node to &lt;code&gt;Drain&lt;/code&gt;. The scheduler gracefully stops tasks on nodes in &lt;code&gt;Drain&lt;/code&gt; mode and schedules the tasks on an &lt;code&gt;Active&lt;/code&gt; node. The scheduler does not assign new tasks to nodes with &lt;code&gt;Drain&lt;/code&gt; availability.</source>
          <target state="translated">スケジューラーがマルチノードスウォームのマネージャーノードにタスクを配置しないようにするには、マネージャーノードの可用性を[ &lt;code&gt;Drain&lt;/code&gt; に設定します。スケジューラは、 &lt;code&gt;Drain&lt;/code&gt; モードのノードのタスクを正常に停止し、 &lt;code&gt;Active&lt;/code&gt; ノードのタスクをスケジュールします。スケジューラーは、 &lt;code&gt;Drain&lt;/code&gt; が使用可能なノードに新しいタスクを割り当てません。</target>
        </trans-unit>
        <trans-unit id="9af9374ac27538dab43af37ddda5ce5b1b17bfa0" translate="yes" xml:space="preserve">
          <source>To promote a node or set of nodes, run &lt;code&gt;docker node promote&lt;/code&gt; from a manager node:</source>
          <target state="translated">ノードまたはノードのセットを &lt;code&gt;docker node promote&lt;/code&gt; は、マネージャーノードからdocker node serveを実行します。</target>
        </trans-unit>
        <trans-unit id="faee2caabc0e115340518180584ae26aec494763" translate="yes" xml:space="preserve">
          <source>To protect your keys from accidental damage, remove their write permissions. To make them only readable by you, change file modes as follows:</source>
          <target state="translated">誤った損傷から鍵を保護するために、鍵の書き込み権限を削除してください。自分だけが読めるようにするには、以下のようにファイルモードを変更します。</target>
        </trans-unit>
        <trans-unit id="6e64058f0bf352eed38ba919557e5716d1d7d33b" translate="yes" xml:space="preserve">
          <source>To provide a name for your service, use the &lt;code&gt;--name&lt;/code&gt; flag:</source>
          <target state="translated">サービスの名前を指定するには、 &lt;code&gt;--name&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="ce30ec76b8549ea23ad3c5c95ddb6478abf11cbc" translate="yes" xml:space="preserve">
          <source>To publish a service&amp;rsquo;s ports externally to the swarm, use the &lt;code&gt;--publish &amp;lt;PUBLISHED-PORT&amp;gt;:&amp;lt;SERVICE-PORT&amp;gt;&lt;/code&gt; flag. The swarm makes the service accessible at the published port &lt;strong&gt;on every swarm node&lt;/strong&gt;. If an external host connects to that port on any swarm node, the routing mesh routes it to a task. The external host does not need to know the IP addresses or internally-used ports of the service tasks to interact with the service. When a user or process connects to a service, any worker node running a service task may respond. For more details about swarm service networking, see &lt;a href=&quot;https://docs.docker.com/network&quot;&gt;Manage swarm service networks&lt;/a&gt;.</source>
          <target state="translated">サービスのポートをスウォームの外部に公開するには、 &lt;code&gt;--publish &amp;lt;PUBLISHED-PORT&amp;gt;:&amp;lt;SERVICE-PORT&amp;gt;&lt;/code&gt; フラグを使用します。スウォームは、&lt;strong&gt;すべてのスウォームノードの&lt;/strong&gt;公開ポートでサービスにアクセスできるようにし&lt;strong&gt;ます&lt;/strong&gt;。外部ホストがスウォームノードのそのポートに接続する場合、ルーティングメッシュはそれをタスクにルーティングします。外部ホストは、サービスと対話するために、サービスタスクのIPアドレスまたは内部的に使用されるポートを知る必要はありません。ユーザーまたはプロセスがサービスに接続すると、サービスタスクを実行しているワーカーノードが応答する場合があります。スウォームサービスネットワーキングの詳細については、「&lt;a href=&quot;https://docs.docker.com/network&quot;&gt;スウォームサービスネットワーク&lt;/a&gt;を管理する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="dfca3199eef8ec450f2791c18c7e2a42585c3248" translate="yes" xml:space="preserve">
          <source>To push an image to a private registry and not the central Docker registry you must tag it with the registry hostname and port (if needed).</source>
          <target state="translated">イメージを中央のDockerレジストリではなくプライベートレジストリにプッシュするには、レジストリのホスト名とポートをタグ付けしなければなりません(必要に応じて)。</target>
        </trans-unit>
        <trans-unit id="4f4af00206bd87665e8844f158ca78c647e96fd7" translate="yes" xml:space="preserve">
          <source>To query the status of the node as a worker that accept tasks:</source>
          <target state="translated">タスクを受け入れるワーカーとしてのノードの状態を照会します。</target>
        </trans-unit>
        <trans-unit id="6b5ed40f68551f8888f38af30cec53a9b5d42947" translate="yes" xml:space="preserve">
          <source>To read more about these options and how to configure them, see &lt;a href=&quot;https://docs.docker.com/network&quot;&gt;&amp;ldquo;&lt;em&gt;Get started with multi-host network&lt;/em&gt;&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">これらのオプションとその構成方法の詳細については、&lt;a href=&quot;https://docs.docker.com/network&quot;&gt;「&lt;em&gt;マルチホストネットワークの概要&lt;/em&gt;」&lt;em&gt;を&lt;/em&gt;&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d14b25dbcff005a42a603b7afbd6b706dcd7b031" translate="yes" xml:space="preserve">
          <source>To reattach to a detached container, use &lt;code&gt;docker&lt;/code&gt;&lt;a href=&quot;../commandline/attach/index&quot;&gt;&lt;em&gt;attach&lt;/em&gt;&lt;/a&gt; command.</source>
          <target state="translated">切り離されたコンテナに再&lt;a href=&quot;../commandline/attach/index&quot;&gt;&lt;em&gt;接続&lt;/em&gt;&lt;/a&gt;するには、 &lt;code&gt;docker&lt;/code&gt; &lt;em&gt;attach&lt;/em&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="c29f40237c9e14487a58c35b9c616614d46a2382" translate="yes" xml:space="preserve">
          <source>To recap, while typing &lt;code&gt;docker run&lt;/code&gt; is simple enough, the true implementation of a container in production is running it as a service. Services codify a container&amp;rsquo;s behavior in a Compose file, and this file can be used to scale, limit, and redeploy our app. Changes to the service can be applied in place, as it runs, using the same command that launched the service: &lt;code&gt;docker stack deploy&lt;/code&gt;.</source>
          <target state="translated">要約すると、 &lt;code&gt;docker run&lt;/code&gt; と入力するのは簡単ですが、本番環境でのコンテナーの実際の実装は、コンテナーをサービスとして実行しています。サービスはコンテナの動作をComposeファイルにコード化し、このファイルを使用してアプリをスケーリング、制限、再デプロイできます。サービスへの変更は、サービスを起動したときと同じコマンドである &lt;code&gt;docker stack deploy&lt;/code&gt; を使用して、実行中に適切に適用できます。</target>
        </trans-unit>
        <trans-unit id="46fdb6bf16d125dc28a5c67538374743497a4ec5" translate="yes" xml:space="preserve">
          <source>To recover from this error, you must create more free space in the thin pool to recover from the error. You can create free space by deleting some images and containers from the thin pool. You can also add more storage to the thin pool.</source>
          <target state="translated">このエラーから回復するには、シンプールに空き領域を多く作成する必要があります。シンプールからいくつかのイメージとコンテナを削除することで、空き領域を作成できます。また、シンプールにストレージを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="58431c585e29df36a389201040aae84b4725a1ee" translate="yes" xml:space="preserve">
          <source>To remove &lt;code&gt;worker2&lt;/code&gt;, issue the following command from &lt;code&gt;worker2&lt;/code&gt; itself:</source>
          <target state="translated">&lt;code&gt;worker2&lt;/code&gt; を削除するには、 &lt;code&gt;worker2&lt;/code&gt; 自体から次のコマンドを発行します。</target>
        </trans-unit>
        <trans-unit id="717347d3b9e53d1235e2b49a914c7ec8c3c29c7e" translate="yes" xml:space="preserve">
          <source>To remove a host and all of its containers and images, first stop the machine, then use &lt;code&gt;docker-machine rm&lt;/code&gt;:</source>
          <target state="translated">ホストとそのすべてのコンテナーおよびイメージを削除するには、まずマシンを停止してから、 &lt;code&gt;docker-machine rm&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f6ed978a0e2616402cb917d9d43a13b7fef58642" translate="yes" xml:space="preserve">
          <source>To remove a service, use the &lt;code&gt;docker service remove&lt;/code&gt; command. You can remove a service by its ID or name, as shown in the output of the &lt;code&gt;docker service ls&lt;/code&gt; command. The following command removes the &lt;code&gt;my_web&lt;/code&gt; service.</source>
          <target state="translated">サービスを削除するには、 &lt;code&gt;docker service remove&lt;/code&gt; コマンドを使用します。 &lt;code&gt;docker service ls&lt;/code&gt; コマンドの出力に示されているように、サービスをIDまたは名前で削除できます。次のコマンドは、 &lt;code&gt;my_web&lt;/code&gt; サービスを削除します。</target>
        </trans-unit>
        <trans-unit id="40dd29f11a9d90d20aed5f0407c2ab41bbe23c55" translate="yes" xml:space="preserve">
          <source>To remove all machines: &lt;code&gt;docker-machine rm -f $(docker-machine ls -q)&lt;/code&gt; (you might need to use &lt;code&gt;-force&lt;/code&gt; on Windows).</source>
          <target state="translated">すべてのマシンを削除するには： &lt;code&gt;docker-machine rm -f $(docker-machine ls -q)&lt;/code&gt; （Windowsでは &lt;code&gt;-force&lt;/code&gt; を使用する必要がある場合があります）。</target>
        </trans-unit>
        <trans-unit id="98ce6357b9ca06941b6937275d86d115a08ec845" translate="yes" xml:space="preserve">
          <source>To remove an image using its digest:</source>
          <target state="translated">ダイジェストを使用して画像を削除する。</target>
        </trans-unit>
        <trans-unit id="64ccd7ba3f4d4e9d893002cbf68cfd773f8ed33c" translate="yes" xml:space="preserve">
          <source>To remove an instance and all of its containers and images, first stop the machine, then use &lt;code&gt;docker-machine rm&lt;/code&gt;.</source>
          <target state="translated">インスタンスとそのすべてのコンテナーおよびイメージを削除するには、まずマシンを停止してから、 &lt;code&gt;docker-machine rm&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="810ffb9b6cb8dff02fd24d2ff58be8add441735c" translate="yes" xml:space="preserve">
          <source>To remove each machine individually: &lt;code&gt;docker-machine rm &amp;lt;machine-name&amp;gt;&lt;/code&gt;</source>
          <target state="translated">各マシンを個別に削除するには： &lt;code&gt;docker-machine rm &amp;lt;machine-name&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e8072cd03ac164c076d813a966df1dec8996520c" translate="yes" xml:space="preserve">
          <source>To remove targets, we use the &lt;code&gt;notary remove&lt;/code&gt; command, specifying the GUN and target name.</source>
          <target state="translated">ターゲットを削除するには、GUNとターゲット名を指定して &lt;code&gt;notary remove&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="997e2cc43df946a2ea185ad244e7895e3fe080e9" translate="yes" xml:space="preserve">
          <source>To remove the network named &amp;lsquo;my-network&amp;rsquo;:</source>
          <target state="translated">「my-network」という名前のネットワークを削除するには：</target>
        </trans-unit>
        <trans-unit id="2cdb92c790b440d4c19e5c9b423218c44bac5d49" translate="yes" xml:space="preserve">
          <source>To remove the node from the swarm, run &lt;code&gt;docker node rm &amp;lt;NODE&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">スウォームからノー​​ドを削除するには、 &lt;code&gt;docker node rm &amp;lt;NODE&amp;gt;&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="ba06f206e50a7586d7abdc4909321b5f004cfddc" translate="yes" xml:space="preserve">
          <source>To remove this target from our delegation, use the &lt;code&gt;notary remove&lt;/code&gt; command with the same flag:</source>
          <target state="translated">このターゲットを委任から &lt;code&gt;notary remove&lt;/code&gt; は、同じフラグを指定してnotary removeコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="2974e5b647d1f9937dd49138a4a9d4e38f16ceb1" translate="yes" xml:space="preserve">
          <source>To report bugs or file feature requests, use the &lt;a href=&quot;https://github.com/docker/machine/issues&quot;&gt;issue tracker on Github&lt;/a&gt;.</source>
          <target state="translated">バグを報告したり、機能のリクエストを提出したりするには、&lt;a href=&quot;https://github.com/docker/machine/issues&quot;&gt;Githubの課題追跡を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="04a7e38317899e3d1114f4a7a189fd735cefe509" translate="yes" xml:space="preserve">
          <source>To report bugs or file feature requests: use the &lt;a href=&quot;https://github.com/docker/compose/issues&quot;&gt;issue tracker on Github&lt;/a&gt;.</source>
          <target state="translated">バグを報告したり、機能のリクエストを提出したりするには、&lt;a href=&quot;https://github.com/docker/compose/issues&quot;&gt;Githubの課題追跡を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="534c8d44800f1497c4b9bd3902958e6c66deae26" translate="yes" xml:space="preserve">
          <source>To reserve a given amount of memory or number of CPUs for a service, use the &lt;code&gt;--reserve-memory&lt;/code&gt; or &lt;code&gt;--reserve-cpu&lt;/code&gt; flags. If no available nodes can satisfy the requirement (for instance, if you request 4 CPUs and no node in the swarm has 4 CPUs), the service remains in a pending state until an appropriate node is available to run its tasks.</source>
          <target state="translated">特定の量のメモリまたはCPUの数をサービスに予約するには、 &lt;code&gt;--reserve-memory&lt;/code&gt; または &lt;code&gt;--reserve-cpu&lt;/code&gt; フラグを使用します。使用可能なノードが要件を満たすことができない場合（たとえば、4つのCPUを要求し、スウォーム内のノードに4つのCPUがない場合）、適切なノードがタスクを実行できるようになるまで、サービスは保留状態のままになります。</target>
        </trans-unit>
        <trans-unit id="3fc6b7b17e03c9020048975ac4a5e7bdcc6a32d6" translate="yes" xml:space="preserve">
          <source>To restart a machine that&amp;rsquo;s stopped, run:</source>
          <target state="translated">停止しているマシンを再起動するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="e9775b3d354d3be17bb81b18bfcbbd74a51040be" translate="yes" xml:space="preserve">
          <source>To restart a paused update run &lt;code&gt;docker service update &amp;lt;SERVICE-ID&amp;gt;&lt;/code&gt;. For example:</source>
          <target state="translated">一時停止した更新を再開するには、 &lt;code&gt;docker service update &amp;lt;SERVICE-ID&amp;gt;&lt;/code&gt; を実行します。例えば：</target>
        </trans-unit>
        <trans-unit id="36b91b87fc7cd6104144a9a3d7d7cdfd8e91f307" translate="yes" xml:space="preserve">
          <source>To restart the application run &lt;code&gt;docker-compose up&lt;/code&gt; in the project directory.</source>
          <target state="translated">アプリケーションを再起動 &lt;code&gt;docker-compose up&lt;/code&gt; は、プロジェクトディレクトリでdocker-compose upを実行します。</target>
        </trans-unit>
        <trans-unit id="6365fc26def896bdb15fb3ae3facd435cdbbc942" translate="yes" xml:space="preserve">
          <source>To restore, see &lt;a href=&quot;#restore-from-a-backup&quot;&gt;Restore from a backup&lt;/a&gt;.</source>
          <target state="translated">復元するには、「&lt;a href=&quot;#restore-from-a-backup&quot;&gt;バックアップから&lt;/a&gt;復元する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="bd5ac55f99b4e4dfa69666eb38ec9e144e73c8f9" translate="yes" xml:space="preserve">
          <source>To retrieve the join command including the join token for manager nodes, run the following command on a manager node:</source>
          <target state="translated">マネージャノードのjoinトークンを含むjoinコマンドを取得するには、マネージャノードで以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="21de6e34820ec7593df696b2db3334c997576da9" translate="yes" xml:space="preserve">
          <source>To retrieve the join command including the join token for worker nodes, run the following command on a manager node:</source>
          <target state="translated">ワーカーノードのjoinトークンを含むjoinコマンドを取得するには、マネージャノードで以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="be50ffb7c3a3a97ddca931a464bf99676aef52b5" translate="yes" xml:space="preserve">
          <source>To retrieve the join command including the join token for worker nodes, run:</source>
          <target state="translated">ワーカーノードのjoinトークンを含むjoinコマンドを取得するには、実行します。</target>
        </trans-unit>
        <trans-unit id="15de0da3bb255e4ba9b22df9510640fb1a68e248" translate="yes" xml:space="preserve">
          <source>To rotate a config, you first save a new config with a different name than the one that is currently in use. You then redeploy the service, removing the old config and adding the new config at the same mount point within the container. This example builds upon the previous one by rotating the &lt;code&gt;site.conf&lt;/code&gt; configuration file.</source>
          <target state="translated">構成をローテーションするには、まず、現在使用中の構成とは異なる名前で新しい構成を保存します。次に、サービスを再デプロイし、古い構成を削除して、コンテナー内の同じマウントポイントに新しい構成を追加します。この例は、 &lt;code&gt;site.conf&lt;/code&gt; 構成ファイルをローテーションすることにより、前の例に基づいています。</target>
        </trans-unit>
        <trans-unit id="9300021e45ed41a7b3822c08b507e129425f7f33" translate="yes" xml:space="preserve">
          <source>To run Compose as a non-root user, see &lt;a href=&quot;https://docs.docker.com/install/linux/linux-postinstall/&quot;&gt;Manage Docker as a non-root user&lt;/a&gt;.</source>
          <target state="translated">非rootユーザーとしてComposeを実行するには、非rootユーザー&lt;a href=&quot;https://docs.docker.com/install/linux/linux-postinstall/&quot;&gt;としてのDockerの管理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3f30e869fcc8c2280c61d26577473c2e2bd22187" translate="yes" xml:space="preserve">
          <source>To run a Docker container, you:</source>
          <target state="translated">Dockerコンテナを実行するには</target>
        </trans-unit>
        <trans-unit id="8e84e72164c2094ed71a3aabcf888e79efae1c7b" translate="yes" xml:space="preserve">
          <source>To run nginx in detached mode:</source>
          <target state="translated">デタッチドモードでnginxを実行する。</target>
        </trans-unit>
        <trans-unit id="9169efc66794810df7fe7fe89e4b20aaf81249af" translate="yes" xml:space="preserve">
          <source>To run the &lt;code&gt;docker login&lt;/code&gt; command non-interactively, you can set the &lt;code&gt;--password-stdin&lt;/code&gt; flag to provide a password through &lt;code&gt;STDIN&lt;/code&gt;. Using &lt;code&gt;STDIN&lt;/code&gt; prevents the password from ending up in the shell&amp;rsquo;s history, or log-files.</source>
          <target state="translated">実行するには &lt;code&gt;docker login&lt;/code&gt; 非対話的にコマンドを、あなたが設定することができ &lt;code&gt;--password-stdin&lt;/code&gt; を通じてパスワードを提供するために、フラグを &lt;code&gt;STDIN&lt;/code&gt; 。 &lt;code&gt;STDIN&lt;/code&gt; を使用すると、パスワードがシェルの履歴やログファイルに残ることを防ぎます。</target>
        </trans-unit>
        <trans-unit id="bdffc74217a2dbea402d1314e7364ede4ae72462" translate="yes" xml:space="preserve">
          <source>To run the daemon with debug output, use &lt;code&gt;dockerd -D&lt;/code&gt; or add &lt;code&gt;&quot;debug&quot;: true&lt;/code&gt; to the &lt;code&gt;daemon.json&lt;/code&gt; file.</source>
          <target state="translated">デバッグ出力でデーモンを実行するには、 &lt;code&gt;dockerd -D&lt;/code&gt; を使用するか、 &lt;code&gt;daemon.json&lt;/code&gt; ファイルに &lt;code&gt;&quot;debug&quot;: true&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="d598a7c06e20a49b206a70cb1a7599be5afeedbc" translate="yes" xml:space="preserve">
          <source>To run this tutorial, you need the following:</source>
          <target state="translated">このチュートリアルを実行するには、以下のものが必要です。</target>
        </trans-unit>
        <trans-unit id="082ec3ef855aefcc1c5e85718ddcb8cfe7497356" translate="yes" xml:space="preserve">
          <source>To see a detailed list of changes for past and current releases of Docker Compose, refer to the &lt;a href=&quot;https://github.com/docker/compose/blob/master/CHANGELOG/&quot;&gt;CHANGELOG&lt;/a&gt;.</source>
          <target state="translated">Docker Composeの過去および現在のリリースの変更の詳細なリストを確認するには、&lt;a href=&quot;https://github.com/docker/compose/blob/master/CHANGELOG/&quot;&gt;CHANGELOGを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b2c2347a0e46106b7b63fa77d236560fbbdeb1ac" translate="yes" xml:space="preserve">
          <source>To see a list of providers and review the options available to a provider, see the reference for that driver.</source>
          <target state="translated">プロバイダのリストを見て、プロバイダが利用できるオプションを確認するには、そのドライバのリファレンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="e46eb3912f2fd79620b7cc30eecdc49b1c679704" translate="yes" xml:space="preserve">
          <source>To see an image&amp;rsquo;s current digest, issue the command &lt;code&gt;docker inspect &amp;lt;IMAGE&amp;gt;:&amp;lt;TAG&amp;gt;&lt;/code&gt; and look for the &lt;code&gt;RepoDigests&lt;/code&gt; line. The following is the current digest for &lt;code&gt;ubuntu:latest&lt;/code&gt; at the time this content was written. The output is truncated for clarity.</source>
          <target state="translated">イメージの現在のダイジェストを表示するには、コマンド &lt;code&gt;docker inspect &amp;lt;IMAGE&amp;gt;:&amp;lt;TAG&amp;gt;&lt;/code&gt; を &lt;code&gt;RepoDigests&lt;/code&gt; して、RepoDigests行を探します。以下は、このコンテンツが作成された時点での &lt;code&gt;ubuntu:latest&lt;/code&gt; の現在のダイジェストです。明確にするために、出力は省略されています。</target>
        </trans-unit>
        <trans-unit id="41bff8947a64a33ada96a1deb33c4d1916a1ba30" translate="yes" xml:space="preserve">
          <source>To see how the &lt;code&gt;docker:apache&lt;/code&gt; image was added to a container&amp;rsquo;s base image:</source>
          <target state="translated">&lt;code&gt;docker:apache&lt;/code&gt; イメージがコンテナのベースイメージにどのように追加されたかを確認するには：</target>
        </trans-unit>
        <trans-unit id="7fac1f89ffd5d8c1c803082b7645d8d0d8cc93ba" translate="yes" xml:space="preserve">
          <source>To see how the &lt;code&gt;docker:latest&lt;/code&gt; image was built:</source>
          <target state="translated">&lt;code&gt;docker:latest&lt;/code&gt; イメージがどのように作成されたかを確認するには：</target>
        </trans-unit>
        <trans-unit id="0ee2577cccf8e27d9d0514d167c7bf5c9f7ea203" translate="yes" xml:space="preserve">
          <source>To see the details on the &lt;code&gt;helloworld&lt;/code&gt; service:</source>
          <target state="translated">&lt;code&gt;helloworld&lt;/code&gt; サービスの詳細を表示するには：</target>
        </trans-unit>
        <trans-unit id="1b837bc652c41fbea82b97ebabf29c1b14f723d5" translate="yes" xml:space="preserve">
          <source>To see the logfiles that are &lt;code&gt;tailed&lt;/code&gt; in the default command, you can use:</source>
          <target state="translated">されているログファイルを参照するに &lt;code&gt;tailed&lt;/code&gt; デフォルトのコマンドでは、あなたが使用することができます。</target>
        </trans-unit>
        <trans-unit id="c57a462c3dc5b1a53f6db72c043ea066d58ad879" translate="yes" xml:space="preserve">
          <source>To see the provider-specific flags, simply pass a value for &lt;code&gt;--driver&lt;/code&gt; when invoking the &lt;code&gt;create&lt;/code&gt; help text.</source>
          <target state="translated">プロバイダー固有のフラグを &lt;code&gt;--driver&lt;/code&gt; するには、 &lt;code&gt;create&lt;/code&gt; ヘルプテキストを呼び出すときに--driverの値を渡します。</target>
        </trans-unit>
        <trans-unit id="0c4d6d4797f52f2f3ab5e2ec9ac125dccfcc13bc" translate="yes" xml:space="preserve">
          <source>To see the result of using the template, use the &lt;code&gt;docker service ps&lt;/code&gt; and &lt;code&gt;docker inspect&lt;/code&gt; commands.</source>
          <target state="translated">テンプレートを使用した結果を確認するには、 &lt;code&gt;docker service ps&lt;/code&gt; および &lt;code&gt;docker inspect&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="129cad5f269f116bf25bc033fdbf6af79639a2a5" translate="yes" xml:space="preserve">
          <source>To see what environment variables are available to a service, run &lt;code&gt;docker-compose run SERVICE env&lt;/code&gt;.</source>
          <target state="translated">サービスで使用できる環境変数を確認するには、 &lt;code&gt;docker-compose run SERVICE env&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="4b5950525321f7c461a099fdb136b2b8c2bc7871" translate="yes" xml:space="preserve">
          <source>To see which images are present locally, use the &lt;a href=&quot;../images/index&quot;&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">ローカルに存在するイメージを確認するには、&lt;a href=&quot;../images/index&quot;&gt; &lt;code&gt;docker images&lt;/code&gt; &lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="bb554a51c2e9e0f0c7c2ee4cb960809fc36b0796" translate="yes" xml:space="preserve">
          <source>To serve the metrics API on &lt;code&gt;localhost:9323&lt;/code&gt; you would specify &lt;code&gt;--metrics-addr 127.0.0.1:9323&lt;/code&gt;, allowing you to make requests on the API at &lt;code&gt;127.0.0.1:9323/metrics&lt;/code&gt; to receive metrics in the &lt;a href=&quot;https://prometheus.io/docs/instrumenting/exposition_formats/&quot;&gt;prometheus&lt;/a&gt; format.</source>
          <target state="translated">上のメトリックのAPIを提供するに &lt;code&gt;localhost:9323&lt;/code&gt; 次のように指定し &lt;code&gt;--metrics-addr 127.0.0.1:9323&lt;/code&gt; あなたがでAPIにリクエストを作成することができ、 &lt;code&gt;127.0.0.1:9323/metrics&lt;/code&gt; にメトリックを受信する&lt;a href=&quot;https://prometheus.io/docs/instrumenting/exposition_formats/&quot;&gt;プロメテウス&lt;/a&gt;フォーマット。</target>
        </trans-unit>
        <trans-unit id="c713f8261498437251e22b59409f896ac8ed8262" translate="yes" xml:space="preserve">
          <source>To set labels on containers instead, use the &lt;code&gt;labels&lt;/code&gt; key outside of &lt;code&gt;deploy&lt;/code&gt;:</source>
          <target state="translated">代わりにコンテナにラベルを設定するには、 &lt;code&gt;deploy&lt;/code&gt; の外部で &lt;code&gt;labels&lt;/code&gt; キーを使用します。</target>
        </trans-unit>
        <trans-unit id="01e468de676963d213e376546e7dde34754366c3" translate="yes" xml:space="preserve">
          <source>To set the DNS search domain for all Docker containers, use:</source>
          <target state="translated">すべてのDockerコンテナにDNS検索ドメインを設定するには、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="b93b25d38e5fdeccbea33bf4d0ae206b11b4cfb4" translate="yes" xml:space="preserve">
          <source>To set the DNS server for all Docker containers, use:</source>
          <target state="translated">すべてのDockerコンテナのDNSサーバーを設定するには、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="787329e3a5e2d2cf825f03dff6cf6b63fc53b7f6" translate="yes" xml:space="preserve">
          <source>To set up port redirection on the host system, see &lt;a href=&quot;../run/index#expose-incoming-ports&quot;&gt;using the -P flag&lt;/a&gt;. The &lt;code&gt;docker network&lt;/code&gt; command supports creating networks for communication among containers without the need to expose or publish specific ports, because the containers connected to the network can communicate with each other over any port. For detailed information, see the &lt;a href=&quot;https://docs.docker.com/network&quot;&gt;overview of this feature&lt;/a&gt;).</source>
          <target state="translated">ホストシステムでポートリダイレクションを設定するには&lt;a href=&quot;../run/index#expose-incoming-ports&quot;&gt;、-Pフラグの使用を&lt;/a&gt;参照してください。 &lt;code&gt;docker network&lt;/code&gt; 網に接続された容器は、任意のポートを介して互いに通信することができるので、露出または特定のポートを公開することなくコンテナ間の通信のためのネットワークを作成するコマンドがサポート。詳細&lt;a href=&quot;https://docs.docker.com/network&quot;&gt;については、この機能&lt;/a&gt;の概要を参照してください）。</target>
        </trans-unit>
        <trans-unit id="13c438b7bb4eb69e4450eca40b43c1da7f7f2c04" translate="yes" xml:space="preserve">
          <source>To set your shell to talk to a different machine like &lt;code&gt;myvm2&lt;/code&gt;, simply re-run &lt;code&gt;docker-machine env&lt;/code&gt; in the same or a different shell, then run the given command to point to &lt;code&gt;myvm2&lt;/code&gt;. This is always specific to the current shell. If you change to an unconfigured shell or open a new one, you need to re-run the commands. Use &lt;code&gt;docker-machine ls&lt;/code&gt; to list machines, see what state they are in, get IP addresses, and find out which one, if any, you are connected to. To learn more, see the &lt;a href=&quot;../../machine/get-started/index#create-a-machine&quot;&gt;Docker Machine getting started topics&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;myvm2&lt;/code&gt; のような別のマシンと通信するようにシェルを設定するには、同じシェルまたは別のシェルでdocker &lt;code&gt;docker-machine env&lt;/code&gt; を再実行してから、指定されたコマンドを実行して &lt;code&gt;myvm2&lt;/code&gt; を指すようにします。これは常に現在のシェルに固有です。未構成のシェルに変更したり、新しいシェルを開いたりした場合は、コマンドを再実行する必要があります。 &lt;code&gt;docker-machine ls&lt;/code&gt; を使用して、マシンを一覧表示し、マシンの状態を確認し、IPアドレスを取得し、接続されているマシンがあればそれを見つけます。詳細については、&lt;a href=&quot;../../machine/get-started/index#create-a-machine&quot;&gt;Docker Machineの&lt;/a&gt;入門トピックを参照してください。</target>
        </trans-unit>
        <trans-unit id="d95f0e63413f4f2a57f9f3fc7a41b8fff2c3de04" translate="yes" xml:space="preserve">
          <source>To sign a Docker Image you will need a delegation key pair. These keys can be generated locally using &lt;code&gt;$ docker trust key generate&lt;/code&gt;, generated by a certificate authority, or if you are using Docker Enterprise&amp;rsquo;s Universal Control Plane (UCP), a user&amp;rsquo;s Client Bundle provides adequate keys for a delegation. Find more information on Delegation Keys &lt;a href=&quot;../trust_delegation/index#creating-delegation-keys&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Dockerイメージに署名するには、委任キーのペアが必要です。これらのキーは、 &lt;code&gt;$ docker trust key generate&lt;/code&gt; を使用してローカルに生成でき、認証局によって生成されます。または、Docker EnterpriseのUniversal Control Plane（UCP）を使用している場合、ユーザーのクライアントバンドルは委任に適切なキーを提供します。委任キーの詳細については、&lt;a href=&quot;../trust_delegation/index#creating-delegation-keys&quot;&gt;こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b76f0572de46a8fd7880971b6a93cb3113afea1" translate="yes" xml:space="preserve">
          <source>To source only the &lt;code&gt;docker&lt;/code&gt; endpoint configuration from an existing context use the &lt;code&gt;--docker from=&amp;lt;context-name&amp;gt;&lt;/code&gt; option. The example below creates a new context named &lt;code&gt;my-context&lt;/code&gt; using the docker endpoint configuration from the existing context &lt;code&gt;existing-context&lt;/code&gt; and a kubernetes configuration sourced from the file &lt;code&gt;/home/me/my-kube-config&lt;/code&gt;:</source>
          <target state="translated">ソースのみに &lt;code&gt;docker&lt;/code&gt; 既存のコンテキストからエンドポイント構成を使用 &lt;code&gt;--docker from=&amp;lt;context-name&amp;gt;&lt;/code&gt; オプションを選択します。以下の例では、既存のコンテキスト &lt;code&gt;existing-context&lt;/code&gt; からのdocker エンドポイント構成と、ファイル &lt;code&gt;/home/me/my-kube-config&lt;/code&gt; から取得したkubernetes構成を使用して、 &lt;code&gt;my-context&lt;/code&gt; contextという名前の新しいコンテキストを作成します。</target>
        </trans-unit>
        <trans-unit id="32fd48d34832f360b22ddda4a1de5d9d1db136b2" translate="yes" xml:space="preserve">
          <source>To source only the &lt;code&gt;kubernetes&lt;/code&gt; configuration from an existing context use the &lt;code&gt;--kubernetes from=&amp;lt;context-name&amp;gt;&lt;/code&gt; option. The example below creates a new context named &lt;code&gt;my-context&lt;/code&gt; using the kuberentes configuration from the existing context &lt;code&gt;existing-context&lt;/code&gt; and a docker endpoint of &lt;code&gt;/var/run/docker.sock&lt;/code&gt;:</source>
          <target state="translated">既存のコンテキストから &lt;code&gt;kubernetes&lt;/code&gt; 構成のみを取得するには、 &lt;code&gt;--kubernetes from=&amp;lt;context-name&amp;gt;&lt;/code&gt; オプションを使用します。以下の例では、既存のコンテキスト &lt;code&gt;existing-context&lt;/code&gt; からのkuberentes設定と &lt;code&gt;/var/run/docker.sock&lt;/code&gt; のドッカーエンドポイントを使用して、 &lt;code&gt;my-context&lt;/code&gt; contextという名前の新しいコンテキストを作成します。</target>
        </trans-unit>
        <trans-unit id="f9bd19ce7af971b23f79dd5d36c0dae8dda26b14" translate="yes" xml:space="preserve">
          <source>To specify multiple environment variables, specify multiple &lt;code&gt;--env&lt;/code&gt; flags, each with a separate key-value pair.</source>
          <target state="translated">複数の環境変数を指定するには、複数の &lt;code&gt;--env&lt;/code&gt; フラグを指定し、それぞれに個別のキーと値のペアを指定します。</target>
        </trans-unit>
        <trans-unit id="aa5590a399db05fd9c44bfa3b8ea3f4359554e14" translate="yes" xml:space="preserve">
          <source>To start a container in detached mode, you use &lt;code&gt;-d=true&lt;/code&gt; or just &lt;code&gt;-d&lt;/code&gt; option. By design, containers started in detached mode exit when the root process used to run the container exits, unless you also specify the &lt;code&gt;--rm&lt;/code&gt; option. If you use &lt;code&gt;-d&lt;/code&gt; with &lt;code&gt;--rm&lt;/code&gt;, the container is removed when it exits &lt;strong&gt;or&lt;/strong&gt; when the daemon exits, whichever happens first.</source>
          <target state="translated">コンテナーをデタッチモードで起動するには、 &lt;code&gt;-d=true&lt;/code&gt; または単に &lt;code&gt;-d&lt;/code&gt; オプションを使用します。 &lt;code&gt;--rm&lt;/code&gt; オプションを指定していない限り、コンテナーの実行に使用されたルートプロセスが終了すると、デタッチモードで開始されたコンテナーは意図的に終了します。あなたが使用している場合は &lt;code&gt;-d&lt;/code&gt; で &lt;code&gt;--rm&lt;/code&gt; 、コンテナは、それが終了したときに削除される&lt;strong&gt;か、&lt;/strong&gt;いずれか早い方、ときデーモンは終了します。</target>
        </trans-unit>
        <trans-unit id="29a9c49bb702fdef33af30ac60450dcd6192a87f" translate="yes" xml:space="preserve">
          <source>To start a global service on each available node, pass &lt;code&gt;--mode global&lt;/code&gt; to &lt;code&gt;docker service create&lt;/code&gt;. Every time a new node becomes available, the scheduler places a task for the global service on the new node. For example to start a service that runs alpine on every node in the swarm:</source>
          <target state="translated">利用可能な各ノードでグローバルサービスを開始するには、-- &lt;code&gt;--mode global&lt;/code&gt; を &lt;code&gt;docker service create&lt;/code&gt; に渡します。新しいノードが使用可能になるたびに、スケジューラはグローバルサービスのタスクを新しいノードに配置します。たとえば、スウォームのすべてのノードで高山を実行するサービスを開始するには：</target>
        </trans-unit>
        <trans-unit id="a336a72de729795b1d7896306e5e837f60dbc839" translate="yes" xml:space="preserve">
          <source>To start a normal environment run &lt;code&gt;docker-compose up -d&lt;/code&gt;. To run a database backup, include the &lt;code&gt;docker-compose.admin.yml&lt;/code&gt; as well.</source>
          <target state="translated">通常の環境を開始するには、 &lt;code&gt;docker-compose up -d&lt;/code&gt; を実行します。データベースのバックアップを実行するには、 &lt;code&gt;docker-compose.admin.yml&lt;/code&gt; も含めます。</target>
        </trans-unit>
        <trans-unit id="259f09a8193969099fb3f6f34187b1a763b66341" translate="yes" xml:space="preserve">
          <source>To stop a container, use &lt;code&gt;CTRL-c&lt;/code&gt;. This key sequence sends &lt;code&gt;SIGKILL&lt;/code&gt; to the container. If &lt;code&gt;--sig-proxy&lt;/code&gt; is true (the default),&lt;code&gt;CTRL-c&lt;/code&gt; sends a &lt;code&gt;SIGINT&lt;/code&gt; to the container. If the container was run with &lt;code&gt;-i&lt;/code&gt; and &lt;code&gt;-t&lt;/code&gt;, you can detach from a container and leave it running using the &lt;code&gt;CTRL-p CTRL-q&lt;/code&gt; key sequence.</source>
          <target state="translated">コンテナを停止するには、 &lt;code&gt;CTRL-c&lt;/code&gt; を使用します。このキーシーケンスは、 &lt;code&gt;SIGKILL&lt;/code&gt; をコンテナーに送信します。場合 &lt;code&gt;--sig-proxy&lt;/code&gt; true（デフォルト）で、 &lt;code&gt;CTRL-c&lt;/code&gt; 送信 &lt;code&gt;SIGINT&lt;/code&gt; をコンテナに。コンテナーが &lt;code&gt;-i&lt;/code&gt; および &lt;code&gt;-t&lt;/code&gt; で実行された場合、コンテナーから切り離して、 &lt;code&gt;CTRL-p CTRL-q&lt;/code&gt; キーシーケンスを使用してコンテナーを実行したままにすることができます。</target>
        </trans-unit>
        <trans-unit id="4b85dc1bc1ecd3f08eac00f5db26cf3f0b0489ff" translate="yes" xml:space="preserve">
          <source>To stop the application, run &lt;a href=&quot;../reference/down/index&quot;&gt;docker-compose down&lt;/a&gt; in your project directory. You can use the same terminal window in which you started the database, or another one where you have access to a command prompt. This is a clean way to stop the application.</source>
          <target state="translated">アプリケーションを停止&lt;a href=&quot;../reference/down/index&quot;&gt;するに&lt;/a&gt;は、プロジェクトディレクトリでdocker-compose downを実行します。データベースを起動したのと同じターミナルウィンドウ、またはコマンドプロンプトにアクセスできる別のターミナルウィンドウを使用できます。これは、アプリケーションを停止するクリーンな方法です。</target>
        </trans-unit>
        <trans-unit id="abed9702df3b1e0206c37a0e923cfce7295767a2" translate="yes" xml:space="preserve">
          <source>To support things like key rotation and expiring / retiring keys you can publish multiple contributor keys per delegation. The only prerequisite here is to make sure you use the same the delegation name, in this case &lt;code&gt;jeff&lt;/code&gt;. Docker trust will automatically handle adding this new key to &lt;code&gt;targets/releases&lt;/code&gt;.</source>
          <target state="translated">キーのローテーションやキーの期限切れ/廃止などをサポートするために、委任ごとに複数のコントリビューターキーを公開できます。ここでの唯一の前提条件は、同じ委任名、この場合は &lt;code&gt;jeff&lt;/code&gt; を使用することです。Dockerトラストは、この新しいキーを &lt;code&gt;targets/releases&lt;/code&gt; 追加することを自動的に処理します。</target>
        </trans-unit>
        <trans-unit id="3facf0781a8b98dfc53491f3d017724c39504571" translate="yes" xml:space="preserve">
          <source>To tag a local image with ID &amp;ldquo;0e5574283393&amp;rdquo; into the &amp;ldquo;fedora&amp;rdquo; repository with &amp;ldquo;version1.0&amp;rdquo;:</source>
          <target state="translated">ID「0e5574283393」のローカルイメージに、「version1.0」を使用して「fedora」リポジトリにタグ付けするには：</target>
        </trans-unit>
        <trans-unit id="b755e725e9ffe69bea5b6bb0ba0a3f9ed8815f93" translate="yes" xml:space="preserve">
          <source>To tag a local image with name &amp;ldquo;httpd&amp;rdquo; and tag &amp;ldquo;test&amp;rdquo; into the &amp;ldquo;fedora&amp;rdquo; repository with &amp;ldquo;version1.0.test&amp;rdquo;:</source>
          <target state="translated">「httpd」という名前のローカルイメージにタグを付け、「test」を「version1.0.test」で「fedora」リポジトリにタグ付けするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="289cba92532c8e642747a2302f3565925351b95c" translate="yes" xml:space="preserve">
          <source>To tag a local image with name &amp;ldquo;httpd&amp;rdquo; into the &amp;ldquo;fedora&amp;rdquo; repository with &amp;ldquo;version1.0&amp;rdquo;:</source>
          <target state="translated">「httpd」という名前のローカルイメージを「version1.0」を使用して「fedora」リポジトリにタグ付けするには：</target>
        </trans-unit>
        <trans-unit id="0ab0df6e7f368ac1e8e9d50140140c9344fe16fe" translate="yes" xml:space="preserve">
          <source>To tag the image into multiple repositories after the build, add multiple &lt;code&gt;-t&lt;/code&gt; parameters when you run the &lt;code&gt;build&lt;/code&gt; command:</source>
          <target state="translated">ビルド後にイメージを複数のリポジトリにタグ付けするには、 &lt;code&gt;build&lt;/code&gt; コマンドを実行するときに複数の &lt;code&gt;-t&lt;/code&gt; パラメータを追加します。</target>
        </trans-unit>
        <trans-unit id="242d56953a629ab2d6376d003ffafa6b5aa75624" translate="yes" xml:space="preserve">
          <source>To take advantage of swarm mode&amp;rsquo;s fault-tolerance features, Docker recommends you implement an odd number of nodes according to your organization&amp;rsquo;s high-availability requirements. When you have multiple managers you can recover from the failure of a manager node without downtime.</source>
          <target state="translated">スウォームモードのフォールトトレランス機能を利用するには、組織の高可用性要件に応じて奇数のノードを実装することをお勧めします。複数のマネージャーがある場合、ダウンタイムなしでマネージャーノードの障害から回復できます。</target>
        </trans-unit>
        <trans-unit id="f957db5215096f98ff2a417c0e583573485f5864" translate="yes" xml:space="preserve">
          <source>To talk about the project with people in real time, join the &lt;code&gt;#docker-machine&lt;/code&gt; channel on IRC.</source>
          <target state="translated">プロジェクトについてリアルタイムで人々と話すには、IRCの &lt;code&gt;#docker-machine&lt;/code&gt; チャネルに参加してください。</target>
        </trans-unit>
        <trans-unit id="55b10cd74ab21402bc34507beef8ff2cd9dccdb0" translate="yes" xml:space="preserve">
          <source>To talk about the project with people in real time: join the &lt;code&gt;#docker-compose&lt;/code&gt; channel on freenode IRC.</source>
          <target state="translated">プロジェクトについてリアルタイムで人々と話すには：freenode IRCの &lt;code&gt;#docker-compose&lt;/code&gt; チャネルに参加してください。</target>
        </trans-unit>
        <trans-unit id="7b997c591250d0b2a1c6129b215a071efc71730e" translate="yes" xml:space="preserve">
          <source>To the consumer who has not enabled DCT, nothing about how they work with Docker images changes. Every image is visible regardless of whether it is signed or not.</source>
          <target state="translated">DCTを有効にしていない消費者にとっては、Dockerイメージでの作業方法は何も変わりません。すべてのイメージは、署名されているかどうかに関係なく表示されます。</target>
        </trans-unit>
        <trans-unit id="29924dcf069352443d66775fa05e11dbabb805fd" translate="yes" xml:space="preserve">
          <source>To uninstall Docker Compose if you installed using &lt;code&gt;curl&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;curl&lt;/code&gt; を使用してインストールした場合にDocker Composeをアンインストールするには：</target>
        </trans-unit>
        <trans-unit id="6f4b50a565b371bd8fd3ec37d37b90afa716ff63" translate="yes" xml:space="preserve">
          <source>To uninstall Docker Compose if you installed using &lt;code&gt;pip&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;pip&lt;/code&gt; を使用してインストールした場合にDocker Composeをアンインストールするには：</target>
        </trans-unit>
        <trans-unit id="6943461b099aa1d71f5c7c513425d8ea2f688c78" translate="yes" xml:space="preserve">
          <source>To uninstall Docker Machine:</source>
          <target state="translated">Docker Machineをアンインストールするには</target>
        </trans-unit>
        <trans-unit id="2854b06be4aed6447229aaf67c350ce1bda902d7" translate="yes" xml:space="preserve">
          <source>To unload a profile from AppArmor:</source>
          <target state="translated">AppArmorからプロファイルをアンロードするには。</target>
        </trans-unit>
        <trans-unit id="5a704d4ddd95fcb6dfcd1d9c51aa0604ef191ecc" translate="yes" xml:space="preserve">
          <source>To unlock a locked swarm, use &lt;code&gt;docker swarm unlock&lt;/code&gt;.</source>
          <target state="translated">ロックされたスウォームのロックを解除するには、 &lt;code&gt;docker swarm unlock&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="70f868582407676852d7aeb6c195a52fdef91c5f" translate="yes" xml:space="preserve">
          <source>To unmount the directory again, you can use the same options but the &lt;code&gt;-u&lt;/code&gt; flag. You can also call &lt;code&gt;fuserunmount&lt;/code&gt; (or &lt;code&gt;fusermount -u&lt;/code&gt;) commands directly.</source>
          <target state="translated">ディレクトリを再度マウント解除するには、同じオプションを使用して &lt;code&gt;-u&lt;/code&gt; フラグを使用できます。 &lt;code&gt;fuserunmount&lt;/code&gt; （または &lt;code&gt;fusermount -u&lt;/code&gt; ）コマンドを直接呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="34d085e9c943a535c8ac6f30c0905e78322e1c46" translate="yes" xml:space="preserve">
          <source>To update a stack, make changes to your Compose file, then re-run &lt;code&gt;docker stack deploy -c &amp;lt;new-compose-file&amp;gt; &amp;lt;stack-name&amp;gt;&lt;/code&gt;. If you use a new config in that file, your services start using them. Keep in mind that configurations are immutable, so you can&amp;rsquo;t change the file for an existing service. Instead, you create a new config to use a different file</source>
          <target state="translated">スタックを更新するには、Composeファイルに変更を加えてから、 &lt;code&gt;docker stack deploy -c &amp;lt;new-compose-file&amp;gt; &amp;lt;stack-name&amp;gt;&lt;/code&gt; 再実行します。そのファイルで新しい設定を使用すると、サービスはそれらの使用を開始します。構成は不変であるため、既存のサービスのファイルを変更することはできません。代わりに、別のファイルを使用する新しい構成を作成します</target>
        </trans-unit>
        <trans-unit id="cd41731a8c8abf8e8dd9d1aaa9fa7a9aa974b539" translate="yes" xml:space="preserve">
          <source>To update multiple resource configurations for multiple containers:</source>
          <target state="translated">複数のコンテナの複数のリソース構成を更新するには</target>
        </trans-unit>
        <trans-unit id="ae67f042db449ff528c8e8d4766bddaef9fc88d2" translate="yes" xml:space="preserve">
          <source>To update or roll back configs more easily, consider adding a version number or date to the config name. This is made easier by the ability to control the mount point of the config within a given container.</source>
          <target state="translated">設定の更新やロールバックをより簡単に行うには、設定名にバージョン番号や日付を追加することを検討してください。これは、与えられたコンテナ内のコンフィグのマウントポイントを制御する機能によってより簡単になります。</target>
        </trans-unit>
        <trans-unit id="25e84cef4c7e742fd2183378187a6f04e11c2e3f" translate="yes" xml:space="preserve">
          <source>To update or roll back secrets more easily, consider adding a version number or date to the secret name. This is made easier by the ability to control the mount point of the secret within a given container.</source>
          <target state="translated">シークレットの更新やロールバックをより簡単に行うには、シークレット名にバージョン番号や日付を追加することを検討してください。これは、与えられたコンテナ内のシークレットのマウントポイントを制御する機能によってより簡単になります。</target>
        </trans-unit>
        <trans-unit id="4e37f269c0d67f3c7667ad8d77d8420a5dd0ccaf" translate="yes" xml:space="preserve">
          <source>To update restart policy for one or more containers:</source>
          <target state="translated">1つまたは複数のコンテナの再起動ポリシーを更新するには</target>
        </trans-unit>
        <trans-unit id="03a661d880cb9d779a7d092bfd0547b087490326" translate="yes" xml:space="preserve">
          <source>To update the command an existing service runs, you can use the &lt;code&gt;--args&lt;/code&gt; flag. The following example updates an existing service called &lt;code&gt;helloworld&lt;/code&gt; so that it runs the command &lt;code&gt;ping docker.com&lt;/code&gt; instead of whatever command it was running before:</source>
          <target state="translated">既存のサービスが実行するコマンドを更新するには、 &lt;code&gt;--args&lt;/code&gt; フラグを使用できます。次の例では、 &lt;code&gt;helloworld&lt;/code&gt; という既存のサービスを更新して、以前に実行されていたコマンドではなく、コマンド &lt;code&gt;ping docker.com&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="78316bb0a73f4a4c64c48899091eaea66798c1b3" translate="yes" xml:space="preserve">
          <source>To upload the first key to a delegation, at the same time initiating a repository, you can use the &lt;code&gt;$ docker trust signer add&lt;/code&gt; command. This will add the contributor&amp;rsquo;s public key to the &lt;code&gt;targets/releases&lt;/code&gt; delegation, and create a second &lt;code&gt;targets/&amp;lt;name&amp;gt;&lt;/code&gt; delegation.</source>
          <target state="translated">最初のキーを委任にアップロードすると同時にリポジトリを開始するには、 &lt;code&gt;$ docker trust signer add&lt;/code&gt; コマンドを使用できます。これにより、寄稿者の公開鍵が &lt;code&gt;targets/releases&lt;/code&gt; 委任に追加され、2番目の &lt;code&gt;targets/&amp;lt;name&amp;gt;&lt;/code&gt; 委任が作成されます。</target>
        </trans-unit>
        <trans-unit id="a84837e4b12f31be713e52adca55886b6229349d" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;--gpus&lt;/code&gt;, specify which GPUs (or all) to use. If no value is provied, all available GPUs are used. The example below exposes all available GPUs.</source>
          <target state="translated">&lt;code&gt;--gpus&lt;/code&gt; を使用するには、使用するGPU（またはすべて）を指定します。値が提供されない場合は、使用可能なすべてのGPUが使用されます。以下の例は、使用可能なすべてのGPUを公開しています。</target>
        </trans-unit>
        <trans-unit id="cd864fd0bcb6424e05b48aebf17840a45692edab" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;curl&lt;/code&gt; to make test API requests, you need to use three extra command line flags:</source>
          <target state="translated">&lt;code&gt;curl&lt;/code&gt; を使用してテストAPIリクエストを行うには、3つの追加のコマンドラインフラグを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7df31040cebc98b4698b2f7f0600fb045c9ccd30" translate="yes" xml:space="preserve">
          <source>To use Docker in swarm mode, install Docker. See &lt;a href=&quot;https://docs.docker.com/install/&quot;&gt;installation instructions&lt;/a&gt; for all operating systems and platforms.</source>
          <target state="translated">Dockerをスウォームモードで使用するには、Dockerをインストールします。すべてのオペレーティングシステムとプラットフォームの&lt;a href=&quot;https://docs.docker.com/install/&quot;&gt;インストール手順&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b6c07e474152eec3e16bf0164d37ff958230df00" translate="yes" xml:space="preserve">
          <source>To use SSH connection, you need to set up &lt;code&gt;ssh&lt;/code&gt; so that it can reach the remote host with public key authentication. Password authentication is not supported. If your key is protected with passphrase, you need to set up &lt;code&gt;ssh-agent&lt;/code&gt;.</source>
          <target state="translated">SSH接続を使用するには、公開鍵認証でリモートホストに到達できるように &lt;code&gt;ssh&lt;/code&gt; を設定する必要があります。パスワード認証はサポートされていません。キーがパスフレーズで保護されている場合は、 &lt;code&gt;ssh-agent&lt;/code&gt; を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="697d0fe900452fc31d1750d4f9811305ae0cd088" translate="yes" xml:space="preserve">
          <source>To use a Config as a credential spec, create a Docker Config in a credential spec file named &lt;code&gt;credpspec.json&lt;/code&gt;. You can specify any name for the name of the &lt;code&gt;config&lt;/code&gt;.</source>
          <target state="translated">構成を資格情報仕様として使用するには、 &lt;code&gt;credpspec.json&lt;/code&gt; という名前の資格情報仕様ファイルにDocker構成を作成します。 &lt;code&gt;config&lt;/code&gt; の名前には任意の名前を指定できます。</target>
        </trans-unit>
        <trans-unit id="5a79b79e31ffb7461580a2f5b28f149dc2889d64" translate="yes" xml:space="preserve">
          <source>To use a Config as a credential spec, first create the Docker Config containing the credential spec:</source>
          <target state="translated">コンフィグをクレデンシャルスペックとして使用するには、まずクレデンシャルスペックを含むDocker Configを作成します。</target>
        </trans-unit>
        <trans-unit id="5cd6f7259501745cf822fda1672ba5ec0994ff96" translate="yes" xml:space="preserve">
          <source>To use a credentials store, you need an external helper program to interact with a specific keychain or external store. Docker requires the helper program to be in the client&amp;rsquo;s host &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">資格情報ストアを使用するには、特定のキーチェーンまたは外部ストアと対話するための外部ヘルパープログラムが必要です。Dockerでは、ヘルパープログラムがクライアントのホスト &lt;code&gt;$PATH&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="41516660fda8fda0863b83253c5162ba95af5d8b" translate="yes" xml:space="preserve">
          <source>To use a different base operating system on a remote provider, specify the provider&amp;rsquo;s image flag and one of its available images. For example, to select a &lt;code&gt;debian-8-x64&lt;/code&gt; image on DigitalOcean you would supply the &lt;code&gt;--digitalocean-image=debian-8-x64&lt;/code&gt; flag.</source>
          <target state="translated">リモートプロバイダーで別の基本オペレーティングシステムを使用するには、プロバイダーのイメージフラグと使用可能なイメージの1つを指定します。たとえば、DigitalOceanで &lt;code&gt;debian-8-x64&lt;/code&gt; イメージを選択するには、 &lt;code&gt;--digitalocean-image=debian-8-x64&lt;/code&gt; フラグを指定します。</target>
        </trans-unit>
        <trans-unit id="2d4925a8e40dc110db13004e48506a6f21a0b710" translate="yes" xml:space="preserve">
          <source>To use a file in the build context, the &lt;code&gt;Dockerfile&lt;/code&gt; refers to the file specified in an instruction, for example, a &lt;code&gt;COPY&lt;/code&gt; instruction. To increase the build&amp;rsquo;s performance, exclude files and directories by adding a &lt;code&gt;.dockerignore&lt;/code&gt; file to the context directory. For information about how to &lt;a href=&quot;#dockerignore-file&quot;&gt;create a &lt;code&gt;.dockerignore&lt;/code&gt; file&lt;/a&gt; see the documentation on this page.</source>
          <target state="translated">ビルドコンテキストでファイルを使用するために、 &lt;code&gt;Dockerfile&lt;/code&gt; は、 &lt;code&gt;COPY&lt;/code&gt; 命令などの命令で指定されたファイルを参照します。ビルドのパフォーマンスを向上させるには、 &lt;code&gt;.dockerignore&lt;/code&gt; ファイルをコンテキストディレクトリに追加して、ファイルとディレクトリを除外します。&lt;a href=&quot;#dockerignore-file&quot;&gt; &lt;code&gt;.dockerignore&lt;/code&gt; &lt;/a&gt;ファイルの作成方法については、このページのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="51a0dd1058ec1bb95a38582fa2ba084a5db58cf3" translate="yes" xml:space="preserve">
          <source>To use an external load balancer without the routing mesh, set &lt;code&gt;--endpoint-mode&lt;/code&gt; to &lt;code&gt;dnsrr&lt;/code&gt; instead of the default value of &lt;code&gt;vip&lt;/code&gt;. In this case, there is not a single virtual IP. Instead, Docker sets up DNS entries for the service such that a DNS query for the service name returns a list of IP addresses, and the client connects directly to one of these. You are responsible for providing the list of IP addresses and ports to your load balancer. See &lt;a href=&quot;https://docs.docker.com/network#configure-service-discovery&quot;&gt;Configure service discovery&lt;/a&gt;.</source>
          <target state="translated">ルーティングメッシュなしで外部ロードバランサーを使用するには、 &lt;code&gt;--endpoint-mode&lt;/code&gt; をデフォルト値の &lt;code&gt;vip&lt;/code&gt; ではなく &lt;code&gt;dnsrr&lt;/code&gt; に設定します。この場合、単一の仮想IPはありません。代わりに、DockerはサービスのDNSエントリを設定して、サービス名のDNSクエリがIPアドレスのリストを返し、クライアントがこれらのいずれかに直接接続するようにします。ロードバランサーにIPアドレスとポートのリストを提供する必要があります。&lt;a href=&quot;https://docs.docker.com/network#configure-service-discovery&quot;&gt;サービス検出の構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="16c1a5e6e10aea4df2671f8721a2614b0ea9b8a0" translate="yes" xml:space="preserve">
          <source>To use existing data volumes with a service use the &lt;code&gt;--mount&lt;/code&gt; flag:</source>
          <target state="translated">サービスで既存のデータボリュームを使用するには、 &lt;code&gt;--mount&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="18c033a152d8ac2584c8acdb48b2152af43e1404" translate="yes" xml:space="preserve">
          <source>To use multiple override files, or an override file with a different name, you can use the &lt;code&gt;-f&lt;/code&gt; option to specify the list of files. Compose merges files in the order they&amp;rsquo;re specified on the command line. See the &lt;a href=&quot;../reference/overview/index&quot;&gt;&lt;code&gt;docker-compose&lt;/code&gt; command reference&lt;/a&gt; for more information about using &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="translated">複数のオーバーライドファイル、または異なる名前のオーバーライドファイルを使用するには、 &lt;code&gt;-f&lt;/code&gt; オプションを使用してファイルのリストを指定できます。Composeは、コマンドラインで指定された順序でファイルをマージします。 &lt;code&gt;-f&lt;/code&gt; の使用の詳細については、&lt;a href=&quot;../reference/overview/index&quot;&gt; &lt;code&gt;docker-compose&lt;/code&gt; コマンドリファレンス&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="19766773eada5693600fd875bb8b4878ae945368" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;targets/releases&lt;/code&gt; role for pushing and pulling images with content trust, follow the steps above to add and publish the delegation role with notary. When adding the delegation, the &lt;code&gt;--all-paths&lt;/code&gt; flag should be used to allow signing all tags.</source>
          <target state="translated">コンテンツの信頼でイメージをプッシュおよびプルするために &lt;code&gt;targets/releases&lt;/code&gt; ロールを使用するには、上記の手順に従って、公証人を使用して委任ロールを追加および公開します。委任を追加する場合、 &lt;code&gt;--all-paths&lt;/code&gt; フラグを使用してすべてのタグに署名できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="7ac5ba0cdad5e4b14a0044009b112040d6d823c3" translate="yes" xml:space="preserve">
          <source>To use the BuildKit backend, you need to set an environment variable &lt;code&gt;DOCKER_BUILDKIT=1&lt;/code&gt; on the CLI before invoking &lt;code&gt;docker build&lt;/code&gt;.</source>
          <target state="translated">BuildKitバックエンドを使用するには、docker &lt;code&gt;docker build&lt;/code&gt; を呼び出す前に、CLIで環境変数 &lt;code&gt;DOCKER_BUILDKIT=1&lt;/code&gt; を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f8d4c75e01dd5a0eac6711c933f5e434ef75758" translate="yes" xml:space="preserve">
          <source>To use the ingress network in the swarm, you need to have the following ports open between the swarm nodes before you enable swarm mode:</source>
          <target state="translated">スウォームでイングレスネットワークを使用するには、スウォームモードを有効にする前に、スウォームノード間で以下のポートを開いておく必要があります。</target>
        </trans-unit>
        <trans-unit id="e81fbd5d064c4c4620b6198de045f19d5408a962" translate="yes" xml:space="preserve">
          <source>To use these, simply pass them on the command line using the flag:</source>
          <target state="translated">これらを使用するには、コマンドラインでフラグを使用して渡すだけです。</target>
        </trans-unit>
        <trans-unit id="2247bab194e9cbd16fe47f7c294f7bd9de12b193" translate="yes" xml:space="preserve">
          <source>To verify if the plugin API socket that the docker daemon communicates with is responsive, use curl. In this example, we will make API calls from the docker host to volume and network plugins using curl 7.47.0 to ensure that the plugin is listening on the said socket. For a well functioning plugin, these basic requests should work. Note that plugin sockets are available on the host under &lt;code&gt;/var/run/docker/plugins/&amp;lt;pluginID&amp;gt;&lt;/code&gt;</source>
          <target state="translated">dockerデーモンが通信するプラグインAPIソケットが応答するかどうかを確認するには、curlを使用します。この例では、curl 7.47.0を使用してdockerホストからボリュームプラグインとネットワークプラグインにAPI呼び出しを行い、プラグインが上記のソケットで確実にリッスンするようにします。適切に機能するプラグインの場合、これらの基本的なリクエストは機能するはずです。プラグインソケットは、ホストの &lt;code&gt;/var/run/docker/plugins/&amp;lt;pluginID&amp;gt;&lt;/code&gt; の下にあります。</target>
        </trans-unit>
        <trans-unit id="7e16b005af40c9b6ebd32012889a37e33ea032c3" translate="yes" xml:space="preserve">
          <source>To verify that it worked, use &lt;code&gt;docker service ls&lt;/code&gt;:</source>
          <target state="translated">動作を確認するには、 &lt;code&gt;docker service ls&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bb6cdc1945807eea6b60e885a06bac6eaeb8014f" translate="yes" xml:space="preserve">
          <source>To verify the container is connected, use the &lt;code&gt;docker network inspect&lt;/code&gt; command. Use &lt;code&gt;docker network disconnect&lt;/code&gt; to remove a container from the network.</source>
          <target state="translated">コンテナーが接続されていることを確認するには、 &lt;code&gt;docker network inspect&lt;/code&gt; コマンドを使用します。 &lt;code&gt;docker network disconnect&lt;/code&gt; を使用して、ネットワークからコンテナーを削除します。</target>
        </trans-unit>
        <trans-unit id="a91fa02704619dc5e2d119cfaae045c004bb098a" translate="yes" xml:space="preserve">
          <source>To verify this, use the &lt;code&gt;id&lt;/code&gt; command:</source>
          <target state="translated">これを確認するには、 &lt;code&gt;id&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="277b6d1adbc64ac406df43983c8c384cae01658e" translate="yes" xml:space="preserve">
          <source>To view a list of nodes in the swarm run &lt;code&gt;docker node ls&lt;/code&gt; from a manager node:</source>
          <target state="translated">swarmでノードのリストを表示するには、マネージャーノードから &lt;code&gt;docker node ls&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="65c584d4bfb2d2116adcd95ba8e4f2046078a29e" translate="yes" xml:space="preserve">
          <source>To view all tasks of a stack, you can run &lt;code&gt;docker stack ps&lt;/code&gt; followed by your app name, as shown in the following example:</source>
          <target state="translated">スタックのすべてのタスクを表示するには、次の例に示すように、 &lt;code&gt;docker stack ps&lt;/code&gt; に続けてアプリ名を実行します。</target>
        </trans-unit>
        <trans-unit id="3ef6c9f67135a7aedfb4a52655075fa4e8fd8606" translate="yes" xml:space="preserve">
          <source>To view an image&amp;rsquo;s labels, use the &lt;code&gt;docker inspect&lt;/code&gt; command.</source>
          <target state="translated">画像のラベルを表示するには、 &lt;code&gt;docker inspect&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="bc138732c9a55323b730c8adb709c89a330ee570" translate="yes" xml:space="preserve">
          <source>To view the &lt;code&gt;udev&lt;/code&gt; sync support of a Docker daemon that is using the &lt;code&gt;devicemapper&lt;/code&gt; driver, run:</source>
          <target state="translated">&lt;code&gt;devicemapper&lt;/code&gt; ドライバーを使用しているDockerデーモンの &lt;code&gt;udev&lt;/code&gt; 同期サポートを表示するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="512c831a5a7b126dcfbc76c5dbc9404fb37f6e88" translate="yes" xml:space="preserve">
          <source>To view the join command and token for manager nodes, run:</source>
          <target state="translated">マネージャノードのjoinコマンドとトークンを表示するには、実行します。</target>
        </trans-unit>
        <trans-unit id="33a8b9ccb9a255df98f9287be3b8a8200246285b" translate="yes" xml:space="preserve">
          <source>To work around this, use &lt;a href=&quot;index#manual-scheduling&quot;&gt;manual scheduling&lt;/a&gt; to ensure that all three services end up on the same node:</source>
          <target state="translated">これを回避するには、&lt;a href=&quot;index#manual-scheduling&quot;&gt;手動スケジューリング&lt;/a&gt;を使用して、3つのサービスすべてが同じノードに確実に到達するようにします。</target>
        </trans-unit>
        <trans-unit id="f91e3e738b0dafce0e1e876e824979a3dd71e9d1" translate="yes" xml:space="preserve">
          <source>Together they are equivalent to this single line:</source>
          <target state="translated">それらを合わせると、この一本の線に相当します。</target>
        </trans-unit>
        <trans-unit id="a7cd3a25d051cdce727b34b10a47c3b707e155b6" translate="yes" xml:space="preserve">
          <source>Together, these features provide a convenient way for developers to get started on a project. Compose can reduce a multi-page &amp;ldquo;developer getting started guide&amp;rdquo; to a single machine readable Compose file and a few commands.</source>
          <target state="translated">これらの機能を組み合わせることで、開発者はプロジェクトを開始するための便利な方法を提供します。Composeを使用すると、複数ページの「開発者向けスタートガイド」を、機械で読み取り可能な単一のComposeファイルといくつかのコマンドに減らすことができます。</target>
        </trans-unit>
        <trans-unit id="8882ea28c47adb11578fc3fd3c6d77e3a0bdae38" translate="yes" xml:space="preserve">
          <source>Together, this is creating a &amp;ldquo;source of truth&amp;rdquo; in your host&amp;rsquo;s physical filesystem for the Redis data. Without this, Redis would store its data in &lt;code&gt;/data&lt;/code&gt; inside the container&amp;rsquo;s filesystem, which would get wiped out if that container were ever redeployed.</source>
          <target state="translated">これにより、ホストの物理ファイルシステムにRedisデータの「真実のソース」が作成されます。これがないと、Redisはコンテナーのファイルシステム内の &lt;code&gt;/data&lt;/code&gt; にデータを保存し、そのコンテナーが再デプロイされた場合は消去されます。</target>
        </trans-unit>
        <trans-unit id="f9898585f16b12c9c8f9ee4c1c08a28eb30455a9" translate="yes" xml:space="preserve">
          <source>Token for entry into the swarm</source>
          <target state="translated">群に入るためのトークン</target>
        </trans-unit>
        <trans-unit id="fda6d35e476c7f065b402643e5d3401c4b4784a4" translate="yes" xml:space="preserve">
          <source>Top-level &lt;code&gt;networks&lt;/code&gt; key</source>
          <target state="translated">トップレベル &lt;code&gt;networks&lt;/code&gt; キー</target>
        </trans-unit>
        <trans-unit id="bbb6b3fdac488f701678e0a9fcfcf5ac56d98904" translate="yes" xml:space="preserve">
          <source>Top-level network properties in NetworkSettings</source>
          <target state="translated">NetworkSettings のトップレベルのネットワーク プロパティ</target>
        </trans-unit>
        <trans-unit id="2e143737c371c503be5604081cb15d6717df4e3d" translate="yes" xml:space="preserve">
          <source>Total memory limit (memory + swap, format: &lt;code&gt;&amp;lt;number&amp;gt;[&amp;lt;unit&amp;gt;]&lt;/code&gt;). Number is a positive integer. Unit can be one of &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, or &lt;code&gt;g&lt;/code&gt;.</source>
          <target state="translated">合計メモリ制限（メモリ+スワップ、形式： &lt;code&gt;&amp;lt;number&amp;gt;[&amp;lt;unit&amp;gt;]&lt;/code&gt; ）。数値は正の整数です。単位は &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;k&lt;/code&gt; 、 &lt;code&gt;m&lt;/code&gt; 、または &lt;code&gt;g&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="7c43a41c9d3d9609270761bdbf57207ae8a0316f" translate="yes" xml:space="preserve">
          <source>Trace arbitrary processes using ptrace(2).</source>
          <target state="translated">ptrace(2)を用いて任意のプロセスをトレース。</target>
        </trans-unit>
        <trans-unit id="51250637921eae59caf583fac0804fd1496b53da" translate="yes" xml:space="preserve">
          <source>Tracing/profiling syscall, which could leak a lot of information on the host.</source>
          <target state="translated">ホストの多くの情報を漏らす可能性のあるsyscallのトレース/プロファイリング。</target>
        </trans-unit>
        <trans-unit id="4174302f4890a1ab873787038dad71c2dcbf251c" translate="yes" xml:space="preserve">
          <source>Tracing/profiling syscall, which could leak a lot of information on the host. Already blocked by dropping &lt;code&gt;CAP_PTRACE&lt;/code&gt;.</source>
          <target state="translated">ホスト上の多くの情報をリークする可能性のあるsyscallのトレース/プロファイリング。 &lt;code&gt;CAP_PTRACE&lt;/code&gt; を削除することにより、すでにブロックされています。</target>
        </trans-unit>
        <trans-unit id="76948d9d830d9b43fd1be107c6fc4a890221969b" translate="yes" xml:space="preserve">
          <source>Tracing/profiling syscall, which could leak a lot of information on the host. Also gated by &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt;.</source>
          <target state="translated">ホスト上の多くの情報をリークする可能性のあるsyscallのトレース/プロファイリング。 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; によってもゲートされます。</target>
        </trans-unit>
        <trans-unit id="dd37a05a50f56ad511258641bf48584a2a094e64" translate="yes" xml:space="preserve">
          <source>Traditionally, the &lt;code&gt;Dockerfile&lt;/code&gt; is called &lt;code&gt;Dockerfile&lt;/code&gt; and located in the root of the context. You use the &lt;code&gt;-f&lt;/code&gt; flag with &lt;code&gt;docker build&lt;/code&gt; to point to a Dockerfile anywhere in your file system.</source>
          <target state="translated">伝統的に、 &lt;code&gt;Dockerfile&lt;/code&gt; が呼ばれ &lt;code&gt;Dockerfile&lt;/code&gt; とコンテキストのルートにあります。docker &lt;code&gt;docker build&lt;/code&gt; &lt;code&gt;-f&lt;/code&gt; フラグを使用して、ファイルシステム内の任意の場所にあるDockerfileをポイントします。</target>
        </trans-unit>
        <trans-unit id="142994f0ab25fe7bf64612d336663841bb79df68" translate="yes" xml:space="preserve">
          <source>Treated as a comment due to appearing after a builder instruction:</source>
          <target state="translated">ビルダーの指示後に出現したため、コメントとして扱われました。</target>
        </trans-unit>
        <trans-unit id="fb6f87f3d5539d8dad7b5c648924f0adaf8899c2" translate="yes" xml:space="preserve">
          <source>Treated as a comment due to appearing after a comment which is not a parser directive:</source>
          <target state="translated">パーサディレクティブではないコメントの後に出現したため、コメントとして扱われます。</target>
        </trans-unit>
        <trans-unit id="d954468d670a422e9579dcc9f2faa922a47f6c4e" translate="yes" xml:space="preserve">
          <source>Trigger something that will wake up the system.</source>
          <target state="translated">システムを覚醒させる何かをトリガーにします。</target>
        </trans-unit>
        <trans-unit id="85782e5429e735d524a5612c5bf9e55c7fe7ffd8" translate="yes" xml:space="preserve">
          <source>Triggers are cleared from the final image after being executed. In other words they are not inherited by &amp;ldquo;grand-children&amp;rdquo; builds.</source>
          <target state="translated">トリガーは、実行後に最終イメージからクリアされます。言い換えれば、それらは「孫」ビルドに継承されません。</target>
        </trans-unit>
        <trans-unit id="f85e568d56e59ffec134f197a357202501ba1e58" translate="yes" xml:space="preserve">
          <source>Troubleshoot a manager node</source>
          <target state="translated">マネージャノードのトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="4f35ddb9bdcff4ed205ad9cd732eb9d8e3e7df9a" translate="yes" xml:space="preserve">
          <source>Troubleshooting a plugin</source>
          <target state="translated">プラグインのトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="e89fb5edc8cab94c48cf86754cd5eb796a8d38ad" translate="yes" xml:space="preserve">
          <source>Troubleshooting for Linux users</source>
          <target state="translated">Linuxユーザーのためのトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="12b2ee2c68cb0592c73e4fd6365a1fa270ea08e7" translate="yes" xml:space="preserve">
          <source>Troubleshooting tips</source>
          <target state="translated">トラブルシューティングのコツ</target>
        </trans-unit>
        <trans-unit id="75d18469c7d4f5016d8878c26cfde56880ebdec2" translate="yes" xml:space="preserve">
          <source>Trust for an image tag is managed through the use of keys. Docker&amp;rsquo;s content trust makes use of five different types of keys:</source>
          <target state="translated">画像タグの信頼は、キーを使用して管理されます。Dockerのコンテンツ信頼では、5種類のキーを使用します。</target>
        </trans-unit>
        <trans-unit id="c8b69b1ad24d8d41dfd33093ac309e2082697565" translate="yes" xml:space="preserve">
          <source>Trust for an image tag is managed through the use of signing keys. A key set is created when an operation using DCT is first invoked. A key set consists of the following classes of keys:</source>
          <target state="translated">画像タグの信頼性は、署名鍵を用いて管理される。鍵セットは、DCTを使用した操作が最初に呼び出されたときに作成されます。鍵セットは以下のクラスの鍵で構成される。</target>
        </trans-unit>
        <trans-unit id="555c0a1d890244b057c47775cec5ac2d0a69ed16" translate="yes" xml:space="preserve">
          <source>Try out new experimental or third-party features</source>
          <target state="translated">新しい実験的な機能やサードパーティ製の機能を試す</target>
        </trans-unit>
        <trans-unit id="247804d70056c4b6f3c0c5366200b6ebc9209a45" translate="yes" xml:space="preserve">
          <source>Try pulling the image you just pushed:</source>
          <target state="translated">先ほど押した画像を引っ張ってみてください。</target>
        </trans-unit>
        <trans-unit id="5db9bc8c7dd8830a296f090ea75bb3c99007f77d" translate="yes" xml:space="preserve">
          <source>Try removing the config. The removal fails because the &lt;code&gt;redis&lt;/code&gt; service is running and has access to the config.</source>
          <target state="translated">設定を削除してみてください。 &lt;code&gt;redis&lt;/code&gt; サービスが実行されており、構成にアクセスできるため、削除は失敗します。</target>
        </trans-unit>
        <trans-unit id="69f6a3b4f67ca25fe39a6056a00af19d0334b41d" translate="yes" xml:space="preserve">
          <source>Try removing the secret. The removal fails because the &lt;code&gt;redis&lt;/code&gt; service is running and has access to the secret.</source>
          <target state="translated">シークレットを削除してみてください。 &lt;code&gt;redis&lt;/code&gt; サービスが実行中であり、シークレットにアクセスできるため、削除は失敗します。</target>
        </trans-unit>
        <trans-unit id="f0b73cb5511b8e168539fd6f637859677fd07065" translate="yes" xml:space="preserve">
          <source>Try some operations to test the profile.</source>
          <target state="translated">プロファイルをテストするためにいくつかの操作を試してみてください。</target>
        </trans-unit>
        <trans-unit id="d450d80d1e3a54caa8562f025476a3cae687a704" translate="yes" xml:space="preserve">
          <source>Try to run &lt;code&gt;docker exec&lt;/code&gt; on a paused container</source>
          <target state="translated">一時停止したコンテナで &lt;code&gt;docker exec&lt;/code&gt; を実行してみてください</target>
        </trans-unit>
        <trans-unit id="a5270fb17d72f9c4fa8b655ec642296a058da9fd" translate="yes" xml:space="preserve">
          <source>Tune a container&amp;rsquo;s memory swappiness behavior. Accepts an integer between 0 and 100.</source>
          <target state="translated">コンテナのメモリスワップ動作を調整します。0から100までの整数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="8828bcd6e582b63c557581d73b3d8fa9991cafc8" translate="yes" xml:space="preserve">
          <source>Tune container memory swappiness (0 to 100)</source>
          <target state="translated">コンテナのメモリスワップ性を調整(0~100</target>
        </trans-unit>
        <trans-unit id="061454a0b62103964ee4dfd2286eb7ef02eced06" translate="yes" xml:space="preserve">
          <source>Tune container pids limit (set -1 for unlimited)</source>
          <target state="translated">コンテナのPID制限を調整(無制限にするには-1を設定</target>
        </trans-unit>
        <trans-unit id="66817150ccd1c06f941544d4239090323eb6cebd" translate="yes" xml:space="preserve">
          <source>Tune container&amp;rsquo;s OOM preferences (-1000 to 1000)</source>
          <target state="translated">コンテナーのOOM設定を調整する（-1000〜1000）</target>
        </trans-unit>
        <trans-unit id="2888b0a8297f60820dc0b270946c198021483d70" translate="yes" xml:space="preserve">
          <source>Tune host&amp;rsquo;s OOM preferences (-1000 to 1000)</source>
          <target state="translated">ホストのOOM設定を調整する（-1000〜1000）</target>
        </trans-unit>
        <trans-unit id="5758113472d72c5e53139aa1af79ea604c96aeec" translate="yes" xml:space="preserve">
          <source>Tunes a container&amp;rsquo;s PIDs limit. Set to &lt;code&gt;-1&lt;/code&gt; for unlimited PIDs.</source>
          <target state="translated">コンテナーのPID制限を調整します。PIDを無制限にするには、 &lt;code&gt;-1&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="68975c64d1176001b6b884128029ce182a7a5bab" translate="yes" xml:space="preserve">
          <source>Twistlock AuthZ Broker</source>
          <target state="translated">Twistlock AuthZブローカー</target>
        </trans-unit>
        <trans-unit id="f68ec2bdfa7bc65c1c0e09d584e3bdc4395958c5" translate="yes" xml:space="preserve">
          <source>Two nodes with &lt;code&gt;node.labels.datacenter=south&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;node.labels.datacenter=south&lt;/code&gt; の 2つのノード</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="7a324141c1856c41880a998f0c6b02724293b975" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;docker-machine env myvm1&lt;/code&gt;, then copy-paste and run the command provided as the last line of the output to configure your shell to talk to &lt;code&gt;myvm1&lt;/code&gt;, the swarm manager.</source>
          <target state="translated">タイプ &lt;code&gt;docker-machine env myvm1&lt;/code&gt; 、その後に話をあなたのシェルを設定するには、出力の最後の行として提供されるコマンドと実行コピー＆ペースト &lt;code&gt;myvm1&lt;/code&gt; 、群れマネージャを。</target>
        </trans-unit>
        <trans-unit id="8af31b753266c3f94fdd77b967cab7ccd64aa0f2" translate="yes" xml:space="preserve">
          <source>Type the following command.</source>
          <target state="translated">以下のコマンドを入力してください。</target>
        </trans-unit>
        <trans-unit id="c7a1084ca55dc82d68f7839d7b3001119aa50242" translate="yes" xml:space="preserve">
          <source>Types of plugins</source>
          <target state="translated">プラグインの種類</target>
        </trans-unit>
        <trans-unit id="e5b760e1de534a215a9305eaa0ee392d2ac711dc" translate="yes" xml:space="preserve">
          <source>Typical servers run several processes as &lt;code&gt;root&lt;/code&gt;, including the SSH daemon, &lt;code&gt;cron&lt;/code&gt; daemon, logging daemons, kernel modules, network configuration tools, and more. A container is different, because almost all of those tasks are handled by the infrastructure around the container:</source>
          <target state="translated">一般的なサーバーは、SSHデーモン、 &lt;code&gt;cron&lt;/code&gt; デーモン、ロギングデーモン、カーネルモジュール、ネットワーク構成ツールなど、いくつかのプロセスを &lt;code&gt;root&lt;/code&gt; として実行します。これらのタスクのほとんどすべてが、コンテナーの周りのインフラストラクチャーによって処理されるため、コンテナーは異なります。</target>
        </trans-unit>
        <trans-unit id="7a8f20f0649eebee0ccd10407e8b19f207eef072" translate="yes" xml:space="preserve">
          <source>Typically, you want &lt;code&gt;docker-compose up&lt;/code&gt;. Use &lt;code&gt;up&lt;/code&gt; to start or restart all the services defined in a &lt;code&gt;docker-compose.yml&lt;/code&gt;. In the default &amp;ldquo;attached&amp;rdquo; mode, you see all the logs from all the containers. In &amp;ldquo;detached&amp;rdquo; mode (&lt;code&gt;-d&lt;/code&gt;), Compose exits after starting the containers, but the containers continue to run in the background.</source>
          <target state="translated">通常は、 &lt;code&gt;docker-compose up&lt;/code&gt; が必要です。 &lt;code&gt;up&lt;/code&gt; を使用して、 &lt;code&gt;docker-compose.yml&lt;/code&gt; で定義されているすべてのサービスを開始または再起動します。デフォルトの「接続」モードでは、すべてのコンテナのすべてのログが表示されます。「デタッチ」モード（ &lt;code&gt;-d&lt;/code&gt; ）では、コンテナの起動後にComposeが終了しますが、コンテナはバックグラウンドで実行され続けます。</target>
        </trans-unit>
        <trans-unit id="4ac4413362e6edb9a09d840856de196b66b0845d" translate="yes" xml:space="preserve">
          <source>UDP only</source>
          <target state="translated">ユーディーピー専用</target>
        </trans-unit>
        <trans-unit id="528aca941d838b03cc9e51ac57f6c9f6a6081aa7" translate="yes" xml:space="preserve">
          <source>UNIX domain socket files must be located under &lt;code&gt;/run/docker/plugins&lt;/code&gt;, whereas spec files can be located either under &lt;code&gt;/etc/docker/plugins&lt;/code&gt; or &lt;code&gt;/usr/lib/docker/plugins&lt;/code&gt;.</source>
          <target state="translated">UNIXドメインソケットファイルは &lt;code&gt;/run/docker/plugins&lt;/code&gt; の下に配置する必要がありますが、スペックファイルは &lt;code&gt;/etc/docker/plugins&lt;/code&gt; または &lt;code&gt;/usr/lib/docker/plugins&lt;/code&gt; の下に配置できます。</target>
        </trans-unit>
        <trans-unit id="9f5c420a92dc81a7dbff67746a09c96bb42b3890" translate="yes" xml:space="preserve">
          <source>URL of the Notary server: defaults to https://notary.docker.io This configuration option can be overridden with the command line flag `-s` or `--server`.</source>
          <target state="translated">公証人サーバのURL:デフォルトは https://notary.docker.io この設定オプションは、コマンドラインフラグ `-s` または `--server` で上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="6eb0c61201a96afc99cbf180f1c8d93c0a9fd8c8" translate="yes" xml:space="preserve">
          <source>USER</source>
          <target state="translated">USER</target>
        </trans-unit>
        <trans-unit id="3caafa88608dc267452ed9c9127c5a4b614e2611" translate="yes" xml:space="preserve">
          <source>UTS namespace to use</source>
          <target state="translated">使用する UTS 名前空間</target>
        </trans-unit>
        <trans-unit id="fdc814b20077faa4ebb4c003c553df2c32b729a3" translate="yes" xml:space="preserve">
          <source>UTS settings (--uts)</source>
          <target state="translated">UTS の設定 (--uts)</target>
        </trans-unit>
        <trans-unit id="beaefe5e5ab6b21cda39ac220750706fa9007d59" translate="yes" xml:space="preserve">
          <source>UUID long identifier</source>
          <target state="translated">UUID長識別子</target>
        </trans-unit>
        <trans-unit id="9c92c469e079fc875945afbdf288dab4dbcca403" translate="yes" xml:space="preserve">
          <source>UUID short identifier</source>
          <target state="translated">ユーユーアイディーたんまつしきべつし</target>
        </trans-unit>
        <trans-unit id="a1c366cacdc2e4f2ca5e9f514afccf66ad1dfa3e" translate="yes" xml:space="preserve">
          <source>Ubuntu</source>
          <target state="translated">Ubuntu</target>
        </trans-unit>
        <trans-unit id="98594cedef5d84389ed5c8345aded6db78dbd817" translate="yes" xml:space="preserve">
          <source>Ulimit options</source>
          <target state="translated">ユーリミットオプション</target>
        </trans-unit>
        <trans-unit id="94c1aca7e3479b80aa81212fa1f4a739278e467c" translate="yes" xml:space="preserve">
          <source>Under this configuration, when the container consumes memory more than 200M and less than 500M, the next system memory reclaim attempts to shrink container memory below 200M.</source>
          <target state="translated">この構成では、コンテナが200Mを超えて500M未満のメモリを消費すると、次のシステム・メモリ・リクレームはコンテナ・メモリを200M未満に縮小しようとする。</target>
        </trans-unit>
        <trans-unit id="68156e9c82572c9737f1374209dbdd2917854070" translate="yes" xml:space="preserve">
          <source>Understand Machine concepts</source>
          <target state="translated">機械の概念を理解する</target>
        </trans-unit>
        <trans-unit id="cfad7b33be9b969867f4f274f69593e2ffae0e55" translate="yes" xml:space="preserve">
          <source>Understand Notary naming</source>
          <target state="translated">公証人のネーミングを理解する</target>
        </trans-unit>
        <trans-unit id="eefd5394352021efd1442174cb2e58a2887f709d" translate="yes" xml:space="preserve">
          <source>Understand how ARG and FROM interact</source>
          <target state="translated">ARGとFROMの相互作用を理解する</target>
        </trans-unit>
        <trans-unit id="3ba18a112c781bda2f5ec1fa287930537da80134" translate="yes" xml:space="preserve">
          <source>Understand how CMD and ENTRYPOINT interact</source>
          <target state="translated">CMDとENTRYPOINTの相互作用を理解する</target>
        </trans-unit>
        <trans-unit id="850eb5c1f583e912c918d864cb73bd9271821ed2" translate="yes" xml:space="preserve">
          <source>Understand the Notary service architecture</source>
          <target state="translated">公証人サービスのアーキテクチャを理解する</target>
        </trans-unit>
        <trans-unit id="b0792c36f8a441f33f71da2c46564f6a68b6f7fb" translate="yes" xml:space="preserve">
          <source>Understand the architecture of Docker</source>
          <target state="translated">Dockerのアーキテクチャを理解する</target>
        </trans-unit>
        <trans-unit id="1f8573caf7352237035de27f3e732674f596c9c2" translate="yes" xml:space="preserve">
          <source>Understand the configuration</source>
          <target state="translated">構成を理解する</target>
        </trans-unit>
        <trans-unit id="7f0dab32c8420413853fddab57b84579a37fbd57" translate="yes" xml:space="preserve">
          <source>Understand the extends configuration</source>
          <target state="translated">extendsの設定を理解する</target>
        </trans-unit>
        <trans-unit id="aa6c6262804d72724463f19c42852c32b03a38f2" translate="yes" xml:space="preserve">
          <source>Understand the policies</source>
          <target state="translated">方針を理解する</target>
        </trans-unit>
        <trans-unit id="b38cb8c0a663ff8cadfa66c451ab309b8a881180" translate="yes" xml:space="preserve">
          <source>Understanding Swarm clusters</source>
          <target state="translated">スウォームクラスタを理解する</target>
        </trans-unit>
        <trans-unit id="c285e219db19e27a5bb1e415dbaed5934a5d9c95" translate="yes" xml:space="preserve">
          <source>Understanding multiple Compose files</source>
          <target state="translated">複数のComposeファイルを理解する</target>
        </trans-unit>
        <trans-unit id="eb45a9c3025eaa4734a0cffb97226d387103ffbd" translate="yes" xml:space="preserve">
          <source>Uninstallation</source>
          <target state="translated">Uninstallation</target>
        </trans-unit>
        <trans-unit id="99947182c472de1d053eb1b1f89115963dfa4e5f" translate="yes" xml:space="preserve">
          <source>Universal Control Plane (UCP) manages CLI and API access to its clusters through certificates generated in a Client Bundle. These certificates and keys can be used as a delegation key pair. Within each client bundle there is a unique private key (&lt;code&gt;key.pem&lt;/code&gt;) and x509 certificate containing a public key (&lt;code&gt;cert.pem&lt;/code&gt;).</source>
          <target state="translated">Universal Control Plane（UCP）は、クライアントバンドルで生成された証明書を通じて、クラスターへのCLIおよびAPIアクセスを管理します。これらの証明書とキーは、委任キーペアとして使用できます。各クライアントバンドル内には、一意の秘密鍵（ &lt;code&gt;key.pem&lt;/code&gt; ）と公開鍵を含むx509証明書（ &lt;code&gt;cert.pem&lt;/code&gt; ）があります。</target>
        </trans-unit>
        <trans-unit id="9f781434f465ddddaa2cdb43f4d74410034561cd" translate="yes" xml:space="preserve">
          <source>Unless they are already running, this command also starts any linked services.</source>
          <target state="translated">これらのサービスがすでに実行されていない限り、このコマンドはリンクされているサービスも起動します。</target>
        </trans-unit>
        <trans-unit id="2ddab433eff8d8aba3d8eb8155b011c9e7432786" translate="yes" xml:space="preserve">
          <source>Unless you are going to continue to the next example, clean up after running this example by removing the &lt;code&gt;nginx&lt;/code&gt; service and the stored secrets and config.</source>
          <target state="translated">次の例に進むつもりがない限り、この例を実行した後は、 &lt;code&gt;nginx&lt;/code&gt; サービスと保存されているシークレットと構成を削除してクリーンアップしてください。</target>
        </trans-unit>
        <trans-unit id="fbb768e53744c9c6aa8922c365409b24ba12b4c6" translate="yes" xml:space="preserve">
          <source>Unlike an &lt;code&gt;ARG&lt;/code&gt; instruction, &lt;code&gt;ENV&lt;/code&gt; values are always persisted in the built image. Consider a docker build without the &lt;code&gt;--build-arg&lt;/code&gt; flag:</source>
          <target state="translated">&lt;code&gt;ARG&lt;/code&gt; 命令とは異なり、 &lt;code&gt;ENV&lt;/code&gt; 値は常にビルドされたイメージに保持されます。 &lt;code&gt;--build-arg&lt;/code&gt; フラグなしのdockerビルドを考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="7911249df7b67e90adf47d5d386542f0d416550e" translate="yes" xml:space="preserve">
          <source>Unlike constraints, placement preferences are best-effort, and a service does not fail to deploy if no nodes can satisfy the preference. If you specify a placement preference for a service, nodes that match that preference are ranked higher when the swarm managers decide which nodes should run the service tasks. Other factors, such as high availability of the service, also factor into which nodes are scheduled to run service tasks. For example, if you have N nodes with the rack label (and then some others), and your service is configured to run N+1 replicas, the +1 is scheduled on a node that doesn&amp;rsquo;t already have the service on it if there is one, regardless of whether that node has the &lt;code&gt;rack&lt;/code&gt; label or not.</source>
          <target state="translated">制約とは異なり、配置設定はベストエフォート型であり、設定を満たすノードがない場合でもサービスはデプロイに失敗しません。サービスの配置設定を指定すると、Swarm Managerがサービスタスクを実行するノードを決定するときに、その設定に一致するノードが上位にランク付けされます。サービスの高可用性などの他の要素も、サービスタスクを実行するようにスケジュールされているノードの要素です。たとえば、ラックラベルが付いたNノード（およびその他いくつか）があり、サービスがN + 1レプリカを実行するように構成されている場合、+ 1は、サービスがまだないノードでスケジュールされます。そのノードに &lt;code&gt;rack&lt;/code&gt; ラベルがあるかどうかに関係なく、1つあります。</target>
        </trans-unit>
        <trans-unit id="ef4f8dbdf763df9b35547143025feb154e6152cb" translate="yes" xml:space="preserve">
          <source>Unlike the scenario where you were running the swarm on local Docker machine VMs, your swarm and any apps deployed on it continue to run on cloud servers regardless of whether you shut down your local host.</source>
          <target state="translated">ローカルのDockerマシンのVM上でスウォームを実行していたシナリオとは異なり、ローカルホストをシャットダウンするかどうかに関わらず、スウォームとその上にデプロイされたアプリはクラウドサーバー上で実行され続けます。</target>
        </trans-unit>
        <trans-unit id="222eb371016b484671cbe00e3a586b5034cebab7" translate="yes" xml:space="preserve">
          <source>Unlock a swarm</source>
          <target state="translated">群れのロックを解除</target>
        </trans-unit>
        <trans-unit id="a0380c68842341d152e08c4fc64484a09b10ec6c" translate="yes" xml:space="preserve">
          <source>Unlock swarm</source>
          <target state="translated">群れのロックを解除</target>
        </trans-unit>
        <trans-unit id="c5bed66b37d8b04281fc10550b16e7d0707e8487" translate="yes" xml:space="preserve">
          <source>Unlocks a locked manager using a user-supplied unlock key. This command must be used to reactivate a manager after its Docker daemon restarts if the autolock setting is turned on. The unlock key is printed at the time when autolock is enabled, and is also available from the &lt;code&gt;docker swarm unlock-key&lt;/code&gt; command.</source>
          <target state="translated">ユーザー指定のロック解除キーを使用して、ロックされたマネージャーをロック解除します。自動ロック設定がオンになっている場合、Dockerデーモンが再起動した後、このコマンドを使用してマネージャーを再アクティブ化する必要があります。ロック解除キーは、自動ロックが有効になっているときに表示され、 &lt;code&gt;docker swarm unlock-key&lt;/code&gt; コマンドからも使用できます。</target>
        </trans-unit>
        <trans-unit id="880237c7ce4ae1ecc01eafeff01c0b4f7e3408e0" translate="yes" xml:space="preserve">
          <source>Unpause all processes within one or more containers</source>
          <target state="translated">1つ以上のコンテナ内のすべてのプロセスをアンパウスする</target>
        </trans-unit>
        <trans-unit id="4afb0bb94b84c92f7cdf342827733a30c576133e" translate="yes" xml:space="preserve">
          <source>Unpauses paused containers of a service.</source>
          <target state="translated">サービスの一時停止しているコンテナの一時停止を解除します。</target>
        </trans-unit>
        <trans-unit id="0ec99c3d24a789842bab5d56b69a106e607eff70" translate="yes" xml:space="preserve">
          <source>Unset environment variables in the current shell</source>
          <target state="translated">現在のシェルの環境変数の設定を解除する</target>
        </trans-unit>
        <trans-unit id="2957ae4ea9f3e4ddfe03719d190a06c4d02712d8" translate="yes" xml:space="preserve">
          <source>Unsetting docker-machine shell variable settings</source>
          <target state="translated">docker-machine シェル変数の設定を解除する</target>
        </trans-unit>
        <trans-unit id="339d4e3c560687f121712ba52f548574407d876b" translate="yes" xml:space="preserve">
          <source>Up until now, you have been using Docker in a single-host mode on your local machine. But Docker also can be switched into &lt;strong&gt;swarm mode&lt;/strong&gt;, and that&amp;rsquo;s what enables the use of swarms. Enabling swarm mode instantly makes the current machine a swarm manager. From then on, Docker runs the commands you execute on the swarm you&amp;rsquo;re managing, rather than just on the current machine.</source>
          <target state="translated">これまで、ローカルマシンでシングルホストモードでDockerを使用してきました。しかし、Dockerは&lt;strong&gt;スウォームモード&lt;/strong&gt;に切り替えることもでき、それがスウォームの使用を可能にするものです。スウォームモードを有効にすると、現在のマシンがスウォームマネージャになります。それ以降、Dockerは現在のマシンだけでなく、管理しているスウォームで実行するコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="74263c9f93147c46666b915ea6de5a6a674be9e4" translate="yes" xml:space="preserve">
          <source>Update a container with cpu-shares and memory</source>
          <target state="translated">cpu-shareとメモリでコンテナを更新する</target>
        </trans-unit>
        <trans-unit id="04d1cbb929fdeb36830c6fac1527b5adfc04f106" translate="yes" xml:space="preserve">
          <source>Update a container&amp;rsquo;s cpu-shares</source>
          <target state="translated">コンテナのcpu-sharesを更新する</target>
        </trans-unit>
        <trans-unit id="c439cbf9620786d6048c63e470ba5cd2aa73457f" translate="yes" xml:space="preserve">
          <source>Update a container&amp;rsquo;s kernel memory constraints</source>
          <target state="translated">コンテナのカーネルメモリ制約を更新する</target>
        </trans-unit>
        <trans-unit id="f3d3f99645f9b835640e7e1d9c915587bb071058" translate="yes" xml:space="preserve">
          <source>Update a container&amp;rsquo;s restart policy</source>
          <target state="translated">コンテナーの再起動ポリシーを更新する</target>
        </trans-unit>
        <trans-unit id="b8efd12dd576886865b91a7a33309067cfe42fef" translate="yes" xml:space="preserve">
          <source>Update a context</source>
          <target state="translated">コンテキストの更新</target>
        </trans-unit>
        <trans-unit id="3fe81a3b0ec2d13f861dfcc67f046017653dc62c" translate="yes" xml:space="preserve">
          <source>Update a local engine</source>
          <target state="translated">ローカルエンジンの更新</target>
        </trans-unit>
        <trans-unit id="c48b172eb89880d3e04e653cac42b8295adeb3e6" translate="yes" xml:space="preserve">
          <source>Update a node</source>
          <target state="translated">ノードの更新</target>
        </trans-unit>
        <trans-unit id="df6f6f40cefac982a60cccba4b1f61ead209db34" translate="yes" xml:space="preserve">
          <source>Update a service</source>
          <target state="translated">サービスの更新</target>
        </trans-unit>
        <trans-unit id="9207dfe5d0e722cab59ec5c7f84042d02780a80d" translate="yes" xml:space="preserve">
          <source>Update a service&amp;rsquo;s image after creation</source>
          <target state="translated">作成後にサービスのイメージを更新する</target>
        </trans-unit>
        <trans-unit id="21718c2206b154ae2af68ad12fb4959190f63fda" translate="yes" xml:space="preserve">
          <source>Update configuration of one or more containers</source>
          <target state="translated">1つまたは複数のコンテナの構成を更新する</target>
        </trans-unit>
        <trans-unit id="6ee9cf84bd1b024643932429ec3436f14e8165c5" translate="yes" xml:space="preserve">
          <source>Update containers</source>
          <target state="translated">コンテナの更新</target>
        </trans-unit>
        <trans-unit id="7e63b839bf073d2b03eb9759f7ccf73b742d10a4" translate="yes" xml:space="preserve">
          <source>Update kernel memory of running container &lt;code&gt;test2&lt;/code&gt; will fail. You need to stop the container before updating the &lt;code&gt;--kernel-memory&lt;/code&gt; setting. The next time you start it, the container uses the new value.</source>
          <target state="translated">実行中のコンテナ &lt;code&gt;test2&lt;/code&gt; のカーネルメモリの更新は失敗します。 &lt;code&gt;--kernel-memory&lt;/code&gt; 設定を更新する前にコンテナを停止する必要があります。次回起動すると、コンテナは新しい値を使用します。</target>
        </trans-unit>
        <trans-unit id="06ce6b8e599ccdd7d0613fa24c9100ed4cbd1358" translate="yes" xml:space="preserve">
          <source>Update metadata about a node, such as its availability, labels, or roles.</source>
          <target state="translated">ノードの可用性、ラベル、ロールなど、ノードに関するメタデータを更新します。</target>
        </trans-unit>
        <trans-unit id="eab5c386cee71f9a797057025b7cc643e0188903" translate="yes" xml:space="preserve">
          <source>Update order (&amp;ldquo;start-first&amp;rdquo;|&amp;rdquo;stop-first&amp;rdquo;)</source>
          <target state="translated">更新順序（「最初に開始」|「最初に停止」）</target>
        </trans-unit>
        <trans-unit id="ef77dc9356be6ba41db55f57e38337f947ecad31" translate="yes" xml:space="preserve">
          <source>Update order (&amp;ldquo;start-first&amp;rdquo;|&amp;rdquo;stop-first&amp;rdquo;) (default &amp;ldquo;stop-first&amp;rdquo;)</source>
          <target state="translated">更新順序（「start-first」|「stop-first」）（デフォルトは「stop-first」）</target>
        </trans-unit>
        <trans-unit id="4298dc2c224955090d5c943851052d9ecbb55a4a" translate="yes" xml:space="preserve">
          <source>Update services using templates</source>
          <target state="translated">テンプレートを使ってサービスを更新する</target>
        </trans-unit>
        <trans-unit id="9545afe40de226d5ed4c466546db3b8235cbfcd4" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;nginx&lt;/code&gt; service to use the new config instead of the old one.</source>
          <target state="translated">古い構成の代わりに新しい構成を使用するように &lt;code&gt;nginx&lt;/code&gt; サービスを更新します。</target>
        </trans-unit>
        <trans-unit id="ef303f506151d15b14d752abd59aa0db853a44ac" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;wordpress&lt;/code&gt; service to use the new password, keeping the target path at &lt;code&gt;/run/secrets/wp_db_secret&lt;/code&gt; and keeping the file permissions at &lt;code&gt;0400&lt;/code&gt;. This triggers a rolling restart of the WordPress service and the new secret is used.</source>
          <target state="translated">新しいパスワードを使用するように &lt;code&gt;wordpress&lt;/code&gt; サービスを更新し、ターゲットパスを &lt;code&gt;/run/secrets/wp_db_secret&lt;/code&gt; に維持し、ファイルのアクセス許可を &lt;code&gt;0400&lt;/code&gt; に維持します。これにより、WordPressサービスのローリング再起動がトリガーされ、新しいシークレットが使用されます。</target>
        </trans-unit>
        <trans-unit id="b5fde9b927000fcacd1a92b94a2c10781177d4b2" translate="yes" xml:space="preserve">
          <source>Update the MySQL service to give it access to both the old and new secrets. Remember that you cannot update or rename a secret, but you can revoke a secret and grant access to it using a new target filename.</source>
          <target state="translated">MySQL サービスを更新して、古い秘密と新しい秘密の両方にアクセスできるようにします。シークレットを更新したり名前を変更したりすることはできませんが、シークレットを取り消して新しいターゲットファイル名を使用してアクセスを許可することはできます。</target>
        </trans-unit>
        <trans-unit id="20d6ad95abfc52cfbc883066ea7b1d0cfc05d2e5" translate="yes" xml:space="preserve">
          <source>Update the command an existing service runs</source>
          <target state="translated">既存のサービスが実行するコマンドを更新する</target>
        </trans-unit>
        <trans-unit id="a544819adc8614829d526f53e98f7fa028b63800" translate="yes" xml:space="preserve">
          <source>Update the service to use three replicas:</source>
          <target state="translated">3つのレプリカを使用するようにサービスを更新します。</target>
        </trans-unit>
        <trans-unit id="13a1d1927c4fcdc5fc3cbe02edbfbfad8c79c3b8" translate="yes" xml:space="preserve">
          <source>Update the swarm</source>
          <target state="translated">群を更新する</target>
        </trans-unit>
        <trans-unit id="add135d8b7d31d84713a9567d228d2331181727b" translate="yes" xml:space="preserve">
          <source>Updates a service as described by the specified parameters. This command has to be run targeting a manager node. The parameters are the same as &lt;a href=&quot;../service_create/index&quot;&gt;&lt;code&gt;docker service create&lt;/code&gt;&lt;/a&gt;. Please look at the description there for further information.</source>
          <target state="translated">指定されたパラメーターで記述されているようにサービスを更新します。このコマンドは、マネージャーノードを対象として実行する必要があります。パラメータは&lt;a href=&quot;../service_create/index&quot;&gt; &lt;code&gt;docker service create&lt;/code&gt; &lt;/a&gt;と同じです。詳細については、そこの説明をご覧ください。</target>
        </trans-unit>
        <trans-unit id="a7f69957dec36cffac68625d7e93d5eaee0355d7" translate="yes" xml:space="preserve">
          <source>Updates a swarm with new parameter values. This command must target a manager node.</source>
          <target state="translated">新しいパラメータ値でスウォームを更新します。このコマンドは、マネージャノードをターゲットにする必要があります。</target>
        </trans-unit>
        <trans-unit id="1ced7f0946d7faad9a669b3cec26620de9ad1bfa" translate="yes" xml:space="preserve">
          <source>Updates an existing &lt;code&gt;context&lt;/code&gt;. See &lt;a href=&quot;../context_create/index&quot;&gt;context create&lt;/a&gt;</source>
          <target state="translated">既存の &lt;code&gt;context&lt;/code&gt; 更新します。&lt;a href=&quot;../context_create/index&quot;&gt;コンテキスト作成を&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="320cd39c7f0f399d403599421510bdabdf895419" translate="yes" xml:space="preserve">
          <source>Updating a service causes it to restart, and when the MySQL service restarts the second time, it has access to the old secret under &lt;code&gt;/run/secrets/old_mysql_password&lt;/code&gt; and the new secret under &lt;code&gt;/run/secrets/mysql_password&lt;/code&gt;.</source>
          <target state="translated">サービスを更新すると、それが再起動するようになり、およびMySQLサービスが二度目に再起動したときに、それがもとで古い秘密へのアクセス権を持っている &lt;code&gt;/run/secrets/old_mysql_password&lt;/code&gt; と新しい秘密の下に &lt;code&gt;/run/secrets/mysql_password&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6596562e42e13c191083ac68a233a3a010e1816" translate="yes" xml:space="preserve">
          <source>Updating and reloading the cluster configurations such as &lt;code&gt;--cluster-store&lt;/code&gt;, &lt;code&gt;--cluster-advertise&lt;/code&gt; and &lt;code&gt;--cluster-store-opts&lt;/code&gt; will take effect only if these configurations were not previously configured. If &lt;code&gt;--cluster-store&lt;/code&gt; has been provided in flags and &lt;code&gt;cluster-advertise&lt;/code&gt; not, &lt;code&gt;cluster-advertise&lt;/code&gt; can be added in the configuration file without accompanied by &lt;code&gt;--cluster-store&lt;/code&gt;. Configuration reload will log a warning message if it detects a change in previously configured cluster configurations.</source>
          <target state="translated">&lt;code&gt;--cluster-store&lt;/code&gt; 、-- &lt;code&gt;--cluster-advertise&lt;/code&gt; 、-- &lt;code&gt;--cluster-store-opts&lt;/code&gt; などのクラスター構成の更新と再読み込みは、これらの構成が以前に構成されていない場合にのみ有効になります。場合 &lt;code&gt;--cluster-store&lt;/code&gt; フラグで提供されている &lt;code&gt;cluster-advertise&lt;/code&gt; ではない、 &lt;code&gt;cluster-advertise&lt;/code&gt; を伴わずに、構成ファイルに追加することができ &lt;code&gt;--cluster-store&lt;/code&gt; 。以前に構成されたクラスター構成の変更を検出すると、構成の再読み込みで警告メッセージがログに記録されます。</target>
        </trans-unit>
        <trans-unit id="ea677af2fb98c0675157469393bd5642d926ce4e" translate="yes" xml:space="preserve">
          <source>Upgrade a machine to the latest version of Docker. How this upgrade happens depends on the underlying distribution used on the created instance.</source>
          <target state="translated">マシンをDockerの最新バージョンにアップグレードします。このアップグレードがどのように行われるかは、作成されたインスタンスで使用されている基礎となるディストリビューションに依存します。</target>
        </trans-unit>
        <trans-unit id="bdfee709c2f9fb7d7171076e28564bb38fa8c240" translate="yes" xml:space="preserve">
          <source>Upgrade an existing plugin</source>
          <target state="translated">既存のプラグインをアップグレードする</target>
        </trans-unit>
        <trans-unit id="32bda70aa6da7aaa0e9bd1a1d38d4bbd2ff95d95" translate="yes" xml:space="preserve">
          <source>Upgrades a machine&amp;rsquo;s Docker client to the latest stable release.</source>
          <target state="translated">マシンのDockerクライアントを最新の安定版リリースにアップグレードします。</target>
        </trans-unit>
        <trans-unit id="2b69b9f62c0c07249da0d83c0ae7ea77234f2bb5" translate="yes" xml:space="preserve">
          <source>Upgrades an existing plugin to the specified remote plugin image. If no remote is specified, Docker will re-pull the current image and use the updated version. All existing references to the plugin will continue to work. The plugin must be disabled before running the upgrade.</source>
          <target state="translated">既存のプラグインを指定されたリモートのプラグインイメージにアップグレードします。リモートが指定されていない場合、Dockerは現在のイメージを再プルし、更新されたバージョンを使用します。プラグインへの既存の参照はすべて継続して動作します。アップグレードを実行する前にプラグインを無効にしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="a7dd3a1d8ed51cf30314c15a934d4cae0718aa5a" translate="yes" xml:space="preserve">
          <source>Upgrading</source>
          <target state="translated">Upgrading</target>
        </trans-unit>
        <trans-unit id="0b1f162d934e37feddeb26ec08f036d482d14382" translate="yes" xml:space="preserve">
          <source>Upload your tagged image to the repository:</source>
          <target state="translated">タグ付けされた画像をリポジトリにアップロードします。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="c2ac3dbd9c530343e798461493e951b54a086fab" translate="yes" xml:space="preserve">
          <source>Usage is &lt;code&gt;docker-machine provision [name]&lt;/code&gt;. Multiple names may be specified.</source>
          <target state="translated">使用法は &lt;code&gt;docker-machine provision [name]&lt;/code&gt; です。複数の名前を指定できます。</target>
        </trans-unit>
        <trans-unit id="3151ec063ef31c929aeedd9ce89b0b6124d4cb03" translate="yes" xml:space="preserve">
          <source>Usage of these namespaces will now cause a warning in the engine logs to discourage their use, and will error instead in 18.12 and above.</source>
          <target state="translated">これらの名前空間を使用すると、エンジンログに警告が表示されて使用が推奨されないようになり、18.12 以降ではエラーになります。</target>
        </trans-unit>
        <trans-unit id="aae61d2ab13222bcf0d992536069eedf4e875a7f" translate="yes" xml:space="preserve">
          <source>Usage: docker-machine help &lt;em&gt;subcommand&lt;/em&gt;</source>
          <target state="translated">使用法：docker-machine help &lt;em&gt;サブコマンド&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ade217654e96682c6936528cf07556044eb4629b" translate="yes" xml:space="preserve">
          <source>Use &amp;lsquo;-&amp;lsquo; as the source to read a tar archive from stdin and extract it to a directory destination in a container. Use &amp;lsquo;-&amp;lsquo; as the destination to stream a tar archive of a container source to stdout.</source>
          <target state="translated">「-」をソースとして使用して、stdinからtarアーカイブを読み取り、それをコンテナー内のディレクトリー宛先に抽出します。コンテナソースのtarアーカイブをstdoutにストリーミングするには、宛先として「-」を使用します。</target>
        </trans-unit>
        <trans-unit id="acfaca703671d9314f0d44e4bca78597e85216fe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;-f&lt;/code&gt; to specify name and path of one or more Compose files</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; を使用して、1つ以上のComposeファイルの名前とパスを指定します</target>
        </trans-unit>
        <trans-unit id="16268d9af9596674a4cc624b627c81ed692f2eae" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;-p&lt;/code&gt; to specify a project name</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; を使用してプロジェクト名を指定します</target>
        </trans-unit>
        <trans-unit id="30453a319d45031a1fc3e606ff4530b3c2a57a0a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;docker attach&lt;/code&gt; to attach your terminal&amp;rsquo;s standard input, output, and error (or any combination of the three) to a running container using the container&amp;rsquo;s ID or name. This allows you to view its ongoing output or to control it interactively, as though the commands were running directly in your terminal.</source>
          <target state="translated">使用 &lt;code&gt;docker attach&lt;/code&gt; コンテナのIDまたは名前を使用して実行されているコンテナにあなたの端末の標準入力、出力、およびエラー（または3つの任意の組み合わせ）を添付すること。これにより、コマンドが端末で直接実行されているかのように、進行中の出力を表示したり、インタラクティブに制御したりできます。</target>
        </trans-unit>
        <trans-unit id="32ae1a602f2feb2d7ed4bebbe3d05a699b294ea6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;docker events&lt;/code&gt; to get real-time events from the server. These events differ per Docker object type.</source>
          <target state="translated">&lt;code&gt;docker events&lt;/code&gt; を使用して、サーバーからリアルタイムのイベントを取得します。これらのイベントは、Dockerオブジェクトタイプごとに異なります。</target>
        </trans-unit>
        <trans-unit id="f9f7934ba4146e78e621a477b06c0975149e0de0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;docker node ls&lt;/code&gt; to list the nodes in your swarm.</source>
          <target state="translated">&lt;code&gt;docker node ls&lt;/code&gt; を使用して、スウォーム内のノードを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="03689b49c1899a2c527051b8920fdb567dc62d7f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;docker push&lt;/code&gt; to share your images to the &lt;a href=&quot;https://hub.docker.com&quot;&gt;Docker Hub&lt;/a&gt; registry or to a self-hosted one.</source>
          <target state="translated">&lt;code&gt;docker push&lt;/code&gt; を使用して、イメージを&lt;a href=&quot;https://hub.docker.com&quot;&gt;Docker Hub&lt;/a&gt;レジストリまたはセルフホストのレジストリに共有します。</target>
        </trans-unit>
        <trans-unit id="ae2bdf7a631236e465128f006eef30098b68b88e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;docker run&lt;/code&gt; to download and run &lt;code&gt;busybox&lt;/code&gt; with a simple &amp;lsquo;echo&amp;rsquo; command.</source>
          <target state="translated">&lt;code&gt;busybox&lt;/code&gt; &lt;code&gt;docker run&lt;/code&gt; を使用して、簡単な 'echo'コマンドでbusyboxをダウンロードして実行します。</target>
        </trans-unit>
        <trans-unit id="7556093f31cca79189c0be3927abee22d21e1989" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;docker service ls&lt;/code&gt; to list services.</source>
          <target state="translated">&lt;code&gt;docker service ls&lt;/code&gt; を使用してサービスを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="ea784c14a45c0350a53d8416dd45872d3eb1ba07" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;docker service ps &amp;lt;service&amp;gt;&lt;/code&gt; to view tasks for a service.</source>
          <target state="translated">&lt;code&gt;docker service ps &amp;lt;service&amp;gt;&lt;/code&gt; を使用して、サービスのタスクを表示します。</target>
        </trans-unit>
        <trans-unit id="ac955ce3b6a30c88a784f5bf823a3d2e6557a92d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;docker system events&lt;/code&gt; to get real-time events from the server. These events differ per Docker object type.</source>
          <target state="translated">&lt;code&gt;docker system events&lt;/code&gt; を使用して、サーバーからリアルタイムイベントを取得します。これらのイベントは、Dockerオブジェクトタイプごとに異なります。</target>
        </trans-unit>
        <trans-unit id="fd34589e99c142baae92d1eac9d3d2b649ea1832" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;docker-machine ls&lt;/code&gt; to list available machines.</source>
          <target state="translated">使用 &lt;code&gt;docker-machine ls&lt;/code&gt; リスト可能なマシンに。</target>
        </trans-unit>
        <trans-unit id="cb8529692f874fe03372e946062d850ada3f8628" translate="yes" xml:space="preserve">
          <source>Use Compose in production</source>
          <target state="translated">本番でコンポーズを使用する</target>
        </trans-unit>
        <trans-unit id="7d296dde124e24f2fd937438072ae9212da21a79" translate="yes" xml:space="preserve">
          <source>Use Compose with Swarm</source>
          <target state="translated">SwarmでComposeを使用する</target>
        </trans-unit>
        <trans-unit id="637a5b732cb05bf1fd103fcaeb123d167d684fee" translate="yes" xml:space="preserve">
          <source>Use Docker Desktop for Mac or Docker Desktop for Windows</source>
          <target state="translated">Docker Desktop for MacまたはDocker Desktop for Windowsを使用する</target>
        </trans-unit>
        <trans-unit id="001572ca20f53ccbdba5e1c6edddc939c2e2c2f8" translate="yes" xml:space="preserve">
          <source>Use Docker Engine plugins</source>
          <target state="translated">Docker Engineプラグインを使用する</target>
        </trans-unit>
        <trans-unit id="9adae32b001f8d2b6e261e8b53c8e27ce7bd5ee3" translate="yes" xml:space="preserve">
          <source>Use Docker Machine to provision hosts on cloud providers</source>
          <target state="translated">Docker Machineを使ってクラウドプロバイダーにホストをプロビジョニングする</target>
        </trans-unit>
        <trans-unit id="3b22faf4bc50897d7976f7db8ac512a6a8d420cc" translate="yes" xml:space="preserve">
          <source>Use Docker&amp;rsquo;s &lt;code&gt;--restart&lt;/code&gt; to specify a container&amp;rsquo;s &lt;em&gt;restart policy&lt;/em&gt;. A restart policy controls whether the Docker daemon restarts a container after exit. Docker supports the following restart policies:</source>
          <target state="translated">Dockerの &lt;code&gt;--restart&lt;/code&gt; を使用して、コンテナの&lt;em&gt;再起動ポリシー&lt;/em&gt;を指定します。再起動ポリシーは、Dockerデーモンが終了後にコンテナを再起動するかどうかを制御します。Dockerは次の再起動ポリシーをサポートしています。</target>
        </trans-unit>
        <trans-unit id="174d82d043fec4ac0fdfbe18457b74fc391e1ed3" translate="yes" xml:space="preserve">
          <source>Use Machine to provision Docker Swarm clusters</source>
          <target state="translated">Machineを使ってDocker Swarmクラスタのプロビジョニングを行う</target>
        </trans-unit>
        <trans-unit id="359bc9458b99f4681988a96aae6ea846c44f4964" translate="yes" xml:space="preserve">
          <source>Use Machine to run Docker containers</source>
          <target state="translated">Machineを使ってDockerコンテナを実行する</target>
        </trans-unit>
        <trans-unit id="ed92211baf1ffddd526d016a1df6aa1a225d6573" translate="yes" xml:space="preserve">
          <source>Use OpenSSL&amp;rsquo;s &lt;code&gt;genrsa&lt;/code&gt; and &lt;code&gt;req&lt;/code&gt; commands to first generate an RSA key and then use the key to create the certificate.</source>
          <target state="translated">OpenSSLの &lt;code&gt;genrsa&lt;/code&gt; および &lt;code&gt;req&lt;/code&gt; コマンドを使用して、最初にRSAキーを生成し、次にキーを使用して証明書を作成します。</target>
        </trans-unit>
        <trans-unit id="bf7327183c3a0e035e7a7c5b80946a423e90cda0" translate="yes" xml:space="preserve">
          <source>Use RAW and PACKET sockets.</source>
          <target state="translated">RAWソケットとPACKETソケットを使用します。</target>
        </trans-unit>
        <trans-unit id="4c3074ad4def7c64a835cc292cab058aec86c1ab" translate="yes" xml:space="preserve">
          <source>Use Secrets in Compose</source>
          <target state="translated">コンポーズでシークレットを使う</target>
        </trans-unit>
        <trans-unit id="48528022e4248d2f55bcd808a0dc1326930247db" translate="yes" xml:space="preserve">
          <source>Use a .dockerignore file</source>
          <target state="translated">.dockerignoreファイルを使用する</target>
        </trans-unit>
        <trans-unit id="48248fe50a7c367fc775256731e26cb00bee92d0" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;-f&lt;/code&gt; with &lt;code&gt;-&lt;/code&gt; (dash) as the filename to read the configuration from &lt;code&gt;stdin&lt;/code&gt;. When &lt;code&gt;stdin&lt;/code&gt; is used all paths in the configuration are relative to the current working directory.</source>
          <target state="translated">使用 &lt;code&gt;-f&lt;/code&gt; をして &lt;code&gt;-&lt;/code&gt; から設定を読み込むためにファイル名として（ダッシュ） &lt;code&gt;stdin&lt;/code&gt; 。 &lt;code&gt;stdin&lt;/code&gt; を使用する場合、構成内のすべてのパスは現在の作業ディレクトリからの相対パスです。</target>
        </trans-unit>
        <trans-unit id="98a8def7026b7602afa813d98fa33248634e9e79" translate="yes" xml:space="preserve">
          <source>Use a Yubikey</source>
          <target state="translated">ユビキーを使う</target>
        </trans-unit>
        <trans-unit id="b59e5dc79d1b6bf0f4e3f7144a5e471734c74f88" translate="yes" xml:space="preserve">
          <source>Use a custom checkpoint storage directory</source>
          <target state="translated">カスタムチェックポイントストレージディレクトリを使用する</target>
        </trans-unit>
        <trans-unit id="1720454a8652d1dc9faafdd9f8fb92ea0b4b5354" translate="yes" xml:space="preserve">
          <source>Use a custom parent cgroup (--cgroup-parent)</source>
          <target state="translated">カスタムの親cグループを使用する (--cgroup-parent)</target>
        </trans-unit>
        <trans-unit id="58a10d596bba7605c6f0efd0b4d6b21b4fa69fbd" translate="yes" xml:space="preserve">
          <source>Use a pre-existing network</source>
          <target state="translated">既存のネットワークを使用する</target>
        </trans-unit>
        <trans-unit id="8c79748c9edf83adbb3b606e609a94e3458fa9a1" translate="yes" xml:space="preserve">
          <source>Use a tool such as &lt;a href=&quot;https://github.com/vishnubob/wait-for-it&quot;&gt;wait-for-it&lt;/a&gt;, &lt;a href=&quot;https://github.com/jwilder/dockerize&quot;&gt;dockerize&lt;/a&gt;, or sh-compatible &lt;a href=&quot;https://github.com/Eficode/wait-for&quot;&gt;wait-for&lt;/a&gt;. These are small wrapper scripts which you can include in your application&amp;rsquo;s image to poll a given host and port until it&amp;rsquo;s accepting TCP connections.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/vishnubob/wait-for-it&quot;&gt;wait-for-it&lt;/a&gt;、&lt;a href=&quot;https://github.com/jwilder/dockerize&quot;&gt;dockerize&lt;/a&gt;、またはsh互換の&lt;a href=&quot;https://github.com/Eficode/wait-for&quot;&gt;wait-for&lt;/a&gt;などのツールを使用します。これらは小さなラッパースクリプトであり、アプリケーションのイメージに含めて、TCP接続を受け入れるまで特定のホストとポートをポーリングすることができます。</target>
        </trans-unit>
        <trans-unit id="6fa2be3beb3dc655e8f5fc051a4e02730bd7cd29" translate="yes" xml:space="preserve">
          <source>Use aa-status</source>
          <target state="translated">aa-statusを使用します。</target>
        </trans-unit>
        <trans-unit id="704c5d2c7895567ef561484c2e59e3a1cf3344e9" translate="yes" xml:space="preserve">
          <source>Use acct(2), switch process accounting on or off.</source>
          <target state="translated">acct(2)を使用して、プロセスのアカウンティングのオン/オフを切り替え。</target>
        </trans-unit>
        <trans-unit id="a660e4635ab6e63fd1be778338e2b8b36d475644" translate="yes" xml:space="preserve">
          <source>Use an init inside each service container to forward signals and reap processes</source>
          <target state="translated">各サービスコンテナ内で init を使用してシグナルを転送し、プロセスを刈り取ります。</target>
        </trans-unit>
        <trans-unit id="b50b2cf70b2d83f79229c09fc3ef0e29f87a5e01" translate="yes" xml:space="preserve">
          <source>Use chroot(2), change root directory.</source>
          <target state="translated">chroot(2)を使用して、ルートディレクトリを変更。</target>
        </trans-unit>
        <trans-unit id="e6a892e41b6b6a1587634b036daf718c22128bd0" translate="yes" xml:space="preserve">
          <source>Use container linking</source>
          <target state="translated">コンテナリンクを使用する</target>
        </trans-unit>
        <trans-unit id="a5e1f1c77d985e4e8c40b0b1169b871bd283fdcd" translate="yes" xml:space="preserve">
          <source>Use daemon&amp;rsquo;s default.</source>
          <target state="translated">デーモンのデフォルトを使用します。</target>
        </trans-unit>
        <trans-unit id="16c01db1d657ab3dad2d84f58ad39c888ac731fc" translate="yes" xml:space="preserve">
          <source>Use delegations with content trust</source>
          <target state="translated">コンテンツの信頼性のあるデリゲーションを使用する</target>
        </trans-unit>
        <trans-unit id="234fb961bdf7b193691751e209ba4b8ebaba3ded" translate="yes" xml:space="preserve">
          <source>Use dmesg</source>
          <target state="translated">dmesgを使用する</target>
        </trans-unit>
        <trans-unit id="f0f39a437e7503292444c2a00a7301655cd39f0c" translate="yes" xml:space="preserve">
          <source>Use external Dockerfile implementations with many new features</source>
          <target state="translated">多くの新機能を備えた外部のDockerfile実装を使用する</target>
        </trans-unit>
        <trans-unit id="30a90f68bb63ada8001c0ff7cfb7d7037f9327de" translate="yes" xml:space="preserve">
          <source>Use network driver plugins</source>
          <target state="translated">ネットワークドライバのプラグインを使用する</target>
        </trans-unit>
        <trans-unit id="8699f8548f593bff8c21adf9fee280f6caac8e3e" translate="yes" xml:space="preserve">
          <source>Use one of two methods to unset DOCKER environment variables in the current shell.</source>
          <target state="translated">2つのメソッドのいずれかを使用して、現在のシェルのDOCKER環境変数の設定を解除します。</target>
        </trans-unit>
        <trans-unit id="9e4dba9754ba1336f2a6a7e2067e95e71871b143" translate="yes" xml:space="preserve">
          <source>Use placement constraints to control the nodes a service can be assigned to. In the following example, the service only runs on nodes with the &lt;a href=&quot;../manage-nodes/index#add-or-remove-label-metadata&quot;&gt;label&lt;/a&gt;&lt;code&gt;region&lt;/code&gt; set to &lt;code&gt;east&lt;/code&gt;. If no appropriately-labelled nodes are available, tasks will wait in &lt;code&gt;Pending&lt;/code&gt; until they become available. The &lt;code&gt;--constraint&lt;/code&gt; flag uses an equality operator (&lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;). For replicated services, it is possible that all services run on the same node, or each node only runs one replica, or that some nodes don&amp;rsquo;t run any replicas. For global services, the service runs on every node that meets the placement constraint and any &lt;a href=&quot;#reserve-memory-or-cpus-for-a-service&quot;&gt;resource requirements&lt;/a&gt;.</source>
          <target state="translated">配置制約を使用して、サービスを割り当てることができるノードを制御します。次の例では、サービスは&lt;a href=&quot;../manage-nodes/index#add-or-remove-label-metadata&quot;&gt;ラベル&lt;/a&gt; &lt;code&gt;region&lt;/code&gt; が &lt;code&gt;east&lt;/code&gt; に設定されているノードでのみ実行されます。適切にラベル付けされたノードが利用できない場合、タスクは利用可能になるまで &lt;code&gt;Pending&lt;/code&gt; 待機します。 &lt;code&gt;--constraint&lt;/code&gt; フラグは、等価演算子を使用しています（ &lt;code&gt;==&lt;/code&gt; または &lt;code&gt;!=&lt;/code&gt; ）。複製されたサービスの場合、すべてのサービスが同じノードで実行されるか、各ノードが1つのレプリカのみを実行するか、一部のノードがレプリカを実行しない可能性があります。グローバルサービスの場合、サービスは配置制約と&lt;a href=&quot;#reserve-memory-or-cpus-for-a-service&quot;&gt;リソース要件&lt;/a&gt;を満たすすべてのノードで実行されます。</target>
        </trans-unit>
        <trans-unit id="326ab8f4511376235f1dbd378e46d2698e2b28e0" translate="yes" xml:space="preserve">
          <source>Use reboot(2) and kexec_load(2), reboot and load a new kernel for later execution.</source>
          <target state="translated">reboot(2)と kexec_load(2)を使用して、後で実行するために再起動して新しいカーネルをロードします。</target>
        </trans-unit>
        <trans-unit id="e5618eafd4dd05f31d473a4f78be608423a345cb" translate="yes" xml:space="preserve">
          <source>Use swarm mode routing mesh</source>
          <target state="translated">スウォームモードのルーティングメッシュを使用する</target>
        </trans-unit>
        <trans-unit id="b14178d0abcc3f70d70b76c8f8c51f4baeb31def" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--from=&amp;lt;context-name&amp;gt;&lt;/code&gt; option to create a new context from an existing context. The example below creates a new context named &lt;code&gt;my-context&lt;/code&gt; from the existing context &lt;code&gt;existing-context&lt;/code&gt;:</source>
          <target state="translated">使用 &lt;code&gt;--from=&amp;lt;context-name&amp;gt;&lt;/code&gt; 既存のコンテキストから、新しいコンテキストを作成するためのオプションを。次の例では、既存のコンテキスト &lt;code&gt;existing-context&lt;/code&gt; から &lt;code&gt;my-context&lt;/code&gt; という名前の新しいコンテキストを作成します。</target>
        </trans-unit>
        <trans-unit id="c75e17a597a9f98bdc7f30178d7e465deea89c08" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--label-file&lt;/code&gt; flag to load multiple labels from a file. Delimit each label in the file with an EOL mark. The example below loads labels from a labels file in the current directory:</source>
          <target state="translated">&lt;code&gt;--label-file&lt;/code&gt; フラグを使用して、ファイルから複数のラベルをロードします。ファイル内の各ラベルはEOLマークで区切ります。次の例では、現在のディレクトリのラベルファイルからラベルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="ffdb2f7837c70c793374d6d4dd6b1f81affbe283" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--mount-add&lt;/code&gt; or &lt;code&gt;--mount-rm&lt;/code&gt; options add or remove a service&amp;rsquo;s bind mounts or volumes.</source>
          <target state="translated">使用 &lt;code&gt;--mount-add&lt;/code&gt; または &lt;code&gt;--mount-rm&lt;/code&gt; のオプションが追加またはサービスのバインドマウントまたはボリュームを削除します。</target>
        </trans-unit>
        <trans-unit id="4e1bb024450b33e2c748c988f372f1ad332e49de" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--network-add&lt;/code&gt; or &lt;code&gt;--network-rm&lt;/code&gt; flags to add or remove a network for a service. You can use the short or long syntax discussed in the &lt;a href=&quot;../service_create/index#attach-a-service-to-an-existing-network-network&quot;&gt;docker service create&lt;/a&gt; reference.</source>
          <target state="translated">&lt;code&gt;--network-add&lt;/code&gt; または &lt;code&gt;--network-rm&lt;/code&gt; フラグを使用して、サービスのネットワークを追加または削除します。&lt;a href=&quot;../service_create/index#attach-a-service-to-an-existing-network-network&quot;&gt;docker service create&lt;/a&gt;リファレンスで説明されている短い構文または長い構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="de0b078b0dabec7c2a0bbf911163557990f3016c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--no-trunc&lt;/code&gt; option to display the full network id:</source>
          <target state="translated">使用 &lt;code&gt;--no-trunc&lt;/code&gt; フルネットワークIDを表示するオプションを：</target>
        </trans-unit>
        <trans-unit id="20b344543604477bc1b6f7369d27ffb01b0926a8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--publish-add&lt;/code&gt; or &lt;code&gt;--publish-rm&lt;/code&gt; flags to add or remove a published port for a service. You can use the short or long syntax discussed in the &lt;a href=&quot;../service_create/index#publish-service-ports-externally-to-the-swarm&quot;&gt;docker service create&lt;/a&gt; reference.</source>
          <target state="translated">&lt;code&gt;--publish-add&lt;/code&gt; または &lt;code&gt;--publish-rm&lt;/code&gt; フラグを使用して、サービスの公開ポートを追加または削除します。&lt;a href=&quot;../service_create/index#publish-service-ports-externally-to-the-swarm&quot;&gt;docker service create&lt;/a&gt;リファレンスで説明されている短い構文または長い構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="52010d205ae94d19842df9d99ac3d34a4b9f5704" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--publish&lt;/code&gt; flag to publish a port when you create a service. &lt;code&gt;target&lt;/code&gt; is used to specify the port inside the container, and &lt;code&gt;published&lt;/code&gt; is used to specify the port to bind on the routing mesh. If you leave off the &lt;code&gt;published&lt;/code&gt; port, a random high-numbered port is bound for each service task. You need to inspect the task to determine the port.</source>
          <target state="translated">&lt;code&gt;--publish&lt;/code&gt; フラグを使用して、サービスを作成するときにポートを公開します。 &lt;code&gt;target&lt;/code&gt; はコンテナー内のポートを指定するために使用され、 &lt;code&gt;published&lt;/code&gt; はルーティングメッシュにバインドするポートを指定するために使用されます。あなたがオフのままにすると &lt;code&gt;published&lt;/code&gt; たポートを、ランダムな大きな番号のポートが各サービスタスクのためにバインドされています。ポートを判別するには、タスクを検査する必要があります。</target>
        </trans-unit>
        <trans-unit id="ee107556cc8e9011ddd2ce4d424d96bdb11bac30" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--replicas-max-per-node&lt;/code&gt; flag to set the maximum number of replica tasks that can run on a node. The following command creates a nginx service with 2 replica tasks but only one replica task per node.</source>
          <target state="translated">&lt;code&gt;--replicas-max-per-node&lt;/code&gt; フラグを使用して、ノードで実行できるレプリカタスクの最大数を設定します。次のコマンドは、2つのレプリカタスクを持つnginxサービスを作成しますが、ノードごとに1つのレプリカタスクのみを作成します。</target>
        </trans-unit>
        <trans-unit id="10a61d7ce91549f60de8efa90b0f7398f6c6dfc6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--replicas&lt;/code&gt; flag to set the number of replica tasks for a replicated service. The following command creates a &lt;code&gt;redis&lt;/code&gt; service with &lt;code&gt;5&lt;/code&gt; replica tasks:</source>
          <target state="translated">&lt;code&gt;--replicas&lt;/code&gt; フラグを使用して、複製されたサービスのレプリカタスクの数を設定します。次のコマンドは、 &lt;code&gt;5&lt;/code&gt; つのレプリカタスクを持つ &lt;code&gt;redis&lt;/code&gt; サービスを作成します。</target>
        </trans-unit>
        <trans-unit id="c5b50957ff2a621b037d7ab8c60f657c24665cd6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--rollback&lt;/code&gt; option to roll back to the previous version of the service.</source>
          <target state="translated">&lt;code&gt;--rollback&lt;/code&gt; オプションを使用して、サービスの以前のバージョンにロールバックします。</target>
        </trans-unit>
        <trans-unit id="bfb033eca45fcbcc817520034c4d58ad4799f388" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--secret-add&lt;/code&gt; or &lt;code&gt;--secret-rm&lt;/code&gt; options add or remove a service&amp;rsquo;s secrets.</source>
          <target state="translated">使用 &lt;code&gt;--secret-add&lt;/code&gt; または &lt;code&gt;--secret-rm&lt;/code&gt; 追加やサービスの秘密を削除オプションを。</target>
        </trans-unit>
        <trans-unit id="0d9d0a97f4476884e9fb05e9599215245d6d766a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--secret&lt;/code&gt; flag to give a container access to a &lt;a href=&quot;../secret_create/index&quot;&gt;secret&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--secret&lt;/code&gt; フラグを使用して、コンテナに&lt;a href=&quot;../secret_create/index&quot;&gt;シークレット&lt;/a&gt;へのアクセスを許可します。</target>
        </trans-unit>
        <trans-unit id="a34d163686fbbea6ead4ca9ff627104eedb8ad61" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;-e&lt;/code&gt;, &lt;code&gt;--env&lt;/code&gt;, and &lt;code&gt;--env-file&lt;/code&gt; flags to set simple (non-array) environment variables in the container you&amp;rsquo;re running, or overwrite variables that are defined in the Dockerfile of the image you&amp;rsquo;re running.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 、-- &lt;code&gt;--env&lt;/code&gt; 、および &lt;code&gt;--env-file&lt;/code&gt; フラグを使用して、実行中のコンテナーに単純な（非配列）環境変数を設定するか、実行中のイメージのDockerfileで定義されている変数を上書きします。</target>
        </trans-unit>
        <trans-unit id="1a7e81f19c501d66637064b74f32e8e856a2cf60" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;-f&lt;/code&gt; flag to specify the location of a Compose configuration file.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; フラグを使用して、Compose構成ファイルの場所を指定します。</target>
        </trans-unit>
        <trans-unit id="876f9a0004ab69d3886014f3265d4483878ee784" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;device&lt;/code&gt; option to specify GPUs. The example below exposes a specific GPU.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; オプションを使用してGPUを指定します。以下の例は、特定のGPUを公開しています。</target>
        </trans-unit>
        <trans-unit id="bbdc154955bccd68c1a0e7c293ac8431187041fb" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;docker service rollback&lt;/code&gt; command to roll back to the previous version of a service. After executing this command, the service is reverted to the configuration that was in place before the most recent &lt;code&gt;docker service update&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;docker service rollback&lt;/code&gt; コマンドを使用して、サービスの以前のバージョンにロールバックします。このコマンドを実行すると、サービスは最新の &lt;code&gt;docker service update&lt;/code&gt; コマンドの前に設定されていた構成に戻ります。</target>
        </trans-unit>
        <trans-unit id="6e749702c99f0387f69002427d23fdc0f0a10d64" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;docker trust inspect&lt;/code&gt; to get trust information about an image. The following example prints trust information for the &lt;code&gt;alpine:latest&lt;/code&gt; image:</source>
          <target state="translated">&lt;code&gt;docker trust inspect&lt;/code&gt; を使用して、イメージに関する信頼情報を取得します。次の例では、 &lt;code&gt;alpine:latest&lt;/code&gt; イメージの信頼情報を出力します。</target>
        </trans-unit>
        <trans-unit id="c285cb03887b848800d51e790ac4d0e4ac89ba70" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;docker-machine&lt;/code&gt; command to interact with the migrated VM.</source>
          <target state="translated">&lt;code&gt;docker-machine&lt;/code&gt; コマンドを使用して、移行したVMを操作します。</target>
        </trans-unit>
        <trans-unit id="b13aa8cf93154502f38eb246c739f261b0f74496" translate="yes" xml:space="preserve">
          <source>Use the Docker command line</source>
          <target state="translated">Dockerコマンドラインを使用します。</target>
        </trans-unit>
        <trans-unit id="1ba239c7035c3af6b195b521af30dd908d81d00c" translate="yes" xml:space="preserve">
          <source>Use the Microsoft Hyper-V driver and reference the new virtual switch you created.</source>
          <target state="translated">Microsoft Hyper-V ドライバを使用して、作成した新しい仮想スイッチを参照します。</target>
        </trans-unit>
        <trans-unit id="ac9d5ed2810beab3507f7e3a62ce58b2cede428d" translate="yes" xml:space="preserve">
          <source>Use the Notary client for advanced users</source>
          <target state="translated">上級者向けのNotaryクライアントを使用する</target>
        </trans-unit>
        <trans-unit id="a768006dbfb9a7d171f8d1753d379ca0747e3e47" translate="yes" xml:space="preserve">
          <source>Use the container volumes</source>
          <target state="translated">コンテナのボリュームを使用します。</target>
        </trans-unit>
        <trans-unit id="f651fb69cc7e68e5b9b635ae8abe36290000c1b5" translate="yes" xml:space="preserve">
          <source>Use the following Dockerfile:</source>
          <target state="translated">以下のDockerfileを使用します。</target>
        </trans-unit>
        <trans-unit id="37129d3dfa011edb2e862ffb42aeaa12e1d86897" translate="yes" xml:space="preserve">
          <source>Use the following command to run &lt;code&gt;htop&lt;/code&gt; inside a container:</source>
          <target state="translated">次のコマンドを使用して、コンテナー内で &lt;code&gt;htop&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="b893fd57c4042d51b8b420d1e0549860cea98e6d" translate="yes" xml:space="preserve">
          <source>Use the following commands to build and run your Docker image:</source>
          <target state="translated">以下のコマンドを使用して、Dockerイメージをビルドして実行します。</target>
        </trans-unit>
        <trans-unit id="9930b29080b4754fdada1a5aaf75b7c874575c47" translate="yes" xml:space="preserve">
          <source>Use the host system&amp;rsquo;s IPC namespace.</source>
          <target state="translated">ホストシステムのIPC名前空間を使用します。</target>
        </trans-unit>
        <trans-unit id="514054573ac52eebdb21e856f973bad73fb5f128" translate="yes" xml:space="preserve">
          <source>Use the host&amp;rsquo;s networking stack, or no networking. Equivalent to &lt;code&gt;docker run --net=host&lt;/code&gt; or &lt;code&gt;docker run --net=none&lt;/code&gt;. Only used if you use &lt;code&gt;docker stack&lt;/code&gt; commands. If you use the &lt;code&gt;docker-compose&lt;/code&gt; command, use &lt;a href=&quot;#network_mode&quot;&gt;network_mode&lt;/a&gt; instead.</source>
          <target state="translated">ホストのネットワークスタックを使用するか、ネットワークを使用しません。同等の &lt;code&gt;docker run --net=host&lt;/code&gt; または &lt;code&gt;docker run --net=none&lt;/code&gt; 。 &lt;code&gt;docker stack&lt;/code&gt; コマンドを使用する場合にのみ使用されます。あなたが使用している場合は &lt;code&gt;docker-compose&lt;/code&gt; コマンドを使用&lt;a href=&quot;#network_mode&quot;&gt;network_modeを&lt;/a&gt;代わりに。</target>
        </trans-unit>
        <trans-unit id="e8a9eb8d7d9acb13997e8a108e8a3ddbdb0a57cf" translate="yes" xml:space="preserve">
          <source>Use the host's network stack inside the container.</source>
          <target state="translated">コンテナ内のホストのネットワークスタックを使用します。</target>
        </trans-unit>
        <trans-unit id="327f2c9a9f6a1d79e424bbcde154274ec5ed1dec" translate="yes" xml:space="preserve">
          <source>Use the latest features without updating the daemon</source>
          <target state="translated">デーモンを更新せずに最新の機能を使用する</target>
        </trans-unit>
        <trans-unit id="b3762352234b8662124ebc9181c6d82898caccbc" translate="yes" xml:space="preserve">
          <source>Use the legacy &lt;code&gt;--link&lt;/code&gt; option</source>
          <target state="translated">従来の &lt;code&gt;--link&lt;/code&gt; オプションを使用する</target>
        </trans-unit>
        <trans-unit id="bce298549ed8e659163cc54cf3988275fd21ea17" translate="yes" xml:space="preserve">
          <source>Use the network stack of another container, specified via its &lt;em&gt;name&lt;/em&gt; or &lt;em&gt;id&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;名前&lt;/em&gt;または&lt;em&gt;ID&lt;/em&gt;で指定された別のコンテナのネットワークスタックを使用します。</target>
        </trans-unit>
        <trans-unit id="9e580a5bd6389f679f4c278f2b6a5ecb3d207897" translate="yes" xml:space="preserve">
          <source>Use the same process, driver, and network switch to create the other nodes.</source>
          <target state="translated">同じプロセス、ドライバ、ネットワークスイッチを使用して、他のノードを作成します。</target>
        </trans-unit>
        <trans-unit id="f3434b4fc56cad13875912ee6e72ff485bbf8a47" translate="yes" xml:space="preserve">
          <source>Use the value specified by the Docker daemon&amp;rsquo;s &lt;code&gt;--exec-opt&lt;/code&gt; . If the &lt;code&gt;daemon&lt;/code&gt; does not specify an isolation technology, Microsoft Windows uses &lt;code&gt;process&lt;/code&gt; as its default value if the</source>
          <target state="translated">Dockerデーモンの &lt;code&gt;--exec-opt&lt;/code&gt; で指定された値を使用します。 &lt;code&gt;daemon&lt;/code&gt; が分離テクノロジーを指定していない場合、Microsoft Windowsは、デフォルト値として &lt;code&gt;process&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0cc19350b5f1e7b1ad499867a509c5f385eef9fd" translate="yes" xml:space="preserve">
          <source>Use the value specified by the Docker daemon&amp;rsquo;s &lt;code&gt;--exec-opt&lt;/code&gt; . If the &lt;code&gt;daemon&lt;/code&gt; does not specify an isolation technology, Microsoft Windows uses &lt;code&gt;process&lt;/code&gt; as its default value.</source>
          <target state="translated">Dockerデーモンの &lt;code&gt;--exec-opt&lt;/code&gt; で指定された値を使用します。 &lt;code&gt;daemon&lt;/code&gt; が分離テクノロジーを指定しない場合、Microsoft Windowsはデフォルト値として &lt;code&gt;process&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5dfd5f9f642283f788e74fbb1d1e2b4d7f1a8be0" translate="yes" xml:space="preserve">
          <source>Use the value specified by the Docker daemon&amp;rsquo;s &lt;code&gt;--exec-opt&lt;/code&gt; or system default (see below).</source>
          <target state="translated">Dockerデーモンの &lt;code&gt;--exec-opt&lt;/code&gt; またはシステムデフォルトで指定された値を使用します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="018046510371089545871813604e7dbb78763bb1" translate="yes" xml:space="preserve">
          <source>Use these links to read about specific commands, or continue to the &lt;a href=&quot;index#example-use-configs-with-a-service&quot;&gt;example about using configs with a service&lt;/a&gt;.</source>
          <target state="translated">これらのリンクを使用して、特定のコマンドについて読むか&lt;a href=&quot;index#example-use-configs-with-a-service&quot;&gt;、サービスでの構成の使用に関する例に進んでください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75ceb9cf50d6148a3ee4b33ac9a7312fd9c30adc" translate="yes" xml:space="preserve">
          <source>Use these links to read about specific commands, or continue to the &lt;a href=&quot;index#example-use-secrets-with-a-service&quot;&gt;example about using secrets with a service&lt;/a&gt;.</source>
          <target state="translated">これらのリンクを使用して、特定のコマンドについて読むか&lt;a href=&quot;index#example-use-secrets-with-a-service&quot;&gt;、サービスでのシークレットの使用に関する例に進んでください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58481994a152b3db812528d8671b0e9f5ce419ed" translate="yes" xml:space="preserve">
          <source>Use this command to list the machines and get their IP addresses.</source>
          <target state="translated">このコマンドを使用して、マシンをリストアップし、そのIPアドレスを取得します。</target>
        </trans-unit>
        <trans-unit id="cfc5a04bd3ea798e5ddd8fc31ad4d9e84b0875d2" translate="yes" xml:space="preserve">
          <source>Use trusted images</source>
          <target state="translated">信頼できる画像を使用する</target>
        </trans-unit>
        <trans-unit id="dc01c23ccc88ce7862c6a234f5c4fbc04d592094" translate="yes" xml:space="preserve">
          <source>Use vhangup(2); employ various privileged ioctl(2) operations on virtual terminals.</source>
          <target state="translated">vhangup(2)を使用。仮想端末上で様々な特権的な ioctl(2)操作を使用。</target>
        </trans-unit>
        <trans-unit id="bd27e4bd20445b10ef5d06a502b3595abea0f1cd" translate="yes" xml:space="preserve">
          <source>Used to send or receive packets and for other socket operations. All &lt;code&gt;socket&lt;/code&gt; and &lt;code&gt;socketcall&lt;/code&gt; calls are blocked except communication domains &lt;code&gt;AF_UNIX&lt;/code&gt;, &lt;code&gt;AF_INET&lt;/code&gt;, &lt;code&gt;AF_INET6&lt;/code&gt;, &lt;code&gt;AF_NETLINK&lt;/code&gt;, and &lt;code&gt;AF_PACKET&lt;/code&gt;.</source>
          <target state="translated">パケットの送受信やその他のソケット操作に使用されます。すべての &lt;code&gt;socket&lt;/code&gt; と &lt;code&gt;socketcall&lt;/code&gt; 呼び出しは、通信ドメインを除いてブロックされている &lt;code&gt;AF_UNIX&lt;/code&gt; 、 &lt;code&gt;AF_INET&lt;/code&gt; 、 &lt;code&gt;AF_INET6&lt;/code&gt; 、 &lt;code&gt;AF_NETLINK&lt;/code&gt; 、および &lt;code&gt;AF_PACKET&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f8a2389a20ca0752aa9e95093515517e90e194c" translate="yes" xml:space="preserve">
          <source>User</source>
          <target state="translated">User</target>
        </trans-unit>
        <trans-unit id="64389f7e1430a98666dbc2c914775241a45f7183" translate="yes" xml:space="preserve">
          <source>User &lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">ユーザー &lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e253405e8205a9cb9e7f7811ae794940498c8db6" translate="yes" xml:space="preserve">
          <source>User defined resources</source>
          <target state="translated">ユーザー定義リソース</target>
        </trans-unit>
        <trans-unit id="9a907a2a9e2d8f2282b25aa37fedd952420dd3fa" translate="yes" xml:space="preserve">
          <source>User guide</source>
          <target state="translated">ユーザーガイド</target>
        </trans-unit>
        <trans-unit id="1cb847a3dac2278c559968ce9e503055d3b0533f" translate="yes" xml:space="preserve">
          <source>User memory constraints</source>
          <target state="translated">ユーザメモリ制約</target>
        </trans-unit>
        <trans-unit id="0675c398a043aa665f1c1d074d1409855793e386" translate="yes" xml:space="preserve">
          <source>User namespace known limitations</source>
          <target state="translated">ユーザ名空間の既知の制限</target>
        </trans-unit>
        <trans-unit id="e0f19b270736e0387cabe617ca97938f825f7765" translate="yes" xml:space="preserve">
          <source>User namespace to use</source>
          <target state="translated">使用するユーザ名前空間</target>
        </trans-unit>
        <trans-unit id="3715b2623594f3f7ac8d73b21f3fe3986d105759" translate="yes" xml:space="preserve">
          <source>User namespaces are an advanced feature and require coordination with other capabilities. For example, if volumes are mounted from the host, file ownership must be pre-arranged need read or write access to the volume contents.</source>
          <target state="translated">ユーザーネームスペースは高度な機能であり、他の機能との連携が必要です。例えば、ボリュームがホストからマウントされている場合、ファイルの所有権は事前に手配されている必要があり、ボリュームのコンテンツへの読み取りまたは書き込みアクセスが必要です。</target>
        </trans-unit>
        <trans-unit id="118509abec5cd94fc68691eb9ce063c3307b62d8" translate="yes" xml:space="preserve">
          <source>User-Signed images</source>
          <target state="translated">ユーザーサイン入り画像</target>
        </trans-unit>
        <trans-unit id="9a39a1e1fc8652e6225162217608c6fcf374a4f8" translate="yes" xml:space="preserve">
          <source>User-defined network</source>
          <target state="translated">ユーザー定義ネットワーク</target>
        </trans-unit>
        <trans-unit id="84c29015de33e5d22422382a372caba5c58f8c01" translate="yes" xml:space="preserve">
          <source>Username</source>
          <target state="translated">Username</target>
        </trans-unit>
        <trans-unit id="bf5a7021b64be8a919a3c120bb534a35fb0a9737" translate="yes" xml:space="preserve">
          <source>Username or UID (format: &amp;lt;name|uid&amp;gt;[:&amp;lt;group|gid&amp;gt;])</source>
          <target state="translated">ユーザー名またはUID（形式：&amp;lt;name | uid&amp;gt; [：&amp;lt;group | gid&amp;gt;]）</target>
        </trans-unit>
        <trans-unit id="a1430319aa374eefa875903c3457ee55eeac660b" translate="yes" xml:space="preserve">
          <source>Username or UID (format: &lt;code&gt;&amp;lt;name|uid&amp;gt;[:&amp;lt;group|gid&amp;gt;]&lt;/code&gt;).</source>
          <target state="translated">ユーザー名またはUID（形式： &lt;code&gt;&amp;lt;name|uid&amp;gt;[:&amp;lt;group|gid&amp;gt;]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="202ab825cb40f4e35914be9964fddef3eda84e79" translate="yes" xml:space="preserve">
          <source>Usernames and passwords</source>
          <target state="translated">ユーザー名とパスワード</target>
        </trans-unit>
        <trans-unit id="4dad39450b558c63572de43822f5c726ed8f0a68" translate="yes" xml:space="preserve">
          <source>Users are expected to take note of the list of deprecated features each release and plan their migration away from those features, and (if applicable) towards the replacement features as soon as possible.</source>
          <target state="translated">ユーザーは、各リリースごとに非推奨機能のリストに注意し、それらの機能からの移行を計画し、(該当する場合には)可能な限り早く代替機能へと移行することが期待されています。</target>
        </trans-unit>
        <trans-unit id="b6504d846f28edd7b99e0310477de017d5658a41" translate="yes" xml:space="preserve">
          <source>Userspace page fault handling, largely needed for process migration.</source>
          <target state="translated">ユーザ空間ページのフォールト処理、プロセスの移行に大きく必要とされる。</target>
        </trans-unit>
        <trans-unit id="487c1a086a7d5f34d804a55cdadb5431b8195301" translate="yes" xml:space="preserve">
          <source>Uses the volume &lt;code&gt;mydata&lt;/code&gt; to store the MySQL data, so that it persists across restarts to the &lt;code&gt;mysql&lt;/code&gt; service.</source>
          <target state="translated">ボリューム &lt;code&gt;mydata&lt;/code&gt; を使用してMySQLデータを保存し、 &lt;code&gt;mysql&lt;/code&gt; サービスの再起動後も保持されるようにします。</target>
        </trans-unit>
        <trans-unit id="4b7fccb045203d94f8e30dbf5172045097ccab88" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;-&lt;/code&gt; as the &lt;code&gt;SRC_PATH&lt;/code&gt; streams the contents of &lt;code&gt;STDIN&lt;/code&gt; as a tar archive. The command extracts the content of the tar to the &lt;code&gt;DEST_PATH&lt;/code&gt; in container&amp;rsquo;s filesystem. In this case, &lt;code&gt;DEST_PATH&lt;/code&gt; must specify a directory. Using &lt;code&gt;-&lt;/code&gt; as the &lt;code&gt;DEST_PATH&lt;/code&gt; streams the contents of the resource as a tar archive to &lt;code&gt;STDOUT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SRC_PATH&lt;/code&gt; として &lt;code&gt;-&lt;/code&gt; を使用すると、 &lt;code&gt;STDIN&lt;/code&gt; の内容がtarアーカイブとしてストリーミングされます。このコマンドは、tarの内容をコンテナのファイルシステムの &lt;code&gt;DEST_PATH&lt;/code&gt; に抽出します。この場合、 &lt;code&gt;DEST_PATH&lt;/code&gt; はディレクトリを指定する必要があります。使い方 &lt;code&gt;-&lt;/code&gt; として &lt;code&gt;DEST_PATH&lt;/code&gt; にtarアーカイブとしてのリソースの内容をストリーム &lt;code&gt;STDOUT&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7213dd66c162bd46f821b1d3520ef6e0eff91987" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;build&lt;/code&gt; together with &lt;a href=&quot;#image&quot;&gt;&lt;code&gt;image&lt;/code&gt;&lt;/a&gt; is not allowed. Attempting to do so results in an error.</source>
          <target state="translated">&lt;a href=&quot;#image&quot;&gt; &lt;code&gt;image&lt;/code&gt; &lt;/a&gt;と一緒に &lt;code&gt;build&lt;/code&gt; を使用することはできません。実行しようとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="6353a5e8d38af3248c7ed0cfdcdf69d15d92f39d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;docker-machine&lt;/code&gt; commands, you can start, inspect, stop, and restart a managed host, upgrade the Docker client and daemon, and configure a Docker client to talk to your host.</source>
          <target state="translated">&lt;code&gt;docker-machine&lt;/code&gt; コマンドを使用すると、管理対象ホストを起動、検査、停止、再起動し、Dockerクライアントとデーモンをアップグレードし、ホストと通信するようにDockerクライアントを構成できます。</target>
        </trans-unit>
        <trans-unit id="a4e7d432dd8c1a4aa02d6db1bdfd5b49b04b31c5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;dockerfile&lt;/code&gt; together with &lt;a href=&quot;#image&quot;&gt;&lt;code&gt;image&lt;/code&gt;&lt;/a&gt; is not allowed. Attempting to do so results in an error.</source>
          <target state="translated">&lt;a href=&quot;#image&quot;&gt; &lt;code&gt;image&lt;/code&gt; &lt;/a&gt;と一緒に &lt;code&gt;dockerfile&lt;/code&gt; を使用することはできません。実行しようとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="21f55b220d2d250198a8a92e4efa305301559ca3" translate="yes" xml:space="preserve">
          <source>Using ARG variables</source>
          <target state="translated">ARG変数の使用</target>
        </trans-unit>
        <trans-unit id="a25733219ecab6a5156ac9dd36a4d36d4e8d0710" translate="yes" xml:space="preserve">
          <source>Using Compose is basically a three-step process:</source>
          <target state="translated">Composeを使うというのは、基本的には3段階のプロセスを経ることになります。</target>
        </trans-unit>
        <trans-unit id="ffb0ce40d8c902505cc68bdb96138750e9c16bd4" translate="yes" xml:space="preserve">
          <source>Using DCT in an offline environment</source>
          <target state="translated">オフライン環境でのDCTの使用</target>
        </trans-unit>
        <trans-unit id="f1be6efbe8ebab50d868665850ab2d4d8c33698f" translate="yes" xml:space="preserve">
          <source>Using Docker Content Trust with a Remote UCP Cluster</source>
          <target state="translated">リモートUCPクラスタでDocker Content Trustを使用する</target>
        </trans-unit>
        <trans-unit id="6bbcbc36a30c9ceab9ec3c0a016895b501b3886d" translate="yes" xml:space="preserve">
          <source>Using Docker Trust to Generate Keys</source>
          <target state="translated">Docker Trustを使ってキーを生成する</target>
        </trans-unit>
        <trans-unit id="18564a981f5e5336e7fa4c1eaa0a49266352464c" translate="yes" xml:space="preserve">
          <source>Using TLS and managing a CA is an advanced topic. Please familiarize yourself with OpenSSL, x509, and TLS before using it in production.</source>
          <target state="translated">TLS の使用と CA の管理は高度なトピックです。本番で使用する前に OpenSSL,x509,TLS に慣れておいてください。</target>
        </trans-unit>
        <trans-unit id="29d7902f47653a1d7e4ac5acd9f57c9a6d6812a8" translate="yes" xml:space="preserve">
          <source>Using Universal Control Plane&amp;rsquo;s Client Bundles</source>
          <target state="translated">ユニバーサルコントロールプレーンのクライアントバンドルの使用</target>
        </trans-unit>
        <trans-unit id="150e9f9137f0817b9182f120d1190f3c847c432a" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;https://raft.github.io/raft.pdf&quot;&gt;Raft&lt;/a&gt; implementation, the managers maintain a consistent internal state of the entire swarm and all the services running on it. For testing purposes it is OK to run a swarm with a single manager. If the manager in a single-manager swarm fails, your services continue to run, but you need to create a new cluster to recover.</source>
          <target state="translated">&lt;a href=&quot;https://raft.github.io/raft.pdf&quot;&gt;Raft&lt;/a&gt;実装を使用して、マネージャは、スウォーム全体とその上で実行されているすべてのサービスの一貫した内部状態を維持します。テスト目的で、単一のマネージャーでスウォームを実行することは問題ありません。単一マネージャー群のマネージャーで障害が発生した場合、サービスは引き続き実行されますが、回復するには新しいクラスターを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="474dc15f6523675b181c05db7a5e3fe1d69ccace" translate="yes" xml:space="preserve">
          <source>Using certificates for repository client verification</source>
          <target state="translated">リポジトリクライアントの検証に証明書を使用する</target>
        </trans-unit>
        <trans-unit id="dcca70c7c2a9ce8bd728aafe0f4326d888cad94d" translate="yes" xml:space="preserve">
          <source>Using curl to debug plugin socket issues.</source>
          <target state="translated">プラグインのソケットの問題をデバッグするために curl を使用しています。</target>
        </trans-unit>
        <trans-unit id="b8278295279aaa1b95d64c032ef52b057c0375f1" translate="yes" xml:space="preserve">
          <source>Using docker-runc to obtain logfiles and shell into the plugin.</source>
          <target state="translated">docker-runcを使ってログファイルを取得し、プラグインにシェルを入れています。</target>
        </trans-unit>
        <trans-unit id="573f927e5781624d059f1015cc981ebc06b7f35e" translate="yes" xml:space="preserve">
          <source>Using multiple Compose files enables you to customize a Compose application for different environments or different workflows.</source>
          <target state="translated">複数のComposeファイルを使用することで、異なる環境やワークフローに合わせてComposeアプリケーションをカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="d6ca8e76e4798cfdae7c1cac2e836bad104ec775" translate="yes" xml:space="preserve">
          <source>Using multiple filters will be handled as a &lt;em&gt;AND&lt;/em&gt;; for example &lt;code&gt;--filter container=588a23dac085 --filter event=start&lt;/code&gt; will display events for container container 588a23dac085 &lt;em&gt;AND&lt;/em&gt; the event type is &lt;em&gt;start&lt;/em&gt;</source>
          <target state="translated">複数のフィルターを使用すると、&lt;em&gt;AND&lt;/em&gt;として処理されます。例えば &lt;code&gt;--filter container=588a23dac085 --filter event=start&lt;/code&gt; コンテナコンテナ588a23dac085のイベントが表示されます&lt;em&gt;と&lt;/em&gt;イベントタイプがある&lt;em&gt;スタートを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0eb3f8c495b124e83f4fdb773c68ac12e4834d88" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--cgroup-parent&lt;/code&gt; flag, you can pass a specific cgroup to run a container in. This allows you to create and manage cgroups on their own. You can define custom resources for those cgroups and put containers under a common parent group.</source>
          <target state="translated">&lt;code&gt;--cgroup-parent&lt;/code&gt; フラグを使用すると、特定のcgroupを渡してコンテナーを実行できます。これにより、cgroupを独自に作成および管理できます。これらのcgroupのカスタムリソースを定義し、コンテナーを共通の親グループの下に置くことができます。</target>
        </trans-unit>
        <trans-unit id="88003bd74a22a4eb29911529e2caa26fa2e33943" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--privileged&lt;/code&gt; mode flag on &lt;code&gt;docker run&lt;/code&gt; without also specifying &lt;code&gt;--userns=host&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;--privileged&lt;/code&gt; のモードフラグ &lt;code&gt;docker run&lt;/code&gt; も指定せずに &lt;code&gt;--userns=host&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb95555c637eb63b10c173af092ba0840e912eb2" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--restart&lt;/code&gt; flag on Docker run you can specify a restart policy for how a container should or should not be restarted on exit.</source>
          <target state="translated">Dockerの実行で &lt;code&gt;--restart&lt;/code&gt; フラグを使用すると、コンテナーを終了時に再起動する方法としない方法の再起動ポリシーを指定できます。</target>
        </trans-unit>
        <trans-unit id="fbea4831f47b9328f9e31923e1c2058584d8aa40" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--ulimit&lt;/code&gt; option with &lt;code&gt;docker build&lt;/code&gt; will cause each build step&amp;rsquo;s container to be started using those &lt;a href=&quot;../run/index#set-ulimits-in-container-ulimit&quot;&gt;&lt;code&gt;--ulimit&lt;/code&gt; flag values&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--ulimit&lt;/code&gt; オプションを使用 &lt;code&gt;docker build&lt;/code&gt; と、各ビルドステップのコンテナーがそれらの&lt;a href=&quot;../run/index#set-ulimits-in-container-ulimit&quot;&gt; &lt;code&gt;--ulimit&lt;/code&gt; フラグ値&lt;/a&gt;を使用して開始されます。</target>
        </trans-unit>
        <trans-unit id="faeed98db8d69f44e4b8b84af556fd9f03650ba5" translate="yes" xml:space="preserve">
          <source>Using the example above but a different &lt;code&gt;ENV&lt;/code&gt; specification you can create more useful interactions between &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;ENV&lt;/code&gt; instructions:</source>
          <target state="translated">上記の例を使用して、別の &lt;code&gt;ENV&lt;/code&gt; 仕様を使用すると、 &lt;code&gt;ARG&lt;/code&gt; 命令と &lt;code&gt;ENV&lt;/code&gt; 命令の間にさらに有用な相互作用を作成できます。</target>
        </trans-unit>
        <trans-unit id="a0d689502a08159312ecb654a041bcd3635de33c" translate="yes" xml:space="preserve">
          <source>Using the routing mesh</source>
          <target state="translated">ルーティングメッシュの使用</target>
        </trans-unit>
        <trans-unit id="eab81e094af40964b3ef6c5a4c4d0b68f95cdfa4" translate="yes" xml:space="preserve">
          <source>Using the routing mesh may not be the right choice for your application if you need to make routing decisions based on application state or you need total control of the process for routing requests to your service&amp;rsquo;s tasks. To publish a service&amp;rsquo;s port directly on the node where it is running, use the &lt;code&gt;mode=host&lt;/code&gt; option to the &lt;code&gt;--publish&lt;/code&gt; flag.</source>
          <target state="translated">アプリケーションの状態に基づいてルーティングを決定する必要がある場合、またはサービスのタスクにリクエストをルーティングするプロセスを完全に制御する必要がある場合、ルーティングメッシュの使用は、アプリケーションにとって適切な選択ではない場合があります。サービスが実行されているノードでサービスのポートを直接公開するには、 &lt;code&gt;--publish&lt;/code&gt; フラグに &lt;code&gt;mode=host&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="6848acf2229e6b1433fdbeca8c26c0cb10dbca9a" translate="yes" xml:space="preserve">
          <source>Using the same filter multiple times will be handled as a &lt;em&gt;OR&lt;/em&gt;; for example &lt;code&gt;--filter container=588a23dac085 --filter container=a8f7720b8c22&lt;/code&gt; will display events for container 588a23dac085 &lt;em&gt;OR&lt;/em&gt; container a8f7720b8c22</source>
          <target state="translated">同じフィルターを複数回使用すると、&lt;em&gt;OR&lt;/em&gt;として処理されます。たとえば、-- &lt;code&gt;--filter container=588a23dac085 --filter container=a8f7720b8c22&lt;/code&gt; は、コンテナー588a23dac085 &lt;em&gt;または&lt;/em&gt;コンテナーa8f7720b8c22のイベントを表示します</target>
        </trans-unit>
        <trans-unit id="17e7379447ca9b4bbc15da3c0f555590087a6950" translate="yes" xml:space="preserve">
          <source>Using this Dockerfile example, &lt;code&gt;CONT_IMG_VER&lt;/code&gt; is still persisted in the image but its value would be &lt;code&gt;v1.0.0&lt;/code&gt; as it is the default set in line 3 by the &lt;code&gt;ENV&lt;/code&gt; instruction.</source>
          <target state="translated">このDockerfileの例を使用すると、 &lt;code&gt;CONT_IMG_VER&lt;/code&gt; は引き続きイメージに &lt;code&gt;v1.0.0&lt;/code&gt; れますが、 &lt;code&gt;ENV&lt;/code&gt; 命令によって3行目に設定されているデフォルトであるため、その値はv1.0.0になります。</target>
        </trans-unit>
        <trans-unit id="9546f8c33084c5412fed71eb5574764fbcd6409c" translate="yes" xml:space="preserve">
          <source>Using this flag will not alter the output you see when the &lt;code&gt;ARG&lt;/code&gt; lines from the Dockerfile are echoed during the build process.</source>
          <target state="translated">このフラグを使用しても、ビルドプロセス中にDockerfileからの &lt;code&gt;ARG&lt;/code&gt; 行がエコーされたときに表示される出力は変更されません。</target>
        </trans-unit>
        <trans-unit id="2b59888e464af62259fbeaf603b0bae69e8075ca" translate="yes" xml:space="preserve">
          <source>Using this subsystem, you don&amp;rsquo;t need to rebuild the Docker daemon to add an authorization plugin. You can add a plugin to an installed Docker daemon. You do need to restart the Docker daemon to add a new plugin.</source>
          <target state="translated">このサブシステムを使用すると、承認プラグインを追加するためにDockerデーモンを再構築する必要はありません。インストールされているDockerデーモンにプラグインを追加できます。新しいプラグインを追加するには、Dockerデーモンを再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="1511ac65fb3c540e87d816a3aacb8ac11619d3d4" translate="yes" xml:space="preserve">
          <source>Usually, the manager can resolve the tag to a new digest and the service updates, redeploying each task to use the new image. If the manager can&amp;rsquo;t resolve the tag or some other problem occurs, the next two sections outline what to expect.</source>
          <target state="translated">通常、マネージャーは新しいダイジェストとサービスの更新にタグを解決し、各タスクを再デプロイして新しいイメージを使用できます。マネージャーがタグを解決できない場合、またはその他の問題が発生した場合、次の2つのセクションでは、何を期待するかについて概説します。</target>
        </trans-unit>
        <trans-unit id="5df12e6cdb701b48ea8d46489a50d537adf91c0f" translate="yes" xml:space="preserve">
          <source>VMs on your local machine (Mac, Linux, Windows 7 and 8)</source>
          <target state="translated">ローカルマシン上のVM(Mac、Linux、Windows 7および8</target>
        </trans-unit>
        <trans-unit id="26a1fc6bac6fb3a75465beee95f220edad8cb4ea" translate="yes" xml:space="preserve">
          <source>VMs on your local machine (Windows 10)</source>
          <target state="translated">ローカルマシン上のVM(Windows 10</target>
        </trans-unit>
        <trans-unit id="9aaa1b1f9336f067178a5191e0425fb86fa20f73" translate="yes" xml:space="preserve">
          <source>VMware Fusion</source>
          <target state="translated">ブイエムウェアフュージョン</target>
        </trans-unit>
        <trans-unit id="2af560d779fddcd338b6d73eda08fa5e82831652" translate="yes" xml:space="preserve">
          <source>VMware vCloud Air</source>
          <target state="translated">VMware vCloud Air</target>
        </trans-unit>
        <trans-unit id="d5083aaf63cd71d1c84271a3412c9f561638207b" translate="yes" xml:space="preserve">
          <source>VMware vSphere</source>
          <target state="translated">ブイエムウェアヴイエムウェアのvSphere</target>
        </trans-unit>
        <trans-unit id="b380e613c60d3e15e686ef62847eed4bf81a40c0" translate="yes" xml:space="preserve">
          <source>VMware vSphere Storage Plugin</source>
          <target state="translated">VMware vSphere Storage プラグイン</target>
        </trans-unit>
        <trans-unit id="de4f1aab58091db3e6fcebdda92e296c5013d16e" translate="yes" xml:space="preserve">
          <source>VOLUME</source>
          <target state="translated">VOLUME</target>
        </trans-unit>
        <trans-unit id="39e2325c591f732028a94290d78a45e63c85efd4" translate="yes" xml:space="preserve">
          <source>VOLUME (Shared Filesystems)</source>
          <target state="translated">ボリューム(共有ファイルシステム</target>
        </trans-unit>
        <trans-unit id="e3a9804fdc1aac203568413f943fe260c54d2e27" translate="yes" xml:space="preserve">
          <source>VOLUME (shared filesystems)</source>
          <target state="translated">ボリューム(共有ファイルシステム</target>
        </trans-unit>
        <trans-unit id="0503427c09caf2993b662c68e6d6edba046c6165" translate="yes" xml:space="preserve">
          <source>VPC Connectivity</source>
          <target state="translated">VPC接続性</target>
        </trans-unit>
        <trans-unit id="1598d5ccc97080807456f4cff34f0de4e9575114" translate="yes" xml:space="preserve">
          <source>VPC ID</source>
          <target state="translated">ブイピーシーアイディー</target>
        </trans-unit>
        <trans-unit id="7c427f9257d348810e376a747e4c5966fa5d518d" translate="yes" xml:space="preserve">
          <source>Valid placeholders for the Go template are listed below:</source>
          <target state="translated">囲碁テンプレートの有効なプレースホルダを以下に示します。</target>
        </trans-unit>
        <trans-unit id="c807ecd1a2c91fd0beabb0cda6844185d1910dfe" translate="yes" xml:space="preserve">
          <source>Valid placeholders for the Go template are:</source>
          <target state="translated">囲碁テンプレートの有効なプレースホルダは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d425c92fc32058ef8970d49e1fe17ae8c88045d1" translate="yes" xml:space="preserve">
          <source>Validate and view the Compose file.</source>
          <target state="translated">Compose ファイルを検証して表示します。</target>
        </trans-unit>
        <trans-unit id="3f9dfbc76de81860167420a20e547320994c7e7e" translate="yes" xml:space="preserve">
          <source>Validity period for node certificates (ns|us|ms|s|m|h)</source>
          <target state="translated">ノード証明書の有効期間 (ns|us|ms|s|m|h)</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="e61387fe3032095762315b80cb30fc04faa695ac" translate="yes" xml:space="preserve">
          <source>Value of a specific label for this container. For example &lt;code&gt;'{{.Label &quot;com.docker.swarm.cpu&quot;}}'&lt;/code&gt;</source>
          <target state="translated">このコンテナの特定のラベルの値。例： &lt;code&gt;'{{.Label &quot;com.docker.swarm.cpu&quot;}}'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70cb64d3a8ffdd190ffedce7535b1fec085a69fc" translate="yes" xml:space="preserve">
          <source>Value of a specific label for this network. For example &lt;code&gt;{{.Label &quot;project.version&quot;}}&lt;/code&gt;</source>
          <target state="translated">このネットワークの特定のラベルの値。例： &lt;code&gt;{{.Label &quot;project.version&quot;}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39f26e470187356c184843c3476aea4692e1d576" translate="yes" xml:space="preserve">
          <source>Value of a specific label for this secret. For example &lt;code&gt;{{.Label &quot;secret.ssh.key&quot;}}&lt;/code&gt;</source>
          <target state="translated">このシークレットの特定のラベルの値。例： &lt;code&gt;{{.Label &quot;secret.ssh.key&quot;}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="62efbe0c0e827cc408729b3faf370c8d49e6fa6b" translate="yes" xml:space="preserve">
          <source>Value of a specific label for this volume. For example &lt;code&gt;{{.Label &quot;project.version&quot;}}&lt;/code&gt;</source>
          <target state="translated">このボリュームの特定のラベルの値。例： &lt;code&gt;{{.Label &quot;project.version&quot;}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="897e8d96555f36916d5c8d4de8bb1038f12cbd44" translate="yes" xml:space="preserve">
          <source>Values in the shell take precedence over those specified in the &lt;code&gt;.env&lt;/code&gt; file. If you set &lt;code&gt;TAG&lt;/code&gt; to a different value in your shell, the substitution in &lt;code&gt;image&lt;/code&gt; uses that instead:</source>
          <target state="translated">シェルの値は、 &lt;code&gt;.env&lt;/code&gt; ファイルで指定された値よりも優先されます。シェルで &lt;code&gt;TAG&lt;/code&gt; を別の値に設定すると、 &lt;code&gt;image&lt;/code&gt; の置換は代わりにそれを使用します。</target>
        </trans-unit>
        <trans-unit id="521b087d89ed4142ec58a969bbb2ec1d9d9194e9" translate="yes" xml:space="preserve">
          <source>Values present in the environment at runtime always override those defined inside the &lt;code&gt;.env&lt;/code&gt; file. Similarly, values passed via command-line arguments take precedence as well.</source>
          <target state="translated">実行時に環境に存在する値は、常に &lt;code&gt;.env&lt;/code&gt; ファイル内で定義された値をオーバーライドします。同様に、コマンドライン引数を介して渡された値も優先されます。</target>
        </trans-unit>
        <trans-unit id="0bcb3f004c60573ec10519a012c0997b42c166ed" translate="yes" xml:space="preserve">
          <source>Values specified must fall within the range of valid &lt;code&gt;libdm&lt;/code&gt; log levels. At the time of writing, the following is the list of &lt;code&gt;libdm&lt;/code&gt; log levels as well as their corresponding levels when output by &lt;code&gt;dockerd&lt;/code&gt;.</source>
          <target state="translated">指定する値は、有効な &lt;code&gt;libdm&lt;/code&gt; ログレベルの範囲内である必要があります。執筆時点での &lt;code&gt;libdm&lt;/code&gt; ログレベルと、 &lt;code&gt;dockerd&lt;/code&gt; による出力時の対応するレベルのリストを次に示します。</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="27399800b1113fffd2705de35e2951ae1e310377" translate="yes" xml:space="preserve">
          <source>Variable is not defined</source>
          <target state="translated">変数が定義されていない</target>
        </trans-unit>
        <trans-unit id="af6a117cf9cae5d8127a5c83e908e26e4094605c" translate="yes" xml:space="preserve">
          <source>Variable substitution</source>
          <target state="translated">変数の置換</target>
        </trans-unit>
        <trans-unit id="effb0b04b40314fb1d7313704500d659d84c9510" translate="yes" xml:space="preserve">
          <source>Variables and moving a composition between environments</source>
          <target state="translated">変数と環境間での構図の移動</target>
        </trans-unit>
        <trans-unit id="9cc5240a5eef09b3119be6653286e5d3a5706280" translate="yes" xml:space="preserve">
          <source>Variables starting with &lt;code&gt;DOCKER_&lt;/code&gt; are the same as those used to configure the Docker command-line client. If you&amp;rsquo;re using &lt;code&gt;docker-machine&lt;/code&gt;, then the &lt;code&gt;eval &quot;$(docker-machine env my-docker-vm)&quot;&lt;/code&gt; command should set them to their correct values. (In this example, &lt;code&gt;my-docker-vm&lt;/code&gt; is the name of a machine you created.)</source>
          <target state="translated">&lt;code&gt;DOCKER_&lt;/code&gt; で始まる変数は、Dockerコマンドラインクライアントの構成に使用される変数と同じです。 &lt;code&gt;docker-machine&lt;/code&gt; を使用している場合は、 &lt;code&gt;eval &quot;$(docker-machine env my-docker-vm)&quot;&lt;/code&gt; コマンドで正しい値に設定する必要があります。（この例では、 &lt;code&gt;my-docker-vm&lt;/code&gt; は作成したマシンの名前です。）</target>
        </trans-unit>
        <trans-unit id="e239d005dd99d7234bb8679647a5242429d5295b" translate="yes" xml:space="preserve">
          <source>Vboxfs suffers from a &lt;a href=&quot;https://www.virtualbox.org/ticket/9069&quot;&gt;longstanding bug&lt;/a&gt; causing &lt;a href=&quot;http://linux.die.net/man/2/sendfile&quot;&gt;sendfile(2)&lt;/a&gt; to serve cached file contents.</source>
          <target state="translated">Vboxfsには、&lt;a href=&quot;http://linux.die.net/man/2/sendfile&quot;&gt;sendfile（2）&lt;/a&gt;がキャッシュされたファイルのコンテンツを提供するという&lt;a href=&quot;https://www.virtualbox.org/ticket/9069&quot;&gt;長年のバグが&lt;/a&gt;あります。</target>
        </trans-unit>
        <trans-unit id="a2e4edb0e72b9ff6e6cab5f904444edf5f91f829" translate="yes" xml:space="preserve">
          <source>Verbose output for diagnostics</source>
          <target state="translated">診断用の冗長出力</target>
        </trans-unit>
        <trans-unit id="a4e1fc87449af076692dd8cb44bddd456b73c65f" translate="yes" xml:space="preserve">
          <source>Verify Docker Engine is installed correctly by running &lt;code&gt;docker&lt;/code&gt; commands.</source>
          <target state="translated">&lt;code&gt;docker&lt;/code&gt; コマンドを実行して、Dockerエンジンが正しくインストールされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="10e8a98c927de2f84da086dd61628f9e826ca916" translate="yes" xml:space="preserve">
          <source>Verify repository client with certificates</source>
          <target state="translated">リポジトリクライアントを証明書で検証</target>
        </trans-unit>
        <trans-unit id="9841759b9ac4b9b220cecfe13d4390bb55f86313" translate="yes" xml:space="preserve">
          <source>Verify that WordPress works by browsing to http://localhost:30000/ on any swarm node again. Use the WordPress username and password from when you ran through the WordPress wizard in the previous task.</source>
          <target state="translated">再度、任意のスウォームノードで http://localhost:30000/にアクセスして、WordPress が動作することを確認します。前のタスクで WordPress ウィザードを実行したときの WordPress のユーザー名とパスワードを使用します。</target>
        </trans-unit>
        <trans-unit id="75683fbc78360bed4f4fa913b887ffba6c50afb3" translate="yes" xml:space="preserve">
          <source>Verify that a namespaced directory exists within &lt;code&gt;/var/lib/docker/&lt;/code&gt; named with the UID and GID of the namespaced user, owned by that UID and GID, and not group-or-world-readable. Some of the subdirectories are still owned by &lt;code&gt;root&lt;/code&gt; and have different permissions.</source>
          <target state="translated">名前空間付きディレクトリが &lt;code&gt;/var/lib/docker/&lt;/code&gt; 内に存在し、名前空間付きユーザーのUIDとGIDで名前が付けられ、そのUIDとGIDによって所有され、グループまたは世界から読み取り可能ではないことを確認します。一部のサブディレクトリはまだ &lt;code&gt;root&lt;/code&gt; によって所有されており、異なる権限を持っています。</target>
        </trans-unit>
        <trans-unit id="cb126571c7633e331b62f2f0b88286eeed7a57fc" translate="yes" xml:space="preserve">
          <source>Verify that all your nodes are actively available.</source>
          <target state="translated">すべてのノードがアクティブに利用可能であることを確認します。</target>
        </trans-unit>
        <trans-unit id="fe96c9a7de858ea0c7f972f855d689151f0a42a8" translate="yes" xml:space="preserve">
          <source>Verify that previous images are not available using the &lt;code&gt;docker image ls&lt;/code&gt; command. The output should be empty.</source>
          <target state="translated">&lt;code&gt;docker image ls&lt;/code&gt; コマンドを使用して、以前のイメージが使用できないことを確認します。出力は空である必要があります。</target>
        </trans-unit>
        <trans-unit id="2ede84198188ef3b202f8f4291c6ab04ab37a220" translate="yes" xml:space="preserve">
          <source>Verify that the &lt;code&gt;mysql&lt;/code&gt; container is running using the &lt;code&gt;docker service ls&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;docker service ls&lt;/code&gt; コマンドを使用して、 &lt;code&gt;mysql&lt;/code&gt; コンテナーが実行されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="97d81f04f6bd5339d72342d411ad96364c4afde4" translate="yes" xml:space="preserve">
          <source>Verify that the &lt;code&gt;nginx&lt;/code&gt; service is fully re-deployed, using &lt;code&gt;docker service ps nginx&lt;/code&gt;. When it is, you can remove the old &lt;code&gt;site.conf&lt;/code&gt; config.</source>
          <target state="translated">&lt;code&gt;docker service ps nginx&lt;/code&gt; を使用して、 &lt;code&gt;nginx&lt;/code&gt; サービスが完全に再デプロイされていることを確認します。その場合は、古い &lt;code&gt;site.conf&lt;/code&gt; 構成を削除できます。</target>
        </trans-unit>
        <trans-unit id="fd2f0fa3a988a4a4d81f297938bd8a1786b09005" translate="yes" xml:space="preserve">
          <source>Verify that the Nginx service is running.</source>
          <target state="translated">Nginx サービスが動作していることを確認します。</target>
        </trans-unit>
        <trans-unit id="58bb4effce2e90b5d7181c485ba1da349da5dd85" translate="yes" xml:space="preserve">
          <source>Verify that the blog post you wrote still exists, and if you changed any configuration values, verify that they are still changed.</source>
          <target state="translated">書いたブログ記事がまだ存在しているかどうかを確認し、設定値を変更した場合は変更されていないかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="72f215df400f6ddd80ea418d33ee12780957e790" translate="yes" xml:space="preserve">
          <source>Verify that the entry has been added to &lt;code&gt;/etc/subuid&lt;/code&gt; and &lt;code&gt;/etc/subgid&lt;/code&gt;:</source>
          <target state="translated">エントリが &lt;code&gt;/etc/subuid&lt;/code&gt; および &lt;code&gt;/etc/subgid&lt;/code&gt; に追加されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="d17175d412b068d117e322b69f6a8810fb94984b" translate="yes" xml:space="preserve">
          <source>Verify that the secret is &lt;strong&gt;not&lt;/strong&gt; available if you commit the container.</source>
          <target state="translated">秘密があることを確認し&lt;strong&gt;ていない&lt;/strong&gt;あなたは、コンテナをコミットした場合に利用できます。</target>
        </trans-unit>
        <trans-unit id="ae88b312bf159a66f16531d2429c32b50d7fdf7a" translate="yes" xml:space="preserve">
          <source>Verify that the service is operational: you can reach the Nginx server, and that the correct TLS certificate is being used.</source>
          <target state="translated">サービスが動作していることを確認してください。Nginx サーバーに接続でき、正しい TLS 証明書が使用されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="87dd3bf7f6327977fc668a24a9b0309bc62b4707" translate="yes" xml:space="preserve">
          <source>Verify that the state of the swarm is as expected. This may include application-specific tests or simply checking the output of &lt;code&gt;docker service ls&lt;/code&gt; to be sure that all expected services are present.</source>
          <target state="translated">スウォームの状態が期待どおりであることを確認します。これには、アプリケーション固有のテストや、 &lt;code&gt;docker service ls&lt;/code&gt; 出力をチェックして、予想されるすべてのサービスが存在することを確認することが含まれます。</target>
        </trans-unit>
        <trans-unit id="59050bba180e19419fa3fe32ca1eb4d1fcc88d62" translate="yes" xml:space="preserve">
          <source>Verify that the task is running without issues using &lt;code&gt;docker service ps&lt;/code&gt;. If everything is working, the output looks similar to this:</source>
          <target state="translated">&lt;code&gt;docker service ps&lt;/code&gt; を使用して、タスクが問題なく実行されていることを確認します。すべてが機能している場合、出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="060f5aa996cfb8f33b58584154e12d3e34d1f475" translate="yes" xml:space="preserve">
          <source>Verify that the volume was created successfully.</source>
          <target state="translated">ボリュームが正常に作成されたことを確認します。</target>
        </trans-unit>
        <trans-unit id="a074e7f60903500a6bc31a4c82aa4f09de27088a" translate="yes" xml:space="preserve">
          <source>Verify the service is running using &lt;code&gt;docker service ls&lt;/code&gt; and &lt;code&gt;docker service ps&lt;/code&gt; commands.</source>
          <target state="translated">&lt;code&gt;docker service ls&lt;/code&gt; コマンドと &lt;code&gt;docker service ps&lt;/code&gt; コマンドを使用して、サービスが実行されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="db3cbc01da600701b9fe4a497fe328e71fa7022f" translate="yes" xml:space="preserve">
          <source>Version 1</source>
          <target state="translated">バージョン1</target>
        </trans-unit>
        <trans-unit id="bb58d3b6a37c4a866ee4ccee469b5707725652a8" translate="yes" xml:space="preserve">
          <source>Version 1 files cannot declare named &lt;a href=&quot;../index#volume-configuration-reference&quot;&gt;volumes&lt;/a&gt;, &lt;a href=&quot;../index#network-configuration-reference&quot;&gt;networks&lt;/a&gt; or &lt;a href=&quot;../index#args&quot;&gt;build arguments&lt;/a&gt;.</source>
          <target state="translated">バージョン1ファイルは、名前付き&lt;a href=&quot;../index#volume-configuration-reference&quot;&gt;ボリューム&lt;/a&gt;、&lt;a href=&quot;../index#network-configuration-reference&quot;&gt;ネットワーク、&lt;/a&gt;または&lt;a href=&quot;../index#args&quot;&gt;ビルド引数を&lt;/a&gt;宣言できません。</target>
        </trans-unit>
        <trans-unit id="f65156b44d7d75e30447da365363273de1e0249d" translate="yes" xml:space="preserve">
          <source>Version 1 is supported by &lt;strong&gt;Compose up to 1.6.x&lt;/strong&gt;. It will be deprecated in a future Compose release.</source>
          <target state="translated">バージョン1は&lt;strong&gt;、1.6.xまでのCompose&lt;/strong&gt;でサポートさ&lt;strong&gt;れてい&lt;/strong&gt;ます。今後のComposeリリースでは非推奨になる予定です。</target>
        </trans-unit>
        <trans-unit id="cf2944d770dee8a8ddf0ec12b4ba2911650e817b" translate="yes" xml:space="preserve">
          <source>Version 1 to 2.x</source>
          <target state="translated">バージョン1~2.x</target>
        </trans-unit>
        <trans-unit id="ed833ddaa491a9c3de776df53d58577dbceb2c22" translate="yes" xml:space="preserve">
          <source>Version 1 updates</source>
          <target state="translated">バージョン1のアップデート</target>
        </trans-unit>
        <trans-unit id="df03c4691c0d3c0e461705e519187287600e5c7e" translate="yes" xml:space="preserve">
          <source>Version 1, the legacy format. This is specified by omitting a &lt;code&gt;version&lt;/code&gt; key at the root of the YAML.</source>
          <target state="translated">バージョン1、レガシーフォーマット。これは、YAMLのルートで &lt;code&gt;version&lt;/code&gt; キーを省略して指定されます。</target>
        </trans-unit>
        <trans-unit id="122332c273069bd6389c03468d93e9275f0c7d4d" translate="yes" xml:space="preserve">
          <source>Version 1.8.3 added a flag (&lt;code&gt;--disable-legacy-registry=false&lt;/code&gt;) which prevents the docker daemon from &lt;code&gt;pull&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, and &lt;code&gt;login&lt;/code&gt; operations against v1 registries. Though enabled by default, this signals the intent to deprecate the v1 protocol.</source>
          <target state="translated">バージョン1.8.3には、Dockerデーモンがv1レジストリに対して &lt;code&gt;pull&lt;/code&gt; 、 &lt;code&gt;push&lt;/code&gt; 、および &lt;code&gt;login&lt;/code&gt; 操作を実行できないようにするフラグ（ &lt;code&gt;--disable-legacy-registry=false&lt;/code&gt; ）が追加されました。これはデフォルトで有効になっていますが、v1プロトコルを廃止する意向を示しています。</target>
        </trans-unit>
        <trans-unit id="57ce28f628abe360a4bb4a57891d0472e82ed0fe" translate="yes" xml:space="preserve">
          <source>Version 2</source>
          <target state="translated">バージョン2</target>
        </trans-unit>
        <trans-unit id="6077300f49ef62cdcc5c287978e6d92d812dbde8" translate="yes" xml:space="preserve">
          <source>Version 2 files are supported by &lt;strong&gt;Compose 1.6.0+&lt;/strong&gt; and require a Docker Engine of version &lt;strong&gt;1.10.0+&lt;/strong&gt;.</source>
          <target state="translated">バージョン2のファイルは&lt;strong&gt;Compose 1.6.0以降で&lt;/strong&gt;サポートされており、バージョン&lt;strong&gt;1.10.0以降の&lt;/strong&gt; Dockerエンジンが必要です。</target>
        </trans-unit>
        <trans-unit id="20f8d62cea934c59b43ef831f4f9a1e3758c033f" translate="yes" xml:space="preserve">
          <source>Version 2 updates</source>
          <target state="translated">バージョン2アップデート</target>
        </trans-unit>
        <trans-unit id="8870139b38dc6dbcc333e4720c5638bbcccaba57" translate="yes" xml:space="preserve">
          <source>Version 2.1</source>
          <target state="translated">バージョン2.1</target>
        </trans-unit>
        <trans-unit id="e43c274ed1836390b89e98fe2af4aadc1ee8831c" translate="yes" xml:space="preserve">
          <source>Version 2.2</source>
          <target state="translated">バージョン2.2</target>
        </trans-unit>
        <trans-unit id="3b990092a3cd719217a9e9bcd8bf065a916f5649" translate="yes" xml:space="preserve">
          <source>Version 2.3</source>
          <target state="translated">バージョン2.3</target>
        </trans-unit>
        <trans-unit id="2eb307439b7ee3925eb3d57a7e7e158d89b63311" translate="yes" xml:space="preserve">
          <source>Version 2.4</source>
          <target state="translated">バージョン2.4</target>
        </trans-unit>
        <trans-unit id="80b49fd47a38f255af92346f79ef69c0dc1b4360" translate="yes" xml:space="preserve">
          <source>Version 2.x to 3.x</source>
          <target state="translated">バージョン2.xから3.xへ</target>
        </trans-unit>
        <trans-unit id="1fa04ad3ce1f7e4a4eadb94c3e4ccc312eff244d" translate="yes" xml:space="preserve">
          <source>Version 2.x. This is specified with a &lt;code&gt;version: '2'&lt;/code&gt; or &lt;code&gt;version: '2.1'&lt;/code&gt;, etc., entry at the root of the YAML.</source>
          <target state="translated">バージョン2.x。これは、YAMLのルートにある &lt;code&gt;version: '2'&lt;/code&gt; または &lt;code&gt;version: '2.1'&lt;/code&gt; などのエントリで指定されます。</target>
        </trans-unit>
        <trans-unit id="51867dd1effea73912f84dfad6c4579f1f4c10db" translate="yes" xml:space="preserve">
          <source>Version 3</source>
          <target state="translated">バージョン3</target>
        </trans-unit>
        <trans-unit id="324f4d70180da4a8174554325ebbac7ec5300697" translate="yes" xml:space="preserve">
          <source>Version 3 no longer supports the &lt;code&gt;condition&lt;/code&gt; form of &lt;code&gt;depends_on&lt;/code&gt;.</source>
          <target state="translated">バージョン3では、 &lt;code&gt;depends_on&lt;/code&gt; の &lt;code&gt;condition&lt;/code&gt; 形式はサポートされなくなりました。</target>
        </trans-unit>
        <trans-unit id="6a199670b9471077fb1bf2221a14c0255f156c53" translate="yes" xml:space="preserve">
          <source>Version 3 updates</source>
          <target state="translated">バージョン3のアップデート</target>
        </trans-unit>
        <trans-unit id="f2397db59aec46b597b352dcef0dfe7c259c6d0d" translate="yes" xml:space="preserve">
          <source>Version 3.3</source>
          <target state="translated">バージョン3.3</target>
        </trans-unit>
        <trans-unit id="dcba97985f57416d7e8bedd32b150e30a7a41165" translate="yes" xml:space="preserve">
          <source>Version 3.4</source>
          <target state="translated">バージョン3.4</target>
        </trans-unit>
        <trans-unit id="10dd90c7115b6212ca538c46c8f3eacf1eceeb1f" translate="yes" xml:space="preserve">
          <source>Version 3.5</source>
          <target state="translated">バージョン3.5</target>
        </trans-unit>
        <trans-unit id="86df59d4254b183fd39f197140f1c8c6e06c9758" translate="yes" xml:space="preserve">
          <source>Version 3.6</source>
          <target state="translated">バージョン3.6</target>
        </trans-unit>
        <trans-unit id="e88e00b8980607020b94b99775ebecfdfa4850c7" translate="yes" xml:space="preserve">
          <source>Version 3.7</source>
          <target state="translated">バージョン3.7</target>
        </trans-unit>
        <trans-unit id="7f3c743571fe3735a96b0e4d2408db7ec9d73d9a" translate="yes" xml:space="preserve">
          <source>Version 3.x, the latest and recommended version, designed to be cross-compatible between Compose and the Docker Engine&amp;rsquo;s &lt;a href=&quot;../../../engine/swarm/index&quot;&gt;swarm mode&lt;/a&gt;. This is specified with a &lt;code&gt;version: '3'&lt;/code&gt; or &lt;code&gt;version: '3.1'&lt;/code&gt;, etc., entry at the root of the YAML.</source>
          <target state="translated">最新の推奨バージョンであるバージョン3.xは、ComposeとDocker Engineの&lt;a href=&quot;../../../engine/swarm/index&quot;&gt;スウォームモード&lt;/a&gt;の間で相互互換性を持つように設計されています。これは、YAMLのルートにある &lt;code&gt;version: '3'&lt;/code&gt; または &lt;code&gt;version: '3.1'&lt;/code&gt; などのエントリで指定されます。</target>
        </trans-unit>
        <trans-unit id="2750d3223582565870adf32b96da562927d7229f" translate="yes" xml:space="preserve">
          <source>Versioning</source>
          <target state="translated">Versioning</target>
        </trans-unit>
        <trans-unit id="2e02a424231d4381be56926effaa6badd248c036" translate="yes" xml:space="preserve">
          <source>View or rotate the current swarm CA certificate. This command must target a manager node.</source>
          <target state="translated">現在のスウォーム CA 証明書を表示または回転させます。このコマンドは、マネージャノードをターゲットにする必要があります。</target>
        </trans-unit>
        <trans-unit id="a845082cf701467a055b98cbb669de360100171e" translate="yes" xml:space="preserve">
          <source>View the Rails welcome page!</source>
          <target state="translated">Railsのウェルカムページを見る</target>
        </trans-unit>
        <trans-unit id="09b9771ffea47523c6ba5869b6625ca454b76e29" translate="yes" xml:space="preserve">
          <source>View the current unlock key for a running swarm</source>
          <target state="translated">実行中の大群の現在のロック解除キーを表示する</target>
        </trans-unit>
        <trans-unit id="c0abc415461f90cc6a8a28d93b472ff7f39a0115" translate="yes" xml:space="preserve">
          <source>View the join command or update a swarm join token</source>
          <target state="translated">joinコマンドを表示したり、swarm joinトークンを更新したりする</target>
        </trans-unit>
        <trans-unit id="f49744e72cc31919ad8b19c47d00d3b6e6d30b8e" translate="yes" xml:space="preserve">
          <source>View the status of running services</source>
          <target state="translated">実行中のサービスの状態を表示する</target>
        </trans-unit>
        <trans-unit id="3f6626acc3dc660439c707648a79e7db4aac07f4" translate="yes" xml:space="preserve">
          <source>View the web page running from a container</source>
          <target state="translated">コンテナから実行されているWebページを表示する</target>
        </trans-unit>
        <trans-unit id="bb57f07d3a6254b12cea719128c5aba500d0e7f4" translate="yes" xml:space="preserve">
          <source>Viewing local Delegation keys</source>
          <target state="translated">ローカルの委任キーの表示</target>
        </trans-unit>
        <trans-unit id="2fa1d5236b28ca97fb6fc3adef37744d4ba14107" translate="yes" xml:space="preserve">
          <source>Virtuozzo Storage and Ploop plugin</source>
          <target state="translated">Virtuozzo ストレージと Ploop プラグイン</target>
        </trans-unit>
        <trans-unit id="88831eb06b9412a97982fb64468205454c230d47" translate="yes" xml:space="preserve">
          <source>Volume configuration reference</source>
          <target state="translated">ボリューム構成リファレンス</target>
        </trans-unit>
        <trans-unit id="3c0756ac991fb342e91b75bd22624c6d86c0f336" translate="yes" xml:space="preserve">
          <source>Volume driver</source>
          <target state="translated">ボリュームドライバ</target>
        </trans-unit>
        <trans-unit id="9665af7c3b742ca3077e709658c4e7c951357470" translate="yes" xml:space="preserve">
          <source>Volume name</source>
          <target state="translated">ボリューム名</target>
        </trans-unit>
        <trans-unit id="c0092884648d18615968189067b6fed6c9de7b1b" translate="yes" xml:space="preserve">
          <source>Volume names must be unique among drivers. This means you cannot use the same volume name with two different drivers. If you attempt this &lt;code&gt;docker&lt;/code&gt; returns an error:</source>
          <target state="translated">ボリューム名は、ドライバー間で一意である必要があります。つまり、2つの異なるドライバーで同じボリューム名を使用することはできません。この &lt;code&gt;docker&lt;/code&gt; を試行するとエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="31c57b83b4e550bb5f96a03b2046b6972f611908" translate="yes" xml:space="preserve">
          <source>Volume plugin protocol</source>
          <target state="translated">ボリュームプラグインプロトコル</target>
        </trans-unit>
        <trans-unit id="85a046085cfed4ab0fa9c85d4d2dd7f3174a535e" translate="yes" xml:space="preserve">
          <source>Volume plugins</source>
          <target state="translated">ボリュームプラグイン</target>
        </trans-unit>
        <trans-unit id="21067741377749847fe1f9e53dce5548fcf9997f" translate="yes" xml:space="preserve">
          <source>Volume scope (local, global)</source>
          <target state="translated">ボリュームスコープ(ローカル、グローバル</target>
        </trans-unit>
        <trans-unit id="39c0ee03f2b53ddb768f449a18c7a3e41ad94f8f" translate="yes" xml:space="preserve">
          <source>Volumes</source>
          <target state="translated">Volumes</target>
        </trans-unit>
        <trans-unit id="abc3061eb5952fb8a4b3cad91c75b76f9e61e469" translate="yes" xml:space="preserve">
          <source>Volumes can be used in combination with &lt;code&gt;--read-only&lt;/code&gt; to control where a container writes files. The &lt;code&gt;--read-only&lt;/code&gt; flag mounts the container&amp;rsquo;s root filesystem as read only prohibiting writes to locations other than the specified volumes for the container.</source>
          <target state="translated">ボリュームを &lt;code&gt;--read-only&lt;/code&gt; と組み合わせて使用​​して、コンテナーがファイルを書き込む場所を制御できます。 &lt;code&gt;--read-only&lt;/code&gt; フラグは、コンテナの指定されたボリューム以外の場所への書き込みを禁止する読み取りとコンテナのルートファイルシステムをマウントします。</target>
        </trans-unit>
        <trans-unit id="b5186b04d0afdeb9be2bbb9fb690ba6f6f5d6981" translate="yes" xml:space="preserve">
          <source>Volumes for services, swarms, and stack files</source>
          <target state="translated">サービス、スワーム、スタックファイル用のボリューム</target>
        </trans-unit>
        <trans-unit id="109e67e94a9376d209c22199abd046a5a471d987" translate="yes" xml:space="preserve">
          <source>WAKE_ALARM</source>
          <target state="translated">WAKE_ALARM</target>
        </trans-unit>
        <trans-unit id="9166d7e923bf094d59b59fec4ddb10b2a283f7a1" translate="yes" xml:space="preserve">
          <source>WORKDIR</source>
          <target state="translated">WORKDIR</target>
        </trans-unit>
        <trans-unit id="dfaf2322feaced79826007ad0371dc84b384a65b" translate="yes" xml:space="preserve">
          <source>Want to go deeper? Here are some resources we recommend:</source>
          <target state="translated">もっと深く知りたいですか?ここでは、お勧めのリソースをいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="f39dd51f9bc15001a0f9d2d234ed19ffe267d3ec" translate="yes" xml:space="preserve">
          <source>Warnings about kernel support</source>
          <target state="translated">カーネルサポートに関する警告</target>
        </trans-unit>
        <trans-unit id="4e0f7f0b80ff493cebce75c36d745c8e95c0ddf4" translate="yes" xml:space="preserve">
          <source>We are ready to build the app. Make sure you are still at the top level of your new directory. Here&amp;rsquo;s what &lt;code&gt;ls&lt;/code&gt; should show:</source>
          <target state="translated">アプリを作成する準備が整いました。新しいディレクトリの最上位にいることを確認してください。ここでは何 &lt;code&gt;ls&lt;/code&gt; 表示される必要があります。</target>
        </trans-unit>
        <trans-unit id="68a230a63865d2d95b4d9fd82339db44262aaf16" translate="yes" xml:space="preserve">
          <source>We can set cpus in which to allow execution for containers.</source>
          <target state="translated">コンテナの実行を許可するcpusを設定することができます。</target>
        </trans-unit>
        <trans-unit id="366da03560902580dd32dd32cf53443a4fff968a" translate="yes" xml:space="preserve">
          <source>We can set mems in which to allow execution for containers. Only effective on NUMA systems.</source>
          <target state="translated">コンテナの実行を許可するmemsを設定することができます。NUMAシステムでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="8d42da396ed9877f89a7ca74af37e36df79dc97a" translate="yes" xml:space="preserve">
          <source>We can verify that services were correctly created:</source>
          <target state="translated">サービスが正しく作成されたかどうかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="77fe1afabbf062ff332a4cfaec62863a0318fcda" translate="yes" xml:space="preserve">
          <source>We could find that all layer&amp;rsquo;s name is &lt;code&gt;&amp;lt;missing&amp;gt;&lt;/code&gt;, and there is a new layer with COMMENT &lt;code&gt;merge&lt;/code&gt;.</source>
          <target state="translated">すべてのレイヤーの名前が &lt;code&gt;&amp;lt;missing&amp;gt;&lt;/code&gt; であり、COMMENT &lt;code&gt;merge&lt;/code&gt; を使用した新しいレイヤーがあることがわかりました。</target>
        </trans-unit>
        <trans-unit id="1c55e0cbc39b09229b62d43de855d726f33ad583" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t support completely reloading notary configuration files yet at present. What we support for now is:</source>
          <target state="translated">現在のところ、公証構成ファイルの完全な再ロードはまだサポートしていません。現在サポートしているのは：</target>
        </trans-unit>
        <trans-unit id="81b3d9198cb26408c257b8a1b47b902a2ae41366" translate="yes" xml:space="preserve">
          <source>We have four ways to set user memory usage:</source>
          <target state="translated">ユーザーのメモリ使用量を設定するには、4つの方法があります。</target>
        </trans-unit>
        <trans-unit id="7b2bfb9b5a957c3c6e526c0dfc3dff9f35cd7865" translate="yes" xml:space="preserve">
          <source>We make it easy to build new containers, enable rapid iteration of your applications, and increase the visibility of changes. This helps everyone in your organization understand how an application works and how it is built.</source>
          <target state="translated">新しいコンテナの構築を容易にし、アプリケーションの迅速なイテレーションを可能にし、変更の可視性を高めます。これにより、アプリケーションがどのように動作し、どのように構築されているかを組織内の全員が理解できるようになります。</target>
        </trans-unit>
        <trans-unit id="d490e6a744ded4f2ec028fcf00d4589d74673db0" translate="yes" xml:space="preserve">
          <source>We recommend against using &lt;code&gt;--compatibility&lt;/code&gt; mode in production. Because the resulting configuration is only an approximate using non-Swarm mode properties, it may produce unexpected results.</source>
          <target state="translated">本番 &lt;code&gt;--compatibility&lt;/code&gt; モードを使用しないことをお勧めします。結果の構成は非スウォームモードのプロパティを使用した概算にすぎないため、予期しない結果が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="63c55648ee10e49e4276166a7b4464295934bcd5" translate="yes" xml:space="preserve">
          <source>We recommend keeping up-to-date with newer releases as much as possible. However, if you are using an older version of Docker and want to determine which Compose release is compatible, refer to the &lt;a href=&quot;https://github.com/docker/compose/releases/&quot;&gt;Compose release notes&lt;/a&gt;. Each set of release notes gives details on which versions of Docker Engine are supported, along with compatible Compose file format versions. (See also, the discussion in &lt;a href=&quot;https://github.com/docker/docker.github.io/issues/3404&quot;&gt;issue #3404&lt;/a&gt;.)</source>
          <target state="translated">可能な限り新しいリリースを最新の状態に保つことをお勧めします。ただし、Dockerの古いバージョンを使用していて、互換性のあるComposeリリースを確認する場合は、&lt;a href=&quot;https://github.com/docker/compose/releases/&quot;&gt;Composeリリースノートを&lt;/a&gt;参照してください。リリースノートの各セットには、サポートされているDockerエンジンのバージョンの詳細と、互換性のあるComposeファイル形式のバージョンが記載されています。（&lt;a href=&quot;https://github.com/docker/docker.github.io/issues/3404&quot;&gt;問題＃3404の&lt;/a&gt;議論も参照してください。）</target>
        </trans-unit>
        <trans-unit id="6bab6e6d3df1559fe3f24e9b8fda6afb65cc2539" translate="yes" xml:space="preserve">
          <source>We recommend that you rotate the join tokens in the following circumstances:</source>
          <target state="translated">以下のような状況では、ジョイントークンを回転させることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1c393093ffe550f3d403cfefe135ef95bfe2f962" translate="yes" xml:space="preserve">
          <source>We recommend that you use reverse-DNS notation to prevent your labels from conflicting with those used by other software.</source>
          <target state="translated">他のソフトウェアで使用されているラベルと競合しないように、Reverse-DNS表記を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6692fbf702ea9e455c8bff2ead6fed6b4611d2dd" translate="yes" xml:space="preserve">
          <source>We set both memory and swap memory, so the processes in the container can use 300M memory and 700M swap memory.</source>
          <target state="translated">メモリとスワップメモリの両方を設定しているので、コンテナ内のプロセスは300Mのメモリと700Mのスワップメモリを使用することができます。</target>
        </trans-unit>
        <trans-unit id="f98413083fe76cbf9cb8bf8325393b58bb1a5fc1" translate="yes" xml:space="preserve">
          <source>We set kernel memory without &lt;strong&gt;-m&lt;/strong&gt;, so the processes in the container can use as much memory as they want, but they can only use 50M kernel memory.</source>
          <target state="translated">カーネルメモリは&lt;strong&gt;-m&lt;/strong&gt;なしで設定するため、コンテナ内のプロセスは必要なだけメモリを使用できますが、使用できるのは50Mカーネルメモリのみです。</target>
        </trans-unit>
        <trans-unit id="78fe8be15fe4635a85001408f1a9380dd741043a" translate="yes" xml:space="preserve">
          <source>We set memory and kernel memory, so the processes in the container can use 500M memory in total, in this 500M memory, it can be 50M kernel memory tops.</source>
          <target state="translated">我々は、メモリとカーネルメモリを設定しますので、コンテナ内のプロセスは、この500Mのメモリで、合計で500Mのメモリを使用することができます、それは50Mのカーネルメモリのトップにすることができます。</target>
        </trans-unit>
        <trans-unit id="fe2b21bb29dd1e1ad672f339226dd1ad6f2b13ff" translate="yes" xml:space="preserve">
          <source>We set memory limit and disabled swap memory limit, this means the processes in the container can use 300M memory and as much swap memory as they need (if the host supports swap memory).</source>
          <target state="translated">我々は、メモリ制限を設定し、スワップメモリの制限を無効にし、これは、コンテナ内のプロセスが300Mのメモリと彼らが必要とするだけのスワップメモリを使用することができることを意味します(ホストがスワップメモリをサポートしている場合)。</target>
        </trans-unit>
        <trans-unit id="40172fa41fb0b0bd89d66e2f441ed0b41a50445b" translate="yes" xml:space="preserve">
          <source>We set memory limit only, this means the processes in the container can use 300M memory and 300M swap memory, by default, the total virtual memory size (--memory-swap) will be set as double of memory, in this case, memory + swap would be 2*300M, so processes can use 300M swap memory as well.</source>
          <target state="translated">デフォルトでは、仮想メモリの合計サイズ(--memory-swap)はメモリの2倍に設定され、この場合、メモリ+スワップは2*300Mとなり、プロセスは300Mのスワップメモリを使用することができます。</target>
        </trans-unit>
        <trans-unit id="2756003c44352b8b144da376d4c8094ab2bb4740" translate="yes" xml:space="preserve">
          <source>We set nothing about memory, this means the processes in the container can use as much memory and swap memory as they need.</source>
          <target state="translated">メモリについては何も設定していませんが、これはコンテナ内のプロセスが必要なだけのメモリを使用し、メモリをスワップすることができることを意味します。</target>
        </trans-unit>
        <trans-unit id="74aa67367e9866d0758513576d456609d5644a70" translate="yes" xml:space="preserve">
          <source>We show you how to install a Certificate Authority (CA) root certificate for the registry and how to set the client TLS certificate for verification.</source>
          <target state="translated">レジストリに認証局(CA)ルート証明書をインストールする方法と、検証用のクライアントTLS証明書を設定する方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="4c2b89726dac3a78434ba0cfdbe1b2833535e2a1" translate="yes" xml:space="preserve">
          <source>We talk more about placement constraints and volumes in a moment.</source>
          <target state="translated">配置の制約やボリュームについては、ちょっとした時にもっと話をします。</target>
        </trans-unit>
        <trans-unit id="e83fc7c486f90339b5bcb7a4af628cab560ffa7e" translate="yes" xml:space="preserve">
          <source>We use Amazon Web Services (AWS) as an example.</source>
          <target state="translated">例としてAmazon Web Services(AWS)を使用しています。</target>
        </trans-unit>
        <trans-unit id="755d8d9d60dd22ae6053cf7d3b6948028a166611" translate="yes" xml:space="preserve">
          <source>We want your environment to work better. Docker containers, and the work flow that comes with them, help your developers, sysadmins, QA folks, and release engineers work together to get your code into production and make it useful. We&amp;rsquo;ve created a standard container format that lets developers care about their applications inside containers while sysadmins and operators can work on running the container in your deployment. This separation of duties streamlines and simplifies the management and deployment of code.</source>
          <target state="translated">私たちはあなたの環境がよりよく機能することを望んでいます。Dockerコンテナーとそれに付属するワークフローは、開発者、システム管理者、QA担当者、およびリリースエンジニアが協力して、コードを本番環境に導入して有用なものにするのに役立ちます。sysadminsとオペレーターがデプロイメントでコンテナーの実行に取り組むことができる一方で、開発者がコンテナー内のアプリケーションを気にすることができる標準のコンテナー形式を作成しました。この職務の分離により、コードの管理と展開が合理化および簡素化されます。</target>
        </trans-unit>
        <trans-unit id="806ef39f6ad8d972fd2d94ac9c9cd75aff1a4030" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re assuming your Docker host is reachable at &lt;code&gt;localhost&lt;/code&gt;. If not, replace &lt;code&gt;localhost&lt;/code&gt; with the public IP of your Docker host.</source>
          <target state="translated">Dockerホストが &lt;code&gt;localhost&lt;/code&gt; で到達可能であると想定しています。そうでない場合は、 &lt;code&gt;localhost&lt;/code&gt; をDockerホストのパブリックIPに置き換えます。</target>
        </trans-unit>
        <trans-unit id="501c14d27cbfa328d95ff43ff1c90d31c375b5f0" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re marking &lt;code&gt;/var/lib/couchdb&lt;/code&gt; as a data volume.</source>
          <target state="translated">&lt;code&gt;/var/lib/couchdb&lt;/code&gt; をデータボリュームとしてマークしています。</target>
        </trans-unit>
        <trans-unit id="e2347545d25f54042e61f0399be084433041f178" translate="yes" xml:space="preserve">
          <source>Weave Network Plugin</source>
          <target state="translated">Weave Networkプラグイン</target>
        </trans-unit>
        <trans-unit id="71a9a275d6478de86f55b0a72d6696c524c07d54" translate="yes" xml:space="preserve">
          <source>Web service</source>
          <target state="translated">ウェブサービス</target>
        </trans-unit>
        <trans-unit id="44cd0fb0594edf05fd78853e1e917e894ea150c2" translate="yes" xml:space="preserve">
          <source>Welcome! We are excited that you want to learn Docker. The &lt;em&gt;Docker Get Started Tutorial&lt;/em&gt; teaches you how to:</source>
          <target state="translated">ようこそ！Dockerについて学びたいと思っています。&lt;em&gt;ドッカーはじめようチュートリアルでは&lt;/em&gt;どのようにあなたを教えて：</target>
        </trans-unit>
        <trans-unit id="a36cd21f5706faf4c0a0cbdc8d9da3f9740e19f8" translate="yes" xml:space="preserve">
          <source>What about the redis service to persist data?</source>
          <target state="translated">データを永続化するためのredisサービスは?</target>
        </trans-unit>
        <trans-unit id="8f924a958a541b949a73d78d2b4459c2133f7b78" translate="yes" xml:space="preserve">
          <source>What happens when data is corrupted and you try to pull it when trust is enabled? In this section, you go into the &lt;code&gt;sandboxregistry&lt;/code&gt; and tamper with some data. Then, you try and pull it.</source>
          <target state="translated">データが破損していて、信頼が有効になっているときにそれをプルしようとするとどうなりますか？このセクションでは、 &lt;code&gt;sandboxregistry&lt;/code&gt; に入り、データを改ざんします。次に、それを試し、引っ張ります。</target>
        </trans-unit>
        <trans-unit id="64fb14f8aa88b7d2e91635f389f4edfafe37121c" translate="yes" xml:space="preserve">
          <source>What is Docker Machine?</source>
          <target state="translated">Docker Machineとは?</target>
        </trans-unit>
        <trans-unit id="8d3f04b7718c6aaa0737c4e64011638377583b28" translate="yes" xml:space="preserve">
          <source>What is Notary</source>
          <target state="translated">公証人とは</target>
        </trans-unit>
        <trans-unit id="22a48e7808feb9049f2aea86ade92700f8cf9e4a" translate="yes" xml:space="preserve">
          <source>What is a swarm?</source>
          <target state="translated">群れとは何か?</target>
        </trans-unit>
        <trans-unit id="e799c8f6882e548f3f8cc5d59060bae24daa90ac" translate="yes" xml:space="preserve">
          <source>What is in the sandbox?</source>
          <target state="translated">サンドボックスには何があるの?</target>
        </trans-unit>
        <trans-unit id="29a3958eb701300263e7f339dc7661408e35949a" translate="yes" xml:space="preserve">
          <source>What plugins are</source>
          <target state="translated">どのようなプラグインが</target>
        </trans-unit>
        <trans-unit id="91d14624a28f729837466482c450d97cb2caba59" translate="yes" xml:space="preserve">
          <source>What this means is that the whole container filesystem will belong to the user specified in the &lt;code&gt;--userns-remap&lt;/code&gt; daemon config (&lt;code&gt;231072&lt;/code&gt; in the example above). This can lead to unexpected behavior of programs inside the container. For instance &lt;code&gt;sudo&lt;/code&gt; (which checks that its binaries belong to user &lt;code&gt;0&lt;/code&gt;) or binaries with a &lt;code&gt;setuid&lt;/code&gt; flag.</source>
          <target state="translated">で指定されたこれが意味することは、全体のコンテナファイルシステムがユーザーに属するということです &lt;code&gt;--userns-remap&lt;/code&gt; デーモン設定（ &lt;code&gt;231072&lt;/code&gt; 上記の例では）。これは、コンテナー内のプログラムの予期しない動作につながる可能性があります。たとえば、 &lt;code&gt;sudo&lt;/code&gt; （そのバイナリがユーザー &lt;code&gt;0&lt;/code&gt; に属していることを確認します）または &lt;code&gt;setuid&lt;/code&gt; フラグが設定されたバイナリ。</target>
        </trans-unit>
        <trans-unit id="0c564930a438d61179a5f862967e76654c4d3aaa" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s next?</source>
          <target state="translated">次は何ですか？</target>
        </trans-unit>
        <trans-unit id="c4b37c7c3262c56f99b3e9ba8eb6e0740101d8cd" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s the difference between &lt;code&gt;up&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, and &lt;code&gt;start&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;up&lt;/code&gt; 、 &lt;code&gt;run&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; の違いは何ですか？</target>
        </trans-unit>
        <trans-unit id="82449ea4e8eed626fe3a969bca8775db93e124f4" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s the difference between Docker Engine and Docker Machine?</source>
          <target state="translated">Docker EngineとDocker Machineの違いは何ですか？</target>
        </trans-unit>
        <trans-unit id="70c2d3b747ccd53c30ec4bc3c351c827ec35ba28" translate="yes" xml:space="preserve">
          <source>Whatever existed at the destination path and</source>
          <target state="translated">宛先パスに存在していたものと</target>
        </trans-unit>
        <trans-unit id="34b3793d4180f2428aa3dcdf0c009cb7dbe68827" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../swarm/index&quot;&gt;deploying a Compose application to a Swarm cluster&lt;/a&gt;, you can make use of the built-in &lt;code&gt;overlay&lt;/code&gt; driver to enable multi-host communication between containers with no changes to your Compose file or application code.</source>
          <target state="translated">&lt;a href=&quot;../swarm/index&quot;&gt;ComposeアプリケーションをSwarmクラスター&lt;/a&gt;にデプロイする場合、組み込みの &lt;code&gt;overlay&lt;/code&gt; ドライバーを利用して、Composeファイルやアプリケーションコードに変更を加えることなく、コンテナー間のマルチホスト通信を可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="86ab67af9408393f170b0f50999cc4eddc717193" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;alice&lt;/code&gt;, one of the signers, runs &lt;code&gt;docker trust revoke&lt;/code&gt;:</source>
          <target state="translated">とき &lt;code&gt;alice&lt;/code&gt; 、署名者の一つは、実行される &lt;code&gt;docker trust revoke&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="7e77344ddd0d1be4695ea3e0a4d18f6bc0628add" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;docker build&lt;/code&gt; is run with the &lt;code&gt;--cgroup-parent&lt;/code&gt; option the containers used in the build will be run with the &lt;a href=&quot;../../run/index#specifying-custom-cgroups&quot;&gt;corresponding &lt;code&gt;docker run&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="translated">ときに &lt;code&gt;docker build&lt;/code&gt; 使用して実行され &lt;code&gt;--cgroup-parent&lt;/code&gt; オプションのビルドに使用されるコンテナを使用して実行される&lt;a href=&quot;../../run/index#specifying-custom-cgroups&quot;&gt;、対応する &lt;code&gt;docker run&lt;/code&gt; フラグ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c156fe5743036e2fb55113868b2787c72c394ce3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;udev&lt;/code&gt; sync support is &lt;code&gt;false&lt;/code&gt;, a race condition occurs between the&lt;code&gt;devicemapper&lt;/code&gt; and &lt;code&gt;udev&lt;/code&gt; during create and cleanup. The race condition results in errors and failures. (For information on these failures, see &lt;a href=&quot;https://github.com/docker/docker/issues/4036&quot;&gt;docker#4036&lt;/a&gt;)</source>
          <target state="translated">とき &lt;code&gt;udev&lt;/code&gt; 同期のサポートがある &lt;code&gt;false&lt;/code&gt; 、競合状態が発生する間 &lt;code&gt;devicemapper&lt;/code&gt; と &lt;code&gt;udev&lt;/code&gt; の作成とクリーンアップ中。競合状態はエラーと失敗を引き起こします。（これらの障害については、&lt;a href=&quot;https://github.com/docker/docker/issues/4036&quot;&gt;docker＃4036を&lt;/a&gt;参照してください）</target>
        </trans-unit>
        <trans-unit id="1df12efc747de17bb3d5aee4cee30a91103ed5c1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;udev&lt;/code&gt; sync support is &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;devicemapper&lt;/code&gt; and udev can coordinate the activation and deactivation of devices for containers.</source>
          <target state="translated">場合 &lt;code&gt;udev&lt;/code&gt; の同期サポートは &lt;code&gt;true&lt;/code&gt; 、次いで &lt;code&gt;devicemapper&lt;/code&gt; とudevは容器用デバイスのアクティブ化および非アクティブ化を調整することができます。</target>
        </trans-unit>
        <trans-unit id="dea8f3f7ff571f4a621fc4e7db51e7c51eb451b6" translate="yes" xml:space="preserve">
          <source>When DCT is enabled in the Docker client, &lt;code&gt;docker&lt;/code&gt; CLI commands that operate on tagged images must either have content signatures or explicit content hashes. The commands that operate with DCT are:</source>
          <target state="translated">DockerクライアントでDCTが有効になっている場合、タグ付きイメージを操作する &lt;code&gt;docker&lt;/code&gt; CLIコマンドには、コンテンツ署名または明示的なコンテンツハッシュが必要です。DCTで動作するコマンドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="abd8532f7fb4e42791b7d2d0664e10a49fbd88bd" translate="yes" xml:space="preserve">
          <source>When Docker Machine is invoked, it checks to see if you have the venerable &lt;code&gt;ssh&lt;/code&gt; binary around locally and attempts to use that for the SSH commands it needs to run, whether they are a part of an operation such as creation or have been requested by the user directly. If it does not find an external &lt;code&gt;ssh&lt;/code&gt; binary locally, it defaults to using a native Go implementation from &lt;a href=&quot;https://godoc.org/golang.org/x/crypto/ssh&quot;&gt;crypto/ssh&lt;/a&gt;. This is useful in situations where you may not have access to traditional UNIX tools, such as if you are using Docker Machine on Windows without having msysgit installed alongside of it.</source>
          <target state="translated">Docker Machineが呼び出されると、ローカルに古くなった &lt;code&gt;ssh&lt;/code&gt; バイナリがあるかどうかが確認され、作成などの操作の一部であるか、または直接ユーザー。ローカルで外部 &lt;code&gt;ssh&lt;/code&gt; バイナリが見つからない場合、デフォルトで&lt;a href=&quot;https://godoc.org/golang.org/x/crypto/ssh&quot;&gt;crypto / sshの&lt;/a&gt;ネイティブGo実装が使用されます。これは、WindowsでDocker Machineを使用している場合（横にmsysgitをインストールしていない場合など）、従来のUNIXツールにアクセスできない場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="c2846c04cde815af3b4e60089dd43bbf90583f46" translate="yes" xml:space="preserve">
          <source>When Docker Machine provisions containers on local network provider or with a remote, cloud provider such as Amazon Web Services, you must define both the driver for your provider and a base operating system. There are over 10 supported drivers and a generic driver for adding machines for other providers.</source>
          <target state="translated">Docker MachineがローカルネットワークプロバイダやAmazon Web Servicesのようなリモートのクラウドプロバイダでコンテナをプロビジョニングする場合、プロバイダ用のドライバとベースとなるオペレーティングシステムの両方を定義する必要があります。サポートされているドライバは10種類以上あり、他のプロバイダ用のマシンを追加するための汎用ドライバもあります。</target>
        </trans-unit>
        <trans-unit id="b3e8197f73a2accac0e4f3cb2824a3716c9ce9cf" translate="yes" xml:space="preserve">
          <source>When Docker is running in swarm mode, you can still run standalone containers on any of the Docker hosts participating in the swarm, as well as swarm services. A key difference between standalone containers and swarm services is that only swarm managers can manage a swarm, while standalone containers can be started on any daemon. Docker daemons can participate in a swarm as managers, workers, or both.</source>
          <target state="translated">Dockerがスウォームモードで実行されている場合でも、スウォームサービスと同様に、スウォームに参加しているDockerホストのいずれかでスタンドアロンコンテナを実行することができます。スタンドアロンコンテナとスウォームサービスの主な違いは、スウォームを管理できるのはスウォームマネージャのみであるのに対し、スタンドアロンコンテナはどのデーモンでも起動できるという点です。Dockerデーモンはマネージャー、ワーカー、またはその両方としてスウォームに参加することができます。</target>
        </trans-unit>
        <trans-unit id="71818434b04e6d0a32057c34113db6ef370b899a" translate="yes" xml:space="preserve">
          <source>When Docker restarts, both the TLS key used to encrypt communication among swarm nodes, and the key used to encrypt and decrypt Raft logs on disk, are loaded into each manager node&amp;rsquo;s memory. Docker 1.13 introduces the ability to protect the mutual TLS encryption key and the key used to encrypt and decrypt Raft logs at rest, by allowing you to take ownership of these keys and to require manual unlocking of your managers. This feature is called &lt;em&gt;autolock&lt;/em&gt;.</source>
          <target state="translated">Dockerが再起動すると、スウォームノード間の通信の暗号化に使用されるTLSキーと、ディスク上のRaftログの暗号化と復号化に使用されるキーの両方が、各マネージャーノードのメモリにロードされます。Docker 1.13には、相互のTLS暗号化キーと、Raftログの暗号化と復号化に使用されるキーを保護する機能が導入されています。これにより、これらのキーの所有権を取得し、マネージャーの手動ロック解除を要求できます。この機能は&lt;em&gt;オートロック&lt;/em&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="b5711ab0695665e11b5db9e34e22594bc885dde0" translate="yes" xml:space="preserve">
          <source>When Docker restarts, you must &lt;a href=&quot;index#unlock-a-swarm&quot;&gt;unlock the swarm&lt;/a&gt; first, using a &lt;em&gt;key encryption key&lt;/em&gt; generated by Docker when the swarm was locked. You can rotate this key encryption key at any time.</source>
          <target state="translated">Dockerが再起動したら、スウォームがロックされたときにDockerによって生成された&lt;em&gt;キー暗号化キー&lt;/em&gt;を使用して、最初に&lt;a href=&quot;index#unlock-a-swarm&quot;&gt;スウォームのロックを解除&lt;/a&gt;する必要があります。このキー暗号化キーはいつでもローテーションできます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9206362873923078261c5cb76b5fe2a4bc8a5aad" translate="yes" xml:space="preserve">
          <source>When Docker restarts, you need to &lt;a href=&quot;index#unlock-a-swarm&quot;&gt;unlock the swarm&lt;/a&gt;. A locked swarm causes an error like the following when you try to start or restart a service:</source>
          <target state="translated">Dockerが再起動したら&lt;a href=&quot;index#unlock-a-swarm&quot;&gt;、スウォームのロック&lt;/a&gt;を解除する必要があります。ロックされた群がサービスを開始または再起動しようとすると、次のようなエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="14093156d3f677ba0a426d38fe5b8654ced864c6" translate="yes" xml:space="preserve">
          <source>When a container has a healthcheck specified, it has a &lt;em&gt;health status&lt;/em&gt; in addition to its normal status. This status is initially &lt;code&gt;starting&lt;/code&gt;. Whenever a health check passes, it becomes &lt;code&gt;healthy&lt;/code&gt; (whatever state it was previously in). After a certain number of consecutive failures, it becomes &lt;code&gt;unhealthy&lt;/code&gt;.</source>
          <target state="translated">コンテナーにヘルスチェックが指定されている場合、コンテナーには通常のステータスに加えて&lt;em&gt;ヘルスステータス&lt;/em&gt;があります。このステータスは最初は &lt;code&gt;starting&lt;/code&gt; ます。ヘルスチェックが通過するたびに、それがなり &lt;code&gt;healthy&lt;/code&gt; （それが以前にあったいかなる状態）。一定回数連続して失敗すると、 &lt;code&gt;unhealthy&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="463aa393312b047e8e1bc884819ed358d4da5ec7" translate="yes" xml:space="preserve">
          <source>When a developer builds an image from a &lt;a href=&quot;../builder/index&quot;&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;/a&gt; or when she commits it, the developer can set a number of default parameters that take effect when the image starts up as a container.</source>
          <target state="translated">開発者は、&lt;a href=&quot;../builder/index&quot;&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;/a&gt;からイメージをビルドするとき、またはコミットするときに、イメージがコンテナーとして起動するときに有効になるいくつかのデフォルトパラメーターを設定できます。</target>
        </trans-unit>
        <trans-unit id="127ce10561635f9a3053a9ffc06daf734a37fef1" translate="yes" xml:space="preserve">
          <source>When a node leaves the swarm, the Docker Engine stops running in swarm mode. The orchestrator no longer schedules tasks to the node.</source>
          <target state="translated">ノードがスウォームから離れると、Docker Engineはスウォームモードでの実行を停止します。オーケストレータはノードにタスクをスケジュールしなくなります。</target>
        </trans-unit>
        <trans-unit id="4c20168625c2b3d2ddca63e35fe6fb9b88074b54" translate="yes" xml:space="preserve">
          <source>When a plugin is first referred to -- either by a user referring to it by name (e.g. &lt;code&gt;docker run --volume-driver=foo&lt;/code&gt;) or a container already configured to use a plugin being started -- Docker looks for the named plugin in the plugin directory and activates it with a handshake. See Handshake API below.</source>
          <target state="translated">プラグインが最初に参照されるとき-ユーザーがプラグインを名前で参照するか（例： &lt;code&gt;docker run --volume-driver=foo&lt;/code&gt; ）、または開始されているプラ​​グインを使用するようにすでに設定されているコンテナー-Dockerは指定されたプラグインを探しますプラグインディレクトリとハンドシェイクでそれをアクティブにします。以下のハンドシェイクAPIを参照してください。</target>
        </trans-unit>
        <trans-unit id="5dd0c49d29f77bdd4af5c9684af5a7bbd732ff33" translate="yes" xml:space="preserve">
          <source>When a restart policy is active on a container, it will be shown as either &lt;code&gt;Up&lt;/code&gt; or &lt;code&gt;Restarting&lt;/code&gt; in &lt;a href=&quot;../commandline/ps/index&quot;&gt;&lt;code&gt;docker ps&lt;/code&gt;&lt;/a&gt;. It can also be useful to use &lt;a href=&quot;../commandline/events/index&quot;&gt;&lt;code&gt;docker events&lt;/code&gt;&lt;/a&gt; to see the restart policy in effect.</source>
          <target state="translated">再起動ポリシーがコンテナにアクティブになると、それはどちらかと表示されます &lt;code&gt;Up&lt;/code&gt; や &lt;code&gt;Restarting&lt;/code&gt; に&lt;a href=&quot;../commandline/ps/index&quot;&gt; &lt;code&gt;docker ps&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;../commandline/events/index&quot;&gt; &lt;code&gt;docker events&lt;/code&gt; &lt;/a&gt;を使用して、再起動ポリシーが有効であることを確認することも役立ちます。</target>
        </trans-unit>
        <trans-unit id="d7aefa66e2c8789e678ffa009cc1f5696cb356e8" translate="yes" xml:space="preserve">
          <source>When a task fails to roll back, whether to &lt;code&gt;pause&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; trying to roll back other tasks.</source>
          <target state="translated">タスクは、するかどうかをロールバックに失敗した場合 &lt;code&gt;pause&lt;/code&gt; または &lt;code&gt;continue&lt;/code&gt; バックロールに他のタスクをしようとしています。</target>
        </trans-unit>
        <trans-unit id="e443e0c067b327f07284fe8eac7d27d8a5b3c48f" translate="yes" xml:space="preserve">
          <source>When adding a delegation, your must acquire a x509 certificate with the public key of the user you wish to delegate to. The user who assumes this delegation role must hold the private key to sign content with notary.</source>
          <target state="translated">委任を追加する場合は、委任するユーザーの公開鍵を持つ x509 証明書を取得する必要があります。この委任の役割を引き受けたユーザーは、公証人とコンテンツに署名するための秘密鍵を保持している必要があります。</target>
        </trans-unit>
        <trans-unit id="6a40811863417be5754fbcf0e4e298195d68cbe8" translate="yes" xml:space="preserve">
          <source>When adding files or directories that contain special characters (such as &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;), you need to escape those paths following the Golang rules to prevent them from being treated as a matching pattern. For example, to add a file named &lt;code&gt;arr[0].txt&lt;/code&gt;, use the following;</source>
          <target state="translated">特殊文字（ &lt;code&gt;[&lt;/code&gt; や &lt;code&gt;]&lt;/code&gt; など）を含むファイルまたはディレクトリを追加する場合は、Golangルールに従ってそれらのパスをエスケープして、一致するパターンとして扱われないようにする必要があります。たとえば、 &lt;code&gt;arr[0].txt&lt;/code&gt; という名前のファイルを追加するには、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="5dd4c9f28609c04500e45f25f8decb82ab1ed9a9" translate="yes" xml:space="preserve">
          <source>When an HTTP request is made to the Docker daemon through the CLI or via the Engine API, the authentication subsystem passes the request to the installed authentication plugin(s). The request contains the user (caller) and command context. The plugin is responsible for deciding whether to allow or deny the request.</source>
          <target state="translated">CLIまたはEngine APIを介してDockerデーモンにHTTPリクエストが行われると、認証サブシステムはインストールされている認証プラグインにリクエストを渡します。リクエストには、ユーザー(呼び出し元)とコマンドコンテキストが含まれます。プラグインはリクエストを許可するか拒否するかを決定する責任があります。</target>
        </trans-unit>
        <trans-unit id="cf3c3ab1223d92040c03207f3a08a99689a96139" translate="yes" xml:space="preserve">
          <source>When an update to an individual task returns a state of &lt;code&gt;RUNNING&lt;/code&gt;, the scheduler continues the update by continuing to another task until all tasks are updated. If, at any time during an update a task returns &lt;code&gt;FAILED&lt;/code&gt;, the scheduler pauses the update. You can control the behavior using the &lt;code&gt;--update-failure-action&lt;/code&gt; flag for &lt;code&gt;docker service create&lt;/code&gt; or &lt;code&gt;docker service update&lt;/code&gt;.</source>
          <target state="translated">個々のタスクの更新が &lt;code&gt;RUNNING&lt;/code&gt; の状態を返すと、スケジューラは、すべてのタスクが更新されるまで別のタスクに進むことによって更新を続行します。更新中にタスクが &lt;code&gt;FAILED&lt;/code&gt; を返した場合、スケジューラは更新を一時停止します。 &lt;code&gt;--update-failure-action&lt;/code&gt; &lt;code&gt;docker service create&lt;/code&gt; または &lt;code&gt;docker service update&lt;/code&gt; の--update-failure-actionフラグを使用して、動作を制御できます。</target>
        </trans-unit>
        <trans-unit id="a7f599891c525618fb58e5bda838a432e6f67624" translate="yes" xml:space="preserve">
          <source>When attempting to squash an image that does not make changes to the filesystem (for example, the Dockerfile only contains &lt;code&gt;ENV&lt;/code&gt; instructions), the squash step will fail (see &lt;a href=&quot;https://github.com/moby/moby/issues/33823&quot;&gt;issue #33823&lt;/a&gt;).</source>
          <target state="translated">ファイルシステムに変更を加えないイメージをスカッシュしようとすると（たとえば、Dockerfileには &lt;code&gt;ENV&lt;/code&gt; 命令しか含まれていない）、スカッシュステップは失敗します（&lt;a href=&quot;https://github.com/moby/moby/issues/33823&quot;&gt;問題＃33823を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a77b46a0b2c983b55caac38805c976358aa0eed4" translate="yes" xml:space="preserve">
          <source>When building a Dockerfile with multiple build stages, &lt;code&gt;--target&lt;/code&gt; can be used to specify an intermediate build stage by name as a final stage for the resulting image. Commands after the target stage will be skipped.</source>
          <target state="translated">複数のビルド段階とDockerfileを構築するとき、 &lt;code&gt;--target&lt;/code&gt; は、得られる画像のための最終段階として、名前によって中間ビルドステージを指定するために使用することができます。ターゲットステージの後のコマンドはスキップされます。</target>
        </trans-unit>
        <trans-unit id="618dc33e037978f3558533aed638a5e430e811cc" translate="yes" xml:space="preserve">
          <source>When building this Dockerfile, the &lt;code&gt;HTTP_PROXY&lt;/code&gt; is preserved in the &lt;code&gt;docker history&lt;/code&gt;, and changing its value invalidates the build cache.</source>
          <target state="translated">このDockerfileを構築する場合、 &lt;code&gt;HTTP_PROXY&lt;/code&gt; をに保存された &lt;code&gt;docker history&lt;/code&gt; 、およびビルドキャッシュ無効化し、その値を変更します。</target>
        </trans-unit>
        <trans-unit id="71df87efade891f48cf3374bb0d7a442707e1944" translate="yes" xml:space="preserve">
          <source>When clients uploads new metadata files, Notary server checks them against any previous versions for conflicts, and verifies the signatures, checksums, and validity of the uploaded metadata.</source>
          <target state="translated">クライアントが新しいメタデータファイルをアップロードすると、Notaryサーバはそれらのファイルを以前のバージョンと照合して競合がないかどうかをチェックし、アップロードされたメタデータの署名、チェックサム、有効性を検証します。</target>
        </trans-unit>
        <trans-unit id="7e7481348f5d24498ee74fbc168cc94b2cd809cf" translate="yes" xml:space="preserve">
          <source>When configuring a gMSA credential spec for a service, you only need to specify a credential spec with &lt;code&gt;config&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">サービスのgMSA資格情報仕様を構成する場合、次の例に示すように、 &lt;code&gt;config&lt;/code&gt; で資格情報仕様を指定するだけで済みます。</target>
        </trans-unit>
        <trans-unit id="afed8838b2d50b257fe08b3cf3ec1c305c4ea6f0" translate="yes" xml:space="preserve">
          <source>When copying files or directories that contain special characters (such as &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;), you need to escape those paths following the Golang rules to prevent them from being treated as a matching pattern. For example, to copy a file named &lt;code&gt;arr[0].txt&lt;/code&gt;, use the following;</source>
          <target state="translated">特殊文字（ &lt;code&gt;[&lt;/code&gt; や &lt;code&gt;]&lt;/code&gt; など）を含むファイルまたはディレクトリをコピーする場合は、Golangルールに従ってそれらのパスをエスケープして、一致するパターンとして扱われないようにする必要があります。たとえば、 &lt;code&gt;arr[0].txt&lt;/code&gt; という名前のファイルをコピーするには、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="e4dfcf9d710224b6eaa95111c9b1cf293239edf8" translate="yes" xml:space="preserve">
          <source>When creating a custom network, the default network driver (i.e. &lt;code&gt;bridge&lt;/code&gt;) has additional options that can be passed. The following are those options and the equivalent docker daemon flags used for docker0 bridge:</source>
          <target state="translated">カスタムネットワークを作成する場合、デフォルトのネットワークドライバー（つまり、 &lt;code&gt;bridge&lt;/code&gt; ）には、渡すことができる追加のオプションがあります。以下は、これらのオプションと、docker0ブリッジで使用される同等のdockerデーモンフラグです。</target>
        </trans-unit>
        <trans-unit id="347676355375bba3281cbec5479bbc3946b01bf8" translate="yes" xml:space="preserve">
          <source>When creating a service which uses Windows containers, the options to specify UID, GID, and mode are not supported for configs. Configs are currently only accessible by administrators and users with &lt;code&gt;system&lt;/code&gt; access within the container.</source>
          <target state="translated">Windowsコンテナーを使用するサービスを作成する場合、UID、GID、およびモードを指定するオプションは、構成ではサポートされません。構成には現在、管理者とコンテナー内の &lt;code&gt;system&lt;/code&gt; アクセス権を持つユーザーのみがアクセスできます。</target>
        </trans-unit>
        <trans-unit id="cb77848131a1ef45a66f89ad9a6eb6e074932bfa" translate="yes" xml:space="preserve">
          <source>When creating a service which uses Windows containers, the options to specify UID, GID, and mode are not supported for secrets. Secrets are currently only accessible by administrators and users with &lt;code&gt;system&lt;/code&gt; access within the container.</source>
          <target state="translated">Windowsコンテナーを使用するサービスを作成する場合、UID、GID、およびモードを指定するオプションは、シークレットではサポートされていません。シークレットには現在、管理者とコンテナ内の &lt;code&gt;system&lt;/code&gt; アクセス権を持つユーザーのみがアクセスできます。</target>
        </trans-unit>
        <trans-unit id="7a2e9325aa49ae9b855822d458b17d7e566800bd" translate="yes" xml:space="preserve">
          <source>When defining any service in &lt;code&gt;docker-compose.yml&lt;/code&gt;, you can declare that you are extending another service like this:</source>
          <target state="translated">&lt;code&gt;docker-compose.yml&lt;/code&gt; でサービスを定義するときに、次のように別のサービスを拡張することを宣言できます。</target>
        </trans-unit>
        <trans-unit id="f21bcf537614dc27c0892c8f1d25d4b4f1e3fdc0" translate="yes" xml:space="preserve">
          <source>When deploying a service, docker resolves the digest for the service&amp;rsquo;s image, and pins the service to that digest. The digest is not shown by default, but is printed if &lt;code&gt;--no-trunc&lt;/code&gt; is used. The &lt;code&gt;--no-trunc&lt;/code&gt; option also shows the non-truncated task ID, and error-messages, as can be seen below;</source>
          <target state="translated">サービスをデプロイすると、Dockerはサービスのイメージのダイジェストを解決し、サービスをそのダイジェストに固定します。ダイジェストはデフォルトでは表示されませんが、 &lt;code&gt;--no-trunc&lt;/code&gt; が使用されている場合に出力されます。 &lt;code&gt;--no-trunc&lt;/code&gt; オプションは、以下に見られるように、非トランケートタスクID、及びエラー・メッセージを示す図です。</target>
        </trans-unit>
        <trans-unit id="cfe0a9c5fc35c4aa7588813812bd33399874daff" translate="yes" xml:space="preserve">
          <source>When deploying a service, docker resolves the digest for the service&amp;rsquo;s image, and pins the service to that digest. The digest is not shown by default, but is printed if &lt;code&gt;--no-trunc&lt;/code&gt; is used. The &lt;code&gt;--no-trunc&lt;/code&gt; option also shows the non-truncated task IDs, and error-messages, as can be seen below:</source>
          <target state="translated">サービスをデプロイすると、Dockerはサービスのイメージのダイジェストを解決し、サービスをそのダイジェストに固定します。ダイジェストはデフォルトでは表示されませんが、 &lt;code&gt;--no-trunc&lt;/code&gt; が使用されている場合に出力されます。 &lt;code&gt;--no-trunc&lt;/code&gt; オプションも下に見られるように、非切り捨てタスクID、およびエラー・メッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="bf922f13b2e0bc8bd23a47a810469d17c5bfd388" translate="yes" xml:space="preserve">
          <source>When deploying, Docker creates these two secrets and populates them with the content from the file specified in the compose file.</source>
          <target state="translated">デプロイ時には、Dockerはこの2つのシークレットを作成し、composeファイルで指定したファイルの内容で埋めていきます。</target>
        </trans-unit>
        <trans-unit id="511b0cb2c358a331cc01a4b2626afbe040e58af9" translate="yes" xml:space="preserve">
          <source>When doing a &lt;code&gt;docker push&lt;/code&gt; with Content Trust enabled for the first time, the root, targets, snapshot, and timestamp keys are generated automatically for the image repository:</source>
          <target state="translated">Content Trustを初めて有効にして &lt;code&gt;docker push&lt;/code&gt; を実行すると、ルート、ターゲット、スナップショット、およびタイムスタンプキーがイメージリポジトリに対して自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="f59201fb392232fdc5f482e1898dbc8cc183e84e" translate="yes" xml:space="preserve">
          <source>When explicitly passing environment variables</source>
          <target state="translated">環境変数を明示的に渡す場合</target>
        </trans-unit>
        <trans-unit id="9fce3a5987a4c87098696deeea50c21c928e4dcb" translate="yes" xml:space="preserve">
          <source>When initiating a repository, you will need the key and the passphrase of a local Notary Canonical Root Key. If you have not initiated a repository before, and therefore don&amp;rsquo;t have a Notary root key, &lt;code&gt;$ docker trust&lt;/code&gt; will create one for you.</source>
          <target state="translated">リポジトリを開始するときは、ローカルのNotary Canonical Root Keyのキーとパスフレーズが必要です。以前にリポジトリを開始したことがなく、したがってNotaryルートキーがない場合は、 &lt;code&gt;$ docker trust&lt;/code&gt; がリポジトリを作成します。</target>
        </trans-unit>
        <trans-unit id="da23c544ecc07a7f26bce24924fd3e40d7b31662" translate="yes" xml:space="preserve">
          <source>When initiating a swarm, you must specify the &lt;code&gt;--advertise-addr&lt;/code&gt; flag to advertise your address to other manager nodes in the swarm. For more information, see &lt;a href=&quot;../swarm-mode/index#configure-the-advertise-address&quot;&gt;Run Docker Engine in swarm mode&lt;/a&gt;. Because manager nodes are meant to be a stable component of the infrastructure, you should use a &lt;em&gt;fixed IP address&lt;/em&gt; for the advertise address to prevent the swarm from becoming unstable on machine reboot.</source>
          <target state="translated">スウォームを開始するときは、 &lt;code&gt;--advertise-addr&lt;/code&gt; フラグを指定して、スウォーム内の他のマネージャーノードにアドレスをアドバタイズする必要があります。詳細については、「&lt;a href=&quot;../swarm-mode/index#configure-the-advertise-address&quot;&gt;Dockerエンジンをスウォームモードで実行&lt;/a&gt;する」を参照してください。マネージャーノードはインフラストラクチャの安定したコンポーネントであることを目的としているため、アドバタイズアドレスに&lt;em&gt;固定IPアドレス&lt;/em&gt;を使用して、マシンの再起動時にスウォームが不安定になるのを防ぐ必要があります。</target>
        </trans-unit>
        <trans-unit id="0644abaf7cbcba5ce9c0f3b9c4b13034a85108fb" translate="yes" xml:space="preserve">
          <source>When inspecting a container, &lt;code&gt;NetworkSettings&lt;/code&gt; contains top-level information about the default (&amp;ldquo;bridge&amp;rdquo;) network;</source>
          <target state="translated">コンテナを検査するとき、 &lt;code&gt;NetworkSettings&lt;/code&gt; にはデフォルト（「ブリッジ」）ネットワークに関するトップレベルの情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="601cae27195075e7160aab5c8bef776bacd68983" translate="yes" xml:space="preserve">
          <source>When it encounters an &lt;code&gt;ONBUILD&lt;/code&gt; instruction, the builder adds a trigger to the metadata of the image being built. The instruction does not otherwise affect the current build.</source>
          <target state="translated">&lt;code&gt;ONBUILD&lt;/code&gt; 命令に遭遇すると、ビルダーはトリガーをビルド中のイメージのメタデータに追加します。それ以外の場合、命令は現在のビルドに影響を与えません。</target>
        </trans-unit>
        <trans-unit id="01648cf0e1e62f5ef448a237dbc964d254dfb9ea" translate="yes" xml:space="preserve">
          <source>When moving from development to production there are a number of considerations that must be made to ensure security and scalability.</source>
          <target state="translated">開発から本番環境に移行する際には、セキュリティとスケーラビリティを確保するために考慮しなければならないことがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="f09f06ff9622ddf90aac7883a47f9c48431d1208" translate="yes" xml:space="preserve">
          <source>When no tag is specified, &lt;code&gt;docker trust&lt;/code&gt; revokes all signatures that you have a signing key for.</source>
          <target state="translated">タグが指定されていない場合、 &lt;code&gt;docker trust&lt;/code&gt; は、署名鍵を持っているすべての署名を取り消します。</target>
        </trans-unit>
        <trans-unit id="87f1189049dbb4903a48364647d79d60cf4d38e9" translate="yes" xml:space="preserve">
          <source>When passing a boolean value to any option</source>
          <target state="translated">オプションにブール値を渡す場合</target>
        </trans-unit>
        <trans-unit id="0daaa7569d311aef3b5165eb364e361b779b0a70" translate="yes" xml:space="preserve">
          <source>When people say &amp;ldquo;Docker&amp;rdquo; they typically mean &lt;strong&gt;Docker Engine&lt;/strong&gt;, the client-server application made up of the Docker daemon, a REST API that specifies interfaces for interacting with the daemon, and a command line interface (CLI) client that talks to the daemon (through the REST API wrapper). Docker Engine accepts &lt;code&gt;docker&lt;/code&gt; commands from the CLI, such as &lt;code&gt;docker run &amp;lt;image&amp;gt;&lt;/code&gt;, &lt;code&gt;docker ps&lt;/code&gt; to list running containers, &lt;code&gt;docker image ls&lt;/code&gt; to list images, and so on.</source>
          <target state="translated">人々が「Docker」と言うとき、それらは通常&lt;strong&gt;Docker Engine&lt;/strong&gt;、Dockerデーモン、デーモンと対話するためのインターフェースを指定するREST API、およびデーモンと通信するコマンドラインインターフェース（CLI）クライアントで構成されるクライアントサーバーアプリケーションを意味します（REST APIラッパーを介して）。DockerエンジンはCLIから &lt;code&gt;docker&lt;/code&gt; コマンドを受け入れます。たとえば、 &lt;code&gt;docker run &amp;lt;image&amp;gt;&lt;/code&gt; 、実行中のコンテナーを一覧表示する &lt;code&gt;docker ps&lt;/code&gt; 、 &lt;code&gt;docker image ls&lt;/code&gt; を一覧表示するdocker image lsなどです。</target>
        </trans-unit>
        <trans-unit id="0492e7f7eb43ae1c658d3aafab047f301cd25d88" translate="yes" xml:space="preserve">
          <source>When pushing or pulling to a 2.0 registry, the &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;pull&lt;/code&gt; command output includes the image digest. You can &lt;code&gt;pull&lt;/code&gt; using a digest value. You can also reference by digest in &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, and &lt;code&gt;rmi&lt;/code&gt; commands, as well as the &lt;code&gt;FROM&lt;/code&gt; image reference in a Dockerfile.</source>
          <target state="translated">2.0レジストリに &lt;code&gt;push&lt;/code&gt; または &lt;code&gt;pull&lt;/code&gt; とき、プッシュまたはプルコマンドの出力にはイメージダイジェストが含まれます。ダイジェスト値を使用して &lt;code&gt;pull&lt;/code&gt; できます。 &lt;code&gt;create&lt;/code&gt; 、 &lt;code&gt;run&lt;/code&gt; 、および &lt;code&gt;rmi&lt;/code&gt; コマンドのダイジェスト、ならびにDockerfileの &lt;code&gt;FROM&lt;/code&gt; イメージ参照によっても参照できます。</target>
        </trans-unit>
        <trans-unit id="fecebdbf09a2272c5ec30668e54681f6ea612b31" translate="yes" xml:space="preserve">
          <source>When run from a manager node, removes the specified nodes from a swarm.</source>
          <target state="translated">マネージャノードから実行すると、指定したノードをスウォームから削除します。</target>
        </trans-unit>
        <trans-unit id="d5b4bf3a4de834cfa68022e776528b7c808ecb39" translate="yes" xml:space="preserve">
          <source>When running &lt;code&gt;docker pull&lt;/code&gt; with Docker Content Trust on Docker Engine 1.10, Docker attempts to search the &lt;code&gt;targets/releases&lt;/code&gt; role for the signed image tag, and falls back to the default &lt;code&gt;targets&lt;/code&gt; role if it does not exist. When searching the default &lt;code&gt;targets&lt;/code&gt; role, Docker 1.10 may pick up on other non-&lt;code&gt;targets/releases&lt;/code&gt; delegation roles&amp;rsquo; signed images if they exist for this tag. In Docker 1.11, this behavior is changed such that all &lt;code&gt;docker pull&lt;/code&gt; commands with Docker Content Trust must pull tags only signed by the &lt;code&gt;targets/releases&lt;/code&gt; delegation role or the &lt;code&gt;targets&lt;/code&gt; base role.</source>
          <target state="translated">Docker Engine 1.10でDocker Content Trustを使用して &lt;code&gt;docker pull&lt;/code&gt; を実行すると、Docker は署名済みイメージタグの &lt;code&gt;targets/releases&lt;/code&gt; ロールを検索し、存在しない場合はデフォルトの &lt;code&gt;targets&lt;/code&gt; ロールにフォールバックします。デフォルトの &lt;code&gt;targets&lt;/code&gt; ロールを検索するとき、Docker 1.10は、他の非 &lt;code&gt;targets/releases&lt;/code&gt; デリゲーションロールの署名付きイメージがこのタグに存在する場合、それらをピックアップする場合があります。 Docker 1.11ではこの動作が変更され、Docker Content Trust を使用するすべての &lt;code&gt;docker pull&lt;/code&gt; コマンドが、 &lt;code&gt;targets/releases&lt;/code&gt; 委任ロールまたは &lt;code&gt;targets&lt;/code&gt; 基本ロールによってのみ署名されたタグをプルする必要があるようになりました。</target>
        </trans-unit>
        <trans-unit id="d3f896e6fcb70cbf5b955b01e5a6a284f5182f8f" translate="yes" xml:space="preserve">
          <source>When running &lt;code&gt;docker push&lt;/code&gt; with Docker Content Trust, Docker Engine 1.10 attempts to sign and push with the &lt;code&gt;targets/releases&lt;/code&gt; delegation role if it exists, otherwise falling back to the &lt;code&gt;targets&lt;/code&gt; role. In Docker 1.11, a &lt;code&gt;docker push&lt;/code&gt; attempts to sign and push with all delegation roles directly under targets (ex: &lt;code&gt;targets/role&lt;/code&gt; but not &lt;code&gt;targets/nested/role&lt;/code&gt;) that the user has signing keys for. If delegation roles exist but the user does not have signing keys, the push fails. If no delegation roles exist, the push attempts to sign with the base &lt;code&gt;targets&lt;/code&gt; role.</source>
          <target state="translated">Docker Content Trustで &lt;code&gt;docker push&lt;/code&gt; を実行すると、Docker Engine 1.10は、 &lt;code&gt;targets/releases&lt;/code&gt; 委任ロールが存在する場合は、それに署名してpushしようとします。それ以外の場合は、 &lt;code&gt;targets&lt;/code&gt; ロールにフォールバックします。ドッカー1.11で、 &lt;code&gt;docker push&lt;/code&gt; 直接ターゲットの下にあるすべての委任の役割で署名し、プッシュしようとします（例： &lt;code&gt;targets/role&lt;/code&gt; ではなく、 &lt;code&gt;targets/nested/role&lt;/code&gt; ユーザーがための鍵に署名していること）。委任の役割は存在するが、ユーザーに署名キーがない場合、プッシュは失敗します。委任ロールが存在しない場合、プッシュは基本 &lt;code&gt;targets&lt;/code&gt; ロールで署名を試みます。</target>
        </trans-unit>
        <trans-unit id="23348b405542f00a816be2ce23cc4f47750b1721" translate="yes" xml:space="preserve">
          <source>When running inside a LAN that uses an &lt;code&gt;HTTPS&lt;/code&gt; proxy, the Docker Hub certificates will be replaced by the proxy&amp;rsquo;s certificates. These certificates need to be added to your Docker host&amp;rsquo;s configuration:</source>
          <target state="translated">&lt;code&gt;HTTPS&lt;/code&gt; プロキシを使用するLAN内で実行すると、Docker Hub証明書はプロキシの証明書に置き換えられます。これらの証明書は、Dockerホストの構成に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="659fec972e069c7c59881e58bb663a865cd786b8" translate="yes" xml:space="preserve">
          <source>When running the command, the Docker CLI client checks the value the variable has in your local environment and passes it to the container. If no &lt;code&gt;=&lt;/code&gt; is provided and that variable is not exported in your local environment, the variable won&amp;rsquo;t be set in the container.</source>
          <target state="translated">コマンドを実行すると、Docker CLIクライアントはローカル環境で変数が持つ値をチェックし、それをコンテナーに渡します。何の場合 &lt;code&gt;=&lt;/code&gt; 提供され、その変数がローカル環境でエクスポートされていない、変数は、コンテナ内に設定されていないことはありません。</target>
        </trans-unit>
        <trans-unit id="9e5838f27a3bb4cc1fcdc9639f77e1eaa39b268f" translate="yes" xml:space="preserve">
          <source>When set to anything other than an empty string, enables TLS communication with the &lt;code&gt;docker&lt;/code&gt; daemon.</source>
          <target state="translated">空の文字列以外に設定すると、 &lt;code&gt;docker&lt;/code&gt; デーモンとのTLS通信が有効になります。</target>
        </trans-unit>
        <trans-unit id="b084374239a9efe79349b1dfefb50d6d84c6e5a5" translate="yes" xml:space="preserve">
          <source>When setting duplicate keys with conflicting values, an error will be produced, and the daemon will fail to start.</source>
          <target state="translated">矛盾する値で重複キーを設定するとエラーが発生し、デーモンの起動に失敗します。</target>
        </trans-unit>
        <trans-unit id="e9f537bf06a2b4d909bb20b835ed6f30404e99b2" translate="yes" xml:space="preserve">
          <source>When squashing layers, the resulting image cannot take advantage of layer sharing with other images, and may use significantly more space. Sharing the base image is still supported.</source>
          <target state="translated">レイヤーをつぶすと、結果として得られる画像は他の画像とのレイヤー共有を利用することができず、かなり多くのスペースを使うことになります。ベース画像の共有はまだサポートされています。</target>
        </trans-unit>
        <trans-unit id="f30a97ec9a26f57ca205bc979ead834fcb38f949" translate="yes" xml:space="preserve">
          <source>When starting a Docker container, you must first decide if you want to run the container in the background in a &amp;ldquo;detached&amp;rdquo; mode or in the default foreground mode:</source>
          <target state="translated">Dockerコンテナーを起動するときは、最初にコンテナーをバックグラウンドで「デタッチ」モードで実行するか、デフォルトのフォアグラウンドモードで実行するかを決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8f659d3dc17151003cbabcd9deccc26cc9015784" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;URL&lt;/code&gt; parameter points to the location of a Git repository, the repository acts as the build context. The system recursively fetches the repository and its submodules. The commit history is not preserved. A repository is first pulled into a temporary directory on your local host. After that succeeds, the directory is sent to the Docker daemon as the context. Local copy gives you the ability to access private repositories using local user credentials, VPN&amp;rsquo;s, and so forth.</source>
          <target state="translated">&lt;code&gt;URL&lt;/code&gt; パラメータがGitリポジトリの場所を指す場合、リポジトリはビルドコンテキストとして機能します。システムは、リポジトリとそのサブモジュールを再帰的にフェッチします。コミット履歴は保持されません。リポジトリは、最初にローカルホストの一時ディレクトリにプルされます。それが成功すると、ディレクトリがコンテキストとしてDockerデーモンに送信されます。ローカルコピーを使用すると、ローカルユーザーの資格情報やVPNなどを使用してプライベートリポジトリにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="cf75f65d4c19cd0d08a36f20657798919de261c5" translate="yes" xml:space="preserve">
          <source>When the Docker Engine runs in swarm mode, manager nodes implement the &lt;a href=&quot;http://thesecretlivesofdata.com/raft/&quot;&gt;Raft Consensus Algorithm&lt;/a&gt; to manage the global cluster state.</source>
          <target state="translated">Dockerエンジンがスウォームモードで実行されている場合、マネージャーノードは&lt;a href=&quot;http://thesecretlivesofdata.com/raft/&quot;&gt;Raftコンセンサスアルゴリズム&lt;/a&gt;を実装してグローバルクラスターの状態を管理します。</target>
        </trans-unit>
        <trans-unit id="2a7c036a349af77c01a9cd0bddde1a783d62e442" translate="yes" xml:space="preserve">
          <source>When the Droplet is created, Docker generates a unique SSH key and stores it on your local system in &lt;code&gt;~/.docker/machines&lt;/code&gt;. Initially, this is used to provision the host. Later, it&amp;rsquo;s used under the hood to access the Droplet directly with the &lt;code&gt;docker-machine ssh&lt;/code&gt; command. Docker Engine is installed on the cloud server and the daemon is configured to accept remote connections over TCP using TLS for authentication.</source>
          <target state="translated">ドロップレットが作成されると、Dockerは一意のSSHキーを生成し、ローカルシステムの &lt;code&gt;~/.docker/machines&lt;/code&gt; 保存します。最初は、これはホストのプロビジョニングに使用されます。後で、 &lt;code&gt;docker-machine ssh&lt;/code&gt; 使用され、docker-machine sshコマンドで直接Dropletにアクセスします。Docker Engineがクラウドサーバーにインストールされ、デーモンが認証にTLSを使用してTCP経由のリモート接続を受け入れるように構成されています。</target>
        </trans-unit>
        <trans-unit id="ea94e885b61dafdf1f7ce5b687ff9ec12389569b" translate="yes" xml:space="preserve">
          <source>When the first Delegation is added to the Notary Server using &lt;code&gt;$ docker trust&lt;/code&gt;, we automatically initiate trust data for the repository. This includes creating the notary target and snapshots keys, and rotating the snapshot key to be managed by the notary server. More information on these keys can be found &lt;a href=&quot;../trust_key_mng/index&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;$ docker trust&lt;/code&gt; を使用して最初の委任がNotary Serverに追加されると、リポジトリの信頼データが自動的に開始されます。これには、公証ターゲットとスナップショットキーの作成、公証サーバーによって管理されるスナップショットキーのローテーションが含まれます。これらのキーの詳細については、&lt;a href=&quot;../trust_key_mng/index&quot;&gt;こちらをご覧ください&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75edf33bc6be90beb43fe9ad660f3a86ded76bf4" translate="yes" xml:space="preserve">
          <source>When the health status of a container changes, a &lt;code&gt;health_status&lt;/code&gt; event is generated with the new status.</source>
          <target state="translated">コンテナーのヘルスステータスが変化すると、 &lt;code&gt;health_status&lt;/code&gt; イベントが新しいステータスで生成されます。</target>
        </trans-unit>
        <trans-unit id="b8cda7377d31de74ef1bba33d6429775f09cf118" translate="yes" xml:space="preserve">
          <source>When the host directory of a bind-mounted volume doesn&amp;rsquo;t exist, Docker will automatically create this directory on the host for you. In the example above, Docker will create the &lt;code&gt;/doesnt/exist&lt;/code&gt; folder before starting your container.</source>
          <target state="translated">バインドマウントされたボリュームのホストディレクトリが存在しない場合、Dockerはホスト上にこのディレクトリを自動的に作成します。上記の例では、Dockerはコンテナーを起動する前に &lt;code&gt;/doesnt/exist&lt;/code&gt; フォルダーを作成します。</target>
        </trans-unit>
        <trans-unit id="37eaa270d0fc80dc52f9d5bd7996c0b0c45967d7" translate="yes" xml:space="preserve">
          <source>When the image is finished pulling, you can hit the server at port 8000 on the IP address given to you by &lt;code&gt;docker-machine ip&lt;/code&gt;. For instance:</source>
          <target state="translated">イメージのプルが終了したら、 &lt;code&gt;docker-machine ip&lt;/code&gt; によって指定されたIPアドレスのポート8000​​でサーバーにアクセスできます。例えば：</target>
        </trans-unit>
        <trans-unit id="a73fe123cef9361a28fbc3e9edf90c8d8f005555" translate="yes" xml:space="preserve">
          <source>When the load is balanced to your satisfaction, you can scale the service back down to the original scale. You can use &lt;code&gt;docker service ps&lt;/code&gt; to assess the current balance of your service across nodes.</source>
          <target state="translated">負荷が満足のいくようにバランスが取れたら、サービスを元のスケールに戻すことができます。 &lt;code&gt;docker service ps&lt;/code&gt; を使用して、ノード間のサービスの現在のバランスを評価できます。</target>
        </trans-unit>
        <trans-unit id="1c318e60dc901868948fe4381dcdfd1efe16581e" translate="yes" xml:space="preserve">
          <source>When the operator executes &lt;code&gt;docker run --privileged&lt;/code&gt;, Docker will enable access to all devices on the host as well as set some configuration in AppArmor or SELinux to allow the container nearly all the same access to the host as processes running outside containers on the host. Additional information about running with &lt;code&gt;--privileged&lt;/code&gt; is available on the &lt;a href=&quot;http://blog.docker.com/2013/09/docker-can-now-run-within-docker/&quot;&gt;Docker Blog&lt;/a&gt;.</source>
          <target state="translated">オペレーターが &lt;code&gt;docker run --privileged&lt;/code&gt; を実行すると、Dockerはホスト上のすべてのデバイスへのアクセスを有効にするだけでなく、AppArmorまたはSELinuxでいくつかの構成を設定して、コンテナーがホスト上のコンテナーの外部で実行されているプロセスとほぼ同じようにホストにアクセスできるようにします。 &lt;code&gt;--privileged&lt;/code&gt; での実行に関する追加情報は、&lt;a href=&quot;http://blog.docker.com/2013/09/docker-can-now-run-within-docker/&quot;&gt;Dockerブログで&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="d6c6a88c8ccf3dd31b48babc2fb936bc6e2eb113" translate="yes" xml:space="preserve">
          <source>When the task is started, the volume is mounted on &lt;code&gt;/path/in/container/&lt;/code&gt; inside the container.</source>
          <target state="translated">タスクが開始されると、ボリュームは &lt;code&gt;/path/in/container/&lt;/code&gt; 内の/ path / in / container /にマウントされます。</target>
        </trans-unit>
        <trans-unit id="c18f199a0d194a80dc95bb89bab019f59b7c1c6a" translate="yes" xml:space="preserve">
          <source>When the value supplied is a relative path, it is interpreted as relative to the location of the Compose file. This directory is also the build context that is sent to the Docker daemon.</source>
          <target state="translated">与えられた値が相対パスの場合、Composeファイルの場所からの相対パスとして解釈されます。このディレクトリは、Dockerデーモンに送られるビルドコンテキストでもあります。</target>
        </trans-unit>
        <trans-unit id="13b9a85a29067926eeac3f86f7eef25ee148240d" translate="yes" xml:space="preserve">
          <source>When this value is &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;devicemapper&lt;/code&gt; continues and simply warns you the errors are happening.</source>
          <target state="translated">この値が &lt;code&gt;true&lt;/code&gt; の場合、 &lt;code&gt;devicemapper&lt;/code&gt; は続行し、エラーが発生していることを警告するだけです。</target>
        </trans-unit>
        <trans-unit id="d8566b00b0899ded6d349d22c0554b076d1a80a6" translate="yes" xml:space="preserve">
          <source>When transferring data among networked systems, &lt;em&gt;trust&lt;/em&gt; is a central concern. In particular, when communicating over an untrusted medium such as the internet, it is critical to ensure the integrity and the publisher of all the data a system operates on. You use the Docker Engine to push and pull images (data) to a public or private registry. Content trust gives you the ability to verify both the integrity and the publisher of all the data received from a registry over any channel.</source>
          <target state="translated">ネットワーク化されたシステム間でデータを転送する場合、&lt;em&gt;信頼&lt;/em&gt;が中心的な関心事です。特に、インターネットなどの信頼できない媒体を介して通信する場合、システムが操作するすべてのデータの整合性と発行者を保証することが重要です。Docker Engineを使用して、イメージ（データ）をパブリックまたはプライベートレジストリにプッシュおよびプルします。コンテンツの信頼により、任意のチャネルを介してレジストリから受信したすべてのデータの整合性と発行者の両方を確認できます。</target>
        </trans-unit>
        <trans-unit id="5aacfb0870be5c15d019742bbc508afa718247b9" translate="yes" xml:space="preserve">
          <source>When transferring directories and not just files, avoid rsync surprises by using trailing slashes on both the source and destination. For example:</source>
          <target state="translated">ファイルだけでなくディレクトリを転送する場合、転送元と転送先の両方で末尾のスラッシュを使用して rsync の驚きを回避します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="dbe5d6c10f721557e1b988345c3c888f5f61c38b" translate="yes" xml:space="preserve">
          <source>When transferring large files or updating directories with lots of files, you can use the &lt;code&gt;-d&lt;/code&gt; flag, which uses &lt;code&gt;rsync&lt;/code&gt; to transfer deltas instead of transferring all of the files.</source>
          <target state="translated">大きなファイルを転送したり、多数のファイルでディレクトリを更新したりする場合、 &lt;code&gt;-d&lt;/code&gt; フラグを使用できます。これは、すべてのファイルを転送する代わりに &lt;code&gt;rsync&lt;/code&gt; を使用してデルタを転送します。</target>
        </trans-unit>
        <trans-unit id="1c72a60e749a404cd10297501e739f5774943c7a" translate="yes" xml:space="preserve">
          <source>When updating a service with &lt;code&gt;docker service update&lt;/code&gt;, &lt;code&gt;--placement-pref-add&lt;/code&gt; appends a new placement preference after all existing placement preferences. &lt;code&gt;--placement-pref-rm&lt;/code&gt; removes an existing placement preference that matches the argument.</source>
          <target state="translated">&lt;code&gt;--placement-pref-add&lt;/code&gt; &lt;code&gt;docker service update&lt;/code&gt; 使用してサービスを更新する場合、-- placement-pref-addは、既存のすべての配置設定の後に新しい配置設定を追加します。 &lt;code&gt;--placement-pref-rm&lt;/code&gt; は、引数に一致する既存の配置設定を削除します。</target>
        </trans-unit>
        <trans-unit id="823c92dc97c64a87d1f9aac48312bb43cae23d90" translate="yes" xml:space="preserve">
          <source>When upgrading a plugin, you should first stop the Docker daemon, upgrade the plugin, then start Docker again.</source>
          <target state="translated">プラグインをアップグレードする場合は、まずDockerデーモンを停止してプラグインをアップグレードした後、再度Dockerを起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="de620616ef11ae28c032da27d732f8e37f9d844d" translate="yes" xml:space="preserve">
          <source>When used in the shell or exec formats, the &lt;code&gt;CMD&lt;/code&gt; instruction sets the command to be executed when running the image.</source>
          <target state="translated">シェルまたはexec形式で使用される場合、 &lt;code&gt;CMD&lt;/code&gt; 命令は、イメージの実行時に実行されるコマンドを設定します。</target>
        </trans-unit>
        <trans-unit id="849885b59df6a3d91ea9ac787bdb44c8cc39a76a" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;file:&lt;/code&gt;, the referenced file must be present in the &lt;code&gt;CredentialSpecs&lt;/code&gt; subdirectory in the Docker data directory, which defaults to &lt;code&gt;C:\ProgramData\Docker\&lt;/code&gt; on Windows. The following example loads the credential spec from a file named &lt;code&gt;C:\ProgramData\Docker\CredentialSpecs\my-credential-spec.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; を使用する場合、参照ファイルはDockerデータディレクトリの &lt;code&gt;CredentialSpecs&lt;/code&gt; サブディレクトリに存在する必要があります。デフォルトでは、Windowsでは &lt;code&gt;C:\ProgramData\Docker\&lt;/code&gt; です。次の例では、 &lt;code&gt;C:\ProgramData\Docker\CredentialSpecs\my-credential-spec.json&lt;/code&gt; という名前のファイルから資格情報仕様をロードします。</target>
        </trans-unit>
        <trans-unit id="64e498c034d38c25323c58ac31e6fb8586df5ded" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;registry:&lt;/code&gt;, the credential spec is read from the Windows registry on the daemon&amp;rsquo;s host. A registry value with the given name must be located in:</source>
          <target state="translated">&lt;code&gt;registry:&lt;/code&gt; を使用する場合、資格情報の仕様はデーモンのホストのWindowsレジストリから読み取られます。指定された名前のレジストリ値は、次の場所にある必要があります。</target>
        </trans-unit>
        <trans-unit id="82f1377990ecefd93dce58e0c09df55b49e3fa34" translate="yes" xml:space="preserve">
          <source>When using curl 7.5 and above, the URL should be of the form &lt;code&gt;http://hostname/APICall&lt;/code&gt;, where &lt;code&gt;hostname&lt;/code&gt; is the valid hostname where the plugin is installed and &lt;code&gt;APICall&lt;/code&gt; is the call to the plugin API.</source>
          <target state="translated">curl 7.5以降を使用する場合、URLは &lt;code&gt;http://hostname/APICall&lt;/code&gt; の形式にする必要があります。ここで、 &lt;code&gt;hostname&lt;/code&gt; はプラグインがインストールされている有効なホスト名で、 &lt;code&gt;APICall&lt;/code&gt; はプラグインAPIの呼び出しです。</target>
        </trans-unit>
        <trans-unit id="dbd244df95e7458096b2ecfb2f0276d1dc554879" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;../compose-file/index#links&quot;&gt;&amp;lsquo;links&amp;rsquo; option&lt;/a&gt; in a &lt;a href=&quot;../compose-file/index#version-1&quot;&gt;v1 Compose file&lt;/a&gt;, environment variables are created for each link. They are documented in the &lt;a href=&quot;../link-env-deprecated/index&quot;&gt;Link environment variables reference&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../compose-file/index#version-1&quot;&gt;v1 Composeファイル&lt;/a&gt;で&lt;a href=&quot;../compose-file/index#links&quot;&gt;「リンク」オプション&lt;/a&gt;を使用すると、リンクごとに環境変数が作成されます。これらは、&lt;a href=&quot;../link-env-deprecated/index&quot;&gt;リンク環境変数リファレンスに&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="b7235db6c8c3823f3cb87169f1cf7c9b267f011e" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;history&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, will include column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;history&lt;/code&gt; コマンドはテンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合は列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="2b6d6c83e119fbfdf4e92db273938981c98779a3" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;image&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, will include column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;image&lt;/code&gt; コマンドはテンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合は列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="6c8581e4765da77c1306a784d789631d1c1f7649" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;ls&lt;/code&gt; command either outputs the data exactly as the template declares or, when using the table directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;ls&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、テーブルディレクティブを使用する場合は列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="430f7509e9fa8c581d9c478d859eff1ca3b1bd47" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;network ls&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;network ls&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="3bbc4d5d656f5ad712741f8033114a4d715bf624" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;node ls&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;node ls&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="a5d97583ffd6fc32dfb012d34cd4700e42c7019e" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;node ps&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;node ps&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="513456e5055e8428cf32e6a372cb34e7864f9d52" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;plugin ls&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;plugin ls&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="2e5402121c7c8bcbc99df38187c01b00b01cf5cf" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;ps&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;ps&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="335c98558696c6c7c24a1a9f9ff32d9d00712b9d" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;secret ls&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, will include column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;secret ls&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="3b1a4a58c88ca87f88bd8cb3a0fda8e16b01f9af" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;service ls&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;service ls&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="8d0ecc38204b51f55e691489a69ba521acb3845b" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;service ps&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;service ps&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="488c6110e7ade87de5fee548b14103c9f06cb94d" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;stack ls&lt;/code&gt; command either outputs the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;stack ls&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="d9757c892ca4f3e590cb98aed8bb44b1b82e35e6" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;stack ps&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;stack ps&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="345034efb34cc6a14d02ddff43c431dd767980a3" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;stack services&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;stack services&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="8b006f4580802b246b7b8ab17e3b5d4dce7a6928" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;stats&lt;/code&gt; command either outputs the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;stats&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="b7ee8ba3f63361f675f6ab0cc39236b569ee3334" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;volume ls&lt;/code&gt; command will either output the data exactly as the template declares or, when using the &lt;code&gt;table&lt;/code&gt; directive, includes column headers as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用する場合、 &lt;code&gt;volume ls&lt;/code&gt; コマンドは、テンプレートが宣言するとおりにデータを出力するか、または &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含めます。</target>
        </trans-unit>
        <trans-unit id="45bf98e54f499374314a08d04643fc426d44913a" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;file://&amp;lt;filename&amp;gt;&lt;/code&gt; format, the referenced file must be present in the &lt;code&gt;CredentialSpecs&lt;/code&gt; subdirectory in the docker data directory, which defaults to &lt;code&gt;C:\ProgramData\Docker\&lt;/code&gt; on Windows. For example, specifying &lt;code&gt;file://spec.json&lt;/code&gt; loads &lt;code&gt;C:\ProgramData\Docker\CredentialSpecs\spec.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;file://&amp;lt;filename&amp;gt;&lt;/code&gt; 形式を使用する場合、参照ファイルは &lt;code&gt;C:\ProgramData\Docker\&lt;/code&gt; dataディレクトリの &lt;code&gt;CredentialSpecs&lt;/code&gt; サブディレクトリに存在する必要があります。デフォルトでは、WindowsではC：\ ProgramData \ Docker \です。例えば、指定 &lt;code&gt;file://spec.json&lt;/code&gt; をロード &lt;code&gt;C:\ProgramData\Docker\CredentialSpecs\spec.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06c8a36a6efcdf7f49e3ae95fe569833a18e20c7" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;linode/containerlinux&lt;/code&gt;&lt;code&gt;linode-image&lt;/code&gt;, the &lt;code&gt;linode-ssh-user&lt;/code&gt; will default to &lt;code&gt;core&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;linode/containerlinux&lt;/code&gt; &lt;code&gt;linode-image&lt;/code&gt; を使用する場合、 &lt;code&gt;linode-ssh-user&lt;/code&gt; はデフォルトで &lt;code&gt;core&lt;/code&gt; なります</target>
        </trans-unit>
        <trans-unit id="f7466867dfc0fc755525c29c2910efdffa2c686d" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;registry://&amp;lt;value-name&amp;gt;&lt;/code&gt; format, the credential spec is read from the Windows registry on the daemon&amp;rsquo;s host. The specified registry value must be located in:</source>
          <target state="translated">&lt;code&gt;registry://&amp;lt;value-name&amp;gt;&lt;/code&gt; 形式を使用する場合、資格情報の仕様はデーモンのホストのWindowsレジストリから読み取られます。指定されたレジストリ値は、次の場所にある必要があります。</target>
        </trans-unit>
        <trans-unit id="ccafaac6d934bc8cf5fc144e631d9b8ce5453ab3" translate="yes" xml:space="preserve">
          <source>When using this option you may see significantly more space used due to storing two copies of the image, one for the build cache with all the cache layers in tact, and one for the squashed version.</source>
          <target state="translated">このオプションを使うと、すべてのキャッシュレイヤーを有効にしたビルドキャッシュ用と潰したバージョン用の2つの画像のコピーを保存するため、かなり多くのスペースが使われることになります。</target>
        </trans-unit>
        <trans-unit id="5846c7b13d2b2307573586b320663daeebdb3134" translate="yes" xml:space="preserve">
          <source>When working directly with the Notary client, it uses its &lt;a href=&quot;../../../../notary/reference/client-config/index#environment-variables-optional&quot;&gt;own set of environment variables&lt;/a&gt;.</source>
          <target state="translated">Notaryクライアントを直接操作する場合は、&lt;a href=&quot;../../../../notary/reference/client-config/index#environment-variables-optional&quot;&gt;独自の環境変数のセットを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="90901b87b4427462f10ef8d905e7b07eb42b79fb" translate="yes" xml:space="preserve">
          <source>When working with services, swarms, and &lt;code&gt;docker-stack.yml&lt;/code&gt; files, keep in mind that the tasks (containers) backing a service can be deployed on any node in a swarm, and this may be a different node each time the service is updated.</source>
          <target state="translated">サービス、 &lt;code&gt;docker-stack.yml&lt;/code&gt; 、およびdocker-stack.ymlファイルを使用する場合、サービスをバッキングするタスク（コンテナー）は、swarm内の任意のノードにデプロイできます。これは、サービスが更新されるたびに異なるノードになる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d0899512fb68dc41c44f35ffd3ccea4d191f1d86" translate="yes" xml:space="preserve">
          <source>When you &lt;a href=&quot;../service_create/index&quot;&gt;create a service&lt;/a&gt;, you can use node labels as a constraint. A constraint limits the nodes where the scheduler deploys tasks for a service.</source>
          <target state="translated">&lt;a href=&quot;../service_create/index&quot;&gt;サービス&lt;/a&gt;を作成するときに、ノードラベルを制約として使用できます。制約は、スケジューラがサービスのタスクをデプロイするノードを制限します。</target>
        </trans-unit>
        <trans-unit id="d7c771034895ec3f7ed0fbdd4cc4cb51cb731c55" translate="yes" xml:space="preserve">
          <source>When you access port 8080 on any node, Docker routes your request to an active container. On the swarm nodes themselves, port 8080 may not actually be bound, but the routing mesh knows how to route the traffic and prevents any port conflicts from happening.</source>
          <target state="translated">どのノードでもポート8080にアクセスすると、Dockerはリクエストをアクティブなコンテナにルーティングします。スウォームノード自体では、ポート 8080は実際にはバインドされていないかもしれませんが、ルーティングメッシュはトラフィックのルーティング方法を知っているので、ポートの競合が起こるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="4774129b1035118342dd4dd61bce087e0c81d044" translate="yes" xml:space="preserve">
          <source>When you access the HAProxy load balancer on port 80, it forwards requests to nodes in the swarm. The swarm routing mesh routes the request to an active task. If, for any reason the swarm scheduler dispatches tasks to different nodes, you don&amp;rsquo;t need to reconfigure the load balancer.</source>
          <target state="translated">ポート80でHAProxyロードバランサーにアクセスすると、スウォーム内のノードにリクエストが転送されます。スウォームルーティングメッシュは、リクエストをアクティブタスクにルーティングします。なんらかの理由で、Swarmスケジューラがタスクを別のノードにディスパッチする場合、ロードバランサを再構成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="476585f7d5df6e4cd70e304a918d6c853c1dee8a" translate="yes" xml:space="preserve">
          <source>When you add a config to the swarm, Docker sends the config to the swarm manager over a mutual TLS connection. The config is stored in the Raft log, which is encrypted. The entire Raft log is replicated across the other managers, ensuring the same high availability guarantees for configs as for the rest of the swarm management data.</source>
          <target state="translated">スウォームにコンフィグを追加すると、Dockerは相互TLS接続を介してスウォームマネージャにコンフィグを送信します。コンフィグは暗号化されたRaftログに保存されます。Raftログ全体は他のマネージャー間で複製されるため、スウォーム管理データの残りの部分と同様に、コンフィグの高可用性が保証されます。</target>
        </trans-unit>
        <trans-unit id="706af2bc12db923cb2cea566b5db8fe83652902a" translate="yes" xml:space="preserve">
          <source>When you add a secret to the swarm, Docker sends the secret to the swarm manager over a mutual TLS connection. The secret is stored in the Raft log, which is encrypted. The entire Raft log is replicated across the other managers, ensuring the same high availability guarantees for secrets as for the rest of the swarm management data.</source>
          <target state="translated">スウォームに秘密を追加すると、Dockerは相互TLS接続を介してスウォームマネージャに秘密を送信します。秘密は暗号化されたRaftログに保存されます。Raftログ全体が他のマネージャー間で複製されるため、他のスウォーム管理データと同様に秘密の高可用性が保証されます。</target>
        </trans-unit>
        <trans-unit id="6beadc11369cf61c573f0af34179fb193166dee9" translate="yes" xml:space="preserve">
          <source>When you are done, and want to clean up all the services you&amp;rsquo;ve started and any anonymous volumes that have been created, just run the following command in the directory where you&amp;rsquo;ve created your Docker Compose file:</source>
          <target state="translated">完了したら、開始したすべてのサービスと作成された匿名ボリュームをクリーンアップするには、Docker Composeファイルを作成したディレクトリで次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="d0a684e5260498f211bb1ab67536d98bdb80496e" translate="yes" xml:space="preserve">
          <source>When you configure Docker to use the &lt;code&gt;userns-remap&lt;/code&gt; feature, you can optionally specify an existing user and/or group, or you can specify &lt;code&gt;default&lt;/code&gt;. If you specify &lt;code&gt;default&lt;/code&gt;, a user and group &lt;code&gt;dockremap&lt;/code&gt; is created and used for this purpose.</source>
          <target state="translated">Dockerを構成して &lt;code&gt;userns-remap&lt;/code&gt; 機能を使用する場合、オプションで既存のユーザーまたはグループ、あるいはその両方を指定するか、 &lt;code&gt;default&lt;/code&gt; を指定できます。 &lt;code&gt;default&lt;/code&gt; を指定すると、ユーザーとグループの &lt;code&gt;dockremap&lt;/code&gt; が作成され、この目的で使用されます。</target>
        </trans-unit>
        <trans-unit id="5e67729a34e921a29f603afdb24720ecd5bfc9c6" translate="yes" xml:space="preserve">
          <source>When you copy files to a remote server with &lt;code&gt;docker-machine scp&lt;/code&gt; for app deployment, make sure &lt;code&gt;docker-compose&lt;/code&gt; and the Docker daemon know how to find them. Avoid using relative paths, but specify absolute paths in &lt;a href=&quot;../../../compose/compose-file/index&quot;&gt;Compose files&lt;/a&gt;. It&amp;rsquo;s best to specify absolute paths both for the location on the Docker daemon and within the container.</source>
          <target state="translated">アプリのデプロイのために &lt;code&gt;docker-machine scp&lt;/code&gt; を使用してリモートサーバーにファイルをコピーする場合は、 &lt;code&gt;docker-compose&lt;/code&gt; とDockerデーモンがファイルを見つける方法を知っていることを確認してください。相対パスの使用は避けますが、&lt;a href=&quot;../../../compose/compose-file/index&quot;&gt;Composeファイルには&lt;/a&gt;絶対パスを指定します。Dockerデーモンの場所とコンテナー内の両方の場所に絶対パスを指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2e19d68c5617be6a215c196b5ce12b135a0e45b1" translate="yes" xml:space="preserve">
          <source>When you create a network, Engine creates a non-overlapping subnetwork for the network by default. This subnetwork is not a subdivision of an existing network. It is purely for ip-addressing purposes. You can override this default and specify subnetwork values directly using the &lt;code&gt;--subnet&lt;/code&gt; option. On a &lt;code&gt;bridge&lt;/code&gt; network you can only create a single subnet:</source>
          <target state="translated">ネットワークを作成すると、エンジンはデフォルトでネットワークに重複しないサブネットワークを作成します。このサブネットワークは、既存のネットワークのサブディビジョンではありません。これは純粋にIPアドレス指定の目的で使用されます。 &lt;code&gt;--subnet&lt;/code&gt; オプションを使用して、このデフォルトを上書きし、サブネットワーク値を直接指定できます。上の &lt;code&gt;bridge&lt;/code&gt; ネットワークあなただけの単一のサブネットを作成することができます。</target>
        </trans-unit>
        <trans-unit id="efad2531fc84b01f5db39e8cc0778613f7dd6902" translate="yes" xml:space="preserve">
          <source>When you create a service and pass the &lt;code&gt;--network&lt;/code&gt; flag to attach the service to the overlay network:</source>
          <target state="translated">あなたは、サービスを作成して渡すと &lt;code&gt;--network&lt;/code&gt; オーバーレイネットワークにサービスを添付するフラグ：</target>
        </trans-unit>
        <trans-unit id="97539d35326c69e062ae463f08cfadb1fe386e3d" translate="yes" xml:space="preserve">
          <source>When you create a service without specifying any details about the version of the image to use, the service uses the version tagged with the &lt;code&gt;latest&lt;/code&gt; tag. You can force the service to use a specific version of the image in a few different ways, depending on your desired outcome.</source>
          <target state="translated">使用するイメージのバージョンに関する詳細を指定せずにサービスを作成すると、サービスは &lt;code&gt;latest&lt;/code&gt; タグでタグ付けされたバージョンを使用します。希望する結果に応じて、いくつかの方法で特定のバージョンのイメージを使用するようにサービスを強制できます。</target>
        </trans-unit>
        <trans-unit id="d8b846c1bbcdc806a9bacb09c56af8ab59a611d5" translate="yes" xml:space="preserve">
          <source>When you create a service, the image&amp;rsquo;s tag is resolved to the specific digest the tag points to &lt;strong&gt;at the time of service creation&lt;/strong&gt;. Worker nodes for that service use that specific digest forever unless the service is explicitly updated. This feature is particularly important if you do use often-changing tags such as &lt;code&gt;latest&lt;/code&gt;, because it ensures that all service tasks use the same version of the image.</source>
          <target state="translated">サービスを作成すると、イメージのタグは&lt;strong&gt;、サービスの作成時に&lt;/strong&gt;タグが指す特定のダイジェストに解決されます。そのサービスのワーカーノードは、サービスが明示的に更新されない限り、その特定のダイジェストを永久に使用します。この機能は、すべてのサービスタスクが同じバージョンのイメージを使用することを保証するため、 &lt;code&gt;latest&lt;/code&gt; などの頻繁に変更されるタグを使用する場合に特に重要です。</target>
        </trans-unit>
        <trans-unit id="03ba6de5f08a9af3b92b170610e5a49220315a81" translate="yes" xml:space="preserve">
          <source>When you create a service, you can specify a rolling update behavior for how the swarm should apply changes to the service when you run &lt;code&gt;docker service update&lt;/code&gt;. You can also specify these flags as part of the update, as arguments to &lt;code&gt;docker service update&lt;/code&gt;.</source>
          <target state="translated">サービスを作成するときに、 &lt;code&gt;docker service update&lt;/code&gt; を実行したときにswarmがサービスに変更を適用する方法について、ローリング更新の動作を指定できます。これらのフラグを更新の一部として、 &lt;code&gt;docker service update&lt;/code&gt; の引数として指定することもできます。</target>
        </trans-unit>
        <trans-unit id="1486beabe526befe73c2865ebe0d6bbe06a84f57" translate="yes" xml:space="preserve">
          <source>When you create a service, you specify which container image to use and which commands to execute inside running containers.</source>
          <target state="translated">サービスを作成する際には、使用するコンテナイメージと、実行中のコンテナ内で実行するコマンドを指定します。</target>
        </trans-unit>
        <trans-unit id="0b744cd9fa1f5aae250605eb29d90a39b9bea360" translate="yes" xml:space="preserve">
          <source>When you create a service, you specify which container image to use and which commands to execute inside running containers. You also define options for the service including:</source>
          <target state="translated">サービスを作成する際には、使用するコンテナイメージと、実行中のコンテナ内で実行するコマンドを指定します。また、サービスのオプションも定義します。</target>
        </trans-unit>
        <trans-unit id="b9ed198b28ef67d8249822a3deeef304c229fa27" translate="yes" xml:space="preserve">
          <source>When you create a swarm by running &lt;code&gt;docker swarm init&lt;/code&gt;, Docker designates itself as a manager node. By default, the manager node generates a new root Certificate Authority (CA) along with a key pair, which are used to secure communications with other nodes that join the swarm. If you prefer, you can specify your own externally-generated root CA, using the &lt;code&gt;--external-ca&lt;/code&gt; flag of the &lt;a href=&quot;../../../reference/commandline/swarm_init/index&quot;&gt;docker swarm init&lt;/a&gt; command.</source>
          <target state="translated">&lt;code&gt;docker swarm init&lt;/code&gt; を実行してswarmを作成すると、Dockerは自身をマネージャーノードとして指定します。デフォルトでは、マネージャノードは、キーのペアとともに新しいルート認証局（CA）を生成します。これは、スウォームに参加する他のノードとの通信を保護するために使用されます。必要に &lt;code&gt;--external-ca&lt;/code&gt; て、docker &lt;a href=&quot;../../../reference/commandline/swarm_init/index&quot;&gt;swarm init&lt;/a&gt;コマンドの--external-caフラグを使用して、独自に外部で生成したルートCAを指定できます。</target>
        </trans-unit>
        <trans-unit id="425387b1ef6a4e44c2586331f5248d4d8f67f1c1" translate="yes" xml:space="preserve">
          <source>When you create a swarm service, you can publish that service&amp;rsquo;s ports to hosts outside the swarm in two ways:</source>
          <target state="translated">スウォームサービスを作成する場合、次の2つの方法で、そのサービスのポートをスウォーム外部のホストに公開できます。</target>
        </trans-unit>
        <trans-unit id="c40fd94784d76593594a35ed557e50b35778e510" translate="yes" xml:space="preserve">
          <source>When you define your app with Compose in development, you can use this definition to run your application in different environments such as CI, staging, and production.</source>
          <target state="translated">開発中のComposeでアプリを定義すると、CI、ステージング、本番環境など、さまざまな環境でアプリを実行する際にこの定義を利用することができます。</target>
        </trans-unit>
        <trans-unit id="8bcc15d665ed4054bc8895cda4d2758f38c7a4cd" translate="yes" xml:space="preserve">
          <source>When you deploy the service to the swarm, the swarm manager accepts your service definition as the desired state for the service. Then it schedules the service on nodes in the swarm as one or more replica tasks. The tasks run independently of each other on nodes in the swarm.</source>
          <target state="translated">サービスをスウォームにデプロイすると、スウォーム マネージャは、サービスに必要な状態としてサービスの定義を受け入れます。次に、スウォーム内のノード上でサービスを1つまたは複数のレプリカタスクとしてスケジュールします。タスクは、スウォーム内のノード上で互いに独立して実行されます。</target>
        </trans-unit>
        <trans-unit id="f34984626d0b7e92e15d11f51b567b42c8154657" translate="yes" xml:space="preserve">
          <source>When you deploy, Docker mounts a file under &lt;code&gt;/run/secrets/&amp;lt;secret_name&amp;gt;&lt;/code&gt; in the services. These files are never persisted in disk, but are managed in memory.</source>
          <target state="translated">デプロイすると、Docker はサービスの &lt;code&gt;/run/secrets/&amp;lt;secret_name&amp;gt;&lt;/code&gt; の下にファイルをマウントします。これらのファイルはディスクに永続化されることはありませんが、メモリで管理されます。</target>
        </trans-unit>
        <trans-unit id="9b73d905ca12539a125f7665b770f5926d517e20" translate="yes" xml:space="preserve">
          <source>When you drain a node, the scheduler reassigns any tasks running on the node to other available worker nodes in the swarm. It also prevents the scheduler from assigning tasks to the node.</source>
          <target state="translated">ノードをドレインすると、スケジューラはそのノードで実行中のタスクをスウォーム内の他の利用可能なワーカーノードに再割り当てします。また、スケジューラがそのノードにタスクを割り当てることを防ぎます。</target>
        </trans-unit>
        <trans-unit id="50973d4f7bd68037beced46954015877e87b60b0" translate="yes" xml:space="preserve">
          <source>When you first create a swarm, you place a single Docker Engine into swarm mode. To take full advantage of swarm mode you can add nodes to the swarm:</source>
          <target state="translated">最初にスウォームを作成するときは、単一のDocker Engineをスウォームモードにします。スウォームモードを最大限に活用するために、スウォームにノードを追加することができます。</target>
        </trans-unit>
        <trans-unit id="c8dccb8738e2600e38e5b10a9c28cb91449c812c" translate="yes" xml:space="preserve">
          <source>When you first install and start working with Docker Engine, swarm mode is disabled by default. When you enable swarm mode, you work with the concept of services managed through the &lt;code&gt;docker service&lt;/code&gt; command.</source>
          <target state="translated">Docker Engineを初めてインストールして作業を開始すると、デフォルトでスウォームモードは無効になっています。スウォームモードを有効にすると、 &lt;code&gt;docker service&lt;/code&gt; コマンドで管理されるサービスの概念を使用して作業します。</target>
        </trans-unit>
        <trans-unit id="9c7249aba780563c809f2db930abdc6e1bfd6962" translate="yes" xml:space="preserve">
          <source>When you grant a newly-created or running service access to a config, the config is mounted as a file in the container. The location of the mount point within the container defaults to &lt;code&gt;/&amp;lt;config-name&amp;gt;&lt;/code&gt; in Linux containers. In Windows containers, configs are all mounted into &lt;code&gt;C:\ProgramData\Docker\configs&lt;/code&gt; and symbolic links are created to the desired location, which defaults to &lt;code&gt;C:\&amp;lt;config-name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">新しく作成されたサービスまたは実行中のサービスに構成へのアクセスを許可すると、構成はファイルとしてコンテナにマウントされます。コンテナ内のマウントポイントの場所は、Linuxコンテナではデフォルトで &lt;code&gt;/&amp;lt;config-name&amp;gt;&lt;/code&gt; になります。 Windowsコンテナーでは、構成はすべて &lt;code&gt;C:\ProgramData\Docker\configs&lt;/code&gt; マウントされ、シンボリックリンクが目的の場所（デフォルトでは &lt;code&gt;C:\&amp;lt;config-name&amp;gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5ee41a6c4dd4b46589cf697136a0dcb8c0d62b8c" translate="yes" xml:space="preserve">
          <source>When you grant a newly-created or running service access to a secret, the decrypted secret is mounted into the container in an in-memory filesystem. The location of the mount point within the container defaults to &lt;code&gt;/run/secrets/&amp;lt;secret_name&amp;gt;&lt;/code&gt; in Linux containers, or &lt;code&gt;C:\ProgramData\Docker\secrets&lt;/code&gt; in Windows containers. You can specify a custom location in Docker 17.06 and higher.</source>
          <target state="translated">新しく作成されたサービスまたは実行中のサービスにシークレットへのアクセスを許可すると、復号化されたシークレットがメモリ内ファイルシステムのコンテナーにマウントされます。コンテナー内のマウントポイントの場所は、Linuxコンテナーの場合はデフォルトで &lt;code&gt;/run/secrets/&amp;lt;secret_name&amp;gt;&lt;/code&gt; 、Windowsコンテナーの場合は &lt;code&gt;C:\ProgramData\Docker\secrets&lt;/code&gt; です。Docker 17.06以降では、カスタムの場所を指定できます。</target>
        </trans-unit>
        <trans-unit id="ebc514bab4714886f47b65daa8d1cc1cb2a839a9" translate="yes" xml:space="preserve">
          <source>When you have &lt;a href=&quot;../deploy-service/index&quot;&gt;deployed a service&lt;/a&gt; to your swarm, you can use the Docker CLI to see details about the service running in the swarm.</source>
          <target state="translated">あなたがいる場合は&lt;a href=&quot;../deploy-service/index&quot;&gt;サービスを展開し&lt;/a&gt;、あなたの群れに、あなたは群れで実行中のサービスについての詳細を確認するドッカーCLIを使用することができます。</target>
        </trans-unit>
        <trans-unit id="2e6a72db5067c8c45a49a31d45b2cccdec963330" translate="yes" xml:space="preserve">
          <source>When you have multiple Docker servers, or build unrelated Docker containers which can&amp;rsquo;t make use of the Docker build cache, it can be useful to have a caching proxy for your packages. This container makes the second download of any package almost instant.</source>
          <target state="translated">複数のDockerサーバーがある場合、またはDockerビルドキャッシュを利用できない関連のないDockerコンテナーをビルドする場合は、パッケージのキャッシュプロキシがあると便利です。このコンテナーは、パッケージの2番目のダウンロードをほぼ瞬時にします。</target>
        </trans-unit>
        <trans-unit id="227a9aa4df9134eec2610dbc3759daf153f5d97b" translate="yes" xml:space="preserve">
          <source>When you initialize a new swarm, you can use the &lt;code&gt;--autolock&lt;/code&gt; flag to enable autolocking of swarm manager nodes when Docker restarts.</source>
          <target state="translated">新しいswarmを初期化するとき、 &lt;code&gt;--autolock&lt;/code&gt; フラグを使用して、Dockerの再起動時にswarm managerノードの自動ロックを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="0fd7e62869c95d9c7b891f332c27a85b900503eb" translate="yes" xml:space="preserve">
          <source>When you install Docker Machine, you get a set of drivers for various cloud providers (like Amazon Web Services, DigitalOcean, or Microsoft Azure) and local providers (like Oracle VirtualBox, VMWare Fusion, or Microsoft Hyper-V).</source>
          <target state="translated">Docker Machineをインストールすると、様々なクラウドプロバイダー(Amazon Web Services、DigitalOcean、Microsoft Azureなど)とローカルプロバイダー(Oracle VirtualBox、VMWare Fusion、Microsoft Hyper-Vなど)用のドライバのセットが提供されます。</target>
        </trans-unit>
        <trans-unit id="4748ebd19f4904a354dddd52e21ae5a210180134" translate="yes" xml:space="preserve">
          <source>When you issue the &lt;code&gt;docker swarm ca --rotate&lt;/code&gt; command, the following things happen in sequence:</source>
          <target state="translated">&lt;code&gt;docker swarm ca --rotate&lt;/code&gt; コマンドを発行すると、次のことが順に発生します。</target>
        </trans-unit>
        <trans-unit id="9be1ec1c3aa439d6a8f3799366b6483c1b3d0fdb" translate="yes" xml:space="preserve">
          <source>When you make changes to your app code, remember to rebuild your image and recreate your app&amp;rsquo;s containers. To redeploy a service called &lt;code&gt;web&lt;/code&gt;, use:</source>
          <target state="translated">アプリのコードに変更を加える場合は、必ずイメージを再構築し、アプリのコンテナを再作成してください。 &lt;code&gt;web&lt;/code&gt; というサービスを再デプロイするには、次を使用します。</target>
        </trans-unit>
        <trans-unit id="181c3985bd54dc8a7f5e0263b672f843275ab7da" translate="yes" xml:space="preserve">
          <source>When you play in the sandbox, you also create root and repository keys. The sandbox is configured to store all the keys and files inside the &lt;code&gt;trustsandbox&lt;/code&gt; container. Since the keys you create in the sandbox are for play only, destroying the container destroys them as well.</source>
          <target state="translated">サンドボックスでプレイするときは、ルートキーとリポジトリキーも作成します。サンドボックスは、 &lt;code&gt;trustsandbox&lt;/code&gt; コンテナ内にすべてのキーとファイルを格納するように構成されています。サンドボックスで作成したキーはプレイ専用であるため、コンテナを破棄するとそれらも破棄されます。</target>
        </trans-unit>
        <trans-unit id="d98cb1a8e6388f3184b434ac6bea88d4430f1f63" translate="yes" xml:space="preserve">
          <source>When you publish a service port using &lt;code&gt;ingress&lt;/code&gt; mode, the swarm routing mesh makes the service accessible at the published port on every node regardless if there is a task for the service running on the node. If you use &lt;code&gt;host&lt;/code&gt; mode, the port is only bound on nodes where the service is running, and a given port on a node can only be bound once. You can only set the publication mode using the long syntax. For more information refer to &lt;a href=&quot;../../../swarm/ingress/index&quot;&gt;Use swarm mode routing mesh&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ingress&lt;/code&gt; モードを使用してサービスポートを公開すると、スウォームルーティングメッシュは、ノードで実行されているサービスのタスクがあるかどうかに関係なく、すべてのノードの公開されたポートでサービスにアクセスできるようにします。 &lt;code&gt;host&lt;/code&gt; モードを使用する場合、ポートはサービスが実行されているノードにのみバインドされ、ノード上の特定のポートは一度だけバインドできます。長い構文を使用してのみ公開モードを設定できます。詳細については、&lt;a href=&quot;../../../swarm/ingress/index&quot;&gt;「スウォームモードルーティングメッシュ&lt;/a&gt;を使用する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5b358de5f2366722230c389dc3af8cae955a51f5" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;docker swarm join&lt;/code&gt; and pass the manager token, the Docker Engine switches into swarm mode the same as for workers. Manager nodes also participate in the raft consensus. The new nodes should be &lt;code&gt;Reachable&lt;/code&gt;, but the existing manager remains the swarm &lt;code&gt;Leader&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;docker swarm join&lt;/code&gt; を実行してmanagerトークンを渡すと、Docker Engineはワーカーと同じようにswarmモードに切り替わります。マネージャーノードも、ラフトコンセンサスに参加します。新しいノードは &lt;code&gt;Reachable&lt;/code&gt; でなければなりませんが、既存のマネージャーはスウォーム &lt;code&gt;Leader&lt;/code&gt; ままです。</target>
        </trans-unit>
        <trans-unit id="9aa31e4be234ea9be34dc4b55b5975444c30de17" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;docker-compose up&lt;/code&gt; it reads the overrides automatically.</source>
          <target state="translated">&lt;code&gt;docker-compose up&lt;/code&gt; を実行すると、オーバーライドが自動的に読み込まれます。</target>
        </trans-unit>
        <trans-unit id="b7a1e41fc9ef791323721c8081a92c6b380fbbe8" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;docker-compose up&lt;/code&gt; with this configuration, Compose looks for the &lt;code&gt;POSTGRES_VERSION&lt;/code&gt; environment variable in the shell and substitutes its value in. For this example, Compose resolves the &lt;code&gt;image&lt;/code&gt; to &lt;code&gt;postgres:9.3&lt;/code&gt; before running the configuration.</source>
          <target state="translated">この構成で &lt;code&gt;docker-compose up&lt;/code&gt; を実行すると、Composeはシェルで &lt;code&gt;POSTGRES_VERSION&lt;/code&gt; 環境変数を探し、その値を代入します。この例では、構成を実行する前に、Composeが &lt;code&gt;image&lt;/code&gt; を &lt;code&gt;postgres:9.3&lt;/code&gt; に解決します。</target>
        </trans-unit>
        <trans-unit id="e12bfaac846841252dc0fec7e38897794bae3d8b" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;docker-compose up&lt;/code&gt;, the &lt;code&gt;web&lt;/code&gt; service defined above uses the image &lt;code&gt;webapp:v1.5&lt;/code&gt;. You can verify this with the &lt;a href=&quot;../reference/config/index&quot;&gt;config command&lt;/a&gt;, which prints your resolved application config to the terminal:</source>
          <target state="translated">&lt;code&gt;docker-compose up&lt;/code&gt; を実行すると、上記で定義された &lt;code&gt;web&lt;/code&gt; サービスはイメージ &lt;code&gt;webapp:v1.5&lt;/code&gt; を使用します。これは、解決されたアプリケーション構成を端末に出力する&lt;a href=&quot;../reference/config/index&quot;&gt;configコマンド&lt;/a&gt;で確認できます。</target>
        </trans-unit>
        <trans-unit id="769848490fa8b9bd71e97a90ce524eb9302c98de" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;docker-compose up&lt;/code&gt;, the following happens:</source>
          <target state="translated">&lt;code&gt;docker-compose up&lt;/code&gt; を実行すると、次のことが起こります。</target>
        </trans-unit>
        <trans-unit id="e7d318565f3027259008aa0cf835c852a704f761" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;service update&lt;/code&gt; with the &lt;code&gt;--image&lt;/code&gt; flag, the swarm manager queries Docker Hub or your private Docker registry for the digest the tag currently points to and updates the service tasks to use that digest.</source>
          <target state="translated">&lt;code&gt;--image&lt;/code&gt; フラグを指定して &lt;code&gt;service update&lt;/code&gt; を実行すると、swarm managerはDocker HubまたはプライベートDockerレジストリーにクエリを実行し、タグが現在指しているダイジェストを調べ、そのダイジェストを使用するようにサービスタスクを更新します。</target>
        </trans-unit>
        <trans-unit id="1e001c42af74019f63f06aae03d9090fcc8c3bfa" translate="yes" xml:space="preserve">
          <source>When you run a &lt;a href=&quot;../service_update/index&quot;&gt;service update&lt;/a&gt;, the scheduler updates a maximum of 2 tasks at a time, with &lt;code&gt;10s&lt;/code&gt; between updates. For more information, refer to the &lt;a href=&quot;../../../swarm/swarm-tutorial/rolling-update/index&quot;&gt;rolling updates tutorial&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../service_update/index&quot;&gt;サービス更新&lt;/a&gt;を実行すると、スケジューラは一度に最大2つのタスクを更新し、更新の間隔は &lt;code&gt;10s&lt;/code&gt; です。詳細については、&lt;a href=&quot;../../../swarm/swarm-tutorial/rolling-update/index&quot;&gt;ローリングアップデートのチュートリアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fe8353be6e6c84c145bacb17c4d3aa92a8d805c3" translate="yes" xml:space="preserve">
          <source>When you run a &lt;code&gt;docker pull&lt;/code&gt; command, Docker Engine is using an integrated Notary library (the same one as Notary CLI) to request the mapping of tag to sha256 digest for the one tag you are interested in (or if you passed the &lt;code&gt;--all&lt;/code&gt; flag, the client uses the list operation to efficiently retrieve all the mappings). Having validated the signatures on the trust data, the client instructs the Engine to do a &amp;ldquo;pull by digest&amp;rdquo;. During this pull, the Engine uses the sha256 checksum as a content address to request and validate the image manifest from the Docker registry.</source>
          <target state="translated">&lt;code&gt;docker pull&lt;/code&gt; コマンドを実行すると、Dockerエンジンは統合されたNotaryライブラリ（Notary CLIと同じもの）を使用して、関心のある1つのタグのsha256ダイジェストへのタグのマッピングを要求します（または &lt;code&gt;--all&lt;/code&gt; フラグを指定すると、クライアントはリスト操作を使用して、すべてのマッピングを効率的に取得します。信頼データの署名を検証すると、クライアントはエンジンに「プルダイジェスト」を実行するように指示します。このプルの間、エンジンはsha256チェックサムをコンテンツアドレスとして使用し、Dockerレジストリからのイメージマニフェストをリクエストして検証します。</target>
        </trans-unit>
        <trans-unit id="0f8812f0025bfda9b648a91a70d4c415d7cc227b" translate="yes" xml:space="preserve">
          <source>When you run a container, it uses the &lt;code&gt;docker-default&lt;/code&gt; policy unless you override it with the &lt;code&gt;security-opt&lt;/code&gt; option. For example, the following explicitly specifies the default policy:</source>
          <target state="translated">コンテナーを実行すると、 &lt;code&gt;security-opt&lt;/code&gt; オプションでオーバーライドしない限り、 &lt;code&gt;docker-default&lt;/code&gt; ポリシーが使用されます。たとえば、次の例ではデフォルトのポリシーを明示的に指定しています。</target>
        </trans-unit>
        <trans-unit id="1e6aa4e5faa2a45e376f9b3bedd3a469848e8e6f" translate="yes" xml:space="preserve">
          <source>When you run a container, it uses the default profile unless you override it with the &lt;code&gt;--security-opt&lt;/code&gt; option. For example, the following explicitly specifies a policy:</source>
          <target state="translated">コンテナーを実行すると、 &lt;code&gt;--security-opt&lt;/code&gt; オプションでオーバーライドしない限り、デフォルトのプロファイルが使用されます。たとえば、次の例ではポリシーを明示的に指定しています。</target>
        </trans-unit>
        <trans-unit id="61bf4508a1257561b77a529715856368bdb729a4" translate="yes" xml:space="preserve">
          <source>When you run a swarm of Docker Engines, &lt;strong&gt;manager nodes&lt;/strong&gt; are the key components for managing the swarm and storing the swarm state. It is important to understand some key features of manager nodes to properly deploy and maintain the swarm.</source>
          <target state="translated">Dockerエンジンのスウォームを実行する場合、スウォームを管理し、スウォームの状態を保存するための主要なコンポーネントは&lt;strong&gt;マネージャーノード&lt;/strong&gt;です。スウォームを適切にデプロイおよび維持するには、マネージャノードのいくつかの主要な機能を理解することが重要です。</target>
        </trans-unit>
        <trans-unit id="72d32934008766b5c46ded52e53dd889b220a00b" translate="yes" xml:space="preserve">
          <source>When you run the &lt;code&gt;docker swarm init&lt;/code&gt; command with the &lt;code&gt;--force-new-cluster&lt;/code&gt; flag, the Docker Engine where you run the command becomes the manager node of a single-node swarm which is capable of managing and running services. The manager has all the previous information about services and tasks, worker nodes are still part of the swarm, and services are still running. You need to add or re-add manager nodes to achieve your previous task distribution and ensure that you have enough managers to maintain high availability and prevent losing the quorum.</source>
          <target state="translated">&lt;code&gt;--force-new-cluster&lt;/code&gt; フラグを指定して &lt;code&gt;docker swarm init&lt;/code&gt; コマンドを実行すると、コマンドを実行するDockerエンジンが、サービスを管理および実行できる単一ノードswarmのマネージャーノードになります。マネージャーにはサービスとタスクに関する以前の情報がすべてあり、ワーカーノードは群れの一部であり、サービスはまだ実行されています。以前のタスク分散を達成し、高可用性を維持し、クォーラムの損失を防ぐのに十分なマネージャーがいることを確認するには、マネージャーノードを追加または再追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="2ffbaa86e33367e6a7467bdc6bea428c7d40a1e1" translate="yes" xml:space="preserve">
          <source>When you run the Engine in swarm mode on your local machine, you can create and test services based upon images you&amp;rsquo;ve created or other available images. In your production environment, swarm mode provides a fault-tolerant platform with cluster management features to keep your services running and available.</source>
          <target state="translated">ローカルマシンでエンジンをスウォームモードで実行すると、作成したイメージまたは他の使用可能なイメージに基づいてサービスを作成およびテストできます。本番環境では、スウォームモードは、サービスを実行して利用できるように維持するクラスター管理機能を備えたフォールトトレラントプラットフォームを提供します。</target>
        </trans-unit>
        <trans-unit id="750c4b710d0cb74402ddfba17f73f7d0eb3ab307" translate="yes" xml:space="preserve">
          <source>When you run the command to create a swarm, the Docker Engine starts running in swarm mode.</source>
          <target state="translated">コマンドを実行してスウォームを作成すると、Docker Engineがスウォームモードで動作を開始します。</target>
        </trans-unit>
        <trans-unit id="d992273270b65a90a731d6f61610be5b8525d3ee" translate="yes" xml:space="preserve">
          <source>When you run the container, the environment variable defined in the Compose file takes precedence.</source>
          <target state="translated">コンテナを実行すると、Composeファイルで定義されている環境変数が優先されます。</target>
        </trans-unit>
        <trans-unit id="3abb5399848c4ee635f216af3eb628543f771345" translate="yes" xml:space="preserve">
          <source>When you run the container, you can see that &lt;code&gt;top&lt;/code&gt; is the only process:</source>
          <target state="translated">コンテナーを実行すると、 &lt;code&gt;top&lt;/code&gt; が唯一のプロセスであることがわかります。</target>
        </trans-unit>
        <trans-unit id="51557aa9da2407a3cd428affbfa7c31e0188d702" translate="yes" xml:space="preserve">
          <source>When you run this command on a worker, that worker leaves the swarm.</source>
          <target state="translated">このコマンドをワーカーに実行すると、そのワーカーはスウォームから離れます。</target>
        </trans-unit>
        <trans-unit id="98687e0b4ae89bd66bce98ffa41c159a344ca9ee" translate="yes" xml:space="preserve">
          <source>When you run this image, you&amp;rsquo;ll see the single &lt;code&gt;PID 1&lt;/code&gt; process:</source>
          <target state="translated">このイメージを実行すると、単一の &lt;code&gt;PID 1&lt;/code&gt; プロセスが表示されます。</target>
        </trans-unit>
        <trans-unit id="351351567aaf46c905a0b66edac7f236d7ce9f87" translate="yes" xml:space="preserve">
          <source>When you set the node back to &lt;code&gt;Active&lt;/code&gt; availability, it can receive new tasks:</source>
          <target state="translated">ノードを &lt;code&gt;Active&lt;/code&gt; 可用性に戻すと、ノードは新しいタスクを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="28595c7309ac3f4d61a93d465dc644caf9420d22" translate="yes" xml:space="preserve">
          <source>When you set the same environment variable in multiple files, here&amp;rsquo;s the priority used by Compose to choose which value to use:</source>
          <target state="translated">複数のファイルで同じ環境変数を設定する場合、使用する値を選択するためにComposeが使用する優先順位は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="54fb08685f8af27002faa75fd1cef88f1b76e09a" translate="yes" xml:space="preserve">
          <source>When you specify multiple networks, the command attempts to delete each in turn. If the deletion of one network fails, the command continues to the next on the list and tries to delete that. The command reports success or failure for each deletion.</source>
          <target state="translated">複数のネットワークを指定すると、コマンドは順番にそれぞれのネットワークの削除を試みます。1 つのネットワークの削除に失敗した場合、コマンドはリストの次のネットワークに進み、そのネットワークの削除を試みます。コマンドは、削除ごとに成功または失敗を報告します。</target>
        </trans-unit>
        <trans-unit id="706807a25a8e54da896fbcaa01fe782d538959bb" translate="yes" xml:space="preserve">
          <source>When you start a WordPress container, you provide it with the parameters it needs by setting them as environment variables. The WordPress image has been updated so that the environment variables which contain important data for WordPress, such as &lt;code&gt;WORDPRESS_DB_PASSWORD&lt;/code&gt;, also have variants which can read their values from a file (&lt;code&gt;WORDPRESS_DB_PASSWORD_FILE&lt;/code&gt;). This strategy ensures that backward compatibility is preserved, while allowing your container to read the information from a Docker-managed secret instead of being passed directly.</source>
          <target state="translated">WordPressコンテナーを起動するときに、必要なパラメーターを環境変数として設定して提供します。WordPressイメージが更新され、 &lt;code&gt;WORDPRESS_DB_PASSWORD&lt;/code&gt; などのWordPressの重要なデータを含む環境変数にも、ファイル（ &lt;code&gt;WORDPRESS_DB_PASSWORD_FILE&lt;/code&gt; ）から値を読み取ることができるバリアントが含まれるようになりました。この戦略により、下位互換性が維持され、コンテナーが直接渡される代わりにDocker管理のシークレットから情報を読み取ることができるようになります。</target>
        </trans-unit>
        <trans-unit id="f203cb316009fe72169e51e61661922166053c2a" translate="yes" xml:space="preserve">
          <source>When you start a container use the &lt;code&gt;--network&lt;/code&gt; flag to connect it to a network. This adds the &lt;code&gt;busybox&lt;/code&gt; container to the &lt;code&gt;my-net&lt;/code&gt; network.</source>
          <target state="translated">コンテナーを起動するときに、 &lt;code&gt;--network&lt;/code&gt; フラグを使用してコンテナーをネットワークに接続します。これにより、 &lt;code&gt;my-net&lt;/code&gt; ネットワークに &lt;code&gt;busybox&lt;/code&gt; コンテナが追加されます。</target>
        </trans-unit>
        <trans-unit id="08628f8b0765690e72e520f6f47c23348a00e7ee" translate="yes" xml:space="preserve">
          <source>When you start a container, use the &lt;code&gt;--network&lt;/code&gt; flag to connect it to a network. This example adds the &lt;code&gt;busybox&lt;/code&gt; container to the &lt;code&gt;mynet&lt;/code&gt; network:</source>
          <target state="translated">コンテナーを起動するときに、 &lt;code&gt;--network&lt;/code&gt; フラグを使用してコンテナーをネットワークに接続します。この例では、 &lt;code&gt;mynet&lt;/code&gt; ネットワークに &lt;code&gt;busybox&lt;/code&gt; コンテナーを追加します。</target>
        </trans-unit>
        <trans-unit id="8a82fcfb8cf725c9fc19f051610ed497be3f1aab" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;--mount&lt;/code&gt; with &lt;code&gt;type=bind&lt;/code&gt;, the host-path must refer to an &lt;em&gt;existing&lt;/em&gt; path on the host. The path will not be created for you and the service will fail with an error if the path does not exist.</source>
          <target state="translated">&lt;code&gt;type=bind&lt;/code&gt; で &lt;code&gt;--mount&lt;/code&gt; を使用する場合、host-path はホスト上の&lt;em&gt;既存の&lt;/em&gt;パスを参照する必要があります。パスが作成されず、パスが存在しない場合、サービスはエラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="4c5b67dc83ae27dcab6f2360463cf44190eb3e41" translate="yes" xml:space="preserve">
          <source>When you use multiple configuration files, you must make sure all paths in the files are relative to the base Compose file (the first Compose file specified with &lt;code&gt;-f&lt;/code&gt;). This is required because override files need not be valid Compose files. Override files can contain small fragments of configuration. Tracking which fragment of a service is relative to which path is difficult and confusing, so to keep paths easier to understand, all paths must be defined relative to the base file.</source>
          <target state="translated">複数の構成ファイルを使用する場合、ファイル内のすべてのパスがベースのComposeファイル（ &lt;code&gt;-f&lt;/code&gt; で指定された最初のComposeファイル）からの相対パスであることを確認する必要があります。オーバーライドファイルが有効なComposeファイルである必要はないため、これが必要です。オーバーライドファイルには、構成の小さなフラグメントを含めることができます。サービスのどのフラグメントがどのパスに関連しているかを追跡することは困難で混乱を招くため、パスを理解しやすくするために、すべてのパスはベースファイルを基準にして定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="6dd325599d42e8c204578019eb5b5e0f4bbab9b4" translate="yes" xml:space="preserve">
          <source>When you use the &lt;code&gt;--format&lt;/code&gt; option, the &lt;code&gt;search&lt;/code&gt; command will output the data exactly as the template declares. If you use the &lt;code&gt;table&lt;/code&gt; directive, column headers are included as well.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションを使用すると、 &lt;code&gt;search&lt;/code&gt; コマンドは、テンプレートが宣言したとおりにデータを出力します。 &lt;code&gt;table&lt;/code&gt; ディレクティブを使用する場合、列ヘッダーも含まれます。</target>
        </trans-unit>
        <trans-unit id="5eba4498e9290af10de98ddcffc826e4055534a0" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re developing software, the ability to run an application in an isolated environment and interact with it is crucial. The Compose command line tool can be used to create the environment and interact with it.</source>
          <target state="translated">ソフトウェアを開発する場合、分離された環境でアプリケーションを実行し、それと対話する機能は重要です。Composeコマンドラインツールを使用して、環境を作成し、それと対話することができます。</target>
        </trans-unit>
        <trans-unit id="763c16d7b081aae2a8308556197f30cff173394f" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re done with your build, you&amp;rsquo;re ready to look into &lt;a href=&quot;../../../get-started/index#/contributing-to-docker-hub&quot;&gt;&lt;em&gt;Pushing a repository to its registry&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">ビルドが完了したら&lt;a href=&quot;../../../get-started/index#/contributing-to-docker-hub&quot;&gt;&lt;em&gt;、リポジトリーをそのレジストリー&lt;/em&gt;&lt;/a&gt;に&lt;em&gt;プッシュする&lt;/em&gt;を調べる準備ができ&lt;em&gt;ています&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="707e7a36e3e69545d23dbacd2932b1286dc19676" translate="yes" xml:space="preserve">
          <source>When your daemons use different values for these flags, you can run them on the same host without any problems. It is very important to properly understand the meaning of those options and to use them correctly.</source>
          <target state="translated">デーモンがこれらのフラグに異なる値を使用する場合、同じホスト上で問題なく実行することができます。これらのオプションの意味を正しく理解し、正しく使用することが非常に重要です。</target>
        </trans-unit>
        <trans-unit id="35c068a50a221384b7bfa6530b181fb06056b361" translate="yes" xml:space="preserve">
          <source>Whenever a new a thin pool device is created (during &lt;code&gt;docker pull&lt;/code&gt; or during container creation), the Engine checks if the minimum free space is available. If sufficient space is unavailable, then device creation fails and any relevant &lt;code&gt;docker&lt;/code&gt; operation fails.</source>
          <target state="translated">新しいシンプールデバイスが作成されるたびに（ &lt;code&gt;docker pull&lt;/code&gt; 中またはコンテナーの作成中に）、エンジンは最小空き容量が利用可能かどうかを確認します。十分なスペースが利用できない場合、デバイスの作成は失敗し、関連するすべての &lt;code&gt;docker&lt;/code&gt; 操作が失敗します。</target>
        </trans-unit>
        <trans-unit id="44ec6cb40c35edc5b0191246be62c24270dbc675" translate="yes" xml:space="preserve">
          <source>Whenever possible, Docker will re-use the intermediate images (cache), to accelerate the &lt;code&gt;docker build&lt;/code&gt; process significantly. This is indicated by the &lt;code&gt;Using cache&lt;/code&gt; message in the console output. (For more information, see the &lt;a href=&quot;https://docs.docker.com/develop/develop-images#build-cache&quot;&gt;Build cache section&lt;/a&gt; in the &lt;code&gt;Dockerfile&lt;/code&gt; best practices guide):</source>
          <target state="translated">Dockerは可能な限り中間イメージ（キャッシュ）を再利用して、Dockerの &lt;code&gt;docker build&lt;/code&gt; プロセスを大幅に高速化します。これは、コンソール出力の &lt;code&gt;Using cache&lt;/code&gt; メッセージで示されます。（詳細については、 &lt;code&gt;Dockerfile&lt;/code&gt; ベストプラクティスガイドの&lt;a href=&quot;https://docs.docker.com/develop/develop-images#build-cache&quot;&gt;ビルドキャッシュのセクション&lt;/a&gt;をご覧ください）：</target>
        </trans-unit>
        <trans-unit id="27a56ebbe46149362bc13f661d7aff0131a3ac79" translate="yes" xml:space="preserve">
          <source>Where can I find example compose files?</source>
          <target state="translated">コンパウンドファイルの例はどこにありますか?</target>
        </trans-unit>
        <trans-unit id="f8341ff60c2c2468028d444b1e4546ae8ee8cbb3" translate="yes" xml:space="preserve">
          <source>Where is your built image? It&amp;rsquo;s in your machine&amp;rsquo;s local Docker image registry:</source>
          <target state="translated">ビルドしたイメージはどこにありますか？これは、マシンのローカルDockerイメージレジストリにあります。</target>
        </trans-unit>
        <trans-unit id="0320ac9cef49bf6819f7f5ea05026898ca882a24" translate="yes" xml:space="preserve">
          <source>Where to go next</source>
          <target state="translated">次に行く場所</target>
        </trans-unit>
        <trans-unit id="a644fa5b67d4b2e0d76488bf86449a117b5ff2b2" translate="yes" xml:space="preserve">
          <source>Whether IPv6 is enabled on the network or not.</source>
          <target state="translated">ネットワーク上でIPv6が有効になっているかどうか。</target>
        </trans-unit>
        <trans-unit id="f9413184ca919d289497ed4cc271fbef5835b7df" translate="yes" xml:space="preserve">
          <source>Whether plugin is enabled or not</source>
          <target state="translated">プラグインが有効かどうか</target>
        </trans-unit>
        <trans-unit id="eae9fa23e792e46bb9c0094f09d78ff16d03491a" translate="yes" xml:space="preserve">
          <source>Whether the network is internal or not.</source>
          <target state="translated">ネットワークが内部にあるかどうか。</target>
        </trans-unit>
        <trans-unit id="27d5c20766efcd445220b34a340e9e9e2dd98b64" translate="yes" xml:space="preserve">
          <source>Whether to disable OOM Killer for the container or not.</source>
          <target state="translated">コンテナのOOM Killerを無効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="ba2de49dd81e93c5dffc11f4938991db86ec05ce" translate="yes" xml:space="preserve">
          <source>Whether your primary system is Mac, Windows, or Linux, you can install Docker Machine on it and use &lt;code&gt;docker-machine&lt;/code&gt; commands to provision and manage large numbers of Docker hosts. It automatically creates hosts, installs Docker Engine on them, then configures the &lt;code&gt;docker&lt;/code&gt; clients. Each managed host (&amp;ldquo;&lt;strong&gt;&lt;em&gt;machine&lt;/em&gt;&lt;/strong&gt;&amp;rdquo;) is the combination of a Docker host and a configured client.</source>
          <target state="translated">プライマリシステムがMac、Windows、Linuxのいずれであっても、Docker Machineをインストールし、 &lt;code&gt;docker-machine&lt;/code&gt; コマンドを使用して多数のDockerホストをプロビジョニングおよび管理できます。それは自動的に、ホストを作成し、それらにドッカーエンジンをインストールし、設定する &lt;code&gt;docker&lt;/code&gt; クライアントを。各管理対象ホスト（「&lt;strong&gt;&lt;em&gt;マシン&lt;/em&gt;&lt;/strong&gt;」）は、Dockerホストと構成済みクライアントの組み合わせです。</target>
        </trans-unit>
        <trans-unit id="0efdbd0a7053e2ee0fbc85c28cc298fa93191756" translate="yes" xml:space="preserve">
          <source>Which will exit cleanly on &lt;code&gt;docker stop&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;docker stop&lt;/code&gt; できれいに終了します：</target>
        </trans-unit>
        <trans-unit id="4422566ade275ffedf7476a519c4c818dfd32edd" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#placement-constraints&quot;&gt;placement constraints&lt;/a&gt; limit the nodes a service can run on, &lt;em&gt;placement preferences&lt;/em&gt; try to place tasks on appropriate nodes in an algorithmic way (currently, only spread evenly). For instance, if you assign each node a &lt;code&gt;rack&lt;/code&gt; label, you can set a placement preference to spread the service evenly across nodes with the &lt;code&gt;rack&lt;/code&gt; label, by value. This way, if you lose a rack, the service is still running on nodes on other racks.</source>
          <target state="translated">一方で&lt;a href=&quot;#placement-constraints&quot;&gt;配置制約は&lt;/a&gt;サービスが動作できるノードを制限し、&lt;em&gt;配置の好みは、&lt;/em&gt;アルゴリズムの道（現在、唯一均等に分散）に適切なノード上の場所のタスクにしてみてください。たとえば、各ノードに &lt;code&gt;rack&lt;/code&gt; ラベルを割り当てる場合、値によって、 &lt;code&gt;rack&lt;/code&gt; ラベルを持つノード全体にサービスを均等に分散するように配置設定を設定できます。このようにして、ラックを失った場合でも、サービスは他のラックのノードで実行されています。</target>
        </trans-unit>
        <trans-unit id="c1b77da42e2054fee5ff7f7a237235ab11d93f46" translate="yes" xml:space="preserve">
          <source>While Docker currently only enables capabilities, it doesn&amp;rsquo;t interfere with the other systems. This means that there are many different ways to harden a Docker host. Here are a few examples.</source>
          <target state="translated">Dockerは現在、機能のみを有効にしていますが、他のシステムに干渉することはありません。つまり、Dockerホストを強化するにはさまざまな方法があります。以下にいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="1f1eeddee8bf03683d7d13b37af1f9a961ec2067" translate="yes" xml:space="preserve">
          <source>While a client is connected to container&amp;rsquo;s stdio using &lt;code&gt;docker attach&lt;/code&gt;, Docker uses a ~1MB memory buffer to maximize the throughput of the application. If this buffer is filled, the speed of the API connection will start to have an effect on the process output writing speed. This is similar to other applications like SSH. Because of this, it is not recommended to run performance critical applications that generate a lot of output in the foreground over a slow client connection. Instead, users should use the &lt;code&gt;docker logs&lt;/code&gt; command to get access to the logs.</source>
          <target state="translated">クライアントが &lt;code&gt;docker attach&lt;/code&gt; を使用してコンテナーのstdioに接続されている間、Dockerは〜1MBのメモリバッファーを使用してアプリケーションのスループットを最大化します。このバッファーがいっぱいになると、API接続の速度がプロセス出力の書き込み速度に影響し始めます。これは、SSHなどの他のアプリケーションと同様です。このため、低速のクライアント接続を介してフォアグラウンドで大量の出力を生成するパフォーマンス重視のアプリケーションを実行することはお勧めしません。代わりに、ユーザーは &lt;code&gt;docker logs&lt;/code&gt; コマンドを使用してログにアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="268b018726c6c7311c68727b479e2d0400d30a75" translate="yes" xml:space="preserve">
          <source>While a mixed FIPS environment makes upgrading or changing status easier, Docker recommends not running a mixed FIPS environment in production.</source>
          <target state="translated">FIPS環境が混在しているとアップグレードやステータスの変更が容易になりますが、Dockerでは本番環境ではFIPS環境を混在して実行しないことを推奨しています。</target>
        </trans-unit>
        <trans-unit id="513bc8adc35891c68af8f0a544770302e0ad6733" translate="yes" xml:space="preserve">
          <source>While it is possible to declare &lt;a href=&quot;#volumes&quot;&gt;volumes&lt;/a&gt; on the file as part of the service declaration, this section allows you to create named volumes (without relying on &lt;code&gt;volumes_from&lt;/code&gt;) that can be reused across multiple services, and are easily retrieved and inspected using the docker command line or API. See the &lt;a href=&quot;../../engine/reference/commandline/volume_create/index&quot;&gt;docker volume&lt;/a&gt; subcommand documentation for more information.</source>
          <target state="translated">サービス宣言の一部としてファイルで&lt;a href=&quot;#volumes&quot;&gt;ボリューム&lt;/a&gt;を宣言することは可能ですが、このセクションでは、複数のサービスで再利用でき、 &lt;code&gt;volumes_from&lt;/code&gt; コマンドラインを使用して簡単に取得および検査できる名前付きボリュームを作成できます（volumes_fromに依存しません）。またはAPI。詳細については、&lt;a href=&quot;../../engine/reference/commandline/volume_create/index&quot;&gt;docker volume&lt;/a&gt;サブコマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5c9145f9ba398e4e78310e985a7f0f97d77f6525" translate="yes" xml:space="preserve">
          <source>While it is possible to declare volumes on the fly as part of the service declaration, this section allows you to create named volumes that can be reused across multiple services (without relying on &lt;code&gt;volumes_from&lt;/code&gt;), and are easily retrieved and inspected using the docker command line or API. See the &lt;a href=&quot;../../../engine/reference/commandline/volume_create/index&quot;&gt;docker volume&lt;/a&gt; subcommand documentation for more information.</source>
          <target state="translated">サービス宣言の一部としてオンザフライでボリュームを宣言することは可能ですが、このセクションでは、複数のサービスで再利用でき（ &lt;code&gt;volumes_from&lt;/code&gt; に依存せずに）、Dockerコマンドラインを使用して簡単に取得および検査できる名前付きボリュームを作成できますまたはAPI。詳細については、&lt;a href=&quot;../../../engine/reference/commandline/volume_create/index&quot;&gt;docker volume&lt;/a&gt;サブコマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9db73dbad0ad4322b6dc5f3fc9ed23d7eb5af572" translate="yes" xml:space="preserve">
          <source>While it is possible to scale a swarm down to a single manager node, it is impossible to demote the last manager node. This ensures you maintain access to the swarm and that the swarm can still process requests. Scaling down to a single manager is an unsafe operation and is not recommended. If the last node leaves the swarm unexpectedly during the demote operation, the swarm becomes unavailable until you reboot the node or restart with &lt;code&gt;--force-new-cluster&lt;/code&gt;.</source>
          <target state="translated">スウォームを単一のマネージャーノードに縮小することは可能ですが、最後のマネージャーノードを降格することはできません。これにより、スウォームへのアクセスを維持し、スウォームが引き続きリクエストを処理できるようになります。単一のマネージャーに縮小することは安全ではない操作であり、推奨されません。降格操作中に最後のノードが予期せずにスウォームを離れると、ノードを再起動するか、-- &lt;code&gt;--force-new-cluster&lt;/code&gt; 再起動するまで、スウォームは使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="866979840de29850ea1ca517e95da01ec3655e99" translate="yes" xml:space="preserve">
          <source>While not required, it is a good idea to install Docker Swarm to manage the cluster that makes up your network. Swarm provides sophisticated discovery and server management tools that can assist your implementation.</source>
          <target state="translated">必須ではありませんが、ネットワークを構成するクラスタを管理するためにDocker Swarmをインストールすることをお勧めします。Swarmは、実装を支援する洗練されたディスカバリーとサーバー管理ツールを提供します。</target>
        </trans-unit>
        <trans-unit id="c4ee6d731379b46457e7ce5dacebd9a0415e02b4" translate="yes" xml:space="preserve">
          <source>While not strictly a means of identifying a container, you can specify a version of an image you&amp;rsquo;d like to run the container with by adding &lt;code&gt;image[:tag]&lt;/code&gt; to the command. For example, &lt;code&gt;docker run ubuntu:14.04&lt;/code&gt;.</source>
          <target state="translated">厳密にコンテナを識別する手段ではありませんが、コマンドに &lt;code&gt;image[:tag]&lt;/code&gt; を追加することで、コンテナを実行するイメージのバージョンを指定できます。たとえば、 &lt;code&gt;docker run ubuntu:14.04&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c20f7eb2cc2fc935b0e6577069e77d334f7a663b" translate="yes" xml:space="preserve">
          <source>While squashing layers may produce smaller images, it may have a negative impact on performance, as a single layer takes longer to extract, and downloading a single layer cannot be parallelized.</source>
          <target state="translated">レイヤーを潰すことでより小さな画像が得られるかもしれませんが、単一のレイヤーの抽出に時間がかかったり、単一のレイヤーのダウンロードが並列化できなかったりと、パフォーマンスに悪影響を及ぼす可能性があります。</target>
        </trans-unit>
        <trans-unit id="5fd054942270a6e8179bca5167bd1568ae928b70" translate="yes" xml:space="preserve">
          <source>While the JSON form is unambiguous and does not use the un-necessary cmd.exe, it does require more verbosity through double-quoting and escaping. The alternate mechanism is to use the &lt;code&gt;SHELL&lt;/code&gt; instruction and the &lt;em&gt;shell&lt;/em&gt; form, making a more natural syntax for Windows users, especially when combined with the &lt;code&gt;escape&lt;/code&gt; parser directive:</source>
          <target state="translated">JSONフォームはあいまいではなく、不要なcmd.exeを使用しませんが、二重引用符とエスケープを使用して、より多くの冗長性を必要とします。代替のメカニズムは、 &lt;code&gt;SHELL&lt;/code&gt; 命令と&lt;em&gt;シェル&lt;/em&gt;形式を使用することです。これにより、特に &lt;code&gt;escape&lt;/code&gt; パーサーディレクティブと組み合わせると、Windowsユーザーにとってより自然な構文になります。</target>
        </trans-unit>
        <trans-unit id="39b216332ce41eb5410aed184f74d6a686599f4e" translate="yes" xml:space="preserve">
          <source>While the root user inside a user-namespaced container process has many of the expected privileges of the superuser within the container, the Linux kernel imposes restrictions based on internal knowledge that this is a user-namespaced process. One notable restriction is the inability to use the &lt;code&gt;mknod&lt;/code&gt; command. Permission is denied for device creation within the container when run by the &lt;code&gt;root&lt;/code&gt; user.</source>
          <target state="translated">ユーザー名前空間コンテナープロセス内のrootユーザーは、コンテナー内のスーパーユーザーの予想される特権の多くを持っていますが、Linuxカーネルは、これがユーザー名前空間プロセスであるという内部知識に基づいて制限を課します。注目すべき制限の1つは、 &lt;code&gt;mknod&lt;/code&gt; コマンドを使用できないことです。 &lt;code&gt;root&lt;/code&gt; ユーザーが実行すると、コンテナー内でのデバイス作成の許可が拒否されます。</target>
        </trans-unit>
        <trans-unit id="afba213192a09bd59848e2b46fbd3b1460efbaeb" translate="yes" xml:space="preserve">
          <source>While the snapshot key is managed by the notary client by default, use the &lt;code&gt;notary key rotate snapshot -r&lt;/code&gt; command to rotate the snapshot key to the server, such that the notary server can sign snapshots. This is particularly useful when using delegations with a trusted collection, so that delegates never need access to the snapshot key to push their updates to the collection.</source>
          <target state="translated">スナップショットキーはデフォルトで公証クライアントによって管理されますが、公証サーバーがスナップショットに署名できるように、 &lt;code&gt;notary key rotate snapshot -r&lt;/code&gt; コマンドを使用してスナップショットキーをサーバーにローテーションします。これは、信頼されたコレクションで委任を使用するときに特に役立ちます。そのため、委任は、更新をコレクションにプッシュするためにスナップショットキーにアクセスする必要がありません。</target>
        </trans-unit>
        <trans-unit id="44f886e2c69983cd1d1f013673c9de478ef16d72" translate="yes" xml:space="preserve">
          <source>While this is usable, it&amp;rsquo;s not very human-readable. For this reason, there is &lt;code&gt;prettyjson&lt;/code&gt;:</source>
          <target state="translated">これは使用可能ですが、人間が読める形式ではありません。このため、 &lt;code&gt;prettyjson&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="94320f532dda06f4430ad0145aa89ee5e12bf2bd" translate="yes" xml:space="preserve">
          <source>Why Docker?</source>
          <target state="translated">なぜDockerなのか?</target>
        </trans-unit>
        <trans-unit id="69f00c8ab432a23179b529bd7e2e6db4b4929bfc" translate="yes" xml:space="preserve">
          <source>Why build ASP.NET Core?</source>
          <target state="translated">なぜASP.NET Coreを構築するのか?</target>
        </trans-unit>
        <trans-unit id="20a426fa53f401ddfca8b71d17fa288c649374e8" translate="yes" xml:space="preserve">
          <source>Why do my services take 10 seconds to recreate or stop?</source>
          <target state="translated">なぜ私のサービスは10秒かけて作り直したり、停止したりするのですか?</target>
        </trans-unit>
        <trans-unit id="524327520ac055c1f9bff03522e6c0fb8a213cb5" translate="yes" xml:space="preserve">
          <source>Why should I use it?</source>
          <target state="translated">なぜ使わなければならないのか?</target>
        </trans-unit>
        <trans-unit id="6707a2abd3396743caaaaa1f63a03260455f8610" translate="yes" xml:space="preserve">
          <source>Will make &lt;code&gt;hyperv&lt;/code&gt; the default isolation technology on Windows. If no isolation value is specified on daemon start, on Windows client, the default is &lt;code&gt;hyperv&lt;/code&gt;, and on Windows server, the default is &lt;code&gt;process&lt;/code&gt;.</source>
          <target state="translated">ようになります &lt;code&gt;hyperv&lt;/code&gt; Windows上でデフォルトの分離技術を。デーモンの開始時に分離値が指定されていない場合、Windowsクライアントでは、デフォルトは &lt;code&gt;hyperv&lt;/code&gt; であり、Windowsサーバーでは、デフォルトは &lt;code&gt;process&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f414d8a233594b2c637ed214eddd8b54cf7dda6b" translate="yes" xml:space="preserve">
          <source>Window used to evaluate the restart policy (ns|us|ms|s|m|h)</source>
          <target state="translated">再起動ポリシーを評価するためのウィンドウ (ns|us|ms|s|m|h)</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="73db08ed8c0c51fe85b1740ea7258be756b8a5fc" translate="yes" xml:space="preserve">
          <source>Windows 10 PowerShell should already have &lt;code&gt;curl&lt;/code&gt; available, but if not you can grab a Linux terminal emulator like &lt;a href=&quot;https://git-for-windows.github.io/&quot;&gt;Git BASH&lt;/a&gt;, or download &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/wget.htm&quot;&gt;wget for Windows&lt;/a&gt; which is very similar.</source>
          <target state="translated">Windows 10 PowerShellは既に &lt;code&gt;curl&lt;/code&gt; を利用できるはずですが、利用できない場合は、&lt;a href=&quot;https://git-for-windows.github.io/&quot;&gt;Git BASH&lt;/a&gt;などのLinuxターミナルエミュレーターを入手するか、非常によく似た&lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/wget.htm&quot;&gt;Windows用のwgetを&lt;/a&gt;ダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="8d9d45eea654de0c63b85c6665fe4e5fbce7ce2a" translate="yes" xml:space="preserve">
          <source>Windows Server</source>
          <target state="translated">ウィンドウズサーバー</target>
        </trans-unit>
        <trans-unit id="503ad817477f27c077b97a0db5f3fcf1304d509d" translate="yes" xml:space="preserve">
          <source>Windows daemon only. One of &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;process&lt;/code&gt;, or &lt;code&gt;hyperv&lt;/code&gt;.</source>
          <target state="translated">Windowsデーモンのみ。一つの &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;process&lt;/code&gt; 、または &lt;code&gt;hyperv&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46fafa0dbfc4874967bb0f32006cc0a4a53860bd" translate="yes" xml:space="preserve">
          <source>Windows support</source>
          <target state="translated">ウィンドウズ対応</target>
        </trans-unit>
        <trans-unit id="15f0b626d978bdc346e33dde3cb27c0d2b1f479c" translate="yes" xml:space="preserve">
          <source>Windowsfilter options</source>
          <target state="translated">Windowsfilter オプション</target>
        </trans-unit>
        <trans-unit id="847de7387e6f785d37f36f65a0ec6ed0ee36bd57" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-H&lt;/code&gt; it is possible to make the Docker daemon to listen on a specific IP and port. By default, it will listen on &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt; to allow only local connections by the &lt;em&gt;root&lt;/em&gt; user. You &lt;em&gt;could&lt;/em&gt; set it to &lt;code&gt;0.0.0.0:2375&lt;/code&gt; or a specific host IP to give access to everybody, but that is &lt;strong&gt;not recommended&lt;/strong&gt; because then it is trivial for someone to gain root access to the host where the daemon is running.</source>
          <target state="translated">&lt;code&gt;-H&lt;/code&gt; 特定のIPアドレスとポートをリッスンするようにドッカーデーモンを行うことが可能です。デフォルトでは、 &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt; をリッスンして、&lt;em&gt;root&lt;/em&gt;ユーザーによるローカル接続のみを許可します。あなたは&lt;em&gt;可能性&lt;/em&gt;に設定 &lt;code&gt;0.0.0.0:2375&lt;/code&gt; 皆様へのアクセスを提供したり、特定のホストのIPが、それされて&lt;strong&gt;お勧めできません&lt;/strong&gt;、それはデーモンが動作しているホストへのrootアクセス権を獲得するために誰かのために簡単ですので。</target>
        </trans-unit>
        <trans-unit id="3cc8d0ac8127537f22ece4932a64afcfb54a16e8" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;hyperv&lt;/code&gt; isolation, Windows will create a utility VM that is big enough to hold the memory limit, plus the minimal OS needed to host the container. That size is reported as &amp;ldquo;Total Physical Memory.&amp;rdquo;</source>
          <target state="translated">&lt;code&gt;hyperv&lt;/code&gt; 隔離、Windowsは、メモリの制限を保持するのに十分な大きさに加え、コンテナをホストするために必要な最小限のOSであるユーティリティVMを作成します。そのサイズは「合計物理メモリ」として報告されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
