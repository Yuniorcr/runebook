<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="dddd1a800000dae101aac1e89fcdec3b08c15ac2" translate="yes" xml:space="preserve">
          <source>Tests whether this key's channel is ready to accept a new socket connection.</source>
          <target state="translated">このキーのチャンネルが新しいソケット接続を受け入れる準備ができているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="5d878c471adbc9b2c8a9fa6dbce748ad8cd28072" translate="yes" xml:space="preserve">
          <source>Tests whether this thread has been interrupted. The</source>
          <target state="translated">このスレッドが中断されたかどうかを調べます。このスレッドが中断されたかどうかを調べるには</target>
        </trans-unit>
        <trans-unit id="3392e47c46aa945b753998473d535e85a39484fd" translate="yes" xml:space="preserve">
          <source>Tests whether two &lt;code&gt;TypeMirror&lt;/code&gt; objects represent the same type.</source>
          <target state="translated">2つの &lt;code&gt;TypeMirror&lt;/code&gt; オブジェクトが同じ型を表すかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="890e885d9e116b52f69e2ef63c1003d7d11c8d34" translate="yes" xml:space="preserve">
          <source>Text - the textual equivalent for the value</source>
          <target state="translated">テキスト-値のテキストに相当するもの.</target>
        </trans-unit>
        <trans-unit id="2cd4f4ad22e30894dfd760bd655d6ca0d4086566" translate="yes" xml:space="preserve">
          <source>Text of notification.</source>
          <target state="translated">通知のテキスト。</target>
        </trans-unit>
        <trans-unit id="84b5008a43352c30bd5e7e53bc20f84945a7b7b7" translate="yes" xml:space="preserve">
          <source>Text styles define three sizes for the formatted text - 'full', 'short' and 'narrow'. Each of these three sizes is available in both 'standard' and 'stand-alone' variations.</source>
          <target state="translated">テキストスタイルは、フォーマットされたテキストに「フル」、「ショート」、「ナロー」の3つのサイズを定義します。これらの3つのサイズはそれぞれ、「標準」と「スタンドアロン」の両方のバリエーションで利用できます。</target>
        </trans-unit>
        <trans-unit id="c0a019987906550410814728141e87a01dcb706d" translate="yes" xml:space="preserve">
          <source>TextInputCallback</source>
          <target state="translated">TextInputCallback</target>
        </trans-unit>
        <trans-unit id="3fde12722a72456d8e4d6445b0a9a4654cb73300" translate="yes" xml:space="preserve">
          <source>TextInputCallback.getDefaultText()</source>
          <target state="translated">TextInputCallback.getDefaultText()</target>
        </trans-unit>
        <trans-unit id="0a5e8244825ced667ef0950c3decd6960ad62616" translate="yes" xml:space="preserve">
          <source>TextInputCallback.getPrompt()</source>
          <target state="translated">TextInputCallback.getPrompt()</target>
        </trans-unit>
        <trans-unit id="97cad89ebd01bcfd907d406cd9142c54409b192f" translate="yes" xml:space="preserve">
          <source>TextInputCallback.getText()</source>
          <target state="translated">TextInputCallback.getText()</target>
        </trans-unit>
        <trans-unit id="628928dea47b979f7fd4227e346208d91c210955" translate="yes" xml:space="preserve">
          <source>TextInputCallback.setText()</source>
          <target state="translated">TextInputCallback.setText()</target>
        </trans-unit>
        <trans-unit id="588e445a7fb8a62cfbfe07fc7da7e4c3fa53c998" translate="yes" xml:space="preserve">
          <source>TextOutputCallback</source>
          <target state="translated">TextOutputCallback</target>
        </trans-unit>
        <trans-unit id="252f4df0a0cc7ef6d63b2964239d75a8cd935edb" translate="yes" xml:space="preserve">
          <source>TextOutputCallback.getMessage()</source>
          <target state="translated">TextOutputCallback.getMessage()</target>
        </trans-unit>
        <trans-unit id="04a3dc5e3172617d279fa04f4074aa7941b269e8" translate="yes" xml:space="preserve">
          <source>TextOutputCallback.getMessageType()</source>
          <target state="translated">TextOutputCallback.getMessageType()</target>
        </trans-unit>
        <trans-unit id="9730e5eb39c447a1781ba61855df2714772d7751" translate="yes" xml:space="preserve">
          <source>TextStyle</source>
          <target state="translated">TextStyle</target>
        </trans-unit>
        <trans-unit id="f4dca53ffd389401b79d872c5e632fd324076eef" translate="yes" xml:space="preserve">
          <source>TextStyle.asNormal()</source>
          <target state="translated">TextStyle.asNormal()</target>
        </trans-unit>
        <trans-unit id="1ef9942c75cd5e393a8ead0a76131c8945ad5e66" translate="yes" xml:space="preserve">
          <source>TextStyle.asStandalone()</source>
          <target state="translated">TextStyle.asStandalone()</target>
        </trans-unit>
        <trans-unit id="0d128dd8c9acf7ee1c4c113528b8714efd712df9" translate="yes" xml:space="preserve">
          <source>TextStyle.isStandalone()</source>
          <target state="translated">TextStyle.isStandalone()</target>
        </trans-unit>
        <trans-unit id="c83b71a023441b2dec3ae28c844e030a94a564ce" translate="yes" xml:space="preserve">
          <source>TextStyle.valueOf()</source>
          <target state="translated">TextStyle.valueOf()</target>
        </trans-unit>
        <trans-unit id="a36d687140d6a14d13a30df1289134c5a96887bf" translate="yes" xml:space="preserve">
          <source>TextStyle.values()</source>
          <target state="translated">TextStyle.values()</target>
        </trans-unit>
        <trans-unit id="4ba1cb88f64bee051232816580fd6cb2672c9cf0" translate="yes" xml:space="preserve">
          <source>TextSyntax</source>
          <target state="translated">TextSyntax</target>
        </trans-unit>
        <trans-unit id="a0e31d45ecd3597bc9c201242058dd0894346074" translate="yes" xml:space="preserve">
          <source>TextSyntax.equals()</source>
          <target state="translated">TextSyntax.equals()</target>
        </trans-unit>
        <trans-unit id="01a8db3991f8df738125e4291a8f08e2dd90e0dd" translate="yes" xml:space="preserve">
          <source>TextSyntax.getLocale()</source>
          <target state="translated">TextSyntax.getLocale()</target>
        </trans-unit>
        <trans-unit id="36257532531c5aca445403e9ee18a7e5d3a9316c" translate="yes" xml:space="preserve">
          <source>TextSyntax.getValue()</source>
          <target state="translated">TextSyntax.getValue()</target>
        </trans-unit>
        <trans-unit id="cbae53268b404fa9327fcac8b160936d3d73e4f8" translate="yes" xml:space="preserve">
          <source>TextSyntax.hashCode()</source>
          <target state="translated">TextSyntax.hashCode()</target>
        </trans-unit>
        <trans-unit id="fab8c00792aa8223f14e1550d15267c9fe32de52" translate="yes" xml:space="preserve">
          <source>TextSyntax.toString()</source>
          <target state="translated">TextSyntax.toString()</target>
        </trans-unit>
        <trans-unit id="35e814370946e73a4be7cae92516751937de9ac7" translate="yes" xml:space="preserve">
          <source>Textual representation of IP addresses</source>
          <target state="translated">IPアドレスのテキスト表現</target>
        </trans-unit>
        <trans-unit id="117803293fc433375561793178e0696f42010099" translate="yes" xml:space="preserve">
          <source>Textual representation of IPv4 address used as input to methods takes one of the following forms:</source>
          <target state="translated">メソッドへの入力として使用されるIPv4アドレスのテキスト表現は、以下のいずれかの形式をとります。</target>
        </trans-unit>
        <trans-unit id="7b4628af40961c1f376a18d8c40b6de5d38b2404" translate="yes" xml:space="preserve">
          <source>Textual representation of IPv6 address used as input to methods takes one of the following forms:</source>
          <target state="translated">メソッドへの入力として使用されるIPv6アドレスのテキスト表現は、以下のいずれかの形式をとります。</target>
        </trans-unit>
        <trans-unit id="8c4d1dd6105f0bc77857401185e81ff007acd88e" translate="yes" xml:space="preserve">
          <source>Textual representation of IPv6 scoped addresses</source>
          <target state="translated">IPv6のスコープ付きアドレスのテキスト表現</target>
        </trans-unit>
        <trans-unit id="fc7e4006758ef1304dbc8a17ff24569b5872cba2" translate="yes" xml:space="preserve">
          <source>Thai Buddhist leap years occur exactly in line with ISO leap years. This method does not validate the year passed in, and only has a well-defined result for years in the supported range.</source>
          <target state="translated">タイ仏教のうるう年は、ISOのうるう年と正確に一致しています。このメソッドは、渡された年を検証することはなく、サポートされている範囲内の年についてのみ定義された結果を持ちます。</target>
        </trans-unit>
        <trans-unit id="a3a88c31fc847e5975ca0d481465a31d6c2afb88" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology</source>
          <target state="translated">ThaiBuddhistChronology</target>
        </trans-unit>
        <trans-unit id="9f4e098c159feb8a1aaa3489340db7b582b8a923" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.date()</source>
          <target state="translated">ThaiBuddhistChronology.date()</target>
        </trans-unit>
        <trans-unit id="81a9c9b5b80bdfdae92d38adf091b7f3c1052eff" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.dateEpochDay()</source>
          <target state="translated">ThaiBuddhistChronology.dateEpochDay()</target>
        </trans-unit>
        <trans-unit id="23605069d3ce7143eb2a0a9211ed2c62103e6714" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.dateNow()</source>
          <target state="translated">ThaiBuddhistChronology.dateNow()</target>
        </trans-unit>
        <trans-unit id="af7b1ba8e6be27d0b854cb3a4d57c40d2446899f" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.dateYearDay()</source>
          <target state="translated">ThaiBuddhistChronology.dateYearDay()</target>
        </trans-unit>
        <trans-unit id="93910146fe36db4c0613d18ce6c1f9117ddaf7c2" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.eraOf()</source>
          <target state="translated">ThaiBuddhistChronology.eraOf()</target>
        </trans-unit>
        <trans-unit id="9cdaba971e2dea5eb16dff0e2ef133360ef742de" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.eras()</source>
          <target state="translated">ThaiBuddhistChronology.eras()</target>
        </trans-unit>
        <trans-unit id="8e2878dd01a7e76600e403a321b5ac1650f4749c" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.getCalendarType()</source>
          <target state="translated">ThaiBuddhistChronology.getCalendarType()</target>
        </trans-unit>
        <trans-unit id="5951fdcb7eaad658dd8f305149f76d4e28ab97cc" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.getId()</source>
          <target state="translated">ThaiBuddhistChronology.getId()</target>
        </trans-unit>
        <trans-unit id="5dc3d69674033a15206befd7f6f1f0bd82e1f586" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.isLeapYear()</source>
          <target state="translated">ThaiBuddhistChronology.isLeapYear()</target>
        </trans-unit>
        <trans-unit id="0ca9e1ad57b9dc845e3c7a8290592d23191a4c7c" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.localDateTime()</source>
          <target state="translated">ThaiBuddhistChronology.localDateTime()</target>
        </trans-unit>
        <trans-unit id="62c58c7a6de0785fc1963f4cdc3f687a137b9c8a" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.prolepticYear()</source>
          <target state="translated">ThaiBuddhistChronology.prolepticYear()</target>
        </trans-unit>
        <trans-unit id="84dec28471d39425c7517074060ef484dc960f5b" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.range()</source>
          <target state="translated">ThaiBuddhistChronology.range()</target>
        </trans-unit>
        <trans-unit id="6f1b85d9c539b822fc2c329e721c9f10d3615fda" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.resolveDate()</source>
          <target state="translated">ThaiBuddhistChronology.resolveDate()</target>
        </trans-unit>
        <trans-unit id="ef04f245e01dd1ed7ca48833a62e0cf965f8b9c8" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.zonedDateTime()</source>
          <target state="translated">ThaiBuddhistChronology.zonedDateTime()</target>
        </trans-unit>
        <trans-unit id="56cacb065b48fc5b20d838fbbe8bde43dbb623ac" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate</source>
          <target state="translated">ThaiBuddhistDate</target>
        </trans-unit>
        <trans-unit id="db18fff8c5f1eba899d8e2fec3b841757b2c64a3" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.atTime()</source>
          <target state="translated">ThaiBuddhistDate.atTime()</target>
        </trans-unit>
        <trans-unit id="9d6dc83ae18f9c046ce1ca0c1c1858d808569894" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.equals()</source>
          <target state="translated">ThaiBuddhistDate.equals()</target>
        </trans-unit>
        <trans-unit id="a1d0a76834da9825dbe7a22b7df411265b938345" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.from()</source>
          <target state="translated">ThaiBuddhistDate.from()</target>
        </trans-unit>
        <trans-unit id="631ff9458cac35099e69a03f2c39b78d3177d43d" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.getChronology()</source>
          <target state="translated">ThaiBuddhistDate.getChronology()</target>
        </trans-unit>
        <trans-unit id="867efbd62bb34492da2f93784ae9940be543f6e8" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.getEra()</source>
          <target state="translated">ThaiBuddhistDate.getEra()</target>
        </trans-unit>
        <trans-unit id="b20965a16ab7d753daa15fdd1445726a4b4bc735" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.getLong()</source>
          <target state="translated">ThaiBuddhistDate.getLong()</target>
        </trans-unit>
        <trans-unit id="1d08e48b0f31e7d132dcf2513888d58482f93533" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.hashCode()</source>
          <target state="translated">ThaiBuddhistDate.hashCode()</target>
        </trans-unit>
        <trans-unit id="05c327da97b723029b77d71ab87e5769aa49376d" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.lengthOfMonth()</source>
          <target state="translated">ThaiBuddhistDate.lengthOfMonth()</target>
        </trans-unit>
        <trans-unit id="83339f429fc8d1032f157bfa1a6f48584818ee22" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.minus()</source>
          <target state="translated">ThaiBuddhistDate.minus()</target>
        </trans-unit>
        <trans-unit id="1772e94bfa441b9d316fb8029d2e0a2880c086e9" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.now()</source>
          <target state="translated">ThaiBuddhistDate.now()</target>
        </trans-unit>
        <trans-unit id="eee511f518f709d927b64f0cf053d2bc3abdf547" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.of()</source>
          <target state="translated">ThaiBuddhistDate.of()</target>
        </trans-unit>
        <trans-unit id="6e5182152bdca111eee82cfccedeccac50e6be2b" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.plus()</source>
          <target state="translated">ThaiBuddhistDate.plus()</target>
        </trans-unit>
        <trans-unit id="3caf1e8127398daabc0daecbc7a3899bc28bf097" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.range()</source>
          <target state="translated">ThaiBuddhistDate.range()</target>
        </trans-unit>
        <trans-unit id="c9251bd315b835c130709c2bd5ad364ffcd087a2" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.toEpochDay()</source>
          <target state="translated">ThaiBuddhistDate.toEpochDay()</target>
        </trans-unit>
        <trans-unit id="e14e21c8865db3adeb700749d14718da3c6d5c12" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.toString()</source>
          <target state="translated">ThaiBuddhistDate.toString()</target>
        </trans-unit>
        <trans-unit id="b5d685fb3d918cd886b757988fe0097b71da0c52" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.until()</source>
          <target state="translated">ThaiBuddhistDate.until()</target>
        </trans-unit>
        <trans-unit id="0891bb4c3ac498e3de588a3b988abfe28bd45b3a" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.with()</source>
          <target state="translated">ThaiBuddhistDate.with()</target>
        </trans-unit>
        <trans-unit id="0c6f18d03a0410128636e15c4276fb431889de55" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra</source>
          <target state="translated">ThaiBuddhistEra</target>
        </trans-unit>
        <trans-unit id="1e44ae46b9f83afcc5d0dd91bd2ba339e3ffe2e6" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra.getValue()</source>
          <target state="translated">ThaiBuddhistEra.getValue()</target>
        </trans-unit>
        <trans-unit id="1f8b419c0c527a193ab6d599bd7ec00e696ce392" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra.of()</source>
          <target state="translated">ThaiBuddhistEra.of()</target>
        </trans-unit>
        <trans-unit id="551e2de4fb34142d0eff47396c16cf09f916c035" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra.valueOf()</source>
          <target state="translated">ThaiBuddhistEra.valueOf()</target>
        </trans-unit>
        <trans-unit id="5ec30eac149daa0ab70fa50291d1ae80950de39a" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra.values()</source>
          <target state="translated">ThaiBuddhistEra.values()</target>
        </trans-unit>
        <trans-unit id="8a430b0436fbafd13ff3f8f793fd3a22f31a2926" translate="yes" xml:space="preserve">
          <source>That</source>
          <target state="translated">That</target>
        </trans-unit>
        <trans-unit id="383a080e9d69d6f722f57039b9091b9f29317036" translate="yes" xml:space="preserve">
          <source>That a selection key indicates that its channel is ready for some operation is a hint, but not a guarantee, that such an operation can be performed by a thread without causing the thread to block. It is imperative that code that performs multiplexed I/O be written so as to ignore these hints when they prove to be incorrect.</source>
          <target state="translated">選択キーがそのチャンネルが何らかの操作の準備ができていることを示すのはヒントであり、そのような操作をスレッドがブロックすることなく実行できることを保証するものではありません。多重化された I/O を実行するコードは、これらのヒントが正しくないことが判明した場合には無視するように記述することが必須です。</target>
        </trans-unit>
        <trans-unit id="2e116fde30bfce6bc219f98a723200588db818f4" translate="yes" xml:space="preserve">
          <source>That a selection key's ready set indicates that its channel is ready for some operation category is a hint, but not a guarantee, that an operation in such a category may be performed by a thread without causing the thread to block. A ready set is most likely to be accurate immediately after the completion of a selection operation. It is likely to be made inaccurate by external events and by I/O operations that are invoked upon the corresponding channel.</source>
          <target state="translated">選択キーのレディセットがそのチャンネルがある操作カテゴリの準備ができていることを示すのは、そのようなカテゴリの操作をスレッドがブロックすることなく実行できることを保証するものではありませんが、 ヒントにはなります。レディセットは、選択操作が完了した直後に正確になる可能性が高い。これは、外部イベントや、対応するチャネルに対して呼び出されるI/O操作によって不正確になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="afcead73a580f282a044b63d246784dd77d66756" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;cipher.getParameters().getEncoded()&lt;/code&gt;.</source>
          <target state="translated">つまり、 &lt;code&gt;cipher.getParameters().getEncoded()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="006efee9935d1d56869e21b1bac583a106240016" translate="yes" xml:space="preserve">
          <source>That this method returns &lt;code&gt;false&lt;/code&gt; does not imply that no bytes have yet been decoded. Some auto-detecting decoders are capable of decoding some, or even all, of an input byte sequence without fixing on a particular charset.</source>
          <target state="translated">このメソッドが &lt;code&gt;false&lt;/code&gt; を返すことは、バイトがまだデコードされていないことを意味しません。一部の自動検出デコーダーは、特定の文字セットを修正せずに、入力バイトシーケンスの一部またはすべてをデコードできます。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="d28a162efe56d735c7f674ab51f90529f140fe99" translate="yes" xml:space="preserve">
          <source>The &quot;&amp;lt;hostname&amp;gt;&quot; is an ASCII representation of the hostname, which may contains A-labels. For example, a returned value of an pseudo hostname may look like:</source>
          <target state="translated">&quot;&amp;lt;hostname&amp;gt;&quot;はホスト名のASCII表現であり、Aラベルが含まれる場合があります。たとえば、疑似ホスト名の戻り値は次のようになります。</target>
        </trans-unit>
        <trans-unit id="761b12883375956b1fd5c3659aa381596b01fdaa" translate="yes" xml:space="preserve">
          <source>The &quot;Concurrent&quot; prefix used with some classes in this package is a shorthand indicating several differences from similar &quot;synchronized&quot; classes. For example &lt;code&gt;java.util.Hashtable&lt;/code&gt; and &lt;code&gt;Collections.synchronizedMap(new HashMap())&lt;/code&gt; are synchronized. But &lt;a href=&quot;concurrenthashmap&quot;&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;&lt;/a&gt; is &quot;concurrent&quot;. A concurrent collection is thread-safe, but not governed by a single exclusion lock. In the particular case of ConcurrentHashMap, it safely permits any number of concurrent reads as well as a tunable number of concurrent writes. &quot;Synchronized&quot; classes can be useful when you need to prevent all access to a collection via a single lock, at the expense of poorer scalability. In other cases in which multiple threads are expected to access a common collection, &quot;concurrent&quot; versions are normally preferable. And unsynchronized collections are preferable when either collections are unshared, or are accessible only when holding other locks.</source>
          <target state="translated">このパッケージの一部のクラスで使用される「並行」接頭辞は、類似の「同期」クラスとのいくつかの違いを示す略記です。たとえば、 &lt;code&gt;java.util.Hashtable&lt;/code&gt; と &lt;code&gt;Collections.synchronizedMap(new HashMap())&lt;/code&gt; は同期されます。しかし、&lt;a href=&quot;concurrenthashmap&quot;&gt; &lt;code&gt;ConcurrentHashMap&lt;/code&gt; &lt;/a&gt;「並行」です。並行コレクションはスレッドセーフですが、単一の排他ロックによって制御されません。 ConcurrentHashMapの特定のケースでは、調整可能な数の同時書き込みだけでなく、任意の数の同時読み取りを安全に許可します。 「同期」クラスは、スケーラビリティーが低下する代わりに、単一のロックを介してコレクションへのすべてのアクセスを防止する必要がある場合に役立ちます。複数のスレッドが共通のコレクションにアクセスすることが予想される他のケースでは、通常「並行」バージョンが推奨されます。また、コレクションが共有されていない場合、または他のロックを保持している場合にのみアクセスできる場合は、非同期のコレクションを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5c92ed0ed7f44357d29a0d93b7d5e34400a5966a" translate="yes" xml:space="preserve">
          <source>The &quot;class&quot; attribute is used to specify the target of a static method or constructor explicitly; its value being the fully qualified name of the class.</source>
          <target state="translated">class&quot; 属性は、静的メソッドやコンストラクタのターゲットを明示的に指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="99b714dc607d2a32a9e5ae18a28845a9ad7f9870" translate="yes" xml:space="preserve">
          <source>The &quot;destructive&quot; algorithms contained in this class, that is, the algorithms that modify the collection on which they operate, are specified to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if the collection does not support the appropriate mutation primitive(s), such as the &lt;code&gt;set&lt;/code&gt; method. These algorithms may, but are not required to, throw this exception if an invocation would have no effect on the collection. For example, invoking the &lt;code&gt;sort&lt;/code&gt; method on an unmodifiable list that is already sorted may or may not throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">このクラスに含まれる「破壊的な」アルゴリズム、つまりそれらが動作するコレクションを変更するアルゴリズムは、コレクションが &lt;code&gt;set&lt;/code&gt; メソッドなどの適切なミューテーションプリミティブをサポートしていない場合に &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローするように指定されています。これらのアルゴリズムは、呼び出しがコレクションに影響を及ぼさない場合に、この例外をスローすることがありますが、必須ではありません。たとえば、すでにソートされている変更不可能なリストで &lt;code&gt;sort&lt;/code&gt; メソッドを呼び出すと、 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; がスローされる場合とスローされない場合があります。</target>
        </trans-unit>
        <trans-unit id="d3799b0d99e9f9ae8ba59928fbe544b7e50ada4f" translate="yes" xml:space="preserve">
          <source>The &quot;destructive&quot; methods contained in this interface, that is, the methods that modify the collection on which they operate, are specified to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if this collection does not support the operation. If this is the case, these methods may, but are not required to, throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if the invocation would have no effect on the collection. For example, invoking the &lt;a href=&quot;collection#addAll-java.util.Collection-&quot;&gt;&lt;code&gt;addAll(Collection)&lt;/code&gt;&lt;/a&gt; method on an unmodifiable collection may, but is not required to, throw the exception if the collection to be added is empty.</source>
          <target state="translated">このインターフェイスに含まれる「破壊的な」メソッド、つまり、操作の対象となるコレクションを変更するメソッドは、このコレクションが操作をサポートしていない場合に &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローするように指定されています。この場合、呼び出しがコレクションに影響を及ぼさない場合、これらのメソッドは &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローすることがありますが、必須ではありません。たとえば、変更できないコレクションで&lt;a href=&quot;collection#addAll-java.util.Collection-&quot;&gt; &lt;code&gt;addAll(Collection)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すと、追加するコレクションが空の場合に例外がスローされることがありますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="523d08144b8e0cc24e5d2b715228e9abf2df6508" translate="yes" xml:space="preserve">
          <source>The &quot;destructive&quot; methods contained in this interface, that is, the methods that modify the map on which they operate, are specified to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if this map does not support the operation. If this is the case, these methods may, but are not required to, throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if the invocation would have no effect on the map. For example, invoking the &lt;a href=&quot;map#putAll-java.util.Map-&quot;&gt;&lt;code&gt;putAll(Map)&lt;/code&gt;&lt;/a&gt; method on an unmodifiable map may, but is not required to, throw the exception if the map whose mappings are to be &quot;superimposed&quot; is empty.</source>
          <target state="translated">このインターフェイスに含まれる「破壊的な」メソッド、つまり、操作対象のマップを変更するメソッドは、このマップが操作をサポートしていない場合に &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローするように指定されています。この場合、呼び出しがマップに影響を及ぼさない場合、これらのメソッドは &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローすることがありますが、必須ではありません。たとえば、変更不可能なマップで&lt;a href=&quot;map#putAll-java.util.Map-&quot;&gt; &lt;code&gt;putAll(Map)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すと、マッピングが「スーパーインポーズ」されるマップが空の場合に例外がスローされる場合がありますが、これは必須ではありません。</target>
        </trans-unit>
        <trans-unit id="eae4891e98416f7d88cd670a3c2c7ffcf50a66c3" translate="yes" xml:space="preserve">
          <source>The &quot;expert&quot; flag is used to distinguish between features that are intended for expert users from those that are intended for normal users.</source>
          <target state="translated">エキスパート」フラグは、エキスパートユーザ向けの機能と、通常のユーザ向けの機能を区別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="53de2781ee0e7ac40066ecc66400a0280e82b151" translate="yes" xml:space="preserve">
          <source>The &quot;expert&quot; flag is used to distinguish between those features that are intended for expert users from those that are intended for normal users.</source>
          <target state="translated">エキスパート」フラグは、エキスパートユーザ向けの機能と、通常のユーザ向けの機能を区別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="96db2ea0542daeff5fb771b914acf904d52fda1e" translate="yes" xml:space="preserve">
          <source>The &quot;global&quot; Logger object is provided as a convenience to developers who are making casual use of the Logging package. Developers who are making serious use of the logging package (for example in products) should create and use their own Logger objects, with appropriate names, so that logging can be controlled on a suitable per-Logger granularity. Developers also need to keep a strong reference to their Logger objects to prevent them from being garbage collected.</source>
          <target state="translated">グローバル&quot; Logger オブジェクトは、Logging パッケージをカジュアルに利用している開発者の利便性として提供されています。ロギングパッケージ(製品など)を真剣に使用している開発者は、ロギングをロガーごとに適切な粒度で制御できるように、適切な名前で独自のロガーオブジェクトを作成して使用しなければなりません。また、開発者は、ロガーオブジェクトがゴミとして収集されるのを防ぐために、ロガーオブジェクトへの強力な参照を保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="3c8addeccbf7f5e85580dfc2361b06f37794364c" translate="yes" xml:space="preserve">
          <source>The &quot;hidden&quot; flag is used to identify features that are intended only for tool use, and which should not be exposed to humans.</source>
          <target state="translated">隠された」フラグは、ツールの使用のみを目的としており、人間に露出してはならない機能を識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a488d2b6590253541ee7f92e1ac3dd1986e06a1b" translate="yes" xml:space="preserve">
          <source>The &quot;host_name&quot; type representing of a DNS hostname (see &lt;a href=&quot;snihostname&quot;&gt;&lt;code&gt;SNIHostName&lt;/code&gt;&lt;/a&gt;) in a Server Name Indication (SNI) extension.</source>
          <target state="translated">サーバー名表示（SNI）拡張のDNSホスト名（&lt;a href=&quot;snihostname&quot;&gt; &lt;code&gt;SNIHostName&lt;/code&gt; を&lt;/a&gt;参照）を表す「host_name」タイプ。</target>
        </trans-unit>
        <trans-unit id="d5ee252810cba0d533bf7f76c20a67b32a87cd3a" translate="yes" xml:space="preserve">
          <source>The &quot;listen&quot; action is only meaningful when used with &quot;localhost&quot; and means the ability to bind to a specified port. The &quot;resolve&quot; action is implied when any of the other actions are present. The action &quot;resolve&quot; refers to host/ip name service lookups.</source>
          <target state="translated">listen &quot;アクションは &quot;localhost &quot;と一緒に使用された場合にのみ意味を持ち、指定されたポートにバインドする能力を意味する。resolve」アクションは、他のアクションのいずれかが存在する場合に暗示される。resolve」アクションは、ホスト/IP名サービスのルックアップを参照する。</target>
        </trans-unit>
        <trans-unit id="34537c0a9b18a5b97ca9dba2fc6ccb6e06339c2a" translate="yes" xml:space="preserve">
          <source>The &quot;no offset&quot; text controls what text is printed when the total amount of the offset fields to be output is zero. Example values would be 'Z', '+00:00', 'UTC' or 'GMT'. Three formats are accepted for parsing UTC - the &quot;no offset&quot; text, and the plus and minus versions of zero defined by the pattern.</source>
          <target state="translated">オフセットなし」テキストは、出力されるオフセットフィールドの合計量がゼロの場合に、どのテキストを出力するかを制御します。値の例としては、'Z'、'+00:00'、'UTC' または 'GMT' が挙げられます。UTCの解析には3つのフォーマットが使用できます。&quot;no offset &quot;テキスト、パターンで定義されたゼロのプラスとマイナスのバージョンです。</target>
        </trans-unit>
        <trans-unit id="0039eb18c439a8fe0ded6f996e270014f44833ff" translate="yes" xml:space="preserve">
          <source>The &quot;object&quot; tag denotes an &lt;em&gt;expression&lt;/em&gt; whose value is to be used as the argument to the enclosing element.</source>
          <target state="translated">「object」タグは、その値が囲み要素の引数として使用される&lt;em&gt;式&lt;/em&gt;を示します。</target>
        </trans-unit>
        <trans-unit id="8b7ed3f19fc82e3673167bf96934264dcec09b2d" translate="yes" xml:space="preserve">
          <source>The &quot;preferred&quot; flag is used to identify features that are particularly important for presenting to humans.</source>
          <target state="translated">好ましい」フラグは、人間に提示するために特に重要な特徴を識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="e52ae4af20949258e854e3591de7eb4159275419" translate="yes" xml:space="preserve">
          <source>The &quot;propagationId&quot; field is reserved for future use. In Beans 1.0 the sole requirement is that if a listener catches a PropertyChangeEvent and then fires a PropertyChangeEvent of its own, then it should make sure that it propagates the propagationId field from its incoming event to its outgoing event.</source>
          <target state="translated">propagationId」フィールドは将来の使用のために予約されています。Beans 1.0での唯一の要件は、リスナーがPropertyChangeEventをキャッチして、それ自身のPropertyChangeEventを発生させる場合、それがその着信イベントからその発信イベントにpropagationIdフィールドを伝播することを確認する必要があるということです。</target>
        </trans-unit>
        <trans-unit id="448f901e9880ca6676ec228309500276a588387c" translate="yes" xml:space="preserve">
          <source>The &quot;standard&quot; error output stream. This stream is already open and ready to accept output data.</source>
          <target state="translated">標準」エラー出力ストリーム。このストリームは既にオープンされており、出力データを受け入れる準備ができています。</target>
        </trans-unit>
        <trans-unit id="9b0fa7082ba453aa32dcb16ac03daf1ba9c65c4f" translate="yes" xml:space="preserve">
          <source>The &quot;standard&quot; input stream. This stream is already open and ready to supply input data. Typically this stream corresponds to keyboard input or another input source specified by the host environment or user.</source>
          <target state="translated">標準」入力ストリーム。このストリームは既にオープンされており、入力データを供給する準備ができている。通常、このストリームはキーボード入力、またはホスト環境またはユーザによって指定された他の入力ソースに対応する。</target>
        </trans-unit>
        <trans-unit id="8d594a48963bd0f322bbb684e19620412a6932c8" translate="yes" xml:space="preserve">
          <source>The &quot;standard&quot; output stream. This stream is already open and ready to accept output data. Typically this stream corresponds to display output or another output destination specified by the host environment or user.</source>
          <target state="translated">標準」出力ストリーム。このストリームはすでにオープンされており、出力データを受け入れる準備ができています。通常、このストリームは、表示出力、またはホスト環境またはユーザによって指定された他の出力先に対応する。</target>
        </trans-unit>
        <trans-unit id="542ceac497d888731f108f54134d87b43e6e1e87" translate="yes" xml:space="preserve">
          <source>The &quot;void&quot; tag denotes a &lt;em&gt;statement&lt;/em&gt; which will be executed, but whose result will not be used as an argument to the enclosing method.</source>
          <target state="translated">「void」タグは実行される&lt;em&gt;ステートメント&lt;/em&gt;を示しますが、その結果は囲んでいるメソッドへの引数として使用されません。</target>
        </trans-unit>
        <trans-unit id="5413cb19ad08d0c83ec83a25d94198413a07db11" translate="yes" xml:space="preserve">
          <source>The &quot;widgets&quot; examples shown earlier shows how reduction combines with other operations to replace for loops with bulk operations. If &lt;code&gt;widgets&lt;/code&gt; is a collection of &lt;code&gt;Widget&lt;/code&gt; objects, which have a &lt;code&gt;getWeight&lt;/code&gt; method, we can find the heaviest widget with:</source>
          <target state="translated">前に示した「ウィジェット」の例は、削減を他の操作と組み合わせてforループを一括操作に置き換える方法を示しています。 &lt;code&gt;widgets&lt;/code&gt; が &lt;code&gt;getWeight&lt;/code&gt; メソッドを持つ &lt;code&gt;Widget&lt;/code&gt; オブジェクトのコレクションである場合、次のようにして最も重いウィジェットを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="dd51a31f2fb3c35a53c40953e7b137610fa538ba" translate="yes" xml:space="preserve">
          <source>The '*' and '-' may only be specified in the final segment of a path and must be the only character in that segment. Any query or fragment components of the url are ignored when constructing URLPermissions.</source>
          <target state="translated">'*' と '-' はパスの最後のセグメントでのみ指定でき、そのセグメント内の唯一の文字でなければなりません。URLPermissions を作成する際には、URL のクエリーやフラグメントの構成要素は無視されます。</target>
        </trans-unit>
        <trans-unit id="c3dd2c4f47449a4544b3de80cb83d745f1361cb0" translate="yes" xml:space="preserve">
          <source>The '*' character refers to all resources in the same &quot;directory&quot; - in other words all resources with the same number of path components, and which only differ in the final path component, represented by the '*'.</source>
          <target state="translated">文字「*」は、同じ「ディレクトリ」内のすべてのリソースを指します。言い換えれば、パス構成要素の数が同じで、「*」で表される最終的なパス構成要素だけが異なるすべてのリソースを指します。</target>
        </trans-unit>
        <trans-unit id="5b1a4b786fce275a14542316145f1ffc6265c6f2" translate="yes" xml:space="preserve">
          <source>The '-' character refers to all resources recursively below the preceding path (eg. http://www.oracle.com/a/b/c/d/e.html matches this example).</source>
          <target state="translated">文字「-」は、前のパスの下にあるすべてのリソースを再帰的に参照します (例:http://www.oracle.com/a/b/c/d/e.html はこの例にマッチします)。</target>
        </trans-unit>
        <trans-unit id="2d3d7549dcf0d83ed68ff060f89f99b12e4561e6" translate="yes" xml:space="preserve">
          <source>The (possibly empty) subsequence captured by the group during the previous match, or &lt;code&gt;null&lt;/code&gt; if the group failed to match part of the input</source>
          <target state="translated">前の一致時にグループによってキャプチャされた（場合によっては空の）サブシーケンス、またはグループが入力の一部と一致しなかった場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f610b577e0d0c1aa68c7de09df91b0c3b1792629" translate="yes" xml:space="preserve">
          <source>The (possibly empty) subsequence captured by the named group during the previous match, or &lt;code&gt;null&lt;/code&gt; if the group failed to match part of the input</source>
          <target state="translated">以前の一致時に名前付きグループによってキャプチャされた（場合によっては空の）サブシーケンス、またはグループが入力の一部と一致しなかった場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b452ff3f7cd68722baf21b3005843847575b9ad" translate="yes" xml:space="preserve">
          <source>The (possibly empty) subsequence matched by the previous match, in string form</source>
          <target state="translated">前のマッチでマッチした(空の可能性のある)部分シーケンスを文字列形式で表します。</target>
        </trans-unit>
        <trans-unit id="db8c98f744455c4ea33c3652417a8d4d6babb38a" translate="yes" xml:space="preserve">
          <source>The +90 direction was chosen because simple finishing on the long edge is the same edge whether portrait or landscape.</source>
          <target state="translated">長辺のシンプルな仕上げは、縦でも横でも同じ辺になるので、+90の方向にしました。</target>
        </trans-unit>
        <trans-unit id="dc75f82aa609831b4e45d1280715e643c1e08fde" translate="yes" xml:space="preserve">
          <source>The 14 bit clock sequence value is constructed from the clock sequence field of this UUID. The clock sequence field is used to guarantee temporal uniqueness in a time-based UUID.</source>
          <target state="translated">14ビットのクロックシーケンス値は、このUUIDのクロックシーケンスフィールドから構築される。クロックシーケンスフィールドは、時間ベースのUUIDにおける時間的一意性を保証するために使用される。</target>
        </trans-unit>
        <trans-unit id="9244f80a9a7b954470832171ad15b5298b7c6027" translate="yes" xml:space="preserve">
          <source>The 48 bit node value is constructed from the node field of this UUID. This field is intended to hold the IEEE 802 address of the machine that generated this UUID to guarantee spatial uniqueness.</source>
          <target state="translated">48 ビットのノード値は、この UUID のノードフィールドから構築される。このフィールドは、空間的一意性を保証するために、このUUIDを生成したマシンのIEEE 802アドレスを保持することを意図している。</target>
        </trans-unit>
        <trans-unit id="cf62656bdd2342ac213b17c11186efa9fdef0697" translate="yes" xml:space="preserve">
          <source>The 60 bit timestamp value is constructed from the time_low, time_mid, and time_hi fields of this &lt;code&gt;UUID&lt;/code&gt;. The resulting timestamp is measured in 100-nanosecond units since midnight, October 15, 1582 UTC.</source>
          <target state="translated">60ビットのタイムスタンプ値は、この &lt;code&gt;UUID&lt;/code&gt; のtime_low、time_mid、およびtime_hiフィールドから構成されます。結果のタイムスタンプは、UTC 1582年10月15日の午前0時から100ナノ秒単位で測定されます。</target>
        </trans-unit>
        <trans-unit id="5148f442500cb2e7c77d69481afbed4f322b7043" translate="yes" xml:space="preserve">
          <source>The 8 primitive Java types (&lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;) are mapped to the corresponding boxed types from &lt;code&gt;java.lang&lt;/code&gt;, namely &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Byte&lt;/code&gt;, etc. The Open Type is the corresponding &lt;code&gt;SimpleType&lt;/code&gt;. Thus, &lt;em&gt;opentype(&lt;/em&gt;&lt;code&gt;long&lt;/code&gt;&lt;em&gt;)&lt;/em&gt; is &lt;code&gt;SimpleType.LONG&lt;/code&gt;, and &lt;em&gt;opendata(&lt;/em&gt;&lt;code&gt;long&lt;/code&gt;&lt;em&gt;)&lt;/em&gt; is &lt;code&gt;java.lang.Long&lt;/code&gt;.</source>
          <target state="translated">8つのプリミティブJava型（ &lt;code&gt;boolean&lt;/code&gt; 、 &lt;code&gt;byte&lt;/code&gt; 、 &lt;code&gt;short&lt;/code&gt; 、 &lt;code&gt;int&lt;/code&gt; 、 &lt;code&gt;long&lt;/code&gt; 、 &lt;code&gt;float&lt;/code&gt; 、 &lt;code&gt;double&lt;/code&gt; 、 &lt;code&gt;char&lt;/code&gt; ）は、 &lt;code&gt;java.lang&lt;/code&gt; の対応するボックス型、つまり &lt;code&gt;Boolean&lt;/code&gt; 、 &lt;code&gt;Byte&lt;/code&gt; などにマップされます &lt;code&gt;SimpleType&lt;/code&gt; は、対応するSimpleTypeです。したがって、&lt;em&gt;opentype（&lt;/em&gt; &lt;code&gt;long&lt;/code&gt; &lt;em&gt;）&lt;/em&gt;は &lt;code&gt;SimpleType.LONG&lt;/code&gt; であり、&lt;em&gt;opendata（&lt;/em&gt; &lt;code&gt;long&lt;/code&gt; &lt;em&gt;）&lt;/em&gt;は &lt;code&gt;java.lang.Long&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="190f5e4e1c44c5bff240e5e10541bfc811769ca9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#floatdFlags&quot;&gt;default behavior&lt;/a&gt; when no flags are given is the same as for Float and Double.</source>
          <target state="translated">フラグが指定されていない場合の&lt;a href=&quot;#floatdFlags&quot;&gt;デフォルトの動作&lt;/a&gt;は、FloatおよびDoubleの場合と同じです。</target>
        </trans-unit>
        <trans-unit id="bc51dcb232ef7f25e91fae041a5e61191866e752" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../javax/management/objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; that uniquely identifies the management interface for logging within the &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;a href=&quot;../../../javax/management/objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; の&lt;/a&gt;一意内のログの管理インタフェースを特定 &lt;code&gt;MBeanServer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a85bd907f559c9802535fa51f23ef29d3d95c9e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../io/file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class defines the &lt;a href=&quot;../../io/file#toPath--&quot;&gt;&lt;code&gt;toPath&lt;/code&gt;&lt;/a&gt; method to construct a &lt;a href=&quot;path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; by converting the abstract path represented by the &lt;code&gt;java.io.File&lt;/code&gt; object. The resulting &lt;code&gt;Path&lt;/code&gt; can be used to operate on the same file as the &lt;code&gt;File&lt;/code&gt; object. The &lt;code&gt;Path&lt;/code&gt; specification provides further information on the &lt;a href=&quot;path#interop&quot;&gt;interoperability&lt;/a&gt; between &lt;code&gt;Path&lt;/code&gt; and &lt;code&gt;java.io.File&lt;/code&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;../../io/file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;クラスを定義&lt;a href=&quot;../../io/file#toPath--&quot;&gt; &lt;code&gt;toPath&lt;/code&gt; を&lt;/a&gt;構築する方法&lt;a href=&quot;path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;で表される抽象パス変換することによって、 &lt;code&gt;java.io.File&lt;/code&gt; ののオブジェクト。結果の &lt;code&gt;Path&lt;/code&gt; を使用して、 &lt;code&gt;File&lt;/code&gt; オブジェクトと同じファイルを操作できます。 &lt;code&gt;Path&lt;/code&gt; 指定はに関する詳細な情報提供し&lt;a href=&quot;path#interop&quot;&gt;、相互運用性&lt;/a&gt;の間 &lt;code&gt;Path&lt;/code&gt; と &lt;code&gt;java.io.File&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="d5be3abde35d6105d79ad74bc634371ab99a05a5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../java/net/uri&quot;&gt;URI&lt;/a&gt; returned from &lt;code&gt;&lt;a href=&quot;fileobject#toUri--&quot;&gt;FileObject.toUri()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../../java/net/uri&quot;&gt;URI&lt;/a&gt;から返さ &lt;code&gt;&lt;a href=&quot;fileobject#toUri--&quot;&gt;FileObject.toUri()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="134ad8107ae31bdb06239d777265c61dbef39bc0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../java/util/locale&quot;&gt;locale&lt;/a&gt; of the description in this &lt;code&gt;MBeanInfo&lt;/code&gt;, &lt;code&gt;MBeanAttributeInfo&lt;/code&gt;, etc, as returned by &lt;a href=&quot;../../java/util/locale#toString--&quot;&gt;&lt;code&gt;Locale.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../java/util/locale#toString--&quot;&gt; &lt;code&gt;Locale.toString()&lt;/code&gt; &lt;/a&gt;によって返される、この &lt;code&gt;MBeanInfo&lt;/code&gt; 、 &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; などの説明の&lt;a href=&quot;../../java/util/locale&quot;&gt;ロケール&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f1ec0c7d3ac150a1e7303b1353c79b5a3e266162" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../net/protocolfamily&quot;&gt;&lt;code&gt;ProtocolFamily&lt;/code&gt;&lt;/a&gt; of the channel's socket is platform (and possibly configuration) dependent and therefore unspecified. The &lt;a href=&quot;datagramchannel#open-java.net.ProtocolFamily-&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; allows the protocol family to be selected when opening a datagram channel, and should be used to open datagram channels that are intended for Internet Protocol multicasting.</source>
          <target state="translated">チャネルのソケットの&lt;a href=&quot;../../net/protocolfamily&quot;&gt; &lt;code&gt;ProtocolFamily&lt;/code&gt; &lt;/a&gt;はプラットフォーム（および場合によっては構成）に依存するため、指定されていません。&lt;a href=&quot;datagramchannel#open-java.net.ProtocolFamily-&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;データグラムチャネルを開くときプロトコルファミリが選択されることを可能にする、インターネットプロトコルマルチキャストのために意図されているオープンデータグラムチャネルに使用されるべきです。</target>
        </trans-unit>
        <trans-unit id="17b844a7bf6569487aadb2b841362d26db2df769" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../net/standardsocketoptions#SO_REUSEADDR&quot;&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt;&lt;/a&gt; option should be enabled prior to &lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt;&lt;code&gt;binding&lt;/code&gt;&lt;/a&gt; the socket. This is required to allow multiple members of the group to bind to the same address.</source>
          <target state="translated">&lt;a href=&quot;../../net/standardsocketoptions#SO_REUSEADDR&quot;&gt; &lt;code&gt;SO_REUSEADDR&lt;/code&gt; の&lt;/a&gt;オプションは、前に有効にする必要があります&lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt; &lt;code&gt;binding&lt;/code&gt; &lt;/a&gt;ソケットを。これは、グループの複数のメンバーが同じアドレスにバインドできるようにするために必要です。</target>
        </trans-unit>
        <trans-unit id="8cce448bf1e954b21943bc931e3a7ed24ae93fed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../util/locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; class provide access to a range of information useful for localizing an application. This includes the language and region, such as &quot;en-GB&quot; for English as used in Great Britain.</source>
          <target state="translated">&lt;a href=&quot;../../util/locale&quot;&gt; &lt;code&gt;Locale&lt;/code&gt; &lt;/a&gt;クラスは、アプリケーションをローカライズするための有用な情報の範囲へのアクセスを提供します。これには、英国で使用されている英語の「en-GB」などの言語と地域が含まれます。</target>
        </trans-unit>
        <trans-unit id="f7bcc13ad5cb486576996f847be7d97aa0930b3d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; methods may also be used to read or update the owner. In that case, the owner attribute is identified by the name &lt;code&gt;&quot;owner&quot;&lt;/code&gt;, and the value of the attribute is a &lt;a href=&quot;userprincipal&quot;&gt;&lt;code&gt;UserPrincipal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; メソッド&lt;/a&gt;方法は、所有者の読み取りまたは更新するために使用することができます。その場合、所有者属性は &lt;code&gt;&quot;owner&quot;&lt;/code&gt; という名前で識別され、属性の値は&lt;a href=&quot;userprincipal&quot;&gt; &lt;code&gt;UserPrincipal&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6c2baff7408e5ad54d49ec829c03c8add1ffdf24" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; method may be used to read any of these attributes as if by invoking the &lt;a href=&quot;basicfileattributeview#readAttributes--&quot;&gt;&lt;code&gt;readAttributes()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; の&lt;/a&gt;方法は、IFとして呼び出すことによって、これらの属性のいずれかを読み取るために使用することができる&lt;a href=&quot;basicfileattributeview#readAttributes--&quot;&gt; &lt;code&gt;readAttributes()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="e42fb0b1ed94cf5c272dbff37a665442f101c72a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; method may be used to read any of these attributes, or any of the attributes defined by &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; as if by invoking the &lt;a href=&quot;dosfileattributeview#readAttributes--&quot;&gt;&lt;code&gt;readAttributes()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; の&lt;/a&gt;方法は、これらの属性のいずれかを読み取るために使用され得る、または属性のいずれかによって定義さ&lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt;呼び出すことであるかのように&lt;a href=&quot;dosfileattributeview#readAttributes--&quot;&gt; &lt;code&gt;readAttributes()&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="cc5e5360eedff08a35975f0e9a9480502f02b841" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; method may be used to read any of these attributes, or any of the attributes defined by &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; as if by invoking the &lt;a href=&quot;posixfileattributeview#readAttributes--&quot;&gt;&lt;code&gt;readAttributes()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; の&lt;/a&gt;方法は、これらの属性のいずれかを読み取るために使用され得る、または属性のいずれかによって定義さ&lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt;呼び出すことであるかのように&lt;a href=&quot;posixfileattributeview#readAttributes--&quot;&gt; &lt;code&gt;readAttributes()&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="52e7fac281b42fd7fe7452e241108ef2d5dcf7d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; method may be used to read the ACL or owner attributes as if by invoking the &lt;a href=&quot;aclfileattributeview#getAcl--&quot;&gt;&lt;code&gt;getAcl&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fileownerattributeview#getOwner--&quot;&gt;&lt;code&gt;getOwner&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; の&lt;/a&gt;方法を呼び出すことによってかのようにACLまたは所有者属性を読み取るために使用されてもよい&lt;a href=&quot;aclfileattributeview#getAcl--&quot;&gt; &lt;code&gt;getAcl&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;fileownerattributeview#getOwner--&quot;&gt; &lt;code&gt;getOwner&lt;/code&gt; メソッド&lt;/a&gt;方法を。</target>
        </trans-unit>
        <trans-unit id="1bfa9ca3b01e08a940097655d13c2a85724d95de" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; method may be used to update the ACL or owner attributes as if by invoking the &lt;a href=&quot;aclfileattributeview#setAcl-java.util.List-&quot;&gt;&lt;code&gt;setAcl&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt;&lt;code&gt;setOwner&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; メソッドの&lt;/a&gt;方法は、IFとして呼び出すことによって、ACLまたは所有者属性を更新するために使用されてもよい&lt;a href=&quot;aclfileattributeview#setAcl-java.util.List-&quot;&gt; &lt;code&gt;setAcl&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt; &lt;code&gt;setOwner&lt;/code&gt; &lt;/a&gt;方法を。</target>
        </trans-unit>
        <trans-unit id="c435d3e3c46a4b9a0beff2ad2d5cec4c6ab7aa83" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; method may be used to update the file's last modified time, last access time or create time attributes as defined by &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt;. It may also be used to update the DOS attributes as if by invoking the &lt;a href=&quot;dosfileattributeview#setReadOnly-boolean-&quot;&gt;&lt;code&gt;setReadOnly&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;dosfileattributeview#setHidden-boolean-&quot;&gt;&lt;code&gt;setHidden&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;dosfileattributeview#setSystem-boolean-&quot;&gt;&lt;code&gt;setSystem&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;dosfileattributeview#setArchive-boolean-&quot;&gt;&lt;code&gt;setArchive&lt;/code&gt;&lt;/a&gt; methods respectively.</source>
          <target state="translated">&lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; メソッドの&lt;/a&gt;方法は、最終アクセス時刻をファイルの最終更新時刻を更新したりすることによって定義されるように、時間属性を作成するために使用することができる&lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt;。また、&lt;a href=&quot;dosfileattributeview#setReadOnly-boolean-&quot;&gt; &lt;code&gt;setReadOnly&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;dosfileattributeview#setHidden-boolean-&quot;&gt; &lt;code&gt;setHidden&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;dosfileattributeview#setSystem-boolean-&quot;&gt; &lt;code&gt;setSystem&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;dosfileattributeview#setArchive-boolean-&quot;&gt; &lt;code&gt;setArchive&lt;/code&gt; &lt;/a&gt;メソッドをそれぞれ呼び出すかのように、DOS属性を更新するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="eda9c31c1c567716843eb27dfd24c5d17ae4a65a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; method may be used to update the file's last modified time, last access time or create time attributes as defined by &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt;. It may also be used to update the permissions, owner, or group-owner as if by invoking the &lt;a href=&quot;posixfileattributeview#setPermissions-java.util.Set-&quot;&gt;&lt;code&gt;setPermissions&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt;&lt;code&gt;setOwner&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;posixfileattributeview#setGroup-java.nio.file.attribute.GroupPrincipal-&quot;&gt;&lt;code&gt;setGroup&lt;/code&gt;&lt;/a&gt; methods respectively.</source>
          <target state="translated">&lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; メソッドの&lt;/a&gt;方法は、最終アクセス時刻をファイルの最終更新時刻を更新したりすることによって定義されるように、時間属性を作成するために使用することができる&lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt;。また、&lt;a href=&quot;posixfileattributeview#setPermissions-java.util.Set-&quot;&gt; &lt;code&gt;setPermissions&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt; &lt;code&gt;setOwner&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;posixfileattributeview#setGroup-java.nio.file.attribute.GroupPrincipal-&quot;&gt; &lt;code&gt;setGroup&lt;/code&gt; &lt;/a&gt;メソッドをそれぞれ呼び出すことによって、権限、所有者、またはグループ所有者を更新する場合にも使用できます。</target>
        </trans-unit>
        <trans-unit id="a691ef8b98d41f4420b4aefb065db958be6429d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; method may be used to update the file's last modified time, last access time or create time attributes as if by invoking the &lt;a href=&quot;basicfileattributeview#setTimes-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-&quot;&gt;&lt;code&gt;setTimes&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; メソッドの&lt;/a&gt;方法は、最終アクセス時刻をファイルの最終更新時刻を更新したり呼び出すことによってかのように、時間属性を作成するために使用することができる&lt;a href=&quot;basicfileattributeview#setTimes-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-&quot;&gt; &lt;code&gt;setTimes&lt;/code&gt; の&lt;/a&gt;方法を。</target>
        </trans-unit>
        <trans-unit id="580a6d6beeb8ffe4eb2d62290bc22802acbffaee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../filestore#supportsFileAttributeView-java.lang.Class-&quot;&gt;&lt;code&gt;supportsFileAttributeView&lt;/code&gt;&lt;/a&gt; method may be used to test if a specific &lt;a href=&quot;../filestore&quot;&gt;&lt;code&gt;FileStore&lt;/code&gt;&lt;/a&gt; supports the storage of user-defined attributes.</source>
          <target state="translated">&lt;a href=&quot;../filestore#supportsFileAttributeView-java.lang.Class-&quot;&gt; &lt;code&gt;supportsFileAttributeView&lt;/code&gt; の&lt;/a&gt;特定の場合方法は、試験に使用することができる&lt;a href=&quot;../filestore&quot;&gt; &lt;code&gt;FileStore&lt;/code&gt; &lt;/a&gt;ユーザ定義属性のストレージをサポートします。</target>
        </trans-unit>
        <trans-unit id="0ee89249aaebf2f1fc5eeda71bacdd03058fa195" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../function/supplier#get--&quot;&gt;&lt;code&gt;Supplier.get()&lt;/code&gt;&lt;/a&gt; method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences.</source>
          <target state="translated">&lt;a href=&quot;../function/supplier#get--&quot;&gt; &lt;code&gt;Supplier.get()&lt;/code&gt; &lt;/a&gt;メソッドは複数回業者に呼び出されていない、とだけストリームパイプラインの開始についての端末操作後に説明します。</target>
        </trans-unit>
        <trans-unit id="142dbbdea20e0ff6bd9b8a5f8d0a573aae47a0f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../mappedbytebuffer&quot;&gt;&lt;code&gt;&lt;i&gt;mapped byte buffer&lt;/i&gt;&lt;/code&gt;&lt;/a&gt; returned by this method will have a position of zero and a limit and capacity of &lt;code&gt;size&lt;/code&gt;; its mark will be undefined. The buffer and the mapping that it represents will remain valid until the buffer itself is garbage-collected.</source>
          <target state="translated">&lt;a href=&quot;../mappedbytebuffer&quot;&gt; &lt;code&gt;&lt;i&gt;mapped byte buffer&lt;/i&gt;&lt;/code&gt; &lt;/a&gt;このメソッドによって返されたゼロの位置との限界と能力があります &lt;code&gt;size&lt;/code&gt; 、そのマークは未定義になります。バッファとそれが表すマッピングは、バッファ自体がガベージコレクションされるまで有効です。</target>
        </trans-unit>
        <trans-unit id="48db05c222075f07f78662388844eeb5f6f1bc01" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../nio/channels/filechannel#position--&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; of the returned channel will always be equal to this object's file-pointer offset as returned by the &lt;a href=&quot;randomaccessfile#getFilePointer--&quot;&gt;&lt;code&gt;getFilePointer&lt;/code&gt;&lt;/a&gt; method. Changing this object's file-pointer offset, whether explicitly or by reading or writing bytes, will change the position of the channel, and vice versa. Changing the file's length via this object will change the length seen via the file channel, and vice versa.</source>
          <target state="translated">返されるチャネルの&lt;a href=&quot;../nio/channels/filechannel#position--&quot;&gt; &lt;code&gt;position&lt;/code&gt; &lt;/a&gt;は、常に&lt;a href=&quot;randomaccessfile#getFilePointer--&quot;&gt; &lt;code&gt;getFilePointer&lt;/code&gt; &lt;/a&gt;メソッドによって返されるこのオブジェクトのファイルポインターオフセットと等しくなります。このオブジェクトのファイルポインターオフセットを変更すると、明示的に、またはバイトの読み取りまたは書き込みによって、チャネルの位置が変更されます。逆の場合も同様です。このオブジェクトを使用してファイルの長さを変更すると、ファイルチャネルを介して表示される長さが変更され、逆も同様です。</target>
        </trans-unit>
        <trans-unit id="1b7577f54ca9ebadbf67e174ed9fc74807c65a0b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../nio/file/files&quot;&gt;&lt;code&gt;Files&lt;/code&gt;&lt;/a&gt; class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.</source>
          <target state="translated">&lt;a href=&quot;../nio/file/files&quot;&gt; &lt;code&gt;Files&lt;/code&gt; &lt;/a&gt;クラスは、ファイルのアクセス権などのファイル属性を操作するメソッドを定義します。これは、ファイル許可のより細かい操作が必要な場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="3185bf54751cfa5bf1ebba53d67faccb98bf6516" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../nio/file/files#createTempFile-java.lang.String-java.lang.String-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;Files.createTempFile&lt;/code&gt;&lt;/a&gt; method provides an alternative method to create an empty file in the temporary-file directory. Files created by that method may have more restrictive access permissions to files created by this method and so may be more suited to security-sensitive applications.</source>
          <target state="translated">&lt;a href=&quot;../nio/file/files#createTempFile-java.lang.String-java.lang.String-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;Files.createTempFile&lt;/code&gt; の&lt;/a&gt;方法は、一時ファイルディレクトリに空のファイルを作成するための別の方法を提供します。その方法で作成されたファイルは、この方法で作成されたファイルへのアクセス制限がより厳しくなり、セキュリティが重要なアプリケーションに適している場合があります。</target>
        </trans-unit>
        <trans-unit id="d1cd2dbce708c6940c8cf8ba35f1bba1e58ac0ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../nio/file/package-summary&quot;&gt;&lt;code&gt;java.nio.file&lt;/code&gt;&lt;/a&gt; package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems. This API may be used to overcome many of the limitations of the &lt;code&gt;java.io.File&lt;/code&gt; class. The &lt;a href=&quot;file#toPath--&quot;&gt;&lt;code&gt;toPath&lt;/code&gt;&lt;/a&gt; method may be used to obtain a &lt;a href=&quot;../nio/file/path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; that uses the abstract path represented by a &lt;code&gt;File&lt;/code&gt; object to locate a file. The resulting &lt;code&gt;Path&lt;/code&gt; may be used with the &lt;a href=&quot;../nio/file/files&quot;&gt;&lt;code&gt;Files&lt;/code&gt;&lt;/a&gt; class to provide more efficient and extensive access to additional file operations, file attributes, and I/O exceptions to help diagnose errors when an operation on a file fails.</source>
          <target state="translated">&lt;a href=&quot;../nio/file/package-summary&quot;&gt; &lt;code&gt;java.nio.file&lt;/code&gt; の&lt;/a&gt;パッケージには、アクセスファイル、ファイル属性、およびファイルシステムにJava仮想マシン用のインタフェースとクラスを定義します。このAPIは、 &lt;code&gt;java.io.File&lt;/code&gt; クラスの制限の多くを克服するために使用できます。&lt;a href=&quot;file#toPath--&quot;&gt; &lt;code&gt;toPath&lt;/code&gt; の&lt;/a&gt;方法を得るために使用することができる&lt;a href=&quot;../nio/file/path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;で表される抽象パス使用して &lt;code&gt;File&lt;/code&gt; ファイルを検索するオブジェクト。結果の &lt;code&gt;Path&lt;/code&gt; を&lt;a href=&quot;../nio/file/files&quot;&gt; &lt;code&gt;Files&lt;/code&gt; &lt;/a&gt;クラスで使用して、追加のファイル操作、ファイル属性、およびI / O例外へのより効率的で広範なアクセスを提供し、ファイルの操作が失敗したときのエラーの診断に役立てることができます。</target>
        </trans-unit>
        <trans-unit id="6e1a4cbb02bf6c03d5a44b8766a6b75e3bd7ef2d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../temporal/chronofield#EPOCH_DAY&quot;&gt;&lt;code&gt;Epoch Day count&lt;/code&gt;&lt;/a&gt; is a simple incrementing count of days where day 0 is 1970-01-01 (ISO). This definition is the same for all chronologies, enabling conversion.</source>
          <target state="translated">&lt;a href=&quot;../temporal/chronofield#EPOCH_DAY&quot;&gt; &lt;code&gt;Epoch Day count&lt;/code&gt; &lt;/a&gt; 0日が1970年1月1日である日の簡単なインクリメント数（ISO）です。この定義はすべての年代学で同じであり、変換を可能にします。</target>
        </trans-unit>
        <trans-unit id="5e38b37aeff6c0bffbe4d4c7f1f5d153a7812a9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../util/calendar&quot;&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/a&gt; instance used for calculating the date-time fields and the instant of time. This field is used for both formatting and parsing.</source>
          <target state="translated">&lt;a href=&quot;../util/calendar&quot;&gt; &lt;code&gt;Calendar&lt;/code&gt; &lt;/a&gt;の日付・時刻フィールドと時間の瞬間を計算するために使用されるインスタンス。このフィールドは、フォーマットと解析の両方に使用されます。</target>
        </trans-unit>
        <trans-unit id="bde57531a30d3dd5f7c37db7a69c3a1d61935c91" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneid#getId--&quot;&gt;&lt;code&gt;zone ID&lt;/code&gt;&lt;/a&gt;. This is not part of the ISO-8601 standard. Parsing is case sensitive.</source>
          <target state="translated">&lt;a href=&quot;../zoneid#getId--&quot;&gt; &lt;code&gt;zone ID&lt;/code&gt; &lt;/a&gt;。これはISO-8601標準の一部ではありません。解析では大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="d3169944a88bbb1bad97a1a30cd73363ef99816c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneoffset#getId--&quot;&gt;&lt;code&gt;offset ID&lt;/code&gt;&lt;/a&gt; without colons or seconds. An offset of zero uses &quot;GMT&quot;. North American zone names and military zone names are not handled.</source>
          <target state="translated">&lt;a href=&quot;../zoneoffset#getId--&quot;&gt; &lt;code&gt;offset ID&lt;/code&gt; &lt;/a&gt;コロンまたは秒なし。ゼロのオフセットは「GMT」を使用します。北米のゾーン名と軍事ゾーン名は処理されません。</target>
        </trans-unit>
        <trans-unit id="ccd8df3518a4d9b943302ee23512831c55573aa6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneoffset#getId--&quot;&gt;&lt;code&gt;offset ID&lt;/code&gt;&lt;/a&gt; without colons. If the offset has seconds then they will be handled even though this is not part of the ISO-8601 standard. Parsing is case insensitive.</source>
          <target state="translated">コロンなしの&lt;a href=&quot;../zoneoffset#getId--&quot;&gt; &lt;code&gt;offset ID&lt;/code&gt; &lt;/a&gt;。オフセットに秒がある場合、これはISO-8601標準の一部ではありませんが、それらは処理されます。解析では大文字と小文字が区別されません。</target>
        </trans-unit>
        <trans-unit id="ef469acd11a9914f386735c8a07ac2ef3e1fdbdb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneoffset#getId--&quot;&gt;&lt;code&gt;offset ID&lt;/code&gt;&lt;/a&gt;. If the offset has seconds then they will be handled even though this is not part of the ISO-8601 standard.</source>
          <target state="translated">&lt;a href=&quot;../zoneoffset#getId--&quot;&gt; &lt;code&gt;offset ID&lt;/code&gt; &lt;/a&gt;。オフセットに秒がある場合、これはISO-8601標準の一部ではありませんが、それらは処理されます。</target>
        </trans-unit>
        <trans-unit id="7eb4562aec376d8a60cf8842edb8d8443f0a1248" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneoffset#getId--&quot;&gt;&lt;code&gt;offset ID&lt;/code&gt;&lt;/a&gt;. If the offset has seconds then they will be handled even though this is not part of the ISO-8601 standard. Parsing is case insensitive.</source>
          <target state="translated">&lt;a href=&quot;../zoneoffset#getId--&quot;&gt; &lt;code&gt;offset ID&lt;/code&gt; &lt;/a&gt;。オフセットに秒がある場合、これはISO-8601標準の一部ではありませんが、それらは処理されます。解析では大文字と小文字が区別されません。</target>
        </trans-unit>
        <trans-unit id="fbbeb22d9b7e39547534480fe8598ea8d98e6e22" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;abstractqueuedsynchronizer&quot;&gt;&lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt;&lt;/a&gt; class serves as a useful superclass for defining locks and other synchronizers that rely on queuing blocked threads. The &lt;a href=&quot;abstractqueuedlongsynchronizer&quot;&gt;&lt;code&gt;AbstractQueuedLongSynchronizer&lt;/code&gt;&lt;/a&gt; class provides the same functionality but extends support to 64 bits of synchronization state. Both extend class &lt;a href=&quot;abstractownablesynchronizer&quot;&gt;&lt;code&gt;AbstractOwnableSynchronizer&lt;/code&gt;&lt;/a&gt;, a simple class that helps record the thread currently holding exclusive synchronization. The &lt;a href=&quot;locksupport&quot;&gt;&lt;code&gt;LockSupport&lt;/code&gt;&lt;/a&gt; class provides lower-level blocking and unblocking support that is useful for those developers implementing their own customized lock classes.</source>
          <target state="translated">&lt;a href=&quot;abstractqueuedsynchronizer&quot;&gt; &lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt; の&lt;/a&gt;クラスは、ロックとブロックされたスレッドのキューイングに依存する他のシンクロナイザを定義するのに有用なスーパークラスとして機能します。&lt;a href=&quot;abstractqueuedlongsynchronizer&quot;&gt; &lt;code&gt;AbstractQueuedLongSynchronizer&lt;/code&gt; の&lt;/a&gt;クラスは、同じ機能を提供するが、同期状態の64ビットのサポートを拡張します。どちらもクラス&lt;a href=&quot;abstractownablesynchronizer&quot;&gt; &lt;code&gt;AbstractOwnableSynchronizer&lt;/code&gt; を&lt;/a&gt;拡張します。これは、現在排他的同期を保持しているスレッドの記録に役立つ単純なクラスです。&lt;a href=&quot;locksupport&quot;&gt; &lt;code&gt;LockSupport&lt;/code&gt; の&lt;/a&gt;クラスは、独自のカスタマイズされたロッククラスを実装するこれらの開発者にとって便利である低レベルのブロックと解除のサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="cfef7de48d524821a8ec7c9579af151f13cdc049" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;accesscontroller#checkPermission-java.security.Permission-&quot;&gt;&lt;code&gt;checkPermission&lt;/code&gt;&lt;/a&gt; method determines whether the access request indicated by a specified permission should be granted or denied. A sample call appears below. In this example, &lt;code&gt;checkPermission&lt;/code&gt; will determine whether or not to grant &quot;read&quot; access to the file named &quot;testFile&quot; in the &quot;/temp&quot; directory.</source>
          <target state="translated">&lt;a href=&quot;accesscontroller#checkPermission-java.security.Permission-&quot;&gt; &lt;code&gt;checkPermission&lt;/code&gt; &lt;/a&gt;メソッドは、指定したアクセス権によって示されるアクセス要求が許可または拒否すべきかどうかを判断します。呼び出しの例を以下に示します。この例では、 &lt;code&gt;checkPermission&lt;/code&gt; は、「/ temp」ディレクトリ内の「testFile」という名前のファイルへの「読み取り」アクセスを許可するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="7af739ac4d097cac2c6f5ee5bae27b0834134652" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclentry#flags&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt; component is a set of &lt;a href=&quot;aclentryflag&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt; to indicate how entries are inherited and propagated</source>
          <target state="translated">&lt;a href=&quot;aclentry#flags&quot;&gt; &lt;code&gt;flags&lt;/code&gt; &lt;/a&gt;コンポーネントは、一連のある&lt;a href=&quot;aclentryflag&quot;&gt; &lt;code&gt;flags&lt;/code&gt; &lt;/a&gt;エントリは継承され、伝播される方法を示すために、</target>
        </trans-unit>
        <trans-unit id="69c9b8c45ab29ebc4b01d4e76c2c7f6f5bb01e81" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclentry#permissions--&quot;&gt;&lt;code&gt;permissions&lt;/code&gt;&lt;/a&gt; component is a set of &lt;a href=&quot;aclentrypermission&quot;&gt;&lt;code&gt;permissions&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;aclentry#permissions--&quot;&gt; &lt;code&gt;permissions&lt;/code&gt; &lt;/a&gt;コンポーネントは、一連のある&lt;a href=&quot;aclentrypermission&quot;&gt; &lt;code&gt;permissions&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4243500d113a1e8dca92fc8e0626cf084b1c7810" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclentry#principal--&quot;&gt;&lt;code&gt;principal&lt;/code&gt;&lt;/a&gt; component, sometimes called the &quot;who&quot; component, is a &lt;a href=&quot;userprincipal&quot;&gt;&lt;code&gt;UserPrincipal&lt;/code&gt;&lt;/a&gt; corresponding to the identity that the entry grants or denies access</source>
          <target state="translated">&lt;a href=&quot;aclentry#principal--&quot;&gt; &lt;code&gt;principal&lt;/code&gt; &lt;/a&gt;時々 「A」成分と呼ばれるコンポーネントは、ある&lt;a href=&quot;userprincipal&quot;&gt; &lt;code&gt;UserPrincipal&lt;/code&gt; &lt;/a&gt;アクセスを拒否エントリー許可こと又はアイデンティティに対応します</target>
        </trans-unit>
        <trans-unit id="f2f5e00fa6ae64b393f6e7d80594412fecc00383" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclentry#type--&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; component determines if the entry grants or denies access.</source>
          <target state="translated">&lt;a href=&quot;aclentry#type--&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;エントリが許可またはアクセスを拒否した場合にコンポーネントが判定する。</target>
        </trans-unit>
        <trans-unit id="f7f010146e9231a02191ac41817da03a8fd8aa8b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclfileattributeview&quot;&gt;&lt;code&gt;AclFileAttributeView&lt;/code&gt;&lt;/a&gt; class defines methods to read and write the Access Control List (ACL) file attribute. The ACL model used by this file attribute view is based on the model defined by &lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt; &lt;i&gt;RFC 3530: Network File System (NFS) version 4 Protocol&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;aclfileattributeview&quot;&gt; &lt;code&gt;AclFileAttributeView&lt;/code&gt; の&lt;/a&gt;クラスは、アクセス制御リスト（ACL）のファイル属性を読み書きするメソッドを定義します。このファイル属性ビューで使用されるACLモデルは、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt;&lt;i&gt;RFC 3530：Network File System（NFS）version 4 Protocolで&lt;/i&gt;&lt;/a&gt;定義されたモデルに基づいてい&lt;i&gt;ます&lt;/i&gt;。 &lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="d757646f4f57b621bdd66e46c7cc777a0dd7b6f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;annotatedelement#getAnnotationsByType-java.lang.Class-&quot;&gt;&lt;code&gt;getAnnotationsByType(Class)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;annotatedelement#getDeclaredAnnotationsByType-java.lang.Class-&quot;&gt;&lt;code&gt;getDeclaredAnnotationsByType(Class)&lt;/code&gt;&lt;/a&gt; methods support multiple annotations of the same type on an element. If the argument to either method is a repeatable annotation type (JLS 9.6), then the method will &quot;look through&quot; a container annotation (JLS 9.7), if present, and return any annotations inside the container. Container annotations may be generated at compile-time to wrap multiple annotations of the argument type.</source>
          <target state="translated">&lt;a href=&quot;annotatedelement#getAnnotationsByType-java.lang.Class-&quot;&gt; &lt;code&gt;getAnnotationsByType(Class)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;annotatedelement#getDeclaredAnnotationsByType-java.lang.Class-&quot;&gt; &lt;code&gt;getDeclaredAnnotationsByType(Class)&lt;/code&gt; &lt;/a&gt;メソッドは、要素上で同じタイプの複数の注釈をサポートします。いずれかのメソッドへの引数が繰り返し可能なアノテーションタイプ（JLS 9.6）の場合、メソッドはコンテナアノテーション（JLS 9.7）を「調べ」、存在する場合はコンテナアノテーションを返します。コンテナアノテーションは、引数タイプの複数のアノテーションをラップするためにコンパイル時に生成されます。</target>
        </trans-unit>
        <trans-unit id="5538279924c592259bec4c32883911ad4ee9986c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;asynchronouschannelgroup#shutdown--&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; method is used to initiate an &lt;em&gt;orderly shutdown&lt;/em&gt; of a group. An orderly shutdown marks the group as shutdown; further attempts to construct a channel that binds to the group will throw &lt;a href=&quot;shutdownchannelgroupexception&quot;&gt;&lt;code&gt;ShutdownChannelGroupException&lt;/code&gt;&lt;/a&gt;. Whether or not a group is shutdown can be tested using the &lt;a href=&quot;asynchronouschannelgroup#isShutdown--&quot;&gt;&lt;code&gt;isShutdown&lt;/code&gt;&lt;/a&gt; method. Once shutdown, the group &lt;em&gt;terminates&lt;/em&gt; when all asynchronous channels that are bound to the group are closed, all actively executing completion handlers have run to completion, and resources used by the group are released. No attempt is made to stop or interrupt threads that are executing completion handlers. The &lt;a href=&quot;asynchronouschannelgroup#isTerminated--&quot;&gt;&lt;code&gt;isTerminated&lt;/code&gt;&lt;/a&gt; method is used to test if the group has terminated, and the &lt;a href=&quot;asynchronouschannelgroup#awaitTermination-long-java.util.concurrent.TimeUnit-&quot;&gt;&lt;code&gt;awaitTermination&lt;/code&gt;&lt;/a&gt; method can be used to block until the group has terminated.</source>
          <target state="translated">&lt;a href=&quot;asynchronouschannelgroup#shutdown--&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt;方法を開始するために使用される&lt;em&gt;正常シャットダウン&lt;/em&gt;グループを。正常なシャットダウンは、グループをシャットダウンとしてマークします。グループにバインドするチャネルをさらに構築しようとすると、&lt;a href=&quot;shutdownchannelgroupexception&quot;&gt; &lt;code&gt;ShutdownChannelGroupException&lt;/code&gt; &lt;/a&gt;がスローされます。グループがシャットダウンされているかどうかは、&lt;a href=&quot;asynchronouschannelgroup#isShutdown--&quot;&gt; &lt;code&gt;isShutdown&lt;/code&gt; &lt;/a&gt;メソッドを使用してテストできます。シャットダウンすると、グループの&lt;em&gt;終了は、&lt;/em&gt;グループにバインドされているすべての非同期チャネルが閉じられたときに、すべての実行中のアクティブな完了ハンドラが完了するまで実行しており、グループで使用されるリソースが解放されます。完了ハンドラを実行しているスレッドを停止または中断する試みは行われません。&lt;a href=&quot;asynchronouschannelgroup#isTerminated--&quot;&gt; &lt;code&gt;isTerminated&lt;/code&gt; の&lt;/a&gt;方法は、グループが終了した場合、テストに使用され、&lt;a href=&quot;asynchronouschannelgroup#awaitTermination-long-java.util.concurrent.TimeUnit-&quot;&gt; &lt;code&gt;awaitTermination&lt;/code&gt; &lt;/a&gt;メソッドを使用すると、グループが終了するまでブロックできます。</target>
        </trans-unit>
        <trans-unit id="b514369062ab3b9e80aad31b822e6bf912e55f38" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;asynchronouschannelgroup#shutdownNow--&quot;&gt;&lt;code&gt;shutdownNow&lt;/code&gt;&lt;/a&gt; method can be used to initiate a &lt;em&gt;forceful shutdown&lt;/em&gt; of the group. In addition to the actions performed by an orderly shutdown, the &lt;code&gt;shutdownNow&lt;/code&gt; method closes all open channels in the group as if by invoking the &lt;a href=&quot;asynchronouschannel#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;asynchronouschannelgroup#shutdownNow--&quot;&gt; &lt;code&gt;shutdownNow&lt;/code&gt; のの&lt;/a&gt;方法は、開始するために使用することができる&lt;em&gt;強力なシャットダウン&lt;/em&gt;グループのを。通常のシャットダウンによって実行されるアクションに加えて、 &lt;code&gt;shutdownNow&lt;/code&gt; メソッドは、&lt;a href=&quot;asynchronouschannel#close--&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;メソッドを呼び出したかのように、グループ内のすべての開いているチャネルを閉じます。</target>
        </trans-unit>
        <trans-unit id="b0ba63e1a3f588adc27a9ff386437373fd12a3c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;asynchronoussocketchannel#read-java.nio.ByteBuffer-long-java.util.concurrent.TimeUnit-A-java.nio.channels.CompletionHandler-&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;asynchronoussocketchannel#write-java.nio.ByteBuffer-long-java.util.concurrent.TimeUnit-A-java.nio.channels.CompletionHandler-&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; methods defined by this class allow a timeout to be specified when initiating a read or write operation. If the timeout elapses before an operation completes then the operation completes with the exception &lt;a href=&quot;interruptedbytimeoutexception&quot;&gt;&lt;code&gt;InterruptedByTimeoutException&lt;/code&gt;&lt;/a&gt;. A timeout may leave the channel, or the underlying connection, in an inconsistent state. Where the implementation cannot guarantee that bytes have not been read from the channel then it puts the channel into an implementation specific &lt;em&gt;error state&lt;/em&gt;. A subsequent attempt to initiate a &lt;code&gt;read&lt;/code&gt; operation causes an unspecified runtime exception to be thrown. Similarly if a &lt;code&gt;write&lt;/code&gt; operation times out and the implementation cannot guarantee bytes have not been written to the channel then further attempts to &lt;code&gt;write&lt;/code&gt; to the channel cause an unspecified runtime exception to be thrown. When a timeout elapses then the state of the &lt;a href=&quot;../bytebuffer&quot;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, or the sequence of buffers, for the I/O operation is not defined. Buffers should be discarded or at least care must be taken to ensure that the buffers are not accessed while the channel remains open. All methods that accept timeout parameters treat values less than or equal to zero to mean that the I/O operation does not timeout.</source>
          <target state="translated">&lt;a href=&quot;asynchronoussocketchannel#read-java.nio.ByteBuffer-long-java.util.concurrent.TimeUnit-A-java.nio.channels.CompletionHandler-&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;asynchronoussocketchannel#write-java.nio.ByteBuffer-long-java.util.concurrent.TimeUnit-A-java.nio.channels.CompletionHandler-&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;、このクラスで定義されたメソッドは、読み取りまたは書き込み操作を開始するときのタイムアウトを指定することができます。操作が完了する前にタイムアウトが経過すると、操作は例外&lt;a href=&quot;interruptedbytimeoutexception&quot;&gt; &lt;code&gt;InterruptedByTimeoutException&lt;/code&gt; で&lt;/a&gt;完了します。タイムアウトにより、チャネルまたは基になる接続が不整合な状態のままになる場合があります。実装がチャネルからバイトが読み取られていないことを保証できない場合、チャネルは実装固有の&lt;em&gt;エラー状態になり&lt;/em&gt;ます。その後 &lt;code&gt;read&lt;/code&gt; 操作を開始しようとすると、不特定の実行時例外がスローされます。同様に &lt;code&gt;write&lt;/code&gt; 操作がタイムアウトし、実装がチャネルにバイトが書き込まれていないことを保証できない場合、チャネルへの &lt;code&gt;write&lt;/code&gt; をさらに試行すると、指定されていないランタイム例外がスローされます。タイムアウトが経過すると、I / O操作の&lt;a href=&quot;../bytebuffer&quot;&gt; &lt;code&gt;ByteBuffer&lt;/code&gt; &lt;/a&gt;の状態または一連のバッファは定義されません。バッファを破棄するか、少なくともチャネルが開いたままの状態でバッファにアクセスしないように注意する必要があります。タイムアウトパラメータを受け入れるすべてのメソッドは、ゼロ以下の値を処理して、I / O操作がタイムアウトしないことを意味します。</target>
        </trans-unit>
        <trans-unit id="ff23faa6b9710e7149b05774884ffc2d0c84dc55" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;atomicintegerarray&quot;&gt;&lt;code&gt;AtomicIntegerArray&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;atomiclongarray&quot;&gt;&lt;code&gt;AtomicLongArray&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;atomicreferencearray&quot;&gt;&lt;code&gt;AtomicReferenceArray&lt;/code&gt;&lt;/a&gt; classes further extend atomic operation support to arrays of these types. These classes are also notable in providing &lt;code&gt;volatile&lt;/code&gt; access semantics for their array elements, which is not supported for ordinary arrays.</source>
          <target state="translated">&lt;a href=&quot;atomicintegerarray&quot;&gt; &lt;code&gt;AtomicIntegerArray&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;atomiclongarray&quot;&gt; &lt;code&gt;AtomicLongArray&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;atomicreferencearray&quot;&gt; &lt;code&gt;AtomicReferenceArray&lt;/code&gt; の&lt;/a&gt;クラスはさらに、これらのタイプのアレイにアトミック操作をサポートして延びています。これらのクラスは、それらの配列要素に &lt;code&gt;volatile&lt;/code&gt; アクセスセマンティクスを提供することでも注目に値しますが、これは通常の配列ではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="154013ac578d40011c0e881853d2d1cf4c7084e9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;atomicmarkablereference&quot;&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;&lt;/a&gt; class associates a single boolean with a reference. For example, this bit might be used inside a data structure to mean that the object being referenced has logically been deleted. The &lt;a href=&quot;atomicstampedreference&quot;&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;&lt;/a&gt; class associates an integer value with a reference. This may be used for example, to represent version numbers corresponding to series of updates.</source>
          <target state="translated">&lt;a href=&quot;atomicmarkablereference&quot;&gt; &lt;code&gt;AtomicMarkableReference&lt;/code&gt; の&lt;/a&gt;クラスは参照して、単一のブール値を関連付けます。たとえば、このビットはデータ構造内で使用され、参照されているオブジェクトが論理的に削除されたことを意味します。&lt;a href=&quot;atomicstampedreference&quot;&gt; &lt;code&gt;AtomicStampedReference&lt;/code&gt; の&lt;/a&gt;クラスは、参照して整数値を関連付けます。これは、たとえば、一連の更新に対応するバージョン番号を表すために使用できます。</target>
        </trans-unit>
        <trans-unit id="4e0bb33867e93c786974aecb9c28853d1fb48aa1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;attribute/basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; is required to be supported and therefore the set contains at least one element, &quot;basic&quot;.</source>
          <target state="translated">&lt;a href=&quot;attribute/basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; を&lt;/a&gt;サポートするために必要なので、セットには、「基本」、少なくとも1つの元素を含んでいます。</target>
        </trans-unit>
        <trans-unit id="42fec1b7f85b596fee4ca045a99c27b6e05ae27f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;attribute/package-summary&quot;&gt;&lt;code&gt;javax.print.attribute&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;attribute/standard/package-summary&quot;&gt;&lt;code&gt;javax.print.attribute.standard&lt;/code&gt;&lt;/a&gt; packages define print attributes, which describe the capabilities of a print service, specify the requirements of a print job, and track the progress of a print job.</source>
          <target state="translated">&lt;a href=&quot;attribute/package-summary&quot;&gt; &lt;code&gt;javax.print.attribute&lt;/code&gt; の&lt;/a&gt;と&lt;a href=&quot;attribute/standard/package-summary&quot;&gt; &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; の&lt;/a&gt;パッケージは、印刷ジョブの要件を指定して、プリントサービスの機能について説明した印刷属性を、定義、および印刷ジョブの進捗状況を追跡します。</target>
        </trans-unit>
        <trans-unit id="5ac6194267d0e25c2097930b8f5fbaf32e490bf5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; class defines methods to read and update a &lt;em&gt;basic&lt;/em&gt; set of file attributes that are common to many file systems.</source>
          <target state="translated">&lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt;読んで、更新するクラスを定義する方法&lt;em&gt;の基本的な&lt;/em&gt;多くのファイルシステムに共通しているファイル属性のセットを。</target>
        </trans-unit>
        <trans-unit id="9008207e38a099728a1e599c9fd10ddfa22dae76" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;bigdecimal#toEngineeringString--&quot;&gt;&lt;code&gt;toEngineeringString()&lt;/code&gt;&lt;/a&gt; method may be used for presenting numbers with exponents in engineering notation, and the &lt;a href=&quot;bigdecimal#setScale-int-java.math.RoundingMode-&quot;&gt;&lt;code&gt;setScale&lt;/code&gt;&lt;/a&gt; method may be used for rounding a &lt;code&gt;BigDecimal&lt;/code&gt; so it has a known number of digits after the decimal point.</source>
          <target state="translated">&lt;a href=&quot;bigdecimal#toEngineeringString--&quot;&gt; &lt;code&gt;toEngineeringString()&lt;/code&gt; &lt;/a&gt;メソッドは、工学表記で指数と番号を提示するために使用することができる、および&lt;a href=&quot;bigdecimal#setScale-int-java.math.RoundingMode-&quot;&gt; &lt;code&gt;setScale&lt;/code&gt; の&lt;/a&gt;方法は、丸めのために使用することができる &lt;code&gt;BigDecimal&lt;/code&gt; 、それが小数点の後の桁の既知数を持つように。</target>
        </trans-unit>
        <trans-unit id="e2929b7aad495e34766a177c1e114f9cc3750748" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;blockingdeque&quot;&gt;&lt;code&gt;BlockingDeque&lt;/code&gt;&lt;/a&gt; interface extends &lt;code&gt;BlockingQueue&lt;/code&gt; to support both FIFO and LIFO (stack-based) operations. Class &lt;a href=&quot;linkedblockingdeque&quot;&gt;&lt;code&gt;LinkedBlockingDeque&lt;/code&gt;&lt;/a&gt; provides an implementation.</source>
          <target state="translated">&lt;a href=&quot;blockingdeque&quot;&gt; &lt;code&gt;BlockingDeque&lt;/code&gt; &lt;/a&gt;インタフェースは延び &lt;code&gt;BlockingQueue&lt;/code&gt; のが両方FIFOとLIFO（スタックベース）操作をサポートします。クラス&lt;a href=&quot;linkedblockingdeque&quot;&gt; &lt;code&gt;LinkedBlockingDeque&lt;/code&gt; &lt;/a&gt;は実装を提供します。</target>
        </trans-unit>
        <trans-unit id="b2fd22bc1464c414a0571863354563eb9bb6d8fd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;calendar#HOUR_OF_DAY&quot;&gt;&lt;code&gt;HOUR_OF_DAY&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;calendar#HOUR&quot;&gt;&lt;code&gt;HOUR&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#AM_PM&quot;&gt;&lt;code&gt;AM_PM&lt;/code&gt;&lt;/a&gt; fields are handled independently and the &lt;a href=&quot;#time_resolution&quot;&gt;the resolution rule for the time of day&lt;/a&gt; is applied. Clearing one of the fields doesn't reset the hour of day value of this &lt;code&gt;Calendar&lt;/code&gt;. Use &lt;a href=&quot;calendar#set-int-int-&quot;&gt;&lt;code&gt;set(Calendar.HOUR_OF_DAY, 0)&lt;/code&gt;&lt;/a&gt; to reset the hour value.</source>
          <target state="translated">&lt;a href=&quot;calendar#HOUR_OF_DAY&quot;&gt; &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;calendar#HOUR&quot;&gt; &lt;code&gt;HOUR&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;calendar#AM_PM&quot;&gt; &lt;code&gt;AM_PM&lt;/code&gt; &lt;/a&gt;フィールドは、独立して処理され、&lt;a href=&quot;#time_resolution&quot;&gt;その日の時間分解能のルールが&lt;/a&gt;適用されます。いずれかのフィールドをクリアしても、この &lt;code&gt;Calendar&lt;/code&gt; 時間の値はリセットされません。時間の値をリセットするには&lt;a href=&quot;calendar#set-int-int-&quot;&gt; &lt;code&gt;set(Calendar.HOUR_OF_DAY, 0)&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="f04591de46efc6d10158813651253c9ef9e12e5d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;certpathbuilder#getRevocationChecker--&quot;&gt;&lt;code&gt;getRevocationChecker()&lt;/code&gt;&lt;/a&gt; method allows an application to specify additional algorithm-specific parameters and options used by the &lt;code&gt;CertPathBuilder&lt;/code&gt; when checking the revocation status of certificates. Here is an example demonstrating how it is used with the PKIX algorithm:</source>
          <target state="translated">&lt;a href=&quot;certpathbuilder#getRevocationChecker--&quot;&gt; &lt;code&gt;getRevocationChecker()&lt;/code&gt; &lt;/a&gt;メソッドは、アプリケーションにより使用される追加のアルゴリズム固有のパラメータとオプションを指定することを可能に &lt;code&gt;CertPathBuilder&lt;/code&gt; 証明書の失効ステータスをチェックするときに。これは、PKIXアルゴリズムでどのように使用されるかを示す例です。</target>
        </trans-unit>
        <trans-unit id="c2fe006c42d37a0e6b495c7077cf3ce1bbd6e97e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt;&lt;code&gt;getRevocationChecker()&lt;/code&gt;&lt;/a&gt; method allows an application to specify additional algorithm-specific parameters and options used by the &lt;code&gt;CertPathValidator&lt;/code&gt; when checking the revocation status of certificates. Here is an example demonstrating how it is used with the PKIX algorithm:</source>
          <target state="translated">&lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt; &lt;code&gt;getRevocationChecker()&lt;/code&gt; &lt;/a&gt;メソッドは、アプリケーションにより使用される追加のアルゴリズム固有のパラメータとオプションを指定することを可能に &lt;code&gt;CertPathValidator&lt;/code&gt; 証明書の失効ステータスをチェックするときに。これは、PKIXアルゴリズムでどのように使用されるかを示す例です。</target>
        </trans-unit>
        <trans-unit id="353391e89ff7caccf4fa0ecf1b6ada580292d90f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; interface is extended by several other interfaces.</source>
          <target state="translated">&lt;a href=&quot;channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;インターフェースは、いくつかの他のインタフェースによって拡張されます。</target>
        </trans-unit>
        <trans-unit id="13bd1e29b4330451ff38da9cb77e5dbd6672f0ec" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;channels&quot;&gt;&lt;code&gt;Channels&lt;/code&gt;&lt;/a&gt; utility class defines static methods that support the interoperation of the stream classes of the &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; package with the channel classes of this package. An appropriate channel can be constructed from an &lt;a href=&quot;../../io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;../../io/outputstream&quot;&gt;&lt;code&gt;OutputStream&lt;/code&gt;&lt;/a&gt;, and conversely an &lt;a href=&quot;../../io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;../../io/outputstream&quot;&gt;&lt;code&gt;OutputStream&lt;/code&gt;&lt;/a&gt; can be constructed from a channel. A &lt;a href=&quot;../../io/reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; can be constructed that uses a given charset to decode bytes from a given readable byte channel, and conversely a &lt;a href=&quot;../../io/writer&quot;&gt;&lt;code&gt;Writer&lt;/code&gt;&lt;/a&gt; can be constructed that uses a given charset to encode characters into bytes and write them to a given writable byte channel.</source>
          <target state="translated">&lt;a href=&quot;channels&quot;&gt; &lt;code&gt;Channels&lt;/code&gt; &lt;/a&gt;ユーティリティクラスは、ストリームクラスの相互運用サポートする静的メソッド定義 &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; このパッケージのチャネルクラスとパッケージを。&lt;a href=&quot;../../io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../io/outputstream&quot;&gt; &lt;code&gt;OutputStream&lt;/code&gt; &lt;/a&gt;から適切なチャネルを構築できます。逆に、チャネルから&lt;a href=&quot;../../io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../io/outputstream&quot;&gt; &lt;code&gt;OutputStream&lt;/code&gt; &lt;/a&gt;を構築できます。特定の文字セットを使用して特定の読み取り可能なバイトチャネルからバイトをデコードする&lt;a href=&quot;../../io/reader&quot;&gt; &lt;code&gt;Reader&lt;/code&gt; &lt;/a&gt;を構築できます。逆に、特定の文字セットを使用して文字をバイトにエンコードし、特定の書き込み可能なバイトチャネルに書き込む&lt;a href=&quot;../../io/writer&quot;&gt; &lt;code&gt;Writer&lt;/code&gt; &lt;/a&gt;を構築できます。</target>
        </trans-unit>
        <trans-unit id="0f057642b4bb486cc33d79cbc367d51cb24e2bda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;charset&quot;&gt;&lt;code&gt;Charset&lt;/code&gt;&lt;/a&gt; class defines methods for creating coders for a given charset and for retrieving the various names associated with a charset. It also defines static methods for testing whether a particular charset is supported, for locating charset instances by name, and for constructing a map that contains every charset for which support is available in the current Java virtual machine.</source>
          <target state="translated">&lt;a href=&quot;charset&quot;&gt; &lt;code&gt;Charset&lt;/code&gt; &lt;/a&gt;クラスは、指定された文字セットおよび文字セットに関連付けられたさまざまな名前を取得するためのコーダを作成するための方法を定義します。また、特定の文字セットがサポートされているかどうかをテストしたり、文字セットインスタンスを名前で検索したり、現在のJava仮想マシンでサポートされているすべての文字セットを含むマップを作成したりするための静的メソッドも定義します。</target>
        </trans-unit>
        <trans-unit id="a67cff32a8cc7c58f69e3c11acfe781fdb3c37d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;concurrentlinkedqueue&quot;&gt;&lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;&lt;/a&gt; class supplies an efficient scalable thread-safe non-blocking FIFO queue. The &lt;a href=&quot;concurrentlinkeddeque&quot;&gt;&lt;code&gt;ConcurrentLinkedDeque&lt;/code&gt;&lt;/a&gt; class is similar, but additionally supports the &lt;a href=&quot;../deque&quot;&gt;&lt;code&gt;Deque&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;concurrentlinkedqueue&quot;&gt; &lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt; &lt;/a&gt;クラスの供給効率的なスケーラブルなスレッドセーフの非ブロッキングFIFOキュー。&lt;a href=&quot;concurrentlinkeddeque&quot;&gt; &lt;code&gt;ConcurrentLinkedDeque&lt;/code&gt; &lt;/a&gt;クラスは似ていますが、さらにサポートされてい&lt;a href=&quot;../deque&quot;&gt; &lt;code&gt;Deque&lt;/code&gt; &lt;/a&gt;インタフェースを。</target>
        </trans-unit>
        <trans-unit id="8f05e709096b93b1da433f74acd77bc05bb25621" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;condition&quot;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt; interface describes condition variables that may be associated with Locks. These are similar in usage to the implicit monitors accessed using &lt;code&gt;Object.wait&lt;/code&gt;, but offer extended capabilities. In particular, multiple &lt;code&gt;Condition&lt;/code&gt; objects may be associated with a single &lt;code&gt;Lock&lt;/code&gt;. To avoid compatibility issues, the names of &lt;code&gt;Condition&lt;/code&gt; methods are different from the corresponding &lt;code&gt;Object&lt;/code&gt; versions.</source>
          <target state="translated">&lt;a href=&quot;condition&quot;&gt; &lt;code&gt;Condition&lt;/code&gt; &lt;/a&gt;インターフェースは、ロックに関連してもよい状態変数について説明します。これらは、 &lt;code&gt;Object.wait&lt;/code&gt; を使用してアクセスされる暗黙のモニターと使い方が似ていますが、拡張機能を提供します。特に、複数の &lt;code&gt;Condition&lt;/code&gt; オブジェクトを1つの &lt;code&gt;Lock&lt;/code&gt; に関連付けることができます。互換性の問題を回避するために、 &lt;code&gt;Condition&lt;/code&gt; メソッドの名前は、対応する &lt;code&gt;Object&lt;/code&gt; のバージョンとは異なります。</target>
        </trans-unit>
        <trans-unit id="9e8041c88b3dcafc9b4f4c5eb63f4ac4c547288c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_LOCAL_DATE&quot;&gt;&lt;code&gt;ISO_LOCAL_DATE&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_LOCAL_DATE&quot;&gt; &lt;code&gt;ISO_LOCAL_DATE&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e9dd68445d5385bb05545d5acae99f43bf46af4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_LOCAL_DATE_TIME&quot;&gt;&lt;code&gt;ISO_LOCAL_DATE_TIME&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_LOCAL_DATE_TIME&quot;&gt; &lt;code&gt;ISO_LOCAL_DATE_TIME&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fd9235cbf846fb05154c7fff0a0c527bea890016" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_LOCAL_TIME&quot;&gt;&lt;code&gt;ISO_LOCAL_TIME&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_LOCAL_TIME&quot;&gt; &lt;code&gt;ISO_LOCAL_TIME&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6aeff022cca7462b1d24d181862f8642f26d64d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_OFFSET_DATE_TIME&quot;&gt;&lt;code&gt;ISO_OFFSET_DATE_TIME&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_OFFSET_DATE_TIME&quot;&gt; &lt;code&gt;ISO_OFFSET_DATE_TIME&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75e1a69d924196bb7f31b2df6ac058a6b61c95bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_OFFSET_DATE_TIME&quot;&gt;&lt;code&gt;ISO_OFFSET_DATE_TIME&lt;/code&gt;&lt;/a&gt; where the instant is converted from &lt;a href=&quot;../temporal/chronofield#INSTANT_SECONDS&quot;&gt;&lt;code&gt;ChronoField.INSTANT_SECONDS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../temporal/chronofield#NANO_OF_SECOND&quot;&gt;&lt;code&gt;ChronoField.NANO_OF_SECOND&lt;/code&gt;&lt;/a&gt; using the &lt;code&gt;UTC&lt;/code&gt; offset. Parsing is case insensitive.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_OFFSET_DATE_TIME&quot;&gt; &lt;code&gt;ISO_OFFSET_DATE_TIME&lt;/code&gt; &lt;/a&gt;瞬間をから変換され&lt;a href=&quot;../temporal/chronofield#INSTANT_SECONDS&quot;&gt; &lt;code&gt;ChronoField.INSTANT_SECONDS&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../temporal/chronofield#NANO_OF_SECOND&quot;&gt; &lt;code&gt;ChronoField.NANO_OF_SECOND&lt;/code&gt; &lt;/a&gt;使用して &lt;code&gt;UTC&lt;/code&gt; オフセットを。解析では大文字と小文字が区別されません。</target>
        </trans-unit>
        <trans-unit id="7bbd020b4b15b4b357c33b60139663bc5ab3a2b4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withChronology-java.time.chrono.Chronology-&quot;&gt;&lt;code&gt;withChronology&lt;/code&gt;&lt;/a&gt; method returns a new formatter that overrides the chronology. If overridden, the date-time value is converted to the chronology before formatting. During parsing the date-time value is converted to the chronology before it is returned.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withChronology-java.time.chrono.Chronology-&quot;&gt; &lt;code&gt;withChronology&lt;/code&gt; の&lt;/a&gt;方法は、年表をオーバーライドする新しいフォーマッタを返します。オーバーライドされた場合、日時の値はフォーマットの前に年代順に変換されます。解析時に、日時値は返される前に年代順に変換されます。</target>
        </trans-unit>
        <trans-unit id="c2be0f0e5c7bfb256821fc337fa24120b0dbdc22" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withDecimalStyle-java.time.format.DecimalStyle-&quot;&gt;&lt;code&gt;withDecimalStyle&lt;/code&gt;&lt;/a&gt; method returns a new formatter that overrides the &lt;a href=&quot;decimalstyle&quot;&gt;&lt;code&gt;DecimalStyle&lt;/code&gt;&lt;/a&gt;. The DecimalStyle symbols are used for formatting and parsing.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withDecimalStyle-java.time.format.DecimalStyle-&quot;&gt; &lt;code&gt;withDecimalStyle&lt;/code&gt; の&lt;/a&gt;方法が優先されます新しいフォーマッタを返し&lt;a href=&quot;decimalstyle&quot;&gt; &lt;code&gt;DecimalStyle&lt;/code&gt; を&lt;/a&gt;。DecimalStyleシンボルは、フォーマットと解析に使用されます。</target>
        </trans-unit>
        <trans-unit id="65e1e451917eff1d1ca40b8cd181f08037d85fa5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withLocale-java.util.Locale-&quot;&gt;&lt;code&gt;withLocale&lt;/code&gt;&lt;/a&gt; method returns a new formatter that overrides the locale. The locale affects some aspects of formatting and parsing. For example, the &lt;a href=&quot;datetimeformatter#ofLocalizedDate-java.time.format.FormatStyle-&quot;&gt;&lt;code&gt;ofLocalizedDate&lt;/code&gt;&lt;/a&gt; provides a formatter that uses the locale specific date format.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withLocale-java.util.Locale-&quot;&gt; &lt;code&gt;withLocale&lt;/code&gt; の&lt;/a&gt;方法は、ロケールをオーバーライドする新しいフォーマッタを返します。ロケールは、フォーマットと解析のいくつかの側面に影響します。たとえば、&lt;a href=&quot;datetimeformatter#ofLocalizedDate-java.time.format.FormatStyle-&quot;&gt; &lt;code&gt;ofLocalizedDate&lt;/code&gt; &lt;/a&gt;は、ロケール固有の日付形式を使用するフォーマッターを提供します。</target>
        </trans-unit>
        <trans-unit id="ac11e4705d1cea60755dd413e0d7e05004a9574f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withResolverFields-java.time.temporal.TemporalField...-&quot;&gt;&lt;code&gt;withResolverFields(TemporalField...)&lt;/code&gt;&lt;/a&gt; parameter allows the set of fields that will be resolved to be filtered before resolving starts. For example, if the formatter has parsed a year, month, day-of-month and day-of-year, then there are two approaches to resolve a date: (year + month + day-of-month) and (year + day-of-year). The resolver fields allows one of the two approaches to be selected. If no resolver fields are set then both approaches must result in the same date.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withResolverFields-java.time.temporal.TemporalField...-&quot;&gt; &lt;code&gt;withResolverFields(TemporalField...)&lt;/code&gt; &lt;/a&gt;パラメータは、開始を解決する前に濾過されるように解決されるフィールドのセットすることができます。たとえば、フォーマッタが年、月、日、年の日付を解析した場合、日付を解決する方法は（年+月+日）と（年+年の日）。リゾルバーフィールドでは、2つのアプローチのいずれかを選択できます。リゾルバーフィールドが設定されていない場合は、両方のアプローチで同じ日付にする必要があります。</target>
        </trans-unit>
        <trans-unit id="c56041ee24c2e62e6514b35eb7cc04f16f5b0ac1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withZone-java.time.ZoneId-&quot;&gt;&lt;code&gt;withZone&lt;/code&gt;&lt;/a&gt; method returns a new formatter that overrides the zone. If overridden, the date-time value is converted to a ZonedDateTime with the requested ZoneId before formatting. During parsing the ZoneId is applied before the value is returned.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withZone-java.time.ZoneId-&quot;&gt; &lt;code&gt;withZone&lt;/code&gt; の&lt;/a&gt;方法は、ゾーンをオーバーライドする新しいフォーマッタを返します。オーバーライドされた場合、日時の値は、フォーマットする前に、要求されたZoneIdを使用してZonedDateTimeに変換されます。解析中、ZoneIdは値が返される前に適用されます。</target>
        </trans-unit>
        <trans-unit id="cd859580f99613136d80c7938719b23f4da700bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;descriptor&quot;&gt;&lt;code&gt;Descriptor&lt;/code&gt;&lt;/a&gt; for all of the &lt;code&gt;MBeanAttributeInfo&lt;/code&gt;, &lt;code&gt;MBeanParameterInfo&lt;/code&gt;, and &lt;code&gt;MBeanOperationInfo&lt;/code&gt; objects contained in the &lt;code&gt;MBeanInfo&lt;/code&gt; will have a field &lt;code&gt;openType&lt;/code&gt; whose value is the &lt;a href=&quot;openmbean/opentype&quot;&gt;&lt;code&gt;OpenType&lt;/code&gt;&lt;/a&gt; specified by the mapping rules above. So even when &lt;code&gt;getType()&lt;/code&gt; is &quot;&lt;code&gt;int&lt;/code&gt;&quot;, &lt;code&gt;getDescriptor().getField(&quot;openType&quot;)&lt;/code&gt; will be &lt;a href=&quot;openmbean/simpletype#INTEGER&quot;&gt;&lt;code&gt;SimpleType.INTEGER&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;descriptor&quot;&gt; &lt;code&gt;Descriptor&lt;/code&gt; &lt;/a&gt;の全てのため &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; 、 &lt;code&gt;MBeanParameterInfo&lt;/code&gt; と &lt;code&gt;MBeanOperationInfo&lt;/code&gt; に含まれるオブジェクト &lt;code&gt;MBeanInfo&lt;/code&gt; フィールドがあります &lt;code&gt;openType&lt;/code&gt; その値で&lt;a href=&quot;openmbean/opentype&quot;&gt; &lt;code&gt;OpenType&lt;/code&gt; &lt;/a&gt;上記マッピング規則で指定します。したがって、 &lt;code&gt;getType()&lt;/code&gt; が「 &lt;code&gt;int&lt;/code&gt; 」の場合でも、 &lt;code&gt;getDescriptor().getField(&quot;openType&quot;)&lt;/code&gt; は&lt;a href=&quot;openmbean/simpletype#INTEGER&quot;&gt; &lt;code&gt;SimpleType.INTEGER&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="83d652f00d8a04827d939d634a6f87310e7e3196" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;docflavor&quot;&gt;&lt;code&gt;DocFlavor&lt;/code&gt;&lt;/a&gt; class represents the print data format, such as JPEG or PostScript. A &lt;code&gt;DocFlavor&lt;/code&gt; object consists of a MIME type, which describes the format, and a document representation class name that indicates how the document is delivered to the printer or output stream. An application uses the &lt;code&gt;DocFlavor&lt;/code&gt; and an attribute set to find printers that can print the document type specified by the &lt;code&gt;DocFlavor&lt;/code&gt; and have the capabilities specified by the attribute set.</source>
          <target state="translated">&lt;a href=&quot;docflavor&quot;&gt; &lt;code&gt;DocFlavor&lt;/code&gt; の&lt;/a&gt;クラスは、JPEGやPostScriptのように、印刷データ形式を表します。 &lt;code&gt;DocFlavor&lt;/code&gt; のオブジェクトの形式を記述するMIMEタイプ、及びドキュメントをプリンタまたは出力ストリームに配信されるかを示すドキュメント表現クラス名で構成されています。アプリケーションが使用し &lt;code&gt;DocFlavor&lt;/code&gt; によって指定されたドキュメントタイプ印刷できるプリンタを見つけるために、属性セットを &lt;code&gt;DocFlavor&lt;/code&gt; のを、属性セットに指定された機能を持っています。</target>
        </trans-unit>
        <trans-unit id="4a2a33b021a508069e12369db4ed8235c23dd820" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;dosfileattributeview&quot;&gt;&lt;code&gt;DosFileAttributeView&lt;/code&gt;&lt;/a&gt; class extends &lt;code&gt;BasicFileAttributeView&lt;/code&gt; by defining methods to access the legacy &quot;DOS&quot; file attributes supported on file systems such as File Allocation Tabl (FAT), commonly used in consumer devices.</source>
          <target state="translated">&lt;a href=&quot;dosfileattributeview&quot;&gt; &lt;code&gt;DosFileAttributeView&lt;/code&gt; の&lt;/a&gt;クラスを拡張し &lt;code&gt;BasicFileAttributeView&lt;/code&gt; を「DOS」ファイルは、一般的に民生機器に使用されるそのようなファイルアロケーションTABL（FAT）などのファイル・システム上でサポートされる属性レガシーにアクセスするためのメソッドを定義することによって。</target>
        </trans-unit>
        <trans-unit id="7ab5e9ce6e03076464956d6cf8e9e21635c83e58" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class contains utility methods to convert from other common forms to &lt;code&gt;Callable&lt;/code&gt; classes.</source>
          <target state="translated">&lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt;クラスはに他の一般的な形式へ変換するユーティリティメソッドが含まれている &lt;code&gt;Callable&lt;/code&gt; なクラス。</target>
        </trans-unit>
        <trans-unit id="8883df3bd964eac1086fd88dfe3a79b6d06f9e71" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class provides convenient factory methods for the ScheduledExecutorService implementations provided in this package.</source>
          <target state="translated">&lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt;クラスは、このパッケージで提供されるScheduledExecutorService実装するための便利なファクトリメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="e042e1e41822ebb3dc29ae27670b8475a6541a52" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class provides factory methods for the executor services provided in this package.</source>
          <target state="translated">&lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt;クラスは、このパッケージで提供さキュータのサービスのためのファクトリメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="89123dab0161f270435efa4f546d779073bf8797" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;executors#defaultThreadFactory--&quot;&gt;&lt;code&gt;Executors.defaultThreadFactory()&lt;/code&gt;&lt;/a&gt; method provides a more useful simple implementation, that sets the created thread context to known values before returning it.</source>
          <target state="translated">&lt;a href=&quot;executors#defaultThreadFactory--&quot;&gt; &lt;code&gt;Executors.defaultThreadFactory()&lt;/code&gt; &lt;/a&gt;メソッドは、それを返す前に既知の値に作成されたスレッドのコンテキストを設定し、より有用な簡単な実装を提供します。</target>
        </trans-unit>
        <trans-unit id="452f568b1f5309f7b11b0f0b96affb2b04cc97db" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fileattribute&quot;&gt;&lt;code&gt;FileAttribute&lt;/code&gt;&lt;/a&gt; interface represents the value of an attribute for cases where the attribute value is required to be set atomically when creating an object in the file system.</source>
          <target state="translated">&lt;a href=&quot;fileattribute&quot;&gt; &lt;code&gt;FileAttribute&lt;/code&gt; の&lt;/a&gt;インターフェースは、ファイルシステム内のオブジェクトを作成するときに、属性値をアトミックに設定する必要がある場合の属性の値を表します。</target>
        </trans-unit>
        <trans-unit id="44a89ca3f8f23eed63e4ec0b6a8bbaea5d50e095" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filechannel&quot;&gt;&lt;code&gt;FileChannel&lt;/code&gt;&lt;/a&gt; class supports the usual operations of reading bytes from, and writing bytes to, a channel connected to a file, as well as those of querying and modifying the current file position and truncating the file to a specific size. It defines methods for acquiring locks on the whole file or on a specific region of a file; these methods return instances of the &lt;a href=&quot;filelock&quot;&gt;&lt;code&gt;FileLock&lt;/code&gt;&lt;/a&gt; class. Finally, it defines methods for forcing updates to the file to be written to the storage device that contains it, for efficiently transferring bytes between the file and other channels, and for mapping a region of the file directly into memory.</source>
          <target state="translated">&lt;a href=&quot;filechannel&quot;&gt; &lt;code&gt;FileChannel&lt;/code&gt; &lt;/a&gt;、ファイルに接続されたチャネル、並びに照会及び現在のファイル位置を変更し、特定のサイズのファイルを切り捨てるのものなどをクラスからバイトを読み出す通常の動作をサポートし、書き込みがバイト。ファイル全体またはファイルの特定の領域でロックを取得するためのメソッドを定義します。これらのメソッドは、&lt;a href=&quot;filelock&quot;&gt; &lt;code&gt;FileLock&lt;/code&gt; &lt;/a&gt;クラスのインスタンスを返します。最後に、ファイルを含むストレージデバイスにファイルの更新を強制的に書き込む方法、ファイルと他のチャネル間でバイトを効率的に転送する方法、およびファイルの領域を直接メモリにマッピングする方法を定義します。</target>
        </trans-unit>
        <trans-unit id="7eca07bd746a1861a27802a596cf1b4a71de4344" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fileownerattributeview#getOwner--&quot;&gt;&lt;code&gt;getOwner&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt;&lt;code&gt;setOwner&lt;/code&gt;&lt;/a&gt; methods may be used to read or update the owner of the file.</source>
          <target state="translated">&lt;a href=&quot;fileownerattributeview#getOwner--&quot;&gt; &lt;code&gt;getOwner&lt;/code&gt; メソッド&lt;/a&gt;または&lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt; &lt;code&gt;setOwner&lt;/code&gt; &lt;/a&gt;方法は、読み取りまたはファイルの所有者を更新するために使用されてもよいです。</target>
        </trans-unit>
        <trans-unit id="73d3f705da9ee89357307dce73865b84f0d0035f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filer&quot;&gt;&lt;code&gt;Filer&lt;/code&gt;&lt;/a&gt; interface discusses restrictions on how processors can operate on files.</source>
          <target state="translated">&lt;a href=&quot;filer&quot;&gt; &lt;code&gt;Filer&lt;/code&gt; &lt;/a&gt;インタフェースは、プロセッサがファイルを操作する方法の制限について説明します。</target>
        </trans-unit>
        <trans-unit id="b4b3f7c632fcbbe9935cc6379723468392ffc252" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filestore#supportsFileAttributeView-java.lang.String-&quot;&gt;&lt;code&gt;supportsFileAttributeView(String)&lt;/code&gt;&lt;/a&gt; method may be used to test if an underlying &lt;a href=&quot;filestore&quot;&gt;&lt;code&gt;FileStore&lt;/code&gt;&lt;/a&gt; supports the file attributes identified by a file attribute view.</source>
          <target state="translated">&lt;a href=&quot;filestore#supportsFileAttributeView-java.lang.String-&quot;&gt; &lt;code&gt;supportsFileAttributeView(String)&lt;/code&gt; を&lt;/a&gt;基本となる場合の方法は、テストに使用できる&lt;a href=&quot;filestore&quot;&gt; &lt;code&gt;FileStore&lt;/code&gt; &lt;/a&gt;、ファイル属性ビューで識別されるファイル属性をサポートしています。</target>
        </trans-unit>
        <trans-unit id="f8cb4d9733bf198a655b4589202cc06dace82870" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#getFileStores--&quot;&gt;&lt;code&gt;getFileStores&lt;/code&gt;&lt;/a&gt; method returns an iterator over the underlying &lt;a href=&quot;filestore&quot;&gt;&lt;code&gt;file-stores&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;filesystem#getFileStores--&quot;&gt; &lt;code&gt;getFileStores&lt;/code&gt; の&lt;/a&gt;方法は、基礎の反復子を返し&lt;a href=&quot;filestore&quot;&gt; &lt;code&gt;file-stores&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cfd644bf38b0bb664dee5219ee6298f48860e300" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt; method converts a system dependent &lt;em&gt;path string&lt;/em&gt;, returning a &lt;a href=&quot;path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; object that may be used to locate and access a file.</source>
          <target state="translated">&lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; &lt;/a&gt;方法は、システムに依存する変換&lt;em&gt;パス文字列を&lt;/em&gt;返す、&lt;a href=&quot;path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;ファイルを見つけてアクセスするために使用することができるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="85bb054fbeaeb496dcbb5f7913fdc2da38a5d8df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#getPathMatcher-java.lang.String-&quot;&gt;&lt;code&gt;getPathMatcher&lt;/code&gt;&lt;/a&gt; method is used to create a &lt;a href=&quot;pathmatcher&quot;&gt;&lt;code&gt;PathMatcher&lt;/code&gt;&lt;/a&gt; that performs match operations on paths.</source>
          <target state="translated">&lt;a href=&quot;filesystem#getPathMatcher-java.lang.String-&quot;&gt; &lt;code&gt;getPathMatcher&lt;/code&gt; &lt;/a&gt;方法を作成するために使用され&lt;a href=&quot;pathmatcher&quot;&gt; &lt;code&gt;PathMatcher&lt;/code&gt; &lt;/a&gt;実行がパス上の操作と一致していることを。</target>
        </trans-unit>
        <trans-unit id="5a69e75d4d560b20f800838bf2f2879aa7b27302" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#getUserPrincipalLookupService--&quot;&gt;&lt;code&gt;getUserPrincipalLookupService&lt;/code&gt;&lt;/a&gt; method returns the &lt;a href=&quot;attribute/userprincipallookupservice&quot;&gt;&lt;code&gt;UserPrincipalLookupService&lt;/code&gt;&lt;/a&gt; to lookup users or groups by name.</source>
          <target state="translated">&lt;a href=&quot;filesystem#getUserPrincipalLookupService--&quot;&gt; &lt;code&gt;getUserPrincipalLookupService&lt;/code&gt; の&lt;/a&gt;方法は返し&lt;a href=&quot;attribute/userprincipallookupservice&quot;&gt; &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; &lt;/a&gt;名前でユーザーまたはグループを検索するために。</target>
        </trans-unit>
        <trans-unit id="6f447288e7932d315836b220e40a38ac2e592a02" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#newWatchService--&quot;&gt;&lt;code&gt;newWatchService&lt;/code&gt;&lt;/a&gt; method creates a &lt;a href=&quot;watchservice&quot;&gt;&lt;code&gt;WatchService&lt;/code&gt;&lt;/a&gt; that may be used to watch objects for changes and events.</source>
          <target state="translated">&lt;a href=&quot;filesystem#newWatchService--&quot;&gt; &lt;code&gt;newWatchService&lt;/code&gt; の&lt;/a&gt;方法は、作成&lt;a href=&quot;watchservice&quot;&gt; &lt;code&gt;WatchService&lt;/code&gt; &lt;/a&gt;の変更やイベントのためのオブジェクトを監視するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="0df1d883900393179ef6a938286fb977dcd966a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;formatter#format-java.util.Locale-java.lang.String-java.lang.Object...-&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; method for this object which has a locale argument does not change this value.</source>
          <target state="translated">ロケール引数を持つこのオブジェクトの&lt;a href=&quot;formatter#format-java.util.Locale-java.lang.String-java.lang.Object...-&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt;メソッドは、この値を変更しません。</target>
        </trans-unit>
        <trans-unit id="e68fc7c4ce0ce129079a142bdf3e6ba5e50c5128" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;futuretask&quot;&gt;&lt;code&gt;FutureTask&lt;/code&gt;&lt;/a&gt; class is an implementation of &lt;code&gt;Future&lt;/code&gt; that implements &lt;code&gt;Runnable&lt;/code&gt;, and so may be executed by an &lt;code&gt;Executor&lt;/code&gt;. For example, the above construction with &lt;code&gt;submit&lt;/code&gt; could be replaced by:</source>
          <target state="translated">&lt;a href=&quot;futuretask&quot;&gt; &lt;code&gt;FutureTask&lt;/code&gt; の&lt;/a&gt;クラスが実装され &lt;code&gt;Future&lt;/code&gt; 実装する &lt;code&gt;Runnable&lt;/code&gt; などにより実行されてもよい &lt;code&gt;Executor&lt;/code&gt; 。たとえば、上記の &lt;code&gt;submit&lt;/code&gt; を使用した構成は、次のように置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="761513f2b0bbba586605e4294850b23aff51188d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;imagereader#getSourceRegion-javax.imageio.ImageReadParam-int-int-&quot;&gt;&lt;code&gt;getSourceRegion&amp;gt;&lt;/code&gt;&lt;/a&gt; method may be used if only source clipping is desired.</source>
          <target state="translated">ソースのクリッピングのみが必要な場合は、&lt;a href=&quot;imagereader#getSourceRegion-javax.imageio.ImageReadParam-int-int-&quot;&gt; &lt;code&gt;getSourceRegion&amp;gt;&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="1eedddde68bb46978d525f7790711dd02e0ebfc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inet6address#lform&quot;&gt;full uncompressed form&lt;/a&gt; of an IPv6 literal address is also valid.</source>
          <target state="translated">&lt;a href=&quot;inet6address#lform&quot;&gt;完全な非圧縮形式&lt;/a&gt;のIPv6リテラルアドレスのも有効です。</target>
        </trans-unit>
        <trans-unit id="89aa71069d9b64ba38bde1b7ed22da8a98a99b64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inetaddress&quot;&gt;&lt;code&gt;InetAddress&lt;/code&gt;&lt;/a&gt; class is the abstraction representing an IP (Internet Protocol) address. It has two subclasses:</source>
          <target state="translated">&lt;a href=&quot;inetaddress&quot;&gt; &lt;code&gt;InetAddress&lt;/code&gt; のの&lt;/a&gt;クラスは、IP（Internet Protocol）アドレスを表す抽象概念です。これには2つのサブクラスがあります。</target>
        </trans-unit>
        <trans-unit id="63af60ec9959bd5779b0337a24c9f2bd2daa5ff3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;japaneseera#SHOWA&quot;&gt;&lt;code&gt;SHOWA&lt;/code&gt;&lt;/a&gt; era that contains 1970-01-01 (ISO calendar system) has the value 1 Later era is numbered 2 (&lt;a href=&quot;japaneseera#HEISEI&quot;&gt;&lt;code&gt;HEISEI&lt;/code&gt;&lt;/a&gt;). Earlier eras are numbered 0 (&lt;a href=&quot;japaneseera#TAISHO&quot;&gt;&lt;code&gt;TAISHO&lt;/code&gt;&lt;/a&gt;), -1 (&lt;a href=&quot;japaneseera#MEIJI&quot;&gt;&lt;code&gt;MEIJI&lt;/code&gt;&lt;/a&gt;), only Meiji and later eras are supported.</source>
          <target state="translated">&lt;a href=&quot;japaneseera#SHOWA&quot;&gt; &lt;code&gt;SHOWA&lt;/code&gt; &lt;/a&gt; 1970-01-01（ISOカレンダシステム）が含ま時代2（番号付けされている値1後で時代有する&lt;a href=&quot;japaneseera#HEISEI&quot;&gt; &lt;code&gt;HEISEI&lt;/code&gt; &lt;/a&gt;）。初期の年号には0（&lt;a href=&quot;japaneseera#TAISHO&quot;&gt; &lt;code&gt;TAISHO&lt;/code&gt; &lt;/a&gt;）、-1（&lt;a href=&quot;japaneseera#MEIJI&quot;&gt; &lt;code&gt;MEIJI&lt;/code&gt; &lt;/a&gt;）の番号が付けられ、明治以降の年号のみがサポートされます。</target>
        </trans-unit>
        <trans-unit id="5ad4c9f7c1d38ff17eed005c539f21753e0ecc72" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;japaneseera#SHOWA&quot;&gt;&lt;code&gt;SHOWA&lt;/code&gt;&lt;/a&gt; era that contains 1970-01-01 (ISO calendar system) has the value 1. Later eras are numbered from 2 (&lt;a href=&quot;japaneseera#HEISEI&quot;&gt;&lt;code&gt;HEISEI&lt;/code&gt;&lt;/a&gt;). Earlier eras are numbered 0 (&lt;a href=&quot;japaneseera#TAISHO&quot;&gt;&lt;code&gt;TAISHO&lt;/code&gt;&lt;/a&gt;), -1 (&lt;a href=&quot;japaneseera#MEIJI&quot;&gt;&lt;code&gt;MEIJI&lt;/code&gt;&lt;/a&gt;)).</source>
          <target state="translated">&lt;a href=&quot;japaneseera#SHOWA&quot;&gt; &lt;code&gt;SHOWA&lt;/code&gt; &lt;/a&gt; 1970-01-01（ISOカレンダーシステム）が含ま時代は1.後の時代には2（から番号付けされた値がある&lt;a href=&quot;japaneseera#HEISEI&quot;&gt; &lt;code&gt;HEISEI&lt;/code&gt; &lt;/a&gt;）。初期の時代には0（&lt;a href=&quot;japaneseera#TAISHO&quot;&gt; &lt;code&gt;TAISHO&lt;/code&gt; &lt;/a&gt;）、-1（&lt;a href=&quot;japaneseera#MEIJI&quot;&gt; &lt;code&gt;MEIJI&lt;/code&gt; &lt;/a&gt;）と番号が付けられます。</target>
        </trans-unit>
        <trans-unit id="53e05d8dddbec45eaf69a1abeb3e0b1d8a3d4dde" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;linkedhashmap#removeEldestEntry-java.util.Map.Entry-&quot;&gt;&lt;code&gt;removeEldestEntry(Map.Entry)&lt;/code&gt;&lt;/a&gt; method may be overridden to impose a policy for removing stale mappings automatically when new mappings are added to the map.</source>
          <target state="translated">&lt;a href=&quot;linkedhashmap#removeEldestEntry-java.util.Map.Entry-&quot;&gt; &lt;code&gt;removeEldestEntry(Map.Entry)&lt;/code&gt; &lt;/a&gt;メソッドは、新しいマッピングがマップに追加されたときに自動的に失効マッピングを除去するためのポリシーを課すことをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="685e9f05827cafac5b9700afb54eb83f6c776e78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; interface supports locking disciplines that differ in semantics (reentrant, fair, etc), and that can be used in non-block-structured contexts including hand-over-hand and lock reordering algorithms. The main implementation is &lt;a href=&quot;reentrantlock&quot;&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt;インターフェースセマンティクス（リエントラント、フェアなど）が異なる分野を固定支持し、それがハンドオーバーハンドロック並べ替えアルゴリズムを含む非ブロック構造のコンテキストで使用することができます。主な実装は&lt;a href=&quot;reentrantlock&quot;&gt; &lt;code&gt;ReentrantLock&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="3180b0ec0d45d09638da4a7e022ef32c09072ff6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;managementfactory&quot;&gt;&lt;code&gt;ManagementFactory&lt;/code&gt;&lt;/a&gt; class is the management factory class for the Java platform. This class provides a set of static factory methods to obtain the MXBeans for the Java platform to allow an application to access the MXBeans directly.</source>
          <target state="translated">&lt;a href=&quot;managementfactory&quot;&gt; &lt;code&gt;ManagementFactory&lt;/code&gt; に&lt;/a&gt;クラスは、Javaプラットフォームの管理ファクトリクラスです。このクラスは、JavaプラットフォームのMXBeanを取得して、アプリケーションがMXBeanに直接アクセスできるようにする一連の静的ファクトリメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="6aee927bc4b4fd7e8464ec83c8eda0aa86fccfbd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;managementfactory#getPlatformManagementInterfaces--&quot;&gt;&lt;code&gt;getPlatformManagementInterfaces&lt;/code&gt;&lt;/a&gt; method returns all management interfaces supported in the Java virtual machine including the standard management interfaces listed in the tables below as well as the management interfaces extended by the JDK implementation.</source>
          <target state="translated">&lt;a href=&quot;managementfactory#getPlatformManagementInterfaces--&quot;&gt; &lt;code&gt;getPlatformManagementInterfaces&lt;/code&gt; &lt;/a&gt;メソッドは、Java仮想マシンでサポートされるすべての管理インターフェースを返します。これには、以下の表にリストされている標準管理インターフェースや、JDK実装によって拡張された管理インターフェースが含まれます。</target>
        </trans-unit>
        <trans-unit id="c882421782dfc7080f4d7ba69c0672ccbaee2976" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;matcher#find--&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; method scans the input sequence looking for the next subsequence that matches the pattern.</source>
          <target state="translated">&lt;a href=&quot;matcher#find--&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt;方法は、パターンに一致する次のサブシーケンスを探して入力シーケンスをスキャンします。</target>
        </trans-unit>
        <trans-unit id="f8f9d8ffa3354e5ea114ec9c9eecd670dfa20d2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;matcher#lookingAt--&quot;&gt;&lt;code&gt;lookingAt&lt;/code&gt;&lt;/a&gt; method attempts to match the input sequence, starting at the beginning, against the pattern.</source>
          <target state="translated">&lt;a href=&quot;matcher#lookingAt--&quot;&gt; &lt;code&gt;lookingAt&lt;/code&gt; &lt;/a&gt;入力シーケンスにマッチする方法を試み、パターンに対して、先頭から始まります。</target>
        </trans-unit>
        <trans-unit id="81a4840468c5585768ffd0339442ff61c0e3f495" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;matcher#matches--&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method attempts to match the entire input sequence against the pattern.</source>
          <target state="translated">&lt;a href=&quot;matcher#matches--&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;パターンに対する全入力配列と一致するメソッドの試みを。</target>
        </trans-unit>
        <trans-unit id="3b536101e87b34402f5a75ef5e45b85b8065447c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;memorypoolmxbean#getUsage--&quot;&gt;&lt;code&gt;getUsage()&lt;/code&gt;&lt;/a&gt; method provides an estimate of the current usage of a memory pool. For a garbage-collected memory pool, the amount of used memory includes the memory occupied by all objects in the pool including both &lt;em&gt;reachable&lt;/em&gt; and &lt;em&gt;unreachable&lt;/em&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;memorypoolmxbean#getUsage--&quot;&gt; &lt;code&gt;getUsage()&lt;/code&gt; &lt;/a&gt;メソッドは、メモリ・プールの現在の使用量の推定値を提供します。ガベージコレクションされたメモリプールの場合、使用されるメモリの量には、&lt;em&gt;到達可能&lt;/em&gt;オブジェクトと&lt;em&gt;到達不能&lt;/em&gt;オブジェクトの両方を含む、プール内のすべてのオブジェクトが占めるメモリが含まれます。</target>
        </trans-unit>
        <trans-unit id="2917cba2196f42068511cb8866976f8cefd8ba43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;memorypoolmxbean#isCollectionUsageThresholdSupported--&quot;&gt;&lt;code&gt;isCollectionUsageThresholdSupported()&lt;/code&gt;&lt;/a&gt; method can be used to determine if this functionality is supported.</source>
          <target state="translated">&lt;a href=&quot;memorypoolmxbean#isCollectionUsageThresholdSupported--&quot;&gt; &lt;code&gt;isCollectionUsageThresholdSupported()&lt;/code&gt; &lt;/a&gt;メソッドは、この機能がサポートされているかどうかを決定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="00777c593762897a62ff30f882e9e994e0fd4435" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;methodhandles.lookup#lookups&quot;&gt;Lookup Factory Methods&lt;/a&gt; correspond to all major use cases for methods, constructors, and fields. These use cases may be distinguished using small integers as follows:</source>
          <target state="translated">&lt;a href=&quot;methodhandles.lookup#lookups&quot;&gt;検索ファクトリーメソッドは、&lt;/a&gt;メソッド、コンストラクタ、およびフィールドのすべての主要なユースケースに対応しています。これらの使用例は、次のように小さな整数を使用して区別できます。</target>
        </trans-unit>
        <trans-unit id="803a5dc5363ca39a6c192f06387b9fe75f794ba3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;multicastchannel#join-java.net.InetAddress-java.net.NetworkInterface-&quot;&gt;&lt;code&gt;join(InetAddress,NetworkInterface)&lt;/code&gt;&lt;/a&gt; method is used to join a group and receive all multicast datagrams sent to the group. A channel may join several multicast groups and may join the same group on several &lt;a href=&quot;../../net/networkinterface&quot;&gt;&lt;code&gt;interfaces&lt;/code&gt;&lt;/a&gt;. Membership is dropped by invoking the &lt;a href=&quot;membershipkey#drop--&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; method on the returned &lt;a href=&quot;membershipkey&quot;&gt;&lt;code&gt;MembershipKey&lt;/code&gt;&lt;/a&gt;. If the underlying platform supports source filtering then the &lt;a href=&quot;membershipkey#block-java.net.InetAddress-&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;membershipkey#unblock-java.net.InetAddress-&quot;&gt;&lt;code&gt;unblock&lt;/code&gt;&lt;/a&gt; methods can be used to block or unblock multicast datagrams from particular source addresses.</source>
          <target state="translated">&lt;a href=&quot;multicastchannel#join-java.net.InetAddress-java.net.NetworkInterface-&quot;&gt; &lt;code&gt;join(InetAddress,NetworkInterface)&lt;/code&gt; &lt;/a&gt;メソッドは、グループに参加し、グループに送信されたすべてのマルチキャストデータグラムを受信するために使用されます。チャネルは、複数のマルチキャストグループに参加したり、複数の&lt;a href=&quot;../../net/networkinterface&quot;&gt; &lt;code&gt;interfaces&lt;/code&gt; &lt;/a&gt;上の同じグループに参加したりできます。メンバーシップは、返された&lt;a href=&quot;membershipkey&quot;&gt; &lt;code&gt;MembershipKey&lt;/code&gt; で&lt;/a&gt;&lt;a href=&quot;membershipkey#drop--&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって削除されます。基盤となるプラットフォームがソースフィルタリングをサポートしている場合、&lt;a href=&quot;membershipkey#block-java.net.InetAddress-&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt;メソッドと&lt;a href=&quot;membershipkey#unblock-java.net.InetAddress-&quot;&gt; &lt;code&gt;unblock&lt;/code&gt; &lt;/a&gt;メソッドを使用して、特定のソースアドレスからのマルチキャストデータグラムをブロックまたはブロック解除できます。</target>
        </trans-unit>
        <trans-unit id="586959a334aab9367192bda3b22ae8905ccfbfb5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;multicastchannel#join-java.net.InetAddress-java.net.NetworkInterface-java.net.InetAddress-&quot;&gt;&lt;code&gt;join(InetAddress,NetworkInterface,InetAddress)&lt;/code&gt;&lt;/a&gt; method is used to begin receiving datagrams sent to a group whose source address matches a given source address. This method throws &lt;a href=&quot;../../lang/unsupportedoperationexception&quot;&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt;&lt;/a&gt; if the underlying platform does not support source filtering. Membership is &lt;em&gt;cumulative&lt;/em&gt; and this method may be invoked again with the same group and interface to allow receiving datagrams from other source addresses. The method returns a &lt;a href=&quot;membershipkey&quot;&gt;&lt;code&gt;MembershipKey&lt;/code&gt;&lt;/a&gt; that represents membership to receive datagrams from the given source address. Invoking the key's &lt;a href=&quot;membershipkey#drop--&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; method drops membership so that datagrams from the source address can no longer be received.</source>
          <target state="translated">&lt;a href=&quot;multicastchannel#join-java.net.InetAddress-java.net.NetworkInterface-java.net.InetAddress-&quot;&gt; &lt;code&gt;join(InetAddress,NetworkInterface,InetAddress)&lt;/code&gt; &lt;/a&gt;方法は、その元アドレス指定された送信元アドレスと一致するグループに送信されたデータグラムの受信を開始するために使用されます。基盤となるプラットフォームがソースフィルタリングをサポートしてい&lt;a href=&quot;../../lang/unsupportedoperationexception&quot;&gt; &lt;code&gt;UnsupportedOperationException&lt;/code&gt; &lt;/a&gt;場合、このメソッドはUnsupportedOperationExceptionをスローします。メンバーシップは&lt;em&gt;累積的で&lt;/em&gt;あり、このメソッドを同じグループとインターフェイスで再度呼び出して、他の送信元アドレスからデータグラムを受信できるようにすることができます。このメソッドは、指定された送信元アドレスからデータグラムを受信するための&lt;a href=&quot;membershipkey&quot;&gt; &lt;code&gt;MembershipKey&lt;/code&gt; &lt;/a&gt;を表すMembershipKeyを返します。キーの&lt;a href=&quot;membershipkey#drop--&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すと、メンバーシップが削除され、送信元アドレスからのデータグラムを受信できなくなります。</target>
        </trans-unit>
        <trans-unit id="ea1666c946dbc92e3963a08d51b7fe1ff2e05b97" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;mutablecallsite#syncAll-java.lang.invoke.MutableCallSite:A-&quot;&gt;&lt;code&gt;syncAll&lt;/code&gt;&lt;/a&gt; operation provides a way to force threads to accept a new target value, even if there is no other synchronization.</source>
          <target state="translated">&lt;a href=&quot;mutablecallsite#syncAll-java.lang.invoke.MutableCallSite:A-&quot;&gt; &lt;code&gt;syncAll&lt;/code&gt; の&lt;/a&gt;操作は、他の同期がない場合でも、新たな目標値を受け入れるようにスレッドを強制する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="86bc696e481ab25ea679a816f2b2344f73e99298" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;networkchannel&quot;&gt;&lt;code&gt;NetworkChannel&lt;/code&gt;&lt;/a&gt; interface specifies methods to &lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; the channel's socket, obtain the address to which the socket is bound, and methods to &lt;a href=&quot;networkchannel#getOption-java.net.SocketOption-&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;networkchannel#setOption-java.net.SocketOption-T-&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; socket options. The &lt;a href=&quot;multicastchannel&quot;&gt;&lt;code&gt;MulticastChannel&lt;/code&gt;&lt;/a&gt; interface specifies methods to join Internet Protocol (IP) multicast groups.</source>
          <target state="translated">&lt;a href=&quot;networkchannel&quot;&gt; &lt;code&gt;NetworkChannel&lt;/code&gt; &lt;/a&gt;インタフェースの指定方法がする&lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;、チャネルのソケットをソケットがバインドされているアドレスを取得し、方法はする&lt;a href=&quot;networkchannel#getOption-java.net.SocketOption-&quot;&gt; &lt;code&gt;get&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;networkchannel#setOption-java.net.SocketOption-T-&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;ソケットオプション。&lt;a href=&quot;multicastchannel&quot;&gt; &lt;code&gt;MulticastChannel&lt;/code&gt; の&lt;/a&gt;インタフェースの指定方法は、インターネットプロトコル（IP）マルチキャストグループに参加します。</target>
        </trans-unit>
        <trans-unit id="97e5a8c6cebdfee9806373945502b19fe12625e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;networkchannel#setOption-java.net.SocketOption-T-&quot;&gt;&lt;code&gt;setOption&lt;/code&gt;&lt;/a&gt; methods that do not otherwise have a value to return are specified to return the network channel upon which they are invoked. This allows method invocations to be chained. Implementations of this interface should specialize the return type so that method invocations on the implementation class can be chained.</source>
          <target state="translated">&lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;networkchannel#setOption-java.net.SocketOption-T-&quot;&gt; &lt;code&gt;setOption&lt;/code&gt; を&lt;/a&gt;戻り値を返さないものな方法は、それらが呼び出される時にネットワークチャネルを返すように指定されています。これにより、メソッド呼び出しを連鎖させることができます。このインターフェースの実装は、戻り値の型を特殊化して、実装クラスでのメソッド呼び出しをチェーンできるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="2aae4de2a8761dadc1703ebe8bd9d27e209c3303" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;networkinterface&quot;&gt;&lt;code&gt;NetworkInterface&lt;/code&gt;&lt;/a&gt; class provides APIs to browse and query all the networking interfaces (e.g. ethernet connection or PPP endpoint) of the local machine. It is through that class that you can check if any of the local interfaces is configured to support IPv6.</source>
          <target state="translated">&lt;a href=&quot;networkinterface&quot;&gt; &lt;code&gt;NetworkInterface&lt;/code&gt; &lt;/a&gt;クラスは、ローカルマシンのすべてのネットワークインタフェース（例えば、イーサネット接続またはPPP端点）をブラウズし、クエリするためのAPIを提供します。そのクラスを通じて、ローカルインターフェースのいずれかがIPv6をサポートするように構成されているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="1d4398a2182ad9d3d156c72bc1e1b46b563498d0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;openmbeanconstructorinfo#getSignature--&quot;&gt;&lt;code&gt;getSignature()&lt;/code&gt;&lt;/a&gt; method should return at runtime an array of instances of a subclass of &lt;a href=&quot;../mbeanparameterinfo&quot;&gt;&lt;code&gt;MBeanParameterInfo&lt;/code&gt;&lt;/a&gt; which implements the &lt;a href=&quot;openmbeanparameterinfo&quot;&gt;&lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt;&lt;/a&gt; interface (typically &lt;a href=&quot;openmbeanparameterinfosupport&quot;&gt;&lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;openmbeanconstructorinfo#getSignature--&quot;&gt; &lt;code&gt;getSignature()&lt;/code&gt; &lt;/a&gt;メソッドは、実行時のサブクラスのインスタンスの配列を返す必要があり&lt;a href=&quot;../mbeanparameterinfo&quot;&gt; &lt;code&gt;MBeanParameterInfo&lt;/code&gt; &lt;/a&gt;実装&lt;a href=&quot;openmbeanparameterinfo&quot;&gt; &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; の&lt;/a&gt;インタフェース（通常&lt;a href=&quot;openmbeanparameterinfosupport&quot;&gt; &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="ce3b1f0ce29ed84d089633cd109fcedd10fa19a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;openmbeaninfo#getAttributes--&quot;&gt;&lt;code&gt;getAttributes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;openmbeaninfo#getOperations--&quot;&gt;&lt;code&gt;getOperations()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;openmbeaninfo#getConstructors--&quot;&gt;&lt;code&gt;getConstructors()&lt;/code&gt;&lt;/a&gt; methods of the implementing class should return at runtime an array of instances of a subclass of &lt;a href=&quot;../mbeanattributeinfo&quot;&gt;&lt;code&gt;MBeanAttributeInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../mbeanoperationinfo&quot;&gt;&lt;code&gt;MBeanOperationInfo&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../mbeanconstructorinfo&quot;&gt;&lt;code&gt;MBeanConstructorInfo&lt;/code&gt;&lt;/a&gt; respectively which implement the &lt;a href=&quot;openmbeanattributeinfo&quot;&gt;&lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;openmbeanoperationinfo&quot;&gt;&lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;openmbeanconstructorinfo&quot;&gt;&lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt;&lt;/a&gt; interface respectively.</source>
          <target state="translated">実装クラスの&lt;a href=&quot;openmbeaninfo#getAttributes--&quot;&gt; &lt;code&gt;getAttributes()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;openmbeaninfo#getOperations--&quot;&gt; &lt;code&gt;getOperations()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;openmbeaninfo#getConstructors--&quot;&gt; &lt;code&gt;getConstructors()&lt;/code&gt; &lt;/a&gt;メソッドは、実行時に、それぞれ&lt;a href=&quot;openmbeanattributeinfo&quot;&gt; &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;openmbeanoperationinfo&quot;&gt; &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;openmbeanconstructorinfo&quot;&gt; &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; &lt;/a&gt;インターフェースを実装する&lt;a href=&quot;../mbeanattributeinfo&quot;&gt; &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../mbeanoperationinfo&quot;&gt; &lt;code&gt;MBeanOperationInfo&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;../mbeanconstructorinfo&quot;&gt; &lt;code&gt;MBeanConstructorInfo&lt;/code&gt; の&lt;/a&gt;サブクラスのインスタンスの配列を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="fc59af9de6b925c7a001de9e0cda1335db8b9216" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;openmbeanoperationinfo#getSignature--&quot;&gt;&lt;code&gt;getSignature()&lt;/code&gt;&lt;/a&gt; method should return at runtime an array of instances of a subclass of &lt;a href=&quot;../mbeanparameterinfo&quot;&gt;&lt;code&gt;MBeanParameterInfo&lt;/code&gt;&lt;/a&gt; which implements the &lt;a href=&quot;openmbeanparameterinfo&quot;&gt;&lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt;&lt;/a&gt; interface (typically &lt;a href=&quot;openmbeanparameterinfosupport&quot;&gt;&lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;openmbeanoperationinfo#getSignature--&quot;&gt; &lt;code&gt;getSignature()&lt;/code&gt; &lt;/a&gt;メソッドは、実行時のサブクラスのインスタンスの配列を返す必要があり&lt;a href=&quot;../mbeanparameterinfo&quot;&gt; &lt;code&gt;MBeanParameterInfo&lt;/code&gt; &lt;/a&gt;実装&lt;a href=&quot;openmbeanparameterinfo&quot;&gt; &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; の&lt;/a&gt;インタフェース（通常&lt;a href=&quot;openmbeanparameterinfosupport&quot;&gt; &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="4744c29d66c9935d41a7b7e162f4709ec4bf036a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posixfileattributes#permissions--&quot;&gt;&lt;code&gt;permissions&lt;/code&gt;&lt;/a&gt; attribute is a set of access permissions. This file attribute view provides access to the nine permission defined by the &lt;a href=&quot;posixfilepermission&quot;&gt;&lt;code&gt;PosixFilePermission&lt;/code&gt;&lt;/a&gt; class. These nine permission bits determine the &lt;em&gt;read&lt;/em&gt;, &lt;em&gt;write&lt;/em&gt;, and &lt;em&gt;execute&lt;/em&gt; access for the file owner, group, and others (others meaning identities other than the owner and members of the group). Some operating systems and file systems may provide additional permission bits but access to these other bits is not defined by this class in this release.</source>
          <target state="translated">&lt;a href=&quot;posixfileattributes#permissions--&quot;&gt; &lt;code&gt;permissions&lt;/code&gt; &lt;/a&gt;属性は、アクセス許可のセットです。このファイル属性ビューは、&lt;a href=&quot;posixfilepermission&quot;&gt; &lt;code&gt;PosixFilePermission&lt;/code&gt; &lt;/a&gt;クラスで定義された9つの権限へのアクセスを提供します。これらの9つの許可ビットは、ファイルの所有者、グループ、およびその他（その他の所有者およびグループのメンバー以外のIDを意味する）の&lt;em&gt;読み取り&lt;/em&gt;、&lt;em&gt;書き込み&lt;/em&gt;、および&lt;em&gt;実行&lt;/em&gt;アクセスを決定します。一部のオペレーティングシステムとファイルシステムは追加の許可ビットを提供する場合がありますが、これらの他のビットへのアクセスは、このリリースのこのクラスでは定義されていません。</target>
        </trans-unit>
        <trans-unit id="9d75e18b4bb9f537656575df11977b7323415855" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt; interface extends &lt;code&gt;BasicFileAttributeView&lt;/code&gt; by defining methods to access the file attributes commonly used by file systems and operating systems that implement the Portable Operating System Interface (POSIX) family of standards.</source>
          <target state="translated">&lt;a href=&quot;posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; の&lt;/a&gt;インタフェースは、拡張 &lt;code&gt;BasicFileAttributeView&lt;/code&gt; を一般の規格のポータブルオペレーティングシステムインタフェース（POSIX）ファミリを実装するファイルシステムおよびオペレーティングシステムで使用されるファイル属性にアクセスするためのメソッドを定義することによって。</target>
        </trans-unit>
        <trans-unit id="6738d407658008666bc1a5053dfbc19962272b6f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posixfileattributeview#readAttributes--&quot;&gt;&lt;code&gt;readAttributes&lt;/code&gt;&lt;/a&gt; method is used to read the file's attributes. The file &lt;a href=&quot;posixfileattributes#owner--&quot;&gt;&lt;code&gt;owner&lt;/code&gt;&lt;/a&gt; is represented by a &lt;a href=&quot;userprincipal&quot;&gt;&lt;code&gt;UserPrincipal&lt;/code&gt;&lt;/a&gt; that is the identity of the file owner for the purposes of access control. The &lt;a href=&quot;posixfileattributes#group--&quot;&gt;&lt;code&gt;group-owner&lt;/code&gt;&lt;/a&gt;, represented by a &lt;a href=&quot;groupprincipal&quot;&gt;&lt;code&gt;GroupPrincipal&lt;/code&gt;&lt;/a&gt;, is the identity of the group owner, where a group is an identity created for administrative purposes so as to determine the access rights for the members of the group.</source>
          <target state="translated">&lt;a href=&quot;posixfileattributeview#readAttributes--&quot;&gt; &lt;code&gt;readAttributes&lt;/code&gt; の&lt;/a&gt;方法は、ファイルの属性を読み取るために使用されます。ファイル&lt;a href=&quot;posixfileattributes#owner--&quot;&gt; &lt;code&gt;owner&lt;/code&gt; &lt;/a&gt;は、アクセス制御のためのファイル所有者のIDである&lt;a href=&quot;userprincipal&quot;&gt; &lt;code&gt;UserPrincipal&lt;/code&gt; &lt;/a&gt;によって表されます。&lt;a href=&quot;posixfileattributes#group--&quot;&gt; &lt;code&gt;group-owner&lt;/code&gt; &lt;/a&gt;で表される、&lt;a href=&quot;groupprincipal&quot;&gt; &lt;code&gt;GroupPrincipal&lt;/code&gt; は&lt;/a&gt;、グループは、グループのメンバーのアクセス権を決定するために、管理目的のために作成されたアイデンティティであるグループの所有者のアイデンティティです。</target>
        </trans-unit>
        <trans-unit id="f5cae7f82ee146d950bad36b2028281d1616c695" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posixfilepermissions&quot;&gt;&lt;code&gt;PosixFilePermissions&lt;/code&gt;&lt;/a&gt; class defines methods for manipulating set of permissions.</source>
          <target state="translated">&lt;a href=&quot;posixfilepermissions&quot;&gt; &lt;code&gt;PosixFilePermissions&lt;/code&gt; の&lt;/a&gt;クラスには、アクセス権のセットを操作するための方法を定義します。</target>
        </trans-unit>
        <trans-unit id="1c860f3bbab8e3f481494dd988c7bd96d51b73be" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;processbuilder#start--&quot;&gt;&lt;code&gt;ProcessBuilder.start()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;runtime#exec-java.lang.String:A-java.lang.String:A-java.io.File-&quot;&gt;&lt;code&gt;Runtime.exec&lt;/code&gt;&lt;/a&gt; methods create a native process and return an instance of a subclass of &lt;code&gt;Process&lt;/code&gt; that can be used to control the process and obtain information about it.</source>
          <target state="translated">&lt;a href=&quot;processbuilder#start--&quot;&gt; &lt;code&gt;ProcessBuilder.start()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;runtime#exec-java.lang.String:A-java.lang.String:A-java.io.File-&quot;&gt; &lt;code&gt;Runtime.exec&lt;/code&gt; &lt;/a&gt;メソッドは、ネイティブなプロセスを作成してのサブクラスのインスタンスを返す &lt;code&gt;Process&lt;/code&gt; 工程を制御し、それについての情報を得るために使用することができます。</target>
        </trans-unit>
        <trans-unit id="b1cb6821609bfac1723d508b0bb91d2d757fd59e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;processbuilder#start--&quot;&gt;&lt;code&gt;ProcessBuilder.start()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;runtime#exec-java.lang.String:A-java.lang.String:A-java.io.File-&quot;&gt;&lt;code&gt;Runtime.exec&lt;/code&gt;&lt;/a&gt; methods create a native process and return an instance of a subclass of &lt;code&gt;Process&lt;/code&gt; that can be used to control the process and obtain information about it. The class &lt;code&gt;Process&lt;/code&gt; provides methods for performing input from the process, performing output to the process, waiting for the process to complete, checking the exit status of the process, and destroying (killing) the process.</source>
          <target state="translated">&lt;a href=&quot;processbuilder#start--&quot;&gt; &lt;code&gt;ProcessBuilder.start()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;runtime#exec-java.lang.String:A-java.lang.String:A-java.io.File-&quot;&gt; &lt;code&gt;Runtime.exec&lt;/code&gt; &lt;/a&gt;メソッドは、ネイティブなプロセスを作成してのサブクラスのインスタンスを返す &lt;code&gt;Process&lt;/code&gt; 工程を制御し、それについての情報を得るために使用することができます。クラス &lt;code&gt;Process&lt;/code&gt; は、プロセスからの入力の実行、プロセスへの出力の実行、プロセスの完了の待機、プロセスの終了ステータスのチェック、およびプロセスの破棄（強制終了）のためのメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="ea844c85f1e3f45d0fbdf528232a86e15887b986" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;properties#load-java.io.Reader-&quot;&gt;&lt;code&gt;load(Reader)&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/&lt;/code&gt;&lt;a href=&quot;properties#store-java.io.Writer-java.lang.String-&quot;&gt;&lt;code&gt;store(Writer, String)&lt;/code&gt;&lt;/a&gt; methods load and store properties from and to a character based stream in a simple line-oriented format specified below. The &lt;a href=&quot;properties#load-java.io.InputStream-&quot;&gt;&lt;code&gt;load(InputStream)&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/&lt;/code&gt;&lt;a href=&quot;properties#store-java.io.OutputStream-java.lang.String-&quot;&gt;&lt;code&gt;store(OutputStream, String)&lt;/code&gt;&lt;/a&gt; methods work the same way as the load(Reader)/store(Writer, String) pair, except the input/output stream is encoded in ISO 8859-1 character encoding. Characters that cannot be directly represented in this encoding can be written using Unicode escapes as defined in section 3.3 of</source>
          <target state="translated">&lt;a href=&quot;properties#load-java.io.Reader-&quot;&gt; &lt;code&gt;load(Reader)&lt;/code&gt; &lt;/a&gt; &lt;code&gt;/&lt;/code&gt; &lt;a href=&quot;properties#store-java.io.Writer-java.lang.String-&quot;&gt; &lt;code&gt;store(Writer, String)&lt;/code&gt; &lt;/a&gt;単純な行指向形式の文字ベースのストリームからとする方法ロードおよびストアのプロパティは、以下に指定しました。&lt;a href=&quot;properties#load-java.io.InputStream-&quot;&gt; &lt;code&gt;load(InputStream)&lt;/code&gt; &lt;/a&gt; &lt;code&gt;/&lt;/code&gt; &lt;a href=&quot;properties#store-java.io.OutputStream-java.lang.String-&quot;&gt; &lt;code&gt;store(OutputStream, String)&lt;/code&gt; &lt;/a&gt;の方法は、入力/出力ストリームがISO 8859-1文字エンコーディングでエンコードされている以外は、負荷（リーダ）/ストア（ライター、String）を対と同じように動作します。このエンコーディングで直接表現できない文字は、セクション3.3で定義されているUnicodeエスケープを使用して記述できます。</target>
        </trans-unit>
        <trans-unit id="43359c708823c69498cdd32a1f027924e4c33c67" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;properties#loadFromXML-java.io.InputStream-&quot;&gt;&lt;code&gt;loadFromXML(InputStream)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;properties#storeToXML-java.io.OutputStream-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;storeToXML(OutputStream, String, String)&lt;/code&gt;&lt;/a&gt; methods load and store properties in a simple XML format. By default the UTF-8 character encoding is used, however a specific encoding may be specified if required. Implementations are required to support UTF-8 and UTF-16 and may support other encodings. An XML properties document has the following DOCTYPE declaration:</source>
          <target state="translated">&lt;a href=&quot;properties#loadFromXML-java.io.InputStream-&quot;&gt; &lt;code&gt;loadFromXML(InputStream)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;properties#storeToXML-java.io.OutputStream-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;storeToXML(OutputStream, String, String)&lt;/code&gt; &lt;/a&gt;の単純なXML形式のメソッドのロードおよびストアのプロパティ。デフォルトではUTF-8文字エンコーディングが使用されますが、必要に応じて特定のエンコーディングを指定できます。実装はUTF-8およびUTF-16をサポートする必要があり、他のエンコーディングをサポートする場合があります。XMLプロパティドキュメントには、次のDOCTYPE宣言があります。</target>
        </trans-unit>
        <trans-unit id="f8f6297aee07864a86e2bb6a0ea3ccd94df49256" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;proxy#isProxyClass-java.lang.Class-&quot;&gt;&lt;code&gt;Proxy.isProxyClass&lt;/code&gt;&lt;/a&gt; method will return true if it is passed a proxy class-- a class returned by &lt;code&gt;Proxy.getProxyClass&lt;/code&gt; or the class of an object returned by &lt;code&gt;Proxy.newProxyInstance&lt;/code&gt;-- and false otherwise.</source>
          <target state="translated">&lt;a href=&quot;proxy#isProxyClass-java.lang.Class-&quot;&gt; &lt;code&gt;Proxy.isProxyClass&lt;/code&gt; の&lt;/a&gt;それはクラスclass--プロキシを渡された場合、メソッドはtrueを返しますによって返さ &lt;code&gt;Proxy.getProxyClass&lt;/code&gt; かによって返されたオブジェクトのクラス &lt;code&gt;Proxy.newProxyInstance&lt;/code&gt; -それ以外の場合はfalse。</target>
        </trans-unit>
        <trans-unit id="82b9b6df8d0389635e3baf324194adaf4d0a9535" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;queue#element--&quot;&gt;&lt;code&gt;element()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;queue#peek--&quot;&gt;&lt;code&gt;peek()&lt;/code&gt;&lt;/a&gt; methods return, but do not remove, the head of the queue.</source>
          <target state="translated">&lt;a href=&quot;queue#element--&quot;&gt; &lt;code&gt;element()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;queue#peek--&quot;&gt; &lt;code&gt;peek()&lt;/code&gt; &lt;/a&gt;メソッドは、キューの先頭を返しますが、削除しないでください。</target>
        </trans-unit>
        <trans-unit id="b3de824965777891d01ab953cb9a6bb37bc267d2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;queue#offer-E-&quot;&gt;&lt;code&gt;offer&lt;/code&gt;&lt;/a&gt; method inserts an element if possible, otherwise returning &lt;code&gt;false&lt;/code&gt;. This differs from the &lt;a href=&quot;collection#add-E-&quot;&gt;&lt;code&gt;Collection.add&lt;/code&gt;&lt;/a&gt; method, which can fail to add an element only by throwing an unchecked exception. The &lt;code&gt;offer&lt;/code&gt; method is designed for use when failure is a normal, rather than exceptional occurrence, for example, in fixed-capacity (or &quot;bounded&quot;) queues.</source>
          <target state="translated">&lt;a href=&quot;queue#offer-E-&quot;&gt; &lt;code&gt;offer&lt;/code&gt; &lt;/a&gt;可能であれば、方法はそれ以外の場合は戻って、要素を挿入 &lt;code&gt;false&lt;/code&gt; 。これは、チェックされていない例外をスローすることによってのみ要素の追加に失敗する可能性がある&lt;a href=&quot;collection#add-E-&quot;&gt; &lt;code&gt;Collection.add&lt;/code&gt; &lt;/a&gt;メソッドとは異なります。 &lt;code&gt;offer&lt;/code&gt; 障害はむしろ例外発生より、正常である場合の方法は、固定容量（または「有界」）キューに、例えば、使用のために設計されています。</target>
        </trans-unit>
        <trans-unit id="e8d4e252e82e3c4010bc6f24536b3c8e384a7a00" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;queue#remove--&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;queue#poll--&quot;&gt;&lt;code&gt;poll()&lt;/code&gt;&lt;/a&gt; methods remove and return the head of the queue. Exactly which element is removed from the queue is a function of the queue's ordering policy, which differs from implementation to implementation. The &lt;code&gt;remove()&lt;/code&gt; and &lt;code&gt;poll()&lt;/code&gt; methods differ only in their behavior when the queue is empty: the &lt;code&gt;remove()&lt;/code&gt; method throws an exception, while the &lt;code&gt;poll()&lt;/code&gt; method returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;queue#remove--&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;queue#poll--&quot;&gt; &lt;code&gt;poll()&lt;/code&gt; &lt;/a&gt;メソッドは、キューの先頭を削除して返します。キューから削除される要素は、キューの順序付けポリシーの機能であり、実装ごとに異なります。 &lt;code&gt;remove()&lt;/code&gt; と &lt;code&gt;poll()&lt;/code&gt; キューが空である場合の方法は、それらの動作のみが異なる： &lt;code&gt;remove()&lt;/code&gt; メソッドはしばらくの間、例外をスロー &lt;code&gt;poll()&lt;/code&gt; メソッドの戻り値 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78e6516c0dec9e8c202d246bc450ed434c84f25b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;readablebytechannel&quot;&gt;&lt;code&gt;ReadableByteChannel&lt;/code&gt;&lt;/a&gt; interface specifies a &lt;a href=&quot;readablebytechannel#read-java.nio.ByteBuffer-&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; method that reads bytes from the channel into a buffer; similarly, the &lt;a href=&quot;writablebytechannel&quot;&gt;&lt;code&gt;WritableByteChannel&lt;/code&gt;&lt;/a&gt; interface specifies a &lt;a href=&quot;writablebytechannel#write-java.nio.ByteBuffer-&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method that writes bytes from a buffer to the channel. The &lt;a href=&quot;bytechannel&quot;&gt;&lt;code&gt;ByteChannel&lt;/code&gt;&lt;/a&gt; interface unifies these two interfaces for the common case of channels that can both read and write bytes. The &lt;a href=&quot;seekablebytechannel&quot;&gt;&lt;code&gt;SeekableByteChannel&lt;/code&gt;&lt;/a&gt; interface extends the &lt;code&gt;ByteChannel&lt;/code&gt; interface with methods to &lt;a href=&quot;seekablebytechannel#position--&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;seekablebytechannel#position-long-&quot;&gt;&lt;code&gt;modify&lt;/code&gt;&lt;/a&gt; the channel's current position, and its &lt;a href=&quot;seekablebytechannel#size--&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;readablebytechannel&quot;&gt; &lt;code&gt;ReadableByteChannel&lt;/code&gt; の&lt;/a&gt;インタフェースを指定し&lt;a href=&quot;readablebytechannel#read-java.nio.ByteBuffer-&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;バッファへのチャネルからバイトを読み取る方法。同様に、&lt;a href=&quot;writablebytechannel&quot;&gt; &lt;code&gt;WritableByteChannel&lt;/code&gt; &lt;/a&gt;インターフェイスは、バッファーからチャネルにバイトを書き込む&lt;a href=&quot;writablebytechannel#write-java.nio.ByteBuffer-&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;メソッドを指定します。&lt;a href=&quot;bytechannel&quot;&gt; &lt;code&gt;ByteChannel&lt;/code&gt; の&lt;/a&gt;インターフェースは、読み出しと書き込みの両方がバイトができるチャネルの一般的なケースのためにこれら二つのインタフェースを統一します。&lt;a href=&quot;seekablebytechannel&quot;&gt; &lt;code&gt;SeekableByteChannel&lt;/code&gt; の&lt;/a&gt;インターフェースは延び &lt;code&gt;ByteChannel&lt;/code&gt; のにメソッドとのインターフェースを&lt;a href=&quot;seekablebytechannel#position--&quot;&gt; &lt;code&gt;query&lt;/code&gt; &lt;/a&gt;し、&lt;a href=&quot;seekablebytechannel#position-long-&quot;&gt; &lt;code&gt;modify&lt;/code&gt; &lt;/a&gt;チャネルの現在位置、およびその&lt;a href=&quot;seekablebytechannel#size--&quot;&gt; &lt;code&gt;size&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5c2ccfc4344d98344bac10a3d0beeebc75678f34" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;readwritelock&quot;&gt;&lt;code&gt;ReadWriteLock&lt;/code&gt;&lt;/a&gt; interface similarly defines locks that may be shared among readers but are exclusive to writers. Only a single implementation, &lt;a href=&quot;reentrantreadwritelock&quot;&gt;&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;&lt;/a&gt;, is provided, since it covers most standard usage contexts. But programmers may create their own implementations to cover nonstandard requirements.</source>
          <target state="translated">&lt;a href=&quot;readwritelock&quot;&gt; &lt;code&gt;ReadWriteLock&lt;/code&gt; の&lt;/a&gt;インターフェースは、同様に、読者の間で共有が、作家に排他的であることができるロックを定義します。ほとんどの標準的な使用コンテキストをカバーするため、単一の実装である&lt;a href=&quot;reentrantreadwritelock&quot;&gt; &lt;code&gt;ReentrantReadWriteLock&lt;/code&gt; &lt;/a&gt;のみが提供されます。しかし、プログラマーは非標準の要件をカバーするために独自の実装を作成する場合があります。</target>
        </trans-unit>
        <trans-unit id="ccb2a8fa5c45fda8065dbaad7a3c71bba458a361" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resolverstyle&quot;&gt;&lt;code&gt;ResolverStyle&lt;/code&gt;&lt;/a&gt; is an enum that offers three different approaches, strict, smart and lenient. The smart option is the default. It can be set using &lt;a href=&quot;datetimeformatter#withResolverStyle-java.time.format.ResolverStyle-&quot;&gt;&lt;code&gt;withResolverStyle(ResolverStyle)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;resolverstyle&quot;&gt; &lt;code&gt;ResolverStyle&lt;/code&gt; は&lt;/a&gt;申し出3つの異なるアプローチ、厳格な、スマートかつ寛大その列挙型です。スマートオプションがデフォルトです。これは&lt;a href=&quot;datetimeformatter#withResolverStyle-java.time.format.ResolverStyle-&quot;&gt; &lt;code&gt;withResolverStyle(ResolverStyle)&lt;/code&gt; &lt;/a&gt;を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="a61c3fe4bcefb9096a8ca84cf773684b1d6df713" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resolverstyle&quot;&gt;resolver style&lt;/a&gt; has no effect on instant parsing. The end-of-day time of '24:00' is handled as midnight at the start of the following day. The leap-second time of '23:59:59' is handled to some degree, see &lt;a href=&quot;datetimeformatter#parsedLeapSecond--&quot;&gt;&lt;code&gt;DateTimeFormatter.parsedLeapSecond()&lt;/code&gt;&lt;/a&gt; for full details.</source>
          <target state="translated">&lt;a href=&quot;resolverstyle&quot;&gt;リゾルバのスタイルは、&lt;/a&gt;インスタントの解析には影響を与えません。終業時刻「24:00」は翌日の午前0時として扱われます。うるう秒の「23:59:59」はある程度処理されます。詳細については、&lt;a href=&quot;datetimeformatter#parsedLeapSecond--&quot;&gt; &lt;code&gt;DateTimeFormatter.parsedLeapSecond()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ffbf4748dbac126c5220a08777eb15c9fdb0572e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resolverstyle&quot;&gt;resolver style&lt;/a&gt; has no effect on instant parsing. The end-of-day time of '24:00' is handled as midnight at the start of the following day. The leap-second time of '23:59:60' is handled to some degree, see &lt;a href=&quot;datetimeformatter#parsedLeapSecond--&quot;&gt;&lt;code&gt;DateTimeFormatter.parsedLeapSecond()&lt;/code&gt;&lt;/a&gt; for full details.</source>
          <target state="translated">&lt;a href=&quot;resolverstyle&quot;&gt;リゾルバのスタイルは、&lt;/a&gt;インスタントの解析には影響を与えません。終業時刻「24:00」は翌日の午前0時として扱われます。「23:59:60」のうるう秒の時間はある程度処理されます。詳細については、&lt;a href=&quot;datetimeformatter#parsedLeapSecond--&quot;&gt; &lt;code&gt;DateTimeFormatter.parsedLeapSecond()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="844b2132f1798e9d55cc9c339a4149469ad05e5e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control&quot;&gt;&lt;code&gt;ResourceBundle.Control&lt;/code&gt;&lt;/a&gt; class provides information necessary to perform the bundle loading process by the &lt;code&gt;getBundle&lt;/code&gt; factory methods that take a &lt;code&gt;ResourceBundle.Control&lt;/code&gt; instance. You can implement your own subclass in order to enable non-standard resource bundle formats, change the search strategy, or define caching parameters. Refer to the descriptions of the class and the &lt;a href=&quot;resourcebundle#getBundle-java.lang.String-java.util.Locale-java.lang.ClassLoader-java.util.ResourceBundle.Control-&quot;&gt;&lt;code&gt;getBundle&lt;/code&gt;&lt;/a&gt; factory method for details.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control&quot;&gt; &lt;code&gt;ResourceBundle.Control&lt;/code&gt; の&lt;/a&gt;クラスは、バンドルによってロード処理を実行するために必要な情報提供 &lt;code&gt;getBundle&lt;/code&gt; の取るファクトリメソッド &lt;code&gt;ResourceBundle.Control&lt;/code&gt; インスタンス。独自のサブクラスを実装して、非標準のリソースバンドル形式を有効にしたり、検索戦略を変更したり、キャッシュパラメーターを定義したりできます。詳細については、クラスの説明と&lt;a href=&quot;resourcebundle#getBundle-java.lang.String-java.util.Locale-java.lang.ClassLoader-java.util.ResourceBundle.Control-&quot;&gt; &lt;code&gt;getBundle&lt;/code&gt; &lt;/a&gt;ファクトリメソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="5b1b140c56a442f57e62e38c4c78a04d61105b58" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control#getCandidateLocales-java.lang.String-java.util.Locale-&quot;&gt;&lt;code&gt;control.getCandidateLocales&lt;/code&gt;&lt;/a&gt; method is called with the target locale to get a list of &lt;em&gt;candidate &lt;code&gt;Locale&lt;/code&gt;s&lt;/em&gt; for which resource bundles are searched.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control#getCandidateLocales-java.lang.String-java.util.Locale-&quot;&gt; &lt;code&gt;control.getCandidateLocales&lt;/code&gt; の&lt;/a&gt;方法は、のリストを取得するために、ターゲットロケールと呼ばれる&lt;em&gt;候補 &lt;code&gt;Locale&lt;/code&gt; の&lt;/em&gt;リソースバンドルが検索されるために。</target>
        </trans-unit>
        <trans-unit id="772adc8499f04f3dfcd1f7ee081e85fbe1b93725" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control#getFallbackLocale-java.lang.String-java.util.Locale-&quot;&gt;&lt;code&gt;control.getFallbackLocale&lt;/code&gt;&lt;/a&gt; method is called to get a fallback locale (alternative to the current target locale) to try further finding a resource bundle. If the method returns a non-null locale, it becomes the next target locale and the loading process starts over from Step 3. Otherwise, if a base bundle was found and put on hold in a previous Step 5, it is returned to the caller now. Otherwise, a MissingResourceException is thrown.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control#getFallbackLocale-java.lang.String-java.util.Locale-&quot;&gt; &lt;code&gt;control.getFallbackLocale&lt;/code&gt; の&lt;/a&gt;方法は、リソースバンドルを見つけ、さらにしようとする（現在のターゲットロケールの代替）フォールバックロケールを取得するために呼び出されます。メソッドがnull以外のロケールを返す場合、それは次のターゲットロケールになり、ロードプロセスはステップ3からやり直します。それ以外の場合、前のステップ5でベースバンドルが見つかり、保留にされた場合は、呼び出し元に返されます。今。それ以外の場合は、MissingResourceExceptionがスローされます。</target>
        </trans-unit>
        <trans-unit id="635f440f4fb0dc3df8028007964f525ee541d99c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control#getFormats-java.lang.String-&quot;&gt;&lt;code&gt;control.getFormats&lt;/code&gt;&lt;/a&gt; method is called to get resource bundle formats to produce bundle or resource names. The strings &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; and &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; designate class-based and &lt;a href=&quot;propertyresourcebundle&quot;&gt;property&lt;/a&gt;-based resource bundles, respectively. Other strings starting with &lt;code&gt;&quot;java.&quot;&lt;/code&gt; are reserved for future extensions and must not be used for application-defined formats. Other strings designate application-defined formats.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control#getFormats-java.lang.String-&quot;&gt; &lt;code&gt;control.getFormats&lt;/code&gt; の&lt;/a&gt;方法は、農産物のバンドルまたはリソース名にリソースバンドル形式を取得するために呼び出されます。文字列 &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; および &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; 、それぞれクラスベースおよび&lt;a href=&quot;propertyresourcebundle&quot;&gt;プロパティ&lt;/a&gt;ベースのリソースバンドルを指定します。 &lt;code&gt;&quot;java.&quot;&lt;/code&gt; 始まるその他の文字列。将来の拡張用に予約されており、アプリケーション定義の形式には使用しないでください。その他の文字列は、アプリケーション定義の形式を指定します。</target>
        </trans-unit>
        <trans-unit id="143061f5a7fc551c0ad375aa5616ef6082a571b7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control#newBundle-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-boolean-&quot;&gt;&lt;code&gt;control.newBundle&lt;/code&gt;&lt;/a&gt; method is called to instantiate a &lt;code&gt;ResourceBundle&lt;/code&gt; for the base bundle name, a candidate locale, and a format. (Refer to the note on the cache lookup below.) This step is iterated over all combinations of the candidate locales and formats until the &lt;code&gt;newBundle&lt;/code&gt; method returns a &lt;code&gt;ResourceBundle&lt;/code&gt; instance or the iteration has used up all the combinations. For example, if the candidate locales are &lt;code&gt;Locale(&quot;de&quot;, &quot;DE&quot;)&lt;/code&gt;, &lt;code&gt;Locale(&quot;de&quot;)&lt;/code&gt; and &lt;code&gt;Locale(&quot;&quot;)&lt;/code&gt; and the formats are &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; and &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt;, then the following is the sequence of locale-format combinations to be used to call &lt;code&gt;control.newBundle&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control#newBundle-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-boolean-&quot;&gt; &lt;code&gt;control.newBundle&lt;/code&gt; &lt;/a&gt;方法をインスタンス化するために呼び出され &lt;code&gt;ResourceBundle&lt;/code&gt; ベースバンドル名、候補ロケール、およびフォーマットのために。 （以下のキャッシュルックアップに関する注記を参照してください。）この手順は、 &lt;code&gt;newBundle&lt;/code&gt; メソッドが &lt;code&gt;ResourceBundle&lt;/code&gt; インスタンスを返すか、反復がすべての組み合わせを使い果たすまで、候補ロケールと形式のすべての組み合わせに対して繰り返されます。たとえば、候補ロケールが &lt;code&gt;Locale(&quot;de&quot;, &quot;DE&quot;)&lt;/code&gt; 、 &lt;code&gt;Locale(&quot;de&quot;)&lt;/code&gt; および &lt;code&gt;Locale(&quot;&quot;)&lt;/code&gt; であり、フォーマットが &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; および &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; の場合、次に、呼び出しに使用されるロケール形式の組み合わせのシーケンスは次のとおりです &lt;code&gt;control.newBundle&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="10eb909f57a9444304efbbfb4230e34732f3b9b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;scanner#findInLine-java.lang.String-&quot;&gt;&lt;code&gt;findInLine(java.lang.String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;scanner#findWithinHorizon-java.lang.String-int-&quot;&gt;&lt;code&gt;findWithinHorizon(java.lang.String, int)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;scanner#skip-java.util.regex.Pattern-&quot;&gt;&lt;code&gt;skip(java.util.regex.Pattern)&lt;/code&gt;&lt;/a&gt; methods operate independently of the delimiter pattern. These methods will attempt to match the specified pattern with no regard to delimiters in the input and thus can be used in special circumstances where delimiters are not relevant. These methods may block waiting for more input.</source>
          <target state="translated">&lt;a href=&quot;scanner#findInLine-java.lang.String-&quot;&gt; &lt;code&gt;findInLine(java.lang.String)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;scanner#findWithinHorizon-java.lang.String-int-&quot;&gt; &lt;code&gt;findWithinHorizon(java.lang.String, int)&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;scanner#skip-java.util.regex.Pattern-&quot;&gt; &lt;code&gt;skip(java.util.regex.Pattern)&lt;/code&gt; &lt;/a&gt;メソッドは、独立して、区切り文字パターンの動作。これらのメソッドは、入力内の区切り文字を考慮せずに指定されたパターンに一致しようとするため、区切り文字が関係しない特殊な状況で使用できます。これらのメソッドは、追加の入力の待機をブロックする場合があります。</target>
        </trans-unit>
        <trans-unit id="348c28db8b27cc9f18897b329f01ff9a7695b683" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;scanner#next--&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;scanner#hasNext--&quot;&gt;&lt;code&gt;hasNext()&lt;/code&gt;&lt;/a&gt; methods and their primitive-type companion methods (such as &lt;a href=&quot;scanner#nextInt--&quot;&gt;&lt;code&gt;nextInt()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;scanner#hasNextInt--&quot;&gt;&lt;code&gt;hasNextInt()&lt;/code&gt;&lt;/a&gt;) first skip any input that matches the delimiter pattern, and then attempt to return the next token. Both &lt;code&gt;hasNext&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; methods may block waiting for further input. Whether a &lt;code&gt;hasNext&lt;/code&gt; method blocks has no connection to whether or not its associated &lt;code&gt;next&lt;/code&gt; method will block.</source>
          <target state="translated">&lt;a href=&quot;scanner#next--&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;scanner#hasNext--&quot;&gt; &lt;code&gt;hasNext()&lt;/code&gt; &lt;/a&gt;メソッドおよびそのプリミティブ型のコンパニオンメソッド（例えば、&lt;a href=&quot;scanner#nextInt--&quot;&gt; &lt;code&gt;nextInt()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;scanner#hasNextInt--&quot;&gt; &lt;code&gt;hasNextInt()&lt;/code&gt; &lt;/a&gt;）最初の区切り文字パターンに一致する入力をスキップし、次のトークンを返すことを試みます。 &lt;code&gt;hasNext&lt;/code&gt; メソッドと &lt;code&gt;next&lt;/code&gt; メソッドの両方が、それ以上の入力を待つのをブロックする場合があります。かどうか &lt;code&gt;hasNext&lt;/code&gt; メソッドブロックその関連するかどうかへの接続がありません &lt;code&gt;next&lt;/code&gt; メソッドがブロックされています。</target>
        </trans-unit>
        <trans-unit id="21137fd05c9ebb8f424df8db033cf26db6b1b34b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;scatteringbytechannel&quot;&gt;&lt;code&gt;ScatteringByteChannel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;gatheringbytechannel&quot;&gt;&lt;code&gt;GatheringByteChannel&lt;/code&gt;&lt;/a&gt; interfaces extend the &lt;a href=&quot;readablebytechannel&quot;&gt;&lt;code&gt;ReadableByteChannel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;writablebytechannel&quot;&gt;&lt;code&gt;WritableByteChannel&lt;/code&gt;&lt;/a&gt; interfaces, respectively, adding &lt;a href=&quot;scatteringbytechannel#read-java.nio.ByteBuffer:A-int-int-&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;gatheringbytechannel#write-java.nio.ByteBuffer:A-int-int-&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; methods that take a sequence of buffers rather than a single buffer.</source>
          <target state="translated">&lt;a href=&quot;scatteringbytechannel&quot;&gt; &lt;code&gt;ScatteringByteChannel&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;gatheringbytechannel&quot;&gt; &lt;code&gt;GatheringByteChannel&lt;/code&gt; &lt;/a&gt;インタフェースは延び&lt;a href=&quot;readablebytechannel&quot;&gt; &lt;code&gt;ReadableByteChannel&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;writablebytechannel&quot;&gt; &lt;code&gt;WritableByteChannel&lt;/code&gt; &lt;/a&gt;追加、それぞれ、インターフェイスを&lt;a href=&quot;scatteringbytechannel#read-java.nio.ByteBuffer:A-int-int-&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;gatheringbytechannel#write-java.nio.ByteBuffer:A-int-int-&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;バッファの配列ではなく、単一のバッファを取る方法を。</target>
        </trans-unit>
        <trans-unit id="07cb8eb23ad928e28854d19141c00b90056152a3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;seekablebytechannel#position-long-&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;seekablebytechannel#truncate-long-&quot;&gt;&lt;code&gt;truncate&lt;/code&gt;&lt;/a&gt; methods which do not otherwise have a value to return are specified to return the channel upon which they are invoked. This allows method invocations to be chained. Implementations of this interface should specialize the return type so that method invocations on the implementation class can be chained.</source>
          <target state="translated">&lt;a href=&quot;seekablebytechannel#position-long-&quot;&gt; &lt;code&gt;position&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;seekablebytechannel#truncate-long-&quot;&gt; &lt;code&gt;truncate&lt;/code&gt; &lt;/a&gt;戻り値を返さないものな方法は、それらが呼び出される時にチャンネルを返すように指定されています。これにより、メソッド呼び出しを連鎖させることができます。このインターフェースの実装は、戻り値の型を特殊化して、実装クラスでのメソッド呼び出しをチェーンできるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="90a51280115503dcf1e905f60856aff6ffe205d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;selector#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method synchronizes on the selector and all three key sets in the same order as in a selection operation.</source>
          <target state="translated">&lt;a href=&quot;selector#close--&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;方法は、セレクタと選択動作と同じ順序ですべての3つのキーセットに同期させます。</target>
        </trans-unit>
        <trans-unit id="d451b4a4efe00d347a54add6cb0af761ff11af1a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;socketoption#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; of each socket option defined by this class is its field name.</source>
          <target state="translated">&lt;a href=&quot;socketoption#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;このクラスで定義された各ソケットオプションのは、そのフィールド名です。</target>
        </trans-unit>
        <trans-unit id="277deff41b631710526c3be6a8bce3fa73e5a350" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;standardcharsets&quot;&gt;&lt;code&gt;StandardCharsets&lt;/code&gt;&lt;/a&gt; class defines constants for each of the standard charsets.</source>
          <target state="translated">&lt;a href=&quot;standardcharsets&quot;&gt; &lt;code&gt;StandardCharsets&lt;/code&gt; の&lt;/a&gt;クラスは、標準文字セットのそれぞれの定数を定義します。</target>
        </trans-unit>
        <trans-unit id="a8dd9a9fec27603d78ed08617b0bdfc6d7c235da" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;standardcopyoption&quot;&gt;&lt;code&gt;StandardCopyOption&lt;/code&gt;&lt;/a&gt; enumeration type defines the</source>
          <target state="translated">&lt;a href=&quot;standardcopyoption&quot;&gt; &lt;code&gt;StandardCopyOption&lt;/code&gt; の&lt;/a&gt;列挙型定義</target>
        </trans-unit>
        <trans-unit id="80c99f93b54d2734b5913704c3b7bc58ac7bd819" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;standardopenoption&quot;&gt;&lt;code&gt;StandardOpenOption&lt;/code&gt;&lt;/a&gt; enumeration type defines the</source>
          <target state="translated">&lt;a href=&quot;standardopenoption&quot;&gt; &lt;code&gt;StandardOpenOption&lt;/code&gt; の&lt;/a&gt;列挙型定義</target>
        </trans-unit>
        <trans-unit id="3d74cb4498be8f94cc5abccf92b10b83b8240700" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;standardopenoption#SYNC&quot;&gt;&lt;code&gt;SYNC&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;standardopenoption#DSYNC&quot;&gt;&lt;code&gt;DSYNC&lt;/code&gt;&lt;/a&gt; options are used when opening a file to require that updates to the file are written synchronously to the underlying storage device. In the case of the default provider, and the file resides on a local storage device, and the &lt;a href=&quot;../channels/seekablebytechannel&quot;&gt;&lt;code&gt;seekable&lt;/code&gt;&lt;/a&gt; channel is connected to a file that was opened with one of these options, then an invocation of the &lt;a href=&quot;../channels/writablebytechannel#write-java.nio.ByteBuffer-&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method is only guaranteed to return when all changes made to the file by that invocation have been written to the device. These options are useful for ensuring that critical information is not lost in the event of a system crash. If the file does not reside on a local device then no such guarantee is made. Whether this guarantee is possible with other &lt;a href=&quot;spi/filesystemprovider&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt; implementations is provider specific.</source>
          <target state="translated">&lt;a href=&quot;standardopenoption#SYNC&quot;&gt; &lt;code&gt;SYNC&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;standardopenoption#DSYNC&quot;&gt; &lt;code&gt;DSYNC&lt;/code&gt; &lt;/a&gt;ファイルへの更新を元になるストレージデバイスと同時に書き込まれていることを必要とするファイルを開くときのオプションが使用されています。デフォルトのプロバイダーの場合、ファイルがローカルストレージデバイスにあり、&lt;a href=&quot;../channels/seekablebytechannel&quot;&gt; &lt;code&gt;seekable&lt;/code&gt; &lt;/a&gt;チャネルがこれらのオプションのいずれかで開かれたファイルに接続されている場合、&lt;a href=&quot;../channels/writablebytechannel#write-java.nio.ByteBuffer-&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;メソッドの呼び出しは、すべての場合にのみ戻ることが保証されますその呼び出しによってファイルに加えられた変更は、デバイスに書き込まれました。これらのオプションは、システムがクラッシュした場合に重要な情報が失われないようにするのに役立ちます。ファイルがローカルデバイスにない場合、そのような保証はありません。この保証が他の&lt;a href=&quot;spi/filesystemprovider&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt;可能かどうか 実装はプロバイダー固有です。</target>
        </trans-unit>
        <trans-unit id="65632e3304ce8a7430971d425d4ea6f5d7041352" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;temporal/chronofield#EPOCH_DAY&quot;&gt;&lt;code&gt;Epoch Day count&lt;/code&gt;&lt;/a&gt; is a simple incrementing count of days where day 0 is 1970-01-01 (ISO). This definition is the same for all chronologies, enabling conversion.</source>
          <target state="translated">&lt;a href=&quot;temporal/chronofield#EPOCH_DAY&quot;&gt; &lt;code&gt;Epoch Day count&lt;/code&gt; &lt;/a&gt; 0日が1970年1月1日である日の簡単なインクリメント数（ISO）です。この定義はすべての年代学で同じであり、変換を可能にします。</target>
        </trans-unit>
        <trans-unit id="5fe0b0a62926df5a411799abadea12e26424d776" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;temporaladjusters&quot;&gt;&lt;code&gt;TemporalAdjusters&lt;/code&gt;&lt;/a&gt; class contains a standard set of adjusters, available as static methods. These include:</source>
          <target state="translated">&lt;a href=&quot;temporaladjusters&quot;&gt; &lt;code&gt;TemporalAdjusters&lt;/code&gt; の&lt;/a&gt;クラスには、静的メソッドとして利用できる調整の標準セットが含まれています。これらには以下が含まれます：</target>
        </trans-unit>
        <trans-unit id="8ee0d1305c6ed8ac73c630b5768c7fd55bebbf44" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;temporalamount&quot;&gt;&lt;code&gt;TemporalAmount&lt;/code&gt;&lt;/a&gt; interface models amounts of relative time.</source>
          <target state="translated">&lt;a href=&quot;temporalamount&quot;&gt; &lt;code&gt;TemporalAmount&lt;/code&gt; の&lt;/a&gt;インターフェースモデルは相対的な時間の量。</target>
        </trans-unit>
        <trans-unit id="d603049ad9b812aec8a4461ab35e3fdfaf4b0a9c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt; interface provides another mechanism for querying temporal objects. That interface is limited to returning a &lt;code&gt;long&lt;/code&gt;. By contrast, queries can return any type.</source>
          <target state="translated">&lt;a href=&quot;temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; の&lt;/a&gt;インタフェースは、時間オブジェクトを照会するための別の機構を提供します。そのインターフェースは &lt;code&gt;long&lt;/code&gt; を返すことに限定されています。対照的に、クエリは任意のタイプを返すことができます。</target>
        </trans-unit>
        <trans-unit id="da0f2490753f88004eeaececd77ced0e3d26d3b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threadgroup#uncaughtException-java.lang.Thread-java.lang.Throwable-&quot;&gt;top-level error handler&lt;/a&gt; does not print out a message if &lt;code&gt;ThreadDeath&lt;/code&gt; is never caught.</source>
          <target state="translated">&lt;a href=&quot;threadgroup#uncaughtException-java.lang.Thread-java.lang.Throwable-&quot;&gt;トップレベルのエラーハンドラは、&lt;/a&gt;場合にメッセージをプリントアウトしていない &lt;code&gt;ThreadDeath&lt;/code&gt; キャッチされることはありません。</target>
        </trans-unit>
        <trans-unit id="90e1d925999c201c8dd68d8ed236e67286b0b5ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threadmxbean#isThreadContentionMonitoringSupported--&quot;&gt;&lt;code&gt;isThreadContentionMonitoringSupported()&lt;/code&gt;&lt;/a&gt; method can be used to determine if a Java virtual machine supports thread contention monitoring. The thread contention monitoring is disabled by default. The &lt;a href=&quot;threadmxbean#setThreadContentionMonitoringEnabled-boolean-&quot;&gt;&lt;code&gt;setThreadContentionMonitoringEnabled(boolean)&lt;/code&gt;&lt;/a&gt; method can be used to enable thread contention monitoring.</source>
          <target state="translated">&lt;a href=&quot;threadmxbean#isThreadContentionMonitoringSupported--&quot;&gt; &lt;code&gt;isThreadContentionMonitoringSupported()&lt;/code&gt; &lt;/a&gt;メソッドは、Java仮想マシンがスレッドコンテンション監視をサポートしているかどうかを決定するために使用することができます。スレッド競合監視は、デフォルトでは無効になっています。&lt;a href=&quot;threadmxbean#setThreadContentionMonitoringEnabled-boolean-&quot;&gt; &lt;code&gt;setThreadContentionMonitoringEnabled(boolean)&lt;/code&gt; &lt;/a&gt;メソッドは、スレッドコンテンション監視を可能にするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ed0642ec4c21f239693011a0d808e0a9a5551dee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threadmxbean#isThreadCpuTimeSupported--&quot;&gt;&lt;code&gt;isThreadCpuTimeSupported()&lt;/code&gt;&lt;/a&gt; method can be used to determine if a Java virtual machine supports measuring of the CPU time for any thread. The &lt;a href=&quot;threadmxbean#isCurrentThreadCpuTimeSupported--&quot;&gt;&lt;code&gt;isCurrentThreadCpuTimeSupported()&lt;/code&gt;&lt;/a&gt; method can be used to determine if a Java virtual machine supports measuring of the CPU time for the current thread. A Java virtual machine implementation that supports CPU time measurement for any thread will also support that for the current thread.</source>
          <target state="translated">&lt;a href=&quot;threadmxbean#isThreadCpuTimeSupported--&quot;&gt; &lt;code&gt;isThreadCpuTimeSupported()&lt;/code&gt; &lt;/a&gt;メソッドは、Java仮想マシンのサポートは、任意のスレッドのCPU時間を測定するかどうかを決定するために使用することができます。&lt;a href=&quot;threadmxbean#isCurrentThreadCpuTimeSupported--&quot;&gt; &lt;code&gt;isCurrentThreadCpuTimeSupported()&lt;/code&gt; &lt;/a&gt;メソッドは、Java仮想マシンのサポートは、現在のスレッドのCPU時間を測定するかどうかを決定するために使用することができます。任意のスレッドのCPU時間測定をサポートするJava仮想マシン実装は、現在のスレッドのCPU時間測定もサポートします。</target>
        </trans-unit>
        <trans-unit id="126515b65a295f042897ee7ca24299c10de24ac2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;throwable#fillInStackTrace--&quot;&gt;&lt;code&gt;fillInStackTrace()&lt;/code&gt;&lt;/a&gt; method is called to initialize the stack trace data in the newly created throwable.</source>
          <target state="translated">&lt;a href=&quot;throwable#fillInStackTrace--&quot;&gt; &lt;code&gt;fillInStackTrace()&lt;/code&gt; &lt;/a&gt;メソッドは、新しく作成されたスロー可能オブジェクト内のスタックトレースデータを初期化するために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f545a31d332fd214f9259a9d88e64957c2997f77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;timeunit&quot;&gt;&lt;code&gt;TimeUnit&lt;/code&gt;&lt;/a&gt; class provides multiple granularities (including nanoseconds) for specifying and controlling time-out based operations. Most classes in the package contain operations based on time-outs in addition to indefinite waits. In all cases that time-outs are used, the time-out specifies the minimum time that the method should wait before indicating that it timed-out. Implementations make a &quot;best effort&quot; to detect time-outs as soon as possible after they occur. However, an indefinite amount of time may elapse between a time-out being detected and a thread actually executing again after that time-out. All methods that accept timeout parameters treat values less than or equal to zero to mean not to wait at all. To wait &quot;forever&quot;, you can use a value of &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;timeunit&quot;&gt; &lt;code&gt;TimeUnit&lt;/code&gt; での&lt;/a&gt;クラスが指定し、タイムアウトベースの動作を制御するための（ナノ秒を含む）は、複数の粒度を提供します。パッケージ内のほとんどのクラスには、無期限の待機に加えて、タイムアウトに基づく操作が含まれています。タイムアウトが使用されるすべてのケースで、タイムアウトは、メソッドがタイムアウトしたことを示す前にメソッドが待機する最小時間を指定します。実装は、タイムアウトが発生した後できるだけ早くタイムアウトを検出するために「最善の努力」をします。ただし、タイムアウトが検出されてから、そのタイムアウト後に実際にスレッドが再度実行されるまでに、不明確な時間が経過する場合があります。タイムアウトパラメータを受け入れるすべてのメソッドは、ゼロ以下の値を処理して、まったく待機しないことを意味します。 「永久に」待機するには、 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; の値を使用できます。</target>
        </trans-unit>
        <trans-unit id="8b0e3a5fd66bb193d4396df91f7f330610d51100" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#URI-java.lang.String-&quot;&gt;single-argument constructor&lt;/a&gt; requires any illegal characters in its argument to be quoted and preserves any escaped octets and</source>
          <target state="translated">&lt;a href=&quot;uri#URI-java.lang.String-&quot;&gt;単一引数のコンストラクタは、&lt;/a&gt;任意のエスケープオクテットを引用しなければ、引数のいずれかの不正な文字を必要とし、保持し、</target>
        </trans-unit>
        <trans-unit id="96d3a6675116e768726d899ee3f398538f8d3f5e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#URI-java.lang.String-java.lang.String-java.lang.String-int-java.lang.String-java.lang.String-java.lang.String-&quot;&gt;multi-argument constructors&lt;/a&gt; quote illegal characters as required by the components in which they appear. The percent character (&lt;code&gt;'%'&lt;/code&gt;) is always quoted by these constructors. Any</source>
          <target state="translated">&lt;a href=&quot;uri#URI-java.lang.String-java.lang.String-java.lang.String-int-java.lang.String-java.lang.String-java.lang.String-&quot;&gt;多引数のコンストラクタは&lt;/a&gt;、彼らが表示されているコンポーネントで必要とされる不正な文字を引用します。パーセント文字（ &lt;code&gt;'%'&lt;/code&gt; ）は、これらのコンストラクターによって常に引用されます。どれか</target>
        </trans-unit>
        <trans-unit id="a5b18837b67d6da8cf5f631b9ddf3619afc39652" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#getRawUserInfo--&quot;&gt;&lt;code&gt;getRawUserInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getRawPath--&quot;&gt;&lt;code&gt;getRawPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getRawQuery--&quot;&gt;&lt;code&gt;getRawQuery&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getRawFragment--&quot;&gt;&lt;code&gt;getRawFragment&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getRawAuthority--&quot;&gt;&lt;code&gt;getRawAuthority&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;uri#getRawSchemeSpecificPart--&quot;&gt;&lt;code&gt;getRawSchemeSpecificPart&lt;/code&gt;&lt;/a&gt; methods return the values of their corresponding components in raw form, without interpreting any escaped octets. The strings returned by these methods may contain both escaped octets and</source>
          <target state="translated">&lt;a href=&quot;uri#getRawUserInfo--&quot;&gt; &lt;code&gt;getRawUserInfo&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;uri#getRawPath--&quot;&gt; &lt;code&gt;getRawPath&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;uri#getRawQuery--&quot;&gt; &lt;code&gt;getRawQuery&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;uri#getRawFragment--&quot;&gt; &lt;code&gt;getRawFragment&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;uri#getRawAuthority--&quot;&gt; &lt;code&gt;getRawAuthority&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;uri#getRawSchemeSpecificPart--&quot;&gt; &lt;code&gt;getRawSchemeSpecificPart&lt;/code&gt; の&lt;/a&gt;方法は、任意のエスケープオクテットを解釈せずに、そのままの形式でそれらの対応する成分の値を返します。これらのメソッドによって返される文字列には、エスケープされたオクテットと</target>
        </trans-unit>
        <trans-unit id="c86bed47bbda7f711ebae1c96c0ca26487893480" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#getUserInfo--&quot;&gt;&lt;code&gt;getUserInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getPath--&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getQuery--&quot;&gt;&lt;code&gt;getQuery&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getFragment--&quot;&gt;&lt;code&gt;getFragment&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getAuthority--&quot;&gt;&lt;code&gt;getAuthority&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;uri#getSchemeSpecificPart--&quot;&gt;&lt;code&gt;getSchemeSpecificPart&lt;/code&gt;&lt;/a&gt; methods decode any escaped octets in their corresponding components. The strings returned by these methods may contain both</source>
          <target state="translated">&lt;a href=&quot;uri#getUserInfo--&quot;&gt; &lt;code&gt;getUserInfo&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;uri#getPath--&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;uri#getQuery--&quot;&gt; &lt;code&gt;getQuery&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;uri#getFragment--&quot;&gt; &lt;code&gt;getFragment&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;uri#getAuthority--&quot;&gt; &lt;code&gt;getAuthority&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;uri#getSchemeSpecificPart--&quot;&gt; &lt;code&gt;getSchemeSpecificPart&lt;/code&gt; の&lt;/a&gt;方法は、それらの対応する構成要素の任意のエスケープオクテットを復号します。これらのメソッドによって返される文字列には、両方が含まれる場合があります</target>
        </trans-unit>
        <trans-unit id="05633b3838426efa3462c8db4d61636d5eac4d0e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#toASCIIString--&quot;&gt;&lt;code&gt;toASCIIString&lt;/code&gt;&lt;/a&gt; method returns a fully quoted and encoded URI string that does not contain any</source>
          <target state="translated">&lt;a href=&quot;uri#toASCIIString--&quot;&gt; &lt;code&gt;toASCIIString&lt;/code&gt; の&lt;/a&gt;方法はいずれも含まない、完全に引用された符号化されたURI文字列を返します。</target>
        </trans-unit>
        <trans-unit id="f7da3d6193bb224a3c925ce28355ba647aa44c83" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#toString--&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; method returns a URI string with all necessary quotation but which may contain</source>
          <target state="translated">&lt;a href=&quot;uri#toString--&quot;&gt; &lt;code&gt;toString&lt;/code&gt; &lt;/a&gt;メソッドは、すべての必要な引用でURI文字列を返しますが含まれている可能性があります</target>
        </trans-unit>
        <trans-unit id="483ec9540b5f90a13d5603b20efcda8d93a44c03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;urlencoder&quot;&gt;&lt;code&gt;URLEncoder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;urldecoder&quot;&gt;&lt;code&gt;URLDecoder&lt;/code&gt;&lt;/a&gt; classes can also be used, but only for HTML form encoding, which is not the same as the encoding scheme defined in RFC2396.</source>
          <target state="translated">&lt;a href=&quot;urlencoder&quot;&gt; &lt;code&gt;URLEncoder&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;urldecoder&quot;&gt; &lt;code&gt;URLDecoder&lt;/code&gt; の&lt;/a&gt;クラスものみRFC2396で定義された符号化方式と同じではないHTMLフォーム符号化のため、使用することができます。</target>
        </trans-unit>
        <trans-unit id="71f571d649e61ad2b45c6192eeeb015dbbe1495a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;userprincipal&quot;&gt;&lt;code&gt;UserPrincipal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;groupprincipal&quot;&gt;&lt;code&gt;GroupPrincipal&lt;/code&gt;&lt;/a&gt; interfaces represent an identity or group identity.</source>
          <target state="translated">&lt;a href=&quot;userprincipal&quot;&gt; &lt;code&gt;UserPrincipal&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;groupprincipal&quot;&gt; &lt;code&gt;GroupPrincipal&lt;/code&gt; &lt;/a&gt;インターフェイスは、同一又はグループIDを表します。</target>
        </trans-unit>
        <trans-unit id="86bc860478e690457692e5c83357667c82fd5795" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;userprincipallookupservice&quot;&gt;&lt;code&gt;UserPrincipalLookupService&lt;/code&gt;&lt;/a&gt; interface defines methods to lookup user or group principals.</source>
          <target state="translated">&lt;a href=&quot;userprincipallookupservice&quot;&gt; &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; &lt;/a&gt;定義メソッドインタフェースは、ユーザまたはグループプリンシパルを検索します。</target>
        </trans-unit>
        <trans-unit id="ef147a7a54d7b0102550cbd209ac533ffc64556d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;watchevent#context--&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; for these events is the relative path between the directory located by this path, and the path that locates the directory entry that is created, deleted, or modified.</source>
          <target state="translated">これらのイベントの&lt;a href=&quot;watchevent#context--&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt;は、このパスによって配置されたディレクトリと、作成、削除、または変更されたディレクトリエントリを配置するパスとの間の相対パスです。</target>
        </trans-unit>
        <trans-unit id="bee2859efc1d0c9a918dc390dc05a7a666d1a2e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;watchevent#context--&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; for this event is implementation specific and may be &lt;code&gt;null&lt;/code&gt;. The event &lt;a href=&quot;watchevent#count--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; may be greater than &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">このイベントの&lt;a href=&quot;watchevent#context--&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt;は実装固有であり、 &lt;code&gt;null&lt;/code&gt; の場合があります。イベント&lt;a href=&quot;watchevent#count--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;1&lt;/code&gt; より大きい場合があります。</target>
        </trans-unit>
        <trans-unit id="d7c6261bea4e77bf60d69292cc3f4a55c729b9b2" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;default-delimiter&quot;&gt;default whitespace delimiter&lt;/a&gt; used by a scanner is as recognized by &lt;a href=&quot;../lang/character&quot;&gt;&lt;code&gt;Character&lt;/code&gt;&lt;/a&gt;.&lt;a href=&quot;../lang/character#isWhitespace-char-&quot;&gt;&lt;code&gt;isWhitespace&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;scanner#reset--&quot;&gt;&lt;code&gt;reset()&lt;/code&gt;&lt;/a&gt; method will reset the value of the scanner's delimiter to the default whitespace delimiter regardless of whether it was previously changed.</source>
          <target state="translated">&lt;a name=&quot;default-delimiter&quot;&gt;デフォルトの空白区切り文字&lt;/a&gt;スキャナが使用するには、として認識される&lt;a href=&quot;../lang/character&quot;&gt; &lt;code&gt;Character&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;../lang/character#isWhitespace-char-&quot;&gt; &lt;code&gt;isWhitespace&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;scanner#reset--&quot;&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;/a&gt;メソッドにかかわらず、それが以前に変更されたかどうかのデフォルトの空白区切り文字にスキャナの区切り文字の値をリセットします。</target>
        </trans-unit>
        <trans-unit id="cdf992b6452b5c0645142b8150d07e858f599985" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;floatDWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to be written to the output. This includes any signs, digits, grouping separators, decimal separators, exponential symbol, radix indicator, parentheses, and strings representing infinity and NaN as applicable. If the length of the converted value is less than the width then the output will be padded by spaces (&lt;code&gt;'\u0020'&lt;/code&gt;) until the total number of characters equals width. The padding is on the left by default. If the &lt;code&gt;'-'&lt;/code&gt; flag is given then the padding will be on the right. If width is not specified then there is no minimum.</source>
          <target state="translated">&lt;a name=&quot;floatDWidth&quot;&gt;幅は&lt;/a&gt;文字の最小数は、出力に書き込まれます。これには、符号、数字、グループ化区切り文字、小数点区切り文字、指数記号、基数インジケータ、括弧、および無限大とNaNを表す文字列が含まれます。変換された値の長さが幅より短い場合、文字の総数が幅と等しくなるまで、出力はスペース（ &lt;code&gt;'\u0020'&lt;/code&gt; ）で埋められます。デフォルトでは、パディングは左側にあります。場合は &lt;code&gt;'-'&lt;/code&gt; フラグが指定され、右側にパディングされます。幅が指定されていない場合、最小値はありません。</target>
        </trans-unit>
        <trans-unit id="8a0cfd7eb208b940d0fafb3de1697cf536161c15" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;genWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to be written to the output. If the length of the converted value is less than the width then the output will be padded by &lt;code&gt;' '&lt;/code&gt; (&lt;code&gt;'\u0020'&lt;/code&gt;) until the total number of characters equals the width. The padding is on the left by default. If the &lt;code&gt;'-'&lt;/code&gt; flag is given, then the padding will be on the right. If the width is not specified then there is no minimum.</source>
          <target state="translated">&lt;a name=&quot;genWidth&quot;&gt;幅は&lt;/a&gt;文字の最小数は、出力に書き込まれます。変換された値の長さが幅より短い場合、文字の合計数が幅と等しくなるまで、出力に &lt;code&gt;' '&lt;/code&gt; （ &lt;code&gt;'\u0020'&lt;/code&gt; ）が埋め込まれます。デフォルトでは、パディングは左側にあります。場合は &lt;code&gt;'-'&lt;/code&gt; フラグが指定され、その後、パディングが右側にあります。幅が指定されていない場合、最小値はありません。</target>
        </trans-unit>
        <trans-unit id="8fa9d205d462a4bfb3a26d4bc78316084693aa53" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;intWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to be written to the output. This includes any signs, digits, grouping separators, radix indicator, and parentheses. If the length of the converted value is less than the width then the output will be padded by spaces (&lt;code&gt;'\u0020'&lt;/code&gt;) until the total number of characters equals width. The padding is on the left by default. If &lt;code&gt;'-'&lt;/code&gt; flag is given then the padding will be on the right. If width is not specified then there is no minimum.</source>
          <target state="translated">&lt;a name=&quot;intWidth&quot;&gt;幅は&lt;/a&gt;文字の最小数は、出力に書き込まれます。これには、符号、数字、グループ化区切り、基数インジケータ、および括弧が含まれます。変換された値の長さが幅より短い場合、文字の総数が幅と等しくなるまで、出力はスペース（ &lt;code&gt;'\u0020'&lt;/code&gt; ）で埋められます。デフォルトでは、パディングは左側にあります。場合は &lt;code&gt;'-'&lt;/code&gt; フラグが指定され、右側にパディングされます。幅が指定されていない場合、最小値はありません。</target>
        </trans-unit>
        <trans-unit id="3e560a63da168303203b2b0de0e18b952b740b0d" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;mode&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt; argument specifies the access mode in which the file is to be opened. The permitted values and their meanings are:</source>
          <target state="translated">&lt;a name=&quot;mode&quot;&gt; &lt;code&gt;mode&lt;/code&gt; &lt;/a&gt;引数は、ファイルが開かれるアクセスモードを指定します。許可される値とその意味は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d70755c800c2b720f9b2a4d9f93470f170f35163" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;all-at-once&lt;/b&gt; pattern: Get the doc from the current multidoc, and save the doc in a list. Get the next multidoc from the current multidoc, and repeat until there are no more. Then iterate over the list of saved docs. Get the print data representation object from the current doc. Get all the print data from the print data representation object. Go to the next doc in the list, and repeat until there are no more.</source>
          <target state="translated">&lt;b&gt;すべてのアットワンス&lt;/b&gt;パターン：現行のmultidocからドキュメントを取得し、リスト内のドキュメントを保存します。現在のマルチドキュメントから次のマルチドキュメントを取得し、それがなくなるまで繰り返します。次に、保存されたドキュメントのリストを反復処理します。現在のドキュメントから印刷データ表現オブジェクトを取得します。印刷データ表現オブジェクトからすべての印刷データを取得します。リストの次のドキュメントに移動し、ドキュメントがなくなるまで繰り返します。</target>
        </trans-unit>
        <trans-unit id="14f6267fa804e0d76a0763676c42485e1a9ce366" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;interleaved&lt;/b&gt; pattern: Get the doc from the current multidoc. Get the print data representation object from the current doc. Get all the print data from the print data representation object. Get the next multidoc from the current multidoc, and repeat until there are no more. (The code example above uses the interleaved pattern.)</source>
          <target state="translated">&lt;b&gt;インターリーブされた&lt;/b&gt;パターン：現行のmultidocからドキュメントを取得します。現在のドキュメントから印刷データ表現オブジェクトを取得します。印刷データ表現オブジェクトからすべての印刷データを取得します。現在のマルチドキュメントから次のマルチドキュメントを取得し、それがなくなるまで繰り返します。（上記のコード例では、インターリーブパターンを使用しています。）</target>
        </trans-unit>
        <trans-unit id="80231fb01cbd9eea6cac573462b78797a00356f7" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;javax.management.builder.initial&lt;/b&gt; system property is consulted every time a new MBeanServer needs to be created, and the class pointed to by that property is loaded. If that class is different from that of the current MBeanServerBuilder, then a new MBeanServerBuilder is created. Otherwise, the MBeanServerFactory may create a new MBeanServerBuilder or reuse the current one.</source>
          <target state="translated">&lt;b&gt;javax.management.builder.initial&lt;/b&gt;システムプロパティは新しいのMBeanServerを作成する必要があるたびに相談して、そのプロパティによって指さクラスがロードされます。そのクラスが現在のMBeanServerBuilderのクラスと異なる場合は、新しいMBeanServerBuilderが作成されます。それ以外の場合、MBeanServerFactoryは新しいMBeanServerBuilderを作成するか、現在のMBeanServerBuilderを再利用します。</target>
        </trans-unit>
        <trans-unit id="133b14a15ab9a0721c864334bb5dcba8749ddb42" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-1935722590756516193L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;-1935722590756516193L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="622f4eec33d97ed2e8edad4e862e2ca5e8fc31cb" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-279985518429862552L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;-279985518429862552L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="59d67311624b4fef95e26ff51e0a9c6b2312c3c6" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-48350262537070138L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;-48350262537070138L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ab26041362e68fa2964d28d4745de355c08d29de" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-6292969195866300415L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;-6292969195866300415L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8f922ee070b5cc5ace54d4a0b9d3f07682e92469" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-6304063118040985512L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;-6304063118040985512L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="93f104d7169f5ba748ac71dc420f8f2b3490fac9" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-6871117877523310399L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;-6871117877523310399L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5c85e9f3228eea1cfaf1477d918140c111a3aa28" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-7445681389570207141L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;-7445681389570207141L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ffe47f8e6b033a46b369815e41c457527afba987" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-7516092053498031989L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;-7516092053498031989L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6e41f3c2dd2562ef1b180a361f4b55bf634bff02" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;1081892073854801359L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;1081892073854801359L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1ca4312b85a226720a17b2d5c731f010931d260d" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;1190536278266811217L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;1190536278266811217L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="072aec20483bdd007929c428e915e721c5ac25ae" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;2504952983494636987L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;2504952983494636987L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="836dfd3926b378790fd6604b2d4b322a25a61a21" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;2605900539589789736L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;2605900539589789736L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5105ab01988b46bcdb2ad68ccb972b352bbbf14f" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;3176664577895105181L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;3176664577895105181L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="63b961dbc4cf57cb42fe0df92a55437c8ee74ba1" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;3862947819818064362L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;3862947819818064362L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="194f95466a78a370966f9e904fcacd1a20dcddc8" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;4611072955724144607L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;4611072955724144607L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5f6ceca5a91a116ea11f104aaac88adefc6f654d" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;6181543027787327345L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;6181543027787327345L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5ab50df0639c6c2a445f4eb42deaf59f57cd4cea" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;6532732096650090465L&lt;/code&gt;.</source>
          <target state="translated">このクラスの&lt;b&gt;serialVersionUID&lt;/b&gt;は &lt;code&gt;6532732096650090465L&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cf7d7ffcce3e481d53bebd9cf2aa7b4afe92bff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt; TooManyListenersException &lt;/code&gt; Exception is used as part of the Java Event model to annotate and implement a unicast special case of a multicast Event Source.</source>
          <target state="translated">&lt;code&gt; TooManyListenersException &lt;/code&gt; の例外は、注釈を付けるために、Javaイベントモデルの一部として使用し、マルチキャストのイベントソースをユニキャストの特殊なケースを実装しています。</target>
        </trans-unit>
        <trans-unit id="140c233f5b711ea49784f7bc7d8f708ede025961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; mode can be used to reduce the number of I/O operations performed. Using &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; only requires updates to the file's content to be written to storage; using &lt;code&gt;&quot;rws&quot;&lt;/code&gt; requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation.</source>
          <target state="translated">&lt;code&gt;&quot;rwd&quot;&lt;/code&gt; モードが実行されるI / O操作の数を減らすために使用することができます。 &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; を使用するには、ファイルのコンテンツを更新してストレージに書き込むだけです。 &lt;code&gt;&quot;rws&quot;&lt;/code&gt; を使用するには、ファイルのコンテンツとそのメタデータの両方を更新して書き込む必要があります。これには、通常、少なくとも1つ以上の低レベルI / O操作が必要です。</target>
        </trans-unit>
        <trans-unit id="0cfa334fcd18f47df7a744728a735885661d2393" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;rws&quot;&lt;/code&gt; and &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; modes work much like the &lt;a href=&quot;../nio/channels/filechannel#force-boolean-&quot;&gt;&lt;code&gt;force(boolean)&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;../nio/channels/filechannel&quot;&gt;&lt;code&gt;FileChannel&lt;/code&gt;&lt;/a&gt; class, passing arguments of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, respectively, except that they always apply to every I/O operation and are therefore often more efficient. If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device. This is useful for ensuring that critical information is not lost in the event of a system crash. If the file does not reside on a local device then no such guarantee is made.</source>
          <target state="translated">&lt;code&gt;&quot;rws&quot;&lt;/code&gt; と &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; モードは次のように多くの仕事&lt;a href=&quot;../nio/channels/filechannel#force-boolean-&quot;&gt; &lt;code&gt;force(boolean)&lt;/code&gt; &lt;/a&gt;の方法&lt;a href=&quot;../nio/channels/filechannel&quot;&gt; &lt;code&gt;FileChannel&lt;/code&gt; &lt;/a&gt;の引数を渡して、クラス &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; 、彼らは常にすべてのI / O操作に適用されますので、多くの場合、より効率的であることを除いて、それぞれ。ファイルがローカルストレージデバイス上にある場合、このクラスのメソッドの呼び出しが返されると、その呼び出しによってファイルに加えられたすべての変更がそのデバイスに書き込まれることが保証されます。これは、システムがクラッシュした場合に重要な情報が失われないようにするのに役立ちます。ファイルがローカルデバイスにない場合、そのような保証はありません。</target>
        </trans-unit>
        <trans-unit id="5aac2f6058d827131417bfcfef8dc2eb4bdbda46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;/code&gt; relation does not provide a total order on all double values: &lt;code&gt;-0.0d == 0.0d&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and a &lt;code&gt;Double.NaN&lt;/code&gt; value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method &lt;a href=&quot;../lang/double#compareTo-java.lang.Double-&quot;&gt;&lt;code&gt;Double.compareTo(java.lang.Double)&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;-0.0d&lt;/code&gt; is treated as less than value &lt;code&gt;0.0d&lt;/code&gt; and &lt;code&gt;Double.NaN&lt;/code&gt; is considered greater than any other value and all &lt;code&gt;Double.NaN&lt;/code&gt; values are considered equal.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; 関係は、すべての二重値にトータル順序を提供しない。 &lt;code&gt;-0.0d == 0.0d&lt;/code&gt; で &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;Double.NaN&lt;/code&gt; の偶数自体、値がより大きい、よりどちらも少ない比較なく、また任意の値に等しいです。このメソッドは、メソッド&lt;a href=&quot;../lang/double#compareTo-java.lang.Double-&quot;&gt; &lt;code&gt;Double.compareTo(java.lang.Double)&lt;/code&gt; &lt;/a&gt;によって課された合計順序を使用します。 &lt;code&gt;-0.0d&lt;/code&gt; は値 &lt;code&gt;0.0d&lt;/code&gt; 未満として処理され、 &lt;code&gt;Double.NaN&lt;/code&gt; は他のどの値よりも大きいと見なされ、すべての &lt;code&gt;Double.NaN&lt;/code&gt; 値は等しいと見なされます。</target>
        </trans-unit>
        <trans-unit id="6758eacaf6eafc7546dec5d6a98b3ed7630fdb8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;/code&gt; relation does not provide a total order on all float values: &lt;code&gt;-0.0f == 0.0f&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and a &lt;code&gt;Float.NaN&lt;/code&gt; value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method &lt;a href=&quot;../lang/float#compareTo-java.lang.Float-&quot;&gt;&lt;code&gt;Float.compareTo(java.lang.Float)&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;-0.0f&lt;/code&gt; is treated as less than value &lt;code&gt;0.0f&lt;/code&gt; and &lt;code&gt;Float.NaN&lt;/code&gt; is considered greater than any other value and all &lt;code&gt;Float.NaN&lt;/code&gt; values are considered equal.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; 関係は、すべての浮動小数点値にトータル順序を提供しない。 &lt;code&gt;-0.0f == 0.0f&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;Float.NaN&lt;/code&gt; の値はどちらも以下より大きく、より比較しない、またさえ自体の任意の値、に等しいです。このメソッドは、メソッド&lt;a href=&quot;../lang/float#compareTo-java.lang.Float-&quot;&gt; &lt;code&gt;Float.compareTo(java.lang.Float)&lt;/code&gt; &lt;/a&gt;によって課された合計順序を使用します。 &lt;code&gt;-0.0f&lt;/code&gt; は値 &lt;code&gt;0.0f&lt;/code&gt; 未満として扱われ、 &lt;code&gt;Float.NaN&lt;/code&gt; は他のどの値よりも大きいと見なされ、すべての &lt;code&gt;Float.NaN&lt;/code&gt; 値は等しいと見なされます。</target>
        </trans-unit>
        <trans-unit id="566defc53a29dd2c6f74968329502b0e504d1e15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'-'&lt;/code&gt; flag defined for &lt;a href=&quot;#dFlags&quot;&gt;General conversions&lt;/a&gt; applies. If any other flags are provided, then a &lt;a href=&quot;formatflagsconversionmismatchexception&quot;&gt;&lt;code&gt;FormatFlagsConversionMismatchException&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;'-'&lt;/code&gt; に対して定義されたフラグ&lt;a href=&quot;#dFlags&quot;&gt;一般的な変換が&lt;/a&gt;適用されます。他のフラグが指定されている場合、&lt;a href=&quot;formatflagsconversionmismatchexception&quot;&gt; &lt;code&gt;FormatFlagsConversionMismatchException&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="ea48ab5aaeaf4194edab0eb91c4845bbde6ed392" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'-'&lt;/code&gt; flag defined for &lt;a href=&quot;#dFlags&quot;&gt;General conversions&lt;/a&gt; applies. If the &lt;code&gt;'#'&lt;/code&gt; flag is given, then a &lt;a href=&quot;formatflagsconversionmismatchexception&quot;&gt;&lt;code&gt;FormatFlagsConversionMismatchException&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;'-'&lt;/code&gt; に対して定義されたフラグ&lt;a href=&quot;#dFlags&quot;&gt;一般的な変換が&lt;/a&gt;適用されます。場合は &lt;code&gt;'#'&lt;/code&gt; フラグが指定され、その後、&lt;a href=&quot;formatflagsconversionmismatchexception&quot;&gt; &lt;code&gt;FormatFlagsConversionMismatchException&lt;/code&gt; が&lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="803c87810da3137c31c3b9569aa0cdd88a5236f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**&lt;/code&gt; characters matches zero or more &lt;a href=&quot;../../lang/character&quot;&gt;&lt;code&gt;characters&lt;/code&gt;&lt;/a&gt; crossing directory boundaries.</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; 文字は、ゼロ個以上一致する&lt;a href=&quot;../../lang/character&quot;&gt; &lt;code&gt;characters&lt;/code&gt; &lt;/a&gt;のディレクトリの境界を横断します。</target>
        </trans-unit>
        <trans-unit id="bdc9ec98d6c3e53fb7a51d01e995f914de002527" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt; character matches zero or more &lt;a href=&quot;../../lang/character&quot;&gt;&lt;code&gt;characters&lt;/code&gt;&lt;/a&gt; of a &lt;a href=&quot;path#getName-int-&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; component without crossing directory boundaries.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 文字は、ゼロ個以上の一致する&lt;a href=&quot;../../lang/character&quot;&gt; &lt;code&gt;characters&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;path#getName-int-&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;ディレクトリの境界を横断せずにコンポーネントを。</target>
        </trans-unit>
        <trans-unit id="56b1e692364ff3d0377ffb97e33a6452576a382f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;audiosystem&quot;&gt;&lt;code&gt;AudioSystem&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; class includes methods for determining the format of an audio file, obtaining an audio input stream from an audio file, and writing an audio file from an audio input stream.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;audiosystem&quot;&gt;&lt;code&gt;AudioSystem&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; クラスは、オーディオファイルからのオーディオ入力ストリームを取得し、オーディオファイルのフォーマットを決定するための方法を含み、オーディオ入力ストリームからオーディオファイルを書き込みます。</target>
        </trans-unit>
        <trans-unit id="bb56cab0d387af77b98e49727a7446f08b61aa9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system#exit-int-&quot;&gt;&lt;code&gt;System.exit&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method is the conventional and convenient means of invoking this method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system#exit-int-&quot;&gt;&lt;code&gt;System.exit&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のメソッドは、このメソッドを呼び出すのが一般的で便利です。</target>
        </trans-unit>
        <trans-unit id="b7e40741bd63e3e4d4e34f6ccfaaa185c2f108df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;ArbitraryText&lt;/em&gt;&lt;/code&gt; is any additional text that the connector server adds when creating the client id. At a minimum, it must be enough to distinguish this connection ID from the ID of any other connection currently opened by this connector server.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;ArbitraryText&lt;/em&gt;&lt;/code&gt; は、クライアントIDを作成する際にコネクタサーバーが追加されます任意の追加テキストです。少なくとも、この接続IDを、このコネクタサーバーによって現在開かれている他の接続のIDと区別するのに十分でなければなりません。</target>
        </trans-unit>
        <trans-unit id="57252451ad18df2276d94648faafb4c4918a4f22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;ClientAddress&lt;/em&gt;&lt;/code&gt; is the address and port of the connecting client, if these can be determined, otherwise nothing. The &lt;code&gt;&lt;em&gt;HostAddress&lt;/em&gt;&lt;/code&gt; is the Internet address of the host that the client is connecting from, in numeric or DNS form. Numeric IPv6 addresses are enclosed in square brackets &lt;code&gt;[]&lt;/code&gt;. The &lt;code&gt;&lt;em&gt;HostPort&lt;/em&gt;&lt;/code&gt; is the decimal port number that the client is connecting from.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;ClientAddress&lt;/em&gt;&lt;/code&gt; には、これらが、そうでない場合は何も決定できない場合は、接続しているクライアントのアドレスとポートです。 &lt;code&gt;&lt;em&gt;HostAddress&lt;/em&gt;&lt;/code&gt; はは、クライアントが数値またはDNS形式で、から接続しているホストのインターネットアドレスです。数値のIPv6アドレスは角括弧 &lt;code&gt;[]&lt;/code&gt; で囲まれています。 &lt;code&gt;&lt;em&gt;HostPort&lt;/em&gt;&lt;/code&gt; は、クライアントから接続していることを10進数のポート番号です。</target>
        </trans-unit>
        <trans-unit id="531c08ac15a131c27029679adeb81cf5ad5bec7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;ClientId&lt;/em&gt;&lt;/code&gt; is the identity of the client entity, typically a string returned by &lt;a href=&quot;jmxprincipal#getName--&quot;&gt;&lt;code&gt;JMXPrincipal.getName()&lt;/code&gt;&lt;/a&gt;. This string must not contain spaces.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;ClientId&lt;/em&gt;&lt;/code&gt; をは通常、クライアントエンティティのアイデンティティ、によって返される文字列である&lt;a href=&quot;jmxprincipal#getName--&quot;&gt; &lt;code&gt;JMXPrincipal.getName()&lt;/code&gt; &lt;/a&gt;。この文字列にはスペースを含めないでください。</target>
        </trans-unit>
        <trans-unit id="e5ea1882020edd1476b0a71f1c9d73fd0f805d1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;Protocol&lt;/em&gt;&lt;/code&gt; is a protocol that would be recognized by &lt;a href=&quot;jmxconnectorfactory&quot;&gt;&lt;code&gt;JMXConnectorFactory&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;Protocol&lt;/em&gt;&lt;/code&gt; によって認識されるプロトコルである&lt;a href=&quot;jmxconnectorfactory&quot;&gt; &lt;code&gt;JMXConnectorFactory&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b824fdb77864355409db5ed994fa82e5b5e6ca93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; and &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; can be omitted. The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; cannot be supplied without a &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; と &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; 省略することができます。 &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; なしで供給することができない &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a12722721e439b6dff600477a13341187efa0475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; in a user-provided &lt;code&gt;serviceURL&lt;/code&gt; is optional. If present, it is copied into the generated &lt;code&gt;JMXServiceURL&lt;/code&gt; but otherwise ignored. If absent, the generated &lt;code&gt;JXMServiceURL&lt;/code&gt; will have the local host name.</source>
          <target state="translated">ユーザー提供の &lt;code&gt;serviceURL&lt;/code&gt; の &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; はオプションです。存在する場合は、生成された &lt;code&gt;JMXServiceURL&lt;/code&gt; にコピーされますが、それ以外の場合は無視されます。存在しない場合、生成された &lt;code&gt;JXMServiceURL&lt;/code&gt; にはローカルホスト名が含まれます。</target>
        </trans-unit>
        <trans-unit id="bfa23af48503c6623afb1ad1711fefdb1632d2c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; is a host name, an IPv4 numeric host address, or an IPv6 numeric address enclosed in square brackets.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; ホスト名、IPv4の数値ホストアドレス、または角括弧で囲まれたIPv6数値アドレスです。</target>
        </trans-unit>
        <trans-unit id="2b0d7cc7b25ad83d3037b4dc212df848a1f89cd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; part of the returned string is the value returned by &lt;a href=&quot;jmxserviceurl#getHost--&quot;&gt;&lt;code&gt;getHost()&lt;/code&gt;&lt;/a&gt;. If that value specifies a numeric IPv6 address, it is surrounded by square brackets &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">返される文字列の &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; 部分は、&lt;a href=&quot;jmxserviceurl#getHost--&quot;&gt; &lt;code&gt;getHost()&lt;/code&gt; &lt;/a&gt;によって返される値です。その値が数値のIPv6アドレスを指定する場合は、角括弧 &lt;code&gt;[]&lt;/code&gt; で囲まれます。</target>
        </trans-unit>
        <trans-unit id="55c0575a0a5f3a8a03451fbe7153260d3ab2702e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; in a user-provided &lt;code&gt;serviceURL&lt;/code&gt; is also optional. If present, it is also copied into the generated &lt;code&gt;JMXServiceURL&lt;/code&gt;; otherwise, the generated &lt;code&gt;JMXServiceURL&lt;/code&gt; has no port. For an &lt;code&gt;serviceURL&lt;/code&gt; using the &lt;code&gt;rmi&lt;/code&gt; protocol, the &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt;, if present, indicates what port the generated remote object should be exported on. It has no other effect.</source>
          <target state="translated">ユーザー提供の &lt;code&gt;serviceURL&lt;/code&gt; の &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; もオプションです。存在する場合は、生成された &lt;code&gt;JMXServiceURL&lt;/code&gt; にもコピーされます。それ以外の場合、生成された &lt;code&gt;JMXServiceURL&lt;/code&gt; にはポートがありません。 &lt;code&gt;rmi&lt;/code&gt; プロトコルを使用する &lt;code&gt;serviceURL&lt;/code&gt; の場合、 &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; （存在する場合）は、生成されたリモートオブジェクトをエクスポートするポートを示します。他の効果はありません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f0c8f3bfcebe38f9f7e404fcfe049e036b34bcb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; is a decimal port number. 0 means a default or anonymous port, depending on the protocol.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; 10進数のポート番号です。0は、プロトコルに応じて、デフォルトまたは匿名のポートを意味します。</target>
        </trans-unit>
        <trans-unit id="aed5089fcc06d0b24df1a0c3d314b9e78f48e5cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; part of the returned string is the value returned by &lt;a href=&quot;jmxserviceurl#getPort--&quot;&gt;&lt;code&gt;getPort()&lt;/code&gt;&lt;/a&gt; in its shortest decimal form. If the value is zero, it is omitted.</source>
          <target state="translated">返される文字列の &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; 部分は、最短の10進形式で&lt;a href=&quot;jmxserviceurl#getPort--&quot;&gt; &lt;code&gt;getPort()&lt;/code&gt; &lt;/a&gt;によって返される値です。値がゼロの場合は省略されます。</target>
        </trans-unit>
        <trans-unit id="44dcc40e6319d73e55e0506b2a02c88d015d6e90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;protocol-version&lt;/em&gt;&lt;/code&gt; is a series of two or more non-negative integers separated by periods (&lt;code&gt;.&lt;/code&gt;). An implementation of the version described by this documentation must use the string &lt;code&gt;1.0&lt;/code&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;protocol-version&lt;/em&gt;&lt;/code&gt; ピリオドで区切られた2つ以上の非負整数の系列です（ &lt;code&gt;.&lt;/code&gt; ）。このドキュメントで説明されているバージョンの実装では、ここでは文字列 &lt;code&gt;1.0&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="51e5d21d788500cd8258dd52116920bb8d78aa5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;url-path&lt;/em&gt;&lt;/code&gt;, if any, begins with a slash (&lt;code&gt;/&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;) and continues to the end of the address. It can contain attributes using the semicolon syntax specified in RFC 2609. Those attributes are not parsed by this class and incorrect attribute syntax is not detected.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;url-path&lt;/em&gt;&lt;/code&gt; 、もしあれば、スラッシュ（始まる &lt;code&gt;/&lt;/code&gt; （）またはセミコロン &lt;code&gt;;&lt;/code&gt; ）とアドレスの終わりまで続きます。RFC 2609で指定されているセミコロン構文を使用して属性を含めることができます。これらの属性はこのクラスによって解析されず、不正な属性構文は検出されません。</target>
        </trans-unit>
        <trans-unit id="0cfefc52ce748f9328afa9b5dc72829a45465fa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; character matches exactly one character of a name component.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 文字は、名前コンポーネントの1文字と完全に一致します。</target>
        </trans-unit>
        <trans-unit id="86179c7113b7ca3e72607b93d89e62c19020820b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AccessControlContext&lt;/code&gt; may contain many Subjects (from nested &lt;code&gt;doAs&lt;/code&gt; calls). In this situation, the most recent &lt;code&gt;Subject&lt;/code&gt; associated with the &lt;code&gt;AccessControlContext&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;AccessControlContext&lt;/code&gt; には、（入れ子になったから、多くの被験者が含まれていてもよい &lt;code&gt;doAs&lt;/code&gt; 呼び出し）。この状況では、 &lt;code&gt;AccessControlContext&lt;/code&gt; に関連付けられた最新の &lt;code&gt;Subject&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b449118f305afa855458cabeb18c4cb51488d864" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; class is used to generate a set of parameters to be used with a certain algorithm.</source>
          <target state="translated">&lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; クラスは、特定のアルゴリズムで使用するパラメータのセットを生成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="21b1b496ebb21c6a19e568343413c663744b5d29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; class is used to generate a set of parameters to be used with a certain algorithm. Parameter generators are constructed using the &lt;code&gt;getInstance&lt;/code&gt; factory methods (static methods that return instances of a given class).</source>
          <target state="translated">&lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; クラスは、特定のアルゴリズムで使用するパラメータのセットを生成するために使用されます。パラメータジェネレータは、 &lt;code&gt;getInstance&lt;/code&gt; ファクトリメソッド（特定のクラスのインスタンスを返す静的メソッド）を使用して構築されます。</target>
        </trans-unit>
        <trans-unit id="60cf335e88d209716971b2d6c6b97342cea6ef52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Array&lt;/code&gt; class provides static methods to dynamically create and access Java arrays.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; クラスは、動的にJava配列を作成し、アクセスするためのstaticメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="e11780a48e0c2628760a60beb9af58fed7a0350b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;ArrayType&lt;/code&gt; クラスです</target>
        </trans-unit>
        <trans-unit id="abaabe6886264c20f473fa5053a5d55bc337750d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Attr&lt;/code&gt; node that was removed.</source>
          <target state="translated">&lt;code&gt;Attr&lt;/code&gt; 削除されたノード。</target>
        </trans-unit>
        <trans-unit id="5ef50051305c491e51d826eece91f5a67a7debbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Attr&lt;/code&gt; node with the specified attribute local name and namespace URI or &lt;code&gt;null&lt;/code&gt; if there is no such attribute.</source>
          <target state="translated">&lt;code&gt;Attr&lt;/code&gt; 指定された属性ローカル名と名前空間URIまたはを持つノード &lt;code&gt;null&lt;/code&gt; 該当する属性が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="7652a895a29f2647e0b2dd18893f6b4dc0e428cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Attr&lt;/code&gt; node with the specified name ( &lt;code&gt;nodeName&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt; if there is no such attribute.</source>
          <target state="translated">指定された名前（ &lt;code&gt;nodeName&lt;/code&gt; ）の &lt;code&gt;Attr&lt;/code&gt; ノード。そのような属性がない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a69dfdb305ce85fbed13fda0e8e19810074205f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Attr&lt;/code&gt; value as a string, or the empty string if that attribute does not have a specified or default value.</source>
          <target state="translated">文字列としての &lt;code&gt;Attr&lt;/code&gt; 値、またはその属性に指定値またはデフォルト値がない場合は空の文字列。</target>
        </trans-unit>
        <trans-unit id="f3aadc19c893a1efadaa932321d03e00dc3fdf32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AttributeSet&lt;/code&gt; interface is similar to the &lt;a href=&quot;../../../java/util/map&quot;&gt;Map&lt;/a&gt; interface: it provides a map of key to values, in which each key is unique and can contain no more than one value. However, the &lt;code&gt;AttributeSet&lt;/code&gt; interface is designed to specifically support the needs of the Java Print Service API. An &lt;code&gt;AttributeSet&lt;/code&gt; requires that:</source>
          <target state="translated">&lt;code&gt;AttributeSet&lt;/code&gt; インタフェースが同様である&lt;a href=&quot;../../../java/util/map&quot;&gt;マップ&lt;/a&gt;インタフェース：それは各キーは一意であり、1個以下の値を含むことが可能な、値にキーのマップを提供します。ただし、 &lt;code&gt;AttributeSet&lt;/code&gt; インターフェースは、Java印刷サービスAPIのニーズを具体的にサポートするように設計されています。アン &lt;code&gt;AttributeSet&lt;/code&gt; あることが必要です。</target>
        </trans-unit>
        <trans-unit id="8af784200eedb9bf3ff696e5dfcb898cc72bbe54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioFormat&lt;/code&gt; class accommodates a number of common sound-file encoding techniques, including pulse-code modulation (PCM), mu-law encoding, and a-law encoding. These encoding techniques are predefined, but service providers can create new encoding types. The encoding that a specific format uses is named by its &lt;code&gt;encoding&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;AudioFormat&lt;/code&gt; クラスは、パルス符号変調（PCM）、&amp;mu;-lawエンコーディング、および法則符号化を含む一般的な音声ファイルの符号化技術の数を収容します。これらのエンコーディング手法は事前定義されていますが、サービスプロバイダーは新しいエンコーディングタイプを作成できます。特定の形式が使用 &lt;code&gt;encoding&lt;/code&gt; は、そのエンコーディングフィールドによって名前が付けられます。</target>
        </trans-unit>
        <trans-unit id="d7fd077369e0845cac37ae324fe142bf62bb88be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioPermission&lt;/code&gt; class represents access rights to the audio system resources.</source>
          <target state="translated">&lt;code&gt;AudioPermission&lt;/code&gt; クラスは、オーディオシステムリソースへのアクセス権を表します。</target>
        </trans-unit>
        <trans-unit id="663f73601babca7fe9a3f57db471ad6b7380920c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioPermission&lt;/code&gt; class represents access rights to the audio system resources. An &lt;code&gt;AudioPermission&lt;/code&gt; contains a target name but no actions list; you either have the named permission or you don't.</source>
          <target state="translated">&lt;code&gt;AudioPermission&lt;/code&gt; クラスは、オーディオシステムリソースへのアクセス権を表します。アン &lt;code&gt;AudioPermission&lt;/code&gt; にはターゲット名が、アクションリストは持ちません。指定した権限があるか、ないかのどちらかです。</target>
        </trans-unit>
        <trans-unit id="64530a02f14561a54d873e43c58fb4f8735319fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioSystem&lt;/code&gt; class acts as the entry point to the sampled-audio system resources.</source>
          <target state="translated">&lt;code&gt;AudioSystem&lt;/code&gt; クラスは、サンプリングされたオーディオシステムリソースへのエントリポイントとして機能します。</target>
        </trans-unit>
        <trans-unit id="a212ac4197ad27334cc250327922918495c0a587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioSystem&lt;/code&gt; class acts as the entry point to the sampled-audio system resources. This class lets you query and access the mixers that are installed on the system. &lt;code&gt;AudioSystem&lt;/code&gt; includes a number of methods for converting audio data between different formats, and for translating between audio files and streams. It also provides a method for obtaining a &lt;code&gt;&lt;a href=&quot;line&quot;&gt;&lt;code&gt;Line&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; directly from the &lt;code&gt;AudioSystem&lt;/code&gt; without dealing explicitly with mixers.</source>
          <target state="translated">&lt;code&gt;AudioSystem&lt;/code&gt; クラスは、サンプリングされたオーディオシステムリソースへのエントリポイントとして機能します。このクラスを使用すると、システムにインストールされているミキサーを照会してアクセスできます。 &lt;code&gt;AudioSystem&lt;/code&gt; には、さまざまな形式間でオーディオデータを変換したり、オーディオファイルとストリーム間で変換したりするためのいくつかのメソッドが含まれています。また、ミキサーを明示的に &lt;code&gt;AudioSystem&lt;/code&gt; せずにAudioSystemから直接 &lt;code&gt;&lt;a href=&quot;line&quot;&gt;&lt;code&gt;Line&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を取得する方法も提供します。</target>
        </trans-unit>
        <trans-unit id="7af5ce7a31e2d4a27612651aee35e3f53a096d39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioSystem&lt;/code&gt; class includes many methods that manipulate &lt;code&gt;AudioInputStream&lt;/code&gt; objects. For example, the methods let you:</source>
          <target state="translated">&lt;code&gt;AudioSystem&lt;/code&gt; クラスには、操作する多くの方法が含ま &lt;code&gt;AudioInputStream&lt;/code&gt; オブジェクトを。たとえば、メソッドでは次のことができます。</target>
        </trans-unit>
        <trans-unit id="79cdc8d9c9f62ce1ec249481a0aed83f0d424285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BasicAttribute&lt;/code&gt; class by default uses &lt;code&gt;Object.equals()&lt;/code&gt; to determine equality of attribute values when testing for equality or when searching for values, &lt;em&gt;except&lt;/em&gt; when the value is an array. For an array, each element of the array is checked using &lt;code&gt;Object.equals()&lt;/code&gt;. Subclasses of &lt;code&gt;BasicAttribute&lt;/code&gt; can make use of schema information when doing similar equality checks by overriding methods in which such use of schema is meaningful. Similarly, the &lt;code&gt;BasicAttribute&lt;/code&gt; class by default returns the values passed to its constructor and/or manipulated using the add/remove methods. Subclasses of &lt;code&gt;BasicAttribute&lt;/code&gt; can override &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;getAll()&lt;/code&gt; to get the values dynamically from the directory (or implement the &lt;code&gt;Attribute&lt;/code&gt; interface directly instead of subclassing &lt;code&gt;BasicAttribute&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;BasicAttribute&lt;/code&gt; には、デフォルトでクラスが使用 &lt;code&gt;Object.equals()&lt;/code&gt; 、値を検索するときに等しいかどうかをテストする場合、または属性値の等価性を決定する&lt;em&gt;以外&lt;/em&gt;の値が配列である場合。配列の場合、配列の各要素は &lt;code&gt;Object.equals()&lt;/code&gt; を使用してチェックされます。 &lt;code&gt;BasicAttribute&lt;/code&gt; のサブクラスは、スキーマの使用が意味を持つメソッドをオーバーライドすることにより、同様の等価性チェックを行うときにスキーマ情報を利用できます。同様に、 &lt;code&gt;BasicAttribute&lt;/code&gt; クラスはデフォルトで、コンストラクターに渡された値、またはadd / removeメソッドを使用して操作された値を返します。サブクラス &lt;code&gt;BasicAttribute&lt;/code&gt; には、上書きすることができます &lt;code&gt;get()&lt;/code&gt; し、 &lt;code&gt;getAll()&lt;/code&gt; を使用して、ディレクトリから動的に値を取得します（または &lt;code&gt;BasicAttribute&lt;/code&gt; をサブクラス化する代わりに、 &lt;code&gt;Attribute&lt;/code&gt; インターフェースを直接実装します）。</target>
        </trans-unit>
        <trans-unit id="1e0315176a90eb1a609d30f4d425382cc748e5d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BeanContext&lt;/code&gt; from which this event was propagated</source>
          <target state="translated">&lt;code&gt;BeanContext&lt;/code&gt; このイベントが伝播されました</target>
        </trans-unit>
        <trans-unit id="fe4221cd8e13142dfdb7397e431e92d56077adb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BeanContext&lt;/code&gt; in which this &lt;code&gt;BeanContextChild&lt;/code&gt; is nested.</source>
          <target state="translated">&lt;code&gt;BeanContext&lt;/code&gt; このここで &lt;code&gt;BeanContextChild&lt;/code&gt; 入れ子になっています。</target>
        </trans-unit>
        <trans-unit id="7971f5d644f18176b75055fa2a5ace4dd309fa2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BigDecimal&lt;/code&gt; class gives its user complete control over rounding behavior. If no rounding mode is specified and the exact result cannot be represented, an exception is thrown; otherwise, calculations can be carried out to a chosen precision and rounding mode by supplying an appropriate &lt;a href=&quot;mathcontext&quot;&gt;&lt;code&gt;MathContext&lt;/code&gt;&lt;/a&gt; object to the operation. In either case, eight &lt;em&gt;rounding modes&lt;/em&gt; are provided for the control of rounding. Using the integer fields in this class (such as &lt;a href=&quot;bigdecimal#ROUND_HALF_UP&quot;&gt;&lt;code&gt;ROUND_HALF_UP&lt;/code&gt;&lt;/a&gt;) to represent rounding mode is largely obsolete; the enumeration values of the &lt;code&gt;RoundingMode&lt;/code&gt;&lt;code&gt;enum&lt;/code&gt;, (such as &lt;a href=&quot;roundingmode#HALF_UP&quot;&gt;&lt;code&gt;RoundingMode.HALF_UP&lt;/code&gt;&lt;/a&gt;) should be used instead.</source>
          <target state="translated">&lt;code&gt;BigDecimal&lt;/code&gt; クラスは、行動を丸め以上のユーザーを完全に制御することができます。丸めモードが指定されておらず、正確な結果を表現できない場合は、例外がスローされます。それ以外の場合は、適切な&lt;a href=&quot;mathcontext&quot;&gt; &lt;code&gt;MathContext&lt;/code&gt; &lt;/a&gt;オブジェクトを操作に提供することにより、選択した精度と丸めモードで計算を実行できます。どちらの場合も、&lt;em&gt;丸めを&lt;/em&gt;制御するために8つの&lt;em&gt;丸めモード&lt;/em&gt;が用意されています。このクラスの整数フィールド（&lt;a href=&quot;bigdecimal#ROUND_HALF_UP&quot;&gt; &lt;code&gt;ROUND_HALF_UP&lt;/code&gt; &lt;/a&gt;など）を使用して丸めモードを表すことは、ほとんど使用されていません。代わりに、 &lt;code&gt;RoundingMode&lt;/code&gt; &lt;code&gt;enum&lt;/code&gt; の列挙値（&lt;a href=&quot;roundingmode#HALF_UP&quot;&gt; &lt;code&gt;RoundingMode.HALF_UP&lt;/code&gt; &lt;/a&gt;など）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5fc7942056b3dd79609c5265cf98ecc9a0e3f371" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BigDecimal&lt;/code&gt; class provides operations for arithmetic, scale manipulation, rounding, comparison, hashing, and format conversion. The &lt;a href=&quot;bigdecimal#toString--&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method provides a canonical representation of a &lt;code&gt;BigDecimal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BigDecimal&lt;/code&gt; クラスは、算術、スケール操作、丸め、比較、ハッシング、およびフォーマット変換のための操作を提供します。&lt;a href=&quot;bigdecimal#toString--&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;メソッドは、正規表現の提供 &lt;code&gt;BigDecimal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df5a7760f638121c128fa1a36ad30ea0b851b272" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Binding&lt;/code&gt; class is actually a subclass of &lt;code&gt;NameClassPair&lt;/code&gt;, which consists simply of the object's name and the object's class name. The &lt;code&gt;NameClassPair&lt;/code&gt; is useful when you only want information about the object's class and do not want to pay the extra cost of getting the object.</source>
          <target state="translated">&lt;code&gt;Binding&lt;/code&gt; クラスは、実際のサブクラスである &lt;code&gt;NameClassPair&lt;/code&gt; に単にオブジェクトの名前とオブジェクトのクラス名で構成され、。 &lt;code&gt;NameClassPair&lt;/code&gt; には、あなただけのオブジェクトのクラスについての情報を必要とオブジェクトを得るための余分なコストを支払うことをしたくない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="0103dabbd8fe15655d49de0baddfafb3b9137bae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Binding&lt;/code&gt; class represents a name-to-object binding. It is a tuple containing the name of the bound object, the name of the object's class, and the object itself.</source>
          <target state="translated">&lt;code&gt;Binding&lt;/code&gt; クラスは、名前からオブジェクトへのバインディングを表します。これは、バインドされたオブジェクトの名前、オブジェクトのクラスの名前、およびオブジェクト自体を含むタプルです。</target>
        </trans-unit>
        <trans-unit id="b8bb72f6e0722cb808bbfd786520a48b7182c75e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bindings&lt;/code&gt; instances that are returned must be identical to those returned by the &lt;code&gt;getBindings&lt;/code&gt; method of &lt;code&gt;ScriptContext&lt;/code&gt; called with corresponding arguments on the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Bindings&lt;/code&gt; 返されるインスタンスは、によって返されたものと同一である必要があり &lt;code&gt;getBindings&lt;/code&gt; の方法 &lt;code&gt;ScriptContext&lt;/code&gt; デフォルトに対応する引数で呼び出さ &lt;code&gt;ScriptContext&lt;/code&gt; の &lt;code&gt;ScriptEngine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="05940c6482bc9cee8cceaf4e697300ed0675d5d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bindings&lt;/code&gt; of key/value pairs, referred to as the &quot;Global Scope&quot; maintained by the manager is available to all instances of &lt;code&gt;ScriptEngine&lt;/code&gt; created by the &lt;code&gt;ScriptEngineManager&lt;/code&gt;. The values in the &lt;code&gt;Bindings&lt;/code&gt; are generally exposed in all scripts.</source>
          <target state="translated">マネージャーによって維持される「グローバルスコープ」と呼ばれるキーと値のペアの &lt;code&gt;Bindings&lt;/code&gt; は、 &lt;code&gt;ScriptEngine&lt;/code&gt; Managerによって作成された &lt;code&gt;ScriptEngineManager&lt;/code&gt; すべてのインスタンスで使用できます。 &lt;code&gt;Bindings&lt;/code&gt; の値は通常、すべてのスクリプトで公開されます。</target>
        </trans-unit>
        <trans-unit id="c8872d0f95cad30df2b43f31fb08168cf4e82b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bindings&lt;/code&gt; with the specified scope.</source>
          <target state="translated">&lt;code&gt;Bindings&lt;/code&gt; 指定されたスコープを持ちます。</target>
        </trans-unit>
        <trans-unit id="2d60a6b49fd7f6573e55ea030a9ceb3013e12f74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Boolean&lt;/code&gt; object corresponding to the primitive value &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; プリミティブ値に対応するオブジェクト &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa5f6e88af022d56af88b562fb37e5a9055bbd43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Boolean&lt;/code&gt; object corresponding to the primitive value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; プリミティブな値に対応するオブジェクト &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e5bd3e90c98cafc96c3bffb7cdb5902ec05efc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BreakIterator&lt;/code&gt; class implements methods for finding the location of boundaries in text.</source>
          <target state="translated">&lt;code&gt;BreakIterator&lt;/code&gt; テキストにおける境界の位置を見つけるためのクラスが実装する方法。</target>
        </trans-unit>
        <trans-unit id="da13029d818efd6f3b22a9f5835a453fd292a681" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BreakIterator&lt;/code&gt; class implements methods for finding the location of boundaries in text. Instances of &lt;code&gt;BreakIterator&lt;/code&gt; maintain a current position and scan over text returning the index of characters where boundaries occur. Internally, &lt;code&gt;BreakIterator&lt;/code&gt; scans text using a &lt;code&gt;CharacterIterator&lt;/code&gt;, and is thus able to scan text held by any object implementing that protocol. A &lt;code&gt;StringCharacterIterator&lt;/code&gt; is used to scan &lt;code&gt;String&lt;/code&gt; objects passed to &lt;code&gt;setText&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BreakIterator&lt;/code&gt; テキストにおける境界の位置を見つけるためのクラスが実装する方法。 &lt;code&gt;BreakIterator&lt;/code&gt; のインスタンスは現在の位置を維持し、境界が発生する文字のインデックスを返すテキストをスキャンします。内部的には、 &lt;code&gt;BreakIterator&lt;/code&gt; は &lt;code&gt;CharacterIterator&lt;/code&gt; を使用してテキストをスキャンするため、そのプロトコルを実装するオブジェクトが保持するテキストをスキャンできます。 A &lt;code&gt;StringCharacterIterator&lt;/code&gt; スキャンするために使用される &lt;code&gt;String&lt;/code&gt; に渡されたオブジェクト &lt;code&gt;setText&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8175672c5ab8c55357d73bfb557350df91b702a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BreakIterator&lt;/code&gt; instances returned by the factory methods of this class are intended for use with natural languages only, not for programming language text. It is however possible to define subclasses that tokenize a programming language.</source>
          <target state="translated">&lt;code&gt;BreakIterator&lt;/code&gt; のこのクラスのファクトリメソッドによって返されるインスタンスだけではなく、言語テキストをプログラムするための自然言語での使用を目的としています。ただし、プログラミング言語をトークン化するサブクラスを定義することは可能です。</target>
        </trans-unit>
        <trans-unit id="26575ce7aa6f5dba044d1067a9237fc3d869b533" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Byte&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;byte&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Byte&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;byte&lt;/code&gt; のオブジェクトでは。</target>
        </trans-unit>
        <trans-unit id="daee07dd88e16b4a70774f8e2ee84b6a66a8d825" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Byte&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;byte&lt;/code&gt; in an object. An object of type &lt;code&gt;Byte&lt;/code&gt; contains a single field whose type is &lt;code&gt;byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Byte&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;byte&lt;/code&gt; のオブジェクトでは。タイプ &lt;code&gt;Byte&lt;/code&gt; のオブジェクトには、タイプが &lt;code&gt;byte&lt;/code&gt; である単一のフィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="c827bcb764af6d14358870b4c02cf9f314c2a1cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Calendar&lt;/code&gt; class is an abstract class that provides methods for converting between a specific instant in time and a set of &lt;a href=&quot;calendar#fields&quot;&gt;&lt;code&gt;calendar fields&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;, &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;, &lt;code&gt;HOUR&lt;/code&gt;, and so on, and for manipulating the calendar fields, such as getting the date of the next week.</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; クラスは、時間における特定の瞬間とのセットの間の変換のための方法を提供する抽象クラスである&lt;a href=&quot;calendar#fields&quot;&gt; &lt;code&gt;calendar fields&lt;/code&gt; &lt;/a&gt;など &lt;code&gt;YEAR&lt;/code&gt; 、 &lt;code&gt;MONTH&lt;/code&gt; 、 &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; 、 &lt;code&gt;HOUR&lt;/code&gt; など、そしてそのような日付を取得するようカレンダフィールドを操作します来週の。</target>
        </trans-unit>
        <trans-unit id="e16a5c9a51c0c49e784ca00cfe336ed3439953f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Calendar&lt;/code&gt; class is an abstract class that provides methods for converting between a specific instant in time and a set of &lt;a href=&quot;calendar#fields&quot;&gt;&lt;code&gt;calendar fields&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;, &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;, &lt;code&gt;HOUR&lt;/code&gt;, and so on, and for manipulating the calendar fields, such as getting the date of the next week. An instant in time can be represented by a millisecond value that is an offset from the &lt;a name=&quot;Epoch&quot;&gt;&lt;em&gt;Epoch&lt;/em&gt;&lt;/a&gt;, January 1, 1970 00:00:00.000 GMT (Gregorian).</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; クラスは、時間における特定の瞬間とのセットの間の変換のための方法を提供する抽象クラスである&lt;a href=&quot;calendar#fields&quot;&gt; &lt;code&gt;calendar fields&lt;/code&gt; &lt;/a&gt;など &lt;code&gt;YEAR&lt;/code&gt; 、 &lt;code&gt;MONTH&lt;/code&gt; 、 &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; 、 &lt;code&gt;HOUR&lt;/code&gt; など、そしてそのような日付を取得するようカレンダフィールドを操作します来週の。時間における瞬間からオフセットされたミリ秒の値で表すことができる&lt;a name=&quot;Epoch&quot;&gt;&lt;em&gt;エポック&lt;/em&gt;&lt;/a&gt;：00：00.000 GMT（グレゴリオ）、1970年1月1日00。</target>
        </trans-unit>
        <trans-unit id="46f676ce0c4f91d6ea5cdaa0c0eeb686651fe70a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Calendar&lt;/code&gt; parameters are the values represented by the &lt;code&gt;isLenient&lt;/code&gt;, &lt;code&gt;getFirstDayOfWeek&lt;/code&gt;, &lt;code&gt;getMinimalDaysInFirstWeek&lt;/code&gt; and &lt;code&gt;getTimeZone&lt;/code&gt; methods. If there is any difference in those parameters between the two &lt;code&gt;Calendar&lt;/code&gt;s, this method returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; パラメータは、で表される値である &lt;code&gt;isLenient&lt;/code&gt; 、 &lt;code&gt;getFirstDayOfWeek&lt;/code&gt; 、 &lt;code&gt;getMinimalDaysInFirstWeek&lt;/code&gt; 、および &lt;code&gt;getTimeZone&lt;/code&gt; の方法。2つの &lt;code&gt;Calendar&lt;/code&gt; の間でこれらのパラメーターに違いがある場合、このメソッドは &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="03f65fae6f6d35c57712e1b5d06c5ce4521fef51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Callable&lt;/code&gt; interface is similar to &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;, in that both are designed for classes whose instances are potentially executed by another thread. A &lt;code&gt;Runnable&lt;/code&gt;, however, does not return a result and cannot throw a checked exception.</source>
          <target state="translated">&lt;code&gt;Callable&lt;/code&gt; インタフェースは同様である&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; &lt;/a&gt;の両方がそのインスタンス潜在的に別のスレッドによって実行されるクラスのために設計されているという点で、。A &lt;code&gt;Runnable&lt;/code&gt; 、しかし、結果を返さないとチェック例外をスローすることはできません。</target>
        </trans-unit>
        <trans-unit id="2fd30e66fda8ef1c3878a705a006694493584387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CertPath&lt;/code&gt; specified must be of a type that is supported by the validation algorithm, otherwise an &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; will be thrown. For example, a &lt;code&gt;CertPathValidator&lt;/code&gt; that implements the PKIX algorithm validates &lt;code&gt;CertPath&lt;/code&gt; objects of type X.509.</source>
          <target state="translated">&lt;code&gt;CertPath&lt;/code&gt; 検証アルゴリズムによってサポートされているタイプである必要があり、指定は、そうでない場合 &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; ががスローされます。例えば、 &lt;code&gt;CertPathValidator&lt;/code&gt; PKIXアルゴリズムが検証実装する &lt;code&gt;CertPath&lt;/code&gt; タイプX.509のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="36926f67fdea989d87063408fa653e4dfdb427d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CertStore&lt;/code&gt; that is returned is initialized with the specified &lt;code&gt;CertStoreParameters&lt;/code&gt;. The type of parameters needed may vary between different types of &lt;code&gt;CertStore&lt;/code&gt;s. Note that the specified &lt;code&gt;CertStoreParameters&lt;/code&gt; object is cloned.</source>
          <target state="translated">&lt;code&gt;CertStore&lt;/code&gt; 返された指定で初期化され &lt;code&gt;CertStoreParameters&lt;/code&gt; 。必要なパラメータのタイプは、 &lt;code&gt;CertStore&lt;/code&gt; のタイプによって異なる場合があります。指定された &lt;code&gt;CertStoreParameters&lt;/code&gt; オブジェクトが複製されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="101822df3975adbcac61dad375ef170c3dd3f9ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Character&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;char&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Character&lt;/code&gt; クラスは、プリミティブ型の値ラップ &lt;code&gt;char&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="806bb96887766953bebd866e27ce9d8da08b4334" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Character&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;char&lt;/code&gt; in an object. An object of type &lt;code&gt;Character&lt;/code&gt; contains a single field whose type is &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Character&lt;/code&gt; クラスは、プリミティブ型の値ラップ &lt;code&gt;char&lt;/code&gt; オブジェクトです。タイプ &lt;code&gt;Character&lt;/code&gt; のオブジェクトには、タイプが &lt;code&gt;char&lt;/code&gt; である単一フィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="ba3268238d079e4b2a6a12991e41beae19670cb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChronoField&lt;/code&gt; date and time fields are re-resolved. This allows fields in step four to produce &lt;code&gt;ChronoField&lt;/code&gt; values and have them be processed into dates and times.</source>
          <target state="translated">&lt;code&gt;ChronoField&lt;/code&gt; の日付と時刻のフィールドは再解決されます。これにより、ステップ4のフィールドで &lt;code&gt;ChronoField&lt;/code&gt; 値を生成し、それらを日付と時刻に処理することができます。</target>
        </trans-unit>
        <trans-unit id="96e6680c1b998ca327d4d17aedbccdccc167dbcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChronoField&lt;/code&gt; date fields are resolved. This is achieved using &lt;a href=&quot;../chrono/chronology#resolveDate-java.util.Map-java.time.format.ResolverStyle-&quot;&gt;&lt;code&gt;Chronology.resolveDate(Map, ResolverStyle)&lt;/code&gt;&lt;/a&gt;. Documentation about field resolution is located in the implementation of &lt;code&gt;Chronology&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ChronoField&lt;/code&gt; の日付フィールドが解決されます。これは&lt;a href=&quot;../chrono/chronology#resolveDate-java.util.Map-java.time.format.ResolverStyle-&quot;&gt; &lt;code&gt;Chronology.resolveDate(Map, ResolverStyle)&lt;/code&gt; &lt;/a&gt;を使用して実現されます。フィールド解決に関するドキュメントは、 &lt;code&gt;Chronology&lt;/code&gt; の実装にあります。</target>
        </trans-unit>
        <trans-unit id="89d1beeae57332f5351b6ab29fde209df635e987" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChronoField&lt;/code&gt; time fields are resolved. This is documented on &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt; and is the same for all chronologies.</source>
          <target state="translated">&lt;code&gt;ChronoField&lt;/code&gt; の時間フィールドが解決されます。これは&lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; に&lt;/a&gt;記載されており、すべての年表で同じです。</target>
        </trans-unit>
        <trans-unit id="82381a07b897d845e38a8fb6d968a572a981dcd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Chronology&lt;/code&gt; instance provides a set of methods to create &lt;code&gt;ChronoLocalDate&lt;/code&gt; instances. The date classes are used to manipulate specific dates.</source>
          <target state="translated">&lt;code&gt;Chronology&lt;/code&gt; インスタンスを作成するメソッドのセットを提供 &lt;code&gt;ChronoLocalDate&lt;/code&gt; のインスタンス。日付クラスは、特定の日付を操作するために使用されます。</target>
        </trans-unit>
        <trans-unit id="b67dfb19ed132a488f7220fb4dc014c909b089ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Chronology&lt;/code&gt; represents the calendar system in use. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time.</source>
          <target state="translated">&lt;code&gt;Chronology&lt;/code&gt; 使用中のカレンダーシステムを表します。ISO-8601カレンダーシステムは、世界のほとんどで現在使用されている現代の民間カレンダーシステムです。これは、うるう年の今日の規則がすべての時間に適用される、先天的なグレゴリオ暦システムに相当します。</target>
        </trans-unit>
        <trans-unit id="4197e57743f21fd2a15f8483e9ed9b922aac9ed3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Chronology&lt;/code&gt; represents the calendar system in use. The era and other fields in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt; are defined by the chronology.</source>
          <target state="translated">&lt;code&gt;Chronology&lt;/code&gt; 使用中のカレンダーシステムを表します。&lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; &lt;/a&gt;の時代とその他のフィールドは、年代学によって定義されます。</target>
        </trans-unit>
        <trans-unit id="9ec2677d771f2243453abd3744eafeaaa8cc23f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; プリミティブ型を表すインスタンス &lt;code&gt;byte&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5d8434bc0489103ac32d773f7b0d5d3c71265f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; プリミティブ型を表すインスタンス &lt;code&gt;char&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0b196d2877a10ae544eb517c91cdc98d354fe55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; プリミティブ型を表すインスタンス &lt;code&gt;double&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3fc9063456a087c6ae2a09f36b8c79ce72af8fe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; プリミティブ型を表すインスタンス &lt;code&gt;float&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="843262d0d1248a1926078c82957df1906c06c701" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; プリミティブ型を表すインスタンス &lt;code&gt;int&lt;/code&gt; 型。</target>
        </trans-unit>
        <trans-unit id="f85e50e9d096ed50998edbe6558f68b79f3e5d09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; プリミティブ型を表すインスタンス &lt;code&gt;long&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06ed2f03cfacda7175bed94156559a38e6923b0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; プリミティブ型を表すインスタンス &lt;code&gt;short&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bddc54347ed58d9c0c85b45c41a02b37fd779ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object created from the data, and optional &lt;code&gt;ProtectionDomain&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; データから作成されたオブジェクト、およびオプション &lt;code&gt;ProtectionDomain&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e690995fffbb2c3b6c4761982fccbec41cd68fda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object for the specified &lt;code&gt;name&lt;/code&gt;</source>
          <target state="translated">指定された &lt;code&gt;name&lt;/code&gt; の &lt;code&gt;Class&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="23dcb43f82d588ed515276419645673633932ecc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object representing the pseudo-type corresponding to the keyword &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; キーワードに対応する擬似型を表すオブジェクト &lt;code&gt;void&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d08a4d00bff7d8642e575b877c58fa1bcc6f66c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object that represents the runtime class of this object.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; このオブジェクトの実行時のクラスを表すオブジェクト。</target>
        </trans-unit>
        <trans-unit id="1a36611cde5a9560399b57b3e163d1767e367923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object that was created from the specified class data</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 指定されたクラスデータから作成されたオブジェクト</target>
        </trans-unit>
        <trans-unit id="f80f806d21a19e64a5fdd872d0ac53f89e33de6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object that was created from the specified class data.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 指定されたクラスデータから作成されたオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4584f55b815597f64d3b967ed1a51e3f17ff42f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object, or &lt;code&gt;null&lt;/code&gt; if the class has not been loaded</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; オブジェクト。クラスがロードされていない場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53769dc20c24f269ab332a337f22729fbb2a017c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ClassLoader&lt;/code&gt; class uses a delegation model to search for classes and resources. Each instance of &lt;code&gt;ClassLoader&lt;/code&gt; has an associated parent class loader. When requested to find a class or resource, a &lt;code&gt;ClassLoader&lt;/code&gt; instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine's built-in class loader, called the &quot;bootstrap class loader&quot;, does not itself have a parent but may serve as the parent of a &lt;code&gt;ClassLoader&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;ClassLoader&lt;/code&gt; クラスは、クラスおよびリソースを検索するための委譲モデルを使用しています。 &lt;code&gt;ClassLoader&lt;/code&gt; の各インスタンスには、関連付けられた親クラスローダーがあります。クラスまたはリソースの検索を要求されると、 &lt;code&gt;ClassLoader&lt;/code&gt; インスタンスは、クラスまたはリソース自体を検索する前に、クラスまたはリソースの検索を親クラスローダーに委任します。「ブートストラップクラスローダー」と呼ばれる仮想マシンの組み込みクラスローダー自体には親はありませんが、 &lt;code&gt;ClassLoader&lt;/code&gt; インスタンスの親として機能する場合があります。</target>
        </trans-unit>
        <trans-unit id="7baf7494690c1ab3f8e2f12b250cac6e80e44abb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Clip&lt;/code&gt; interface represents a special kind of data line whose audio data can be loaded prior to playback, instead of being streamed in real time.</source>
          <target state="translated">&lt;code&gt;Clip&lt;/code&gt; インターフェースは、そのオーディオデータを再生する前にロードすることができ、代わりのものでリアルタイムでストリーミングデータ線の特別な種類を表します。</target>
        </trans-unit>
        <trans-unit id="07dd3f9173350c44103b58ad3909560986b18dcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CodecSet&lt;/code&gt; class creates and saves a single service instance at initialization:</source>
          <target state="translated">&lt;code&gt;CodecSet&lt;/code&gt; のクラスは、初期化時に、単一のサービスインスタンスを作成し、保存します。</target>
        </trans-unit>
        <trans-unit id="cf493d6742a6c242a0b1d360dfba83fb4b87d243" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CollationElementIterator&lt;/code&gt; class is used as an iterator to walk through each character of an international string.</source>
          <target state="translated">&lt;code&gt;CollationElementIterator&lt;/code&gt; クラスは、各国語文字列の各文字を処理するときの反復子として使用されています。</target>
        </trans-unit>
        <trans-unit id="46ce50a913e7c2a368bfe8ae348e20f4b0760cdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CollationElementIterator&lt;/code&gt; class is used as an iterator to walk through each character of an international string. Use the iterator to return the ordering priority of the positioned character. The ordering priority of a character, which we refer to as a key, defines how a character is collated in the given collation object.</source>
          <target state="translated">&lt;code&gt;CollationElementIterator&lt;/code&gt; クラスは、各国語文字列の各文字を処理するときの反復子として使用されています。イテレータを使用して、配置された文字の優先順位を返します。キーと呼ばれる文字の優先順位は、特定の照合オブジェクトで文字を照合する方法を定義します。</target>
        </trans-unit>
        <trans-unit id="7933f59bdf875c37eb441af7f9a60a666a8d3fcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collator&lt;/code&gt; class performs locale-sensitive &lt;code&gt;String&lt;/code&gt; comparison.</source>
          <target state="translated">&lt;code&gt;Collator&lt;/code&gt; クラスを行うには、ロケールに依存する &lt;code&gt;String&lt;/code&gt; を比較します。</target>
        </trans-unit>
        <trans-unit id="bb398f128eef70308b7f92e45e6eb18ce6533c73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collator&lt;/code&gt; class performs locale-sensitive &lt;code&gt;String&lt;/code&gt; comparison. You use this class to build searching and sorting routines for natural language text.</source>
          <target state="translated">&lt;code&gt;Collator&lt;/code&gt; クラスを行うには、ロケールに依存する &lt;code&gt;String&lt;/code&gt; を比較します。このクラスを使用して、自然言語テキストの検索とソートのルーチンを作成します。</target>
        </trans-unit>
        <trans-unit id="ff9824bbcacb67b79596d130b57096444e5903bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collection&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; copied. Instead, a reference is used. This allows the caller to subsequently add or remove &lt;code&gt;Certificates&lt;/code&gt; or &lt;code&gt;CRL&lt;/code&gt;s from the &lt;code&gt;Collection&lt;/code&gt;, thus changing the set of &lt;code&gt;Certificates&lt;/code&gt; or &lt;code&gt;CRL&lt;/code&gt;s available to the Collection &lt;code&gt;CertStore&lt;/code&gt;. The Collection &lt;code&gt;CertStore&lt;/code&gt; will not modify the contents of the &lt;code&gt;Collection&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Collection&lt;/code&gt; されて&lt;b&gt;いない&lt;/b&gt;コピー。代わりに、参照が使用されます。これは、呼び出し側が、その後追加または削除することができます &lt;code&gt;Certificates&lt;/code&gt; や &lt;code&gt;CRL&lt;/code&gt; からSの &lt;code&gt;Collection&lt;/code&gt; ので、一連の変更、 &lt;code&gt;Certificates&lt;/code&gt; や &lt;code&gt;CRL&lt;/code&gt; のコレクションに利用できる &lt;code&gt;CertStore&lt;/code&gt; 。コレクション &lt;code&gt;CertStore&lt;/code&gt; の内容は変更されません &lt;code&gt;Collection&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e13ccfa1d055a7b6b34e9e36830f7d323272c74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ColorModel&lt;/code&gt; to be used as a prototype.</source>
          <target state="translated">&lt;code&gt;ColorModel&lt;/code&gt; のプロトタイプとして使用します。</target>
        </trans-unit>
        <trans-unit id="c82336186c250b7812d70c226ebe5d94f5b9c56d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; class is provided to support Java-to-native-code compilers and related services.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; クラスは、Javaからネイティブコードコンパイラおよび関連サービスをサポートするために提供されます。</target>
        </trans-unit>
        <trans-unit id="5baf789bd5f3f16f61d707fd5b133cbba7948544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; class is provided to support Java-to-native-code compilers and related services. By design, the &lt;code&gt;Compiler&lt;/code&gt; class does nothing; it serves as a placeholder for a JIT compiler implementation.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; クラスは、Javaからネイティブコードコンパイラおよび関連サービスをサポートするために提供されます。設計上、 &lt;code&gt;Compiler&lt;/code&gt; クラスは何もしません。これは、JITコンパイラー実装のプレースホルダーとして機能します。</target>
        </trans-unit>
        <trans-unit id="7a10136967e2d7cca0ff7de90479711b3afa89dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CompositeData&lt;/code&gt; interface specifies the behavior of a specific type of complex</source>
          <target state="translated">&lt;code&gt;CompositeData&lt;/code&gt; インタフェースは、複雑な特定のタイプの動作を指定します</target>
        </trans-unit>
        <trans-unit id="430611e20757b0f69b3d3c4ac8a5e89a65ae2e00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CompositeDataSupport&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;CompositeDataSupport&lt;/code&gt; クラスです</target>
        </trans-unit>
        <trans-unit id="b09b9ac999e11e7f7254865f0fdfb600871077d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CompositeType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;CompositeType&lt;/code&gt; クラスです</target>
        </trans-unit>
        <trans-unit id="c17feb321bde2a79f87864039c7202bea866d7a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CompositeType&lt;/code&gt; that will appear in the &lt;code&gt;openType&lt;/code&gt; field of the &lt;a href=&quot;../descriptor&quot;&gt;&lt;code&gt;Descriptor&lt;/code&gt;&lt;/a&gt; for an attribute or operation of this type will show only the &lt;code&gt;units&lt;/code&gt; item, but the actual &lt;code&gt;CompositeData&lt;/code&gt; that is generated will have both &lt;code&gt;units&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CompositeType&lt;/code&gt; に表示される &lt;code&gt;openType&lt;/code&gt; のフィールド&lt;a href=&quot;../descriptor&quot;&gt; &lt;code&gt;Descriptor&lt;/code&gt; &lt;/a&gt;のみが表示され、このタイプの属性または操作のための &lt;code&gt;units&lt;/code&gt; アイテムを、実際 &lt;code&gt;CompositeData&lt;/code&gt; の両方があります生成される &lt;code&gt;units&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4f8fc7d40062e4c808ea460664fdc3d048a2824" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ConsoleHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values).</source>
          <target state="translated">&lt;code&gt;ConsoleHandler&lt;/code&gt; は、に基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; プロパティ（またはそのデフォルト値）。</target>
        </trans-unit>
        <trans-unit id="468370b0a51ca057342fdb1fe58204389f4fdab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Constructor&lt;/code&gt; object for the constructor with the specified parameter list</source>
          <target state="translated">&lt;code&gt;Constructor&lt;/code&gt; 指定されたパラメータリストを持つコンストラクタのオブジェクト</target>
        </trans-unit>
        <trans-unit id="bfe2741b9b06f16764928ba36a45cb667f568913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentHandlerFactory&lt;/code&gt; instance is used to construct a content handler from a content type</source>
          <target state="translated">&lt;code&gt;ContentHandlerFactory&lt;/code&gt; をインスタンスは、コンテンツタイプからコンテンツ・ハンドラを構築するために使用されます</target>
        </trans-unit>
        <trans-unit id="6e23ef999b2d94dd091ae6002a808cf050bfabb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ControllerEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;Sequencer&lt;/code&gt; has processed a requested type of MIDI control-change event.</source>
          <target state="translated">&lt;code&gt;ControllerEventListener&lt;/code&gt; のインタフェースは、そのインスタンスの場合に通知する必要があるクラスによって実装される必要があり &lt;code&gt;Sequencer&lt;/code&gt; MIDIコントロール・チェンジ・イベントの要求タイプを処理しました。</target>
        </trans-unit>
        <trans-unit id="f48b495c5fff66a44f844b4e81d54ec584a1e19d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ControllerEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;Sequencer&lt;/code&gt; has processed a requested type of MIDI control-change event. To register a &lt;code&gt;ControllerEventListener&lt;/code&gt; object to receive such notifications, invoke the &lt;a href=&quot;sequencer#addControllerEventListener-javax.sound.midi.ControllerEventListener-int:A-&quot;&gt;&lt;code&gt;addControllerEventListener&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Sequencer&lt;/code&gt;, specifying the types of MIDI controllers about which you are interested in getting control-change notifications.</source>
          <target state="translated">&lt;code&gt;ControllerEventListener&lt;/code&gt; のインタフェースは、そのインスタンスの場合に通知する必要があるクラスによって実装される必要があり &lt;code&gt;Sequencer&lt;/code&gt; MIDIコントロール・チェンジ・イベントの要求タイプを処理しました。このような通知を受け取るように &lt;code&gt;ControllerEventListener&lt;/code&gt; オブジェクトを登録するには、 &lt;code&gt;Sequencer&lt;/code&gt; の&lt;a href=&quot;sequencer#addControllerEventListener-javax.sound.midi.ControllerEventListener-int:A-&quot;&gt; &lt;code&gt;addControllerEventListener&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、コントロール変更通知を取得する対象のMIDIコントローラーのタイプを指定します。</target>
        </trans-unit>
        <trans-unit id="8c1e7fd606cd7d58420cac08a722d5a8762857c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CyclicBarrier&lt;/code&gt; uses an all-or-none breakage model for failed synchronization attempts: If a thread leaves a barrier point prematurely because of interruption, failure, or timeout, all other threads waiting at that barrier point will also leave abnormally via &lt;a href=&quot;brokenbarrierexception&quot;&gt;&lt;code&gt;BrokenBarrierException&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;../../lang/interruptedexception&quot;&gt;&lt;code&gt;InterruptedException&lt;/code&gt;&lt;/a&gt; if they too were interrupted at about the same time).</source>
          <target state="translated">&lt;code&gt;CyclicBarrier&lt;/code&gt; をは失敗した同期の試行のために全か無かの破損モデルを使用しています。途中であるため中断、失敗、またはタイムアウトのスレッド葉バリアポイント場合は、そのバリアポイントで待機している他のすべてのスレッドも経由して異常に残します&lt;a href=&quot;brokenbarrierexception&quot;&gt; &lt;code&gt;BrokenBarrierException&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;../../lang/interruptedexception&quot;&gt; &lt;code&gt;InterruptedException&lt;/code&gt; あります&lt;/a&gt;それらもほぼ同時に中断された場合）。</target>
        </trans-unit>
        <trans-unit id="f41cc015a47378ec64cceb98239ef99d458497d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataInput&lt;/code&gt; interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types.</source>
          <target state="translated">&lt;code&gt;DataInput&lt;/code&gt; 内のインタフェースは、バイナリストリームからバイトを読み取り、Javaプリミティブ型のいずれかでそれらのデータから再構成を提供します。</target>
        </trans-unit>
        <trans-unit id="713665bba38945d968dff6d6d30215a3f4b01909" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataInput&lt;/code&gt; interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types. There is also a facility for reconstructing a &lt;code&gt;String&lt;/code&gt; from data in &lt;a href=&quot;#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt; format.</source>
          <target state="translated">&lt;code&gt;DataInput&lt;/code&gt; 内のインタフェースは、バイナリストリームからバイトを読み取り、Javaプリミティブ型のいずれかでそれらのデータから再構成を提供します。&lt;a href=&quot;#modified-utf-8&quot;&gt;変更されたUTF-8&lt;/a&gt;形式のデータから &lt;code&gt;String&lt;/code&gt; を再構築する機能もあります。</target>
        </trans-unit>
        <trans-unit id="55a2923cd40c06c6ccaeab383d62605e85c6dfc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataOutput&lt;/code&gt; interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream.</source>
          <target state="translated">&lt;code&gt;DataOutput&lt;/code&gt; 内のインタフェースは、バイナリストリームにこれらのバイトをバイト一連のJavaプリミティブ型のいずれかからのデータを変換して書き込むために提供します。</target>
        </trans-unit>
        <trans-unit id="b1c1a548a4fef08005d8b50ede7de089c4162ad9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataOutput&lt;/code&gt; interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream. There is also a facility for converting a &lt;code&gt;String&lt;/code&gt; into &lt;a href=&quot;datainput#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt; format and writing the resulting series of bytes.</source>
          <target state="translated">&lt;code&gt;DataOutput&lt;/code&gt; 内のインタフェースは、バイナリストリームにこれらのバイトをバイト一連のJavaプリミティブ型のいずれかからのデータを変換して書き込むために提供します。変換するための設備もある &lt;code&gt;String&lt;/code&gt; に&lt;a href=&quot;datainput#modified-utf-8&quot;&gt;修飾されたUTF-8&lt;/a&gt;フォーマットとバイトの結果として生じる一連の書き込みが。</target>
        </trans-unit>
        <trans-unit id="bae5d85b0a42eaf39decbc0f3619a5ca6e1c5bca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; is a concrete implementation of the abstract &lt;code&gt;PersistenceDelegate&lt;/code&gt; class and is the delegate used by default for classes about which no information is available.</source>
          <target state="translated">&lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; は、抽象の具体的な実装である &lt;code&gt;PersistenceDelegate&lt;/code&gt; の固定のクラスあり、情報の得られないクラスがデフォルトで使用する委譲です。</target>
        </trans-unit>
        <trans-unit id="75831a1da7576e44d5307c7a6c20301c7e176c73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; is a concrete implementation of the abstract &lt;code&gt;PersistenceDelegate&lt;/code&gt; class and is the delegate used by default for classes about which no information is available. The &lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; provides, version resilient, public API-based persistence for classes that follow the JavaBeans&amp;trade; conventions without any class specific configuration.</source>
          <target state="translated">&lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; は、抽象の具体的な実装である &lt;code&gt;PersistenceDelegate&lt;/code&gt; の固定のクラスあり、情報の得られないクラスがデフォルトで使用する委譲です。 &lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; は、任意のクラスの具体的な構成なしのJavaBeans&amp;trade;の規則に従ったクラスのバージョン弾力性、公開APIベースの永続性を提供します。</target>
        </trans-unit>
        <trans-unit id="19c0a619c4b42fee2219550878c9a024c390cb05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DependsOn&lt;/code&gt; example might be coded as follows.</source>
          <target state="translated">&lt;code&gt;DependsOn&lt;/code&gt; 以下のように例では、符号化されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="65ab9904319fac8d824298c966242d71776b1070" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Descriptor&lt;/code&gt; for each of these objects will also have a field &lt;code&gt;originalType&lt;/code&gt; that is a string representing the Java type that appeared in the MXBean interface. The format of this string is described in the section &lt;a href=&quot;#type-names&quot;&gt;Type Names&lt;/a&gt; below.</source>
          <target state="translated">これらの各オブジェクトの &lt;code&gt;Descriptor&lt;/code&gt; には、MXBeanインターフェースに表示されたJavaタイプを表す文字列である &lt;code&gt;originalType&lt;/code&gt; フィールドもあります。この文字列の形式については、以下の「&lt;a href=&quot;#type-names&quot;&gt;タイプ名」&lt;/a&gt;のセクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="6f443be3508a6b4f42f8d8c9fdea432ec155aa3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Descriptor&lt;/code&gt; for the &lt;code&gt;MBeanInfo&lt;/code&gt; will have a field &lt;code&gt;mxbean&lt;/code&gt; whose value is the string &quot;&lt;code&gt;true&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;Descriptor&lt;/code&gt; のため &lt;code&gt;MBeanInfo&lt;/code&gt; 、フィールドがあります &lt;code&gt;mxbean&lt;/code&gt; 値が「文字列である &lt;code&gt;true&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="4f7dec71d977b06ccc515422e0d73eebb02b25d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dictionary&lt;/code&gt; class is the abstract parent of any class, such as &lt;code&gt;Hashtable&lt;/code&gt;, which maps keys to values.</source>
          <target state="translated">&lt;code&gt;Dictionary&lt;/code&gt; クラスには、次のような、任意のクラスの抽象親である &lt;code&gt;Hashtable&lt;/code&gt; のキーを値にマップ、。</target>
        </trans-unit>
        <trans-unit id="699c289ae38cf13e2c3626e341eabeb096b9a84c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dictionary&lt;/code&gt; class is the abstract parent of any class, such as &lt;code&gt;Hashtable&lt;/code&gt;, which maps keys to values. Every key and every value is an object. In any one &lt;code&gt;Dictionary&lt;/code&gt; object, every key is associated with at most one value. Given a &lt;code&gt;Dictionary&lt;/code&gt; and a key, the associated element can be looked up. Any non-&lt;code&gt;null&lt;/code&gt; object can be used as a key and as a value.</source>
          <target state="translated">&lt;code&gt;Dictionary&lt;/code&gt; クラスには、次のような、任意のクラスの抽象親である &lt;code&gt;Hashtable&lt;/code&gt; のキーを値にマップ、。すべてのキーとすべての値はオブジェクトです。1つの &lt;code&gt;Dictionary&lt;/code&gt; オブジェクトでは、すべてのキーが最大で1つの値に関連付けられています。与えられた &lt;code&gt;Dictionary&lt;/code&gt; とキーを、関連する要素が見上げることができます。 &lt;code&gt;null&lt;/code&gt; 以外のオブジェクトはすべて、キーおよび値として使用できます。</target>
        </trans-unit>
        <trans-unit id="ac8ca23a09be9f2d05c779e843421c46aa3ea44e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DirContext&lt;/code&gt; interface represents a &lt;em&gt;directory context&lt;/em&gt;. It defines methods for examining and updating attributes associated with a &lt;em&gt;directory object&lt;/em&gt;, or &lt;em&gt;directory entry&lt;/em&gt; as it is sometimes called.</source>
          <target state="translated">&lt;code&gt;DirContext&lt;/code&gt; インタフェースは表し&lt;em&gt;ディレクトリコンテキストを&lt;/em&gt;。&lt;em&gt;ディレクトリオブジェクト&lt;/em&gt;、または&lt;em&gt;ディレクトリエントリに&lt;/em&gt;関連付けられている属性を検査および更新するためのメソッドが定義されています。</target>
        </trans-unit>
        <trans-unit id="f0d66cda55834a4404c6ebd9f0fc24fcb8fcd600" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Double&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;double&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Double&lt;/code&gt; クラスは、プリミティブ型の値ラップ &lt;code&gt;double&lt;/code&gt; オブジェクトでを。</target>
        </trans-unit>
        <trans-unit id="d119dbf666fc6ea150e2c28f463b377c7a4b4f23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Double&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;double&lt;/code&gt; in an object. An object of type &lt;code&gt;Double&lt;/code&gt; contains a single field whose type is &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Double&lt;/code&gt; クラスは、プリミティブ型の値ラップ &lt;code&gt;double&lt;/code&gt; オブジェクトでを。タイプ &lt;code&gt;Double&lt;/code&gt; のオブジェクトには、タイプが &lt;code&gt;double&lt;/code&gt; の単一フィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="bd923e66451c09da1d3d4e1f6626a2df5c8337ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;ScriptContext&lt;/code&gt; contains the bindings of scripting variables to application objects to be used during this script execution.</source>
          <target state="translated">&lt;code&gt;ENGINE_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; の &lt;code&gt;ScriptContext&lt;/code&gt; アプリケーションオブジェクトへのスクリプト変数のバインディングは、このスクリプトの実行中に使用することが含まれています。</target>
        </trans-unit>
        <trans-unit id="7ac2a2597218d88488760abbe3572d583515c44b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERA&lt;/code&gt; field returns a range for the one valid Hijrah era.</source>
          <target state="translated">&lt;code&gt;ERA&lt;/code&gt; のフィールドは1つの、有効なHijrah時代の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="0000711917ddc5bd5d5eb440dd34fe945066b5e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class is static, so that all &lt;code&gt;AudioFormat&lt;/code&gt; objects that have the same encoding will refer to the same object (rather than different instances of the same class). This allows matches to be made by checking that two format's encodings are equal.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; クラスは、すべてのように、静的である &lt;code&gt;AudioFormat&lt;/code&gt; 同じ符号を持つオブジェクトは、（むしろ、同じクラスの異なるインスタンスよりも）同じオブジェクトを参照します。これにより、2つの形式のエンコーディングが等しいことを確認することで一致を確認できます。</target>
        </trans-unit>
        <trans-unit id="1a1ea0fb7e3f89b73df59f57bc0a3bb25057d04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class names the specific type of data representation used for an audio stream.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; クラスは、オーディオストリームに使用されるデータ表現の特定のタイプ。</target>
        </trans-unit>
        <trans-unit id="579a96ad9bfb2cbe0dbb67099e0bc3e08f52c25e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class names the specific type of data representation used for an audio stream. The encoding includes aspects of the sound format other than the number of channels, sample rate, sample size, frame rate, frame size, and byte order.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; クラスは、オーディオストリームに使用されるデータ表現の特定のタイプ。エンコーディングには、チャネル数、サンプルレート、サンプルサイズ、フレームレート、フレームサイズ、およびバイトオーダー以外のサウンド形式の側面が含まれます。</target>
        </trans-unit>
        <trans-unit id="c57bc9aa7ce02ee33576a9afbd97413544332913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventContext&lt;/code&gt; instance on which you invoke the registration methods is the &lt;em&gt;event source&lt;/em&gt; of the events that are (potentially) generated. The source is &lt;em&gt;not necessarily&lt;/em&gt; the object named by the target. Only when the target is the empty name is the object named by the target the source. In other words, the target, along with the scope parameter, are used to identify the object(s) that the listener is interested in, but the event source is the &lt;code&gt;EventContext&lt;/code&gt; instance with which the listener has registered.</source>
          <target state="translated">&lt;code&gt;EventContext&lt;/code&gt; ご登録メソッドを起動したインスタンスがある&lt;em&gt;イベントソース&lt;/em&gt;（潜在的に）生成されたイベントの。ソースは&lt;em&gt;、必ずしも&lt;/em&gt;ターゲットによって指定されたオブジェクトであるとは&lt;em&gt;限りません&lt;/em&gt;。ターゲットが空の名前の場合にのみ、オブジェクトはターゲットによってソースに名前が付けられます。つまり、スコープパラメータとともにターゲットを使用して、リスナーが関心を持っているオブジェクトを識別しますが、イベントソースは、リスナーが登録した &lt;code&gt;EventContext&lt;/code&gt; インスタンスです。</target>
        </trans-unit>
        <trans-unit id="0401b3ef0ddcd75a11b4100c749b173a19fed9a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventHandler&lt;/code&gt; class is intended to be used by interactive tools, such as application builders, that allow developers to make connections between beans. Typically connections are made from a user interface bean (the event &lt;em&gt;source&lt;/em&gt;) to an application logic bean (the &lt;em&gt;target&lt;/em&gt;). The most effective connections of this kind isolate the application logic from the user interface. For example, the &lt;code&gt;EventHandler&lt;/code&gt; for a connection from a &lt;code&gt;JCheckBox&lt;/code&gt; to a method that accepts a boolean value can deal with extracting the state of the check box and passing it directly to the method so that the method is isolated from the user interface layer.</source>
          <target state="translated">&lt;code&gt;EventHandler&lt;/code&gt; クラスは、開発者がBean間の接続を行うことができ、アプリケーション・ビルダーなどのインタラクティブなツール、で使用されることを意図しています。通常、接続はユーザーインターフェースBean（イベント&lt;em&gt;ソース&lt;/em&gt;）からアプリケーションロジックBean（&lt;em&gt;ターゲット&lt;/em&gt;）に行われます。この種の最も効果的な接続は、アプリケーションロジックをユーザーインターフェイスから分離します。たとえば、 &lt;code&gt;JCheckBox&lt;/code&gt; からブール値を受け入れるメソッドへの接続の &lt;code&gt;EventHandler&lt;/code&gt; は、チェックボックスの状態を抽出し、それをメソッドに直接渡すことで、メソッドがユーザーインターフェイス層から分離されるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="0a0c2cb5421950ae7ac855868e35820ff6dd57b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventHandler&lt;/code&gt; class provides support for dynamically generating event listeners whose methods execute a simple statement involving an incoming event object and a target object.</source>
          <target state="translated">&lt;code&gt;EventHandler&lt;/code&gt; クラスは、動的にメソッドを持つ受信イベントオブジェクトとターゲットオブジェクトを含んだ単純な文を実行するイベントリスナーを生成するためのサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="18ab01a7844cde2885367a84cc967515963ae74d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Executable&lt;/code&gt; declaring this parameter.</source>
          <target state="translated">&lt;code&gt;Executable&lt;/code&gt; このパラメータを宣言します。</target>
        </trans-unit>
        <trans-unit id="748442734a6da04d6ba765d11eb14f744d0ff842" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Executor&lt;/code&gt; implementations provided in this package implement &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt;, which is a more extensive interface. The &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; class provides an extensible thread pool implementation. The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class provides convenient factory methods for these Executors.</source>
          <target state="translated">&lt;code&gt;Executor&lt;/code&gt; このパッケージに設けられた実装は、実装&lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;より広範なインターフェースです。&lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; の&lt;/a&gt;クラスは、拡張可能なスレッドプールの実装を提供します。&lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt;クラスは、これらのエグゼキューターのための便利なファクトリメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="104e889b683697e2a1535a79c04ec73d00af897b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; can either write to a specified file, or it can write to a rotating set of files.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; のは、指定したファイルのいずれかの書き込みは、またはそれは、ファイルの回転セットに書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="c629d1686ef85f09a631d3c6d79e16eb2130db7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, and the file count is set to one.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; をに基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; 所定のパターンの引数は、ファイル名のパターンとして使用することを除いてプロパティ（またはそのデフォルト値）、ファイルの制限は、制限なしに設定され、ファイル数が1に設定されています。</target>
        </trans-unit>
        <trans-unit id="1630482434078ed5febe3695c2cacb2c6ab11a76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, the file count is set to one, and the append mode is set to the given &lt;code&gt;append&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; は、に基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; ファイル制限を無制限に設定され、ファイル数が1に設定され、追加モードが設定され、所定のパターンの引数がファイル名のパターンとして使用することを除いてプロパティ（またはそのデフォルト値）与えられた &lt;code&gt;append&lt;/code&gt; 引数に。</target>
        </trans-unit>
        <trans-unit id="87b15897d52aed2848665ab23e99dca1351949cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument, and the append mode is set to the given &lt;code&gt;append&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; は、に基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; 所定のパターン引数がファイル名のパターンとして使用されること、ファイルの制限を制限引数に設定され、ファイル・カウントが所定のカウント引数に設定されている以外のプロパティ（またはそのデフォルト値）、及び追加モードは、指定された &lt;code&gt;append&lt;/code&gt; 引数に設定されます。</target>
        </trans-unit>
        <trans-unit id="a5f603ee32e4c43503a06a42f3d23eed55051d61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; をに基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; 所定のパターンの引数は、ファイル名のパターンとして使用することを除いてプロパティ（またはそのデフォルト値）、ファイルの制限は制限引数に設定され、ファイルカウントが所定のカウント引数に設定されています。</target>
        </trans-unit>
        <trans-unit id="d9aef651c660cc7e3ebf06c721651629cdc87d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;float&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; クラスは、プリミティブ型の値ラップ &lt;code&gt;float&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="faf56435fef80020d3a74b994d56ec27fef71d7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;float&lt;/code&gt; in an object. An object of type &lt;code&gt;Float&lt;/code&gt; contains a single field whose type is &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; クラスは、プリミティブ型の値ラップ &lt;code&gt;float&lt;/code&gt; オブジェクトです。タイプ &lt;code&gt;Float&lt;/code&gt; のオブジェクトには、タイプが &lt;code&gt;float&lt;/code&gt; の単一フィールドが含まれています。</target>
        </trans-unit>
        <trans-unit id="ff1bf80c3497af61acd8a7e490e0a49fe5769bad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FloatControl&lt;/code&gt; abstract class provides methods to set and get the control's current floating-point value. Other methods obtain the possible range of values and the control's resolution (the smallest increment between returned values). Some float controls allow ramping to a new value over a specified period of time. &lt;code&gt;FloatControl&lt;/code&gt; also includes methods that return string labels for the minimum, maximum, and midpoint positions of the control.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; abstractクラスは、コントロールの現在の浮動小数点値を設定および取得するためのメソッドを提供します。他のメソッドは、可能な値の範囲とコントロールの解像度（戻り値間の最小の増分）を取得します。一部のフロートコントロールでは、指定された期間にわたって新しい値に傾斜できます。 &lt;code&gt;FloatControl&lt;/code&gt; には、コントロールの最小、最大、および中間点の位置の文字列ラベルを返すメソッドも含まれています。</target>
        </trans-unit>
        <trans-unit id="1cd58efa168d666747712c3d3c73a1908978fecc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FloatControl&lt;/code&gt; class has methods to impose a maximum and minimum allowable value for gain. However, because an audio signal might already be at a high amplitude, the maximum setting does not guarantee that the signal will be undistorted when the gain is applied to it (unless the maximum is zero or negative). To avoid numeric overflow from excessively large gain settings, a gain control can implement clipping, meaning that the signal's amplitude will be limited to the maximum value representable by its audio format, instead of wrapping around.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; のクラスは、利得の最大値と最小許容値を課す方法を有しています。ただし、オーディオ信号はすでに高い振幅になっている可能性があるため、最大設定では、ゲインが適用されたときに信号が歪まないことが保証されません（最大値がゼロまたは負でない限り）。ゲイン設定が過度に大きくなることによる数値のオーバーフローを回避するために、ゲインコントロールはクリッピングを実装できます。つまり、信号の振幅は、折り返すのではなく、オーディオ形式で表現できる最大値に制限されます。</target>
        </trans-unit>
        <trans-unit id="85f7d029dde3a2e7afbc7ce6cee578e8429c56f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; インターフェースは、ニーズがカスタム使用して書式設定を実行することを任意のクラスで実装しなければならない &lt;code&gt;'s'&lt;/code&gt; の変換指定子&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fdc2f6ed9da54144faf7ffc672bbd4b1c6864d1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;. This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock's name depending on the flags and length constraints: &lt;code&gt;import java.nio.CharBuffer;
   import java.util.Formatter;
   import java.util.Formattable;
   import java.util.Locale;
   import static java.util.FormattableFlags.*;

  ...

   public class StockName implements Formattable {
       private String symbol, companyName, frenchCompanyName;
       public StockName(String symbol, String companyName,
                        String frenchCompanyName) {
           ...
       }

       ...

       public void formatTo(Formatter fmt, int f, int width, int precision) {
           StringBuilder sb = new StringBuilder();

           // decide form of name
           String name = companyName;
           if (fmt.locale().equals(Locale.FRANCE))
               name = frenchCompanyName;
           boolean alternate = (f &amp;amp; ALTERNATE) == ALTERNATE;
           boolean usesymbol = alternate || (precision != -1 &amp;amp;&amp;amp; precision &amp;lt; 10);
           String out = (usesymbol ? symbol : name);

           // apply precision
           if (precision == -1 || out.length() &amp;lt; precision) {
               // write it all
               sb.append(out);
           } else {
               sb.append(out.substring(0, precision - 1)).append('*');
           }

           // apply width and justification
           int len = sb.length();
           if (len &amp;lt; width)
               for (int i = 0; i &amp;lt; width - len; i++)
                   if ((f &amp;amp; LEFT_JUSTIFY) == LEFT_JUSTIFY)
                       sb.append(' ');
                   else
                       sb.insert(0, ' ');

           fmt.format(sb.toString());
       }

       public String toString() {
           return String.format(&quot;%s - %s&quot;, symbol, companyName);
       }
   }
 &lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; インターフェースは、ニーズがカスタム使用して書式設定を実行することを任意のクラスで実装しなければならない &lt;code&gt;'s'&lt;/code&gt; の変換指定子&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;。このインターフェースは、任意のオブジェクトをフォーマットするための基本的な制御を可能にします。たとえば、次のクラスは、フラグと長さの制約に応じて、株の名前のさまざまな表現を出力します。 &lt;code&gt;import java.nio.CharBuffer; import java.util.Formatter; import java.util.Formattable; import java.util.Locale; import static java.util.FormattableFlags.*; ... public class StockName implements Formattable { private String symbol, companyName, frenchCompanyName; public StockName(String symbol, String companyName, String frenchCompanyName) { ... } ... public void formatTo(Formatter fmt, int f, int width, int precision) { StringBuilder sb = new StringBuilder(); // decide form of name String name = companyName; if (fmt.locale().equals(Locale.FRANCE)) name = frenchCompanyName; boolean alternate = (f &amp;amp; ALTERNATE) == ALTERNATE; boolean usesymbol = alternate || (precision != -1 &amp;amp;&amp;amp; precision &amp;lt; 10); String out = (usesymbol ? symbol : name); // apply precision if (precision == -1 || out.length() &amp;lt; precision) { // write it all sb.append(out); } else { sb.append(out.substring(0, precision - 1)).append('*'); } // apply width and justification int len = sb.length(); if (len &amp;lt; width) for (int i = 0; i &amp;lt; width - len; i++) if ((f &amp;amp; LEFT_JUSTIFY) == LEFT_JUSTIFY) sb.append(' '); else sb.insert(0, ' '); fmt.format(sb.toString()); } public String toString() { return String.format(&quot;%s - %s&quot;, symbol, companyName); } } &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ded1b8b780654793fea0795f740f95473dfc0b75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formatter&lt;/code&gt;'s &quot;tail&quot; string is written to the stream before it is closed. In addition, if the &lt;code&gt;Formatter&lt;/code&gt;'s &quot;head&quot; string has not yet been written to the stream, it will be written before the &quot;tail&quot; string.</source>
          <target state="translated">&lt;code&gt;Formatter&lt;/code&gt; が閉じられる前の「しっぽ&quot;という文字列がストリームに書き込まれます。さらに、 &lt;code&gt;Formatter&lt;/code&gt; の「先頭」文字列がまだストリームに書き込まれていない場合は、「末尾」文字列の前に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="5f0017742b86bb525c52b44a372868ba47f8c805" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Future&lt;/code&gt; interface defines the &lt;a href=&quot;../../util/concurrent/future#cancel-boolean-&quot;&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/a&gt; method to cancel execution. This causes all threads waiting on the result of the I/O operation to throw &lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;. Whether the underlying I/O operation can be cancelled is highly implementation specific and therefore not specified. Where cancellation leaves the channel, or the entity to which it is connected, in an inconsistent state, then the channel is put into an implementation specific &lt;em&gt;error state&lt;/em&gt; that prevents further attempts to initiate I/O operations that are</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; インターフェースを定義&lt;a href=&quot;../../util/concurrent/future#cancel-boolean-&quot;&gt; &lt;code&gt;cancel&lt;/code&gt; &lt;/a&gt;実行をキャンセルする方法を。これにより、I / O操作の結果を待機しているすべてのスレッドが&lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; &lt;/a&gt;をスローします。基になるI / O操作をキャンセルできるかどうかは、実装によって大きく異なるため、指定されていません。キャンセルによってチャネルまたはチャネルが接続されているエンティティが不整合な状態になると、チャネルは実装固有の&lt;em&gt;エラー状態&lt;/em&gt;になり、それによって、I / O操作を開始しようとするさらなる試行が妨げられます。</target>
        </trans-unit>
        <trans-unit id="0794b1416bd199f56af33739272b109badf5de09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneralSecurityException&lt;/code&gt; class is a generic security exception class that provides type safety for all the security-related exception classes that extend from it.</source>
          <target state="translated">&lt;code&gt;GeneralSecurityException&lt;/code&gt; クラスは、それを拡張するすべてのセキュリティ関連例外クラスに対して型の安全性を提供し、一般的なセキュリティ例外クラスです。</target>
        </trans-unit>
        <trans-unit id="8c32683bb604a52bbbd12a72cd3f38b11977a353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GetTimeRequest&lt;/code&gt; and &lt;code&gt;GetTimeResponse&lt;/code&gt; classes might be defined as follows:</source>
          <target state="translated">&lt;code&gt;GetTimeRequest&lt;/code&gt; と &lt;code&gt;GetTimeResponse&lt;/code&gt; 次のようにクラスが定義されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7b3db553a343fd330b52da577c5515316776d097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Handler&lt;/code&gt; is responsible for formatting the message, when and if necessary. The formatting should include localization.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; 、とき、必要に応じてメッセージをフォーマットする責任があります。フォーマットにはローカライズを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="91085e13e25b56334d0136ad6a6a3aeb2acef937" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOByteBuffer&lt;/code&gt; class provides an alternative way to perform reads of sequences of bytes that reduces the amount of internal data copying.</source>
          <target state="translated">&lt;code&gt;IIOByteBuffer&lt;/code&gt; のクラスが実行する別の方法は、内部データのコピーの量を減少させるバイトのシーケンスの読み出し提供します。</target>
        </trans-unit>
        <trans-unit id="a9e351d66bd62ad441f8bd1a17f3defde63a80bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOMetadataController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOMetadata&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called. This value overrides any default controller, even when &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IIOMetadataController&lt;/code&gt; このための設定を提供するために使用される &lt;code&gt;IIOMetadata&lt;/code&gt; たときにオブジェクト &lt;code&gt;activateController&lt;/code&gt; のメソッドが呼び出されます。この値は、 &lt;code&gt;null&lt;/code&gt; の場合でも、デフォルトのコントローラーをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="f17066ba75d42abb02e2b439c5a64a255a531a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOParamController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOParam&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called. This value overrides any default controller, even when null.</source>
          <target state="translated">&lt;code&gt;IIOParamController&lt;/code&gt; ですこのための設定を提供するために使用されます &lt;code&gt;IIOParam&lt;/code&gt; たときにオブジェクト &lt;code&gt;activateController&lt;/code&gt; のメソッドが呼び出されます。この値は、nullの場合でも、デフォルトのコントローラーをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="1373fac41a2c0fd6a7088e2e48cb2f69a0a7c602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadProgressListener&lt;/code&gt; interface allows for notification of the percentage of an image that has been read successfully.</source>
          <target state="translated">&lt;code&gt;IIOReadProgressListener&lt;/code&gt; のインターフェースが正常に読み取られた画像の比率の通知を可能にします。</target>
        </trans-unit>
        <trans-unit id="8efd925d40fc2c06f26f62362d2f5ad61bf84a89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; interface allows for notification of the portions of an image that have been read. This is useful, for example, for implementing dynamic display of an image as it is loaded.</source>
          <target state="translated">&lt;code&gt;IIOReadUpdateListener&lt;/code&gt; のインターフェースは、読み取られた画像の部分の通知を可能にします。これは、たとえば、ロードされたイメージの動的表示を実装する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d9b45fe43fb5e8f36d95b122d8bc0cf608973ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadWarningListener&lt;/code&gt; interface allows for notification of non-fatal errors during reading.</source>
          <target state="translated">&lt;code&gt;IIOReadWarningListener&lt;/code&gt; のインタフェースは、読み込み中に非致命的なエラーを通知することができます。</target>
        </trans-unit>
        <trans-unit id="b149ec0010741dabc593484f5a58f1f5bb765802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; and &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; interfaces perform analogous functions for writers.</source>
          <target state="translated">&lt;code&gt;IIOWriteWarningListener&lt;/code&gt; および &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; インタフェースは、ライターのための類似の機能を実行します。</target>
        </trans-unit>
        <trans-unit id="5ebe107cde1d3bd9a79d28a4e17587461ce4d493" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANT_SECONDS&lt;/code&gt; field will return a date-time with the specified instant. The offset and nano-of-second are unchanged. If the new instant value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;INSTANT_SECONDS&lt;/code&gt; のフィールドには、指定された瞬間に日付と時刻を返します。オフセットとナノ秒は変更されていません。新しいインスタント値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="2471418c65939f74253b34d90116b39570d73512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANT_SECONDS&lt;/code&gt; field will return a date-time with the specified instant. The zone and nano-of-second are unchanged. The result will have an offset derived from the new instant and original zone. If the new instant value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;INSTANT_SECONDS&lt;/code&gt; のフィールドには、指定された瞬間に日付と時刻を返します。ゾーンとナノ秒は変更されていません。結果には、新しいインスタントゾーンと元のゾーンから派生したオフセットが含まれます。新しいインスタント値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="26f92023e5949c66d2da17553ce04c03b886aec5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; interface unifies streaming and file-based operations. An abstract base class, &lt;code&gt;ImageInputStreamImpl&lt;/code&gt; is provided to simplify writing a new &lt;code&gt;ImageInputStream&lt;/code&gt; class. Concrete implementation classes (&lt;code&gt;FileImageInputStream&lt;/code&gt;, &lt;code&gt;FileCacheImageInputStream&lt;/code&gt;, and &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt;) are provided that allow input to come from a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;InputStream&lt;/code&gt; with or without the use of a temporary cache file.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; のストリーミング一元管理とファイルベースの操作インタフェース。抽象基本クラスである &lt;code&gt;ImageInputStreamImpl&lt;/code&gt; は、新しい &lt;code&gt;ImageInputStream&lt;/code&gt; クラスの記述を簡単にするために提供されています。一時的なキャッシュファイルの使用の有無にかかわらず、 &lt;code&gt;File&lt;/code&gt; または &lt;code&gt;InputStream&lt;/code&gt; からの入力を可能にする具象実装クラス（ &lt;code&gt;FileImageInputStream&lt;/code&gt; 、 &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; 、および &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt; ）が提供されます。</target>
        </trans-unit>
        <trans-unit id="23787e7b0f5233202db60183744cb5ba7ec81a77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; by &lt;code&gt;setInput&lt;/code&gt; and retrieved by &lt;code&gt;getInput&lt;/code&gt;. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; 内または他の &lt;code&gt;Object&lt;/code&gt; によって &lt;code&gt;setInput&lt;/code&gt; によって取り出さ &lt;code&gt;getInput&lt;/code&gt; 。デフォルトでは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="e870028a4bcce49d6ab74abb2d0fee3053be5245" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; interface performs an analogous function for output. An abstract base class, &lt;code&gt;ImageOutputStreamImpl&lt;/code&gt; is provided, along with concrete implementation classes (&lt;code&gt;FileImageOutputStream&lt;/code&gt;, &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt;, and &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt;) are provided that allow output to go to a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;OutputStream&lt;/code&gt; with or without the use of a temporary cache file.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; インタフェースは、出力のために類似の機能を実行します。抽象基本クラスである &lt;code&gt;ImageOutputStreamImpl&lt;/code&gt; が提供され、具体的な実装クラス（ &lt;code&gt;FileImageOutputStream&lt;/code&gt; 、 &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt; 、および &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt; ）が提供されます。これにより、一時キャッシュファイルの使用の有無にかかわらず、出力を &lt;code&gt;File&lt;/code&gt; または &lt;code&gt;OutputStream&lt;/code&gt; に送ることができます。</target>
        </trans-unit>
        <trans-unit id="c654707cc8b01173251db888e4e9f1cadc54a60a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; set by &lt;code&gt;setOutput&lt;/code&gt; and retrieved by &lt;code&gt;getOutput&lt;/code&gt;. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; のまたは他の &lt;code&gt;Object&lt;/code&gt; 集合によって &lt;code&gt;setOutput&lt;/code&gt; によって取得 &lt;code&gt;getOutput&lt;/code&gt; 。デフォルトでは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="23d39dd66eefdd5b7e22c2d48611d45e7fe19e03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageReaderSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageReaderSpi&lt;/code&gt; このオブジェクト、またはインスタンス化 &lt;code&gt;null&lt;/code&gt; その身元が不明であるか存在しないされている場合。デフォルトでは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="1558624413839f825eafd92b1012f6d775cab0ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageWriterSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageWriterSpi&lt;/code&gt; このオブジェクト、またはインスタンス化 &lt;code&gt;null&lt;/code&gt; その身元が不明であるか存在しないされている場合。デフォルトでは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="c187ac2b0346d6275a729d49e9e4b70887e64296" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;int&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; クラスは、プリミティブ型の値をラップします &lt;code&gt;int&lt;/code&gt; 型のオブジェクトでは。</target>
        </trans-unit>
        <trans-unit id="62ec9068383653f569a3d3699ea099197809c35d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;int&lt;/code&gt; in an object. An object of type &lt;code&gt;Integer&lt;/code&gt; contains a single field whose type is &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; クラスは、プリミティブ型の値をラップします &lt;code&gt;int&lt;/code&gt; 型のオブジェクトでは。 &lt;code&gt;Integer&lt;/code&gt; 型のオブジェクトには、型が &lt;code&gt;int&lt;/code&gt; の単一のフィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="10e129e33f3b53fc80b1e431c4205e048b0ed9d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; クラスはで開くことができる任意のファイルからjarファイルの内容を読み取るために使用される &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fc173f631c97a9b4dcc50fc6b42b14623acad99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;. It extends the class &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the jar file and its entries.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; クラスはで開くことができる任意のファイルからjarファイルの内容を読み取るために使用される &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 。クラス &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; を拡張して、オプションの &lt;code&gt;Manifest&lt;/code&gt; エントリの読み取りをサポートします。 &lt;code&gt;Manifest&lt;/code&gt; 、JARファイルとそのエントリのメタ情報を指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="9792439c8b85ffb254058fa07ee9e18ecd9179ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarInputStream&lt;/code&gt; class is used to read the contents of a JAR file from any input stream.</source>
          <target state="translated">&lt;code&gt;JarInputStream&lt;/code&gt; のクラスは、任意の入力ストリームからJARファイルの内容を読み取るために使用されます。</target>
        </trans-unit>
        <trans-unit id="69fcbab6dd2a8326db4e277f74e623e45080d92f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarInputStream&lt;/code&gt; class is used to read the contents of a JAR file from any input stream. It extends the class &lt;code&gt;java.util.zip.ZipInputStream&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to store meta-information about the JAR file and its entries.</source>
          <target state="translated">&lt;code&gt;JarInputStream&lt;/code&gt; のクラスは、任意の入力ストリームからJARファイルの内容を読み取るために使用されます。クラス &lt;code&gt;java.util.zip.ZipInputStream&lt;/code&gt; を拡張して、オプションの &lt;code&gt;Manifest&lt;/code&gt; エントリの読み取りをサポートします。 &lt;code&gt;Manifest&lt;/code&gt; JARファイルとそのエントリのメタ情報を格納するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="b21ac43a5a90b457145ee7b48bcabedf9e126557" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarOutputStream&lt;/code&gt; class is used to write the contents of a JAR file to any output stream.</source>
          <target state="translated">&lt;code&gt;JarOutputStream&lt;/code&gt; のクラスは、任意の出力ストリームにJARファイルの内容を書き込むために使用されます。</target>
        </trans-unit>
        <trans-unit id="8e11ba91a7108003e4972a4752848ed577893864" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarOutputStream&lt;/code&gt; class is used to write the contents of a JAR file to any output stream. It extends the class &lt;code&gt;java.util.zip.ZipOutputStream&lt;/code&gt; with support for writing an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the JAR file and its entries.</source>
          <target state="translated">&lt;code&gt;JarOutputStream&lt;/code&gt; のクラスは、任意の出力ストリームにJARファイルの内容を書き込むために使用されます。クラス &lt;code&gt;java.util.zip.ZipOutputStream&lt;/code&gt; を拡張して、オプションの &lt;code&gt;Manifest&lt;/code&gt; エントリの書き込みをサポートします。 &lt;code&gt;Manifest&lt;/code&gt; JARファイルとそのエントリのメタ情報を指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="30a19dcac608ceb517d3a3561447251ee1e2014f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Line&lt;/code&gt; interface represents a mono or multi-channel audio feed.</source>
          <target state="translated">&lt;code&gt;Line&lt;/code&gt; インターフェースは、モノまたはマルチチャネルオーディオフィードを表します。</target>
        </trans-unit>
        <trans-unit id="c0a9c7f256b3eaca5dedae690146aa91b18206a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Line&lt;/code&gt; interface represents a mono or multi-channel audio feed. A line is an element of the digital audio &quot;pipeline,&quot; such as a mixer, an input or output port, or a data path into or out of a mixer.</source>
          <target state="translated">&lt;code&gt;Line&lt;/code&gt; インターフェースは、モノまたはマルチチャネルオーディオフィードを表します。ラインは、デジタルオーディオの「パイプライン」の要素であり、ミキサー、入力ポートまたは出力ポート、ミキサーへのデータパス、またはミキサーからのデータパスなどがあります。</target>
        </trans-unit>
        <trans-unit id="5d3a35d12e8c0c113e33da5350a5b5580d8cb3c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; のクラスは、ラインが、閉じる、開始、または停止を開くたびにラインがリスナーに送信する情報をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="537f7328063a159d8e4878b6fccbf45636c737b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops. Each of these four state changes is represented by a corresponding type of event. A listener receives the event as a parameter to its &lt;a href=&quot;linelistener#update-javax.sound.sampled.LineEvent-&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; method. By querying the event, the listener can learn the type of event, the line responsible for the event, and how much data the line had processed when the event occurred.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; のクラスは、ラインが、閉じる、開始、または停止を開くたびにラインがリスナーに送信する情報をカプセル化します。これら4つの状態変化のそれぞれは、対応するタイプのイベントによって表されます。リスナーは、&lt;a href=&quot;linelistener#update-javax.sound.sampled.LineEvent-&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt;メソッドのパラメーターとしてイベントを受け取ります。イベントを照会することにより、リスナーはイベントのタイプ、イベントを担当する行、およびイベントが発生したときに行が処理したデータ量を知ることができます。</target>
        </trans-unit>
        <trans-unit id="19683692a3cac37612a80dd55d3fd092b1967a4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface places additional stipulations, beyond those specified in the &lt;code&gt;Collection&lt;/code&gt; interface, on the contracts of the &lt;code&gt;iterator&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, and &lt;code&gt;hashCode&lt;/code&gt; methods. Declarations for other inherited methods are also included here for convenience.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インターフェースで指定されたもの以外の追加規定、場所 &lt;code&gt;Collection&lt;/code&gt; の契約上のインタフェース、 &lt;code&gt;iterator&lt;/code&gt; 、 &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、 &lt;code&gt;equals&lt;/code&gt; 、と &lt;code&gt;hashCode&lt;/code&gt; 方法。他の継承されたメソッドの宣言もここに含まれています。</target>
        </trans-unit>
        <trans-unit id="a0ba9a5b693daac5c19b3fccbb0faf8853cdabbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides a special iterator, called a &lt;code&gt;ListIterator&lt;/code&gt;, that allows element insertion and replacement, and bidirectional access in addition to the normal operations that the &lt;code&gt;Iterator&lt;/code&gt; interface provides. A method is provided to obtain a list iterator that starts at a specified position in the list.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インターフェースと呼ばれる特殊な反復子、提供 &lt;code&gt;ListIterator&lt;/code&gt; ことは通常の動作に加えて、素子の挿入及び置換、および双方向アクセスを可能にする、 &lt;code&gt;Iterator&lt;/code&gt; インターフェースを提供します。リスト内の指定された位置で開始するリスト反復子を取得するためのメソッドが提供されています。</target>
        </trans-unit>
        <trans-unit id="2b090913d205b579f0fbce24a3f90785bc1ba625" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides four methods for positional (indexed) access to list elements. Lists (like Java arrays) are zero based. Note that these operations may execute in time proportional to the index value for some implementations (the &lt;code&gt;LinkedList&lt;/code&gt; class, for example). Thus, iterating over the elements in a list is typically preferable to indexing through it if the caller does not know the implementation.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インターフェースは、リスト要素の位置（インデックス付け）にアクセスするための4つの方法を提供します。リスト（Java配列のような）はゼロベースです。これらの操作は、一部の実装（ &lt;code&gt;LinkedList&lt;/code&gt; クラスなど）のインデックス値に比例して時間内に実行される場合があることに注意してください。したがって、呼び出し元が実装を知らない場合は、リストの要素を反復処理する方が、インデックスを作成するよりも一般的に望ましい方法です。</target>
        </trans-unit>
        <trans-unit id="70355f014486445e2f19c1b1f444e1ecb381cd12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides two methods to efficiently insert and remove multiple elements at an arbitrary point in the list.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インタフェースを効率的に、リスト内の任意の点で複数の要素を挿入および除去するための2つの方法を提供します。</target>
        </trans-unit>
        <trans-unit id="fe82cde6eede4b779cf568cf70079098275cd445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides two methods to search for a specified object. From a performance standpoint, these methods should be used with caution. In many implementations they will perform costly linear searches.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インタフェースは、指定されたオブジェクトを検索するための2つのメソッドを提供します。パフォーマンスの観点から、これらの方法は注意して使用する必要があります。多くの実装では、コストのかかる線形検索を実行します。</target>
        </trans-unit>
        <trans-unit id="80c3e343f9a3334aa90fca73bdf887fa22a1c873" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class also supports an extension mechanism that can be used to identify a calendar system. The mechanism is a form of key-value pairs, where the calendar system has the key &quot;ca&quot;. For example, the locale &quot;en-JP-u-ca-japanese&quot; represents the English language as used in Japan with the Japanese calendar system.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; クラスは、カレンダーシステムを識別するために使用することができる拡張メカニズムをサポートします。このメカニズムは、キーと値のペアの形式であり、カレンダーシステムにはキー「ca」があります。たとえば、ロケール「en-JP-u-ca-japanese」は、日本のカレンダーシステムで日本で使用されている英語を表します。</target>
        </trans-unit>
        <trans-unit id="df60f90896c3c9a6114af933224b8f6b6310599a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class also supports language codes up to 8 characters in length. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; クラスでは、長さが8つの文字に言語コードをサポートします。したがって、このメソッドによって返されるリストには、ロケールの作成に使用できるすべての有効なコードが含まれていません。</target>
        </trans-unit>
        <trans-unit id="ff489719e325fe97b92428c9169b9fa65846b849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class implements IETF BCP 47 which is composed of &lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 &quot;Matching of Language Tags&quot;&lt;/a&gt; and &lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;RFC 5646 &quot;Tags for Identifying Languages&quot;&lt;/a&gt; with support for the LDML (UTS#35, &quot;Unicode Locale Data Markup Language&quot;) BCP 47-compatible extensions for locale data exchange.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; で構成されているクラスが実装IETF BCP 47 &lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;、RFC 4647「言語タグのマッチング」&lt;/a&gt;と&lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;「言語を識別するためのタグ」RFC 5646&lt;/a&gt;（UTS＃35、「Unicodeのロケール・データ・マークアップ言語」）BCP 47互換LDMLのサポートとロケールデータ交換の拡張機能。</target>
        </trans-unit>
        <trans-unit id="b49e579633330874272c018a016eeeecd34916da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class provides a number of convenient constants that you can use to create &lt;code&gt;Locale&lt;/code&gt; objects for commonly used locales. For example, the following creates a &lt;code&gt;Locale&lt;/code&gt; object for the United States:</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; クラスは、作成するために使用できる便利な定数の数を提供 &lt;code&gt;Locale&lt;/code&gt; 一般的に使用されるロケールのためのオブジェクトを。たとえば、次の &lt;code&gt;Locale&lt;/code&gt; は米国のLocaleオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="fa1e07d1d615f3001a87ae91c2a0604617a8b571" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class provides three constructors:</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; クラスは3つのコンストラクタが用意されています。</target>
        </trans-unit>
        <trans-unit id="753e94e16d15c98e2261f7d3bdcddbdc2d027d5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; クラスは、認証対象者に使用される基本的なメソッドを記述し、基本となる認証テクノロジに依存しないアプリケーション開発の方法を提供します。</target>
        </trans-unit>
        <trans-unit id="98c21b51d0ddf913deb3a4a49b2303d25a261498" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology. A &lt;code&gt;Configuration&lt;/code&gt; specifies the authentication technology, or &lt;code&gt;LoginModule&lt;/code&gt;, to be used with a particular application. Different LoginModules can be plugged in under an application without requiring any modifications to the application itself.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; クラスは、認証対象者に使用される基本的なメソッドを記述し、基本となる認証テクノロジに依存しないアプリケーション開発の方法を提供します。A &lt;code&gt;Configuration&lt;/code&gt; 認証技術、または指定 &lt;code&gt;LoginModule&lt;/code&gt; 特定のアプリケーションで使用されるが、。アプリケーション自体に変更を加えることなく、アプリケーションの下にさまざまなLoginModuleをプラグインできます。</target>
        </trans-unit>
        <trans-unit id="24bd53fa001fd556da21468c145af7d9ff2e52d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; is responsible for reading the &lt;code&gt;Configuration&lt;/code&gt; and instantiating the appropriate LoginModules. Each &lt;code&gt;LoginModule&lt;/code&gt; is initialized with a &lt;code&gt;Subject&lt;/code&gt;, a &lt;code&gt;CallbackHandler&lt;/code&gt;, shared &lt;code&gt;LoginModule&lt;/code&gt; state, and LoginModule-specific options. The &lt;code&gt;Subject&lt;/code&gt; represents the &lt;code&gt;Subject&lt;/code&gt; currently being authenticated and is updated with relevant Credentials if authentication succeeds. LoginModules use the &lt;code&gt;CallbackHandler&lt;/code&gt; to communicate with users. The &lt;code&gt;CallbackHandler&lt;/code&gt; may be used to prompt for usernames and passwords, for example. Note that the &lt;code&gt;CallbackHandler&lt;/code&gt; may be null. LoginModules which absolutely require a &lt;code&gt;CallbackHandler&lt;/code&gt; to authenticate the &lt;code&gt;Subject&lt;/code&gt; may throw a &lt;code&gt;LoginException&lt;/code&gt;. LoginModules optionally use the shared state to share information or data among themselves.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; は読書を担当して &lt;code&gt;Configuration&lt;/code&gt; して、適切なのLoginModuleをインスタンス化します。各 &lt;code&gt;LoginModule&lt;/code&gt; は、 &lt;code&gt;Subject&lt;/code&gt; 、 &lt;code&gt;CallbackHandler&lt;/code&gt; 、共有 &lt;code&gt;LoginModule&lt;/code&gt; 状態、およびLoginModule固有のオプションで初期化されます。 &lt;code&gt;Subject&lt;/code&gt; を表す &lt;code&gt;Subject&lt;/code&gt; 現在認証されていると認証が成功した場合、関連する資格情報で更新されます。 LoginModuleは &lt;code&gt;CallbackHandler&lt;/code&gt; を使用してユーザーと通信します。 &lt;code&gt;CallbackHandler&lt;/code&gt; が、たとえば、ユーザ名とパスワードの入力を求めるプロンプトに使用することができます。なお &lt;code&gt;CallbackHandler&lt;/code&gt; nullの可能性があります。 &lt;code&gt;Subject&lt;/code&gt; を認証するために &lt;code&gt;CallbackHandler&lt;/code&gt; を絶対に必要とするLoginModule は、 &lt;code&gt;LoginException&lt;/code&gt; をスローする場合があります。LoginModulesはオプションで共有状態を使用して、情報やデータを共有します。</target>
        </trans-unit>
        <trans-unit id="7801867034780a1c5fff70e8cc7e32057101d13e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;long&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;long&lt;/code&gt; オブジェクトに。</target>
        </trans-unit>
        <trans-unit id="e7f5fb0211de99c25185ee45c0d498d693daf127" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;long&lt;/code&gt; in an object. An object of type &lt;code&gt;Long&lt;/code&gt; contains a single field whose type is &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;long&lt;/code&gt; オブジェクトに。 &lt;code&gt;Long&lt;/code&gt; 型のオブジェクトには、 &lt;code&gt;long&lt;/code&gt; 型の単一のフィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="b73aaaf679d63a88eb466b691fdb58c718db13f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; class is used to describe the characteristics of the different notification instances emitted by an MBean, for a given Java class of notification.</source>
          <target state="translated">&lt;code&gt;MBeanNotificationInfo&lt;/code&gt; のクラスは、通知の指定されたJavaクラス、MBeanによって放射された異なる通知インスタンスの特性を記述するために使用されます。</target>
        </trans-unit>
        <trans-unit id="8c0d93d2a05b2c51593dc81a25c6a33e58b7c2f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; class is used to describe the characteristics of the different notification instances emitted by an MBean, for a given Java class of notification. If an MBean emits notifications that can be instances of different Java classes, then the metadata for that MBean should provide an &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; object for each of these notification Java classes.</source>
          <target state="translated">&lt;code&gt;MBeanNotificationInfo&lt;/code&gt; のクラスは、通知の指定されたJavaクラス、MBeanによって放射された異なる通知インスタンスの特性を記述するために使用されます。MBeanが異なるJavaクラスのインスタンスである可能性のある通知を &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; 場合、そのMBeanのメタデータは、これらの各通知JavaクラスのMBeanNotificationInfoオブジェクトを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="ba64fec83d48a2cbf38343d1715ffb0852ef3636" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector server is attached. This is the last value passed to &lt;a href=&quot;rmiserverimpl#setMBeanServer-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt;&lt;/a&gt; on this object, or null if that method has never been called.</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; このコネクタサーバーが接続されています。これは、このオブジェクトの&lt;a href=&quot;rmiserverimpl#setMBeanServer-javax.management.MBeanServer-&quot;&gt; &lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt; &lt;/a&gt;に渡される最後の値です。そのメソッドが呼び出されたことがない場合はnullです。</target>
        </trans-unit>
        <trans-unit id="0a8a2b2991ac645b67698f44548fc7e282981c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MLET&lt;/code&gt; tag has the following syntax:</source>
          <target state="translated">&lt;code&gt;MLET&lt;/code&gt; のタグの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="41d6128d4ea5a41adf8b5c56d1c50b772d8bb991" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ManagementFactory&lt;/code&gt; class is a factory class for getting managed beans for the Java platform.</source>
          <target state="translated">&lt;code&gt;ManagementFactory&lt;/code&gt; にクラスは、Javaプラットフォームの管理対象Beanを取得するためのファクトリクラスです。</target>
        </trans-unit>
        <trans-unit id="d71986942be1c54b6a6ae12607dd5829e664ceed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ManagementFactory&lt;/code&gt; class is a factory class for getting managed beans for the Java platform. This class consists of static methods each of which returns one or more</source>
          <target state="translated">&lt;code&gt;ManagementFactory&lt;/code&gt; にクラスは、Javaプラットフォームの管理対象Beanを取得するためのファクトリクラスです。このクラスは、それぞれが1つ以上を返す静的メソッドで構成されています</target>
        </trans-unit>
        <trans-unit id="da35ea78eb0bbad93818f873018df137e9342c23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map.Entry&lt;/code&gt; elements traversed by the &lt;code&gt;iterator&lt;/code&gt; or &lt;code&gt;spliterator&lt;/code&gt; do &lt;em&gt;not&lt;/em&gt; support the &lt;code&gt;setValue&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;Map.Entry&lt;/code&gt; の要素はによって横断 &lt;code&gt;iterator&lt;/code&gt; または &lt;code&gt;spliterator&lt;/code&gt; ん&lt;em&gt;ではない&lt;/em&gt;サポート &lt;code&gt;setValue&lt;/code&gt; の操作を。</target>
        </trans-unit>
        <trans-unit id="227699f0dce7484c6d17e1d7babad6ee5858c1d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; interface provides three</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; インターフェイスは、3を提供します</target>
        </trans-unit>
        <trans-unit id="9428a88bd8c1667c06a6e1c738d06e6c61771810" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;jmxconnectorfactory#newJMXConnector-javax.management.remote.JMXServiceURL-java.util.Map-&quot;&gt;&lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; に渡されたパラメータ &lt;code&gt;JMXConnectorProvider&lt;/code&gt; は新しい読み取り専用である &lt;code&gt;Map&lt;/code&gt; にあったすべてのエントリが含まれ &lt;code&gt;environment&lt;/code&gt; へのパラメータ&lt;a href=&quot;jmxconnectorfactory#newJMXConnector-javax.management.remote.JMXServiceURL-java.util.Map-&quot;&gt; &lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt; &lt;/a&gt; 1があった場合に、。さらに、 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; キーが &lt;code&gt;environment&lt;/code&gt; パラメーターに存在しない場合は、新しい読み取り専用 &lt;code&gt;Map&lt;/code&gt; に追加されます。関連する値は、呼び出しスレッドのコンテキストクラスローダーです。</target>
        </trans-unit>
        <trans-unit id="fccf20df23e6200637aa7b23e7388c8a9a88bb06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;jmxconnectorserverfactory#newJMXConnectorServer-javax.management.remote.JMXServiceURL-java.util.Map-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; に渡されたパラメータ &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; は新しい読み取り専用である &lt;code&gt;Map&lt;/code&gt; にあったすべてのエントリが含まれ &lt;code&gt;environment&lt;/code&gt; へのパラメータ&lt;a href=&quot;jmxconnectorserverfactory#newJMXConnectorServer-javax.management.remote.JMXServiceURL-java.util.Map-javax.management.MBeanServer-&quot;&gt; &lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt; &lt;/a&gt; 1があった場合に、。さらに、 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; キーが &lt;code&gt;environment&lt;/code&gt; パラメーターに存在しない場合は、新しい読み取り専用 &lt;code&gt;Map&lt;/code&gt; に追加されます。関連する値は、呼び出しスレッドのコンテキストクラスローダーです。</target>
        </trans-unit>
        <trans-unit id="8b01e42df4caf57c30334c7ef0ef0673760d8b60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given &lt;code&gt;pushLevel&lt;/code&gt; argument and buffer size argument are used.</source>
          <target state="translated">&lt;code&gt;MemoryHandler&lt;/code&gt; のは、に基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; 所与ことを除いてプロパティ（またはそのデフォルト値） &lt;code&gt;pushLevel&lt;/code&gt; 引数とサイズ引数をバッファに使用されます。</target>
        </trans-unit>
        <trans-unit id="8e6c1d6da906bc1b50ed3822bfcdb7ac20a1aee1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryMXBean&lt;/code&gt; object returned by &lt;a href=&quot;managementfactory#getMemoryMXBean--&quot;&gt;&lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt;&lt;/a&gt; implements the &lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt;&lt;code&gt;NotificationEmitter&lt;/code&gt;&lt;/a&gt; interface that allows a listener to be registered within the &lt;code&gt;MemoryMXBean&lt;/code&gt; as a notification listener. Below is an example code that registers a &lt;code&gt;MyListener&lt;/code&gt; to handle notification emitted by the &lt;code&gt;MemoryMXBean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MemoryMXBean&lt;/code&gt; ではによって返されるオブジェクト&lt;a href=&quot;managementfactory#getMemoryMXBean--&quot;&gt; &lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt; は&lt;/a&gt;実装&lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt; &lt;code&gt;NotificationEmitter&lt;/code&gt; &lt;/a&gt;リスナーが内に登録されることを可能にするインターフェース &lt;code&gt;MemoryMXBean&lt;/code&gt; では通知リスナとしての。以下は、 &lt;code&gt;MemoryMXBean&lt;/code&gt; によって &lt;code&gt;MyListener&lt;/code&gt; された通知を処理するMyListenerを登録するコードの例です。</target>
        </trans-unit>
        <trans-unit id="5864b743917b0ab45bb87ab5b12728c29a56a04c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; has processed a &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; のインタフェースは、そのインスタンスの場合に通知する必要があるクラスによって実装される必要があり &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; が処理した &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="91e79b4c499b3f35a4dda98bb1b312a4085719a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; has processed a &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. To register a &lt;code&gt;MetaEventListener&lt;/code&gt; object to receive such notifications, pass it as the argument to the &lt;code&gt;&lt;a href=&quot;sequencer#addMetaEventListener-javax.sound.midi.MetaEventListener-&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method of &lt;code&gt;Sequencer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; のインタフェースは、そのインスタンスの場合に通知する必要があるクラスによって実装される必要があり &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; が処理した &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を。そのような通知を受け取るために &lt;code&gt;MetaEventListener&lt;/code&gt; オブジェクトを登録するには、それを引数として &lt;code&gt;Sequencer&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;sequencer#addMetaEventListener-javax.sound.midi.MetaEventListener-&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; メソッドに渡します。</target>
        </trans-unit>
        <trans-unit id="d01c40b457907a7d5e20ffd74ad4b85ee2009577" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MidiSystem&lt;/code&gt; class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports.</source>
          <target state="translated">&lt;code&gt;MidiSystem&lt;/code&gt; クラスは、シンセサイザ、シーケンサ、MIDI入出力ポートなどのデバイスを含むインストールMIDIシステムリソースへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="a80d68435a1b6165c900a036816b9bec6091ed82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MidiSystem&lt;/code&gt; class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports. A typical simple MIDI application might begin by invoking one or more &lt;code&gt;MidiSystem&lt;/code&gt; methods to learn what devices are installed and to obtain the ones needed in that application.</source>
          <target state="translated">&lt;code&gt;MidiSystem&lt;/code&gt; クラスは、シンセサイザ、シーケンサ、MIDI入出力ポートなどのデバイスを含むインストールMIDIシステムリソースへのアクセスを提供します。典型的なシンプルなMIDIアプリケーションは、1つまたは複数の &lt;code&gt;MidiSystem&lt;/code&gt; メソッドを呼び出して、インストールされているデバイスを学習し、そのアプリケーションに必要なデバイスを取得することから始まります。</target>
        </trans-unit>
        <trans-unit id="b52eb410a08736554d78710757e24ecd5480df64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; クラスは、テキスト説明とともに、製品の名前、バージョン、ベンダーなど、オーディオミキサーに関する情報を表します。</target>
        </trans-unit>
        <trans-unit id="e56a0592321beb830ad7682fabbd101887d52b64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description. This information may be retrieved through the &lt;a href=&quot;mixer#getMixerInfo--&quot;&gt;&lt;code&gt;getMixerInfo&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;Mixer&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; クラスは、テキスト説明とともに、製品の名前、バージョン、ベンダーなど、オーディオミキサーに関する情報を表します。この情報は、 &lt;code&gt;Mixer&lt;/code&gt; インターフェースの&lt;a href=&quot;mixer#getMixerInfo--&quot;&gt; &lt;code&gt;getMixerInfo&lt;/code&gt; &lt;/a&gt;メソッドを通じて取得できます。</target>
        </trans-unit>
        <trans-unit id="788c03b8eac033377287b7f6bcedc89c000e71cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the &lt;code&gt;AttributeValue&lt;/code&gt; component is determined by the &lt;code&gt;AttributeType&lt;/code&gt;; in general it will be a &lt;code&gt;directoryString&lt;/code&gt;. A &lt;code&gt;directoryString&lt;/code&gt; is usually one of &lt;code&gt;PrintableString&lt;/code&gt;, &lt;code&gt;TeletexString&lt;/code&gt; or &lt;code&gt;UniversalString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 、米国のような国の名前などの属性、および対応する値で構成階層名を記述します。タイプ &lt;code&gt;AttributeValue&lt;/code&gt; のの成分は、によって決定される &lt;code&gt;AttributeType&lt;/code&gt; で。通常、これは &lt;code&gt;directoryString&lt;/code&gt; になります。A &lt;code&gt;directoryString&lt;/code&gt; は、通常の一つで &lt;code&gt;PrintableString&lt;/code&gt; 、 &lt;code&gt;TeletexString&lt;/code&gt; または &lt;code&gt;UniversalString&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5c1c5d6176d58d28e9f865eee359984e02049b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; interface represents a generic name -- an ordered sequence of components.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; コンポーネントの順序付けられたシーケンス-インターフェイスは、一般的な名前を表します。</target>
        </trans-unit>
        <trans-unit id="99d457ffbc6e55d6f5c1d1e7729fba20a1b311b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; interface represents a generic name -- an ordered sequence of components. It can be a composite name (names that span multiple namespaces), or a compound name (names that are used within individual hierarchical naming systems).</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; コンポーネントの順序付けられたシーケンス-インターフェイスは、一般的な名前を表します。複合名（複数の名前空間にまたがる名前）または複合名（個々の階層ネーミングシステム内で使用される名前）にすることができます。</target>
        </trans-unit>
        <trans-unit id="7b6edeb494d6ac7e0b5caa00f1aa813d7ae827c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NamingEvent&lt;/code&gt;'s state consists of</source>
          <target state="translated">&lt;code&gt;NamingEvent&lt;/code&gt; にの状態はで構成されてい</target>
        </trans-unit>
        <trans-unit id="c86cac2e51c5a47693977a50e2b8c6b5729d2050" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NetworkInterface&lt;/code&gt; this interface is attached to.</source>
          <target state="translated">&lt;code&gt;NetworkInterface&lt;/code&gt; このインタフェースは、に取り付けられています。</target>
        </trans-unit>
        <trans-unit id="c4f24312524d645707d6367d6e45b401e6f4d5c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; that led to the parsing error, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 解析エラー、またはにつながった &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1400dea5eb2e0f1d272329a6fddf1dde956ad2ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt;&lt;code&gt;RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;NotificationListeners&lt;/code&gt; は、によって返されたIDによって識別される&lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt; &lt;code&gt;RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt;の方法。</target>
        </trans-unit>
        <trans-unit id="e9f0f1aa295652b71a3e12c32b29eaa12cfad79e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt;&lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;NotificationListeners&lt;/code&gt; は、によって返されたIDによって識別される&lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt; &lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt;の方法。</target>
        </trans-unit>
        <trans-unit id="2c9376e7cc0383d27533cd38986f773a0a05e444" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will return a date-time with the specified offset. The local date-time is unaltered. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; のフィールドには、指定されたオフセットで日付と時刻を返します。ローカルの日時は変更されません。新しいオフセット値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="1918dcc7fcc29b6bc425b2c6f7a8a0dcc372038d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will return a time with the specified offset. The local time is unaltered. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; のフィールドには、指定されたオフセットとの時間を返します。現地時間は変更されません。新しいオフセット値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="5b99274c982da4f70821c4ca9b3b72ad4b9daf7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will typically be ignored. The offset of a &lt;code&gt;ZonedDateTime&lt;/code&gt; is controlled primarily by the time-zone. As such, changing the offset does not generally make sense, because there is only one valid offset for the local date-time and zone. If the zoned date-time is in a daylight savings overlap, then the offset is used to switch between the two valid offsets. In all other cases, the offset is ignored. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; のフィールドは、一般的に無視されます。 &lt;code&gt;ZonedDateTime&lt;/code&gt; のオフセットは、主にタイムゾーンによって制御されます。そのため、ローカルの日時とゾーンには有効なオフセットが1つしかないため、オフセットを変更しても通常は意味がありません。ゾーン化された日時が夏時間の重複にある場合、オフセットは2つの有効なオフセットを切り替えるために使用されます。他のすべての場合、オフセットは無視されます。新しいオフセット値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="dcf77ee080e78ac2d4bb93c007b8230ccb51fe01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; associated with a node that accepts enumerated values must be equal to one of the values returned by this method, as defined by the &lt;code&gt;==&lt;/code&gt; operator (as opposed to the &lt;code&gt;Object.equals&lt;/code&gt; method).</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; によって定義される列挙値を受け付けるノードに関連するが、このメソッドによって返される値のいずれかに等しくなければならない &lt;code&gt;==&lt;/code&gt; （とは対照的に、オペレータ &lt;code&gt;Object.equals&lt;/code&gt; 方法）。</target>
        </trans-unit>
        <trans-unit id="a1119954570aff30608ab91b67db57a1edb87ff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBeanに関連付けられたがで指定された &lt;var&gt;name&lt;/var&gt; 。含まれる &lt;code&gt;ObjectName&lt;/code&gt; は &lt;code&gt;name&lt;/code&gt; で、含まれるクラス名は &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b503bdd5bfbf40758607910f1e62bc31dd68e802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBeanに関連付けられたがで指定された &lt;var&gt;name&lt;/var&gt; 。含まれる &lt;code&gt;ObjectName&lt;/code&gt; は &lt;code&gt;name&lt;/code&gt; で、含まれるクラス名は &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c4bb59ef2d57c5a36b82e56b3ef8695a22a0311d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a garbage collector within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のガベージコレクターのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0b9021e57442d401347cae33e09b53197bbb0b25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a memory manager within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のメモリマネージャのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="bb1a05072aa2847772982c43cf0d890c7cae913a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a memory pool within an &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; 内のメモリプールのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="db98f30b0477805218b1ae4bdb074256518e5803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the class loading system within an &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; 内のクラスローディングシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="55e8342fd743f84bda60cd36babb3e068a2e6ec7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the compilation system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のコンパイルシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="70515004bb956a637a0eaf59af0413164c30fb86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the memory system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のメモリシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c1f16184d09f51af30331c1389e9013ddc4a17df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the operating system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のオペレーティングシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="07da8e2d7411da3d53f255c201b631c0ac856d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the runtime system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のランタイムシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e9552b5b6f9a739364bfe6b9bdedc853e8972846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the thread system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のスレッドシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9dcfa6a1fe8b9264f0661c006080ec7572ae4b83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; class describes the management information of an</source>
          <target state="translated">&lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; のクラスはの管理情報を記述します</target>
        </trans-unit>
        <trans-unit id="b203a779783192d8423055b7a1a9da6d91af0f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenType&lt;/code&gt; class is the parent abstract class of all classes which describe the actual</source>
          <target state="translated">&lt;code&gt;OpenType&lt;/code&gt; クラスは、実際のを記述するすべてのクラスの親抽象クラスであります</target>
        </trans-unit>
        <trans-unit id="0d757ff4a6ac675a5b4871ec062085d8cdb8da98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 3280) standard.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; は、 X.509証明書パスは、PKIX（RFC 3280）標準に従って無効であることを潜在的PKIX固有の理由を列挙する。</target>
        </trans-unit>
        <trans-unit id="42733b5171c383bf12f9d4a04e020e12857e5e60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 3280) standard. These reasons are in addition to those of the &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; enumeration.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; は、 X.509証明書パスは、PKIX（RFC 3280）標準に従って無効であることを潜在的PKIX固有の理由を列挙する。これらの理由は、 &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; 列挙の理由に追加されます。</target>
        </trans-unit>
        <trans-unit id="b88e3cb7dd76f092b2f7b4a5b2cc4c9436fd4cea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; corresponding to the given name, or &lt;code&gt;null&lt;/code&gt; if not found</source>
          <target state="translated">&lt;code&gt;Package&lt;/code&gt; 指定された名前、またはに対応する &lt;code&gt;null&lt;/code&gt; で見つからなかった場合</target>
        </trans-unit>
        <trans-unit id="90672781ed476b480c2d01bbaf4b2e5adafc4b2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; is obtained by invoking the &lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;filesystems#getDefault--&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt;&lt;code&gt;FileSystem&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 呼び出すことによって得られる&lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; &lt;/a&gt;のメソッド&lt;a href=&quot;filesystems#getDefault--&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt; &lt;code&gt;FileSystem&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5c79b8bbdbc6232b5734fc46d1a5e28d6bbf32c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pattern&lt;/code&gt; engine performs traditional NFA-based matching with ordered alternation as occurs in Perl 5.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; はPerl 5で発生するように、エンジンは、規則交替伝統的なNFAベースのマッチングを行います。</target>
        </trans-unit>
        <trans-unit id="92995c19fa227cf2ab96897ff5eedb351ff466d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Permission&lt;/code&gt; class for link creation operations.</source>
          <target state="translated">リンク作成操作の &lt;code&gt;Permission&lt;/code&gt; クラス。</target>
        </trans-unit>
        <trans-unit id="b15cfab53ee2a0eadd7dc3e89c6e3054abf67006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; object is also registered with the platform &lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;MBeanServer&lt;/a&gt;. The &lt;a href=&quot;../../../javax/management/objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; for uniquely identifying the &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; オブジェクトは、プラットフォームに登録されている&lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;のMBeanServer&lt;/a&gt;。MBeanServer内で &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; を一意に識別するための&lt;a href=&quot;../../../javax/management/objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt;は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="176ebc50958434620dc6e1fc7aedbf4aa4c19395" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Policy&lt;/code&gt; object consults the local policy and returns and appropriate &lt;code&gt;Permissions&lt;/code&gt; object with the Permissions granted to the Principals associated with the provided</source>
          <target state="translated">&lt;code&gt;Policy&lt;/code&gt; オブジェクトは、ローカルポリシーを参照し、リターンし、適切な &lt;code&gt;Permissions&lt;/code&gt; 設けに関連付けられたPrincipalに付与された権限を持つオブジェクト</target>
        </trans-unit>
        <trans-unit id="8f660c48a5927de5d279d0b4033c4ae98a5108f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer.</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; のクラスを拡張し &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のポート名を含むポートに付加情報特定と、それはソースまたはそのミキサーの標的であるかどうか。</target>
        </trans-unit>
        <trans-unit id="e65eb7e482423171ada7c491ef4eeceb1029407b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer. By definition, a port acts as either a source or a target to its mixer, but not both. (Audio input ports are sources; audio output ports are targets.)</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; のクラスを拡張し &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のポート名を含むポートに付加情報特定と、それはソースまたはそのミキサーの標的であるかどうか。定義により、ポートはミキサーのソースまたはターゲットのいずれかとして機能しますが、両方としては機能しません。（オーディオ入力ポートはソース、オーディオ出力ポートはターゲットです。）</target>
        </trans-unit>
        <trans-unit id="d166a34742a6c6490e21ca168d2e6d673987afa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class represents a persistent set of properties.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; クラスは、不変のプロパティセットを表します。</target>
        </trans-unit>
        <trans-unit id="d09951cf74285f372797f262ca2d5541dfdf337c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class represents a persistent set of properties. The &lt;code&gt;Properties&lt;/code&gt; can be saved to a stream or loaded from a stream. Each key and its corresponding value in the property list is a string.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; クラスは、不変のプロパティセットを表します。 &lt;code&gt;Properties&lt;/code&gt; 、ストリームに保存したり、ストリームからロードすることができます。プロパティリストの各キーとそれに対応する値は文字列です。</target>
        </trans-unit>
        <trans-unit id="41efb79d3a1eca9cb5d81533032efc9675bf375a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PropertyChangeSupport&lt;/code&gt; associated with this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PropertyChangeSupport&lt;/code&gt; これに関連した &lt;code&gt;BeanContextChildSupport&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61720eb2d433a3c828940b196eeb9541a74e0646" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Queue&lt;/code&gt; interface does not define the</source>
          <target state="translated">&lt;code&gt;Queue&lt;/code&gt; インターフェイスは定義されていません。</target>
        </trans-unit>
        <trans-unit id="0dd9840df06924282664fc3e67ddabe9defd6274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Raster&lt;/code&gt; being referenced.</source>
          <target state="translated">&lt;code&gt;Raster&lt;/code&gt; 参照されて。</target>
        </trans-unit>
        <trans-unit id="79a2cd06471b623d73bdbbd167ab48aee2097b40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt; methods that read from the file throw &lt;code&gt;IOException&lt;/code&gt; if a malformed or unmappable byte sequence is read.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; ファイルから読み込む方法がスロー &lt;code&gt;IOException&lt;/code&gt; が不正な形式またはマッピングできないバイトシーケンスが読まれている場合。</target>
        </trans-unit>
        <trans-unit id="99baa6f6ac31a6957c69fb473938422fc78f374d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9fb5c4efba8253cf833773d52f6ee715196af2f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderedImage&lt;/code&gt; being referenced.</source>
          <target state="translated">&lt;code&gt;RenderedImage&lt;/code&gt; のは、参照されています。</target>
        </trans-unit>
        <trans-unit id="b9fc508b09fb91444f8aa155b416b9d56dbb1265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReverbType&lt;/code&gt; class provides methods for accessing various reverberation settings to be applied to an audio signal.</source>
          <target state="translated">&lt;code&gt;ReverbType&lt;/code&gt; のクラスは、オーディオ信号に適用される様々なリバーブ設定にアクセスするための方法を提供します。</target>
        </trans-unit>
        <trans-unit id="afe97ee9c3219412d61628980fe8432b9daaba4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundingMode&lt;/code&gt; used for this DecimalFormat.</source>
          <target state="translated">&lt;code&gt;RoundingMode&lt;/code&gt; はこののDecimalFormatに使用しました。</target>
        </trans-unit>
        <trans-unit id="ffe20390fecad2daec079563f89bb0ffa523a1bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundingMode&lt;/code&gt; used for this NumberFormat.</source>
          <target state="translated">&lt;code&gt;RoundingMode&lt;/code&gt; はこのNumberFormatをするために使用しました。</target>
        </trans-unit>
        <trans-unit id="9a6c5472e51dff7ede55a06c630f405c31babb27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleBasedCollator&lt;/code&gt; class is a concrete subclass of &lt;code&gt;Collator&lt;/code&gt; that provides a simple, data-driven, table collator.</source>
          <target state="translated">&lt;code&gt;RuleBasedCollator&lt;/code&gt; クラスは、具体的なサブクラスである &lt;code&gt;Collator&lt;/code&gt; 単純なデータ駆動型、テーブル照合を提供します。</target>
        </trans-unit>
        <trans-unit id="2ed8190679df509541420fb54e8aaab97382d51f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleBasedCollator&lt;/code&gt; class is a concrete subclass of &lt;code&gt;Collator&lt;/code&gt; that provides a simple, data-driven, table collator. With this class you can create a customized table-based &lt;code&gt;Collator&lt;/code&gt;. &lt;code&gt;RuleBasedCollator&lt;/code&gt; maps characters to sort keys.</source>
          <target state="translated">&lt;code&gt;RuleBasedCollator&lt;/code&gt; クラスは、具体的なサブクラスである &lt;code&gt;Collator&lt;/code&gt; 単純なデータ駆動型、テーブル照合を提供します。このクラスを使用すると、カスタマイズされたテーブルベースの &lt;code&gt;Collator&lt;/code&gt; 作成できます。 &lt;code&gt;RuleBasedCollator&lt;/code&gt; は、文字を並べ替えキーにマップします。</target>
        </trans-unit>
        <trans-unit id="5098c81b7457412bf4917d02e9a1dfef85b5fe26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any class whose instances are intended to be executed by a thread.</source>
          <target state="translated">&lt;code&gt;Runnable&lt;/code&gt; インターフェースは、そのインスタンスのスレッドによって実行されることが意図されている任意のクラスによって実装されるべきです。</target>
        </trans-unit>
        <trans-unit id="d8f15f8d81c303338ba2b966d98884e4108ae0f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any class whose instances are intended to be executed by a thread. The class must define a method of no arguments called &lt;code&gt;run&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Runnable&lt;/code&gt; インターフェースは、そのインスタンスのスレッドによって実行されることが意図されている任意のクラスによって実装されるべきです。クラスは、 &lt;code&gt;run&lt;/code&gt; と呼ばれる引数のないメソッドを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="d9f88a23d98de0fb1ab893f3f7409818a9bbc61d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SMART&lt;/code&gt; behaviour handles the common &quot;end of day&quot; 24:00 value. Processing in &lt;code&gt;LENIENT&lt;/code&gt; mode also produces the same result:</source>
          <target state="translated">&lt;code&gt;SMART&lt;/code&gt; の挙動は24:00値の一般的な「一日の終わり」を処理します。 &lt;code&gt;LENIENT&lt;/code&gt; モードでの処理でも同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="64049cd592e8eb0ec78aec4cd353b6f5aabba963" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; completed the operation, and is available to process similar calls.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、操作を完了し、同様の呼び出しを処理することが可能です。</target>
        </trans-unit>
        <trans-unit id="077b184f78f7e5525918d7fe92403baaa5f9a42d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; has just finished handshaking.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、ちょうどハンドシェイクを完了しました。</target>
        </trans-unit>
        <trans-unit id="df118613b41d79c011b7a0bc6c7f48652d896d51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; is not currently handshaking.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、現在のハンドシェイクされていません。</target>
        </trans-unit>
        <trans-unit id="1926ac57988ad07ff17731c0dbc1dd707e5b1e02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; must send data to the remote side before handshaking can continue, so &lt;code&gt;SSLEngine.wrap()&lt;/code&gt; should be called.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは続けることができハンドシェークの前に、のでリモート側にデータを送信しなければなりません &lt;code&gt;SSLEngine.wrap()&lt;/code&gt; 呼び出さなければなりません。</target>
        </trans-unit>
        <trans-unit id="02fa5e3b89e2cea3ead9db69cbe845f18df35ab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs the results of one (or more) delegated tasks before handshaking can continue.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、ハンドシェークを続行する前に、1つ（またはそれ以上）の委任タスクの結果を必要とします。</target>
        </trans-unit>
        <trans-unit id="082a3cd7613f1264f8b5206e5fbed35f61a0dff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs to receive data from the remote side before handshaking can continue.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、ハンドシェークを続行する前に、リモート側からのデータを受信する必要があります。</target>
        </trans-unit>
        <trans-unit id="d352a14052137339f442e35be68221c08d8d1336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; produces/consumes complete SSL/TLS packets only, and does not store application data internally between calls to &lt;code&gt;wrap()/unwrap()&lt;/code&gt;. Thus input and output &lt;code&gt;ByteBuffer&lt;/code&gt;s must be sized appropriately to hold the maximum record that can be produced. Calls to &lt;a href=&quot;sslsession#getPacketBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sslsession#getApplicationBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt;&lt;/a&gt; should be used to determine the appropriate buffer sizes. The size of the outbound application data buffer generally does not matter. If buffer conditions do not allow for the proper consumption/production of data, the application must determine (via &lt;a href=&quot;sslengineresult&quot;&gt;&lt;code&gt;SSLEngineResult&lt;/code&gt;&lt;/a&gt;) and correct the problem, and then try the call again.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは /生産する唯一の完全なSSL / TLSパケットを消費し、呼び出しの間に、内部アプリケーションデータが格納されていない &lt;code&gt;wrap()/unwrap()&lt;/code&gt; 。したがって、入力および出力の &lt;code&gt;ByteBuffer&lt;/code&gt; は、生成可能な最大レコードを保持するために適切なサイズにする必要があります。&lt;a href=&quot;sslsession#getPacketBufferSize--&quot;&gt; &lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;sslsession#getApplicationBufferSize--&quot;&gt; &lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt; の&lt;/a&gt;呼び出しを使用して、適切なバッファーサイズを決定する必要があります。発信アプリケーションのデータバッファのサイズは、通常は問題になりません。バッファー条件がデータの適切な消費/生成を許可しない場合、アプリケーションは（&lt;a href=&quot;sslengineresult&quot;&gt; &lt;code&gt;SSLEngineResult&lt;/code&gt; &lt;/a&gt;を介して）判別し、問題を修正してから、呼び出しを再試行する必要があります。</target>
        </trans-unit>
        <trans-unit id="b752ac795479df72fea9b170d743467ba0f0cfba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; was not able to process the operation because there are not enough bytes available in the destination buffer to hold the result.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、結果を保持するための宛先バッファに十分なバイトがないため、操作を処理できませんでした。</target>
        </trans-unit>
        <trans-unit id="eaeaedd8a0decde5ead8adb6e73dcb183ff095c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; was not able to unwrap the incoming data because there were not enough source bytes available to make a complete packet.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは十分に元が完全なパケットを作るために利用可能なバイトがなかったので、着信データのラップを解除することができませんでした。</target>
        </trans-unit>
        <trans-unit id="cbaeb5659c8aac8f7fee34b65d2504a15d654f38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLSocket&lt;/code&gt; class provides much of the same security functionality, but all of the inbound and outbound data is automatically transported using the underlying &lt;a href=&quot;../../../java/net/socket&quot;&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/a&gt;, which by design uses a blocking model. While this is appropriate for many applications, this model does not provide the scalability required by large servers.</source>
          <target state="translated">&lt;code&gt;SSLSocket&lt;/code&gt; クラスはほとんど同じセキュリティ機能を提供しますが、インバウンドとアウトバウンドのすべてのデータが自動的に基礎となる使用して搬送され、&lt;a href=&quot;../../../java/net/socket&quot;&gt; &lt;code&gt;Socket&lt;/code&gt; &lt;/a&gt;の設計により、ブロッキングモデルを使用しています、。これは多くのアプリケーションに適していますが、このモデルは大規模サーバーに必要なスケーラビリティを提供しません。</target>
        </trans-unit>
        <trans-unit id="67002f2853371825d4f380e6151673d61fd862c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngine&lt;/code&gt; implementation version.</source>
          <target state="translated">&lt;code&gt;ScriptEngine&lt;/code&gt; のの実装のバージョン。</target>
        </trans-unit>
        <trans-unit id="f25a0860dae0919f1e2c083b37f6094e4c1e6bad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngine&lt;/code&gt; that created this &lt;code&gt;CompiledScript&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ScriptEngine&lt;/code&gt; のこの作成 &lt;code&gt;CompiledScript&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="5e21343e7ca5145a39ccb5bfd47f5b581373d98e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineFactory&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ScriptEngineFactory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b665ef5d411bf64411a13e786d5fc2ae59afce43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; はのための発見とインスタンス化のメカニズムを実装 &lt;code&gt;ScriptEngine&lt;/code&gt; 授業をしても、マネージャが作成したすべてのエンジンで共有状態を保存するキー/値ペアのコレクションを維持します。</target>
        </trans-unit>
        <trans-unit id="e8ac26f4b46b05f20c281cbfe3a63c1a0d4d63f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager. This class uses the service provider mechanism to enumerate all the implementations of &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; はのための発見とインスタンス化のメカニズムを実装 &lt;code&gt;ScriptEngine&lt;/code&gt; 授業をしても、マネージャが作成したすべてのエンジンで共有状態を保存するキー/値ペアのコレクションを維持します。このクラスは、サービスプロバイダーメカニズムを使用して、 &lt;code&gt;ScriptEngineFactory&lt;/code&gt; のすべての実装を列挙します。</target>
        </trans-unit>
        <trans-unit id="c8f5248bd1e6ed1326e622b205ee4a45bbc651cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; provides a method to return a list of all these factories as well as utility methods which look up factories on the basis of language name, file extension and mime type.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; は、言語名、ファイル拡張子とMIMEタイプに基づいて、工場を見て、これらすべての工場だけでなく、ユーティリティメソッドのリストを返すメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="901dec5a90ef8a0878213de32ad7798df415e097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; uses the service provider mechanism described in the</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; はで説明したサービスプロバイダのメカニズムを使用しています</target>
        </trans-unit>
        <trans-unit id="dcf2e0bf99eab15ad6a0fa15e39d7a6c2e33fef8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SearchResult&lt;/code&gt; may also contain attributes of the matching object if the &lt;code&gt;cons&lt;/code&gt; argument specifies that attributes be returned.</source>
          <target state="translated">&lt;code&gt;SearchResult&lt;/code&gt; は、場合も、一致するオブジェクトの属性を含むことが &lt;code&gt;cons&lt;/code&gt; 属性が返されることに引数を指定します。</target>
        </trans-unit>
        <trans-unit id="eabc9dbc1a3de0e0e126d5d1a67a58df32a7962f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SecurityManager&lt;/code&gt; class contains many methods with names that begin with the word &lt;code&gt;check&lt;/code&gt;. These methods are called by various methods in the Java libraries before those methods perform certain potentially sensitive operations. The invocation of such a &lt;code&gt;check&lt;/code&gt; method typically looks like this:</source>
          <target state="translated">&lt;code&gt;SecurityManager&lt;/code&gt; クラスには、ワードで始まる名前を持つ多くのメソッドが含ま &lt;code&gt;check&lt;/code&gt; 。これらのメソッドは、これらのメソッドが特定の潜在的に機密性の高い操作を実行する前に、Javaライブラリのさまざまなメソッドによって呼び出されます。このような &lt;code&gt;check&lt;/code&gt; メソッドの呼び出しは、通常、次のようになります。</target>
        </trans-unit>
        <trans-unit id="cdf333c83d829b3401cd3328628d6c609f64f31a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sequencer&lt;/code&gt; interface includes methods for the following basic MIDI sequencer operations:</source>
          <target state="translated">&lt;code&gt;Sequencer&lt;/code&gt; インタフェースは、次の基本的なMIDIシーケンサーの操作のためのメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="2d6a25bea447e545dee0ec116fce9cf07f17df31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; interface places additional stipulations, beyond those inherited from the &lt;code&gt;Collection&lt;/code&gt; interface, on the contracts of all constructors and on the contracts of the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods. Declarations for other inherited methods are also included here for convenience. (The specifications accompanying these declarations have been tailored to the &lt;code&gt;Set&lt;/code&gt; interface, but they do not contain any additional stipulations.)</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; インタフェースから継承されたものを超えて、追加の規定を置く &lt;code&gt;Collection&lt;/code&gt; すべてのコンストラクタの契約にとの契約上、インタフェース &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;equals&lt;/code&gt; と &lt;code&gt;hashCode&lt;/code&gt; 方法。他の継承されたメソッドの宣言もここに含まれています。（これらの宣言に付随する仕様は &lt;code&gt;Set&lt;/code&gt; インターフェースに合わせて調整されていますが、追加の規定は含まれていません。）</target>
        </trans-unit>
        <trans-unit id="ca2825253af57c9c2e6a3d7675526c2242a40a0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; of Principals associated with this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Subject&lt;/code&gt; 関連付けられているプリンシパルの &lt;code&gt;Set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61061520eba3a069412253fc6b718281a7764587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;short&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;short&lt;/code&gt; オブジェクト内を。</target>
        </trans-unit>
        <trans-unit id="5bd6d5314769fa94b169cf6fd6d3a5c0f5803d61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;short&lt;/code&gt; in an object. An object of type &lt;code&gt;Short&lt;/code&gt; contains a single field whose type is &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;short&lt;/code&gt; オブジェクト内を。 &lt;code&gt;Short&lt;/code&gt; 型のオブジェクトには、 &lt;code&gt;short&lt;/code&gt; 型の単一のフィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="cf5e4c26203f886b6a7a4f1b81f96c02a0a29697" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SignedResultsControl&lt;/code&gt; class might be defined as follows:</source>
          <target state="translated">&lt;code&gt;SignedResultsControl&lt;/code&gt; の次のようにクラスが定義されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="3a917286530fabb04fa41fccacd2711f46f2bddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleScriptContext&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SimpleScriptContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca03fd6be029ed8ca889a60a8a508d0a4a1babe2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; のクラスがあります</target>
        </trans-unit>
        <trans-unit id="f454eae06e8c8450f0d9941d0498c44514cf1e53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Boolean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Boolean&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="639c3ab3a04fd48b0812edf7c08168f9b2abfe76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Byte&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6779cad3872976416b8715cdc2cae03f34516e84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Character&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Character&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="ccc12a9229fa28b212383ee48e5d6d48b5829469" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Double&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="3b4dbe56be7eeb7407783a82c785c69757959537" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Float&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="950ad58636d59dcea09852f3de50a8b54e4ec126" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Integer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Integer&lt;/code&gt; で。</target>
        </trans-unit>
        <trans-unit id="38105e6f78986a670b722ab3d041a7ff3901722e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Long&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a28cf8d0823e5eefc4a4e7fc0bee61dc5592a17e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Short&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="820c357e21a5bd82921b5bccd1f7a3db183c43be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.String&lt;/code&gt; で。</target>
        </trans-unit>
        <trans-unit id="36b771fc8f2baca3d65ff467300137e5fa46b87f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Void&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6dbd2a7b98eeeeb0df1e9367af1772ffa7a82ff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.math.BigDecimal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.math.BigDecimal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98c8cbacf6c530dcd5198d36051672cced797c4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.math.BigInteger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.math.BigInteger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53ea91ec792b961906f05193441b86fc1c764ce1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.util.Date&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.util.Date&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9f782c191b744e88038240ceea9bf9b47ef00d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;javax.management.ObjectName&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;javax.management.ObjectName&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f21653116680d7405660374ff050723b7344530" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SocketAddress&lt;/code&gt; that the socket is bound to, or the &lt;code&gt;SocketAddress&lt;/code&gt; representing the loopback address if denied by the security manager, or &lt;code&gt;null&lt;/code&gt; if the channel's socket is not bound</source>
          <target state="translated">&lt;code&gt;SocketAddress&lt;/code&gt; ソケットがバインドされている、または &lt;code&gt;SocketAddress&lt;/code&gt; セキュリティマネージャ、またはによって拒否された場合は、ループバックアドレスを表す &lt;code&gt;null&lt;/code&gt; チャネルのソケットがバインドされていない場合</target>
        </trans-unit>
        <trans-unit id="18e018252e244e834ac16d7592161dec68491d6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceDataLine&lt;/code&gt; interface provides a method for writing audio data to the data line's buffer. Applications that play or mix audio should write data to the source data line quickly enough to keep the buffer from underflowing (emptying), which could cause discontinuities in the audio that are perceived as clicks. Applications can use the &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. The amount of data which can be written to the buffer without blocking is the difference between the buffer size and the amount of queued data. If the delivery of audio output stops due to underflow, a &lt;code&gt;&lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; event is generated. A &lt;code&gt;&lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; event is generated when the audio output resumes.</source>
          <target state="translated">&lt;code&gt;SourceDataLine&lt;/code&gt; インタフェースは、データラインのバッファにオーディオデータを書き込むための方法を提供します。オーディオを再生またはミキシングするアプリケーションは、バッファーがアンダーフロー（空になる）しないように十分な速さでソースデータラインにデータを書き込む必要があります。アプリケーションは、 &lt;code&gt;DataLine&lt;/code&gt; インターフェースで定義されている &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; メソッドを使用して、データラインのバッファーに現在キューイングされているデータの量を判断できます。ブロックせずにバッファに書き込むことができるデータの量は、バッファサイズとキューに入れられたデータの量の差です。アンダーフローが原因でオーディオ出力の配信が停止した場合、 &lt;code&gt;&lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; イベントが生成されます。 A &lt;code&gt;&lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; イベントは、オーディオ出力が再開したときに生成されます。</target>
        </trans-unit>
        <trans-unit id="7d6c5c0e9a62febf84bbb9141ee81024ed231a73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; additionally reports &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; はさらに報告&lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a5cd94ecb80a03490b99bcd80e701c14fac87925" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; additionally reports &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt; and implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism..</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; はさらに報告&lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt;と道具が &lt;code&gt;trySplit&lt;/code&gt; 限られた並列処理を可能にするために、..</target>
        </trans-unit>
        <trans-unit id="af784776c0cdc3b45691af7e034f88ace154b36b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は実装 &lt;code&gt;trySplit&lt;/code&gt; を制限された並列処理を可能とします。</target>
        </trans-unit>
        <trans-unit id="bc4bc484d5f7374b739600d18f54719d380be19e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt;&lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, with an encounter order that is ascending order. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt; &lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;昇順された出会いのために、。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="f2950b171471656d176973c0cdbe156c00f2950c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt;&lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt; &lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f29dd54a6792c7ed4529600d96348a75bdd9555a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; を&lt;/a&gt;。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="d956efee01ea55ce995f06c420101ace333173f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt;&lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt; &lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e199c4eef228c77de88efe1878bd4a7a2d489af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt;&lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt; &lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cbd59fa14ea73f85c3995572f64444c99c11f1eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c1e52439eecc198c689029f966c5a01b29d70971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="a468b87aa57a000d104e16ad1ebfc71127bed7dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; を&lt;/a&gt;。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="6ebf9e7f0b30959249ec16fdfe821371d93a4d56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="5eb4148ceff758d730c061aadb07b3dfc29badab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="6117d3f9be68af61e863fb3ac62f3f48f2b55bd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="365bad875f0605d7a3f88de21373c4b2c02e8b6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="c76f2bcfdf2668373b751457d6ab6afa52733599" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;ORDERED&lt;/code&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;ORDERED&lt;/code&gt; を。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="56ca63602e1e9a18ab8f45fd2c61e5f3e26c4da5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7a7b7355ffd0c2f2072bfc12a5dfa9d5724f300" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="69d1d467a5fec847db2c8830bffb8575def22c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="a22bed6089a698314bd570d8dfea84ff3886d8de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out (LIFO) stack of objects.</source>
          <target state="translated">&lt;code&gt;Stack&lt;/code&gt; クラスは、オブジェクトの後入れ先出し（LIFO）スタックを表しています。</target>
        </trans-unit>
        <trans-unit id="725a4ea6b7a05d02133053cfe135e8b021c0e333" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out (LIFO) stack of objects. It extends class &lt;code&gt;Vector&lt;/code&gt; with five operations that allow a vector to be treated as a stack. The usual &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; operations are provided, as well as a method to &lt;code&gt;peek&lt;/code&gt; at the top item on the stack, a method to test for whether the stack is &lt;code&gt;empty&lt;/code&gt;, and a method to &lt;code&gt;search&lt;/code&gt; the stack for an item and discover how far it is from the top.</source>
          <target state="translated">&lt;code&gt;Stack&lt;/code&gt; クラスは、オブジェクトの後入れ先出し（LIFO）スタックを表しています。これは、 &lt;code&gt;Vector&lt;/code&gt; をスタックとして扱うことができる5つの操作でVectorクラスを拡張します。通常の &lt;code&gt;push&lt;/code&gt; 操作と &lt;code&gt;pop&lt;/code&gt; 操作に加えて、スタックの一番上の項目を &lt;code&gt;peek&lt;/code&gt; 方法、スタックが &lt;code&gt;empty&lt;/code&gt; どうかをテストする方法、スタックから項目を &lt;code&gt;search&lt;/code&gt; その距離を見つける方法が提供されます上からです。</target>
        </trans-unit>
        <trans-unit id="1390697c89353b590988a85571b01944397a5934" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stream&lt;/code&gt; describing the content of the directory</source>
          <target state="translated">&lt;code&gt;Stream&lt;/code&gt; ディレクトリの内容を記述する</target>
        </trans-unit>
        <trans-unit id="c78c42072e63ca70c7ecefe4c83c75776bdbcfbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamHandler&lt;/code&gt; first checks if there is an &lt;code&gt;OutputStream&lt;/code&gt; and if the given &lt;code&gt;LogRecord&lt;/code&gt; has at least the required log level. If not it silently returns. If so, it calls any associated &lt;code&gt;Filter&lt;/code&gt; to check if the record should be published. If so, it calls its &lt;code&gt;Formatter&lt;/code&gt; to format the record and then writes the result to the current output stream.</source>
          <target state="translated">&lt;code&gt;StreamHandler&lt;/code&gt; は最初にチェックがある場合 &lt;code&gt;OutputStream&lt;/code&gt; と与えられた場合 &lt;code&gt;LogRecord&lt;/code&gt; が少なくとも必要なログレベルを有します。そうでない場合は、静かに戻ります。その場合は、関連付けられている &lt;code&gt;Filter&lt;/code&gt; を呼び出して、レコードを公開する必要があるかどうかを確認します。その場合、 &lt;code&gt;Formatter&lt;/code&gt; を呼び出してレコードをフォーマットし、その結果を現在の出力ストリームに書き込みます。</target>
        </trans-unit>
        <trans-unit id="e6a8fe0d59891f6c0cc5fc356448e863867d876b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamTokenizer&lt;/code&gt; class takes an input stream and parses it into &quot;tokens&quot;, allowing the tokens to be read one at a time.</source>
          <target state="translated">&lt;code&gt;StreamTokenizer&lt;/code&gt; のクラスは、入力ストリームを取り、「トークン」にそれを解析し、トークンは一度に読み込み一つであることができます。</target>
        </trans-unit>
        <trans-unit id="90790abff6838151ec89277ddea3efa96bd3fd1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamTokenizer&lt;/code&gt; class takes an input stream and parses it into &quot;tokens&quot;, allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment styles.</source>
          <target state="translated">&lt;code&gt;StreamTokenizer&lt;/code&gt; のクラスは、入力ストリームを取り、「トークン」にそれを解析し、トークンは一度に読み込み一つであることができます。解析プロセスは、テーブルと、さまざまな状態に設定できるいくつかのフラグによって制御されます。ストリームトークナイザーは、識別子、数字、引用符付き文字列、およびさまざまなコメントスタイルを認識できます。</target>
        </trans-unit>
        <trans-unit id="cace10574531d43fd7350c7bbe816d7c0693ff93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., &lt;code&gt;char&lt;/code&gt; values).</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; クラスは、Unicodeコード単位（すなわち、に対処するためのものに加えて、Unicodeコードポイント（すなわち、文字）を扱うための方法を提供 &lt;code&gt;char&lt;/code&gt; 値）。</target>
        </trans-unit>
        <trans-unit id="0d78a761f2944c5a20f9f6d6f41f724d053b8054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; クラスは文字列を表します。</target>
        </trans-unit>
        <trans-unit id="cfaf0978cdd4182db5fdb416c1be5b9a10ec7e9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings. All string literals in Java programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are implemented as instances of this class.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; クラスは文字列を表します。 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; などのJavaプログラムのすべての文字列リテラルは、このクラスのインスタンスとして実装されます。</target>
        </trans-unit>
        <trans-unit id="bf9e88bafccff9dfb01a4ed99ca09de99632708e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; constructor, on the other hand, is perfectly predictable: writing &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; creates a &lt;code&gt;BigDecimal&lt;/code&gt; which is</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; コンストラクタは、他の一方で、完全に予測可能である：書き込み &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; 作成する &lt;code&gt;BigDecimal&lt;/code&gt; しています</target>
        </trans-unit>
        <trans-unit id="79d62a9c1d3d1d0435af40a0f1b27c3991ef6251" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Synthesizer&lt;/code&gt; interface includes methods for loading and unloading instruments from soundbanks. An instrument is a specification for synthesizing a certain type of sound, whether that sound emulates a traditional instrument or is some kind of sound effect or other imaginary sound. A soundbank is a collection of instruments, organized by bank and program number (via the instrument's &lt;code&gt;Patch&lt;/code&gt; object). Different &lt;code&gt;Synthesizer&lt;/code&gt; classes might implement different sound-synthesis techniques, meaning that some instruments and not others might be compatible with a given synthesizer. Also, synthesizers may have a limited amount of memory for instruments, meaning that not every soundbank and instrument can be used by every synthesizer, even if the synthesis technique is compatible. To see whether the instruments from a certain soundbank can be played by a given synthesizer, invoke the &lt;a href=&quot;synthesizer#isSoundbankSupported-javax.sound.midi.Soundbank-&quot;&gt;&lt;code&gt;isSoundbankSupported&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Synthesizer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Synthesizer&lt;/code&gt; インタフェースはサウンドバンクからロードおよびアンロードの機器のための方法を含みます。楽器は、特定の種類の音を合成するための仕様です。その音は、従来の楽器をエミュレートするものでも、ある種の効果音やその他の想像上の音でも同じです。サウンドバンクは、（楽器の &lt;code&gt;Patch&lt;/code&gt; オブジェクトを介して）バンクとプログラム番号で編成された楽器のコレクションです。別の &lt;code&gt;Synthesizer&lt;/code&gt; クラスは異なるサウンド合成技術を実装する場合があります。つまり、特定のシンセサイザーと互換性のある楽器とそうでない楽器があります。また、シンセサイザのインス​​トゥルメント用のメモリ容量は限られている可能性があります。つまり、合成手法に互換性があっても、すべてのサウンドバンクとインストゥルメントがすべてのシンセサイザで使用できるわけではありません。特定のサウンドバンクから楽器が与えられたシンセサイザーで演奏することが可能かどうかを確認するには、起動&lt;a href=&quot;synthesizer#isSoundbankSupported-javax.sound.midi.Soundbank-&quot;&gt; &lt;code&gt;isSoundbankSupported&lt;/code&gt; の&lt;/a&gt;方法 &lt;code&gt;Synthesizer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cfaf0a0f81bd0eca9825b951309b3216299181ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; クラスには有用なクラスフィールドおよびメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="2e929acaa33491c9123dc823b9825fd21aa7ba63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods. It cannot be instantiated.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; クラスには有用なクラスフィールドおよびメソッドが含まれています。インスタンス化することはできません。</target>
        </trans-unit>
        <trans-unit id="90342a4ec5ebd367ca721e299022f4ba7c4abcba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TYPE_USE&lt;/code&gt; constant includes type declarations and type parameter declarations as a convenience for designers of type checkers which give semantics to annotation types. For example, if the annotation type &lt;code&gt;NonNull&lt;/code&gt; is meta-annotated with &lt;code&gt;@Target(ElementType.TYPE_USE)&lt;/code&gt;, then &lt;code&gt;@NonNull&lt;/code&gt;&lt;code&gt;class C {...}&lt;/code&gt; could be treated by a type checker as indicating that all variables of class &lt;code&gt;C&lt;/code&gt; are non-null, while still allowing variables of other classes to be non-null or not non-null based on whether &lt;code&gt;@NonNull&lt;/code&gt; appears at the variable's declaration.</source>
          <target state="translated">&lt;code&gt;TYPE_USE&lt;/code&gt; の定数は、注釈タイプに意味を与えるタイプチェッカーの設計者にとって利便性の型宣言と型パラメータ宣言を含みます。たとえば、注釈タイプ &lt;code&gt;NonNull&lt;/code&gt; が &lt;code&gt;@Target(ElementType.TYPE_USE)&lt;/code&gt; でメタ注釈付けされている場合、 &lt;code&gt;@NonNull&lt;/code&gt; &lt;code&gt;class C {...}&lt;/code&gt; はタイプチェッカーによってクラス &lt;code&gt;C&lt;/code&gt; のすべての変数が非nullであることを示すものとして扱うことができます &lt;code&gt;@NonNull&lt;/code&gt; 、変数の宣言に@NonNullが現れるかどうかに基づいて、他のクラスの変数をnull以外またはnull以外にすることができます。</target>
        </trans-unit>
        <trans-unit id="3ef83572b32113beb492c13117cd5dc2ac290774" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularData&lt;/code&gt; interface specifies the behavior of a specific type of complex</source>
          <target state="translated">&lt;code&gt;TabularData&lt;/code&gt; インターフェースは、複合体の特定の種類の動作を指定します</target>
        </trans-unit>
        <trans-unit id="7724aaad4c815a2f3d25835048c64655b5a959e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularDataSupport&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;TabularDataSupport&lt;/code&gt; のクラスがあります</target>
        </trans-unit>
        <trans-unit id="d1a581b7f12d575f8065049692b39a4f8b425736" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;TabularType&lt;/code&gt; でのクラスがあります</target>
        </trans-unit>
        <trans-unit id="2b88d977d84dfecfb709ca75951d725a6ab95a15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TargetDataLine&lt;/code&gt; interface provides a method for reading the captured data from the target data line's buffer.Applications that record audio should read data from the target data line quickly enough to keep the buffer from overflowing, which could cause discontinuities in the captured data that are perceived as clicks. Applications can use the &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. If the buffer does overflow, the oldest queued data is discarded and replaced by new data.</source>
          <target state="translated">&lt;code&gt;TargetDataLine&lt;/code&gt; インタフェースは、レコードの音声が認識されている取得したデータに不連続になる可能性があり、オーバーフローバッファを維持するために十分に迅速にターゲットデータラインからデータを読み込む必要があることをターゲットデータラインのbuffer.Applicationsから取得したデータを読み取るための方法を提供し、クリックとして。アプリケーションは、 &lt;code&gt;DataLine&lt;/code&gt; インターフェースで定義された &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; メソッドを使用して、データラインのバッファーに現在キューイングされているデータの量を判断できます。バッファがオーバーフローすると、最も古いキューに入れられたデータが破棄され、新しいデータに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="3e0b1acfd21178efdd1911606a8891da6c388408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetDateTime&lt;/code&gt; using &lt;a href=&quot;offsetdatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two date-times, the specified end date-time is normalized to have the same offset as this date-time.</source>
          <target state="translated">&lt;code&gt;Temporal&lt;/code&gt; に変換され、このメソッドに渡さ &lt;code&gt;OffsetDateTime&lt;/code&gt; 使用&lt;a href=&quot;offsetdatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;。2つの日時間でオフセットが異なる場合、指定された終了日時は、この日時と同じオフセットを持つように正規化されます。</target>
        </trans-unit>
        <trans-unit id="3e06b07abdd9c26452543a4ee27b98a4f883116f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetTime&lt;/code&gt; using &lt;a href=&quot;offsettime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two times, then the specified end time is normalized to have the same offset as this time.</source>
          <target state="translated">&lt;code&gt;Temporal&lt;/code&gt; に変換され、このメソッドに渡さ &lt;code&gt;OffsetTime&lt;/code&gt; 使用&lt;a href=&quot;offsettime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;。2つの時間の間でオフセットが異なる場合、指定された終了時間は、この時間と同じオフセットを持つように正規化されます。</target>
        </trans-unit>
        <trans-unit id="137e87a41dd6513a254139c8feaaab1e66487d95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;ZonedDateTime&lt;/code&gt; using &lt;a href=&quot;zoneddatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the time-zone differs between the two zoned date-times, the specified end date-time is normalized to have the same zone as this date-time.</source>
          <target state="translated">&lt;code&gt;Temporal&lt;/code&gt; に変換され、このメソッドに渡さ &lt;code&gt;ZonedDateTime&lt;/code&gt; 使用&lt;a href=&quot;zoneddatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;。2つのゾーン化された日時の間でタイムゾーンが異なる場合、指定された終了日時は、この日時と同じゾーンを持つように正規化されます。</target>
        </trans-unit>
        <trans-unit id="e5e2abe85585b946fe3143ade66a1eb51b565159" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TemporalAdjuster&lt;/code&gt; is based on the low level &lt;code&gt;Temporal&lt;/code&gt; interface. This method allows an adjustment from &lt;code&gt;LocalDate&lt;/code&gt; to &lt;code&gt;LocalDate&lt;/code&gt; to be wrapped to match the temporal-based interface. This is provided for convenience to make user-written adjusters simpler.</source>
          <target state="translated">&lt;code&gt;TemporalAdjuster&lt;/code&gt; はローレベルに基づいて &lt;code&gt;Temporal&lt;/code&gt; インタフェース。この方法は、より調整可能 &lt;code&gt;LocalDate&lt;/code&gt; に &lt;code&gt;LocalDate&lt;/code&gt; 時間ベースのインタフェースに適合するようにラップされます。これは、ユーザー作成のアジャスターをより簡単にするために提供されています。</target>
        </trans-unit>
        <trans-unit id="179bee4e4045d3f40705d1a933596e56a91b3268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ThreadMXBean&lt;/code&gt; interface provides the &lt;a href=&quot;threadmxbean#findMonitorDeadlockedThreads--&quot;&gt;&lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;threadmxbean#findDeadlockedThreads--&quot;&gt;&lt;code&gt;findDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; methods to find deadlocks in the running application.</source>
          <target state="translated">&lt;code&gt;ThreadMXBean&lt;/code&gt; インタフェースが提供&lt;a href=&quot;threadmxbean#findMonitorDeadlockedThreads--&quot;&gt; &lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;threadmxbean#findDeadlockedThreads--&quot;&gt; &lt;code&gt;findDeadlockedThreads()&lt;/code&gt; を&lt;/a&gt;実行しているアプリケーションでデッドロックを見つけるための方法。</target>
        </trans-unit>
        <trans-unit id="39917ae27e9e1229d50311719d5d54222afebd7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; クラスは、Java言語のすべてのエラーと例外のスーパークラスです。</target>
        </trans-unit>
        <trans-unit id="08f3668a9e709259220f6210bae5df043abe1c67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java &lt;code&gt;throw&lt;/code&gt; statement. Similarly, only this class or one of its subclasses can be the argument type in a &lt;code&gt;catch&lt;/code&gt; clause. For the purposes of compile-time checking of exceptions, &lt;code&gt;Throwable&lt;/code&gt; and any subclass of &lt;code&gt;Throwable&lt;/code&gt; that is not also a subclass of either &lt;a href=&quot;runtimeexception&quot;&gt;&lt;code&gt;RuntimeException&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; are regarded as checked exceptions.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; クラスは、Java言語のすべてのエラーと例外のスーパークラスです。このクラス（またはそのサブクラスの1つ）のインスタンスであるオブジェクトのみが、Java仮想マシンによってスローされるか、Javaの &lt;code&gt;throw&lt;/code&gt; ステートメントによってスローできます。同様に、このクラスまたはそのサブクラスの1つだけが、 &lt;code&gt;catch&lt;/code&gt; 節の引数型になることができます。例外のコンパイル時チェックのために、 &lt;code&gt;Throwable&lt;/code&gt; 、および&lt;a href=&quot;runtimeexception&quot;&gt; &lt;code&gt;RuntimeException&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; の&lt;/a&gt;サブクラスではない &lt;code&gt;Throwable&lt;/code&gt; のサブクラスは、チェックされた例外と見なされます。</target>
        </trans-unit>
        <trans-unit id="4424bacaff9f769c17cab48ed5095a39891ea9af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method is overwritten by a &lt;a href=&quot;dateformat#setCalendar-java.util.Calendar-&quot;&gt;&lt;code&gt;setCalendar&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; この方法でセットが上書きされ&lt;a href=&quot;dateformat#setCalendar-java.util.Calendar-&quot;&gt; &lt;code&gt;setCalendar&lt;/code&gt; の&lt;/a&gt;コール。</target>
        </trans-unit>
        <trans-unit id="ab6ef098a0e2b11a35d0346ab8d1c75fce3fa93c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method may be overwritten as a result of a call to the parse method.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; この方法によるセットが解析メソッドの呼び出しの結果として上書きしてもよいです。</target>
        </trans-unit>
        <trans-unit id="64856a2ea07154d8aca40a14f0b2a8f2b6235c3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Track&lt;/code&gt; class provides methods to edit the track by adding or removing &lt;code&gt;MidiEvent&lt;/code&gt; objects from it. These operations keep the event list in the correct time order. Methods are also included to obtain the track's size, in terms of either the number of events it contains or its duration in ticks.</source>
          <target state="translated">&lt;code&gt;Track&lt;/code&gt; クラスが追加または削除して編集にトラックをメソッドを提供 &lt;code&gt;MidiEvent&lt;/code&gt; それからオブジェクトを。これらの操作により、イベントリストが正しい時間順に保持されます。トラックのサイズを取得するためのメソッドも含まれています。トラックに含まれるイベントの数またはティック単位での期間のいずれかです。</target>
        </trans-unit>
        <trans-unit id="9a63fe4036fc39c3775af4983ad2d733adec1ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Transient&lt;/code&gt; annotation may be be used in any of the methods that are involved in a &lt;a href=&quot;featuredescriptor&quot;&gt;&lt;code&gt;FeatureDescriptor&lt;/code&gt;&lt;/a&gt; subclass to identify the transient feature in the annotated class and its subclasses. Normally, the method that starts with &quot;get&quot; is the best place to put the annotation and it is this declaration that takes precedence in the case of multiple annotations being defined for the same feature.</source>
          <target state="translated">&lt;code&gt;Transient&lt;/code&gt; アノテーションはに関与している方法のいずれかにおいて使用されてもよい&lt;a href=&quot;featuredescriptor&quot;&gt; &lt;code&gt;FeatureDescriptor&lt;/code&gt; の&lt;/a&gt;注釈付きのクラスおよびそのサブクラスの過渡機能を識別するために、サブクラス。通常、「get」で始まるメソッドがアノテーションを配置するのに最適な場所であり、同じ宣言が複数のアノテーションが同じ機能に対して定義されている場合に優先されます。</target>
        </trans-unit>
        <trans-unit id="56b910f29830f7a046163f6e535cb7ed1fc9dd25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URI&lt;/code&gt; passed as an argument specifies the intended use for the cookies. In particular the scheme should reflect whether the cookies will be sent over http, https or used in another context like javascript. The host part should reflect either the destination of the cookies or their origin in the case of javascript.</source>
          <target state="translated">&lt;code&gt;URI&lt;/code&gt; は、引数は、クッキーの使用目的を指定して渡されました。特に、このスキームは、Cookieがhttp、httpsのどちらで送信されるか、またはJavaScriptなどの別のコンテキストで使用されるかを反映する必要があります。ホスト部分は、Cookieの宛先またはJavaScriptの場合はそれらの出所を反映する必要があります。</target>
        </trans-unit>
        <trans-unit id="4ba34cdf99e04c2d36d3c24cfdbaca9cd7b39e21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; instance is used to construct a stream protocol handler from a protocol name.</source>
          <target state="translated">&lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; のインスタンスは、プロトコル名からストリームプロトコルハンドラを構築するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1d60c3045667966fd5b30a25092dd1ae85ace600" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets are specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt;; the transformation formats upon which they are based are specified in Amendment 1 of ISO 10646-1 and are also described in the &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 文字セットがで指定された&lt;a href=&quot;http://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt;。それらが基づいている変換形式は、ISO 10646-1の修正1で指定されており、&lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode規格&lt;/i&gt;&lt;/a&gt;でも説明されてい&lt;i&gt;ます&lt;/i&gt;。</target>
        </trans-unit>
        <trans-unit id="e562ee77a3c77e7c3517890b43d086ebf2121c0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets use sixteen-bit quantities and are therefore sensitive to byte order. In these encodings the byte order of a stream may be indicated by an initial</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 文字セットは、16ビット量を使用し、バイト順することが敏感です。これらのエンコーディングでは、ストリームのバイト順は最初の</target>
        </trans-unit>
        <trans-unit id="cf273b4ec9d4f261c426075182f01ae5218ee7da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-8&lt;/code&gt; charset is specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt;; the transformation format upon which it is based is specified in Amendment 2 of ISO 10646-1 and is also described in the &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 文字セットがで指定された&lt;a href=&quot;http://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt; ; それが基づく変換フォーマットは、ISO 10646-1のAmendment 2で指定されており、&lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode規格&lt;/i&gt;&lt;/a&gt;でも説明されてい&lt;i&gt;ます&lt;/i&gt;。</target>
        </trans-unit>
        <trans-unit id="f3746255404c7a2b3ecfdce90d4c067951094108" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance identified by &lt;code&gt;blockName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnicodeBlock&lt;/code&gt; ので識別されるインスタンス &lt;code&gt;blockName&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="0d896f7ed14163beb92e5724cc9e8050c6b43c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the Unicode block of which this character is a member, or &lt;code&gt;null&lt;/code&gt; if the character is not a member of any Unicode block</source>
          <target state="translated">&lt;code&gt;UnicodeBlock&lt;/code&gt; のユニコードこの文字がメンバーであるブロック、または表すインスタンス &lt;code&gt;null&lt;/code&gt; 文字は、任意のUnicodeブロックのメンバーでない場合</target>
        </trans-unit>
        <trans-unit id="3da0426647b35089008f837fbe22d127f746d93b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeScript&lt;/code&gt; constant identified by &lt;code&gt;scriptName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnicodeScript&lt;/code&gt; ので識別される、一定 &lt;code&gt;scriptName&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="361aa86ab23e083f317e898d7085e206739f58ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeScript&lt;/code&gt; constant representing the Unicode script of which this character is assigned to.</source>
          <target state="translated">&lt;code&gt;UnicodeScript&lt;/code&gt; のこの文字が割り当てられているのはUnicodeスクリプトを表す定数。</target>
        </trans-unit>
        <trans-unit id="6b22e15bc413740c6b41cef56f96b20ebfc3c2ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; for this file system</source>
          <target state="translated">このファイルシステムの &lt;code&gt;UserPrincipalLookupService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c0c0ad3a9196627434d4da0577e73a19e9ed982" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ValueExp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ValueExp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95f12ecc4c931b6cd52c7c8712c089eb1f901958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; クラスは、オブジェクトの可変長配列を実装します。</target>
        </trans-unit>
        <trans-unit id="4aeeb9de325145d9de793fc5e171c818d3209bca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index. However, the size of a &lt;code&gt;Vector&lt;/code&gt; can grow or shrink as needed to accommodate adding and removing items after the &lt;code&gt;Vector&lt;/code&gt; has been created.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; クラスは、オブジェクトの可変長配列を実装します。配列のように、整数のインデックスを使用してアクセスできるコンポーネントが含まれています。しかし、の大きさ &lt;code&gt;Vector&lt;/code&gt; 後のアイテムの追加と削除に対応するために、必要に応じて拡大または縮小することができます &lt;code&gt;Vector&lt;/code&gt; 作成されています。</target>
        </trans-unit>
        <trans-unit id="ef38f50778470be314c350ac1236d4ae66252c2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VetoableChangeSupport&lt;/code&gt; associated with this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VetoableChangeSupport&lt;/code&gt; これに関連した &lt;code&gt;BeanContextChildSupport&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20a05157c7add57e69ed4b84eda43d3b9471dac5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Void&lt;/code&gt; class is an uninstantiable placeholder class to hold a reference to the &lt;code&gt;Class&lt;/code&gt; object representing the Java keyword void.</source>
          <target state="translated">&lt;code&gt;Void&lt;/code&gt; クラスへの参照を保持するuninstantiableプレースホルダー・クラスである &lt;code&gt;Class&lt;/code&gt; のJavaキーワードボイドを表すオブジェクト。</target>
        </trans-unit>
        <trans-unit id="26d20b795a509ccf345f4880f86bffc5ff46ea07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77fb3bff5f49c42c2161c3e19062b5010a06389f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt; methods to write text throw &lt;code&gt;IOException&lt;/code&gt; if the text cannot be encoded using the specified charset.</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt; 書き込みテキストへのメソッドスロー &lt;code&gt;IOException&lt;/code&gt; がテキストが指定された文字セットを使用してエンコードすることができない場合。</target>
        </trans-unit>
        <trans-unit id="5df6357d2d9dd77291511c1a5a3bbe7008f4a76d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2fdc5e90dac380c583a94ac10964401cbc1bff2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; ののクラスを使用して作成したXML文書を読み取るために使用され &lt;code&gt;XMLEncoder&lt;/code&gt; をし、同じように使用され &lt;code&gt;ObjectInputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c73680d790e9f555b97eb4fbffb24cd26c3ccca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;. For example, one can use the following fragment to read the first object defined in an XML document written by the &lt;code&gt;XMLEncoder&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; ののクラスを使用して作成したXML文書を読み取るために使用され &lt;code&gt;XMLEncoder&lt;/code&gt; をし、同じように使用され &lt;code&gt;ObjectInputStream&lt;/code&gt; 。たとえば、次のフラグメントを使用して、 &lt;code&gt;XMLEncoder&lt;/code&gt; クラスによって記述されたXMLドキュメントで定義された最初のオブジェクトを読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="b40fba744abf8f8cdfdbf7823211e024611a2005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; クラスは、に相補的代替物である &lt;code&gt;ObjectOutputStream&lt;/code&gt; のテキスト表現を生成するために使用することができる&lt;em&gt;JavaBeanの&lt;/em&gt;と同じ方法で &lt;code&gt;ObjectOutputStream&lt;/code&gt; のがのバイナリ表現を作成するために使用できる &lt;code&gt;Serializable&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="bc93ab4e94e8fd32e113d65a55be49ef42b7d783" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects. For example, the following fragment can be used to create a textual representation the supplied &lt;em&gt;JavaBean&lt;/em&gt; and all its properties:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; クラスは、に相補的代替物である &lt;code&gt;ObjectOutputStream&lt;/code&gt; のテキスト表現を生成するために使用することができる&lt;em&gt;JavaBeanの&lt;/em&gt;と同じ方法で &lt;code&gt;ObjectOutputStream&lt;/code&gt; のがのバイナリ表現を作成するために使用できる &lt;code&gt;Serializable&lt;/code&gt; オブジェクトを。たとえば、次のフラグメントを使用して、提供された&lt;em&gt;JavaBean&lt;/em&gt;とそのすべてのプロパティのテキスト表現を作成できます。</target>
        </trans-unit>
        <trans-unit id="baee72131905882a77a0b4ca9b76ace184c77c99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class provides a default denotation for &lt;em&gt;JavaBean&lt;/em&gt;s in which they are represented as XML documents complying with version 1.0 of the XML specification and the UTF-8 character encoding of the Unicode/ISO 10646 character set. The XML documents produced by the &lt;code&gt;XMLEncoder&lt;/code&gt; class are:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; クラスは、デフォルトの表記を提供&lt;em&gt;するJavaBean&lt;/em&gt;の彼らはXML仕様とUnicode / ISO 10646文字セットのUTF-8文字エンコーディングのバージョン1.0に準拠するXML文書として表現されているが。 &lt;code&gt;XMLEncoder&lt;/code&gt; クラスによって生成されるXMLドキュメントは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="dc6626b4ce56edf5eec0e4e7f1f6d83d431a9d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[ ]&lt;/code&gt; characters are a</source>
          <target state="translated">&lt;code&gt;[ ]&lt;/code&gt; の文字があります</target>
        </trans-unit>
        <trans-unit id="cbec44aca0eff7c0fd9d646cfb96819a5b4c572f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;accumulator&lt;/code&gt; 機能がなければなりません&lt;a href=&quot;package-summary#Associativity&quot;&gt;連想&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="4185fd67e39e58987d681ed4e049cb9068cef055" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;action&lt;/code&gt; argument is of the same format as the &lt;code&gt;eventPropertyName&lt;/code&gt; argument where the last property name identifies either a method name or writable property.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; 引数と同じフォーマットである &lt;code&gt;eventPropertyName&lt;/code&gt; の最後のプロパティ名を識別するメソッド名または書き込み可能なプロパティのいずれかの引数。</target>
        </trans-unit>
        <trans-unit id="4200792e507990527888853e33e39555b27217a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be read and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; パラメータは、属性が読み取られるように識別し、形式をとります。</target>
        </trans-unit>
        <trans-unit id="e13622be0932a01b09ea0231195ad9dee2d891a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be set and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; パラメータを識別属性が設定され、フォームをとることにします。</target>
        </trans-unit>
        <trans-unit id="9300dec972e233c14dfee6f24a1437eb62d16c5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt; parameter identifies the attributes to be read and takes the form:</source>
          <target state="translated">&lt;code&gt;attributes&lt;/code&gt; 属性が読み込まれるパラメータが識別されているとの形式をとります。</target>
        </trans-unit>
        <trans-unit id="71ec10680a515404dcea83dc93b34a00ae544957" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is an optional array of file &lt;a href=&quot;../file/attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; ファイルのオプション配列であるパラメータ&lt;a href=&quot;../file/attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;ファイルを作成する際にアトミックに設定します。</target>
        </trans-unit>
        <trans-unit id="f5d11588e62ee6ecee510a144a13ae053b7ded0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the link. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; パラメータはオプションで&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;attributes&lt;/code&gt; &lt;/a&gt;のリンクを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="6a9611129a94268b694e7f0a6870f3b072a950a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when a new file is created.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;新しいファイルが作成されたときにアトミックに設定します。</target>
        </trans-unit>
        <trans-unit id="1530cb7be2e1a90d2e32e41b80f5181fbd3c409a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the directory. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;、ディレクトリを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="ad9b07c9e2205e3502079d33de386fcf7c13ff4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="3d4f30d19e092c8b774921588c985e988e8af3fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the &lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt;&lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。ファイル属性が指定されていない場合、結果のファイルには、&lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt; &lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt; &lt;/a&gt;メソッドによって作成されたファイルへのより限定的なアクセス許可が与えられる可能性があります。</target>
        </trans-unit>
        <trans-unit id="eac58af08c25e30b8096bbec06d65d5969d2351b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the nonexistent directories. Each file attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;存在しないディレクトリを作成する際にアトミックに設定します。各ファイル属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="9310f8ddf2f2e1abe2704763c0d8698944c86a52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; always returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;available&lt;/code&gt; メソッドは常に &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2a223f99a73adb8d4155acdcdbe953d90137df1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method of the underlying stream returns zero, indicating that further input requests would block.</source>
          <target state="translated">基になるストリームの &lt;code&gt;available&lt;/code&gt; メソッドはゼロを返し、それ以上の入力要求がブロックされることを示します。</target>
        </trans-unit>
        <trans-unit id="c19d6f589a03480c7507cbcf9ea41e93f9410bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 引数は、ソケット上の保留中の接続の要求の最大数です。その正確なセマンティクスは実装固有です。特に、実装では最大長を課したり、パラメータをすべて無視したりする場合があります。指定する値は &lt;code&gt;0&lt;/code&gt; より大きい必要があります。 &lt;code&gt;0&lt;/code&gt; 以下の場合、実装固有のデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="29ad9363012d93283f3d04ff689ea4b529ac1006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument must be a positive value greater than 0. If the value passed if equal or less than 0, then the default value will be assumed.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 値以下で0を、デフォルト値が仮定される場合に渡した場合引数が0より正の値も大きくなければなりません。</target>
        </trans-unit>
        <trans-unit id="b04fd34021527ffa6eec03ad117996148e622e5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; parameter is the maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. If the &lt;code&gt;backlog&lt;/code&gt; parameter has the value &lt;code&gt;0&lt;/code&gt;, or a negative value, then an implementation specific default is used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; パラメータは、ソケット上の保留中の接続の最大数です。その正確なセマンティクスは実装固有です。特に、実装では最大長を課したり、パラメータをすべて無視したりする場合があります。場合 &lt;code&gt;backlog&lt;/code&gt; パラメータが値を有する &lt;code&gt;0&lt;/code&gt; 、または負の値を、次に、実装固有のデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="038e82ed2e83821157222aec4b1425ddc2acdb2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beginIndex&lt;/code&gt; and &lt;code&gt;endIndex&lt;/code&gt; parameters specify the subsequence of name elements. The name that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The name that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;. The returned &lt;code&gt;Path&lt;/code&gt; object has the name elements that begin at &lt;code&gt;beginIndex&lt;/code&gt; and extend to the element at index &lt;code&gt;endIndex-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beginIndex&lt;/code&gt; パラメータと &lt;code&gt;endIndex&lt;/code&gt; のパラメータは、name要素のサブシーケンスを指定します。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;名前のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;名前のインデックス&lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。返される &lt;code&gt;Path&lt;/code&gt; オブジェクトには、 &lt;code&gt;beginIndex&lt;/code&gt; で始まり、インデックス &lt;code&gt;endIndex-1&lt;/code&gt; の要素まで続く名前要素があります。</target>
        </trans-unit>
        <trans-unit id="a0fdf3dc80a013dc8c4afe2a38389db91bc45e47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cert.provider.x509v1&lt;/code&gt; property is set to a default implementation for X.509 such as:</source>
          <target state="translated">&lt;code&gt;cert.provider.x509v1&lt;/code&gt; プロパティは、X.509などのデフォルトの実装に設定されています：</target>
        </trans-unit>
        <trans-unit id="312b7fe1366e0a3c03057bcb7caeef6dc182a366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char&lt;/code&gt; data type (and therefore the value that a &lt;code&gt;Character&lt;/code&gt; object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal &lt;em&gt;code point&lt;/em&gt;s is now U+0000 to U+10FFFF, known as &lt;em&gt;Unicode scalar value&lt;/em&gt;. (Refer to the &lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt; definition&lt;/i&gt;&lt;/a&gt; of the U+</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; データタイプ（したがって値その &lt;code&gt;Character&lt;/code&gt; オブジェクト封入）は固定幅16ビットエンティティとしての文字を定義して、元のUnicode仕様に基づいています。Unicode標準は、表現が16ビットを超える必要がある文字を許可するように変更されました。正当な&lt;em&gt;コードポイント&lt;/em&gt;の範囲は、&lt;em&gt;Unicodeスカラー値&lt;/em&gt;として知られるU + 0000からU + 10FFFFになりました。（U +の&lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt;定義&lt;/i&gt;&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="159881b528b95151218ddcf06070876dc2535a5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is called with no arguments; this may result in a security exception.</source>
          <target state="translated">親スレッドグループの &lt;code&gt;checkAccess&lt;/code&gt; メソッドは、引数なしで呼び出されます。これにより、セキュリティ例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="5e8a72d273e2359cf1503e1f34724cc9c2dc1f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkPermission&lt;/code&gt; method that takes a context object in addition to a permission makes access decisions based on that context, rather than on that of the current execution thread. Code within a different context can thus call that method, passing the permission and the previously-saved context object. A sample call, using the SecurityManager &lt;code&gt;sm&lt;/code&gt; obtained as in the previous example, is the following:</source>
          <target state="translated">&lt;code&gt;checkPermission&lt;/code&gt; 許可に加えて、コンテキストオブジェクトを取るメソッドではなく、現在の実行スレッドのそれに比べて、そのコンテキストに基づいてアクセスを決定します。したがって、別のコンテキスト内のコードはそのメソッドを呼び出して、アクセス許可と以前に保存されたコンテキストオブジェクトを渡すことができます。前の例のように取得したSecurityManager &lt;code&gt;sm&lt;/code&gt; を使用したサンプルコールは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8a37143162f383e40541a3c536a0bad8cdbdac3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clear&lt;/code&gt; method sets calendar field(s) undefined. &lt;code&gt;GregorianCalendar&lt;/code&gt; uses the following default value for each calendar field if its value is undefined.</source>
          <target state="translated">&lt;code&gt;clear&lt;/code&gt; メソッドセットカレンダフィールド（複数可）に定義されていません。 &lt;code&gt;GregorianCalendar&lt;/code&gt; は、値が定義されていない場合、各カレンダーフィールドに次のデフォルト値を使用します。</target>
        </trans-unit>
        <trans-unit id="eca26951481b1fa79d4de62013b67d4d4f363ce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clockSequence&lt;/code&gt; value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException.</source>
          <target state="translated">&lt;code&gt;clockSequence&lt;/code&gt; の値は、このUUIDが時間ベースのUUIDでない場合、このメソッドはUnsupportedOperationExceptionをスローバージョンタイプ1を有する時間ベースのUUIDにのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="17c69f5047e8b8edc7675c7afa6d967e75c7e9a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;CipherInputStream&lt;/code&gt; calls the &lt;code&gt;close&lt;/code&gt; method of its underlying input stream.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; の方法 &lt;code&gt;CipherInputStream&lt;/code&gt; 呼び出し、 &lt;code&gt;close&lt;/code&gt; その基礎となる入力ストリームの方法を。</target>
        </trans-unit>
        <trans-unit id="8d16e59d74dedefbb9dca52dccbe54c8fd4fa9e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls its &lt;code&gt;flush&lt;/code&gt; method, and then calls the &lt;code&gt;close&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;FilterOutputStream&lt;/code&gt; の &lt;code&gt;close&lt;/code&gt; メソッドは、 &lt;code&gt;flush&lt;/code&gt; メソッドを呼び出してから、基になる出力ストリームの &lt;code&gt;close&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7e09c5caa8f665f3b57f5f5f897465a41503642c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;close&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="b8a4c592a0ecb263805a474537d609748a764ffc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; の &lt;code&gt;close&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="272a141fe34e23fe1ed9cd1611d645995f50e5bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;combine&lt;/code&gt; method investigates the two input arrays of ProtectionDomains and returns a single array containing the updated ProtectionDomains. In the simplest case, the &lt;code&gt;combine&lt;/code&gt; method merges the two stacks into one. In more complex cases, the &lt;code&gt;combine&lt;/code&gt; method returns a modified stack of ProtectionDomains. The modification may have added new ProtectionDomains, removed certain ProtectionDomains, or simply updated existing ProtectionDomains. Re-ordering and other optimizations to the ProtectionDomains are also permitted. Typically the &lt;code&gt;combine&lt;/code&gt; method bases its updates on the information encapsulated in the &lt;code&gt;DomainCombiner&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;combine&lt;/code&gt; 方法がたProtectionDomainsの2つの入力配列を調査し、更新されたProtectionDomainsを含む単一の配列を返します。最も単純なケースでは、 &lt;code&gt;combine&lt;/code&gt; メソッドは2つのスタックを1つにマージします。より複雑なケースでは、 &lt;code&gt;combine&lt;/code&gt; メソッドはProtectionDomainsの変更されたスタックを返します。変更により、新しいProtectionDomainが追加された、特定のProtectionDomainが削除された、または単に既存のProtectionDomainが更新された可能性があります。 ProtectionDomainsの並べ替えやその他の最適化も可能です。通常、 &lt;code&gt;combine&lt;/code&gt; メソッドは、 &lt;code&gt;DomainCombiner&lt;/code&gt; にカプセル化された情報に基づいて更新を行います。</target>
        </trans-unit>
        <trans-unit id="7a90cfbc00ca33b6d145e6807e96aa2002b85303" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completed&lt;/code&gt; argument to the &lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be &lt;code&gt;true&lt;/code&gt; if, and only if, some bytes were actually transferred into the invoker's target buffer.</source>
          <target state="translated">&lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt; &lt;code&gt;end&lt;/code&gt; &lt;/a&gt;メソッドの &lt;code&gt;completed&lt;/code&gt; 引数は、I / O操作が実際に完了したかどうか、つまり、呼び出し元に見える影響があったかどうかを示します。たとえば、バイトを読み取る操作の場合、一部のバイトが呼び出し元のターゲットバッファーに実際に転送された場合にのみ、この引数は &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="f41c89acf8d6260cc4c3edf1c8a3be1a487a118d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;countMatches&lt;/code&gt; operation can be invoked as follows:</source>
          <target state="translated">&lt;code&gt;countMatches&lt;/code&gt; を次のように操作を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="72616ce87a153d98c6a948602b30731bd218fc29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createMBeanServer&lt;/code&gt; permission implies the &lt;code&gt;newMBeanServer&lt;/code&gt; permission.</source>
          <target state="translated">&lt;code&gt;createMBeanServer&lt;/code&gt; の許可が意味 &lt;code&gt;newMBeanServer&lt;/code&gt; の許可を。</target>
        </trans-unit>
        <trans-unit id="5b8e66ca8dcc60e252a66649960d4c45b1465623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;descriptor&lt;/code&gt; can contain entries that will define the values returned by certain methods of this class, as explained in the &lt;a href=&quot;package-summary#constraints&quot;&gt; package description&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;descriptor&lt;/code&gt; で説明したように、このクラスの特定のメソッドによって返される値を定義するエントリを含むことができ&lt;a href=&quot;package-summary#constraints&quot;&gt;、パッケージの説明を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e74408bd8afc062ff7d9cfe3aab2c13ea6f53b21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dest&lt;/code&gt; argument refers to an object that is not an array.</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; 引数が配列でないオブジェクトを指します。</target>
        </trans-unit>
        <trans-unit id="8294f1f3beefad7591b5cc3ea0551866cab7aae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;destPos&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;destPos&lt;/code&gt; の引数が負です。</target>
        </trans-unit>
        <trans-unit id="2a960f617370308fb92badef083ce1edd73bfd82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;digest&lt;/code&gt; method can be called once for a given number of updates. After &lt;code&gt;digest&lt;/code&gt; has been called, the MessageDigest object is reset to its initialized state.</source>
          <target state="translated">&lt;code&gt;digest&lt;/code&gt; 方法は、アップデートの与えられた数のために一度呼び出すことができます。後 &lt;code&gt;digest&lt;/code&gt; 呼ばれてきた、MessageDigestオブジェクトは初期化状態にリセットされます。</target>
        </trans-unit>
        <trans-unit id="e1dde7d27adbf8e6cef3b9bbcdbc4cbcc2ad96bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; format can represent all consecutive integers in the range -2&lt;sup&gt;53&lt;/sup&gt; to 2&lt;sup&gt;53&lt;/sup&gt;. If the pipeline has more than 2&lt;sup&gt;53&lt;/sup&gt; values, the divisor in the average computation will saturate at 2&lt;sup&gt;53&lt;/sup&gt;, leading to additional numerical errors.</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; フォーマットは範囲内のすべての連続した整数を表すことができ、-2 &lt;sup&gt;53&lt;/sup&gt; 2 &lt;sup&gt;53&lt;/sup&gt;。パイプラインに2 &lt;sup&gt;53を&lt;/sup&gt;超える値がある場合、平均計算の除数は2 &lt;sup&gt;53&lt;/sup&gt;で飽和し、追加の数値エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="cad4be16e75ad0f3392aac98141ceaed42bece6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; value that is closer than any other to</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 他により近い値</target>
        </trans-unit>
        <trans-unit id="99457e6b4813c6110cd28c3bdc215ba87cac93e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuffer#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; コピーの引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuffer#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="cf3f3c8673cb205a88acf65cbe9d481cc7bd21e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuilder#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; コピーの引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuilder#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="57b48e0bd69c0d96f6dab5758abac0f4d57b113a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoded&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">&lt;code&gt;encoded&lt;/code&gt; ている場合引数が不正です。</target>
        </trans-unit>
        <trans-unit id="7f825d64728b91255aebca414eb9e4365aeec903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining undecoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; のパラメータは、呼び出しが指定された入力バッファに含まれるそれを超えて、さらに入力を提供することができるかどうかに関して、この方法をアドバイス。追加の入力を提供する可能性がある場合、呼び出し元はこのパラメーターに &lt;code&gt;false&lt;/code&gt; を渡す必要があります。さらに入力を提供する可能性がない場合、呼び出し元は &lt;code&gt;true&lt;/code&gt; を渡す必要があります。1回の呼び出しで &lt;code&gt;false&lt;/code&gt; を渡して、後で実際に使用できる入力がないことを検出することは、誤りではなく、実際には非常に一般的です。ただし、呼び出しのシーケンスでのこのメソッドの最後の呼び出しは常に &lt;code&gt;true&lt;/code&gt; を渡すため、残りのデコードされていない入力はすべて不正な形式として処理されます。</target>
        </trans-unit>
        <trans-unit id="fabf47fc50497b896963aa9019b8b35e3fbde409" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining unencoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; のパラメータは、呼び出しが指定された入力バッファに含まれるそれを超えて、さらに入力を提供することができるかどうかに関して、この方法をアドバイス。追加の入力を提供する可能性がある場合、呼び出し元はこのパラメーターに &lt;code&gt;false&lt;/code&gt; を渡す必要があります。さらに入力を提供する可能性がない場合、呼び出し元は &lt;code&gt;true&lt;/code&gt; を渡す必要があります。1回の呼び出しで &lt;code&gt;false&lt;/code&gt; を渡して、後で実際に使用できる入力がないことを検出することは、誤りではなく、実際には非常に一般的です。ただし、呼び出しのシーケンスにおけるこのメソッドの最後の呼び出しは常に &lt;code&gt;true&lt;/code&gt; を渡し、残りのエンコードされていない入力が不正な形式として処理されることが重要です。</target>
        </trans-unit>
        <trans-unit id="759ffc9229118351f3a52e836520820e1dc112e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals()&lt;/code&gt; method for an enumeration class just does a test for identical objects (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">列挙型クラスの &lt;code&gt;equals()&lt;/code&gt; メソッドは、同一のオブジェクト（ &lt;code&gt;==&lt;/code&gt; ）のテストのみを行います。</target>
        </trans-unit>
        <trans-unit id="b29ad1a11acf214b8866d6a3f630b101a0ca3675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method for class &lt;code&gt;Object&lt;/code&gt; implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, this method returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; refer to the same object (&lt;code&gt;x == y&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;Object&lt;/code&gt; の &lt;code&gt;equals&lt;/code&gt; メソッドは、オブジェクトに対して最も区別可能な可能な等価関係を実装します。つまり、null以外の参照値 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; の場合、このメソッドは、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; が同じオブジェクトを参照する場合（ &lt;code&gt;x == y&lt;/code&gt; の値が &lt;code&gt;true&lt;/code&gt; の場合）にのみ &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="387966673ba7ec974b34376b9ba2a99dc7f3ff88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method implements an equivalence relation on non-null object references:</source>
          <target state="translated">&lt;code&gt;equals&lt;/code&gt; メソッドを実装にnull以外のオブジェクト参照上の同値関係を：</target>
        </trans-unit>
        <trans-unit id="979f15807ff26fd3232fc39f57a589f6474444ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventPropertyName&lt;/code&gt; string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the &lt;code&gt;eventPropertyName&lt;/code&gt;. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the &lt;code&gt;eventPropertyName&lt;/code&gt; string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; where &lt;code&gt;propertyName&lt;/code&gt; matches a method or property. For example, to extract the &lt;code&gt;point&lt;/code&gt; property from a &lt;code&gt;MouseEvent&lt;/code&gt;, you could use either &lt;code&gt;&quot;point&quot;&lt;/code&gt; or &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; as the &lt;code&gt;eventPropertyName&lt;/code&gt;. To extract the &quot;text&quot; property from a &lt;code&gt;MouseEvent&lt;/code&gt; with a &lt;code&gt;JLabel&lt;/code&gt; source use any of the following as &lt;code&gt;eventPropertyName&lt;/code&gt;: &lt;code&gt;&quot;source.text&quot;&lt;/code&gt;, &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt;&lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; or &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt;. If a method can not be found, or an exception is generated as part of invoking a method a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown at dispatch time. For example, if the incoming event object is null, and &lt;code&gt;eventPropertyName&lt;/code&gt; is non-null and not empty, a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;eventPropertyName&lt;/code&gt; の文字列は、ターゲットメソッドに渡される受信イベントオブジェクトから値を抽出するために使用されます。一般的なケースは、ターゲットメソッドが引数を取らない場合です。この場合、 &lt;code&gt;eventPropertyName&lt;/code&gt; にnullの値を使用する必要があります。または、着信イベントオブジェクトをターゲットメソッドに直接渡す場合は、空の文字列を使用します。 &lt;code&gt;eventPropertyName&lt;/code&gt; 文字列の形式は、一連のメソッドまたはプロパティであり、各メソッドまたはプロパティは、着信イベントオブジェクトから始まる、前のメソッドによって返された値に適用されます。構文は次のとおりです &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; ここで、 &lt;code&gt;propertyName&lt;/code&gt; はメソッドまたはプロパティと一致します。たとえば、 &lt;code&gt;point&lt;/code&gt; を抽出するには &lt;code&gt;MouseEvent&lt;/code&gt; のプロパティでは、 &lt;code&gt;&quot;point&quot;&lt;/code&gt; または &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; &lt;code&gt;eventPropertyName&lt;/code&gt; 」のいずれかをeventPropertyNameとして使用できます。 「テキスト」プロパティを抽出し &lt;code&gt;MouseEvent&lt;/code&gt; と &lt;code&gt;JLabel&lt;/code&gt; ののいずれかとして、以下のソース使用 &lt;code&gt;eventPropertyName&lt;/code&gt; ： &lt;code&gt;&quot;source.text&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt; &lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; 又は &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt; 。メソッドが見つからない場合、またはメソッドの呼び出しの一部として例外が生成された場合、ディスパッチ時に &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。たとえば、着信イベントオブジェクトがnullで、 &lt;code&gt;eventPropertyName&lt;/code&gt; nullではなく空ではない場合、 &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="7b4b06ad05dfb91d784c6607e33529a4e06af587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target. When the target's class defines many methods with the given name the implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11). The dynamic class of the target and arguments are used in place of the compile-time type information and, like the &lt;a href=&quot;../lang/reflect/method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; class itself, conversion between primitive values and their associated wrapper classes is handled internally.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; メソッドは、その名と同じ方法見つけ &lt;code&gt;methodName&lt;/code&gt; ののプロパティを、ターゲット上のメソッドを呼び出します。ターゲットのクラスが特定の名前を持つ多くのメソッドを定義する場合、実装は、Java言語仕様（15.11）で指定されたアルゴリズムを使用して、最も具体的なメソッドを選択する必要があります。ターゲットの動的クラスと引数は、コンパイル時の型情報の代わりに使用され、&lt;a href=&quot;../lang/reflect/method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt;クラス自体と同様に、プリミティブ値とそれに関連するラッパークラス間の変換は内部で処理されます。</target>
        </trans-unit>
        <trans-unit id="721571d52ff7950b67b214b688c61b64a75961c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that creates new threads as needed to execute tasks that are submitted to handle I/O events and dispatch completion results for operations initiated on asynchronous channels in the group. It may reuse previously constructed threads when they are available.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある &lt;code&gt;ExecutorService&lt;/code&gt; のグループでの非同期チャネル上で開始操作のためのI / Oイベント・発送完了の結果を処理するために提出されたタスクを実行するために必要に応じて新しいスレッドを作成します。以前に構築されたスレッドが利用可能な場合、それらを再利用できます。</target>
        </trans-unit>
        <trans-unit id="ec1467cb33e94fd2c0bb533c599fa01ae6a0656e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that executes tasks submitted to dispatch completion results for operations initiated on asynchronous channels in the group.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある &lt;code&gt;ExecutorService&lt;/code&gt; の実行タスクがグループ内の非同期チャネル上で開始操作に発送完了の結果を提出しました。</target>
        </trans-unit>
        <trans-unit id="f3b206390268e595a7543c9f72d6571233bef9fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is the &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to which tasks are submitted to handle I/O events and dispatch completion results for operations initiated on resulting channel. The nature of these tasks is highly implementation specific and so care should be taken when configuring the &lt;code&gt;Executor&lt;/code&gt;. Minimally it should support an unbounded work queue and should not run tasks on the caller thread of the &lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/a&gt; method. Shutting down the executor service while the channel is open results in unspecified behavior.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある&lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;タスクは、チャネルを結果に開始した操作のI / Oイベント・発送完了の結果を処理するために提出されました。これらのタスクの性質は実装固有であり、 &lt;code&gt;Executor&lt;/code&gt; を構成する際には注意が必要です。最低限、無制限の作業キューをサポートし、&lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt; &lt;code&gt;execute&lt;/code&gt; &lt;/a&gt;メソッドの呼び出し側スレッドでタスクを実行しないでください。チャネルが開いている間にexecutorサービスをシャットダウンすると、不特定の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="9a348a5e6c50ba5a16fcb50db730eca7f5277712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exit&lt;/code&gt; method of class &lt;code&gt;Runtime&lt;/code&gt; has been called and the security manager has permitted the exit operation to take place.</source>
          <target state="translated">クラス &lt;code&gt;Runtime&lt;/code&gt; の &lt;code&gt;exit&lt;/code&gt; メソッドが呼び出され、セキュリティマネージャがexit操作の実行を許可しました。</target>
        </trans-unit>
        <trans-unit id="1a61775a7139e096b9fd0be3d2ad7ac6f1c956f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;family&lt;/code&gt; parameter is used to specify the &lt;a href=&quot;../../net/protocolfamily&quot;&gt;&lt;code&gt;ProtocolFamily&lt;/code&gt;&lt;/a&gt;. If the datagram channel is to be used for IP multicasting then this should correspond to the address type of the multicast groups that this channel will join.</source>
          <target state="translated">&lt;code&gt;family&lt;/code&gt; パラメータが指定するために使用され&lt;a href=&quot;../../net/protocolfamily&quot;&gt; &lt;code&gt;ProtocolFamily&lt;/code&gt; を&lt;/a&gt;。データグラムチャネルがIPマルチキャストに使用される場合、これはこのチャネルが参加するマルチキャストグループのアドレスタイプに対応している必要があります。</target>
        </trans-unit>
        <trans-unit id="f08c1804c0526409a1ecb2988cff36a97dc47de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;handback&lt;/code&gt; parameters may be null if and only if they are null in a listener to be removed.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; と &lt;code&gt;handback&lt;/code&gt; のパラメータは、それらが除去されるリスナーにヌルである場合に限り、NULLとすることができます。</target>
        </trans-unit>
        <trans-unit id="acfa3270c433f7fbeb166904731784b7ab01474e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method is never invoked more than once by a Java virtual machine for any given object.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は、任意のオブジェクトについてJava仮想マシンが複数回呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="36550a7fe4b3770df4940e5d45c14dff3f4cb361" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method of class &lt;code&gt;Object&lt;/code&gt; performs no special action; it simply returns normally. Subclasses of &lt;code&gt;Object&lt;/code&gt; may override this definition.</source>
          <target state="translated">クラス &lt;code&gt;Object&lt;/code&gt; の &lt;code&gt;finalize&lt;/code&gt; メソッドは特別なアクションを実行しません。単に正常に戻ります。 &lt;code&gt;Object&lt;/code&gt; のサブクラスはこの定義をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="290eeab6379b679af729a0f7d139a6b6afebf8ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findSystemClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt; .</source>
          <target state="translated">クラス &lt;code&gt;ClassLoader&lt;/code&gt; の &lt;code&gt;findSystemClass&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="b78d49371e443cbd3adbfb51ffc64676bde68d8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flatMap()&lt;/code&gt; operation has the effect of applying a one-to-many transformation to the elements of the stream, and then flattening the resulting elements into a new stream.</source>
          <target state="translated">&lt;code&gt;flatMap()&lt;/code&gt; 操作は、ストリームの要素に一対多の変換を適用し、新しいストリームに得られる要素を平坦化する効果を有します。</target>
        </trans-unit>
        <trans-unit id="9794be29838cb64627abe081d7728e6987d9e44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;DataOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; の方法 &lt;code&gt;DataOutputStream&lt;/code&gt; のは、呼び出す &lt;code&gt;flush&lt;/code&gt; その基本となる出力ストリームの方法を。</target>
        </trans-unit>
        <trans-unit id="195ffa6218dd9b603f2e4ca8f61c877be833e3ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; の方法 &lt;code&gt;FilterOutputStream&lt;/code&gt; は、呼び出す &lt;code&gt;flush&lt;/code&gt; その基本となる出力ストリームの方法を。</target>
        </trans-unit>
        <trans-unit id="68aa9823b85500f33061dc1eb4258756e15e005f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; の &lt;code&gt;flush&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="708bb18e269a3b497919640ccb7a50b14533bedd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forName&lt;/code&gt; method in class &lt;code&gt;Class&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;Class&lt;/code&gt; の &lt;code&gt;forName&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="8de3dc96d234b55e125cd365d4c69d5d74e9de59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse).</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。</target>
        </trans-unit>
        <trans-unit id="7f3a1ac72ca4c5a5aab4a7ea8026300ca9e9a65d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse). A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;&lt;b&gt;must&lt;/b&gt; support reverse checking and &lt;b&gt;may&lt;/b&gt; support forward checking.</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; &lt;b&gt;しなければならない&lt;/b&gt;逆チェックをサポートして&lt;b&gt;も&lt;/b&gt;順方向のチェックをサポートしています。</target>
        </trans-unit>
        <trans-unit id="c29abf69126019dfa340a81cfcd7917ddb6a1954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fractionalDigits&lt;/code&gt; parameter allows the output of the fractional second to be controlled. Specifying zero will cause no fractional digits to be output. From 1 to 9 will output an increasing number of digits, using zero right-padding if necessary. The special value -1 is used to output as many digits as necessary to avoid any trailing zeroes.</source>
          <target state="translated">&lt;code&gt;fractionalDigits&lt;/code&gt; のパラメータは、小数第二の出力を制御することを可能にします。ゼロを指定すると、小数桁は出力されません。1から9は、必要に応じてゼロ右パディングを使用して、桁数を増やして出力します。特殊な値-1は、後続のゼロを回避するために必要な数の桁を出力するために使用されます。</target>
        </trans-unit>
        <trans-unit id="0f3e1d9782b5c32d63d7b0cc83ee2c191412bb87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; values are initialized using locale-dependent resources when constructing a &lt;code&gt;GregorianCalendar&lt;/code&gt;. &lt;a name=&quot;iso8601_compatible_setting&quot;&gt;The week determination is compatible&lt;/a&gt; with the ISO 8601 standard when &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling &lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt;&lt;code&gt;setFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt;&lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; および &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; の値を構築する際に、ロケール依存のリソースを使用して初期化され &lt;code&gt;GregorianCalendar&lt;/code&gt; 。 &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; が &lt;code&gt;MONDAY&lt;/code&gt; で &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; が4である場合、&lt;a name=&quot;iso8601_compatible_setting&quot;&gt;週の決定は&lt;/a&gt; ISO 8601標準と互換性があります。これらの値は、標準が優先されるロケールで使用されます。これらの値は、&lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt; &lt;code&gt;setFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt; &lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt; を&lt;/a&gt;呼び出すことによって明示的に設定できます。</target>
        </trans-unit>
        <trans-unit id="56523d844e395cab10ecde9ba8b570825460b5cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInstance&lt;/code&gt; factory method of the &lt;code&gt;Cipher&lt;/code&gt; engine class follows these rules in order to instantiate a provider's implementation of &lt;code&gt;CipherSpi&lt;/code&gt; for a transformation of the form &quot;</source>
          <target state="translated">&lt;code&gt;Cipher&lt;/code&gt; エンジンクラスの &lt;code&gt;getInstance&lt;/code&gt; ファクトリメソッドは、フォームの変換のためにプロバイダーの &lt;code&gt;CipherSpi&lt;/code&gt; の実装をインスタンス化するために、これらのルールに従います</target>
        </trans-unit>
        <trans-unit id="f09e308477567f7fb18f8db544516ee32916e1fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getNotifTypes&lt;/code&gt; method returns an array of strings containing the notification types that the MBean may emit. The notification type is a dot-notation string which describes what the emitted notification is about, not the Java class of the notification. A single generic notification class can be used to send notifications of several types. All of these types are returned in the string array result of the &lt;code&gt;getNotifTypes&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getNotifTypes&lt;/code&gt; の方法は、MBeanを発することができることの通知タイプを含む文字列の配列を返します。通知タイプは、通知のJavaクラスではなく、発行された通知の内容を説明するドット表記文字列です。単一の汎用通知クラスを使用して、いくつかのタイプの通知を送信できます。これらのタイプはすべて、 &lt;code&gt;getNotifTypes&lt;/code&gt; メソッドの文字列配列の結果で返されます。</target>
        </trans-unit>
        <trans-unit id="058e0ca7376a98eb437efbc0aef64d1a8a108d0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getObjectInstance()&lt;/code&gt; method of an object factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">オブジェクトファクトリの &lt;code&gt;getObjectInstance()&lt;/code&gt; メソッドは、おそらく異なるパラメータを使用して、複数回呼び出すことができます。実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="6a8501111fcfea5e31cfee8d6894af584ff150ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOptionType&lt;/code&gt; method returns this value if this &lt;code&gt;ConfirmationCallback&lt;/code&gt; was instantiated with &lt;code&gt;options&lt;/code&gt; instead of an &lt;code&gt;optionType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getOptionType&lt;/code&gt; のこの場合、メソッドはこの値を返し &lt;code&gt;ConfirmationCallback&lt;/code&gt; をを用いてインスタンス化された &lt;code&gt;options&lt;/code&gt; の代わりに &lt;code&gt;optionType&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ebc4bc14d6647d69c5c4a4fb63fb8fd2ffdfd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getResources&lt;/code&gt; method of the context &lt;code&gt;ClassLoader&lt;/code&gt; is used locate JAR files containing files named &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt;</source>
          <target state="translated">コンテキスト &lt;code&gt;ClassLoader&lt;/code&gt; の &lt;code&gt;getResources&lt;/code&gt; メソッドを使用して、 &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt; という名前のファイルを含むJARファイルを見つけます。</target>
        </trans-unit>
        <trans-unit id="b2b6b51bd170eb65242dd9c81805d8ac434ccc43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getStateToBind()&lt;/code&gt; method of a state factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">状態ファクトリの &lt;code&gt;getStateToBind()&lt;/code&gt; メソッドは、異なるパラメーターを使用して、複数回呼び出すことができます。実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="f433eca03b2eb0f32d07fb7e2e68b92fac6f3c89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle&lt;/code&gt; method implementation checks the instance(s) of the &lt;code&gt;Callback&lt;/code&gt; object(s) passed in to retrieve or display the requested information. The following example is provided to help demonstrate what an &lt;code&gt;handle&lt;/code&gt; method implementation might look like. This example code is for guidance only. Many details, including proper error handling, are left out for simplicity.</source>
          <target state="translated">&lt;code&gt;handle&lt;/code&gt; のメソッドの実装をチェックインスタンス（複数可） &lt;code&gt;Callback&lt;/code&gt; に渡されたオブジェクト（複数可）を取得または要求された情報を表示します。次の例は、 &lt;code&gt;handle&lt;/code&gt; メソッドの実装がどのようになるかを示すのに役立ちます。このコード例はガイダンスのみを目的としています。適切なエラー処理を含む多くの詳細は、簡略化のために省略されています。</target>
        </trans-unit>
        <trans-unit id="78806b6c0d8e3a500425fd33fe6be57433f2f45a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hashCode&lt;/code&gt; method of the returned set returns the sum of the</source>
          <target state="translated">返されたセットの &lt;code&gt;hashCode&lt;/code&gt; メソッドは、</target>
        </trans-unit>
        <trans-unit id="fd1ec688b3211b62ec6deea7903a4e5a33c5b1e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostname&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">次の場合、 &lt;code&gt;hostname&lt;/code&gt; 引数は無効です。</target>
        </trans-unit>
        <trans-unit id="0e43ec7f450994678afac7d3d20f221033df02a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostnameVerifier&lt;/code&gt; for this object.</source>
          <target state="translated">このオブジェクトの &lt;code&gt;hostnameVerifier&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a3a03a08373e3a4eb0d5649cfecb26445106e34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; is equal to &lt;code&gt;t&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 値は、アキュムレータ機能のIDでなければなりません。これは、すべての &lt;code&gt;t&lt;/code&gt; について、 &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; が &lt;code&gt;t&lt;/code&gt; に等しいことを意味します。 &lt;code&gt;accumulator&lt;/code&gt; 機能がなければなりません&lt;a href=&quot;package-summary#Associativity&quot;&gt;連想&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="15d70cdc09c9191c55557a009f3a78afb163bfc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; is equal to &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 値は、アキュムレータ機能のIDでなければなりません。この手段は、すべてのためにその &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; に等しく、 &lt;code&gt;x&lt;/code&gt; 。 &lt;code&gt;accumulator&lt;/code&gt; 機能がなければなりません&lt;a href=&quot;package-summary#Associativity&quot;&gt;連想&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="c7c434e8ee038c0b3fcfe01a6456babfb2b633e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the combiner function. This means that for all &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;combiner(identity, u)&lt;/code&gt; is equal to &lt;code&gt;u&lt;/code&gt;. Additionally, the &lt;code&gt;combiner&lt;/code&gt; function must be compatible with the &lt;code&gt;accumulator&lt;/code&gt; function; for all &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, the following must hold:</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 値は、コンバイナ機能のIDでなければなりません。これは、すべての &lt;code&gt;u&lt;/code&gt; について、 &lt;code&gt;combiner(identity, u)&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; に等しいことを意味します。さらに、 &lt;code&gt;combiner&lt;/code&gt; 機能は &lt;code&gt;accumulator&lt;/code&gt; 機能と互換性がなければなりません。すべての &lt;code&gt;u&lt;/code&gt; および &lt;code&gt;t&lt;/code&gt; について、次の条件が満たされている必要があります。</target>
        </trans-unit>
        <trans-unit id="cb7b6822fbfe6353745706addd58f9b58b682324" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ifAddress&lt;/code&gt; argument can be used on a multi-homed host for a &lt;code&gt;ServerSocket&lt;/code&gt; that will only accept connect requests to one of its addresses. If &lt;code&gt;ifAddress&lt;/code&gt; is null, it will accept connections on all local addresses. The socket is configured with the socket options (such as accept timeout) given to this factory.</source>
          <target state="translated">&lt;code&gt;ifAddress&lt;/code&gt; の引数は、マルチホームホスト上で使用することができます &lt;code&gt;ServerSocket&lt;/code&gt; をのみ、そのアドレスの1つに接続要求を受け入れます。 &lt;code&gt;ifAddress&lt;/code&gt; がnullの場合、すべてのローカルアドレスの接続を受け入れます。ソケットは、このファクトリに指定されたソケットオプション（受け入れタイムアウトなど）で構成されます。</target>
        </trans-unit>
        <trans-unit id="9d4aa0ca4766a00288d0853e4d6293a48f65d87d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreMetadata&lt;/code&gt; parameter, if set to &lt;code&gt;true&lt;/code&gt;, allows the reader to disregard any metadata encountered during the read. Subsequent calls to the &lt;code&gt;getStreamMetadata&lt;/code&gt; and &lt;code&gt;getImageMetadata&lt;/code&gt; methods may return &lt;code&gt;null&lt;/code&gt;, and an &lt;code&gt;IIOImage&lt;/code&gt; returned from &lt;code&gt;readAll&lt;/code&gt; may return &lt;code&gt;null&lt;/code&gt; from their &lt;code&gt;getMetadata&lt;/code&gt; method. Setting this parameter may allow the reader to work more efficiently. The reader may choose to disregard this setting and return metadata normally.</source>
          <target state="translated">&lt;code&gt;ignoreMetadata&lt;/code&gt; のパラメータは、に設定されている場合 &lt;code&gt;true&lt;/code&gt; 、リーダーが読み取り中に発生したメタデータを無視することができます。 &lt;code&gt;getStreamMetadata&lt;/code&gt; および &lt;code&gt;getImageMetadata&lt;/code&gt; メソッドへの後続の呼び出しは &lt;code&gt;null&lt;/code&gt; を返し、 &lt;code&gt;readAll&lt;/code&gt; から返された &lt;code&gt;IIOImage&lt;/code&gt; は &lt;code&gt;getMetadata&lt;/code&gt; メソッドから &lt;code&gt;null&lt;/code&gt; を返す場合があります。このパラメーターを設定すると、リーダーがより効率的に動作できるようになります。読者はこの設定を無視して、通常どおりメタデータを返すことを選択できます。</target>
        </trans-unit>
        <trans-unit id="fd6a40388fc0550eb7dfd1739f418989dfe9f308" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;implies&lt;/code&gt; method is used by the AccessController to determine whether or not a requested permission is implied by another permission that is known to be valid in the current execution context.</source>
          <target state="translated">&lt;code&gt;implies&lt;/code&gt; 方法が要求された許可は、現在の実行コンテキストで有効であることが知られている別の許可によって暗示されているか否かを判断するためにAccessControllerによって使用されます。</target>
        </trans-unit>
        <trans-unit id="64642e3202227bf1eb96b4d1dcff39ebc286b611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; parameter is the index of the name element to return. The element that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The element that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; パラメータは、リターンにname要素のインデックスです。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;要素のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;要素のインデックス&lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="178fa46f7783f7ca8be10feb795a8f432e6ce094" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialSize&lt;/code&gt; parameter may be used by the implementation as a &lt;em&gt;hint&lt;/em&gt; as to the initial number of tasks it may submit. For example, it may be used to indicate the initial number of threads that wait on I/O events.</source>
          <target state="translated">&lt;code&gt;initialSize&lt;/code&gt; パラメータは、として実装で使用することができる&lt;em&gt;ヒント&lt;/em&gt;それが提出することができるタスクの初期数について。たとえば、I / Oイベントを待機するスレッドの初期数を示すために使用できます。</target>
        </trans-unit>
        <trans-unit id="8e1910412b5ab4f4360c75fcf4e4c4f981f39033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize&lt;/code&gt; methods may each be called any number of times. If no &lt;code&gt;initialize&lt;/code&gt; method is called on a DSAKeyPairGenerator, the default is to generate 1024-bit keys, using precomputed p, q and g parameters and an instance of SecureRandom as the random bit source.</source>
          <target state="translated">&lt;code&gt;initialize&lt;/code&gt; 方法は、それぞれ何回でも呼び出すことができます。DSAKeyPairGeneratorで &lt;code&gt;initialize&lt;/code&gt; メソッドが呼び出されない場合、デフォルトでは、事前計算されたp、q、およびgパラメーターと、ランダムビットソースとしてSecureRandomのインスタンスを使用して、1024ビットの鍵が生成されます。</target>
        </trans-unit>
        <trans-unit id="e89c947619670b6f05ed77c9eb43708ff984ab4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;abstract&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;abstract&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="57a2bf2f87f99f529f820792d0d9541859c36200" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;final&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;final&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="b83b91795fa9f3dd467562df8b850ad43ca35b18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;interface&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;interface&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="6e6129e278d1c31b1641cf76868b23a7ccbc053b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;native&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;native&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="9487f7c45da0d56c561a74e7e315aad283ae33db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;private&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;private&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="d998015ddde224da2f2e242d06b1b5cda8342b93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;protected&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の表す値 &lt;code&gt;protected&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="1ab9b738d34103d531a4ba5cdf4833da76ab4445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;public&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;public&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="cb450909d14452e1607d3359ccbe310b15e65773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;static&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;static&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="e48ba12a5c869896a959b271934ece28496f4515" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;strictfp&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;strictfp&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="ab15ce0d3f3e80624e13e8b8f7afdae7f2cc31b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;synchronized&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;synchronized&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="47c273abe027c89df6d6ce37e4c65a5d5f445ccc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;transient&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;transient&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="75d6fc286ca2b46ac7f2dfbb0cff289b6c5d7d46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;volatile&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;volatile&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="cfcd94506157aeb895a9c9c21b22d64a6d79a08a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interface&lt;/code&gt; modifier discussed in this class is not a true modifier in the Java language and it appears after all other modifiers listed by this method. This method may return a string of modifiers that are not valid modifiers of a Java entity; in other words, no checking is done on the possible validity of the combination of modifiers represented by the input. Note that to perform such checking for a known kind of entity, such as a constructor or method, first AND the argument of &lt;code&gt;toString&lt;/code&gt; with the appropriate mask from a method like &lt;a href=&quot;modifier#constructorModifiers--&quot;&gt;&lt;code&gt;constructorModifiers()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;modifier#methodModifiers--&quot;&gt;&lt;code&gt;methodModifiers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;interface&lt;/code&gt; このクラスで議論修飾子は、Java言語での真の修飾ではありません、それはこの方法で記載されている他のすべての修飾子の後に表示されます。このメソッドは、Javaエンティティの有効な修飾子ではない修飾子の文字列を返す場合があります。言い換えると、入力によって表される修飾子の組み合わせの有効性のチェックは行われません。コンストラクタやメソッドなどの既知の種類のエンティティに対してこのようなチェックを実行するには、最初に、 &lt;code&gt;toString&lt;/code&gt; の引数と、&lt;a href=&quot;modifier#constructorModifiers--&quot;&gt; &lt;code&gt;constructorModifiers()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;modifier#methodModifiers--&quot;&gt; &lt;code&gt;methodModifiers()&lt;/code&gt; &lt;/a&gt;などのメソッドからの適切なマスクをANDで結合します。</target>
        </trans-unit>
        <trans-unit id="f254cbd5db1e9d15f5755ade659caa4db237d900" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isMixerSupported&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; for all the info objects returned by this method. The corresponding mixer instances for the info objects are returned by the &lt;code&gt;getMixer&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;isMixerSupported&lt;/code&gt; のメソッドが返す &lt;code&gt;true&lt;/code&gt; すべての情報については、このメソッドによって返されるオブジェクト。infoオブジェクトに対応するミキサーインスタンスは、 &lt;code&gt;getMixer&lt;/code&gt; メソッドによって返されます。</target>
        </trans-unit>
        <trans-unit id="bec8b9be4298b00c09430efa2b0f3eff6e4f2e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.invoke&lt;/code&gt; package contains dynamic language support provided directly by the Java core class libraries and virtual machine.</source>
          <target state="translated">&lt;code&gt;java.lang.invoke&lt;/code&gt; のパッケージには、Javaのコア・クラス・ライブラリおよび仮想マシンによって直接提供される動的言語サポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="e2e6b7ef82a944f100ddc377e04a645035f44c50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.nio&lt;/code&gt; package defines the buffer classes, which are used throughout the NIO APIs. The charset API is defined in the &lt;a href=&quot;charset/package-summary&quot;&gt;&lt;code&gt;java.nio.charset&lt;/code&gt;&lt;/a&gt; package, and the channel and selector APIs are defined in the &lt;a href=&quot;channels/package-summary&quot;&gt;&lt;code&gt;java.nio.channels&lt;/code&gt;&lt;/a&gt; package. Each of these subpackages has its own service-provider (SPI) subpackage, the contents of which can be used to extend the platform's default implementations or to construct alternative implementations.</source>
          <target state="translated">&lt;code&gt;java.nio&lt;/code&gt; でのパッケージは、NIO APIの全体で使用されるバッファクラスを定義しています。 charset APIは&lt;a href=&quot;charset/package-summary&quot;&gt; &lt;code&gt;java.nio.charset&lt;/code&gt; &lt;/a&gt;パッケージで定義されており、チャネルおよびセレクターAPIは&lt;a href=&quot;channels/package-summary&quot;&gt; &lt;code&gt;java.nio.channels&lt;/code&gt; &lt;/a&gt;パッケージで定義されています。これらの各サブパッケージには独自のサービスプロバイダー（SPI）サブパッケージがあり、その内容を使用して、プラットフォームのデフォルト実装を拡張したり、代替実装を構築したりできます。</target>
        </trans-unit>
        <trans-unit id="169158b25e43c0b1b051996b7d7ecf8990270082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; of a proxy class is the same as that of system classes loaded by the bootstrap class loader, such as &lt;code&gt;java.lang.Object&lt;/code&gt;, because the code for a proxy class is generated by trusted system code. This protection domain will typically be granted &lt;code&gt;java.security.AllPermission&lt;/code&gt;.</source>
          <target state="translated">プロキシクラスのコードは信頼できるシステムコードによって生成されるため、プロキシクラスの &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; は、ブートストラップクラスローダーによってロードされるシステムクラス（ &lt;code&gt;java.lang.Object&lt;/code&gt; など）と同じです。この保護ドメインには通常、 &lt;code&gt;java.security.AllPermission&lt;/code&gt; が付与されます。</target>
        </trans-unit>
        <trans-unit id="9813f685206a1823081b6d834a2cc39d317ab3f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl &lt;/code&gt; package provides the interfaces to the ACL and related data structures (ACL entries, groups, permissions, etc.), and the &lt;code&gt;sun.security.acl &lt;/code&gt; classes provide a default implementation of the interfaces. For example, &lt;code&gt;java.security.acl.Acl &lt;/code&gt; provides the interface to an ACL and the &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; class provides the default implementation of the interface.</source>
          <target state="translated">&lt;code&gt;java.security.acl &lt;/code&gt; パッケージは、ACLと関連するデータ構造へのインターフェイス（ACLエントリ、グループ、アクセス権など）を提供し、 &lt;code&gt;sun.security.acl &lt;/code&gt; クラスは、インターフェイスのデフォルトの実装を提供します。たとえば、 &lt;code&gt;java.security.acl.Acl &lt;/code&gt; はACLへのインタフェースを提供し、 &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; クラスはインタフェースのデフォルトの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="cfb4c2fdc7d8d17ba626b9a63de7a2721320820c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl.Acl &lt;/code&gt; interface extends the &lt;code&gt;java.security.acl.Owner &lt;/code&gt; interface. The Owner interface is used to maintain a list of owners for each ACL. Only owners are allowed to modify an ACL. For example, only an owner can call the ACL's &lt;code&gt;addEntry&lt;/code&gt; method to add a new ACL entry to the ACL.</source>
          <target state="translated">&lt;code&gt;java.security.acl.Acl &lt;/code&gt; のインターフェイスを拡張し &lt;code&gt;java.security.acl.Owner &lt;/code&gt; のインターフェイスを。オーナーインターフェイスは、各ACLのオーナーのリストを維持するために使用されます。所有者のみがACLを変更できます。たとえば、所有者だけがACLの &lt;code&gt;addEntry&lt;/code&gt; メソッドを呼び出して、新しいACLエントリをACLに追加できます。</target>
        </trans-unit>
        <trans-unit id="c584f80333ee86bf0587299c7f49da992c3a95b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.time.chrono&lt;/code&gt; package contains the calendar neutral API &lt;a href=&quot;chrono/chronolocaldate&quot;&gt;&lt;code&gt;ChronoLocalDate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt;&lt;code&gt;ChronoLocalDateTime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt;&lt;code&gt;ChronoZonedDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;chrono/era&quot;&gt;&lt;code&gt;Era&lt;/code&gt;&lt;/a&gt;. This is intended for use by applications that need to use localized calendars. It is recommended that applications use the ISO-8601 date and time classes from this package across system boundaries, such as to the database or across the network. The calendar neutral API should be reserved for interactions with users.</source>
          <target state="translated">&lt;code&gt;java.time.chrono&lt;/code&gt; のパッケージには、カレンダー中立APIが含まれ&lt;a href=&quot;chrono/chronolocaldate&quot;&gt; &lt;code&gt;ChronoLocalDate&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt; &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt; &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;chrono/era&quot;&gt; &lt;code&gt;Era&lt;/code&gt; &lt;/a&gt;。これは、ローカライズされたカレンダーを使用する必要があるアプリケーションでの使用を目的としています。アプリケーションは、データベースやネットワークなどのシステム境界を越えて、このパッケージのISO-8601日時クラスを使用することをお勧めします。カレンダーニュートラルAPIは、ユーザーとのやり取りのために予約する必要があります。</target>
        </trans-unit>
        <trans-unit id="31f5723f716d2e10c3dc95d349885c1c4063b2cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.imageio.spi&lt;/code&gt; package contains service provider interfaces for reading, writing, and transcoding images, and obtaining input and output streams, as well as a run-time registry that discovers installed service provider instances and allows new instances to be registered dynamically.</source>
          <target state="translated">&lt;code&gt;javax.imageio.spi&lt;/code&gt; パッケージには、イメージの読み取り、書き込み、トランスコード、入力ストリームと出力ストリームの取得のためのサービスプロバイダーインターフェイス、およびインストールされているサービスプロバイダーインスタンスを検出して新しいインスタンスを動的に登録できるランタイムレジストリが含まれています。</target>
        </trans-unit>
        <trans-unit id="2f9893bf2cb21c5852d399c228329581eed4bc85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt; RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; ののパッケージには、属性の種類を説明し、それらがどのようにセットに収集することができます。 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; ののすべての属性の実装であるほとんどがAPIでサポートされている標準属性、のを列挙は、IETF仕様で指定されたパッケージ、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911インターネット印刷プロトコル、1.1：モデルとセマンティクス&lt;/a&gt;、日付2000年9月 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; で指定された属性には、解像度、コピー、メディアサイズ、ジョブの優先順位、ページ範囲などの一般的な機能が含まれます。</target>
        </trans-unit>
        <trans-unit id="766e65fec5bf118351de7f21179d89ba7379dbda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kind&lt;/code&gt; of an element.</source>
          <target state="translated">要素の &lt;code&gt;kind&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a5fbfe70cef778b32594cced3a732339cbc1acf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 引数が負です。</target>
        </trans-unit>
        <trans-unit id="5c30faee739e118e9dbf221fbacf126dc2e548ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument must be less than or equal to &lt;code&gt;buf.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 引数が未満であるかに等しくなければならない &lt;code&gt;buf.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a20aaa21bfe3d598720524fef65f51974af49fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;limit&lt;/code&gt; parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; パラメータは、パターンが適用される回数を制御し、従って、得られた配列の長さに影響を与えます。限界なら</target>
        </trans-unit>
        <trans-unit id="7227cc8a8f47600f7a135282736709ff73dd62b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link&lt;/code&gt; parameter locates the directory entry to create. The &lt;code&gt;existing&lt;/code&gt; parameter is the path to an existing file. This method creates a new directory entry for the file so that it can be accessed using &lt;code&gt;link&lt;/code&gt; as the path. On some file systems this is known as creating a &quot;hard link&quot;. Whether the file attributes are maintained for the file or for each directory entry is file system specific and therefore not specified. Typically, a file system requires that all links (directory entries) for a file be on the same file system. Furthermore, on some platforms, the Java virtual machine may require to be started with implementation specific privileges to create hard links or to create links to directories.</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; パラメータは、作成するディレクトリエントリを検索します。 &lt;code&gt;existing&lt;/code&gt; パラメータは、既存のファイルへのパスです。このメソッドは、 &lt;code&gt;link&lt;/code&gt; をパスとして使用してアクセスできるように、ファイルの新しいディレクトリエントリを作成します。一部のファイルシステムでは、これは「ハードリンク」の作成と呼ばれます。ファイル属性がファイルに対して維持されるか、各ディレクトリエントリに対して維持されるかは、ファイルシステム固有であるため、指定されていません。通常、ファイルシステムでは、ファイルのすべてのリンク（ディレクトリエントリ）が同じファイルシステム上にある必要があります。さらに、一部のプラットフォームでは、ハードリンクを作成したり、ディレクトリへのリンクを作成したりするために、Java仮想マシンを実装固有の権限で起動する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="9d151fce3015e4ed9e5cd20051237afb5cefea88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listIterator(int)&lt;/code&gt; method returns a &quot;wrapper object&quot; over a list iterator on the backing list, which is created with the corresponding method on the backing list. The &lt;code&gt;iterator&lt;/code&gt; method merely returns &lt;code&gt;listIterator()&lt;/code&gt;, and the &lt;code&gt;size&lt;/code&gt; method merely returns the subclass's &lt;code&gt;size&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;listIterator(int)&lt;/code&gt; メソッドは、バッキングリストの対応するメソッドで作成されたバッキングリスト、上リストイテレータ上「ラッパー・オブジェクト」を返します。 &lt;code&gt;iterator&lt;/code&gt; 方法は、単に返す &lt;code&gt;listIterator()&lt;/code&gt; 、及び &lt;code&gt;size&lt;/code&gt; 方法は、単に、サブクラスの戻り &lt;code&gt;size&lt;/code&gt; フィールド。</target>
        </trans-unit>
        <trans-unit id="1fedd930e38f5398c449c705300b0fc17b0566c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loadClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;ClassLoader&lt;/code&gt; の &lt;code&gt;loadClass&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="6c9b144092edff275e75b32f1dca016975180187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapper&lt;/code&gt; function passed to &lt;code&gt;flatMap&lt;/code&gt; splits a line, using a simple regular expression, into an array of words, and then creates a stream of words from that array.</source>
          <target state="translated">&lt;code&gt;mapper&lt;/code&gt; に渡す機能 &lt;code&gt;flatMap&lt;/code&gt; は、単語の配列に、単純な正規表現を使用して、行を分割し、そのアレイからワードのストリームを生成します。</target>
        </trans-unit>
        <trans-unit id="e7777926bab037130e9c4b41941f7d725a543594" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapping()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Person&lt;/code&gt;, to accumulate the set of last names in each city:</source>
          <target state="translated">&lt;code&gt;mapping()&lt;/code&gt; このようなの下流として、マルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。たとえば、 &lt;code&gt;Person&lt;/code&gt; のストリームが与えられ、各都市の姓のセットを累積するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="903b585e02a8cfe6d8af38444d4c285b4ecfdab9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InflaterInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InflaterInputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="0371bac823202240bd6c72d5e06eb31b731df75c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="7e02e9dcce04c471816e17e93a8e7c8612865389" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; remembers the current line number in a private variable, and then calls the &lt;code&gt;mark&lt;/code&gt; method of the underlying input stream.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは、プライベート変数の現在の行番号を記憶し、基になる入力ストリームの &lt;code&gt;mark&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9baaba468b2b9ec943dee5d33e382f44cbd16e98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="77e5480e00ffc1e7db2c7cde3ede487453a10255" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; パラメータが訪問するディレクトリのレベルの最大数です。値 &lt;code&gt;0&lt;/code&gt; は、セキュリティマネージャーによって拒否されない限り、開始ファイルのみがアクセスされることを意味します。&lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt;の値は、すべてのレベルにアクセスする必要があることを示すために使用できます。</target>
        </trans-unit>
        <trans-unit id="259fe46dcadeee76b1ff944baef9fa3edc7fae57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited. The &lt;code&gt;visitFile&lt;/code&gt; method is invoked for all files, including directories, encountered at &lt;code&gt;maxDepth&lt;/code&gt;, unless the basic file attributes cannot be read, in which case the &lt;code&gt;visitFileFailed&lt;/code&gt; method is invoked.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; パラメータが訪問するディレクトリのレベルの最大数です。値 &lt;code&gt;0&lt;/code&gt; は、セキュリティマネージャーによって拒否されない限り、開始ファイルのみにアクセスすることを意味します。&lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt;の値は、すべてのレベルにアクセスする必要があることを示すために使用できます。 &lt;code&gt;visitFile&lt;/code&gt; の方法はで遭遇したディレクトリを含む、すべてのファイル、ために呼び出され &lt;code&gt;maxDepth&lt;/code&gt; 、その場合には、基本的なファイル属性を読み取ることができない場合を除き、 &lt;code&gt;visitFileFailed&lt;/code&gt; のメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6af76e421d8e057e7b7d9ff20dd9e09a4d087b85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metaData&lt;/code&gt; parameter can be used to limit the number of I/O operations that this method is required to perform. Passing &lt;code&gt;false&lt;/code&gt; for this parameter indicates that only updates to the file's content need be written to storage; passing &lt;code&gt;true&lt;/code&gt; indicates that updates to both the file's content and metadata must be written, which generally requires at least one more I/O operation. Whether this parameter actually has any effect is dependent upon the underlying operating system and is therefore unspecified.</source>
          <target state="translated">&lt;code&gt;metaData&lt;/code&gt; パラメータは、この方法は、実行するために必要であることをI / O操作の数を制限するために使用することができます。このパラメーターに &lt;code&gt;false&lt;/code&gt; を渡すと、ファイルのコンテンツの更新のみをストレージに書き込む必要があることを示します。 &lt;code&gt;true&lt;/code&gt; を渡すと、ファイルのコンテンツとメタデータの両方に対する更新を書き込む必要があることを示します。これには通常、少なくとももう1つのI / O操作が必要です。このパラメーターが実際に影響を与えるかどうかは、基になるオペレーティングシステムに依存するため、指定されていません。</target>
        </trans-unit>
        <trans-unit id="74be4dfd459c69d6c5eed0336db7d26406e6421b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;minimumCapacity&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;minimumCapacity&lt;/code&gt; の引数。</target>
        </trans-unit>
        <trans-unit id="890e9f6e189646766e2f576b109ba30702568602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; argument specifies the access mode with which the file is to be opened. The permitted values and their meanings are as specified for the &lt;a href=&quot;#mode&quot;&gt;&lt;code&gt;RandomAccessFile(File,String)&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 引数は、ファイルが開かれるとアクセスモードを指定します。許可される値とその意味は、&lt;a href=&quot;#mode&quot;&gt; &lt;code&gt;RandomAccessFile(File,String)&lt;/code&gt; &lt;/a&gt;コンストラクターに指定されているとおりです。</target>
        </trans-unit>
        <trans-unit id="8d634c96d7b7dc8c2283b2dc960c9bfb6ad5d16f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modifiers&lt;/code&gt; parameter specifies &lt;em&gt;modifiers&lt;/em&gt; that qualify how the directory is registered. This release does not define any &lt;em&gt;standard&lt;/em&gt; modifiers. It may contain implementation specific modifiers.</source>
          <target state="translated">&lt;code&gt;modifiers&lt;/code&gt; を指定するパラメータ&lt;em&gt;修飾子&lt;/em&gt;ディレクトリが登録されているかの資格。このリリースでは、&lt;em&gt;標準の&lt;/em&gt;修飾子は定義されていません。実装固有の修飾子が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="1c71b33fd5b314e171d4df0723194294f0896265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; string is localized using the given resource bundle. If the resource bundle is &lt;code&gt;null&lt;/code&gt;, then the &lt;code&gt;msg&lt;/code&gt; string is not localized.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 文字列が与えられたリソースバンドルを使用してローカライズされています。リソースバンドルが &lt;code&gt;null&lt;/code&gt; の場合、 &lt;code&gt;msg&lt;/code&gt; 文字列はローカライズされません。</target>
        </trans-unit>
        <trans-unit id="3ad795f1c708af7880ff420b8fad93daa8b2155f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; parameter may be negative, even though the &lt;code&gt;skip&lt;/code&gt; method of the &lt;a href=&quot;reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; superclass throws an exception in this case. If &lt;code&gt;n&lt;/code&gt; is negative, then this method does nothing and returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">この場合、&lt;a href=&quot;reader&quot;&gt; &lt;code&gt;Reader&lt;/code&gt; &lt;/a&gt;スーパークラスの &lt;code&gt;skip&lt;/code&gt; メソッドが例外をスローしますが、 &lt;code&gt;n&lt;/code&gt; パラメータは負の値になる場合があります。場合は &lt;code&gt;n&lt;/code&gt; 負の場合、このメソッドは何も戻りません &lt;code&gt;0&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7dff9aa267101b80032f4f16286856df7bec91f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;environment&lt;/code&gt; パラメータは、呼び出し側が所有しています。実装は、これらのオブジェクトを変更したり、それらへの参照を保持したりしませんが、クローンまたはコピーへの参照を保持する場合があります。</target>
        </trans-unit>
        <trans-unit id="30d43ffbfe8d9be7ac13f65149aa0271dd8dbc00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. &lt;code&gt;name&lt;/code&gt; is the name of the object, relative to context &lt;code&gt;nameCtx&lt;/code&gt;. This information could be useful to the object factory or to the object implementation. If there are several possible contexts from which the object could be named -- as will often be the case -- it is up to the caller to select one. A good rule of thumb is to select the &quot;deepest&quot; context available. If &lt;code&gt;nameCtx&lt;/code&gt; is null, &lt;code&gt;name&lt;/code&gt; is relative to the default initial context. If no name is being specified, the &lt;code&gt;name&lt;/code&gt; parameter should be null.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;nameCtx&lt;/code&gt; パラメータは、必要に応じて作成されたオブジェクトの名前を指定するために使用されてもよいです。 &lt;code&gt;name&lt;/code&gt; は、オブジェクトの名前であり、コンテキスト &lt;code&gt;nameCtx&lt;/code&gt; を基準にしています。この情報は、オブジェクトファクトリまたはオブジェクトの実装に役立ちます。オブジェクトに名前を付けることができるコンテキストがいくつかある場合（よくあることですが）、いずれかを選択するのは呼び出し側の責任です。経験則として、利用可能な「最も深い」コンテキストを選択します。 &lt;code&gt;nameCtx&lt;/code&gt; がnullの場合、 &lt;code&gt;name&lt;/code&gt; はデフォルトの初期コンテキストを基準にしています。名前を指定しない場合、 &lt;code&gt;name&lt;/code&gt; パラメータはnullにする必要があります。</target>
        </trans-unit>
        <trans-unit id="f70a327d5594e9f181a40f5c6ca0cd8e025505b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. See the description of &quot;Name and Context Parameters&quot; in &lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt;&lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;nameCtx&lt;/code&gt; パラメータは、必要に応じて作成されたオブジェクトの名前を指定するために使用されてもよいです。詳細については、&lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt; &lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt; &lt;/a&gt;の「名前とコンテキストパラメータ」の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="d4c006afdb1b3d49e58c74bd4a0ffd732b023002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. See the description of &quot;Name and Context Parameters&quot; in &lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt;&lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt;&lt;/a&gt; for details. If a factory uses &lt;code&gt;nameCtx&lt;/code&gt; it should synchronize its use against concurrent access, since context implementations are not guaranteed to be thread-safe.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;nameCtx&lt;/code&gt; パラメータは、必要に応じて作成されたオブジェクトの名前を指定するために使用されてもよいです。詳細については、&lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt; &lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt; &lt;/a&gt;の「名前とコンテキストパラメータ」の説明を参照してください。ファクトリが &lt;code&gt;nameCtx&lt;/code&gt; を使用する場合、コンテキストの実装がスレッドセーフであることが保証されていないため、ファクトリはその使用を同時アクセスに対して同期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b3818f758723f19e7f19461448d70ae40bd144a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;attrs&lt;/code&gt;, and &lt;code&gt;environment&lt;/code&gt; parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;attrs&lt;/code&gt; 、および &lt;code&gt;environment&lt;/code&gt; パラメータは、呼び出し側が所有しています。実装は、これらのオブジェクトを変更したり、それらへの参照を保持したりしませんが、クローンまたはコピーへの参照を保持する場合があります。</target>
        </trans-unit>
        <trans-unit id="48161fbd495af11311a77e82a4acb8a1f70aaa4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;inAttrs&lt;/code&gt;, and &lt;code&gt;environment&lt;/code&gt; parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies. The object returned by this method is owned by the caller. The implementation will not subsequently modify it. It will contain either a new &lt;code&gt;Attributes&lt;/code&gt; object that is likewise owned by the caller, or a reference to the original &lt;code&gt;inAttrs&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;inAttrs&lt;/code&gt; 、および &lt;code&gt;environment&lt;/code&gt; パラメータは、呼び出し側が所有しています。実装は、これらのオブジェクトを変更したり、それらへの参照を保持したりしませんが、クローンまたはコピーへの参照を保持する場合があります。このメソッドによって返されるオブジェクトは、呼び出し元が所有しています。その後、実装はそれを変更しません。同様に、呼び出し元が所有する新しい &lt;code&gt;Attributes&lt;/code&gt; オブジェクト、または元の &lt;code&gt;inAttrs&lt;/code&gt; パラメータへの参照が含まれます。</target>
        </trans-unit>
        <trans-unit id="ef2e6b4b4d41262649d36998a45ab4a554e41dd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;X500Principal&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; パラメータが（ない場合 &lt;code&gt;null&lt;/code&gt; ）である &lt;code&gt;Collection&lt;/code&gt; の &lt;code&gt;X500Principal&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="f5c100cec826504d35586ac2749c0d0f50484e21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; of names. Each name is a &lt;code&gt;String&lt;/code&gt; or a byte array representing a distinguished name (in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt; or ASN.1 DER encoded form, respectively). If &lt;code&gt;null&lt;/code&gt; is supplied as the value for this argument, no issuerNames check will be performed.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; パラメータが（ない場合 &lt;code&gt;null&lt;/code&gt; ）で &lt;code&gt;Collection&lt;/code&gt; の名前の。各名前は、識別名を表す &lt;code&gt;String&lt;/code&gt; またはバイト配列です（それぞれ&lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;またはASN.1 DERエンコード形式）。場合は &lt;code&gt;null&lt;/code&gt; がこの引数の値として供給され、何のissurNamesのチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="10f8926ca6dbdca434f3cdffa8eda26510a88124" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; with one entry for each name to be included in the pathToNames criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If &lt;code&gt;null&lt;/code&gt; is supplied as the value for this argument, no pathToNames check will be performed.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; パラメータ（そうでない場合は &lt;code&gt;null&lt;/code&gt; が）ある &lt;code&gt;Collection&lt;/code&gt; pathToNames基準値に含まれている名前ごとに1つのエントリと。各エントリは、最初のエントリが &lt;code&gt;Integer&lt;/code&gt; （名前の種類、0〜8）であり、2番目のエントリが &lt;code&gt;String&lt;/code&gt; またはバイト配列（それぞれ、文字列またはASN.1 DERエンコード形式の名前）である &lt;code&gt;List&lt;/code&gt; です。同じタイプの名前が複数存在する可能性があります。場合は &lt;code&gt;null&lt;/code&gt; がこの引数の値として供給され、pathToNamesのチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="b7f614fb779c50df2c64620e5af3100fbb23fe19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; with one entry for each name to be included in the subject alternative name criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If &lt;code&gt;null&lt;/code&gt; is supplied as the value for this argument, no subjectAlternativeNames check will be performed.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; パラメータ（そうでない場合は &lt;code&gt;null&lt;/code&gt; が）ある &lt;code&gt;Collection&lt;/code&gt; サブジェクト代替名基準値に含まれている名前ごとに1つのエントリとなります。各エントリは、最初のエントリが &lt;code&gt;Integer&lt;/code&gt; （名前の種類、0〜8）であり、2番目のエントリが &lt;code&gt;String&lt;/code&gt; またはバイト配列（それぞれ、文字列またはASN.1 DERエンコード形式の名前）である &lt;code&gt;List&lt;/code&gt; です。同じタイプの名前が複数存在する可能性があります。場合は &lt;code&gt;null&lt;/code&gt; がこの引数の値として供給され、subjectAlternativeNamesのチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="86f6973623e34ae41d0cb380cd7a6687a04a283e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;network interface&lt;/code&gt; and &lt;code&gt;ttl&lt;/code&gt; parameters let the caller specify which network interface the test will go through and the maximum number of hops the packets should go through. A negative value for the &lt;code&gt;ttl&lt;/code&gt; will result in an IllegalArgumentException being thrown.</source>
          <target state="translated">&lt;code&gt;network interface&lt;/code&gt; と &lt;code&gt;ttl&lt;/code&gt; パラメータは、発信者が通過しますとホップの最大数は、パケットが通過すべきテストインタフェースたネットワークを指定してみましょう。 &lt;code&gt;ttl&lt;/code&gt; に負の値を指定すると、IllegalArgumentExceptionがスローされます。</target>
        </trans-unit>
        <trans-unit id="8b09e54aa5c847f44721e53e1758b993160bcd0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newLength&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;newLength&lt;/code&gt; の引数はより大きくなるかに等しくなければならない &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd6f3c9ed9744a178a240c4efe334b44144e9408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize&lt;/code&gt; method helps solve these problems by transforming text into the canonical composed and decomposed forms as shown in the first example above. In addition, you can have it perform compatibility decompositions so that you can treat compatibility characters the same as their equivalents. Finally, the &lt;code&gt;normalize&lt;/code&gt; method rearranges accents into the proper canonical order, so that you do not have to worry about accent rearrangement on your own.</source>
          <target state="translated">&lt;code&gt;normalize&lt;/code&gt; 方法は、正規の構成と上記第一の例に示すように、フォームの分解にテキストを変換することによって、これらの問題を解決するのに役立ちます。さらに、互換性分解を実行して、互換性文字を同等のものと同じように扱うことができます。最後に、 &lt;code&gt;normalize&lt;/code&gt; メソッドはアクセントを適切な正規の順序に再配置するので、自分でアクセントの再配置を心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="63cf4faf44647d95951cea7798d0b85f615c45ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ns&lt;/code&gt; parameter may be negative, even though the &lt;code&gt;skip&lt;/code&gt; method of the &lt;a href=&quot;reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; superclass throws an exception in this case. Negative values of &lt;code&gt;ns&lt;/code&gt; cause the stream to skip backwards. Negative return values indicate a skip backwards. It is not possible to skip backwards past the beginning of the string.</source>
          <target state="translated">この場合、&lt;a href=&quot;reader&quot;&gt; &lt;code&gt;Reader&lt;/code&gt; &lt;/a&gt;スーパークラスの &lt;code&gt;skip&lt;/code&gt; メソッドが例外をスローしますが、 &lt;code&gt;ns&lt;/code&gt; パラメータは負の値になる場合があります。 &lt;code&gt;ns&lt;/code&gt; の負の値は、ストリームを逆方向にスキップさせます。負の戻り値は後方にスキップすることを示します。文字列の先頭を越えて後方にスキップすることはできません。</target>
        </trans-unit>
        <trans-unit id="e0fcc06e98814dd87a3c62b985949fba60bdb550" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument is the index of the first byte of the subarray, and the &lt;code&gt;count&lt;/code&gt; argument specifies the length of the subarray.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 引数は部分配列の先頭のバイトのインデックスであり、 &lt;code&gt;count&lt;/code&gt; 引数は部分配列の長さを指定します。</target>
        </trans-unit>
        <trans-unit id="baa0351e008899618db6b64da0e758694ddf41eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument is the index of the first character of the subarray. The &lt;code&gt;count&lt;/code&gt; argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 引数は、部分配列の最初の文字のインデックスです。 &lt;code&gt;count&lt;/code&gt; 引数は部分配列の長さを指定します。サブ配列の内容がコピーされます。その後の文字配列の変更は、返される文字列には影響しません。</target>
        </trans-unit>
        <trans-unit id="7d930134c90bf6d49ed3db167b3ffa23d64e6b5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuffer#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuffer#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="5649ec97e26cd383b62037dbe7726158b1b2a542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuilder#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuilder#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="4b47fbce935f5d028b77339d1ef9818c0b7586f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;openAttributes&lt;/code&gt;, &lt;code&gt;openConstructors&lt;/code&gt;, &lt;code&gt;openOperations&lt;/code&gt; and &lt;code&gt;notifications&lt;/code&gt; array parameters are internally copied, so that subsequent changes to the arrays referenced by these parameters have no effect on this instance.</source>
          <target state="translated">&lt;code&gt;openAttributes&lt;/code&gt; 、 &lt;code&gt;openConstructors&lt;/code&gt; 、 &lt;code&gt;openOperations&lt;/code&gt; 及び &lt;code&gt;notifications&lt;/code&gt; 配列パラメータは、内部で、これらのパラメータによって参照配列に対する後続の変更は、このインスタンスに影響を及ぼさないように、コピーされます。</target>
        </trans-unit>
        <trans-unit id="d6983d2110c5fe985de448c67aa2a3f5fba3481e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled by the resulting file attribute view for the case that the file is a symbolic link. By default, symbolic links are followed. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed. This option is ignored by implementations that do not support symbolic links.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 配列は、シンボリックリンクが、ファイルがシンボリックリンクである場合の結果のファイル属性ビューでどのように扱われるかを示すために使用することができます。デフォルトでは、シンボリックリンクをたどります。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、シンボリックリンクは追跡されません。このオプションは、シンボリックリンクをサポートしない実装では無視されます。</target>
        </trans-unit>
        <trans-unit id="e205a1262affb513a2bd877857ae965e9d442d7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 配列は、ファイルがシンボリックリンクであった場合のためにどのように処理されるか、シンボリックリンクを示すために使用することができます。デフォルトでは、シンボリックリンクがたどられ、リンクの最終ターゲットのファイル属性が読み取られます。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、シンボリックリンクは追跡されません。</target>
        </trans-unit>
        <trans-unit id="07b7edf8d716c1c078bf2b1c0f91fb4940940f39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is set. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 配列は、ファイルがシンボリックリンクであった場合のためにどのように処理されるか、シンボリックリンクを示すために使用することができます。デフォルトでは、シンボリックリンクがたどられ、リンクの最終ターゲットのファイル属性が設定されます。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、シンボリックリンクは追跡されません。</target>
        </trans-unit>
        <trans-unit id="d06342b773fea6549bc89fc2462a7083b70f4fb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled. By default, symbolic links are resolved to their final target. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then this method does not resolve symbolic links. Some implementations allow special names such as &quot;&lt;code&gt;..&lt;/code&gt;&quot; to refer to the parent directory. When deriving the &lt;em&gt;real path&lt;/em&gt;, and a &quot;&lt;code&gt;..&lt;/code&gt;&quot; (or equivalent) is preceded by a non-&quot;&lt;code&gt;..&lt;/code&gt;&quot; name then an implementation will typically cause both names to be removed. When not resolving symbolic links and the preceding name is a symbolic link then the names are only removed if it guaranteed that the resulting path will locate the same file as this path.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 配列は、シンボリックリンクがどのように処理されるかを示すために使用することができます。デフォルトでは、シンボリックリンクは最終的なターゲットに解決されます。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、このメソッドはシンボリックリンクを解決しません。一部の実装では、「 &lt;code&gt;..&lt;/code&gt; 」などの特別な名前で親ディレクトリを参照できます。&lt;em&gt;実際のパスを&lt;/em&gt;導出するときに、「 &lt;code&gt;..&lt;/code&gt; 」（または同等のもの）の前に「 &lt;code&gt;..&lt;/code&gt; 」以外の名前を付けると、通常、実装によって両方の名前が削除されます。シンボリックリンクを解決せず、前の名前がシンボリックリンクである場合、結果のパスがこのパスと同じファイルを見つけることが保証されている場合にのみ、名前が削除されます。</target>
        </trans-unit>
        <trans-unit id="0bc9bb7ec20a4fcc37fab92a84728a3be6a3d529" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. If no options are present then it is equivalent to opening the file with the &lt;a href=&quot;standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; option. In addition to the &lt;code&gt;READ&lt;/code&gt; option, an implementation may also support additional implementation specific options.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルが開かれた方法を決定します。オプションが存在しない場合は、&lt;a href=&quot;standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt;オプションでファイルを開くのと同じです。 &lt;code&gt;READ&lt;/code&gt; オプションに加えて、実装は追加の実装固有のオプションをサポートする場合もあります。</target>
        </trans-unit>
        <trans-unit id="feb5d322a388c3217a1ff698a06ad00e166739fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. The &lt;a href=&quot;../file/standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options determine if the file should be opened for reading and/or writing. If neither option (or the &lt;a href=&quot;../file/standardopenoption#APPEND&quot;&gt;&lt;code&gt;APPEND&lt;/code&gt;&lt;/a&gt; option) is contained in the array then the file is opened for reading. By default reading or writing commences at the beginning of the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルが開かれた方法を決定します。&lt;a href=&quot;../file/standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; の&lt;/a&gt;ファイルは読み取りおよび/または書き込み用にオープンする必要がある場合のオプションが決定します。どちらのオプション（または&lt;a href=&quot;../file/standardopenoption#APPEND&quot;&gt; &lt;code&gt;APPEND&lt;/code&gt; &lt;/a&gt;オプション）も配列に含まれていない場合、ファイルは読み取り用に開かれます。デフォルトでは、ファイルの先頭から読み取りまたは書き込みが開始されます。</target>
        </trans-unit>
        <trans-unit id="c735a8e347a9d0b0ecd22343769651f2ac14125f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. The &lt;a href=&quot;../file/standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options determines if the file should be opened for reading and/or writing. If neither option is contained in the array then an existing file is opened for reading.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルが開かれた方法を決定します。&lt;a href=&quot;../file/standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt;ファイルは読み取りおよび/または書き込み用にオープンする必要がある場合のオプションが決定されます。どちらのオプションも配列に含まれていない場合、既存のファイルが読み取り用に開かれます。</target>
        </trans-unit>
        <trans-unit id="70441efdb55fa14107d32cb84dfbb03932007cdd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. The &lt;a href=&quot;standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options determine if the file should be opened for reading and/or writing. If neither option (or the &lt;a href=&quot;standardopenoption#APPEND&quot;&gt;&lt;code&gt;APPEND&lt;/code&gt;&lt;/a&gt; option) is present then the file is opened for reading. By default reading or writing commence at the beginning of the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルが開かれた方法を決定します。&lt;a href=&quot;standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; の&lt;/a&gt;ファイルは読み取りおよび/または書き込み用にオープンする必要がある場合のオプションが決定します。どちらのオプション（または&lt;a href=&quot;standardopenoption#APPEND&quot;&gt; &lt;code&gt;APPEND&lt;/code&gt; &lt;/a&gt;オプション）も存在しない場合、ファイルは読み取り用に開かれます。デフォルトでは、ファイルの先頭から読み取りまたは書き込みが開始されます。</target>
        </trans-unit>
        <trans-unit id="adaafaa0c2c26b989f9f5f2e8716f29c6f11b35c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルがシンボリックリンクであった場合のためにどのように処理されるか、シンボリックリンクを示すために使用することができます。デフォルトでは、シンボリックリンクをたどります。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、シンボリックリンクは追跡されません。</target>
        </trans-unit>
        <trans-unit id="e88e22b5339b7c784d561d64428df97e00625dcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter may include any of the following:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、次のいずれかを含むことができます。</target>
        </trans-unit>
        <trans-unit id="6c00a59ba94adcb6905e3dd085514e8e2f27d12a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter specifies how the the file is created or opened. If no options are present then this method works as if the &lt;a href=&quot;standardopenoption#CREATE&quot;&gt;&lt;code&gt;CREATE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt;&lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options are present. In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing &lt;a href=&quot;files#isRegularFile-java.nio.file.Path-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;regular-file&lt;/code&gt;&lt;/a&gt; to a size of &lt;code&gt;0&lt;/code&gt;. The method ensures that the file is closed when all lines have been written (or an I/O error or other runtime exception is thrown). If an I/O error occurs then it may do so after the file has created or truncated, or after some bytes have been written to the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; ファイルを作成したり開いたりする方法を指定するパラメータ。オプションが存在しない場合、このメソッドは、&lt;a href=&quot;standardopenoption#CREATE&quot;&gt; &lt;code&gt;CREATE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt; &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt;オプションが存在するかのように機能します。つまり、書き込み用にファイルを開き、ファイルが存在しない場合は作成するか、既存の&lt;a href=&quot;files#isRegularFile-java.nio.file.Path-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;regular-file&lt;/code&gt; &lt;/a&gt;を最初にサイズ &lt;code&gt;0&lt;/code&gt; に切り捨てます。このメソッドは、すべての行が書き込まれたときに（またはI / Oエラーまたはその他の実行時例外がスローされたときに）ファイルが確実に閉じられるようにします。 I / Oエラーが発生した場合、ファイルが作成または切り捨てられた後、またはファイルにいくつかのバイトが書き込まれた後に発生することがあります。</target>
        </trans-unit>
        <trans-unit id="d38cc57bdb401fa5458030b8203d68a47b6b87cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputMimeType&lt;/code&gt; parameter describes the document type that you want to create, whereas the &lt;code&gt;flavor&lt;/code&gt; parameter describes the format in which the input data will be provided by the application to the &lt;code&gt;StreamPrintService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;outputMimeType&lt;/code&gt; のに対し、パラメータは、作成することを文書タイプを記述する &lt;code&gt;flavor&lt;/code&gt; パラメータが入力されたデータは、へのアプリケーションによって提供されるフォーマットについて説明し &lt;code&gt;StreamPrintService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64a8995d9ac05171aede64481f740265b7613585" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseURL&lt;/code&gt; method of &lt;code&gt;URLStreamHandler&lt;/code&gt; parses the string representation as if it were an &lt;code&gt;http&lt;/code&gt; specification. Most URL protocol families have a similar parsing. A stream protocol handler for a protocol that has a different syntax must override this routine.</source>
          <target state="translated">&lt;code&gt;URLStreamHandler&lt;/code&gt; の &lt;code&gt;parseURL&lt;/code&gt; メソッドは、文字列表現を &lt;code&gt;http&lt;/code&gt; 仕様であるかのように解析します。ほとんどのURLプロトコルファミリは同様の解析を行います。構文が異なるプロトコルのストリームプロトコルハンドラは、このルーチンをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="2221038019d4be2cb2f88fab060218d2d5a02e57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter is associated with a &lt;code&gt;FileSystem&lt;/code&gt; that supports the &lt;a href=&quot;attribute/posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt;. This attribute view provides access to file attributes commonly associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; パラメータが関連付けられている &lt;code&gt;FileSystem&lt;/code&gt; をサポート&lt;a href=&quot;attribute/posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; を&lt;/a&gt;。この属性ビューは、標準のポータブルオペレーティングシステムインターフェイス（POSIX）ファミリを実装するオペレーティングシステムによって使用されるファイルシステム上のファイルに一般的に関連付けられているファイル属性へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="b249e9a3d9c0f37793a768ee4c126d9c0f3b49e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter is associated with a file system that supports &lt;a href=&quot;attribute/fileownerattributeview&quot;&gt;&lt;code&gt;FileOwnerAttributeView&lt;/code&gt;&lt;/a&gt;. This file attribute view provides access to a file attribute that is the owner of the file.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; パラメータがサポートするファイルシステムに関連付けられている&lt;a href=&quot;attribute/fileownerattributeview&quot;&gt; &lt;code&gt;FileOwnerAttributeView&lt;/code&gt; を&lt;/a&gt;。このファイル属性ビューは、ファイルの所有者であるファイル属性へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="5493aef38945eeedee66c785a93a8e949626fc4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;perms&lt;/code&gt; parameter is a &lt;code&gt;String&lt;/code&gt; representing the permissions. It has 9 characters that are interpreted as three sets of three. The first set refers to the owner's permissions; the next to the group permissions and the last to others. Within each set, the first character is &lt;code&gt;'r'&lt;/code&gt; to indicate permission to read, the second character is &lt;code&gt;'w'&lt;/code&gt; to indicate permission to write, and the third character is &lt;code&gt;'x'&lt;/code&gt; for execute permission. Where a permission is not set then the corresponding character is set to &lt;code&gt;'-'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;perms&lt;/code&gt; パラメータがある &lt;code&gt;String&lt;/code&gt; のアクセス権を表します。3つの3つのセットとして解釈される9文字があります。最初のセットは所有者の権限を参照しています。グループのアクセス許可の隣と、他のグループの許可。各セット内で、最初の文字は読み取り許可を示す &lt;code&gt;'r'&lt;/code&gt; 、2番目の文字は書き込み許可を示す &lt;code&gt;'w'&lt;/code&gt; 、3番目の文字は実行許可の &lt;code&gt;'x'&lt;/code&gt; です。権限が設定されていない場合、対応する文字は &lt;code&gt;'-'&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="b9d482d82a8c67b95f55d10ab3dda1aad0c96b7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;persistPolicy&lt;/code&gt; and &lt;code&gt;currencyTimeLimit&lt;/code&gt; fields are meaningless for constructors, but are not considered invalid.</source>
          <target state="translated">&lt;code&gt;persistPolicy&lt;/code&gt; と &lt;code&gt;currencyTimeLimit&lt;/code&gt; フィールドは、コンストラクタに対して無意味ですが、無効と見なされていません。</target>
        </trans-unit>
        <trans-unit id="822e7053ed501794bcb73e078de627432ea24760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pos&lt;/code&gt; argument may range between zero and</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; 引数がゼロとの間の範囲であり得ます</target>
        </trans-unit>
        <trans-unit id="0d4b8df143426535636c3d9fcf5d259dd494e8ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pos&lt;/code&gt; argument selects which parameters are to be bound. It may range between zero and</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; パラメータがバインドされる引数の選択。ゼロから</target>
        </trans-unit>
        <trans-unit id="3295278a86db378f96ef38915c5399dfa8f46eb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prefix&lt;/code&gt; argument must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &lt;code&gt;&quot;hjb&quot;&lt;/code&gt; or &lt;code&gt;&quot;mail&quot;&lt;/code&gt;. The &lt;code&gt;suffix&lt;/code&gt; argument may be &lt;code&gt;null&lt;/code&gt;, in which case the suffix &lt;code&gt;&quot;.tmp&quot;&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;prefix&lt;/code&gt; 引数は、少なくとも3つの文字でなければなりません。プレフィックスは、 &lt;code&gt;&quot;hjb&quot;&lt;/code&gt; や &lt;code&gt;&quot;mail&quot;&lt;/code&gt; などの短く意味のある文字列にすることをお勧めします。 &lt;code&gt;suffix&lt;/code&gt; 引数とすることができる &lt;code&gt;null&lt;/code&gt; サフィックス、その場合には、 &lt;code&gt;&quot;.tmp&quot;&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="e5caea50061710cec044d7be43530e50e1eb551a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;radix&lt;/code&gt; argument is valid if it is greater than or equal to &lt;code&gt;MIN_RADIX&lt;/code&gt; and less than or equal to &lt;code&gt;MAX_RADIX&lt;/code&gt;. The &lt;code&gt;digit&lt;/code&gt; argument is valid if &lt;code&gt;0 &amp;lt;= digit &amp;lt; radix&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; それがより大きいかに等しい場合の引数が有効で &lt;code&gt;MIN_RADIX&lt;/code&gt; 未満または等しい &lt;code&gt;MAX_RADIX&lt;/code&gt; 。 &lt;code&gt;digit&lt;/code&gt; 場合は引数が有効です &lt;code&gt;0 &amp;lt;= digit &amp;lt; radix&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b33942ad43fbe9d22cb9d95c4c4908fdaa08301" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;radix&lt;/code&gt; is either smaller than &lt;a href=&quot;character#MIN_RADIX&quot;&gt;&lt;code&gt;Character.MIN_RADIX&lt;/code&gt;&lt;/a&gt; or larger than &lt;a href=&quot;character#MAX_RADIX&quot;&gt;&lt;code&gt;Character.MAX_RADIX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; いずれよりも小さい&lt;a href=&quot;character#MIN_RADIX&quot;&gt; &lt;code&gt;Character.MIN_RADIX&lt;/code&gt; &lt;/a&gt;又はより大きい&lt;a href=&quot;character#MAX_RADIX&quot;&gt; &lt;code&gt;Character.MAX_RADIX&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d785142e5ab58037a089cd9e5a386011f0b7e09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ranges&lt;/code&gt; to be given can take one of the following forms:</source>
          <target state="translated">&lt;code&gt;ranges&lt;/code&gt; 与えられるべきは、以下のいずれかの形式をとることができます。</target>
        </trans-unit>
        <trans-unit id="1259bcaaf2e03d5637399a403f2eed4bcb0658f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read(b)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; has the same effect as:</source>
          <target state="translated">クラス &lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;read(b)&lt;/code&gt; メソッドの効果は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4604e99f767c72aaa96525bf29f68941bb283ab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read(b)&lt;/code&gt; method has the same effect as:</source>
          <target state="translated">&lt;code&gt;read(b)&lt;/code&gt; 方法と同じ効果を有します。</target>
        </trans-unit>
        <trans-unit id="d053108594714cc2e678b8a8b8bcae476c059c88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read(b,&lt;/code&gt;&lt;code&gt;off,&lt;/code&gt;&lt;code&gt;len)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; simply calls the method &lt;code&gt;read()&lt;/code&gt; repeatedly. If the first such call results in an &lt;code&gt;IOException&lt;/code&gt;, that exception is returned from the call to the &lt;code&gt;read(b,&lt;/code&gt;&lt;code&gt;off,&lt;/code&gt;&lt;code&gt;len)&lt;/code&gt; method. If any subsequent call to &lt;code&gt;read()&lt;/code&gt; results in a &lt;code&gt;IOException&lt;/code&gt;, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into &lt;code&gt;b&lt;/code&gt; and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data &lt;code&gt;len&lt;/code&gt; has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method.</source>
          <target state="translated">クラス &lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; メソッドは、メソッド &lt;code&gt;read()&lt;/code&gt; を繰り返し呼び出すだけです。そのような最初の呼び出しの結果が &lt;code&gt;IOException&lt;/code&gt; になる場合、その例外は呼び出しから &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; メソッドに返されます。後続の呼び出しがする場合 &lt;code&gt;read()&lt;/code&gt; で結果を &lt;code&gt;IOException&lt;/code&gt; が、例外が捕捉され、それがファイルの終わりであるかのように処理しました。その時点までに読み取られたバイトは &lt;code&gt;b&lt;/code&gt; に格納され、例外が発生する前に読み取られたバイト数が返されます。このメソッドのデフォルト実装は、要求された量の入力データ &lt;code&gt;len&lt;/code&gt; までブロックします。読み取られたか、ファイルの終わりが検出されたか、または例外がスローされました。サブクラスは、このメソッドのより効率的な実装を提供することが推奨されます。</target>
        </trans-unit>
        <trans-unit id="d73e15d99486a3edb623a542384b22544dac32ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; calls the &lt;code&gt;read&lt;/code&gt; method of three arguments with the arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; の方法 &lt;code&gt;InputStream&lt;/code&gt; 呼び出して &lt;code&gt;read&lt;/code&gt; 3つの引数と引数の方法 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、および &lt;code&gt;b.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7efed5a820d4dabed25b8a28bd1df6414d7e77e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; calls the &lt;code&gt;read&lt;/code&gt; method of the underlying input stream. It checks for carriage returns and newline characters in the input, and modifies the current line number as appropriate. A carriage-return character or a carriage return followed by a newline character are both converted into a single newline character.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; の方法 &lt;code&gt;LineNumberInputStream&lt;/code&gt; は、呼び出して &lt;code&gt;read&lt;/code&gt; 基本となる入力ストリームの方法を。入力のキャリッジリターンと改行文字をチェックし、必要に応じて現在の行番号を変更します。復帰文字または復帰とそれに続く改行文字は、どちらも単一の改行文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="4d12f1e1c60d3ded7ff55ddd8ec9fa42dcbe1312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; repeatedly calls the &lt;code&gt;read&lt;/code&gt; method of zero arguments to fill in the byte array.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; の方法 &lt;code&gt;LineNumberInputStream&lt;/code&gt; は、繰り返し呼び出して &lt;code&gt;read&lt;/code&gt; 、バイト配列を埋めるためにゼロ引数の方法を。</target>
        </trans-unit>
        <trans-unit id="9c073aae985b3b46c91c5b9276bb615fd3d6afcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;SequenceInputStream&lt;/code&gt; tries to read the data from the current substream. If it fails to read any characters because the substream has reached the end of the stream, it calls the &lt;code&gt;close&lt;/code&gt; method of the current substream and begins reading from the next substream.</source>
          <target state="translated">&lt;code&gt;SequenceInputStream&lt;/code&gt; の &lt;code&gt;read&lt;/code&gt; メソッドは、現在のサブストリームからデータを読み取ろうとします。サブストリームがストリームの終わりに達したために文字の読み取りに失敗した場合、現在のサブストリームの &lt;code&gt;close&lt;/code&gt; メソッドを呼び出し、次のサブストリームからの読み取りを開始します。</target>
        </trans-unit>
        <trans-unit id="266c4f3bc071054256173e68adbd4a6e7656ec4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;StringBufferInputStream&lt;/code&gt; cannot block. It copies the low eight bits from the characters in this input stream's buffer into the byte array argument.</source>
          <target state="translated">&lt;code&gt;StringBufferInputStream&lt;/code&gt; の &lt;code&gt;read&lt;/code&gt; メソッドはブロックできません。この入力ストリームのバッファ内の文字から下位8ビットをバイト配列引数にコピーします。</target>
        </trans-unit>
        <trans-unit id="e61745f20485b6632a27794087bfb013bec50ba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;StringBufferInputStream&lt;/code&gt; cannot block. It returns the low eight bits of the next character in this input stream's buffer.</source>
          <target state="translated">&lt;code&gt;StringBufferInputStream&lt;/code&gt; の &lt;code&gt;read&lt;/code&gt; メソッドはブロックできません。この入力ストリームのバッファにある次の文字の下位8ビットを返します。</target>
        </trans-unit>
        <trans-unit id="b68abbad5ba6fb28f94eaadf9085c6dda28742eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of the underlying stream returns &lt;code&gt;-1&lt;/code&gt;, indicating end-of-file, or</source>
          <target state="translated">基本となるストリームの &lt;code&gt;read&lt;/code&gt; メソッドは、ファイルの終わりを示す &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6ff4f563e5b69d4b6268d50e4aa9d51aa5725103" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; methods of the resulting stream will throw an &lt;a href=&quot;illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt; if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered, and it will not support the &lt;a href=&quot;../../io/inputstream#mark-int-&quot;&gt;&lt;code&gt;mark&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../io/inputstream#reset--&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt; methods. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.</source>
          <target state="translated">基になるチャネルが非ブロッキングモードのときに呼び出された場合、結果のストリームの &lt;code&gt;read&lt;/code&gt; メソッドは&lt;a href=&quot;illegalblockingmodeexception&quot;&gt; &lt;code&gt;IllegalBlockingModeException&lt;/code&gt; &lt;/a&gt;をスローします。ストリームはバッファリングされず、&lt;a href=&quot;../../io/inputstream#mark-int-&quot;&gt; &lt;code&gt;mark&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../io/inputstream#reset--&quot;&gt; &lt;code&gt;reset&lt;/code&gt; &lt;/a&gt;メソッドをサポートしません。ストリームは、複数の同時スレッドによるアクセスに対して安全になります。ストリームを閉じると、チャネルが閉じられます。</target>
        </trans-unit>
        <trans-unit id="3b7ea7159daa93e13abc58f5ee72d1aa9624ff2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; methods of the returned &lt;code&gt;InputStream&lt;/code&gt; will throw &lt;code&gt;IOException&lt;/code&gt; when reading bytes that cannot be decoded.</source>
          <target state="translated">デコードできないバイトを読み取る &lt;code&gt;IOException&lt;/code&gt; 、返された &lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;read&lt;/code&gt; メソッドはIOExceptionをスローします。</target>
        </trans-unit>
        <trans-unit id="b52f6c80e4a3c11df2890b54a5a8b3b1218aeabd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readlimit&lt;/code&gt; argument tells this input stream to allow that many bytes to be read before the mark position gets invalidated.</source>
          <target state="translated">&lt;code&gt;readlimit&lt;/code&gt; の引数は、マーク位置が無効になる前に多くのバイトを読み取ることができるようにすることを、この入力ストリームを伝えます。</target>
        </trans-unit>
        <trans-unit id="f523a2bdf73035ee44a575de3e5dff08d7683039" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readlimit&lt;/code&gt; arguments tells this input stream to allow that many bytes to be read before the mark position gets invalidated.</source>
          <target state="translated">&lt;code&gt;readlimit&lt;/code&gt; の引数は、マーク位置が無効になる前に多くのバイトを読み取ることができるようにすることを、この入力ストリームを伝えます。</target>
        </trans-unit>
        <trans-unit id="26aa2e19c94981b7af3edb0fd924e85788e560ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ready&lt;/code&gt; method of the underlying stream returns &lt;code&gt;false&lt;/code&gt;, indicating that further input requests would block.</source>
          <target state="translated">基になるストリームの &lt;code&gt;ready&lt;/code&gt; メソッドは &lt;code&gt;false&lt;/code&gt; を返し、それ以降の入力要求がブロックされることを示します。</target>
        </trans-unit>
        <trans-unit id="165873d7f5551dc1377b152568842b2aacddf487" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple map-reduce on a stream, use &lt;a href=&quot;stream#map-java.util.function.Function-&quot;&gt;&lt;code&gt;Stream.map(Function)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; の下流にマルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。ストリームに対して単純なmap-reduceを実行するには、&lt;a href=&quot;stream#map-java.util.function.Function-&quot;&gt; &lt;code&gt;Stream.map(Function)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="7e64fcbf48d32ed9f489fe7ed817a63867533729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple reduction on a stream, use &lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt;&lt;/a&gt;} instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; の下流にマルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。ストリームに対して単純な削減を実行するには、代わりに&lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt; &lt;/a&gt; }を使用します。</target>
        </trans-unit>
        <trans-unit id="331f2b86728595fcc490eed59b6a8eb8cea11e3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple reduction on a stream, use &lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;Stream.reduce(BinaryOperator)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; の下流にマルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。ストリームで単純な削減を実行するには、代わりに&lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;Stream.reduce(BinaryOperator)&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b6e4a1cfb3d954ef8dc93a66017c84659865340e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refresh&lt;/code&gt; method causes the policy object to refresh/reload its data. This operation is implementation-dependent. For example, if the policy object stores its data in configuration files, calling &lt;code&gt;refresh&lt;/code&gt; will cause it to re-read the configuration policy files. If a refresh operation is not supported, this method does nothing. Note that refreshed policy may not have an effect on classes in a particular ProtectionDomain. This is dependent on the Policy provider's implementation of the &lt;code&gt;implies&lt;/code&gt; method and its PermissionCollection caching strategy.</source>
          <target state="translated">&lt;code&gt;refresh&lt;/code&gt; 方法は、リフレッシュにポリシーオブジェクトを起こし/そのデータをリロードします。この操作は実装に依存します。たとえば、ポリシーオブジェクトがデータを構成ファイルに保存している場合、 &lt;code&gt;refresh&lt;/code&gt; を呼び出すと、構成ポリシーファイルが再度読み込まれます。更新操作がサポートされていない場合、このメソッドは何もしません。更新されたポリシーは、特定のProtectionDomainのクラスに影響を与えない場合があることに注意してください。これは、ポリシープロバイダーの &lt;code&gt;implies&lt;/code&gt; メソッドの実装とそのPermissionCollectionキャッシング戦略に依存します。</target>
        </trans-unit>
        <trans-unit id="b92536f2a5a0e1a3b6f9a0f2c5c546403063f5bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;registerMBean&lt;/code&gt; method is simpler for local use, but cannot be used remotely. The &lt;code&gt;createMBean&lt;/code&gt; method can be used remotely, but sometimes requires attention to class loading issues.</source>
          <target state="translated">&lt;code&gt;registerMBean&lt;/code&gt; メソッドは、ローカルでの使用のために簡単ですが、リモートで使用することはできません。 &lt;code&gt;createMBean&lt;/code&gt; メソッドは、リモートで使用され、時にはクラスローディングの問題に注意を要することができます。</target>
        </trans-unit>
        <trans-unit id="dec43624de062d1e7493f56cb68ff2515b4d245d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reset&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; resets the line number to be the line number at the time the &lt;code&gt;mark&lt;/code&gt; method was called, and then calls the &lt;code&gt;reset&lt;/code&gt; method of the underlying input stream.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; の &lt;code&gt;reset&lt;/code&gt; メソッドは、行番号を &lt;code&gt;mark&lt;/code&gt; メソッドが呼び出されたときの行番号に &lt;code&gt;reset&lt;/code&gt; から、基になる入力ストリームのresetメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9e487af727a443b2fc09683914bf955d5aed101d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schedule&lt;/code&gt; methods create tasks with various delays and return a task object that can be used to cancel or check execution. The &lt;code&gt;scheduleAtFixedRate&lt;/code&gt; and &lt;code&gt;scheduleWithFixedDelay&lt;/code&gt; methods create and execute tasks that run periodically until cancelled.</source>
          <target state="translated">&lt;code&gt;schedule&lt;/code&gt; 方法は、種々の遅延でタスクを作成し、実行をキャンセルするか確認するために使用することができるタスクオブジェクトを返します。 &lt;code&gt;scheduleAtFixedRate&lt;/code&gt; と &lt;code&gt;scheduleWithFixedDelay&lt;/code&gt; 方法が取り消されるまで定期的に実行タスクを作成して実行します。</target>
        </trans-unit>
        <trans-unit id="275b9770ecb642dad5739bf9b860015b219e5bc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;seekForwardOnly&lt;/code&gt; parameter controls whether the value returned by &lt;code&gt;getMinIndex&lt;/code&gt; will be increased as each image (or thumbnail, or image metadata) is read. If &lt;code&gt;seekForwardOnly&lt;/code&gt; is true, then a call to &lt;code&gt;read(index)&lt;/code&gt; will throw an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; if &lt;code&gt;index &amp;lt; this.minIndex&lt;/code&gt;; otherwise, the value of &lt;code&gt;minIndex&lt;/code&gt; will be set to &lt;code&gt;index&lt;/code&gt;. If &lt;code&gt;seekForwardOnly&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the value of &lt;code&gt;minIndex&lt;/code&gt; will remain 0 regardless of any read operations.</source>
          <target state="translated">&lt;code&gt;seekForwardOnly&lt;/code&gt; によって返される値か否かのパラメータを制御 &lt;code&gt;getMinIndex&lt;/code&gt; は、各画像（またはサムネイル、又は画像メタデータ）が読み出されるように増加するであろう。場合 &lt;code&gt;seekForwardOnly&lt;/code&gt; が trueの場合、その後の呼び出し &lt;code&gt;read(index)&lt;/code&gt; スローされます &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; 場合は &lt;code&gt;index &amp;lt; this.minIndex&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;minIndex&lt;/code&gt; の値は &lt;code&gt;index&lt;/code&gt; に設定されます。 &lt;code&gt;seekForwardOnly&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、読み取り操作に関係なく、 &lt;code&gt;minIndex&lt;/code&gt; の値は0 のままになります。</target>
        </trans-unit>
        <trans-unit id="76ca7bc87a7a645eee5be869e5f2afee6e7546a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; array parameter is internally copied, so that subsequent changes to the array referenced by &lt;code&gt;signature&lt;/code&gt; have no effect on this instance.</source>
          <target state="translated">&lt;code&gt;signature&lt;/code&gt; 配列パラメータは、内部で参照配列に対する後続の変更ように、コピーされ &lt;code&gt;signature&lt;/code&gt; このインスタンスに影響を及ぼしません。</target>
        </trans-unit>
        <trans-unit id="4ab62abd8dea24de7feab17efb96ab240af801b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;isEmpty&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;iterator&lt;/code&gt;, and &lt;code&gt;listIterator&lt;/code&gt; operations run in constant time. The &lt;code&gt;add&lt;/code&gt; operation runs in</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 、 &lt;code&gt;isEmpty&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;iterator&lt;/code&gt; 、および &lt;code&gt;listIterator&lt;/code&gt; 一定の時間で実行されます操作。 &lt;code&gt;add&lt;/code&gt; 操作が実行される中</target>
        </trans-unit>
        <trans-unit id="a4a7eb3594e941fdb97e903210733646c272b12a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly &lt;code&gt;0&lt;/code&gt;. If &lt;code&gt;n&lt;/code&gt; is negative, the method will try to skip backwards. In case the backing file does not support backward skip at its current position, an &lt;code&gt;IOException&lt;/code&gt; is thrown. The actual number of bytes skipped is returned. If it skips forwards, it returns a positive value. If it skips backwards, it returns a negative value.</source>
          <target state="translated">&lt;code&gt;skip&lt;/code&gt; 方法は、様々な理由で、バイトのいくつかのより少ない数、おそらくをスキップ終わる可能性が &lt;code&gt;0&lt;/code&gt; 。場合は &lt;code&gt;n&lt;/code&gt; 負の場合、この方法は、後方スキップしようとします。バッキングファイルが現在の位置で後方スキップをサポートしていない &lt;code&gt;IOException&lt;/code&gt; 、IOExceptionがスローされます。スキップされた実際のバイト数が返されます。前方にスキップすると、正の値を返します。後方にスキップすると、負の値を返します。</target>
        </trans-unit>
        <trans-unit id="66c38c1c54f362c964143fb2033b1ddc5a7e0a28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; creates a byte array and then repeatedly reads into it until &lt;code&gt;n&lt;/code&gt; bytes have been read or the end of the stream has been reached.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; の &lt;code&gt;skip&lt;/code&gt; メソッドは、バイト配列を作成し、 &lt;code&gt;n&lt;/code&gt; バイトが読み取られるまで、またはストリームの終わりに達するまで、バイト配列を繰り返し読み取ります。</target>
        </trans-unit>
        <trans-unit id="6a923526e0376b2377270933dbe7190607b0ff31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt; first skips over the bytes in the pushback buffer, if any. It then calls the &lt;code&gt;skip&lt;/code&gt; method of the underlying input stream if more bytes need to be skipped. The actual number of bytes skipped is returned.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; の &lt;code&gt;skip&lt;/code&gt; メソッドは、最初にプッシュバックバッファー内のバイトをスキップします（存在する場合）。次に、さらにバイトをスキップする必要がある場合は、基になる入力ストリームの &lt;code&gt;skip&lt;/code&gt; メソッドを呼び出します。スキップされた実際のバイト数が返されます。</target>
        </trans-unit>
        <trans-unit id="c16533536dab6e2f9b65c6a5002fc87433ad4e31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method of this class creates a byte array and then repeatedly reads into it until &lt;code&gt;n&lt;/code&gt; bytes have been read or the end of the stream has been reached. Subclasses are encouraged to provide a more efficient implementation of this method. For instance, the implementation may depend on the ability to seek.</source>
          <target state="translated">このクラスの &lt;code&gt;skip&lt;/code&gt; メソッドは、バイト配列を作成してから、 &lt;code&gt;n&lt;/code&gt; バイトが読み取られるか、ストリームの終わりに達するまで繰り返し読み取ります。サブクラスは、このメソッドのより効率的な実装を提供することが推奨されます。たとえば、実装はシークする能力に依存する場合があります。</target>
        </trans-unit>
        <trans-unit id="48bb13788e4dffd1bf5c784a19fc6b8edec85d28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument and &lt;code&gt;dest&lt;/code&gt; argument refer to arrays whose component types are different primitive types.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 引数と &lt;code&gt;dest&lt;/code&gt; 引数は、そのコンポーネントのタイプ異なるプリミティブ型である配列を指します。</target>
        </trans-unit>
        <trans-unit id="2ded185c55f988e1ab8aa4ba594d8425c8a39394" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a primitive component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array with a reference component type.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 引数は、プリミティブコンポーネントタイプを持つ配列を指すと &lt;code&gt;dest&lt;/code&gt; 引数が参照コンポーネント型を持つ配列を指します。</target>
        </trans-unit>
        <trans-unit id="9b64842c9ed7d557d1d18f19836d86fd1cadc9b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a reference component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array with a primitive component type.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 引数は、参照コンポーネントタイプを持つ配列を指すと &lt;code&gt;dest&lt;/code&gt; 引数がプリミティブコンポーネントタイプを持つ配列を指します。</target>
        </trans-unit>
        <trans-unit id="17390f5ec2c7023bf41b502643c3390be1470837" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument refers to an object that is not an array.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 引数が配列でないオブジェクトを指します。</target>
        </trans-unit>
        <trans-unit id="32cf5d4487a70ff5b3296fb66460f51ac7c6a160" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;srcPos&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;srcPos&lt;/code&gt; の引数が負です。</target>
        </trans-unit>
        <trans-unit id="345b6d87d178ad048ca717372d6308e35699c398" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream&lt;/code&gt; walks the file tree as elements are consumed. The &lt;code&gt;Stream&lt;/code&gt; returned is guaranteed to have at least one element, the starting file itself. For each file visited, the stream attempts to read its &lt;a href=&quot;attribute/basicfileattributes&quot;&gt;&lt;code&gt;BasicFileAttributes&lt;/code&gt;&lt;/a&gt;. If the file is a directory and can be opened successfully, entries in the directory, and their &lt;em&gt;descendants&lt;/em&gt; will follow the directory in the stream as they are encountered. When all entries have been visited, then the directory is closed. The file tree walk then continues at the next &lt;em&gt;sibling&lt;/em&gt; of the directory.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; 要素が消費されるファイルツリーを歩きます。 &lt;code&gt;Stream&lt;/code&gt; 少なくとも一つの要素は、出発ファイル自体を持つことが保証されて戻りました。アクセスしたファイルごとに、ストリームはその&lt;a href=&quot;attribute/basicfileattributes&quot;&gt; &lt;code&gt;BasicFileAttributes&lt;/code&gt; &lt;/a&gt;を読み取ろうとします。ファイルがディレクトリであり、正常に開くことができる場合、ディレクトリ内のエントリとその&lt;em&gt;子孫&lt;/em&gt;は、ストリーム内のディレクトリに遭遇したときにそれらをたどります。すべてのエントリにアクセスすると、ディレクトリが閉じます。ファイルツリーウォークは、ディレクトリの次の&lt;em&gt;兄弟&lt;/em&gt;に続きます。</target>
        </trans-unit>
        <trans-unit id="bbed603ba13286eef01f00c49ed0143e560232fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system&lt;/code&gt; factory methods provide clocks based on the best available system clock This may use &lt;a href=&quot;../lang/system#currentTimeMillis--&quot;&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;&lt;/a&gt;, or a higher resolution clock if one is available.</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; ファクトリメソッドは、これが使用できる利用可能な最善のシステムクロックに基づいてクロックを提供する&lt;a href=&quot;../lang/system#currentTimeMillis--&quot;&gt; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; &lt;/a&gt;利用可能な場合、またはより高い解像度のクロックを。</target>
        </trans-unit>
        <trans-unit id="fc9c79ee1df025d55ac0b05752be64291c34d35f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; and the &lt;code&gt;methodName&lt;/code&gt; values should not be &lt;code&gt;null&lt;/code&gt;. Otherwise an attempt to execute this &lt;code&gt;Expression&lt;/code&gt; will result in a &lt;code&gt;NullPointerException&lt;/code&gt;. If the &lt;code&gt;arguments&lt;/code&gt; value is &lt;code&gt;null&lt;/code&gt;, an empty array is used as the value of the &lt;code&gt;arguments&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; と &lt;code&gt;methodName&lt;/code&gt; 値はすべきではない &lt;code&gt;null&lt;/code&gt; 。そうでない場合、この &lt;code&gt;Expression&lt;/code&gt; を実行しようとすると、 &lt;code&gt;NullPointerException&lt;/code&gt; が発生します。場合 &lt;code&gt;arguments&lt;/code&gt; 値が &lt;code&gt;null&lt;/code&gt; 、空の配列は、の値として使用される &lt;code&gt;arguments&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="643140ef281b03db8ff1987c73ac0c49fd06dd1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; parameter is the target of the link. It may be an &lt;a href=&quot;path#isAbsolute--&quot;&gt;&lt;code&gt;absolute&lt;/code&gt;&lt;/a&gt; or relative path and may not exist. When the target is a relative path then file system operations on the resulting link are relative to the path of the link.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; パラメータは、リンクのターゲットです。それがあってもよい&lt;a href=&quot;path#isAbsolute--&quot;&gt; &lt;code&gt;absolute&lt;/code&gt; &lt;/a&gt;または相対パスとが存在しなくてもよいです。ターゲットが相対パスの場合、結果のリンクでのファイルシステム操作は、リンクのパスに対して相対的です。</target>
        </trans-unit>
        <trans-unit id="0009c69a4dc15a49dcbf1a0c8eae01039c7c4a96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thumbnails&lt;/code&gt; argument must either be &lt;code&gt;null&lt;/code&gt; or contain only &lt;code&gt;BufferedImage&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;thumbnails&lt;/code&gt; 引数はどちらかでなければなりません &lt;code&gt;null&lt;/code&gt; のみ含ま &lt;code&gt;BufferedImage&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="a0e9ab517d625c7c2deaf59529ad7e0219c013fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeStamp&lt;/code&gt; of the notification is a time value (consistent with &lt;a href=&quot;../../../java/lang/system#currentTimeMillis--&quot;&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;&lt;/a&gt;) indicating when the notification was constructed.</source>
          <target state="translated">通知の &lt;code&gt;timeStamp&lt;/code&gt; は、通知がいつ作成されたかを示す時間値（&lt;a href=&quot;../../../java/lang/system#currentTimeMillis--&quot;&gt; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; &lt;/a&gt;と一致）です。</target>
        </trans-unit>
        <trans-unit id="b2dc1977f789016cfbe08995493b9abe10ad9cbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString&lt;/code&gt; method for class &lt;code&gt;Object&lt;/code&gt; returns a string consisting of the name of the class of which the object is an instance, the at-sign character `&lt;code&gt;@&lt;/code&gt;', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:</source>
          <target state="translated">クラス &lt;code&gt;Object&lt;/code&gt; の &lt;code&gt;toString&lt;/code&gt; メソッドは、オブジェクトがインスタンスであるクラスの名前、アットマーク文字 ` &lt;code&gt;@&lt;/code&gt; '、およびオブジェクトのハッシュコードの符号なし16進表現で構成される文字列を返します。つまり、このメソッドは次の値に等しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="bc716b32be2e2ea2d617e608d9ff17039ae30d19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument should be a valid value for the byte that follows the status byte in the &lt;code&gt;MetaMessage&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; argument should contain all the subsequent bytes of the &lt;code&gt;MetaMessage&lt;/code&gt;. In other words, the byte that specifies the type of &lt;code&gt;MetaMessage&lt;/code&gt; is not considered a data byte.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数は、中ステータスバイト以下のバイトの有効な値でなければなりません &lt;code&gt;MetaMessage&lt;/code&gt; を。 &lt;code&gt;data&lt;/code&gt; 引数は、すべての後続のバイト含まれている必要があり &lt;code&gt;MetaMessage&lt;/code&gt; を。つまり、 &lt;code&gt;MetaMessage&lt;/code&gt; のタイプを指定するバイトは、データバイトとは見なされません。</target>
        </trans-unit>
        <trans-unit id="714e35a3944791dcc0a21aa2cfb1cc1a672a4844" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; parameter is the type of the attributes required and this method returns an instance of that type if supported. All implementations support a basic set of file attributes and so invoking this method with a &lt;code&gt;type&lt;/code&gt; parameter of &lt;code&gt;BasicFileAttributes.class&lt;/code&gt; will not throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; パラメータは、必須属性のタイプであり、サポートされている場合、この方法は、そのタイプのインスタンスを返します。すべての実装はファイル属性の基本セットをサポートしているため、 &lt;code&gt;BasicFileAttributes.class&lt;/code&gt; の &lt;code&gt;type&lt;/code&gt; パラメーターを指定してこのメ​​ソッドを呼び出しても、 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; はスローされません。</target>
        </trans-unit>
        <trans-unit id="f1056213ec4dbb35ecbc5b5160831677aa11a47e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; parameter is typically a class, but it may be any type, such as an interface, a primitive type (like &lt;code&gt;int.class&lt;/code&gt;), or &lt;code&gt;void.class&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; パラメータは、典型的には、クラスであるが、そのようなインタフェース、（などプリミティブ型など任意のタイプであってもよい &lt;code&gt;int.class&lt;/code&gt; を）、または &lt;code&gt;void.class&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d0f557c7ffa69e938b51901e39f9567f456bb67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeName&lt;/code&gt; here is determined by the &lt;a href=&quot;#type-names&quot;&gt; type name rules&lt;/a&gt; detailed below.</source>
          <target state="translated">ここでの &lt;code&gt;typeName&lt;/code&gt; は、以下に詳述する&lt;a href=&quot;#type-names&quot;&gt;タイプ名の規則&lt;/a&gt;によって決定されます。</target>
        </trans-unit>
        <trans-unit id="b34f44d7ea255df3fe2a501bc7503f396e8bcc57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uncaughtException&lt;/code&gt; method of &lt;code&gt;ThreadGroup&lt;/code&gt; does the following:</source>
          <target state="translated">&lt;code&gt;ThreadGroup&lt;/code&gt; の &lt;code&gt;uncaughtException&lt;/code&gt; メソッドは以下を実行します。</target>
        </trans-unit>
        <trans-unit id="ba8b125bbe0fb10254e8b4e3a983a07e8dccd3bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uri&lt;/code&gt; parameter is an absolute, hierarchical URI, with a scheme equal (without regard to case) to the scheme supported by this provider. The exact form of the URI is highly provider dependent. The &lt;code&gt;env&lt;/code&gt; parameter is a map of provider specific properties to configure the file system.</source>
          <target state="translated">&lt;code&gt;uri&lt;/code&gt; パラメータは、このプロバイダによってサポートされている方式と（場合に関係なく）同じ方式で、絶対的な、階層URIです。URIの正確な形式は、プロバイダーに大きく依存します。 &lt;code&gt;env&lt;/code&gt; パラメータは、ファイルシステムを設定するには、プロバイダ固有のプロパティのマップです。</target>
        </trans-unit>
        <trans-unit id="8d5265eccd53a8174604390135889708c5fc5e2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useOrdering&lt;/code&gt; argument controls the ordering of the results using the same rules as &lt;code&gt;getServiceProviders(Class, boolean)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;useOrdering&lt;/code&gt; 引数が同じルールを使用して結果の順序を制御 &lt;code&gt;getServiceProviders(Class, boolean)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf3c577a872e1c1751d1a92167097db6476c0ae8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method with a &lt;code&gt;key&lt;/code&gt; that is equal to the original &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 呼び出すことによって取得することができる &lt;code&gt;get&lt;/code&gt; と方法 &lt;code&gt;key&lt;/code&gt; 元に等しい &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb6cc5d83f6f060e6206ee4432cd2838d953df43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wrap()&lt;/code&gt; and &lt;code&gt;unwrap()&lt;/code&gt; methods may execute concurrently of each other.</source>
          <target state="translated">&lt;code&gt;wrap()&lt;/code&gt; および &lt;code&gt;unwrap()&lt;/code&gt; メソッドは、互いに同時に実行してもよいです。</target>
        </trans-unit>
        <trans-unit id="b6ac35afc51c676f6acfb59fbb66aebb7fd7dffe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;CipherOutputStream&lt;/code&gt; calls the &lt;code&gt;write&lt;/code&gt; method of three arguments with the three arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; の方法 &lt;code&gt;CipherOutputStream&lt;/code&gt; は、呼び出して &lt;code&gt;write&lt;/code&gt; 3つの3つの引数と引数の方法 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、および &lt;code&gt;b.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b444208efa76dded6db1c12df1b7df685049876c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls its &lt;code&gt;write&lt;/code&gt; method of three arguments with the arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FilterOutputStream&lt;/code&gt; の &lt;code&gt;write&lt;/code&gt; メソッドは、引数 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、および &lt;code&gt;b.length&lt;/code&gt; を持つ3つの引数の &lt;code&gt;write&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="4d273be569b8b30933a05fc498292c5402a93de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;write&lt;/code&gt; method of its underlying output stream, that is, it performs &lt;code&gt;out.write(b)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 方法 &lt;code&gt;FilterOutputStream&lt;/code&gt; は、呼び出し &lt;code&gt;write&lt;/code&gt; で、その基本となる出力ストリームの方法を、それが実行 &lt;code&gt;out.write(b)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b52d117ddcb1aaf2483d386c55d430f15571498" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;write&lt;/code&gt; method of one argument on each &lt;code&gt;byte&lt;/code&gt; to output.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; の方法 &lt;code&gt;FilterOutputStream&lt;/code&gt; は、呼び出し、 &lt;code&gt;write&lt;/code&gt; ごとに1つの引数のメソッド &lt;code&gt;byte&lt;/code&gt; 出力にします。</target>
        </trans-unit>
        <trans-unit id="f6b5bd7ff632f357b485afe4736af5f2318b4eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; calls the write method of one argument on each of the bytes to be written out. Subclasses are encouraged to override this method and provide a more efficient implementation.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; の方法 &lt;code&gt;OutputStream&lt;/code&gt; 、書き込むバイトごとに1つの引数のwriteメソッドを呼び出します。サブクラスでは、このメソッドをオーバーライドして、より効率的な実装を提供することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4052734952517729cae634a4334fbfe7bc56b79a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; methods of the resulting stream will throw an &lt;a href=&quot;illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt; if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.</source>
          <target state="translated">基になるチャネルが非ブロッキングモードのときに呼び出された場合、結果のストリームの &lt;code&gt;write&lt;/code&gt; メソッドは&lt;a href=&quot;illegalblockingmodeexception&quot;&gt; &lt;code&gt;IllegalBlockingModeException&lt;/code&gt; &lt;/a&gt;をスローします。ストリームはバッファリングされません。ストリームは、複数の同時スレッドによるアクセスに対して安全になります。ストリームを閉じると、チャネルが閉じられます。</target>
        </trans-unit>
        <trans-unit id="7aeccac65dd62b076d4abb5d4c775615877d46ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writeObject&lt;/code&gt; is a single entry point to the persistence and is used by a &lt;code&gt;Encoder&lt;/code&gt; in the traditional mode of delegation. Although this method is not final, it should not need to be subclassed under normal circumstances.</source>
          <target state="translated">&lt;code&gt;writeObject&lt;/code&gt; は、持続性への単一のエントリポイントであるとで使用されている &lt;code&gt;Encoder&lt;/code&gt; の代表団の伝統的なモードで。このメソッドは最終的なものではありませんが、通常の状況ではサブクラス化する必要はありません。</target>
        </trans-unit>
        <trans-unit id="65972030b222838810b7ba8b656c7648e06077d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writeUTF&lt;/code&gt; method of interface &lt;code&gt;DataOutput&lt;/code&gt; may be used to write data that is suitable for reading by this method.</source>
          <target state="translated">インターフェース &lt;code&gt;DataOutput&lt;/code&gt; の &lt;code&gt;writeUTF&lt;/code&gt; メソッドを使用して、このメソッドによる読み取りに適したデータを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="ecdfdf55c3e6233c34db1e9797ae4ac06e60e0e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{ }&lt;/code&gt; characters are a group of subpatterns, where the group matches if any subpattern in the group matches. The &lt;code&gt;&quot;,&quot;&lt;/code&gt; character is used to separate the subpatterns. Groups cannot be nested.</source>
          <target state="translated">&lt;code&gt;{ }&lt;/code&gt; の文字はグループがあれば一致するサブパターンのグループであるグループマッチの任意のサブパターン。 &lt;code&gt;&quot;,&quot;&lt;/code&gt; 文字は、サブパターンを区切るために使用されます。グループはネストできません。</target>
        </trans-unit>
        <trans-unit id="4383cedf66c99d541142d23205794e9fbe074f11" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;action&lt;/em&gt;. For a permission you need, this is one of the actions in the list &lt;a href=&quot;#action-list&quot;&gt;below&lt;/a&gt;. For a permission you have, this is a comma-separated list of those actions, or &lt;code&gt;*&lt;/code&gt;, representing all actions.</source>
          <target state="translated">&lt;em&gt;アクション&lt;/em&gt;。必要な権限の場合、これは&lt;a href=&quot;#action-list&quot;&gt;以下&lt;/a&gt;のリストのアクションの1つです。あなたが持っている許可の場合、これはそれらのアクションのコンマ区切りのリスト、またはすべてのアクションを表す &lt;code&gt;*&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4203e1844ba2358b9cf99e65861fc5814fcbd135" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;canonical key property list&lt;/em&gt; is the same string as described for &lt;a href=&quot;objectname#getCanonicalKeyPropertyListString--&quot;&gt;&lt;code&gt;getCanonicalKeyPropertyListString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;正規のキープロパティリストは、&lt;/em&gt;のために説明したのと同じ文字列である&lt;a href=&quot;objectname#getCanonicalKeyPropertyListString--&quot;&gt; &lt;code&gt;getCanonicalKeyPropertyListString()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0da932c873e0a87699cfc16c3ea52c0b2e0de4c0" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;class name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;クラス名&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b34ed1bdfeb4a02859cb87fc0dd3c70da93cc4ac" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;domain&lt;/em&gt; is a string of characters not including the character colon (&lt;code&gt;:&lt;/code&gt;). It is recommended that the domain should not contain the string &quot;&lt;code&gt;//&lt;/code&gt;&quot;, which is reserved for future use.</source>
          <target state="translated">&lt;em&gt;ドメインは&lt;/em&gt;、文字、コロンを含まない文字列です（ &lt;code&gt;:&lt;/code&gt; ）。ドメインには、将来の使用のために予約されている文字列「 &lt;code&gt;//&lt;/code&gt; 」を含めないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4031de43ef1c59b0c68ad4834eee900eefebe3c6" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;head&lt;/em&gt; of this queue is the &lt;em&gt;least&lt;/em&gt; element with respect to the specified ordering. If multiple elements are tied for least value, the head is one of those elements -- ties are broken arbitrarily. The queue retrieval operations &lt;code&gt;poll&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;peek&lt;/code&gt;, and &lt;code&gt;element&lt;/code&gt; access the element at the head of the queue.</source>
          <target state="translated">このキューの&lt;em&gt;先頭&lt;/em&gt;は、指定された順序に関して&lt;em&gt;最小の&lt;/em&gt;要素です。複数の要素が最小値で結合されている場合、ヘッドはそれらの要素の1つです。結合は任意に分割されます。キュー取得操作は、 &lt;code&gt;poll&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、 &lt;code&gt;peek&lt;/code&gt; 、および &lt;code&gt;element&lt;/code&gt; アクセスにより、キューの先頭にある要素にアクセスします。</target>
        </trans-unit>
        <trans-unit id="132748ef7ce7edd118fa2aec50bbb6b7013d4a04" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;key properties&lt;/em&gt; are an unordered set of keys and associated values.</source>
          <target state="translated">&lt;em&gt;キープロパティは&lt;/em&gt;、キーと関連する値の非順序集合です。</target>
        </trans-unit>
        <trans-unit id="49b6c7b812bfb37bbfa829d277662d381281a9fd" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;mapped&lt;/em&gt; Java type, &lt;em&gt;opendata(J)&lt;/em&gt;, which is always the same for any given &lt;em&gt;opentype(J)&lt;/em&gt;. This is a Java class.</source>
          <target state="translated">&lt;em&gt;マッピングされた&lt;/em&gt; Java型、&lt;em&gt;をopendata（J）&lt;/em&gt;は常に、任意の所与のために同じである、&lt;em&gt;OpenTypeの（J） &lt;/em&gt;。これはJavaクラスです。</target>
        </trans-unit>
        <trans-unit id="bbb454761775dc1a414464798499aeee43da2b26" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;member&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;メンバー&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="074cbd71c6bb024356bb7396d0de2ecfe45082b5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;name&lt;/em&gt; of the permission can also denote a list of one or more comma-separated operations. Spaces are allowed at the beginning and end of the &lt;em&gt;name&lt;/em&gt; and before and after commas.</source>
          <target state="translated">権限の&lt;em&gt;名前&lt;/em&gt;は、1つ以上のカンマ区切りの操作のリストを表すこともできます。&lt;em&gt;名前の&lt;/em&gt;最初と最後、およびコンマの前後にスペースを入れることができます。</target>
        </trans-unit>
        <trans-unit id="9480872eca819a401a143d99801ef4a81e78cc7a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;object name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;オブジェクト名&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f0e83e021e240eac4fd2981ea6d32868e52f81d8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname consists of the pathname's prefix, if any, and each name in the pathname's name sequence except for the last. If the name sequence is empty then the pathname does not name a parent directory.</source>
          <target state="translated">抽象パス名の&lt;em&gt;親&lt;/em&gt;は、パス名のプレフィックス（存在する場合）と、パス名の名前シーケンスの最後の名前を除く各名前で構成されます。名前シーケンスが空の場合、パス名は親ディレクトリを示しません。</target>
        </trans-unit>
        <trans-unit id="d0528ba347878b821ba42755b3a17661463c339f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname may be obtained by invoking the &lt;a href=&quot;file#getParent--&quot;&gt;&lt;code&gt;getParent()&lt;/code&gt;&lt;/a&gt; method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any &lt;code&gt;File&lt;/code&gt; object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname &lt;code&gt;&quot;/usr&quot;&lt;/code&gt; is an ancestor of the directory denoted by the pathname &lt;code&gt;&quot;/usr/local/bin&quot;&lt;/code&gt;.</source>
          <target state="translated">抽象パス名の&lt;em&gt;親&lt;/em&gt;は、このクラスの&lt;a href=&quot;file#getParent--&quot;&gt; &lt;code&gt;getParent()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって取得でき、パス名のプレフィックスと、パス名の名前シーケンスの最後の名前を除く各名前で構成されます。各ディレクトリの絶対パス名は、ディレクトリの絶対パス名で始まる絶対抽象パス名を持つ任意の &lt;code&gt;File&lt;/code&gt; オブジェクトの祖先です。たとえば、抽象パス名 &lt;code&gt;&quot;/usr&quot;&lt;/code&gt; で示されるディレクトリは、パス名 &lt;code&gt;&quot;/usr/local/bin&quot;&lt;/code&gt; 示されるディレクトリの祖先です。</target>
        </trans-unit>
        <trans-unit id="3219f3facb21696d1ed20d4e54a6c99ee13262e4" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;pattern indication&lt;/em&gt; is:</source>
          <target state="translated">&lt;em&gt;パターンの表示は&lt;/em&gt;次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e24706d6569ad24b7b450fbbe13dd7ea6ed5e827" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;time-to-live&lt;/em&gt; for Internet Protocol (IP) multicast datagrams</source>
          <target state="translated">&lt;em&gt;生存時間&lt;/em&gt;インターネット・プロトコル（IP）マルチキャストデータグラムのために</target>
        </trans-unit>
        <trans-unit id="2a0f0d9a04c7aa959de016e80e8a27f487dc3d88" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;time-to-live&lt;/em&gt; for Internet Protocol (IP) multicast datagrams.</source>
          <target state="translated">&lt;em&gt;生存時間&lt;/em&gt;インターネット・プロトコル（IP）マルチキャストデータグラムのために。</target>
        </trans-unit>
        <trans-unit id="a5cbd78bbaec3014307f658d756d06fe19f45c6b" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;outer&lt;/var&gt; parameter is a pointer to the MBeanServer that should be passed to the &lt;a href=&quot;mbeanregistration&quot;&gt;&lt;code&gt;MBeanRegistration&lt;/code&gt;&lt;/a&gt; interface when registering MBeans inside the MBeanServer. If &lt;var&gt;outer&lt;/var&gt; is &lt;code&gt;null&lt;/code&gt;, then the MBeanServer implementation must use its own &lt;code&gt;this&lt;/code&gt; reference when invoking the &lt;a href=&quot;mbeanregistration&quot;&gt;&lt;code&gt;MBeanRegistration&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;var&gt;outer&lt;/var&gt; パラメータが渡されるべきであるMBeanServerへのポインタである&lt;a href=&quot;mbeanregistration&quot;&gt; &lt;code&gt;MBeanRegistration&lt;/code&gt; の&lt;/a&gt; MBeanServerの内部MBeanを登録する際のインターフェース。 &lt;var&gt;outer&lt;/var&gt; が &lt;code&gt;null&lt;/code&gt; の場合、MBeanServer実装は、&lt;a href=&quot;mbeanregistration&quot;&gt; &lt;code&gt;MBeanRegistration&lt;/code&gt; &lt;/a&gt;インターフェースを呼び出すときに独自の &lt;code&gt;this&lt;/code&gt; 参照を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f59eba20773f5628795f2594c47e23e68f64a277" translate="yes" xml:space="preserve">
          <source>The ACL Entries in each ACL observe the following rules:</source>
          <target state="translated">各ACLのエントリーは、以下のルールを遵守します。</target>
        </trans-unit>
        <trans-unit id="8bff27e96b6704d8f87499203e5a6ae8eb995398" translate="yes" xml:space="preserve">
          <source>The ACL entry represented by this class is based on the ACL model specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt;&lt;i&gt;RFC 3530: Network File System (NFS) version 4 Protocol&lt;/i&gt;&lt;/a&gt;. Each entry has four components as follows:</source>
          <target state="translated">このクラスで表されるACLエントリは、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt;&lt;i&gt;RFC 3530：Network File System（NFS）version 4 Protocolで&lt;/i&gt;&lt;/a&gt;指定されているACLモデルに基づいています。各エントリには、次の4つのコンポーネントがあります。</target>
        </trans-unit>
        <trans-unit id="36548e1972814e3b9960a257ac0e7fefe094719d" translate="yes" xml:space="preserve">
          <source>The API has a relatively large surface area in terms of number of methods. This is made manageable through the use of consistent method prefixes.</source>
          <target state="translated">APIはメソッド数の点で比較的大きな表面積を持っています。これは、一貫したメソッドの接頭辞を使用することで管理しやすくなっています。</target>
        </trans-unit>
        <trans-unit id="dbd68d7bbcc6cfd76b2979294dc860ef940a8a77" translate="yes" xml:space="preserve">
          <source>The API has been designed to reject null early and to be clear about this behavior. A key exception is any method that takes an object and returns a boolean, for the purpose of checking or validating, will generally return false for null.</source>
          <target state="translated">APIはNULLを早期に拒否し、この動作を明確にするように設計されています。重要な例外として、オブジェクトを受け取り、チェックや検証の目的でブール値を返すメソッドは、一般的に null の場合は false を返します。</target>
        </trans-unit>
        <trans-unit id="5d2d1219bb89c1b00654a21e6d21d64a9c99c7dd" translate="yes" xml:space="preserve">
          <source>The API includes remote access, so a remote management program can interact with a running application for these purposes.</source>
          <target state="translated">APIにはリモートアクセスが含まれているため、リモート管理プログラムはこれらの目的のために実行中のアプリケーションと対話することができます。</target>
        </trans-unit>
        <trans-unit id="0ddb46698ab6320ca268f051f9fdff93cea456dc" translate="yes" xml:space="preserve">
          <source>The API is also designed for user extensibility, as there are many ways of calculating time. The &lt;a href=&quot;temporal/temporalfield&quot;&gt;field&lt;/a&gt; and &lt;a href=&quot;temporal/temporalunit&quot;&gt;unit&lt;/a&gt; API, accessed via &lt;a href=&quot;temporal/temporalaccessor&quot;&gt;&lt;code&gt;TemporalAccessor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;temporal/temporal&quot;&gt;&lt;code&gt;Temporal&lt;/code&gt;&lt;/a&gt; provide considerable flexibility to applications. In addition, the &lt;a href=&quot;temporal/temporalquery&quot;&gt;&lt;code&gt;TemporalQuery&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;temporal/temporaladjuster&quot;&gt;&lt;code&gt;TemporalAdjuster&lt;/code&gt;&lt;/a&gt; interfaces provide day-to-day power, allowing code to read close to business requirements:</source>
          <target state="translated">時間を計算する多くの方法があるので、APIはユーザーの拡張性のためにも設計されています。&lt;a href=&quot;temporal/temporalfield&quot;&gt;フィールド&lt;/a&gt;および&lt;a href=&quot;temporal/temporalunit&quot;&gt;ユニット&lt;/a&gt;を介してアクセスAPI、&lt;a href=&quot;temporal/temporalaccessor&quot;&gt; &lt;code&gt;TemporalAccessor&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;temporal/temporal&quot;&gt; &lt;code&gt;Temporal&lt;/code&gt; &lt;/a&gt;アプリケーションにかなりの柔軟性を提供します。さらに、&lt;a href=&quot;temporal/temporalquery&quot;&gt; &lt;code&gt;TemporalQuery&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;temporal/temporaladjuster&quot;&gt; &lt;code&gt;TemporalAdjuster&lt;/code&gt; &lt;/a&gt;インターフェイスは日々の能力を提供し、コードがビジネス要件に近い読み取りを可能にします。</target>
        </trans-unit>
        <trans-unit id="14204c857d829d56ea62ee7c57aa99da1a8c1fa8" translate="yes" xml:space="preserve">
          <source>The API is designed to be type-safe where reasonable in the main high-level API. Thus, there are separate classes for the distinct concepts of date, time and date-time, plus variants for offset and time-zone. This can seem like a lot of classes, but most applications can begin with just five date/time types.</source>
          <target state="translated">このAPIは、メインの高レベルAPIの中で合理的なところでは型安全であるように設計されています。このように、日付、時刻、日付-時刻という明確な概念のための別々のクラスがあり、さらにオフセットとタイムゾーンのためのバリアントがあります。これは多くのクラスがあるように見えますが、ほとんどのアプリケーションでは5つの日付/時刻型だけで始めることができます。</target>
        </trans-unit>
        <trans-unit id="1d7455826253bffa39b78615725dcdd563f19a04" translate="yes" xml:space="preserve">
          <source>The API requires every print service to support certain attributes; other attributes are optional and the service can choose whether or not to support them. Each attribute has a set of values that it accepts. The API requires every print service to support certain values for certain attributes; other attribute values are optional and the service can choose whether or not to support them. These support requirements are recorded in the documentation for each attribute class.</source>
          <target state="translated">APIでは、すべての印刷サービスが特定の属性をサポートする必要があります。各属性には、受け入れられる値のセットがあります。その他の属性の値はオプションであり、サービスはそれらをサポートするかどうかを選択することができます。これらのサポート要件は、各属性クラスのドキュメントに記録されています。</target>
        </trans-unit>
        <trans-unit id="98bf436512bc6abd974a2733430a3d5b5a388d6c" translate="yes" xml:space="preserve">
          <source>The APIs added in 1.7 map between the old and new language codes, maintaining the old codes internal to Locale (so that &lt;code&gt;getLanguage&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; reflect the old code), but using the new codes in the BCP 47 language tag APIs (so that &lt;code&gt;toLanguageTag&lt;/code&gt; reflects the new one). This preserves the equivalence between Locales no matter which code or API is used to construct them. Java's default resource bundle lookup mechanism also implements this mapping, so that resources can be named using either convention, see &lt;a href=&quot;resourcebundle.control&quot;&gt;&lt;code&gt;ResourceBundle.Control&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1.7で追加されたAPIは古い言語コードと新しい言語コードを &lt;code&gt;getLanguage&lt;/code&gt; 、Locale内部の古いコードを維持します（getLanguageと &lt;code&gt;toString&lt;/code&gt; は古いコードを反映します）が、BCP 47言語タグAPIで新しいコードを使用すると（ &lt;code&gt;toLanguageTag&lt;/code&gt; は反映されます）新しい方）。これにより、どのコードまたはAPIを使用してロケールを構築しても、ロケール間の同等性が保持されます。Javaのデフォルトのリソースバンドルの検索メカニズムもそうリソースはいずれかの規則を使用して命名することができ、参照、このマッピングを実装&lt;a href=&quot;resourcebundle.control&quot;&gt; &lt;code&gt;ResourceBundle.Control&lt;/code&gt; のを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1e8aa36e1e31661c0e8ce5465a873be7b0631796" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition for this is:</source>
          <target state="translated">そのためのASN.1の定義は</target>
        </trans-unit>
        <trans-unit id="943be2a0bc4bf87f26928040bf4bf42222a1a4d3" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition is as follows:</source>
          <target state="translated">ASN.1の定義は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="47734034dda78f218c309ac08628f954c60425f3" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;GeneralNames&lt;/code&gt; is defined in &lt;a href=&quot;x509certificate#getSubjectAlternativeNames--&quot;&gt;&lt;code&gt;getSubjectAlternativeNames&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;GeneralNames&lt;/code&gt; のASN.1定義は、&lt;a href=&quot;x509certificate#getSubjectAlternativeNames--&quot;&gt; &lt;code&gt;getSubjectAlternativeNames&lt;/code&gt; &lt;/a&gt;で定義されています。</target>
        </trans-unit>
        <trans-unit id="8d4394df37dee40fdf32c164d9e7675520b84225" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;tbsCertList&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;tbsCertList&lt;/code&gt; のASN.1定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f3b0786ad17cd85c2406e5dec048d22519850b47" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;tbsCertificate&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;tbsCertificate&lt;/code&gt; のASN.1定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ef48af476f938c6dbaa3d39664736786a596b706" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of the &lt;code&gt;IssuerAltName&lt;/code&gt; extension is:</source>
          <target state="translated">&lt;code&gt;IssuerAltName&lt;/code&gt; 拡張機能のASN.1定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f3bfe2daf1a8d1055520bbddc7ce3310410386b4" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of the &lt;code&gt;SubjectAltName&lt;/code&gt; extension is:</source>
          <target state="translated">&lt;code&gt;SubjectAltName&lt;/code&gt; 拡張機能のASN.1定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0669e573aa756da1edc3404f2ca12e839dcd44e2" translate="yes" xml:space="preserve">
          <source>The AccessControlContext of the thread that created the instance of URLClassLoader will be used when subsequently loading classes and resources.</source>
          <target state="translated">URLClassLoader のインスタンスを作成したスレッドの AccessControlContext は、その後にクラスやリソースをロードする際に使用されます。</target>
        </trans-unit>
        <trans-unit id="b36f05d0d881d326a4ca7052f41c11e7cb29b4d8" translate="yes" xml:space="preserve">
          <source>The AccessController class is used for access control operations and decisions.</source>
          <target state="translated">アクセス制御の操作や判断にはAccessControllerクラスを使用します。</target>
        </trans-unit>
        <trans-unit id="e44ca12442a1e7b0c2ea9c89fdb764999e8954ae" translate="yes" xml:space="preserve">
          <source>The AccessibleObject class is the base class for Field, Method and Constructor objects.</source>
          <target state="translated">AccessibleObject クラスは、Field、Method、Constructor オブジェクトの基底クラスです。</target>
        </trans-unit>
        <trans-unit id="6a4566430ddc25f7244284392e568dac22b82186" translate="yes" xml:space="preserve">
          <source>The AccessibleObject class is the base class for Field, Method and Constructor objects. It provides the ability to flag a reflected object as suppressing default Java language access control checks when it is used. The access checks--for public, default (package) access, protected, and private members--are performed when Fields, Methods or Constructors are used to set or get fields, to invoke methods, or to create and initialize new instances of classes, respectively.</source>
          <target state="translated">AccessibleObjectクラスは、Field、Method、Constructorオブジェクトの基底クラスです。これは、反映されたオブジェクトが使用されたときに、デフォルトのJava言語のアクセス制御チェックを抑制するようにフラグを立てる機能を提供します。アクセス・チェックは、public、default (package)アクセス、protected、private の各メンバに対して、フィールド、メソッド、コンストラクタが、フィールドの設定や取得、メソッドの呼び出し、クラスの新しいインスタンスの作成や初期化にそれぞれ使用されたときに実行されます。</target>
        </trans-unit>
        <trans-unit id="6784e3abc090fab94e5244fcbe90ade6d9424123" translate="yes" xml:space="preserve">
          <source>The AllPermission is a permission that implies all other permissions.</source>
          <target state="translated">AllPermissionは、他のすべてのパーミッションを暗示するパーミッションです。</target>
        </trans-unit>
        <trans-unit id="e40e5d487b331e1f7f4c2477322a84662ea1dcde" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming</source>
          <target state="translated">コンピュータ・プログラミングの技術</target>
        </trans-unit>
        <trans-unit id="3e916cc17dff2d73e810c4085e8846b18e562a3e" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming,</source>
          <target state="translated">コンピュータ・プログラミングの芸術。</target>
        </trans-unit>
        <trans-unit id="d69bacd54b669ff7d878e60414c2d1f8611ca3a2" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming, Volume 2</source>
          <target state="translated">コンピュータ・プログラミングの技術 第2巻</target>
        </trans-unit>
        <trans-unit id="545bef1b9e1299301bb2907b1e213bfe088b7b67" translate="yes" xml:space="preserve">
          <source>The Attribute with attrID that was previous in this attribute set; null if no such attribute existed.</source>
          <target state="translated">この属性セットの前にあった attrID を持つ Attribute;そのような属性が存在しない場合は null。</target>
        </trans-unit>
        <trans-unit id="86989bf0d4a1d404f5eef67b394b9e8347a4cb82" translate="yes" xml:space="preserve">
          <source>The Attribute with the same ID as attr that was previous in this attribute set; null if no such attribute existed.</source>
          <target state="translated">この属性セットの前にあったattrと同じIDを持つ属性。</target>
        </trans-unit>
        <trans-unit id="188be4b00e3695b200467797aef29ec1a27bdb7b" translate="yes" xml:space="preserve">
          <source>The Attribute with the same ID as attrID that was previous in the attribute set; null if no such attribute existed.</source>
          <target state="translated">属性セットの前にあったattrIDと同じIDを持つ属性。</target>
        </trans-unit>
        <trans-unit id="17831de708d75ed43f9af6c62286f3a3d590fbe3" translate="yes" xml:space="preserve">
          <source>The Attributes class maps Manifest attribute names to associated string values.</source>
          <target state="translated">Attributes クラスは、マニフェスト属性名を関連付けられた文字列値にマッピングします。</target>
        </trans-unit>
        <trans-unit id="11106864e8cece63f4df274160f30c89327ce115" translate="yes" xml:space="preserve">
          <source>The Attributes class maps Manifest attribute names to associated string values. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values.</source>
          <target state="translated">属性クラスは、マニフェスト属性名を関連する文字列値にマッピングします。有効な属性名は大文字小文字を区別せず、[0-9a-zA-Z_-]のセットのASCII文字に制限され、長さは70文字を超えることはできません。属性値は任意の文字を含むことができ、出力ストリームに書き込まれる際にはUTF8エンコードされます。有効な属性名と値の詳細については、JAR ファイル仕様書を参照してください。</target>
        </trans-unit>
        <trans-unit id="5b1b32f55e754aebc8c66e80e5a265f6ce9b4d29" translate="yes" xml:space="preserve">
          <source>The Attributes.Name class represents an attribute name stored in this Map.</source>
          <target state="translated">Attributes.Name クラスは、このマップに格納されている属性名を表します。</target>
        </trans-unit>
        <trans-unit id="130d29f5e1935938287de918b31d59eac532adc8" translate="yes" xml:space="preserve">
          <source>The Attributes.Name class represents an attribute name stored in this Map. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values.</source>
          <target state="translated">Attributes.Name クラスは、このマップに格納されている属性名を表します。有効な属性名は大文字小文字を区別せず、[0-9a-zA-Z_-]セットの ASCII 文字に制限されます。属性値には任意の文字を含めることができ、出力ストリームに書き込まれると UTF8 エンコードされます。有効な属性名と値の詳細については、JAR ファイル仕様書を参照してください。</target>
        </trans-unit>
        <trans-unit id="933c13e97de653f311c0095da4356feb1ef9aa07" translate="yes" xml:space="preserve">
          <source>The BIDI_EMBEDDING attribute in the text, if present, represents embedding level information. Negative values from -1 to -62 indicate overrides at the absolute value of the level. Positive values from 1 to 62 indicate embeddings. Where values are zero or not defined, the base embedding level as determined by the base direction is assumed.</source>
          <target state="translated">テキスト内の BIDI_EMBEDDING 属性が存在する場合、埋め込みレベル情報を表します。1から-62までの負の値は、レベルの絶対値でのオーバーライドを示す。1から62までの正の値は、エンベッディングを示す。値がゼロであるか定義されていない場合には、ベース方向によって決定されるベース埋め込みレベルが想定される。</target>
        </trans-unit>
        <trans-unit id="479b03243c34870565e01fcb4d8b7558405fd430" translate="yes" xml:space="preserve">
          <source>The Base64 padding character &lt;code&gt;'='&lt;/code&gt; is accepted and interpreted as the end of the encoded byte data, but is not required. So if the final unit of the encoded byte data only has two or three Base64 characters (without the corresponding padding character(s) padded), they are decoded as if followed by padding character(s). If there is a padding character present in the final unit, the correct number of padding character(s) must be present, otherwise &lt;code&gt;IllegalArgumentException&lt;/code&gt; ( &lt;code&gt;IOException&lt;/code&gt; when reading from a Base64 stream) is thrown during decoding.</source>
          <target state="translated">Base64パディング文字 &lt;code&gt;'='&lt;/code&gt; は受け入れられ、エンコードされたバイトデータの終わりとして解釈されますが、必須ではありません。したがって、エンコードされたバイトデータの最後のユニットに2つまたは3つのBase64文字のみが含まれている場合（対応する埋め込み文字が埋め込まれていない場合）、それらは、埋め込み文字が続くかのようにデコードされます。最後のユニットにパディング文字が存在する場合、正しい数のパディング文字が存在する必要があります。それ以外の場合は、デコード中に &lt;code&gt;IllegalArgumentException&lt;/code&gt; （Base64ストリームから読み取る &lt;code&gt;IOException&lt;/code&gt; ）がスローされます。</target>
        </trans-unit>
        <trans-unit id="7f2fa42fffaffc455185b2641418acb565381be2" translate="yes" xml:space="preserve">
          <source>The BasicPermission class extends the Permission class, and can be used as the base class for permissions that want to follow the same naming convention as BasicPermission.</source>
          <target state="translated">BasicPermissionクラスはPermissionクラスを拡張したもので、BasicPermissionと同じ命名規則に従いたいパーミッションの基底クラスとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="d8109724094de0721a57a12d33075bebc3a6c1d9" translate="yes" xml:space="preserve">
          <source>The BasicReason enumerates the potential reasons that a certification path of any type may be invalid.</source>
          <target state="translated">BasicReason は、任意のタイプの認証パスが無効である可能性がある潜在的な理由を列挙します。</target>
        </trans-unit>
        <trans-unit id="7f2f07330207c79bdf9b8035cdfc8c33b0b86b6f" translate="yes" xml:space="preserve">
          <source>The BeanContext acts a logical hierarchical container for JavaBeans.</source>
          <target state="translated">BeanContextは、JavaBeansの論理階層コンテナとして動作します。</target>
        </trans-unit>
        <trans-unit id="db9f214e6794613d1af4a4bd16aca364a324671d" translate="yes" xml:space="preserve">
          <source>The BeanContextServices interface provides a mechanism for a BeanContext to expose generic &quot;services&quot; to the BeanContextChild objects within.</source>
          <target state="translated">BeanContextServicesインタフェースは,BeanContext内のBeanContextChildオブジェクトに汎用的な「サービス」を公開するためのBeanContextのメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="61f473874cda4877ad49e4b4e18b2669d648bcfa" translate="yes" xml:space="preserve">
          <source>The BigInteger constant one.</source>
          <target state="translated">BigIntegerの定数1。</target>
        </trans-unit>
        <trans-unit id="4fe20da433bea836e2620a8e5bd24465caa34b0d" translate="yes" xml:space="preserve">
          <source>The BigInteger constant ten.</source>
          <target state="translated">BigInteger定数10。</target>
        </trans-unit>
        <trans-unit id="eaa19daee6ceb68fa207da723944fc65078e9b5c" translate="yes" xml:space="preserve">
          <source>The BigInteger constant zero.</source>
          <target state="translated">BigIntegerの定数ゼロ。</target>
        </trans-unit>
        <trans-unit id="f2abfa8bc11f1cc0906af68cb43302c5e56e7dbc" translate="yes" xml:space="preserve">
          <source>The Boolean class wraps a value of the primitive type &lt;code&gt;boolean&lt;/code&gt; in an object.</source>
          <target state="translated">Booleanクラスは、プリミティブ型 &lt;code&gt;boolean&lt;/code&gt; の値をオブジェクトにラップします。</target>
        </trans-unit>
        <trans-unit id="d66eb41900b1a53b5e15c061f84c26f96aec8f20" translate="yes" xml:space="preserve">
          <source>The Boolean class wraps a value of the primitive type &lt;code&gt;boolean&lt;/code&gt; in an object. An object of type &lt;code&gt;Boolean&lt;/code&gt; contains a single field whose type is &lt;code&gt;boolean&lt;/code&gt;.</source>
          <target state="translated">Booleanクラスは、プリミティブ型 &lt;code&gt;boolean&lt;/code&gt; の値をオブジェクトにラップします。型のオブジェクト &lt;code&gt;Boolean&lt;/code&gt; 型がある単一のフィールドが含ま &lt;code&gt;boolean&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="730ba74f50d3f28436fa29f532e375e6c0695ab2" translate="yes" xml:space="preserve">
          <source>The CPU time provided by this interface has nanosecond precision but not necessarily nanosecond accuracy.</source>
          <target state="translated">このインタフェースが提供するCPU時間は、ナノ秒の精度を有するが、必ずしもナノ秒の精度を有するとは限らない。</target>
        </trans-unit>
        <trans-unit id="e8f7f2f7ff227a32e7a5531eecf91cf56365cd7f" translate="yes" xml:space="preserve">
          <source>The CRL or OCSP response cannot be obtained because of a network error.</source>
          <target state="translated">ネットワーク・エラーのため、CRL または OCSP 応答を取得できません。</target>
        </trans-unit>
        <trans-unit id="b4d351c3db241b4d379234c7ac2cb5765fab41d2" translate="yes" xml:space="preserve">
          <source>The CRLReason enumeration specifies the reason that a certificate is revoked, as defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt; RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.</source>
          <target state="translated">CRLReason列挙は、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280：Internet X.509 Public Key Infrastructure Certificate and CRL Profileで&lt;/a&gt;定義されているように、証明書が取り消される理由を指定します。</target>
        </trans-unit>
        <trans-unit id="33f1a9e451f535334439b331e5952fb5eceaa417" translate="yes" xml:space="preserve">
          <source>The Character Encoding is not supported.</source>
          <target state="translated">文字エンコードには対応していません。</target>
        </trans-unit>
        <trans-unit id="5a47ec8afb6ab11bcf60e2a316aaa05ee5d6f88e" translate="yes" xml:space="preserve">
          <source>The Class Loader Repository used by the given MBeanServer.</source>
          <target state="translated">指定されたMBeanServerが使用するクラス・ローダ・リポジトリ。</target>
        </trans-unit>
        <trans-unit id="004f0206b3d3d849c825f918d9b68ef429b3b940" translate="yes" xml:space="preserve">
          <source>The Class object for the bean's customizer. This may be null if the bean doesn't have a customizer.</source>
          <target state="translated">ビーンのカスタマイザのクラスオブジェクト。ビーンがカスタマイザを持っていない場合、これはnullになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="537754527d3370203382836d7cb800a91b8ee729" translate="yes" xml:space="preserve">
          <source>The Class object for the bean.</source>
          <target state="translated">ビーンのクラスオブジェクト。</target>
        </trans-unit>
        <trans-unit id="df1481dabe3eac178ff1405ee9b4259ce1e6e7a5" translate="yes" xml:space="preserve">
          <source>The Class object for the target interface that will get invoked when the event is fired.</source>
          <target state="translated">イベントが発生したときに呼び出されるターゲット・インターフェースの Class オブジェクト。</target>
        </trans-unit>
        <trans-unit id="7eac5b9958cd8cfff4271334618aee040eeba806" translate="yes" xml:space="preserve">
          <source>The Class object representing the primitive type boolean.</source>
          <target state="translated">プリミティブ型のbooleanを表すクラスオブジェクト。</target>
        </trans-unit>
        <trans-unit id="d40630063d92d99c85238befefd749074cac2197" translate="yes" xml:space="preserve">
          <source>The ClassLoader used for that MBean. If &lt;var&gt;l&lt;/var&gt; is the MBean's actual ClassLoader, and &lt;var&gt;r&lt;/var&gt; is the returned value, then either:</source>
          <target state="translated">そのMBeanに使用されるClassLoader。場合 &lt;var&gt;l&lt;/var&gt; は MBeanの実際のClassLoaderあり、そして &lt;var&gt;r&lt;/var&gt; は、その後、いずれかで返される値です。</target>
        </trans-unit>
        <trans-unit id="66051b6d430a30f6ea7fd611d6e0df14e41ad561" translate="yes" xml:space="preserve">
          <source>The ClassLoaderRepository for this MBeanServer.</source>
          <target state="translated">この MBeanServer の ClassLoaderRepository。</target>
        </trans-unit>
        <trans-unit id="2fd3574d8c10f0ef7d993b723f5632e342d0a6ee" translate="yes" xml:space="preserve">
          <source>The CodeBase and Signedby components of the triplet name/value pairs are optional. If they are not present, then any any codebase will match, and any signer (including unsigned code) will match. For Example,</source>
          <target state="translated">トリプレット名/値のペアの CodeBase と Signedby コンポーネントはオプションです。これらが存在しない場合は、任意のコードベースがマッチし、任意の署名者 (符号なしコードを含む)がマッチします。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="2ced5dc3156a8a4a80da644c296c6141e4689e3c" translate="yes" xml:space="preserve">
          <source>The DTD specification is provided as Appendix A to the Java Logging APIs specification.</source>
          <target state="translated">DTD仕様は、Java Logging APIs仕様の付録Aとして提供されています。</target>
        </trans-unit>
        <trans-unit id="c016969447ee027a7d4e0c0671983d0d54d60bd4" translate="yes" xml:space="preserve">
          <source>The Descriptor fields contributed in this way by different annotations on the same program element must be consistent. That is, two different annotations, or two members of the same annotation, must not define a different value for the same Descriptor field. Fields from annotations on a getter method must also be consistent with fields from annotations on the corresponding setter method.</source>
          <target state="translated">このように、同じプログラム要素上の異なるアノテーションによって貢献されるDescriptorフィールドは、一貫していなければなりません。つまり、2つの異なるアノテーション、または同じアノテーションの2つのメンバが、同じDescriptorフィールドに対して異なる値を定義してはなりません。ゲッター・メソッド上のアノテーションからのフィールドもまた、対応するセッター・メソッド上のアノテーションからのフィールドと一致していなければなりません。</target>
        </trans-unit>
        <trans-unit id="6bee60701b79c62232ecee0abd5ca5f3df40a69c" translate="yes" xml:space="preserve">
          <source>The Descriptor resulting from these annotations will be merged with any Descriptor fields provided by the implementation, such as the &lt;a href=&quot;descriptor#immutableInfo&quot;&gt;&lt;code&gt;immutableInfo&lt;/code&gt;&lt;/a&gt; field for an MBean. The fields from the annotations must be consistent with these fields provided by the implementation.</source>
          <target state="translated">これらの注釈の結果である記述子は、MBeanの&lt;a href=&quot;descriptor#immutableInfo&quot;&gt; &lt;code&gt;immutableInfo&lt;/code&gt; &lt;/a&gt;フィールドなど、実装によって提供される記述子フィールドとマージされます。アノテーションのフィールドは、実装によって提供されるこれらのフィールドと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="c9d5aea86dc06f534995783c5eed783935bbadb9" translate="yes" xml:space="preserve">
          <source>The Directory Context</source>
          <target state="translated">ディレクトリのコンテキスト</target>
        </trans-unit>
        <trans-unit id="9467ddc0b1822e3f422eef8fbcd692138357cb1f" translate="yes" xml:space="preserve">
          <source>The ErrorManager's &quot;error&quot; method will be invoked if any errors occur while using this Handler.</source>
          <target state="translated">このハンドラーの使用中にエラーが発生した場合は、ErrorManager の &quot;error&quot; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4d4c7427ed03e2196382cf762ac3a454fd9aad30" translate="yes" xml:space="preserve">
          <source>The FeatureDescriptor class is the common baseclass for PropertyDescriptor, EventSetDescriptor, and MethodDescriptor, etc.</source>
          <target state="translated">FeatureDescriptorクラスは、PropertyDescriptor、EventSetDescriptor、MethodDescriptorなどの共通ベースクラスです。</target>
        </trans-unit>
        <trans-unit id="6e02d9b92b748aa46a1fe40c56191a70c2db37b1" translate="yes" xml:space="preserve">
          <source>The ForkJoinTask class is not usually directly subclassed. Instead, you subclass one of the abstract classes that support a particular style of fork/join processing, typically &lt;a href=&quot;recursiveaction&quot;&gt;&lt;code&gt;RecursiveAction&lt;/code&gt;&lt;/a&gt; for most computations that do not return results, &lt;a href=&quot;recursivetask&quot;&gt;&lt;code&gt;RecursiveTask&lt;/code&gt;&lt;/a&gt; for those that do, and &lt;a href=&quot;countedcompleter&quot;&gt;&lt;code&gt;CountedCompleter&lt;/code&gt;&lt;/a&gt; for those in which completed actions trigger other actions. Normally, a concrete ForkJoinTask subclass declares fields comprising its parameters, established in a constructor, and then defines a &lt;code&gt;compute&lt;/code&gt; method that somehow uses the control methods supplied by this base class.</source>
          <target state="translated">ForkJoinTaskクラスは通常、直接サブクラス化されていません。代わりに、フォークの特定のスタイルをサポートする抽象クラスのあなたサブクラス1は/処理し、一般的に参加&lt;a href=&quot;recursiveaction&quot;&gt; &lt;code&gt;RecursiveAction&lt;/code&gt; &lt;/a&gt;結果を返しません。ほとんどの計算のため、&lt;a href=&quot;recursivetask&quot;&gt; &lt;code&gt;RecursiveTask&lt;/code&gt; &lt;/a&gt;ないもののために、と&lt;a href=&quot;countedcompleter&quot;&gt; &lt;code&gt;CountedCompleter&lt;/code&gt; の&lt;/a&gt;アクションが他のアクションをトリガー完成したものをのために。通常、具象ForkJoinTaskサブクラスは、パラメーターで構成されるフィールドを宣言し、コンストラクターで確立してから、この基本クラスによって提供される制御メソッドを何らかの方法で使用 &lt;code&gt;compute&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="b623035f5596637c9505afc931878e7c86c5b5b2" translate="yes" xml:space="preserve">
          <source>The GCM specification states that &lt;code&gt;tLen&lt;/code&gt; may only have the values {128, 120, 112, 104, 96}, or {64, 32} for certain applications. Other values can be specified for this class, but not all CSP implementations will support them.</source>
          <target state="translated">GCM仕様では、特定の &lt;code&gt;tLen&lt;/code&gt; は、tLenの値は{ 128、120、112、104、96 }、または{ 64、32}のみである可能性があると規定されています。このクラスには他の値を指定できますが、すべてのCSP実装がそれらをサポートするわけではありません。</target>
        </trans-unit>
        <trans-unit id="21c0818ef96710144df08a551d7b266882d023aa" translate="yes" xml:space="preserve">
          <source>The GIF image writer plug-in guarantees lossless writing for images which meet the following requirements:</source>
          <target state="translated">GIF イメージライタープラグインは、以下の要件を満たす画像に対してロスレス書き込みを保証します。</target>
        </trans-unit>
        <trans-unit id="69631d7c8bd6040a091b247bf1496d5ed878fb6f" translate="yes" xml:space="preserve">
          <source>The GIF image writer plug-in supports setting output stream metadata from metadata supplied to the writer in either the native GIF stream metadata format  javax_imageio_gif_stream_1.0  or the standard metadata format  javax_imageio_1.0, and setting output image metadata from metadata supplied to the writer in either the native GIF image metadata format  javax_imageio_gif_image_1.0  or the standard metadata format javax_imageio_1.0. The mapping of standard metadata format to the GIF native stream and image metadata formats is given in the tables  here .</source>
          <target state="translated">GIF 画像書 き 出 し プ ラ グ イ ンは、 ラ イ タ ーに与え ら れた メ タ デー タ の出力ス ト リ ーム メ タ デー タ を、 ネイティブ GIF ス ト リ ーム メ タ デー タ 形式 javax_imageio_gif_stream_1.0 か標準 メ タ デー タ 形式 javax_imageio_1.0 のいずれかで設定 し 、 ラ イ タ ーに与え ら れた メ タ デー タ の出力画像 メ タ デー タ を、 ネイティブ GIF 画像 メ タ デー タ 形式 javax_imageio_gif_image_1.0 か標準 メ タ デー タ 形式 javax_imageio_1.0 のいずれかで設定す る こ と をサポー ト し てい ます。標準メタデータフォーマットと GIF ネイティブストリーム・画像メタデータフォーマットとのマッピングを以下の表に示します。</target>
        </trans-unit>
        <trans-unit id="5fe47dfc42c1004ae9afdedd5c749c38a37ee470" translate="yes" xml:space="preserve">
          <source>The GIF writer plug-in supports the creation of animated GIF images through the standard sequence writing methods defined in the &lt;code&gt;ImageWriter&lt;/code&gt; class.</source>
          <target state="translated">GIFライタープラグインは、 &lt;code&gt;ImageWriter&lt;/code&gt; クラスで定義された標準シーケンス書き込みメソッドによるアニメーションGIF画像の作成をサポートしています。</target>
        </trans-unit>
        <trans-unit id="7c0eb54612e1b91b3d550046715cc18734cac067" translate="yes" xml:space="preserve">
          <source>The Generated annotation is used to mark source code that has been generated.</source>
          <target state="translated">Generated アノテーションは、生成されたソース コードをマークするために使用されます。</target>
        </trans-unit>
        <trans-unit id="e14d8067e3c65f5d662592905874e96a639ba661" translate="yes" xml:space="preserve">
          <source>The Generated annotation is used to mark source code that has been generated. It can also be used to differentiate user written code from generated code in a single file. When used, the value element must have the name of the code generator. The recommended convention is to use the fully qualified name of the code generator in the value field .</source>
          <target state="translated">Generated アノテーションは、生成されたソース コードをマークするために使用します。また、単一のファイル内でユーザーが書いたコードと生成されたコードを区別するためにも使用できます。使用する場合、value 要素にはコード・ジェネレーターの名前を指定する必要があります。推奨される慣習は、値フィールドにコード・ジェネレーターの完全修飾名を使用することです。</target>
        </trans-unit>
        <trans-unit id="034f52c179ed2f285aff346a1a725164486ab642" translate="yes" xml:space="preserve">
          <source>The HTTP cookie management in java.net package looks like:</source>
          <target state="translated">java.netパッケージのHTTPクッキー管理は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7b3a512be37bd12625c3a8628efd22b37676aac1" translate="yes" xml:space="preserve">
          <source>The HTTP method (GET,POST,PUT,etc.).</source>
          <target state="translated">HTTPメソッド(GET,POST,PUTなど)。</target>
        </trans-unit>
        <trans-unit id="2d94af71e4f20cb6dbee51f81cf708d34fd43e9a" translate="yes" xml:space="preserve">
          <source>The HTTP protocol handler has a few settings that can be accessed through System Properties. This covers Proxy settings as well as  various other settings.</source>
          <target state="translated">HTTP プロトコルハンドラには、システムのプロパティからアクセスできるいくつかの設定があります。これは、プロキシの設定だけでなく、他の様々な設定をカバーしています。</target>
        </trans-unit>
        <trans-unit id="0965d22a7cf7456f138f50ade9b626d2ce1a8ce8" translate="yes" xml:space="preserve">
          <source>The HTTP response message.</source>
          <target state="translated">HTTP レスポンスメッセージです。</target>
        </trans-unit>
        <trans-unit id="76c37afd4ebfca43ecc7113a9e735aed8c4a4c59" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar has a different total of days in a year than Gregorian calendar, and the length of each month is based on the period of a complete revolution of the moon around the earth (as between successive new moons). Refer to the &lt;a href=&quot;hijrahchronology&quot;&gt;&lt;code&gt;HijrahChronology&lt;/code&gt;&lt;/a&gt; for details of supported variants.</source>
          <target state="translated">ヒジュラカレンダーの年間の合計日数はグレゴリオ暦とは異なります。各月の長さは、地球の周りの月が完全に公転する周期に基づいています（連続する新月の間など）。サポートされているバリアントの詳細については、&lt;a href=&quot;hijrahchronology&quot;&gt; &lt;code&gt;HijrahChronology&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3cbb0a5265ed2b32362a56646ea33dae11e8ddd1" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar is a lunar calendar supporting Islamic calendars.</source>
          <target state="translated">ヒジュラ暦は、イスラム暦をサポートする太陰暦です。</target>
        </trans-unit>
        <trans-unit id="5ef062b6d3746a7faa9fd4ff82681d5f88437d55" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar system has one era, 'AH', defined by &lt;a href=&quot;hijrahera&quot;&gt;&lt;code&gt;HijrahEra&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Hijrah暦システムには、&lt;a href=&quot;hijrahera&quot;&gt; &lt;code&gt;HijrahEra&lt;/code&gt; &lt;/a&gt;によって定義された 'AH'という1つの時代があります。</target>
        </trans-unit>
        <trans-unit id="e597c41e9fa5f54ee9b2548de5fc25d85b9400b7" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar system has only one era covering the proleptic years greater than zero.</source>
          <target state="translated">ヒジュラ暦のシステムでは、ゼロよりも大きいプロレプティックな年をカバーする時代が1つだけあります。</target>
        </trans-unit>
        <trans-unit id="8c7bf054691c4990879f32b517b7eb5c7c8f7c31" translate="yes" xml:space="preserve">
          <source>The Hijrah property resource is a set of properties that describe the calendar. The syntax is defined by &lt;code&gt;java.util.Properties#load(Reader)&lt;/code&gt;.</source>
          <target state="translated">Hijrahプロパティリソースは、カレンダーを説明する一連のプロパティです。構文は &lt;code&gt;java.util.Properties#load(Reader)&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="2d5f51089d0f9a89148d7f6f56fbc17a08c3c7dd" translate="yes" xml:space="preserve">
          <source>The HijrahChronology follows the rules of the Hijrah calendar system. The Hijrah calendar has several variants based on differences in when the new moon is determined to have occurred and where the observation is made. In some variants the length of each month is computed algorithmically from the astronomical data for the moon and earth and in others the length of the month is determined by an authorized sighting of the new moon. For the algorithmically based calendars the calendar can project into the future. For sighting based calendars only historical data from past sightings is available.</source>
          <target state="translated">ヒジュラークロノロジーは、ヒジュラー暦のルールに従います。ヒジュラ暦には、新月がいつ発生したか、どこで観測されたかの違いに基づいて、いくつかのバリエーションがあります。月と地球の天文学的なデータをもとに、月の長さをアルゴリズムで計算するものもあれば、新月の目撃情報をもとに月の長さを決定するものもあります。アルゴリズムに基づいたカレンダーでは、カレンダーは未来を予測することができます。目撃情報に基づいたカレンダーでは、過去の目撃情報から得られた過去のデータのみが利用可能です。</target>
        </trans-unit>
        <trans-unit id="b30101cf2f801668711691b72956c848b7ff79c7" translate="yes" xml:space="preserve">
          <source>The IANA charset registry does change over time, and so the canonical name and the aliases of a particular charset may also change over time. To ensure compatibility it is recommended that no alias ever be removed from a charset, and that if the canonical name of a charset is changed then its previous canonical name be made into an alias.</source>
          <target state="translated">IANA の charset レジストリは時間の経過とともに変化するので、特定の charset の正規名とエイリアスも時間の経過とともに変化する可能性があります。互換性を確保するために、エイリアスが文字セットから削除されることはなく、文字セットの正規名が変更された場合、以前の正規名をエイリアスにすることが推奨されています。</target>
        </trans-unit>
        <trans-unit id="a09a7c491e42ec0ccd6087606b59441de1f0715c" translate="yes" xml:space="preserve">
          <source>The ID is minor variation to the standard ISO-8601 formatted string for the offset. There are three formats:</source>
          <target state="translated">ID は、オフセットのための標準 ISO-8601 フォーマットの文字列に対するマイナーなバリエーションである。フォーマットは3つあります。</target>
        </trans-unit>
        <trans-unit id="d29cb73c296776b288211b97e00b807749e9b2d0" translate="yes" xml:space="preserve">
          <source>The ID is unique within the system. There are three types of ID.</source>
          <target state="translated">IDはシステム内で一意です。IDには3種類あります。</target>
        </trans-unit>
        <trans-unit id="ae854760d3f4276cd755511e493cc5a51b830e12" translate="yes" xml:space="preserve">
          <source>The ID of the listener to which the notification is targeted.</source>
          <target state="translated">通知の対象となるリスナーのID。</target>
        </trans-unit>
        <trans-unit id="61fd4732cbe2e01752b6c8cf6a30f14f6ab40119" translate="yes" xml:space="preserve">
          <source>The ID of the returned offset will be normalized to one of the formats described by &lt;a href=&quot;zoneoffset#getId--&quot;&gt;&lt;code&gt;getId()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返されるオフセットのIDは、&lt;a href=&quot;zoneoffset#getId--&quot;&gt; &lt;code&gt;getId()&lt;/code&gt; で&lt;/a&gt;記述された形式のいずれかに正規化されます。</target>
        </trans-unit>
        <trans-unit id="7c8cb46fd48547fa630e300fcba11829a98c4159" translate="yes" xml:space="preserve">
          <source>The ID of the thread that owns the object that the thread is blocked.</source>
          <target state="translated">スレッドがブロックされているオブジェクトを所有しているスレッドのID。</target>
        </trans-unit>
        <trans-unit id="fd6d60e60fa86ec5a78289385fee6d0f6bc1bdd6" translate="yes" xml:space="preserve">
          <source>The ID uniquely identifies the &lt;code&gt;Chronology&lt;/code&gt;. It can be used to lookup the &lt;code&gt;Chronology&lt;/code&gt; using &lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt;&lt;code&gt;Chronology.of(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">IDは、 &lt;code&gt;Chronology&lt;/code&gt; 一意に識別します。&lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt; &lt;code&gt;Chronology.of(String)&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;Chronology&lt;/code&gt; を検索するために使用できます。</target>
        </trans-unit>
        <trans-unit id="1cafcec37d18d1f40c55857c337e84b388be6a4b" translate="yes" xml:space="preserve">
          <source>The ID uniquely identifies the &lt;code&gt;Chronology&lt;/code&gt;. It can be used to lookup the &lt;code&gt;Chronology&lt;/code&gt; using &lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt;&lt;code&gt;of(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">IDは、 &lt;code&gt;Chronology&lt;/code&gt; 一意に識別します。&lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt; &lt;code&gt;of(String)&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;Chronology&lt;/code&gt; を検索するために使用できます。</target>
        </trans-unit>
        <trans-unit id="eec3d7c57ef5447e9bdebab954ee90700a2a652d" translate="yes" xml:space="preserve">
          <source>The IP address of the remote end of this socket.</source>
          <target state="translated">このソケットのリモート側のIPアドレス。</target>
        </trans-unit>
        <trans-unit id="510660eb55dda01e452a05872bd22f9cfe584483" translate="yes" xml:space="preserve">
          <source>The IPv6-address is a literal IPv6 address as described above. The</source>
          <target state="translated">このIPv6アドレスは、上述したようにリテラルIPv6アドレスである。であることを示しています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
