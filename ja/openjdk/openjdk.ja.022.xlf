<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="0c1f571a8385bf4587f3c1593dd76145435ed7d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the attribute value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -属性値</target>
        </trans-unit>
        <trans-unit id="1d9810e40c9fdcec593b22761c14c9b21d8f5938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the attribute's value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -属性の値</target>
        </trans-unit>
        <trans-unit id="515de896303833bb62cfd4171e08bd093c2d8d10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the completion value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -完了値</target>
        </trans-unit>
        <trans-unit id="49e9c9b132ec8586ed1a93e57ce290bc4f1de740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the composite data value to be added as a new row to this &lt;code&gt;TabularData&lt;/code&gt; instance; must be of the same composite type as this instance's row type; must not be null.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -この新しい行として追加される複合データ値 &lt;code&gt;TabularData&lt;/code&gt; インスタンス。このインスタンスの行タイプと同じ複合タイプでなければなりません。nullであってはなりません。</target>
        </trans-unit>
        <trans-unit id="c7769b148bbdd177156b481c53ac9c47a1985103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the composite data value whose index in this &lt;code&gt;TabularData&lt;/code&gt; instance is to be calculated; must be of the same composite type as this instance's row type; must not be null.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -インデックスがこの複合データ値 &lt;code&gt;TabularData&lt;/code&gt; インスタンス算出します。このインスタンスの行タイプと同じ複合タイプでなければなりません。nullであってはなりません。</target>
        </trans-unit>
        <trans-unit id="e446b5fcf5496c0a4b156c5f220e1652df29b55d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the data object to be bound. This may not be null.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -データオブジェクトがバインドされます。これはnullにはできません。</target>
        </trans-unit>
        <trans-unit id="371ac03ca95159ef25aad5c27b802ac204526b20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the default value for the returned future</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -返されるフューチャーのデフォルト値</target>
        </trans-unit>
        <trans-unit id="c110d3ee85116e2019cb9402b815a29588c8cc28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the desired new value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -目的の新しい値</target>
        </trans-unit>
        <trans-unit id="163d9bba7246259009d79f65318667ea96b7335a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the extension value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -拡張値</target>
        </trans-unit>
        <trans-unit id="590697b5098ba32bb5a5ee24995ca974136ca840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the field value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -フィールド値</target>
        </trans-unit>
        <trans-unit id="4b9070b185d962427c3e53eaa2680c9e84c7d599" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the function argument</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -関数の引数</target>
        </trans-unit>
        <trans-unit id="db93ca3a27e0ec2e0671e7d6b4e48d56f9947d50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the given first day of the week.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -与えられた週の最初の日。</target>
        </trans-unit>
        <trans-unit id="d9e573cb2bc9c0ca88cb0f266dacd60d23d5b2ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the given minimal days required in the first week of the year.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -その年の最初の週に必要な特定の最小日数。</target>
        </trans-unit>
        <trans-unit id="4c84215e84a20387129e9b05b1ba26301ea9a6b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the given time zone.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -指定されたタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="62ccc5c0104f10e955c295c8f321cefa1d83968d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the initial control value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -初期制御値</target>
        </trans-unit>
        <trans-unit id="61ad56ef2378bf1c2427a8a54e5462f0a3e5febb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the input argument</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -入力引数</target>
        </trans-unit>
        <trans-unit id="20cd17184be48cee18f4c30dd8ffa7e22d241515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the input value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -入力値</target>
        </trans-unit>
        <trans-unit id="c3bea0e98f0c1fd6affbc51e1cab4f06ddc6fb52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the long value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -long値</target>
        </trans-unit>
        <trans-unit id="bf70e8fac3906e0cc423daf1a11253e120231ef4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the new value for the field of &lt;code&gt;obj&lt;/code&gt; being modified</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -の新しいフィールド値 &lt;code&gt;obj&lt;/code&gt; が変更されています</target>
        </trans-unit>
        <trans-unit id="284a49ba37b2f5db10a865ad096f696137d2176e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the new value of the attribute</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -属性の新しい値</target>
        </trans-unit>
        <trans-unit id="0c5f0162df8d08742db430190f57ae961a06bbbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the new value of the indexed component</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -インデックスのコンポーネントの新しい値</target>
        </trans-unit>
        <trans-unit id="b55a042bfd8112f3952c6b00366dcbbe75db6d7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -既存の値またはNULL値がキーに関連することが、キーに関連付けられていない場合、非ヌル値がキー又は、関連付けられた既存の値とマージします</target>
        </trans-unit>
        <trans-unit id="f6862ddf899da9e72553be6f1f5dc0dfce1cba81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the parameter of the socket option</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -ソケットオプションのパラメータ</target>
        </trans-unit>
        <trans-unit id="bb22a4b57cffcfdb2583e7d00200961381221a5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the parameter value.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -パラメータ値。</target>
        </trans-unit>
        <trans-unit id="fd814649f925e2f77d9e2cee99d689a19c5248f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the possibly-null value to describe</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -nullの可能性がある、説明する値</target>
        </trans-unit>
        <trans-unit id="fe3f5fe1b9a17d3a2a46356a7864f4dc466ad7de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the result value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -結果の値</target>
        </trans-unit>
        <trans-unit id="efbec46ea00aec4f00a4b9796a8351068baab967" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the result value for this task</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -このタスクの結果の値</target>
        </trans-unit>
        <trans-unit id="045ad5b225eb3b1ce8995b6083b0945ec72eb24a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the row value whose presence in this &lt;code&gt;TabularData&lt;/code&gt; instance is to be tested.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -この中にその存在が行値 &lt;code&gt;TabularData&lt;/code&gt; インスタンスは、試験されるべきです。</target>
        </trans-unit>
        <trans-unit id="0f1be06e01a60b0d70deb4a497f5bffcd2f6f7a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the second input argument</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -2番目の入力引数</target>
        </trans-unit>
        <trans-unit id="ae3f6c134bd14b999d26950c7b01924156403456" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the text of the completion</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -補完のテキスト</target>
        </trans-unit>
        <trans-unit id="b5d1f6c3a0822e905fa363b4c049e0e8a897e212" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -値</target>
        </trans-unit>
        <trans-unit id="b98f6c81243fa2d5f680fd0b251449e4721b7138" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value associated with it.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -関連付けられている値。</target>
        </trans-unit>
        <trans-unit id="57a2140ec4eb81bb38840c77e9c19f28542a2199" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value associated with the key.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -キーに関連付けられた値。</target>
        </trans-unit>
        <trans-unit id="dbb7d4337f855ef906e7ece6e5a0ab0905ef50ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value corresponding to &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - &lt;code&gt;key&lt;/code&gt; 対応する値。</target>
        </trans-unit>
        <trans-unit id="358b5f3bc9b9445ef17d692c8573065d6f79914b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value of the &lt;code&gt;Boolean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -の値 &lt;code&gt;Boolean&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6a4f90be50ebbb860a8ddbd407099871703cf96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value of the &lt;code&gt;Calendar field&lt;/code&gt;, such as &lt;a href=&quot;../calendar#MONDAY&quot;&gt;&lt;code&gt;Calendar.MONDAY&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -の値 &lt;code&gt;Calendar field&lt;/code&gt; 、など&lt;a href=&quot;../calendar#MONDAY&quot;&gt; &lt;code&gt;Calendar.MONDAY&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6a712786e6ffc2a05cd9db05483dfac012bf9f85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value of the attribute</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -属性の値</target>
        </trans-unit>
        <trans-unit id="74724907141012364c3a7585a892a58b21559024" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value of the attribute; may be null</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -属性の値。nullの可能性があります</target>
        </trans-unit>
        <trans-unit id="cbfa528d58dd7756aaa0ab451fd3ae87393c61d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value of the system property.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -システムプロパティの値。</target>
        </trans-unit>
        <trans-unit id="eb89c92d5c6c529d93b3b0c58a19165acb20cbd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value of this expression</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -この式の値</target>
        </trans-unit>
        <trans-unit id="a9d354c3de1e8f16e941837254a310144b3fbc71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value represented by this entry</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -このエントリが表す値</target>
        </trans-unit>
        <trans-unit id="0c2b90c99d98d8c110d4b7a9e66f258af1c4d409" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value since the epoch (1970-01-01T00:00:00Z); can be negative</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -エポック（1970-01-01T00：00：00Z）以降の値; 負になることができます</target>
        </trans-unit>
        <trans-unit id="196310f74f82ea79311af0449a4c05fbce29857d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be associated with the specified key</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -指定されたキーに関連付けられる値</target>
        </trans-unit>
        <trans-unit id="9e06bcaff7334e630f3c56407e1b67dd3d06075c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be checked</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -値をチェックします</target>
        </trans-unit>
        <trans-unit id="cf5fa45f4dd91bbc8e56af05f9c99013138c194f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be present</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -存在する値</target>
        </trans-unit>
        <trans-unit id="dc8801acd722207efd3a1a0ac67c1c0da22ec626" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be present, which must be non-null</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -存在する値。null以外にする必要があります</target>
        </trans-unit>
        <trans-unit id="36a547e67f04761b828647b8c9ec9f45b0c661f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be represented by the &lt;code&gt;Byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - &lt;code&gt;Byte&lt;/code&gt; によって表される値。</target>
        </trans-unit>
        <trans-unit id="d0fb4603c028edf5b42a3db4da2dd13b471f0c1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be represented by the &lt;code&gt;Character&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - &lt;code&gt;Character&lt;/code&gt; オブジェクトによって表される値。</target>
        </trans-unit>
        <trans-unit id="30ee1077d83b800da48e19d5e26215b4313c7ac2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be represented by the &lt;code&gt;Double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - &lt;code&gt;Double&lt;/code&gt; によって表される値。</target>
        </trans-unit>
        <trans-unit id="6ba685e6111ac5b9a280c3e4c8c3838f1e878302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be represented by the &lt;code&gt;Float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - &lt;code&gt;Float&lt;/code&gt; によって表される値。</target>
        </trans-unit>
        <trans-unit id="8452e9c7c270a71e1538eb7ce4d893c3d3dcfd5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be represented by the &lt;code&gt;Integer&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - &lt;code&gt;Integer&lt;/code&gt; オブジェクトによって表される値。</target>
        </trans-unit>
        <trans-unit id="36027f9442aaa7b599125ff0bb47cec9b2e9351b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be represented by the &lt;code&gt;Long&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - &lt;code&gt;Long&lt;/code&gt; オブジェクトによって表される値。</target>
        </trans-unit>
        <trans-unit id="b8d38b28d8de056c6df9f5df5344a941d7b5fa1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be represented by the &lt;code&gt;Short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - &lt;code&gt;Short&lt;/code&gt; で表される値。</target>
        </trans-unit>
        <trans-unit id="5d32239aa71f2bdc7dae95a2de30cd0a6d9bd694" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be set for the given calendar field.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -指定されたカレンダーフィールドに設定される値。</target>
        </trans-unit>
        <trans-unit id="cd6b91bc1b4509b8b9e4346f4ae195f43972f82a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be stored in the current thread's copy of this thread-local.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -このスレッドローカルの現在のスレッドのコピーに格納される値。</target>
        </trans-unit>
        <trans-unit id="9ccd584c4b5b8e6e680771b190f9e7afd9288743" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to be tested.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -値をテストします。</target>
        </trans-unit>
        <trans-unit id="33e9d595a91c6de03cb3158b789f24ed3b86b9c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to check</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -チェックする値</target>
        </trans-unit>
        <trans-unit id="90641a636958cc6fb97809e58bdfb6bc26fd9f9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to default the field to</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -フィールドをデフォルトにする値</target>
        </trans-unit>
        <trans-unit id="917603fa7dd42dd6d6cd333ef3a87240c1501d15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to hash</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -ハッシュに値</target>
        </trans-unit>
        <trans-unit id="524e7dcfd89a94ea459e0f79bd3236d555e511e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to return</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -返す値</target>
        </trans-unit>
        <trans-unit id="e334849645cb3da82a840f992f0d8018589ddcfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to use if absent</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -不在の場合に使用する値</target>
        </trans-unit>
        <trans-unit id="2fe4e1ad275bb2ae8e9b182e5bf831af775f251d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to which the returned map maps &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -返されるマップは、マップする値 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aea1f727ae144906ee3c8d251401fa4633b038af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to which the specified controller is changed (0 to 127)</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -指定されたコントローラーが変更される値（0から127）</target>
        </trans-unit>
        <trans-unit id="6782a21e98ebca4863d4e9be85ed3425208f594a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value whose presence in this map is to be tested</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -このマップでの存在がテストされる値</target>
        </trans-unit>
        <trans-unit id="1e0c5c8463b55f55986fc6e971fa68bb0b5c7a2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value, in milliseconds, since the epoch (1970-01-01T00:00:00Z); can be negative</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -エポック（1970-01-01T00：00：00Z）からのミリ秒の値、、。負になることができます</target>
        </trans-unit>
        <trans-unit id="d5d8f8e77aca1341fb21d9cdfee713e02668661e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -値。</target>
        </trans-unit>
        <trans-unit id="57cfb1aca1f593422f6d99cb2132b694fc358ccb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - true to enable finalization on exit, false to disable</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -終了時のファイナライズを有効にする場合はtrue、無効にする場合はfalse</target>
        </trans-unit>
        <trans-unit id="9e139db7eef723de29d56e7b5d414a17b3ad2fff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - value expected to be associated with the specified key</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -指定されたキーに関連付けられることが期待される値</target>
        </trans-unit>
        <trans-unit id="75f95eae30bb21e9fce50ab1a095f83e3d16ad2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - value of the role (if problem when setting the role)</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -ロールの値（ロールの設定時に問題が発生した場合）</target>
        </trans-unit>
        <trans-unit id="8e5e8d149818e2f5334bcf30d4a2e95d7a8bb5e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - value to be associated with the specified key</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -指定されたキーに関連付けられる値</target>
        </trans-unit>
        <trans-unit id="419fbd88b66bd5e794f1520b55457d3d72354c4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - value to be associated with the specified key.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -指定されたキーに関連付けられる値。</target>
        </trans-unit>
        <trans-unit id="c1aabdf33c7effff90f59d67d2a682a602f903de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - value to set the selected bits to</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -選択したビットに設定する値</target>
        </trans-unit>
        <trans-unit id="0a378ed96bf3e0f9fbe6b8b581c551b55a3901b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - value whose presence in this hashtable is to be tested</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -その存在がこのハッシュテーブルの値をテストします</target>
        </trans-unit>
        <trans-unit id="f84d86e6c800cf1f674ea1247431e8685d37a643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - value whose presence in this map is to be tested</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -このマップでの存在がテストされる値</target>
        </trans-unit>
        <trans-unit id="f2154f7a31e4566cd1fa85327df346588583307b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - value whose string form is to be associated with key.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -文字列形式の値がキーに関連付けられていることがあります。</target>
        </trans-unit>
        <trans-unit id="6c1ba205c0d96357255d016a75928d67482d97d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; is the numeric representation of the &lt;code&gt;field&lt;/code&gt; value. For example, if &lt;code&gt;field&lt;/code&gt; is &lt;a href=&quot;../calendar#DAY_OF_WEEK&quot;&gt;&lt;code&gt;Calendar.DAY_OF_WEEK&lt;/code&gt;&lt;/a&gt;, the valid values are &lt;a href=&quot;../calendar#SUNDAY&quot;&gt;&lt;code&gt;Calendar.SUNDAY&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../calendar#SATURDAY&quot;&gt;&lt;code&gt;Calendar.SATURDAY&lt;/code&gt;&lt;/a&gt; (inclusive).</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; は &lt;code&gt;field&lt;/code&gt; 値の数値表現です。たとえば、 &lt;code&gt;field&lt;/code&gt; が&lt;a href=&quot;../calendar#DAY_OF_WEEK&quot;&gt; &lt;code&gt;Calendar.DAY_OF_WEEK&lt;/code&gt; の&lt;/a&gt;場合、有効な値は&lt;a href=&quot;../calendar#SUNDAY&quot;&gt; &lt;code&gt;Calendar.SUNDAY&lt;/code&gt; &lt;/a&gt;から&lt;a href=&quot;../calendar#SATURDAY&quot;&gt; &lt;code&gt;Calendar.SATURDAY&lt;/code&gt; &lt;/a&gt;（両端を含む）です。</target>
        </trans-unit>
        <trans-unit id="acb5b30c736c0c0a99c833e793880da5c82f4806" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; is the string representation the attribute's value. The translation of this string representation into the attribute's value is directory-specific.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; は、属性の値を表す文字列です。この文字列表現の属性値への変換は、ディレクトリ固有です。</target>
        </trans-unit>
        <trans-unit id="67f265351a9060f5ebce36fb9ef8b9c21cfc473a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;valueIfAbsent&lt;/code&gt; - the value to return if not completed</source>
          <target state="translated">&lt;code&gt;valueIfAbsent&lt;/code&gt; -完了していない場合に返す値</target>
        </trans-unit>
        <trans-unit id="61e590101aa24f2267454432c96d9ccf1d8cc52a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;valueList&lt;/code&gt; - An array of ValueExps.</source>
          <target state="translated">&lt;code&gt;valueList&lt;/code&gt; - ValueExpsの配列。</target>
        </trans-unit>
        <trans-unit id="eabf3b8343f64d18f1b63d1ec277fc32b3e4e6d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;valueMapper&lt;/code&gt; - a mapping function to produce values</source>
          <target state="translated">&lt;code&gt;valueMapper&lt;/code&gt; -値を生成するためのマッピング関数</target>
        </trans-unit>
        <trans-unit id="3853e696b83619feba77fccf1fa3c0363166bba1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;valueMapper&lt;/code&gt; - the mapping function to produce values</source>
          <target state="translated">&lt;code&gt;valueMapper&lt;/code&gt; -値を生成するためのマッピング関数</target>
        </trans-unit>
        <trans-unit id="bf67313345c8a7317c2a63be296f739399c2a093" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;valueType&lt;/code&gt; - the type of value that &lt;code&gt;m&lt;/code&gt; is permitted to hold</source>
          <target state="translated">&lt;code&gt;valueType&lt;/code&gt; - &lt;code&gt;m&lt;/code&gt; が保持を許可される値のタイプ</target>
        </trans-unit>
        <trans-unit id="f771b9b4493fce784d7b78f9e28d9ace0bc9a1a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;valueTypes&lt;/code&gt; - the type(s) of the argument(s) to drop</source>
          <target state="translated">&lt;code&gt;valueTypes&lt;/code&gt; -ドロップする引数のタイプ</target>
        </trans-unit>
        <trans-unit id="ca6b3b37885de412872d6fc23fe186b24314c346" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt; - A list of the VALUE attributes that appeared in nested &amp;lt;PARAM&amp;gt; tags.</source>
          <target state="translated">&lt;code&gt;values&lt;/code&gt; -ネストされた&amp;lt;PARAM&amp;gt;タグに含まれるVALUE属性のリスト。</target>
        </trans-unit>
        <trans-unit id="d3cbfe1ccc4cbb6e1a7d8a2d270d59e928048027" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt; - an array of shorts containing the values in order of increasing code length.</source>
          <target state="translated">&lt;code&gt;values&lt;/code&gt; -コードの長さが増加する順に値を含むショーツの配列。</target>
        </trans-unit>
        <trans-unit id="d581f282e1d7e799dd4dafa1a71e24ed02cd5e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt; - the array of composite data values to be added as new rows to this &lt;code&gt;TabularData&lt;/code&gt; instance; if &lt;var&gt;values&lt;/var&gt; is &lt;code&gt;null&lt;/code&gt; or empty, this method returns without doing anything.</source>
          <target state="translated">&lt;code&gt;values&lt;/code&gt; -複合データ値の配列はこれに新しい行として追加する &lt;code&gt;TabularData&lt;/code&gt; インスタンス。場合 &lt;var&gt;values&lt;/var&gt; ある &lt;code&gt;null&lt;/code&gt; または空、このメソッドは何もせずに返します。</target>
        </trans-unit>
        <trans-unit id="80713c8caa9d887146a16ff105643a7d7e9c3244" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt; - the elements of the new stream</source>
          <target state="translated">&lt;code&gt;values&lt;/code&gt; -新しいストリームの要素</target>
        </trans-unit>
        <trans-unit id="240717b99a7d3a5faee14f3bcb001cc067bb684e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt; - the series of arguments to insert</source>
          <target state="translated">&lt;code&gt;values&lt;/code&gt; -挿入する一連の引数</target>
        </trans-unit>
        <trans-unit id="17297c17fbaaf86530a9ddbdc8c965673d8cf570" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt; - the set of possible values for the control</source>
          <target state="translated">&lt;code&gt;values&lt;/code&gt; -コントロールの可能な値のセット</target>
        </trans-unit>
        <trans-unit id="0703430cf1e10f44a8d2d7fabd3213e23f2c1b17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt; - the values to be hashed</source>
          <target state="translated">&lt;code&gt;values&lt;/code&gt; -値がハッシュされます</target>
        </trans-unit>
        <trans-unit id="8f3c3d02b380aacac2fdfb6c2936fda53a535792" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variant&lt;/code&gt; - Any arbitrary value used to indicate a variation of a &lt;code&gt;Locale&lt;/code&gt;. See the &lt;code&gt;Locale&lt;/code&gt; class description for the details.</source>
          <target state="translated">&lt;code&gt;variant&lt;/code&gt; -の変化を示すために使用される任意の値 &lt;code&gt;Locale&lt;/code&gt; 。詳細については、 &lt;code&gt;Locale&lt;/code&gt; クラスの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="72423af6f4e00b08d04cf302fe3d4180cd50dbd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variant&lt;/code&gt; - the variant</source>
          <target state="translated">&lt;code&gt;variant&lt;/code&gt; -バリアント</target>
        </trans-unit>
        <trans-unit id="daa4ca9177b7dabdc1bd1a38012afc88999378f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variant&lt;/code&gt; - the variant string</source>
          <target state="translated">&lt;code&gt;variant&lt;/code&gt; -バリアント文字列</target>
        </trans-unit>
        <trans-unit id="14f8534c095156f7efccfe2453c54aae556d17a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vcl&lt;/code&gt; - The &lt;code&gt;VetoableChangeListener&lt;/code&gt; to be added</source>
          <target state="translated">&lt;code&gt;vcl&lt;/code&gt; - &lt;code&gt;VetoableChangeListener&lt;/code&gt; を追加します</target>
        </trans-unit>
        <trans-unit id="5feb25e197b114b4279a1e47f3113059789486e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vcl&lt;/code&gt; - The &lt;code&gt;VetoableChangeListener&lt;/code&gt; to be removed</source>
          <target state="translated">&lt;code&gt;vcl&lt;/code&gt; - &lt;code&gt;VetoableChangeListener&lt;/code&gt; を削除します</target>
        </trans-unit>
        <trans-unit id="df80b1b229a106d61591e14ca378aa157cdcc940" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vcl&lt;/code&gt; - the &lt;code&gt;VetoableChangeListener&lt;/code&gt; to add</source>
          <target state="translated">&lt;code&gt;vcl&lt;/code&gt; -追加する &lt;code&gt;VetoableChangeListener&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="787c7eb73ca3f0b7fc8a8b0fdcc0a0bb4829802d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vcl&lt;/code&gt; - the &lt;code&gt;VetoableChangeListener&lt;/code&gt; to remove.</source>
          <target state="translated">&lt;code&gt;vcl&lt;/code&gt; -削除する &lt;code&gt;VetoableChangeListener&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df6f4b3d40682924ee998676ca4c0ac318f55ae3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vclass&lt;/code&gt; - the class of the field</source>
          <target state="translated">&lt;code&gt;vclass&lt;/code&gt; -フィールドのクラス</target>
        </trans-unit>
        <trans-unit id="1c7265383f76792f2dbc2021aad332bdc56243a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;velocity&lt;/code&gt; - the speed with which the key was depressed</source>
          <target state="translated">&lt;code&gt;velocity&lt;/code&gt; -キーが押された速度</target>
        </trans-unit>
        <trans-unit id="96699107209406a7b629929907424fe762005fab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;velocity&lt;/code&gt; - the speed with which the key was released</source>
          <target state="translated">&lt;code&gt;velocity&lt;/code&gt; -キーが離された速度</target>
        </trans-unit>
        <trans-unit id="8137638d86cb136b02104817d795b0a9b7531ebf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vendor&lt;/code&gt; - the company who manufactures or creates the hardware or software mixer</source>
          <target state="translated">&lt;code&gt;vendor&lt;/code&gt; -ハードウェアまたはソフトウェアミキサーを製造または作成する会社</target>
        </trans-unit>
        <trans-unit id="a99ff639ab1faff36f16fea50d4c56397631a2bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vendor&lt;/code&gt; - the name of the company who provides the device</source>
          <target state="translated">&lt;code&gt;vendor&lt;/code&gt; -デバイスを提供する会社の名前</target>
        </trans-unit>
        <trans-unit id="e0d7c46e4c0f68eb515bb8e05288323d0f19e1ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vendorName&lt;/code&gt; - the vendor name, as a non-&lt;code&gt;null&lt;/code&gt;&lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vendorName&lt;/code&gt; - &lt;code&gt;null&lt;/code&gt; 以外の &lt;code&gt;String&lt;/code&gt; としてのベンダー名。</target>
        </trans-unit>
        <trans-unit id="9845d29c6f7247e0b4d01df13328f7e2c58ef146" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vendorName&lt;/code&gt; - the vendor name.</source>
          <target state="translated">&lt;code&gt;vendorName&lt;/code&gt; -ベンダー名。</target>
        </trans-unit>
        <trans-unit id="09ee7b544f2a724bc8a6744c87abf3b9be392131" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verificationEngine&lt;/code&gt; - the signature verification engine.</source>
          <target state="translated">&lt;code&gt;verificationEngine&lt;/code&gt; 署名検証エンジン。</target>
        </trans-unit>
        <trans-unit id="3d6085965a34c93a3502f71ce46b05a7fdc015f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verificationKey&lt;/code&gt; - the public key for verification.</source>
          <target state="translated">&lt;code&gt;verificationKey&lt;/code&gt; 用の公開鍵。</target>
        </trans-unit>
        <trans-unit id="1f798cbf97e4ef2c16193dbdb400a0c6d7fd5422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verifier&lt;/code&gt; - The non-null hostname verifier callback.</source>
          <target state="translated">&lt;code&gt;verifier&lt;/code&gt; -null以外のホスト名検証コールバック。</target>
        </trans-unit>
        <trans-unit id="28800d08fc28c0c1f06cf58ca96b0de8bf8c23a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verify&lt;/code&gt; - whether or not to verify the JarInputStream if it is signed.</source>
          <target state="translated">&lt;code&gt;verify&lt;/code&gt; -それが署名されている場合JarInputStreamを検証するかどうか。</target>
        </trans-unit>
        <trans-unit id="1038a21b62361550f8dbb1cb83793e70e5463286" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verify&lt;/code&gt; - whether or not to verify the jar file if it is signed.</source>
          <target state="translated">&lt;code&gt;verify&lt;/code&gt; -jarファイルが署名されている場合に検証するかどうか。</target>
        </trans-unit>
        <trans-unit id="393987438c4ece8918b5b196d4a02d7216657d77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - The version number of the &lt;code&gt;.jar&lt;/code&gt; file stored locally.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -ローカルに保存されている &lt;code&gt;.jar&lt;/code&gt; ファイルのバージョン番号。</target>
        </trans-unit>
        <trans-unit id="6bf430f9a8c9e3439ab6265199b54cb267d6f6bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - This is the version number of the feature to test.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -これは、テストする機能のバージョン番号です。</target>
        </trans-unit>
        <trans-unit id="9ced13a5115e618e17ee59b7b3b57dc50298e4c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - a &lt;code&gt;String&lt;/code&gt;, which is ignored.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt; は無視され、。</target>
        </trans-unit>
        <trans-unit id="e3c0f3190efa994b3e48fa892128cf2a372067ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - a version identifier, as a non-&lt;code&gt;null&lt;/code&gt;&lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; - &lt;code&gt;null&lt;/code&gt; 以外の &lt;code&gt;String&lt;/code&gt; としてのバージョン識別子。</target>
        </trans-unit>
        <trans-unit id="3ea54b90fc6b2d87372960987eca6ae70f6bc4b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - a version identifier.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -バージョン識別子。</target>
        </trans-unit>
        <trans-unit id="7a88ffff3543fad19e2f196fbe307b1ded975876" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - the provider version number.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -プロバイダーのバージョン番号。</target>
        </trans-unit>
        <trans-unit id="449aebca7a68a9b0e3354dbdbc660833a1095bd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - the version.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -バージョン。</target>
        </trans-unit>
        <trans-unit id="3fc831ea23477f6d78c72abe4206df650a5cf7ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - use ProtocolVersion from java.io.ObjectStreamConstants.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -java.io.ObjectStreamConstantsのProtocolVersionを使用します。</target>
        </trans-unit>
        <trans-unit id="8c9941ba02a457ff2ab0a69c99ecb49a738cc4dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - version information for the device</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -デバイスのバージョン情報</target>
        </trans-unit>
        <trans-unit id="b21c691f450d30d242524fd12c9389a22e2fb9de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - version information for the mixer</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -ミキサーのバージョン情報</target>
        </trans-unit>
        <trans-unit id="1166bc60fcf6ecd1c554e31a94072a8b0c370b41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;versionNum&lt;/code&gt; - the version number of this secret key</source>
          <target state="translated">&lt;code&gt;versionNum&lt;/code&gt; -この秘密鍵のバージョン番号</target>
        </trans-unit>
        <trans-unit id="1e70331b7c3386618efaa1cd2afd6b83b880b88a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visible&lt;/code&gt; - The initial visibility.</source>
          <target state="translated">&lt;code&gt;visible&lt;/code&gt; -初期の可視性。</target>
        </trans-unit>
        <trans-unit id="e57d80a0d629b2a7311dd95cb7704a4290f2a7dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visitor&lt;/code&gt; - the file visitor to invoke for each file</source>
          <target state="translated">&lt;code&gt;visitor&lt;/code&gt; -各ファイルに対して呼び出すファイルビジター</target>
        </trans-unit>
        <trans-unit id="0d87e2a98f1f6334be8511fb286531e2fe6a5190" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w&lt;/code&gt; - The width</source>
          <target state="translated">&lt;code&gt;w&lt;/code&gt; -幅</target>
        </trans-unit>
        <trans-unit id="20a9f6685bbc981ef6908f3482845497ba5fb593" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w&lt;/code&gt; - printable width</source>
          <target state="translated">&lt;code&gt;w&lt;/code&gt; -印刷可能な幅</target>
        </trans-unit>
        <trans-unit id="9c837475c6f2b55437822ea3de93ff39cebebe4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w&lt;/code&gt; - the public point.</source>
          <target state="translated">&lt;code&gt;w&lt;/code&gt; -公開ポイント。</target>
        </trans-unit>
        <trans-unit id="71d57b9e0b869bfdbdab51b764119cde6e28f428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w&lt;/code&gt; - the writer to print the output to</source>
          <target state="translated">&lt;code&gt;w&lt;/code&gt; -出力を印刷するライター</target>
        </trans-unit>
        <trans-unit id="5465d87c9b701d17b7374fe78d8240b39c9c6448" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wallOffset&lt;/code&gt; - the wall offset, not null</source>
          <target state="translated">&lt;code&gt;wallOffset&lt;/code&gt; -nullではなく壁のオフセット</target>
        </trans-unit>
        <trans-unit id="e2dd906b76926bac84f3cc254fc734afcd3bb4b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;want&lt;/code&gt; - set to true if client authentication is requested, or false if no client authentication is desired.</source>
          <target state="translated">&lt;code&gt;want&lt;/code&gt; -クライアント認証が要求されている場合はtrueに設定し、クライアント認証が不要な場合はfalseに設定します。</target>
        </trans-unit>
        <trans-unit id="9d0847fc100cfd04f43512f699eeb4997c0fa0cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wantClientAuth&lt;/code&gt; - whether client authentication should be requested</source>
          <target state="translated">&lt;code&gt;wantClientAuth&lt;/code&gt; -クライアント認証を要求するかどうか</target>
        </trans-unit>
        <trans-unit id="1203b805d0870aa2c1a9c7df0a1806731a1dd390" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;warning&lt;/code&gt; - a &lt;code&gt;String&lt;/code&gt; containing the warning.</source>
          <target state="translated">&lt;code&gt;warning&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt; 警告を含みます。</target>
        </trans-unit>
        <trans-unit id="2431b217414762e50a4eb992f676838db2d9ae62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;warning&lt;/code&gt; - the warning message to send.</source>
          <target state="translated">&lt;code&gt;warning&lt;/code&gt; -送信する警告メッセージ。</target>
        </trans-unit>
        <trans-unit id="4919896d6d588811d0fca3a433f0019667d680ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;warning&lt;/code&gt; - the warning message.</source>
          <target state="translated">&lt;code&gt;warning&lt;/code&gt; -警告メッセージ。</target>
        </trans-unit>
        <trans-unit id="1d2a5f81ed17272377fdf132520aa93c17c25c1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;watcher&lt;/code&gt; - The watch service to which this object is to be registered</source>
          <target state="translated">&lt;code&gt;watcher&lt;/code&gt; -このオブジェクトが登録される監視サービス</target>
        </trans-unit>
        <trans-unit id="bdc84f3655d6d538a9e21bc38b8ee249f97607ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;watcher&lt;/code&gt; - the watch service to which this object is to be registered</source>
          <target state="translated">&lt;code&gt;watcher&lt;/code&gt; -このオブジェクトが登録される監視サービス</target>
        </trans-unit>
        <trans-unit id="3f4f1ef3eff83ef2cc508a982c908b74e2a4db3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weakCompareAndSet&lt;/code&gt; atomically reads and conditionally writes a variable but does &lt;em&gt;not&lt;/em&gt; create any happens-before orderings, so provides no guarantees with respect to previous or subsequent reads and writes of any variables other than the target of the &lt;code&gt;weakCompareAndSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;weakCompareAndSet&lt;/code&gt; は、アトミックに変数を読み取り、条件付きで書き込みますが、発生前の順序付け&lt;em&gt;は&lt;/em&gt;作成しませ&lt;em&gt;ん&lt;/em&gt;。そのため、 &lt;code&gt;weakCompareAndSet&lt;/code&gt; のターゲット以外の変数の前または後の読み取りおよび書き込みに関しては保証されません。</target>
        </trans-unit>
        <trans-unit id="afac65f979c62e6c73de6b61cab49310652e0d8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekOfYear&lt;/code&gt; - the week number based on &lt;code&gt;weekYear&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weekOfYear&lt;/code&gt; -に基づいて週数 &lt;code&gt;weekYear&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b61f6df6c8cf5214f8201377cf96a766b2a33b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekYear&lt;/code&gt; - the week year</source>
          <target state="translated">&lt;code&gt;weekYear&lt;/code&gt; -週の年</target>
        </trans-unit>
        <trans-unit id="ce8ff1be711f7ed60f912353aa3fa28e5b45bd42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weeks&lt;/code&gt; - the number of weeks, positive or negative</source>
          <target state="translated">&lt;code&gt;weeks&lt;/code&gt; -正または負の週数</target>
        </trans-unit>
        <trans-unit id="e928eed8a83bdde83540d02500b53d4062e1f219" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weeks&lt;/code&gt; - the weeks to add, may be negative</source>
          <target state="translated">&lt;code&gt;weeks&lt;/code&gt; -追加する週、負の場合がある</target>
        </trans-unit>
        <trans-unit id="90d49ea8db8b6d42cd03dbc7e1f24846a01c2f38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weeks&lt;/code&gt; - the weeks to subtract, may be negative</source>
          <target state="translated">&lt;code&gt;weeks&lt;/code&gt; -減算する週、負の場合がある</target>
        </trans-unit>
        <trans-unit id="530efaa82f278703a7894bc1dc4afc723777ff92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weeksToAdd&lt;/code&gt; - the weeks to add, may be negative</source>
          <target state="translated">&lt;code&gt;weeksToAdd&lt;/code&gt; -追加する週。負の値になる場合があります</target>
        </trans-unit>
        <trans-unit id="a3c93fa7c6d9034b93498c2929a11b155fed3837" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weeksToSubtract&lt;/code&gt; - the weeks to subtract, may be negative</source>
          <target state="translated">&lt;code&gt;weeksToSubtract&lt;/code&gt; -減算する週。負の場合があります</target>
        </trans-unit>
        <trans-unit id="b18725dd7e2b13dbf77908362b47d238169999db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weight&lt;/code&gt; - a weight value between &lt;code&gt;MIN_WEIGHT&lt;/code&gt; and &lt;code&gt;MAX_WEIGHT&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weight&lt;/code&gt; &lt;code&gt;MIN_WEIGHT&lt;/code&gt; と &lt;code&gt;MAX_WEIGHT&lt;/code&gt; の間の重み値</target>
        </trans-unit>
        <trans-unit id="2c0daab888276260aaf3feb573b9060842fa137f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;when&lt;/code&gt; - a date.</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; -日付。</target>
        </trans-unit>
        <trans-unit id="a24a6dcc85b327691154f52949d5a1c0b02c9bd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;when&lt;/code&gt; - the &lt;code&gt;Object&lt;/code&gt; to be compared</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; - &lt;code&gt;Object&lt;/code&gt; 比較します</target>
        </trans-unit>
        <trans-unit id="8aaa98fbb87e6a8b7b02bfa63b24d478c49b1589" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;which&lt;/code&gt; - type of access, PUBLIC or DECLARED.</source>
          <target state="translated">&lt;code&gt;which&lt;/code&gt; -アクセスの種類、PUBLICまたは宣言。</target>
        </trans-unit>
        <trans-unit id="809e07444576147b4113390fc8fd2ca28bd7567a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;who&lt;/code&gt; - the principal component</source>
          <target state="translated">&lt;code&gt;who&lt;/code&gt; -主成分</target>
        </trans-unit>
        <trans-unit id="536151b9cfbe41710ed69fcf39b50582ba6d766a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; - The minimum number of characters to be written to the output. If the length of the converted value is less than the &lt;code&gt;width&lt;/code&gt; then the output will be padded by &lt;code&gt;' '&lt;/code&gt; until the total number of characters equals width. The padding is at the beginning by default. If the &lt;a href=&quot;formattableflags#LEFT_JUSTIFY&quot;&gt;&lt;code&gt;FormattableFlags.LEFT_JUSTIFY&lt;/code&gt;&lt;/a&gt; flag is set then the padding will be at the end. If &lt;code&gt;width&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt; then there is no minimum.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; -出力に書き込まれる最小文字数。変換された値の長さが &lt;code&gt;width&lt;/code&gt; より小さい場合、文字の総数が幅と等しくなるまで、出力は &lt;code&gt;' '&lt;/code&gt; で埋め込まれます。デフォルトでは、パディングは先頭にあります。場合&lt;a href=&quot;formattableflags#LEFT_JUSTIFY&quot;&gt; &lt;code&gt;FormattableFlags.LEFT_JUSTIFY&lt;/code&gt; の&lt;/a&gt;フラグが設定されているパディングは終わりになります。 &lt;code&gt;width&lt;/code&gt; が &lt;code&gt;-1&lt;/code&gt; の場合、最小値はありません。</target>
        </trans-unit>
        <trans-unit id="1a114e137ecf78b75a8f3652d023b1a75184a384" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; - the desired width of the returned &lt;code&gt;BufferedImage&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; -返されるの所望の幅 &lt;code&gt;BufferedImage&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56d4ff5062d79daa193db14ff0613f31a57f8eea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; - the desired width of the returned &lt;code&gt;SampleModel&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; -返されるの所望の幅 &lt;code&gt;SampleModel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca30a0b800c0b05b2aa7334f0e210a38e7f37797" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; - the field width of the printed and parsed field, from 1 to 10</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; -印刷され解析されたフィールドの幅は、1から10まで</target>
        </trans-unit>
        <trans-unit id="c34a9aeed85604fb2a90911b83495220fce6ed16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; - the number of updated pixels horizontally.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; -水平に更新されたピクセルの数。</target>
        </trans-unit>
        <trans-unit id="37b100be7c3a7470400ca558aacbec6f7565ed87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; - the total width of the area being updated, including pixels being skipped if &lt;code&gt;periodX &amp;gt; 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; - &lt;code&gt;periodX &amp;gt; 1&lt;/code&gt; 場合にスキップされるピクセルを含む、更新される領域の合計幅。</target>
        </trans-unit>
        <trans-unit id="5b318e3837e01e38438e0f88a5ba65fd68f31669" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; - the true width of the image or tile begin decoded.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; -画像またはタイルの実際の幅がデコードを開始します。</target>
        </trans-unit>
        <trans-unit id="7bf3e8959019ebd7dafe85eb3f66b84da99c6939" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; - the width of the image.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; -画像の幅。</target>
        </trans-unit>
        <trans-unit id="47cc4568d2fb4d8e84e8a8adc029d2144a5c9ec3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; - the width of the printed field, from 1 to 19</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; -印刷されるフィールドの幅、1から19</target>
        </trans-unit>
        <trans-unit id="0a3acb7c7b540150c92aaf5f8d811788f74ede12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window&lt;/code&gt; - the new window that is being created.</source>
          <target state="translated">&lt;code&gt;window&lt;/code&gt; -作成される新しいウィンドウ。</target>
        </trans-unit>
        <trans-unit id="d081283e4706f3094fbfadb527f8fcbef6cf14eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with&lt;/code&gt; - the immutable equivalent of a setter</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; -セッターの不変同等</target>
        </trans-unit>
        <trans-unit id="c34d45a4dceee259cfc6140a445df2d1f2be0045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wordSize&lt;/code&gt; - the word size in bits.</source>
          <target state="translated">&lt;code&gt;wordSize&lt;/code&gt; -ワードサイズ（ビット単位）。</target>
        </trans-unit>
        <trans-unit id="9da3a239564d59b4dbf83cd93fe8daae7557efcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;workQueue&lt;/code&gt; - the queue to use for holding tasks before they are executed. This queue will hold only the &lt;code&gt;Runnable&lt;/code&gt; tasks submitted by the &lt;code&gt;execute&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;workQueue&lt;/code&gt; -タスクが実行される前にタスクを保持するために使用するキュー。このキューは、 &lt;code&gt;execute&lt;/code&gt; メソッドによって送信された &lt;code&gt;Runnable&lt;/code&gt; タスクのみを保持します。</target>
        </trans-unit>
        <trans-unit id="3fe41249ea8b7cfdcb5c7983f00e0c7c9e69b175" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrappedKey&lt;/code&gt; - the key to be unwrapped.</source>
          <target state="translated">&lt;code&gt;wrappedKey&lt;/code&gt; -ラップを解除するキー。</target>
        </trans-unit>
        <trans-unit id="fa9a4ec5e76eea572b1f42cffae264d494d8d3d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt; - the algorithm associated with the wrapped key.</source>
          <target state="translated">&lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt; -ラップされた鍵に関連付けられたアルゴリズム。</target>
        </trans-unit>
        <trans-unit id="6ba3791650f86847205f15e8c6014c0b171cbaf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrappedKeyType&lt;/code&gt; - the type of the wrapped key. This is one of &lt;code&gt;SECRET_KEY&lt;/code&gt;, &lt;code&gt;PRIVATE_KEY&lt;/code&gt;, or &lt;code&gt;PUBLIC_KEY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wrappedKeyType&lt;/code&gt; -ラップされたキーのタイプ。これは、 &lt;code&gt;SECRET_KEY&lt;/code&gt; 、 &lt;code&gt;PRIVATE_KEY&lt;/code&gt; 、または &lt;code&gt;PUBLIC_KEY&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="e190ad6481033692e1ccf9100f7709f0947f411d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrappedKeyType&lt;/code&gt; - the type of the wrapped key. This must be one of &lt;code&gt;SECRET_KEY&lt;/code&gt;, &lt;code&gt;PRIVATE_KEY&lt;/code&gt;, or &lt;code&gt;PUBLIC_KEY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wrappedKeyType&lt;/code&gt; -ラップされたキーのタイプ。これは、 &lt;code&gt;SECRET_KEY&lt;/code&gt; 、 &lt;code&gt;PRIVATE_KEY&lt;/code&gt; 、または &lt;code&gt;PUBLIC_KEY&lt;/code&gt; のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="647bbc217033eeb197b6136cf5b69ccdf5456b61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writable&lt;/code&gt; - If &lt;code&gt;true&lt;/code&gt;, sets the access permission to allow write operations; if &lt;code&gt;false&lt;/code&gt; to disallow write operations</source>
          <target state="translated">&lt;code&gt;writable&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; の場合、書き込み操作を許可するアクセス許可を設定します。書き込み操作を許可しない場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9249cce18f0a7ee953a7a70a9dc65d5f9950b9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writableStackTrace&lt;/code&gt; - whether or not the stack trace is writable</source>
          <target state="translated">&lt;code&gt;writableStackTrace&lt;/code&gt; -スタックトレースが書き込み可能かどうか</target>
        </trans-unit>
        <trans-unit id="1b3b9993a2e4e4406815634051f1cdc3a5fc1d66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writableStackTrace&lt;/code&gt; - whether or not the stack trace should be writable</source>
          <target state="translated">&lt;code&gt;writableStackTrace&lt;/code&gt; -スタックトレースを書き込み可能にするかどうか</target>
        </trans-unit>
        <trans-unit id="f78c096a9875db108af3b0feb1fb1bd51271a613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;write&lt;/code&gt; - flag to indicate if the corresponding role can be set</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; -対応するロールを設定できるかどうかを示すフラグ</target>
        </trans-unit>
        <trans-unit id="652357419971d1ddef9aecdf32ba98d6179ae770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writeMethod&lt;/code&gt; - The method used for writing the property value. May be null if the property is read-only.</source>
          <target state="translated">&lt;code&gt;writeMethod&lt;/code&gt; -プロパティ値の書き込みに使用されるメソッド。プロパティが読み取り専用の場合はnullになります。</target>
        </trans-unit>
        <trans-unit id="29a6c0c89037521a90e3e9735866f83f4fd2ac20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writeMethod&lt;/code&gt; - The method used for writing the property values as an array. May be null if the property is read-only or must be indexed.</source>
          <target state="translated">&lt;code&gt;writeMethod&lt;/code&gt; -プロパティ値を配列として書き込むために使用されるメソッド。プロパティが読み取り専用であるか、インデックスを付ける必要がある場合はnullになることがあります。</target>
        </trans-unit>
        <trans-unit id="21bde32afabc2726e10acb9bac56519cbefddd37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writeMethod&lt;/code&gt; - The new indexed write method.</source>
          <target state="translated">&lt;code&gt;writeMethod&lt;/code&gt; -新しいインデックス付き書き込みメソッド。</target>
        </trans-unit>
        <trans-unit id="56a85cc8bb917d53ce2bd6f1f293e7d8497b8ab8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writeMethod&lt;/code&gt; - The new write method.</source>
          <target state="translated">&lt;code&gt;writeMethod&lt;/code&gt; -新しい書き込みメソッド。</target>
        </trans-unit>
        <trans-unit id="05e5b68d59d36f7a8f9aed524dcb09a53669178f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writeMethodName&lt;/code&gt; - The name of the method used for writing the property value. May be null if the property is read-only.</source>
          <target state="translated">&lt;code&gt;writeMethodName&lt;/code&gt; -プロパティ値の書き込みに使用されるメソッドの名前。プロパティが読み取り専用の場合はnullになります。</target>
        </trans-unit>
        <trans-unit id="85d1a643dc4a3bca0f224a810288098cee62fa26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writeMethodName&lt;/code&gt; - The name of the method used for writing the property values as an array. May be null if the property is read-only or must be indexed.</source>
          <target state="translated">&lt;code&gt;writeMethodName&lt;/code&gt; -プロパティ値を配列として書き込むために使用されるメソッドの名前。プロパティが読み取り専用であるか、インデックスを付ける必要がある場合はnullになることがあります。</target>
        </trans-unit>
        <trans-unit id="fe8ade6e64d27a4da1d52ac92f4c8122f2451f0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writer&lt;/code&gt; - The &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;writer&lt;/code&gt; - &lt;code&gt;Writer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd9962898bfd021432a5e215d41e077077d619e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writer&lt;/code&gt; - The new &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;writer&lt;/code&gt; -新しい &lt;code&gt;Writer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5e1560118de6c525dcb3e69afa30abbdcbe2b476" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writer&lt;/code&gt; - an &lt;code&gt;ImageWriter&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;writer&lt;/code&gt; - &lt;code&gt;ImageWriter&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="dd01e0c9f03b116a3af0ba0a04941c0bcfff34cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writer&lt;/code&gt; - an &lt;code&gt;ImageWriter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;writer&lt;/code&gt; - &lt;code&gt;ImageWriter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="618625ad380a68b05ff97afae60adcd0c012a476" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writer&lt;/code&gt; - an instance of a registered &lt;code&gt;ImageWriter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;writer&lt;/code&gt; -登録のインスタンス &lt;code&gt;ImageWriter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78b7547f77eb97c91746e065e2c6c69d7e937f62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writer&lt;/code&gt; - an output character stream writer.</source>
          <target state="translated">&lt;code&gt;writer&lt;/code&gt; -出力文字ストリームライター。</target>
        </trans-unit>
        <trans-unit id="50ef5693f03b3f554bb628f1cfedf9e3d8437b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writerClassName&lt;/code&gt; - the fully-qualified name of the associated &lt;code&gt;ImageWriterSpi&lt;/code&gt; class, as a non-&lt;code&gt;null&lt;/code&gt;&lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;writerClassName&lt;/code&gt; -関連するの完全修飾名 &lt;code&gt;ImageWriterSpi&lt;/code&gt; クラス、非として &lt;code&gt;null&lt;/code&gt; &lt;code&gt;String&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="589731ffb00a49a9857d8380b7206c6ab7af75f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writerSpiNames&lt;/code&gt; - an array &lt;code&gt;String&lt;/code&gt;s naming the classes of all associated &lt;code&gt;ImageWriter&lt;/code&gt;s, or &lt;code&gt;null&lt;/code&gt;. An array of length 0 is normalized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;writerSpiNames&lt;/code&gt; -関連するすべての &lt;code&gt;ImageWriter&lt;/code&gt; のクラスを指定する配列 &lt;code&gt;String&lt;/code&gt; 、または &lt;code&gt;null&lt;/code&gt; 。長さが0の配列は &lt;code&gt;null&lt;/code&gt; に正規化されます。</target>
        </trans-unit>
        <trans-unit id="6bc3e30ae8752676600b108cd0e2688eec72e9f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - - X dimension</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; --X次元</target>
        </trans-unit>
        <trans-unit id="5c440ed2cfba121985a1e01f4c9c22daa86d2e33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;Object&lt;/code&gt; to which this &lt;code&gt;BigDecimal&lt;/code&gt; is to be compared.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;Object&lt;/code&gt; たこの &lt;code&gt;BigDecimal&lt;/code&gt; のが比較されます。</target>
        </trans-unit>
        <trans-unit id="edf00819ae69521cf6c47328333ad96f42324855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;Object&lt;/code&gt; to which this &lt;code&gt;MathContext&lt;/code&gt; is to be compared.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;Object&lt;/code&gt; どのこの &lt;code&gt;MathContext&lt;/code&gt; 比較されます。</target>
        </trans-unit>
        <trans-unit id="a68f46ac8dc9b88498900d2b04a3dcb5b60cf374" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - Integer value.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -整数値。</target>
        </trans-unit>
        <trans-unit id="420af39376aee8b48ab654addfa166dd797c874e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - Object to which this BigInteger is to be compared.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -このBigIntegerと比較されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4228639643a01482f44607cffa7a5adfa33ca31c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The &lt;code&gt;Object&lt;/code&gt; to be printed.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;Object&lt;/code&gt; 印刷します。</target>
        </trans-unit>
        <trans-unit id="ce6dede5751c9fbc363f9cef5c9b6c488ebfddc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The &lt;code&gt;String&lt;/code&gt; to be printed.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt; 印刷されます。</target>
        </trans-unit>
        <trans-unit id="a237cfd57496be72d0a8cde6b496752aaaae3bad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The &lt;code&gt;boolean&lt;/code&gt; to be printed</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;boolean&lt;/code&gt; 印刷します</target>
        </trans-unit>
        <trans-unit id="4a46d4dc57960db5c9e9150bace834ed5fa674bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The &lt;code&gt;char&lt;/code&gt; to be printed.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;char&lt;/code&gt; 印刷します。</target>
        </trans-unit>
        <trans-unit id="0d9f179dcd29b4856f6d4732d4b0f11e61aed1a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The &lt;code&gt;double&lt;/code&gt; to be printed.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;double&lt;/code&gt; 印刷します。</target>
        </trans-unit>
        <trans-unit id="6db4d084bd820091db2c1cbc421bbe90fb6cee4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The &lt;code&gt;float&lt;/code&gt; to be printed.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;float&lt;/code&gt; 印刷します。</target>
        </trans-unit>
        <trans-unit id="ed9cc3f97ee05e11885239b2c067f8851f2c0d32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The &lt;code&gt;int&lt;/code&gt; to be printed.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;int&lt;/code&gt; 型、印刷されます。</target>
        </trans-unit>
        <trans-unit id="73929bdc5515cd47bf2705ef7855bf53320574b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The number whose hyperbolic cosine is to be returned.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -双曲線余弦が返される数値。</target>
        </trans-unit>
        <trans-unit id="cb35f5ae5ba200711d8fc19117bee88635fb0d7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The number whose hyperbolic sine is to be returned.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -双曲線正弦が返される数値。</target>
        </trans-unit>
        <trans-unit id="42a67667b5bd0038a2fa407ae157e94c2d0c53f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - The number whose hyperbolic tangent is to be returned.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -双曲線正接が返される数値。</target>
        </trans-unit>
        <trans-unit id="7fd953040699e6af64da76587d532431313ff2e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - X dimension.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -X次元。</target>
        </trans-unit>
        <trans-unit id="a5d913469141f53e472145b7977068922417eecb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - a The &lt;code&gt;long&lt;/code&gt; to be printed.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -a 印刷される &lt;code&gt;long&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a9b1850a23c3c51ed8e610431e04460106783ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - a value</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -値</target>
        </trans-unit>
        <trans-unit id="9295b8709d4a6bac60e93dbfe1acc146b2cb05b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - an array of chars to print.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -印刷する文字の配列。</target>
        </trans-unit>
        <trans-unit id="0ba735d007d529500b9099bc4ec2ed6828bb70c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - any reference</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -任意の参照</target>
        </trans-unit>
        <trans-unit id="a3c2eacc224f463cec40fdedc2369efeedf2f9a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - location of dialog including border in screen coordinates</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -画面座標の境界を含むダイアログの位置</target>
        </trans-unit>
        <trans-unit id="4884d3a07893273d1d94a47be1cc3e564a785d70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - object for which the hashCode is to be calculated</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -hashCodeが計算されるオブジェクト</target>
        </trans-unit>
        <trans-unit id="983484b3b1adfede1eb735446bb05e6e1e029814" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - object to compare</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -比較するオブジェクト</target>
        </trans-unit>
        <trans-unit id="70f87862fdba8b0e8b2f12a5064b03038df887fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - printable x</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -印刷可能なx</target>
        </trans-unit>
        <trans-unit id="0cdeea7a1711cfee01ee8436881d3139cc21b2c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - private value x</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -プライベート値x</target>
        </trans-unit>
        <trans-unit id="eee801175b402f91471fe1074237905007489135" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the &lt;code&gt;String&lt;/code&gt; value to be printed</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt; 印刷される値</target>
        </trans-unit>
        <trans-unit id="6461e41509267cb0a43c5d1a7a161a14a95b6db5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the &lt;code&gt;boolean&lt;/code&gt; value to be printed</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;boolean&lt;/code&gt; 値が印刷されます</target>
        </trans-unit>
        <trans-unit id="07f9657553a22c78fdcd6fa1318846969a73ace7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the &lt;code&gt;char&lt;/code&gt; value to be printed</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;char&lt;/code&gt; 値を印刷します</target>
        </trans-unit>
        <trans-unit id="94573fabda6b4df46d76245131e49606db0cc540" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the &lt;code&gt;double&lt;/code&gt; value to be printed</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;double&lt;/code&gt; に印刷される値</target>
        </trans-unit>
        <trans-unit id="896392f616cd017b6c3cbbe02a27d1594281559e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the &lt;code&gt;float&lt;/code&gt; value to be printed</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;float&lt;/code&gt; 印刷される値</target>
        </trans-unit>
        <trans-unit id="95d8443feb7cf60a5b29a88ce68c94862f9c401c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the &lt;code&gt;int&lt;/code&gt; value to be printed</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;int&lt;/code&gt; 型の値を印刷します</target>
        </trans-unit>
        <trans-unit id="cf2f8f2deec09fabcaff00d109c60067a2b30839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the &lt;code&gt;long&lt;/code&gt; value to be printed</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; - &lt;code&gt;long&lt;/code&gt; 値が印刷されます</target>
        </trans-unit>
        <trans-unit id="42b859ebb71f9206417be9f19503f8e468735de2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the abscissa coordinate</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -横座標</target>
        </trans-unit>
        <trans-unit id="6ce9ad9c5aee4d5dd37530582a6fd5df4896f1a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the affine x-coordinate.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -アフィンのx座標。</target>
        </trans-unit>
        <trans-unit id="a8515238e940033081ba6d4b389f6b55366cb7cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the array of &lt;code&gt;char&lt;/code&gt; values to be printed</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -印刷される &lt;code&gt;char&lt;/code&gt; 値の配列</target>
        </trans-unit>
        <trans-unit id="8289440ba5941c93457ad3995cab306a7a5d1a4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the dividend</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -配当</target>
        </trans-unit>
        <trans-unit id="e9fd87195179765fe116b5a37cd9dfe5911a8b3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the exponent to raise</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -累乗する指数</target>
        </trans-unit>
        <trans-unit id="49fe1ab2e9f325bad98113043f902d5969c04d76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the first &lt;code&gt;boolean&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -比較する最初の &lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4fee6b270cfaba74b0bd1de80f76e5ea07147666" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the first &lt;code&gt;byte&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -比較する最初の &lt;code&gt;byte&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0ce7b43474b02b1d40f326a736e7540b0fc4ee8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the first &lt;code&gt;char&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -比較する最初の &lt;code&gt;char&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06def402e051f517676730dfd9135e5e85db1afb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the first &lt;code&gt;int&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -比較する最初の &lt;code&gt;int&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2b1d44851bfdb08aaee21909721cf967549e068f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the first &lt;code&gt;long&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -比較する最初の &lt;code&gt;long&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3fbd004a9629852baf8f62dcca4ba3fe891a12c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the first &lt;code&gt;short&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -比較する最初の &lt;code&gt;short&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf9879de5ef077fd54778857b567a02f40c2f645" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the first value</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -最初の値</target>
        </trans-unit>
        <trans-unit id="767335c223e2b07ba1ed581e58f300e172447693" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the object to exchange</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -交換するオブジェクト</target>
        </trans-unit>
        <trans-unit id="6561e5d75ff0a421ff1875ea20214354905cdebd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the private key.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -秘密鍵。</target>
        </trans-unit>
        <trans-unit id="8a28f83abb76deddcc5885267cafe3461084c006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the update value</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -更新値</target>
        </trans-unit>
        <trans-unit id="0882773a6127c18bd67eaf2b4f9cd4e1903ec73a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the value</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -値</target>
        </trans-unit>
        <trans-unit id="7351dae62041fddbaa5261e489e9932405813066" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the value to add</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -追加する値</target>
        </trans-unit>
        <trans-unit id="9d16709435bab33ee08f9cf936b79d3717a408b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the value to bind to the first argument of the target</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -ターゲットの最初の引数にバインドする値</target>
        </trans-unit>
        <trans-unit id="348c8c9b69565e39d5123021a778c7b8d48f850f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the value to convert to an unsigned &lt;code&gt;int&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -符号なし &lt;code&gt;int&lt;/code&gt; に変換する値</target>
        </trans-unit>
        <trans-unit id="fc4b1cbe51f89c027993354d6989954cb4cee9dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - the value to convert to an unsigned &lt;code&gt;long&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -符号なし &lt;code&gt;long&lt;/code&gt; に変換する値</target>
        </trans-unit>
        <trans-unit id="f3367aefc4a0c79897631ec6304abf958a448f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - - Y dimension.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; --Y次元。</target>
        </trans-unit>
        <trans-unit id="8ff5b779c2d9ea67ad40f4e27b021c21027e5e4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - Y dimension.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -Y次元。</target>
        </trans-unit>
        <trans-unit id="31b823e2a0081d2b95e6050eb0827986c48fafc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - a value</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -値</target>
        </trans-unit>
        <trans-unit id="6c1572db57106110c3318e944b08a288cad106cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - location of dialog including border in screen coordinates</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -画面座標の境界を含むダイアログの位置</target>
        </trans-unit>
        <trans-unit id="7212b018216052f82369ece6e086ff3ced75bb07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - printable y</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -印刷可能なy</target>
        </trans-unit>
        <trans-unit id="c9d6d67d0c78fd275cd38f4c991039725332d62b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - public value y</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -公開値y</target>
        </trans-unit>
        <trans-unit id="357c72fb7240a818c9b48a8c5ee32f73beae57a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the affine y-coordinate.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -アフィンy座標。</target>
        </trans-unit>
        <trans-unit id="9bdf106800acdb2857260128f84df0f081fe6538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the divisor</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -除数</target>
        </trans-unit>
        <trans-unit id="15ea023a134d1dbe6f35dafb75773392f2cb6a89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the ordinate coordinate</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -縦座標</target>
        </trans-unit>
        <trans-unit id="4112850221cef33eb8486842be36709fc13467ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the public key.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -公開鍵。</target>
        </trans-unit>
        <trans-unit id="309bc3a5abc2db19e75f9777de052c99124b9eaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the second &lt;code&gt;boolean&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -比較する2番目の &lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="161e3c308a8925cc82cbb5c4fa3829a72aa0b2b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the second &lt;code&gt;byte&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -比較する2番目の &lt;code&gt;byte&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d85e417ab370edd6ad9821564b0762ea2c50a463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the second &lt;code&gt;char&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -比較する2番目の &lt;code&gt;char&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbab71199151c2b745d2bb0259ed4909edde1d81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the second &lt;code&gt;int&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -比較する2番目の &lt;code&gt;int&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="489090c2183c5e7569c2b08d4724108901f8b07c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the second &lt;code&gt;long&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -比較する2番目の &lt;code&gt;long&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8033598c479ff7abf72ee259e24aa7e1d7ca4da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the second &lt;code&gt;short&lt;/code&gt; to compare</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -比較する2番目の &lt;code&gt;short&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45d83d011223c8e59ffb7561ba79e0f300a2d36b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the second value</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -2番目の値</target>
        </trans-unit>
        <trans-unit id="1e3faca92813236a4ca679691d0c6a11bb945b97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - the second value to subtract from the first</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -最初から減算する2番目の値</target>
        </trans-unit>
        <trans-unit id="b405070775da4b4149b6f2cce33908cf297572c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - The daylight saving starting year.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -開始年夏時間。</target>
        </trans-unit>
        <trans-unit id="17685315f536727d7efece4b7334ee5a18664b9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - The year in the given date.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -指定された日付の年。</target>
        </trans-unit>
        <trans-unit id="a5fc686e559ec5c2b8622153840cd89720a8924a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the &lt;a href=&quot;calendar#YEAR&quot;&gt;&lt;code&gt;YEAR&lt;/code&gt;&lt;/a&gt; value</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; - &lt;a href=&quot;calendar#YEAR&quot;&gt; &lt;code&gt;YEAR&lt;/code&gt; の&lt;/a&gt;値</target>
        </trans-unit>
        <trans-unit id="a602e14acf624ec162cc5f110d9a6d62e95391c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the given year.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -指定された年。</target>
        </trans-unit>
        <trans-unit id="270f9ea90175cd72f31ea3e9b50e3109391a33ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the value used to set the &lt;code&gt;YEAR&lt;/code&gt; calendar field in the calendar.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -値が設定するために使用 &lt;code&gt;YEAR&lt;/code&gt; のカレンダーでカレンダーのフィールドを。</target>
        </trans-unit>
        <trans-unit id="ee19c380a21b0891ce6982cc02a609dda4f71e3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the value used to set the &lt;code&gt;YEAR&lt;/code&gt; calendar field.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; - &lt;code&gt;YEAR&lt;/code&gt; カレンダーフィールドの設定に使用される値。</target>
        </trans-unit>
        <trans-unit id="231b4e066af308ac9b1e83883c574777e719bb08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year in the given date.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -指定された日付の年。</target>
        </trans-unit>
        <trans-unit id="19fa2e2994e838cbec25223491c0bf55530326e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year minus 1900.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -年から1900を引いた年。</target>
        </trans-unit>
        <trans-unit id="cc0f06faf6630dfa85ad1c5bc58f793281286e73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year to check</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -年をチェックします</target>
        </trans-unit>
        <trans-unit id="746d52b27d612db4e54d2ec401322f6d2615c803" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year to create a transition for, not null</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -今年は、NOT NULLの移行を作成します</target>
        </trans-unit>
        <trans-unit id="458627b6dac7c41e5bd56ae80f12861c1a440be0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year to represent, from MIN_YEAR to MAX_YEAR</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; - MIN_YEARからMAX_YEARに、表現する年</target>
        </trans-unit>
        <trans-unit id="ca83c5e3d957ddd43048c48fcbb356257bc71825" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year to set in the result, from MIN_YEAR to MAX_YEAR</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -今年はMIN_YEARからMAX_YEARに、結果に設定します</target>
        </trans-unit>
        <trans-unit id="bf8541aa39046417ecb35d9dd5f36f38b01bea00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year to set in the returned year-month, from MIN_YEAR to MAX_YEAR</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; - MIN_YEARからMAX_YEARに戻った年月に設定する年、</target>
        </trans-unit>
        <trans-unit id="8834da0b94c36240b3e1c9c90d6596548fef7399" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year to use, from MIN_YEAR to MAX_YEAR</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; - MIN_YEARからMAX_YEARするために使用する年間、</target>
        </trans-unit>
        <trans-unit id="a4fe3a939220dc6cf326f9984c6b6399ed9ebd6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year to validate</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -検証する年</target>
        </trans-unit>
        <trans-unit id="5f02fa675c2421284753ac1de7b43de9816b5aa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; - the year value.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; -年の値。</target>
        </trans-unit>
        <trans-unit id="dfd632fc3560ab69c792f49487725bdc833c5510" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yearOfEra&lt;/code&gt; - the ISO year-of-era</source>
          <target state="translated">&lt;code&gt;yearOfEra&lt;/code&gt; -ISOの年号</target>
        </trans-unit>
        <trans-unit id="ffc1d67ee855472333b9c784df940554af58e105" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yearOfEra&lt;/code&gt; - the Japanese year-of-era</source>
          <target state="translated">&lt;code&gt;yearOfEra&lt;/code&gt; -日本の年号</target>
        </trans-unit>
        <trans-unit id="c1689c6e6f6ec1d8b7ddba160c40b37106ff276c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yearOfEra&lt;/code&gt; - the chronology year-of-era</source>
          <target state="translated">&lt;code&gt;yearOfEra&lt;/code&gt; -年表の年代学</target>
        </trans-unit>
        <trans-unit id="5ef7594da5f7006fde85a866d45c2c11f8a9132c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yearOfEra&lt;/code&gt; - the year-of-era</source>
          <target state="translated">&lt;code&gt;yearOfEra&lt;/code&gt; -年号</target>
        </trans-unit>
        <trans-unit id="3a56d6d0622fe479a2925261d821053584ca511f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;years&lt;/code&gt; - the amount of years, may be negative</source>
          <target state="translated">&lt;code&gt;years&lt;/code&gt; -年数、負の場合がある</target>
        </trans-unit>
        <trans-unit id="c15f974e0ff20a0525526b688542f3da6bd8bc74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;years&lt;/code&gt; - the number of years, may be negative</source>
          <target state="translated">&lt;code&gt;years&lt;/code&gt; -年数、負の場合がある</target>
        </trans-unit>
        <trans-unit id="2a397561f1e14284678fb87de88c2ce6c134e8bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;years&lt;/code&gt; - the number of years, positive or negative</source>
          <target state="translated">&lt;code&gt;years&lt;/code&gt; -正または負の年数</target>
        </trans-unit>
        <trans-unit id="e75bba4d21551f9b4b4246bee1c4696df3d5118d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;years&lt;/code&gt; - the years to add, may be negative</source>
          <target state="translated">&lt;code&gt;years&lt;/code&gt; -追加する年。負の場合がある</target>
        </trans-unit>
        <trans-unit id="bcba31004c7f557947ffd4fd6d834d7084c70b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;years&lt;/code&gt; - the years to represent, may be negative</source>
          <target state="translated">&lt;code&gt;years&lt;/code&gt; -表す年、負の場合がある</target>
        </trans-unit>
        <trans-unit id="6ca6fc35cf0cf3da74ad3712b1163809e391e300" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;years&lt;/code&gt; - the years to subtract, may be negative</source>
          <target state="translated">&lt;code&gt;years&lt;/code&gt; -減算する年。負の場合があります</target>
        </trans-unit>
        <trans-unit id="1a9183d0ed90c9bb484c7beb3f6134a04fbc1a21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yearsToAdd&lt;/code&gt; - the years to add, may be negative</source>
          <target state="translated">&lt;code&gt;yearsToAdd&lt;/code&gt; -追加する年。負の場合があります</target>
        </trans-unit>
        <trans-unit id="9cc562ca57bcc296a28ddd54d863c3681cdfeaa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yearsToAdd&lt;/code&gt; - the years to add, positive or negative</source>
          <target state="translated">&lt;code&gt;yearsToAdd&lt;/code&gt; -追加する年、正または負</target>
        </trans-unit>
        <trans-unit id="bc86e44652b472b7c75154e415af1c39af138353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yearsToSubtract&lt;/code&gt; - the years to subtract, may be negative</source>
          <target state="translated">&lt;code&gt;yearsToSubtract&lt;/code&gt; -減算する年。負の場合があります</target>
        </trans-unit>
        <trans-unit id="b20ef609c7b1a09152e04cddce7d226fe8353c13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yearsToSubtract&lt;/code&gt; - the years to subtract, positive or negative</source>
          <target state="translated">&lt;code&gt;yearsToSubtract&lt;/code&gt; -減算する年、正または負</target>
        </trans-unit>
        <trans-unit id="b3a90c1d1cb3be5f5dd84aaf12d9f3d186fe5b76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy&lt;/code&gt; is the year, as four decimal digits.</source>
          <target state="translated">&lt;code&gt;yyyy&lt;/code&gt; は年で、4桁の10進数です。</target>
        </trans-unit>
        <trans-unit id="03c163dc2392f53895c22ba24591e434f5ffb8f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;z&lt;/code&gt; - the new value for the field of &lt;code&gt;obj&lt;/code&gt; being modified</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; -変更される &lt;code&gt;obj&lt;/code&gt; のフィールドの新しい値</target>
        </trans-unit>
        <trans-unit id="a039def1ae645bc3fe2acfb59704bc106f640820" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;z&lt;/code&gt; - the new value of the indexed component</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; -インデックス付きコンポーネントの新しい値</target>
        </trans-unit>
        <trans-unit id="bb7ddda33f9add777a3d65a0e47a989f60a890fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zdt&lt;/code&gt; - the zoned date-time object to convert</source>
          <target state="translated">&lt;code&gt;zdt&lt;/code&gt; -変換するゾーン化された日時オブジェクト</target>
        </trans-unit>
        <trans-unit id="d3ff666b48509061d71ee046827b29781fbb17a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ze&lt;/code&gt; - the &lt;code&gt;ZipEntry&lt;/code&gt; object to create the &lt;code&gt;JarEntry&lt;/code&gt; from</source>
          <target state="translated">&lt;code&gt;ze&lt;/code&gt; - &lt;code&gt;ZipEntry&lt;/code&gt; オブジェクトを作成し &lt;code&gt;JarEntry&lt;/code&gt; からの</target>
        </trans-unit>
        <trans-unit id="7a93f9f4f4451a4a66e65054dcda1f69a3827470" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ze&lt;/code&gt; - the ZIP/JAR entry to be written</source>
          <target state="translated">&lt;code&gt;ze&lt;/code&gt; -書き込まれるZIP / JARエントリ</target>
        </trans-unit>
        <trans-unit id="690a7cc016346739c5c9715f39048a23b22f3299" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ze&lt;/code&gt; - the zip file entry</source>
          <target state="translated">&lt;code&gt;ze&lt;/code&gt; -zipファイルのエントリ</target>
        </trans-unit>
        <trans-unit id="4347acafd9caf26efddb85bf05977f1a109ba2a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zeroDigit&lt;/code&gt; - the character for zero</source>
          <target state="translated">&lt;code&gt;zeroDigit&lt;/code&gt; -ゼロの文字</target>
        </trans-unit>
        <trans-unit id="26399468e6bd3f4cdaac37164a63a7fb13e99461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zeroDigit&lt;/code&gt; - the character used for zero</source>
          <target state="translated">&lt;code&gt;zeroDigit&lt;/code&gt; -ゼロに使用される文字</target>
        </trans-unit>
        <trans-unit id="574476b6e45628a25836288c234886b8bfe37a8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the &lt;a href=&quot;timezone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; - &lt;a href=&quot;timezone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2a17ce82864bd4b125baee3f1f5e91011f80c234" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the given new time zone.</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -指定された新しいタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="4b5b84378b4ede1427c1d17c660513f32331ad84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the given time zone.</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -指定されたタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="a0482399113bccdc6731bcd8976c7f2ba08d559f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the new default &lt;code&gt;TimeZone&lt;/code&gt;, or null</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -新しいデフォルトの &lt;code&gt;TimeZone&lt;/code&gt; 、またはnull</target>
        </trans-unit>
        <trans-unit id="8f2cc5bd42d2e2e8615f6eaa3d568786b4bf6434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the new override zone, null if no override</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -新しいオーバーライドゾーン。オーバーライドがない場合はnull</target>
        </trans-unit>
        <trans-unit id="32064fc6a62e50fab3c1255ce5663fe1ab4575ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the time zone to use</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -使用するタイムゾーン</target>
        </trans-unit>
        <trans-unit id="7a9a6ee34e86485af42a5d179d1341554f9334a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the time-zone to change to, not null</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -変更するタイムゾーン、nullではない</target>
        </trans-unit>
        <trans-unit id="98182037a2012654cbc2a8b30dd7f7dab20f29e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the time-zone to use to convert the instant to date-time, not null</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -タイムゾーンの日時にインスタントを変換するために使用するために、NOT NULL</target>
        </trans-unit>
        <trans-unit id="57c21f0aa695416f2a5039b9ee07478d8d237380" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the time-zone to use, not null</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -nullではなく、使用するタイムゾーン</target>
        </trans-unit>
        <trans-unit id="74b9312807c8d250feee1bcb451af870c5a5cdae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the time-zone, not null</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -nullではないタイムゾーン</target>
        </trans-unit>
        <trans-unit id="3d9e4e085feda0f091d1a10d5b18b790c9b87e8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the time-zone, which may be an offset, not null</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -タイムゾーン。nullではなくオフセットの場合があります</target>
        </trans-unit>
        <trans-unit id="8e21ace349f09e582d57418b8f143dd67ccd10e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the zone ID to use, not null</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -nullではなく、使用するゾーンID</target>
        </trans-unit>
        <trans-unit id="8e58f075bf5d8c83d1e5954b9987d3de858cec12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; - the zone to combine with, not null</source>
          <target state="translated">&lt;code&gt;zone&lt;/code&gt; -と結合するゾーン、nullでありません</target>
        </trans-unit>
        <trans-unit id="f5ee1b25950521597779c311b0f744ed3fde4f90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoneId&lt;/code&gt; - a &lt;a href=&quot;../time/zoneid&quot;&gt;&lt;code&gt;ZoneId&lt;/code&gt;&lt;/a&gt; from which the time zone ID is obtained</source>
          <target state="translated">&lt;code&gt;zoneId&lt;/code&gt; -タイムゾーンIDを取得する&lt;a href=&quot;../time/zoneid&quot;&gt; &lt;code&gt;ZoneId&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bf20e1b1f62a76f74a4e0f03da4c3abf78db3dcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoneId&lt;/code&gt; - the time-zone ID, not null</source>
          <target state="translated">&lt;code&gt;zoneId&lt;/code&gt; -タイムゾーンID、nullではない</target>
        </trans-unit>
        <trans-unit id="c4b3f1fbf35b8b37726bbe315da149f444409423" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoneId&lt;/code&gt; - the zone ID as defined by &lt;code&gt;ZoneId&lt;/code&gt;, not null</source>
          <target state="translated">&lt;code&gt;zoneId&lt;/code&gt; - nullではなく、 &lt;code&gt;ZoneId&lt;/code&gt; によって定義されたゾーンID</target>
        </trans-unit>
        <trans-unit id="0a4d3880a9ea862256d5b0ddb8d0f15928cce1d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoneStrings[i][0]&lt;/code&gt; - time zone ID</source>
          <target state="translated">&lt;code&gt;zoneStrings[i][0]&lt;/code&gt; -タイムゾーンID</target>
        </trans-unit>
        <trans-unit id="2d2e27ebf0bb3e54baeb1b1688738f369fa6fc23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoneStrings[i][1]&lt;/code&gt; - long name of zone in standard time</source>
          <target state="translated">&lt;code&gt;zoneStrings[i][1]&lt;/code&gt; -標準時のゾーンの長い名前</target>
        </trans-unit>
        <trans-unit id="a6b89fc4f2991cf8c21f47da61cb24764e9da6e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoneStrings[i][2]&lt;/code&gt; - short name of zone in standard time</source>
          <target state="translated">&lt;code&gt;zoneStrings[i][2]&lt;/code&gt; -標準時のゾーンの短い名前</target>
        </trans-unit>
        <trans-unit id="0f7d1bef6ccf53eff6fde9797b863ace1304749e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoneStrings[i][3]&lt;/code&gt; - long name of zone in daylight saving time</source>
          <target state="translated">&lt;code&gt;zoneStrings[i][3]&lt;/code&gt; -夏時間のゾーンの長い名前</target>
        </trans-unit>
        <trans-unit id="7c769e2108e3a35d00be3fc721ce3adbb1999232" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoneStrings[i][4]&lt;/code&gt; - short name of zone in daylight saving time</source>
          <target state="translated">&lt;code&gt;zoneStrings[i][4]&lt;/code&gt; -夏時間のゾーンの短い名前</target>
        </trans-unit>
        <trans-unit id="39c3fe123315908d7299301049a428cfa749a0e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zzz&lt;/code&gt; is the time zone (and may reflect daylight saving time). Standard time zone abbreviations include those recognized by the method &lt;code&gt;parse&lt;/code&gt;. If time zone information is not available, then &lt;code&gt;zzz&lt;/code&gt; is empty - that is, it consists of no characters at all.</source>
          <target state="translated">&lt;code&gt;zzz&lt;/code&gt; はタイムゾーンです（夏時間を反映している場合があります）。標準タイムゾーンの略語には、 &lt;code&gt;parse&lt;/code&gt; メソッドで認識されるものがあります。タイムゾーン情報が利用できない場合、 &lt;code&gt;zzz&lt;/code&gt; は空です。つまり、文字がまったく含まれていません。</target>
        </trans-unit>
        <trans-unit id="0a784154ff064cbc11a4a38d5bcac2cca791a98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;})&lt;/code&gt; and &lt;code&gt;(??{&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;})&lt;/code&gt; and &lt;code&gt;(??{&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4392f0fcfc6d35bc9959d96be75aa17c4f1f47f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;})&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;})&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="e50f5d7a3d72bd26fb139aa1525c1e07287bcbc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;}&lt;/code&gt; does not match if the input has that property.</source>
          <target state="translated">&lt;code&gt;}&lt;/code&gt; does not match if the input has that property.</target>
        </trans-unit>
        <trans-unit id="680756cb4170f1e566402381895b555e54b0b376" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;}&lt;/code&gt; for &lt;a href=&quot;#groupname&quot;&gt;named-capturing group&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;}&lt;/code&gt; for &lt;a href=&quot;#groupname&quot;&gt;named-capturing group&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e35a94f14dd0f7e34bb15c2c855e89e22f6d44ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;}&lt;/code&gt; for a Unicode character by its name.</source>
          <target state="translated">&lt;code&gt;}&lt;/code&gt; for a Unicode character by its name.</target>
        </trans-unit>
        <trans-unit id="e3384b206c0bf74bc5ee6e0e28c5c81e7a0455bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;}&lt;/code&gt; for the</source>
          <target state="translated">&lt;code&gt;}&lt;/code&gt; for the</target>
        </trans-unit>
        <trans-unit id="9caf672a036ee2e6615785b1fbf45821e09833af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;}&lt;/code&gt; matches if the input has the property</source>
          <target state="translated">&lt;code&gt;}&lt;/code&gt; matches if the input has the property</target>
        </trans-unit>
        <trans-unit id="b049baeef5b366b01a245c57c044e403663d2224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;}&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;}&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a3e47aba3a9bd53bb41d970a1e0200393d1727e6" translate="yes" xml:space="preserve">
          <source>&lt;em id=&quot;privacc&quot;&gt;Discussion of private access:&lt;/em&gt; We say that a lookup has &lt;em&gt;private access&lt;/em&gt; if its &lt;a href=&quot;methodhandles.lookup#lookupModes--&quot;&gt;lookup modes&lt;/a&gt; include the possibility of accessing &lt;code&gt;private&lt;/code&gt; members. As documented in the relevant methods elsewhere, only lookups with private access possess the following capabilities:</source>
          <target state="translated">&lt;em id=&quot;privacc&quot;&gt;プライベートアクセスの説明：&lt;/em&gt;&lt;a href=&quot;methodhandles.lookup#lookupModes--&quot;&gt;ルックアップモード&lt;/a&gt;に &lt;code&gt;private&lt;/code&gt; メンバーへのアクセスの可能性が含まれている場合、ルックアップには&lt;em&gt;プライベートアクセス&lt;/em&gt;があると言います。他の関連メソッドで説明されているように、プライベートアクセスを持つルックアップのみが次の機能を備えています。</target>
        </trans-unit>
        <trans-unit id="eb29217818880d067977bb3340b44d21a23898e6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Direct handoffs.&lt;/em&gt; A good default choice for a work queue is a &lt;a href=&quot;synchronousqueue&quot;&gt;&lt;code&gt;SynchronousQueue&lt;/code&gt;&lt;/a&gt; that hands off tasks to threads without otherwise holding them. Here, an attempt to queue a task will fail if no threads are immediately available to run it, so a new thread will be constructed. This policy avoids lockups when handling sets of requests that might have internal dependencies. Direct handoffs generally require unbounded maximumPoolSizes to avoid rejection of new submitted tasks. This in turn admits the possibility of unbounded thread growth when commands continue to arrive on average faster than they can be processed.</source>
          <target state="translated">&lt;em&gt;直接ハンドオフ。&lt;/em&gt;ワークキューの適切なデフォルトの選択は、タスクを保持せずにスレッドにタスクを渡す&lt;a href=&quot;synchronousqueue&quot;&gt; &lt;code&gt;SynchronousQueue&lt;/code&gt; &lt;/a&gt;です。ここで、タスクを実行するためにすぐに使用できるスレッドがない場合、タスクをキューに入れる試みは失敗するため、新しいスレッドが構築されます。このポリシーは、内部依存関係がある可能性のある要求のセットを処理するときにロックアップを回避します。直接ハンドオフでは、通常、新しいサブミットされたタスクの拒否を回避するために無制限のmaximumPoolSizesが必要です。これにより、コマンドの処理速度よりも平均的に速い速度でコマンドが到着し続けると、無制限のスレッドが増加する可能性が認められます。</target>
        </trans-unit>
        <trans-unit id="b8bc2aa5df18a1a7507e893f26a5550eed9abf50" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; Unbounded queues.&lt;/em&gt; Using an unbounded queue (for example a &lt;a href=&quot;linkedblockingqueue&quot;&gt;&lt;code&gt;LinkedBlockingQueue&lt;/code&gt;&lt;/a&gt; without a predefined capacity) will cause new tasks to wait in the queue when all corePoolSize threads are busy. Thus, no more than corePoolSize threads will ever be created. (And the value of the maximumPoolSize therefore doesn't have any effect.) This may be appropriate when each task is completely independent of others, so tasks cannot affect each others execution; for example, in a web page server. While this style of queuing can be useful in smoothing out transient bursts of requests, it admits the possibility of unbounded work queue growth when commands continue to arrive on average faster than they can be processed.</source>
          <target state="translated">&lt;em&gt;無制限のキュー。&lt;/em&gt;無制限のキュー（たとえば、事前定義された容量のない&lt;a href=&quot;linkedblockingqueue&quot;&gt; &lt;code&gt;LinkedBlockingQueue&lt;/code&gt; &lt;/a&gt;）を使用すると、すべてのcorePoolSizeスレッドがビジー状態のときに新しいタスクがキューで待機します。したがって、corePoolSizeスレッドのみが作成されます。 （したがって、maximumPoolSizeの値は効果がありません。）これは、各タスクが他のタスクから完全に独立している場合に適している可能性があります。たとえば、Webページサーバーです。このスタイルのキューイングは、リクエストの一時的なバーストをスムーズにするのに役立ちますが、コマンドが処理されるよりも平均的に速く到着し続ける場合、無制限のワークキューの増加の可能性を認めます。</target>
        </trans-unit>
        <trans-unit id="3adb85f91570b2dd24ad8bc52375538c90a65cc2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Note: JVM internal methods named &lt;code&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/code&gt; are not visible to this API, even though the &lt;code&gt;invokespecial&lt;/code&gt; instruction can refer to them in special circumstances. Use &lt;a href=&quot;methodhandles.lookup#findConstructor-java.lang.Class-java.lang.invoke.MethodType-&quot;&gt;&lt;code&gt;findConstructor&lt;/code&gt;&lt;/a&gt; to access instance initialization methods in a safe manner.)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(Note: JVM internal methods named &lt;code&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/code&gt; are not visible to this API, even though the &lt;code&gt;invokespecial&lt;/code&gt; instruction can refer to them in special circumstances. Use &lt;a href=&quot;methodhandles.lookup#findConstructor-java.lang.Class-java.lang.invoke.MethodType-&quot;&gt;&lt;code&gt;findConstructor&lt;/code&gt;&lt;/a&gt; to access instance initialization methods in a safe manner.)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15dce4bd9d373b2401e403a6dadbb3c93b4ced8e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Note: The invoker method is not available via the Core Reflection API. An attempt to call &lt;a href=&quot;../reflect/method#invoke-java.lang.Object-java.lang.Object...-&quot;&gt;java.lang.reflect.Method.invoke&lt;/a&gt; on the declared &lt;code&gt;invokeExact&lt;/code&gt; or &lt;code&gt;invoke&lt;/code&gt; method will raise an &lt;a href=&quot;../unsupportedoperationexception&quot;&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt;&lt;/a&gt;.)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(Note: The invoker method is not available via the Core Reflection API. An attempt to call &lt;a href=&quot;../reflect/method#invoke-java.lang.Object-java.lang.Object...-&quot;&gt;java.lang.reflect.Method.invoke&lt;/a&gt; on the declared &lt;code&gt;invokeExact&lt;/code&gt; or &lt;code&gt;invoke&lt;/code&gt; method will raise an &lt;a href=&quot;../unsupportedoperationexception&quot;&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt;&lt;/a&gt;.)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bdad25e6cdc963a77457a93c07c5027772cb82f0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a name=&quot;relative_name&quot;&gt;Relative names&lt;/a&gt;:&lt;/em&gt; some methods in this interface use relative names. A relative name is a non-null, non-empty sequence of path segments separated by '/'. '.' or '..' are invalid path segments. A valid relative name must match the &quot;path-rootless&quot; rule of &lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;, section 3.3. Informally, this should be true:</source>
          <target state="translated">&lt;em&gt;&lt;a name=&quot;relative_name&quot;&gt;相対名&lt;/a&gt;：&lt;/em&gt;このインターフェースの一部のメソッドは&lt;em&gt;相対名を&lt;/em&gt;使用しています。相対名は、 '/'で区切られたパスセグメントのnull以外で空でないシーケンスです。「。」または「..」は無効なパスセグメントです。有効な相対名は、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt; RFC 3986の&lt;/a&gt;セクション3.3の「パスルートレス」ルールに一致する必要があります。非公式に、これは真実であるべきです：</target>
        </trans-unit>
        <trans-unit id="2895e593710ffc8a6ac1eb5237e08dff7285b4c4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;nativelibname&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;nativelibname&lt;/code&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4fc438be473366b872fa93b208a2eef31a4773c0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars&quot;&gt; World Wide Web Consortium Recommendation&lt;/a&gt; states that UTF-8 should be used. Not doing so may introduce incompatibilities.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars&quot;&gt;ワールドワイドウェブコンソーシアム勧告&lt;/a&gt; UTF-8を使用する必要があることを述べています。そうしないと、非互換性が生じる可能性があります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9007787b60aee79425dc80c43443e07c55117b29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Add rule 1&lt;/em&gt;. The value of &lt;code&gt;field&lt;/code&gt; after the call minus the value of &lt;code&gt;field&lt;/code&gt; before the call is &lt;code&gt;amount&lt;/code&gt;, modulo any overflow that has occurred in &lt;code&gt;field&lt;/code&gt;. Overflow occurs when a field value exceeds its range and, as a result, the next larger field is incremented or decremented and the field value is adjusted back into its range.</source>
          <target state="translated">&lt;em&gt;ルール1を追加し&lt;/em&gt;ます。呼び出し後の &lt;code&gt;field&lt;/code&gt; の値から呼び出し前の &lt;code&gt;field&lt;/code&gt; の値を引いたものが、 &lt;code&gt;field&lt;/code&gt; 発生したオーバーフローを法として &lt;code&gt;amount&lt;/code&gt; になります。オーバーフローは、フィールド値がその範囲を超えると発生し、その結果、次に大きいフィールドが増分または減分され、フィールド値がその範囲に調整されます。</target>
        </trans-unit>
        <trans-unit id="ce666c0e1fec22f3b65ba73b7f7c83155df63f61" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Add rule 2&lt;/em&gt;. If a smaller field is expected to be invariant, but it is impossible for it to be equal to its prior value because of changes in its minimum or maximum after &lt;code&gt;field&lt;/code&gt; is changed, then its value is adjusted to be as close as possible to its expected value. A smaller field represents a smaller unit of time. &lt;code&gt;HOUR&lt;/code&gt; is a smaller field than &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;. No adjustment is made to smaller fields that are not expected to be invariant. The calendar system determines what fields are expected to be invariant.</source>
          <target state="translated">&lt;em&gt;ルール2を追加し&lt;/em&gt;ます。より小さいフィールドが不変であると予想されるが、 &lt;code&gt;field&lt;/code&gt; が変更された後にその最小値または最大値が変更されたために、以前の値と同じにすることが不可能である場合、その値は予想される値にできるだけ近づくように調整されます値。フィールドが小さいほど、時間の単位が小さくなります。 &lt;code&gt;HOUR&lt;/code&gt; は &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; よりも小さいフィールドです。不変であると予期されない小さなフィールドには調整は行われません。カレンダーシステムは、どのフィールドが不変であると予想されるかを決定します。</target>
        </trans-unit>
        <trans-unit id="8611f806b35c966cfe289bdc0f2be3d05a8be1bf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Authentication&lt;/em&gt;. In most modes, SSL provides peer authentication. Servers are usually authenticated, and clients may be authenticated as requested by servers.</source>
          <target state="translated">&lt;em&gt;認証&lt;/em&gt;。ほとんどのモードで、SSLはピア認証を提供します。サーバーは通常認証され、クライアントはサーバーの要求に応じて認証されます。</target>
        </trans-unit>
        <trans-unit id="d26a8c2b43b8e01afcaa90877c2e9be83ca9bb84" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Authentication&lt;/em&gt;. In most modes, SSL/TLS provides peer authentication. Servers are usually authenticated, and clients may be authenticated as requested by servers.</source>
          <target state="translated">&lt;em&gt;認証&lt;/em&gt;。ほとんどのモードで、SSL / TLSはピア認証を提供します。サーバーは通常認証され、クライアントはサーバーの要求に応じて認証されます。</target>
        </trans-unit>
        <trans-unit id="de386c6a3b909e35c75674a87c52687265e4ace4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Blocks&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Blocks&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3968dca0f762a29ff9650c575ce0929845abe49" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Bounded queues.&lt;/em&gt; A bounded queue (for example, an &lt;a href=&quot;arrayblockingqueue&quot;&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;&lt;/a&gt;) helps prevent resource exhaustion when used with finite maximumPoolSizes, but can be more difficult to tune and control. Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput. If tasks frequently block (for example if they are I/O bound), a system may be able to schedule time for more threads than you otherwise allow. Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput.</source>
          <target state="translated">&lt;em&gt;境界付きキュー。&lt;/em&gt;制限付きキュー（たとえば、&lt;a href=&quot;arrayblockingqueue&quot;&gt; &lt;code&gt;ArrayBlockingQueue&lt;/code&gt; &lt;/a&gt;）は、有限のmaximumPoolSizesで使用するとリソースの枯渇を防ぐのに役立ちますが、調整と制御がより困難になる可能性があります。キューサイズと最大プールサイズは互いにトレードオフの可能性があります。大きなキューと小さなプールを使用すると、CPU使用率、OSリソース、およびコンテキスト切り替えのオーバーヘッドが最小限に抑えられますが、人為的にスループットが低下する可能性があります。タスクが頻繁にブロックする場合（たとえば、I / Oバインドされている場合）、システムは、ユーザーが許可するよりも多くのスレッドの時間をスケジュールできる場合があります。小さなキューを使用するには、通常、より大きなプールサイズが必要です。これにより、CPUの使用量が増えますが、許容できないスケジューリングオーバーヘッドが発生し、スループットも低下します。</target>
        </trans-unit>
        <trans-unit id="2d3214bf748fdf7ac3a878035d8d436f775380ad" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Bridging.&lt;/em&gt; It is sometimes useful to implement multiple variations of the method signature, involving argument or return type adaptation. This occurs when multiple distinct VM signatures for a method are logically considered to be the same method by the language. The flag &lt;code&gt;FLAG_BRIDGES&lt;/code&gt; indicates that a list of additional &lt;code&gt;MethodType&lt;/code&gt;s will be provided, each of which will be implemented by the resulting function object. These methods will share the same name and instantiated type.</source>
          <target state="translated">&lt;em&gt;ブリッジング。&lt;/em&gt;引数や戻り値の型の適合など、メソッドシグネチャの複数のバリエーションを実装すると便利な場合があります。これは、メソッドの複数の異なるVMシグネチャが言語によって論理的に同じメソッドであると見なされた場合に発生します。フラグ &lt;code&gt;FLAG_BRIDGES&lt;/code&gt; は、追加の &lt;code&gt;MethodType&lt;/code&gt; のリストが提供されることを示します。それぞれのリストは、結果の関数オブジェクトによって実装されます。これらのメソッドは、同じ名前とインスタンス化されたタイプを共有します。</target>
        </trans-unit>
        <trans-unit id="dc7ee344a23f221604c609bd462733973e839b3e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Capture&lt;/em&gt; occurs when the &lt;code&gt;CallSite&lt;/code&gt;'s target is invoked, typically through an &lt;code&gt;invokedynamic&lt;/code&gt; call site, producing a function object. This may occur many times for a single factory &lt;code&gt;CallSite&lt;/code&gt;. Capture may involve allocation of a new function object, or may return an existing function object. The behavior &lt;code&gt;MethodHandle&lt;/code&gt; may have additional parameters beyond those of the specified interface method; these are referred to as &lt;em&gt;captured parameters&lt;/em&gt;, which must be provided as arguments to the &lt;code&gt;CallSite&lt;/code&gt; target, and which may be early-bound to the behavior &lt;code&gt;MethodHandle&lt;/code&gt;. The number of captured parameters and their types are determined during linkage.</source>
          <target state="translated">&lt;em&gt;キャプチャ&lt;/em&gt;は &lt;code&gt;CallSite&lt;/code&gt; のターゲットが呼び出されたときに、通常は &lt;code&gt;invokedynamic&lt;/code&gt; 呼び出しサイトを介して行われ、関数オブジェクトを生成します。これは、単一のファクトリ &lt;code&gt;CallSite&lt;/code&gt; で何度も発生する可能性があります。キャプチャには、新しい関数オブジェクトの割り当てが含まれる場合と、既存の関数オブジェクトが返される場合があります。動作 &lt;code&gt;MethodHandle&lt;/code&gt; には、指定されたインターフェイスメソッドのパラメーター以外のパラメーターが追加される場合があります。これらは、&lt;em&gt;キャプチャ&lt;/em&gt;され&lt;em&gt;たパラメータ&lt;/em&gt;と呼ば&lt;em&gt;れます&lt;/em&gt;。これは、 &lt;code&gt;CallSite&lt;/code&gt; ターゲットへの引数として提供する必要があり、動作 &lt;code&gt;MethodHandle&lt;/code&gt; に事前にバインドできます。キャプチャーされたパラメーターの数とそのタイプは、リンク中に決定されます。</target>
        </trans-unit>
        <trans-unit id="e767d1c7bf1800f0080d8cd1d30393edb7d6359b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Cipher Suite Name.&lt;/em&gt; Cipher suites describe the kind of cryptographic protection that's used by connections in a particular session.</source>
          <target state="translated">&lt;em&gt;暗号スイート名。&lt;/em&gt;暗号スイートは、特定のセッションの接続で使用される種類の暗号保護を記述します。</target>
        </trans-unit>
        <trans-unit id="0aa00bc7a1f1f4666ef0079448535b727931efbf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Confidentiality (Privacy Protection)&lt;/em&gt;. In most modes, SSL encrypts data being sent between client and server. This protects the confidentiality of data, so that passive wiretappers won't see sensitive data such as financial information or personal information of many kinds.</source>
          <target state="translated">&lt;em&gt;機密性（プライバシー保護）&lt;/em&gt;。ほとんどのモードでは、SSLはクライアントとサーバー間で送信されるデータを暗号化します。これによりデータの機密性が保護されるため、受動的な盗聴者は、財務情報やさまざまな種類の個人情報などの機密データを見ることができません。</target>
        </trans-unit>
        <trans-unit id="7ac8381107528bb64439d7573163bc975080cf7c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Confidentiality (Privacy Protection)&lt;/em&gt;. In most modes, SSL/TLS encrypts data being sent between client and server. This protects the confidentiality of data, so that passive wiretappers won't see sensitive data such as financial information or personal information of many kinds.</source>
          <target state="translated">&lt;em&gt;機密性（プライバシー保護）&lt;/em&gt;。ほとんどのモードでは、SSL / TLSはクライアントとサーバー間で送信されるデータを暗号化します。これによりデータの機密性が保護されるため、受動的な盗聴者は、財務情報やさまざまな種類の個人情報などの機密データを見ることができません。</target>
        </trans-unit>
        <trans-unit id="dd43ef16d7f946166f6f2a5f1ae695e5985d528b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; A &lt;a href=&quot;methodtype#genericMethodType-int-boolean-&quot;&gt;general method type&lt;/a&gt; is one which mentions only &lt;code&gt;Object&lt;/code&gt; arguments and return values. An invoker for such a type is capable of calling any method handle of the same arity as the general type.</source>
          <target state="translated">&lt;em&gt;議論：&lt;/em&gt;&lt;a href=&quot;methodtype#genericMethodType-int-boolean-&quot;&gt;一般的な方法のタイプは、&lt;/a&gt;唯一言及一つである &lt;code&gt;Object&lt;/code&gt; 引数及び戻り値を。このようなタイプの呼び出し元は、一般的なタイプと同じアリティのメソッドハンドルを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b3955b2825f692d4bdbf6f2195fef43b7eda14fb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; Access checks only apply to named and reflected methods, constructors, and fields. Other method handle creation methods, such as &lt;a href=&quot;methodhandle#asType-java.lang.invoke.MethodType-&quot;&gt;&lt;code&gt;MethodHandle.asType&lt;/code&gt;&lt;/a&gt;, do not require any access checks, and are used independently of any &lt;code&gt;Lookup&lt;/code&gt; object.</source>
          <target state="translated">&lt;em&gt;ディスカッション：&lt;/em&gt;アクセスチェックは、名前付きおよびリフレクトされたメソッド、コンストラクター、およびフィールドにのみ適用されます。&lt;a href=&quot;methodhandle#asType-java.lang.invoke.MethodType-&quot;&gt; &lt;code&gt;MethodHandle.asType&lt;/code&gt; &lt;/a&gt;などの他のメソッドハンドル作成メソッドは、アクセスチェックを必要とせず、 &lt;code&gt;Lookup&lt;/code&gt; オブジェクトとは独立して使用されます。</target>
        </trans-unit>
        <trans-unit id="02952baf6f312ba49a844c119741b7424c6030df" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; Because of the one-way nature of invalidation, once a switch point begins to return true for &lt;code&gt;hasBeenInvalidated&lt;/code&gt;, it will always do so in the future. On the other hand, a valid switch point visible to other threads may be invalidated at any moment, due to a request by another thread.</source>
          <target state="translated">&lt;em&gt;ディスカッション：&lt;/em&gt;無効化には一方向の性質があるため、スイッチポイントが &lt;code&gt;hasBeenInvalidated&lt;/code&gt; に対してtrueを返し始めると、将来は常にそうなります。一方、他のスレッドからの要求により、他のスレッドから見える有効な切り替えポイントはいつでも無効になることがあります。</target>
        </trans-unit>
        <trans-unit id="456be61776bdc5fa398da0885c3a694b97a3ea80" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; For example, the caller-sensitive method &lt;a href=&quot;../class#forName-java.lang.String-&quot;&gt;&lt;code&gt;Class.forName(x)&lt;/code&gt;&lt;/a&gt; can return varying classes or throw varying exceptions, depending on the class loader of the class that calls it. A public lookup of &lt;code&gt;Class.forName&lt;/code&gt; will fail, because there is no reasonable way to determine its bytecode behavior.</source>
          <target state="translated">&lt;em&gt;説明：&lt;/em&gt;たとえば、呼び出し元に依存するメソッド&lt;a href=&quot;../class#forName-java.lang.String-&quot;&gt; &lt;code&gt;Class.forName(x)&lt;/code&gt; &lt;/a&gt;は、それを呼び出すクラスのクラスローダーに応じて、さまざまなクラスを返したり、さまざまな例外をスローしたりできます。 &lt;code&gt;Class.forName&lt;/code&gt; のパブリックルックアップは失敗します。これは、バイトコードの動作を決定する適切な方法がないためです。</target>
        </trans-unit>
        <trans-unit id="a90bbf1e071e924bd13ec25863d63bd94df1c9ac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; For performance reasons, &lt;code&gt;invalidateAll&lt;/code&gt; is not a virtual method on a single switch point, but rather applies to a set of switch points. Some implementations may incur a large fixed overhead cost for processing one or more invalidation operations, but a small incremental cost for each additional invalidation. In any case, this operation is likely to be costly, since other threads may have to be somehow interrupted in order to make them notice the updated switch point state. However, it may be observed that a single call to invalidate several switch points has the same formal effect as many calls, each on just one of the switch points.</source>
          <target state="translated">&lt;em&gt;ディスカッション：&lt;/em&gt;パフォーマンス上の理由から、 &lt;code&gt;invalidateAll&lt;/code&gt; は単一のスイッチポイントの仮想メソッドではなく、一連のスイッチポイントに適用されます。一部の実装では、1つ以上の無効化操作の処理に大きな固定オーバーヘッドコストが発生する可能性がありますが、追加の無効化ごとに小さな増分コストが発生します。いずれの場合も、更新されたスイッチポイントの状態を他のスレッドに通知するために、他のスレッドを中断する必要があるため、この操作はコストがかかる可能性があります。ただし、複数のスイッチポイントを無効にする単一の呼び出しは、それぞれがスイッチポイントの1つだけである多くの呼び出しと同じ正式な効果を持つことが観察される場合があります。</target>
        </trans-unit>
        <trans-unit id="17811bccbd61dd2f5305e4fd6a4fd30d2615ff9e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; For performance reasons, &lt;code&gt;syncAll&lt;/code&gt; is not a virtual method on a single call site, but rather applies to a set of call sites. Some implementations may incur a large fixed overhead cost for processing one or more synchronization operations, but a small incremental cost for each additional call site. In any case, this operation is likely to be costly, since other threads may have to be somehow interrupted in order to make them notice the updated target value. However, it may be observed that a single call to synchronize several sites has the same formal effect as many calls, each on just one of the sites.</source>
          <target state="translated">&lt;em&gt;ディスカッション：&lt;/em&gt;パフォーマンス上の理由から、 &lt;code&gt;syncAll&lt;/code&gt; は単一の呼び出しサイトでの仮想メソッドではなく、一連の呼び出しサイトに適用されます。一部の実装では、1つ以上の同期操作の処理に大きな固定オーバーヘッドコストが発生する可能性がありますが、追加の呼び出しサイトごとにわずかな増分コストが発生します。いずれの場合も、更新されたターゲット値に気付くために他のスレッドを中断する必要があるため、この操作はコストがかかる可能性があります。ただし、複数のサイトを同期するための1回の呼び出しは、それぞれが1つのサイトだけで行われる多くの呼び出しと同じ正式な効果を持つことが観察される場合があります。</target>
        </trans-unit>
        <trans-unit id="c56321a108f1279c9cd2b1c56da00a63188ddfb8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; Invoker method handles can be useful when working with variable method handles of unknown types. For example, to emulate an &lt;code&gt;invokeExact&lt;/code&gt; call to a variable method handle &lt;code&gt;M&lt;/code&gt;, extract its type &lt;code&gt;T&lt;/code&gt;, look up the invoker method &lt;code&gt;X&lt;/code&gt; for &lt;code&gt;T&lt;/code&gt;, and call the invoker method, as &lt;code&gt;X.invoke(T, A...)&lt;/code&gt;. (It would not work to call &lt;code&gt;X.invokeExact&lt;/code&gt;, since the type &lt;code&gt;T&lt;/code&gt; is unknown.) If spreading, collecting, or other argument transformations are required, they can be applied once to the invoker &lt;code&gt;X&lt;/code&gt; and reused on many &lt;code&gt;M&lt;/code&gt; method handle values, as long as they are compatible with the type of &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;ディスカッション：&lt;/em&gt;呼び出し元のメソッドハンドルは、不明なタイプの変数メソッドハンドルを操作するときに役立ちます。例えば、エミュレートする &lt;code&gt;invokeExact&lt;/code&gt; 可変メソッドハンドルへの呼び出し &lt;code&gt;M&lt;/code&gt; を、そのタイプ抽出 &lt;code&gt;T&lt;/code&gt; を、呼出しメソッドルックアップ &lt;code&gt;X&lt;/code&gt; のための &lt;code&gt;T&lt;/code&gt; のように、および呼び出しメソッドを呼び出し &lt;code&gt;X.invoke(T, A...)&lt;/code&gt; 。（タイプ &lt;code&gt;T&lt;/code&gt; が不明であるため、 &lt;code&gt;X.invokeExact&lt;/code&gt; を呼び出すことはできません。）拡散、収集、またはその他の引数変換が必要な場合、それらを呼び出し元 &lt;code&gt;X&lt;/code&gt; に一度適用して、多くの &lt;code&gt;M&lt;/code&gt; メソッドハンドル値で再利用できます。彼らはのタイプと互換性がある限り &lt;code&gt;X&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f53103be3fb19c8253f40e4120b0f36e7d150a7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; Switch points are useful without subclassing. They may also be subclassed. This may be useful in order to associate application-specific invalidation logic with the switch point. Notice that there is no permanent association between a switch point and the method handles it produces and consumes. The garbage collector may collect method handles produced or consumed by a switch point independently of the lifetime of the switch point itself.</source>
          <target state="translated">&lt;em&gt;ディスカッション：&lt;/em&gt;スイッチポイントはサブクラス化なしで役立ちます。それらはサブクラス化されることもあります。これは、アプリケーション固有の無効化ロジックをスイッチポイントに関連付けるために役立ちます。スイッチポイントと、それが生成および消費するメソッドハンドルとの間に永続的な関連付けがないことに注意してください。ガベージコレクターは、スイッチポイント自体の有効期間とは無関係に、スイッチポイントによって生成または消費されるメソッドハンドルを収集できます。</target>
        </trans-unit>
        <trans-unit id="662cfbbeca27fce7c089befb73dc4dac49c4bd43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; The equivalence between looked-up method handles and underlying class members and bytecode behaviors can break down in a few ways:</source>
          <target state="translated">&lt;em&gt;ディスカッション：&lt;/em&gt;ルックアップされたメソッドハンドルと基になるクラスメンバー、およびバイトコードの動作が同等であることは、いくつかの方法で解決できます。</target>
        </trans-unit>
        <trans-unit id="2a6ba7da17ba72be772e2c7413119bd87771bdd7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; The lookup class can be changed to any other class &lt;code&gt;C&lt;/code&gt; using an expression of the form &lt;a href=&quot;methodhandles.lookup#in-java.lang.Class-&quot;&gt;&lt;code&gt;publicLookup().in(C.class)&lt;/code&gt;&lt;/a&gt;. Since all classes have equal access to public names, such a change would confer no new access rights. A public lookup object is always subject to &lt;a href=&quot;methodhandles.lookup#secmgr&quot;&gt;security manager checks&lt;/a&gt;. Also, it cannot access &lt;a href=&quot;methodhandles.lookup#callsens&quot;&gt;caller sensitive methods&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;説明：&lt;/em&gt;&lt;a href=&quot;methodhandles.lookup#in-java.lang.Class-&quot;&gt; &lt;code&gt;publicLookup().in(C.class)&lt;/code&gt; &lt;/a&gt;という形式の式を使用して、ルックアップクラスを他のクラス &lt;code&gt;C&lt;/code&gt; に変更できます。すべてのクラスがパブリック名に同等のアクセス権を持っているため、このような変更によって新しいアクセス権が付与されることはありません。パブリックルックアップオブジェクトは、常に&lt;a href=&quot;methodhandles.lookup#secmgr&quot;&gt;セキュリティマネージャーチェックの&lt;/a&gt;対象になります。また、&lt;a href=&quot;methodhandles.lookup#callsens&quot;&gt;呼び出し元に依存するメソッドに&lt;/a&gt;アクセスできません。</target>
        </trans-unit>
        <trans-unit id="4a177b4aa1f165fffb11c0ccfa45d23365c1ffcf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; These rules are designed as a dynamically-typed variation of the Java rules for variable arity methods. In both cases, callers to a variable arity method or method handle can either pass zero or more positional arguments, or else pass pre-collected arrays of any length. Users should be aware of the special role of the final argument, and of the effect of a type match on that final argument, which determines whether or not a single trailing argument is interpreted as a whole array or a single element of an array to be collected. Note that the dynamic type of the trailing argument has no effect on this decision, only a comparison between the symbolic type descriptor of the call site and the type descriptor of the method handle.)</source>
          <target state="translated">&lt;em&gt;ディスカッション：&lt;/em&gt;これらのルールは、可変アリティメソッドのJavaルールの動的型付けバリエーションとして設計されています。どちらの場合も、可変アリティメソッドまたはメソッドハンドルの呼び出し元は、0個以上の位置引数を渡すか、事前に収集された任意の長さの配列を渡すことができます。ユーザーは、最後の引数の特別な役割と、最後の引数に対する型の一致の影響に注意する必要があります。これは、単一の後続の引数が配列全体として解釈されるか、配列の単一の要素として解釈されるかを決定します集めました。後続の引数の動的な型はこの決定に影響を与えないことに注意してください。呼び出しサイトのシンボリック型記述子とメソッドハンドルの型記述子の比較のみです。）</target>
        </trans-unit>
        <trans-unit id="f53773c69289ff81bb3d31f68095177e0229899f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Discussion:&lt;/em&gt; These rules do not enable the JVM to duplicate dynamic call sites, or to issue &amp;ldquo;causeless&amp;rdquo; bootstrap method calls. Every dynamic call site transitions at most once from unlinked to linked, just before its first invocation. There is no way to undo the effect of a completed bootstrap method call.</source>
          <target state="translated">&lt;em&gt;ディスカッション：&lt;/em&gt;これらのルールでは、JVMが動的呼び出しサイトを複製したり、「原因のない」ブートストラップメソッド呼び出しを発行したりすることはできません。すべての動的呼び出しサイトは、最初の呼び出しの直前に、リンクされていない状態からリンクされた状態に最大で一度遷移します。完了したブートストラップメソッド呼び出しの効果を元に戻す方法はありません。</target>
        </trans-unit>
        <trans-unit id="ce0cd10d79add8dd2bb954b675f6e6db7d3fb13e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;E&lt;/em&gt;&lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;E&lt;/em&gt;&lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9be3194edb3ba6b33277bb2449d3b2f3fd270c28" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Enabled&lt;/em&gt; cipher suites, which may be fewer than the full set of supported suites. This group is set using the &lt;a href=&quot;sslengine#setEnabledCipherSuites-java.lang.String:A-&quot;&gt;&lt;code&gt;setEnabledCipherSuites(String [])&lt;/code&gt;&lt;/a&gt; method, and queried using the &lt;a href=&quot;sslengine#getEnabledCipherSuites--&quot;&gt;&lt;code&gt;getEnabledCipherSuites()&lt;/code&gt;&lt;/a&gt; method. Initially, a default set of cipher suites will be enabled on a new engine that represents the minimum suggested configuration.</source>
          <target state="translated">&lt;em&gt;有効な&lt;/em&gt;暗号スイート。サポートされているスイートの完全なセットよりも少ない場合があります。このグループは、&lt;a href=&quot;sslengine#setEnabledCipherSuites-java.lang.String:A-&quot;&gt; &lt;code&gt;setEnabledCipherSuites(String [])&lt;/code&gt; &lt;/a&gt;メソッドを使用して設定され、&lt;a href=&quot;sslengine#getEnabledCipherSuites--&quot;&gt; &lt;code&gt;getEnabledCipherSuites()&lt;/code&gt; &lt;/a&gt;メソッドを使用して照会されます。最初は、推奨される最小構成を表す新しいエンジンでデフォルトの暗号スイートのセットが有効になります。</target>
        </trans-unit>
        <trans-unit id="7bf27517b7f3a252d05104a26926e52786b8f15b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Enabled&lt;/em&gt; cipher suites, which may be fewer than the full set of supported suites. This group is set using the &lt;em&gt;setEnabledCipherSuites&lt;/em&gt; method, and queried using the &lt;em&gt;getEnabledCipherSuites&lt;/em&gt; method. Initially, a default set of cipher suites will be enabled on a new socket that represents the minimum suggested configuration.</source>
          <target state="translated">&lt;em&gt;有効な&lt;/em&gt;暗号スイート。サポートされているスイートの完全なセットよりも少ない場合があります。このグループは、&lt;em&gt;setEnabledCipherSuites&lt;/em&gt;メソッドを使用して設定され、&lt;em&gt;getEnabledCipherSuites&lt;/em&gt;メソッドを使用して照会されます。最初に、推奨される最小構成を表す新しいソケットで、暗号スイートのデフォルトのセットが有効になります。</target>
        </trans-unit>
        <trans-unit id="ecfc3a0cf743cf43a43acd8d729fe6970b900a77" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt; originally set to August 31, 1999. Calling &lt;code&gt;add(Calendar.MONTH,
 13)&lt;/code&gt; sets the calendar to September 30, 2000. &lt;strong&gt;Add rule 1&lt;/strong&gt; sets the &lt;code&gt;MONTH&lt;/code&gt; field to September, since adding 13 months to August gives September of the next year. Since &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; cannot be 31 in September in a &lt;code&gt;GregorianCalendar&lt;/code&gt;, &lt;strong&gt;add rule 2&lt;/strong&gt; sets the &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; to 30, the closest possible value. Although it is a smaller field, &lt;code&gt;DAY_OF_WEEK&lt;/code&gt; is not adjusted by rule 2, since it is expected to change when the month changes in a &lt;code&gt;GregorianCalendar&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;例&lt;/em&gt;：考えてみ &lt;code&gt;GregorianCalendar&lt;/code&gt; もともと8月31日に設定し、1999年のCalling &lt;code&gt;add(Calendar.MONTH, 13)&lt;/code&gt; 9月30日、2000年にカレンダーを設定し、&lt;strong&gt;追加ルール1&lt;/strong&gt;セット &lt;code&gt;MONTH&lt;/code&gt; の 8月に13ヶ月を追加するため、9月までのフィールドは、9月を与えます来年。 &lt;code&gt;GregorianCalendar&lt;/code&gt; では9月の &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; を31にすることはできないため、&lt;strong&gt;ルール2を追加すると&lt;/strong&gt;、 &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; が最も近い30に設定されます。 &lt;code&gt;DAY_OF_WEEK&lt;/code&gt; は小さいフィールドですが、 &lt;code&gt;GregorianCalendar&lt;/code&gt; で月が変わると変更されることが予想されるため、ルール2では調整されません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="015c13a1c8c1dc2bb666045933bc46518a52bf5f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt; originally set to August 31, 1999. Calling &lt;code&gt;roll(Calendar.MONTH,
 8)&lt;/code&gt; sets the calendar to April 30, &lt;strong&gt;1999&lt;/strong&gt;. Using a &lt;code&gt;GregorianCalendar&lt;/code&gt;, the &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field cannot be 31 in the month April. &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; is set to the closest possible value, 30. The &lt;code&gt;YEAR&lt;/code&gt; field maintains the value of 1999 because it is a larger field than &lt;code&gt;MONTH&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;例&lt;/em&gt;：最初は1999年8月31日に設定された &lt;code&gt;GregorianCalendar&lt;/code&gt; を考えます。roll &lt;code&gt;roll(Calendar.MONTH, 8)&lt;/code&gt; 呼び出すと、カレンダーが&lt;strong&gt;1999年&lt;/strong&gt; 4月30日に設定されます。 &lt;code&gt;GregorianCalendar&lt;/code&gt; を使用すると、 &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; フィールドを4月の31にすることはできません。 &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; が最も近い値に設定され、30 &lt;code&gt;YEAR&lt;/code&gt; それよりも大きいフィールドなので、フィールド1999の値を維持 &lt;code&gt;MONTH&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e09c18cb87052cfbe7b0181d6ff8fd17559aaeb0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt; originally set to August 31, 1999. Calling &lt;code&gt;set(Calendar.MONTH,
 Calendar.SEPTEMBER)&lt;/code&gt; sets the date to September 31, 1999. This is a temporary internal representation that resolves to October 1, 1999 if &lt;code&gt;getTime()&lt;/code&gt;is then called. However, a call to &lt;code&gt;set(Calendar.DAY_OF_MONTH, 30)&lt;/code&gt; before the call to &lt;code&gt;getTime()&lt;/code&gt; sets the date to September 30, 1999, since no recomputation occurs after &lt;code&gt;set()&lt;/code&gt; itself.</source>
          <target state="translated">&lt;em&gt;例&lt;/em&gt;：最初は1999年8月31日に設定された &lt;code&gt;GregorianCalendar&lt;/code&gt; を考えます。set &lt;code&gt;set(Calendar.MONTH, Calendar.SEPTEMBER)&lt;/code&gt; 呼び出すと、日付が1999年9月31日に設定されます。これは、 &lt;code&gt;getTime()&lt;/code&gt; の場合に1999年10月1日に解決される一時的な内部表現です。次に呼び出されます。ただし、 &lt;code&gt;getTime()&lt;/code&gt; を呼び出す前に &lt;code&gt;set(Calendar.DAY_OF_MONTH, 30)&lt;/code&gt; 呼び出すと、日付が1999年9月30日に &lt;code&gt;set()&lt;/code&gt; ます。これは、set（）自体の後で再計算が行われないためです。</target>
        </trans-unit>
        <trans-unit id="f4e8575c448677f9b5a11f1188f87cd462cc2983" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt; originally set to December 31, 1999. Calling &lt;a href=&quot;gregoriancalendar#roll-int-boolean-&quot;&gt;&lt;code&gt;roll(Calendar.MONTH, true)&lt;/code&gt;&lt;/a&gt; sets the calendar to January 31, 1999. The &lt;code&gt;YEAR&lt;/code&gt; field is unchanged because it is a larger field than &lt;code&gt;MONTH&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;例&lt;/em&gt;：最初は1999年12月31日に設定された &lt;code&gt;GregorianCalendar&lt;/code&gt; を考えます。roll &lt;a href=&quot;gregoriancalendar#roll-int-boolean-&quot;&gt; &lt;code&gt;roll(Calendar.MONTH, true)&lt;/code&gt; &lt;/a&gt;呼び出すと、カレンダーが1999年1月31日に設定されます &lt;code&gt;YEAR&lt;/code&gt; フィールドは、 &lt;code&gt;MONTH&lt;/code&gt; よりも大きいため、変更されません。</target>
        </trans-unit>
        <trans-unit id="37b0ffee67d3fb4c18e58b7db51575ed68a8bd11" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt; originally set to Sunday June 6, 1999. Calling &lt;code&gt;roll(Calendar.WEEK_OF_MONTH, -1)&lt;/code&gt; sets the calendar to Tuesday June 1, 1999, whereas calling &lt;code&gt;add(Calendar.WEEK_OF_MONTH, -1)&lt;/code&gt; sets the calendar to Sunday May 30, 1999. This is because the roll rule imposes an additional constraint: The &lt;code&gt;MONTH&lt;/code&gt; must not change when the &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; is rolled. Taken together with add rule 1, the resultant date must be between Tuesday June 1 and Saturday June 5. According to add rule 2, the &lt;code&gt;DAY_OF_WEEK&lt;/code&gt;, an invariant when changing the &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt;, is set to Tuesday, the closest possible value to Sunday (where Sunday is the first day of the week).</source>
          <target state="translated">&lt;em&gt;例&lt;/em&gt;：もともと1999年6月6日日曜日に設定されていた &lt;code&gt;GregorianCalendar&lt;/code&gt; を考えます。roll &lt;code&gt;roll(Calendar.WEEK_OF_MONTH, -1)&lt;/code&gt; 呼び出すと &lt;code&gt;add(Calendar.WEEK_OF_MONTH, -1)&lt;/code&gt; 1999年6月1日火曜日に設定され、add（Calendar.WEEK_OF_MONTH、-1）を呼び出すとカレンダーが日曜日に設定されます。これは、ロールルールによって追加の制約が &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; です。WEEK_OF_MONTHがロールされるときに、 &lt;code&gt;MONTH&lt;/code&gt; を変更してはなりません。追加ルール1と合わせて、結果の日付は6月1日火曜日と6月5日土曜日の間にある必要があります。追加ルール2に従って、 &lt;code&gt;DAY_OF_WEEK&lt;/code&gt; は、 &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; を変更した場合の不変条件です。は、日曜日に最も近い可能な値である火曜日に設定されます（日曜日は週の最初の日です）。</target>
        </trans-unit>
        <trans-unit id="2eba6ea35c9e656bf87059d0d9c39857af488313" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example&lt;/em&gt;: See &lt;a href=&quot;gregoriancalendar#roll-int-int-&quot;&gt;&lt;code&gt;GregorianCalendar.roll(int, int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;例&lt;/em&gt;：&lt;a href=&quot;gregoriancalendar#roll-int-int-&quot;&gt; &lt;code&gt;GregorianCalendar.roll(int, int)&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="98830ab07be833f1df672218b5344034b6d43367" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fault tolerant&lt;/em&gt;: Non-structural errors in the file, caused either by damage to the file or by API changes made to classes in an archive remain localized so that a reader can report the error and continue to load the parts of the document which were not affected by the error.</source>
          <target state="translated">&lt;em&gt;フォールトトレラント&lt;/em&gt;：ファイルの損傷またはアーカイブ内のクラスに加えられたAPIの変更によって引き起こされた、ファイル内の非構造的エラーはローカライズされたままなので、リーダーはエラーを報告し、ドキュメントの一部ではなかった部分をロードし続けることができますエラーの影響を受けています。</target>
        </trans-unit>
        <trans-unit id="db3982435b361bc7928b572c622f00362f661539" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Functional interfaces&lt;/em&gt; provide target types for lambda expressions and method references.</source>
          <target state="translated">&lt;em&gt;関数&lt;/em&gt;型&lt;em&gt;インターフェイス&lt;/em&gt;は、ラムダ式とメソッド参照のターゲットタイプを提供します。</target>
        </trans-unit>
        <trans-unit id="309bfab9e2c7efdf589154e6f05ea888c3285bda" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Functional interfaces&lt;/em&gt; provide target types for lambda expressions and method references. Each functional interface has a single abstract method, called the &lt;em&gt;functional method&lt;/em&gt; for that functional interface, to which the lambda expression's parameter and return types are matched or adapted. Functional interfaces can provide a target type in multiple contexts, such as assignment context, method invocation, or cast context:</source>
          <target state="translated">&lt;em&gt;関数&lt;/em&gt;型&lt;em&gt;インターフェイス&lt;/em&gt;は、ラムダ式とメソッド参照のターゲットタイプを提供します。各関数型インターフェイスには、その関数型インターフェイスの&lt;em&gt;関数型メソッド&lt;/em&gt;と呼ばれる単一の抽象メソッドがあり、ラムダ式のパラメーターと戻り値の型が一致または適合されます。関数型インターフェースは、割り当てコンテキスト、メソッド呼び出し、キャストコンテキストなど、複数のコンテキストでターゲットタイプを提供できます。</target>
        </trans-unit>
        <trans-unit id="8f952d24d12f67c1217a0aaf812a6a322cbe1307" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implementation Note:&lt;/em&gt; A switch point behaves as if implemented on top of &lt;a href=&quot;mutablecallsite&quot;&gt;&lt;code&gt;MutableCallSite&lt;/code&gt;&lt;/a&gt;, approximately as follows:</source>
          <target state="translated">&lt;em&gt;実装上の注意：&lt;/em&gt;スイッチポイントは、以下のように&lt;a href=&quot;mutablecallsite&quot;&gt; &lt;code&gt;MutableCallSite&lt;/code&gt; の&lt;/a&gt;上に実装されているかのように動作します。</target>
        </trans-unit>
        <trans-unit id="d45fd6d567686210e5a1c3406109295308e22070" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implementation Note:&lt;/em&gt; Simple implementations of &lt;code&gt;MutableCallSite&lt;/code&gt; may use a volatile variable for the target of a mutable call site. In such an implementation, the &lt;code&gt;syncAll&lt;/code&gt; method can be a no-op, and yet it will conform to the JMM behavior documented above.</source>
          <target state="translated">&lt;em&gt;実装上の注意：&lt;/em&gt; &lt;code&gt;MutableCallSite&lt;/code&gt; の単純な実装では、変更可能な呼び出しサイトのターゲットに揮発性変数を使用できます。このような実装では、 &lt;code&gt;syncAll&lt;/code&gt; メソッドは何もしない場合がありますが、上記のJMMの動作に準拠します。</target>
        </trans-unit>
        <trans-unit id="4cc42577b406b63228d9fa077e7432db3d709f5d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implementation Note:&lt;/em&gt; Simple implementations of &lt;code&gt;SwitchPoint&lt;/code&gt; may use a private &lt;a href=&quot;mutablecallsite&quot;&gt;&lt;code&gt;MutableCallSite&lt;/code&gt;&lt;/a&gt; to publish the state of a switch point. In such an implementation, the &lt;code&gt;invalidateAll&lt;/code&gt; method can simply change the call site's target, and issue one call to &lt;a href=&quot;mutablecallsite#syncAll-java.lang.invoke.MutableCallSite:A-&quot;&gt;synchronize&lt;/a&gt; all the private call sites.</source>
          <target state="translated">&lt;em&gt;実装メモ：&lt;/em&gt; &lt;code&gt;SwitchPoint&lt;/code&gt; の単純な実装では、プライベート&lt;a href=&quot;mutablecallsite&quot;&gt; &lt;code&gt;MutableCallSite&lt;/code&gt; &lt;/a&gt;を使用してスイッチポイントの状態を公開できます。このような実装では、 &lt;code&gt;invalidateAll&lt;/code&gt; メソッドは呼び出しサイトのターゲットを変更し、1つの呼び出しを発行してすべてのプライベート呼び出しサイトを&lt;a href=&quot;mutablecallsite#syncAll-java.lang.invoke.MutableCallSite:A-&quot;&gt;同期&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="63cb590db8f79447b20f0c0afa2f33d416deef33" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implementation Note:&lt;/em&gt; Therefore, each instance must implement a unique single-method interface. Implementations may not bundle together multiple single-method interfaces onto single implementation classes in the style of &lt;a href=&quot;/openjdk~8_gui/java/awt/awteventmulticaster&quot;&gt;&lt;code&gt;AWTEventMulticaster&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;実装上の注意：&lt;/em&gt;したがって、各インスタンスは一意の単一メソッドインターフェースを実装する必要があります。実装は、&lt;a href=&quot;/openjdk~8_gui/java/awt/awteventmulticaster&quot;&gt; &lt;code&gt;AWTEventMulticaster&lt;/code&gt; &lt;/a&gt;のスタイルで複数の単一メソッドインターフェースを単一の実装クラスにバンドルすることはできません。</target>
        </trans-unit>
        <trans-unit id="3878150b95c6d83960028be0601e86cc6f105637" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implementation note:&lt;/em&gt; a consequence of this requirement is that a trivial implementation of output to a &lt;a href=&quot;../../java/util/jar/jaroutputstream&quot;&gt;JarOutputStream&lt;/a&gt; is not a sufficient implementation. That is, rather than creating a JavaFileObject that returns the JarOutputStream directly, the contents must be cached until closed and then written to the JarOutputStream.</source>
          <target state="translated">&lt;em&gt;実装上の注意：&lt;/em&gt;この要件の結果として、&lt;a href=&quot;../../java/util/jar/jaroutputstream&quot;&gt;JarOutputStream&lt;/a&gt;への出力の簡単な実装は十分な実装ではありません。つまり、JarOutputStreamを直接返すJavaFileObjectを作成するのではなく、コンテンツを閉じるまでキャッシュしてから、JarOutputStreamに書き込む必要があります。</target>
        </trans-unit>
        <trans-unit id="46585e67a1e0f7e0ac3277c528483fabcd0456e0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implementers of this interface are also strongly advised to not have the &lt;code&gt;close&lt;/code&gt; method throw &lt;a href=&quot;interruptedexception&quot;&gt;&lt;code&gt;InterruptedException&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt; This exception interacts with a thread's interrupted status, and runtime misbehavior is likely to occur if an &lt;code&gt;InterruptedException&lt;/code&gt; is &lt;a href=&quot;throwable#addSuppressed-java.lang.Throwable-&quot;&gt;suppressed&lt;/a&gt;. More generally, if it would cause problems for an exception to be suppressed, the &lt;code&gt;AutoCloseable.close&lt;/code&gt; method should not throw it.</source>
          <target state="translated">&lt;em&gt;このインターフェイスの実装者は、 &lt;code&gt;close&lt;/code&gt; メソッドが&lt;a href=&quot;interruptedexception&quot;&gt; &lt;code&gt;InterruptedException&lt;/code&gt; を&lt;/a&gt;スローしないようにすることも強くお勧めします。&lt;/em&gt;この例外はスレッドの割り込みステータスと相互作用し、 &lt;code&gt;InterruptedException&lt;/code&gt; が&lt;a href=&quot;throwable#addSuppressed-java.lang.Throwable-&quot;&gt;抑制さ&lt;/a&gt;れると、ランタイムの誤動作が発生する可能性があります。より一般的には、例外が抑制されるという問題が発生する場合、 &lt;code&gt;AutoCloseable.close&lt;/code&gt; メソッドはそれをスローすべきではありません。</target>
        </trans-unit>
        <trans-unit id="363fb13e819264f2ff0f9051bd2bfcfdebdba7ad" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Integrity Protection&lt;/em&gt;. SSL protects against modification of messages by an active wiretapper.</source>
          <target state="translated">&lt;em&gt;完全性の保護&lt;/em&gt;。SSLは、アクティブな盗聴者によるメッセージの変更から保護します。</target>
        </trans-unit>
        <trans-unit id="2a9bea0cac2197b9536e7736d6962b20566246e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Integrity Protection&lt;/em&gt;. SSL/TLS protects against modification of messages by an active wiretapper.</source>
          <target state="translated">&lt;em&gt;完全性の保護&lt;/em&gt;。SSL / TLSは、アクティブな盗聴者によるメッセージの変更から保護します。</target>
        </trans-unit>
        <trans-unit id="6537444939e3b832224fe2830009290e18ee84b1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Invocation&lt;/em&gt; occurs when an implemented interface method is invoked on a function object. This may occur many times for a single function object. The method referenced by the behavior &lt;code&gt;MethodHandle&lt;/code&gt; is invoked with the captured arguments and any additional arguments provided on invocation, as if by &lt;a href=&quot;methodhandle#invoke-java.lang.Object...-&quot;&gt;&lt;code&gt;MethodHandle.invoke(Object...)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;呼び出し&lt;/em&gt;は、実装されたインターフェイスメソッドが関数オブジェクトで呼び出されたときに発生します。これは、単一の関数オブジェクトに対して何度も発生する可能性があります。&lt;a href=&quot;methodhandle#invoke-java.lang.Object...-&quot;&gt; &lt;code&gt;MethodHandle.invoke(Object...)&lt;/code&gt; &lt;/a&gt;場合と同様に、動作 &lt;code&gt;MethodHandle&lt;/code&gt; によって参照されるメソッドは、キャプチャされた引数と呼び出し時に提供される追加の引数を使用して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f42571c695f7021586a8ba9c35b606735f69583a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;J&lt;/em&gt;, the same type</source>
          <target state="translated">&lt;em&gt;J&lt;/em&gt;、同じタイプ</target>
        </trans-unit>
        <trans-unit id="3b57690ac11bbaf01bbdd8ae904dc07f06583f92" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Linkage&lt;/em&gt; occurs when the methods in this class are invoked. They take as arguments an interface to be implemented (typically a &lt;em&gt;functional interface&lt;/em&gt;, one with a single abstract method), a name and signature of a method from that interface to be implemented, a method handle describing the desired implementation behavior for that method, and possibly other additional metadata, and produce a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target can be used to create suitable function objects. Linkage may involve dynamically loading a new class that implements the target interface. The &lt;code&gt;CallSite&lt;/code&gt; can be considered a &quot;factory&quot; for function objects and so these linkage methods are referred to as &quot;metafactories&quot;.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;このクラスのメソッドが呼び出されると、&lt;em&gt;リンケージ&lt;/em&gt;が発生します。これらは引数として、実装されるインターフェース（通常は&lt;em&gt;機能インターフェース&lt;/em&gt;、単一の抽象メソッドを持つもの）、実装されるそのインターフェースからのメソッドの名前とシグニチャー、そのメソッドの望ましい実装動作を説明するメソッドハンドル、およびおそらく他の追加のメタデータ、およびそのターゲットを使用して適切な関数オブジェクトを作成できる&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;を生成します。リンケージには、ターゲットインターフェイスを実装する新しいクラスを動的にロードすることが含まれる場合があります。 &lt;code&gt;CallSite&lt;/code&gt; 関数オブジェクトのための「工場」と考えることができるので、これらの連結方法は、「metafactories」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="3eda05d0c13b1f3bc1f8fc96ddf1ff816fd23e06" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Multiple interfaces.&lt;/em&gt; If needed, more than one interface can be implemented by the function object. (These additional interfaces are typically marker interfaces with no methods.) The flag &lt;code&gt;FLAG_MARKERS&lt;/code&gt; indicates that a list of additional interfaces will be provided, each of which should be implemented by the resulting function object.</source>
          <target state="translated">&lt;em&gt;複数のインターフェース。&lt;/em&gt;必要に応じて、関数オブジェクトによって複数のインターフェースを実装できます。（これらの追加のインターフェイスは通常、メソッドのないマーカーインターフェイスです。）フラグ &lt;code&gt;FLAG_MARKERS&lt;/code&gt; は、追加のインターフェイスのリストが提供されることを示します。各インターフェイスは、結果の関数オブジェクトによって実装される必要があります。</target>
        </trans-unit>
        <trans-unit id="e19b1d9aafedd7c59e542341ea9c6d9923a44ea4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Non-synchronization of target values:&lt;/em&gt; A write to a mutable call site's target does not force other threads to become aware of the updated value. Threads which do not perform suitable synchronization actions relative to the updated call site may cache the old target value and delay their use of the new target value indefinitely. (This is a normal consequence of the Java Memory Model as applied to object fields.)</source>
          <target state="translated">&lt;em&gt;ターゲット値の非同期：&lt;/em&gt;変更可能な呼び出しサイトのターゲットへの書き込みは、他のスレッドが更新された値を認識するように強制しません。更新された呼び出しサイトに対して適切な同期アクションを実行しないスレッドは、古いターゲット値をキャッシュし、新しいターゲット値の使用を無期限に遅らせる可能性があります。（これは、オブジェクトフィールドに適用されるJavaメモリモデルの通常の結果です。）</target>
        </trans-unit>
        <trans-unit id="1c61ce0ff18ed6b0a04fbba51f76f14e997f4440" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: In general, clients should use &lt;code&gt;Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)&lt;/code&gt; instead of calling this method.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：一般に、クライアントはこのメソッドを呼び出す代わりに &lt;code&gt;Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)&lt;/code&gt; を使用する必要があります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca53d3cfc9d7b95e8572977f8d4754cc66ebc525" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: The classes in the package &lt;code&gt;javax.security.cert&lt;/code&gt; exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in &lt;code&gt;java.security.cert&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：パッケージ &lt;code&gt;javax.security.cert&lt;/code&gt; のクラスは、以前のバージョンのJava Secure Sockets Extension（JSSE）との互換性のために存在します。新しいアプリケーションでは、代わりに &lt;code&gt;java.security.cert&lt;/code&gt; にある標準のJava SE証明書クラスを使用する必要があります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7ff58105f0f735b1be81869379427fdbdc9af7e8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: this method exists for compatibility with previous releases. New applications should use &lt;a href=&quot;handshakecompletedevent#getPeerCertificates--&quot;&gt;&lt;code&gt;getPeerCertificates()&lt;/code&gt;&lt;/a&gt; instead.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：このメソッドは、以前のリリースとの互換性のために存在しています。新しいアプリケーションでは、代わりに&lt;a href=&quot;handshakecompletedevent#getPeerCertificates--&quot;&gt; &lt;code&gt;getPeerCertificates()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="375c794dc39c369fcb410d0f3fc854d70bc49ba4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: this method exists for compatibility with previous releases. New applications should use &lt;a href=&quot;sslsession#getPeerCertificates--&quot;&gt;&lt;code&gt;getPeerCertificates()&lt;/code&gt;&lt;/a&gt; instead.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：このメソッドは、以前のリリースとの互換性のために存在しています。新しいアプリケーションでは、代わりに&lt;a href=&quot;sslsession#getPeerCertificates--&quot;&gt; &lt;code&gt;getPeerCertificates()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="31fdfdba1d43497f9010929e0e79cb96b715cf3b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt; that the &lt;a href=&quot;keystore.builder#getKeyStore--&quot;&gt;&lt;code&gt;getKeyStore()&lt;/code&gt;&lt;/a&gt; method is executed within the &lt;a href=&quot;accesscontrolcontext&quot;&gt;&lt;code&gt;AccessControlContext&lt;/code&gt;&lt;/a&gt; of the code invoking this method.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;a href=&quot;keystore.builder#getKeyStore--&quot;&gt; &lt;code&gt;getKeyStore()&lt;/code&gt; &lt;/a&gt;メソッドは、このメソッドを呼び出すコードの&lt;a href=&quot;accesscontrolcontext&quot;&gt; &lt;code&gt;AccessControlContext&lt;/code&gt; &lt;/a&gt;内で実行されることに&lt;em&gt;注意&lt;/em&gt;して&lt;em&gt;ください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a82eca54cd9eb68982bd25097bb5efdec9f8067f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Peer Host.&lt;/em&gt; All connections in a session are between the same two hosts. The address of the host on the other side of the connection is available.</source>
          <target state="translated">&lt;em&gt;ピアホスト。&lt;/em&gt;セッション内のすべての接続は、同じ2つのホスト間です。接続の反対側にあるホストのアドレスが使用可能です。</target>
        </trans-unit>
        <trans-unit id="4437c00f90cf5154f4d929ebe2fd34592e3563fe" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Peer Identity.&lt;/em&gt; Sessions are between a particular client and a particular server. The identity of the peer may have been established as part of session setup. Peers are generally identified by X.509 certificate chains.</source>
          <target state="translated">&lt;em&gt;ピアアイデンティティ。&lt;/em&gt;セッションは、特定のクライアントと特定のサーバーの間です。ピアのIDは、セッションセットアップの一部として確立されている可能性があります。ピアは通常、X.509証明書チェーンによって識別されます。</target>
        </trans-unit>
        <trans-unit id="16da4fe807769f9b71e8a1259a0bd1e3517db114" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Portable and version resilient&lt;/em&gt;: they have no dependencies on the private implementation of any class and so, like Java source files, they may be exchanged between environments which may have different versions of some of the classes and between VMs from different vendors.</source>
          <target state="translated">&lt;em&gt;移植性とバージョン復元力&lt;/em&gt;：クラスのプライベート実装に依存しないため、Javaソースファイルのように、一部のクラスのバージョンが異なる環境間や、異なるベンダーのVM間で交換できます。</target>
        </trans-unit>
        <trans-unit id="52c521b4e1ed4d010e7f7de627ff86ec31c35a64" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Returns special value&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;特別な値を返します&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6780db50853066cd439c2478ed22b5e661e7429b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Serializability.&lt;/em&gt; The generated function objects do not generally support serialization. If desired, &lt;code&gt;FLAG_SERIALIZABLE&lt;/code&gt; can be used to indicate that the function objects should be serializable. Serializable function objects will use, as their serialized form, instances of the class &lt;code&gt;SerializedLambda&lt;/code&gt;, which requires additional assistance from the capturing class (the class described by the &lt;a href=&quot;methodhandles.lookup&quot;&gt;&lt;code&gt;MethodHandles.Lookup&lt;/code&gt;&lt;/a&gt; parameter &lt;code&gt;caller&lt;/code&gt;); see &lt;a href=&quot;serializedlambda&quot;&gt;&lt;code&gt;SerializedLambda&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;em&gt;シリアライザビリティ。&lt;/em&gt;生成された関数オブジェクトは通常、シリアル化をサポートしていません。必要に応じて、 &lt;code&gt;FLAG_SERIALIZABLE&lt;/code&gt; を使用して、関数オブジェクトをシリアル化可能にする必要があることを示すことができます。シリアル化可能な関数オブジェクトは、シリアル化された形式として、クラス &lt;code&gt;SerializedLambda&lt;/code&gt; のインスタンスを使用します。これには、キャプチャークラス（&lt;a href=&quot;methodhandles.lookup&quot;&gt; &lt;code&gt;MethodHandles.Lookup&lt;/code&gt; &lt;/a&gt;パラメーターの &lt;code&gt;caller&lt;/code&gt; によって記述されたクラス）からの追加の支援が必要です。詳細については、&lt;a href=&quot;serializedlambda&quot;&gt; &lt;code&gt;SerializedLambda&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3935d1417cb4afd578342daa28e72ff3fd42b1e7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Special value&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;特別な価値&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e58bada3d92b1c7f719c88c5ecec7b91d3b013e1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Structurally compact&lt;/em&gt;: The &lt;code&gt;XMLEncoder&lt;/code&gt; class uses a &lt;em&gt;redundancy elimination&lt;/em&gt; algorithm internally so that the default values of a Bean's properties are not written to the stream.</source>
          <target state="translated">&lt;em&gt;構造的にコンパクト&lt;/em&gt;： &lt;code&gt;XMLEncoder&lt;/code&gt; クラスは内部で&lt;em&gt;冗長性除去&lt;/em&gt;アルゴリズムを使用するため、Beanのプロパティのデフォルト値はストリームに書き込まれません。</target>
        </trans-unit>
        <trans-unit id="e0f6bb68b31f4357845b565d8de1004457c922d5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Supported&lt;/em&gt; cipher suites: all the suites which are supported by the SSL implementation. This list is reported using &lt;a href=&quot;sslengine#getSupportedCipherSuites--&quot;&gt;&lt;code&gt;getSupportedCipherSuites()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;サポートされる&lt;/em&gt;暗号スイート：SSL実装でサポートされるすべてのスイート。このリストは、&lt;a href=&quot;sslengine#getSupportedCipherSuites--&quot;&gt; &lt;code&gt;getSupportedCipherSuites()&lt;/code&gt; &lt;/a&gt;を使用して報告されます。</target>
        </trans-unit>
        <trans-unit id="3bab905bb9c2d86eb703978229e6c45960a5e020" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Supported&lt;/em&gt; cipher suites: all the suites which are supported by the SSL implementation. This list is reported using &lt;em&gt;getSupportedCipherSuites&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;サポートされる&lt;/em&gt;暗号スイート：SSL実装でサポートされるすべてのスイート。このリストは、&lt;em&gt;getSupportedCipherSuites&lt;/em&gt;を使用して報告され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a6d2abeeee686afafaa5b4d9b4118251e9dddd4f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Throws exception&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;例外をスローします&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="843f22af785ebdc1e6b75eb313e9d90cb3bc0651" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Times out&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;タイムアウト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5d4be4f86e8146a6b3c1e87fe5cbd57f3e0d1036" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;formats&lt;/em&gt; = {&quot;Sun&quot;,&quot;Mon&quot;,&quot;Tue&quot;,&quot;Wed&quot;,&quot;Thur&quot;,&quot;Fri&quot;,&quot;Sat&quot;}</source>
          <target state="translated">&lt;em&gt;形式&lt;/em&gt; = {&quot;日&quot;、 &quot;月&quot;、 &quot;火&quot;、 &quot;水&quot;、 &quot;木&quot;、 &quot;金&quot;、 &quot;土&quot;}</target>
        </trans-unit>
        <trans-unit id="cf55f61f1395707319ca749497f461f05152277a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;formats&lt;/em&gt; = {&quot;no files&quot;, &quot;one file&quot;, &quot;many files&quot;}</source>
          <target state="translated">&lt;em&gt;フォーマット&lt;/em&gt; = {「ファイルなし」、「1つのファイル」、「多くのファイル」}</target>
        </trans-unit>
        <trans-unit id="693f0a9b94a7ec170a6409809027d89eb0e67e4e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;limits&lt;/em&gt; = {0, 1, ChoiceFormat.nextDouble(1)}</source>
          <target state="translated">&lt;em&gt;制限&lt;/em&gt; = {0、1、ChoiceFormat.nextDouble（1）}</target>
        </trans-unit>
        <trans-unit id="346b6f8a5b0dcc635eaa90dd0c3a851ff88eeb8c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;limits&lt;/em&gt; = {1,2,3,4,5,6,7}</source>
          <target state="translated">&lt;em&gt;制限&lt;/em&gt; = {1,2,3,4,5,6,7}</target>
        </trans-unit>
        <trans-unit id="ea7b9d91f32b4b1306642bfa4d9e6e80382ddaf9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;not applicable&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;適用できません&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e1f9c39f9e39b0cc05789d8a99315c85d27b8cf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;opendata(E)&lt;/em&gt;&lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;opendata(E)&lt;/em&gt;&lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb2a43e499390e8dffbc817987ce5043e4017faa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;opendata(J)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;opendata(J)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="26eac90a187152b0d7fc3c09d233c83b4ce57959" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;opentype(J)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;opentype(J)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="044427e4dd8ffdda60e29a9ded35c19752f6d758" translate="yes" xml:space="preserve">
          <source>&lt;i&gt;Decimal&lt;/i&gt;:</source>
          <target state="translated">&lt;i&gt;Decimal&lt;/i&gt;:</target>
        </trans-unit>
        <trans-unit id="9392d31ead1e61bd09cd51ecd6e72123919eeddf" translate="yes" xml:space="preserve">
          <source>&lt;i&gt;Integer&lt;/i&gt;:</source>
          <target state="translated">&lt;i&gt;Integer&lt;/i&gt;:</target>
        </trans-unit>
        <trans-unit id="bc5b4193a3d686c8a5a0ec1bc2111679bacf051e" translate="yes" xml:space="preserve">
          <source>&lt;i&gt;RFC 5280: Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile&lt;/i&gt;</source>
          <target state="translated">&lt;i&gt;RFC 5280：Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List（CRL）Profile&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="63087ce98066ff8a438a47b5b9a78732e59761fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a name=&quot;iso8601timezone&quot;&gt;ISO 8601 Time zone:&lt;/a&gt;&lt;/strong&gt; The number of pattern letters designates the format for both formatting and parsing as follows:</source>
          <target state="translated">&lt;strong&gt;&lt;a name=&quot;iso8601timezone&quot;&gt;ISO 8601タイムゾーン：&lt;/a&gt;&lt;/strong&gt;パターン文字の数は、フォーマットと解析の両方のフォーマットを次のように指定します。</target>
        </trans-unit>
        <trans-unit id="50c97c07fcb52d32b258418561bf41245600519f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a name=&quot;month&quot;&gt;Month:&lt;/a&gt;&lt;/strong&gt; If the number of pattern letters is 3 or more, the month is interpreted as &lt;a href=&quot;#text&quot;&gt;text&lt;/a&gt;; otherwise, it is interpreted as a &lt;a href=&quot;#number&quot;&gt;number&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;a name=&quot;month&quot;&gt;月：&lt;/a&gt;&lt;/strong&gt;パターン文字の数が3以上の場合、月は&lt;a href=&quot;#text&quot;&gt;テキスト&lt;/a&gt;として解釈されます。それ以外の場合は、&lt;a href=&quot;#number&quot;&gt;数値&lt;/a&gt;として解釈されます。</target>
        </trans-unit>
        <trans-unit id="02c83a90de8b6b10b16e0f2db298bd569e486e5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a name=&quot;number&quot;&gt;Number:&lt;/a&gt;&lt;/strong&gt; For formatting, the number of pattern letters is the minimum number of digits, and shorter numbers are zero-padded to this amount. For parsing, the number of pattern letters is ignored unless it's needed to separate two adjacent fields.</source>
          <target state="translated">&lt;strong&gt;&lt;a name=&quot;number&quot;&gt;数値：&lt;/a&gt;&lt;/strong&gt;書式設定の場合、パターン文字の数は最小桁数であり、これより短い数値にはこの数までゼロが埋め込まれます。解析では、隣接する2つのフィールドを分離する必要がない限り、パターン文字の数は無視されます。</target>
        </trans-unit>
        <trans-unit id="4bc6906004964706fbe62c8c4aa57557a452e5f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a name=&quot;rfc822timezone&quot;&gt;RFC 822 time zone:&lt;/a&gt;&lt;/strong&gt; For formatting, the RFC 822 4-digit time zone format is used:</source>
          <target state="translated">&lt;strong&gt;&lt;a name=&quot;rfc822timezone&quot;&gt;RFC 822タイムゾーン：&lt;/a&gt;&lt;/strong&gt;書式設定には、RFC 822の4桁のタイムゾーン形式が使用されます。</target>
        </trans-unit>
        <trans-unit id="f62f7f824c3e6be3eefd1d4364121cd4f25984c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a name=&quot;text&quot;&gt;Text:&lt;/a&gt;&lt;/strong&gt; For formatting, if the number of pattern letters is 4 or more, the full form is used; otherwise a short or abbreviated form is used if available. For parsing, both forms are accepted, independent of the number of pattern letters.</source>
          <target state="translated">&lt;strong&gt;&lt;a name=&quot;text&quot;&gt;テキスト：&lt;/a&gt;&lt;/strong&gt;書式設定では、パターン文字の数が4以上の場合、完全な形式が使用されます。それ以外の場合は、可能な場合は短い形式または省略された形式が使用されます。解析では、パターン文字の数に関係なく、両方の形式が受け入れられます。</target>
        </trans-unit>
        <trans-unit id="70fc1f41b72f439cfeaea7381e89113f5cc1cb4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a name=&quot;timezone&quot;&gt;General time zone:&lt;/a&gt;&lt;/strong&gt; Time zones are interpreted as &lt;a href=&quot;#text&quot;&gt;text&lt;/a&gt; if they have names. For time zones representing a GMT offset value, the following syntax is used:</source>
          <target state="translated">&lt;strong&gt;&lt;a name=&quot;timezone&quot;&gt;一般的なタイムゾーン：&lt;/a&gt;&lt;/strong&gt;タイムゾーンは、名前がある場合、&lt;a href=&quot;#text&quot;&gt;テキスト&lt;/a&gt;として解釈されます。GMTオフセット値を表すタイムゾーンの場合、次の構文が使用されます。</target>
        </trans-unit>
        <trans-unit id="cefae8ce4f4ca91aa747dc1789d7fc72fdbe1bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a name=&quot;year&quot;&gt;Year:&lt;/a&gt;&lt;/strong&gt; If the formatter's &lt;a href=&quot;dateformat#getCalendar--&quot;&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/a&gt; is the Gregorian calendar, the following rules are applied.</source>
          <target state="translated">&lt;strong&gt;&lt;a name=&quot;year&quot;&gt;年：&lt;/a&gt;&lt;/strong&gt;フォーマッターの&lt;a href=&quot;dateformat#getCalendar--&quot;&gt; &lt;code&gt;Calendar&lt;/code&gt; &lt;/a&gt;がグレゴリオ暦の場合、次のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="5c466e246e217261d0edd904d173532ac3adff22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;add(f, delta)&lt;/code&gt;&lt;/strong&gt; adds &lt;code&gt;delta&lt;/code&gt; to field &lt;code&gt;f&lt;/code&gt;. This is equivalent to calling &lt;code&gt;set(f,
 get(f) + delta)&lt;/code&gt; with two adjustments:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;add(f, delta)&lt;/code&gt; &lt;/strong&gt;は、フィールド &lt;code&gt;f&lt;/code&gt; に &lt;code&gt;delta&lt;/code&gt; を追加します。これは、2つの調整を指定して &lt;code&gt;set(f, get(f) + delta)&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="07b0d2e3ada000ff9b93585dd2ed92985744a7f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;roll(f, delta)&lt;/code&gt;&lt;/strong&gt; adds &lt;code&gt;delta&lt;/code&gt; to field &lt;code&gt;f&lt;/code&gt; without changing larger fields. This is equivalent to calling &lt;code&gt;add(f, delta)&lt;/code&gt; with the following adjustment:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;roll(f, delta)&lt;/code&gt; &lt;/strong&gt;は&lt;strong&gt;、&lt;/strong&gt;大きなフィールドを変更せずに、フィールド &lt;code&gt;f&lt;/code&gt; に &lt;code&gt;delta&lt;/code&gt; を追加します。これは、次の調整で &lt;code&gt;add(f, delta)&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="b9e9624d3d3737bf9e2e56490ec25eeef764ea16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;set(f, value)&lt;/code&gt;&lt;/strong&gt; changes calendar field &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. In addition, it sets an internal member variable to indicate that calendar field &lt;code&gt;f&lt;/code&gt; has been changed. Although calendar field &lt;code&gt;f&lt;/code&gt; is changed immediately, the calendar's time value in milliseconds is not recomputed until the next call to &lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;getTime()&lt;/code&gt;, &lt;code&gt;getTimeInMillis()&lt;/code&gt;, &lt;code&gt;add()&lt;/code&gt;, or &lt;code&gt;roll()&lt;/code&gt; is made. Thus, multiple calls to &lt;code&gt;set()&lt;/code&gt; do not trigger multiple, unnecessary computations. As a result of changing a calendar field using &lt;code&gt;set()&lt;/code&gt;, other calendar fields may also change, depending on the calendar field, the calendar field value, and the calendar system. In addition, &lt;code&gt;get(f)&lt;/code&gt; will not necessarily return &lt;code&gt;value&lt;/code&gt; set by the call to the &lt;code&gt;set&lt;/code&gt; method after the calendar fields have been recomputed. The specifics are determined by the concrete calendar class.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;set(f, value)&lt;/code&gt; &lt;/strong&gt;は、カレンダーフィールド &lt;code&gt;f&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; に変更します。さらに、内部メンバー変数を設定して、カレンダーフィールド &lt;code&gt;f&lt;/code&gt; が変更されたことを示します。カレンダーフィールド &lt;code&gt;f&lt;/code&gt; はすぐに変更されますが、カレンダーの時間値（ミリ秒単位）は、次に &lt;code&gt;get()&lt;/code&gt; 、 &lt;code&gt;getTime()&lt;/code&gt; 、 &lt;code&gt;getTimeInMillis()&lt;/code&gt; 、 &lt;code&gt;add()&lt;/code&gt; 、または &lt;code&gt;roll()&lt;/code&gt; が呼び出されるまで再計算されません。したがって、 &lt;code&gt;set()&lt;/code&gt; を複数回呼び出しても、複数の不要な計算がトリガーされることはありません。 &lt;code&gt;set()&lt;/code&gt; を使用してカレンダーフィールドを変更した結果、他のカレンダーフィールドも、カレンダーフィールド、カレンダーフィールド値、およびカレンダーシステムに応じて変更される場合があります。さらに、 &lt;code&gt;get(f)&lt;/code&gt; は、カレンダーフィールドが再計算された後、 &lt;code&gt;set&lt;/code&gt; メソッドの呼び出しによって設定された &lt;code&gt;value&lt;/code&gt; 返すとは限りません。詳細は、具体的なカレンダークラスによって決定されます。</target>
        </trans-unit>
        <trans-unit id="0529c089b1eee4f9f7d436b62b7b2f9cb34c1755" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add rule 1&lt;/strong&gt;. The value of field &lt;code&gt;f&lt;/code&gt; after the call minus the value of field &lt;code&gt;f&lt;/code&gt; before the call is &lt;code&gt;delta&lt;/code&gt;, modulo any overflow that has occurred in field &lt;code&gt;f&lt;/code&gt;. Overflow occurs when a field value exceeds its range and, as a result, the next larger field is incremented or decremented and the field value is adjusted back into its range.</source>
          <target state="translated">&lt;strong&gt;ルール1を追加し&lt;/strong&gt;ます。呼び出し後のフィールド &lt;code&gt;f&lt;/code&gt; の値から呼び出し前のフィールド &lt;code&gt;f&lt;/code&gt; の値を引いたものが、フィールド &lt;code&gt;f&lt;/code&gt; で発生したオーバーフローを法として &lt;code&gt;delta&lt;/code&gt; になります。オーバーフローは、フィールド値がその範囲を超えると発生し、その結果、次に大きいフィールドが増分または減分され、フィールド値がその範囲に調整されます。</target>
        </trans-unit>
        <trans-unit id="ef9747af4d6f6e791d2de4498cc1ba16883124df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add rule 2&lt;/strong&gt;. If a smaller field is expected to be invariant, but it is impossible for it to be equal to its prior value because of changes in its minimum or maximum after field &lt;code&gt;f&lt;/code&gt; is changed or other constraints, such as time zone offset changes, then its value is adjusted to be as close as possible to its expected value. A smaller field represents a smaller unit of time. &lt;code&gt;HOUR&lt;/code&gt; is a smaller field than &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;. No adjustment is made to smaller fields that are not expected to be invariant. The calendar system determines what fields are expected to be invariant.</source>
          <target state="translated">&lt;strong&gt;ルール2を追加し&lt;/strong&gt;ます。より小さいフィールドが不変であると予想されるが、フィールド &lt;code&gt;f&lt;/code&gt; が変更された後の最小値または最大値の変更、またはタイムゾーンオフセットの変更などの他の制約のために、その値が以前の値と同じであることが不可能である場合、その値期待値にできるだけ近くなるように調整されます。フィールドが小さいほど、時間の単位が小さくなります。 &lt;code&gt;HOUR&lt;/code&gt; は &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; よりも小さいフィールドです。不変であると予期されない小さなフィールドには調整は行われません。カレンダーシステムは、どのフィールドが不変であると予想されるかを決定します。</target>
        </trans-unit>
        <trans-unit id="813252046c0c24934efee2ac25812b320fd2ad1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Denigrated&lt;/strong&gt;, replaced by &lt;a href=&quot;x509certificate#getIssuerX500Principal--&quot;&gt;getIssuerX500Principal()&lt;/a&gt;. This method returns the &lt;code&gt;issuer&lt;/code&gt; as an implementation specific Principal object, which should not be relied upon by portable code.</source>
          <target state="translated">&lt;strong&gt;Denigrated&lt;/strong&gt;、&lt;a href=&quot;x509certificate#getIssuerX500Principal--&quot;&gt;getIssuerX500Principal（）に&lt;/a&gt;置き換えられました。このメソッドは、 &lt;code&gt;issuer&lt;/code&gt; を実装固有のPrincipalオブジェクトとして返します。これは、移植可能なコードに依存してはなりません。</target>
        </trans-unit>
        <trans-unit id="3a471edb8aeae10a2d51afa52775df54df0c7c40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Denigrated&lt;/strong&gt;, replaced by &lt;a href=&quot;x509certificate#getSubjectX500Principal--&quot;&gt;getSubjectX500Principal()&lt;/a&gt;. This method returns the &lt;code&gt;subject&lt;/code&gt; as an implementation specific Principal object, which should not be relied upon by portable code.</source>
          <target state="translated">&lt;strong&gt;Denigrated&lt;/strong&gt;、&lt;a href=&quot;x509certificate#getSubjectX500Principal--&quot;&gt;getSubjectX500Principal（）に&lt;/a&gt;置き換えられました。このメソッドは、 &lt;code&gt;subject&lt;/code&gt; を実装固有のPrincipalオブジェクトとして返します。これは、移植可能なコードに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="053fb3292b4b63c394dced141682c02ce896f070" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Denigrated&lt;/strong&gt;, replaced by &lt;a href=&quot;x509crl#getIssuerX500Principal--&quot;&gt;getIssuerX500Principal()&lt;/a&gt;. This method returns the &lt;code&gt;issuer&lt;/code&gt; as an implementation specific Principal object, which should not be relied upon by portable code.</source>
          <target state="translated">&lt;strong&gt;Denigrated&lt;/strong&gt;、&lt;a href=&quot;x509crl#getIssuerX500Principal--&quot;&gt;getIssuerX500Principal（）に&lt;/a&gt;置き換えられました。このメソッドは、 &lt;code&gt;issuer&lt;/code&gt; を実装固有のPrincipalオブジェクトとして返します。これは、移植可能なコードに依存してはなりません。</target>
        </trans-unit>
        <trans-unit id="0e6fe4de6b37c4d4b4c677fd28a485c56c1a4fa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Denigrated&lt;/strong&gt;, use &lt;a href=&quot;x509certselector#getIssuer--&quot;&gt;getIssuer()&lt;/a&gt; or &lt;a href=&quot;x509certselector#getIssuerAsBytes--&quot;&gt;getIssuerAsBytes()&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt;、代わりに&lt;a href=&quot;x509certselector#getIssuer--&quot;&gt;getIssuer（）&lt;/a&gt;または&lt;a href=&quot;x509certselector#getIssuerAsBytes--&quot;&gt;getIssuerAsBytes（）を&lt;/a&gt;使用してください。一部の識別名のRFC 2253文字列形式のエンコーディング情報が失われるため、一部の証明書との一致に失敗する可能性があるため、この方法に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="498b868e6676919ec125f658bf3a7ef6fcd6fb28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Denigrated&lt;/strong&gt;, use &lt;a href=&quot;x509certselector#getSubject--&quot;&gt;getSubject()&lt;/a&gt; or &lt;a href=&quot;x509certselector#getSubjectAsBytes--&quot;&gt;getSubjectAsBytes()&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;Denigrated&lt;/strong&gt;、代わりに&lt;a href=&quot;x509certselector#getSubject--&quot;&gt;getSubject（）&lt;/a&gt;または&lt;a href=&quot;x509certselector#getSubjectAsBytes--&quot;&gt;getSubjectAsBytes（）を&lt;/a&gt;使用してください。一部の識別名のRFC 2253文字列形式のエンコーディング情報が失われるため、一部の証明書との一致に失敗する可能性があるため、この方法に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="9b989106f530a38cfee79991dc21155f4f0d6d60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Denigrated&lt;/strong&gt;, use &lt;a href=&quot;x509certselector#setIssuer-javax.security.auth.x500.X500Principal-&quot;&gt;setIssuer(X500Principal)&lt;/a&gt; or &lt;a href=&quot;x509certselector#setIssuer-byte:A-&quot;&gt;setIssuer(byte[])&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt; String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;Denigrated&lt;/strong&gt;、&lt;a href=&quot;x509certselector#setIssuer-javax.security.auth.x500.X500Principal-&quot;&gt;代わりにsetIssuer（X500Principal）&lt;/a&gt;または&lt;a href=&quot;x509certselector#setIssuer-byte:A-&quot;&gt;setIssuer（byte []）を&lt;/a&gt;使用してください。一部の識別名の&lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;文字列形式のエンコーディング情報が失われるため、一部の証明書との一致に失敗する可能性があるため、この方法に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="5c7534df8972d6453c60591d1ad542831d48d839" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Denigrated&lt;/strong&gt;, use &lt;a href=&quot;x509certselector#setSubject-javax.security.auth.x500.X500Principal-&quot;&gt;setSubject(X500Principal)&lt;/a&gt; or &lt;a href=&quot;x509certselector#setSubject-byte:A-&quot;&gt;setSubject(byte[])&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;Denigrated&lt;/strong&gt;、&lt;a href=&quot;x509certselector#setSubject-javax.security.auth.x500.X500Principal-&quot;&gt;代わりにsetSubject（X500Principal）&lt;/a&gt;または&lt;a href=&quot;x509certselector#setSubject-byte:A-&quot;&gt;setSubject（byte []）を&lt;/a&gt;使用してください。一部の識別名のRFC 2253文字列形式のエンコーディング情報が失われるため、一部の証明書との一致に失敗する可能性があるため、この方法に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="cd9136224c76e2a3714229522da5f48b9e557672" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Denigrated&lt;/strong&gt;, use &lt;a href=&quot;x509crlselector#addIssuer-javax.security.auth.x500.X500Principal-&quot;&gt;addIssuer(X500Principal)&lt;/a&gt; or &lt;a href=&quot;x509crlselector#addIssuerName-byte:A-&quot;&gt;addIssuerName(byte[])&lt;/a&gt; instead. This method should not be relied on as it can fail to match some CRLs because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt;、&lt;a href=&quot;x509crlselector#addIssuer-javax.security.auth.x500.X500Principal-&quot;&gt;代わりにaddIssuer（X500Principal）&lt;/a&gt;または&lt;a href=&quot;x509crlselector#addIssuerName-byte:A-&quot;&gt;addIssuerName（byte []）を&lt;/a&gt;使用してください。一部の識別名のRFC 2253文字列形式のエンコーディング情報が失われるため、一部のCRLとの一致に失敗する可能性があるため、この方法に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="ee48114c9632378a22abcada3d6d129aab004186" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Deprecated.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a7c4e514bc5fd58eb61299ffa70daf5a11360bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; An instance created with this constructor cannot be used in a query.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このコンストラクターで作成されたインスタンスはクエリで使用できません。</target>
        </trans-unit>
        <trans-unit id="630df4ba4992fffb3ce91e1886b5d382aa071b00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of J2SE 5, use &lt;a href=&quot;character.unicodeblock#HIGH_SURROGATES&quot;&gt;&lt;code&gt;HIGH_SURROGATES&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;character.unicodeblock#HIGH_PRIVATE_USE_SURROGATES&quot;&gt;&lt;code&gt;HIGH_PRIVATE_USE_SURROGATES&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;character.unicodeblock#LOW_SURROGATES&quot;&gt;&lt;code&gt;LOW_SURROGATES&lt;/code&gt;&lt;/a&gt;. These new constants match the block definitions of the Unicode Standard. The &lt;a href=&quot;character.unicodeblock#of-char-&quot;&gt;&lt;code&gt;of(char)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;character.unicodeblock#of-int-&quot;&gt;&lt;code&gt;of(int)&lt;/code&gt;&lt;/a&gt; methods return the new constants, not SURROGATES_AREA.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;J2SE 5以降、&lt;a href=&quot;character.unicodeblock#HIGH_SURROGATES&quot;&gt; &lt;code&gt;HIGH_SURROGATES&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;character.unicodeblock#HIGH_PRIVATE_USE_SURROGATES&quot;&gt; &lt;code&gt;HIGH_PRIVATE_USE_SURROGATES&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;character.unicodeblock#LOW_SURROGATES&quot;&gt; &lt;code&gt;LOW_SURROGATES&lt;/code&gt; を&lt;/a&gt;使用してください。これらの新しい定数は、Unicode標準のブロック定義と一致しています。&lt;a href=&quot;character.unicodeblock#of-char-&quot;&gt; &lt;code&gt;of(char)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;character.unicodeblock#of-int-&quot;&gt; &lt;code&gt;of(int)&lt;/code&gt; &lt;/a&gt;方法は、新たな定数ではなく、SURROGATES_AREAを返します。</target>
        </trans-unit>
        <trans-unit id="bea11c4943de4e80383ccf6cabccf25f3d669ffc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK 1.1, the preferred way to translate a Unicode character stream into a byte stream in the local encoding is via the &lt;code&gt;OutputStreamWriter&lt;/code&gt;, &lt;code&gt;BufferedWriter&lt;/code&gt;, and &lt;code&gt;PrintWriter&lt;/code&gt; classes.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDK 1.1以降、Unicode文字ストリームをローカルエンコーディングのバイトストリームに変換する好ましい方法は、 &lt;code&gt;OutputStreamWriter&lt;/code&gt; 、 &lt;code&gt;BufferedWriter&lt;/code&gt; 、および &lt;code&gt;PrintWriter&lt;/code&gt; クラスを使用することです。</target>
        </trans-unit>
        <trans-unit id="0a4a417f3a58237d8bbf07cd676a512f83f4e58b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK 1.1, the preferred way to translate a byte stream in the local encoding into a character stream in Unicode is via the &lt;code&gt;InputStreamReader&lt;/code&gt; and &lt;code&gt;BufferedReader&lt;/code&gt; classes.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDK 1.1以降、ローカルエンコーディングのバイトストリームをUnicodeの文字ストリームに変換する推奨方法は、 &lt;code&gt;InputStreamReader&lt;/code&gt; クラスと &lt;code&gt;BufferedReader&lt;/code&gt; クラスを使用する方法です。</target>
        </trans-unit>
        <trans-unit id="a04615889e1bfb35377c6807a345235df9ac2380" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;-(Calendar.get(Calendar.ZONE_OFFSET) +
 Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降、 &lt;code&gt;-(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="878982eb2556a69f9bfe50c3095010b4068d66f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.DAY_OF_MONTH)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.get(Calendar.DAY_OF_MONTH)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="36c0fddb5bbcb815da230c8272dfbfe303a19af2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.DAY_OF_WEEK)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.get(Calendar.DAY_OF_WEEK)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="cac66b7c5dba443928f1edf7c82029e8b363c3f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.HOUR_OF_DAY)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.get(Calendar.HOUR_OF_DAY)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="4a378462a7f795f54b8b824f95714b2a9d43bdaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.MINUTE)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.get(Calendar.MINUTE)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="4c1bac3886e3074f9ad8c6de6d1d06c7a47daa12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.MONTH)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.get(Calendar.MONTH)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="74a6932e86ac6e96c2329b037e37eff5a916ceac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.SECOND)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.get(Calendar.SECOND)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="76c6aa946a3121d3277dbd111eeea3901d0df93c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.YEAR) - 1900&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.get(Calendar.YEAR) - 1900&lt;/code&gt; -1900に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="473459cefb29255e4217b777afc8a095525bcd56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.DAY_OF_MONTH, int date)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.set(Calendar.DAY_OF_MONTH, int date)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="e0906f46f604dbf6cd96768b41726fde2c7d384c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.HOUR_OF_DAY, int hours)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.set(Calendar.HOUR_OF_DAY, int hours)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="90481178c0af5fe998d9783c42dc721924f09110" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.MINUTE, int minutes)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.set(Calendar.MINUTE, int minutes)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="deac964cec2eda934b5a0917f1aea52346da9ddd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.MONTH, int month)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.set(Calendar.MONTH, int month)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="9c75bdb33d59df039d878a0ef70a6e80e685ba13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.SECOND, int seconds)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.set(Calendar.SECOND, int seconds)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="2f094b4016987c9b4987379cf0453fd609d8c362" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.YEAR, year + 1900)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.set(Calendar.YEAR, year + 1900)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="35994280dac8f247e93881fe1c588be47de0d5a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(year + 1900, month, date)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900, month, date)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.set(year + 1900, month, date)&lt;/code&gt; または &lt;code&gt;GregorianCalendar(year + 1900, month, date)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="989eb3bd05ae6343bc8848e6ddc4c7fd875c5c18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(year + 1900, month, date,
 hrs, min)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900,
 month, date, hrs, min)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.set(year + 1900, month, date, hrs, min)&lt;/code&gt; または &lt;code&gt;GregorianCalendar(year + 1900, month, date, hrs, min)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="9fc4fb9fc3e84af58da3c29f5472d032f954b536" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(year + 1900, month, date,
 hrs, min, sec)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900,
 month, date, hrs, min, sec)&lt;/code&gt;, using a UTC &lt;code&gt;TimeZone&lt;/code&gt;, followed by &lt;code&gt;Calendar.getTime().getTime()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、UTC &lt;code&gt;TimeZone&lt;/code&gt; を使用して &lt;code&gt;Calendar.set(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; または &lt;code&gt;GregorianCalendar(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; に置き換えられ、 &lt;code&gt;Calendar.getTime().getTime()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f3b3afdf8c43d11b3f1498e500a7f2aa39fbffc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(year + 1900, month, date,
 hrs, min, sec)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900,
 month, date, hrs, min, sec)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;Calendar.set(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; または &lt;code&gt;GregorianCalendar(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="dfec5d6768645fb2a3f248df70b01333adf48e59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt;, using a GMT &lt;code&gt;TimeZone&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、GMT &lt;code&gt;TimeZone&lt;/code&gt; を使用して、 &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="45a6fb9a47f68185d2a4b65c296ce5b092ff92c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="08cda6ee95a70391388afdf24b400606ab67f773" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, replaced by &lt;code&gt;DateFormat.parse(String s)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降は、 &lt;code&gt;DateFormat.parse(String s)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="56405e93256bc1c3136d0a496479182a45791935" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JDK version 1.1, the preferred way to tokenize an input stream is to convert it into a character stream, for example:</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JDKバージョン1.1以降、入力ストリームをトークン化するための推奨される方法は、入力ストリームを文字ストリームに変換することです。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="a5578992b9d50aae3ce40662f43fb60ac9f5da2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;countermonitor#getDerivedGauge-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;countermonitor#getDerivedGauge-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="9a27135f759aaf4656fc3017060c3ad950edbbbc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;countermonitor#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;countermonitor#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="67f91efe3e29ca7526570034257c05bbc8526b10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;countermonitor#getThreshold-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getThreshold(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;countermonitor#getThreshold-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getThreshold(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="ed04b47fc311e1f9212ad45396c35adf61d7a687" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;countermonitor#setInitThreshold-java.lang.Number-&quot;&gt;&lt;code&gt;setInitThreshold(java.lang.Number)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;countermonitor#setInitThreshold-java.lang.Number-&quot;&gt; &lt;code&gt;setInitThreshold(java.lang.Number)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="460f120037e6fe48f87687bbbe236292498d34b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;countermonitormbean#getDerivedGauge-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;countermonitormbean#getDerivedGauge-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="e0ec4fb585fa9fa7092f9f40216c5b94da8492c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;countermonitormbean#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;countermonitormbean#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="98b6d7cfd706103f385c21fbcd4ee43b2569f6e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;countermonitormbean#getThreshold-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getThreshold(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;countermonitormbean#getThreshold-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getThreshold(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="3a22e4ae5de118e6263531cb454dfedb698e88d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;countermonitormbean#setInitThreshold-java.lang.Number-&quot;&gt;&lt;code&gt;setInitThreshold(java.lang.Number)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;countermonitormbean#setInitThreshold-java.lang.Number-&quot;&gt; &lt;code&gt;setInitThreshold(java.lang.Number)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="616e80b60e36d4d420b944075b371bb7efdbddbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;gaugemonitor#getDerivedGauge-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;gaugemonitor#getDerivedGauge-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="0cfcfc59071cac26b851e691f4ec76d4a61a2728" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;gaugemonitor#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;gaugemonitor#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="ffdbad0486c2092c7115fdb6d8c75516e036a9f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;gaugemonitormbean#getDerivedGauge-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;gaugemonitormbean#getDerivedGauge-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="c6a5a755395c2bbef8ec32a73c852116e3623cc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;gaugemonitormbean#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;gaugemonitormbean#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="015132639ff0fdf63077343e76ec11ce659baf9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;monitor#addObservedObject-javax.management.ObjectName-&quot;&gt;&lt;code&gt;addObservedObject(javax.management.ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;monitor#addObservedObject-javax.management.ObjectName-&quot;&gt; &lt;code&gt;addObservedObject(javax.management.ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="0357f3c303459d3916659a8da0661c528fe48d73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;monitor#getObservedObjects--&quot;&gt;&lt;code&gt;getObservedObjects()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;monitor#getObservedObjects--&quot;&gt; &lt;code&gt;getObservedObjects()&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="ef92eb2d2cac7e4638292f675f185c6d3a2f4b84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;monitormbean#addObservedObject-javax.management.ObjectName-&quot;&gt;&lt;code&gt;addObservedObject(javax.management.ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;monitormbean#addObservedObject-javax.management.ObjectName-&quot;&gt; &lt;code&gt;addObservedObject(javax.management.ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="882b06ed4ae1280d848e46549865880eb606fe90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;monitormbean#getObservedObjects--&quot;&gt;&lt;code&gt;getObservedObjects()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;monitormbean#getObservedObjects--&quot;&gt; &lt;code&gt;getObservedObjects()&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="c2d174895954ce7745a316d6446a7314d6353d65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;stringmonitor#getDerivedGauge-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;stringmonitor#getDerivedGauge-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="732d604712d74ac11ee18fcee1de7f978bd1b16f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;stringmonitor#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;stringmonitor#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="e907885d56ca688aea024b18efa36e6ee6442cd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;stringmonitormbean#getDerivedGauge-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;stringmonitormbean#getDerivedGauge-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="31ec10e15461409911702662bc0be1531d08b273" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; As of JMX 1.2, replaced by &lt;a href=&quot;stringmonitormbean#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;JMX 1.2以降、&lt;a href=&quot;stringmonitormbean#getDerivedGaugeTimeStamp-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="5f9862a6c266b1e0b4362960704f1b4e22a217e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Extension mechanism will be removed in a future release. Use class path instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;拡張メカニズムは将来のリリースで削除される予定です。代わりにクラスパスを使用してください。</target>
        </trans-unit>
        <trans-unit id="7aaf470404af333f091c8f6a2c8bc312a024c124" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Initialization of this field is prone to deadlocks. The field must be initialized by the Logger class initialization which may cause deadlocks with the LogManager class initialization. In such cases two class initialization wait for each other to complete. The preferred way to get the global logger object is via the call &lt;code&gt;Logger.getGlobal()&lt;/code&gt;. For compatibility with old JDK versions where the &lt;code&gt;Logger.getGlobal()&lt;/code&gt; is not available use the call &lt;code&gt;Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)&lt;/code&gt; or &lt;code&gt;Logger.getLogger(&quot;global&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このフィールドを初期化すると、デッドロックが発生しやすくなります。Loggerクラスの初期化でデッドロックが発生する可能性があるLoggerクラスの初期化によってフィールドを初期化する必要があります。このような場合、2つのクラスの初期化は互いに完了するのを待ちます。グローバルロガーオブジェクトを取得するための推奨される方法は、 &lt;code&gt;Logger.getGlobal()&lt;/code&gt; を呼び出すことです。 &lt;code&gt;Logger.getGlobal()&lt;/code&gt; が使用できない古いJDKバージョンとの互換性のために、 &lt;code&gt;Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)&lt;/code&gt; または &lt;code&gt;Logger.getLogger(&quot;global&quot;)&lt;/code&gt; の呼び出しを使用します。</target>
        </trans-unit>
        <trans-unit id="507d0f789c41f0a7652a82f56d800007bd6a899d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Instead of using this field, directly create the equivalent array &lt;code&gt;{ ImageInputStream.class }&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このフィールドを使用する代わりに、同等の配列 &lt;code&gt;{ ImageInputStream.class }&lt;/code&gt; 直接作成します。</target>
        </trans-unit>
        <trans-unit id="be97832e628fa1834e418be68a6efb7252f261ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Instead of using this field, directly create the equivalent array &lt;code&gt;{ ImageOutputStream.class }&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このフィールドを使用する代わりに、同等の配列 &lt;code&gt;{ ImageOutputStream.class }&lt;/code&gt; 直接作成します。</target>
        </trans-unit>
        <trans-unit id="d8278060a38e17dbc920ac658cc99dbbbaf6aa30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; No replacement.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;代替はありません。</target>
        </trans-unit>
        <trans-unit id="fb1a7ffa0789315a49dda57536c6dd5f3c23ed04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Replaced by &lt;a href=&quot;classloader#defineClass-java.lang.String-byte:A-int-int-&quot;&gt;&lt;code&gt;defineClass(String, byte[], int, int)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;&lt;a href=&quot;classloader#defineClass-java.lang.String-byte:A-int-int-&quot;&gt; &lt;code&gt;defineClass(String, byte[], int, int)&lt;/code&gt; &lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="906e43fb9237ed0eec2fbb873d884a76b0c4bea2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Replaced by &lt;a href=&quot;signaturespi#engineSetParameter-java.security.spec.AlgorithmParameterSpec-&quot;&gt;&lt;code&gt;engineSetParameter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;&lt;a href=&quot;signaturespi#engineSetParameter-java.security.spec.AlgorithmParameterSpec-&quot;&gt; &lt;code&gt;engineSetParameter&lt;/code&gt; に&lt;/a&gt;置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b67e3c4b5f2d19e2167efeeb8a3045a792a01e88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Replaced by isJavaIdentifierPart(char).</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;isJavaIdentifierPart（char）に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="2a5406a7b5ce264f4eece850a0d9cb5aa3560d95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Replaced by isJavaIdentifierStart(char).</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;isJavaIdentifierStart（char）に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="70efdfae7bd4d567181a84c991d3a5b88b183ca0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Replaced by isWhitespace(char).</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;isWhitespace（char）に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b5a8d86f7f8635cc95871d07a49d092b69f31ca8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The definition of this call depends on &lt;a href=&quot;thread#suspend--&quot;&gt;&lt;code&gt;suspend()&lt;/code&gt;&lt;/a&gt;, which is deprecated. Further, the results of this call were never well-defined.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;この呼び出しの定義は、非推奨の&lt;a href=&quot;thread#suspend--&quot;&gt; &lt;code&gt;suspend()&lt;/code&gt; に&lt;/a&gt;依存しています。さらに、この呼び出しの結果は明確にはなりませんでした。</target>
        </trans-unit>
        <trans-unit id="4a0440758772f50dd1c737690ada4c79fccd99dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The definition of this call depends on &lt;a href=&quot;threadgroup#suspend--&quot;&gt;&lt;code&gt;suspend()&lt;/code&gt;&lt;/a&gt;, which is deprecated. Further, the behavior of this call was never specified.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;この呼び出しの定義は、非推奨の&lt;a href=&quot;threadgroup#suspend--&quot;&gt; &lt;code&gt;suspend()&lt;/code&gt; に&lt;/a&gt;依存しています。さらに、この呼び出しの動作は指定されていません。</target>
        </trans-unit>
        <trans-unit id="e9a8c48e3e7a2b3f2e1e228c65442f396b0578c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The dependency on &lt;code&gt;AWTPermission&lt;/code&gt; creates an impediment to future modularization of the Java platform. Users of this method should instead invoke &lt;a href=&quot;securitymanager#checkPermission-java.security.Permission-&quot;&gt;&lt;code&gt;checkPermission(java.security.Permission)&lt;/code&gt;&lt;/a&gt; directly. This method will be changed in a future release to check the permission &lt;code&gt;java.security.AllPermission&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt; &lt;code&gt;AWTPermission&lt;/code&gt; への依存は、Javaプラットフォームの将来のモジュール化を妨げます。このメソッドのユーザーは、代わりに&lt;a href=&quot;securitymanager#checkPermission-java.security.Permission-&quot;&gt; &lt;code&gt;checkPermission(java.security.Permission)&lt;/code&gt; を&lt;/a&gt;直接呼び出す必要があります。このメソッドは、将来のリリースで &lt;code&gt;java.security.AllPermission&lt;/code&gt; 権限をチェックするように変更される予定です。</target>
        </trans-unit>
        <trans-unit id="3df3d5ebda5664be7fe341780c571b3293bc26f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The dependency on &lt;code&gt;PropertyChangeListener&lt;/code&gt; creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt; &lt;code&gt;PropertyChangeListener&lt;/code&gt; への依存は、Javaプラットフォームの将来のモジュール化に大きな障害をもたらします。このメソッドは、将来のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="f0396ed3372ff028e0d457e476567e519d233139" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The dependency on &lt;code&gt;PropertyChangeListener&lt;/code&gt; creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. Applications that need to monitor progress of the packer can poll the value of the &lt;a href=&quot;pack200.packer#PROGRESS&quot;&gt;&lt;code&gt;PROGRESS&lt;/code&gt;&lt;/a&gt; property instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt; &lt;code&gt;PropertyChangeListener&lt;/code&gt; への依存は、Javaプラットフォームの将来のモジュール化に大きな障害をもたらします。このメソッドは、将来のリリースで削除される予定です。パッカーの進行状況を監視する必要があるアプリケーションは、代わりに&lt;a href=&quot;pack200.packer#PROGRESS&quot;&gt; &lt;code&gt;PROGRESS&lt;/code&gt; &lt;/a&gt;プロパティの値をポーリングできます。</target>
        </trans-unit>
        <trans-unit id="9c59070ae96883cde53103ebfc274c8c98ada7db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The dependency on &lt;code&gt;PropertyChangeListener&lt;/code&gt; creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. Applications that need to monitor progress of the unpacker can poll the value of the &lt;a href=&quot;pack200.unpacker#PROGRESS&quot;&gt;&lt;code&gt;PROGRESS&lt;/code&gt;&lt;/a&gt; property instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt; &lt;code&gt;PropertyChangeListener&lt;/code&gt; への依存は、Javaプラットフォームの将来のモジュール化に大きな障害をもたらします。このメソッドは、将来のリリースで削除される予定です。アンパッカーの進行状況を監視する必要があるアプリケーションは、代わりに&lt;a href=&quot;pack200.unpacker#PROGRESS&quot;&gt; &lt;code&gt;PROGRESS&lt;/code&gt; &lt;/a&gt;プロパティの値をポーリングできます。</target>
        </trans-unit>
        <trans-unit id="1fc405f4a5bc1517cef96c074e0a048981f2795d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The dependency on &lt;code&gt;PropertyChangeListener&lt;/code&gt; creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. The global &lt;code&gt;LogManager&lt;/code&gt; can detect changes to the logging configuration by overridding the &lt;a href=&quot;logmanager#readConfiguration--&quot;&gt;&lt;code&gt;readConfiguration&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt; &lt;code&gt;PropertyChangeListener&lt;/code&gt; への依存は、Javaプラットフォームの将来のモジュール化に大きな障害をもたらします。このメソッドは、将来のリリースで削除される予定です。グローバル &lt;code&gt;LogManager&lt;/code&gt; は、&lt;a href=&quot;logmanager#readConfiguration--&quot;&gt; &lt;code&gt;readConfiguration&lt;/code&gt; &lt;/a&gt;メソッドをオーバーライドすることにより、ロギング構成への変更を検出できます。</target>
        </trans-unit>
        <trans-unit id="4ad11ce3e00515e98946a5139fc430d292761813" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The instance specific getRequestProperty method should be used after an appropriate instance of URLConnection is obtained.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;URLConnectionの適切なインスタンスを取得した後、インスタンス固有のgetRequestPropertyメソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="43dda38bb7c6c3402439879e1752f85249a13691" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The instance specific setRequestProperty method should be used after an appropriate instance of URLConnection is obtained. Invoking this method will have no effect.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;URLConnectionの適切なインスタンスを取得した後で、インスタンス固有のsetRequestPropertyメソッドを使用する必要があります。このメソッドを呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="b37314ce06be895271e1302aaa7670c0f2eb6c42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The resulting string may vary depending on the platform's default encoding. Instead, use the decode(String,String) method to specify the encoding.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;結果の文字列は、プラットフォームのデフォルトのエンコーディングによって異なる場合があります。代わりに、decode（String、String）メソッドを使用してエンコードを指定します。</target>
        </trans-unit>
        <trans-unit id="fb8c0db146803b6c03a4bc2ab5bf06c5bc96c4e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; The resulting string may vary depending on the platform's default encoding. Instead, use the encode(String,String) method to specify the encoding.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;結果の文字列は、プラットフォームのデフォルトのエンコーディングによって異なる場合があります。代わりに、encode（String、String）メソッドを使用してエンコーディングを指定します。</target>
        </trans-unit>
        <trans-unit id="93f324f35aa003515b4ef760c7017a778f0fc91d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI, via the &lt;a href=&quot;file#toURI--&quot;&gt;&lt;code&gt;toURI&lt;/code&gt;&lt;/a&gt; method, and then converting the URI into a URL via the &lt;a href=&quot;../net/uri#toURL--&quot;&gt;&lt;code&gt;URI.toURL&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、URLで不正な文字を自動的にエスケープしません。新しいコードが最初に介して、URIに変換することにより、URLに抽象パス名を変換することをお勧めし&lt;a href=&quot;file#toURI--&quot;&gt; &lt;code&gt;toURI&lt;/code&gt; の&lt;/a&gt;方法、及びその後介してURLにURIを変換&lt;a href=&quot;../net/uri#toURL--&quot;&gt; &lt;code&gt;URI.toURL&lt;/code&gt; の&lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="c164c76059ba585fda55a9b79ba5d3961184eb7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the &lt;code&gt;String&lt;/code&gt; constructors that take a &lt;a href=&quot;../nio/charset/charset&quot;&gt;&lt;code&gt;Charset&lt;/code&gt;&lt;/a&gt;, charset name, or that use the platform's default charset.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、バイトを文字に適切に変換しません。JDK 1.1以降、これを行うための推奨方法は、&lt;a href=&quot;../nio/charset/charset&quot;&gt; &lt;code&gt;Charset&lt;/code&gt; &lt;/a&gt;または文字セット名を取得するか、プラットフォームのデフォルトの文字セットを使用する &lt;code&gt;String&lt;/code&gt; コンストラクターを使用する方法です。</target>
        </trans-unit>
        <trans-unit id="639956f5d1c62c0afb3a4164bd3c42642c13ac53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the &lt;code&gt;toString(String enc)&lt;/code&gt; method, which takes an encoding-name argument, or the &lt;code&gt;toString()&lt;/code&gt; method, which uses the platform's default character encoding.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、バイトを文字に適切に変換しません。JDK 1.1以降、これを行うための推奨される方法は、encoding-name引数を取る &lt;code&gt;toString(String enc)&lt;/code&gt; メソッド、またはプラットフォームのデフォルトの文字エンコーディングを使用する &lt;code&gt;toString()&lt;/code&gt; メソッドを使用することです。</target>
        </trans-unit>
        <trans-unit id="5db6d384981fbe3b0313645e03aafab848d43a23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method does not properly convert bytes to characters. As of JDK 1.1, the preferred way to read lines of text is via the &lt;code&gt;BufferedReader.readLine()&lt;/code&gt; method. Programs that use the &lt;code&gt;DataInputStream&lt;/code&gt; class to read lines can be converted to use the &lt;code&gt;BufferedReader&lt;/code&gt; class by replacing code of the form:</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、バイトを文字に適切に変換しません。JDK 1.1以降、テキストの行を読み取るための推奨される方法は、 &lt;code&gt;BufferedReader.readLine()&lt;/code&gt; メソッドを使用することです。 &lt;code&gt;DataInputStream&lt;/code&gt; クラスを使用して行を読み取るプログラムは、次の形式のコードを置き換えることにより、 &lt;code&gt;BufferedReader&lt;/code&gt; クラスを使用するように変換できます。</target>
        </trans-unit>
        <trans-unit id="21fabaa948400bc1861c6eab859f615a9c521bc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method does not properly convert bytes to characters. see DataInputStream for the details and alternatives.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、バイトを文字に適切に変換しません。詳細と代替方法については、DataInputStreamを参照してください。</target>
        </trans-unit>
        <trans-unit id="d3263d94da5e9228f2815ca9949da68aed094809" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method does not properly convert characters into bytes. As of JDK 1.1, the preferred way to do this is via the &lt;a href=&quot;string#getBytes--&quot;&gt;&lt;code&gt;getBytes()&lt;/code&gt;&lt;/a&gt; method, which uses the platform's default charset.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、文字をバイトに適切に変換しません。JDK 1.1以降、これを行うための推奨方法は、プラットフォームのデフォルトの文字セットを使用する&lt;a href=&quot;string#getBytes--&quot;&gt; &lt;code&gt;getBytes()&lt;/code&gt; &lt;/a&gt;メソッドを使用することです。</target>
        </trans-unit>
        <trans-unit id="7977305b85fa3fc0037abc7e5d1e4d0be864dc04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method does not throw an IOException if an I/O error occurs while saving the property list. The preferred way to save a properties list is via the &lt;code&gt;store(OutputStream out,
 String comments)&lt;/code&gt; method or the &lt;code&gt;storeToXML(OutputStream os, String comment)&lt;/code&gt; method.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;プロパティリストの保存中にI / Oエラーが発生した場合、このメソッドはIOExceptionをスローしません。プロパティリストを保存する好ましい方法は、 &lt;code&gt;store(OutputStream out, String comments)&lt;/code&gt; メソッドまたは &lt;code&gt;storeToXML(OutputStream os, String comment)&lt;/code&gt; メソッドを使用することです。</target>
        </trans-unit>
        <trans-unit id="5d053ccf537b3a0f344890106d54a5b441ef6054" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method does not write the values contained by this &lt;code&gt;PutField&lt;/code&gt; object in a proper format, and may result in corruption of the serialization stream. The correct way to write &lt;code&gt;PutField&lt;/code&gt; data is by calling the &lt;a href=&quot;objectoutputstream#writeFields--&quot;&gt;&lt;code&gt;ObjectOutputStream.writeFields()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、この &lt;code&gt;PutField&lt;/code&gt; オブジェクトに含まれる値を適切な形式で書き込まないため、シリアル化ストリームが破損する可能性があります。 &lt;code&gt;PutField&lt;/code&gt; データを書き込む正しい方法は、&lt;a href=&quot;objectoutputstream#writeFields--&quot;&gt; &lt;code&gt;ObjectOutputStream.writeFields()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="ccd5bbaa41183c6151fdd8cd3f1a579580a2ba96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method exists solely for use with &lt;a href=&quot;thread#suspend--&quot;&gt;&lt;code&gt;suspend()&lt;/code&gt;&lt;/a&gt;, which has been deprecated because it is deadlock-prone. For more information, see &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、&lt;a href=&quot;thread#suspend--&quot;&gt; &lt;code&gt;suspend()&lt;/code&gt; &lt;/a&gt;で使用するためにのみ存在します。これはデッドロックが発生しやすいため非推奨です。詳細については、「&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Thread.stop、Thread.suspend、およびThread.resumeが推奨されない理由&lt;/a&gt;」を参照してください。。</target>
        </trans-unit>
        <trans-unit id="fc1d830609cea68bde7a79fa77b27f7f3908fb3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method has been deprecated, as it is inherently deadlock-prone. If the target thread holds a lock on the monitor protecting a critical system resource when it is suspended, no thread can access this resource until the target thread is resumed. If the thread that would resume the target thread attempts to lock this monitor prior to calling &lt;code&gt;resume&lt;/code&gt;, deadlock results. Such deadlocks typically manifest themselves as &quot;frozen&quot; processes. For more information, see &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは本質的にデッドロックが発生しやすいため、非推奨になりました。ターゲットスレッドが中断されたときに重要なシステムリソースを保護しているモニター上でロックを保持している場合、ターゲットスレッドが再開されるまで、スレッドはこのリソースにアクセスできません。ターゲット・スレッドの試みを再開するスレッドが呼び出す前にこのモニターロックした場合は &lt;code&gt;resume&lt;/code&gt; 、デッドロックの結果を。このようなデッドロックは通常、「凍結された」プロセスとして現れます。詳細については、「&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Thread.stop、Thread.suspend、およびThread.resumeが推奨されない理由&lt;/a&gt;」を参照してください。。</target>
        </trans-unit>
        <trans-unit id="f8ffa6e9a6be1c4b1f23c55d4d4a004f3aed2ae4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method has no effect. The MBean Server used to obtain an attribute value is &lt;a href=&quot;queryeval#getMBeanServer--&quot;&gt;&lt;code&gt;QueryEval.getMBeanServer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは効果がありません。属性値を取得するために使用されるMBeanサーバーは&lt;a href=&quot;queryeval#getMBeanServer--&quot;&gt; &lt;code&gt;QueryEval.getMBeanServer()&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d7bbdd24a338dab2d78362de2da6073bff0c8ab0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method is inherently deadlock-prone. See &lt;a href=&quot;thread#suspend--&quot;&gt;&lt;code&gt;Thread.suspend()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;この方法は本質的にデッドロックが発生しやすいです。詳細については、&lt;a href=&quot;thread#suspend--&quot;&gt; &lt;code&gt;Thread.suspend()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="efe102f6701e57a8841f3b8a799d88b2b8de6f06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method is inherently unsafe. It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;この方法は本質的に安全ではありません。他のスレッドがそれらのオブジェクトを同時に操作しているときに、ライブオブジェクトでファイナライザーが呼び出され、動作が不安定になったり、デッドロックが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="17af8cc57a4a460911e5ce53067fdf3d03be4fb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method is inherently unsafe. See &lt;a href=&quot;thread#stop--&quot;&gt;&lt;code&gt;Thread.stop()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;この方法は本質的に安全ではありません。詳細については、&lt;a href=&quot;thread#stop--&quot;&gt; &lt;code&gt;Thread.stop()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="930d66f874071f08b79dcd9c9885f729f63f72a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method is inherently unsafe. Stopping a thread with Thread.stop causes it to unlock all of the monitors that it has locked (as a natural consequence of the unchecked &lt;code&gt;ThreadDeath&lt;/code&gt; exception propagating up the stack). If any of the objects previously protected by these monitors were in an inconsistent state, the damaged objects become visible to other threads, potentially resulting in arbitrary behavior. Many uses of &lt;code&gt;stop&lt;/code&gt; should be replaced by code that simply modifies some variable to indicate that the target thread should stop running. The target thread should check this variable regularly, and return from its run method in an orderly fashion if the variable indicates that it is to stop running. If the target thread waits for long periods (on a condition variable, for example), the &lt;code&gt;interrupt&lt;/code&gt; method should be used to interrupt the wait. For more information, see &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;この方法は本質的に安全ではありません。 Thread.stopでスレッドを停止すると、そのスレッドがロックしているすべてのモニターのロックが解除されます（チェックされていない &lt;code&gt;ThreadDeath&lt;/code&gt; 例外がスタックを伝播することによる自然な結果として）。これらのモニターによって以前に保護されていたオブジェクトのいずれかが不整合な状態であった場合、損傷したオブジェクトは他のスレッドから見えるようになり、潜在的に任意の動作を引き起こす可能性があります。 &lt;code&gt;stop&lt;/code&gt; 多くの用途ターゲットスレッドの実行を停止する必要があることを示すために、いくつかの変数を単に変更するコードに置き換える必要があります。ターゲットスレッドはこの変数を定期的にチェックし、変数が実行を停止することを示している場合は、そのrunメソッドから整然とした方法で戻る必要があります。ターゲットスレッドが長時間（条件変数などで）待機する場合は、 &lt;code&gt;interrupt&lt;/code&gt; メソッドを使用して待機を中断する必要があります。詳細については、「&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Thread.stop、Thread.suspend、およびThread.resumeが推奨されない理由&lt;/a&gt;」を参照してください。。</target>
        </trans-unit>
        <trans-unit id="b11638051473c99081eec850f8871277d28f3749" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method is not needed because a &lt;code&gt;ValueExp&lt;/code&gt; can access the MBean server in which it is being evaluated by using &lt;a href=&quot;queryeval#getMBeanServer--&quot;&gt;&lt;code&gt;QueryEval.getMBeanServer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt; &lt;code&gt;ValueExp&lt;/code&gt; は&lt;a href=&quot;queryeval#getMBeanServer--&quot;&gt; &lt;code&gt;QueryEval.getMBeanServer()&lt;/code&gt; &lt;/a&gt;を使用して評価されているMBeanサーバーにアクセスできるため、このメソッドは必要ありません。</target>
        </trans-unit>
        <trans-unit id="182577ac145ef6356fbb54b4e8d7b69ad1a0e1bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method is used solely in conjunction with &lt;code&gt;Thread.suspend&lt;/code&gt; and &lt;code&gt;ThreadGroup.suspend&lt;/code&gt;, both of which have been deprecated, as they are inherently deadlock-prone. See &lt;a href=&quot;thread#suspend--&quot;&gt;&lt;code&gt;Thread.suspend()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、本質的にデッドロックが発生しやすいため、どちらも非推奨になっている &lt;code&gt;Thread.suspend&lt;/code&gt; および &lt;code&gt;ThreadGroup.suspend&lt;/code&gt; と組み合わせてのみ使用されます。詳細については、&lt;a href=&quot;thread#suspend--&quot;&gt; &lt;code&gt;Thread.suspend()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="527e75e19b9f65f51561eaa1a7e9800f072f8818" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method relies on the caller being at a stack depth of 4 which is error-prone and cannot be enforced by the runtime. Users of this method should instead invoke &lt;a href=&quot;securitymanager#checkPermission-java.security.Permission-&quot;&gt;&lt;code&gt;checkPermission(java.security.Permission)&lt;/code&gt;&lt;/a&gt; directly. This method will be changed in a future release to check the permission &lt;code&gt;java.security.AllPermission&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、呼び出し元がスタックの深さ4に依存します。スタックの深さはエラーが発生しやすく、ランタイムでは適用できません。このメソッドのユーザーは、代わりに&lt;a href=&quot;securitymanager#checkPermission-java.security.Permission-&quot;&gt; &lt;code&gt;checkPermission(java.security.Permission)&lt;/code&gt; を&lt;/a&gt;直接呼び出す必要があります。このメソッドは、将来のリリースで &lt;code&gt;java.security.AllPermission&lt;/code&gt; 権限をチェックするように変更される予定です。</target>
        </trans-unit>
        <trans-unit id="e0fe1f202aa616a72257d857632b1b5b42a89387" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method used to return the value of a proprietary property in the master file of the &quot;SUN&quot; Cryptographic Service Provider in order to determine how to parse algorithm-specific parameters. Use the new provider-based and algorithm-independent &lt;code&gt;AlgorithmParameters&lt;/code&gt; and &lt;code&gt;KeyFactory&lt;/code&gt; engine classes (introduced in the J2SE version 1.2 platform) instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、アルゴリズム固有のパラメーターを解析する方法を決定するために、「SUN」暗号化サービスプロバイダーのマスターファイル内の専用プロパティの値を返すために使用されていました。代わりに、新しいプロバイダーベースでアルゴリズムに依存しない &lt;code&gt;AlgorithmParameters&lt;/code&gt; および &lt;code&gt;KeyFactory&lt;/code&gt; エンジンクラス（J2SEバージョン1.2プラットフォームで導入）を使用してください。</target>
        </trans-unit>
        <trans-unit id="b6d65e0cbb8dbd6f3aed129ad9fff4fa1fc4ed73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method was originally designed to destroy this thread without any cleanup. Any monitors it held would have remained locked. However, the method was never implemented. If if were to be implemented, it would be deadlock-prone in much the manner of &lt;a href=&quot;thread#suspend--&quot;&gt;&lt;code&gt;suspend()&lt;/code&gt;&lt;/a&gt;. If the target thread held a lock protecting a critical system resource when it was destroyed, no thread could ever access this resource again. If another thread ever attempted to lock this resource, deadlock would result. Such deadlocks typically manifest themselves as &quot;frozen&quot; processes. For more information, see &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt; Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドは、最初はこのスレッドをクリーンアップせずに破棄するために設計されました。それが保持していたモニターはロックされたままでした。ただし、このメソッドは実装されていません。実装された場合、&lt;a href=&quot;thread#suspend--&quot;&gt; &lt;code&gt;suspend()&lt;/code&gt; &lt;/a&gt;とほぼ同じようにデッドロックが発生しやすくなります。ターゲットスレッドが破棄されたときに重要なシステムリソースを保護するロックを保持していた場合、スレッドはこのリソースに再びアクセスできません。別のスレッドがこのリソースをロックしようとした場合、デッドロックが発生します。このようなデッドロックは通常、「凍結された」プロセスとして現れます。詳細については、「&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Thread.stop、Thread.suspend、およびThread.resumeが推奨されない理由&lt;/a&gt;」を参照してください。。</target>
        </trans-unit>
        <trans-unit id="7814353e4886c8f8212ac50208410f812501849c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This method was originally designed to force a thread to stop and throw a given &lt;code&gt;Throwable&lt;/code&gt; as an exception. It was inherently unsafe (see &lt;a href=&quot;thread#stop--&quot;&gt;&lt;code&gt;stop()&lt;/code&gt;&lt;/a&gt; for details), and furthermore could be used to generate exceptions that the target thread was not prepared to handle. For more information, see &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このメソッドはもともと、スレッドを強制的に停止し、特定の &lt;code&gt;Throwable&lt;/code&gt; を例外としてスローするように設計されていました。これは本質的に安全ではなく（詳細については、&lt;a href=&quot;thread#stop--&quot;&gt; &lt;code&gt;stop()&lt;/code&gt; &lt;/a&gt;を参照）、さらに、ターゲットスレッドが処理する準備ができていない例外を生成するために使用できました。詳細については、「&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Thread.stop、Thread.suspend、およびThread.resumeが推奨されない理由&lt;/a&gt;」を参照してください。。</target>
        </trans-unit>
        <trans-unit id="e5d86e9acda989239e7bcecbe5006db0d3c5e779" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; This type of security checking is not recommended. It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt; call be used instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;このタイプのセキュリティチェックは推奨されません。代わりに、 &lt;code&gt;checkPermission&lt;/code&gt; 呼び出しを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2e824c56277cd8056458e12a3ba17304a3aad1d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use #checkPermission(java.security.Permission) instead</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;代わりに#checkPermission（java.security.Permission）を使用してください</target>
        </trans-unit>
        <trans-unit id="cd66cbf3596302d0fecb03d5482fb532feb4d8d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;a href=&quot;logger#logrb-java.util.logging.Level-java.lang.String-java.lang.String-java.util.ResourceBundle-java.lang.String-java.lang.Object...-&quot;&gt;&lt;code&gt;logrb(java.util.logging.Level, java.lang.String,
   java.lang.String, java.util.ResourceBundle, java.lang.String,
   java.lang.Object...)&lt;/code&gt;&lt;/a&gt; instead</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;使用&lt;a href=&quot;logger#logrb-java.util.logging.Level-java.lang.String-java.lang.String-java.util.ResourceBundle-java.lang.String-java.lang.Object...-&quot;&gt; &lt;code&gt;logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)&lt;/code&gt; &lt;/a&gt;の代わりに</target>
        </trans-unit>
        <trans-unit id="b21d5b6e84ae3d62d86bbc193d978c46ade9d93b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;a href=&quot;logger#logrb-java.util.logging.Level-java.lang.String-java.lang.String-java.util.ResourceBundle-java.lang.String-java.lang.Object...-&quot;&gt;&lt;code&gt;logrb(java.util.logging.Level, java.lang.String,
 java.lang.String, java.util.ResourceBundle, java.lang.String,
 java.lang.Object...)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;使用&lt;a href=&quot;logger#logrb-java.util.logging.Level-java.lang.String-java.lang.String-java.util.ResourceBundle-java.lang.String-java.lang.Object...-&quot;&gt; &lt;code&gt;logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)&lt;/code&gt; &lt;/a&gt;の代わりに。</target>
        </trans-unit>
        <trans-unit id="f9474223b1961786d382dc8025928e377a3ca779" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;a href=&quot;logger#logrb-java.util.logging.Level-java.lang.String-java.lang.String-java.util.ResourceBundle-java.lang.String-java.lang.Throwable-&quot;&gt;&lt;code&gt;logrb(java.util.logging.Level, java.lang.String,
     java.lang.String, java.util.ResourceBundle, java.lang.String,
     java.lang.Throwable)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;使用&lt;a href=&quot;logger#logrb-java.util.logging.Level-java.lang.String-java.lang.String-java.util.ResourceBundle-java.lang.String-java.lang.Throwable-&quot;&gt; &lt;code&gt;logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Throwable)&lt;/code&gt; &lt;/a&gt;代わりに。</target>
        </trans-unit>
        <trans-unit id="64e50d78f60b29b324551d235ccc068e162ca7af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;a href=&quot;mbeanserver#getClassLoader-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getClassLoader&lt;/code&gt;&lt;/a&gt; to obtain the class loader for deserialization.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;&lt;a href=&quot;mbeanserver#getClassLoader-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getClassLoader&lt;/code&gt; &lt;/a&gt;を使用して、逆シリアル化用のクラスローダーを取得します。</target>
        </trans-unit>
        <trans-unit id="9c1311bd972f319f089ccbd62b5a77d3eec2d701" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;a href=&quot;mbeanserver#getClassLoaderFor-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getClassLoaderFor&lt;/code&gt;&lt;/a&gt; to obtain the appropriate class loader for deserialization.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;&lt;a href=&quot;mbeanserver#getClassLoaderFor-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getClassLoaderFor&lt;/code&gt; &lt;/a&gt;を使用して、逆シリアル化に適したクラスローダーを取得します。</target>
        </trans-unit>
        <trans-unit id="42eef4810c2ea47eb22be368db689453ef8a3d0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;a href=&quot;mbeanserver#getClassLoaderRepository--&quot;&gt;&lt;code&gt;getClassLoaderRepository()&lt;/code&gt;&lt;/a&gt; to obtain the class loader repository and use it to deserialize.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;使用&lt;a href=&quot;mbeanserver#getClassLoaderRepository--&quot;&gt; &lt;code&gt;getClassLoaderRepository()&lt;/code&gt; &lt;/a&gt;クラスローダリポジトリを取得し、デシリアライズするためにそれを使用します。</target>
        </trans-unit>
        <trans-unit id="fe2e22a6b91e2cd5a59c2cf9033142c3278350a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;a href=&quot;opentype#ALLOWED_CLASSNAMES_LIST&quot;&gt;&lt;code&gt;ALLOWED_CLASSNAMES_LIST&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;代わりに&lt;a href=&quot;opentype#ALLOWED_CLASSNAMES_LIST&quot;&gt; &lt;code&gt;ALLOWED_CLASSNAMES_LIST&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="18775cf4bfbfdbaeaba9a8a670ecc3ae8cfc9bde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;a href=&quot;signature#setParameter-java.security.spec.AlgorithmParameterSpec-&quot;&gt;&lt;code&gt;setParameter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;&lt;a href=&quot;signature#setParameter-java.security.spec.AlgorithmParameterSpec-&quot;&gt; &lt;code&gt;setParameter&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="543e1a0cd3ea3e94e2e9868d5f47d7a05e6a7906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use DatagramSocket instead for UDP transport.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;UDPトランスポートの代わりにDatagramSocketを使用してください。</target>
        </trans-unit>
        <trans-unit id="11b7d720e75ca3c30beb93df31e5a144d664ddbc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use setURL(URL, String, String, int, String, String, String, String);</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;setURL（URL、String、String、int、String、String、String、String）;を使用します。</target>
        </trans-unit>
        <trans-unit id="48f8c33b295036cbe745ec1f7d28d6b35a661c5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use the following code or its equivalent instead: ...... int ttl = mcastSocket.getTimeToLive(); mcastSocket.setTimeToLive(newttl); mcastSocket.send(p); mcastSocket.setTimeToLive(ttl); ......</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;代わりに、次のコードまたは同等のコードを使用してください。...... int ttl = mcastSocket.getTimeToLive（）; mcastSocket.setTimeToLive（newttl）; mcastSocket.send（p）; mcastSocket.setTimeToLive（ttl）; &amp;hellip;&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="26f3be0cc2152ac1fdd20fa3b05f81540a711e63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; equivalent to &lt;a href=&quot;monitor#alreadyNotifieds&quot;&gt;&lt;code&gt;alreadyNotifieds&lt;/code&gt;&lt;/a&gt;[0].</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;&lt;a href=&quot;monitor#alreadyNotifieds&quot;&gt; &lt;code&gt;alreadyNotifieds&lt;/code&gt; &lt;/a&gt; [0] と同等です。</target>
        </trans-unit>
        <trans-unit id="198af54613ceba5c3cddc17f2cfb8a93ac91f1f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; it is misplaced and shouldn't have existed.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;それは見当違いであり、存在すべきではありませんでした。</target>
        </trans-unit>
        <trans-unit id="833971e5dc1b4f4dcea9a5a0a7a9a37a64a1c914" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; use getTimeToLive instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;代わりにgetTimeToLiveを使用してください。</target>
        </trans-unit>
        <trans-unit id="2c4ef4dba01eaba83bf0cf00b57fcf7fc88c41d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; use setTimeToLive instead.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;代わりにsetTimeToLiveを使用してください。</target>
        </trans-unit>
        <trans-unit id="15c74cd2e81756ce59c2f224d959ca2d2786c9a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; use the getTimeToLive method instead, which returns an &lt;b&gt;int&lt;/b&gt; instead of a &lt;b&gt;byte&lt;/b&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;代わりに、getTimeToLiveメソッドを使用してください。このメソッドは、&lt;b&gt;byte&lt;/b&gt;ではなく&lt;b&gt;int&lt;/b&gt;を返し&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="7ff4757609ce241ee7873657ee825fee6a696bef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; use the setTimeToLive method instead, which uses &lt;b&gt;int&lt;/b&gt; instead of &lt;b&gt;byte&lt;/b&gt; as the type for ttl.</source>
          <target state="translated">&lt;strong&gt;非推奨。&lt;/strong&gt;代わりに、setTimeToLiveメソッドを使用します。これは、ttlのタイプとして&lt;b&gt;byte&lt;/b&gt;ではなく&lt;b&gt;int&lt;/b&gt;を使用します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e499170c024d09484d515b1e2e99b481724e4b2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Errors&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c3d140c8e464f134cec3b0eebd38bf683f55d62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Examples&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aec29b6e22750bc511d0ca82430cb4a126753e79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Examples&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="7a41bd0a5bb0ef138084e0910a1c45aec6443631" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ignorable Characters&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;無視できるキャラクター&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a4bb204d8a0f8ee2fb48ae8ecfec3136a05dc5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Implementation note:&lt;/strong&gt; The value objects in a &lt;code&gt;WeakHashMap&lt;/code&gt; are held by ordinary strong references. Thus care should be taken to ensure that value objects do not strongly refer to their own keys, either directly or indirectly, since that will prevent the keys from being discarded. Note that a value object may refer indirectly to its key via the &lt;code&gt;WeakHashMap&lt;/code&gt; itself; that is, a value object may strongly refer to some other key object whose associated value object, in turn, strongly refers to the key of the first value object. If the values in the map do not rely on the map holding strong references to them, one way to deal with this is to wrap values themselves within &lt;code&gt;WeakReferences&lt;/code&gt; before inserting, as in: &lt;code&gt;m.put(key, new WeakReference(value))&lt;/code&gt;, and then unwrapping upon each &lt;code&gt;get&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;実装上の注意：&lt;/strong&gt; &lt;code&gt;WeakHashMap&lt;/code&gt; の値オブジェクトは、通常の強力な参照によって保持されます。したがって、値オブジェクトが直接または間接的に自分のキーを強く参照しないように注意する必要があります。キーが破棄されるのを防ぐためです。値オブジェクトは、 &lt;code&gt;WeakHashMap&lt;/code&gt; 自体を介してキーを間接的に参照する場合があることに注意してください。つまり、値オブジェクトは、関連する値オブジェクトが最初の値オブジェクトのキーを強く参照する他のキーオブジェクトを強く参照する場合があります。マップ内の値がそれらへの強い参照を保持するマップに依存していない場合、これに対処する1つの方法は、次のように、挿入する前に &lt;code&gt;WeakReferences&lt;/code&gt; 内で値自体をラップすることです。 &lt;code&gt;m.put(key, new WeakReference(value))&lt;/code&gt; 、そして各 &lt;code&gt;get&lt;/code&gt; でアンラップします。</target>
        </trans-unit>
        <trans-unit id="1c86e474baa1548275930d4ab1f19ecce40877db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Modifier&lt;/strong&gt;: There are currently two modifiers that turn on special collation rules.</source>
          <target state="translated">&lt;strong&gt;修飾子&lt;/strong&gt;：特別な照合規則を有効にする2つの修飾子が現在あります。</target>
        </trans-unit>
        <trans-unit id="88ebf02797fd2d38306da19a6cdac10e0cc5315e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE: This class is obsolete. New implementations should implement the Map interface, rather than extending this class.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;注：このクラスは廃止されました。新しい実装は、このクラスを拡張するのではなく、Mapインターフェースを実装する必要があります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf3ebf7088bfd724d13a67d7399ecab41f15e4be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Normalization and Accents&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;正規化とアクセント&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="870a4c025e13ae5d349e13d9df0d3a5680f6de3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note - &lt;/strong&gt; The &lt;code&gt;MLet&lt;/code&gt; class loader uses the &lt;a href=&quot;../mbeanserverfactory#getClassLoaderRepository-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;MBeanServerFactory.getClassLoaderRepository(javax.management.MBeanServer)&lt;/code&gt;&lt;/a&gt; to load classes that could not be found in the loaded jar files.</source>
          <target state="translated">&lt;strong&gt;注- &lt;/strong&gt; &lt;code&gt;MLet&lt;/code&gt; をのクラスローダーが使用する&lt;a href=&quot;../mbeanserverfactory#getClassLoaderRepository-javax.management.MBeanServer-&quot;&gt; &lt;code&gt;MBeanServerFactory.getClassLoaderRepository(javax.management.MBeanServer)&lt;/code&gt; &lt;/a&gt;ロードされたjarファイルに見つかりませんでしたロード・クラスに。</target>
        </trans-unit>
        <trans-unit id="ec33228e64a1a0a43230ac9c2ad4ae12634406cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this class is not synchronized.&lt;/strong&gt; If multiple threads access a &lt;code&gt;ProcessBuilder&lt;/code&gt; instance concurrently, and at least one of the threads modifies one of the attributes structurally, it</source>
          <target state="translated">&lt;strong&gt;このクラスは同期されないことに注意してください。&lt;/strong&gt;複数のスレッドが &lt;code&gt;ProcessBuilder&lt;/code&gt; インスタンスに同時にアクセスし、少なくとも1つのスレッドが属性の1つを構造的に変更する場合、</target>
        </trans-unit>
        <trans-unit id="d6cab14ddcda436d289affbe6ded809e782fa4ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;複数のスレッドが同時にハッシュマップにアクセスし、少なくとも1つのスレッドがマップを構造的に変更する場合、</target>
        </trans-unit>
        <trans-unit id="667cb7148fdbab4503609c8fe2a9b72041399bc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a hash set concurrently, and at least one of the threads modifies the set, it</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;複数のスレッドが同時にハッシュセットにアクセスし、少なくとも1つのスレッドがそのセットを変更する場合、</target>
        </trans-unit>
        <trans-unit id="b1139e58073a41d3cd1c3d47073f0db4fa222857" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it &lt;em&gt;must&lt;/em&gt; be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be &quot;wrapped&quot; using the &lt;a href=&quot;collections#synchronizedMap-java.util.Map-&quot;&gt;&lt;code&gt;Collections.synchronizedMap&lt;/code&gt;&lt;/a&gt; method. This is best done at creation time, to prevent accidental unsynchronized access to the map:</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;複数のスレッドがリンクされたハッシュマップに同時にアクセスし、少なくとも1つのスレッドがマップを構造的に変更する場合、外部で同期する&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。これは通常、マップを自然にカプセル化するオブジェクトで同期することによって行われます。そのようなオブジェクトが存在しない場合、&lt;a href=&quot;collections#synchronizedMap-java.util.Map-&quot;&gt; &lt;code&gt;Collections.synchronizedMap&lt;/code&gt; &lt;/a&gt;メソッドを使用してマップを「ラップ」する必要があります。これは、マップへの偶発的な非同期アクセスを防ぐために、作成時に行うのが最適です。</target>
        </trans-unit>
        <trans-unit id="f2df19b960c7732b50d732bd6e4066733746fc6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a linked hash set concurrently, and at least one of the threads modifies the set, it &lt;em&gt;must&lt;/em&gt; be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be &quot;wrapped&quot; using the &lt;a href=&quot;collections#synchronizedSet-java.util.Set-&quot;&gt;&lt;code&gt;Collections.synchronizedSet&lt;/code&gt;&lt;/a&gt; method. This is best done at creation time, to prevent accidental unsynchronized access to the set:</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;複数のスレッドがリンクされたハッシュセットに同時にアクセスし、少なくとも1つのスレッドがセットを変更する場合は、外部で同期する&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。これは通常、セットを自然にカプセル化するいくつかのオブジェクトで同期することによって行われます。そのようなオブジェクトが存在しない場合は、&lt;a href=&quot;collections#synchronizedSet-java.util.Set-&quot;&gt; &lt;code&gt;Collections.synchronizedSet&lt;/code&gt; &lt;/a&gt;メソッドを使用してセットを「ラップ」する必要があります。セットへの偶発的な非同期アクセスを防ぐために、これは作成時に行うのが最善です。</target>
        </trans-unit>
        <trans-unit id="5cc1faba2edccc11ed61691b2cfa88eebd009f5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a linked list concurrently, and at least one of the threads modifies the list structurally, it</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;複数のスレッドがリンクされたリストに同時にアクセスし、少なくとも1つのスレッドがリストを構造的に変更する場合、</target>
        </trans-unit>
        <trans-unit id="96dd55977c3b5c41fbaee587a2d422df7205e3fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a map concurrently, and at least one of the threads modifies the map structurally, it &lt;em&gt;must&lt;/em&gt; be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with an existing key is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be &quot;wrapped&quot; using the &lt;a href=&quot;collections#synchronizedSortedMap-java.util.SortedMap-&quot;&gt;&lt;code&gt;Collections.synchronizedSortedMap&lt;/code&gt;&lt;/a&gt; method. This is best done at creation time, to prevent accidental unsynchronized access to the map:</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;複数のスレッドが同時にマップにアクセスし、少なくとも1つのスレッドがマップを構造的に変更する場合、外部で同期する&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。 （構造変更とは、1つ以上のマッピングを追加または削除する操作です。既存のキーに関連付けられた値を変更するだけでは、構造変更ではありません。）これは通常、マップを自然にカプセル化するオブジェクトで同期することによって実現されます。そのようなオブジェクトが存在しない場合、&lt;a href=&quot;collections#synchronizedSortedMap-java.util.SortedMap-&quot;&gt; &lt;code&gt;Collections.synchronizedSortedMap&lt;/code&gt; &lt;/a&gt;メソッドを使用してマップを「ラップ」する必要があります。これは、マップへの偶発的な非同期アクセスを防ぐために、作成時に行うのが最適です。</target>
        </trans-unit>
        <trans-unit id="f1736f1fd01fd41e7df5d0fe5e84cbf5d6b567ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;複数のスレッドが同時にツリーセットにアクセスし、少なくとも1つのスレッドがセットを変更する場合、</target>
        </trans-unit>
        <trans-unit id="dad6785e319c55526e4a76517d0aad16c6719c55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access an &lt;code&gt;ArrayList&lt;/code&gt; instance concurrently, and at least one of the threads modifies the list structurally, it</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;複数のスレッドが同時に &lt;code&gt;ArrayList&lt;/code&gt; インスタンスにアクセスし、少なくとも1つのスレッドがリストを構造的に変更する場合、</target>
        </trans-unit>
        <trans-unit id="1bf3c1c8e915f99f33e420277c3a269fc9e44c25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access an identity hash map concurrently, and at least one of the threads modifies the map structurally, it</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;複数のスレッドがIDハッシュマップに同時にアクセスし、少なくとも1つのスレッドがマップを構造的に変更する場合、</target>
        </trans-unit>
        <trans-unit id="98c9a6a63130277c803725dfd2788675770aca5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; Multiple threads should not access a &lt;code&gt;PriorityQueue&lt;/code&gt; instance concurrently if any of the threads modifies the queue. Instead, use the thread-safe &lt;a href=&quot;concurrent/priorityblockingqueue&quot;&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;strong&gt;この実装は同期されていないことに注意してください。&lt;/strong&gt;いずれかのスレッドがキューを変更する場合、複数のスレッドが &lt;code&gt;PriorityQueue&lt;/code&gt; インスタンスに同時にアクセスすることはできません。代わりに、スレッドセーフな&lt;a href=&quot;concurrent/priorityblockingqueue&quot;&gt; &lt;code&gt;PriorityBlockingQueue&lt;/code&gt; &lt;/a&gt;クラスを使用してください。</target>
        </trans-unit>
        <trans-unit id="8d10fb3b31459bcb8895e6220937c45a9bc7d6b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As we see above, the string produced by a &lt;code&gt;ChoiceFormat&lt;/code&gt; in &lt;code&gt;MessageFormat&lt;/code&gt; is treated as special; occurrences of '{' are used to indicate subformats, and cause recursion. If you create both a &lt;code&gt;MessageFormat&lt;/code&gt; and &lt;code&gt;ChoiceFormat&lt;/code&gt; programmatically (instead of using the string patterns), then be careful not to produce a format that recurses on itself, which will cause an infinite loop.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;我々は上記を参照として、によって生成された文字列 &lt;code&gt;ChoiceFormat&lt;/code&gt; を内 &lt;code&gt;MessageFormat&lt;/code&gt; 特別なものとして扱われます。'{'の出現は、サブフォーマットを示し、再帰を引き起こすために使用されます。（文字列パターンを使用する代わりに） &lt;code&gt;MessageFormat&lt;/code&gt; と &lt;code&gt;ChoiceFormat&lt;/code&gt; の両方をプログラムで作成する場合は、それ自体で再帰する形式を生成しないように注意してください。これにより、無限ループが発生します。</target>
        </trans-unit>
        <trans-unit id="4b7a393d1b053ca942afef16584dda9d1fb802f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; PropertyResourceBundle can be constructed either from an InputStream or a Reader, which represents a property file. Constructing a PropertyResourceBundle instance from an InputStream requires that the input stream be encoded in ISO-8859-1. In that case, characters that cannot be represented in ISO-8859-1 encoding must be represented by Unicode Escapes as defined in section 3.3 of</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; PropertyResourceBundleは、InputStreamまたはプロパティファイルを表すリーダーから構築できます。InputStreamからPropertyResourceBundleインスタンスを構築するには、入力ストリームがISO-8859-1でエンコードされている必要があります。その場合、ISO-8859-1エンコーディングで表現できない文字は、セクション3.3で定義されているUnicodeエスケープで表す必要があります。</target>
        </trans-unit>
        <trans-unit id="16e574d0f71243b998c371619c9fd9d0ae75ef81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There are certain possible ambiguities in interpretation of certain singular times, which are resolved in the following ways:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;特定の特異な時間の解釈には、次の方法で解決される可能性のあるあいまいさがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="7d3634f0a3414c4cb13c355b0c10eda25d6c74f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method should not be used in the implementation of image formats that use standard UTF-8, because the modified UTF-8 used here is incompatible with standard UTF-8.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;標準UTF-8を使用する画像フォーマットの実装では、このメソッドを使用しないで&lt;strong&gt;ください。&lt;/strong&gt;ここで使用される変更済みUTF-8は、標準UTF-8と互換性がないためです。</target>
        </trans-unit>
        <trans-unit id="16b6c8f33d9696a75745397000696eea46f6bba9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, specify the byte array form instead of the String form. See the note in &lt;a href=&quot;x509certselector#addPathToName-int-java.lang.String-&quot;&gt;&lt;code&gt;addPathToName(int, String)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;識別名については、文字列形式ではなくバイト配列形式を指定して&lt;strong&gt;ください&lt;/strong&gt;。詳細については、&lt;a href=&quot;x509certselector#addPathToName-int-java.lang.String-&quot;&gt; &lt;code&gt;addPathToName(int, String)&lt;/code&gt; &lt;/a&gt;の注を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d6fb575bcdce29e7a5392ade31041e7987af7e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, specify the byte array form instead of the String form. See the note in &lt;a href=&quot;x509certselector#addSubjectAlternativeName-int-java.lang.String-&quot;&gt;&lt;code&gt;addSubjectAlternativeName(int, String)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;識別名については、文字列形式ではなくバイト配列形式を指定して&lt;strong&gt;ください&lt;/strong&gt;。詳細については、&lt;a href=&quot;x509certselector#addSubjectAlternativeName-int-java.lang.String-&quot;&gt; &lt;code&gt;addSubjectAlternativeName(int, String)&lt;/code&gt; &lt;/a&gt;の注を参照してください。</target>
        </trans-unit>
        <trans-unit id="23afa8791834917ccddb5255aa9b5b964536f3f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, use &lt;a href=&quot;x509certselector#addPathToName-int-byte:A-&quot;&gt;addPathToName(int, byte[])&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;識別名の場合は&lt;a href=&quot;x509certselector#addPathToName-int-byte:A-&quot;&gt;、&lt;/a&gt;代わりにaddPathToName（int、byte []）を使用してください。一部の識別名のRFC 2253文字列形式のエンコーディング情報が失われるため、一部の証明書との照合に失敗する可能性があるため、この方法に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="db3657b679774d0a5a8903692f2c89a5932f86a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, use &lt;a href=&quot;x509certselector#addSubjectAlternativeName-int-byte:A-&quot;&gt;addSubjectAlternativeName(int, byte[])&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;識別名の場合は&lt;a href=&quot;x509certselector#addSubjectAlternativeName-int-byte:A-&quot;&gt;、&lt;/a&gt;代わりにaddSubjectAlternativeName（int、byte []）を使用してください。一部の識別名のRFC 2253文字列形式のエンコーディング情報が失われるため、一部の証明書との照合に失敗する可能性があるため、この方法に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="4674f9fe857ac066f0bf22d34b223b40ea904e6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; use &lt;a href=&quot;x509crlselector#setIssuers-java.util.Collection-&quot;&gt;setIssuers(Collection)&lt;/a&gt; instead or only specify the byte array form of distinguished names when using this method. See &lt;a href=&quot;x509crlselector#addIssuerName-java.lang.String-&quot;&gt;&lt;code&gt;addIssuerName(String)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;使用&lt;a href=&quot;x509crlselector#setIssuers-java.util.Collection-&quot;&gt;setIssuers（コレクション）&lt;/a&gt;このメソッドを使用するときに代わりにのみバイト配列形式の識別名を指定します。詳細については、&lt;a href=&quot;x509crlselector#addIssuerName-java.lang.String-&quot;&gt; &lt;code&gt;addIssuerName(String)&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="13c580469b184e3d362ad5398af8c82f8a4c9261" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;ChoiceFormat&lt;/code&gt; differs from the other &lt;code&gt;Format&lt;/code&gt; classes in that you create a &lt;code&gt;ChoiceFormat&lt;/code&gt; object with a constructor (not with a &lt;code&gt;getInstance&lt;/code&gt; style factory method). The factory methods aren't necessary because &lt;code&gt;ChoiceFormat&lt;/code&gt; doesn't require any complex setup for a given locale. In fact, &lt;code&gt;ChoiceFormat&lt;/code&gt; doesn't implement any locale specific behavior.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;ChoiceFormat&lt;/code&gt; は、（ &lt;code&gt;getInstance&lt;/code&gt; スタイルのファクトリーメソッドではなく）コンストラクターを使用して &lt;code&gt;ChoiceFormat&lt;/code&gt; オブジェクトを作成するという点で、他の &lt;code&gt;Format&lt;/code&gt; クラスとは異なります。 &lt;code&gt;ChoiceFormat&lt;/code&gt; は特定のロケールに対して複雑な設定を必要としないため、ファクトリメソッドは必要ありません。実際、 &lt;code&gt;ChoiceFormat&lt;/code&gt; はロケール固有の動作を実装していません。</target>
        </trans-unit>
        <trans-unit id="d2a308cb120296e578c3ef51d826ba801ab6b63e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;CollationKey&lt;/code&gt;s from different &lt;code&gt;Collator&lt;/code&gt;s can not be compared. See the class description for &lt;a href=&quot;collationkey&quot;&gt;&lt;code&gt;CollationKey&lt;/code&gt;&lt;/a&gt; for an example using &lt;code&gt;CollationKey&lt;/code&gt;s.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;異なる &lt;code&gt;Collator&lt;/code&gt; の &lt;code&gt;CollationKey&lt;/code&gt; 比較できません。 &lt;code&gt;CollationKey&lt;/code&gt; の使用例については、&lt;a href=&quot;collationkey&quot;&gt; &lt;code&gt;CollationKey&lt;/code&gt; &lt;/a&gt;のクラスの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="ef2f7f2dccb6f08d9a470dc2ade5b7cbfa930fcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;MessageFormat&lt;/code&gt; differs from the other &lt;code&gt;Format&lt;/code&gt; classes in that you create a &lt;code&gt;MessageFormat&lt;/code&gt; object with one of its constructors (not with a &lt;code&gt;getInstance&lt;/code&gt; style factory method). The factory methods aren't necessary because &lt;code&gt;MessageFormat&lt;/code&gt; itself doesn't implement locale specific behavior. Any locale specific behavior is defined by the pattern that you provide as well as the subformats used for inserted arguments.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;MessageFormat&lt;/code&gt; は、コンストラクターの1つ（ &lt;code&gt;getInstance&lt;/code&gt; スタイルのファクトリメソッドではない）で &lt;code&gt;MessageFormat&lt;/code&gt; オブジェクトを作成するという点で、他の &lt;code&gt;Format&lt;/code&gt; クラスとは異なります。 &lt;code&gt;MessageFormat&lt;/code&gt; 自体はロケール固有の動作を実装しないため、ファクトリメソッドは必要ありません。ロケール固有の動作は、指定したパターンと、挿入された引数に使用されるサブフォーマットによって定義されます。</target>
        </trans-unit>
        <trans-unit id="fc106fafbfa47fa5aade2da8b9d7a4f5ed0863dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: several methods return submaps with restricted key ranges. Such ranges are &lt;em&gt;half-open&lt;/em&gt;, that is, they include their low endpoint but not their high endpoint (where applicable). If you need a &lt;em&gt;closed range&lt;/em&gt; (which includes both endpoints), and the key type allows for calculation of the successor of a given key, merely request the subrange from &lt;code&gt;lowEndpoint&lt;/code&gt; to &lt;code&gt;successor(highEndpoint)&lt;/code&gt;. For example, suppose that &lt;code&gt;m&lt;/code&gt; is a map whose keys are strings. The following idiom obtains a view containing all of the key-value mappings in &lt;code&gt;m&lt;/code&gt; whose keys are between &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt;, inclusive:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：いくつかのメソッドは、キー範囲が制限されたサブマップを返します。そのような範囲は&lt;em&gt;半分開いています&lt;/em&gt;。つまり、それらには下限が含まれますが、上限は含まれません（該当する場合）。&lt;em&gt;閉じた範囲&lt;/em&gt;（両方のエンドポイントを含む）が必要で、キータイプが特定のキーの後続を計算できる場合は、単に &lt;code&gt;lowEndpoint&lt;/code&gt; から &lt;code&gt;successor(highEndpoint)&lt;/code&gt; までのサブ範囲を要求します。たとえば、 &lt;code&gt;m&lt;/code&gt; がキーが文字列であるマップであるとします。次のイディオムは、キーが &lt;code&gt;low&lt;/code&gt; と &lt;code&gt;high&lt;/code&gt; の間にある &lt;code&gt;m&lt;/code&gt; のすべてのキーと値のマッピングを含むビューを取得します。</target>
        </trans-unit>
        <trans-unit id="a6a71817e55a35ab1983902bd2c10c8ca368f201" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Relation&lt;/strong&gt;: The relations are the following:</source>
          <target state="translated">&lt;strong&gt;関係&lt;/strong&gt;：関係は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f3495fc795efc33287681c552eb1c5f73004a324" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reset&lt;/strong&gt;: There is a single reset which is used primarily for contractions and expansions, but which can also be used to add a modification at the end of a set of rules.</source>
          <target state="translated">&lt;strong&gt;リセット&lt;/strong&gt;：主に収縮と展開に使用される単一のリセットがありますが、一連のルールの最後に変更を追加するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="55d6a7c94e68da3f247a7a595eba405da783071d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Roll rule&lt;/strong&gt;. Larger fields are unchanged after the call. A larger field represents a larger unit of time. &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; is a larger field than &lt;code&gt;HOUR&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ロールルール&lt;/strong&gt;。より大きいフィールドは、呼び出し後も変更されません。フィールドが大きいほど、時間の単位が大きくなります。 &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; は &lt;code&gt;HOUR&lt;/code&gt; よりも大きいフィールドです。</target>
        </trans-unit>
        <trans-unit id="fa3d006b4f3ae73a29744a64719d1c8b5ece5ac8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Text-Argument&lt;/strong&gt;: A text-argument is any sequence of characters, excluding special characters (that is, common whitespace characters [0009-000D, 0020] and rule syntax characters [0021-002F, 003A-0040, 005B-0060, 007B-007E]). If those characters are desired, you can put them in single quotes (e.g. ampersand =&amp;gt; '&amp;amp;'). Note that unquoted white space characters are ignored; e.g. &lt;code&gt;b c&lt;/code&gt; is treated as &lt;code&gt;bc&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;テキスト引数&lt;/strong&gt;：テキスト引数は、特殊文字（つまり、一般的な空白文字[0009-000D、0020]およびルール構文文字[0021-002F、003A-0040、005B-0060、007B- 007E]）。これらの文字が必要な場合は、一重引用符で囲むことができます（例：アンパサンド=&amp;gt; '＆'）。引用符で囲まれていない空白文字は無視されることに注意してください。例えば &lt;code&gt;b c&lt;/code&gt; として扱われる &lt;code&gt;bc&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7adbe8ba0e535437a73edd7bc545040789286be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This class is for &lt;code&gt;Preferences&lt;/code&gt; implementers only. Normal users of the &lt;code&gt;Preferences&lt;/code&gt; facility should have no need to consult this documentation. The &lt;a href=&quot;preferences&quot;&gt;&lt;code&gt;Preferences&lt;/code&gt;&lt;/a&gt; documentation should suffice.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;このクラスは、 &lt;code&gt;Preferences&lt;/code&gt; インプリメンター専用です。 &lt;code&gt;Preferences&lt;/code&gt; 機能の通常のユーザーは、このドキュメントを参照する必要はありません。&lt;a href=&quot;preferences&quot;&gt; &lt;code&gt;Preferences&lt;/code&gt; &lt;/a&gt;マニュアルには十分です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2ffdbf28e8059c8a9fddfc931e88a6f48623e8d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This class is for &lt;code&gt;Preferences&lt;/code&gt; implementers only. Normal users of the &lt;code&gt;Preferences&lt;/code&gt; facility should have no need to consult this documentation.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;このクラスは、 &lt;code&gt;Preferences&lt;/code&gt; インプリメンター専用です。 &lt;code&gt;Preferences&lt;/code&gt; 機能の通常のユーザーは、このドキュメントを参照する必要はありません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a6523a0d1258595c00128ecc59dbaa49e55e8e6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage model&lt;/strong&gt;. To motivate the behavior of &lt;code&gt;add()&lt;/code&gt; and &lt;code&gt;roll()&lt;/code&gt;, consider a user interface component with increment and decrement buttons for the month, day, and year, and an underlying &lt;code&gt;GregorianCalendar&lt;/code&gt;. If the interface reads January 31, 1999 and the user presses the month increment button, what should it read? If the underlying implementation uses &lt;code&gt;set()&lt;/code&gt;, it might read March 3, 1999. A better result would be February 28, 1999. Furthermore, if the user presses the month increment button again, it should read March 31, 1999, not March 28, 1999. By saving the original date and using either &lt;code&gt;add()&lt;/code&gt; or &lt;code&gt;roll()&lt;/code&gt;, depending on whether larger fields should be affected, the user interface can behave as most users will intuitively expect.</source>
          <target state="translated">&lt;strong&gt;使用モデル&lt;/strong&gt;。 &lt;code&gt;add()&lt;/code&gt; と &lt;code&gt;roll()&lt;/code&gt; の動作を動機付けるために、月、日、年の増分ボタンと減分ボタン、および基礎となる &lt;code&gt;GregorianCalendar&lt;/code&gt; を備えたユーザーインターフェースコンポーネントを検討してください。インターフェースが1999年1月31日を読み取り、ユーザーが月の増分ボタンを押した場合、何を読み取る必要がありますか？基礎となる実装が &lt;code&gt;set()&lt;/code&gt; を使用する場合、1999年3月3日と表示されます。より適切な結果は1999年2月28日です。さらに、ユーザーが月増分ボタンをもう一度押すと、3月28日ではなく1999年3月31日と表示されます。 、1999。元の日付を保存し、 &lt;code&gt;add()&lt;/code&gt; または &lt;code&gt;roll()&lt;/code&gt; を使用するより大きなフィールドに影響を与えるかどうかに応じて、ユーザーインターフェイスはほとんどのユーザーが直感的に期待するとおりに動作します。</target>
        </trans-unit>
        <trans-unit id="1a4dbfd60ddd2ae5bc2e394d9bec2c60f4dd0044" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;i&gt;opt&lt;/i&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;i&gt;opt&lt;/i&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="de0f4e877e0dcacc6b548ebdb0de7f7af031fa32" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt; Depends on the definition of &lt;a href=&quot;formattable&quot;&gt;&lt;code&gt;Formattable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;sup&gt;1 &lt;/sup&gt;&lt;a href=&quot;formattable&quot;&gt; &lt;code&gt;Formattable&lt;/code&gt; &lt;/a&gt;の定義に依存します。</target>
        </trans-unit>
        <trans-unit id="c18d6e71a34fe8209f6204f366f7cb332c7dd04c" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; +</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt; +</target>
        </trans-unit>
        <trans-unit id="2597a4bec834c34a56ab45519733a00d41053d50" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; For &lt;code&gt;'d'&lt;/code&gt; conversion only.</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt;については &lt;code&gt;'d'&lt;/code&gt; のみの変換。</target>
        </trans-unit>
        <trans-unit id="d0bcc49d2213a764ee7fceaf4a9b1c99b65c6ab7" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt;) without intermediate overflow or underflow</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt;）中間オーバーフローまたはアンダーフローなし</target>
        </trans-unit>
        <trans-unit id="b8a0e46b9a691b7062789b86d5efd4910967fd59" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt;) without intermediate overflow or underflow.</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt;）中間オーバーフローまたはアンダーフローなし。</target>
        </trans-unit>
        <trans-unit id="5205c0c6122f510a63e496b2c218115e94e6564d" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3&lt;/sup&gt; For &lt;code&gt;'o'&lt;/code&gt;, &lt;code&gt;'x'&lt;/code&gt;, and &lt;code&gt;'X'&lt;/code&gt; conversions only.</source>
          <target state="translated">&lt;sup&gt;3&lt;/sup&gt;については &lt;code&gt;'o'&lt;/code&gt; 、 &lt;code&gt;'x'&lt;/code&gt; 、および &lt;code&gt;'X'&lt;/code&gt; のみコンバージョン。</target>
        </trans-unit>
        <trans-unit id="1074f936fb9e998e1b4069f5b737ea4c77d097d4" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;4&lt;/sup&gt; For &lt;code&gt;'d'&lt;/code&gt;, &lt;code&gt;'o'&lt;/code&gt;, &lt;code&gt;'x'&lt;/code&gt;, and &lt;code&gt;'X'&lt;/code&gt; conversions applied to &lt;a href=&quot;../math/biginteger&quot;&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;'d'&lt;/code&gt; applied to &lt;code&gt;byte&lt;/code&gt;, &lt;a href=&quot;../lang/byte&quot;&gt;&lt;code&gt;Byte&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;a href=&quot;../lang/short&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;int&lt;/code&gt; and &lt;a href=&quot;../lang/integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;long&lt;/code&gt;, and &lt;a href=&quot;../lang/long&quot;&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;sup&gt;4&lt;/sup&gt;については &lt;code&gt;'d'&lt;/code&gt; 、 &lt;code&gt;'o'&lt;/code&gt; 、 &lt;code&gt;'x'&lt;/code&gt; 、および &lt;code&gt;'X'&lt;/code&gt; の変換は、に適用される&lt;a href=&quot;../math/biginteger&quot;&gt; &lt;code&gt;BigInteger&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;'d'&lt;/code&gt; に適用される &lt;code&gt;byte&lt;/code&gt; 、&lt;a href=&quot;../lang/byte&quot;&gt; &lt;code&gt;Byte&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;short&lt;/code&gt; 、&lt;a href=&quot;../lang/short&quot;&gt; &lt;code&gt;Short&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;int&lt;/code&gt; と&lt;a href=&quot;../lang/integer&quot;&gt; &lt;code&gt;Integer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;long&lt;/code&gt; 、及び&lt;a href=&quot;../lang/long&quot;&gt; &lt;code&gt;Long&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1cbf27830e5e9235d5fadca0b7b2fbeff8e8286e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;5&lt;/sup&gt; For &lt;code&gt;'e'&lt;/code&gt;, &lt;code&gt;'E'&lt;/code&gt;, &lt;code&gt;'f'&lt;/code&gt;, &lt;code&gt;'g'&lt;/code&gt;, and &lt;code&gt;'G'&lt;/code&gt; conversions only.</source>
          <target state="translated">&lt;sup&gt;5&lt;/sup&gt;について &lt;code&gt;'e'&lt;/code&gt; 、 &lt;code&gt;'E'&lt;/code&gt; 、 &lt;code&gt;'f'&lt;/code&gt; 、 &lt;code&gt;'g'&lt;/code&gt; 、及び &lt;code&gt;'G'&lt;/code&gt; のみコンバージョン。</target>
        </trans-unit>
        <trans-unit id="c387cad14f96f3797404e05c2ba187515fcd6235" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;a&lt;/code&gt;&lt;/sup&gt;, where</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;a&lt;/code&gt; &lt;/sup&gt;、どこ</target>
        </trans-unit>
        <trans-unit id="b5c29c713c380389f4685bafc832846f1ca12da5" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;x&lt;/code&gt;&lt;/sup&gt; - 1 is within 1/2 ulp of the limit value -1, &lt;code&gt;-1.0&lt;/code&gt; should be returned.</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;x&lt;/code&gt; &lt;/sup&gt; -1は制限値-1の1/2 ulp以内にあり、 &lt;code&gt;-1.0&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="c2135a42fc3333807a86f1f9e4e6958262803c8b" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;x&lt;/code&gt;&lt;/sup&gt; - 1.</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;x&lt;/code&gt; &lt;/sup&gt; -1。</target>
        </trans-unit>
        <trans-unit id="1b216d6dbef77b084f6b35f200086ec73058e228" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;x&lt;/code&gt;&lt;/sup&gt; -1.</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;x&lt;/code&gt; &lt;/sup&gt; -1。</target>
        </trans-unit>
        <trans-unit id="cd592b76807caff2a10355e16a8f793f23dbf715" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;th&lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;capturing group&lt;/a&gt; and &lt;code&gt;\g{&lt;/code&gt;</source>
          <target state="translated">&lt;sup&gt;th &lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;キャプチャグループ&lt;/a&gt;と &lt;code&gt;\g{&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f76c86a36f13f2cba9267e9c8be26387681d1ca" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;th&lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;capturing group&lt;/a&gt; matched</source>
          <target state="translated">&lt;sup&gt;第&lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;キャプチャグループ&lt;/a&gt;に一致</target>
        </trans-unit>
        <trans-unit id="85a414158c654cf05eff4c426095be529210b3d3" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt; -1. Note that for values of</source>
          <target state="translated">&lt;sup&gt;x&lt;/sup&gt; -1。の値について</target>
        </trans-unit>
        <trans-unit id="6a993260c9b3e2f7c8670ea387d904181ca53d47" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt; than &lt;code&gt;exp(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;sup&gt;X&lt;/sup&gt;よりも &lt;code&gt;exp(x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc525efcc305521da75e0e3a51a3972a5a9ddbee" translate="yes" xml:space="preserve">
          <source>&lt;u&gt;Note&lt;/u&gt;: the optional packages implementing the optional part of the &lt;em&gt;JMX Remote API&lt;/em&gt; are not included in the &lt;em&gt;Java SE Platform&lt;/em&gt; but are available from the &lt;em&gt;JMX Remote API &lt;a href=&quot;http://java.sun.com/products/JavaManagement/download.html&quot;&gt; Reference Implementation&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;u&gt;注&lt;/u&gt;：&lt;em&gt;JMXリモートAPIの&lt;/em&gt;オプション部分を実装するオプションパッケージは、&lt;em&gt;Java SEプラットフォームに&lt;/em&gt;は含まれていませんが、&lt;em&gt;JMXリモートAPI &lt;a href=&quot;http://java.sun.com/products/JavaManagement/download.html&quot;&gt;リファレンス実装&lt;/a&gt;&lt;/em&gt;から入手できます。</target>
        </trans-unit>
        <trans-unit id="c0f347eadc263dbe3156f7147779a70c0429a944" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;archivelist&lt;/var&gt; must be enclosed in double quote marks.</source>
          <target state="translated">&lt;var&gt;archivelist&lt;/var&gt; は二重引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="0f7ae43de7edbd0bc080fcada93cb989036d38e9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;argumentType&lt;/var&gt; is the type of the argument that will be passed as parameter to the MBean's constructor.</source>
          <target state="translated">&lt;var&gt;argumentType&lt;/var&gt; は、MBeanのコンストラクターにパラメーターとして渡される引数のタイプです。</target>
        </trans-unit>
        <trans-unit id="1674d9d1a27cffdf0b23f453411f558dba05f8b3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;CompositeData&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;CompositeData&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="fb05f6536453ff87492d9c522273919b1d7a3922" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="50b92fe75a21071455ff482534f31f8857956624" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="4bce2a26c7ed13e307bbf5478eebee587fc812ea" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="19ee9467bed306ae58eb068d05a8e2ebfab5221c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="155ef69e8e05f1c4d40bf9ce9cb7bcf2e4a2a321" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="75c27052d7ad9e7ec808018e194884173ee3b254" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;TabularData&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は、 &lt;code&gt;TabularData&lt;/code&gt; インターフェイスも実装します。</target>
        </trans-unit>
        <trans-unit id="253e502e7c38100be4045e40afe0238dc7f6f07f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; is non null,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; はnullではありません。</target>
        </trans-unit>
        <trans-unit id="be7def36241841366cfcf2d66a6a803286e807d7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;r&lt;/var&gt; is identical to &lt;var&gt;l&lt;/var&gt;; or</source>
          <target state="translated">&lt;var&gt;r&lt;/var&gt; は &lt;var&gt;l&lt;/var&gt; と同じです。または</target>
        </trans-unit>
        <trans-unit id="000f0cc4f75966810f276d4416f6272b5d9ca8a9" translate="yes" xml:space="preserve">
          <source>= &quot;NoMoreOftenThan&quot; and now &amp;gt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= &quot;NoMoreOftenThan&quot; and now &amp;gt; 'lastPersistTime' + 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="dc3f8fabe8a4ebf8b4483e92773970369ef510de" translate="yes" xml:space="preserve">
          <source>= &quot;always&quot;</source>
          <target state="translated">= &quot;always&quot;</target>
        </trans-unit>
        <trans-unit id="1bf9dad3a3a2784844323dab08b5aaa968220d27" translate="yes" xml:space="preserve">
          <source>= &quot;never&quot;</source>
          <target state="translated">= &quot;never&quot;</target>
        </trans-unit>
        <trans-unit id="34903d623efbf67149181aefad27a2a5d9f47407" translate="yes" xml:space="preserve">
          <source>= &quot;onTimer&quot; and now &amp;gt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= &quot;onTimer&quot; and now &amp;gt; 'lastPersistTime' + 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="f2ac7312c97fa5c14d6b268b273d483de875b7de" translate="yes" xml:space="preserve">
          <source>= &quot;onUnregister&quot;</source>
          <target state="translated">= &quot;onUnregister&quot;</target>
        </trans-unit>
        <trans-unit id="6073d22b378d3717b8d914e2c234e32fa17432a7" translate="yes" xml:space="preserve">
          <source>= &quot;onUpdate&quot;</source>
          <target state="translated">= &quot;onUpdate&quot;</target>
        </trans-unit>
        <trans-unit id="64a9966d0ceabdfc0d6a5ba87b81e6f9017846d1" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;end&lt;/code&gt; - &lt;code&gt;start&lt;/code&gt; chars from the given string into this buffer, starting at the given &lt;code&gt;start&lt;/code&gt; index and at the current position of this buffer. The position of this buffer is then incremented by</source>
          <target state="translated">= &lt;code&gt;end&lt;/code&gt; - &lt;code&gt;start&lt;/code&gt; chars from the given string into this buffer, starting at the given &lt;code&gt;start&lt;/code&gt; index and at the current position of this buffer. The position of this buffer is then incremented by</target>
        </trans-unit>
        <trans-unit id="28c7232e0a2e120dd8424f182ecc7a935bae8d44" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; -</source>
          <target state="translated">= &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="c9d552344caa9efd6762036644cc5c62516c425e" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the byte at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the byte at index</target>
        </trans-unit>
        <trans-unit id="aed792725570a2f872c76857d21042195bb30c14" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the char at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the char at index</target>
        </trans-unit>
        <trans-unit id="21fee3245de177f4253dbc6a67add6bbeae887e7" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the double at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the double at index</target>
        </trans-unit>
        <trans-unit id="ee5ebd2842327761e0a36d657d90805da9596bc5" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the float at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the float at index</target>
        </trans-unit>
        <trans-unit id="a8989acf643e840a55b06efc797f4ea5008a4996" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the int at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the int at index</target>
        </trans-unit>
        <trans-unit id="9a6aea9c2c83f43f46b312204abd9943d119eb36" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the long at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the long at index</target>
        </trans-unit>
        <trans-unit id="b2ac89c119732feac494ff47bbdede7fd7dcacd0" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the short at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the short at index</target>
        </trans-unit>
        <trans-unit id="be8c718160d931158eae8b4cb03c3be155a388a2" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; bytes from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; bytes from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</target>
        </trans-unit>
        <trans-unit id="69153de829419c04279a7105bbabbf1880a25384" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; chars from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; chars from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</target>
        </trans-unit>
        <trans-unit id="47440d269c37d48340c7d1f028c7bb7576627972" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; doubles from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; doubles from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</target>
        </trans-unit>
        <trans-unit id="524006f6324997801d2639eb94b4d225fcefe335" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; floats from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; floats from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</target>
        </trans-unit>
        <trans-unit id="c1f1ac87c508781c2c937813352f423c40b5e590" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; ints from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; ints from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</target>
        </trans-unit>
        <trans-unit id="1692b1504c9da0451bcfce3c110d60affb2641da" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; longs from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; longs from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</target>
        </trans-unit>
        <trans-unit id="cd0a9f2c8f1162d98a7f1d49d63febb05cb8a2a3" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; shorts from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; shorts from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</target>
        </trans-unit>
        <trans-unit id="a28ac76ff95178f962891214ed2bbdcac540aca1" translate="yes" xml:space="preserve">
          <source>= = &quot;NoMoreOftenThan&quot; and now &amp;lt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= = &quot;NoMoreOftenThan&quot; and now &amp;lt; 'lastPersistTime' + 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="254ea32e3f14a1b61854947afe774fcefe8a0c78" translate="yes" xml:space="preserve">
          <source>= = &quot;onTimer&quot; &amp;amp;&amp;amp; now &amp;lt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= = &quot;onTimer&quot; &amp;amp;&amp;amp; now &amp;lt; 'lastPersistTime' + 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="a347759e33ed1f6c135c01aa7eadad17f6a3c812" translate="yes" xml:space="preserve">
          <source>? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type &lt;code&gt;double&lt;/code&gt;. That is, suppose that</source>
          <target state="translated">? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type &lt;code&gt;double&lt;/code&gt;. That is, suppose that</target>
        </trans-unit>
        <trans-unit id="a8cba9ed9d4d1b9f27317f69c50ee4ed11419a1d" translate="yes" xml:space="preserve">
          <source>? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type &lt;code&gt;float&lt;/code&gt;. That is, suppose that</source>
          <target state="translated">? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type &lt;code&gt;float&lt;/code&gt;. That is, suppose that</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="5513e4eb0c8216dc7136f185aa48f14223d55392" translate="yes" xml:space="preserve">
          <source>A &quot;&lt;em&gt;spurious wakeup&lt;/em&gt;&quot; occurs.</source>
          <target state="translated">「&lt;em&gt;偽のウェイクアップ&lt;/em&gt;」が発生します。</target>
        </trans-unit>
        <trans-unit id="0f3349c60554425c5718ffb5eb59dfc83572efa4" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets delivered whenever a bean changes a &quot;bound&quot; or &quot;constrained&quot; property.</source>
          <target state="translated">PropertyChange &quot;イベントは、ビーンが &quot;bound &quot;または &quot;constrained &quot;プロパティを変更するたびに配信されます。</target>
        </trans-unit>
        <trans-unit id="641c6959c3dfc13b48a4945e633e5452ededb36f" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets delivered whenever a bean changes a &quot;bound&quot; or &quot;constrained&quot; property. A PropertyChangeEvent object is sent as an argument to the PropertyChangeListener and VetoableChangeListener methods.</source>
          <target state="translated">PropertyChange &quot;イベントは、ビーンが &quot;bound &quot;または &quot;constrained &quot;プロパティを変更するたびに配信されます。PropertyChangeEventオブジェクトは、PropertyChangeListenerおよびVetoableChangeListenerメソッドへの引数として送られます。</target>
        </trans-unit>
        <trans-unit id="4df819facc660a51f8d27eeac2181a40009a4e9e" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets fired whenever a bean changes a &quot;bound&quot; property.</source>
          <target state="translated">PropertyChange &quot;イベントは、ビーンが &quot;bound &quot;プロパティを変更するたびに発生します。</target>
        </trans-unit>
        <trans-unit id="748edf61f82044c2de9355255e500dd4fa92c8f4" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets fired whenever a bean changes a &quot;bound&quot; property. You can register a PropertyChangeListener with a source bean so as to be notified of any bound property updates.</source>
          <target state="translated">PropertyChange &quot;イベントは、ビーンが &quot;バインドされた &quot;プロパティを変更するたびに発生します。バインドされたプロパティの更新を通知されるように、ソースビーンにPropertyChangeListenerを登録することができます。</target>
        </trans-unit>
        <trans-unit id="74477595da6a327ec1904f24675655777c0cd5a0" translate="yes" xml:space="preserve">
          <source>A &quot;equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#EQ&quot;&gt;&lt;code&gt;EQ&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「等しい」制約。返されたオブジェクトは、&lt;a href=&quot;query#EQ&quot;&gt; &lt;code&gt;EQ&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラスjavax.management.BinaryRelQueryExpのインスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="0de043fb0225053ecca95aaef17dc683110891a0" translate="yes" xml:space="preserve">
          <source>A &quot;greater than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#GE&quot;&gt;&lt;code&gt;GE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数の「以上」制約。返されたオブジェクトは、非公開クラスjavax.management.BinaryRelQueryExpのインスタンスとしてシリアル化され、 &lt;code&gt;relOp&lt;/code&gt; が&lt;a href=&quot;query#GE&quot;&gt; &lt;code&gt;GE&lt;/code&gt; に&lt;/a&gt;等しくなります。</target>
        </trans-unit>
        <trans-unit id="a884531a739aabf42ac28cb17e1de598cfc3b3bc" translate="yes" xml:space="preserve">
          <source>A &quot;greater than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#GT&quot;&gt;&lt;code&gt;GT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「より大きい」制約。返されたオブジェクトは、&lt;a href=&quot;query#GT&quot;&gt; &lt;code&gt;GT&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラスjavax.management.BinaryRelQueryExpのインスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="da25afbc37982ef7e00ed1ad8dc107c0b3a9335b" translate="yes" xml:space="preserve">
          <source>A &quot;less than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#LE&quot;&gt;&lt;code&gt;LE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数の「以下」制約。返されたオブジェクトは、非公開クラスjavax.management.BinaryRelQueryExpのインスタンスとしてシリアル化され、 &lt;code&gt;relOp&lt;/code&gt; が&lt;a href=&quot;query#LE&quot;&gt; &lt;code&gt;LE&lt;/code&gt; に&lt;/a&gt;等しくなります。</target>
        </trans-unit>
        <trans-unit id="be9fee56b89e6dfc556451a6459fb3114cf7cfdb" translate="yes" xml:space="preserve">
          <source>A &quot;less than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#LT&quot;&gt;&lt;code&gt;LT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「小なり」制約。返されたオブジェクトは、&lt;a href=&quot;query#LT&quot;&gt; &lt;code&gt;LT&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラスjavax.management.BinaryRelQueryExpのインスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="c02a3212a46bc55a239d47bafb8d0b6642e57a37" translate="yes" xml:space="preserve">
          <source>A &quot;main&quot; &lt;code&gt;ForkJoinTask&lt;/code&gt; begins execution when it is explicitly submitted to a &lt;a href=&quot;forkjoinpool&quot;&gt;&lt;code&gt;ForkJoinPool&lt;/code&gt;&lt;/a&gt;, or, if not already engaged in a ForkJoin computation, commenced in the &lt;a href=&quot;forkjoinpool#commonPool--&quot;&gt;&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;&lt;/a&gt; via &lt;a href=&quot;forkjointask#fork--&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;forkjointask#invoke--&quot;&gt;&lt;code&gt;invoke()&lt;/code&gt;&lt;/a&gt;, or related methods. Once started, it will usually in turn start other subtasks. As indicated by the name of this class, many programs using &lt;code&gt;ForkJoinTask&lt;/code&gt; employ only methods &lt;a href=&quot;forkjointask#fork--&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;forkjointask#join--&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, or derivatives such as &lt;a href=&quot;forkjointask#invokeAll-java.util.concurrent.ForkJoinTask...-&quot;&gt;&lt;code&gt;invokeAll&lt;/code&gt;&lt;/a&gt;. However, this class also provides a number of other methods that can come into play in advanced usages, as well as extension mechanics that allow support of new forms of fork/join processing.</source>
          <target state="translated">「メイン」の &lt;code&gt;ForkJoinTask&lt;/code&gt; は、明示的に&lt;a href=&quot;forkjoinpool&quot;&gt; &lt;code&gt;ForkJoinPool&lt;/code&gt; &lt;/a&gt;に送信されるか、まだForkJoinの計算に関与していない場合は、&lt;a href=&quot;forkjointask#fork--&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;forkjointask#invoke--&quot;&gt; &lt;code&gt;invoke()&lt;/code&gt; &lt;/a&gt;、または関連するメソッドを介して&lt;a href=&quot;forkjoinpool#commonPool--&quot;&gt; &lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt; &lt;/a&gt;で開始されると、実行を開始します。いったん開始すると、通常は次に他のサブタスクを開始します。このクラスの名前が示すように、 &lt;code&gt;ForkJoinTask&lt;/code&gt; を使用する多くのプログラムは、メソッド&lt;a href=&quot;forkjointask#fork--&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;forkjointask#join--&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;forkjointask#invokeAll-java.util.concurrent.ForkJoinTask...-&quot;&gt; &lt;code&gt;invokeAll&lt;/code&gt; &lt;/a&gt;などの派生物のみを使用します。ただし、このクラスは、新しい形式のフォーク/結合処理のサポートを可能にする拡張メカニズムだけでなく、高度な使用法で機能する他の多くのメソッドも提供します。</target>
        </trans-unit>
        <trans-unit id="dc943e5cfb69961b43a73ba91cd6046c46d3cf2b" translate="yes" xml:space="preserve">
          <source>A &quot;plain&quot; socket implements these methods exactly as described, without attempting to go through a firewall or proxy.</source>
          <target state="translated">プレーン」ソケットは、ファイアウォールやプロキシを経由することなく、説明した通りにこれらのメソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="9428d7434c49a807b44f9ca3264e255b1193cd1f" translate="yes" xml:space="preserve">
          <source>A (Notification, Listener ID) pair.</source>
          <target state="translated">A(通知、リスナーID)のペア。</target>
        </trans-unit>
        <trans-unit id="2f407ba41c22ce011c5499faf836fd2378747934" translate="yes" xml:space="preserve">
          <source>A (transparent) specification of cryptographic parameters.</source>
          <target state="translated">暗号パラメータの(透過的な)指定。</target>
        </trans-unit>
        <trans-unit id="58e3837094f5b54f63ba78d8733c9477066d3bba" translate="yes" xml:space="preserve">
          <source>A (transparent) specification of the key material that constitutes a cryptographic key.</source>
          <target state="translated">暗号鍵を構成する鍵材料の(透過的な)指定。</target>
        </trans-unit>
        <trans-unit id="8a0daedd32e98b9659cc4c7bd3330fef767ba115" translate="yes" xml:space="preserve">
          <source>A 10Mb JAR packed without this limit will typically pack about 10% smaller, but the packer may require a larger Java heap (about ten times the segment limit).</source>
          <target state="translated">この制限なしにパックされた10MbのJARは、通常は約10%小さくパックされますが、パッカーはより大きなJavaヒープ(セグメント制限の約10倍)を必要とする場合があります。</target>
        </trans-unit>
        <trans-unit id="1a37cb5a0b97de4647147b96fe32fdde82bc6e05" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt; representing the &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object is stored in the &lt;a href=&quot;../../../javax/management/notification#setUserData-java.lang.Object-&quot;&gt;&lt;code&gt;user data&lt;/code&gt;&lt;/a&gt; of a &lt;a href=&quot;../../../javax/management/notification&quot;&gt;&lt;code&gt;notification&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;memorynotificationinfo#from-javax.management.openmbean.CompositeData-&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;/a&gt; method is provided to convert from a &lt;code&gt;CompositeData&lt;/code&gt; to a &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object. For example:</source>
          <target state="translated">A &lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; &lt;/a&gt;表す &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; オブジェクトをに格納され&lt;a href=&quot;../../../javax/management/notification#setUserData-java.lang.Object-&quot;&gt; &lt;code&gt;user data&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../../javax/management/notification&quot;&gt; &lt;code&gt;notification&lt;/code&gt; &lt;/a&gt;。方法は、以下から変換するために提供され &lt;code&gt;CompositeData&lt;/code&gt; へ &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; オブジェクト。例えば：&lt;a href=&quot;memorynotificationinfo#from-javax.management.openmbean.CompositeData-&quot;&gt; &lt;code&gt;from&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6503faa32cb286134021110311634dfb9c87d502" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../deque&quot;&gt;&lt;code&gt;Deque&lt;/code&gt;&lt;/a&gt; that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element.</source>
          <target state="translated">A &lt;a href=&quot;../deque&quot;&gt; &lt;code&gt;Deque&lt;/code&gt; &lt;/a&gt;さらに待ち時間が要素の取得時に両端キューのための非空になるために、要素の格納時に両端キューで利用可能になるスペースを待つという操作をブロックしサポートしていること。</target>
        </trans-unit>
        <trans-unit id="dba6f0c1acf2151ba3a42a66c5c34a8aba57158d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; object or &lt;code&gt;null&lt;/code&gt; if no resource with this name is found</source>
          <target state="translated">&lt;a href=&quot;../io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt;オブジェクトまたは &lt;code&gt;null&lt;/code&gt; のこの名前を持つリソースが見つからない場合</target>
        </trans-unit>
        <trans-unit id="3d25934cda3a9bfafd7fae12fbc5f6a17dbcc7d6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; providing thread safety and atomicity guarantees.</source>
          <target state="translated">スレッドの安全性と原子性の保証を提供する&lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="62db7b7f9d0139d2e61cb326d0f7b697d1a9d526" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; object for reading the resource, or &lt;code&gt;null&lt;/code&gt; if the resource could not be found</source>
          <target state="translated">リソースを読み取るための&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt; &lt;/a&gt;オブジェクト、またはリソースが見つからなかった場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92904b2916ccc19475c9d8a05961cc34f9478be0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; object or &lt;code&gt;null&lt;/code&gt; if no resource with this name is found</source>
          <target state="translated">&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; の&lt;/a&gt;オブジェクトまたは &lt;code&gt;null&lt;/code&gt; のこの名前を持つリソースが見つからない場合</target>
        </trans-unit>
        <trans-unit id="4ffceb7e507fb0a892fc75dd1e51b54d2140ad41" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.</source>
          <target state="translated">A &lt;a href=&quot;../queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt;さらに待ち時間が要素を取り出すときに、キューに非空になるために、要素の格納時にキュー内で利用可能になるスペースを待つという操作をサポートしていること。</target>
        </trans-unit>
        <trans-unit id="8bf9c6a1bf6c8ca478c3c983832aafa5229fdfdb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../servicenotfoundexception&quot;&gt;&lt;code&gt;ServiceNotFoundException&lt;/code&gt;&lt;/a&gt; if a setMethod field is defined in the descriptor for the attribute and the managed resource is null; or if no setMethod field is defined and caching is not enabled for the attribute. Note that if there is no getMethod field either, then caching is automatically enabled.</source>
          <target state="translated">&lt;a href=&quot;../servicenotfoundexception&quot;&gt; &lt;code&gt;ServiceNotFoundException&lt;/code&gt; &lt;/a&gt;のsetMethodフィールドは属性および管理対象リソースの記述子で定義されている場合はnullです。または、setMethodフィールドが定義されておらず、属性のキャッシングが有効になっていない場合。getMethodフィールドもない場合は、キャッシュが自動的に有効になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a4e9e19029dbb5add608aa6e16ff760b042947a7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; projection of a ConcurrentHashMap may be created (using &lt;a href=&quot;concurrenthashmap#newKeySet--&quot;&gt;&lt;code&gt;newKeySet()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;concurrenthashmap#newKeySet-int-&quot;&gt;&lt;code&gt;newKeySet(int)&lt;/code&gt;&lt;/a&gt;), or viewed (using &lt;a href=&quot;concurrenthashmap#keySet-V-&quot;&gt;&lt;code&gt;keySet(Object)&lt;/code&gt;&lt;/a&gt; when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value.</source>
          <target state="translated">A &lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;のConcurrentHashMapの投影は（使用して作成することができる&lt;a href=&quot;concurrenthashmap#newKeySet--&quot;&gt; &lt;code&gt;newKeySet()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;concurrenthashmap#newKeySet-int-&quot;&gt; &lt;code&gt;newKeySet(int)&lt;/code&gt; を&lt;/a&gt;使用して（）、または閲覧&lt;a href=&quot;concurrenthashmap#keySet-V-&quot;&gt; &lt;code&gt;keySet(Object)&lt;/code&gt; &lt;/a&gt;キーのみに関心があり、マップされた値は、（おそらく一時的）使用されるか、または、全てのテイクされていない場合同じマッピング値。</target>
        </trans-unit>
        <trans-unit id="be331f7b5a864efc83138b67a21f7e2fe7ef6ac2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that uses an internal &lt;a href=&quot;copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for all of its operations.</source>
          <target state="translated">&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;内部使用&lt;a href=&quot;copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; と&lt;/a&gt;その操作のすべてのために。</target>
        </trans-unit>
        <trans-unit id="efb4a8120d13d79cc9dcf294ea51182dad3073dd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that uses an internal &lt;a href=&quot;copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for all of its operations. Thus, it shares the same basic properties:</source>
          <target state="translated">&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;内部使用&lt;a href=&quot;copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; と&lt;/a&gt;その操作のすべてのために。したがって、同じ基本的なプロパティを共有します。</target>
        </trans-unit>
        <trans-unit id="3b865fb1319606c6e09017437d962d44df137e3f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../zoneoffset&quot;&gt;&lt;code&gt;ZoneOffset&lt;/code&gt;&lt;/a&gt; represents the period of time that local time differs from UTC/Greenwich. This is usually a fixed number of hours and minutes. It is equivalent to the &lt;a href=&quot;../zoneoffset#getTotalSeconds--&quot;&gt;&lt;code&gt;total amount&lt;/code&gt;&lt;/a&gt; of the offset in seconds. For example, during the winter Paris has an offset of &lt;code&gt;+01:00&lt;/code&gt;, which is 3600 seconds.</source>
          <target state="translated">A &lt;a href=&quot;../zoneoffset&quot;&gt; &lt;code&gt;ZoneOffset&lt;/code&gt; は&lt;/a&gt; UTC /グリニッジからの現地時間が異なることに時間を表しています。これは通常、固定された時間と分です。秒単位のオフセットの&lt;a href=&quot;../zoneoffset#getTotalSeconds--&quot;&gt; &lt;code&gt;total amount&lt;/code&gt; &lt;/a&gt;に相当します。たとえば、冬の間、パリのオフセットは &lt;code&gt;+01:00&lt;/code&gt; 、つまり3600秒です。</target>
        </trans-unit>
        <trans-unit id="c61e2d7c471ce08f6bc574a15853bccffea04ea0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;&lt;/a&gt; in which producers may wait for consumers to receive elements.</source>
          <target state="translated">&lt;a href=&quot;blockingqueue&quot;&gt; &lt;code&gt;BlockingQueue&lt;/code&gt; の&lt;/a&gt;消費者が要素を受信するために生産者が待っています。</target>
        </trans-unit>
        <trans-unit id="3cd18643ea2f82fbc2020f2325a3e672cf888dae" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;&lt;/a&gt; in which producers may wait for consumers to receive elements. A &lt;code&gt;TransferQueue&lt;/code&gt; may be useful for example in message passing applications in which producers sometimes (using method &lt;a href=&quot;transferqueue#transfer-E-&quot;&gt;&lt;code&gt;transfer(E)&lt;/code&gt;&lt;/a&gt;) await receipt of elements by consumers invoking &lt;code&gt;take&lt;/code&gt; or &lt;code&gt;poll&lt;/code&gt;, while at other times enqueue elements (via method &lt;code&gt;put&lt;/code&gt;) without waiting for receipt. &lt;a href=&quot;transferqueue#tryTransfer-E-&quot;&gt;Non-blocking&lt;/a&gt; and &lt;a href=&quot;transferqueue#tryTransfer-E-long-java.util.concurrent.TimeUnit-&quot;&gt;time-out&lt;/a&gt; versions of &lt;code&gt;tryTransfer&lt;/code&gt; are also available. A &lt;code&gt;TransferQueue&lt;/code&gt; may also be queried, via &lt;a href=&quot;transferqueue#hasWaitingConsumer--&quot;&gt;&lt;code&gt;hasWaitingConsumer()&lt;/code&gt;&lt;/a&gt;, whether there are any threads waiting for items, which is a converse analogy to a &lt;code&gt;peek&lt;/code&gt; operation.</source>
          <target state="translated">&lt;a href=&quot;blockingqueue&quot;&gt; &lt;code&gt;BlockingQueue&lt;/code&gt; の&lt;/a&gt;消費者が要素を受信するために生産者が待っています。 A &lt;code&gt;TransferQueue&lt;/code&gt; は、メッセージパッシングの応用例に有用であり得るものでプロデューサ時々 （使用方法&lt;a href=&quot;transferqueue#transfer-E-&quot;&gt; &lt;code&gt;transfer(E)&lt;/code&gt; &lt;/a&gt;）を呼び出す消費者素子のawait受領 &lt;code&gt;take&lt;/code&gt; または &lt;code&gt;poll&lt;/code&gt; 他の時間に（方法を介してエレメントをエンキューでながら、 &lt;code&gt;put&lt;/code&gt; 受信を待たず）。&lt;a href=&quot;transferqueue#tryTransfer-E-&quot;&gt;ノンブロッキング&lt;/a&gt;と&lt;a href=&quot;transferqueue#tryTransfer-E-long-java.util.concurrent.TimeUnit-&quot;&gt;タイムアウト&lt;/a&gt;のバージョン &lt;code&gt;tryTransfer&lt;/code&gt; はもご利用いただけます。 A &lt;code&gt;TransferQueue&lt;/code&gt; をも介して、照会されてもよい&lt;a href=&quot;transferqueue#hasWaitingConsumer--&quot;&gt; &lt;code&gt;hasWaitingConsumer()&lt;/code&gt; &lt;/a&gt;、アイテムを待機しているスレッドがあるかどうか。これは、 &lt;code&gt;peek&lt;/code&gt; 操作とは逆です。</target>
        </trans-unit>
        <trans-unit id="ec45ca597ae996747e8a0083bd998a797a9539d5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;blocking queue&lt;/a&gt; in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa.</source>
          <target state="translated">各挿入操作が別のスレッドによる対応する削除操作を待機する必要がある、またはその逆の&lt;a href=&quot;blockingqueue&quot;&gt;ブロッキングキュー&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2048d85d25ed94ca6135978e0122e6078feb309a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;blocking queue&lt;/a&gt; in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa. A synchronous queue does not have any internal capacity, not even a capacity of one. You cannot &lt;code&gt;peek&lt;/code&gt; at a synchronous queue because an element is only present when you try to remove it; you cannot insert an element (using any method) unless another thread is trying to remove it; you cannot iterate as there is nothing to iterate. The &lt;em&gt;head&lt;/em&gt; of the queue is the element that the first queued inserting thread is trying to add to the queue; if there is no such queued thread then no element is available for removal and &lt;code&gt;poll()&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt;. For purposes of other &lt;code&gt;Collection&lt;/code&gt; methods (for example &lt;code&gt;contains&lt;/code&gt;), a &lt;code&gt;SynchronousQueue&lt;/code&gt; acts as an empty collection. This queue does not permit &lt;code&gt;null&lt;/code&gt; elements.</source>
          <target state="translated">各挿入操作が別のスレッドによる対応する削除操作を待機する必要がある、またはその逆の&lt;a href=&quot;blockingqueue&quot;&gt;ブロッキングキュー&lt;/a&gt;。同期キューには、内部容量がなく、1の容量すらありません。要素は削除しようとしたときにのみ存在するため、同期キューを &lt;code&gt;peek&lt;/code&gt; ことはできません。別のスレッドが要素を削除しようとしない限り、（任意のメソッドを使用して）要素を挿入することはできません。反復するものがないため、反復することはできません。キューの&lt;em&gt;先頭&lt;/em&gt;は、最初にキューに入れられた挿入スレッドがキューに追加しようとしている要素です。そのようなキューに入れられたスレッドがない場合、削除に使用できる要素はなく、 &lt;code&gt;poll()&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; を返します。他の &lt;code&gt;Collection&lt;/code&gt; ためメソッド（たとえば、 &lt;code&gt;contains&lt;/code&gt; ）では、 &lt;code&gt;SynchronousQueue&lt;/code&gt; は空のコレクションとして機能します。このキューは &lt;code&gt;null&lt;/code&gt; 要素を許可しません。</target>
        </trans-unit>
        <trans-unit id="37dc8e605e4b17de4ad0b00e29ff2ed2f0879183" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed bytes begin at the input buffer's (possibly incremented) position; the number of malformed bytes may be determined by invoking the result object's &lt;a href=&quot;coderresult#length--&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;charsetdecoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;malformed action&lt;/a&gt; of this decoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;不正入力&lt;/a&gt;結果が不正入力エラーが検出されたことを示します。不正な形式のバイトは、入力バッファーの（インクリメントされている可能性がある）位置から始まります。不正なバイト数は、結果オブジェクトの&lt;a href=&quot;coderresult#length--&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって決定される場合があります。このケースは、このデコーダーの&lt;a href=&quot;charsetdecoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;不正なアクション&lt;/a&gt;が&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; の&lt;/a&gt;場合にのみ適用されます。そうでない場合、要求に応じて、不正な形式の入力は無視または置き換えられます。</target>
        </trans-unit>
        <trans-unit id="f428d88605448e02d0039be4c865a5189a5a84d1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed characters begin at the input buffer's (possibly incremented) position; the number of malformed characters may be determined by invoking the result object's &lt;a href=&quot;coderresult#length--&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;charsetencoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;malformed action&lt;/a&gt; of this encoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;不正入力&lt;/a&gt;結果が不正入力エラーが検出されたことを示します。不正な文字は、入力バッファーの（インクリメントされている可能性がある）位置から始まります。不正な文字の数は、結果オブジェクトの&lt;a href=&quot;coderresult#length--&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって決定される場合があります。このケースは、このエンコーダーの&lt;a href=&quot;charsetencoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;不正なアクション&lt;/a&gt;が&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; の&lt;/a&gt;場合にのみ適用されます。そうでない場合、要求に応じて、不正な形式の入力は無視または置き換えられます。</target>
        </trans-unit>
        <trans-unit id="3f35d1e5ef784758d765b02805cd2bcc0afad6eb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collection&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; has an encounter order if the corresponding &lt;a href=&quot;collection#iterator--&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt; documents an order. If so, the encounter order is the same as the documented order. Otherwise, a collection does not have an encounter order.</source>
          <target state="translated">A &lt;a href=&quot;collection&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;/a&gt;、対応するならば出会いの順序を持っている&lt;a href=&quot;collection#iterator--&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt;文書順。その場合、遭遇順序は文書化された順序と同じです。それ以外の場合、コレクションには遭遇順序がありません。</target>
        </trans-unit>
        <trans-unit id="ab018cbfa657eeeb3853dd6f519e165f35dbdda0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collector&quot;&gt;&lt;code&gt;Collector&lt;/code&gt;&lt;/a&gt; that supports concurrent reduction is marked with the &lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt;&lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt;&lt;/a&gt; characteristic. However, a concurrent collection also has a downside. If multiple threads are depositing results concurrently into a shared container, the order in which results are deposited is non-deterministic. Consequently, a concurrent reduction is only possible if ordering is not important for the stream being processed. The &lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt;&lt;code&gt;Stream.collect(Collector)&lt;/code&gt;&lt;/a&gt; implementation will only perform a concurrent reduction if</source>
          <target state="translated">同時削減をサポートする&lt;a href=&quot;collector&quot;&gt; &lt;code&gt;Collector&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt; &lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt; &lt;/a&gt;特性でマークされます。ただし、同時収集には欠点もあります。複数のスレッドが結果を共有コンテナーに同時にデポジットする場合、結果がデポジットされる順序は非決定的です。その結果、同時削減は、処理されるストリームにとって順序が重要でない場合にのみ可能です。&lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt; &lt;code&gt;Stream.collect(Collector)&lt;/code&gt; &lt;/a&gt;場合の実装にのみ同時削減を実行します</target>
        </trans-unit>
        <trans-unit id="0e7dad79d0852bf10bcfb2d08d6293f448e8a4d2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;completionservice&quot;&gt;&lt;code&gt;CompletionService&lt;/code&gt;&lt;/a&gt; that uses a supplied &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; to execute tasks.</source>
          <target state="translated">A &lt;a href=&quot;completionservice&quot;&gt; &lt;code&gt;CompletionService&lt;/code&gt; &lt;/a&gt;供給使用&lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt;タスクを実行します。</target>
        </trans-unit>
        <trans-unit id="8fc11ba08553877860bb977c11eb04da587620cf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;completionservice&quot;&gt;&lt;code&gt;CompletionService&lt;/code&gt;&lt;/a&gt; that uses a supplied &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using &lt;code&gt;take&lt;/code&gt;. The class is lightweight enough to be suitable for transient use when processing groups of tasks.</source>
          <target state="translated">A &lt;a href=&quot;completionservice&quot;&gt; &lt;code&gt;CompletionService&lt;/code&gt; &lt;/a&gt;供給使用&lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt;タスクを実行します。このクラスは、送信されたタスクが完了時に、 &lt;code&gt;take&lt;/code&gt; を使用してアクセス可能なキューに配置されるように調整します。このクラスは軽量で、タスクのグループを処理する際の一時的な使用に適しています。</target>
        </trans-unit>
        <trans-unit id="5487865321680404f56b9512a31e170dee210b17" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;concurrentmap&quot;&gt;&lt;code&gt;ConcurrentMap&lt;/code&gt;&lt;/a&gt; supporting &lt;a href=&quot;../navigablemap&quot;&gt;&lt;code&gt;NavigableMap&lt;/code&gt;&lt;/a&gt; operations, and recursively so for its navigable sub-maps.</source>
          <target state="translated">&lt;a href=&quot;../navigablemap&quot;&gt; &lt;code&gt;NavigableMap&lt;/code&gt; &lt;/a&gt;操作をサポートする&lt;a href=&quot;concurrentmap&quot;&gt; &lt;code&gt;ConcurrentMap&lt;/code&gt; &lt;/a&gt;、およびそのナビゲート可能なサブマップに対して再帰的にサポートします。</target>
        </trans-unit>
        <trans-unit id="0ff16a3f7fcfc58771d7d7c99226a55b1dced8e2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;countermonitor&quot;&gt;&lt;code&gt;CounterMonitor&lt;/code&gt;&lt;/a&gt; observes attributes of integer type. The attributes are assumed to be non-negative, and monotonically increasing except for a possible &lt;em&gt;roll-over&lt;/em&gt; at a specified &lt;em&gt;modulus&lt;/em&gt;. Each observed attribute has an associated &lt;em&gt;threshold&lt;/em&gt; value. A notification is sent when the attribute exceeds its threshold.</source>
          <target state="translated">A &lt;a href=&quot;countermonitor&quot;&gt; &lt;code&gt;CounterMonitor&lt;/code&gt; のは、&lt;/a&gt;整数型の属性を観察します。属性は負ではなく、指定された&lt;em&gt;係数&lt;/em&gt;での&lt;em&gt;ロールオーバーの&lt;/em&gt;可能性を除いて単調に増加すると想定されています。観察された各属性には、関連付けられた&lt;em&gt;しきい値があり&lt;/em&gt;ます。属性がしきい値を超えると通知が送信されます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cf7c7740d35492b515d5429814617f3d7cc18903" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;cyclicbarrier&quot;&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;&lt;/a&gt; is a resettable multiway synchronization point useful in some styles of parallel programming.</source>
          <target state="translated">A &lt;a href=&quot;cyclicbarrier&quot;&gt; &lt;code&gt;CyclicBarrier&lt;/code&gt; をは、&lt;/a&gt;並列プログラミングのいくつかのスタイルで有用リセット可能な多方向同期点です。</target>
        </trans-unit>
        <trans-unit id="a17b0dc0c53cf7d6fe7e42aadfa8ecff813092a4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;docattributeset&quot;&gt;&lt;code&gt;DocAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;docattribute&quot;&gt;&lt;code&gt;DocAttribute&lt;/code&gt;&lt;/a&gt;s, specifies the characteristics of an individual doc and the print job settings to be applied to an individual doc.</source>
          <target state="translated">A &lt;a href=&quot;docattributeset&quot;&gt; &lt;code&gt;DocAttributeSet&lt;/code&gt; &lt;/a&gt;含む、&lt;a href=&quot;docattribute&quot;&gt; &lt;code&gt;DocAttribute&lt;/code&gt; &lt;/a&gt;個々のドキュメント印刷ジョブ設定のS、指定の特性は、個々のドキュメントに適用されます。</target>
        </trans-unit>
        <trans-unit id="ed79beedb532be58b73413e2f5d0f78429b3d587" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt; with a completion action performed when triggered and there are no remaining pending actions.</source>
          <target state="translated">A &lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt;トリガされたときに完了アクションとは、実行されない残りの保留中のアクションはありません。</target>
        </trans-unit>
        <trans-unit id="fb3ed653dbdcc6e068861ae3377f577af5456fa8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt; with a completion action performed when triggered and there are no remaining pending actions. CountedCompleters are in general more robust in the presence of subtask stalls and blockage than are other forms of ForkJoinTasks, but are less intuitive to program. Uses of CountedCompleter are similar to those of other completion based components (such as &lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt;&lt;code&gt;CompletionHandler&lt;/code&gt;&lt;/a&gt;) except that multiple &lt;em&gt;pending&lt;/em&gt; completions may be necessary to trigger the completion action &lt;a href=&quot;countedcompleter#onCompletion-java.util.concurrent.CountedCompleter-&quot;&gt;&lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt;&lt;/a&gt;, not just one. Unless initialized otherwise, the &lt;a href=&quot;countedcompleter#getPendingCount--&quot;&gt;pending count&lt;/a&gt; starts at zero, but may be (atomically) changed using methods &lt;a href=&quot;countedcompleter#setPendingCount-int-&quot;&gt;&lt;code&gt;setPendingCount(int)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;countedcompleter#addToPendingCount-int-&quot;&gt;&lt;code&gt;addToPendingCount(int)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;countedcompleter#compareAndSetPendingCount-int-int-&quot;&gt;&lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt;&lt;/a&gt;. Upon invocation of &lt;a href=&quot;countedcompleter#tryComplete--&quot;&gt;&lt;code&gt;tryComplete()&lt;/code&gt;&lt;/a&gt;, if the pending action count is nonzero, it is decremented; otherwise, the completion action is performed, and if this completer itself has a completer, the process is continued with its completer. As is the case with related synchronization components such as &lt;a href=&quot;phaser&quot;&gt;&lt;code&gt;Phaser&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt;, these methods affect only internal counts; they do not establish any further internal bookkeeping. In particular, the identities of pending tasks are not maintained. As illustrated below, you can create subclasses that do record some or all pending tasks or their results when needed. As illustrated below, utility methods supporting customization of completion traversals are also provided. However, because CountedCompleters provide only basic synchronization mechanisms, it may be useful to create further abstract subclasses that maintain linkages, fields, and additional support methods appropriate for a set of related usages.</source>
          <target state="translated">A &lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt;トリガされたときに完了アクションとは、実行されない残りの保留中のアクションはありません。 CountedCompletersは、他の形式のForkJoinTasksよりも、一般にサブタスクのストールやブロックの存在下でより堅牢ですが、プログラムの直感的ではありません。 CountedCompleterの使用は、他の完了ベースのコンポーネント（&lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt; &lt;code&gt;CompletionHandler&lt;/code&gt; &lt;/a&gt;など）の使用と似ていますが、完了アクション&lt;a href=&quot;countedcompleter#onCompletion-java.util.concurrent.CountedCompleter-&quot;&gt; &lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt; &lt;/a&gt;をトリガーするために、1つだけではなく、複数の&lt;em&gt;保留中の&lt;/em&gt;完了が必要になる場合があります。別に初期化しない限り、&lt;a href=&quot;countedcompleter#getPendingCount--&quot;&gt;保留中のカウント&lt;/a&gt;はゼロから始まりますが、メソッド&lt;a href=&quot;countedcompleter#setPendingCount-int-&quot;&gt; &lt;code&gt;setPendingCount(int)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;countedcompleter#addToPendingCount-int-&quot;&gt; &lt;code&gt;addToPendingCount(int)&lt;/code&gt; &lt;/a&gt;を使用して（原子的に）変更できます、および&lt;a href=&quot;countedcompleter#compareAndSetPendingCount-int-int-&quot;&gt; &lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;countedcompleter#tryComplete--&quot;&gt; &lt;code&gt;tryComplete()&lt;/code&gt; の&lt;/a&gt;呼び出し時に、保留中のアクションの数がゼロ以外の場合は減分されます。それ以外の場合は、完了アクションが実行され、このコンプリーター自体にコンプリーターがある場合、プロセスはそのコンプリーターで続行されます。&lt;a href=&quot;phaser&quot;&gt; &lt;code&gt;Phaser&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt;などの関連する同期コンポーネントの場合と同様に、これらのメソッドは内部カウントのみに影響します。彼らはそれ以上の内部簿記を確立しません。特に、保留中のタスクのIDは保持されません。以下に示すように、必要に応じて、保留中のタスクの一部またはすべてまたはその結果を記録するサブクラスを作成できます。以下に示すように、完了走査のカスタマイズをサポートするユーティリティメソッドも提供されます。ただし、CountedCompletersは基本的な同期メカニズムのみを提供するため、関連する一連の使用に適切なリンケージ、フィールド、および追加のサポートメソッドを維持する抽象サブクラスをさらに作成すると役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="01aa76019566735bcbbc891207a7f10feb22942c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;ある&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39c86cf98ef90fcf1a663c7ea35c635f02ef8181" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;. Successful execution of the &lt;code&gt;run&lt;/code&gt; method causes completion of the &lt;code&gt;Future&lt;/code&gt; and allows access to its results.</source>
          <target state="translated">&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;ある&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;。 &lt;code&gt;run&lt;/code&gt; メソッドの実行が成功すると、 &lt;code&gt;Future&lt;/code&gt; が完了し、その結果にアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="9497a6b404465677f8a6392e98d814062889e3c5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; that may be explicitly completed (setting its value and status), and may be used as a &lt;a href=&quot;completionstage&quot;&gt;&lt;code&gt;CompletionStage&lt;/code&gt;&lt;/a&gt;, supporting dependent functions and actions that trigger upon its completion.</source>
          <target state="translated">&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;明示的（その値とステータスを設定）が完了してもよい、として使用することができる&lt;a href=&quot;completionstage&quot;&gt; &lt;code&gt;CompletionStage&lt;/code&gt; &lt;/a&gt;依存機能及び行動の完了時にトリガーことを支持します。</target>
        </trans-unit>
        <trans-unit id="a78490901c38c9a824e6ce8c5131db90ed0da208" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;gaugemonitor&quot;&gt;&lt;code&gt;GaugeMonitor&lt;/code&gt;&lt;/a&gt; observes attributes of numerical type. Each observed attribute has an associated &lt;em&gt;high threshold&lt;/em&gt; and &lt;em&gt;low threshold&lt;/em&gt;.</source>
          <target state="translated">A &lt;a href=&quot;gaugemonitor&quot;&gt; &lt;code&gt;GaugeMonitor&lt;/code&gt; は&lt;/a&gt;、数値型の属性を観察します。観察された各属性には、関連する&lt;em&gt;高しきい値&lt;/em&gt;と&lt;em&gt;低しきい値があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7dd19ae8058e5cba032ae717f2314f0d68d1a345" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; that further provides a &lt;em&gt;total ordering&lt;/em&gt; on its keys.</source>
          <target state="translated">A &lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;はさらに、&lt;em&gt;全順序&lt;/em&gt;そのキーのを。</target>
        </trans-unit>
        <trans-unit id="48b5e086c6b73b09a6ed5e87d2fbf4df89a0b3f4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; that further provides a &lt;em&gt;total ordering&lt;/em&gt; on its keys. The map is ordered according to the &lt;a href=&quot;../lang/comparable&quot;&gt;natural ordering&lt;/a&gt; of its keys, or by a &lt;a href=&quot;comparator&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt; typically provided at sorted map creation time. This order is reflected when iterating over the sorted map's collection views (returned by the &lt;code&gt;entrySet&lt;/code&gt;, &lt;code&gt;keySet&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; methods). Several additional operations are provided to take advantage of the ordering. (This interface is the map analogue of &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">A &lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;はさらに、&lt;em&gt;全順序&lt;/em&gt;そのキーのを。マップは、そのキーの&lt;a href=&quot;../lang/comparable&quot;&gt;自然な順序&lt;/a&gt;に従って、またはソートされたマップの作成時に通常提供される&lt;a href=&quot;comparator&quot;&gt; &lt;code&gt;Comparator&lt;/code&gt; &lt;/a&gt;によって順序付けされます。この順序は、ソートされたマップのコレクションビュー（ &lt;code&gt;entrySet&lt;/code&gt; 、 &lt;code&gt;keySet&lt;/code&gt; 、 &lt;code&gt;values&lt;/code&gt; メソッドによって返される）を反復するときに反映されます。順序付けを利用するために、いくつかの追加操作が提供されています。（このインターフェースは&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; の&lt;/a&gt;類似のマップです。）</target>
        </trans-unit>
        <trans-unit id="7e48ac8948c121853633ee49556249fbee04bf07" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;memorynotificationinfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;memorynotificationinfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83775a71362eccbda74e498dbaf5475b80e9af93" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;memorynotificationinfo#MEMORY_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;memorynotificationinfo#MEMORY_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4fb768af361736ab2e96c30d909366181c9d332c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigableset&quot;&gt;&lt;code&gt;NavigableSet&lt;/code&gt;&lt;/a&gt; implementation based on a &lt;a href=&quot;treemap&quot;&gt;&lt;code&gt;TreeMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;navigableset&quot;&gt; &lt;code&gt;NavigableSet&lt;/code&gt; &lt;/a&gt;に基づいて実装&lt;a href=&quot;treemap&quot;&gt; &lt;code&gt;TreeMap&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e1945e9f8b306c48cd802c297f5976ff3571bd3c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigableset&quot;&gt;&lt;code&gt;NavigableSet&lt;/code&gt;&lt;/a&gt; implementation based on a &lt;a href=&quot;treemap&quot;&gt;&lt;code&gt;TreeMap&lt;/code&gt;&lt;/a&gt;. The elements are ordered using their &lt;a href=&quot;../lang/comparable&quot;&gt;natural ordering&lt;/a&gt;, or by a &lt;a href=&quot;comparator&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt; provided at set creation time, depending on which constructor is used.</source>
          <target state="translated">&lt;a href=&quot;navigableset&quot;&gt; &lt;code&gt;NavigableSet&lt;/code&gt; &lt;/a&gt;に基づいて実装&lt;a href=&quot;treemap&quot;&gt; &lt;code&gt;TreeMap&lt;/code&gt; &lt;/a&gt;。要素は、使用されるコンストラクターに応じて、&lt;a href=&quot;../lang/comparable&quot;&gt;自然な順序付け&lt;/a&gt;を使用して、またはセットの作成時に提供される&lt;a href=&quot;comparator&quot;&gt; &lt;code&gt;Comparator&lt;/code&gt; &lt;/a&gt;によって順序付けされます。</target>
        </trans-unit>
        <trans-unit id="b3f8c3e414c6371bee46fb98c1599f739e3b9d4a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#Reduction&quot;&gt;mutable reduction operation&lt;/a&gt; that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed.</source>
          <target state="translated">入力要素を変更可能な結果コンテナーに累積し、オプションで、すべての入力要素が処理された後、累積された結果を最終的な表現に変換する&lt;a href=&quot;package-summary#Reduction&quot;&gt;変更可能な縮小操作&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="30f07146010e48a8044433994ff386aed66eeb3a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#Reduction&quot;&gt;mutable reduction operation&lt;/a&gt; that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed. Reduction operations can be performed either sequentially or in parallel.</source>
          <target state="translated">入力要素を変更可能な結果コンテナーに累積し、オプションで、すべての入力要素が処理された後、累積された結果を最終的な表現に変換する&lt;a href=&quot;package-summary#Reduction&quot;&gt;変更可能な縮小操作&lt;/a&gt;。削減操作は、順次または並行して実行できます。</target>
        </trans-unit>
        <trans-unit id="4d44a71d81959b746ebcfb66ded7e38898863b29" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;pattern#matches-java.lang.String-java.lang.CharSequence-&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method is defined by this class as a convenience for when a regular expression is used just once. This method compiles an expression and matches an input sequence against it in a single invocation. The statement</source>
          <target state="translated">&lt;a href=&quot;pattern#matches-java.lang.String-java.lang.CharSequence-&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;方法は、正規表現を一度だけ使用されたときのために便利なように、このクラスで定義されています。このメソッドは、式をコンパイルし、1回の呼び出しで入力シーケンスをそれに対して照合します。ステートメント</target>
        </trans-unit>
        <trans-unit id="16551e367ea0db18f29a807ba404d55b507c0e22" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;phaser&quot;&gt;&lt;code&gt;Phaser&lt;/code&gt;&lt;/a&gt; provides a more flexible form of barrier that may be used to control phased computation among multiple threads.</source>
          <target state="translated">A &lt;a href=&quot;phaser&quot;&gt; &lt;code&gt;Phaser&lt;/code&gt; &lt;/a&gt;複数のスレッド間で段階的計算を制御するために使用され得る障壁のより柔軟な形態を提供します。</target>
        </trans-unit>
        <trans-unit id="d4cc5e6df2360a9e6e2de69018f3951cf51d03d0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;printjobattributeset&quot;&gt;&lt;code&gt;PrintJobAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;printjobattribute&quot;&gt;&lt;code&gt;PrintJobAttribute&lt;/code&gt;&lt;/a&gt;s, reports the status of a print job.</source>
          <target state="translated">A &lt;a href=&quot;printjobattributeset&quot;&gt; &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; は&lt;/a&gt;、含む&lt;a href=&quot;printjobattribute&quot;&gt; &lt;code&gt;PrintJobAttribute&lt;/code&gt; &lt;/a&gt; Sを、印刷ジョブの状態を報告します。</target>
        </trans-unit>
        <trans-unit id="70278963eb3f5045b38f37da9545fc082fdf04e0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;printrequestattributeset&quot;&gt;&lt;code&gt;PrintRequestAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;printrequestattribute&quot;&gt;&lt;code&gt;PrintRequestAttribute&lt;/code&gt;&lt;/a&gt;s, specifies the settings to be applied to a whole print job and to all the docs in the print job.</source>
          <target state="translated">A &lt;a href=&quot;printrequestattributeset&quot;&gt; &lt;code&gt;PrintRequestAttributeSet&lt;/code&gt; は&lt;/a&gt;、含む&lt;a href=&quot;printrequestattribute&quot;&gt; &lt;code&gt;PrintRequestAttribute&lt;/code&gt; &lt;/a&gt; Sを、印刷ジョブ全体に、印刷ジョブ内のすべてのドキュメントに適用する設定を指定します。</target>
        </trans-unit>
        <trans-unit id="626b850e45fa1d1351fc6f6cec8df6365c571316" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;printserviceattributeset&quot;&gt;&lt;code&gt;PrintServiceAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;printserviceattribute&quot;&gt;&lt;code&gt;PrintServiceAttribute&lt;/code&gt;&lt;/a&gt;s, reports the status of a Print Service instance.</source>
          <target state="translated">A &lt;a href=&quot;printserviceattributeset&quot;&gt; &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; は&lt;/a&gt;、含む&lt;a href=&quot;printserviceattribute&quot;&gt; &lt;code&gt;PrintServiceAttribute&lt;/code&gt; &lt;/a&gt;秒、Print Serviceインスタンスの状態を報告します。</target>
        </trans-unit>
        <trans-unit id="08eb7bbe74d99246a71e8526a63915d75b8d5b5e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;scheduledfuture&quot;&gt;&lt;code&gt;ScheduledFuture&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;scheduledfuture&quot;&gt; &lt;code&gt;ScheduledFuture&lt;/code&gt; &lt;/a&gt;です&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aacd731c3ac5b2fa3a63dfc6e470fbf7dc7b7ce7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;scheduledfuture&quot;&gt;&lt;code&gt;ScheduledFuture&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;. Successful execution of the &lt;code&gt;run&lt;/code&gt; method causes completion of the &lt;code&gt;Future&lt;/code&gt; and allows access to its results.</source>
          <target state="translated">&lt;a href=&quot;scheduledfuture&quot;&gt; &lt;code&gt;ScheduledFuture&lt;/code&gt; &lt;/a&gt;です&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;。 &lt;code&gt;run&lt;/code&gt; メソッドの実行が成功すると、 &lt;code&gt;Future&lt;/code&gt; が完了し、その結果にアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="087599e9f01711a89e5002b6a3fac3496a476ccd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;selector&quot;&gt;&lt;i&gt;selector&lt;/i&gt;&lt;/a&gt; is a multiplexor of &lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;selectable channels&lt;/i&gt;&lt;/a&gt;, which in turn are a special type of channel that can be put into &lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;non-blocking mode&lt;/i&gt;&lt;/a&gt;. To perform multiplexed I/O operations, one or more selectable channels are first created, put into non-blocking mode, and &lt;a href=&quot;selectablechannel#register-java.nio.channels.Selector-int-java.lang.Object-&quot;&gt;&lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt;&lt;/a&gt; with a selector. Registering a channel specifies the set of I/O operations that will be tested for readiness by the selector, and returns a &lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;selection key&lt;/i&gt;&lt;/a&gt; that represents the registration.</source>
          <target state="translated">&lt;a href=&quot;selector&quot;&gt;&lt;i&gt;セレクタ&lt;/i&gt;&lt;/a&gt;のマルチプレクサである&lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;選択チャネル&lt;/i&gt;&lt;/a&gt;順次に入れることができるチャネルの特殊な型で、&lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;非ブロッキングモード&lt;/i&gt;&lt;/a&gt;。多重化I / O操作を実行するには、最初に1つ以上の選択可能なチャネルを作成し、非ブロッキングモードにして、セレクターに&lt;a href=&quot;selectablechannel#register-java.nio.channels.Selector-int-java.lang.Object-&quot;&gt; &lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt; &lt;/a&gt;します。チャネルを登録すると、セレクターの準備状況がテストされる一連のI / O操作が指定され、登録を表す&lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;選択キー&lt;/i&gt;&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="032109425d793487d595a949321d88f0c3ea878c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that further provides a</source>
          <target state="translated">A &lt;a href=&quot;set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;はさらに、</target>
        </trans-unit>
        <trans-unit id="2ec927f94a2df17af6a57f13009aabf70a1618b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedmap&quot;&gt;&lt;code&gt;SortedMap&lt;/code&gt;&lt;/a&gt; extended with navigation methods returning the closest matches for given search targets.</source>
          <target state="translated">&lt;a href=&quot;sortedmap&quot;&gt; &lt;code&gt;SortedMap&lt;/code&gt; &lt;/a&gt;された検索ターゲットに最も近い一致を返すナビゲーションメソッドで拡張されたSortedMap。</target>
        </trans-unit>
        <trans-unit id="e21a9d8f7719aa430394aa8fcac440d9c1486a90" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedmap&quot;&gt;&lt;code&gt;SortedMap&lt;/code&gt;&lt;/a&gt; extended with navigation methods returning the closest matches for given search targets. Methods &lt;code&gt;lowerEntry&lt;/code&gt;, &lt;code&gt;floorEntry&lt;/code&gt;, &lt;code&gt;ceilingEntry&lt;/code&gt;, and &lt;code&gt;higherEntry&lt;/code&gt; return &lt;code&gt;Map.Entry&lt;/code&gt; objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a given key, returning &lt;code&gt;null&lt;/code&gt; if there is no such key. Similarly, methods &lt;code&gt;lowerKey&lt;/code&gt;, &lt;code&gt;floorKey&lt;/code&gt;, &lt;code&gt;ceilingKey&lt;/code&gt;, and &lt;code&gt;higherKey&lt;/code&gt; return only the associated keys. All of these methods are designed for locating, not traversing entries.</source>
          <target state="translated">&lt;a href=&quot;sortedmap&quot;&gt; &lt;code&gt;SortedMap&lt;/code&gt; &lt;/a&gt;された検索ターゲットに最も近い一致を返すナビゲーションメソッドで拡張されたSortedMap。方法 &lt;code&gt;lowerEntry&lt;/code&gt; 、 &lt;code&gt;floorEntry&lt;/code&gt; 、 &lt;code&gt;ceilingEntry&lt;/code&gt; 、及び &lt;code&gt;higherEntry&lt;/code&gt; リターン &lt;code&gt;Map.Entry&lt;/code&gt; オブジェクトは、以下、それぞれ、以下のキーに関連付けられているか又は等しい、以上で、かつ指定されたキーよりも大きく、戻し &lt;code&gt;null&lt;/code&gt; そのようなキーが存在しない場合。同様に、方法 &lt;code&gt;lowerKey&lt;/code&gt; 、 &lt;code&gt;floorKey&lt;/code&gt; 、 &lt;code&gt;ceilingKey&lt;/code&gt; 、及び &lt;code&gt;higherKey&lt;/code&gt; のリターンのみ関連するキー。これらのメソッドはすべて、エントリを検索するためではなく、検索するために設計されています。</target>
        </trans-unit>
        <trans-unit id="ad1503f25864e0bfc71b631cdd88fd205a72ed21" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt; extended with navigation methods reporting closest matches for given search targets.</source>
          <target state="translated">指定された検索ターゲットに最も近い一致を報告するナビゲーションメソッドで拡張された&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="144a593f0c8b14f1b705cfe56ecd7f10e553f7dd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt; extended with navigation methods reporting closest matches for given search targets. Methods &lt;code&gt;lower&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt;, &lt;code&gt;ceiling&lt;/code&gt;, and &lt;code&gt;higher&lt;/code&gt; return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning &lt;code&gt;null&lt;/code&gt; if there is no such element. A &lt;code&gt;NavigableSet&lt;/code&gt; may be accessed and traversed in either ascending or descending order. The &lt;code&gt;descendingSet&lt;/code&gt; method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods &lt;code&gt;pollFirst&lt;/code&gt; and &lt;code&gt;pollLast&lt;/code&gt; that return and remove the lowest and highest element, if one exists, else returning &lt;code&gt;null&lt;/code&gt;. Methods &lt;code&gt;subSet&lt;/code&gt;, &lt;code&gt;headSet&lt;/code&gt;, and &lt;code&gt;tailSet&lt;/code&gt; differ from the like-named &lt;code&gt;SortedSet&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any &lt;code&gt;NavigableSet&lt;/code&gt; must implement the &lt;code&gt;NavigableSet&lt;/code&gt; interface.</source>
          <target state="translated">指定された検索ターゲットに最も近い一致を報告するナビゲーションメソッドで拡張された&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt;。メソッド &lt;code&gt;lower&lt;/code&gt; 、 &lt;code&gt;floor&lt;/code&gt; 、 &lt;code&gt;ceiling&lt;/code&gt; 、および &lt;code&gt;higher&lt;/code&gt; は、指定された要素よりも小さい、小さい、等しい、大きい、等しい、および大きい要素をそれぞれ返し、そのような要素がない場合は &lt;code&gt;null&lt;/code&gt; を返します。A &lt;code&gt;NavigableSet&lt;/code&gt; アクセスし昇順または降順のいずれかに横断することができます。 &lt;code&gt;descendingSet&lt;/code&gt; methodは、すべての関係メソッドと方向メソッドの意味を逆にしたセットのビューを返します。昇順の操作とビューのパフォーマンスは、降順の操作とビューのパフォーマンスよりも速い可能性があります。このインターフェイスは、最低と最高の要素が存在する場合はそれを返し、削除するメソッド &lt;code&gt;pollFirst&lt;/code&gt; と &lt;code&gt;pollLast&lt;/code&gt; を追加で定義し &lt;code&gt;null&lt;/code&gt; 。存在する場合はnullを返します。メソッド &lt;code&gt;subSet&lt;/code&gt; 、 &lt;code&gt;headSet&lt;/code&gt; 、および &lt;code&gt;tailSet&lt;/code&gt; は、下限と上限が包括的であるか排他的であるかを説明する追加の引数を受け入れる点で、同じ名前の &lt;code&gt;SortedSet&lt;/code&gt; メソッドとは異なります。いずれかのサブセット &lt;code&gt;NavigableSet&lt;/code&gt; 実装しなければならない &lt;code&gt;NavigableSet&lt;/code&gt; インターフェース。</target>
        </trans-unit>
        <trans-unit id="597357397545095f7f66f71c486785ddb3a1b7d4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;stringmonitor&quot;&gt;&lt;code&gt;StringMonitor&lt;/code&gt;&lt;/a&gt; observes attributes of type &lt;code&gt;String&lt;/code&gt;. A notification is sent when an observed attribute becomes equal and/or not equal to a given string.</source>
          <target state="translated">A &lt;a href=&quot;stringmonitor&quot;&gt; &lt;code&gt;StringMonitor&lt;/code&gt; 文字&lt;/a&gt;型の属性を観察 &lt;code&gt;String&lt;/code&gt; 。監視対象の属性が指定された文字列と等しくなる、または等しくならない場合に通知が送信されます。</target>
        </trans-unit>
        <trans-unit id="5a012dfeebb79628d1686005f76e53e7142647b5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; that can additionally schedule commands to run after a given delay, or to execute periodically.</source>
          <target state="translated">A &lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt;さらに所定の遅延後に実行するコマンドをスケジュールすることができ、又は定期的に実行します。</target>
        </trans-unit>
        <trans-unit id="e1281a7af3f4c9dee846ab6949518dda5707a61d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; that can additionally schedule commands to run after a given delay, or to execute periodically. This class is preferable to &lt;a href=&quot;../timer&quot;&gt;&lt;code&gt;Timer&lt;/code&gt;&lt;/a&gt; when multiple worker threads are needed, or when the additional flexibility or capabilities of &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; (which this class extends) are required.</source>
          <target state="translated">A &lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt;さらに所定の遅延後に実行するコマンドをスケジュールすることができ、又は定期的に実行します。このクラスは、複数のワーカースレッドが必要な場合、または&lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt;（このクラスが拡張する）の追加の柔軟性または機能が必要な場合に、&lt;a href=&quot;../timer&quot;&gt; &lt;code&gt;Timer&lt;/code&gt; &lt;/a&gt;よりも適しています。</target>
        </trans-unit>
        <trans-unit id="5e38e84dbd5fbf8c4a36da4fa6f64faf252dc448" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;watchable&quot;&gt;&lt;code&gt;Watchable&lt;/code&gt;&lt;/a&gt; object is registered with a watch service by invoking its &lt;a href=&quot;watchable#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt; method, returning a &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; to represent the registration. When an event for an object is detected the key is &lt;em&gt;signalled&lt;/em&gt;, and if not currently signalled, it is queued to the watch service so that it can be retrieved by consumers that invoke the &lt;a href=&quot;watchservice#poll--&quot;&gt;&lt;code&gt;poll&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;watchservice#take--&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; methods to retrieve keys and process events. Once the events have been processed the consumer invokes the key's &lt;a href=&quot;watchkey#reset--&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt; method to reset the key which allows the key to be signalled and re-queued with further events.</source>
          <target state="translated">&lt;a href=&quot;watchable&quot;&gt; &lt;code&gt;Watchable&lt;/code&gt; &lt;/a&gt;オブジェクトは、その呼び出すことによって、時計サービスに登録された&lt;a href=&quot;watchable#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-&quot;&gt; &lt;code&gt;register&lt;/code&gt; &lt;/a&gt;の復帰、方法を&lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; を&lt;/a&gt;登録を表現するために。オブジェクトのイベントが検出されると、キーが&lt;em&gt;通知&lt;/em&gt;されます。現在通知されていない場合は、監視サービスのキューに入れられるため、&lt;a href=&quot;watchservice#poll--&quot;&gt; &lt;code&gt;poll&lt;/code&gt; &lt;/a&gt;を呼び出すか&lt;a href=&quot;watchservice#take--&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;メソッドを取得してキーを取得し、イベントを処理するコンシューマーがそれを取得できます。イベントが処理されると、コンシューマはキーの&lt;a href=&quot;watchkey#reset--&quot;&gt; &lt;code&gt;reset&lt;/code&gt; &lt;/a&gt;メソッドを呼び出してキーをリセットします。これにより、キーに信号を送り、さらにイベントをキューに再登録できます。</target>
        </trans-unit>
        <trans-unit id="bafaa93643e476baab4c314bb4e8fec0898917e2" translate="yes" xml:space="preserve">
          <source>A &lt;a name=&quot;week_year&quot;&gt;&lt;em&gt;week year&lt;/em&gt;&lt;/a&gt; is in sync with a &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; cycle. All weeks between the first and last weeks (inclusive) have the same &lt;em&gt;week year&lt;/em&gt; value. Therefore, the first and last days of a week year may have different calendar year values.</source>
          <target state="translated">1 &lt;a name=&quot;week_year&quot;&gt;&lt;em&gt;週間の年&lt;/em&gt;&lt;/a&gt;は &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; サイクルと同期しています。最初の週と最後の週の間のすべての週（包括的）の&lt;em&gt;週の&lt;/em&gt;値は同じです。したがって、週の最初と最後の日は、暦年の値が異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="3a32bd68e7a89017dff287ded45b918cb9d1e779" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;synchronized view&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;同期ビュー&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="72336d1e66f1a59676f137b1d515bc4f4f29e666" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object has a collection of &lt;code&gt;MidiChannels&lt;/code&gt;, usually one for each of the 16 channels prescribed by the MIDI 1.0 specification. The &lt;code&gt;Synthesizer&lt;/code&gt; generates sound when its &lt;code&gt;MidiChannels&lt;/code&gt; receive &lt;code&gt;noteOn&lt;/code&gt; messages.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトは、収集有する &lt;code&gt;MidiChannels&lt;/code&gt; を通常、MIDI 1.0仕様で規定さ16チャンネルのそれぞれに1つずつ。 &lt;code&gt;Synthesizer&lt;/code&gt; その時に音を発生 &lt;code&gt;MidiChannels&lt;/code&gt; が受信 &lt;code&gt;noteOn&lt;/code&gt; メッセージ。</target>
        </trans-unit>
        <trans-unit id="88a61d5e72877351082e461191f01eacb47de075" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BasicAttribute&lt;/code&gt; instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a &lt;code&gt;BasicAttribute&lt;/code&gt; should lock the object.</source>
          <target state="translated">&lt;code&gt;BasicAttribute&lt;/code&gt; にのインスタンスは、並行マルチスレッドアクセスに対して同期化されません。 &lt;code&gt;BasicAttribute&lt;/code&gt; にアクセスして変更しようとする複数のスレッドは、オブジェクトをロックする必要があります。</target>
        </trans-unit>
        <trans-unit id="e6477efbf7cdc53cfaece4e371f5177317ac7154" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextChild&lt;/code&gt;, or any arbitrary object associated with a &lt;code&gt;BeanContextChild&lt;/code&gt;, may obtain a reference to a currently registered service from its nesting &lt;code&gt;BeanContextServices&lt;/code&gt; via invocation of this method. When invoked, this method gets the service by calling the getService() method on the underlying &lt;code&gt;BeanContextServiceProvider&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;BeanContextChild&lt;/code&gt; 、または関連付けられた任意のオブジェクト &lt;code&gt;BeanContextChild&lt;/code&gt; 、そのネストから現在登録されているサービスへの参照取得してもよい &lt;code&gt;BeanContextServices&lt;/code&gt; このメソッドの呼び出しを介し。このメソッドが呼び出されると、基礎となる &lt;code&gt;BeanContextServiceProvider&lt;/code&gt; で getService（）メソッドを呼び出すことによってサービスを取得します。</target>
        </trans-unit>
        <trans-unit id="a7d937e3de27065b64bf0d388046e7b99fcc1d9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; encapsulates the list of children added to, or removed from, the membership of a particular &lt;code&gt;BeanContext&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; はに追加子のリストをカプセル化し、またはから取り外し、特定の会員 &lt;code&gt;BeanContext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91bf1275319962cf826fde3798c03e8953740be4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; encapsulates the list of children added to, or removed from, the membership of a particular &lt;code&gt;BeanContext&lt;/code&gt;. An instance of this event is fired whenever a successful add(), remove(), retainAll(), removeAll(), or clear() is invoked on a given &lt;code&gt;BeanContext&lt;/code&gt; instance. Objects interested in receiving events of this type must implement the &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; interface, and must register their intent via the &lt;code&gt;BeanContext&lt;/code&gt;'s &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml)
 &lt;/code&gt; method.</source>
          <target state="translated">A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; はに追加子のリストをカプセル化し、またはから取り外し、特定の会員 &lt;code&gt;BeanContext&lt;/code&gt; 。このイベントのインスタンスは、指定された &lt;code&gt;BeanContext&lt;/code&gt; インスタンスでadd（）、remove（）、retainAll（）、removeAll（）、またはclear（）が正常に呼び出されるたびに発生します。このタイプのイベントを受信することに関心のオブジェクトが実装する必要 &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; 仕様のインターフェースを、を介してそれらの意図を登録しなければならない &lt;code&gt;BeanContext&lt;/code&gt; の &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml) &lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="a6e0eebcfe0d3ed57683c9fc7337776a57a3c700" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Bindings&lt;/code&gt; that can be used to replace the state of this &lt;code&gt;ScriptEngine&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Bindings&lt;/code&gt; この状態置き換えるために使用することができ &lt;code&gt;ScriptEngine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d9959b72a03cd70ae64c8744d103a8f8d2d3869" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BitSet&lt;/code&gt; is not safe for multithreaded use without external synchronization.</source>
          <target state="translated">A &lt;code&gt;BitSet&lt;/code&gt; 外部同期せずにマルチスレッドを使用するのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="db3d71546bbd73bb0af0b4a8e54824d1d4daee9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingDeque&lt;/code&gt; implementation may be used directly as a FIFO &lt;code&gt;BlockingQueue&lt;/code&gt;. The methods inherited from the &lt;code&gt;BlockingQueue&lt;/code&gt; interface are precisely equivalent to &lt;code&gt;BlockingDeque&lt;/code&gt; methods as indicated in the following table:</source>
          <target state="translated">&lt;code&gt;BlockingDeque&lt;/code&gt; の実装では、FIFOとして直接使用することができる &lt;code&gt;BlockingQueue&lt;/code&gt; の。 &lt;code&gt;BlockingQueue&lt;/code&gt; インターフェースから継承されたメソッドは、次の表に示すように、 &lt;code&gt;BlockingDeque&lt;/code&gt; メソッドとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="a76835f399a49c314d4b4e5405eae0aaf04257b5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingQueue&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; intrinsically support any kind of &quot;close&quot; or &quot;shutdown&quot; operation to indicate that no more items will be added. The needs and usage of such features tend to be implementation-dependent. For example, a common tactic is for producers to insert special &lt;em&gt;end-of-stream&lt;/em&gt; or &lt;em&gt;poison&lt;/em&gt; objects, that are interpreted accordingly when taken by consumers.</source>
          <target state="translated">A &lt;code&gt;BlockingQueue&lt;/code&gt; のはない&lt;em&gt;ではない&lt;/em&gt;、本質的にそれ以上の項目が追加されないことを示すために、「クローズ」または「シャットダウン」操作のいずれかの種類をサポートしています。このような機能のニーズと使用法は、実装に依存する傾向があります。たとえば、一般的な戦術は、プロデューサーが特別な&lt;em&gt;ストリームの終わり&lt;/em&gt;または&lt;em&gt;有害な&lt;/em&gt;オブジェクトを挿入することです。</target>
        </trans-unit>
        <trans-unit id="eca4d1d80b86d58c41ef4f6ba5994e1a2b48aa61" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingQueue&lt;/code&gt; does not accept &lt;code&gt;null&lt;/code&gt; elements. Implementations throw &lt;code&gt;NullPointerException&lt;/code&gt; on attempts to &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt; or &lt;code&gt;offer&lt;/code&gt; a &lt;code&gt;null&lt;/code&gt;. A &lt;code&gt;null&lt;/code&gt; is used as a sentinel value to indicate failure of &lt;code&gt;poll&lt;/code&gt; operations.</source>
          <target state="translated">A &lt;code&gt;BlockingQueue&lt;/code&gt; のは受け入れない &lt;code&gt;null&lt;/code&gt; 要素を。 &lt;code&gt;null&lt;/code&gt; を &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;put&lt;/code&gt; または &lt;code&gt;offer&lt;/code&gt; しようとすると、実装は &lt;code&gt;NullPointerException&lt;/code&gt; をスローします。 &lt;code&gt;null&lt;/code&gt; 失敗を示すために、センチネル値として使用される &lt;code&gt;poll&lt;/code&gt; 動作を制御します。</target>
        </trans-unit>
        <trans-unit id="b78b406a4e1bd798dd6d5ed40a98f39662fdf4d6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingQueue&lt;/code&gt; may be capacity bounded. At any given time it may have a &lt;code&gt;remainingCapacity&lt;/code&gt; beyond which no additional elements can be &lt;code&gt;put&lt;/code&gt; without blocking. A &lt;code&gt;BlockingQueue&lt;/code&gt; without any intrinsic capacity constraints always reports a remaining capacity of &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;BlockingQueue&lt;/code&gt; 容量が制限されます。任意の時点でそれが持っているかもしれ &lt;code&gt;remainingCapacity&lt;/code&gt; 追加の要素をすることができ、それを超える &lt;code&gt;put&lt;/code&gt; ブロックせずに。A &lt;code&gt;BlockingQueue&lt;/code&gt; の任意の固有の容量制約のない、常に残量報告 &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; のを。</target>
        </trans-unit>
        <trans-unit id="c5ed9b672132ae16990dfbd114f77626e0e70005" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BooleanControl&lt;/code&gt; provides the ability to switch between two possible settings that affect a line's audio.</source>
          <target state="translated">A &lt;code&gt;BooleanControl&lt;/code&gt; は、ラインのオーディオに影響を与える2つの設定を切り替える機能を提供します。</target>
        </trans-unit>
        <trans-unit id="9911f76b173e085a5790f91a525f4397f9513f1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BooleanControl&lt;/code&gt; provides the ability to switch between two possible settings that affect a line's audio. The settings are boolean values (&lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;). A graphical user interface might represent the control by a two-state button, an on/off switch, two mutually exclusive buttons, or a checkbox (among other possibilities). For example, depressing a button might activate a &lt;code&gt;&lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt;&lt;code&gt;MUTE&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; control to silence the line's audio.</source>
          <target state="translated">A &lt;code&gt;BooleanControl&lt;/code&gt; は、ラインのオーディオに影響を与える2つの設定を切り替える機能を提供します。設定はブール値（ &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;false&lt;/code&gt; ）です。グラフィカルユーザーインターフェイスは、2つの状態のボタン、オン/オフスイッチ、相互に排他的な2つのボタン、またはチェックボックス（他の可能性がある）によってコントロールを表す場合があります。たとえば、ボタンを押すと、 &lt;code&gt;&lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt;&lt;code&gt;MUTE&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; コントロールがアクティブになり、ラインの音声が止まります。</target>
        </trans-unit>
        <trans-unit id="9b914d22e1412533f2cef28997e1fb52c2b2dc70" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BufferedInputStream&lt;/code&gt; adds functionality to another input stream-namely, the ability to buffer the input and to support the &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; methods.</source>
          <target state="translated">A &lt;code&gt;BufferedInputStream&lt;/code&gt; 入力をバッファし、サポートするための別の入力ストリームすなわち、能力に機能を追加 &lt;code&gt;mark&lt;/code&gt; と &lt;code&gt;reset&lt;/code&gt; 方法を。</target>
        </trans-unit>
        <trans-unit id="93c4c3c5557c20913ab566f39f1e4c2d80a37495" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BufferedInputStream&lt;/code&gt; adds functionality to another input stream-namely, the ability to buffer the input and to support the &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; methods. When the &lt;code&gt;BufferedInputStream&lt;/code&gt; is created, an internal buffer array is created. As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time. The &lt;code&gt;mark&lt;/code&gt; operation remembers a point in the input stream and the &lt;code&gt;reset&lt;/code&gt; operation causes all the bytes read since the most recent &lt;code&gt;mark&lt;/code&gt; operation to be reread before new bytes are taken from the contained input stream.</source>
          <target state="translated">A &lt;code&gt;BufferedInputStream&lt;/code&gt; 入力をバッファし、サポートするための別の入力ストリームすなわち、能力に機能を追加 &lt;code&gt;mark&lt;/code&gt; と &lt;code&gt;reset&lt;/code&gt; 方法を。とき &lt;code&gt;BufferedInputStream&lt;/code&gt; 作成され、内部バッファ配列が作成されます。ストリームからのバイトが読み取られるかスキップされると、内部バッファーは必要に応じて、含まれている入力ストリームから一度に多くのバイトが補充されます。 &lt;code&gt;mark&lt;/code&gt; 操作は、入力ストリーム内のポイントを記憶し、 &lt;code&gt;reset&lt;/code&gt; 操作はすべての最も最近のため、読み込まれたバイト原因となる &lt;code&gt;mark&lt;/code&gt; の新しいバイトが含まれている入力ストリームから取られる前に再読する操作。</target>
        </trans-unit>
        <trans-unit id="b6c6519b4d74a67eecc36daf82594125562f744c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Builder&lt;/code&gt; object is obtained by invoking one of the &lt;a href=&quot;aclentry#newBuilder--&quot;&gt;&lt;code&gt;newBuilder&lt;/code&gt;&lt;/a&gt; methods defined by the &lt;code&gt;AclEntry&lt;/code&gt; class.</source>
          <target state="translated">A &lt;code&gt;Builder&lt;/code&gt; オブジェクトは、のいずれかを呼び出すことによって得られる&lt;a href=&quot;aclentry#newBuilder--&quot;&gt; &lt;code&gt;newBuilder&lt;/code&gt; さ&lt;/a&gt;によって定義されたメソッド &lt;code&gt;AclEntry&lt;/code&gt; のクラス。</target>
        </trans-unit>
        <trans-unit id="791602e7a16aa82d92f76658de19c18cb1b48d6b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; contains an internal buffer that contains bytes that may be read from the stream.</source>
          <target state="translated">A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; ストリームから読み込まれたバイトを格納する内部バッファを含んでいます。</target>
        </trans-unit>
        <trans-unit id="aad024046734b23cdb23ec9792c4cc03fde87676" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; contains an internal buffer that contains bytes that may be read from the stream. An internal counter keeps track of the next byte to be supplied by the &lt;code&gt;read&lt;/code&gt; method.</source>
          <target state="translated">A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; ストリームから読み込まれたバイトを格納する内部バッファを含んでいます。内部カウンターは、 &lt;code&gt;read&lt;/code&gt; メソッドによって提供される次のバイトを追跡します。</target>
        </trans-unit>
        <trans-unit id="c824b6f84f896f24c9a504599c92a3ba81b4c301" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ByteChannel&lt;/code&gt; connected to an entity that contains a variable-length sequence of bytes</source>
          <target state="translated">A &lt;code&gt;ByteChannel&lt;/code&gt; はバイトの可変長配列を含むエンティティに接続されています</target>
        </trans-unit>
        <trans-unit id="f8f59faa82da92687132e2471fe3d0f1c23da118" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CRLSelector&lt;/code&gt; that selects &lt;code&gt;X509CRLs&lt;/code&gt; that match all specified criteria.</source>
          <target state="translated">指定されたすべての基準に一致する &lt;code&gt;CRLSelector&lt;/code&gt; を選択する &lt;code&gt;X509CRLs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43965c0eb0dde6d867e326218f4d5796a9f54040" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CRLSelector&lt;/code&gt; that selects &lt;code&gt;X509CRLs&lt;/code&gt; that match all specified criteria. This class is particularly useful when selecting CRLs from a &lt;code&gt;CertStore&lt;/code&gt; to check revocation status of a particular certificate.</source>
          <target state="translated">指定されたすべての基準に一致する &lt;code&gt;CRLSelector&lt;/code&gt; を選択する &lt;code&gt;X509CRLs&lt;/code&gt; 。このクラスは、 &lt;code&gt;CertStore&lt;/code&gt; からCRLを選択して特定の証明書の失効ステータスを確認するときに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="2765fdbc2085f164518df4b47d7dea2a126e4d97" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Calendar&lt;/code&gt; object can produce all the calendar field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional). &lt;code&gt;Calendar&lt;/code&gt; defines the range of values returned by certain calendar fields, as well as their meaning. For example, the first month of the calendar system has value &lt;code&gt;MONTH ==
 JANUARY&lt;/code&gt; for all calendars. Other values are defined by the concrete subclass, such as &lt;code&gt;ERA&lt;/code&gt;. See individual field documentation and subclass documentation for details.</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; オブジェクトは、特定の言語およびカレンダスタイル（例えば、日本語グレゴリオ、日本の伝統）の書式日時を実装するために必要なすべてのカレンダフィールド値を生成することができます。 &lt;code&gt;Calendar&lt;/code&gt; は、特定のカレンダーフィールドによって返される値の範囲とその意味を定義します。たとえば、カレンダーシステムの最初の月の値はすべてのカレンダーで &lt;code&gt;MONTH == JANUARY&lt;/code&gt; です。その他の値は、 &lt;code&gt;ERA&lt;/code&gt; などの具象サブクラスによって定義されます。詳細については、個々のフィールドのドキュメントとサブクラスのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd6d85b0756315f1e4f7663f70b69679fb6b450a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallSite&lt;/code&gt; is a holder for a variable &lt;a href=&quot;methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;, which is called its &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;CallSite&lt;/code&gt; 変数のためのホルダーです&lt;a href=&quot;methodhandle&quot;&gt; &lt;code&gt;MethodHandle&lt;/code&gt; &lt;/a&gt;その呼ばれ、 &lt;code&gt;target&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53c675c04cbcf5d7a16adfd5966a7e5bcf6d3a57" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallSite&lt;/code&gt; is a holder for a variable &lt;a href=&quot;methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;, which is called its &lt;code&gt;target&lt;/code&gt;. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;CallSite&lt;/code&gt; delegates all calls to the site's current target. A &lt;code&gt;CallSite&lt;/code&gt; may be associated with several &lt;code&gt;invokedynamic&lt;/code&gt; instructions, or it may be &quot;free floating&quot;, associated with none. In any case, it may be invoked through an associated method handle called its &lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;dynamic invoker&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;CallSite&lt;/code&gt; 変数のためのホルダーです&lt;a href=&quot;methodhandle&quot;&gt; &lt;code&gt;MethodHandle&lt;/code&gt; &lt;/a&gt;その呼ばれ、 &lt;code&gt;target&lt;/code&gt; 。 &lt;code&gt;invokedynamic&lt;/code&gt; の命令は、にリンクされている &lt;code&gt;CallSite&lt;/code&gt; 委譲し、サイトの現在のターゲットへのすべての呼び出しを。A &lt;code&gt;CallSite&lt;/code&gt; いくつか関連付けることができる &lt;code&gt;invokedynamic&lt;/code&gt; の指示、またはnoneに関連付けられている、「浮動自由」であってもよいです。いずれの場合でも、その&lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;動的invoker&lt;/a&gt;と呼ばれる関連するメソッドハンドルを介して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="728e147679cf1365aaeb47445695777da9023df7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathBuilderException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">A &lt;code&gt;CertPathBuilderException&lt;/code&gt; ラッピング例外のサポートを提供します。&lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; の&lt;/a&gt;いずれかの場合、このメソッドは、この例外がスローされる原因となったこと、スロー可能を返します。</target>
        </trans-unit>
        <trans-unit id="4c69635f5cbf1ce4cd70d0b40a545efeb57e3d75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathChecker&lt;/code&gt; implementation is typically created to extend a certification path validation algorithm. For example, an implementation may check for and process a critical private extension of each certificate in a certification path.</source>
          <target state="translated">&lt;code&gt;CertPathChecker&lt;/code&gt; の実装は、通常、証明書パス検証アルゴリズムを拡張するために作成されます。たとえば、実装では、証明書パス内の各証明書の重要なプライベート拡張をチェックして処理する場合があります。</target>
        </trans-unit>
        <trans-unit id="50135e1330488469bfafb1eba28f2aab6b352876" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; may also include the certification path that was being validated when the exception was thrown, the index of the certificate in the certification path that caused the exception to be thrown, and the reason that caused the failure. Use the &lt;a href=&quot;certpathvalidatorexception#getCertPath--&quot;&gt;&lt;code&gt;getCertPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;certpathvalidatorexception#getIndex--&quot;&gt;&lt;code&gt;getIndex&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;certpathvalidatorexception#getReason--&quot;&gt;&lt;code&gt;getReason&lt;/code&gt;&lt;/a&gt; methods to retrieve this information.</source>
          <target state="translated">A &lt;code&gt;CertPathValidatorException&lt;/code&gt; また、例外がスローされた場合、例外を引き起こした証明書パス内の証明書のインデックスがスローされ、検証された証明書パス、および失敗の原因となった理由を含むことができます。使用&lt;a href=&quot;certpathvalidatorexception#getCertPath--&quot;&gt; &lt;code&gt;getCertPath&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;certpathvalidatorexception#getIndex--&quot;&gt; &lt;code&gt;getIndex&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;certpathvalidatorexception#getReason--&quot;&gt; &lt;code&gt;getReason&lt;/code&gt; の&lt;/a&gt;この情報を取得する方法を。</target>
        </trans-unit>
        <trans-unit id="15eba905a426f40a8890ddabc999c9a3b52da9f0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">A &lt;code&gt;CertPathValidatorException&lt;/code&gt; には、ラッピング例外のサポートを提供します。&lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; の&lt;/a&gt;いずれかの場合、このメソッドは、この例外がスローされる原因となったこと、スロー可能を返します。</target>
        </trans-unit>
        <trans-unit id="65f560d009f0e6567db9175712bf85433fe5cc63" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertSelector&lt;/code&gt; that selects &lt;code&gt;X509Certificates&lt;/code&gt; that match all specified criteria.</source>
          <target state="translated">指定されたすべての基準に一致する &lt;code&gt;X509Certificates&lt;/code&gt; を選択する &lt;code&gt;CertSelector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be5c8ef13cabc2de05d5ea064c20acabb9a14fa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertSelector&lt;/code&gt; that selects &lt;code&gt;X509Certificates&lt;/code&gt; that match all specified criteria. This class is particularly useful when selecting certificates from a &lt;code&gt;CertStore&lt;/code&gt; to build a PKIX-compliant certification path.</source>
          <target state="translated">指定されたすべての基準に一致する &lt;code&gt;X509Certificates&lt;/code&gt; を選択する &lt;code&gt;CertSelector&lt;/code&gt; 。このクラスは、証明書を &lt;code&gt;CertStore&lt;/code&gt; から選択してPKIX準拠の証明書パスを構築するときに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="238fe188e71ee7dfe9fce6d0836d7928d5866c0c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertStoreException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">A &lt;code&gt;CertStoreException&lt;/code&gt; ラッピング例外のサポートを提供します。&lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; の&lt;/a&gt;いずれかの場合、このメソッドは、この例外がスローされる原因となったこと、スロー可能を返します。</target>
        </trans-unit>
        <trans-unit id="2132e6d56d7be6af520361f786a04619acc657a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CharSequence&lt;/code&gt; is a readable sequence of &lt;code&gt;char&lt;/code&gt; values.</source>
          <target state="translated">A &lt;code&gt;CharSequence&lt;/code&gt; 読み込み可能なシーケンスである &lt;code&gt;char&lt;/code&gt; 型の値。</target>
        </trans-unit>
        <trans-unit id="bd0a7e6c88d50c76fa8e459d55e92a9be2f616e0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CharSequence&lt;/code&gt; is a readable sequence of &lt;code&gt;char&lt;/code&gt; values. This interface provides uniform, read-only access to many different kinds of &lt;code&gt;char&lt;/code&gt; sequences. A &lt;code&gt;char&lt;/code&gt; value represents a character in the</source>
          <target state="translated">A &lt;code&gt;CharSequence&lt;/code&gt; 読み込み可能なシーケンスである &lt;code&gt;char&lt;/code&gt; 型の値。このインターフェイスは、さまざまな種類の &lt;code&gt;char&lt;/code&gt; シーケンスへの統一された読み取り専用アクセスを提供します。 &lt;code&gt;char&lt;/code&gt; 型の値がで文字を表し</target>
        </trans-unit>
        <trans-unit id="e7df40ea3adad9621e2b177acc8b4c53a91715cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChoiceFormat&lt;/code&gt; allows you to attach a format to a range of numbers.</source>
          <target state="translated">A &lt;code&gt;ChoiceFormat&lt;/code&gt; を使用すると、ある範囲の数値にフォーマットを追加することができます。</target>
        </trans-unit>
        <trans-unit id="9bdbb6f65dc1a455bd231eb6943f7e27c4025766" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChoiceFormat&lt;/code&gt; allows you to attach a format to a range of numbers. It is generally used in a &lt;code&gt;MessageFormat&lt;/code&gt; for handling plurals. The choice is specified with an ascending list of doubles, where each item specifies a half-open interval up to the next item:</source>
          <target state="translated">A &lt;code&gt;ChoiceFormat&lt;/code&gt; を使用すると、ある範囲の数値にフォーマットを追加することができます。通常、 &lt;code&gt;MessageFormat&lt;/code&gt; で複数を処理するために使用されます。選択は、doubleの昇順リストで指定されます。各項目は、次の項目までの半開間隔を指定します。</target>
        </trans-unit>
        <trans-unit id="ec4321c06a7245a80c8ed4f7d37472138143a6a0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChronoLocalDate&lt;/code&gt; is the abstract representation of a date where the &lt;code&gt;Chronology chronology&lt;/code&gt;, or calendar system, is pluggable. The date is defined in terms of fields expressed by &lt;a href=&quot;../temporal/temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt;, where most common implementations are defined in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. The chronology defines how the calendar system operates and the meaning of the standard fields.</source>
          <target state="translated">A &lt;code&gt;ChronoLocalDate&lt;/code&gt; は、日付の抽象的表現である &lt;code&gt;Chronology chronology&lt;/code&gt; 、またはカレンダーシステムは、プラグイン可能です。日付は、&lt;a href=&quot;../temporal/temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; &lt;/a&gt;で表現されるフィールドで定義され&lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; &lt;/a&gt;。最も一般的な実装はChronoFieldで定義されています。暦は、カレンダーシステムの動作方法と標準フィールドの意味を定義します。</target>
        </trans-unit>
        <trans-unit id="f18b024a28c84c2b5dc8056afec37c541ede1c43" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; is the abstract representation of a local date-time where the &lt;code&gt;Chronology chronology&lt;/code&gt;, or calendar system, is pluggable. The date-time is defined in terms of fields expressed by &lt;a href=&quot;../temporal/temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt;, where most common implementations are defined in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. The chronology defines how the calendar system operates and the meaning of the standard fields.</source>
          <target state="translated">A &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; はローカル日時の抽象的表現である &lt;code&gt;Chronology chronology&lt;/code&gt; 、またはカレンダーシステムは、プラグイン可能です。日時は、&lt;a href=&quot;../temporal/temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; &lt;/a&gt;で表現されるフィールドで定義され&lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; &lt;/a&gt;。最も一般的な実装はChronoFieldで定義されています。暦は、カレンダーシステムの動作方法と標準フィールドの意味を定義します。</target>
        </trans-unit>
        <trans-unit id="c76c79312f7e6ddd8a4da9c994ee6a3d57012b1f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; is the abstract representation of an offset date-time where the &lt;code&gt;Chronology chronology&lt;/code&gt;, or calendar system, is pluggable. The date-time is defined in terms of fields expressed by &lt;a href=&quot;../temporal/temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt;, where most common implementations are defined in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. The chronology defines how the calendar system operates and the meaning of the standard fields.</source>
          <target state="translated">A &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; はオフセット日時の抽象的表現である &lt;code&gt;Chronology chronology&lt;/code&gt; 、またはカレンダーシステムは、プラグイン可能です。日時は、&lt;a href=&quot;../temporal/temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; &lt;/a&gt;で表現されるフィールドで定義され&lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; &lt;/a&gt;。最も一般的な実装はChronoFieldで定義されています。暦は、カレンダーシステムの動作方法と標準フィールドの意味を定義します。</target>
        </trans-unit>
        <trans-unit id="2e2380d8987110818f81e55fb1d2a8118642ba89" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Cipher&lt;/code&gt; property in a provider master class may have one of the following formats:</source>
          <target state="translated">&lt;code&gt;Cipher&lt;/code&gt; プロバイダのマスタークラス内のプロパティには、次のいずれかの形式を持っていることがあります。</target>
        </trans-unit>
        <trans-unit id="1d4a61915e8a9354cda5cb40cb0bc94d6d8a034c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; object indicating the legal object type for use by the &lt;code&gt;createInputStreamInstance&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; で使用される正当なオブジェクト型を示すオブジェクト &lt;code&gt;createInputStreamInstance&lt;/code&gt; の方法。</target>
        </trans-unit>
        <trans-unit id="551a73a83752aece608b370ef85b4554f6122dda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; reference to the newly available service</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 新たに利用可能なサービスへの参照</target>
        </trans-unit>
        <trans-unit id="8e648ba4c009aceac40f44ba6c1fde70c046db83" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; reference to the service that is being revoked</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 取り消されているサービスへの参照</target>
        </trans-unit>
        <trans-unit id="8d5022d7a53475c3ab19ea496fbbb9690140fc5d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; reference to the service that is being revoked.</source>
          <target state="translated">A &lt;code&gt;Class&lt;/code&gt; 取り消されているサービスへの参照。</target>
        </trans-unit>
        <trans-unit id="76833f57fb130a6054ef6ee8795bec499dea3722" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Closeable&lt;/code&gt; is a source or destination of data that can be closed.</source>
          <target state="translated">A &lt;code&gt;Closeable&lt;/code&gt; 閉鎖することができるデータのソースまたは宛先です。</target>
        </trans-unit>
        <trans-unit id="ead854f27504c26751e8689f46b3ee4504aa692a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Closeable&lt;/code&gt; is a source or destination of data that can be closed. The close method is invoked to release resources that the object is holding (such as open files).</source>
          <target state="translated">A &lt;code&gt;Closeable&lt;/code&gt; 閉鎖することができるデータのソースまたは宛先です。closeメソッドは、オブジェクトが保持しているリソース（開いているファイルなど）を解放するために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fa25ad62b7032b57adecb70db33d146dd9cf1256" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CollationKey&lt;/code&gt; represents a &lt;code&gt;String&lt;/code&gt; under the rules of a specific &lt;code&gt;Collator&lt;/code&gt; object.</source>
          <target state="translated">A &lt;code&gt;CollationKey&lt;/code&gt; 表す &lt;code&gt;String&lt;/code&gt; 特定のルールの下で &lt;code&gt;Collator&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6392757ac50f95e05875f5d1abe06fd277d9183c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CollationKey&lt;/code&gt; represents a &lt;code&gt;String&lt;/code&gt; under the rules of a specific &lt;code&gt;Collator&lt;/code&gt; object. Comparing two &lt;code&gt;CollationKey&lt;/code&gt;s returns the relative order of the &lt;code&gt;String&lt;/code&gt;s they represent. Using &lt;code&gt;CollationKey&lt;/code&gt;s to compare &lt;code&gt;String&lt;/code&gt;s is generally faster than using &lt;code&gt;Collator.compare&lt;/code&gt;. Thus, when the &lt;code&gt;String&lt;/code&gt;s must be compared multiple times, for example when sorting a list of &lt;code&gt;String&lt;/code&gt;s. It's more efficient to use &lt;code&gt;CollationKey&lt;/code&gt;s.</source>
          <target state="translated">A &lt;code&gt;CollationKey&lt;/code&gt; 表す &lt;code&gt;String&lt;/code&gt; 特定のルールの下で &lt;code&gt;Collator&lt;/code&gt; オブジェクト。2つの &lt;code&gt;CollationKey&lt;/code&gt; 比較すると、それらが表す &lt;code&gt;String&lt;/code&gt; の相対的な順序が返されます。 &lt;code&gt;CollationKey&lt;/code&gt; を使用して &lt;code&gt;String&lt;/code&gt; を比較すると、通常は &lt;code&gt;Collator.compare&lt;/code&gt; を使用するよりも高速です。したがって、たとえば &lt;code&gt;String&lt;/code&gt; のリストをソートする場合など、 &lt;code&gt;String&lt;/code&gt; を複数回比較する必要がある場合。 &lt;code&gt;CollationKey&lt;/code&gt; を使用する方が効率的です。</target>
        </trans-unit>
        <trans-unit id="ae4706b0d2166804b39f4bdf98edf570f3f0ff49" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;CRL&lt;/code&gt;s that match the specified selector (never &lt;code&gt;null&lt;/code&gt;)</source>
          <target state="translated">A &lt;code&gt;Collection&lt;/code&gt; の &lt;code&gt;CRL&lt;/code&gt; Sに一致指定したセレクタ（決して &lt;code&gt;null&lt;/code&gt; に）</target>
        </trans-unit>
        <trans-unit id="98391a28fff09416b3a85282c39d7f24bf17bd18" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s that match the specified selector (never &lt;code&gt;null&lt;/code&gt;)</source>
          <target state="translated">A &lt;code&gt;Collection&lt;/code&gt; の &lt;code&gt;Certificate&lt;/code&gt; のように一致指定セレクター（決して &lt;code&gt;null&lt;/code&gt; に）</target>
        </trans-unit>
        <trans-unit id="fcf9b063a928ea8d1b27f485abf63c132f37ab3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collector&lt;/code&gt; is specified by four functions that work together to accumulate entries into a mutable result container, and optionally perform a final transform on the result. They are:</source>
          <target state="translated">A &lt;code&gt;Collector&lt;/code&gt; 変更可能な結果容器内に蓄積エントリに一緒に4つの機能により、その仕事を指定し、必要に応じて最終的な結果に変換を実行します。彼らです：</target>
        </trans-unit>
        <trans-unit id="b116730b94f507b9013d20aec57e08a1a73e37ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collector&lt;/code&gt; which concatenates CharSequence elements, separated by the specified delimiter, in encounter order</source>
          <target state="translated">指定された区切り文字で区切られたCharSequence要素を遭遇順に連結する &lt;code&gt;Collector&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d2570bd5ce1ea4612f9ae93952dccac9143ac53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompositeName&lt;/code&gt; instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a &lt;code&gt;CompositeName&lt;/code&gt; should lock the object.</source>
          <target state="translated">A &lt;code&gt;CompositeName&lt;/code&gt; インスタンスは、並行マルチスレッドアクセスに対して同期化されません。 &lt;code&gt;CompositeName&lt;/code&gt; にアクセスして変更しようとする複数のスレッドは、オブジェクトをロックする必要があります。</target>
        </trans-unit>
        <trans-unit id="bc18441fe19e7991e5f4bb3ce9a1c8fb901cb25a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompoundControl&lt;/code&gt;, such as a graphic equalizer, provides control over two or more related properties, each of which is itself represented as a &lt;code&gt;Control&lt;/code&gt;.</source>
          <target state="translated">グラフィックイコライザーなどの &lt;code&gt;CompoundControl&lt;/code&gt; は、2つ以上の関連プロパティを制御します。それぞれのプロパティは、それ自体が &lt;code&gt;Control&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="bb19507e95a7882d1164574206b39a444478df23" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompoundName&lt;/code&gt; instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a &lt;code&gt;CompoundName&lt;/code&gt; should lock the object.</source>
          <target state="translated">&lt;code&gt;CompoundName&lt;/code&gt; とのインスタンスは、並行マルチスレッドアクセスに対して同期化されません。 &lt;code&gt;CompoundName&lt;/code&gt; にアクセスして変更しようとする複数のスレッドは、オブジェクトをロックする必要があります。</target>
        </trans-unit>
        <trans-unit id="1a8abfd863968986c4551b5104be0b11a2d835de" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Condition&lt;/code&gt; implementation can provide behavior and semantics that is different from that of the &lt;code&gt;Object&lt;/code&gt; monitor methods, such as guaranteed ordering for notifications, or not requiring a lock to be held when performing notifications. If an implementation provides such specialized semantics then the implementation must document those semantics.</source>
          <target state="translated">A &lt;code&gt;Condition&lt;/code&gt; 実装は、とは異なる振る舞いおよびセマンティクスを提供することができる &lt;code&gt;Object&lt;/code&gt; ような通知のために保証順序としてモニター方法、または通知を行う際に保持されるロックを必要としません。実装がそのような特殊なセマンティクスを提供する場合、実装はそれらのセマンティクスを文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="0c6ca21c0d4497ebf365c900bfa1c35883c30d13" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Condition&lt;/code&gt; instance is intrinsically bound to a lock. To obtain a &lt;code&gt;Condition&lt;/code&gt; instance for a particular &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; instance use its &lt;a href=&quot;lock#newCondition--&quot;&gt;&lt;code&gt;newCondition()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Condition&lt;/code&gt; インスタンスは、本質的にロックにバインドされています。特定の&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt;インスタンスの &lt;code&gt;Condition&lt;/code&gt; インスタンスを取得するには、その&lt;a href=&quot;lock#newCondition--&quot;&gt; &lt;code&gt;newCondition()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="f0410c1af00ff590f6c0f9060f3e7b26d6110699" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConstantCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target is permanent, and can never be changed.</source>
          <target state="translated">A &lt;code&gt;ConstantCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲット永続的であり、変更することはできません。</target>
        </trans-unit>
        <trans-unit id="0fe56ac45686158ddd827916ddeec9333e1196a0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConstantCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target is permanent, and can never be changed. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;ConstantCallSite&lt;/code&gt; is permanently bound to the call site's target.</source>
          <target state="translated">A &lt;code&gt;ConstantCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲット永続的であり、変更することはできません。 &lt;code&gt;invokedynamic&lt;/code&gt; のにリンクされている命令 &lt;code&gt;ConstantCallSite&lt;/code&gt; は恒久的に呼び出しサイトのターゲットにバインドされています。</target>
        </trans-unit>
        <trans-unit id="f0373f2115cc61f1ecd48de231e06c805c7dc5c1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Control[]&lt;/code&gt; array passed as a parameter to any method is owned by the caller. The service provider will not modify the array or keep a reference to it, although it may keep references to the individual &lt;code&gt;Control&lt;/code&gt; objects in the array. A &lt;code&gt;Control[]&lt;/code&gt; array returned by any method is immutable, and may not subsequently be modified by either the caller or the service provider.</source>
          <target state="translated">A &lt;code&gt;Control[]&lt;/code&gt; 任意のメソッドにパラメータとして渡された配列は、呼び出し側によって所有されています。サービスプロバイダーは、配列を変更したり、配列への参照を保持したりしませんが、配列内の個々の &lt;code&gt;Control&lt;/code&gt; オブジェクトへの参照を保持する場合があります。どのメソッドから返された &lt;code&gt;Control[]&lt;/code&gt; 配列も不変であり、呼び出し元またはサービスプロバイダーが後で変更することはできません。</target>
        </trans-unit>
        <trans-unit id="ee3aa4e3df63ebfdf55915ed94497312a8df67b9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Control[]&lt;/code&gt; array passed as a parameter to the &lt;code&gt;getReferralContext()&lt;/code&gt; method is owned by the caller. The service provider will not modify the array or keep a reference to it, although it may keep references to the individual &lt;code&gt;Control&lt;/code&gt; objects in the array.</source>
          <target state="translated">A &lt;code&gt;Control[]&lt;/code&gt; にパラメータとして渡された配列 &lt;code&gt;getReferralContext()&lt;/code&gt; メソッドは、呼び出し側によって所有されています。サービスプロバイダーは、配列を変更したり、配列への参照を保持したりしませんが、配列内の個々の &lt;code&gt;Control&lt;/code&gt; オブジェクトへの参照を保持する場合があります。</target>
        </trans-unit>
        <trans-unit id="23654a775571a88b4f2911239e9e4effa00f8212" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is a versatile synchronization tool and can be used for a number of purposes. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking &lt;a href=&quot;countdownlatch#await--&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; wait at the gate until it is opened by a thread invoking &lt;a href=&quot;countdownlatch#countDown--&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized to &lt;em&gt;N&lt;/em&gt; can be used to make one thread wait until &lt;em&gt;N&lt;/em&gt; threads have completed some action, or some action has been completed N times.</source>
          <target state="translated">A &lt;code&gt;CountDownLatch&lt;/code&gt; 汎用性の高い同期ツールであり、多くの目的のために使用することができます。 A &lt;code&gt;CountDownLatch&lt;/code&gt; 、ラッチ、またはゲートのオン/オフ、単純なように、1つのサーブのカウントで初期化：すべてのスレッドが呼び出す&lt;a href=&quot;countdownlatch#await--&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;それが呼び出すスレッドによって開かれるまでゲートで待機を&lt;a href=&quot;countdownlatch#countDown--&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt;。&lt;em&gt;Nに&lt;/em&gt;初期化された &lt;code&gt;CountDownLatch&lt;/code&gt; を使用すると、&lt;em&gt;N個の&lt;/em&gt;スレッドが何らかのアクションを完了するか、一部のアクションがN回完了するまで、1つのスレッドを待機させることができます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5d7ec18000de9280f0c1b01ceced2d3d4a2aabac" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is initialized with a given &lt;em&gt;count&lt;/em&gt;. The &lt;a href=&quot;countdownlatch#await--&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; methods block until the current count reaches zero due to invocations of the &lt;a href=&quot;countdownlatch#countDown--&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt; method, after which all waiting threads are released and any subsequent invocations of &lt;a href=&quot;countdownlatch#await--&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a &lt;a href=&quot;cyclicbarrier&quot;&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;CountDownLatch&lt;/code&gt; 与えて初期化され&lt;em&gt;、カウント&lt;/em&gt;。&lt;a href=&quot;countdownlatch#await--&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;現在のカウントに達するが、の呼び出しのためにゼロまで、方法はブロック&lt;a href=&quot;countdownlatch#countDown--&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt;すべての待機中のスレッドが解放された後方法、及び任意の後続の呼び出し&lt;a href=&quot;countdownlatch#await--&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;直ちに復帰。これはワンショット現象です。カウントをリセットできません。カウントをリセットするバージョンが必要な場合は、&lt;a href=&quot;cyclicbarrier&quot;&gt; &lt;code&gt;CyclicBarrier&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="f1f5b8769fcbc5e2f74bc723a2975c47a63c9aa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CounterMonitor&lt;/code&gt; can operate in &lt;em&gt;difference mode&lt;/em&gt;. In this mode, the value compared against the threshold is the difference between two successive observations of an attribute.</source>
          <target state="translated">A &lt;code&gt;CounterMonitor&lt;/code&gt; のはで動作することができ&lt;em&gt;差分モード&lt;/em&gt;。このモードでは、しきい値と比較される値は、属性の2つの連続した観測間の差です。</target>
        </trans-unit>
        <trans-unit id="d7269b012ee130f2cfb0f0d27df9e22dbed71430" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CyclicBarrier&lt;/code&gt; supports an optional &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt; command that is run once per barrier point, after the last thread in the party arrives, but before any threads are released. This &lt;em&gt;barrier action&lt;/em&gt; is useful for updating shared-state before any of the parties continue.</source>
          <target state="translated">A &lt;code&gt;CyclicBarrier&lt;/code&gt; をは、オプションのサポート&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;任意のスレッドがリリースされる前に、パーティーの最後のスレッドが到着したが、後に、一度バリアポイントごとに実行されるコマンドを。この&lt;em&gt;バリアアクション&lt;/em&gt;は、いずれかの当事者が続行する前に共有状態を更新するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="983265f22277c984071b6d0839ff11a5aabd6129" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Date&lt;/code&gt; parsed from the string.</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; 文字列から解析。</target>
        </trans-unit>
        <trans-unit id="1b9da6c54213efee90c22320dda6686553788abc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Date&lt;/code&gt; parsed from the string. In case of error, returns null.</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; 文字列から解析。エラーの場合、nullを返します。</target>
        </trans-unit>
        <trans-unit id="88198a2133b30c87ec970f147ea4593fb57ae6ef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Date&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if the input could not be parsed</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; 、または &lt;code&gt;null&lt;/code&gt; 入力が解析できなかった場合</target>
        </trans-unit>
        <trans-unit id="b940e54bad740f2ada94ed3c5d00e1993947acda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DecimalFormat&lt;/code&gt; comprises a &lt;em&gt;pattern&lt;/em&gt; and a set of &lt;em&gt;symbols&lt;/em&gt;. The pattern may be set directly using &lt;code&gt;applyPattern()&lt;/code&gt;, or indirectly using the API methods. The symbols are stored in a &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; object. When using the &lt;code&gt;NumberFormat&lt;/code&gt; factory methods, the pattern and symbols are read from localized &lt;code&gt;ResourceBundle&lt;/code&gt;s.</source>
          <target state="translated">A &lt;code&gt;DecimalFormat&lt;/code&gt; 含む&lt;em&gt;パターン&lt;/em&gt;との組&lt;em&gt;のシンボルを&lt;/em&gt;。パターンは、 &lt;code&gt;applyPattern()&lt;/code&gt; を使用して直接設定することも、APIメソッドを使用して間接的に設定することもできます。シンボルは &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; オブジェクトに格納されます。 &lt;code&gt;NumberFormat&lt;/code&gt; ファクトリメソッドを使用する場合、パターンとシンボルはローカライズされた &lt;code&gt;ResourceBundle&lt;/code&gt; から読み取られます。</target>
        </trans-unit>
        <trans-unit id="f386dd84dac1520ed2bcfb17a3ac2ee80b93ecc1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DecimalFormat&lt;/code&gt; pattern contains a positive and negative subpattern, for example, &lt;code&gt;&quot;#,##0.00;(#,##0.00)&quot;&lt;/code&gt;. Each subpattern has a prefix, numeric part, and suffix. The negative subpattern is optional; if absent, then the positive subpattern prefixed with the localized minus sign (&lt;code&gt;'-'&lt;/code&gt; in most locales) is used as the negative subpattern. That is, &lt;code&gt;&quot;0.00&quot;&lt;/code&gt; alone is equivalent to &lt;code&gt;&quot;0.00;-0.00&quot;&lt;/code&gt;. If there is an explicit negative subpattern, it serves only to specify the negative prefix and suffix; the number of digits, minimal digits, and other characteristics are all the same as the positive pattern. That means that &lt;code&gt;&quot;#,##0.0#;(#)&quot;&lt;/code&gt; produces precisely the same behavior as &lt;code&gt;&quot;#,##0.0#;(#,##0.0#)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DecimalFormat&lt;/code&gt; のパターンは、例えば、正と負のサブパターンが含ま &lt;code&gt;&quot;#,##0.00;(#,##0.00)&quot;&lt;/code&gt; 。各サブパターンには、プレフィックス、数値部分、およびサフィックスがあります。負のサブパターンはオプションです。存在しない場合、ローカライズされたマイナス記号（ほとんどのロケールでは &lt;code&gt;'-'&lt;/code&gt; ）が前に付けられた正のサブパターンが負のサブパターンとして使用されます。つまり、 &lt;code&gt;&quot;0.00&quot;&lt;/code&gt; のみは &lt;code&gt;&quot;0.00;-0.00&quot;&lt;/code&gt; と同等です。明示的なネガティブサブパターンがある場合、ネガティブプレフィックスとサフィックスを指定するためにのみ機能します。桁数、最小桁数、およびその他の特性はすべて、ポジティブパターンと同じです。つまり、 &lt;code&gt;&quot;#,##0.0#;(#)&quot;&lt;/code&gt; とまったく同じ動作を生成します &lt;code&gt;&quot;#,##0.0#;(#,##0.0#)&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6525ce217e5549cf04ce19699f3d34ed2bc57c4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirObjectFactory&lt;/code&gt; extends &lt;code&gt;ObjectFactory&lt;/code&gt; by allowing an &lt;code&gt;Attributes&lt;/code&gt; instance to be supplied to the &lt;code&gt;getObjectInstance()&lt;/code&gt; method. &lt;code&gt;DirObjectFactory&lt;/code&gt; implementations are intended to be used by &lt;code&gt;DirContext&lt;/code&gt; service providers. The service provider, in addition reading an object from the directory, might already have attributes that are useful for the object factory to check to see whether the factory is supposed to process the object. For instance, an LDAP-style service provider might have read the &quot;objectclass&quot; of the object. A CORBA object factory might be interested only in LDAP entries with &quot;objectclass=corbaObject&quot;. By using the attributes supplied by the LDAP service provider, the CORBA object factory can quickly eliminate objects that it need not worry about, and non-CORBA object factories can quickly eliminate CORBA-related LDAP entries.</source>
          <target state="translated">A &lt;code&gt;DirObjectFactory&lt;/code&gt; は延び &lt;code&gt;ObjectFactory&lt;/code&gt; 可能にすることによって、 &lt;code&gt;Attributes&lt;/code&gt; に供給されるインスタンスを &lt;code&gt;getObjectInstance()&lt;/code&gt; メソッド。 &lt;code&gt;DirObjectFactory&lt;/code&gt; 実装は、 &lt;code&gt;DirContext&lt;/code&gt; による使用を目的としています。サービスプロバイダー。サービスプロバイダーは、ディレクトリからオブジェクトを読み取るほかに、オブジェクトファクトリがオブジェクトを処理することになっているかどうかを確認するためにチェックするのに役立つ属性をすでに持っている場合があります。たとえば、LDAPスタイルのサービスプロバイダーは、オブジェクトの「オブジェクトクラス」を読み取った可能性があります。 CORBAオブジェクトファクトリは、「objectclass = corbaObject」を含むLDAPエントリにのみ関心がある可能性があります。 LDAPサービスプロバイダーによって提供される属性を使用することで、CORBAオブジェクトファクトリは、心配する必要のないオブジェクトをすばやく削除でき、CORBA以外のオブジェクトファクトリは、CORBA関連のLDAPエントリをすばやく削除できます。</target>
        </trans-unit>
        <trans-unit id="7a1be329221d19aed1829322a7305689086b3003" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirStateFactory&lt;/code&gt; extends &lt;code&gt;StateFactory&lt;/code&gt; by allowing an &lt;code&gt;Attributes&lt;/code&gt; instance to be supplied to and be returned by the &lt;code&gt;getStateToBind()&lt;/code&gt; method. &lt;code&gt;DirStateFactory&lt;/code&gt; implementations are intended to be used by &lt;code&gt;DirContext&lt;/code&gt; service providers. When a caller binds an object using &lt;code&gt;DirContext.bind()&lt;/code&gt;, he might also specify a set of attributes to be bound with the object. The object and attributes to be bound are passed to the &lt;code&gt;getStateToBind()&lt;/code&gt; method of a factory. If the factory processes the object and attributes, it returns a corresponding pair of object and attributes to be bound. If the factory does not process the object, it must return null.</source>
          <target state="translated">A &lt;code&gt;DirStateFactory&lt;/code&gt; は延び &lt;code&gt;StateFactory&lt;/code&gt; を可能にすることによって、 &lt;code&gt;Attributes&lt;/code&gt; インスタンスに供給されると、によって返される &lt;code&gt;getStateToBind()&lt;/code&gt; メソッド。 &lt;code&gt;DirStateFactory&lt;/code&gt; 実装は、 &lt;code&gt;DirContext&lt;/code&gt; サービスプロバイダーによる使用を目的としています。呼び出し元が &lt;code&gt;DirContext.bind()&lt;/code&gt; を使用してオブジェクトをバインドするときに、オブジェクトにバインドされる属性のセットを指定する場合もあります。バインドされるオブジェクトと属性は、ファクトリの &lt;code&gt;getStateToBind()&lt;/code&gt; メソッドに渡されます。ファクトリがオブジェクトと属性を処理する場合、バインドするオブジェクトと属性の対応するペアを返します。ファクトリがオブジェクトを処理しない場合は、nullを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="a58679715515bab3aef6bbaa606fe4fadd60c73a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirectoryStream&lt;/code&gt; is opened upon creation and is closed by invoking the &lt;code&gt;close&lt;/code&gt; method. Closing a directory stream releases any resources associated with the stream. Failure to close the stream may result in a resource leak. The try-with-resources statement provides a useful construct to ensure that the stream is closed:</source>
          <target state="translated">A &lt;code&gt;DirectoryStream&lt;/code&gt; は、作成時に開かれ、呼び出すことによって閉じられている &lt;code&gt;close&lt;/code&gt; 方法を。ディレクトリストリームを閉じると、そのストリームに関連付けられているすべてのリソースが解放されます。ストリームを閉じないと、リソースリークが発生する可能性があります。try-with-resourcesステートメントは、ストリームが確実に閉じられるようにするための便利な構成を提供します。</target>
        </trans-unit>
        <trans-unit id="65b703cdf43a5ec83f8ad4044878e129de1094fd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirectoryStream&lt;/code&gt; that defines operations on files that are located relative to an open directory.</source>
          <target state="translated">開いているディレクトリからの相対位置にあるファイルに対する操作を定義する &lt;code&gt;DirectoryStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01c2f8bc2c160fdac6becd46d1322732a89e078f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirectoryStream&lt;/code&gt; that defines operations on files that are located relative to an open directory. A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; is intended for use by sophisticated or security sensitive applications requiring to traverse file trees or otherwise operate on directories in a race-free manner. Race conditions can arise when a sequence of file operations cannot be carried out in isolation. Each of the file operations defined by this interface specify a relative path. All access to the file is relative to the open directory irrespective of if the directory is moved or replaced by an attacker while the directory is open. A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; may also be used as a virtual &lt;em&gt;working directory&lt;/em&gt;.</source>
          <target state="translated">開いているディレクトリからの相対位置にあるファイルに対する操作を定義する &lt;code&gt;DirectoryStream&lt;/code&gt; 。 A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; は、ファイルツリーをトラバースか、そうでなければ、レースのない方法でディレクトリを操作するために必要な洗練されたか、セキュリティに敏感なアプリケーションで使用するためのものです。一連のファイル操作を分離して実行できない場合、競合状態が発生する可能性があります。このインターフェースで定義された各ファイル操作は、相対パスを指定します。ファイルへのすべてのアクセスは、ディレクトリが開いている間にディレクトリが移動または攻撃者に置き換えられたかどうかに関係なく、開いているディレクトリに関連しています。 A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; は、仮想として使用することができる&lt;em&gt;の作業ディレクトリ&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="af03376ceecb544d9985acc0755ed98550534ecd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DocPrintJob&lt;/code&gt; obtains its print data by means of interface &lt;a href=&quot;doc&quot;&gt;&lt;code&gt;Doc&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;Doc&lt;/code&gt; object lets the &lt;code&gt;DocPrintJob&lt;/code&gt; determine the doc flavor the client can supply. A &lt;code&gt;Doc&lt;/code&gt; object also lets the &lt;code&gt;DocPrintJob&lt;/code&gt; obtain an instance of the doc flavor's representation class, from which the &lt;code&gt;DocPrintJob&lt;/code&gt; then obtains the actual print data.</source>
          <target state="translated">A &lt;code&gt;DocPrintJob&lt;/code&gt; インタフェースによってその印刷データを取得&lt;a href=&quot;doc&quot;&gt; &lt;code&gt;Doc&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;Doc&lt;/code&gt; オブジェクトができ &lt;code&gt;DocPrintJob&lt;/code&gt; クライアントが提供可能なdocフレーバを判別します。また、 &lt;code&gt;Doc&lt;/code&gt; オブジェクトを使用すると、 &lt;code&gt;DocPrintJob&lt;/code&gt; はdocフレーバーの表現クラスのインスタンスを取得でき、そこから &lt;code&gt;DocPrintJob&lt;/code&gt; が実際の印刷データを取得します。</target>
        </trans-unit>
        <trans-unit id="45f553c3dc219e11e9cac35d1e111bda89463aab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DomainCombiner&lt;/code&gt; is passed as a parameter to the appropriate constructor for &lt;code&gt;AccessControlContext&lt;/code&gt;. The newly constructed context is then passed to the &lt;code&gt;AccessController.doPrivileged(..., context)&lt;/code&gt; method to bind the provided context (and associated &lt;code&gt;DomainCombiner&lt;/code&gt;) with the current execution Thread. Subsequent calls to &lt;code&gt;AccessController.getContext&lt;/code&gt; or &lt;code&gt;AccessController.checkPermission&lt;/code&gt; cause the &lt;code&gt;DomainCombiner.combine&lt;/code&gt; to get invoked.</source>
          <target state="translated">A &lt;code&gt;DomainCombiner&lt;/code&gt; のために適切なコンストラクタにパラメータとして渡され &lt;code&gt;AccessControlContext&lt;/code&gt; 。次に、新しく構築されたコンテキストが &lt;code&gt;AccessController.doPrivileged(..., context)&lt;/code&gt; メソッドに渡され、提供されたコンテキスト（および関連する &lt;code&gt;DomainCombiner&lt;/code&gt; ）が現在の実行スレッドにバインドされます。その後 &lt;code&gt;AccessController.getContext&lt;/code&gt; または &lt;code&gt;AccessController.checkPermission&lt;/code&gt; を呼び出すと、 &lt;code&gt;DomainCombiner.combine&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7af584515b6d622da0599e538175efd0509780e2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DomainCombiner&lt;/code&gt; provides a means to dynamically update the ProtectionDomains associated with the current &lt;code&gt;AccessControlContext&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;DomainCombiner&lt;/code&gt; 動的に現在関連付けられたProtectionDomains更新する手段を提供する &lt;code&gt;AccessControlContext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="969de020230c5d0de2297be66b00415bdc63a99b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DosFileAttributeView&lt;/code&gt; is a &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; that additionally supports access to the set of DOS attribute flags that are used to indicate if the file is read-only, hidden, a system file, or archived.</source>
          <target state="translated">A &lt;code&gt;DosFileAttributeView&lt;/code&gt; がある&lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt;さらに、ファイルが読み取り専用の場合は、システムファイルを隠された、またはアーカイブを示すために使用されているDOSの属性フラグのセットへのアクセスをサポートしています。</target>
        </trans-unit>
        <trans-unit id="30d4f0a0b6cd4dfe2827283578fb4258723b708c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a directed distance between two points on the time-line and can therefore be positive, zero or negative. This method checks whether the length is less than zero.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; タイムライン上の2点間の有向距離を表しており、従って、正、ゼロまたは負とすることができます。このメソッドは、長さがゼロ未満かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="2748f760b08fada23b2956823b2400fe17d043c7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a directed distance between two points on the time-line and can therefore be positive, zero or negative. This method checks whether the length is zero.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; タイムライン上の2点間の有向距離を表しており、従って、正、ゼロまたは負とすることができます。このメソッドは、長さがゼロかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="930f6f6edd843ad2d6fbf30a21b58dbc51ccf9e6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a directed distance between two points on the time-line. A negative duration is expressed by the negative sign of the seconds part. A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; タイムライン上の2点間の有向の距離を表します。負の期間は、秒の部分の負の符号で表されます。-1ナノ秒の期間は、-1秒+ 999,999,999ナノ秒として格納されます。</target>
        </trans-unit>
        <trans-unit id="a5025f75a24cc7c2641a1007fe78fed4557bb80a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;EnumControl&lt;/code&gt; provides control over a set of discrete possible values, each represented by an object.</source>
          <target state="translated">A &lt;code&gt;EnumControl&lt;/code&gt; は離散可能な値、オブジェクトによって表されるそれぞれのセットのコントロールを提供します。</target>
        </trans-unit>
        <trans-unit id="5b18550a37715d871995df89cc05801612c8dd56" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;EnumControl&lt;/code&gt; provides control over a set of discrete possible values, each represented by an object. In a graphical user interface, such a control might be represented by a set of buttons, each of which chooses one value or setting. For example, a reverb control might provide several preset reverberation settings, instead of providing continuously adjustable parameters of the sort that would be represented by &lt;code&gt;&lt;a href=&quot;floatcontrol&quot;&gt;&lt;code&gt;FloatControl&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">A &lt;code&gt;EnumControl&lt;/code&gt; は離散可能な値、オブジェクトによって表されるそれぞれのセットのコントロールを提供します。グラフィカルユーザーインターフェイスでは、このようなコントロールはボタンのセットで表され、それぞれが1つの値または設定を選択します。たとえば、リバーブコントロールは、 &lt;code&gt;&lt;a href=&quot;floatcontrol&quot;&gt;&lt;code&gt;FloatControl&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトによって表される種類の継続的に調整可能なパラメーターを提供する代わりに、いくつかの事前設定されたリバーブ設定を提供する場合があります。</target>
        </trans-unit>
        <trans-unit id="94ff7967cdf12cd25b3783588570d481ded45c74" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Field&lt;/code&gt; permits widening conversions to occur during a get or set access operation, but throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if a narrowing conversion would occur.</source>
          <target state="translated">A &lt;code&gt;Field&lt;/code&gt; 取得または設定アクセス動作中に発生するように拡大変換を可能にするが、スロー &lt;code&gt;IllegalArgumentException&lt;/code&gt; 縮小変換が発生する場合。</target>
        </trans-unit>
        <trans-unit id="1328055d250f23371e05fcc65298d035aa264889" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Field&lt;/code&gt; provides information about, and dynamic access to, a single field of a class or an interface.</source>
          <target state="translated">A &lt;code&gt;Field&lt;/code&gt; に関する情報、及びへの動的アクセス、クラスまたはインタフェースの単一フィールドを提供します。</target>
        </trans-unit>
        <trans-unit id="3d84578fa873dd7a44de9272ca71dfa5a8a00812" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Field&lt;/code&gt; provides information about, and dynamic access to, a single field of a class or an interface. The reflected field may be a class (static) field or an instance field.</source>
          <target state="translated">A &lt;code&gt;Field&lt;/code&gt; に関する情報、及びへの動的アクセス、クラスまたはインタフェースの単一フィールドを提供します。反射フィールドは、クラス（静的）フィールドまたはインスタンスフィールドの場合があります。</target>
        </trans-unit>
        <trans-unit id="3c6a8b1955dd096b5a0b1fc4b44adee3b3e60c93" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileChannel&lt;/code&gt; is created by invoking one of its static &lt;a href=&quot;filechannel#open-java.nio.file.Path-java.util.Set-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; methods, or by invoking the &lt;code&gt;getChannel&lt;/code&gt; method of a &lt;a href=&quot;../../io/fileinputstream&quot;&gt;&lt;code&gt;FileInputStream&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../io/fileoutputstream&quot;&gt;&lt;code&gt;FileOutputStream&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../io/randomaccessfile&quot;&gt;&lt;code&gt;RandomAccessFile&lt;/code&gt;&lt;/a&gt; to return a file channel connected to the same underlying file as the &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">A &lt;code&gt;FileChannel&lt;/code&gt; その静的のいずれか呼び出すことによって作成された&lt;a href=&quot;filechannel#open-java.nio.file.Path-java.util.Set-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;な方法を、または呼び出すことによって、 &lt;code&gt;getChannel&lt;/code&gt; 方法&lt;a href=&quot;../../io/fileinputstream&quot;&gt; &lt;code&gt;FileInputStream&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../io/fileoutputstream&quot;&gt; &lt;code&gt;FileOutputStream&lt;/code&gt; &lt;/a&gt;、又は&lt;a href=&quot;../../io/randomaccessfile&quot;&gt; &lt;code&gt;RandomAccessFile&lt;/code&gt; &lt;/a&gt;と同じ基本的なファイルに接続されたファイルチャネル返す &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のクラス。</target>
        </trans-unit>
        <trans-unit id="d7dbe17be044a047cac0a60d497bd3d6df3636b7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileInputStream&lt;/code&gt; obtains input bytes from a file in a file system.</source>
          <target state="translated">A &lt;code&gt;FileInputStream&lt;/code&gt; を取得する入力は、ファイルシステム内のファイルからのバイト。</target>
        </trans-unit>
        <trans-unit id="1796330eede2865aae5adce7c54631168f35ad9e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileInputStream&lt;/code&gt; obtains input bytes from a file in a file system. What files are available depends on the host environment.</source>
          <target state="translated">A &lt;code&gt;FileInputStream&lt;/code&gt; を取得する入力は、ファイルシステム内のファイルからのバイト。使用できるファイルは、ホスト環境によって異なります。</target>
        </trans-unit>
        <trans-unit id="2632d4be74b6a4625d839cf5ae4e5976f681131b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileSystem&lt;/code&gt; can provide read-only or read-write access to the file system. Whether or not a file system provides read-only access is established when the &lt;code&gt;FileSystem&lt;/code&gt; is created and can be tested by invoking its &lt;a href=&quot;filesystem#isReadOnly--&quot;&gt;&lt;code&gt;isReadOnly&lt;/code&gt;&lt;/a&gt; method. Attempts to write to file stores by means of an object associated with a read-only file system throws &lt;a href=&quot;readonlyfilesystemexception&quot;&gt;&lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;FileSystem&lt;/code&gt; 、ファイルシステムへの読み取り専用または読み取り書き込みアクセスを提供することができます。ファイルシステムが読み取り専用アクセスを提供するかどうかは、 &lt;code&gt;FileSystem&lt;/code&gt; の作成時に確立され、その&lt;a href=&quot;filesystem#isReadOnly--&quot;&gt; &lt;code&gt;isReadOnly&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによってテストできます。&lt;a href=&quot;readonlyfilesystemexception&quot;&gt; &lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt; &lt;/a&gt;ファイルシステムに関連付けられたオブジェクトを使用してファイルストアに書き込もうとすると、ReadOnlyFileSystemExceptionがスローされます。</target>
        </trans-unit>
        <trans-unit id="c7c3fb79d465914ca1df5911c7a10492bdbb55ad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileSystem&lt;/code&gt; implementation supports the &quot;&lt;code&gt;glob&lt;/code&gt;&quot; and &quot;&lt;code&gt;regex&lt;/code&gt;&quot; syntaxes, and may support others. The value of the syntax component is compared without regard to case.</source>
          <target state="translated">A &lt;code&gt;FileSystem&lt;/code&gt; 実装は、「サポート &lt;code&gt;glob&lt;/code&gt; 」と「 &lt;code&gt;regex&lt;/code&gt; 」の構文を、そして他の人をサポートすることができます。構文コンポーネントの値は、大文字小文字を区別せずに比較されます。</target>
        </trans-unit>
        <trans-unit id="679add4b88b56d5af3c24c1ad0ab7cf79c45d079" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileTime&lt;/code&gt; is primarily intended to represent the value of a file's time stamp. Where used to represent</source>
          <target state="translated">A &lt;code&gt;FileTime&lt;/code&gt; 、主に、ファイルのタイムスタンプの値を表すことが意図されています。を表すために使用される場所</target>
        </trans-unit>
        <trans-unit id="3788c0fcb354158afae8b7a311ab4d1c461b74ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FilterInputStream&lt;/code&gt; contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.</source>
          <target state="translated">A &lt;code&gt;FilterInputStream&lt;/code&gt; は、おそらく途中でデータを変換または追加の機能を提供する、それはデータの基本的なソースとして使用する他のいくつかの入力ストリームを、含んでいます。</target>
        </trans-unit>
        <trans-unit id="7df34daede311fcfe7b9123ab498e1afb22440cb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FilterInputStream&lt;/code&gt; contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. The class &lt;code&gt;FilterInputStream&lt;/code&gt; itself simply overrides all methods of &lt;code&gt;InputStream&lt;/code&gt; with versions that pass all requests to the contained input stream. Subclasses of &lt;code&gt;FilterInputStream&lt;/code&gt; may further override some of these methods and may also provide additional methods and fields.</source>
          <target state="translated">A &lt;code&gt;FilterInputStream&lt;/code&gt; は、おそらく途中でデータを変換または追加の機能を提供する、それはデータの基本的なソースとして使用する他のいくつかの入力ストリームを、含んでいます。 &lt;code&gt;FilterInputStream&lt;/code&gt; クラス自体は、含まれている入力ストリームにすべてのリクエストを渡すバージョンで &lt;code&gt;InputStream&lt;/code&gt; のすべてのメソッドを単にオーバーライドします。 &lt;code&gt;FilterInputStream&lt;/code&gt; のサブクラスは、これらのメソッドの一部をさらにオーバーライドし、追加のメソッドとフィールドを提供する場合もあります。</target>
        </trans-unit>
        <trans-unit id="0776d262b9a240668408d943063b8980215c05ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FloatControl&lt;/code&gt; object provides control over a range of floating-point values.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; のオブジェクトは、浮動小数点値の範囲にわたって制御を提供します。</target>
        </trans-unit>
        <trans-unit id="165ea81b3de0ff3435f43bdd01ecce2114051843" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FloatControl&lt;/code&gt; object provides control over a range of floating-point values. Float controls are often represented in graphical user interfaces by continuously adjustable objects such as sliders or rotary knobs. Concrete subclasses of &lt;code&gt;FloatControl&lt;/code&gt; implement controls, such as gain and pan, that affect a line's audio signal in some way that an application can manipulate. The &lt;code&gt;&lt;a href=&quot;floatcontrol.type&quot;&gt;&lt;code&gt;FloatControl.Type&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; inner class provides static instances of types that are used to identify some common kinds of float control.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; のオブジェクトは、浮動小数点値の範囲にわたって制御を提供します。フロートコントロールは、多くの場合、スライダーや回転ノブなどの継続的に調整可能なオブジェクトによってグラフィカルユーザーインターフェイスで表されます。 &lt;code&gt;FloatControl&lt;/code&gt; 実装の具体的なサブクラスは、ゲインやパンなど、アプリケーションが操作できる何らかの方法でラインのオーディオ信号に影響を与えるコントロールを実装します。 &lt;code&gt;&lt;a href=&quot;floatcontrol.type&quot;&gt;&lt;code&gt;FloatControl.Type&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 内部クラスは、フロート制御のいくつかの一般的な種類を識別するために使用されるタイプの静的インスタンスを提供します。</target>
        </trans-unit>
        <trans-unit id="944eb4dbe083d626573fb9205a6f80a2ef305e79" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Flushable&lt;/code&gt; is a destination of data that can be flushed.</source>
          <target state="translated">A &lt;code&gt;Flushable&lt;/code&gt; フラッシュすることができるデータの宛先です。</target>
        </trans-unit>
        <trans-unit id="d537dc81750c6b0be163b1df3ae5f7fcb7f1acc2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Flushable&lt;/code&gt; is a destination of data that can be flushed. The flush method is invoked to write any buffered output to the underlying stream.</source>
          <target state="translated">A &lt;code&gt;Flushable&lt;/code&gt; フラッシュすることができるデータの宛先です。flushメソッドが呼び出されて、バッファリングされた出力を基になるストリームに書き込みます。</target>
        </trans-unit>
        <trans-unit id="a8d18a90b5521be7acf1afb0796d715eb20c7f79" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinPool&lt;/code&gt; differs from other kinds of &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; mainly by virtue of employing &lt;em&gt;work-stealing&lt;/em&gt;: all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist). This enables efficient processing when most tasks spawn other subtasks (as do most &lt;code&gt;ForkJoinTask&lt;/code&gt;s), as well as when many small tasks are submitted to the pool from external clients. Especially when setting &lt;em&gt;asyncMode&lt;/em&gt; to true in constructors, &lt;code&gt;ForkJoinPool&lt;/code&gt;s may also be appropriate for use with event-style tasks that are never joined.</source>
          <target state="translated">A &lt;code&gt;ForkJoinPool&lt;/code&gt; の他の種類から異なる&lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;主として使用のおかげで、&lt;em&gt;ワークスチールを&lt;/em&gt;：タスクを見つけて実行するプールの試みで、すべてのスレッドがプールに提出及び/又は他のアクティブなタスク（結局なし存在する場合は作業を待っているブロック）によって作成されました。これにより、ほとんどのタスクが他のサブタスクを生成するとき（ほとんどの &lt;code&gt;ForkJoinTask&lt;/code&gt; がそうであるように）、および多くの小さなタスクが外部クライアントからプールに送信されるときに、効率的な処理が可能になります。特に、コンストラクターで&lt;em&gt;asyncMode&lt;/em&gt;をtrue に設定する場合、 &lt;code&gt;ForkJoinPool&lt;/code&gt; は、結合されないイベントスタイルのタスクでの使用にも適している場合があります。</target>
        </trans-unit>
        <trans-unit id="9544e01c6b5af36520a8f8b6ebcc6596c68d9f35" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinTask&lt;/code&gt; is a lightweight form of &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. The efficiency of &lt;code&gt;ForkJoinTask&lt;/code&gt;s stems from a set of restrictions (that are only partially statically enforceable) reflecting their main use as computational tasks calculating pure functions or operating on purely isolated objects. The primary coordination mechanisms are &lt;a href=&quot;forkjointask#fork--&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, that arranges asynchronous execution, and &lt;a href=&quot;forkjointask#join--&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, that doesn't proceed until the task's result has been computed. Computations should ideally avoid &lt;code&gt;synchronized&lt;/code&gt; methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling. Subdividable tasks should also not perform blocking I/O, and should ideally access variables that are completely independent of those accessed by other running tasks. These guidelines are loosely enforced by not permitting checked exceptions such as &lt;code&gt;IOExceptions&lt;/code&gt; to be thrown. However, computations may still encounter unchecked exceptions, that are rethrown to callers attempting to join them. These exceptions may additionally include &lt;a href=&quot;rejectedexecutionexception&quot;&gt;&lt;code&gt;RejectedExecutionException&lt;/code&gt;&lt;/a&gt; stemming from internal resource exhaustion, such as failure to allocate internal task queues. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using &lt;code&gt;ex.printStackTrace()&lt;/code&gt;) of both the thread that initiated the computation as well as the thread actually encountering the exception; minimally only the latter.</source>
          <target state="translated">A &lt;code&gt;ForkJoinTask&lt;/code&gt; は軽量形で&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;ForkJoinTask&lt;/code&gt; の効率は、純粋な関数を計算したり、純粋に分離されたオブジェクトを操作したりする計算タスクとしての主な使用法を反映する一連の制限（部分的に静的にのみ実施可能）に由来します。主な調整メカニズムは、非同期実行を調整する&lt;a href=&quot;forkjointask#fork--&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;と、タスクの結果が計算されるまで進行しない&lt;a href=&quot;forkjointask#join--&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;です。計算は理想的には &lt;code&gt;synchronized&lt;/code&gt; 避けるべきですメソッドまたはブロック。他のタスクへの参加や、フォーク/ジョインスケジューリングと連携するようにアドバタイズされるフェイザーなどのシンクロナイザーの使用は別として、他のブロッキング同期を最小限に抑える必要があります。分割可能なタスクもブロッキングI / Oを実行するべきではなく、他の実行中のタスクがアクセスする変数から完全に独立した変数にアクセスするのが理想的です。これらのガイドラインは、 &lt;code&gt;IOExceptions&lt;/code&gt; などのチェックされた例外のスローを許可しないことにより、大まかに適用されます。ただし、計算では未チェックの例外が発生する可能性があり、それらを結合しようとする呼び出し元に再スローされます。これらの例外には、&lt;a href=&quot;rejectedexecutionexception&quot;&gt; &lt;code&gt;RejectedExecutionException&lt;/code&gt; &lt;/a&gt;がさらに含まれる場合があります。内部タスクキューの割り当ての失敗など、内部リソースの枯渇に起因します。再スローされた例外は通常の例外と同じように動作しますが、可能であれば、計算を開始したスレッドと実際に例外が発生したスレッドの両方のスタックトレース（たとえば、 &lt;code&gt;ex.printStackTrace()&lt;/code&gt; を使用して表示される）が含まれます。少なくとも後者のみ。</target>
        </trans-unit>
        <trans-unit id="aaed9c1c95e36e578332ed99960bdc34b464e2c1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; object representing the pending result</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; 保留中の結果を表すオブジェクト</target>
        </trans-unit>
        <trans-unit id="e3c738535226d76fc03962a22432b614701ce29c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; represents the result of an asynchronous computation.</source>
          <target state="translated">A &lt;code&gt;Future&lt;/code&gt; 非同期計算の結果を表します。</target>
        </trans-unit>
        <trans-unit id="eba862211d7584251d0b7d0c2a6de4b35930cfa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method &lt;code&gt;get&lt;/code&gt; when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the &lt;code&gt;cancel&lt;/code&gt; method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a &lt;code&gt;Future&lt;/code&gt; for the sake of cancellability but not provide a usable result, you can declare types of the form &lt;code&gt;Future&amp;lt;?&amp;gt;&lt;/code&gt; and return &lt;code&gt;null&lt;/code&gt; as a result of the underlying task.</source>
          <target state="translated">A &lt;code&gt;Future&lt;/code&gt; 非同期計算の結果を表します。計算が完了したかどうかをチェックし、その完了を待機し、計算の結果を取得するためのメソッドが提供されています。結果は、計算が完了したときに &lt;code&gt;get&lt;/code&gt; メソッドを使用してのみ取得でき、必要に応じて準備ができるまでブロックされます。キャンセルは &lt;code&gt;cancel&lt;/code&gt; メソッドで行います。タスクが正常に完了したかキャンセルされたかを判断するための追加のメソッドが提供されています。計算が完了すると、その計算をキャンセルすることはできません。キャンセル可能性のために &lt;code&gt;Future&lt;/code&gt; を使用したいが使用可能な結果を​​提供したくない場合は、 &lt;code&gt;Future&amp;lt;?&amp;gt;&lt;/code&gt; 形式のタイプを宣言して &lt;code&gt;null&lt;/code&gt; を返すことができます。 基礎となるタスクの結果として。</target>
        </trans-unit>
        <trans-unit id="f9bf9f3ae9d9dc18349e070a2be923bb4c83d53c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FutureTask&lt;/code&gt; can be used to wrap a &lt;a href=&quot;callable&quot;&gt;&lt;code&gt;Callable&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt; object. Because &lt;code&gt;FutureTask&lt;/code&gt; implements &lt;code&gt;Runnable&lt;/code&gt;, a &lt;code&gt;FutureTask&lt;/code&gt; can be submitted to an &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; for execution.</source>
          <target state="translated">A &lt;code&gt;FutureTask&lt;/code&gt; をラップするために使用することができます&lt;a href=&quot;callable&quot;&gt; &lt;code&gt;Callable&lt;/code&gt; &lt;/a&gt;か&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; &lt;/a&gt;オブジェクトを。 &lt;code&gt;FutureTask&lt;/code&gt; は &lt;code&gt;Runnable&lt;/code&gt; を実装しているため、 &lt;code&gt;FutureTask&lt;/code&gt; を&lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt;に送信して実行できます。</target>
        </trans-unit>
        <trans-unit id="b15d7f012da980ff804256f43a1e764ab575fa4d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GaugeMonitor&lt;/code&gt; can operate in &lt;em&gt;difference mode&lt;/em&gt;. In this mode, the value compared against the high and low thresholds is the difference between two successive observations of an attribute.</source>
          <target state="translated">A &lt;code&gt;GaugeMonitor&lt;/code&gt; はで動作することができ&lt;em&gt;差分モード&lt;/em&gt;。このモードでは、高しきい値と低しきい値に対して比較される値は、属性の2つの連続する観測間の差です。</target>
        </trans-unit>
        <trans-unit id="4cf3cffad5d242245950456e0383e3dadcec2d32" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Handler&lt;/code&gt; can be disabled by doing a &lt;code&gt;setLevel(Level.OFF)&lt;/code&gt; and can be re-enabled by doing a &lt;code&gt;setLevel&lt;/code&gt; with an appropriate level.</source>
          <target state="translated">A &lt;code&gt;Handler&lt;/code&gt; 実行して無効にすることができる &lt;code&gt;setLevel(Level.OFF)&lt;/code&gt; し、実行して再有効化することが可能 &lt;code&gt;setLevel&lt;/code&gt; 適切なレベルで。</target>
        </trans-unit>
        <trans-unit id="07d5ef0f1e1b73dbbd9fd210671b4d619d422fe6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Handler&lt;/code&gt; object takes log messages from a &lt;code&gt;Logger&lt;/code&gt; and exports them.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; オブジェクトからログメッセージを受け取り &lt;code&gt;Logger&lt;/code&gt; と輸出それら。</target>
        </trans-unit>
        <trans-unit id="71915fb4257dbd796d9ff81b937255b731d13b27" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Handler&lt;/code&gt; object takes log messages from a &lt;code&gt;Logger&lt;/code&gt; and exports them. It might for example, write them to a console or write them to a file, or send them to a network logging service, or forward them to an OS log, or whatever.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; オブジェクトからログメッセージを受け取り &lt;code&gt;Logger&lt;/code&gt; と輸出それら。たとえば、コンソールに書き込んだり、ファイルに書き込んだり、ネットワークログサービスに送信したり、OSログに転送したりできます。</target>
        </trans-unit>
        <trans-unit id="3fb57c28b4cbc4de67b9b837881a7c7b94627b9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a &lt;code&gt;PrivateKey&lt;/code&gt; and corresponding certificate chain.</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 保持エントリ &lt;code&gt;PrivateKey&lt;/code&gt; と対応する証明書チェーン。</target>
        </trans-unit>
        <trans-unit id="837ba561898b391715044e3d771ab97e0f801556" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a &lt;code&gt;SecretKey&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 保持されているエントリ &lt;code&gt;SecretKey&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d4f9392633e9e6a7977e14aae24bfa123ae981d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a trusted &lt;code&gt;Certificate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 保持されているエントリは、信頼できる &lt;code&gt;Certificate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3c291843cd8aff8aee9399a0e479b86bb3a9660" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; manages different types of entries. Each type of entry implements the &lt;code&gt;KeyStore.Entry&lt;/code&gt; interface. Three basic &lt;code&gt;KeyStore.Entry&lt;/code&gt; implementations are provided:</source>
          <target state="translated">A &lt;code&gt;KeyStore&lt;/code&gt; エントリの種類を管理します。エントリの各タイプは、 &lt;code&gt;KeyStore.Entry&lt;/code&gt; インターフェースを実装します。3つの基本的な &lt;code&gt;KeyStore.Entry&lt;/code&gt; 実装が提供されます。</target>
        </trans-unit>
        <trans-unit id="bb4a585b9fa4f77ccbfb42f60f7e4ebf122059bf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Line.Info&lt;/code&gt; can be retrieved using various methods of the &lt;code&gt;Line&lt;/code&gt;, &lt;code&gt;Mixer&lt;/code&gt;, and &lt;code&gt;AudioSystem&lt;/code&gt; interfaces. Other such methods let you pass a &lt;code&gt;Line.Info&lt;/code&gt; as an argument, to learn whether lines matching the specified configuration are available and to obtain them.</source>
          <target state="translated">A &lt;code&gt;Line.Info&lt;/code&gt; は、種々の方法を用いて取得することができる &lt;code&gt;Line&lt;/code&gt; 、 &lt;code&gt;Mixer&lt;/code&gt; 、及び &lt;code&gt;AudioSystem&lt;/code&gt; インタフェースを。他のこのようなメソッドを使用すると、引数として &lt;code&gt;Line.Info&lt;/code&gt; を渡して、指定した構成に一致するラインが使用可能かどうかを確認し、それらを取得できます。</target>
        </trans-unit>
        <trans-unit id="5433f861d6141ec2c15ed3524c528b35530116f7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Line.Info&lt;/code&gt; object contains information about a line.</source>
          <target state="translated">&lt;code&gt;Line.Info&lt;/code&gt; オブジェクトは、ラインに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="411649ef651b4ec2897e14a73c6efb69e286dd53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Line.Info&lt;/code&gt; object contains information about a line. The only information provided by &lt;code&gt;Line.Info&lt;/code&gt; itself is the Java class of the line. A subclass of &lt;code&gt;Line.Info&lt;/code&gt; adds other kinds of information about the line. This additional information depends on which &lt;code&gt;Line&lt;/code&gt; subinterface is implemented by the kind of line that the &lt;code&gt;Line.Info&lt;/code&gt; subclass describes.</source>
          <target state="translated">&lt;code&gt;Line.Info&lt;/code&gt; オブジェクトは、ラインに関する情報が含まれています。 &lt;code&gt;Line.Info&lt;/code&gt; 自体によって提供される唯一の情報は、回線のJavaクラスです。 &lt;code&gt;Line.Info&lt;/code&gt; のサブクラスは、ラインに関する他の種類の情報を追加します。この追加情報は、 &lt;code&gt;Line.Info&lt;/code&gt; サブクラスが記述する線の種類によって実装される &lt;code&gt;Line&lt;/code&gt; サブインターフェースによって異なります。</target>
        </trans-unit>
        <trans-unit id="f5de3198e8f1dfa44dcfc8af9b52d97a73d03b8f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LineUnavailableException&lt;/code&gt; is an exception indicating that a line cannot be opened because it is unavailable.</source>
          <target state="translated">A &lt;code&gt;LineUnavailableException&lt;/code&gt; は、それが使用できないため、ラインを開くことができないことを示す例外です。</target>
        </trans-unit>
        <trans-unit id="4abb8847d52965ede812fd61400508e96855279e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LineUnavailableException&lt;/code&gt; is an exception indicating that a line cannot be opened because it is unavailable. This situation arises most commonly when a requested line is already in use by another application.</source>
          <target state="translated">A &lt;code&gt;LineUnavailableException&lt;/code&gt; は、それが使用できないため、ラインを開くことができないことを示す例外です。この状況は、要求された回線が別のアプリケーションによってすでに使用されている場合に最もよく発生します。</target>
        </trans-unit>
        <trans-unit id="fcb957da8c31310ec301dd29626158388e9473b1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is reconstructed as a &lt;code&gt;java.util.ArrayList&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;; a &lt;code&gt;Set&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; as a &lt;code&gt;java.util.HashSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;; a &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; as a &lt;code&gt;java.util.TreeSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&amp;lt;&lt;/code&gt; &lt;em&gt;Eは&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として再構築され &lt;code&gt;java.util.ArrayList&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;Set&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として &lt;code&gt;java.util.HashSet&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として &lt;code&gt;java.util.TreeSet&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af514fc0928d7590d9dc3d67e977394e1aca4d98" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;Set&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt;, is mapped in the same way as an array of the same element type, such as &lt;code&gt;String[]&lt;/code&gt; or &lt;code&gt;ObjectName[]&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;Set&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; のような、 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; または &lt;code&gt;Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt; 、のような、同じ要素型の配列と同じ方法でマッピングされている &lt;code&gt;String[]&lt;/code&gt; または &lt;code&gt;ObjectName[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="655d6f46a51b7f12297ceef1f25f3c615013051a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; can be converted to a &lt;code&gt;String[]&lt;/code&gt; using &lt;a href=&quot;../../java/util/list#toArray-T:A-&quot;&gt;&lt;code&gt;List.toArray(new
          String[0])&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; に変換することができる &lt;code&gt;String[]&lt;/code&gt; 使用&lt;a href=&quot;../../java/util/list#toArray-T:A-&quot;&gt; &lt;code&gt;List.toArray(new String[0])&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cdb60bce0f809f664699468a47d7ccb04d51a1b6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;BufferedImage&lt;/code&gt; thumbnails, or &lt;code&gt;null&lt;/code&gt;. Non-&lt;code&gt;BufferedImage&lt;/code&gt; objects must not be stored in this &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; の &lt;code&gt;BufferedImage&lt;/code&gt; サムネイル、または &lt;code&gt;null&lt;/code&gt; 。非 &lt;code&gt;BufferedImage&lt;/code&gt; オブジェクトは、この中に保存されてはいけない &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36b2069fe914d7b06b5470b8c3919de4f456ffd0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Locale&lt;/code&gt;s, one for each element of &lt;code&gt;warningListeners&lt;/code&gt;, initialized by default &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&lt;/code&gt; の &lt;code&gt;Locale&lt;/code&gt; の、の各要素に対して1つの &lt;code&gt;warningListeners&lt;/code&gt; デフォルトで初期化され、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3a7c07b884a663e7b28c579dbc62722d830dd12" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録されているの &lt;code&gt;IIOReadProgressListener&lt;/code&gt; にデフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f3df7f953dd6fc375207a519bf3b8812d9b980e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録されているの &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; にデフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02920fdeb4509bc480fe7cb92fdd00152bb3b36e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOReadWarningListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録の &lt;code&gt;IIOReadWarningListener&lt;/code&gt; にデフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1efe3832c842f4b962429c8ff5af3c882f4ac2e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s, initialized by default &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録の &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; デフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b98b86689e972cd06c339fa353658a98f167a0a5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOWriteWarningListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録の &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; にデフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="917395ca416ac2ceda1a7b79e06bc0660475f8a6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of the &lt;code&gt;Locale&lt;/code&gt;s associated with each currently registered &lt;code&gt;IIOReadWarningListener&lt;/code&gt;, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&lt;/code&gt; の &lt;code&gt;Locale&lt;/code&gt; のそれぞれ現在登録に関連付けられている &lt;code&gt;IIOReadWarningListener&lt;/code&gt; にデフォルトで初期化され、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b58a7624cae8f15ddb95782892153cb5fabf8fd5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LocalTime&lt;/code&gt; is formed if there is at least an hour-of-day available. This involves providing default values for minute, second and fraction of second.</source>
          <target state="translated">A &lt;code&gt;LocalTime&lt;/code&gt; 少なくとも時間- 1日の利用可能がある場合に形成されています。これには、分、秒、秒の小数部のデフォルト値を提供することが含まれます。</target>
        </trans-unit>
        <trans-unit id="01853789d6079ac2028fec19eeeae43f9b897108" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; is the mechanism for identifying the kind of object (&lt;code&gt;NumberFormat&lt;/code&gt;) that you would like to get. The locale is &lt;strong&gt;just&lt;/strong&gt; a mechanism for identifying objects, &lt;strong&gt;not&lt;/strong&gt; a container for the objects themselves.</source>
          <target state="translated">A &lt;code&gt;Locale&lt;/code&gt; オブジェクト（の種類識別するための仕組みである &lt;code&gt;NumberFormat&lt;/code&gt; あなたが取得したいと思いことを）。ロケールはオブジェクトを識別するためのメカニズムに&lt;strong&gt;すぎ&lt;/strong&gt;&lt;strong&gt;ず&lt;/strong&gt;、オブジェクト自体のコンテナではあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6fcfa373099d6b3da024951a19df5dd6b097e2d8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; object logically consists of the fields described below.</source>
          <target state="translated">A &lt;code&gt;Locale&lt;/code&gt; オブジェクトは、論理的に、以下に記載のフィールドから構成されています。</target>
        </trans-unit>
        <trans-unit id="166cc021915f9ee4f85c76cabe7204921d6e9fe0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; object represents a specific geographical, political, or cultural region.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; オブジェクトは、地理的、政治的、または文化的地域特定を表します。</target>
        </trans-unit>
        <trans-unit id="635a5aa01099339234a0a7ea3dcb399de997df31" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; object represents a specific geographical, political, or cultural region. An operation that requires a &lt;code&gt;Locale&lt;/code&gt; to perform its task is called &lt;em&gt;locale-sensitive&lt;/em&gt; and uses the &lt;code&gt;Locale&lt;/code&gt; to tailor information for the user. For example, displaying a number is a locale-sensitive operation&amp;mdash; the number should be formatted according to the customs and conventions of the user's native country, region, or culture.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; オブジェクトは、地理的、政治的、または文化的地域特定を表します。タスクの実行に &lt;code&gt;Locale&lt;/code&gt; が必要な操作は&lt;em&gt;ロケール依存&lt;/em&gt;と呼ばれ、 &lt;code&gt;Locale&lt;/code&gt; を使用してユーザーの情報を調整します。たとえば、数値の表示はロケールに依存する操作です。数値は、ユーザーの出身国、地域、または文化の慣習や規則に従ってフォーマットする必要があります。</target>
        </trans-unit>
        <trans-unit id="12f70407c67f5352dca1aed29447302a2a4d4250" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; to be used to localize compression type names and quality descriptions, or &lt;code&gt;null&lt;/code&gt; to use a default &lt;code&gt;Locale&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">A &lt;code&gt;Locale&lt;/code&gt; 圧縮方式名と品質概要、またはローカライズするために使用される &lt;code&gt;null&lt;/code&gt; デフォルトに使用する &lt;code&gt;Locale&lt;/code&gt; 。サブクラスは値を手動で設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8276cf42ea4317cfe442daf66653a487c4e1f80d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lock&lt;/code&gt; class can also provide behavior and semantics that is quite different from that of the implicit monitor lock, such as guaranteed ordering, non-reentrant usage, or deadlock detection. If an implementation provides such specialized semantics then the implementation must document those semantics.</source>
          <target state="translated">A &lt;code&gt;Lock&lt;/code&gt; クラスにも、このような順序は保証、非リエントラントの使用、またはデッドロックの検出など、暗黙の監視ロックとは全く異なる振る舞いと意味を提供することができます。実装がそのような特殊なセマンティクスを提供する場合、実装はそれらのセマンティクスを文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="3eca3b7befac58e83c9e637d52b7f145f7ba7b59" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lock&lt;/code&gt; implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that &lt;code&gt;Lock&lt;/code&gt; implementation.</source>
          <target state="translated">A &lt;code&gt;Lock&lt;/code&gt; の実装は、このようなデッドロックを引き起こす、とこのような状況で（チェック）例外をスローすることが呼び出しなどのロックの不正使用を検出することができます。その &lt;code&gt;Lock&lt;/code&gt; 実装によって、状況と例外タイプを文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="f3c0cd3882685c535519cd28b18404b3a9a21c01" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lock&lt;/code&gt; implementation will usually impose restrictions on which thread can release a lock (typically only the holder of the lock can release it) and may throw an (unchecked) exception if the restriction is violated. Any restrictions and the exception type must be documented by that &lt;code&gt;Lock&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;Lock&lt;/code&gt; の実装は通常、スレッドがロックを解除することができます（通常はロックの唯一の所有者がそれを解放することができます）、制限に違反した場合（チェック）例外をスロー可能性があるに制限を課します。制限と例外タイプは、その &lt;code&gt;Lock&lt;/code&gt; 実装によって文書化されている必要があります。</target>
        </trans-unit>
        <trans-unit id="b71cbc511c202cb9f3e5502805e1768103b9d6cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LoginModule&lt;/code&gt; implementation must have a constructor with no arguments. This allows classes which load the &lt;code&gt;LoginModule&lt;/code&gt; to instantiate it.</source>
          <target state="translated">&lt;code&gt;LoginModule&lt;/code&gt; 実装は、引数なしのコンストラクタを持たなければなりません。これにより、 &lt;code&gt;LoginModule&lt;/code&gt; をロードするクラスがそれをインスタンス化できます。</target>
        </trans-unit>
        <trans-unit id="d949ad08cad7e449a2f42749aa45dffb85fab86e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lookup&lt;/code&gt; object can be shared with other trusted code, such as a metaobject protocol. A shared &lt;code&gt;Lookup&lt;/code&gt; object delegates the capability to create method handles on private members of the lookup class. Even if privileged code uses the &lt;code&gt;Lookup&lt;/code&gt; object, the access checking is confined to the privileges of the original lookup class.</source>
          <target state="translated">&lt;code&gt;Lookup&lt;/code&gt; オブジェクトは、メタオブジェクトプロトコルのような他の信頼されたコードと共有することができます。共有 &lt;code&gt;Lookup&lt;/code&gt; オブジェクトは、ルックアップクラスのプライベートメンバーにメソッドハンドルを作成する機能を委任します。特権コードが &lt;code&gt;Lookup&lt;/code&gt; オブジェクトを使用する場合でも、アクセスチェックは元の参照クラスの特権に限定されます。</target>
        </trans-unit>
        <trans-unit id="41de0ba43f16a90c262039e2bd1814b41250f82c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ManagedBlocker&lt;/code&gt; provides two methods. Method &lt;a href=&quot;forkjoinpool.managedblocker#isReleasable--&quot;&gt;&lt;code&gt;isReleasable()&lt;/code&gt;&lt;/a&gt; must return &lt;code&gt;true&lt;/code&gt; if blocking is not necessary. Method &lt;a href=&quot;forkjoinpool.managedblocker#block--&quot;&gt;&lt;code&gt;block()&lt;/code&gt;&lt;/a&gt; blocks the current thread if necessary (perhaps internally invoking &lt;code&gt;isReleasable&lt;/code&gt; before actually blocking). These actions are performed by any thread invoking &lt;a href=&quot;forkjoinpool#managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-&quot;&gt;&lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt;&lt;/a&gt;. The unusual methods in this API accommodate synchronizers that may, but don't usually, block for long periods. Similarly, they allow more efficient internal handling of cases in which additional workers may be, but usually are not, needed to ensure sufficient parallelism. Toward this end, implementations of method &lt;code&gt;isReleasable&lt;/code&gt; must be amenable to repeated invocation.</source>
          <target state="translated">A &lt;code&gt;ManagedBlocker&lt;/code&gt; は、 2つのメソッドを提供します。ブロックが不要な場合、メソッド&lt;a href=&quot;forkjoinpool.managedblocker#isReleasable--&quot;&gt; &lt;code&gt;isReleasable()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;true&lt;/code&gt; を返す必要があります。メソッド&lt;a href=&quot;forkjoinpool.managedblocker#block--&quot;&gt; &lt;code&gt;block()&lt;/code&gt; &lt;/a&gt;は、必要に応じて現在のスレッドをブロックします（おそらく、実際にブロックする前に、内部的に &lt;code&gt;isReleasable&lt;/code&gt; を呼び出します）。これらのアクションは、&lt;a href=&quot;forkjoinpool#managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-&quot;&gt; &lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt; &lt;/a&gt;を呼び出すスレッドによって実行されます。このAPIの異常なメソッドは、通常はブロックしない可能性がありますが、長期間ブロックするシンクロナイザーに対応します。同様に、十分な並列処理を確保するために追加のワーカーが必要になる場合がありますが、通常は必要とされない場合の内部処理をより効率的に行うことができます。この目的のために、メソッドの実装は &lt;code&gt;isReleasable&lt;/code&gt; 繰り返し呼び出しを受け入れられる必要があります。</target>
        </trans-unit>
        <trans-unit id="ccb5483368ce702117255c40bb64a3c638ac6959" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is reconstructed as a &lt;code&gt;java.util.HashMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;; a &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; as a &lt;code&gt;java.util.TreeMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Map&amp;lt;&lt;/code&gt; &lt;em&gt;Kは&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として再構成され &lt;code&gt;java.util.HashMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として &lt;code&gt;java.util.TreeMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a5492d91c797e8ad61ee773f7ff7771cc95b5945" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, for example &lt;code&gt;Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt;, has Open Type &lt;a href=&quot;openmbean/tabulartype&quot;&gt;&lt;code&gt;TabularType&lt;/code&gt;&lt;/a&gt; and is mapped to a &lt;a href=&quot;openmbean/tabulardata&quot;&gt;&lt;code&gt;TabularData&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;TabularType&lt;/code&gt; has two items called &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. The Open Type of &lt;code&gt;key&lt;/code&gt; is &lt;em&gt;opentype(K)&lt;/em&gt;, and the Open Type of &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;opentype(V)&lt;/em&gt;. The index of the &lt;code&gt;TabularType&lt;/code&gt; is the single item &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Map&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;Vは&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 、例えば &lt;code&gt;Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt; 、オープンタイプ有する&lt;a href=&quot;openmbean/tabulartype&quot;&gt; &lt;code&gt;TabularType&lt;/code&gt; では&lt;/a&gt;とにマッピングされ&lt;a href=&quot;openmbean/tabulardata&quot;&gt; &lt;code&gt;TabularData&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;TabularType&lt;/code&gt; では、と呼ばれる2つの項目がある &lt;code&gt;key&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; のOpen Type は&lt;em&gt;opentype（K）で&lt;/em&gt;、 &lt;code&gt;value&lt;/code&gt; のOpen Type は&lt;em&gt;opentype（V）&lt;/em&gt;です。 &lt;code&gt;TabularType&lt;/code&gt; のインデックスは、単一のアイテム &lt;code&gt;key&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4e3654abaa9ec0cd85de26194397d568c17a1dc7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object whose settings have the values required for unlimited precision arithmetic. The values of the settings are: &lt;code&gt;
  precision=0 roundingMode=HALF_UP
  &lt;/code&gt;</source>
          <target state="translated">A &lt;code&gt;MathContext&lt;/code&gt; その設定無制限の精度での計算に必要な値を持つオブジェクト。設定の値は次のとおりです： &lt;code&gt; precision=0 roundingMode=HALF_UP &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96c1e909740c6811a0d1efdeffb1ff302e2bb931" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting matching the IEEE 754R Decimal128 format, 34 digits, and a rounding mode of &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt;&lt;code&gt;HALF_EVEN&lt;/code&gt;&lt;/a&gt;, the IEEE 754R default.</source>
          <target state="translated">A &lt;code&gt;MathContext&lt;/code&gt; IEEE 754R Decimal28形式、34桁、の丸めモードマッチング精度が設定されたオブジェクト&lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt; &lt;code&gt;HALF_EVEN&lt;/code&gt; &lt;/a&gt;、IEEE 754Rのデフォルト。</target>
        </trans-unit>
        <trans-unit id="5c1e77d0a3347653dcee6a8b1f11bee4a66d44be" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting matching the IEEE 754R Decimal32 format, 7 digits, and a rounding mode of &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt;&lt;code&gt;HALF_EVEN&lt;/code&gt;&lt;/a&gt;, the IEEE 754R default.</source>
          <target state="translated">IEEE 754R Decimal32形式、7桁、IEEE 754Rのデフォルトである&lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt; &lt;code&gt;HALF_EVEN&lt;/code&gt; の&lt;/a&gt;丸めモードに一致する精度設定を持つ &lt;code&gt;MathContext&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="b4edaafe90086d392d090849cc8b67e7f5445efa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting matching the IEEE 754R Decimal64 format, 16 digits, and a rounding mode of &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt;&lt;code&gt;HALF_EVEN&lt;/code&gt;&lt;/a&gt;, the IEEE 754R default.</source>
          <target state="translated">IEEE 754R Decimal64形式、16桁、IEEE 754Rのデフォルトである&lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt; &lt;code&gt;HALF_EVEN&lt;/code&gt; の&lt;/a&gt;丸めモードに一致する精度設定を持つ &lt;code&gt;MathContext&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="606f930b55bbce0493e70e26368aa5b13a7f4fca" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MemoryUsage&lt;/code&gt; object contains four values:</source>
          <target state="translated">&lt;code&gt;MemoryUsage&lt;/code&gt; オブジェクトには4つの値が含まれます。</target>
        </trans-unit>
        <trans-unit id="fa4d939f81165b50263fcede0b6dfe1f34749207" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MemoryUsage&lt;/code&gt; object represents a snapshot of memory usage.</source>
          <target state="translated">&lt;code&gt;MemoryUsage&lt;/code&gt; オブジェクトは、メモリ使用量のスナップショットを表します。</target>
        </trans-unit>
        <trans-unit id="78b89506999de34adc0eab3d85d54befd68853ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MemoryUsage&lt;/code&gt; object represents a snapshot of memory usage. Instances of the &lt;code&gt;MemoryUsage&lt;/code&gt; class are usually constructed by methods that are used to obtain memory usage information about individual memory pool of the Java virtual machine or the heap or non-heap memory of the Java virtual machine as a whole.</source>
          <target state="translated">&lt;code&gt;MemoryUsage&lt;/code&gt; オブジェクトは、メモリ使用量のスナップショットを表します。通常、 &lt;code&gt;MemoryUsage&lt;/code&gt; クラスのインスタンスは、Java仮想マシンの個々のメモリプール、またはJava仮想マシン全体のヒープまたは非ヒープメモリに関するメモリ使用量情報を取得するために使用されるメソッドによって構築されます。</target>
        </trans-unit>
        <trans-unit id="a97fd72ec727d747337194ffbf451d3f7cf10cc8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Messager&lt;/code&gt; provides the way for an annotation processor to report error messages, warnings, and other notices.</source>
          <target state="translated">A &lt;code&gt;Messager&lt;/code&gt; レポートのエラーメッセージ、警告、およびその他の通知に注釈プロセッサのための方法を提供します。</target>
        </trans-unit>
        <trans-unit id="8b5521c29051dc916ca552f3e4107d413e2197a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Messager&lt;/code&gt; provides the way for an annotation processor to report error messages, warnings, and other notices. Elements, annotations, and annotation values can be passed to provide a location hint for the message. However, such location hints may be unavailable or only approximate.</source>
          <target state="translated">A &lt;code&gt;Messager&lt;/code&gt; レポートのエラーメッセージ、警告、およびその他の通知に注釈プロセッサのための方法を提供します。要素、注釈、および注釈値を渡して、メッセージの場所のヒントを提供できます。ただし、そのような位置のヒントは使用できないか、概算にすぎない場合があります。</target>
        </trans-unit>
        <trans-unit id="1ad837bf3e31c7b5b47588b5b301ff6b6f388b32" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program.</source>
          <target state="translated">A &lt;code&gt;MetaMessage&lt;/code&gt; がある &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; シンセサイザーに意味はないが、それは、MIDIファイルに格納され、シーケンサプログラムによって解釈することができます。</target>
        </trans-unit>
        <trans-unit id="6411c04f2592f16b41f8ac78ab0fe3af9c44008b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program. (See the discussion in the &lt;code&gt;MidiMessage&lt;/code&gt; class description.) The Standard MIDI Files specification defines various types of meta-events, such as sequence number, lyric, cue point, and set tempo. There are also meta-events for such information as lyrics, copyrights, tempo indications, time and key signatures, markers, etc. For more information, see the Standard MIDI Files 1.0 specification, which is part of the Complete MIDI 1.0 Detailed Specification published by the MIDI Manufacturer's Association (&lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt;).</source>
          <target state="translated">A &lt;code&gt;MetaMessage&lt;/code&gt; がある &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; シンセサイザーに意味はないが、それは、MIDIファイルに格納され、シーケンサプログラムによって解釈することができます。 （ &lt;code&gt;MidiMessage&lt;/code&gt; クラスの説明の説明を参照してください。）標準MIDIファイル仕様では、シーケンス番号、歌詞、キューポイント、設定テンポなど、さまざまなタイプのメタイベントが定義されています。歌詞、著作権、テンポ表示、時間と調号、マーカーなどの情報のメタイベントもあります。詳細については、Standard MIDI Files 1.0仕様を参照してください。これは、発行されたComplete MIDI 1.0詳細仕様の一部です。 MIDI Manufacturers Association（&lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="b1556bc39acc4a33d83d3058b0e35d9fe2b1eecd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Method&lt;/code&gt; permits widening conversions to occur when matching the actual parameters to invoke with the underlying method's formal parameters, but it throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if a narrowing conversion would occur.</source>
          <target state="translated">A &lt;code&gt;Method&lt;/code&gt; 、基礎となるメソッドの仮パラメータで起動する実際のパラメータに一致するときに発生するように拡大変換を可能にするが、それはスロー &lt;code&gt;IllegalArgumentException&lt;/code&gt; 縮小変換が発生する場合。</target>
        </trans-unit>
        <trans-unit id="2661b86b675a199266968a6e45d097d08b2ed1b8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Method&lt;/code&gt; provides information about, and access to, a single method on a class or interface.</source>
          <target state="translated">A &lt;code&gt;Method&lt;/code&gt; についての情報、およびクラスまたはインタフェース上の単一のメソッドへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="0b3a1d14a60ca6e1169eb522df600b9e89fb9a7c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Method&lt;/code&gt; provides information about, and access to, a single method on a class or interface. The reflected method may be a class method or an instance method (including an abstract method).</source>
          <target state="translated">A &lt;code&gt;Method&lt;/code&gt; についての情報、およびクラスまたはインタフェース上の単一のメソッドへのアクセスを提供します。リフレクトされたメソッドは、クラスメソッドまたはインスタンスメソッド（抽象メソッドを含む）の場合があります。</target>
        </trans-unit>
        <trans-unit id="db033c5925ad5ebb7b67f81287d933584d91e0cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiChannel&lt;/code&gt; object represents a single MIDI channel.</source>
          <target state="translated">&lt;code&gt;MidiChannel&lt;/code&gt; のオブジェクトは、単一のMIDIチャンネルを表します。</target>
        </trans-unit>
        <trans-unit id="deef091e63ec51b5ffcf1c4a7c047cd054eff163" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiChannel&lt;/code&gt; object represents a single MIDI channel. Generally, each &lt;code&gt;MidiChannel&lt;/code&gt; method processes a like-named MIDI &quot;channel voice&quot; or &quot;channel mode&quot; message as defined by the MIDI specification. However, &lt;code&gt;MidiChannel&lt;/code&gt; adds some &quot;get&quot; methods that retrieve the value most recently set by one of the standard MIDI channel messages. Similarly, methods for per-channel solo and mute have been added.</source>
          <target state="translated">&lt;code&gt;MidiChannel&lt;/code&gt; のオブジェクトは、単一のMIDIチャンネルを表します。通常、各 &lt;code&gt;MidiChannel&lt;/code&gt; メソッドは、MIDI仕様で定義されているように、同じ名前のMIDI「チャネルボイス」または「チャネルモード」メッセージを処理します。ただし、 &lt;code&gt;MidiChannel&lt;/code&gt; には、標準MIDIチャネルメッセージの1つによって最後に設定された値を取得する「get」メソッドがいくつか追加されています。同様に、チャンネルごとのソロとミュートのメソッドが追加されました。</target>
        </trans-unit>
        <trans-unit id="1f2d3effb9276c4453dfb28467e6bcfc3448d55d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice.Info&lt;/code&gt; object contains assorted data about a &lt;code&gt;&lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;, including its name, the company who created it, and descriptive text.</source>
          <target state="translated">&lt;code&gt;MidiDevice.Info&lt;/code&gt; のオブジェクトは、およそ各種データが含ま &lt;code&gt;&lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; その名前、製作会社名、説明テキストなどを、。</target>
        </trans-unit>
        <trans-unit id="4429461eb7a4efbdf69a4aeb669bf5eced481a98" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; can be a transmitter or a receiver of MIDI events, or both. Therefore, it can provide &lt;a href=&quot;transmitter&quot;&gt;&lt;code&gt;Transmitter&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; instances (or both). Typically, MIDI IN ports provide transmitters, MIDI OUT ports and synthesizers provide receivers. A Sequencer typically provides transmitters for playback and receivers for recording.</source>
          <target state="translated">A &lt;code&gt;MidiDevice&lt;/code&gt; 送信機またはMIDIイベント、または両方の受信機であってもよいです。したがって、&lt;a href=&quot;transmitter&quot;&gt; &lt;code&gt;Transmitter&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;インスタンス（またはその両方）を提供できます。通常、MIDI INポートはトランスミッタを提供し、MIDI OUTポートとシンセサイザはレシーバを提供します。シーケンサーは通常、再生用のトランスミッターと録音用のレシーバーを提供します。</target>
        </trans-unit>
        <trans-unit id="ef1a43b985855c29aef01aad7535cc36a37fca12" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; can be opened and closed explicitly as well as implicitly. Explicit opening is accomplished by calling &lt;a href=&quot;mididevice#open--&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;, explicit closing is done by calling &lt;a href=&quot;mididevice#close--&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; on the &lt;code&gt;MidiDevice&lt;/code&gt; instance. If an application opens a &lt;code&gt;MidiDevice&lt;/code&gt; explicitly, it has to close it explicitly to free system resources and enable the application to exit cleanly. Implicit opening is done by calling &lt;a href=&quot;midisystem#getReceiver--&quot;&gt;&lt;code&gt;MidiSystem.getReceiver&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;midisystem#getTransmitter--&quot;&gt;&lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;MidiDevice&lt;/code&gt; used by &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; and &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; is implementation-dependant unless the properties &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; and &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; are used (see the description of properties to select default providers in &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;). A &lt;code&gt;MidiDevice&lt;/code&gt; that was opened implicitly, is closed implicitly by closing the &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; that resulted in opening it. If more than one implicitly opening &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; were obtained by the application, the device is closed after the last &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; has been closed. On the other hand, calling &lt;code&gt;getReceiver&lt;/code&gt; or &lt;code&gt;getTransmitter&lt;/code&gt; on the device instance directly does not open the device implicitly. Closing these &lt;code&gt;Transmitter&lt;/code&gt;s and &lt;code&gt;Receiver&lt;/code&gt;s does not close the device implicitly. To use a device with &lt;code&gt;Receiver&lt;/code&gt;s or &lt;code&gt;Transmitter&lt;/code&gt;s obtained this way, the device has to be opened and closed explicitly.</source>
          <target state="translated">A &lt;code&gt;MidiDevice&lt;/code&gt; 開かれ、暗黙的にも明示的に閉じることができます。明示的なオープンは&lt;a href=&quot;mididevice#open--&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;を呼び出すことで行われ、明示的なクローズは &lt;code&gt;MidiDevice&lt;/code&gt; インスタンスで&lt;a href=&quot;mididevice#close--&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;を呼び出すことで行われます。アプリケーションが &lt;code&gt;MidiDevice&lt;/code&gt; を明示的に開く場合は、システムリソースを解放してアプリケーションを完全に終了できるようにするために、アプリケーションを明示的に閉じる必要があります。暗黙的なオープンは、&lt;a href=&quot;midisystem#getReceiver--&quot;&gt; &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;midisystem#getTransmitter--&quot;&gt; &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; を&lt;/a&gt;呼び出すことによって行われます。 &lt;code&gt;MidiDevice&lt;/code&gt; で使用 &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; と &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; は実装依存特性ない限りであります &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; および &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; が使用されます（&lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; で&lt;/a&gt;デフォルトプロバイダーを選択するためのプロパティの説明を参照してください）。暗黙的に開かれた &lt;code&gt;MidiDevice&lt;/code&gt; は、それを開く原因となった &lt;code&gt;Receiver&lt;/code&gt; または &lt;code&gt;Transmitter&lt;/code&gt; を閉じることによって暗黙的に閉じられます。アプリケーションによって暗黙的に開いている &lt;code&gt;Receiver&lt;/code&gt; または &lt;code&gt;Transmitter&lt;/code&gt; が複数取得された場合、最後の &lt;code&gt;Receiver&lt;/code&gt; または &lt;code&gt;Transmitter&lt;/code&gt; が閉じられた後にデバイスが閉じられます。一方、 &lt;code&gt;getReceiver&lt;/code&gt; または &lt;code&gt;getTransmitter&lt;/code&gt; を呼び出すデバイスインスタンスで直接デバイスを暗黙的に開くことはありません。これらの &lt;code&gt;Transmitter&lt;/code&gt; と &lt;code&gt;Receiver&lt;/code&gt; 閉じても、デバイスは暗黙的に閉じられません。この方法で取得した &lt;code&gt;Receiver&lt;/code&gt; または &lt;code&gt;Transmitter&lt;/code&gt; でデバイスを使用するには、デバイスを明示的に開閉する必要があります。</target>
        </trans-unit>
        <trans-unit id="7db816b29cf24e8a91f20dcd4cca5fcb5b1278eb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; includes a &lt;code&gt;&lt;a href=&quot;mididevice.info&quot;&gt;&lt;code&gt;MidiDevice.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object to provide manufacturer information and so on.</source>
          <target state="translated">A &lt;code&gt;MidiDevice&lt;/code&gt; 含ま &lt;code&gt;&lt;a href=&quot;mididevice.info&quot;&gt;&lt;code&gt;MidiDevice.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のように製造者情報とを提供することを目的とします。</target>
        </trans-unit>
        <trans-unit id="8cc1fd3cea819e030e67804197f469d0190de70a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; is a factory or provider for a particular type of MIDI device.</source>
          <target state="translated">A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; がは、 MIDIデバイスの特定のタイプのファクトリまたはプロバイダです。</target>
        </trans-unit>
        <trans-unit id="22c2795e1420ab167287908c52a758f064a0385e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; is a factory or provider for a particular type of MIDI device. This mechanism allows the implementation to determine how resources are managed in the creation and management of a device.</source>
          <target state="translated">A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; がは、 MIDIデバイスの特定のタイプのファクトリまたはプロバイダです。このメカニズムにより、実装は、デバイスの作成と管理におけるリソースの管理方法を決定できます。</target>
        </trans-unit>
        <trans-unit id="3a365e0072adf6018c7a45fe965c77b5ff34f79a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileFormat&lt;/code&gt; object can include a set of properties. A property is a pair of key and value: the key is of type &lt;code&gt;String&lt;/code&gt;, the associated property value is an arbitrary object. Properties specify additional informational meta data (like a author, or copyright). Properties are optional information, and file reader and file writer implementations are not required to provide or recognize properties.</source>
          <target state="translated">&lt;code&gt;MidiFileFormat&lt;/code&gt; のオブジェクトは、プロパティのセットを含むことができます。プロパティはキーと値のペアです。キーは &lt;code&gt;String&lt;/code&gt; 型で、関連付けられているプロパティ値は任意のオブジェクトです。プロパティは、追加の情報メタデータ（著者や著作権など）を指定します。プロパティはオプションの情報であり、ファイルリーダーとファイルライターの実装は、プロパティを提供または認識する必要はありません。</target>
        </trans-unit>
        <trans-unit id="02bac295f8f072ec44d74de766e4927dd0a110af" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileFormat&lt;/code&gt; object encapsulates a MIDI file's type, as well as its length and timing information.</source>
          <target state="translated">A &lt;code&gt;MidiFileFormat&lt;/code&gt; ののオブジェクトは、MIDIファイルの種類だけでなく、その長さやタイミング情報をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="2b878e15bde87ac507d22902b909939ed90d36be" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileReader&lt;/code&gt; supplies MIDI file-reading services.</source>
          <target state="translated">&lt;code&gt;MidiFileReader&lt;/code&gt; はは、 MIDIファイル読み込みサービスを提供しています。</target>
        </trans-unit>
        <trans-unit id="63817d768f0fd5bd135044726715dc91b7d35f1f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileReader&lt;/code&gt; supplies MIDI file-reading services. Classes implementing this interface can parse the format information from one or more types of MIDI file, and can produce a &lt;a href=&quot;../sequence&quot;&gt;&lt;code&gt;Sequence&lt;/code&gt;&lt;/a&gt; object from files of these types.</source>
          <target state="translated">&lt;code&gt;MidiFileReader&lt;/code&gt; はは、 MIDIファイル読み込みサービスを提供しています。このインターフェイスを実装するクラスは、1つ以上のタイプのMIDIファイルからフォーマット情報を解析し、これらのタイプのファイルから&lt;a href=&quot;../sequence&quot;&gt; &lt;code&gt;Sequence&lt;/code&gt; &lt;/a&gt;オブジェクトを生成できます。</target>
        </trans-unit>
        <trans-unit id="18e0790864146b232d72e058bee3d2f1a5480e47" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileWriter&lt;/code&gt; supplies MIDI file-writing services.</source>
          <target state="translated">A &lt;code&gt;MidiFileWriter&lt;/code&gt; はは、 MIDIファイル書き込みサービスを提供します。</target>
        </trans-unit>
        <trans-unit id="586a7aeb0cbf6524813db1bd1765bcd6b1133f75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileWriter&lt;/code&gt; supplies MIDI file-writing services. Classes that implement this interface can write one or more types of MIDI file from a &lt;a href=&quot;../sequence&quot;&gt;&lt;code&gt;Sequence&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">A &lt;code&gt;MidiFileWriter&lt;/code&gt; はは、 MIDIファイル書き込みサービスを提供します。このインターフェイスを実装するクラスは、&lt;a href=&quot;../sequence&quot;&gt; &lt;code&gt;Sequence&lt;/code&gt; &lt;/a&gt;オブジェクトから1つ以上のタイプのMIDIファイルを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="f32314512dc1326f8c653bc76f3a7149e7754f8e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiUnavailableException&lt;/code&gt; is thrown when a requested MIDI component cannot be opened or created because it is unavailable.</source>
          <target state="translated">A &lt;code&gt;MidiUnavailableException&lt;/code&gt; は、それが使用できないため、要求されたMIDIコンポーネントが開いたり作成できない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="b7c94d4d663e27a735bb120381a0efbe34ba5992" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiUnavailableException&lt;/code&gt; is thrown when a requested MIDI component cannot be opened or created because it is unavailable. This often occurs when a device is in use by another application. More generally, it can occur when there is a finite number of a certain kind of resource that can be used for some purpose, and all of them are already in use (perhaps all by this application). For an example of the latter case, see the &lt;a href=&quot;transmitter#setReceiver-javax.sound.midi.Receiver-&quot;&gt;&lt;code&gt;setReceiver&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Transmitter&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;MidiUnavailableException&lt;/code&gt; は、それが使用できないため、要求されたMIDIコンポーネントが開いたり作成できない場合にスローされます。これは、デバイスが別のアプリケーションで使用されているときによく発生します。より一般的には、ある目的に使用できる特定の種類のリソースが有限であり、それらのすべてがすでに使用されている場合に発生する可能性があります（おそらくすべてこのアプリケーションによって）。後者の例については、 &lt;code&gt;Transmitter&lt;/code&gt; の&lt;a href=&quot;transmitter#setReceiver-javax.sound.midi.Receiver-&quot;&gt; &lt;code&gt;setReceiver&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="f288774a826422b9a89638b2ddfd02698e03d33c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MutableCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target variable behaves like an ordinary field.</source>
          <target state="translated">A &lt;code&gt;MutableCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲット変数通常のフィールドのように動作します。</target>
        </trans-unit>
        <trans-unit id="7dbbbebff1a773ccfef19e1f057066dee938b48b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MutableCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target variable behaves like an ordinary field. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;MutableCallSite&lt;/code&gt; delegates all calls to the site's current target. The &lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;dynamic invoker&lt;/a&gt; of a mutable call site also delegates each call to the site's current target.</source>
          <target state="translated">A &lt;code&gt;MutableCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲット変数通常のフィールドのように動作します。 &lt;code&gt;invokedynamic&lt;/code&gt; の命令は、にリンクされている &lt;code&gt;MutableCallSite&lt;/code&gt; の代表者、サイトの現在のターゲットへのすべての呼び出しを。変更可能な呼び出しサイトの&lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;動的呼び出し元&lt;/a&gt;も、各呼び出しをサイトの現在のターゲットに委任します。</target>
        </trans-unit>
        <trans-unit id="ddea2e9580b4e5b08cf0cb2cef7357024c227bdd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Name&lt;/code&gt; parameter passed to any method is owned by the caller. The service provider will not modify the object or keep a reference to it. A &lt;code&gt;ResolveResult&lt;/code&gt; object returned by any method is owned by the caller. The caller may subsequently modify it; the service provider may not.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 任意のメソッドに渡されるパラメータは、呼び出し側が所有しています。サービスプロバイダーは、オブジェクトを変更したり、オブジェクトへの参照を保持したりしません。 &lt;code&gt;ResolveResult&lt;/code&gt; のいずれかの方法で返されるオブジェクトは呼び出し側が所有しています。呼び出し元は後でそれを変更できます。サービスプロバイダーはそうしないかもしれません。</target>
        </trans-unit>
        <trans-unit id="f35879cc18f0c6f1e6c601de043d035821ee29c3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Name&lt;/code&gt; parameter passed to any method of the &lt;code&gt;Context&lt;/code&gt; interface or one of its subinterfaces will not be modified by the service provider. The service provider may keep a reference to it for the duration of the operation, including any enumeration of the method's results and the processing of any referrals generated. The caller should not modify the object during this time. A &lt;code&gt;Name&lt;/code&gt; returned by any such method is owned by the caller. The caller may subsequently modify it; the service provider may not.</source>
          <target state="translated">A &lt;code&gt;Name&lt;/code&gt; の任意のメソッドに渡されるパラメータ &lt;code&gt;Context&lt;/code&gt; インターフェイスまたはそのサブインターフェイスの一方は、サービスプロバイダによって変更されません。サービスプロバイダーは、メソッドの結果の列挙や生成されたリフェラルの処理など、オペレーションの実行中はそれへの参照を保持できます。この間、呼び出し元はオブジェクトを変更しないでください。このようなメソッドによって返される &lt;code&gt;Name&lt;/code&gt; は、呼び出し元が所有します。呼び出し元は後でそれを変更できます。サービスプロバイダーはそうしないかもしれません。</target>
        </trans-unit>
        <trans-unit id="26ae98ff07d84a581b94b546be70a1c3091b0550" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NavigableMap&lt;/code&gt; may be accessed and traversed in either ascending or descending key order. The &lt;code&gt;descendingMap&lt;/code&gt; method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods &lt;code&gt;subMap&lt;/code&gt;, &lt;code&gt;headMap&lt;/code&gt;, and &lt;code&gt;tailMap&lt;/code&gt; differ from the like-named &lt;code&gt;SortedMap&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any &lt;code&gt;NavigableMap&lt;/code&gt; must implement the &lt;code&gt;NavigableMap&lt;/code&gt; interface.</source>
          <target state="translated">A &lt;code&gt;NavigableMap&lt;/code&gt; のは、アクセスのいずれか昇順または降順キーの順序で横断することができます。 &lt;code&gt;descendingMap&lt;/code&gt; の方法は、反転すべてのリレーショナルと指向方法の感覚を持つ地図のビューを返します。昇順の操作とビューのパフォーマンスは、降順の操作とビューのパフォーマンスよりも速い可能性があります。メソッド &lt;code&gt;subMap&lt;/code&gt; 、 &lt;code&gt;headMap&lt;/code&gt; 、および &lt;code&gt;tailMap&lt;/code&gt; は、下限と上限が包括的であるか排他的であるかを記述する追加の引数を受け入れる点で、同じ名前の &lt;code&gt;SortedMap&lt;/code&gt; メソッドとは異なります。 &lt;code&gt;NavigableMap&lt;/code&gt; のサブマップは、 &lt;code&gt;NavigableMap&lt;/code&gt; インターフェースを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="c66d9145f89916cb5ca92325d0da454b29a1f136" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NetworkInterface&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if there is no network interface with the specified IP address.</source>
          <target state="translated">A &lt;code&gt;NetworkInterface&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; が指定したIPアドレスを持つネットワークインタフェースが存在しない場合。</target>
        </trans-unit>
        <trans-unit id="79e6780e84690e8bd58f9e8be9004880b83eab6d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NetworkInterface&lt;/code&gt; with the specified name, or &lt;code&gt;null&lt;/code&gt; if there is no network interface with the specified name.</source>
          <target state="translated">A &lt;code&gt;NetworkInterface&lt;/code&gt; 指定された名前、または持つ &lt;code&gt;null&lt;/code&gt; が指定された名前を持つネットワークインタフェースが存在しない場合。</target>
        </trans-unit>
        <trans-unit id="6fb26775a9fdcc1c3bf7e667ca62b4a0e3847451" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NotificationResult&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;NotificationResult&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="945c414a6ef8a9eb9ea267fe5c9e9ffbea32a062" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Number&lt;/code&gt; parsed from the string.</source>
          <target state="translated">A &lt;code&gt;Number&lt;/code&gt; 文字列から解析しました。</target>
        </trans-unit>
        <trans-unit id="07267f60c29eb956490162424a03b8eaa0ddf249" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Number&lt;/code&gt; parsed from the string. In case of error, returns null.</source>
          <target state="translated">A &lt;code&gt;Number&lt;/code&gt; 文字列から解析しました。エラーの場合、nullを返します。</target>
        </trans-unit>
        <trans-unit id="8a2e68373d50ce1993a491419ed8183f080a7dde" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; for checking the revocation status of certificates with the PKIX algorithm.</source>
          <target state="translated">PKIXアルゴリズムを使用して証明書の失効ステータスをチェックするための &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65b6019c9f6b36bf4a4374f0323b98058d8f83d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; may be called multiple times on successive certificates in a certification path. Concrete subclasses are expected to maintain any internal state that may be necessary to check successive certificates. The &lt;a href=&quot;pkixcertpathchecker#init-boolean-&quot;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/a&gt; method is used to initialize the internal state of the checker so that the certificates of a new certification path may be checked. A stateful implementation &lt;b&gt;must&lt;/b&gt; override the &lt;a href=&quot;pkixcertpathchecker#clone--&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; method if necessary in order to allow a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; to efficiently backtrack and try other paths. In these situations, the &lt;code&gt;CertPathBuilder&lt;/code&gt; is able to restore prior path validation states by restoring the cloned &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s.</source>
          <target state="translated">A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 証明書パス内の連続する証明書に複数回呼び出すことができます。具象サブクラスは、連続する証明書をチェックするために必要になる可能性のある内部状態を維持することが期待されています。&lt;a href=&quot;pkixcertpathchecker#init-boolean-&quot;&gt; &lt;code&gt;init&lt;/code&gt; &lt;/a&gt;メソッドは、新しい証明書パスの証明書を確認することができるようにチェッカーの内部状態を初期化するために使用されます。PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; が効率的にバックトラックして他のパスを試行できるようにするために、ステートフルな実装&lt;b&gt;は&lt;/b&gt;、必要に応じて&lt;a href=&quot;pkixcertpathchecker#clone--&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;メソッドをオーバーライドする&lt;b&gt;必要があり&lt;/b&gt;ます。これらの状況では、 &lt;code&gt;CertPathBuilder&lt;/code&gt; は、複製された &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; を復元することにより、以前のパス検証状態を復元できます。</target>
        </trans-unit>
        <trans-unit id="e2aa3cb94194902df1ddaeffd50bf581104fa46a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; checks the revocation status of certificates with the Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs). OCSP is described in RFC 2560 and is a network protocol for determining the status of a certificate. A CRL is a time-stamped list identifying revoked certificates, and RFC 5280 describes an algorithm for determining the revocation status of certificates using CRLs.</source>
          <target state="translated">A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; のチェック、オンライン証明書状態プロトコル（OCSP）または証明書失効リスト（CRL）と証明書の失効ステータスを。 OCSPはRFC 2560で説明されており、証明書のステータスを判別するためのネットワークプロトコルです。 CRLは、失効した証明書を識別するタイムスタンプ付きリストであり、RFC 5280は、CRLを使用して証明書の失効ステータスを決定するアルゴリズムを記述しています。</target>
        </trans-unit>
        <trans-unit id="968991d1ecee5d9aa89b891f287de7d1a71a88d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is obtained by calling the &lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt;&lt;code&gt;getRevocationChecker&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. Additional parameters and options specific to revocation can be set (by calling the &lt;a href=&quot;pkixrevocationchecker#setOcspResponder-java.net.URI-&quot;&gt;&lt;code&gt;setOcspResponder&lt;/code&gt;&lt;/a&gt; method for instance). The &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is added to a &lt;code&gt;PKIXParameters&lt;/code&gt; object using the &lt;a href=&quot;pkixparameters#addCertPathChecker-java.security.cert.PKIXCertPathChecker-&quot;&gt;&lt;code&gt;addCertPathChecker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pkixparameters#setCertPathCheckers-java.util.List-&quot;&gt;&lt;code&gt;setCertPathCheckers&lt;/code&gt;&lt;/a&gt; method, and then the &lt;code&gt;PKIXParameters&lt;/code&gt; is passed along with the &lt;code&gt;CertPath&lt;/code&gt; to be validated to the &lt;a href=&quot;certpathvalidator#validate-java.security.cert.CertPath-java.security.cert.CertPathParameters-&quot;&gt;&lt;code&gt;validate&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. When supplying a revocation checker in this manner, it will be used to check revocation irrespective of the setting of the &lt;a href=&quot;pkixparameters#isRevocationEnabled--&quot;&gt;&lt;code&gt;RevocationEnabled&lt;/code&gt;&lt;/a&gt; flag. Similarly, a &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; may be added to a &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; object for use with a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; を呼び出すことによって取得された&lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt; &lt;code&gt;getRevocationChecker&lt;/code&gt; の&lt;/a&gt; PKIXの方法 &lt;code&gt;CertPathValidator&lt;/code&gt; 。失効に固有の追加のパラメーターとオプションを設定できます（たとえば、&lt;a href=&quot;pkixrevocationchecker#setOcspResponder-java.net.URI-&quot;&gt; &lt;code&gt;setOcspResponder&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより）。 &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; はに追加さ &lt;code&gt;PKIXParameters&lt;/code&gt; の使用して、オブジェクト&lt;a href=&quot;pkixparameters#addCertPathChecker-java.security.cert.PKIXCertPathChecker-&quot;&gt; &lt;code&gt;addCertPathChecker&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;pkixparameters#setCertPathCheckers-java.util.List-&quot;&gt; &lt;code&gt;setCertPathCheckers&lt;/code&gt; &lt;/a&gt;方法を、次に &lt;code&gt;PKIXParameters&lt;/code&gt; のは一緒に渡される &lt;code&gt;CertPath&lt;/code&gt; を検証する&lt;a href=&quot;certpathvalidator#validate-java.security.cert.CertPath-java.security.cert.CertPathParameters-&quot;&gt; &lt;code&gt;validate&lt;/code&gt; &lt;/a&gt; PKIXの方法 &lt;code&gt;CertPathValidator&lt;/code&gt; 。この方法で失効チェッカーを指定すると、&lt;a href=&quot;pkixparameters#isRevocationEnabled--&quot;&gt; &lt;code&gt;RevocationEnabled&lt;/code&gt; &lt;/a&gt;フラグの設定に関係なく、失効チェッカーを使用して失効をチェックします。同様に、 &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; は、PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; で使用するために &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; オブジェクトに追加できます。</target>
        </trans-unit>
        <trans-unit id="44d5dff505605889de7a5e58ef3f8444907a95a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Patch&lt;/code&gt; object represents a location, on a MIDI synthesizer, into which a single instrument is stored (loaded).</source>
          <target state="translated">&lt;code&gt;Patch&lt;/code&gt; オブジェクトは、単一の器具が（ロード）格納されるMIDIシンセサイザに、位置を表します。</target>
        </trans-unit>
        <trans-unit id="2bade130cacfd73a6662dacf0beb86afa67968ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Patch&lt;/code&gt; object represents a location, on a MIDI synthesizer, into which a single instrument is stored (loaded). Every &lt;code&gt;Instrument&lt;/code&gt; object has its own &lt;code&gt;Patch&lt;/code&gt; object that specifies the memory location into which that instrument should be loaded. The location is specified abstractly by a bank index and a program number (not by any scheme that directly refers to a specific address or offset in RAM). This is a hierarchical indexing scheme: MIDI provides for up to 16384 banks, each of which contains up to 128 program locations. For example, a minimal sort of synthesizer might have only one bank of instruments, and only 32 instruments (programs) in that bank.</source>
          <target state="translated">&lt;code&gt;Patch&lt;/code&gt; オブジェクトは、単一の器具が（ロード）格納されるMIDIシンセサイザに、位置を表します。すべての &lt;code&gt;Instrument&lt;/code&gt; オブジェクトには、そのインストゥルメントをロードするメモリの場所を指定する独自の &lt;code&gt;Patch&lt;/code&gt; オブジェクトがあります。ロケーションは、バンクインデックスとプログラム番号によって抽象的に指定されます（RAM内の特定のアドレスまたはオフセットを直接参照するスキームではありません）。これは階層的なインデックススキーマです。MIDIは最大16384のバンクを提供し、各バンクには最大128のプログラムロケーションが含まれます。たとえば、最小限の種類のシンセサイザは、1つのバンクのインストゥルメントと、そのバンク内の32のインストゥルメント（プログラム）のみを持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="320c0383b6ba27539a9291c5c08457dac6be0ca9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Path&lt;/code&gt; represents a path that is hierarchical and composed of a sequence of directory and file name elements separated by a special separator or delimiter. A &lt;em&gt;root component&lt;/em&gt;, that identifies a file system hierarchy, may also be present. The name element that is &lt;em&gt;farthest&lt;/em&gt; from the root of the directory hierarchy is the name of a file or directory. The other name elements are directory names. A &lt;code&gt;Path&lt;/code&gt; can represent a root, a root and a sequence of names, or simply one or more name elements. A &lt;code&gt;Path&lt;/code&gt; is considered to be an</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 階層と特殊セパレータまたは区切り文字で区切られたディレクトリとファイル名の要素の配列で構成されているパスを表します。&lt;em&gt;ルートコンポーネント&lt;/em&gt;、ことを識別するファイルシステム階層は、存在してもよいです。ディレクトリ階層のルートから&lt;em&gt;最も遠い&lt;/em&gt;名前要素は、ファイルまたはディレクトリの名前です。他の名前要素はディレクトリ名です。 &lt;code&gt;Path&lt;/code&gt; 根、根や名前、または単に一つ以上のname要素の順序を表すことができます。 &lt;code&gt;Path&lt;/code&gt; あると考えられています</target>
        </trans-unit>
        <trans-unit id="2e056d8aeb0d2e80640b4c47fd934931fffc6852" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Phaser&lt;/code&gt; may be used instead of a &lt;code&gt;CountDownLatch&lt;/code&gt; to control a one-shot action serving a variable number of parties. The typical idiom is for the method setting this up to first register, then start the actions, then deregister, as in:</source>
          <target state="translated">A &lt;code&gt;Phaser&lt;/code&gt; 代わりに使用されてもよい &lt;code&gt;CountDownLatch&lt;/code&gt; 当事者の可変数をサービングワンショット動作を制御します。典型的なイディオムは、これを最初に登録し、次にアクションを開始し、次に登録解除するまでの設定方法です。</target>
        </trans-unit>
        <trans-unit id="7ba4fc27c0a519f672a4f2b0dd3490e89f4c6ed3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Policy&lt;/code&gt; contains the following information. Note that this example only represents the syntax for the default &lt;code&gt;Policy&lt;/code&gt; implementation. Subclass implementations of this class may implement alternative syntaxes and may retrieve the &lt;code&gt;Policy&lt;/code&gt; from any source such as files, databases, or servers.</source>
          <target state="translated">A &lt;code&gt;Policy&lt;/code&gt; 、以下の情報が含まれています。この例は、デフォルトの &lt;code&gt;Policy&lt;/code&gt; 実装の構文のみを表していることに注意してください。このクラスのサブクラス実装は、代替構文を実装し、ファイル、データベース、サーバーなどの任意のソースから &lt;code&gt;Policy&lt;/code&gt; を取得できます。</target>
        </trans-unit>
        <trans-unit id="c551493ea204607c260d63a76232db5f1422e1c4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Policy&lt;/code&gt; object can be queried for the set of Permissions granted to code running as a &lt;code&gt;Principal&lt;/code&gt; in the following manner:</source>
          <target state="translated">&lt;code&gt;Policy&lt;/code&gt; オブジェクトは、として実行コードに付与されたアクセス権のセットを照会することができる &lt;code&gt;Principal&lt;/code&gt; 次のように：</target>
        </trans-unit>
        <trans-unit id="0e6789762086fb624373b893ae1c639a188c341e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Principal&lt;/code&gt; representing an identity used to determine access rights to objects in a file system.</source>
          <target state="translated">&lt;code&gt;Principal&lt;/code&gt; ファイルシステム内のオブジェクトへのアクセス権を決定するために使用するIDを表します。</target>
        </trans-unit>
        <trans-unit id="edc93fd469a7b3a042919a5e86d89ac76d6a2eda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintStream&lt;/code&gt; adds functionality to another output stream, namely the ability to print representations of various data values conveniently.</source>
          <target state="translated">A &lt;code&gt;PrintStream&lt;/code&gt; 別の出力ストリーム、便利に各種データ値の表現を印刷する、すなわち能力に機能を追加します。</target>
        </trans-unit>
        <trans-unit id="9172fc92bd31a6e2c58b2c9e1a5b0568f5d5fe89" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintStream&lt;/code&gt; adds functionality to another output stream, namely the ability to print representations of various data values conveniently. Two other features are provided as well. Unlike other output streams, a &lt;code&gt;PrintStream&lt;/code&gt; never throws an &lt;code&gt;IOException&lt;/code&gt;; instead, exceptional situations merely set an internal flag that can be tested via the &lt;code&gt;checkError&lt;/code&gt; method. Optionally, a &lt;code&gt;PrintStream&lt;/code&gt; can be created so as to flush automatically; this means that the &lt;code&gt;flush&lt;/code&gt; method is automatically invoked after a byte array is written, one of the &lt;code&gt;println&lt;/code&gt; methods is invoked, or a newline character or byte (&lt;code&gt;'\n'&lt;/code&gt;) is written.</source>
          <target state="translated">A &lt;code&gt;PrintStream&lt;/code&gt; 別の出力ストリーム、便利に各種データ値の表現を印刷する、すなわち能力に機能を追加します。他の2つの機能も提供されています。他の出力ストリームとは異なり、 &lt;code&gt;PrintStream&lt;/code&gt; は &lt;code&gt;IOException&lt;/code&gt; をスローしません。代わりに、例外的な状況では、単に &lt;code&gt;checkError&lt;/code&gt; メソッドでテストできる内部フラグを設定します。オプションで、自動的にフラッシュするように &lt;code&gt;PrintStream&lt;/code&gt; を作成できます。つまり、バイト配列が書き込まれた後、 &lt;code&gt;println&lt;/code&gt; メソッドの1つが呼び出された後、または改行文字またはバイト（ &lt;code&gt;'\n'&lt;/code&gt; ）が書き込まれた後に、 &lt;code&gt;flush&lt;/code&gt; メソッドが自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="43af3e934c517c608a5c379e17c1f394d58aea3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PropertyChangeSupport&lt;/code&gt; instance is thread-safe.</source>
          <target state="translated">&lt;code&gt;PropertyChangeSupport&lt;/code&gt; のインスタンスは、スレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="498529e0c6968af51d25a65d16502b51019d6bb2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; one byte.</source>
          <target state="translated">A &lt;code&gt;PushbackInputStream&lt;/code&gt; は、ほかの入力ストリーム、「プッシュバック」または「未読」の1つのバイトに機能を追加します。</target>
        </trans-unit>
        <trans-unit id="5f514d5e2008c6e74c443994d842ab05a6d27a76" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; one byte. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can &quot;unread&quot; it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read.</source>
          <target state="translated">A &lt;code&gt;PushbackInputStream&lt;/code&gt; は、ほかの入力ストリーム、「プッシュバック」または「未読」の1つのバイトに機能を追加します。これは、コードのフラグメントが特定のバイト値で区切られた無制限の数のデータバイトを読み取るのに便利な状況で役立ちます。終了バイトを読み取った後、コードフラグメントはそれを「未読」にできるため、入力ストリームでの次の読み取り操作は、プッシュバックされたバイトを再読み取りします。たとえば、識別子を構成する文字を表すバイトは、演算子文字を表すバイトで終了する場合があります。識別子だけを読み取ることを目的とするメソッドは、オペレーターが見えるまで読み取ることができ、オペレーターを押し戻して再度読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="58bb4d4e29ec77b52a73e79c2c7ec5fcb02deb1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Queue&lt;/code&gt; implementation that extends this class must minimally define a method &lt;a href=&quot;queue#offer-E-&quot;&gt;&lt;code&gt;Queue.offer(E)&lt;/code&gt;&lt;/a&gt; which does not permit insertion of &lt;code&gt;null&lt;/code&gt; elements, along with methods &lt;a href=&quot;queue#peek--&quot;&gt;&lt;code&gt;Queue.peek()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;queue#poll--&quot;&gt;&lt;code&gt;Queue.poll()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;collection#size--&quot;&gt;&lt;code&gt;Collection.size()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;collection#iterator--&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt;. Typically, additional methods will be overridden as well. If these requirements cannot be met, consider instead subclassing &lt;a href=&quot;abstractcollection&quot;&gt;&lt;code&gt;AbstractCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスを拡張する &lt;code&gt;Queue&lt;/code&gt; 実装では、メソッド&lt;a href=&quot;queue#peek--&quot;&gt; &lt;code&gt;Queue.peek()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;queue#poll--&quot;&gt; &lt;code&gt;Queue.poll()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;collection#size--&quot;&gt; &lt;code&gt;Collection.size()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;collection#iterator--&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt;とともに、 &lt;code&gt;null&lt;/code&gt; 要素の挿入を許可しないメソッド&lt;a href=&quot;queue#offer-E-&quot;&gt; &lt;code&gt;Queue.offer(E)&lt;/code&gt; &lt;/a&gt;を最低限定義する必要があります.iterator（）。通常、追加のメソッドもオーバーライドされます。これらの要件を満たすことができない場合は、代わりに&lt;a href=&quot;abstractcollection&quot;&gt; &lt;code&gt;AbstractCollection&lt;/code&gt; &lt;/a&gt;をサブクラス化することを検討してください。</target>
        </trans-unit>
        <trans-unit id="def3b6f50120461d8708c238f889d3f9cd108135" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReadWriteLock&lt;/code&gt; maintains a pair of associated &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;locks&lt;/code&gt;&lt;/a&gt;, one for read-only operations and one for writing.</source>
          <target state="translated">A &lt;code&gt;ReadWriteLock&lt;/code&gt; は、関連する一対の保持&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;locks&lt;/code&gt; &lt;/a&gt;、読取り専用操作用と書き込みのための1つを。</target>
        </trans-unit>
        <trans-unit id="3a5c3d06115aa28aff29d5534c6fc5941725a3a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReadWriteLock&lt;/code&gt; maintains a pair of associated &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;locks&lt;/code&gt;&lt;/a&gt;, one for read-only operations and one for writing. The &lt;a href=&quot;readwritelock#readLock--&quot;&gt;&lt;code&gt;read lock&lt;/code&gt;&lt;/a&gt; may be held simultaneously by multiple reader threads, so long as there are no writers. The &lt;a href=&quot;readwritelock#writeLock--&quot;&gt;&lt;code&gt;write lock&lt;/code&gt;&lt;/a&gt; is exclusive.</source>
          <target state="translated">A &lt;code&gt;ReadWriteLock&lt;/code&gt; は、関連する一対の保持&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;locks&lt;/code&gt; &lt;/a&gt;、読取り専用操作用と書き込みのための1つを。&lt;a href=&quot;readwritelock#readLock--&quot;&gt; &lt;code&gt;read lock&lt;/code&gt; &lt;/a&gt;限りない作家が存在しないように、複数のリーダースレッドにより同時に保持することができます。&lt;a href=&quot;readwritelock#writeLock--&quot;&gt; &lt;code&gt;write lock&lt;/code&gt; &lt;/a&gt;排他的です。</target>
        </trans-unit>
        <trans-unit id="a4ba4d2f544963239cdad0d5889d9b75a3868aa7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Readable&lt;/code&gt; is a source of characters.</source>
          <target state="translated">A &lt;code&gt;Readable&lt;/code&gt; 文字のソースです。</target>
        </trans-unit>
        <trans-unit id="96d71823f195cce50e0a0e598590732b249e1579" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Readable&lt;/code&gt; is a source of characters. Characters from a &lt;code&gt;Readable&lt;/code&gt; are made available to callers of the read method via a &lt;a href=&quot;../nio/charbuffer&quot;&gt;&lt;code&gt;CharBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;Readable&lt;/code&gt; 文字のソースです。 &lt;code&gt;Readable&lt;/code&gt; の文字は、&lt;a href=&quot;../nio/charbuffer&quot;&gt; &lt;code&gt;CharBuffer&lt;/code&gt; &lt;/a&gt;を介してreadメソッドの呼び出し元が利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="f19fa51699f4a664e93d7e5f550006586f58badc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output.</source>
          <target state="translated">A &lt;code&gt;Receiver&lt;/code&gt; 受信 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトを、通常、このような音や、生のMIDI出力を生成するためにそれらを解釈するよう、応答に便利な何かをします。</target>
        </trans-unit>
        <trans-unit id="c29d462e6a52ab2259a7447d7f75c8ca3d531769" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output. Common MIDI receivers include synthesizers and MIDI Out ports.</source>
          <target state="translated">A &lt;code&gt;Receiver&lt;/code&gt; 受信 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトを、通常、このような音や、生のMIDI出力を生成するためにそれらを解釈するよう、応答に便利な何かをします。一般的なMIDIレシーバーには、シンセサイザーとMIDI出力ポートが含まれます。</target>
        </trans-unit>
        <trans-unit id="a466154e254c73452531856243b05c8548e2667c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReentrantLock&lt;/code&gt; is &lt;em&gt;owned&lt;/em&gt; by the thread last successfully locking, but not yet unlocking it. A thread invoking &lt;code&gt;lock&lt;/code&gt; will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods &lt;a href=&quot;reentrantlock#isHeldByCurrentThread--&quot;&gt;&lt;code&gt;isHeldByCurrentThread()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;reentrantlock#getHoldCount--&quot;&gt;&lt;code&gt;getHoldCount()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;ReentrantLock&lt;/code&gt; のがされて&lt;em&gt;所有している&lt;/em&gt;最後に正常にロックするスレッドが、まだそれをアンロックません。 &lt;code&gt;lock&lt;/code&gt; を呼び出しているスレッドは、ロックが別のスレッドによって所有されていない場合に戻り、ロックを正常に取得します。現在のスレッドがすでにロックを所有している場合、メソッドはすぐに戻ります。これは、方法を使用して確認することができ&lt;a href=&quot;reentrantlock#isHeldByCurrentThread--&quot;&gt; &lt;code&gt;isHeldByCurrentThread()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;reentrantlock#getHoldCount--&quot;&gt; &lt;code&gt;getHoldCount()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6faecf013e62df9ef640102b4e068feb15415a8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ResourceBundle.Control&lt;/code&gt; instance must be thread-safe if it's simultaneously used by multiple threads. &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; does not synchronize to call the &lt;code&gt;ResourceBundle.Control&lt;/code&gt; methods. The default implementations of the methods are thread-safe.</source>
          <target state="translated">&lt;code&gt;ResourceBundle.Control&lt;/code&gt; のそれは同時に複数のスレッドで使われている場合、インスタンスは、スレッドセーフでなければなりません。 &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; は、 &lt;code&gt;ResourceBundle.Control&lt;/code&gt; メソッドを呼び出すために同期しません。メソッドのデフォルトの実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="278799dac47bdb1e5dd43e1ae79d07011ec7107d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Result&lt;/code&gt; containing the object's state for binding and the corresponding attributes to be bound; null if the object don't use this factory.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; 結合のためにオブジェクトの状態を含む、対応する属性が拘束されることに。オブジェクトがこのファクトリを使用しない場合はnull。</target>
        </trans-unit>
        <trans-unit id="13cffffbd34d388f3bda9e47c2411e5450931db5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLEngine&lt;/code&gt; provides a means for establishing secure communication sessions between two peers. &lt;code&gt;SSLEngine&lt;/code&gt; operations typically consume bytes from an input buffer and produce bytes in an output buffer. This class provides operational result values describing the state of the &lt;code&gt;SSLEngine&lt;/code&gt;, including indications of what operations are needed to finish an ongoing handshake. Lastly, it reports the number of bytes consumed and produced as a result of this operation.</source>
          <target state="translated">A &lt;code&gt;SSLEngine&lt;/code&gt; のは、 2つのピア間の安全な通信セッションを確立するための手段を提供します。 &lt;code&gt;SSLEngine&lt;/code&gt; 操作は通常、入力バッファーからバイトを消費し、出力バッファーにバイトを生成します。このクラスは、進行中のハンドシェイクを完了するために必要な操作の指示など、 &lt;code&gt;SSLEngine&lt;/code&gt; の状態を説明する操作結果値を提供します。最後に、この操作の結果として消費および生成されたバイト数を報告します。</target>
        </trans-unit>
        <trans-unit id="be5086a8a2a67512afd14b8d89179cdc1c7714b2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLEngine&lt;/code&gt; using this session may generate SSL/TLS packets of any size up to and including the value returned by this method. All &lt;code&gt;SSLEngine&lt;/code&gt; network buffers should be sized at least this large to avoid insufficient space problems when performing &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;unwrap&lt;/code&gt; calls.</source>
          <target state="translated">このセッションを使用する &lt;code&gt;SSLEngine&lt;/code&gt; は、このメソッドによって返される値までの任意のサイズのSSL / TLSパケットを生成できます。すべての &lt;code&gt;SSLEngine&lt;/code&gt; ネットワークバッファーのサイズは、 &lt;code&gt;wrap&lt;/code&gt; と &lt;code&gt;unwrap&lt;/code&gt; 呼び出しを実行するときのスペース不足の問題を回避するために、少なくともこの大きさにする必要があります。</target>
        </trans-unit>
        <trans-unit id="e9f67ce9dc7b53b9f6147aebe912ac7694d345ac" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLSessionContext&lt;/code&gt; represents a set of &lt;code&gt;SSLSession&lt;/code&gt;s associated with a single entity.</source>
          <target state="translated">A &lt;code&gt;SSLSessionContext&lt;/code&gt; には、一組を表し &lt;code&gt;SSLSession&lt;/code&gt; の単一のエンティティに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="ad116e37518384a6f8fd1b681641d4d1a4337f0d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLSessionContext&lt;/code&gt; represents a set of &lt;code&gt;SSLSession&lt;/code&gt;s associated with a single entity. For example, it could be associated with a server or client who participates in many sessions concurrently.</source>
          <target state="translated">A &lt;code&gt;SSLSessionContext&lt;/code&gt; には、一組を表し &lt;code&gt;SSLSession&lt;/code&gt; の単一のエンティティに関連付けられています。たとえば、同時に多くのセッションに参加するサーバーまたはクライアントに関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="df191139b688447435814cf148062bb1f416f974" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SampleModel&lt;/code&gt; to be used as a prototype.</source>
          <target state="translated">A &lt;code&gt;SampleModel&lt;/code&gt; プロトタイプとして使用されます。</target>
        </trans-unit>
        <trans-unit id="eb176b2751507777548bce49c3daa1e4bf12d3a7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Scanner&lt;/code&gt; breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various &lt;code&gt;next&lt;/code&gt; methods.</source>
          <target state="translated">A &lt;code&gt;Scanner&lt;/code&gt; 、デフォルトでは空白と一致する区切りパターンを使用してトークンにその入力を破ります。結果のトークンは、さまざまな &lt;code&gt;next&lt;/code&gt; メソッドを使用して、異なるタイプの値に変換できます。</target>
        </trans-unit>
        <trans-unit id="d2ae5d01da91681b0e09f5bf993b02ff3d8c51d8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Scanner&lt;/code&gt; is not safe for multithreaded use without external synchronization.</source>
          <target state="translated">A &lt;code&gt;Scanner&lt;/code&gt; 外部同期せずにマルチスレッドを使用するのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="7114063e1218883537734c8807826b78fa2867d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ScriptEngine&lt;/code&gt; created by the factory located in the search. Returns null if no such factory was found. The &lt;code&gt;ScriptEngineManager&lt;/code&gt; sets its own &lt;code&gt;globalScope&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; as the &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; of the newly created &lt;code&gt;ScriptEngine&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;ScriptEngine&lt;/code&gt; のは検索にある工場で作成されました。そのようなファクトリが見つからなかった場合はnullを返します。 &lt;code&gt;ScriptEngineManager&lt;/code&gt; は、独自の設定 &lt;code&gt;globalScope&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; よう &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; 新しく作成されたの &lt;code&gt;ScriptEngine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6db977adc07c1fec67a733e8feec882a1d25224d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SearchControls&lt;/code&gt; or array object passed as a parameter to any method is owned by the caller. The service provider will not modify the object or keep a reference to it.</source>
          <target state="translated">&lt;code&gt;SearchControls&lt;/code&gt; の任意の方法のパラメーターは、発信者によって所有されているように、または配列オブジェクトが渡されます。サービスプロバイダーは、オブジェクトを変更したり、オブジェクトへの参照を保持したりしません。</target>
        </trans-unit>
        <trans-unit id="a29b101451e61fce98157bb2ee58c4b375379b8a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; requires corresponding support from the underlying operating system. Where an implementation supports this features then the &lt;code&gt;DirectoryStream&lt;/code&gt; returned by the &lt;a href=&quot;files#newDirectoryStream-java.nio.file.Path-&quot;&gt;&lt;code&gt;newDirectoryStream&lt;/code&gt;&lt;/a&gt; method will be a &lt;code&gt;SecureDirectoryStream&lt;/code&gt; and must be cast to that type in order to invoke the methods defined by this interface.</source>
          <target state="translated">A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; は、基礎となるオペレーティングシステムから対応するサポートが必要です。実装がこの機能をサポートしている場合、&lt;a href=&quot;files#newDirectoryStream-java.nio.file.Path-&quot;&gt; &lt;code&gt;newDirectoryStream&lt;/code&gt; &lt;/a&gt;メソッドによって返される &lt;code&gt;DirectoryStream&lt;/code&gt; は &lt;code&gt;SecureDirectoryStream&lt;/code&gt; であり、このインターフェイスによって定義されたメソッドを呼び出すために、その型にキャストする必要があります。</target>
        </trans-unit>
        <trans-unit id="1348b96b1f9cb55e6c7bc102d126076ba48c8171" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is raised if &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; but accessibility of any of the elements of the input &lt;code&gt;array&lt;/code&gt; may not be changed (for example, if the element object is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;a href=&quot;../class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;). In the event of such a SecurityException, the accessibility of objects is set to &lt;code&gt;flag&lt;/code&gt; for array elements upto (and excluding) the element for which the exception occurred; the accessibility of elements beyond (and including) the element for which the exception occurred is unchanged.</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; があれば上昇する &lt;code&gt;flag&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; が、入力の要素の任意のアクセシビリティ &lt;code&gt;array&lt;/code&gt; （要素オブジェクトである場合、例えば、変更されないことが&lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt;クラスのオブジェクト&lt;a href=&quot;../class&quot;&gt; &lt;code&gt;Class&lt;/code&gt; &lt;/a&gt;）。そのようなSecurityExceptionが発生した場合、オブジェクトのアクセス可能性は、例外が発生した要素まで（および除外する）配列要素に &lt;code&gt;flag&lt;/code&gt; を立てるように設定されます。例外が発生した要素を超えた（およびそれを含む）要素のアクセシビリティは変更されません。</target>
        </trans-unit>
        <trans-unit id="91d4909b78a699d458ff1b4c6a25ff1e864934b3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is raised if &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; but accessibility of this object may not be changed (for example, if this element object is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;a href=&quot;../class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; があれば上昇する &lt;code&gt;flag&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; なく（この要素オブジェクトがある場合、例えば、このオブジェクトのアクセシビリティが変更されないことが&lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt;クラスのオブジェクト&lt;a href=&quot;../class&quot;&gt; &lt;code&gt;Class&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="be2d43eca8667b1e0a7c0bbdfd5cbe7046d51e49" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is raised if this object is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;code&gt;java.lang.Class&lt;/code&gt;, and &lt;code&gt;flag&lt;/code&gt; is true.</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; がこのオブジェクトがある場合に上昇する&lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt;クラスのオブジェクト &lt;code&gt;java.lang.Class&lt;/code&gt; 、及び &lt;code&gt;flag&lt;/code&gt; 真です。</target>
        </trans-unit>
        <trans-unit id="47f1ccb99f3622c1d1fbee26066775abbdd89280" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; can be created from a MIDI file by reading the file into an input stream and invoking one of the &lt;code&gt;getSequence&lt;/code&gt; methods of &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;. A sequence can also be built from scratch by adding new &lt;code&gt;Tracks&lt;/code&gt; to an empty &lt;code&gt;Sequence&lt;/code&gt;, and adding &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects to these &lt;code&gt;Tracks&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; 入力ストリームにファイルを読み込むとの一方呼び出すことによって、MIDIファイルから作成することができる &lt;code&gt;getSequence&lt;/code&gt; の方法&lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; &lt;/a&gt;。空の &lt;code&gt;Sequence&lt;/code&gt; 新しい &lt;code&gt;Tracks&lt;/code&gt; を追加し、これらの &lt;code&gt;Tracks&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトを追加することにより、シーケンスを最初から作成することもできます。</target>
        </trans-unit>
        <trans-unit id="92987c7d586485713ab01347ccc93734161b144f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; で再生可能な音楽情報を含むデータ構造（多くの場合、曲全体または組成物）である &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="c03b7c1f7021273b40415a3aaea4dcc1f735d836" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object. Specifically, the &lt;code&gt;Sequence&lt;/code&gt; contains timing information and one or more tracks. Each &lt;code&gt;&lt;a href=&quot;track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; consists of a series of MIDI events (such as note-ons, note-offs, program changes, and meta-events). The sequence's timing information specifies the type of unit that is used to time-stamp the events in the sequence.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; で再生可能な音楽情報を含むデータ構造（多くの場合、曲全体または組成物）である &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクト。具体的には、 &lt;code&gt;Sequence&lt;/code&gt; はタイミング情報と1つ以上のトラックが含まれます。各 &lt;code&gt;&lt;a href=&quot;track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; は、一連のMIDIイベント（ノートオン、ノートオフ、プログラムの変更、メタイベントなど）で構成されています。シーケンスのタイミング情報は、シーケンス内のイベントにタイムスタンプを付けるために使用されるユニットのタイプを指定します。</target>
        </trans-unit>
        <trans-unit id="53ae5e222af53133bd2c9490689f333c8858ecfa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SequenceInputStream&lt;/code&gt; represents the logical concatenation of other input streams.</source>
          <target state="translated">A &lt;code&gt;SequenceInputStream&lt;/code&gt; 他の入力ストリームの論理的連結を表します。</target>
        </trans-unit>
        <trans-unit id="5dfc24617c0471997ddeb447ae28a22a21b8674a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SequenceInputStream&lt;/code&gt; represents the logical concatenation of other input streams. It starts out with an ordered collection of input streams and reads from the first one until end of file is reached, whereupon it reads from the second one, and so on, until end of file is reached on the last of the contained input streams.</source>
          <target state="translated">A &lt;code&gt;SequenceInputStream&lt;/code&gt; 他の入力ストリームの論理的連結を表します。これは、入力ストリームの順序付けられたコレクションから始まり、ファイルの終わりに達するまで最初のストリームから読み取り、次に2番目のストリームから読み取り、以下同様に、含まれている入力ストリームの最後でファイルの終わりに達するまで読み取ります。</target>
        </trans-unit>
        <trans-unit id="664c53380d8546663274983ecf83d6c0d77d55fb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; objects are returned by the &lt;a href=&quot;policynode#getPolicyQualifiers--&quot;&gt;&lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt;&lt;/a&gt; method. This allows applications with specific policy requirements to process and validate each policy qualifier. Applications that need to process policy qualifiers should explicitly set the &lt;code&gt;policyQualifiersRejected&lt;/code&gt; flag to false (by calling the &lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected-boolean-&quot;&gt;&lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt;&lt;/a&gt; method) before validating a certification path.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; の &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; のオブジェクトがによって返される&lt;a href=&quot;policynode#getPolicyQualifiers--&quot;&gt; &lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt; の&lt;/a&gt;方法。これにより、特定のポリシー要件を持つアプリケーションが各ポリシー修飾子を処理および検証できます。ポリシー修飾子を処理する必要があるアプリケーションは、証明書パスを検証する前に、（&lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected-boolean-&quot;&gt; &lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより） &lt;code&gt;policyQualifiersRejected&lt;/code&gt; フラグを明示的にfalseに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="9e26bc246691b598cf4b4baea9dbd4941f31b126" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of private credentials held by this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 、この保持する非公開資格の &lt;code&gt;Subject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25ecf6c13358fd6c3988492153f2ca66c0a7c09d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of public credentials held by this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 、この保持する公開資格の &lt;code&gt;Subject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e76fcba29fd4a12c2249595d7807514ece699ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ShortMessage&lt;/code&gt; contains a MIDI message that has at most two data bytes following its status byte.</source>
          <target state="translated">A &lt;code&gt;ShortMessage&lt;/code&gt; には、ステータスバイトを次のバイト、最大で二つのデータを持っているMIDIメッセージが含まれています。</target>
        </trans-unit>
        <trans-unit id="332caac10175dbc76add8475e7dbeca6d7617182" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ShortMessage&lt;/code&gt; contains a MIDI message that has at most two data bytes following its status byte. The types of MIDI message that satisfy this criterion are channel voice, channel mode, system common, and system real-time--in other words, everything except system exclusive and meta-events. The &lt;code&gt;ShortMessage&lt;/code&gt; class provides methods for getting and setting the contents of the MIDI message.</source>
          <target state="translated">A &lt;code&gt;ShortMessage&lt;/code&gt; には、ステータスバイトを次のバイト、最大で二つのデータを持っているMIDIメッセージが含まれています。この基準を満たすMIDIメッセージのタイプは、チャネルボイス、チャネルモード、システムコモン、およびシステムリアルタイムです。つまり、システムエクスクルーシブとメタイベントを除くすべてです。 &lt;code&gt;ShortMessage&lt;/code&gt; クラスは、MIDIメッセージの内容を取得および設定するための方法を提供します。</target>
        </trans-unit>
        <trans-unit id="fd52f6852258fb45d0465f21689b2a061df0bff2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SimpleScriptContext&lt;/code&gt; is used as the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;AbstractScriptEngine&lt;/code&gt;..</source>
          <target state="translated">A &lt;code&gt;SimpleScriptContext&lt;/code&gt; がデフォルトとして使用され &lt;code&gt;ScriptContext&lt;/code&gt; の &lt;code&gt;AbstractScriptEngine&lt;/code&gt; ..</target>
        </trans-unit>
        <trans-unit id="a5555cfa3e24e81ee173481d7b51680cf89e298b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SimpleScriptContext&lt;/code&gt; returned by this method is used to implement eval methods using the abstract &lt;code&gt;eval(Reader,Bindings)&lt;/code&gt; and &lt;code&gt;eval(String,Bindings)&lt;/code&gt; versions.</source>
          <target state="translated">A &lt;code&gt;SimpleScriptContext&lt;/code&gt; は抽象用いて評価方法を実施するために使用され、このメソッドによって返される &lt;code&gt;eval(Reader,Bindings)&lt;/code&gt; と &lt;code&gt;eval(String,Bindings)&lt;/code&gt; バージョン。</target>
        </trans-unit>
        <trans-unit id="be41add239b970c680e56068d4ab46a2a90a5a84" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is mapped in the same way, but it is only convertible if &lt;em&gt;K&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedMap&lt;/code&gt; instance will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../java/util/sortedmap#comparator--&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; と同じ方法でマッピングされているが、場合にのみ変換可能である&lt;em&gt;Kが&lt;/em&gt;実装するクラスまたはインタフェースである&lt;a href=&quot;../../java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt;。したがって、 &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; は変換可能 &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; が、SortedMap &amp;lt;int []、String&amp;gt;は変換できません。 &lt;code&gt;SortedMap&lt;/code&gt; インスタンスの変換は、null以外の&lt;a href=&quot;../../java/util/sortedmap#comparator--&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt;がある場合、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="eba384ea4c59a220657b695b8a65869443ab17b0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is also mapped in the same way as an &lt;em&gt;E&lt;/em&gt;&lt;code&gt;[]&lt;/code&gt;, but it is only convertible if &lt;em&gt;E&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedSet&lt;/code&gt; instance will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../java/util/sortedset#comparator--&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt; &lt;em&gt;Eは&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; また、同じ方法でマッピングされる&lt;em&gt;E &lt;/em&gt; &lt;code&gt;[]&lt;/code&gt; 、しかし場合にのみ変換可能であり&lt;em&gt;、Eは&lt;/em&gt;、クラスまたはインタフェースが実装されていること&lt;a href=&quot;../../java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt;。したがって、 &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; または &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; は変換可能ですが、 &lt;code&gt;SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; または &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; は変換できません。 &lt;code&gt;SortedSet&lt;/code&gt; インスタンスの変換は、null以外の&lt;a href=&quot;../../java/util/sortedset#comparator--&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt;がある場合、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="9a1428a93985c53305df08261b8b65973bb4ae90" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Soundbank&lt;/code&gt; contains a set of &lt;code&gt;Instruments&lt;/code&gt; that can be loaded into a &lt;code&gt;Synthesizer&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Soundbank&lt;/code&gt; 一連の含まれている &lt;code&gt;Instruments&lt;/code&gt; にロードすることができ &lt;code&gt;Synthesizer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="936fe97b42056562dcee1bb2643c429b7f2dde2d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Soundbank&lt;/code&gt; contains a set of &lt;code&gt;Instruments&lt;/code&gt; that can be loaded into a &lt;code&gt;Synthesizer&lt;/code&gt;. Note that a Java Sound &lt;code&gt;Soundbank&lt;/code&gt; is different from a MIDI bank. MIDI permits up to 16383 banks, each containing up to 128 instruments (also sometimes called programs, patches, or timbres). However, a &lt;code&gt;Soundbank&lt;/code&gt; can contain 16383 times 128 instruments, because the instruments within a &lt;code&gt;Soundbank&lt;/code&gt; are indexed by both a MIDI program number and a MIDI bank number (via a &lt;code&gt;Patch&lt;/code&gt; object). Thus, a &lt;code&gt;Soundbank&lt;/code&gt; can be thought of as a collection of MIDI banks.</source>
          <target state="translated">A &lt;code&gt;Soundbank&lt;/code&gt; 一連の含まれている &lt;code&gt;Instruments&lt;/code&gt; にロードすることができ &lt;code&gt;Synthesizer&lt;/code&gt; 。Java Sound &lt;code&gt;Soundbank&lt;/code&gt; はMIDIバンクとは異なることに注意してください。MIDIは最大16383のバンクを許可し、各バンクには最大128のインストゥルメント（プログラム、パッチ、またはティンバーとも呼ばれる）が含まれます。ただし、 &lt;code&gt;Soundbank&lt;/code&gt; 内のインストゥル &lt;code&gt;Soundbank&lt;/code&gt; はMIDIプログラム番号とMIDIバンク番号の両方（ &lt;code&gt;Patch&lt;/code&gt; オブジェクトを介して）でインデックス付けされるため、Soundbankには16383 &amp;times; 128のインストゥルメントを含めることができます。したがって、 &lt;code&gt;Soundbank&lt;/code&gt; バンクはMIDIバンクのコレクションと考えることができます。</target>
        </trans-unit>
        <trans-unit id="bb71c7f35d20411e9a38b12129e5a3cc399d79a3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankReader&lt;/code&gt; supplies soundbank file-reading services.</source>
          <target state="translated">&lt;code&gt;SoundbankReader&lt;/code&gt; の物資サウンドバンクファイル読み込みサービスを提供しています。</target>
        </trans-unit>
        <trans-unit id="d6ebdda51f94a93f6575dd9124879e379ffd4459" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankReader&lt;/code&gt; supplies soundbank file-reading services. Concrete subclasses of &lt;code&gt;SoundbankReader&lt;/code&gt; parse a given soundbank file, producing a &lt;a href=&quot;../soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt; object that can be loaded into a &lt;a href=&quot;../synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SoundbankReader&lt;/code&gt; の物資サウンドバンクファイル読み込みサービスを提供しています。 &lt;code&gt;SoundbankReader&lt;/code&gt; の具象サブクラスは、指定されたサウンドバンクファイルを解析し、&lt;a href=&quot;../synthesizer&quot;&gt; &lt;code&gt;Synthesizer&lt;/code&gt; に&lt;/a&gt;ロードできる&lt;a href=&quot;../soundbank&quot;&gt; &lt;code&gt;Soundbank&lt;/code&gt; &lt;/a&gt;オブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="6c75af74d3d4959ceb2c10f6ff6fa241a313d323" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SoundbankResource&lt;/code&gt; とは、に格納された任意のオーディオリソース表す &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3778c6c6b603f44bd9513dc8ca46834e3c73bffb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. Common soundbank resources include:</source>
          <target state="translated">A &lt;code&gt;SoundbankResource&lt;/code&gt; とは、に格納された任意のオーディオリソース表す &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 。共通のサウンドバンクリソースには次のものがあります。</target>
        </trans-unit>
        <trans-unit id="b86b63120f1187e9a115af3b0e4d8f77d1520294" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Statement&lt;/code&gt; object represents a primitive statement in which a single method is applied to a target and a set of arguments - as in &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Statement&lt;/code&gt; のよう-オブジェクトは、単一のメソッドをターゲットと引数のセットに適用したプリミティブステートメント表す &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a61be4591e38d6b7a3aa4b3b5d6a361b09587d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Statement&lt;/code&gt; object represents a primitive statement in which a single method is applied to a target and a set of arguments - as in &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt;. Note that where this example uses names to denote the target and its argument, a statement object does not require a name space and is constructed with the values themselves. The statement object associates the named method with its environment as a simple set of values: the target and an array of argument values.</source>
          <target state="translated">&lt;code&gt;Statement&lt;/code&gt; のよう-オブジェクトは、単一のメソッドをターゲットと引数のセットに適用したプリミティブステートメント表す &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt; 。この例では、ターゲットとその引数を示すために名前を使用していますが、ステートメントオブジェクトは名前空間を必要とせず、値自体で構成されています。ステートメントオブジェクトは、名前付きメソッドをその単純な値のセット（ターゲットと引数値の配列）としてその環境に関連付けます。</target>
        </trans-unit>
        <trans-unit id="88b96780c6028bc816e36e9837df5f86754a3912" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; is the factory for &lt;a href=&quot;streamprintservice&quot;&gt;&lt;code&gt;StreamPrintService&lt;/code&gt;&lt;/a&gt; instances, which can print to an output stream in a particular document format described as a mime type.</source>
          <target state="translated">A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; はのために工場で&lt;a href=&quot;streamprintservice&quot;&gt; &lt;code&gt;StreamPrintService&lt;/code&gt; &lt;/a&gt; MIMEタイプとして記載された特定の文書フォーマットで出力ストリームに印刷することができインスタンス。</target>
        </trans-unit>
        <trans-unit id="9f370a18ad256d8838013b96f3fd3a6c57070006" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; is the factory for &lt;a href=&quot;streamprintservice&quot;&gt;&lt;code&gt;StreamPrintService&lt;/code&gt;&lt;/a&gt; instances, which can print to an output stream in a particular document format described as a mime type. A typical output document format may be Postscript(TM).</source>
          <target state="translated">A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; はのために工場で&lt;a href=&quot;streamprintservice&quot;&gt; &lt;code&gt;StreamPrintService&lt;/code&gt; &lt;/a&gt; MIMEタイプとして記載された特定の文書フォーマットで出力ストリームに印刷することができインスタンス。典型的な出力ドキュメント形式はPostscript（TM）です。</target>
        </trans-unit>
        <trans-unit id="b656cee1e6a2645b9dd951fcb66dbb0f94a1a368" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; constant containing the standard format name, &lt;code&gt;&quot;javax_imageio_1.0&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 標準形式名を含む定数、 &lt;code&gt;&quot;javax_imageio_1.0&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53fba3d0e985e2fa295966cac78bdf47bb9cd3fc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the class name of the native stream metadata format supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; このプラグインは、最初にサポートされるネイティブのストリームメタデータ形式のクラス名を含む &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d1c74db349ee872ae5cd9850f6c87be3d51a45e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the name of the associated plug-in class, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; 、関連プラグインクラス、最初の名前を含む &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d45247269dbaf1c1d7689b448b26edb5feef622e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the name of the current compression type, or &lt;code&gt;null&lt;/code&gt; if none is set.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; 現在の圧縮タイプ、または名前を含む &lt;code&gt;null&lt;/code&gt; 何も設定されていない場合。</target>
        </trans-unit>
        <trans-unit id="50a95660663285b02c516594baebaf298fae2baa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the name of the native stream metadata format supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; このプラグインは、最初にサポートされるネイティブのストリームメタデータ形式の名前を含む &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d10ab1d455c0a57466c25555861d5c804559d231" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; represents a string in the UTF-16 format in which &lt;em&gt;supplementary characters&lt;/em&gt; are represented by &lt;em&gt;surrogate pairs&lt;/em&gt; (see the section &lt;a href=&quot;character#unicode&quot;&gt;Unicode Character Representations&lt;/a&gt; in the &lt;code&gt;Character&lt;/code&gt; class for more information). Index values refer to &lt;code&gt;char&lt;/code&gt; code units, so a supplementary character uses two positions in a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; たUTF-16形式の文字列表す&lt;em&gt;補助文字が&lt;/em&gt;で表される&lt;em&gt;サロゲートペア&lt;/em&gt;（節を参照&lt;a href=&quot;character#unicode&quot;&gt;のUnicode文字表現&lt;/a&gt;における &lt;code&gt;Character&lt;/code&gt; 詳細については、クラス）。インデックス値は &lt;code&gt;char&lt;/code&gt; コード単位を参照するため、補助文字は &lt;code&gt;String&lt;/code&gt; の 2つの位置を使用します。</target>
        </trans-unit>
        <trans-unit id="03315933b3ff9b0f30ad43e2ef49e3cb9a6150ad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVendorName&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;. Constructors should set this to a non-&lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; から返される &lt;code&gt;getVendorName&lt;/code&gt; 最初は、 &lt;code&gt;null&lt;/code&gt; 。コンストラクタはこれを &lt;code&gt;null&lt;/code&gt; 以外の値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4f161d6eb22ce16b9243b0894aaae9d6076c8921" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVersion&lt;/code&gt;, initially null. Constructors should set this to a non-&lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; から返される &lt;code&gt;getVersion&lt;/code&gt; 、最初はnull。コンストラクタはこれを &lt;code&gt;null&lt;/code&gt; 以外の値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="843830e38e5ab1ee9ec315a6b3904b915eb4d232" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; is empty if &lt;a href=&quot;stringjoiner#add-java.lang.CharSequence-&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; has never been called, and if &lt;code&gt;merge()&lt;/code&gt; has never been called with a non-empty &lt;code&gt;StringJoiner&lt;/code&gt; argument.</source>
          <target state="translated">A &lt;code&gt;StringJoiner&lt;/code&gt; は場合は空である&lt;a href=&quot;stringjoiner#add-java.lang.CharSequence-&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;呼び出されなかった場合、および &lt;code&gt;merge()&lt;/code&gt; 空でないと呼ばれていない &lt;code&gt;StringJoiner&lt;/code&gt; の引数。</target>
        </trans-unit>
        <trans-unit id="4f01da94ce05781ad0c478fa1fd9874f22c00b82" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; may be employed to create formatted output from a &lt;a href=&quot;stream/stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;stream/collectors#joining-java.lang.CharSequence-&quot;&gt;&lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">A &lt;code&gt;StringJoiner&lt;/code&gt; はからフォーマットされた出力を作成するために使用することができる&lt;a href=&quot;stream/stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;用い&lt;a href=&quot;stream/collectors#joining-java.lang.CharSequence-&quot;&gt; &lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt; &lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="7b30e0d159c48329651d255c8e3e3295c07dcd39" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringTokenizer&lt;/code&gt; object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed.</source>
          <target state="translated">&lt;code&gt;StringTokenizer&lt;/code&gt; はのオブジェクトは、内部的に、文字列内の現在位置がトークン化されるように維持しています。一部の操作は、処理された文字を超えてこの現在の位置を進めます。</target>
        </trans-unit>
        <trans-unit id="5e7436c99924a2c38b8714b1e9dd2189b9fa534e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String[]&lt;/code&gt; can be converted to a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; using &lt;a href=&quot;../../java/util/arrays#asList-T...-&quot;&gt;&lt;code&gt;Arrays.asList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;String[]&lt;/code&gt; に変換することができる &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 使用&lt;a href=&quot;../../java/util/arrays#asList-T...-&quot;&gt; &lt;code&gt;Arrays.asList&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f94dd11ea1cb9c0c1609ce1c124d27fea9c24183" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; may also own security-related attributes, which are referred to as credentials. Sensitive credentials that require special protection, such as private cryptographic keys, are stored within a private credential &lt;code&gt;Set&lt;/code&gt;. Credentials intended to be shared, such as public key certificates or Kerberos server tickets are stored within a public credential &lt;code&gt;Set&lt;/code&gt;. Different permissions are required to access and modify the different credential Sets.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 資格証明書と呼ばれている独自のセキュリティ関連の属性、またしてもよいです。秘密の暗号化キーなどの特別な保護を必要とする機密の資格情報は、秘密の資格情報 &lt;code&gt;Set&lt;/code&gt; 格納されます。公開鍵証明書やKerberosサーバーチケットなどの共有を目的とした資格情報は、公開資格情報 &lt;code&gt;Set&lt;/code&gt; 内に格納されます。異なる資格情報セットにアクセスして変更するには、異なる権限が必要です。</target>
        </trans-unit>
        <trans-unit id="22269baf3728ed9f7d15e4ab750c278b8d5283a9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; represents a grouping of related information for a single entity, such as a person.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 、人物などの単一のエンティティに関する情報のグループ化を表します。</target>
        </trans-unit>
        <trans-unit id="93c8ea0d491d86c0014097b3753fabb605464376" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; represents a grouping of related information for a single entity, such as a person. Such information includes the Subject's identities as well as its security-related attributes (passwords and cryptographic keys, for example).</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 、人物などの単一のエンティティに関する情報のグループ化を表します。このような情報には、サブジェクトのIDとそのセキュリティ関連の属性（パスワードや暗号化キーなど）が含まれます。</target>
        </trans-unit>
        <trans-unit id="b4b96f4b0a834a875a405d5e37faefcc3df3352d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; updates ProtectionDomains with Principals from the &lt;code&gt;Subject&lt;/code&gt; associated with this &lt;code&gt;SubjectDomainCombiner&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; には、からのプリンシパルとのProtectionDomainsを更新 &lt;code&gt;Subject&lt;/code&gt; これに関連し &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; に。</target>
        </trans-unit>
        <trans-unit id="228eae16184e9b6eedf87243ab41ab01541ff465" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SwitchPoint&lt;/code&gt; is an object which can publish state transitions to other threads.</source>
          <target state="translated">A &lt;code&gt;SwitchPoint&lt;/code&gt; 他のスレッドの状態遷移を公開することができるオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="be714f87cf38c5ca9056ac6e6285bffa2e095693" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SwitchPoint&lt;/code&gt; is an object which can publish state transitions to other threads. A switch point is initially in the &lt;em&gt;valid&lt;/em&gt; state, but may at any time be changed to the &lt;em&gt;invalid&lt;/em&gt; state. Invalidation cannot be reversed. A switch point can combine a &lt;em&gt;guarded pair&lt;/em&gt; of method handles into a &lt;em&gt;guarded delegator&lt;/em&gt;. The guarded delegator is a method handle which delegates to one of the old method handles. The state of the switch point determines which of the two gets the delegation.</source>
          <target state="translated">A &lt;code&gt;SwitchPoint&lt;/code&gt; 他のスレッドの状態遷移を公開することができるオブジェクトです。スイッチポイントは最初は&lt;em&gt;有効な&lt;/em&gt;状態&lt;em&gt;です&lt;/em&gt;が、いつでも&lt;em&gt;無効な&lt;/em&gt;状態に変更でき&lt;em&gt;ます&lt;/em&gt;。無効化を元に戻すことはできません。スイッチポイントは、&lt;em&gt;保護&lt;/em&gt;されたメソッドハンドルの&lt;em&gt;ペア&lt;/em&gt;を組み合わせて、&lt;em&gt;保護&lt;/em&gt;された&lt;em&gt;デリゲーター&lt;/em&gt;にすることができます。保護されたデリゲーターは、古いメソッドハンドルの1つにデリゲートするメソッドハンドルです。スイッチポイントの状態によって、2つのうちどちらが委任を取得するかが決まります。</target>
        </trans-unit>
        <trans-unit id="5e52e804a03b2b1c3cf01055a92fe4273f8ee447" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncMode&lt;/code&gt; object represents one of the ways in which a MIDI sequencer's notion of time can be synchronized with a master or slave device.</source>
          <target state="translated">&lt;code&gt;SyncMode&lt;/code&gt; オブジェクトは、時間のMIDIシーケンサーの概念は、マスターまたはスレーブデバイスと同期させることができる方法の1つを表します。</target>
        </trans-unit>
        <trans-unit id="57b963ed2297f7f44f5e670069b94a810a4c2b31" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncMode&lt;/code&gt; object represents one of the ways in which a MIDI sequencer's notion of time can be synchronized with a master or slave device. If the sequencer is being synchronized to a master, the sequencer revises its current time in response to messages from the master. If the sequencer has a slave, the sequencer similarly sends messages to control the slave's timing.</source>
          <target state="translated">&lt;code&gt;SyncMode&lt;/code&gt; オブジェクトは、時間のMIDIシーケンサーの概念は、マスターまたはスレーブデバイスと同期させることができる方法の1つを表します。シーケンサーがマスターに同期されている場合、シーケンサーはマスターからのメッセージに応じて現在の時刻を修正します。シーケンサーにスレーブがある場合、シーケンサーは同様にスレーブのタイミングを制御するメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="20bd756a8d8c45d903c01414a26ff940cfa94c5b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound.</source>
          <target state="translated">A &lt;code&gt;Synthesizer&lt;/code&gt; 音を発生します。</target>
        </trans-unit>
        <trans-unit id="a603b4809d42d4f273b7e8030849821e379b8887" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound. This usually happens when one of the &lt;code&gt;Synthesizer&lt;/code&gt;'s &lt;a href=&quot;midichannel&quot;&gt;&lt;code&gt;MidiChannel&lt;/code&gt;&lt;/a&gt; objects receives a &lt;a href=&quot;midichannel#noteOn-int-int-&quot;&gt;&lt;code&gt;noteOn&lt;/code&gt;&lt;/a&gt; message, either directly or via the &lt;code&gt;Synthesizer&lt;/code&gt; object. Many &lt;code&gt;Synthesizer&lt;/code&gt;s support &lt;code&gt;Receivers&lt;/code&gt;, through which MIDI events can be delivered to the &lt;code&gt;Synthesizer&lt;/code&gt;. In such cases, the &lt;code&gt;Synthesizer&lt;/code&gt; typically responds by sending a corresponding message to the appropriate &lt;code&gt;MidiChannel&lt;/code&gt;, or by processing the event itself if the event isn't one of the MIDI channel messages.</source>
          <target state="translated">A &lt;code&gt;Synthesizer&lt;/code&gt; 音を発生します。これは通常、 &lt;code&gt;Synthesizer&lt;/code&gt; の&lt;a href=&quot;midichannel&quot;&gt; &lt;code&gt;MidiChannel&lt;/code&gt; &lt;/a&gt;オブジェクトの1つが直接または &lt;code&gt;Synthesizer&lt;/code&gt; オブジェクトを介して&lt;a href=&quot;midichannel#noteOn-int-int-&quot;&gt; &lt;code&gt;noteOn&lt;/code&gt; &lt;/a&gt;メッセージを受信したときに発生します。多くの &lt;code&gt;Synthesizer&lt;/code&gt; は &lt;code&gt;Receivers&lt;/code&gt; サポートしており、レシーバーを介してMIDIイベントを &lt;code&gt;Synthesizer&lt;/code&gt; に配信できます。このような場合、 &lt;code&gt;Synthesizer&lt;/code&gt; は通常、対応するメッセージを適切な &lt;code&gt;MidiChannel&lt;/code&gt; に送信するか、イベントがMIDIチャネルメッセージでない場合はイベント自体を処理して応答します。</target>
        </trans-unit>
        <trans-unit id="f4ee297ddf421454f00e52bd94c3be8de88eacbd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SysexMessage&lt;/code&gt; object represents a MIDI system exclusive message.</source>
          <target state="translated">A &lt;code&gt;SysexMessage&lt;/code&gt; のオブジェクトは、MIDIシステムエクスクルーシブメッセージを表しています。</target>
        </trans-unit>
        <trans-unit id="00b7508b878aac3376b48986794450063c3d2c33" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TabularType&lt;/code&gt; is assignable from another &lt;code&gt;TabularType&lt;/code&gt; if they have the same &lt;a href=&quot;opentype#getTypeName--&quot;&gt;typeName&lt;/a&gt; and &lt;a href=&quot;tabulartype#getIndexNames--&quot;&gt;index name list&lt;/a&gt;, and the &lt;a href=&quot;tabulartype#getRowType--&quot;&gt;row type&lt;/a&gt; of the first is assignable from the row type of the second.</source>
          <target state="translated">A &lt;code&gt;TabularType&lt;/code&gt; では、別の割り当て可能である &lt;code&gt;TabularType&lt;/code&gt; でそれらが同じ持っている場合&lt;a href=&quot;opentype#getTypeName--&quot;&gt;型名&lt;/a&gt;と&lt;a href=&quot;tabulartype#getIndexNames--&quot;&gt;インデックス名のリストを&lt;/a&gt;、そして&lt;a href=&quot;tabulartype#getRowType--&quot;&gt;行タイプ&lt;/a&gt;第一の第二の行タイプから割り当て可能です。</target>
        </trans-unit>
        <trans-unit id="bcb12be556933750047f1bf21aca57c7527723b3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TemporalAccessor&lt;/code&gt; represents some form of date and time information. This factory converts the arbitrary temporal object to an instance of &lt;code&gt;ZoneId&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;TemporalAccessor&lt;/code&gt; は、日付と時刻の情報を何らかの形で表しています。このファクトリは、任意の一時オブジェクトを &lt;code&gt;ZoneId&lt;/code&gt; のインスタンスに変換します。</target>
        </trans-unit>
        <trans-unit id="6686144140c8aaa5fced7bb05302a39e575ea1b7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TemporalAccessor&lt;/code&gt; represents some form of date and time information. This factory converts the arbitrary temporal object to an instance of &lt;code&gt;ZoneOffset&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;TemporalAccessor&lt;/code&gt; は、日付と時刻の情報を何らかの形で表しています。このファクトリは、任意の一時オブジェクトを &lt;code&gt;ZoneOffset&lt;/code&gt; のインスタンスに変換します。</target>
        </trans-unit>
        <trans-unit id="c5b7cf009138d5d0f2fff7b982816adbb7fce9da" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; will automatically adjust the pool size (see &lt;a href=&quot;threadpoolexecutor#getPoolSize--&quot;&gt;&lt;code&gt;getPoolSize()&lt;/code&gt;&lt;/a&gt;) according to the bounds set by corePoolSize (see &lt;a href=&quot;threadpoolexecutor#getCorePoolSize--&quot;&gt;&lt;code&gt;getCorePoolSize()&lt;/code&gt;&lt;/a&gt;) and maximumPoolSize (see &lt;a href=&quot;threadpoolexecutor#getMaximumPoolSize--&quot;&gt;&lt;code&gt;getMaximumPoolSize()&lt;/code&gt;&lt;/a&gt;). When a new task is submitted in method &lt;a href=&quot;threadpoolexecutor#execute-java.lang.Runnable-&quot;&gt;&lt;code&gt;execute(Runnable)&lt;/code&gt;&lt;/a&gt;, and fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle. If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full. By setting corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool. By setting maximumPoolSize to an essentially unbounded value such as &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;, you allow the pool to accommodate an arbitrary number of concurrent tasks. Most typically, core and maximum pool sizes are set only upon construction, but they may also be changed dynamically using &lt;a href=&quot;threadpoolexecutor#setCorePoolSize-int-&quot;&gt;&lt;code&gt;setCorePoolSize(int)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;threadpoolexecutor#setMaximumPoolSize-int-&quot;&gt;&lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; は自動的にプールサイズを調整する（参照&lt;a href=&quot;threadpoolexecutor#getPoolSize--&quot;&gt; &lt;code&gt;getPoolSize()&lt;/code&gt; &lt;/a&gt;）corePoolSizeにより設定された限界に従う（参照&lt;a href=&quot;threadpoolexecutor#getCorePoolSize--&quot;&gt; &lt;code&gt;getCorePoolSize()&lt;/code&gt; &lt;/a&gt;）とmaximumPoolSize（参照&lt;a href=&quot;threadpoolexecutor#getMaximumPoolSize--&quot;&gt; &lt;code&gt;getMaximumPoolSize()&lt;/code&gt; &lt;/a&gt;）。メソッド&lt;a href=&quot;threadpoolexecutor#execute-java.lang.Runnable-&quot;&gt; &lt;code&gt;execute(Runnable)&lt;/code&gt; &lt;/a&gt;で新しいタスクが送信され、実行中のスレッドがcorePoolSizeより少ない場合、他のワーカースレッドがアイドル状態であっても、リクエストを処理するために新しいスレッドが作成されます。 corePoolSizeを超えてmaximumPoolSize未満のスレッドが実行されている場合、キューがいっぱいの場合にのみ、新しいスレッドが作成されます。 corePoolSizeとmaximumPoolSizeを同じに設定することで、固定サイズのスレッドプールを作成します。 maximumPoolSizeを次のような本質的に無制限の値に設定する &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; を使用すると、プールが任意の数の同時タスクに対応できるようになります。最も一般的には、コアおよび最大プールサイズは構築時にのみ設定されますが、&lt;a href=&quot;threadpoolexecutor#setCorePoolSize-int-&quot;&gt; &lt;code&gt;setCorePoolSize(int)&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;threadpoolexecutor#setMaximumPoolSize-int-&quot;&gt; &lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt; &lt;/a&gt;を使用して動的に変更することもできます。</target>
        </trans-unit>
        <trans-unit id="eca1f8984467324213270372e3af64cb7babf441" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeUnit&lt;/code&gt; is mainly used to inform time-based methods how a given timing parameter should be interpreted. For example, the following code will timeout in 50 milliseconds if the &lt;a href=&quot;locks/lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt; is not available:</source>
          <target state="translated">A &lt;code&gt;TimeUnit&lt;/code&gt; では、主に所定のタイミングパラメータをどのように解釈するかを時間ベースの方法を知らせるために使用されます。たとえば、&lt;a href=&quot;locks/lock&quot;&gt; &lt;code&gt;lock&lt;/code&gt; &lt;/a&gt;が使用できない場合、次のコードは50ミリ秒でタイムアウトします。</target>
        </trans-unit>
        <trans-unit id="f23aa9e76a05136ff2469933ea4a3b3c24e042ea" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeUnit&lt;/code&gt; represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units.</source>
          <target state="translated">A &lt;code&gt;TimeUnit&lt;/code&gt; では、粒状の所定の単位で時間を表し、単位を変換するユーティリティメソッドを提供し、これらの単位でタイミングおよび遅延操作を実行します。</target>
        </trans-unit>
        <trans-unit id="cbde8d639f9de2af0b3456b7b9535eba31789a55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeUnit&lt;/code&gt; represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units. A &lt;code&gt;TimeUnit&lt;/code&gt; does not maintain time information, but only helps organize and use time representations that may be maintained separately across various contexts. A nanosecond is defined as one thousandth of a microsecond, a microsecond as one thousandth of a millisecond, a millisecond as one thousandth of a second, a minute as sixty seconds, an hour as sixty minutes, and a day as twenty four hours.</source>
          <target state="translated">A &lt;code&gt;TimeUnit&lt;/code&gt; では、粒状の所定の単位で時間を表し、単位を変換するユーティリティメソッドを提供し、これらの単位でタイミングおよび遅延操作を実行します。 A &lt;code&gt;TimeUnit&lt;/code&gt; では、時間情報を維持するが、唯一のさまざまなコンテキスト間で別々に維持することができる時間表現を整理し、使用できますしません。ナノ秒は1000分の1マイクロ秒、マイクロ秒は1000分の1ミリ秒、1ミリ秒は1000分の1秒、1分は60秒、1時間は60分、1日は24時間と定義されます。</target>
        </trans-unit>
        <trans-unit id="cb72ddaf5fa462b8e5b5a29713baefb0b3439f3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Track&lt;/code&gt; occupies a middle level in the hierarchy of data played by a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;: sequencers play sequences, which contain tracks, which contain MIDI events. A sequencer may provide controls that mute or solo individual tracks.</source>
          <target state="translated">A &lt;code&gt;Track&lt;/code&gt; によって演奏されるデータの階層で中間レベルを占め &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; ：シーケンサは、MIDIイベントが含まれているトラックを含む配列を、再生します。シーケンサーは、個々のトラックをミュートまたはソロにするコントロールを提供します。</target>
        </trans-unit>
        <trans-unit id="47f7ecde27375f051e8d2dbe61836c772a17041b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects to one or more &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Transmitter&lt;/code&gt; 送信 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 一個の以上のオブジェクトを &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab5f5a092ccddf7f0ff4eb7494123a9cb8a192eb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects to one or more &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. Common MIDI transmitters include sequencers and MIDI input ports.</source>
          <target state="translated">A &lt;code&gt;Transmitter&lt;/code&gt; 送信 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 一個の以上のオブジェクトを &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 。一般的なMIDIトランスミッターには、シーケンサーとMIDI入力ポートが含まれます。</target>
        </trans-unit>
        <trans-unit id="b58bc0ca4e83b0a96c3a1511203b83099584426f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URL&lt;/code&gt; object for reading the resource, or &lt;code&gt;null&lt;/code&gt; if the resource could not be found</source>
          <target state="translated">リソースを読み取るための &lt;code&gt;URL&lt;/code&gt; オブジェクト、またはリソースが見つからなかった場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a3ae6dcbe03a5258c2de9b5adc43f66d499b2dc9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URL&lt;/code&gt; object for reading the resource, or &lt;code&gt;null&lt;/code&gt; if the resource could not be found or the invoker doesn't have adequate privileges to get the resource.</source>
          <target state="translated">リソースを読み取るための &lt;code&gt;URL&lt;/code&gt; オブジェクト。リソースが見つからなかった場合、または呼び出し元にリソースを取得するための適切な権限がない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e94033eefad59f1c4203f56b39af581faa583c07" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UUID&lt;/code&gt; generated from the specified array</source>
          <target state="translated">A &lt;code&gt;UUID&lt;/code&gt; 指定された配列から生成</target>
        </trans-unit>
        <trans-unit id="21620c1dde73d7df7f4687f50490fccf13363b02" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UUID&lt;/code&gt; with the specified value</source>
          <target state="translated">指定された値を持つ &lt;code&gt;UUID&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="599a7629c98484788296ad2234207d277d0e2d7d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; object is an abstract representation of an identity. It has a &lt;a href=&quot;../../../security/principal#getName--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; that is typically the username or account name that it represents. User principal objects may be obtained using a &lt;a href=&quot;userprincipallookupservice&quot;&gt;&lt;code&gt;UserPrincipalLookupService&lt;/code&gt;&lt;/a&gt;, or returned by &lt;a href=&quot;fileattributeview&quot;&gt;&lt;code&gt;FileAttributeView&lt;/code&gt;&lt;/a&gt; implementations that provide access to identity related attributes. For example, the &lt;a href=&quot;aclfileattributeview&quot;&gt;&lt;code&gt;AclFileAttributeView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt; provide access to a file's &lt;a href=&quot;posixfileattributes#owner--&quot;&gt;&lt;code&gt;owner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UserPrincipal&lt;/code&gt; のオブジェクトは、アイデンティティの抽象表現です。それは持っている&lt;a href=&quot;../../../security/principal#getName--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;一般的に、それが表すユーザ名またはアカウント名です。ユーザープリンシパルオブジェクトは、&lt;a href=&quot;userprincipallookupservice&quot;&gt; &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; &lt;/a&gt;を使用して取得するか、IDに関連する属性へのアクセスを提供する&lt;a href=&quot;fileattributeview&quot;&gt; &lt;code&gt;FileAttributeView&lt;/code&gt; &lt;/a&gt;実装から返すことができます。たとえば、&lt;a href=&quot;aclfileattributeview&quot;&gt; &lt;code&gt;AclFileAttributeView&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; &lt;/a&gt;は、ファイルの&lt;a href=&quot;posixfileattributes#owner--&quot;&gt; &lt;code&gt;owner&lt;/code&gt; &lt;/a&gt;へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="1c1f4741da78dd945ec791bf160e2424b5cc586b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; representing a &lt;em&gt;group identity&lt;/em&gt;, used to determine access rights to objects in a file system.</source>
          <target state="translated">A &lt;code&gt;UserPrincipal&lt;/code&gt; 表す&lt;em&gt;グループIDは&lt;/em&gt;、ファイルシステム内のオブジェクトへのアクセス権を決定するために使用します。</target>
        </trans-unit>
        <trans-unit id="8a116dd3c690ffcfbe35976550ba70d5560c07e7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; representing a &lt;em&gt;group identity&lt;/em&gt;, used to determine access rights to objects in a file system. The exact definition of a group is implementation specific, but typically, it represents an identity created for administrative purposes so as to determine the access rights for the members of the group. Whether an entity can be a member of multiple groups, and whether groups can be nested, are implementation specified and therefore not specified.</source>
          <target state="translated">A &lt;code&gt;UserPrincipal&lt;/code&gt; 表す&lt;em&gt;グループIDは&lt;/em&gt;、ファイルシステム内のオブジェクトへのアクセス権を決定するために使用します。グループの正確な定義は実装固有ですが、通常、グループのメンバーのアクセス権を決定するために管理目的で作成されたIDを表します。エンティティが複数のグループのメンバーになることができるかどうか、およびグループをネストできるかどうかは、実装によって指定されるため、指定されていません。</target>
        </trans-unit>
        <trans-unit id="286c6994b195ff63e6cf6d828ee4b62110a6e467" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VetoableChangeSupport&lt;/code&gt; instance is thread-safe.</source>
          <target state="translated">&lt;code&gt;VetoableChangeSupport&lt;/code&gt; のインスタンスは、スレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="c7c1a5f09da71ded9d9701609b9298eebe4f189a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VoiceStatus&lt;/code&gt; object contains information about the current status of one of the voices produced by a &lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;VoiceStatus&lt;/code&gt; オブジェクトは、によって生成される音声のいずれかの現在のステータスに関する情報が含まれてい&lt;a href=&quot;synthesizer&quot;&gt; &lt;code&gt;Synthesizer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="596e71e7a54065b28311c0799dfe3ff8f15f0487" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VolatileCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target acts like a volatile variable.</source>
          <target state="translated">A &lt;code&gt;VolatileCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲットvolatile変数のような働きをします。</target>
        </trans-unit>
        <trans-unit id="e0d418aa2c0aa5c7b088b46eb9b8c553a1989036" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VolatileCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target acts like a volatile variable. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;VolatileCallSite&lt;/code&gt; sees updates to its call site target immediately, even if the update occurs in another thread. There may be a performance penalty for such tight coupling between threads.</source>
          <target state="translated">A &lt;code&gt;VolatileCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲットvolatile変数のような働きをします。 &lt;code&gt;invokedynamic&lt;/code&gt; のにリンクされている命令 &lt;code&gt;VolatileCallSite&lt;/code&gt; は更新が別のスレッドで発生した場合でも、すぐにその呼び出しサイトのターゲットへの更新を見ています。スレッド間のこのような緊密な結合には、パフォーマンスの低下がある場合があります。</target>
        </trans-unit>
        <trans-unit id="8d9990704b4f7c2fb32800d093417ea36291d6a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ZoneId&lt;/code&gt; can be deserialized in a Java Runtime where the ID is unknown. For example, if a server-side Java Runtime has been updated with a new zone ID, but the client-side Java Runtime has not been updated. In this case, the &lt;code&gt;ZoneId&lt;/code&gt; object will exist, and can be queried using &lt;code&gt;getId&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;getDisplayName&lt;/code&gt; and &lt;code&gt;normalized&lt;/code&gt;. However, any call to &lt;code&gt;getRules&lt;/code&gt; will fail with &lt;code&gt;ZoneRulesException&lt;/code&gt;. This approach is designed to allow a &lt;a href=&quot;zoneddatetime&quot;&gt;&lt;code&gt;ZonedDateTime&lt;/code&gt;&lt;/a&gt; to be loaded and queried, but not modified, on a Java Runtime with incomplete time-zone information.</source>
          <target state="translated">A &lt;code&gt;ZoneId&lt;/code&gt; IDが不明であるJavaランタイムで非直列化することができます。たとえば、サーバー側のJavaランタイムが新しいゾーンIDで更新されているが、クライアント側のJavaランタイムは更新されていない場合。この場合、 &lt;code&gt;ZoneId&lt;/code&gt; オブジェクトが存在し、 &lt;code&gt;getId&lt;/code&gt; 、 &lt;code&gt;equals&lt;/code&gt; 、 &lt;code&gt;hashCode&lt;/code&gt; 、 &lt;code&gt;toString&lt;/code&gt; 、 &lt;code&gt;getDisplayName&lt;/code&gt; 、および &lt;code&gt;normalized&lt;/code&gt; を使用してクエリできます。ただし、 &lt;code&gt;getRules&lt;/code&gt; の呼び出しはすべてZoneRulesExceptionで失敗し &lt;code&gt;ZoneRulesException&lt;/code&gt; 。このアプローチは、不完全なタイムゾーン情報を含むJavaランタイムで&lt;a href=&quot;zoneddatetime&quot;&gt; &lt;code&gt;ZonedDateTime&lt;/code&gt; &lt;/a&gt;をロードおよびクエリできるように設計されていますが、変更はできません。</target>
        </trans-unit>
        <trans-unit id="da505947151bf4272a8a9b83469f5005bb360311" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ZoneId&lt;/code&gt; is used to identify the rules used to convert between an &lt;a href=&quot;instant&quot;&gt;&lt;code&gt;Instant&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;localdatetime&quot;&gt;&lt;code&gt;LocalDateTime&lt;/code&gt;&lt;/a&gt;. There are two distinct types of ID:</source>
          <target state="translated">A &lt;code&gt;ZoneId&lt;/code&gt; 間で変換するために使用されるルールを識別するために使用される&lt;a href=&quot;instant&quot;&gt; &lt;code&gt;Instant&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;localdatetime&quot;&gt; &lt;code&gt;LocalDateTime&lt;/code&gt; &lt;/a&gt;。IDには2つの異なるタイプがあります。</target>
        </trans-unit>
        <trans-unit id="05f3af6a7feaa91622bf80e2250ca79781091904" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ZonedDateTime&lt;/code&gt; holds state equivalent to three separate objects, a &lt;code&gt;LocalDateTime&lt;/code&gt;, a &lt;code&gt;ZoneId&lt;/code&gt; and the resolved &lt;code&gt;ZoneOffset&lt;/code&gt;. The offset and local date-time are used to define an instant when necessary. The zone ID is used to obtain the rules for how and when the offset changes. The offset cannot be freely set, as the zone controls which offsets are valid.</source>
          <target state="translated">A &lt;code&gt;ZonedDateTime&lt;/code&gt; は、 3つの別々のオブジェクトの状態と同等の保持 &lt;code&gt;LocalDateTime&lt;/code&gt; を、 &lt;code&gt;ZoneId&lt;/code&gt; 及び解決 &lt;code&gt;ZoneOffset&lt;/code&gt; 。オフセットとローカルの日時は、必要なときにインスタントを定義するために使用されます。ゾーンIDは、オフセットがいつどのように変更されるかについてのルールを取得するために使用されます。ゾーンは有効なオフセットを制御するため、オフセットを自由に設定することはできません。</target>
        </trans-unit>
        <trans-unit id="fc9cd49ad7b5f59a0d1f4361c3727c4e5c505b5a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; indicating if this instance may now render a GUI.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; このインスタンスがGUIを描画できるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="911789bac1c76b67035efa87a8656de4b6dc167c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; indicating whether or not this object is currently in design time mode.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; このオブジェクトが現在、設計時モードであるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="b410ad56ec7b1440a4b739b5de51c7d451c01a75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows images to be written as a progressive sequence of increasing quality passes. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;ImageWriteParam&lt;/code&gt; で画像品質パスを増加させるのプログレッシブシーケンスとして書き込まれることを可能にします。デフォルトでは、値は &lt;code&gt;false&lt;/code&gt; です。サブクラスは手動で値を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="835d34959de64d4a8d84312a811100962bb32824" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tile width and tile height parameters to be set. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;ImageWriteParam&lt;/code&gt; でタイルの幅と高さのパラメータを設定することができます。デフォルトでは、値は &lt;code&gt;false&lt;/code&gt; です。サブクラスは手動で値を設定する必要があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
